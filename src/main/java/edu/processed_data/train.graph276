class C{  public void printCurrentVolume(){  volume.printCurrent();}  }
class C{  public static String rfc2253toXMLdsig(String dn){  String normalized=normalize(dn,true);  return rfctoXML(normalized);}  }
class C{  void writeFile(File f,String body) throws Exception {  if (f.getParentFile() != null)   f.getParentFile().mkdirs();  Writer out=new FileWriter(f);  try {    out.write(body);  }  finally {    out.close();  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xF90B2293,version=271) public int sceUsbCamWaitReadVideoFrameEnd(){  waitForNextVideoFrame();  return getCurrentVideoImageSize();}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "DefaultFilter.gif",BeanVisual.ICON_PATH + "DefaultFilter_animated.gif");}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] shapefiles;  int numFiles;  String outputFile;  String shortFileName;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFile=args[1];  if ((inputFilesString == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  shapefiles=inputFilesString.split(";");  numFiles=shapefiles.length;  if (numFiles < 2) {    showFeedback("At least two input vector files must be specified.");    return;  }  try {    ShapeFile output=null;    DBFWriter writer=null;    FID=0;    for (int k=0; k < numFiles; k++) {      ShapeFile input=new ShapeFile(shapefiles[k]);      shapeType=input.getShapeType();      numRecs=input.getNumberOfRecords();      shortFileName=input.getShortName();      if (shortFileName.length() > 25) {        String tempString=shortFileName.substring(0,24);        shortFileName=tempString;      }      if (k == 0) {        outputShapeType=shapeType;        output=new ShapeFile(outputFile,outputShapeType);        output.setProjectionStringFromOtherShapefile(new ShapeFile(shapefiles[0]));        DBFField fields[]=new DBFField[3];        fields[0]=new DBFField();        fields[0].setName("FID");        fields[0].setDataType(DBFField.DBFDataType.NUMERIC);        fields[0].setFieldLength(10);        fields[0].setDecimalCount(0);        fields[1]=new DBFField();        fields[1].setName("PARENTFILE");        fields[1].setDataType(DBFField.DBFDataType.STRING);        fields[1].setFieldLength(25);        fields[2]=new DBFField();        fields[2].setName("PFILE_ID");        fields[2].setDataType(DBFField.DBFDataType.NUMERIC);        fields[2].setFieldLength(10);        fields[2].setDecimalCount(0);        String DBFName=output.getDatabaseFile();        writer=new DBFWriter(new File(DBFName));        writer.setFields(fields);      }      if (shapeType != outputShapeType) {        showFeedback("This tool can only work when each input shapefile " + "is of the same type.");        return;      }      oneHundredthTotal=numRecs / 100;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        output.addRecord(record.getGeometry());        FID++;        Object[] rowData=new Object[3];        rowData[0]=new Double(FID);        rowData[1]=shortFileName;        rowData[2]=new Double(k + 1);        writer.addRecord(rowData);        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int recordVariable(CtClass type,String name) throws CompileError {  return gen.recordVariable(type,name,stable);}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm uses genetic search for finding a well scoring " + "Bayes network structure. Genetic search works by having a population of Bayes network structures " + "and allow them to mutate and apply cross over to get offspring. The best network structure "+ "found during the process is returned.";}  }
class C{  public DefaultXYZDataset createSampleDataset1(){  DefaultXYZDataset d=new DefaultXYZDataset();  double[] x1=new double[]{1.0,2.0,3.0};  double[] y1=new double[]{4.0,5.0,6.0};  double[] z1=new double[]{7.0,8.0,9.0};  double[][] data1=new double[][]{x1,y1,z1};  d.addSeries("S1",data1);  double[] x2=new double[]{1.0,2.0,3.0};  double[] y2=new double[]{4.0,5.0,6.0};  double[] z2=new double[]{7.0,8.0,9.0};  double[][] data2=new double[][]{x2,y2,z2};  d.addSeries("S2",data2);  return d;}  }
class C{  public String[] highlight(String field,Query query,TopDocs topDocs,int maxPassages) throws IOException {  Map<String,String[]> res=highlightFields(new String[]{field},query,topDocs,new int[]{maxPassages});  return res.get(field);}  }
class C{  public void toggleCamera(){  if (mVideoProducer != null) {    mVideoProducer.toggleCamera();  }}  }
class C{  public static String center(String str,int size){  return center(str,size," ");}  }
class C{  private static Option findTemplate(String name,Option[] templates){  boolean listAllowed=false;  Option listOption=null;  for (int i=0; i < templates.length; i++) {    if (templates[i].getName().equals(name)) {      return templates[i];    }    if (Type.LIST.equals(templates[i].getType())) {      listAllowed=true;      listOption=templates[i];    }  }  if (listAllowed) {    return listOption;  }  return null;}  }
class C{  public static void storeActiveLicenseProperties(License activeLicense){  if (RapidMiner.getExecutionMode() != ExecutionMode.UI) {    return;  }  File licensePropertiesFile=FileSystemService.getUserConfigFile(LICENSE_PROPERTIES_PATH);  Properties licenseProperties=LicenseTools.loadLastActiveLicenseProperties();  licenseProperties.setProperty(getEditionKey(activeLicense),activeLicense.getProductEdition());  licenseProperties.setProperty(getPrecedenceKey(activeLicense),String.valueOf(activeLicense.getPrecedence()));  if (activeLicense.getExpirationDate() != null) {    String dateString=ISO_DATE_FORMATTER.get().format(activeLicense.getExpirationDate());    licenseProperties.setProperty(getExpirationDateKey(activeLicense),dateString);  } else {    licenseProperties.remove(getExpirationDateKey(activeLicense));  }  try (FileOutputStream out=new FileOutputStream(licensePropertiesFile)){    licenseProperties.store(out,"RapidMiner Studio License Properties");  } catch (  IOException e) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.gui.license.RMLicenseManagerListener.storing_properties_failed",e);  }}  }
class C{  private int indexForNull(){  int index=0;  for (  Object o : _set) {    if (o == null)     return index;    if (o == FREE)     return -1;    index++;  }  return -1;}  }
class C{  public void testSignumPositive(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  @JSFunction public void close(){  this.group.shutdownGracefully();}  }
class C{  public JPAProperty(Property property,int order){  this(property.getNamespace(),property.getLocalName(),property.getValue(),order);}  }
class C{  @Override public boolean matches(ReferenceType refType){  try {    if (refType.sourceName().equals(sourceName)) {      try {        refType.locationsOfLine(linenumber);        return true;      } catch (      AbsentInformationException exc) {      }catch (      ObjectCollectedException exc) {      }    }  } catch (  AbsentInformationException exc) {  }  return false;}  }
class C{  public static boolean registerTransform(final String transformURI){  final boolean added=transforms.add(transformURI);  return added;}  }
class C{  protected String createFilename(Instances inst){  String result;  String name;  name=inst.relationName();  if (getRelationFind().length() > 0) {    name=name.replaceAll(getRelationFind(),getRelationReplace());  }  result=getTestsetDir().getPath() + File.separator;  result+=getTestsetPrefix() + name + getTestsetSuffix();  try {    result=m_env.substitute(result);  } catch (  Exception ex) {  }  return result;}  }
class C{  private ZyInstructionBuilder(){}  }
class C{  @Override public void fillAssignedKeys(Set<String> keys){  TreeSet<String> subKeys=new TreeSet<>();  for (  ExprKraken expr : _exprs) {    subKeys.clear();    expr.fillAssignedKeys(subKeys);    keys.addAll(subKeys);  }}  }
class C{  public ClassificationEvoOptimization(ExampleSet exampleSet,Kernel kernel,double c,int initType,int maxIterations,int generationsWithoutImprovement,int popSize,int selectionType,double tournamentFraction,boolean keepBest,int mutationType,double crossoverProb,boolean showConvergencePlot,boolean showPopulationPlot,ExampleSet holdOutSet,RandomGenerator random,LoggingHandler logging,Operator executingOperator){  super(EvoSVM.createBoundArray(0.0d,exampleSet.size()),EvoSVM.determineMax(c,kernel,exampleSet,selectionType,exampleSet.size()),popSize,exampleSet.size(),initType,maxIterations,generationsWithoutImprovement,selectionType,tournamentFraction,keepBest,mutationType,Double.NaN,crossoverProb,showConvergencePlot,showPopulationPlot,random,logging,executingOperator);  this.exampleSet=exampleSet;  this.holdOutSet=holdOutSet;  this.populationSize=popSize;  this.kernel=kernel;  this.c=getMax(0);  this.ys=new double[exampleSet.size()];  Iterator<Example> reader=exampleSet.iterator();  int index=0;  Attribute label=exampleSet.getAttributes().getLabel();  while (reader.hasNext()) {    Example example=reader.next();    ys[index++]=example.getLabel() == label.getMapping().getPositiveIndex() ? 1.0d : -1.0d;  }  this.optimizationFunction=new ClassificationOptimizationFunction(selectionType == NON_DOMINATED_SORTING_SELECTION);}  }
class C{  public void updateUser(User user) throws UsersRepositoryException {  EntityManager entityManager=entityManagerFactory.createEntityManager();  final EntityTransaction transaction=entityManager.getTransaction();  try {    if (contains(user.getUserName())) {      transaction.begin();      entityManager.merge(user);      transaction.commit();    } else {      getLogger().debug("User not found");      throw new UsersRepositoryException("User " + user.getUserName() + " not found");    }  } catch (  PersistenceException e) {    getLogger().debug("Failed to update user",e);    if (transaction.isActive()) {      transaction.rollback();    }    throw new UsersRepositoryException("Failed to update user " + user.getUserName(),e);  } finally {    entityManager.close();  }}  }
class C{  public NotificationObject(int id){  this.id=id;}  }
class C{  public void addConfigLdif(String configLdif){  if (this._configLdifList == null) {    this._configLdifList=new ArrayList<String>();  }  _configLdifList.add(configLdif);}  }
class C{  private void replaceAttributes(Map<String,String> attributes){  this.attributes.clear();  this.attributes.putAll(attributes);}  }
class C{  public void debug(CharSequence message,Throwable e){  log(Level.FINE,message,e);}  }
class C{  public ProtocolNOK(String message){  super(message);}  }
class C{  public void clearHexImageCache(Set<Coords> coords){  for (  Coords c : coords) {    hexImageCache.remove(c);  }}  }
class C{  public static void addContent(IFile file,StringBuffer buffer,IProgressMonitor monitor) throws CoreException {  boolean force=true;  ByteArrayInputStream stream=new ByteArrayInputStream(buffer.toString().getBytes());  if (file.exists()) {    file.appendContents(stream,IResource.FORCE,monitor);  } else {    file.create(stream,force,monitor);  }}  }
class C{  public void removeAppOffer(Offer offer){  int indexToRemove=getIndex(offer);  if (indexToRemove != -1) {    appOffers.remove(indexToRemove);    notifyDataSetChanged();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:25.742 -0500",hash_original_method="408B9941E0DDFF19B1C3AECDF838B6FF",hash_generated_method="FF386E3A416C3838A3DAC22428C1495D") public void parseForClass(GenericDeclaration genericDecl,String signature){  setInput(genericDecl,signature);  if (!eof) {    parseClassSignature();  } else {    if (genericDecl instanceof Class) {      Class c=(Class)genericDecl;      this.formalTypeParameters=ListOfVariables.EMPTY;      this.superclassType=c.getSuperclass();      this.interfaceTypes=new ListOfTypes(c.getInterfaces());    } else {      this.formalTypeParameters=ListOfVariables.EMPTY;      this.superclassType=Object.class;      this.interfaceTypes=ListOfTypes.EMPTY;    }  }}  }
class C{  public static int optionLength(String option){  if (option.equals("-batchID")) {    return 2;  } else {    return 0;  }}  }
class C{  synchronized public void moveUp(String gcTraceName){  ArgumentChecking.notNull(gcTraceName,"gcTraceName");  GCTrace gcTrace=findGCTrace(gcTraceName);  ErrorReporting.fatalError(gcTrace != null,gcTraceName + " does not exist in the GC trace set");  int index=indexOf(gcTrace);  assert 0 <= index && index < size();  if (index > 0) {    super.remove(gcTrace);    add(index - 1,gcTrace);    listeners.callGCTraceMovedUp(gcTrace);  } else {    ErrorReporting.warning("GC trace " + gcTraceName + " already at small index.");  }}  }
class C{  public synchronized void stop(){  if (this.durationMicros == null) {    if (this.begin == 0) {      throw new IllegalStateException("Span for " + this.name + " has not been started");    }    if (this.end == 0) {      this.end=System.currentTimeMillis();    }    if (this.startNanos != null) {      this.durationMicros=Math.max(1,(nanoTime() - this.startNanos) / 1000);    } else {      this.durationMicros=(this.end - this.begin) * 1000;    }  }}  }
class C{  public static AuthenticationInfo loadAuthenticationInformation() throws ConfigurationException {  return loadAuthenticationInformation((String)null);}  }
class C{  private List<GraphQLExecutionNode> completeValues(ExecutionContext executionContext,GraphQLObjectType parentType,List<GraphQLExecutionNodeValue> values,String fieldName,List<Field> fields,GraphQLOutputType outputType){  GraphQLType fieldType=handleNonNullType(outputType,values,parentType,fields);  if (isPrimitive(fieldType)) {    handlePrimitives(values,fieldName,fieldType);    return Collections.emptyList();  } else   if (isObject(fieldType)) {    return handleObject(executionContext,values,fieldName,fields,fieldType);  } else   if (isList(fieldType)) {    return handleList(executionContext,values,fieldName,fields,parentType,(GraphQLList)fieldType);  } else {    throw new IllegalArgumentException("Unrecognized type: " + fieldType);  }}  }
class C{  protected void parseS() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float x2=parseFloat();skipCommaSpaces();float y2=parseFloat();skipCommaSpaces();float x=parseFloat();skipCommaSpaces();float y=parseFloat();pathHandler.curvetoCubicSmoothAbs(x2,y2,x,y);expectNumber=skipCommaSpaces2();}}  }
class C{  private static void slowDown(final long startTime,final long actDiff){  long ratio=actDiff / UUIDTimer.kMaxClockAdvance;  long delay;  if (ratio < 2L) {    delay=1L;  } else   if (ratio < 10L) {    delay=2L;  } else   if (ratio < 600L) {    delay=3L;  } else {    delay=5L;  }  long waitUntil=startTime + delay;  int counter=0;  do {    try {      Thread.sleep(delay);    } catch (    InterruptedException ie) {    }    delay=1L;    if (++counter > UUIDTimer.MAX_WAIT_COUNT) {      break;    }  } while (System.currentTimeMillis() < waitUntil);}  }
class C{  public void subs(int size,Register dst,Register src1,Register src2){  super.subs(size,dst,src1,src2,getNopExtendType(size),0);}  }
class C{  public static void w(String tag,String s){  if (LOG.WARN >= LOGLEVEL)   Log.w(tag,s);}  }
class C{  protected void removeClearedEntries(){  Entry e;  while ((e=(Entry)referenceQueue.poll()) != null) {    int index=e.hash % table.length;    Entry t=table[index];    if (t == e) {      table[index]=e.next;    } else {      loop:       for (; t != null; ) {        Entry c=t.next;        if (c == e) {          t.next=e.next;          break loop;        }        t=c;      }    }    count--;  }}  }
class C{  public StsdBox(RandomAccessFile fis,long pos){  this.fis=fis;  this.pos=pos;  findBoxAvcc();  findSPSandPPS();}  }
class C{  public boolean breaksFlow(){  return breakTag;}  }
class C{  public boolean isPermissionGranted(@NonNull String permissionsName){  return ActivityCompat.checkSelfPermission(context.getContext(),permissionsName) == PackageManager.PERMISSION_GRANTED;}  }
class C{  void removeMapping(E delegate){  eMapping.remove(delegate);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:17.356 -0400",hash_original_method="8D22C024576C73F0E98A887CEA3397A0",hash_generated_method="DE1F7BF161A1D9CBBDF3DB1F51D1C6A1") public int hashCode(){  if (hash == 0) {    int hash0=11;    hash0=hash0 * 31 + field.hashCode();    hash0=hash0 * 31 + a.hashCode();    hash0=hash0 * 31 + b.hashCode();    if (seed != null) {      for (int i=0; i < seed.length; i++) {        hash0=hash0 * 31 + seed[i];      }    } else {      hash0=hash0 * 31;    }    hash=hash0;  }  return hash;}  }
class C{  public boolean requiresDrawImage(){  return false;}  }
class C{  public SpeechletRequestHandlerException(final String message){  super(message);}  }
class C{  public HomekitStandaloneAccessoryServer createStandaloneAccessory(HomekitAuthInfo authInfo,HomekitAccessory accessory) throws IOException {  return new HomekitStandaloneAccessoryServer(accessory,http,localAddress,authInfo);}  }
class C{  public void removeEdge(final EdgeType edge){  Preconditions.checkArgument(m_edges.remove(edge),"Error: Edge was not part of the graph");  m_nodeToEdges.get(edge.getSource()).remove(edge);  m_nodeToEdges.get(edge.getTarget()).remove(edge);}  }
class C{  private HashMap<String,List<StoragePort>> discoverFcPorts(StorageSystem system,VNXeApiClient client,Map<String,URI> spIdMap) throws VNXeException {  HashMap<String,List<StoragePort>> storagePorts=new HashMap<String,List<StoragePort>>();  List<StoragePort> newStoragePorts=new ArrayList<StoragePort>();  List<StoragePort> existingStoragePorts=new ArrayList<StoragePort>();  _logger.info("Start FC storage port discovery for storage system {}",system.getId());  List<VNXeFCPort> ports=client.getAllFcPorts();  if (ports == null || ports.isEmpty()) {    _logger.info("No FC ports found for the system: {} ",system.getId());    storagePorts.put(NEW,newStoragePorts);    storagePorts.put(EXISTING,existingStoragePorts);    return storagePorts;  }  for (  VNXeFCPort fcPort : ports) {    StoragePort port=null;    VNXeBase spId=fcPort.getStorageProcessorId();    if (spId == null) {      _logger.info("No storage processor info for the fcPort: {}",fcPort.getId());      continue;    }    String spIdStr=spId.getId();    URI haDomainUri=spIdMap.get(spIdStr);    if (haDomainUri == null) {      _logger.info("The sp {} has not been discovered.",spIdStr);      continue;    }    String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,fcPort.getWwn(),NativeGUIDGenerator.PORT);    URIQueryResultList results=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portNativeGuid),results);    if (results.iterator().hasNext()) {      _logger.debug("cross verifying for duplicate port");      StoragePort tmpPort=_dbClient.queryObject(StoragePort.class,results.iterator().next());      _logger.info(String.format("Actual StorageDevice %s : PortGroup found for port %s - Actual PortGroup %s",system.getId(),tmpPort.getPortNetworkId(),tmpPort.getPortGroup()));      if (tmpPort.getStorageDevice().equals(system.getId()) && tmpPort.getPortGroup().equals(spIdStr)) {        port=tmpPort;        _logger.debug("found duplicate fc port {}",fcPort.getWwn());      }    }    if (port == null) {      port=new StoragePort();      port.setId(URIUtil.createId(StoragePort.class));      port.setLabel(portNativeGuid);      port.setTransportType("FC");      port.setNativeGuid(portNativeGuid);      port.setStorageDevice(system.getId());      port.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());      port.setPortName(fcPort.getId());      port.setPortNetworkId(fcPort.getPortWwn());      port.setPortGroup(spIdStr);      port.setStorageHADomain(haDomainUri);      List<Integer> opstatus=fcPort.getOperationalStatus();      Integer ok=2;      if (opstatus.contains(ok)) {        port.setOperationalStatus(StoragePort.OperationalStatus.OK.name());      } else {        port.setOperationalStatus(StoragePort.OperationalStatus.NOT_OK.name());      }      _logger.info("Creating new storage port using NativeGuid : {}, WWN:",portNativeGuid,fcPort.getWwn());      newStoragePorts.add(port);    } else {      existingStoragePorts.add(port);    }    port.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());    port.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());  }  _logger.info("FC port discovery for storage system {} complete",system.getId());  storagePorts.put(NEW,newStoragePorts);  storagePorts.put(EXISTING,existingStoragePorts);  return storagePorts;}  }
class C{  public Fraction reduce(){  if (numerator == 0) {    return equals(ZERO) ? this : ZERO;  }  final int gcd=greatestCommonDivisor(Math.abs(numerator),denominator);  if (gcd == 1) {    return this;  }  return Fraction.getFraction(numerator / gcd,denominator / gcd);}  }
class C{  @Override protected void onSizeChanged(int width,int height,int oldWidth,int oldHeight){  super.onSizeChanged(width,height,oldWidth,oldHeight);}  }
class C{  private boolean shouldExcludeFromConfig(Site site){  return site.getNodeCount() < 1;}  }
class C{  public ReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final int capacity,final float loadFactor){  super(keyType,valueType,capacity,loadFactor,false);}  }
class C{  public void update(float dAngle){  if (vertexBuffer == null) {    ByteBuffer vertexByteBuffer=ByteBuffer.allocateDirect(vertices.length * SIZE_OF_FLOAT);    vertexByteBuffer.order(ByteOrder.nativeOrder());    vertexBuffer=vertexByteBuffer.asFloatBuffer();    vertexBuffer.put(vertices);    vertexBuffer.position(0);  }  float angle=currentAngle;  angle+=dAngle;  currentAngle=angle;  if (coefficient == 0 && latestCoefficient > 0) {    coefficient=Utils.smooth(0,latestCoefficient,SMOOTH_A);  }  float val=(float)Math.sin(angle) * coefficient;  if (prevVal > 0 && val <= 0 || prevVal < 0 && val >= 0) {    coefficient=Utils.smooth(coefficient,latestCoefficient,SMOOTH_A);    waveX=random.nextFloat() * 0.3f * (random.nextBoolean() ? 1 : -1);  }  prevVal=val;  int i=0;  double step=1.0 / POINTS_PER_WAVE;  float posX=Utils.normalizeGl(waveX,fromX,toX);  float posY=Utils.normalizeGl(val,fromY,toY);  for (float time=0; time < 1 - step / 2; time+=step) {    vertices[COORDS_PER_VERTEX * i + 1 + SKIP]=angle;    vertexBuffer.put(COORDS_PER_VERTEX * i + SKIP,Utils.quad(time,vertices[6],posX,vertices[vertices.length - 6]));    vertexBuffer.put(COORDS_PER_VERTEX * i + 1 + SKIP,Utils.quad(time,vertices[7],posY,vertices[vertices.length - 5]));    i++;  }}  }
class C{  public boolean isControlledByWrapper(){  return controlledByWrapper;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public SolrQuery addFacetQuery(String f){  this.add(FacetParams.FACET_QUERY,f);  this.set(FacetParams.FACET,true);  return this;}  }
class C{  public ProjectBuildException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public XmlBuffer(){  this(new StringWriter());}  }
class C{  public ProjectTraceProvider(final INaviProject project){  this.project=project;}  }
class C{  public void selectEntity(int en){  if (clientgui.getClient().getGame().getEntity(en) == null) {    disableButtons();    setNextEnabled(true);    System.err.println("DeploymentDisplay: " + "tried to select non-existant entity: " + en);    return;  }  if ((ce() != null) && ce().isWeapOrderChanged()) {    clientgui.getClient().sendEntityWeaponOrderUpdate(ce());  }  if (clientgui.bv instanceof BoardView1) {    ((BoardView1)clientgui.bv).clearC3Networks();  }  cen=en;  clientgui.setSelectedEntityNum(en);  clientgui.getBoardView().select(null);  clientgui.getBoardView().cursor(null);  if (null != ce()) {    setTurnEnabled(true);    butDone.setEnabled(false);    clientgui.getBoardView().markDeploymentHexesFor(ce());switch (ce().getStartingPos()) {case Board.START_W:      ce().setFacing(1);    ce().setSecondaryFacing(1);  break;case Board.START_SW:ce().setFacing(1);ce().setSecondaryFacing(1);break;case Board.START_S:ce().setFacing(0);ce().setSecondaryFacing(0);break;case Board.START_SE:ce().setFacing(5);ce().setSecondaryFacing(5);break;case Board.START_E:ce().setFacing(5);ce().setSecondaryFacing(5);break;case Board.START_NE:ce().setFacing(4);ce().setSecondaryFacing(4);break;case Board.START_N:ce().setFacing(3);ce().setSecondaryFacing(3);break;case Board.START_NW:ce().setFacing(2);ce().setSecondaryFacing(2);break;case Board.START_ANY:ce().setFacing(0);ce().setSecondaryFacing(0);break;}setAssaultDropEnabled(ce().canAssaultDrop() && ce().getGame().getOptions().booleanOption("assault_drop"));if (!ce().canAssaultDrop() && ce().getGame().getOptions().booleanOption("assault_drop")) {buttons.get(DeployCommand.DEPLOY_ASSAULTDROP).setText(Messages.getString("DeploymentDisplay.AssaultDrop"));assaultDropPreference=false;}List<Entity> loadableUnits=getLoadableEntities();setLoadEnabled(loadableUnits.size() > 0);setUnloadEnabled(ce().getLoadedUnits().size() > 0);setNextEnabled(true);setRemoveEnabled(true);clientgui.mechD.displayEntity(ce());clientgui.mechD.showPanel("movement");clientgui.getMenuBar().setEntity(ce());} else {disableButtons();setNextEnabled(true);}}  }
class C{  public boolean isEmpty(){  return (size == 0);}  }
class C{  public OperationStateException(){  super();}  }
class C{  public void testSetSSLSocketFactory() throws Throwable {  SSLContext ctx=getContext();  SSLServerSocket ss=(SSLServerSocket)ctx.getServerSocketFactory().createServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://localhost:" + ss.getLocalPort());  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();  SSLSocketFactory socketFactory=(SSLSocketFactory)ctx.getSocketFactory();  connection.setSSLSocketFactory(socketFactory);  TestHostnameVerifier hnv_late=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv_late);  SSLSocket peerSocket=(SSLSocket)doInteraction(connection,ss);  checkConnectionStateParameters(connection,peerSocket);  assertTrue("Hostname verification was not done",hnv.verified);  assertFalse("Hostname verification should not be done by this verifier",hnv_late.verified);  assertNotSame("Default SSLSocketFactory should not be used",HttpsURLConnection.getDefaultSSLSocketFactory(),connection.getSSLSocketFactory());  assertSame("Result differs from expected",socketFactory,connection.getSSLSocketFactory());  connection.connect();}  }
class C{  public void deleteShare(String id) throws IsilonException {  delete(_baseUrl.resolve(URI_SMB_SHARES),id,"share");}  }
class C{  public char[][] toArray(){  char[][] result=new char[max + 1][];  for (  Map.Entry<Character,String> entry : map.entrySet()) {    result[entry.getKey()]=entry.getValue().toCharArray();  }  return result;}  }
class C{  public static String[] substringsBetween(String str,String open,String close){  if (str != null && !TextUtils.isEmpty(open) && !TextUtils.isEmpty(close)) {    int strLen=str.length();    if (strLen == 0) {      return new String[]{};    } else {      int closeLen=close.length();      int openLen=open.length();      ArrayList list=new ArrayList();      int end;      for (int pos=0; pos < strLen - closeLen; pos=end + closeLen) {        int start=str.indexOf(open,pos);        if (start < 0) {          break;        }        start+=openLen;        end=str.indexOf(close,start);        if (end < 0) {          break;        }        list.add(str.substring(start,end));      }      return list.isEmpty() ? null : (String[])list.toArray(new String[list.size()]);    }  } else {    return null;  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("ModelValidationEngine[");  sb.append("Validators=#").append(m_validators.size()).append(", ModelChange=#").append(m_modelChangeListeners.size()).append(", DocValidate=#").append(m_docValidateListeners.size()).append("]");  return sb.toString();}  }
class C{  public void clearBuffer(){  if (position <= 0) {    position=0;  } else {    buffer[0]=buffer[position - 1];    position=1;  }}  }
class C{  public SVGOMDescElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  private void addUnicodeExtraFields(ZipArchiveEntry ze,boolean encodable,ByteBuffer name) throws IOException {  if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS || !encodable) {    ze.addExtraField(new UnicodePathExtraField(ze.getName(),name.array(),name.arrayOffset(),name.limit() - name.position()));  }  String comm=ze.getComment();  if (comm != null && !"".equals(comm)) {    boolean commentEncodable=zipEncoding.canEncode(comm);    if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS || !commentEncodable) {      ByteBuffer commentB=getEntryEncoding(ze).encode(comm);      ze.addExtraField(new UnicodeCommentExtraField(comm,commentB.array(),commentB.arrayOffset(),commentB.limit() - commentB.position()));    }  }}  }
class C{  public RegionReinitializedException(String msg,String regionFullPath){  super(msg,regionFullPath);}  }
class C{  public boolean isProspect(){  Object oo=get_Value(COLUMNNAME_IsProspect);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testManual(){  Configuration config=getConfig(1000,1000,true);  config.getEngineDefaults().getMetricsReporting().setThreading(true);}  }
class C{  public static void main(String[] args){  TestTagMisuse tester=new TestTagMisuse();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public void openMenu(String direction){  openMenu(direction,-1,getUIManager().getThemeConstant("sideMenuAnimSpeedInt",300),true);}  }
class C{  private String parseTarget(Class<?> databaseMetaDataClass,Object databaseMetaData){  String url=(String)cache.invokeMethod(databaseMetaDataClass,GET_URL,null,databaseMetaData,null,null,JAVA_SQL_DATABASE_META_DATA_FQN);  return urlExtractor.extractURLfromJDBCURL(url);}  }
class C{  public Rule optWS(){  return ZeroOrMore(FirstOf(comment(),whitespaceChar())).label("ws");}  }
class C{  public void fireActionEvent(MqttToken token){  final String methodName="fireActionEvent";  if (token != null) {    IMqttActionListener asyncCB=token.getActionCallback();    if (asyncCB != null) {      if (token.getException() == null) {        log.fine(CLASS_NAME,methodName,"716",new Object[]{token.internalTok.getKey()});        asyncCB.onSuccess(token);      } else {        log.fine(CLASS_NAME,methodName,"716",new Object[]{token.internalTok.getKey()});        asyncCB.onFailure(token,token.getException());      }    }  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.listenerList=new EventListenerList();  stream.registerValidation(this,10);}  }
class C{  private boolean isAllPortsLooped(List<URI> orderedNetworks,Map<URI,List<StoragePort>> allocatablePorts,Set<String> usedPorts){  for (  URI networkURI : orderedNetworks) {    for (    StoragePort port : allocatablePorts.get(networkURI)) {      if (!usedPorts.contains(port.getPortName())) {        return false;      }    }  }  return true;}  }
class C{  protected int decryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int result[]=new int[4];  int A=BytesTo32bits(src,srcIndex);  int B=BytesTo32bits(src,srcIndex + 4);  int C=BytesTo32bits(src,srcIndex + 8);  int D=BytesTo32bits(src,srcIndex + 12);  CAST_Decipher(A,B,C,D,result);  Bits32ToBytes(result[0],dst,dstIndex);  Bits32ToBytes(result[1],dst,dstIndex + 4);  Bits32ToBytes(result[2],dst,dstIndex + 8);  Bits32ToBytes(result[3],dst,dstIndex + 12);  return BLOCK_SIZE;}  }
class C{  public Who(){  super(KEY);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:17.085 -0400",hash_original_method="DBFAB43DC10C305AAA2F5A4ED4232E05",hash_generated_method="97D7592B797FF65F95E75C69432B963A") public int hashCode(){  return p.hashCode();}  }
class C{  public TDoubleDoubleHashMap(int initialCapacity,float loadFactor,TDoubleHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public static String bytesToSequenceIncCG(final byte[] seq){  return bytesToSequenceIncCG(seq,0,seq.length);}  }
class C{  @Override public void close(){  try {    reader.close();  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  @NotNull public static DOI mintDOI(DOIRegistrationAgency agency,String prefix){  Preconditions.checkNotNull(agency);  Preconditions.checkNotNull(prefix);  String suffix=RandomStringUtils.randomAlphanumeric(6).toLowerCase();  return (agency.equals(DOIRegistrationAgency.EZID)) ? new DOI(prefix + suffix) : new DOI(prefix,suffix);}  }
class C{  boolean makeRoomLRU(){  if (!isCacheFull()) {    return false;  }  int n=cache.size() - (2 * maxCacheSize) / 3;  if (n <= 0) {    return false;  }  Iterator<Object> it=cache.keySet().iterator();  int i=0;  while (i < n && it.hasNext()) {    it.next();    it.remove();    i++;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.593 -0500",hash_original_method="81A59D28753D7C567B4B024877A8C6E6",hash_generated_method="BC97FE5BB7BDA9266C70122C43ED9172") public static boolean isPotentialLocalEmergencyNumber(String number,Context context){  return isLocalEmergencyNumberInternal(number,context,false);}  }
class C{  public static String docToString2(Document domDoc) throws IOException {  try {    TransformerFactory transFact=TransformerFactory.newInstance();    Transformer trans=transFact.newTransformer();    trans.setOutputProperty(OutputKeys.INDENT,"no");    StringWriter sw=new StringWriter();    Result result=new StreamResult(sw);    trans.transform(new DOMSource(domDoc),result);    return sw.toString();  } catch (  Exception ex) {    throw new IOException(String.format("Error converting from doc to string %s",ex.getMessage()));  }}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("RedefineTarg");  targetClass=bpe.location().declaringType();  EventRequestManager erm=vm().eventRequestManager();  MethodEntryRequest mee=erm.createMethodEntryRequest();  mee.addClassFilter("RedefineSubTarg");  mee.enable();  List lastlys=targetClass.methodsByName("lastly");  if (lastlys.size() != 1) {    throw new Exception("TestFailure: Expected one 'lastly' method, found: " + lastlys);  }  Location loc=((Method)(lastlys.get(0))).location();  EventRequest req=erm.createBreakpointRequest(loc);  req.enable();  listenUntilVMDisconnect();  if (!testFailed) {    println("RedefineTest: passed");  } else {    throw new Exception("RedefineTest: failed");  }}  }
class C{  public void processCommandLineArgs(String[] args){  if (args.length > 0)   open(new File(args[0]),ConverterUtils.getLoaderForFile(args[0]));}  }
class C{  public static String joinSizeInfoToKey(String key,int w,int h){  if (w > 0 && h != Integer.MAX_VALUE && h > 0 && h != Integer.MAX_VALUE) {    return new StringBuilder(key).append(SIZE_SP).append(w).append(SIZE_SP).append(h).toString();  }  return key;}  }
class C{  public String dump(){  StringBuilder b=new StringBuilder();  b.append("filename = \"").append(getFilename()).append("\"\n");  b.append("width = ").append(getWidth()).append(", height = ").append(getHeight()).append("\n");  b.append("byteCount = ").append(getByteCount()).append("\n");  b.append("imginfo = \"").append(getImgInfo()).append("\"\n");  String[] plines=getPrintLines();  if (plines.length == 0) {    b.append("No print lines found\n");  } else {    for (int i=0; i < plines.length; i++) {      b.append("print[").append(i).append("] = \"").append(plines[i]).append("\"\n");    }  }  return b.toString();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  protected void onCreateView(LayoutInflater inflater,ViewGroup container){  isCreatedView=true;}  }
class C{  private boolean isCharacterEscapeCharacter(char c){  return c == escape;}  }
class C{  public boolean isExceptionR(){  return (flags & EXCEPTION_R) != 0;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void updateMenu(){  this.removeAll();  for (  WorkspaceComponent component : workspace.getComponentList()) {    JMenu componentMenu=new JMenu(component.getName());    for (    PotentialProducer potentialProducer : component.getPotentialProducers()) {      if (potentialProducer.getDataType() == consumer.getDataType()) {        CouplingMenuItem menuItem=new CouplingMenuItem(workspace,potentialProducer.getDescription(),potentialProducer,consumer);        componentMenu.add(menuItem);      }    }    this.add(componentMenu);  }}  }
class C{  @Override public final float readFloat() throws IOException {  return Float.intBitsToFloat(readInt());}  }
class C{  public static boolean hasVaryAll(Response response){  return hasVaryAll(response.headers());}  }
class C{  private void initializeParser(JsonParser parser) throws IOException {  if (wrapperKeys.isEmpty()) {    return;  }  boolean failed=true;  try {    String match=parser.skipToKey(wrapperKeys);    Preconditions.checkArgument(match != null && parser.getCurrentToken() != JsonToken.END_OBJECT,"wrapper key(s) not found: %s",wrapperKeys);    failed=false;  }  finally {    if (failed) {      parser.close();    }  }}  }
class C{  public TouchExplorer(Context context,AccessibilityManagerService service){  mContext=context;  mAms=service;  mReceivedPointerTracker=new ReceivedPointerTracker(context);  mInjectedPointerTracker=new InjectedPointerTracker();  mTapTimeout=ViewConfiguration.getTapTimeout();  mDetermineUserIntentTimeout=ViewConfiguration.getDoubleTapTimeout();  mDoubleTapTimeout=ViewConfiguration.getDoubleTapTimeout();  mTouchSlop=ViewConfiguration.get(context).getScaledTouchSlop();  mDoubleTapSlop=ViewConfiguration.get(context).getScaledDoubleTapSlop();  mHandler=new Handler(context.getMainLooper());  mPerformLongPressDelayed=new PerformLongPressDelayed();  mExitGestureDetectionModeDelayed=new ExitGestureDetectionModeDelayed();  mGestureLibrary=GestureLibraries.fromRawResource(context,R.raw.accessibility_gestures);  mGestureLibrary.setOrientationStyle(8);  mGestureLibrary.setSequenceType(GestureStore.SEQUENCE_SENSITIVE);  mGestureLibrary.load();  mSendHoverEnterDelayed=new SendHoverDelayed(MotionEvent.ACTION_HOVER_ENTER,true);  mSendHoverExitDelayed=new SendHoverDelayed(MotionEvent.ACTION_HOVER_EXIT,false);  mSendTouchExplorationEndDelayed=new SendAccessibilityEventDelayed(AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_END,mDetermineUserIntentTimeout);  mSendTouchInteractionEndDelayed=new SendAccessibilityEventDelayed(AccessibilityEvent.TYPE_TOUCH_INTERACTION_END,mDetermineUserIntentTimeout);  mDoubleTapDetector=new DoubleTapDetector();  final float density=context.getResources().getDisplayMetrics().density;  mScaledMinPointerDistanceToUseMiddleLocation=(int)(MIN_POINTER_DISTANCE_TO_USE_MIDDLE_LOCATION_DIP * density);  mScaledGestureDetectionVelocity=(int)(GESTURE_DETECTION_VELOCITY_DIP * density);}  }
class C{  public RandomAccessData(){  this(DEFAULT_INITIAL_BUFFER_SIZE);}  }
class C{  private static final SecretKey constructSecretKey(byte[] encodedKey,String encodedKeyAlgorithm){  return (new SecretKeySpec(encodedKey,encodedKeyAlgorithm));}  }
class C{  public static boolean isPropertyModified(final Property property){  for (  final PropertyStatusValues psv : property.getBasicProperty().getPropertyStatusValuesSet())   if (PROPERTY_MODIFY_REASON_ADD_OR_ALTER.equalsIgnoreCase(psv.getPropertyStatus().getStatusCode()))   return true;  return false;}  }
class C{  public long sum(){  Cell[] as=cells;  long sum=base;  if (as != null) {    for (    Cell a : as) {      if (a != null) {        sum+=a.value;      }    }  }  return sum;}  }
class C{  private int min(int a,int b){  if (a < b)   return a;  return b;}  }
class C{  public Color alpha(int alpha){  return rgba(red(),green(),blue(),alpha);}  }
class C{  public static byte[] toByteArray(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  copy(in,out);  return out.toByteArray();}  }
class C{  public AbListViewFooter(Context context,AttributeSet attrs){  super(context,attrs);  initView(context);  setState(STATE_READY);}  }
class C{  public void endRemove(long start,long end){  this.stats.incLong(removesId,1);  this.stats.incLong(removeTimeId,end - start);}  }
class C{  protected JvmMemGCTableMeta createJvmMemGCTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmMemGCTableMeta(mib,objectserver);}  }
class C{  public void testPutByte(){  byte[] expectedResult={3,0,0,1,1,2,3};  MySQLPacket array=new MySQLPacket(0,(byte)1);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try {    array.putByte((byte)1);    array.putByte((byte)2);    array.putByte((byte)3);    array.write(output);    compareBytes(expectedResult,output.toByteArray());  } catch (  IOException e) {    fail("This should not happen!");  }}  }
class C{  protected int insertKey(int val){  int hash, index;  hash=HashFunctions.hash(val) & 0x7fffffff;  index=hash % _states.length;  byte state=_states[index];  consumeFreeSlot=false;  if (state == FREE) {    consumeFreeSlot=true;    insertKeyAt(index,val);    return index;  }  if (state == FULL && _set[index] == val) {    return -index - 1;  }  return insertKeyRehash(val,index,hash,state);}  }
class C{  protected String format(Object o){  return o.toString();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void endCloseCQSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(closeCQSendInProgressId,-1);  int endCloseCQSendId;  if (failed) {    endCloseCQSendId=closeCQSendFailedId;  } else {    endCloseCQSendId=closeCQSendId;  }  this.sendStats.incInt(endCloseCQSendId,1);  this.stats.incLong(closeCQSendDurationId,duration);}  }
class C{  public boolean isDropShip(){  Object oo=get_Value(COLUMNNAME_IsDropShip);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected static int intProperty(String name){  return intProperty(name,0);}  }
class C{  public boolean hasDefClearPath(DefUse targetDU,Set<String> handle){  BytecodeInstruction entry=determineEntryPoint();  return hasDefClearPath(targetDU,entry,handle);}  }
class C{  public void printDocument(String encoding,boolean canonical,String fileName,Node doc) throws UnsupportedEncodingException, IOException {  m_out=new FileWriter(fileName);  m_canonical=canonical;  if (null != encoding) {    DOMWriter.setWriterEncoding(encoding);  }  print(doc);  m_out.close();}  }
class C{  public <T extends Proxy>T retrieveProxy(String proxy){  return (T)proxyMap.get(proxy);}  }
class C{  Population readUrbansimPersons(ActivityFacilitiesImpl parcels,ActivityFacilitiesImpl zones,Network network){  Population oldPopulation=null;  UrbanSimParameterConfigModuleV3 uspModule=getUrbanSimParameterConfig();  if (scenario.getConfig().plans().getInputFile() != null) {    log.info("MATSim is running in WARM/HOT start mode, i.e. MATSim starts with pre-existing pop file:" + scenario.getConfig().plans().getInputFile());    log.info("MATSim will remove persons from plans-file, which are no longer part of the UrbanSim population!");    log.info("New UrbanSim persons will be added.");    oldPopulation=scenario.getPopulation();  } else {    log.warn("No plans-file specified in the travel_model_configuration section (OPUS GUI).");    log.info("(MATSim is running in COLD start mode, i.e. MATSim generates new plans-file from UrbanSim input.)");    oldPopulation=null;  }  Population newPopulation;  if (isParcelMode)   newPopulation=readFromUrbansim.readPersonsParcel(oldPopulation,parcels,network,uspModule.getPopulationSampleRate()); else   newPopulation=readFromUrbansim.readPersonsZone(oldPopulation,zones,network,uspModule.getPopulationSampleRate());  oldPopulation=null;  System.gc();  return newPopulation;}  }
class C{  private Collection<? extends Map<String,String>> mergeRows(VeriniceGraphResult resultSet){  List<Map<String,String>> completelyTraversedRows=resultSet.getCompletelyTraversedRows();  List<Map<String,String>> mergedRows=new ArrayList<>(completelyTraversedRows);  List<Map<String,String>> partlyTraversedRows=new ArrayList<>(resultSet.getPartlyTraversedRows());  Map<String,String> partRow;  while (!partlyTraversedRows.isEmpty()) {    partRow=partlyTraversedRows.remove(0);    boolean isIncluded=false;    for (    Map<String,String> completeTraversedRow : completelyTraversedRows) {      if (isAlreadyIncluded(partRow,completeTraversedRow)) {        isIncluded=true;        break;      }    }    if (!isIncluded) {      mergedRows.add(partRow);    }  }  return mergedRows;}  }
class C{  private void validateFetchInterval(int changed,int getInterval){  if (changed == FetchSchedule.STATUS_UNKNOWN) {    assertEquals(getInterval,interval);  } else   if (changed == FetchSchedule.STATUS_MODIFIED) {    calculateInterval=(int)(interval - (interval * dec_rate));    assertEquals(getInterval,calculateInterval);  } else   if (changed == FetchSchedule.STATUS_NOTMODIFIED) {    calculateInterval=(int)(interval + (interval * inc_rate));    assertEquals(getInterval,calculateInterval);  }}  }
class C{  private BigInteger squareToomCook3(){  int len=mag.length;  int k=(len + 2) / 3;  int r=len - 2 * k;  BigInteger a0, a1, a2;  a2=getToomSlice(k,r,0,len);  a1=getToomSlice(k,r,1,len);  a0=getToomSlice(k,r,2,len);  BigInteger v0, v1, v2, vm1, vinf, t1, t2, tm1, da1;  v0=a0.square();  da1=a2.add(a0);  vm1=da1.subtract(a1).square();  da1=da1.add(a1);  v1=da1.square();  vinf=a2.square();  v2=da1.add(a2).shiftLeft(1).subtract(a0).square();  t2=v2.subtract(vm1).exactDivideBy3();  tm1=v1.subtract(vm1).shiftRight(1);  t1=v1.subtract(v0);  t2=t2.subtract(t1).shiftRight(1);  t1=t1.subtract(tm1).subtract(vinf);  t2=t2.subtract(vinf.shiftLeft(1));  tm1=tm1.subtract(t2);  int ss=k * 32;  return vinf.shiftLeft(ss).add(t2).shiftLeft(ss).add(t1).shiftLeft(ss).add(tm1).shiftLeft(ss).add(v0);}  }
class C{  public BoyerMoore(String pat){  this.R=256;  this.pat=pat;  right=new int[R];  for (int c=0; c < R; c++)   right[c]=-1;  for (int j=0; j < pat.length(); j++)   right[pat.charAt(j)]=j;}  }
class C{  void createFbo(){  fbo=glGenFramebuffersEXT();  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,fbo);  glBindTexture(GL_TEXTURE_2D,depthTexture);  glDrawBuffer(GL_NONE);  glReadBuffer(GL_NONE);  glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT,GL_DEPTH_ATTACHMENT_EXT,GL_TEXTURE_2D,depthTexture,0);  int fboStatus=glCheckFramebufferStatusEXT(GL_FRAMEBUFFER_EXT);  if (fboStatus != GL_FRAMEBUFFER_COMPLETE_EXT) {    throw new AssertionError("Could not create FBO: " + fboStatus);  }  glBindTexture(GL_TEXTURE_2D,0);  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,0);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public RemoteCategoryServiceImpl(final DtoCategoryService dtoCategoryService,final FederationFacade federationFacade){  super(dtoCategoryService);  this.federationFacade=federationFacade;}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,boolean strictQuotes){  this(reader,separator,quotechar,CSVParser.DEFAULT_ESCAPE_CHARACTER,DEFAULT_SKIP_LINES,strictQuotes);}  }
class C{  private boolean tryRelocateShard(Operation operation,ModelNode minNode,ModelNode maxNode,String idx,float minCost){  final ModelIndex index=maxNode.getIndex(idx);  Decision decision=null;  if (index != null) {    if (logger.isTraceEnabled()) {      logger.trace("Try relocating shard for index index [{}] from node [{}] to node [{}]",idx,maxNode.getNodeId(),minNode.getNodeId());    }    final RoutingNode node=routingNodes.node(minNode.getNodeId());    ShardRouting candidate=null;    final AllocationDeciders deciders=allocation.deciders();    final ArrayList<ShardRouting> shards=new ArrayList<>(index.getAllShards());    for (    ShardRouting shard : shards) {      if (shard.started()) {        Decision allocationDecision=deciders.canAllocate(shard,node,allocation);        Decision rebalanceDecision=deciders.canRebalance(shard,allocation);        if (((allocationDecision.type() == Type.YES) || (allocationDecision.type() == Type.THROTTLE)) && ((rebalanceDecision.type() == Type.YES) || (rebalanceDecision.type() == Type.THROTTLE))) {          Decision srcDecision;          if ((srcDecision=maxNode.removeShard(shard)) != null) {            minNode.addShard(shard,srcDecision);            final float delta=weight.weight(operation,this,minNode,idx) - weight.weight(operation,this,maxNode,idx);            if (delta < minCost || (candidate != null && delta == minCost && candidate.id() > shard.id())) {              minCost=delta;              candidate=shard;              decision=new Decision.Multi().add(allocationDecision).add(rebalanceDecision);            }            minNode.removeShard(shard);            maxNode.addShard(shard,srcDecision);          }        }      }    }    if (candidate != null) {      maxNode.removeShard(candidate);      minNode.addShard(candidate,decision);      if (decision.type() == Type.YES) {        if (logger.isTraceEnabled()) {          logger.trace("Relocate shard [{}] from node [{}] to node [{}]",candidate,maxNode.getNodeId(),minNode.getNodeId());        }        if (candidate.started()) {          RoutingNode lowRoutingNode=routingNodes.node(minNode.getNodeId());          routingNodes.relocate(candidate,lowRoutingNode.nodeId(),allocation.clusterInfo().getShardSize(candidate,ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE));        } else {          routingNodes.initialize(candidate,routingNodes.node(minNode.getNodeId()).nodeId(),allocation.clusterInfo().getShardSize(candidate,ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE));        }        return true;      }    }  }  if (logger.isTraceEnabled()) {    logger.trace("Couldn't find shard to relocate from node [{}] to node [{}] allocation decision [{}]",maxNode.getNodeId(),minNode.getNodeId(),decision == null ? "NO" : decision.type().name());  }  return false;}  }
class C{  @SuppressWarnings("unchecked") public static HadoopFileSystemFactoryDelegate fileSystemFactoryDelegate(Object proxy){  String clsName=FACTORY_CLS_MAP.get(proxy.getClass().getName());  if (clsName == null)   clsName=DFLT_FACTORY_CLS;  return newInstance(clsName,null,proxy);}  }
class C{  public Query(String id,String type,long countdown,Map<String,String> schemaKeys){  super(id,type,countdown);  setSchemaKeys(schemaKeys);}  }
class C{  private void lastChanceToQualifyUnknownContent(CrawlURI curi,RecordingInputStream recis) throws IOException {  String charset=extractCharset(curi,recis);  try {    String data=CrawlUtils.convertSourceCodeIntoUtf8(recis,charset).trim();    if (StringUtils.containsIgnoreCase(data,OPEN_HTML_TAG) && StringUtils.containsIgnoreCase(data,END_HTML_TAG)) {      saveHtmlContent(curi,recis);    }  } catch (  Exception e) {    LOGGER.debug("Exception caught when trying to convert unknow Content " + curi.getURI() + " into UTF-8. We deduce this content is not of html type");  }}  }
class C{  public PubsubFuture<Topic> createTopic(final String project,final String topic){  return createTopic(canonicalTopic(project,topic));}  }
class C{  private static void testInitialize(){  if (sContext == null)   throw new ExceptionInInitializerError("Please invoke NoHttp.initialize(Application) on Application#onCreate()");}  }
class C{  public static void serializeTableFeaturesReply(List<OFTableFeaturesStatsReply> tableFeaturesReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  jGen.writeFieldName("tableFeatures");  jGen.writeStartArray();  for (  OFTableFeaturesStatsReply tableFeaturesReply : tableFeaturesReplies) {    for (    OFTableFeatures tableFeature : tableFeaturesReply.getEntries()) {      jGen.writeStartObject();      jGen.writeStringField("version",tableFeature.getVersion().toString());      jGen.writeNumberField("tableId",tableFeature.getTableId().getValue());      jGen.writeStringField("name",tableFeature.getName());      jGen.writeNumberField("metadataMatch",tableFeature.getMetadataMatch().getValue());      jGen.writeNumberField("metadataWrite",tableFeature.getMetadataWrite().getValue());      jGen.writeNumberField("config",tableFeature.getConfig());      jGen.writeNumberField("maxEntries",tableFeature.getMaxEntries());      jGen.writeFieldName("properties");      jGen.writeStartArray();      for (      OFTableFeatureProp properties : tableFeature.getProperties()) {        jGen.writeStartObject();        short type=(short)properties.getType();switch (type) {case OFTableFeaturePropTypeSerializerVer13.INSTRUCTIONS_VAL:          OFTableFeaturePropInstructions propInstruct=(OFTableFeaturePropInstructions)properties;        jGen.writeFieldName("instructions");      jGen.writeStartArray();    for (    OFInstructionId id : propInstruct.getInstructionIds()) {      jGen.writeString(id.getType().toString());    }  jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.INSTRUCTIONS_MISS_VAL:OFTableFeaturePropInstructionsMiss propInstructMiss=(OFTableFeaturePropInstructionsMiss)properties;jGen.writeFieldName("instructionsMiss");jGen.writeStartArray();for (OFInstructionId id : propInstructMiss.getInstructionIds()) {jGen.writeString(id.getType().toString());}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.NEXT_TABLES_VAL:OFTableFeaturePropNextTables propNxtTables=(OFTableFeaturePropNextTables)properties;jGen.writeFieldName("nextTables");jGen.writeStartArray();for (U8 id : propNxtTables.getNextTableIds()) {jGen.writeNumber(id.getValue());}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.NEXT_TABLES_MISS_VAL:OFTableFeaturePropNextTablesMiss propNxtTablesMiss=(OFTableFeaturePropNextTablesMiss)properties;jGen.writeFieldName("nextTablesMiss");jGen.writeStartArray();for (U8 id : propNxtTablesMiss.getNextTableIds()) {jGen.writeNumber(id.getValue());}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WRITE_ACTIONS_VAL:OFTableFeaturePropWriteActions propWrAct=(OFTableFeaturePropWriteActions)properties;jGen.writeFieldName("writeActions");jGen.writeStartArray();for (OFActionId id : propWrAct.getActionIds()) {jGen.writeString(id.getType().toString());}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WRITE_ACTIONS_MISS_VAL:OFTableFeaturePropWriteActionsMiss propWrActMiss=(OFTableFeaturePropWriteActionsMiss)properties;jGen.writeFieldName("writeActionsMiss");jGen.writeStartArray();for (OFActionId id : propWrActMiss.getActionIds()) {jGen.writeString(id.getType().toString());}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.APPLY_ACTIONS_VAL:OFTableFeaturePropApplyActions propAppAct=(OFTableFeaturePropApplyActions)properties;jGen.writeFieldName("applyActions");jGen.writeStartArray();for (OFActionId id : propAppAct.getActionIds()) {jGen.writeString(id.getType().toString());}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.APPLY_ACTIONS_MISS_VAL:OFTableFeaturePropApplyActionsMiss propAppActMiss=(OFTableFeaturePropApplyActionsMiss)properties;jGen.writeFieldName("applyActionsMiss");jGen.writeStartArray();for (OFActionId id : propAppActMiss.getActionIds()) {jGen.writeString(id.getType().toString());}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.MATCH_VAL:OFTableFeaturePropMatch propMatch=(OFTableFeaturePropMatch)properties;jGen.writeFieldName("match");jGen.writeStartArray();for (U32 id : propMatch.getOxmIds()) {jGen.writeString(OXMSerializer.oxmIdToString(id));}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WILDCARDS_VAL:OFTableFeaturePropWildcards propWildcards=(OFTableFeaturePropWildcards)properties;jGen.writeFieldName("wildcards");jGen.writeStartArray();for (U32 id : propWildcards.getOxmIds()) {jGen.writeString(OXMSerializer.oxmIdToString(id));}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WRITE_SETFIELD_VAL:OFTableFeaturePropWriteSetfield propWrSetfield=(OFTableFeaturePropWriteSetfield)properties;jGen.writeFieldName("writeSetfield");jGen.writeStartArray();for (U32 id : propWrSetfield.getOxmIds()) {jGen.writeString(OXMSerializer.oxmIdToString(id));}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WRITE_SETFIELD_MISS_VAL:OFTableFeaturePropWriteSetfieldMiss propWrSetfieldMiss=(OFTableFeaturePropWriteSetfieldMiss)properties;jGen.writeFieldName("writeSetfieldMiss");jGen.writeStartArray();for (U32 id : propWrSetfieldMiss.getOxmIds()) {jGen.writeString(OXMSerializer.oxmIdToString(id));}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.APPLY_SETFIELD_VAL:OFTableFeaturePropApplySetfield propAppSetfield=(OFTableFeaturePropApplySetfield)properties;jGen.writeFieldName("applySetfield");jGen.writeStartArray();for (U32 id : propAppSetfield.getOxmIds()) {jGen.writeString(OXMSerializer.oxmIdToString(id));}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.APPLY_SETFIELD_MISS_VAL:OFTableFeaturePropApplySetfieldMiss propAppSetfieldMiss=(OFTableFeaturePropApplySetfieldMiss)properties;jGen.writeFieldName("applySetfieldMiss");jGen.writeStartArray();for (U32 id : propAppSetfieldMiss.getOxmIds()) {jGen.writeString(OXMSerializer.oxmIdToString(id));}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.EXPERIMENTER_VAL:OFTableFeaturePropExperimenter propExp=(OFTableFeaturePropExperimenter)properties;jGen.writeFieldName("experimenter");jGen.writeStartObject();jGen.writeNumberField("subType",propExp.getSubtype());jGen.writeNumberField("experimenter",propExp.getExperimenter());jGen.writeStringField("data",propExp.getExperimenterData().toString());jGen.writeEndObject();break;case OFTableFeaturePropTypeSerializerVer13.EXPERIMENTER_MISS_VAL:OFTableFeaturePropExperimenterMiss propExpMiss=(OFTableFeaturePropExperimenterMiss)properties;jGen.writeFieldName("experimenterMiss");jGen.writeStartObject();jGen.writeNumberField("subType",propExpMiss.getSubtype());jGen.writeNumberField("experimenter",propExpMiss.getExperimenter());jGen.writeStringField("data",propExpMiss.getExperimenterData().toString());jGen.writeEndObject();break;default :jGen.writeStartObject();jGen.writeEndObject();break;}jGen.writeEndObject();}jGen.writeEndArray();jGen.writeEndObject();}}jGen.writeEndArray();}  }
class C{  public static java.sql.Time toSqlTime(String hourStr,String minuteStr,String secondStr){  java.util.Date newDate=toDate("0","0","0",hourStr,minuteStr,secondStr);  if (newDate != null) {    return new java.sql.Time(newDate.getTime());  } else {    return null;  }}  }
class C{  @Override public void removeChangeListener(AnnotationChangeListener listener){  this.listenerList.remove(AnnotationChangeListener.class,listener);}  }
class C{  Variable memberNamed(long id,String name) throws NoSuchVariableException, PlayerDebugException {  Variable v=null;  Value parent=getSession().getWorkerSession(m_isolateId).getValue(id);  if (parent == null)   throw new NoSuchVariableException(name);  v=parent.getMemberNamed(getSession(),name);  return v;}  }
class C{  protected void serialize(String filename){  classifier.serializeClassifier(filename);}  }
class C{  public MyDialLayerChangeListener(){}  }
class C{  public void addAttribute(GoogleBaseAttributeId attributeId,GmAttribute.Importance importance){  if (attributeIds.contains(attributeId)) {    throw new IllegalArgumentException("Attribute id already registered " + "in the attributes group " + attributeId);  }  attributes.add(new GmAttribute(attributeId,importance));  attributeIds.add(attributeId);}  }
class C{  public static String messageUUID(ReviewDb db) throws OrmException {  int p;  int s;synchronized (uuidLock) {    if (uuidSeq == 0) {      uuidPrefix=db.nextChangeMessageId();      uuidSeq=Integer.MAX_VALUE;    }    p=uuidPrefix;    s=uuidSeq--;  }  String u=IdGenerator.format(IdGenerator.mix(SEED,p));  String l=IdGenerator.format(IdGenerator.mix(p,s));  return u + '_' + l;}  }
class C{  public void toFront(final WorkflowAnnotation anno){  if (anno == null) {    throw new IllegalArgumentException("anno must not be null!");  }synchronized (lock) {    if (annotationsDrawOrder.remove(anno)) {      annotationsDrawOrder.add(anno);    }    if (annotationsEventOrder.remove(anno)) {      annotationsEventOrder.add(0,anno);    }  }}  }
class C{  public static void style(Node node){  NamedNodeMap attributes=node.getAttributes();  if (attributes != null) {    Element element=(Element)node;    StringBuffer styleAttrBuffer=new StringBuffer();    int nAttr=attributes.getLength();    List toBeRemoved=new ArrayList();    for (int i=0; i < nAttr; i++) {      Attr attr=(Attr)attributes.item(i);      String attrName=attr.getName();      if (SVGStylingAttributes.set.contains(attrName)) {        styleAttrBuffer.append(attrName);        styleAttrBuffer.append(CSS_PROPERTY_VALUE_SEPARATOR);        styleAttrBuffer.append(attr.getValue());        styleAttrBuffer.append(CSS_RULE_SEPARATOR);        styleAttrBuffer.append(SPACE);        toBeRemoved.add(attrName);      }    }    if (styleAttrBuffer.length() > 0) {      element.setAttributeNS(null,SVG_STYLE_ATTRIBUTE,styleAttrBuffer.toString().trim());      int n=toBeRemoved.size();      for (int i=0; i < n; i++) {        element.removeAttribute((String)toBeRemoved.get(i));      }    }  }  NodeList children=node.getChildNodes();  int nChildren=children.getLength();  for (int i=0; i < nChildren; i++) {    Node child=children.item(i);    style(child);  }}  }
class C{  protected String convertWord(String word){  word=word.toUpperCase();  if (ignoreList.contains(word)) {    return null;  }  return word;}  }
class C{  public String uri(){  return uri;}  }
class C{  public CollapsedSubtreeLayout(String group){  this(group,Constants.ORIENT_CENTER);}  }
class C{  public static ICluster joinAwait(Address... seedMembers){  try {    return join(seedMembers).get();  } catch (  Exception e) {    throw Throwables.propagate(Throwables.getRootCause(e));  }}  }
class C{  public static final void drawPoint(GL2 gl,Vector2 p){  RenderUtilities.drawPoint(gl,p.x,p.y);}  }
class C{  public LogRecordWithDLSN readOp() throws IOException {  LogRecordWithDLSN nextRecordInStream;  while (true) {    if (lastRecordSkipTo != null) {      nextRecordInStream=lastRecordSkipTo;      recordStream.advance(1);      lastRecordSkipTo=null;      return nextRecordInStream;    }    if (recordSetReader != null) {      nextRecordInStream=recordSetReader.nextRecord();      if (null != nextRecordInStream) {        recordStream.advance(1);        return nextRecordInStream;      } else {        recordSetReader=null;      }    }    try {      long metadata=in.readLong();      nextRecordInStream=new LogRecordWithDLSN(recordStream.getCurrentPosition(),startSequenceId);      nextRecordInStream.setMetadata(metadata);      nextRecordInStream.setTransactionId(in.readLong());      nextRecordInStream.readPayload(in);      if (LOG.isTraceEnabled()) {        if (nextRecordInStream.isControl()) {          LOG.trace("Reading {} Control DLSN {}",recordStream.getName(),nextRecordInStream.getDlsn());        } else {          LOG.trace("Reading {} Valid DLSN {}",recordStream.getName(),nextRecordInStream.getDlsn());        }      }      int numRecords=1;      if (!deserializeRecordSet && nextRecordInStream.isRecordSet()) {        numRecords=LogRecordSet.numRecords(nextRecordInStream);      }      if (deserializeRecordSet && nextRecordInStream.isRecordSet()) {        recordSetReader=LogRecordSet.of(nextRecordInStream);      } else {        recordStream.advance(numRecords);        return nextRecordInStream;      }    } catch (    EOFException eof) {      break;    }  }  return null;}  }
class C{  @Override public String toString(){  return value;}  }
class C{  private void addCallToAction(RequestAndResponse requestAndResponse) throws IOException {  if (!doesUserHaveAnyNotebooks(requestAndResponse)) {    requestAndResponse.print(servletText.callToAction(allowSaveIfNotSignedIn));  } else {    requestAndResponse.print(servletText.viewYourNotebooks());  }}  }
class C{  protected NondominatedPopulation runSingleSeed(int seed,int numberOfSeeds,TerminationCondition terminationCondition){  if (algorithmName == null) {    throw new IllegalArgumentException("no algorithm specified");  }  if ((problemName == null) && (problemClass == null) && (problemInstance == null)) {    throw new IllegalArgumentException("no problem specified");  }  Problem problem=null;  Algorithm algorithm=null;  ExecutorService executor=null;  try {    problem=getProblemInstance();    try {      if (executorService != null) {        problem=new DistributedProblem(problem,executorService);      } else       if (numberOfThreads > 1) {        executor=Executors.newFixedThreadPool(numberOfThreads);        problem=new DistributedProblem(problem,executor);      }      NondominatedPopulation result=newArchive();      try {        if (algorithmFactory == null) {          algorithm=AlgorithmFactory.getInstance().getAlgorithm(algorithmName,properties.getProperties(),problem);        } else {          algorithm=algorithmFactory.getAlgorithm(algorithmName,properties.getProperties(),problem);        }        if (checkpointFile != null) {          algorithm=new Checkpoints(algorithm,checkpointFile,checkpointFrequency);        }        if (instrumenter != null) {          algorithm=instrumenter.instrument(algorithm);        }        terminationCondition.initialize(algorithm);        while (!algorithm.isTerminated() && !terminationCondition.shouldTerminate(algorithm)) {          if (isCanceled.get()) {            return null;          }          algorithm.step();          progress.setCurrentNFE(algorithm.getNumberOfEvaluations());        }        result.addAll(algorithm.getResult());      }  finally {        if (algorithm != null) {          algorithm.terminate();        }      }      return result;    }  finally {      if (executor != null) {        executor.shutdown();      }    }  }  finally {    if ((problem != null) && (problem != this.problemInstance)) {      problem.close();    }  }}  }
class C{  public boolean increment(double key){  return adjustValue(key,1);}  }
class C{  public SVGOMHandlerElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public static void addConnections(Vector<BeanConnection> connections){  TABBED_CONNECTIONS.add(connections);}  }
class C{  private void rotate(){  int[] newpixels=new int[width * height];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      newpixels[y * width + x]=rotatedPixel(x,y);    }  }  raster=newpixels;}  }
class C{  private void hideInfo(int delay){  mHandler.sendEmptyMessageDelayed(FADE_OUT_INFO,delay);}  }
class C{  static String[] buildKeySelectionArgs(ReadableArray keys,int start,int count){  String[] selectionArgs=new String[count];  for (int keyIndex=0; keyIndex < count; keyIndex++) {    selectionArgs[keyIndex]=keys.getString(start + keyIndex);  }  return selectionArgs;}  }
class C{  public int size(){  return size;}  }
class C{  public OutputNode writeElement(OutputNode parent,String name) throws Exception {  if (stack.isEmpty()) {    return writeStart(parent,name);  }  if (stack.contains(parent)) {    OutputNode top=stack.top();    if (!isCommitted(top)) {      writeStart(top);    }    while (stack.top() != parent) {      writeEnd(stack.pop());    }    if (!stack.isEmpty()) {      writeValue(parent);    }    return writeStart(parent,name);  }  return null;}  }
class C{  public void error(String msg,Object[] args) throws TransformerException {  java.lang.String fmsg=XSLMessages.createXPATHMessage(msg,args);  if (null != m_errorHandler) {    m_errorHandler.fatalError(new TransformerException(fmsg,m_locator));  } else {    throw new TransformerException(fmsg,(SAXSourceLocator)m_locator);  }}  }
class C{  public static boolean isRegistered(String functionId){  return functionSvcMgr.isRegistered(functionId);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getComment_();}  }
class C{  private void listZones(){  final Iterator<IRPZone> itr=SingletonRepository.getRPWorld().iterator();  zones=new ArrayList<StendhalRPZone>();  final List<String> badZones=new ArrayList<String>();  badZones.add("0_nalwor_city");  badZones.add("0_orril_castle");  badZones.add("0_ados_swamp");  badZones.add("0_ados_outside_w");  badZones.add("0_ados_wall_n");  badZones.add("0_fado_forest_se");  badZones.add("0_fado_forest_s_e2");  badZones.add("0_semos_mountain_n_w4");  badZones.add("0_ados_city_n");  badZones.add("0_ados_ocean_e");  badZones.add("0_athor_island_w");  badZones.add("0_nalwor_forest_n");  badZones.add("0_nalwor_river_s");  while (itr.hasNext()) {    final StendhalRPZone aZone=(StendhalRPZone)itr.next();    final String zoneName=aZone.getName();    if (zoneName.startsWith(zoneStartsWithLimiter) && !badZones.contains(zoneName)) {      zones.add(aZone);    }  }}  }
class C{  private void assertCostReceipt(CostResult costResult,int M_InOutLine_ID,MAcctSchema as,String trxName){  MCost cost=assertCost(costResult);  String whereClause="M_Product_ID=? AND M_CostElement_ID=? AND M_CostType_ID=? AND M_InOutLine_ID=?";  ArrayList<Object> parameters=new ArrayList();  parameters.add(costResult.M_Product_ID);  parameters.add(cost.getM_CostElement_ID());  parameters.add(cost.getM_CostType_ID());  parameters.add(M_InOutLine_ID);  assertCostDetail(costResult,whereClause,parameters);}  }
class C{  public CompiledScript compile(final String script,final String language) throws ScriptException {  if (!scriptEngines.containsKey(language))   throw new IllegalArgumentException("Language [%s] not supported");  awaitControlOp();  final ScriptEngine scriptEngine=scriptEngines.get(language);  if (!Compilable.class.isAssignableFrom(scriptEngine.getClass()))   throw new UnsupportedOperationException(String.format("ScriptEngine for %s does not implement %s",language,Compilable.class.getName()));  final Compilable compilable=(Compilable)scriptEngine;  return compilable.compile(script);}  }
class C{  public JBBPNumericField remove(final JBBPNamedFieldInfo nameInfo){  JBBPUtils.assertNotNull(nameInfo,"Name info must not be null");  return this.fieldMap.remove(nameInfo);}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  public static void turnScreenOn(Activity context){  try {    Window window=context.getWindow();    window.addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);    window.addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);    window.addFlags(WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);  } catch (  Exception ex) {    Log.e("PercolateAndroidUtils","Unable to turn on screen for activity " + context);  }}  }
class C{  public static void typeface(View view,TypefaceCollection typefaceCollection){  if (view instanceof ViewGroup) {    applyTypeface((ViewGroup)view,typefaceCollection);  } else {    applyForView(view,typefaceCollection);  }}  }
class C{  public boolean isShowingBackArrow(){  return mIsBack;}  }
class C{  public static boolean isLinked(ParseUser user){  return user.isLinked(AUTH_TYPE);}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  protected void disableButtons(){  setFireEnabled(false);  setSkipEnabled(false);  setTwistEnabled(false);  setSpotEnabled(false);  setFindClubEnabled(false);  buttons.get(FiringCommand.FIRE_MORE).setEnabled(false);  setNextEnabled(false);  butDone.setEnabled(false);  setNextTargetEnabled(false);  setFlipArmsEnabled(false);  setFireModeEnabled(false);  setFireCalledEnabled(false);  setFireClearTurretEnabled(false);  setFireClearWeaponJamEnabled(false);  setStrafeEnabled(false);}  }
class C{  public int available() throws IOException {  if (in == null)   in=owner.readNotify();  return in.available();}  }
class C{  private void readObject(){}  }
class C{  private void informViewNotification(final ViewNotificationContainer viewNotificationContainer,final SQLProvider provider) throws CouldntLoadDataException {  if (viewNotificationContainer.getDatabaseOperation().equals("INSERT")) {    return;  }  if (viewNotificationContainer.getDatabaseOperation().equals("UPDATE")) {    final Integer viewId=viewNotificationContainer.getViewId();    final INaviView view=viewNotificationContainer.getView().get();    final ImmutableNaviViewConfiguration databaseViewConfiguration=view.getConfiguration().getModule() == null ? provider.loadFlowGraphInformation(view.getConfiguration().getProject(),viewId) : provider.loadFlowGraphInformation(view.getConfiguration().getModule(),viewId);    if (databaseViewConfiguration == null) {      return;    }    if (!databaseViewConfiguration.getName().equals(view.getConfiguration().getName())) {      view.getConfiguration().setNameInternal(databaseViewConfiguration.getName());    }    if (databaseViewConfiguration.getDescription() != view.getConfiguration().getDescription() && !databaseViewConfiguration.getDescription().equals(view.getConfiguration().getDescription())) {      view.getConfiguration().setDescriptionInternal(databaseViewConfiguration.getDescription());    }    if (databaseViewConfiguration.getStarState() != view.getConfiguration().isStared()) {      view.getConfiguration().setStaredInternal(databaseViewConfiguration.getStarState());    }    view.getConfiguration().setModificationDateInternal(databaseViewConfiguration.getModificationDate());  }  if (viewNotificationContainer.getDatabaseOperation().equals("DELETE")) {    return;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:37.254 -0500",hash_original_method="C7211512AD90131E871DA498CB7C5AD4",hash_generated_method="DA584F5F25762FF40F97F84C56ADD308") public boolean match(final Cookie cookie,final CookieOrigin origin){  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  String host=origin.getHost().toLowerCase(Locale.ENGLISH);  String cookieDomain=cookie.getDomain();  if (!domainMatch(host,cookieDomain)) {    return false;  }  String effectiveHostWithoutDomain=host.substring(0,host.length() - cookieDomain.length());  return effectiveHostWithoutDomain.indexOf('.') == -1;}  }
class C{  public void readFromNBT(NBTTagCompound nbt){  this.linkedChunks.clear();  NBTTagList referenceChunkList=nbt.getTagList("ReferenceChunks",Constants.NBT.TAG_COMPOUND);  for (int i=0; i < referenceChunkList.tagCount(); i++) {    NBTTagCompound referenceChunkNbt=referenceChunkList.getCompoundTagAt(i);    this.linkedChunks.add(new ChunkPos(referenceChunkNbt.getInteger("x"),referenceChunkNbt.getInteger("z")));  }  if (this.capabilities != null && nbt.hasKey("ForgeCaps"))   this.capabilities.deserializeNBT(nbt.getCompoundTag("ForgeCaps"));}  }
class C{  public TextAreaFigure(){  this(ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels").getString("TextFigure.defaultText"));}  }
class C{  public boolean changesExist(){  if (workspaceChanged) {    return true;  } else {    boolean hasChanged=false;synchronized (componentList) {      for (      WorkspaceComponent component : componentList) {        if (component.hasChangedSinceLastSave()) {          hasChanged=true;        }      }    }    return hasChanged;  }}  }
class C{  public void completeTx(SendRequest req) throws InsufficientMoneyException {  lock.lock();  try {    checkArgument(!req.completed,"Given SendRequest has already been completed.");    Coin value=Coin.ZERO;    for (    TransactionOutput output : req.tx.getOutputs()) {      value=value.add(output.getValue());    }    log.info("Completing send tx with {} outputs totalling {} (not including fees)",req.tx.getOutputs().size(),value.toFriendlyString());    Coin totalInput=Coin.ZERO;    for (    TransactionInput input : req.tx.getInputs())     if (input.getConnectedOutput() != null)     totalInput=totalInput.add(input.getConnectedOutput().getValue()); else     log.warn("SendRequest transaction already has inputs but we don't know how much they are worth - they will be added to fee.");    value=value.subtract(totalInput);    List<TransactionInput> originalInputs=new ArrayList<TransactionInput>(req.tx.getInputs());    if (req.ensureMinRequiredFee && !req.emptyWallet) {      int opReturnCount=0;      for (      TransactionOutput output : req.tx.getOutputs()) {        if (output.isDust())         throw new DustySendRequested();        if (output.getScriptPubKey().isOpReturn())         ++opReturnCount;      }      if (opReturnCount > 1)       throw new MultipleOpReturnRequested();    }    List<TransactionOutput> candidates=calculateAllSpendCandidates(true,req.missingSigsMode == MissingSigsMode.THROW);    CoinSelection bestCoinSelection;    TransactionOutput bestChangeOutput=null;    if (!req.emptyWallet) {      FeeCalculation feeCalculation=calculateFee(req,value,originalInputs,req.ensureMinRequiredFee,candidates);      bestCoinSelection=feeCalculation.bestCoinSelection;      bestChangeOutput=feeCalculation.bestChangeOutput;    } else {      checkState(req.tx.getOutputs().size() == 1,"Empty wallet TX must have a single output only.");      CoinSelector selector=req.coinSelector == null ? coinSelector : req.coinSelector;      bestCoinSelection=selector.select(params.getMaxMoney(),candidates);      candidates=null;      req.tx.getOutput(0).setValue(bestCoinSelection.valueGathered);      log.info("  emptying {}",bestCoinSelection.valueGathered.toFriendlyString());    }    for (    TransactionOutput output : bestCoinSelection.gathered)     req.tx.addInput(output);    if (req.emptyWallet) {      final Coin feePerKb=req.feePerKb == null ? Coin.ZERO : req.feePerKb;      if (!adjustOutputDownwardsForFee(req.tx,bestCoinSelection,feePerKb,req.ensureMinRequiredFee))       throw new CouldNotAdjustDownwards();    }    if (bestChangeOutput != null) {      req.tx.addOutput(bestChangeOutput);      log.info("  with {} change",bestChangeOutput.getValue().toFriendlyString());    }    if (req.shuffleOutputs)     req.tx.shuffleOutputs();    if (req.signInputs)     signTransaction(req);    final int size=req.tx.unsafeBitcoinSerialize().length;    if (size > Transaction.MAX_STANDARD_TX_SIZE)     throw new ExceededMaxTransactionSize();    final Coin calculatedFee=req.tx.getFee();    if (calculatedFee != null)     log.info("  with a fee of {}/kB, {} for {} bytes",calculatedFee.multiply(1000).divide(size).toFriendlyString(),calculatedFee.toFriendlyString(),size);    req.tx.getConfidence().setSource(TransactionConfidence.Source.SELF);    req.tx.setPurpose(Transaction.Purpose.USER_PAYMENT);    req.tx.setExchangeRate(req.exchangeRate);    req.tx.setMemo(req.memo);    req.completed=true;    log.info("  completed: {}",req.tx);  }  finally {    lock.unlock();  }}  }
class C{  private void addOrUpdateEnd(int address,Disposition disposition,RegisterSpec spec){  if (disposition == Disposition.START) {    throw new RuntimeException("shouldn't happen");  }  int regNum=spec.getReg();  int endAt=endIndices[regNum];  if (endAt >= 0) {    Entry endEntry=result.get(endAt);    if ((endEntry.getAddress() == address) && endEntry.getRegisterSpec().equals(spec)) {      result.set(endAt,endEntry.withDisposition(disposition));      regs.remove(spec);      return;    }  }  endLocal(address,spec,disposition);}  }
class C{  public Categories(List<String> categories){  super(categories);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Nonnull public BugInstance addMethod(MethodGen methodGen,String sourceFile){  String className=methodGen.getClassName();  MethodAnnotation methodAnnotation=new MethodAnnotation(className,methodGen.getName(),methodGen.getSignature(),methodGen.isStatic());  addMethod(methodAnnotation);  addSourceLinesForMethod(methodAnnotation,SourceLineAnnotation.fromVisitedMethod(methodGen,sourceFile));  return this;}  }
class C{  @Override public boolean fire(final Player player,final Sentence sentence,final Entity npc){  final String temp=player.getQuest(questSlot,questIndex);  if (temp == null) {    return false;  }  final List<String> tokens=Arrays.asList(temp.split(","));  if ((tokens.size() % 5) != 0) {    logger.error("Wrong record in player's " + player.getName() + " quest slot ("+ questSlot+ "), position "+ questIndex+ " : ["+ player.getQuest(questSlot)+ "]");    return false;  }  int sum=0;  for (int i=0; i < tokens.size() / 5; i++) {    final String creatureName=tokens.get(i * 5);    int killedSolo;    int killedShared;    try {      killedSolo=Integer.parseInt(tokens.get(i * 5 + 3));      killedShared=Integer.parseInt(tokens.get(i * 5 + 4));    } catch (    NumberFormatException npe) {      logger.error("NumberFormatException while parsing numbers in quest slot " + questSlot + " of player "+ player.getName()+ " , creature "+ i * 5);      return false;    }    final int diffSolo=player.getSoloKill(creatureName) - killedSolo;    final int diffShared=player.getSharedKill(creatureName) - killedShared;    sum=sum + diffSolo + diffShared;  }  if (sum < killsSum) {    return false;  }  return true;}  }
class C{  static long readMillis(DataInput in) throws IOException {  int v=in.readUnsignedByte();switch (v >> 6) {case 0:default :    v=(v << (32 - 6)) >> (32 - 6);  return v * (30 * 60000L);case 1:v=(v << (32 - 6)) >> (32 - 30);v|=(in.readUnsignedByte()) << 16;v|=(in.readUnsignedByte()) << 8;v|=(in.readUnsignedByte());return v * 60000L;case 2:long w=(((long)v) << (64 - 6)) >> (64 - 38);w|=(in.readUnsignedByte()) << 24;w|=(in.readUnsignedByte()) << 16;w|=(in.readUnsignedByte()) << 8;w|=(in.readUnsignedByte());return w * 1000L;case 3:return in.readLong();}}  }
class C{  private boolean validate(InputNode node,Class type) throws Exception {  while (true) {    InputNode next=node.getNext();    Class expect=entry.getType();    if (next == null) {      return true;    }    root.validate(next,expect);  }}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 27:{        addToken(Token.PREPROCESSOR);      }case 30:    break;case 7:{    addNullToken();    return firstToken;  }case 31:break;case 24:{addToken(Token.LITERAL_CHAR);}case 32:break;case 21:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 33:break;case 17:{start=zzMarkedPos - 2;yybegin(MLC);}case 34:break;case 9:{addToken(Token.WHITESPACE);}case 35:break;case 26:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 36:break;case 18:{addToken(Token.ERROR_CHAR);}case 37:break;case 25:{addToken(Token.ERROR_STRING_DOUBLE);}case 38:break;case 14:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 39:break;case 15:{addToken(Token.RESERVED_WORD);}case 40:break;case 5:{addToken(Token.SEPARATOR);}case 41:break;case 2:{addToken(Token.IDENTIFIER);}case 42:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 43:break;case 16:{start=zzMarkedPos - 2;yybegin(EOL_COMMENT);}case 44:break;case 22:{addToken(Token.FUNCTION);}case 45:break;case 6:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 46:break;case 8:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 47:break;case 23:{addToken(Token.DATA_TYPE);}case 48:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 49:break;case 19:{addToken(Token.ERROR_CHAR);}case 50:break;case 20:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 51:break;case 29:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 52:break;case 28:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 53:break;case 13:{addToken(Token.ERROR_NUMBER_FORMAT);}case 54:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 55:break;case 4:{addToken(Token.OPERATOR);}case 56:break;case 10:{}case 57:break;case 11:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 58:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 501:break;case YYINITIAL:{addNullToken();return firstToken;}case 502:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 503:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public synchronized void cleanInprogressJobMap(){  inprogressTaskMap.clear();}  }
class C{  static Automaton totalize(Automaton a){  Automaton result=new Automaton();  int numStates=a.getNumStates();  for (int i=0; i < numStates; i++) {    result.createState();    result.setAccept(i,a.isAccept(i));  }  int deadState=result.createState();  result.addTransition(deadState,deadState,Character.MIN_CODE_POINT,Character.MAX_CODE_POINT);  Transition t=new Transition();  for (int i=0; i < numStates; i++) {    int maxi=Character.MIN_CODE_POINT;    int count=a.initTransition(i,t);    for (int j=0; j < count; j++) {      a.getNextTransition(t);      result.addTransition(i,t.dest,t.min,t.max);      if (t.min > maxi) {        result.addTransition(i,deadState,maxi,t.min - 1);      }      if (t.max + 1 > maxi) {        maxi=t.max + 1;      }    }    if (maxi <= Character.MAX_CODE_POINT) {      result.addTransition(i,deadState,maxi,Character.MAX_CODE_POINT);    }  }  result.finishState();  return result;}  }
class C{  public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  void validate(int columnIndex){  updateColumnMaps(columnIndex);  checkForDuplicates();  checkEmptySelection(columnIndex);  checkIfUpdate(columnIndex);}  }
class C{  public void logAPIRequest(AppContext ctx,HttpServletRequest req){  String customerId=null;  String clientId=null;  String userId=null;  String userLogin=null;  if (ctx != null) {    customerId=ctx.getCustomerId();    if (ctx.getUser() != null) {      userId=ctx.getUser().getId().getUserId();      userLogin=ctx.getUser().getLogin();    }    clientId=ctx.getClientId();  }  logAPIRequest(customerId,clientId,userId,userLogin,req);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_2__CODE_LANG_1:    getCodeLang_1().clear();  return;case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_2__CODE_LANGS_1:getCodeLangs_1().clear();return;}super.eUnset(featureID);}  }
class C{  @NamespacePermission(fields="#request?.namespace",permissions=NamespacePermissionEnum.EXECUTE) @Override @Transactional(propagation=Propagation.REQUIRES_NEW) public OozieWorkflowJob runOozieWorkflow(RunOozieWorkflowRequest request) throws Exception {  return runOozieWorkflowImpl(request);}  }
class C{  public List<Node> listAvailableFunctions(Class<?> type){  List<Node> result=new ArrayList<Node>();  for (  Node node : availableNodes) {    if ((node.getNumberOfArguments() > 0) && type.isAssignableFrom(node.getReturnType())) {      result.add(node);    }  }  if (result.isEmpty()) {    result.addAll(listAvailableTerminals(type));  }  return result;}  }
class C{  public DuplicateException(Throwable cause){  super(cause);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean equals(Object other){  if (other == null || !(other instanceof Layer)) {    return false;  }  Layer otherLayer=(Layer)other;  return vi == otherLayer.getVi() && viNext == otherLayer.getViNext() && oi == otherLayer.getOi() && RainbowUtil.equals(coeff_alpha,otherLayer.getCoeffAlpha()) && RainbowUtil.equals(coeff_beta,otherLayer.getCoeffBeta()) && RainbowUtil.equals(coeff_gamma,otherLayer.getCoeffGamma()) && RainbowUtil.equals(coeff_eta,otherLayer.getCoeffEta());}  }
class C{  public static float[] concatAllFloat(float[]... arrays){  int totalLength=0;  final int subArrayCount=arrays.length;  for (int i=0; i < subArrayCount; ++i) {    totalLength+=arrays[i].length;  }  float[] result=Arrays.copyOf(arrays[0],totalLength);  int offset=arrays[0].length;  for (int i=1; i < subArrayCount; ++i) {    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);    offset+=arrays[i].length;  }  return result;}  }
class C{  public Joiner go(){  executeQuery();  return this;}  }
class C{  public static Boolean[] toObject(boolean[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_BOOLEAN_OBJECT_ARRAY;  }  final Boolean[] result=new Boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(array[i] ? Boolean.TRUE : Boolean.FALSE);  }  return result;}  }
class C{  public CstType(Type type){  if (type == null) {    throw new NullPointerException("type == null");  }  if (type == type.KNOWN_NULL) {    throw new UnsupportedOperationException("KNOWN_NULL is not representable");  }  this.type=type;  this.descriptor=null;}  }
class C{  public static void applyUiPermissions(Frame container){  Window window=container instanceof Window ? (Window)container : ComponentsHelper.getWindow(container);  if (window == null) {    log.warn(String.format("Unable to find window for container %s with id '%s'",container.getClass(),container.getId()));    return;  }  UserSessionSource sessionSource=AppBeans.get(UserSessionSource.NAME);  UserSession userSession=sessionSource.getUserSession();  String screenId=window.getId();  Map<String,Integer> uiPermissions=userSession.getPermissionsByType(PermissionType.UI);  for (  Map.Entry<String,Integer> permissionEntry : uiPermissions.entrySet()) {    String target=permissionEntry.getKey();    String targetComponentId=getTargetComponentId(target,screenId);    if (targetComponentId != null) {      if (targetComponentId.contains("[")) {        applyCompositeComponentPermission(window,screenId,permissionEntry.getValue(),targetComponentId);      } else       if (targetComponentId.contains(">")) {        applyComponentActionPermission(window,screenId,permissionEntry.getValue(),targetComponentId);      } else {        applyComponentPermission(window,screenId,permissionEntry.getValue(),targetComponentId);      }    }  }}  }
class C{  public List<File> fetch() throws MalformedURLException, DependencyResolutionException, ArtifactResolutionException {  for (  Dependency dep : dependencies) {    if (!dep.isLocalFsArtifact()) {      List<ArtifactResult> artifacts=fetchArtifactWithDep(dep);      for (      ArtifactResult artifact : artifacts) {        if (dep.isDist()) {          filesDist.add(artifact.getArtifact().getFile());        }        files.add(artifact.getArtifact().getFile());      }    } else {      if (dep.isDist()) {        filesDist.add(new File(dep.getGroupArtifactVersion()));      }      files.add(new File(dep.getGroupArtifactVersion()));    }  }  return files;}  }
class C{  @SuppressWarnings("unused") @Test public void testStateCycle_WithParent(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    EventDefinition e1=_createEventDefinition("e1",s_scope);    Region r=_createRegion("r",sc);{      State s1=_createState("s1",r);{        LocalReaction lr1=_createLocalReaction(s1,null);        _createRegularEventSpec(e1,(ReactionTrigger)lr1.getTrigger());        ReactionEffect lr1_eff=_createReactionEffect(lr1);        AssignmentExpression assign1=_createVariableAssignment(v1,AssignmentOperator.ASSIGN,_createValue(42),lr1_eff);        Region r_s1=_createRegion("r",s1);{          State s3=_createState("s3",r_s1);{            _createEntryAssignment(v1,s3,2);            Region r_s3=_createRegion("r",s3);{              State s4=_createState("s4",r_s3);              _createEntryAssignment(v1,s4,3);              State s5=_createState("s5",r_s3);            }          }        }      }      State s2=_createState("s2",r);{        Region r_s1=_createRegion("r",s2);{          _createState("s6",r_s1);        }      }    }    Transition t_s4_s5=_createTransition(findState(sc,"s4"),findState(sc,"s5"));    _createReactionTrigger(t_s4_s5);    _createRegularEventSpec(e1,(ReactionTrigger)t_s4_s5.getTrigger());    Transition t_s3_s6=_createTransition(findState(sc,"s3"),findState(sc,"s6"));    _createReactionTrigger(t_s3_s6);    _createRegularEventSpec(e1,(ReactionTrigger)t_s3_s6.getTrigger());  }  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s1=flow.getStates().get(0);  assertEquals("sc.r.s1",_s1.getName());  ExecutionState _s3=flow.getStates().get(1);  assertEquals("sc.r.s1.r.s3",_s3.getName());  ExecutionState _s4=flow.getStates().get(2);  assertEquals("sc.r.s1.r.s3.r.s4",_s4.getName());  ExecutionState _s6=flow.getStates().get(5);  assertEquals("sc.r.s2.r.s6",_s6.getName());  Sequence cycle=_s4.getReactSequence();  Sequence _seq=(Sequence)cycle.getSteps().get(0);  List<Step> steps=SCTTestUtil.flattenSequenceStepsAsList(_seq);  If _if=(If)steps.get(0);  assertCall(_if.getThenStep(),_s1.getReactions().get(0).getEffect());  _if=(If)steps.get(1);  assertCall(_if.getThenStep(),_s3.getReactions().get(0).getEffect());  assertTrue(_s3.getReactions().get(0).isTransition());  _seq=(Sequence)_if.getElseStep();  cycle=(Sequence)_seq.getSteps().get(0);  _if=(If)cycle.getSteps().get(0);  assertCall(_if.getThenStep(),_s4.getReactions().get(0).getEffect());  assertTrue(_s4.getReactions().get(0).isTransition());  assertNull(_if.getElseStep());  assertEquals(1,cycle.getSteps().size());}  }
class C{  public void replaceBytes(int offset,int len,byte[] bytes){  model.replaceBytes(offset,len,bytes);}  }
class C{  public SerialBlob(byte[] b) throws SerialException, SQLException {  len=b.length;  buf=new byte[(int)len];  for (int i=0; i < len; i++) {    buf[i]=b[i];  }  origLen=len;}  }
class C{  public boolean isSetNewdouble(){  return EncodingUtils.testBit(__isset_bitfield,__NEWDOUBLE_ISSET_ID);}  }
class C{  public void register(AbstractBluePrint bluePrint){  bluePrint.register();}  }
class C{  public void startHardwareClock(Date now){  setTime(now);  return;}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String zfZero=environment.getNextVariableString();  final String cfZero=environment.getNextVariableString();  final String bothZero=environment.getNextVariableString();  instructions.add(ReilHelpers.createBisz(offset,OperandSize.BYTE,Helpers.ZERO_FLAG,OperandSize.BYTE,zfZero));  instructions.add(ReilHelpers.createBisz(offset + 1,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,cfZero));  instructions.add(ReilHelpers.createAnd(offset + 2,OperandSize.BYTE,zfZero,OperandSize.BYTE,cfZero,OperandSize.BYTE,bothZero));  return new Pair<OperandSize,String>(OperandSize.BYTE,bothZero);}  }
class C{  public QueryStringQueryBuilder analyzer(String analyzer){  this.analyzer=analyzer;  return this;}  }
class C{  private <VS extends ValuesSource>VS originalValuesSource(ValuesSourceConfig<VS> config) throws IOException {  if (config.fieldContext == null) {    if (ValuesSource.Numeric.class.isAssignableFrom(config.valueSourceType)) {      return (VS)numericScript(config);    }    if (ValuesSource.Bytes.class.isAssignableFrom(config.valueSourceType)) {      return (VS)bytesScript(config);    }    throw new AggregationExecutionException("value source of type [" + config.valueSourceType.getSimpleName() + "] is not supported by scripts");  }  if (ValuesSource.Numeric.class.isAssignableFrom(config.valueSourceType)) {    return (VS)numericField(config);  }  if (ValuesSource.GeoPoint.class.isAssignableFrom(config.valueSourceType)) {    return (VS)geoPointField(config);  }  return (VS)bytesField(config);}  }
class C{  public void testSeekingAndNexting() throws Exception {  for (int i=0; i < numIterations; i++) {    TermsEnum te=MultiFields.getTerms(reader,"field").iterator();    for (    BytesRef term : terms) {      int c=random().nextInt(3);      if (c == 0) {        assertEquals(term,te.next());      } else       if (c == 1) {        assertEquals(SeekStatus.FOUND,te.seekCeil(term));        assertEquals(term,te.term());      } else {        assertTrue(te.seekExact(term));      }    }  }}  }
class C{  static public void writeAttribute(Writer out,char[] buff,char[] text,int start,int length) throws IOException {  int buffLength=buff.length;  int buffIndex=0;  int end=start + length;  for (int i=start; i < end; i++) {    char ch=text[i];    if (ch < 0xA0) {      if (ch >= 0x3f) {        buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);      } else       if (ch >= 0x27) {        if (ch < 0x3c) {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        } else         if (ch == '>') {          buffIndex=flushBuffer(out,buff,buffIndex);          out.write("&gt;");        } else {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        }      } else {        if (ch == '&') {          buffIndex=flushBuffer(out,buff,buffIndex);          if ((i + 1 < end) && (text[i + 1] == '{')) {            out.write(ch);          } else {            out.write("&amp;");          }        } else         if (ch == '"') {          buffIndex=flushBuffer(out,buff,buffIndex);          out.write("&quot;");        } else {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        }      }    } else {      buffIndex=flushBuffer(out,buff,buffIndex);      _writeDecRef(out,ch);    }  }  flushBuffer(out,buff,buffIndex);}  }
class C{  public static boolean isPreRelease(){  return getBuild().equalsIgnoreCase("prerelease") ? true : false;}  }
class C{  public NodeAge increment(){  return new NodeAge(this.getRaw() + 1);}  }
class C{  public static MPOSTerminal loadTerminal(Properties ctx,int terminalId,String trxName) throws TerminalNotFoundException {  MPOSTerminal posTerminal=new MPOSTerminal(ctx,terminalId,trxName);  if (posTerminal.get_ID() == 0) {    throw new TerminalNotFoundException("Could not load terminal with id: " + terminalId);  }  return posTerminal;}  }
class C{  private boolean contains(int[] val){  int vRed=val[RED];  int vGrn=val[GRN];  int vBlu=val[BLU];  return (((min[RED] <= vRed) && (vRed <= max[RED])) && ((min[GRN] <= vGrn) && (vGrn <= max[GRN])) && ((min[BLU] <= vBlu) && (vBlu <= max[BLU])));}  }
class C{  public static String trimLeadingWhitespace(String str){  if (!hasLength(str)) {    return str;  }  StringBuilder sb=new StringBuilder(str);  while (sb.length() > 0 && Character.isWhitespace(sb.charAt(0))) {    sb.deleteCharAt(0);  }  return sb.toString();}  }
class C{  public NoSuchElementException(){}  }
class C{  private void checkPossibleLadder(AStarNode node){  int x=node.x;  int y=node.y;  int z=node.z;  if (AStarStatic.isLadder(worldObj,worldObj.getBlockState(new BlockPos(x,y,z)).getBlock(),x,y,z)) {    AStarNode ladder;    if (AStarStatic.isLadder(worldObj,worldObj.getBlockState(new BlockPos(x,y + 1,z)).getBlock(),x,y + 1,z)) {      ladder=new AStarNode(x,y + 1,z,node.getG() + 2,node,targetNode);      if (!tryToUpdateExistingHeapNode(node,ladder)) {        addToBinaryHeap(ladder);      }    }    if (AStarStatic.isLadder(worldObj,worldObj.getBlockState(new BlockPos(x,y - 1,z)).getBlock(),x,y - 1,z)) {      ladder=new AStarNode(x,y - 1,z,node.getG() + 2,node,targetNode);      if (!tryToUpdateExistingHeapNode(node,ladder)) {        addToBinaryHeap(ladder);      }    }  }}  }
class C{  public void subscribeTo(final K key,final Subscriber<V> subscriber,final Executor subscribeOn){  CompletableFuture.runAsync(null,subscribeOn);}  }
class C{  public void node(ClusterNode node){  this.node=node;}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  private SyncResult(boolean syncAlreadyInProgress){  this.syncAlreadyInProgress=syncAlreadyInProgress;  this.tooManyDeletions=false;  this.tooManyRetries=false;  this.fullSyncRequested=false;  this.partialSyncUnavailable=false;  this.moreRecordsToGet=false;  this.delayUntil=0;  this.stats=new SyncStats();}  }
class C{  private final void addToBook(Position pos,Move moveToAdd){  List<BookEntry> ent=bookMap.get(pos.zobristHash());  if (ent == null) {    ent=new ArrayList<BookEntry>();    bookMap.put(pos.zobristHash(),ent);  }  for (int i=0; i < ent.size(); i++) {    BookEntry be=ent.get(i);    if (be.move.equals(moveToAdd)) {      be.count++;      return;    }  }  BookEntry be=new BookEntry(moveToAdd);  ent.add(be);  numBookMoves++;}  }
class C{  public void collectTokenPairsAndSplitListInfo() throws NoSuchMethodException, InstantiationException, IllegalAccessException, java.lang.reflect.InvocationTargetException {  Vocabulary vocab=getLexer(language.lexerClass,null).getVocabulary();  String[] ruleNames=getParser(language.parserClass,null).getRuleNames();  CollectTokenPairs collectTokenPairs=new CollectTokenPairs(vocab,ruleNames);  CollectSiblingLists collectSiblingLists=new CollectSiblingLists();  for (  InputDocument doc : documents) {    collectSiblingLists.setTokens(doc.tokens,doc.tree,doc.tokenToNodeMap);    ParseTreeWalker.DEFAULT.walk(collectTokenPairs,doc.tree);    ParseTreeWalker.DEFAULT.walk(collectSiblingLists,doc.tree);  }  ruleToPairsBag=collectTokenPairs.getDependencies();  rootAndChildListStats=collectSiblingLists.getListStats();  rootAndSplitChildListStats=collectSiblingLists.getSplitListStats();  tokenToListInfo=collectSiblingLists.getTokenToListInfo();  if (false) {    for (    RuleAltKey ruleAltKey : ruleToPairsBag.keySet()) {      List<Pair<Integer,Integer>> pairs=ruleToPairsBag.get(ruleAltKey);      System.out.print(ruleAltKey + " -> ");      for (      Pair<Integer,Integer> p : pairs) {        System.out.print(vocab.getDisplayName(p.a) + "," + vocab.getDisplayName(p.b)+ " ");      }      System.out.println();    }  }  if (false) {    for (    ParentSiblingListKey siblingPairs : rootAndChildListStats.keySet()) {      String parent=ruleNames[siblingPairs.parentRuleIndex];      parent=parent.replace("Context","");      String siblingListName=ruleNames[siblingPairs.childRuleIndex];      siblingListName=siblingListName.replace("Context","");      System.out.println(parent + ":" + siblingPairs.parentRuleAlt+ "->"+ siblingListName+ ":"+ siblingPairs.childRuleAlt+ " (n,min,median,var,max)="+ rootAndChildListStats.get(siblingPairs));    }    Map<ParentSiblingListKey,Integer> splitListForms=collectSiblingLists.getSplitListForms();    for (    ParentSiblingListKey siblingPairs : rootAndSplitChildListStats.keySet()) {      String parent=ruleNames[siblingPairs.parentRuleIndex];      parent=parent.replace("Context","");      String siblingListName=ruleNames[siblingPairs.childRuleIndex];      siblingListName=siblingListName.replace("Context","");      System.out.println("SPLIT " + parent + ":"+ siblingPairs.parentRuleAlt+ "->"+ siblingListName+ ":"+ siblingPairs.childRuleAlt+ " (n,min,median,var,max)="+ rootAndSplitChildListStats.get(siblingPairs)+ " form "+ splitListForms.get(siblingPairs));    }  }}  }
class C{  private void printData(Problem problem,boolean reduced,Population population,PrintWriter writer){  int numberOfVariables=problem.getNumberOfVariables();  int numberOfObjectives=problem.getNumberOfObjectives();  if (reduced) {    numberOfVariables=0;  }  for (  Solution solution : population) {    for (int i=0; i < numberOfVariables; i++) {      if (i > 0) {        writer.print(",");      }      if (solution.getVariable(i) instanceof RealVariable) {        writer.print(EncodingUtils.getReal(solution.getVariable(i)));      } else {        writer.print("?");      }    }    for (int i=0; i < numberOfObjectives; i++) {      if ((i > 0) || (numberOfVariables > 0)) {        writer.print(",");      }      writer.print(solution.getObjective(i));    }    writer.println();  }}  }
class C{  public static boolean printTypevarToDotIfMatches(final AnnotatedTypeVariable typeVariable,final List<String> typeVarNames,final String directory){  return printTypevarIfMatches(typeVariable,typeVarNames,directory,false);}  }
class C{  protected void drawBar(Canvas canvas,float xMin,float yMin,float xMax,float yMax,int scale,int seriesIndex,Paint paint){  float temp;  if (xMin > xMax) {    temp=xMin;    xMin=xMax;    xMax=temp;  }  if (yMin > yMax) {    temp=yMin;    yMin=yMax;    yMax=temp;  }  SimpleSeriesRenderer renderer=mRenderer.getSeriesRendererAt(seriesIndex);  if (renderer.isGradientEnabled()) {    float minY=(float)toScreenPoint(new double[]{0,renderer.getGradientStopValue()},scale)[1];    float maxY=(float)toScreenPoint(new double[]{0,renderer.getGradientStartValue()},scale)[1];    float gradientMinY=Math.max(minY,Math.min(yMin,yMax));    float gradientMaxY=Math.min(maxY,Math.max(yMin,yMax));    int gradientMinColor=renderer.getGradientStopColor();    int gradientMaxColor=renderer.getGradientStartColor();    int gradientStartColor=gradientMaxColor;    int gradientStopColor=gradientMinColor;    if (yMin < minY) {      paint.setColor(gradientMinColor);      canvas.drawRect(Math.round(xMin),Math.round(yMin),Math.round(xMax),Math.round(gradientMinY),paint);    } else {      gradientStopColor=getGradientPartialColor(gradientMinColor,gradientMaxColor,(maxY - gradientMinY) / (maxY - minY));    }    if (yMax > maxY) {      paint.setColor(gradientMaxColor);      canvas.drawRect(Math.round(xMin),Math.round(gradientMaxY),Math.round(xMax),Math.round(yMax),paint);    } else {      gradientStartColor=getGradientPartialColor(gradientMaxColor,gradientMinColor,(gradientMaxY - minY) / (maxY - minY));    }    GradientDrawable gradient=new GradientDrawable(Orientation.BOTTOM_TOP,new int[]{gradientStartColor,gradientStopColor});    gradient.setBounds(Math.round(xMin),Math.round(gradientMinY),Math.round(xMax),Math.round(gradientMaxY));    gradient.draw(canvas);  } else {    if (Math.abs(yMin - yMax) < 1) {      if (yMin < yMax) {        yMax=yMin + 1;      } else {        yMax=yMin - 1;      }    }    canvas.drawRect(Math.round(xMin),Math.round(yMin),Math.round(xMax),Math.round(yMax),paint);  }}  }
class C{  public static <T>List<Tree<T>> breadthFirstTraversal(Tree<T> tree){  Queue<Tree<T>> nodeQueue=new LinkedList<>();  nodeQueue.offer(tree);  ArrayList<Tree<T>> bfs=new ArrayList<>();  while (!nodeQueue.isEmpty()) {    Tree<T> t=nodeQueue.remove();    bfs.add(t);    for (    Tree<T> child : t.childrenIterator()) {      nodeQueue.offer(child);    }  }  return bfs;}  }
class C{  public void printDepthFirst(){  print(new DepthFirstEnumerator(_firstNode));}  }
class C{  public ConcurrentModificationException(BaseVO vo){  this(vo.getClass().getSimpleName(),vo.getVersion());}  }
class C{  public boolean isAutoUnsubscribe(){  return autoUnsubscribe;}  }
class C{  public static String convertUriToPath(Context context,Uri uri){  String path=null;  if (null != uri) {    String scheme=uri.getScheme();    if (null == scheme || scheme.equals("") || scheme.equals(ContentResolver.SCHEME_FILE)) {      path=uri.getPath();    } else     if (scheme.equals("http")) {      path=uri.toString();    } else     if (scheme.equals(ContentResolver.SCHEME_CONTENT)) {      String[] projection=new String[]{MediaStore.MediaColumns.DATA};      Cursor cursor=null;      try {        cursor=context.getContentResolver().query(uri,projection,null,null,null);        if (null == cursor || 0 == cursor.getCount() || !cursor.moveToFirst()) {          throw new IllegalArgumentException("Given Uri could not be found" + " in media store");        }        int pathIndex=cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.DATA);        path=cursor.getString(pathIndex);      } catch (      SQLiteException e) {        throw new IllegalArgumentException("Given Uri is not formatted in a way " + "so that it can be found in media store.");      } finally {        if (null != cursor) {          cursor.close();        }      }    } else {      throw new IllegalArgumentException("Given Uri scheme is not supported");    }  }  return path;}  }
class C{  @SmallTest public void testFindNanpPhoneNumber(){  final String[] NO_NUMBERS=new String[]{};  findPhoneNumber("",NO_NUMBERS);  findPhoneNumber("               ",NO_NUMBERS);  findPhoneNumber("123",NO_NUMBERS);  findPhoneNumber("how much wood",NO_NUMBERS);  findPhoneNumber("abc1-650-555-1212",NO_NUMBERS);  findPhoneNumber("abc 5551212 def",new String[]{"5551212"});  findPhoneNumber("1234567",NO_NUMBERS);  findPhoneNumber(" 2345678 ",new String[]{"2345678"});  findPhoneNumber("1234567890",NO_NUMBERS);  findPhoneNumber("12345678901",new String[]{"12345678901"});  findPhoneNumber("123456789012",NO_NUMBERS);  findPhoneNumber("+1-555-1212",NO_NUMBERS);  findPhoneNumber("+1 (650) 555-1212",new String[]{"+1 (650) 555-1212"});  findPhoneNumber("(650) 555-1212, (650) 555-1213",new String[]{"(650) 555-1212","(650) 555-1213"});  findPhoneNumber("Call 555-1212, 555-1213 and also 555-1214.",new String[]{"555-1212","555-1213","555-1214."});  findPhoneNumber("555-1212,555-1213,555-1214",new String[]{"555-1212"});  findPhoneNumber("123 (650) 555-1212",new String[]{"(650) 555-1212"});  findPhoneNumber("1-650-555-1212",new String[]{"1-650-555-1212"});  findPhoneNumber("1650-555-1212",new String[]{"1650-555-1212"});  findPhoneNumber("1650 555-1212",new String[]{"1650 555-1212"});  findPhoneNumber("1650/555-1212",NO_NUMBERS);  findPhoneNumber("1650-555 1212",NO_NUMBERS);  findPhoneNumber("8-650-555-1212",NO_NUMBERS);  findPhoneNumber("8 650-555-1212",new String[]{"650-555-1212"});  findPhoneNumber("650.555.1212",new String[]{"650.555.1212"});  findPhoneNumber(" *#650.555.1212#*!",new String[]{"*#650.555.1212#*"});  findPhoneNumber("555.1212",new String[]{"555.1212"});  findPhoneNumber("6505551212 x123, 555-1212",new String[]{"6505551212","555-1212"});  findPhoneNumber("6505551212x123",new String[]{"6505551212"});  findPhoneNumber("http://example.com/6505551212/",NO_NUMBERS);  findPhoneNumber("Mountain View, CA 94043 (650) 555-1212",new String[]{"(650) 555-1212"});  findPhoneNumber("New York, NY 10001-0001",NO_NUMBERS);}  }
class C{  public boolean removeParameter(String paramName) throws IllegalArgumentException {  log.trace("enter PostMethod.removeParameter(String)");  if (paramName == null) {    throw new IllegalArgumentException("Argument passed to removeParameter(String) cannot be null");  }  boolean removed=false;  Iterator<NameValuePair> iter=this.params.iterator();  while (iter.hasNext()) {    NameValuePair pair=iter.next();    if (paramName.equals(pair.getName())) {      iter.remove();      removed=true;    }  }  return removed;}  }
class C{  private void writeLegsDistribution(final String plansFile,final String outputFile){  Map<Id<Person>,List<String>> personId2legs=getLegsForAllPlansInChoiceSet(plansFile);  Map<Id<Person>,double[]> personId2LegsCounts=getPersonId2LegsCountInChoiceSet(personId2legs);  int carIndex=0;  int ptIndex=1;  int legsClassesLength=8;  Map<Integer,double[]> legsClass2LegsCounter=new HashMap<>();  for (int i=0; i < legsClassesLength; i++) {    double[] legsCounter={0.,0.};    legsClass2LegsCounter.put(i,legsCounter);  }  for (  Id<Person> id : personId2LegsCounts.keySet()) {    double carLegs=personId2LegsCounts.get(id)[carIndex];    double ptLegs=personId2LegsCounts.get(id)[ptIndex];    for (    Integer j : legsClass2LegsCounter.keySet()) {      if ((int)carLegs == j) {        int carCounterSoFar=(int)legsClass2LegsCounter.get(j)[carIndex];        double[] legsCounter={carCounterSoFar + 1,legsClass2LegsCounter.get(j)[ptIndex]};        legsClass2LegsCounter.put(j,legsCounter);      }      if ((int)ptLegs == j) {        int ptCounterSoFar=(int)legsClass2LegsCounter.get(j)[ptIndex];        double[] legsCounter={legsClass2LegsCounter.get(j)[carIndex],ptCounterSoFar + 1};        legsClass2LegsCounter.put(j,legsCounter);      }    }  }  BufferedWriter writer=IOUtils.getBufferedWriter(outputFile);  try {    writer.write("numberOfLegs \t" + "car" + "\t"+ "pt"+ "\n");    for (    Integer i : legsClass2LegsCounter.keySet()) {      writer.write(i + "\t" + legsClass2LegsCounter.get(i)[carIndex]+ "\t"+ legsClass2LegsCounter.get(i)[ptIndex]+ "\n");    }    writer.close();  } catch (  Exception e) {    throw new RuntimeException("Data is not written in File. Reason " + e);  }  log.info("Data has written to " + outputFile);}  }
class C{  public static String toJson(Map<String,String> map){  if (map == null || map.size() == 0) {    return null;  }  StringBuilder paras=new StringBuilder();  paras.append("{");  Iterator<Entry<String,String>> ite=map.entrySet().iterator();  while (ite.hasNext()) {    Entry<String,String> entry=(Entry<String,String>)ite.next();    paras.append("\"").append(entry.getKey()).append("\":\"").append(entry.getValue()).append("\"");    if (ite.hasNext()) {      paras.append(",");    }  }  paras.append("}");  return paras.toString();}  }
class C{  @SuppressFBWarnings("JLM_JSR166_UTILCONCURRENT_MONITORENTER") private Response make() throws IOException {synchronized (this.transformed) {    if (this.transformed.isEmpty()) {      this.transformed.add(new RsWithBody(this.origin,RsPrettyJson.transform(this.origin.body())));    }  }  return this.transformed.get(0);}  }
class C{  public String toString(){  return ("OIDName: " + oid.toString());}  }
class C{  private void clearAllMoves(){  if (ce() != null) {    if (ce().getMovementMode() == EntityMovementMode.BIPED_SWIM)     ce().setMovementMode(EntityMovementMode.BIPED); else     if (ce().getMovementMode() == EntityMovementMode.QUAD_SWIM)     ce().setMovementMode(EntityMovementMode.QUAD);    cmd=new MovePath(getClient().getGame(),ce());  } else {    cmd=null;  }  gear=GEAR_LAND;}  }
class C{  static Object newInstance(ClassLoader classLoader,String className) throws ClassNotFoundException, IllegalAccessException, InstantiationException {  Class driverClass;  if (classLoader == null) {    driverClass=Class.forName(className);  } else {    driverClass=classLoader.loadClass(className);  }  return driverClass.newInstance();}  }
class C{  protected String paramString(){  return super.paramString() + ",selected=" + getSelectedItem();}  }
class C{  public CSVParser(char separator,char quotechar,char escape,boolean strictQuotes,boolean ignoreLeadingWhiteSpace){  this(separator,quotechar,escape,strictQuotes,ignoreLeadingWhiteSpace,DEFAULT_IGNORE_QUOTATIONS);}  }
class C{  void signedAdd(SignedMutableBigInteger addend){  if (sign == addend.sign)   add(addend); else   sign=sign * subtract(addend);}  }
class C{  public static final void appendValueToSql(StringBuilder sql,Object value){  if (value == null) {    sql.append("NULL");  } else   if (value instanceof Boolean) {    Boolean bool=(Boolean)value;    if (bool) {      sql.append('1');    } else {      sql.append('0');    }  } else {    appendEscapedSQLString(sql,value.toString());  }}  }
class C{  public void checkCapacity(int plus){  if (pos + plus >= data.length) {    expand(plus);  }}  }
class C{  public static Properties expandHostKeyValues(String host){  Properties hostProps=new Properties();  if (isHostPropertiesList(host)) {    host=host.substring("address=".length() + 1);    List<String> hostPropsList=StringUtils.split(host,")","'\"","'\"",true);    for (    String propDef : hostPropsList) {      if (propDef.startsWith("(")) {        propDef=propDef.substring(1);      }      List<String> kvp=StringUtils.split(propDef,"=","'\"","'\"",true);      String key=kvp.get(0);      String value=kvp.size() > 1 ? kvp.get(1) : null;      if (value != null && ((value.startsWith("\"") && value.endsWith("\"")) || (value.startsWith("'") && value.endsWith("'")))) {        value=value.substring(1,value.length() - 1);      }      if (value != null) {        if (HOST_PROPERTY_KEY.equalsIgnoreCase(key) || DBNAME_PROPERTY_KEY.equalsIgnoreCase(key) || PORT_PROPERTY_KEY.equalsIgnoreCase(key)|| PROTOCOL_PROPERTY_KEY.equalsIgnoreCase(key)|| PATH_PROPERTY_KEY.equalsIgnoreCase(key)) {          key=key.toUpperCase(Locale.ENGLISH);        } else         if (USER_PROPERTY_KEY.equalsIgnoreCase(key) || PASSWORD_PROPERTY_KEY.equalsIgnoreCase(key)) {          key=key.toLowerCase(Locale.ENGLISH);        }        hostProps.setProperty(key,value);      }    }  }  return hostProps;}  }
class C{  public void update(final ReservoirLongsSketch sketchIn){  if (sketchIn == null) {    return;  }  final int maxK=ReservoirSize.decodeValue(encodedMaxK_);  final ReservoirLongsSketch rls=(sketchIn.getK() <= maxK ? sketchIn : sketchIn.downsampledCopy(encodedMaxK_));  if (gadget_ == null) {    gadget_=(sketchIn == rls ? rls.copy() : rls);  } else {    final boolean isModifiable=(sketchIn != rls);    twoWayMergeInternal(rls,isModifiable);  }}  }
class C{  public boolean notReversable(){  boolean brainDead=false;  String waterway=getTagWithKey(Tags.KEY_WATERWAY);  if (waterway != null) {    brainDead=true;  } else {    String natural=getTagWithKey(Tags.KEY_NATURAL);    if ((natural != null) && (natural.equals(Tags.VALUE_CLIFF) || natural.equals(Tags.VALUE_COASTLINE))) {      brainDead=true;    } else {      String barrier=getTagWithKey(Tags.KEY_BARRIER);      if ((barrier != null) && barrier.equals(Tags.VALUE_RETAINING_WALL)) {        brainDead=true;      } else       if ((barrier != null) && barrier.equals(Tags.VALUE_KERB)) {        brainDead=true;      } else       if ((barrier != null) && barrier.equals(Tags.VALUE_GUARD_RAIL)) {        brainDead=true;      } else       if ((barrier != null) && barrier.equals(Tags.VALUE_CITY_WALL) && ((getTagWithKey(Tags.KEY_TWO_SIDED) == null) || !getTagWithKey(Tags.KEY_TWO_SIDED).equals(Tags.VALUE_YES))) {        brainDead=true;      } else {        String man_made=getTagWithKey(Tags.KEY_MAN_MADE);        if ((man_made != null) && man_made.equals(Tags.VALUE_EMBANKMENT)) {          brainDead=true;        }      }    }  }  return brainDead;}  }
class C{  public boolean shouldRemoteUiBeVisible(int state,int idleReason) throws TransientNetworkDisconnectionException, NoConnectionException {switch (state) {case MediaStatus.PLAYER_STATE_PLAYING:case MediaStatus.PLAYER_STATE_PAUSED:case MediaStatus.PLAYER_STATE_BUFFERING:    return true;case MediaStatus.PLAYER_STATE_IDLE:  if (!isRemoteStreamLive()) {    return false;  }return idleReason == MediaStatus.IDLE_REASON_CANCELED;default :break;}return false;}  }
class C{  public static String toToolTipText(Color c){  if (formatter == null) {    formatter=new ColorToolTipTextFormatter();  }  try {    return formatter.valueToString(c);  } catch (  ParseException ex) {    InternalError error=new InternalError("Unable to generate tool tip text from color " + c);    error.initCause(ex);    throw error;  }}  }
class C{  @Override public void deliver(WriteStream os,OutHttp2 outHttp) throws IOException {  int length=_length;  int flags;switch (_flags) {case CONT_STREAM:    flags=0;  break;case END_STREAM:flags=Http2Constants.END_STREAM;break;default :flags=0;break;}outHttp.writeData(getStreamId(),_tBuf.buffer(),_offset,length,flags);_tBuf.free();}  }
class C{  public static void loadScenario(final Scenario scenario){  ScenarioLoaderImpl scenarioLoader=new ScenarioLoaderImpl(scenario);  scenarioLoader.loadScenario();}  }
class C{  public MaxDistance(DistanceMetric dm){  this.dm=dm;}  }
class C{  private void markShardAsDownIfLeader(String collection,String shardId,CoreDescriptor leaderCd,String znodePath,byte[] znodeData,boolean retryOnConnLoss) throws KeeperException, InterruptedException {  if (!leaderCd.getCloudDescriptor().isLeader()) {    log.info("No longer leader, aborting attempt to mark shard down as part of LIR");    throw new NotLeaderException(ErrorCode.SERVER_ERROR,"Locally, we do not think we are the leader.");  }  ContextKey key=new ContextKey(collection,leaderCd.getCloudDescriptor().getCoreNodeName());  ElectionContext context=electionContexts.get(key);  if (context == null || !leaderCd.getCloudDescriptor().isLeader()) {    log.info("No longer leader, aborting attempt to mark shard down as part of LIR");    throw new NotLeaderException(ErrorCode.SERVER_ERROR,"Locally, we do not think we are the leader.");  }  Integer leaderZkNodeParentVersion=((ShardLeaderElectionContextBase)context).getLeaderZkNodeParentVersion();  if (zkClient.exists(znodePath,retryOnConnLoss)) {    List<Op> ops=new ArrayList<>(2);    ops.add(Op.check(new org.apache.hadoop.fs.Path(((ShardLeaderElectionContextBase)context).leaderPath).getParent().toString(),leaderZkNodeParentVersion));    ops.add(Op.setData(znodePath,znodeData,-1));    zkClient.multi(ops,retryOnConnLoss);  } else {    String parentZNodePath=getLeaderInitiatedRecoveryZnodePath(collection,shardId);    try {      zkClient.makePath(parentZNodePath,retryOnConnLoss);    } catch (    KeeperException.NodeExistsException nee) {    }    List<Op> ops=new ArrayList<>(2);    ops.add(Op.check(new org.apache.hadoop.fs.Path(((ShardLeaderElectionContextBase)context).leaderPath).getParent().toString(),leaderZkNodeParentVersion));    ops.add(Op.create(znodePath,znodeData,zkClient.getZkACLProvider().getACLsToAdd(znodePath),CreateMode.PERSISTENT));    zkClient.multi(ops,retryOnConnLoss);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MReportColumnSet[").append(get_ID()).append(" - ").append(getName()).append("]");  return sb.toString();}  }
class C{  public synchronized void addMeasurement(long value){  Validate.isTrue(value >= 0,Long.toString(value));  if (Long.MAX_VALUE - totalMs < value) {    reset();  }  ++hits;  totalMs+=value;  if (value > ceilingMs) {    effectiveCeilingMs=ceilingMs;    ceilingMs=value;  } else   if (value > effectiveCeilingMs) {    effectiveCeilingMs=value;  }  if (value < floorMs) {    floorMs=value;  }}  }
class C{  private static BlockSwapper addBlockSwapper(World world,BlockPos pos,int meta){  BlockSwapper swapper=swapperFromMeta(world,pos,meta);  if (world.isRemote)   return swapper;  int dim=world.provider.getDimension();  if (!blockSwappers.containsKey(dim))   blockSwappers.put(dim,new HashSet<>());  blockSwappers.get(dim).add(swapper);  return swapper;}  }
class C{  public Map<String,ClassificationResult> test(String nameOfTrain) throws Exception {  System.out.println("Starting GUMLTLT Test");  System.out.println("Tweets: " + this.tweetList.size());  String trainname="";  if (!nameOfTrain.equals("")) {    trainname=nameOfTrain;  } else {    trainname="Trained-Features-GUMLTLT";  }  BufferedReader reader=new BufferedReader(new FileReader("resources/arff/" + trainname + ".arff"));  Instances train=new Instances(reader);  train.setClassIndex(train.numAttributes() - 1);  reader.close();  LibLINEAR classifier=new LibLINEAR();  classifier.setProbabilityEstimates(true);  classifier.setSVMType(new SelectedTag(0,LibLINEAR.TAGS_SVMTYPE));  classifier.setCost(0.15);  classifier.buildClassifier(train);  train.delete();  Tagger tagger=new Tagger();  tagger.loadModel("resources/tagger/model.20120919.txt");  Map<String,Double> sentiWordNet=this.loadSentiWordNet();  Map<String,Integer> featureMap=new HashMap<String,Integer>();  for (int i=0; i < train.numAttributes(); i++) {    featureMap.put(train.attribute(i).name(),train.attribute(i).index());  }  Map<String,ClassificationResult> resultMap=new HashMap<String,ClassificationResult>();  for (  Tweet tweet : tweetList) {    this.preProcessTweet(tweet);    this.tokenizeAndTag(tagger,tweet);    this.negate(tweet);    SparseInstance instance=new SparseInstance(0);    Set<String> nGramSet=this.getNGrams(tweet,1);    for (    String nGram : nGramSet) {      Integer index=featureMap.get("NGRAM_" + nGram);      if (index != null) {        instance.setValue(index,1);      }    }    Set<String> stemSet=this.getStems(tweet);    for (    String stem : stemSet) {      Integer index=featureMap.get("STEM_" + stem);      if (index != null) {        instance.setValue(index,1);      }    }    Set<String> clusterSet=this.getGUMLTLTClusters(tweet);    for (    String cluster : clusterSet) {      Integer index=featureMap.get("CLUSTER_" + cluster);      if (index != null) {        instance.setValue(index,1);      }    }    instance.setValue(featureMap.get("sentiWordNetPos"),this.getSentiWordNetScore("+",sentiWordNet,tweet.getCollapsedWordList()));    instance.setValue(featureMap.get("sentiWordNetNeg"),this.getSentiWordNetScore("-",sentiWordNet,tweet.getCollapsedWordList()));    train.add(instance);    double result=classifier.classifyInstance(train.lastInstance());    double[] resultDistribution=classifier.distributionForInstance(train.lastInstance());    resultMap.put(tweet.getTweetID(),new ClassificationResult(tweet,resultDistribution,result));  }  return resultMap;}  }
class C{  protected void createDeviceTable() throws DataAccessException {  ProvisionedThroughput provisionedThroughput=new ProvisionedThroughput().withReadCapacityUnits(10L).withWriteCapacityUnits(5L);  ArrayList<AttributeDefinition> attributeDefinitions=new ArrayList<AttributeDefinition>();  attributeDefinitions.add(new AttributeDefinition().withAttributeName(ATTRIBUTE_UID).withAttributeType("S"));  ArrayList<KeySchemaElement> tableKeySchema=new ArrayList<KeySchemaElement>();  tableKeySchema.add(new KeySchemaElement().withAttributeName(ATTRIBUTE_UID).withKeyType(KeyType.HASH));  CreateTableRequest createTableRequest=new CreateTableRequest().withTableName(DEVICE_TABLE).withProvisionedThroughput(provisionedThroughput).withAttributeDefinitions(attributeDefinitions).withKeySchema(tableKeySchema);  try {    ddb.createTable(createTableRequest);  } catch (  AmazonClientException e) {    throw new DataAccessException("Failed to create table: " + DEVICE_TABLE,e);  }}  }
class C{  public StringBuilder remove(){  return this.bufferList.remove(0);}  }
class C{  @Override public boolean shouldOverrideUrlLoading(WebView view,String url){  Intent intent=UrlHandlingActivity.getIntentForUri(WebViewActivity.this,Uri.parse(url));  if (intent != null) {    if (getIntent().hasExtra(DetailActivity.ARG_MARK_CONTEXT_READ))     intent.putExtra(DetailActivity.ARG_MARK_CONTEXT_READ,true);    startActivity(intent);    checkForFinishActivity();    return true;  }  return false;}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  public void startDocument() throws SAXException {  reset();  if (!("yes".equals(outputProperties.getProperty(OMIT_XML_DECLARATION,"no")))) {    write("<?xml");    if (version == null) {      write(" version=\"1.0\"");    } else {      write(" version=\"");      write(version);      write("\"");    }    if (outputEncoding != null && !outputEncoding.equalsIgnoreCase("")) {      write(" encoding=\"");      write(outputEncoding);      write("\"");    }    if (standalone == null) {      write(" standalone=\"yes\"?>\n");    } else {      write(" standalone=\"");      write(standalone);      write("\"");    }  }  super.startDocument();}  }
class C{  public void showInfo(DTNHost host){  Vector<Message> messages=new Vector<Message>(host.getMessageCollection());  Collections.sort(messages);  reset();  this.selectedHost=host;  String text=(host.isMovementActive() ? "" : "INACTIVE ") + host + " at "+ host.getLocation();  msgChooser=new JComboBox(messages);  msgChooser.insertItemAt(messages.size() + " messages",0);  msgChooser.setSelectedIndex(0);  msgChooser.addActionListener(this);  routingInfoButton=new JButton("routing info");  routingInfoButton.addActionListener(this);  this.add(new JLabel(text));  this.add(msgChooser);  this.add(routingInfoButton);  this.revalidate();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:37.516 -0500",hash_original_method="A4DC03ACA7E0192C0122C74C14A5C33F",hash_generated_method="18031D17984944986C36ADBD2F35B132") public static void closeCachedFiles(){  Set<Map.Entry<URL,JarFile>> s=jarCache.entrySet();synchronized (jarCache) {    Iterator<Map.Entry<URL,JarFile>> i=s.iterator();    while (i.hasNext()) {      try {        ZipFile zip=i.next().getValue();        if (zip != null) {          zip.close();        }      } catch (      IOException e) {      }    }  }}  }
class C{  private boolean tokenFinished(State state){  if ((state.data[state.index] == '"' && (flags & PHRASE_OPERATOR) != 0) || (state.data[state.index] == '|' && (flags & OR_OPERATOR) != 0) || (state.data[state.index] == '+' && (flags & AND_OPERATOR) != 0)|| (state.data[state.index] == '(' && (flags & PRECEDENCE_OPERATORS) != 0)|| (state.data[state.index] == ')' && (flags & PRECEDENCE_OPERATORS) != 0)|| ((state.data[state.index] == ' ' || state.data[state.index] == '\t' || state.data[state.index] == '\n' || state.data[state.index] == '\r') && (flags & WHITESPACE_OPERATOR) != 0)) {    return true;  }  return false;}  }
class C{  public FastHexaObjectGridPortrayal2D(){}  }
class C{  public static boolean validateToken(String authenticationToken,UserDetails userDetails){  String[] parts=authenticationToken.split(":");  long expires=Long.parseLong(parts[1]);  String signature=parts[2];  if (expires < System.currentTimeMillis()) {    return false;  }  return signature.equals(TokenUtils.computeSignature(userDetails,expires));}  }
class C{  public DerInputStream(byte[] data) throws IOException {  init(data,0,data.length);}  }
class C{  public StrTokenizer(final char[] input,final String delim){  this(input);  setDelimiterString(delim);}  }
class C{  public void warn(Object message){  log(LogSystem.WARN_ID,message);}  }
class C{  public ObjectFactory(){}  }
class C{  public boolean changeOnlineStatus(OnlineStatus newStatus){  if (onlineStatus.canChangeTo(newStatus)) {    OnlineStatus oldStatus=onlineStatus;    onlineStatus=newStatus;synchronized (cmrRepositoryChangeListeners) {      for (      CmrRepositoryChangeListener changeListener : cmrRepositoryChangeListeners) {        changeListener.repositoryOnlineStatusUpdated(this,oldStatus,newStatus);      }    }    return true;  }  return false;}  }
class C{  public ByteArray(final long length){  super(length);  mArray=new byte[(int)length];}  }
class C{  private static int NewObjectV(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: NewObjectV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Class<?> cls=(Class<?>)env.getJNIRef(classJREF);    RVMClass vmcls=java.lang.JikesRVMSupport.getTypeForClass(cls).asClass();    if (vmcls.isAbstract() || vmcls.isInterface()) {      env.recordException(new InstantiationException());      return 0;    }    Object newobj=JNIHelpers.invokeInitializer(cls,methodID,argAddress,false,false);    return env.pushJNIRef(newobj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public boolean fullyQualifiedMethodMatches(String fullyQualifiedMethodName){  String methodName;  int lastIndexOf=fullyQualifiedMethodName.lastIndexOf('.');  if (lastIndexOf == -1)   methodName=fullyQualifiedMethodName; else   methodName=fullyQualifiedMethodName.substring(lastIndexOf + 1);  return methodMatches(methodName);}  }
class C{  public void startNalUnit(int type){  Assertions.checkState(!isFilling);  isFilling=type == targetType;  if (isFilling) {    nalLength=4;    isCompleted=false;  }}  }
class C{  protected boolean initializePanelMenu(final PanelFeatureState st){  Context context=getContext();  if ((st.featureId == FEATURE_OPTIONS_PANEL || st.featureId == FEATURE_ACTION_BAR) && mActionBar != null) {    TypedValue outValue=new TypedValue();    Resources.Theme currentTheme=context.getTheme();    currentTheme.resolveAttribute(com.android.internal.R.attr.actionBarWidgetTheme,outValue,true);    final int targetThemeRes=outValue.resourceId;    if (targetThemeRes != 0 && context.getThemeResId() != targetThemeRes) {      context=new ContextThemeWrapper(context,targetThemeRes);    }  }  final MenuBuilder menu=new MenuBuilder(context);  menu.setCallback(this);  st.setMenu(menu);  return true;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEOFDone=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  zzFinalHighSurrogate=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;  if (zzBuffer.length > ZZ_BUFFERSIZE)   zzBuffer=new char[ZZ_BUFFERSIZE];}  }
class C{  public void dupX2(){  mv.visitInsn(Opcodes.DUP_X2);}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);  updateActionBarTitleAndHomeButton(null);  invalidateOptionsMenu();}  }
class C{  public static DeltaHandler<ResourceNode> createHandler(RecursiveHandlerTypes type,List<String> subResourceNames,String collectionName,String collectioneTag,DeltaHandler<ResourceNode> parentHandler){switch (type) {case EXPANSION:    return new RecursiveExpansionHandler(subResourceNames,collectionName,collectioneTag,parentHandler);case ZIP:case STORE:  return new RecursiveZipHandler(subResourceNames,collectionName,parentHandler);default :return null;}}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void testDoesParsedDateMatchTextFunction(){  DateTimeFormatter parseFormat=new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive().appendPattern("M d, u").toFormatter(Locale.getDefault());  DateTimeFormatter parseFormat2=new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive().appendPattern("MMMM d, u").toFormatter(Locale.getDefault());  DateTimeFormatter parseFormatBC=new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive().appendPattern("MMMM d, yyyy G").toFormatter(Locale.getDefault());  Month[] shortMonths=new Month[]{Month.FEBRUARY,Month.APRIL,Month.JUNE,Month.SEPTEMBER,Month.NOVEMBER};  for (int year=-10000; year < 10001; ++year) {    for (int monthIndex=0; monthIndex < shortMonths.length; ++monthIndex) {      String nonExistantDateString=shortMonths[monthIndex].getValue() + " 31, " + year;      LocalDate nonExistantDate=LocalDate.parse(nonExistantDateString,parseFormat);      if (doesParsedDateMatchText(nonExistantDate,nonExistantDateString,Locale.getDefault())) {        System.out.println("invalid match at " + nonExistantDateString);      }      String nonExistantDateString2=shortMonths[monthIndex].name() + " 31, " + year;      LocalDate nonExistantDate2=LocalDate.parse(nonExistantDateString2,parseFormat2);      if (doesParsedDateMatchText(nonExistantDate2,nonExistantDateString2,Locale.getDefault())) {        System.out.println("invalid match at " + nonExistantDateString2);      }    }  }  for (int year=-10000; year < 10001; ++year) {    String nonExistantDateString=Month.FEBRUARY.getValue() + " 30, " + year;    LocalDate nonExistantDate=LocalDate.parse(nonExistantDateString,parseFormat);    if (doesParsedDateMatchText(nonExistantDate,nonExistantDateString,Locale.getDefault())) {      System.out.println("invalid match at " + nonExistantDateString);    }    String nonExistantDateString2=Month.FEBRUARY.name() + " 30, " + year;    LocalDate nonExistantDate2=LocalDate.parse(nonExistantDateString2,parseFormat2);    if (doesParsedDateMatchText(nonExistantDate2,nonExistantDateString2,Locale.getDefault())) {      System.out.println("invalid match at " + nonExistantDateString2);    }  }  for (int year=-10000; year < 10001; ++year) {    if (!isLeapYear(year)) {      String nonExistantDateString=Month.FEBRUARY.getValue() + " 29, " + year;      LocalDate nonExistantDate=LocalDate.parse(nonExistantDateString,parseFormat);      if (doesParsedDateMatchText(nonExistantDate,nonExistantDateString,Locale.getDefault())) {        System.out.println("invalid match at " + nonExistantDateString);      }      String nonExistantDateString2=Month.FEBRUARY.name() + " 29, " + year;      LocalDate nonExistantDate2=LocalDate.parse(nonExistantDateString2,parseFormat2);      if (doesParsedDateMatchText(nonExistantDate2,nonExistantDateString2,Locale.getDefault())) {        System.out.println("invalid match at " + nonExistantDateString2);      }    }  }  LocalDate validDate=LocalDate.of(-10000,1,1);  while (validDate.getYear() < 10001) {    if (!doesParsedDateMatchText(validDate,validDate.toString(),Locale.getDefault())) {      System.out.println("invalid mismatch at " + validDate.toString());    }    String alphabeticDate=validDate.format(parseFormat2);    if (!doesParsedDateMatchText(validDate,alphabeticDate,Locale.getDefault())) {      System.out.println("invalid mismatch at " + validDate.toString());    }    validDate=validDate.plusDays(1);  }  LocalDate validDateBC=LocalDate.of(-10000,1,1);  while (validDateBC.getYear() < 5) {    String alphabeticDateBC=validDateBC.format(parseFormatBC);    if (!doesParsedDateMatchText(validDateBC,alphabeticDateBC,Locale.getDefault())) {      System.out.println("invalid mismatch at " + validDateBC.toString());    }    validDateBC=validDateBC.plusDays(1);  }  System.out.println("done.");}  }
class C{  public void upgrade(){  ByteArrayOutputStream out=new ByteArrayOutputStream();  if (execute(Arrays.asList("groovy","="),new ByteArrayInputStream("hudson.remoting.Channel.current().setRestricted(false)".getBytes(defaultCharset())),out,out) != 0) {    throw new SecurityException(out.toString());  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 10:59:36.224 -0400",hash_original_method="15FEE66BB99145EDAB81DC2373AC2E88",hash_generated_method="E748DB92F5AE2DB357CBF5EA9893CBD3") static boolean isSupportFragmentClass(Context context,String fname){  try {    Class<?> clazz=sClassMap.get(fname);    if (clazz == null) {      clazz=context.getClassLoader().loadClass(fname);      sClassMap.put(fname,clazz);    }    return Fragment.class.isAssignableFrom(clazz);  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  public boolean configurationsOccurred(){  return mConfigurationChangeOccurred;}  }
class C{  public static int computeEnumSizeNoTag(final int value){  return computeInt32SizeNoTag(value);}  }
class C{  public GetIndexTemplatesRequest names(String... names){  this.names=names;  return this;}  }
class C{  public boolean isUILocked(){  return isEnabled();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double minVal;  double maxVal;  double centreValue;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSizeX=Integer.parseInt(args[2]);  filterSizeY=Integer.parseInt(args[3]);  filterRounded=Boolean.parseBoolean(args[4]);  reflectAtBorders=Boolean.parseBoolean(args[5]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    double largeVal=Double.MAX_VALUE;    double smallVal=Double.MIN_VALUE;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          minVal=largeVal;          maxVal=smallVal;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              if (x != col && y != row) {                if (z < minVal) {                  minVal=z;                }                if (z > maxVal) {                  maxVal=z;                }              }            }          }          if (centreValue > maxVal) {            outputFile.setValue(row,col,maxVal);          } else           if (centreValue < minVal) {            outputFile.setValue(row,col,minVal);          } else {            outputFile.setValue(row,col,centreValue);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isPrivateLabelCard(){  return privateLabelCard;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof Media && object.getClass() == this.getClass() && ((Media)object).getValue() == this.getValue());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z, min, max;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          min=z;          max=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=1 * filterShape[a];              sum+=z * filterShape[a];              if (z < min) {                min=z;              }              if (z > max) {                max=z;              }            }          }          if ((n - 2) > 0) {            outputFile.setValue(row,col,(sum - min - max) / (n - 2));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void start() throws IgniteCheckedException {  srvEndpoint=createEndpoint(endpointCfg,mgmt);  if (U.isWindows() && srvEndpoint instanceof IpcSharedMemoryServerEndpoint)   throw new IgniteCheckedException(IpcSharedMemoryServerEndpoint.class.getSimpleName() + " should not be configured on Windows (configure " + IpcServerTcpEndpoint.class.getSimpleName()+ ")");  if (srvEndpoint instanceof IpcServerTcpEndpoint) {    IpcServerTcpEndpoint srvEndpoint0=(IpcServerTcpEndpoint)srvEndpoint;    srvEndpoint0.setManagement(mgmt);    if (srvEndpoint0.getHost() == null) {      if (mgmt) {        String locHostName=igfsCtx.kernalContext().config().getLocalHost();        try {          srvEndpoint0.setHost(U.resolveLocalHost(locHostName).getHostAddress());        } catch (        IOException e) {          throw new IgniteCheckedException("Failed to resolve local host: " + locHostName,e);        }      } else       srvEndpoint0.setHost("127.0.0.1");    }  }  igfsCtx.kernalContext().resource().injectGeneric(srvEndpoint);  srvEndpoint.start();  if (srvEndpoint.getPort() >= 0)   igfsCtx.kernalContext().ports().registerPort(srvEndpoint.getPort(),TCP,srvEndpoint.getClass());  hnd=new IgfsIpcHandler(igfsCtx,endpointCfg,mgmt);  acceptWorker=new AcceptWorker();}  }
class C{  static byte deltaMarkState(byte state,boolean increment){  byte rtn=state;  do {    rtn=(byte)(increment ? rtn + MARK_INCREMENT : rtn - MARK_INCREMENT);    rtn&=MARK_MASK;  } while (rtn < MARK_BASE_VALUE);  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(rtn != state);  return rtn;}  }
class C{  public void processXformsQueue() throws APIException {synchronized (isRunning) {    if (isRunning) {      log.warn(Context.getMessageSourceService().getMessage("xforms.problemXformsQueue"));      return;    }    isRunning=true;  }  try {    File queueDir=XformsUtil.getXformsQueueDir();    for (    File file : queueDir.listFiles()) {      try {        processXForm(XformsUtil.readFile(file.getAbsolutePath()),file.getAbsolutePath(),false,null);      } catch (      Exception e) {        log.error(Context.getMessageSourceService().getMessage("xforms.problemProcessingXform") + file.getAbsolutePath(),e);      }    }  } catch (  Exception e) {    log.error(Context.getMessageSourceService().getMessage("xforms.problemProcessingQueue"),e);  } finally {    isRunning=false;  }}  }
class C{  protected void decrementActiveClientTransactionCount(){  if (this.activeClientTransactionCount.decrementAndGet() <= this.clientTransactionTableLowaterMark && !this.unlimitedClientTransactionTableSize) {synchronized (this.clientTransactionTable) {      clientTransactionTable.notify();    }  }}  }
class C{  @After public void tearDown(){  value=null;}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public static Collection flatten(boolean[] self){  return flatten(toList(self),new ArrayList());}  }
class C{  public static boolean isAllzs(String s){  return Pattern.matches("[z]+",s);}  }
class C{  public TDoubleDoubleHashMap(TDoubleHashingStrategy strategy){  super(strategy);}  }
class C{  private void initialize(AtlasGraph graph) throws RepositoryException, IndexException {  AtlasGraphManagement management=graph.getManagementSystem();  try {    if (management.containsPropertyKey(Constants.VERTEX_TYPE_PROPERTY_KEY)) {      LOG.info("Global indexes already exist for graph");      management.commit();      return;    }    LOG.info("Indexes do not exist, Creating indexes for graph.");    management.createVertexIndex(Constants.VERTEX_INDEX,Constants.BACKING_INDEX,Collections.<AtlasPropertyKey>emptyList());    management.createEdgeIndex(Constants.EDGE_INDEX,Constants.BACKING_INDEX);    createIndexes(management,Constants.GUID_PROPERTY_KEY,String.class,true,AtlasCardinality.SINGLE,true,true);    createIndexes(management,Constants.TIMESTAMP_PROPERTY_KEY,Long.class,false,AtlasCardinality.SINGLE,true,true);    createIndexes(management,Constants.STATE_PROPERTY_KEY,String.class,false,AtlasCardinality.SINGLE,false,false);    createIndexes(management,Constants.MODIFICATION_TIMESTAMP_PROPERTY_KEY,Long.class,false,AtlasCardinality.SINGLE,false,false);    createIndexes(management,Constants.ENTITY_TYPE_PROPERTY_KEY,String.class,false,AtlasCardinality.SINGLE,true,true);    createIndexes(management,Constants.SUPER_TYPES_PROPERTY_KEY,String.class,false,AtlasCardinality.SET,true,true);    createIndexes(management,Constants.TRAIT_NAMES_PROPERTY_KEY,String.class,false,AtlasCardinality.SET,true,true);    createFullTextIndex(management);    createTypeStoreIndexes(management);    commit(management);    LOG.info("Index creation for global keys complete.");  } catch (  Throwable t) {    rollback(management);    throw new RepositoryException(t);  }}  }
class C{  public void openSerialPortConnection(){  closeConnection();  if (nmeaSerialPortReader == null)   nmeaSerialPortReader=NmeaReaderFactory.instance().createSerialPortReader();  if (nmeaSerialPortReader != null) {    try {      nmeaSerialPortReader.openStream();      nmeaReader=nmeaSerialPortReader;      nmeaReader.addListener(this);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  protected ECPoint multiplyPositive(ECPoint p,BigInteger k){  ECPoint R0=p.getCurve().getInfinity(), R1=p;  int n=k.bitLength();  int s=k.getLowestSetBit();  R1=R1.timesPow2(s);  int i=s;  while (++i < n) {    R0=R0.add(k.testBit(i) ? R1 : R1.negate());    R1=R1.twice();  }  R0=R0.add(R1);  return R0;}  }
class C{  private void doPrintEntries(PrintStream out) throws Exception {  if (storePass == null && !KeyStoreUtil.isWindowsKeyStore(storetype)) {    printWarning();  } else {    out.println();  }  out.println(rb.getString("Keystore.type.") + keyStore.getType());  out.println(rb.getString("Keystore.provider.") + keyStore.getProvider().getName());  out.println();  MessageFormat form;  form=(keyStore.size() == 1) ? new MessageFormat(rb.getString("Your.keystore.contains.keyStore.size.entry")) : new MessageFormat(rb.getString("Your.keystore.contains.keyStore.size.entries"));  Object[] source={new Integer(keyStore.size())};  out.println(form.format(source));  out.println();  for (Enumeration<String> e=keyStore.aliases(); e.hasMoreElements(); ) {    String alias=e.nextElement();    doPrintEntry(alias,out,false);    if (verbose || rfc) {      out.println(rb.getString("NEWLINE"));      out.println(rb.getString("STAR"));      out.println(rb.getString("STARNN"));    }  }}  }
class C{  private void handleEvent(Event event){  if (event instanceof ExceptionEvent) {    exceptionEvent((ExceptionEvent)event);  } else   if (event instanceof ModificationWatchpointEvent) {    fieldWatchEvent((ModificationWatchpointEvent)event);  } else   if (event instanceof MethodEntryEvent) {    methodEntryEvent((MethodEntryEvent)event);  } else   if (event instanceof MethodExitEvent) {    methodExitEvent((MethodExitEvent)event);  } else   if (event instanceof StepEvent) {    stepEvent((StepEvent)event);  } else   if (event instanceof ThreadDeathEvent) {    threadDeathEvent((ThreadDeathEvent)event);  } else   if (event instanceof ClassPrepareEvent) {    classPrepareEvent((ClassPrepareEvent)event);  } else   if (event instanceof VMStartEvent) {    vmStartEvent((VMStartEvent)event);  } else   if (event instanceof VMDeathEvent) {    vmDeathEvent((VMDeathEvent)event);  } else   if (event instanceof VMDisconnectEvent) {    vmDisconnectEvent((VMDisconnectEvent)event);  } else {    throw new Error("Unexpected event type");  }}  }
class C{  private void sloResponse(final HttpServletRequest request,final HttpServletResponse httpResponse){  logger.info("Logout response received: ");  LogoutProcessor processor=this.getLogoutProcessor();  ValidationState validator=new SloResponseValidationState(request,this);  this.validationState=validator;  try {    validator.validate();    Message message=this.createMessage(validator,true);    if (validator.getStatus().equals(StatusCode.SUCCESS_URI)) {      this.getLogoutProcessor().logoutSuccess(message,request,httpResponse);    } else {      logger.error("Received Logout Response status is a 'Logout Failure'");      this.getLogoutProcessor().logoutError(message,request,httpResponse);    }  } catch (  Exception error) {    logger.error("Logout Response validation failed. Exception:",error);    if (validator.getValidationResult().isValid()) {      validator.setValidationResult(new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,Error.BAD_RESPONSE,error.getMessage()));    }    Message errorMessage=this.createMessage(validator,true);    processor.logoutError(errorMessage,request,httpResponse);  }}  }
class C{  protected ObjectMatrix2D like2D(int rows,int columns,int rowZero,int columnZero,int rowStride,int columnStride){  throw new InternalError();}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=serversDAO.totalRecordCount();    List<com.wipro.ats.bdre.md.dao.jpa.Servers> jpaServersList=serversDAO.list(startPage,pageSize);    List<Servers> servers=new ArrayList<Servers>();    for (    com.wipro.ats.bdre.md.dao.jpa.Servers server : jpaServersList) {      Servers returnServer=new Servers();      returnServer.setServerId(server.getServerId());      returnServer.setServerName(server.getServerName());      returnServer.setServerType(server.getServerType());      returnServer.setLoginUser(server.getLoginUser());      returnServer.setLoginPassword(server.getLoginPassword());      returnServer.setServerMetaInfo(server.getServerMetainfo());      returnServer.setServerIp(server.getServerIp());      returnServer.setSshPrivateKey(server.getSshPrivateKey());      returnServer.setCounter(counter);      servers.add(returnServer);    }    restWrapper=new RestWrapper(servers,RestWrapper.OK);    LOGGER.info("All records listed from Servers by User:" + principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){  if (alav.getNamespaceURI() == null && alav.getLocalName().equals(SVG_D_ATTRIBUTE)) {    buildShape(ctx,e,(ShapeNode)node);    handleGeometryChanged();  } else {    super.handleAnimatedAttributeChanged(alav);  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  int paintCount=stream.readInt();  this.paintSequence=new Paint[paintCount];  for (int i=0; i < paintCount; i++) {    this.paintSequence[i]=SerialUtilities.readPaint(stream);  }  int outlinePaintCount=stream.readInt();  this.outlinePaintSequence=new Paint[outlinePaintCount];  for (int i=0; i < outlinePaintCount; i++) {    this.outlinePaintSequence[i]=SerialUtilities.readPaint(stream);  }  int strokeCount=stream.readInt();  this.strokeSequence=new Stroke[strokeCount];  for (int i=0; i < strokeCount; i++) {    this.strokeSequence[i]=SerialUtilities.readStroke(stream);  }  int outlineStrokeCount=stream.readInt();  this.outlineStrokeSequence=new Stroke[outlineStrokeCount];  for (int i=0; i < outlineStrokeCount; i++) {    this.outlineStrokeSequence[i]=SerialUtilities.readStroke(stream);  }  int shapeCount=stream.readInt();  this.shapeSequence=new Shape[shapeCount];  for (int i=0; i < shapeCount; i++) {    this.shapeSequence[i]=SerialUtilities.readShape(stream);  }}  }
class C{  public void dumpTree(PrintStream printStream,DumpConfiguration dumpConfiguration){  dumpTree(printStream,tree.getRoot(),0,dumpConfiguration);}  }
class C{  public static int decodeRoman(String roman){  int result=0;  String uRoman=roman.toUpperCase();  for (int i=0; i < uRoman.length() - 1; i++) {    if (decodeSingleRoman(uRoman.charAt(i)) < decodeSingleRoman(uRoman.charAt(i + 1))) {      result-=decodeSingleRoman(uRoman.charAt(i));    } else {      result+=decodeSingleRoman(uRoman.charAt(i));    }  }  result+=decodeSingleRoman(uRoman.charAt(uRoman.length() - 1));  return result;}  }
class C{  public void addBodyAndJoint(Body argBody,DistanceJoint argJoint){  addBody(argBody);  if (joints == null) {    joints=new ArrayList<DistanceJoint>();  }  joints.add(argJoint);}  }
class C{  public ITPS delete(Schema schema,Object primaryKey){  return delete(schema,primaryKey,MIN_TIMESTAMP,CURRENT_ROW,AUTO_TIMESTAMP_UNIQUE,null);}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  private void endScope(int adr){  LocalVar v=lvar[adr];  if (v != null) {    if (v.isLastRangeInitialized()) {      char length=(char)(curCP() - v.lastRange().start_pc);      if (length < Character.MAX_VALUE) {        v.closeRange(length);        putVar(v);        fillLocalVarPosition(v);      }    }    lvar[adr]=null;  }  state.defined.excl(adr);}  }
class C{  boolean cancel(int propertyConstant){  if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {    int count=mNameValuesHolder.size();    for (int i=0; i < count; ++i) {      NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i);      if (nameValuesHolder.mNameConstant == propertyConstant) {        mNameValuesHolder.remove(i);        mPropertyMask&=~propertyConstant;        return true;      }    }  }  return false;}  }
class C{  public WmsLayer(){  this.init();}  }
class C{  private int computeZPosition(final ISItem item){  final int totalWidth=getClientArea().width / 2;  final int centerX=getClientArea().width / 2;  return (int)(centerX + item.getzPosition() * totalWidth);}  }
class C{  public Ellipsoid(Position centerPosition,double northSouthRadius,double verticalRadius,double eastWestRadius){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (northSouthRadius <= 0 || eastWestRadius <= 0 || verticalRadius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.northSouthRadius=northSouthRadius;  this.verticalRadius=verticalRadius;  this.eastWestRadius=eastWestRadius;  this.setUpGeometryCache();}  }
class C{  @Override public JettySolrRunner createJetty(File solrHome,String dataDir,String shardList,String solrConfigOverride,String schemaOverride) throws Exception {  return createProxiedJetty(solrHome,dataDir,shardList,solrConfigOverride,schemaOverride);}  }
class C{  @Override public void clear(){  super.clear();  head=tail=null;}  }
class C{  public static void logArticleRead(final Logger logger,final Task<Revision> article,final long time,final long position){  logger.logMessage(Level.INFO,"Read article\t" + Time.toClock(time) + "\t"+ article.toString()+ "\t"+ position);}  }
class C{  public ClassLocation createClass(){  ClassLocation cl=new ClassLocation();  classLocations.add(cl);  return cl;}  }
class C{  public EdgeNGramFilterFactory(Map<String,String> args){  super(args);  minGramSize=getInt(args,"minGramSize",EdgeNGramTokenFilter.DEFAULT_MIN_GRAM_SIZE);  maxGramSize=getInt(args,"maxGramSize",EdgeNGramTokenFilter.DEFAULT_MAX_GRAM_SIZE);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static boolean isBase64(final byte octet){  return octet == PAD_DEFAULT || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);}  }
class C{  public double cdf(int k){  if (k < 0)   return 0.0;  if (k >= cdf.length - 1)   return 1.0;  return cdf[k];}  }
class C{  public void entryIdChanged(NceConsistRosterEntry r){  log.debug("EntryIdChanged");  NceConsistRosterEntry[] rarray=new NceConsistRosterEntry[_list.size()];  for (int i=0; i < rarray.length; i++) {    rarray[i]=_list.get(i);  }  jmri.util.StringUtil.sortUpperCase(rarray);  for (int i=0; i < rarray.length; i++) {    _list.set(i,rarray[i]);  }  firePropertyChange("change",null,r);}  }
class C{  public static boolean containLetter(String str){  for (int i=0; i < str.length(); i++) {    if (Character.isLetter(str.charAt(i))) {      return true;    }  }  return false;}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws org.xml.sax.SAXException {  if (qName.equals(Translation.XML_TAG) || qName.equals(Translation.XML_TAG2)) {    m_AD_Language=attributes.getValue(Translation.XML_ATTRIBUTE_LANGUAGE);    m_isBaseLanguage=Language.isBaseLanguage(m_AD_Language);    m_TableName=attributes.getValue(Translation.XML_ATTRIBUTE_TABLE);    m_updateSQL="UPDATE " + m_TableName;    if (!m_isBaseLanguage)     m_updateSQL+="_Trl";    m_updateSQL+=" SET ";    log.fine("AD_Language=" + m_AD_Language + ", Base="+ m_isBaseLanguage+ ", TableName="+ m_TableName);  } else   if (qName.equals(Translation.XML_ROW_TAG)) {    m_curID=attributes.getValue(Translation.XML_ROW_ATTRIBUTE_ID);    m_trl=attributes.getValue(Translation.XML_ROW_ATTRIBUTE_TRANSLATED);    m_sql=new StringBuffer();  } else   if (qName.equals(Translation.XML_VALUE_TAG)) {    m_curColumnName=attributes.getValue(Translation.XML_VALUE_ATTRIBUTE_COLUMN);  } else   log.severe("UNKNOWN TAG: " + qName);  m_curValue=new StringBuffer();}  }
class C{  public UploadObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  public UniqueString concat(UniqueString uniqueString){  return uniqueStringOf(this.toString() + uniqueString.toString());}  }
class C{  public String name(){  return m_Name;}  }
class C{  protected void damage(Rectangle r){  if (r != null) {    x=r.x - IBeamOverhang - 1;    y=r.y;    width=r.width + (2 * IBeamOverhang) + 3;    height=r.height;    repaint();  }}  }
class C{  private void rebalance(Node<K,V> unbalanced,boolean insert){  for (Node<K,V> node=unbalanced; node != null; node=node.parent) {    Node<K,V> left=node.left;    Node<K,V> right=node.right;    int leftHeight=left != null ? left.height : 0;    int rightHeight=right != null ? right.height : 0;    int delta=leftHeight - rightHeight;    if (delta == -2) {      Node<K,V> rightLeft=right.left;      Node<K,V> rightRight=right.right;      int rightRightHeight=rightRight != null ? rightRight.height : 0;      int rightLeftHeight=rightLeft != null ? rightLeft.height : 0;      int rightDelta=rightLeftHeight - rightRightHeight;      if (rightDelta == -1 || (rightDelta == 0 && !insert)) {        rotateLeft(node);      } else {        assert (rightDelta == 1);        rotateRight(right);        rotateLeft(node);      }      if (insert) {        break;      }    } else     if (delta == 2) {      Node<K,V> leftLeft=left.left;      Node<K,V> leftRight=left.right;      int leftRightHeight=leftRight != null ? leftRight.height : 0;      int leftLeftHeight=leftLeft != null ? leftLeft.height : 0;      int leftDelta=leftLeftHeight - leftRightHeight;      if (leftDelta == 1 || (leftDelta == 0 && !insert)) {        rotateRight(node);      } else {        assert (leftDelta == -1);        rotateLeft(left);        rotateRight(node);      }      if (insert) {        break;      }    } else     if (delta == 0) {      node.height=leftHeight + 1;      if (insert) {        break;      }    } else {      assert (delta == -1 || delta == 1);      node.height=Math.max(leftHeight,rightHeight) + 1;      if (!insert) {        break;      }    }  }}  }
class C{  public LegacyHTMLStripCharFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public java.sql.CallableStatement prepareCall(String sql) throws SQLException {  checkClosed();  try {    return CallableStatementWrapper.getInstance(this,this.pooledConnection,this.mc.prepareCall(sql));  } catch (  SQLException sqlException) {    checkAndFireConnectionError(sqlException);  }  return null;}  }
class C{  @Override protected void doAction(){  closeActiveKeyStore();}  }
class C{  protected double[][] makeJointVectorForNext(double[] destination){  double[][] destNextVectors=new double[destination.length - k][1];  for (int t=k; t < destination.length; t++) {    destNextVectors[t - k][0]=destination[t];  }  return destNextVectors;}  }
class C{  private void beginReadWrite(final byte address){  this.address=address;  state=State.READ_WRITE;  final short value=(short)get();  for (  final Port port : Port.VALUES) {    getCasing().getSendingPipe(getFace(),port).beginWrite(value);  }}  }
class C{  private static void createAndShowGUI(){  frame=new JFrame("BasicDnD");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  JComponent newContentPane=new BasicDnD();  newContentPane.setOpaque(true);  frame.setContentPane(newContentPane);  frame.pack();  frame.setVisible(true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:20.472 -0500",hash_original_method="EFCC34AA69F6F34103211EDFAD5FB56A",hash_generated_method="9D84899AE91390F5AEE34C64C9A5F8AF") public void showNext(){  setDisplayedChild(mWhichChild + 1);}  }
class C{  @Action(value="/revPetition") public String create(){  if (LOGGER.isDebugEnabled())   LOGGER.debug("ObjectionAction | Create | start " + objection);  if (objection != null && objection.getBasicProperty() != null && objection.getState() == null && objection.getBasicProperty().isUnderWorkflow()) {    addActionMessage(getText("property.state.objected",new String[]{objection.getBasicProperty().getUpicNo()}));    return STRUTS_RESULT_MESSAGE;  }  if (objection.getRecievedOn() == null) {    addActionMessage(getText("mandatory.fieldvalue.receivedOn"));    return NEW;  }  isMeesevaUser=propService.isMeesevaUser(securityUtils.getCurrentUser());  if (isMeesevaUser && getMeesevaApplicationNumber() != null) {    objection.setObjectionNumber(objection.getMeesevaApplicationNumber());  } else   objection.setObjectionNumber(applicationNumberGenerator.generate());  objection.getBasicProperty().setStatus(propertyStatusDAO.getPropertyStatusByCode(PropertyTaxConstants.STATUS_OBJECTED_STR));  objection.getBasicProperty().setUnderWorkflow(Boolean.TRUE);  updateStateAndStatus(objection);  addActionMessage(getText("objection.success") + objection.getObjectionNumber());  revisionPetitionService.applyAuditing(objection.getState());  if (!isMeesevaUser)   revisionPetitionService.createRevisionPetition(objection); else {    HashMap<String,String> meesevaParams=new HashMap<String,String>();    meesevaParams.put("ADMISSIONFEE","0");    meesevaParams.put("APPLICATIONNUMBER",objection.getMeesevaApplicationNumber());    objection.getBasicProperty().setSource(PropertyTaxConstants.SOURCEOFDATA_MEESEWA);    objection.setApplicationNo(objection.getMeesevaApplicationNumber());    revisionPetitionService.createRevisionPetition(objection,meesevaParams);  }  sendEmailandSms(objection,REVISION_PETITION_CREATED);  if (LOGGER.isDebugEnabled())   LOGGER.debug("ObjectionAction | Create | End " + objection);  return isMeesevaUser ? MEESEVA_RESULT_ACK : STRUTS_RESULT_MESSAGE;}  }
class C{  public IrcException(Reason reason,String detail){  super(generateMessage(reason,detail));  checkNotNull(reason,"Reason cannot be null");  checkNotNull(detail,"Detail cannot be null");}  }
class C{  public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());}  }
class C{  protected void installKeyboardActions(){  InputMap inputMap=getInputMap(JComponent.WHEN_FOCUSED);  SwingUtilities.replaceUIInputMap(list,JComponent.WHEN_FOCUSED,inputMap);  LazyActionMap.installLazyActionMap(list,BasicListUI.class,"List.actionMap");}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.634 -0500",hash_original_method="47EC6AE5C259ABE3B4A35CFA178D5702",hash_generated_method="0709ED4B03A3139DD3527CC62BB2E466") public static void gc(){  Runtime.getRuntime().gc();}  }
class C{  private boolean dynInit(){  if (!setMPOS())   return false;  frame.setTitle("Adempiere POS: " + p_pos.getName());  f_order=new SubOrder(this);  add(f_order,"split 2, flowy, growx, spany");  f_curLine=new SubCurrentLine(this);  add(f_curLine,"h 300, growx, growy, gaptop 30");  f_functionKeys=new SubFunctionKeys(this);  add(f_functionKeys,"aligny top, h 500, growx, growy, flowy, split 2");  return true;}  }
class C{  public void warn(Element e,String msg,Object... args){  messager.printMessage(Diagnostic.Kind.WARNING,String.format(msg,args),e);}  }
class C{  public EntropyMixer(Context context,String entropyFile,String randomDevice){  if (randomDevice == null) {    throw new NullPointerException("randomDevice");  }  if (entropyFile == null) {    throw new NullPointerException("entropyFile");  }  this.randomDevice=randomDevice;  this.entropyFile=entropyFile;  loadInitialEntropy();  addDeviceSpecificEntropy();  writeEntropy();  scheduleEntropyWriter();  IntentFilter broadcastFilter=new IntentFilter(Intent.ACTION_SHUTDOWN);  broadcastFilter.addAction(Intent.ACTION_POWER_CONNECTED);  broadcastFilter.addAction(Intent.ACTION_REBOOT);  context.registerReceiver(mBroadcastReceiver,broadcastFilter);}  }
class C{  private Method(){  vmMethod=null;  invoker=null;}  }
class C{  public ServiceCall<Ranking> rank(final String rankerID,final File answers,Integer topAnswers){  Validator.isTrue((rankerID != null) && !rankerID.isEmpty(),"rankerID cannot be null or empty");  Validator.notNull(answers,"answers file cannot be null");  Validator.isTrue(answers.exists(),"answers file: " + answers.getAbsolutePath() + " not found");  final okhttp3.MultipartBody.Builder builder=new MultipartBody.Builder().setType(MultipartBody.FORM).addPart(Headers.of(HttpHeaders.CONTENT_DISPOSITION,"form-data; name=\"answer_data\""),RequestBody.create(HttpMediaType.BINARY_FILE,answers));  if (topAnswers != null) {    builder.addFormDataPart(ANSWERS,topAnswers.toString());  }  final String path=String.format(PATH_RANK,rankerID);  final Request request=RequestBuilder.post(path).body(builder.build()).build();  return createServiceCall(request,ResponseConverterUtils.getObject(Ranking.class));}  }
class C{  public tfoot addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.155 -0500",hash_original_method="131EA8692C493A86BCD7B59A8B1306F4",hash_generated_method="A675D2F50F847BFFE856FA499291DBFE") public String buildQuery(String[] projectionIn,String selection,String groupBy,String having,String sortOrder,String limit){  String[] projection=computeProjection(projectionIn);  StringBuilder where=new StringBuilder();  boolean hasBaseWhereClause=mWhereClause != null && mWhereClause.length() > 0;  if (hasBaseWhereClause) {    where.append(mWhereClause.toString());    where.append(')');  }  if (selection != null && selection.length() > 0) {    if (hasBaseWhereClause) {      where.append(" AND ");    }    where.append('(');    where.append(selection);    where.append(')');  }  return buildQueryString(mDistinct,mTables,projection,where.toString(),groupBy,having,sortOrder,limit);}  }
class C{  public static double tan(double radians){  return Math.tan(radians);}  }
class C{  public static void moveUp(JList list){  if (canMoveUp(list))   moveItems(list,1,MOVE_UP);}  }
class C{  public Builder from(final TextPosition from){  this.from=from;  return this;}  }
class C{  public long optLong(String key){  return optLong(key,0);}  }
class C{  public SupportByFirePosition(String sidc){  super(sidc);}  }
class C{  protected static ImageIcon createImageIcon(String path){  java.net.URL imgURL=Utils.class.getResource(path);  if (imgURL != null) {    return new ImageIcon(imgURL);  } else {    System.err.println("Couldn't find file: " + path);    return null;  }}  }
class C{  protected void initInfo(){  initInfo(0,"",true);}  }
class C{  private String toClassName(String resourceName){  String nameWithDots=resourceName.replace("/",".");  return nameWithDots.substring(0,(nameWithDots.length() - ".class".length()));}  }
class C{  public void createBackup(String backupTag){  createBackup(backupTag,false);}  }
class C{  public static WebSocketFrame createPingFrame(String payload){  return createPingFrame().setPayload(payload);}  }
class C{  public static XintroFragmentBuilder build(){  return new XintroFragmentBuilder();}  }
class C{  private void loadNextPage(List<GoodsListBean> tempNextList){  nexPage=tempNextList.get(0).getNext();  ArrayList<GoodsModel> tempNextAL=new ArrayList<>();  for (int i=0; i < tempNextList.get(0).getPosts().length; i++)   tempNextAL.add(tempNextList.get(0).getPosts()[i]);  addItems(tempNextAL);  notifyDataSetChanged();}  }
class C{  public String toUrlParam(){  StringBuilder strBuilder=new StringBuilder().append(id).append(",").append(extension).append(",").append(createDate.getTime());  if (size != null) {    strBuilder.append(",").append(size);  }  return strBuilder.toString();}  }
class C{  public DSSDocument generateCAdESContentTimestamp(final XAdESSignatureParameters externalParameters){  final TimestampToken contentTimestampToken=generateCAdESContentTimestampAsTimestampToken(externalParameters);  final InMemoryDocument document=new InMemoryDocument(contentTimestampToken.getEncoded());  return document;}  }
class C{  private void xmlOnly(Node tree){  try {    String result=renderHtml(tree);    throw new AssertionFailedError("Unexpected renderHtml success: " + result);  } catch (  UncheckedUnrenderableException e) {  }  String result=renderXml(tree);  assertIdenticalStructure(html(result),xml(result));}  }
class C{  public void testColdDeployRar(){  this.fileHandler.createFile("ram:///test.rar");  RAR rar=(RAR)factory.createDeployable("jonas4x","ram:///test.rar",DeployableType.RAR);  setupAdminColdDeployment();  deployer.deploy(rar);  assertTrue(fileHandler.exists(deployer.getDeployableDir(rar) + "/autoload/test.rar"));}  }
class C{  private File writeBinaryFile(Map<String,float[]> vectors) throws IOException {  File binaryTarget=new File(testContext.getTestOutputFolder(),"binaryTarget");  convertWordVectorsToBinary(vectors,binaryTarget);  return binaryTarget;}  }
class C{  @Override public double countExample(double label,double predictedLabel){  double dif=label - predictedLabel;  return dif * dif;}  }
class C{  public PubsubFuture<Void> deleteTopic(final String canonicalTopic){  validateCanonicalTopic(canonicalTopic);  return delete("delete topic",canonicalTopic,Void.class);}  }
class C{  private void updateBoundsForAddedItem(XYDataItem item){  double x=item.getXValue();  this.minX=minIgnoreNaN(this.minX,x);  this.maxX=maxIgnoreNaN(this.maxX,x);  if (item.getY() != null) {    double y=item.getYValue();    this.minY=minIgnoreNaN(this.minY,y);    this.maxY=maxIgnoreNaN(this.maxY,y);  }}  }
class C{  public FunctionInvocationTargetException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  @Override public boolean onCreate(){  if (systemFacade == null) {    systemFacade=new RealSystemFacade(getContext(),new Clock());  }  Context context=getContext();  PackageManager packageManager=context.getPackageManager();  String packageName=context.getApplicationContext().getPackageName();  DatabaseFilenameProvider databaseFilenameProvider=new DatabaseFilenameProvider(packageManager,packageName,DB_NAME);  String databaseFilename=databaseFilenameProvider.getDatabaseFilename();  openHelper=new DatabaseHelper(context,databaseFilename);  systemUid=Process.SYSTEM_UID;  ApplicationInfo appInfo=null;  try {    appInfo=getContext().getPackageManager().getApplicationInfo("com.android.defcontainer",0);  } catch (  NameNotFoundException e) {    LLog.wtf(e,"Could not get ApplicationInfo for com.android.defconatiner");  }  if (appInfo != null) {    defcontaineruid=appInfo.uid;  }  context.startService(new Intent(context,DownloadService.class));  downloadsDataDir=context.getCacheDir();  return true;}  }
class C{  private @CheckForNull NullnessAnnotation toNullnessAnnotation(@CheckForNull TypeQualifierAnnotation tqa){  if (tqa == null || tqa == TypeQualifierAnnotation.OVERRIDES_BUT_NO_ANNOTATION) {    return null;  }  if (tqa.when == null) {    new NullPointerException("TGA value with null when field").printStackTrace();    return null;  }switch (tqa.when) {case ALWAYS:    return NullnessAnnotation.NONNULL;case MAYBE:  return NullnessAnnotation.CHECK_FOR_NULL;case NEVER:return NullnessAnnotation.CHECK_FOR_NULL;case UNKNOWN:return NullnessAnnotation.UNKNOWN_NULLNESS;}throw new IllegalStateException();}  }
class C{  public void computeDigest(final Object snapshot,final MessageDigest digest){  final ByteBuffer bb=ByteBuffer.allocate(m_size);  final byte[] ba=m_index == 0 && s_islogDebug ? bb.array() : null;  for (  AllocBlock b : m_allocBlocks) {    final int bits=b.m_commit.length * 32;    final long startAddr=RWStore.convertAddr(b.m_addr);    for (int i=0; i < bits; i++) {      if (RWStore.tstBit(b.m_commit,i)) {        final long paddr=startAddr + (m_size * i);        bb.position(0);        m_store.readRaw(paddr,bb);        digest.update(bb);        if (ba != null) {          log.debug(BytesUtil.toHexString(ba));        }      }    }  }{    final byte[] data=digest.digest();    final StringBuffer sb=new StringBuffer();    for (    byte b : data) {      if (sb.length() > 0)       sb.append(",");      sb.append(b);    }    log.warn("ALLOCATOR[" + m_index + ":"+ m_size+ "] freeBits: "+ freebits()+ ", DIGEST:"+ sb.toString());  }}  }
class C{  public static String generateRandomWord(int n){  int chars=random.nextInt(n - 1);  StringBuilder result=new StringBuilder(chars);  for (int i=0; i < chars + 1; i++) {    result.append(WORD_CHARS.charAt(random.nextInt(WORD_CHARS.length())));  }  return result.toString();}  }
class C{  protected void writeOpenTagEnd() throws IOException {  writer.write('>');}  }
class C{  public MatrixStack pushMatrix(){  stack.add(current);  return this;}  }
class C{  private static List<Row> makeTableData(String tableId,int numRows){  service.createTable(tableId);  Map<ByteString,ByteString> testData=service.getTable(tableId);  List<Row> testRows=new ArrayList<>(numRows);  for (int i=0; i < numRows; ++i) {    ByteString key=ByteString.copyFromUtf8(String.format("key%09d",i));    ByteString value=ByteString.copyFromUtf8(String.format("value%09d",i));    testData.put(key,value);    testRows.add(makeRow(key,value));  }  return testRows;}  }
class C{  public void testMapperInstance() throws Exception {  KerberosUserNameMapper mapper=create(INSTANCE,null);  assertEquals(IgfsUtils.fixUserName(null) + "/" + INSTANCE,mapper.map(null));  assertEquals("test" + "/" + INSTANCE,mapper.map("test"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.640 -0400",hash_original_method="A6D59C67E1B0FB9D0521062EBAAF3984",hash_generated_method="787898DA8410423B0B59DD22830B0F3F") private void fillBuffer() throws IOException {  if (!endOfInput && (lastCoderResult == null || lastCoderResult.isUnderflow())) {    encoderIn.compact();    int position=encoderIn.position();    int c=reader.read(encoderIn.array(),position,encoderIn.remaining());    if (c == -1) {      endOfInput=true;    } else {      encoderIn.position(position + c);    }    encoderIn.flip();  }  encoderOut.compact();  lastCoderResult=encoder.encode(encoderIn,encoderOut,endOfInput);  encoderOut.flip();}  }
class C{  protected void handleStartupWebLoad(){  Logging.logd("Handling start-up load");  if (getIntent().getData() != null && (!getIntent().getDataString().isEmpty())) {    Logging.logd(" => Intent url load");    getTabSwitcher().addTab(getIntent().getDataString());  } else   if (getIntent().getStringExtra(BgLoadActivity.bgLoadKey) != null && (!getIntent().getStringExtra(BgLoadActivity.bgLoadKey).isEmpty())) {    Logging.logd(" => Background load");    getTabSwitcher().addTab(getIntent().getStringExtra(BgLoadActivity.bgLoadKey));  } else   if (getIntent().getStringExtra(URL_TO_LOAD_KEY) != null && (!getIntent().getStringExtra(URL_TO_LOAD_KEY).isEmpty())) {    Logging.logd(" => Shortcut/requested load");    getTabSwitcher().addTab(getIntent().getStringExtra(URL_TO_LOAD_KEY));  } else   if (getBrowserStorage().isLastSessionEnabled() && getBrowserStorage().getLastBrowsingSession() != null) {    Logging.logd(" => Restore last session");    Logging.logd("    Restoring last session (" + getBrowserStorage().getLastBrowsingSession().length + " tabs)...");    for (    String s : getBrowserStorage().getLastBrowsingSession()) {      getTabSwitcher().addTab(s);    }    if (getBrowserStorage().getLastBrowsingSession().length == 0) {      Logging.logd("    No tabs to restore.");      getTabSwitcher().addTab(browserStorage.getUserHomePage(),"");      return;    }    getTabSwitcher().switchTab(0);    getTabSwitcher().fixWebResumation();    Logging.logd("    Restored!");  } else   if (readyToLoadUrl.isEmpty()) {    Logging.logd(" => Default load");    getTabSwitcher().addTab(browserStorage.getUserHomePage(),"");  } else {    Logging.logd("In-App requested load");    getTabSwitcher().addTab(readyToLoadUrl,null);    readyToLoadUrl="";  }}  }
class C{  private Object checkValue(Object value) throws ExpressionException {  if (dimension > 1) {    if (value instanceof Array) {      if (((Array)value).getDimension() != dimension - 1)       throw new ExpressionException("You can only Append an Array with " + (dimension - 1) + " Dimension","array has wrong dimension, now is " + (((Array)value).getDimension()) + " but it must be "+ (dimension - 1));    } else     throw new ExpressionException("You can only Append an Array with " + (dimension - 1) + " Dimension","now is a object of type " + Caster.toClassName(value));  }  return value;}  }
class C{  public static String randomAlphabetic(final int count){  return random(count,true,false);}  }
class C{  private void checkClosedForWrite(){  checkClosed(true);}  }
class C{  public boolean performItemClick(int position){  if (isShowing()) {    if (mItemClickListener != null) {      final XpDropDownListView list=mDropDownList;      final View child=list.getChildAt(position - list.getFirstVisiblePosition());      final ListAdapter adapter=list.getAdapter();      mItemClickListener.onItemClick(list,child,position,adapter.getItemId(position));    }    return true;  }  return false;}  }
class C{  public PKCS10CertificationRequest(String signatureAlgorithm,X500Principal subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  this(signatureAlgorithm,convertName(subject),key,attributes,signingKey,BouncyCastleProvider.PROVIDER_NAME);}  }
class C{  public static FDBigInteger valueOfMulPow52(long value,int p5,int p2){  assert p5 >= 0 : p5;  assert p2 >= 0 : p2;  int v0=(int)value;  int v1=(int)(value >>> 32);  int wordcount=p2 >> 5;  int bitcount=p2 & 0x1f;  if (p5 != 0) {    if (p5 < SMALL_5_POW.length) {      long pow5=SMALL_5_POW[p5] & LONG_MASK;      long carry=(v0 & LONG_MASK) * pow5;      v0=(int)carry;      carry>>>=32;      carry=(v1 & LONG_MASK) * pow5 + carry;      v1=(int)carry;      int v2=(int)(carry >>> 32);      if (bitcount == 0) {        return new FDBigInteger(new int[]{v0,v1,v2},wordcount);      } else {        return new FDBigInteger(new int[]{v0 << bitcount,(v1 << bitcount) | (v0 >>> (32 - bitcount)),(v2 << bitcount) | (v1 >>> (32 - bitcount)),v2 >>> (32 - bitcount)},wordcount);      }    } else {      FDBigInteger pow5=big5pow(p5);      int[] r;      if (v1 == 0) {        r=new int[pow5.nWords + 1 + ((p2 != 0) ? 1 : 0)];        mult(pow5.data,pow5.nWords,v0,r);      } else {        r=new int[pow5.nWords + 2 + ((p2 != 0) ? 1 : 0)];        mult(pow5.data,pow5.nWords,v0,v1,r);      }      return (new FDBigInteger(r,pow5.offset)).leftShift(p2);    }  } else   if (p2 != 0) {    if (bitcount == 0) {      return new FDBigInteger(new int[]{v0,v1},wordcount);    } else {      return new FDBigInteger(new int[]{v0 << bitcount,(v1 << bitcount) | (v0 >>> (32 - bitcount)),v1 >>> (32 - bitcount)},wordcount);    }  }  return new FDBigInteger(new int[]{v0,v1},0);}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  private void scrollUpdated(float x,float y,float dx,float dy,float tx,float ty){  if (mEdgeSwipeHandler != null && mEdgeSwipeStarted) {    mEdgeSwipeHandler.swipeUpdated(x,y,dx,dy,tx,ty);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  NodeList newList;  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  newList=docElem.getElementsByTagNameNS("*","*");  assertSize("listSize",35,newList);}  }
class C{  public static void closeBufferedReader(BufferedReader stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing BufferedReader." + e);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.FACET__EXPR:    return basicSetExpr(null,msgs);case GamlPackage.FACET__BLOCK:  return basicSetBlock(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  void addClassList(String classListFilename){  if (classListFilename.length() > 0) {    setOption("classlist",classListFilename);    loadClassNames(classListFilename);  } else {    throw new IllegalArgumentException("class list name may not be empty string");  }}  }
class C{  public static void writeAttribute(final XMLStreamWriter writer,final String attributeName,final byte[] value) throws XMLStreamException {  if (value == null) {    return;  }  try {    writer.writeAttribute(attributeName,new String(Base64.encodeBase64(value),"US-ASCII"));  } catch (  final UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  protected PrinterState(int value){  super(value);}  }
class C{  public DoubleSummaryFactory(final DoubleSummary.Mode summaryMode){  summaryMode_=summaryMode;}  }
class C{  @Override public String toBundleName(String baseName,Locale locale){  String newBaseName=baseName;  String lang=locale.getLanguage();  if (lang.length() > 0) {    int index=baseName.indexOf(RESOURCES);    if (index > 0) {      index+=RESOURCES.length();      newBaseName=baseName.substring(0,index) + lang + "."+ baseName.substring(index);    }  }  return super.toBundleName(newBaseName,locale);}  }
class C{  private List<String> convertByteArrayListToStringValueList(List<byte[]> dictionaryByteArrayList){  List<String> valueList=new ArrayList<>(dictionaryByteArrayList.size());  for (  byte[] value : dictionaryByteArrayList) {    valueList.add(new String(value,Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));  }  return valueList;}  }
class C{  public void enableParameters(boolean enable){  heightText.setEnabled(enable);  inbetweenSpinner.setEnabled(enable);  millisSpinner.setEnabled(enable);  grab.setEnabled(enable);  loop.setEnabled(enable);  fileText.setEnabled(enable);}  }
class C{  public DatosIncorrectosErrorCodigos(){}  }
class C{  public CubeHash384(){}  }
class C{  protected void acceptQuest(){  concreteQuest.getNPC().add(ConversationStates.QUEST_OFFERED,ConversationPhrases.YES_MESSAGES,null,ConversationStates.IDLE,concreteQuest.respondToQuestAcception(),new SetQuestAction(concreteQuest.getSlotName(),""));}  }
class C{  public PendingChangeCacheEvent(final PendingChangeCache cache){  this(cache,null,null);}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (decoder != null) {      decoder.reset();    }    decoder=null;    if (in != null) {      in.close();      in=null;    }  }}  }
class C{  private static void rangeCheck(int arrayLen,int fromIndex,int toIndex){  if (fromIndex > toIndex)   throw new IllegalArgumentException("fromIndex(" + fromIndex + ") > toIndex("+ toIndex+ ")");  if (fromIndex < 0)   throw new ArrayIndexOutOfBoundsException(fromIndex);  if (toIndex > arrayLen)   throw new ArrayIndexOutOfBoundsException(toIndex);}  }
class C{  public static OnDeleteClause createOnDelete(String windowName,String asName){  return OnDeleteClause.create(windowName,asName);}  }
class C{  public boolean removeChild(Node n){  nodeCheck(n,true);  return removeChild(n.getRow());}  }
class C{  private void adjustSize(){  if (bigger(dialog.getPreferredSize(),dialog.getSize())) {    dialog.pack();  }}  }
class C{  public V remove(Object key){  return this.removeInternal(key,true);}  }
class C{  public boolean isProvidedByRuntime(){  return this.isDeclaredProvidedByRuntime();}  }
class C{  public static File createTempFile(final String extension){  try {    final String fileName=String.format("wro4j-%s.%s",UUID.randomUUID().toString(),extension);    final File file=new File(createTempDirectory(),fileName);    file.createNewFile();    return file;  } catch (  final IOException e) {    throw WroRuntimeException.wrap(e);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.PROGRAM___ANONYMOUS_PROGRAM_11:    getAnonymous_program_1_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public void moveSelectedItemsBy(float x,float y){  for (  Entity entity : currentSelection) {    sandbox.itemControl.moveItemBy(entity,x,y);    Overlap2DFacade.getInstance().sendNotification(MsgAPI.ITEM_DATA_UPDATED,entity);  }  sandbox.saveSceneCurrentSceneData();}  }
class C{  public void updateCounter(Long updateCntr){  this.updateCntr=updateCntr;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case NODE_ID:  return isSetNodeId();case AUTH_SCHEME:return isSetAuthScheme();case AUTH_CHALLENGE_RESPONSE:return isSetAuthChallengeResponse();}throw new IllegalStateException();}  }
class C{  public static IMouseStateChange exitEdge(final CStateFactory<?,?> m_factory,final MouseEvent event,final HitInfo hitInfo,final IMouseState state){  if (hitInfo.hasHitNodes()) {    return CHitNodesTransformer.enterNode(m_factory,event,hitInfo);  } else   if (hitInfo.hasHitNodeLabels()) {    throw new IllegalStateException();  } else   if (hitInfo.hasHitEdgeLabels()) {    return CHitEdgeLabelsTransformer.enterEdgeLabel(m_factory,event,hitInfo);  } else   if (hitInfo.hasHitBends()) {    return CHitBendsTransformer.enterBend(m_factory,event,hitInfo);  } else   if (hitInfo.hasHitPorts()) {    return new CStateChange(state,true);  } else {    return new CStateChange(m_factory.createDefaultState(),true);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public boolean showMemoryIsLow(){  if (!isEnabled() || (m_MemoryUsage == null)) {    return true;  }  String msg="Warning: memory is running low - available heap space is less than " + "20% of maximum or 100MB (whichever is greater)\n\n" + "- initial heap size:   " + Utils.doubleToString(toMegaByte(m_MemoryUsage.getInit()),1) + "MB\n"+ "- current memory (heap) used:  "+ Utils.doubleToString(toMegaByte(m_MemoryUsage.getUsed()),1)+ "MB\n"+ "- max. memory (heap) available: "+ Utils.doubleToString(toMegaByte(m_MemoryUsage.getMax()),1)+ "MB\n\n"+ "Consider deleting some results before continuing.\nCheck the Weka FAQ "+ "on the web for suggestions on how to save memory.\n"+ "Note that Weka will shut down when less than 50MB remain."+ "\nDo you wish to continue regardless?\n\n";  System.err.println(msg);  if (getUseGUI()) {    if (!Utils.getDontShowDialog("weka.core.Memory.LowMemoryWarning")) {      JCheckBox dontShow=new JCheckBox("Do not show this message again");      Object[] stuff=new Object[2];      stuff[0]=msg;      stuff[1]=dontShow;      int result=JOptionPane.showConfirmDialog(null,stuff,"Memory",JOptionPane.YES_NO_OPTION);      if (dontShow.isSelected()) {        try {          Utils.setDontShowDialog("weka.core.Memory.LowMemoryWarning");        } catch (        Exception ex) {        }      }      return (result == JOptionPane.YES_OPTION);    }  }  return true;}  }
class C{  public ServiceCompatibilityException(String message){  super(message);}  }
class C{  public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar,char escapechar){  this(writer,separator,quotechar,escapechar,DEFAULT_LINE_END);}  }
class C{  public final void addSessionCookie(Map<String,String> headers){  String sessionId=prefs.getString(SESSION_COOKIE,"");  String expires=prefs.getString(COOKIE_EXPIRE_KEY,"");  Calendar calExpired=parseStringToDate(expires);  if (calExpired != null) {    Calendar calNow=Calendar.getInstance();    if (calExpired.after(calNow)) {      if (sessionId.length() > 0) {        StringBuilder builder=new StringBuilder();        builder.append(SESSION_COOKIE);        builder.append("=");        builder.append(sessionId);        if (headers.containsKey(COOKIE_KEY)) {          builder.append("; ");          builder.append(headers.get(COOKIE_KEY));        }        headers.put(COOKIE_KEY,builder.toString());      }    }  }}  }
class C{  public CircleGenerator(int r){  this.radius=r;}  }
class C{  public static double[][] product(double[][] A,double[][] B){  if (A[0].length != B.length)   throw new RuntimeException("cols in A (" + A.length + ") differs from rows in B ( "+ B.length+ ")");  double[][] C=new double[A.length][B[0].length];  for (int i=0; i < A.length; i++) {    for (int j=0; j < B[0].length; j++) {      C[i][j]=DoubleArrays.innerProduct(A[i],DoubleMatrices.getColumnVector(B,j));    }  }  return C;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.BITWISE_XOR_EXPRESSION__LEFT_OPERAND:    return leftOperand != null;case ExpressionsPackage.BITWISE_XOR_EXPRESSION__RIGHT_OPERAND:  return rightOperand != null;}return super.eIsSet(featureID);}  }
class C{  public static boolean equals(List xs,List ys){  while (xs.tail != null && ys.tail != null) {    if (xs.head == null) {      if (ys.head != null)       return false;    } else {      if (!xs.head.equals(ys.head))       return false;    }    xs=xs.tail;    ys=ys.tail;  }  return xs.tail == null && ys.tail == null;}  }
class C{  private int lastIndexOfAnyBut(final char[] c,final int n,final int from,final int bloomFilter){  final char[] a=array;  int i=length(), k;  if (i == 0)   return -1;  if (n == 0)   return from < i ? from : i - 1;  if (from < i)   i=from + 1;  while (i-- != 0) {    if ((bloomFilter & (1 << (a[i] & 0x1F))) != 0) {      k=n;      while (k-- != 0)       if (a[i] == c[k])       break;      if (k == -1)       return i;    } else     return i;  }  return -1;}  }
class C{  private void offsetChildrenLeftAndRight(int offset){  for (int i=getChildCount() - 1; i >= 0; i--) {    getChildAt(i).offsetLeftAndRight(offset);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {      getChildAt(i).invalidate();    }  }}  }
class C{  public static Validator<CharSequence> maxLength(@NonNull final Context context,final int maxLength){  return new MaxLengthValidator(context,R.string.default_error_message,maxLength);}  }
class C{  public String toString(){  return this.keyword;}  }
class C{  public ImportItem guessType(File f){  Pattern extp=Pattern.compile(".*?(?<Ext>(\\.[^\\.]+)$)");  ImportItem item;  Matcher m=extp.matcher(f.getName());  if (m.matches()) {    item=getItem(f,matchExtension(m.group("Ext")));  } else {    item=getItem(f,Import.None);  }  return item;}  }
class C{  public final BooleanProperty dockedProperty(){  return dockedProperty;}  }
class C{  protected DialogWrapperPeerImpl(@NotNull DialogWrapper wrapper,@Nullable Project project,boolean canBeParent){  this(wrapper,project,canBeParent,DialogWrapper.IdeModalityType.IDE);}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  public static void cleanDirectoryIgnoreException(File directory){  try {    FileUtils.cleanDirectory(directory);  } catch (  Exception e) {    LOGGER.warn(String.format("Failed to clean \"%s\" directory.",directory),e);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.812 -0500",hash_original_method="6370438F3E8FDAC390DBF5D95BB547E6",hash_generated_method="3D9488BFB49AA137790079F85DF9EED2") public SocketException(){}  }
class C{  public void createSeries(CandleDataset source,int seriesIndex){  if (source.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < source.getSeries(seriesIndex).getItemCount(); i++) {    this.updateSeries(source.getSeries(seriesIndex),i,true);  }}  }
class C{  public boolean needsLogging(){  return logFileName != null;}  }
class C{  public boolean isNestedType(){  return this.innerInfo != null;}  }
class C{  public void testIsValid(){  Em18RfidProtocol instance=new Em18RfidProtocol();  assertEquals(true,instance.isValid(msgStandalone));  assertEquals(false,instance.isValid(msgBadChkSumStandalone));}  }
class C{  public NotificationRegistrationStatusEntity createNotificationRegistrationStatusEntity(String code){  NotificationRegistrationStatusEntity notificationRegistrationStatusEntity=new NotificationRegistrationStatusEntity();  notificationRegistrationStatusEntity.setCode(code);  notificationRegistrationStatusEntity.setDescription(String.format("Description of \"%s\".",code));  return notificationRegistrationStatusDao.saveAndRefresh(notificationRegistrationStatusEntity);}  }
class C{  public void addEdge(Dependency dependency){  if (!edges.contains(dependency)) {    edges.add(dependency);    Set<Dependency> outboundEdges=vertices.get(dependency.getDepender());    if (outboundEdges == null) {      outboundEdges=new HashSet();      vertices.put(dependency.getDepender(),outboundEdges);    }    outboundEdges.add(dependency);    if (vertices.get(dependency.getDependsOn()) == null) {      vertices.put(dependency.getDependsOn(),new HashSet());    }  }}  }
class C{  public BooleanConditionBuilder must(ConditionBuilder<?,?>... builders){  must.addAll(Arrays.asList(builders));  return this;}  }
class C{  @Override public boolean showVertexLabelsDefault(){  return true;}  }
class C{  public void send(byte[] packetBuffer,int packetSize) throws IOException {  if (!useCompression) {    if (logger.isTraceEnabled()) {      logger.trace("send packet seq:" + seqNo + " length:"+ (packetSize - 4)+ " data:"+ Utils.hexdump(packetBuffer,maxQuerySizeToLog,4,packetSize - 4));    }    outputStream.write(packetBuffer,0,packetSize);  } else {    this.setCompressSeqNo(0);    compressedAndSend(packetSize,packetBuffer,true);  }}  }
class C{  public void stopAndPrint(){  double tmp=stop();  System.out.println("PARFOR: time = " + tmp + "ms");}  }
class C{  public Lint augment(Symbol sym){  Lint l=augmentor.augment(this,sym.getDeclarationAttributes());  if (sym.isDeprecated()) {    if (l == this)     l=new Lint(this);    l.values.remove(LintCategory.DEPRECATION);    l.suppressedValues.add(LintCategory.DEPRECATION);  }  return l;}  }
class C{  public void tryToDeleteImageSharing(String sharingId){  mImageSharingDeleteOperationHandler.post(new ImageSharingDeleteTask(mImageSharingService,this,mLocalContentResolver,sharingId));}  }
class C{  private static void write(CharSequence from,File to,Charset charset,boolean append) throws IOException {  asCharSink(to,charset,modes(append)).write(from);}  }
class C{  public void throwRuntime(String reason,Throwable t){  throwRuntime(reason,Optional.of(t));}  }
class C{  protected String compute(double value){  if (Double.isNaN(value)) {    return null;  }  return Tools.formatIntegerIfPossible(value);}  }
class C{  public boolean confirmUninstallChanges(Component parent,UninstallationResult result,Set<AddOn> addOnsBeingDownloaded){  Set<AddOn> forcedUninstallations=new HashSet<>(result.getUninstallations());  forcedUninstallations.removeAll(result.getSelectedAddOns());  boolean dependencyDownloadFound=false;  for (  AddOn addOnDownloading : addOnsBeingDownloaded) {    if (containsAny(addOnDownloading.getIdsAddOnDependencies(),forcedUninstallations)) {      dependencyDownloadFound=true;      break;    }  }  if (!dependencyDownloadFound) {    for (    AddOn addOnDownloading : addOnsBeingDownloaded) {      if (containsAny(addOnDownloading.getIdsAddOnDependencies(),result.getSelectedAddOns())) {        dependencyDownloadFound=true;        break;      }    }  }  if (dependencyDownloadFound) {    if (JOptionPane.showConfirmDialog(parent,new Object[]{Constant.messages.getString("cfu.confirmation.dialogue.message.uninstallsRequiredByAddOnsDownloading"),Constant.messages.getString("cfu.confirmation.dialogue.message.continueWithUninstallation")},Constant.PROGRAM_NAME,JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {      return false;    }  }  if (forcedUninstallations.isEmpty() && result.getExtensions().isEmpty()) {    return JOptionPane.showConfirmDialog(parent,Constant.messages.getString("cfu.uninstall.confirm"),Constant.PROGRAM_NAME,JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;  }  if (result.getExtensions().isEmpty()) {    return JOptionPane.showConfirmDialog(parent,new Object[]{Constant.messages.getString("cfu.uninstall.dependentAddOns.confirm"),createScrollableTable(new AddOnTableModel(forcedUninstallations,false)),Constant.messages.getString("cfu.confirmation.dialogue.message.continueWithUninstallation")},Constant.PROGRAM_NAME,JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;  }  if (forcedUninstallations.isEmpty()) {    return JOptionPane.showConfirmDialog(parent,new Object[]{Constant.messages.getString("cfu.uninstall.dependentExtensions.confirm"),createScrollableTable(new ExtensionsTableModel(result.getExtensions())),Constant.messages.getString("cfu.confirmation.dialogue.message.continueWithUninstallation")},Constant.PROGRAM_NAME,JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;  }  JPanel panel=new JPanel(new BorderLayout());  JTabbedPane tabs=new JTabbedPane();  panel.add(tabs);  tabs.add(Constant.messages.getString("cfu.confirmation.dialogue.tab.header.uninstallations"),createScrollableTable(new AddOnTableModel(forcedUninstallations,false)));  tabs.add(Constant.messages.getString("cfu.confirmation.dialogue.tab.header.extensionUnloads"),createScrollableTable(new ExtensionsTableModel(result.getExtensions())));  List<Object> optionPaneContents=new ArrayList<>();  optionPaneContents.add(Constant.messages.getString("cfu.uninstall.dependentAddonsAndExtensions.confirm"));  optionPaneContents.add(panel);  optionPaneContents.add(Constant.messages.getString("cfu.confirmation.dialogue.message.continueWithUninstallation"));  return JOptionPane.showConfirmDialog(parent,optionPaneContents.toArray(),Constant.PROGRAM_NAME,JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;}  }
class C{  public HashMap<String,String> showSlaveStatusMetrics(DBConnectionWrapper conn){  Statement stmt=null;  ResultSet rs=null;  HashMap<String,String> resMap=new HashMap<String,String>(3);  boolean isSlave=false;  int secondsBehindMaster=0;  int slaveIoRunning=1;  int slaveSqlRunning=1;  try {    stmt=conn.getConnection().createStatement();    rs=stmt.executeQuery("show slave status");    while (rs != null && rs.next()) {      int sec=rs.getInt("Seconds_Behind_Master");      if (sec > secondsBehindMaster)       secondsBehindMaster=sec;      if (!"Yes".equalsIgnoreCase(rs.getString("Slave_IO_Running")))       slaveIoRunning=0;      if (!"Yes".equalsIgnoreCase(rs.getString("Slave_SQL_Running")))       slaveSqlRunning=0;      isSlave=true;    }  } catch (  Exception ex) {  } finally {    close(rs);    close(stmt);  }  if (isSlave) {    resMap.put("Seconds_Behind_Master",String.valueOf(secondsBehindMaster));    resMap.put("Slave_IO_Running",String.valueOf(slaveIoRunning));    resMap.put("Slave_SQL_Running",String.valueOf(slaveSqlRunning));  }  return resMap;}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  public boolean isReadWrite(){  if (isExclude())   return false;  return !super.isReadOnly();}  }
class C{  public void release(){  this.base=null;  current=root;  current.body=null;  current.after=null;  current.before=null;}  }
class C{  public boolean isOpen(String DocBaseType,Timestamp dateAcct){  if (!isActive()) {    s_log.warning("Period not active: " + getName());    return false;  }  MAcctSchema as=MClient.get(getCtx(),getAD_Client_ID()).getAcctSchema();  if (as != null && as.isAutoPeriodControl()) {    Timestamp today=TimeUtil.trunc(new Timestamp(System.currentTimeMillis()),TimeUtil.TRUNC_DAY);    Timestamp first=TimeUtil.addDays(today,-as.getPeriod_OpenHistory());    Timestamp last=TimeUtil.addDays(today,as.getPeriod_OpenFuture());    Timestamp date1, date2;    if (dateAcct != null) {      date1=TimeUtil.trunc(dateAcct,TimeUtil.TRUNC_DAY);      date2=date1;    } else {      date1=getStartDate();      date2=getEndDate();    }    if (date1.before(first)) {      log.warning("Automatic Period Control:" + date1 + " before first day - "+ first);      return false;    }    if (date2.after(last)) {      log.warning("Automatic Period Control:" + date2 + " after last day - "+ last);      return false;    }    if (isInPeriod(today)) {      as.setC_Period_ID(getC_Period_ID());      as.saveEx();    }    return true;  }  if (DocBaseType == null) {    log.warning(getName() + " - No DocBaseType");    return false;  }  MPeriodControl pc=getPeriodControl(DocBaseType);  if (pc == null) {    log.warning(getName() + " - Period Control not found for " + DocBaseType);    return false;  }  log.fine(getName() + ": " + DocBaseType);  return pc.isOpen();}  }
class C{  public static NameMatcher<JobKey> jobNameEndsWith(String compareTo){  return NameMatcher.nameEndsWith(compareTo);}  }
class C{  private static void addScorer(Scorer scorer,List<DocIdSetIterator> allIterators,List<TwoPhaseIterator> twoPhaseIterators){  TwoPhaseIterator twoPhaseIter=scorer.twoPhaseIterator();  if (twoPhaseIter != null) {    addTwoPhaseIterator(twoPhaseIter,allIterators,twoPhaseIterators);  } else {    addIterator(scorer.iterator(),allIterators,twoPhaseIterators);  }}  }
class C{  public static int parseString(String value){  return Integer.parseInt(value);}  }
class C{  public CScrollPane(int vsbPolicy,int hsbPolicy){  this(null,vsbPolicy,hsbPolicy);}  }
class C{  public boolean isCacheable(RequestHeaders request){  int responseCode=headers.getResponseCode();  if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NOT_AUTHORITATIVE && responseCode != HttpURLConnection.HTTP_MULT_CHOICE && responseCode != HttpURLConnection.HTTP_MOVED_PERM && responseCode != HttpURLConnection.HTTP_GONE) {    return false;  }  if (request.hasAuthorization() && !isPublic && !mustRevalidate&& sMaxAgeSeconds == -1) {    return false;  }  if (noStore) {    return false;  }  return true;}  }
class C{  public boolean hasIdentifiers(){  return hasRepeatingExtension(Identifier.class);}  }
class C{  public boolean initialize(){  if (mBluetoothManager == null) {    mBluetoothManager=(BluetoothManager)getSystemService(Context.BLUETOOTH_SERVICE);    if (mBluetoothManager == null) {      Log.e(TAG,"Unable to initialize BluetoothManager.");      return false;    }  }  mBluetoothAdapter=mBluetoothManager.getAdapter();  if (mBluetoothAdapter == null) {    Log.e(TAG,"Unable to initialize BluetoothAdapter.");    return false;  }  return true;}  }
class C{  public void updateCrosshairX(double candidateX){  updateCrosshairX(candidateX,0);}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getGroupCloudDeviceDBDao() : null;}  }
class C{  private static String unicode2html(final String text,final boolean amp,final boolean html){  if (text == null)   return null;  final StringBuilder sb=new StringBuilder(text.length() * 12 / 10);  int textpos=0;  String r;  char c;  while (textpos < text.length()) {    c=text.charAt(textpos);    if (amp && c == AMP_UNICODE) {      sb.append(AMP_HTML);      textpos++;      continue;    }    if ((r=UNICODE2HTML4XML.get(c)) != null) {      sb.append(r);      textpos++;      continue;    }    if (html && (r=UNICODE2HTML4HTML.get(c)) != null) {      sb.append(r);      textpos++;      continue;    }    sb.append(c);    textpos++;  }  return sb.toString();}  }
class C{  public synchronized void makeVisible(int index){  visibleIndex=index;  ListPeer peer=(ListPeer)this.peer;  if (peer != null) {    peer.makeVisible(index);  }}  }
class C{  public Boolean isIsWorkingPath(){  return isWorkingPath;}  }
class C{  public String createShortUrl(String longUrl) throws Exception {  ArrayList<String> scopes=new ArrayList<String>();  scopes.add("https://www.googleapis.com/auth/urlshortener");  final AppIdentityService appIdentity=AppIdentityServiceFactory.getAppIdentityService();  final AppIdentityService.GetAccessTokenResult accessToken=appIdentity.getAccessToken(scopes);  JSONObject request=new JSONObject();  request.put("longUrl",longUrl);  URL url=new URL("https://www.googleapis.com/urlshortener/v1/url?pp=1");  HttpURLConnection connection=(HttpURLConnection)url.openConnection();  connection.setDoOutput(true);  connection.setRequestMethod("POST");  connection.addRequestProperty("Content-Type","application/json");  connection.addRequestProperty("Authorization","Bearer " + accessToken.getAccessToken());  OutputStreamWriter writer=new OutputStreamWriter(connection.getOutputStream());  request.write(writer);  writer.close();  if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {    JSONTokener responseTokens=new JSONTokener(connection.getInputStream());    JSONObject response=new JSONObject(responseTokens);    return (String)response.get("id");  } else {    try (InputStream s=connection.getErrorStream();InputStreamReader r=new InputStreamReader(s,StandardCharsets.UTF_8)){      throw new RuntimeException(String.format("got error (%d) response %s from %s",connection.getResponseCode(),CharStreams.toString(r),connection.toString()));    }   }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"sub");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a sub instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree operand1=operands.get(0);  final IOperandTree operand2=operands.get(1);  final TranslationResult operand2Result=Helpers.translateOperand(environment,offset,operand2,true);  instructions.addAll(operand2Result.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult operand1Result=Helpers.translateOperand(environment,offset,operand1,true);  instructions.addAll(operand1Result.getInstructions());  offset=baseOffset + instructions.size();  final OperandSize size=operand1Result.getSize();  final String register1=operand1Result.getRegister();  final String register2=operand2Result.getRegister();  final String subResultValue=Helpers.generateSub(environment,offset,size,register1,register2,instructions);  offset=baseOffset + instructions.size();  Helpers.writeParityFlag(environment,offset,size,subResultValue,instructions);  offset=baseOffset + instructions.size();  Helpers.writeBack(environment,offset,operand1,subResultValue,size,operand1Result.getAddress(),operand1Result.getType(),instructions);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.016 -0500",hash_original_method="6EA2A1EF33A119B08A2C10DE631D1BE2",hash_generated_method="6EA2A1EF33A119B08A2C10DE631D1BE2") void deleteOptionHandler(int optcode) throws InvalidTelnetOptionException {  if (TelnetOption.isValidOption(optcode)) {    if (optionHandlers[optcode] == null) {      throw (new InvalidTelnetOptionException("Unregistered option",optcode));    } else {      TelnetOptionHandler opthand=optionHandlers[optcode];      optionHandlers[optcode]=null;      if (opthand.getWill()) {        try {          _requestWont(optcode);        } catch (        IOException e) {          System.err.println("Exception while turning off option: " + e.getMessage());        }      }      if (opthand.getDo()) {        try {          _requestDont(optcode);        } catch (        IOException e) {          System.err.println("Exception while turning off option: " + e.getMessage());        }      }    }  } else {    throw (new InvalidTelnetOptionException("Invalid Option Code",optcode));  }}  }
class C{  public void init(DSAParameterGenerationParameters params){  this.use186_3=true;  this.L=params.getL();  this.N=params.getN();  this.certainty=params.getCertainty();  this.random=params.getRandom();  this.usageIndex=params.getUsageIndex();  if ((L < 1024 || L > 3072) || L % 1024 != 0) {    throw new IllegalArgumentException("L values must be between 1024 and 3072 and a multiple of 1024");  } else   if (L == 1024 && N != 160) {    throw new IllegalArgumentException("N must be 160 for L = 1024");  } else   if (L == 2048 && (N != 224 && N != 256)) {    throw new IllegalArgumentException("N must be 224 or 256 for L = 2048");  } else   if (L == 3072 && N != 256) {    throw new IllegalArgumentException("N must be 256 for L = 3072");  }  if (digest.getDigestSize() * 8 < N) {    throw new IllegalStateException("Digest output size too small for value of N");  }}  }
class C{  public final int intValue(){  return (int)doubleValue();}  }
class C{  public static String joinSizeInfoToKey(String key,int w,int h){  if (w > 0 && h != Integer.MAX_VALUE && h > 0 && h != Integer.MAX_VALUE) {    return new StringBuilder(key).append(SIZE_SP).append(w).append(SIZE_SP).append(h).toString();  }  return key;}  }
class C{  public String buildNonceCounter(){  String result=Integer.toHexString(mCnonceCounter);  while (result.length() != 8) {    result="0" + result;  }  return result;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  m_expr.fixupVariables(vars,globalsSize);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public StandaloneXmlParser addDelegate(QName elementName,XMLElementReader<List<ModelNode>> parser){  xmlMapper.registerRootElement(elementName,parser);  return this;}  }
class C{  @Override protected void onResume(){  super.onResume();  if (mPingReceiver != null) {    registerPingReceiver();    mPingReceiver.onReceive(this,PingReceiver.makePingIntent(this,mPingReceiver.getIteration() + 1,NOTIFICATION_ID));  }}  }
class C{  private void turnPatternsToLinks(){  int size=links.size();  int i=0;  while (i < size) {    if (links.get(i).getPattern() != null) {      addLinksFromPattern(links.get(i));      links.remove(i);      size--;    } else {      i++;    }  }}  }
class C{  String toString(int indentFactor,int indent) throws JSONException {  int j;  int n=length();  if (n == 0) {    return "{}";  }  Iterator keys=sortedKeys();  StringBuffer sb=new StringBuffer("{");  int newindent=indent + indentFactor;  Object o;  if (n == 1) {    o=keys.next();    sb.append(quote(o.toString()));    sb.append(": ");    sb.append(valueToString(this.get(o),indentFactor,indent));  } else {    while (keys.hasNext()) {      o=keys.next();      if (sb.length() > 1) {        sb.append(",\n");      } else {        sb.append('\n');      }      for (j=0; j < newindent; j+=1) {        sb.append(' ');      }      sb.append(quote(o.toString()));      sb.append(": ");      sb.append(valueToString(this.get(o),indentFactor,newindent));    }    if (sb.length() > 1) {      sb.append('\n');      for (j=0; j < indent; j+=1) {        sb.append(' ');      }    }  }  sb.append('}');  return sb.toString();}  }
class C{  protected void entregarConsultaCodeLogic(String idConsulta,ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  AppUser userVO=getAppUser(request);  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(userVO));  GestionConsultasBI consultasService=services.lookupGestionConsultasBI();  ActionErrors errores=null;  try {    consultasService.entregarConsulta(idConsulta);  } catch (  ConsultaActionNotAllowedException canae) {    errores=ExceptionMapper.getErrorsExcepcion(request,canae);  }  if (errores != null) {    ErrorsTag.saveErrors(request,errores);  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMMultiImageElement(prefix,(AbstractDocument)doc);}  }
class C{  private PostgreSQLViewFunctions(){}  }
class C{  public int size(){  return count;}  }
class C{  private static void checkArguments(final BackEndDebuggerProvider debuggerProvider,final int[] rows){  checkArguments(debuggerProvider);  Preconditions.checkNotNull(rows,"IE02250: Rows argument can't be null");}  }
class C{  public double exactArea(){  S2Point v0=getVertex(0);  S2Point v1=getVertex(1);  S2Point v2=getVertex(2);  S2Point v3=getVertex(3);  return S2.area(v0,v1,v2) + S2.area(v0,v2,v3);}  }
class C{  private void convertInstance(Instance instance){  Instance inst=null;  if (instance instanceof SparseInstance) {    double[] vals=new double[instance.numValues()];    int[] indices=new int[instance.numValues()];    int num=0;    for (int j=0; j < instance.numValues(); j++) {      if (instance.isMissingSparse(j) && (getInputFormat().classIndex() != instance.index(j)) && (instance.attributeSparse(j).isNominal() || instance.attributeSparse(j).isNumeric())) {        if (m_ModesAndMeans[instance.index(j)] != 0.0) {          vals[num]=m_ModesAndMeans[instance.index(j)];          indices[num]=instance.index(j);          num++;        }      } else {        vals[num]=instance.valueSparse(j);        indices[num]=instance.index(j);        num++;      }    }    if (num == instance.numValues()) {      inst=new SparseInstance(instance.weight(),vals,indices,instance.numAttributes());    } else {      double[] tempVals=new double[num];      int[] tempInd=new int[num];      System.arraycopy(vals,0,tempVals,0,num);      System.arraycopy(indices,0,tempInd,0,num);      inst=new SparseInstance(instance.weight(),tempVals,tempInd,instance.numAttributes());    }  } else {    double[] vals=new double[getInputFormat().numAttributes()];    for (int j=0; j < instance.numAttributes(); j++) {      if (instance.isMissing(j) && (getInputFormat().classIndex() != j) && (getInputFormat().attribute(j).isNominal() || getInputFormat().attribute(j).isNumeric())) {        vals[j]=m_ModesAndMeans[j];      } else {        vals[j]=instance.value(j);      }    }    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(instance.dataset());  push(inst);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case FunctionblockPackage.RETURN_PRIMITIVE_TYPE__RETURN_TYPE:    setReturnType((PrimitiveType)newValue);  return;case FunctionblockPackage.RETURN_PRIMITIVE_TYPE__CONSTRAINT_RULE:setConstraintRule((ConstraintRule)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static Duration convert(long dur){  if (dur == DUR_UNCHANGED)   return null; else   if (dur == DUR_ETERNAL)   return Duration.ETERNAL; else   if (dur == DUR_ZERO)   return Duration.ZERO; else {    assert dur > 0;    return new Duration(TimeUnit.MILLISECONDS,dur);  }}  }
class C{  public FlacDecoder(int numInputBuffers,int numOutputBuffers,List<byte[]> initializationData) throws FlacDecoderException {  super(new InputBuffer[numInputBuffers],new FlacOutputBuffer[numOutputBuffers]);  if (initializationData.size() != 1) {    throw new FlacDecoderException("Wrong number of initialization data");  }  decoder=new FlacJni();  ByteBuffer metadata=ByteBuffer.wrap(initializationData.get(0));  decoder.setData(metadata);  FlacStreamInfo streamInfo=decoder.decodeMetadata();  if (streamInfo == null) {    throw new FlacDecoderException("Metadata decoding failed");  }  setInitialInputBufferSize(streamInfo.maxFrameSize);  maxOutputBufferSize=streamInfo.maxDecodedFrameSize();}  }
class C{  private void resetNetwork(){  for (int noc=0; noc < m_numClasses; noc++) {    m_outputs[noc].reset();  }}  }
class C{  public static boolean isEmpty(int[] array){  return array == null || array.length == 0;}  }
class C{  public CandleSeries(String legend,Contract contract,int barSize,ZonedDateTime startTime,ZonedDateTime endTime){  super(legend,IndicatorSeries.CandleSeries,true,0,false);  this.contract=contract;  this.symbol=contract.getSymbol();  this.barSize=barSize;  this.startTime=startTime;  this.endTime=endTime;}  }
class C{  public Period(ReadableInstant startInstant,ReadableInstant endInstant,PeriodType type){  super(startInstant,endInstant,type);}  }
class C{  @Override public boolean hasActiveECM(){  if (!game.getOptions().booleanOption("stratops_ecm") || !game.getBoard().inSpace()) {    return super.hasActiveECM();  }  return getECMRange() >= 0;}  }
class C{  void validate() throws QueryRulesetException {  if (!(statement.getSubjectVar().isConstant() || statement.getPredicateVar().isConstant() || statement.getObjectVar().isConstant())) {    throw new QueryRulesetException("Statement pattern with no constants would match every statement:\n" + statement.toString());  }}  }
class C{  public Range findZBounds(XYZDataset dataset){  if (dataset != null) {    return DatasetUtilities.findZBounds(dataset);  } else {    return null;  }}  }
class C{  protected DomainRestoreInfo inference(Variable var,Assignment assignment,CSP csp){  return new DomainRestoreInfo().compactify();}  }
class C{  public void testGetUnsignedInt16(){  byte[] bytes={8,0,0,1,-1,-1,-127,-1,0,-128,-1,127};  MySQLPacket array=new MySQLPacket(bytes.length - MySQLPacket.HEADER_LENGTH,bytes,(byte)1);  assertEquals(65535,array.getUnsignedShort());  assertEquals(65409,array.getUnsignedShort());  assertEquals(32768,array.getUnsignedShort());  assertEquals(32767,array.getUnsignedShort());}  }
class C{  public static boolean writeXMPMeta(InputStream inputStream,OutputStream outputStream,XMPMeta meta){  List<Section> sections=parse(inputStream,false);  sections=insertXMPSection(sections,meta);  if (sections == null) {    return false;  }  try {    writeJpegFile(outputStream,sections);  } catch (  IOException e) {    Log.d(TAG,"Write to stream failed",e);    return false;  } finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      IOException e) {      }    }  }  return true;}  }
class C{  public void addService(PluginEntry entry){  this.entryMap.put(entry.service,entry);  List<String> urlFilters=entry.getUrlFilters();  if (urlFilters != null) {    urlMap.put(entry.service,urlFilters);  }  if (entry.plugin != null) {    entry.plugin.privateInitialize(ctx,app,app.getPreferences());    pluginMap.put(entry.service,entry.plugin);  }}  }
class C{  public static CodedInputByteBufferNano newInstance(final byte[] buf){  return newInstance(buf,0,buf.length);}  }
class C{  private List<String[]> readSentence(JCas aJCas,BufferedReader aReader) throws IOException {  List<String[]> words=new ArrayList<String[]>();  String line;  while ((line=aReader.readLine()) != null) {    if (StringUtils.isBlank(line)) {      break;    }    if (line.startsWith("#")) {      if (line.startsWith("#begin") && useHeaderMetadata) {        Pattern pattern=Pattern.compile("^#begin document \\((.*)\\); part (\\d+)$");        Matcher matcher=pattern.matcher(line);        if (matcher.matches()) {          DocumentMetaData meta=DocumentMetaData.get(aJCas);          meta.setDocumentId(matcher.group(1) + '#' + matcher.group(2));        }      }      continue;    }    if (line.startsWith("<")) {      break;    }    String[] fields=line.split("\\s+");    words.add(fields);  }  if (line == null && words.isEmpty()) {    return null;  } else {    return words;  }}  }
class C{  public void addFooterView(View view){  mFooterViews.add(view);  notifyDataSetChanged();}  }
class C{  @SuppressWarnings("unchecked") private void updateMetaData() throws SQLException {  if (conn.isClosed())   throw new SQLException("Connection is closed.");  try {    Ignite ignite=conn.ignite();    UUID nodeId=conn.nodeId();    Collection<GridCacheSqlMetadata> metas;    UpdateMetadataTask task=new UpdateMetadataTask(conn.cacheName(),nodeId == null ? ignite : null);    metas=nodeId == null ? task.call() : ignite.compute(ignite.cluster().forNodeId(nodeId)).call(task);    meta=U.newHashMap(metas.size());    indexes=new ArrayList<>();    for (    GridCacheSqlMetadata m : metas) {      String name=m.cacheName();      if (name == null)       name="PUBLIC";      Collection<String> types=m.types();      Map<String,Map<String,String>> typesMap=U.newHashMap(types.size());      for (      String type : types) {        typesMap.put(type.toUpperCase(),m.fields(type));        for (        GridCacheSqlIndexMetadata idx : m.indexes(type)) {          int cnt=0;          for (          String field : idx.fields()) {            indexes.add(F.<Object>asList(name,type.toUpperCase(),!idx.unique(),idx.name().toUpperCase(),++cnt,field,idx.descending(field)));          }        }      }      meta.put(name,typesMap);    }  } catch (  Exception e) {    throw new SQLException("Failed to get meta data from Ignite.",e);  }}  }
class C{  private List initialMeasurementPattern(int ng[][],int cv[][]){  boolean notYellow[][]=new boolean[numVariables()][numVariables()];  for (int v1=0; v1 < numVariables() - 1; v1++) {    for (int v2=v1 + 1; v2 < numVariables(); v2++) {      ng[v1][v2]=ng[v2][v1]=EDGE_BLACK;    }  }  for (int v1=0; v1 < numVariables() - 1; v1++) {    for (int v2=v1 + 1; v2 < numVariables(); v2++) {      if (uncorrelated(v1,v2)) {        cv[v1][v2]=cv[v2][v1]=EDGE_NONE;      } else {        cv[v1][v2]=cv[v2][v1]=EDGE_BLACK;      }      ng[v1][v2]=ng[v2][v1]=cv[v1][v2];    }  }  for (int v1=0; v1 < numVariables() - 1; v1++) {    for (int v2=v1 + 1; v2 < numVariables(); v2++) {      if (cv[v1][v2] == EDGE_NONE) {        continue;      }      for (int v3=0; v3 < numVariables(); v3++) {        if (v1 == v3 || v2 == v3) {          continue;        }        if (vanishingPartialCorr(v1,v2,v3)) {          cv[v1][v2]=cv[v2][v1]=EDGE_NONE;          break;        }      }    }  }  for (int i=0; i < numVariables(); i++) {    for (int j=i + 1; j < numVariables(); j++) {      if (cv[i][j] == EDGE_NONE) {      }    }  }  for (int v1=0; v1 < numVariables() - 1; v1++) {    for (int v2=v1 + 1; v2 < numVariables(); v2++) {      if (ng[v1][v2] != EDGE_BLACK) {        continue;      }      boolean notFound=true;      for (int v3=0; v3 < numVariables() - 1 && notFound; v3++) {        if (v1 == v3 || v2 == v3 || ng[v1][v3] == EDGE_NONE || ng[v1][v3] == EDGE_GRAY || ng[v2][v3] == EDGE_NONE || ng[v2][v3] == EDGE_GRAY) {          continue;        }        for (int v4=v3 + 1; v4 < numVariables() && notFound; v4++) {          if (v1 == v4 || v2 == v4 || ng[v1][v4] == EDGE_NONE || ng[v1][v4] == EDGE_GRAY || ng[v2][v4] == EDGE_NONE || ng[v2][v4] == EDGE_GRAY || ng[v3][v4] == EDGE_NONE || ng[v3][v4] == EDGE_GRAY) {            continue;          }          if (tetradTest.tetradScore3(v1,v2,v3,v4)) {            notFound=false;            ng[v1][v2]=ng[v2][v1]=EDGE_BLUE;            ng[v1][v3]=ng[v3][v1]=EDGE_BLUE;            ng[v1][v4]=ng[v4][v1]=EDGE_BLUE;            ng[v2][v3]=ng[v3][v2]=EDGE_BLUE;            ng[v2][v4]=ng[v4][v2]=EDGE_BLUE;            ng[v3][v4]=ng[v4][v3]=EDGE_BLUE;          }        }      }      if (notFound) {        ng[v1][v2]=ng[v2][v1]=EDGE_GRAY;      }    }  }  for (int i=0; i < numVariables() - 1; i++) {    for (int j=i + 1; j < numVariables(); j++) {      notYellow[i][j]=notYellow[j][i]=false;    }  }  for (int v1=0; v1 < numVariables() - 1; v1++) {    for (int v2=v1 + 1; v2 < numVariables(); v2++) {      if (ng[v1][v2] != EDGE_BLUE) {        continue;      }      boolean notFound=true;      for (int v3=0; v3 < numVariables() - 1 && notFound; v3++) {        if (v1 == v3 || v2 == v3 || ng[v1][v3] == EDGE_GRAY || ng[v2][v3] == EDGE_GRAY || cv[v1][v3] != EDGE_BLACK || cv[v2][v3] != EDGE_BLACK) {          continue;        }        for (int v5=v3 + 1; v5 < numVariables() && notFound; v5++) {          if (v1 == v5 || v2 == v5 || ng[v1][v5] == EDGE_GRAY || ng[v2][v5] == EDGE_GRAY || ng[v3][v5] == EDGE_GRAY || cv[v1][v5] != EDGE_BLACK || cv[v2][v5] != EDGE_BLACK || cv[v3][v5] != EDGE_BLACK || !unclusteredPartial1(v1,v3,v5,v2)) {            continue;          }          for (int v4=0; v4 < numVariables() - 1 && notFound; v4++) {            if (v1 == v4 || v2 == v4 || v3 == v4 || v5 == v4 || ng[v1][v4] == EDGE_GRAY || ng[v2][v4] == EDGE_GRAY || ng[v3][v4] == EDGE_GRAY || ng[v5][v4] == EDGE_GRAY || cv[v1][v4] != EDGE_BLACK || cv[v2][v4] != EDGE_BLACK || cv[v3][v4] != EDGE_BLACK || cv[v5][v4] != EDGE_BLACK || !unclusteredPartial2(v1,v3,v5,v2,v4)) {              continue;            }            for (int v6=v4 + 1; v6 < numVariables() && notFound; v6++) {              if (v1 == v6 || v2 == v6 || v3 == v6 || v5 == v6 || ng[v1][v6] == EDGE_GRAY || ng[v2][v6] == EDGE_GRAY || ng[v3][v6] == EDGE_GRAY || ng[v4][v6] == EDGE_GRAY || ng[v5][v6] == EDGE_GRAY || cv[v1][v6] != EDGE_BLACK || cv[v2][v6] != EDGE_BLACK || cv[v3][v6] != EDGE_BLACK || cv[v4][v6] != EDGE_BLACK || cv[v5][v6] != EDGE_BLACK) {                continue;              }              if (unclusteredPartial3(v1,v3,v5,v2,v4,v6)) {                notFound=false;                ng[v1][v2]=ng[v2][v1]=EDGE_NONE;                ng[v1][v4]=ng[v4][v1]=EDGE_NONE;                ng[v1][v6]=ng[v6][v1]=EDGE_NONE;                ng[v3][v2]=ng[v2][v3]=EDGE_NONE;                ng[v3][v4]=ng[v4][v3]=EDGE_NONE;                ng[v3][v6]=ng[v6][v3]=EDGE_NONE;                ng[v5][v2]=ng[v2][v5]=EDGE_NONE;                ng[v5][v4]=ng[v4][v5]=EDGE_NONE;                ng[v5][v6]=ng[v6][v5]=EDGE_NONE;                notYellow[v1][v3]=notYellow[v3][v1]=true;                notYellow[v1][v5]=notYellow[v5][v1]=true;                notYellow[v3][v5]=notYellow[v5][v3]=true;                notYellow[v2][v4]=notYellow[v4][v2]=true;                notYellow[v2][v6]=notYellow[v6][v2]=true;                notYellow[v4][v6]=notYellow[v6][v4]=true;              }            }          }        }      }      if (notYellow[v1][v2]) {        if (notFound) {        }        notFound=false;      }      if (notFound) {        for (int v3=0; v3 < numVariables() && notFound; v3++) {          if (v1 == v3 || v2 == v3 || ng[v1][v3] == EDGE_GRAY || ng[v2][v3] == EDGE_GRAY || cv[v1][v3] != EDGE_BLACK || cv[v2][v3] != EDGE_BLACK) {            continue;          }          for (int v4=0; v4 < numVariables() - 2 && notFound; v4++) {            if (v1 == v4 || v2 == v4 || v3 == v4 || ng[v1][v4] == EDGE_GRAY || ng[v2][v4] == EDGE_GRAY || ng[v3][v4] == EDGE_GRAY || cv[v1][v4] != EDGE_BLACK || cv[v2][v4] != EDGE_BLACK || cv[v3][v4] != EDGE_BLACK || !unclusteredPartial1(v1,v2,v3,v4)) {              continue;            }            for (int v5=v4 + 1; v5 < numVariables() - 1 && notFound; v5++) {              if (v1 == v5 || v2 == v5 || v3 == v5 || ng[v1][v5] == EDGE_GRAY || ng[v2][v5] == EDGE_GRAY || ng[v3][v5] == EDGE_GRAY || ng[v4][v5] == EDGE_GRAY || cv[v1][v5] != EDGE_BLACK || cv[v2][v5] != EDGE_BLACK || cv[v3][v5] != EDGE_BLACK || cv[v4][v5] != EDGE_BLACK || !unclusteredPartial2(v1,v2,v3,v4,v5)) {                continue;              }              for (int v6=v5 + 1; v6 < numVariables() && notFound; v6++) {                if (v1 == v6 || v2 == v6 || v3 == v6 || ng[v1][v6] == EDGE_GRAY || ng[v2][v6] == EDGE_GRAY || ng[v3][v6] == EDGE_GRAY || ng[v4][v6] == EDGE_GRAY || ng[v5][v6] == EDGE_GRAY || cv[v1][v6] != EDGE_BLACK || cv[v2][v6] != EDGE_BLACK || cv[v3][v6] != EDGE_BLACK || cv[v4][v6] != EDGE_BLACK || cv[v5][v6] != EDGE_BLACK) {                  continue;                }                if (unclusteredPartial3(v1,v2,v3,v4,v5,v6)) {                  notFound=false;                  ng[v1][v4]=ng[v4][v1]=EDGE_NONE;                  ng[v1][v5]=ng[v5][v1]=EDGE_NONE;                  ng[v1][v6]=ng[v6][v1]=EDGE_NONE;                  ng[v2][v4]=ng[v4][v2]=EDGE_NONE;                  ng[v2][v5]=ng[v5][v2]=EDGE_NONE;                  ng[v2][v6]=ng[v6][v2]=EDGE_NONE;                  ng[v3][v4]=ng[v4][v3]=EDGE_NONE;                  ng[v3][v5]=ng[v5][v3]=EDGE_NONE;                  ng[v3][v6]=ng[v6][v3]=EDGE_NONE;                  notYellow[v1][v2]=notYellow[v2][v1]=true;                  notYellow[v1][v3]=notYellow[v3][v1]=true;                  notYellow[v2][v3]=notYellow[v3][v2]=true;                  notYellow[v4][v5]=notYellow[v5][v4]=true;                  notYellow[v4][v6]=notYellow[v6][v4]=true;                  notYellow[v5][v6]=notYellow[v6][v5]=true;                }              }            }          }        }      }      if (notFound) {        ng[v1][v2]=ng[v2][v1]=EDGE_YELLOW;      }    }  }  List clustering=new ArrayList();  List<int[]> components=findComponents(ng,numVariables(),EDGE_BLUE);  Iterator<int[]> it=components.iterator();  while (it.hasNext()) {    int component[]=it.next();    printClusterIds(component);    List<int[]> nextClustering=findMaximalCliques(component,ng);    clustering.addAll(trimCliqueList(nextClustering));  }  for (int i=0; i < clustering.size() - 1; i++) {    int max=0;    int max_idx=-1;    for (int j=i; j < clustering.size(); j++) {      if (((int[])clustering.get(j)).length > max) {        max=((int[])clustering.get(j)).length;        max_idx=j;      }    }    Object temp;    temp=clustering.get(i);    clustering.set(i,clustering.get(max_idx));    clustering.set(max_idx,temp);  }  List<int[]> individualOneFactors=individualPurification(clustering);  printClustering(individualOneFactors);  clustering=individualOneFactors;  List<List<Integer>> ids=new ArrayList<>();  List clusterings=chooseClusterings(clustering,ng,ids,true,cv);  List orderedIds=new ArrayList();  List actualClustering=filterAndOrderClusterings(clusterings,ids,orderedIds,ng);  return purify(actualClustering,orderedIds,null);}  }
class C{  LogFile rotate(LogFile dataFile,long seqno) throws IOException, ReplicatorException, InterruptedException {  fileIndex=(fileIndex + 1) % Integer.MAX_VALUE;  try {    LogEventRotateWriter writer=new LogEventRotateWriter(dataFile.getFile(),fileIndex,doChecksum);    LogRecord logRec=writer.write();    dataFile.writeRecord(logRec,0);  } catch (  IOException e) {    throw new THLException("Error writing rotate log event to log file: name=" + dataFile.getFile().getName(),e);  }  return startNewLogFile(seqno);}  }
class C{  public boolean isAckSeen(){  return this.ackSeen;}  }
class C{  public static void onRestoreState(Bundle bundle,Activity activity){  if (bundle == null) {    return;  }  Parcelable[] savedArray=bundle.getParcelableArray(BUNDLE_TAG);  int i=0;  if (savedArray != null) {    for (    Parcelable parcelable : savedArray) {      i++;      new SuperCardToast(activity,(ReferenceHolder)parcelable,null,i);    }  }}  }
class C{  boolean wantsFutureVariantBases(){  if (mNextVariant == null) {    return true;  }  if (mPositionInVariant != INVALID && mPositionInVariant < mNextVariant.allele().nt().length - 1) {    return false;  }  for (  OrientedVariant v : mVariants) {    if (v.allele().nt().length > 0) {      return false;    }  }  return true;}  }
class C{  @Override public void handle(ReadyEvent event){  try {    this.client.changeUsername("Awesome Bot");    this.client.changeAvatar(Image.forFile(new File("picture.png")));    this.client.changePresence(true);    this.client.changeStatus(Status.game("Awesome Game"));  } catch (  RateLimitException|DiscordException e) {    e.printStackTrace();  }}  }
class C{  public void writeMessageBegin(TMessage message) throws TException {  writeByteDirect(PROTOCOL_ID);  writeByteDirect((VERSION & VERSION_MASK) | ((message.type << TYPE_SHIFT_AMOUNT) & TYPE_MASK));  writeVarint32(message.seqid);  writeString(message.name);}  }
class C{  public static File findConfigInWorkingDirectory(){  for (  final String suffix : SUFFIXES) {    final File configFile=new File(System.getProperty("user.dir"),PREFIX + suffix);    if (configFile.isFile()) {      return configFile;    }  }  return null;}  }
class C{  public void putCharSequence(String key,CharSequence value){  unparcel();  mMap.put(key,value);}  }
class C{  public static String toHexString(byte[] b){  if (null == b)   return null;  int len=b.length;  byte[] hex=new byte[len << 1];  for (int i=0, j=0; i < len; i++, j+=2) {    hex[j]=(byte)((b[i] & 0xF0) >> 4);    hex[j]+=10 > hex[j] ? 48 : 87;    hex[j + 1]=(byte)(b[i] & 0x0F);    hex[j + 1]+=10 > hex[j + 1] ? 48 : 87;  }  return new String(hex);}  }
class C{  public void showFlogiDatabase() throws NetworkDeviceControllerException {  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};  StringBuilder buf=new StringBuilder();  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString("MDSDialog.showFlogiDatabase.cmd"),60000,prompts,buf);  String[] lines=getLines(buf);  boolean sawHdr=false;  String[] regex={MDSDialogProperties.getString("MDSDialog.showFlogiDatabase.INTERFACEVSANFCID.match"),MDSDialogProperties.getString("MDSDialog.showFlogiDatabase.interfacename.match"),MDSDialogProperties.getString("MDSDialog.showFlogiDatabase.Totalflogi.match")};  String[] groups=new String[10];  for (  String line : lines) {    int index=match(line,regex,groups);switch (index) {case 0:      sawHdr=true;    break;case 1:  _log.info(groups[0] + " " + groups[1]+ " "+ groups[2]+ " "+ groups[3]+ " "+ groups[4]);break;case 2:sawHdr=false;break;}}}  }
class C{  public AList(){  items=new int[100];  size=0;}  }
class C{  static URI toURI(String name){  try {    return new URI(name);  } catch (  URISyntaxException e) {    throw new RuntimeException(e);  }}  }
class C{  public PropertyFileLoader(){}  }
class C{  public static String determineInitialCheckOutPage(ShoppingCart cart){  String page=DEFAULT_INIT_CHECKOUT_PAGE;  if (cart == null)   return page;  if (!cart.shippingApplies()) {    cart.setAllShipmentMethodTypeId("NO_SHIPPING");    cart.setAllCarrierPartyId("_NA_");    page="payment";  }  return page;}  }
class C{  public static boolean hasNavigableWebContent(Context context,AccessibilityNodeInfoCompat node){  return (supportsWebActions(node) && isScriptInjectionEnabled(context)) || hasNativeWebContent(node);}  }
class C{  public static boolean isProcessInteractionHappening(final ProcessRendererModel rendererModel){  if (rendererModel == null) {    throw new IllegalArgumentException("rendererModel must not be null!");  }  return !(rendererModel.getHoveringOperator() == null && rendererModel.getHoveringPort() == null && rendererModel.getHoveringConnectionSource() == null && !rendererModel.isDragStarted() && rendererModel.getConnectingPortSource() == null);}  }
class C{  public void actionPerformed(ActionEvent ae){  if (ae.getActionCommand().equals("Go")) {    animator.stop();    animator.start();  } else   if (ae.getActionCommand().equals("Stop")) {    animator.stop();  }}  }
class C{  public boolean isSealed(URL url){  return sealBase != null && sealBase.sameFile(url);}  }
class C{  public JSONWriter endObject() throws JSONException {  return this.end('k','}');}  }
class C{  public static Timestamp toTimestamp(String data){  return Timestamp.valueOf(LocalDateTime.parse(data,formatter("yyyy-MM-dd HH:mm.ss")));}  }
class C{  protected void assertException(final AbstractExceptionCase exceptionCase) throws Throwable {  assertException(exceptionCase,null);}  }
class C{  public void marcarCajasExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String[] ids=request.getParameterValues("revisada");  if (!ArrayUtils.isEmpty(ids)) {    RelacionEntregaVO relacionEntrega=(RelacionEntregaVO)getFromTemporalSession(request,TransferenciasConstants.RELACION_KEY);    getGestionRelacionesBI(request).updateEstadoUnidadesInstalacion(ids,EstadoCotejo.REVISADA.getIdentificador(),relacionEntrega);  }  goLastClientExecuteLogic(mappings,form,request,response);}  }
class C{  public BlockChain(NetworkParameters params,List<BlockChainListener> wallets,BlockStore blockStore) throws BlockStoreException {  super(params,wallets,blockStore);  this.blockStore=blockStore;}  }
class C{  public NestedMixedx2(NestedMixedx2 other){  if (other.isSetInt_set_list()) {    List<Set<Integer>> __this__int_set_list=new ArrayList<Set<Integer>>(other.int_set_list.size());    for (    Set<Integer> other_element : other.int_set_list) {      Set<Integer> __this__int_set_list_copy=new HashSet<Integer>(other_element);      __this__int_set_list.add(__this__int_set_list_copy);    }    this.int_set_list=__this__int_set_list;  }  if (other.isSetMap_int_strset()) {    Map<Integer,Set<String>> __this__map_int_strset=new HashMap<Integer,Set<String>>(other.map_int_strset.size());    for (    Map.Entry<Integer,Set<String>> other_element : other.map_int_strset.entrySet()) {      Integer other_element_key=other_element.getKey();      Set<String> other_element_value=other_element.getValue();      Integer __this__map_int_strset_copy_key=other_element_key;      Set<String> __this__map_int_strset_copy_value=new HashSet<String>(other_element_value);      __this__map_int_strset.put(__this__map_int_strset_copy_key,__this__map_int_strset_copy_value);    }    this.map_int_strset=__this__map_int_strset;  }  if (other.isSetMap_int_strset_list()) {    List<Map<Integer,Set<String>>> __this__map_int_strset_list=new ArrayList<Map<Integer,Set<String>>>(other.map_int_strset_list.size());    for (    Map<Integer,Set<String>> other_element : other.map_int_strset_list) {      Map<Integer,Set<String>> __this__map_int_strset_list_copy=new HashMap<Integer,Set<String>>(other_element.size());      for (      Map.Entry<Integer,Set<String>> other_element_element : other_element.entrySet()) {        Integer other_element_element_key=other_element_element.getKey();        Set<String> other_element_element_value=other_element_element.getValue();        Integer __this__map_int_strset_list_copy_copy_key=other_element_element_key;        Set<String> __this__map_int_strset_list_copy_copy_value=new HashSet<String>(other_element_element_value);        __this__map_int_strset_list_copy.put(__this__map_int_strset_list_copy_copy_key,__this__map_int_strset_list_copy_copy_value);      }      __this__map_int_strset_list.add(__this__map_int_strset_list_copy);    }    this.map_int_strset_list=__this__map_int_strset_list;  }}  }
class C{  public DoubleGenerator(double max,double length){  this.length=length;  this.max=max;  if (length > max) {    throw new IllegalArgumentException("Unable to consistently generate line segments of length " + length + " within square box of dimension "+ max);  }}  }
class C{  public int size(){  return size;}  }
class C{  private static boolean isZip(String name){  return new File(name).isFile();}  }
class C{  @Override protected void translateCore(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions){  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);  final String sourceRegister=registerOperand2.getValue();  final String destinationRegister=registerOperand1.getValue();  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  final OperandSize dw=OperandSize.DWORD;  final String temporaryRegister=Helpers.reverseUnsignedInteger(environment,baseOffset,sourceRegister,instructions);  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,temporaryRegister,dw,String.valueOf(0xFFFFFFFFL),dw,destinationRegister));}  }
class C{  public static JMSQueueConfiguration parseQueueConfiguration(final Node node) throws Exception {  Element e=(Element)node;  NamedNodeMap atts=node.getAttributes();  String queueName=atts.getNamedItem(NAME_ATTR).getNodeValue();  String selectorString=null;  boolean durable=XMLConfigurationUtil.getBoolean(e,"durable",DEFAULT_QUEUE_DURABILITY);  NodeList children=node.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node child=children.item(i);    if (QUEUE_SELECTOR_NODE_NAME.equals(children.item(i).getNodeName())) {      Node selectorNode=children.item(i);      Node attNode=selectorNode.getAttributes().getNamedItem("string");      selectorString=attNode.getNodeValue();    }  }  return newQueue(queueName,selectorString,durable);}  }
class C{  private void initialCheck(List<? extends ExpressionTree> theargs,ExecutableElement method,MethodInvocationNode node,AnnotatedExecutableType methodAnno){  int paramIndex=-1;  Receiver paramArg=null;  int i=0;  for (  AnnotatedTypeMirror paramType : methodAnno.getParameterTypes()) {    if (paramType.getAnnotation(I18nFormatFor.class) != null) {      this.formatArg=theargs.get(i);      this.formatAnno=atypeFactory.getAnnotatedType(formatArg);      if (!typeMirrorToClass(paramType.getUnderlyingType()).equals(String.class)) {        return;      }      FlowExpressionContext flowExprContext=FlowExpressionContext.buildContextForMethodUse(node,checker.getContext());      String formatforArg=AnnotationUtils.getElementValue(paramType.getAnnotation(I18nFormatFor.class),"value",String.class,false);      if (flowExprContext != null) {        try {          paramArg=FlowExpressionParseUtil.parse(formatforArg,flowExprContext,atypeFactory.getPath(tree),true);          paramIndex=flowExprContext.arguments.indexOf(paramArg);        } catch (        FlowExpressionParseException e) {          checker.report(org.checkerframework.framework.source.Result.failure("i18nformat.invalid.formatfor"),tree);        }      }      break;    }    i++;  }  if (paramIndex != -1) {    VariableElement param=method.getParameters().get(paramIndex);    if (param.asType().getKind().equals(TypeKind.ARRAY)) {      this.args=theargs.subList(paramIndex,theargs.size());    } else {      this.args=theargs.subList(paramIndex,paramIndex + 1);    }  }}  }
class C{  public void unbind(String lookupName) throws NamingException {  try {    getInitialContext().unbind(lookupName);  } catch (  NameNotFoundException e) {  }}  }
class C{  public CsvInteractionReader(String inputFilename){  this.inputFilename=inputFilename;}  }
class C{  public void notifyClock(long now){  if (m_state == PseudoTcpState.TCP_CLOSED) {    return;  }  if (m_rto_base > 0 && (timeDiff(m_rto_base + m_rx_rto,now) <= 0)) {    assert !m_slist.isEmpty();    if (logger.isLoggable(Level.FINER)) {      logger.log(Level.FINER,"timeout retransmit (rto: " + m_rx_rto + ")(rto_base: "+ m_rto_base+ ") (now: "+ now+ ") (dup_acks: "+ m_dup_acks+ ")");    }    if (!transmit(m_slist.get(0),now)) {      closedown(new IOException("Connection aborted"));      return;    }    long nInFlight=m_snd_nxt - m_snd_una;    m_ssthresh=Math.max(nInFlight / 2,2 * m_mss);    m_cwnd=m_mss;    long rto_limit=(m_state.ordinal() < PseudoTcpState.TCP_ESTABLISHED.ordinal()) ? DEF_RTO : MAX_RTO;    m_rx_rto=Math.min(rto_limit,m_rx_rto * 2);    m_rto_base=now;  }  if ((getM_snd_wnd() == 0) && (timeDiff(m_lastsend + m_rx_rto,now) <= 0)) {    if (timeDiff(now,m_lastrecv) >= 15000) {      closedown(new IOException("Connection aborted"));      return;    }    packet(m_snd_nxt - 1,(short)0,0,0);    m_lastsend=now;    m_rx_rto=Math.min(MAX_RTO,m_rx_rto * 2);  }  long timeDiff=timeDiff(m_t_ack + m_ack_delay,now);  if (m_t_ack > 0 && (timeDiff <= 0)) {    packet(m_snd_nxt,(short)0,0,0);  }  if (PSEUDO_KEEPALIVE) {    if ((m_state == PseudoTcpState.TCP_ESTABLISHED) && (timeDiff(m_lastrecv + IDLE_TIMEOUT,now) <= 0)) {      closedown(new IOException("Connection aborted"));      return;    }    if ((m_state == PseudoTcpState.TCP_ESTABLISHED) && (timeDiff(m_lasttraffic + (m_bOutgoing ? IDLE_PING * 3 / 2 : IDLE_PING),now) <= 0)) {      packet(m_snd_nxt,(short)0,0,0);    }  }}  }
class C{  public TestHttpServer(HttpCallback cb) throws IOException {  this(cb,1,10,0);}  }
class C{  public synchronized void checkAccess(LicenseCheckerCallback callback){  if (mPolicy.allowAccess()) {    Log.i(TAG,"Using cached license response");    callback.allow(Policy.LICENSED);  } else {    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);    if (mService == null) {      Log.i(TAG,"Binding to licensing service.");      try {        boolean bindResult=mContext.bindService(new Intent("com.android.vending.licensing.ILicensingService"),this,Context.BIND_AUTO_CREATE);        if (bindResult) {          mPendingChecks.offer(validator);        } else {          Log.e(TAG,"Could not bind to service.");          handleServiceConnectionError(validator);        }      } catch (      Exception e) {        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);      }    } else {      mPendingChecks.offer(validator);      runChecks();    }  }}  }
class C{  @Override public IntComparator rowComparator(){  return comparator;}  }
class C{  public static void addMemoryPlentifulTask(Runnable run){  MemUtil.addMemoryPlentifulTask(run);}  }
class C{  JavaFileObject printSource(Env<AttrContext> env,JCClassDecl cdef) throws IOException {  JavaFileObject outFile=fileManager.getJavaFileForOutput(CLASS_OUTPUT,cdef.sym.flatname.toString(),JavaFileObject.Kind.SOURCE,null);  if (inputFiles.contains(outFile)) {    log.error(cdef.pos(),"source.cant.overwrite.input.file",outFile);    return null;  } else {    BufferedWriter out=new BufferedWriter(outFile.openWriter());    try {      new Pretty(out,true).printUnit(env.toplevel,cdef);      if (verbose)       log.printVerbose("wrote.file",outFile);    }  finally {      out.close();    }    return outFile;  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.SEQUENCE__STEPS:    return ((InternalEList<?>)getSteps()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void removeAllX509Certificates(){  x509Certificates.clear();}  }
class C{  public int lastIndexOf(int c,int start){  if (start >= 0) {    if (start >= count) {      start=count - 1;    }    for (int i=offset + start; i >= offset; --i) {      if (value[i] == c) {        return i - offset;      }    }  }  return -1;}  }
class C{  protected static Date fromDosTime(ZipLong l){  long dosTime=l.getValue();  Calendar cal=Calendar.getInstance();  cal.set(Calendar.YEAR,(int)((dosTime >> 25) & 0x7f) + 1980);  cal.set(Calendar.MONTH,(int)((dosTime >> 21) & 0x0f) - 1);  cal.set(Calendar.DATE,(int)(dosTime >> 16) & 0x1f);  cal.set(Calendar.HOUR_OF_DAY,(int)(dosTime >> 11) & 0x1f);  cal.set(Calendar.MINUTE,(int)(dosTime >> 5) & 0x3f);  cal.set(Calendar.SECOND,(int)(dosTime << 1) & 0x3e);  return cal.getTime();}  }
class C{  public CSVReader(Reader reader){  this(reader,CSVParser.DEFAULT_SEPARATOR,CSVParser.DEFAULT_QUOTE_CHARACTER,CSVParser.DEFAULT_ESCAPE_CHARACTER);}  }
class C{  public static int determineSeed(Output output,ParameterDatabase parameters,Parameter seedParameter,long currentTime,int offset,boolean auto){  int seed=1;  String tmp_s=parameters.getString(seedParameter,null);  if (tmp_s == null && !auto) {    output.fatal("Seed must exist.",seedParameter,null);  } else   if (V_SEED_TIME.equalsIgnoreCase(tmp_s) || (tmp_s == null && auto)) {    if (tmp_s == null && auto)     output.warnOnce("Using automatic determination number of threads, but not all seeds are defined.\nThe rest will be defined using the wall clock time.");    seed=(int)currentTime;    if (seed == 0)     output.fatal("Whoa! This Java version is returning 0 for System.currentTimeMillis(), which ain't right.  This means you can't use '" + V_SEED_TIME + "' as a seed ",seedParameter,null);  } else {    try {      seed=parameters.getInt(seedParameter,null);    } catch (    NumberFormatException e) {      output.fatal("Invalid, non-integer seed value (" + seed + ")",seedParameter,null);    }  }  return seed + offset;}  }
class C{  @Override protected boolean isArgument(){  return false;}  }
class C{  public List<List<RectF>> retrieve(List<List<RectF>> returnObjects,RectF rectF){  int index=getIndex(rectF);  if (index != -1 && nodes[0] != null) {    nodes[index].retrieve(returnObjects,rectF);  }  returnObjects.add(objects);  return returnObjects;}  }
class C{  void onRestoreStarted(){  mRestoreStartedAtMillis=SystemClock.elapsedRealtime();}  }
class C{  private int[] parsePortAttribute(final String portValue) throws MalformedCookieException {  final StringTokenizer st=new StringTokenizer(portValue,",");  final int[] ports=new int[st.countTokens()];  try {    int i=0;    while (st.hasMoreTokens()) {      ports[i]=Integer.parseInt(st.nextToken().trim());      if (ports[i] < 0) {        throw new MalformedCookieException("Invalid Port attribute.");      }      ++i;    }  } catch (  final NumberFormatException e) {    throw new MalformedCookieException("Invalid Port " + "attribute: " + e.getMessage());  }  return ports;}  }
class C{  public SignatureVerifier(Signature signature){  this(signature,null,null);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{taskId}/delete") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN},acls={ACL.OWN}) public Response deleteTask(@PathParam("taskId") URI taskId){  Task task=queryResource(taskId);  if (task.getTenant().equals(TenantOrg.SYSTEM_TENANT)) {    verifySystemAdmin();  } else {    verifyUserHasAccessToTenants(Lists.newArrayList(task.getTenant()));  }  _dbClient.removeObject(task);  auditOp(OperationTypeEnum.DELETE_TASK,true,null,task.getId().toString(),task.getLabel());  return Response.ok().build();}  }
class C{  protected void processpacket(SimEvent ev){  CloudSim.cancelAll(getId(),new PredicateType(CloudSimTags.Network_Event_UP));  schedule(getId(),switching_delay,CloudSimTags.Network_Event_UP);  pktlist.add((NetworkPacket)ev.getData());}  }
class C{  private void fciOrientbk(IKnowledge knowledge,Graph graph,List<Node> variables){  logger.log("info","Starting BK Orientation.");  for (Iterator<KnowledgeEdge> it=knowledge.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.ARROW);    graph.setEndpoint(from,to,Endpoint.CIRCLE);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  for (Iterator<KnowledgeEdge> it=knowledge.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.TAIL);    graph.setEndpoint(from,to,Endpoint.ARROW);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  logger.log("info","Finishing BK Orientation.");}  }
class C{  public static ExportGroup verifyExportGroupExists(IngestionRequestContext requestContext,String exportGroupGeneratedName,URI project,StringSet knownInitiatorUris,URI vArray,DbClient dbClient){  ExportGroup exportGroup=null;  for (  String initiatorIdStr : knownInitiatorUris) {    AlternateIdConstraint constraint=AlternateIdConstraint.Factory.getExportGroupInitiatorConstraint(initiatorIdStr);    URIQueryResultList egUris=new URIQueryResultList();    dbClient.queryByConstraint(constraint,egUris);    List<ExportGroup> queryExportGroups=dbClient.queryObject(ExportGroup.class,egUris);    for (    ExportGroup eg : queryExportGroups) {      if (!eg.getGeneratedName().equals(exportGroupGeneratedName)) {        continue;      }      if (!eg.getProject().getURI().equals(project)) {        continue;      }      if (!eg.getVirtualArray().equals(vArray)) {        continue;      }      if (queryExportGroups.size() > 1) {        _logger.info("More than one export group contains the initiator(s) requested.  Choosing : " + eg.getId().toString());      }      exportGroup=eg;      break;    }  }  if (exportGroup != null) {    DataObject alreadyLoadedExportGroup=requestContext.findInUpdatedObjects(exportGroup.getId());    if (alreadyLoadedExportGroup != null && (alreadyLoadedExportGroup instanceof ExportGroup)) {      _logger.info("Found an already loaded export group");      exportGroup=(ExportGroup)alreadyLoadedExportGroup;    }  }  return exportGroup;}  }
class C{  public JBBPOut Bool(final boolean... value) throws IOException {  assertNotEnded();  assertArrayNotNull(value);  if (this.processCommands) {    for (    final boolean b : value) {      this.outStream.write(b ? 1 : 0);    }  }  return this;}  }
class C{  public void addAssignedStoragePools(final Set<String> assignedPools){  if (null != _assignedStoragePools) {    _assignedStoragePools.replace(assignedPools);  } else {    if (null != assignedPools && !assignedPools.isEmpty()) {      setAssignedStoragePools(new StringSet());      _assignedStoragePools.addAll(assignedPools);    }  }}  }
class C{  public int compareTo(final Decimal other){  return CoreUtils.nullSafeComparator(this.getBigDecimalValue(),other.getBigDecimalValue());}  }
class C{  @Override public Request<BuilderStatus> status(ProjectReference projectReference,long taskId){  List<DummyBuilderStatus> statuses=availableBuilderStatuses.get(projectReference.name());  if (statuses != null && !statuses.isEmpty()) {    for (    BuilderStatus builderStatus : statuses) {      if (taskId == builderStatus.taskId()) {        return new DummyRequest<>(builderStatus);      }    }  }  return new DummyRequest<>(null);}  }
class C{  public void restoreClass() throws Exception {  if (backupFile == null) {    return;  }  copyFile(backupFile,classFile);  log.info("wait 5 seconds for restored class to take effect");  Thread.currentThread().sleep(5000);  log.info("restore done");  boolean deleted=backupFile.delete();  log.info("delete backup file {} sucess={}",backupFile.getAbsolutePath(),deleted);  backupFile=null;}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Deprecated public static boolean isEquals(final Object array1,final Object array2){  return new EqualsBuilder().append(array1,array2).isEquals();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Bundler putIntegerArrayList(String key,ArrayList<Integer> value){  bundle.putIntegerArrayList(key,value);  return this;}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  private static synchronized void applyServiceTitleChanges(List<ApiService> services){  Properties titleChanges=new Properties();  try {    titleChanges.load(new FileInputStream(KnownPaths.getReferenceFile("ServiceTitleChanges.txt")));    for (    ApiService service : services) {      if (titleChanges.containsKey(service.getFqJavaClassName())) {        service.titleOverride=titleChanges.get(service.getFqJavaClassName()).toString();      } else       if (titleChanges.containsKey(service.javaClassName)) {        service.titleOverride=titleChanges.get(service.javaClassName).toString();      }    }  } catch (  IOException e) {    throw new RuntimeException("Unable to load Title Changes file",e);  }}  }
class C{  public void addAssociatedId(BaseStorageEntity param){  if (localAssociatedId == null) {    localAssociatedId=new BaseStorageEntity[]{};  }  localAssociatedIdTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localAssociatedId);  list.add(param);  this.localAssociatedId=(BaseStorageEntity[])list.toArray(new BaseStorageEntity[list.size()]);}  }
class C{  public TimeoutRequest(final Callable<E> call){  this.call=call;}  }
class C{  public boolean startsWith(String prefix,int toffset){  return m_str.startsWith(prefix,toffset);}  }
class C{  public void printProbTable(float[][][] probTable,List<String> words,ProbUnrestrictedGrammar g){  final int N=words.size();  final int M=g.vars.size();  for (int i=0; i < M; i++) {    System.out.println("Table For : " + g.vars.get(i) + "("+ i+ ")");    for (int j=0; j < N; j++) {      System.out.print(j + "| ");      for (int k=0; k < N; k++) {        System.out.print(probTable[i][j][k] + " | ");      }      System.out.println();    }    System.out.println();  }}  }
class C{  public SWFText tagDefineText2(int id,Rect bounds,Matrix matrix) throws IOException {  lastBounds=curBounds;  curBounds=bounds;  return new TextDumper();}  }
class C{  @Override public boolean isReadOnly(){  return false;}  }
class C{  public void addCqListener(CqListener cqListener){  if (cqListener == null) {    throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_ADDCQLISTENER_PARAMETER_WAS_NULL.toLocalizedString());  }  this.cqAttributes.addCqListener(cqListener);}  }
class C{  private ChannelMentionToken(MessageTokenizer tokenizer,int startIndex,int endIndex){  super(tokenizer,startIndex,endIndex,null);  mention=tokenizer.getClient().getChannelByID(getContent().replace("<#","").replace(">",""));}  }
class C{  public NetworkBuilder<N,E> expectedNodeCount(int expectedNodeCount){  checkArgument(expectedNodeCount >= 0,"The expected number of nodes can't be negative: %s",expectedNodeCount);  this.expectedNodeCount=Optional.of(expectedNodeCount);  return this;}  }
class C{  synchronized boolean clear() throws IOException {  String[] files=diskPath.list();  if (files == null) {    return false;  }  if (files.length == 0) {    return false;  }  for (  String fileName : files) {    File file=new File(diskPath,fileName);    if (!file.delete()) {      throw new IOException("Unable to delete file " + fileName + " in localId cache.");    }  }  return true;}  }
class C{  private static int modifierDescriptionToReflectedType(String name,String key,String value){switch (key) {case MODIFIER_ABSTRACT:    return value.equals("true") ? Modifier.ABSTRACT : 0;case MODIFIER_FINAL:  return value.equals("true") ? Modifier.FINAL : 0;case MODIFIER_NATIVE:return value.equals("true") ? Modifier.NATIVE : 0;case MODIFIER_STATIC:return value.equals("true") ? Modifier.STATIC : 0;case MODIFIER_SYNCHRONIZED:return value.equals("true") ? Modifier.SYNCHRONIZED : 0;case MODIFIER_TRANSIENT:return value.equals("true") ? Modifier.TRANSIENT : 0;case MODIFIER_VOLATILE:return value.equals("true") ? Modifier.VOLATILE : 0;case MODIFIER_VISIBILITY:switch (value) {case MODIFIER_PRIVATE:throw new RuntimeException("Private visibility found in API spec: " + name);case MODIFIER_PROTECTED:return Modifier.PROTECTED;case MODIFIER_PUBLIC:return Modifier.PUBLIC;case "":return 0;default :throw new RuntimeException("Unknown modifier found in API spec: " + value);}}return 0;}  }
class C{  private Object readResolve() throws ObjectStreamException {  return LexiconKeyOrder.valueOf(index);}  }
class C{  private void loadProfile(String userId,String name){  final Intent userProfileIntent=new Intent(getActivity(),UserProfileActivity.class);  userProfileIntent.putExtra(AppConstants.Keys.USER_ID,userId);  userProfileIntent.putExtra(AppConstants.Keys.USER_NAME,name);  userProfileIntent.putExtra(AppConstants.Keys.SERVICE_SCREEN_TYPE,AppConstants.ServiceScreenType.PROFILE);  startActivity(userProfileIntent);}  }
class C{  public String toString(){  return "Characters from " + startPos + ", length "+ length+ ": "+ errorMsg;}  }
class C{  public T caseConfiguration(Configuration object){  return null;}  }
class C{  public void testPushNull(){  try {    LinkedBlockingDeque q=new LinkedBlockingDeque(1);    q.push(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  private String replaceLanguageAndRegion(String str){  if (str.contains("%lang%") || str.contains("%region%")) {    Locale locale=Locale.getDefault();    str=str.replace("%lang%",locale.getLanguage().toLowerCase());    str=str.replace("%region%",locale.getCountry().toLowerCase());  }  return str;}  }
class C{  public Quaterniond rotateZYX(double angleZ,double angleY,double angleX){  return rotateZYX(angleZ,angleY,angleX,this);}  }
class C{  public boolean isMuted(){  return isMuted;}  }
class C{  public SVGOMTextElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public SurfaceObjectTile(Sector sector,Level level,int row,int column,String cacheName){  super(sector,level,row,column,cacheName);}  }
class C{  private Point translatePointToTabPanel(final int srcx,final int srcy,final Point dest){  final Point vpp=tabScroller.viewport.getLocation();  final Point viewp=tabScroller.viewport.getViewPosition();  dest.x=srcx - vpp.x + viewp.x;  dest.y=srcy - vpp.y + viewp.y;  return dest;}  }
class C{  private TaskSeriesCollection createCollection1(){  TaskSeriesCollection result=new TaskSeriesCollection();  TaskSeries s1=new TaskSeries("S1");  s1.add(new Task("Task 1",new Date(1),new Date(2)));  s1.add(new Task("Task 2",new Date(3),new Date(4)));  result.add(s1);  TaskSeries s2=new TaskSeries("S2");  s2.add(new Task("Task 3",new Date(5),new Date(6)));  result.add(s2);  return result;}  }
class C{  @Ignore("TODO:YOGESH: test is disabled") @Test public void testRegisterInterestHappeningBeforeRegionCreation() throws Exception {  createClientServerConfigurationForClearTest();  server1.invoke(putFromServer());  client1.invoke(verifyIfAllPutsGot());  server2.invoke(createRegionOnServer());  server2.invoke(verifyIfAllPutsGot());  client2.invoke(verifyIfAllPutsGot());}  }
class C{  public void testSurrogates2() throws IOException {  int numIterations=atLeast(1000);  for (int i=0; i < numIterations; i++) {    String s=TestUtil.randomUnicodeString(random(),100);    try (TokenStream ts=analyzer.tokenStream("foo",s)){      CharTermAttribute termAtt=ts.addAttribute(CharTermAttribute.class);      ts.reset();      while (ts.incrementToken()) {        assertTrue(UnicodeUtil.validUTF16String(termAtt));      }      ts.end();    }   }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.PRE_OR_POST_CONDITION___TRACE_CONDITION_1:    return ((InternalEList<?>)getTraceCondition_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private <T>T readNameOrValue(TypedParser<T> ch){  getCurrentContext().read();  JsonNode elem=getCurrentContext().getCurrentChild();  if (getCurrentContext().isMapKey()) {    return ch.readFromString(elem.asText());  } else {    return ch.readFromJsonElement(elem);  }}  }
class C{  public void write(boolean x){  writeBit(x);}  }
class C{  public MPaySelectionCheck(MPaySelection ps,String PaymentRule){  this(ps.getCtx(),0,ps.get_TrxName());  setClientOrg(ps);  setC_PaySelection_ID(ps.getC_PaySelection_ID());  setPaymentRule(PaymentRule);}  }
class C{  public static int listMBeans(MBeanServerConnection server,ObjectName pattern,QueryExp query) throws IOException {  final Set names=server.queryNames(pattern,query);  for (final Iterator i=names.iterator(); i.hasNext(); ) {    ObjectName name=(ObjectName)i.next();    log.trace("listMBeans","Got MBean: " + name);    try {      MBeanInfo info=server.getMBeanInfo((ObjectName)name);      MBeanAttributeInfo[] attrs=info.getAttributes();      if (attrs == null)       continue;      for (int j=0; j < attrs.length; j++) {        if (attrs[j].isReadable()) {          try {            Object o=server.getAttribute(name,attrs[j].getName());            if (log.isDebugOn())             log.debug("listMBeans","\t\t" + attrs[j].getName() + " = "+ o);          } catch (          Exception x) {            log.trace("listMBeans","JmxClient failed to get " + attrs[j].getName() + ": "+ x);            final IOException io=new IOException("JmxClient failed to get " + attrs[j].getName());            io.initCause(x);            throw io;          }        }      }    } catch (    Exception x) {      log.trace("listMBeans","JmxClient failed to get MBeanInfo: " + x);      final IOException io=new IOException("JmxClient failed to get MBeanInfo: " + x);      io.initCause(x);      throw io;    }  }  return names.size();}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  if (!m_MinimizeExpectedCost) {    return m_Classifier.distributionForInstance(instance);  }  double[] pred=m_Classifier.distributionForInstance(instance);  double[] costs=m_CostMatrix.expectedCosts(pred,instance);  int classIndex=Utils.minIndex(costs);  for (int i=0; i < pred.length; i++) {    if (i == classIndex) {      pred[i]=1.0;    } else {      pred[i]=0.0;    }  }  return pred;}  }
class C{  public static void animateScatter(RecyclerView.ViewHolder holder,boolean goesDown){  counter=++counter % 4;  int holderHeight=holder.itemView.getHeight();  int holderWidth=holder.itemView.getWidth();  View holderItemView=holder.itemView;  holderItemView.setPivotY(goesDown == true ? 0 : holderHeight);  holderItemView.setPivotX(holderWidth / 2);  AnimatorSet animatorSet=new AnimatorSet();  ObjectAnimator animatorTranslateY=ObjectAnimator.ofFloat(holderItemView,"translationY",goesDown == true ? 300 : -300,0);  ObjectAnimator animatorTranslateX=ObjectAnimator.ofFloat(holderItemView,"translationX",counter == 1 || counter == 3 ? holderWidth : -holderWidth,0);  ObjectAnimator animatorScaleX=ObjectAnimator.ofFloat(holderItemView,"scaleX",counter == 1 || counter == 2 ? 0 : 2,1f);  ObjectAnimator animatorScaleY=ObjectAnimator.ofFloat(holderItemView,"scaleY",counter == 1 || counter == 2 ? 0 : 2,1f);  ObjectAnimator animatorAlpha=ObjectAnimator.ofFloat(holderItemView,"alpha",0f,1f);  animatorAlpha.setInterpolator(new AccelerateInterpolator(1.5f));  animatorSet.playTogether(animatorAlpha,animatorScaleX,animatorScaleY,animatorTranslateX,animatorTranslateY);  animatorSet.setDuration(2000).setInterpolator(new DecelerateInterpolator(1.1f));  animatorSet.start();}  }
class C{  public boolean writePersistentString(String key,String value){  try {    if (checkService()) {      return sService.writePersistentBytes(key,value == null ? null : value.getBytes("UTF-8"));    }  } catch (  RemoteException e) {  }catch (  UnsupportedEncodingException e) {    Log.e(TAG,e.getMessage(),e);  }  return false;}  }
class C{  public static QueryStorageFileSystemsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryStorageFileSystemsResponse object=new QueryStorageFileSystemsResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryStorageFileSystemsResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryStorageFileSystemsResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(StorageFileSystem.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(StorageFileSystem.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((StorageFileSystem[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(StorageFileSystem.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static void addEventListener(final KCWebView aWebView,KCArgList aArgList){  String callbackId=aArgList.getString(KCJSDefine.kJS_callbackId);  Integer nCallbackId=Integer.valueOf(callbackId);  String eventName=aArgList.getString(KCJSDefine.kJS_event);synchronized (mEvents) {    mEvents.put(eventName,nCallbackId);  }}  }
class C{  public Node buildTreeGrow(Class<?> type,int depth){  if (depth == 0) {    return PRNG.nextItem(listAvailableTerminals(type)).copyNode();  } else {    Node node=PRNG.nextItem(listAvailableNodes(type)).copyNode();    for (int i=0; i < node.getNumberOfArguments(); i++) {      node.setArgument(i,buildTreeGrow(node.getArgumentType(i),depth - 1));    }    return node;  }}  }
class C{  public SVGFeColorMatrixElementBridge(){}  }
class C{  void show(){  isVisible=true;  ViewCompat.animate(this).setDuration(150).alpha(1).scaleX(1).scaleY(1).start();}  }
class C{  public void clearUnprocessedMaps(){  this.stats.setInt(unprocessedEventMapSizeId,0);  this.stats.setInt(unprocessedTokenMapSizeId,0);}  }
class C{  public void remove(){  map.remove(Thread.currentThread().getId());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:18.844 -0500",hash_original_method="84747EB963EFC6E551D95C210645E8C0",hash_generated_method="6A5FBB901968BCE27B64EB8A163EDECD") public String format3339(boolean allDay){  if (allDay) {    return format(Y_M_D);  } else   if (TIMEZONE_UTC.equals(timezone)) {    return format(Y_M_D_T_H_M_S_000_Z);  } else {    String base=format(Y_M_D_T_H_M_S_000);    String sign=(gmtoff < 0) ? "-" : "+";    int offset=(int)Math.abs(gmtoff);    int minutes=(offset % 3600) / 60;    int hours=offset / 3600;    return String.format("%s%s%02d:%02d",base,sign,hours,minutes);  }}  }
class C{  @NonNull public static Animator forever(@NonNull Animator animator){  return repeat(-1,animator);}  }
class C{  private boolean checkElementsType(Object[] x_dim_Array,int dim){  if (dim > 1) {    for (int i=0; i < x_dim_Array.length; i++) {      if (!checkElementsType((Object[])x_dim_Array[i],dim - 1)) {        return false;      }    }    return true;  } else {    for (int i=0; i < x_dim_Array.length; i++) {      if ((x_dim_Array[i] != null) && (!this.getElementOpenType().isValue(x_dim_Array[i]))) {        return false;      }    }    return true;  }}  }
class C{  public CasualtyList(){  m_killed=new ArrayList<>();  m_damaged=new ArrayList<>();}  }
class C{  public void writeCpMaps(Dictionary dict,PrintWriter fout) throws IOException {  Iterator it=null;  if (cpStr2Int == null) {    return;  }  int count=0;  for (it=cpStr2Int.keySet().iterator(); it.hasNext(); ) {    String cpStr=(String)it.next();    Integer cpInt=(Integer)cpStr2Int.get(cpStr);    Element elem=(Element)dict.dict.get(cpInt);    if (elem != null) {      if (elem.chosen == 1) {        count++;      }    }  }  fout.println(Integer.toString(count));  for (it=cpStr2Int.keySet().iterator(); it.hasNext(); ) {    String cpStr=(String)it.next();    Integer cpInt=(Integer)cpStr2Int.get(cpStr);    Element elem=(Element)dict.dict.get(cpInt);    if (elem != null) {      if (elem.chosen == 1) {        fout.println(cpStr + " " + cpInt.toString());      }    }  }  fout.println(Option.modelSeparator);}  }
class C{  public static LdapContextSource createConfiguredLDAPContextSource(CoordinatorClient coordinator,AuthnProvider authProvider,int timeout,String url){  Map<String,String> environmentProperties=new HashMap<String,String>();  environmentProperties.put("java.naming.security.authentication","simple");  if (authProvider.getMode().equalsIgnoreCase(AuthnProvider.ProvidersType.ad.toString())) {    environmentProperties.put("java.naming.ldap.attributes.binary",StorageOSLdapPersonAttributeDao.TOKEN_GROUPS + " " + StorageOSLdapPersonAttributeDao.OBJECT_SID);  }  if (!authProvider.getServerUrls().iterator().next().toLowerCase().startsWith(LDAPS_PROTOCOL) && timeout > 1) {    environmentProperties.put("com.sun.jndi.ldap.connect.timeout",String.valueOf((timeout * 1000)));  }  return createLDAPContextSource(coordinator,authProvider,environmentProperties,url);}  }
class C{  void releaseLocal(){  releaseLocal(Thread.currentThread().getId());}  }
class C{  public static <T>Mapping<T> defaultv(Mapping<T> base,T defaultVal,Constraint... constraints){  return optional(base,constraints).map(null);}  }
class C{  public static ArrayList<String> readFile(String file){  ArrayList<String> fichier=new ArrayList<>();  try {    InputStream ips=new FileInputStream(file);    InputStreamReader ipsr=new InputStreamReader(ips);    try (BufferedReader br=new BufferedReader(ipsr)){      String ligne=br.readLine();      int i=0;      while (ligne != null) {        fichier.add(ligne.toString());        i++;        ligne=br.readLine();      }    }   } catch (  Exception e) {    System.out.println("Error : " + e.toString() + e);  }  return fichier;}  }
class C{  public void update(){  FileTextArea textArea=fileWindow.textArea;  Font font=textArea.getFont();  setFont(font);  FontMetrics metrics=getFontMetrics(font);  int h=metrics.getHeight();  int lineCount=textArea.getLineCount() + 1;  String dummy=Integer.toString(lineCount);  if (dummy.length() < 2) {    dummy="99";  }  Dimension d=new Dimension();  d.width=metrics.stringWidth(dummy) + 16;  d.height=lineCount * h + 100;  setPreferredSize(d);  setSize(d);}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public FBStatisticsManager(GDSType gdsType){  super(gdsType);}  }
class C{  public void replaceFile(InputStream inputStreamFile,String fileExt){  m_doc.replaceFile(inputStreamFile,fileExt);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void removeContent(String variableId){  if (!paused) {    curState.removeFromState(variableId);    update();  } else {    log.info("system is paused, ignoring removal of " + variableId);  }}  }
class C{  public static byte[] doubleDigestTwoBuffers(byte[] input1,int offset1,int length1,byte[] input2,int offset2,int length2){synchronized (digest) {    digest.reset();    digest.update(input1,offset1,length1);    digest.update(input2,offset2,length2);    byte[] first=digest.digest();    return digest.digest(first);  }}  }
class C{  public AssociationRules(List<AssociationRule> rules,Object producer){  String producerString=producer.getClass().getName();  if (producerString.startsWith("weka.associations.")) {    producerString=producerString.substring("weka.associations.".length());  }  if (producer instanceof OptionHandler) {    String[] o=((OptionHandler)producer).getOptions();    producerString+=" " + Utils.joinOptions(o);  }  m_rules=rules;  m_producer=producerString;}  }
class C{  public static void validateNotAnInternalBlockObject(BlockObject blockObject,boolean force){  if (blockObject != null) {    if (blockObject.checkInternalFlags(Flag.INTERNAL_OBJECT) && !blockObject.checkInternalFlags(Flag.SUPPORTS_FORCE)) {      throw APIException.badRequests.notSupportedForInternalVolumes();    } else     if (blockObject.checkInternalFlags(Flag.INTERNAL_OBJECT) && blockObject.checkInternalFlags(Flag.SUPPORTS_FORCE) && !force) {      throw APIException.badRequests.notSupportedForInternalVolumes();    }  }}  }
class C{  public boolean isNamespaceAware(){  return namespaceAware;}  }
class C{  public BrowserRows(){}  }
class C{  public static final int ceilPowerOf2(int x){  int pow2=1;  while (pow2 < x) {    pow2<<=1;  }  return pow2;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageHeaders=null;  String outputHeader=null;  String outputSuffix=null;  int row, col;  double z;  double noData;  int progress;  int i, bin;  int numImages=0;  double minVal, maxVal;  int numBins=1024;  double clipPercentage=1.0;  String whichTailsToClip="both";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputSuffix=" " + args[1].trim().replace(".dep","") + ".dep";  clipPercentage=Double.parseDouble(args[2]);  whichTailsToClip=args[3].toLowerCase();  numBins=Integer.parseInt(args[4]);  if ((inputFilesString == null) || (outputSuffix == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    imageHeaders=inputFilesString.split(";");    numImages=imageHeaders.length;    for (i=0; i < numImages; i++) {      WhiteboxRaster image=new WhiteboxRaster(imageHeaders[i],"r");      int nRows=image.getNumberRows();      int nCols=image.getNumberColumns();      noData=image.getNoDataValue();      double[] data=null;      double inputImageMin=image.getMinimumValue();      double inputImageMax=image.getMaximumValue();      int inputImageBins=(int)(inputImageMax - inputImageMin + 1);      double inputImageRange=inputImageMax - inputImageMin;      double[] histo=new double[inputImageBins];      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            bin=(int)(data[col] - inputImageMin);            if (bin < 0) {              bin=0;            }            if (bin > (inputImageBins - 1)) {              bin=(inputImageBins - 1);            }            histo[bin]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Calculating clip values:",progress);      }      for (int a=1; a < inputImageBins; a++) {        histo[a]=histo[a] + histo[a - 1];      }      for (int a=0; a < inputImageBins; a++) {        histo[a]=histo[a] / histo[inputImageBins - 1] * 100;      }      boolean lowerTailFound=false;      boolean upperTailFound=false;      minVal=-1;      maxVal=-1;      if (whichTailsToClip.contains("both")) {        for (int a=1; a < inputImageBins; a++) {          if (histo[a] >= clipPercentage && !lowerTailFound) {            minVal=(a - 1 + inputImageMin) + (clipPercentage - histo[a - 1]) / (histo[a] - histo[a - 1]);            lowerTailFound=true;          }          if (histo[a] >= (100 - clipPercentage) && !upperTailFound) {            maxVal=(a - 1 + inputImageMin) + ((100 - clipPercentage) - histo[a - 1]) / (histo[a] - histo[a - 1]);            upperTailFound=true;            break;          }        }      } else       if (whichTailsToClip.contains("lower")) {        for (int a=1; a < inputImageBins; a++) {          if (histo[a] >= clipPercentage && !lowerTailFound) {            minVal=(a - 1 + inputImageMin) + (clipPercentage - histo[a - 1]) / (histo[a] - histo[a - 1]);            lowerTailFound=true;            break;          }        }        maxVal=inputImageMax;      } else {        for (int a=1; a < inputImageBins; a++) {          if (histo[a] >= (100 - clipPercentage) && !upperTailFound) {            maxVal=(a - 1 + inputImageMin) + ((100 - clipPercentage) - histo[a - 1]) / (histo[a] - histo[a - 1]);            upperTailFound=true;            break;          }        }        minVal=inputImageMin;      }      double scaleFactor=numBins / (maxVal - minVal);      outputHeader=imageHeaders[i].replace(".dep",outputSuffix);      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageHeaders[i],WhiteboxRaster.DataType.INTEGER,noData);      output.setPreferredPalette(image.getPreferredPalette());      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            z=(int)(data[col] - minVal) * scaleFactor;            if (z < 0) {              z=0;            }            if (z > (numBins - 1)) {              z=(numBins - 1);            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      image.close();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void alias(double[] src,double[] dst){  int slength=src.length;  int dlength=dst.length;  Arrays.fill(dst,0.0f);  for (int i=0; i < slength; i++)   dst[i % dlength]+=src[i];}  }
class C{  public HttpURL(final char[] escaped) throws URIException, NullPointerException {  parseUriReference(new String(escaped),true);  checkValid();}  }
class C{  protected Set<Resource> doFindMatchingFileSystemResources(File rootDir,String subPattern) throws IOException {  if (logger.isDebugEnabled()) {    logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]");  }  Set<File> matchingFiles=retrieveMatchingFiles(rootDir,subPattern);  Set<Resource> result=new LinkedHashSet<Resource>(matchingFiles.size());  for (  File file : matchingFiles) {    result.add(new FileSystemResource(file));  }  return result;}  }
class C{  public boolean isEncrypted(){  Object oo=get_Value(COLUMNNAME_IsEncrypted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void enableSubmitIfReady(){  boolean isReady=false;  if (etUsername.getText().toString().length() >= 1 && etPassword.getText().toString().length() >= 1) {    isReady=true;  }  if (isReady) {    btnRegister.setBackground(getResources().getDrawable(R.drawable.btn_orange));    btnRegister.setTextColor(getResources().getColor(R.color.white));    btnRegister.setEnabled(true);  } else {    btnRegister.setBackground(getResources().getDrawable(R.drawable.btn_grey));    btnRegister.setTextColor(getResources().getColor(R.color.black));    btnRegister.setEnabled(false);  }}  }
class C{  public InspectImageParams withImage(@NotNull String image){  requireNonNull(image);  this.image=image;  return this;}  }
class C{  public void flush(byte[] buf,int offset,int len) throws IOException {  out.write(buf,offset,len);}  }
class C{  public QName(String namespaceURI,String prefix,String localName){  this(namespaceURI,prefix,localName,false);}  }
class C{  public TransportChannelSettings(EndpointDescription description,EndpointConfiguration configuration,Cert clientCertificate,PrivKey privateKey,CertificateValidator certificateValidator,NamespaceTable namespaceUris) throws RuntimeServiceResultException {  super();  this.configuration=configuration;  this.description=description;  this.opctcpSettings.setClientCertificate(clientCertificate);  this.opctcpSettings.setCertificateValidator(certificateValidator);  this.opctcpSettings.setPrivKey(privateKey);  if (namespaceUris != null)   this.namespaceUris=namespaceUris;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  boolean hidePackage(String packageName,String hiddenPackages){  if (packageName == null || packageName.equals(""))   return false; else   if (hiddenPackages.indexOf(":" + packageName + ":") != -1)   return (hiddenPackages.indexOf(":" + packageName + ":true:") != -1); else   return false;}  }
class C{  @Override public void run(){  try {    doRun();  } catch (  SocketTerminationException e) {    logger.info("Client stopped by close on socket");  }catch (  InterruptedException e) {    logger.info("Client stopped by interrupt on thread");  }catch (  Throwable t) {    if (!this.shutdownRequested) {      throwable=t;      logger.info("Echo client failed: name=" + clientName + " throwable="+ throwable.getMessage(),t);    }  } finally {    socket.close();  }}  }
class C{  public Metadata extract(Metadata metadata){  if (_data == null) {    return metadata;  }  Directory directory=metadata.getDirectory(IptcDirectory.class);  int offset=0;  try {    while (offset < _data.length - 1 && get32Bits(offset) != 0x1c02) {      offset++;    }  } catch (  MetadataException e) {    directory.addError("Couldn't find start of Iptc data (invalid segment)");    return metadata;  }  while (offset < _data.length) {    if (_data[offset] != 0x1c) {      break;    }    if ((offset + 5) >= _data.length) {      break;    }    offset++;    int directoryType;    int tagType;    int tagByteCount;    try {      directoryType=_data[offset++];      tagType=_data[offset++];      tagByteCount=get32Bits(offset);    } catch (    MetadataException e) {      directory.addError("Iptc data segment ended mid-way through tag descriptor");      return metadata;    }    offset+=2;    if ((offset + tagByteCount) > _data.length) {      directory.addError("data for tag extends beyond end of iptc segment");      break;    }    processTag(directory,directoryType,tagType,offset,tagByteCount);    offset+=tagByteCount;  }  return metadata;}  }
class C{  public void actionPerformed(ActionEvent e){  String command=e.getActionCommand();  if (Debug.debugging("editortool")) {    Debug.output("DET.actionPerformed(" + command + ")");  }  if (RESET_CMD.equals(command)) {    setWantsEvents(false);  } else   if (command != null) {    if (!command.equals(thingToCreate)) {      EditorLayer elayer=(EditorLayer)getLayer();      elayer.releaseProxyMouseMode();      if (thingToCreate == null && mouseDelegator != null) {        mouseDelegator.setActiveMouseModeWithID(elayer.getMouseMode().getID());      }      setWantsEvents(command);    } else {      totalReset();    }  }}  }
class C{  private DataWorldComponent(final NumericTable dataTable,final String name){  super(name);  this.dataTable=dataTable;}  }
class C{  private void examineRedundantBranches(){  for (  RedundantBranch redundantBranch : redundantBranchList) {    if (DEBUG) {      System.out.println("Redundant branch: " + redundantBranch);    }    int lineNumber=redundantBranch.lineNumber;    boolean confused=undeterminedBranchSet.get(lineNumber) || (definitelySameBranchSet.get(lineNumber) && definitelyDifferentBranchSet.get(lineNumber));    boolean reportIt=true;    if (lineMentionedMultipleTimes.get(lineNumber) && confused) {      reportIt=false;    } else     if (redundantBranch.location.getBasicBlock().isInJSRSubroutine() && confused) {      reportIt=false;    } else {      int pc=redundantBranch.location.getHandle().getPosition();      for (      CodeException e : method.getCode().getExceptionTable()) {        if (e.getCatchType() == 0 && e.getStartPC() != e.getHandlerPC() && e.getEndPC() <= pc && pc <= e.getEndPC() + 5) {          reportIt=false;        }      }    }    if (reportIt) {      collector.foundRedundantNullCheck(redundantBranch.location,redundantBranch);    }  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildMineArea(zone);}  }
class C{  public CActionInvertSelection(final ZyGraph graph,final boolean showIcon){  super("Invert selection");  m_graph=Preconditions.checkNotNull(graph,"IE02823: graph argument can not be null");  if (showIcon) {    putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/selinvert_up.jpg")));  }  putValue(Action.SHORT_DESCRIPTION,"Invert Selection");}  }
class C{  private void initializeRegisters(boolean controlI2C) throws UsbException {  for (int x=5; x < mShadowRegister.length; x++) {    writeI2CRegister(mDeviceHandle,mI2CAddress,(byte)x,(byte)mShadowRegister[x],controlI2C);  }}  }
class C{  Mark skipUntilIgnoreEsc(String limit) throws JasperException {  Mark ret=null;  int limlen=limit.length();  int ch;  int prev='x';  skip:   for (ret=mark(), ch=nextChar(); ch != -1; ret=mark(), prev=ch, ch=nextChar()) {    if (ch == '\\' && prev == '\\') {      ch=0;    } else     if (ch == limit.charAt(0) && prev != '\\') {      for (int i=1; i < limlen; i++) {        if (peekChar() == limit.charAt(i))         nextChar(); else         continue skip;      }      return ret;    }  }  return null;}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  public void removeAllElements(){synchronized (hrefList) {    hrefList.clear();    fireTableDataChanged();  }}  }
class C{  public double compute(Collection<? extends Number> dataset){  return computeInPlace(Doubles.toArray(dataset));}  }
class C{  private void encryptIdToken(final ClientDetailsEntity client,final OAuth2AccessTokenEntity idTokenEntity,final JWTClaimsSet.Builder idClaims){  log.debug("Locating encrypter service for client {}",client.getClientId());  final JWTEncryptionAndDecryptionService encrypter=encrypters.getEncrypter(client);  if (encrypter != null) {    log.debug("Found encrypter service for client {}.",client.getClientId());    final JWTClaimsSet claims=idClaims.build();    final EncryptedJWT idToken=new EncryptedJWT(new JWEHeader(client.getIdTokenEncryptedResponseAlg(),client.getIdTokenEncryptedResponseEnc()),claims);    log.debug("Encrypting idToken with response alg {} and response encoding {} and claims {}",client.getIdTokenEncryptedResponseAlg(),client.getIdTokenEncryptedResponseEnc(),claims.getClaims().keySet());    encrypter.encryptJwt(idToken);    idTokenEntity.setJwt(idToken);  } else {    log.error("Couldn't find encrypter for client: {} ",client.getClientId());  }}  }
class C{  public PropertyDialog(Dialog owner,PropertyEditor pe,int x,int y){  super(owner,pe.getClass().getName(),ModalityType.DOCUMENT_MODAL);  initialize(pe,x,y);}  }
class C{  public void beginBatchMode(){  mPreventInvalidateCount++;}  }
class C{  private void stopActivityTransitionTimer(){  if (mActivityTransitionTimerTask != null) {    mActivityTransitionTimerTask.cancel();    mActivityTransitionTimerTask=null;  }  if (mActivityTransitionTimer != null) {    mActivityTransitionTimer.cancel();    mActivityTransitionTimer=null;  }  if (isAppInBackground() && !mIsCallingInBackground) {    if (null == EventStreamService.getInstance()) {      CommonActivityUtils.startEventStreamService(VectorApp.this);    } else {      CommonActivityUtils.resumeEventStream(VectorApp.this);      GcmRegistrationManager gcmRegistrationManager=Matrix.getInstance(this).getSharedGCMRegistrationManager();      if (null != gcmRegistrationManager) {        gcmRegistrationManager.checkRegistrations();      }    }    ContactsManager.refreshLocalContactsSnapshot(this);    boolean hasActiveCall=false;    ArrayList<MXSession> sessions=Matrix.getInstance(this).getSessions();    for (    MXSession session : sessions) {      session.getMyUser().refreshUserInfos(null);      session.setIsOnline(true);      session.setSyncDelay(0);      session.setSyncTimeout(0);      hasActiveCall|=session.getDataHandler().getCallsManager().hasActiveCalls();    }    if (VectorCallSoundManager.isRinging() && !hasActiveCall && (null != EventStreamService.getInstance())) {      Log.e(LOG_TAG,"## suspendApp() : fix an infinite ringing");      EventStreamService.getInstance().hideCallNotifications();    }  }  MyPresenceManager.advertiseAllOnline();  mIsCallingInBackground=false;  mIsInBackground=false;}  }
class C{  private void testIsoWeekJanuary1thThursday() throws Exception {  assertEquals(52,getIsoWeek(parse("2008-12-28")));  assertEquals(1,getIsoWeek(parse("2008-12-29")));  assertEquals(1,getIsoWeek(parse("2008-12-30")));  assertEquals(1,getIsoWeek(parse("2008-12-31")));  assertEquals(1,getIsoWeek(parse("2009-01-01")));  assertEquals(1,getIsoWeek(parse("2009-01-04")));  assertEquals(2,getIsoWeek(parse("2009-01-09")));}  }
class C{  protected void deleteGateway(String guid){  IPv4Address gwIp=guidToGateway.remove(guid);  if (gwIp == null)   return;  Set<String> gSet=gatewayToGuid.get(gwIp);  gSet.remove(guid);  if (vNetsByGuid.get(guid) != null)   vNetsByGuid.get(guid).setGateway(null);}  }
class C{  private static void modify(final Calendar val,final int field,final ModifyType modType){  if (val.get(Calendar.YEAR) > 280000000) {    throw new ArithmeticException("Calendar value too large for accurate calculations");  }  if (field == Calendar.MILLISECOND) {    return;  }  final Date date=val.getTime();  long time=date.getTime();  boolean done=false;  final int millisecs=val.get(Calendar.MILLISECOND);  if (ModifyType.TRUNCATE == modType || millisecs < 500) {    time=time - millisecs;  }  if (field == Calendar.SECOND) {    done=true;  }  final int seconds=val.get(Calendar.SECOND);  if (!done && (ModifyType.TRUNCATE == modType || seconds < 30)) {    time=time - (seconds * 1000L);  }  if (field == Calendar.MINUTE) {    done=true;  }  final int minutes=val.get(Calendar.MINUTE);  if (!done && (ModifyType.TRUNCATE == modType || minutes < 30)) {    time=time - (minutes * 60000L);  }  if (date.getTime() != time) {    date.setTime(time);    val.setTime(date);  }  boolean roundUp=false;  for (  final int[] aField : fields) {    for (    final int element : aField) {      if (element == field) {        if (modType == ModifyType.CEILING || (modType == ModifyType.ROUND && roundUp)) {          if (field == DateUtils.SEMI_MONTH) {            if (val.get(Calendar.DATE) == 1) {              val.add(Calendar.DATE,15);            } else {              val.add(Calendar.DATE,-15);              val.add(Calendar.MONTH,1);            }          } else           if (field == Calendar.AM_PM) {            if (val.get(Calendar.HOUR_OF_DAY) == 0) {              val.add(Calendar.HOUR_OF_DAY,12);            } else {              val.add(Calendar.HOUR_OF_DAY,-12);              val.add(Calendar.DATE,1);            }          } else {            val.add(aField[0],1);          }        }        return;      }    }    int offset=0;    boolean offsetSet=false;switch (field) {case DateUtils.SEMI_MONTH:      if (aField[0] == Calendar.DATE) {        offset=val.get(Calendar.DATE) - 1;        if (offset >= 15) {          offset-=15;        }        roundUp=offset > 7;        offsetSet=true;      }    break;case Calendar.AM_PM:  if (aField[0] == Calendar.HOUR_OF_DAY) {    offset=val.get(Calendar.HOUR_OF_DAY);    if (offset >= 12) {      offset-=12;    }    roundUp=offset >= 6;    offsetSet=true;  }break;default :break;}if (!offsetSet) {final int min=val.getActualMinimum(aField[0]);final int max=val.getActualMaximum(aField[0]);offset=val.get(aField[0]) - min;roundUp=offset > ((max - min) / 2);}if (offset != 0) {val.set(aField[0],val.get(aField[0]) - offset);}}throw new IllegalArgumentException("The field " + field + " is not supported");}  }
class C{  public static Border generateBorderfromForm(final FormObject form,final float scaling){  float[] BC=form.getDictionary(PdfDictionary.MK).getFloatArray(PdfDictionary.BC);  if (BC == null && form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Screen) {    BC=form.getFloatArray(PdfDictionary.C);  }  Border newBorder=JPedalBorderFactory.createBorderStyle(form.getDictionary(PdfDictionary.BS),FormObject.generateColor(BC),Color.white,scaling);  if (form.isXFAObject()) {    final int[] t=form.getMatteBorderDetails();    newBorder=BorderFactory.createMatteBorder(t[0],t[3],t[2],t[1],Color.black);  }  return newBorder;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String toString(){  Coordinate p0=vertex.getCoordinate();  Coordinate p1=dest().getCoordinate();  return WKTWriter.toLineString(p0,p1);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tFull name of partition generator to use, e.g.:\n" + "\t\tweka.classifiers.trees.J48\n" + "\tAdditional options after the '--'.\n"+ "\t(default: weka.classifiers.trees.J48)","W",1,"-W <name of partition generator>"));  return newVector.elements();}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  altList.drawScreen(par1,par2,par3);  if (altList.getSelectedSlot() != -1 && altList.getSelectedSlot() < GuiAltList.alts.size()) {    Alt alt=GuiAltList.alts.get(altList.getSelectedSlot());    AltRenderer.drawAltBack(alt.getNameOrEmail(),(width / 2 - 125) / 2 - 32,height / 2 - 64 - 9,64,128);    AltRenderer.drawAltBody(alt.getNameOrEmail(),width - (width / 2 - 140) / 2 - 32,height / 2 - 64 - 9,64,128);  }  drawCenteredString(fontRendererObj,"Alt Manager",width / 2,4,16777215);  drawCenteredString(fontRendererObj,"Alts: " + GuiAltList.alts.size(),width / 2,14,10526880);  drawCenteredString(fontRendererObj,"premium: " + GuiAltList.premiumAlts + ", cracked: "+ GuiAltList.crackedAlts,width / 2,24,10526880);  if (errorTimer > 0) {    GL11.glDisable(GL11.GL_TEXTURE_2D);    GL11.glDisable(GL_CULL_FACE);    GL11.glEnable(GL_BLEND);    GL11.glColor4f(1.0F,0.0F,0.0F,(float)errorTimer / 16);    GL11.glBegin(GL11.GL_QUADS);{      GL11.glVertex2d(0,0);      GL11.glVertex2d(width,0);      GL11.glVertex2d(width,height);      GL11.glVertex2d(0,height);    }    GL11.glEnd();    GL11.glEnable(GL11.GL_TEXTURE_2D);    GL11.glEnable(GL_CULL_FACE);    GL11.glDisable(GL_BLEND);    errorTimer--;  }  super.drawScreen(par1,par2,par3);}  }
class C{  public boolean containsKey(K key){  return map.containsKey(key);}  }
class C{  private String percentEncodeRfc3986(String s){  String out;  try {    out=URLEncoder.encode(s,UTF8_CHARSET).replace("+","%20").replace("*","%2A").replace("%7E","~");  } catch (  UnsupportedEncodingException e) {    out=s;  }  return out;}  }
class C{  public DrawerBuilder withFooterClickable(boolean footerClickable){  this.mFooterClickable=footerClickable;  return this;}  }
class C{  public CellQuery(URL feedUrl){  super(feedUrl);}  }
class C{  public static byte[] encodeSignature(ObjectIdentifier oid,byte[] digest) throws IOException {  DerOutputStream out=new DerOutputStream();  new AlgorithmId(oid).encode(out);  out.putOctetString(digest);  DerValue result=new DerValue(DerValue.tag_Sequence,out.toByteArray());  return result.toByteArray();}  }
class C{  public int hashCode(){  return this.fp.hashCode();}  }
class C{  public void checkValid(){  execute();  if (!isValid)   throw new TopologyException(getErrorMessage(),segInt.getInteriorIntersection());}  }
class C{  public TObjectHash(){  _hashingStrategy=this;}  }
class C{  @Override protected void onClose(String peerHostName){  _linkService.onConnectionClose(peerHostName);}  }
class C{  GemFireHealthConfigJmxImpl(GemFireHealthJmxImpl health,String hostName) throws AdminException {  this.delegate=new GemFireHealthConfigImpl(hostName);  this.health=health;  this.mbeanName=new StringBuffer().append(MBEAN_NAME_PREFIX).append("GemFireHealthConfig,id=").append(MBeanUtil.makeCompliantMBeanNameProperty(health.getDistributedSystem().getId())).append(",host=").append((hostName == null ? "default" : MBeanUtil.makeCompliantMBeanNameProperty(hostName))).toString();  this.objectName=MBeanUtil.createMBean(this);}  }
class C{  private void verifyVPlexStorageProvider(StorageProvider storageProvider){  Assert.assertEquals("The VPLEX provider IP is not correct",VPLEX_SYS_IP,storageProvider.getIPAddress());  Assert.assertEquals("The VPLEX provider Port is not correct",VPLEX_SYS_PORT,storageProvider.getPortNumber().intValue());  Assert.assertEquals("The VPLEX provider use ssl is not correct",Boolean.TRUE,storageProvider.getUseSSL());  Assert.assertEquals("The VPLEX provider user is not correct",VPLEX_SYS_USER,storageProvider.getUserName());  Assert.assertEquals("The VPLEX provider password is not correct",VPLEX_SYS_PW,storageProvider.getPassword());  Assert.assertEquals("The VPLEX provider label is not correct",VPLEX_SYS_LABEL,storageProvider.getLabel());  Assert.assertEquals("The VPLEX provider version is not correct",VPLEX_SYS_VERSION,storageProvider.getVersionString());  Assert.assertEquals("The VPLEX provider IP is not correct",VPLEX_SYS_IP,storageProvider.getIPAddress());  Assert.assertEquals("The VPLEX provider compatibility status is not correct",VPLEX_SYS_COMP_STATUS.toString(),storageProvider.getCompatibilityStatus());  Assert.assertEquals("The VPLEX provider registration status is not correct",VPLEX_SYS_REG_STATUS.toString(),storageProvider.getRegistrationStatus());  StringSet managedSystemIds=storageProvider.getStorageSystems();  Assert.assertEquals("The VPLEX provider should have one managed system",1,managedSystemIds.size());  String vplexSystemId=managedSystemIds.iterator().next();  Assert.assertEquals("The VPLEX system provider managed system id is not correct",vplexSystemId,VPLEX_SYS_ID.toString());}  }
class C{  private static boolean hasUncoveredBranch(TestChromosome test,Set<Branch> uncoveredBranches){  Set<Branch> testCoveredBranches=getCoveredBranches(test);  for (  Branch b : testCoveredBranches) {    Branch negate=b.negate();    if (uncoveredBranches.contains(negate)) {      return true;    }  }  return false;}  }
class C{  protected boolean isValidFragment(final String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName) || DownloadPreferenceFragment.class.getName().equals(fragmentName);}  }
class C{  public JPEG2000PictureComponentBO(byte[] bytes) throws IOException {  sSiz=(short)((int)bytes[0] & 0xFF);  xrSiz=(short)((int)bytes[1] & 0xFF);  yrSiz=(short)((int)bytes[2] & 0xFF);}  }
class C{  public CAMatrix reset(){  for (int i=0; i < matrix.length; i++) {    matrix[i]=0;    swap[i]=0;  }  generation=0;  return this;}  }
class C{  private Builder(){  super(org.apache.nutch.storage.ProtocolStatus.SCHEMA$);}  }
class C{  public CardException(Throwable cause){  super(cause);}  }
class C{  public static UnixTime fromTimeInstant(final TimeInstant timeInstant){  return new UnixTime(timeInstant);}  }
class C{  public int cardinality(){  int cardinality=0;  int fullUnits=numberOfFullUnits();  final int bitsPerUnit=QuickBitVector.BITS_PER_UNIT;  final long[] theBits=bits;  for (int i=fullUnits; --i >= 0; ) {    long val=theBits[i];    if (val == -1L) {      cardinality+=bitsPerUnit;    } else     if (val != 0L) {      for (int j=bitsPerUnit; --j >= 0; ) {        if ((val & (1L << j)) != 0)         cardinality++;      }    }  }  for (int j=numberOfBitsInPartialUnit(); --j >= 0; ) {    if ((theBits[fullUnits] & (1L << j)) != 0)     cardinality++;  }  return cardinality;}  }
class C{  public PrefixStringMatcher(Collection prefixes){  super();  Iterator iter=prefixes.iterator();  while (iter.hasNext())   addPatternForward((String)iter.next());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void register(MailboxListenerSupport listener) throws MailboxException {  listener.addGlobalListener(this,null);}  }
class C{  public SpanClickHandler(View view,Layout layout){  this.view=view;  this.layout=layout;}  }
class C{  @Override public void onPreviewDragStart(DragStartEvent event) throws VetoDragException {  log("onPreviewDragStart: " + event,BLUE);}  }
class C{  void showInputBoxWithCancel(String message,Predicate<String> filter,Consumer<String> resultCallback){  Text text=createMessage(message);  TextField field=new TextField();  field.setMaxWidth(Math.max(text.getLayoutBounds().getWidth(),200));  field.setFont(FXGL.getUIFactory().newFont(18));  Button btnOK=FXGL.getUIFactory().newButton("OK");  field.textProperty().addListener(null);  btnOK.setDisable(true);  btnOK.setOnAction(null);  Button btnCancel=FXGL.getUIFactory().newButton("CANCEL");  btnCancel.setOnAction(null);  HBox hBox=new HBox(btnOK,btnCancel);  hBox.setAlignment(Pos.CENTER);  VBox vbox=new VBox(50,text,field,hBox);  vbox.setAlignment(Pos.CENTER);  vbox.setUserData(new Point2D(Math.max(text.getLayoutBounds().getWidth(),200),text.getLayoutBounds().getHeight() * 3 + 50 * 2));  setContent("Input",vbox);  show();}  }
class C{  public ClientMessage browseMessage(SimpleString queueName){  final boolean browseOnly=true;  return getInternalClient().receiveMessage(queueName,defaultReceiveTimeout,browseOnly);}  }
class C{  public GridTupleV(int cnt){  A.ensure(cnt > 0,"cnt > 0");  vals=new Object[cnt];}  }
class C{  public MovieSetSearchAction(boolean withTitle){  if (withTitle) {    putValue(NAME,BUNDLE.getString("movieset.search"));  }  putValue(LARGE_ICON_KEY,IconManager.SEARCH);  putValue(SMALL_ICON,IconManager.SEARCH);  putValue(SHORT_DESCRIPTION,BUNDLE.getString("movieset.search"));}  }
class C{  public Schema schema(){  return theSchema;}  }
class C{  public final boolean postAtFrontOfQueue(Runnable r){  return mExec.postAtFrontOfQueue(wrapRunnable(r));}  }
class C{  public static MinRowExpression min(String propertyOne,String propertyTwo,String... moreProperties){  return new MinRowExpression(propertyOne,propertyTwo,moreProperties);}  }
class C{  public void queryForProjectMetadataFiles(){  for (  final ImportItemBase item : getItems()) {    final ImportFolder selectedPath=(ImportFolder)item;    selectedPath.setProjectMetadataFileServerItem(null);    selectedPath.setProjectMetadataFileServerExtendedItem(null);  }  final ItemSpec[] itemSpecs=new ItemSpec[size()];  int ix=0;  for (  final String folder : getFolders()) {    final String queryPath=folder + "/" + IProjectDescription.DESCRIPTION_FILE_NAME;    itemSpecs[ix++]=new ItemSpec(queryPath,RecursionType.NONE);  }  final ItemSet[] itemResultSet=importOptions.getTFSWorkspace().getClient().getItems(itemSpecs,LatestVersionSpec.INSTANCE,DeletedState.NON_DELETED,ItemType.FILE,true);  for (int i=0; i < itemResultSet.length; i++) {    final Item[] queryResults=itemResultSet[i].getItems();    for (int j=0; j < queryResults.length; j++) {      final String dotProjectFilePath=queryResults[j].getServerItem();      final ImportFolder selectedPath=(ImportFolder)get(ServerPath.getParent(dotProjectFilePath));      selectedPath.setProjectMetadataFileServerItem(queryResults[j]);    }  }  final ExtendedItem[][] extendedItemResults=importOptions.getTFSWorkspace().getExtendedItems(itemSpecs,DeletedState.NON_DELETED,ItemType.FILE);  for (int i=0; i < extendedItemResults.length; i++) {    for (int j=0; j < extendedItemResults[i].length; j++) {      final String dotProjectFilePath=extendedItemResults[i][j].getSourceServerItem() != null ? extendedItemResults[i][j].getSourceServerItem() : extendedItemResults[i][j].getTargetServerItem();      if (dotProjectFilePath == null) {        continue;      }      final ImportFolder selectedPath=(ImportFolder)get(ServerPath.getParent(dotProjectFilePath));      if (selectedPath != null) {        selectedPath.setProjectMetadataFileServerExtendedItem(extendedItemResults[i][j]);      }    }  }}  }
class C{  protected String defaultMeanStddev(){  return "0,1.0";}  }
class C{  protected void sequence_RelationalExpression(ISerializationContext context,RelationalExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.RELATIONAL_EXPRESSION__LHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.RELATIONAL_EXPRESSION__LHS));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.RELATIONAL_EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.RELATIONAL_EXPRESSION__OP));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.RELATIONAL_EXPRESSION__RHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.RELATIONAL_EXPRESSION__RHS));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),semanticObject.getLhs());  feeder.accept(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0(),semanticObject.getOp());  feeder.accept(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0(),semanticObject.getRhs());  feeder.finish();}  }
class C{  public static void copyWritable(Writable src,Writable target) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(baos);  try {    src.write(oos);  }  finally {    oos.close();  }  byte[] bytes=baos.toByteArray();  ByteArrayInputStream bais=new ByteArrayInputStream(bytes);  ObjectInputStream ois=new ObjectInputStream(bais);  try {    target.readFields(ois);  }  finally {    ois.close();  }}  }
class C{  public void infoCRLException(final String message){  addInfo("An exception occurred during the CRL retrieval process : " + message);}  }
class C{  public boolean isMember(Principal member){  return true;}  }
class C{  public String toString(){  StringBuilder buffer=new StringBuilder(length * 8);  for (int i=0; i < length; i++) {    buffer.append(values[i]).append(" ");  }  return buffer.toString();}  }
class C{  public static DialogOption showYesNoMessage(final String message,final DialogOption defaultOption){  return MessageService.instance().showYesNoMessage(message,defaultOption);}  }
class C{  static String home(){  File jreHome=new File(System.getProperty("java.home"));  File jreParent=new File(jreHome.getParent());  String jdwpLibName="bin" + File.separator + System.mapLibraryName("jdwp");  File jdwpLib=new File(jreParent,jdwpLibName);  return jdwpLib.exists() ? jreParent.getAbsolutePath() : null;}  }
class C{  public ArrayAnalyzer(XML aXml){  xml=aXml;}  }
class C{  public void showDialog(){  view.showDialog();  view.clearInput();}  }
class C{  public boolean containsPersonalTellItem(Connector connector,String person){  boolean result=false;  for (  RaptorTabFolder folder : folders) {    for (int i=0; i < folder.getItemCount(); i++) {      if (folder.getRaptorTabItemAt(i).raptorItem instanceof ChatConsoleWindowItem) {        ChatConsoleWindowItem item=(ChatConsoleWindowItem)folder.getRaptorTabItemAt(i).raptorItem;        if (item.getController().getConnector() == connector && item.getController() instanceof PersonController) {          PersonController controller=(PersonController)item.getController();          if (StringUtils.equalsIgnoreCase(controller.getPerson(),person)) {            result=true;            break;          }        }      }    }  }  return result;}  }
class C{  public boolean isBalanceSheet(){  return m_acct.isBalanceSheet();}  }
class C{  public boolean isAlwaysFalse(){  return alwaysFalse;}  }
class C{  public void createGLEnvironment(){  GLEnvironment glEnvironment=new GLEnvironment();  glEnvironment.initWithNewContext();  setGLEnvironment(glEnvironment);}  }
class C{  private void buildAndThrowExceptionforMissingAlias(String targetAlias,boolean targetAliasIsFound,String aliasDefinitionProperty,InputStream inputStreamToClose){  String _aliasErrorMessage="Keystore alias is defined as {0}={1} but cannot be found in {2}";  if (targetAlias != null && targetAliasIsFound == false) {    this.closeInputStream(inputStreamToClose);    String aliasErrorMessage=MessageFormat.format(_aliasErrorMessage,aliasDefinitionProperty,targetAlias,this.getKeystoreLocation());    throw new ServerRuntimeException(aliasErrorMessage,new AssertionError("Alias must exist in keystore"));  }}  }
class C{  public SQLTransientException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public static List<Node> parse(Context context,HashSet<String> configNamespaces,String text,int lineNumberOffset,boolean emitDocInfo){  return parse(context,configNamespaces,text,lineNumberOffset,emitDocInfo,false);}  }
class C{  private void proposeEmptyJsniBlock(IJavaProject project,IMethod method,int invocationOffset,int indentationUnits,List<ICompletionProposal> proposals,int numCharsFilled,int numCharsToOverwrite) throws JavaModelException {  String code=createJsniBlock(project,"",indentationUnits);  int cursorPosition=(CodeFormatterUtil.createIndentString(indentationUnits + 1,project)).length() + (5 - numCharsFilled);  JavaCompletionProposal javaCompletionProposal=createProposal(method.getFlags(),code,invocationOffset,numCharsFilled,numCharsToOverwrite,"");  javaCompletionProposal.setCursorPosition(cursorPosition);  proposals.add(javaCompletionProposal);}  }
class C{  public static void hideKeyboard(Activity activity,IBinder windowToken){  InputMethodManager mgr=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  mgr.hideSoftInputFromWindow(windowToken,0);}  }
class C{  private void fireMenuKeyTyped(MenuKeyEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuKeyListener.class) {      ((MenuKeyListener)listeners[i + 1]).menuKeyTyped(event);    }  }}  }
class C{  private void downloadProfile(File file,HttpServletResponse response){  response.setContentType("application/octet-stream");  response.setHeader("Content-Disposition","attachment; filename=\"" + file.getName() + "\"");  try {    response.getOutputStream().write(Files.readAllBytes(Paths.get(file.getAbsolutePath())));  } catch (  IOException e) {    log.error("Error downloading profile: " + file.getName(),e);  }}  }
class C{  public static <T>T withPrintWriter(Writer writer,@ClosureParams(value=SimpleType.class,options="java.io.PrintWriter") Closure<T> closure) throws IOException {  return withWriter(newPrintWriter(writer),closure);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static boolean isPropertyBool(String key){  return getProperty(key).equals("Y");}  }
class C{  public CFunctionIconNode(final INaviFunction function){  Preconditions.checkNotNull(function,"IE01571: Function argument can not be null");  m_function=function;}  }
class C{  public void testUserBigram(){  for (int i=0; i < SUGGESTION_STARTS; i++)   sh.addToUserBigram(pair1);  for (int i=0; i < (SUGGESTION_STARTS - 1); i++)   sh.addToUserBigram(pair2);  assertTrue(sh.isUserBigramSuggestion("user",'b',"bigram"));  assertFalse(sh.isUserBigramSuggestion("android",'p',"platform"));}  }
class C{  public DERSet(ASN1Encodable[] a){  super(a,true);}  }
class C{  static long readTLong(DataInput in) throws IOException {  int header=in.readByte() & 0xFF;  long bits=header & 0x1F;  if ((header & 0x20) != 0) {    bits|=in.readVLong() << 5;  }  long l=BitUtil.zigZagDecode(bits);switch (header & DAY_ENCODING) {case SECOND_ENCODING:    l*=SECOND;  break;case HOUR_ENCODING:l*=HOUR;break;case DAY_ENCODING:l*=DAY;break;case 0:break;default :throw new AssertionError();}return l;}  }
class C{  public void add(X509Data x509data){  if (x509Datas == null) {    x509Datas=new ArrayList<X509Data>();  }  x509Datas.add(x509data);  this.constructionElement.appendChild(x509data.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public boolean isPrimitive(){  return false;}  }
class C{  public static boolean hasNull(Object... objects){  for (  Object object : objects) {    if (object == null)     return true;  }  return false;}  }
class C{  public boolean retainEntries(TLongObjectProcedure<V> procedure){  boolean modified=false;  long[] keys=_set;  V[] values=_values;  stopCompactingOnRemove();  try {    for (int i=keys.length; i-- > 0; ) {      if (isFull(values,i) && !procedure.execute(keys[i],unwrapNull(values[i]))) {        removeAt(i);        modified=true;      }    }  }  finally {    startCompactingOnRemove(modified);  }  return modified;}  }
class C{  protected SoftwarePattern_Impl(){  super();}  }
class C{  public static FolderDataSession createNewFolder(String sessionID,Integer bookID,AxSf axsfNew,List inter,Map documents,Integer launchDistOutRegister,Locale locale,String entidad,boolean consolidacion) throws BookException, SessionException, ValidationException {  FolderDataSession data=createFolderWithDocuments(sessionID,bookID,axsfNew,inter,documents,launchDistOutRegister,locale,entidad,consolidacion,false);  return data;}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  private boolean hasAsParent(INode child,ICompositeNode directParent){  INode parent=child;  while (parent != null) {    if (parent == directParent)     return true;    parent=parent.getParent();  }  return false;}  }
class C{  @SuppressWarnings("unchecked") public static Iterable<Entry<Transaction>> iterate(){  return null;}  }
class C{  public static void startQRCodeScanWithFragmentReceiver(Fragment receiver){  if (null != receiver) {    IntentIntegrator integrator=IntentIntegrator.forFragment(receiver);    configureIntentIntegrator(integrator,receiver.getString(R.string.scan_qr_account_message));  }}  }
class C{  public void close(){  try {    if (_cimClient != null) {      _cimClient.close();    }  } catch (  Exception e) {    s_logger.error(e.getMessage(),e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testAddress;  NamedNodeMap attributes;  Attr attribute;  String attributeName;  java.util.Collection actual=new java.util.ArrayList();  java.util.Collection htmlExpected=new java.util.ArrayList();  htmlExpected.add("title");  java.util.Collection expected=new java.util.ArrayList();  expected.add("title");  expected.add("dir");  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testAddress=addressList.item(0);  attributes=testAddress.getAttributes();  for (int indexN1006B=0; indexN1006B < attributes.getLength(); indexN1006B++) {    attribute=(Attr)attributes.item(indexN1006B);    attributeName=attribute.getNodeName();    actual.add(attributeName);  }  if (("text/html".equals(getContentType()))) {    assertEqualsIgnoreCase("htmlAttributeNames",htmlExpected,actual);  } else {    assertEqualsIgnoreCase("attributeNames",expected,actual);  }}  }
class C{  public void abortAttack(){  this.currentAttackState=getStateArray()[7];  if (this.ticker != null) {    this.ticker.interrupt();  }  if (this.sendProbeRequestsThread != null) {    this.sendProbeRequestsThread.interrupt();  }  if (this.performAttackThread != null) {    this.performAttackThread.interrupt();  }  attackAborted=true;  fireModelChanged();}  }
class C{  public void updateParticipants(Map<ContactId,ParticipantStatus> participants){synchronized (mParticipants) {    Map<ContactId,ParticipantStatus> participantsToUpdate=getParticipantsToUpdate(participants);    if (participantsToUpdate.isEmpty()) {      return;    }    for (    Map.Entry<ContactId,ParticipantStatus> participant : participantsToUpdate.entrySet()) {      mParticipants.put(participant.getKey(),participant.getValue());    }    for (    ImsSessionListener listener : getListeners()) {      ((GroupChatSessionListener)listener).onParticipantsUpdated(participantsToUpdate,mParticipants);    }  }}  }
class C{  public DateTime withMillisOfDay(int millis){  return withMillis(getChronology().millisOfDay().set(getMillis(),millis));}  }
class C{  public static CryptoFileType detectFileType(InputStream is) throws IOException {  byte[] contents=ReadUtil.readFully(is);  EncryptionType pkcs8EncType=Pkcs8Util.getEncryptionType(new ByteArrayInputStream(contents));  if (pkcs8EncType != null) {    if (pkcs8EncType == ENCRYPTED) {      return ENC_PKCS8_PVK;    } else     if (pkcs8EncType == UNENCRYPTED) {      return UNENC_PKCS8_PVK;    }  }  EncryptionType msPvkEncType=MsPvkUtil.getEncryptionType(new ByteArrayInputStream(contents));  if (msPvkEncType != null) {    if (msPvkEncType == ENCRYPTED) {      return ENC_MS_PVK;    } else     if (msPvkEncType == UNENCRYPTED) {      return UNENC_MS_PVK;    }  }  EncryptionType openSslPvkEncType=OpenSslPvkUtil.getEncryptionType(new ByteArrayInputStream(contents));  if (openSslPvkEncType != null) {    if (openSslPvkEncType == ENCRYPTED) {      return ENC_OPENSSL_PVK;    } else     if (openSslPvkEncType == UNENCRYPTED) {      return UNENC_OPENSSL_PVK;    }  }  try {    OpenSslPubUtil.load(new ByteArrayInputStream(contents));    return OPENSSL_PUB;  } catch (  Exception ex) {  }catch (  OutOfMemoryError ex) {  }  try {    if (X509CertUtil.loadCertificates(new ByteArrayInputStream(contents)).length > 0) {      return CERT;    }  } catch (  Exception ex) {  }  try {    X509CertUtil.loadCRL(new ByteArrayInputStream(contents));    return CRL;  } catch (  Exception ex) {  }  CsrType csrType=detectCsrType(contents);  if (csrType != null) {    return csrType.getCryptoFileType();  }  KeyStoreType keyStoreType=detectKeyStoreType(new ByteArrayInputStream(contents));  if (keyStoreType != null) {    return keyStoreType.getCryptoFileType();  }  return UNKNOWN;}  }
class C{  public SymbolTableEntryInternal steFor_self(){  return getSymbolTableEntryInternal("self",true);}  }
class C{  @Override public void write(char cbuf[],int off,int len) throws IOException {  out.write(cbuf,off,len);}  }
class C{  public boolean isVerb(){  return (type != null) && type.isVerb();}  }
class C{  void advance(double realDeltaTime){  boolean isAtRest=isAtRest();  if (isAtRest && mWasAtRest) {    return;  }  double adjustedDeltaTime=realDeltaTime;  if (realDeltaTime > MAX_DELTA_TIME_SEC) {    adjustedDeltaTime=MAX_DELTA_TIME_SEC;  }  mTimeAccumulator+=adjustedDeltaTime;  double tension=mSpringConfig.tension;  double friction=mSpringConfig.friction;  double position=mCurrentState.position;  double velocity=mCurrentState.velocity;  double tempPosition=mTempState.position;  double tempVelocity=mTempState.velocity;  double aVelocity, aAcceleration;  double bVelocity, bAcceleration;  double cVelocity, cAcceleration;  double dVelocity, dAcceleration;  double dxdt, dvdt;  while (mTimeAccumulator >= SOLVER_TIMESTEP_SEC) {    mTimeAccumulator-=SOLVER_TIMESTEP_SEC;    if (mTimeAccumulator < SOLVER_TIMESTEP_SEC) {      mPreviousState.position=position;      mPreviousState.velocity=velocity;    }    aVelocity=velocity;    aAcceleration=(tension * (mEndValue - tempPosition)) - friction * velocity;    tempPosition=position + aVelocity * SOLVER_TIMESTEP_SEC * 0.5;    tempVelocity=velocity + aAcceleration * SOLVER_TIMESTEP_SEC * 0.5;    bVelocity=tempVelocity;    bAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;    tempPosition=position + bVelocity * SOLVER_TIMESTEP_SEC * 0.5;    tempVelocity=velocity + bAcceleration * SOLVER_TIMESTEP_SEC * 0.5;    cVelocity=tempVelocity;    cAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;    tempPosition=position + cVelocity * SOLVER_TIMESTEP_SEC;    tempVelocity=velocity + cAcceleration * SOLVER_TIMESTEP_SEC;    dVelocity=tempVelocity;    dAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;    dxdt=1.0 / 6.0 * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity);    dvdt=1.0 / 6.0 * (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration);    position+=dxdt * SOLVER_TIMESTEP_SEC;    velocity+=dvdt * SOLVER_TIMESTEP_SEC;  }  mTempState.position=tempPosition;  mTempState.velocity=tempVelocity;  mCurrentState.position=position;  mCurrentState.velocity=velocity;  if (mTimeAccumulator > 0) {    interpolate(mTimeAccumulator / SOLVER_TIMESTEP_SEC);  }  if (isAtRest() || (mOvershootClampingEnabled && isOvershooting())) {    mStartValue=mEndValue;    mCurrentState.position=mEndValue;    setVelocity(0);    isAtRest=true;  }  boolean notifyActivate=false;  if (mWasAtRest) {    mWasAtRest=false;    notifyActivate=true;  }  boolean notifyAtRest=false;  if (isAtRest) {    mWasAtRest=true;    notifyAtRest=true;  }  for (  SpringListener listener : mListeners) {    if (notifyActivate) {      listener.onSpringActivate(this);    }    listener.onSpringUpdate(this);    if (notifyAtRest) {      listener.onSpringAtRest(this);    }  }}  }
class C{  public Media createMediaRecorder(String path) throws IOException {  return createMediaRecorder(path,getAvailableRecordingMimeTypes()[0]);}  }
class C{  public ByteBuffer putLong(long value){  int newPosition=position + 8;  putLong(position,value);  position=newPosition;  return this;}  }
class C{  public void reset(){}  }
class C{  public PermutationGenerator(int a){  if ((a < 0)) {    throw new IllegalArgumentException();  }  this.numObjects=a;  choiceLocal=new int[a];  for (int i=0; i < a; i++) {    choiceLocal[i]=i;  }  begun=false;}  }
class C{  public T size(String value){  return attr("size",value);}  }
class C{  private int handleCC(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index + 2,1,"I","E","H") && !contains(value,index + 2,2,"HU")) {    if ((index == 1 && charAt(value,index - 1) == 'A') || contains(value,index - 1,5,"UCCEE","UCCES")) {      result.append("KS");    } else {      result.append('X');    }    index+=3;  } else {    result.append('K');    index+=2;  }  return index;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGenPackage.FEATURE_TYPE__DEPRECATED:    setDeprecated((Boolean)newValue);  return;case SGenPackage.FEATURE_TYPE__COMMENT:setComment((String)newValue);return;case SGenPackage.FEATURE_TYPE__PARAMETERS:getParameters().clear();getParameters().addAll((Collection<? extends FeatureParameter>)newValue);return;case SGenPackage.FEATURE_TYPE__OPTIONAL:setOptional((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public PlannerProcess(DialogueState initState){  this.initState=initState;  Settings settings=system.getSettings();  long timeout=Settings.maxSamplingTime * 2;  timeout=(initState.hasChanceNode(settings.userSpeech)) ? timeout / 5 : timeout;  service.schedule(null,timeout,TimeUnit.MILLISECONDS);  try {    UtilityTable evalActions=getQValues(initState,settings.horizon);    Assignment bestAction=evalActions.getBest().getKey();    if (evalActions.getUtil(bestAction) < 0.001) {      bestAction=Assignment.createDefault(bestAction.getVariables());    }    initState.removeNodes(initState.getUtilityNodeIds());    Set<String> actionVars=new HashSet<String>(initState.getActionNodeIds());    initState.removeNodes(actionVars);    initState.addToState(bestAction.removePrimes());    isTerminated=true;  } catch (  RuntimeException e) {    log.warning("could not perform planning, aborting action selection: " + e);    e.printStackTrace();  }}  }
class C{  public boolean containsAll(Collection c){synchronized (children) {    Iterator i=c.iterator();    while (i.hasNext())     if (!contains(i.next()))     return false;    return true;  }}  }
class C{  public void size(int[] size){  size[0]=cells.startRow();  size[1]=cells.startColumn();  size[2]=cells.endRow();  size[3]=cells.endColumn();}  }
class C{  public Quadtree(){  root=new Root();}  }
class C{  private BaseEntity transformNbtData(BaseEntity state){  CompoundTag tag=state.getNbtData();  if (tag != null) {    boolean hasTilePosition=tag.containsKey("TileX") && tag.containsKey("TileY") && tag.containsKey("TileZ");    boolean hasDirection=tag.containsKey("Direction");    boolean hasLegacyDirection=tag.containsKey("Dir");    if (hasTilePosition) {      Vector tilePosition=new Vector(tag.asInt("TileX"),tag.asInt("TileY"),tag.asInt("TileZ"));      Vector newTilePosition=transform.apply(tilePosition.subtract(from)).add(to);      CompoundTagBuilder builder=tag.createBuilder().putInt("TileX",newTilePosition.getBlockX()).putInt("TileY",newTilePosition.getBlockY()).putInt("TileZ",newTilePosition.getBlockZ());      if (hasDirection || hasLegacyDirection) {        int d=hasDirection ? tag.asInt("Direction") : MCDirections.fromLegacyHanging((byte)tag.asInt("Dir"));        Direction direction=MCDirections.fromHanging(d);        if (direction != null) {          Vector vector=new Vector(transform.apply(direction.toVector())).subtract(transform.apply(Vector.ZERO)).normalize();          Direction newDirection=Direction.findClosest(vector,Flag.CARDINAL);          builder.putByte("Direction",(byte)MCDirections.toHanging(newDirection));          builder.putByte("Dir",MCDirections.toLegacyHanging(MCDirections.toHanging(newDirection)));        }      }      return new BaseEntity(state.getTypeId(),builder.build());    }  }  return state;}  }
class C{  public Object evaluate(final String script,final String sourceName){  notNull(script);  try {    return getContext().evaluateString(scope,script,sourceName,1,null);  } catch (  final RhinoException e) {    final String message=RhinoUtils.createExceptionMessage(e);    LOG.error("JavaScriptException occured: {}",message);    throw new WroRuntimeException(message);  } finally {    if (Context.getCurrentContext() != null) {      Context.exit();    }  }}  }
class C{  public TradePosition findTradePositionById(final Integer id) throws PersistentModelException {  TradePosition instance=m_tradePositionHome.findById(id);  if (null == instance)   throw new PersistentModelException("TradePosition not found for id: " + id);  return instance;}  }
class C{  public static Integer toInteger(String value,Integer defValue){  try {    return Integer.parseInt(value);  } catch (  NumberFormatException e) {    return defValue;  }}  }
class C{  private void fillScannedResult(BlocksChunkHolder blocksChunkHolder) throws FilterUnsupportedException {  scannedResult.reset();  if (isMinMaxEnabled) {    BitSet bitSet=this.filterExecuter.isScanRequired(blocksChunkHolder.getDataBlock().getColumnsMaxValue(),blocksChunkHolder.getDataBlock().getColumnsMinValue());    if (bitSet.isEmpty()) {      scannedResult.setNumberOfRows(0);      scannedResult.setIndexes(new int[0]);      return;    }  }  BitSet bitSet=this.filterExecuter.applyFilter(blocksChunkHolder);  if (bitSet.isEmpty()) {    scannedResult.setNumberOfRows(0);    scannedResult.setIndexes(new int[0]);    return;  }  int[] indexes=new int[bitSet.cardinality()];  int index=0;  for (int i=bitSet.nextSetBit(0); i >= 0; i=bitSet.nextSetBit(i + 1)) {    indexes[index++]=i;  }  FileHolder fileReader=blocksChunkHolder.getFileReader();  int[] allSelectedDimensionBlocksIndexes=blockExecutionInfo.getAllSelectedDimensionBlocksIndexes();  DimensionColumnDataChunk[] dimensionColumnDataChunk=new DimensionColumnDataChunk[blockExecutionInfo.getTotalNumberDimensionBlock()];  for (int i=0; i < allSelectedDimensionBlocksIndexes.length; i++) {    if (null == blocksChunkHolder.getDimensionDataChunk()[allSelectedDimensionBlocksIndexes[i]]) {      dimensionColumnDataChunk[allSelectedDimensionBlocksIndexes[i]]=blocksChunkHolder.getDataBlock().getDimensionChunk(fileReader,allSelectedDimensionBlocksIndexes[i]);    } else {      dimensionColumnDataChunk[allSelectedDimensionBlocksIndexes[i]]=blocksChunkHolder.getDimensionDataChunk()[allSelectedDimensionBlocksIndexes[i]];    }  }  MeasureColumnDataChunk[] measureColumnDataChunk=new MeasureColumnDataChunk[blockExecutionInfo.getTotalNumberOfMeasureBlock()];  int[] allSelectedMeasureBlocksIndexes=blockExecutionInfo.getAllSelectedMeasureBlocksIndexes();  for (int i=0; i < allSelectedMeasureBlocksIndexes.length; i++) {    if (null == blocksChunkHolder.getMeasureDataChunk()[allSelectedMeasureBlocksIndexes[i]]) {      measureColumnDataChunk[allSelectedMeasureBlocksIndexes[i]]=blocksChunkHolder.getDataBlock().getMeasureChunk(fileReader,allSelectedMeasureBlocksIndexes[i]);    } else {      measureColumnDataChunk[allSelectedMeasureBlocksIndexes[i]]=blocksChunkHolder.getMeasureDataChunk()[allSelectedMeasureBlocksIndexes[i]];    }  }  scannedResult.setDimensionChunks(dimensionColumnDataChunk);  scannedResult.setIndexes(indexes);  scannedResult.setMeasureChunks(measureColumnDataChunk);  scannedResult.setNumberOfRows(indexes.length);}  }
class C{  public static Stopwatch createUnstarted(Ticker ticker){  return new Stopwatch(ticker);}  }
class C{  public static String format(Float nr){  if (nr == null) {    return PLACEHOLDER_NULL;  }  return String.format(FORMAT_NUMBER,nr);}  }
class C{  public T bgcolor(String value){  return attr("bgcolor",value);}  }
class C{  public MediaMaskFilter(int mediaMask,String technique,String name,boolean matchPasses){  super(matchPasses);  this.mediaMask=mediaMask;  this.technique=technique;  this.name=name;}  }
class C{  public void beginAdding(GL10 gl){  checkState(STATE_INITIALIZED,STATE_ADDING);  mLabels.clear();  mU=0;  mV=0;  mLineHeight=0;  Bitmap.Config config=mFullColor ? Bitmap.Config.ARGB_4444 : Bitmap.Config.ALPHA_8;  mBitmap=Bitmap.createBitmap(mStrikeWidth,mStrikeHeight,config);  mCanvas=new Canvas(mBitmap);  mBitmap.eraseColor(0);}  }
class C{  public static void main(String[] args){  System.setProperty("spring.config.name","registration-server");  SpringApplication.run(RegistrationServer.class,args);}  }
class C{  public static boolean testRayCircle(double originX,double originY,double dirX,double dirY,double centerX,double centerY,double radiusSquared){  double Lx=centerX - originX;  double Ly=centerY - originY;  double tca=Lx * dirX + Ly * dirY;  double d2=Lx * Lx + Ly * Ly - tca * tca;  if (d2 > radiusSquared)   return false;  double thc=Math.sqrt(radiusSquared - d2);  double t0=tca - thc;  double t1=tca + thc;  return t0 < t1 && t1 >= 0.0;}  }
class C{  protected Object writeReplace() throws java.io.ObjectStreamException {  return new StringCounterSnapshot(getName(),getUnits(),getVariability(),getFlags(),stringValue());}  }
class C{  public Book(){  mPages=new Vector();}  }
class C{  private void resetNetworkVisited(){  for (  Node node : this.network.getNodes().values()) {    DijkstraNodeData data=getData(node);    data.resetVisited();  }}  }
class C{  public BERSet(ASN1Encodable[] a){  super(a,false);}  }
class C{  public int catchType(int nth){  ExceptionTableEntry e=(ExceptionTableEntry)entries.get(nth);  return e.catchType;}  }
class C{  @Override public MessageConsumer createConsumer(final Destination destination,final String messageSelector,final boolean noLocal) throws JMSException {  lock();  try {    Session session=getSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createConsumer " + session + " dest="+ destination+ " messageSelector="+ messageSelector+ " noLocal="+ noLocal);    }    MessageConsumer result=session.createConsumer(destination,messageSelector,noLocal);    result=new ActiveMQRAMessageConsumer(result,this);    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdConsumer " + session + " consumer="+ result);    }    addConsumer(result);    return result;  }  finally {    unlock();  }}  }
class C{  public static double optimizeWindowSize(double delta,double maxDelta,double currentLevel,double targetLevel){  if (delta <= 0.0) {    throw new IllegalArgumentException("random walk window size cannot be negative: " + delta);  }  double ratio=currentLevel / targetLevel;  if (ratio > 2.0)   ratio=2.0;  if (ratio < 0.5)   ratio=0.5;  double newDelta=delta * ratio;  if (newDelta > maxDelta)   newDelta=maxDelta;  return newDelta;}  }
class C{  public String toString(cp_info constant_pool[]){  return Integer.toString((int)bytes);}  }
class C{  private void processSymbols(final RoundEnvironment env){  final List<? extends Element> symbols=sortElements(env,symbol.class);  for (  final Element e : symbols) {    final StringBuilder sb=new StringBuilder();    final symbol symbol=e.getAnnotation(symbol.class);    validator validator=e.getAnnotation(validator.class);    serializer serializer=e.getAnnotation(serializer.class);    TypeMirror sup=((TypeElement)e).getSuperclass();    while (validator == null && sup != null) {      if (sup.getKind().equals(TypeKind.NONE)) {        sup=null;        continue;      }      final TypeElement te=(TypeElement)processingEnv.getTypeUtils().asElement(sup);      validator=te.getAnnotation(validator.class);      sup=te.getSuperclass();    }    sup=((TypeElement)e).getSuperclass();    while (serializer == null && sup != null) {      if (sup.getKind().equals(TypeKind.NONE)) {        sup=null;        continue;      }      final TypeElement te=(TypeElement)processingEnv.getTypeUtils().asElement(sup);      serializer=te.getAnnotation(serializer.class);      sup=te.getSuperclass();    }    TypeMirror type_validator=null;    try {      if (validator != null) {        validator.value();      }    } catch (    final MirroredTypeException e1) {      type_validator=e1.getTypeMirror();    }catch (    final MirroredTypesException e1) {      type_validator=e1.getTypeMirrors().get(0);    }    TypeMirror type_serializer=null;    try {      if (serializer != null) {        serializer.value();      }    } catch (    final MirroredTypeException e1) {      type_serializer=e1.getTypeMirror();    }catch (    final MirroredTypesException e1) {      type_serializer=e1.getTypeMirrors().get(0);    }    sb.append(SYMBOL_PREFIX);    sb.append(type_validator == null ? "" : rawNameOf(type_validator)).append(SEP);    sb.append(type_serializer == null ? "" : rawNameOf(type_serializer)).append(SEP);    sb.append(symbol.kind()).append(SEP);    sb.append(rawNameOf(e)).append(SEP);    sb.append(symbol.remote_context()).append(SEP);    sb.append(symbol.with_args()).append(SEP);    sb.append(symbol.with_scope()).append(SEP);    sb.append(symbol.with_sequence()).append(SEP);    sb.append(symbol.unique_in_context()).append(SEP);    sb.append(symbol.unique_name()).append(SEP);    final inside inside=e.getAnnotation(inside.class);    if (inside != null) {      final String[] parentSymbols=inside.symbols();      for (int i=0; i < parentSymbols.length; i++) {        if (i > 0) {          sb.append(',');        }        sb.append(parentSymbols[i]);      }      sb.append(SEP);      final int[] parentKinds=inside.kinds();      for (int i=0; i < parentKinds.length; i++) {        if (i > 0) {          sb.append(',');        }        sb.append(parentKinds[i]);      }      sb.append(SEP);    } else {      sb.append(SEP).append(SEP);    }    final facets facets=e.getAnnotation(facets.class);    if (facets == null) {      sb.append('0').append(SEP).append(SEP).append(SEP);    } else {      sb.append(facets.value().length).append(SEP);      sb.append(facetsToString(facets,e)).append(SEP);      sb.append(facets.omissible()).append(SEP);    }    for (    final String s : symbol.name()) {      sb.append(s).append(SEP);    }    sb.setLength(sb.length() - 1);    final doc doc=e.getAnnotation(doc.class);    if (doc == null) {      emitWarning("GAML: symbol '" + symbol.name()[0] + "' is not documented",e);    }    gp.put(sb.toString(),"");  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    return ((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).getPreferredResolutionOptions();  }  return null;}  }
class C{  private void findPrefixInChildren(String prefix,ZooKeeper zookeeper,String dir) throws KeeperException, InterruptedException {  List<String> names=zookeeper.getChildren(dir,false);  for (  String name : names) {    if (name.startsWith(prefix)) {      id=name;      if (LOG.isDebugEnabled()) {        LOG.debug("Found id created last time: " + id);      }      break;    }  }  if (id == null) {    id=zookeeper.create(dir + "/" + prefix,data,getAcl(),EPHEMERAL_SEQUENTIAL);    if (LOG.isDebugEnabled()) {      LOG.debug("Created id: " + id);    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.TRY_STATEMENT__BLOCK:    setBlock((Block)newValue);  return;case N4JSPackage.TRY_STATEMENT__CATCH:setCatch((CatchBlock)newValue);return;case N4JSPackage.TRY_STATEMENT__FINALLY:setFinally((FinallyBlock)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void indent(int n) throws SAXException {}  }
class C{  private void stopReconcilingPositions(){  removedPositions.clear();  removedPositionCount=0;  addedPositions.clear();}  }
class C{  public void addArc(String sParent,ArrayList<Integer> nodes) throws Exception {  int nParent=getNode(sParent);  if (m_bNeedsUndoAction) {    addUndoAction(new AddArcAction(nParent,nodes));  }  boolean bNeedsUndoAction=m_bNeedsUndoAction;  m_bNeedsUndoAction=false;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    addArc(nParent,nNode);  }  m_bNeedsUndoAction=bNeedsUndoAction;}  }
class C{  public EntityResult updateEntity(String guid,Referenceable entity) throws AtlasServiceException {  String entityJson=InstanceSerialization.toJson(entity,true);  LOG.debug("Updating entity id {} with {}",guid,entityJson);  JSONObject response=callAPI(API.UPDATE_ENTITY_PARTIAL,entityJson,guid);  return extractEntityResult(response);}  }
class C{  public static void sort(byte[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){  StringBuilder tmp=new StringBuilder(count);  int submode=initialSubmode;  int idx=0;  while (true) {    char ch=msg.charAt(startpos + idx);switch (submode) {case SUBMODE_ALPHA:      if (isAlphaUpper(ch)) {        if (ch == ' ') {          tmp.append((char)26);        } else {          tmp.append((char)(ch - 65));        }      } else {        if (isAlphaLower(ch)) {          submode=SUBMODE_LOWER;          tmp.append((char)27);          continue;        } else         if (isMixed(ch)) {          submode=SUBMODE_MIXED;          tmp.append((char)28);          continue;        } else {          tmp.append((char)29);          tmp.append((char)PUNCTUATION[ch]);          break;        }      }    break;case SUBMODE_LOWER:  if (isAlphaLower(ch)) {    if (ch == ' ') {      tmp.append((char)26);    } else {      tmp.append((char)(ch - 97));    }  } else {    if (isAlphaUpper(ch)) {      tmp.append((char)27);      tmp.append((char)(ch - 65));      break;    } else     if (isMixed(ch)) {      submode=SUBMODE_MIXED;      tmp.append((char)28);      continue;    } else {      tmp.append((char)29);      tmp.append((char)PUNCTUATION[ch]);      break;    }  }break;case SUBMODE_MIXED:if (isMixed(ch)) {tmp.append((char)MIXED[ch]);} else {if (isAlphaUpper(ch)) {  submode=SUBMODE_ALPHA;  tmp.append((char)28);  continue;} else if (isAlphaLower(ch)) {  submode=SUBMODE_LOWER;  tmp.append((char)27);  continue;} else {  if (startpos + idx + 1 < count) {    char next=msg.charAt(startpos + idx + 1);    if (isPunctuation(next)) {      submode=SUBMODE_PUNCTUATION;      tmp.append((char)25);      continue;    }  }  tmp.append((char)29);  tmp.append((char)PUNCTUATION[ch]);}}break;default :if (isPunctuation(ch)) {tmp.append((char)PUNCTUATION[ch]);} else {submode=SUBMODE_ALPHA;tmp.append((char)29);continue;}}idx++;if (idx >= count) {break;}}char h=0;int len=tmp.length();for (int i=0; i < len; i++) {boolean odd=(i % 2) != 0;if (odd) {h=(char)((h * 30) + tmp.charAt(i));sb.append(h);} else {h=tmp.charAt(i);}}if ((len % 2) != 0) {sb.append((char)((h * 30) + 29));}return submode;}  }
class C{  public TestNanoSparqlServerWithProxyIndexManager2(){  this(null,getTemporaryJournal(),TestMode.triples);}  }
class C{  public BuildingBlock(String[] data){  rawData=new Vector<String>();  rawData=makeVector(data);}  }
class C{  private void updateDefineConditionPanel(final JCriteriumTreeNode node){  final Component component=node.getCriterium().getCriteriumPanel();  m_defineConditionPanel.removeAll();  m_defineConditionPanel.setBorder(null);  if (component == null) {    final JPanel defaultPanel=new JPanel(new BorderLayout());    defaultPanel.setBorder(new TitledBorder("Define Condition"));    m_defineConditionPanel.add(defaultPanel,BorderLayout.CENTER);  } else {    m_defineConditionPanel.add(component);  }  m_defineConditionPanel.updateUI();}  }
class C{  public void kill() throws IOException {  if (pidFilePath != null) {    final String killCmd=String.format("[ -r %1$s ] && kill $(<%1$s)",pidFilePath);    final Exec exec=docker.createExec(container,true,"/bin/bash","-c",killCmd);    docker.startExec(exec.getId(),null);  }}  }
class C{  public boolean advance() throws IOException {  if (atEnd()) {    return false;  }  int curBid=currentLocation.getBlockIndex();  long curRid=currentLocation.getRecordIndex();  long entriesInBlock=reader.getBlockEntryCount(curBid);  if (curRid + 1 >= entriesInBlock) {    if (endLocation.compareTo(curBid + 1,0) <= 0) {      parkCursorAtEnd();    } else {      initBlock(curBid + 1);    }  } else {    inBlockAdvance(1);  }  return true;}  }
class C{  public void rotateY(float angle){  rotate(angle,0,1,0);}  }
class C{  private boolean evaluateLogic(Collection first,Collection second,String logicOperator){  if (first == null || first.size() == 0 || second == null || second.size() == 0) {    return false;  }  Object elem1=first.iterator().next();  Object elem2=second.iterator().next();  if (elem1 instanceof Number && elem2 instanceof Number) {    double d1=((Number)elem1).doubleValue();    double d2=((Number)elem2).doubleValue();    if ("=".equals(logicOperator)) {      return d1 == d2;    } else     if ("<".equals(logicOperator)) {      return d1 < d2;    } else     if (">".equals(logicOperator)) {      return d1 > d2;    } else     if ("<=".equals(logicOperator)) {      return d1 <= d2;    } else     if (">=".equals(logicOperator)) {      return d1 >= d2;    }  } else {    String s1=toText(elem1);    String s2=toText(elem2);    int result=s1.compareTo(s2);    if ("=".equals(logicOperator)) {      return result == 0;    } else     if ("<".equals(logicOperator)) {      return result < 0;    } else     if (">".equals(logicOperator)) {      return result > 0;    } else     if ("<=".equals(logicOperator)) {      return result <= 0;    } else     if (">=".equals(logicOperator)) {      return result >= 0;    }  }  return false;}  }
class C{  public void openBoard(){  if (mBoard != null) {    mBoard.open(true);  }}  }
class C{  public boolean isDirty(){  return dirty;}  }
class C{  public boolean isTitle(){  return title;}  }
class C{  public void swipeStarted(long time,ScrollDirection direction,float x,float y){  if (direction != ScrollDirection.DOWN)   return;  setWarpState(false,false);  startAnimation(time,OverviewAnimationType.ENTER_STACK);  final int index=mTabModel.index();  if (mCurrentMode == Orientation.PORTRAIT) {    mScrollOffset=-index * mSpacing;  } else {    mScrollOffset=-index * mSpacing + x - LANDSCAPE_SWIPE_DRAG_TAB_OFFSET_DP;    mScrollOffset=MathUtils.clamp(mScrollOffset,getMinScroll(false),getMaxScroll(false));  }  setScrollTarget(mScrollOffset,true);  mEvenOutProgress=1.f;  mSwipeUnboundScrollOffset=mScrollOffset;  mSwipeBoundedScrollOffset=mScrollOffset;  mSwipeIsCancelable=false;  mSwipeCanScroll=false;  mInSwipe=true;}  }
class C{  public void testLoadClassOnWarWithContextXmlFile() throws Exception {  File artifactDir=new File(getTestData().targetDir).getParentFile();  Copy copyTask=(Copy)new AntUtils().createProject().createTask("copy");  copyTask.setTofile(new File(artifactDir,"tomcat-context.war"));  copyTask.setFile(new File(getTestData().getTestDataFileFor("tomcatcontext-war")));  copyTask.execute();  String simpleJar=System.getProperty("cargo.testdata.simple-jar");  if (simpleJar == null) {    throw new CargoException("Please set property [cargo.testdata.simple-jar] to a valid " + "location of simple-jar");  }  WAR war=(WAR)new DefaultDeployableFactory().createDeployable(getContainer().getId(),new File(artifactDir,"tomcat-context.war").getPath(),DeployableType.WAR);  war.setExtraClasspath(new String[]{simpleJar});  getLocalContainer().getConfiguration().addDeployable(war);  getLocalContainer().getConfiguration().setProperty(TomcatPropertySet.COPY_WARS,"false");  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/tomcat-context/");  getLocalContainer().start();  PingUtils.assertPingTrue("tomcat context war not started","Test value is [test value]",warPingURL,getLogger());  getLocalContainer().stop();  PingUtils.assertPingFalse("tomcat context war not stopped",warPingURL,getLogger());}  }
class C{  private void crc32File(ZipEntry e,File f) throws IOException {  CRC32OutputStream os=new CRC32OutputStream();  copy(f,os);  if (os.n != f.length()) {    throw new JarException(formatMsg("error.incorrect.length",f.getPath()));  }  os.updateEntry(e);}  }
class C{  private boolean isGenerateForVendor(int C_BPartner_ID){  if (p_C_BP_Group_ID <= 0)   return true;  if (m_excludedVendors.contains(C_BPartner_ID))   return false;  boolean match=new Query(getCtx(),MBPartner.Table_Name,"C_BPartner_ID=? AND C_BP_Group_ID=?",get_TrxName()).setParameters(new Object[]{C_BPartner_ID,p_C_BP_Group_ID}).match();  if (!match) {    m_excludedVendors.add(C_BPartner_ID);  }  return match;}  }
class C{  public boolean contains(String jid){  if (jid == null) {    return false;  }synchronized (entries) {    for (Iterator<String> i=entries.iterator(); i.hasNext(); ) {      String entry=i.next();      if (entry.toLowerCase().equals(jid.toLowerCase())) {        return true;      }    }  }  return false;}  }
class C{  public MessageChannel createMessageChannel(SIPRequest request,MessageProcessor mp,Hop nextHop) throws IOException {  SIPTransaction returnChannel;  Host targetHost=new Host();  targetHost.setHostname(nextHop.getHost());  HostPort targetHostPort=new HostPort();  targetHostPort.setHost(targetHost);  targetHostPort.setPort(nextHop.getPort());  MessageChannel mc=mp.createMessageChannel(targetHostPort);  if (mc == null)   return null;  returnChannel=createClientTransaction(request,mc);  ((SIPClientTransaction)returnChannel).setViaPort(nextHop.getPort());  ((SIPClientTransaction)returnChannel).setViaHost(nextHop.getHost());  addTransactionHash(returnChannel);  return returnChannel;}  }
class C{  public NATURAL_LEFT_OUTER_JOIN NATURAL_LEFT_OUTER_JOIN(String tableToJoin){  return new NATURAL_LEFT_OUTER_JOIN(this,tableToJoin);}  }
class C{  private int readNodeAddress(){  int addr=-1;  try {    addr=Integer.parseInt(nodeAddrField.getText());  } catch (  Exception e) {    statusText1.setText(rb.getString("Error5"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return -1;  }  if ((addr < 0) || (addr > 127)) {    statusText1.setText(rb.getString("Error6"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return -1;  }  return (addr);}  }
class C{  public boolean isKnownPackage(String packageName){  return KNOWN_PACKAGES.contains(PerlPackageUtil.getCanonicalPackageName(packageName));}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 2:    return true;default :  break;}return false;}  }
class C{  private void parseAndStoreReader(BufferedReader in) throws IOException {  while (true) {    String line=in.readLine();    if (line == null) {      return;    }    if (line.length() > 0) {      char firstChar=line.charAt(0);      if (firstChar != '#' && firstChar != '!') {        while (continueLine(line)) {          String nextLine=in.readLine();          if (nextLine == null) {            nextLine="";          }          String loppedLine=line.substring(0,line.length() - 1);          int startIndex=0;          for (; startIndex < nextLine.length(); startIndex++) {            if (whiteSpaceChars.indexOf(nextLine.charAt(startIndex)) == -1) {              break;            }          }          nextLine=nextLine.substring(startIndex,nextLine.length());          line=loppedLine + nextLine;        }        int len=line.length();        int keyStart=0;        for (; keyStart < len; keyStart++) {          if (whiteSpaceChars.indexOf(line.charAt(keyStart)) == -1) {            break;          }        }        if (keyStart == len) {          continue;        }        int separatorIndex=keyStart;        for (; separatorIndex < len; separatorIndex++) {          char currentChar=line.charAt(separatorIndex);          if (currentChar == '\\') {            separatorIndex++;          } else           if (keyValueSeparators.indexOf(currentChar) != -1) {            break;          }        }        int valueIndex=separatorIndex;        for (; valueIndex < len; valueIndex++) {          if (whiteSpaceChars.indexOf(line.charAt(valueIndex)) == -1) {            break;          }        }        if (valueIndex < len) {          if (strictKeyValueSeparators.indexOf(line.charAt(valueIndex)) != -1) {            valueIndex++;          }        }        while (valueIndex < len) {          if (whiteSpaceChars.indexOf(line.charAt(valueIndex)) == -1) {            break;          }          valueIndex++;        }        String key=line.substring(keyStart,separatorIndex);        String value=(separatorIndex < len) ? line.substring(valueIndex,len) : "";        key=loadConvert(key);        value=loadConvert(value);        try {          MimeType mime=new MimeType(value);          if ("text".equals(mime.getPrimaryType())) {            String charset=mime.getParameter("charset");            if (DataTransferer.doesSubtypeSupportCharset(mime.getSubType(),charset)) {              DataTransferer transferer=DataTransferer.getInstance();              if (transferer != null) {                transferer.registerTextFlavorProperties(key,charset,mime.getParameter("eoln"),mime.getParameter("terminators"));              }            }            mime.removeParameter("charset");            mime.removeParameter("class");            mime.removeParameter("eoln");            mime.removeParameter("terminators");            value=mime.toString();          }        } catch (        MimeTypeParseException e) {          e.printStackTrace();          continue;        }        DataFlavor flavor;        try {          flavor=new DataFlavor(value);        } catch (        Exception e) {          try {            flavor=new DataFlavor(value,null);          } catch (          Exception ee) {            ee.printStackTrace();            continue;          }        }        final LinkedHashSet<DataFlavor> dfs=new LinkedHashSet<>();        dfs.add(flavor);        if ("text".equals(flavor.getPrimaryType())) {          dfs.addAll(convertMimeTypeToDataFlavors(value));          store(flavor.mimeType.getBaseType(),key,getTextTypeToNative());        }        for (        DataFlavor df : dfs) {          store(df,key,getFlavorToNative());          store(key,df,getNativeToFlavor());        }      }    }  }}  }
class C{  private void cleanupDiscovery(StorageSystem system){  try {    system.setReachableStatus(false);    _dbClient.persistObject(system);  } catch (  DatabaseException e) {    _logger.error("discoverStorage failed.  Failed to update discovery status to ERROR.",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:58.053 -0400",hash_original_method="A414A772722097FFAFAD59FE99FA8E24",hash_generated_method="9C04B2D139C7D4E0858CA23C00FAE7AB") public FileAlterationMonitor(long interval,FileAlterationObserver... observers){  this(interval);  if (observers != null) {    for (    FileAlterationObserver observer : observers) {      addObserver(observer);    }  }}  }
class C{  public boolean areStatusBarColorsValid(){  return primaryColor != -1 && secondaryColor != -1;}  }
class C{  boolean isOrdered(){  return m_isOrdered;}  }
class C{  public TopFieldDocs(int totalHits,ScoreDoc[] scoreDocs,SortField[] fields,float maxScore){  super(totalHits,scoreDocs,maxScore);  this.fields=fields;}  }
class C{  public String redirectToServiceList(){  model.setSelectedServiceKey(null);  String errorKey=(String)ui.getRequest().getAttribute(Constants.REQ_ATTR_ERROR_KEY);  if (errorKey == null) {    logger.logDebug("patching errorKey...");    ui.getRequest().setAttribute(Constants.REQ_ATTR_ERROR_KEY,ERROR_SERVICE_INVALID_KEY);  }  return OUTCOME_SHOW_SERVICE_LIST;}  }
class C{  public BaseTripleADelegate(){  super();}  }
class C{  private void writeHex(int i) throws IOException {  int cursor=8;  do {    hex[--cursor]=HEX_DIGITS[i & 0xf];  } while ((i>>>=4) != 0);  socketOut.write(hex,cursor,hex.length - cursor);}  }
class C{  private static boolean isBmpWidth4Times(int width){  return width % BMP_WIDTH_OF_TIMES > 0;}  }
class C{  protected void computeINFLO(Relation<O> relation,ModifiableDBIDs pruned,WritableDataStore<ModifiableDBIDs> knns,WritableDataStore<ModifiableDBIDs> rnns,WritableDoubleDataStore density,WritableDoubleDataStore inflos,DoubleMinMax inflominmax){  for (DBIDIter iter=relation.iterDBIDs(); iter.valid(); iter.advance()) {    if (pruned.contains(iter)) {      inflos.putDouble(iter,1.);      inflominmax.put(1.);      continue;    }    ModifiableDBIDs knn=knns.get(iter), rnn=rnns.get(iter);    knn.addDBIDs(rnn);    double sum=0.;    int c=0;    for (DBIDIter niter=knn.iter(); niter.valid(); niter.advance()) {      if (DBIDUtil.equal(iter,niter)) {        continue;      }      sum+=density.doubleValue(niter);      c++;    }    double denP=density.doubleValue(iter);    final double inflo;    if (denP > 0.) {      inflo=denP < Double.POSITIVE_INFINITY ? sum / (c * denP) : 1.;    } else {      inflo=sum == 0 ? 1. : Double.POSITIVE_INFINITY;    }    inflos.putDouble(iter,inflo);    inflominmax.put(inflo);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof IntervalXYItemLabelGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  public IntVector(int n){  V=new int[n];  setSize(n);}  }
class C{  public static void assertSearcherHasNotChanged(SolrIndexSearcher expected){  SolrQueryRequest req=req("*:*");  try {    SolrIndexSearcher newSearcher=getMainSearcher(req);    assertSame(expected,newSearcher);  }  finally {    req.close();  }}  }
class C{  private void calcAngles(){  mDrawAngles=new float[mData.getYValCount()];  mAbsoluteAngles=new float[mData.getYValCount()];  List<PieDataSet> dataSets=mData.getDataSets();  int cnt=0;  for (int i=0; i < mData.getDataSetCount(); i++) {    PieDataSet set=dataSets.get(i);    List<Entry> entries=set.getYVals();    for (int j=0; j < entries.size(); j++) {      mDrawAngles[cnt]=calcAngle(Math.abs(entries.get(j).getVal()));      if (cnt == 0) {        mAbsoluteAngles[cnt]=mDrawAngles[cnt];      } else {        mAbsoluteAngles[cnt]=mAbsoluteAngles[cnt - 1] + mDrawAngles[cnt];      }      cnt++;    }  }}  }
class C{  public void run(sage.Catbert.FastStack s) throws ParseException {  throw new ParseException("run() method of PostfixMathCommand called");}  }
class C{  private long sumMatrix(int[][] mat){  long ret=0;  for (int i=0; i < mat.length; i++) {    final int[] row=mat[i];    for (int j=0; j < row.length; j++) {      ret+=row[j];    }  }  return ret;}  }
class C{  private Segment plus(int width,Color color){  pastLineEndSegmentWidths.add(width);  pastLineEndSegmentColors.add(color);  return this;}  }
class C{  private void subscribeTopics(String token) throws IOException {  GcmPubSub pubSub=GcmPubSub.getInstance(this);  for (  String topic : TOPICS) {    pubSub.subscribe(token,"/topics/" + topic,null);  }}  }
class C{  private static String createString(byte bytes[]){  StringBuffer sb=new StringBuffer();  for (  byte b : bytes) {    if (Character.isLetterOrDigit(b) || Character.isWhitespace(b)) {      sb.append((char)b);    }  }  return sb.toString();}  }
class C{  public static void serializeAsXML(Node node,Writer writer){  PrintWriter out=new PrintWriter(writer);  print(node,out);  out.flush();}  }
class C{  private void unregisterReceiver(){  if (!mRegisteredTimeZoneReceiver) {    return;  }  mRegisteredTimeZoneReceiver=false;  BReelWatchFaceService.this.unregisterReceiver(mTimeZoneReceiver);}  }
class C{  protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){  int min=0;  long pref=0;  int max=Integer.MAX_VALUE;  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    min=Math.max((int)v.getMinimumSpan(axis),min);    pref=Math.max((int)v.getPreferredSpan(axis),pref);    max=Math.max((int)v.getMaximumSpan(axis),max);  }  if (r == null) {    r=new SizeRequirements();    r.alignment=0.5f;  }  r.preferred=(int)pref;  r.minimum=min;  r.maximum=max;  return r;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case BEGIN_IN_BOTH:    return isSetBegin_in_both();case NEWINT:  return isSetNewint();case NEWBYTE:return isSetNewbyte();case NEWSHORT:return isSetNewshort();case NEWLONG:return isSetNewlong();case NEWDOUBLE:return isSetNewdouble();case NEWSTRUCT:return isSetNewstruct();case NEWLIST:return isSetNewlist();case NEWSET:return isSetNewset();case NEWMAP:return isSetNewmap();case NEWSTRING:return isSetNewstring();case END_IN_BOTH:return isSetEnd_in_both();}throw new IllegalStateException();}  }
class C{  private void heapifyUp(int twopos,double cur,int val){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    double par=twoheap[parent];    if (cur >= par) {      break;    }    twoheap[twopos]=par;    twovals[twopos]=twovals[parent];    twopos=parent;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  public void add(final Revision rev){  int revIndex=rev.getRevisionCounter();  if (this.mapping.containsKey(revIndex)) {    revIndex=this.mapping.get(revIndex);  }  ChronoFullRevision cfr=this.fullRevStorage.get(rev.getRevisionCounter());  ChronoStorageBlock block=new ChronoStorageBlock(cfr,revIndex,rev);  cfr.add(block);  if (revIndex < revisionIndex) {    block.setDelivered(true);    return;  }  clean();  if (this.storage.containsKey(revIndex)) {    return;  }  storage.put(revIndex,block);  size+=block.length();  if (first == null) {    first=block;    last=block;  } else {    ChronoStorageBlock previous=null, current=first;    do {      if (revIndex < current.getRevisionIndex()) {        block.setIndexPrev(previous);        block.setIndexNext(current);        if (previous != null) {          previous.setIndexNext(block);        }        current.setIndexPrev(block);        if (current == first) {          this.first=block;        }        return;      }      previous=current;      current=current.getIndexNext();    } while (current != null);    previous.setIndexNext(block);    block.setIndexPrev(previous);    this.last=block;  }}  }
class C{  private void computeModel(HierarchicalMultiClassModel.Node rootNode,ExampleSet exampleSet,Attribute originalLabel) throws OperatorException {  exampleSet.getAttributes().setSpecialAttribute(originalLabel,"label_original");  Attribute workingLabel=AttributeFactory.createAttribute(originalLabel.getName() + "_working",originalLabel.getValueType());  exampleSet.getExampleTable().addAttribute(workingLabel);  exampleSet.getAttributes().addRegular(workingLabel);  exampleSet.getAttributes().setLabel(workingLabel);  int[] partitions=new int[exampleSet.size()];  int i=0;  int lastLeafId=-1;  for (  Example example : exampleSet) {    double value=example.getValue(originalLabel);    example.setValue(workingLabel,value);    partitions[i]=(int)value;    if (partitions[i] > lastLeafId) {      lastLeafId=partitions[i];    }    i++;  }  AtomicInteger nonLeafCounter=new AtomicInteger(lastLeafId);  setParitionIdRecursivly(rootNode,nonLeafCounter,lastLeafId,workingLabel);  computeModelRecursivly(rootNode,partitions,nonLeafCounter.get(),exampleSet);  exampleSet.getAttributes().remove(workingLabel);  exampleSet.getAttributes().setLabel(originalLabel);  exampleSet.getExampleTable().removeAttribute(workingLabel);}  }
class C{  public static <A>ObservableTSeq<A> of(final AnyMSeq<? extends Observable<A>> monads){  return new ObservableTSeq<>(monads);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ModuleHandle addModule(String moduleName,String sessionKey){  String sanitizedModuleName=generateUniqueNameIfNullOrEmpty(moduleName,"Module");  ModuleHandle moduleHandle=new ModuleHandle(sanitizedModuleName,sessionKey);synchronized (privateInstanceLock) {    modules.add(moduleHandle);  }  setTerminated(false);  return moduleHandle;}  }
class C{  @Override public boolean isBroadcastDomainPort(DatapathId sw,OFPort port){  return isBroadcastDomainPort(sw,port,true);}  }
class C{  private boolean hasPendingTransactions(){synchronized (this.context) {    return this.context.txCoordinatorLinks != null && !this.context.txCoordinatorLinks.isEmpty();  }}  }
class C{  @Override public void onPermissionsFailed(String[] failedPermissions){  Log.e(TAG,"onPermissionsFailed()" + Arrays.toString(failedPermissions));  mPermissionsSatisfied=false;  Toast.makeText(this,"shadercam needs all permissions to function, please try again.",Toast.LENGTH_LONG).show();  this.finish();}  }
class C{  @CanIgnoreReturnValue public E removeFirst(){  return remove();}  }
class C{  @Override protected void onAction(String sender,String login,String hostname,String target,String action){  Conversation conversation;  Message message=new Message(sender + " " + action);  message.setIcon(R.drawable.action);  String queryNick=target;  if (queryNick.equals(this.getNick())) {    queryNick=sender;  }  conversation=server.getConversation(queryNick);  if (conversation == null) {    conversation=new Query(queryNick);    conversation.setHistorySize(service.getSettings().getHistorySize());    server.addConversation(conversation);    conversation.addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_NEW,server.getId(),queryNick);    service.sendBroadcast(intent);  } else {    conversation.addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),queryNick);    service.sendBroadcast(intent);  }  if (sender.equals(this.getNick())) {    return;  }  boolean mentioned=isMentioned(action);  if (mentioned || target.equals(this.getNick())) {    if (conversation.getStatus() != Conversation.STATUS_SELECTED || !server.getIsForeground()) {      service.addNewMention(server.getId(),conversation,conversation.getName() + ": " + sender+ " "+ action,service.getSettings().isVibrateHighlightEnabled(),service.getSettings().isSoundHighlightEnabled(),service.getSettings().isLedHighlightEnabled());    }  }  if (mentioned) {    message.setColor(Message.COLOR_RED);    conversation.setStatus(Conversation.STATUS_HIGHLIGHT);  }}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  boolean outputResidualImage=false;  double yEstimate;  double residual;  boolean standardizeResiduals=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  if (!args[2].toLowerCase().equals("not specified")) {    outputHeader=args[2];    outputResidualImage=true;    standardizeResiduals=Boolean.parseBoolean(args[3]);  }  if (inputHeader1 == null || inputHeader2 == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double x, y;    float progress=0;    WhiteboxRaster image1=new WhiteboxRaster(inputHeader1,"r");    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    WhiteboxRaster image2=new WhiteboxRaster(inputHeader2,"r");    if (rows != image2.getNumberRows() || cols != image2.getNumberColumns()) {      showFeedback("The input images must have the same dimensions (rows and columns).");      return;    }    double noData2=image2.getNoDataValue();    double sumX=0, sumY=0, sumXY=0, sumXX=0, sumYY=0;    long N=0;    double[] data1, data2;    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        x=data1[col];        y=data2[col];        if (x != noData1 && y != noData2) {          sumX+=x;          sumY+=y;          sumXY+=x * y;          sumXX+=x * x;          sumYY+=y * y;          N++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    double slope=(N * sumXY - (sumX * sumY)) / (N * sumXX - (sumX * sumX));    double intercept=(sumY - slope * sumX) / N;    double r=(N * sumXY - (sumX * sumY)) / ((Math.sqrt(N * sumXX - (sumX * sumX)) * (Math.sqrt(N * sumYY - (sumY * sumY)))));    double rSqr=r * r;    double yMean=sumY / N;    double xMean=sumX / N;    double SSreg=0;    double SStotal=0;    double SSerror=0;    int dfReg=1;    int dfError=(int)(N - 2);    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        x=data1[col];        y=data2[col];        if (x != noData1 && y != noData2) {          yEstimate=slope * x + intercept;          SSerror+=(y - yEstimate) * (y - yEstimate);          SStotal+=(y - yMean) * (y - yMean);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    SSreg=SStotal - SSerror;    double MSreg=SSreg / dfReg;    double MSerror=SSerror / dfError;    double Fstat=MSreg / MSerror;    double SEofEstimate=Math.sqrt(MSerror);    FDistribution f=new FDistribution(1,dfError);    double pValue=1.0 - f.cumulativeProbability(Fstat);    double msse=(Math.max(0d,sumYY - sumXY * sumXY / sumXX)) / (N - 2);    double interceptSE=Math.sqrt(msse * ((1d / N) + (xMean * xMean) / sumXX));    double interceptT=intercept / interceptSE;    TDistribution distribution=new TDistribution(N - 2);    double interceptPValue=2d * (1.0 - distribution.cumulativeProbability(Math.abs(intercept) / interceptSE));    double slopeSE=Math.sqrt(msse / sumXX);    double slopeT=slope / slopeSE;    double slopePValue=2d * (1.0 - distribution.cumulativeProbability(Math.abs(slope) / slopeSE));    if (outputResidualImage) {      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      output.setPreferredPalette("blue_white_red.pal");      if (standardizeResiduals) {        for (row=0; row < rows; row++) {          data1=image1.getRowValues(row);          data2=image2.getRowValues(row);          for (col=0; col < cols; col++) {            x=data1[col];            y=data2[col];            yEstimate=slope * x + intercept;            residual=(y - yEstimate) / SEofEstimate;            output.setValue(row,col,residual);          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }      } else {        for (row=0; row < rows; row++) {          data1=image1.getRowValues(row);          data2=image2.getRowValues(row);          for (col=0; col < cols; col++) {            x=data1[col];            y=data2[col];            yEstimate=slope * x + intercept;            residual=y - yEstimate;            output.setValue(row,col,residual);          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }      }      output.close();    }    DecimalFormat df=new DecimalFormat("###,###,###,##0.000");    DecimalFormat df2=new DecimalFormat("###,###,###,###");    String retstr=null;    retstr="IMAGE REGRESSION REPORT\n\n";    retstr+="Input Image 1 (X):\t\t" + image1.getShortHeaderFile() + "\n";    retstr+="Input Image 2 (Y):\t\t" + image2.getShortHeaderFile() + "\n\n";    retstr+="Model Summary:\n";    retstr+="R\tR Square\tStd. Error of the Estimate\n";    retstr+=df.format(r) + "\t" + df.format(rSqr)+ "\t"+ df.format(SEofEstimate)+ "\n\n";    String ANOVA="\nAnalysis of Variance (ANOVA):\n";    ANOVA+="Source\tSS\tdf\tMS\tF\tP\n";    ANOVA+="Regression\t" + df.format(SSreg) + "\t"+ df2.format(dfReg)+ "\t"+ df.format(MSreg)+ "\t"+ df.format(Fstat)+ "\t"+ df.format(pValue)+ "\n";    ANOVA+="Residual\t" + df.format(SSerror) + "\t"+ df2.format(dfError)+ "\t"+ df.format(MSerror)+ "\n";    ANOVA+="Total\t" + df.format(SStotal) + "\n\n";    retstr+=ANOVA;    String coefficents="Coefficients:\n";    coefficents+="Variable\tB\tStd. Error\tt\tSig.\n";    coefficents+="Constant\t" + df.format(intercept) + "\t"+ df.format(interceptSE)+ "\t"+ df.format(interceptT)+ "\t"+ df.format(interceptPValue)+ "\n";    coefficents+="Slope\t" + df.format(slope) + "\t"+ df.format(slopeSE)+ "\t"+ df.format(slopeT)+ "\t"+ df.format(slopePValue)+ "\n\n";    retstr+=coefficents;    if (intercept >= 0) {      retstr+="Regression Equation:\t\t" + image2.getShortHeaderFile() + " = "+ df.format(slope)+ " \u00D7 "+ image2.getShortHeaderFile()+ " + "+ df.format(intercept)+ "\n";    } else {      retstr+="Regression Equation:\t\t" + image2.getShortHeaderFile() + " = "+ df.format(slope)+ " \u00D7 "+ image2.getShortHeaderFile()+ " - "+ df.format(-intercept)+ "\n";    }    returnData(retstr);    if (outputResidualImage) {      returnData(outputHeader);    }    image1.close();    image2.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public List<GroupRemoveDeviceDB> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<GroupRemoveDeviceDB> list=new ArrayList<GroupRemoveDeviceDB>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  public SVGClipPathElementBridge(){}  }
class C{  public void writeCellCountsAndRiskClasses(String outputFolder){  if (map.size() == 0 || mapRating == null) {    throw new RuntimeException("Insufficient data to write. Either no grids, or no ranking.");  }  String filename=outputFolder + (outputFolder.endsWith("/") ? "" : "/") + "cellValuesAndRiskClasses.csv";  LOG.info("Writing the cell values and risk classes to " + filename);  LOG.info("  \\_ Accelerometer risk thresholds:");  for (int i=0; i < this.riskThresholds.size(); i++) {    LOG.info(String.format("      \\_ Risk %d: %.4f",i,this.riskThresholds.get(i)));  }  BufferedWriter bw=IOUtils.getBufferedWriter(filename);  try {    bw.write("x,y,z,count,class");    bw.newLine();    for (    Coord3d c : this.map.keySet()) {      bw.write(String.format("%.4f, %.4f,%.4f,%.1f,%d\n",c.x,c.y,c.z,this.map.get(c),this.mapRating.get(c)));    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot write to " + filename);  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close " + filename);    }  }  LOG.info("Done writing cell values and risk classes.");}  }
class C{  private void verifyAddExportRule(List<ExportRule> listExportRule) throws Exception {  if (listExportRule == null) {    return;  }  _log.info("Checking if file system is exported before adding export rule");  if (!isFileSystemExported()) {    String msg="File system is not exported. To add export rule, file system must be exported first.";    _log.error(msg);    String urn=fs != null ? fs.getId().toString() : snapshot.getId().toString();    throw APIException.badRequests.fileSystemNotExported(ExportOperationType.ADD.name(),urn);  }  _log.info("Number of Export Rule(s) Requested to Add {} - Iterating ..",listExportRule.size());  for (  ExportRule exportRule : listExportRule) {    exportRule.setIsToProceed(true,ExportOperationErrorType.NO_ERROR);    _log.info("Verifying Export Rule {}",exportRule.toString());    scanForDuplicateSecFlavor(exportRule);    if (exportRule.getErrorTypeIfNotToProceed() != null && !(exportRule.getErrorTypeIfNotToProceed().name().equals(ExportOperationErrorType.NO_ERROR.name()))) {      _log.info("Same Security Flavor found across the exports {}",exportRule.toString());      break;    }    FileExportRule rule=validateHosts(exportRule);    if (rule != null) {      _log.info("Duplicate Export to Add {} Requested : {}",rule,exportRule);      exportRule.setIsToProceed(false,ExportOperationErrorType.EXPORT_EXISTS);      break;    } else {      if (exportRule.isToProceed()) {        _log.info("No Existing Export found in DB {}",exportRule);        verifyExportAnon(exportRule);      }    }  }}  }
class C{  @Override public int hashCode(){  return (int)this.time;}  }
class C{  public void rect(CGRect ret){  CGPoint pos=getPositionRef();  CGPoint pnt=getAnchorPointRef();  CGSize size=getContentSizeRef();  ret.set(pos.x - size.width * pnt.x,pos.y - size.height * pnt.y,size.width,size.height);}  }
class C{  public GuacamoleHTTPTunnel(GuacamoleTunnel wrappedTunnel){  super(wrappedTunnel);}  }
class C{  @Override public boolean performFinish(){  Filter newFilter=page.getFilter();  if (newFilter != null) {    int index=filters.indexOf(filter);    filters.set(index,newFilter);    return true;  }  return false;}  }
class C{  public int size(){  return this.dataSize;}  }
class C{  public void finish() throws IOException {  if (!wroteLastChunk) {    flushCache();    writeClosingChunk();    wroteLastChunk=true;  }}  }
class C{  public void observe(){  mCursor=mContext.getContentResolver().query(Settings.Bookmarks.CONTENT_URI,sProjection,null,null,null);  mCursor.registerContentObserver(this);  updateShortcuts();}  }
class C{  public T rel(String value){  return attr("rel",value);}  }
class C{  public SignatureVisitor visitTypeArgument(char wildcard){  return this;}  }
class C{  @Override public void onReceive(Context context,Intent ping){  Integer count=mIteration=ping.getIntExtra(COUNT,0);  Log.d(TAG,"onReceive() called with count of " + count);  int notificationId=ping.getIntExtra(NOTIFICATION_ID,1);  if (count > mMaxCount) {    UiUtils.updateStatusBar(context,mTitle,R.drawable.ping,notificationId);    mActivity.stopPlaying();  } else {    UiUtils.updateStatusBar(context,mTitle + " " + count,R.drawable.ping,notificationId);    context.sendBroadcast(PongReceiver.makePongIntent(context,count,notificationId));  }}  }
class C{  public static final double[][] minusTimes(final double[][] m1,final double[][] m2,final double s2){  return minusTimesEquals(copy(m1),m2,s2);}  }
class C{  private SpeechletResponse newAskResponse(String stringOutput,boolean isOutputSsml,String repromptText,boolean isRepromptSsml){  OutputSpeech outputSpeech, repromptOutputSpeech;  if (isOutputSsml) {    outputSpeech=new SsmlOutputSpeech();    ((SsmlOutputSpeech)outputSpeech).setSsml(stringOutput);  } else {    outputSpeech=new PlainTextOutputSpeech();    ((PlainTextOutputSpeech)outputSpeech).setText(stringOutput);  }  if (isRepromptSsml) {    repromptOutputSpeech=new SsmlOutputSpeech();    ((SsmlOutputSpeech)repromptOutputSpeech).setSsml(repromptText);  } else {    repromptOutputSpeech=new PlainTextOutputSpeech();    ((PlainTextOutputSpeech)repromptOutputSpeech).setText(repromptText);  }  Reprompt reprompt=new Reprompt();  reprompt.setOutputSpeech(repromptOutputSpeech);  return SpeechletResponse.newAskResponse(outputSpeech,reprompt);}  }
class C{  public CEvaluationVisitor(final IMemoryExpressionBinding binding){  m_binding=binding;}  }
class C{  public boolean visitLiteralResultElement(ElemLiteralResult elem){  return true;}  }
class C{  private static Password parsePassword(String authorizationHeader){  String decodedAuthorizationHeader=decodeHeader(authorizationHeader);  int delimiterIndex=decodedAuthorizationHeader.indexOf(':');  if (delimiterIndex > -1) {    return new Password(decodedAuthorizationHeader.substring(delimiterIndex + 1));  } else {    return new Password("");  }}  }
class C{  public boolean isString(){  Type stringType=Type.getType(String.class);  return this.objectType.equals(stringType);}  }
class C{  public static void assertCompoundSegments(SolrCore core,boolean compound){  RefCounted<SolrIndexSearcher> searcherRef=core.getRegisteredSearcher();  try {    assertCompoundSegments(searcherRef.get().getIndexReader(),compound);  }  finally {    searcherRef.decref();  }}  }
class C{  private Vector<String> buildRuleList(String description){  Vector<String> tempRuleList=new Vector<>();  Stack<Character> parenStack=new Stack<>();  int p=0;  int ruleStart=0;  int c='\u0000';  int lastC='\u0000';  int lastOpen='\u0000';  boolean haveEquals=false;  boolean havePipe=false;  boolean sawVarName=false;  final String charsThatCantPrecedeAsterisk="=/{(|}*;\u0000";  if (description.length() != 0 && description.codePointAt(description.length() - 1) != ';') {    description=description + ";";  }  while (p < description.length()) {    c=description.codePointAt(p);switch (c) {case '\\':      ++p;    break;case '{':case '<':case '[':case '(':  if (lastOpen == '<') {    error("Can't nest brackets inside <>",p,description);  }if (lastOpen == '[' && c != '[') {  error("Can't nest anything in [] but []",p,description);}if (c == '<' && (haveEquals || havePipe)) {error("Unknown variable name",p,description);}lastOpen=c;parenStack.push(new Character((char)c));if (c == '<') {sawVarName=true;}break;case '}':case '>':case ']':case ')':char expectedClose='\u0000';switch (lastOpen) {case '{':expectedClose='}';break;case '[':expectedClose=']';break;case '(':expectedClose=')';break;case '<':expectedClose='>';break;}if (c != expectedClose) {error("Unbalanced parentheses",p,description);}if (lastC == lastOpen) {error("Parens don't contain anything",p,description);}parenStack.pop();if (!parenStack.empty()) {lastOpen=parenStack.peek().charValue();} else {lastOpen='\u0000';}break;case '*':if (charsThatCantPrecedeAsterisk.indexOf(lastC) != -1) {error("Misplaced asterisk",p,description);}break;case '?':if (lastC != '*') {error("Misplaced ?",p,description);}break;case '=':if (haveEquals || havePipe) {error("More than one = or / in rule",p,description);}haveEquals=true;break;case '/':if (haveEquals || havePipe) {error("More than one = or / in rule",p,description);}if (sawVarName) {error("Unknown variable name",p,description);}havePipe=true;break;case '!':if (lastC != ';' && lastC != '\u0000') {error("! can only occur at the beginning of a rule",p,description);}break;case '.':break;case '^':case '-':case ':':if (lastOpen != '[' && lastOpen != '<') {error("Illegal character",p,description);}break;case ';':if (lastC == ';' || lastC == '\u0000') {error("Empty rule",p,description);}if (!parenStack.empty()) {error("Unbalanced parenheses",p,description);}if (parenStack.empty()) {if (haveEquals) {description=processSubstitution(description.substring(ruleStart,p),description,p + 1);} else {if (sawVarName) {error("Unknown variable name",p,description);}tempRuleList.addElement(description.substring(ruleStart,p));}ruleStart=p + 1;haveEquals=havePipe=sawVarName=false;}break;case '|':if (lastC == '|') {error("Empty alternative",p,description);}if (parenStack.empty() || lastOpen != '(') {error("Misplaced |",p,description);}break;default :if (c >= ' ' && c < '\u007f' && !Character.isLetter((char)c) && !Character.isDigit((char)c)) {error("Illegal character",p,description);}if (c >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {++p;}break;}lastC=c;++p;}if (tempRuleList.size() == 0) {error("No valid rules in description",p,description);}return tempRuleList;}  }
class C{  public static void commit() throws GenericTransactionException {  UserTransaction ut=TransactionFactoryLoader.getInstance().getUserTransaction();  if (ut != null) {    try {      int status=ut.getStatus();      Debug.logVerbose("Current status : " + getTransactionStateString(status),module);      if (status != STATUS_NO_TRANSACTION && status != STATUS_COMMITTING && status != STATUS_COMMITTED && status != STATUS_ROLLING_BACK && status != STATUS_ROLLEDBACK) {        ut.commit();        clearTransactionStamps();        clearTransactionBeginStack();        clearSetRollbackOnlyCause();        Debug.logVerbose("Transaction committed",module);      } else {        Debug.logWarning("Not committing transaction, status is " + getStatusString(),module);      }    } catch (    RollbackException e) {      RollbackOnlyCause rollbackOnlyCause=getSetRollbackOnlyCause();      if (rollbackOnlyCause != null) {        clearTransactionStamps();        clearTransactionBeginStack();        clearSetRollbackOnlyCause();        Debug.logError(e,"Rollback Only was set when trying to commit transaction here; throwing rollbackOnly cause exception",module);        throw new GenericTransactionException("Roll back error, could not commit transaction, was rolled back instead because of: " + rollbackOnlyCause.getCauseMessage(),rollbackOnlyCause.getCauseThrowable());      } else {        Throwable t=e.getCause() == null ? e : e.getCause();        throw new GenericTransactionException("Roll back error (with no rollbackOnly cause found), could not commit transaction, was rolled back instead: " + t.toString(),t);      }    }catch (    IllegalStateException e) {      Throwable t=e.getCause() == null ? e : e.getCause();      throw new GenericTransactionException("Could not commit transaction, IllegalStateException exception: " + t.toString(),t);    }catch (    HeuristicMixedException e) {      Throwable t=e.getCause() == null ? e : e.getCause();      throw new GenericTransactionException("Could not commit transaction, HeuristicMixed exception: " + t.toString(),t);    }catch (    HeuristicRollbackException e) {      Throwable t=e.getCause() == null ? e : e.getCause();      throw new GenericTransactionException("Could not commit transaction, HeuristicRollback exception: " + t.toString(),t);    }catch (    SystemException e) {      Throwable t=e.getCause() == null ? e : e.getCause();      throw new GenericTransactionException("System error, could not commit transaction: " + t.toString(),t);    }  } else {    Debug.logInfo("UserTransaction is null, not committing",module);  }}  }
class C{  public static boolean isInBetween(final Annotation between,final Annotation source,final Annotation target){  int left;  int right;  if (source.getEnd() <= target.getBegin()) {    left=source.getEnd();    right=target.getBegin();  } else {    left=target.getEnd();    right=source.getBegin();  }  return left <= between.getBegin() && between.getEnd() <= right;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MTable[");  sb.append(get_ID()).append("-").append(getTableName()).append("]");  return sb.toString();}  }
class C{  static public Enumeration<?> sortKeys(Set<String> keySet){  List<String> sortedList=new ArrayList<String>();  sortedList.addAll(keySet);  Collections.sort(sortedList);  return Collections.enumeration(sortedList);}  }
class C{  public Iterator<Long> blocks(String id,int version){  final IKeyBuilder keyBuilder=getFileDataIndex().getIndexMetadata().getKeyBuilder();  final byte[] fromKey=keyBuilder.reset().appendText(id,true,false).append(version).getKey();  final byte[] toKey=keyBuilder.reset().appendText(id,true,false).append(version + 1).getKey();  final int flags=IRangeQuery.KEYS;  final ITupleIterator itr=getFileDataIndex().rangeIterator(fromKey,toKey,0,flags,null);  return new BlockIdentifierIterator(id,version,itr);}  }
class C{  public boolean contains(Point2D p){  Rectangle2D b=getSensitiveBounds();  if (b == null || !b.contains(p)) {    return false;  }switch (pointerEventType) {case VISIBLE_PAINTED:case VISIBLE_FILL:case VISIBLE_STROKE:case VISIBLE:    return isVisible;case PAINTED:case FILL:case STROKE:case ALL:  return true;case NONE:default :return false;}}  }
class C{  public RecoveryResponse(int totalShards,int successfulShards,int failedShards,boolean detailed,Map<String,List<RecoveryState>> shardRecoveryStates,List<ShardOperationFailedException> shardFailures){  super(totalShards,successfulShards,failedShards,shardFailures);  this.shardRecoveryStates=shardRecoveryStates;  this.detailed=detailed;}  }
class C{  public boolean masterNode(){  String master=attributes.get("master");  if (master == null) {    return !clientNode();  }  return Booleans.parseBooleanExact(master);}  }
class C{  private void handleStateChangedLocked(){  Slog.d(TAG,"handleStateChanged()");  final NetworkInfo egressInfo=mConnService.getActiveNetworkInfoUnfiltered();  final LinkProperties egressProp=mConnService.getActiveLinkProperties();  final NetworkInfo vpnInfo=mVpn.getNetworkInfo();  final VpnConfig vpnConfig=mVpn.getLegacyVpnConfig();  final boolean egressDisconnected=egressInfo == null || State.DISCONNECTED.equals(egressInfo.getState());  final boolean egressChanged=egressProp == null || !TextUtils.equals(mAcceptedEgressIface,egressProp.getInterfaceName());  if (egressDisconnected || egressChanged) {    clearSourceRulesLocked();    mAcceptedEgressIface=null;    mVpn.stopLegacyVpn();  }  if (egressDisconnected) {    hideNotification();    return;  }  final int egressType=egressInfo.getType();  if (vpnInfo.getDetailedState() == DetailedState.FAILED) {    EventLogTags.writeLockdownVpnError(egressType);  }  if (mErrorCount > MAX_ERROR_COUNT) {    showNotification(R.string.vpn_lockdown_error,R.drawable.vpn_disconnected);  } else   if (egressInfo.isConnected() && !vpnInfo.isConnectedOrConnecting()) {    if (mProfile.isValidLockdownProfile()) {      Slog.d(TAG,"Active network connected; starting VPN");      EventLogTags.writeLockdownVpnConnecting(egressType);      showNotification(R.string.vpn_lockdown_connecting,R.drawable.vpn_disconnected);      mAcceptedEgressIface=egressProp.getInterfaceName();      mVpn.startLegacyVpn(mProfile,KeyStore.getInstance(),egressProp);    } else {      Slog.e(TAG,"Invalid VPN profile; requires IP-based server and DNS");      showNotification(R.string.vpn_lockdown_error,R.drawable.vpn_disconnected);    }  } else   if (vpnInfo.isConnected() && vpnConfig != null) {    final String iface=vpnConfig.interfaze;    final String sourceAddr=vpnConfig.addresses;    if (TextUtils.equals(iface,mAcceptedIface) && TextUtils.equals(sourceAddr,mAcceptedSourceAddr)) {      return;    }    Slog.d(TAG,"VPN connected using iface=" + iface + ", sourceAddr="+ sourceAddr);    EventLogTags.writeLockdownVpnConnected(egressType);    showNotification(R.string.vpn_lockdown_connected,R.drawable.vpn_connected);    try {      clearSourceRulesLocked();      mNetService.setFirewallInterfaceRule(iface,true);      mNetService.setFirewallEgressSourceRule(sourceAddr,true);      mErrorCount=0;      mAcceptedIface=iface;      mAcceptedSourceAddr=sourceAddr;    } catch (    RemoteException e) {      throw new RuntimeException("Problem setting firewall rules",e);    }    mConnService.sendConnectedBroadcast(augmentNetworkInfo(egressInfo));  }}  }
class C{  public void testBug15544() throws Exception {  Properties props=new Properties();  props.setProperty("characterEncoding","Cp437");  Connection dosConn=null;  try {    dosConn=getConnectionWithProps(props);  }  finally {    if (dosConn != null) {      dosConn.close();    }  }}  }
class C{  private void constructSnapshotObjectFromBookmark(CreateBookmarkResponse response,ProtectionSystem system,List<URI> snapshotList,String name,String opId) throws InternalException {  ProtectionSet protectionSet=null;  RecoverPointClient rp=RPHelper.getRecoverPointClient(system);  for (  URI snapshotID : snapshotList) {    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotID);    Volume volume=_dbClient.queryObject(Volume.class,snapshot.getParent().getURI());    if (Volume.checkForVplexBackEndVolume(_dbClient,volume)) {      volume=Volume.fetchVplexVolume(_dbClient,volume);    }    if (protectionSet == null || !protectionSet.getId().equals(volume.getProtectionSet().getURI())) {      protectionSet=_dbClient.queryObject(ProtectionSet.class,volume.getProtectionSet());    }    Date bookmarkDate=new Date();    if (response.getVolumeWWNBookmarkDateMap() != null) {      bookmarkDate=response.getVolumeWWNBookmarkDateMap().get(RPHelper.getRPWWn(volume.getId(),_dbClient));    } else {      _log.warn("Bookmark date was not filled-in.  Will use current date/time.");    }    snapshot.setEmName(name);    snapshot.setInactive(false);    snapshot.setEmBookmarkTime("" + bookmarkDate.getTime());    snapshot.setCreationTime(Calendar.getInstance());    snapshot.setTechnologyType(TechnologyType.RP.toString());    Volume targetVolume=RPHelper.getRPTargetVolumeFromSource(_dbClient,volume,snapshot.getVirtualArray());    RecoverPointVolumeProtectionInfo protectionInfo=rp.getProtectionInfoForVolume(RPHelper.getRPWWn(targetVolume.getId(),_dbClient));    for (    RPConsistencyGroup rpcg : response.getCgBookmarkMap().keySet()) {      if (rpcg.getCGUID().getId() == protectionInfo.getRpVolumeGroupID()) {        for (        RPBookmark bookmark : response.getCgBookmarkMap().get(rpcg)) {          if (bookmark.getBookmarkName() != null && bookmark.getBookmarkName().equalsIgnoreCase(name) && bookmark.getCGGroupCopyUID().getGlobalCopyUID().getCopyUID() == protectionInfo.getRpVolumeGroupCopyID()) {            snapshot.setEmCGGroupCopyId(protectionInfo.getRpVolumeGroupCopyID());            break;          }        }      }    }    if (targetVolume.getId().equals(volume.getId())) {      _log.error("The source and the target volumes are the same");      throw DeviceControllerExceptions.recoverpoint.cannotActivateSnapshotNoTargetVolume();    }    snapshot.setDeviceLabel(targetVolume.getDeviceLabel());    snapshot.setStorageController(targetVolume.getStorageController());    snapshot.setSystemType(targetVolume.getSystemType());    snapshot.setVirtualArray(targetVolume.getVirtualArray());    snapshot.setNativeId(targetVolume.getNativeId());    snapshot.setAlternateName(targetVolume.getAlternateName());    snapshot.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(system,snapshot));    snapshot.setIsSyncActive(false);    snapshot.setWWN(RPHelper.getRPWWn(targetVolume.getId(),_dbClient));    snapshot.setProtectionController(system.getId());    snapshot.setProtectionSet(volume.getProtectionSet().getURI());    _log.info(String.format("Updated bookmark %1$s associated with block volume %2$s on site %3$s.",name,volume.getDeviceLabel(),snapshot.getEmInternalSiteName()));    _dbClient.updateObject(snapshot);    List<URI> taskSnapshotURIList=new ArrayList<URI>();    taskSnapshotURIList.add(snapshot.getId());    TaskCompleter completer=new BlockSnapshotCreateCompleter(taskSnapshotURIList,opId);    completer.ready(_dbClient);  }  _log.info("Bookmark(s) created for snapshot operation");  return;}  }
class C{  public TerminalSeqSet(Iterable<ITerminalSeq> sequences){  super();  this.set=new HashSet<TerminalSeqf>();  for (  ITerminalSeq seq : sequences) {    this.set.add(seq.seal());  }}  }
class C{  public static InstanceInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  InstanceInfo object=new InstanceInfo();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"instanceInfo".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (InstanceInfo)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","accessInfo").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setAccessInfo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","baseUrl").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setBaseUrl(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","instanceId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setInstanceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","loginPath").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setLoginPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static WritableMap createMap(){  return new WritableNativeMap();}  }
class C{  protected String buildForeignKeyConstraintName(String tableName,String fieldName,int maximumNameLength,DatabasePlatform platform){  String startDelimiter="";  String endDelimiter="";  boolean useDelimiters=!platform.getStartDelimiter().equals("") && (tableName.startsWith(platform.getStartDelimiter()) || fieldName.startsWith(platform.getStartDelimiter()));  if (useDelimiters) {    startDelimiter=platform.getStartDelimiter();    endDelimiter=platform.getEndDelimiter();  }  String adjustedTableName=tableName;  if (adjustedTableName.indexOf(' ') != -1 || adjustedTableName.indexOf('\"') != -1 || adjustedTableName.indexOf('`') != -1) {    StringBuilder buff=new StringBuilder();    for (int i=0; i < tableName.length(); i++) {      char c=tableName.charAt(i);      if (c != ' ' && c != '\"' && c != '`') {        buff.append(c);      }    }    adjustedTableName=buff.toString();  }  StringBuilder buff=new StringBuilder();  for (int i=0; i < fieldName.length(); i++) {    char c=fieldName.charAt(i);    if (c != ' ' && c != '\"' && c != '`') {      buff.append(c);    }  }  String adjustedFieldName=buff.toString();  String foreignKeyName=startDelimiter + "FK_" + adjustedTableName+ "_"+ adjustedFieldName+ endDelimiter;  if (foreignKeyName.length() > maximumNameLength) {    foreignKeyName=startDelimiter + adjustedTableName + "_"+ adjustedFieldName+ endDelimiter;    if (foreignKeyName.length() > maximumNameLength) {      foreignKeyName=startDelimiter + Helper.removeAllButAlphaNumericToFit(adjustedTableName + adjustedFieldName,maximumNameLength) + endDelimiter;      if (foreignKeyName.length() > maximumNameLength) {        String onlyAlphaNumericTableName=Helper.removeAllButAlphaNumericToFit(adjustedTableName,0);        String onlyAlphaNumericFieldName=Helper.removeAllButAlphaNumericToFit(adjustedFieldName,0);        foreignKeyName=startDelimiter + Helper.shortenStringsByRemovingVowelsToFit(onlyAlphaNumericTableName,onlyAlphaNumericFieldName,maximumNameLength) + endDelimiter;        if (foreignKeyName.length() > maximumNameLength) {          String shortenedFieldName=Helper.removeVowels(onlyAlphaNumericFieldName);          String shortenedTableName=Helper.removeVowels(onlyAlphaNumericTableName);          int delimiterLength=startDelimiter.length() + endDelimiter.length();          if (shortenedFieldName.length() + delimiterLength >= maximumNameLength) {            foreignKeyName=startDelimiter + Helper.truncate(shortenedFieldName,maximumNameLength - delimiterLength) + endDelimiter;          } else {            foreignKeyName=startDelimiter + Helper.truncate(shortenedTableName,maximumNameLength - shortenedFieldName.length() - delimiterLength) + shortenedFieldName+ endDelimiter;          }        }      }    }  }  return foreignKeyName;}  }
class C{  public static Result evaluateModelPrequentialBasic(MultiLabelClassifier h,Instances D,int windowSize,double rLabeled,String Top,String Vop) throws Exception {  if (h.getDebug())   System.out.println(":- Classifier -: " + h.getClass().getName() + ": "+ Arrays.toString(h.getOptions()));  int L=D.classIndex();  Result result=new Result();  long train_time=0;  long test_time=0;  double nth=1. / rLabeled;  result.setInfo("Supervision",String.valueOf(rLabeled));  Instances D_init=new Instances(D,0,windowSize);  if (h.getDebug()) {    System.out.println("Training classifier on initial window (of size " + windowSize + ") ...");  }  train_time=System.currentTimeMillis();  h.buildClassifier(D_init);  train_time=System.currentTimeMillis() - train_time;  D=new Instances(D,windowSize,D.numInstances() - windowSize);  if (h.getDebug()) {    System.out.println("Proceeding to Test/Label/Update cycle on remaining (" + D.numInstances() + ") instances ...");  }  result.setInfo("Classifier",h.getClass().getName());  result.setInfo("Options",Arrays.toString(h.getOptions()));  result.setInfo("Additional Info",h.toString());  result.setInfo("Dataset",MLUtils.getDatasetName(D));  result.setInfo("Verbosity",Vop);  if (h instanceof MultiTargetClassifier || Evaluation.isMT(D)) {    result.setInfo("Type","MT");  } else {    result.setInfo("Type","ML");    double t=0.5;    try {      t=Double.parseDouble(Top);    } catch (    Exception e) {      System.err.println("[WARNING] Only a single threshold can be chosen for this kind of evaluation; Using " + t);    }    result.setInfo("Threshold",String.valueOf(t));  }  ArrayList<HashMap<String,Object>> samples=new ArrayList<HashMap<String,Object>>();  for (int i=0; i < D.numInstances(); i++) {    Instance x=D.instance(i);    Instance x_=(Instance)x.copy();    long before_test=System.currentTimeMillis();    double y[]=h.distributionForInstance(x_);    long after_test=System.currentTimeMillis();    test_time+=(after_test - before_test);    result.addResult(y,x);    if (rLabeled >= 0.5) {      x=MLUtils.setLabelsMissing(x,L);    }    long before=System.currentTimeMillis();    ((UpdateableClassifier)h).updateClassifier(x);    long after=System.currentTimeMillis();    train_time+=(after - before);    if (i % windowSize == (windowSize - 1)) {      HashMap<String,Object> eval_sample=Result.getStats(result,Vop);      eval_sample.put("Test time",(test_time) / 1000.0);      eval_sample.put("Build time",(train_time) / 1000.0);      eval_sample.put("Total time",(test_time + train_time) / 1000.0);      eval_sample.put("Instances",(double)i);      eval_sample.put("Samples",(double)(samples.size() + 1));      samples.add(eval_sample);      System.out.println("Sample (#" + samples.size() + ") of performance at "+ i+ "/"+ D.numInstances()+ " instances.");    }  }  result.output=Result.getStats(result,Vop);  result.setMeasurement("Results sampled over time",Result.getResultsAsInstances(samples));  result.vals.put("Test time",(test_time) / 1000.0);  result.vals.put("Build time",(train_time) / 1000.0);  result.vals.put("Total time",(test_time + train_time) / 1000.0);  return result;}  }
class C{  public void handleOnRequestAllowed(){  _denyCounter=0;}  }
class C{  protected static int parseUnsignedInt(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int result=0;  int temp=pduDataStream.read();  if (temp == -1) {    return temp;  }  while ((temp & 0x80) != 0) {    result=result << 7;    result|=temp & 0x7F;    temp=pduDataStream.read();    if (temp == -1) {      return temp;    }  }  result=result << 7;  result|=temp & 0x7F;  return result;}  }
class C{  public void showTextOnFeed(String message,int x,int y,Color backgroundColor,Color textColor,Font font){  showTextOnFeed(message);  Platform.runLater(null);}  }
class C{  public Variables(){  this.variables=new HashMap<String,VariableValue>();  try {    doLog=new TankConfig().getAgentConfig().getLogVariables();  } catch (  Exception e) {  }  context=new MapContext();  new JexlStringFunctions().visit(context);  new JexlIOFunctions().visit(context);  new JexlDateFunctions().visit(context);  new JexlMonetaryFunctions().visit(context);  new JexlNumericFunctions().visit(context);  new JexlTaxFunctions().visit(context);}  }
class C{  private VOTechnicalService createTechnicalService(String serviceID) throws Exception {  return setup.createTechnicalServiceWithParameterDefinition(serviceID);}  }
class C{  public void mouseWheelMoved(MouseWheelEvent evt){  dispatchEvent(evt);}  }
class C{  public void addKeyListener(int keyCode,ActionListener listener){  if (keyListeners == null) {    keyListeners=new HashMap<Integer,ArrayList<ActionListener>>();  }  addKeyListener(keyCode,listener,keyListeners);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.ACCESS;}  }
class C{  @Override public boolean equals(Object o){  if (o == this)   return true;  if (o == null)   return false;  if (o.getClass() != getClass())   return false;  return _class == ((NamedType)o)._class;}  }
class C{  public ProjectDescription(IProject project){  super(project);  Assert.isLegal(project.exists());  if (project.isOpen()) {    try {      this.projectDescription=project.getDescription();    } catch (    CoreException e) {    }  } else {    openOnCreate=false;  }}  }
class C{  private static Url parseUrl(final String spec){  final Url url=new Url();  int startIndex=0;  int endIndex=spec.length();  final int crosshatchIndex=indexOf(spec,'#',startIndex,endIndex);  if (crosshatchIndex >= 0) {    url.fragment_=spec.substring(crosshatchIndex + 1,endIndex);    endIndex=crosshatchIndex;  }  final int colonIndex=indexOf(spec,':',startIndex,endIndex);  if (colonIndex > 0) {    final String scheme=spec.substring(startIndex,colonIndex);    if (isValidScheme(scheme)) {      url.scheme_=scheme;      startIndex=colonIndex + 1;    }  }  final int locationStartIndex;  int locationEndIndex;  if (spec.startsWith("//",startIndex)) {    locationStartIndex=startIndex + 2;    locationEndIndex=indexOf(spec,'/',locationStartIndex,endIndex);    if (locationEndIndex >= 0) {      startIndex=locationEndIndex;    }  } else {    locationStartIndex=-1;    locationEndIndex=-1;  }  final int questionMarkIndex=indexOf(spec,'?',startIndex,endIndex);  if (questionMarkIndex >= 0) {    if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {      locationEndIndex=questionMarkIndex;      startIndex=questionMarkIndex;    }    url.query_=spec.substring(questionMarkIndex + 1,endIndex);    endIndex=questionMarkIndex;  }  final int semicolonIndex=indexOf(spec,';',startIndex,endIndex);  if (semicolonIndex >= 0) {    if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {      locationEndIndex=semicolonIndex;      startIndex=semicolonIndex;    }    url.parameters_=spec.substring(semicolonIndex + 1,endIndex);    endIndex=semicolonIndex;  }  if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {    locationEndIndex=endIndex;  } else   if (startIndex < endIndex) {    url.path_=spec.substring(startIndex,endIndex);  }  if ((locationStartIndex >= 0) && (locationEndIndex >= 0)) {    url.location_=spec.substring(locationStartIndex,locationEndIndex);  }  return url;}  }
class C{  private void uploadProfilerConfig(CuratorFramework client) throws Exception {  if (profilerConfiguration != null) {    byte[] globalConfig=readProfilerConfigFromFile(profilerConfiguration);    if (globalConfig.length > 0) {      writeProfilerConfigToZookeeper(readProfilerConfigFromFile(profilerConfiguration),client);    }  }}  }
class C{  public KnowledgeModelEdge(KnowledgeModelNode node1,KnowledgeModelNode node2,int type){  super(node1,node2,Endpoint.TAIL,Endpoint.ARROW);  if (node1 == null || node2 == null) {    throw new NullPointerException();  }  if (this.type != FORBIDDEN_EXPLICITLY && this.type != FORBIDDEN_BY_TIERS && this.type != REQUIRED && this.type != FORBIDDEN_BY_GROUPS && this.type != REQUIRED_BY_GROUPS) {    throw new IllegalArgumentException("The given type is not known");  }  this.type=type;}  }
class C{  @Override public final synchronized void clear(){  this.levelA.clear();  this.levelB.clear();}  }
class C{  public void testOneOne(){  byte aBytes[]={1};  byte bBytes[]={1};  int aSign=1;  int bSign=1;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private Instance fakeInstance(){  return new Instance().withPrivateIpAddress(String.valueOf(System.currentTimeMillis())).withPrivateDnsName("any").withState(new InstanceState().withName("running"));}  }
class C{  @SuppressWarnings("rawtypes") @Test public void testCimQueuedIndication(){  CIMObjectPath objPath=CimObjectPathCreator.createInstance(OBJ_PATH_CLASS_NAME);  CIMProperty[] properties=new CIMProperty[0];  _instance=new CIMInstance(objPath,properties);  CimQueuedIndication indication=new CimQueuedIndication(INDICATION_URL,_instance);  Assert.assertEquals(indication.getURL(),INDICATION_URL);  Assert.assertEquals(indication.getIndication(),_instance);}  }
class C{  public boolean isDisableClientWindow(){  return (Boolean)getStateHelper().eval(PropertyKeys.disableClientWindow,false);}  }
class C{  public void addFrequency(Frequency frequency){  frequencies.add(frequency);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected void onResume(){  super.onResume();  startCameraSource();}  }
class C{  public static FawePlayer wrapPlayer(Object obj){  return FawePlayer.wrap(obj);}  }
class C{  private void updateDaytimeColor(){  setZoneColors(DaylightPhase.current().getColor());}  }
class C{  @Override public String globalInfo(){  return "Plot summary bar charts for incoming data/training/test sets.";}  }
class C{  protected SourceField(JavaElement parent,JavaModelManager manager,String name){  super(parent,manager,name);}  }
class C{  @SuppressWarnings("StringEquality") public static void restoreOldIgniteName(@Nullable String oldName,@Nullable String curName){  if (oldName != curName)   LOC_IGNITE_NAME.set(oldName);}  }
class C{  public void onBlocked(){  resolution=Resolution.BLOCKED;  combatIconTime=System.currentTimeMillis();  playSoundFromCategory(SoundLayer.FIGHTING_NOISE.groupName,"block");}  }
class C{  public void checkError() throws Exception {  Throwable err=errors.peek();  if (err != null) {    if (err instanceof Error)     throw (Error)err;    throw (Exception)err;  }  for (  GridTestThread thread : threads) {    thread.checkError();  }}  }
class C{  public static InfoRegister[] findFolder(User user,Integer bookId,List searchFields,String entidad) throws ValidationException, SecurityException, BookException, SessionException, TecDocException, ParseException, AttributesException {  InfoRegister[] result=null;  String sessionID=new String();  try {    sessionID=Login.login(user,entidad);    BookSession.openBook(sessionID,bookId,entidad);    AxSf axsfQ=RegisterServicesUtil.getQueryFormat(sessionID,bookId,entidad);    QueryFormat formatter=new QueryFormat(axsfQ.getFormat().getData());    Collection formatterFields=formatter.getDlgDef().getCtrldefs().values();    RegisterServicesUtil.validateQuery(sessionID,bookId,axsfQ,searchFields,entidad,user.getLocale(),formatterFields);    Map translatedIds=RegisterServicesUtil.getQueryFieldsWithSustitute(sessionID,bookId,axsfQ,searchFields,entidad,user.getLocale(),formatterFields);    AxSfQuery axsfQuery=RegisterServicesUtil.getQueryFolder(sessionID,bookId,searchFields,axsfQ,translatedIds,user.getLocale(),entidad);    result=Register.findFolder(sessionID,bookId,axsfQuery,user.getLocale(),entidad);  }  finally {    BookSession.closeBook(sessionID,bookId);    SecuritySession.logout(sessionID,entidad);  }  return result;}  }
class C{  public Circle(double newRadius){  radius=newRadius;  numberOfObjects++;}  }
class C{  public boolean onDown(float x,float y){  if (checkClicked(x,y)) {    setPressed(true);    return true;  }  return false;}  }
class C{  private static long parseTime(String time){  long unixTime=0;  try {    unixTime=Long.parseLong(time);  } catch (  NumberFormatException ex) {  }  return unixTime;}  }
class C{  public static synchronized BufferedImage loadBufferedImage(File file,int imageType){  BufferedImage image=null;  try {    URL url=file.toURI().toURL();    image=loadBufferedImage(url,imageType);  } catch (  MalformedURLException e) {    log.severe("File: " + file + " - "+ e.getMessage());  }  return image;}  }
class C{  public boolean supportsParameter(Object parameter){  EngineDescription cap=knownEngines.get(type);  if (cap == null) {    return true;  }  if (cap.supportsParameter == false) {    throw new InvalidParameterException("supportsParameter() not " + "used with " + type + " engines");  }  if ((parameter != null) && (parameter instanceof Key == false)) {    throw new InvalidParameterException("Parameter must be instanceof Key for engine " + type);  }  if (hasKeyAttributes() == false) {    return true;  }  if (parameter == null) {    return false;  }  Key key=(Key)parameter;  if (supportsKeyFormat(key)) {    return true;  }  if (supportsKeyClass(key)) {    return true;  }  return false;}  }
class C{  private Map<StandardMethod,UnderrideLevel> findUnderriddenMethods(Iterable<ExecutableElement> methods){  Map<StandardMethod,ExecutableElement> standardMethods=new LinkedHashMap<StandardMethod,ExecutableElement>();  for (  ExecutableElement method : methods) {    Optional<StandardMethod> standardMethod=maybeStandardMethod(method);    if (standardMethod.isPresent() && isUnderride(method)) {      standardMethods.put(standardMethod.get(),method);    }  }  if (standardMethods.containsKey(StandardMethod.EQUALS) != standardMethods.containsKey(StandardMethod.HASH_CODE)) {    ExecutableElement underriddenMethod=standardMethods.containsKey(StandardMethod.EQUALS) ? standardMethods.get(StandardMethod.EQUALS) : standardMethods.get(StandardMethod.HASH_CODE);    messager.printMessage(ERROR,"hashCode and equals must be implemented together on @FreeBuilder types",underriddenMethod);  }  ImmutableMap.Builder<StandardMethod,UnderrideLevel> result=ImmutableMap.builder();  for (  StandardMethod standardMethod : standardMethods.keySet()) {    if (standardMethods.get(standardMethod).getModifiers().contains(Modifier.FINAL)) {      result.put(standardMethod,UnderrideLevel.FINAL);    } else {      result.put(standardMethod,UnderrideLevel.OVERRIDEABLE);    }  }  return result.build();}  }
class C{  public int lastIndexOf(String subString,int start){  int subCount=subString.length();  if (subCount <= count && start >= 0) {    if (subCount > 0) {      if (start > count - subCount) {        start=count - subCount;      }      char firstChar=subString.charAt(0);      while (true) {        int i=start;        boolean found=false;        for (; i >= 0; --i) {          if (value[i] == firstChar) {            found=true;            break;          }        }        if (!found) {          return -1;        }        int o1=i, o2=0;        while (++o2 < subCount && value[++o1] == subString.charAt(o2)) {        }        if (o2 == subCount) {          return i;        }        start=i - 1;      }    }    return start < count ? start : count;  }  return -1;}  }
class C{  @HLEFunction(nid=0xAC9E70E6,version=271) public int sceJpegInitMJpeg(){  return 0;}  }
class C{  public boolean dragPortal(){  return (_editPortalFrame != null || _editDirectionFrame != null);}  }
class C{  public void putString(String key,String value){  unparcel();  mMap.put(key,value);}  }
class C{  public boolean isRemoteMediaLoaded() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  return isRemoteMoviePaused() || isRemoteMoviePlaying();}  }
class C{  public GeoConvexPolygon(final PlanetModel planetModel,final List<GeoPoint> pointList){  this(planetModel,pointList,null);}  }
class C{  protected void paint(SeaGlassContext context,Graphics g){  Rectangle clip=g.getClipBounds();  Rectangle bounds=table.getBounds();  bounds.x=bounds.y=0;  if (table.getRowCount() <= 0 || table.getColumnCount() <= 0 || !bounds.intersects(clip)) {    paintDropLines(context,g);    return;  }  boolean ltr=table.getComponentOrientation().isLeftToRight();  Point upperLeft=clip.getLocation();  if (!ltr) {    upperLeft.x++;  }  Point lowerRight=new Point(clip.x + clip.width - (ltr ? 1 : 0),clip.y + clip.height);  int rMin=table.rowAtPoint(upperLeft);  int rMax=table.rowAtPoint(lowerRight);  if (rMin == -1) {    rMin=0;  }  if (rMax == -1) {    rMax=table.getRowCount() - 1;  }  int cMin=table.columnAtPoint(ltr ? upperLeft : lowerRight);  int cMax=table.columnAtPoint(ltr ? lowerRight : upperLeft);  if (cMin == -1) {    cMin=0;  }  if (cMax == -1) {    cMax=table.getColumnCount() - 1;  }  if (!(table.getParent() instanceof JViewport) || (table.getParent() != null && !(table.getParent().getParent() instanceof JScrollPane))) {    paintStripesAndGrid(context,g,table,table.getWidth(),table.getHeight(),0);  }  paintCells(context,g,rMin,rMax,cMin,cMax);  paintDropLines(context,g);}  }
class C{  public boolean release(ServiceReference reference){  boolean ret=delegate.release((io.vertx.servicediscovery.ServiceReference)reference.getDelegate());  return ret;}  }
class C{  public boolean addRequiredFile(final String fileName){  if (getRequiredFiles() == null) {    setRequiredFiles(new LinkedList<String>());  }  boolean result=false;  for (int i=0; i < getRequiredFiles().size(); i++) {    final String temp=getRequiredFiles().get(i);    if (temp.equals(fileName)) {      result=true;      break;    }  }  if (!result) {    getRequiredFiles().add(fileName);  }  return result;}  }
class C{  public boolean isSquare(){  return columns == rows;}  }
class C{  public synchronized void addPaintListener(PaintListener l){  if (painters == null) {    painters=new PaintListenerSupport(this);  }  painters.add(l);}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  public EmptyScroll(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public Vector4f div(float x,float y,float z,float w){  this.x/=x;  this.y/=y;  this.z/=z;  this.w/=w;  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecdatasectionnodeattribute.class,args);}  }
class C{  public SecurityPermission(String name){  super(name);}  }
class C{  @Override public String generateLabel(XYDataset dataset,int series,int item){  return generateLabelString(dataset,series,item);}  }
class C{  public EqualsBuilder append(final float lhs,final float rhs){  if (isEquals == false) {    return this;  }  return append(Float.floatToIntBits(lhs),Float.floatToIntBits(rhs));}  }
class C{  @Override public void removeEventListener(IRcsServiceRegistrationListener listener){  if (sLogger.isActivated()) {    sLogger.info("Remove a service listener");  }synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.removeEventListener(listener);  }}  }
class C{  public void growStack(int diff){  setStackDepth(stackDepth + diff);}  }
class C{  public InstrumentationException(String message){  super(message);}  }
class C{  public Optional<ObaUserDataItem> loadItem(final ObaUserDataItem tableItem){  DynamoDBMapper mapper=createDynamoDBMapper();  ObaUserDataItem item=mapper.load(tableItem);  return Optional.ofNullable(item);}  }
class C{  public static CCSpriteFrame frame(CCTexture2D texture,CGRect rect,CGPoint offset,CGSize originalSize){  return new CCSpriteFrame(texture,rect,offset,originalSize,false);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  final long wait=5000;  if (PingTestServlet.startTime == 0) {    PingTestServlet.startTime=System.currentTimeMillis();  }  long timeElapsed=System.currentTimeMillis() - PingTestServlet.startTime;  if (timeElapsed < wait) {    PingTestServlet.logger.info("PingTestServlet - remaining milliseconds before OK: " + (wait - timeElapsed));    throw new IOException("The servlet is not ready yet");  } else {    response.getWriter().write("Servlet is now ready");  }}  }
class C{  public void declareBean(BSFDeclaredBean bean) throws BSFException {  shell.setVariable(bean.name,bean.bean);}  }
class C{  @Override public void updateServerAddress(Application application,String dockerManagerIP,String serverPort,String serverManagerPort){  String suffixCloudUnit=application.getSuffixCloudUnitIO();  JedisPool pool=null;  Jedis jedis=null;  try {    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);    jedis=pool.getResource();    String subNameSpace=concatSubNameSpace(application);    String key=subNameSpace + suffixCloudUnit;    String frontend="frontend:" + key.toLowerCase();    jedis.lset(frontend,1,"http://" + dockerManagerIP + ":"+ serverPort);    String frontendServerManager="frontend:manager-" + key.toLowerCase();    jedis.lset(frontendServerManager,1,"http://" + dockerManagerIP + ":"+ serverManagerPort);  } catch (  JedisConnectionException|UnsupportedEncodingException e) {    logger.error("HipacheRedisUtils Exception",e);  } finally {    if (jedis != null) {      pool.destroy();    }  }}  }
class C{  public void goBackFromFragment(int display){  this.display=display;  setupContainer();}  }
class C{  public BST(E[] objects){  for (int i=0; i < objects.length; i++)   insert(objects[i]);}  }
class C{  public static boolean isAddAllPermitted(Field destination,Field source){  boolean isFirst=true;  boolean isAddAllFunction=true;  boolean isPutAllFunction=false;  return isAssignableFrom(getGenericString(destination),getGenericString(source),destination.getType(),source.getType(),isFirst,isAddAllFunction,isPutAllFunction);}  }
class C{  private float sizeOfBlackWhiteBlackRun(int fromX,int fromY,int toX,int toY){  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx >> 1;  int xstep=fromX < toX ? 1 : -1;  int ystep=fromY < toY ? 1 : -1;  int state=0;  int xLimit=toX + xstep;  for (int x=fromX, y=fromY; x != xLimit; x+=xstep) {    int realX=steep ? y : x;    int realY=steep ? x : y;    if ((state == 1) == image.get(realX,realY)) {      if (state == 2) {        return MathUtils.distance(x,y,fromX,fromY);      }      state++;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  if (state == 2) {    return MathUtils.distance(toX + xstep,toY,fromX,fromY);  }  return Float.NaN;}  }
class C{  public Version version(){  return version;}  }
class C{  public ListProperty(T... values){  this.values=new ArrayList<T>(Arrays.asList(values));}  }
class C{  public String unambiguousAbbreviationFor(String item){  String abbrev=itemToAbbrev.get(item);  return abbrev != null ? abbrev : item;}  }
class C{  public void testSetRosterEntry(){  BasicRosterEntry re=null;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setRosterEntry(re);}  }
class C{  protected void retainReferent(TraceLocal trace,ObjectReference reference){  if (VM.VerifyAssertions)   VM._assert(!reference.isNull());  if (VM.VerifyAssertions)   VM._assert(semantics == Semantics.SOFT);  if (TRACE_DETAIL) {    VM.sysWrite("Processing reference: ",reference);  }  if (!trace.isLive(reference)) {    return;  }  ObjectReference referent=getReferent(reference);  if (!referent.isNull())   trace.retainReferent(referent);  if (TRACE_DETAIL) {    VM.sysWriteln(" ~> ",referent.toAddress()," (retained)");  }}  }
class C{  public BerInputStream(byte[] encoded,int offset,int expectedLength) throws IOException {  this.in=null;  this.buffer=encoded;  this.offset=offset;  next();  if (length != INDEFINIT_LENGTH && (offset + expectedLength) != (this.offset + this.length)) {    throw new ASN1Exception("Wrong content length");  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.374 -0500",hash_original_method="DF3968C57E4B66E8EEB56F2D4C42BFD9",hash_generated_method="CE35ED7BBE94E4F223A30792FE6D307D") private boolean scrollAndFocus(int direction,int left,int right){  boolean handled=true;  int width=getWidth();  int containerLeft=getScrollX();  int containerRight=containerLeft + width;  boolean goLeft=direction == View.FOCUS_LEFT;  View newFocused=findFocusableViewInBounds(goLeft,left,right);  if (newFocused == null) {    newFocused=this;  }  if (left >= containerLeft && right <= containerRight) {    handled=false;  } else {    int delta=goLeft ? (left - containerLeft) : (right - containerRight);    doScrollX(delta);  }  if (newFocused != findFocus())   newFocused.requestFocus(direction);  return handled;}  }
class C{  public void processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException {  if (outOff + len > out.length) {    throw new DataLengthException("output buffer too small in processBytes()");  }  for (int i=0; i != len; i++) {    cipher.processBlock(in,inOff + i,out,outOff + i);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:30.764 -0500",hash_original_method="19036A7D1DADA943DC912DAB6396B9AD",hash_generated_method="6C0E3EFDD2ACA49FF7AF90314964240F") private boolean regCodeIsRoaming(int code){  return 5 == code;}  }
class C{  public static void main(String[] args){  int[] list={2,3,2,5,6,1,-2,3,14,12};  quickSort(list);  for (int i=0; i < list.length; i++)   System.out.print(list[i] + " ");  System.out.println();}  }
class C{  public static String post(String url,JSONObject json) throws UtilException {  return post(null,url,"application/json",json.toJSONString());}  }
class C{  public static double max(final double a,final double b){  if (a > b) {    return a;  }  if (a < b) {    return b;  }  if (a != b) {    return Double.NaN;  }  long bits=Double.doubleToRawLongBits(a);  if (bits == 0x8000000000000000L) {    return b;  }  return a;}  }
class C{  public ContingencyMatrix(double[][] contigencyMatrix){  this.matrix=new double[contigencyMatrix.length][];  for (int i=0; i < matrix.length; i++) {    this.matrix[i]=new double[contigencyMatrix[i].length];    System.arraycopy(contigencyMatrix[i],0,this.matrix[i],0,this.matrix[i].length);  }  double totalSum=0;  this.rowSums=new double[this.matrix.length];  for (int row=0; row < this.rowSums.length; row++) {    double prior=0;    double[] entries=this.matrix[row];    for (int i=0; i < entries.length; i++) {      prior+=entries[i];    }    this.rowSums[row]=prior;    totalSum+=prior;  }  this.total=totalSum;  this.colSums=new double[this.matrix.length > 0 ? this.matrix[0].length : 0];  for (int col=0; col < colSums.length; col++) {    double sum=0;    for (int i=0; i < this.matrix.length; i++) {      sum+=this.matrix[i][col];    }    this.colSums[col]=sum;  }}  }
