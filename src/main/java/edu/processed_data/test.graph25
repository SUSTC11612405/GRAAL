class C{  private static String pack(String value,int len,boolean prepend,char pad){  int vlen=value.length();  if (vlen < len) {    StringBuffer sbuf=new StringBuffer();    if (prepend)     sbuf.append(value);    for (int i=len; i < vlen; ++i)     sbuf.append(pad);    if (!prepend)     sbuf.append(value);    return sbuf.toString();  } else {    return value.substring(0,len);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Disease_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201128,value0);}  }
class C{  public static int handle(BiomeColor color){  OpenModLoader.getEventBus().post(color);  return color.getColorModifier();}  }
class C{  public static long create(V v){  String s=(String)v.value("password");  if (s != null) {    v.set("password",encrypt(s),true);  }  Long id=(Long)v.value("id");  if (id == null) {    id=UID.next("user.id");    try {      while (Helper.exists(id,User.class)) {        id=UID.next("user.id");      }    } catch (    Exception e1) {      log.error(e1.getMessage(),e1);    }  }  if (log.isDebugEnabled())   log.debug("v=" + v);  Helper.insert(v.set(X.ID,id).set("created",System.currentTimeMillis()).set("updated",System.currentTimeMillis()),User.class);  return id;}  }
class C{  @Override public void saveFile(URL urlToSave){  String sldContents=getSLDString();  SLDDataInterface sldData=SLDEditorFile.getInstance().getSLDData();  sldData.updateSLDContents(sldContents);  saveSLDData(sldData);  SLDEditorFile.getInstance().fileOpenedSaved();  UndoManager.getInstance().fileSaved();}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public Element generateSimpleElement(final Document document,final String rootName,final Object pojo,final List<String> attributes) throws ParserConfigurationException, IllegalAccessException, InstantiationException {  Element rootNode=document.createElementNS(getDefaultNamespace(),rootName);  List<Field> fields=getNonTransientSimpleFields(pojo.getClass());  for (  Field field : fields) {    field.setAccessible(true);    String fieldName=field.getName();    if (field.get(pojo) != null) {      if (!attributes.contains(fieldName)) {        Element element=document.createElementNS(getDefaultNamespace(),getElementName(field));        if (field.isAnnotationPresent(XmlValue.class)) {          CDATASection cdata=document.createCDATASection(field.get(pojo).toString());          element.appendChild(cdata);        } else {          element.setTextContent(field.get(pojo).toString());        }        rootNode.appendChild(element);      } else {        rootNode.setAttribute(getAttributeName(field),field.get(pojo).toString());      }    }  }  return rootNode;}  }
class C{  public TimeDifferenceMovingAverageTimeDeadbandActivator(final int windowSize,final long minDiff,final int timeDeadbandTime){  this(windowSize,minDiff,minDiff * 2,timeDeadbandTime);}  }
class C{  public void write(OutputStream out) throws IOException {  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(out,"UTF8"));  bw.write(HEADER_TITLE + "1.0\n");  bw.write(PREF_PREFIX + " " + defaultPreference+ "\n\n");  writeMap(completeNamePrefs,bw,"");  writeMap(packagePrefs,bw,"/*");  writeMap(namespacePrefs,bw,"/-");  bw.flush();}  }
class C{  public BinomialDistribution(int trials,double p) throws MathIllegalArgumentException {  if (trials < 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_OF_TRIALS,trials);  }  MathUtils.checkRangeInclusive(p,0,1);  probabilityOfSuccess=p;  numberOfTrials=trials;}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  @Override public boolean isCellEditable(int row,int col){  if (isConnectedToDataSource) {    if (col != FIELD_COLUMN_ID) {      return true;    } else {      return false;    }  } else {    return true;  }}  }
class C{  public PriorityQueue priorityQueue(int concurrency,PriorityQueue.PriorityComparator comparator,int defaultPriority){  return new PriorityQueue(this.executor_,concurrency,comparator,defaultPriority);}  }
class C{  public static String convertToARGB(int color){  String alpha=Integer.toHexString(Color.alpha(color));  String red=Integer.toHexString(Color.red(color));  String green=Integer.toHexString(Color.green(color));  String blue=Integer.toHexString(Color.blue(color));  if (alpha.length() == 1) {    alpha="0" + alpha;  }  if (red.length() == 1) {    red="0" + red;  }  if (green.length() == 1) {    green="0" + green;  }  if (blue.length() == 1) {    blue="0" + blue;  }  return "#" + alpha + red+ green+ blue;}  }
class C{  protected void updateWeights(){  Iterator<WeightedEdge> iCurEdge=EdgeDistros.keySet().iterator();  while (iCurEdge.hasNext()) {    WeightedEdge eCur=iCurEdge.next();    eCur.setWeight(((Distribution)EdgeDistros.get(eCur)).average(false));  }}  }
class C{  public static String toString(IGSEntry entry){  if (entry.getMapEntry() == null) {    StringBuilder sb=new StringBuilder();    sb.append("Entry<");    sb.append(entry.getClassName());    sb.append(", UID: " + entry.getUID());    String[] fieldNames=entry.getFieldsNames();    if (fieldNames != null) {      sb.append(entry.isTransient() ? ", *transient*" : "");      sb.append(", Fields: ");      for (int i=0; i < fieldNames.length; ++i) {        Object value=entry.getFieldValue(i);        sb.append(fieldNames[i]);        sb.append(": ");        sb.append(value);        sb.append(", ");      }    }    sb.append(">");    return sb.toString();  }  return entry.getMapEntry().toString();}  }
class C{  private void updateSkillEnabledStates(){  if (talismanSkillContainers[0].getSkillTree() != null) {    talismanSkillContainers[1].setEnabled(true);  } else {    if (talismanSkillContainers[1].getSkillTree() != null) {      talismanSkillContainers[1].setSkillTree(null);    }    talismanSkillContainers[1].setEnabled(false);  }}  }
class C{  private void validateAndLoadDefaultProperties(){  if (null == carbonProperties.getProperty(CarbonCommonConstants.STORE_LOCATION)) {    carbonProperties.setProperty(CarbonCommonConstants.STORE_LOCATION,CarbonCommonConstants.STORE_LOCATION_DEFAULT_VAL);  }  validateBlockletSize();  validateNumCores();  validateNumCoresBlockSort();  validateSortSize();  validateBadRecordsLocation();  validateHighCardinalityIdentify();  validateHighCardinalityThreshold();  validateHighCardinalityInRowCountPercentage();}  }
class C{  public static <T extends Serializable,R>DistributedTask<T,R> task(Runnable runnable,AsyncResultsReducer<T,R> reducer,AsyncResultFilter<T> filter){  return new RunnableDistributedTaskAdapter<T,R>(runnable,reducer,filter);}  }
class C{  public boolean interiorContains(final S1Interval y){  if (isInverted()) {    if (!y.isInverted()) {      return y.lo() > lo() || y.hi() < hi();    }    return (y.lo() > lo() && y.hi() < hi()) || y.isEmpty();  } else {    if (y.isInverted()) {      return isFull() || y.isEmpty();    }    return (y.lo() > lo() && y.hi() < hi()) || isFull();  }}  }
class C{  public TIntArrayList subList(int begin,int end){  if (end < begin)   throw new IllegalArgumentException("end index " + end + " greater than begin index "+ begin);  if (begin < 0)   throw new IndexOutOfBoundsException("begin index can not be < 0");  if (end > _data.length)   throw new IndexOutOfBoundsException("end index < " + _data.length);  TIntArrayList list=new TIntArrayList(end - begin);  for (int i=begin; i < end; i++) {    list.add(_data[i]);  }  return list;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_MAGIC_OTHER_NPC(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1260221,skilltarget,skillcaster);}  }
class C{  public static void requiredAttributes(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {  for (  String name : attributeNames) {    String attributeValue=element.getAttribute(name);    if (attributeValue.length() == 0) {      handleError("Required attribute \"" + name + "\" is missing.",method,element);    }  }}  }
class C{  public static void checkRowIndex(final AnyMatrix m,final int row) throws MathIllegalArgumentException {  if (row < 0 || row >= m.getRowDimension()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.ROW_INDEX,row,0,m.getRowDimension() - 1);  }}  }
class C{  private boolean isValidNickname(String name){  return LegionConfig.NICKNAME_PATTERN.matcher(name).matches();}  }
class C{  @Override public void onCanceled(){}  }
class C{  public String matchPredicate(String alias,String idParameterName){  Objects.requireNonNull(alias,"alias cannot be null");  Objects.requireNonNull(idParameterName,"idParameterName cannot be null");  Neo4JReadPartition partition=graph.getPartition();  return vertexIdProvider.matchPredicateOperand(alias) + " = {" + idParameterName+ "}"+ (partition.usesMatchPredicate() ? " AND (" + partition.vertexMatchPredicate(alias) + ")" : "");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stun_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200759,skilltarget);}  }
class C{  public void reset(){  m_offscreen=null;  m_queue.clean();}  }
class C{  private static void addDefaultProfile(SpringApplication app,SimpleCommandLinePropertySource source){  if (!source.containsProperty("spring.profiles.active") && !System.getenv().containsKey("SPRING_PROFILES_ACTIVE")) {    app.setAdditionalProfiles(Constants.SPRING_PROFILE_DEVELOPMENT);  }}  }
class C{  private boolean tryInsert(EntryArrivedRemoteEvent theEvent){  SingleProducer producer=getProducer(theEvent);  long max=producer.maxInQueue.get();  long sequenceNumber=theEvent.getSequenceNumber();  if (sequenceNumber < max || producer.orderedEventsMap.size() < _maxCapacity) {    boolean updateMax=false;    while (!updateMax) {      updateMax=producer.maxInQueue.compareAndSet(max,Math.max(max,sequenceNumber));      if (!updateMax) {        max=producer.maxInQueue.get();        if (sequenceNumber < max)         break;      }    }    producer.orderedEventsMap.put(sequenceNumber,theEvent);    boolean isNextInOrder=producer.nextInProducerOrder.compareAndSet(sequenceNumber,sequenceNumber + 1);    if (isNextInOrder) {      handleReadyEvent(producer,theEvent.getSpaceUuid());      for (long i=sequenceNumber + 1; i <= producer.maxInQueue.get(); i++) {        if (producer.orderedEventsMap.containsKey(i)) {          boolean succeeded=producer.nextInProducerOrder.compareAndSet(i,i + 1);          if (succeeded) {            handleReadyEvent(producer,theEvent.getSpaceUuid());          }        } else {          break;        }      }    }    return true;  }  return false;}  }
class C{  boolean remove(BinarySearchTreeNode<E> node){  if (node == null)   return false;  if (this.root == null)   return false;  if (this.contains(node)) {    this.removeNode(node);    return true;  }  return false;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void addColumn(String name,String expr){  Expression ex=ExpressionParser.parse(expr);  Throwable t=ExpressionParser.getError();  if (t != null) {    throw new RuntimeException(t);  } else {    addColumn(name,ex);  }}  }
class C{  private boolean canCreateLegion(Player activePlayer,String legionName){  if (!isValidName(legionName)) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CREATE_INVALID_GUILD_NAME);    return false;  } else   if (!isFreeName(legionName)) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CREATE_SAME_GUILD_EXIST);    return false;  } else   if (activePlayer.isLegionMember()) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CREATE_ALREADY_BELONGS_TO_GUILD);    return false;  } else   if (activePlayer.getInventory().getKinah() < LegionConfig.LEGION_CREATE_REQUIRED_KINAH) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CREATE_NOT_ENOUGH_MONEY);    return false;  }  return true;}  }
class C{  public boolean isLocked(){  return getInt("locked") > 0;}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  protected GroupsGetInvitedUsersQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public boolean shouldContinue(SymbolMaskEnum level){  return (maskList.contains(level));}  }
class C{  public S2LatLngRect union(S2LatLngRect other){  return new S2LatLngRect(lat.union(other.lat),lng.union(other.lng));}  }
class C{  @Override public Authentication attemptAuthentication(HttpServletRequest request,HttpServletResponse response) throws AuthenticationException, IOException, ServletException {  boolean isLogin=StringUtils.getValidString(request.getRequestURI()).contains(USER_LOGIN);  if (isLogin) {    return new UsernamePasswordAuthenticationToken(null,null);  }  String header=request.getHeader(HEADER_AUTHORIZATION);  if (header == null || !header.startsWith(BEARER_PREFIX))   throw new JwtTokenMissingException("Invalid authentication");  String authToken=header.substring(7);  JwtAuthenticationToken authRequest=new JwtAuthenticationToken(authToken);  return getAuthenticationManager().authenticate(authRequest);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public void registerListener(FCMListener fcmListener){  this.mFCMListener=fcmListener;}  }
class C{  private static DataStore readCacheFileAsFallback(@Nonnull final DataReader reader,@Nonnull final File cacheFile,@Nonnull final Charset charset,@Nonnull final DataStore fallback){  DataStore fallbackDataStore;  if (!isEmpty(cacheFile,charset)) {    final URL cacheFileUrl=UrlUtil.toUrl(cacheFile);    try {      fallbackDataStore=new CacheFileDataStore(reader.read(cacheFileUrl,charset),reader,cacheFileUrl,charset);      LOG.debug(MSG_CACHE_FILE_IS_FILLED);    } catch (    final RuntimeException e) {      fallbackDataStore=fallback;      deleteCacheFile(cacheFile);    }  } else {    fallbackDataStore=fallback;    LOG.debug(MSG_CACHE_FILE_IS_EMPTY);  }  return fallbackDataStore;}  }
class C{  public boolean isTransientIdentifiableProperties(){  return transientIdentifiableProperties;}  }
class C{  public ColorAnimator(){  super();  setColorFields(DEFAULTS);}  }
class C{  public boolean isCurrent(EGLSurface eglSurface){  return eGLContext.equals(EGL14.eglGetCurrentContext()) && eglSurface.equals(EGL14.eglGetCurrentSurface(EGL14.EGL_DRAW));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDARTIFACT_FIRE(String value1,String value0,String value2){  return new SM_SYSTEM_MESSAGE(1400316,value1,value0,value2);}  }
class C{  void exitScope(){  locals.pop();}  }
class C{  public Row(byte[] bytes,int length){  set(bytes,0,length);}  }
class C{  private void printHelp(){  HelpFormatter formatter=new HelpFormatter();  formatter.setWidth(140);  formatter.printHelp("ResponderDriver",cliOptions);}  }
class C{  public static void main(String[] args){  boolean showTimes=false;  String srcPath=".";  String destPath=".";  try {    if (args.length > 0) {      BulkTimer timer=new BulkTimer();      timer.start();      for (int i=0; i < args.length; i++) {        if (args[i].equals("-src")) {          srcPath=args[++i];        } else         if (args[i].equals("-dest")) {          destPath=args[++i];        } else         if (args[i].equals("-generate_binary")) {          String name="clunits.txt";          if (i + 1 < args.length) {            String nameArg=args[++i];            if (!nameArg.startsWith("-")) {              name=nameArg;            }          }          int suffixPos=name.lastIndexOf(".txt");          String binaryName="clunits.bin";          if (suffixPos != -1) {            binaryName=name.substring(0,suffixPos) + ".bin";          }          System.out.println("Loading " + name);          timer.start("load_text");          ClusterUnitDatabase udb=new ClusterUnitDatabase(new URL("file:" + srcPath + "/"+ name),false);          timer.stop("load_text");          System.out.println("Dumping " + binaryName);          timer.start("dump_binary");          udb.dumpBinary(destPath + "/" + binaryName);          timer.stop("dump_binary");        } else         if (args[i].equals("-compare")) {          timer.start("load_text");          ClusterUnitDatabase udb=new ClusterUnitDatabase(new URL("file:./cmu_time_awb.txt"),false);          timer.stop("load_text");          timer.start("load_binary");          ClusterUnitDatabase budb=new ClusterUnitDatabase(new URL("file:./cmu_time_awb.bin"),true);          timer.stop("load_binary");          timer.start("compare");          if (udb.compare(budb)) {            System.out.println("other compare ok");          } else {            System.out.println("other compare different");          }          timer.stop("compare");        } else         if (args[i].equals("-showtimes")) {          showTimes=true;        } else {          System.out.println("Unknown option " + args[i]);        }      }      timer.stop();      if (showTimes) {        timer.show("ClusterUnitDatabase");      }    } else {      System.out.println("Options: ");      System.out.println("    -src path");      System.out.println("    -dest path");      System.out.println("    -compare");      System.out.println("    -generate_binary");      System.out.println("    -showTimes");    }  } catch (  IOException ioe) {    System.err.println(ioe);  }}  }
class C{  private void addBlockBasedOnMinMaxValue(FilterExecuter filterExecuter,List<DataRefNode> listOfDataBlocksToScan,DataRefNode dataRefNode,SegmentProperties segmentProperties){  BitSet bitSet=filterExecuter.isScanRequired(dataRefNode.getColumnsMaxValue(),dataRefNode.getColumnsMinValue());  if (!bitSet.isEmpty()) {    listOfDataBlocksToScan.add(dataRefNode);  }}  }
class C{  public HashMutableDirectedGraph<EquivalentValue> triviallyConservativeInfoFlowAnalysis(SootMethod sm){  HashSet<EquivalentValue> fieldsStaticsParamsAccessed=new HashSet<EquivalentValue>();  for (int i=0; i < sm.getParameterCount(); i++) {    EquivalentValue parameterRefEqVal=InfoFlowAnalysis.getNodeForParameterRef(sm,i);    fieldsStaticsParamsAccessed.add(parameterRefEqVal);  }  for (Iterator<SootField> it=sm.getDeclaringClass().getFields().iterator(); it.hasNext(); ) {    SootField sf=it.next();    if (sf.isStatic() || !sm.isStatic()) {      EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,sf);      fieldsStaticsParamsAccessed.add(fieldRefEqVal);    }  }  SootClass superclass=sm.getDeclaringClass();  if (superclass.hasSuperclass())   superclass=sm.getDeclaringClass().getSuperclass();  while (superclass.hasSuperclass()) {    Iterator<SootField> scFieldsIt=superclass.getFields().iterator();    while (scFieldsIt.hasNext()) {      SootField scField=scFieldsIt.next();      if (scField.isStatic() || !sm.isStatic()) {        EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,scField);        fieldsStaticsParamsAccessed.add(fieldRefEqVal);      }    }    superclass=superclass.getSuperclass();  }  HashMutableDirectedGraph<EquivalentValue> dataFlowGraph=new MemoryEfficientGraph<EquivalentValue>();  Iterator<EquivalentValue> accessedIt1=fieldsStaticsParamsAccessed.iterator();  while (accessedIt1.hasNext()) {    EquivalentValue o=accessedIt1.next();    dataFlowGraph.addNode(o);  }  ParameterRef returnValueRef=null;  if (sm.getReturnType() != VoidType.v()) {    returnValueRef=new ParameterRef(sm.getReturnType(),-1);    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForReturnRef(sm));  }  if (!sm.isStatic()) {    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForThisRef(sm));    fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForThisRef(sm));  }  accessedIt1=fieldsStaticsParamsAccessed.iterator();  while (accessedIt1.hasNext()) {    EquivalentValue r=accessedIt1.next();    Ref rRef=(Ref)r.getValue();    if (!(rRef.getType() instanceof RefLikeType) && !dfa.includesPrimitiveInfoFlow())     continue;    Iterator<EquivalentValue> accessedIt2=fieldsStaticsParamsAccessed.iterator();    while (accessedIt2.hasNext()) {      EquivalentValue s=accessedIt2.next();      Ref sRef=(Ref)s.getValue();      if (rRef instanceof ThisRef && sRef instanceof InstanceFieldRef)       ; else       if (sRef instanceof ThisRef && rRef instanceof InstanceFieldRef)       ; else       if (sRef.getType() instanceof RefLikeType)       dataFlowGraph.addEdge(r,s);    }    if (returnValueRef != null && (returnValueRef.getType() instanceof RefLikeType || dfa.includesPrimitiveInfoFlow()))     dataFlowGraph.addEdge(r,InfoFlowAnalysis.getNodeForReturnRef(sm));  }  return dataFlowGraph;}  }
class C{  @SuppressWarnings("UnusedParameters") void onStart(@Nullable Module module,@Nullable VirtualFile workingDir,@NotNull String... args){}  }
class C{  public ControlAttributionOptions build(){  ControlAttributionOptions options=new ControlAttributionOptions();  options.position=this.position;  options.prefix=this.prefix;  return options;}  }
class C{  public MixtureMultivariateNormalDistribution(RandomGenerator rng,List<Pair<Double,MultivariateNormalDistribution>> components) throws MathIllegalArgumentException {  super(rng,components);}  }
class C{  public boolean isHead(){  return parent == null;}  }
class C{  public String optString(int index,String defaultValue){  Object o=opt(index);  return o != null ? o.toString() : defaultValue;}  }
class C{  public SpearmansCorrelation(){  this(new NaturalRanking());}  }
class C{  public void conform(){  Iterator<QueryItem> filterIter=filters.iterator();  while (filterIter.hasNext()) {    QueryItem filter=filterIter.next();    int index=attributes.indexOf(filter);    if (index >= 0) {      QueryItem attribute=attributes.get(index);      if (!attribute.hasFilter() && filter.hasFilter()) {        attribute.getFilters().addAll(filter.getFilters());      }      filterIter.remove();    }  }}  }
class C{  public static String millisecondsToString(long milliseconds,SimpleDateFormat dateFormat){  return dateFormat.format(new Date(milliseconds));}  }
class C{  public String toXML(){  StringBuffer str=new StringBuffer(50);  str.append("  <ConfigurationElementReport>\n");  str.append("    <action>");  str.append(this.action);  str.append("</action>\n");  str.append("    <entity>");  str.append(this.entity);  str.append("</entity>\n");  str.append("    <id>");  str.append(this.id);  str.append("</id>\n");  str.append("    <status>");  str.append(this.status);  str.append("</status>\n");  if (this.statusMessage != null) {    str.append("    <status-message><![CDATA[");    str.append(this.statusMessage);    str.append("]]></status-message>\n");  }  if (!subreports.isEmpty()) {    str.append("<sub-reports>\n");    for (    ConfigurationElementReport subReport : subreports) {      str.append(((ConfigurationElementReport)subReport).toXML());    }    str.append("</sub-reports>\n");  }  str.append("  </ConfigurationElementReport>\n");  return str.toString();}  }
class C{  public void addMessage(Message message){  if (SHOW_LOGS)   Logger.v(TAG,">> addMessage, lock " + message);  mQueueLock.lock(TAG);  mPlayerMessagesQueue.add(message);  mQueueLock.notify(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"<< addMessage, unlock " + message);  mQueueLock.unlock(TAG);}  }
class C{  public boolean allowedAsPathParameter(){  return allowedAsPathParameter;}  }
class C{  public DefaultMovieInfoProvider(String fileToSave){  this(MovieUtils.createMediaLocator(fileToSave));}  }
class C{  public void end(){  if (!hasStarted)   throw new RuntimeException("timer " + name + " has not been started!");  hasStarted=false;  duration+=nanoTime() - startTime;  if (!G.v().Timer_isGarbageCollecting) {    G.v().Timer_outstandingTimers.remove(this);  }}  }
class C{  private void pushChar(){  buf.append(getLITERAL().charAt(idx++));}  }
class C{  public MnistLabelFile(String name,String mode) throws IOException {  super(name,mode);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public BoxFile uploadFile(String folderId,String filename,String filecontent) throws BoxSDKServiceException {  try {    BoxFile uploadFile=getFileByName(folderId,filename);    if (uploadFile == null) {      logger.debug("Upload a new file named: {} to folder: {}",filename,folderId);      BoxFolder boxFolder=new BoxFolder(getBoxAPIConnection(),folderId);      BoxFile.Info uploadFileInfo=boxFolder.uploadFile(IOUtils.toInputStream(filecontent,StandardCharsets.UTF_8),filename);      uploadFile=uploadFileInfo.getResource();      logger.debug("Uploaded new file, id: " + uploadFile.getID() + ", name: "+ filename);    } else {      logger.debug("Upload a new version of file named: {} to folder: {}",filename,folderId);      uploadFile.uploadVersion(IOUtils.toInputStream(filecontent));      logger.debug("Uploaded new version of file, id: " + uploadFile.getID() + ", name: "+ filename);    }    return uploadFile;  } catch (  BoxAPIException e) {    String msg="Can't upload file: " + filename + ", in folder id: "+ folderId;    logger.error(msg,e);    throw new BoxSDKServiceException(msg,e);  }}  }
class C{  public static <T extends Enum<T>>T forKey(String key,Map<String,T> mapping,Class<T> enumeration){  T t=mapping.get(key);  if (t != null) {    return t;  }  throw new IllegalArgumentException("Not an alternate key for " + enumeration.toString() + ": "+ key);}  }
class C{  public int read(byte b[]) throws IOException, LogException {  if (length < b.length)   badRead(b.length);  int len=in.read(b);  length-=len;  return len;}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public void addSymbolizerToRule(Symbolizer newSymbolizer){  if (this.symbolData.getRule() == null) {    ConsoleManager.getInstance().error(this,"rule == null");  } else {    List<Symbolizer> symbolizerList=(List<Symbolizer>)this.symbolData.getRule().symbolizers();    symbolizerList.add(newSymbolizer);  }}  }
class C{  public PrefixSearchTupleSet(){  this(false);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_Instant_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200364,num0,skillname);}  }
class C{  public boolean isFull(){  return height >= 2;}  }
class C{  protected void jimplifyVirtual(DexBody body){  SootMethodRef ref=getSootMethodRef();  if (ref.declaringClass().isInterface()) {    methodRef=null;    jimplifyInterface(body);    return;  }  List<Local> parameters=buildParameters(body,false);  invocation=Jimple.v().newVirtualInvokeExpr(parameters.get(0),ref,parameters.subList(1,parameters.size()));  body.setDanglingInstruction(this);}  }
class C{  public static double[] convolve(final double[] signal1,final double[] signal2,double deltaT){  double[] result=convolve(signal1,signal2);  for (int i=0; i < result.length; i++) {    result[i]*=deltaT;  }  return result;}  }
class C{  public boolean isContinuousFeature(String featureName){  try {    int index=getFeatureIndex(featureName);    return isContinuousFeature(index);  } catch (  Exception e) {    return false;  }}  }
class C{  public VideoGetQuery videos(List<String> value){  return unsafeParam("videos",value);}  }
class C{  public PhotosGetMarketUploadServerQuery cropX(Integer value){  return unsafeParam("crop_x",value);}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder("Matrix4f\n[\n");  result.append(" ");  result.append(m00);  result.append("  ");  result.append(m01);  result.append("  ");  result.append(m02);  result.append("  ");  result.append(m03);  result.append(" \n");  result.append(" ");  result.append(m10);  result.append("  ");  result.append(m11);  result.append("  ");  result.append(m12);  result.append("  ");  result.append(m13);  result.append(" \n");  result.append(" ");  result.append(m20);  result.append("  ");  result.append(m21);  result.append("  ");  result.append(m22);  result.append("  ");  result.append(m23);  result.append(" \n");  result.append(" ");  result.append(m30);  result.append("  ");  result.append(m31);  result.append("  ");  result.append(m32);  result.append("  ");  result.append(m33);  result.append(" \n]");  return result.toString();}  }
class C{  public double calcCoexistenceImportance(String sNode){  VertexImpl v=new VertexImpl();  v.setLabel(sNode);  return calcCoexistenceImportance(v);}  }
class C{  public static byte[] decode(byte[] in,int len){  final int inLength=Math.min(in.length,len);  ByteArrayOutputStream output=new ByteArrayOutputStream((inLength / 4) * 3 + 3);  int[] pos=new int[1];  try {    while (pos[0] < inLength) {      int byteTripletAsInt=0;      for (int j=0; j < 4; j++) {        byte c=getNextByte(in,pos,inLength);        if (c == END_OF_INPUT || c == PAD_AS_BYTE) {switch (j) {case 0:case 1:            return (c == END_OF_INPUT) ? output.toByteArray() : null;case 2:          if (c == END_OF_INPUT) {            return checkNoTrailingAndReturn(output,in,pos[0],inLength);          }        pos[0]++;      c=getNextByte(in,pos,inLength);    if (c == END_OF_INPUT) {      return checkNoTrailingAndReturn(output,in,pos[0],inLength);    }  if (c == PAD_AS_BYTE) {    byteTripletAsInt>>=4;    output.write(byteTripletAsInt);    return checkNoTrailingAndReturn(output,in,pos[0],inLength);  }return null;case 3:if (c == PAD_AS_BYTE) {byteTripletAsInt>>=2;output.write(byteTripletAsInt >> 8);output.write(byteTripletAsInt & 0xff);}return checkNoTrailingAndReturn(output,in,pos[0],inLength);}} else {byteTripletAsInt<<=6;byteTripletAsInt+=(c & 0xff);pos[0]++;}}output.write(byteTripletAsInt >> 16);output.write((byteTripletAsInt >> 8) & 0xff);output.write(byteTripletAsInt & 0xff);}return checkNoTrailingAndReturn(output,in,pos[0],inLength);} catch (InvalidBase64ByteException e) {return null;}}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public void onAddPressed(View v){  addWebSite();}  }
class C{  public boolean isChecked(){  return mChecked;}  }
class C{  private void notifyListeners(Heartbeat heartbeat){synchronized (listeners) {    for (    HeartbeatListener listener : listeners) {      listener.notifyHeartbeat(heartbeat);    }  }}  }
class C{  public synchronized ChangeReport onProcessConfigurationUpdate(final ProcessConfigurationUpdate processConfigurationUpdate){  ChangeReport changeReport=new ChangeReport(processConfigurationUpdate);  long processId=processConfigurationUpdate.getProcessId();  ProcessConfiguration configuration=ProcessConfigurationHolder.getInstance();  try {    if (processId == configuration.getProcessID()) {synchronized (configuration) {        configurationUpdater.updateProcessConfiguration(processConfigurationUpdate,configuration);      }      changeReport.appendInfo("Process with id " + processId + " successfully updated.");      changeReport.setState(CHANGE_STATE.SUCCESS);    } else {      changeReport.appendError("The process id of this DAQ is " + configuration.getProcessID() + " not "+ processId+ ".");    }  } catch (  Exception e) {    changeReport.appendError("Error while applying process changes: " + e.getMessage());  }  return changeReport;}  }
class C{  public boolean isDisplayed(final List<WebElement> elements,int timeout){  return isConditionMet(visibilityOfAllElements(elements),timeout);}  }
class C{  private void readObjectNoData() throws ObjectStreamException {  throw new InvalidObjectException("no data");}  }
class C{  public RegexValidator(String regex){  this(regex,true);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_OTHER_combine_SUCCESS(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400147,value0,value1);}  }
class C{  public static FramePath parsePath(String path){  return new FramePath().addFrame(path);}  }
class C{  public double min(){  return m_min;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ONE_EXCLUDED(String value0){  return new SM_SYSTEM_MESSAGE(1300633,value0);}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  public void cancel(Account account){  Log_OC.d(TAG,"Account= " + account.name);  if (mCurrentDownload != null) {    Log_OC.d(TAG,"Current Download Account= " + mCurrentDownload.getAccount().name);    if (mCurrentDownload.getAccount().name.equals(account.name)) {      mCurrentDownload.cancel();    }  }  cancelDownloadsForAccount(account);}  }
class C{  public boolean declaresMethod(NumberedString subsignature){  checkLevel(SIGNATURES);  SootMethod ret=subSigToMethods.get(subsignature);  return ret != null;}  }
class C{  public void fromStartEndVectors(Vector3f start,Vector3f end){  Vector3f v=new Vector3f();  float e, h, f;  start.cross(end,v);  e=start.dot(end);  f=(e < 0) ? -e : e;  if (f > 1.0f - FastMath.ZERO_TOLERANCE) {    Vector3f u=new Vector3f();    Vector3f x=new Vector3f();    float c1, c2, c3;    int i, j;    x.x=(start.x > 0.0) ? start.x : -start.x;    x.y=(start.y > 0.0) ? start.y : -start.y;    x.z=(start.z > 0.0) ? start.z : -start.z;    if (x.x < x.y) {      if (x.x < x.z) {        x.x=1.0f;        x.y=x.z=0.0f;      } else {        x.z=1.0f;        x.x=x.y=0.0f;      }    } else {      if (x.y < x.z) {        x.y=1.0f;        x.x=x.z=0.0f;      } else {        x.z=1.0f;        x.x=x.y=0.0f;      }    }    u.x=x.x - start.x;    u.y=x.y - start.y;    u.z=x.z - start.z;    v.x=x.x - end.x;    v.y=x.y - end.y;    v.z=x.z - end.z;    c1=2.0f / u.dot(u);    c2=2.0f / v.dot(v);    c3=c1 * c2 * u.dot(v);    for (i=0; i < 3; i++) {      for (j=0; j < 3; j++) {        float val=-c1 * u.get(i) * u.get(j) - c2 * v.get(i) * v.get(j) + c3 * v.get(i) * u.get(j);        set(i,j,val);      }      float val=get(i,i);      set(i,i,val + 1.0f);    }  } else {    float hvx, hvz, hvxy, hvxz, hvyz;    h=1.0f / (1.0f + e);    hvx=h * v.x;    hvz=h * v.z;    hvxy=hvx * v.y;    hvxz=hvx * v.z;    hvyz=hvz * v.y;    set(0,0,e + hvx * v.x);    set(0,1,hvxy - v.z);    set(0,2,hvxz + v.y);    set(1,0,hvxy + v.z);    set(1,1,e + h * v.y * v.y);    set(1,2,hvyz - v.x);    set(2,0,hvxz - v.y);    set(2,1,hvyz + v.x);    set(2,2,e + hvz * v.z);  }}  }
class C{  public Vector3f multNormalAcross(Vector3f vec,Vector3f store){  if (store == null) {    store=new Vector3f();  }  float vx=vec.x, vy=vec.y, vz=vec.z;  store.x=m00 * vx + m10 * vy + m20 * vz;  store.y=m01 * vx + m11 * vy + m21 * vz;  store.z=m02 * vx + m12 * vy + m22 * vz;  return store;}  }
class C{  @SuppressWarnings("rawtypes") public Parameter newCollectionValuedParameter(Object name,Class type){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNBREAKABLE_ITEM(DescriptionId value0){  return new SM_SYSTEM_MESSAGE(1300381,value0);}  }
class C{  public void checkForNewVersion(){  queryLatestVersion();  if (hasNewerVersion()) {    final String skipVersion=config.getString(ConfigKey.SKIP_VERSION);    if (!latestStable.toString().equals(skipVersion)) {      final String versionFoundString="New version found! Version: ";      System.out.println(versionFoundString + latestStable.toString());      if (skipVersion != null) {        config.delete(ConfigKey.SKIP_VERSION);      }      final String message="A new version was found on GitHub." + StringLiterals.NEWLINE + "Version: "+ latestStable+ StringLiterals.NEWLINE+ StringLiterals.NEWLINE+ "Your current version: "+ currentVersion+ StringLiterals.NEWLINE+ StringLiterals.NEWLINE+ "It should be updated."+ StringLiterals.NEWLINE+ "Click 'Download' to be redirected to GitHub where you can download the new version."+ StringLiterals.NEWLINE+ "Click 'Later' to be reminded on next program start."+ StringLiterals.NEWLINE+ "Click 'Ignore' and you won't be notified again until the next version releases.";      final String[] options=new String[]{"Download","Later","Ignore this Version"};      final int response=JOptionPane.showOptionDialog(null,message,versionFoundString,JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE,null,options,options[0]);switch (response) {case 0:        final String latestReleaseUrl="https://github.com/Wolfsblvt/BlossomsPokemonGoManager/releases/latest";      Browser.openUrl(latestReleaseUrl);    System.exit(0);  break;case 1:break;case 2:config.setString(ConfigKey.SKIP_VERSION,latestStable.toString());break;default :}} else {System.out.println("Latest version " + latestStable.toString() + " found, but ignored.");}}}  }
class C{  public void addJavaDirectory(@NotNull String path){  File directory=myFileStructure.createProjectDir(path);  myJavaDirectories.add(directory);}  }
class C{  public static boolean coordinateIsValid(String coordinate){  if (coordinate == null || coordinate.trim().isEmpty()) {    return false;  }  Matcher matcher=POINT_PATTERN.matcher(coordinate);  if (!matcher.find()) {    return false;  }  double longitude=0.0;  double latitude=0.0;  try {    longitude=Double.parseDouble(matcher.group(1));    latitude=Double.parseDouble(matcher.group(2));  } catch (  NumberFormatException ex) {    return false;  }  return longitude >= LONG_MIN && longitude <= LONG_MAX && latitude >= LAT_MIN && latitude <= LAT_MAX;}  }
class C{  protected PhotosReportCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public static String checkAvailability(String productId,BigDecimal quantity,Timestamp reservStart,BigDecimal reservLength,ShoppingCart cart){  Delegator delegator=cart.getDelegator();  List<GenericValue> selFixedAssetProduct=null;  GenericValue fixedAssetProduct=null;  try {    selFixedAssetProduct=EntityQuery.use(delegator).from("FixedAssetProduct").where("productId",productId,"fixedAssetProductTypeId","FAPT_USE").filterByDate(UtilDateTime.nowTimestamp(),"fromDate","thruDate").queryList();  } catch (  GenericEntityException e) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",productId);    String msg=UtilProperties.getMessage(resource_error,"item.cannot_find_Fixed_Asset",messageMap,cart.getLocale());    return msg;  }  if (UtilValidate.isNotEmpty(selFixedAssetProduct)) {    Iterator<GenericValue> firstOne=selFixedAssetProduct.iterator();    fixedAssetProduct=firstOne.next();  } else {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",productId);    String msg=UtilProperties.getMessage(resource_error,"item.cannot_find_Fixed_Asset",messageMap,cart.getLocale());    return msg;  }  GenericValue fixedAsset=null;  try {    fixedAsset=fixedAssetProduct.getRelatedOne("FixedAsset",false);  } catch (  GenericEntityException e) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("fixedAssetId",fixedAssetProduct.getString("fixedAssetId"));    String msg=UtilProperties.getMessage(resource_error,"item.fixed_Asset_not_found",messageMap,cart.getLocale());    return msg;  }  if (fixedAsset == null) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("fixedAssetId",fixedAssetProduct.getString("fixedAssetId"));    String msg=UtilProperties.getMessage(resource_error,"item.fixed_Asset_not_found",messageMap,cart.getLocale());    return msg;  }  GenericValue techDataCalendar=null;  try {    techDataCalendar=fixedAsset.getRelatedOne("TechDataCalendar",false);  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);  }  if (techDataCalendar == null) {    if (fixedAsset.getBigDecimal("productionCapacity").compareTo(quantity) >= 0) {      String msg=UtilProperties.getMessage(resource_error,"item.availableOk",cart.getLocale());      return msg;    } else {      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("quantityReq",quantity,"quantityAvail",fixedAsset.getString("productionCapacity"));      String msg=UtilProperties.getMessage(resource_error,"item.availableQnt",messageMap,cart.getLocale());      return msg;    }  }  long dayCount=0;  String resultMessage="";  while (BigDecimal.valueOf(dayCount).compareTo(reservLength) < 0) {    GenericValue techDataCalendarExcDay=null;    Timestamp exceptionDateStartTime=new Timestamp((reservStart.getTime() + (dayCount++ * 86400000)));    try {      techDataCalendarExcDay=EntityQuery.use(delegator).from("TechDataCalendarExcDay").where("calendarId",fixedAsset.get("calendarId"),"exceptionDateStartTime",exceptionDateStartTime).queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e,module);    }    if (techDataCalendarExcDay == null) {      if (fixedAsset.get("productionCapacity") != null && fixedAsset.getBigDecimal("productionCapacity").compareTo(quantity) < 0)       resultMessage=resultMessage.concat(exceptionDateStartTime.toString().substring(0,10) + ", ");    } else {      BigDecimal exceptionCapacity=BigDecimal.ZERO;      if (techDataCalendarExcDay.get("exceptionCapacity") != null)       exceptionCapacity=techDataCalendarExcDay.getBigDecimal("exceptionCapacity");      if (exceptionCapacity.compareTo(BigDecimal.ZERO) == 0 && fixedAsset.get("productionCapacity") != null)       exceptionCapacity=fixedAsset.getBigDecimal("productionCapacity");      if (exceptionCapacity.compareTo(BigDecimal.ZERO) != 0) {        BigDecimal usedCapacity=BigDecimal.ZERO;        if (techDataCalendarExcDay.get("usedCapacity") != null)         usedCapacity=techDataCalendarExcDay.getBigDecimal("usedCapacity");        if (exceptionCapacity.compareTo(quantity.add(usedCapacity)) < 0) {          resultMessage=resultMessage.concat(exceptionDateStartTime.toString().substring(0,10) + ", ");          Debug.logInfo("No rental fixed Asset available: " + exceptionCapacity + " already used: "+ usedCapacity+ " Requested now: "+ quantity,module);        }      }    }  }  if (resultMessage.compareTo("") == 0) {    String msg=UtilProperties.getMessage(resource_error,"item.availableOk",cart.getLocale());    return msg;  } else {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("resultMessage",resultMessage);    String msg=UtilProperties.getMessage(resource_error,"item.notAvailable",messageMap,cart.getLocale());    return msg;  }}  }
class C{  public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  public void addTopLevelContents(Collection<ContentElement> contents){  topLevelContents.addAll(contents);}  }
class C{  public static int convertToBitmask(@Nonnull final Collection<Flag> flags){  Check.notNull(flags,"flags");  int bitmask=0;  for (  final Flag flag : flags) {    bitmask=bitmask | flag.getNumber();  }  return bitmask;}  }
class C{  public void addTagIds(final Collection<Long> tagIds){  if (tagIds != null) {    for (    Long tagId : tagIds) {      addTagId(tagId);    }  }}  }
class C{  public GroupsGetBannedQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public void clearMemoryCache(){  checkConfiguration();  configuration.memoryCache.clear();}  }
class C{  @Override public final void writeAsciiString(final String s){  write(s.getBytes(ASCII));}  }
class C{  private static final String toXml(Settings settings){  StringBuilder sb=new StringBuilder();  sb.append("<Settings>").append("<StepFrequency>").append(1.0 / settings.getStepFrequency()).append("</StepFrequency>").append("<MaximumTranslation>").append(settings.getMaximumTranslation()).append("</MaximumTranslation>").append("<MaximumRotation>").append(Math.toDegrees(settings.getMaximumRotation())).append("</MaximumRotation>").append("<ContinuousCollisionDetectionMode>").append(settings.getContinuousDetectionMode()).append("</ContinuousCollisionDetectionMode>").append("<AutoSleep>").append(settings.isAutoSleepingEnabled()).append("</AutoSleep>").append("<SleepTime>").append(settings.getSleepTime()).append("</SleepTime>").append("<SleepLinearVelocity>").append(settings.getSleepLinearVelocity()).append("</SleepLinearVelocity>").append("<SleepAngularVelocity>").append(Math.toDegrees(settings.getSleepAngularVelocity())).append("</SleepAngularVelocity>").append("<VelocitySolverIterations>").append(settings.getVelocityConstraintSolverIterations()).append("</VelocitySolverIterations>").append("<PositionSolverIterations>").append(settings.getPositionConstraintSolverIterations()).append("</PositionSolverIterations>").append("<WarmStartDistance>").append(settings.getWarmStartDistance()).append("</WarmStartDistance>").append("<RestitutionVelocity>").append(settings.getRestitutionVelocity()).append("</RestitutionVelocity>").append("<LinearTolerance>").append(settings.getLinearTolerance()).append("</LinearTolerance>").append("<AngularTolerance>").append(Math.toDegrees(settings.getAngularTolerance())).append("</AngularTolerance>").append("<MaximumLinearCorrection>").append(settings.getMaximumLinearCorrection()).append("</MaximumLinearCorrection>").append("<MaximumAngularCorrection>").append(Math.toDegrees(settings.getMaximumAngularCorrection())).append("</MaximumAngularCorrection>").append("<Baumgarte>").append(settings.getBaumgarte()).append("</Baumgarte>").append("</Settings>");  return sb.toString();}  }
class C{  public void removeWatch(WatchedObject watched){  watched.setInUse(false);}  }
class C{  public void clear(){  this.ch=null;  this.offset=0;  this.length=-1;}  }
class C{  public void removeColumnListener(ColumnListener listener){  return;}  }
class C{  public DocsGetWallUploadServerQuery(VkApiClient client,Actor actor){  super(client,"docs.getWallUploadServer",GetWallUploadServerResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public long xorOut(){  return xorOut;}  }
class C{  @Override public void requestPhotos(Context c,int page,boolean refresh){  if (!model.isRefreshing() && !model.isLoading()) {    if (refresh) {      model.setRefreshing(true);    } else {      model.setLoading(true);    }switch (model.getPhotosOrder()) {case PhotoApi.ORDER_BY_LATEST:      requestPhotosInCategoryOrders(c,page,refresh);    break;default :  requestPhotosInCategoryRandom(c,page,refresh);break;}}}  }
class C{  public Builder convertFromSequence(){  actionList.add(new DataAction(new ConvertFromSequence()));  return this;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case R.id.container_loading_view_mini_retryButton:    collectionsPresenter.initRefresh(getContext());  break;}}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public FieldDeclarationSubstituted fullCopy(){  FieldDeclarationSubstituted tree=(FieldDeclarationSubstituted)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static char[] utf8ToCharArray(byte[] bytes,int offset,int length){  CharsetDecoder decoder=Charset.forName("UTF-8").newDecoder();  decoder.onMalformedInput(CodingErrorAction.REPORT);  decoder.onUnmappableCharacter(CodingErrorAction.REPORT);  CharBuffer buffer;  try {    buffer=decoder.decode(ByteBuffer.wrap(bytes,offset,length));  } catch (  CharacterCodingException cce) {    throw new IllegalArgumentException(cce);  }  char[] arr=new char[buffer.remaining()];  buffer.get(arr);  return arr;}  }
class C{  public void goToNextStep(){  goToStep(activeStep + 1,false);}  }
class C{  private boolean invalidate(final TagQualityStatus pQuality,final String pDescription,final Timestamp pTimestamp){  if (pQuality == null) {    throw new IllegalArgumentException("invalidate(..) method called with null TagQualityStatus argument.");  }  boolean retval=false;  if (this.timestamp.before(pTimestamp) || this.timestamp.equals(pTimestamp)) {    this.qualityCollection.add(pQuality);    this.qualityDescriptions.put(pQuality,pDescription);    this.timestamp=pTimestamp;    retval=true;  }  return retval;}  }
class C{  @RequestMapping(value="/rest/activiti/jobs/{jobId}",method=RequestMethod.DELETE,produces="application/json") @ResponseStatus(value=HttpStatus.OK) public void deleteJob(@PathVariable String jobId) throws BadRequestException {  ServerConfig serverConfig=retrieveServerConfig();  try {    clientService.deleteJob(serverConfig,jobId);  } catch (  ActivitiServiceException e) {    throw new BadRequestException(e.getMessage());  }}  }
class C{  private boolean runInParallel(List<ConfigurationElement> elements){  return !elements.stream().anyMatch(null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201138,value0);}  }
class C{  protected DatabaseGetRegionsQuery countryId(int value){  return unsafeParam("country_id",value);}  }
class C{  public static long floorMod(final long a,final long b){  if (b == 0l) {    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_DENOMINATOR);  }  final long m=a % b;  if ((a ^ b) >= 0l || m == 0l) {    return m;  } else {    return b + m;  }}  }
class C{  protected void persistDecisionTables(ParsedDeployment parsedDeployment){  CommandContext commandContext=Context.getCommandContext();  DecisionTableEntityManager decisionTableEntityManager=commandContext.getDecisionTableEntityManager();  for (  DecisionTableEntity decisionTable : parsedDeployment.getAllDecisionTables()) {    decisionTableEntityManager.insert(decisionTable);  }}  }
class C{  public static <T>Type<T> valueOf(final Type<T> type){  return type;}  }
class C{  public static void moveStyleRefToP(TtEltype tt){  Set<Object> styles=new HashSet<>(tt.getBody().getStyle());  BodyEltype body=tt.getBody();  body.getStyle().clear();  setStyleListToNull(body);  tt.getBody().getDiv().stream().peek(null).flatMap(null).filter(null).map(null).forEachOrdered(null);}  }
class C{  public WrapLayout(int align,int hgap,int vgap){  super(align,hgap,vgap);}  }
class C{  private void calculateColor(int coord){  coord=coord - mBarPointerHaloRadius;  if (coord > (mBarLength / 2) && (coord < mBarLength)) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],1f,1 - (mPosToSVFactor * (coord - (mBarLength / 2)))});  } else   if (coord > 0 && coord < mBarLength) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],(mPosToSVFactor * coord),1f});  } else   if (coord == (mBarLength / 2)) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],1f,1f});  } else   if (coord <= 0) {    mColor=Color.WHITE;  } else   if (coord >= mBarLength) {    mColor=Color.BLACK;  }}  }
class C{  @Override public void onActivityCreated(Bundle savedInstanceState){  super.onActivityCreated(savedInstanceState);  Bundle bundle=getArguments();  mChosenPokemon=bundle.getInt(MainActivity.MAIN_KEY,1);  mHasPokemonBeenCaught=bundle.getBoolean(MainActivity.PKMN_CAUGHT_KEY,false);  if (savedInstanceState == null) {    getPokemonData(mChosenPokemon,mHasPokemonBeenCaught);  }}  }
class C{  public void remove(){  buttonRemove.click();}  }
class C{  public static int daysBetween(Date startDate,Date endDate){  final Days days=Days.daysBetween(new DateTime(startDate),new DateTime(endDate));  return days.getDays();}  }
class C{  private boolean isValidServerBasedAuthority(String host,int port,String userinfo){  if (!isWellFormedAddress(host)) {    return false;  }  if (port < -1 || port > 65535) {    return false;  }  if (userinfo != null) {    int index=0;    int end=userinfo.length();    char testChar='\0';    while (index < end) {      testChar=userinfo.charAt(index);      if (testChar == '%') {        if (index + 2 >= end || !isHex(userinfo.charAt(index + 1)) || !isHex(userinfo.charAt(index + 2))) {          return false;        }        index+=2;      } else       if (!isUserinfoCharacter(testChar)) {        return false;      }      ++index;    }  }  return true;}  }
class C{  public double wilcoxonSignedRankTest(final double[] x,final double[] y,final boolean exactPValue) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {  ensureDataConformance(x,y);  final int N=x.length;  final double Wmax=wilcoxonSignedRank(x,y);  if (exactPValue && N > 30) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE,N,30);  }  if (exactPValue) {    return calculateExactPValue(Wmax,N);  } else {    final double Wmin=(N * (N + 1) / 2.0) - Wmax;    return calculateAsymptoticPValue(Wmin,N);  }}  }
class C{  public boolean publish(final String publicationTopic,final String payload,final int qos,final boolean retained){  return publish(publicationTopic,ConversionUtils.stringToArray(payload),qos,retained);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeathBlow_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200499,num0,skilltarget,skillname);}  }
class C{  public static void selectEditor(Project project,VirtualFile file){  ApplicationManager.getApplication().assertReadAccessAllowed();  PsiFile psiFile=PsiManager.getInstance(project).findFile(file);  if (psiFile != null) {    ProjectPaneSelectInTarget selectAction=new ProjectPaneSelectInTarget(project);    selectAction.select(psiFile,false);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHealEffect_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200790,skillcaster,skillname);}  }
class C{  public void notifyChange(){  executeEvent();}  }
class C{  public int querySurface(EGLSurface eglSurface,int what){  int[] value=new int[1];  EGL14.eglQuerySurface(eGLDisplay,eglSurface,what,value,0);  return value[0];}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  public static int checkAvailablePort(int port){  ServerSocket serverSocket=null;  try {    serverSocket=new ServerSocket(port);  } catch (  IOException e) {    throw new RuntimeException(e.getMessage() + String.format(" port %d",port),e);  } finally {    if (serverSocket != null) {      try {        serverSocket.close();      } catch (      IOException e) {        LOGGER.error(e.getMessage(),e);      }    }  }  return port;}  }
class C{  private DataQueryParams retainDataDimensions(DataDimensionItemType... itemTypes){  DimensionalObject dimension=getDimensionOrFilter(DATA_X_DIM_ID);  List<DimensionalItemObject> items=new ArrayList<>();  for (  DataDimensionItemType itemType : itemTypes) {    items.addAll(AnalyticsUtils.getByDataDimensionItemType(itemType,dimension.getItems()));  }  dimension.getItems().clear();  dimension.getItems().addAll(items);  return this;}  }
class C{  public static JsonElement createFont(Font font){  JsonObject jsonObject=new JsonObject();  try {    jsonObject.addProperty(FontSymbolKeys.FONT_NAME,font.getName());    jsonObject.addProperty(FontSymbolKeys.BOLD,font.getBold());    jsonObject.addProperty(FontSymbolKeys.CHARSET,font.getCharset());    jsonObject.addProperty(FontSymbolKeys.ITALIC,font.getItalic());    jsonObject.addProperty(FontSymbolKeys.FONT_SIZE,font.getSize());    jsonObject.addProperty(FontSymbolKeys.STRIKE_THROUGH,font.getStrikethrough());    jsonObject.addProperty(FontSymbolKeys.UNDERLINE,font.getUnderline());    jsonObject.addProperty(FontSymbolKeys.FONT_WEIGHT,font.getWeight());  } catch (  AutomationException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return jsonObject;}  }
class C{  public LocatorProxy(XMLLocator locator){  fLocator=locator;}  }
class C{  @Override public void populateField(String value){  if (textField != null) {    textField.setText(value);    UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,value));    oldValueObj=value;    valueUpdated();  }}  }
class C{  @Override public final float readFloat(){  return Float.intBitsToFloat(readInt());}  }
class C{  private ServletRegistration.Dynamic initSpring(ServletContext servletContext,AnnotationConfigWebApplicationContext rootContext){  log.debug("Configuring Spring Web application context");  AnnotationConfigWebApplicationContext dispatcherServletConfiguration=new AnnotationConfigWebApplicationContext();  dispatcherServletConfiguration.setParent(rootContext);  dispatcherServletConfiguration.register(DispatcherServletConfiguration.class);  log.debug("Registering Spring MVC Servlet");  ServletRegistration.Dynamic dispatcherServlet=servletContext.addServlet("dispatcher",new DispatcherServlet(dispatcherServletConfiguration));  dispatcherServlet.addMapping("/service/*");  dispatcherServlet.setLoadOnStartup(1);  dispatcherServlet.setAsyncSupported(true);  return dispatcherServlet;}  }
class C{  @Override public double[] makeInverseCumulativeTestPoints(){  return new double[]{0d,0.001d,0.010d,0.025d,0.050d,0.100d,0.999d,0.990d,0.975d,0.950d,0.900d,1d};}  }
class C{  public SQLSchemaMigrator graph(MindmapsGraph graph){  this.graph=graph;  return this;}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    IOUtils.write(data,out,encoding);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public void calculateCount(){  count=Rnd.get(dropTemplate.getMinAmount(),dropTemplate.getMaxAmount());}  }
class C{  public static boolean isPunctuation(char c){  return isRange(c,'!','/') || isRange(c,':','@') || isRange(c,'[','`')|| isRange(c,'{','~');}  }
class C{  public EnumeratedIntegerDistribution(final int[] singletons,final double[] probabilities) throws MathIllegalArgumentException {  innerDistribution=new EnumeratedDistribution<Integer>(createDistribution(singletons,probabilities));}  }
class C{  void createFinish(String instanceId){  if (!isDomThread()) {    throw new WXRuntimeException("CreateFinish operation must be done in dom thread");  }  WXDomStatement statement=mDomRegistries.get(instanceId);  if (statement == null) {    return;  }  statement.createFinish();}  }
class C{  private void initialize(Versioned<byte[]> allocationData){  setVersion((ZkVersion)allocationData.getVersion());  byte[] data=allocationData.getValue();  if (null != data && data.length > 0) {    try {      ledgerIdLeftFromPrevAllocation=DLUtils.bytes2LedgerId(data);    } catch (    NumberFormatException nfe) {      LOG.warn("Invalid data found in allocator path {} : ",allocatePath,nfe);    }  }}  }
class C{  public void fetchEvents(String date){  boolean flag=false;  int pos=0;  for (int i=0; i < Singleton.getInstance().getEventManager().size(); i++) {    if (Singleton.getInstance().getEventManager().get(i).getDate().equalsIgnoreCase(date)) {      flag=true;      pos=i;    }  }  ArrayList<EventData> eventDataArrayList=new ArrayList();  if (flag) {    if (Singleton.getInstance().getEventManager().get(pos).getEventData() != null) {      eventDataArrayList=Singleton.getInstance().getEventManager().get(pos).getEventData();    }  }  if (mCustomCalendar != null)   mCustomCalendar.setDateSelectionData(eventDataArrayList);}  }
class C{  public TapTarget textColor(@ColorRes int color){  this.titleTextColor=color;  this.descriptionTextColor=color;  return this;}  }
class C{  public void xmlReplace(String propValue,String replacedValue){  StringTokenizer st=new StringTokenizer(propValue,".");  String str=sb.toString();  int inx=0;  String nextToken;  String prevToken=null;  while ((inx=str.indexOf((nextToken=st.nextToken()) + ">",inx)) != -1) {    while (!str.substring(inx - 1,inx).equals("<")) {      inx=str.indexOf(nextToken + ">",inx + 1);      if (inx == -1)       break;    }    if (st.hasMoreTokens())     prevToken=nextToken;    if (!st.hasMoreTokens()) {      if (str.indexOf("</" + nextToken,inx) > str.indexOf("</" + prevToken,inx))       return;      int start=inx + nextToken.length() + 1;      int end=str.indexOf("</" + nextToken,inx);      if (start < 0 || end < 0 || start > end) {        throw new StringIndexOutOfBoundsException("Can't find property \"" + propValue + "\" with start index "+ start+ " and end index "+ end);      }      sb.replace(start,end,replacedValue);      return;    }  }}  }
class C{  @Nullable public static File resolveDrawable(@NotNull RenderResources resources,@Nullable ResourceValue drawable,@NotNull Project project){  if (drawable != null) {    drawable=resources.resolveResValue(drawable);  }  if (drawable == null) {    return null;  }  String result=drawable.getValue();  StateList stateList=resolveStateList(resources,drawable,project);  if (stateList != null) {    List<StateListState> states=stateList.getStates();    if (!states.isEmpty()) {      StateListState state=states.get(states.size() - 1);      result=state.getValue();    }  }  if (result == null) {    return null;  }  final File file=new File(result);  return file.isFile() ? file : null;}  }
class C{  public void applyInlineLeftHalf(double[] data,int off,int len){  Window w=Window.get(windowType,2 * len,prescale);  w.apply(data,off,data,off,0,len);}  }
class C{  public boolean isTrained(){  return sTrainingTaskFuture != null;}  }
class C{  private static int mergeIdentical(final WeightedAddress headPtr,int length){  for (WeightedAddress a=headPtr.next; a != null; a=a.next) {    for (WeightedAddress b=a.next; b != null; b=b.next) {      if (a.getAddress().equals(b.getAddress())) {        if (b.weight > a.weight)         a.weight=b.weight;        a.next=b.next;        length--;      } else       break;    }  }  return length;}  }
class C{  public static List<Column> of(Map<String,Object> values){  Objects.requireNonNull(values,"values is required");  Predicate<String> isNotNull=null;  Function<String,Column> columnMap=null;  return values.keySet().stream().filter(isNotNull).map(columnMap).collect(Collectors.toList());}  }
class C{  @Override public int read() throws IOException {  int b=readFirstBytes();  return b >= 0 ? b : in.read();}  }
class C{  public FriendsGetSuggestionsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public MessagesGetChatUsersQueryWithChatIdsFields nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  private void handleMultiCommandEncapResponse(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {  logger.trace("Process Multi-command Encapsulation");  int classCnt=serialMessage.getMessagePayloadByte(offset++);  for (int c=0; c < classCnt; c++) {    CommandClass commandClass;    ZWaveCommandClass zwaveCommandClass;    int commandClassCode=serialMessage.getMessagePayloadByte(offset + 1);    commandClass=CommandClass.getCommandClass(commandClassCode);    if (commandClass == null) {      logger.error(String.format("NODE %d: Unknown command class 0x%02x",getNode().getNodeId(),commandClassCode));    } else {      logger.debug("NODE {}: Incoming command class {}",getNode().getNodeId(),commandClass.getLabel());      zwaveCommandClass=getNode().getCommandClass(commandClass);      if (zwaveCommandClass == null) {        logger.debug("NODE {}: Command class {} not found, trying to add it.",getNode().getNodeId(),commandClass.getLabel(),commandClass.getKey());        zwaveCommandClass=ZWaveCommandClass.getInstance(commandClass.getKey(),getNode(),this.getController());        if (zwaveCommandClass != null) {          logger.debug("NODE {}: Adding command class %s",getNode().getNodeId(),commandClass.getLabel());          getNode().addCommandClass(zwaveCommandClass);        }      }      if (zwaveCommandClass == null) {        logger.error("NODE {}: CommandClass %s not implemented.",this.getNode().getNodeId(),commandClass.getLabel());      } else {        logger.debug("NODE {}: Calling handleApplicationCommandRequest.",this.getNode().getNodeId());        zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,0);      }    }    offset+=serialMessage.getMessagePayloadByte(offset) + 1;  }}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  TaskGroup other=(TaskGroup)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getGroupName() == null ? other.getGroupName() == null : this.getGroupName().equals(other.getGroupName())) && (this.getGroupDesc() == null ? other.getGroupDesc() == null : this.getGroupDesc().equals(other.getGroupDesc()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()));}  }
class C{  public GeneralException(List<String> messages,Throwable nested){  super(nested);  this.messages=messages;}  }
class C{  public static String toInternalName(String qual){  return qual.replace('.','/');}  }
class C{  public Battle(PokemonGo api,Pokemon[] teams,Gym gym){  this.teams=teams;  this.gym=gym;  this.api=api;  for (  Pokemon team : teams) {    bteam.add(this.createBattlePokemon(team));  }}  }
class C{  private CredentialsProvider extractCredentials(Properties properties,JSpaceAttributes spaceAttr){  CredentialsProvider credentialsProvider=CredentialsProviderHelper.extractCredentials(properties);  if (credentialsProvider != null)   CredentialsProviderHelper.clearCredentialsProperties(spaceAttr);  return credentialsProvider;}  }
class C{  public EntityListIterator queryIterator() throws GenericEntityException {  if (useCache) {    Debug.logWarning("Call to iterator() with cache, ignoring cache",module);  }  if (dynamicViewEntity == null) {    return delegator.find(entityName,makeWhereCondition(false),havingEntityCondition,fieldsToSelect,orderBy,makeEntityFindOptions());  } else {    return delegator.findListIteratorByCondition(dynamicViewEntity,makeWhereCondition(false),havingEntityCondition,fieldsToSelect,orderBy,makeEntityFindOptions());  }}  }
class C{  public BigReal(BigDecimal val){  d=val;}  }
class C{  public AudioMoveToAlbumQuery moveToAlbum(UserActor actor,int... audioIds){  return new AudioMoveToAlbumQuery(getClient(),actor,audioIds);}  }
class C{  @Deprecated public static void disableLogging(){  writeLogs(false);}  }
class C{  public synchronized void openDriver() throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=Camera.open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  @Override public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier) throws FilterUnsupportedException {  FilterResolverMetadata metadata=new FilterResolverMetadata();  metadata.setTableIdentifier(absoluteTableIdentifier);  if ((!isExpressionResolve) && exp instanceof BinaryConditionalExpression) {    BinaryConditionalExpression binaryConditionalExpression=(BinaryConditionalExpression)exp;    Expression leftExp=binaryConditionalExpression.getLeft();    Expression rightExp=binaryConditionalExpression.getRight();    if (leftExp instanceof ColumnExpression) {      ColumnExpression columnExpression=(ColumnExpression)leftExp;      metadata.setColumnExpression(columnExpression);      metadata.setExpression(rightExp);      metadata.setIncludeFilter(isIncludeFilter);      CarbonDimension dimension=columnExpression.getDimension();      if (FilterUtil.checkIfExpressionContainsColumn(rightExp) || FilterUtil.isExpressionNeedsToResolved(rightExp,isIncludeFilter) && dimension.hasEncoding(Encoding.DICTIONARY) && !dimension.hasEncoding(Encoding.DIRECT_DICTIONARY)) {        isExpressionResolve=true;      } else {        dimColResolvedFilterInfo.populateFilterInfoBasedOnColumnType(FilterInfoTypeVisitorFactory.getResolvedFilterInfoVisitor(columnExpression),metadata);      }    } else     if (rightExp instanceof ColumnExpression) {      ColumnExpression columnExpression=(ColumnExpression)rightExp;      metadata.setColumnExpression(columnExpression);      metadata.setExpression(leftExp);      metadata.setIncludeFilter(isIncludeFilter);      if (columnExpression.getDataType().equals(DataType.TIMESTAMP)) {        isExpressionResolve=true;      } else {        if (FilterUtil.checkIfExpressionContainsColumn(leftExp)) {          isExpressionResolve=true;        } else {          dimColResolvedFilterInfo.populateFilterInfoBasedOnColumnType(FilterInfoTypeVisitorFactory.getResolvedFilterInfoVisitor(columnExpression),metadata);        }      }    } else {      isExpressionResolve=true;    }  }  if (isExpressionResolve && exp instanceof ConditionalExpression) {    ConditionalExpression conditionalExpression=(ConditionalExpression)exp;    List<ColumnExpression> columnList=conditionalExpression.getColumnList();    metadata.setColumnExpression(columnList.get(0));    metadata.setExpression(exp);    metadata.setIncludeFilter(isIncludeFilter);    if (!columnList.get(0).getDimension().hasEncoding(Encoding.DICTIONARY) || columnList.get(0).getDimension().hasEncoding(Encoding.DIRECT_DICTIONARY)) {      dimColResolvedFilterInfo.populateFilterInfoBasedOnColumnType(FilterInfoTypeVisitorFactory.getResolvedFilterInfoVisitor(columnList.get(0)),metadata);    } else     if (columnList.get(0).getDimension().hasEncoding(Encoding.DICTIONARY) && !(columnList.get(0).getDimension().getDataType() == org.apache.carbondata.core.carbon.metadata.datatype.DataType.STRUCT || columnList.get(0).getDimension().getDataType() == org.apache.carbondata.core.carbon.metadata.datatype.DataType.ARRAY)) {      dimColResolvedFilterInfo.setFilterValues(FilterUtil.getFilterListForAllValues(absoluteTableIdentifier,exp,columnList.get(0),isIncludeFilter));      dimColResolvedFilterInfo.setColumnIndex(columnList.get(0).getDimension().getOrdinal());      dimColResolvedFilterInfo.setDimension(columnList.get(0).getDimension());    }  }}  }
class C{  public static boolean isJavaLangObject(String signature){  return OBJECT_SIGNATURE.equals(signature);}  }
class C{  public FeatureVectorCART(MaryNode tree,FeatureArrayIndexer ffi){  featDef=ffi.getFeatureDefinition();  addDaughters(null,tree,ffi);  if (rootNode instanceof DecisionNode) {    ((DecisionNode)rootNode).countData();  }}  }
class C{  public void forceMoveToPrimary() throws RemoteException {  if (getState() == State.ACTIVE)   return;  changeState(State.PENDING,State.ACTIVE,true);  notifyListenerOnActive(new ServiceItem(_electTemplate.getServiceID(),_electTemplate.getService(),null));}  }
class C{  public static void main(String[] args){  Timer timer=new Timer("testTimer");  Timer overallTimer=new Timer("overall");  timer.showTimes(0L);  overallTimer.start();  for (int i=0; i < 5; i++) {    timer.start();    try {      Thread.sleep(i * 1000L);    } catch (    InterruptedException e) {    }    timer.stop(true);  }  overallTimer.stop();  timer.showTimes(overallTimer.getCurrentTime());  overallTimer.showTimes();}  }
class C{  private String gdbPathToWorkspaceRelativePath(File workspaceDirectory,File file){  try {    File canonicalWorkspaceDirectory=workspaceDirectory.getCanonicalFile();    File canonicalFile=file.getCanonicalFile();    String relativeCanonicalPath=FileUtil.getRelativePath(canonicalWorkspaceDirectory,canonicalFile);    if (relativeCanonicalPath != null) {      return relativeCanonicalPath;    }  } catch (  IOException e) {    LOG.info(e);  }  return file.getPath();}  }
class C{  public SootMethod resolveSpecialDispatch(SpecialInvokeExpr ie,SootMethod container){  container.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  SootMethod target=ie.getMethod();  target.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  if ("<init>".equals(target.getName()) || target.isPrivate())   return target; else   if (isClassSubclassOf(target.getDeclaringClass(),container.getDeclaringClass()))   return resolveConcreteDispatch(container.getDeclaringClass(),target); else   return target;}  }
class C{  public RemExpr newRemExpr(Value op1,Value op2){  return new GRemExpr(op1,op2);}  }
class C{  public SpaceDocument(String typeName,Map<String,Object> properties){  setTypeName(typeName);  this._properties=new DocumentProperties(properties);  initialize();}  }
class C{  public XMLEntityDescriptionImpl(String entityName,String publicId,String literalSystemId,String baseSystemId,String expandedSystemId){  setDescription(entityName,publicId,literalSystemId,baseSystemId,expandedSystemId);}  }
class C{  public SlickForm withField(FormField field){  this.formFields.add(field);  return this;}  }
class C{  static void posTagging(){  int nTokens=0;  Map<String,Set<String>> map=new HashMap<String,Set<String>>();  List<String> taggedSequences=jsc.textFile(taggedCorpusFileName).collect();  Set<String> easyWords=new HashSet<String>();  for (  String sequence : taggedSequences) {    String[] tokens=sequence.split("\\s+");    nTokens+=tokens.length;    for (    String token : tokens) {      String[] parts=token.split("/");      if (parts.length == 2) {        String word=parts[0];        if (map.get(word) == null)         map.put(word,new HashSet<String>());        map.get(word).add(parts[1]);        if (parts[0].equals(parts[1])) {          easyWords.add(parts[0]);        }      }    }  }  System.out.println("#(tokens): " + nTokens);  System.out.println("#(unique words): " + map.size());  int max=0;  int n1=0;  double sum=0d;  for (  String word : map.keySet()) {    int nTags=map.get(word).size();    if (nTags > max) {      max=nTags;    }    if (nTags == 1)     n1++;    sum+=nTags;  }  System.out.println("Max number of tags per word: " + max);  System.out.println("Most ambiguous words are: ");  for (  String word : map.keySet()) {    if (map.get(word).size() == max)     System.out.println(word);  }  System.out.println("Number of unambiguous words: " + n1);  System.out.println("Average number of tags per word: " + sum / map.size());  System.out.println("Easy words: ");  for (  String ew : easyWords) {    System.out.println(ew);  }}  }
class C{  public void clear(){  for (int i=0; i < fMatchersCount; i++) {    fMatchers[i]=null;  }  fMatchersCount=0;  fContextStack.clear();}  }
class C{  public Iterator<MethodOrMethodContext> sourceMethods(){  return srcMethodToEdge.keySet().iterator();}  }
class C{  private boolean localEquals(Abstraction other){  if (sourceContext == null) {    if (other.sourceContext != null)     return false;  } else   if (!sourceContext.equals(other.sourceContext))   return false;  if (activationUnit == null) {    if (other.activationUnit != null)     return false;  } else   if (!activationUnit.equals(other.activationUnit))   return false;  if (this.exceptionThrown != other.exceptionThrown)   return false;  if (postdominators == null) {    if (other.postdominators != null)     return false;  } else   if (!postdominators.equals(other.postdominators))   return false;  if (this.dependsOnCutAP != other.dependsOnCutAP)   return false;  if (this.isImplicit != other.isImplicit)   return false;  return true;}  }
class C{  private SkillEngine(){}  }
class C{  @ManagedOperation(description="Prepare server for shutdown") public void prepareForShutdown(){  if (running.compareAndSet(true,false)) {    log.info("Preparing server for shutdown");    lifecycleProcessor.stop();  }}  }
class C{  String capitalize(String value){  char[] chars;  int i;  chars=value.toCharArray();  if (chars.length > 0) {    chars[0]=Character.toUpperCase(chars[0]);    for (i=1; i < chars.length; ++i) {      chars[i]=Character.toLowerCase(chars[i]);    }    return String.valueOf(chars);  }  return value;}  }
class C{  @NotNull private static ImmutableSet<ImmutableMap<String,Boolean>> removeState(@NotNull StateListState state,@NotNull ImmutableSet<ImmutableMap<String,Boolean>> allowedStates){  ImmutableSet.Builder<ImmutableMap<String,Boolean>> remainingStates=ImmutableSet.builder();  Map<String,Boolean> stateAttributes=state.getAttributes();  for (  String attribute : stateAttributes.keySet()) {    for (    ImmutableMap<String,Boolean> allowedState : allowedStates) {      if (!allowedState.containsKey(attribute)) {        ImmutableMap.Builder<String,Boolean> newAllowedState=ImmutableMap.builder();        newAllowedState.putAll(allowedState).put(attribute,!stateAttributes.get(attribute));        remainingStates.add(newAllowedState.build());      } else       if (allowedState.get(attribute) != stateAttributes.get(attribute)) {        remainingStates.add(allowedState);      }    }  }  return remainingStates.build();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_LEAVED_PARTY(String value0){  return new SM_SYSTEM_MESSAGE(1300202,value0);}  }
class C{  public void computeAttributes2Taxa2Values(Map<String,Map<String,Number>> taxa2dataset2value,Map<String,Map<String,Number>> attribute2taxa2value){  attribute2taxa2value.clear();  for (  String attribute : attribute2kind2taxaNames.keySet()) {    Map<String,ArrayList<String>> kind2taxaNames=attribute2kind2taxaNames.get(attribute);    for (    String kind : kind2taxaNames.keySet()) {      String attributeKindPair=attribute + ":" + kind;      List<String> taxonNames=kind2taxaNames.get(kind);      for (      String taxonName : taxonNames) {        Map<String,Number> dataset2value=taxa2dataset2value.get(taxonName);        if (dataset2value != null) {          int sum=0;          for (          String dataset : dataset2value.keySet()) {            if (dataset2value.get(dataset) != null)             sum+=dataset2value.get(dataset).intValue();          }          if (sum > 0) {            Map<String,Number> taxa2value;            if (attribute2taxa2value.get(attributeKindPair) != null) {              taxa2value=attribute2taxa2value.get(attributeKindPair);            } else {              taxa2value=new TreeMap<>();              attribute2taxa2value.put(attributeKindPair,taxa2value);            }            taxa2value.put(taxonName,sum);          }        }      }    }  }}  }
class C{  @Override public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {  fErrorReporter.setDocumentLocator(locator);  if (!(namespaceContext instanceof XIncludeNamespaceSupport)) {    reportFatalError("IncompatibleNamespaceContext");  }  fNamespaceContext=(XIncludeNamespaceSupport)namespaceContext;  fDocLocation=locator;  fXIncludeLocator.setLocator(fDocLocation);  setupCurrentBaseURI(locator);  saveBaseURI();  if (augs == null) {    augs=new AugmentationsImpl();  }  augs.putItem(CURRENT_BASE_URI,fCurrentBaseURI);  if (!isRootDocument()) {    fParentXIncludeHandler.fHasIncludeReportedContent=true;    if (fParentXIncludeHandler.searchForRecursiveIncludes(fCurrentBaseURI.getExpandedSystemId())) {      reportFatalError("RecursiveInclude",new Object[]{fCurrentBaseURI.getExpandedSystemId()});    }  }  fCurrentLanguage=XMLSymbols.EMPTY_STRING;  saveLanguage(fCurrentLanguage);  if (isRootDocument() && fDocumentHandler != null) {    fDocumentHandler.startDocument(fXIncludeLocator,encoding,namespaceContext,augs);  }}  }
class C{  public static Bucket createFromJSONString(String json){  return new GsonBuilder().create().fromJson(json,Bucket.class);}  }
class C{  private void writeSourceSinkSpec(SourceSinkSpec spec,Document document,Element parentElement){  if (spec instanceof JavaParameterSpec)   writeJavaParameterSpec((JavaParameterSpec)spec,document,parentElement); else   if (spec instanceof JavaFieldSpec)   writeJavaFieldSpec((JavaFieldSpec)spec,document,parentElement); else   throw new RuntimeException("Unsupported source or sink specification type");}  }
class C{  private void deleteOldTemp(File fileCfg){  BufferedReader reader=null;  try {    int count=0;    reader=new BufferedReader(new FileReader(fileCfg));    String sLine;    while ((sLine=reader.readLine()) != null) {      File file=new File(sLine);      if (!file.exists()) {        continue;      }      if (file.delete()) {        count++;      } else {        hsDeleteOnExit.add(file);      }    }    logDebug(LogArea.CONFIG,"Deleted %d old temp files listed in %s",count,fileCfg.getAbsolutePath());  } catch (  IOException e) {  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public static int px2sp(Context context,float pxValue){  return (int)(pxValue / getFontDensity(context) + 0.5);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_RESISTED_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201089,skillcaster,skillname);}  }
class C{  public void preview(){  previewButton.click();}  }
class C{  public boolean containsContext(String name){  return localContext.containsKey(name);}  }
class C{  @Inject public ComponentConfigurer(@Assisted AemDialog aemDialog){  this.aemDialog=aemDialog;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),reverseImage);}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  public boolean buildHostPart(Appendable buffer,String url,Boolean useSSL,Boolean controller) throws WebAppConfigurationException, IOException {  useSSL=Boolean.TRUE.equals(useSSL);  controller=!Boolean.FALSE.equals(useSSL);  boolean makeSecure=useSSL;  String[] pathElements=url.split("/");  String requestMapUri=pathElements[0];  int queryIndex=requestMapUri.indexOf("?");  if (queryIndex != -1) {    requestMapUri=requestMapUri.substring(0,queryIndex);  }  RequestMap requestMap=null;  if (controller) {    if (config != null) {      requestMap=config.getRequestMapMap().get(requestMapUri);    }  }  if (!makeSecure && requestMap != null) {    makeSecure=requestMap.securityHttps;  }  makeSecure=webSiteProps.getEnableHttps() & makeSecure;  if (makeSecure) {    String server=webSiteProps.getHttpsHost();    if (server.isEmpty()) {      server="localhost";    }    buffer.append("https://");    buffer.append(server);    if (!webSiteProps.getHttpsPort().isEmpty()) {      if (!"443".equals(webSiteProps.getHttpsPort())) {        buffer.append(":").append(webSiteProps.getHttpsPort());      }    }  } else {    String server=webSiteProps.getHttpHost();    if (server.isEmpty()) {      server="localhost";    }    buffer.append("http://");    buffer.append(server);    if (!webSiteProps.getHttpPort().isEmpty()) {      if (!"80".equals(webSiteProps.getHttpsPort())) {        buffer.append(":").append(webSiteProps.getHttpPort());      }    }  }  return makeSecure;}  }
class C{  public void inverseTranslateVect(float[] vec){  if (vec.length != 3) {    throw new IllegalArgumentException("vec must be of size 3.");  }  vec[0]=vec[0] - m03;  vec[1]=vec[1] - m13;  vec[2]=vec[2] - m23;}  }
class C{  protected double[][] copy(final double[][] original){  if (original == null) {    return null;  }  final double[][] copied=new double[original.length][];  for (int i=0; i < original.length; ++i) {    copied[i]=original[i].clone();  }  return copied;}  }
class C{  @Override public void validate(String content,ValidationContext context) throws InvalidDatatypeValueException {}  }
class C{  public void filter(QuestionsFilter questionFilter,Comparator<Question> sorter){  filterdQuestions=new ArrayList<Question>(apiResult.getQuestions().size());  for (  Question q : apiResult.getQuestions()) {    if (questionFilter.isAccepted(q)) {      if (!filterdQuestions.contains(q)) {        filterdQuestions.add(q);      }    }  }  Collections.sort(filterdQuestions,sorter);  if (filterdQuestions.size() > questionFilter.getNumberOfQuestions()) {    filterdQuestions.subList(questionFilter.getNumberOfQuestions(),filterdQuestions.size()).clear();  }}  }
class C{  private MaryData processOrLookupOneChunk(MaryData oneInputData,MaryDataType oneOutputType,String outputParams) throws Exception {  Locale locale=determineLocale(oneInputData);  assert locale != null;  MaryCache cache=null;  if (MaryProperties.getBoolean("cache")) {    cache=MaryCache.getCache();  }  if (cache == null) {    return processOneChunk(oneInputData,oneOutputType,outputParams,locale);  }  String inputtype=null;  String outputtype=null;  String localeString=null;  String voice=null;  String inputtext=null;  inputtype=oneInputData.getType().name();  outputtype=oneOutputType.name();  ByteArrayOutputStream sw=new ByteArrayOutputStream();  oneInputData.writeTo(sw);  inputtext=new String(sw.toByteArray(),"UTF-8");  voice=defaultVoice != null ? defaultVoice.getName() : null;  localeString=locale.toString();  if (oneOutputType.isTextType()) {    try {      String outputtext=cache.lookupText(inputtype,outputtype,localeString,voice,outputParams,defaultStyle,defaultEffects,inputtext);      if (outputtext != null) {        MaryData outData=new MaryData(oneOutputType,locale);        ByteArrayInputStream sr=new ByteArrayInputStream(outputtext.getBytes());        outData.readFrom(sr);        sr.close();        outData.setDefaultVoice(defaultVoice);        outData.setDefaultStyle(defaultStyle);        outData.setDefaultEffects(defaultEffects);        return outData;      }    } catch (    Exception e) {      Log.w(Mary.LOG,"Problem looking up text in cache",e);    }  } else   if (outputtype.equals("AUDIO")) {    try {      byte[] wavFileData=cache.lookupAudio(inputtype,localeString,voice,outputParams,defaultStyle,defaultEffects,inputtext);      if (wavFileData != null) {        AudioInputStream ais=AudioSystem.getAudioInputStream(new ByteArrayInputStream(wavFileData));        MaryData outData=new MaryData(oneOutputType,locale);        outData.setAudio(ais);        outData.setAudioFileFormat(audioFileFormat);        return outData;      }    } catch (    Exception e) {      Log.w(Mary.LOG,"Problem looking up audio in cache",e);    }  } else {  }  if (oneOutputType.equals(MaryDataType.AUDIO) || oneOutputType.equals(MaryDataType.REALISED_ACOUSTPARAMS) || oneOutputType.equals(MaryDataType.REALISED_DURATIONS)) {    MaryData audioData=processOneChunk(oneInputData,MaryDataType.AUDIO,outputParams,locale);    MaryData realisedAcoustparams=processOneChunk(audioData,MaryDataType.REALISED_ACOUSTPARAMS,outputParams,locale);    MaryData realisedDurations=processOneChunk(audioData,MaryDataType.REALISED_DURATIONS,outputParams,locale);    insertAudioIntoCache(cache,inputtype,localeString,voice,outputParams,inputtext,audioData);    insertTextIntoCache(cache,inputtype,MaryDataType.REALISED_ACOUSTPARAMS.name(),localeString,voice,outputParams,inputtext,realisedAcoustparams);    insertTextIntoCache(cache,inputtype,MaryDataType.REALISED_DURATIONS.name(),localeString,voice,outputParams,inputtext,realisedDurations);    if (oneOutputType.equals(MaryDataType.AUDIO))     return audioData; else     if (oneOutputType.equals(MaryDataType.REALISED_ACOUSTPARAMS))     return realisedAcoustparams;    return realisedDurations;  } else {    MaryData oneOutputData=processOneChunk(oneInputData,oneOutputType,outputParams,locale);    if (oneOutputType.isTextType()) {      insertTextIntoCache(cache,inputtype,outputtype,localeString,voice,outputParams,inputtext,oneOutputData);    } else {      Log.d(Mary.LOG,"Don't know how to cache data of type '" + outputtype + "'");    }    return oneOutputData;  }}  }
class C{  public static <E>Stream<E> interrupt(Stream<E> stream,Predicate<? super E> interruptor){  Objects.requireNonNull(stream);  Objects.requireNonNull(interruptor);  InterruptingSpliterator<E> spliterator=InterruptingSpliterator.of(stream.spliterator(),interruptor);  return StreamSupport.stream(spliterator,stream.isParallel()).onClose(null);}  }
class C{  @Override public void addObservations(double[][] x,double[] y) throws MathIllegalArgumentException {  MathUtils.checkNotNull(x,LocalizedCoreFormats.INPUT_ARRAY);  MathUtils.checkNotNull(y,LocalizedCoreFormats.INPUT_ARRAY);  MathUtils.checkDimension(x.length,y.length);  if (x.length == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NO_DATA);  }  if (x[0].length + 1 > x.length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS,x.length,x[0].length);  }  for (int i=0; i < x.length; i++) {    addObservation(x[i],y[i]);  }}  }
class C{  public void write(OutputWriter outs) throws IOException {  for (long index=0; index < maxIndex; index++) {    outs.writeInt(get(index));  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static int px2sp(Context context,float pxValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(pxValue / scale + 0.5f);}  }
class C{  public static int colorFromPalette(Context context,Palette palette){  final int defaultColor=context.getResources().getColor(R.color.colorPrimary);  int mutedLight=palette.getLightMutedColor(defaultColor);  int vibrantLight=palette.getLightVibrantColor(mutedLight);  int muted=palette.getMutedColor(vibrantLight);  int mutedDark=palette.getDarkMutedColor(muted);  return palette.getDarkVibrantColor(mutedDark);}  }
class C{  public NotesGetCommentsQuery(VkApiClient client,UserActor actor,int noteId){  super(client,"notes.getComments",GetCommentsResponse.class);  accessToken(actor.getAccessToken());  noteId(noteId);}  }
class C{  public static <ARG>Matcher<ARG> match(ARG arg){  return new Matcher<>(arg);}  }
class C{  public void cancel(){  debugPrint("cancelling...");  if (audioMetrics) {    timer.start("audioCancel");  }  if (cancelDelay > 0) {    try {      Thread.sleep(cancelDelay);    } catch (    InterruptedException ie) {      ie.printStackTrace();    }  }synchronized (lineLock) {    if (line != null && line.isRunning()) {      line.stop();      line.flush();    }  }synchronized (this) {    cancelled=true;    notify();  }  if (audioMetrics) {    timer.stop("audioCancel");    timer.getTimer("audioCancel").showTimesShortTitle("");    timer.getTimer("audioCancel").showTimesShort(0);  }  debugPrint("...cancelled");}  }
class C{  public static Collection<File> listFiles(File directory,IOFileFilter fileFilter,IOFileFilter dirFilter){  validateListFilesParameters(directory,fileFilter);  IOFileFilter effFileFilter=setUpEffectiveFileFilter(fileFilter);  IOFileFilter effDirFilter=setUpEffectiveDirFilter(dirFilter);  Collection<File> files=new java.util.LinkedList<File>();  innerListFiles(files,directory,FileFilterUtils.or(effFileFilter,effDirFilter),false);  return files;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_Instant_HEAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200982,skilltarget,num0,skillcaster,skillname);}  }
class C{  public boolean twrHandlesException(TypeDecl exceptionType){  ASTNode$State state=state();  try {    if (catchHandlesException(exceptionType))     return true;    if (hasFinally() && !getFinally().canCompleteNormally())     return true;    return handlesException(exceptionType);  }  finally {  }}  }
class C{  public synchronized long resetByteCount(){  long tmp=this.count;  this.count=0;  return tmp;}  }
class C{  @Deprecated public Builder cacheInMemory(){  cacheInMemory=true;  return this;}  }
class C{  boolean isLeftChild(){  if (this.parent == null)   return false;  return (this.parent.left == this);}  }
class C{  public String toStringVerbose(int windowSize){  List<Double> mapping=seqFromToLenOut();  String str="Genome coords: " + from + "-"+ to+ "; screen width: "+ mapping.size()+ "; scale: "+ this.getBpPerScreenColumn()+ " bp/column"+ "; Mapping: "+ mapping;  str+="\n";  str+=this.toString();  return str;}  }
class C{  private void moveTemplateToSecondPhase(ITemplateHolder template){  if (template.isDeleted() || !template.isInCache())   return;  template.setSecondPhase();}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  public static boolean isOFBGiftCard(String stPassed){  if (isEmpty(stPassed))   return defaultEmptyOK;  String st=stripCharsInBag(stPassed,creditCardDelimiters);  if (st.length() == 15 && sumIsMod10(getLuhnSum(st))) {    return true;  }  return false;}  }
class C{  private void spawnShieldControlRoomTeleporter(){  deleteNpc(702010);  deleteNpc(702011);  deleteNpc(702012);  deleteNpc(702013);  spawn(730886,255.47392f,293.56177f,321.18497f,(byte)89);  spawn(730886,255.55742f,216.03549f,321.21344f,(byte)30);  spawn(730886,294.20718f,254.60352f,295.7729f,(byte)60);  spawn(730886,216.97739f,254.4616f,295.77353f,(byte)0);}  }
class C{  public AppPreferences(final Context context){  preferences=context.getApplicationContext().getSharedPreferences("io.github.azaiats.androidmvvm.sample.AppPreferences",Context.MODE_PRIVATE);}  }
class C{  public static <R>Flowable<R> ifThen(BooleanSupplier condition,Publisher<? extends R> then,Flowable<? extends R> orElse){  ObjectHelper.requireNonNull(condition,"condition is null");  ObjectHelper.requireNonNull(then,"then is null");  ObjectHelper.requireNonNull(orElse,"orElse is null");  return RxJavaPlugins.onAssembly(new FlowableIfThen<R>(condition,then,orElse));}  }
class C{  public boolean retainEntries(TShortLongProcedure procedure){  boolean modified=false;  byte[] states=_states;  short[] keys=_set;  long[] values=_values;  tempDisableAutoCompaction();  try {    for (int i=keys.length; i-- > 0; ) {      if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {        removeAt(i);        modified=true;      }    }  }  finally {    reenableAutoCompaction(true);  }  return modified;}  }
class C{  @Override public double[] makeInverseCumulativeTestPoints(){  double[] points=makeCumulativeTestValues();  double[] points2=new double[points.length - 2];  System.arraycopy(points,1,points2,0,points2.length);  return points2;}  }
class C{  private void addPathConnection(ViewTransform transform,Graphics2D g,boolean isSelected,boolean showMargin,ConnectionDrawing drawing,ColorSet colorSet,int targetX,int targetY,boolean isConnected,boolean isTargetConnected){  int radius=4;  int sradius=transform.getSwingDimension(radius);  int scurvature=transform.getSwingDimension(2);  int scurvature2=transform.getSwingDimension(3);  int marginLineOffset=transform.getSwingDimension(16);  boolean isVertical=mAnchor.isVerticalAnchor();  int x0=transform.getSwingFX(mX);  int y0=transform.getSwingFY(mY);  int x1=transform.getSwingFX(targetX);  int y1=transform.getSwingFY(targetY);  drawing.mPath.moveTo(x0,y0);  int distanceX=Math.abs(targetX - mX);  int distanceY=Math.abs(targetY - mY);  int distance=(int)Math.sqrt(distanceX * distanceX + distanceY * distanceY);  int maxDistance=Math.min(24 + (int)(0.1f * distance),64);  maxDistance=distance > maxDistance ? maxDistance : distance;  int controlDistance=transform.getSwingDimension(maxDistance);  if (isTargetConnected) {    if (isVertical) {      x1=x0 < x1 ? x1 - sConnectionOffset : x1 + sConnectionOffset;    } else {      y1=y0 < y1 ? y1 - sConnectionOffset : y1 + sConnectionOffset;    }  }  boolean beStraight=mAnchor.isConnected() && mAnchor.getTarget().getOwner() == getOwner().getParent();  if (beStraight) {    if (isVertical) {      x1=x0;    } else {      y1=y0;    }  }  if (isVertical) {    boolean isBaseline=mAnchor.getType() == ConstraintAnchor.Type.BASELINE;    boolean isTopConnection=mAnchor.getType() == ConstraintAnchor.Type.TOP;    isTopConnection|=isBaseline;    if (isTopConnection) {      controlDistance=-controlDistance;    }    if (isConnected && mAnchor.getTarget() != null && mAnchor.getType() == mAnchor.getTarget().getType() && !isBaseline && mAnchor.getMargin() == 0) {      int base=y0 - sradius - ConnectionDraw.ARROW_SIDE;      if (!isTopConnection) {        base=y0 + sradius + ConnectionDraw.ARROW_SIDE;      }      if (x0 > x1) {        sradius=-sradius;      }      addQuarterArc(drawing.mPath,x0,y0,x0 + sradius,base,scurvature,true);      drawing.mPath.lineTo(x1 - 2 * sradius,base);      int yt=y1 - ConnectionDraw.ARROW_SIDE;      if (!isTopConnection) {        yt=y1 + ConnectionDraw.ARROW_SIDE;      }      addQuarterArc(drawing.mPath,x1 - 2 * sradius,base,x1,yt,scurvature2,false);      if (isTopConnection) {        drawing.setArrow(ConnectionDraw.getBottomArrow(),x1,y1);      } else {        drawing.setArrow(ConnectionDraw.getTopArrow(),x1,y1);      }    } else {      if (isBaseline) {        drawing.mDrawEndCircle=false;        int offset1=(int)(transform.getSwingDimension(mAnchor.getOwner().getDrawWidth()) * 0.2f);        int offset2=0;        if (mAnchor.getTarget() != null) {          ConstraintWidget widget=mAnchor.getTarget().getOwner();          offset2=(int)(transform.getSwingDimension(widget.getDrawWidth()) * 0.2f);          int tl=transform.getSwingX(widget.getDrawX());          int tr=transform.getSwingX(widget.getDrawRight());          int tt=transform.getSwingY(widget.getDrawY());          int tb=transform.getSwingDimension(widget.getBaselineDistance());          Shape line=new Line2D.Float(tl,tt + tb,tr,tt + tb);          drawing.addShape(line);        }        if (x0 < x1) {          x0+=offset1;          x1-=offset2;        } else {          x0-=offset1;          x1+=offset2;        }        drawing.mPath.moveTo(x0,y0);      }      int cx1=x0;      int cy1=y0 + controlDistance;      int cx2=x1;      int cy2=y1 - controlDistance;      int yt=y1 + ConnectionDraw.ARROW_SIDE;      if (!isTopConnection) {        yt=y1 - ConnectionDraw.ARROW_SIDE;      }      drawing.mPath.curveTo(cx1,cy1,cx2,cy2,x1,yt);      if (!isTopConnection) {        drawing.setArrow(ConnectionDraw.getBottomArrow(),x1,y1);      } else {        drawing.setArrow(ConnectionDraw.getTopArrow(),x1,y1);      }    }    if ((colorSet.alwaysShowMargins() || isSelected) && mAnchor.getMargin() > 0 && showMargin) {      Color pre=g.getColor();      g.setColor(colorSet.getMargins());      int marginPosition;      ConstraintAnchor left=getOwner().getAnchor(ConstraintAnchor.Type.LEFT);      ConstraintAnchor right=getOwner().getAnchor(ConstraintAnchor.Type.RIGHT);      boolean centerConnectionAnchor=(left != null && right != null && left.isConnected() && left.getTarget() == right.getTarget());      boolean drawMarginToTheRight=x0 > x1;      if (centerConnectionAnchor) {        if (left.getTarget().getType() == ConstraintAnchor.Type.LEFT) {          drawMarginToTheRight=true;        } else {          drawMarginToTheRight=false;        }      }      if (drawMarginToTheRight) {        marginPosition=x0 + marginLineOffset;      } else {        marginPosition=x0 - marginLineOffset;      }      Stroke pres=g.getStroke();      g.setStroke(sSimpleStroke);      ConnectionDraw.drawVerticalMarginIndicator(g,String.valueOf(mAnchor.getMargin()),marginPosition,y0,y1);      g.setStroke(ConnectionDraw.sDashedStroke);      if (x0 > x1) {        g.drawLine(marginPosition + marginLineOffset,y1,x1,y1);      } else {        g.drawLine(marginPosition - marginLineOffset,y1,x1,y1);      }      g.setColor(pre);      g.setStroke(pres);    }  } else {    boolean isLeftConnection=mAnchor.getType() == ConstraintAnchor.Type.LEFT;    if (isLeftConnection) {      controlDistance=-controlDistance;    }    if (isConnected && mAnchor.getTarget() != null && mAnchor.getType() == mAnchor.getTarget().getType() & mAnchor.getMargin() == 0) {      int base=x0 - sradius - ConnectionDraw.ARROW_SIDE;      if (!isLeftConnection) {        base=x0 + sradius + ConnectionDraw.ARROW_SIDE;      }      if (y0 > y1) {        sradius=-sradius;      }      addQuarterArc(drawing.mPath,x0,y0,base,y0 + sradius,scurvature,false);      drawing.mPath.lineTo(base,y1 - 2 * sradius);      int xt=x1 - ConnectionDraw.ARROW_SIDE;      if (!isLeftConnection) {        xt=x1 + ConnectionDraw.ARROW_SIDE;      }      addQuarterArc(drawing.mPath,base,y1 - 2 * sradius,xt,y1,scurvature2,true);      if (isLeftConnection) {        drawing.setArrow(ConnectionDraw.getRightArrow(),x1,y1);      } else {        drawing.setArrow(ConnectionDraw.getLeftArrow(),x1,y1);      }    } else {      int cx1=x0 + controlDistance;      int cy1=y0;      int cx2=x1 - controlDistance;      int cy2=y1;      int xt=x1 + ConnectionDraw.ARROW_SIDE;      if (!isLeftConnection) {        xt=x1 - ConnectionDraw.ARROW_SIDE;      }      drawing.mPath.curveTo(cx1,cy1,cx2,cy2,xt,y1);      if (!isLeftConnection) {        drawing.setArrow(ConnectionDraw.getRightArrow(),x1,y1);      } else {        drawing.setArrow(ConnectionDraw.getLeftArrow(),x1,y1);      }    }    if ((colorSet.alwaysShowMargins() || isSelected) && mAnchor.getMargin() > 0 && showMargin) {      Color pre=g.getColor();      g.setColor(colorSet.getMargins());      int marginPosition;      ConstraintAnchor top=getOwner().getAnchor(ConstraintAnchor.Type.TOP);      ConstraintAnchor bottom=getOwner().getAnchor(ConstraintAnchor.Type.BOTTOM);      boolean centerConnectionAnchor=(top != null && bottom != null && top.isConnected() && top.getTarget() == bottom.getTarget());      boolean drawMarginToTheBottom=y0 > y1;      if (centerConnectionAnchor) {        if (top.getTarget().getType() == ConstraintAnchor.Type.TOP) {          drawMarginToTheBottom=true;        } else {          drawMarginToTheBottom=false;        }      }      if (drawMarginToTheBottom) {        marginPosition=y0 + marginLineOffset;      } else {        marginPosition=y0 - marginLineOffset;      }      Stroke pres=g.getStroke();      g.setStroke(sSimpleStroke);      ConnectionDraw.drawHorizontalMarginIndicator(g,String.valueOf(mAnchor.getMargin()),x0,x1,marginPosition);      g.setStroke(ConnectionDraw.sDashedStroke);      if (y0 > y1) {        g.drawLine(x1,y0 + marginLineOffset,x1,y1);      } else {        g.drawLine(x1,y0 - marginLineOffset,x1,y1);      }      g.setColor(pre);      g.setStroke(pres);    }  }}  }
class C{  private boolean isRegisterUsed(int register){  Instruction35c i=(Instruction35c)instruction;  return register == i.getRegisterD() || register == i.getRegisterE() || register == i.getRegisterF() || register == i.getRegisterG() || register == i.getRegisterC();}  }
class C{  public void stopAutoCycle(){  if (mCycleTask != null) {    mCycleTask.cancel();  }  if (mCycleTimer != null) {    mCycleTimer.cancel();  }  if (mResumingTimer != null) {    mResumingTimer.cancel();  }  if (mResumingTask != null) {    mResumingTask.cancel();  }  mAutoCycle=false;  mCycling=false;}  }
class C{  public void registerPlayerConnection(int playerId,byte[] token,byte[] identifier,ClientChannelHandler channelHandler,String realName) throws UnsupportedEncodingException {  ChatClient chatClient=players.get(playerId);  if (chatClient != null) {    byte[] regToken=chatClient.getToken();    chatClient.same(realName);    if (Arrays.equals(regToken,token)) {      String sreal=chatClient.getRealName() + "@" + new String(identifier);      chatClient.setIdentifier(sreal.getBytes("utf-16le"));      chatClient.setChannelHandler(channelHandler);      channelHandler.sendPacket(new SM_PLAYER_AUTH_RESPONSE());      channelHandler.setState(State.AUTHED);      channelHandler.setChatClient(chatClient);      broadcastService.addClient(chatClient);    }  }}  }
class C{  public void start(ScheduledExecutorService ses){  start_(ses,false);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  } else   if (obj == null || obj.getClass() != getClass()) {    return false;  }  return getName().equals(((Permission)obj).getName());}  }
class C{  void initFromCameraParameters(Camera camera,int viewWidth,int viewHeight){  Camera.Parameters parameters=camera.getParameters();  int width=viewWidth;  int height=viewHeight;  screenResolution=new Point(width,height);  Log.i(TAG,"Screen resolution: " + screenResolution);  cameraResolution=findBestPreviewSizeValue(parameters,screenResolution);  Log.i(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  private void compareOriginalData(FieldConfigValuePopulateInterface field){  if (field != null) {    String nextText=field.getStringValue();    String originalText=valueMap.get(field);    if (originalText != null) {      if (originalText.compareTo(nextText) != 0) {        treeDataUpdated=true;      }    }  }}  }
class C{  public static String[] splitString(String source,char delimeter){  String[] resultArray=null;  int delimeterIndex=source.indexOf(delimeter);  if (delimeterIndex < 0) {    resultArray=new String[1];    resultArray[0]=source;  } else {    String firstStr=source.substring(0,delimeterIndex);    String secondStr=source.substring(delimeterIndex + 1);    resultArray=new String[2];    resultArray[0]=firstStr;    resultArray[1]=secondStr;  }  return resultArray;}  }
class C{  @Override public void rightMouseButton(Object selectedItem,MouseEvent e){}  }
class C{  public ShortArrayCodeOutput(int initSize){  if (initSize < 0) {    throw new IllegalArgumentException("initSize < 0");  }  this.array=new short[initSize];}  }
class C{  public static ModelIndex create(ModelEntity modelEntity,Element indexElement){  String name=indexElement.getAttribute("name").intern();  boolean unique="true".equals(indexElement.getAttribute("unique"));  String description=UtilXml.childElementValue(indexElement,"description");  List<Field> fields=Collections.emptyList();  List<? extends Element> elementList=UtilXml.childElementList(indexElement,"index-field");  if (!elementList.isEmpty()) {    fields=new ArrayList<Field>(elementList.size());    for (    Element indexFieldElement : elementList) {      String fieldName=indexFieldElement.getAttribute("name").intern();      String function=indexFieldElement.getAttribute("function").intern();      fields.add(new Field(fieldName,UtilValidate.isNotEmpty(function) ? Function.valueOf(function.toUpperCase()) : null));    }    fields=Collections.unmodifiableList(fields);  }  return new ModelIndex(modelEntity,description,name,fields,unique);}  }
class C{  private static void drainStream(InputStream is) throws IOException {  BufferedInputStream reader=new BufferedInputStream(is);  while (reader.read() != -1) {  }}  }
class C{  public String readNullTerminatedBytes() throws IOException {  StringBuilder buf=new StringBuilder();  while (true) {    byte letter=(byte)ins.read();    if (letter == -1)     throw new IOException("readNullTerminatedBytes(): failed (EOF)");    if (letter == 0)     break; else     buf.append((char)letter);  }  return buf.toString();}  }
class C{  public static <T extends GenericEntity>List<T> filterByDate(List<T> datedValues){  return filterByDate(datedValues,UtilDateTime.nowTimestamp(),null,null,true);}  }
class C{  public PagerImplementor(PagerView view){  this.view=view;}  }
class C{  private Set<List<Fragment>> sortedFragments(){  Map<String,Set<Fragment>> fragmentMap=getFragments().collect(groupingBy(null,toSet()));  Set<Fragment> remainingFragments=getFragments().collect(toSet());  Set<MultiTraversal> remainingTraversals=Sets.newHashSet(multiTraversals);  Set<MultiTraversal> matchedTraversals=new HashSet<>();  Set<List<Fragment>> allSortedFragments=new HashSet<>();  while (!remainingTraversals.isEmpty()) {    Optional<Fragment> optionalFragment=remainingFragments.stream().min(naturalOrder());    Fragment highestFragment=optionalFragment.orElseThrow(null);    String start=highestFragment.getStart();    PriorityQueue<Fragment> reachableFragments=new PriorityQueue<>(fragmentMap.get(start));    List<Fragment> sortedFragments=new ArrayList<>();    while (!reachableFragments.isEmpty()) {      Fragment fragment=reachableFragments.poll();      MultiTraversal multiTraversal=fragment.getMultiTraversal();      if (matchedTraversals.contains(multiTraversal))       continue;      remainingFragments.remove(fragment);      remainingTraversals.remove(multiTraversal);      matchedTraversals.add(multiTraversal);      sortedFragments.add(fragment);      fragment.getEnd().ifPresent(null);    }    allSortedFragments.add(sortedFragments);  }  return allSortedFragments;}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fall_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200667,skillcaster,skillname);}  }
class C{  public boolean dump_summaries(){  return soot.PhaseOptions.getBoolean(options,"dump-summaries");}  }
class C{  private void parseNoWildCards(){  fSegments=new String[1];  fSegments[0]=fPattern;  fBound=fLength;}  }
class C{  public void install(boolean synchronous) throws Exception {  status=Status.INSTALLING;  stateChanged();  Installer inst=new Installer();  if (synchronous) {    inst.run();  } else {    new Thread(inst).start();  }}  }
class C{  static double expint(int p,final double result[]){  final double xs[]=new double[2];  final double as[]=new double[2];  final double ys[]=new double[2];  xs[0]=2.718281828459045;  xs[1]=1.4456468917292502E-16;  split(1.0,ys);  while (p > 0) {    if ((p & 1) != 0) {      quadMult(ys,xs,as);      ys[0]=as[0];      ys[1]=as[1];    }    quadMult(xs,xs,as);    xs[0]=as[0];    xs[1]=as[1];    p>>=1;  }  if (result != null) {    result[0]=ys[0];    result[1]=ys[1];    resplit(result);  }  return ys[0] + ys[1];}  }
class C{  private void notifyRemoved(List<AirMapTraffic> removed){  if (removed == null || removed.isEmpty()) {    return;  }  for (  AirMapTrafficListener listener : listeners) {    listener.onRemoveTraffic(removed);  }}  }
class C{  public CatchablePokemon(PokemonGo api,MapPokemon proto){  this.api=api;  this.encounterKind=EncounterKind.NORMAL;  this.spawnPointId=proto.getSpawnPointId();  this.encounterId=proto.getEncounterId();  this.pokemonId=proto.getPokemonId();  this.pokemonIdValue=proto.getPokemonIdValue();  this.expirationTimestampMs=proto.getExpirationTimestampMs();  this.latitude=proto.getLatitude();  this.longitude=proto.getLongitude();}  }
class C{  @Deprecated public static JsonArray readFrom(String string){  return JsonValue.readFrom(string).asArray();}  }
class C{  public Line(final Vector2D p,final double angle,final double tolerance){  reset(p,angle);  this.tolerance=tolerance;}  }
class C{  protected final void clearIdentifiers(){  if (identifiers != null) {    identifiers.clear();  }}  }
class C{  public static <T>void launchActivity(Activity context,Class<? extends Activity> activity,boolean closeCurrentActivity,String key,T data){  Intent intent=new Intent(context,activity);  if (data != null) {    putBundle(key,data,intent);  }  context.startActivity(intent);  if (closeCurrentActivity) {    context.finish();  }}  }
class C{  public static Rule createNewRule(){  Rule rule=styleFactory.createRule();  rule.setName(Localisation.getString(SLDTreeTools.class,"TreeItem.newRule"));  return rule;}  }
class C{  @Override public void propagate(GeomPointsTo ptAnalyzer,IWorklist worklist){  int i, j;  AllocNode obj;  SegmentNode pts, pe, int_entry1[], int_entry2[];  HeapInsIntervalManager him1, him2;  HeapInsNode qn, objn;  boolean added, has_new_edges;  if (complex_cons != null) {    for (    Map.Entry<AllocNode,HeapInsIntervalManager> entry : new_pts.entrySet()) {      obj=entry.getKey();      int_entry1=entry.getValue().getFigures();      for (      PlainConstraint pcons : complex_cons) {        objn=(HeapInsNode)ptAnalyzer.findAndInsertInstanceField(obj,pcons.f);        if (objn == null) {          pt_objs.put(obj,(HeapInsIntervalManager)deadManager);          entry.setValue((HeapInsIntervalManager)deadManager);          break;        }        if (objn.willUpdate == false) {          continue;        }        qn=(HeapInsNode)pcons.otherSide;        for (i=0; i < HeapInsIntervalManager.Divisions; ++i) {          pts=int_entry1[i];          while (pts != null && pts.is_new) {switch (pcons.type) {case Constants.STORE_CONS:              if (qn.add_simple_constraint_3(objn,pcons.code == GeometricManager.ONE_TO_ONE ? pts.I1 : 0,pts.I2,pts.L < 0 ? -pts.L : pts.L))               worklist.push(qn);            break;case Constants.LOAD_CONS:          if (objn.add_simple_constraint_3(qn,pts.I2,pcons.code == GeometricManager.ONE_TO_ONE ? pts.I1 : 0,pts.L < 0 ? -pts.L : pts.L))           worklist.push(objn);        break;    }    pts=pts.next;  }}}}}for (Map.Entry<HeapInsNode,HeapInsIntervalManager> entry1 : flowto.entrySet()) {added=false;qn=entry1.getKey();him1=entry1.getValue();int_entry1=him1.getFigures();has_new_edges=him1.isThereUnprocessedFigures();Map<AllocNode,HeapInsIntervalManager> objs=(has_new_edges ? pt_objs : new_pts);for (Map.Entry<AllocNode,HeapInsIntervalManager> entry2 : objs.entrySet()) {obj=entry2.getKey();him2=entry2.getValue();if (him2 == deadManager) continue;if (!ptAnalyzer.castNeverFails(obj.getType(),qn.getWrappedNode().getType())) continue;int_entry2=him2.getFigures();for (i=0; i < HeapInsIntervalManager.Divisions; ++i) {pts=int_entry2[i];while (pts != null) {  if (!has_new_edges && !pts.is_new)   break;  for (j=0; j < HeapInsIntervalManager.Divisions; ++j) {    pe=int_entry1[j];    while (pe != null) {      if (pts.is_new || pe.is_new) {        if (add_new_points_to_tuple(pts,pe,obj,qn))         added=true;      } else       break;      pe=pe.next;    }  }  pts=pts.next;}}}if (added) worklist.push(qn);if (has_new_edges) him1.flush();}}  }
class C{  private static void printUsage(){  System.err.println("Syntax:\nsummaryGaussNormEvaluator -do=(char|word|all) [-summaryDir=summaries/] [-modelDir=models/]" + "[-wordMin=#] [-wordMax=#] [-wordDist=#] [-charMin=#] [-charMax=#] [-charDist=#] [-o=outFile] [-t=#]" + "[-s] [-use=o|d] [-progress] [-lowmem]");  System.err.println("wordMin=#\tMin word n-gram size.\nwordMax=#\tMax word n-gram size.\nwordDist=#\tWord n-gram window\n" + "charMin=#\tMin char n-gram size.\ncharMax=#\tMax char n-gram size.\ncharDist=#\tChar n-gram window.\n" + "-o=outFile\tThe file to output data. Default is stdout.\n-t=#\tNumber of threads. Defaults to 2.\n"+ "-s\tFor non-verbose output (silent).\n"+ "-progress\tFor progress indication (even in silent mode).\n"+ "-use=o|d\tUse [o]ccurences or average [d]istance to assign weights to the graph. Defaults to o.\n"+ "-lowmem\tDo not use caching for documents. Less memory used, more time required.\n"+ "-?\tShow this screen.");}  }
class C{  public void reset(){  firstLiteralType=null;}  }
class C{  private static final String[] collectionToStrings(Collection c){  return c == null ? null : (String[])c.toArray(new String[c.size()]);}  }
class C{  public static String removeLastDelimiter(String topic){  if (topic.endsWith(TOPIC_DELIMITER)) {    topic=topic.substring(0,topic.length() - TOPIC_DELIMITER.length());  }  return topic;}  }
class C{  private void sendLocalBroadcast(String event,String dirRemotePath,RemoteOperationResult result){  Log_OC.d(TAG,"Send broadcast " + event);  Intent intent=new Intent(event);  intent.putExtra(FileSyncAdapter.EXTRA_ACCOUNT_NAME,getAccount().name);  if (dirRemotePath != null) {    intent.putExtra(FileSyncAdapter.EXTRA_FOLDER_PATH,dirRemotePath);  }  if (result != null) {    intent.putExtra(FileSyncAdapter.EXTRA_RESULT,result);  }  getContext().sendStickyBroadcast(intent);}  }
class C{  public QName checkDuplicatesNS(){  if (fLength <= SIZE_LIMIT) {    for (int i=0; i < fLength - 1; ++i) {      Attribute att1=fAttributes[i];      for (int j=i + 1; j < fLength; ++j) {        Attribute att2=fAttributes[j];        if (att1.name.localpart == att2.name.localpart && att1.name.uri == att2.name.uri) {          return att2.name;        }      }    }  } else {    fIsTableViewConsistent=false;    prepareTableView();    Attribute attr;    int bucket;    for (int i=fLength - 1; i >= 0; --i) {      attr=fAttributes[i];      bucket=getTableViewBucket(attr.name.localpart,attr.name.uri);      if (fAttributeTableViewChainState[bucket] != fLargeCount) {        fAttributeTableViewChainState[bucket]=fLargeCount;        attr.next=null;        fAttributeTableView[bucket]=attr;      } else {        Attribute found=fAttributeTableView[bucket];        while (found != null) {          if (found.name.localpart == attr.name.localpart && found.name.uri == attr.name.uri) {            return attr.name;          }          found=found.next;        }        attr.next=fAttributeTableView[bucket];        fAttributeTableView[bucket]=attr;      }    }  }  return null;}  }
class C{  private boolean isSyncComplete(JSONObject taskStatus,JSONObject taskDetails){  try {    if (taskStatus.getBoolean("complete")) {      return true;    }    if (taskDetails.has("error")) {      throw new RuntimeException("Sync failed with error: '" + taskDetails.getString("error") + "'!");    }    return false;  } catch (  JSONException e) {    throw new RuntimeException(e);  }}  }
class C{  private boolean intersects(Vector3f v0,Vector3f v1,Vector3f v2,Vector3f store,boolean doPlanar,boolean quad){  Vector3f tempVa=Vector3f.newInstance(), tempVb=Vector3f.newInstance(), tempVc=Vector3f.newInstance(), tempVd=Vector3f.newInstance();  Vector3f diff=origin.subtract(v0,tempVa);  Vector3f edge1=v1.subtract(v0,tempVb);  Vector3f edge2=v2.subtract(v0,tempVc);  Vector3f norm=edge1.cross(edge2,tempVd);  float dirDotNorm=direction.dot(norm);  float sign;  if (dirDotNorm > FastMath.FLT_EPSILON) {    sign=1;  } else   if (dirDotNorm < -FastMath.FLT_EPSILON) {    sign=-1f;    dirDotNorm=-dirDotNorm;  } else {    return false;  }  float dirDotDiffxEdge2=sign * direction.dot(diff.cross(edge2,edge2));  if (dirDotDiffxEdge2 >= 0.0f) {    float dirDotEdge1xDiff=sign * direction.dot(edge1.crossLocal(diff));    if (dirDotEdge1xDiff >= 0.0f) {      if (!quad ? dirDotDiffxEdge2 + dirDotEdge1xDiff <= dirDotNorm : dirDotEdge1xDiff <= dirDotNorm) {        float diffDotNorm=-sign * diff.dot(norm);        if (diffDotNorm >= 0.0f) {          Vector3f.recycle(tempVa);          Vector3f.recycle(tempVb);          Vector3f.recycle(tempVc);          Vector3f.recycle(tempVd);          if (store == null) {            return true;          }          float inv=1f / dirDotNorm;          float t=diffDotNorm * inv;          if (!doPlanar) {            store.set(origin).addLocal(direction.x * t,direction.y * t,direction.z * t);          } else {            float w1=dirDotDiffxEdge2 * inv;            float w2=dirDotEdge1xDiff * inv;            store.set(t,w1,w2);          }          return true;        }      }    }  }  Vector3f.recycle(tempVa);  Vector3f.recycle(tempVb);  Vector3f.recycle(tempVc);  Vector3f.recycle(tempVd);  return false;}  }
class C{  public UsersSearchQuery search(UserActor actor){  return new UsersSearchQuery(getClient(),actor);}  }
class C{  protected int addContentSpecNode(short nodeType,String nodeValue){  int contentSpecIndex=createContentSpec();  fContentSpec.setValues(nodeType,nodeValue,null);  setContentSpec(contentSpecIndex,fContentSpec);  return contentSpecIndex;}  }
class C{  public static double idf(double totalDocs,double numTimesWordAppearedInADocument){  return totalDocs > 0 ? Math.log10(totalDocs / numTimesWordAppearedInADocument) : 0;}  }
class C{  public static void openBrowser(URI url) throws IOException {  if (Desktop.isDesktopSupported()) {    Desktop.getDesktop().browse(url);  } else {    LOGGER.error("Can not open browser because this capability is not supported on " + "your platform. You can use the link below to open the report manually.");  }}  }
class C{  public static List<Map<String,Object>> calcConversionRates(List<GenericValue> visits,List<GenericValue> orders,String keyFieldName){  List<Map<String,Object>> conversionRates=FastList.newInstance();  for (  GenericValue visit : visits) {    Map<String,Object> reportValue=FastMap.newInstance();    reportValue.put(keyFieldName,visit.getString(keyFieldName));    reportValue.put("visits",visit.getLong("visitId"));    List<GenericValue> ordersForThisKey=EntityUtil.filterByAnd(orders,UtilMisc.toMap(keyFieldName,visit.getString(keyFieldName)));    if ((ordersForThisKey != null) && (ordersForThisKey.size() > 0)) {      GenericValue orderValue=ordersForThisKey.get(0);      reportValue.put("orders",orderValue.getLong("orderId"));      if (orderValue.getDouble("grandTotal") == null) {        reportValue.put("orderAmount",Double.valueOf(0));      } else {        reportValue.put("orderAmount",orderValue.getDouble("grandTotal"));      }      if ((orderValue.getLong("orderId") == null) || (visit.getLong("visitId") == null) || (visit.getLong("visitId").intValue() == 0)) {        reportValue.put("conversionRate",Double.valueOf(0));      } else {        reportValue.put("conversionRate",Double.valueOf(orderValue.getLong("orderId").doubleValue() / visit.getLong("visitId").doubleValue()));      }    } else {      reportValue.put("orders",Long.valueOf(0));      reportValue.put("orderAmount",Double.valueOf(0));      reportValue.put("conversionRate",Double.valueOf(0));    }    conversionRates.add(reportValue);  }  return conversionRates;}  }
class C{  @Override public ExpressionResult evaluate(RowIntf value) throws FilterUnsupportedException, FilterIllegalMemberException {  return new ExpressionResult(DataType.BOOLEAN,false);}  }
class C{  public void jumpTo(int page,boolean withAnimation){  if (swipeVertical) {    float toY=-page * toCurrentScale(optimalPageHeight);    if (withAnimation) {      animationManager.startYAnimation(currentYOffset,toY);    } else {      moveTo(currentXOffset,toY);    }  } else {    float toX=-page * toCurrentScale(optimalPageWidth);    if (withAnimation) {      animationManager.startXAnimation(currentXOffset,toX);    } else {      moveTo(toX,currentYOffset);    }  }  showPage(page);}  }
class C{  public boolean isDrawTopYLabelEntryEnabled(){  return mDrawTopYLabelEntry;}  }
class C{  public Object[] renewAll(String[] entryUids,String[] classNames,int[] objectTypes,long[] durations){  Exception[] exceptions=new Exception[entryUids.length];  long[] newDurations=new long[entryUids.length];  for (int i=0; i < entryUids.length; i++) {    try {      newDurations[i]=renew(entryUids[i],classNames[i],objectTypes[i],durations[i],false,true,false);    } catch (    Exception ex) {      exceptions[i]=ex;    }  }  return new Object[]{exceptions,newDurations};}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_INSUFFICIENT_COST_FOR_TOGGLE_SKILLL(String value0){  return new SM_SYSTEM_MESSAGE(1301060,value0);}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),0);  setChild(new List(),1);}  }
class C{  public MarketGetCategoriesQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static String createEphemeralPath(ZkClient zkClient,String path,String data){  String pathCT=null;  try {    pathCT=zkClient.createEphemeralSequential(path,getBytes(data));  } catch (  ZkNoNodeException e) {    createParentPath(zkClient,path);    pathCT=zkClient.createEphemeralSequential(path,getBytes(data));  }  return pathCT;}  }
class C{  public static void main(String[] args) throws IOException {  int debuglevel=0;  Vector catalogFiles=new Vector();  int resType=0;  String resTypeStr=null;  String name=null;  String publicId=null;  String systemId=null;  String uri=null;  boolean absoluteSystem=false;  for (int i=0; i < args.length; i++) {    if (args[i].equals("-c")) {      ++i;      catalogFiles.add(args[i]);      continue;    }    if (args[i].equals("-p")) {      ++i;      publicId=args[i];      continue;    }    if (args[i].equals("-s")) {      ++i;      systemId=args[i];      continue;    }    if (args[i].equals("-n")) {      ++i;      name=args[i];      continue;    }    if (args[i].equals("-u")) {      ++i;      uri=args[i];      continue;    }    if (args[i].equals("-a")) {      absoluteSystem=true;      continue;    }    if (args[i].equals("-d")) {      ++i;      String debugstr=args[i];      try {        debuglevel=Integer.parseInt(debugstr);        if (debuglevel > 0) {          debug.setDebug(debuglevel);        }      } catch (      Exception e) {      }      continue;    }    resTypeStr=args[i];  }  if (resTypeStr == null) {    usage();  }  if (resTypeStr.equalsIgnoreCase("doctype")) {    resType=Catalog.DOCTYPE;    if (publicId == null && systemId == null) {      System.out.println("DOCTYPE requires public or system identifier.");      usage();    }  } else   if (resTypeStr.equalsIgnoreCase("document")) {    resType=Catalog.DOCUMENT;  } else   if (resTypeStr.equalsIgnoreCase("entity")) {    resType=Catalog.ENTITY;    if (publicId == null && systemId == null && name == null) {      System.out.println("ENTITY requires name or public or system identifier.");      usage();    }  } else   if (resTypeStr.equalsIgnoreCase("notation")) {    resType=Catalog.NOTATION;    if (publicId == null && systemId == null && name == null) {      System.out.println("NOTATION requires name or public or system identifier.");      usage();    }  } else   if (resTypeStr.equalsIgnoreCase("public")) {    resType=Catalog.PUBLIC;    if (publicId == null) {      System.out.println("PUBLIC requires public identifier.");      usage();    }  } else   if (resTypeStr.equalsIgnoreCase("system")) {    resType=Catalog.SYSTEM;    if (systemId == null) {      System.out.println("SYSTEM requires system identifier.");      usage();    }  } else   if (resTypeStr.equalsIgnoreCase("uri")) {    resType=Catalog.URI;    if (uri == null) {      System.out.println("URI requires a uri.");      usage();    }  } else {    System.out.println(resTypeStr + " is not a recognized keyword.");    usage();  }  if (absoluteSystem) {    URL base=null;    URL sysid=null;    try {      base=FileURL.makeURL("basename");    } catch (    MalformedURLException e) {      String userdir=System.getProperty("user.dir");      userdir=userdir.replace('\\','/');      debug.message(1,"Malformed URL on cwd",userdir);      base=null;    }    try {      sysid=new URL(base,systemId);      systemId=sysid.toString();    } catch (    MalformedURLException e) {      try {        sysid=new URL("file:///" + systemId);      } catch (      MalformedURLException e2) {        debug.message(1,"Malformed URL on system id",systemId);      }    }  }  CatalogResolver catalogResolver=new CatalogResolver();  Catalog resolver=catalogResolver.getCatalog();  for (int count=0; count < catalogFiles.size(); count++) {    String file=(String)catalogFiles.elementAt(count);    resolver.parseCatalog(file);  }  String result=null;  if (resType == Catalog.DOCTYPE) {    System.out.println("Resolve DOCTYPE (name, publicid, systemid):");    if (name != null) {      System.out.println("       name: " + name);    }    if (publicId != null) {      System.out.println("  public id: " + publicId);    }    if (systemId != null) {      System.out.println("  system id: " + systemId);    }    if (uri != null) {      System.out.println("        uri: " + uri);    }    result=resolver.resolveDoctype(name,publicId,systemId);  } else   if (resType == Catalog.DOCUMENT) {    System.out.println("Resolve DOCUMENT ():");    result=resolver.resolveDocument();  } else   if (resType == Catalog.ENTITY) {    System.out.println("Resolve ENTITY (name, publicid, systemid):");    if (name != null) {      System.out.println("       name: " + name);    }    if (publicId != null) {      System.out.println("  public id: " + publicId);    }    if (systemId != null) {      System.out.println("  system id: " + systemId);    }    result=resolver.resolveEntity(name,publicId,systemId);  } else   if (resType == Catalog.NOTATION) {    System.out.println("Resolve NOTATION (name, publicid, systemid):");    if (name != null) {      System.out.println("       name: " + name);    }    if (publicId != null) {      System.out.println("  public id: " + publicId);    }    if (systemId != null) {      System.out.println("  system id: " + systemId);    }    result=resolver.resolveNotation(name,publicId,systemId);  } else   if (resType == Catalog.PUBLIC) {    System.out.println("Resolve PUBLIC (publicid, systemid):");    if (publicId != null) {      System.out.println("  public id: " + publicId);    }    if (systemId != null) {      System.out.println("  system id: " + systemId);    }    result=resolver.resolvePublic(publicId,systemId);  } else   if (resType == Catalog.SYSTEM) {    System.out.println("Resolve SYSTEM (systemid):");    if (systemId != null) {      System.out.println("  system id: " + systemId);    }    result=resolver.resolveSystem(systemId);  } else   if (resType == Catalog.URI) {    System.out.println("Resolve URI (uri):");    if (uri != null) {      System.out.println("        uri: " + uri);    }    result=resolver.resolveURI(uri);  } else {    System.out.println("resType is wrong!? This can't happen!");    usage();  }  System.out.println("Result: " + result);}  }
class C{  public void addHandler(String columnName,SQLDataHandler handler){  if (m_overrides == null)   m_overrides=new HashMap(3);  m_overrides.put(columnName,handler);}  }
class C{  public FTPDataTransferServer() throws FTPDataTransferException {  boolean useRange=false;  String aux=System.getProperty(FTPKeys.ACTIVE_DT_PORT_RANGE);  int start=0;  int stop=0;  if (aux != null) {    boolean valid=false;    StringTokenizer st=new StringTokenizer(aux,"-");    if (st.countTokens() == 2) {      String s1=st.nextToken();      String s2=st.nextToken();      int v1;      try {        v1=Integer.parseInt(s1);      } catch (      NumberFormatException e) {        v1=0;      }      int v2;      try {        v2=Integer.parseInt(s2);      } catch (      NumberFormatException e) {        v2=0;      }      if (v1 > 0 && v2 > 0 && v2 >= v1) {        start=v1;        stop=v2;        valid=true;        useRange=true;      }    }    if (!valid) {      System.err.println("WARNING: invalid value \"" + aux + "\" for the "+ FTPKeys.ACTIVE_DT_PORT_RANGE+ " system property. The value should "+ "be in the start-stop form, with "+ "start > 0, stop > 0 and start <= stop.");    }  }  if (useRange) {    ArrayList availables=new ArrayList();    for (int i=start; i <= stop; i++) {      availables.add(new Integer(i));    }    int size;    boolean done=false;    while (!done && (size=availables.size()) > 0) {      int rand=(int)Math.floor(Math.random() * size);      int port=((Integer)availables.remove(rand)).intValue();      try {        serverSocket=new ServerSocket();        serverSocket.setReceiveBufferSize(512 * 1024);        serverSocket.bind(new InetSocketAddress(port));        done=true;      } catch (      IOException e) {      }    }    if (!done) {      throw new FTPDataTransferException("Cannot open the ServerSocket. " + "No available port found in range " + aux);    }  } else {    try {      serverSocket=new ServerSocket();      serverSocket.setReceiveBufferSize(512 * 1024);      serverSocket.bind(new InetSocketAddress(0));    } catch (    IOException e) {      throw new FTPDataTransferException("Cannot open the ServerSocket",e);    }  }  thread=new Thread(this);  thread.start();}  }
class C{  public ResultSet executeQuery() throws GenericDataSourceException {  try {    _rs=_ps.executeQuery();  } catch (  SQLException sqle) {    this.checkLockWaitInfo(sqle);    throw new GenericDataSourceException("SQL Exception while executing the following:" + _sql,sqle);  }  return _rs;}  }
class C{  public SortByName(boolean caseSensitive){  this.caseSensitive=caseSensitive;}  }
class C{  private void displayEmptyScreenMessage(){  if (mEmptyView != null) {    mEmptyView.setVisibility(View.VISIBLE);  }}  }
class C{  public DiagonalMatrix(final int dimension) throws MathIllegalArgumentException {  super(dimension,dimension);  data=new double[dimension];}  }
class C{  public WidgetsGetPagesQuery(VkApiClient client,UserActor actor){  super(client,"widgets.getPages",GetPagesResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static TypeRef of(EnumType enumType){  return interner.intern(new TypeRef(Type.TYPE_ENUM,Cardinality.OPTIONAL,null,enumType));}  }
class C{  public AztecDetectorResult detect(boolean isMirror) throws NotFoundException {  Point pCenter=getMatrixCenter();  ResultPoint[] bullsEyeCorners=getBullsEyeCorners(pCenter);  if (isMirror) {    ResultPoint temp=bullsEyeCorners[0];    bullsEyeCorners[0]=bullsEyeCorners[2];    bullsEyeCorners[2]=temp;  }  extractParameters(bullsEyeCorners);  BitMatrix bits=sampleGrid(image,bullsEyeCorners[shift % 4],bullsEyeCorners[(shift + 1) % 4],bullsEyeCorners[(shift + 2) % 4],bullsEyeCorners[(shift + 3) % 4]);  ResultPoint[] corners=getMatrixCornerPoints(bullsEyeCorners);  return new AztecDetectorResult(bits,corners,compact,nbDataBlocks,nbLayers);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200810,skillcaster,skillname);}  }
class C{  protected static File createTemporaryFile(@Nonnull final File file){  Check.notNull(file,"file");  final File tempFile=new File(file.getParent(),file.getName() + ".temp");  deleteFile(tempFile);  return tempFile;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  @Override public List<DataSourceInfo> connect(SLDEditorFileInterface editorFile){  for (  DataSourceInfo dsInfo : dataSourceInfoList) {    dsInfo.reset();  }  dataSourceInfoList.clear();  if (editorFile != null) {    StyledLayerDescriptor sld=editorFile.getSLD();    SLDDataInterface sldData=editorFile.getSLDData();    List<UserLayer> userLayerList=InlineFeatureUtils.extractUserLayers(sld);    for (    UserLayer userLayer : userLayerList) {      DataSourceInfo dsInfo=new DataSourceInfo();      dsInfo.setUserLayer(userLayer);      dataSourceInfoList.add(dsInfo);      DataStore dataStore=userLayer.getInlineFeatureDatastore();      if (dataStore == null) {        continue;      }      try {        String typeName=dataStore.getTypeNames()[0];        dsInfo.setTypeName(typeName);        List<DataSourceFieldInterface> fieldList=sldData.getFieldList();        sldData.setFieldList(fieldList);        SimpleFeatureSource source=dataStore.getFeatureSource(typeName);        SimpleFeatureType schema=source.getSchema();        dsInfo.setSchema(schema);        dsInfo.setDataStore(dataStore);        GeometryTypeEnum geometryType=InlineFeatureUtils.determineGeometryType(schema.getGeometryDescriptor(),source.getFeatures());        dsInfo.setGeometryType(geometryType);      } catch (      IOException e) {        ConsoleManager.getInstance().exception(this,e);        dsInfo.reset();      }    }  }  return dataSourceInfoList;}  }
class C{  public static void validate(String s,Type t){  validate(s,t,false);}  }
class C{  @SuppressWarnings("unchecked") @EdmFunctionImport(name="CancelSalesOrder",entitySet="SalesOrderHeaders",returnType=@ReturnType(type=Type.ENTITY,isCollection=true)) public List<SalesOrderHeader> cancelSalesOrder(@EdmFunctionImportParameter(name="SalesOrderId") String salesOrderId) throws ODataException {  EntityManagerFactory emf=Utility.getEntityManagerFactory();  EntityManager em=emf.createEntityManager();  try {    Query query=em.createQuery("SELECT s FROM SalesOrderHeader s WHERE s.salesOrderId =" + salesOrderId);    try {      SalesOrderHeader so=(SalesOrderHeader)query.getSingleResult();      em.getTransaction().begin();      so.setLifeCycleStatus("X");      so.setLifeCycleStatusName("Cancelled");      em.persist(so);      em.getTransaction().commit();      List<SalesOrderHeader> salesOrderList=null;      query=em.createQuery("SELECT s FROM SalesOrderHeader s WHERE s.salesOrderId ='" + salesOrderId + "'");      salesOrderList=query.getResultList();      return salesOrderList;    } catch (    NoResultException e) {      throw new ODataApplicationException("No Sales Order with Sales Order Id:" + salesOrderId,Locale.ENGLISH,HttpStatusCodes.BAD_REQUEST);    }  }  finally {    em.close();  }}  }
class C{  public static <T>List<T> subList(List<T> list,int start,int max){  if (list == null) {    return null;  }  int end=start + max;  return list.subList(Math.max(0,start),Math.min(list.size(),end));}  }
class C{  public void trimExceptionalPhiNodes(){  Set<Unit> handlerUnits=new HashSet<Unit>();  Iterator<Trap> trapsIt=body.getTraps().iterator();  while (trapsIt.hasNext()) {    Trap trap=trapsIt.next();    handlerUnits.add(trap.getHandlerUnit());  }  for (  Block block : cfg) {    if (handlerUnits.contains(block.getHead())) {      for (      Unit unit : block) {        PhiExpr phi=Shimple.getPhiExpr(unit);        if (phi == null)         continue;        trimPhiNode(phi);      }    }  }}  }
class C{  public void initMediaController(MediaController.MediaPlayerControl mediaPlayerControl){  mMediaController=new MediaController(this);  mMediaController.setAnchorView(findViewById(R.id.container));  mMediaController.setMediaPlayer(mediaPlayerControl);  mMediaController.setEnabled(false);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.item_about_library_container:    Uri uri=Uri.parse(this.uri);  v.getContext().startActivity(new Intent(Intent.ACTION_VIEW,uri));break;}}  }
class C{  public boolean retainAll(int[] array){  boolean changed=false;  Arrays.sort(array);  int[] set=_set;  byte[] states=_states;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && (Arrays.binarySearch(array,set[i]) < 0)) {      remove(set[i]);      changed=true;    }  }  return changed;}  }
class C{  private JMXProvider(){}  }
class C{  public static boolean isDiscoveredContainer(ContainerState containerState){  return containerState.descriptionLink != null && containerState.descriptionLink.contains(UriUtils.buildUriPath(SystemContainerDescriptions.DISCOVERED_DESCRIPTION_LINK));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_INTERVAL_HEAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201061,num0,skillname);}  }
class C{  public int createTexture(){  if (mFullScreen == null)   throw new IllegalStateException("FullScreen is null,please invoke initialize");  return mFullScreen.createTexture();}  }
class C{  public void addToBottom(Map<K,V> existingMap){  if (existingMap == null) {    throw new IllegalArgumentException("Error: cannot add null existing Map to bottom of a MapContext");  }  this.stackList.add(existingMap);}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public AsyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));}  }
class C{  public boolean profile(){  return soot.PhaseOptions.getBoolean(options,"profile");}  }
class C{  protected void captureConnectTiming(){  HttpConnectTiming httpConnectTiming=HttpConnectHarCaptureFilter.consumeConnectTimingForConnection(clientAddress);  if (httpConnectTiming != null) {    harEntry.getTimings().setSsl(httpConnectTiming.getSslHandshakeTimeNanos(),TimeUnit.NANOSECONDS);    harEntry.getTimings().setConnect(httpConnectTiming.getConnectTimeNanos(),TimeUnit.NANOSECONDS);    harEntry.getTimings().setBlocked(httpConnectTiming.getBlockedTimeNanos(),TimeUnit.NANOSECONDS);    harEntry.getTimings().setDns(httpConnectTiming.getDnsTimeNanos(),TimeUnit.NANOSECONDS);  }}  }
class C{  public static IntBuffer createIntBuffer(int... data){  if (data == null) {    return null;  }  IntBuffer buff=createIntBuffer(data.length);  buff.clear();  buff.put(data);  buff.flip();  return buff;}  }
class C{  public MD5OutputStream(OutputStream out){  super(out);  md5=new MD5();}  }
class C{  public final boolean canGetFloat(String field){  return m_table.canGetFloat(field);}  }
class C{  @Override public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  @RequestMapping(value="/locationWithinOrgUnitBoundary",method=RequestMethod.GET,produces={"*/*","application/json"}) public void checkLocationWithinOrgUnit(@RequestParam String orgUnitUid,@RequestParam Double longitude,@RequestParam Double latitude,HttpServletResponse response) throws Exception {  boolean withinOrgUnit=false;  List<OrganisationUnit> organisationUnits=new ArrayList<>();  organisationUnits.add(organisationUnitService.getOrganisationUnit(orgUnitUid));  FilterUtils.filter(organisationUnits,new OrganisationUnitPolygonCoveringCoordinateFilter(longitude,latitude));  if (!organisationUnits.isEmpty()) {    withinOrgUnit=true;  }  renderService.toJson(response.getOutputStream(),withinOrgUnit);}  }
class C{  public static void timedRecord(String filename,long millis,AudioFormat audioFormat){  File outputFile=new File(filename);  timedRecord(outputFile,millis,audioFormat);}  }
class C{  public EventDescriptor(Class eventClass){  this(eventClass,null);}  }
class C{  public DatabaseGetCountriesQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public void resetIterator(){  iterator=head;}  }
class C{  public void disableDashedLine(){  mDashPathEffect=null;}  }
class C{  public void replaceStyledLayer(UserLayer newUserLayer){  if (this.sld == null) {    return;  }  StyledLayer[] styledLayerList=this.sld.getStyledLayers();  int indexFound=-1;  int index=0;  for (  StyledLayer styledLayer : styledLayerList) {    if (styledLayer == this.symbolData.getStyledLayer()) {      indexFound=index;      break;    } else {      index++;    }  }  if (indexFound > -1) {    styledLayerList[indexFound]=newUserLayer;    this.sld.setStyledLayers(styledLayerList);    setStyledLayer(newUserLayer);  }}  }
class C{  public synchronized void clear(){  this.nonEmptyForwardLookup.clear();  this.nonEmptyLookupByTargetNode.clear();  this.nonEmptyReverseLookup.clear();}  }
class C{  public final void addValue(final FilteredDataTagValue pValue){  this.values.add(pValue);}  }
class C{  public boolean add(E o){  if (o == null)   return false;  return map.put(o,PRESENT) == null;}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public static boolean isNotEmpty(IsEmpty o){  return o != null && !o.isEmpty();}  }
class C{  @RequestMapping(value="/users",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<?> createUser(@RequestBody ManagedUserDTO managedUserDTO,HttpServletRequest request) throws URISyntaxException {  log.debug("REST request to save User : {}",managedUserDTO);  if (userRepository.findOneByLogin(managedUserDTO.getLogin().toLowerCase()).isPresent()) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("userManagement","userexists","Login already in use")).body(null);  } else   if (userRepository.findOneByEmail(managedUserDTO.getEmail()).isPresent()) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("userManagement","emailexists","Email already in use")).body(null);  } else {    User newUser=userService.createUser(managedUserDTO);    String baseUrl=request.getScheme() + "://" + request.getServerName()+ ":"+ request.getServerPort()+ request.getContextPath();    mailService.sendCreationEmail(newUser,baseUrl);    return ResponseEntity.created(new URI("/api/users/" + newUser.getLogin())).headers(HeaderUtil.createAlert("A user is created with identifier " + newUser.getLogin(),newUser.getLogin())).body(newUser);  }}  }
class C{  public static void drawString(Graphics2D gc,String label,double x,double y,double labelAngle){  labelAngle=Geometry.moduloTwoPI(labelAngle);  Point2D apt=new Point2D.Float((float)x,(float)y);  Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();  if (gc instanceof PDFGraphics) {    double dx=0;    double dy=0;    if (labelAngle >= 0.5 * Math.PI && labelAngle <= 1.5 * Math.PI) {      ((PDFGraphics)gc).drawString(label,(float)(x + dx),(float)(y - dy),(float)(labelAngle - Math.PI));    } else {      ((PDFGraphics)gc).drawString(label,(float)(apt.getX() - dx),(float)(apt.getY() + dy),(float)labelAngle);    }  } else {    final AffineTransform saveTransform=gc.getTransform();    if (labelAngle >= 0.5 * Math.PI && labelAngle <= 1.5 * Math.PI) {      apt=Geometry.translateByAngle(apt,labelAngle,labelSize.getWidth());      gc.rotate(Geometry.moduloTwoPI(labelAngle - Math.PI),apt.getX(),apt.getY());    } else {      gc.rotate(labelAngle,apt.getX(),apt.getY());    }    double dy=0;    if (true) {      FontRenderContext frc=new FontRenderContext(gc.getTransform(),true,true);      gc.drawGlyphVector(gc.getFont().createGlyphVector(frc,label),(int)(apt.getX()),(int)(apt.getY() + dy));    } else     gc.drawString(label,(int)(apt.getX()),(int)(apt.getY() + dy));    gc.setColor(Color.BLACK);    gc.setTransform(saveTransform);  }}  }
class C{  public ParametricTextualExtensionRecognizer(ArrayList exts){  int size=exts.size();  for (int i=0; i < size; i++) {    Object aux=exts.get(i);    if (aux instanceof String) {      String ext=(String)aux;      addExtension(ext);    }  }}  }
class C{  protected boolean checkPassCode(){  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  String savedPassCodeDigits[]=new String[4];  savedPassCodeDigits[0]=appPrefs.getString(PREFERENCE_PASSCODE_D1,null);  savedPassCodeDigits[1]=appPrefs.getString(PREFERENCE_PASSCODE_D2,null);  savedPassCodeDigits[2]=appPrefs.getString(PREFERENCE_PASSCODE_D3,null);  savedPassCodeDigits[3]=appPrefs.getString(PREFERENCE_PASSCODE_D4,null);  boolean result=true;  for (int i=0; i < mPassCodeDigits.length && result; i++) {    result=(mPassCodeDigits[i] != null) && mPassCodeDigits[i].equals(savedPassCodeDigits[i]);  }  return result;}  }
class C{  public static String adjustPort(Delegator delegator,String port){  if (port != null && !port.isEmpty() && Start.getInstance().getConfig().portOffset != 0) {    Integer portValue=Integer.valueOf(port);    portValue+=Start.getInstance().getConfig().portOffset;    return portValue.toString();  } else {    return port;  }}  }
class C{  public static boolean isEnabled(Context context){  if (sEnabled == null) {    sEnabled=detectEnabled(context);  }  return sEnabled.booleanValue();}  }
class C{  private TimeSeriesValue interpolateTSV(GroupName name){  final Map.Entry<DateTime,TimeSeriesValue> backTSV=findName(backward,name), forwTSV=findName(forward,name);  final long backMillis=max(new Duration(backTSV.getKey(),getTimestamp()).getMillis(),0), forwMillis=max(new Duration(getTimestamp(),forwTSV.getKey()).getMillis(),0);  final double totalMillis=forwMillis + backMillis;  final double backWeight=forwMillis / totalMillis;  final double forwWeight=backMillis / totalMillis;  return new InterpolatedTSV(name,backTSV.getValue().getMetrics(),forwTSV.getValue().getMetrics(),backWeight,forwWeight);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_START_FAIL2(String value0){  return new SM_SYSTEM_MESSAGE(1400845,value0);}  }
class C{  public PollsDeleteVoteQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  private void loadBinary(InputStream is) throws IOException {  if (is instanceof FileInputStream) {    FileInputStream fis=(FileInputStream)is;    FileChannel fc=fis.getChannel();    MappedByteBuffer bb=fc.map(FileChannel.MapMode.READ_ONLY,0,(int)fc.size());    bb.load();    loadBinary(bb);    is.close();  } else {    loadBinary(new DataInputStream(is));  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public void selectText(){  actions.keyDown(Keys.CONTROL).sendKeys("a").perform();}  }
class C{  @Override public double[] makeCumulativeTestPoints(){  return new double[]{-5.89342953136,-3.36492999891,-2.57058183564,-2.01504837333,-1.47588404882,5.89342953136,3.36492999891,2.57058183564,2.01504837333,1.47588404882};}  }
class C{  public static byte[] extractReadableBytes(ByteBuf content){  byte[] binaryContent=new byte[content.readableBytes()];  content.markReaderIndex();  content.readBytes(binaryContent);  content.resetReaderIndex();  return binaryContent;}  }
class C{  public AttrImpl(Element element,String prefix,String localpart,String rawname,String uri,String value){  super(prefix,localpart,rawname,uri,Node.ATTRIBUTE_NODE);  this.element=element;  this.value=value;}  }
class C{  public Vector2f mult(float scalar){  return new Vector2f(x * scalar,y * scalar);}  }
class C{  private void computeTabScrollOffsetHelper(){  float maxScrollOffset=Float.MAX_VALUE;  for (int i=0; i < mStackTabs.length; ++i) {    if (mStackTabs[i].isDying())     continue;    float tabScrollOffset=Math.min(maxScrollOffset,mStackTabs[i].getScrollOffset());    mStackTabs[i].setScrollOffset(tabScrollOffset);    float maxScreenScrollOffset=scrollToScreen(mScrollOffset + tabScrollOffset);    maxScrollOffset=-mScrollOffset + screenToScroll(maxScreenScrollOffset + mStackTabs[i].getSizeInScrollDirection(mCurrentMode));  }}  }
class C{  public Race race(Task... tasks){  return new Race(this.executor_,tasks);}  }
class C{  private void checkLegal(){  if (mDataSets == null)   return;  if (this instanceof ScatterData || this instanceof CombinedData)   return;  for (int i=0; i < mDataSets.size(); i++) {    if (mDataSets.get(i).getEntryCount() > mXVals.size()) {      throw new IllegalArgumentException("One or more of the DataSet Entry arrays are longer than the x-values array of this ChartData object.");    }  }}  }
class C{  private ServiceNames(){}  }
class C{  public boolean retainEntries(TShortObjectProcedure<V> procedure){  boolean modified=false;  byte[] states=_states;  short[] keys=_set;  V[] values=_values;  tempDisableAutoCompaction();  try {    for (int i=keys.length; i-- > 0; ) {      if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {        removeAt(i);        modified=true;      }    }  }  finally {    reenableAutoCompaction(true);  }  return modified;}  }
class C{  public List<String> tokenize(String fileName){  JavaRDD<String> input=readTextFile(fileName);  JavaRDD<String> output=tokenize(input);  return output.collect();}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  public MessagesSendQuery attachment(List<String> value){  return unsafeParam("attachment",value);}  }
class C{  public static Map<String,Object> sendOrderPayRetryNotification(DispatchContext ctx,Map<String,? extends Object> context){  return sendOrderNotificationScreen(ctx,context,"PRDS_ODR_PAYRETRY");}  }
class C{  public boolean with_arrayref(){  return soot.PhaseOptions.getBoolean(options,"with-arrayref");}  }
class C{  public IsGreaterThanOrEqualToExtended(){  super(null,null);}  }
class C{  private UInteger(String value) throws NumberFormatException {  this.value=rangeCheck(Long.parseLong(value));}  }
class C{  public static JsonRootNode jsonFromString(String input){  try {    return new JdomParser().parse(input);  } catch (  InvalidSyntaxException e) {    return null;  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public NonMonotonicSequenceException(Number wrong,Number previous,int index,MathArrays.OrderDirection direction,boolean strict){  super(direction == MathArrays.OrderDirection.INCREASING ? (strict ? LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE : LocalizedFormats.NOT_INCREASING_SEQUENCE) : (strict ? LocalizedFormats.NOT_STRICTLY_DECREASING_SEQUENCE : LocalizedFormats.NOT_DECREASING_SEQUENCE),wrong,previous,Integer.valueOf(index),Integer.valueOf(index - 1));  this.direction=direction;  this.strict=strict;  this.index=index;  this.previous=previous;}  }
class C{  public static <T extends ServiceDocument>Map<String,T> extractQueryResult(ServiceDocumentQueryResult result,Class<T> type){  Map<String,T> documentsByLink=new HashMap<>();  if (result != null && result.documents != null) {    result.documents.values().forEach(null);  }  return documentsByLink;}  }
class C{  private boolean processRowToNextStep(SortDataRows sortDataRows) throws CarbonDataLoadingException {  if (null == sortDataRows) {    LOGGER.info("Record Processed For table: " + parameters.getTableName());    LOGGER.info("Number of Records was Zero");    String logMessage="Summary: Carbon Sort Key Step: Read: " + 0 + ": Write: "+ 0;    LOGGER.info(logMessage);    return false;  }  try {    sortDataRows.startSorting();    LOGGER.info("Record Processed For table: " + parameters.getTableName());    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordSortRowsStepTotalTime(parameters.getPartitionID(),System.currentTimeMillis());    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordDictionaryValuesTotalTime(parameters.getPartitionID(),System.currentTimeMillis());    return false;  } catch (  CarbonSortKeyAndGroupByException e) {    throw new CarbonDataLoadingException(e);  }}  }
class C{  public static String sendDhlRequest(String xmlString,Delegator delegator,String shipmentGatewayConfigId,String resource,Locale locale) throws DhlConnectException {  String conStr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"connectUrl",resource,"shipment.dhl.connect.url");  if (conStr == null) {    throw new DhlConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlConnectUrlIncomplete",locale));  }  if (xmlString == null) {    throw new DhlConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlXmlCannotBeNull",locale));  }  conStr=conStr.trim();  String timeOutStr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"connectTimeout",resource,"shipment.dhl.connect.timeout","60");  int timeout=60;  try {    timeout=Integer.parseInt(timeOutStr);  } catch (  NumberFormatException e) {    Debug.logError(e,"Unable to set timeout to " + timeOutStr + " using default "+ timeout);  }  if (Debug.verboseOn()) {    Debug.logVerbose("DHL Connect URL : " + conStr,module);    Debug.logVerbose("DHL XML String : " + xmlString,module);  }  HttpClient http=new HttpClient(conStr);  http.setTimeout(timeout * 1000);  String response=null;  try {    response=http.post(xmlString);  } catch (  HttpClientException e) {    Debug.logError(e,"Problem connecting with DHL server",module);    throw new DhlConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlConnectUrlProblem",UtilMisc.toMap("errorString",e),locale),e);  }  if (response == null) {    throw new DhlConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlReceivedNullResponse",locale));  }  if (Debug.verboseOn()) {    Debug.logVerbose("DHL Response : " + response,module);  }  return response;}  }
class C{  protected PlacesAddQuery longitude(float value){  return unsafeParam("longitude",value);}  }
class C{  public static FSize calcTextSize(Paint paint,String demoText){  FSize result=FSize.getInstance(0,0);  calcTextSize(paint,demoText,result);  return result;}  }
class C{  public static void init() throws GeneralSecurityException {  log.info("Initializing Key Generator...");  blowfishKeyGen=KeyGenerator.getInstance("Blowfish");  KeyPairGenerator rsaKeyPairGenerator=KeyPairGenerator.getInstance("RSA");  RSAKeyGenParameterSpec spec=new RSAKeyGenParameterSpec(1024,RSAKeyGenParameterSpec.F4);  rsaKeyPairGenerator.initialize(spec);  encryptedRSAKeyPairs=new EncryptedRSAKeyPair[10];  for (int i=0; i < 10; i++) {    encryptedRSAKeyPairs[i]=new EncryptedRSAKeyPair(rsaKeyPairGenerator.generateKeyPair());  }  Cipher rsaCipher=Cipher.getInstance("RSA/ECB/nopadding");  rsaCipher.init(Cipher.DECRYPT_MODE,encryptedRSAKeyPairs[0].getRSAKeyPair().getPrivate());}  }
class C{  private void paste(String[] lines){  if (lines.length > 0) {    Set<Pair<Integer,Integer>> selectedPairs=getSelectedPairs();    if (selectedPairs.size() > 0) {      BitSet rows=getSelectedSampleIndices();      BitSet cols=getSelectedAttributesIndices();      int row=rows.nextSetBit(1);      for (      String line : lines) {        int col=cols.nextSetBit(1);        String[] values=line.trim().split("\t");        for (        String value : values) {          value=value.trim();          while (col != -1 && !selectedPairs.contains(new Pair<>(row,col)))           col=cols.nextSetBit(col + 1);          if (col != -1) {            final SpreadsheetCell cell=getSpreadsheetView().getGrid().getRows().get(row).get(col);            boolean succeed=cell.getCellType().match(value);            if (succeed) {              getSpreadsheetView().getGrid().setCellValue(cell.getRow(),cell.getColumn(),cell.getCellType().convertValue(value));            }            col=cols.nextSetBit(col + 1);          } else           break;        }        row=rows.nextSetBit(row + 1);        if (row == -1)         break;      }    }  }}  }
class C{  static public double KL_symmetric(Distribution p,Distribution q){  if (p.asTreeMap().size() == q.asTreeMap().size()) {    return (0.5 * (KL_asymmetric(p,q) + KL_asymmetric(q,p)));  } else {    return 0;  }}  }
class C{  public IdentityStmt newIdentityStmt(Value local,Value identityRef){  return new GIdentityStmt(local,identityRef);}  }
class C{  public void discard(ServiceRegistrar reg){synchronized (registrars) {    if (terminated) {      throw new IllegalStateException("discovery terminated");    }    if (reg == null)     return;    sendDiscarded(reg,null);  }}  }
class C{  private static String buildMd5AuthParameter(long timeStamp){  try {    MessageDigest md=MessageDigest.getInstance("MD5");    byte[] messageDigest=md.digest((timeStamp + BuildConfig.PRIVATE_KEY + BuildConfig.PUBLIC_KEY).getBytes());    BigInteger number=new BigInteger(1,messageDigest);    String md5=number.toString(16);    while (md5.length() < 32) {      md5=0 + md5;    }    return md5;  } catch (  NoSuchAlgorithmException e) {    Log.e("DataManager","Error hashing required parameters: " + e.getMessage());    return "";  }}  }
class C{  protected void processFile(Entry entry) throws Exception {}  }
class C{  public Uuid(long bits0,long bits1){  this.bits0=bits0;  this.bits1=bits1;}  }
class C{  @PreDestroy public void stop(){  LOGGER.debug("Stopping JmsProxy and dependent listeners");  shutdownRequested=true;  supervisionListenerWrapper.stop();  alarmListenerWrapper.stop();  broadcastMessageListenerWrapper.stop();  heartbeatListenerWrapper.stop();  topicPollingExecutor.shutdown();  disconnectQuietly();  connectionListenersLock.writeLock().lock();  try {    connectionListeners.clear();  }  finally {    connectionListenersLock.writeLock().unlock();  }  running=false;}  }
class C{  public BoardDeleteCommentQuery(VkApiClient client,UserActor actor,int groupId,int topicId,int commentId){  super(client,"board.deleteComment",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  topicId(topicId);  commentId(commentId);}  }
class C{  public VisibilityFilter(String group,Predicate p){  super(group);  setPredicate(p);}  }
class C{  public DOTInteroperator() throws IOException {  Process p=Runtime.getRuntime().exec("dot -V");  try {    p.waitFor();  } catch (  InterruptedException iee) {    return;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stumble_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200287,skillname);}  }
class C{  public boolean isExpanded(int row){  return getBoolean(row,VisualItem.EXPANDED);}  }
class C{  private static boolean isValidClassLoader(final ClassLoader checkClassLoader,final ClassLoader memberClassLoader){  boolean valid=false;  if (memberClassLoader == null) {    valid=true;  } else {    for (ClassLoader classLoader=checkClassLoader; classLoader != null; classLoader=classLoader.getParent()) {      if (classLoader == memberClassLoader)       valid=true;    }  }  if (!valid)   return false;  final ClassLoader thisClassLoader=ReflectionUtil.class.getClassLoader();  for (ClassLoader classLoader=checkClassLoader; classLoader != null; classLoader=classLoader.getParent()) {    if (classLoader == thisClassLoader)     return true;  }  return false;}  }
class C{  public static long max(final long a,final long b){  return (a <= b) ? b : a;}  }
class C{  public void writeRegisterRange(IndentingWriter writer,int startRegister,int lastRegister) throws IOException {  if (!options.noParameterRegisters) {    assert startRegister <= lastRegister;    if (startRegister >= registerCount - parameterRegisterCount) {      writer.write("{p");      writer.printSignedIntAsDec(startRegister - (registerCount - parameterRegisterCount));      writer.write(" .. p");      writer.printSignedIntAsDec(lastRegister - (registerCount - parameterRegisterCount));      writer.write('}');      return;    }  }  writer.write("{v");  writer.printSignedIntAsDec(startRegister);  writer.write(" .. v");  writer.printSignedIntAsDec(lastRegister);  writer.write('}');}  }
class C{  private boolean confirmQuit() throws CanceledException {  if (ProgramProperties.isUseGUI()) {    getFrame().toFront();    int result=JOptionPane.showConfirmDialog(getLastActiveFrame(),"Quit " + ProgramProperties.getProgramName() + "?",ProgramProperties.getProgramVersion() + " - Quit?",JOptionPane.YES_NO_CANCEL_OPTION);    if (result == JOptionPane.CANCEL_OPTION) {      throw new CanceledException();    } else     return result != JOptionPane.NO_OPTION;  } else   return true;}  }
class C{  public synchronized void repaint(){  Iterator items=items(ValidatedPredicate.FALSE);  while (items.hasNext()) {    ((VisualItem)items.next()).validateBounds();  }  for (int i=0; i < m_displays.size(); ++i) {    getDisplay(i).repaint();  }}  }
class C{  public FixedWidthTextTableWriter(FixedWidthTextTableSchema schema){  m_schema=schema;}  }
class C{  @Override public void endEntity(String name,Augmentations augs) throws XNIException {  super.endEntity(name,augs);  if (fDocumentHandler != null && name.equals("[xml]")) {    fDocumentHandler.endDocument(null);  }}  }
class C{  private void appendUploadedEntryToLog(String id) throws IOException {  FileWriter writer=new FileWriter(mLogfile,true);  StringBuilder sb=new StringBuilder();  sb.append(System.currentTimeMillis() / 1000);  sb.append(",");  sb.append(id);  sb.append('\n');  try {    writer.write(sb.toString());  }  finally {    writer.close();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SubTypeExtendDuration_A_TO_B(String skilltarget,String value0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201032,skilltarget,value0,skillcaster,skillname);}  }
class C{  public void inc(Collection<KeyType> container,long delta){  for (  KeyType key : container) {    inc(key,delta);  }}  }
class C{  public float multProj(Vector3f vec,Vector3f store){  float vx=vec.x, vy=vec.y, vz=vec.z;  store.x=m00 * vx + m01 * vy + m02 * vz + m03;  store.y=m10 * vx + m11 * vy + m12 * vz + m13;  store.z=m20 * vx + m21 * vy + m22 * vz + m23;  return m30 * vx + m31 * vy + m32 * vz + m33;}  }
class C{  public static AztecCode encode(byte[] data,int minECCPercent,int userSpecifiedLayers){  BitArray bits=new HighLevelEncoder(data).encode();  int eccBits=bits.getSize() * minECCPercent / 100 + 11;  int totalSizeBits=bits.getSize() + eccBits;  boolean compact;  int layers;  int totalBitsInLayer;  int wordSize;  BitArray stuffedBits;  if (userSpecifiedLayers != DEFAULT_AZTEC_LAYERS) {    compact=userSpecifiedLayers < 0;    layers=Math.abs(userSpecifiedLayers);    if (layers > (compact ? MAX_NB_BITS_COMPACT : MAX_NB_BITS)) {      throw new IllegalArgumentException(String.format("Illegal value %s for layers",userSpecifiedLayers));    }    totalBitsInLayer=totalBitsInLayer(layers,compact);    wordSize=WORD_SIZE[layers];    int usableBitsInLayers=totalBitsInLayer - (totalBitsInLayer % wordSize);    stuffedBits=stuffBits(bits,wordSize);    if (stuffedBits.getSize() + eccBits > usableBitsInLayers) {      throw new IllegalArgumentException("Data to large for user specified layer");    }    if (compact && stuffedBits.getSize() > wordSize * 64) {      throw new IllegalArgumentException("Data to large for user specified layer");    }  } else {    wordSize=0;    stuffedBits=null;    for (int i=0; ; i++) {      if (i > MAX_NB_BITS) {        throw new IllegalArgumentException("Data too large for an Aztec code");      }      compact=i <= 3;      layers=compact ? i + 1 : i;      totalBitsInLayer=totalBitsInLayer(layers,compact);      if (totalSizeBits > totalBitsInLayer) {        continue;      }      if (wordSize != WORD_SIZE[layers]) {        wordSize=WORD_SIZE[layers];        stuffedBits=stuffBits(bits,wordSize);      }      int usableBitsInLayers=totalBitsInLayer - (totalBitsInLayer % wordSize);      if (compact && stuffedBits.getSize() > wordSize * 64) {        continue;      }      if (stuffedBits.getSize() + eccBits <= usableBitsInLayers) {        break;      }    }  }  BitArray messageBits=generateCheckWords(stuffedBits,totalBitsInLayer,wordSize);  int messageSizeInWords=stuffedBits.getSize() / wordSize;  BitArray modeMessage=generateModeMessage(compact,layers,messageSizeInWords);  int baseMatrixSize=compact ? 11 + layers * 4 : 14 + layers * 4;  int[] alignmentMap=new int[baseMatrixSize];  int matrixSize;  if (compact) {    matrixSize=baseMatrixSize;    for (int i=0; i < alignmentMap.length; i++) {      alignmentMap[i]=i;    }  } else {    matrixSize=baseMatrixSize + 1 + 2 * ((baseMatrixSize / 2 - 1) / 15);    int origCenter=baseMatrixSize / 2;    int center=matrixSize / 2;    for (int i=0; i < origCenter; i++) {      int newOffset=i + i / 15;      alignmentMap[origCenter - i - 1]=center - newOffset - 1;      alignmentMap[origCenter + i]=center + newOffset + 1;    }  }  BitMatrix matrix=new BitMatrix(matrixSize);  for (int i=0, rowOffset=0; i < layers; i++) {    int rowSize=compact ? (layers - i) * 4 + 9 : (layers - i) * 4 + 12;    for (int j=0; j < rowSize; j++) {      int columnOffset=j * 2;      for (int k=0; k < 2; k++) {        if (messageBits.get(rowOffset + columnOffset + k)) {          matrix.set(alignmentMap[i * 2 + k],alignmentMap[i * 2 + j]);        }        if (messageBits.get(rowOffset + rowSize * 2 + columnOffset + k)) {          matrix.set(alignmentMap[i * 2 + j],alignmentMap[baseMatrixSize - 1 - i * 2 - k]);        }        if (messageBits.get(rowOffset + rowSize * 4 + columnOffset + k)) {          matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - k],alignmentMap[baseMatrixSize - 1 - i * 2 - j]);        }        if (messageBits.get(rowOffset + rowSize * 6 + columnOffset + k)) {          matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - j],alignmentMap[i * 2 + k]);        }      }    }    rowOffset+=rowSize * 8;  }  drawModeMessage(matrix,compact,matrixSize,modeMessage);  if (compact) {    drawBullsEye(matrix,matrixSize / 2,5);  } else {    drawBullsEye(matrix,matrixSize / 2,7);    for (int i=0, j=0; i < baseMatrixSize / 2 - 1; i+=15, j+=16) {      for (int k=(matrixSize / 2) & 1; k < matrixSize; k+=2) {        matrix.set(matrixSize / 2 - j,k);        matrix.set(matrixSize / 2 + j,k);        matrix.set(k,matrixSize / 2 - j);        matrix.set(k,matrixSize / 2 + j);      }    }  }  AztecCode aztec=new AztecCode();  aztec.setCompact(compact);  aztec.setSize(matrixSize);  aztec.setLayers(layers);  aztec.setCodeWords(messageSizeInWords);  aztec.setMatrix(matrix);  return aztec;}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyXor(String propertyName,ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){  return property(propertyName,xor(leftPredicate,rightPredicate));}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  private static String prepare(String imageName){  AssertUtil.assertNotNull(imageName,"imageName");  for (  String registryPath : OFFICIAL_REGISTRY_ADDRESS_LIST) {    if (imageName.startsWith(registryPath)) {      return imageName.substring(registryPath.length());    }  }  return imageName;}  }
class C{  public AccessPath dropLastField(){  if (fields == null || fields.length == 0)   return this;  final SootField[] newFields;  final Type[] newTypes;  if (fields.length > 1) {    newFields=new SootField[fields.length - 1];    System.arraycopy(fields,0,newFields,0,fields.length - 1);    newTypes=new Type[fields.length - 1];    System.arraycopy(fieldTypes,0,newTypes,0,fields.length - 1);  } else {    newFields=null;    newTypes=null;  }  return new AccessPath(value,newFields,baseType,newTypes,taintSubFields);}  }
class C{  @SafeVarargs public static final <T>List<T> union(final List<T>... lists){  final List<T> union=new ArrayList<>();  for (  List<T> list : lists) {    union.addAll(list);  }  return union;}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  public static UShort valueOf(String value) throws NumberFormatException {  return new UShort(value);}  }
class C{  public boolean isItemViewSwipeEnabled(){  return this.mDefaultItemTouchHelperCallback.isItemViewSwipeEnabled();}  }
class C{  public static void o(double a,int w,int d){  System.out.print("\n");  System.out.print(DoubletoEstring(a,w,d));  System.out.print("\n");}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  protected DataSupport(){}  }
class C{  public boolean isPrevKV(){  return prevKV;}  }
class C{  private void beginDiscovery(String[] groups,LookupLocator[] locators,DiscoveryListener listener,Configuration config) throws IOException, ConfigurationException {  if (listener != null)   listeners.add(listener);  lookupDisc=new LookupDiscovery(groups,config);  lookupDisc.addDiscoveryListener(groupListener);  locatorDisc=new LookupLocatorDiscovery(locators,config);  locatorDisc.addDiscoveryListener(locatorListener);}  }
class C{  public static String androidBuildVersion(){  StringBuffer buf=new StringBuffer();  buf.append("Version\n *Release: " + Build.VERSION.RELEASE);  buf.append("\n Incremental: " + Build.VERSION.INCREMENTAL);  buf.append("\n Codename: " + Build.VERSION.CODENAME);  buf.append("\n SDK: " + Build.VERSION.SDK_INT);  buf.append("\n\n*Model: " + Build.MODEL);  buf.append("\nManufacturer: " + Build.MANUFACTURER);  buf.append("\nBoard: " + Build.BOARD);  buf.append("\nBrand: " + Build.BRAND);  buf.append("\nDevice: " + Build.DEVICE);  buf.append("\nProduct: " + Build.PRODUCT);  buf.append("\nHardware: " + Build.HARDWARE);  buf.append("\nCPU ABI: " + Build.CPU_ABI);  buf.append("\nCPU second ABI: " + Build.CPU_ABI2);  buf.append("\n\n*Displayed ID: " + Build.DISPLAY);  buf.append("\nHost: " + Build.HOST);  buf.append("\nUser: " + Build.USER);  buf.append("\nID: " + Build.ID);  buf.append("\nType: " + Build.TYPE);  buf.append("\nTags: " + Build.TAGS);  buf.append("\n\nFingerprint: " + Build.FINGERPRINT);  buf.append("\n\nItems with * are intended for display to the end user.");  return buf.toString();}  }
class C{  public boolean global_nodes_in_natives(){  return soot.PhaseOptions.getBoolean(options,"global-nodes-in-natives");}  }
class C{  public synchronized Vertex locateVertex(String sVertexLabel){  return (Vertex)UniqueVertices.get(sVertexLabel);}  }
class C{  private static void copyFile(File file,InputStream is,String mode) throws IOException, InterruptedException {  final String abspath=file.getAbsolutePath();  final FileOutputStream out=new FileOutputStream(file);  byte buf[]=new byte[1024];  int len;  while ((len=is.read(buf)) > 0) {    out.write(buf,0,len);  }  out.close();  is.close();  Runtime.getRuntime().exec("chmod " + mode + " "+ abspath).waitFor();}  }
class C{  public boolean hasValidOTP(){  return makeOTP().length() == 4;}  }
class C{  public void loadMappingFile(String fileName,MapType mapType,boolean reload,ProgressListener progress) throws CanceledException {switch (mapType) {default :case GI:{      if (giMap == null || reload) {        if (giMap != null) {          try {            giMap.close();          } catch (          IOException e) {            Basic.caught(e);          }        }        try {          this.giMap=giMapFactory.create(name2IdMap,fileName,progress);          loadedMaps.add(mapType);          activeMaps.add(mapType);          map2Filename.put(mapType,fileName);        } catch (        Exception e) {          if (e instanceof CanceledException)           throw (CanceledException)e;          Basic.caught(e);        }      }      break;    }case Accession:{    if (accessionMap == null || reload) {      if (accessionMap != null) {        try {          accessionMap.close();        } catch (        IOException e) {          Basic.caught(e);        }      }      try {        this.accessionMap=accessionMapFactory.create(name2IdMap,fileName,progress);        loadedMaps.add(mapType);        activeMaps.add(mapType);        map2Filename.put(mapType,fileName);      } catch (      Exception e) {        if (e instanceof CanceledException)         throw (CanceledException)e;        Basic.caught(e);      }    }    break;  }case Synonyms:{  if (synonymsMap == null || reload) {    if (synonymsMap != null) {      try {        synonymsMap.close();      } catch (      IOException e) {        Basic.caught(e);      }    }    final String2IntegerMap synonymsMap=new String2IntegerMap();    try {      synonymsMap.loadFile(name2IdMap,fileName,progress);      this.synonymsMap=synonymsMap;      loadedMaps.add(mapType);      activeMaps.add(mapType);      map2Filename.put(mapType,fileName);    } catch (    Exception e) {      if (e instanceof CanceledException)       throw (CanceledException)e;      Basic.caught(e);    }  }}}}  }
class C{  public void openCurrentProfile(@NonNull Activity activity,DeepLinkListener callback){  openOtherProfile(activity,CURRENTLY_LOGGED_IN_MEMBER,callback);}  }
class C{  public ZWaveTimeCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public boolean isProtected(){  return Modifier.isProtected(this.getModifiers());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDARTIFACT_CANCELED(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400315,value1,value0);}  }
class C{  public boolean isSuperUser(String role){  Set<String> superUserRoles=conf.getSuperUserRoles();  return role != null && superUserRoles.contains(role) ? true : false;}  }
class C{  public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(StringCodingUtils.getBytes(input,Charsets.toCharset(encoding)));}  }
class C{  protected BoardDeleteTopicQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSGBOX_TOYPET_FEED_CANT_FEED(String value0){  return new SM_SYSTEM_MESSAGE(1400698,value0);}  }
class C{  public String toString(final NumberFormat format){  return new Vector3DFormat(format).format(toVector3D());}  }
class C{  private boolean isActive(Object value){  return Integer.valueOf(1).equals(value);}  }
class C{  private boolean invokesSetContentView(InvokeExpr inv){  String methodName=SootMethodRepresentationParser.v().getMethodNameFromSubSignature(inv.getMethodRef().getSubSignature().getString());  if (!methodName.equals("setContentView"))   return false;  SootClass curClass=inv.getMethod().getDeclaringClass();  while (curClass != null) {    if (curClass.getName().equals("android.app.Activity") || curClass.getName().equals("android.support.v7.app.ActionBarActivity"))     return true;    if (curClass.declaresMethod("void setContentView(int)"))     return false;    curClass=curClass.hasSuperclass() ? curClass.getSuperclass() : null;  }  return false;}  }
class C{  private void discard(float x,float y,float amountX,float amountY){  if (mStackTabs == null || (mOverviewAnimationType != OverviewAnimationType.NONE && mOverviewAnimationType != OverviewAnimationType.DISCARD && mOverviewAnimationType != OverviewAnimationType.DISCARD_ALL && mOverviewAnimationType != OverviewAnimationType.UNDISCARD)) {    return;  }  if (mDiscardingTab == null) {    if (!mInSwipe) {      mDiscardingTab=getTabAtPositon(x,y);    } else {      if (mTabModel.index() < 0)       return;      mDiscardingTab=mStackTabs[mTabModel.index()];    }    if (mDiscardingTab != null) {      cancelDiscardScrollingAnimation();      RectF target=mDiscardingTab.getLayoutTab().getClickTargetBounds();      float distanceToEdge;      float edgeToEdge;      if (mCurrentMode == Orientation.PORTRAIT) {        mDiscardDirection=1.0f;        distanceToEdge=Math.max(target.left - x,x - target.right);        edgeToEdge=target.width();      } else {        mDiscardDirection=2.0f - 4.0f * (x / mLayout.getWidth());        mDiscardDirection=MathUtils.clamp(mDiscardDirection,-1.0f,1.0f);        distanceToEdge=Math.max(target.top - y,y - target.bottom);        edgeToEdge=target.height();      }      float scaledDiscardX=x - mDiscardingTab.getLayoutTab().getX();      float scaledDiscardY=y - mDiscardingTab.getLayoutTab().getY();      mDiscardingTab.setDiscardOriginX(scaledDiscardX / mDiscardingTab.getScale());      mDiscardingTab.setDiscardOriginY(scaledDiscardY / mDiscardingTab.getScale());      mDiscardingTab.setDiscardFromClick(false);      if (Math.abs(distanceToEdge) < DISCARD_SAFE_SELECTION_PCTG * edgeToEdge) {        mDiscardingTab=null;      }    }  }  if (mDiscardingTab != null) {    float deltaAmount=mCurrentMode == Orientation.PORTRAIT ? amountX : amountY;    mDiscardingTab.addToDiscardAmount(deltaAmount);  }}  }
class C{  public void write(String s,int off,int len) throws IOException {  for (int i=off; i < off + len; i++)   write(s.charAt(i));}  }
class C{  public void clearStyleKeys(){  styleKeys.clear();}  }
class C{  @Override public boolean isFingerprintAuthSupported(){  return impl.isFingerprintAuthSupported();}  }
class C{  public void load(String treeFile,String mapFile,ProgressListener progress){  progress.setCancelable(false);  try {    progress.setSubtask("Loading " + mapFile);    progress.setMaximum(2);    progress.setProgress(0);    Document.loadVersionInfo(cName + " tree",Basic.replaceFileSuffix(treeFile,".info"));    name2IdMap.loadFromFile(mapFile);    progress.setProgress(1);    progress.setSubtask("Loading " + treeFile);    if (cName.equals(Classification.Taxonomy)) {      if (name2IdMap.get(3554) != null && name2IdMap.get(3554).equals("Beta"))       name2IdMap.put("Beta <vulgaris>",3554);    }    fullTree.loadFromFile(treeFile);    progress.setProgress(2);  } catch (  Exception e) {    Basic.caught(e);    NotificationsInSwing.showError(MainViewer.getLastActiveFrame(),"Failed to open files: " + treeFile + " and "+ mapFile+ ": "+ e.getMessage());  } finally {    progress.setCancelable(true);  }}  }
class C{  protected BoardEditCommentQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  private void calculateF0Targets(Element phrase){  determinePhraseTopBaseConf(phrase);  NodeList prosodies=phrase.getElementsByTagName(MaryXML.PROSODY);  for (int j=0; j < prosodies.getLength(); j++) {    Element prosody=(Element)prosodies.item(j);    determineProsodyTopBaseConf(prosody);  }  boolean isFirstInPhrase=true;  Element prevToneSyllable=null;  char prevTone=0;  int lastHFreq=0;  List<Target> allTargetList=new ArrayList<Target>();  TreeWalker tw=((DocumentTraversal)phrase.getOwnerDocument()).createTreeWalker(phrase,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.TOKEN,MaryXML.BOUNDARY),false);  Element e=null;  while ((e=(Element)tw.nextNode()) != null) {    Element referenceSyllable=null;    Element rule=null;    if (e.getTagName().equals(MaryXML.TOKEN)) {      if (e.hasAttribute("accent")) {        String accent=e.getAttribute("accent").toUpperCase();        rule=tobiMap.get(accent);        if (rule != null) {          referenceSyllable=getStressedSyllable(e);        }      }    } else {      if (e.hasAttribute("tone")) {        String tone=e.getAttribute("tone").toUpperCase();        rule=tobiMap.get(tone);        if (rule != null) {          TreeWalker stw=((DocumentTraversal)e.getOwnerDocument()).createTreeWalker(phrase,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.SYLLABLE),false);          stw.setCurrentNode(e);          referenceSyllable=(Element)stw.previousNode();        }      }    }    if (referenceSyllable != null && rule != null) {      Log.d(Mary.LOG,"Now assigning targets for tone `" + rule.getAttribute("name") + "' on syllable ["+ referenceSyllable.getAttribute("ph")+ "]");      List<Target> targetList=new ArrayList<Target>();      Target starTarget=null;      TreeWalker rtw=((DocumentTraversal)rule.getOwnerDocument()).createTreeWalker(rule,NodeFilter.SHOW_ELEMENT,new NameNodeFilter("target","prosody"),false);      Element rulePart=null;      while ((rulePart=(Element)rtw.nextNode()) != null) {        if (rulePart.getTagName().equals("target")) {          Target target=determineInitialTargetLocation(rulePart,referenceSyllable,isFirstInPhrase,prevTone,prevToneSyllable);          if (target != null) {            targetList.add(target);            allTargetList.add(target);            Log.d(Mary.LOG,"  " + target.type() + " target on ["+ target.segment().getAttribute("p")+ "] at "+ target.getTargetTime()+ " ms");            if (target.type().equals("star")) {              if (starTarget != null) {                Log.i(Mary.LOG,"Found more than one star target for tone rule `" + rule.getAttribute("name") + "'");              }              starTarget=target;            }          }        } else {          String tCode=rulePart.getAttribute("t_code");          Element prosSyllable=null;          if (tCode.equals("21")) {            prosSyllable=referenceSyllable;          } else           if (tCode.equals("11")) {            prosSyllable=DomUtils.getPreviousOfItsKindIn(referenceSyllable,phrase);          } else           if (tCode.equals("31")) {            prosSyllable=DomUtils.getNextOfItsKindIn(referenceSyllable,phrase);          } else           if (tCode.equals("99")) {            prosSyllable=DomUtils.getNextOfItsKindIn(prevToneSyllable,phrase);          }          if (prosSyllable == null) {            prosSyllable=referenceSyllable;          }          Log.d(Mary.LOG,"  upstep/downstep starting with syllable [" + prosSyllable.getAttribute("ph") + "]");          adaptProsody(rulePart,prosSyllable);        }      }      Iterator<Target> it=targetList.iterator();      while (it.hasNext()) {        Target target=it.next();        target.setMyStar(starTarget);        if (target.type().equals("plus")) {          adjustTargetLocation(target,starTarget);        }      }      it=targetList.iterator();      while (it.hasNext()) {        Target target=it.next();        lastHFreq=calculateTargetFrequency(target,lastHFreq);      }      isFirstInPhrase=false;      prevToneSyllable=referenceSyllable;      String label=rule.getAttribute("name");      if (label.lastIndexOf('H') > label.lastIndexOf('L')) {        prevTone='H';      } else {        prevTone='L';      }    }  }  ListIterator<Target> it=allTargetList.listIterator();  Target prev=null;  Target current=null;  Target next=null;  while (it.hasNext()) {    next=it.next();    if (current != null) {      int currentTargetTime=current.getTargetTime();      int nextTargetTime=next.getTargetTime();      if (currentTargetTime > nextTargetTime) {        if (current.type().equals("star") && !next.type().equals("star")) {          Element oldSegment=next.segment();          Element newSegment=getNextSegment(current.segment());          int newTiming=10;          if (newSegment == null) {            newSegment=current.segment();            newTiming=100;          }          next.setSegment(newSegment);          next.setTiming(newTiming);          calculateTargetFrequency(next,0);          Log.d(Mary.LOG,"Found overlapping targets. Moved " + "\"plus\" target from " + nextTargetTime + "ms ["+ oldSegment.getAttribute("p")+ "] to "+ next.getTargetTime()+ "ms ["+ next.segment().getAttribute("p")+ "].");        } else         if (next.type().equals("star") && !current.type().equals("star")) {          Element oldSegment=current.segment();          Element newSegment=getPreviousSegment(next.segment());          int newTiming=90;          if (newSegment == null) {            newSegment=next.segment();            newTiming=0;          }          current.setSegment(newSegment);          current.setTiming(newTiming);          calculateTargetFrequency(current,0);          Log.d(Mary.LOG,"Found overlapping targets. Moved " + "\"plus\" target from " + currentTargetTime + "ms ["+ oldSegment.getAttribute("p")+ "] to "+ current.getTargetTime()+ "ms ["+ current.segment().getAttribute("p")+ "].");        } else {          int tn=next.getTargetTime();          int fn=next.f0();          int tc=current.getTargetTime();          int fc=current.f0();          int t1;          int f1;          if (next.myStar() != null && next.myStar() != next && current.myStar() != null && current.myStar() != current) {            int tns=next.myStar().getTargetTime();            int fns=next.myStar().f0();            int tcs=current.myStar().getTargetTime();            int fcs=current.myStar().f0();            double slope_n=((double)fns - fn) / (tns - tn);            double slope_c=((double)fc - fcs) / (tc - tcs);            if (slope_n < 0 && slope_c >= 0 || slope_c < 0 && slope_n >= 0) {              t1=(int)(((fn - slope_n * tn) - (fc - slope_c * tc)) / (slope_c - slope_n));              f1=(int)(fn + slope_n * (t1 - tn));            } else {              t1=(tn + tc) / 2;              f1=(fn + fc) / 2;            }          } else {            t1=(tn + tc) / 2;            f1=(fn + fc) / 2;          }          current.setTargetTime(t1);          current.setF0(f1);          Log.d(Mary.LOG,"Found two overlapping targets, at " + tc + "ms, "+ fc+ "Hz and "+ tn+ "ms, "+ fn+ "Hz. Replaced them with a target at "+ t1+ "ms, "+ f1+ "Hz.");          it.remove();          continue;        }      }    }    if (prev != null) {      int prevTime=prev.getTargetTime();      int currentTime=current.getTargetTime();      int nextTime=next.getTargetTime();      if (current.myStar() == next && nextTime - currentTime > currentTime - prevTime || current.myStar() == prev && currentTime - prevTime > nextTime - currentTime) {        int newTime=(prevTime + nextTime) / 2;        Log.d(Mary.LOG,"Target at " + currentTime + "ms is further from its star than from"+ " a different target -- moving to "+ newTime+ "ms.");        current.setTargetTime(newTime);        calculateTargetFrequency(current,0);      }    }    prev=current;    current=next;  }  it=allTargetList.listIterator();  while (it.hasNext()) {    insertTargetIntoMaryXML(it.next());  }}  }
class C{  public GroupsSetCallbackServerQuery(VkApiClient client,Actor actor,int groupId){  super(client,"groups.setCallbackServer",SetCallbackServerResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  @Override public long toLong(){  throw new UnsupportedOperationException();}  }
class C{  public static void writeProto(Message content,String outputName) throws IOException {  try (OutputStream outputStream=new FileOutputStream(outputName)){    content.writeTo(outputStream);  } }  }
class C{  public void addCommentToFile(String fileId,String comment) throws BoxSDKServiceException {  try {    BoxFile boxFile=new BoxFile(getBoxAPIConnection(),fileId);    boxFile.addComment(comment);  } catch (  BoxAPIException e) {    if (isSimilarCommentException(e)) {      logger.debug("Trying to add the same comment, do nothing");    } else {      String msg="Error trying to add a comment to file " + fileId;      logger.error(msg,e);      throw new BoxSDKServiceException(msg,e);    }  }}  }
class C{  public boolean isUptoDate(){  return isUpToDate;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  ConstrainableProxyUtil.verifyConsistentConstraints(constraints,server,methodMappings);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_EXP_GAIN_VITAL_MAKEUP_BONUS(String value0,int num1,int num2){  return new SM_SYSTEM_MESSAGE(1400347,value0,num1,num2);}  }
class C{  public boolean hasUnalignedCharAt(int col){  if (col < getFirstNonGapPosition()) {    int firstUnalignedPrefixPos=getFirstNonGapPosition() - unalignedPrefix.length();    if (col > firstUnalignedPrefixPos)     return true;  } else   if (col >= getLastNonGapPosition()) {    int lastUnalignedSuffixPos=getLastNonGapPosition() + unalignedSuffix.length();    if (col < lastUnalignedSuffixPos)     return true;  }  return false;}  }
class C{  public static int hash(String key,int bitSize,String input,String hashType){  int bitLimitedHash;  try {    MessageDigest md=MessageDigest.getInstance(hashType);    byte[] array=md.digest(input.getBytes());    int hashInt=fromByteArray(array);    bitLimitedHash=hashInt;    if (bitSize < 32) {      bitLimitedHash=(0xFFFFFFFF >>> (32 - bitSize)) & hashInt;    }    logger.debug("hashInt = " + hashInt + " bitLimitedHash = "+ bitLimitedHash);  } catch (  NoSuchAlgorithmException e) {    logger.info(e.toString());    bitLimitedHash=hash(key,bitSize,input);  }  return bitLimitedHash;}  }
class C{  public ExpressionNode(){  setDisplayString();}  }
class C{  public static void installApk(Context context,String filename){  Intent intent=new Intent();  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  intent.setAction(Intent.ACTION_VIEW);  String type="application/vnd.android.package-archive";  File pluginfile=new File(filename);  intent.setDataAndType(Uri.fromFile(pluginfile),type);  if (context instanceof Activity) {    ((Activity)context).startActivityForResult(intent,REQUEST_INSTALL);  }  context.startActivity(intent);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_InteralSkill_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201271,skilltarget,skillname);}  }
class C{  public EndianUtils(){  super();}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2 * 1.2);  Paint paint=new Paint();  paint.setColor(getResources().getColor(R.color.province_line_border));  paint.setStrokeWidth((float)3);  canvas.drawLine(0,center - offset,getWidth(),center - offset,paint);  canvas.drawLine(0,center + offset,getWidth(),center + offset,paint);}  }
class C{  @JsOverlay final public <R extends JsPlainObj>R except(String... exclude){  return JsHelper.except(this,exclude);}  }
class C{  SchurTransformer(final RealMatrix matrix){  if (!matrix.isSquare()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,matrix.getRowDimension(),matrix.getColumnDimension());  }  HessenbergTransformer transformer=new HessenbergTransformer(matrix);  matrixT=transformer.getH().getData();  matrixP=transformer.getP().getData();  cachedT=null;  cachedP=null;  cachedPt=null;  transform();}  }
class C{  @Override protected RemoteOperationResult run(OwnCloudClient client){  RemoteOperationResult result=null;  if (mTargetParentPath.startsWith(mSrcPath)) {    return new RemoteOperationResult(ResultCode.INVALID_MOVE_INTO_DESCENDANT);  }  mFile=getStorageManager().getFileByPath(mSrcPath);  if (mFile == null) {    return new RemoteOperationResult(ResultCode.FILE_NOT_FOUND);  }  String targetPath=mTargetParentPath + mFile.getFileName();  if (mFile.isFolder()) {    targetPath+=OCFile.PATH_SEPARATOR;  }  MoveRemoteFileOperation operation=new MoveRemoteFileOperation(mSrcPath,targetPath,false);  result=operation.execute(client);  if (result.isSuccess()) {    getStorageManager().moveLocalFile(mFile,targetPath,mTargetParentPath);  }  return result;}  }
class C{  private static void verifyCodewordCount(int[] codewords,int numECCodewords) throws FormatException {  if (codewords.length < 4) {    throw FormatException.getFormatInstance();  }  int numberOfCodewords=codewords[0];  if (numberOfCodewords > codewords.length) {    throw FormatException.getFormatInstance();  }  if (numberOfCodewords == 0) {    if (numECCodewords < codewords.length) {      codewords[0]=codewords.length - numECCodewords;    } else {      throw FormatException.getFormatInstance();    }  }}  }
class C{  public static boolean equals(Vector3f check,FloatBuffer buf,int index){  Vector3f tempVec3=Vector3f.newInstance();  populateFromBuffer(tempVec3,buf,index);  boolean eq=tempVec3.equals(check);  Vector3f.recycle(tempVec3);  return eq;}  }
class C{  public PagesParseWikiQuery parseWiki(UserActor actor,String text){  return new PagesParseWikiQuery(getClient(),actor,text);}  }
class C{  protected void aggregate(FirstMoment other){  MathUtils.checkNotNull(other);  if (other.n > 0) {    if (this.n == 0) {      this.m1=0.0;    }    this.n+=other.n;    this.dev=other.m1 - this.m1;    this.nDev=this.dev / this.n;    this.m1+=other.n / (double)this.n * this.dev;  }}  }
class C{  protected final void fillSentence(Element sentence,Utterance utterance){  Document doc=sentence.getOwnerDocument();  Relation tokenRelation=utterance.getRelation(Relation.TOKEN);  if (tokenRelation == null)   return;  Item tokenItem=tokenRelation.getHead();  Relation phraseRelation=utterance.getRelation(Relation.PHRASE);  Item phraseItem=null;  if (phraseRelation != null) {    phraseItem=phraseRelation.getHead();    while (phraseItem != null) {      Element phrase=MaryXML.createElement(doc,MaryXML.PHRASE);      sentence.appendChild(phrase);      Element insertHere=phrase;      while (tokenItem != null && tokenItem.getDaughter().findItem("R:Phrase.parent").equals(phraseItem)) {        FeatureSet tokenFeatures=tokenItem.getFeatures();        if (tokenFeatures.isPresent(XML2UttBase.PROSODY_START)) {          Element prosody=insertProsodySettings(insertHere,tokenFeatures);          if (prosody != null) {            insertHere=prosody;          }        }        insertToken(tokenItem,phrase,true);        if (tokenFeatures.isPresent(XML2UttBase.PROSODY_END)) {          assert insertHere.getTagName().equals(MaryXML.PROSODY);          insertHere=(Element)insertHere.getParentNode();        }        tokenItem=tokenItem.getNext();      }      phraseItem=phraseItem.getNext();    }  } else {    Element insertHere=sentence;    while (tokenItem != null) {      FeatureSet tokenFeatures=tokenItem.getFeatures();      if (tokenFeatures.isPresent(XML2UttBase.PROSODY_START)) {        Element prosody=insertProsodySettings(insertHere,tokenFeatures);        if (prosody != null) {          insertHere=prosody;        }      }      insertToken(tokenItem,insertHere);      if (tokenFeatures.isPresent(XML2UttBase.PROSODY_END)) {        if (insertHere.getTagName().equals(MaryXML.PROSODY)) {          insertHere=(Element)insertHere.getParentNode();        }      }      tokenItem=tokenItem.getNext();    }  }}  }
class C{  public InfoflowResults analyzeAPKFile(String apkFileName,String xmlFileName) throws IOException, XmlPullParserException {  return analyzeAPKFile(apkFileName,xmlFileName,false,false,false);}  }
class C{  public void transformToCIResult(){  for (  IVarAbstraction pn : pointers) {    if (pn.getRepresentative() != pn)     continue;    Node node=pn.getWrappedNode();    node.discardP2Set();    PointsToSetInternal ptSet=node.makeP2Set();    for (    AllocNode obj : pn.get_all_points_to_objects()) {      ptSet.add(obj);    }    pn.deleteAll();  }  hasTransformed=true;}  }
class C{  protected void addAbsoluteFooter(@LayoutRes int layoutId){  addAbsoluteFooter(layoutId,Insertion.TYPE_ABSOLUTE_FOOTER);}  }
class C{  public void parseCommandLine(String[] args){  String language=DEFAULT_LANGUAGE;  String country=DEFAULT_COUNTRY;  if (args != null) {    for (    String arg : args) {      if (arg.startsWith(ARG_STRING)) {        String locale=arg.substring(ARG_STRING.length());        String[] components=locale.split("\\:");        if (components.length == 2) {          language=components[0];          country=components[1];        }      }    }  }  currentLocale=new Locale(language,country);}  }
class C{  private Object cast(ResourceType.DataType type,String column,ResultSet row) throws SQLException {  if (ResourceType.DataType.BOOLEAN == type) {    return row.getBoolean(column);  } else   if (ResourceType.DataType.STRING == type) {    return row.getString(column);  } else   if (ResourceType.DataType.LONG == type) {    return row.getLong(column);  } else   if (ResourceType.DataType.DOUBLE == type) {    return row.getDouble(column);  }  return null;}  }
class C{  protected AudioEditAlbumQuery albumId(int value){  return unsafeParam("album_id",value);}  }
class C{  private static int loadBuildNumber(Context context,PackageManager packageManager){  try {    ApplicationInfo appInfo=packageManager.getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);    Bundle metaData=appInfo.metaData;    if (metaData != null) {      return metaData.getInt("buildNumber",0);    }  } catch (  Exception e) {    Log.e(TAG,"Exception thrown when accessing the application info:");    e.printStackTrace();  }  return 0;}  }
class C{  protected void handleFieldState(FieldIdEnum fieldId){  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (fieldConfig != null) {    if (fieldConfig instanceof FieldConfigEnum) {      FieldConfigEnum fieldEnum=(FieldConfigEnum)fieldConfig;      Map<FieldIdEnum,Boolean> stateMap=fieldEnum.getFieldEnableState();      if (stateMap != null) {        for (        FieldIdEnum fieldKey : stateMap.keySet()) {          enableField(fieldKey,stateMap.get(fieldKey));        }      }    }  } else {    ConsoleManager.getInstance().error(this,String.format("handleFieldState - %s : %s",Localisation.getString(StandardPanel.class,"StandardPanel.unknownField"),fieldId));  }}  }
class C{  TaskManager.Task[] createTasks(){  TaskManager.Task[] tmp=new TaskManager.Task[handles.length];  for (int i=0; i < handles.length; i++) {    tmp[i]=new ParticipantTask(getPool(),getMgr(),this,handles[i]);  }  return tmp;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public String start_subgraph(int clusterid){  return "subgraph cluster_" + clusterid + " {";}  }
class C{  static void reformatClosure(@NotNull GrStatementOwner closure){  new ReformatCodeProcessor(closure.getProject(),closure.getContainingFile(),closure.getParent().getTextRange(),false).runWithoutProgress();  for (  PsiElement psiElement : closure.getChildren()) {    if (psiElement instanceof LeafPsiElement) {      String text=psiElement.getText();      if (StringUtil.isEmptyOrSpaces(text)) {        String newText=text;        while (newText.contains("\n\n")) {          newText=newText.replaceAll("\n\n","\n");        }        if (!newText.equals(text)) {          ((LeafPsiElement)psiElement).replaceWithText(newText);        }      }    }  }}  }
class C{  protected static double normaliseAngle(double value){  double angle=value;  while (angle < 0.0) {    angle+=360.0;  }  while (angle > 360.0) {    angle-=360.0;  }  return angle;}  }
class C{  public Expression whenScalar(Value val1,Value val2){  throw new RuntimeException("Unsupported operation.");}  }
class C{  private void fill(RecyclerView.Recycler recycler){  View centerView=findCurrentCenterView();  int centerViewPosition=centerView == null ? 0 : getPosition(centerView);  int centerViewOffset=centerView == null ? (int)(getWidth() / 2F - settings.getViewWidthPx() / 2F) : getDecoratedLeft(centerView);  viewCache.clear();  for (int i=0, cnt=getChildCount(); i < cnt; i++) {    View view=getChildAt(i);    int pos=getPosition(view);    viewCache.put(pos,view);  }  for (int i=0; i < viewCache.size(); i++) {    detachView(viewCache.valueAt(i));  }  if (scrollToPosition != RecyclerView.NO_POSITION) {    fillRightFromCenter(scrollToPosition,centerViewOffset,recycler);  } else {    fillRightFromCenter(centerViewPosition,centerViewOffset,recycler);  }  for (int i=0; i < viewCache.size(); i++) {    recycler.recycleView(viewCache.valueAt(i));  }  updateArcViewPositions();}  }
class C{  public static void main(String[] args){  LinkTerrain simulation=new LinkTerrain();  simulation.run();}  }
class C{  public boolean showProtectedMediaSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_PROTECTED_MEDIA_IDENTIFIER;}  }
class C{  @Override public int compareTo(final BigFraction object){  int lhsSigNum=numerator.signum();  int rhsSigNum=object.numerator.signum();  if (lhsSigNum != rhsSigNum) {    return (lhsSigNum > rhsSigNum) ? 1 : -1;  }  if (lhsSigNum == 0) {    return 0;  }  BigInteger nOd=numerator.multiply(object.denominator);  BigInteger dOn=denominator.multiply(object.numerator);  return nOd.compareTo(dOn);}  }
class C{  private boolean isSubsumed(String selector,Iterable<String> others){  for (  String other : others) {    if (subsumes(other,selector)) {      return true;    }  }  return false;}  }
class C{  private static void loadTargets(){  ourTargets.clear();  IAndroidTarget[] targets=getCompilationTargets();  if (AndroidSdkUtils.isAndroidSdkAvailable()) {    String[] knownVersions=TemplateUtils.getKnownVersions();    for (int i=0; i < knownVersions.length; i++) {      AndroidTargetComboBoxItem targetInfo=new AndroidTargetComboBoxItem(knownVersions[i],i + 1);      ourTargets.add(targetInfo);    }  }  for (  IAndroidTarget target : targets) {    if (target.getVersion().isPreview() || !target.getAdditionalLibraries().isEmpty()) {      AndroidTargetComboBoxItem targetInfo=new AndroidTargetComboBoxItem(target);      ourTargets.add(targetInfo);    }  }}  }
class C{  public boolean containsErrors(){  return containsErrors;}  }
class C{  public TLongHash(){  super();  this._hashingStrategy=this;}  }
class C{  public static void populateFromBuffer(Vector3f vector,FloatBuffer buf,int index){  vector.x=buf.get(index * 3);  vector.y=buf.get(index * 3 + 1);  vector.z=buf.get(index * 3 + 2);}  }
class C{  void internalInsertData(int offset,String data,boolean replace) throws DOMException {  CoreDocumentImpl ownerDocument=ownerDocument();  if (ownerDocument.errorChecking && isReadOnly()) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);  }  if (needsSyncData()) {    synchronizeData();  }  try {    String value=new StringBuffer(this.data).insert(offset,data).toString();    setNodeValueInternal(value,replace);    ownerDocument.insertedText(this,offset,data.length());  } catch (  StringIndexOutOfBoundsException e) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INDEX_SIZE_ERR",null);    throw new DOMException(DOMException.INDEX_SIZE_ERR,msg);  }}  }
class C{  public MapContext<K,V> standAloneChildStack(){  MapContext<K,V> standAloneChild=MapContext.createMapContext(this);  standAloneChild.push();  return standAloneChild;}  }
class C{  void update(){  if (this.googleMap == null) {    return;  }  Projection currentProjection=this.googleMap.getProjection();  this.latLngBounds=currentProjection.getVisibleRegion().latLngBounds;  for (  Annotation annotation : this.annotationToAnnotationViewMap.keySet()) {    AnnotationView annotationView=this.annotationToAnnotationViewMap.get(annotation);    if (annotationView == null) {      annotationView=this.mapRenderer.viewForAnnotation(annotation);      if (annotationView == null) {        throw new NullPointerException("Can not return a null annotation view from viewForAnnotation. The user must implement the method");      }      annotationToAnnotationViewMap.put(annotation,annotationView);      this.annotationToAnnotationViewMap.put(annotation,annotationView);      if (annotationView.getParent() != this.annotationViewWrapper) {        this.annotationViewWrapper.addView(annotationView);      }    }    this.annotationViewWrapper.getHitRect(superMapsFrameLayoutRect);    if (superMapsFrameLayoutRect == null) {      throw new NullPointerException("supermaps FrameLayout Rect is null");    }    Point currentPoint=currentProjection.toScreenLocation(annotation.getLatLng());    annotationView.setCenter(currentPoint);    if (!annotationView.getLocalVisibleRect(superMapsFrameLayoutRect)) {      this.enqueueReusableAnnotationViewWithIdentifier(annotationView);    }  }}  }
class C{  public boolean isCannotGiveup(){  if (cannotGiveup == null) {    return false;  } else {    return cannotGiveup;  }}  }
class C{  public void tabClosed(long time,int id){  if (findTabById(id) == null)   return;  boolean closingLastTab=mStripTabs[mStripTabs.length - 1].getId() == id;  computeAndUpdateTabOrders(!closingLastTab);  mUpdateHost.requestUpdate();}  }
class C{  private boolean isConfigurationPluginAvailable(){  if (configurationPluginAvailable == null) {    try {      String value=APILocator.getPluginAPI().loadProperty(pluginName,"environment");      configurationPluginAvailable=(value != null);    } catch (    Exception e) {      Logger.warn(this,"Exception while trying to get property 'environment' ",e);      configurationPluginAvailable=false;    }    Logger.info(this,"Configuration plugin available: " + configurationPluginAvailable);  }  return configurationPluginAvailable;}  }
class C{  private void calcAngles(){  int entryCount=mData.getEntryCount();  if (mDrawAngles.length != entryCount) {    mDrawAngles=new float[entryCount];  } else {    for (int i=0; i < entryCount; i++) {      mDrawAngles[i]=0;    }  }  if (mAbsoluteAngles.length != entryCount) {    mAbsoluteAngles=new float[entryCount];  } else {    for (int i=0; i < entryCount; i++) {      mAbsoluteAngles[i]=0;    }  }  float yValueSum=mData.getYValueSum();  List<IPieDataSet> dataSets=mData.getDataSets();  int cnt=0;  for (int i=0; i < mData.getDataSetCount(); i++) {    IPieDataSet set=dataSets.get(i);    for (int j=0; j < set.getEntryCount(); j++) {      mDrawAngles[cnt]=calcAngle(Math.abs(set.getEntryForIndex(j).getY()),yValueSum);      if (cnt == 0) {        mAbsoluteAngles[cnt]=mDrawAngles[cnt];      } else {        mAbsoluteAngles[cnt]=mAbsoluteAngles[cnt - 1] + mDrawAngles[cnt];      }      cnt++;    }  }}  }
class C{  public double trace(){  double t=0;  for (int i=0; i < Math.min(m,n); i++) {    t+=A[i][i];  }  return t;}  }
class C{  private int readFirstBytes() throws IOException {  getBOM();  return fbIndex < fbLength ? firstBytes[fbIndex++] : -1;}  }
class C{  public MessagesGetChatUsersQuery chatId(Integer value){  return unsafeParam("chat_id",value);}  }
class C{  public boolean isGuestEnabled(){  try {    return mService.isGuestEnabled();  } catch (  RemoteException re) {    Log.w(TAG,"Could not retrieve guest enabled state");    return false;  }}  }
class C{  private static void createCollection(HttpSolrClient solrClient){  final CollectionAdminRequest.Create createCollectionRequest=new CollectionAdminRequest.Create();  createCollectionRequest.setCollectionName(Constants.COLLECTION_NAME);  createCollectionRequest.setConfigName(Constants.CONFIGURATION_NAME);  logger.info(Messages.getString("SetupThread.CREATING_COLLECTION"));  CollectionAdminResponse response=null;  try {    response=createCollectionRequest.process(solrClient);  } catch (  SolrServerException e) {    logger.error(e.getMessage());  }catch (  IOException e) {    logger.error(e.getMessage());  }  if (!response.isSuccess()) {    logger.error(Messages.getString("SetupThread.CREATING_COLLECTION_FAILED") + response.getErrorMessages().toString());  }  logger.info(Messages.getString("SetupThread.COLLECTION_CREATED"));}  }
class C{  public boolean contains(ReadModifiers modifiers){  return super.contains(modifiers);}  }
class C{  public TrustManagerBuilder withManifestConfig(@NonNull Context ctxt){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {    return (withConfig(new ManifestConfigSource(ctxt)));  }  return (this);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T resolve(ResourceResolverFactory factory,String userId,ResolveCallback callback) throws ResolveException {  ResourceResolver resolver=null;  try {    resolver=getResourceResolverForUser(factory,userId);    return (T)callback.resolve(resolver);  } catch (  Exception e) {    throw new ResolveException(RESOLVE_ERROR_MESSAGE,e);  } finally {    if (resolver != null && resolver.isLive()) {      resolver.close();    }  }}  }
class C{  private DateTimeZone generateTimeZone(String timeZoneId,DateTimeZone systemTimeZone){  if (timeZoneId == null) {    return systemTimeZone;  }  try {    return DateTimeZone.forID(timeZoneId);  } catch (  IllegalArgumentException ignored) {    LOG.debug(INVALID_TIME_ZONE.logFormat(timeZoneId));    throw new BadApiRequestException(INVALID_TIME_ZONE.format(timeZoneId));  }}  }
class C{  @Override public void addChild(WXComponent child,int index){  if (child == null || index < -1) {    return;  }  checkRefreshOrLoading(child);  if (child instanceof WXBaseRefresh) {    return;  }  if (mChildren == null) {    mChildren=new ArrayList<>();  }  int count=mChildren.size();  index=index >= count ? -1 : index;  if (index == -1) {    mChildren.add(child);  } else {    mChildren.add(index,child);  }}  }
class C{  @NotNull private static String escapeAndQuote(@Nullable Object data){  if (data == null) {    return "''";  }  String stringContent=data.toString();  boolean gstring=false;  for (int i=stringContent.indexOf('$'); i >= 0 && i < stringContent.length(); i=stringContent.indexOf('$',i + 1)) {    if (i <= 0 || stringContent.charAt(i - 1) != '\\') {      gstring=true;      break;    }  }  char quote=gstring ? '"' : '\'';  return quote + escapeLiteralString(stringContent) + quote;}  }
class C{  public UserProfileView(Context context){  super(context);  this.initialize();}  }
class C{  private static void load(){  final Type mapType=new TypeToken<ConcurrentHashMap<Long,Location>>(){  }.getType();  Map<Long,Location> loadedLocations;  try {    loadedLocations=GSON.fromJson(FileHelper.readFileWithExceptions(LOCATION_FILE),mapType);    System.out.println("Load saved locations from file.");  } catch (  JsonSyntaxException|IOException e) {    loadedLocations=null;    System.out.println(ExceptionMessages.COULD_NOT_LOAD_LOCATIONS.with(e));    FileHelper.deleteFile(LOCATION_FILE,false);  }  if (loadedLocations != null) {    SAVED_LOCATIONS.putAll(loadedLocations);  }}  }
class C{  public static void loadConfiguration(Configuration targetConf,Configuration srcConf,String section){  Iterator confKeys=srcConf.getKeys();  while (confKeys.hasNext()) {    Object keyObject=confKeys.next();    if (!(keyObject instanceof String)) {      continue;    }    String key=(String)keyObject;    if (key.startsWith(section)) {      targetConf.setProperty(key.substring(section.length()),srcConf.getProperty(key));    }  }}  }
class C{  public static boolean isActivityAvailableForIntent(Context context,Intent intent){  return intent.resolveActivity(context.getPackageManager()) != null;}  }
class C{  public synchronized void pan(double dx,double dy){  m_tmpPoint.setLocation(dx,dy);  m_itransform.transform(m_tmpPoint,m_tmpPoint);  double panx=m_tmpPoint.getX();  double pany=m_tmpPoint.getY();  m_tmpPoint.setLocation(0,0);  m_itransform.transform(m_tmpPoint,m_tmpPoint);  panx-=m_tmpPoint.getX();  pany-=m_tmpPoint.getY();  panAbs(panx,pany);}  }
class C{  public Env<T> open(final File path,final EnvFlags... flags){  return open(path,0664,flags);}  }
class C{  @Override protected final void addContentSpecToElement(XMLElementDecl elementDecl){  int contentSpec=fGroupIndexStackSizes[0] > 0 ? fGroupIndexStack[0][0] : -1;  setContentSpecIndex(fCurrentElementIndex,contentSpec);}  }
class C{  @Override public void write(int idx) throws IOException {  try {    beforeWrite(1);    out.write(idx);    afterWrite(1);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  @Override public boolean isValueLineVariableLength(){  return mValueLineVariableLength;}  }
class C{  public TransactionLocalMap(){  table=new Entry[INITIAL_CAPACITY];  size=0;  setThreshold(INITIAL_CAPACITY);}  }
class C{  public static float dp2px(float dp){  if (mMetrics == null) {    Log.e("MPChartLib-Utils","Utils NOT INITIALIZED. You need to call Utils.init(...) at least once before" + " calling Utils.dp2px(...). Otherwise conversion does not " + "take place.");    return dp;  }  DisplayMetrics metrics=mMetrics;  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  public AnnotationView dequeueAnnotationViewWithReuseId(String reuseId){  return this.dequeueReusableAnnotationViewWithIdentifier(reuseId);}  }
class C{  public GroupsGetRequestsQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"groups.getRequests",GetRequestsResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public EmbeddedSyncer(String threadName,DirectPersistencySyncHandler handler,EmbeddedSyncSegment segment){  super(threadName);  _mainHandler=handler;  _segment=segment;  this.setDaemon(true);}  }
class C{  public XIncludeParserConfiguration(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  protected DatabaseGetCitiesQuery countryId(int value){  return unsafeParam("country_id",value);}  }
class C{  public void addAttribute(AXmlAttribute<?> attr){  if (attr == null)   throw new NullPointerException("AXmlAttribute is null");  if (this.attributes == null)   this.attributes=new HashMap<String,AXmlAttribute<?>>();  this.attributes.put(attr.getName(),attr);}  }
class C{  public PagesSaveQuery text(String value){  return unsafeParam("text",value);}  }
class C{  public static Bitmap toOvalBitmap(@NonNull Bitmap bitmap){  int width=bitmap.getWidth();  int height=bitmap.getHeight();  Bitmap output=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(output);  int color=0xff424242;  Paint paint=new Paint();  paint.setAntiAlias(true);  canvas.drawARGB(0,0,0,0);  paint.setColor(color);  RectF rect=new RectF(0,0,width,height);  canvas.drawOval(rect,paint);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));  canvas.drawBitmap(bitmap,0,0,paint);  bitmap.recycle();  return output;}  }
class C{  public void pushResourceBundle(ResourceBundle topResourceBundle){  this.rbmwStack.push(new InternalRbmWrapper(topResourceBundle));}  }
class C{  private boolean hitBorder(int from,int offset){  int spanCount=getSpanCount();  if (Math.abs(offset) == 1) {    int spanIndex=from % spanCount;    int newSpanIndex=spanIndex + offset;    return newSpanIndex < 0 || newSpanIndex >= spanCount;  } else {    int newPos=from + offset;    return newPos < 0 || newPos >= spanCount;  }}  }
class C{  private void sendProcessConnectionRequest(){  EasyMock.expect(this.environmentMock.getProperty(EasyMock.<String>anyObject())).andReturn(PROCESS_NAME).times(1);  ;  EasyMock.replay(this.environmentMock,this.configurationControllerMock);  ProcessConnectionResponse processConnectionResponse=this.activeRequestSender.sendProcessConnectionRequest(PROCESS_NAME);  compareConnection(processConnectionResponse);  EasyMock.verify(this.configurationControllerMock);}  }
class C{  public static void write(File file,CharSequence data,String encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  public String formatTweetText(CustomStatus status){  if (status.isRetweet()) {    return "RT " + formatText(status.getRetweetedStatus().getText());  } else {    return formatText(status.getText());  }}  }
class C{  private static double gTest(final double[] expected,final long[] observed){  final ChiSquaredDistribution distribution=new ChiSquaredDistribution(expected.length - 1.0);  return 1.0 - distribution.cumulativeProbability(g(expected,observed));}  }
class C{  public RegisterReplicationLocalViewResponseInfo(){}  }
class C{  public static Map<String,Object> alwaysApproveProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=FastMap.newInstance();  Debug.logInfo("Test Processor Approving Credit Card",module);  String refNum=UtilDateTime.nowAsString();  result.put("authResult",Boolean.TRUE);  result.put("processAmount",context.get("processAmount"));  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authCode","100");  result.put("authFlag","A");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestProcessor",locale));  return result;}  }
class C{  public Complex[] solveAll(Complex coefficients[],Complex initial) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {  if (coefficients == null) {    throw new NullArgumentException();  }  final int n=coefficients.length - 1;  if (n == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.POLYNOMIAL);  }  final Complex c[]=new Complex[n + 1];  for (int i=0; i <= n; i++) {    c[i]=coefficients[i];  }  final Complex root[]=new Complex[n];  for (int i=0; i < n; i++) {    final Complex subarray[]=new Complex[n - i + 1];    System.arraycopy(c,0,subarray,0,subarray.length);    root[i]=solve(subarray,initial);    Complex newc=c[n - i];    Complex oldc=null;    for (int j=n - i - 1; j >= 0; j--) {      oldc=c[j];      c[j]=newc;      newc=oldc.add(newc.multiply(root[i]));    }  }  return root;}  }
class C{  public void addHeader(@LayoutRes int layoutId,Object data){  int insertPosition=calcInsertPosition(0);  mInserts.add(insertPosition,new Insertion(layoutId,data,Insertion.TYPE_HEADER));  getItems().add(insertPosition,null);  mHeadersCount+=1;  notifyIfNeed();}  }
class C{  @Override public int read(char[] array,int offset,int length){  if (idx >= charSequence.length()) {    return -1;  }  if (array == null) {    throw new NullPointerException("Character array is missing");  }  if (length < 0 || offset < 0 || offset + length > array.length) {    throw new IndexOutOfBoundsException("Array Size=" + array.length + ", offset="+ offset+ ", length="+ length);  }  int count=0;  for (int i=0; i < length; i++) {    int c=read();    if (c == -1) {      return count;    }    array[offset + i]=(char)c;    count++;  }  return count;}  }
class C{  private String expandClassName(String className){  String packageName=getPackageName();  if (className.startsWith("."))   return packageName + className; else   if (className.substring(0,1).equals(className.substring(0,1).toUpperCase()))   return packageName + "." + className; else   return className;}  }
class C{  public boolean forEachValue(TObjectProcedure<V> procedure){  byte[] states=_states;  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  boolean isAlive(){  if (vertex == null)   return false;  try {    return vertex.property(Schema.BaseType.TYPE.name()).isPresent();  } catch (  IllegalStateException e) {    return false;  }}  }
class C{  public JavaStreamingAudioPlayer(){  debug=Utilities.getBoolean("com.sun.speech.freetts.audio.AudioPlayer.debug");  cancelDelay=Utilities.getLong("com.sun.speech.freetts.audio.AudioPlayer.cancelDelay",0L).longValue();  drainDelay=Utilities.getLong("com.sun.speech.freetts.audio.AudioPlayer.drainDelay",150L).longValue();  openFailDelayMs=Utilities.getLong("com.sun.speech.freetts.audio.AudioPlayer.openFailDelayMs",0L).longValue();  totalOpenFailDelayMs=Utilities.getLong("com.sun.speech.freetts.audio.AudioPlayer.totalOpenFailDelayMs",0L).longValue();  audioMetrics=Utilities.getBoolean("com.sun.speech.freetts.audio.AudioPlayer.showAudioMetrics");  line=null;  setPaused(false);}  }
class C{  private void throwInactiveSpaceException() throws InactiveSpaceException {  String primaryMemberName=_leaderSelector.getPrimaryMemberName();  if (primaryMemberName == null)   throw new ElectionInProcessException(getServiceName());  throw new InactiveSpaceException(getServiceName(),primaryMemberName);}  }
class C{  protected void actionPerformed(GuiButton par1GuiButton){  if (par1GuiButton.id == ID_GENERIC_DONE) {    this.guivrSettings.saveOptions();    this.mc.displayGuiScreen(this.parentGuiScreen);  } else   if (par1GuiButton.id == ID_GENERIC_DEFAULTS) {    mc.vrSettings.resetBindings();    this.initGui();  }}  }
class C{  public PointsToSetInternal makeP2Set(){  if (p2set != null) {    if (replacement != this)     throw new RuntimeException("Node " + this + " has replacement "+ replacement+ " but has p2set");    return p2set;  }  Node rep=getReplacement();  if (rep == this) {    p2set=pag.getSetFactory().newSet(type,pag);  }  return rep.makeP2Set();}  }
class C{  public void createFile(FiltersInfo newFilterInfo) throws Exception {  filterInfo=newFilterInfo;  flush(newFilterInfo);}  }
class C{  @Override public void onBindViewHolder(ListBaseViewHolder holder,int position){  if (holder == null)   return;  holder.setComponentUsing(true);  WXComponent component=getChild(position);  if (component == null || (component instanceof WXRefresh) || (component instanceof WXLoading) || (component.mDomObj != null && component.mDomObj.isFixed())) {    WXLogUtils.d(TAG,"Bind WXRefresh & WXLoading " + holder);    return;  }  if (component != null && holder.getComponent() != null && holder.getComponent() instanceof WXCell) {    holder.getComponent().bindData(component);  }}  }
class C{  public int truncate_file1(String appender_file_id,long truncated_file_size) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(appender_file_id,parts);  if (this.errno != 0) {    return this.errno;  }  return this.truncate_file(parts[0],parts[1],truncated_file_size);}  }
class C{  protected void processColorReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  int color=serialMessage.getMessagePayloadByte(offset + 1);  int level=serialMessage.getMessagePayloadByte(offset + 2);  ZWaveColorType colorType=ZWaveColorType.getColorType(color);  if (colorType == null) {    logger.error("NODE {}: Color report for unknown color {} ({})",getNode().getNodeId(),color,level);    return;  }  logger.info("NODE {}: Color report {} {}",getNode().getNodeId(),colorType.toString(),level);  colorMap.put(colorType,level);  refreshList.remove(colorType);  if (refreshList.isEmpty()) {    logger.info("NODE {}: Color report finished {}",getNode().getNodeId(),colorMap);    ZWaveCommandClassValueEvent zEvent=new ZWaveColorValueEvent(getNode().getNodeId(),endpoint,colorMap);    getController().notifyEventListeners(zEvent);  }}  }
class C{  private Reader createUTF8Reader(InputStream stream){  return new UTF8Reader(stream,fTempString.ch.length,fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN),fErrorReporter.getLocale());}  }
class C{  public String toString(){  return cronExpression;}  }
class C{  protected void checkNotation(String notName){  Notation not=new Notation();  not.name=notName;  int index=fNotations.indexOf(not);  if (index != -1) {    not=(Notation)fNotations.get(index);    checkAndSendNotation(not);  }}  }
class C{  public void stop(){  running=false;}  }
class C{  default String fromIri(IRI iri){  return iri.getShortForm();}  }
class C{  public static boolean isInitializer(){  return _threadId.get() != null && INITIALIZER_ID.equals(_threadId.get());}  }
class C{  public BigInteger toBigInteger(){  return new BigInteger(1,ByteUtils.reverse(toByteArray()));}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  return expression;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200371,skillname);}  }
class C{  public static java.util.Date toDate(String date,String time){  if (date == null || time == null)   return null;  String month;  String day;  String year;  String hour;  String minute;  String second;  int dateSlash1=date.indexOf("/");  int dateSlash2=date.lastIndexOf("/");  if (dateSlash1 <= 0 || dateSlash1 == dateSlash2)   return null;  int timeColon1=time.indexOf(":");  int timeColon2=time.lastIndexOf(":");  if (timeColon1 <= 0)   return null;  month=date.substring(0,dateSlash1);  day=date.substring(dateSlash1 + 1,dateSlash2);  year=date.substring(dateSlash2 + 1);  hour=time.substring(0,timeColon1);  if (timeColon1 == timeColon2) {    minute=time.substring(timeColon1 + 1);    second="0";  } else {    minute=time.substring(timeColon1 + 1,timeColon2);    second=time.substring(timeColon2 + 1);  }  return toDate(month,day,year,hour,minute,second);}  }
class C{  public static float mean(float[] data,int startIndex,int endIndex){  float mean=0;  int total=0;  startIndex=Math.max(startIndex,0);  startIndex=Math.min(startIndex,data.length - 1);  endIndex=Math.max(endIndex,0);  endIndex=Math.min(endIndex,data.length - 1);  if (startIndex > endIndex)   startIndex=endIndex;  for (int i=startIndex; i <= endIndex; i++) {    if (Float.isNaN(data[i]))     throw new IllegalArgumentException("NaN not allowed in mean calculation");    mean+=data[i];    total++;  }  mean/=total;  return mean;}  }
class C{  public static JSONObject toJSONObject(XMLTokener x) throws JSONException {  return (JSONObject)parse(x,false,null);}  }
class C{  public static double[] normalizeZscore(double[] x){  double mn=mean(x,0);  double sd=standardDeviation(x,0);  for (int i=0; i < x.length; i++)   if (!Double.isNaN(x[i]))   x[i]=(x[i] - mn) / sd;  return x;}  }
class C{  private String makeBlastXAlignment(String referenceName,float score,float expected,String queryAligned,String midAligned,String refAligned,int queryStart,int queryEnd,int refStart,int refEnd,int frame,Integer queryLength) throws IOException {  queryAligned=queryAligned.toUpperCase();  midAligned=midAligned.toUpperCase();  refAligned=refAligned.toUpperCase();  if (frame < 0)   throw new IOException("Illegal: frame=" + frame);  if (frame > 0) {    frame=(frame <= 3 ? frame : 3 - frame);    if (queryLength != null) {      if (frame > 0) {        queryStart=3 * (queryStart - 1) + 1 + (frame - 1);        queryEnd=3 * (queryEnd) + (frame - 1);      } else {        queryStart=queryLength - 3 * (queryStart - 1) + (frame + 1);        queryEnd=queryLength - 3 * queryEnd + 1 + (frame + 1);      }    }  }  if (frame == -2 && queryEnd == 0) {    queryAligned=queryAligned.substring(0,queryAligned.length() - 1);    midAligned=midAligned.substring(0,midAligned.length() - 1);    refAligned=refAligned.substring(0,refAligned.length() - 1);    queryEnd=1;  }  if (frame == 2 && queryLength != null && queryEnd == queryLength + 1) {    queryAligned=queryAligned.substring(0,queryAligned.length() - 1);    midAligned=midAligned.substring(0,midAligned.length() - 1);    refAligned=refAligned.substring(0,refAligned.length() - 1);    queryEnd--;  }  StringBuilder buf=new StringBuilder();  buf.append(">").append(referenceName).append("\n Length = -1\n\n");  buf.append(String.format(" Score = %.1f (0), Expect = %g\n",score,expected));  int[] identities=computeIdentities(midAligned);  int[] positives=computePositives(midAligned);  int[] gaps=computeGaps(queryAligned,refAligned,midAligned);  buf.append(String.format(" Identities = %d/%d (%d%%), Positives = %d/%d (%d%%), Gaps = %d/%d (%d%%)\n",identities[0],identities[1],identities[2],positives[0],positives[1],positives[2],gaps[0],gaps[1],gaps[2]));  buf.append(String.format(" Frame = %+d\n",(frame <= 3 ? frame : 3 - frame)));  buf.append("\n");  buf.append(String.format("Query: %8d %s %d\n",queryStart,queryAligned,queryEnd));  buf.append(String.format("                %s\n",midAligned));  buf.append(String.format("Sbjct: %8d %s %d\n",refStart,refAligned,refEnd));  buf.append("\n");  return buf.toString();}  }
class C{  protected final boolean handleAllocNode(AllocNode src){  boolean ret=false;  Node[] targets=pag.allocLookup(src);  for (  Node element : targets) {    ret=element.makeP2Set().add(src) | ret;  }  return ret;}  }
class C{  public void searchStrInCartTree(HTSModel m,FeatureVector fv,FeatureDefinition featureDef){  for (int s=0; s < numStates; s++) {    PdfLeafNode node=(PdfLeafNode)strTree[s].interpretToNode(fv,1);    m.setStrMean(s,node.getMean());    m.setStrVariance(s,node.getVariance());  }}  }
class C{  public void inc(KeyType[] container,long delta){  for (  KeyType key : container) {    inc(key,delta);  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public void clearLocal(){  super.clear();}  }
class C{  private float enterPauseDuration(Element boundary,Element previous,StringPredictionTree currentPauseTree,TargetFeatureComputer currentPauseFeatureComputer){  if (!boundary.getTagName().equals(MaryXML.BOUNDARY))   throw new IllegalArgumentException("cannot call enterPauseDuration for non-pause element");  if (boundary.hasAttribute("duration")) {    try {      return Float.parseFloat(boundary.getAttribute("duration")) * 0.001f;    } catch (    NumberFormatException nfe) {    }  }  float duration=0.4f;  if (previous == null || !previous.getTagName().equals(MaryXML.PHONE))   return duration;  if (currentPauseTree == null)   return duration;  assert currentPauseFeatureComputer != null;  String phone=previous.getAttribute("p");  Target t=new Target(phone,previous);  t.setFeatureVector(currentPauseFeatureComputer.computeFeatureVector(t));  String durationString=currentPauseTree.getMostProbableString(t);  durationString=durationString.substring(0,durationString.length() - 2);  try {    duration=Float.parseFloat(durationString);  } catch (  NumberFormatException nfe) {  }  if (duration > 2) {    Log.d(Mary.LOG,"Cutting long duration to 2 s -- was " + duration);    duration=2;  }  return duration;}  }
class C{  public void transformTableToContainer(ConstraintTableLayout table){  ConstraintWidgetContainer container=new ConstraintWidgetContainer();  container.setDebugName(createContainerName("container"));  transformContainerToContainer(table,container);}  }
class C{  public final boolean addAll(PointsToSetInternal other,PointsToSetInternal exclude){  if (other != null && !(other instanceof BitPointsToSet))   return superAddAll(other,exclude);  if (exclude != null && !(exclude instanceof BitPointsToSet))   return superAddAll(other,exclude);  return nativeAddAll((BitPointsToSet)other,(BitPointsToSet)exclude);}  }
class C{  public void deleteNode(String nodePath,Session session) throws RepositoryException {  LOG.debug("Deleting node '{}'",nodePath);  if (session.nodeExists(nodePath)) {    session.removeItem(nodePath);    session.save();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostHealEffect_ME_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200537,skillcaster,skilltarget,skillname);}  }
class C{  public String toString(){  return name;}  }
class C{  protected LeadsStartQuery secret(String value){  return unsafeParam("secret",value);}  }
class C{  private static void sendPatch(StatefulService service,Object body){  Operation patch=Operation.createPatch(service.getUri()).setBody(body).setCompletion(null);  service.sendRequest(patch);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public boolean drain(){  timer.stop("speakableOut");  return true;}  }
class C{  private void updateArcViewPositions(){  float halfWidth=getWidth() / 2;  double radius=getWidth() * 2;  double powRadius=radius * radius;  double rotation;  float halfViewWidth;  double deltaX;  double deltaY;  int viewPosition;  for (int count=getChildCount(), i=0; i < count; i++) {    View view=getChildAt(i);    rotation=0;    halfViewWidth=view.getWidth() / 2;    view.setPivotX(halfViewWidth);    view.setPivotY(view.getHeight());    if (settings.isFanRadiusEnable()) {      deltaX=halfWidth - getDecoratedLeft(view) - halfViewWidth;      deltaY=radius - Math.sqrt(powRadius - deltaX * deltaX);      view.setTranslationY((float)deltaY);      rotation=(Math.toDegrees(Math.asin((radius - deltaY) / radius)) - 90) * Math.signum(deltaX);    }    viewPosition=getPosition(view);    Double baseViewRotation=viewRotationsMap.get(viewPosition);    if (baseViewRotation == null) {      baseViewRotation=random.nextDouble() * settings.getAngleItemBounce() * 2 - settings.getAngleItemBounce();      viewRotationsMap.put(viewPosition,baseViewRotation);    }    view.setRotation((float)(rotation + baseViewRotation));  }}  }
class C{  public int recv(long fileSize,byte[] data,int bytes){  try {    out.write(data,0,bytes);  } catch (  IOException ex) {    ex.printStackTrace();    return -1;  }  currentBytes+=bytes;  if (this.currentBytes == fileSize) {    this.currentBytes=0;  }  return 0;}  }
class C{  @Override public final long available(){  try {    return raf.length() - raf.getFilePointer();  } catch (  IOException e) {    System.err.println("ERROR" + e);    return 0;  }}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  put(key,new Double(value));  return this;}  }
class C{  private File[] listFiles(File file){  File[] children=null;  if (file.isDirectory()) {    children=fileFilter == null ? file.listFiles() : file.listFiles(fileFilter);  }  if (children == null) {    children=FileUtils.EMPTY_FILE_ARRAY;  }  if (comparator != null && children.length > 1) {    Arrays.sort(children,comparator);  }  return children;}  }
class C{  public static String optimizedPathFor(File path,File optimizedDirectory){  String fileName=path.getName();  if (!fileName.endsWith(ShareConstants.DEX_SUFFIX)) {    int lastDot=fileName.lastIndexOf(".");    if (lastDot < 0) {      fileName+=ShareConstants.DEX_SUFFIX;    } else {      StringBuilder sb=new StringBuilder(lastDot + 4);      sb.append(fileName,0,lastDot);      sb.append(ShareConstants.DEX_SUFFIX);      fileName=sb.toString();    }  }  File result=new File(optimizedDirectory,fileName);  return result.getPath();}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  void assignParamToLocal(int right,Local left){  PurityNode node=cacheNode(new PurityParamNode(right));  localsRemove(left);  localsPut(left,node);  nodes.add(node);  paramNodes.add(node);  if (doCheck)   sanityCheck();}  }
class C{  public static void rows(Zmat A,int r1,int r2) throws JampackException {  A.getProperties();  if (r1 < A.bx || r1 > A.rx || r2 < A.bx || r2 > A.rx) {    throw new JampackException("Inconsistent row indices");  }  A.dirty=true;  r1=r1 - A.bx;  r2=r2 - A.bx;  for (int j=0; j < A.nr; j++) {    double t=A.re[r1][j];    A.re[r1][j]=A.re[r2][j];    A.re[r2][j]=t;    t=A.im[r1][j];    A.im[r1][j]=A.im[r2][j];    A.im[r2][j]=t;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TELEPORT_ZONECHANNEL(String value0){  return new SM_SYSTEM_MESSAGE(1390122,value0);}  }
class C{  public static long readUnsignedLong(ByteInput in,int zwidth,boolean fillOnRight){  long result=0;  if (!fillOnRight) {    for (int i=zwidth; i >= 0; i--) {      result=(result >>> 8) | ((in.readByte() & 0xffL) << 56);    }    result>>>=(7 - zwidth) * 8;  } else {    for (int i=zwidth; i >= 0; i--) {      result=(result >>> 8) | ((in.readByte() & 0xffL) << 56);    }  }  return result;}  }
class C{  public void actionPerformed(ActionEvent ev){  String result=JOptionPane.showInputDialog(getViewer().getFrame(),"Enter Id","Select Node by Id",JOptionPane.QUESTION_MESSAGE);  if (result != null)   execute("select id=" + result + ";");}  }
class C{  @Override public void saveIssue(Issue issue){  final Session session=this.sessionFactory.openSession();  final Transaction transaction=session.beginTransaction();  session.saveOrUpdate(issue);  transaction.commit();  session.close();}  }
class C{  private void transform(){  final int n=householderVectors.length;  final int high=n - 1;  for (int m=1; m <= high - 1; m++) {    double scale=0;    for (int i=m; i <= high; i++) {      scale+=FastMath.abs(householderVectors[i][m - 1]);    }    if (!Precision.equals(scale,0)) {      double h=0;      for (int i=high; i >= m; i--) {        ort[i]=householderVectors[i][m - 1] / scale;        h+=ort[i] * ort[i];      }      final double g=(ort[m] > 0) ? -FastMath.sqrt(h) : FastMath.sqrt(h);      h-=ort[m] * g;      ort[m]-=g;      for (int j=m; j < n; j++) {        double f=0;        for (int i=high; i >= m; i--) {          f+=ort[i] * householderVectors[i][j];        }        f/=h;        for (int i=m; i <= high; i++) {          householderVectors[i][j]-=f * ort[i];        }      }      for (int i=0; i <= high; i++) {        double f=0;        for (int j=high; j >= m; j--) {          f+=ort[j] * householderVectors[i][j];        }        f/=h;        for (int j=m; j <= high; j++) {          householderVectors[i][j]-=f * ort[j];        }      }      ort[m]=scale * ort[m];      householderVectors[m][m - 1]=scale * g;    }  }}  }
class C{  public void mergeFigures(int buget_size){  RectangleNode p;  if (!hasNewFigure)   return;  for (int i=0; i < Divisions; ++i) {    p=null;    if (size[i] > buget_size && header[i].is_new == true) {switch (i) {case GeometricManager.ONE_TO_ONE:        p=mergeOneToOne();      break;case GeometricManager.MANY_TO_MANY:    p=mergeManyToMany();  break;}}if (p != null) {if (i == GeometricManager.ONE_TO_ONE) {if (checkRedundancy(GeometricManager.MANY_TO_MANY,p)) continue;filterOutDuplicates(GeometricManager.MANY_TO_MANY,p);}p.next=header[GeometricManager.MANY_TO_MANY];header[GeometricManager.MANY_TO_MANY]=p;size[GeometricManager.MANY_TO_MANY]++;}}}  }
class C{  public GroupsGetRequestsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public boolean forEachEntry(TShortObjectProcedure<V> procedure){  byte[] states=_states;  short[] keys=_set;  V[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public IntIterator rowsSortedBy(String field,boolean ascend){  Class type=getColumnType(field);  Index index=getIndex(field,type,true);  int t=ascend ? Index.TYPE_ASCENDING : Index.TYPE_DESCENDING;  return index.allRows(t);}  }
class C{  @Override public void stop(Runnable callback){  stop();  callback.run();}  }
class C{  public PagesSaveAccessQuery(VkApiClient client,UserActor actor,int pageId){  super(client,"pages.saveAccess",Integer.class);  accessToken(actor.getAccessToken());  pageId(pageId);}  }
class C{  public Bundler putDoubleArray(String key,double[] value){  bundle.putDoubleArray(key,value);  return this;}  }
class C{  public static boolean between(float value,float start,float end){  if (start > end) {    float tmp=start;    start=end;    end=tmp;  }  return value >= start && value <= end;}  }
class C{  public static int rgb(String hex){  int color=(int)Long.parseLong(hex.replace("#",""),16);  int r=(color >> 16) & 0xFF;  int g=(color >> 8) & 0xFF;  int b=(color >> 0) & 0xFF;  return Color.rgb(r,g,b);}  }
class C{  public Bundler putBundle(String key,Bundle value){  bundle.putBundle(key,value);  return this;}  }
class C{  public SpaceTypeDescriptorBuilder(String typeName){  this(typeName,null);}  }
class C{  public static final Polygon flipAlongTheXAxis(Polygon polygon,Vector2 point){  return Geometry.flip(polygon,Vector2.X_AXIS,point);}  }
class C{  static public String formatBytes(long bytes){  double val=0;  String units="";  if (bytes < 1024) {    val=bytes;    units="bytes";  } else   if (bytes < 1048576) {    val=(bytes / 1024.0f);    units="KB";  } else   if (bytes < 1073741824) {    val=(bytes / 1048576.0f);    units="MB";  } else {    val=(bytes / 1073741824.0f);    units="GB";  }  DecimalFormat df=new DecimalFormat("###.##");  return df.format(val) + " " + units;}  }
class C{  public void dismissLoFiBar(){  if (mSnackbarManager.isShowing())   mSnackbarManager.dismissSnackbars(this);}  }
class C{  public FieldsetConfig(ConfigurationEntry entry,DialogFieldMap dialogFieldMap){  String[] types=entry.getType().split("#");  String[] labels=entry.getLabel().split("#");  assertCorrectLength(types,labels,entry);  this.fieldValue=entry.getValue();  this.fieldType=dialogFieldMap.getField(types[1]);  this.fieldLabel=labels[1];  this.fieldsetLabel=labels[0];}  }
class C{  private Bundle updateAppSecretProof(){  if (configuration.useAppsecretProof()) {    if (mBundle == null) {      mBundle=new Bundle();    }    mBundle.putString("appsecret_proof",Utils.encode(configuration.getAppSecret(),sessionManager.getAccessToken().getToken()));  }  return mBundle;}  }
class C{  private double solve(double min,double max,double fMin,double fMax) throws MathIllegalStateException {  final double relativeAccuracy=getRelativeAccuracy();  final double absoluteAccuracy=getAbsoluteAccuracy();  final double functionValueAccuracy=getFunctionValueAccuracy();  double x0=min;  double y0=fMin;  double x2=max;  double y2=fMax;  double x1=0.5 * (x0 + x2);  double y1=computeObjectiveValue(x1);  double oldx=Double.POSITIVE_INFINITY;  while (true) {    final double d01=(y1 - y0) / (x1 - x0);    final double d12=(y2 - y1) / (x2 - x1);    final double d012=(d12 - d01) / (x2 - x0);    final double c1=d01 + (x1 - x0) * d012;    final double delta=c1 * c1 - 4 * y1 * d012;    final double xplus=x1 + (-2.0 * y1) / (c1 + FastMath.sqrt(delta));    final double xminus=x1 + (-2.0 * y1) / (c1 - FastMath.sqrt(delta));    final double x=isSequence(x0,xplus,x2) ? xplus : xminus;    final double y=computeObjectiveValue(x);    final double tolerance=FastMath.max(relativeAccuracy * FastMath.abs(x),absoluteAccuracy);    if (FastMath.abs(x - oldx) <= tolerance || FastMath.abs(y) <= functionValueAccuracy) {      return x;    }    boolean bisect=(x < x1 && (x1 - x0) > 0.95 * (x2 - x0)) || (x > x1 && (x2 - x1) > 0.95 * (x2 - x0)) || (x == x1);    if (!bisect) {      x0=x < x1 ? x0 : x1;      y0=x < x1 ? y0 : y1;      x2=x > x1 ? x2 : x1;      y2=x > x1 ? y2 : y1;      x1=x;      y1=y;      oldx=x;    } else {      double xm=0.5 * (x0 + x2);      double ym=computeObjectiveValue(xm);      if (FastMath.signum(y0) + FastMath.signum(ym) == 0.0) {        x2=xm;        y2=ym;      } else {        x0=xm;        y0=ym;      }      x1=0.5 * (x0 + x2);      y1=computeObjectiveValue(x1);      oldx=Double.POSITIVE_INFINITY;    }  }}  }
class C{  protected RemoteResourceStatus(byte[] bytes) throws SVNException {  super();  StatusFromBytesStream in=new StatusFromBytesStream(bytes);  initFromBytes(in);}  }
class C{  @Override public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augmentations) throws XNIException {}  }
class C{  protected void handleListenerSetupFailure(Throwable ex,boolean alreadyRecovered){  if (ex instanceof Exception) {    invokeExceptionListener((Exception)ex);  }  if (alreadyRecovered) {    logger.debug(message("Setup of event listener invoker failed - already recovered by other invoker"),ex);  } else {    logger.error(message("Setup of event listener invoker failed - trying to recover"),ex);  }}  }
class C{  public UsersReportQuery report(UserActor actor,int userId,UsersReportType type){  return new UsersReportQuery(getClient(),actor,userId,type);}  }
class C{  public void testWriteReadFull() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(replicationPolicyDesc);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  ReplicationPolicyDescription copy=(ReplicationPolicyDescription)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(replicationPolicyDesc,copy));}  }
class C{  public UnknownDependencyException(final Throwable throwable,final String message){  super(message,throwable);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeTypeBoostSkillLevel_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200693,skillcaster,skillname);}  }
class C{  public synchronized boolean removeFunction(D sourceVal,N target,D targetVal){  assert sourceVal != null;  assert target != null;  assert targetVal != null;  Map<D,EdgeFunction<L>> sourceValToFunc=nonEmptyReverseLookup.get(target,targetVal);  if (sourceValToFunc == null)   return false;  if (sourceValToFunc.remove(sourceVal) == null)   return false;  if (sourceValToFunc.isEmpty())   nonEmptyReverseLookup.remove(targetVal,targetVal);  Map<D,EdgeFunction<L>> targetValToFunc=nonEmptyForwardLookup.get(sourceVal,target);  if (targetValToFunc == null)   return false;  if (targetValToFunc.remove(targetVal) == null)   return false;  if (targetValToFunc.isEmpty())   nonEmptyForwardLookup.remove(sourceVal,target);  Table<D,D,EdgeFunction<L>> table=nonEmptyLookupByTargetNode.get(target);  if (table == null)   return false;  if (table.remove(sourceVal,targetVal) == null)   return false;  if (table.isEmpty())   nonEmptyLookupByTargetNode.remove(target);  return true;}  }
class C{  public boolean absolute(int rowNum) throws GenericEntityException {  if (closed)   throw new GenericResultSetClosedException("This EntityListIterator has been closed, this operation cannot be performed");  try {    if (rowNum == 0) {      resultSet.beforeFirst();      return true;    } else {      return resultSet.absolute(rowNum);    }  } catch (  SQLException e) {    if (!closed) {      this.close();      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GenericEntityException("Error setting the absolute index to " + rowNum,e);  }}  }
class C{  public String nextToken() throws JSONException {  char c;  char q;  StringBuilder sb=new StringBuilder();  do {    c=next();  } while (Character.isWhitespace(c));  if (c == '"' || c == '\'') {    q=c;    for (; ; ) {      c=next();      if (c < ' ') {        throw syntaxError("Unterminated string.");      }      if (c == q) {        return sb.toString();      }      sb.append(c);    }  }  for (; ; ) {    if (c == 0 || Character.isWhitespace(c)) {      return sb.toString();    }    sb.append(c);    c=next();  }}  }
class C{  private boolean produceAtlas(){  try {    if (atlas != null) {      atlas.dispose();      atlas=null;    }    if (!AtlasData.getInstance().atlasCurrent) {      AtlasData.getInstance().writeAtlas();      AtlasData.getInstance().atlasCurrent=true;    }    atlas=AtlasData.getInstance().getAtlas();    for (    DrawableData data : AtlasData.getInstance().getDrawables()) {      String name=data.file.name();      name=DrawableData.proper(name);      Drawable drawable;      if (data.file.name().matches(".*\\.9\\.[a-zA-Z0-9]*$")) {        drawable=new NinePatchDrawable(atlas.createPatch(name));        if (data.tint != null) {          drawable=((NinePatchDrawable)drawable).tint(data.tint);        } else         if (data.tintName != null) {          drawable=((NinePatchDrawable)drawable).tint(JsonData.getInstance().getColorByName(data.tintName).color);        }      } else {        drawable=new SpriteDrawable(atlas.createSprite(name));        if (data.tint != null) {          drawable=((SpriteDrawable)drawable).tint(data.tint);        } else         if (data.tintName != null) {          drawable=((SpriteDrawable)drawable).tint(JsonData.getInstance().getColorByName(data.tintName).color);        }      }      drawablePairs.put(data,drawable);    }    return true;  } catch (  Exception e) {    Gdx.app.error(getClass().getName(),"Error while attempting to generate drawables.",e);    DialogError.showError("Atlas Error...","Error while attempting to generate drawables.\n\nOpen log?");    return false;  }}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  private boolean isNotValidRequestId(String requestId){  return requestId == null || requestId.isEmpty() || requestId.length() > 200 || !VALID_REQUEST_ID.matcher(requestId).matches();}  }
class C{  private void toggleMenuDrawer(){  if (isMenuDrawerOpen()) {    closeMenuDrawer();  } else {    openMenuDrawer();  }}  }
class C{  public static void recordMainEntryPointTime(){  sApplicationStartWallClockMs=System.currentTimeMillis();}  }
class C{  public static JSONObject toJSONObject(java.util.Properties properties) throws JSONException {  JSONObject jo=new JSONObject();  if (properties != null && !properties.isEmpty()) {    Enumeration enumProperties=properties.propertyNames();    while (enumProperties.hasMoreElements()) {      String name=(String)enumProperties.nextElement();      jo.put(name,properties.getProperty(name));    }  }  return jo;}  }
class C{  private UuidFactory(){  throw new AssertionError();}  }
class C{  private static void writeId(JsonGenerator gen,Object data,ResourceInformation resourceInformation) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException, IOException {  ResourceField idField=resourceInformation.getIdField();  Object sourceId=PropertyUtils.getProperty(data,idField.getUnderlyingName());  String strSourceId=resourceInformation.toIdString(sourceId);  gen.writeObjectField(ID_FIELD_NAME,strSourceId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200803,skillcaster,num0,skillname);}  }
class C{  public void add(Predicate p,Object val){  if (m_tail == null) {    m_tail=new IfExpression(p,new ObjectLiteral(val),m_head);    m_head=m_tail;  } else {    IfExpression ie=new IfExpression(p,new ObjectLiteral(val),m_tail.getElseExpression());    m_tail.setElseExpression(ie);    m_tail=ie;  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public ProperFractionFormat(){  this(getDefaultNumberFormat());}  }
class C{  public void writeOp(LogRecord record) throws IOException {  record.writeToStream(buf);}  }
class C{  public boolean isHorizontalGuideline(){  if (mConstraintWidget instanceof Guideline) {    Guideline g=(Guideline)mConstraintWidget;    return g.getOrientation() == Guideline.HORIZONTAL;  }  return false;}  }
class C{  public boolean isReversed(){  return reversed;}  }
class C{  private static int transformClassAccessForInstantRun(int access){  AccessRight accessRight=AccessRight.fromNodeAccess(access);  return accessRight == AccessRight.PACKAGE_PRIVATE ? access | Opcodes.ACC_PUBLIC : access;}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapPermitAnswer && getId().equals(((AirMapPermitAnswer)o).getId());}  }
class C{  private void clearForceAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.body.clearForce.warning"),body.getName()),Messages.getString("menu.context.body.clearForce.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          body.clearAccumulatedForce();        }      }    }  }}  }
class C{  public void put(int ii1,int ii2,int jj[],Zmat A){  dirty=true;  int nrow=ii2 - ii1 + 1;  int ncol=jj.length;  for (int i=0; i < nrow; i++)   for (int j=0; j < ncol; j++) {    re[i + ii1 - basex][jj[j] - basex]=A.re[i][j];    im[i + ii1 - basex][jj[j] - basex]=A.im[i][j];  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Thread currentThread()")) {    java_lang_Thread_currentThread(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public static Map<String,Object> findProductById(DispatchContext ctx,Map<String,Object> context){  Delegator delegator=ctx.getDelegator();  String idToFind=(String)context.get("idToFind");  String goodIdentificationTypeId=(String)context.get("goodIdentificationTypeId");  String searchProductFirstContext=(String)context.get("searchProductFirst");  String searchAllIdContext=(String)context.get("searchAllId");  boolean searchProductFirst=UtilValidate.isNotEmpty(searchProductFirstContext) && "N".equals(searchProductFirstContext) ? false : true;  boolean searchAllId=UtilValidate.isNotEmpty(searchAllIdContext) && "Y".equals(searchAllIdContext) ? true : false;  GenericValue product=null;  List<GenericValue> productsFound=null;  try {    productsFound=ProductWorker.findProductsById(delegator,idToFind,goodIdentificationTypeId,searchProductFirst,searchAllId);  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  if (UtilValidate.isNotEmpty(productsFound)) {    product=EntityUtil.getFirst(productsFound);    productsFound.remove(0);  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("product",product);  result.put("productsList",productsFound);  return result;}  }
class C{  public boolean containsAll(int[] array){  for (int i=array.length; i-- > 0; ) {    if (!contains(array[i])) {      return false;    }  }  return true;}  }
class C{  public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  private DensityUtil(){  throw new UnsupportedOperationException("cannot be instantiated");}  }
class C{  public Sequence(final long initialValue){  UNSAFE.putOrderedLong(this,VALUE_OFFSET,initialValue);}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  @NotNull public DeletePersonFaceAction deletePersonFace(@NotNull String personGroupId,String personId,String persistedFaceId){  Validation.validate(personGroupId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("personGroupId","Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  return new DeletePersonFaceAction(cognitiveContext,personGroupId,personId,persistedFaceId);}  }
class C{  public static int[] calculateIndexesInDuplicateArray(int[] originalUserPages){  int[] result=new int[originalUserPages.length];  if (originalUserPages.length == 0) {    return result;  }  int index=0;  result[0]=index;  for (int i=1; i < originalUserPages.length; i++) {    if (originalUserPages[i] != originalUserPages[i - 1]) {      index++;    }    result[i]=index;  }  return result;}  }
class C{  public StaticScript metaArguments(Object... metaArguments){  this.metaArguments=metaArguments;  return this;}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  public MessagesGetLongPollHistoryQuery(VkApiClient client,Actor actor){  super(client,"messages.getLongPollHistory",GetLongPollHistoryResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  private boolean shouldAuthenticate(String username,String password){  if (username == null && password != null) {    throw new EmailConnectionException(PASSWORD_NO_USERNAME_ERROR);  }  if (username != null && password == null) {    throw new EmailConnectionException(USERNAME_NO_PASSWORD_ERROR);  }  return username != null;}  }
class C{  public PhoneDurationsImpl(URL url) throws IOException {  BufferedReader reader;  String line;  phoneDurations=new HashMap();  reader=new BufferedReader(new InputStreamReader(url.openStream()));  line=reader.readLine();  while (line != null) {    if (!line.startsWith("***")) {      parseAndAdd(line);    }    line=reader.readLine();  }  reader.close();}  }
class C{  @Override public boolean isDataSource(){  return false;}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  public void addPages(){  mainPage=new MoveRemoteResourceWizardMainPage("newRemoteFolderPage1",Policy.bind("MoveRemoteFolderWizard.heading"),SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_FOLDER));  mainPage.setRemoteResource(selection);  addPage(mainPage);  String pageTitle=Policy.bind("CommentCommitWizardPage.pageTitle");  String pageDescription=Policy.bind("CommentCommitWizardPage.pageDescription");  ImageDescriptor image=SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_FOLDER);  commitCommentPage=new CommentCommitWizardPage(parentDialog,pageTitle,pageTitle,image,pageDescription);  addPage(commitCommentPage);}  }
class C{  public void stopDeceleration(){  mDecelerationAngularVelocity=0.f;}  }
class C{  public static String encodeECC200(String codewords,SymbolInfo symbolInfo){  if (codewords.length() != symbolInfo.getDataCapacity()) {    throw new IllegalArgumentException("The number of codewords does not match the selected symbol");  }  StringBuilder sb=new StringBuilder(symbolInfo.getDataCapacity() + symbolInfo.getErrorCodewords());  sb.append(codewords);  int blockCount=symbolInfo.getInterleavedBlockCount();  if (blockCount == 1) {    String ecc=createECCBlock(codewords,symbolInfo.getErrorCodewords());    sb.append(ecc);  } else {    sb.setLength(sb.capacity());    int[] dataSizes=new int[blockCount];    int[] errorSizes=new int[blockCount];    int[] startPos=new int[blockCount];    for (int i=0; i < blockCount; i++) {      dataSizes[i]=symbolInfo.getDataLengthForInterleavedBlock(i + 1);      errorSizes[i]=symbolInfo.getErrorLengthForInterleavedBlock(i + 1);      startPos[i]=0;      if (i > 0) {        startPos[i]=startPos[i - 1] + dataSizes[i];      }    }    for (int block=0; block < blockCount; block++) {      StringBuilder temp=new StringBuilder(dataSizes[block]);      for (int d=block; d < symbolInfo.getDataCapacity(); d+=blockCount) {        temp.append(codewords.charAt(d));      }      String ecc=createECCBlock(temp.toString(),errorSizes[block]);      int pos=0;      for (int e=block; e < errorSizes[block] * blockCount; e+=blockCount) {        sb.setCharAt(symbolInfo.getDataCapacity() + e,ecc.charAt(pos++));      }    }  }  return sb.toString();}  }
class C{  public <X extends DataSource>void registerPropertiesProvider(PropertiesProvider<X> provider,Class<X> scope){  providers.put(provider,scope);}  }
class C{  static Map<Integer,Integer> computeInputMapFromLeaves(Director dir,boolean useInternal,boolean useUnassigned){  Map<Integer,Integer> map=new TreeMap<>();  PhyloTree tree=dir.getMainViewer().getTree();  for (Node v=tree.getFirstNode(); v != null; v=v.getNext()) {    if (useInternal || v.getDegree() == 1) {      Integer taxId=(Integer)v.getInfo();      if (taxId != null && (useUnassigned || !(taxId.equals(IdMapper.NOHITS_ID) || taxId.equals(IdMapper.UNASSIGNED_ID) || taxId.equals(IdMapper.LOW_COMPLEXITY_ID)))) {        int count=((NodeData)v.getData()).getCountSummarized();        map.put(taxId,count);      }    }  }  return map;}  }
class C{  @Override protected boolean shouldGenerateIdAsFallback(){  return true;}  }
class C{  public boolean hasSelectedSubTree(){  boolean foundASelectedRoot=false;  if (treeView.getNumberSelectedNodes() > 1) {    for (    Node v : treeView.getSelectedNodes()) {      if (v.getInDegree() == 0 || !treeView.getSelected(v.getFirstInEdge().getSource())) {        if (foundASelectedRoot)         return false; else         foundASelectedRoot=true;      }    }  }  return foundASelectedRoot;}  }
class C{  static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| NULL.equals(object)) {      return object;    }    if (object instanceof Collection) {      return new JSONArray((Collection)object);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      return new JSONObject((Map)object);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=(objectPackage != null ? objectPackage.getName() : "");    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  public Predicate pred(){  return pred;}  }
class C{  public boolean start(OutputStream os){  if (os == null)   return false;  boolean ok=true;  closeStream=false;  out=os;  try {    writeString("GIF89a");  } catch (  IOException e) {    ok=false;  }  return started=ok;}  }
class C{  private static void closeKey(Integer keyHandle){  if (keyHandle == null)   return;  Integer result=invokeRegistryMethod(_closeKeyMethod,keyHandle);  if (result != ERROR_SUCCESS)   throw new WindowsRegistryException("Error. Code=" + result);}  }
class C{  public boolean isHidden(){  return myHidden;}  }
class C{  public QRDecomposition(Matrix A){  QR=A.getArrayCopy();  m=A.getRowDimension();  n=A.getColumnDimension();  Rdiag=new double[n];  for (int k=0; k < n; k++) {    double nrm=0;    for (int i=k; i < m; i++) {      nrm=Maths.hypot(nrm,QR[i][k]);    }    if (nrm != 0.0) {      if (QR[k][k] < 0) {        nrm=-nrm;      }      for (int i=k; i < m; i++) {        QR[i][k]/=nrm;      }      QR[k][k]+=1.0;      for (int j=k + 1; j < n; j++) {        double s=0.0;        for (int i=k; i < m; i++) {          s+=QR[i][k] * QR[i][j];        }        s=-s / QR[k][k];        for (int i=k; i < m; i++) {          QR[i][j]+=s * QR[i][k];        }      }    }    Rdiag[k]=-nrm;  }}  }
class C{  private static String locate(File baseDir,String fileName){  if (baseDir == null)   throw new IllegalArgumentException("baseDir is null");  if (fileName == null)   throw new IllegalArgumentException("subDirName is null");  String foundFile=null;  File[] files=BootIOUtils.listFiles(baseDir);  List<File> dirList=new ArrayList<File>();  for (  File file1 : files) {    if (file1.getName().equals(fileName)) {      try {        foundFile=file1.getCanonicalPath();      } catch (      IOException e) {        e.printStackTrace();      }      break;    } else {      if (file1.isDirectory() && file1.canRead())       dirList.add(file1);    }  }  if (foundFile == null) {    File[] dirs=dirList.toArray(new File[dirList.size()]);    for (    File dir : dirs) {      String file=locate(dir,fileName);      if (file != null) {        foundFile=file;        break;      }    }  }  return (foundFile);}  }
class C{  R compareTo(Version v1){  try {    for (int i=0; i < ss.length; i++) {      int i1=X.toInt(ss[i]);      int i2=v1.ss.length > i ? X.toInt(v1.ss[i]) : 0;      if (i1 > i2) {        return R.HIGH;      } else       if (i1 < i2) {        return R.LOW;      } else       if (v1.ss.length == i) {        return R.HIGH;      }    }    return R.LOW;  } catch (  Exception e) {    log.error("this=" + this + ", v1="+ v1,e);  }  return R.DIFF;}  }
class C{  public SiteAdminPage open(String nodePath){  webDriver.get(authorDomain + WCM_PATH + "#"+ nodePath);  String wcmTitle=getWcmTitle();  if (StringUtils.isNotBlank(nodePath)) {    bobcatWait.withTimeout(Timeouts.BIG).until(not(titleIs(wcmTitle)));  } else {    bobcatWait.withTimeout(Timeouts.BIG).until(titleIs(wcmTitle));  }  grid.getActionBar().waitToBeDisplayed();  grid.waitForLoaderNotPresent();  return this;}  }
class C{  private static ScoutWidget[] removeGuidelines(ScoutWidget[] list){  ArrayList<ScoutWidget> al=new ArrayList<>();  for (  ScoutWidget aList : list) {    if (aList.mConstraintWidget instanceof Guideline) {      continue;    }    al.add(aList);  }  return al.toArray(new ScoutWidget[al.size()]);}  }
class C{  public static Map<String,Object> deletePartyContactMechPurpose(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_DELETE");  if (result.size() > 0)   return result;  String contactMechId=(String)context.get("contactMechId");  String contactMechPurposeTypeId=(String)context.get("contactMechPurposeTypeId");  Timestamp fromDate=(Timestamp)context.get("fromDate");  GenericValue pcmp=null;  try {    pcmp=EntityQuery.use(delegator).from("PartyContactMechPurpose").where("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",fromDate).queryOne();    if (pcmp == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_purpose_from_contact_mechanism_not_found",locale));    }  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_purpose_from_contact_mechanism_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  pcmp.set("thruDate",UtilDateTime.nowTimestamp());  try {    pcmp.store();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_purpose_from_contact_mechanism_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"PartyContactMechanismSuccessfullyDeleted",locale));  return result;}  }
class C{  public static String exactly(long l){  return new HumanTime(l).getExactly();}  }
class C{  public EnumeratedRealDistribution(final double[] data){  super();  final Map<Double,Integer> dataMap=new HashMap<>();  for (  double value : data) {    Integer count=dataMap.get(value);    if (count == null) {      count=0;    }    dataMap.put(value,++count);  }  final int massPoints=dataMap.size();  final double denom=data.length;  final double[] values=new double[massPoints];  final double[] probabilities=new double[massPoints];  int index=0;  for (  Entry<Double,Integer> entry : dataMap.entrySet()) {    values[index]=entry.getKey();    probabilities[index]=entry.getValue().intValue() / denom;    index++;  }  innerDistribution=new EnumeratedDistribution<Double>(createDistribution(values,probabilities));}  }
class C{  public boolean has(String key){  LazyNode child=root.child;  while (child != null) {    if (keyMatch(key,child)) {      return true;    }    child=child.next;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_OTHER_HOSTILE(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1250222,skilltarget,skillcaster);}  }
class C{  public static AccessToken createAccessToken(){  return new AccessToken();}  }
class C{  public static Page createPage(){  return new Page(Constants.DEFAULT_PREFIX_PAGE + internalId++,true);}  }
class C{  public MarketCreateCommentQuery replyToComment(Integer value){  return unsafeParam("reply_to_comment",value);}  }
class C{  @Override public void format(Buffer buf){  int pos=0;  setVal(buf,pos,Constant.defaultInstance(INTEGER));  int flagSize=Page.maxSize(BIGINT);  pos+=Page.maxSize(INTEGER);  for (int i=0; i < flags.length; i++) {    setVal(buf,pos,new BigIntConstant(flags[i]));    pos+=flagSize;  }  int slotSize=BTreePage.slotSize(sch);  for (int p=pos; p + slotSize <= Buffer.BUFFER_SIZE; p+=slotSize)   makeDefaultRecord(buf,p);}  }
class C{  public DataSourceDescriptor createModelFor(DataSource ds){  return new DefaultDataSourceDescriptor(ds);}  }
class C{  public NotSetPositionException(Throwable cause){  super(cause);}  }
class C{  @Provides @Singleton Optional<LongPollingExecutorServices> provideLongPollingExecutorServices(DatabusConfiguration databusConfiguration){  int numPollingThreads=databusConfiguration.getLongPollPollingThreadCount().or(DatabusResourcePoller.DEFAULT_NUM_POLLING_THREADS);  if (numPollingThreads == 0) {    return Optional.absent();  }  ScheduledExecutorService pollerService=_environment.lifecycle().scheduledExecutorService("databus-poll-poller-%d").threads(numPollingThreads).build();  numPollingThreads=databusConfiguration.getLongPollKeepAliveThreadCount().or(DatabusResourcePoller.DEFAULT_NUM_KEEP_ALIVE_THREADS);  ScheduledExecutorService keepAliveService=_environment.lifecycle().scheduledExecutorService("databus-poll-keepAlive-%d").threads(numPollingThreads).build();  return Optional.of(new LongPollingExecutorServices(pollerService,keepAliveService));}  }
class C{  public boolean commit(){  if (mIsSuccess) {    mDatabase.setTransactionSuccessful();    mDatabase.endTransaction();  }  boolean isRealSuccess=mIsSuccess;  mIsSuccess=false;  return isRealSuccess;}  }
class C{  public void start(String name){  getTimer(name).start();}  }
class C{  public static final void changeGroupRules(PlayerAlliance alliance,LootGroupRules lootRules){  alliance.onEvent(new ChangeAllianceLootRulesEvent(alliance,lootRules));}  }
class C{  @Override public boolean scanData(String delimiter,XMLStringBuffer buffer) throws IOException {  boolean done=false;  int delimLen=delimiter.length();  char charAt0=delimiter.charAt(0);  boolean external=fCurrentEntity.isExternal();  do {    if (fCurrentEntity.position == fCurrentEntity.count) {      load(0,true);    }    boolean bNextEntity=false;    while ((fCurrentEntity.position >= fCurrentEntity.count - delimLen) && (!bNextEntity)) {      System.arraycopy(fCurrentEntity.ch,fCurrentEntity.position,fCurrentEntity.ch,0,fCurrentEntity.count - fCurrentEntity.position);      bNextEntity=load(fCurrentEntity.count - fCurrentEntity.position,false);      fCurrentEntity.position=0;      fCurrentEntity.startPosition=0;    }    if (fCurrentEntity.position >= fCurrentEntity.count - delimLen) {      int length=fCurrentEntity.count - fCurrentEntity.position;      buffer.append(fCurrentEntity.ch,fCurrentEntity.position,length);      fCurrentEntity.columnNumber+=fCurrentEntity.count;      fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);      fCurrentEntity.position=fCurrentEntity.count;      fCurrentEntity.startPosition=fCurrentEntity.count;      load(0,true);      return false;    }    int offset=fCurrentEntity.position;    int c=fCurrentEntity.ch[offset];    int newlines=0;    if (c == '\n' || ((c == '\r' || c == 0x85 || c == 0x2028) && external)) {      do {        c=fCurrentEntity.ch[fCurrentEntity.position++];        if ((c == '\r') && external) {          newlines++;          fCurrentEntity.lineNumber++;          fCurrentEntity.columnNumber=1;          if (fCurrentEntity.position == fCurrentEntity.count) {            offset=0;            fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);            fCurrentEntity.position=newlines;            fCurrentEntity.startPosition=newlines;            if (load(newlines,false)) {              break;            }          }          int cc=fCurrentEntity.ch[fCurrentEntity.position];          if (cc == '\n' || cc == 0x85) {            fCurrentEntity.position++;            offset++;          } else {            newlines++;          }        } else         if (c == '\n' || ((c == 0x85 || c == 0x2028) && external)) {          newlines++;          fCurrentEntity.lineNumber++;          fCurrentEntity.columnNumber=1;          if (fCurrentEntity.position == fCurrentEntity.count) {            offset=0;            fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);            fCurrentEntity.position=newlines;            fCurrentEntity.startPosition=newlines;            fCurrentEntity.count=newlines;            if (load(newlines,false)) {              break;            }          }        } else {          fCurrentEntity.position--;          break;        }      } while (fCurrentEntity.position < fCurrentEntity.count - 1);      for (int i=offset; i < fCurrentEntity.position; i++) {        fCurrentEntity.ch[i]='\n';      }      int length=fCurrentEntity.position - offset;      if (fCurrentEntity.position == fCurrentEntity.count - 1) {        buffer.append(fCurrentEntity.ch,offset,length);        return true;      }    }    if (external) {      OUTER:       while (fCurrentEntity.position < fCurrentEntity.count) {        c=fCurrentEntity.ch[fCurrentEntity.position++];        if (c == charAt0) {          int delimOffset=fCurrentEntity.position - 1;          for (int i=1; i < delimLen; i++) {            if (fCurrentEntity.position == fCurrentEntity.count) {              fCurrentEntity.position-=i;              break OUTER;            }            c=fCurrentEntity.ch[fCurrentEntity.position++];            if (delimiter.charAt(i) != c) {              fCurrentEntity.position--;              break;            }          }          if (fCurrentEntity.position == delimOffset + delimLen) {            done=true;            break;          }        } else         if (c == '\n' || c == '\r' || c == 0x85 || c == 0x2028) {          fCurrentEntity.position--;          break;        } else         if (!XML11Char.isXML11ValidLiteral(c)) {          fCurrentEntity.position--;          int length=fCurrentEntity.position - offset;          fCurrentEntity.columnNumber+=length - newlines;          buffer.append(fCurrentEntity.ch,offset,length);          return true;        }      }    } else {      OUTER:       while (fCurrentEntity.position < fCurrentEntity.count) {        c=fCurrentEntity.ch[fCurrentEntity.position++];        if (c == charAt0) {          int delimOffset=fCurrentEntity.position - 1;          for (int i=1; i < delimLen; i++) {            if (fCurrentEntity.position == fCurrentEntity.count) {              fCurrentEntity.position-=i;              break OUTER;            }            c=fCurrentEntity.ch[fCurrentEntity.position++];            if (delimiter.charAt(i) != c) {              fCurrentEntity.position--;              break;            }          }          if (fCurrentEntity.position == delimOffset + delimLen) {            done=true;            break;          }        } else         if (c == '\n') {          fCurrentEntity.position--;          break;        } else         if (!XML11Char.isXML11Valid(c)) {          fCurrentEntity.position--;          int length=fCurrentEntity.position - offset;          fCurrentEntity.columnNumber+=length - newlines;          buffer.append(fCurrentEntity.ch,offset,length);          return true;        }      }    }    int length=fCurrentEntity.position - offset;    fCurrentEntity.columnNumber+=length - newlines;    if (done) {      length-=delimLen;    }    buffer.append(fCurrentEntity.ch,offset,length);  } while (!done);  return !done;}  }
class C{  public static File toFile(URL url){  if (url == null || !"file".equalsIgnoreCase(url.getProtocol())) {    return null;  } else {    String filename=url.getFile().replace('/',File.separatorChar);    filename=decodeUrl(filename);    return new File(filename);  }}  }
class C{  public boolean catchableOnlyAs(ThrowableSet set,List<RefType> members){  boolean result=true;  for (  RefType member : members) {    result=result && (set.catchableAs(member));  }  for (  RefType e : ALL_TEST_THROWABLES) {    if (!members.contains(e)) {      result=result && (!set.catchableAs(e));    }  }  return result;}  }
class C{  public double value() throws ConcurrentModificationException, NoSuchElementException {  if (referenceCount != count) {    throw new ConcurrentModificationException();  }  if (current < 0) {    throw new NoSuchElementException();  }  return values[current];}  }
class C{  public QueryString remove(String... k){  for (  String s1 : k) {    query.remove(s1);    q=null;  }  return this;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  public NewsfeedSearchQueryWithExtended searchExtended(){  return new NewsfeedSearchQueryWithExtended(getClient());}  }
class C{  private Set<Aggregation> convertSketchesToSketchMerges(Set<Aggregation> originalAggregations){  Set<Aggregation> result=new LinkedHashSet<>();  for (  Aggregation agg : originalAggregations) {    if (agg.isSketch()) {      result.add(FieldConverterSupplier.sketchConverter.asInnerSketch((SketchAggregation)agg));    } else {      result.add(agg);    }  }  return result;}  }
class C{  public VisibleObject findVisibleObject(int objectId){  return allObjects.get(objectId);}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  @Before public void beforeTest(){  pokemon=mock(PokemonModel.class);  operation=spy(TransferOperation.class);  operation.pokemon=pokemon;}  }
class C{  public final int computeHashCode(int val){  return HashFunctions.hash(val);}  }
class C{  public int convert(String value){  if (Strings.isNullOrEmpty(value) || TypeUtils.MISSING_INDICATORS.contains(value) || value.equals("-1")) {    return (int)ColumnType.LOCAL_TIME.getMissingValue();  }  value=Strings.padStart(value,4,'0');  if (selectedFormatter == null) {    selectedFormatter=TypeUtils.getTimeFormatter(value);  }  LocalTime time;  try {    time=LocalTime.parse(value,selectedFormatter);  } catch (  DateTimeParseException e) {    selectedFormatter=TypeUtils.TIME_FORMATTER;    time=LocalTime.parse(value,selectedFormatter);  }  return PackedLocalTime.pack(time);}  }
class C{  public TextPosition(String textString,Point position){  super();  this.textString=textString;  this.position=position;}  }
class C{  public MonsterWeaknessCursor queryWeaknessFromMonster(long id){  return mHelper.queryWeaknessFromMonster(id);}  }
class C{  public static boolean isFreeName(String name){  return !DAOManager.getDAO(PlayerDAO.class).isNameUsed(name);}  }
class C{  @Override public Output apply(Input input){  if (input == null)   return fn_.apply(input);  return match_(input).orElseGet(null).getOutput();}  }
class C{  public static int hash32(final byte[] data,int length,int seed){  final int m=0x5bd1e995;  final int r=24;  int h=seed ^ length;  int length4=length / 4;  for (int i=0; i < length4; i++) {    final int i4=i * 4;    int k=(data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16)+ ((data[i4 + 3] & 0xff) << 24);    k*=m;    k^=k >>> r;    k*=m;    h*=m;    h^=k;  }switch (length % 4) {case 3:    h^=(data[(length & ~3) + 2] & 0xff) << 16;case 2:  h^=(data[(length & ~3) + 1] & 0xff) << 8;case 1:h^=(data[length & ~3] & 0xff);h*=m;}h^=h >>> 13;h*=m;h^=h >>> 15;return h;}  }
class C{  private static void writeConfigFile(String relativePath,String templateContent,Map<String,String> environment) throws IOException {  LOGGER.info("Writing config file: {}",relativePath);  File configFile=new File(relativePath);  Writer writer=null;  if (!configFile.exists()) {    try {      configFile.createNewFile();    } catch (    IOException e) {      throw new IOException(String.format("Can't create config file %s: %s",relativePath,e));    }  }  try {    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(relativePath),"utf-8"));    MustacheFactory mf=new DefaultMustacheFactory();    Mustache mustache=mf.compile(new StringReader(templateContent),"configTemplate");    mustache.execute(writer,environment);    writer.close();  } catch (  IOException e) {    if (writer != null) {      writer.close();    }    throw new IOException(String.format("Can't write to file %s: %s",relativePath,e));  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_YOU_WIN(String value0){  return new SM_SYSTEM_MESSAGE(1300098,value0);}  }
class C{  private boolean isSourceXliff(){  return xliffFilter.getCurrentTargetLocale() == null || xliffFilter.getCurrentTargetLocale().equals(LocaleId.EMPTY) || xliffFilter.getCurrentTargetLocale().equals(sourceLocaleId);}  }
class C{  public int keyAt(int index){  return mKeys[index];}  }
class C{  public static void startTiming(String timePhaseName){  RequestLog current=RLOG.get();  TimedPhase timePhase=current.times.get(timePhaseName);  if (timePhase == null) {    if (current.info == null) {      current.init();    }    timePhase=new TimedPhase(timePhaseName);    current.times.put(timePhaseName,timePhase);  }  current.mostRecentTimer=timePhase;  timePhase.start();}  }
class C{  public PointsToSet reachingObjects(Context c,Local l){  return reachingObjects(l);}  }
class C{  public View(Class<T> type,String sqlExpression,QueryResultType queryResultType,Object... parameters){  super(type,sqlExpression,queryResultType,parameters);}  }
class C{  public static SecretKey generateKey(String algorithm) throws EncodingException {  try {    KeyGenerator kgen=KeyGenerator.getInstance(algorithm);    kgen.init(128);    SecretKey key=kgen.generateKey();    return key;  } catch (  Exception e) {    throw new EncodingException(e);  }}  }
class C{  @Override public int compareTo(PlayerHouseBid o){  return (int)(time.getTime() - o.getTime().getTime());}  }
class C{  private float computeAcceleratingDuration(float targetProgress,float frameTimeSec){  if (targetProgress == 1.0f) {    return frameTimeSec;  } else {    float maxAcceleratingDuration=CONSTANT_1 * mVelocity + (float)Math.sqrt(CONSTANT_2 * (targetProgress - mProgress) + CONSTANT_3 * mVelocity * mVelocity);    return Math.max(0,Math.min(frameTimeSec,maxAcceleratingDuration));  }}  }
class C{  public int contains(ValueStoreBase vsb){  final Vector values=vsb.fValues;  final int size1=values.size();  if (fFieldCount <= 1) {    for (int i=0; i < size1; ++i) {      short val=vsb.getValueTypeAt(i);      if (!valueTypeContains(val) || !fValues.contains(values.elementAt(i))) {        return i;      } else       if (val == XSConstants.LIST_DT || val == XSConstants.LISTOFUNION_DT) {        ShortList list1=vsb.getItemValueTypeAt(i);        if (!itemValueTypeContains(list1)) {          return i;        }      }    }  } else {    final int size2=fValues.size();    OUTER:     for (int i=0; i < size1; i+=fFieldCount) {      INNER:       for (int j=0; j < size2; j+=fFieldCount) {        for (int k=0; k < fFieldCount; ++k) {          final Object value1=values.elementAt(i + k);          final Object value2=fValues.elementAt(j + k);          final short valueType1=vsb.getValueTypeAt(i + k);          final short valueType2=getValueTypeAt(j + k);          if (value1 != value2 && (valueType1 != valueType2 || value1 == null || !value1.equals(value2))) {            continue INNER;          } else           if (valueType1 == XSConstants.LIST_DT || valueType1 == XSConstants.LISTOFUNION_DT) {            ShortList list1=vsb.getItemValueTypeAt(i + k);            ShortList list2=getItemValueTypeAt(j + k);            if (list1 == null || list2 == null || !list1.equals(list2)) {              continue INNER;            }          }        }        continue OUTER;      }      return i;    }  }  return -1;}  }
class C{  public static void filledCircle(double x,double y,double radius){  if (!(radius >= 0))   throw new IllegalArgumentException("radius must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * radius);  double hs=factorY(2 * radius);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public synchronized void initializeClassesRelationStatus(){  if (!shouldInitializeClassesRelationStatus())   return;  ClassMetaData[] cms=getConfiguration().getMetaDataRepositoryInstance().getMetaDatas();  for (  ClassMetaData cm : cms) {    if (!_processedClasses.contains(cm.getDescribedType())) {      for (      FieldMetaData fmd : cm.getFields()) {        if (fmd.getAssociationType() == FieldMetaData.ONE_TO_ONE) {          if (!_classesRelationStatus.containsKey(fmd.getDeclaredType())) {            _classesRelationStatus.put(fmd.getDeclaredType(),FieldMetaData.ONE_TO_ONE);          }        } else         if (fmd.getAssociationType() == FieldMetaData.ONE_TO_MANY) {          if (!_classesRelationStatus.containsKey(fmd.getDeclaredType())) {            _classesRelationStatus.put(fmd.getElement().getDeclaredType(),FieldMetaData.ONE_TO_MANY);          }        } else         if (fmd.getAssociationType() == FieldMetaData.MANY_TO_MANY) {          throw new IllegalArgumentException("Many-to-many is not supported.");        }      }      validateClassAnnotations(cm.getDescribedType());      _processedClasses.add(cm.getDescribedType());    }  }}  }
class C{  public Epilogue(String logMessage,StatusType response,CacheLastObserver<Long> responseLengthObserver){  this.status=response.getReasonPhrase();  this.code=response.getStatusCode();  this.logMessage=logMessage;  this.responseLengthObserver=responseLengthObserver;}  }
class C{  public static boolean checkGeoJsonPointValid(double longitude,double latitude){  try {    return getGeoJsonPoint(longitude,latitude).isValid();  } catch (  Exception ex) {    return false;  }}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public Rotation(RotationOrder order,RotationConvention convention,double alpha1,double alpha2,double alpha3){  Rotation r1=new Rotation(order.getA1(),alpha1,convention);  Rotation r2=new Rotation(order.getA2(),alpha2,convention);  Rotation r3=new Rotation(order.getA3(),alpha3,convention);  Rotation composed=r1.compose(r2.compose(r3,convention),convention);  q0=composed.q0;  q1=composed.q1;  q2=composed.q2;  q3=composed.q3;}  }
class C{  public TextCatalogReader(){}  }
class C{  @Override public List<WebElement> findElementsById(String id){  return ((FindsById)super.getWrappedDriver()).findElementsById(id);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (minStart > maxStart || maxStart > minStop || minStop > maxStop || minStop < 0) {    throw new InvalidObjectException("invalid durations");  }}  }
class C{  private void removeObservedFile(String localPath){  File file=new File(localPath);  String parentPath=file.getParent();  FolderObserver observer=mFolderObserversMap.get(parentPath);  if (observer != null) {    observer.stopWatching(file.getName());    if (observer.isEmpty()) {      mFolderObserversMap.remove(parentPath);      Log_OC.d(TAG,"Observer removed for parent folder " + parentPath + "/");    }  } else {    Log_OC.d(TAG,"No observer to remove for path " + localPath);  }}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if ((table != null) && (undoRedoObject != null)) {    if (undoRedoObject.getOldValue() instanceof ColorMap) {      ColorMap oldValue=(ColorMap)undoRedoObject.getOldValue();      populateField(oldValue);    }  }}  }
class C{  @Override public void populateField(String value){  if (value != null) {    oldValueObj=value;    attributeComboBox.setSelectedItem(value);  } else {    oldValueObj=value;    attributeComboBox.setSelectedIndex(-1);  }}  }
class C{  private void updateCache(final SourceDataTagValueResponse latestValues){  Collection<SourceDataTagValue> updates=latestValues.getAllDataTagValueObjects();  for (  SourceDataTagValue value : updates) {    try {      dataTagFacade.updateFromSource(value.getId(),value);    } catch (    Exception e) {      LOGGER.error("Exception caught while refreshing a Tag with the latest DAQ cache value (id=" + value.getId() + ")",e);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DashATK_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200804,skillcaster,num0,skillname);}  }
class C{  private EmoResponse toEmoResponse(ClientResponse clientResponse){  return new DropWizard6EmoResponse(clientResponse);}  }
class C{  public static Application createApplication(){  return new Application(Constants.DEFAULT_PREFIX_APPLICATION + String.valueOf(internalId++));}  }
class C{  private void ensureCapacity(int length){  int newcount=count + length;  if (newcount > buf.length) {    byte newbuf[]=new byte[Math.max(buf.length + 100,newcount)];    System.arraycopy(buf,0,newbuf,0,count);    buf=newbuf;  }}  }
class C{  public String htmlEncode(String object){  return StringEscapeUtils.escapeHtml4(object);}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  public void clear(){  m_source.clear();  super.clear();}  }
class C{  public long retryTime(){  return reg.getNextTryTime();}  }
class C{  public static DataStoreClientFactory forClusterAndHttpClient(String clusterName,Client client){  return new DataStoreClientFactory(clusterName,client);}  }
class C{  public static BuildersContext createBuildersContext(ClassName type,ClassName generatedType,BuilderLifecycle builderLifecycle){  return new BuildersContext(builderLifecycle,type,generatedType);}  }
class C{  public boolean isAnimating(){  return mAnimation.step();}  }
class C{  public CartPaymentInfo makePaymentInfo(String id,String refNum,String authCode,BigDecimal amount){  CartPaymentInfo inf=new CartPaymentInfo();  inf.refNum[0]=refNum;  inf.refNum[1]=authCode;  inf.amount=amount;  inf.origAmount=amount;  if (!isPaymentMethodType(id)) {    inf.paymentMethodTypeId=this.getPaymentMethodTypeId(id);    inf.paymentMethodId=id;  } else {    inf.paymentMethodTypeId=id;  }  return inf;}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  public Proc(String name,String cpu,int mem){  this.name=name;  this.cpu=X.toInt(cpu);  this.mem=mem;}  }
class C{  @Override public void addObservations(final double[][] x,final double[] y) throws MathIllegalArgumentException {  MathUtils.checkNotNull(x,LocalizedCoreFormats.INPUT_ARRAY);  MathUtils.checkNotNull(y,LocalizedCoreFormats.INPUT_ARRAY);  MathUtils.checkDimension(x.length,y.length);  boolean obsOk=true;  for (int i=0; i < x.length; i++) {    if (x[i] == null || x[i].length == 0) {      obsOk=false;    }  }  if (!obsOk) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS,0,1);  }  for (int i=0; i < x.length; i++) {    addData(x[i][0],y[i]);  }}  }
class C{  public int hashCode(){  int hash=getClass().getName().hashCode();  if (verify) {    hash+=1;  }  if (methodConstraintsSpecified) {    hash+=1 << 16;    if (methodConstraints != null) {      hash+=methodConstraints.hashCode();    }  }  for (int i=permissions.length; --i >= 0; ) {    hash+=permissions[i].hashCode();  }  return hash;}  }
class C{  public static void shuffle(double[] a,int lo,int hi){  if (a == null)   throw new NullPointerException("argument array is null");  if (lo < 0 || lo > hi || hi >= a.length) {    throw new IndexOutOfBoundsException("Illegal subarray range");  }  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    double temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public AudioPlayer(){}  }
class C{  public ClassLoaderObjectInputStream(ClassLoader classLoader,InputStream inputStream) throws IOException, StreamCorruptedException {  super(inputStream);  this.classLoader=classLoader;}  }
class C{  public static void dump(byte[] data,long offset,OutputStream stream,int index) throws IOException, ArrayIndexOutOfBoundsException, IllegalArgumentException {  if (index < 0 || index >= data.length) {    throw new ArrayIndexOutOfBoundsException("illegal index: " + index + " into array of length "+ data.length);  }  if (stream == null) {    throw new IllegalArgumentException("cannot write to nullstream");  }  long display_offset=offset + index;  StringBuilder buffer=new StringBuilder(74);  for (int j=index; j < data.length; j+=16) {    int chars_read=data.length - j;    if (chars_read > 16) {      chars_read=16;    }    dump(buffer,display_offset).append(' ');    for (int k=0; k < 16; k++) {      if (k < chars_read) {        dump(buffer,data[k + j]);      } else {        buffer.append("  ");      }      buffer.append(' ');    }    for (int k=0; k < chars_read; k++) {      if (data[k + j] >= ' ' && data[k + j] < 127) {        buffer.append((char)data[k + j]);      } else {        buffer.append('.');      }    }    buffer.append(EOL);    stream.write(buffer.toString().getBytes());    stream.flush();    buffer.setLength(0);    display_offset+=chars_read;  }}  }
class C{  public DivIconOptions build(){  DivIconOptions options=new DivIconOptions();  options.iconSize=this.iconSize;  options.iconAnchor=this.iconAnchor;  options.popUpAnchor=this.popUpAnchor;  options.className=this.className;  options.html=this.html;  return options;}  }
class C{  private void initializeTokensFromSettings(){  String storedSetting=GoIVSettings.getInstance(context).getClipboardPreference();  Log.d("NahojjjenClippy","ClipboardTokenHandler gets following knowledge of user settings: " + storedSetting);  String[] tokenRepresentationArray=storedSetting.split("\\.");  Log.d("NahojjjenClippy","Size of split Array: " + tokenRepresentationArray.length);  ArrayList<ClipboardToken> exampleTokens=ClipboardTokenCollection.getSamples();  Log.d("NahojjjenClippy","Size of clipboardtokencollection Array: " + exampleTokens.size());  String representation;  for (int i=0; i < tokenRepresentationArray.length; i++) {    representation=tokenRepresentationArray[i];    for (    ClipboardToken tokenExample : exampleTokens) {      String tokenExampleString=tokenExample.getStringRepresentation().substring(1);      if (tokenExampleString.equals(representation)) {        tokens.add(tokenExample);        Log.d("NahojjjenClippy","added " + tokenExample.getClass().getSimpleName() + " to setting");      }    }  }}  }
class C{  public RabbitMqCommand writeErrorOutputTo(OutputStream outputStream){  this.errorOutputStream=outputStream;  return this;}  }
class C{  public void initialise(GeoServerReadProgressInterface parent,GeoServerConnection connection){  this.parentObj=parent;  this.connection=connection;  GeoServerLayer.setDefaultWorkspaceName(DEFAULT_WORKSPACE_NAME);}  }
class C{  public static String generateLooseHashcode(IDexCodeItem ci){  StringBuilder sig=new StringBuilder();  for (  IDalvikInstruction insn : ci.getInstructions()) {    if (insn.getMnemonic().contains("move") || insn.getMnemonic().contains("const")) {      continue;    }    boolean flag=false;    if (insn.getMnemonic().contains("goto")) {      sig.append("goto:");    } else     if (insn.getMnemonic().contains("/")) {      sig.append(insn.getMnemonic().split("/")[0] + ":");      flag=true;    } else {      sig.append(insn.getMnemonic() + ":");    }    for (    IDalvikInstructionParameter param : insn.getParameters()) {      int pt=param.getType();      sig.append(String.format("%d,",pt));    }    if (flag) {      sig.append(String.format("%d,",insn.getParameters()[0].getType()));    }    sig.append(" ");  }  byte[] h;  try {    MessageDigest md=MessageDigest.getInstance("SHA-256");    h=md.digest(sig.toString().getBytes());  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }  sig=null;  return Formatter.byteArrayToHexString(h).toLowerCase();}  }
class C{  public void kickAccount(int accountId){synchronized (this) {    AionConnection client=loggedInAccounts.get(accountId);    if (client != null) {      closeClientWithCheck(client,accountId);    } else {      sendAccountDisconnected(accountId);    }  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private ThrowableSet registerSetIfNew(Set<RefLikeType> include,Set<AnySubType> exclude){  if (INSTRUMENTING) {    registrationCalls++;  }  if (include == null) {    include=Collections.emptySet();  }  if (exclude == null) {    exclude=Collections.emptySet();  }  int size=include.size() + exclude.size();  Integer sizeKey=new Integer(size);  List<ThrowableSet> sizeList=sizeToSets.get(sizeKey);  if (sizeList == null) {    sizeList=new LinkedList<ThrowableSet>();    sizeToSets.put(sizeKey,sizeList);  }  for (  ThrowableSet set : sizeList) {    if (set.exceptionsIncluded.equals(include) && set.exceptionsExcluded.equals(exclude)) {      return set;    }  }  if (INSTRUMENTING) {    registeredSets++;  }  ThrowableSet result=new ThrowableSet(include,exclude);  sizeList.add(result);  return result;}  }
class C{  @Override public void useAntiAliasUpdated(boolean value){  useAntiAlias=value;  renderSymbol();}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public static void attachProductFeaturesToCategory(String productCategoryId,Set<String> productFeatureTypeIdsToInclude,Set<String> productFeatureTypeIdsToExclude,Delegator delegator,boolean doSubCategories,Timestamp nowTimestamp) throws GenericEntityException {  if (nowTimestamp == null) {    nowTimestamp=UtilDateTime.nowTimestamp();  }  List<GenericValue> subCategoryList=EntityQuery.use(delegator).from("ProductCategoryRollup").where("parentProductCategoryId",productCategoryId).queryList();  if (doSubCategories) {    for (    GenericValue productCategoryRollup : subCategoryList) {      attachProductFeaturesToCategory(productCategoryRollup.getString("productCategoryId"),productFeatureTypeIdsToInclude,productFeatureTypeIdsToExclude,delegator,true,nowTimestamp);    }  }  Map<String,Set<String>> productFeatureIdByTypeIdSetMap=FastMap.newInstance();  List<GenericValue> productCategoryMemberList=EntityQuery.use(delegator).from("ProductCategoryMember").where("productCategoryId",productCategoryId).queryList();  for (  GenericValue productCategoryMember : productCategoryMemberList) {    String productId=productCategoryMember.getString("productId");    EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId),EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp),EntityCondition.makeCondition(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp))),EntityOperator.AND);    EntityListIterator productFeatureAndApplEli=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where(condition).queryIterator();    GenericValue productFeatureAndAppl=null;    while ((productFeatureAndAppl=productFeatureAndApplEli.next()) != null) {      String productFeatureId=productFeatureAndAppl.getString("productFeatureId");      String productFeatureTypeId=productFeatureAndAppl.getString("productFeatureTypeId");      if (UtilValidate.isNotEmpty(productFeatureTypeIdsToInclude) && !productFeatureTypeIdsToInclude.contains(productFeatureTypeId)) {        continue;      }      if (productFeatureTypeIdsToExclude != null && productFeatureTypeIdsToExclude.contains(productFeatureTypeId)) {        continue;      }      Set<String> productFeatureIdSet=productFeatureIdByTypeIdSetMap.get(productFeatureTypeId);      if (productFeatureIdSet == null) {        productFeatureIdSet=FastSet.newInstance();        productFeatureIdByTypeIdSetMap.put(productFeatureTypeId,productFeatureIdSet);      }      productFeatureIdSet.add(productFeatureId);    }    productFeatureAndApplEli.close();  }  for (  Map.Entry<String,Set<String>> entry : productFeatureIdByTypeIdSetMap.entrySet()) {    String productFeatureTypeId=entry.getKey();    Set<String> productFeatureIdSet=entry.getValue();    String productFeatureGroupId=productCategoryId + "_" + productFeatureTypeId;    if (productFeatureGroupId.length() > 20) {      Debug.logWarning("Manufactured productFeatureGroupId was greater than 20 characters, means that we had some long productCategoryId and/or productFeatureTypeId values, at the category part should be unique since it is first, so if the feature type isn't unique it just means more than one type of feature will go into the category...",module);      productFeatureGroupId=productFeatureGroupId.substring(0,20);    }    GenericValue productFeatureGroup=EntityQuery.use(delegator).from("ProductFeatureGroup").where("productFeatureGroupId",productFeatureGroupId).queryOne();    if (productFeatureGroup == null) {      String description="Feature Group for type [" + productFeatureTypeId + "] features in category ["+ productCategoryId+ "]";      productFeatureGroup=delegator.makeValue("ProductFeatureGroup",UtilMisc.toMap("productFeatureGroupId",productFeatureGroupId,"description",description));      productFeatureGroup.create();      GenericValue productFeatureCatGrpAppl=delegator.makeValue("ProductFeatureCatGrpAppl",UtilMisc.toMap("productFeatureGroupId",productFeatureGroupId,"productCategoryId",productCategoryId,"fromDate",nowTimestamp));      productFeatureCatGrpAppl.create();    }    for (    String productFeatureId : productFeatureIdSet) {      EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("productFeatureId",EntityOperator.EQUALS,productFeatureId),EntityCondition.makeCondition("productFeatureGroupId",EntityOperator.EQUALS,productFeatureGroupId),EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp),EntityCondition.makeCondition(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp))),EntityOperator.AND);      if (EntityQuery.use(delegator).from("ProductFeatureGroupAppl").where(condition).queryCount() == 0) {        GenericValue productFeatureGroupAppl=delegator.makeValue("ProductFeatureGroupAppl",UtilMisc.toMap("productFeatureGroupId",productFeatureGroupId,"productFeatureId",productFeatureId,"fromDate",nowTimestamp));        productFeatureGroupAppl.create();      }    }  }  for (  GenericValue productCategoryRollup : subCategoryList) {    String subProductCategoryId=productCategoryRollup.getString("productCategoryId");    EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("productCategoryId",EntityOperator.EQUALS,subProductCategoryId),EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp),EntityCondition.makeCondition(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp))),EntityOperator.AND);    EntityListIterator productFeatureCatGrpApplEli=EntityQuery.use(delegator).from("ProductFeatureCatGrpAppl").where(condition).queryIterator();    GenericValue productFeatureCatGrpAppl=null;    while ((productFeatureCatGrpAppl=productFeatureCatGrpApplEli.next()) != null) {      String productFeatureGroupId=productFeatureCatGrpAppl.getString("productFeatureGroupId");      EntityCondition checkCondition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("productCategoryId",EntityOperator.EQUALS,productCategoryId),EntityCondition.makeCondition("productFeatureGroupId",EntityOperator.EQUALS,productFeatureGroupId),EntityCondition.makeCondition("fromDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp),EntityCondition.makeCondition(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("thruDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp))),EntityOperator.AND);      if (EntityQuery.use(delegator).from("ProductFeatureCatGrpAppl").where(checkCondition).queryCount() == 0) {        GenericValue productFeatureGroupAppl=delegator.makeValue("ProductFeatureCatGrpAppl",UtilMisc.toMap("productFeatureGroupId",productFeatureGroupId,"productCategoryId",productCategoryId,"fromDate",nowTimestamp));        productFeatureGroupAppl.create();      }    }    productFeatureCatGrpApplEli.close();  }}  }
class C{  @Override public void updateReport(AllTablesReportDelta delta){  checkNotNull(delta,"delta");  updateMetadata(delta);  if (delta.getTable().isPresent()) {    updateTableData(delta,delta.getTable().get());  }}  }
class C{  private void logThrow(Level level,String logRecordText,String sourceMethodName,Method method,Throwable t){  LogRecord lr=new LogRecord(level,logRecordText + " {0}.{1} throws");  lr.setLoggerName(logger.getName());  lr.setSourceClassName(this.getClass().getName());  lr.setSourceMethodName(sourceMethodName);  lr.setParameters(new Object[]{method.getDeclaringClass().getName(),method.getName()});  lr.setThrown(t);  logger.log(lr);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public JavaCommand(String mainClassName,ClassPath classPath,Map<String,String> systemProp,Argument[] jvmArgs,String... mainArgs){  _jvmArgs=new ArrayList<Argument>();  _systemProp=new LinkedHashMap<String,String>();  _mainArgs=new ArrayList<String>();  _mainClassName=mainClassName;  if (classPath == null) {    _classPath=new ClassPath();    _classPath.inherit();  } else   _classPath=classPath;  _classPath.addEntry(ExecutorUtils.getClassLocation(getClass()));  _mainArgs.addAll(ExecutorUtils.asList(mainArgs));  String parentProcessUID=System.getProperty(JavaCommand.PARENT_PROCESS_UID,UUID.randomUUID().toString() + "@" + processRegistry.getRegistryPort());  addSystemPropParameter(JavaCommand.PARENT_PROCESS_UID,parentProcessUID);  String procUID=UUID.randomUUID().toString() + "@" + processRegistry.getRegistryPort();  addSystemPropParameter(JavaCommand.PROCESS_UID,procUID);  addSystemPropParameter(MAIN_CLASS,mainClassName);  if (systemProp != null)   _systemProp.putAll(systemProp);  if (jvmArgs != null)   _jvmArgs.addAll(ExecutorUtils.asList(jvmArgs));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LOOT_PAUSE_START_OTHER(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390189,value0,value1);}  }
class C{  public static void assertContains(double[] values,double x,double epsilon){  assertContains(null,values,x,epsilon);}  }
class C{  @NotNull public ObservableBool hasErrors(){  return myValidatorPanel.hasErrors();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Opt<T> fullCopy(){  Opt tree=(Opt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public String call(){  StringBuilder str=new StringBuilder();  Iterator<Long> it=keyList.iterator();  while (it.hasNext()) {    str.append(dataTagFacade.getConfigXML(it.next()));  }  return str.toString();}  }
class C{  public DatabaseGetUniversitiesQuery(VkApiClient client,UserActor actor){  super(client,"database.getUniversities",GetUniversitiesResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public AudioReorderQuery(VkApiClient client,UserActor actor,int audioId){  super(client,"audio.reorder",OkResponse.class);  accessToken(actor.getAccessToken());  audioId(audioId);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private void optionSelected(Box box,GraphicPanelFieldManager fieldConfigManager,FieldPanel panel,UndoActionInterface parentObj){  if ((comboBox != null) && (comboBox.getSelectedItem() != null)) {    ValueComboBoxData value=comboBox.getSelectedValue();    if (value != null) {      removeOptionFields(box,fieldConfigManager);      optionPanel=new JPanel();      optionPanel.setLayout(new BorderLayout());      Box optionBox=Box.createVerticalBox();      optionPanel.add(optionBox,BorderLayout.CENTER);      int index=findOptionPanel(box,panel);      OptionGroup optionGroup=optionMap.get(value.getKey());      populateOptionGroup(fieldConfigManager,optionBox,optionGroup.getGroupList());      box.add(optionPanel,index + 1);      Object newValueObj=value.getKey();      if ((oldValueObj == null) && (comboBox.getItemCount() > 0)) {        oldValueObj=comboBox.getFirstItem().getKey();      }      UndoManager.getInstance().addUndoEvent(new UndoEvent(parentObj,"Multi option : " + getId(),oldValueObj,newValueObj));      oldValueObj=newValueObj;      box.revalidate();    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_INFO_1_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400071,value0);}  }
class C{  public void addACL(Collection<String> listIPs,int from,int to){  AmazonEC2 client=null;  try {    client=getEc2Client();    List<IpPermission> ipPermissions=new ArrayList<IpPermission>();    ipPermissions.add(new IpPermission().withFromPort(from).withIpProtocol("tcp").withIpRanges(listIPs).withToPort(to));    if (this.insEnvIdentity.isClassic()) {      client.authorizeSecurityGroupIngress(new AuthorizeSecurityGroupIngressRequest(config.getACLGroupName(),ipPermissions));      logger.info("Done adding ACL to classic: " + StringUtils.join(listIPs,","));    } else {      AuthorizeSecurityGroupIngressRequest sgIngressRequest=new AuthorizeSecurityGroupIngressRequest();      sgIngressRequest.withGroupId(getVpcGroupId());      client.authorizeSecurityGroupIngress(sgIngressRequest.withIpPermissions(ipPermissions));      logger.info("Done adding ACL to vpc: " + StringUtils.join(listIPs,","));    }  }  finally {    if (client != null)     client.shutdown();  }}  }
class C{  @Override public void close() throws IOException {  eof=false;  position=0;  mark=-1;}  }
class C{  public static void drawArrowHead(Graphics gc,Point vp,Point wp){  final Point diff=new Point(wp.x - vp.x,wp.y - vp.y);  if (diff.x != 0 || diff.y != 0) {    final int arrowLength=5;    final double arrowAngle=2.2;    double alpha=Geometry.computeAngle(diff);    Point a=new Point(arrowLength,0);    a=Geometry.rotate(a,alpha + arrowAngle);    a.translate(wp.x,wp.y);    Point b=new Point(arrowLength,0);    b=Geometry.rotate(b,alpha - arrowAngle);    b.translate(wp.x,wp.y);    gc.drawLine(a.x,a.y,wp.x,wp.y);    gc.drawLine(wp.x,wp.y,b.x,b.y);  }}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  private void updateSymbol(){  if (!Controller.getInstance().isPopulating()) {    Expression perpendicularOffset=fieldConfigVisitor.getExpression(FieldIdEnum.PERPENDICULAR_OFFSET);    Expression geometryField=ExtractGeometryField.getGeometryField(fieldConfigVisitor);    StandardData standardData=getStandardData();    LineSymbolizer lineSymbolizer=(LineSymbolizer)SelectedSymbol.getInstance().getSymbolizer();    if (lineSymbolizer != null) {      lineSymbolizer.setName(standardData.name);      lineSymbolizer.setDescription(standardData.description);      lineSymbolizer.setUnitOfMeasure(standardData.unit);      lineSymbolizer.setGeometry(geometryField);      lineSymbolizer.setPerpendicularOffset(perpendicularOffset);      this.fireUpdateSymbol();    }  }}  }
class C{  public WheelVerticalView(Context context,AttributeSet attrs){  this(context,attrs,R.attr.abstractWheelViewStyle);}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public SimpleMetric(MetricName name,Number value){  this(name,MetricValue.fromNumberValue(requireNonNull(value)));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200833,skillcaster,num0,skillname);}  }
class C{  @Override public int compareTo(ViterbiPath o){  return Double.compare(score,o.score);}  }
class C{  public RenderRequest(JsonObject json){  this.request=new HttpRequestWrapper(json.getJsonObject("request"));  if (json.containsKey("template")) {    this.template=json.getString("template");  }}  }
class C{  public static String execute(String command){  return SubprocessUttility.execute(command);}  }
class C{  public IdQuery(Class<T> type,Object id,Object routing){  this(type.getName(),id,routing,QueryResultType.DEFAULT,0);}  }
class C{  public ContourGenerator(URL url,float modelMean,float modelStddev) throws IOException {  this.modelMean=modelMean;  this.modelStddev=modelStddev;  List termsList=new ArrayList();  String line;  BufferedReader reader=new BufferedReader(new InputStreamReader(url.openStream()));  line=reader.readLine();  while (line != null) {    if (!line.startsWith("***")) {      parseAndAdd(termsList,line);    }    line=reader.readLine();  }  terms=(F0ModelTerm[])termsList.toArray(terms);  reader.close();}  }
class C{  public GroupsGetInvitesQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static String toJson(Map<String,String> map){  if (map == null || map.size() == 0) {    return null;  }  StringBuilder paras=new StringBuilder();  paras.append("{");  Iterator<Map.Entry<String,String>> ite=map.entrySet().iterator();  while (ite.hasNext()) {    Map.Entry<String,String> entry=(Map.Entry<String,String>)ite.next();    paras.append("\"").append(entry.getKey()).append("\":\"").append(entry.getValue()).append("\"");    if (ite.hasNext()) {      paras.append(",");    }  }  paras.append("}");  return paras.toString();}  }
class C{  public static int readSwappedUnsignedShort(byte[] data,int offset){  return (((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8));}  }
class C{  public SimpleMetricGroup(GroupName name,Stream<? extends Metric> i){  this(name,i.collect(Collectors.<Metric>toList()));}  }
class C{  public NotExtended(Filter filter){  super(filter);}  }
class C{  public SnippetObject elem(Map.Entry<Object,Object> e){  return new SnippetObject(e.getValue(),myPath.elem(),mySnippets);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_BAN_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1400574,value0);}  }
class C{  public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  public static StringBuilder quotedString(String s){  final EscapeStringResult escapeString=escapeString(s,'\"');  final StringBuilder result=escapeString.buffer;  result.insert(0,'\"');  result.append('\"');  return result;}  }
class C{  public void removePanel(BasePanel panel){  if ((panel != null) && (padding != null)) {    padding.removePadding();    box.remove(panel.box);    padding.addPadding();  }}  }
class C{  private boolean takeScreenShot(Activity activity){  Date now=new Date();  android.text.format.DateFormat.format(fileFormat,now);  View v1=activity.getWindow().getDecorView().getRootView();  v1.setDrawingCacheEnabled(true);  Bitmap bitmap=Bitmap.createBitmap(v1.getDrawingCache());  v1.setDrawingCacheEnabled(false);  File imageFile=new File(path,now + ".jpg");  try {    FileOutputStream outputStream=new FileOutputStream(imageFile);    bitmap.compress(Bitmap.CompressFormat.JPEG,quality,outputStream);    outputStream.flush();    outputStream.close();  } catch (  IOException ex) {    return false;  }  return true;}  }
class C{  public NewsfeedSearchQuery search(){  return new NewsfeedSearchQuery(getClient());}  }
class C{  public PersistenceManager(final IDBPersistenceHandler<T> dbHandler,final String falbackFile,final IAlarmListener aSender,final IFallback fallbackObj){  this.dbHandler=dbHandler;  this.alarmSender=aSender;  fallbackManager=new FallbackFileManager(falbackFile,fallbackObj);}  }
class C{  public static URL[] toURLs(File[] files) throws IOException {  URL[] urls=new URL[files.length];  for (int i=0; i < urls.length; i++) {    urls[i]=files[i].toURI().toURL();  }  return urls;}  }
class C{  public StaticScript cache(boolean shouldCache){  this.shouldCache=shouldCache;  return this;}  }
class C{  public boolean testCssMinifier(){  StringBuilder sbCss1=new StringBuilder();  sbCss1.append("body {");  sbCss1.append("\n\tbackground-color: black;");  sbCss1.append("\n\tfont-size: Arial;");  sbCss1.append("\n}");  StringBuilder sbCss2=new StringBuilder();  sbCss2.append("div {");  sbCss2.append("\n\tcolor: red;");  sbCss2.append("\n\tpadding: 10px;");  sbCss2.append("\n}");  MinifierAPI minAPI=new MinifierAPI();  String minifiedCss1=minAPI.getMinfiedCss(sbCss1.toString());  String minifiedCss2=minAPI.getMinfiedCss(sbCss2.toString());  String actualMinifiedCss=minifiedCss1 + minifiedCss2;  String expectedMinifiedCssResult="body{background-color:black;font-size:Arial}div{color:red;padding:10px}";  return actualMinifiedCss.equals(expectedMinifiedCssResult);}  }
class C{  protected void buildTree(){  for (  N gode : graph) {    DominatorNode<N> dode=fetchDode(gode);    DominatorNode<N> parent=fetchParent(gode);    if (parent == null) {      heads.add(dode);    } else {      parent.addChild(dode);      dode.setParent(parent);    }  }  for (  DominatorNode dode : this) {    if (dode.isTail()) {      tails.add(dode);    }  }}  }
class C{  public static Object[] toArray(Iterator tuples,String field){  Object[] array=new Object[100];  int i=0;  for (; tuples.hasNext(); ++i) {    if (i >= array.length)     array=ArrayLib.resize(array,3 * array.length / 2);    array[i]=((Tuple)tuples.next()).get(field);  }  return ArrayLib.trim(array,i);}  }
class C{  public static boolean isBindable(TypeName typeName){  if (typeName instanceof ParameterizedTypeName) {    for (    TypeName t : ((ParameterizedTypeName)typeName).typeArguments) {      if (!isBindable(t)) {        return false;      }    }    return true;  } else   if (typeName instanceof ClassName) {    return true;  } else   if (typeName instanceof WildcardTypeName) {    return true;  } else   return typeName.isPrimitive();}  }
class C{  public static void main(String[] args){  SpringApplication.run(Main.class,args);}  }
class C{  public static void drawLine(Point p1,Point p2,Canvas canvas,Paint paint){  canvas.save();  canvas.drawLine(p1.x,p1.y,p2.x,p2.y,paint);  canvas.restore();}  }
class C{  @Override protected void synchronizeChildren(){  boolean orig=ownerDocument.getMutationEvents();  ownerDocument.setMutationEvents(false);  needsSyncChildren(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument;  attributes=new NamedNodeMapImpl(ownerDocument);  for (int nodeIndex=ownerDocument.getLastChild(fNodeIndex); nodeIndex != -1; nodeIndex=ownerDocument.getPrevSibling(nodeIndex)) {    Node attr=ownerDocument.getNodeObject(nodeIndex);    attributes.setNamedItem(attr);  }  ownerDocument.setMutationEvents(orig);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_INTERVAL_HEAL_MP_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201156,skilltarget,num0,skillname);}  }
class C{  public static void e(String tag,String msg,Exception e){  if (LOG_ENABLE) {    Log.e(tag,buildMsg(msg),e);  }}  }
class C{  private FieldODEStateAndDerivative<Decimal64> state(double t){  return new FieldODEStateAndDerivative<>(zero.add(t),new Decimal64[0],new Decimal64[0]);}  }
class C{  public XMLErrorReporter(){  fMessageFormatters=new Hashtable();}  }
class C{  public boolean rta(){  return soot.PhaseOptions.getBoolean(options,"rta");}  }
class C{  public MonsterCursor queryMonsters(){  QueryHelper qh=new QueryHelper();  qh.Distinct=true;  qh.Table=S.TABLE_MONSTERS;  qh.Columns=null;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=S.COLUMN_MONSTERS_SORT_NAME;  qh.Limit=null;  return new MonsterCursor(wrapHelper(qh));}  }
class C{  public FriendsGetMutualQuery sourceUid(Integer value){  return unsafeParam("source_uid",value);}  }
class C{  public boolean add_color_tags(){  return soot.PhaseOptions.getBoolean(options,"add-color-tags");}  }
class C{  private InputStream toBufferedInputStream(){  int remaining=count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(buffers.size());  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  private String convertPrivateKeytoWIF(byte[] privatekey){  byte[] step1=concateByteArray(new byte[]{(byte)0x80},privatekey);  byte[] step2to3=SHA256hash(SHA256hash(step1));  byte[] checksum=getCheckSum(step2to3);  byte[] step5=concateByteArray(step1,checksum);  return base58encode(step5);}  }
class C{  public static void error(@Nullable Class<?> caller,Throwable throwable,String message,Object... args){  android.util.Log.e(tag(caller),String.format(Locale.ENGLISH,message,args),throwable);}  }
class C{  public void showExpandableItems(List<ExpandableItem> expandableItems){  validateExpandableItems(expandableItems);  reset();  setExpandableItems(expandableItems);  renderExpandableItems();  hookListeners();  bringChildsToFront(expandableItems);}  }
class C{  public static Action create(String type,Object... values){  return new Action(type,values);}  }
class C{  public static <T extends Bean>T load(Bson query,Bson order,T obj){  String collection=getCollection(obj.getClass());  if (collection != null) {    return load(collection,query,order,obj);  }  return null;}  }
class C{  @Override public boolean dispatch(boolean complete) throws IOException, XNIException {  try {    boolean again;    do {      again=false;switch (fScannerState) {case SCANNER_STATE_TRAILING_MISC:{          fEntityScanner.skipSpaces();          if (fEntityScanner.skipChar('<')) {            setScannerState(SCANNER_STATE_START_OF_MARKUP);            again=true;          } else {            setScannerState(SCANNER_STATE_CONTENT);            again=true;          }          break;        }case SCANNER_STATE_START_OF_MARKUP:{        fMarkupDepth++;        if (fEntityScanner.skipChar('?')) {          setScannerState(SCANNER_STATE_PI);          again=true;        } else         if (fEntityScanner.skipChar('!')) {          setScannerState(SCANNER_STATE_COMMENT);          again=true;        } else         if (fEntityScanner.skipChar('/')) {          reportFatalError("MarkupNotRecognizedInMisc",null);          again=true;        } else         if (isValidNameStartChar(fEntityScanner.peekChar())) {          reportFatalError("MarkupNotRecognizedInMisc",null);          scanStartElement();          setScannerState(SCANNER_STATE_CONTENT);        } else         if (isValidNameStartHighSurrogate(fEntityScanner.peekChar())) {          reportFatalError("MarkupNotRecognizedInMisc",null);          scanStartElement();          setScannerState(SCANNER_STATE_CONTENT);        } else {          reportFatalError("MarkupNotRecognizedInMisc",null);        }        break;      }case SCANNER_STATE_PI:{      scanPI();      setScannerState(SCANNER_STATE_TRAILING_MISC);      break;    }case SCANNER_STATE_COMMENT:{    if (!fEntityScanner.skipString("--")) {      reportFatalError("InvalidCommentStart",null);    }    scanComment();    setScannerState(SCANNER_STATE_TRAILING_MISC);    break;  }case SCANNER_STATE_CONTENT:{  int ch=fEntityScanner.peekChar();  if (ch == -1) {    setScannerState(SCANNER_STATE_TERMINATED);    return false;  }  reportFatalError("ContentIllegalInTrailingMisc",null);  fEntityScanner.scanChar();  setScannerState(SCANNER_STATE_TRAILING_MISC);  break;}case SCANNER_STATE_REFERENCE:{reportFatalError("ReferenceIllegalInTrailingMisc",null);setScannerState(SCANNER_STATE_TRAILING_MISC);break;}case SCANNER_STATE_TERMINATED:{return false;}}} while (complete || again);} catch (MalformedByteSequenceException e) {fErrorReporter.reportError(e.getDomain(),e.getKey(),e.getArguments(),XMLErrorReporter.SEVERITY_FATAL_ERROR,e);return false;}catch (CharConversionException e) {fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"CharConversionFailure",null,XMLErrorReporter.SEVERITY_FATAL_ERROR,e);return false;}catch (EOFException e) {if (fMarkupDepth != 0) {reportFatalError("PrematureEOF",null);return false;}setScannerState(SCANNER_STATE_TERMINATED);return false;}return true;}  }
class C{  public VideoGetQuery videos(String... value){  return unsafeParam("videos",value);}  }
class C{  public static boolean verifySampleSetup(Activity activity,int... resIds){  StringBuilder problems=new StringBuilder();  boolean problemFound=false;  problems.append("The following set up problems were found:\n\n");  if (activity.getPackageName().startsWith("com.google.example.games")) {    problemFound=true;    problems.append("- Package name cannot be com.google.*. You need to change the " + "sample's package name to your own package.").append("\n");  }  for (  int i : resIds) {    if (activity.getString(i).toLowerCase().contains("replaceme")) {      problemFound=true;      problems.append("- You must replace all " + "placeholder IDs in the ids.xml file by your project's IDs.").append("\n");      break;    }  }  if (problemFound) {    problems.append("\n\nThese problems may prevent the app from working properly.");    showAlert(activity,problems.toString());    return false;  }  return true;}  }
class C{  void revalidateGrid(){  if (alignment != null) {    setSize((int)(cellWidth * (alignment.getGapColumnContractor().getLayoutLength()) + 0.5) + 3,(int)Math.max(20,cellHeight));  }  setPreferredSize(getSize());  revalidate();}  }
class C{  public short put(String value){  if (dataMap.containsKey(value)) {    dictionaryHit++;    return dataMap.get(value);  }  if (next == MAX_SIZE) {    dictionaryMiss++;    return -1;  }  if (minRepetitions == 0) {    data[next]=value;    dataMap.put(value,next);    dirty=true;    dictionaryHit++;    return next++;  }  if (slidingWindow.containsKey(value)) {    int count=slidingWindow.get(value) + 1;    if (count > minRepetitions) {      slidingWindow.remove(value);      data[next]=value;      dataMap.put(value,next);      dirty=true;      dictionaryHit++;      return next++;    } else {      slidingWindow.put(value,count);    }  } else {    slidingWindow.put(value,1);  }  dictionaryMiss++;  return -1;}  }
class C{  public boolean isFifoClass(){  return e.isFifoClass();}  }
class C{  private int approximateBinarySearch(long searchX,int startSearchIndex,boolean preferStart){  return approximateBinarySearch(searchX,startSearchIndex,mData.size() - 1,preferStart,DEFAULT_APPROX_RANGE);}  }
class C{  public String showDialog(){  setVisible(true);  if (okButtonPressed) {    return selectedCharField.getText();  }  return null;}  }
class C{  public static StringFinder create(String s){  return new StringFinder(s);}  }
class C{  private synchronized void onRemovedMbean(ObjectName obj){  if (!detected_groups_.keySet().contains(obj)) {    LOG.log(Level.WARNING,"skipping de-registration of {0}: not present",obj);    return;  }  MBeanGroup instance=detected_groups_.get(obj);  detected_groups_.remove(obj);  LOG.log(Level.FINE,"de-registered metrics for {0}: {1}",new Object[]{obj,instance});}  }
class C{  public static boolean typeCheck(Class type,Object instance){  return type.isAssignableFrom(instance.getClass()) || isWrapperInstance(type,instance);}  }
class C{  InsertQueryImpl(ImmutableCollection<VarAdmin> vars,Optional<MatchQueryAdmin> matchQuery,Optional<MindmapsGraph> graph){  assert (!matchQuery.isPresent() || !graph.isPresent());  this.matchQuery=matchQuery;  this.graph=graph;  this.originalVars=vars;  this.vars=vars.stream().flatMap(null).collect(toImmutableSet());  for (  VarAdmin var : this.vars) {    var.getProperties().forEach(null);  }}  }
class C{  void onAddMedia(RTMedia media){  mAddedMedia.add(media);}  }
class C{  public Object jjtAccept(MithraQLVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public boolean isApplicable(){  return getParent() != null;}  }
class C{  private int computeSize(Map<Integer,Integer[]> integerMap){  int count=0;  for (  Integer taxonId : integerMap.keySet()) {    Integer value=integerMap.get(taxonId)[0];    if (value != null)     count+=value;  }  return count;}  }
class C{  public void swipeUpdated(long time,float x,float y,float dx,float dy,float tx,float ty){  if (!mInSwipe)   return;  final float toolbarSize=mLayout.getHeight() - mLayout.getHeightMinusTopControls();  if (ty > toolbarSize)   mSwipeCanScroll=true;  if (!mSwipeCanScroll)   return;  final int index=mTabModel.index();  if (index < 0 || index >= mStackTabs.length) {    assert false : "Tab index out of bounds in Stack#swipeUpdated()";    return;  }  final float delta=mCurrentMode == Orientation.PORTRAIT ? dy : dx;  mSwipeUnboundScrollOffset+=delta;  final float minScroll=getMinScroll(true);  final float maxScroll=getMaxScroll(true);  float offset=MathUtils.clamp(mSwipeUnboundScrollOffset,minScroll,maxScroll);  final float constrainedDelta=offset - mSwipeBoundedScrollOffset;  mSwipeBoundedScrollOffset=offset;  if (constrainedDelta == 0.f)   return;  if (mCurrentMode == Orientation.PORTRAIT) {    dy=constrainedDelta;  } else {    dx=constrainedDelta;  }  drag(time,x,y,dx,dy);  if (mCurrentMode == Orientation.PORTRAIT) {    final float discardOffset=mStackTabs[index].getScrollOffset();    final boolean beyondThreshold=-mScrollOffset < discardOffset;    mSwipeIsCancelable|=beyondThreshold;    if (mSwipeIsCancelable && !beyondThreshold)     swipeCancelled(time);  } else {    final float discardOffset=mStackTabs[index].getLayoutTab().getY();    boolean aboveThreshold=discardOffset < getRange(SWIPE_LANDSCAPE_THRESHOLD);    mSwipeIsCancelable|=!aboveThreshold;    if (mSwipeIsCancelable && aboveThreshold)     swipeCancelled(time);  }}  }
class C{  public String typeName(){  return "int";}  }
class C{  public void check(){  while (true) {switch (state) {case INITIALIZE:      try {synchronized (this) {          if (state == READY) {            return;          }          wait(1000);        }      } catch (      InterruptedException e) {      }    break;case READY:  return;default :throw new RemoteExceptionWrapper(new NoSuchObjectException("service is unavailable"));}}}  }
class C{  public TextMessage createTextMessage() throws JMSException {  return createTextMessage(null);}  }
class C{  public MyDialog inDuration(int duration){  mInDuration=duration;  return this;}  }
class C{  @Override public void endGeneralEntity(String name,Augmentations augs) throws XNIException {}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View view=inflater.inflate(R.layout.fragment_multi_filter,container,false);  initModel();  initPresenter();  initView(view);  messageManagePresenter.sendMessage(1,null);  return view;}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public void clear(){  super.clear();  int[] keys=_set;  Object[] vals=_values;  byte[] states=_states;  Arrays.fill(_set,0,_set.length,(int)0);  Arrays.fill(_values,0,_values.length,null);  Arrays.fill(_states,0,_states.length,FREE);}  }
class C{  public CannotAbortException(){  super();}  }
class C{  public PowerupOperation(final PokemonModel pokemon){  super(pokemon);}  }
class C{  protected UUID makeUUID(){  return UUIDGen.getTimeUUID();}  }
class C{  public Vector negate(){  return new Vector(-x,-y);}  }
class C{  private String printOFormat(int x){  String sx=null;  if (x == Integer.MIN_VALUE)   sx="20000000000"; else   if (x < 0) {    String t=Integer.toString((~(-x - 1)) ^ Integer.MIN_VALUE,8);switch (t.length()) {case 1:      sx="2000000000" + t;    break;case 2:  sx="200000000" + t;break;case 3:sx="20000000" + t;break;case 4:sx="2000000" + t;break;case 5:sx="200000" + t;break;case 6:sx="20000" + t;break;case 7:sx="2000" + t;break;case 8:sx="200" + t;break;case 9:sx="20" + t;break;case 10:sx="2" + t;break;case 11:sx="3" + t.substring(1);break;}} else sx=Integer.toString(x,8);return printOFormat(sx);}  }
class C{  public Object[] allKeys(){  Object[] a1=m_map.keySet().toArray();  if (m_parent != null) {    Object[] a2=m_parent.allKeys();    if (a2 != null && a2.length > 0) {      Object[] o=new Object[a1.length + a2.length];      System.arraycopy(a1,0,o,0,a1.length);      System.arraycopy(a2,0,o,a1.length,a2.length);      return o;    }  }  return a1;}  }
class C{  public MaxTask(Class<T> reduceType,Task<T> task) throws IllegalArgumentException {  super(task);  this.reducer=new MaxReducer<T>(reduceType);}  }
class C{  public void createDirectory(String directoryName) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("MKD " + directoryName);    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }  }}  }
class C{  private synchronized void log(int logType,String msg,Object... args){  if (!settings.getDebug()) {    return;  }  String tag=getTag();  String message=createMessage(msg,args);  int methodCount=getMethodCount();  if (TextUtils.isEmpty(message)) {    message="Empty/NULL log message";  }  logTopBorder(logType,tag);  logHeaderContent(logType,tag,methodCount);  byte[] bytes=message.getBytes();  int length=bytes.length;  if (length <= CHUNK_SIZE) {    if (methodCount > 0) {      logDivider(logType,tag);    }    logContent(logType,tag,message);    logBottomBorder(logType,tag);    return;  }  if (methodCount > 0) {    logDivider(logType,tag);  }  for (int i=0; i < length; i+=CHUNK_SIZE) {    int count=Math.min(length - i,CHUNK_SIZE);    logContent(logType,tag,new String(bytes,i,count));  }  logBottomBorder(logType,tag);}  }
class C{  public static final void drawCircleFromCenter(GL2 gl,double r,double cx,double cy,boolean points,boolean line){  double c=COS;  double s=SIN;  double t;  double x=r;  double y=0;  gl.glBegin(GL.GL_LINE_LOOP);  for (int i=0; i < N; i++) {    gl.glVertex2d(x + cx,y + cy);    t=x;    x=c * x - s * y;    y=s * t + c * y;  }  gl.glEnd();  if (points) {    x=r;    y=0;    gl.glBegin(GL.GL_POINTS);    for (int i=0; i < N; i++) {      gl.glVertex2d(x + cx,y + cy);      t=x;      x=c * x - s * y;      y=s * t + c * y;    }    gl.glEnd();  }  if (line) {    gl.glBegin(GL.GL_LINES);    gl.glVertex2d(cx,cy);    gl.glVertex2d(cx + r,cy);    gl.glEnd();  }}  }
class C{  public void reset(){  fromIndex=0;  toIndex=0;}  }
class C{  public String toString(int indentFactor) throws JSONException {  return toString(indentFactor,0);}  }
class C{  private static void createReader(InputStream inputStream){  try {    closeReader();    Reader iReader=new InputStreamReader(inputStream,"UTF-8");    reader=new BufferedReader(iReader);  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }}  }
class C{  public static String computeDigest(URL url,String algorithm) throws IOException, NoSuchAlgorithmException {  return computeDigest(url.openStream(),algorithm);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set colorMatchesVsReference=" + (!isSelected()) + ";");}  }
class C{  @Override public boolean showDialog(){  return showExpressionDialog(fieldType,expression);}  }
class C{  public void handleDecode(Result rawResult,Bitmap barcode,float scaleFactor){  inactivityTimer.onActivity();  lastResult=rawResult;  ResultHandler resultHandler=ResultHandlerFactory.makeResultHandler(this,rawResult);  boolean fromLiveScan=barcode != null;  if (fromLiveScan) {    historyManager.addHistoryItem(rawResult,resultHandler);    beepManager.playBeepSoundAndVibrate();    drawResultPoints(barcode,scaleFactor,rawResult);  }switch (source) {case NATIVE_APP_INTENT:case PRODUCT_SEARCH_LINK:    handleDecodeExternally(rawResult,resultHandler,barcode);  break;case ZXING_LINK:if (scanFromWebPageManager == null || !scanFromWebPageManager.isScanFromWebPage()) {  handleDecodeInternally(rawResult,resultHandler,barcode);} else {  handleDecodeExternally(rawResult,resultHandler,barcode);}break;case NONE:SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);if (fromLiveScan && prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE,false)) {Toast.makeText(getApplicationContext(),getResources().getString(R.string.msg_bulk_mode_scanned) + " (" + rawResult.getText()+ ')',Toast.LENGTH_SHORT).show();restartPreviewAfterDelay(BULK_MODE_SCAN_DELAY_MS);} else {handleDecodeInternally(rawResult,resultHandler,barcode);}break;}}  }
class C{  private static void assertJsonObjectEquals(String expected,String actual){  ObjectMapper mapper=new ObjectMapper();  TypeReference<Map<String,Object>> ref=new TypeReference<Map<String,Object>>(){  };  try {    Map<String,Object> em=mapper.readValue(expected,ref);    Map<String,Object> am=mapper.readValue(actual,ref);    assertEquals(em,am);  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  @Override public void onMapLongClick(@NonNull LatLng point){  AirMap.createFlight(this,REQUEST_FLIGHT,getCoordinateFromLatLng(point),null);}  }
class C{  public boolean drain(){  if (line != null) {    debugPrint("started draining...");    if (line.isOpen()) {      line.drain();      if (drainDelay > 0L) {        try {          Thread.sleep(drainDelay);        } catch (        InterruptedException ie) {        }      }    }    debugPrint("...finished draining");  }  timer.stop("audioOut");  return !isCancelled();}  }
class C{  public void initCache(boolean loadDataFromDB,Properties properties) throws SAException {  if (getEngine().getSpaceImpl().getDirectPersistencyRecoveryHelper() != null && getEngine().getSpaceImpl().getDirectPersistencyRecoveryHelper().isPerInstancePersistency()) {    if (_engine.getSpaceImpl().isPrimary()) {      if (getEngine().getSpaceImpl().getDirectPersistencyRecoveryHelper().isInconsistentStorage()) {        _logger.severe("space " + getEngine().getFullSpaceName() + " selected to be primary but storage in inconsistent");        DirectPersistencyRecoveryException e=new DirectPersistencyRecoveryException("space " + getEngine().getFullSpaceName() + " selected to be primary but storage in inconsistent");        throw e;      }    } else {      if (getEngine().getSpaceImpl().getDirectPersistencyRecoveryHelper().isMeLastPrimary()) {        _logger.severe("space " + getEngine().getFullSpaceName() + " selected to be backup but last time was primary");        DirectPersistencyRecoveryException e=new DirectPersistencyRecoveryException("space " + getEngine().getFullSpaceName() + " selected to be backup last time was primary");        throw e;      }    }  }  SpaceEvictionStrategyConfig config=new SpaceEvictionStrategyConfig(getMaxCacheSize());  _evictionStrategy.initialize(this,config);  if (isOffHeapCachePolicy()) {    loadDataFromDB=true;    boolean warmStart=_persistentBlobStore;    boolean inconsistentBackup=_persistentBlobStore && (getEngine().getSpaceImpl().getDirectPersistencyRecoveryHelper() != null && !_engine.getSpaceImpl().isPrimary() && getEngine().getSpaceImpl().getDirectPersistencyRecoveryHelper().isInconsistentStorage());    if (warmStart && inconsistentBackup && _logger.isLoggable(Level.INFO))     _logger.info(getEngine().getFullSpaceName() + " blob-store backup space inconsistent-storage indicator, forced cold start on");    warmStart&=(!inconsistentBackup);    if (!_engine.getSpaceImpl().isPrimary() && _engine.getReplicationNode() != null) {      warmStart&=_engine.getReplicationNode().getDirectPesistencySyncHandler() != null;    }    final MetricRegistrator blobstoreMetricRegistrar=_engine.getMetricRegistrator().extend("blobstore");    properties.put("blobstoreMetricRegistrar",blobstoreMetricRegistrar);    createOffHeapInternalCache(properties);    BlobStoreConfig blobStoreConfig=new BlobStoreConfig(_engine.getFullSpaceName(),_engine.getNumberOfPartitions(),_engine.getClusterInfo().getNumberOfBackups(),warmStart,blobstoreMetricRegistrar);    _blobStoreStorageHandler.initialize(blobStoreConfig);    Properties blobstoreProperties=new Properties();    blobstoreProperties.setProperty(FULL_CACHE_MANAGER_BLOBSTORE_CACHE_SIZE_PROP,properties.getProperty(FULL_CACHE_MANAGER_BLOBSTORE_CACHE_SIZE_PROP));    blobstoreProperties.setProperty(FULL_CACHE_MANAGER_BLOBSTORE_PERSISTENT_PROP,String.valueOf(warmStart));    Properties implProperties=_blobStoreStorageHandler.getProperties();    if (implProperties != null) {      implProperties.remove(BlobStoreMemoryMonitor.MEMORY_MONITOR_PROPERTY_NAME);      implProperties.remove(BlobStoreRecoveryHelper.BLOB_STORE_RECOVERY_HELPER_PROPERTY_NAME);      blobstoreProperties.putAll(implProperties);    }    getEngine().getSpaceImpl().getConfig().setBlobStoreProperties(blobstoreProperties);    _blobStoreMemoryMonitor=new BlobStoreMemoryMonitorWrapper(_blobStoreStorageHandler.getProperties() != null ? (BlobStoreMemoryMonitor)_blobStoreStorageHandler.getProperties().get(BlobStoreMemoryMonitor.MEMORY_MONITOR_PROPERTY_NAME) : null,this,_engine.getFullSpaceName(),properties);    if (getEngine().getReplicationNode() != null) {      getEngine().getReplicationNode().setBlobStoreReplicaConsumeHelper(new BlobStoreReplicaConsumeHelper(getEngine()));      if (useBlobStoreReplicationBackupBulks()) {        getEngine().getReplicationNode().setBlobStoreReplicationBulkConsumeHelper(new BlobStoreReplicationBulkConsumeHelper(getEngine()));      }    }  }  if (isOffHeapCachePolicy() && _replicationNode.getDirectPesistencySyncHandler() != null) {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("[" + getEngine().getFullSpaceName() + "] initializingIoHandler DirectPersistencyBlobStoreIO in DirectPersistencySyncHandler");    }    _replicationNode.getDirectPesistencySyncHandler().afterInitializedBlobStoreIO(new DirectPersistencyBlobStoreIO(this,_logger,_replicationNode.getDirectPesistencySyncHandler().getCurrentGenerationId()));  }  if (loadDataFromDB) {    Context context=null;    try {      context=getCacheContext();      loadDataFromDB(context,_engine.getConfigReader());      _emptyAfterInitialLoadStage=_entries.isEmpty();    } catch (    Exception ex1) {      if (getEngine().getSpaceImpl().getDirectPersistencyRecoveryHelper() != null) {        if (_logger.isLoggable(Level.WARNING)) {          _logger.warning("[" + getEngine().getFullSpaceName() + "] setting storage state to Inconsistent due to failure during initial load");        }        getEngine().getSpaceImpl().getDirectPersistencyRecoveryHelper().setStorageState(StorageConsistencyModes.Inconsistent);      }      throw ex1 instanceof SAException ? (SAException)ex1 : new SAException(ex1);    } finally {      freeCacheContext(context);    }  }  if (getEngine().getSpaceImpl().getDirectPersistencyRecoveryHelper() != null && _engine.getSpaceImpl().isPrimary()) {    if (_logger.isLoggable(Level.INFO)) {      _logger.info("[" + getEngine().getFullSpaceName() + "] setting storage state of primary to Consistent after initial load");    }    getEngine().getSpaceImpl().getDirectPersistencyRecoveryHelper().setStorageState(StorageConsistencyModes.Consistent);  }  if (isOffHeapCachePolicy() && _replicationNode.getDirectPesistencySyncHandler() != null) {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("[" + getEngine().getFullSpaceName() + "] initializing DirectPersistencyBlobStoreIO in DirectPersistencySyncHandler");    }    if (isDirectPersistencyEmbeddedtHandlerUsed()) {      _replicationNode.getDirectPesistencySyncHandler().getEmbeddedSyncHandler().getInitialLoadHandler().onInitialLoadEnd();    }    _replicationNode.getDirectPesistencySyncHandler().initialize();  }  _persistentGC=new PersistentGC(this,_engine.getConfigReader());  _persistentGC.start();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DISCARD_ITEM_MULTI(String value1,String value0s){  return new SM_SYSTEM_MESSAGE(1300793,value1,value0s);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public ShimpleLocalDefs(ShimpleBody sb){  if (!sb.isSSA())   throw new RuntimeException("ShimpleBody is not in proper SSA form as required by ShimpleLocalDefs.  You may need to rebuild it or use SimpleLocalDefs instead.");{    Chain<Unit> unitsChain=sb.getUnits();    Iterator<Unit> unitsIt=unitsChain.iterator();    localToDefs=new HashMap<Value,List<Unit>>(unitsChain.size() * 2 + 1,0.7f);    while (unitsIt.hasNext()) {      Unit unit=(Unit)unitsIt.next();      Iterator<ValueBox> defBoxesIt=unit.getDefBoxes().iterator();      while (defBoxesIt.hasNext()) {        Value value=((ValueBox)defBoxesIt.next()).getValue();        if (!(value instanceof Local))         continue;        localToDefs.put(value,Collections.<Unit>singletonList(unit));      }    }  }}  }
class C{  public void importProject(@NotNull VirtualFile selectedFile){  VirtualFile projectDir=selectedFile.isDirectory() ? selectedFile : selectedFile.getParent();  File projectDirPath=virtualToIoFile(projectDir);  try {    LocalProperties localProperties=new LocalProperties(projectDirPath);    if (isAndroidStudio()) {      syncIdeAndProjectAndroidSdks(localProperties);    }  } catch (  IOException e) {    LOG.info("Failed to sync SDKs",e);    showErrorDialog(e.getMessage(),"Project Import");    return;  }  createProjectFileForGradleProject(selectedFile,null);}  }
class C{  public static boolean hasKitkat(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;}  }
class C{  public synchronized ChangeReport onDataTagUpdate(final DataTagUpdate dataTagUpdateChange){  ChangeReport changeReport=new ChangeReport(dataTagUpdateChange);  long equipmentId=dataTagUpdateChange.getEquipmentId();  ProcessConfiguration configuration=ProcessConfigurationHolder.getInstance();  if (!configuration.getEquipmentConfigurations().containsKey(equipmentId)) {    for (    EquipmentConfiguration equipmentConfiguration : configuration.getEquipmentConfigurations().values()) {      if (equipmentConfiguration.getSubEquipmentConfigurations().containsKey(equipmentId)) {        equipmentId=equipmentConfiguration.getId();      }    }  }  long dataTagId=dataTagUpdateChange.getDataTagId();  Map<Long,SourceDataTag> sourceDataTags=getSourceDataTags(equipmentId);  if (sourceDataTags == null) {    changeReport.appendError("Equipment does not exists: " + equipmentId);    return changeReport;  }  if (sourceDataTags.containsKey(dataTagId)) {    try {      SourceDataTag sourceDataTag=sourceDataTags.get(dataTagId);      SourceDataTag oldSourceDataTag=sourceDataTag.clone();synchronized (sourceDataTag) {        configurationUpdater.updateDataTag(dataTagUpdateChange,sourceDataTag);      }      try {        sourceDataTag.validate();      } catch (      ConfigurationException e) {        sourceDataTags.put(dataTagId,oldSourceDataTag);        changeReport.appendError("Error validating data tag");        changeReport.appendError(StackTraceHelper.getStackTrace(e));        return changeReport;      }      changeReport.appendInfo("Core Data Tag update successfully applied.");      IDataTagChanger dataTagChanger=dataTagChangers.get(equipmentId);      dataTagChanger.onUpdateDataTag(sourceDataTag,oldSourceDataTag,changeReport);      if (changeReport.getState().equals(CHANGE_STATE.SUCCESS)) {        List<ICoreDataTagChanger> coreChangers=coreDataTagChangers.get(equipmentId);        if (coreChangers != null) {          for (          ICoreDataTagChanger coreDataTagChanger : coreChangers) {            coreDataTagChanger.onUpdateDataTag(sourceDataTag,oldSourceDataTag,changeReport);          }        }        changeReport.appendInfo("Change fully applied.");      } else {        sourceDataTags.put(dataTagId,oldSourceDataTag);      }    } catch (    Exception e) {      changeReport.appendError("Error while applying data tag changes\n" + StackTraceHelper.getStackTrace(e));    }  } else {    changeReport.appendError("Data Tag " + dataTagId + " to update was not found.");  }  return changeReport;}  }
class C{  public void cleanPatchByVersion(String versionName){  if (patchDirectory == null || versionName == null) {    return;  }  String path=patchDirectory.getAbsolutePath() + "/" + versionName;  SharePatchFileUtil.deleteDir(path);}  }
class C{  @Override public Scan open(){  TableScan ts=(TableScan)tp.open();  Index idx=ii.open(tx);  return new IndexSelectScan(idx,searchRange,ts);}  }
class C{  protected boolean isValidFragment(String fragment){  if (fragment == null) {    return true;  }  return isOff(NO_FRAGMENTS);}  }
class C{  public boolean isOrganisationUnitMode(OrganisationUnitSelectionMode mode){  return organisationUnitMode != null && organisationUnitMode.equals(mode);}  }
class C{  public void registerHandler(String handlerName,BridgeHandler handler){  if (handler != null) {    messageHandlers.put(handlerName,handler);  }}  }
class C{  @Transactional(readOnly=true) @Override public UserDetails loadUserByUsername(String username){  if (username == null || username.trim().isEmpty()) {    throw new UsernameNotFoundException("Empty username");  }  log.debug("Security verification for user '{}'",username);  User account=userRepository.getByLogin(username);  if (account == null) {    log.info("User {} could not be found",username);    throw new UsernameNotFoundException("user " + username + " could not be found");  }  Collection<GrantedAuthority> grantedAuthorities=toGrantedAuthorities(account.getRoleNames());  String password=account.getPassword();  boolean enabled=account.getIsEnabled();  boolean accountNonExpired=true;  boolean credentialsNonExpired=true;  boolean accountNonLocked=true;  return new UserWithId(username,password,enabled,accountNonExpired,credentialsNonExpired,accountNonLocked,grantedAuthorities,account.getId());}  }
class C{  public GroupsIsMemberQuery isMember(UserActor actor,String groupId){  return new GroupsIsMemberQuery(getClient(),actor,groupId);}  }
class C{  private void mergeXmlFiles(File cachedXml,File cleanMainXml) throws Error {  XmlMerger merger=new XmlMerger(cleanMainXml,cachedXml);  try {    merger.process();  } catch (  Exception e) {    log.error("Error while merging xml files",e);    throw new Error("Error while merging xml files",e);  }}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  if (!isSymlink(directory)) {    cleanDirectory(directory);  }  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  public ToggleCommentsAction(){  super("TOGGLE");}  }
class C{  public void removeRole(long rid){  Helper.delete(W.create("uid",this.getId()).and("rid",rid),UserRole.class);}  }
class C{  public InvalidDescriptionException(final Throwable cause,final String message){  super(message,cause);}  }
class C{  public boolean isClassSubclassOfIncluding(SootClass child,SootClass possibleParent){  child.checkLevel(SootClass.HIERARCHY);  possibleParent.checkLevel(SootClass.HIERARCHY);  List<SootClass> parentClasses=getSuperclassesOfIncluding(child);  if (parentClasses.contains(possibleParent))   return true;  for (  SootClass sc : parentClasses)   if (sc.isPhantom())   return true;  return false;}  }
class C{  public int indent(){  return indent;}  }
class C{  @Override public boolean contains(String item){  if (fVector != null) {    return fVector.contains(item);  }  if (item == null) {    for (int i=0; i < fLength; i++) {      if (fArray[i] == null)       return true;    }  } else {    for (int i=0; i < fLength; i++) {      if (item.equals(fArray[i]))       return true;    }  }  return false;}  }
class C{  private void uploadConfiguration(RetrieveAndRank service,SolrCluster cluster){  URL url=this.getClass().getClassLoader().getResource("solr_config.zip");  File configZip=null;  try {    configZip=new File(url.toURI());  } catch (  Exception e) {    logger.error(Messages.getString("SetupThread.ERROR_UPLOAD_CONFIG") + e.getMessage());  }  service.uploadSolrClusterConfigurationZip(cluster.getId(),Constants.CONFIGURATION_NAME,configZip).execute();  logger.info(Messages.getString("SetupThread.UPLOADING_CONFIG"));}  }
class C{  public FriendsEditListQuery deleteUserIds(List<Integer> value){  return unsafeParam("delete_user_ids",value);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public boolean removeEntity(final ProxyEntity proxyEntity){  final Session session=this.sessionFactory.openSession();  final Transaction transaction=session.beginTransaction();  session.delete(proxyEntity);  transaction.commit();  session.close();  return true;}  }
class C{  public AsyncCatchOptions withProbability(double probability){  this.probability=probability;  return this;}  }
class C{  public static Histogram multiply(Histogram x,double y){  return x.modifyEventCounters(null);}  }
class C{  public static Paint newGuidelinePaint(){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(SEMI_TRANSPARENT));  paint.setStrokeWidth(DEFAULT_GUIDELINE_THICKNESS_PX);  return paint;}  }
class C{  public static Simulation fromXml(File file) throws ParserConfigurationException, SAXException, IOException {  return XmlReader.fromXml(new InputSource(new FileReader(file)));}  }
class C{  public EqCommandTagException(final String descr){  super(descr);}  }
class C{  private int doEndOfFile() throws EOFException {  eof=true;  if (throwEofException) {    throw new EOFException();  }  return -1;}  }
class C{  public final int encrypt(ByteBuffer buf){  int size=buf.limit() - 2;  final int offset=buf.arrayOffset() + buf.position();  size=cryptEngine.encrypt(buf.array(),offset,size);  return size;}  }
class C{  private void initData(){  SharedPreferences sharedPreferences=getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  int versionCode=sharedPreferences.getInt(KEY_INTRODUCE_VERSION,FIRST_VERSION);  SharedPreferences.Editor editor=sharedPreferences.edit();  editor.putInt(KEY_INTRODUCE_VERSION,NEW_VERSION);  editor.apply();  introduceModelList=new ArrayList<>();switch (versionCode) {case FIRST_VERSION:    introduceModelList.add(new IntroduceModel(R.string.introduce_title_search,R.drawable.illustration_search,R.string.introduce_description_search));  introduceModelList.add(new IntroduceModel(R.string.introduce_title_filter,R.drawable.illustration_filter,R.string.introduce_description_filter));introduceModelList.add(new IntroduceModel(R.string.introduce_title_back_top,R.drawable.illustration_back_top,R.string.introduce_description_back_top));introduceModelList.add(new IntroduceModel(R.string.introduce_title_start,R.drawable.illustration_start,R.string.introduce_description_start));break;}}  }
class C{  @Override public void close(){}  }
class C{  public MetricInstance withMaker(MetricMaker maker){  return new MetricInstance(metricName,maker,dependencyMetricNames.toArray(new String[dependencyMetricNames.size()]));}  }
class C{  public MessagesDeleteDialogQuery deleteDialog(Actor actor){  return new MessagesDeleteDialogQuery(getClient(),actor);}  }
class C{  private void initialise(){  try {    maskByteRange=new int[noOfCol][];    maxKeys=new byte[noOfCol][];    for (int i=0; i < noOfCol; i++) {      maskByteRange[i]=getMaskByteRange(i);      long[] maxKey=new long[noOfCol];      maxKey[i]=Long.MAX_VALUE;      maxKeys[i]=keyGenerator.generateKey(maxKey);    }  } catch (  KeyGenException e) {    LOGGER.error(e,"Key generation failed while evaulating column group min max");  }}  }
class C{  public AccountBanUserQuery banUser(UserActor actor,int userId){  return new AccountBanUserQuery(getClient(),actor,userId);}  }
class C{  private FilteredDataTagValue makeFilterValue(SourceDataTag sdt,final ValueUpdate update,final SourceDataTagQuality sourceQuality,final boolean dynamicFiltered,final int filterApplied){  SourceDataTagValue currentVal=sdt.getCurrentValue();  FilteredDataTagValue returnValue=new FilteredDataTagValue(currentVal.getId(),currentVal.getName(),update.getValue().toString(),update.getValueDescription(),sourceQuality.getQualityCode().getQualityCode(),sourceQuality.getDescription(),new Timestamp(update.getSourceTimestamp()),sdt.getDataType(),dynamicFiltered,filterApplied);  return returnValue;}  }
class C{  public static SketchSetOperationPostAggregation makePostAggFromAgg(SketchSetOperationPostAggFunction function,String name,List<FilteredAggregation> filteredAggregationList){  List<PostAggregation> operands=filteredAggregationList.stream().map(null).collect(Collectors.toList());  return new SketchSetOperationPostAggregation(name,function,operands);}  }
class C{  protected boolean isEnabledForSVNResource(ISVNLocalResource svnResource) throws SVNException {  return super.isEnabledForSVNResource(svnResource) || svnResource.getParent().isManaged();}  }
class C{  public SVNRemoteResourcePropertySource(ISVNRemoteResource resource){  this.resource=resource;}  }
class C{  public void addTextBackground(EsriTextBackgroundInterface textBackgroundObj){  textBackgroundMap.put(textBackgroundObj.getBackgroundClass(),textBackgroundObj);}  }
class C{  public void addVendorOptionListener(PrefUpdateVendorOptionInterface listener){  if (!vendorOptionListenerList.contains(listener)) {    vendorOptionListenerList.add(listener);    listener.vendorOptionsUpdated(this.prefData.getVendorOptionVersionList());  }}  }
class C{  public Lexicon removeLowFreqWords(int minFreq){  int id=0;  Hashtable<Integer,Integer> translation=new Hashtable<Integer,Integer>();  for (  Entry<Integer,Word> e : idHash.entrySet()) {    Word w=e.getValue();    if (w.tf < minFreq) {      continue;    }    translation.put(w.id,id);    ++id;  }  return map(translation);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201144,value0);}  }
class C{  private static double doubleHighPart(double d){  if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN) {    return d;  }  long xl=Double.doubleToRawLongBits(d);  xl&=MASK_30BITS;  return Double.longBitsToDouble(xl);}  }
class C{  final public String browser(){  return this.getHeader("user-agent");}  }
class C{  public static boolean needsDefaultFormatter(ValueFormatter formatter){  if (formatter == null)   return true;  if (formatter instanceof DefaultValueFormatter)   return true;  return false;}  }
class C{  public int optInt(int index,int defaultValue){  LazyNode token=getOptionalValueToken(index);  if (token == null)   return defaultValue;  if (token.type == LazyNode.VALUE_NULL)   return defaultValue;  return token.getIntValue(cbuf);}  }
class C{  public GrantPermission(Permission[] permissions){  super(constructName(permissions=permissions.clone()));  grants=flatten(permissions);  for (int i=0; i < permissions.length; i++) {    if (permissions[i] instanceof UnresolvedPermission) {      unserializable=true;      return;    }  }}  }
class C{  public void addListener(CacheListener<K,V> listener){  listeners.add(listener);}  }
class C{  private void fail(String format,DruidAggregationQuery<?> druidQuery,Interval interval){  String message=String.format(format,interval);  Exception e=new IllegalStateException(message);  LOG.error(message,e);  getFailureCallback(druidQuery).invoke(e);}  }
class C{  public static ColumnReference column(String columnName){  return new ColumnReference(columnName);}  }
class C{  public static String fromUTF8(byte[] bytes){  CharsetDecoder decoder=Charset.forName("UTF-8").newDecoder();  decoder.onMalformedInput(CodingErrorAction.REPORT);  decoder.onUnmappableCharacter(CodingErrorAction.REPORT);  try {    return decoder.decode(ByteBuffer.wrap(bytes)).toString();  } catch (  CharacterCodingException cce) {    throw new IllegalArgumentException(cce);  }}  }
class C{  public void save(Boolean isCreate,Config config){  configDao.save(config);  if (isCreate) {    configDao.index(config);    if (!configDao.bindApp(config)) {      Logs.error("failed to bind app of config({})",config);    }  }}  }
class C{  private void insertIntermediateJump(int targetInsPos,int jumpInsPos,StmtVisitor stmtV,List<BuilderInstruction> instructions,LabelAssigner labelAssigner){  BuilderInstruction originalJumpInstruction=instructions.get(jumpInsPos);  Insn originalJumpInsn=stmtV.getInsnForInstruction(originalJumpInstruction);  if (originalJumpInsn == null)   return;  if (!(originalJumpInsn instanceof InsnWithOffset))   throw new RuntimeException("Unexpected jump instruction target");  InsnWithOffset offsetInsn=(InsnWithOffset)originalJumpInsn;  int distance=Math.max(targetInsPos,jumpInsPos) - Math.min(targetInsPos,jumpInsPos);  if (distance == 0)   return;  int newJumpIdx=Math.min(targetInsPos,jumpInsPos) + (distance / 2);  int sign=(int)Math.signum(targetInsPos - jumpInsPos);  if (distance > offsetInsn.getMaxJumpOffset())   newJumpIdx=jumpInsPos + sign;  while (stmtV.getStmtForInstruction(instructions.get(newJumpIdx)) == null) {    newJumpIdx+=sign;    if (newJumpIdx < 0 || newJumpIdx >= instructions.size())     throw new RuntimeException("No position for inserting intermediate " + "jump instruction found");  }  NopStmt nop=Jimple.v().newNopStmt();  Insn30t newJump=new Insn30t(Opcode.GOTO_32);  newJump.setTarget(stmtV.getStmtForInstruction(instructions.get(targetInsPos)));  BuilderInstruction newJumpInstruction=newJump.getRealInsn(labelAssigner);  instructions.add(newJumpIdx,newJumpInstruction);  stmtV.fakeNewInsn(nop,newJump,newJumpInstruction);  if (newJumpIdx < jumpInsPos)   jumpInsPos++;  if (newJumpIdx < targetInsPos)   targetInsPos++;  offsetInsn.setTarget(nop);  BuilderInstruction replacementJumpInstruction=offsetInsn.getRealInsn(labelAssigner);  instructions.add(jumpInsPos,replacementJumpInstruction);  instructions.remove(originalJumpInstruction);  stmtV.fakeNewInsn(stmtV.getStmtForInstruction(originalJumpInstruction),originalJumpInsn,replacementJumpInstruction);  Stmt afterNewJump=stmtV.getStmtForInstruction(instructions.get(newJumpIdx + 1));  Insn10t jumpAround=new Insn10t(Opcode.GOTO);  jumpAround.setTarget(afterNewJump);  BuilderInstruction jumpAroundInstruction=jumpAround.getRealInsn(labelAssigner);  instructions.add(newJumpIdx,jumpAroundInstruction);}  }
class C{  private UByte(short value) throws NumberFormatException {  this.value=rangeCheck(value);}  }
class C{  public synchronized void pauseCollecting(){  paused=true;}  }
class C{  public synchronized SlabAllocation attachAndAllocate(SlabRef slab,int desired){  attach(slab);  return allocate(desired);}  }
class C{  public RequestParams(Object... keysAndValues){  init();  int len=keysAndValues.length;  if (len % 2 != 0)   throw new IllegalArgumentException("Supplied arguments must be even");  for (int i=0; i < len; i+=2) {    String key=String.valueOf(keysAndValues[i]);    String val=String.valueOf(keysAndValues[i + 1]);    put(key,val);  }}  }
class C{  public static float swapFloat(float value){  return Float.intBitsToFloat(swapInteger(Float.floatToIntBits(value)));}  }
class C{  private static RealMatrix squareRoot(final RealMatrix m){  if (m instanceof DiagonalMatrix) {    final int dim=m.getRowDimension();    final RealMatrix sqrtM=new DiagonalMatrix(dim);    for (int i=0; i < dim; i++) {      sqrtM.setEntry(i,i,FastMath.sqrt(m.getEntry(i,i)));    }    return sqrtM;  } else {    final EigenDecomposition dec=new EigenDecomposition(m);    return dec.getSquareRoot();  }}  }
class C{  protected final boolean scanDecls(boolean complete) throws IOException, XNIException {  skipSeparator(false,true);  boolean again=true;  while (again && fScannerState == SCANNER_STATE_MARKUP_DECL) {    again=complete;    if (fEntityScanner.skipChar('<')) {      fMarkUpDepth++;      if (fEntityScanner.skipChar('?')) {        scanPI();      } else       if (fEntityScanner.skipChar('!')) {        if (fEntityScanner.skipChar('-')) {          if (!fEntityScanner.skipChar('-')) {            reportFatalError("MSG_MARKUP_NOT_RECOGNIZED_IN_DTD",null);          } else {            scanComment();          }        } else         if (fEntityScanner.skipString("ELEMENT")) {          scanElementDecl();        } else         if (fEntityScanner.skipString("ATTLIST")) {          scanAttlistDecl();        } else         if (fEntityScanner.skipString("ENTITY")) {          scanEntityDecl();        } else         if (fEntityScanner.skipString("NOTATION")) {          scanNotationDecl();        } else         if (fEntityScanner.skipChar('[') && !scanningInternalSubset()) {          scanConditionalSect(fPEDepth);        } else {          fMarkUpDepth--;          reportFatalError("MSG_MARKUP_NOT_RECOGNIZED_IN_DTD",null);        }      } else {        fMarkUpDepth--;        reportFatalError("MSG_MARKUP_NOT_RECOGNIZED_IN_DTD",null);      }    } else     if (fIncludeSectDepth > 0 && fEntityScanner.skipChar(']')) {      if (!fEntityScanner.skipChar(']') || !fEntityScanner.skipChar('>')) {        reportFatalError("IncludeSectUnterminated",null);      }      if (fDTDHandler != null) {        fDTDHandler.endConditional(null);      }      fIncludeSectDepth--;      fMarkUpDepth--;    } else     if (scanningInternalSubset() && fEntityScanner.peekChar() == ']') {      return false;    } else     if (fEntityScanner.skipSpaces()) {    } else {      reportFatalError("MSG_MARKUP_NOT_RECOGNIZED_IN_DTD",null);      int ch;      do {        fEntityScanner.scanChar();        skipSeparator(false,true);        ch=fEntityScanner.peekChar();      } while (ch != '<' && ch != ']' && !XMLChar.isSpace(ch));    }    skipSeparator(false,true);  }  return fScannerState != SCANNER_STATE_END_OF_INPUT;}  }
class C{  public void testPojoAccessors2(){  final Class<?> type=PojoAccessors2.class;  PojoTypeInfo typeInfo=PojoTypeInfoRepository.getPojoTypeInfo(type);  assertPojoTypeInfo(typeInfo,type);  Assert.assertEquals("numOfProperties",6,typeInfo.getNumOfProperties());  assertPojoPropertyInfo(typeInfo,"class",Class.class,true,false);  assertPojoPropertyInfo(typeInfo,"publicName",String.class,true,true);  assertPojoPropertyInfo(typeInfo,"protectedName",String.class,true,true);  assertPojoPropertyInfo(typeInfo,"privateName",String.class,true,true);  assertPojoPropertyInfo(typeInfo,"defaultName",String.class,true,true);  assertPojoPropertyInfo(typeInfo,"extraName",String.class,true,true);  Assert.assertEquals(type,typeInfo.getProperty("publicName").getGetterMethod().getDeclaringClass());  Assert.assertEquals(type,typeInfo.getProperty("publicName").getSetterMethod().getDeclaringClass());  Assert.assertEquals(type,typeInfo.getProperty("protectedName").getGetterMethod().getDeclaringClass());  Assert.assertEquals(type,typeInfo.getProperty("protectedName").getSetterMethod().getDeclaringClass());  Assert.assertEquals(type,typeInfo.getProperty("privateName").getGetterMethod().getDeclaringClass());  Assert.assertEquals(type,typeInfo.getProperty("privateName").getSetterMethod().getDeclaringClass());}  }
class C{  @SuppressWarnings("unused") public void addSlide(SlideFragment slideFragment,MessageButtonBehaviour messageButtonBehaviour){  adapter.addItem(slideFragment);  messageButtonBehaviours.put(adapter.getLastItemPosition(),messageButtonBehaviour);}  }
class C{  public static String generateClientIdWithTimestamp(final String clientId,final ProtocolVersionEnum protocol){  final int addedLength=CLIENT_ID_TIMESTAMP_FORMAT.length() + CLIENT_ID_TIMESTAMP_DELIMITER.length();  final int index=clientId.lastIndexOf(CLIENT_ID_TIMESTAMP_DELIMITER);  String newClientId=clientId;  if (index >= 0 && (index + addedLength == newClientId.length())) {    newClientId=newClientId.substring(0,index);  }  if (limitClientId(protocol) && newClientId.length() + addedLength > MAX_CLIENT_LENGTH_FOR_3_1) {    newClientId=newClientId.substring(0,MAX_CLIENT_LENGTH_FOR_3_1 - addedLength);  }  newClientId=newClientId + CLIENT_ID_TIMESTAMP_DELIMITER + CLIENT_ID_SDF.format(new Date());  return newClientId;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_INTERVAL_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200688,num0,skillcaster,skillname);}  }
class C{  private void pruneScrapViews(){  final int maxViews=activeViews.length;  final int viewTypeCount=this.viewTypeCount;  final SparseArray<View>[] scrapViews=this.scrapViews;  for (int i=0; i < viewTypeCount; ++i) {    final SparseArray<View> scrapPile=scrapViews[i];    int size=scrapPile.size();    final int extras=size - maxViews;    size--;    for (int j=0; j < extras; j++) {      scrapPile.remove(scrapPile.keyAt(size--));    }  }}  }
class C{  private final int clearChunkIndex(int data[][],int chunk,int index){  int value=data[chunk] != null ? data[chunk][index] : -1;  if (value != -1) {    data[chunk][CHUNK_SIZE]--;    data[chunk][index]=-1;    if (data[chunk][CHUNK_SIZE] == 0) {      data[chunk]=null;    }  }  return value;}  }
class C{  private void ensureUniquePageName(String parentPageName,List<Page> pages){  String parentPageNameInError=parentPageName.isEmpty() ? "Top Level" : parentPageName;  SymbolTable symbolTable=getModel().getSymbolTable();  Set<String> names=Sets.newHashSet();  for (  Page page : pages) {    if (Strings.isNullOrEmpty(page.getName())) {      error(getModel(),"Found empty subpage name of '%s' page.",parentPageNameInError);    } else     if (names.contains(page.getName())) {      error(getModel(),"Found duplicate subpage name '%s' of '%s' page.",page.getName(),parentPageNameInError);    } else     if (symbolTable.resolve(String.format("%s.%s",parentPageName,page.getName())) != null) {      error(getModel(),"Found conflict subpage name '%s' of '%s' page with ProtoElement.",page.getName(),parentPageNameInError);    } else {      names.add(page.getName());    }  }}  }
class C{  protected NewsfeedUnsubscribeQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  public BlockFieldMatrix(final Field<T> field,final int rows,final int columns) throws MathIllegalArgumentException {  super(field,rows,columns);  this.rows=rows;  this.columns=columns;  blockRows=(rows + BLOCK_SIZE - 1) / BLOCK_SIZE;  blockColumns=(columns + BLOCK_SIZE - 1) / BLOCK_SIZE;  blocks=createBlocksLayout(field,rows,columns);}  }
class C{  public Coord minus(Coord coord){  return new Coord(x - coord.x,y - coord.y);}  }
class C{  public Iterator iterator(){  return new Iterator();}  }
class C{  private void initData(Context context){  scroller=new WheelScroller(getContext(),scrollingListener);}  }
class C{  public static void main(String[] args){  System.out.println(OS);  if (isWindows()) {    System.out.println("This is Windows");  } else   if (isMac()) {    System.out.println("This is Mac");  } else   if (isUnix()) {    System.out.println("This is Unix or Linux");  } else   if (isSolaris()) {    System.out.println("This is Solaris");  } else {    System.out.println("Your OS is not support!!");  }}  }
class C{  public NakagamiDistribution(double mu,double omega) throws MathIllegalArgumentException {  this(mu,omega,DEFAULT_SOLVER_ABSOLUTE_ACCURACY);}  }
class C{  public StandardDeviation(final SecondMoment m2){  this(new Variance(m2));}  }
class C{  public boolean checkLogin(int accountId,int loginOk){  return this.accountId == accountId && this.loginOk == loginOk;}  }
class C{  public String toString(){  String s="{";  for (int j=0; j < size(); j++)   s+=(j == 0 ? "" : ",") + get(j);  return s + "}";}  }
class C{  public static void showProgressDialog(final Context context,String tag,final String message){  final Activity activity=getActivity(context);  if (!isAlive(activity) || activity.isFinishing())   return;  if (tag == null)   tag=DEFAULT_TAG;  ProgressDialog dialog=null;synchronized (sLock) {    dialog=findDialog(tag);    if (!isAlive(dialog)) {      if (dialog != null)       sDialogs.remove(dialog);      dialog=new ProgressDialog(context);      dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);      dialog.setCancelable(false);      sDialogs.put(dialog,new Tag(tag,activity.hashCode()));    }  }  dialog.setMessage(message);  dialog.show();}  }
class C{  public static void main(String[] args){  File f=new File("/Users/wujun/d/workspace/giiwa/README.md");  System.out.println(md5(f));}  }
class C{  public static String loadFileToString(String sFilename,int iMaxLen){  StringBuffer sb=new StringBuffer();  try {    BufferedReader in=new BufferedReader(new FileReader(sFilename));    String line;    while (((line=in.readLine()) != null) && (sb.length() + line.length() < iMaxLen)) {      sb.append(line);    }    in.close();  } catch (  Exception e) {    System.err.println("Coult not load file:" + sFilename);    e.printStackTrace(System.err);  }  return sb.toString();}  }
class C{  public void createBmxDppParameterFiles(){  JAXBSource source=dppToJaxbSource(dpp);  bmxDppParameters=new HashMap<>();  bmxDppParameters.put(DMFramework.UKDPP,createBmxFrameworkParameterFile(source,DMFramework.UKDPP,workingDir));  bmxDppParameters.put(DMFramework.AS11CORE,createBmxFrameworkParameterFile(source,DMFramework.AS11CORE,workingDir));  bmxDppParameters.put(DMFramework.AS11Segmentation,createBmxFrameworkParameterFile(source,DMFramework.AS11Segmentation,workingDir));}  }
class C{  @Override public boolean hasSourceDataTag(final Long tagID){  return sourceDataTags.get(tagID) != null;}  }
class C{  public void clearShapes(){  sample2shape.clear();}  }
class C{  public AppMenuHandler(Activity activity,AppMenuPropertiesDelegate delegate,int menuResourceId){  mActivity=activity;  mDelegate=delegate;  mObservers=new ArrayList<AppMenuObserver>();  mMenuResourceId=menuResourceId;  mHardwareButtonMenuAnchor=activity.findViewById(R.id.menu_anchor_stub);  assert mHardwareButtonMenuAnchor != null : "Using AppMenu requires to have menu_anchor_stub view";}  }
class C{  @Override public Schema schema(){  return schema;}  }
class C{  public static void registerOreGen(ResourceLocation id,IBlockState ore,IBlockState replaceable,int veinSize,int minY,int maxY,int dimension,int attempts){  registerOreGen(id,ore,new IBlockState[]{replaceable},veinSize,minY,maxY,new int[]{dimension},attempts);}  }
class C{  private void initData(){  this.service=UserService.getService();  this.state=INPUT_STATE;}  }
class C{  private static Type toSoot(String typeDescriptor,int pos){  Type type;  char typeDesignator=typeDescriptor.charAt(pos);switch (typeDesignator) {case 'Z':    type=BooleanType.v();  break;case 'B':type=ByteType.v();break;case 'S':type=ShortType.v();break;case 'C':type=CharType.v();break;case 'I':type=IntType.v();break;case 'J':type=LongType.v();break;case 'F':type=FloatType.v();break;case 'D':type=DoubleType.v();break;case 'L':type=RefType.v(Util.dottedClassName(typeDescriptor));break;case 'V':type=VoidType.v();break;case '[':type=toSoot(typeDescriptor,pos + 1).makeArrayType();break;default :type=UnknownType.v();}return type;}  }
class C{  protected void wrapContent(){  mWidget.setMinWidth(100);  mWidget.setMinHeight(30);  int tw=mWidget.getMinWidth();  int th=mWidget.getMinHeight();  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {    mWidget.setWidth(tw);  }  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {    mWidget.setHeight(th);  }  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {    if (mWidget.getWidth() <= mWidget.getMinWidth()) {      mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);    }  }  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {    if (mWidget.getHeight() <= mWidget.getMinHeight()) {      mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);    }  }  mWidget.setBaselineDistance(0);}  }
class C{  public static JsonArray array(float... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JsonArray array=new JsonArray();  for (  float value : values) {    array.add(value);  }  return array;}  }
class C{  public TPrimitiveIterator(TPrimitiveHash hash){  super(hash);  _hash=hash;}  }
class C{  public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(DiffMovingAverage.class.getSimpleName() + "; Current average: " + currentAverage+ "; Last Diffs: ");  for (  long i : diffs) {    buffer.append("[" + i + "]");  }  return buffer.toString();}  }
class C{  public static JavaTypeConverter determineCollectionConverter(ParameterizedType ptype){  JavaType javaType;  Type rawType=ptype.getRawType();  if (List.class.equals(rawType)) {    Class<?> listGenericType=(Class<?>)ptype.getActualTypeArguments()[0];    javaType=JsonUtil.INSTANCE.createCollectionType(List.class,listGenericType);  } else   if (Set.class.equals(rawType)) {    Class<?> setGenericType=(Class<?>)ptype.getActualTypeArguments()[0];    javaType=JsonUtil.INSTANCE.createCollectionType(Set.class,setGenericType);  } else {    Class<?> mapKeyType=(Class<?>)ptype.getActualTypeArguments()[0];    Class<?> mapValueType=(Class<?>)ptype.getActualTypeArguments()[1];    javaType=JsonUtil.INSTANCE.createCollectionType(Map.class,mapKeyType,mapValueType);  }  return new JavaTypeConverter(javaType);}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  @Override public SubPlane wholeHyperplane(){  return new SubPlane(this,new PolygonsSet(tolerance));}  }
class C{  public final boolean useSkill(int skillId){  return useSkill(skillId,1);}  }
class C{  MultiFinderPatternFinder(BitMatrix image){  super(image);}  }
class C{  private void handleOwnershipAcquireFailedException(StreamOp op,final OwnershipAcquireFailedException oafe){  logger.warn("Failed to write data into stream {} because stream is acquired by {} : {}",new Object[]{name,oafe.getCurrentOwner(),oafe.getMessage()});  AsyncLogWriter oldWriter=null;  boolean statusChanged=false;synchronized (this) {    if (StreamStatus.INITIALIZED == status) {      oldWriter=setStreamStatus(StreamStatus.BACKOFF,StreamStatus.INITIALIZED,null,oafe.getCurrentOwner(),oafe);      statusChanged=true;    }  }  if (statusChanged) {    Abortables.asyncAbort(oldWriter,false);    scheduleTryAcquireOnce(nextAcquireWaitTimeMs);  }  op.fail(oafe);}  }
class C{  @Override public String toString(){  return getSelectAllQuery();}  }
class C{  public DirEntry(Constant key,long blockNum){  this.key=key;  this.blockNum=blockNum;}  }
class C{  public static String encode(String s,Type t){  return _encode(s,t,false,false);}  }
class C{  public static void attach(@NotNull Module module,@NotNull OSProcessHandler processHandler,@NotNull String processTitle){  final ConsoleView console=getConsole(module);  console.attachToProcess(processHandler);  show(module,console,processTitle);}  }
class C{  @VisibleForTesting public void cleanAllMiniDumps(){  cleanOutAllNonFreshMinidumpFiles();  for (  File f : getAllMinidumpFiles()) {    deleteFile(f);  }}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  public void waitToFinish(){  flush();  if (future != null) {    try {      future.get();    } catch (    InterruptedException|ExecutionException e) {      LOG.error(e.getMessage());    }  }  LOG.info("All tasks done!");}  }
class C{  public static void dropAllTables(Database db,boolean ifExists){  CollectDao.dropTable(db,ifExists);  UserDao.dropTable(db,ifExists);}  }
class C{  public Date toJdkDate(){  return toJodaDateTime().toDate();}  }
class C{  @Override public boolean isReadOnly(){  return readOnly;}  }
class C{  public TrapezoidIntegrator(final double relativeAccuracy,final double absoluteAccuracy,final int minimalIterationCount,final int maximalIterationCount) throws MathIllegalArgumentException {  super(relativeAccuracy,absoluteAccuracy,minimalIterationCount,maximalIterationCount);  if (maximalIterationCount > TRAPEZOID_MAX_ITERATIONS_COUNT) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,maximalIterationCount,TRAPEZOID_MAX_ITERATIONS_COUNT);  }}  }
class C{  public MessagesGetQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  final public static long updateCollection(Bson query,V v,Class<? extends Bean> t){  String collection=getCollection(t);  if (collection != null && !"none".equals(collection)) {    return updateCollection(collection,query,v);  }  return -1;}  }
class C{  private void updateListOfFields(final Map<String,Object> fieldsToUpdate,final Object targetObject) throws NoSuchFieldException, IllegalAccessException {  for (  Entry<String,Object> fieldEntry : fieldsToUpdate.entrySet()) {    String fieldName=fieldEntry.getKey();    Field field=getField(targetObject.getClass(),fieldName);    if (field == null) {      throw new NoSuchFieldException("Field: '" + fieldName + "' not found "+ "in "+ targetObject.getClass().getName());    }    setSimpleField(targetObject,fieldName,fieldEntry.getValue());  }}  }
class C{  public static float readFloat(DataInputStream dis,boolean isBigEndian) throws IOException {  float val;  if (!isBigEndian) {    val=readLittleEndianFloat(dis);  } else {    val=dis.readFloat();  }  return val;}  }
class C{  public static final Vector2[] show(Window owner){  ApplyForceAtPointDialog afd=new ApplyForceAtPointDialog(owner);  afd.setLocationRelativeTo(owner);  afd.setVisible(true);  if (!afd.canceled) {    return new Vector2[]{afd.forceAtPointPanel.getForce(),afd.forceAtPointPanel.getPoint()};  }  return null;}  }
class C{  public static void show(Context context,int resId,int duration,int gravity){  show(context,resId == 0 ? null : getString(context,resId),duration,gravity);}  }
class C{  public LikesGetListQueryWithExtended skipOwn(Boolean value){  return unsafeParam("skip_own",value);}  }
