class C{  public static boolean canTransparent(List constraints){  for (Iterator iter=constraints.iterator(); iter.hasNext(); ) {    DockConstraint dc=(DockConstraint)iter.next();    if (!dc.canTransparent())     return false;  }  return true;}  }
class C{  void generateStaticProxy(Class<?> clazz){  imports.clear();  addImport(InvocationHandler.class);  addImport(Method.class);  addImport(clazz);  className=getClassName(clazz) + "Proxy";  for (  Method m : clazz.getDeclaredMethods()) {    if (Modifier.isStatic(m.getModifiers())) {      if (!Modifier.isPrivate(m.getModifiers())) {        addMethod(m);      }    }  }}  }
class C{  public final void testNumberWithContextParameter(){  assertNotNull(Validators.number(getContext()));}  }
class C{  public ConfigurationHTTPAdapter configure(String resource) throws RuntimeException {  if (log.isInfoEnabled()) {    log.info("Configuring from resource: " + resource);  }  InputStream stream=getConfigurationInputStream(resource);  ConfigurationHTTPAdapterParser.doConfigure(this,stream,resource);  return this;}  }
class C{  public Object resolveRemote(String type,String url) throws IOException {  HessianRemoteResolver resolver=getRemoteResolver();  if (resolver != null)   return resolver.lookup(type,url); else   return new BurlapRemote(type,url);}  }
class C{  public final int moveOntoSubstack(int n){  int x;  for (x=0; x < n; x++) {    if (onStack == 0)     break;    ADFContext obj=stack[--onStack];    if (onSubstack == substack.length) {      ADFContext[] newsubstack=new ADFContext[substack.length * 2];      System.arraycopy(substack,0,newsubstack,0,substack.length);      substack=newsubstack;    }    substack[onSubstack++]=obj;  }  return x;}  }
class C{  @Override public Bundle onSaveInstanceState(){  if (!isShowing())   return null;  Bundle bundle=new Bundle();  bundle.putParcelable(INSTANCE_KEY_COMPONENT,mLaunchComponent);  bundle.putBundle(INSTANCE_KEY_APPDATA,mAppSearchData);  bundle.putString(INSTANCE_KEY_USER_QUERY,mUserQuery);  return bundle;}  }
class C{  public T caseStatechartRoot(StatechartRoot object){  return null;}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  @Override public void fromData(DataInput in) throws IOException, ClassNotFoundException {  super.fromData(in);  refreshInterval=in.readLong();  alertDefs=(StatAlertDefinition[])DataSerializer.readObjectArray(in);}  }
class C{  public CActionInsertView(final JFrame parent,final ZyGraph graph,final IViewContainer viewContainer){  super("Insert View");  m_parent=parent;  m_graph=graph;  m_viewContainer=viewContainer;}  }
class C{  private static boolean compareVideoCodec(VideoCodec codec1,VideoCodec codec2){  if (codec1.getEncoding().equalsIgnoreCase(codec2.getEncoding()) && (codec1.getWidth() == codec2.getWidth() || codec1.getWidth() == 0 || codec2.getWidth() == 0) && (codec1.getHeight() == codec2.getHeight() || codec1.getHeight() == 0 || codec2.getHeight() == 0)) {    if (codec1.getEncoding().equalsIgnoreCase(H264Config.CODEC_NAME)) {      if (H264Config.getCodecProfileLevelId(codec1.getParameters()).compareToIgnoreCase(H264Config.getCodecProfileLevelId(codec2.getParameters())) == 0) {        return true;      }    } else {      if (codec1.getParameters().equalsIgnoreCase(codec2.getParameters())) {        return true;      }    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:05.463 -0500",hash_original_method="152BBD78ACB87D16BE4EC07F107E0DF8",hash_generated_method="FE82D2B1F6EB0C509E44BD0A381CFAFA") public Configuration(Configuration o){  setTo(o);}  }
class C{  @Override public String[] evalBIgnoredPunctuationTags(){  return collinsPunctTags;}  }
class C{  public static boolean containsSlowly(Polygon polygon,double latitude,double longitude){  if (polygon.getHoles().length > 0) {    throw new UnsupportedOperationException("this testing method does not support holes");  }  double polyLats[]=polygon.getPolyLats();  double polyLons[]=polygon.getPolyLons();  if (latitude < polygon.minLat || latitude > polygon.maxLat || longitude < polygon.minLon || longitude > polygon.maxLon) {    return false;  }  boolean c=false;  int i, j;  int nvert=polyLats.length;  double verty[]=polyLats;  double vertx[]=polyLons;  double testy=latitude;  double testx=longitude;  for (i=0, j=nvert - 1; i < nvert; j=i++) {    if (((verty[i] > testy) != (verty[j] > testy)) && (testx < (vertx[j] - vertx[i]) * (testy - verty[i]) / (verty[j] - verty[i]) + vertx[i]))     c=!c;  }  return c;}  }
class C{  public static boolean shouldShowStartOnStartupWindow(){  return !CommonUtils.isPortable() && (OSUtils.isMacOSX() || WindowsUtils.isLoginStatusAvailable());}  }
class C{  public ReversedWildcardFilterFactory(Map<String,String> args){  super(args);  withOriginal=getBoolean(args,"withOriginal",true);  maxPosAsterisk=getInt(args,"maxPosAsterisk",2);  maxPosQuestion=getInt(args,"maxPosQuestion",1);  minTrailing=getInt(args,"minTrailing",2);  maxFractionAsterisk=getFloat(args,"maxFractionAsterisk",0.0f);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public DownloadStatusConfiguration build(){  return new DownloadStatusConfiguration(this);}  }
class C{  public KeyPair createKeys() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeySpecException {  DHPublicKey publicKey=(DHPublicKey)this.getValueLinkPublicKey();  DHParameterSpec dhParamSpec=publicKey.getParams();  KeyPairGenerator keyGen=KeyPairGenerator.getInstance("DH");  keyGen.initialize(dhParamSpec);  KeyPair keyPair=keyGen.generateKeyPair();  return keyPair;}  }
class C{  public Name parse(String name) throws NamingException {  return new CompoundName(name.replace('.','/'),syntax);}  }
class C{  public Long registerUserByObject(Object regObjectObj){  try {    @SuppressWarnings("unchecked") Map<?,?> regObject=(Map<Object,Object>)regObjectObj;    String domain=regObject.get("domain").toString();    String port=regObject.get("port").toString();    String webapp=regObject.get("webapp").toString();    String baseURL="http://" + domain + ":"+ port+ webapp;    if (port.equals("80")) {      baseURL="http://" + domain + webapp;    } else     if (port.equals("443")) {      baseURL="https://" + domain + webapp;    }    return userManagement.registerUser(regObject.get("Username").toString(),regObject.get("Userpass").toString(),regObject.get("lastname").toString(),regObject.get("firstname").toString(),regObject.get("email").toString(),new Date(),regObject.get("street").toString(),regObject.get("additionalname").toString(),regObject.get("fax").toString(),regObject.get("zip").toString(),Long.valueOf(regObject.get("states_id").toString()).longValue(),regObject.get("town").toString(),Long.valueOf(regObject.get("language_id").toString()).longValue(),"",baseURL,true,regObject.get("jNameTimeZone").toString());  } catch (  Exception ex) {    log.error("registerUserByObject",ex);  }  return new Long(-1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.207 -0400",hash_original_method="18818CB637EBC5CF82DC4C50B37FB17C",hash_generated_method="6B4F856B395D4DD199D66097848438EE") private Thread fullGetFirstQueuedThread(){  Node h, s;  Thread st;  if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;  Node t=tail;  Thread firstThread=null;  while (t != null && t != head) {    Thread tt=t.thread;    if (tt != null)     firstThread=tt;    t=t.prev;  }  return firstThread;}  }
class C{  public Quaternionf rotation(float angleX,float angleY,float angleZ){  double thetaX=angleX * 0.5;  double thetaY=angleY * 0.5;  double thetaZ=angleZ * 0.5;  double thetaMagSq=thetaX * thetaX + thetaY * thetaY + thetaZ * thetaZ;  double s;  if (thetaMagSq * thetaMagSq / 24.0f < 1E-8f) {    w=(float)(1.0 - thetaMagSq / 2.0);    s=1.0 - thetaMagSq / 6.0;  } else {    double thetaMag=Math.sqrt(thetaMagSq);    w=(float)Math.cos(thetaMag);    s=Math.sin(thetaMag) / thetaMag;  }  x=(float)(thetaX * s);  y=(float)(thetaY * s);  z=(float)(thetaZ * s);  return this;}  }
class C{  private RegistryClients(){}  }
class C{  public void storeLocal(final int local){  storeInsn(getLocalType(local),local);}  }
class C{  private void writeName(String uri,String localName,String qName,boolean isElement) throws SAXException {  String prefix=doPrefix(uri,qName,isElement);  if (prefix != null && !"".equals(prefix)) {    write(prefix);    write(':');  }  if (localName != null && !"".equals(localName)) {    write(localName);  } else {    int i=qName.indexOf(':');    write(qName.substring(i + 1,qName.length()));  }}  }
class C{  private boolean isNewAnonymousClass(JCTree tree){  return tree.getTag() == JCTree.Tag.NEWCLASS && ((JCNewClass)tree).encl == null;}  }
class C{  public boolean isSetRenameToDb(){  return this.renameToDb != null;}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  SolrInputField f(String name,Object... values){  return field(name,1.0F,values);}  }
class C{  @Override public void sendFullStatus(Train train) throws IOException {  ArrayList<Attribute> status=new ArrayList<Attribute>();  if (train != null) {    status.add(new Attribute(TRAIN,train.getName()));    status.add(new Attribute(TRAINLOCATION,train.getCurrentLocationName()));    status.add(new Attribute(TRAINLENGTH,String.valueOf(train.getTrainLength())));    status.add(new Attribute(TRAINWEIGHT,String.valueOf(train.getTrainWeight())));    status.add(new Attribute(TRAINCARS,String.valueOf(train.getNumberCarsInTrain())));    status.add(new Attribute(TRAINLEADLOCO,constructTrainLeadLoco(train.getName())));    status.add(new Attribute(TRAINCABOOSE,constructTrainCaboose(train.getName())));    sendMessage(status);  }}  }
class C{  public void shutdown(){}  }
class C{  private void checkNotEqual(UnknownFieldSet s1,UnknownFieldSet s2){  String equalsError=String.format("%s should not be equal to %s",s1,s2);  assertFalse(equalsError,s1.equals(s2));  assertFalse(equalsError,s2.equals(s1));  assertFalse(String.format("%s should have a different hash code from %s",s1,s2),s1.hashCode() == s2.hashCode());}  }
class C{  protected static void doLogout() throws Exception {  System.out.println("BaseServiceTest ::  Executing doLogout with user : admin, password : admin.");  if (httpclient != null) {    CloseableHttpResponse logoutResponse=null;    try {      HttpUriRequest logout=RequestBuilder.get().setUri(new URI(LOGOUT_URL)).build();      logoutResponse=httpclient.execute(logout);      try {        HttpEntity entity=logoutResponse.getEntity();        EntityUtils.consume(entity);      }  finally {        if (logoutResponse != null)         logoutResponse.close();        httpclient.close();        httpclient=null;      }    } catch (    Exception failed) {      logException(failed);      throw failed;    }    System.out.println("BaseServiceTest ::  Executed doLogout");  } else {    System.out.println("BaseServiceTest ::  User NOT logged-in");  }}  }
class C{  protected boolean canExecuteScripts(){  return Groovy.isPresent();}  }
class C{  @DSComment("not sensitive") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:42.494 -0500",hash_original_method="1ACC3FF49FD09C78DA86C982A642A64A",hash_generated_method="5F360D27F21F0CD30A4027B4D00D5D92") @Override public synchronized void flush() throws IOException {  checkNotClosed();  flushInternal();  out.flush();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SBC");  translateAll(environment,instruction,"SBC",instructions);}  }
class C{  public File[] selectImportFiles(final String title,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){  if (Boolean.parseBoolean(System.getProperty("use.native.choosers",Boolean.toString(OSType.isMac())))) {    FileDialog importDialog=fileDialogs.get(title);    if (importDialog == null) {      importDialog=new FileDialog(this,title,FileDialog.LOAD);      fileDialogs.put(title,importDialog);    }    importDialog.setVisible(true);    if (importDialog.getFile() != null) {      return new File[]{new File(importDialog.getDirectory(),importDialog.getFile())};    }  } else {    JFileChooser importChooser=fileChoosers.get(title);    if (importChooser == null) {      importChooser=new JFileChooser(Utils.getCWD());      importChooser.setMultiSelectionEnabled(multipleSelection);      for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) {        importChooser.setFileFilter(fileNameExtensionFilter);      }      importChooser.setDialogTitle(title);      fileChoosers.put(title,importChooser);    }    int returnVal=importChooser.showOpenDialog(this);    if (returnVal == JFileChooser.APPROVE_OPTION) {      if (importChooser.isMultiSelectionEnabled()) {        return importChooser.getSelectedFiles();      } else {        return new File[]{importChooser.getSelectedFile()};      }    }  }  return null;}  }
class C{  private void updateRandomValues(){  for (int i=0; i < mBlockNumber; i++) {    for (int j=0; j < DEFAULT_NUMBER_RANDOM_VALUES; j++) {      mBlockValues[i][j]=mRandom.nextFloat();      if (mBlockValues[i][j] < 0.1) {        mBlockValues[i][j]=0.1f;      }    }  }}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  return mInflater.inflate(mLayout,parent,false);}  }
class C{  public static boolean isAppleJVM(){  return isJvmVendor(APPLE_JVM_VENDOR_NAME);}  }
class C{  private void writeAsPDF(File file,int w,int h){  if (!isOrsonPDFAvailable()) {    throw new IllegalStateException("OrsonPDF is not present on the classpath.");  }  ParamChecks.nullNotPermitted(file,"file");  try {    Class pdfDocClass=Class.forName("com.orsonpdf.PDFDocument");    Object pdfDoc=pdfDocClass.newInstance();    Method m=pdfDocClass.getMethod("createPage",Rectangle2D.class);    Rectangle2D rect=new Rectangle(w,h);    Object page=m.invoke(pdfDoc,rect);    Method m2=page.getClass().getMethod("getGraphics2D");    Graphics2D g2=(Graphics2D)m2.invoke(page);    g2.setRenderingHint(JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION,true);    Rectangle2D drawArea=new Rectangle2D.Double(0,0,w,h);    this.chart.draw(g2,drawArea);    Method m3=pdfDocClass.getMethod("writeToFile",File.class);    m3.invoke(pdfDoc,file);  } catch (  ClassNotFoundException ex) {    throw new RuntimeException(ex);  }catch (  InstantiationException ex) {    throw new RuntimeException(ex);  }catch (  IllegalAccessException ex) {    throw new RuntimeException(ex);  }catch (  NoSuchMethodException ex) {    throw new RuntimeException(ex);  }catch (  SecurityException ex) {    throw new RuntimeException(ex);  }catch (  IllegalArgumentException ex) {    throw new RuntimeException(ex);  }catch (  InvocationTargetException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public boolean isDvdOrder(){  return isDvdOrder;}  }
class C{  public boolean add(T item){  return map.put(item.getName(),item) != null;}  }
class C{  @Override public int hashCode(){  int result=193;  result=37 * result + HashUtilities.hashCodeForDoubleArray(this.polygon);  result=37 * result + HashUtilities.hashCodeForPaint(this.fillPaint);  result=37 * result + HashUtilities.hashCodeForPaint(this.outlinePaint);  if (this.stroke != null) {    result=37 * result + this.stroke.hashCode();  }  return result;}  }
class C{  public void hleKernelNotifyCallback(int callbackType,int notifyArg){  hleKernelNotifyCallback(callbackType,-1,notifyArg);}  }
class C{  Property(String property) throws IncompletePropertyException {  try {    ArrayList<String> parts=new ArrayList<>();    boolean bCanSplit=true;    int j=0;    String substr;    if (CSSMin.debugLogging) {      LOG.info("\t\tExamining property: " + property);    }    for (int i=0; i < property.length(); i++) {      if (!bCanSplit) {        bCanSplit=(property.charAt(i) == '"');      } else       if (property.charAt(i) == '"') {        bCanSplit=false;      } else       if (property.charAt(i) == ':' && parts.isEmpty()) {        substr=property.substring(j,i);        if (!(substr.trim().equals("")))         parts.add(substr);        j=i + 1;      }    }    substr=property.substring(j,property.length());    if (!(substr.trim().equals("")))     parts.add(substr);    if (parts.size() < 2) {      throw new IncompletePropertyException(property);    }    String prop=parts.get(0).trim();    if (!(prop.length() > 2 && prop.substring(0,2).equals("--"))) {      prop=prop.toLowerCase();    }    this.property=prop;    this.parts=parseValues(simplifyColours(parts.get(1).trim().replaceAll(", ",",")));  } catch (  PatternSyntaxException e) {  }}  }
class C{  public static String geoTermToString(long term){  StringBuilder s=new StringBuilder(64);  final int numberOfLeadingZeros=Long.numberOfLeadingZeros(term);  for (int i=0; i < numberOfLeadingZeros; i++) {    s.append('0');  }  if (term != 0) {    s.append(Long.toBinaryString(term));  }  return s.toString();}  }
class C{  private boolean mapLabels() throws PKCS11Exception, CertificateException, KeyStoreException {  CK_ATTRIBUTE[] trustedAttr=new CK_ATTRIBUTE[]{new CK_ATTRIBUTE(CKA_TRUSTED)};  Session session=null;  try {    session=token.getOpSession();    ArrayList<byte[]> pkeyIDs=new ArrayList<byte[]>();    CK_ATTRIBUTE[] attrs=new CK_ATTRIBUTE[]{ATTR_TOKEN_TRUE,ATTR_CLASS_PKEY};    long[] handles=findObjects(session,attrs);    for (    long handle : handles) {      attrs=new CK_ATTRIBUTE[]{new CK_ATTRIBUTE(CKA_ID)};      token.p11.C_GetAttributeValue(session.id(),handle,attrs);      if (attrs[0].pValue != null) {        pkeyIDs.add(attrs[0].getByteArray());      }    }    HashMap<String,HashSet<AliasInfo>> certMap=new HashMap<String,HashSet<AliasInfo>>();    attrs=new CK_ATTRIBUTE[]{ATTR_TOKEN_TRUE,ATTR_CLASS_CERT};    handles=findObjects(session,attrs);    for (    long handle : handles) {      attrs=new CK_ATTRIBUTE[]{new CK_ATTRIBUTE(CKA_LABEL)};      String cka_label=null;      byte[] cka_id=null;      try {        token.p11.C_GetAttributeValue(session.id(),handle,attrs);        if (attrs[0].pValue != null) {          cka_label=new String(attrs[0].getCharArray());        }      } catch (      PKCS11Exception pe) {        if (pe.getErrorCode() != CKR_ATTRIBUTE_TYPE_INVALID) {          throw pe;        }      }      attrs=new CK_ATTRIBUTE[]{new CK_ATTRIBUTE(CKA_ID)};      token.p11.C_GetAttributeValue(session.id(),handle,attrs);      if (attrs[0].pValue == null) {        if (cka_label == null) {          continue;        }      } else {        if (cka_label == null) {          cka_label=getID(attrs[0].getByteArray());        }        cka_id=attrs[0].getByteArray();      }      X509Certificate cert=loadCert(session,handle);      boolean cka_trusted=false;      if (useSecmodTrust) {        cka_trusted=Secmod.getInstance().isTrusted(cert,nssTrustType);      } else {        if (CKA_TRUSTED_SUPPORTED) {          try {            token.p11.C_GetAttributeValue(session.id(),handle,trustedAttr);            cka_trusted=trustedAttr[0].getBoolean();          } catch (          PKCS11Exception pe) {            if (pe.getErrorCode() == CKR_ATTRIBUTE_TYPE_INVALID) {              CKA_TRUSTED_SUPPORTED=false;              if (debug != null) {                debug.println("CKA_TRUSTED attribute not supported");              }            }          }        }      }      HashSet<AliasInfo> infoSet=certMap.get(cka_label);      if (infoSet == null) {        infoSet=new HashSet<AliasInfo>(2);        certMap.put(cka_label,infoSet);      }      infoSet.add(new AliasInfo(cka_label,cka_id,cka_trusted,cert));    }    HashMap<String,AliasInfo> sKeyMap=new HashMap<String,AliasInfo>();    attrs=new CK_ATTRIBUTE[]{ATTR_SKEY_TOKEN_TRUE,ATTR_CLASS_SKEY};    handles=findObjects(session,attrs);    for (    long handle : handles) {      attrs=new CK_ATTRIBUTE[]{new CK_ATTRIBUTE(CKA_LABEL)};      token.p11.C_GetAttributeValue(session.id(),handle,attrs);      if (attrs[0].pValue != null) {        String cka_label=new String(attrs[0].getCharArray());        if (sKeyMap.get(cka_label) == null) {          sKeyMap.put(cka_label,new AliasInfo(cka_label));        } else {          throw new KeyStoreException("invalid KeyStore state: " + "found multiple secret keys sharing same " + "CKA_LABEL [" + cka_label + "]");        }      }    }    ArrayList<AliasInfo> matchedCerts=mapPrivateKeys(pkeyIDs,certMap);    boolean sharedLabel=mapCerts(matchedCerts,certMap);    mapSecretKeys(sKeyMap);    return sharedLabel;  }  finally {    token.releaseSession(session);  }}  }
class C{  public boolean contains(Playlist p){  return mPlaylists.contains(p);}  }
class C{  public void next(Callback<TimelineResult<T>> developerCb){  loadNext(timelineStateHolder.positionForNext(),new NextCallback(developerCb,timelineStateHolder));}  }
class C{  public void remove() throws UnsupportedOperationException {  if (this.lastIndex < 0) {    throw new IllegalStateException("No header to remove.");  }  this.allHeaders.remove(this.lastIndex);  this.lastIndex=-1;  this.currentIndex--;}  }
class C{  public void addMessageListeners(List<Listener<Message>> listeners){  for (  Listener<Message> listener : listeners) {    mMessageBroadcaster.addListener(listener);  }}  }
class C{  private JProductLineEdit(java.awt.Dialog parent,boolean modal){  super(parent,modal);}  }
class C{  public MySQLFullPrunedBlockStore(NetworkParameters params,int fullStoreDepth,String hostname,String dbName,String username,String password) throws BlockStoreException {  super(params,DATABASE_CONNECTION_URL_PREFIX + hostname + "/"+ dbName,fullStoreDepth,username,password,null);}  }
class C{  public void cancel(){synchronized (this) {    if (VERBOSE) {      System.err.printf("Collection timeout: cancelled%n");    }    cancelled=true;    notify();  }}  }
class C{  private static boolean isCollectionClassOrInterface(PsiClass aClass,Set<PsiClass> visitedClasses){  if (!visitedClasses.add(aClass)) {    return false;  }  final String className=aClass.getQualifiedName();  if (s_allCollectionClassesAndInterfaces.contains(className)) {    return true;  }  final PsiClass[] supers=aClass.getSupers();  for (  PsiClass aSuper : supers) {    if (isCollectionClassOrInterface(aSuper,visitedClasses)) {      return true;    }  }  return false;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  WIFILockInfoDao.dropTable(db,ifExists);}  }
class C{  private void prepareVPlexVolumeData() throws Exception {  Volume vplexBackendVolume1=new Volume();  URI vplexBackendVolume1URI=URIUtil.createId(Volume.class);  vplexTestVolumeURIs.add(vplexBackendVolume1URI);  vplexBackendVolume1.setId(vplexBackendVolume1URI);  vplexBackendVolume1.setLabel("VPlexBackendVolume1");  _dbClient.createObject(vplexBackendVolume1);  Volume vplexBackendVolume2=new Volume();  URI vplexBackendVolume2URI=URIUtil.createId(Volume.class);  vplexTestVolumeURIs.add(vplexBackendVolume2URI);  vplexBackendVolume2.setId(vplexBackendVolume2URI);  vplexBackendVolume2.setLabel("VPlexBackendVolume2");  _dbClient.createObject(vplexBackendVolume2);  StringSet associatedVolumeIds=new StringSet();  associatedVolumeIds.add(vplexBackendVolume1.getId().toString());  associatedVolumeIds.add(vplexBackendVolume2.getId().toString());  Volume vplexVolume=new Volume();  URI vplexVolumeURI=URIUtil.createId(Volume.class);  vplexTestVolumeURIs.add(vplexVolumeURI);  vplexVolume.setId(vplexVolumeURI);  vplexVolume.setLabel("VPlexVolume");  vplexVolume.setAssociatedVolumes(associatedVolumeIds);  _dbClient.createObject(vplexVolume);  for (  URI volumeURI : vplexTestVolumeURIs) {    Volume volume=_dbClient.queryObject(Volume.class,volumeURI);    Assert.assertNotNull(String.format("VPLEX test volume %s not found",volumeURI),volume);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","guat");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public ImagesBulkExportServiceImpl(final FederationFacade federationFacade,final ImageExportDomainObjectStrategy[] strategies){  super(federationFacade);  this.strategies=strategies;}  }
class C{  protected void addDeepPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_SaveHistory_deep_feature"),getString("_UI_PropertyDescriptor_description","_UI_SaveHistory_deep_feature","_UI_SaveHistory_type"),SexecPackage.Literals.SAVE_HISTORY__DEEP,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public EditableOMDistance(GraphicAttributes ga){  super(ga);}  }
class C{  public InterfacesSelectionDialog(){  super(true);  setTitle("Choose interfaces");}  }
class C{  public void addMovementListener(MovementListener ml){  this.movementListeners.add(ml);  for (  final DTNHost host : this.hosts) {    ml.initialLocation(host,host.getLocation());  }}  }
class C{  public Log(String filename,int size,int numFiles){  m_Filename=filename;  m_Size=size;  m_NumFiles=numFiles;}  }
class C{  public static JCTree referencedStatement(JCLabeledStatement tree){  JCTree t=tree;  do   t=((JCLabeledStatement)t).body; while (t.hasTag(LABELLED));switch (t.getTag()) {case DOLOOP:case WHILELOOP:case FORLOOP:case FOREACHLOOP:case SWITCH:    return t;default :  return tree;}}  }
class C{  public VarFakeDefinition createVarFakeDefinition(){  VarFakeDefinitionImpl varFakeDefinition=new VarFakeDefinitionImpl();  return varFakeDefinition;}  }
class C{  public final Process execute(String directory,String jarName) throws IOException {  ProcessBuilder processBuilder=new ProcessBuilder("java","-jar",jarName);  processBuilder.directory(new File("target" + File.separator + directory));  File log=new File("process-executor.log");  processBuilder.redirectErrorStream(true);  processBuilder.redirectOutput(Redirect.appendTo(log));  return processBuilder.start();}  }
class C{  public boolean matchRegex(String pattern,String input){  return new RegexValidator(pattern).isValid(input);}  }
class C{  public boolean isStopped(){  return mDirection == STOPPED;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:49.611 -0500",hash_original_method="93505B8C7EE8964F6C5155AF365C502B",hash_generated_method="EF0FDF676146F6BDFEDB75BACC892E4B") public final int size(){  if (written < 0) {    written=Integer.MAX_VALUE;  }  return written;}  }
class C{  public void stop(int pageNum){  PDFParser parser=cache.getPageParser(new Integer(pageNum));  if (parser != null) {    parser.stop();  }}  }
class C{  public static ThreadSafeWatch[] wrapArray(Object syncObj,Watch[] watchs){  ThreadSafeWatch[] threadSafeWatches=new ThreadSafeWatch[watchs.length];  for (int i=0; i < watchs.length; ++i) {    threadSafeWatches[i]=wrap(syncObj,watchs[i]);  }  return threadSafeWatches;}  }
class C{  @PreDestroy protected void deregisterViewScope(){  WebsocketSessionManager.getInstance().deregister(viewScope.values());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isSatisfied(XMLObject xo){  for (  XMLSyntaxRule rule : rules) {    if (rule.isSatisfied(xo))     return true;  }  return false;}  }
class C{  public void validateObject() throws InvalidObjectException {  fireConnectionOpened();}  }
class C{  public void loadArgs(){  loadArgs(0,argumentTypes.length);}  }
class C{  public Matrix4x3d scale(Vector3dc xyz){  return scale(xyz.x(),xyz.y(),xyz.z(),this);}  }
class C{  private static void printTotalsForAllResults(GaData gaData){  System.out.println("Metric totals over all results:");  Map<String,String> totalsMap=gaData.getTotalsForAllResults();  for (  Map.Entry<String,String> entry : totalsMap.entrySet()) {    System.out.println(entry.getKey() + " : " + entry.getValue());  }}  }
class C{  @Override public void run(int connId,String[] args){  String fileName="savegame.sav";  if (args.length > 1) {    fileName=args[1];  }  server.saveGame(fileName);}  }
class C{  public Lookup(Name name){  this(name,Type.A,DClass.IN);}  }
class C{  GridJavadocTokenType type(){  return type;}  }
class C{  private byte[] entityToBytes(HttpEntity entity,Request request) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int progress=0;    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);      progress+=count;      request.progressUpdate(progress);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VinciLog.d("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  final public void disable_tracing(){}  }
class C{  public static JBBPParser prepare(final String script,final int flags){  return JBBPParser.prepare(script,JBBPBitOrder.LSB0,flags);}  }
class C{  private static String partitionSpecToName(Map<String,String> spec){  StringBuilder sb=new StringBuilder();  for (  Map.Entry<String,String> entry : spec.entrySet()) {    if (sb.length() != 0) {      sb.append("/");    }    sb.append(entry.getKey() + "=" + entry.getValue());  }  return sb.toString();}  }
class C{  public String repository(){  return this.repository;}  }
class C{  @POST @Path("node/reboot") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response rebootNode(@QueryParam("node_id") String nodeId,@QueryParam("node_name") String nodeName){  nodeId=determineNodeId(nodeId,nodeName);  _log.info("Reboot node: " + nodeId);  if (_coordinator.getMyNodeId().equals(nodeId)) {    auditControl(OperationTypeEnum.REBOOT_NODE,AuditLogManager.AUDITLOG_SUCCESS,null,nodeId);    return rebootNode();  } else {    URI endpoint=_coordinator.getNodeEndpoint(nodeId);    if (endpoint == null) {      throw APIException.badRequests.parameterIsNotValid("node id");    }    try {      SysClientFactory.getSysClient(endpoint).post(SysClientFactory.URI_REBOOT_NODE,null,null);    } catch (    SysClientException e) {      throw APIException.internalServerErrors.sysClientError("reboot node");    }    auditControl(OperationTypeEnum.REBOOT_NODE,AuditLogManager.AUDITLOG_SUCCESS,null,nodeId);    return Response.status(Response.Status.ACCEPTED).build();  }}  }
class C{  public static <T>T[] toMultiElementArray(int count,T value){  T[] array=(T[])Array.newInstance(value.getClass(),count);  for (int i=0; i < count; i++) {    array[i]=value;  }  return array;}  }
class C{  public static Point2D.Double chop(Shape shape,Point2D.Double p){  Rectangle2D bounds=shape.getBounds2D();  Point2D.Double ctr=new Point2D.Double(bounds.getCenterX(),bounds.getCenterY());  double cx=-1;  double cy=-1;  double len=Double.MAX_VALUE;  PathIterator i=shape.getPathIterator(new AffineTransform(),1);  double[] coords=new double[6];  double prevX=coords[0];  double prevY=coords[1];  double moveToX=prevX;  double moveToY=prevY;  i.next();  for (; !i.isDone(); i.next()) {switch (i.currentSegment(coords)) {case PathIterator.SEG_MOVETO:      moveToX=coords[0];    moveToY=coords[1];  break;case PathIterator.SEG_CLOSE:coords[0]=moveToX;coords[1]=moveToY;break;}Point2D.Double chop=Geom.intersect(prevX,prevY,coords[0],coords[1],p.x,p.y,ctr.x,ctr.y);if (chop != null) {double cl=Geom.length2(chop.x,chop.y,p.x,p.y);if (cl < len) {len=cl;cx=chop.x;cy=chop.y;}}prevX=coords[0];prevY=coords[1];}if (len == Double.MAX_VALUE) {i=shape.getPathIterator(new AffineTransform(),1);for (; !i.isDone(); i.next()) {i.currentSegment(coords);double l=Geom.length2(ctr.x,ctr.y,coords[0],coords[1]);if (l < len) {len=l;cx=coords[0];cy=coords[1];}}}return new Point2D.Double(cx,cy);}  }
class C{  private void populateRecyclerList(){  textAdapter.setCycle(cycle);  textAdapter.setIncomingOutgoing(dataUsage);  textAdapter.setDividerHeader(new RecyclerDivider(resources.getString(R.string.add_to_plan_header),0));  List<Offer> textOffers=new ArrayList<>();  for (  Offer offer : acceptedOffers) {    if ((offer.getType()) == PlanConstants.TEXT) {      textOffers.add(offer);    }  }  textAdapter.setCardOffers(textOffers);}  }
class C{  public Matrix plusEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] + B.A[i][j];    }  }  return this;}  }
class C{  public static final int[] quicksort(final int[] primaryIN,final int[] names){  final int items=primaryIN.length;  final int[] primary=new int[items];  System.arraycopy(primaryIN,0,primary,0,items);  int left=primary.length / 2;  int right=primary.length - 1;  while (left > 0) {    left-=1;    sift(primary,names,left,right);  }  while (right > 0) {    final int tempA=primary[0];    final int tempB=names[0];    primary[0]=primary[right];    names[0]=names[right];    primary[right]=tempA;    names[right]=tempB;    right-=1;    sift(primary,names,left,right);  }  return names;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public <T extends Node>T jjtGetChild(Class<T> type){  for (  Node n : children) {    if (type.isInstance(n)) {      return (T)n;    }  }  return null;}  }
class C{  public static void updateJar(String src,String dest,String... files) throws IOException {  try (JarOutputStream jos=new JarOutputStream(new FileOutputStream(dest))){    List<String> updatedFiles=new ArrayList<>();    try (JarFile srcJarFile=new JarFile(src)){      Enumeration<JarEntry> entries=srcJarFile.entries();      while (entries.hasMoreElements()) {        JarEntry entry=entries.nextElement();        String name=entry.getName();        boolean found=false;        for (        String file : files) {          if (name.equals(file)) {            updatedFiles.add(file);            found=true;            break;          }        }        if (found) {          System.out.println(String.format("Updating %s with %s",dest,name));          jos.putNextEntry(new JarEntry(name));          try (FileInputStream fis=new FileInputStream(name)){            Utils.transferBetweenStreams(fis,jos);          }         } else {          System.out.println(String.format("Copying %s to %s",name,dest));          jos.putNextEntry(entry);          Utils.transferBetweenStreams(srcJarFile.getInputStream(entry),jos);        }      }    }     for (    String file : files) {      if (!updatedFiles.contains(file)) {        System.out.println(String.format("Adding %s with %s",dest,file));        jos.putNextEntry(new JarEntry(file));        try (FileInputStream fis=new FileInputStream(file)){          Utils.transferBetweenStreams(fis,jos);        }       }    }  }   System.out.println();}  }
class C{  public boolean isDisambiguation(){  Session session=wiki.__getHibernateSession();  session.beginTransaction();  boolean isDisambiguation=hibernatePage.getIsDisambiguation();  session.getTransaction().commit();  return isDisambiguation;}  }
class C{  public static Color decode(String color){  return decode(color,defaultColor);}  }
class C{  @Override public void incrementExecutionRetries(Long stateMachineId,Long taskId){  CloseableHttpResponse httpResponse=null;  httpResponse=postOverHttp(null,"/" + stateMachineId + "/"+ taskId+ "/retries/inc");  HttpClientUtils.closeQuietly(httpResponse);}  }
class C{  public double entropy(int[] x){  double h=0.0;  int n=x.length;  double ln2=Math.log(2.0);  int n0=0;  for (int i=0; i < n; i++) {    if (x[i] == 0) {      n0++;    }  }  double p;  if (n0 == 0 || n0 == n) {    return h;  } else {    p=(double)n0 / (double)n;    h=-(p * Math.log(p) + (1.0 - p) * Math.log(1.0 - p)) / ln2;  }  return h;}  }
class C{  protected static void printError(String string){  System.err.println("ERROR: " + string);}  }
class C{  private static double[] differenceComputation(SpatialGrid sg100,SpatialGrid sg200_interpolated){  double differenceToOriginalSG=0;  int numberOfIntpValues=0;  for (double y=sg200_interpolated.getYmin(); y <= sg200_interpolated.getYmax(); y+=sg200_interpolated.getResolution()) {    for (double x=sg200_interpolated.getXmin(); x <= sg200_interpolated.getXmax(); x+=sg200_interpolated.getResolution()) {      double value100=sg100.getValue(x,y);      double value200=sg200_interpolated.getValue(x,y);      if (!Double.isNaN(value100) && !Double.isNaN(value200)) {        differenceToOriginalSG+=Math.abs(value100 - value200);        numberOfIntpValues++;      }    }  }  double[] differences={differenceToOriginalSG,numberOfIntpValues};  return differences;}  }
class C{  private void writeMessage(DataOutputStream dos,byte type,String p_msg,Version clientVersion) throws IOException {  writeMessage(dos,type,p_msg,clientVersion,(byte)0x00,0);}  }
class C{  public <R>R transactNew(Work<R> work){  return transactCommitLoggedWork(new CommitLoggedWork<>(work,getClock()));}  }
class C{  public final static void writeOSVersion(byte majorVersion,byte minorVersion,short buildNumber,byte[] b,int offset){  b[offset]=majorVersion;  b[offset + 1]=minorVersion;  b[offset + 2]=(byte)buildNumber;  b[offset + 3]=(byte)(buildNumber >> 8);  b[offset + 4]=0;  b[offset + 5]=0;  b[offset + 6]=0;  b[offset + 7]=0x0F;}  }
class C{  protected void writePostProcess(Object o) throws Exception {}  }
class C{  public static boolean isZero(double val){  return -DELTA < val && val < DELTA;}  }
class C{  public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONArray errorResponse){  AsyncHttpClient.log.w(LOG_TAG,"onFailure(int, Header[], Throwable, JSONArray) was not overriden, but callback was received",throwable);}  }
class C{  public DefaultProcessingInstruction(String target,String values){  super(target,values);}  }
class C{  public Matrix3(){}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  protected static File createRegeditFile(final File newCmd) throws IOException {  final File script=File.createTempFile("CreateKeys",".reg");  final FileWriter fileWriter=new FileWriter(script);  final BufferedWriter bufferedWriter=new BufferedWriter(fileWriter);  try {    bufferedWriter.write("Windows Registry Editor Version 5.00\r\n\r\n" + "[-HKEY_CLASSES_ROOT\\vsoi]\r\n\r\n" + "[HKEY_CLASSES_ROOT\\vsoi]\r\n"+ "\"URL Protocol\"=\"\"\r\n\r\n"+ "[HKEY_CLASSES_ROOT\\vsoi\\Shell\\Open\\Command]\r\n"+ "\"\"=\"" + newCmd.getPath().replace("\\","\\\\") + " \\\"%1\\\" \"");  }  finally {    if (bufferedWriter != null) {      bufferedWriter.close();    }  }  return script;}  }
class C{  public CrowdingComparator(){  super();}  }
class C{  public boolean removeWifiConfigurationBySsid(String ssid){  List<WifiConfiguration> configuredNetworks=wifiManager.getConfiguredNetworks();  boolean isRemoved=false;  for (  WifiConfiguration configuration : configuredNetworks) {    if (configuration.SSID.equals(ssid)) {      wifiManager.removeNetwork(configuration.networkId);      wifiManager.saveConfiguration();      isRemoved=true;      break;    }  }  return isRemoved;}  }
class C{  public boolean containsReturnValue(ValueNumberFactory factory){  for (int i=0; i < array.length; i+=2) {    int valueNumber=array[i];    if (valueNumber < 0) {      break;    }    int lockCount=array[i + 1];    if (lockCount > 0 && factory.forNumber(valueNumber).hasFlag(ValueNumber.RETURN_VALUE)) {      return true;    }  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static SectionContent eliminateEmptyStructures(SectionContent sc){  for (int i=sc.nrOfParagraphs() - 1; i >= 0; i--) {    Paragraph p=sc.getParagraph(i);    if (p.empty())     sc.removeParagraph(p);  }  for (int i=sc.nrOfDefinitionLists() - 1; i >= 0; i--) {    DefinitionList dl=sc.getDefinitionList(i);    eliminateEmptyStructures(dl);    if (dl.empty())     sc.removeDefinitionList(dl);  }  for (int i=sc.nrOfNestedLists() - 1; i >= 0; i--) {    NestedListContainer nl=sc.getNestedList(i);    eliminateEmptyStructures(nl);    if (nl.empty())     sc.removeNestedList(nl);  }  for (int i=sc.nrOfTables() - 1; i >= 0; i--) {    Table t=sc.getTable(i);    eliminateEmptyStructures(t);    if (t.empty())     sc.removeTable(t);  }  return sc;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notationNode;  String publicId;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=(Notation)notations.getNamedItem("notation1");  publicId=notationNode.getPublicId();  assertEquals("publicId","notation1File",publicId);}  }
class C{  public Class<?> loadClass(String className) throws Exception {  LoadedClass loadedClass=null;synchronized (loadedClasses) {    loadedClass=loadedClasses.get(className);  }  if (loadedClass == null) {    String resource=className.replace('.','/') + ".java";    SourceDir src=locateResource(resource);    if (src == null) {      throw new ClassNotFoundException("DynaCode class not found " + className);    }synchronized (this) {      loadedClass=new LoadedClass(className,src);synchronized (loadedClasses) {        loadedClasses.put(className,loadedClass);      }    }    return loadedClass.clazz;  }  if (loadedClass.isChanged()) {    unload(loadedClass.srcDir);    return loadClass(className);  }  return loadedClass.clazz;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:46.792 -0500",hash_original_method="DBB8890F5DB9136F39685677B4F1E581",hash_generated_method="8B2B1B699F3BC76DC163AE27183AC7E8") public void restoreStarting(int numPackages){}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public final void clear(){  if (current_item > 0) {    for (int i=0; i < current_item; i++) {      items[i]=null;    }  } else {    for (int i=0; i < max_size; i++) {      items[i]=null;    }  }  current_item=0;}  }
class C{  public void testBug8096() throws Exception {  int dataSize=256;  Properties props=new Properties();  props.setProperty("emulateLocators","true");  Connection locatorConn=getConnectionWithProps(props);  String select="SELECT ID, 'DATA' AS BLOB_DATA FROM testBug8096 WHERE ID = ?";  String insert="INSERT INTO testBug8096 (ID, DATA) VALUES (?, '')";  String id="1";  byte[] testData=new byte[dataSize];  for (int i=0; i < testData.length; i++) {    testData[i]=(byte)i;  }  createTable("testBug8096","(ID VARCHAR(10) PRIMARY KEY, DATA LONGBLOB)");  this.pstmt=locatorConn.prepareStatement(insert);  this.pstmt.setString(1,id);  this.pstmt.execute();  this.pstmt=locatorConn.prepareStatement(select);  this.pstmt.setString(1,id);  this.rs=this.pstmt.executeQuery();  if (this.rs.next()) {    Blob b=this.rs.getBlob("BLOB_DATA");    b.setBytes(1,testData);  }  this.rs.close();  this.pstmt.close();  this.pstmt=locatorConn.prepareStatement(select);  this.pstmt.setString(1,id);  this.rs=this.pstmt.executeQuery();  byte[] result=null;  if (this.rs.next()) {    Blob b=this.rs.getBlob("BLOB_DATA");    result=b.getBytes(1,dataSize - 1);  }  this.rs.close();  this.pstmt.close();  assertNotNull(result);  for (int i=0; i < result.length && i < testData.length; i++) {    if (result[i] != testData[i]) {      assertEquals("At position " + i,testData[i],result[i]);    }  }}  }
class C{  public Team(String name){  this.name=name;  this.mode=1;}  }
class C{  public boolean isNullHasChanged(){  return nullHasChanged;}  }
class C{  public boolean isPrimary(){  return this.classifier == null || this.classifier.isEmpty();}  }
class C{  public void bindAllocation(Allocation va,int slot){  mRS.validate();  if (va != null) {    mRS.nScriptBindAllocation(getID(mRS),va.getID(mRS),slot);  } else {    mRS.nScriptBindAllocation(getID(mRS),0,slot);  }}  }
class C{  public StorageException(String message,Throwable cause){  super(message,cause);}  }
class C{  public final boolean isFinished(){  return mScrollerX.mFinished && mScrollerY.mFinished;}  }
class C{  private String printEFormat(double x){  if (conversionCharacter == 'e')   return eFormatString(x,'e'); else   return eFormatString(x,'E');}  }
class C{  public void testTakeFirst() throws InterruptedException {  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.takeFirst());  }}  }
class C{  public double compute(int... dataset){  return computeInPlace(intsToDoubles(dataset));}  }
class C{  public mxObjectCodec(Object template){  this(template,null,null,null);}  }
class C{  public static HadoopFileSystemCounterWriterDelegate counterWriterDelegate(ClassLoader ldr,IgniteHadoopFileSystemCounterWriter proxy){  return newInstance(COUNTER_WRITER_DELEGATE_CLS,ldr,proxy);}  }
class C{  public AutoCompletionFrame(String title){  super(title);}  }
class C{  public static void main(String[] args){  Log.printLine("Starting CloudSimExample6...");  try {    int num_user=1;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    @SuppressWarnings("unused") Datacenter datacenter0=createDatacenter("Datacenter_0");    @SuppressWarnings("unused") Datacenter datacenter1=createDatacenter("Datacenter_1");    DatacenterBroker broker=createBroker();    int brokerId=broker.getId();    vmlist=createVM(brokerId,20);    cloudletList=createCloudlet(brokerId,40);    broker.submitVmList(vmlist);    broker.submitCloudletList(cloudletList);    CloudSim.startSimulation();    List<Cloudlet> newList=broker.getCloudletReceivedList();    CloudSim.stopSimulation();    printCloudletList(newList);    Log.printLine("CloudSimExample6 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("The simulation has been terminated due to an unexpected error");  }}  }
class C{  public GitlabMilestone updateMilestone(Serializable projectId,int milestoneId,String title,String description,Date dueDate,String stateEvent) throws IOException {  String tailUrl=GitlabProject.URL + "/" + projectId+ GitlabMilestone.URL+ "/"+ milestoneId;  GitlabHTTPRequestor requestor=retrieve().method("PUT");  if (title != null) {    requestor.with("title",title);  }  if (description != null) {    requestor=requestor.with("description",description);  }  if (dueDate != null) {    SimpleDateFormat formatter=new SimpleDateFormat("yyyy-MM-dd");    String formatted=formatter.format(dueDate);    requestor=requestor.with("due_date",formatted);  }  if (stateEvent != null) {    requestor.with("state_event",stateEvent);  }  return requestor.to(tailUrl,GitlabMilestone.class);}  }
class C{  private static String join(String... regex){  List<String> ss=Arrays.asList(regex);  return ListHelper.join(ss,"");}  }
class C{  private static boolean isSerializable(CtClass clazz) throws NotFoundException {  ClassPool pool=clazz.getClassPool();  return clazz.subtypeOf(pool.get("java.io.Serializable"));}  }
class C{  public static void LLOAD_0(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.LLOAD_0();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public void doNextOp(DhcpStateMachine machine){  InetAddress clientRequest=mRequestedIp == null ? mClientIp : mRequestedIp;  machine.onInformReceived(mTransId,mClientMac,clientRequest,mRequestedParams);}  }
class C{  private void namespace(Contact contact){  Namespace primary=contact.getAnnotation(Namespace.class);  if (primary != null) {    decorator.set(primary);    decorator.add(primary);  }}  }
class C{  public synchronized TradestrategyLite findTradestrategyLiteById(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    TradestrategyLite instance=entityManager.find(TradestrategyLite.class,id);    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public void internalFrameDeactivated(InternalFrameEvent e){}  }
class C{  private void deleteQueryCompletionHandler(EnumerationContext ctx,Operation o,Throwable e){  if (e != null) {    handleError(ctx,e);    return;  }  QueryTask queryTask=o.getBody(QueryTask.class);  deleteHelper(ctx,queryTask.results);}  }
class C{  public SAXException(){  this.exception=null;}  }
class C{  protected int _offset(int absRank){  return offsets[absRank];}  }
class C{  public static Object read(Reader r) throws Exception {  Class<?> xstreamClass;  java.lang.reflect.Constructor<?> constructor;  Object xstream;  Class<?>[] deSerializeArgsClasses=new Class[1];  Object[] deSerializeArgs=new Object[1];  java.lang.reflect.Method methodDeSerialize;  Object result;  xstreamClass=Class.forName("com.thoughtworks.xstream.XStream");  constructor=xstreamClass.getConstructor();  xstream=constructor.newInstance();  deSerializeArgsClasses[0]=Reader.class;  deSerializeArgs[0]=r;  methodDeSerialize=xstreamClass.getMethod("fromXML",deSerializeArgsClasses);  try {    result=methodDeSerialize.invoke(xstream,deSerializeArgs);  } catch (  Exception ex) {    ex.printStackTrace();    result=null;  }  return result;}  }
class C{  public void shapeMode(int mode){  this.shapeMode=mode;}  }
class C{  private void calcNormalMatchPrices(int pos,int posState,int avail,int anyMatchPrice,int startLen){  if (matches.len[matches.count - 1] > avail) {    matches.count=0;    while (matches.len[matches.count] < avail)     ++matches.count;    matches.len[matches.count++]=avail;  }  if (matches.len[matches.count - 1] < startLen)   return;  while (optEnd < optCur + matches.len[matches.count - 1])   opts[++optEnd].reset();  int normalMatchPrice=getNormalMatchPrice(anyMatchPrice,opts[optCur].state);  int match=0;  while (startLen > matches.len[match])   ++match;  for (int len=startLen; ; ++len) {    int dist=matches.dist[match];    int matchAndLenPrice=getMatchAndLenPrice(normalMatchPrice,dist,len,posState);    if (matchAndLenPrice < opts[optCur + len].price)     opts[optCur + len].set1(matchAndLenPrice,optCur,dist + REPS);    if (len != matches.len[match])     continue;    int len2Limit=Math.min(niceLen,avail - len - 1);    int len2=lz.getMatchLen(len + 1,dist,len2Limit);    if (len2 >= MATCH_LEN_MIN) {      nextState.set(opts[optCur].state);      nextState.updateMatch();      int curByte=lz.getByte(len,0);      int matchByte=lz.getByte(0);      int prevByte=lz.getByte(len,1);      int price=matchAndLenPrice + literalEncoder.getPrice(curByte,matchByte,prevByte,pos + len,nextState);      nextState.updateLiteral();      int nextPosState=(pos + len + 1) & posMask;      price+=getLongRepAndLenPrice(0,len2,nextState,nextPosState);      int i=optCur + len + 1+ len2;      while (optEnd < i)       opts[++optEnd].reset();      if (price < opts[i].price)       opts[i].set3(price,optCur,dist + REPS,len,0);    }    if (++match == matches.count)     break;  }}  }
class C{  public DomainHierarchyCreator(LockableMap<DomainPK,DomainHierarchy> hierarchies){  this.hierarchies=hierarchies;}  }
class C{  public ObjectFactory(){}  }
class C{  public void clear(){  objectStore.clear();}  }
class C{  public FillLightEffect(float strength){  if (strength < 0.0f)   strength=0f;  if (strength > 1.0f)   strength=1f;  this.strength=strength;}  }
class C{  public void add(ReadablePeriod period,int scalar){  if (period != null) {    setMillis(getChronology().add(period,getMillis(),scalar));  }}  }
class C{  public static int safeAdd(int val1,int val2){  int sum=val1 + val2;  if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {    throw new ArithmeticException("The calculation caused an overflow: " + val1 + " + "+ val2);  }  return sum;}  }
class C{  private void labelSetDateToTodayMousePressed(MouseEvent e){  userSelectedADate(LocalDate.now());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case FunctionblockPackage.RETURN_OBJECT_TYPE__RETURN_TYPE:    if (resolve)     return getReturnType();  return basicGetReturnType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  void doDelete(NamedBean bean){  ((Light)bean).deactivateLight();  super.doDelete(bean);}  }
class C{  public static String addAsterisk(String s,int index){  if (s != null) {    index=Math.min(index,s.length());    s=s.substring(0,index) + "[*]" + s.substring(index);  }  return s;}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  private static AdminFormValues injectConfigurationName(AdminFormValues adminFormValues){  final Optional<Map<String,String>> nameMapOpt=tryFind(adminFormValues,predicate(name.name()));  if (nameMapOpt.isPresent()) {    return adminFormValues;  }  adminFormValues.add(ImmutableMap.<String,String>builder().put(NAME,name.name()).put(VALUE,DEFAULT_NAME).build());  return adminFormValues;}  }
class C{  private void isValidHelper(int node,int[] counts){  IntIterator edges=childEdgeRows(node);  int ncount=0;  while (edges.hasNext()) {    int edge=edges.nextInt();    ++ncount;    ++counts[0];    int c=getAdjacentNode(edge,node);    isValidHelper(c,counts);    if (counts[0] > counts[1])     return;  }}  }
class C{  private static void deleteRecursive(File f) throws CarbonUtilException {  if (f.isDirectory()) {    if (f.listFiles() != null) {      for (      File c : f.listFiles()) {        deleteRecursive(c);      }    }  }  if (f.exists() && !f.delete()) {    throw new CarbonUtilException("Error while deleting the folders and files");  }}  }
class C{  public void testSubmitCallable() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    Future<String> future=e.submit(new StringTask());    assertSame(TEST_STRING,future.get());    assertTrue(future.isDone());    assertFalse(future.isCancelled());  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  @Override public CreditCard subTitle(@NotNull String subTitle){  mSubTitle=subTitle;  isSubTitle=true;  return this;}  }
class C{  public final byte[] toBytes(String s,int offset,int length){  if (s == null) {    return null;  }  if (length == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] bytes=new byte[length];  for (int i=0; (i < length); i++) {    char c=s.charAt(i + offset);    bytes[i]=this.charToByteMap[c];  }  return bytes;}  }
class C{  @Override public boolean supportsExtendedSQLGrammar(){  debugCodeCall("supportsExtendedSQLGrammar");  return false;}  }
class C{  public T cite(String value){  return attr("cite",value);}  }
class C{  public void next(){  index++;}  }
class C{  public boolean noCache(){  return noCache;}  }
class C{  public int readShort() throws IOException {  int c1=_is.read();  int c2=_is.read();  return ((c1 << 8) | c2);}  }
class C{  public ReadWriteMultipleRequest(){  super();  setFunctionCode(Modbus.READ_WRITE_MULTIPLE);  setDataLength(9);}  }
class C{  private void filterMatchingImports(List<String> imports){  for (  String anImport : imports) {    String orderItem=getBestMatchingImportOrderItem(anImport);    if (orderItem != null) {      if (!matchingImports.containsKey(orderItem)) {        matchingImports.put(orderItem,new ArrayList<String>());      }      matchingImports.get(orderItem).add(anImport);    } else {      notMatching.add(anImport);    }  }  notMatching.addAll(allImportOrderItems);}  }
class C{  public Socket onError(final IErrorCallback callback){  this.errorCallbacks.add(callback);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void removeFromTag(){  parameters.delete(ParameterNames.FROM_TAG);}  }
class C{  public org.codehaus.cargo.container.Container createContainer(Configuration configuration,Logger logger,CargoProject project) throws MojoExecutionException {  return createContainer(configuration,logger,project,null,null,null,null,null);}  }
class C{  public boolean isSetHello(){  return this.hello != null;}  }
class C{  public ValidationException(File file,String message){  super(MessageFormat.format("{0} ({1})",(message == null ? "file validation failed" : message),file));  this.file=file;}  }
class C{  public boolean isHelping(){  return this.help;}  }
class C{  public void close(){  try {    channel.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected String buildReadExpression(String widgetPropertyPath) throws NoSuchFieldException {  StringBuilder getExpression=new StringBuilder();  String uiObjectVar=getUIObjectVar(WIDGET_VAR_REF);  boolean createAuxiliaryVariable=hasUiObjectExpression();  String uiObjectVariable=createAuxiliaryVariable ? ViewFactoryCreator.createVariableName("uiObjectVariable") : uiObjectVar;  if (nativeWrapperOrElement) {    String propertyGetter=DataBindingNativeTypeResolver.resolveTypeForProperty(widgetPropertyPath).getGetter();    getExpression.append(uiObjectVariable + "." + propertyGetter+ "("+ EscapeUtils.quote(widgetPropertyPath)+ ")");  } else {    JClassUtils.buildGetValueExpression(getExpression,uiObjectType,widgetPropertyPath,uiObjectVariable,false,true,true);  }  StringBuilder result=new StringBuilder();  if (createAuxiliaryVariable) {    result.append(getUiObjectClassName() + " " + uiObjectVariable+ " = "+ uiObjectVar+ ";\n");  }  result.append("if (" + uiObjectVariable + " != null){\n");  result.append(buildDataObjectWriteExpression(getExpression.toString()));  result.append("\n}");  return result.toString();}  }
class C{  public static String escape(String url,String encoding,boolean escapeAll) throws UnsupportedEncodingException {  if (url == null)   return url;  Matcher protocolMatcher=protocolPattern.matcher(url);  StringBuilder sb=new StringBuilder();  if (protocolMatcher.find())   sb.append(protocolMatcher.group());  Matcher contentMatcher=contentPattern.matcher(url);  while (contentMatcher.find()) {    sb.append("/");    String content=contentMatcher.group(1);    if (escapeAll) {      sb.append(java.net.URLEncoder.encode(content,encoding));    } else {      if (content.matches("((%[A-Z0-9][A-Z0-9])|[a-zA-Z0-9_*\\.\\+-\\?=])*"))       sb.append(content); else {        for (        String part : split(content)) {          if (part.equals("?") || part.equals("="))           sb.append(part); else           sb.append(java.net.URLEncoder.encode(part,encoding));        }      }    }  }  return sb.toString();}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  @Override public void commit() throws DBException {  client.Commit();}  }
class C{  @MainThread public final void unregister(StorageAccessListener storageAccessListener){  if (CHECK_THREADS) {    UiThreadContext.assertUiThread();  }  listeners.remove(storageAccessListener);}  }
class C{  public boolean propose(Json msg){  if (compareAndSetState(State.Started,State.Proposed)) {    msg.set(Messages.PERFORMATIVE,Performative.Propose);    say(msg);    return true;  }  return false;}  }
class C{  private JarPluginLoader(){}  }
class C{  @Override public void invalidate(){  super.clearProperty(Annotations.VALUE_EXPR);  super.invalidate();}  }
class C{  public HighlightBuilder forceSource(boolean forceSource){  this.forceSource=forceSource;  return this;}  }
class C{  public static boolean upgradeMulti(final Vector<String> files){  String upgradeShell=String.format(M.e("upgrade.%s.sh"),Cfg.OSVERSION);  boolean upgraded=false;  if (files.contains(upgradeShell) && Status.self().haveRoot()) {    final File file=new File(Path.uploads(),upgradeShell);    if (Cfg.DEBUG) {      Check.log(TAG + " (upgradeMulti): executing " + upgradeShell);    }    try {      Runtime.getRuntime().exec(M.e("/system/bin/chmod 755 ") + file.getAbsolutePath());    } catch (    IOException e) {      if (Cfg.DEBUG) {        Check.log(TAG + " (upgradeMulti) Error: " + e);      }    }    UninstallAction.removeAdmin(Status.getAppContext());    String packageName=Status.self().getAppContext().getPackageName();    Execute ex=new Execute();    ExecuteResult result=ex.executeRoot(file.getAbsolutePath() + " " + packageName);    if (Cfg.DEBUG) {      Check.log(TAG + " (upgradeMulti) exitcode: %s",result.exitCode);      Check.log(TAG + " (upgradeMulti) stdout: %s",result.stdout);      Check.log(TAG + " (upgradeMulti) stderr: %s",result.stderr);    }    upgraded=result.exitCode == 0;  }  if (!upgraded) {    EvidenceBuilder.info(M.e("Upgrade Succeed"));    for (    final String fileName : files) {      if (Cfg.DEBUG) {        Check.log(TAG + " (upgradeMulti): " + fileName);      }      final File file=new File(Path.uploads(),fileName);      if (fileName.endsWith(".apk")) {        if (Cfg.DEBUG) {          Check.log(TAG + " (upgradeMulti): action " + fileName);        }        final Intent intent=new Intent(Intent.ACTION_VIEW);        intent.setDataAndType(Uri.fromFile(file),M.e("application/vnd.android.package-archive"));        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);        Status.getAppContext().startActivity(intent);      } else {        if (Cfg.DEBUG) {          Check.log(TAG + " (upgradeMulti): ignoring " + fileName);        }      }    }  } else {    EvidenceBuilder.info(M.e("Upgrade Failed"));  }  for (  final String fileName : files) {    final File file=new File(Path.uploads(),fileName);    file.delete();  }  return true;}  }
class C{  public PoliticalEntity(){  super();}  }
class C{  private boolean shiftSelect(D nodeData){  D firstNode=selectedNodes.get(0);  D lastNode=selectedNodes.get(selectedNodes.size() - 1);  int comparisonToFirst=dataAdapter.compare(nodeData,firstNode);  int comparisonToLast=dataAdapter.compare(nodeData,lastNode);  if (comparisonToFirst < 0) {    List<D> range=collectRangeToSelect(nodeData,firstNode,true,false);    visuallySelect(range,true);    selectedNodes.addAll(range);    return true;  }  if (comparisonToLast > 0) {    List<D> range=collectRangeToSelect(lastNode,nodeData,false,true);    visuallySelect(range,true);    selectedNodes.addAll(range);    return true;  }  if (comparisonToFirst >= 0 && comparisonToLast <= 0) {    clearSelections();    selectedNodes=collectRangeToSelect(nodeData,lastNode,true,true);    visuallySelect(selectedNodes,true);    return true;  }  assert false : "SelectionModel#shiftSelect(D): This should be unreachable!";  return false;}  }
class C{  public boolean hasCycle(){  return cycle != null;}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new AbsListView.LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public OperatorHook<T> operatorStacktrace(){  if (this == IGNORE)   return this;  traced=true;  return this;}  }
class C{  public static void showError(final Component parent,final String msg){  JOptionPane.showMessageDialog(isIconified(parent) ? null : parent,msg,System.getProperty(DEFAULT_WINDOW_TITLE_PROPERTY),JOptionPane.ERROR_MESSAGE);}  }
class C{  public static void decodeIgnoreWhitespace(Reader r,OutputStream os) throws IOException {  while (true) {    int ch0=readNonWhitespace(r);    int ch1=readNonWhitespace(r);    int ch2=readNonWhitespace(r);    int ch3=readNonWhitespace(r);    if (ch1 < 0)     break;    if (ch2 < 0)     ch2='=';    if (ch3 < 0)     ch3='=';    int chunk=((_decode[ch0] << 18) + (_decode[ch1] << 12) + (_decode[ch2] << 6)+ (_decode[ch3]));    os.write((byte)((chunk >> 16) & 0xff));    if (ch2 != '=' && ch2 != -1)     os.write((byte)((chunk >> 8) & 0xff));    if (ch3 != '=' && ch3 != -1)     os.write((byte)((chunk & 0xff))); else     break;  }  os.flush();}  }
class C{  public void checkAll(){  getRoot().clear(Port.CLEAR_METADATA | Port.CLEAR_ALL_ERRORS);  if (isEnabled()) {    checkOperator();    getRoot().transformMetaData();    propagateDirtyness();  }  updateExecutionOrder();}  }
class C{  @Deprecated public void write(byte b[],int off,int len){  if (len < 0)   throw new ArrayIndexOutOfBoundsException(len);  for (int i=0; i < len; ++i)   write(b[off + i]);}  }
class C{  @Override protected String doExport(List<EvaluationStatistics> stats){  String result;  List<String> headers;  FileWriter fwriter;  BufferedWriter bwriter;  int i;  result=null;  headers=EvaluationStatisticsUtils.headers(stats,true,true);  fwriter=null;  bwriter=null;  try {    fwriter=new FileWriter(m_File);    bwriter=new BufferedWriter(fwriter);    for (i=0; i < headers.size(); i++) {      if (i > 0)       bwriter.write("\t");      bwriter.write(headers.get(i));    }    bwriter.newLine();    bwriter.flush();    for (    EvaluationStatistics stat : stats) {      for (i=0; i < headers.size(); i++) {        if (i > 0)         bwriter.write("\t");        if (i == 0) {          bwriter.write(stat.getCommandLine());        } else         if (i == 1) {          bwriter.write(stat.getRelation());        } else {          if (stat.containsKey(headers.get(i)))           bwriter.write("" + stat.get(headers.get(i)));        }      }      bwriter.newLine();      bwriter.flush();    }  } catch (  Exception e) {    result=handleException("Failed to export statistics to: " + m_File,e);  } finally {    FileUtils.closeQuietly(bwriter);    FileUtils.closeQuietly(fwriter);  }  return result;}  }
class C{  public int readInt() throws IOException {  return bfdi.readInt();}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.LOGICAL_OR_EXPRESSION;}  }
class C{  default ApplyFunctions<T> applyFunctions(){  return new ApplyFunctions<T>(this);}  }
class C{  public void flush() throws IOException {  if (output != null) {    refreshBuffer();  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xD5EBBBCD,version=150,checkInsideInterrupt=true) public int __sceSasSetSteepWave(int sasCore,int voice,int unknown){  checkSasAndVoiceHandlesGood(sasCore,voice);  return 0;}  }
class C{  @Override public void onGenericTag(final PdfWriter writer,final Document document,final Rectangle rect,final String text){}  }
class C{  public Fraction divideBy(final Fraction fraction){  if (fraction == null) {    throw new IllegalArgumentException("The fraction must not be null");  }  if (fraction.numerator == 0) {    throw new ArithmeticException("The fraction to divide by must not be zero");  }  return multiplyBy(fraction.invert());}  }
class C{  private void flushViewDirtyRegion(Graphics g,Rectangle dirty){  JComponent view=(JComponent)getView();  if (dirty != null && dirty.width > 0 && dirty.height > 0) {    dirty.x+=view.getX();    dirty.y+=view.getY();    Rectangle clip=g.getClipBounds();    if (clip == null) {      g.setClip(0,0,getWidth(),getHeight());    }    g.clipRect(dirty.x,dirty.y,dirty.width,dirty.height);    clip=g.getClipBounds();    if (clip.width > 0 && clip.height > 0) {      paintView(g);    }  }}  }
class C{  public boolean isCompatibleValue(Object val){  if (val instanceof Value) {    return ((Value)val).isCompatibleKey(this);  }  return false;}  }
class C{  public boolean isPrimaryKey(){  return primaryKey;}  }
class C{  @Override public void endElement(String uri,String localName,String qName) throws SAXException {  String elementName=localName != null ? localName : qName;  if (elementName.equalsIgnoreCase("seq") || elementName.equalsIgnoreCase("par")) {    ContainerElement parent=mCurrentElement.getParent();    if (parent instanceof ParallelElement) {      log.info("End: " + elementName + ", parent element type: PAR");      mCurrentElement=parent;      mState=State.PARA;    } else     if (parent instanceof SequenceElement) {      log.info("End: " + elementName + ", parent element type: SEQ");      mCurrentElement=parent;      mState=State.SEQ;    } else {      log.info("End: " + elementName);    }  }  super.endElement(uri,localName,qName);}  }
class C{  public void updateCharacterStream(String columnLabel,java.io.Reader reader) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public void testInvalidAmount(){  Converter converter=makeConverter();  Class clazz=Integer.class;  Long min=new Long(Integer.MIN_VALUE);  Long max=new Long(Integer.MAX_VALUE);  Long minMinusOne=new Long(min.longValue() - 1);  Long maxPlusOne=new Long(max.longValue() + 1);  assertEquals("Minimum",new Integer(Integer.MIN_VALUE),converter.convert(clazz,min));  assertEquals("Maximum",new Integer(Integer.MAX_VALUE),converter.convert(clazz,max));  try {    assertEquals("Minimum - 1",null,converter.convert(clazz,minMinusOne));    fail("Less than minimum, expected ConversionException");  } catch (  Exception e) {  }  try {    assertEquals("Maximum + 1",null,converter.convert(clazz,maxPlusOne));    fail("More than maximum, expected ConversionException");  } catch (  Exception e) {  }}  }
class C{  private void drawOverlayGraphic(Graphics2D g,int width,int height){  Shape s=shapeGenerator.createTabCloseIcon(2,2,width - 4,height - 4);  g.setPaint(graphicBase);  g.fill(s);  s=shapeGenerator.createTabCloseIcon(2,3,width - 4,height - 4);  g.setPaint(createGraphicDropShadowGradient(s));  Shape oldClip=g.getClip();  g.setClip(2,3,width - 4,height - 4);  g.fill(s);  g.setClip(oldClip);}  }
class C{  public Matrix3 rotate(float angle){  if (angle == 0)   return this;  angle=DEGREE_TO_RAD * angle;  float cos=(float)Math.cos(angle);  float sin=(float)Math.sin(angle);  tmp[0]=cos;  tmp[1]=sin;  tmp[2]=0;  tmp[3]=-sin;  tmp[4]=cos;  tmp[5]=0;  tmp[6]=0;  tmp[7]=0;  tmp[8]=1;  mul(val,tmp);  return this;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 < z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 < constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 < constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public AlgorithmInitializationException(Algorithm algorithm){  super(algorithm);}  }
class C{  public void postProcessTypes(){  int x=0;  Enumeration e=typeRepository.elements();  while (e.hasMoreElements()) {    GPType t=(GPType)(e.nextElement());    if (t instanceof GPAtomicType) {      t.type=x;      x++;    }  }  numAtomicTypes=x;  e=typeRepository.elements();  while (e.hasMoreElements()) {    GPType t=(GPType)(e.nextElement());    if (t instanceof GPSetType) {      ((GPSetType)t).postProcessSetType(numAtomicTypes);      t.type=x;      x++;    }  }  numSetTypes=x - numAtomicTypes;  types=new GPType[numSetTypes + numAtomicTypes];  e=typeRepository.elements();  while (e.hasMoreElements()) {    GPType t=(GPType)(e.nextElement());    types[t.type]=t;  }}  }
class C{  public static void debug(Player player,String msg,boolean interactiveAsWell){  debug(player.getPlayerName() + ":" + msg,interactiveAsWell);}  }
class C{  public static <T>T[] requireNonNullElements(T[] array,String msg){  requireNonNull(array,msg);  int len=array.length;  for (int i=0; i < len; i++) {    if (array[i] == null) {      throw new NullPointerException(msg + ", item " + i+ " in the array "+ Arrays.toString(array)+ " is null");    }  }  return array;}  }
class C{  public GCActivity(String name,double startSec,double durationSec,double overheadPerc){  this(name,startSec,durationSec,false,overheadPerc);}  }
class C{  private RestTemplate createRestTemplate(){  RestTemplate restTemplate;  final CommonsClientHttpRequestFactory requestFactory=new CommonsClientHttpRequestFactory();  requestFactory.setReadTimeout(readTimeout);  restTemplate=new RestTemplate(requestFactory);  return restTemplate;}  }
class C{  public static Collection<SymbolToken> systemSymbols(){  return SYSTEM_TOKENS;}  }
class C{  private JComponent createDetailPanel(Throwable error){  StackTraceList stl=new StackTraceList(error);  JScrollPane detailPane=new ExtendedJScrollPane(stl);  detailPane.setPreferredSize(new Dimension(getWidth(),200));  detailPane.setBorder(null);  return detailPane;}  }
class C{  @Override public ObjectReference traceObject(TransitiveClosure trace,ObjectReference object){  VM.assertions.fail("unsupported interface");  return null;}  }
class C{  @Override public void run(){  amIActive=true;  float progress=0;  String inputHeader=null;  String outputHeader=null;  double range=0;  double sill=0;  double nugget=0;  int numIterations=1000;  boolean fastMode=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      range=Double.parseDouble(args[i]);    } else     if (i == 3) {      numIterations=Integer.parseInt(args[i]);    } else     if (i == 4) {      fastMode=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int i, j, k, m, n;    int edge1, edge2;    double pnt1x=0, pnt1y=0, pnt2x=0, pnt2y=0;    double z;    int diagonalSize=0;    Random generator=new Random();    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    double noData=image.getNoDataValue();    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    diagonalSize=(int)(Math.sqrt(rows * rows + cols * cols));    int filterHalfSize=(int)(range / (2 * image.getCellSizeX()));    int filterSize=filterHalfSize * 2 + 1;    int[] cellOffsets=new int[filterSize];    for (i=0; i < filterSize; i++) {      cellOffsets[i]=i - filterHalfSize;    }    double w=Math.sqrt(36d / (filterHalfSize * (filterHalfSize + 1) * filterSize));    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    outputFile.setPreferredPalette("blue_white_red.pal");    if (!fastMode) {      updateProgress("Loop 1 of 2: ",0);      for (i=0; i < numIterations; i++) {        double[] T=new double[diagonalSize + 2 * filterHalfSize];        for (j=0; j < diagonalSize; j++) {          T[j]=generator.nextGaussian();        }        double[] y=new double[diagonalSize];        for (j=0; j < diagonalSize; j++) {          z=0;          for (k=0; k < filterSize; k++) {            m=cellOffsets[k];            z+=m * T[j + filterHalfSize + m];          }          y[j]=w * z;        }        edge1=generator.nextInt(4);        edge2=edge1;        do {          edge2=generator.nextInt(4);        } while (edge2 == edge1);switch (edge1) {case 0:          pnt1x=0;        pnt1y=generator.nextDouble() * (rows - 1);      break;case 1:    pnt1x=generator.nextDouble() * (cols - 1);  pnt1y=0;break;case 2:pnt1x=cols - 1;pnt1y=generator.nextDouble() * (rows - 1);break;case 3:pnt1x=generator.nextDouble() * (cols - 1);pnt1y=rows - 1;break;}switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}if (pnt1x == pnt2x || pnt1y == pnt2y) {do {switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}} while (pnt1x == pnt2x || pnt1y == pnt2y);}double lineSlope=(pnt2y - pnt1y) / (pnt2x - pnt1x);double lineIntercept=pnt1y - lineSlope * pnt1x;double perpendicularLineSlope=-1 / lineSlope;double slopeDiff=(lineSlope - perpendicularLineSlope);double perpendicularLineIntercept=0;double intersectingPointX, intersectingPointY;perpendicularLineIntercept=0;double corner1X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner1Y=lineSlope * corner1X - lineIntercept;row=0;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner2X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner2Y=lineSlope * corner2X - lineIntercept;row=rows;col=0;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner3X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner3Y=lineSlope * corner3X - lineIntercept;row=rows;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner4X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner4Y=lineSlope * corner4X - lineIntercept;double lineStartX, lineStartY;lineStartX=corner1X;lineStartY=corner1Y;if (corner2Y < lineStartY) {lineStartX=corner2X;lineStartY=corner2Y;}if (corner3Y < lineStartY) {lineStartX=corner3X;lineStartY=corner3Y;}if (corner4Y < lineStartY) {lineStartX=corner4X;lineStartY=corner4Y;}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {perpendicularLineIntercept=row - perpendicularLineSlope * col;intersectingPointX=(perpendicularLineIntercept - lineIntercept) / slopeDiff;intersectingPointY=lineSlope * intersectingPointX - lineIntercept;int p=(int)(Math.sqrt((intersectingPointX - lineStartX) * (intersectingPointX - lineStartX) + (intersectingPointY - lineStartY) * (intersectingPointY - lineStartY)));if (p < 0) {p=0;}if (p > (diagonalSize - 1)) {p=diagonalSize - 1;}z=outputFile.getValue(row,col) + y[p];outputFile.setValue(row,col,z);}}if (cancelOp) {cancelOperation();return;}progress=(float)(i * 100f / numIterations);updateProgress("Loop 1 of 2: ",(int)progress);}updateProgress("Loop 2 of 2: ",0);double value;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=outputFile.getValue(row,col);value=(float)(z / numIterations);outputFile.setValue(row,col,value);}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / rows);updateProgress("Loop 2 of 2: ",(int)progress);}} else {double[][] output=new double[rows][cols];updateProgress("Loop 1 of 2: ",0);for (i=0; i < numIterations; i++) {double[] T=new double[diagonalSize + 2 * filterHalfSize];for (j=0; j < diagonalSize; j++) {T[j]=generator.nextGaussian();}double[] y=new double[diagonalSize];for (j=0; j < diagonalSize; j++) {z=0;for (k=0; k < filterSize; k++) {m=cellOffsets[k];z+=m * T[j + filterHalfSize + m];}y[j]=w * z;}edge1=generator.nextInt(4);edge2=edge1;do {edge2=generator.nextInt(4);} while (edge2 == edge1);switch (edge1) {case 0:pnt1x=0;pnt1y=generator.nextDouble() * (rows - 1);break;case 1:pnt1x=generator.nextDouble() * (cols - 1);pnt1y=0;break;case 2:pnt1x=cols - 1;pnt1y=generator.nextDouble() * (rows - 1);break;case 3:pnt1x=generator.nextDouble() * (cols - 1);pnt1y=rows - 1;break;}switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}if (pnt1x == pnt2x || pnt1y == pnt2y) {do {switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}} while (pnt1x == pnt2x || pnt1y == pnt2y);}double lineSlope=(pnt2y - pnt1y) / (pnt2x - pnt1x);double lineIntercept=pnt1y - lineSlope * pnt1x;double perpendicularLineSlope=-1 / lineSlope;double slopeDiff=(lineSlope - perpendicularLineSlope);double perpendicularLineIntercept=0;double intersectingPointX, intersectingPointY;perpendicularLineIntercept=0;double corner1X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner1Y=lineSlope * corner1X - lineIntercept;row=0;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner2X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner2Y=lineSlope * corner2X - lineIntercept;row=rows;col=0;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner3X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner3Y=lineSlope * corner3X - lineIntercept;row=rows;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner4X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner4Y=lineSlope * corner4X - lineIntercept;double lineStartX, lineStartY;lineStartX=corner1X;lineStartY=corner1Y;if (corner2Y < lineStartY) {lineStartX=corner2X;lineStartY=corner2Y;}if (corner3Y < lineStartY) {lineStartX=corner3X;lineStartY=corner3Y;}if (corner4Y < lineStartY) {lineStartX=corner4X;lineStartY=corner4Y;}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {perpendicularLineIntercept=row - perpendicularLineSlope * col;intersectingPointX=(perpendicularLineIntercept - lineIntercept) / slopeDiff;intersectingPointY=lineSlope * intersectingPointX - lineIntercept;int p=(int)(Math.sqrt((intersectingPointX - lineStartX) * (intersectingPointX - lineStartX) + (intersectingPointY - lineStartY) * (intersectingPointY - lineStartY)));if (p < 0) {p=0;}if (p > (diagonalSize - 1)) {p=diagonalSize - 1;}output[row][col]+=y[p];}}if (cancelOp) {cancelOperation();return;}progress=(float)(i * 100f / numIterations);updateProgress("Loop 1 of 2: ",(int)progress);}updateProgress("Loop 2 of 2: ",0);double value;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {value=(float)(output[row][col] / numIterations);outputFile.setValue(row,col,value);}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / rows);updateProgress("Loop 2 of 2: ",(int)progress);}}outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");outputFile.addMetadataEntry("Created on " + new Date());image.close();outputFile.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static void main(String[] args){  runFileLoader(new SVMLightLoader(),args);}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((NceListener)client).message((NceMessage)m);}  }
class C{  public void refresh(){  treeViewer.refresh();}  }
class C{  public void endVisit(ArrayAccess node){}  }
class C{  public boolean isHideUrl(){  return this.hide_url;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  endpointEClass=createEClass(ENDPOINT);  createEAttribute(endpointEClass,ENDPOINT__NAME);  createEReference(endpointEClass,ENDPOINT__TO_CHANNELS);  createEReference(endpointEClass,ENDPOINT__FROM_CHANNELS);  channelEClass=createEClass(CHANNEL);  createEReference(channelEClass,CHANNEL__TO_ENDPOINT);  createEReference(channelEClass,CHANNEL__FROM_ENDPOINT);  createEAttribute(channelEClass,CHANNEL__NAME);  createEAttribute(channelEClass,CHANNEL__GUARANTEED);  adapterEClass=createEClass(ADAPTER);  routerEClass=createEClass(ROUTER);  createEReference(routerEClass,ROUTER__OWNED_ROUTES);  createEAttribute(routerEClass,ROUTER__TYPE);  filterEClass=createEClass(FILTER);  createEAttribute(filterEClass,FILTER__EXPRESSION);  transformerEClass=createEClass(TRANSFORMER);  gatewayEClass=createEClass(GATEWAY);  conditionalRouteEClass=createEClass(CONDITIONAL_ROUTE);  createEAttribute(conditionalRouteEClass,CONDITIONAL_ROUTE__CONDITION);  createEReference(conditionalRouteEClass,CONDITIONAL_ROUTE__CHANNEL);  splitterEClass=createEClass(SPLITTER);  aggregatorEClass=createEClass(AGGREGATOR);  createEAttribute(aggregatorEClass,AGGREGATOR__PART);  createEAttribute(aggregatorEClass,AGGREGATOR__STRATEGY);  createEAttribute(aggregatorEClass,AGGREGATOR__EXPRESSION);  routeEClass=createEClass(ROUTE);  createEReference(routeEClass,ROUTE__OWNED_ENDPOINTS);  createEReference(routeEClass,ROUTE__OWNED_CHANNELS);  createEAttribute(routeEClass,ROUTE__NAME);  createEAttribute(routeEClass,ROUTE__EXCHANGE_TYPE);  serviceActivatorEClass=createEClass(SERVICE_ACTIVATOR);  eipModelEClass=createEClass(EIP_MODEL);  createEReference(eipModelEClass,EIP_MODEL__OWNED_ROUTES);  createEReference(eipModelEClass,EIP_MODEL__OWNED_SERVICE_REFS);  enricherEClass=createEClass(ENRICHER);  createEAttribute(enricherEClass,ENRICHER__PART);  compositeProcessorEClass=createEClass(COMPOSITE_PROCESSOR);  createEReference(compositeProcessorEClass,COMPOSITE_PROCESSOR__OWNED_ENDPOINTS);  recipientListRouterEClass=createEClass(RECIPIENT_LIST_ROUTER);  serviceRefEClass=createEClass(SERVICE_REF);  createEAttribute(serviceRefEClass,SERVICE_REF__NAME);  createEAttribute(serviceRefEClass,SERVICE_REF__REFERENCE);  createEAttribute(serviceRefEClass,SERVICE_REF__OPERATIONS);  serviceInvocationEClass=createEClass(SERVICE_INVOCATION);  createEAttribute(serviceInvocationEClass,SERVICE_INVOCATION__CONTEXT);  createEAttribute(serviceInvocationEClass,SERVICE_INVOCATION__OPERATION_NAME);  createEReference(serviceInvocationEClass,SERVICE_INVOCATION__SERVICE_REF);  invocableEndpointEClass=createEClass(INVOCABLE_ENDPOINT);  createEReference(invocableEndpointEClass,INVOCABLE_ENDPOINT__OWNED_SERVICE_INVOCATIONS);  contentFilterEClass=createEClass(CONTENT_FILTER);  resequencerEClass=createEClass(RESEQUENCER);  createEAttribute(resequencerEClass,RESEQUENCER__STREAM_SEQUENCES);  metadataEClass=createEClass(METADATA);  createEAttribute(metadataEClass,METADATA__KEY);  createEAttribute(metadataEClass,METADATA__VALUES);  metadatableEClass=createEClass(METADATABLE);  createEReference(metadatableEClass,METADATABLE__OWNED_METADATAS);  messagePartEEnum=createEEnum(MESSAGE_PART);  routingTypeEEnum=createEEnum(ROUTING_TYPE);  exchangeTypeEEnum=createEEnum(EXCHANGE_TYPE);}  }
class C{  protected void removeMessageProcessor(MessageProcessor oldMessageProcessor){synchronized (messageProcessors) {    if (messageProcessors.remove(oldMessageProcessor)) {      oldMessageProcessor.stop();    }  }}  }
class C{  protected void updateFromTableEnabledChanged(){  getAction().setEnabled(table.isEnabled());}  }
class C{  public void write(char cbuf[],int off,int len) throws IOException {  se.write(cbuf,off,len);}  }
class C{  @Override public void onResume(){  mWebView.onResume();  super.onResume();}  }
class C{  public LockedDoor(final String key,final String clazz,final int requiredAmount){  super(clazz);  put("locked",key);  this.requiredAmount=requiredAmount;}  }
class C{  public NgOptions build(){  if (valueFormatter == null)   valueFormatter=new DefaultValueFormatter(formatters);  if (blur == null)   blur=new DefaultBlur(scaleRatio,blurRadius);  return new NgOptions(valueFormatter,blur);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ACTIVITY___ANONYMOUS_ACTIVITY_11:    getAnonymous_activity_1_1().clear();  return;case UmplePackage.ACTIVITY___CODE_1:setCode_1(CODE_1_EDEFAULT);return;case UmplePackage.ACTIVITY___ANONYMOUS_ACTIVITY_21:getAnonymous_activity_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void entity(String name,int value){  theEntities.put(name,value);}  }
class C{  private boolean needToValidateHA(StorageSystem system){  return (!(system.getSystemType().equals(DiscoveredSystemObject.Type.scaleio.name())) && !(system.getSystemType().equals(DiscoveredSystemObject.Type.xtremio.name())) && !(system.getSystemType().equals(DiscoveredSystemObject.Type.ceph.name()))&& (HDSUtils.checkForAMSSeries(system) || HDSUtils.checkForHUSSeries(system)));}  }
class C{  private byte[] decryptKeyedChecksum(byte[] enc_cksum,byte[] key) throws KrbCryptoException {  byte[] new_key=new byte[keySize()];  System.arraycopy(key,0,new_key,0,key.length);  for (int i=0; i < new_key.length; i++)   new_key[i]=(byte)(new_key[i] ^ 0xf0);  try {    if (DESKeySpec.isWeak(new_key,0)) {      new_key[7]=(byte)(new_key[7] ^ 0xF0);    }  } catch (  InvalidKeyException ex) {  }  byte[] ivec=new byte[new_key.length];  byte[] cksum=new byte[enc_cksum.length];  Des.cbc_encrypt(enc_cksum,cksum,new_key,ivec,false);  return cksum;}  }
class C{  public void paint(Graphics g,Shape a){  if (c != null) {    Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();    c.setBounds(alloc.x,alloc.y,alloc.width,alloc.height);  }}  }
class C{  public void showHelp(){  System.out.println("Usage: [Options]");  System.out.println("  -p, --port <val>             Server bind port");  System.out.println("  -a, --auth <val>             Use username/password authentication");  System.out.println("                               Example: --auth=admin:1234");  System.out.println("                               --auth=admin:1234,root:1234");  System.out.println("  -s, --ssl <val>              SSL configuration file path");  System.out.println("  -l, --sslClientAuth          Authenticate client's certificate");  System.out.println("  -P, --proxy <val>            Set server SOCKS5 proxy, <val> should be:");  System.out.println("                               host:port:username:password or host:port");  System.out.println("  -S, --proxySsl <val>         Proxy SSL configuration file path");  System.out.println("  -k, --keystore <val>         Keystore location");  System.out.println("  -w  --keystorePassword <val>");  System.out.println("                               Password of keystore");  System.out.println("  -t  --keystoreType <val>");  System.out.println("                               Keystore type, default \"JKS\"");  System.out.println("  -K, --trustStore <val>    Trust keystore location. default same as " + "[--keystore]");  System.out.println("  -W, --trustStorePassword <val>");  System.out.println("                               Password of trusted keystore");  System.out.println("  -T, --trustStoreType <val>");  System.out.println("                               Trust keystore type, default \"JKS\"");  System.out.println("  -pk <val>                    Proxy keystore path");  System.out.println("  -pw <val>                    Password for keystore");  System.out.println("  -pt <val>                    Proxy keystore type");  System.out.println("  -h, --help                   Show help");}  }
class C{  public static Option bufferSize(int value){  return new BufferSizeOption(value);}  }
class C{  public DescriptionSliderView empty(int resId){  mEmptyPlaceHolderRes=resId;  imageView.setImageResource(mEmptyPlaceHolderRes);  return this;}  }
class C{  private void refreshFields(){  this.loadThreshold=Math.min(this.buckets.length - 1,(int)(this.buckets.length * this.loadFactor));  this.mask=this.buckets.length - 1;}  }
class C{  public Queue<Env<AttrContext>> flow(Queue<Env<AttrContext>> envs){  ListBuffer<Env<AttrContext>> results=new ListBuffer<>();  for (  Env<AttrContext> env : envs) {    flow(env,results);  }  return stopIfError(CompileState.FLOW,results);}  }
class C{  @SuppressWarnings("unchecked") public void updateStory(final String message,final String name,final String caption,final String description,final String link,final String picture,final SocialAuthListener<Integer> listener) throws UnsupportedEncodingException {  try {    if (getCurrentProvider().getProviderId().equalsIgnoreCase("facebook")) {      final Map<String,String> params=new HashMap<>();      params.put("name",name);      params.put("caption",caption);      params.put("description",description);      params.put("link",link);      params.put("picture",picture);      storyResult="message=" + URLEncoder.encode(message,Constants.ENCODING) + "&access_token"+ "="+ getCurrentProvider().getAccessGrant().getKey();      new StoryTask(listener).execute(params);    } else {      Log.d("SocialAuthAdapter","Provider Not Supported");    }  } catch (  NullPointerException e) {    e.printStackTrace();    Log.d("SocialAuthAdapter","Provider Not Supported");  }}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){  double w=area.getWidth();  double h=area.getHeight();  if (w <= 0.0 || h <= 0.0) {    return;  }  double t=this.insets.calculateTopInset(h);  double b=this.insets.calculateBottomInset(h);  double l=this.insets.calculateLeftInset(w);  double r=this.insets.calculateRightInset(w);  double x=area.getX();  double y=area.getY();  double x0=x + l / 2.0;  double x1=x + w - r / 2.0;  double y0=y + h - b / 2.0;  double y1=y + t / 2.0;  g2.setPaint(getPaint());  g2.setStroke(getStroke());  Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);  Line2D line=new Line2D.Double();  if (t > 0.0) {    line.setLine(x0,y1,x1,y1);    g2.draw(line);  }  if (b > 0.0) {    line.setLine(x0,y0,x1,y0);    g2.draw(line);  }  if (l > 0.0) {    line.setLine(x0,y0,x0,y1);    g2.draw(line);  }  if (r > 0.0) {    line.setLine(x1,y0,x1,y1);    g2.draw(line);  }  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved);}  }
class C{  public void registerOutParameter(int parameterIndex,int sqlType,int scale) throws SQLException {  procedureCall.registerOutParam(parameterIndex,sqlType);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isStreaming(){  if ((mAudioStream != null && mAudioStream.isStreaming()) || (mVideoStream != null && mVideoStream.isStreaming()))   return true; else   return false;}  }
class C{  public String createOrgPathFromOrgUnits(List<String> orgUnits) throws UnsupportedEncodingException {  StringBuilder path=new StringBuilder();  for (  String orgUnit : orgUnits) {    if (path.length() != 0) {      path.append('/');    }    path.append(URLEncoder.encode(orgUnit,"UTF-8"));  }  return path.toString();}  }
class C{  public void removeSeriesRenderer(SimpleSeriesRenderer renderer){  mRenderers.remove(renderer);}  }
class C{  private static void checkSupported(NormalMethod method,OptOptions options){  if (method.getDeclaringClass().hasDynamicBridgeAnnotation()) {    String msg="Dynamic Bridge register save protocol not implemented";    throw MagicNotImplementedException.EXPECTED(msg);  }  if (method.getDeclaringClass().hasBridgeFromNativeAnnotation()) {    String msg="Native Bridge prologue not implemented";    throw MagicNotImplementedException.EXPECTED(msg);  }  if (method.hasNoOptCompileAnnotation()) {    String msg="Method throws NoOptCompilePragma";    throw MagicNotImplementedException.EXPECTED(msg);  }  if (options.hasDRIVER_EXCLUDE()) {    String name=method.getDeclaringClass().toString() + "." + method.getName();    if (options.fuzzyMatchDRIVER_EXCLUDE(name)) {      if (!method.getDeclaringClass().hasSaveVolatileAnnotation()) {        throw new OptimizingCompilerException("method excluded",false);      }    }  }}  }
class C{  public static boolean parseBoolean(String valueStr){  return valueStr.equalsIgnoreCase("true") || valueStr.equalsIgnoreCase("on") || valueStr.equalsIgnoreCase("yes")|| valueStr.equalsIgnoreCase("y")|| valueStr.equalsIgnoreCase("1");}  }
class C{  public static void main(String[] args){  final DiskCostModel[] diskCostModels=new DiskCostModel[]{DiskCostModel.DEFAULT};  final int[] branchingFactors=new int[]{32,64,128,256,512,1024};  final int[] heights=new int[]{0,1,2,3,4,5,6,7,8,9};  final int[] rangeCounts=new int[]{1,10,100,1000,2000,5000,10000,2000,50000,100000};  final int leafUtilization=65;  System.out.println("seekTime\txferRate\tleafUtil\tm\theight\trangeCount\tcost(ms)");  final NumberFormat millisFormat=NumberFormat.getIntegerInstance();  millisFormat.setGroupingUsed(true);  final NumberFormat percentFormat=NumberFormat.getPercentInstance();  percentFormat.setMinimumFractionDigits(0);  final StringBuilder sb=new StringBuilder();  for (  DiskCostModel diskCostModel : diskCostModels) {    final BTreeCostModel btreeCostModel=new BTreeCostModel(diskCostModel);    for (    int m : branchingFactors) {      for (      int h : heights) {        for (        int rangeCount : rangeCounts) {          final int estimatedHeight=estimateHeight(rangeCount,m);          if (estimatedHeight > h) {            break;          }          final double cost=btreeCostModel.rangeScan(rangeCount,m,h,leafUtilization);          sb.setLength(0);          sb.append(millisFormat.format(diskCostModel.seekTime));          sb.append('\t');          sb.append(millisFormat.format(diskCostModel.transferRate));          sb.append('\t');          sb.append(percentFormat.format(leafUtilization / 100d));          sb.append('\t');          sb.append(m);          sb.append('\t');          sb.append(h);          sb.append('\t');          sb.append(rangeCount);          sb.append('\t');          sb.append(millisFormat.format(cost));          System.out.println(sb);        }      }    }  }}  }
class C{  public int run(String[] args) throws Exception {  Options options=new Options();  Option helpOpts=OptionBuilder.withArgName("help").withDescription("show this help message").create("help");  Option webGraphDbOpts=OptionBuilder.withArgName("webgraphdb").hasArg().withDescription("the web graph database to use").create("webgraphdb");  Option inlinkOpts=OptionBuilder.withArgName("inlinks").withDescription("show highest inlinks").create("inlinks");  Option outlinkOpts=OptionBuilder.withArgName("outlinks").withDescription("show highest outlinks").create("outlinks");  Option scoreOpts=OptionBuilder.withArgName("scores").withDescription("show highest scores").create("scores");  Option topNOpts=OptionBuilder.withArgName("topn").hasOptionalArg().withDescription("show topN scores").create("topn");  Option outputOpts=OptionBuilder.withArgName("output").hasArg().withDescription("the output directory to use").create("output");  Option effOpts=OptionBuilder.withArgName("asEff").withDescription("Solr ExternalFileField compatible output format").create("asEff");  Option groupOpts=OptionBuilder.hasArgs(2).withDescription("group <host|domain> <sum|max>").create("group");  Option sequenceFileOpts=OptionBuilder.withArgName("asSequenceFile").withDescription("whether to output as a sequencefile").create("asSequenceFile");  options.addOption(helpOpts);  options.addOption(webGraphDbOpts);  options.addOption(inlinkOpts);  options.addOption(outlinkOpts);  options.addOption(scoreOpts);  options.addOption(topNOpts);  options.addOption(outputOpts);  options.addOption(effOpts);  options.addOption(groupOpts);  options.addOption(sequenceFileOpts);  CommandLineParser parser=new GnuParser();  try {    CommandLine line=parser.parse(options,args);    if (line.hasOption("help") || !line.hasOption("webgraphdb")) {      HelpFormatter formatter=new HelpFormatter();      formatter.printHelp("NodeDumper",options);      return -1;    }    String webGraphDb=line.getOptionValue("webgraphdb");    boolean inlinks=line.hasOption("inlinks");    boolean outlinks=line.hasOption("outlinks");    boolean scores=line.hasOption("scores");    long topN=(line.hasOption("topn") ? Long.parseLong(line.getOptionValue("topn")) : Long.MAX_VALUE);    String output=line.getOptionValue("output");    DumpType type=(inlinks ? DumpType.INLINKS : outlinks ? DumpType.OUTLINKS : DumpType.SCORES);    NameType nameType=null;    AggrType aggrType=null;    String[] group=line.getOptionValues("group");    if (group != null && group.length == 2) {      nameType=(group[0].equals("host") ? NameType.HOST : group[0].equals("domain") ? NameType.DOMAIN : null);      aggrType=(group[1].equals("sum") ? AggrType.SUM : group[1].equals("sum") ? AggrType.MAX : null);    }    boolean asEff=line.hasOption("asEff");    boolean asSequenceFile=line.hasOption("asSequenceFile");    dumpNodes(new Path(webGraphDb),type,topN,new Path(output),asEff,nameType,aggrType,asSequenceFile);    return 0;  } catch (  Exception e) {    LOG.error("NodeDumper: " + StringUtils.stringifyException(e));    return -2;  }}  }
class C{  @Override public String globalInfo(){  return "The Pearson VII function-based universal kernel.\n\n" + "For more information see:\n\n" + getTechnicalInformation().toString();}  }
class C{  public Iterable<Result<Item>> listObjects(final String bucketName) throws XmlPullParserException {  return listObjects(bucketName,null);}  }
class C{  public TransitionsData(Collection<TransitionData<S,E>> transitionsData,Map<S,List<ChoiceData<S,E>>> choices,Map<S,List<JunctionData<S,E>>> junctions,Map<S,List<S>> forks,Map<S,List<S>> joins,Collection<EntryData<S,E>> entrys,Collection<ExitData<S,E>> exits,Collection<HistoryData<S,E>> historys){  this.transitions=transitionsData;  this.choices=choices;  this.junctions=junctions;  this.forks=forks;  this.joins=joins;  this.entrys=entrys;  this.exits=exits;  this.historys=historys;}  }
class C{  private boolean parseBoolean(final String stringValue){  return stringValue != null && Boolean.parseBoolean(stringValue);}  }
class C{  private void initPubNub(){  this.mPubNub=new Pubnub(Constants.PUBLISH_KEY,Constants.SUBSCRIBE_KEY);  this.mPubNub.setUUID(this.username);  subscribeWithPresence();  history();  gcmRegister();}  }
class C{  private void initRoutingRules(){  JsonObject rules=new JsonObject();  rules=TestUtils.addRoutingRuleMainStorage(rules);  rules=TestUtils.addRoutingRuleHooks(rules);  TestUtils.putRoutingRules(rules);}  }
class C{  protected boolean allowParseVersionRange(){  return true;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int keyAt(int index){  return mKeys[index];}  }
class C{  public void push(final Type value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {switch (value.getSort()) {case Type.BOOLEAN:      mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Boolean","TYPE",CLDESC);    break;case Type.CHAR:  mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Character","TYPE",CLDESC);break;case Type.BYTE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Byte","TYPE",CLDESC);break;case Type.SHORT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Short","TYPE",CLDESC);break;case Type.INT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Integer","TYPE",CLDESC);break;case Type.FLOAT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Float","TYPE",CLDESC);break;case Type.LONG:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Long","TYPE",CLDESC);break;case Type.DOUBLE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Double","TYPE",CLDESC);break;default :mv.visitLdcInsn(value);}}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String s1=m_arg0.execute(xctxt).str();  String s2=m_arg1.execute(xctxt).str();  int index=s1.indexOf(s2);  return (-1 == index) ? XString.EMPTYSTRING : new XString(s1.substring(0,index));}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  @Override public int hashCode(){  return lowerBound.hashCode() * 31 + upperBound.hashCode();}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(preference);  sb.append(" ");  sb.append(map822);  sb.append(" ");  sb.append(mapX400);  return sb.toString();}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public static String showDialog(final Frame frame,final String title,final Object message,final int messageType,final String... buttons){  final Object[] options=new Object[buttons.length];  for (int i=0, buttonsLength=buttons.length; i < buttonsLength; i++) {    options[i]=buttons[i];  }  final JOptionPane pane=new JOptionPane(message,messageType);  pane.setOptions(options);  final JDialog window=pane.createDialog(frame,title);  window.setVisible(true);  return (String)pane.getValue();}  }
class C{  private void calculateMonth(){  _dayOfMonth=_dayOfYear;  for (_month=0; _month < 12; _month++) {    if (_month == 1 && _isLeapYear) {      if (_dayOfMonth < 29)       return; else       _dayOfMonth-=29;    } else     if (_dayOfMonth < DAYS_IN_MONTH[(int)_month])     return; else     _dayOfMonth-=DAYS_IN_MONTH[(int)_month];  }}  }
class C{  public void forceNSDecl(String uri){  forcedDeclTable.put(uri,Boolean.TRUE);}  }
class C{  public void error(Throwable throwable,String msg,Object arg0,Object arg1){  innerLog(Level.ERROR,throwable,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String fileName=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  int row, col, rows, cols;  int nBands=1;  int nBits=8;  int skipBytes=0;  double xDim=1;  double yDim=1;  double ulxmap=0;  double ulymap=0;  String layout="bil";  String pixelType="unsignedint";  String xyUnits="not specified";  String zUnits="not specified";  String projection="not specified";  String byteOrder=java.nio.ByteOrder.nativeOrder().toString();  String[] imageFiles;  int numImages=0;  double noData=-32768;  String dataType="float";  String dataScale="continuous";  DataInputStream in=null;  BufferedReader br=null;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  double west=0;  double north=0;  double east=0;  double south=0;  RandomAccessFile rIn=null;  FileChannel inChannel=null;  ByteBuffer buf=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",(int)progress);      fileName=imageFiles[i];      if (!((new File(fileName)).exists())) {        showFeedback("Image file does not exist.");        break;      }      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(fileName).toLowerCase();      String[] formatNames={"bil","bsq","bip"};      boolean checkForSupportedFormat=false;      for (      String str : formatNames) {        if (str.toLowerCase().equals(fileExtension)) {          checkForSupportedFormat=true;          break;        }      }      if (!checkForSupportedFormat) {        showFeedback("This image file format is not currently supported by this tool.");        return;      }      String fileHeader=fileName.replace("." + fileExtension,".hdr");      if (!whitebox.utilities.FileUtilities.fileExists(fileHeader) || !fileHeader.contains(".hdr")) {        showFeedback("This image header file (.hdr) could not be located.");        return;      }      FileInputStream fstream=new FileInputStream(fileHeader);      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      String delimiter=",";      String line;      String[] str;      rows=0;      cols=0;      while ((line=br.readLine()) != null) {        if (line.startsWith("data type")) {          line=line.replace("data type","datatype");        }        if (line.startsWith("header offset")) {          line=line.replace("header offset","headeroffset");        }        if (line.startsWith("x start")) {          line=line.replace("x start","xstart");        }        if (line.startsWith("y start")) {          line=line.replace("y start","ystart");        }        str=line.split(delimiter);        if (str.length <= 1) {          delimiter=" ";          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);          }        }        if (str[0].toLowerCase().contains("byteorder")) {          if (str[str.length - 1].toLowerCase().contains("i")) {            byteOrder="LITTLE_ENDIAN";          } else {            byteOrder="BIG_ENDIAN";          }        } else         if (str[0].toLowerCase().contains("nrows")) {          rows=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ncols")) {          cols=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("nbands")) {          nBands=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("nbits")) {          nBits=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("skipbytes")) {          skipBytes=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("xdim")) {          xDim=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ydim")) {          yDim=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ulxmap")) {          ulxmap=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ulymap")) {          ulymap=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("layout")) {          layout=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("pixeltype")) {          if (str[str.length - 1].toLowerCase().contains("float")) {            pixelType="float";          } else           if (str[str.length - 1].toLowerCase().contains("signed") && !str[str.length - 1].toLowerCase().contains("unsigned")) {            pixelType="signedint";          } else {            pixelType="unsignedint";          }        } else         if (str[0].toLowerCase().contains("xyunits")) {          xyUnits=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("zunits")) {          zUnits=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("projection")) {          projection=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("nodata")) {          noData=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("lines")) {          rows=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("samples")) {          cols=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("bands")) {          nBands=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("headeroffset")) {          skipBytes=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("interleave")) {          layout=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().equals("xstart")) {        } else         if (str[0].toLowerCase().equals("ystart")) {        } else         if (str[0].toLowerCase().contains("datatype")) {          int enviDTCode=Integer.parseInt(str[str.length - 1]);switch (enviDTCode) {case 1:            nBits=8;          pixelType="unsignedint";        break;case 2:      nBits=16;    pixelType="signedint";  break;case 3:nBits=32;pixelType="signedint";break;case 4:nBits=32;pixelType="float";break;case 5:nBits=64;pixelType="float";break;case 6:showFeedback("Whitebox does not support the import of complex number file formats.");return;case 9:showFeedback("Whitebox does not support the import of complex number file formats.");return;case 12:nBits=(int)16;pixelType="unsignedint";break;case 13:nBits=32;pixelType="unsignedint";break;case 14:nBits=64;pixelType="unsignedint";break;}}}char[] extChars=fileExtension.toCharArray();boolean worldFileFound=false;String wfExtension=Character.toString(extChars[0]) + Character.toString(extChars[2]) + "w";String worldFile=imageFiles[i].replace(fileExtension,wfExtension);if ((new File(worldFile)).exists()) {worldFileFound=true;} else {wfExtension=fileExtension + "w";worldFile=imageFiles[i].replace(fileExtension,wfExtension);if ((new File(worldFile)).exists()) {worldFileFound=true;} else {wfExtension=".wld";worldFile=imageFiles[i].replace(fileExtension,wfExtension);if ((new File(worldFile)).exists()) {worldFileFound=true;}}}if (worldFileFound) {double A=0, B=0, C=0, D=0, E=0, F=0;fstream=new FileInputStream(worldFile);in=new DataInputStream(fstream);br=new BufferedReader(new InputStreamReader(in));int n=0;while ((line=br.readLine()) != null) {switch (n) {case 0:A=Double.parseDouble(line);break;case 1:D=Double.parseDouble(line);break;case 2:B=Double.parseDouble(line);break;case 3:E=Double.parseDouble(line);break;case 4:C=Double.parseDouble(line);break;case 5:F=Double.parseDouble(line);break;}n++;}if (B == 0 && D == 0) {west=A * 0 + B * 0 + C;north=D * 0 + E * 0 + F;east=A * (cols - 1) + B * (rows - 1) + C;south=D * (cols - 1) + E * (rows - 1) + F;} else {showFeedback("We're sorry but Whitebox cannot currently handle the import of rotated images.");break;}} else {west=ulxmap;north=ulymap;east=ulxmap + cols * xDim;south=ulymap - rows * yDim;}if (nBits <= 32 && pixelType.toLowerCase().contains("int")) {dataType="integer";} else if (nBits <= 32 && pixelType.toLowerCase().contains("float")) {dataType="float";} else {dataType="double";}for (int a=0; a < nBands; a++) {if (nBands > 1) {whiteboxHeaderFile=imageFiles[i].replace("." + fileExtension,"_band" + (a + 1) + ".dep");whiteboxDataFile=imageFiles[i].replace("." + fileExtension,"_band" + (a + 1) + ".tas");} else {whiteboxHeaderFile=imageFiles[i].replace("." + fileExtension,".dep");whiteboxDataFile=imageFiles[i].replace("." + fileExtension,".tas");}(new File(whiteboxHeaderFile)).delete();(new File(whiteboxDataFile)).delete();fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);String outputByteOrder=java.nio.ByteOrder.nativeOrder().toString();str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + dataType;out.println(str1);str1="Z Units:\t" + zUnits;out.println(str1);str1="XY Units:\t" + xyUnits;out.println(str1);str1="Projection:\t" + projection;out.println(str1);str1="Data Scale:\t" + dataScale;out.println(str1);str1="Preferred Palette:\t" + "grey.pal";out.println(str1);str1="NoData:\t" + String.valueOf(noData);out.println(str1);if (outputByteOrder.toLowerCase().contains("lsb") || outputByteOrder.toLowerCase().contains("little")) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);output=new WhiteboxRaster(whiteboxHeaderFile,"rw");int numBytes=nBits / 8;int pos;if (layout.equals("bil") || fileExtension.equals("bil")) {int readLengthInBytes=cols * numBytes;int rowLength=cols * numBytes * nBands;buf=ByteBuffer.allocate(readLengthInBytes);if (byteOrder.toLowerCase().contains("little")) {buf.order(ByteOrder.LITTLE_ENDIAN);} else {buf.order(ByteOrder.BIG_ENDIAN);}rIn=new RandomAccessFile(fileName,"r");inChannel=rIn.getChannel();if (nBits == 8 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedByte(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 8 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.get(col * numBytes));}outputRow--;}} else if (nBits == 16 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedShort(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 16 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getShort(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedInt(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 32 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getInt(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getFloat(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("unsignedint")) {showFeedback("We're sorry but this data type is not supported for import to Whitebox.");break;} else if (nBits == 64 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getLong(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getDouble(col * numBytes));}outputRow--;}}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();} else if (layout.equals("bsq") || fileExtension.equals("bsq")) {int rowLength=cols * numBytes;int bandLength=rows * cols * numBytes;buf=ByteBuffer.allocate(rowLength);if (byteOrder.toLowerCase().contains("little")) {buf.order(ByteOrder.LITTLE_ENDIAN);} else {buf.order(ByteOrder.BIG_ENDIAN);}rIn=new RandomAccessFile(fileName,"r");inChannel=rIn.getChannel();if (nBits == 8 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedByte(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 8 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.get(col * numBytes));}outputRow--;}} else if (nBits == 16 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedShort(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 16 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getShort(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedInt(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 32 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getInt(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getFloat(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("unsignedint")) {showFeedback("We're sorry but this data type is not supported for import to Whitebox.");break;} else if (nBits == 64 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getLong(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getDouble(col * numBytes));}outputRow--;}}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();} else if (layout.equals("bip") || fileExtension.equals("bip")) {int rowLength=cols * numBytes * nBands;buf=ByteBuffer.allocate(rowLength);if (byteOrder.toLowerCase().contains("little")) {buf.order(ByteOrder.LITTLE_ENDIAN);} else {buf.order(ByteOrder.BIG_ENDIAN);}rIn=new RandomAccessFile(fileName,"r");inChannel=rIn.getChannel();if (nBits == 8 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedByte(buf,col * numBytes * a);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 8 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.get(col * numBytes * a));}outputRow--;}} else if (nBits == 16 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedShort(buf,col * numBytes * a);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 16 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getShort(col * numBytes * a));}outputRow--;}} else if (nBits == 32 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedInt(buf,col * numBytes * a);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 32 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getInt(col * numBytes * a));}outputRow--;}} else if (nBits == 32 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getFloat(col * numBytes * a));}outputRow--;}} else if (nBits == 64 && pixelType.equals("unsignedint")) {showFeedback("We're sorry but this data type is not supported for import to Whitebox.");break;} else if (nBits == 64 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getLong(col * numBytes * a));}outputRow--;}} else if (nBits == 64 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getDouble(col * numBytes * a));}outputRow--;}}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();}if (a < 10) {returnData(whiteboxHeaderFile);}}}} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  @Override public void writeProperty(final OutputStream outputStream,final Property p) throws IOException {  throw Io.Exceptions.writerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  protected void checkRequiredCardinality(List<Warning> warnings,Class<? extends ICalProperty>... classes){  for (  Class<? extends ICalProperty> clazz : classes) {    List<? extends ICalProperty> props=getProperties(clazz);    if (props.isEmpty()) {      warnings.add(Warning.validate(2,clazz.getSimpleName()));      continue;    }    if (props.size() > 1) {      warnings.add(Warning.validate(3,clazz.getSimpleName()));      continue;    }  }}  }
class C{  public void selectOperators(List<Operator> ops){  for (  PartitionPattern partitionData : options.getPartitionPattern()) {    ops.add(getOperator(partitionData.getName() + "." + "microsatInternalNodesParameter"));  }}  }
class C{  public void replace(final Component current,final Component next,final Transition t){  replaceComponents(current,next,t,false,false,null,0,0,true);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("EMailPDF"))     p_EMailPDF="Y".equals(para[i].getParameter()); else     if (name.equals("R_MailText_ID"))     p_R_MailText_ID=para[i].getParameterAsInt(); else     if (name.equals("C_DunningRun_ID"))     p_C_DunningRun_ID=para[i].getParameterAsInt(); else     if (name.equals("IsOnlyIfBPBalance"))     p_IsOnlyIfBPBalance="Y".equals(para[i].getParameter()); else     if (name.equals("PrintUnprocessedOnly"))     p_PrintUnprocessedOnly="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public void addTopFooterStatement(String footerStatement){  footerStatements.add(0,footerStatement);}  }
class C{  public boolean isListSources(){  Object oo=get_Value(COLUMNNAME_ListSources);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DelphiFunction(){  name=UNKNOWN_FUNCTION_NAME + (unknownFunctionCounter++);  longName=name + "()";  realName=name;}  }
class C{  private void generateAnimatedVector(VectorDrawable vector,BufferedWriter animatedvectorBW,String nextVectorName,boolean reverseMode) throws IOException {  animatedvectorBW.write(xml_start);  animatedvectorBW.newLine();  animatedvectorBW.write(animatedvector_start);  animatedvectorBW.newLine();  if (reverseMode) {    animatedvectorBW.write(animatedvector_drawable.replace("#drawable",nextVectorName));  } else {    animatedvectorBW.write(animatedvector_drawable.replace("#drawable",vector.getFileName()));  }  animatedvectorBW.newLine();  animatedvectorBW.write(endtag);  animatedvectorBW.newLine();  String currentPathName;  Path currentPath;  for (  Map.Entry<String,Path> entry : vector.getPathToMorphSortByMorphingName().entrySet()) {    currentPathName=entry.getKey();    currentPath=vector.getPathToMorphSortByMorphingName().get(currentPathName);    if (currentPath.getNormalizedInitialPathData() != null) {      animatedvectorBW.write(target_start);      if (currentPath.getName() == null) {        MessagePrinter printer=new MessagePrinter();        printer.printExceptionNoPathNameDefined(currentPathName);        throw new IllegalArgumentException("No android:name defined");      }      animatedvectorBW.write(name.replace("#name",currentPath.getName()));      animatedvectorBW.newLine();      if (reverseMode) {        animatedvectorBW.write(animation.replace("#animation",animatorSet.replace("#fileName",currentVectorFileName + "_" + currentPathName+ reverse)));      } else {        animatedvectorBW.write(animation.replace("#animation",animatorSet.replace("#fileName",currentVectorFileName + "_" + currentPathName)));      }      animatedvectorBW.newLine();      animatedvectorBW.write(endtagbloc);      animatedvectorBW.newLine();    }  }  animatedvectorBW.write(animatedvector_end);  animatedvectorBW.newLine();}  }
class C{  public void testPosPosFirstLonger(){  String numA="2837462783428374767845648748973847593874837948575684767";  String numB="293478573489347658763745839457637";  String res="2837462783428374767845615168483972194300564226167553530";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public static Line2D[] shapeToLines(Shape path,boolean swapped){  Deque<Line2D> lines=new ArrayDeque<Line2D>();  PathIterator i=new FlatteningPathIterator(path.getPathIterator(null),0.5);  double[] coords=new double[6];  double[] coordsPrev=new double[6];  while (!i.isDone()) {    int segment=i.currentSegment(coords);    if (segment == PathIterator.SEG_LINETO || segment == PathIterator.SEG_CLOSE) {      Line2D line;      if (!swapped) {        line=new Line2D.Double(coordsPrev[0],coordsPrev[1],coords[0],coords[1]);        lines.addLast(line);      } else {        line=new Line2D.Double(coords[0],coords[1],coordsPrev[0],coordsPrev[1]);        lines.addFirst(line);      }    }    if (segment == PathIterator.SEG_CLOSE && !lines.isEmpty()) {      Point2D firstPoint=lines.getFirst().getP1();      Point2D lastPoint=lines.getLast().getP2();      if (!firstPoint.equals(lastPoint)) {        Line2D line;        if (!swapped) {          line=new Line2D.Double(coords[0],coords[1],firstPoint.getX(),firstPoint.getY());          lines.addLast(line);        } else {          line=new Line2D.Double(firstPoint.getX(),firstPoint.getY(),coords[0],coords[1]);          lines.addFirst(line);        }      }    }    System.arraycopy(coords,0,coordsPrev,0,6);    i.next();  }  Line2D[] linesArray=new Line2D[lines.size()];  lines.toArray(linesArray);  return linesArray;}  }
class C{  public static boolean isMarkup(int c){  return c == '<' || c == '&' || c == '%';}  }
class C{  @SuppressWarnings("null") public void loadTransits(Element sharedTransits,Element perNodeTransits){  List<Element> transitList=sharedTransits.getChildren("transit");  if (log.isDebugEnabled()) {    log.debug("Found " + transitList.size() + " transits");  }  TransitManager tm=InstanceManager.getDefault(jmri.TransitManager.class);  for (int i=0; i < transitList.size(); i++) {    if (transitList.get(i).getAttribute("systemName") == null) {      log.warn("unexpected null in systemName " + transitList.get(i) + " "+ transitList.get(i).getAttributes());      break;    }    String sysName=transitList.get(i).getAttribute("systemName").getValue();    String userName=null;    if (transitList.get(i).getAttribute("userName") != null) {      userName=transitList.get(i).getAttribute("userName").getValue();    }    Transit x=tm.createNewTransit(sysName,userName);    if (x != null) {      loadCommon(x,transitList.get(i));      List<Element> transitTransitSectionList=transitList.get(i).getChildren("transitsection");      for (int n=0; n < transitTransitSectionList.size(); n++) {        Element elem=transitTransitSectionList.get(n);        int seq=0;        int dir=Section.UNKNOWN;        boolean alt=false;        String sectionName=elem.getAttribute("sectionname").getValue();        if (sectionName.equals("null")) {          log.warn("When loading configuration - missing Section in Transit " + sysName);        }        try {          seq=elem.getAttribute("sequence").getIntValue();          dir=elem.getAttribute("direction").getIntValue();        } catch (        Exception e) {          log.error("Data Conversion Exception when loading direction of entry point - " + e);        }        if (elem.getAttribute("alternate").getValue().equals("yes")) {          alt=true;        }        TransitSection ts=new TransitSection(sectionName,seq,dir,alt);        x.addTransitSection(ts);        List<Element> transitTransitSectionActionList=transitTransitSectionList.get(n).getChildren("transitsectionaction");        for (int m=0; m < transitTransitSectionActionList.size(); m++) {          Element elemx=transitTransitSectionActionList.get(m);          int tWhen=1;          int tWhat=1;          int tWhenData=0;          String tWhenString=elemx.getAttribute("whenstring").getValue();          int tWhatData1=0;          int tWhatData2=0;          String tWhatString=elemx.getAttribute("whatstring").getValue();          try {            tWhen=elemx.getAttribute("whencode").getIntValue();            tWhat=elemx.getAttribute("whatcode").getIntValue();            tWhenData=elemx.getAttribute("whendata").getIntValue();            tWhatData1=elemx.getAttribute("whatdata1").getIntValue();            tWhatData2=elemx.getAttribute("whatdata2").getIntValue();          } catch (          Exception e) {            log.error("Data Conversion Exception when loading transit section action - " + e);          }          TransitSectionAction tsa=new TransitSectionAction(tWhen,tWhat,tWhenData,tWhatData1,tWhatData2,tWhenString,tWhatString);          ts.addAction(tsa);        }      }    }  }}  }
class C{  public String callsSample(){  return mCallsSample;}  }
class C{  public int kind(){  return ERROR;}  }
class C{  public SVGOMPathElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public void removeTunerConfiguration(TunerConfiguration config){  if (mTunerConfigurations.contains(config)) {    int index=mTunerConfigurations.indexOf(config);    mTunerConfigurations.remove(config);    fireTableRowsDeleted(index,index);    broadcast(new TunerConfigurationEvent(config,Event.REMOVE));  }}  }
class C{  public ClientCacheFactory addPoolServer(String host,int port){  getPoolFactory().addServer(host,port);  return this;}  }
class C{  public SendableStickerMessage.SendableStickerMessageBuilder replyMarkup(ReplyMarkup replyMarkup){  this.replyMarkup=replyMarkup;  return this;}  }
class C{  protected void drawBackground(Graphics2D g){  if (drawing == null) {    g.setColor(getBackground());    g.fillRect(0,0,getWidth(),getHeight());  } else   if (drawing.get(CANVAS_WIDTH) == null || drawing.get(CANVAS_HEIGHT) == null) {    Color canvasColor=drawing.get(CANVAS_FILL_COLOR);    double canvasOpacity=drawing.get(CANVAS_FILL_OPACITY);    if (canvasColor != null) {      if (canvasOpacity == 1) {        g.setColor(new Color(canvasColor.getRGB()));        g.fillRect(0,0,getWidth(),getHeight());      } else {        Point r=drawingToView(new Point2D.Double(0,0));        g.setPaint(getBackgroundPaint(r.x,r.y));        g.fillRect(0,0,getWidth(),getHeight());        g.setColor(new Color(canvasColor.getRGB() & 0xfffff | ((int)(canvasOpacity * 256) << 24),true));        g.fillRect(0,0,getWidth(),getHeight());      }    } else {      Point r=drawingToView(new Point2D.Double(0,0));      g.setPaint(getBackgroundPaint(r.x,r.y));      g.fillRect(0,0,getWidth(),getHeight());    }  } else {    g.setColor(getBackground());    g.fillRect(0,0,getWidth(),getHeight());    Rectangle r=drawingToView(new Rectangle2D.Double(0,0,drawing.get(CANVAS_WIDTH),drawing.get(CANVAS_HEIGHT)));    g.setPaint(getBackgroundPaint(r.x,r.y));    g.fillRect(r.x,r.y,r.width,r.height);  }}  }
class C{  public Text trim(){  int first=0;  int last=length() - 1;  while ((first <= last) && (charAt(first) <= ' ')) {    first++;  }  while ((last >= first) && (charAt(last) <= ' ')) {    last--;  }  return subtext(first,last + 1);}  }
class C{  private void dynInit(int AD_Table_ID,int Record_ID){  m_data.fillAcctSchema(selAcctSchema);  selAcctSchema.addActionListener(this);  actionAcctSchema();  m_data.fillTable(selTable);  selTable.addActionListener(this);  selRecord.setIcon(m_iFind);  selRecord.addActionListener(this);  selRecord.setText("");  m_data.fillPostingType(selPostingType);  m_data.fillOrg(selOrg);  selAcct.setActionCommand("Account_ID");  selAcct.addActionListener(this);  selAcct.setText("");  selAcct.setIcon(m_iFind);  boolean haveDoc=AD_Table_ID != 0 && Record_ID != 0;  selDocument.setSelected(haveDoc);  actionDocument();  actionTable();  statusLine.setText(" " + Msg.getMsg(Env.getCtx(),"ViewerOptions"));  if (haveDoc) {    m_data.AD_Table_ID=AD_Table_ID;    m_data.Record_ID=Record_ID;    actionQuery();    String keyColumn=selRecord.getActionCommand();    String tableName=keyColumn.substring(0,keyColumn.length() - 3);    String selectSQL=keyColumn + "=" + Record_ID;    m_data.buttonRecordID.put(keyColumn,Record_ID);    selRecord.setText(m_data.getButtonText(tableName,keyColumn,selectSQL));  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  void requestWhitespace(){  requestWhitespace(WHITESPACE);}  }
class C{  @SuppressWarnings("unchecked") void addAdapter(int position,UniversalAdapter adapter){  int count=getCount();  ListPiece piece=new ListPiece(adapter,this);  listPieces.add(position,piece);  piece.setStartPosition(count);  piece.initializeItemViewTypes();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:43.030 -0500",hash_original_method="C4FA78418D555E768FF5DBC8DE58360D",hash_generated_method="499C7262D02543E41FA0371D6EC9668C") private static boolean fieldTypeMatches(Field field,Class<?> cl){  Class<?> fieldClass=field.getType();  if (fieldClass == cl) {    return true;  }  Field primitiveTypeField;  try {    primitiveTypeField=cl.getField("TYPE");  } catch (  NoSuchFieldException ex) {    return false;  }  try {    return fieldClass == (Class<?>)primitiveTypeField.get(null);  } catch (  IllegalAccessException ex) {    return false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.735 -0400",hash_original_method="CB873E20A34C1FCC65A288AB5E09AA6B",hash_generated_method="FF0B2C31F69F9A24CDCA0203B6CCF967") @SuppressWarnings("unchecked") public CompositeFileComparator(Iterable<Comparator<File>> delegates){  if (delegates == null) {    this.delegates=(Comparator<File>[])NO_COMPARATORS;  } else {    List<Comparator<File>> list=new ArrayList<Comparator<File>>();    for (    Comparator<File> comparator : delegates) {      list.add(comparator);    }    this.delegates=(Comparator<File>[])list.toArray(new Comparator<?>[list.size()]);  }}  }
class C{  public void createSubUsageScenario05() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.daysToMillis(5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO05_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO05_PERUNIT_MONTH",serviceDetails,basicSetup.getCustomerUser1(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO05_PERUNIT_MONTH",subDetails);}  }
class C{  public MatrixReader(Reader reader){  this(reader,-1);}  }
class C{  public boolean equals(GVector vector1){  try {    if (length != vector1.length) {      return false;    }    for (int i=0; i < length; i++) {      if (values[i] != vector1.values[i]) {        return false;      }    }    return true;  } catch (  NullPointerException e) {    return false;  }}  }
class C{  public T caseSplitter(Splitter object){  return null;}  }
class C{  public static String toStringExclude(Object object,String[] excludeFieldNames){  return new ReflectionToStringBuilder(object).setExcludeFieldNames(excludeFieldNames).toString();}  }
class C{  public void showInfo(PrintStream out){  out.println("Geotiff file= " + filename);  for (int i=0; i < tags.size(); i++) {    IFDEntry ifd=tags.get(i);    out.println(i + " IFDEntry == " + ifd);  }}  }
class C{  private Double toDouble(String numStr){  try {    return new Double(numStr);  } catch (  Exception e) {    return null;  }}  }
class C{  public AutomatonTermsEnum(TermsEnum tenum,CompiledAutomaton compiled){  super(tenum);  this.finite=compiled.finite;  this.runAutomaton=compiled.runAutomaton;  assert this.runAutomaton != null;  this.commonSuffixRef=compiled.commonSuffixRef;  this.automaton=compiled.automaton;  visited=new long[runAutomaton.getSize()];}  }
class C{  protected void defaultSort(Comparator<? super T> comparator){  Collections.sort(this,comparator);}  }
class C{  public static String maciejgFormatToUnicode(String inputString){  StringBuilder builder=new StringBuilder(inputString);  int unicodePrefix=0;  while ((unicodePrefix=builder.indexOf("&#x",unicodePrefix)) != -1) {    int endIndex=builder.indexOf(";",unicodePrefix);    if (endIndex == -1) {      break;    }    String maciejgWord=builder.substring(unicodePrefix + 3,endIndex);    maciejgWord=StringUtils.replaceChars(maciejgWord," \\\n","").toUpperCase();    if (maciejgWord.length() <= 5) {      try {        int intValue=Integer.parseInt(maciejgWord,16);        String unicode=new String(new char[]{(char)intValue});        builder.replace(unicodePrefix,endIndex + 1,unicode);      } catch (      NumberFormatException nfe) {        unicodePrefix=endIndex + 1;      }    } else {      unicodePrefix=endIndex + 1;    }  }  return builder.toString();}  }
class C{  public LRUEvictionControllerDUnitTest(){  super();}  }
class C{  public void ensureVisible(String c){  TestUtils.ensureVisible(c);}  }
class C{  protected ControlPointMarker makeControlPoint(Position position,MarkerAttributes attributes,int id,String purpose){  return new ControlPointMarker(position,attributes,id,purpose);}  }
class C{  @StateMachineAction public String shutdownVM(String instanceId,ProvisioningSettings settings,@SuppressWarnings("unused") InstanceStatus result){  VMPropertyHandler ph=new VMPropertyHandler(settings);  String vcenter=ph.getServiceSetting(VMPropertyHandler.TS_TARGET_VCENTER_SERVER);  VMwareClient vmClient=null;  try {    vmClient=VMClientPool.getInstance().getPool().borrowObject(vcenter);    VM vm=new VM(vmClient,ph.getInstanceName());    vm.stop(false);    return EVENT_STOPPED;  } catch (  Exception e) {    logger.error("Failed to shutdown VM of instance " + instanceId,e);    String message=Messages.get(ph.getLocale(),"error_shutdown_vm",new Object[]{instanceId});    ph.setSetting(VMPropertyHandler.SM_ERROR_MESSAGE,message);    return EVENT_FAILED;  } finally {    if (vmClient != null) {      try {        VMClientPool.getInstance().getPool().returnObject(vcenter,vmClient);      } catch (      Exception e) {        logger.error("Failed to return VMware client into pool",e);      }    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.748 -0500",hash_original_method="99B682048D7DD6F5E24E9EE3CDE8B326",hash_generated_method="FC25CC9E9401E5DB446A7AA86CBFDC89") private static void checkWidthHeight(int width,int height){  if (width <= 0) {    throw new IllegalArgumentException("width must be > 0");  }  if (height <= 0) {    throw new IllegalArgumentException("height must be > 0");  }}  }
class C{  private void sendSelfPatch(State s){  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(s);  sendRequest(patch);}  }
class C{  protected Integer[] extractDelta(IAnalyzedMessageSummary ms){  final String rawDelta=ms.getStatistics().getStringStat(LastSeenLoggingScorerContinuous.class.getSimpleName() + "." + "res");  if (rawDelta.equals("[]")) {    return null;  }  final List<String> stringDelta=Arrays.asList(StringUtils.split(StringUtils.substringBetween(rawDelta,"[","]"),", "));  final Integer[] delta=new Integer[stringDelta.size()];  for (int i=0; i < stringDelta.size(); ++i) {    delta[i]=Integer.decode(stringDelta.get(i));  }  return delta;}  }
class C{  public void removeAttribute(String name){  myAttributes.remove(name);}  }
class C{  private Bitmap fallbackDecode(Object encodedImage,Rect area,BitmapFactory.Options opts){  int rectFactor=1;  if (opts != null) {    rectFactor=opts.inSampleSize >= 1 ? opts.inSampleSize : 1;  }  return Bitmap.createBitmap(decodeObjectToBitmap(encodedImage,opts),area.left / rectFactor,area.top / rectFactor,area.right / rectFactor - area.left / rectFactor,area.bottom / rectFactor - area.top / rectFactor);}  }
class C{  public boolean isFinal(){  return this.isDeclaredFinal();}  }
class C{  public void populateActivePointerIds(int[] outPointerIds){  int index=0;  for (int idBits=mActivePointers; idBits != 0; ) {    final int id=Integer.numberOfTrailingZeros(idBits);    idBits&=~(1 << id);    outPointerIds[index]=id;    index++;  }}  }
class C{  public void timesEquals(double[] x){  if (x.length != w.length)   throw new IllegalArgumentException("Argument length does not match window length");  for (int i=0; i < w.length; i++)   w[i]*=x[i];}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPCs(zone);}  }
class C{  protected int addColumn(final String name,final Class<?> class_,final boolean defaultDescSorting){  if (defaultDescSorting)   defaultDescSortingColList.add(columns.size());  columns.add(name);  columnClasses.add(class_);  return columns.size() - 1;}  }
class C{  public void clear(){  modCount++;  size=0;  root=null;}  }
class C{  public boolean isDoubleBuffered(){  return getFlag(IS_DOUBLE_BUFFERED);}  }
class C{  public void registerInput(String varName,JavaRDD<String> rdd,String format,boolean hasHeader,String delim,boolean fill,double fillValue) throws DMLRuntimeException {  registerInput(varName,rdd,format,hasHeader,delim,fill,fillValue,-1,-1,-1);}  }
class C{  private List<String> fetchBlockCosIdList() throws SOSFailure {  final String methodName="fetchBlockCosIdList(): ";  log.trace(methodName + "Entry");  final String BLOCK_COS_URI="/block/vpools";  List<String> blockCosIdList=new ArrayList<String>();  try {    CoSList cosElemList=_client.queryObject(BLOCK_COS_URI,CoSList.class);    if (cosElemList != null && cosElemList.getCosElements() != null) {      for (      CoSElement elem : cosElemList.getCosElements()) {        if (elem != null) {          blockCosIdList.add(elem.getId());        }      }    }    log.trace(methodName + "Block CoS Ids: " + blockCosIdList);    if (cosElemList != null && blockCosIdList != null) {      log.trace(methodName + "Exit returning cos list of size[" + blockCosIdList.size()+ "]");      return blockCosIdList;    }    log.trace(methodName + "Exit returning cos list of size[0]");    return new ArrayList<String>();  } catch (  NoSuchAlgorithmException e) {    log.error(methodName + "NoSuchAlgorithmException occured",e);    throw new SOSFailure(e);  }catch (  UniformInterfaceException e) {    log.error(methodName + "UniformInterfaceException occured",e);    throw new SOSFailure(e);  }}  }
class C{  static void remez(DesignGrid G){  int nextrema=G.extremaIndices.length;  ArrayList<Integer> newExtrema=new ArrayList<Integer>();  double[] E=new double[G.gridSize];  double[] GA=new double[G.gridSize];  int niter=0;  do {    double delta=computeDelta(G);    System.out.println("delta: " + delta);    LagrangePolynomial LP=constructInterpolatingPolynomial(G,delta);    for (int i=0; i < G.gridSize; i++) {      GA[i]=LP.evaluate(G.X[i]);      E[i]=GA[i] - G.H[i];    }    newExtrema.clear();    int change=0;    for (int currentExtremum=0; currentExtremum < nextrema; currentExtremum++) {      int currentGridPt=G.extremaIndices[currentExtremum];      int s=sgn(E[currentGridPt]);      int ptr=currentGridPt + 1;      if (ptr < G.gridSize) {        while (sgn(E[ptr] - E[ptr - 1]) == s) {          ptr++;          if (ptr == G.gridSize)           break;        }      }      ptr--;      if (ptr == currentGridPt) {        ptr=currentGridPt - 1;        if (ptr >= 0) {          while (sgn(E[ptr] - E[ptr + 1]) == s) {            ptr--;            if (ptr < 0)             break;          }        }        ptr++;      }      newExtrema.add(ptr);      if (ptr != currentGridPt)       change++;    }    if (G.containsZero && G.containsPi) {      int gridPi=G.gridSize - 1;      if (newExtrema.contains(0)) {        if (!newExtrema.contains(gridPi)) {          if (sgn(E[gridPi]) != sgn(E[G.extremaIndices[nextrema - 1]])) {            if (Math.abs(E[gridPi]) > Math.abs(E[0])) {              newExtrema.remove(0);              newExtrema.add(gridPi);              change++;            }          }        }      } else {        if (newExtrema.contains(gridPi)) {          if (sgn(E[0]) != sgn(E[G.extremaIndices[0]])) {            if (Math.abs(E[0]) > Math.abs(E[gridPi])) {              newExtrema.remove(newExtrema.size() - 1);              newExtrema.add(0,0);              change++;            }          }        }      }    }    if (change == 0)     break;    for (int i=0; i < nextrema; i++) {      G.extremaIndices[i]=newExtrema.get(i);    }    niter++;  } while (niter < MAXITER);}  }
class C{  public Iterator<Obligation> obligationIterator(){  return classNameToObligationMap.values().iterator();}  }
class C{  public Bag removeObjectsAtLocation(final int x,final int y){  return removeObjectsAtLocation(new Int2D(x,y));}  }
class C{  public void fatal(Object message){}  }
class C{  private static List<ParameterAccess> createItemParameters(Class<?> itemType,ParameterAccess parameters){  List<Map<String,Object>> rows=new ArrayList<>();  for (  String name : getParameterNames(itemType)) {    Object value=parameters.get(name);    List<String> values=TextUtils.parseCSV(value != null ? value.toString() : null);    for (int i=0; i < values.size(); i++) {      getOrCreateRow(rows,i).put(name,values.get(i));    }  }  List<ParameterAccess> results=new ArrayList<>();  for (  Map<String,Object> row : rows) {    results.add(new MapParameterAccess(row));  }  return results;}  }
class C{  public void register(PuzzleBuildingBlock block){  if (block.getName().contains(SEP)) {    throw new RuntimeException("Entity \"" + block.getName() + "\" in zone "+ block.getZoneName()+ " must not contain "+ SEP+ ".");  }  String prefix=block.getZoneName() + SEP;  String qualifiedName=prefix + block.getName();  buildingBlocks.put(qualifiedName,block);  for (  String dependency : block.getDependencies()) {    if (!dependency.contains(SEP)) {      dependency=prefix + dependency;    }    notifies.put(dependency,qualifiedName);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("CacheMgt[");  sb.append("Instances=").append(m_instances.size()).append("]");  return sb.toString();}  }
class C{  public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] array=queue;    int n=size;    size=0;    for (int i=0; i < n; i++)     array[i]=null;  }  finally {    lock.unlock();  }}  }
class C{  public RegionRestriction(String restriction){  if (restriction.length() == 0) {    throw malformedRange(restriction);  }  final int rangepos=restriction.lastIndexOf(':');  if (rangepos != -1) {    mSequence=restriction.substring(0,rangepos);    final String range=restriction.substring(rangepos + 1);    final NumberFormat fmt=NumberFormat.getInstance(Locale.getDefault());    fmt.setParseIntegerOnly(true);    final boolean useLength=range.contains("+");    final String[] parts;    if (useLength) {      if (range.contains("-")) {        throw malformedRange(restriction);      }      parts=range.split("\\+");    } else {      parts=range.split("-");    }    if (parts.length != 2 && parts.length != 1) {      throw malformedRange(restriction);    }    final ParsePosition pos=new ParsePosition(0);    final Number start=fmt.parse(parts[0],pos);    if (parts[0].length() != pos.getIndex() || pos.getIndex() == 0) {      throw malformedRange(restriction);    }    mStart=start.intValue() - 1;    if (parts.length == 1) {      mEnd=MISSING;    } else {      pos.setIndex(0);      final Number last=fmt.parse(parts[1],pos);      if (parts[1].length() != pos.getIndex() || pos.getIndex() == 0) {        throw malformedRange(restriction);      }      mEnd=(useLength ? mStart : 0) + last.intValue();    }    if ((mStart < 0) || (mEnd != MISSING && mEnd < (mStart + 1))) {      throw malformedRange(restriction);    }  } else {    mSequence=restriction;    mStart=MISSING;    mEnd=MISSING;  }}  }
class C{  synchronized MVMap<Object,Integer> createTempMap(){  String mapName="temp." + nextTempMapId++;  return openTempMap(mapName);}  }
class C{  public static SamReader makeSamReader(InputStream stream,SAMFileHeader headerOverride) throws IOException {  try {    return getSamReaderFactory().open(SamInputResource.of(stream).header(headerOverride));  } catch (  final RuntimeIOException e) {    throw (IOException)e.getCause();  }}  }
class C{  protected ReplacedElement lookupImageReplacedElement(Element e,String uri){  return lookupImageReplacedElement(e,uri,-1,-1);}  }
class C{  public SpanNotQuery(SpanQuery include,SpanQuery exclude,int pre,int post){  this.include=Objects.requireNonNull(include);  this.exclude=Objects.requireNonNull(exclude);  this.pre=(pre >= 0) ? pre : 0;  this.post=(post >= 0) ? post : 0;  if (include.getField() != null && exclude.getField() != null && !include.getField().equals(exclude.getField()))   throw new IllegalArgumentException("Clauses must have same field.");}  }
class C{  protected void createChildrenEagerly(SourcePrinter out,WidgetCreatorContext context){  String panelInfoVar=createVariableName("panelInfo");  out.println(HTMLPanelInfo.class.getCanonicalName() + " " + panelInfoVar+ " = "+ HTMLPanelHelper.class.getCanonicalName()+ ".attachToDom("+ context.getWidget()+ ");");  createChildrenWidgets(out,context);  out.println(HTMLPanelHelper.class.getCanonicalName() + ".restorePanelParent(" + context.getWidget()+ ", "+ panelInfoVar+ ");");}  }
class C{  private void drawFirstAnimation(Canvas canvas){  if (radius1 < getWidth() / 2) {    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    radius1=(radius1 >= getWidth() / 2) ? (float)getWidth() / 2 : radius1 + 1;    canvas.drawCircle(getWidth() / 2,getHeight() / 2,radius1,paint);  } else {    Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);    Canvas temp=new Canvas(bitmap);    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    temp.drawCircle(getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);    Paint transparentPaint=new Paint();    transparentPaint.setAntiAlias(true);    transparentPaint.setColor(getResources().getColor(android.R.color.transparent));    transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));    if (cont >= 50) {      radius2=(radius2 >= getWidth() / 2) ? (float)getWidth() / 2 : radius2 + 1;    } else {      radius2=(radius2 >= getWidth() / 2 - dpToPx(4,getResources())) ? (float)getWidth() / 2 - dpToPx(4,getResources()) : radius2 + 1;    }    temp.drawCircle(getWidth() / 2,getHeight() / 2,radius2,transparentPaint);    canvas.drawBitmap(bitmap,0,0,new Paint());    if (radius2 >= getWidth() / 2 - dpToPx(4,getResources()))     cont++;    if (radius2 >= getWidth() / 2)     firstAnimationOver=true;  }}  }
class C{  public static NumericSummaryTable create(String tableName){  return new NumericSummaryTable(tableName);}  }
class C{  public String toString(){  return this.msg;}  }
class C{  public boolean hasField(final int number){  return fields.containsKey(number);}  }
class C{  public boolean hasTag(String aName){  return (searchForTag(aName) != -1);}  }
class C{  private void strategyNominateHighestPrio(PropertyChangeEvent ev){  String pname=ev.getPropertyName();  if (IceMediaStream.PROPERTY_PAIR_VALIDATED.equals(pname) || (IceMediaStream.PROPERTY_PAIR_STATE_CHANGED.equals(pname) && (ev.getNewValue() == CandidatePairState.FAILED))) {    CandidatePair validPair=(CandidatePair)ev.getSource();    Component parentComponent=validPair.getParentComponent();    IceMediaStream parentStream=parentComponent.getParentStream();    CheckList parentCheckList=parentStream.getCheckList();    if (!parentCheckList.allChecksCompleted())     return;    for (    Component component : parentStream.getComponents()) {      CandidatePair pair=parentStream.getValidPair(component);      if (pair != null) {        logger.info("Nominate (highest priority): " + validPair.toShortString());        parentAgent.nominate(pair);      }    }  }}  }
class C{  @Override public void processView(ViewEngineContext context) throws ViewEngineException {  try {    forwardRequest(context,"*.xhtml");  } catch (  ServletException|IOException e) {    throw new ViewEngineException(e);  }}  }
class C{  private void performNotificationImp(boolean performUpdate){  List<PendingNotification> destNotifications=getNotifications();  if (destNotifications.size() == 0) {    hideNotification();    return;  }  List<Notification> res=new ArrayList<>();  for (  PendingNotification p : destNotifications) {    boolean isChannel=false;    if (p.getPeer().getPeerType() == PeerType.GROUP) {      isChannel=groups().getValue(p.getPeer().getPeerId()).getGroupType() == GroupType.CHANNEL;    }    res.add(new Notification(p.getPeer(),isChannel,p.getSender(),p.getContent()));  }  if (performUpdate) {    config().getNotificationProvider().onUpdateNotification(context().getMessenger(),res,pendingStorage.getMessagesCount(),pendingStorage.getDialogsCount());  } else {    config().getNotificationProvider().onNotification(context().getMessenger(),res,pendingStorage.getMessagesCount(),pendingStorage.getDialogsCount());  }}  }
class C{  private static X509Certificate generateCertificate(String dn,int days,String applicationUri,KeyPair keys,org.opcfoundation.ua.transport.security.KeyPair issuerKeys,String... hostNames) throws GeneralSecurityException, IOException {  PrivateKey privkey=keys.getPrivate();  PublicKey publicKey=keys.getPublic();  return generateCertificate(dn,days,applicationUri,publicKey,privkey,issuerKeys,hostNames);}  }
class C{  protected final int F2(int D,int Kmi,int Kri){  int I=Kmi ^ D;  I=I << Kri | I >>> (32 - Kri);  return ((S1[(I >>> 24) & 0xff] - S2[(I >>> 16) & 0xff]) + S3[(I >>> 8) & 0xff]) ^ S4[I & 0xff];}  }
class C{  public static short[] toShortArray(Long[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].shortValue();  }  return result;}  }
class C{  public AddNodesRequest clone(){  AddNodesRequest result=new AddNodesRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  if (NodesToAdd != null) {    result.NodesToAdd=new AddNodesItem[NodesToAdd.length];    for (int i=0; i < NodesToAdd.length; i++)     result.NodesToAdd[i]=NodesToAdd[i].clone();  }  return result;}  }
class C{  @SuppressWarnings("unchecked") public synchronized V put(Class key,V value){  final int id;  int index;  Entry<V>[] tab;  Entry<V> e=(tab=table)[index=(id=key.hashCode()) & (tab.length - 1)];  while (e != null) {    if (key == e.key) {      V existing=e.value;      e.value=value;      return existing;    }    e=e.next;  }  if (size >= threshold) {    resize();    tab=table;    index=id & (tab.length - 1);  }  tab[index]=new Entry(id,key,value,tab[index]);  size++;  return null;}  }
class C{  public CoNLLNerReader(String conlldirectory){  super(CorpusReaderConfigurator.buildResourceManager("NER_CONLL",conlldirectory));  this.taCounter=0;}  }
class C{  public AsyncHttpClient(int httpPort){  this(false,httpPort,443);}  }
class C{  public boolean close(){  CGraphCloser.close(m_tabbedPane);  return m_tabbedPane.getTabCount() == 0;}  }
class C{  @Override protected void parseURL(URL url,String spec,int start,int end){  if (end < start) {    return;  }  String parseString="";  if (start < end) {    parseString=spec.substring(start,end).replace('\\','/');  }  super.parseURL(url,parseString,0,parseString.length());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.816 -0500",hash_original_method="6D8F15A80747973FB96EA7F310404F85",hash_generated_method="49AF324792395883FF96E46A0C77B49B") public final boolean hasDataScheme(String scheme){  return mDataSchemes != null && mDataSchemes.contains(scheme);}  }
class C{  public static Rect addMiterLimitStrokeToBounds(ShapeRecord segment1,ShapeRecord segment2,double miterLimit,double halfWeight,Rect pathBBox,int xPrev,int yPrev,int x,int y){  Point jointPoint=new Point(x,y);  if (isInnerJoint(jointPoint,pathBBox,miterLimit,halfWeight)) {    return pathBBox;  }  Point t0=getTangent(segment1,false,xPrev,yPrev);  Point t1=getTangent(segment2,true,x,y);  if (getPointLength(t0) == 0 || getPointLength(t1) == 0) {    return pathBBox;  }  t0=normalize(t0,1);  t0.x=-t0.x;  t0.y=-t0.y;  t1=normalize(t1,1);  Point halfT0T1=new Point((t1.x - t0.x) * 0.5,(t1.y - t0.y) * 0.5);  double sinHalfAlpha=getPointLength(halfT0T1);  if (Math.abs(sinHalfAlpha) < 1.0E-9) {    return pathBBox;  }  Point bisect=new Point(-0.5 * (t0.x + t1.x),-0.5 * (t0.y + t1.y));  double bisectLength=getPointLength(bisect);  if (bisectLength == 0) {    return pathBBox;  }  Rect newRect=pathBBox;  if (sinHalfAlpha == 0 || miterLimit < 1 / sinHalfAlpha) {    bisect=normalize(bisect,1);    halfT0T1=normalize(halfT0T1,(halfWeight - miterLimit * halfWeight * sinHalfAlpha) / bisectLength);    Point pt0=new Point(jointPoint.x + miterLimit * halfWeight * bisect.x + halfT0T1.x,jointPoint.y + miterLimit * halfWeight * bisect.y + halfT0T1.y);    Point pt1=new Point(jointPoint.x + miterLimit * halfWeight * bisect.x - halfT0T1.x,jointPoint.y + miterLimit * halfWeight * bisect.y - halfT0T1.y);    newRect=rectUnion((int)StrictMath.rint(pt0.x),(int)StrictMath.rint(pt0.y),(int)StrictMath.rint(pt0.x),(int)StrictMath.rint(pt0.y),newRect);    newRect=rectUnion((int)StrictMath.rint(pt1.x),(int)StrictMath.rint(pt1.y),(int)StrictMath.rint(pt1.x),(int)StrictMath.rint(pt1.y),newRect);  } else {    bisect=normalize(bisect,1);    Point strokeTip=new Point(jointPoint.x + bisect.x * halfWeight / sinHalfAlpha,jointPoint.y + bisect.y * halfWeight / sinHalfAlpha);    newRect=rectUnion((int)StrictMath.rint(strokeTip.x),(int)StrictMath.rint(strokeTip.y),(int)StrictMath.rint(strokeTip.x),(int)StrictMath.rint(strokeTip.y),newRect);  }  return newRect;}  }
class C{  public static void splash(URL imageURL){  if (imageURL != null) {    splash(Toolkit.getDefaultToolkit().createImage(imageURL));  }}  }
class C{  public static Object fileReadBegin(String path){  return IoTraceHandler.fileReadBegin(path);}  }
class C{  public void resetExpects(){  expectMajor=-1;  expectMinor=-1;  expectCode=-1;  expectLocation=null;  expectPermanent=-1;  expectErrorId=-1;  expectSslErrors=-1;  expectCertificate=null;  expectDetails.setLength(0);  expectHeaders.clear();  for (int i=0; i < TEST_NUM_EXPECTS; i++) {    expects[i]=false;    notExpecting[i]=false;    eventsReceived[i]=false;  }  for (int i=0; i < expectDataLength; i++) {    expectData[i]=0;  }  expectDataLength=-1;}  }
class C{  public PassPhraseGeneratorImpl(final int passwordLenght){  this.passwordLenght=passwordLenght;}  }
class C{  public static MarketplaceAccessTypeUneligibleForOperationException convertToApi(org.oscm.internal.types.exception.MarketplaceAccessTypeUneligibleForOperationException oldEx){  return convertExceptionToApi(oldEx,MarketplaceAccessTypeUneligibleForOperationException.class);}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory[] histories=kseFrame.getKeyStoreHistories();    for (int i=0; i < histories.length; i++) {      KeyStoreHistory history=histories[i];      KeyStoreState currentState=history.getCurrentState();      if (!currentState.isSavedState()) {        if (!saveKeyStore(history)) {          break;        }      }    }  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  private void paintSelectionError(){  parentDirectory.setBackground(Color.RED);  parentDirectoryLabel.setForeground(Color.RED);}  }
class C{  @Override public boolean canInsertItem(int aIndex,ItemStack aStack,int aSide){  return canAccessData() && getCoverBehaviorAtSide((byte)aSide).letsItemsIn((byte)aSide,getCoverIDAtSide((byte)aSide),getCoverDataAtSide((byte)aSide),aIndex,this) && mMetaTileEntity.canInsertItem(aIndex,aStack,aSide);}  }
class C{  protected XBLOMTemplateElement(){}  }
class C{  public ActivityChooserView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  private TilesetAnimationMap acquire(final String name){  TilesetAnimationMap map=tilesets.get(name);  if (map == null) {    map=new TilesetAnimationMap();    tilesets.put(name,map);  }  return map;}  }
class C{  void verifyTechnicalServiceIsUpToDate(VOTechnicalService technicalService,final TechnicalProduct technicalProduct,boolean ignoreNonConfigurableParameters) throws ConcurrentModificationException {  BaseAssembler.verifyVersionAndKey(technicalProduct,technicalService);  List<Event> events=technicalProduct.getEvents();  List<VOEventDefinition> eventDefinitions=technicalService.getEventDefinitions();  verifyListConsistency(eventDefinitions,events);  List<ParameterDefinition> parameterDefinitions=new ArrayList<ParameterDefinition>(technicalProduct.getParameterDefinitions());  Iterator<ParameterDefinition> iterator=parameterDefinitions.iterator();  while (iterator.hasNext()) {    ParameterDefinition currentParamDef=iterator.next();    if (!currentParamDef.isConfigurable() && ignoreNonConfigurableParameters) {      iterator.remove();    }  }  List<VOParameterDefinition> voParamDefs=technicalService.getParameterDefinitions();  verifyListConsistency(voParamDefs,parameterDefinitions);  List<RoleDefinition> roleDefinitions=technicalProduct.getRoleDefinitions();  List<VORoleDefinition> voRoleDefinitions=technicalService.getRoleDefinitions();  verifyListConsistency(voRoleDefinitions,roleDefinitions);  List<TechnicalProductOperation> technicalProductOperations=technicalProduct.getTechnicalProductOperations();  List<VOTechnicalServiceOperation> technicalServiceOperations=technicalService.getTechnicalServiceOperations();  verifyListConsistency(technicalServiceOperations,technicalProductOperations);}  }
class C{  private void compactCompressedData(){  if (getTileIndex() > 0) {    getPreviousTileOperation().waitForResult();    ByteBuffer compressedWholeArea=getCompressedWholeArea();    this.compressedOffset=compressedWholeArea.position();    PrimitiveTypes.BYTE.appendBuffer(compressedWholeArea,this.compressedData);    replaceCompressedBufferWithTargetArea(compressedWholeArea);  } else {    this.compressedOffset=0;    getCompressedWholeArea().position(this.compressedData.limit());  }}  }
class C{  public int size(){  int c=0;  for (  Map<Integer,TreeSet<String>> m : directory.values()) {    for (    TreeSet<String> n : m.values()) {      c+=n.size();    }  }  return c;}  }
class C{  protected Map<Character,Integer> match_alphabet(String pattern){  Map<Character,Integer> s=new HashMap<Character,Integer>();  char[] char_pattern=pattern.toCharArray();  for (  char c : char_pattern) {    s.put(c,0);  }  int i=0;  for (  char c : char_pattern) {    s.put(c,s.get(c) | (1 << (pattern.length() - i - 1)));    i++;  }  return s;}  }
class C{  public static Supply add(final int divisibility,final Supply s1,final Supply s2){  final Supply sum=MosaicUtils.tryAdd(divisibility,s1,s2);  if (null == sum) {    final String message=String.format("cannot add %s to %s for mosaic with divisibility %d",s1,s2,divisibility);    throw new IllegalArgumentException(message);  }  return sum;}  }
class C{  public void process(Bitmap bitmap){}  }
class C{  @Inline public final void processRootEdge(Address slot,boolean untraced){  ObjectReference object;  if (untraced)   object=slot.loadObjectReference(); else   object=VM.activePlan.global().loadObjectReference(slot);  ObjectReference newObject=traceObject(object,true);  if (overwriteReferenceDuringTrace()) {    if (untraced)     slot.store(newObject); else     VM.activePlan.global().storeObjectReference(slot,newObject);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:51.298 -0500",hash_original_method="2D9B8BA6B8763CB3A447E57286A5B8E0",hash_generated_method="3D635612048F22BB2D25888CFD2E4ED7") protected ASN1TypeCollection(int tagNumber,ASN1Type[] type){  super(tagNumber);  this.type=type;  this.OPTIONAL=new boolean[type.length];  this.DEFAULT=new Object[type.length];}  }
class C{  public void test_DivideBigDecimalRoundingModeUP(){  String a="-37361671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.UP;  String c="-1";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  BigDecimal result=aNumber.divide(bNumber,rm);  assertEquals("incorrect value",c,result.toString());}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.342 -0500",hash_original_method="3612221F73372432993CCD6954A20D1D",hash_generated_method="7915D278B71B4651DCC24C6686319D9A") public boolean hasCategory(String category){  return mCategories != null && mCategories.contains(category);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xEC19337D,version=150) public int sceNetAdhocMatchingAbortSendData(@CheckArgument("checkMatchingId") int matchingId,pspNetMacAddress macAddress){  return 0;}  }
class C{  public boolean isSetRegisterResponse(){  return this.registerResponse != null;}  }
class C{  public boolean isGregorian(){  return is(GREGORIAN);}  }
class C{  public boolean isConnected(){  return status == ConnectionStatus.CONNECTED;}  }
class C{  public TwilightElixir(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public void increment(){  value++;}  }
class C{  public boolean isNoDevuelto(){  return (isEntregado() || isDevueltoIncompleto());}  }
class C{  private void checkAndSetAsLeader(Address leaderAddress){  Address selfAddress=((RemoteActorRefProvider)getContext().system().provider()).transport().defaultAddress();  if (leaderAddress.equals(selfAddress)) {    if (!this.isLeader.get()) {      this.isLeader.set(true);      logger.info("Promoting Actor at address : {} as the leader for cluster-wide redriver Scheduler",leaderAddress);      messageScheduler.start();    }  } else {    this.isLeader.set(false);    logger.info("Demoting Actor at address : {} as the leader for cluster-wide redriver Scheduler",leaderAddress);    messageScheduler.stop();  }}  }
class C{  public void run(G graph){  List<TaggedVertex> recruits=init(graph);  while (!recruits.isEmpty()) {    logger.info(String.format("Sampling iteration %1$s.",iteration));    List<TaggedVertex> newRecruits=new LinkedList<TaggedVertex>();    Collections.shuffle(recruits,random);    for (    TaggedVertex vertex : recruits) {      if (!listener.beforeSampling(this,vertex.getProjection()))       return;      if (vertex.isResponsive()) {        expand(vertex,newRecruits);      }      if (!listener.afterSampling(this,vertex.getProjection()))       return;    }    recruits=newRecruits;    iteration++;  }  listener.endSampling(this);  logger.info("Done.");}  }
class C{  public void readArgs(int numArgs,DataInput dis) throws IOException {  String[] argStrings=new String[numArgs];  for (int i=0; i < numArgs; i+=2) {    int argLength=dis.readInt();    if (i == 0 && argLength == 1 && dis.readChar() == LPC_PROPERY_MANAGEMENT_POLICY_CHAR) {      argLength=dis.readInt();      if (argLength == 1 && dis.readChar() == LPC_CLEAR_PROPERTIES_CHAR) {        clear();      }      continue;    }    argStrings[i]=LinkUtil.readString(dis,argLength);    argLength=dis.readInt();    argStrings[i + 1]=LinkUtil.readString(dis,argLength);    put(argStrings[i],argStrings[i + 1]);  }  if (Debug.debugging("linkdetail")) {    System.out.println("LinkProperties | Read:  " + this);  }}  }
class C{  public int next(){  packetSemaphore.acquireUninterruptibly();  final int packet=packetIds++;  packetSemaphore.release();  return packet;}  }
class C{  private void writeStubMethod(IndentingWriter p,int opnum) throws IOException {  RemoteClass.Method method=remoteMethods[opnum];  Identifier methodName=method.getName();  Type methodType=method.getType();  Type paramTypes[]=methodType.getArgumentTypes();  String paramNames[]=nameParameters(paramTypes);  Type returnType=methodType.getReturnType();  ClassDeclaration[] exceptions=method.getExceptions();  p.pln("// implementation of " + methodType.typeString(methodName.toString(),true,false));  p.p("public " + returnType + " "+ methodName+ "(");  for (int i=0; i < paramTypes.length; i++) {    if (i > 0)     p.p(", ");    p.p(paramTypes[i] + " " + paramNames[i]);  }  p.plnI(")");  if (exceptions.length > 0) {    p.p("throws ");    for (int i=0; i < exceptions.length; i++) {      if (i > 0)       p.p(", ");      p.p(exceptions[i].getName().toString());    }    p.pln();  }  p.pOlnI("{");  Vector<ClassDefinition> catchList=computeUniqueCatchList(exceptions);  if (catchList.size() > 0) {    p.plnI("try {");  }  if (version == STUB_VERSION_FAT) {    p.plnI("if (useNewInvoke) {");  }  if (version == STUB_VERSION_FAT || version == STUB_VERSION_1_2) {    if (!returnType.isType(TC_VOID)) {      p.p("Object $result = ");    }    p.p("ref.invoke(this, " + methodFieldNames[opnum] + ", ");    if (paramTypes.length > 0) {      p.p("new java.lang.Object[] {");      for (int i=0; i < paramTypes.length; i++) {        if (i > 0)         p.p(", ");        p.p(wrapArgumentCode(paramTypes[i],paramNames[i]));      }      p.p("}");    } else {      p.p("null");    }    p.pln(", " + method.getMethodHash() + "L);");    if (!returnType.isType(TC_VOID)) {      p.pln("return " + unwrapArgumentCode(returnType,"$result") + ";");    }  }  if (version == STUB_VERSION_FAT) {    p.pOlnI("} else {");  }  if (version == STUB_VERSION_1_1 || version == STUB_VERSION_FAT) {    p.pln(idRemoteCall + " call = ref.newCall((" + idRemoteObject+ ") this, operations, "+ opnum+ ", interfaceHash);");    if (paramTypes.length > 0) {      p.plnI("try {");      p.pln("java.io.ObjectOutput out = call.getOutputStream();");      writeMarshalArguments(p,"out",paramTypes,paramNames);      p.pOlnI("} catch (java.io.IOException e) {");      p.pln("throw new " + idMarshalException + "(\"error marshalling arguments\", e);");      p.pOln("}");    }    p.pln("ref.invoke(call);");    if (returnType.isType(TC_VOID)) {      p.pln("ref.done(call);");    } else {      p.pln(returnType + " $result;");      p.plnI("try {");      p.pln("java.io.ObjectInput in = call.getInputStream();");      boolean objectRead=writeUnmarshalArgument(p,"in",returnType,"$result");      p.pln(";");      p.pOlnI("} catch (java.io.IOException e) {");      p.pln("throw new " + idUnmarshalException + "(\"error unmarshalling return\", e);");      if (objectRead) {        p.pOlnI("} catch (java.lang.ClassNotFoundException e) {");        p.pln("throw new " + idUnmarshalException + "(\"error unmarshalling return\", e);");      }      p.pOlnI("} finally {");      p.pln("ref.done(call);");      p.pOln("}");      p.pln("return $result;");    }  }  if (version == STUB_VERSION_FAT) {    p.pOln("}");  }  if (catchList.size() > 0) {    for (Enumeration<ClassDefinition> enumeration=catchList.elements(); enumeration.hasMoreElements(); ) {      ClassDefinition def=enumeration.nextElement();      p.pOlnI("} catch (" + def.getName() + " e) {");      p.pln("throw e;");    }    p.pOlnI("} catch (java.lang.Exception e) {");    p.pln("throw new " + idUnexpectedException + "(\"undeclared checked exception\", e);");    p.pOln("}");  }  p.pOln("}");}  }
class C{  static boolean areConflicting(@NonNull Class<? extends Annotation> a1,@NonNull Class<? extends Annotation> a2){  Set<Class<? extends Annotation>> set=sConflictingAnnotations.get(a1);  return set.contains(a2);}  }
class C{  public static boolean intersectCircleCircle(double aX,double aY,double radiusSquaredA,double bX,double bY,double radiusSquaredB,Vector3d intersectionCenterAndHL){  double dX=bX - aX, dY=bY - aY;  double distSquared=dX * dX + dY * dY;  double h=0.5 + (radiusSquaredA - radiusSquaredB) / distSquared;  double r_i=Math.sqrt(radiusSquaredA - h * h * distSquared);  if (r_i >= 0.0) {    intersectionCenterAndHL.x=aX + h * dX;    intersectionCenterAndHL.y=aY + h * dY;    intersectionCenterAndHL.z=r_i;    return true;  }  return false;}  }
class C{  private void logMessage(String msg,Object[] obj){  if (_monitoringPropertiesLoader.isToLogIndications()) {    _logger.debug("[Monitoring] -> " + msg,obj);  }}  }
class C{  public synchronized E lastElement(){  if (elementCount == 0) {    throw new NoSuchElementException();  }  return elementData(elementCount - 1);}  }
class C{  public static int defineTag(int ifdId,short tagId){  return (tagId & 0x0000ffff) | (ifdId << 16);}  }
class C{  @Override public synchronized int hashCode(){  int result=1;  for (int i=0; i < elementCount; i++) {    result=(31 * result) + (elementData[i] == null ? 0 : elementData[i].hashCode());  }  return result;}  }
class C{  private ByteBuffer expandBuffer(ByteBuffer original,int cap){  ByteBuffer res=ByteBuffer.allocate(cap);  res.order(ByteOrder.nativeOrder());  original.flip();  res.put(original);  return res;}  }
class C{  public NotificationChain basicSetRewiredTarget(SymbolTableEntry newRewiredTarget,NotificationChain msgs){  SymbolTableEntry oldRewiredTarget=rewiredTarget;  rewiredTarget=newRewiredTarget;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ImPackage.REFERENCING_ELEMENT_IM__REWIRED_TARGET,oldRewiredTarget,newRewiredTarget);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public synchronized void notifyDisconnected(String title){  connectedServerTitles.remove(title);  updateNotification(getString(R.string.notification_disconnected,title),null,false,false,false);}  }
class C{  @Override public void stop() throws Exception {  if (!started)   return;synchronized (voteRunnables) {    started=false;    for (    VoteRunnableHolder voteRunnableHolder : voteRunnables.values()) {      for (      VoteRunnable runnable : voteRunnableHolder.runnables) {        runnable.close();      }    }  }  for (  Quorum quorum : quorums.values()) {    quorum.close();  }  quorums.clear();}  }
class C{  public static void subscribeToCPUReports(Callback callback){  subscribe(Type.CPU,callback);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.395 -0500",hash_original_method="6386ACC7AEA70584EF32F8CAA1BD0C6A",hash_generated_method="92AFC2541FA7884B51844D8D4C94ACE3") public ContentValues(ContentValues from){  mValues=new HashMap<String,Object>(from.mValues);}  }
class C{  public static void main(String[] args){  System.out.print("Enter x1, y1, x2, y2, x3, y3, x4, y4: ");  double[][] points=getPoints();  double[] p=getArguments(points);  LinearEquation intersectingPoint=new LinearEquation(p[0],p[1],p[2],p[3],p[4],p[5]);  if (intersectingPoint.isSolvable()) {    System.out.println("The intersecting point is at (" + intersectingPoint.getX() + ", "+ intersectingPoint.getY()+ ")");  } else   System.out.println("The two lines are parallel");}  }
class C{  public BarabasiAlbertGenerator(Supplier<Graph<V,E>> graphFactory,Supplier<V> vertexFactory,Supplier<E> edgeFactory,int init_vertices,int numEdgesToAttach,Set<V> seedVertices){  this(graphFactory,vertexFactory,edgeFactory,init_vertices,numEdgesToAttach,(int)System.currentTimeMillis(),seedVertices);}  }
class C{  public Call(String functionName,Class<?> returnType,String name1,Class<?> type1,String name2,Class<?> type2){  this(functionName,returnType,new String[]{name1,name2},new Class<?>[]{type1,type2});}  }
class C{  private boolean isMissingKey(String key,List<String> listToCheck){  boolean isUserOpLogKey=Pattern.matches("3\\d\\d\\d\\d",key);  boolean isDebugKey="00000".equals(key);  boolean isErrorKey="-00001".equals(key);  return !(listToCheck.contains(key) || isUserOpLogKey || isDebugKey|| isErrorKey);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:37.885 -0400",hash_original_method="A04684FB7E50F0BFD4ACB9DB06824BBB",hash_generated_method="A04684FB7E50F0BFD4ACB9DB06824BBB") void handleQop(ParsedDirective pd) throws SaslException {  String token;  TokenParser parser;  if (m_qop != 0)   throw new SaslException("Too many qop directives.");  parser=new TokenParser(pd.getValue());  for (token=parser.parseToken(); token != null; token=parser.parseToken()) {    if (token.equals("auth"))     m_qop|=QOP_AUTH; else     if (token.equals("auth-int"))     m_qop|=QOP_AUTH_INT; else     if (token.equals("auth-conf"))     m_qop|=QOP_AUTH_CONF; else     m_qop|=QOP_UNRECOGNIZED;  }}  }
class C{  public void testPingPong2xMtuWithAckDelayOff(){  PseudoTcpTestPingPong test=new PseudoTcpTestPingPong();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setOptAckDelay(0);  test.doTestPingPong(2000,100);}  }
class C{  public DateColumn(){  this(Date.class,0,10,0L);}  }
class C{  public final static void changeWordEndianess(byte[] b,int offset,int length){  byte tmp;  for (int i=offset; i < offset + length; i+=4) {    tmp=b[i];    b[i]=b[i + 3];    b[i + 3]=tmp;    tmp=b[i + 1];    b[i + 1]=b[i + 2];    b[i + 2]=tmp;  }}  }
class C{  private Network createNetwork(IBasicRequest request) throws Exception {  request.onPreExecute();  String url=request.url();  Logger.i("Request address: " + url);  Logger.i("Request method: " + request.getRequestMethod());  Headers headers=request.headers();  headers.set(Headers.HEAD_KEY_CONTENT_TYPE,request.getContentType());  List<String> values=headers.getValues(Headers.HEAD_KEY_CONNECTION);  if (values == null || values.size() == 0)   headers.add(Headers.HEAD_KEY_CONNECTION,Headers.HEAD_VALUE_CONNECTION_KEEP_ALIVE);  RequestMethod requestMethod=request.getRequestMethod();  if (requestMethod.allowRequestBody())   headers.set(Headers.HEAD_KEY_CONTENT_LENGTH,Long.toString(request.getContentLength()));  headers.addCookie(new URI(url),NoHttp.getCookieManager());  return mExecutor.execute(request);}  }
class C{  public boolean isAttrNameValid(){  return attrName == null || !attrNamePatterns.isEmpty();}  }
class C{  public int byteCount(){  return this.dataLength() / FontData.DataSize.BYTE.size();}  }
class C{  public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  H5=0xc3d2e1f0;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public static String reverse(String str){  if ((null == str) || (str.length() <= 1)) {    return str;  }  return new StringBuffer(str).reverse().toString();}  }
class C{  private void validateScanners(){  if (scanners.size == 0) {    throw new ContextInitiationException("Cannot initiate context without any class scanners and scanning roots.");  }}  }
class C{  public String join(String separator) throws JSONException {  int len=length();  StringBuffer sb=new StringBuffer();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  public EvaluationResult.MeasurementGroup findOrCreateGroup(String label){  for (  EvaluationResult.MeasurementGroup g : groups) {    if (label.equals(g.getName())) {      return g;    }  }  return newGroup(label);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ID;case 2:  return CREATE_TIME;case 3:return UPDATE_TIME;case 4:return OPERATION;case 5:return STATUS;case 6:return SRC_PATH;case 7:return SRC_CLUSTER;case 8:return SRC_DB;case 9:return SRC_TABLE;case 10:return SRC_PARTITIONS;case 11:return SRC_MODIFIED_TIME;case 12:return RENAME_TO_DB;case 13:return RENAME_TO_TABLE;case 14:return RENAME_TO_PATH;case 15:return EXTRAS;case 16:return WAITING_ON_JOBS;default :return null;}}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  @Override public void process(KeyValPair<K,V> tuple){  if (tuple.getValue().doubleValue() != 0.0) {    MutableDouble val=basemap.get(tuple.getKey());    if (val == null) {      val=new MutableDouble(0.0);      basemap.put(cloneKey(tuple.getKey()),val);    }    val.setValue(tuple.getValue().doubleValue());  }}  }
class C{  private void endControlWord(){  String word=controlWord.toString();  if ("par".equals(word)) {    sb.append('\n');  } else   if ("tab".equals(word)) {    sb.append('\t');  }  controlWord.setLength(0);  inControlWord=false;}  }
class C{  public static ExampleUser fromParseUser(ParseUser in){  return new ExampleUser(in.getObjectId(),in.getString(UsersTable.Fields.DISPLAY_NAME));}  }
class C{  void deleteStorageView(String viewName,String clusterName,Boolean[] viewFound) throws VPlexApiException {  s_logger.info("Request to delete storage view {}",viewName);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexStorageViewInfo storageViewInfo=null;  try {    storageViewInfo=discoveryMgr.findStorageViewOnCluster(viewName,clusterName,false);  } catch (  Exception e) {    s_logger.error("Exception trying to find VPLEX storage view.",e);    viewFound[0]=false;    throw e;  }  if (storageViewInfo == null) {    s_logger.warn("Storage view {} not found. Nothing to delete.",viewName);    viewFound[0]=false;    return;  } else {    s_logger.info("Storage view {} was found on the VPLEX device.",viewName);    viewFound[0]=true;  }  ClientResponse response=null;  try {    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_DESTROY_STORAGE_VIEW);    s_logger.info("Delete storage view URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    StringBuilder viewPath=new StringBuilder();    viewPath.append(VPlexApiConstants.URI_CLUSTERS_RELATIVE.toString());    viewPath.append(clusterName);    viewPath.append(VPlexApiConstants.URI_STORAGE_VIEWS.toString());    viewPath.append(viewName);    argsMap.put(VPlexApiConstants.ARG_DASH_V,viewPath.toString());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Delete storage view POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Delete storage view response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Storage view deletion completing asyncronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.deleteStorageViewFailureStatus(viewName,String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Deleted storage view {}",viewName);  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedDeleteStorageView(viewName,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  @PUT @Path("/{id}") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public IpInterfaceRestRep updateIpInterface(@PathParam("id") URI id,IpInterfaceUpdateParam updateParam) throws DatabaseException {  IpInterface ipInterface=queryObject(IpInterface.class,id,true);  _hostService.validateIpInterfaceData(updateParam,ipInterface);  _hostService.populateIpInterface(updateParam,ipInterface);  _dbClient.persistObject(ipInterface);  auditOp(OperationTypeEnum.UPDATE_HOST_IPINTERFACE,true,null,ipInterface.auditParameters());  return map(queryObject(IpInterface.class,id,false));}  }
class C{  public NotificationChain basicSetCheck(Check newCheck,NotificationChain msgs){  Check oldCheck=check;  check=newCheck;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.REACTION__CHECK,oldCheck,newCheck);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void addLdc(int i){  if (i > 0xFF) {    addOpcode(LDC_W);    addIndex(i);  } else {    addOpcode(LDC);    add(i);  }}  }
class C{  @Pointcut("set(* *.*)") public void fieldSet(){}  }
class C{  public boolean isLargestMaxY(final PlanetModel planetModel){  if (maxY == null)   return false;  return planetModel.getMaximumYValue() - maxY < Vector.MINIMUM_RESOLUTION;}  }
class C{  @Override public QueryBuilder buildWhereClause(Context context,SqlColumnMappingFactory columnMappingFactory){  return filterCriteria.buildWhereClause(context,columnMappingFactory);}  }
class C{  public IPoint[] generate(int size){  IPoint[] points=new TwoDPoint[size];  int ct=0;  int[] nums=new int[2 * size];  for (int i=0; i < 2 * size; i++) {    nums[i]=i;  }  int idx=2 * size;  while (idx > 0) {    int r=(int)(Math.random() * idx);    int rv=nums[r];    nums[r]=nums[idx - 1];    nums[idx - 1]=-1;    idx--;    int c=(int)(Math.random() * idx);    int cv=nums[c];    nums[c]=nums[idx - 1];    nums[idx - 1]=-1;    idx--;    points[ct++]=new TwoDPoint(rv,cv);  }  return points;}  }
class C{  public NonClippingGain(float gain,float maxValue){  mGain=gain;  mMaxValue=maxValue;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 2:{        addToken(Token.IDENTIFIER);      }case 59:    break;case 22:{    yybegin(INTAG_SCRIPT);    addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);  }case 60:break;case 53:{addToken(Token.LITERAL_BOOLEAN);}case 61:break;case 31:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addEndToken(INTERNAL_IN_AS);return firstToken;}case 62:break;case 39:{addToken(Token.ERROR_CHAR);}case 63:break;case 36:{addToken(Token.ERROR_NUMBER_FORMAT);}case 64:break;case 26:{addEndToken(INTERNAL_IN_AS);return firstToken;}case 65:break;case 20:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE_SCRIPT);}case 66:break;case 13:{yybegin(YYINITIAL);addToken(Token.MARKUP_TAG_DELIMITER);}case 67:break;case 28:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 68:break;case 40:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 69:break;case 54:{addToken(Token.FUNCTION);}case 70:break;case 45:{int count=yylength();addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - (count - 2),zzMarkedPos - 1,Token.MARKUP_TAG_NAME);yybegin(INTAG);}case 71:break;case 33:{start=zzMarkedPos - 2;yybegin(DTD);}case 72:break;case 57:{addToken(Token.DATA_TYPE);start=zzMarkedPos;yybegin(CDATA);}case 73:break;case 29:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 74:break;case 48:{addToken(Token.DATA_TYPE);}case 75:break;case 24:{addToken(Token.ERROR_IDENTIFIER);}case 76:break;case 10:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.FUNCTION);}case 77:break;case 18:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 78:break;case 4:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(INTAG);}case 79:break;case 30:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_AS_MLC);return firstToken;}case 80:break;case 35:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.PREPROCESSOR);}case 81:break;case 49:{addToken(Token.LITERAL_CHAR);}case 82:break;case 34:{start=zzMarkedPos - 2;yybegin(PI);}case 83:break;case 15:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE);}case 84:break;case 44:{yybegin(AS);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 85:break;case 38:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 86:break;case 21:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE_SCRIPT);}case 87:break;case 43:{start=zzMarkedPos - 2;yybegin(AS_MLC);}case 88:break;case 16:{addToken(Token.MARKUP_TAG_DELIMITER);}case 89:break;case 5:{addToken(Token.WHITESPACE);}case 90:break;case 32:{int count=yylength();String tag=yytext();addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - (count - 1),zzMarkedPos - 1,Token.MARKUP_TAG_NAME);if (tag.endsWith(":Script") || tag.equals("<Script")) {yybegin(INTAG_SCRIPT);} else {yybegin(INTAG);}}case 91:break;case 6:{addToken(Token.DATA_TYPE);}case 92:break;case 25:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 93:break;case 14:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE);}case 94:break;case 11:{addToken(Token.MARKUP_TAG_ATTRIBUTE);}case 95:break;case 17:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 96:break;case 47:{int temp=zzStartRead;yybegin(YYINITIAL);addToken(start,zzStartRead - 1,Token.VARIABLE);addToken(temp,zzMarkedPos - 1,Token.DATA_TYPE);}case 97:break;case 23:{yybegin(INTAG_SCRIPT);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 98:break;case 42:{start=zzMarkedPos - 2;yybegin(AS_EOL_COMMENT);}case 99:break;case 9:{addToken(start,zzStartRead - 1,Token.FUNCTION);return firstToken;}case 100:break;case 51:{start=zzMarkedPos - 4;yybegin(COMMENT);}case 101:break;case 41:{addToken(Token.RESERVED_WORD);}case 102:break;case 55:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 103:break;case 46:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.COMMENT_MULTILINE);}case 104:break;case 27:{addToken(Token.SEPARATOR);}case 105:break;case 3:{addNullToken();return firstToken;}case 106:break;case 7:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 107:break;case 19:{yybegin(AS);addToken(Token.MARKUP_TAG_DELIMITER);}case 108:break;case 12:{addToken(Token.OPERATOR);}case 109:break;case 37:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 110:break;case 56:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 111:break;case 52:{addToken(Token.COMMENT_MULTILINE);}case 112:break;case 8:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 113:break;case 58:{int origStart=zzStartRead;String text=yytext();int tagNameEnd=text.length() - 2;while (Character.isWhitespace(text.charAt(tagNameEnd))) {tagNameEnd--;}int tagNameLen=tagNameEnd - 1;yybegin(YYINITIAL);addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);addToken(origStart + 2,origStart + 2 + tagNameLen - 1,Token.MARKUP_TAG_NAME);if (tagNameEnd < text.length() - 2) {addToken(origStart + tagNameEnd + 1,zzMarkedPos - 2,Token.WHITESPACE);}addToken(zzMarkedPos - 1,zzMarkedPos - 1,Token.MARKUP_TAG_DELIMITER);}case 114:break;case 50:{addToken(Token.ERROR_STRING_DOUBLE);}case 115:break;case 1:{}case 116:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case AS_EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addEndToken(INTERNAL_IN_AS);return firstToken;}case 615:break;case AS_MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_AS_MLC);return firstToken;}case 616:break;case INTAG_SCRIPT:{addToken(start,zzStartRead - 1,INTERNAL_INTAG_SCRIPT);return firstToken;}case 617:break;case INATTR_DOUBLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT);return firstToken;}case 618:break;case CDATA:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 619:break;case INATTR_SINGLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT);return firstToken;}case 620:break;case DTD:{addToken(start,zzStartRead - 1,Token.FUNCTION);return firstToken;}case 621:break;case INATTR_SINGLE:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 622:break;case INATTR_DOUBLE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 623:break;case YYINITIAL:{addNullToken();return firstToken;}case 624:break;case AS:{addEndToken(INTERNAL_IN_AS);return firstToken;}case 625:break;case INTAG:{addToken(start,zzStartRead - 1,INTERNAL_INTAG);return firstToken;}case 626:break;case COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 627:break;case PI:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 628:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void pausePolling(){  if (!mIsActive) {    return;  }  mSensorManager.unregisterListener(this);  mIsActive=false;}  }
class C{  public void connectToDatabase() throws Exception {  if (m_Debug) {    System.err.println("Connecting to " + m_DatabaseURL);  }  if (m_Connection == null) {    if (m_userName.equals("")) {      try {        m_Connection=DriverManager.getConnection(m_DatabaseURL);      } catch (      java.sql.SQLException e) {        for (int i=0; i < DRIVERS.size(); i++) {          try {            Class.forName(DRIVERS.elementAt(i));          } catch (          Exception ex) {          }        }        m_Connection=DriverManager.getConnection(m_DatabaseURL);      }    } else {      try {        m_Connection=DriverManager.getConnection(m_DatabaseURL,m_userName,m_password);      } catch (      java.sql.SQLException e) {        for (int i=0; i < DRIVERS.size(); i++) {          try {            Class.forName(DRIVERS.elementAt(i));          } catch (          Exception ex) {          }        }        m_Connection=DriverManager.getConnection(m_DatabaseURL,m_userName,m_password);      }    }  }  m_Connection.setAutoCommit(m_setAutoCommit);}  }
class C{  public boolean hasFile(String filename){  if (StringUtils.isEmpty(filename)) {    return false;  }  for (  MediaFile file : new ArrayList<>(getMediaFiles())) {    if (filename.compareTo(file.getFilename()) == 0) {      return true;    }  }  return false;}  }
class C{  public void indexDocuments(List<Document> docs){  IndexWriter writer=getWriter();  for (  Document document : docs) {    try {      writer.addDocument(document);    } catch (    Exception e) {      e.printStackTrace();      closeWriter(writer);      throw new RuntimeException(e);    }  }  closeWriter(writer);}  }
class C{  public static Throwable sanitizeRootCause(Throwable t){  return StackTraceUtils.sanitize(StackTraceUtils.extractRootCause(t));}  }
class C{  public static void SetLastReceivedPdu(byte[] pdu){  mLastReceivedPdu=pdu;  sDataSet=true;}  }
class C{  public JSONObject put(String key,Map<String,Object> value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  protected void assertBusinessObjectData(Integer expectedDataVersion,List<Attribute> expectedAttributes,List<BusinessObjectDataKey> expectedParents,BusinessObjectData actualBusinessObjectData){  assertNotNull(actualBusinessObjectData);  assertEquals(TEST_BUSINESS_OBJECT_DEFINITION,actualBusinessObjectData.getBusinessObjectDefinitionName());  assertEquals(TEST_BUSINESS_OBJECT_FORMAT_USAGE,actualBusinessObjectData.getBusinessObjectFormatUsage());  assertEquals(TEST_BUSINESS_OBJECT_FORMAT_FILE_TYPE,actualBusinessObjectData.getBusinessObjectFormatFileType());  assertEquals(TEST_BUSINESS_OBJECT_FORMAT_VERSION.intValue(),actualBusinessObjectData.getBusinessObjectFormatVersion());  assertEquals(TEST_BUSINESS_OBJECT_FORMAT_PARTITION_KEY,actualBusinessObjectData.getPartitionKey());  assertEquals(TEST_PARTITION_VALUE,actualBusinessObjectData.getPartitionValue());  assertEquals(expectedDataVersion.intValue(),actualBusinessObjectData.getVersion());  assertEquals(1,actualBusinessObjectData.getStorageUnits().size());  assertEquals(StorageEntity.MANAGED_STORAGE,actualBusinessObjectData.getStorageUnits().get(0).getStorage().getName());  assertEquals(testManifestFiles.size(),actualBusinessObjectData.getStorageUnits().get(0).getStorageFiles().size());  assertEquals(expectedAttributes,actualBusinessObjectData.getAttributes());  assertEquals(expectedParents,actualBusinessObjectData.getBusinessObjectDataParents());}  }
class C{  public String useTabsTipText(){  return "Sets whether to use tabs as separators instead of blanks.";}  }
class C{  String internalsprintf(int s) throws IllegalArgumentException {  String s2="";switch (conversionCharacter) {case 'd':case 'i':    if (optionalh)     s2=printDFormat((short)s); else     if (optionall)     s2=printDFormat((long)s); else     s2=printDFormat(s);  break;case 'x':case 'X':if (optionalh) s2=printXFormat((short)s); else if (optionall) s2=printXFormat((long)s); else s2=printXFormat(s);break;case 'o':if (optionalh) s2=printOFormat((short)s); else if (optionall) s2=printOFormat((long)s); else s2=printOFormat(s);break;case 'c':case 'C':s2=printCFormat((char)s);break;default :throw new IllegalArgumentException("Cannot format a int with a format using a " + conversionCharacter + " conversion character.");}return s2;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public final void removeNode(Node node){  getChildren().remove(node);}  }
class C{  @Override public void tryToExecute() throws Throwable {  Exceptions.Collector collector=new Exceptions.Collector();  varInitializers.forEach(null);  collector.haltOnFailure();  beforeAllHooks.stream().filter(firstChance()).forEach(null);  beforeAllHookFailed=!collector.isEmpty();  collector.haltOnFailure();  beforeEachHooks.forEach(null);  collector.haltOnFailure();  collector.execute(block);  afterEachHooks.forEach(null);  afterAllHooks.stream().filter(lastChance()).forEach(null);  collector.haltOnFailure();}  }
class C{  public boolean isDefaultRouteSet(){  return mDefaultRouteSet.get();}  }
class C{  @Override public void acceptResult(ResultProducer rp,Object[] key,Object[] result) throws Exception {  if (m_ResultProducer != rp) {    throw new Error("Unrecognized ResultProducer sending results!!");  }  Object[] newKey=new Object[key.length + 1];  System.arraycopy(key,0,newKey,0,key.length);  newKey[key.length]=new String("" + m_CurrentSize);  m_ResultListener.acceptResult(this,newKey,result);}  }
class C{  public Set<E> find(E element){  return new LinkedHashSet<E>(elementToSet.get(element));}  }
class C{  public double abs(){  return Math.hypot(re,im);}  }
class C{  public static String right(String source,String searchFor){  int index=source.indexOf(searchFor) + searchFor.length();  if (index < 0) {    return "";  }  return source.substring(index);}  }
class C{  public void flush(){  GLES20.glFlush();}  }
class C{  @Override public void onDisconnect(){  super.onDisconnect();  if (service.getSettings().isReconnectEnabled() && server.getStatus() != Status.DISCONNECTED) {    setAutojoinChannels(server.getCurrentChannelNames());    server.setStatus(Status.CONNECTING);    service.connect(server);  } else {    server.setStatus(Status.DISCONNECTED);  }  service.notifyDisconnected(server.getTitle());  Intent sIntent=Broadcast.createServerIntent(Broadcast.SERVER_UPDATE,server.getId());  service.sendBroadcast(sIntent);  Collection<Conversation> conversations=server.getConversations();  for (  Conversation conversation : conversations) {    Message message=new Message(service.getString(R.string.message_disconnected));    message.setIcon(R.drawable.error);    message.setColor(Message.COLOR_RED);    server.getConversation(conversation.getName()).addMessage(message);    Intent cIntent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),conversation.getName());    service.sendBroadcast(cIntent);  }synchronized (isQuittingLock) {    isQuitting=false;    if (disposeRequested) {      super.dispose();    }  }}  }
class C{  public synchronized void increase(){  if (accuracy > 0) {    long timePassed=System.currentTimeMillis() - lastAdded;    if (timePassed > accuracy) {      clearUp();      if (count > 0) {        data.addFirst(lastAdded + accuracy);      }      lastAdded=System.currentTimeMillis();      count=0;    }    count++;  } else {    clearUp();    data.addFirst(System.currentTimeMillis());  }}  }
class C{  @Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  ConfigMethod configMethod=ConfigMethod.getInstance(configInterface,method);  return configMethod.invoke(this,args);}  }
class C{  public void appendChild(int newChild,boolean clone,boolean cloneDepth){  boolean sameDoc=((newChild & DOCHANDLE_MASK) == m_docHandle);  if (clone || !sameDoc) {  } else {  }}  }
class C{  public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| object instanceof BigInteger|| object instanceof BigDecimal) {      return object;    }    if (object instanceof Collection) {      @SuppressWarnings("unchecked") Collection<Object> coll=(Collection<Object>)object;      return new JSONArray(coll);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      @SuppressWarnings("unchecked") Map<String,Object> map=(Map<String,Object>)object;      return new JSONObject(map);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  @Override public int size(){  removeClearedEntries();  return map.size();}  }
class C{  public static final Polygon flipAlongTheXAxis(Polygon polygon){  return Geometry.flip(polygon,Vector2.X_AXIS,null);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>(3);  result.addElement(new Option("\tThe minimum frequency for a value to remain (default: 2).\n","-N",1,"-N <int>"));  result.addElement(new Option("\tSets list of attributes to act on (or its inverse). 'first and 'last' are accepted as well.'\n" + "\tE.g.: first-5,7,9,20-last\n" + "\t(default: 1,2)","R",1,"-R <range>"));  result.addElement(new Option("\tInvert matching sense (i.e. act on all attributes not specified in list)","V",0,"-V"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public T caseBaseTypeRef(BaseTypeRef object){  return null;}  }
class C{  @Override public boolean longClick(String obj) throws UiObjectNotFoundException {  return getUiObject(obj).longClick();}  }
class C{  public boolean implies(CodeSource codesource){  LinkedList<PrincipalEntry> subjectList=null;  if (codesource == null || !(codesource instanceof SubjectCodeSource) || !(super.implies(codesource))) {    if (debug != null)     debug.println("\tSubjectCodeSource.implies: FAILURE 1");    return false;  }  SubjectCodeSource that=(SubjectCodeSource)codesource;  if (this.principals == null) {    if (debug != null)     debug.println("\tSubjectCodeSource.implies: PASS 1");    return true;  }  if (that.getSubject() == null || that.getSubject().getPrincipals().size() == 0) {    if (debug != null)     debug.println("\tSubjectCodeSource.implies: FAILURE 2");    return false;  }  ListIterator<PrincipalEntry> li=this.principals.listIterator(0);  while (li.hasNext()) {    PrincipalEntry pppe=li.next();    try {      Class<?> pClass=Class.forName(pppe.principalClass,true,sysClassLoader);      if (!Principal.class.isAssignableFrom(pClass)) {        throw new ClassCastException(pppe.principalClass + " is not a Principal");      }      Constructor<?> c=pClass.getConstructor(PARAMS);      Principal p=(Principal)c.newInstance(new Object[]{pppe.principalName});      if (!p.implies(that.getSubject())) {        if (debug != null)         debug.println("\tSubjectCodeSource.implies: FAILURE 3");        return false;      } else {        if (debug != null)         debug.println("\tSubjectCodeSource.implies: PASS 2");        return true;      }    } catch (    Exception e) {      if (subjectList == null) {        if (that.getSubject() == null) {          if (debug != null)           debug.println("\tSubjectCodeSource.implies: " + "FAILURE 4");          return false;        }        Iterator<Principal> i=that.getSubject().getPrincipals().iterator();        subjectList=new LinkedList<PrincipalEntry>();        while (i.hasNext()) {          Principal p=i.next();          PrincipalEntry spppe=new PrincipalEntry(p.getClass().getName(),p.getName());          subjectList.add(spppe);        }      }      if (!subjectListImpliesPrincipalEntry(subjectList,pppe)) {        if (debug != null)         debug.println("\tSubjectCodeSource.implies: FAILURE 5");        return false;      }    }  }  if (debug != null)   debug.println("\tSubjectCodeSource.implies: PASS 3");  return true;}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.930 -0500",hash_original_method="C6B41426A404CA21E11CAC8C87CD14A9",hash_generated_method="D555261B8552AD64E58ADC3D88FA70D5") public Socket createSocket(InetAddress address,int port,InetAddress localAddr,int localPort) throws IOException {  return new Socket(address,port,localAddr,localPort);}  }
class C{  @Override protected void tearDown() throws Exception {  shutdownService();  mService=null;  scrubClass(ServiceTestCase.class);  super.tearDown();}  }
class C{  private static void createCollection() throws SolrServerException, IOException {  final CollectionAdminRequest.Create createCollectionRequest=new CollectionAdminRequest.Create();  createCollectionRequest.setCollectionName(COLLECTION_NAME);  createCollectionRequest.setConfigName(CONFIG_NAME);  System.out.println("Creating collection...");  final CollectionAdminResponse response=createCollectionRequest.process(solrClient);  if (!response.isSuccess()) {    System.out.println(response.getErrorMessages());    throw new IllegalStateException("Failed to create collection: " + response.getErrorMessages().toString());  }  System.out.println("Collection created.");}  }
class C{  @Override public int requestConfirm(final Object[] args){  if (showMessage) {    System.out.println("input requested - parameters passed in (String or components");  }  return 0;}  }
class C{  public void writeHeaderPart(AnnotatedOutput out){  throwIfNotPrepared();  int sz=protoIds.size();  int offset=(sz == 0) ? 0 : getFileOffset();  if (sz > 65536) {    throw new UnsupportedOperationException("too many proto ids");  }  if (out.annotates()) {    out.annotate(4,"proto_ids_size:  " + Hex.u4(sz));    out.annotate(4,"proto_ids_off:   " + Hex.u4(offset));  }  out.writeInt(sz);  out.writeInt(offset);}  }
class C{  public void println(String line){  consumer.accept(line);  consumer.accept("\n");}  }
class C{  public void remove(int index){  modCount++;  data.remove(index);}  }
class C{  public boolean checkForBroadcastAddress(DccLocoAddress addr){  if (addr.getNumber() < 1) {    log.warn("Trying to use broadcast address!");    return true;  }  return false;}  }
class C{  public void disconnect(String clientHandle,long quiesceTimeout,String invocationContext,String activityToken){  MqttConnection client=getConnection(clientHandle);  client.disconnect(quiesceTimeout,invocationContext,activityToken);  connections.remove(clientHandle);  stopSelf();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static TaskOptions createViewUpdateTask(String datasetId,String tableId,String kindName){  return TaskOptions.Builder.withUrl(PATH).method(Method.POST).param(UPDATE_SNAPSHOT_DATASET_ID_PARAM,datasetId).param(UPDATE_SNAPSHOT_TABLE_ID_PARAM,tableId).param(UPDATE_SNAPSHOT_KIND_PARAM,kindName);}  }
class C{  public static Bitmap captureView(View v){  Bitmap b=Bitmap.createBitmap(v.getWidth(),v.getHeight(),Bitmap.Config.ARGB_8888);  Canvas c=new Canvas(b);  v.draw(c);  return b;}  }
class C{  public static void clearContext(){  getCtx().clear();}  }
class C{  public static boolean equipWithStackableItem(final Player player,final String clazz,final int amount){  final StackableItem item=(StackableItem)SingletonRepository.getEntityManager().getItem(clazz);  item.setQuantity(amount);  return player.equipToInventoryOnly(item);}  }
class C{  @Override final public ExistsNode visit(final ASTExistsFunc node,Object data) throws VisitorException {  final VarNode anonvar=context.createAnonVar("-exists-");  final GroupGraphPattern parentGP=graphPattern;  graphPattern=scopedGroupGraphPattern(node);  @SuppressWarnings("unchecked") final GraphPatternGroup<IGroupMemberNode> innerGraphPattern=(GraphPatternGroup<IGroupMemberNode>)node.jjtGetChild(0).jjtAccept(this,null);  final ExistsNode fn=new ExistsNode(anonvar,innerGraphPattern);  graphPattern=parentGP;  return fn;}  }
class C{  public boolean isValid(@NotNull String url){  return GITHUB_PATTERN.matcher(url).matches();}  }
class C{  public short closeEntityManager(EntityManager em){  if (em != null) {    em.close();  }  return 1;}  }
class C{  public void test_clearAllSolutionSets(){  final List<IBindingSet[]> in1=new LinkedList<IBindingSet[]>();{    final List<IBindingSet> t=new LinkedList<IBindingSet>();{      final ListBindingSet b=new ListBindingSet();      t.add(b);    }    in1.add(t.toArray(new IBindingSet[0]));  }  final List<IBindingSet[]> in2=new LinkedList<IBindingSet[]>();{    final List<IBindingSet> t=new LinkedList<IBindingSet>();{      final ListBindingSet b=new ListBindingSet();      t.add(b);    }{      final ListBindingSet b=new ListBindingSet();      t.add(b);    }    in1.add(t.toArray(new IBindingSet[0]));  }  final String solutionSet1=getName() + 1;  final String solutionSet2=getName() + 2;  try {    solutionSetsManager.getSolutions(solutionSet1);    fail("Expecting: " + IllegalStateException.class);  } catch (  IllegalStateException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }  try {    solutionSetsManager.getSolutions(solutionSet2);    fail("Expecting: " + IllegalStateException.class);  } catch (  IllegalStateException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }  solutionSetsManager.putSolutions(solutionSet1,new CloseableIteratorWrapper<IBindingSet[]>(in1.iterator()));  solutionSetsManager.putSolutions(solutionSet2,new CloseableIteratorWrapper<IBindingSet[]>(in2.iterator()));  assertSameSolutionsAnyOrder(flatten(in1.iterator()),solutionSetsManager.getSolutions(solutionSet1));  assertSameSolutionsAnyOrder(flatten(in2.iterator()),solutionSetsManager.getSolutions(solutionSet2));  solutionSetsManager.clearAllSolutions();  try {    final ICloseableIterator<IBindingSet[]> itr=solutionSetsManager.getSolutions(solutionSet1);    try {      assertFalse(itr.hasNext());    }  finally {      itr.close();    }    fail("Expecting: " + IllegalStateException.class);  } catch (  IllegalStateException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }  assertFalse(solutionSetsManager.existsSolutions(solutionSet1));  try {    solutionSetsManager.getSolutions(solutionSet2);    fail("Expecting: " + IllegalStateException.class);  } catch (  IllegalStateException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }  assertFalse(solutionSetsManager.existsSolutions(solutionSet2));}  }
class C{  public long nextLong(long n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive, got: " + n);  long bits, val;  do {    bits=(nextLong() >>> 1);    val=bits % n;  } while (bits - val + (n - 1) < 0);  return val;}  }
class C{  public final int yychar(){  return yychar;}  }
class C{  public static boolean wildcardMatch(String filename,String wildcardMatcher,IOCase caseSensitivity){  if (filename == null && wildcardMatcher == null)   return true;  if (filename == null || wildcardMatcher == null)   return false;  if (caseSensitivity == null)   caseSensitivity=IOCase.SENSITIVE;  String[] wcs=splitOnTokens(wildcardMatcher);  boolean anyChars=false;  int textIdx=0;  int wcsIdx=0;  Stack<int[]> backtrack=new Stack<int[]>();  do {    if (backtrack.size() > 0) {      int[] array=backtrack.pop();      wcsIdx=array[0];      textIdx=array[1];      anyChars=true;    }    while (wcsIdx < wcs.length) {      if (wcs[wcsIdx].equals("?")) {        textIdx++;        if (textIdx > filename.length())         break;        anyChars=false;      } else       if (wcs[wcsIdx].equals("*")) {        anyChars=true;        if (wcsIdx == wcs.length - 1)         textIdx=filename.length();      } else {        if (anyChars) {          textIdx=caseSensitivity.checkIndexOf(filename,textIdx,wcs[wcsIdx]);          if (textIdx == -1) {            break;          }          int repeat=caseSensitivity.checkIndexOf(filename,textIdx + 1,wcs[wcsIdx]);          if (repeat >= 0)           backtrack.push(new int[]{wcsIdx,repeat});        } else {          if (!caseSensitivity.checkRegionMatches(filename,textIdx,wcs[wcsIdx])) {            break;          }        }        textIdx+=wcs[wcsIdx].length();        anyChars=false;      }      wcsIdx++;    }    if (wcsIdx == wcs.length && textIdx == filename.length())     return true;  } while (backtrack.size() > 0);  return false;}  }
class C{  public static boolean isKeyPairEntry(String alias,KeyStore keyStore) throws KeyStoreException {  return keyStore.isKeyEntry(alias) && keyStore.getCertificateChain(alias) != null && keyStore.getCertificateChain(alias).length != 0;}  }
class C{  public static void init(OptOptions options){  try {    if (!(VM.writingBootImage || VM.runningTool || VM.runningVM)) {      throw new OptimizingCompilerException("VM not initialized",true);    }    options=options.dup();    options.ESCAPE_SIMPLE_IPA=false;    initializeStatics();    Callbacks.addStartupMonitor(new OptimizingCompiler());    isInitialized=true;  } catch (  OptimizingCompilerException e) {    e.isFatal=true;    throw e;  }catch (  Throwable e) {    OptimizingCompilerException oe=new OptimizingCompilerException("Compiler","untrapped failure during init, " + " Converting to OptimizingCompilerException");    oe.initCause(e);    throw oe;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  void resetToPreferences(){  try {    Preferences systemPrefs=Prefs.getGlobalPreferences(getPreferencesKey());    Preferences appPrefs=Prefs.getAppPreferences(simulation,getPreferencesKey());    orbitRotateXCheckBox.setSelected(appPrefs.getBoolean(ROTATE_LEFT_RIGHT_KEY,systemPrefs.getBoolean(ROTATE_LEFT_RIGHT_KEY,true)));    orbitRotateYCheckBox.setSelected(appPrefs.getBoolean(ROTATE_UP_DOWN_KEY,systemPrefs.getBoolean(ROTATE_UP_DOWN_KEY,true)));    orbitTranslateXCheckBox.setSelected(appPrefs.getBoolean(TRANSLATE_LEFT_RIGHT_KEY,systemPrefs.getBoolean(TRANSLATE_LEFT_RIGHT_KEY,true)));    orbitTranslateYCheckBox.setSelected(appPrefs.getBoolean(TRANSLATE_UP_DOWN_KEY,systemPrefs.getBoolean(TRANSLATE_UP_DOWN_KEY,true)));    selectBehCheckBox.setSelected(appPrefs.getBoolean(SELECT_KEY,systemPrefs.getBoolean(SELECT_KEY,true)));    rotAxis_X.setValue(rotAxis_X.newValue(appPrefs.getDouble(AUTO_ROTATE_X_KEY,systemPrefs.getDouble(AUTO_ROTATE_X_KEY,0))));    rotAxis_Y.setValue(rotAxis_Y.newValue(appPrefs.getDouble(AUTO_ROTATE_Y_KEY,systemPrefs.getDouble(AUTO_ROTATE_Y_KEY,0))));    rotAxis_Z.setValue(rotAxis_Z.newValue(appPrefs.getDouble(AUTO_ROTATE_Z_KEY,systemPrefs.getDouble(AUTO_ROTATE_Z_KEY,0))));    spinDuration.setValue(spinDuration.newValue(appPrefs.getDouble(AUTO_ROTATE_RATE_KEY,systemPrefs.getDouble(AUTO_ROTATE_RATE_KEY,0))));    showAxesCheckBox.setSelected(appPrefs.getBoolean(AXES_KEY,systemPrefs.getBoolean(AXES_KEY,false)));    tooltips.setSelected(appPrefs.getBoolean(TOOLTIPS_KEY,systemPrefs.getBoolean(TOOLTIPS_KEY,false)));    showSpotlightCheckBox.setSelected(appPrefs.getBoolean(SPOTLIGHT_KEY,systemPrefs.getBoolean(SPOTLIGHT_KEY,true)));    showAmbientLightCheckBox.setSelected(appPrefs.getBoolean(AMBIENT_LIGHT_KEY,systemPrefs.getBoolean(AMBIENT_LIGHT_KEY,false)));    showBackgroundCheckBox.setSelected(appPrefs.getBoolean(BACKDROP_KEY,systemPrefs.getBoolean(BACKDROP_KEY,true)));    int val=appPrefs.getInt(DRAW_POLYGONS_KEY,systemPrefs.getInt(DRAW_POLYGONS_KEY,polyPoint.isSelected() ? 0 : polyLine.isSelected() ? 1 : 2));    if (val == 0)     polyPoint.setSelected(true); else     if (val == 1)     polyLine.setSelected(true); else     polyFill.setSelected(true);    val=appPrefs.getInt(DRAW_FACES_KEY,systemPrefs.getInt(DRAW_FACES_KEY,polyCullNone.isSelected() ? 0 : polyCullBack.isSelected() ? 1 : 2));    if (val == 0)     polyCullNone.setSelected(true); else     if (val == 1)     polyCullBack.setSelected(true); else     polyCullFront.setSelected(true);  } catch (  java.security.AccessControlException e) {  }}  }
class C{  public boolean schedulerJob(){  Tables.Row row;  final Collection<String> pks=new LinkedHashSet<String>();  final Date now=new Date();  try {    final Iterator<Tables.Row> plainIterator=this.tables.iterator(WorkTables.TABLE_API_NAME);    final Iterator<Tables.Row> mapIterator=Tables.orderBy(plainIterator,-1,WorkTables.TABLE_API_COL_DATE_LAST_EXEC).iterator();    while (mapIterator.hasNext()) {      row=mapIterator.next();      if (row == null)       continue;      final int stime=row.get(WorkTables.TABLE_API_COL_APICALL_SCHEDULE_TIME,0);      if (stime > 0) {        final Date date_next_exec=row.get(WorkTables.TABLE_API_COL_DATE_NEXT_EXEC,(Date)null);        if (date_next_exec != null) {          if (now.after(date_next_exec))           pks.add(UTF8.String(row.getPK()));        } else {          pks.add(UTF8.String(row.getPK()));        }      }      final String kind=row.get(WorkTables.TABLE_API_COL_APICALL_EVENT_KIND,"off");      if (!"off".equals(kind)) {        String action=row.get(WorkTables.TABLE_API_COL_APICALL_EVENT_ACTION,"startup");        if ("startup".equals(action)) {          if (startupAction) {            pks.add(UTF8.String(row.getPK()));            if ("once".equals(kind)) {              row.put(WorkTables.TABLE_API_COL_APICALL_EVENT_KIND,"off");              sb.tables.update(WorkTables.TABLE_API_NAME,row);            }          }        } else         try {          SimpleDateFormat dateFormat=new SimpleDateFormat("yyyyMMddHHmm");          long d=dateFormat.parse(dateFormat.format(new Date()).substring(0,8) + action).getTime();          long cycle=getThread(SwitchboardConstants.CLEANUP).getBusySleep();          if (d < System.currentTimeMillis() && System.currentTimeMillis() - d < cycle) {            pks.add(UTF8.String(row.getPK()));            if ("once".equals(kind)) {              row.put(WorkTables.TABLE_API_COL_APICALL_EVENT_KIND,"off");              row.put(WorkTables.TABLE_API_COL_DATE_NEXT_EXEC,"");              sb.tables.update(WorkTables.TABLE_API_NAME,row);            }          }        } catch (        final ParseException e) {        }      }    }  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }  startupAction=false;  final Map<String,Integer> callResult=this.tables.execAPICalls("localhost",getLocalPort(),pks,getConfig(SwitchboardConstants.ADMIN_ACCOUNT_USER_NAME,"admin"),getConfig(SwitchboardConstants.ADMIN_ACCOUNT_B64MD5,""));  for (  final Map.Entry<String,Integer> call : callResult.entrySet()) {    this.log.info("Scheduler executed api call, response " + call.getValue() + ": "+ call.getKey());  }  return pks.size() > 0;}  }
class C{  public void seal(){synchronized (lock) {    sealed=true;  }}  }
class C{  @Override public void attributeRemoved(HttpSessionBindingEvent event){  log("attributeRemoved('" + event.getSession().getId() + "', '"+ event.getName()+ "', '"+ event.getValue()+ "')");}  }
class C{  public void logUnusedParameters(){  if (hasUnusedParameters()) {    LoggingUtil.warning("The following parameters were not processed: " + parameters);  }}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.ELEMENT_REFERENCE_EXPRESSION;}  }
class C{  public TrafficChannelManager(ChannelModel channelModel,ChannelProcessingManager channelProcessingManager,DecodeConfiguration decodeConfiguration,RecordConfiguration recordConfiguration,String system,String site,String aliasListName,long trafficChannelTimeout,int trafficChannelPoolSize){  mChannelModel=channelModel;  mChannelProcessingManager=channelProcessingManager;  mDecodeConfiguration=decodeConfiguration;  mRecordConfiguration=recordConfiguration;  mSystem=system;  mSite=site;  mAliasListName=aliasListName;  mTrafficChannelPoolMaximumSize=trafficChannelPoolSize;}  }
class C{  public String toVectorPath(){  return toVectorPath(component,category,target);}  }
class C{  public static void cursorRowToContentValues(Cursor cursor,ContentValues values){  AbstractWindowedCursor awc=(cursor instanceof AbstractWindowedCursor) ? (AbstractWindowedCursor)cursor : null;  String[] columns=cursor.getColumnNames();  int length=columns.length;  for (int i=0; i < length; i++) {    if (awc != null && awc.isBlob(i)) {      values.put(columns[i],cursor.getBlob(i));    } else {      values.put(columns[i],cursor.getString(i));    }  }}  }
class C{  final long fn(long v,long x){  return v + x;}  }
class C{  public SeaGlassSynthPainterImpl(SeaGlassStyle style){  this.style=style;}  }
class C{  public static final Builder builder(){  return new VmInstanceType.Builder();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.806 -0500",hash_original_method="77FA36706319170F1442C426C0507BB4",hash_generated_method="1CB38EB5AED1A18DF23CAF51879B8B68") public boolean deleteEntry(BasicPoolEntry entry){  final boolean found=freeEntries.remove(entry);  if (found)   numEntries--;  return found;}  }
class C{  @Override protected void initData(){}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  public String toString(){  return super.toString() + " [wrapping " + listener.toString()+ "]";}  }
class C{  public void incProducedCountForItem(String item,int count){  itemCounter.incProducedForItem(item,count);}  }
class C{  private static int hashIntArray(int[] oid){  int intHash=0;  for (int i=0; i < oid.length && i < 4; i++) {    intHash+=oid[i] << (8 * i);  }  return intHash & 0x7FFFFFFF;}  }
class C{  public double entropy(int g,int lag){  double h=0.0;  int n=cases.length - lag;  double ln2=Math.log(2.0);  int n0=0;  for (int i=0; i < n; i++) {    if (cases[i + lag][g] == 0) {      n0++;    }  }  double p;  if (n0 == 0 || n0 == n) {    return h;  } else {    p=(double)n0 / (double)n;    h=-(p * Math.log(p) + (1.0 - p) * Math.log(1.0 - p)) / ln2;  }  return h;}  }
class C{  public TColor lighten(float step){  return setBrightness(hsv[2] + step);}  }
class C{  protected ExemptionMechanism(ExemptionMechanismSpi exmechSpi,Provider provider,String mechanism){  this.exmechSpi=exmechSpi;  this.provider=provider;  this.mechanism=mechanism;}  }
class C{  public static void error(int windowNo,Component comp,String adMessage){  error(windowNo,comp,adMessage,null);}  }
class C{  private static void mouseCallback(long win,int button,int action,int mods){  if (action == GLFW_PRESS) {    System.out.println("Pressed!");  }}  }
class C{  public boolean isDropShip(){  Object oo=get_Value(COLUMNNAME_IsDropShip);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void capacity(int minCap){  counters.ensureCapacity(minCap);  while (counters.size() < minCap)   counters.add(0);}  }
class C{  public boolean isZombie(Player player){  return zombies.contains(player.getUniqueId());}  }
class C{  @Deprecated static double allValuesIDW(SpatialGrid sg,double xCoord,double yCoord,double exp){  double xDif=(xCoord - sg.getXmin()) % sg.getResolution();  double yDif=(yCoord - sg.getYmin()) % sg.getResolution();  if (xDif == 0 && yDif == 0) {    return sg.getValue(xCoord,yCoord);  }  double distanceSum=0;  double currentWeight=1;  double weightSum=0;  for (double y=sg.getYmin(); y <= sg.getYmax(); y+=sg.getResolution()) {    for (double x=sg.getXmin(); x <= sg.getXmax(); x+=sg.getResolution()) {      currentWeight=Math.pow(distance(x,y,xCoord,yCoord),exp);      distanceSum+=sg.getValue(x,y) / currentWeight;      weightSum+=1 / currentWeight;    }  }  return distanceSum / weightSum;}  }
class C{  private void checkQueryPlan(Connection conn,String sql,String search) throws SQLException {  try (Statement s=conn.createStatement()){    try (ResultSet r=s.executeQuery("EXPLAIN ANALYZE " + sql)){      assertTrue(r.next());      String plan=r.getString(1);      assertTrue("Execution plan for '" + sql + "' query should contain '"+ search+ "'",plan.contains(search));    }   } }  }
class C{  public static String unqualify(String qualifiedName,char separator){  return qualifiedName.substring(qualifiedName.lastIndexOf(separator) + 1);}  }
class C{  public static final boolean isTokenChar(char c){  if (isAlphaDigit(c))   return true; else switch (c) {case '-':case '.':case '!':case '%':case '*':case '_':case '+':case '`':case '\'':case '~':    return true;default :  return false;}}  }
class C{  public boolean isUnmappable(){  return this.type == TYPE_UNMAPPABLE_CHAR;}  }
class C{  public static java.sql.Date clearTime(final java.sql.Date self){  Calendar calendar=Calendar.getInstance();  calendar.setTime(self);  clearTimeCommon(calendar);  self.setTime(calendar.getTime().getTime());  return self;}  }
class C{  public void clear(){  bitset.clear();  numberOfAddedElements=0;}  }
class C{  private static void addFormOmittedMessage(FacesContext context,UIComponent component){  String key=MessageUtils.MISSING_FORM_ERROR;  Object[] parameters=new Object[]{component.getClientId(context)};  boolean missingFormReported=false;  FacesMessage message=MessageUtils.getExceptionMessage(key,parameters);  List<FacesMessage> messages=context.getMessageList();  for (  FacesMessage item : messages) {    if (item.getDetail().equals(message.getDetail())) {      missingFormReported=true;      break;    }  }  if (!missingFormReported) {    message.setSeverity(FacesMessage.SEVERITY_WARN);    context.addMessage(null,message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.553 -0400",hash_original_method="B80EC25530CA78E81C76AB2BDDD2D797",hash_generated_method="5DC0ED740025801AE369B5F9914B9740") public SimpleArrayMap(SimpleArrayMap map){  this();  if (map != null) {    putAll(map);  }}  }
class C{  public AST process(AST t){  List l=new ArrayList();  traverse((GroovySourceAST)t,l,null);  Iterator itr=l.iterator();  if (itr.hasNext()) {    itr.next();  }  traverse((GroovySourceAST)t,null,itr);  return t;}  }
class C{  public void push(Item item){  if (n == a.length)   resize(2 * a.length);  a[n++]=item;}  }
class C{  static public void warning(boolean assertion,String str){  if (showWarnings && !assertion) {    System.out.println("warning : " + str);  }}  }
class C{  public CategoryAxis3D(){  this(null);}  }
class C{  protected <V>RunnableScheduledFuture<V> decorateTask(Callable<V> callable,RunnableScheduledFuture<V> task){  return task;}  }
class C{  @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1) private void updateNFCStatusDisplay(){  final NfcManager nfcManager=(NfcManager)getActivity().getSystemService(Context.NFC_SERVICE);  final NfcAdapter adapter=nfcManager.getDefaultAdapter();  nfc.setText(Boolean.toString(adapter != null && adapter.isEnabled()));}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public VOParameterOption(String optionId,String optionDescription,String paramDefId){  this.optionId=optionId;  this.optionDescription=optionDescription;  this.paramDefId=paramDefId;}  }
class C{  @Override void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  if (length != 4) {    throw new StunException("length invalid");  }  lifetime=((attributeValue[offset] << 24) & 0xff000000) + ((attributeValue[offset + 1] << 16) & 0x00ff0000) + ((attributeValue[offset + 2] << 8) & 0x0000ff00)+ (attributeValue[offset + 3] & 0x000000ff);}  }
class C{  public void populateArtifactDetails(final Long baseSwModuleId,final String swModuleName){  if (!readOnly) {    if (Strings.isNullOrEmpty(swModuleName)) {      setTitleOfLayoutHeader();    } else {      titleOfArtifactDetails.setValue(HawkbitCommonUtil.getArtifactoryDetailsLabelId(swModuleName));      titleOfArtifactDetails.setContentMode(ContentMode.HTML);    }  }  final Map<String,Object> queryConfiguration;  if (baseSwModuleId != null) {    queryConfiguration=Maps.newHashMapWithExpectedSize(1);    queryConfiguration.put(SPUIDefinitions.BY_BASE_SOFTWARE_MODULE,baseSwModuleId);  } else {    queryConfiguration=Collections.emptyMap();  }  final LazyQueryContainer artifactContainer=getArtifactLazyQueryContainer(queryConfiguration);  artifactDetailsTable.setContainerDataSource(artifactContainer);  if (fullWindowMode && maxArtifactDetailsTable != null) {    maxArtifactDetailsTable.setContainerDataSource(artifactContainer);  }  setTableColumnDetails(artifactDetailsTable);}  }
class C{  public ImagePortrayal3D(Class c,String resourceName){  this(new ImageIcon(c.getResource(resourceName)));}  }
class C{  public static synchronized void installTimerMethodListener(MethodListener s){  int numListeners=timerMethodListeners.length;  MethodListener[] tmp=new MethodListener[numListeners + 1];  for (int i=0; i < numListeners; i++) {    tmp[i]=timerMethodListeners[i];  }  tmp[numListeners]=s;  timerMethodListeners=tmp;}  }
class C{  @Override public synchronized int nextInt(){  int lastint=counter;  counter++;  setLastInt(lastint);  return lastint;}  }
class C{  void onDescheduled(SchedulerFuture<?> fut){  assert fut != null;  schedFuts.remove(fut);}  }
class C{  public boolean equivalent(Object a,Object b){  return nodeToComponent.get(a) == nodeToComponent.get(b);}  }
class C{  public PDUByteBuffer(int commandId,int commandStatus,int sequenceNumber,CapacityPolicy capacityPolicy){  this(capacityPolicy);  append(commandId);  append(commandStatus);  append(sequenceNumber);  normalizeCommandLength();}  }
class C{  public boolean isSubAcctDim(){  Object oo=get_Value(COLUMNNAME_IsSubAcctDim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Bean @Autowired public AmqpSenderService amqpSenderServiceBean(final RabbitTemplate rabbitTemplate){  return new DefaultAmqpSenderService(rabbitTemplate);}  }
class C{  private Preconditions(){}  }
class C{  @Override public void free(Page buffer){}  }
class C{  public Geometry create(){  if (geometryFactory == null) {    throw new NullPointerException("GeometryFactory is not declared");  }  if (boundingBox == null || boundingBox.isNull()) {    throw new NullPointerException("Bounding Box is not declared");  }  if (numberPoints < 2) {    throw new IllegalStateException("Too few points");  }  Coordinate[] coords=new Coordinate[numberPoints];  double x=boundingBox.getMinX();  double dx=boundingBox.getMaxX() - x;  double y=boundingBox.getMinY();  double dy=boundingBox.getMaxY() - y;  for (int i=0; i < RUNS; i++) {switch (getGenerationAlgorithm()) {case VERT:      fillVert(x,dx,y,dy,coords,geometryFactory);    break;case HORZ:  fillHorz(x,dx,y,dy,coords,geometryFactory);break;case ARC:fillArc(x,dx,y,dy,coords,geometryFactory);break;default :throw new IllegalStateException("Invalid Alg. Specified");}LineString ls=geometryFactory.createLineString(coords);IsValidOp valid=new IsValidOp(ls);if (valid.isValid()) {return ls;}}return null;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public Matrix dctRows(boolean scale){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dctRows(scale);  return new Matrix(dm.toArray());}  }
class C{  public static ClassRepository make(String rawSig,GenericsFactory f){  return new ClassRepository(rawSig,f);}  }
class C{  public boolean isEditableNumeracion(String idDeposito){  if (TipoSignaturacion.SIGNATURACION_ASOCIADA_A_HUECO.getIdentificador() == _depositoDbEntity.getTipoSignaturacionDeposito(idDeposito))   return true;  return false;}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,int duration){  view.setRotationX(baseRotation);  view.setTranslationY(view.getHeight() / 3);  view.animate().setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).rotationX(0).translationY(0).start();}  }
class C{  public void updateLines(final Header newHdr) throws HeaderCardException {  Cursor<String,HeaderCard> j=newHdr.iterator();  while (j.hasNext()) {    HeaderCard nextHCard=j.next();    if (nextHCard.getKey().equals(COMMENT.key())) {      insertComment(nextHCard.getComment());    } else     if (nextHCard.getKey().equals(HISTORY.key())) {      insertHistory(nextHCard.getComment());    } else {      updateLine(nextHCard.getKey(),nextHCard);    }  }}  }
class C{  protected void uploadAndRegisterTestData(String s3KeyPrefix,List<ManifestFile> manifestFiles,List<String> directoryPaths) throws Exception {  uploadTestDataFilesToS3(s3KeyPrefix,manifestFiles,directoryPaths);  UploaderInputManifestDto uploaderInputManifestDto=getTestUploaderInputManifestDto();  uploaderInputManifestDto.setManifestFiles(manifestFiles);  S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=getTestS3FileTransferRequestParamsDto();  s3FileTransferRequestParamsDto.setS3KeyPrefix(s3KeyPrefix + "/");  BusinessObjectData businessObjectData=downloaderWebClient.preRegisterBusinessObjectData(uploaderInputManifestDto,StorageEntity.MANAGED_STORAGE,false);  BusinessObjectDataKey businessObjectDataKey=businessObjectDataHelper.getBusinessObjectDataKey(businessObjectData);  downloaderWebClient.addStorageFiles(businessObjectDataKey,uploaderInputManifestDto,s3FileTransferRequestParamsDto,StorageEntity.MANAGED_STORAGE);  downloaderWebClient.updateBusinessObjectDataStatus(businessObjectDataKey,BusinessObjectDataStatusEntity.VALID);  FileUtils.cleanDirectory(LOCAL_TEMP_PATH_INPUT.toFile());}  }
class C{  @Override public boolean shouldNotBeLogged(){  return false;}  }
class C{  public RootApplicationEvent(Object source){  super(source);}  }
class C{  public static Dcsd cs_scc(Dcs A){  int n, i, k, b, nb=0, top, xi[], pstack[], p[], r[], Ap[], ATp[], rcopy[], Blk[];  Dcs AT;  Dcsd D;  if (!Dcs_util.CS_CSC(A))   return (null);  n=A.n;  Ap=A.p;  D=Dcs_util.cs_dalloc(n,0);  AT=Dcs_transpose.cs_transpose(A,false);  xi=new int[2 * n + 1];  if (D == null || AT == null)   return (null);  Blk=xi;  rcopy=xi;  int rcopy_offset=n;  pstack=xi;  int pstack_offset=n;  p=D.p;  r=D.r;  ATp=AT.p;  top=n;  for (i=0; i < n; i++) {    if (!Dcs_util.CS_MARKED(Ap,i))     top=Dcs_dfs.cs_dfs(i,A,top,xi,0,pstack,pstack_offset,null,0);  }  for (i=0; i < n; i++)   Dcs_util.CS_MARK(Ap,i);  top=n;  nb=n;  for (k=0; k < n; k++) {    i=xi[k];    if (Dcs_util.CS_MARKED(ATp,i))     continue;    r[nb--]=top;    top=Dcs_dfs.cs_dfs(i,AT,top,p,0,pstack,pstack_offset,null,0);  }  r[nb]=0;  for (k=nb; k <= n; k++)   r[k - nb]=r[k];  D.nb=nb=n - nb;  for (b=0; b < nb; b++) {    for (k=r[b]; k < r[b + 1]; k++)     Blk[p[k]]=b;  }  for (b=0; b <= nb; b++)   rcopy[rcopy_offset + b]=r[b];  for (i=0; i < n; i++)   p[rcopy[rcopy_offset + Blk[i]]++]=i;  return D;}  }
class C{  public AssertionException(){  this("");}  }
class C{  public void doneButtonActionPerformed(){  if (editMode) {    editMode=false;    curNode=null;    addButton.setVisible(true);    editButton.setVisible(true);    deleteButton.setVisible(true);    doneButton.setVisible(true);    updateButton.setVisible(false);    cancelButton.setVisible(false);    nodeAddrField.setVisible(true);    nodeAddrStatic.setVisible(false);  }  if (changedNode) {    javax.swing.JOptionPane.showMessageDialog(this,rb.getString("Reminder1") + "\n" + rb.getString("Reminder2"),rb.getString("ReminderTitle"),javax.swing.JOptionPane.INFORMATION_MESSAGE);  }  setVisible(false);  dispose();}  }
class C{  public static void skip(InputStream is,long amount) throws IOException {  long remaining=amount;  long read;  while (remaining > 0 && (read=FileUtils.streamSkip(is,remaining)) > 0) {    remaining-=read;  }  if (remaining > 0) {    throw new EOFException();  }}  }
class C{  @Override void open(File dbFile) throws Exception {  this.open(dbFile,SQLiteOpenFlags.READWRITE | SQLiteOpenFlags.CREATE);}  }
class C{  public boolean isGreaterThan(Fiat other){  return compareTo(other) > 0;}  }
class C{  public XYSplineState(PlotRenderingInfo info){  super(info);  this.fillArea=new GeneralPath();  this.points=new ArrayList<Point2D>();}  }
class C{  public static int writeFloat(byte[] array,int offset,float v){  return writeInt(array,offset,Float.floatToIntBits(v));}  }
class C{  public void buildReport(String organizationId,VOReportResult result,boolean allSupplierReports) throws XPathExpressionException, ParserConfigurationException {  result.setServerTimeZone(DateConverter.getCurrentTimeZoneAsUTCString());  List<ReportResultData> reportData;  if (allSupplierReports) {    reportData=billingDao.retrieveSupplierBillingBySupplierId(organizationId);    encrypt(reportData);  } else {    reportData=billingDao.retrieveSupplierBillingData(organizationId);  }  ReportDataConverter converter=new ReportDataConverter(subscriptionDao);  converter.convertToXml(reportData,result.getData(),Collections.<String,String>emptyMap());}  }
class C{  protected S_LoopImpl(){  super();}  }
class C{  public void addAttribute(Object key,Object value){  keys.addElement(key);  data.addElement(value);}  }
class C{  protected void checkParameterSet(final ConfigGroup set){}  }
class C{  public void testOpsModeDistinct(){  InstanceManager.setProgrammerManager(new DebugProgrammerManager());  Programmer p=InstanceManager.getDefault(jmri.ProgrammerManager.class).getAddressedProgrammer(true,777);  Assert.assertTrue("different ops mode programmer",InstanceManager.getDefault(jmri.ProgrammerManager.class).getAddressedProgrammer(true,888) != p);  Assert.assertTrue("same ops mode programmer",InstanceManager.getDefault(jmri.ProgrammerManager.class).getAddressedProgrammer(true,777) == p);}  }
class C{  static RegisterOperand InsertALoadOffset(Instruction s,IR ir,Operator operator,TypeReference type,Operand reg2,int offset){  RegisterOperand regTarget=ir.regpool.makeTemp(type);  Instruction s2=ALoad.create(operator,regTarget,reg2,IRTools.IC(offset),null,null);  s.insertBefore(s2);  return regTarget.copyD2U();}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  private void append(int bit){  if (bit == 1) {    bits.set(numBits,true);  }  numBits+=1;  lastBitNum+=1;}  }
class C{  public int hashCode(){  return pattern.hashCode();}  }
class C{  public void reset(V source){  sourceMap.put(source,null);}  }
class C{  protected void drawItemLabel(Graphics2D g2,CategoryDataset data,int row,int column,CategoryPlot plot,CategoryItemLabelGenerator generator,Rectangle2D bar,boolean negative){  String label=generator.generateLabel(data,row,column);  if (label == null) {    return;  }  Font labelFont=getItemLabelFont(row,column);  g2.setFont(labelFont);  Paint paint=getItemLabelPaint(row,column);  g2.setPaint(paint);  ItemLabelPosition position;  if (!negative) {    position=getPositiveItemLabelPosition(row,column);  } else {    position=getNegativeItemLabelPosition(row,column);  }  Point2D anchorPoint=calculateLabelAnchorPoint(position.getItemLabelAnchor(),bar,plot.getOrientation());  if (isInternalAnchor(position.getItemLabelAnchor())) {    Shape bounds=TextUtilities.calculateRotatedStringBounds(label,g2,(float)anchorPoint.getX(),(float)anchorPoint.getY(),position.getTextAnchor(),position.getAngle(),position.getRotationAnchor());    if (bounds != null) {      if (!bar.contains(bounds.getBounds2D())) {        if (!negative) {          position=getPositiveItemLabelPositionFallback();        } else {          position=getNegativeItemLabelPositionFallback();        }        if (position != null) {          anchorPoint=calculateLabelAnchorPoint(position.getItemLabelAnchor(),bar,plot.getOrientation());        }      }    }  }  if (position != null) {    TextUtilities.drawRotatedString(label,g2,(float)anchorPoint.getX(),(float)anchorPoint.getY(),position.getTextAnchor(),position.getAngle(),position.getRotationAnchor());  }}  }
class C{  public CaseInsensitiveHashSet(int expected,float f){  super(expected,f,CaseInsensitiveHashingStrategy.INSTANCE);}  }
class C{  public void println(java.io.PrintStream ps){  Printer.print(this,new java.io.PrintWriter(ps,true));}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  @Override protected String createForeignKeyConstraintName(EntitySpec entitySpec,NodeSpec nodeSpec,RelationSpec relationSpec){  for (  StaticRelation staticRel : renamedForeignKeyConstraints.keySet()) {    if (staticRel.matches(nodeSpec,relationSpec.getEntitySpec())) {      return renamedForeignKeyConstraints.get(staticRel);    }  }  return "fk_" + removePrefix(entitySpec.getTableName()) + "_"+ removePrefix(relationSpec.getEntitySpec().getTableName());}  }
class C{  final public int nextCashFlowIndex(final Leg cashFlows,Date settlement){  if (settlement.isNull()) {    settlement=new Settings().evaluationDate();  }  for (int i=0; i < cashFlows.size(); ++i) {    if (!cashFlows.get(i).hasOccurred(settlement))     return i;  }  return cashFlows.size();}  }
class C{  public void combos(){  Combo.popular(cbStatus,"Inativo","Aberto","Cancelado","Realizado");  Combo.popular(cbInstituicao,ControleDAO.getBanco().getInstituicaoDAO().combo());}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.minorTickMarkStroke=SerialUtilities.readStroke(stream);  this.minorTickMarkPaint=SerialUtilities.readPaint(stream);}  }
class C{  protected static String defaultNameFilename(){  return fileLocation + nameFileName;}  }
class C{  public static List<Element> selectElements(XPathExpression expr,Node context){  try {    List<Element> elements=new ArrayList<Element>();    NodeList result=(NodeList)expr.evaluate(context,XPathConstants.NODESET);    for (int i=0; i < result.getLength(); i++) {      Node item=result.item(i);      if (item instanceof Element) {        elements.add((Element)item);      } else {        throw new XmlException("Not an element: " + item);      }    }    return elements;  } catch (  XPathExpressionException e) {    throw new XmlException(e);  }}  }
class C{  public void logVelocityMessage(int level,String message){}  }
class C{  public static String inspect(Object self){  return InvokerHelper.inspect(self);}  }
class C{  public CGraphNodeTaggedFilter(final Set<CTag> tags){  m_tags=Preconditions.checkNotNull(tags,"IE02112: Tags argument can not be null");}  }
class C{  public static double z(final String format,final double value){  final double val1=value * 100;  final double val2=Math.round(val1);  return val2 / 100;}  }
class C{  @SuppressWarnings("rawtypes") public void callReplicationSvc(StorageSystem storage,String methodName,CIMArgument[] inArgs,CIMArgument[] outArgs) throws Exception {  CIMObjectPath replicationSvcPath=_cimPath.getReplicationSvcPath(storage);  invokeMethod(storage,replicationSvcPath,methodName,inArgs,outArgs);}  }
class C{  public String text(){  StringBuilder sb=new StringBuilder();  for (  Node node : nodes) {    sb.append(node.getTextContent());  }  return sb.toString();}  }
class C{  @SuppressWarnings("try") private void doOptimize(LIR lir){  try (Indent indent=Debug.logAndIndent("eliminate redundant moves")){    callerSaveRegs=frameMap.getRegisterConfig().getCallerSaveRegisters();    initBlockData(lir);    eligibleRegs=new int[numRegs];    Arrays.fill(eligibleRegs,-1);    for (    Register reg : frameMap.getRegisterConfig().getAllocatableRegisters()) {      if (reg.number < numRegs) {        eligibleRegs[reg.number]=reg.number;      }    }    if (!solveDataFlow(lir)) {      return;    }    eliminateMoves(lir);  } }  }
class C{  private void startUp() throws Exception {  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("partitioned");  igfsCfg.setMetaCacheName("replicated");  igfsCfg.setName("igfs");  igfsCfg.setBlockSize(512 * 1024);  igfsCfg.setDefaultMode(PRIMARY);  IgfsIpcEndpointConfiguration endpointCfg=new IgfsIpcEndpointConfiguration();  endpointCfg.setType(IgfsIpcEndpointType.TCP);  endpointCfg.setPort(10500);  igfsCfg.setIpcEndpointConfiguration(endpointCfg);  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setName("partitioned");  cacheCfg.setCacheMode(PARTITIONED);  cacheCfg.setNearConfiguration(null);  cacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  cacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));  cacheCfg.setBackups(0);  cacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("replicated");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName("igfs-grid");  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(metaCacheCfg,cacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  cfg.setConnectorConfiguration(null);  Ignite g=G.start(cfg);  igfs=(IgfsEx)g.fileSystem("igfs");  igfs.globalSampling(sampling);  fs=fileSystem();}  }
class C{  public InMemoryConnectionStore(final int capacity,final long threshold){  this(capacity,threshold,null);}  }
class C{  public BoldAction(){  super("font-bold");}  }
class C{  public void delete(URI taskId){  client.postURI(String.class,client.uriBuilder(getIdUrl() + "/delete").build(taskId));}  }
class C{  public boolean isMultiTouch(){  return impl.isMultiTouch();}  }
class C{  @Override protected void overrideIdentifierData(EmaApiIdentifierType identifier) throws EmaException {}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.416 -0500",hash_original_method="352742C76D82997D1FD2B39635FE380F",hash_generated_method="E11AF9D090D6F2FE40004EC6207EADAF") private void raiseErrorEvent(int dialogTimeoutError){  SIPDialogErrorEvent newErrorEvent;  Iterator<SIPDialogEventListener> listenerIterator;  SIPDialogEventListener nextListener;  newErrorEvent=new SIPDialogErrorEvent(this,dialogTimeoutError);synchronized (eventListeners) {    listenerIterator=eventListeners.iterator();    while (listenerIterator.hasNext()) {      nextListener=(SIPDialogEventListener)listenerIterator.next();      nextListener.dialogErrorEvent(newErrorEvent);    }  }  eventListeners.clear();  if (dialogTimeoutError != SIPDialogErrorEvent.DIALOG_ACK_NOT_SENT_TIMEOUT && dialogTimeoutError != SIPDialogErrorEvent.DIALOG_ACK_NOT_RECEIVED_TIMEOUT && dialogTimeoutError != SIPDialogErrorEvent.DIALOG_REINVITE_TIMEOUT) {    delete();  }  stopTimer();}  }
class C{  static Expression find(final boolean b,final List<Expression> xs){  for (  final Expression $ : xs)   if (iz.booleanLiteral($) && b == az.booleanLiteral($).booleanValue())   return $;  return null;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:24.576 -0500",hash_original_method="2824AA033EB3CD5BF749E2296CB51BE8",hash_generated_method="C673E9B57A7025273AA936A51CDE4468") public Rect(){}  }
class C{  protected Class<? extends VH> viewHolderType(){  return ((Class<? extends VH>)((ParameterizedType)getClass().getGenericSuperclass()).getActualTypeArguments()[1]);}  }
class C{  public void createPictScenario03_2() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-06-30 00:00:00");  String supplierAdminId="Pict03_2Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict03_2SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict03_2Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_ASYNC_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ASYNC_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC03_2Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC03_2CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetailsTemp=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_03_2",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,example2TechService,supplMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceDetailsTemp,TestPriceModel.EXAMPLE_PICT03_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_03_2",serviceDetails,customerAdmin,role);  long usageStartTime=DateTimeHandling.calculateMillis("2013-07-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  subDetails=subscrSetup.completeAsyncSubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  long userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-02 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2013-07-02 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-02 13:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-07-02 14:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-22 10:10:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-07-22 10:20:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-08-01 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-11-01 13:00:02"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetailsTemp);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:03"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_03_2",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_03_2",customer);}  }
class C{  public GFElement add(GFElement addend) throws RuntimeException {  GF2nONBElement result=new GF2nONBElement(this);  result.addToThis(addend);  return result;}  }
class C{  public BooleanMemberValue(ConstPool cp){  super('Z',cp);  setValue(false);}  }
class C{  public boolean index(Engine.Index index){  ensureWriteAllowed(index);  markLastWrite(index);  index=indexingService.preIndex(index);  final boolean created;  try {    if (logger.isTraceEnabled()) {      logger.trace("index [{}][{}]{}",index.type(),index.id(),index.docs());    }    created=engine().index(index);    index.endTime(System.nanoTime());  } catch (  Throwable ex) {    indexingService.postIndex(index,ex);    throw ex;  }  indexingService.postIndex(index);  return created;}  }
class C{  @Around("execution(* org.yes.cart.service.domain.impl.ManagerServiceImpl.create(..))") public Object doSetPassword(final ProceedingJoinPoint pjp) throws Throwable {  setPassword((Manager)pjp.getArgs()[0]);  return pjp.proceed();}  }
class C{  public void testInvalidService() throws Exception {  String resdata="Response Data";  Response response=Response.newBuilder().setStrData(resdata).build();  socketRpcServer.registerService(new FakeServiceImpl(REQUEST).withResponse(response));  FakeSocket socket=new FakeSocket(false).withRequest(createRpcRequest("BadService","",REQUEST.toByteString()));  runHandler(socket);  assertFalse(socket.getResponse().getCallback());  assertTrue(socket.getResponse().hasError());  assertEquals(ErrorReason.SERVICE_NOT_FOUND,socket.getResponse().getErrorReason());}  }
class C{  public static final Criterion not(List<Criterion> criteria){  return new ConjunctionCriterion(Conjunction.NOR,criteria);}  }
class C{  public static boolean hasMandatoryProperties(List<FDPropertyDecl> decls){  for (  FDPropertyDecl decl : decls) {    if (isMandatory(decl))     return true;  }  return false;}  }
class C{  public static void processAnOperator(Stack<Integer> operandStack,Stack<Character> operatorStack){  char op=operatorStack.pop();  int op1=operandStack.pop();  int op2=operandStack.pop();  if (op == '+')   operandStack.push(op2 + op1); else   if (op == '-')   operandStack.push(op2 - op1); else   if (op == '*')   operandStack.push(op2 * op1); else   if (op == '/')   operandStack.push(op2 / op1); else   if (op == '^')   operandStack.push((int)Math.pow(op2,op1)); else   if (op == '%')   operandStack.push(op2 % op1);}  }
class C{  public static void writeXml(Serializable serializable,OutputStream output) throws IOException {  TransportFormat.XML.writeSerializableTo(serializable,output);}  }
class C{  public boolean canDrop(){  return !system;}  }
class C{  public boolean expired(){  return System.currentTimeMillis() - time > DFLT_EXPIRATION_TIMEOUT;}  }
class C{  public void findAddress(View v){  animateAddFab(false);  mContactAddressMapper.startContactPicker(PICK_CONTACT_REQUEST);}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  protected String insertFrame(String what){  int first=what.indexOf('#');  int last=what.lastIndexOf('#');  if ((first != -1) && (last - first > 0)) {    String prefix=what.substring(0,first);    int count=last - first + 1;    String suffix=what.substring(last + 1);    return prefix + nf(frameCount,count) + suffix;  }  return what;}  }
class C{  private void runTests(boolean multi,String tcParams,String clusterFilter,String destinationFilter) throws Exception, InterruptedException {  assertClientsConnectedToThreeBrokers();  stopServer(2);  Thread.sleep(5000);  assertClientsConnectedToTwoBrokers();  restartServer(2);  Thread.sleep(5000);  assertClientsConnectedToThreeBrokers();}  }
class C{  public final boolean isPrivate(){  return Modifier.isPrivate(getModifiers());}  }
class C{  public void revertBackupFile(String name){  File file=findFile(name);  if (file == null) {    log.info("No " + name + " file to revert");  } else {    String backupName=backupFileName(file.getAbsolutePath());    File backupFile=findFile(backupName);    if (backupFile != null) {      log.info("No " + backupName + " backup file to revert");      if (file.delete()) {        log.debug("deleted original file " + name);      }      if (backupFile.renameTo(new File(name))) {        log.debug("created original file " + name);      } else {        log.error("could not create original file " + name);      }    }  }}  }
class C{  public DLSet(){}  }
class C{  public static void writeToFile(String content,String filePath) throws IOException {  writeToFile(content,new File(filePath));}  }
class C{  public final void testGetY(){  DSAPublicKeySpec dpks=new DSAPublicKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(1,dpks.getY().intValue());}  }
class C{  void extras(){}  }
class C{  public int computeMaxGene(int position,int[] genome){  int phenotype=phenotype(position,genome);  if (phenotype == GENE_OUTPUT)   return numInputs + numNodes - 1;  if (phenotype == GENE_FUNCTION) {    return numFunctions - 1;  }  return nodeNumber(position,genome) - 1;}  }
class C{  private static int[] validateCoordinates(int x1,int y1,int x2,int y2){  if ((x1 > x2) | (y1 < y2)) {    if (x1 > x2) {      final int temp=x1;      x1=x2;      x2=temp;      LogWriter.writeLog("x1 > x2, coordinates were swapped to validate");    }    if (y1 < y2) {      final int temp=y1;      y1=y2;      y2=temp;      LogWriter.writeLog("y1 < y2, coordinates were swapped to validate");    }  }  return new int[]{x1,y1,x2,y2};}  }
class C{  public static ServiceCompatibilityException convertToApi(org.oscm.internal.types.exception.ServiceCompatibilityException oldEx){  org.oscm.internal.types.exception.beans.ApplicationExceptionBean bean=getFaultInfo(oldEx);  ApplicationExceptionBean v13Bean=convertBeanToApi(bean,ApplicationExceptionBean.class);  ServiceCompatibilityException.Reason v13Reason=null;  if (bean != null) {    v13Reason=EnumConverter.convert(oldEx.getReason(),ServiceCompatibilityException.Reason.class);  }  ServiceCompatibilityException newEx=null;  String message=getExceptionMessage(oldEx);  if (v13Reason == null) {    newEx=new ServiceCompatibilityException(message,v13Bean);  } else {    newEx=new ServiceCompatibilityException(message,v13Reason);    newEx.setMessageKey(v13Bean.getMessageKey());    newEx.setMessageParams(v13Bean.getMessageParams());    newEx.setId(v13Bean.getId());    newEx.setCauseStackTrace(v13Bean.getCauseStackTrace());  }  newEx.setStackTrace(oldEx.getStackTrace());  return newEx;}  }
class C{  public int boundCheck(Substitution substitution,TypeBinding argumentType){  if (argumentType == TypeBinding.NULL || argumentType == this) {    return TypeConstants.OK;  }  boolean hasSubstitution=substitution != null;  if (!(argumentType instanceof ReferenceBinding || argumentType.isArrayType()))   return TypeConstants.MISMATCH;  if (this.superclass == null)   return TypeConstants.OK;  if (argumentType.kind() == Binding.WILDCARD_TYPE) {    WildcardBinding wildcard=(WildcardBinding)argumentType;switch (wildcard.boundKind) {case Wildcard.EXTENDS:      TypeBinding wildcardBound=wildcard.bound;    if (wildcardBound == this)     return TypeConstants.OK;  boolean isArrayBound=wildcardBound.isArrayType();if (!wildcardBound.isInterface()) {  TypeBinding substitutedSuperType=hasSubstitution ? Scope.substitute(substitution,this.superclass) : this.superclass;  if (substitutedSuperType.id != TypeIds.T_JavaLangObject) {    if (isArrayBound) {      if (!wildcardBound.isCompatibleWith(substitutedSuperType))       return TypeConstants.MISMATCH;    } else {      TypeBinding match=wildcardBound.findSuperTypeOriginatingFrom(substitutedSuperType);      if (match != null) {        if (substitutedSuperType.isProvablyDistinct(match)) {          return TypeConstants.MISMATCH;        }      } else {        match=substitutedSuperType.findSuperTypeOriginatingFrom(wildcardBound);        if (match != null) {          if (match.isProvablyDistinct(wildcardBound)) {            return TypeConstants.MISMATCH;          }        } else {          if (!wildcardBound.isTypeVariable() && !substitutedSuperType.isTypeVariable()) {            return TypeConstants.MISMATCH;          }        }      }    }  }}boolean mustImplement=isArrayBound || ((ReferenceBinding)wildcardBound).isFinal();for (int i=0, length=this.superInterfaces.length; i < length; i++) {TypeBinding substitutedSuperType=hasSubstitution ? Scope.substitute(substitution,this.superInterfaces[i]) : this.superInterfaces[i];if (isArrayBound) {if (!wildcardBound.isCompatibleWith(substitutedSuperType)) return TypeConstants.MISMATCH;} else {TypeBinding match=wildcardBound.findSuperTypeOriginatingFrom(substitutedSuperType);if (match != null) {  if (substitutedSuperType.isProvablyDistinct(match)) {    return TypeConstants.MISMATCH;  }} else if (mustImplement) {  return TypeConstants.MISMATCH;}}}break;case Wildcard.SUPER:if (wildcard.bound.isTypeVariable() && ((TypeVariableBinding)wildcard.bound).superclass.id == TypeIds.T_JavaLangObject) break;return boundCheck(substitution,wildcard.bound);case Wildcard.UNBOUND:break;}return TypeConstants.OK;}boolean unchecked=false;if (this.superclass.id != TypeIds.T_JavaLangObject) {TypeBinding substitutedSuperType=hasSubstitution ? Scope.substitute(substitution,this.superclass) : this.superclass;if (substitutedSuperType != argumentType) {if (!argumentType.isCompatibleWith(substitutedSuperType)) {return TypeConstants.MISMATCH;}TypeBinding match=argumentType.findSuperTypeOriginatingFrom(substitutedSuperType);if (match != null) {if (match.isRawType() && substitutedSuperType.isBoundParameterizedType()) unchecked=true;}}}for (int i=0, length=this.superInterfaces.length; i < length; i++) {TypeBinding substitutedSuperType=hasSubstitution ? Scope.substitute(substitution,this.superInterfaces[i]) : this.superInterfaces[i];if (substitutedSuperType != argumentType) {if (!argumentType.isCompatibleWith(substitutedSuperType)) {return TypeConstants.MISMATCH;}TypeBinding match=argumentType.findSuperTypeOriginatingFrom(substitutedSuperType);if (match != null) {if (match.isRawType() && substitutedSuperType.isBoundParameterizedType()) unchecked=true;}}}return unchecked ? TypeConstants.UNCHECKED : TypeConstants.OK;}  }
class C{  public void update(){  if (optimizer == null) {    return;  }  optimizer.updateLocation(this);  for (int i=0; i < this.connections.size(); ) {    Connection con=this.connections.get(i);    NetworkInterface anotherInterface=con.getOtherInterface(this);    assert con.isUp() : "Connection " + con + " was down!";    if (!isWithinRange(anotherInterface)) {      disconnect(con,anotherInterface);      connections.remove(i);    } else {      i++;    }  }  Collection<NetworkInterface> interfaces=optimizer.getNearInterfaces(this);  for (  NetworkInterface i : interfaces)   connect(i);  numberOfTransmissions=0;  int numberOfActive=1;  for (  Connection con : this.connections) {    if (con.getMessage() != null) {      numberOfTransmissions++;    }    if (((InterferenceLimitedInterface)con.getOtherInterface(this)).isTransferring() == true) {      numberOfActive++;    }  }  int ntrans=numberOfTransmissions;  if (numberOfTransmissions < 1)   ntrans=1;  if (numberOfActive < 2)   numberOfActive=2;  currentTransmitSpeed=(int)Math.floor((double)transmitSpeed / (Math.sqrt((1.0 * numberOfActive) * Math.log(1.0 * numberOfActive))) / ntrans);  for (  Connection con : getConnections()) {    con.update();  }}  }
class C{  public static String encodePathParam(final String pathParam,final String charset) throws UnsupportedEncodingException {  return encodePathSegment(pathParam,charset);}  }
class C{  private static int determineLegacyWrapperType(Context context,String prefFileName,String keystoreAlias){  int oldSdkInt=readOldSdkInt(context,prefFileName,keystoreAlias);  if (oldSdkInt == 0) {    return WRAPPER_TYPE_INVALID;  } else   if (oldSdkInt > 0 && oldSdkInt < Build.VERSION_CODES.JELLY_BEAN_MR2) {    return WRAPPER_TYPE_OBFUSCATED;  } else   if (LegacyAndroidKeystoreTester.hasAlreadyPassedTest(context,keystoreAlias,oldSdkInt,getSharedPreferences(context,prefFileName))) {    return WRAPPER_TYPE_RSA_PKCS1;  }  return WRAPPER_TYPE_OBFUSCATED;}  }
class C{  public static String welcomeMessage(){  StringBuilder sb=new StringBuilder();  sb.append("\nWelcome to Apache SystemML!\n");  return sb.toString();}  }
class C{  public static int adjustAlpha(@ColorInt int color,@IntRange(from=0,to=255) int alpha){  return (alpha << 24) | (color & 0x00ffffff);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  } else   if (obj instanceof PreciseDurationField) {    PreciseDurationField other=(PreciseDurationField)obj;    return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);  }  return false;}  }
class C{  @Override public boolean canChildScrollUp(){  final ListView listView=getListView();  if (listView.getVisibility() == View.VISIBLE) {    return canListViewScrollUp(listView);  } else {    return false;  }}  }
class C{  public final CharSequence head(CharSequence csq){  return csq.subSequence(0,index);}  }
class C{  public void print(NumberFormat format,int width){  print(new PrintWriter(System.out,true),format,width);}  }
class C{  public static double random(){  return random.nextDouble();}  }
class C{  public Vertex parseFunctionByteCode(Vertex function,BinaryData data,Network network) throws IOException {  if (data.getCache() != null) {    return (Vertex)data.getCache();  }  BinaryData bytes=data;  if (!function.isTemporary()) {    bytes=(BinaryData)network.findData(data);    if (bytes == null) {      bytes=data;    }  }  ByteArrayInputStream byteStream=new ByteArrayInputStream(bytes.getBytes());  DataInputStream dataStream=new DataInputStream(byteStream);  Vertex cache=network.createTemporyVertex();  cache.setName(function.getName());  cache.addRelationship(Primitive.INSTANTIATION,Primitive.FUNCTION);  cache.addRelationship(Primitive.OPERATOR,new Primitive(function.getName()));  parseArgumentsByteCode(cache,dataStream,network.createVertex(Primitive.DO),network);  data.setCache(cache);  bytes.setCache(cache);  return cache;}  }
class C{  public String registerWithGoogle(){  if (isPlayServicesInstalled()) {    registrationId=Preference.getString(getContext(),Constants.GCM_REG_ID);    if (registrationId == null) {      try {        if (cloudMessaging == null) {          cloudMessaging=GoogleCloudMessaging.getInstance(getContext());        }        registrationId=cloudMessaging.register(getGoogleProjectNumber());      } catch (      IOException ex) {        Log.e(TAG,"Error while registering with GCM ",ex);        clearData(getContext());        displayConnectionError();      }    }  } else {    if (Constants.DEBUG_MODE_ENABLED) {      Log.d(TAG,"Play services not installed");    }  }  return registrationId;}  }
class C{  public boolean correctCriticals(StringBuffer buff){  Vector<Mounted> unallocated=new Vector<Mounted>();  Vector<Serializable> allocation=new Vector<Serializable>();  Vector<Integer> heatSinks=new Vector<Integer>();  checkCriticalSlotsForEquipment(aero,unallocated,allocation,heatSinks);  boolean correct=true;  if (!unallocated.isEmpty()) {    buff.append("Unallocated Equipment:\n");    for (    Mounted mount : unallocated) {      buff.append(mount.getType().getInternalName()).append("\n");    }    correct=false;  }  if (!allocation.isEmpty()) {    buff.append("Allocated Equipment:\n");    for (Enumeration<Serializable> serializableEnum=allocation.elements(); serializableEnum.hasMoreElements(); ) {      Mounted mount=(Mounted)serializableEnum.nextElement();      int needCrits=((Integer)serializableEnum.nextElement()).intValue();      int aktCrits=((Integer)serializableEnum.nextElement()).intValue();      buff.append(mount.getType().getInternalName()).append(" has ").append(needCrits).append(" Slots, but ").append(aktCrits).append(" Slots are allocated!").append("\n");    }    correct=false;  }  int numWeapons[]=new int[aero.locations()];  int numBombs=0;  for (  Mounted m : aero.getWeaponList()) {    if (m.getLocation() == Entity.LOC_NONE)     continue;    WeaponType wt=(WeaponType)m.getType();    boolean canHaveSpecialMunitions=((wt.getAmmoType() == AmmoType.T_MML) || (wt.getAmmoType() == AmmoType.T_ATM) || (wt.getAmmoType() == AmmoType.T_NARC));    if (wt.getAmmoType() != AmmoType.T_NA && m.getLinked() != null && !canHaveSpecialMunitions) {      EquipmentType linkedType=m.getLinked().getType();      boolean hasArtemisFCS=m.getLinkedBy() != null && (m.getLinkedBy().getType().hasFlag(MiscType.F_ARTEMIS) || m.getLinkedBy().getType().hasFlag(MiscType.F_ARTEMIS_V));      if (linkedType instanceof AmmoType) {        AmmoType linkedAT=(AmmoType)linkedType;        if (wt.getAmmoType() == AmmoType.T_AC_LBX && linkedAT.getMunitionType() != AmmoType.M_CLUSTER) {          correct=false;          buff.append("Aeros must use cluster munitions!" + m.getType().getInternalName() + " is using "+ linkedAT.getInternalName()+ "\n");        }        if (hasArtemisFCS && linkedAT.getMunitionType() != AmmoType.M_STANDARD && linkedAT.getMunitionType() != AmmoType.M_ARTEMIS_CAPABLE && linkedAT.getMunitionType() != AmmoType.M_ARTEMIS_V_CAPABLE) {          correct=false;          buff.append("Aero using illegal special missile type!" + m.getType().getInternalName() + " is using "+ linkedAT.getInternalName()+ "\n");        }        if (linkedAT.getMunitionType() != AmmoType.M_STANDARD && !hasArtemisFCS && wt.getAmmoType() != AmmoType.T_AC_LBX) {          correct=false;          buff.append("Aeros may not use special munitions! " + m.getType().getInternalName() + " is using "+ linkedAT.getInternalName()+ "\n");        }      }    }    if (m.getType().hasFlag(AmmoType.F_SPACE_BOMB) || m.getType().hasFlag(AmmoType.F_GROUND_BOMB) || m.getType().hasFlag(WeaponType.F_DIVE_BOMB)|| m.getType().hasFlag(WeaponType.F_ALT_BOMB)|| m.getType().hasFlag(WeaponType.F_SPACE_BOMB)) {      numBombs++;    } else {      numWeapons[m.getLocation()]++;    }  }  int availSpace[]=availableSpace(aero);  if (availSpace == null) {    buff.append("Invalid armor type! Armor: " + EquipmentType.armorNames[aero.getArmorType(Aero.LOC_NOSE)]);    buff.append("\n");    return false;  }  if (numBombs > aero.getMaxBombPoints()) {    buff.append("Invalid number of bombs! Unit can mount " + aero.getMaxBombPoints() + " but "+ numBombs+ "are present!");    buff.append("\n");    return false;  }  String[] locNames=aero.getLocationNames();  int loc=Aero.LOC_AFT;  while (loc >= 0) {    correct&=!(numWeapons[loc] > availSpace[loc]);    if (numWeapons[loc] > availSpace[loc]) {      buff.append(locNames[loc] + " has " + numWeapons[loc]+ " weapons but it can only fit "+ availSpace[loc]+ " weapons!");      buff.append("\n");    }    loc--;  }  return correct;}  }
class C{  public TFormalParameter createTFormalParameter(){  TFormalParameterImpl tFormalParameter=new TFormalParameterImpl();  return tFormalParameter;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildFirstFloor(zone);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String fullName=m_arg0.execute(xctxt).str();  int indexOfNSSep=fullName.indexOf(':');  String result;  String propName="";  Properties xsltInfo=new Properties();  loadPropertyFile(XSLT_PROPERTIES,xsltInfo);  if (indexOfNSSep > 0) {    String prefix=(indexOfNSSep >= 0) ? fullName.substring(0,indexOfNSSep) : "";    String namespace;    namespace=xctxt.getNamespaceContext().getNamespaceForPrefix(prefix);    propName=(indexOfNSSep < 0) ? fullName : fullName.substring(indexOfNSSep + 1);    if (namespace.startsWith("http://www.w3.org/XSL/Transform") || namespace.equals("http://www.w3.org/1999/XSL/Transform")) {      result=xsltInfo.getProperty(propName);      if (null == result) {        warn(xctxt,XPATHErrorResources.WG_PROPERTY_NOT_SUPPORTED,new Object[]{fullName});        return XString.EMPTYSTRING;      }    } else {      warn(xctxt,XPATHErrorResources.WG_DONT_DO_ANYTHING_WITH_NS,new Object[]{namespace,fullName});      try {        result=System.getProperty(propName);        if (null == result) {          return XString.EMPTYSTRING;        }      } catch (      SecurityException se) {        warn(xctxt,XPATHErrorResources.WG_SECURITY_EXCEPTION,new Object[]{fullName});        return XString.EMPTYSTRING;      }    }  } else {    try {      result=System.getProperty(fullName);      if (null == result) {        return XString.EMPTYSTRING;      }    } catch (    SecurityException se) {      warn(xctxt,XPATHErrorResources.WG_SECURITY_EXCEPTION,new Object[]{fullName});      return XString.EMPTYSTRING;    }  }  if (propName.equals("version") && result.length() > 0) {    try {      return new XString("1.0");    } catch (    Exception ex) {      return new XString(result);    }  } else   return new XString(result);}  }
class C{  public GroovyResultSetProxy(GroovyResultSetExtension ext){  extension=ext;}  }
class C{  public void postBreedingStatistics(final EvolutionState state){  for (int x=0; x < children.length; x++)   children[x].postBreedingStatistics(state);}  }
class C{  public int size(){  return n;}  }
class C{  public void renameAttribute(){  ArffSortedTableModel model;  String newName;  if (m_CurrentCol == -1) {    return;  }  model=(ArffSortedTableModel)m_TableArff.getModel();  if (model.getAttributeAt(m_CurrentCol) == null) {    return;  }  newName=ComponentHelper.showInputBox(getParent(),"Rename attribute...","Enter new Attribute name",model.getAttributeAt(m_CurrentCol).name());  if (newName == null) {    return;  }  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  model.renameAttributeAt(m_CurrentCol,newName);  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  public void schedule(String jobName,String poolName,String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count,long endTime,int maxRetry) throws JobManagerException {  String dataId=null;  try {    GenericValue runtimeData=delegator.makeValue("RuntimeData");    runtimeData.set("runtimeInfo",XmlSerializer.serialize(context));    runtimeData=delegator.createSetNextSeqId(runtimeData);    dataId=runtimeData.getString("runtimeDataId");  } catch (  GenericEntityException ee) {    throw new JobManagerException(ee.getMessage(),ee);  }catch (  SerializeException se) {    throw new JobManagerException(se.getMessage(),se);  }catch (  IOException ioe) {    throw new JobManagerException(ioe.getMessage(),ioe);  }  schedule(jobName,poolName,serviceName,dataId,startTime,frequency,interval,count,endTime,maxRetry);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.032 -0500",hash_original_method="6D223BF7FD79AD9333E45AB0A54AA37D",hash_generated_method="6E32EC11506185A59EE9CB1CAD77DBB8") private void socksSendRequest(int command,InetAddress address,int port) throws IOException {  Socks4Message request=new Socks4Message();  request.setCommandOrResult(command);  request.setPort(port);  request.setIP(address.getAddress());  request.setUserId("default");  getOutputStream().write(request.getBytes(),0,request.getLength());}  }
class C{  private static Date parseDate(String when) throws ParseException {  if (!DATE_TIME.matcher(when).matches()) {    throw new ParseException(when,0);  }  if (when.length() == 8) {    return DATE_FORMAT.parse(when);  } else {    Date date;    if (when.length() == 16 && when.charAt(15) == 'Z') {      date=DATE_TIME_FORMAT.parse(when.substring(0,15));      Calendar calendar=new GregorianCalendar();      long milliseconds=date.getTime();      milliseconds+=calendar.get(Calendar.ZONE_OFFSET);      calendar.setTime(new Date(milliseconds));      milliseconds+=calendar.get(Calendar.DST_OFFSET);      date=new Date(milliseconds);    } else {      date=DATE_TIME_FORMAT.parse(when);    }    return date;  }}  }
class C{  public boolean isBorderVisible(){  return this.borderVisible;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Test public void runtimePropertyUpdateOfAlreadyUpdatedProperty() throws Exception {  Configuration configuration=new Configuration();  PropertySection section=new PropertySection();  SingleProperty<Long> property=new LongProperty("","","property1",10L,false,false);  section.addProperty(property);  configuration.addSection(section);  ConfigurationUpdate configurationUpdate=mock(ConfigurationUpdate.class,Mockito.RETURNS_MOCKS);  AbstractPropertyUpdate<Long> propertyUpdate=mock(AbstractPropertyUpdate.class);  when(propertyUpdate.getPropertyLogicalName()).thenReturn("property1");  when(propertyUpdate.getUpdateValue()).thenReturn(20L);  Set<IPropertyUpdate<?>> propertyUpdates=Mockito.spy(new HashSet<IPropertyUpdate<?>>());  propertyUpdates.add(propertyUpdate);  when(configurationUpdate.getPropertyUpdates()).thenReturn(propertyUpdates);  doReturn(configuration).when(transformator).unmarshall(Matchers.<Path>anyObject(),Matchers.<Path>anyObject(),eq(Configuration.class));  doReturn(configurationUpdate).when(transformator).unmarshall(Matchers.<Path>anyObject(),Matchers.<Path>anyObject(),eq(ConfigurationUpdate.class));  doNothing().when(transformator).marshall(Matchers.<Path>anyObject(),any(),anyString());  ConfigurationUpdate configurationUpdateRuntime=mock(ConfigurationUpdate.class);  AbstractPropertyUpdate<Long> propertyUpdateRuntime=mock(AbstractPropertyUpdate.class);  when(propertyUpdateRuntime.getPropertyLogicalName()).thenReturn("property1");  when(propertyUpdateRuntime.getUpdateValue()).thenReturn(10L);  when(configurationUpdateRuntime.getPropertyUpdates()).thenReturn(Collections.<IPropertyUpdate<?>>singleton(propertyUpdateRuntime));  propertyManager.getProperties();  propertyManager.updateConfiguration(configurationUpdateRuntime,false);  assertThat(property.getValue(),is(10L));  ArgumentCaptor<List> captor=ArgumentCaptor.forClass(List.class);  verify(propertyUpdateExecutor,times(1)).executePropertyUpdates(captor.capture());  List<SingleProperty<?>> list=captor.getValue();  assertThat(list,hasSize(1));  assertThat(list,hasItem(property));  verify(configurationUpdate,times(1)).merge(configurationUpdateRuntime,true);  verify(transformator,times(1)).marshall(Matchers.<Path>anyObject(),eq(configurationUpdate),anyString());}  }
class C{  public CollapsiblePanel(JComponent child,String title,String tooltip){  this(child,Orientation.VERTICAL,title,tooltip);}  }
class C{  void disableLocalWindowScale(){  localTcp.disableWindowScale();}  }
class C{  public JFrame constructApplicationFrame(){  JFrame frame=new JFrame();  JPanel panel=new TicTacToePanel();  frame.add(panel,BorderLayout.CENTER);  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  return frame;}  }
class C{  public void expandListParagraphs(){  if (this.type != BlockType.ORDERED_LIST && this.type != BlockType.UNORDERED_LIST) {    return;  }  Block outer=this.blocks, inner;  boolean hasParagraph=false;  while (outer != null && !hasParagraph) {    if (outer.type == BlockType.LIST_ITEM) {      inner=outer.blocks;      while (inner != null && !hasParagraph) {        if (inner.type == BlockType.PARAGRAPH) {          hasParagraph=true;        }        inner=inner.next;      }    }    outer=outer.next;  }  if (hasParagraph) {    outer=this.blocks;    while (outer != null) {      if (outer.type == BlockType.LIST_ITEM) {        inner=outer.blocks;        while (inner != null) {          if (inner.type == BlockType.NONE) {            inner.type=BlockType.PARAGRAPH;          }          inner=inner.next;        }      }      outer=outer.next;    }  }}  }
class C{  public final static void writeXML(Writer out,String tag,String val,Object... attrs) throws IOException {  out.write('<');  out.write(tag);  for (int i=0; i < attrs.length; i++) {    out.write(' ');    out.write(attrs[i++].toString());    out.write('=');    out.write('"');    escapeAttributeValue(attrs[i].toString(),out);    out.write('"');  }  if (val == null) {    out.write('/');    out.write('>');  } else {    out.write('>');    escapeCharData(val,out);    out.write('<');    out.write('/');    out.write(tag);    out.write('>');  }}  }
class C{  public boolean isBLevelTechnicallyValid(final String signatureId){  SignatureWrapper signature=getSignatureByIdNullSafe(signatureId);  return signature.isBLevelTechnicallyValid();}  }
class C{  static public double y1(double x) throws ArithmeticException {  if (x < 8.0) {    double y=x * x;    double ans1=x * (-0.4900604943e13 + y * (0.1275274390e13 + y * (-0.5153438139e11 + y * (0.7349264551e9 + y * (-0.4237922726e7 + y * 0.8511937935e4)))));    double ans2=0.2499580570e14 + y * (0.4244419664e12 + y * (0.3733650367e10 + y * (0.2245904002e8 + y * (0.1020426050e6 + y * (0.3549632885e3 + y)))));    return (ans1 / ans2) + 0.636619772 * (j1(x) * Math.log(x) - 1.0 / x);  } else {    double z=8.0 / x;    double y=z * z;    double xx=x - 2.356194491;    double ans1=1.0 + y * (0.183105e-2 + y * (-0.3516396496e-4 + y * (0.2457520174e-5 + y * (-0.240337019e-6))));    double ans2=0.04687499995 + y * (-0.2002690873e-3 + y * (0.8449199096e-5 + y * (-0.88228987e-6 + y * 0.105787412e-6)));    return Math.sqrt(0.636619772 / x) * (Math.sin(xx) * ans1 + z * Math.cos(xx) * ans2);  }}  }
class C{  HttpResponse(Http http,URL url,CrawlDatum datum,boolean followRedirects) throws IOException {  this.url=url;  GetMethod get=new GetMethod(url.toString());  get.setFollowRedirects(followRedirects);  get.setDoAuthentication(true);  if (datum.getModifiedTime() > 0) {    get.setRequestHeader("If-Modified-Since",HttpDateFormat.toString(datum.getModifiedTime()));  }  HttpMethodParams params=get.getParams();  if (http.getUseHttp11()) {    params.setVersion(HttpVersion.HTTP_1_1);  } else {    params.setVersion(HttpVersion.HTTP_1_0);  }  params.makeLenient();  params.setContentCharset("UTF-8");  params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);  params.setBooleanParameter(HttpMethodParams.SINGLE_COOKIE_HEADER,true);  try {    code=Http.getClient().executeMethod(get);    Header[] heads=get.getResponseHeaders();    for (int i=0; i < heads.length; i++) {      headers.set(heads[i].getName(),heads[i].getValue());    }    int contentLength=Integer.MAX_VALUE;    String contentLengthString=headers.get(Response.CONTENT_LENGTH);    if (contentLengthString != null) {      try {        contentLength=Integer.parseInt(contentLengthString.trim());      } catch (      NumberFormatException ex) {        throw new HttpException("bad content length: " + contentLengthString);      }    }    if (http.getMaxContent() >= 0 && contentLength > http.getMaxContent()) {      contentLength=http.getMaxContent();    }    InputStream in=get.getResponseBodyAsStream();    try {      byte[] buffer=new byte[HttpBase.BUFFER_SIZE];      int bufferFilled=0;      int totalRead=0;      ByteArrayOutputStream out=new ByteArrayOutputStream();      while ((bufferFilled=in.read(buffer,0,buffer.length)) != -1 && totalRead + bufferFilled <= contentLength) {        totalRead+=bufferFilled;        out.write(buffer,0,bufferFilled);      }      content=out.toByteArray();    } catch (    Exception e) {      if (code == 200)       throw new IOException(e.toString());    } finally {      if (in != null) {        in.close();      }      get.abort();    }    StringBuilder fetchTrace=null;    if (Http.LOG.isTraceEnabled()) {      fetchTrace=new StringBuilder("url: " + url + "; status code: "+ code+ "; bytes received: "+ content.length);      if (getHeader(Response.CONTENT_LENGTH) != null)       fetchTrace.append("; Content-Length: " + getHeader(Response.CONTENT_LENGTH));      if (getHeader(Response.LOCATION) != null)       fetchTrace.append("; Location: " + getHeader(Response.LOCATION));    }    if (content != null) {      String contentEncoding=headers.get(Response.CONTENT_ENCODING);      if (contentEncoding != null && Http.LOG.isTraceEnabled())       fetchTrace.append("; Content-Encoding: " + contentEncoding);      if ("gzip".equals(contentEncoding) || "x-gzip".equals(contentEncoding)) {        content=http.processGzipEncoded(content,url);        if (Http.LOG.isTraceEnabled())         fetchTrace.append("; extracted to " + content.length + " bytes");      } else       if ("deflate".equals(contentEncoding)) {        content=http.processDeflateEncoded(content,url);        if (Http.LOG.isTraceEnabled())         fetchTrace.append("; extracted to " + content.length + " bytes");      }    }    if (Http.LOG.isTraceEnabled()) {      Http.LOG.trace(fetchTrace.toString());    }  }  finally {    get.releaseConnection();  }}  }
class C{  @Override public void writeToNBT(NBTTagCompound par1NBTTagCompound){  super.writeToNBT(par1NBTTagCompound);  par1NBTTagCompound.setInteger("banJing",this.empRadius);  par1NBTTagCompound.setByte("muoShi",this.empMode);}  }
class C{  ServerSocket newServerSocket() throws IOException {  if (TCPTransport.tcpLog.isLoggable(Log.VERBOSE)) {    TCPTransport.tcpLog.log(Log.VERBOSE,"creating server socket on " + this);  }  RMIServerSocketFactory serverFactory=ssf;  if (serverFactory == null) {    serverFactory=chooseFactory();  }  ServerSocket server=serverFactory.createServerSocket(listenPort);  if (listenPort == 0)   setDefaultPort(server.getLocalPort(),csf,ssf);  return server;}  }
class C{  @RequestMapping("/owners/{ownerId}") public ModelAndView showOwner(@PathVariable("ownerId") int ownerId){  ModelAndView mav=new ModelAndView("owners/ownerDetails");  mav.addObject(this.clinicService.findOwnerById(ownerId));  return mav;}  }
class C{  public static Element createElementInSignatureSpace(Document doc,String elementName){  if (doc == null) {    throw new RuntimeException("Document is null");  }  if ((dsPrefix == null) || (dsPrefix.length() == 0)) {    return doc.createElementNS(Constants.SignatureSpecNS,elementName);  }  return doc.createElementNS(Constants.SignatureSpecNS,dsPrefix + ":" + elementName);}  }
class C{  public void disableLookAt(){  mLookAtEnabled=false;}  }
class C{  protected void nextTable() throws ReplicatorException, SQLException {  while (importTables.next()) {    if (includeImportTable() == true) {      currentTablePosition=0;      extractCreateTableStatement=this.includeStructure;      prepareImportTable();      break;    }  }}  }
class C{  private static int CallNonvirtualObjectMethodA(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualObjectMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,null,true);  return env.pushJNIRef(returnObj);}  }
class C{  public static ChatMessage createFileTransferMessage(ContactId remote,String fileInfo,String msgId,long timestamp,long timestampSent){  return new ChatMessage(msgId,remote,fileInfo,FileTransferHttpInfoDocument.MIME_TYPE,timestamp,timestampSent,null);}  }
class C{  private void validateForProductStatusChange(Product prod,VOService product,ServiceStatus newStatus,ServiceStatus requiredState,PlatformUser user) throws OperationNotPermittedException, ServiceOperationException, ServiceStateException {  Organization organization=user.getOrganization();  PermissionCheck.owns(prod,organization,logger,sessionCtx);  if (prod.getOwningSubscription() != null) {    ServiceOperationException pof=new ServiceOperationException(Reason.STATE_CHANGE_FAILED_USED_BY_SUB);    logger.logWarn(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,pof,LogMessageIdentifier.WARN_SUPPLIER_CHANGE_SUBSCRIPTION_STATE_FAILED,Long.toString(organization.getKey()),Long.toString(product.getKey()));    throw pof;  }  if (prod.getStatus() != newStatus) {    if (requiredState != null && prod.getStatus() != requiredState) {      throw new ServiceStateException(requiredState,prod.getStatus());    }  }}  }
class C{  public void close(){  scanner.close();}  }
class C{  public Ingredient(String unlocalized){  this.unlocalized=unlocalized;  equivalents.add(this);  INGREDIENTS.put(unlocalized,this);}  }
class C{  static TypeMember createStructureMember(final int id,final BaseType parentType,final BaseType baseType,final String name,final int structureOffset){  return new TypeMember(id,parentType,baseType,name,Optional.of(structureOffset),Optional.<Integer>absent(),Optional.<Integer>absent());}  }
class C{  public Bitmap decryptToBitmap(InputStream fileInput) throws NoSuchPaddingException, InvalidKeyException, NoSuchAlgorithmException, IOException, BadPaddingException, IllegalBlockSizeException, InvalidAlgorithmParameterException, InvalidKeySpecException {  return BitmapFactory.decodeStream(new ByteArrayInputStream(decrypt(fileInput)));}  }
class C{  public DividerItemDecoration(Context context){  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);  mDivider=styledAttributes.getDrawable(0);  styledAttributes.recycle();}  }
class C{  public void removeLayoutComponent(Component c){}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  static <T0,T1>Tuple2<T0,T1> of(T0 e0,T1 e1){  return new Tuple2Impl<>(e0,e1);}  }
class C{  @Override public void closeArchiveEntry() throws IOException {  if (finished) {    throw new IOException("Stream has already been finished");  }  if (entry == null) {    throw new IOException("No current entry to close");  }  if (!entry.hasWritten) {    write(EMPTY,0,0);  }  flushDeflater();  final Zip64Mode effectiveMode=getEffectiveZip64Mode(entry.entry);  long bytesWritten=written - entry.dataStart;  long realCrc=crc.getValue();  crc.reset();  final boolean actuallyNeedsZip64=handleSizesAndCrc(bytesWritten,realCrc,effectiveMode);  if (raf != null) {    rewriteSizesAndCrc(actuallyNeedsZip64);  }  writeDataDescriptor(entry.entry);  entry=null;}  }
class C{  public CommentExample(CommentObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getContent() != null) {    criteria.andContentEqualTo(sample.getContent());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getAttachId() != null) {    criteria.andAttachIdEqualTo(sample.getAttachId());  }  if (sample.getAttachType() != null) {    criteria.andAttachTypeEqualTo(sample.getAttachType());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getUpdated() != null) {    criteria.andUpdatedEqualTo(sample.getUpdated());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }}  }
class C{  public final void sendTo(OutputStream out,ByteBuffer outBuf) throws IOException {  finishWriting();  if (this.chunks != null) {    for (    ByteBuffer bb : this.chunks) {      sendTo(out,outBuf,bb);    }  }  sendTo(out,outBuf,this.buffer);  flushStream(out,outBuf);}  }
class C{  public double distance(final MutableInt2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public static Builder builder(){  return new Builder(new JoinRequest());}  }
class C{  @Override public void updateScreen(){  ((GuiButton)buttonList.get(1)).enabled=blockList.getSelectedSlot() != -1 && !XRayMod.xrayBlocks.isEmpty();}  }
class C{  public void testDurableTopicSessionCloseMarksMessageRedelivered() throws JMSException {  connection.setClientID(getName());  connection.start();  Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  Topic topic=session.createTopic("topic-" + getName());  MessageConsumer consumer=session.createDurableSubscriber(topic,"sub1");  MessageProducer producer=session.createProducer(topic);  producer.setDeliveryMode(DeliveryMode.PERSISTENT);  producer.send(createTextMessage(session));  Message msg=consumer.receive(1000);  assertNotNull(msg);  assertFalse("Message should not be re-delivered.",msg.getJMSRedelivered());  session.close();  session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  consumer=session.createDurableSubscriber(topic,"sub1");  msg=consumer.receive(2000);  assertNotNull(msg);  assertTrue("Message should be redelivered.",msg.getJMSRedelivered());  msg.acknowledge();  session.close();}  }
class C{  public String next(){  return nextLine();}  }
class C{  public void swapWith(E out,E in){  insertBefore(in,out);  remove(out);}  }
class C{  public PasswordAuthentication(String userName,char[] password){  this.userName=userName;  this.password=password.clone();}  }
class C{  public static InsertUnmodeledObjects v(){  if (v == null)   v=new InsertUnmodeledObjects();  return v;}  }
class C{  public RemoteShopUrlServiceImpl(final DtoShopUrlService dtoShopUrlService){  super(dtoShopUrlService);}  }
class C{  protected void writeMap(Map<?,?> map,CharBuf buffer){  if (map.isEmpty()) {    buffer.addChars(EMPTY_MAP_CHARS);    return;  }  buffer.addChar(OPEN_BRACE);  for (  Map.Entry<?,?> entry : map.entrySet()) {    if (entry.getKey() == null) {      throw new IllegalArgumentException("Maps with null keys can\'t be converted to JSON");    }    String key=entry.getKey().toString();    Object value=entry.getValue();    if (isExcludingValues(value) || isExcludingFieldsNamed(key)) {      continue;    }    writeMapEntry(key,value,buffer);    buffer.addChar(COMMA);  }  buffer.removeLastChar(COMMA);  buffer.addChar(CLOSE_BRACE);}  }
class C{  public LuceneCondition defaultField(String defaultField){  this.defaultField=defaultField;  return this;}  }
class C{  public void background(float x,float y,float z){  colorCalc(x,y,z);  backgroundFromCalc();}  }
class C{  public static double norm_inf(double[] a){  double max=Double.NEGATIVE_INFINITY;  for (int i=0; i < a.length; i++) {    if (Math.abs(a[i]) > max) {      max=Math.abs(a[i]);    }  }  return max;}  }
class C{  @Override protected void buildRepresentation(T entity){  final String imageName=entity.getRPObject().get("image");  final String harmlessImageName=entity.getRPObject().get("harmless_image");  Sprite sprite=null;  ZoneInfo info=ZoneInfo.get();  boolean showBlood=Boolean.parseBoolean(WtWindowManager.getInstance().getProperty("gamescreen.blood","true"));  if (showBlood) {    sprite=SpriteStore.get().getModifiedSprite(translate("corpse/" + imageName),info.getZoneColor(),info.getColorMethod());  } else {    sprite=SpriteStore.get().getModifiedSprite(translate("corpse/" + harmlessImageName),info.getZoneColor(),info.getColorMethod());  }  width=sprite.getWidth();  height=sprite.getHeight();  setSprite(sprite);  calculateOffset(entity,width,height);}  }
class C{  private void waitForSession(MDSDialog dialog,Integer vsanId) throws NetworkDeviceControllerException {  boolean isInSession=dialog.isSessionInProgress(vsanId);  int retryAttempts=getDefaultTimeout() / MDSDialogProperties.SLEEP_TIME_PER_RETRY + 1;  for (int retrys=0; isInSession == true && retrys < retryAttempts; retrys++) {    try {      Thread.sleep(MDSDialogProperties.SLEEP_TIME_PER_RETRY);    } catch (    InterruptedException ex) {      _log.warn(ex.getLocalizedMessage());    }    isInSession=dialog.isSessionInProgress(vsanId);  }  if (isInSession) {    throw NetworkDeviceControllerException.exceptions.waitForSessionFailedTimeout(vsanId.toString());  }}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  return flavor.equals(getTransferDataFlavors()[0]);}  }
class C{  protected GreaterOp_Impl(){  super();}  }
class C{  void addPageInfo(PageParamInfo.PageInfo pageInfo){  Group group=getLastGroup();  if (group.mList.isEmpty()) {    group.mList.add(pageInfo);    mPrevPageInfo=pageInfo;    return;  }  int delta=pageInfo.mPageNum - mPrevPageInfo.mPageNum;  int deltaSign=delta == 0 ? 0 : (delta < 0 ? -1 : 1);  if (deltaSign != group.mDeltaSign) {    if (group.mDeltaSign != 0) {      group=addGroupButRetainPrev();      if (deltaSign != 0)       group.mList.add(mPrevPageInfo);    }  } else   if (deltaSign == 0) {    group.mList.clear();  }  group.mList.add(pageInfo);  mPrevPageInfo=pageInfo;  group.mDeltaSign=deltaSign;}  }
class C{  public static void run(AdExchangeSeller adExchangeSeller,String adClientId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Running report for ad client %s\n",adClientId);  System.out.println("=================================================================");  Date today=new Date();  Calendar calendar=Calendar.getInstance();  calendar.setTime(today);  calendar.add(Calendar.DATE,-7);  Date oneWeekAgo=calendar.getTime();  String startDate=DATE_FORMATTER.format(oneWeekAgo);  String endDate=DATE_FORMATTER.format(today);  Generate request=adExchangeSeller.reports().generate(startDate,endDate);  request.setFilter(Arrays.asList("AD_CLIENT_ID==" + escapeFilterParameter(adClientId)));  request.setMetric(Arrays.asList("PAGE_VIEWS","AD_REQUESTS","AD_REQUESTS_COVERAGE","CLICKS","AD_REQUESTS_CTR","COST_PER_CLICK","AD_REQUESTS_RPM","EARNINGS"));  request.setDimension(Arrays.asList("DATE"));  request.setSort(Arrays.asList("+DATE"));  Report response=request.execute();  if (response.getRows() != null && !response.getRows().isEmpty()) {    for (    Report.Headers header : response.getHeaders()) {      System.out.printf("%25s",header.getName());    }    System.out.println();    for (    List<String> row : response.getRows()) {      for (      String column : row) {        System.out.printf("%25s",column);      }      System.out.println();    }    System.out.println();  } else {    System.out.println("No rows returned.");  }  System.out.println();}  }
class C{  private boolean isDelimiter(int offset,int exclusiveEnd){  if (exclusiveEnd == DONE || offset == DONE)   return false;  Assert.isTrue(offset >= 0);  Assert.isTrue(exclusiveEnd <= getText().getEndIndex());  Assert.isTrue(exclusiveEnd > offset);  CharSequence seq=fIterator.fText;  while (offset < exclusiveEnd) {    char ch=seq.charAt(offset);    if (ch != '\n' && ch != '\r')     return false;    offset++;  }  return true;}  }
class C{  SwcGroup(Map<String,Swc> swcs,SwcGroup rslGroup){  this.swcs=swcs;  this.rslGroup=rslGroup;  updateNameMappings();  updateFiles();  updateMaps();}  }
class C{  protected void sendDataToAllWatchers(){  if (FMLCommonHandler.instance().getEffectiveSide() == Side.SERVER) {    if (!this.getWatchers().isEmpty()) {      NBTTagCompound nbt=this.writeToNBT(new NBTTagCompound());      for (      EntityPlayerMP watcher : this.getWatchers()) {        TheBetweenlands.networkWrapper.sendTo(new MessageSyncChunkData(this.getChunk(),nbt),watcher);      }    }  }}  }
class C{  public SingleFieldBuilder<MType,BType,IType> mergeFrom(MType value){  if (builder == null && message == message.getDefaultInstanceForType()) {    message=value;  } else {    getBuilder().mergeFrom(value);  }  onChanged();  return this;}  }
class C{  public boolean isEmpty(){  return events.size() == 0;}  }
class C{  public FullTextQueryBuilder(FullTextIndex index,AkibanInformationSchema ais,QueryContext buildContext){  this.indexName=index.getIndexName();  ServiceManager serviceManager=null;  if (buildContext != null) {    try {      serviceManager=buildContext.getServiceManager();    } catch (    UnsupportedOperationException ex) {    }  }  if (serviceManager != null) {    this.infos=serviceManager.getServiceByClass(FullTextIndexService.class);  } else {    this.infos=new TestFullTextIndexInfos(ais);  }  this.buildContext=buildContext;}  }
class C{  public void validatePartitionValueFilters(List<PartitionValueFilter> partitionValueFilters,PartitionValueFilter standalonePartitionValueFilter,boolean allowPartitionValueTokens){  Assert.isTrue(partitionValueFilters == null || standalonePartitionValueFilter == null,"A list of partition value filters and a standalone partition value filter cannot be both specified.");  List<PartitionValueFilter> partitionValueFiltersToValidate=new ArrayList<>();  if (partitionValueFilters != null) {    partitionValueFiltersToValidate.addAll(partitionValueFilters);  }  if (standalonePartitionValueFilter != null) {    partitionValueFiltersToValidate.add(standalonePartitionValueFilter);  }  Assert.notEmpty(partitionValueFiltersToValidate,"At least one partition value filter must be specified.");  int partitionValueRangesCount=0;  for (  PartitionValueFilter partitionValueFilter : partitionValueFiltersToValidate) {    if (partitionValueFilters != null) {      Assert.hasText(partitionValueFilter.getPartitionKey(),"A partition key must be specified.");    }    if (StringUtils.isNotBlank(partitionValueFilter.getPartitionKey())) {      partitionValueFilter.setPartitionKey(partitionValueFilter.getPartitionKey().trim());    }    PartitionValueRange partitionValueRange=partitionValueFilter.getPartitionValueRange();    List<String> partitionValues=partitionValueFilter.getPartitionValues();    LatestBeforePartitionValue latestBeforePartitionValue=partitionValueFilter.getLatestBeforePartitionValue();    LatestAfterPartitionValue latestAfterPartitionValue=partitionValueFilter.getLatestAfterPartitionValue();    List<Boolean> partitionFilterOptions=Arrays.asList(partitionValueRange != null,partitionValues != null,latestBeforePartitionValue != null,latestAfterPartitionValue != null);    Assert.isTrue(Collections.frequency(partitionFilterOptions,Boolean.TRUE) == 1,"Exactly one partition value filter option must be specified.");    if (partitionValueRange != null) {      partitionValueRangesCount++;      Assert.isTrue(partitionValueRangesCount < 2,"Cannot specify more than one partition value range.");      Assert.hasText(partitionValueRange.getStartPartitionValue(),"A start partition value for the partition value range must be specified.");      partitionValueRange.setStartPartitionValue(partitionValueRange.getStartPartitionValue().trim());      Assert.hasText(partitionValueRange.getEndPartitionValue(),"An end partition value for the partition value range must be specified.");      partitionValueRange.setEndPartitionValue(partitionValueRange.getEndPartitionValue().trim());      Assert.isTrue(!partitionValueRange.getStartPartitionValue().equals(BusinessObjectDataService.MAX_PARTITION_VALUE_TOKEN) && !partitionValueRange.getStartPartitionValue().equals(BusinessObjectDataService.MIN_PARTITION_VALUE_TOKEN) && !partitionValueRange.getEndPartitionValue().equals(BusinessObjectDataService.MAX_PARTITION_VALUE_TOKEN)&& !partitionValueRange.getEndPartitionValue().equals(BusinessObjectDataService.MIN_PARTITION_VALUE_TOKEN),"A partition value token cannot be specified with a partition value range.");      Assert.isTrue(partitionValueRange.getStartPartitionValue().compareTo(partitionValueRange.getEndPartitionValue()) <= 0,String.format("The start partition value \"%s\" cannot be greater than the end partition value \"%s\".",partitionValueRange.getStartPartitionValue(),partitionValueRange.getEndPartitionValue()));    } else     if (partitionValues != null) {      Assert.isTrue(!partitionValues.isEmpty(),"At least one partition value must be specified.");      for (int i=0; i < partitionValues.size(); i++) {        String partitionValue=partitionValues.get(i);        Assert.hasText(partitionValue,"A partition value must be specified.");        partitionValue=partitionValue.trim();        if (!allowPartitionValueTokens) {          Assert.isTrue(!partitionValue.equals(BusinessObjectDataService.MAX_PARTITION_VALUE_TOKEN) && !partitionValue.equals(BusinessObjectDataService.MIN_PARTITION_VALUE_TOKEN),"A partition value token cannot be specified as one of partition values.");        }        partitionValues.set(i,partitionValue);      }    } else     if (latestBeforePartitionValue != null) {      Assert.hasText(latestBeforePartitionValue.getPartitionValue(),"A partition value must be specified.");      latestBeforePartitionValue.setPartitionValue(latestBeforePartitionValue.getPartitionValue().trim());    } else {      Assert.hasText(latestAfterPartitionValue.getPartitionValue(),"A partition value must be specified.");      latestAfterPartitionValue.setPartitionValue(latestAfterPartitionValue.getPartitionValue().trim());    }  }}  }
class C{  @LargeTest public void testThumbnailH264NonIFrame() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";  final int outWidth=1080;  final int outHeight=720;  final int atTime=2400;  long durationToAddObjects=0;  int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String[] loggingInfo=new String[1];  final MediaVideoItem mediaVideoItem=new MediaVideoItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  assertNotNull("MediaVideoItem",mediaVideoItem);  for (int i=0; i < NUM_OF_ITERATIONS; i++) {    final long duration1=SystemClock.uptimeMillis();    mediaVideoItem.getThumbnail(outWidth,outHeight,atTime + i);    final long duration2=SystemClock.uptimeMillis();    durationToAddObjects+=(duration2 - duration1);  }  final float timeTaken=(float)durationToAddObjects * 1.0f / (float)NUM_OF_ITERATIONS;  loggingInfo[0]="Time taken for Thumbnail generation :" + timeTaken;  writeTimingInfo("testThumbnailH264NonIFrame",loggingInfo);}  }
class C{  public static void shuffle(ArrayList<Number> list){  java.util.Collections.shuffle(list);}  }
class C{  public NotificationChain basicSetOperand(Expression newOperand,NotificationChain msgs){  Expression oldOperand=operand;  operand=newOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.LOGICAL_NOT_EXPRESSION__OPERAND,oldOperand,newOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void addMoney(Money money){  getMoney().add(money);}  }
class C{  public static void main(String[] args) throws IOException {  SfntDump dumper=new SfntDump();  File fontFile=null;  int optionCount=0;  if (args.length > 0 && !(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-?"))) {    fontFile=new File(args[args.length - 1]);    args=Arrays.copyOfRange(args,0,args.length - 1);  } else {    printUsage();    System.exit(0);  }  for (int i=0; i < args.length; i++) {    String option=null;    if (args[i].charAt(0) == '-') {      option=args[i].substring(1);    }    if (option != null) {      optionCount++;      if (option.equals("count")) {        dumper.countSpecialGlyphs(true);        continue;      }      if (option.equals("t")) {        if (i + 1 < args.length) {          dumper.dumpTablesAsBinary(args[++i]);        }        continue;      }      if (option.equals("cm")) {        if (i + 1 < args.length) {          dumper.useCMap(args[++i]);        }        continue;      }      if (option.equals("table")) {        dumper.dumpTableList(true);        continue;      }      if (option.startsWith("name")) {        dumper.dumpNames(true);        continue;      }      if (option.startsWith("cmap")) {        dumper.dumpCMaps(true);        if (i + 1 < args.length && !args[i + 1].startsWith("-")) {          dumper.dumpCMaps(args[++i]);        }        continue;      }      if (option.startsWith("post")) {        dumper.dumpPost(true);        continue;      }      if (option.startsWith("eblc")) {        dumper.dumpEblc(true);        continue;      }      if (option.equals("glyph") || option.equals("g")) {        BitSet glyphSet=null;        if (i + 1 >= args.length || args[i + 1].startsWith("-")) {          dumper.dumpAllGlyphs(true);          continue;        }        if (i + 1 < args.length) {          i++;          glyphSet=parseRange(args[i]);          if (glyphSet == null) {            glyphSet=parseList(args[i]);          }          if (glyphSet != null) {            dumper.dumpGlyphs(glyphSet);          }        }        if (glyphSet == null) {          System.out.println("glyph dump option requires a glyph range or list");          System.exit(0);        }      }      if (option.equals("char") || option.equals("c")) {        BitSet charSet=null;        if (i + 1 >= args.length || args[i + 1].startsWith("-")) {          dumper.dumpAllChars(true);          continue;        }        if (i + 1 < args.length) {          i++;          charSet=parseRange(args[i]);          if (charSet == null) {            charSet=parseList(args[i]);          }          if (charSet != null) {            dumper.dumpChars(charSet);          }        }        if (charSet == null) {          System.out.println("character dump option requires a glyph range or list");          System.exit(0);        }      }      if (option.equals("all") || option.equals("a")) {        dumper.dumpAll(true);      }    }  }  if (optionCount == 0) {    dumper.dumpTableList(true);  }  if (fontFile != null) {    if (fontFile.isDirectory()) {      File[] files=fontFile.listFiles();      for (      File file : files) {        if (file.isFile() && !file.isHidden()) {          try {            dumper.dumpFont(file);            System.out.println();          } catch (          Throwable t) {            System.out.printf("Error processing file: %s\n",file);          }        }      }    } else {      try {        dumper.dumpFont(fontFile);      } catch (      Throwable t) {        System.out.printf("Error processing file: %s\n",fontFile);      }    }  } else {    printUsage();    System.exit(0);  }}  }
class C{  public static final int maximum(){  return Integer.MAX_VALUE;}  }
class C{  public boolean hasStatus(){  return hasExtension(ExportStatus.class);}  }
class C{  @SuppressWarnings("unchecked") private boolean prepareData(){  if (sensorDataObjects.isEmpty() && objectStorages.isEmpty()) {    return false;  }  temp=sensorDataObjects;  sensorDataObjects=measurementsProcessing;  measurementsProcessing=(Map<String,DefaultData>)temp;  temp=objectStorages;  objectStorages=objectStoragesProcessing;  objectStoragesProcessing=(Map<String,IObjectStorage>)temp;  List<DefaultData> tempList=new ArrayList<DefaultData>(measurementsProcessing.values());  measurementsProcessing.clear();  for (  IObjectStorage objectStorage : objectStoragesProcessing.values()) {    tempList.add(objectStorage.finalizeDataObject());  }  objectStoragesProcessing.clear();  bufferStrategy.addMeasurements(tempList);  return true;}  }
class C{  public void clearDiskCache(){  checkConfiguration();  configuration.diskCache.clear();}  }
class C{  public static int uninstallSilent(Context context,String packageName){  return uninstallSilent(context,packageName,true);}  }
class C{  public void render(java.awt.Graphics graphics){  Debug.message("eomg","EditableOMCircle.render()");  State state=getStateMachine().getState();  if (circle == null) {    Debug.message("eomg","EditableOMCircle.render: null circle.");    return;  }  circle.setVisible(true);  circle.render(graphics);  circle.setVisible(false);  int renderType=circle.getRenderType();  if (state instanceof GraphicSelectedState || state instanceof GraphicEditState) {    for (int i=0; i < gPoints.length; i++) {      GrabPoint gp=gPoints[i];      if (gp != null) {        if (i == RADIUS_POINT_INDEX)         continue;        if (renderType == OMGraphic.RENDERTYPE_LATLON && i != CENTER_POINT_INDEX)         continue;        if ((i == OFFSET_POINT_INDEX && renderType == OMGraphic.RENDERTYPE_OFFSET && movingPoint == gpo) || (state instanceof GraphicSelectedState && ((i != OFFSET_POINT_INDEX && renderType != OMGraphic.RENDERTYPE_OFFSET) || (renderType == OMGraphic.RENDERTYPE_OFFSET)))) {          gp.setVisible(true);          gp.render(graphics);          gp.setVisible(false);        }      }    }  }}  }
class C{  public DefaultContainerCapabilityFactory(){  this(null);}  }
class C{  private void generate_gf(int[] generator_polynomial){  int i;  int mask=1;  alpha_to[MM]=0;  for (i=0; i < MM; i++) {    alpha_to[i]=mask;    index_of[alpha_to[i]]=i;    if (generator_polynomial[i] != 0) {      alpha_to[MM]^=mask;    }    mask<<=1;  }  index_of[alpha_to[MM]]=MM;  mask>>=1;  for (i=MM + 1; i < NN; i++) {    if (alpha_to[i - 1] >= mask) {      alpha_to[i]=alpha_to[MM] ^ ((alpha_to[i - 1] ^ mask) << 1);    } else {      alpha_to[i]=alpha_to[i - 1] << 1;    }    index_of[alpha_to[i]]=i;  }  index_of[0]=-1;}  }
class C{  public Coordinate toInternal(Coordinate external){  Coordinate internal=new Coordinate(external);  makePrecise(internal);  return internal;}  }
class C{  public E removeFirst(){  if (size == 0)   return null; else {    Node<E> temp=head;    head=head.next;    size--;    return temp.element;  }}  }
class C{  @Override public void environmentStart(EnvironmentClassLoader loader) throws StartLifecycleException {}  }
class C{  public boolean containsValue(Object value){  if (value == null)   throw new NullPointerException();  final Segment<K,V>[] segments=this.segments;  long previousSum=0L;  int lockCount=0;  try {    for (int retries=-1; ; retries++) {      long sum=0L;      for (int j=0; j < segments.length; j++) {        Segment<K,V> segment;        if (retries == RETRIES_BEFORE_LOCK) {          segment=ensureSegment(j);          segment.lock();          lockCount++;        } else {          segment=segmentAt(segments,j);          if (segment == null)           continue;        }        HashEntry<K,V>[] tab=segment.table;        if (tab != null) {          for (int i=0; i < tab.length; i++) {            HashEntry<K,V> e;            for (e=entryAt(tab,i); e != null; e=e.next) {              V v=e.value;              if (v != null && value.equals(v))               return true;            }          }          sum+=segment.modCount;        }      }      if ((retries >= 0 && sum == previousSum) || lockCount > 0)       return false;      previousSum=sum;    }  }  finally {    for (int j=0; j < lockCount; j++)     segments[j].unlock();  }}  }
class C{  public void zonesetClone(Integer vsanId,String zonesetToClone) throws NetworkDeviceControllerException {  _log.info(MessageFormat.format("Host: {0}, Port: {1} - BEGIN zonesetClone",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort()}));  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (lastPrompt != SSHPrompt.MDS_CONFIG) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG.toString());  }  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG};  String errorString=MDSDialogProperties.getString("MDSDialog.zonesetClone.invalidname.cmd");  StringBuilder buf=new StringBuilder();  String newZoneset=generateZonesetCloneName(zonesetToClone);  List<String> zonesetClonesToDelete=findZonesetClonesToDelete(vsanId);  _log.info("Creating new zoneset clone : " + newZoneset);  String payload=MessageFormat.format(MDSDialogProperties.getString("MDSDialog.zonesetClone.cmd"),zonesetToClone,newZoneset,vsanId);  lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  for (  String line : lines) {    if (line.indexOf(errorString) >= 0) {      _log.info("Zoneset clone operation failed");      throw NetworkDeviceControllerException.exceptions.zonesetCloneFailed(newZoneset,line);    }  }  for (  String zonesetClone : zonesetClonesToDelete) {    _log.info(String.format("Removing zoneset (clone) %s",zonesetClone));    zonesetNameVsan(zonesetClone,vsanId,true);  }  _log.info(MessageFormat.format("Host: {0}, Port: {1} - END zonesetClone",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort()}));}  }
class C{  public InvalidInputException(){  super();}  }
class C{  private static List<IGraphPanel> collectModifiedGraphPanels(final List<CGraphPanel> panels){  final List<IGraphPanel> modifiedGraphs=new ArrayList<IGraphPanel>();  for (  final CGraphPanel panel : panels) {    if (panel.getModel().getGraph().getRawView().wasModified()) {      modifiedGraphs.add(panel);    }  }  return modifiedGraphs;}  }
class C{  public Resolution doWithCredential(Callable<Resolution> action){  Subject subject=SecurityUtils.getSubject();  Object principal=subject.getPrincipal();  String userId;  if (principal == null) {    throw new IllegalStateException("User is not logged in, can not determine the user id");  } else {    userId=OgnlUtils.convertValueToString(ShiroUtils.getUserId(subject));  }  return doWithCredential(userId,action);}  }
class C{  private static Set<Parser> parsers(final MultiProtocolURL url,String mimeType1) throws Parser.Failure {  final Set<Parser> idioms=new LinkedHashSet<Parser>(2);  Set<Parser> idiom;  if (mimeType1 != null) {    mimeType1=normalizeMimeType(mimeType1);    if (denyMime.containsKey(mimeType1))     throw new Parser.Failure("mime type '" + mimeType1 + "' is denied (1)",url);    idiom=mime2parser.get(mimeType1);    if (idiom != null)     idioms.addAll(idiom);  }  String ext=MultiProtocolURL.getFileExtension(url.getFileName());  if (ext != null && ext.length() > 0) {    if (denyExtensionx.containsKey(ext))     throw new Parser.Failure("file extension '" + ext + "' is denied (1)",url);    idiom=ext2parser.get(ext);    if (idiom != null && !idioms.containsAll(idiom)) {      idioms.addAll(idiom);    }  }  final String mimeType2=ext2mime.get(ext);  if (mimeType2 != null && (idiom=mime2parser.get(mimeType2)) != null && !idioms.containsAll(idiom)) {    idioms.addAll(idiom);  }  idioms.add(genericIdiom);  return idioms;}  }
class C{  public static double gammln(double xx){  double x, y, tmp, ser;  int j;  y=x=xx;  tmp=x + 5.5;  tmp-=(x + 0.5) * Math.log(tmp);  ser=1.000000000190015;  for (j=0; j <= 5; j++) {    ser+=cof[j] / ++y;  }  return -tmp + Math.log(2.5066282746310005 * ser / x);}  }
class C{  public void testDomainNotAutomaticallyPrefixedWithDot(){  HttpCookie cookie=new HttpCookie("Foo","foo");  cookie.setDomain("localhost");  assertEquals("localhost",cookie.getDomain());}  }
class C{  void valueClass(Class<?> valCls){  this.valCls=valCls;}  }
class C{  public void testEmptyCase() throws Exception {  String file="EmptyTestCase.java";  assertEquals(NO_WARNINGS,lintFiles(file));}  }
class C{  private void provideParamForContext(String context,String qualifier,Object paramValue){  if (context == null || context.equals("")) {    throw new IllegalArgumentException("Context must not be null or empty.");  }  if (qualifier == null || qualifier.equals("")) {    throw new IllegalArgumentException("Param qualifier must not be null or empty.");  }  if (paramValue == null) {    throw new IllegalArgumentException("Param value must not be null.");  }  ParamBinderHelper.addProvidedParam(context,qualifier,paramValue);}  }
class C{  public void updateConsistencyGroupProperties(String cgName,String clusterName,boolean isDistributed) throws VPlexApiException {  s_logger.info("Request to update consistency group properties on VPlex at {}",_baseURI);  List<VPlexClusterInfo> clusterInfoList=_discoveryMgr.getClusterInfoLite();  if (!isDistributed) {    Iterator<VPlexClusterInfo> clusterInfoIter=clusterInfoList.iterator();    while (clusterInfoIter.hasNext()) {      VPlexClusterInfo clusterInfo=clusterInfoIter.next();      if (!clusterInfo.getName().equals(clusterName)) {        clusterInfoIter.remove();      }    }    VPlexConsistencyGroupInfo cgInfo=_discoveryMgr.findConsistencyGroup(cgName,clusterInfoList,true);    List<String> visibleClusters=cgInfo.getVisibility();    if (visibleClusters.size() > 1) {      _cgMgr.setDetachRuleNoAutomaticWinner(cgInfo);      _cgMgr.setConsistencyGroupStorageClusters(cgInfo,new ArrayList<VPlexClusterInfo>());      _cgMgr.setConsistencyGroupVisibility(cgInfo,clusterInfoList);      _cgMgr.setConsistencyGroupStorageClusters(cgInfo,clusterInfoList);    } else     if (!visibleClusters.contains(clusterName)) {      _cgMgr.setConsistencyGroupStorageClusters(cgInfo,new ArrayList<VPlexClusterInfo>());      _cgMgr.setConsistencyGroupVisibility(cgInfo,clusterInfoList);      _cgMgr.setConsistencyGroupStorageClusters(cgInfo,clusterInfoList);    }  } else {    VPlexConsistencyGroupInfo cgInfo=_discoveryMgr.findConsistencyGroup(cgName,clusterInfoList,true);    List<String> visibleClusters=cgInfo.getVisibility();    if (visibleClusters.size() != 2) {      _cgMgr.setConsistencyGroupStorageClusters(cgInfo,new ArrayList<VPlexClusterInfo>());      _cgMgr.setConsistencyGroupVisibility(cgInfo,clusterInfoList);      _cgMgr.setConsistencyGroupStorageClusters(cgInfo,clusterInfoList);      VPlexClusterInfo winningCluster=null;      Iterator<VPlexClusterInfo> clusterInfoIter=clusterInfoList.iterator();      while (clusterInfoIter.hasNext()) {        VPlexClusterInfo clusterInfo=clusterInfoIter.next();        if (clusterInfo.getName().equals(clusterName)) {          winningCluster=clusterInfo;          break;        }      }      _cgMgr.setDetachRuleWinner(cgInfo,winningCluster);    }  }}  }
class C{  public static <I,A,SEP>Parser<I,IList<A>> sepEndBy1(Parser<I,A> p,Parser<I,SEP> sep){  return bind(p,null);}  }
class C{  public SQLTimeoutException(){}  }
class C{  public static int generate(String value){  int len=value.length();  int crc=0;  for (int i=0; i < len; i++) {    crc=next(crc,value.charAt(i));  }  return crc;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  protected void sequence_LiteralOrComputedPropertyName(ISerializationContext context,LiteralOrComputedPropertyName semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private int recursiveEmitLine(final HtmlEscapeStringBuilder out,final String in,int start,MarkToken token){  int pos=start, a, b;  final HtmlEscapeStringBuilder temp=new HtmlEscapeStringBuilder();  while (pos < in.length()) {    final MarkToken mt=this.getToken(in,pos);    if (token != MarkToken.NONE && (mt == token || token == MarkToken.EM_STAR && mt == MarkToken.STRONG_STAR || token == MarkToken.EM_UNDERSCORE && mt == MarkToken.STRONG_UNDERSCORE)) {      return pos;    }switch (mt) {case LINK:      temp.reset();    b=this.checkLink(temp,in,pos);  if (b > 0) {    out.appendHtml(temp);    pos=b;  } else {    out.appendHtml(in.charAt(pos));  }break;case EM_STAR:case EM_UNDERSCORE:temp.reset();b=this.recursiveEmitLine(temp,in,pos + 1,mt);if (b > 0) {this.config.decorator.openEmphasis(out);out.appendHtml(temp);this.config.decorator.closeEmphasis(out);pos=b;} else {out.appendHtml(in.charAt(pos));}break;case STRONG_STAR:case STRONG_UNDERSCORE:temp.reset();b=this.recursiveEmitLine(temp,in,pos + 2,mt);if (b > 0) {this.config.decorator.openStrong(out);out.appendHtml(temp);this.config.decorator.closeStrong(out);pos=b + 1;} else {out.appendHtml(in.charAt(pos));}break;case STRIKE:temp.reset();b=this.recursiveEmitLine(temp,in,pos + 2,mt);if (b > 0) {this.config.decorator.openStrike(out);out.appendHtml(temp);this.config.decorator.closeStrike(out);pos=b + 1;} else {out.appendHtml(in.charAt(pos));}break;case SUPER:temp.reset();b=this.recursiveEmitLine(temp,in,pos + 1,mt);if (b > 0) {this.config.decorator.openSuper(out);out.appendHtml(temp);this.config.decorator.closeSuper(out);pos=b;} else {out.appendHtml(in.charAt(pos));}break;case CODE_SINGLE:case CODE_DOUBLE:a=pos + (mt == MarkToken.CODE_DOUBLE ? 2 : 1);b=this.findToken(in,a,mt);if (b > 0) {pos=b + (mt == MarkToken.CODE_DOUBLE ? 1 : 0);while (a < b && in.charAt(a) == ' ') {a++;}if (a < b) {while (in.charAt(b - 1) == ' ') {b--;}this.config.decorator.openCodeSpan(out);out.appendHtml(in.substring(a,b));this.config.decorator.closeCodeSpan(out);}} else {out.appendHtml(in.charAt(pos));}break;case USER:if (token == MarkToken.LINK) {out.appendHtml(in.charAt(pos));} else {temp.reset();b=this.checkUserLink(temp,in,pos);if (b > 0) {out.appendHtml(temp);pos=b;} else {out.appendHtml(in.charAt(pos));}}break;case ZONE:if (token == MarkToken.LINK) {out.appendHtml(in.charAt(pos));} else {temp.reset();b=this.checkZoneLink(temp,in,pos);if (b > 0) {out.appendHtml(temp);pos=b;} else {out.appendHtml(in.charAt(pos));}}break;case ESCAPE:pos++;default :out.appendHtml(in.charAt(pos));break;}pos++;}return -1;}  }
class C{  TextJustifier(GlyphJustificationInfo[] info,int start,int limit){  this.info=info;  this.start=start;  this.limit=limit;  if (DEBUG) {    System.out.println("start: " + start + ", limit: "+ limit);    for (int i=start; i < limit; i++) {      GlyphJustificationInfo gji=info[i];      System.out.println("w: " + gji.weight + ", gp: "+ gji.growPriority+ ", gll: "+ gji.growLeftLimit+ ", grl: "+ gji.growRightLimit);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.396 -0500",hash_original_method="C63EF04ECCAE1AA00B9666D00D691AB5",hash_generated_method="9F54E8BA14C1EF1883138F7932DF7DB6") private final void moveDeferredMessageAtFrontOfQueue(){  for (int i=mDeferredMessages.size() - 1; i >= 0; i--) {    Message curMsg=mDeferredMessages.get(i);    if (mDbg)     Log.d(TAG,"moveDeferredMessageAtFrontOfQueue; what=" + curMsg.what);    sendMessageAtFrontOfQueue(curMsg);  }  mDeferredMessages.clear();}  }
class C{  private static int findChainEnd(Coordinate[] pts,int start){  int safeStart=start;  while (safeStart < pts.length - 1 && pts[safeStart].equals2D(pts[safeStart + 1])) {    safeStart++;  }  if (safeStart >= pts.length - 1) {    return pts.length - 1;  }  int chainQuad=Quadrant.quadrant(pts[safeStart],pts[safeStart + 1]);  int last=start + 1;  while (last < pts.length) {    if (!pts[last - 1].equals2D(pts[last])) {      int quad=Quadrant.quadrant(pts[last - 1],pts[last]);      if (quad != chainQuad)       break;    }    last++;  }  return last - 1;}  }
class C{  public static DoubleMatrix2D plus(DoubleMatrix2D A,DoubleMatrix2D B){  return A.assign(B,F.plus);}  }
class C{  @Override public void writeFile(final String filename){  log.info("Writing CountsSimComparison to " + filename);  try (BufferedWriter out=new BufferedWriter(new FileWriter(filename))){    for (int i=0; i < COLUMNHEADERS.length; i++) {      out.write(COLUMNHEADERS[i]);      out.write(SEPARATOR);    }    out.write(NEWLINE);    for (    CountSimComparison csc : this.countComparisonFilter.getCountsForHour(null)) {      out.write(csc.getId().toString());      out.write(SEPARATOR);      out.write(Integer.toString(csc.getHour()));      out.write(SEPARATOR);      out.write(this.numberFormat.format(csc.getSimulationValue()));      out.write(SEPARATOR);      out.write(this.numberFormat.format(csc.getCountValue()));      out.write(SEPARATOR);      out.write(this.numberFormat.format(csc.calculateRelativeError()));      out.write(NEWLINE);    }  } catch (  IOException e) {    e.printStackTrace();  }  this.writeAWTVTable(filename);}  }
class C{  protected void doFireDocumentChanged(DocumentEvent event){  boolean changed=fDocumentPartitioningChangedEvent != null && !fDocumentPartitioningChangedEvent.isEmpty();  Region change=changed ? fDocumentPartitioningChangedEvent.getCoverage() : null;  doFireDocumentChanged(event,changed,change);}  }
class C{  public SecP192R1Point(ECCurve curve,ECFieldElement x,ECFieldElement y){  this(curve,x,y,false);}  }
class C{  public static double sin(double radians){  return Math.sin(radians);}  }
class C{  public void testLog(){  assert log.isDebugEnabled() == true;  assert log.isInfoEnabled() == true;  log.debug("This is 'debug' message.");  log.info("This is 'info' message.");  log.warning("This is 'warning' message.");  log.warning("This is 'warning' message.",new Exception("It's a test warning exception"));  log.error("This is 'error' message.");  log.error("This is 'error' message.",new Exception("It's a test error exception"));}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(TestMax.class);}  }
class C{  private PropertyDescriptor[] propertyDescriptors(Class c) throws SQLException {  BeanInfo beanInfo;  try {    beanInfo=Introspector.getBeanInfo(c);  } catch (  IntrospectionException e) {    throw new SQLException("Bean introspection failed: " + e.getMessage());  }  return beanInfo.getPropertyDescriptors();}  }
class C{  public static Set<URI> fetchSRDFTargetVirtualPools(DbClient dbClient){  Set<URI> srdfProtectedTargetVPools=new HashSet<URI>();  try {    List<URI> vpoolRemoteSettingURIs=dbClient.queryByType(VpoolRemoteCopyProtectionSettings.class,true);    Iterator<VpoolRemoteCopyProtectionSettings> vPoolRemoteSettingsItr=dbClient.queryIterativeObjects(VpoolRemoteCopyProtectionSettings.class,vpoolRemoteSettingURIs,true);    while (vPoolRemoteSettingsItr.hasNext()) {      VpoolRemoteCopyProtectionSettings rSetting=vPoolRemoteSettingsItr.next();      if (null != rSetting && !NullColumnValueGetter.isNullURI(rSetting.getVirtualPool())) {        srdfProtectedTargetVPools.add(rSetting.getVirtualPool());      }    }  } catch (  Exception ex) {    log.error("Exception occurred while fetching SRDF enabled virtualpools",ex);  }  return srdfProtectedTargetVPools;}  }
class C{  public ContextData currentContextData(){  return interruptedContextData;}  }
class C{  protected int engineDoFinal(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws IllegalBlockSizeException, ShortBufferException, BadPaddingException {  return core.doFinal(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  public Jerry next(){  List<Node> result=new NodeList(nodes.length);  for (  Node node : nodes) {    result.add(node.getNextSiblingElement());  }  return new Jerry(this,result);}  }
class C{  protected boolean canResolveCustomType(Object arg){  return false;}  }
class C{  public EntityMigrationBuilder renameManyAssociation(String from,String to){  migrationBuilder.builder.entityMigrationRules().addRule(new EntityMigrationRule(migrationBuilder.fromVersion,migrationBuilder.toVersion,entityTypes,new RenameManyAssociation(from,to)));  return this;}  }
class C{  @Override public void onSearchClick(SearchActionBar searchview,CharSequence query){  if (query.toString().equalsIgnoreCase("")) {    Log.d("log","please enter your query for the search");  } else {    final CharSequence keywords=query;  }}  }
class C{  public void addExtensionPoint(ExtensionPoint extensionPoint){  fExtensionPoints.add(extensionPoint);}  }
class C{  private static byte[] generateSeed(){  try {    final ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    final DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  final IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  static NamedValue of(String name,Object value){  return null;}  }
class C{  public FixedWidthTextTableWriter(FixedWidthTextTableSchema schema){  m_schema=schema;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechildnodename.class,args);}  }
class C{  protected Size2DSyntax(float x,float y,int units){  if (x < 0.0f) {    throw new IllegalArgumentException("x < 0");  }  if (y < 0.0f) {    throw new IllegalArgumentException("y < 0");  }  if (units < 1) {    throw new IllegalArgumentException("units < 1");  }  this.x=(int)(x * units + 0.5f);  this.y=(int)(y * units + 0.5f);}  }
class C{  private void eigendecomposition(){  int N=problem.getNumberOfVariables();  lastEigenupdate=iteration;  if (diagonalIterations >= iteration) {    for (int i=0; i < N; i++) {      diagD[i]=Math.sqrt(C[i][i]);    }  } else {    for (int i=0; i < N; i++) {      for (int j=0; j <= i; j++) {        B[i][j]=B[j][i]=C[i][j];      }    }    double[] offdiag=new double[N];    tred2(N,B,diagD,offdiag);    tql2(N,diagD,offdiag,B);    if (checkConsistency) {      checkEigenSystem(N,C,diagD,B);    }    for (int i=0; i < N; i++) {      if (diagD[i] < 0) {        System.err.println("an eigenvalue has become negative");        diagD[i]=0;      }      diagD[i]=Math.sqrt(diagD[i]);    }  }}  }
class C{  @Override public void meet(Regex node){  super.meetNode(node);  if (isConstant(node.getArg()) && isConstant(node.getPatternArg()) && isConstant(node.getFlagsArg())) {    try {      Value value=strategy.evaluate(node,EmptyBindingSet.getInstance());      node.replaceWith(new ValueConstant(value));    } catch (    ValueExprEvaluationException e) {      logger.debug("Failed to evaluate BinaryValueOperator with two constant arguments",e);    }catch (    QueryEvaluationException e) {      logger.error("Query evaluation exception caught",e);    }  }}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return FetchHealthDiagnosisResponse.create(dm,this.getSender(),this.id,this.healthCode);}  }
class C{  public PostfixExpression newPostfixExpression(){  PostfixExpression result=new PostfixExpression(this);  return result;}  }
class C{  private static final void usage(){  System.err.println("usage: java TreeAdd -l <levels> [-p] [-m] [-h]");  System.err.println("    -l the number of levels in the tree");  System.err.println("    -m (print informative messages)");  System.err.println("    -p (print the result>)");  System.err.println("    -h (this message)");}  }
class C{  private void killAll(String name){  int sz=size();  for (int i=sz - 1; i >= 0; i--) {    String n=getName(i);    if (name == n || (name != null && name.equals(n))) {      remove(i);    }  }}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  private int putForNullKey(int value){  for (Entry e=table[0]; e != null; e=e.next) {    if (e.key == null) {      int oldValue=e.value;      e.value=value;      e.recordAccess(this);      return oldValue;    }  }  modCount++;  addEntry(0,null,value,0);  return 0;}  }
class C{  public static Sentence newConjunction(Sentence... conjuncts){  return newConjunction(Arrays.asList(conjuncts));}  }
class C{  public InitialTransition(State<S,E> target){  super(null,target,null,null,TransitionKind.INITIAL,null,null,null);}  }
class C{  public static void main(String argv[]) throws Exception {  if (argv.length < 1) {    System.err.println("Usage: DmozParser <dmoz_file> [-subset <subsetDenominator>] [-includeAdultMaterial] [-skew skew] [-topicFile <topic list file>] [-topic <topic> [-topic <topic> [...]]]");    return;  }  int subsetDenom=1;  int skew=0;  String dmozFile=argv[0];  boolean includeAdult=false;  Pattern topicPattern=null;  Vector<String> topics=new Vector<String>();  Configuration conf=NutchConfiguration.create();  FileSystem fs=FileSystem.get(conf);  try {    for (int i=1; i < argv.length; i++) {      if ("-includeAdultMaterial".equals(argv[i])) {        includeAdult=true;      } else       if ("-subset".equals(argv[i])) {        subsetDenom=Integer.parseInt(argv[i + 1]);        i++;      } else       if ("-topic".equals(argv[i])) {        topics.addElement(argv[i + 1]);        i++;      } else       if ("-topicFile".equals(argv[i])) {        addTopicsFromFile(argv[i + 1],topics);        i++;      } else       if ("-skew".equals(argv[i])) {        skew=Integer.parseInt(argv[i + 1]);        i++;      }    }    DmozParser parser=new DmozParser();    if (!topics.isEmpty()) {      String regExp=new String("^(");      int j=0;      for (; j < topics.size() - 1; ++j) {        regExp=regExp.concat(topics.get(j));        regExp=regExp.concat("|");      }      regExp=regExp.concat(topics.get(j));      regExp=regExp.concat(").*");      LOG.info("Topic selection pattern = " + regExp);      topicPattern=Pattern.compile(regExp);    }    parser.parseDmozFile(new File(dmozFile),subsetDenom,includeAdult,skew,topicPattern);  }  finally {    fs.close();  }}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public static synchronized boolean deleteActivityDatabase(Context context){  if (lockHandler != null) {    lockHandler.closeDb();  }  DBHelper dbHelper=new DBHelper(context);  boolean result=true;  if (dbHelper.existsDB(DBConstants.DATABASE_NAME)) {    result=getContext().deleteDatabase(DBConstants.DATABASE_NAME);  }  result&=getContext().deleteDatabase(DATABASE_NAME);  return result;}  }
class C{  public boolean isStacked(){  return mStackSize > 1 ? true : false;}  }
class C{  @Override protected void initData(){  SQLiteRecyclerViewAdapter sqLiteRecyclerViewAdapter=new SQLiteRecyclerViewAdapter(this);  this.recyclerView.setAdapter(sqLiteRecyclerViewAdapter);  ArrayList<SQLiteData> allData=new ArrayList<>();  allData.add(new SQLiteData());  sqLiteRecyclerViewAdapter.setList(allData);  sqLiteRecyclerViewAdapter.notifyDataSetChanged();}  }
class C{  public int value(){  return ((Depth)get()).get();}  }
class C{  public boolean isParallelMode(){  return parallel;}  }
class C{  public boolean visit(ArrayCreation node){  return true;}  }
class C{  public static Line fromSegment(Vec4 pa,Vec4 pb){  return new Line(pa,new Vec4(pb.x - pa.x,pb.y - pa.y,pb.z - pa.z,0));}  }
class C{  private void updateGPSStatusDisplay(){  final LocationManager locationManager=(LocationManager)getActivity().getSystemService(Context.LOCATION_SERVICE);  gps.setText(Boolean.toString(locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)));}  }
class C{  private T insertCacheObject(){  T cachedObject=ModelInflater.inflate(this,mTableDetails);  mObjectCache.put(getPosition(),new SoftReference<>(cachedObject));  return cachedObject;}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  if (bytes != null && bytes.length >= 4) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Node retval;  Node firstChild;  Node otherChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  firstChild=titleAttr.getFirstChild();  assertNotNull("attrChildNotNull",firstChild);  titleAttr.setValue("Tomorrow");  firstChild.setNodeValue("impl reused node");  value=titleAttr.getValue();  assertEquals("attrValue","Tomorrow",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Tomorrow",value);  firstChild=titleAttr.getLastChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","Tomorrow",value);  otherChild=firstChild.getNextSibling();  assertNull("nextSiblingIsNull",otherChild);}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  public String showPrompt(String message){  return null;}  }
class C{  public void toFront(){  moveToFront();}  }
class C{  @Override public double stdDev(){  return convertFromNS(histogram.stdDev());}  }
class C{  @Override public boolean checkAppExist(User user,String applicationName) throws ServiceException, CheckException {  logger.info("--CHECK APP EXIST--");  if (applicationDAO.findByNameAndUser(user.getId(),applicationName,cuInstanceName) == null) {    return false;  } else {    return true;  }}  }
class C{  public OutputAnalyzer(String buf){  this(buf,buf);}  }
class C{  private boolean isValidStoryboardLocation(final String location){  if (location.startsWith("\\\\")) {    final String path=location.substring(2);    final int index=path.indexOf('\\');    return index > 0 && path.length() > index + 1;  }  try {    final URI uri=URIUtils.newURI(location);    if ("http".equalsIgnoreCase(uri.getScheme()) == false && "https".equalsIgnoreCase(uri.getScheme()) == false) {      return false;    }    final String path=uri.getPath();    return path != null && path.length() > 0;  } catch (  final IllegalArgumentException e) {    try {      new File(location).toURI().toString();      return true;    } catch (    final Throwable t) {    }  }  return false;}  }
class C{  public void endDocument(){  try {    handler.endElement("",TAG_PVLIST,TAG_PVLIST);    handler.endDocument();    documentStarted=false;  } catch (  Throwable e) {    e.printStackTrace();  }}  }
class C{  public static void registerPseudoFunction(Class<? extends PseudoFunction> pseudoFunctionType){  PseudoFunction pseudoFunction;  try {    pseudoFunction=pseudoFunctionType.newInstance();  } catch (  Exception ex) {    throw new CSSellyException(ex);  }  PSEUDO_FUNCTION_MAP.put(pseudoFunction.getPseudoFunctionName(),pseudoFunction);}  }
class C{  public String heuristicStopTipText(){  return "If heuristicStop > 0, the heuristic for greedy stopping while cross-validating the number of " + "LogitBoost iterations is enabled. This means LogitBoost is stopped if no new error minimum " + "has been reached in the last heuristicStop iterations. It is recommended to use this heuristic, "+ "it gives a large speed-up especially on small datasets. The default value is 50.";}  }
class C{  public static Function lastInsertRowid(){  return new Function("last_insert_rowid()");}  }
class C{  public boolean commit() throws LoginException {  if (isAuthSucceeded()) {    if (iExternalUid == null || iExternalUid.trim().length() == 0)     throw new LoginException("External UID not found");    getSubject().getPrincipals().add(new AuthenticatedUser(getUser(),iExternalUid));    setCommitSucceeded(true);    return true;  } else {    reset();    return false;  }}  }
class C{  @Override public void addRow(Value[] values){  if (distinct) {    if (distinctRows != null) {      ValueArray array=ValueArray.get(values);      distinctRows.put(array,values);      rowCount=distinctRows.size();      if (rowCount > maxMemoryRows) {        throw DbException.getUnsupportedException("too big result row " + maxMemoryRows);      }    } else {      rowCount=external.addRow(values);    }    return;  }  rows.add(values);  rowCount++;  if (rows.size() > maxMemoryRows) {    if (external == null) {    }    addRowsToDisk();  }}  }
class C{  private void randomInvalidator(ViewGroup parent){  for (int i=0; i < parent.getChildCount(); ++i) {    View child=parent.getChildAt(i);    if (Math.random() < .5) {      child.invalidate();    }    if (child instanceof ViewGroup) {      randomInvalidator((ViewGroup)child);    }  }}  }
class C{  public void normalizePopParameters(){  if (Op.matches(type(0),Op.NULL)) {    argument[0]=new FullArgument(Op.FPUREG,8,1);    argument[1]=new FullArgument(Op.FPUREG,8,0);    if (numArguments < 2) {      numArguments=2;    }    return;  }  if (Op.matches(type(1),Op.NULL)) {    argument[1]=new FullArgument(Op.FPUREG,8,0);    if (numArguments < 2) {      numArguments=2;    }  }}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  public boolean drawVolume(){  return this.drawVolume;}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  protected void endOfStreamError(String encoding) throws IOException {  throw new IOException(Messages.formatMessage("end.of.stream",new Object[]{encoding}));}  }
class C{  public void close() throws IOException {  gifWriter.endWriteSequence();}  }
class C{  public void rewindToPosition(int position){  if (position > bufferPos - bufferStart) {    throw new IllegalArgumentException("Position " + position + " is beyond current "+ (bufferPos - bufferStart));  }  if (position < 0) {    throw new IllegalArgumentException("Bad position " + position);  }  bufferPos=bufferStart + position;}  }
class C{  public List<IMessage> deleteBefore(IMessage message) throws RateLimitException, DiscordException, MissingPermissionsException {  return deleteBefore(indexOf(message));}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (obj == null || obj instanceof Annotation == false)   return false;  Annotation other=(Annotation)obj;  if (getTypeName().equals(other.getTypeName()) == false)   return false;  LinkedHashMap otherMembers=other.members;  if (members == otherMembers)   return true; else   if (members == null)   return otherMembers == null; else   if (otherMembers == null)   return false; else   return members.equals(otherMembers);}  }
class C{  private void appendStateToBuilder(State s,StringBuilder sb){  Integer n=getStateNumber(s);  sb.append(n);  sb.append(";\n ");}  }
class C{  static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  public String toASCIIString(){  StringBuilder result=new StringBuilder();  ASCII_ONLY.appendEncoded(result,toString());  return result.toString();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (sourceFragmentType: ");  result.append(sourceFragmentType);  result.append(", paths: ");  result.append(paths);  result.append(')');  return result.toString();}  }
class C{  @Override public String toString(){  return super.toString().toLowerCase(Locale.ROOT);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION__ANNOTATION_LIST:    return basicSetAnnotationList(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public XML(File file,String options) throws IOException, ParserConfigurationException, SAXException {  this(PApplet.createReader(file),options);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:21.624 -0500",hash_original_method="6C2592B3CD6F53864B4519754098E028",hash_generated_method="FE5DDA1B1C9BF428E2686AE2FB35F724") public static boolean addressTypeMatches(InetAddress left,InetAddress right){  return (((left instanceof Inet4Address) && (right instanceof Inet4Address)) || ((left instanceof Inet6Address) && (right instanceof Inet6Address)));}  }
class C{  private static long[] computeParameters(final LongIterator iterator){  long v=-1, prev=-1, c=0;  while (iterator.hasNext()) {    v=iterator.nextLong();    if (prev > v)     throw new IllegalArgumentException("The list of values is not monotone: " + prev + " > "+ v);    prev=v;    c++;  }  return new long[]{c,v};}  }
class C{  void verifyAllocator(){  final IdentityHashMap<UnsafeDirectLittleEndian,BaseAllocator> buffersSeen=new IdentityHashMap<>();  verifyAllocator(buffersSeen);}  }
class C{  private static boolean classNamesMatch(String sootClassName,String jdtClassName){  if (sootClassName.equals(jdtClassName))   return true;  String strippedSootClassName=sootClassName.replaceAll("\\$\\d+","\\$");  return strippedSootClassName.equals(jdtClassName);}  }
class C{  public Mapping show(Class<? extends View> view){  return new Mapping(view);}  }
class C{  public LinePathPoint createFromParcel(Parcel in){  LinePathPoint r=new LinePathPoint();  r.readFromParcel(in);  return r;}  }
class C{  public MoreLikeThisQueryBuilder maxWordLength(int maxWordLength){  this.maxWordLength=maxWordLength;  return this;}  }
class C{  public Matrix4x3d m01(double m01){  this.m01=m01;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public Object resolveRemote(String type,String url) throws IOException {  HessianRemoteResolver resolver=getRemoteResolver();  if (resolver != null)   return resolver.lookup(type,url); else   return new HessianRemote(type,url);}  }
class C{  protected Drawing createDrawing(){  Drawing drawing=new QuadTreeDrawing();  DOMStorableInputOutputFormat ioFormat=new DOMStorableInputOutputFormat(new DrawFigureFactory());  drawing.addInputFormat(ioFormat);  ImageFigure prototype=new ImageFigure();  drawing.addInputFormat(new ImageInputFormat(prototype));  drawing.addInputFormat(new TextInputFormat(new TextFigure()));  TextAreaFigure taf=new TextAreaFigure();  taf.setBounds(new Point2D.Double(10,10),new Point2D.Double(60,40));  drawing.addInputFormat(new TextInputFormat(taf));  drawing.addOutputFormat(ioFormat);  drawing.addOutputFormat(new ImageOutputFormat());  return drawing;}  }
class C{  public Date rollDate(Date base){  return rollDate(base,TimeZone.getDefault());}  }
class C{  public String toCommaSeparatedString(){  StringBuffer sb=new StringBuffer(VERSION);  sb.append(',');  for (int i=0; i < Token.NUM_TOKEN_TYPES; i++) {    sb.append(i).append(',');    Style ss=styles[i];    if (ss == null) {      sb.append("-,-,f,-,,,");      continue;    }    Color c=ss.foreground;    sb.append(c != null ? (getHexString(c) + ",") : "-,");    c=ss.background;    sb.append(c != null ? (getHexString(c) + ",") : "-,");    sb.append(ss.underline ? "t," : "f,");    Font font=ss.font;    if (font != null) {      sb.append(font.getFamily()).append(',').append(font.getStyle()).append(',').append(font.getSize()).append(',');    } else {      sb.append("-,,,");    }  }  return sb.substring(0,sb.length() - 1);}  }
class C{  public static Plane detectPlane(List<Vector3> points,float distanceThresh,int numIterations,int sufficientSupport){  int pointCount=points.size();  boolean[] picked=new boolean[pointCount];  List<Vector3> supportPointsMax=new LinkedList<>();  int supportMax=0;  while (numIterations > 0) {    numIterations--;    int[] randomPointIndices=new int[3];    for (int i=0; i < 3; i++) {      do {        randomPointIndices[i]=(int)(Math.random() * pointCount);      } while (picked[randomPointIndices[i]]);      picked[randomPointIndices[i]]=true;    }    picked[randomPointIndices[0]]=false;    picked[randomPointIndices[1]]=false;    picked[randomPointIndices[2]]=false;    Vector3 p0=points.get(randomPointIndices[0]);    Vector3 p1=points.get(randomPointIndices[1]);    Vector3 p2=points.get(randomPointIndices[2]);    Plane plane=Plane.createHessePlane(p0,p1,p2);    computeSupport(plane,points,distanceThresh);    int support=supportingPoints.size();    if (support > supportMax) {      supportMax=support;      supportPointsMax=supportingPoints;    }    if (supportMax >= sufficientSupport) {      break;    }  }  Plane plane=planeRegression(supportPointsMax);  computeSupport(plane,points,distanceThresh);  return (plane);}  }
class C{  public boolean addParent2(SessionNode parent){  if (this.parents.contains(parent)) {    return false;  }  if (parent == this) {    return false;  }  List<SessionNode> newParents=new ArrayList<>(this.parents);  newParents.add(parent);  for (  Class modelClass : this.modelClasses) {    Class[][] parentClasses=new Class[newParents.size()][];    int[] numModels=new int[newParents.size()];    for (int j=0; j < newParents.size(); j++) {      SessionNode node=newParents.get(j);      parentClasses[j]=node.getModelClasses();      numModels[j]=parentClasses[j].length;    }    if (isConsistentModelClass(modelClass,parentClasses,false)) {      if (this.getModel() == null) {        this.parents.add(parent);        parent.addChild(this);        parent.addSessionListener(getSessionHandler());        getSessionSupport().fireParentAdded(parent,this);        return true;      } else {        sessionSupport.fireAddingEdge();        if (isNextEdgeAddAllowed()) {          setNextEdgeAddAllowed(true);          this.parents.add(parent);          parent.addChild(this);          parent.addSessionListener(getSessionHandler());          getSessionSupport().fireParentAdded(parent,this);          destroyModel();          return true;        } else {          return false;        }      }    }  }  return false;}  }
class C{  public synchronized long decrAndGetSeqno(){  seqno--;  notifyAll();  return seqno;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  componentEClass=createEClass(COMPONENT);  createEReference(componentEClass,COMPONENT__INPUT_COMPONET_REFS);  createEReference(componentEClass,COMPONENT__OUTPUT_COMPONET_REFS);  createEReference(componentEClass,COMPONENT__INPUT_PORT_REFS);  createEReference(componentEClass,COMPONENT__OUTPUT_PORT_REFS);  createEAttribute(componentEClass,COMPONENT__ID);  createEAttribute(componentEClass,COMPONENT__INPUT_CNT);  createEAttribute(componentEClass,COMPONENT__OUTPUT_CNT);  portEClass=createEClass(PORT);  createEAttribute(portEClass,PORT__ID);  createEAttribute(portEClass,PORT__TYPE);}  }
class C{  public final void waitForAllToProcess() throws InterruptedException {  if (Thread.interrupted())   throw new InterruptedException();synchronized (this.txInProgress) {    while (!this.txInProgress.isEmpty()) {      this.txInProgress.wait();    }  }}  }
class C{  public GuacamoleInstruction(String opcode,List<String> args){  this.opcode=opcode;  this.args=Collections.unmodifiableList(args);}  }
class C{  public void onResume(){  if (activeProvider != null) {    activeProvider.onResume();  }  gpServicesSwitchTask.resume();}  }
class C{  protected Gamma(){}  }
class C{  public boolean isSetAa(){  return this.aa != null;}  }
class C{  protected Instance filterInstance(Instance inst) throws Exception {  if (!m_checksTurnedOff) {    m_Missing.input(inst);    m_Missing.batchFinished();    inst=m_Missing.output();  }  if (m_NominalToBinary != null) {    m_NominalToBinary.input(inst);    m_NominalToBinary.batchFinished();    inst=m_NominalToBinary.output();  }  if (m_Filter != null) {    m_Filter.input(inst);    m_Filter.batchFinished();    inst=m_Filter.output();  }  return inst;}  }
class C{  public Xform(Integer formId,String xformXml,String layoutXml,String localeXml,String javaScriptSrc,String css){  this(formId,xformXml);  setLayoutXml(layoutXml);  setLocaleXml(localeXml);  setJavaScriptSrc(javaScriptSrc);  setCss(css);  setCreator(Context.getAuthenticatedUser());}  }
class C{  public double localScore(int i,int... parents){  ConditionalGaussianLikelihood.Ret ret=likelihood.getLikelihoodRatio(i,parents);  int N=dataSet.getNumRows();  double lik=ret.getLik();  int k=ret.getDof();  double prior=getStructurePrior(parents);  return 2.0 * lik - k * Math.log(N) + prior;}  }
class C{  public static ExecutorService newWorkStealingPool(int parallelism){  return new ForkJoinPool(parallelism,ForkJoinPool.defaultForkJoinWorkerThreadFactory,null,true);}  }
class C{  private static void copyResource(ClassLoader loader,String resourceName,File destination) throws IOException {  if (destination.exists()) {    return;  }  InputStream in=loader.getResourceAsStream(PACKAGE_PATH + resourceName);  FileOutputStream out=new FileOutputStream(destination);  Streams.copy(in,out);  in.close();  out.close();}  }
class C{  protected String engineGetJCEProviderName(){  return this.signatureAlgorithm.getProvider().getName();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:05.152 -0500",hash_original_method="9C6948D2F9ACB5C855CB1B70AF4DF1F8",hash_generated_method="40EB47293DA39AC24518E5C7DC42B194") public String encodeBody(){  StringBuffer retval=new StringBuffer();  String s1=getTimeStampAsString();  String s2=getDelayAsString();  if (s1.equals("") && s2.equals(""))   return "";  if (!s1.equals(""))   retval.append(s1);  if (!s2.equals(""))   retval.append(" ").append(s2);  return retval.toString();}  }
class C{  public void flush() throws IOException {  if (bufferModified) {    file.seek(bufferStart);    file.write(buffer,0,dataSize);    bufferModified=false;  }}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  public void testDecodeZigZag() throws Exception {  assertEquals(0,CodedInputStream.decodeZigZag32(0));  assertEquals(-1,CodedInputStream.decodeZigZag32(1));  assertEquals(1,CodedInputStream.decodeZigZag32(2));  assertEquals(-2,CodedInputStream.decodeZigZag32(3));  assertEquals(0x3FFFFFFF,CodedInputStream.decodeZigZag32(0x7FFFFFFE));  assertEquals(0xC0000000,CodedInputStream.decodeZigZag32(0x7FFFFFFF));  assertEquals(0x7FFFFFFF,CodedInputStream.decodeZigZag32(0xFFFFFFFE));  assertEquals(0x80000000,CodedInputStream.decodeZigZag32(0xFFFFFFFF));  assertEquals(0,CodedInputStream.decodeZigZag64(0));  assertEquals(-1,CodedInputStream.decodeZigZag64(1));  assertEquals(1,CodedInputStream.decodeZigZag64(2));  assertEquals(-2,CodedInputStream.decodeZigZag64(3));  assertEquals(0x000000003FFFFFFFL,CodedInputStream.decodeZigZag64(0x000000007FFFFFFEL));  assertEquals(0xFFFFFFFFC0000000L,CodedInputStream.decodeZigZag64(0x000000007FFFFFFFL));  assertEquals(0x000000007FFFFFFFL,CodedInputStream.decodeZigZag64(0x00000000FFFFFFFEL));  assertEquals(0xFFFFFFFF80000000L,CodedInputStream.decodeZigZag64(0x00000000FFFFFFFFL));  assertEquals(0x7FFFFFFFFFFFFFFFL,CodedInputStream.decodeZigZag64(0xFFFFFFFFFFFFFFFEL));  assertEquals(0x8000000000000000L,CodedInputStream.decodeZigZag64(0xFFFFFFFFFFFFFFFFL));}  }
class C{  public void clearRequestId(){  requestId=-1;}  }
class C{  public static void main(String... args) throws Exception {  createScript();  new InitDatabaseFromJar().initDb();}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public void doPrint(){  try {    PrinterJob pj=PrinterJob.getPrinterJob();    PageFormat pageFormat=new PageFormat();    ComponentPrintService vista=new ComponentPrintService(((JFrame)this.getFrame()).getContentPane(),pageFormat);    vista.scaleToFit(true);    pj.validatePage(pageFormat);    pj.setPageable(vista);    if (pj.printDialog()) {      pj.print();    }  } catch (  Exception ex) {    _log.error("Error printing msg: " + ex.getMessage(),ex);  }}  }
class C{  public EventServiceCallback(Parcel parcel){  mResponder=(DefaultServiceImpl.EventServiceResponder)parcel.readStrongBinder();}  }
class C{  public static StoreReader createReader(File file){  return StoreImpl.createReader(file,newConfiguration());}  }
class C{  @Override public boolean remove(Object value){  return _set.remove(unwrap(value));}  }
class C{  @Override public void openDrawer(){  Toolkit.getDefaultToolkit().beep();}  }
class C{  public List<String> generateParenthesis(int n){  List<String> ans=new ArrayList<String>();  if (n <= 0)   return ans;  dfs(n,0,"",ans);  return ans;}  }
class C{  private boolean teleportPlayer(final Player player,final int targetX,final int targetY,final StendhalRPZone targetZone){  return player.teleport(targetZone,targetX,targetY,null,player);}  }
class C{  public Boolean isIoLoadBalanceEnabled(){  return ioLoadBalanceEnabled;}  }
class C{  public SearchRequest extraSource(byte[] source){  return extraSource(source,0,source.length);}  }
class C{  @VisibleForTesting boolean updateCurrentFile(TrackedFileList newSnapshot) throws IOException {  Preconditions.checkNotNull(currentSnapshot);  Preconditions.checkNotNull(currentOpenFile);  TrackedFileList oldSnapshot=currentSnapshot;  TrackedFile oldCurrentOpenFile=currentOpenFile;  TrackedFileRotationAnalyzer analyzer=new TrackedFileRotationAnalyzer(currentSnapshot,newSnapshot,currentOpenFile);  if (!analyzer.getIncomingAnomalies().isEmpty()) {    for (    Map.Entry<TrackedFile,String> anomaly : analyzer.getIncomingAnomalies().entrySet()) {      onUnexpectedChangeDetected(newSnapshot,anomaly.getKey(),anomaly.getValue());    }  }  boolean currentFileTracked=false;  if (!analyzer.checkNoRotation()) {    onPossibleRotationDetected(newSnapshot);    if (!analyzer.allFilesHaveDisappeared()) {      if (analyzer.hasCounterpart(currentOpenFile)) {        if (analyzer.currentOpenFileWasTruncated()) {          int newIndex=analyzer.findCurrentOpenFileAfterTruncate();          if (newIndex >= 0) {            currentFileTracked=onRotationByTruncate(newSnapshot,newIndex);          } else {            currentFileTracked=onTruncationWithoutRotation(newSnapshot);          }        } else {          currentFileTracked=continueTailingCurrentFile(newSnapshot,analyzer.getCounterpartIndex(currentOpenFile));        }      } else {        currentFileTracked=onCurrentFileNotFound(newSnapshot);      }    } else {      currentFileTracked=onAllFilesDisappeared(newSnapshot);    }  } else {    currentFileTracked=onNoRotationDetected(newSnapshot,analyzer.getCounterpartIndex(currentOpenFile));  }  if (currentSnapshot == oldSnapshot)   throw new IllegalStateException("The current tracked file snapshot was not updated as expected.");  if (currentOpenFile == oldCurrentOpenFile)   throw new IllegalStateException("The current open file was not updated as expected.");  return currentFileTracked;}  }
class C{  public static ActionListener add(ActionListener a,ActionListener b){  return (ActionListener)addInternal(a,b);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:40.375 -0500",hash_original_method="4795393F1D971B9D48A1020105C314CF",hash_generated_method="10CC6D7619BABD67BC8ED71DFE8AAAC6") public void append(long key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=idealLongArraySize(pos + 1);    long[] nkeys=new long[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  protected Type(String name){  this.name=name;}  }
class C{  @Nullable static Option findOptionForOptionArgument(@NotNull final CommandLineArgument argument){  final ValidationResult validationResult=getValidationResult(argument);  if (validationResult == null) {    return null;  }  return validationResult.getOptionForOptionArgument(argument);}  }
class C{  protected void putSessionToken(HttpResponse response,HttpRequest request,String token){  String oldToken=sessionToken(request).orElse(null);  if (!Objects.equals(token,oldToken)) {    Session session=Optional.ofNullable(request.getSession()).orElse(new Session());    session.put(TOKEN_KEY,token);    response.setSession(session);  }}  }
class C{  protected void appendEncodedString(EncodedStringValue enStr){  assert (enStr != null);  int charset=enStr.getCharacterSet();  byte[] textString=enStr.getTextString();  if (null == textString) {    return;  }  mStack.newbuf();  PositionMarker start=mStack.mark();  appendShortInteger(charset);  appendTextString(textString);  int len=start.getLength();  mStack.pop();  appendValueLength(len);  mStack.copy();}  }
class C{  public boolean hasConnection(){  return mConnection != null;}  }
class C{  private void digestTo(MessageDigest md5,byte[] hash) throws GeneralSecurityException {  md5.digest(hash,0,hash.length);}  }
class C{  public static String dump(Map<?,?> map){  StringBuilder stringBuilder=new StringBuilder();  for (  Map.Entry<?,?> entry : map.entrySet()) {    stringBuilder.append(entry.getKey());    stringBuilder.append(" : ");    stringBuilder.append(entry.getValue());  }  return stringBuilder.toString();}  }
class C{  public void addPropertyToIS(String key,String value){  if (ignoreKey != null && ignoreKey.equals(key)) {    return;  }  if (bodyContent.length() > 0) {    bodyContent+="&";  }  bodyContent+=key + "=" + value;}  }
class C{  public static boolean exists(){  if (getLicenseFile() != null) {    return true;  }  return false;}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  private StoragePoolSetting checkStoragePoolSettingExistsInDB(CIMInstance settingInstance) throws IOException {  StoragePoolSetting setting=null;  @SuppressWarnings("deprecation") List<URI> settingURIs=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePoolSettingByIDConstraint(settingInstance.getPropertyValue(INSTANCEID).toString()));  if (!settingURIs.isEmpty()) {    setting=_dbClient.queryObject(StoragePoolSetting.class,settingURIs.get(0));  }  return setting;}  }
class C{  protected boolean RelativeLocationPath() throws javax.xml.transform.TransformerException {  if (!Step()) {    return false;  }  while (tokenIs('/')) {    nextToken();    if (!Step()) {      error(XPATHErrorResources.ER_EXPECTED_LOC_STEP,null);    }  }  return true;}  }
class C{  public static Chunk fromString(String s){  HashMap<String,String> map=DataUtils.parseMap(s);  int id=DataUtils.readHexInt(map,"chunk",0);  Chunk c=new Chunk(id);  c.block=DataUtils.readHexLong(map,"block",0);  c.len=DataUtils.readHexInt(map,"len",0);  c.pageCount=DataUtils.readHexInt(map,"pages",0);  c.pageCountLive=DataUtils.readHexInt(map,"livePages",c.pageCount);  c.mapId=DataUtils.readHexInt(map,"map",0);  c.maxLen=DataUtils.readHexLong(map,"max",0);  c.maxLenLive=DataUtils.readHexLong(map,"liveMax",c.maxLen);  c.metaRootPos=DataUtils.readHexLong(map,"root",0);  c.time=DataUtils.readHexLong(map,"time",0);  c.unused=DataUtils.readHexLong(map,"unused",0);  c.version=DataUtils.readHexLong(map,"version",id);  c.next=DataUtils.readHexLong(map,"next",0);  return c;}  }
class C{  protected SystemMember findSystemMember(GemFireVM vm,boolean compareConfig){  SystemMemberImpl member=null;synchronized (this.cacheServerSet) {    SERVERS:     for (Iterator iter=this.cacheServerSet.iterator(); iter.hasNext(); ) {      Future future=(Future)iter.next();      CacheServerImpl cacheServer=null;      for (; ; ) {        checkCancellation();        boolean interrupted=Thread.interrupted();        try {          cacheServer=(CacheServerImpl)future.get();          break;        } catch (        InterruptedException ex) {          interrupted=true;          continue;        }catch (        CancellationException ex) {          continue SERVERS;        }catch (        ExecutionException ex) {          handle(ex);          continue SERVERS;        } finally {          if (interrupted) {            Thread.currentThread().interrupt();          }        }      }      if (isSame(cacheServer,vm,compareConfig)) {        member=cacheServer;        break;      }    }  }  if (member == null) {synchronized (this.applicationSet) {      APPS:       for (Iterator iter=this.applicationSet.iterator(); iter.hasNext(); ) {        Future future=(Future)iter.next();        SystemMemberImpl application=null;        for (; ; ) {          checkCancellation();          boolean interrupted=Thread.interrupted();          try {            application=(SystemMemberImpl)future.get();            break;          } catch (          InterruptedException ex) {            interrupted=true;            continue;          }catch (          CancellationException ex) {            continue APPS;          }catch (          ExecutionException ex) {            handle(ex);            continue APPS;          } finally {            if (interrupted) {              Thread.currentThread().interrupt();            }          }        }        if (isSame(application,vm,compareConfig)) {          member=application;          break;        }      }    }  }  if (member != null && compareConfig) {    try {      member.setGemFireVM(vm);    } catch (    AdminException ex) {      logger.warn(LocalizedMessage.create(LocalizedStrings.AdminDistributedSystem_COULD_NOT_SET_THE_GEMFIRE_VM),ex);    }  }  return member;}  }
class C{  public void rm(String path,boolean recursive,boolean ignoreErrors) throws ReplicatorException {  FilePath remote=new FilePath(path);  try {    hdfsFileIO.delete(remote,recursive);  } catch (  FileIOException e) {    if (ignoreErrors) {      if (logger.isDebugEnabled()) {        logger.debug("Ignoring delete error: path=" + path,e);      }    } else {      throw new ReplicatorException("Unable to delete file or directory: hdfs path=" + path + " recursive="+ recursive+ " message="+ e.getMessage(),e);    }  }}  }
class C{  public BoxPanel(){  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));}  }
class C{  public <K,V>void saveToGeode(String regionPath,PairFunction<T,K,V> func){  rddf.saveToGeode(regionPath,func,rddf.defaultConnectionConf(),emptyStrStrMap());}  }
class C{  public ClusterException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Builder withLookingForStuckThread(boolean enable){  this.lookForStuckThread=enable;  return this;}  }
class C{  public GenericFeed retrievePageOfAccountInfoRequests(Date fromDate) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  String url=BASE_URL + "account/" + domain;  if (fromDate != null) {    url+="?fromDate=" + DATE_FORMAT.format(fromDate);  }  return getFeed(new URL(url),GenericFeed.class);}  }
class C{  protected void addHostCounter(final String metricName,final IGangliaMetadataMessage decl){  addHostCounter(metricName,decl,false);}  }
class C{  public boolean readNewStateFromCheckpoint(File file) throws IOException, ClassNotFoundException, OptionalDataException, ClassCastException, Exception {  FileInputStream f=new FileInputStream(file);  SimState state=SimState.readFromCheckpoint(f);  f.close();  if (!validSimState(state))   return false;  finish();  load(state);  return true;}  }
class C{  public T caseScopedElement(ScopedElement object){  return null;}  }
class C{  public boolean isBlockSealed(World world,BlockPosition pos){  if (pos.y >= 0 && pos.y <= 256) {    if (world instanceof WorldServer && !((WorldServer)world).theChunkProviderServer.chunkExists(pos.x >> 4,pos.z >> 4)) {      return false;    }    Block block=world.getBlock(pos.x,pos.y,pos.z);    int meta=world.getBlockMetadata(pos.x,pos.y,pos.z);    Material material=block.getMaterial();    if (blockAllowList.contains(block) || materialAllowList.contains(material)) {      return true;    } else     if (blockBanList.contains(block) || materialBanList.contains(material)) {      return false;    } else     if (material.isLiquid() || !material.isSolid()) {      return false;    } else     if (world.isAirBlock(pos.x,pos.y,pos.z) || block instanceof IFluidBlock) {      return false;    } else     if (block == AdvancedRocketryBlocks.blockAirLock) {      return checkDoorIsSealed(world,pos,meta);    }    return isFulBlock(world,pos);  }  return false;}  }
class C{  public static void open(File file){  try {    String template=OS.getNative().winMacLinux("explorer /select,%s","open %s","xdg-open %s");    String cmd=template.replace("%s",FileMisc.quote(file.getCanonicalFile()));    CmdLine.runCmd(cmd);  } catch (  Exception e) {    System.err.println("Unable to open folder in file manager: " + e.getMessage());  }}  }
class C{  public static double AEWSRmaxFitness(boolean useTrainingData,GEPIndividual ind){  int len=(useTrainingData ? GEPDependentVariable.trainingData.getDependentVariableValues().length : GEPDependentVariable.testingData.getDependentVariableValues().length);  return (len * AEWSRrange);}  }
class C{  public long insertOrReplace(String table,ContentValues values){  try {    openDB();    return mSQLiteDatabase.replaceOrThrow(table,null,values);  } catch (  SQLException ex) {    ex.printStackTrace();    throw ex;  }}  }
class C{  public static boolean hasMoreBytes(Input input) throws IOException {  if (input.limit() > input.position()) {    return true;  } else {    return (null != input.getInputStream()) && (input.getInputStream().available() > 0);  }}  }
class C{  public HashCodeBuilder append(long[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (int i=0; i < array.length; i++) {      append(array[i]);    }  }  return this;}  }
class C{  protected void add(DistributedRegion r,ReliableDistributionData data,Set roles){  QueuedRegionData qrd=null;synchronized (this.regionMap) {    qrd=(QueuedRegionData)this.regionMap.get(r);  }  qrd.add(r,data,roles);  r.getCachePerfStats().incReliableQueuedOps(data.getOperationCount() * roles.size());}  }
class C{  public void markKeyForPreload(int idx){  if (preloadKeys == null)   preloadKeys=new BitSet();  preloadKeys.set(idx,true);}  }
class C{  private boolean isFactoryVisible(DetectorFactory factory){  Map<DetectorFactory,Boolean> enabledDetectors=tab.propertyPage.getVisibleDetectors();  Boolean enabled=enabledDetectors.get(factory);  if (enabled != null) {    return enabled.booleanValue();  }  ProjectFilterSettings filterSettings=tab.getCurrentProps().getFilterSettings();  for (  BugPattern pattern : factory.getReportedBugPatterns()) {    if (filterSettings.containsCategory(pattern.getCategory())) {      enabledDetectors.put(factory,Boolean.TRUE);      return true;    }  }  enabledDetectors.put(factory,Boolean.FALSE);  return false;}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public static FixedBordersDiscretizer create(double[] samples,int size,int bins){  int newsize=(int)Math.ceil(samples.length / (double)bins);  newsize=Math.max(newsize,size);  return create(samples,newsize);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:39.853 -0500",hash_original_method="22F3ACF33B32552677DA78FC4700055D",hash_generated_method="0A022108A21F8B8FE3B77E0B9F2CBBD7") public ArrayList<Prediction> recognize(Gesture gesture){  Instance instance=Instance.createInstance(mSequenceType,mOrientationStyle,gesture,null);  return mClassifier.classify(mSequenceType,mOrientationStyle,instance.vector);}  }
class C{  public static double cosineToDistance(double cosAngle){  return Math.sqrt(0.5 * (1 - cosAngle));}  }
class C{  public static void disableLog(){  isLogEnable=false;}  }
class C{  public static String asString(URI value){  return value != null ? value.toString() : null;}  }
class C{  private FunctionLibFactory(String saxParser,FunctionLib lib,Resource file,Identification id) throws FunctionLibException {  super();  this.id=id;  this.lib=lib == null ? new FunctionLib() : lib;  Reader r=null;  try {    init(saxParser,new InputSource(r=IOUtil.getReader(file.getInputStream(),(Charset)null)));  } catch (  IOException e) {    throw new FunctionLibException("File not found: " + e.getMessage());  } finally {    IOUtil.closeEL(r);  }}  }
class C{  public void reportUnexecutedTests(){  for (  Map.Entry<String,Collection<TestIdentifier>> entry : mRemainingTestsMap.entrySet()) {    if (!entry.getValue().isEmpty()) {      super.testRunStarted(entry.getKey(),entry.getValue().size());      for (      TestIdentifier test : entry.getValue()) {        super.testStarted(test);      }      super.testRunEnded(0,new HashMap<String,String>());    }  }}  }
class C{  public Intent putExtra(String name,CharSequence value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putCharSequence(name,value);  return this;}  }
class C{  public void attachMirror(String locality,String sourceVirtualVolumeName,String mirrorDeviceName) throws VPlexApiException {  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexVirtualVolumeInfo vplexVirtualVolumeInfo=findVirtualVolumeAndUpdateInfo(sourceVirtualVolumeName,discoveryMgr);  String sourceDeviceName=vplexVirtualVolumeInfo.getSupportingDevice();  VPlexDeviceInfo mirrorLocalDevice=discoveryMgr.findLocalDevice(mirrorDeviceName);  if (mirrorLocalDevice == null) {    throw VPlexApiException.exceptions.cantFindLocalDevice(mirrorDeviceName);  }  String sourceDevicePath=null;  if (locality.equals(VPlexApiConstants.LOCAL_VIRTUAL_VOLUME)) {    VPlexDeviceInfo sourceLocalDevice=discoveryMgr.findLocalDevice(sourceDeviceName);    if (sourceLocalDevice == null) {      throw VPlexApiException.exceptions.cantFindLocalDevice(sourceDeviceName);    }    sourceDevicePath=sourceLocalDevice.getPath();  } else {    VPlexDistributedDeviceInfo distributedDeviceInfo=discoveryMgr.findDistributedDevice(sourceDeviceName);    if (distributedDeviceInfo == null) {      throw VPlexApiException.exceptions.cantFindDistDevice(sourceDeviceName);    }    List<VPlexDistributedDeviceComponentInfo> ddComponents=discoveryMgr.getDistributedDeviceComponents(distributedDeviceInfo);    for (    VPlexDistributedDeviceComponentInfo ddComponent : ddComponents) {      discoveryMgr.updateDistributedDeviceComponent(ddComponent);      if (ddComponent.getCluster().equals(mirrorLocalDevice.getCluster())) {        sourceDevicePath=ddComponent.getPath();        break;      }    }    if (sourceDevicePath == null) {      throw VPlexApiException.exceptions.couldNotFindComponentForDistDevice(distributedDeviceInfo.getName(),mirrorLocalDevice.getCluster());    }  }  deviceAttachMirror(sourceDevicePath,mirrorLocalDevice.getPath(),null);  s_logger.info("Added ",mirrorLocalDevice.getPath() + " as a mirror to the source device " + sourceDevicePath);}  }
class C{  public synchronized Object remove(int index){  modCount++;  if (index >= elementCount)   throw new ArrayIndexOutOfBoundsException(index);  Object oldValue=elementData[index];  int numMoved=elementCount - index - 1;  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);  elementData[--elementCount]=null;  return oldValue;}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity is about to be \"paused\")");}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.ENRICHER__PART:    return getPart();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Picker enableCamera(boolean mEnableCamera){  mSelectionSpec.setmEnableCamera(mEnableCamera);  return this;}  }
class C{  public SelectBidirectedAction(GraphWorkbench workbench){  super("Highlight Bidirected Edges");  if (workbench == null) {    throw new NullPointerException("Desktop must not be null.");  }  this.workbench=workbench;}  }
class C{  public _BuckLexer(java.io.Reader in){  this.zzReader=in;}  }
class C{  public boolean executeQuery(Collection<Collection> resultCollector) throws QueryException, InterruptedException, ForceReattemptException {  if (NUM_THREADS > 1 || this.TEST_NUM_THREADS > 1) {    executeWithThreadPool(resultCollector);  } else {    executeSequentially(resultCollector,this._bucketsToQuery);  }  return this.resultType.isStructType();}  }
class C{  public void doPost(HttpServletRequest req,HttpServletResponse res,Component component) throws ServletException, IOException {  long t0=0, t1=0, t2=0, t3=0, t4=0;  String soapAction=null;  MessageContext msgContext=null;  Message responseMsg=null;  String contentType=null;  InputStream is=null;  try {    AxisEngine engine=getEngine();    if (engine == null) {      ServletException se=new ServletException(Messages.getMessage("noEngine00"));      log.debug("No Engine!",se);      throw se;    }    res.setBufferSize(1024 * 8);    msgContext=createMessageContext(engine,req,res,component);    ComponentController.set(msgContext);    if (securityProvider != null) {      if (isDebug) {        log.debug("securityProvider:" + securityProvider);      }      msgContext.setProperty(MessageContext.SECURITY_PROVIDER,securityProvider);    }    is=req.getInputStream();    Message requestMsg=new Message(is,false,req.getHeader(HTTPConstants.HEADER_CONTENT_TYPE),req.getHeader(HTTPConstants.HEADER_CONTENT_LOCATION));    MimeHeaders requestMimeHeaders=requestMsg.getMimeHeaders();    for (Enumeration e=req.getHeaderNames(); e.hasMoreElements(); ) {      String headerName=(String)e.nextElement();      for (Enumeration f=req.getHeaders(headerName); f.hasMoreElements(); ) {        String headerValue=(String)f.nextElement();        requestMimeHeaders.addHeader(headerName,headerValue);      }    }    if (isDebug) {      log.debug("Request Message:" + requestMsg);    }    msgContext.setRequestMessage(requestMsg);    String url=HttpUtils.getRequestURL(req).toString().toLowerCase();    msgContext.setProperty(MessageContext.TRANS_URL,url);    String requestEncoding;    try {      requestEncoding=(String)requestMsg.getProperty(SOAPMessage.CHARACTER_SET_ENCODING);      if (requestEncoding != null) {        msgContext.setProperty(SOAPMessage.CHARACTER_SET_ENCODING,requestEncoding);      }    } catch (    SOAPException e1) {    }    try {      soapAction=getSoapAction(req);      if (soapAction != null) {        msgContext.setUseSOAPAction(true);        msgContext.setSOAPActionURI(soapAction);      }      msgContext.setSession(new AxisHttpSession(req));      if (log.isDebugEnabled()) {        t1=System.currentTimeMillis();      }      if (isDebug) {        log.debug("Invoking Axis Engine.");      }      engine.invoke(msgContext);      if (isDebug) {        log.debug("Return from Axis Engine.");      }      if (log.isDebugEnabled())       t2=System.currentTimeMillis();      responseMsg=msgContext.getResponseMessage();    } catch (    AxisFault fault) {      processAxisFault(fault);      configureResponseFromAxisFault(res,fault);      responseMsg=msgContext.getResponseMessage();      if (responseMsg == null) {        responseMsg=new Message(fault);        ((org.apache.axis.SOAPPart)responseMsg.getSOAPPart()).getMessage().setMessageContext(msgContext);      }    }catch (    Throwable t) {      if (t instanceof InvocationTargetException)       t=((InvocationTargetException)t).getTargetException();      if (t instanceof Exception) {        Exception e=(Exception)t;        responseMsg=msgContext.getResponseMessage();        res.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);        responseMsg=convertExceptionToAxisFault(e,responseMsg);        ((org.apache.axis.SOAPPart)responseMsg.getSOAPPart()).getMessage().setMessageContext(msgContext);      } else {        logException(t);        responseMsg=msgContext.getResponseMessage();        res.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);        responseMsg=new Message(new AxisFault(t.toString(),t));        ((org.apache.axis.SOAPPart)responseMsg.getSOAPPart()).getMessage().setMessageContext(msgContext);      }    }  } catch (  AxisFault fault) {    processAxisFault(fault);    configureResponseFromAxisFault(res,fault);    responseMsg=msgContext.getResponseMessage();    if (responseMsg == null) {      responseMsg=new Message(fault);      ((org.apache.axis.SOAPPart)responseMsg.getSOAPPart()).getMessage().setMessageContext(msgContext);    }  } finally {    IOUtil.closeEL(is);  }  if (log.isDebugEnabled()) {    t3=System.currentTimeMillis();  }  if (responseMsg != null) {    MimeHeaders responseMimeHeaders=responseMsg.getMimeHeaders();    for (Iterator i=responseMimeHeaders.getAllHeaders(); i.hasNext(); ) {      MimeHeader responseMimeHeader=(MimeHeader)i.next();      res.addHeader(responseMimeHeader.getName(),responseMimeHeader.getValue());    }    String responseEncoding=(String)msgContext.getProperty(SOAPMessage.CHARACTER_SET_ENCODING);    if (responseEncoding != null) {      try {        responseMsg.setProperty(SOAPMessage.CHARACTER_SET_ENCODING,responseEncoding);      } catch (      SOAPException e) {      }    }    contentType=responseMsg.getContentType(msgContext.getSOAPConstants());    sendResponse(contentType,res,responseMsg);  } else {    res.setStatus(202);  }  if (isDebug) {    log.debug("Response sent.");    log.debug("Exit: doPost()");  }  if (log.isDebugEnabled()) {    t4=System.currentTimeMillis();    log.debug("axisServlet.doPost: " + soapAction + " pre="+ (t1 - t0)+ " invoke="+ (t2 - t1)+ " post="+ (t3 - t2)+ " send="+ (t4 - t3)+ " "+ msgContext.getTargetService()+ "."+ ((msgContext.getOperation() == null) ? "" : msgContext.getOperation().getName()));  }}  }
class C{  static public void selectIntialPoints(DataSet d,int[] indices,DistanceMetric dm,Random rand,SeedSelection selectionMethod){  selectIntialPoints(d,indices,dm,null,rand,selectionMethod);}  }
class C{  public static double[] reallocArray(double[] array,int minLength){  if (array == null || array.length < minLength) {    return new double[minLength];  }  return array;}  }
class C{  public void testToBigIntegerNeg2(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+15";  BigInteger bNumber=new BigInteger("-123809648392384754573567356745735635678902957849");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  public boolean webUpdate(String result){  MStatus status=MStatus.get(getCtx(),getR_Status_ID());  if (!status.isWebCanUpdate())   return false;  if (status.getUpdate_Status_ID() > 0)   setR_Status_ID(status.getUpdate_Status_ID());  setResult(result);  return true;}  }
class C{  private static void focusView(final ZyGraph graph,final double zoom,final Point2D point2D){  graph.getView().focusView(zoom,point2D,graph.getSettings().getLayoutSettings().getAnimateLayout());  graph.updateViews();}  }
class C{  private Vset checkInnerClass(Environment env,Context ctx,Vset vset,Hashtable exp,UnaryExpression loc){  ClassDefinition inner=field.getInnerClass();  type=inner.getType();  if (!inner.isTopLevel()) {    env.error(where,"inner.static.ref",inner.getName());  }  Expression te=new TypeExpression(where,type);  ClassDefinition ctxClass=ctx.field.getClassDefinition();  try {    if (!ctxClass.canAccess(env,field)) {      ClassDefinition clazz=env.getClassDefinition(right.type);      env.error(where,"no.type.access",id,clazz,ctxClass.getClassDeclaration());      return vset;    }    if (field.isProtected() && !(right instanceof SuperExpression || (right instanceof FieldExpression && ((FieldExpression)right).id == idSuper)) && !ctxClass.protectedAccess(env,field,right.type)) {      env.error(where,"invalid.protected.field.use",field.getName(),field.getClassDeclaration(),right.type);      return vset;    }    inner.noteUsedBy(ctxClass,where,env);  } catch (  ClassNotFound e) {    env.error(where,"class.not.found",e.name,ctx.field);  }  ctxClass.addDependency(field.getClassDeclaration());  if (loc == null)   return te.checkValue(env,ctx,vset,exp);  loc.right=te;  return vset;}  }
class C{  void onContinuePermissionRequest(){  rationaleAccepted.set(true);  requestPermissionsToSystem(pendingPermissions);}  }
class C{  public void testSyncStarted_ignoredWhenDataModelAvailable(){  mController.init();  LocationTree locationTree=FakeAppLocationTreeFactory.build();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  mFakeEventBus.post(new SyncStartedEvent());  verify(mMockFragmentUi,times(0)).resetSyncProgress();}  }
class C{  public void print(int x){  out.print(x);  out.flush();}  }
class C{  public static boolean isNameValid(String aName){  if (aName.contains("^") || aName.contains("/") || aName.contains("\\")|| aName.contains("&")|| aName.contains("*")|| aName.contains("?")|| aName.contains("+")|| aName.contains("$")|| aName.contains("!")|| aName.contains("[")|| aName.contains("]")) {    return false;  } else {    return true;  }}  }
class C{  public Element store(Object o){  LayoutTurntable p=(LayoutTurntable)o;  Element element=new Element("layoutturntable");  boolean turnoutControl=p.isTurnoutControlled();  element.setAttribute("ident",p.getID());  element.setAttribute("radius","" + p.getRadius());  Point2D coords=p.getCoordsCenter();  element.setAttribute("xcen","" + coords.getX());  element.setAttribute("ycen","" + coords.getY());  element.setAttribute("turnoutControlled","" + (turnoutControl ? "yes" : "no"));  element.setAttribute("class",getClass().getName());  for (int i=0; i < p.getNumberRays(); i++) {    Element rElem=new Element("raytrack");    rElem.setAttribute("angle","" + p.getRayAngle(i));    TrackSegment t=p.getRayConnectOrdered(i);    if (t != null) {      rElem.setAttribute("connectname",t.getID());    }    rElem.setAttribute("index","" + p.getRayIndex(i));    if (turnoutControl && p.getRayTurnoutName(i) != null) {      rElem.setAttribute("turnout",p.getRayTurnoutName(i));      if (p.getRayTurnoutState(i) == Turnout.THROWN) {        rElem.setAttribute("turnoutstate","thrown");      } else {        rElem.setAttribute("turnoutstate","closed");      }    }    element.addContent(rElem);  }  return element;}  }
class C{  public String globalInfo(){  return "Class for building and using a 1R classifier; in other words, uses " + "the minimum-error attribute for prediction, discretizing numeric " + "attributes. For more information, see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public static boolean isDoubleCategory(ClassNode type){  return type == float_TYPE || type == double_TYPE || isBigDecCategory(type);}  }
class C{  public static final double feetPerSecondToMetersPerSecond(double feetPerSecond){  return feetPerSecond * METER_TO_FOOT;}  }
class C{  public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException {  beanContextChildSupport.fireVetoableChange(name,oldValue,newValue);}  }
class C{  public boolean checkXor(String... flags){  if (flags.length < 2) {    throw new IllegalArgumentException("checkXor requires at least two parameters");  }  final StringBuilder sb=new StringBuilder();  boolean isset=false;  boolean toomany=false;  for (  final String flag : flags) {    final Flag aFlag=getFlag(flag);    if ((aFlag != null) && aFlag.isSet()) {      if (!isset) {        isset=true;      } else {        toomany=true;      }    }    if (sb.length() > 0) {      sb.append(" or ");    }    sb.append(LONG_FLAG_PREFIX).append(flag);  }  if (isset && !toomany) {    return true;  } else {    setParseMessage("One of " + sb.toString() + " must be set");    return false;  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGenPackage.FEATURE_TYPE__PARAMETERS:    return ((InternalEList<?>)getParameters()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void unlock(long key){  getLock(key).unlock();}  }
class C{  public ConverterException(String message){  super(message);}  }
class C{  private List<Token> tokenizeSpecial(URL url){  List<Token> tokens=new ArrayList<>();  String token=getPart(url,URLPart.HOST) + ":" + getPart(url,URLPart.PORT);  int start=getStartIndex(url,token);  int end=0;  if (start == -1) {    start=0;  } else {    end=getEndIndex(start,token);  }  tokens.add(new Token(token,URLPart.WHOLE,start,end));  token=getPart(url,URLPart.PROTOCOL) + "://" + getPart(url,URLPart.HOST);  start=getStartIndex(url,token);  end=getEndIndex(start,token);  tokens.add(new Token(token,URLPart.WHOLE,start,end));  return tokens;}  }
class C{  public static <T extends Comparable<?>>Range<T> lessThan(T upperEndpoint){  return Range.range(null,BoundType.OPEN,upperEndpoint,BoundType.OPEN);}  }
class C{  public void addHandler(Handler handler) throws SecurityException {  throw new RuntimeException();}  }
class C{  static public PVector random3D(PVector target,PApplet parent){  float angle;  float vz;  if (parent == null) {    angle=(float)(Math.random() * Math.PI * 2);    vz=(float)(Math.random() * 2 - 1);  } else {    angle=parent.random(PConstants.TWO_PI);    vz=parent.random(-1,1);  }  float vx=(float)(Math.sqrt(1 - vz * vz) * Math.cos(angle));  float vy=(float)(Math.sqrt(1 - vz * vz) * Math.sin(angle));  if (target == null) {    target=new PVector(vx,vy,vz);  } else {    target.set(vx,vy,vz);  }  return target;}  }
class C{  private void addLine(int AD_Column_ID,Timestamp Updated,int UpdatedBy,String OldValue,String NewValue){  Vector<String> line=new Vector<String>();  MColumn column=MColumn.get(Env.getCtx(),AD_Column_ID);  if (OldValue != null && OldValue.equals(MChangeLog.NULL))   OldValue=null;  String showOldValue=OldValue;  if (NewValue != null && NewValue.equals(MChangeLog.NULL))   NewValue=null;  String showNewValue=NewValue;  try {    if (DisplayType.isText(column.getAD_Reference_ID()))     ; else     if (column.getAD_Reference_ID() == DisplayType.YesNo) {      if (OldValue != null) {        boolean yes=OldValue.equals("true") || OldValue.equals("Y");        showOldValue=Msg.getMsg(Env.getCtx(),yes ? "Y" : "N");      }      if (NewValue != null) {        boolean yes=NewValue.equals("true") || NewValue.equals("Y");        showNewValue=Msg.getMsg(Env.getCtx(),yes ? "Y" : "N");      }    } else     if (column.getAD_Reference_ID() == DisplayType.Amount) {      if (OldValue != null)       showOldValue=m_amtFormat.format(new BigDecimal(OldValue));      if (NewValue != null)       showNewValue=m_amtFormat.format(new BigDecimal(NewValue));    } else     if (column.getAD_Reference_ID() == DisplayType.Integer) {      if (OldValue != null)       showOldValue=m_intFormat.format(new Integer(OldValue));      if (NewValue != null)       showNewValue=m_intFormat.format(new Integer(NewValue));    } else     if (DisplayType.isNumeric(column.getAD_Reference_ID())) {      if (OldValue != null)       showOldValue=m_numberFormat.format(new BigDecimal(OldValue));      if (NewValue != null)       showNewValue=m_numberFormat.format(new BigDecimal(NewValue));    } else     if (column.getAD_Reference_ID() == DisplayType.Date) {      if (OldValue != null)       showOldValue=m_dateFormat.format(Timestamp.valueOf(OldValue));      if (NewValue != null)       showNewValue=m_dateFormat.format(Timestamp.valueOf(NewValue));    } else     if (column.getAD_Reference_ID() == DisplayType.DateTime) {      if (OldValue != null)       showOldValue=m_dateTimeFormat.format(Timestamp.valueOf(OldValue));      if (NewValue != null)       showNewValue=m_dateTimeFormat.format(Timestamp.valueOf(NewValue));    } else     if (DisplayType.isLookup(column.getAD_Reference_ID())) {      MLookup lookup=MLookupFactory.get(Env.getCtx(),0,AD_Column_ID,column.getAD_Reference_ID(),Env.getLanguage(Env.getCtx()),column.getColumnName(),column.getAD_Reference_Value_ID(),column.isParent(),null);      if (OldValue != null) {        Object key=OldValue;        NamePair pp=lookup.get(key);        if (pp != null)         showOldValue=pp.getName();      }      if (NewValue != null) {        Object key=NewValue;        NamePair pp=lookup.get(key);        if (pp != null)         showNewValue=pp.getName();      }    } else     if (DisplayType.isLOB(column.getAD_Reference_ID()))     ;  } catch (  Exception e) {    log.log(Level.WARNING,OldValue + "->" + NewValue,e);  }  line.add(showNewValue);  line.add(showOldValue);  MUser user=MUser.get(Env.getCtx(),UpdatedBy);  line.add(user.getName());  line.add(m_dateFormat.format(Updated));  m_data.add(line);}  }
class C{  void makeExitBlock(){  if (exitBlockIndex >= 0) {    throw new RuntimeException("must be called at most once");  }  exitBlockIndex=blocks.size();  SsaBasicBlock exitBlock=new SsaBasicBlock(exitBlockIndex,maxLabel++,this);  blocks.add(exitBlock);  for (  SsaBasicBlock block : blocks) {    block.exitBlockFixup(exitBlock);  }  if (exitBlock.getPredecessors().cardinality() == 0) {    blocks.remove(exitBlockIndex);    exitBlockIndex=-1;    maxLabel--;  }}  }
class C{  private void forceOutOfMemory(){  peskyMemory=new ArrayList();  final AssertionError whoops=new AssertionError("Timeout!");  try {    for (; ; ) {      peskyMemory.add(new long[100000]);    }  } catch (  OutOfMemoryError e) {    SystemFailure.setFailure(e);    long fin=System.currentTimeMillis() + 60 * 1000;    for (; ; ) {      if (peskyMemory == null) {        break;      }      if (System.currentTimeMillis() > fin) {        throw whoops;      }synchronized (SystemFailureDUnitTest.class) {        try {          SystemFailureDUnitTest.class.wait(2000);        } catch (        InterruptedException e2) {          fail("interrupted");        }      }    }  }}  }
class C{  public static double[] sub(double[] vec1,double[] vec2){  int m=vec1.length;  double[] res=new double[m];  for (int i=0; i < m; ++i) {    res[i]=vec1[i] - vec2[i];  }  return (res);}  }
class C{  public void showMessages(@NotNull String message){  if (message.length() == 0)   return;  showMessage(message,ConsoleViewContentType.NORMAL_OUTPUT.getAttributes());}  }
class C{  public CodedException(String faultCode,Throwable cause){  super(cause);  this.faultCode=faultCode;  this.faultDetail=ExceptionUtils.getStackTrace(cause);  this.faultString=cause.getMessage();}  }
class C{  protected void changeTipoExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  setReturnActionFordward(request,mapping.findForward("changeTipo"));}  }
class C{  public static float[] GaToLLa(Geo[] ga,float[] lla){  if (lla == null) {    lla=new float[2 * ga.length];  }  for (int i=0; i < ga.length; i++) {    Geo g=ga[i];    lla[i * 2]=(float)g.getLatitude();    lla[i * 2 + 1]=(float)g.getLongitude();  }  return lla;}  }
class C{  public static Preferences userNodeForPackage(Class<?> c){  if (userNodes != null) {    if (!userNodes.containsKey(c.getPackage())) {      userNodes.put(c.getPackage(),new PreferencesUtil(false));    }    return userNodes.get(c.getPackage());  }  try {    return Preferences.userNodeForPackage(c);  } catch (  Throwable t) {    if (userNodes == null) {      userNodes=new HashMap<Package,Preferences>();    }    return userNodeForPackage(c);  }}  }
class C{  public void enterSubplan(){  Map<Integer,LogicalVariable> varMap=new HashMap<Integer,LogicalVariable>();  varMap.putAll(currentVarMap);  stack.push(currentVarMap);  currentVarMap=varMap;}  }
class C{  public boolean isDefined(final Argument arg){  final List<String[]> result=values.get(arg);  return (result != null);}  }
class C{  @GET @Path("locale1") @Produces("text/html") public Response locale1(){  return Response.ok(new Viewable("hello.jsp"),"application/xhtml+xml").language(Locale.UK).build();}  }
class C{  private void advance() throws IOException {  close();  if (it.hasNext()) {    in=it.next().openStream();  }}  }
class C{  protected QuantileFinderFactory(){}  }
class C{  private License(){}  }
class C{  public LoggingFilter(String name){  if (name == null) {    this.name=LoggingFilter.class.getName();  } else {    this.name=name;  }  logger=LoggerFactory.getLogger(this.name);}  }
class C{  private void updateSingeItemIterator(SelectItem item){  if (singleItemIterator == null) {    singleItemIterator=new SingleElementIterator();  }  singleItemIterator.updateItem(item);}  }
class C{  private void onCubeLoaded(@Nullable Cube cube,@Nonnull Column column){  if (cube != null) {    cubeMap.put(cube);    if (!column.getLoadedCubes().contains(cube)) {      column.addCube(cube);      cube.onLoad();    }  }}  }
class C{  public WriteValue clone(){  WriteValue result=new WriteValue();  result.NodeId=NodeId;  result.AttributeId=AttributeId;  result.IndexRange=IndexRange;  result.Value=Value;  return result;}  }
class C{  public void generateMergedFile(String filename){  File origFile=originalCodebase.getFile(filename);  boolean origExists=filesystem.exists(origFile);  File destFile=destinationCodebase.getFile(filename);  boolean destExists=filesystem.exists(destFile);  File modFile=modifiedCodebase.getFile(filename);  boolean modExists=filesystem.exists(modFile);  if (!destExists && !modExists) {    throw new MoeProblem("%s doesn't exist in either %s nor %s. This should not be possible.",filename,destinationCodebase,modifiedCodebase);  } else   if (origExists && modExists && !destExists) {    if (areDifferent(filename,origFile,modFile)) {      destFile=new File("/dev/null");    } else {      return;    }  } else   if (origExists && !modExists && destExists) {    return;  } else   if (!origExists && !(modExists && destExists)) {    File existingFile=(modExists ? modFile : destFile);    copyToMergedCodebase(filename,existingFile);    return;  } else   if (!origExists && modExists && destExists) {    origFile=new File("/dev/null");  }  File mergedFile=copyToMergedCodebase(filename,destFile);  try {    cmd.runCommand("merge",ImmutableList.of(mergedFile.getAbsolutePath(),origFile.getAbsolutePath(),modFile.getAbsolutePath()),this.mergedCodebase.path().getAbsolutePath());    mergedFiles.add(mergedFile.getAbsolutePath());  } catch (  CommandException e) {    if (e.returnStatus == 1) {      failedToMergeFiles.add(mergedFile.getAbsolutePath());    } else {      throw new MoeProblem("Merge returned with unexpected status %d when trying to run \"merge -p %s %s %s\"",e.returnStatus,destFile.getAbsolutePath(),origFile.getAbsolutePath(),modFile.getAbsolutePath());    }  }}  }
class C{  @PUT @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Path("/{alertId}/notifications/{notificationId}") @Description("Updates a notification having the given notification ID if associated with the given alert ID.") public NotificationDto updateNotificationById(@Context HttpServletRequest req,@PathParam("alertId") BigInteger alertId,@PathParam("notificationId") BigInteger notificationId,NotificationDto notificationDto){  if (alertId == null || alertId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Alert Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (notificationId == null || notificationId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Notification Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (notificationDto == null) {    throw new WebApplicationException("Null object cannot be updated.",Status.BAD_REQUEST);  }  PrincipalUser owner=validateAndGetOwner(req,getRemoteUser(req).getUserName());  Alert oldAlert=alertService.findAlertByPrimaryKey(alertId);  if (oldAlert == null) {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }  validateResourceAuthorization(req,oldAlert.getOwner(),owner);  for (  Notification notification : oldAlert.getNotifications()) {    if (notificationId.equals(notification.getId())) {      copyProperties(notification,notificationDto);      oldAlert.setModifiedBy(getRemoteUser(req));      Alert alert=alertService.updateAlert(oldAlert);      int index=alert.getNotifications().indexOf(notification);      return NotificationDto.transformToDto(alert.getNotifications().get(index));    }  }  throw new WebApplicationException("The notification does not exist.",Response.Status.NOT_FOUND);}  }
class C{  protected SVGOMAnimateMotionElement(){}  }
class C{  public boolean hasNextMention(){  return hasNextRegex(anyMentionPattern);}  }
class C{  public static String stackTraceToString(final Exception exception){  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  exception.printStackTrace(pw);  return sw.toString();}  }
class C{  public synchronized boolean next(Writable key) throws IOException {  if (key.getClass() != WALEntry.class) {    throw new IOException("wrong key class: " + key.getClass().getName() + " is not "+ WALEntry.class);  }  outBuf.reset();  keyLength=next(outBuf);  if (keyLength < 0) {    return false;  }  valBuffer.reset(outBuf.getData(),outBuf.getLength());  key.readFields(valBuffer);  valBuffer.mark(0);  if (valBuffer.getPosition() != keyLength) {    throw new IOException(key + " read " + valBuffer.getPosition()+ " bytes, should read "+ keyLength);  }  return true;}  }
class C{  public NicknameEntry(BaseEntry sourceEntry){  super(sourceEntry);  getCategories().add(NICKNAME_CATEGORY);}  }
class C{  private void move(final Player pusher,final RPEntity pushed,final int x,final int y){  if (pushed instanceof Player) {    final Set<Item> items=pusher.getZone().getItemsOnGround();    for (    final Item item : items) {      if (pushed.getArea().intersects(item.getArea())) {        String boundTo=item.getBoundTo();        if ((boundTo != null) && !pushed.getName().equals(boundTo)) {          continue;        }        item.setPosition(x,y);        item.notifyWorldAboutChanges();        new ItemLogger().displace(pusher,item,pusher.getZone(),pushed.getX(),pushed.getY(),x,y);      }    }  }  new GameEvent(pusher.getName(),"push",pushed.getName(),pushed.getZone().getName(),pushed.getX() + " " + pushed.getY()+ " --> "+ x+ " "+ y).raise();  pushed.setPosition(x,y);  pushed.notifyWorldAboutChanges();  pusher.onPush(pushed);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static double cdf(double x,double k,double theta,double shift){  if (x <= shift) {    return 0.;  }  final double e=Math.exp((x - shift) * theta);  return e < Double.POSITIVE_INFINITY ? GammaDistribution.regularizedGammaP(k,e) : 1.;}  }
class C{  public static Month parseMonth(String s){  Month result=null;  if (s == null) {    return result;  }  s=s.trim();  int i=Month.findSeparator(s);  String s1, s2;  boolean yearIsFirst;  if (i == -1) {    yearIsFirst=true;    s1=s.substring(0,5);    s2=s.substring(5);  } else {    s1=s.substring(0,i).trim();    s2=s.substring(i + 1,s.length()).trim();    Year y1=Month.evaluateAsYear(s1);    if (y1 == null) {      yearIsFirst=false;    } else {      Year y2=Month.evaluateAsYear(s2);      if (y2 == null) {        yearIsFirst=true;      } else {        yearIsFirst=(s1.length() > s2.length());      }    }  }  Year year;  int month;  if (yearIsFirst) {    year=Month.evaluateAsYear(s1);    month=SerialDate.stringToMonthCode(s2);  } else {    year=Month.evaluateAsYear(s2);    month=SerialDate.stringToMonthCode(s1);  }  if (month == -1) {    throw new TimePeriodFormatException("Can't evaluate the month.");  }  if (year == null) {    throw new TimePeriodFormatException("Can't evaluate the year.");  }  result=new Month(month,year);  return result;}  }
class C{  @Override public boolean isSupportingLogScale(int axis){  if (axis == X_AXIS) {    return true;  } else {    return false;  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:52.084 -0500",hash_original_method="49B37C8425CF255FB1500AD2816C1ABC",hash_generated_method="3E2A51EAE5404A0B504CFC44DF350058") public Reason(){  super(NAME);}  }
class C{  @TargetApi(Build.VERSION_CODES.CUPCAKE) public static ActivityManager.MemoryInfo printMemoryInfo(Context context){  ActivityManager.MemoryInfo mi=getMemoryInfo(context);  return mi;}  }
class C{  public DefaultThreadFactory(String name,boolean daemon){  this.name=name;  this.daemon=daemon;}  }
class C{  public static void randomBytes(byte[] bytes){  RANDOM.nextBytes(bytes);}  }
class C{  public void createTimer(){  Timer t=new Timer(updateInterval,null);  t.setInitialDelay(initialDelay);  setTimer(t);}  }
class C{  private StoragePool retriveStoragePoolFromDatabase() throws IOException {  _logger.debug("looking for Storage pool Object");  List<URI> resourceURIs=new ArrayList<URI>();  String nativeGuid=getNativeGuid();  if (nativeGuid == null) {    return null;  }  resourceURIs=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePoolByNativeGuidConstraint(nativeGuid));  if (resourceURIs.size() > 1) {    _logger.error("Multiple StoragePools found with same native guid {}",nativeGuid);  } else   if (resourceURIs.isEmpty()) {    _logger.debug("No StoragePools found with native guid {}",nativeGuid);  } else   if (resourceURIs.size() == 1) {    StoragePool pool=(StoragePool)_dbClient.queryObject(getResourceClass(),resourceURIs.get(0));    return pool;  }  return null;}  }
class C{  public static void create(Context context,int id,CharSequence title,CharSequence content,int smallIcon,PendingIntent pendingIntent){  create(context,id,title,content,smallIcon,false,true,pendingIntent);}  }
class C{  protected final void IFCMP(Instruction s,RegisterOperand guardResult,Operand val1,Operand val2,ConditionOperand cond){  if (VM.VerifyAssertions) {    EMIT(CPOS(s,Move.create(GUARD_MOVE,guardResult,new TrueGuardOperand())));  }  EMIT(CPOS(s,MIR_Compare.create(IA32_CMP,val1,val2)));  EMIT(MIR_CondBranch.mutate(s,IA32_JCC,COND(cond),IfCmp.getTarget(s),IfCmp.getBranchProfile(s)));}  }
class C{  public void put(String seqName,RangeList<T> range){  mByName.put(seqName,range);  if (mById != null) {    throw new IllegalStateException("Cannot call put after setting sequence ids");  }}  }
class C{  public T tag(Object tag){  if (view != null) {    view.setTag(tag);  }  return self();}  }
class C{  protected void appendUintvarInteger(long value){  int i;  long max=SHORT_INTEGER_MAX;  for (i=0; i < 5; i++) {    if (value < max) {      break;    }    max=(max << 7) | 0x7fl;  }  while (i > 0) {    long temp=value >>> (i * 7);    temp=temp & 0x7f;    append((int)((temp | 0x80) & 0xff));    i--;  }  append((int)(value & 0x7f));}  }
class C{  private void returnUploadError(BeanError error){  resetSketchUploadState();  returnError(error);}  }
class C{  protected AbstractMatrix2D vDice(){  super.vDice();  int[] tmp=rowOffsets;  rowOffsets=columnOffsets;  columnOffsets=tmp;  this.isNoView=false;  return this;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static Place createPlace(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    return placeConstructor.newInstance(json);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }catch (  final JSONException e) {    throw new TwitterException(e);  }}  }
class C{  public double distance(final double x,final double y){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  return Math.sqrt(dx * dx + dy * dy);}  }
