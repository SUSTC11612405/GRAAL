class C{  public static FlattenedClipboardTransform transform(Clipboard original,Transform transform,WorldData worldData){  return new FlattenedClipboardTransform(original,transform,worldData);}  }
class C{  public void test_engineInit_02(){  KeyManagerFactorySpiImpl kmf=new KeyManagerFactorySpiImpl();  try {    kmf.engineInit(null);    fail("InvalidAlgorithmParameterException wasn't thrown");  } catch (  InvalidAlgorithmParameterException iape) {  }catch (  Exception e) {    fail(e + " was thrown instead of InvalidAlgorithmParameterException");  }  try {    char[] psw="password".toCharArray();    Parameters pr=new Parameters(psw);    kmf.engineInit(pr);  } catch (  Exception e) {    fail(e + " unexpected exception was thrown");  }}  }
class C{  public CommunicationException(String msg){  super(msg);}  }
class C{  private void useLoggingConfiguration(int[] indices){  if (indices == null || indices.length < 1) {    String msg=Localization.Main.getText("gui.logging.use.select");    JOptionPane.showMessageDialog(this,msg,"",JOptionPane.WARNING_MESSAGE);    logger.warn(msg);    return;  }  String newConfig=(String)lstLoggingConfigurations.getModel().getElementAt(indices[0]);  LoggerContext ctx=(LoggerContext)LogManager.getContext(false);  Configuration conf=ctx.getConfiguration();  LoggerConfig lconf=conf.getLoggerConfig(logger.getName());  File activeConfigFile=new File(ConfigurationManager.getConfigurationDirectory(),Constants.LOGFILE_FOLDER + File.separator + ConfigurationManager.LOGGING_FILENAME);  File activeBackupFile=new File(activeConfigFile + ".bak");  if (activeConfigFile.renameTo(activeBackupFile) != true) {    String msg=Localization.Main.getText("gui.logging.use.renameFail");    JOptionPane.showMessageDialog(this,msg,"",JOptionPane.WARNING_MESSAGE);    logger.warn(msg);    return;  } else {    File newConfigFile=new File(ConfigurationManager.getConfigurationDirectory(),Constants.LOGFILE_FOLDER + File.separator + getFilenameFromConfig(newConfig));    try {      Helper.copy(newConfigFile,activeConfigFile);    } catch (    IOException e) {      activeConfigFile.delete();      activeBackupFile.renameTo(activeConfigFile);      String msg=Localization.Main.getText("gui.logging.use.copyFail");      JOptionPane.showMessageDialog(this,msg,"",JOptionPane.WARNING_MESSAGE);      logger.warn(msg);      return;    }  }  activeName=newConfig;  loadLoggingConfigurations();  String msg=Localization.Main.getText("gui.logging.use.success",newConfig);  JOptionPane.showMessageDialog(this,msg,"",JOptionPane.INFORMATION_MESSAGE);  logger.info(msg);}  }
class C{  public boolean canRead(){  return _next.canRead();}  }
class C{  protected DoubleMatrix2D viewSelectionLike(int[] rowOffsets,int[] columnOffsets){  return new SelectedDenseDoubleMatrix2D(this.elements,rowOffsets,columnOffsets,this.offset);}  }
class C{  public UnifiedHighlighter(IndexSearcher indexSearcher,Analyzer indexAnalyzer){  this.searcher=indexSearcher;  this.indexAnalyzer=Objects.requireNonNull(indexAnalyzer,"indexAnalyzer is required" + " (even if in some circumstances it isn't used)");}  }
class C{  public static long interleave(long v1,long v2){  v1=(v1 | (v1 << SHIFT[4])) & MAGIC[4];  v1=(v1 | (v1 << SHIFT[3])) & MAGIC[3];  v1=(v1 | (v1 << SHIFT[2])) & MAGIC[2];  v1=(v1 | (v1 << SHIFT[1])) & MAGIC[1];  v1=(v1 | (v1 << SHIFT[0])) & MAGIC[0];  v2=(v2 | (v2 << SHIFT[4])) & MAGIC[4];  v2=(v2 | (v2 << SHIFT[3])) & MAGIC[3];  v2=(v2 | (v2 << SHIFT[2])) & MAGIC[2];  v2=(v2 | (v2 << SHIFT[1])) & MAGIC[1];  v2=(v2 | (v2 << SHIFT[0])) & MAGIC[0];  return (v2 << 1) | v1;}  }
class C{  protected void addSizePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_StateVector_size_feature"),getString("_UI_PropertyDescriptor_description","_UI_StateVector_size_feature","_UI_StateVector_type"),SexecPackage.Literals.STATE_VECTOR__SIZE,true,false,false,ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,null,null));}  }
class C{  public void expandAll(){  cancelEditing();  final TreeModel tm=getModel();  final Object root=tm.getRoot();  if (root != null) {    expandAllPaths(new TreePath(root),tm);  }}  }
class C{  public static InjectorImpl create(ClassLoader loader){synchronized (loader) {    if (loader instanceof DynamicClassLoader) {      InjectorImpl inject=_localManager.getLevel(loader);      if (inject == null) {        inject=(InjectorImpl)InjectorAmp.manager(loader).get();        _localManager.set(inject,loader);      }      return inject;    } else {      SoftReference<InjectorImpl> injectRef=_loaderManagerMap.get(loader);      InjectorImpl inject=null;      if (injectRef != null) {        inject=injectRef.get();        if (inject != null) {          return inject;        }      }      inject=(InjectorImpl)InjectorAmp.manager(loader).get();      _loaderManagerMap.put(loader,new SoftReference<>(inject));      return inject;    }  }}  }
class C{  private void logFailure(Throwable e){  ServiceUtils.logSevere(this,e);}  }
class C{  private Scope peek() throws JSONException {  if (stack.isEmpty()) {    throw new JSONException("Nesting problem");  }  return stack.get(stack.size() - 1);}  }
class C{  public GF2Polynomial(int length,int[] bs){  int leng=length;  if (leng < 1) {    leng=1;  }  blocks=((leng - 1) >> 5) + 1;  value=new int[blocks];  len=leng;  int l=Math.min(blocks,bs.length);  System.arraycopy(bs,0,value,0,l);  zeroUnusedBits();}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public FMDiscriminator(double gain){  mGain=gain;}  }
class C{  public void createWeekScenarioParChange() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-01-28 02:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PARCHANGE_PU_WEEK_SERVICE",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(basicSetup.getCustomerAdminKey(),"PARCHANGE_PU_WEEK",serviceDetails,basicSetup.getCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"ADMIN"));  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-01-30 10:00:00"),"MAX_FOLDER_NUMBER","2");  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-11 00:00:00"),"MAX_FOLDER_NUMBER","7");  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-25 00:00:00");  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PARCHANGE_PU_WEEK",subDetails);}  }
class C{  public MutableInterval toMutableInterval(){  return new MutableInterval(getStartMillis(),getEndMillis(),getChronology());}  }
class C{  private void passEnvOnToSaver(){  if (m_SaverTemplate instanceof EnvironmentHandler && m_env != null) {    ((EnvironmentHandler)m_Saver).setEnvironment(m_env);  }}  }
class C{  public List<Graph> search(){  elapsedTime=System.currentTimeMillis();  Graph graph=new EdgeListGraph(variables);  graph.fullyConnect(Endpoint.CIRCLE);  System.out.println("Finding sepsets...");  findSepsets(independenceTests);  double currentUsage=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();  if (currentUsage > maxMemory)   maxMemory=currentUsage;  if (method != null) {    System.out.println("Resolving conflicting independence/dependence constraints");    resolveResultingIndependenciesC();  }  removeNonadjacencies(graph,sepsetMaps);  System.out.println("Removed edges");  orientColliders(graph);  System.out.println("Oriented Colliders");  propagateInitialOrientations(graph);  System.out.println("Propagated initial orientations");  System.out.println(graph);  getTriplesDefiniteColliders(graph);  ensureMinimalSpanningTreks(graph);  System.out.println("Found ways of ensuring minimal spanning treks");  System.out.println("Paths ensuring Treks: \n" + necessaryTreks);  Map<Set<Edge>,Set<Map<Triple,List<Set<Edge>>>>> possibleSkeletons=findPossibleSkeletons(graph);  currentUsage=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();  if (currentUsage > maxMemory)   maxMemory=currentUsage;  Iterator<Set<Edge>> itr=possibleSkeletons.keySet().iterator();  while (itr.hasNext()) {    Set<Edge> edgesToRemove=itr.next();    Set<Map<Triple,List<Set<Edge>>>> colliderSets=possibleSkeletons.get(edgesToRemove);    Graph newGraph=new EdgeListGraph(graph);    newGraph.removeEdges(new ArrayList(edgesToRemove));    oldGraph=newGraph;    if (colliderSets.isEmpty()) {      allColliderCombinations(newGraph,edgesToRemove,new HashSet<Triple>(),possibleSkeletons.size());    } else {      for (      Map<Triple,List<Set<Edge>>> colliderSet : colliderSets) {        for (        Graph newNewGraph : generateSkeletons(newGraph,colliderSet)) {          allColliderCombinations(newNewGraph,edgesToRemove,colliderSet.keySet(),possibleSkeletons.size());        }      }    }    System.out.println("Current Size: " + output.size());    currentUsage=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();    if (currentUsage > maxMemory)     maxMemory=currentUsage;    itr.remove();  }  elapsedTime=System.currentTimeMillis() - elapsedTime;  System.out.println(output.size());  return new ArrayList<>(output);}  }
class C{  @Override public synchronized void recordPackageUpdate(String packageName,int state,int progress){  SharedPreferences.Editor editor=mPrefs.edit();  PackageInstallInfo installInfo=new PackageInstallInfo(packageName);  installInfo.progress=progress;  installInfo.state=state;  if (state == STATUS_INSTALLED) {    editor.remove(packageName);    if (DEBUG)     Log.d(TAG,"no longer tracking " + packageName);  } else {    editor.putString(packageName,infoToJson(installInfo));    if (DEBUG)     Log.d(TAG,"saved state: " + infoToJson(installInfo) + " for package: "+ packageName);  }  editor.commit();  if (!mUseQueue) {    if (mReplayPending) {      replayUpdates();    } else     if (state != STATUS_INSTALLED) {      LauncherAppState app=LauncherAppState.getInstanceNoCreate();      ArrayList<PackageInstallInfo> update=new ArrayList<PackageInstallInfo>();      update.add(installInfo);      sendUpdate(app,update);    }  }}  }
class C{  public static void printBasicBlockStatistics(IR ir){  final boolean DEBUG=false;  System.out.println();  System.out.println("**** START OF printBasicBlockStatistics() for method " + ir.method + " ****");  if (DEBUG) {    ir.printInstructions();  }  if (ir.options.L2M_HANDLER_LIVENESS) {    new LiveAnalysis(false,false,true).perform(ir);  }  for (BasicBlock bb=ir.firstBasicBlockInCodeOrder(); bb != null; bb=bb.nextBasicBlockInCodeOrder()) {    new DepGraph(ir,bb.firstRealInstruction(),bb.lastRealInstruction(),bb);  }  System.out.println("**** END OF printBasicBlockStatistics() ****");}  }
class C{  protected static String standardizeKeyword(String keyword){  if (keyword == null)   return null;  keyword=keyword.trim();  if (keyword.length() == 0)   return null;  keyword=keyword.toUpperCase();  StringBuffer sb=new StringBuffer();  char[] chars=keyword.toCharArray();  for (int i=0; i < chars.length; i++) {    char c=chars[i];    sb.append(standardizeCharacter(c));  }  return sb.toString();}  }
class C{  private void configureButton(JButton button){  Font buttonFont=(Font)DefaultLookup.get(optionPane,this,"OptionPane.buttonFont");  if (buttonFont != null) {    button.setFont(buttonFont);  }}  }
class C{  private void parseTrigger(Attributes attributes) throws SAXException {  String ns=attributes.getValue("","ns");  String nameList=attributes.getValue("","nameList");  StringTokenizer st=new StringTokenizer(nameList);  Set names=new HashSet(st.countTokens());  while (st.hasMoreTokens()) {    names.add(st.nextToken());  }  triggers.add(new Trigger(ns,names));}  }
class C{  public SolrQueryResponse queryAndResponse(String handler,SolrQueryRequest req) throws Exception {  try (SolrCore core=getCoreInc()){    SolrQueryResponse rsp=new SolrQueryResponse();    core.execute(core.getRequestHandler(handler),req,rsp);    if (rsp.getException() != null) {      throw rsp.getException();    }    return rsp;  } }  }
class C{  public PlayerVisitedZonesCondition(String... zones){  this.zoneNames=new LinkedList<String>();  for (  String zone : zones) {    zoneNames.add(zone);  }}  }
class C{  public static boolean checkpw(String plaintext,String hashed){  byte hashed_bytes[];  byte try_bytes[];  try {    String try_pw=hashpw(plaintext,hashed);    hashed_bytes=hashed.getBytes("UTF-8");    try_bytes=try_pw.getBytes("UTF-8");  } catch (  UnsupportedEncodingException uee) {    return false;  }  if (hashed_bytes.length != try_bytes.length)   return false;  byte ret=0;  for (int i=0; i < try_bytes.length; i++)   ret|=hashed_bytes[i] ^ try_bytes[i];  return ret == 0;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public void forceStopTask(){  mTask.forceStopTask();  mTask.closeSocket();  shutdownAndWait();}  }
class C{  public static void computeEigensystemFromSymmetricMatrix3(Matrix matrix,double[] outEigenvalues,Vec4[] outEigenvectors){  if (matrix == null) {    String msg=Logging.getMessage("nullValue.MatrixIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (matrix.m12 != matrix.m21 || matrix.m13 != matrix.m31 || matrix.m23 != matrix.m32) {    String msg=Logging.getMessage("generic.MatrixNotSymmetric",matrix);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  final double EPSILON=1.0e-10;  final int MAX_SWEEPS=32;  double m11=matrix.m11;  double m12=matrix.m12;  double m13=matrix.m13;  double m22=matrix.m22;  double m23=matrix.m23;  double m33=matrix.m33;  double[][] r=new double[3][3];  r[0][0]=r[1][1]=r[2][2]=1d;  for (int a=0; a < MAX_SWEEPS; a++) {    if ((Math.abs(m12) < EPSILON) && (Math.abs(m13) < EPSILON) && (Math.abs(m23) < EPSILON))     break;    if (m12 != 0d) {      double u=(m22 - m11) * 0.5 / m12;      double u2=u * u;      double u2p1=u2 + 1d;      double t=(u2p1 != u2) ? ((u < 0d) ? -1d : 1d) * (Math.sqrt(u2p1) - Math.abs(u)) : 0.5 / u;      double c=1d / Math.sqrt(t * t + 1d);      double s=c * t;      m11-=t * m12;      m22+=t * m12;      m12=0d;      double temp=c * m13 - s * m23;      m23=s * m13 + c * m23;      m13=temp;      for (int i=0; i < 3; i++) {        temp=c * r[i][0] - s * r[i][1];        r[i][1]=s * r[i][0] + c * r[i][1];        r[i][0]=temp;      }    }    if (m13 != 0d) {      double u=(m33 - m11) * 0.5 / m13;      double u2=u * u;      double u2p1=u2 + 1d;      double t=(u2p1 != u2) ? ((u < 0d) ? -1d : 1d) * (Math.sqrt(u2p1) - Math.abs(u)) : 0.5 / u;      double c=1d / Math.sqrt(t * t + 1d);      double s=c * t;      m11-=t * m13;      m33+=t * m13;      m13=0d;      double temp=c * m12 - s * m23;      m23=s * m12 + c * m23;      m12=temp;      for (int i=0; i < 3; i++) {        temp=c * r[i][0] - s * r[i][2];        r[i][2]=s * r[i][0] + c * r[i][2];        r[i][0]=temp;      }    }    if (m23 != 0d) {      double u=(m33 - m22) * 0.5 / m23;      double u2=u * u;      double u2p1=u2 + 1d;      double t=(u2p1 != u2) ? ((u < 0d) ? -1d : 1d) * (Math.sqrt(u2p1) - Math.abs(u)) : 0.5 / u;      double c=1d / Math.sqrt(t * t + 1d);      double s=c * t;      m22-=t * m23;      m33+=t * m23;      m23=0d;      double temp=c * m12 - s * m13;      m13=s * m12 + c * m13;      m12=temp;      for (int i=0; i < 3; i++) {        temp=c * r[i][1] - s * r[i][2];        r[i][2]=s * r[i][1] + c * r[i][2];        r[i][1]=temp;      }    }  }  outEigenvalues[0]=m11;  outEigenvalues[1]=m22;  outEigenvalues[2]=m33;  outEigenvectors[0]=new Vec4(r[0][0],r[1][0],r[2][0]);  outEigenvectors[1]=new Vec4(r[0][1],r[1][1],r[2][1]);  outEigenvectors[2]=new Vec4(r[0][2],r[1][2],r[2][2]);}  }
class C{  public ClientKeyExchange(HandshakeIODataStream in,int length,boolean isTLS,boolean isRSA) throws IOException {  this.isTLS=isTLS;  this.isRSA=isRSA;  if (length == 0) {    this.length=0;    exchange_keys=EmptyArray.BYTE;  } else {    int size;    if (isRSA && !isTLS) {      size=length;      this.length=size;    } else {      size=in.readUint16();      this.length=2 + size;    }    exchange_keys=new byte[size];    Streams.readFully(in,exchange_keys);    if (this.length != length) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ClientKeyExchange");    }  }}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  Log_OC.d(TAG,"Starting command with id " + startId);  if (ACTION_SYNC_FOLDER.equals(intent.getAction())) {    if (!intent.hasExtra(EXTRA_ACCOUNT) || !intent.hasExtra(EXTRA_REMOTE_PATH)) {      Log_OC.e(TAG,"Not enough information provided in intent");      return START_NOT_STICKY;    }    Account account=intent.getParcelableExtra(EXTRA_ACCOUNT);    String remotePath=intent.getStringExtra(EXTRA_REMOTE_PATH);    Pair<Account,String> itemSyncKey=new Pair<Account,String>(account,remotePath);    Pair<Target,RemoteOperation> itemToQueue=newOperation(intent);    if (itemToQueue != null) {      mSyncFolderHandler.add(account,remotePath,(SynchronizeFolderOperation)itemToQueue.second);      Message msg=mSyncFolderHandler.obtainMessage();      msg.arg1=startId;      msg.obj=itemSyncKey;      mSyncFolderHandler.sendMessage(msg);    }  } else {    Message msg=mOperationsHandler.obtainMessage();    msg.arg1=startId;    mOperationsHandler.sendMessage(msg);  }  return START_NOT_STICKY;}  }
class C{  public byte[] generateRandomArray(final int length){  final byte[] buffer=new byte[length];  final int iter=length / SpeedTestConst.UPLOAD_FILE_WRITE_CHUNK;  final int remain=length % SpeedTestConst.UPLOAD_FILE_WRITE_CHUNK;  for (int i=0; i < iter; i++) {    final byte[] random=new byte[SpeedTestConst.UPLOAD_FILE_WRITE_CHUNK];    mRandom.nextBytes(random);    System.arraycopy(random,0,buffer,i * SpeedTestConst.UPLOAD_FILE_WRITE_CHUNK,SpeedTestConst.UPLOAD_FILE_WRITE_CHUNK);  }  if (remain > 0) {    final byte[] random=new byte[remain];    mRandom.nextBytes(random);    System.arraycopy(random,0,buffer,iter * SpeedTestConst.UPLOAD_FILE_WRITE_CHUNK,remain);  }  return buffer;}  }
class C{  public Boolean exists(String email){  for (  Person person : people) {    if (email.equals(person.getEmail())) {      return true;    }  }  return false;}  }
class C{  public final boolean isCCW(Vertex b,Vertex c){  return (b.p.x - p.x) * (c.p.y - p.y) - (b.p.y - p.y) * (c.p.x - p.x) > 0;}  }
class C{  public static void appendUniqueness(final Statement statement,final Text keyText){  keyText.append(HASH_PREFIX,0,1);  final Value statementValue=new Value(StringUtils.getBytesUtf8(StatementSerializer.writeStatement(statement)));  final byte[] hashOfValue=Md5Hash.md5Binary(statementValue);  keyText.append(hashOfValue,0,hashOfValue.length);}  }
class C{  private static boolean overlapsOrTouches(Position gap,int offset,int length){  return gap.getOffset() <= offset + length && offset <= gap.getOffset() + gap.getLength();}  }
class C{  private static boolean commonNeedIncrement(int roundingMode,int qsign,int cmpFracHalf,boolean oddQuot){switch (roundingMode) {case ROUND_UNNECESSARY:    throw new ArithmeticException("Rounding necessary");case ROUND_UP:  return true;case ROUND_DOWN:return false;case ROUND_CEILING:return qsign > 0;case ROUND_FLOOR:return qsign < 0;default :assert roundingMode >= ROUND_HALF_UP && roundingMode <= ROUND_HALF_EVEN : "Unexpected rounding mode" + RoundingMode.valueOf(roundingMode);if (cmpFracHalf < 0) return false; else if (cmpFracHalf > 0) return true; else {assert cmpFracHalf == 0;switch (roundingMode) {case ROUND_HALF_DOWN:return false;case ROUND_HALF_UP:return true;case ROUND_HALF_EVEN:return oddQuot;default :throw new AssertionError("Unexpected rounding mode" + roundingMode);}}}}  }
class C{  public final int capacity(){  return capacity;}  }
class C{  public static double blackFormulaStdDevDerivative(@Real final double strike,@Real final double forward,@StdDev final double stddev,@DiscountFactor final double discount){  return blackFormulaStdDevDerivative(strike,forward,stddev,discount,0.0);}  }
class C{  public ShadowFilter(float radius,float xOffset,float yOffset,float opacity){  this.radius=radius;  this.angle=(float)Math.atan2(yOffset,xOffset);  this.distance=(float)Math.sqrt(xOffset * xOffset + yOffset * yOffset);  this.opacity=opacity;}  }
class C{  public Instance outputPeek(){  if (m_OutputFormat == null) {    throw new NullPointerException("No output instance format defined");  }  if (m_OutputQueue.empty()) {    return null;  }  Instance result=(Instance)m_OutputQueue.peek();  return result;}  }
class C{  public static void main(String[] args){  TestNavagation tester=new TestNavagation();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  private static float heigthForLevel(int level){  return 0.375f - 0.12f * (float)level;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof IntervalMarker)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  IntervalMarker that=(IntervalMarker)obj;  if (this.startValue != that.startValue) {    return false;  }  if (this.endValue != that.endValue) {    return false;  }  if (!ObjectUtilities.equal(this.gradientPaintTransformer,that.gradientPaintTransformer)) {    return false;  }  return true;}  }
class C{  public MapObject(Object id,Drawable drawable,int x,int y){  this(id,drawable,x,y,false);}  }
class C{  private String createFolderName(final int timestep){  StringBuffer buffer=new StringBuffer(30);  buffer.append("Traffic from ");  buffer.append(this.timestepToString(timestep - 1));  buffer.append(" to ");  buffer.append(this.timestepToString(timestep));  buffer.append(" o'clock");  return buffer.toString();}  }
class C{  public BoletoBancarioTextWatcher(EventoDeValidacao callbackErros){  setEventoDeValidacao(callbackErros);}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  public void testGetIndexedProperty(){  UnboundArbitraryBean instance=new UnboundBeanImpl();  assertEquals(null,instance.getIndexedProperty(NOT_A_PROPERTY,0));  assertEquals(OLD_VALUE,instance.getIndexedProperty(INDEXED_PROPERTY,0));  boolean outOfBounds=false;  try {    instance.getIndexedProperty(INDEXED_PROPERTY,1);  } catch (  IndexOutOfBoundsException ex) {    outOfBounds=true;  }  assertTrue(outOfBounds);  assertEquals(OLD_VALUE,instance.getIndexedProperty(MAPPED_INDEXED,0));  assertEquals(null,instance.getIndexedProperty(MAPPED_INDEXED,1));}  }
class C{  public StringMap populateKeystoneToken(StringSet serverUrls,String managerDN,String password){  URI authUri=retrieveUriFromServerUrls(serverUrls);  StringMap usernameAndTenantMap=getUsernameAndTenant(managerDN);  String username=usernameAndTenantMap.get(CinderConstants.USERNAME);  String tenantName=usernameAndTenantMap.get(CinderConstants.TENANTNAME);  KeystoneApiClient keystoneApi=getKeystoneApi(authUri,username,password,tenantName);  keystoneApi.authenticate_keystone();  StringMap keystoneAuthKeys=new StringMap();  keystoneAuthKeys.put(KeystoneConstants.AUTH_TOKEN,keystoneApi.getAuthToken());  return keystoneAuthKeys;}  }
class C{  public void testStandardTokenizer() throws Exception {  Reader reader=new StringReader("Wha\u0301t's this thing do?");  Tokenizer stream=tokenizerFactory("Standard").create(newAttributeFactory());  stream.setReader(reader);  assertTokenStreamContents(stream,new String[]{"Wha\u0301t's","this","thing","do"});}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.EQUALS_OP___EQUALS_OP_1:    setEqualsOp_1(EQUALS_OP_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @Override public int read() throws IOException {  if (buffer == null) {    throw new IOException("Stream was closed.");  }  while (pos == end) {    if (end_reached) {      return -1;    }    owner.needAppData();  }  return buffer[pos++] & 0xFF;}  }
class C{  protected DictionaryPropertyTypeImpl(){  super();}  }
class C{  public final static boolean isFlagSet(int flagSet,int testFlag){  return (flagSet & testFlag) > 0;}  }
class C{  public void saveAll(){  saveQueue.forEach(null);  saveQueue.clear();}  }
class C{  private boolean skipToNextSync(ParsableByteArray pesBuffer){  byte[] adtsData=pesBuffer.data;  int startOffset=pesBuffer.getPosition();  int endOffset=pesBuffer.limit();  for (int i=startOffset; i < endOffset; i++) {    boolean byteIsFF=(adtsData[i] & 0xFF) == 0xFF;    boolean found=lastByteWasFF && !byteIsFF && (adtsData[i] & 0xF0) == 0xF0;    lastByteWasFF=byteIsFF;    if (found) {      hasCrc=(adtsData[i] & 0x1) == 0;      pesBuffer.setPosition(i + 1);      lastByteWasFF=false;      return true;    }  }  pesBuffer.setPosition(endOffset);  return false;}  }
class C{  public TaskDTO(){  super();}  }
class C{  private void enableTorchMode(boolean enable){  if (mCameraSettings.getCurrentFlashMode() == null) {    return;  }  SettingsManager settingsManager=mActivity.getSettingsManager();  CameraCapabilities.Stringifier stringifier=mCameraCapabilities.getStringifier();  CameraCapabilities.FlashMode flashMode;  if (enable) {    flashMode=stringifier.flashModeFromString(settingsManager.getString(mAppController.getCameraScope(),Keys.KEY_VIDEOCAMERA_FLASH_MODE));  } else {    flashMode=CameraCapabilities.FlashMode.OFF;  }  if (mCameraCapabilities.supports(flashMode)) {    mCameraSettings.setFlashMode(flashMode);  }  if (mCameraDevice != null) {    mCameraDevice.applySettings(mCameraSettings);  }  mUI.updateOnScreenIndicators(mCameraSettings);}  }
class C{  private void testResample(double coord){  final int bin=getBinNr(coord);  final int sizereq, off;  if (bin < 0) {    sizereq=size - bin;    off=-bin;  } else   if (bin >= data.length) {    sizereq=bin + 1;    off=0;  } else {    return;  }  if (sizereq < data.length) {    return;  }  final int levels=BitsUtil.magnitude(sizereq / this.destsize) - 1;  assert (levels > 0) : "No resampling required?!? sizereq=" + sizereq + " destsize="+ destsize+ " array="+ data.length;  final int step=1 << levels;  final int fixpoint=off / (step - 1);{    int oup=(fixpoint >= 0) ? fixpoint : 0;    int inp=(oup << levels) - off;    assert (-step < inp && inp <= oup && oup < inp + step) : (inp + " -> " + oup+ " s="+ step+ " o="+ off+ " l="+ levels);    for (; inp < size; inp+=step, oup++) {      assert (oup < inp + step && oup < data.length);      data[oup]=downsample(data,Math.max(0,inp),Math.min(size,inp + step),step);    }    for (; oup < data.length; oup++) {      data[oup]=0;    }  }  if (off >= step) {    int oup=(fixpoint - 1 < size) ? fixpoint - 1 : size - 1;    int inp=(oup << levels) - off;    assert (oup > inp) : (inp + " -> " + oup+ " s="+ step+ " o="+ off+ " l="+ levels);    for (; inp > -step; inp-=step, oup--) {      assert (oup >= inp && oup >= 0);      data[oup]=downsample(data,Math.max(0,inp),Math.min(size,inp + step),step);    }    for (; oup >= 0; oup--) {      data[oup]=0;    }  }  base=base - (offset + off) * binsize;  offset=0;  size=(size + 1) >> levels;  binsize=binsize * (1 << levels);  max=base + binsize * size;}  }
class C{  @Deprecated public String escapeName(final String name){  return super.encodeNode(name);}  }
class C{  public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || this.getClass() != o.getClass()) {    return false;  }  return Arrays.equals(oid,((ObjectIdentifier)o).oid);}  }
class C{  public void testMergeInLeftWithNodeMergeStrategy() throws Exception {  WebXml srcWebXml=getWebXml("param","value1");  WebXml mergeWebXml=getWebXml("other","value2");  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  Element format=getContextParamElement("$left:param-name","$left:param-value $right:param-value");  NodeMergeStrategy strategy=new NodeMergeStrategy(null,format);  merger.setMergeStrategy(WebXmlType.CONTEXT_PARAM,strategy);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasContextParam(srcWebXml,"param"));  assertEquals("value1",getContextParamValue(WebXmlUtils.getContextParam(srcWebXml,"param")));}  }
class C{  public CComment(final Integer id,final IUser user,final IComment parent,final String comment){  Preconditions.checkArgument(((id == null) || (id > 0)),"Error: id can only be larger then zero or null");  this.id=id;  this.user=Preconditions.checkNotNull(user,"IE02631: user argument can not be null");  this.parent=parent;  this.comment=Preconditions.checkNotNull(comment,"IE02632: comment argument can not be null");  Preconditions.checkArgument(!comment.isEmpty(),"Error: comment must be a non empty string");  List<String> linesList=Splitter.on('\n').splitToList(comment);  lines=linesList.toArray(new String[linesList.size()]);}  }
class C{  public CategoryLabelPosition(){  this(RectangleAnchor.CENTER,TextBlockAnchor.BOTTOM_CENTER,TextAnchor.CENTER,0.0,CategoryLabelWidthType.CATEGORY,0.95f);}  }
class C{  public final GF2nPolynomial reduce(GF2nPolynomial g) throws RuntimeException, ArithmeticException {  return remainder(g);}  }
class C{  public RedoReaderManager(){}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createMessage(XSLTErrorResources.ER_ONE_OR_TWO,null));}  }
class C{  public static <T>List<T> select(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {  PreparedStatement stmt=null;  ResultSet rs=null;  try {    stmt=connection.prepareStatement(rawSqlQuery);    for (int index=0; index < parameters.length; index++) {      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);    }    rs=stmt.executeQuery();    List<T> result=Lists.newLinkedList();    while (rs.next()) {      result.add(rowProcessor.process(rs));    }    return result;  }  finally {    JdbcUtils.closeResultSet(rs);    JdbcUtils.closeStatement(stmt);  }}  }
class C{  public void requestPermissions(Integer requestCode){  if (Build.VERSION.SDK_INT >= 23 && !hasAllPermissions()) {    activity.requestPermissions(getMissingPermissions(),requestCode);  }}  }
class C{  private void invokeInsn(final int opcode,final Type type,final Method method,final boolean itf){  String owner=type.getSort() == Type.ARRAY ? type.getDescriptor() : type.getInternalName();  mv.visitMethodInsn(opcode,owner,method.getName(),method.getDescriptor(),itf);}  }
class C{  public DestructorAnswer(Lifeline caller,Lifeline callee,SequenceDiagram diagram,MessageData data,ForwardMessage forward){  super(caller,callee,diagram,data,forward);}  }
class C{  public static String chopNewline(String str){  int lastIdx=str.length() - 1;  char last=str.charAt(lastIdx);  if (last == '\n') {    if (str.charAt(lastIdx - 1) == '\r') {      lastIdx--;    }  } else {    lastIdx++;  }  return str.substring(0,lastIdx);}  }
class C{  private Sound generateSound(SoundPool soundPool,File dir,String name,int lengthMsec,int freqHz){  Sound sound=null;  File outFile=new File(dir,name + ".wav");  if (!outFile.exists()) {    try {      FileOutputStream fos=new FileOutputStream(outFile);      int sampleCount=lengthMsec * SAMPLE_RATE / 1000;      ByteBuffer buf=generateWavHeader(sampleCount);      byte[] array=buf.array();      fos.write(array);      buf=generateWavData(sampleCount,freqHz);      array=buf.array();      fos.write(array);      fos.close();      Log.d(TAG,"Wrote sound file " + outFile.toString());    } catch (    IOException ioe) {      Log.e(TAG,"sound file op failed: " + ioe.getMessage());      throw new RuntimeException(ioe);    }  } else {  }  int handle=soundPool.load(outFile.toString(),1);  return new Sound(name,soundPool,handle);}  }
class C{  @SuppressWarnings("nullness") static Object[] toArrayImpl(Collection<? extends Object> c){  return fillArray(c,new Object[c.size()]);}  }
class C{  @Override public void endWindow(){  if (counts != 0) {    Pair<V,Long> pair=new Pair<>(getAverage(),counts);    average.emit(pair);  }  sums=0;  counts=0;}  }
class C{  public CUtexObject(){}  }
class C{  public static int createAndLinkProgram(final int vertexShaderHandle,final int fragmentShaderHandle,final String[] attributes){  int programHandle=GLES20.glCreateProgram();  if (programHandle != 0) {    GLES20.glAttachShader(programHandle,vertexShaderHandle);    GLES20.glAttachShader(programHandle,fragmentShaderHandle);    if (attributes != null) {      final int size=attributes.length;      for (int i=0; i < size; i++) {        GLES20.glBindAttribLocation(programHandle,i,attributes[i]);      }    }    GLES20.glLinkProgram(programHandle);    final int[] linkStatus=new int[1];    GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);    if (linkStatus[0] == 0) {      Log.e(TAG,"Error compiling program: " + GLES20.glGetProgramInfoLog(programHandle));      GLES20.glDeleteProgram(programHandle);      programHandle=0;    }  }  if (programHandle == 0) {    throw new RuntimeException("Error creating program.");  }  return programHandle;}  }
class C{  public static synchronized void clearCache(){  if (configMap != null) {    configMap.clear();    configMap=null;  }  clearDaoCache();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void testWhitespace() throws IOException {  final InputStream stream=this.getStream(R.raw.whitespace);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(sql1,commands.get(0));}  }
class C{  public byte[] decode(final byte[] array) throws IllegalArgumentException {  return decodeHex(new String(array,getCharset()).toCharArray());}  }
class C{  public PolicyParser(){  grantEntries=new Vector<GrantEntry>();}  }
class C{  public BigdataSailQuery prepareNativeSPARQLQuery(final QueryLanguage ql,final String queryStr,final String baseURI) throws MalformedQueryException {  if (ql != QueryLanguage.SPARQL)   throw new UnsupportedOperationException(ql.toString());  if (log.isDebugEnabled()) {    log.debug(queryStr);  }  getSailConnection().flushStatementBuffers(true,true);  final ASTContainer astContainer=new Bigdata2ASTSPARQLParser().parseQuery2(queryStr,baseURI);  final QueryType queryType=astContainer.getOriginalAST().getQueryType();switch (queryType) {case SELECT:    return new BigdataSailTupleQuery(astContainer,this);case DESCRIBE:case CONSTRUCT:  return new BigdataSailGraphQuery(astContainer,this);case ASK:{  return new BigdataSailBooleanQuery(astContainer,this);}default :throw new RuntimeException("Unknown query type: " + queryType);}}  }
class C{  public static String tokenText(List<Token> tokens){  return tokenText(tokens,null);}  }
class C{  public static URI toURI(CharSequence self) throws URISyntaxException {  return new URI(self.toString());}  }
class C{  public SendablePhotoMessage.SendablePhotoMessageBuilder replyTo(long replyTo){  this.replyTo=replyTo;  return this;}  }
class C{  public Matrix augment(Matrix right){  if (rows != right.rows) {    throw new IllegalArgumentException("Matrices don't have the same number of rows");  }  Matrix result=new Matrix(rows,columns + right.columns);  for (int r=0; r < rows; r++) {    for (int c=0; c < columns; c++) {      result.data[r][c]=data[r][c];    }    for (int c=0; c < right.columns; c++) {      result.data[r][columns + c]=right.data[r][c];    }  }  return result;}  }
class C{  public VNXeCommandJob removeCifsShare(String cifsShareId,String fsId){  VNXeCommandJob job=null;  _logger.info("deleting cifs share" + cifsShareId);  FileSystemRequest fsRequest=new FileSystemRequest(_khClient,fsId);  VNXeFileSystem fs=fsRequest.get();  if (fs == null) {    _logger.info("Could not find file system in the vxne");    throw VNXeException.exceptions.vnxeCommandFailed("Could not find file system in the vnxe for: " + fsId);  }  String resourceId=fs.getStorageResource().getId();  ModifyFileSystemParam modifyFSParm=new ModifyFileSystemParam();  CifsShareDeleteParam deleteParam=new CifsShareDeleteParam();  VNXeBase share=new VNXeBase();  share.setId(cifsShareId);  deleteParam.setCifsShare(share);  List<CifsShareDeleteParam> deleteList=new ArrayList<CifsShareDeleteParam>();  deleteList.add(deleteParam);  modifyFSParm.setCifsShareDelete(deleteList);  FileSystemActionRequest req=new FileSystemActionRequest(_khClient);  job=req.modifyFileSystemAsync(modifyFSParm,resourceId);  return job;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.MAPPING_RULE__TARGET:    return getTarget();case MappingPackage.MAPPING_RULE__SOURCES:  return getSources();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private boolean initAttributes(){  if (m_M_Product_ID == 0 && !m_productWindow)   return false;  MAttributeSet as=null;  if (m_M_Product_ID != 0) {    m_product=MProduct.get(Env.getCtx(),m_M_Product_ID);    if (m_product.getM_AttributeSetInstance_ID() > 0) {      m_productASI=true;      if (m_M_AttributeSetInstance_ID != m_product.getM_AttributeSetInstance_ID()) {        log.fine("Different ASI than what is specified on Product!");      }    } else {      m_productASI=m_productWindow;    }    m_masi=MAttributeSetInstance.get(Env.getCtx(),m_M_AttributeSetInstance_ID,m_M_Product_ID);    if (m_masi == null) {      log.severe("No Model for M_AttributeSetInstance_ID=" + m_M_AttributeSetInstance_ID + ", M_Product_ID="+ m_M_Product_ID);      return false;    }    Env.setContext(Env.getCtx(),m_WindowNo,"M_AttributeSet_ID",m_masi.getM_AttributeSet_ID());    as=m_masi.getMAttributeSet();  } else {    int M_AttributeSet_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNoParent,"M_AttributeSet_ID");    m_masi=new MAttributeSetInstance(Env.getCtx(),0,M_AttributeSet_ID,null);    as=m_masi.getMAttributeSet();  }  if (as == null) {  }  if (!m_productWindow || !m_productASI) {    if (!m_productASI) {      if (m_M_AttributeSetInstance_ID == 0)       cbNewEdit.setText(Msg.getMsg(Env.getCtx(),"NewRecord")); else       cbNewEdit.setText(Msg.getMsg(Env.getCtx(),"EditRecord"));      cbNewEdit.addActionListener(this);      centerPanel.add(cbNewEdit,new ALayoutConstraint(m_row++,0));      bSelect.setText(Msg.getMsg(Env.getCtx(),"SelectExisting"));      bSelect.addActionListener(this);      centerPanel.add(bSelect,null);    }    MAttribute[] attributes=as.getMAttributes(true);    log.fine("Instance Attributes=" + attributes.length);    for (int i=0; i < attributes.length; i++)     addAttributeLine(attributes[i],false,false);  }  if (as != null) {    MAttribute[] attributes=as.getMAttributes(false);    log.fine("Product Attributes=" + attributes.length);    for (int i=0; i < attributes.length; i++)     addAttributeLine(attributes[i],true,!m_productWindow);  }  if ((!m_productWindow || !m_productASI) && as.isLot()) {    CLabel label=new CLabel(Msg.translate(Env.getCtx(),"Lot"));    label.setLabelFor(fieldLotString);    centerPanel.add(label,new ALayoutConstraint(m_row++,0));    centerPanel.add(fieldLotString,null);    fieldLotString.setText(m_masi.getLot());    String sql="SELECT M_Lot_ID, Name " + "FROM M_Lot l " + "WHERE EXISTS (SELECT M_Product_ID FROM M_Product p "+ "WHERE p.M_AttributeSet_ID=" + m_masi.getM_AttributeSet_ID() + " AND p.M_Product_ID=l.M_Product_ID)";    fieldLot=new CComboBox(DB.getKeyNamePairs(sql,true));    label=new CLabel(Msg.translate(Env.getCtx(),"M_Lot_ID"));    label.setLabelFor(fieldLot);    centerPanel.add(label,new ALayoutConstraint(m_row++,0));    centerPanel.add(fieldLot,null);    if (m_masi.getM_Lot_ID() != 0) {      for (int i=1; i < fieldLot.getItemCount(); i++) {        KeyNamePair pp=(KeyNamePair)fieldLot.getItemAt(i);        if (pp.getKey() == m_masi.getM_Lot_ID()) {          fieldLot.setSelectedIndex(i);          fieldLotString.setEditable(false);          break;        }      }    }    fieldLot.addActionListener(this);    if (m_masi.getMAttributeSet().getM_LotCtl_ID() != 0 && m_readWrite) {      if (MRole.getDefault().isTableAccess(MLot.Table_ID,false) && MRole.getDefault().isTableAccess(MLotCtl.Table_ID,false) && !m_masi.isExcludeLot(m_AD_Column_ID,Env.isSOTrx(Env.getCtx(),m_WindowNoParent))) {        centerPanel.add(bLot,null);        bLot.addActionListener(this);      }    }    fieldLot.addMouseListener(new VPAttributeDialog_mouseAdapter(this));    mZoom=new CMenuItem(Msg.getMsg(Env.getCtx(),"Zoom"),Env.getImageIcon("Zoom16.gif"));    mZoom.addActionListener(this);    popupMenu.add(mZoom);  }  if ((!m_productWindow || !m_productASI) && as.isSerNo()) {    CLabel label=new CLabel(Msg.translate(Env.getCtx(),"SerNo"));    label.setLabelFor(fieldSerNo);    fieldSerNo.setText(m_masi.getSerNo());    centerPanel.add(label,new ALayoutConstraint(m_row++,0));    centerPanel.add(fieldSerNo,null);    if (m_masi.getMAttributeSet().getM_SerNoCtl_ID() != 0 && m_readWrite) {      if (MRole.getDefault().isTableAccess(MSerNoCtl.Table_ID,false) && !m_masi.isExcludeSerNo(m_AD_Column_ID,Env.isSOTrx(Env.getCtx(),m_WindowNoParent))) {        centerPanel.add(bSerNo,null);        bSerNo.addActionListener(this);      }    }  }  if ((!m_productWindow || !m_productASI) && as.isGuaranteeDate()) {    CLabel label=new CLabel(Msg.translate(Env.getCtx(),"GuaranteeDate"));    label.setLabelFor(fieldGuaranteeDate);    if (m_M_AttributeSetInstance_ID == 0)     fieldGuaranteeDate.setValue(m_masi.getGuaranteeDate(true)); else     fieldGuaranteeDate.setValue(m_masi.getGuaranteeDate());    centerPanel.add(label,new ALayoutConstraint(m_row++,0));    centerPanel.add(fieldGuaranteeDate,null);  }  if (m_row == 0) {    ADialog.error(m_WindowNo,this,"PAttributeNoInfo");  }  if ((!m_productWindow || !m_productASI) && m_AD_Column_ID != 0 && m_readWrite) {    cbNewEdit.setSelected(m_M_AttributeSetInstance_ID == 0);    cmd_newEdit();  }  CLabel label=new CLabel(Msg.translate(Env.getCtx(),"Description"));  label.setLabelFor(fieldDescription);  fieldDescription.setText(m_masi.getDescription());  fieldDescription.setEditable(false);  centerPanel.add(label,new ALayoutConstraint(m_row++,0));  centerPanel.add(fieldDescription,null);  Dimension dd=centerPanel.getPreferredSize();  dd.width=Math.min(500,dd.width);  centerPanel.setPreferredSize(dd);  return true;}  }
class C{  private void onFailureDuringAuthRequest(MatrixError matrixError){  String message=matrixError.getLocalizedMessage();  enableLoadingScreen(false);  String errCode=matrixError.errcode;  if (null != errCode) {    if (TextUtils.equals(errCode,MatrixError.FORBIDDEN)) {      message=getResources().getString(R.string.login_error_forbidden);    } else     if (TextUtils.equals(errCode,MatrixError.UNKNOWN_TOKEN)) {      message=getResources().getString(R.string.login_error_unknown_token);    } else     if (TextUtils.equals(errCode,MatrixError.BAD_JSON)) {      message=getResources().getString(R.string.login_error_bad_json);    } else     if (TextUtils.equals(errCode,MatrixError.NOT_JSON)) {      message=getResources().getString(R.string.login_error_not_json);    } else     if (TextUtils.equals(errCode,MatrixError.LIMIT_EXCEEDED)) {      message=getResources().getString(R.string.login_error_limit_exceeded);    } else     if (TextUtils.equals(errCode,MatrixError.USER_IN_USE)) {      message=getResources().getString(R.string.login_error_user_in_use);    } else     if (TextUtils.equals(errCode,MatrixError.LOGIN_EMAIL_URL_NOT_YET)) {      message=getResources().getString(R.string.login_error_login_email_not_yet);    }  }  Log.e(LOG_TAG,"## onFailureDuringAuthRequest(): Msg= \"" + message + "\"");  Toast.makeText(getApplicationContext(),message,Toast.LENGTH_LONG).show();}  }
class C{  public ServiceCall<Void> addTextToCustomizationCorpus(String customizationId,String corpusName,Boolean allowOverride,File trainingData){  Validator.notNull(customizationId,"customizationId cannot be null");  Validator.notNull(corpusName,"corpusName cannot be null");  Validator.isTrue((trainingData != null) && trainingData.exists(),"trainingData file is null or does not exist");  RequestBuilder requestBuilder=RequestBuilder.post(String.format(PATH_CORPUS,customizationId,corpusName));  if (allowOverride != null) {    requestBuilder.query(ALLOW_OVERRIDE,allowOverride);  }  requestBuilder.body(RequestBody.create(HttpMediaType.TEXT,trainingData));  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getVoid());}  }
class C{  public String minimumCanopyDensityTipText(){  return "The minimum T2-based density below which a canopy will be pruned during periodic pruning";}  }
class C{  public void removeFrontAndBack(){  mViewFlipper.removeAllViews();}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher,int macSizeInBits){  this(cipher,macSizeInBits,null);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.activity_create_widget_clock_day_center_doneButton:    SharedPreferences.Editor editor=getSharedPreferences(getString(R.string.sp_widget_clock_day_center_setting),MODE_PRIVATE).edit();  editor.putString(getString(R.string.key_location),location.location);editor.putBoolean(getString(R.string.key_show_card),showCardSwitch.isChecked());editor.putBoolean(getString(R.string.key_hide_refresh_time),hideRefreshTimeSwitch.isChecked());editor.putBoolean(getString(R.string.key_black_text),blackTextSwitch.isChecked());editor.apply();Intent intent=getIntent();Bundle extras=intent.getExtras();int appWidgetId=0;if (extras != null) {appWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);}Intent resultValue=new Intent();resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);setResult(RESULT_OK,resultValue);Intent service=new Intent(this,WidgetClockDayCenterService.class);startService(service);finish();break;}}  }
class C{  public EditableOMLine(){  createGraphic(null);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public void notifyDataSetChanged(BaseAdapter adapter){  adapter.notifyDataSetChanged();  holder.setVisibility(adapter.getCount() == 0 ? View.VISIBLE : View.GONE);}  }
class C{  public FullTypeReference createFullTypeReference(){  FullTypeReferenceImpl fullTypeReference=new FullTypeReferenceImpl();  return fullTypeReference;}  }
class C{  public static int maxIndex(double[] doubles){  double maximum=0;  int maxIndex=0;  for (int i=0; i < doubles.length; i++) {    if ((i == 0) || (doubles[i] > maximum)) {      maxIndex=i;      maximum=doubles[i];    }  }  return maxIndex;}  }
class C{  private static double[] computeLabels(final double start,final double end,final int approxNumLabels){  if (Math.abs(start - end) < 0.0000001f) {    return new double[]{start,start,0};  }  double s=start;  double e=end;  boolean switched=false;  if (s > e) {    switched=true;    double tmp=s;    s=e;    e=tmp;  }  double xStep=roundUp(Math.abs(s - e) / approxNumLabels);  double xStart=xStep * Math.ceil(s / xStep);  double xEnd=xStep * Math.floor(e / xStep);  if (switched) {    return new double[]{xEnd,xStart,-1.0 * xStep};  }  return new double[]{xStart,xEnd,xStep};}  }
class C{  public static String prependMissingPathElements(String path,String otherPath,String separator){  List<String> pathElements=Arrays.asList(StringUtils.split(path,separator));  List<String> otherElements=Arrays.asList(StringUtils.split(otherPath,separator));  List<String> toAdd=new ArrayList<String>();  for (  String element : otherElements) {    if (!pathElements.contains(element)) {      toAdd.add(element);    }  }  List<String> newElements=new ArrayList<String>();  newElements.addAll(toAdd);  newElements.addAll(pathElements);  return StringUtils.join(newElements,separator);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public void afterReconcileGatedCheckin(final Changeset changeset,final WorkItem[] associatedWorkItems){  Check.notNull(changeset,"changeset");  Check.notNull(associatedWorkItems,"associatedWorkItems");  final boolean commentsMatch=GatedCheckinUtils.gatedCheckinCommentsMatch(changeset.getComment(),getSourceFilesSubControl().getComment());  final boolean checkinNotesMatch=GatedCheckinUtils.gatedCheckinNotesMatch(changeset.getCheckinNote(),getNotesSubControl().getCheckinNote());  final int[] committedWorkItemIds=WorkItemsCheckinControl.getIDsForWorkItems(associatedWorkItems);  final WorkItemCheckinInfo[] checkedWorkItemInfos=getWorkItemSubControl().getWorkItemTable().getCheckedWorkItems();  final int[] pendingWorkItemIds=WorkItemsCheckinControl.getIDsForWorkItemCheckinInfos(checkedWorkItemInfos);  final boolean workItemsMatch=GatedCheckinUtils.gatedCheckinWorkItemsMatch(committedWorkItemIds,pendingWorkItemIds);  if (commentsMatch && checkinNotesMatch && workItemsMatch) {    getSourceFilesSubControl().afterCheckin();    getWorkItemSubControl().afterCheckin();    getNotesSubControl().afterCheckin();  }}  }
class C{  public void await(){  if (earlier.isCompleted) {    currentThread=Thread.currentThread();    return;  }  if (earlier.getCurrentThread() == Thread.currentThread()) {    currentThread=Thread.currentThread();    return;  }  long spinStartTime=factory.getTimeSourceService().getTimeMillis();  while (!earlier.isCompleted) {    Thread.yield();    long spinDelta=factory.getTimeSourceService().getTimeMillis() - spinStartTime;    if (spinDelta > factory.getMsecWait()) {      log.info("Spin wait timeout exceeded in named window '" + factory.getName() + "' consumer dispatch at "+ factory.getMsecWait()+ "ms for "+ factory.getName()+ ", consider disabling named window consumer dispatch latching for better performance");      break;    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:15.521 -0500",hash_original_method="B2F55F064A30629408E9D67D650C8080",hash_generated_method="D4F3C97A9CA06C43D325100C5A3348BD") public void start(){  if (!isRunning()) {    run();  }}  }
class C{  protected void writeLine(String line) throws IOException {  line+='\r';  line+='\n';  outputStream.write(line.getBytes("UTF-8"));}  }
class C{  public static double P_macroAUPRC(int Y[][],double P[][]){  int L=Y[0].length;  double AUC[]=new double[L];  for (int j=0; j < L; j++) {    if (allMissing(MatrixUtils.getCol(Y,j))) {      L--;      continue;    }    ThresholdCurve curve=new ThresholdCurve();    Instances result=curve.getCurve(MLUtils.toWekaPredictions(MatrixUtils.getCol(Y,j),MatrixUtils.getCol(P,j)));    AUC[j]=ThresholdCurve.getPRCArea(result);  }  return Utils.mean(AUC);}  }
class C{  protected boolean rangeCheck(final int aoff,final int alen){  if (aoff < 0)   throw new IndexOutOfBoundsException();  if (alen < 0)   throw new IndexOutOfBoundsException();  if ((aoff + alen) > len) {    throw new IndexOutOfBoundsException();  }  return true;}  }
class C{  public void waitDone() throws ResponseTimeoutException, InvalidResponseException {  lock.lock();  try {    if (!isDoneResponse()) {      try {        condition.await(timeout,TimeUnit.MILLISECONDS);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        throw new RuntimeException("Interrupted");      }    }    if (illegalResponseException != null) {      throw illegalResponseException;    }    if (!isDoneResponse()) {      throw new ResponseTimeoutException("No response after " + timeout + " millis");    }  }  finally {    lock.unlock();  }}  }
class C{  public long tryConvertToOptimisticRead(long stamp){  long a=stamp & ABITS, m, s, next;  WNode h;  MemBar.loadFence();  for (; ; ) {    if (((s=state) & SBITS) != (stamp & SBITS))     break;    if ((m=s & ABITS) == 0L) {      if (a != 0L)       break;      return s;    } else     if (m == WBIT) {      if (a != m)       break;      U.putLongVolatile(this,STATE,next=(s+=WBIT) == 0L ? ORIGIN : s);      if ((h=whead) != null && h.status != 0)       release(h);      return next;    } else     if (a == 0L || a >= WBIT)     break; else     if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,next=s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        return next & SBITS;      }    } else     if ((next=tryDecReaderOverflow(s)) != 0L)     return next & SBITS;  }  return 0L;}  }
class C{  public void shutdown(boolean force) throws SysException, IllegalStateException {  getTransactionService().shutdown(force);}  }
class C{  public static void experimenterFromString(OFFlowMod.Builder fmb,String inst,Logger log){}  }
class C{  private void close(){  try {    in.close();  } catch (  Exception e) {  }  try {    out.close();  } catch (  Exception e) {  }}  }
class C{  public String format(BugAnnotation[] args,ClassAnnotation primaryClass,boolean abridgedMessages){  String pat=pattern;  StringBuilder result=new StringBuilder();  while (pat.length() > 0) {    int subst=pat.indexOf('{');    if (subst < 0) {      result.append(pat);      break;    }    result.append(pat.substring(0,subst));    pat=pat.substring(subst + 1);    int end=pat.indexOf('}');    if (end < 0) {      throw new IllegalStateException("unmatched { in " + pat);    }    String substPat=pat.substring(0,end);    int dot=substPat.indexOf('.');    String key="";    if (dot >= 0) {      key=substPat.substring(dot + 1);      substPat=substPat.substring(0,dot);    } else     if (abridgedMessages && primaryClass != null) {      key="givenClass";    }    int fieldNum;    try {      fieldNum=Integer.parseInt(substPat);    } catch (    NumberFormatException e) {      throw new IllegalArgumentException("Bad integer value " + substPat + " in "+ pattern);    }    if (fieldNum < 0) {      result.append("?<?" + fieldNum + "/"+ args.length+ "???");    } else     if (fieldNum >= args.length) {      result.append("?>?" + fieldNum + "/"+ args.length+ "???");    } else {      BugAnnotation field=args[fieldNum];      String formatted="";      try {        formatted=field.format(key,primaryClass);      } catch (      IllegalArgumentException iae) {        if (SystemProperties.ASSERTIONS_ENABLED) {          throw new IllegalArgumentException("Problem processing " + pattern + " format "+ substPat+ " for "+ field.getClass().getSimpleName(),iae);        }        formatted="\u00BF" + fieldNum + ".(key="+ key+ ")?";      }      result.append(formatted);    }    pat=pat.substring(end + 1);  }  return result.toString();}  }
class C{  public PartitionKeyGroupKey createPartitionKeyGroupKey(String partitionKeyGroupName){  PartitionKeyGroupKey partitionKeyGroupKey=new PartitionKeyGroupKey();  partitionKeyGroupKey.setPartitionKeyGroupName(partitionKeyGroupName);  return partitionKeyGroupKey;}  }
class C{  public final void removeAll(Object from,boolean onlyIfSameObject){  final int width=this.width;  final int height=this.height;  Bag[] fieldx=null;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      Bag bag=fieldx[y];      int len=bag.size();      for (int i=0; i < len; i++) {        Object obj=bag.get(i);        if ((obj == null && from == null) || (onlyIfSameObject && obj == from) || (!onlyIfSameObject && obj.equals(from))) {          bag.remove(i);          i--;          len--;        }      }    }  }}  }
class C{  public void resumeSystemAsync(final String deploymentId,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/resume_system",getBasePath(),deploymentId);  createObjectAsync(path,null,responseCallback);}  }
class C{  private void updateTimeViewMinMaxTime(){  GTG.cacheCreatorLock.registerReadingThread();  try {    if (GTG.cacheCreator.minTimeSec != GTG.cacheCreator.maxTimeSec) {      boolean timeChanged=false;      if (OsmMapGpsTrailerReviewerMapActivity.prefs.currTimePosSec > GTG.cacheCreator.maxTimeSec) {        OsmMapGpsTrailerReviewerMapActivity.prefs.currTimePosSec=GTG.cacheCreator.maxTimeSec;        timeChanged=true;      }      if (prefs.currTimePosSec + prefs.currTimePeriodSec < GTG.cacheCreator.minTimeSec) {        prefs.currTimePosSec-=GTG.cacheCreator.minTimeSec - (prefs.currTimePosSec + prefs.currTimePeriodSec);        timeChanged=true;      }      if (timeChanged)       updateTimeViewTime();    }    timeView.setMinMaxTime(GTG.cacheCreator.minTimeSec,GTG.cacheCreator.maxTimeSec);  }  finally {    GTG.cacheCreatorLock.unregisterReadingThread();  }}  }
class C{  @Override public Shortcut readNotNull(AppContext ctx,ShortcutPK id){  return ds.readNotNull(ctx,type,id);}  }
class C{  public static double entropyConditionedOnColumns(double[][] matrix){  double returnValue=0, sumForColumn, total=0;  for (int j=0; j < matrix[0].length; j++) {    sumForColumn=0;    for (int i=0; i < matrix.length; i++) {      returnValue=returnValue + lnFunc(matrix[i][j]);      sumForColumn+=matrix[i][j];    }    returnValue=returnValue - lnFunc(sumForColumn);    total+=sumForColumn;  }  if (Utils.eq(total,0)) {    return 0;  }  return -returnValue / (total * log2);}  }
class C{  @SuppressFBWarnings("DM_EXIT") @Override public IBinder onBind(Intent intent){  mMessenger=new Messenger(new IncomingHandler(getApplicationContext()));  try {    new LauncherWarmUpTask().execute(getApplicationContext());    ((ChromeApplication)getApplication()).startBrowserProcessesAndLoadLibrariesSync(true);    ApplicationInitialization.enableFullscreenFlags(getApplicationContext().getResources(),getApplicationContext(),R.dimen.control_container_height);  } catch (  ProcessInitException e) {    Log.e(this.getClass().toString(),"ProcessInitException while starting the browser process");    System.exit(-1);  }  return mMessenger.getBinder();}  }
class C{  protected Option(OptionSet set,int type,String name,String description){  this.type=type;  this.name=name;  this.description=description;  this.set=set;  this.key=set.register(this,name);}  }
class C{  private boolean populateCgSnapshotInfo(List<VolumeSnapshot> snapshots,ScReplay[] replays){  boolean complete=true;  for (  VolumeSnapshot snapshot : snapshots) {    boolean found=false;    for (    ScReplay replay : replays) {      if (replay.instanceId.startsWith(snapshot.getParentId())) {        util.getVolumeSnapshotFromReplay(replay,snapshot);        found=true;        break;      }    }    if (!found) {      complete=false;      LOG.warn("Unable to find snapshot for {}",snapshot.getDisplayName());    }  }  return complete;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private void checkHelper(IR ir,AvExCache cache,Instruction inst){  AvailableExpression ae=cache.find(inst);  if (ae != null) {    RegisterOperand dest=GuardResultCarrier.getClearGuardResult(inst);    if (ae.tmp == null) {      RegisterOperand newRes=ir.regpool.makeTemp(dest.getType());      ae.tmp=newRes.getRegister();      RegisterOperand res=GuardResultCarrier.getClearGuardResult(ae.inst);      GuardResultCarrier.setGuardResult(ae.inst,newRes);      ae.inst.insertAfter(Move.create(GUARD_MOVE,res,newRes.copyD2U()));      Move.mutate(inst,GUARD_MOVE,dest,newRes.copyD2U());    } else {      RegisterOperand newRes=new RegisterOperand(ae.tmp,dest.getType());      Move.mutate(inst,GUARD_MOVE,dest,newRes);    }  } else {    cache.insert(inst);  }}  }
class C{  public void testChecksumValueMismatch() throws Exception {  Serializer serializer=new ProtobufSerializer();  ReplDBMSEvent replEvent=new ReplDBMSEvent(33,(short)0,true,"unittest",1,new Timestamp(System.currentTimeMillis()),new DBMSEvent());  LogFile tfrw=writeToLogFile("testChecksumValueMismatch.dat",replEvent);  RandomAccessFile raf=new RandomAccessFile(tfrw.getFile(),"rw");  long len=raf.length();  raf.seek(len - 8);  raf.writeLong(25);  raf.close();  LogFile tfro=LogHelper.openExistingFileForRead("testChecksumValueMismatch.dat");  LogRecord logRec2=tfro.readRecord(0);  try {    LogEventReplReader reader=new LogEventReplReader(logRec2,serializer,true);    throw new Exception("Able to instantiate reader with corrupt CRC type: reader=" + reader.toString());  } catch (  LogConsistencyException e) {    logger.info("Got expected exception: " + e.toString(),e);  } finally {    tfro.close();  }  tfro=LogHelper.openExistingFileForRead("testChecksumValueMismatch.dat");  logRec2=tfro.readRecord(0);  try {    LogEventReplReader reader=new LogEventReplReader(logRec2,serializer,false);    reader.deserializeEvent();    reader.done();    assertEquals("Checking recordType",LogRecord.EVENT_REPL,reader.getRecordType());    assertEquals("Checking setno",33,reader.getSeqno());    logger.info("Able to ignore bad checksum type with checksums disabled...");  }  finally {    tfro.close();  }}  }
class C{  @RequestMapping(value="/SsoClient/SSO/{tenant:.*}",method=RequestMethod.POST) public void consumeResponse(Locale locale,@PathVariable(value="tenant") final String tenant,HttpServletRequest request,HttpServletResponse httpResponse){  logger.info("You have POST'ed to " + "Websso client library!");  Validate.notNull(request);  ValidationState validator=new SsoValidationState(request,this);  try {    validator.validate();    Message message=this.createMessage(validator);    if (validator.getStatus().equals(StatusCode.SUCCESS_URI)) {      authenticationSuccess(message,locale,tenant,request,httpResponse);    } else {      authenticationError(message,locale,tenant,request,httpResponse);    }  } catch (  Exception e) {    logger.error("Authentication Exception:",e);    if (validator.getValidationResult().isValid()) {      validator.setValidationResult(new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,Error.BAD_RESPONSE,e.getMessage()));      internalError(e,locale,tenant,request,httpResponse);    } else {      Message errorMessage=this.createMessage(validator);      authenticationError(errorMessage,locale,tenant,request,httpResponse);    }  }}  }
class C{  public static Number multiply(Character left,Character right){  return multiply(Integer.valueOf(left),right);}  }
class C{  public BitField(int size){  bits=new int[(((size) - 1) >>> 0x5) + 1];}  }
class C{  public boolean verifyKeyedChecksum(byte[] data,int size,byte[] key,byte[] checksum,int usage) throws KrbCryptoException {  try {    byte[] newCksum=Des3.calculateChecksum(key,usage,data,0,size);    return isChecksumEqual(checksum,newCksum);  } catch (  GeneralSecurityException e) {    KrbCryptoException ke=new KrbCryptoException(e.getMessage());    ke.initCause(e);    throw ke;  }}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (!(other instanceof RefreshNotificationType))   return false;  final RefreshNotificationType that=(RefreshNotificationType)other;  if (!StringUtils.equals(this.type,that.type))   return false;  if (!StringUtils.equals(this.msg,that.msg))   return false;  return true;}  }
class C{  public DirectEdge(){  this.connector=null;  this.source=null;  this.sourcePort=0;  this.target=null;  this.targetPort=0;}  }
class C{  private boolean tryMapRegs(ArrayList<RegisterSpec> specs,int ropReg,int maxAllowedCategory,boolean markReserved){  boolean remaining=false;  for (  RegisterSpec spec : specs) {    if (ssaRegsMapped.get(spec.getReg())) {      continue;    }    boolean succeeded;    succeeded=tryMapReg(spec,ropReg,maxAllowedCategory);    remaining=!succeeded || remaining;    if (succeeded && markReserved) {      markReserved(ropReg,spec.getCategory());    }  }  return !remaining;}  }
class C{  public DistinguishedNameException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public Promise<Void> replaceStream(CountedReference<WebRTCMediaStream> mediaStream){  return ask(new PeerConnectionActor.ReplaceStream(mediaStream.acquire()));}  }
class C{  public EndpointV2 findEndpoint(EndpointResponse response,String serviceId){  _log.debug("START - findEndpoint");  if (serviceId == null) {    _log.error("serviceId is null");    throw APIException.internalServerErrors.targetIsNullOrEmpty("Service id");  }  for (  EndpointV2 endpoint : response.getEndpoints()) {    if (endpoint.getServiceId().equals(serviceId)) {      _log.debug("END - findEndpoint");      return endpoint;    }  }  _log.warn("Missing endpoint for service {}",serviceId);  return null;}  }
class C{  public TileHolder(File basepath,String fileName,boolean isTiled) throws FormatException {  this.fileName=fileName;  this.basepath=basepath;  curTile=-1;  if (isTiled) {    tileStuff=doTileRefStuff(basepath);  } else {    currentTileFile=new DcwRecordFile(basepath + File.separator + fileName);  }}  }
class C{  public boolean context_counts(){  return soot.PhaseOptions.getBoolean(options,"context-counts");}  }
class C{  protected LocPathIterator changePartToRef(final QName uniquePseudoVarName,WalkingIterator wi,final int numSteps,final boolean isGlobal){  Variable var=new Variable();  var.setQName(uniquePseudoVarName);  var.setIsGlobal(isGlobal);  if (isGlobal) {    ElemTemplateElement elem=getElemFromExpression(wi);    StylesheetRoot root=elem.getStylesheetRoot();    Vector vars=root.getVariablesAndParamsComposed();    var.setIndex(vars.size() - 1);  }  AxesWalker walker=wi.getFirstWalker();  for (int i=0; i < numSteps; i++) {    assertion(null != walker,"Walker should not be null!");    walker=walker.getNextWalker();  }  if (null != walker) {    FilterExprWalker few=new FilterExprWalker(wi);    few.setInnerExpression(var);    few.exprSetParent(wi);    few.setNextWalker(walker);    walker.setPrevWalker(few);    wi.setFirstWalker(few);    return wi;  } else {    FilterExprIteratorSimple feis=new FilterExprIteratorSimple(var);    feis.exprSetParent(wi.exprGetParent());    return feis;  }}  }
class C{  public static String correctURL(String url){  if (url == null) {    return url;  }  int begin=url.indexOf("://");  if (begin > 0 && url.indexOf("/",begin + 3) < 0) {    url=url + "/";  }  if (begin > 0 && !url.substring(begin + 3).contains("//") && !url.contains("./")) {    return url;  }  String ret=url;  String end=null;  String tmp=null;  boolean endisslash=false;  if (url.startsWith("http://")) {    begin=8;  } else   if (url.startsWith("https://")) {    begin=9;  } else {    begin=0;  }  final int first=url.indexOf("/",begin);  if (first < 0) {    return ret;  }  ret=url.substring(0,first);  final int endp=url.indexOf("?",first);  if (endp > 0) {    end=url.substring(endp);    tmp=url.substring(first,endp);  } else {    tmp=url.substring(first);  }  endisslash=tmp.endsWith("/");  tmp=tmp.replaceAll("/{3,}","/");  final String parts[]=tmp.split("/");  for (int i=0; i < parts.length; i++) {    if (parts[i].equalsIgnoreCase(".")) {      parts[i]="";    } else     if (parts[i].equalsIgnoreCase("..")) {      if (i > 0) {        int j=i - 1;        while (true && j > 0) {          if (parts[j].length() > 0) {            parts[j]="";            break;          }          j--;        }      }      parts[i]="";    } else     if (i > 0 && parts[i].length() == 0) {      parts[i]="/";    }  }  tmp="";  for (  final String part : parts) {    if (part.length() > 0) {      if ("/".equals(part)) {        tmp=tmp + "/";      } else {        tmp=tmp + "/" + part;      }    }  }  if (endisslash) {    tmp=tmp + "/";  }  return ret + tmp + (end != null ? end : "");}  }
class C{  public ProcessStartSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public void removeSuggested(String parameter){  parameters.remove(parameter);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.010 -0400",hash_original_method="3590979F2C43DA1B63D40973316C3758",hash_generated_method="AE9345C0EED04FE3E81F7B7E760669CD") public final void trace(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {    log(SimpleLog.LOG_LEVEL_TRACE,message,t);  }}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  public boolean isMounted(){  return mounted;}  }
class C{  public static Paint newBackgroundPaint(Context context){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(DEFAULT_BACKGROUND_COLOR_ID));  return paint;}  }
class C{  public int add(GL10 gl,Drawable background,String text,Paint textPaint){  return add(gl,background,text,textPaint,0,0);}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() / right.num());}  }
class C{  public void arrayStore(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IASTORE));}  }
class C{  static public String safeSubstring(String text,int beginIndex,int endIndexExclusive){  if (text == null) {    return null;  }  int textLength=text.length();  if (beginIndex < 0) {    beginIndex=0;  }  if (endIndexExclusive < 0) {    endIndexExclusive=0;  }  if (endIndexExclusive > textLength) {    endIndexExclusive=textLength;  }  if (beginIndex > endIndexExclusive) {    beginIndex=endIndexExclusive;  }  if (beginIndex == endIndexExclusive) {    return "";  }  return text.substring(beginIndex,endIndexExclusive);}  }
class C{  @Override public Long hset(final String key,final String field,final String value){  checkIsInMultiOrPipeline();  client.hset(key,field,value);  return client.getIntegerReply();}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(3);  newVector.addElement(new Option("\tSize of each bag, as a percentage of the\n" + "\ttraining set size. (default 100)","P",1,"-P"));  newVector.addElement(new Option("\tCalculate the out of bag error.","O",0,"-O"));  newVector.addElement(new Option("\tRepresent copies of instances using weights rather than explicitly.","-represent-copies-using-weights",0,"-represent-copies-using-weights"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public static void grayToBinary(BinaryVariable variable){  int n=variable.getNumberOfBits();  BitSet gray=variable.getBitSet();  variable.set(n - 1,gray.get(n - 1));  for (int i=n - 2; i >= 0; i--) {    variable.set(i,variable.get(i + 1) ^ gray.get(i));  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public Evidence(final int typeEvidenceId){  this(typeEvidenceId,Keys.self().getAesKey());}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(clientId);  sb.append("\n ");switch (status) {case CONNECTED:    sb.append(context.getString(R.string.connection_connected_to));  break;case DISCONNECTED:sb.append(context.getString(R.string.connection_disconnected_from));break;case NONE:sb.append(context.getString(R.string.connection_unknown_status));break;case CONNECTING:sb.append(context.getString(R.string.connection_connecting_to));break;case DISCONNECTING:sb.append(context.getString(R.string.connection_disconnecting_from));break;case ERROR:sb.append(context.getString(R.string.connection_error_connecting_to));}sb.append(" ");sb.append(host);return sb.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize=3;  double n;  double sum;  int[] dX;  int[] dY;  double[] weights;  int midPoint;  int numPixelsInFilter;  boolean reflectAtBorders=false;  double sigmaD=0;  double recipRoot2PiTimesSigmaD;  double twoSigmaSqrD;  double zN, zFinal;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigmaD=Double.parseDouble(args[i]);    } else     if (i == 3) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigmaD < 0.5) {    sigmaD=0.5;  } else   if (sigmaD > 20) {    sigmaD=20;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    recipRoot2PiTimesSigmaD=1 / (Math.sqrt(2 * Math.PI) * sigmaD);    twoSigmaSqrD=2 * sigmaD * sigmaD;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (i * i) / twoSigmaSqrD);      if (weight <= 0.001) {        filterSize=i * 2 + 1;        break;      }    }    if (filterSize % 2 == 0) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    weights=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2) + 1;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        x=col - midPoint;        y=row - midPoint;        dX[a]=x;        dY[a]=y;        weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (x * x + y * y) / twoSigmaSqrD);        weights[a]=weight;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          zFinal=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights[a];              zFinal+=weights[a] * zN;            }          }          outputFile.setValue(row,col,zFinal / sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void beginWindow(long windowId){  emitted=false;}  }
class C{  public boolean has(String key){  return urlParams.get(key) != null || streamParams.get(key) != null || fileParams.get(key) != null || urlParamsWithObjects.get(key) != null || fileArrayParams.get(key) != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:32.153 -0500",hash_original_method="87A56F69F978A1F4113143BFD741AEF0",hash_generated_method="E5109B1670976D516FDE9A73A8892416") protected AbstractPoolEntry(ClientConnectionOperator connOperator,HttpRoute route){  super();  if (connOperator == null) {    throw new IllegalArgumentException("Connection operator may not be null");  }  this.connOperator=connOperator;  this.connection=connOperator.createConnection();  this.route=route;  this.tracker=null;}  }
class C{  public AndFilter(PacketFilter... filters){  if (filters == null) {    throw new IllegalArgumentException("Parameter cannot be null.");  }  for (  PacketFilter filter : filters) {    if (filter == null) {      throw new IllegalArgumentException("Parameter cannot be null.");    }    this.filters.add(filter);  }}  }
class C{  protected void firePseudoAttributes(){  if (m_tracer != null) {    try {      m_writer.flush();      StringBuffer sb=new StringBuffer();      int nAttrs=m_attributes.getLength();      if (nAttrs > 0) {        java.io.Writer writer=new ToStream.WritertoStringBuffer(sb);        processAttributes(writer,nAttrs);      }      sb.append('>');      char ch[]=sb.toString().toCharArray();      m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_OUTPUT_PSEUDO_CHARACTERS,ch,0,ch.length);    } catch (    IOException ioe) {    }catch (    SAXException se) {    }  }}  }
class C{  public ErrorDialog(Window owner,String key,Object... arguments){  super(owner,"error." + key,ModalityType.APPLICATION_MODAL,arguments);  layoutDefault(new JPanel(),makeOkButton());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode17.class,args);}  }
class C{  public void init(Properties p) throws WorkloadException {  table=p.getProperty(TABLENAME_PROPERTY,TABLENAME_PROPERTY_DEFAULT);  fieldcount=Integer.parseInt(p.getProperty(FIELD_COUNT_PROPERTY,FIELD_COUNT_PROPERTY_DEFAULT));  fieldlengthgenerator=CoreWorkload.getFieldLengthGenerator(p);  double readproportion=Double.parseDouble(p.getProperty(READ_PROPORTION_PROPERTY,READ_PROPORTION_PROPERTY_DEFAULT));  double updateproportion=Double.parseDouble(p.getProperty(UPDATE_PROPORTION_PROPERTY,UPDATE_PROPORTION_PROPERTY_DEFAULT));  double insertproportion=Double.parseDouble(p.getProperty(INSERT_PROPORTION_PROPERTY,INSERT_PROPORTION_PROPERTY_DEFAULT));  double scanproportion=Double.parseDouble(p.getProperty(SCAN_PROPORTION_PROPERTY,SCAN_PROPORTION_PROPERTY_DEFAULT));  double readmodifywriteproportion=Double.parseDouble(p.getProperty(READMODIFYWRITE_PROPORTION_PROPERTY,READMODIFYWRITE_PROPORTION_PROPERTY_DEFAULT));  recordcount=Integer.parseInt(p.getProperty(Client.RECORD_COUNT_PROPERTY));  String requestdistrib=p.getProperty(REQUEST_DISTRIBUTION_PROPERTY,REQUEST_DISTRIBUTION_PROPERTY_DEFAULT);  int maxscanlength=Integer.parseInt(p.getProperty(MAX_SCAN_LENGTH_PROPERTY,MAX_SCAN_LENGTH_PROPERTY_DEFAULT));  String scanlengthdistrib=p.getProperty(SCAN_LENGTH_DISTRIBUTION_PROPERTY,SCAN_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT);  int insertstart=Integer.parseInt(p.getProperty(INSERT_START_PROPERTY,INSERT_START_PROPERTY_DEFAULT));  readallfields=Boolean.parseBoolean(p.getProperty(READ_ALL_FIELDS_PROPERTY,READ_ALL_FIELDS_PROPERTY_DEFAULT));  writeallfields=Boolean.parseBoolean(p.getProperty(WRITE_ALL_FIELDS_PROPERTY,WRITE_ALL_FIELDS_PROPERTY_DEFAULT));  if (p.getProperty(INSERT_ORDER_PROPERTY,INSERT_ORDER_PROPERTY_DEFAULT).compareTo("hashed") == 0) {    orderedinserts=false;  } else   if (requestdistrib.compareTo("exponential") == 0) {    double percentile=Double.parseDouble(p.getProperty(ExponentialGenerator.EXPONENTIAL_PERCENTILE_PROPERTY,ExponentialGenerator.EXPONENTIAL_PERCENTILE_DEFAULT));    double frac=Double.parseDouble(p.getProperty(ExponentialGenerator.EXPONENTIAL_FRAC_PROPERTY,ExponentialGenerator.EXPONENTIAL_FRAC_DEFAULT));    keychooser=new ExponentialGenerator(percentile,recordcount * frac);  } else {    orderedinserts=true;  }  keysequence=new CounterGenerator(insertstart);  operationchooser=new DiscreteGenerator();  if (readproportion > 0) {    operationchooser.addValue(readproportion,"READ");  }  if (updateproportion > 0) {    operationchooser.addValue(updateproportion,"UPDATE");  }  if (insertproportion > 0) {    operationchooser.addValue(insertproportion,"INSERT");  }  if (scanproportion > 0) {    operationchooser.addValue(scanproportion,"SCAN");  }  if (readmodifywriteproportion > 0) {    operationchooser.addValue(readmodifywriteproportion,"READMODIFYWRITE");  }  transactioninsertkeysequence=new CounterGenerator(recordcount);  if (requestdistrib.compareTo("uniform") == 0) {    keychooser=new UniformIntegerGenerator(0,recordcount - 1);  } else   if (requestdistrib.compareTo("zipfian") == 0) {    int opcount=Integer.parseInt(p.getProperty(Client.OPERATION_COUNT_PROPERTY));    int expectednewkeys=(int)(((double)opcount) * insertproportion * 2.0);    keychooser=new ScrambledZipfianGenerator(recordcount + expectednewkeys);  } else   if (requestdistrib.compareTo("latest") == 0) {    keychooser=new SkewedLatestGenerator(transactioninsertkeysequence);  } else   if (requestdistrib.equals("hotspot")) {    double hotsetfraction=Double.parseDouble(p.getProperty(HOTSPOT_DATA_FRACTION,HOTSPOT_DATA_FRACTION_DEFAULT));    double hotopnfraction=Double.parseDouble(p.getProperty(HOTSPOT_OPN_FRACTION,HOTSPOT_OPN_FRACTION_DEFAULT));    keychooser=new HotspotIntegerGenerator(0,recordcount - 1,hotsetfraction,hotopnfraction);  } else {    throw new WorkloadException("Unknown request distribution \"" + requestdistrib + "\"");  }  fieldchooser=new UniformIntegerGenerator(0,fieldcount - 1);  if (scanlengthdistrib.compareTo("uniform") == 0) {    scanlength=new UniformIntegerGenerator(1,maxscanlength);  } else   if (scanlengthdistrib.compareTo("zipfian") == 0) {    scanlength=new ZipfianGenerator(1,maxscanlength);  } else {    throw new WorkloadException("Distribution \"" + scanlengthdistrib + "\" not allowed for scan length");  }  _measurements=Measurements.getMeasurements();}  }
class C{  private boolean applyDSE(TestSuiteChromosome suite,int testIndex,TestChromosome test,LocalSearchObjective<TestSuiteChromosome> objective){  TestSuiteLocalSearchObjective testSuiteObject=TestSuiteLocalSearchObjective.buildNewTestSuiteLocalSearchObjective(objective.getFitnessFunctions(),suite,testIndex);  DSETestCaseLocalSearch dseTestCaseLocalSearch=new DSETestCaseLocalSearch(suite);  boolean improved=dseTestCaseLocalSearch.doSearch(test,testSuiteObject);  return improved;}  }
class C{  public int printErrors(Writer out) throws IOException {  DiagnosticListener diagnosticListener=opts.getDiagnosticListener();  return errorVisitor.printErrors(out,diagnosticListener,true,false);}  }
class C{  @SuppressWarnings("unchecked") public static <T>Function<T,Integer> zero(){  return (Function<T,Integer>)ZERO;}  }
class C{  static public void addEdgeTransformHandles(Figure f,Collection<Handle> handles){  if (f.isTransformable()) {    handles.add(south(f));    handles.add(north(f));    handles.add(east(f));    handles.add(west(f));  }}  }
class C{  public DFS(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public CompareResult open(){  final ContentComparator[] comparatorArray=comparators.toArray(new ContentComparator[comparators.size()]);  final CustomCompareEditorInput input=new CustomCompareEditorInput(modified,original,ancestor,comparatorArray,compareConfiguration,externalCompareHandler);  if (compareConfiguration.isLeftEditable() || compareConfiguration.isRightEditable()) {    compareConfiguration.setProperty("org.eclipse.compare.internal.CONFIRM_SAVE_PROPERTY",Boolean.FALSE);    input.setAlwaysDirty(alwaysDirty);  }  input.addSaveListener(new ProxyCompareSaveListener());  log.info(MessageFormat.format("Comparing {0} to {1}",getLabelNOLOC(modified),getLabelNOLOC(original)));  compareUIType.openCompareUI(input);  final boolean contentsIdentical=(input.getCompareResult() == null);  final boolean contentsSaved=(input.getSavedContents().length > 0);  return new CompareResult(contentsIdentical,input.wasOKPressed(),contentsSaved);}  }
class C{  public static Response generateCustomResponse(Response.Status responseStatus,Base entity){  return generateCustomResponse(responseStatus,entity,null,null);}  }
class C{  protected Metric reduce(List<Metric> metrics,List<String> constants){  SystemAssert.requireArgument(metrics != null,"Cannot transform empty metric/metrics");  MetricDistiller distiller=new MetricDistiller();  distiller.distill(metrics);  Map<Long,List<String>> collated=collate(metrics);  Map<Long,String> reducedDatapoints=reduce(collated,constants,metrics);  String newMetricName=distiller.getMetric() == null ? defaultMetricName : distiller.getMetric();  Metric newMetric=new Metric(defaultScope,newMetricName);  newMetric.setDisplayName(distiller.getDisplayName());  newMetric.setUnits(distiller.getUnits());  newMetric.setTags(distiller.getTags());  newMetric.setDatapoints(reducedDatapoints);  return newMetric;}  }
class C{  private void startChronometer(){  if (chronometer != null) {    chronometer.start();    chronometer.setTextColor(ThemeUtils.fetchAttrColor(getContext(),R.attr.colorTimerText));  }  if (scrambleEnabled) {    currentScramble=realScramble;    generateNewScramble();  }}  }
class C{  private static void checkParameters(CategorySeries dataset,DefaultRenderer renderer){  if (dataset == null || renderer == null || dataset.getItemCount() != renderer.getSeriesRendererCount()) {    throw new IllegalArgumentException("Dataset and renderer should be not null and the dataset number of items should be equal to the number of series renderers");  }}  }
class C{  private void cleanUpProductSessions(){  prodSessionMgmt.deleteAllSessions();}  }
class C{  protected ForwardingFileObject(F fileObject){  fileObject.getClass();  this.fileObject=fileObject;}  }
class C{  public BaseItemStreamRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static void assertNull(Object object,String errorMessage){  if (verbose) {    log("assertNull(" + object + ", "+ errorMessage+ ")");  }  assertBool(object == null,errorMessage);}  }
class C{  public static int subIndex(int n,int[] docStarts){  int size=docStarts.length;  int lo=0;  int hi=size - 1;  while (hi >= lo) {    int mid=(lo + hi) >>> 1;    int midValue=docStarts[mid];    if (n < midValue)     hi=mid - 1; else     if (n > midValue)     lo=mid + 1; else {      while (mid + 1 < size && docStarts[mid + 1] == midValue) {        mid++;      }      return mid;    }  }  return hi;}  }
class C{  public static void write(Path self,String text) throws IOException {  write(self,text,false);}  }
class C{  public Builder address(InetSocketAddress address){  this.address=address;  return this;}  }
class C{  @Override public Object assemble(Serializable cached,Object owner) throws HibernateException {  return this.deepCopy(cached);}  }
class C{  public void cleanupTasks(){  int count=0;  for (  Future taskThread : taskSet) {    if (!taskThread.isDone()) {      taskThread.cancel(true);    }    count++;  }  taskSet.clear();  taskSet.clear();  if (count > 0) {    log.debug("Interrupted {} background tasks",count);  }}  }
class C{  public static Label createLabel(Composite parent,String key){  Label label=new Label(parent,SWT.NULL);  label.setText(DBPlugin.getResourceString(key));  return label;}  }
class C{  public void testCertPathValidatorException16(){  CertPathValidatorException tE=new CertPathValidatorException();  assertEquals("getIndex() must be equals -1",-1,tE.getIndex());  for (int i=0; i < msgs.length; i++) {    tE=new CertPathValidatorException(msgs[i]);    assertEquals("getIndex() must be equals -1",-1,tE.getIndex());  }  Throwable cause=null;  tE=new CertPathValidatorException(cause);  assertEquals("getIndex() must be equals -1",-1,tE.getIndex());  tE=new CertPathValidatorException(tCause);  assertEquals("getIndex() must be equals -1",-1,tE.getIndex());  for (int i=0; i < msgs.length; i++) {    tE=new CertPathValidatorException(msgs[i],tCause);    assertEquals("getIndex() must be equals -1",-1,tE.getIndex());  }  tE=new CertPathValidatorException(null,null,null,-1);  assertEquals("getIndex() must be equals -1",-1,tE.getIndex());  myCertPath mcp=new myCertPath("X.509","");  CertPath cp=mcp.get("X.509");  for (int i=0; i < msgs.length; i++) {    try {      tE=new CertPathValidatorException(msgs[i],tCause,cp,-1);      assertNotNull("getIndex() must not return null",tE.getCertPath());      assertEquals("getIndex() must return ".concat(cp.toString()),tE.getCertPath(),cp);    } catch (    IndexOutOfBoundsException e) {      fail("Unexpected IndexOutOfBoundsException was thrown. " + e.getMessage());    }  }}  }
class C{  public static int turns(int n,int low,int high){  int turns=0;  while (high >= low) {    turns++;    int mid=(low + high) / 2;    if (mid == n) {      return turns;    } else     if (mid < n) {      low=mid + 1;    } else {      high=mid - 1;    }  }  return turns;}  }
class C{  public Duration withNanos(int nanoOfSecond){  NANO_OF_SECOND.checkValidIntValue(nanoOfSecond);  return create(seconds,nanoOfSecond);}  }
class C{  public static OperatorDocBundle load(ClassLoader classLoader,String resource){  return (OperatorDocBundle)ResourceBundle.getBundle(resource,Locale.getDefault(),classLoader,new XMLControl());}  }
class C{  public DoubleMatrix2D sample(DoubleMatrix2D matrix,double value,double nonZeroFraction){  int rows=matrix.rows();  int columns=matrix.columns();  double epsilon=1e-09;  if (nonZeroFraction < 0 - epsilon || nonZeroFraction > 1 + epsilon)   throw new IllegalArgumentException();  if (nonZeroFraction < 0)   nonZeroFraction=0;  if (nonZeroFraction > 1)   nonZeroFraction=1;  matrix.assign(0);  int size=rows * columns;  int n=(int)Math.round(size * nonZeroFraction);  if (n == 0)   return matrix;  cern.jet.random.sampling.RandomSamplingAssistant sampler=new cern.jet.random.sampling.RandomSamplingAssistant(n,size,new cern.jet.random.engine.MersenneTwister());  for (int i=0; i < size; i++) {    if (sampler.sampleNextElement()) {      int row=(int)(i / columns);      int column=(int)(i % columns);      matrix.set(row,column,value);    }  }  return matrix;}  }
class C{  public String clusterName(){  return clusterName;}  }
class C{  protected void parseDefineText(int type,InStream in) throws IOException {  int id=in.readUI16();  Rect bounds=new Rect(in);  Matrix matrix=new Matrix(in);  SWFText text=(type == TAG_DEFINETEXT) ? tagtypes.tagDefineText(id,bounds,matrix) : tagtypes.tagDefineText2(id,bounds,matrix);  if (text == null) {    return;  }  int glyphBits=in.readUI8();  int advanceBits=in.readUI8();  int firstByte;  while ((firstByte=in.readUI8()) != 0) {    if ((firstByte & 0x80) == 0) {      int glyphCount=firstByte & 0x7f;      int[] glyphs=new int[glyphCount];      int[] advances=new int[glyphCount];      for (int i=0; i < glyphCount; i++) {        glyphs[i]=(int)in.readUBits(glyphBits);        advances[i]=in.readSBits(advanceBits);      }      text.text(glyphs,advances);    } else {      int flags=firstByte;      int fontId=0;      if ((flags & TEXT_HAS_FONT) != 0) {        fontId=in.readUI16();      }      if ((flags & TEXT_HAS_COLOR) != 0) {        text.color((type == TAG_DEFINETEXT2) ? new AlphaColor(in) : new Color(in));      }      if ((flags & TEXT_HAS_XOFFSET) != 0) {        text.setX(in.readSI16());      }      if ((flags & TEXT_HAS_YOFFSET) != 0) {        text.setY(in.readSI16());      }      if ((flags & TEXT_HAS_FONT) != 0) {        int textHeight=in.readUI16();        text.font(fontId,textHeight);      }    }  }  text.done();}  }
class C{  public S2Loop(S2Cell cell){  this(cell,cell.getRectBound());}  }
class C{  public FixedSizedSchedulerImpl(int corePoolSize){  super(corePoolSize,new MariaDbThreadFactory());  setKeepAliveTime(2,TimeUnit.HOURS);  allowCoreThreadTimeOut(true);}  }
class C{  public User selectByPrimaryKey(Integer id) throws SQLException {  User key=new User();  key.setId(id);  User record=(User)sqlMapClient.queryForObject("t_user.ibatorgenerated_selectByPrimaryKey",key);  return record;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttribute04.class,args);}  }
class C{  public int indexOfAny(LuaString accept){  final int ilimit=m_offset + m_length;  final int jlimit=accept.m_offset + accept.m_length;  for (int i=m_offset; i < ilimit; ++i) {    for (int j=accept.m_offset; j < jlimit; ++j) {      if (m_bytes[i] == accept.m_bytes[j]) {        return i - m_offset;      }    }  }  return -1;}  }
class C{  public static RenderingHints convertImageRendering(Element e,RenderingHints hints){  Value v=getComputedStyle(e,SVGCSSEngine.IMAGE_RENDERING_INDEX);  String s=v.getStringValue();  int len=s.length();  if ((len == 4) && (s.charAt(0) == 'a'))   return hints;  if (len < 13)   return hints;  if (hints == null)   hints=new RenderingHints(null);switch (s.charAt(8)) {case 's':    hints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_SPEED);  hints.put(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);break;case 'q':hints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);hints.put(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);break;}return hints;}  }
class C{  public TemplateList(){  super();}  }
class C{  private void hideMessagesTab(){  getShowMessagesToggleButton().setText(Constant.messages.getString("spider.toolbar.button.showmessages.label"));  tabbedPane.removeAll();  mainPanel.removeAll();  mainPanel.add(getUrlsTableScrollPane());  mainPanel.revalidate();}  }
class C{  public static void appendInt(AbstractStringBuilder sb,int i){  convertInt(sb,i);}  }
class C{  @Override public void onMessage(Message message){  try {    testConsumer=consumerSession.createConsumer(topic);    consumerSession.createProducer(topic);synchronized (lock) {      lock.notify();    }  } catch (  Exception ex) {    ex.printStackTrace();    assertTrue(false);  }}  }
class C{  public Patterns simulateMsatPattern(){  Alignment align=simulate();  int[] pattern=new int[align.getTaxonCount()];  for (int i=0; i < pattern.length; i++) {    String taxonName=align.getSequence(i).getTaxon().getId();    int index=taxa.getTaxonIndex(taxonName);    pattern[index]=Integer.parseInt(align.getSequence(i).getSequenceString());  }  Patterns patterns=new Patterns(dataType,taxa);  patterns.addPattern(pattern);  for (int i=0; i < pattern.length; i++) {    System.out.print(pattern[i] + ",");  }  System.out.println();  return patterns;}  }
class C{  public static void commandLineCompile(String[] args) throws Exception {  commandLineCompile(args,true);}  }
class C{  private void cleanUpHistory(){  if (!mHistoryOfNumbers.isEmpty() && mHistoryOfNumbers.size() >= MAX_HISTORY_SIZE) {    for (int i=0; i < Math.max(1,MAX_HISTORY_SIZE / 2); i++) {      mPreviousNumbers.remove(mHistoryOfNumbers.removeFirst());    }  }}  }
class C{  public static void transferToInterpreterAndInvalidate(){  if (inInterpreter()) {    Truffle.getRuntime().notifyTransferToInterpreter();  }}  }
class C{  public Complex times(Complex that){  double real=this.re * that.re - this.im * that.im;  double imag=this.re * that.im + this.im * that.re;  return new Complex(real,imag);}  }
class C{  public HttpVersion(final int major,final int minor){  if (major < 0) {    throw new IllegalArgumentException("HTTP major version number may not be negative");  }  this.major=major;  if (minor < 0) {    throw new IllegalArgumentException("HTTP minor version number may not be negative");  }  this.minor=minor;}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  ConsoleEntry(String message){  this(ConsoleLogType.LOG,message,"");}  }
class C{  static Object[] toArray(Iterable<?> iterable){  return toCollection(iterable).toArray();}  }
class C{  @Override public Void visitTypeParameter(TypeParameterElement e,Void p){  checkAllCaps(e);  return null;}  }
class C{  public GridBoundedConcurrentLinkedHashSet(int max){  this(max,DFLT_INIT_CAP,DFLT_LOAD_FACTOR,DFLT_CONCUR_LVL);}  }
class C{  public int numArgs(){  return args.size();}  }
class C{  private TechnicalServiceNotAliveException convertThrowableTimeout(Subscription subscription,Throwable e){  TechnicalServiceNotAliveException ex=new TechnicalServiceNotAliveException(TechnicalServiceNotAliveException.Reason.TIMEOUT,new Object[]{subscription.getSubscriptionId()},e);  logger.logWarn(Log4jLogger.SYSTEM_LOG,ex,LogMessageIdentifier.WARN_TECH_SERVICE_NOT_ALIVE_TIMEOUT,subscription.getSubscriptionId());  return ex;}  }
class C{  public static final XSLTErrorResources loadResourceBundle(String className) throws MissingResourceException {  Locale locale=Locale.getDefault();  String suffix=getResourceSuffix(locale);  try {    return (XSLTErrorResources)ResourceBundle.getBundle(className + suffix,locale);  } catch (  MissingResourceException e) {    try {      return (XSLTErrorResources)ResourceBundle.getBundle(className,new Locale("en","US"));    } catch (    MissingResourceException e2) {      throw new MissingResourceException("Could not load any resource bundles.",className,"");    }  }}  }
class C{  public static TaskExecution completeExecution(TaskRepository taskRepository,TaskExecution expectedTaskExecution){  return taskRepository.completeTaskExecution(expectedTaskExecution.getExecutionId(),expectedTaskExecution.getExitCode(),expectedTaskExecution.getEndTime(),expectedTaskExecution.getExitMessage(),expectedTaskExecution.getErrorMessage());}  }
class C{  protected boolean haveSharedCellsRaw(DoubleMatrix3D other){  if (other instanceof SelectedSparseDoubleMatrix3D) {    SelectedSparseDoubleMatrix3D otherMatrix=(SelectedSparseDoubleMatrix3D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof SparseDoubleMatrix3D) {    SparseDoubleMatrix3D otherMatrix=(SparseDoubleMatrix3D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  private void checkUserGroupAccess(AppContext ctx,List<String> groups){  for (  String addedGroupId : groups) {    UserGroupDAO dao=(UserGroupDAO)DAOFactory.getDAOFactory().getDAO(UserGroup.class);    UserGroup userGroup=dao.readNotNull(ctx,new UserGroupPK(ctx.getCustomerId(),addedGroupId));    AccessRightsUtils.getInstance().checkRole(ctx,userGroup,Role.WRITE);  }}  }
class C{  public Matrix4(){  val[M00]=1f;  val[M11]=1f;  val[M22]=1f;  val[M33]=1f;}  }
class C{  public static String buildValidExtFilename(String name){  if (TextUtils.isEmpty(name) || ".".equals(name) || "..".equals(name)) {    return "(invalid)";  }  final StringBuilder res=new StringBuilder(name.length());  for (int i=0; i < name.length(); i++) {    final char c=name.charAt(i);    if (isValidExtFilenameChar(c)) {      res.append(c);    } else {      res.append('_');    }  }  trimFilename(res,255);  return res.toString();}  }
class C{  protected String jdbcSchemaLookupName(Schema schema){  return null;}  }
class C{  public static void println(){  out.println();}  }
class C{  public static CRC check(BitSet msg,MessageDirection direction){  CRC crc=CRC.UNKNOWN;  int calculated=getCalculatedChecksum(msg);  int transmitted=getTransmittedChecksum(msg);  if (direction == MessageDirection.OSW) {    if (calculated == transmitted) {      return CRC.PASSED;    }  } else {    if ((calculated ^ 127) == transmitted) {      return CRC.PASSED_INV;    } else     if (calculated == transmitted) {      return CRC.PASSED;    }  }  return CRC.FAILED_CRC;}  }
class C{  static void addTimestampSelectFormat(StringBuilder sb){  OracleDatabaseImpl.addTimestampFormat(sb,false);}  }
class C{  public SolrInputDocument merge(final SolrInputDocument fromDoc,SolrInputDocument toDoc){  for (  SolrInputField sif : fromDoc.values()) {    Object val=sif.getValue();    if (val instanceof Map) {      for (      Entry<String,Object> entry : ((Map<String,Object>)val).entrySet()) {        String key=entry.getKey();        Object fieldVal=entry.getValue();        boolean updateField=false;switch (key) {case "add":          updateField=true;        doAdd(toDoc,sif,fieldVal);      break;case "set":    updateField=true;  doSet(toDoc,sif,fieldVal);break;case "remove":updateField=true;doRemove(toDoc,sif,fieldVal);break;case "removeregex":updateField=true;doRemoveRegex(toDoc,sif,fieldVal);break;case "inc":updateField=true;doInc(toDoc,sif,fieldVal);break;default :log.warn("Unknown operation for the an atomic update, operation ignored: " + key);break;}if (updateField && idField.getName().equals(sif.getName())) {throw new SolrException(ErrorCode.BAD_REQUEST,"Invalid update of id field: " + sif);}}} else {toDoc.put(sif.getName(),sif);}}return toDoc;}  }
class C{  @SuppressWarnings("unchecked") public G readGraph() throws GraphIOException {  try {    init();    while (xmlEventReader.hasNext()) {      XMLEvent event=xmlEventReader.nextEvent();      if (event.isStartElement()) {        StartElement element=(StartElement)event;        String name=element.getName().getLocalPart();        if (GraphMLConstants.KEY_NAME.equals(name)) {          Key key=(Key)parserRegistry.getParser(name).parse(xmlEventReader,element);          document.getKeyMap().addKey(key);        } else         if (GraphMLConstants.GRAPH_NAME.equals(name)) {          GraphMetadata graph=(GraphMetadata)parserRegistry.getParser(name).parse(xmlEventReader,element);          document.getGraphMetadata().add(graph);          return (G)graph.getGraph();        } else         if (GraphMLConstants.GRAPHML_NAME.equals(name)) {        } else {          parserRegistry.getUnknownElementParser().parse(xmlEventReader,element);        }      } else       if (event.isEndDocument()) {        break;      }    }  } catch (  Exception e) {    ExceptionConverter.convert(e);  }  throw new GraphIOException("Unable to read Graph from document - the document could be empty");}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static boolean encodeToFile(byte[] dataToEncode,String filename){  boolean success=false;  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);    success=true;  } catch (  java.io.IOException e) {    success=false;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }  return success;}  }
class C{  @Ignore @Test public void testReplaceRecursive(){  values.put("animal","${critter}");  values.put("target","${pet}");  values.put("pet","${petCharacteristic} dog");  values.put("petCharacteristic","lazy");  values.put("critter","${critterSpeed} ${critterColor} ${critterType}");  values.put("critterSpeed","quick");  values.put("critterColor","brown");  values.put("critterType","fox");  doTestReplace("The quick brown fox jumps over the lazy dog.","The ${animal} jumps over the ${target}.",true);  values.put("pet","${petCharacteristicUnknown:-lazy} dog");  doTestReplace("The quick brown fox jumps over the lazy dog.","The ${animal} jumps over the ${target}.",true);}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public static void statusModules(){  final Status status=Status.self();  if (Cfg.DEBUG) {    Check.log(" Status Agents Begins");  }  HashMap<String,ConfModule> agents=status.getModulesMap();  final Iterator<String> it=agents.keySet().iterator();  while (it.hasNext()) {    final String key=it.next();    if (Cfg.DEBUG) {      Check.asserts(key != null,"null type");    }    final ConfModule a=agents.get(key);    if (Cfg.DEBUG) {      Check.log(" Agent " + a.getType() + " "+ a);    }  }  if (Cfg.DEBUG) {    Check.log("Status Agents Ends");  }}  }
class C{  public void testDirect() throws Exception {  assertEquals(SweetSpotSimilarity.class,getSimilarity("sim1text").getClass());}  }
class C{  private void addMethods(Document doc,Eml eml) throws DocumentException {  if (exists(eml.getMethodSteps()) && !eml.getMethodSteps().isEmpty() || exists(eml.getStudyExtent()) || exists(eml.getStudyExtent()) || exists(eml.getStudyExtent())) {    Paragraph p=new Paragraph();    p.setAlignment(Element.ALIGN_JUSTIFIED);    p.setFont(font);    p.add(new Phrase(getText("rtf.methods"),fontTitle));    p.add(Chunk.NEWLINE);    p.add(Chunk.NEWLINE);    if (eml.getMethodSteps().size() == 1) {      p.add(new Phrase(getText("rtf.methods.description") + ": ",fontTitle));      p.add(eml.getMethodSteps().get(0).replace("\r\n","\n"));      p.add(Chunk.NEWLINE);    } else     if (eml.getMethodSteps().size() > 1) {      p.add(new Phrase(getText("rtf.methods.description") + ": ",fontTitle));      p.add(Chunk.NEWLINE);      List list=new List(List.UNORDERED,0);      list.setIndentationLeft(20);      for (      String method : eml.getMethodSteps()) {        list.add(new ListItem(method.replace("\r\n","\n"),font));      }      p.add(list);    }    if (exists(eml.getStudyExtent())) {      p.add(new Phrase(getText("rtf.methods.studyExtent") + ": ",fontTitle));      p.add(eml.getStudyExtent().replace("\r\n","\n"));      p.add(Chunk.NEWLINE);    }    if (exists(eml.getStudyExtent())) {      p.add(new Phrase(getText("rtf.methods.sampling") + ": ",fontTitle));      p.add(eml.getSampleDescription().replace("\r\n","\n"));      p.add(Chunk.NEWLINE);    }    if (exists(eml.getQualityControl())) {      p.add(new Phrase(getText("rtf.methods.quality") + ": ",fontTitle));      p.add(eml.getQualityControl().replace("\r\n","\n"));      p.add(Chunk.NEWLINE);    }    doc.add(p);    p.clear();  }}  }
class C{  public CircuitBreaker withFailureThreshold(int failureThreshold){  Assert.isTrue(failureThreshold >= 1,"failureThreshold must be greater than or equal to 1");  return withFailureThreshold(failureThreshold,failureThreshold);}  }
class C{  public static boolean isMilk(FluidStack aFluid){  if (aFluid == null)   return false;  return aFluid.isFluidEqual(getMilk(1));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TINTERFACE__SUPER_INTERFACE_REFS:    return ((InternalEList<?>)getSuperInterfaceRefs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static String objectAsString(IObject stringObject,int limit) throws SnapshotException {  Integer count=(Integer)stringObject.resolveValue("count");  if (count == null)   return null;  if (count.intValue() == 0)   return "";  IPrimitiveArray charArray=(IPrimitiveArray)stringObject.resolveValue("value");  if (charArray == null)   return null;  Integer offset=(Integer)stringObject.resolveValue("offset");  if (offset == null)   return null;  return arrayAsString(charArray,offset,count,limit);}  }
class C{  public String taskName(){  return taskName;}  }
class C{  @Override public Validator exportMaskDelete(ExportMaskValidationContext ctx){  logger=new ValidatorLogger(log,ctx.getExportMask().forDisplay(),ctx.getStorage().forDisplay());  XtremIOExportMaskInitiatorsValidator validator=new XtremIOExportMaskInitiatorsValidator(ctx.getStorage(),ctx.getExportMask());  validator.setExceptionContext(ctx);  configureValidators(logger,validator);  return validator;}  }
class C{  private static void skipArray(ByteBuffer buf){  int length=buf.getShort() & 0xFFFF;  for (int i=0; i < length; i++)   skipMemberValue(buf);}  }
class C{  public void testContentHandler() throws Exception {  StringWriter out=new StringWriter();  OutputFormat format=OutputFormat.createPrettyPrint();  format.setEncoding("iso-8859-1");  XMLWriter writer=new XMLWriter(out,format);  generateXML(writer);  writer.close();  String text=out.toString();  if (VERBOSE) {    log("Created XML");    log(text);  }  Document doc=DocumentHelper.parseText(text);  String value=doc.valueOf("/processes[@name='arvojoo']");  assertEquals("Document contains the correct text","jeejee",value);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_TYPE_ACCESS_MODIFIER:    setDeclaredTypeAccessModifier((TypeAccessModifier)newValue);  return;case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_PROVIDED_BY_RUNTIME:setDeclaredProvidedByRuntime((Boolean)newValue);return;case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_ELEMENT_TYPE:setDeclaredElementType((TypeRef)newValue);return;case TypesPackage.TOBJECT_PROTOTYPE__SUPER_TYPE:setSuperType((ParameterizedTypeRef)newValue);return;case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_FINAL:setDeclaredFinal((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void showFab(FloatingActionButton fab){  fab.show();  fab.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.741 -0500",hash_original_method="340959DA3DE1E05DD508233637BBAF32",hash_generated_method="F686537538DE650CD91EB1BBEB370D7F") public Class reload(Class aClass) throws ClassNotFoundException {  return aClass;}  }
class C{  private static Vector ExplodeCallReturn(AST.CallReturn ast,String next) throws PcalTranslateException {  Vector result=new Vector();  if (ast.from == null) {    throw new PcalTranslateException("`return' statement following `call' at " + ast.location() + " not in a procedure");  }  ;  int from=st.FindProc(ast.from);  PcalSymTab.ProcedureEntry peFrom=(PcalSymTab.ProcedureEntry)st.procs.elementAt(from);  int to=st.FindProc(ast.to);  if (to == st.procs.size()) {    throw new PcalTranslateException("Call of non-existent procedure " + ast.to,ast);  }  ;  PcalSymTab.ProcedureEntry peTo=(PcalSymTab.ProcedureEntry)st.procs.elementAt(to);  PcalDebug.Assert(from < st.procs.size());  AST.Assign ass=new AST.Assign();  ass.ass=new Vector();  ass.line=ast.line;  ass.col=ast.col;  AST.SingleAssign sass=null;  TLAExpr expr=null;  if (!ast.from.equals(ast.to)) {    for (int i=0; i < peFrom.decls.size(); i++) {      AST.PVarDecl decl=(AST.PVarDecl)peFrom.decls.elementAt(i);      sass=new AST.SingleAssign();      sass.line=ast.line;      sass.col=ast.col;      expr=new TLAExpr();      sass.lhs.var=decl.var;      sass.lhs.sub=new TLAExpr();      expr.addLine();      expr.addToken(IdentToken("Head"));      expr.addToken(BuiltInToken("("));      expr.addToken(AddedToken("stack"));      expr.addToken(BuiltInToken(")"));      expr.addToken(BuiltInToken("."));      expr.addToken(IdentToken(decl.var));      expr.normalize();      sass.rhs=expr;      ass.ass.addElement(sass);    }    sass=new AST.SingleAssign();    sass.line=ast.line;    sass.col=ast.col;    sass.lhs.var="stack";    sass.lhs.sub=MakeExpr(new Vector());    expr=new TLAExpr();    expr.addLine();    expr.addToken(BuiltInToken("<<"));    expr.addToken(BuiltInToken("["));    expr.addToken(IdentToken("procedure"));    expr.addToken(BuiltInToken("|->"));    expr.addToken(StringToken(ast.to));    expr.addToken(BuiltInToken(","));    expr.addLine();    expr.addToken(IdentToken("pc"));    expr.addToken(BuiltInToken("|->"));    expr.addToken(IdentToken("Head"));    expr.addToken(BuiltInToken("("));    expr.addToken(AddedToken("stack"));    expr.addToken(BuiltInToken(")"));    expr.addToken(BuiltInToken("."));    expr.addToken(IdentToken("pc"));    for (int i=0; i < peTo.decls.size(); i++) {      AST.PVarDecl decl=(AST.PVarDecl)peTo.decls.elementAt(i);      expr.addToken(BuiltInToken(","));      expr.addLine();      expr.addToken(IdentToken(decl.var));      expr.addToken(BuiltInToken("|->"));      expr.addToken(IdentToken(decl.var));    }    for (int i=0; i < peTo.params.size(); i++) {      AST.PVarDecl decl=(AST.PVarDecl)peTo.params.elementAt(i);      expr.addToken(BuiltInToken(","));      expr.addLine();      expr.addToken(IdentToken(decl.var));      expr.addToken(BuiltInToken("|->"));      expr.addToken(IdentToken(decl.var));    }    expr.addToken(BuiltInToken("]"));    expr.addToken(BuiltInToken(">>"));    expr.addLine();    expr.addToken(BuiltInToken("\\o"));    expr.addToken(IdentToken("Tail"));    expr.addToken(BuiltInToken("("));    expr.addToken(AddedToken("stack"));    expr.addToken(BuiltInToken(")"));    MakeNewStackTopExprPretty(expr);    expr.normalize();    sass.rhs=expr;    ass.ass.addElement(sass);  }  if (peTo.params.size() != ast.args.size())   throw new PcalTranslateException("Procedure " + ast.to + " called with wrong number of arguments",ast);  PCalLocation beginLoc=null;  PCalLocation endLoc=null;  for (int i=0; i < peTo.params.size(); i++) {    AST.PVarDecl decl=(AST.PVarDecl)peTo.params.elementAt(i);    if (i == 0) {      beginLoc=decl.getOrigin().getBegin();    }    if (i == peTo.params.size() - 1) {      endLoc=decl.getOrigin().getEnd();    }    sass=new AST.SingleAssign();    sass.line=ast.line;    sass.col=ast.col;    sass.lhs.var=decl.var;    sass.lhs.sub=MakeExpr(new Vector());    sass.rhs=(TLAExpr)ast.args.elementAt(i);    ass.ass.addElement(sass);  }  if (beginLoc != null) {    ass.setOrigin(new Region(beginLoc,endLoc));  }  result.addElement(ass);  for (int i=0; i < peTo.decls.size(); i++) {    ass=new AST.Assign();    ass.line=ast.line;    ass.col=ast.col;    ass.ass=new Vector();    AST.PVarDecl decl=(AST.PVarDecl)peTo.decls.elementAt(i);    sass=new AST.SingleAssign();    sass.line=ast.line;    sass.col=ast.col;    sass.setOrigin(decl.getOrigin());    sass.lhs.var=decl.var;    sass.lhs.sub=MakeExpr(new Vector());    sass.rhs=(TLAExpr)decl.val;    ass.setOrigin(decl.getOrigin());    ass.ass.addElement(sass);    result.addElement(ass);  }  result.addElement(UpdatePC(peTo.iPC));  return result;}  }
class C{  public static IStatus validateIdentifier(String id,String sourceLevel,String complianceLevel){  if (scannedIdentifier(id,sourceLevel,complianceLevel) != null) {    return JavaModelStatus.VERIFIED_OK;  } else {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.bind(Messages.convention_illegalIdentifier,id),null);  }}  }
class C{  TimeChart(){}  }
class C{  public String toString(){  return "created on " + dateCreated + "\ncolor: "+ color+ " and filled: "+ filled;}  }
class C{  public @Test final void testCreation(){  User user1=new User(TEST_USER1);  assertThat(TEST_USER1).isEqualTo(user1.getUsername());  assertThat(user1.getPk()).isNull();  assertThat(user1.isNew()).isTrue();}  }
class C{  public frame addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static void appendStyleColor(HtmlBasedComponent component,Color color){  String colorString=createHexColorString(color);  String colorStyleString=STYLE_COLOR + colorString;  appendStyle(component,colorStyleString);  return;}  }
class C{  public void handleButtonPressRelease(XEvent xev){  XButtonEvent xbe=xev.get_xbutton();  if (xbe.get_button() > SunToolkit.MAX_BUTTONS_SUPPORTED) {    return;  }  int buttonState=0;  buttonState=xbe.get_state() & XConstants.ALL_BUTTONS_MASK;switch (xev.get_type()) {case XConstants.ButtonPress:    if (buttonState == 0) {      XWindowPeer parent=getToplevelXWindow();      if (parent != null && parent.isFocusableWindow()) {        parent.setActualFocusedWindow(null);        parent.requestWindowFocus(xbe.get_time(),true);      }      XAwtState.setAutoGrabWindow(this);    }  break;case XConstants.ButtonRelease:if (isFullRelease(buttonState,xbe.get_button())) {  XAwtState.setAutoGrabWindow(null);}break;}}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.216 -0500",hash_original_method="CB7AF973B7AC5B91CFB8AF007E1C0D32",hash_generated_method="035167774DD7F630D943C0A2DDCA9658") private void nativeAddData(byte[] data,int length){  addTaint(data[0]);  addTaint(length);}  }
class C{  public final boolean unload(Entity unit){  Entity trooper=game.getEntity(troopers);  if ((trooper == null) || !trooper.equals(unit)) {    return false;  }  troopers=Entity.NONE;  return true;}  }
class C{  public ExpressionNode exprGetParent(){  return getParentElem();}  }
class C{  protected void createInfoLabel(Composite parent,String text){  Label label=new Label(parent,SWT.NONE);  label.setToolTipText(text);  label.setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_INFORMATION));}  }
class C{  public static void scale(Bitmap src,Bitmap dest,int clearColor,int x,int y,int sw,int sh,int dx,int dy,int dw,int dh){  clearBitmap(dest,clearColor);  Canvas canvas=new Canvas(dest);  Paint paint=WorkCache.PAINT.get();  paint.setFilterBitmap(true);  canvas.drawBitmap(src,new Rect(x + 1,y + 1,sw - 1,sh - 1),new Rect(dx,dy,dw,dh),paint);  canvas.setBitmap(null);}  }
class C{  @NotNull default B append(float f) throws BufferOverflowException {  BytesInternal.append((StreamingDataOutput)this,f);  return (B)this;}  }
class C{  public PropertyImpl changePropertyDetail(final PropertyImpl modProperty,final PropertyDetail propDetail,final Integer numOfFloors){  LOGGER.debug("Entered into changePropertyDetail, Property is Vacant Land");  final PropertyDetail propertyDetail=modProperty.getPropertyDetail();  propDetail.setSitalArea(propertyDetail.getSitalArea());  propDetail.setTotalBuiltupArea(propertyDetail.getTotalBuiltupArea());  propDetail.setCommBuiltUpArea(propertyDetail.getCommBuiltUpArea());  propDetail.setPlinthArea(propertyDetail.getPlinthArea());  propDetail.setCommVacantLand(propertyDetail.getCommVacantLand());  propDetail.setCurrentCapitalValue(propertyDetail.getCurrentCapitalValue());  propDetail.setSurveyNumber(propertyDetail.getSurveyNumber());  propDetail.setFieldVerified(propertyDetail.getFieldVerified());  propDetail.setFieldVerificationDate(propertyDetail.getFieldVerificationDate());  propDetail.setFloorDetails(propertyDetail.getFloorDetails());  propDetail.setPropertyDetailsID(propertyDetail.getPropertyDetailsID());  propDetail.setWater_Meter_Num(propertyDetail.getWater_Meter_Num());  propDetail.setElec_Meter_Num(propertyDetail.getElec_Meter_Num());  propDetail.setNoofFloors(numOfFloors);  propDetail.setFieldIrregular(propertyDetail.getFieldIrregular());  propDetail.setDateOfCompletion(propertyDetail.getDateOfCompletion());  propDetail.setProperty(propertyDetail.getProperty());  propDetail.setUpdatedTime(propertyDetail.getUpdatedTime());  propDetail.setPropertyTypeMaster(propertyDetail.getPropertyTypeMaster());  propDetail.setPropertyType(propertyDetail.getPropertyType());  propDetail.setInstallment(propertyDetail.getInstallment());  propDetail.setPropertyOccupation(propertyDetail.getPropertyOccupation());  propDetail.setPropertyMutationMaster(propertyDetail.getPropertyMutationMaster());  propDetail.setComZone(propertyDetail.getComZone());  propDetail.setCornerPlot(propertyDetail.getCornerPlot());  if (numOfFloors == 0)   propDetail.setPropertyUsage(propertyDetail.getPropertyUsage()); else   propDetail.setPropertyUsage(null);  propDetail.setManualAlv(propertyDetail.getManualAlv());  propDetail.setOccupierName(propertyDetail.getOccupierName());  modProperty.setPropertyDetail(propDetail);  LOGGER.debug("Exiting from changePropertyDetail");  return modProperty;}  }
class C{  void errorForDOM3(String msg,Object[] args) throws TransformerException {  String fmsg=XSLMessages.createXPATHMessage(msg,args);  ErrorListener ehandler=this.getErrorListener();  TransformerException te=new XPathStylesheetDOM3Exception(fmsg,m_sourceLocator);  if (null != ehandler) {    ehandler.fatalError(te);  } else {    throw te;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  default <U,R>Zippable<R> zip(final Seq<? extends U> other,final BiFunction<? super T,? super U,? extends R> zipper){  return zip((Iterable<? extends U>)other,zipper);}  }
class C{  private void restoreDatabase(){  SharedPreferences prefs=getPreferences(MODE_PRIVATE);  boolean initialized=prefs.getBoolean(DB_INITIALIZED,false);  if (!initialized) {    mBillingService.restoreTransactions();    Toast.makeText(this,R.string.restoring_transactions,Toast.LENGTH_LONG).show();  }}  }
class C{  public SVGFontFaceElementBridge(){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.CONFIGURATION_SOURCE__PROPERTY:    setProperty((Property)null);  return;}super.eUnset(featureID);}  }
class C{  public Task createVm(String projectId,VmCreateSpec vmCreateSpec) throws IOException {  String path=String.format("%s/%s/vms",getBasePath(),projectId);  HttpResponse response=this.restClient.perform(RestClient.Method.POST,path,serializeObjectAsJson(vmCreateSpec));  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  public void info(Throwable throwable,String msg,Object[] argArray){  innerLog(Level.INFO,throwable,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,argArray);}  }
class C{  public void showDialog(){  view.showDialog();}  }
class C{  @Override public boolean mutate(TestCase test,TestFactory factory){  if (Randomness.nextDouble() >= Properties.P_CHANGE_PARAMETER)   return false;  Constraints constraint=method.getMethod().getAnnotation(Constraints.class);  if (constraint != null && constraint.notMutable()) {    return false;  }  List<VariableReference> parameters=getParameterReferences();  boolean changed=false;  int max=parameters.size();  if (!isStatic()) {    max++;  }  if (max == 0)   return false;  double pParam=1.0 / max;  if (!isStatic() && Randomness.nextDouble() < pParam) {    VariableReference callee=getCallee();    List<VariableReference> objects=test.getObjects(callee.getType(),getPosition());    objects.remove(callee);    objects=objects.stream().filter(null).collect(Collectors.toList());    if (!objects.isEmpty()) {      VariableReference replacement=Randomness.choice(objects);      setCallee(replacement);      changed=true;    }  }  for (int numParameter=0; numParameter < parameters.size(); numParameter++) {    if (Randomness.nextDouble() < pParam) {      if (mutateParameter(test,numParameter))       changed=true;    }  }  return changed;}  }
class C{  public Property dayOfMonth(){  return new Property(this,getChronology().dayOfMonth());}  }
class C{  public static int secureRandomInt(int lowerThan){  SecureRandom sr=getSecureRandom();synchronized (sr) {    return sr.nextInt(lowerThan);  }}  }
class C{  @Override int lookForSelectablePosition(int position,boolean lookDown){  final ListAdapter adapter=mAdapter;  if (adapter == null || isInTouchMode()) {    return INVALID_POSITION;  }  final int count=adapter.getCount();  if (!mAreAllItemsSelectable) {    if (lookDown) {      position=Math.max(0,position);      while (position < count && !adapter.isEnabled(position)) {        position++;      }    } else {      position=Math.min(position,count - 1);      while (position >= 0 && !adapter.isEnabled(position)) {        position--;      }    }    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  } else {    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  }}  }
class C{  public TestConfigurationBuilder(){  diagnosticFiles=new ArrayList<>();  testSourceFiles=new ArrayList<>();  processors=new LinkedHashSet<>();  options=new SimpleOptionMap();  shouldEmitDebugInfo=false;}  }
class C{  public LayersPanel(LayerHandler lHandler,boolean addLayerControls){  this(lHandler);  if (addLayerControls) {    addLayerControls();  }}  }
class C{  @Override public Void scan(Tree tree,Void ignore){  if (tree == null)   return null;  found.add(tree);  return super.scan(tree,ignore);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  @Override public OutStore openWrite(long address,int size){  if (_isClosed.get()) {    throw new IllegalStateException(L.l("{0} is closed.",this));  }  if (size <= 0) {    throw new IllegalArgumentException(L.l("Invalid size: {0}",size));  }  try {    streamOpen(address,size);    return openWriteImpl(address,size);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static boolean asBoolean(boolean[] array){  return array.length > 0;}  }
class C{  public synchronized void enable(){  enabled=true;}  }
class C{  public boolean isAcceptable(List<GeneralName> names){  if (permitted_names == null) {    prepareNames();  }  boolean[] types_presented=new boolean[9];  boolean[] permitted_found=new boolean[9];  for (  GeneralName name : names) {    int type=name.getTag();    if (excluded_names[type] != null) {      for (int i=0; i < excluded_names[type].size(); i++) {        if (excluded_names[type].get(i).isAcceptable(name)) {          return false;        }      }    }    if ((permitted_names[type] != null) && (!permitted_found[type])) {      types_presented[type]=true;      for (int i=0; i < permitted_names[type].size(); i++) {        if (permitted_names[type].get(i).isAcceptable(name)) {          permitted_found[type]=true;        }      }    }  }  for (int type=0; type < 9; type++) {    if (types_presented[type] && !permitted_found[type]) {      return false;    }  }  return true;}  }
class C{  public static Vec3 fromEcef(double xEcef,double yEcef,double zEcef){  return new Vec3(yEcef,zEcef,xEcef);}  }
class C{  public RegExp(String s) throws IllegalArgumentException {  this(s,ALL);}  }
class C{  public JBBPOut Align(final int value) throws IOException {  assertNotEnded();  if (this.processCommands) {    this.outStream.align(value);  }  return this;}  }
class C{  @SuppressWarnings("unchecked") public final void testValidateWhenNotAllValidatorsSucceed(){  Validator<Object> validator1=new AbstractValidatorImplementation("foo",true);  Validator<Object> validator2=new AbstractValidatorImplementation("bar",false);  Validator<Object>[] validators=new Validator[2];  validators[0]=validator1;  validators[1]=validator2;  ConjunctiveValidator<Object> conjunctiveValidator=new ConjunctiveValidator<>("foo",validators);  assertFalse(conjunctiveValidator.validate(new Object()));}  }
class C{  public void addLineNumber(int lineNumber){  positionToLineNumberMap.put(length++,lineNumber);}  }
class C{  public GuacamoleInvalidCredentialsException(String message,CredentialsInfo credentialsInfo){  super(message,credentialsInfo);}  }
class C{  public <K extends GenericPK>List<T> find(AppContext app,K objectId,List<DataStoreQueryField> queryFields,Cache<K,List<PK>> cache){  return find(app,objectId,queryFields,null,cache);}  }
class C{  public ShowHelpAction(final String url){  super("Help");  this.theURL=url;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Help.png"));  putValue(SHORT_DESCRIPTION,"Show help via local web page");}  }
class C{  public NotificationChain basicSetExportedElement(ExportableElement newExportedElement,NotificationChain msgs){  ExportableElement oldExportedElement=exportedElement;  exportedElement=newExportedElement;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.EXPORT_DECLARATION__EXPORTED_ELEMENT,oldExportedElement,newExportedElement);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public int findInContent(String content){  int n=content.length();  int m=pattern.length();  int skip;  char val;  for (int i=0; i <= n - m; i=i + skip) {    skip=0;    for (int j=m - 1; j >= 0; j--) {      if (pattern.charAt(j) != content.charAt(i + j)) {        val=content.charAt(i + j);        skip=(occurrence.get(val) != null) ? Math.max(1,j - occurrence.get(val)) : j + 1;        break;      }    }    if (skip == 0) {      return i;    }  }  return -1;}  }
class C{  public static void printFields(Class cl){  Field[] fields=cl.getDeclaredFields();  for (  Field f : fields) {    Class type=f.getType();    String name=f.getName();    System.out.print("   ");    String modifiers=Modifier.toString(f.getModifiers());    if (modifiers.length() > 0)     System.out.print(modifiers + " ");    System.out.println(type.getName() + " " + name+ ";");  }}  }
class C{  protected static Statement newStatement(ReviewDb db) throws SQLException {  return ((JdbcSchema)db).getConnection().createStatement();}  }
class C{  private void validateVaribles(String expression) throws CoreException {  IStringVariableManager manager=VariablesPlugin.getDefault().getStringVariableManager();  manager.validateStringVariables(expression);}  }
class C{  public static char combine2bytesToU16(byte high,byte low){  char highU8=convertByte2Uint8(high);  char lowU8=convertByte2Uint8(low);  return (char)(highU8 << 8 | lowU8);}  }
class C{  public SimpleStringProperty descriptionProperty(){  return this.descriptionProperty;}  }
class C{  protected void applyRotation(DrawContext dc){  KMLLatLonBox box=this.parent.getLatLonBox();  if (box != null) {    Double rotation=box.getRotation();    if (rotation != null) {      List<LatLon> corners=KMLUtil.rotateSector(dc.getGlobe(),this.getSector(),Angle.fromDegrees(rotation));      this.setCorners(corners);    }  }}  }
class C{  int readUnsignedLeb128() throws IOException {  int result=0;  byte val;  do {    val=readByte();    result=(result << 7) | (val & 0x7f);  } while (val < 0);  return result;}  }
class C{  public void startAfterLoginActivity(Context context){  startAfterLoginActivity(context,null);}  }
class C{  @Nullable public CloseableReference<CloseableImage> cache(int frameIndex,CloseableReference<CloseableImage> imageRef){  return mBackingCache.cache(keyFor(frameIndex),imageRef,mEntryStateObserver);}  }
class C{  public static String replaceSmartQuotes(String str){  str=replaceChars(str,"\u0091\u0092\u2018\u2019",'\'');  str=replaceChars(str,"\u0093\u0094\u201c\u201d",'"');  return str;}  }
class C{  public boolean nextTo(final Entity entity,final double step){  final Rectangle2D thisArea=new Rectangle2D.Double(x - step,y - step,area.getWidth() + 2 * step,area.getHeight() + 2 * step);  return thisArea.intersects(entity.getArea());}  }
class C{  public UTXOsMessage(NetworkParameters params,List<TransactionOutput> outputs,long[] heights,Sha256Hash chainHead,long height){  super(params);  hits=new byte[(int)Math.ceil(outputs.size() / 8.0)];  for (int i=0; i < outputs.size(); i++) {    if (outputs.get(i) != null)     Utils.setBitLE(hits,i);  }  this.outputs=new ArrayList<TransactionOutput>(outputs.size());  for (  TransactionOutput output : outputs) {    if (output != null)     this.outputs.add(output);  }  this.chainHead=chainHead;  this.height=height;  this.heights=Arrays.copyOf(heights,heights.length);}  }
class C{  public boolean requireSecureKeyguard(){  int encryptionStatus=getStorageEncryptionStatus();  if (getPasswordQuality(null) > PASSWORD_QUALITY_UNSPECIFIED || !KeyStore.getInstance().isEmpty() || encryptionStatus == DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE || encryptionStatus == DevicePolicyManager.ENCRYPTION_STATUS_ACTIVATING) {    return true;  }  return false;}  }
class C{  public void reset(){  cachedViews.clear();}  }
class C{  public static ExtensionObject xmlEncode(Structure encodeable,IEncodeableSerializer serializer) throws EncodingException {  throw new EncodingException(StatusCodes.Bad_DataEncodingUnsupported);}  }
class C{  public static boolean deleteFusionTables(Context context,String accountName,String tableName){  try {    GoogleAccountCredential googleAccountCredential=SendToGoogleUtils.getGoogleAccountCredential(context,accountName,SendToGoogleUtils.FUSION_TABLES_SCOPE);    if (googleAccountCredential == null) {      return false;    }    Fusiontables fusiontables=new Fusiontables.Builder(AndroidHttp.newCompatibleTransport(),new GsonFactory(),googleAccountCredential).build();    List<Table> tables=fusiontables.table().list().execute().getItems();    Iterator<Table> iterator=tables.iterator();    while (iterator.hasNext()) {      Table table=(Table)iterator.next();      String name=table.getName();      if (name != null && name.equals(tableName)) {        fusiontables.table().delete(table.getTableId()).execute();        return true;      }    }  } catch (  Exception e) {    Log.e(TAG,"Unable to search fusion tables.",e);  }  return false;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  private static void quickSort(double[] keys,int[] vals,final int start,final int end){  final int len=end - start;  if (len < INSERTION_THRESHOLD) {    insertionSort(keys,vals,start,end);    return;  }  final int last=end - 1;  final int seventh=(len >> 3) + (len >> 6) + 1;  final int m3=(start + end) >> 1;  final int m2=m3 - seventh;  final int m1=m2 - seventh;  final int m4=m3 + seventh;  final int m5=m4 + seventh;  sort5(keys,vals,m1,m2,m3,m4,m5);  double pivotkey=keys[m3];  int pivotval=vals[m3];  keys[m3]=keys[start];  vals[m3]=vals[start];  int left=start + 1;  int right=last;  while (true) {    while (left <= right && keys[left] < pivotkey) {      left++;    }    while (left <= right && pivotkey <= keys[right]) {      right--;    }    if (right <= left) {      break;    }    swap(keys,vals,left,right);    left++;    right--;  }  keys[start]=keys[right];  vals[start]=vals[right];  keys[right]=pivotkey;  vals[right]=pivotval;  if (start + 1 < right) {    quickSort(keys,vals,start,right);  }  int rstart=right + 1;  while (rstart < last && keys[rstart] <= keys[right]) {    rstart++;  }  if (rstart < last) {    quickSort(keys,vals,rstart,end);  }}  }
class C{  public final void finishFragmentByStep(int step){  android.support.v4.app.FragmentActivity activity=getActivity();  if (activity == null) {    throw new IllegalStateException("Fragment " + this + " not attached to Activity");  }  List<android.support.v4.app.Fragment> list=getFragmentManager().getFragments();  if (list == null || list.size() < step) {    throw new IllegalStateException("There is not enough Fragment to finish.");  }  for (int i=0; i < step; i++) {    activity.onBackPressed();  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  @Override @Unpreemptible("Deliver exception possibly from unpreemptible code") public void deliverException(CompiledMethod compiledMethod,Address catchBlockInstructionAddress,Throwable exceptionObject,AbstractRegisters registers){  OptCompiledMethod optMethod=(OptCompiledMethod)compiledMethod;  Address fp=registers.getInnermostFramePointer();  RVMThread myThread=RVMThread.getCurrentThread();  if (TRACE) {    VM.sysWrite("Frame size of ");    VM.sysWrite(optMethod.getMethod());    VM.sysWrite(" is ");    VM.sysWrite(optMethod.getFrameFixedSize());    VM.sysWrite("\n");  }  Address sp=fp.minus(optMethod.getFrameFixedSize());  registers.getGPRs().set(STACK_POINTER.value(),sp.toWord());  int offset=optMethod.getUnsignedExceptionOffset();  if (offset != 0) {    Magic.setObjectAtOffset(Magic.addressAsObject(fp),Offset.fromIntSignExtend(-offset),exceptionObject);    if (TRACE) {      VM.sysWrite("Storing exception object ");      VM.sysWrite(Magic.objectAsAddress(exceptionObject));      VM.sysWrite(" at offset ");      VM.sysWrite(offset);      VM.sysWrite(" from framepoint ");      VM.sysWrite(fp);      VM.sysWrite("\n");    }  }  if (TRACE) {    VM.sysWrite("Registers before delivering exception in ");    VM.sysWrite(optMethod.getMethod());    VM.sysWrite("\n");    for (    GPR reg : GPR.values()) {      VM.sysWrite(reg.toString());      VM.sysWrite(" = ");      VM.sysWrite(registers.getGPRs().get(reg.value()));      VM.sysWrite("\n");    }  }  registers.setIP(catchBlockInstructionAddress);  if (TRACE) {    VM.sysWrite("Set ip to ");    VM.sysWrite(registers.getIP());    VM.sysWrite("\n");  }  VM.enableGC();  if (VM.VerifyAssertions)   VM._assert(registers.getInUse());  registers.setInUse(false);  myThread.stackLimit=Magic.objectAsAddress(myThread.getStack()).plus(STACK_SIZE_GUARD);  Magic.restoreHardwareExceptionState(registers);  if (VM.VerifyAssertions)   VM._assert(NOT_REACHED);}  }
class C{  static boolean generateAttributeSetter(final Tree.AnyAttribute that,final Value d,final GenerateJsVisitor gen){  if (!d.isToplevel()) {    return false;  }  final String varName=gen.getNames().name(d);  String paramVarName=gen.getNames().createTempVariable();  gen.out(GenerateJsVisitor.function,gen.getNames().setter(d),"(",paramVarName,"){");  gen.generateImmutableAttributeReassignmentCheck(d,varName,gen.getNames().name(d));  if (d.isLate()) {    gen.generateImmutableAttributeReassignmentCheck(d,varName,d.getName());  } else {    gen.out("if(",varName,"===undefined||",varName,"===",gen.getClAlias(),"INIT$)$valinit$",varName,"();");  }  gen.out("return ",varName,"=",paramVarName,";}");  gen.endLine(true);  gen.shareSetter(d);  return true;}  }
class C{  private void initializeItems(Object kid){  if (kid instanceof UISelectItem) {    UISelectItem ui=(UISelectItem)kid;    SelectItem item=(SelectItem)ui.getValue();    if (item == null) {      item=new SelectItem(ui.getItemValue(),ui.getItemLabel(),ui.getItemDescription(),ui.isItemDisabled(),ui.isItemEscaped(),ui.isNoSelectionOption());    }    updateSingeItemIterator(item);    items=singleItemIterator;  } else   if (kid instanceof UISelectItems) {    UISelectItems ui=(UISelectItems)kid;    Object value=ui.getValue();    if (value != null) {      if (value instanceof SelectItem) {        updateSingeItemIterator((SelectItem)value);        items=singleItemIterator;      } else       if (value.getClass().isArray()) {        items=new ArrayIterator(ctx,(UISelectItems)kid,value);      } else       if (value instanceof Iterable) {        items=new IterableItemIterator(ctx,(UISelectItems)kid,(Iterable<?>)value);      } else       if (value instanceof Map) {        items=new MapIterator((Map)value);      } else {        throw new IllegalArgumentException();      }    }    if (items != null && !items.hasNext()) {      items=null;    }  }}  }
class C{  public Parameter(String value){}  }
class C{  public void writeState(DataOutputStream stream) throws IOException {  int len=mt.length;  for (int x=0; x < len; x++)   stream.writeInt(mt[x]);  len=mag01.length;  for (int x=0; x < len; x++)   stream.writeInt(mag01[x]);  stream.writeInt(mti);  stream.writeDouble(__nextNextGaussian);  stream.writeBoolean(__haveNextNextGaussian);}  }
class C{  protected void initClassDefaults(UIDefaults table){  super.initClassDefaults(table);  putDefault(table,"PanelUI");  putDefault(table,"ButtonUI");  putDefault(table,"ToggleButtonUI");  putDefault(table,"TabbedPaneUI");  putDefault(table,"TableHeaderUI");  putDefault(table,"RadioButtonUI");  putDefault(table,"CheckBoxUI");  putDefault(table,"ComboBoxUI");  putDefault(table,"MenuUI");  putDefault(table,"MenuBarUI");  putDefault(table,"MenuItemUI");  putDefault(table,"CheckBoxMenuItemUI");  putDefault(table,"ToolBarUI");  putDefault(table,"RootPaneUI");  putDefault(table,"ViewportUI");  putDefault(table,"SplitPaneUI");  putDefault(table,"ScrollPaneUI");  putDefault(table,"LabelUI");  putDefault(table,"ToolTipUI");  putDefault(table,"TextAreaUI");}  }
class C{  private void write(byte[] buffer,int offset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (streaming) {    while (byteCount > 0) {      int bytesWritten=IoBridge.sendto(fd,buffer,offset,byteCount,0,null,0);      byteCount-=bytesWritten;      offset+=bytesWritten;    }  } else {    IoBridge.sendto(fd,buffer,offset,byteCount,0,null,port);  }}  }
class C{  private AFTPClient actionRename() throws PageException, IOException {  required("existing",existing);  required("new",_new);  AFTPClient client=getClient();  client.rename(existing,_new);  writeCfftp(client);  return client;}  }
class C{  public static boolean isAvailable(){  return AudioEffect.isEffectTypeAvailable(AudioEffect.EFFECT_TYPE_AGC);}  }
class C{  public void sendByePacket(){  Vector<RtcpSdesPacket> repvec=makereports();  RtcpPacket[] packets=new RtcpPacket[repvec.size() + 1];  repvec.copyInto(packets);  int ssrc[]={rtcpSession.SSRC};  RtcpByePacket rtcpbyepacket=new RtcpByePacket(ssrc,null);  packets[packets.length - 1]=rtcpbyepacket;  RtcpCompoundPacket cp=new RtcpCompoundPacket(packets);  rtcpSession.getMySource().activeSender=false;  transmit(cp);}  }
class C{  public static void initialize(){}  }
class C{  public boolean needsScores(){  return type == Type.SCORE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.201 -0500",hash_original_method="5B98F5827867C3DC60F60E22E81275D2",hash_generated_method="F06992E51E8E0196730E3864224731B8") public static float computeCompatibleScaling(DisplayMetrics dm,DisplayMetrics outDm){  final int width=dm.noncompatWidthPixels;  final int height=dm.noncompatHeightPixels;  int shortSize, longSize;  if (width < height) {    shortSize=width;    longSize=height;  } else {    shortSize=height;    longSize=width;  }  int newShortSize=(int)(DEFAULT_NORMAL_SHORT_DIMENSION * dm.density + 0.5f);  float aspect=((float)longSize) / shortSize;  if (aspect > MAXIMUM_ASPECT_RATIO) {    aspect=MAXIMUM_ASPECT_RATIO;  }  int newLongSize=(int)(newShortSize * aspect + 0.5f);  int newWidth, newHeight;  if (width < height) {    newWidth=newShortSize;    newHeight=newLongSize;  } else {    newWidth=newLongSize;    newHeight=newShortSize;  }  float sw=width / (float)newWidth;  float sh=height / (float)newHeight;  float scale=sw < sh ? sw : sh;  if (scale < 1) {    scale=1;  }  if (outDm != null) {    outDm.widthPixels=newWidth;    outDm.heightPixels=newHeight;  }  return scale;}  }
class C{  public void testUnspecifiedProperties() throws Exception {  SchemaChangeFilter scf=new SchemaChangeFilter();  filterHelper.setFilter(scf);  ReplDBMSEvent e=filter(filterHelper,0,"foo","insert into bar(val) values(1)");  assertEventPropertyNull(e,"schema_change");  assertEventPropertyNull(e,"truncate");  filterHelper.done();}  }
class C{  @SuppressWarnings("unchecked") public Frame(final int nLocals,final int nStack){  this.values=(V[])new Value[nLocals + nStack];  this.locals=nLocals;}  }
class C{  Worker(Runnable firstTask){  setState(-1);  this.firstTask=firstTask;  this.thread=getThreadFactory().newThread(this);}  }
class C{  private void checkInit(){  if (!isInit()) {    throw new IllegalStateException("Please init the file-downloader by using " + FileDownloader.class.getSimpleName() + ".init(FileDownloadConfiguration) or "+ FileDownloadManager.class.getSimpleName()+ ".init(FileDownloadConfiguration) if the version is below 0.2.0 !");  }}  }
class C{  protected long doBasicDownload(byte[] blobData,int location) throws Exception {  long dlRequest=enqueueDownloadRequest(blobData,location);  waitForDownloadOrTimeout(dlRequest);  assertEquals(1,mReceiver.numDownloadsCompleted());  return dlRequest;}  }
class C{  private void updateUI(final Property property){  final PropertyRenderer renderer=property.getRenderer();  renderer.updateUI();  final PropertyEditor editor=property.getEditor();  if (editor != null) {    editor.updateUI();  }  final Property[] children=getPropChildren(property);  for (int i=children.length - 1; i >= 0; i--) {    final Property child=children[i];    if (!(child instanceof IntrospectedProperty)) {      updateUI(child);    }  }}  }
class C{  public void addFunctionListener(FunctionListener l){  if (!listeners.contains(l)) {    listeners.add(l);  }}  }
class C{  @Override public int hashCode(){  return variable.hashCode() - value.hashCode();}  }
class C{  private int makeReadRecInd(){  if (mMessage == null) {    mMessage=new ByteArrayOutputStream();    mPosition=0;  }  appendOctet(PduHeaders.MESSAGE_TYPE);  appendOctet(PduHeaders.MESSAGE_TYPE_READ_REC_IND);  if (appendHeader(PduHeaders.MMS_VERSION) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  if (appendHeader(PduHeaders.MESSAGE_ID) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  if (appendHeader(PduHeaders.TO) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  if (appendHeader(PduHeaders.FROM) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  appendHeader(PduHeaders.DATE);  if (appendHeader(PduHeaders.READ_STATUS) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  return PDU_COMPOSE_SUCCESS;}  }
class C{  private void jbInit() throws Exception {  this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);  this.setResizable(false);  this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  this.getContentPane().add(Box.createVerticalStrut(8),BorderLayout.NORTH);  this.getContentPane().add(Box.createHorizontalStrut(8),BorderLayout.WEST);  this.getContentPane().add(Box.createVerticalStrut(8),BorderLayout.SOUTH);  this.getContentPane().add(Box.createHorizontalStrut(8),BorderLayout.EAST);  mainPanel.setLayout(new BorderLayout(5,5));  this.getContentPane().add(mainPanel,BorderLayout.CENTER);  infoLabel.setFont(new java.awt.Font("Dialog",3,14));  infoLabel.setHorizontalAlignment(SwingConstants.CENTER);  infoLabel.setHorizontalTextPosition(SwingConstants.RIGHT);  infoLabel.setIcon(Env.getImageIcon("C10030.gif"));  infoLabel.setIconTextGap(10);  mainPanel.add(infoLabel,BorderLayout.NORTH);  mainPanel.add(progressBar,BorderLayout.CENTER);}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  public Iterator<E> snapshotIterator(){  List<E> l=new ArrayList<E>();  l.addAll(this);  return l.iterator();}  }
class C{  public static double percRoundPlus(final double a,final double b){  return ((long)((a / (a + b)) * 10000) / 100.);}  }
class C{  public int mapName(String name){  for (int i=0; i < names.length; i++) {    if (names[i].equals(name)) {      return i;    }  }  return -1;}  }
class C{  public HistogramModel(int numSources){  this.addDataSources(numSources);  redraw();}  }
class C{  public BaseStringCollectionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public static MetricSetType of(MetricSetDto metrics){  final MetricSetType metricSet=new MetricSetType();  metricSet.setName(metrics.getName());  for (  MetricDto metricDto : metrics.getMetrics()) {    if (metricDto instanceof MetricSetDto) {      metricSet.getMetrics().add(of((MetricSetDto)metricDto));    } else     if (metricDto instanceof HistogramDto) {      metricSet.getMetrics().add(toMetricType((HistogramDto)metricDto));    } else     if (metricDto instanceof SimpleMetricDto) {      metricSet.getMetrics().add(toMetricType((SimpleMetricDto<?>)metricDto));    }  }  return metricSet;}  }
class C{  public RaftParameters withSnapshotEnabled(int distance){  this.snapshotDistance=distance;  return this;}  }
class C{  @RequestProcessing(value="/member/{userName}/followers",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomeFollowers(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {  final JSONObject user=(JSONObject)request.getAttribute(User.USER);  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/followers.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("userHomeFollowersCnt");  final int windowSize=Symphonys.getInt("userHomeFollowersWindowSize");  fillHomeUser(dataModel,user);  final String followingId=user.optString(Keys.OBJECT_ID);  dataModel.put(Follow.FOLLOWING_ID,followingId);  final JSONObject followerUsersResult=followQueryService.getFollowerUsers(followingId,pageNum,pageSize);  final List<JSONObject> followerUsers=(List)followerUsersResult.opt(Keys.RESULTS);  dataModel.put(Common.USER_HOME_FOLLOWER_USERS,followerUsers);  avatarQueryService.fillUserAvatarURL(user);  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);  if (isLoggedIn) {    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);    final String followerId=currentUser.optString(Keys.OBJECT_ID);    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);    dataModel.put(Common.IS_FOLLOWING,isFollowing);    for (    final JSONObject followerUser : followerUsers) {      final String homeUserFollowerUserId=followerUser.optString(Keys.OBJECT_ID);      followerUser.put(Common.IS_FOLLOWING,followQueryService.isFollowing(followerId,homeUserFollowerUserId));    }  }  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));  final int followerUserCnt=followerUsersResult.optInt(Pagination.PAGINATION_RECORD_COUNT);  final int pageCount=(int)Math.ceil((double)followerUserCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);}  }
class C{  @Action(value="/reports/chequeCollectionReport-report") public String report(){  final ReportRequest reportInput=new ReportRequest(CHEQUE_COLLETION_TEMPLATE,critParams,ReportDataSourceType.SQL);  final ReportOutput reportOutput=reportService.createReport(reportInput);  reportId=reportViewerUtil.addReportToTempCache(reportOutput);  return REPORT;}  }
class C{  public DijkstraShortestPath(Graph<V,E> g){  super(g);}  }
class C{  private long minimalPlogIdInOpenTransactions(){  Collection<PlogTransaction> allTrans=openTransactions.values();  long minPlogId=Long.MAX_VALUE;  for (  PlogTransaction tran : allTrans) {    if (tran.startPlogId > 0 && tran.startPlogId < minPlogId) {      minPlogId=tran.startPlogId;    }  }  return minPlogId;}  }
class C{  private int computeFields(int fieldMask,int tzMask){  int zoneOffset=0;  TimeZone tz=getZone();  if (zoneOffsets == null) {    zoneOffsets=new int[2];  }  if (tzMask != (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) {    if (tz instanceof ZoneInfo) {      zoneOffset=((ZoneInfo)tz).getOffsets(time,zoneOffsets);    } else {      zoneOffset=tz.getOffset(time);      zoneOffsets[0]=tz.getRawOffset();      zoneOffsets[1]=zoneOffset - zoneOffsets[0];    }  }  if (tzMask != 0) {    if (isFieldSet(tzMask,ZONE_OFFSET)) {      zoneOffsets[0]=internalGet(ZONE_OFFSET);    }    if (isFieldSet(tzMask,DST_OFFSET)) {      zoneOffsets[1]=internalGet(DST_OFFSET);    }    zoneOffset=zoneOffsets[0] + zoneOffsets[1];  }  long fixedDate=zoneOffset / ONE_DAY;  int timeOfDay=zoneOffset % (int)ONE_DAY;  fixedDate+=time / ONE_DAY;  timeOfDay+=(int)(time % ONE_DAY);  if (timeOfDay >= ONE_DAY) {    timeOfDay-=ONE_DAY;    ++fixedDate;  } else {    while (timeOfDay < 0) {      timeOfDay+=ONE_DAY;      --fixedDate;    }  }  fixedDate+=EPOCH_OFFSET;  int era=CE;  int year;  if (fixedDate >= gregorianCutoverDate) {    assert cachedFixedDate == Long.MIN_VALUE || gdate.isNormalized() : "cache control: not normalized";    assert cachedFixedDate == Long.MIN_VALUE || gcal.getFixedDate(gdate.getNormalizedYear(),gdate.getMonth(),gdate.getDayOfMonth(),gdate) == cachedFixedDate : "cache control: inconsictency" + ", cachedFixedDate=" + cachedFixedDate + ", computed="+ gcal.getFixedDate(gdate.getNormalizedYear(),gdate.getMonth(),gdate.getDayOfMonth(),gdate)+ ", date="+ gdate;    if (fixedDate != cachedFixedDate) {      gcal.getCalendarDateFromFixedDate(gdate,fixedDate);      cachedFixedDate=fixedDate;    }    year=gdate.getYear();    if (year <= 0) {      year=1 - year;      era=BCE;    }    calsys=gcal;    cdate=gdate;    assert cdate.getDayOfWeek() > 0 : "dow=" + cdate.getDayOfWeek() + ", date="+ cdate;  } else {    calsys=getJulianCalendarSystem();    cdate=(BaseCalendar.Date)jcal.newCalendarDate(getZone());    jcal.getCalendarDateFromFixedDate(cdate,fixedDate);    Era e=cdate.getEra();    if (e == jeras[0]) {      era=BCE;    }    year=cdate.getYear();  }  internalSet(ERA,era);  internalSet(YEAR,year);  int mask=fieldMask | (ERA_MASK | YEAR_MASK);  int month=cdate.getMonth() - 1;  int dayOfMonth=cdate.getDayOfMonth();  if ((fieldMask & (MONTH_MASK | DAY_OF_MONTH_MASK | DAY_OF_WEEK_MASK)) != 0) {    internalSet(MONTH,month);    internalSet(DAY_OF_MONTH,dayOfMonth);    internalSet(DAY_OF_WEEK,cdate.getDayOfWeek());    mask|=MONTH_MASK | DAY_OF_MONTH_MASK | DAY_OF_WEEK_MASK;  }  if ((fieldMask & (HOUR_OF_DAY_MASK | AM_PM_MASK | HOUR_MASK| MINUTE_MASK| SECOND_MASK| MILLISECOND_MASK)) != 0) {    if (timeOfDay != 0) {      int hours=timeOfDay / ONE_HOUR;      internalSet(HOUR_OF_DAY,hours);      internalSet(AM_PM,hours / 12);      internalSet(HOUR,hours % 12);      int r=timeOfDay % ONE_HOUR;      internalSet(MINUTE,r / ONE_MINUTE);      r%=ONE_MINUTE;      internalSet(SECOND,r / ONE_SECOND);      internalSet(MILLISECOND,r % ONE_SECOND);    } else {      internalSet(HOUR_OF_DAY,0);      internalSet(AM_PM,AM);      internalSet(HOUR,0);      internalSet(MINUTE,0);      internalSet(SECOND,0);      internalSet(MILLISECOND,0);    }    mask|=(HOUR_OF_DAY_MASK | AM_PM_MASK | HOUR_MASK| MINUTE_MASK| SECOND_MASK| MILLISECOND_MASK);  }  if ((fieldMask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) != 0) {    internalSet(ZONE_OFFSET,zoneOffsets[0]);    internalSet(DST_OFFSET,zoneOffsets[1]);    mask|=(ZONE_OFFSET_MASK | DST_OFFSET_MASK);  }  if ((fieldMask & (DAY_OF_YEAR_MASK | WEEK_OF_YEAR_MASK | WEEK_OF_MONTH_MASK| DAY_OF_WEEK_IN_MONTH_MASK)) != 0) {    int normalizedYear=cdate.getNormalizedYear();    long fixedDateJan1=calsys.getFixedDate(normalizedYear,1,1,cdate);    int dayOfYear=(int)(fixedDate - fixedDateJan1) + 1;    long fixedDateMonth1=fixedDate - dayOfMonth + 1;    int cutoverGap=0;    int cutoverYear=(calsys == gcal) ? gregorianCutoverYear : gregorianCutoverYearJulian;    int relativeDayOfMonth=dayOfMonth - 1;    if (normalizedYear == cutoverYear) {      if (gregorianCutoverYearJulian <= gregorianCutoverYear) {        fixedDateJan1=getFixedDateJan1(cdate,fixedDate);        if (fixedDate >= gregorianCutoverDate) {          fixedDateMonth1=getFixedDateMonth1(cdate,fixedDate);        }      }      int realDayOfYear=(int)(fixedDate - fixedDateJan1) + 1;      cutoverGap=dayOfYear - realDayOfYear;      dayOfYear=realDayOfYear;      relativeDayOfMonth=(int)(fixedDate - fixedDateMonth1);    }    internalSet(DAY_OF_YEAR,dayOfYear);    internalSet(DAY_OF_WEEK_IN_MONTH,relativeDayOfMonth / 7 + 1);    int weekOfYear=getWeekNumber(fixedDateJan1,fixedDate);    if (weekOfYear == 0) {      long fixedDec31=fixedDateJan1 - 1;      long prevJan1=fixedDateJan1 - 365;      if (normalizedYear > (cutoverYear + 1)) {        if (CalendarUtils.isGregorianLeapYear(normalizedYear - 1)) {          --prevJan1;        }      } else       if (normalizedYear <= gregorianCutoverYearJulian) {        if (CalendarUtils.isJulianLeapYear(normalizedYear - 1)) {          --prevJan1;        }      } else {        BaseCalendar calForJan1=calsys;        int prevYear=getCalendarDate(fixedDec31).getNormalizedYear();        if (prevYear == gregorianCutoverYear) {          calForJan1=getCutoverCalendarSystem();          if (calForJan1 == jcal) {            prevJan1=calForJan1.getFixedDate(prevYear,BaseCalendar.JANUARY,1,null);          } else {            prevJan1=gregorianCutoverDate;            calForJan1=gcal;          }        } else         if (prevYear <= gregorianCutoverYearJulian) {          calForJan1=getJulianCalendarSystem();          prevJan1=calForJan1.getFixedDate(prevYear,BaseCalendar.JANUARY,1,null);        }      }      weekOfYear=getWeekNumber(prevJan1,fixedDec31);    } else {      if (normalizedYear > gregorianCutoverYear || normalizedYear < (gregorianCutoverYearJulian - 1)) {        if (weekOfYear >= 52) {          long nextJan1=fixedDateJan1 + 365;          if (cdate.isLeapYear()) {            nextJan1++;          }          long nextJan1st=BaseCalendar.getDayOfWeekDateOnOrBefore(nextJan1 + 6,getFirstDayOfWeek());          int ndays=(int)(nextJan1st - nextJan1);          if (ndays >= getMinimalDaysInFirstWeek() && fixedDate >= (nextJan1st - 7)) {            weekOfYear=1;          }        }      } else {        BaseCalendar calForJan1=calsys;        int nextYear=normalizedYear + 1;        if (nextYear == (gregorianCutoverYearJulian + 1) && nextYear < gregorianCutoverYear) {          nextYear=gregorianCutoverYear;        }        if (nextYear == gregorianCutoverYear) {          calForJan1=getCutoverCalendarSystem();        }        long nextJan1;        if (nextYear > gregorianCutoverYear || gregorianCutoverYearJulian == gregorianCutoverYear || nextYear == gregorianCutoverYearJulian) {          nextJan1=calForJan1.getFixedDate(nextYear,BaseCalendar.JANUARY,1,null);        } else {          nextJan1=gregorianCutoverDate;          calForJan1=gcal;        }        long nextJan1st=BaseCalendar.getDayOfWeekDateOnOrBefore(nextJan1 + 6,getFirstDayOfWeek());        int ndays=(int)(nextJan1st - nextJan1);        if (ndays >= getMinimalDaysInFirstWeek() && fixedDate >= (nextJan1st - 7)) {          weekOfYear=1;        }      }    }    internalSet(WEEK_OF_YEAR,weekOfYear);    internalSet(WEEK_OF_MONTH,getWeekNumber(fixedDateMonth1,fixedDate));    mask|=(DAY_OF_YEAR_MASK | WEEK_OF_YEAR_MASK | WEEK_OF_MONTH_MASK| DAY_OF_WEEK_IN_MONTH_MASK);  }  return mask;}  }
class C{  public Matrix3d m02(double m02){  this.m02=m02;  return this;}  }
class C{  public static int hash(int seed,float[] floatArray){  if (floatArray == null) {    return 0;  }  for (  float aFloat : floatArray) {    seed=hash(seed,aFloat);  }  return seed;}  }
class C{  public FakeClock(ReadableInstant startTime){  setTo(startTime);}  }
class C{  public SIMD224(){  super();}  }
class C{  private void ensureClassification(){  if (size() != 2) {    throw new AttributeTypeException("Attribute " + this.toString() + " is not a classification attribute!");  }}  }
class C{  @Override public String cancel(){  if (!"list".equals(from)) {    return "mainMenu";  }  return "cancel";}  }
class C{  public ObjectFactory(){}  }
class C{  public static java.nio.ByteBuffer compressImage(java.awt.image.BufferedImage image){  if (image == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!WWMath.isPowerOfTwo(image.getWidth()) || !WWMath.isPowerOfTwo(image.getHeight())) {    String message=Logging.getMessage("generic.InvalidImageSize",image.getWidth(),image.getHeight());    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  DDSCompressor compressor=new DDSCompressor();  DXTCompressionAttributes attributes=getDefaultCompressionAttributes();  return compressor.compressImage(image,attributes);}  }
class C{  public GroupChat initiateGroupChat(Set<ContactId> contacts,String subject) throws RcsPermissionDeniedException, RcsServiceNotRegisteredException, RcsMaxAllowedSessionLimitReachedException, RcsPersistentStorageException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IGroupChat chatIntf=mApi.initiateGroupChat(new ArrayList<>(contacts),subject);    return new GroupChat(chatIntf);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPermissionDeniedException.assertException(e);    RcsServiceNotRegisteredException.assertException(e);    RcsMaxAllowedSessionLimitReachedException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static double bearingDegDeg(double latS,double lngS,double latE,double lngE){  return MathUtil.rad2deg(bearingRad(MathUtil.deg2rad(latS),MathUtil.deg2rad(lngS),MathUtil.deg2rad(latE),MathUtil.deg2rad(lngE)));}  }
class C{  public static void sendMsg(Context context,String msg){  if (context != null && msg != null) {    msgLong(context,msg);  }}  }
class C{  @Override public List<String> searchContractorBill(final Map<String,Object> paramsMap,final List<Object> paramList){  final List<String> QueryObj=new ArrayList<String>();  StringBuffer commonQry=new StringBuffer();  final String countQry="select count(distinct cbr) from ContractorBillRegister cbr where cbr.id != null and cbr.billstatus != ? ";  final String dynQuery="select distinct cbr from ContractorBillRegister cbr where cbr.id != null and cbr.billstatus != ? ";  paramList.add(WorksConstants.NEW);  if (paramsMap.get(WORKORDER_NO) != null) {    commonQry=commonQry.append("  and cbr.workordernumber like ?");    paramList.add("%" + paramsMap.get(WORKORDER_NO) + "%");  }  if (paramsMap.get(CONTRACTOR_ID) != null && !"-1".equals(paramsMap.get(CONTRACTOR_ID))) {    commonQry=commonQry.append(" and (cbr.id in (select mbh.egBillregister.id from MBHeader mbh where mbh.egBillregister.id=cbr.id and mbh.workOrder.contractor.id = ?)" + " OR cbr.id in (select mbcb.egBillregister.id from MBForCancelledBill mbcb where mbcb.egBillregister.id=cbr.id and mbcb.mbHeader.workOrder.contractor.id = ?))");    paramList.add(paramsMap.get(CONTRACTOR_ID));    paramList.add(paramsMap.get(CONTRACTOR_ID));  }  if (paramsMap.get(FROM_DATE) != null && paramsMap.get(TO_DATE) == null) {    commonQry=commonQry.append(" and cbr.billdate >= ? ");    paramList.add(paramsMap.get(FROM_DATE));  } else   if (paramsMap.get(TO_DATE) != null && paramsMap.get(FROM_DATE) == null) {    commonQry=commonQry.append(" and cbr.billdate <= ? ");    paramList.add(paramsMap.get(TO_DATE));  } else   if (paramsMap.get(FROM_DATE) != null && paramsMap.get(TO_DATE) != null) {    commonQry=commonQry.append(" and cbr.billdate between ? and ? ");    paramList.add(paramsMap.get(FROM_DATE));    paramList.add(paramsMap.get(TO_DATE));  }  if (paramsMap.get(BILLSTATUS) != null && !paramsMap.get(BILLSTATUS).equals("-1")) {    commonQry=commonQry.append(" and cbr.billstatus=?");    paramList.add(paramsMap.get(BILLSTATUS));  }  if (paramsMap.get(BILLNO) != null) {    commonQry=commonQry.append(" and cbr.billnumber like ?");    paramList.add("%" + paramsMap.get(BILLNO) + "%");  }  if (paramsMap.get(BILL_DEPT_ID) != null && !"-1".equals(paramsMap.get(BILL_DEPT_ID))) {    commonQry=commonQry.append(" and cbr.egBillregistermis.egDepartment.id = ? ");    paramList.add(paramsMap.get(BILL_DEPT_ID));  }  if (paramsMap.get(EXEC_DEPT_ID) != null && !"-1".equals(paramsMap.get(EXEC_DEPT_ID))) {    commonQry=commonQry.append(" and (cbr.id in (select mbh.egBillregister.id from MBHeader mbh where mbh.egBillregister.id=cbr.id " + "and mbh.workOrderEstimate.estimate.executingDepartment.id = ?) OR cbr.id in (select mbcb.egBillregister.id from MBForCancelledBill mbcb where" + " mbcb.egBillregister.id=cbr.id and mbcb.mbHeader.workOrderEstimate.estimate.executingDepartment.id = ?))");    paramList.add(paramsMap.get(EXEC_DEPT_ID));    paramList.add(paramsMap.get(EXEC_DEPT_ID));  }  if (paramsMap.get(EST_NO) != null) {    commonQry=commonQry.append(" and (EXISTS (select mbh.egBillregister.id from MBHeader mbh where mbh.egBillregister.id=cbr.id " + "and mbh.workOrderEstimate.estimate.estimateNumber like ? ) OR EXISTS (select mbcb.egBillregister.id from MBForCancelledBill mbcb where" + " mbcb.egBillregister.id=cbr.id and mbcb.mbHeader.workOrderEstimate.estimate.estimateNumber like ? ))");    paramList.add("%" + paramsMap.get(EST_NO) + "%");    paramList.add("%" + paramsMap.get(EST_NO) + "%");  }  commonQry=commonQry.append(" order by cbr.billdate");  QueryObj.add(dynQuery + commonQry);  QueryObj.add(countQry + commonQry);  return QueryObj;}  }
class C{  public void removeGroupName(String groupName){  groupNames.remove(groupName);}  }
class C{  @Override public void onClick(View v){  boolean isGet=false;  String key=null;switch (v.getId()) {case R.id.get_one:    isGet=true;  key=this.bitmap2Key.get(this.camnterBitmap);this.bitmapCache.get(key);this.mCamnterCountText.setText(this.getString(R.string.lru_cache_count_format,++this.camnterCount));break;case R.id.get_two:isGet=true;key=this.bitmap2Key.get(this.drakeetBitmap);this.bitmapCache.get(key);this.mDrakeetCountText.setText(this.getString(R.string.lru_cache_count_format,++this.drakeetCount));break;case R.id.get_three:isGet=true;key=this.bitmap2Key.get(this.kaBitmap);this.bitmapCache.get(key);this.mKaCountText.setText(this.getString(R.string.lru_cache_count_format,++this.kaCount));break;case R.id.put_four:this.bitmapCache.put(this.bitmap2Key.get(this.peterBitmap),this.peterBitmap);this.cacheList.add(this.bitmap2Key.get(peterBitmap));this.refreshText(this.mCacheDataText,LRU_CACHE_CACHE_DATA_FORMAT,this.cacheList);break;case R.id.clear_remove_info:this.mEntryRemovedInfoText.setText(LRU_CACHE_ENTRY_REMOVED_NULL_FORMAT);break;}if (isGet) {if (this.recentList.contains(key)) {this.recentList.remove(key);}this.recentList.add(0,key);this.refreshText(this.mRecentInfoText,LRU_CACHE_RECENT_FORMAT,this.recentList);}}  }
class C{  public String toString(){  return "[" + start + "-"+ end+ "="+ charClass+ "]";}  }
class C{  void helpDelete(Node<K,V> b,Node<K,V> f){  if (f == next && this == b.next) {    if (f == null || f.value != f)     appendMarker(f); else     b.casNext(this,f.next);  }}  }
class C{  protected void sequence_IdentifierRef(ISerializationContext context,IdentifierRef semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.IDENTIFIER_REF__ID) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.IDENTIFIER_REF__ID));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementBindingIdentifierParserRuleCall_0_1(),semanticObject.getId());  feeder.finish();}  }
class C{  public static ShippingDialogFragment newInstance(Delivery delivery,Shipping selectedShipping,ShippingDialogInterface shippingDialogInterface){  ShippingDialogFragment frag=new ShippingDialogFragment();  frag.delivery=delivery;  frag.selectedShippingType=selectedShipping;  frag.shippingDialogInterface=shippingDialogInterface;  return frag;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.750 -0500",hash_original_method="07041611E15894BBB578208C2F3AAD76",hash_generated_method="A2EF317EABB0FA996ACCB8FD2BFD835D") public void error(Object message){  log(Level.SEVERE,String.valueOf(message),null);}  }
class C{  int next(int x,int iNode1,int iNode2,boolean[][] edges){  x++;  while (x < maxn() && (!edges[iNode1][x] || !edges[iNode2][x] || x == iNode2)) {    x++;  }  return x;}  }
class C{  public MidiFileFormat(int type,float divisionType,int resolution,int bytes,long microseconds){  this.type=type;  this.divisionType=divisionType;  this.resolution=resolution;  this.byteLength=bytes;  this.microsecondLength=microseconds;  this.properties=null;}  }
class C{  void allocMessages(){  mGameStatusMessages=new TexturedAlignedRect();  mGameStatusMessages.setTexture(mTextRes.getTextureHandle(),mTextRes.getTextureWidth(),mTextRes.getTextureHeight());  mGameStatusMessages.setPosition(ARENA_WIDTH / 2,ARENA_HEIGHT / 2);}  }
class C{  private void initJOIN(CachedRowSet rowset) throws SQLException {  try {    CachedRowSetImpl cRowset=(CachedRowSetImpl)rowset;    CachedRowSetImpl crsTemp=new CachedRowSetImpl();    RowSetMetaDataImpl rsmd=new RowSetMetaDataImpl();    if (vecRowSetsInJOIN.isEmpty()) {      crsInternal=(CachedRowSetImpl)rowset.createCopy();      crsInternal.setMetaData((RowSetMetaDataImpl)cRowset.getMetaData());      vecRowSetsInJOIN.add(cRowset);    } else {      if ((vecRowSetsInJOIN.size() - vecJoinType.size()) == 2) {        setJoinType(JoinRowSet.INNER_JOIN);      } else       if ((vecRowSetsInJOIN.size() - vecJoinType.size()) == 1) {      }      vecTableNames.add(crsInternal.getTableName());      vecTableNames.add(cRowset.getTableName());      int rowCount2=cRowset.size();      int rowCount1=crsInternal.size();      int matchColumnCount=0;      for (int i=0; i < crsInternal.getMatchColumnIndexes().length; i++) {        if (crsInternal.getMatchColumnIndexes()[i] != -1)         ++matchColumnCount; else         break;      }      rsmd.setColumnCount(crsInternal.getMetaData().getColumnCount() + cRowset.getMetaData().getColumnCount() - matchColumnCount);      crsTemp.setMetaData(rsmd);      crsInternal.beforeFirst();      cRowset.beforeFirst();      for (int i=1; i <= rowCount1; i++) {        if (crsInternal.isAfterLast()) {          break;        }        if (crsInternal.next()) {          cRowset.beforeFirst();          for (int j=1; j <= rowCount2; j++) {            if (cRowset.isAfterLast()) {              break;            }            if (cRowset.next()) {              boolean match=true;              for (int k=0; k < matchColumnCount; k++) {                if (!crsInternal.getObject(crsInternal.getMatchColumnIndexes()[k]).equals(cRowset.getObject(cRowset.getMatchColumnIndexes()[k]))) {                  match=false;                  break;                }              }              if (match) {                int p;                int colc=0;                crsTemp.moveToInsertRow();                for (p=1; p <= crsInternal.getMetaData().getColumnCount(); p++) {                  match=false;                  for (int k=0; k < matchColumnCount; k++) {                    if (p == crsInternal.getMatchColumnIndexes()[k]) {                      match=true;                      break;                    }                  }                  if (!match) {                    crsTemp.updateObject(++colc,crsInternal.getObject(p));                    rsmd.setColumnName(colc,crsInternal.getMetaData().getColumnName(p));                    rsmd.setTableName(colc,crsInternal.getTableName());                    rsmd.setColumnType(p,crsInternal.getMetaData().getColumnType(p));                    rsmd.setAutoIncrement(p,crsInternal.getMetaData().isAutoIncrement(p));                    rsmd.setCaseSensitive(p,crsInternal.getMetaData().isCaseSensitive(p));                    rsmd.setCatalogName(p,crsInternal.getMetaData().getCatalogName(p));                    rsmd.setColumnDisplaySize(p,crsInternal.getMetaData().getColumnDisplaySize(p));                    rsmd.setColumnLabel(p,crsInternal.getMetaData().getColumnLabel(p));                    rsmd.setColumnType(p,crsInternal.getMetaData().getColumnType(p));                    rsmd.setColumnTypeName(p,crsInternal.getMetaData().getColumnTypeName(p));                    rsmd.setCurrency(p,crsInternal.getMetaData().isCurrency(p));                    rsmd.setNullable(p,crsInternal.getMetaData().isNullable(p));                    rsmd.setPrecision(p,crsInternal.getMetaData().getPrecision(p));                    rsmd.setScale(p,crsInternal.getMetaData().getScale(p));                    rsmd.setSchemaName(p,crsInternal.getMetaData().getSchemaName(p));                    rsmd.setSearchable(p,crsInternal.getMetaData().isSearchable(p));                    rsmd.setSigned(p,crsInternal.getMetaData().isSigned(p));                  } else {                    crsTemp.updateObject(++colc,crsInternal.getObject(p));                    rsmd.setColumnName(colc,crsInternal.getMetaData().getColumnName(p));                    rsmd.setTableName(colc,crsInternal.getTableName() + "#" + cRowset.getTableName());                    rsmd.setColumnType(p,crsInternal.getMetaData().getColumnType(p));                    rsmd.setAutoIncrement(p,crsInternal.getMetaData().isAutoIncrement(p));                    rsmd.setCaseSensitive(p,crsInternal.getMetaData().isCaseSensitive(p));                    rsmd.setCatalogName(p,crsInternal.getMetaData().getCatalogName(p));                    rsmd.setColumnDisplaySize(p,crsInternal.getMetaData().getColumnDisplaySize(p));                    rsmd.setColumnLabel(p,crsInternal.getMetaData().getColumnLabel(p));                    rsmd.setColumnType(p,crsInternal.getMetaData().getColumnType(p));                    rsmd.setColumnTypeName(p,crsInternal.getMetaData().getColumnTypeName(p));                    rsmd.setCurrency(p,crsInternal.getMetaData().isCurrency(p));                    rsmd.setNullable(p,crsInternal.getMetaData().isNullable(p));                    rsmd.setPrecision(p,crsInternal.getMetaData().getPrecision(p));                    rsmd.setScale(p,crsInternal.getMetaData().getScale(p));                    rsmd.setSchemaName(p,crsInternal.getMetaData().getSchemaName(p));                    rsmd.setSearchable(p,crsInternal.getMetaData().isSearchable(p));                    rsmd.setSigned(p,crsInternal.getMetaData().isSigned(p));                  }                }                for (int q=1; q <= cRowset.getMetaData().getColumnCount(); q++) {                  match=false;                  for (int k=0; k < matchColumnCount; k++) {                    if (q == cRowset.getMatchColumnIndexes()[k]) {                      match=true;                      break;                    }                  }                  if (!match) {                    crsTemp.updateObject(++colc,cRowset.getObject(q));                    rsmd.setColumnName(colc,cRowset.getMetaData().getColumnName(q));                    rsmd.setTableName(colc,cRowset.getTableName());                    rsmd.setColumnType(p + q - 1,cRowset.getMetaData().getColumnType(q));                    rsmd.setAutoIncrement(p + q - 1,cRowset.getMetaData().isAutoIncrement(q));                    rsmd.setCaseSensitive(p + q - 1,cRowset.getMetaData().isCaseSensitive(q));                    rsmd.setCatalogName(p + q - 1,cRowset.getMetaData().getCatalogName(q));                    rsmd.setColumnDisplaySize(p + q - 1,cRowset.getMetaData().getColumnDisplaySize(q));                    rsmd.setColumnLabel(p + q - 1,cRowset.getMetaData().getColumnLabel(q));                    rsmd.setColumnType(p + q - 1,cRowset.getMetaData().getColumnType(q));                    rsmd.setColumnTypeName(p + q - 1,cRowset.getMetaData().getColumnTypeName(q));                    rsmd.setCurrency(p + q - 1,cRowset.getMetaData().isCurrency(q));                    rsmd.setNullable(p + q - 1,cRowset.getMetaData().isNullable(q));                    rsmd.setPrecision(p + q - 1,cRowset.getMetaData().getPrecision(q));                    rsmd.setScale(p + q - 1,cRowset.getMetaData().getScale(q));                    rsmd.setSchemaName(p + q - 1,cRowset.getMetaData().getSchemaName(q));                    rsmd.setSearchable(p + q - 1,cRowset.getMetaData().isSearchable(q));                    rsmd.setSigned(p + q - 1,cRowset.getMetaData().isSigned(q));                  } else {                    --p;                  }                }                crsTemp.insertRow();                crsTemp.moveToCurrentRow();              } else {              }            }          }        }      }      crsTemp.setMetaData(rsmd);      crsTemp.setOriginal();      int[] pCol=new int[matchColumnCount];      for (int i=0; i < matchColumnCount; i++)       pCol[i]=crsInternal.getMatchColumnIndexes()[i];      crsInternal=(CachedRowSetImpl)crsTemp.createCopy();      crsInternal.setMatchColumn(pCol);      crsInternal.setMetaData(rsmd);      vecRowSetsInJOIN.add(cRowset);    }  } catch (  SQLException sqle) {    sqle.printStackTrace();    throw new SQLException(resBundle.handleGetObject("joinrowsetimpl.initerror").toString() + sqle);  }catch (  Exception e) {    e.printStackTrace();    throw new SQLException(resBundle.handleGetObject("joinrowsetimpl.genericerr").toString() + e);  }}  }
class C{  private void checkLambdaCompatible(JCLambda tree,Type descriptor,CheckContext checkContext){  Type returnType=checkContext.inferenceContext().asUndetVar(descriptor.getReturnType());  if (tree.getBodyKind() == JCLambda.BodyKind.STATEMENT && tree.canCompleteNormally && !returnType.hasTag(VOID) && returnType != Type.recoveryType) {    checkContext.report(tree,diags.fragment("incompatible.ret.type.in.lambda",diags.fragment("missing.ret.val",returnType)));  }  List<Type> argTypes=checkContext.inferenceContext().asUndetVars(descriptor.getParameterTypes());  if (!types.isSameTypes(argTypes,TreeInfo.types(tree.params))) {    checkContext.report(tree,diags.fragment("incompatible.arg.types.in.lambda"));  }}  }
class C{  protected String toResinConfigurationEntry(DataSource ds){  Resource resource=null;  if (ConfigurationEntryType.XA_DATASOURCE.equals(ds.getConnectionType())) {    resource=converter.convertToResource(ds,ConfigurationEntryType.XA_DATASOURCE,"driver-name");  } else {    resource=converter.convertToResource(ds,ConfigurationEntryType.DATASOURCE,"driver-name");  }  return toConfigurationEntry(resource);}  }
class C{  protected void updateCustomFrame(){  if (currentFrame > customFrameList.size()) {    if (!spriteLoop)     return;    currentFrame=Constant.DEFAULT_CURRENT_FRAME;  }  int currentNum=customFrameList.get(currentFrame - 1);  dx=frameWidth * (currentNum % frameNumPerLine);  dy=frameHeight * (currentNum / frameNumPerLine);  currentFrame++;}  }
class C{  public void config(Supplier<String> msgSupplier){  log(Level.CONFIG,msgSupplier);}  }
class C{  public long adjustReleaseTime(long framePresentationTimeUs,long unadjustedReleaseTimeNs){  long framePresentationTimeNs=framePresentationTimeUs * 1000;  long adjustedFrameTimeNs=framePresentationTimeNs;  long adjustedReleaseTimeNs=unadjustedReleaseTimeNs;  if (haveSync) {    if (framePresentationTimeUs != lastFramePresentationTimeUs) {      frameCount++;      adjustedLastFrameTimeNs=pendingAdjustedFrameTimeNs;    }    if (frameCount >= MIN_FRAMES_FOR_ADJUSTMENT) {      long averageFrameDurationNs=(framePresentationTimeNs - syncFramePresentationTimeNs) / frameCount;      long candidateAdjustedFrameTimeNs=adjustedLastFrameTimeNs + averageFrameDurationNs;      if (isDriftTooLarge(candidateAdjustedFrameTimeNs,unadjustedReleaseTimeNs)) {        haveSync=false;      } else {        adjustedFrameTimeNs=candidateAdjustedFrameTimeNs;        adjustedReleaseTimeNs=syncUnadjustedReleaseTimeNs + adjustedFrameTimeNs - syncFramePresentationTimeNs;      }    } else {      if (isDriftTooLarge(framePresentationTimeNs,unadjustedReleaseTimeNs)) {        haveSync=false;      }    }  }  if (!haveSync) {    syncFramePresentationTimeNs=framePresentationTimeNs;    syncUnadjustedReleaseTimeNs=unadjustedReleaseTimeNs;    frameCount=0;    haveSync=true;    onSynced();  }  lastFramePresentationTimeUs=framePresentationTimeUs;  pendingAdjustedFrameTimeNs=adjustedFrameTimeNs;  if (vsyncSampler == null || vsyncSampler.sampledVsyncTimeNs == 0) {    return adjustedReleaseTimeNs;  }  long snappedTimeNs=closestVsync(adjustedReleaseTimeNs,vsyncSampler.sampledVsyncTimeNs,vsyncDurationNs);  return snappedTimeNs - vsyncOffsetNs;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitStylesheet(this);}  }
class C{  public BufferingOutputStream(OutputStream other){  this.other=other;  this.buf=new byte[4096];}  }
class C{  private Address dequeue(boolean waiting,boolean fromTail){  lock();  Address rtn=((fromTail) ? tail : head);  if (rtn.isZero()) {    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(tail.isZero() && head.isZero());    if (waiting) {      int ordinal=TRACE ? 0 : VM.activePlan.collector().getId();      setNumConsumersWaiting(numConsumersWaiting + 1);      while (rtn.isZero()) {        if (numConsumersWaiting == numConsumers)         setCompletionFlag();        if (TRACE) {          Log.write("-- (");          Log.write(ordinal);          Log.write(") joining wait queue of SharedDeque(");          Log.write(name);          Log.write(") ");          Log.write(numConsumersWaiting);          Log.write("/");          Log.write(numConsumers);          Log.write(" consumers waiting");          if (complete())           Log.write(" WAIT COMPLETE");          Log.writeln();          if (TRACE_BLOCKERS)           VM.assertions.dumpStack();        }        unlock();        spinWait(fromTail);        if (complete()) {          if (TRACE) {            Log.write("-- (");            Log.write(ordinal);            Log.writeln(") EXITING");          }          lock();          setNumConsumersWaiting(numConsumersWaiting - 1);          unlock();          return Address.zero();        }        lock();        rtn=((fromTail) ? tail : head);      }      setNumConsumersWaiting(numConsumersWaiting - 1);      if (TRACE) {        Log.write("-- (");        Log.write(ordinal);        Log.write(") resuming work ");        Log.write(" n=");        Log.writeln(numConsumersWaiting);      }    } else {      unlock();      return Address.zero();    }  }  if (fromTail) {    setTail(getPrev(tail));    if (head.EQ(rtn)) {      setHead(Address.zero());      if (VM.VERIFY_ASSERTIONS)       VM.assertions._assert(tail.isZero());    } else {      setNext(tail,Address.zero());    }  } else {    setHead(getNext(head));    if (tail.EQ(rtn)) {      setTail(Address.zero());      if (VM.VERIFY_ASSERTIONS)       VM.assertions._assert(head.isZero());    } else {      setPrev(head,Address.zero());    }  }  bufsenqueued--;  unlock();  return rtn;}  }
class C{  public static ServiceResult toServiceResult(Throwable t){  ServiceResult res=new ServiceResult();  res.setCode(t instanceof ServiceResultException ? ((ServiceResultException)t).getStatusCode() : new StatusCode(StatusCodes.Bad_UnexpectedError));  res.setSymbolicId(res.toString());  res.setLocalizedText(new LocalizedText(t.getMessage(),""));  res.setAdditionalInfo(Arrays.toString(t.getStackTrace()));  return res;}  }
class C{  public Group findGroupByObjectId(String tenantName,String GroupObjectId) throws Exception {  return getService().findGroupByObjectId(tenantName,GroupObjectId,this.getServiceContext());}  }
class C{  public DefaultTableXYDataset(boolean autoPrune){  this.autoPrune=autoPrune;  this.data=new ArrayList();  this.xPoints=new HashSet();  this.intervalDelegate=new IntervalXYDelegate(this,false);  addChangeListener(this.intervalDelegate);}  }
class C{  @Override public boolean isComplete(){  return completed;}  }
class C{  public Stop(int stopIdx,TransitLayer transitLayer,boolean fillMode,boolean jitterCoordinates){  stopId=transitLayer.stopIdForIndex.get(stopIdx);  name=transitLayer.stopNames.get(stopIdx);  VertexStore.Vertex vertex=transitLayer.parentNetwork.streetLayer.vertexStore.getCursor();  vertex.seek(transitLayer.streetVertexForStop.get(stopIdx));  if (jitterCoordinates) {    com.vividsolutions.jts.geom.Coordinate jitteredCoordinates=PointToPointRouterServer.jitter(vertex);    lat=(float)jitteredCoordinates.y;    lon=(float)jitteredCoordinates.x;  } else {    lat=(float)vertex.getLat();    lon=(float)vertex.getLon();  }  wheelchairBoarding=transitLayer.stopsWheelchair.get(stopIdx);  if (fillMode) {    final int[] patternidx=new int[1];    transitLayer.patternsForStop.get(stopIdx).forEach(null);    com.conveyal.r5.transit.TripPattern pattern=transitLayer.tripPatterns.get(patternidx[0]);    RouteInfo routeInfo=transitLayer.routes.get(pattern.routeIndex);    mode=TransitLayer.getTransitModes(routeInfo.route_type);  }}  }
class C{  @Uninterruptible public static void boot(){}  }
class C{  private boolean containsBlackPoint(int a,int b,int fixed,boolean horizontal){  if (horizontal) {    for (int x=a; x <= b; x++) {      if (image.get(x,fixed)) {        return true;      }    }  } else {    for (int y=a; y <= b; y++) {      if (image.get(fixed,y)) {        return true;      }    }  }  return false;}  }
class C{  static void checkIdentifier(final String name,final String msg){  checkIdentifier(name,0,-1,msg);}  }
class C{  public TeamCityIntegration teamCity(){  return teamCityIntegration;}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  public static GeoShapeQueryBuilder geoDisjointQuery(String name,ShapeBuilder shape){  return geoShapeQuery(name,shape,ShapeRelation.DISJOINT);}  }
class C{  public static byte[] createByteArray(int size,String data){  byte[] byteArray=new byte[size];  for (int i=0; i < size; i++) {    byteArray[i]=Byte.parseByte(data,2);  }  return byteArray;}  }
class C{  public boolean enter() throws KeeperException, InterruptedException {  zooKeeper.create(rootPath + "/" + name,new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);  while (true) {synchronized (mutex) {      List<String> list=zooKeeper.getChildren(rootPath,true);      if (list.size() < size) {        mutex.wait();      } else {        return true;      }    }  }}  }
class C{  public static String round(final double num,final int precision){  if (Double.isInfinite(num) || Double.isNaN(num)) {    return Double.toString(num);  }  if (num == 0) {    return "0";  }  BigDecimal bd=new BigDecimal(num);  return bd.setScale(precision,BigDecimal.ROUND_HALF_UP).toString();}  }
class C{  protected HttpCookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  HttpCookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableHttpCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    Log.d(LOG_TAG,"ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  public static Properties retrieveMapreduceProperties(MapReduceApplicationData appData){  return appData.getConf();}  }
class C{  public final CC span(int... cells){  if (cells == null || cells.length == 0) {    setSpanX(LayoutUtil.INF);    setSpanY(1);  } else   if (cells.length == 1) {    setSpanX(cells[0]);    setSpanY(1);  } else {    setSpanX(cells[0]);    setSpanY(cells[1]);  }  return this;}  }
class C{  public void drawInRect(GL10 gl,CGRect rect){  gl.glEnable(GL_TEXTURE_2D);  loadTexture(gl);  float vertices[]={rect.origin.x,rect.origin.y,rect.origin.x + rect.size.width,rect.origin.y,rect.origin.x,rect.origin.y + rect.size.height,rect.origin.x + rect.size.width,rect.origin.y + rect.size.height};  mVertices.put(vertices);  mVertices.position(0);  float coordinates[]={0.0f,_maxT,_maxS,_maxT,0.0f,0.0f,_maxS,0.0f};  mCoordinates.put(coordinates);  mCoordinates.position(0);  gl.glEnableClientState(GL_VERTEX_ARRAY);  gl.glEnableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glBindTexture(GL_TEXTURE_2D,_name);  gl.glTexParameterx(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_REPEAT);  gl.glTexParameterx(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_REPEAT);  gl.glVertexPointer(2,GL_FLOAT,0,mVertices);  gl.glTexCoordPointer(2,GL_FLOAT,0,mCoordinates);  gl.glDrawArrays(GL_TRIANGLE_STRIP,0,4);  gl.glDisableClientState(GL_VERTEX_ARRAY);  gl.glDisableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glDisable(GL_TEXTURE_2D);}  }
class C{  public void stop(BundleContext context) throws Exception {  plugin=null;  super.stop(context);}  }
class C{  public static Interval zeroTo(int count){  return Interval.zeroToBy(count,1);}  }
class C{  @CanIgnoreReturnValue public Builder<C> addAll(RangeSet<C> ranges){  for (  Range<C> range : ranges.asRanges()) {    add(range);  }  return this;}  }
class C{  public synchronized void log(Level msgLevel,String msg,Throwable thrown){  LogRecord record=new LogRecord(msgLevel,msg);  record.setThrown(thrown);  log(record);}  }
class C{  public boolean precise_newinstance(){  return soot.PhaseOptions.getBoolean(options,"precise-newinstance");}  }
class C{  public ExpressionAnnotationList createExpressionAnnotationList(){  ExpressionAnnotationListImpl expressionAnnotationList=new ExpressionAnnotationListImpl();  return expressionAnnotationList;}  }
class C{  public void clear(){  map.clear();}  }
class C{  public Element store(Object o){  SignalMastIcon p=(SignalMastIcon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("signalmasticon");  element.setAttribute("signalmast","" + p.getNamedSignalMast().getName());  storeCommonAttributes(p,element);  element.setAttribute("clickmode","" + p.getClickMode());  element.setAttribute("litmode","" + p.getLitMode());  element.setAttribute("degrees",String.valueOf(p.getDegrees()));  element.setAttribute("scale",String.valueOf(p.getScale()));  element.setAttribute("imageset",p.useIconSet());  element.setAttribute("class","jmri.jmrit.display.configurexml.SignalMastIconXml");  return element;}  }
class C{  private void enableAccessibilityAndMockAccessibilityService(){  AccessibilityManager.getInstance(getActivity());  Settings.Secure.putInt(getActivity().getContentResolver(),Settings.Secure.ACCESSIBILITY_ENABLED,1);  String enabledServices=new ComponentName(getActivity().getPackageName(),MockAccessibilityService.class.getName()).flattenToShortString();  Settings.Secure.putString(getActivity().getContentResolver(),Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES,enabledServices);  long incrementStep=TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE / 5;  long start=SystemClock.uptimeMillis();  while (SystemClock.uptimeMillis() - start < TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE && !sIsAccessibilityServiceReady) {synchronized (sTestLock) {      try {        sTestLock.wait(incrementStep);      } catch (      InterruptedException ie) {      }    }  }  if (!sIsAccessibilityServiceReady) {    throw new IllegalStateException("MockAccessibilityService not ready. Did you add " + "tests and forgot to update AccessibilityInjectorTest#TEST_CASE_COUNT?");  }}  }
class C{  public FuzzyQueryBuilder(String name,Object value){  this.name=name;  this.value=value;}  }
class C{  public void infoNoOcspUriFoundInCertificate(){  addInfo("OSCP Uri not found in certificate meta-data !");}  }
class C{  private List<int[]> findComponents(int graph[][],int size,int color){  boolean marked[]=new boolean[size];  for (int i=0; i < size; i++) {    marked[i]=false;  }  int numMarked=0;  List<int[]> output=new ArrayList<>();  int tempComponent[]=new int[size];  while (numMarked != size) {    int sizeTemp=0;    boolean noChange;    do {      noChange=true;      for (int i=0; i < size; i++) {        if (marked[i]) {          continue;        }        boolean inComponent=false;        for (int j=0; j < sizeTemp && !inComponent; j++) {          if (graph[i][tempComponent[j]] == color) {            inComponent=true;          }        }        if (sizeTemp == 0 || inComponent) {          tempComponent[sizeTemp++]=i;          marked[i]=true;          noChange=false;          numMarked++;        }      }    } while (!noChange);    if (sizeTemp > 1) {      int newPartition[]=new int[sizeTemp];      for (int i=0; i < sizeTemp; i++) {        newPartition[i]=tempComponent[i];      }      output.add(newPartition);    }  }  return output;}  }
class C{  public void write(ByteBuffer buffer) throws IOException {  buffer.position(0);  if (mFileChannel.size() + buffer.capacity() < mMaxSize) {    while (buffer.hasRemaining()) {      mFileChannel.write(buffer);    }    updateWaveFileSize();  } else {    int remaining=(int)(mMaxSize - mFileChannel.size());    remaining-=(int)(remaining % mAudioFormat.getFrameSize());    byte[] bytes=buffer.array();    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining));    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length));    while (current.hasRemaining()) {      mFileChannel.write(current);    }    updateWaveFileSize();    rollover();    while (next.hasRemaining()) {      mFileChannel.write(next);    }    updateWaveFileSize();  }}  }
class C{  protected AttributesImpl startPrefixMapping(Element element,NamespaceStack namespaceStack) throws SAXException {  AttributesImpl namespaceAttributes=null;  Namespace elementNamespace=element.getNamespace();  if ((elementNamespace != null) && !isIgnoreableNamespace(elementNamespace,namespaceStack)) {    namespaceStack.push(elementNamespace);    contentHandler.startPrefixMapping(elementNamespace.getPrefix(),elementNamespace.getURI());    namespaceAttributes=addNamespaceAttribute(namespaceAttributes,elementNamespace);  }  List<Namespace> declaredNamespaces=element.declaredNamespaces();  for (  Namespace namespace : declaredNamespaces) {    if (!isIgnoreableNamespace(namespace,namespaceStack)) {      namespaceStack.push(namespace);      contentHandler.startPrefixMapping(namespace.getPrefix(),namespace.getURI());      namespaceAttributes=addNamespaceAttribute(namespaceAttributes,namespace);    }  }  return namespaceAttributes;}  }
class C{  public X509V1CertImpl(InputStream in) throws CertificateException {  try {    wrappedCert=(java.security.cert.X509Certificate)getFactory().generateCertificate(in);  } catch (  java.security.cert.CertificateException e) {    throw new CertificateException(e.getMessage());  }}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public static void main(String[] options){  try {    Attribute length=new Attribute("length");    Attribute weight=new Attribute("weight");    ArrayList<String> my_nominal_values=new ArrayList<String>(3);    my_nominal_values.add("first");    my_nominal_values.add("second");    my_nominal_values.add("third");    Attribute position=new Attribute("position",my_nominal_values);    ArrayList<Attribute> attributes=new ArrayList<Attribute>(3);    attributes.add(length);    attributes.add(weight);    attributes.add(position);    Instances race=new Instances("race",attributes,0);    race.setClassIndex(position.index());    Instance inst=new DenseInstance(3);    inst.setValue(length,5.3);    inst.setValue(weight,300);    inst.setValue(position,"first");    inst.setDataset(race);    System.out.println("The instance: " + inst);    System.out.println("First attribute: " + inst.attribute(0));    System.out.println("Class attribute: " + inst.classAttribute());    System.out.println("Class index: " + inst.classIndex());    System.out.println("Class is missing: " + inst.classIsMissing());    System.out.println("Class value (internal format): " + inst.classValue());    Instance copy=(Instance)inst.copy();    System.out.println("Shallow copy: " + copy);    copy.setDataset(inst.dataset());    System.out.println("Shallow copy with dataset set: " + copy);    copy.setDataset(null);    copy.deleteAttributeAt(0);    copy.insertAttributeAt(0);    copy.setDataset(inst.dataset());    System.out.println("Copy with first attribute deleted and inserted: " + copy);    System.out.println("Enumerating attributes (leaving out class):");    Enumeration<Attribute> enu=inst.enumerateAttributes();    while (enu.hasMoreElements()) {      Attribute att=enu.nextElement();      System.out.println(att);    }    System.out.println("Header of original and copy equivalent: " + inst.equalHeaders(copy));    System.out.println("Length of copy missing: " + copy.isMissing(length));    System.out.println("Weight of copy missing: " + copy.isMissing(weight.index()));    System.out.println("Length of copy missing: " + Utils.isMissingValue(copy.value(length)));    System.out.println("Number of attributes: " + copy.numAttributes());    System.out.println("Number of classes: " + copy.numClasses());    double[] meansAndModes={2,3,0};    copy.replaceMissingValues(meansAndModes);    System.out.println("Copy with missing value replaced: " + copy);    copy.setClassMissing();    System.out.println("Copy with missing class: " + copy);    copy.setClassValue(0);    System.out.println("Copy with class value set to first value: " + copy);    copy.setClassValue("third");    System.out.println("Copy with class value set to \"third\": " + copy);    copy.setMissing(1);    System.out.println("Copy with second attribute set to be missing: " + copy);    copy.setMissing(length);    System.out.println("Copy with length set to be missing: " + copy);    copy.setValue(0,0);    System.out.println("Copy with first attribute set to 0: " + copy);    copy.setValue(weight,1);    System.out.println("Copy with weight attribute set to 1: " + copy);    copy.setValue(position,"second");    System.out.println("Copy with position set to \"second\": " + copy);    copy.setValue(2,"first");    System.out.println("Copy with last attribute set to \"first\": " + copy);    System.out.println("Current weight of instance copy: " + copy.weight());    copy.setWeight(2);    System.out.println("Current weight of instance copy (set to 2): " + copy.weight());    System.out.println("Last value of copy: " + copy.toString(2));    System.out.println("Value of position for copy: " + copy.toString(position));    System.out.println("Last value of copy (internal format): " + copy.value(2));    System.out.println("Value of position for copy (internal format): " + copy.value(position));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void updateAttributes(int flag,boolean enable) throws IOException {  file.checkWrite();  String path=WindowsLinkSupport.getFinalPath(file,followLinks);  try {    int oldValue=GetFileAttributes(path);    int newValue=oldValue;    if (enable) {      newValue|=flag;    } else {      newValue&=~flag;    }    if (newValue != oldValue) {      SetFileAttributes(path,newValue);    }  } catch (  WindowsException x) {    x.rethrowAsIOException(file);  }}  }
class C{  Property forKey(String propertyName){  String propertyNameCanon=Strings.toLowerCase(propertyName);  Property property=properties.get(propertyNameCanon);  if (property != null) {    return property;  }  int n=propertyNameCanon.length();  if (n != 0 && propertyNameCanon.charAt(0) == '-') {    String barePropertyNameCanon=stripVendorPrefix(propertyNameCanon);    property=properties.get(barePropertyNameCanon);    if (property != null) {      return property;    }  }  return DISALLOWED;}  }
class C{  public void maybePerformFinishedAnimation(){  if (mAnimationProgress > ANIMATION_PROGRESS_STOPPED)   return;  if (mAnimator != null)   mAnimator.cancel();  setAnimationProgress(ANIMATION_PROGRESS_STARTED);  mAnimator=ObjectAnimator.ofFloat(this,"animationProgress",ANIMATION_PROGRESS_STARTED,ANIMATION_PROGRESS_COMPLETED);  mAnimator.start();}  }
class C{  public ComponentUpdatePart(final WorkspaceComponent parent,final Runnable runnable,final String description,final Object lock){  this.parent=parent;  this.runnable=runnable;  this.description=description;  this.lock=lock;}  }
class C{  RMIServerSocketFactoryImpl(String rmiBindAddress) throws UnknownHostException {  this.bindAddress=InetAddress.getByName(rmiBindAddress);}  }
class C{  public static boolean isWebpFormat(ImageFormat imageFormat){  return isStaticWebpFormat(imageFormat) || imageFormat == WEBP_ANIMATED;}  }
class C{  public static DoubleQuantileFinder newDoubleQuantileFinder(boolean known_N,long N,double epsilon,double delta,int quantiles,RandomEngine generator){  if (epsilon <= 0.0 || N < 1000)   return new ExactDoubleQuantileFinder();  if (epsilon > 1)   epsilon=1;  if (delta < 0)   delta=0;  if (delta > 1)   delta=1;  if (quantiles < 1)   quantiles=1;  if (quantiles > N)   N=quantiles;  KnownDoubleQuantileEstimator finder;  if (known_N) {    double[] samplingRate=new double[1];    long[] resultKnown=known_N_compute_B_and_K(N,epsilon,delta,quantiles,samplingRate);    long b=resultKnown[0];    long k=resultKnown[1];    if (b == 1)     return new ExactDoubleQuantileFinder();    return new KnownDoubleQuantileEstimator((int)b,(int)k,N,samplingRate[0],generator);  } else {    long[] resultUnknown=unknown_N_compute_B_and_K(epsilon,delta,quantiles);    long b1=resultUnknown[0];    long k1=resultUnknown[1];    long h1=resultUnknown[2];    double preComputeEpsilon=-1.0;    if (resultUnknown[3] == 1)     preComputeEpsilon=epsilon;    if (true) {      if (b1 == 1)       return new ExactDoubleQuantileFinder();      return new UnknownDoubleQuantileEstimator((int)b1,(int)k1,(int)h1,preComputeEpsilon,generator);    }    double[] samplingRate=new double[1];    long[] resultKnown=known_N_compute_B_and_K(N,epsilon,0,quantiles,samplingRate);    long b2=resultKnown[0];    long k2=resultKnown[1];    if (b2 * k2 < b1 * k1) {      if (b2 == 1)       return new ExactDoubleQuantileFinder();      return new KnownDoubleQuantileEstimator((int)b2,(int)k2,N,samplingRate[0],generator);    }    if (b1 == 1)     return new ExactDoubleQuantileFinder();    return new UnknownDoubleQuantileEstimator((int)b1,(int)k1,(int)h1,preComputeEpsilon,generator);  }}  }
class C{  public static CuboidRegion fromCenter(Vector origin,int apothem){  checkNotNull(origin);  checkArgument(apothem >= 0,"apothem => 0 required");  Vector size=new Vector(1,1,1).multiply(apothem);  return new CuboidRegion(origin.subtract(size),origin.add(size));}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitClassMemberValue(this);}  }
class C{  public T caseStateRoot(StateRoot object){  return null;}  }
class C{  public static String refsEdit(Account.Id accountId,Change.Id changeId,PatchSet.Id psId){  return refsEditPrefix(accountId,changeId) + psId.get();}  }
class C{  void verifyExceptionCaptured(Class<? extends Throwable> expectedExceptionClass){  assertTrue("Excpected exception not thrown",exceptionEventCapture.hasCaptured());  Throwable caughtEx=exceptionEventCapture.getValue();  assertEquals(expectedExceptionClass,caughtEx.getClass());  exceptionEventCapture.reset();}  }
class C{  void error(String key,String arg) throws SAXException {  hadError=true;  if (eh == null)   return;  eh.error(new SAXParseException(localizer.message(key,arg),locator));}  }
class C{  public DatabaseException(Exception e){  super(e);}  }
class C{  @Override public void writeToNBT(NBTTagCompound par1NBTTagCompound){  super.writeToNBT(par1NBTTagCompound);  par1NBTTagCompound.setInteger("tier",tier);  par1NBTTagCompound.setShort("launchHeight",launchHeight);}  }
class C{  public void onReqExecutions(Tradestrategy tradestrategy,boolean addOrders) throws BrokerModelException {  try {    Integer clientId=m_clientId;    if (m_client.isConnected()) {      tradeOrdersExecutions.clear();      commissionDetails.clear();      executionDetails.clear();      if (addOrders)       clientId=0;      Integer reqId=tradestrategy.getIdTradeStrategy();      m_client.reqExecutions(reqId,TWSBrokerModel.getIBExecutionFilter(clientId,tradestrategy.getTradingday().getOpen(),tradestrategy.getContract().getSecType(),tradestrategy.getContract().getSymbol()));    } else {      throw new BrokerModelException(tradestrategy.getIdTradeStrategy(),3020,"Not conected to TWS historical data cannot be retrieved");    }  } catch (  Exception ex) {    throw new BrokerModelException(tradestrategy.getIdTradeStrategy(),3020,"Error request executions for symbol: " + tradestrategy.getContract().getSymbol() + " Msg: "+ ex.getMessage());  }}  }
class C{  TypePath(byte[] b,int offset){  this.b=b;  this.offset=offset;}  }
class C{  static <T>void clearUnscoped(Class<T> objectClass){  unscopedCache.remove(objectClass);}  }
class C{  @SuppressWarnings("unchecked") public final <T extends Activity>T launchActivityWithIntent(String pkg,Class<T> activityCls,Intent intent){  intent.setClassName(pkg,activityCls.getName());  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  T activity=(T)getInstrumentation().startActivitySync(intent);  getInstrumentation().waitForIdleSync();  return activity;}  }
class C{  public static double cuCreal(cuDoubleComplex x){  return x.x;}  }
class C{  public void registerForConnectivityEvents(Object object,ConnectivityChangeListener listener){  registerForConnectivityEvents(object,configuration.isNotifyImmediately(),listener);}  }
class C{  public static void applyImageResource(Element elem,ImageResource image){  applyImageResource(elem,image,"center","center");  elem.getStyle().setHeight(image.getHeight(),"px");  elem.getStyle().setWidth(image.getWidth(),"px");}  }
class C{  public void testExtractedErrorMessage() throws Exception {  myRepository.setSearchQuery("foo < bar");  try {    myRepository.getIssues("",50,0);    fail();  } catch (  Exception e) {    assertEquals("Request failed. Reason: \"Field 'foo' does not exist or you do not have permission to view it.\"",e.getMessage());  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE___IS_PROVIDED_BY_RUNTIME:    return isProvidedByRuntime();}return super.eInvoke(operationID,arguments);}  }
class C{  public boolean hasSensitivity(){  return hasExtension(Sensitivity.class);}  }
class C{  public InviteResponse details() throws Exception {  if (DiscordClient.get().isReady()) {    String response=Requests.GET.makeRequest(DiscordEndpoints.INVITE + inviteCode,new BasicNameValuePair("authorization",DiscordClient.get().getToken()));    JSONObject object1=(JSONObject)new JSONParser().parse(response);    JSONObject guild=(JSONObject)object1.get("guild");    JSONObject channel=(JSONObject)object1.get("channel");    return new InviteResponse((String)guild.get("id"),(String)guild.get("name"),(String)channel.get("id"),(String)channel.get("name"));  } else {    Discord4J.logger.error("Bot has not signed in yet!");    return null;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.581 -0500",hash_original_method="186E870C2FD55DFF0EBE6B8A51AF560E",hash_generated_method="89AA4190DA2CB715B8B22E620ECCBFCD") public static int alpha(int color){  return color >>> 24;}  }
class C{  public PluginLoaderInitContext(String name,Properties properties,String configXml,EPServiceProvider epService){  this.name=name;  this.properties=properties;  this.configXml=configXml;  this.epServiceProvider=epService;}  }
class C{  public void swap(final long a,final long b){  final long x=mPrimary.get(a);  mPrimary.set(a,mPrimary.get(b));  mPrimary.set(b,x);  final long y=mSecondary.get(a);  mSecondary.set(a,mSecondary.get(b));  mSecondary.set(b,y);}  }
class C{  public JspIntegrationITCase(String name){  super(name);}  }
class C{  private static <T>T readRootLeafs(JsonAdapter<T> adapter,JsonReader reader,String[] roots,int index) throws IOException {  if (roots == null || index == roots.length) {    return adapter.fromJson(reader);  } else {    reader.beginObject();    try {      String root=roots[index];      while (reader.hasNext()) {        if (reader.nextName().equals(root)) {          if (reader.peek() == JsonReader.Token.NULL) {            return reader.nextNull();          }          return readRootLeafs(adapter,reader,roots,++index);        } else {          reader.skipValue();        }      }    }  finally {      while (reader.hasNext()) {        reader.skipValue();      }      reader.endObject();    }    throw new IOException(String.format("Json does not match expected structure for roots %s.",Arrays.asList(roots)));  }}  }
class C{  public ZipError(String s){  super(s);}  }
class C{  protected void writeGetterBody(JavaFileWriter writer,MethodDeclarationParameters params) throws IOException {  writeGetterBody(writer);}  }
class C{  public CorrelationAnalysisSolution<V> run(Database database,Relation<V> relation){  if (LOG.isVerbose()) {    LOG.verbose("retrieving database objects...");  }  Centroid centroid=Centroid.make(relation,relation.getDBIDs());  NumberVector.Factory<V> factory=RelationUtil.getNumberVectorFactory(relation);  V centroidDV=factory.newNumberVector(centroid.getArrayRef());  DBIDs ids;  if (this.sampleSize > 0) {    if (randomsample) {      ids=DBIDUtil.randomSample(relation.getDBIDs(),this.sampleSize,RandomFactory.DEFAULT);    } else {      DistanceQuery<V> distanceQuery=database.getDistanceQuery(relation,getDistanceFunction());      KNNList queryResults=database.getKNNQuery(distanceQuery,this.sampleSize).getKNNForObject(centroidDV,this.sampleSize);      ids=DBIDUtil.newHashSet(queryResults);    }  } else {    ids=relation.getDBIDs();  }  return generateModel(relation,ids,centroid.getArrayRef());}  }
class C{  public JComponent component(){  return jcomp;}  }
class C{  public void addListener(final SelectionListener listener1){  this.listener=listener1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.451 -0500",hash_original_method="82DB124C7EE193607645A424E30C3D24",hash_generated_method="ED188A79BA286B06722DD11D7A6A98D1") public ClientKeyExchange(BigInteger dh_Yc){  byte[] bb=dh_Yc.toByteArray();  if (bb[0] == 0) {    exchange_keys=new byte[bb.length - 1];    System.arraycopy(bb,1,exchange_keys,0,exchange_keys.length);  } else {    exchange_keys=bb;  }  length=exchange_keys.length + 2;  isRSA=false;}  }
class C{  public WildcardBinding(ReferenceBinding genericType,int rank,TypeBinding bound,TypeBinding[] otherBounds,int boundKind,LookupEnvironment environment){  this.rank=rank;  this.boundKind=boundKind;  this.modifiers=ClassFileConstants.AccPublic | ExtraCompilerModifiers.AccGenericSignature;  this.environment=environment;  initialize(genericType,bound,otherBounds);  if (genericType instanceof UnresolvedReferenceBinding)   ((UnresolvedReferenceBinding)genericType).addWrapper(this,environment);  if (bound instanceof UnresolvedReferenceBinding)   ((UnresolvedReferenceBinding)bound).addWrapper(this,environment);  this.tagBits|=TagBits.HasUnresolvedTypeVariables;}  }
class C{  private boolean casHead(HeadIndex<K,V> cmp,HeadIndex<K,V> val){  return UNSAFE.compareAndSwapObject(this,headOffset,cmp,val);}  }
class C{  @Override public MatchAllQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public long kstkesp(){  return Long.parseLong(fields[28]);}  }
class C{  public Optional<String> command(){  return Optional.ofNullable(commandArg);}  }
class C{  public void testBuildTextFromElementWithAttributeTrim(){  LOGGER.debug("buildTextFromElementWithAttributeTrim");  Element element=new Element(Tag.valueOf("div"),"");  element.attr(AttributeStore.ALT_ATTR,"    test    ");  TextAttributeOfElementBuilder instance=new TextAttributeOfElementBuilder();  instance.setAttributeName(AttributeStore.ALT_ATTR);  String result=instance.buildTextFromElement(element);  assertEquals("test",result);}  }
class C{  public void prependAction(Runnable action){synchronized (actionList) {    actionList.addFirst(action);    actionList.notify();  }}  }
class C{  public synchronized void addFailedKey(KeyCacheObject key,Throwable e){  if (failedKeys == null)   failedKeys=new ConcurrentLinkedQueue<>();  failedKeys.add(key);  if (err == null)   err=new IgniteCheckedException("Failed to update keys on primary node.");  err.addSuppressed(e);}  }
class C{  public static int encodeAsInt(short high,short low){  int key=high | 0x00000000;  key<<=16;  int lowInt=low & 0x0000FFFF;  key|=lowInt;  return key;}  }
class C{  public void test_read_writeShort() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeShort(Short.MIN_VALUE);  raf.writeShort('T');  raf.writeShort(Short.MAX_VALUE);  raf.writeShort(Short.MIN_VALUE - 1);  raf.writeShort(Short.MAX_VALUE + 1);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",Short.MIN_VALUE,raf.readShort());  assertEquals("Test 2: Incorrect value written or read;",'T',raf.readShort());  assertEquals("Test 3: Incorrect value written or read;",Short.MAX_VALUE,raf.readShort());  assertEquals("Test 4: Incorrect value written or read;",0x7fff,raf.readShort());  assertEquals("Test 5: Incorrect value written or read;",(short)0x8000,raf.readShort());  try {    raf.readShort();    fail("Test 6: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeShort('E');    fail("Test 7: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readShort();    fail("Test 8: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public form addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public LinearRegression(float[] x,float[] y){  if (x.length != y.length) {    throw new IllegalArgumentException("array lengths are not equal");  }  N=x.length;  double sumx=0.0, sumy=0.0, sumx2=0.0;  for (int i=0; i < N; i++)   sumx+=x[i];  for (int i=0; i < N; i++)   sumx2+=x[i] * x[i];  for (int i=0; i < N; i++)   sumy+=y[i];  double xbar=sumx / N;  double ybar=sumy / N;  double xxbar=0.0, yybar=0.0, xybar=0.0;  for (int i=0; i < N; i++) {    xxbar+=(x[i] - xbar) * (x[i] - xbar);    yybar+=(y[i] - ybar) * (y[i] - ybar);    xybar+=(x[i] - xbar) * (y[i] - ybar);  }  beta=xybar / xxbar;  alpha=ybar - beta * xbar;  double rss=0.0;  double ssr=0.0;  for (int i=0; i < N; i++) {    double fit=beta * x[i] + alpha;    rss+=(fit - y[i]) * (fit - y[i]);    ssr+=(fit - ybar) * (fit - ybar);  }  int degreesOfFreedom=N - 2;  R2=ssr / yybar;  svar=rss / degreesOfFreedom;  svar1=svar / xxbar;  svar0=svar / N + xbar * xbar * svar1;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public SecurityException(@Nullable String s){  super(s);}  }
class C{  private void loadTheme(){  if (UIManager.getLookAndFeel() instanceof MetalLookAndFeel) {  } else {    primary1.setEnabled(false);    primary2.setEnabled(false);    primary3.setEnabled(false);    secondary1.setEnabled(false);    secondary2.setEnabled(false);    secondary3.setEnabled(false);  }}  }
class C{  public static String extractPasswordFromImageUrl(String imageUrl){  Pattern r=Pattern.compile(IMAGEURL_PASSWORD_SPLIT_REGEX);  Matcher m=r.matcher(imageUrl);  String password=null;  if (m.find() && m.groupCount() >= 2 && StringUtils.isNotBlank(m.group(2))) {    password=m.group(2);    Pattern hostpattern=Pattern.compile(IMAGEURL_HOST_REGEX);    Matcher hostMatcher=hostpattern.matcher(password);    if (hostMatcher.find()) {      String preHostregex="^(.*?)\\@" + hostMatcher.group(1);      Pattern pwdPattern=Pattern.compile(preHostregex);      Matcher pwdMatcher=pwdPattern.matcher(password);      if (pwdMatcher.find()) {        password=pwdMatcher.group(1);      }    }  }  return password;}  }
class C{  public ShortBuffer asShortBuffer(){  if (order() != ByteOrder.nativeOrder()) {    throw new RuntimeException("Native order supported only.");  }  return ShortBuffer.wrap(this);}  }
class C{  public void leaveGroup(SocketAddress groupAddress,NetworkInterface netInterface) throws IOException {  checkJoinOrLeave(groupAddress,netInterface);  impl.leaveGroup(groupAddress,netInterface);}  }
class C{  public boolean isSimple(MultiPoint mp){  return isSimpleMultiPoint(mp);}  }
class C{  public void send(OutputStream os) throws IOException {  PacketOutputStream pos=(PacketOutputStream)os;  pos.startPacket(packSeq);  pos.writeByteArray(cryptOldFormatPassword(password,new String(authData))).writeByte((byte)0x00);  pos.finishPacketWithoutRelease(false);  pos.releaseBuffer();}  }
class C{  public static boolean isTruncated(Content content){  byte[] contentBytes=content.getContent();  if (contentBytes == null)   return false;  Metadata metadata=content.getMetadata();  if (metadata == null)   return false;  String lengthStr=metadata.get(Response.CONTENT_LENGTH);  if (lengthStr != null)   lengthStr=lengthStr.trim();  if (StringUtil.isEmpty(lengthStr)) {    return false;  }  int inHeaderSize;  String url=content.getUrl();  try {    inHeaderSize=Integer.parseInt(lengthStr);  } catch (  NumberFormatException e) {    LOG.warn("Wrong contentlength format for " + url,e);    return false;  }  int actualSize=contentBytes.length;  if (inHeaderSize > actualSize) {    LOG.info(url + " skipped. Content of size " + inHeaderSize+ " was truncated to "+ actualSize);    return true;  }  if (LOG.isDebugEnabled()) {    LOG.debug(url + " actualSize=" + actualSize+ " inHeaderSize="+ inHeaderSize);  }  return false;}  }
class C{  public BindException(String detailMessage){  super(detailMessage);}  }
class C{  @Override public boolean supportsStoredProcedures(){  debugCodeCall("supportsStoredProcedures");  return false;}  }
class C{  public UpdateRequest doc(XContentBuilder source){  safeDoc().source(source);  return this;}  }
class C{  public void onDrawerOpened(View drawerView){  Snackbar.make(drawerView,R.string.drawer_open,Snackbar.LENGTH_SHORT).show();}  }
class C{  public void loadChatFile(File file,String format,String encoding,boolean processUnderstanding,boolean pin){  try {    loadChatFile(new FileInputStream(file),format,encoding,MAX_FILE_SIZE,processUnderstanding,pin);  } catch (  Exception exception) {    throw new BotException(exception);  }}  }
class C{  @Override public Generator<ILineSegment> construct(String[] args){  return new UniformGenerator(Integer.valueOf(args[0]));}  }
class C{  public static int max(int... values){  int max=values[0];  for (int i=1; i < values.length; i++) {    if (values[i] > max) {      max=values[i];    }  }  return max;}  }
class C{  public int stateIndex(){  return stateindex;}  }
class C{  public int copyDetailsFrom(MJournalBatch jb){  if (isProcessed() || jb == null)   return 0;  int count=0;  int lineCount=0;  MJournal[] fromJournals=jb.getJournals(false);  for (int i=0; i < fromJournals.length; i++) {    MJournal toJournal=new MJournal(getCtx(),0,jb.get_TrxName());    PO.copyValues(fromJournals[i],toJournal,getAD_Client_ID(),getAD_Org_ID());    toJournal.setGL_JournalBatch_ID(getGL_JournalBatch_ID());    toJournal.set_ValueNoCheck("DocumentNo",null);    toJournal.set_ValueNoCheck("C_Period_ID",null);    toJournal.setDateDoc(getDateDoc());    toJournal.setDateAcct(getDateAcct());    toJournal.setDocStatus(MJournal.DOCSTATUS_Drafted);    toJournal.setDocAction(MJournal.DOCACTION_Complete);    toJournal.setTotalCr(Env.ZERO);    toJournal.setTotalDr(Env.ZERO);    toJournal.setIsApproved(false);    toJournal.setIsPrinted(false);    toJournal.setPosted(false);    toJournal.setProcessed(false);    if (toJournal.save()) {      count++;      lineCount+=toJournal.copyLinesFrom(fromJournals[i],getDateAcct(),'x');    }  }  if (fromJournals.length != count)   log.log(Level.SEVERE,"Line difference - Journals=" + fromJournals.length + " <> Saved="+ count);  return count + lineCount;}  }
class C{  public synchronized void removeZoomListener(ZoomListener listener){  if (mZoomIn != null) {    mZoomIn.removeZoomListener(listener);    mZoomOut.removeZoomListener(listener);  }  mTouchHandler.removeZoomListener(listener);}  }
class C{  private RdapSearchResults searchByName(final RdapSearchPattern partialStringQuery,DateTime now){  if (!partialStringQuery.getHasWildcard() && (partialStringQuery.getSuffix() != null)) {    throw new UnprocessableEntityException("Suffixes not allowed in entity name searches");  }  ImmutableList<Registrar> registrarMatches;  if (!partialStringQuery.getHasWildcard()) {    Registrar registrar=Registrar.loadByName(partialStringQuery.getInitialString());    registrarMatches=(registrar == null) ? ImmutableList.<Registrar>of() : ImmutableList.of(registrar);  } else {    registrarMatches=ImmutableList.copyOf(Registrar.loadByNameRange(partialStringQuery.getInitialString(),partialStringQuery.getNextInitialString(),rdapResultSetMaxSize + 1));  }  return makeSearchResults(queryUndeleted(ContactResource.class,"searchName",partialStringQuery,rdapResultSetMaxSize + 1).list(),registrarMatches,now);}  }
class C{  public boolean addPath(OPath path){  String pName=path.getName();  if (log.isDebugEnabled()) {    log.debug("addPath \"" + pName + "\" to OBlock "+ getSystemName());  }  List<Path> list=getPaths();  for (int i=0; i < list.size(); i++) {    if (((OPath)list.get(i)).equals(path)) {      log.warn("Path \"" + pName + "\" duplicated in OBlock "+ getSystemName());      return false;    }    if (pName.equals(((OPath)list.get(i)).getName())) {      log.warn("Path named \"" + pName + "\" already exists in OBlock "+ getSystemName());      return false;    }  }  path.setBlock(this);  Portal portal=path.getFromPortal();  if (portal != null) {    if (!portal.addPath(path)) {      log.warn("Path \"" + pName + "\" rejected by portal  "+ portal.getName());      return false;    }  }  portal=path.getToPortal();  if (portal != null) {    if (!portal.addPath(path)) {      log.warn("Path \"" + pName + "\" rejected by portal  "+ portal.getName());      return false;    }  }  int oldSize=list.size();  super.addPath(path);  firePropertyChange("pathCount",Integer.valueOf(oldSize),Integer.valueOf(getPaths().size()));  return true;}  }
class C{  public AxisLabelLayout(String group,int axis,ValuedRangeModel values,Rectangle2D bounds){  super(group);  if (bounds != null)   setLayoutBounds(bounds);  m_model=values;  m_axis=axis;  m_spacing=50;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private void signalControlOpEnd(){  controlOperationExecuting.set(false);  LockSupport.unpark(controlWaiters.peek());  if (controlWaiters.size() == 0) {    Thread t=evalWaiters.poll();    while (t != null) {      LockSupport.unpark(t);      t=evalWaiters.poll();    }  }}  }
class C{  public MatrixAtom(boolean isPartial,ArrayOfAtoms array,String options){  this(isPartial,array,options,false);}  }
class C{  public void testUnparsableElementThrowsException(){  String string="asdasd";  try {    util.parseIntoElement(string);    fail("should have thrown an exception");  } catch (  CargoException e) {    assertEquals("Could not parse element: " + string,e.getMessage());  }}  }
class C{  private void rotateLeft(Entry p){  Entry r=p.right;  p.right=r.left;  if (r.left != null)   r.left.parent=p;  r.parent=p.parent;  if (p.parent == null)   root=r; else   if (p.parent.left == p)   p.parent.left=r; else   p.parent.right=r;  r.left=p;  p.parent=r;}  }
class C{  public void test_webapp_structure_counters() throws Exception {  doGET(m_serviceURL + "/counters");}  }
class C{  public static CCLabel makeLabel(String string,String fontname,float fontsize){  return new CCLabel(string,CGSize.make(0,0),TextAlignment.CENTER,fontname,fontsize);}  }
class C{  public void drawShadow(View view,Canvas canvas,int position,float shadowHeight,float shadowStrength){  float scaledShadowHeight=Math.max(0.0f,Math.min(1.0f,shadowStrength)) * shadowHeight;  if (scaledShadowHeight < 1.0f)   return;  int left=view.getScrollX();  int right=left + view.getRight();  if (position == POSITION_BOTTOM) {    int bottom=view.getScrollY() + view.getBottom() - view.getTop();    mShadowMatrix.setScale(1,scaledShadowHeight);    mShadowMatrix.postRotate(180);    mShadowMatrix.postTranslate(left,bottom);    mShadowShader.setLocalMatrix(mShadowMatrix);    mShadowPaint.setShader(mShadowShader);    canvas.drawRect(left,bottom - scaledShadowHeight,right,bottom,mShadowPaint);  } else   if (position == POSITION_TOP) {    int top=view.getScrollY();    mShadowMatrix.setScale(1,scaledShadowHeight);    mShadowMatrix.postTranslate(left,top);    mShadowShader.setLocalMatrix(mShadowMatrix);    mShadowPaint.setShader(mShadowShader);    canvas.drawRect(left,top,right,top + scaledShadowHeight,mShadowPaint);  }}  }
class C{  @Deprecated @SuppressWarnings("UnusedDeclaration") public static void authenticate(AuthCallback callback,int themeResId){  final DigitsAuthConfig.Builder digitsAuthConfigBuilder=new DigitsAuthConfig.Builder().withAuthCallBack(callback).withThemeResId(themeResId);  authenticate(digitsAuthConfigBuilder.build());}  }
class C{  public PcStableRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  public static String adjustAuthorName(final String authorName,String committerName){  if (!authorName.equals(committerName)) {    committerName=authorName + ", via " + committerName;  }  return committerName;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getLine() == 0)   setLine();  setPlannedAmt(getPlannedQty().multiply(getPlannedPrice()));  if (is_ValueChanged("M_Product_ID") || is_ValueChanged("M_Product_Category_ID") || is_ValueChanged("PlannedQty")|| is_ValueChanged("PlannedPrice")) {    if (getM_Product_ID() != 0) {      BigDecimal marginEach=getPlannedPrice().subtract(getLimitPrice());      setPlannedMarginAmt(marginEach.multiply(getPlannedQty()));    } else     if (getM_Product_Category_ID() != 0) {      MProductCategory category=MProductCategory.get(getCtx(),getM_Product_Category_ID());      BigDecimal marginEach=category.getPlannedMargin();      setPlannedMarginAmt(marginEach.multiply(getPlannedQty()));    }  }  if (is_ValueChanged("C_ProjectTask_ID") && getC_ProjectTask_ID() != 0) {    MProjectTask pt=new MProjectTask(getCtx(),getC_ProjectTask_ID(),get_TrxName());    if (pt == null || pt.get_ID() == 0) {      log.warning("Project Task Not Found - ID=" + getC_ProjectTask_ID());      return false;    } else     setC_ProjectPhase_ID(pt.getC_ProjectPhase_ID());  }  if (is_ValueChanged("C_ProjectPhase_ID") && getC_ProjectPhase_ID() != 0) {    MProjectPhase pp=new MProjectPhase(getCtx(),getC_ProjectPhase_ID(),get_TrxName());    if (pp == null || pp.get_ID() == 0) {      log.warning("Project Phase Not Found - " + getC_ProjectPhase_ID());      return false;    } else     setC_Project_ID(pp.getC_Project_ID());  }  return true;}  }
class C{  public void close(){synchronized (this) {    if (!closing) {      closing=true;      try {        textOut.close();        out.close();      } catch (      IOException x) {        trouble=true;      }      textOut=null;      charOut=null;      out=null;    }  }}  }
class C{  protected void ensureCapacity(int reqCap){  if (reqCap > cap) {    int newCap=cap << 1;    if (newCap < reqCap)     newCap=reqCap;    mem.reallocate(newCap);    assert mem.capacity() >= newCap;    data=mem.data();    cap=newCap;  }}  }
class C{  public Boolean isOverItem(){  return getAttributeAsBoolean("overItem");}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  public boolean contains(Object elem,boolean testForEquality){  return indexOfFromTo(elem,0,size - 1,testForEquality) >= 0;}  }
class C{  public boolean hasProx(){  return hasProx;}  }
class C{  public PositionProvider(InputStream in) throws IOException {  Reader r=new InputStreamReader(in);  r=new BufferedReader(r);  int i;  ArrayList<Integer> starts=new ArrayList<>();  int idx=-1;  starts.add(0);  while ((i=r.read()) != -1) {    idx++;    char ch=(char)i;    if (ch == '\n') {      starts.add(idx + 1);    }  }  starts.add(Integer.MAX_VALUE);  this.lineStarts=starts.stream().mapToInt(null).toArray();}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (mainFrame != null) {    mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  }  setEnabled(false);  try {    JFileChooser.setDefaultLocale(controller.getLocaliser().getLocale());    JFileChooser fileChooser=new JFileChooser();    fileChooser.setLocale(controller.getLocaliser().getLocale());    fileChooser.setDialogTitle(controller.getLocaliser().getString("createNewWalletAction.tooltip"));    adjustedFont=FontSizer.INSTANCE.getAdjustedDefaultFont();    if (adjustedFont != null) {      setFileChooserFont(new Container[]{fileChooser});    }    fileChooser.applyComponentOrientation(ComponentOrientation.getOrientation(controller.getLocaliser().getLocale()));    if (this.bitcoinController.getModel().getActiveWalletFilename() != null) {      fileChooser.setCurrentDirectory(new File(this.bitcoinController.getModel().getActiveWalletFilename()));    }    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);    fileChooser.setFileFilter(new WalletFileFilter(controller));    String defaultFileName=fileChooser.getCurrentDirectory().getAbsoluteFile() + File.separator + controller.getLocaliser().getString("saveWalletAsView.untitled")+ "."+ BitcoinModel.WALLET_FILE_EXTENSION;    fileChooser.setSelectedFile(new File(defaultFileName));    fileChooser.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    int returnVal=fileChooser.showSaveDialog(mainFrame);    String newWalletFilename=null;    if (returnVal == JFileChooser.APPROVE_OPTION) {      File file=fileChooser.getSelectedFile();      if (file != null) {        newWalletFilename=file.getAbsolutePath();        createNewWallet(newWalletFilename);      }    }  }  finally {    setEnabled(true);    if (mainFrame != null) {      mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    }  }}  }
class C{  private synchronized void addMessageListener(MessageTypeEventHandler<?> messageListener){synchronized (messageListeners) {    if (!messageListeners.contains(messageListener))     messageListeners.add(messageListener);  }}  }
class C{  private static byte[][] rotateArray(byte[][] bitarray){  byte[][] temp=new byte[bitarray[0].length][bitarray.length];  for (int ii=0; ii < bitarray.length; ii++) {    int inverseii=bitarray.length - ii - 1;    for (int jj=0; jj < bitarray[0].length; jj++) {      temp[jj][inverseii]=bitarray[ii][jj];    }  }  return temp;}  }
class C{  public static YouTubeExtractor create(){  return new YouTubeExtractor();}  }
class C{  protected String leafString() throws Exception {  double sum=0, maxCount=0;  int maxIndex=0;  double classMean=0;  double avgError=0;  if (m_ClassDistribution != null) {    if (m_Info.classAttribute().isNominal()) {      sum=Utils.sum(m_ClassDistribution);      maxIndex=Utils.maxIndex(m_ClassDistribution);      maxCount=m_ClassDistribution[maxIndex];    } else {      classMean=m_ClassDistribution[0];      if (m_Distribution[1] > 0) {        avgError=m_Distribution[0] / m_Distribution[1];      }    }  }  if (m_Info.classAttribute().isNumeric()) {    return " : " + Utils.doubleToString(classMean,2) + " ("+ Utils.doubleToString(m_Distribution[1],2)+ "/"+ Utils.doubleToString(avgError,2)+ ")";  }  return " : " + m_Info.classAttribute().value(maxIndex) + " ("+ Utils.doubleToString(sum,2)+ "/"+ Utils.doubleToString(sum - maxCount,2)+ ")";}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int earliestNode=DTM.NULL;  if (null != m_iterators) {    int n=m_iterators.length;    int iteratorUsed=-1;    for (int i=0; i < n; i++) {      int node=m_iterators[i].getCurrentNode();      if (DTM.NULL == node)       continue; else       if (DTM.NULL == earliestNode) {        iteratorUsed=i;        earliestNode=node;      } else {        if (node == earliestNode) {          m_iterators[i].nextNode();        } else {          DTM dtm=getDTM(node);          if (dtm.isNodeAfter(node,earliestNode)) {            iteratorUsed=i;            earliestNode=node;          }        }      }    }    if (DTM.NULL != earliestNode) {      m_iterators[iteratorUsed].nextNode();      incrementCurrentPos();    } else     m_foundLast=true;  }  m_lastFetched=earliestNode;  return earliestNode;}  }
class C{  public CountingOutputStream(OutputStream out){  super(checkNotNull(out));}  }
class C{  private ScriptEngine newScriptEngine(String name) throws ScriptException {  ScriptEngineManager manager=new ScriptEngineManager();  ScriptEngine engine=manager.getEngineByName(name);  if (engine == null) {    throw new ScriptException("no scripting engine for " + name);  }  return engine;}  }
class C{  private boolean attributesMatch(Attribute attribute1,Attribute attribute2){  boolean baseObjectMatches=(attribute1.getBaseObject() == attribute2.getBaseObject());  boolean methodNameMatches=(attribute1.getMethodName().equalsIgnoreCase(attribute2.getMethodName()));  boolean typeMatches=(attribute1.getDataType() == attribute2.getDataType());  boolean argTypesMatch=Arrays.deepEquals(attribute1.getArgumentDataTypes(),attribute2.getArgumentDataTypes());  boolean argValuesMatch=Arrays.deepEquals(attribute1.getArgumentValues(),attribute2.getArgumentValues());  return (baseObjectMatches && methodNameMatches && typeMatches&& argValuesMatch&& argTypesMatch);}  }
class C{  public void paintInternalFrameBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private void createCache(Properties props) throws Exception {  DistributedSystem ds=getSystem(props);  assertNotNull(ds);  ds.disconnect();  ds=getSystem(props);  cache=CacheFactory.create(ds);  assertNotNull(cache);}  }
class C{  int readInt() throws IOException {  mDexFile.readFully(tmpBuf,0,4);  if (isBigEndian) {    return (tmpBuf[3] & 0xff) | ((tmpBuf[2] & 0xff) << 8) | ((tmpBuf[1] & 0xff) << 16)| ((tmpBuf[0] & 0xff) << 24);  } else {    return (tmpBuf[0] & 0xff) | ((tmpBuf[1] & 0xff) << 8) | ((tmpBuf[2] & 0xff) << 16)| ((tmpBuf[3] & 0xff) << 24);  }}  }
class C{  private View fillDown(int pos,int nextTop){  int end=getBottom() - getTop() - mListPadding.bottom;  while (nextTop < end && pos < mItemCount) {    makeAndAddView(pos,getItemTop(pos),true,false);    pos++;    nextTop=getFillChildBottom() + mDividerHeight;  }  return null;}  }
class C{  private void heapifyDown(int cur){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    int best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best > twoheap[right]) {      bestchild=right;      best=twoheap[right];    }    if (cur <= best) {      break;    }    twoheap[twopos]=best;    twopos=bestchild;  }  twoheap[twopos]=cur;}  }
class C{  public static Certificate[] verifySignature(InputStream signature,InputStream signatureBlock,boolean chainCheck) throws IOException, GeneralSecurityException {  BerInputStream bis=new BerInputStream(signatureBlock);  ContentInfo info=(ContentInfo)ContentInfo.ASN1.decode(bis);  SignedData signedData=info.getSignedData();  if (signedData == null) {    throw new IOException("No SignedData found");  }  Collection<android.framework.org.apache.harmony.security_custom.x509.Certificate> encCerts=signedData.getCertificates();  if (encCerts.isEmpty()) {    return null;  }  X509Certificate[] certs=new X509Certificate[encCerts.size()];  int i=0;  for (  android.framework.org.apache.harmony.security_custom.x509.Certificate encCert : encCerts) {    certs[i++]=new X509CertImpl(encCert);  }  List<SignerInfo> sigInfos=signedData.getSignerInfos();  SignerInfo sigInfo;  if (!sigInfos.isEmpty()) {    sigInfo=sigInfos.get(0);  } else {    return null;  }  X500Principal issuer=sigInfo.getIssuer();  BigInteger snum=sigInfo.getSerialNumber();  int issuerSertIndex=0;  for (i=0; i < certs.length; i++) {    if (issuer.equals(certs[i].getIssuerDN()) && snum.equals(certs[i].getSerialNumber())) {      issuerSertIndex=i;      break;    }  }  if (i == certs.length) {    return null;  }  if (certs[issuerSertIndex].hasUnsupportedCriticalExtension()) {    throw new SecurityException("Can not recognize a critical extension");  }  Signature sig=null;  String da=sigInfo.getDigestAlgorithm();  String dea=sigInfo.getDigestEncryptionAlgorithm();  String alg=null;  if (da != null && dea != null) {    alg=da + "with" + dea;    try {      sig=Signature.getInstance(alg,OPEN_SSL_PROVIDER_NAME);    } catch (    NoSuchAlgorithmException e) {    }  }  if (sig == null) {    alg=da;    if (alg == null) {      return null;    }    try {      sig=Signature.getInstance(alg,OPEN_SSL_PROVIDER_NAME);    } catch (    NoSuchAlgorithmException e) {      return null;    }  }  sig.initVerify(certs[issuerSertIndex]);  List<AttributeTypeAndValue> atr=sigInfo.getAuthenticatedAttributes();  byte[] sfBytes=new byte[signature.available()];  signature.read(sfBytes);  if (atr == null) {    sig.update(sfBytes);  } else {    sig.update(sigInfo.getEncodedAuthenticatedAttributes());    byte[] existingDigest=null;    for (    AttributeTypeAndValue a : atr) {      if (Arrays.equals(a.getType().getOid(),MESSAGE_DIGEST_OID)) {      }    }    if (existingDigest != null) {      MessageDigest md=MessageDigest.getInstance(sigInfo.getDigestAlgorithm());      byte[] computedDigest=md.digest(sfBytes);      if (!Arrays.equals(existingDigest,computedDigest)) {        throw new SecurityException("Incorrect MD");      }    }  }  if (!sig.verify(sigInfo.getEncryptedDigest())) {    throw new SecurityException("Incorrect signature");  }  return createChain(certs[issuerSertIndex],certs,chainCheck);}  }
class C{  public long toMinutes(){  return timeUnit.toMinutes(length);}  }
class C{  private void collectToCustomCollector(){  Supplier<StringBuilder> supplier=null;  BiConsumer<StringBuilder,Trade> accumulator=null;  BiConsumer<StringBuilder,StringBuilder> combiner=null;  StringBuilder results=trades.stream().collect(supplier,accumulator,combiner);  System.out.println(results);}  }
class C{  private void subscribe(){  String topic=((EditText)connectionDetails.findViewById(R.id.topic)).getText().toString();  ((EditText)connectionDetails.findViewById(R.id.topic)).getText().clear();  RadioGroup radio=(RadioGroup)connectionDetails.findViewById(R.id.qosSubRadio);  int checked=radio.getCheckedRadioButtonId();  int qos=ActivityConstants.defaultQos;switch (checked) {case R.id.qos0:    qos=0;  break;case R.id.qos1:qos=1;break;case R.id.qos2:qos=2;break;}try {String[] topics=new String[1];topics[0]=topic;Connections.getInstance(context).getConnection(clientHandle).getClient().subscribe(topic,qos,null,new ActionListener(context,Action.SUBSCRIBE,clientHandle,topics));} catch (MqttSecurityException e) {Log.e(this.getClass().getCanonicalName(),"Failed to subscribe to" + topic + " the client with the handle "+ clientHandle,e);}catch (MqttException e) {Log.e(this.getClass().getCanonicalName(),"Failed to subscribe to" + topic + " the client with the handle "+ clientHandle,e);}}  }
class C{  private void logRuntimeStatistics(){  String name=runtimeMXBean.getName();  long uptime=runtimeMXBean.getUptime();  String vmName=runtimeMXBean.getVmName();  String vmVendor=runtimeMXBean.getVmVendor();  StringBuilder sb=new StringBuilder();  sb.append("VM: ");  sb.append(vmName);  sb.append(" (");  sb.append(vmVendor);  sb.append(") process: ");  sb.append(name);  sb.append(" uptime: ");  sb.append(uptime);  sb.append(" ms");  log.info(sb.toString());}  }
class C{  public SVGDocument createSVGDocument(String uri,InputStream inp) throws IOException {  return (SVGDocument)createDocument(uri,inp);}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator){  float density;  if (keys.length == 0) {    density=0;  } else {    density=(float)keys.length / (keys[keys.length - 1] - keys[0] + 1);  }  tableSwitch(keys,generator,density >= 0.5f);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public PasswordValidatorScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  public void activateAllLights(){  for (int i=0; i < nMgrs(); i++) {    ((LightManager)getMgr(i)).activateAllLights();  }}  }
class C{  private void updateStateViewLater(NQueensBoard board,Metrics metrics){  stateViewCtrl.update(board);  simPaneCtrl.setStatus(metrics.toString());}  }
class C{  public void removeScanningCallback(OneSheeldScanningCallback scanningCallback){  if (scanningCallback != null && scanningCallbacks.contains(scanningCallback))   scanningCallbacks.remove(scanningCallback);}  }
class C{  protected Type parseArrayBrackets(Type t) throws SyntaxError, IOException {  while (token == LSQBRACKET) {    scan();    if (token != RSQBRACKET) {      env.error(pos,"array.dim.in.decl");      parseExpression();    }    expect(RSQBRACKET);    t=Type.tArray(t);  }  return t;}  }
class C{  private void compare() throws jplag.ExitException {  int size=submissions.size();  SortedVector<AllMatches> avgmatches, maxmatches;  int[] dist=new int[10];  avgmatches=new SortedVector<AllMatches>(new AllMatches.AvgComparator());  maxmatches=new SortedVector<AllMatches>(new AllMatches.MaxComparator());  long msec;  AllBasecodeMatches bcmatch;  Submission s1, s2;  options.setState(Options.COMPARING);  options.setProgress(0);  if (this.options.useBasecode) {    int countBC=0;    msec=System.currentTimeMillis();    for (int i=0; i < (size); i++) {      s1=submissions.elementAt(i);      bcmatch=this.gSTiling.compareWithBasecode(s1,basecodeSubmission);      htBasecodeMatches.put(s1.name,bcmatch);      this.gSTiling.resetBaseSubmission(basecodeSubmission);      countBC++;      options.setProgress(countBC * 100 / size);    }    long timebc=System.currentTimeMillis() - msec;    print("\n\n","\nTime for comparing with Basecode: " + ((timebc / 3600000 > 0) ? (timebc / 3600000) + " h " : "") + ((timebc / 60000 > 0) ? ((timebc / 60000) % 60000) + " min " : "")+ (timebc / 1000 % 60)+ " sec\n"+ "Time per basecode comparison: "+ (timebc / size)+ " msec\n\n");  }  int totalcomps=(size - 1) * size / 2;  int i, j, anz=0, count=0;  AllMatches match;  options.setProgress(0);  msec=System.currentTimeMillis();  for (i=0; i < (size - 1); i++) {    s1=submissions.elementAt(i);    if (s1.struct == null) {      count+=(size - i - 1);      continue;    }    for (j=(i + 1); j < size; j++) {      s2=submissions.elementAt(j);      if (s2.struct == null) {        count++;        continue;      }      match=this.gSTiling.compare(s1,s2);      anz++;      System.out.println("Comparing " + s1.name + "-"+ s2.name+ ": "+ match.percent());      if (options.useBasecode) {        match.bcmatchesA=htBasecodeMatches.get(match.subA.name);        match.bcmatchesB=htBasecodeMatches.get(match.subB.name);      }      registerMatch(match,dist,avgmatches,maxmatches,null,i,j);      count++;      options.setProgress(count * 100 / totalcomps);    }  }  options.setProgress(100);  long time=System.currentTimeMillis() - msec;  print("\n","Total time for comparing submissions: " + ((time / 3600000 > 0) ? (time / 3600000) + " h " : "") + ((time / 60000 > 0) ? ((time / 60000) % 60000) + " min " : "")+ (time / 1000 % 60)+ " sec\n"+ "Time per comparison: "+ (time / anz)+ " msec\n");  Cluster cluster=null;  if (options.clustering)   cluster=this.clusters.calculateClustering(submissions);  writeResults(dist,avgmatches,maxmatches,null,cluster);}  }
class C{  public static int numOnes(int x){  int totalOnes=0;  for (int i=0; i < 32; i+=1) {    int bottomBit=x & 1;    totalOnes+=bottomBit;    x=x >> 1;  }  return totalOnes;}  }
class C{  public DirectedPath(Position.PositionList positions){  super(positions.list);}  }
class C{  public void paintViewportBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void detach(){  m_currentNode=DTM.NULL;  m_dtm=null;  m_traverser=null;  m_isFresh=true;  m_root=DTM.NULL;}  }
class C{  public void run(){  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);  State state=new State(mInfo,mService);  AndroidHttpClient client=null;  PowerManager.WakeLock wakeLock=null;  int finalStatus=DownloaderService.STATUS_UNKNOWN_ERROR;  try {    PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);    wakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,Constants.TAG);    wakeLock.acquire();    if (Constants.LOGV) {      Log.v(Constants.TAG,"initiating download for " + mInfo.mFileName);      Log.v(Constants.TAG,"  at " + mInfo.mUri);    }    client=AndroidHttpClient.newInstance(userAgent(),mContext);    boolean finished=false;    while (!finished) {      if (Constants.LOGV) {        Log.v(Constants.TAG,"initiating download for " + mInfo.mFileName);        Log.v(Constants.TAG,"  at " + mInfo.mUri);      }      ConnRouteParams.setDefaultProxy(client.getParams(),getPreferredHttpHost(mContext,state.mRequestUri));      HttpGet request=new HttpGet(state.mRequestUri);      try {        executeDownload(state,client,request);        finished=true;      } catch (      RetryDownload exc) {      } finally {        request.abort();        request=null;      }    }    if (Constants.LOGV) {      Log.v(Constants.TAG,"download completed for " + mInfo.mFileName);      Log.v(Constants.TAG,"  at " + mInfo.mUri);    }    finalizeDestinationFile(state);    finalStatus=DownloaderService.STATUS_SUCCESS;  } catch (  StopRequest error) {    Log.w(Constants.TAG,"Aborting request for download " + mInfo.mFileName + ": "+ error.getMessage());    error.printStackTrace();    finalStatus=error.mFinalStatus;  }catch (  Throwable ex) {    Log.w(Constants.TAG,"Exception for " + mInfo.mFileName + ": "+ ex);    finalStatus=DownloaderService.STATUS_UNKNOWN_ERROR;  } finally {    if (wakeLock != null) {      wakeLock.release();      wakeLock=null;    }    if (client != null) {      client.close();      client=null;    }    cleanupDestination(state,finalStatus);    notifyDownloadCompleted(finalStatus,state.mCountRetry,state.mRetryAfter,state.mRedirectCount,state.mGotData,state.mFilename);  }}  }
class C{  public static boolean isNodeRecoveryEnabled(){  boolean isEnabled=false;  try {    if (!PlatformUtils.isAppliance()) {      isEnabled=true;    } else     if (!PlatformUtils.isVMwareVapp()) {      isEnabled=true;    }  } catch (  IllegalStateException ise) {    Logger.warn("Could not determine platform.");  }  return isEnabled;}  }
class C{  @Override public TFSTeamProjectCollection promptForConnection(final URI serverURI,final Credentials credentials,final String errorMessage){  Check.notNull(errorMessage,"errorMessage");  final Shell parentShell=ShellUtils.getWorkbenchShell();  final EclipseConnectErrorWizard connectWizard=new EclipseConnectErrorWizard();  connectWizard.setErrorMessage(errorMessage);  final WizardDialog connectDialog=new WizardDialog(parentShell,connectWizard);  if (UIHelpers.openOnUIThread(connectDialog) != IDialogConstants.OK_ID) {    return null;  }  if (connectWizard.hasPageData(TFSTeamProjectCollection.class)) {    return (TFSTeamProjectCollection)connectWizard.getPageData(TFSTeamProjectCollection.class);  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.567 -0500",hash_original_method="25624AE7DCD0D0ACD27C83DB1C9CEB1E",hash_generated_method="3E29CF8CFCA432C1931CBCB4734BC8CE") public void start(){  if (mSmHandler == null)   return;  mSmHandler.completeConstruction();}  }
class C{  public boolean match(ArrayType node,Object other){  if (!(other instanceof ArrayType)) {    return false;  }  ArrayType o=(ArrayType)other;  return safeSubtreeMatch(node.getComponentType(),o.getComponentType());}  }
class C{  protected void bezierTo(float control1x,float control1y,float control2x,float control2y,float endX,float endY){  mPSStream.println(trunc(control1x) + " " + trunc(control1y)+ " "+ trunc(control2x)+ " "+ trunc(control2y)+ " "+ trunc(endX)+ " "+ trunc(endY)+ CURVETO_STR);  mPenX=endX;  mPenY=endY;}  }
class C{  @Override public int hashCode(){  return value;}  }
class C{  private void pad(){  final int newOffset=((offset + 3) / 4) * 4;  while (offset < newOffset) {    buffer[offset++]=0;  }}  }
class C{  @Override public String toString(){  String result;  result=null;  if (isObject()) {    if (isRoot()) {      result="JSON";    } else     if (m_Name == null) {      result="<object>";    } else {      result=escape(m_Name) + " (Object)";    }  } else   if (isArray()) {    if (m_Name == null) {      result="<array>";    } else {      result=escape(m_Name) + " (Array)";    }  } else {    if (m_Name != null) {      result=escape(m_Name) + ": " + escape(m_Value);    } else {      result="" + m_Value;    }  }  return result;}  }
class C{  public Object clone() throws CloneNotSupportedException {  NodeSequence clone=(NodeSequence)super.clone();  if (null != m_iter)   clone.m_iter=(DTMIterator)m_iter.clone();  if (m_cache != null) {    m_cache.increaseUseCount();  }  return clone;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_2__INDEX_1:    setIndex_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void paintImage(Image image,Rectangle paintArea,RGB background){  GC gc=new GC(image);  SWTGraphics graphics=new SWTGraphics(gc);  paintFigure(graphics,paintArea,null,background);  graphics.dispose();  gc.dispose();}  }
class C{  public void write(Object obj) throws XMLStreamException {  _xml.add(obj);}  }
class C{  public static TypeReference createWithoutAssumptions(ResolvedJavaType type){  return create(null,type);}  }
class C{  public ImageReaderWriterSpi(){}  }
class C{  public JSONArray put(int index,Map value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  protected boolean isDefaultGateway(Ethernet frame){  if (macToGateway.containsKey(frame.getSourceMACAddress()))   return true;  IPv4Address gwIp=macToGateway.get(frame.getDestinationMACAddress());  if (gwIp != null) {    MacAddress host=frame.getSourceMACAddress();    String srcNet=macToGuid.get(host);    if (srcNet != null) {      IPv4Address gwIpSrcNet=guidToGateway.get(srcNet);      if ((gwIpSrcNet != null) && (gwIp.equals(gwIpSrcNet)))       return true;    }  }  return false;}  }
class C{  private static int compareStrings(String... values){  if ((values.length % 2) != 0) {    throw new IllegalArgumentException("you must specify an even number of values");  }  for (int index=0; index < values.length; index+=2) {    if (values[index] == null) {      if (values[index + 1] == null)       continue;      return -1;    }    if (values[index + 1] == null) {      return 1;    }    int comp=values[index].compareTo(values[index + 1]);    if (comp != 0) {      return comp < 0 ? -1 : 1;    }  }  return 0;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public boolean exists(Value keyValue){  Key subKey=makeSubKey(keyValue);  return client.exists(this.policy,subKey);}  }
class C{  public boolean canPace(){  return false;}  }
class C{  private String queryCachedNetworkVip(){  String networkVipToReturn=null;  if (_cachedNetworkVip == null) {    _log.debug("No cached value found for network_vip property");    PropertyInfo props=null;    try {      props=_coordinator.getPropertyInfo();    } catch (    Exception e) {      _log.error("Could not query for network_vip property",e);      return null;    }    if (props == null) {      _log.error("Query for network_vip property returned null");      return null;    }    networkVipToReturn=props.getProperty(OVF_NETWORK_VIP);synchronized (this) {      _cachedNetworkVip=networkVipToReturn;    }    if (networkVipToReturn == null || networkVipToReturn.equals("")) {      _log.debug("Cluster endpoint value is not supplied");      return null;    }  } else {    _log.debug("Cached value found for network_vip.  Reusing {}",_cachedNetworkVip);    networkVipToReturn=_cachedNetworkVip;  }  return networkVipToReturn;}  }
class C{  private static void checkEquals(double expected,double actual,String label){  if (expected == actual) {    System.out.println("PASS: " + label + ": Expected "+ expected+ " and you gave "+ actual);  } else {    System.out.println("FAIL: " + label + ": Expected "+ expected+ " and you gave "+ actual);  }}  }
class C{  private void tuneSplitter(SplitLayoutPanel splitLayoutPanel){  NodeList<Node> nodes=splitLayoutPanel.getElement().getChildNodes();  for (int i=0; i < nodes.getLength(); i++) {    Node node=nodes.getItem(i);    if (node.hasChildNodes()) {      Element el=node.getFirstChild().cast();      String className=el.getClassName();      if (HORIZONTAL_DRAGGER_CLASS.equals(className)) {        tuneVerticalSplitter(el);      } else       if (VERTICAL_DRAGGER_CLASS.equals(className)) {        tuneHorizontalSplitter(el);      }    }  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case OrientedPackage.COMPONENT__INPUT_COMPONET_REFS:    return ((InternalEList<?>)getInputComponetRefs()).basicRemove(otherEnd,msgs);case OrientedPackage.COMPONENT__OUTPUT_COMPONET_REFS:  return ((InternalEList<?>)getOutputComponetRefs()).basicRemove(otherEnd,msgs);case OrientedPackage.COMPONENT__INPUT_PORT_REFS:return ((InternalEList<?>)getInputPortRefs()).basicRemove(otherEnd,msgs);case OrientedPackage.COMPONENT__OUTPUT_PORT_REFS:return ((InternalEList<?>)getOutputPortRefs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean hasCode(){  return fieldSetFlags()[0];}  }
class C{  public IdentifiableElement basicGetProperty(){  return property;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public int write(OutputStreamWithBuffer os,char[] cbuf,int off,int len) throws IOException {  for (int i=0; i < len; i++) {    char ch=cbuf[off + i];    os.write(ch >> 8);    os.write(ch);  }  return len;}  }
class C{  public static boolean isHdrPlusOn(SettingsManager settingsManager){  return settingsManager.getBoolean(SettingsManager.SCOPE_GLOBAL,KEY_CAMERA_HDR_PLUS);}  }
class C{  public static void UF4(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  double hj;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    hj=Math.abs(yj) / (1.0 + Math.exp(2.0 * Math.abs(yj)));    if (j % 2 == 0) {      sum2+=hj;      count2++;    } else {      sum1+=hj;      count1++;    }  }  f[0]=x[0] + 2.0 * sum1 / (double)count1;  f[1]=1.0 - x[0] * x[0] + 2.0 * sum2 / (double)count2;}  }
class C{  @Deprecated public AppPermissions(){}  }
class C{  public void init(){  Debug.message("eomg","EditableOMScalingRaster.init()");  setCanGrabGraphic(false);  setStateMachine(new ScalingRasterStateMachine(this));  gPoints=new GrabPoint[6];}  }
class C{  public IndexTreePath(IndexTreePath<E> parent,E entry,int index){  if (entry == null) {    throw new IllegalArgumentException("entry in TreePath must be non null.");  }  this.entry=entry;  this.index=index;  this.parentPath=parent;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public void addRowGroupLinkedTo(final String propertyKey,final PWRowGroup rowGroup){  if (!this.values.containsKey(propertyKey)) {    this.values.put(propertyKey,new ValueAndAssociatedWidgets(null));  }  this.values.get(propertyKey).addRowGroup(rowGroup);}  }
class C{  @Override public void handleStart(Operation start){  ServiceUtils.logInfo(this,"Starting service");  State startState=start.getBody(State.class);  InitializationUtils.initialize(startState);  if (null == startState.taskPollDelay) {    startState.taskPollDelay=HostUtils.getDeployerContext(this).getTaskPollDelay();  }  validateStartState(startState);  if (TaskState.TaskStage.CREATED == startState.taskState.stage) {    startState.taskState.stage=TaskState.TaskStage.STARTED;  }  if (startState.documentExpirationTimeMicros <= 0) {    startState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  start.setBody(startState).complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      sendStageProgressPatch(startState.taskState.stage);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public synchronized OMGraphicList prepare(){  if (lst == null) {    try {      initLST();    } catch (    IllegalArgumentException iae) {      logger.warning("VPFLayer.prepare: Illegal Argument Exception.\n\nPerhaps a file not found.  Check to make sure that the paths to the VPF data directories are the parents of \"lat\" or \"lat.\" files. \n\n" + iae);      return null;    }    if (lst == null) {      if (logger.isLoggable(Level.FINE)) {        logger.fine("VPFLayer| " + getName() + " prepare(), Library Selection Table not set.");      }      return null;    }  }  if (warehouse == null) {    StringBuffer dpb=new StringBuffer();    if (dataPaths != null) {      for (int num=0; num < dataPaths.length; num++) {        if (num > 0) {          dpb.append(":");        }        dpb.append(dataPaths[num]);      }    }    logger.warning("VPFLayer.getRectangle:  Data path probably wasn't set correctly (" + dpb.toString() + ").  The warehouse not initialized.");    return null;  }  Projection p=getProjection();  if (p == null || !(p instanceof GeoProj)) {    if (logger.isLoggable(Level.FINE)) {      logger.fine("VPFLayer.getRectangle() called with a projection (" + p + ") set in the layer, which isn't being handled.");    }    return new OMGraphicList();  }  LatLonPoint upperleft=(LatLonPoint)p.getUpperLeft();  LatLonPoint lowerright=(LatLonPoint)p.getLowerRight();  if (logger.isLoggable(Level.FINER)) {    logger.finer("VPFLayer.getRectangle: " + coverageType);  }  warehouse.clear();  if (logger.isLoggable(Level.FINE)) {    logger.fine("calling draw with boundaries: " + upperleft + " "+ lowerright);  }  long start=System.currentTimeMillis();  StringTokenizer t=new StringTokenizer(coverageType);  while (t.hasMoreTokens()) {    String currentCoverage=t.nextToken();    if (searchByFeatures) {      lst.drawFeatures((int)p.getScale(),p.getWidth(),p.getHeight(),currentCoverage,(VPFFeatureWarehouse)warehouse,upperleft,lowerright);    } else {      lst.drawTile((int)p.getScale(),p.getWidth(),p.getHeight(),currentCoverage,warehouse,upperleft,lowerright);    }  }  long stop=System.currentTimeMillis();  if (logger.isLoggable(Level.FINE)) {    logger.fine("read time: " + ((stop - start) / 1000d) + " seconds");  }  OMGraphicList omglist=warehouse.getGraphics();  start=System.currentTimeMillis();  omglist.project(p);  stop=System.currentTimeMillis();  if (logger.isLoggable(Level.FINE)) {    logger.fine("proj time: " + ((stop - start) / 1000d) + " seconds");  }  return omglist;}  }
class C{  public static Timestamp addForward(GenericValue techDataCalendar,Timestamp dateFrom,long amount){  Timestamp dateTo=(Timestamp)dateFrom.clone();  long nextCapacity=capacityRemaining(techDataCalendar,dateFrom);  if (amount <= nextCapacity) {    dateTo.setTime(dateTo.getTime() + amount);    amount=0;  } else   amount-=nextCapacity;  Map<String,Object> result=FastMap.newInstance();  while (amount > 0) {    result=startNextDay(techDataCalendar,dateTo);    dateTo=(Timestamp)result.get("dateTo");    nextCapacity=((Double)result.get("nextCapacity")).longValue();    if (amount <= nextCapacity) {      dateTo.setTime(dateTo.getTime() + amount);      amount=0;    } else     amount-=nextCapacity;  }  return dateTo;}  }
class C{  @Override public Slice toByteArray(byte[] object){  return new Slice(object,0,object.length);}  }
class C{  void allocateQuantity(final CustomerOrderDelivery orderDelivery) throws OrderItemAllocationException {  final Collection<CustomerOrderDeliveryDet> deliveryDetails=orderDelivery.getDetail();  final List<Warehouse> warehouses=warehouseService.getByShopId(orderDelivery.getCustomerOrder().getShop().getShopId(),false);  for (  CustomerOrderDeliveryDet det : deliveryDetails) {    String skuCode=det.getProductSkuCode();    BigDecimal toAllocate=det.getQty();    for (    Warehouse warehouse : warehouses) {      BigDecimal toAllocateInitial=toAllocate;      toAllocate=skuWarehouseService.debit(warehouse,skuCode,toAllocate);      if (MoneyUtils.isFirstBiggerThanSecond(toAllocateInitial,toAllocate)) {        skuWarehouseService.voidReservation(warehouse,skuCode,toAllocateInitial.subtract(toAllocate));      }      if (MoneyUtils.isFirstEqualToSecond(toAllocate,BigDecimal.ZERO,Constants.DEFAULT_SCALE)) {        break;      }    }    if (MoneyUtils.isFirstBiggerThanSecond(toAllocate,BigDecimal.ZERO)) {      final Product product=productService.getProductBySkuCode(det.getProductSkuCode());      if (product == null || Product.AVAILABILITY_STANDARD == product.getAvailability()) {        throw new OrderItemAllocationException(skuCode,toAllocate,"ProcessAllocationOrderEventHandlerImpl. Can not allocate total qty = " + det.getQty() + " for sku = "+ skuCode+ " in delivery "+ orderDelivery.getDeliveryNum());      }    }  }  orderDelivery.setDeliveryStatus(CustomerOrderDelivery.DELIVERY_STATUS_INVENTORY_ALLOCATED);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:58.921 -0500",hash_original_method="61C041CED79E728E684417F700AE9F1B",hash_generated_method="DE4CAF8E51A5F2419171F98B28019BB8") public final CRL generateCRL(InputStream inStream) throws CRLException {  return spiImpl.engineGenerateCRL(inStream);}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  if (resultCode == RESULT_OK && requestCode == SELECT_PICTURE) {    mSourceUri=data.getData();    startLoadBitmap(mSourceUri);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.787 -0500",hash_original_method="06B3F44E32866DFBBA409CE7EBE78C90",hash_generated_method="69140569706508A2D71FA6D606AC28D8") public static Bitmap createBitmap(Bitmap src){  return createBitmap(src,0,0,src.getWidth(),src.getHeight());}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  @HLELogging(level="info") @HLEFunction(nid=0xAB1ABE07,version=150,checkInsideInterrupt=true) public int sceHttpInit(int heapSize){  if (isHttpInit) {    return SceKernelErrors.ERROR_HTTP_ALREADY_INIT;  }  maxMemSize=heapSize;  isHttpInit=true;  memInfo=null;  Utilities.disableSslCertificateChecks();  return 0;}  }
class C{  protected void processMouseMotionEvent(MouseEvent e){  boolean dispatch=true;  if (autoscrolls && e.getID() == MouseEvent.MOUSE_DRAGGED) {    dispatch=!Autoscroller.isRunning(this);    Autoscroller.processMouseDragged(e);  }  if (dispatch) {    super.processMouseMotionEvent(e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();{    boolean success=false;    try {      splitNode=textNode.splitText(-69);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  private void geo(String text){  List<Address> addresses=geoDecode(text);  if (addresses != null) {    if (addresses.size() > 1) {      XmppMsg addr=new XmppMsg(getString(R.string.chat_specify_details));      addr.newLine();      for (      Address address : addresses) {        for (int i=0; i < address.getMaxAddressLineIndex(); i++) {          addr.appendLine(address.getAddressLine(i));        }      }      send(addr);    } else     if (addresses.size() == 1) {      launchExternal(addresses.get(0).getLatitude() + "," + addresses.get(0).getLongitude());    }  } else {    send(R.string.chat_no_match_for,text);  }}  }
class C{  @SuppressWarnings("unused") private final TLCStateInfo[] printPrefix(long fp) throws IOException {  this.raf.seek(0);  this.raf.readLongNat();  while (this.raf.readLong() != fp) {    this.raf.readLongNat();  }  TLCState lastState=null;  TLCStateInfo[] prefix=this.getTrace(this.lastPtr,false);  int idx=0;  while (idx < prefix.length) {    StatePrinter.printState(prefix[idx],lastState,idx + 1);    lastState=prefix[idx].state;    idx++;  }  return prefix;}  }
class C{  public Chunk3D(Entity entity){  xCoord=((int)entity.posX) >> 4;  zCoord=((int)entity.posZ) >> 4;  dimensionId=entity.dimension;}  }
class C{  private List<Match> checkMatches(final String[] programArgs,final ArgumentValues values) throws UsageException {  final List<Match> result=new ArrayList<Match>();  Match match;  String[] params;  String[] postArgs;  int idx=0;  int idx2;  while (idx < programArgs.length) {    if ("--".equals(programArgs[idx])) {      if (++idx < programArgs.length) {        postArgs=new String[programArgs.length - idx];        System.arraycopy(programArgs,idx,postArgs,0,postArgs.length);        values.setPostArgs(postArgs);      }      break;    }    idx2=idx;    while ((idx2 + 1) < programArgs.length && programArgs[idx2 + 1].charAt(0) != '-') {      idx2++;    }    params=new String[idx2 - idx];    System.arraycopy(programArgs,idx + 1,params,0,params.length);    LOG.fine("Arg: " + programArgs[idx]);    LOG.fine("Params: " + params.length);    match=null;    for (    Argument arg : args) {      match=checkMatch(programArgs[idx],arg,params);      if (match != null) {        result.add(match);        LOG.fine("Match found: ");        LOG.fine("     ID: " + arg);        LOG.fine("   Form: " + match.getForm());        break;      }    }    if (match == null) {      if (handler == null) {        final UsageException usageException=new UsageException("Unknown argument: " + programArgs[idx] + " with "+ params.length+ " parameters.");        usageException.setUsage(getUsage());        throw (usageException);      } else {        handler.handleUnknownArgument(programArgs[idx],params);      }    }    idx+=params.length + 1;  }  return result;}  }
class C{  public static final String decode(String s) throws MalformedURLException {  try {    return decode(s,"8859_1");  } catch (  UnsupportedEncodingException e) {    throw new MalformedURLException("ISO-Latin-1 decoder unavailable");  }}  }
class C{  public List resolveAbstractDispatch(List classes,SootMethod m){  m.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  ArraySet s=new ArraySet();  Iterator classesIt=classes.iterator();  while (classesIt.hasNext())   s.addAll(resolveAbstractDispatch((SootClass)classesIt.next(),m));  List l=new ArrayList();  l.addAll(s);  return Collections.unmodifiableList(l);}  }
class C{  public static List<HostAddress> parse(String spec,HaMode haMode){  if (spec == null) {    throw new IllegalArgumentException("Invalid connection URL, host address must not be empty ");  }  if ("".equals(spec)) {    return new ArrayList<>(0);  }  String[] tokens=spec.trim().split(",");  List<HostAddress> arr=new ArrayList<>(tokens.length);  if (haMode == HaMode.AURORA) {    Pattern clusterPattern=Pattern.compile("(.+)\\.cluster-([a-z0-9]+\\.[a-z0-9\\-]+\\.rds\\.amazonaws\\.com)");    Matcher matcher=clusterPattern.matcher(spec);    if (!matcher.find()) {      logger.warn("Aurora recommended connection URL must only use cluster end-point like " + "\"jdbc:mariadb://xx.cluster-yy.zz.rds.amazonaws.com\". " + "Using end-point permit auto-discovery of new replicas");    }  }  for (  String token : tokens) {    if (token.startsWith("address=")) {      arr.add(parseParameterHostAddress(token));    } else {      arr.add(parseSimpleHostAddress(token));    }  }  int defaultPort=arr.get(arr.size() - 1).port;  if (defaultPort == 0) {    defaultPort=3306;  }  for (int i=0; i < arr.size(); i++) {    if (haMode == HaMode.REPLICATION) {      if (i == 0 && arr.get(i).type == null) {        arr.get(i).type=ParameterConstant.TYPE_MASTER;      } else       if (i != 0 && arr.get(i).type == null) {        arr.get(i).type=ParameterConstant.TYPE_SLAVE;      }    }    if (arr.get(i).port == 0) {      arr.get(i).port=defaultPort;    }  }  return arr;}  }
class C{  private static void close(final Closeable resource){  IOUtils.closeQuietly(resource);}  }
class C{  public Coordinate[] snapTo(Coordinate[] snapPts){  CoordinateList coordList=new CoordinateList(srcPts);  snapVertices(coordList,snapPts);  snapSegments(coordList,snapPts);  Coordinate[] newPts=coordList.toCoordinateArray();  return newPts;}  }
class C{  public Complex multiply(Complex c){  Complex ret=new Complex(real,imag);  ret.mutableMultiply(c);  return ret;}  }
class C{  public ResourceList<Tenant> listByName(String name) throws IOException {  String path=getBasePath();  if (name != null) {    path+="?name=" + name;  }  ResourceList<Tenant> tenantResourceList=new ResourceList<>();  ResourceList<Tenant> resourceList=getTenantResourceList(path);  tenantResourceList.setItems(resourceList.getItems());  while (resourceList.getNextPageLink() != null && !resourceList.getNextPageLink().isEmpty()) {    resourceList=getTenantResourceList(resourceList.getNextPageLink());    tenantResourceList.getItems().addAll(resourceList.getItems());  }  return tenantResourceList;}  }
class C{  public void testSinglePolygonHolesRoundTrip() throws SQLException {  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberPoints(10);  pg.setNumberHoles(4);  Polygon pt=(Polygon)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  Polygon pt2=(Polygon)or.read(st);  assertTrue("The input polygon is not the same as the output polygon",pt.equals(pt2));}  }
class C{  static byte[] discardNonBase64(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {    if (isBase64(data[i])) {      groomedData[bytesCopied++]=data[i];    }  }  byte packedData[]=new byte[bytesCopied];  System.arraycopy(groomedData,0,packedData,0,bytesCopied);  return packedData;}  }
class C{  public void tryVibrate(){  if (mVibrator != null && mIsGloballyEnabled) {    long now=SystemClock.uptimeMillis();    if (now - mLastVibrate >= VIBRATE_DELAY_MS) {      mVibrator.vibrate(VIBRATE_LENGTH_MS);      mLastVibrate=now;    }  }}  }
class C{  @Override protected JavaType _narrow(Class<?> subclass){  if (!subclass.isArray()) {    throw new IllegalArgumentException("Incompatible narrowing operation: trying to narrow " + toString() + " to class "+ subclass.getName());  }  Class<?> newCompClass=subclass.getComponentType();  JavaType newCompType=TypeFactory.defaultInstance().constructType(newCompClass);  return construct(newCompType,_valueHandler,_typeHandler);}  }
class C{  public static String unescape(String input){  boolean insidequote=false;  boolean escapeNext=false;  String output="";  for (int i=0; i < input.length(); i++) {    char current=input.charAt(i);    if (current == '\'') {      insidequote=!insidequote;      output+=current;    } else     if (insidequote) {      if (current == '\\') {        escapeNext=true;      } else       if (escapeNext) {        if (current == 's') {          output+=' ';        } else         if (current == 't') {          output+='\t';        } else         if (current == 'c') {          output+=',';        } else         if (current == 'b') {          output+='\\';        } else         if (current == 'p') {          output+=';';        } else         if (current == 'd') {          output+=':';        }        escapeNext=false;      } else {        output+=current;      }    } else {      output+=current;    }  }  return output;}  }
class C{  public static boolean isSorted(short[] array){  if (array == null || array.length < 2) {    return true;  }  short previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final short current=array[i];    if (new Short(previous).compareTo(current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  public SAXWorker(long id,double[] data,int intervalStart,int intervalEnd,int windowSize,int paaSize,int alphabetSize,NumerosityReductionStrategy nrs,double normalizationThreshold){  super();  this.id=id;  this.ts=data;  this.intervalStart=intervalStart;  this.intervalEnd=intervalEnd;  this.saxWindowSize=windowSize;  this.saxPAASize=paaSize;  this.saxAlphabetSize=alphabetSize;  this.numerosityReductionStrategy=nrs;  this.normalizationThreshold=normalizationThreshold;  LOGGER.debug("sax worker instance id {}, data {}, window {}, paa  {}, alphabet {}, nr {}, threshold: {}, start: {}, end: {}",this.id,this.ts.length,this.saxWindowSize,this.saxPAASize,this.saxAlphabetSize,this.numerosityReductionStrategy,normalizationThreshold,this.intervalStart,this.intervalEnd);}  }
class C{  public boolean hasBindings(){  return bindingsOnly(getEntries().iterator()).hasNext() || super.hasBindings();}  }
class C{  private boolean isBranchOrHasBranchAncestor(TFSItem item){  Check.notNull(item,"item");  while (item != null) {    if (item.getExtendedItem() != null && item.getExtendedItem().isBranch()) {      return true;    }    final String parentPath=item.getParentFullPath();    if (parentPath == null) {      item=null;    } else {      item=TFSItemFactory.getItemAtPath(getRepository(),item.getParentFullPath());    }  }  return false;}  }
class C{  public TableBuilder addColumn(ColumnBuilder column){  if (_escapeIdentifiers) {    column.escapeName();  }  _columns.add(column);  return this;}  }
class C{  private static void print(String s){  System.out.print(s);}  }
class C{  public void writeFrame(byte[] frame,long timeStamp) throws IOException {  mOutputStream.write(makeIvfFrameHeader(frame.length,timeStamp));  mOutputStream.write(frame);  mFrameCount++;}  }
class C{  @Bean public AsyncExecutor activitiAsyncExecutor(TaskExecutor activitiTaskExecutor,SpringRejectedJobsHandler springRejectedJobsHandler){  SpringAsyncExecutor activitiAsyncExecutor=new SpringAsyncExecutor(activitiTaskExecutor,springRejectedJobsHandler);  activitiAsyncExecutor.setAsyncJobLockTimeInMillis(configurationHelper.getProperty(ConfigurationValue.ACTIVITI_ASYNC_JOB_LOCK_TIME_MILLIS,Integer.class));  return activitiAsyncExecutor;}  }
class C{  public static <T>Flux<T> retainAll(Flux<T> flux,Iterable<? extends T> iterable){  return Flux.fromIterable(null);}  }
class C{  public boolean mustHaltBeforeCommunicating(){  return haltBeforeCommunicating;}  }
class C{  public void sendTestMessage(Z21Reply m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyReply(m,null);  return;}  }
class C{  public int hashCode(){  return getStringValue().hashCode();}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECOMMEND_ENTITY\"";  db.execSQL(sql);}  }
class C{  public JunitFileWriter(String junitDirName,String packageName,String masterTestClassName){  this.dirName=junitDirName;  this.packageName=packageName;  this.masterTestClassName=masterTestClassName;}  }
class C{  public boolean isOnline(){  return online;}  }
class C{  public UrlValidator(String[] schemes){  this(schemes,0L);}  }
class C{  public String scheme(){  return scheme;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static void unescapeHtml(Writer writer,String string) throws IOException {  if (writer == null) {    throw new IllegalArgumentException("The Writer must not be null.");  }  if (string == null) {    return;  }  EntitiesUtils.HTML40.unescape(writer,string);}  }
class C{  private String c(String str){  return str + count;}  }
class C{  public void crossValidateModel(Classifier classifier,Instances data,int numFolds,Random random,Object... forPredictionsPrinting) throws Exception {  m_delegate.crossValidateModel(classifier,data,numFolds,random,forPredictionsPrinting);}  }
class C{  public ExtractData(){  super();}  }
class C{  public void removeCache(String uri,int maxWidth,int maxHeight){  mImageLoader.removeCache(uri,maxWidth,maxHeight);}  }
class C{  public static void init(){  URL rulesResource=XMLImporter.class.getResource("/com/rapidminer/resources/parserules.xml");  if (rulesResource != null) {    importParseRules(rulesResource,null);  } else {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.io.process.XMLImporter.cannot_find_default_parse_rules");  }}  }
class C{  private void correctErrors(int[] codewords,int[] erasures,int numECCodewords) throws ChecksumException {  if (erasures.length > numECCodewords / 2 + MAX_ERRORS || numECCodewords < 0 || numECCodewords > MAX_EC_CODEWORDS) {    throw ChecksumException.getChecksumInstance();  }  errorCorrection.decode(codewords,numECCodewords,erasures);}  }
class C{  private static int orientationIndexFilter(Coordinate pa,Coordinate pb,Coordinate pc){  double detsum;  double detleft=(pa.x - pc.x) * (pb.y - pc.y);  double detright=(pa.y - pc.y) * (pb.x - pc.x);  double det=detleft - detright;  if (detleft > 0.0) {    if (detright <= 0.0) {      return signum(det);    } else {      detsum=detleft + detright;    }  } else   if (detleft < 0.0) {    if (detright >= 0.0) {      return signum(det);    } else {      detsum=-detleft - detright;    }  } else {    return signum(det);  }  double errbound=DP_SAFE_EPSILON * detsum;  if ((det >= errbound) || (-det >= errbound)) {    return signum(det);  }  return 2;}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public static final void shuffle(Object[] a,Random r){  shuffle(a,0,a.length,r);}  }
class C{  public static void readFully(InputStream is,byte[] buf,int offset,int length) throws IOException {  final int read=readAmount(is,buf,offset,length);  if (read < length) {    throw new EOFException();  }}  }
class C{  private void updateGroupChatViewTitle(String subject){  if (!TextUtils.isEmpty(subject)) {    setTitle(getString(R.string.title_group_chat) + " '" + mSubject+ "'");  }}  }
class C{  public static <W>ArrayEncodedNgramLanguageModel<W> readLmFromGoogleNgramDir(final String dir,final boolean compress,final boolean kneserNey,final WordIndexer<W> wordIndexer,final ConfigOptions opts){  final GoogleLmReader<W> googleLmReader=new GoogleLmReader<W>(dir,wordIndexer,opts);  if (kneserNey) {    GoogleLmReader.addSpecialSymbols(wordIndexer);    KneserNeyLmReaderCallback<W> kneserNeyReader=new KneserNeyLmReaderCallback<W>(wordIndexer,googleLmReader.getLmOrder(),opts);    googleLmReader.parse(kneserNeyReader);    return readArrayEncodedLmFromArpa(kneserNeyReader,compress,wordIndexer,opts);  } else {    final FirstPassCallback<LongRef> valueAddingCallback=firstPassGoogle(dir,wordIndexer,opts);    final LongArray[] numNgramsForEachWord=valueAddingCallback.getNumNgramsForEachWord();    return secondPassGoogle(opts,googleLmReader,wordIndexer,valueAddingCallback,numNgramsForEachWord,compress);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.STEP__COMMENT:    return COMMENT_EDEFAULT == null ? comment != null : !COMMENT_EDEFAULT.equals(comment);case SexecPackage.STEP__CALLER:  return caller != null && !caller.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static double gamma(double x){  x=logGamma(x);  return Math.exp(x);}  }
class C{  public boolean write(Type type,Object value,NodeMap<OutputNode> node,Map map) throws Exception {  boolean result=strategy.write(type,value,node,map);  if (visitor != null) {    visitor.write(type,node);  }  return result;}  }
class C{  private void updateNotification(String text,String contentText,boolean vibrate,boolean sound,boolean light){  Intent disconnect=new Intent("disconnect_all");  PendingIntent pendingIntentDisconnect=PendingIntent.getBroadcast(this,0,disconnect,PendingIntent.FLAG_CANCEL_CURRENT);  if (foreground) {    NotificationCompat.Builder builder=new NotificationCompat.Builder(this);    builder.setContentText(text);    builder.setSmallIcon(R.drawable.ic_stat_hermes2);    builder.setWhen(System.currentTimeMillis());    builder.addAction(R.drawable.ic_action_ic_close_24px,"DISCONNECT ALL",pendingIntentDisconnect);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      builder.setColor(Color.parseColor("#0097A7"));    }    Intent notifyIntent=new Intent(this,MainActivity.class);    notifyIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    PendingIntent contentIntent=PendingIntent.getActivity(this,0,notifyIntent,0);    if (contentText == null) {      if (newMentions >= 1) {        StringBuilder sb=new StringBuilder();        for (        Conversation conv : mentions.values()) {          sb.append(conv.getName() + " (" + conv.getNewMentions()+ "), ");        }        contentText=getString(R.string.notification_mentions,sb.substring(0,sb.length() - 2));      } else       if (!connectedServerTitles.isEmpty()) {        StringBuilder sb=new StringBuilder();        for (        String title : connectedServerTitles) {          sb.append(title + ", ");        }        contentText=getString(R.string.notification_connected,sb.substring(0,sb.length() - 2));      } else {        contentText=getString(R.string.notification_not_connected);      }    }    builder.setContentIntent(contentIntent).setWhen(System.currentTimeMillis()).setContentTitle(getText(R.string.app_name)).setContentText(contentText);    Notification notification=builder.build();    if (vibrate) {      notification.defaults|=Notification.DEFAULT_VIBRATE;    }    if (sound) {      notification.defaults|=Notification.DEFAULT_SOUND;    }    if (light) {      notification.ledARGB=NOTIFICATION_LED_COLOR;      notification.ledOnMS=NOTIFICATION_LED_ON_MS;      notification.ledOffMS=NOTIFICATION_LED_OFF_MS;      notification.flags|=Notification.FLAG_SHOW_LIGHTS;    }    notification.number=newMentions;    notificationManager.notify(FOREGROUND_NOTIFICATION,notification);  }}  }
class C{  public List<Sector> refresh(DrawContext dc,double sectorSize,Sector searchSector){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (sectorSize < Angle.SECOND.degrees || sectorSize > 180) {    String message=Logging.getMessage("generic.SizeOutOfRange",sectorSize);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (searchSector == null) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.sectors=new ArrayList<Sector>();  this.sectorSize=sectorSize;  this.swapCylinderLists(dc);  this.tree.traverse(searchSector,new Context(dc,sectorSize,this.sectors));  Collections.sort(this.sectors);  return this.sectors;}  }
class C{  public ProjectTodoIdObject(int id){  this.id=id;}  }
class C{  public void removeAmmo(String name){  if (UltraCosmeticsData.get().isAmmoEnabled()) {    if (UltraCosmeticsData.get().usingFileStorage()) {      SettingsManager.getData(getPlayer()).set("Ammo." + name,getAmmo(name) - 1);    } else {      ultraCosmetics.getMySqlConnectionManager().getSqlUtils().removeAmmo(getMySqlIndex(),name);    }  }}  }
class C{  public int pauseDownload(long... ids){  initPauseMethod();  if (pauseDownload == null) {    return -1;  }  try {    return ((Integer)pauseDownload.invoke(downloadManager,ids)).intValue();  } catch (  Exception e) {    e.printStackTrace();  }  return -1;}  }
class C{  public static boolean isCorrectGuess(char[] word,char[] blanks,char guess){  boolean correct=false;  int message=2;  for (int i=0; i < word.length; i++) {    if (word[i] == guess) {      correct=true;      if (blanks[i] == guess)       message=1; else {        blanks[i]=guess;        message=0;      }    }  }  if (message > 0)   print(message,guess);  return correct;}  }
class C{  private void assertImportBucketAndFilename(RdeContactReader reader){  assertThat(reader.importBucketName).isEqualTo("import-bucket");  assertThat(reader.importFileName).isEqualTo("escrow-file.xml");}  }
class C{  public void receiveErrorresolveUserToken(java.lang.Exception e){}  }
class C{  public static String lookupTag(List<LanguageRange> priorityList,Collection<String> tags){  return LocaleMatcher.lookupTag(priorityList,tags);}  }
class C{  public boolean isUndroppableOnDeath(){  if (has("undroppableondeath")) {    return (getInt("undroppableondeath") == 1);  }  return false;}  }
class C{  private void fireSelectionEvent(final DLItem item){  if (selectionListeners == null) {    return;  }  final Event event=new Event();  event.button=1;  event.display=getDisplay();  event.item=null;  event.widget=this;  event.data=item;  final SelectionEvent selectionEvent=new SelectionEvent(event);  for (  final SelectionListener listener : selectionListeners) {    listener.widgetSelected(selectionEvent);  }}  }
class C{  protected void initializeState(S current){  InitializationUtils.initialize(current);  if (current.documentExpirationTimeMicros <= 0) {    current.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public void parse() throws IOException {  long length=0;  try {    length=file.length();  } catch (  IOException e) {    throw new IOException("Wrong size");  }  try {    parse("",length);  } catch (  IOException e) {    throw new IOException("Parse error: malformed mp4 file");  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static String unifiedResourcePath(SolrResourceLoader loader){  return (loader instanceof ZkSolrResourceLoader) ? ((ZkSolrResourceLoader)loader).getCollectionZkPath() + "/" : loader.getConfigDir();}  }
class C{  public MultiCraftingRecipeItem(final ItemStack item,final Map<ItemStack,Boolean> items,final BiFunction<Player,CraftingGrid,ItemStack> replacementFunc,final ItemStack replacement,final Collection<BiPredicate<Player,ItemStack>> validators){  this.item=item;  this.items=new Object2BooleanOpenHashMap<>(items);  this.validators=(validators == null) ? null : new ArrayList<>(validators);  this.replacement=replacement;  this.replacementFunc=replacementFunc;}  }
class C{  private void printNextPostponedMessages(){  LogMessage nextLogMessage=postponedMessages.get(lastPrintedMessageNum + 1);  while (nextLogMessage != null) {    printLine(nextLogMessage);    postponedMessages.remove(nextLogMessage.num);    nextLogMessage=postponedMessages.get(nextLogMessage.num + 1);  }}  }
class C{  public boolean isInBoundsX(float x){  if (isInBoundsLeft(x) && isInBoundsRight(x))   return true; else   return false;}  }
class C{  public ValidationException(String message){  super(message);}  }
class C{  public void clearCampos(){  campos.clear();}  }
class C{  private DualPivotQuicksort(){}  }
class C{  private void validateUploadSingleInitiationRequest(UploadSingleInitiationRequest request){  Assert.notNull(request,"An upload single initiation request must be specified.");  businessObjectFormatHelper.validateBusinessObjectFormatKey(request.getSourceBusinessObjectFormatKey());  businessObjectFormatHelper.validateBusinessObjectFormatKey(request.getTargetBusinessObjectFormatKey());  attributeHelper.validateAttributes(request.getBusinessObjectDataAttributes());  Assert.notNull(request.getFile(),"File information must be specified.");  Assert.hasText(request.getFile().getFileName(),"A file name must be specified.");  request.getFile().setFileName(request.getFile().getFileName().trim());  String targetStorageName=request.getTargetStorageName();  if (targetStorageName != null) {    request.setTargetStorageName(targetStorageName.trim());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void onModuleLoad(){  RootPanel.get().setPixelSize(600,600);  PickupDragController dragController=new PickupDragController(RootPanel.get(),true);  Image img=new Image("http://code.google.com/webtoolkit/logo-185x175.png");  RootPanel.get().add(img,40,30);  dragController.makeDraggable(img);}  }
class C{  public NTRUSigningPrivateKeyParameters.Basis generateBoundedBasis(){  while (true) {    FGBasis basis=generateBasis();    if (basis.isNormOk()) {      return basis;    }  }}  }
class C{  private void scoreChains(List<Plan> plansToScore){  for (  Plan plan : plansToScore) {    ScoringFunction scoringFunction=this.scoringFunctionFactory.createNewScoringFunction(plan.getPerson());    for (    PlanElement pe : plan.getPlanElements()) {      if (pe instanceof Leg)       scoringFunction.handleLeg((Leg)pe); else       scoringFunction.handleActivity((Activity)pe);    }    scoringFunction.finish();    double score=scoringFunction.getScore();    if (plan.getPlanElements().size() == 1)     plan.setScore(0.0); else     plan.setScore(score);  }}  }
class C{  private DoubleMatrix2D subMatrix(DoubleMatrix2D A,int rowFrom,int rowTo,int[] columnIndexes){  if (rowTo - rowFrom >= A.rows())   throw new IndexOutOfBoundsException("Too many rows");  int height=rowTo - rowFrom + 1;  int columns=A.columns();  A=A.viewPart(rowFrom,0,height,columns);  DoubleMatrix2D sub=A.like(height,columnIndexes.length);  for (int c=columnIndexes.length; --c >= 0; ) {    int column=columnIndexes[c];    if (column < 0 || column >= columns)     throw new IndexOutOfBoundsException("Illegal Index");    sub.viewColumn(c).assign(A.viewColumn(column));  }  return sub;}  }
class C{  public boolean send(){  Intent emailIntent=new Intent(Intent.ACTION_SENDTO);  emailIntent.setType(Mime.EMAIL);  emailIntent.setData(Uri.parse("mailto:"));  if (!this.toList.isEmpty()) {    String[] toArray=new String[this.toList.size()];    emailIntent.putExtra(Intent.EXTRA_EMAIL,this.toList.toArray(toArray));  }  if (!this.ccList.isEmpty()) {    String[] ccArray=new String[this.ccList.size()];    emailIntent.putExtra(Intent.EXTRA_CC,this.ccList.toArray(ccArray));  }  if (!this.bccList.isEmpty()) {    String[] bccArray=new String[this.bccList.size()];    emailIntent.putExtra(Intent.EXTRA_BCC,this.bccList.toArray(bccArray));  }  emailIntent.putExtra(Intent.EXTRA_SUBJECT,this.subject);  emailIntent.putExtra(Intent.EXTRA_TEXT,this.body);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    emailIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT);  } else {    emailIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  }  if (emailIntent.resolveActivity(this.context.getPackageManager()) != null) {    this.context.startActivity(emailIntent);    return true;  }  return false;}  }
class C{  public Builder(){  this.created=new Date(System.currentTimeMillis());  this.lastModified=this.created;}  }
class C{  private static List<String> fetchEngineConfigs(SBJob context,String language){  if (context == null) {    return null;  }  List<String> result=new ArrayList<>();  List<SBExpressionEngineRequirement> requirements=context.getApp().getExpressionEngineRequirements();  if (requirements != null) {    for (    SBExpressionEngineRequirement requirement : requirements) {      List<String> engineConfiguration=requirement.getEngineConfigs(language);      if (engineConfiguration != null) {        result.addAll(engineConfiguration);      }    }  }  return result;}  }
class C{  private List _asStructuredContentArray(List array){  List children;  if (array instanceof Vector) {    children=new Vector();  } else {    children=new ArrayList();  }  for (Iterator elements=array.iterator(); elements.hasNext(); ) {    children.add(new XMLContent((Element)elements.next()));  }  return children;}  }
class C{  public static PolarPoint fromRadians(double latitude,double longitude,double radius){  return new PolarPoint(Angle.fromRadians(latitude),Angle.fromRadians(longitude),radius);}  }
class C{  public boolean disconnect(){  mUserDisconnected=true;  if (mConnected && mBluetoothGatt != null) {    mConnectionState=BluetoothGatt.STATE_DISCONNECTING;    mCallbacks.onDeviceDisconnecting(mBluetoothGatt.getDevice());    mBluetoothGatt.disconnect();    return true;  }  return false;}  }
class C{  public SocketFlow bandwidth(long bandwidth){  if (bandwidth < 0) {    throw new IllegalArgumentException("invalid bandwidth");  } else {    this.bandwidth=bandwidth;  }  return this;}  }
class C{  public static String htmlAmpersand(final String str){  return str.replaceAll("&","&amp;");}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (this.extensionValue == null) {    this.extensionId=PKIXExtensions.AuthInfoAccess_Id;    this.critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public boolean isPureSelfJoin(){  return isPureSelfJoin;}  }
class C{  public int[] compilePattern(String data){  int expr[]=new int[data.length() + 2];  char buff[]=data.toCharArray();  int y=0;  boolean slash=false;  expr[y++]=MATCH_BEGIN;  if (buff.length > 0) {    if (buff[0] == '\\') {      slash=true;    } else     if (buff[0] == '*') {      expr[y++]=MATCH_FILE;    } else {      expr[y++]=buff[0];    }    for (int x=1; x < buff.length; x++) {      if (slash) {        expr[y++]=buff[x];        slash=false;      } else {        if (buff[x] == '\\') {          slash=true;        } else         if (buff[x] == '*') {          if (expr[y - 1] <= MATCH_FILE) {            expr[y - 1]=MATCH_PATH;          } else {            expr[y++]=MATCH_FILE;          }        } else {          expr[y++]=buff[x];        }      }    }  }  expr[y]=MATCH_THEEND;  return expr;}  }
class C{  private boolean isSlavoGermanic(String value){  return value.indexOf('W') > -1 || value.indexOf('K') > -1 || value.indexOf("CZ") > -1 || value.indexOf("WITZ") > -1;}  }
class C{  protected String mapResourceProperties(Map<String,String> resourceProperties){  StringBuffer sb=new StringBuffer();  for (  Entry<String,String> element : resourceProperties.entrySet()) {    if (element.getValue() != null && !element.getValue().isEmpty()) {      sb.append(" --");      sb.append(element.getKey());      sb.append("=");      sb.append(element.getValue());    }  }  return sb.toString();}  }
class C{  public static ObjectOutputStream newObjectOutputStream(File file) throws IOException {  return new ObjectOutputStream(new FileOutputStream(file));}  }
class C{  public static String gensalt(){  return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);}  }
class C{  public void addRole(RoleEntity role){  roles.add(role);}  }
class C{  protected synchronized void engineNextBytes(byte[] bytes){  int i, n;  long bits;  int nextByteToReturn;  int lastWord;  final int extrabytes=7;  if (bytes == null) {    throw new NullPointerException("bytes == null");  }  lastWord=seed[BYTES_OFFSET] == 0 ? 0 : (seed[BYTES_OFFSET] + extrabytes) >> 3 - 1;  if (state == UNDEFINED) {    updateSeed(getRandomBytes(DIGEST_LENGTH));    nextBIndex=HASHBYTES_TO_USE;    lastWord=seed[BYTES_OFFSET] == 0 ? 0 : (seed[BYTES_OFFSET] + extrabytes) >> 3 - 1;  } else   if (state == SET_SEED) {    System.arraycopy(seed,HASH_OFFSET,copies,HASHCOPY_OFFSET,EXTRAFRAME_OFFSET);    for (i=lastWord + 3; i < FRAME_LENGTH + 2; i++) {      seed[i]=0;    }    bits=(seedLength << 3) + 64;    if (seed[BYTES_OFFSET] < MAX_BYTES) {      seed[14]=(int)(bits >>> 32);      seed[15]=(int)(bits & 0xFFFFFFFF);    } else {      copies[EXTRAFRAME_OFFSET + 14]=(int)(bits >>> 32);      copies[EXTRAFRAME_OFFSET + 15]=(int)(bits & 0xFFFFFFFF);    }    nextBIndex=HASHBYTES_TO_USE;  }  state=NEXT_BYTES;  if (bytes.length == 0) {    return;  }  nextByteToReturn=0;  n=(HASHBYTES_TO_USE - nextBIndex) < (bytes.length - nextByteToReturn) ? HASHBYTES_TO_USE - nextBIndex : bytes.length - nextByteToReturn;  if (n > 0) {    System.arraycopy(nextBytes,nextBIndex,bytes,nextByteToReturn,n);    nextBIndex+=n;    nextByteToReturn+=n;  }  if (nextByteToReturn >= bytes.length) {    return;  }  n=seed[BYTES_OFFSET] & 0x03;  for (; ; ) {    if (n == 0) {      seed[lastWord]=(int)(counter >>> 32);      seed[lastWord + 1]=(int)(counter & 0xFFFFFFFF);      seed[lastWord + 2]=END_FLAGS[0];    } else {      seed[lastWord]|=(int)((counter >>> RIGHT1[n]) & MASK[n]);      seed[lastWord + 1]=(int)((counter >>> RIGHT2[n]) & 0xFFFFFFFF);      seed[lastWord + 2]=(int)((counter << LEFT[n]) | END_FLAGS[n]);    }    if (seed[BYTES_OFFSET] > MAX_BYTES) {      copies[EXTRAFRAME_OFFSET]=seed[FRAME_LENGTH];      copies[EXTRAFRAME_OFFSET + 1]=seed[FRAME_LENGTH + 1];    }    SHA1Impl.computeHash(seed);    if (seed[BYTES_OFFSET] > MAX_BYTES) {      System.arraycopy(seed,0,copies,FRAME_OFFSET,FRAME_LENGTH);      System.arraycopy(copies,EXTRAFRAME_OFFSET,seed,0,FRAME_LENGTH);      SHA1Impl.computeHash(seed);      System.arraycopy(copies,FRAME_OFFSET,seed,0,FRAME_LENGTH);    }    counter++;    int j=0;    for (i=0; i < EXTRAFRAME_OFFSET; i++) {      int k=seed[HASH_OFFSET + i];      nextBytes[j]=(byte)(k >>> 24);      nextBytes[j + 1]=(byte)(k >>> 16);      nextBytes[j + 2]=(byte)(k >>> 8);      nextBytes[j + 3]=(byte)(k);      j+=4;    }    nextBIndex=0;    j=HASHBYTES_TO_USE < (bytes.length - nextByteToReturn) ? HASHBYTES_TO_USE : bytes.length - nextByteToReturn;    if (j > 0) {      System.arraycopy(nextBytes,0,bytes,nextByteToReturn,j);      nextByteToReturn+=j;      nextBIndex+=j;    }    if (nextByteToReturn >= bytes.length) {      break;    }  }}  }
class C{  public DKeyUsage(JDialog parent){  super(parent);  setTitle(res.getString("DKeyUsage.Title"));  initComponents();}  }
class C{  public void flushFileContent(String mimeType,String fileName,String fileContent) throws IOException {  generateFileContent(mimeType,"UTF-8",fileName,fileContent);  this.response.flushBuffer();}  }
class C{  private void initJavaCompiler() throws JasperException {  boolean disablejsr199=Boolean.TRUE.toString().equals(System.getProperty("org.apache.jasper.compiler.disablejsr199"));  Double version=Double.valueOf(System.getProperty("java.specification.version"));  if (!disablejsr199 && (version >= 1.6 || getClassFor("javax.tools.Tool") != null)) {    javaCompiler=new Jsr199JavaCompiler();  } else {    Class c=getClassFor("org.eclipse.jdt.internal.compiler.Compiler");    if (c != null) {      c=getClassFor("org.apache.jasper.compiler.JDTJavaCompiler");      if (c != null) {        try {          javaCompiler=(JavaCompiler)c.newInstance();        } catch (        Exception ex) {        }      }    }  }  if (javaCompiler == null) {    Class c=getClassFor("org.apache.tools.ant.taskdefs.Javac");    if (c != null) {      c=getClassFor("org.apache.jasper.compiler.AntJavaCompiler");      if (c != null) {        try {          javaCompiler=(JavaCompiler)c.newInstance();        } catch (        Exception ex) {        }      }    }  }  if (javaCompiler == null) {    errDispatcher.jspError("jsp.error.nojavac");  }  javaCompiler.init(ctxt,errDispatcher,jspcMode);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.longitudeTV=(TextView)this.findViewById(R.id.location_longitude_tv);  this.latitudeTV=(TextView)this.findViewById(R.id.location_latitude_tv);  this.altitudeTV=(TextView)this.findViewById(R.id.location_altitude_tv);  this.providersTV=(TextView)this.findViewById(R.id.location_providers_tv);  this.bestProviderTV=(TextView)this.findViewById(R.id.location_best_provider_tv);}  }
class C{  public TriggerOption firingOnlyUpdatedPanes(){  this.firingOnlyUpdatedPanes=true;  return this;}  }
class C{  protected void doSwapBuffers(GLAutoDrawable drawable){  drawable.swapBuffers();}  }
class C{  public void installChooserPanel(JColorChooser enclosingChooser){  super.installChooserPanel(enclosingChooser);}  }
class C{  public static boolean isSupported(String name){  return protocolsByName.containsKey(name);}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public static Set<String> toSet(CharSequence self){  return new HashSet<String>(toList(self));}  }
class C{  public static Spacing createSafeSpacing(boolean keepLineBreaks,int keepBlankLines){  return myFactory.createSafeSpacing(keepLineBreaks,keepBlankLines);}  }
class C{  public RemoteSolrConnector(final SolrInstance instance,final boolean useBinaryResponseWriter) throws IOException {  super();  this.instance=instance;  this.useBinaryResponseWriter=useBinaryResponseWriter;  this.corename=this.instance.getDefaultCoreName();  SolrClient s=instance.getServer(this.corename);  super.init(s);}  }
class C{  public boolean removeImportedKey(ECKey key){  checkNotNull(key);  checkArgument(!(key instanceof DeterministicKey));  return basic.removeKey(key);}  }
class C{  public void focusGained(FocusEvent evt){}  }
class C{  @Override public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {  debugCodeCall("supportsMixedCaseQuotedIdentifiers");  String m=getMode();  return !m.equals("MySQL");}  }
class C{  public void insertLocal(int index,int tag,int classInfo) throws BadBytecode {  byte[] data=new InsertLocal(this,index,tag,classInfo).doit();  this.set(data);}  }
class C{  public static void delete(String pathToFileOrDirectory){  delete(new File(pathToFileOrDirectory));}  }
class C{  public void unregisterSMSObserver(){  context.getContentResolver().unregisterContentObserver(this);}  }
class C{  public void send(byte[] data,int id){  boolean isFirstPacket=(packets.size() == 0);  packets.add(data);  ids.add(id);  if (isFirstPacket) {    scheduleSendTask(true);  }  Log.d(TAG,"Added packet " + id + " to buffer; "+ packets.size()+ " packets in buffer");}  }
class C{  public void tournament(int numGames){  setup();  if (!computerPlaysSelf) {    applet.output("Unable to play tournament with human involved.");    return;  }  int xWins=0;  int oWins=0;  int draws=0;  for (int i=0; i < numGames; i++) {    controller.reset();    while (true) {      int rc=controller.playTurn();      if (rc == GameController.IN_PROGRESS) {        continue;      }switch (rc) {case GameController.X_WINS:        xWins++;      break;case GameController.O_WINS:    oWins++;  break;case GameController.DRAW:draws++;break;}break;}}System.out.println("Statistics [" + new java.util.Date() + "]");System.out.println("(xWins:" + xWins + ", oWins:"+ oWins+ ", draws:"+ draws);}  }
class C{  public SubtreeCrossover(double probability){  super();  this.probability=probability;}  }
class C{  protected boolean mustDisplayNode(TreeNode node,int level){  return node.isVisible() && (level > 1 || this.getActiveAttributes().isRootVisible());}  }
class C{  @Override public void updateEntity(){  if (!addedToEnet)   onLoaded();}  }
class C{  public static Date parseDateTimeString(String dateTimeString) throws Exception {  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");  Date d=sdf.parse(dateTimeString);  return d;}  }
class C{  public boolean match(final Cookie cookie,final CookieOrigin origin){  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  int port=origin.getPort();  if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.PORT_ATTR)) {    if (cookie.getPorts() == null) {      return false;    }    if (!portMatch(port,cookie.getPorts())) {      return false;    }  }  return true;}  }
class C{  public void printFieldsByCf(String cfName){  final Class clazz=getClassFromCFName(cfName);  if (clazz == null) {    return;  }  if (DataObject.class.isAssignableFrom(clazz)) {    DataObjectType doType=TypeMap.getDoType(clazz);    System.out.println(String.format("Column Family: %s",doType.getCF().getName()));    Collection<ColumnField> cfs=doType.getColumnFields();    Iterator it=cfs.iterator();    while (it.hasNext()) {      ColumnField field=(ColumnField)it.next();      System.out.println(String.format("\tfield=%-30s\ttype=%s",field.getName(),field.getPropertyDescriptor().getPropertyType().toString().substring(6)));    }  }}  }
class C{  public void exiting(String sourceClass,String sourceMethod,@GuardSatisfied Object result){  throw new RuntimeException();}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  protected OMGraphicList loadImages(){  clearImageTileList();  OMGraphicList ret=getList();  if (ret == null) {    ret=new OMGraphicList();    setList(ret);  } else {    ret.clear();  }  if (filePaths != null) {    for (    String path : filePaths) {      loadImage(path,ret);    }  }  return ret;}  }
class C{  private void makeSnapshotForNewSegment(CubeInstance cube,CubeSegment newSeg,List<CubeSegment> mergingSegments){  CubeSegment lastSeg=mergingSegments.get(mergingSegments.size() - 1);  for (  Map.Entry<String,String> entry : lastSeg.getSnapshots().entrySet()) {    newSeg.putSnapshotResPath(entry.getKey(),entry.getValue());  }}  }
class C{  @Override public void purgeLogsOlderThan(long minTxIdToKeep) throws IOException {  Preconditions.checkArgument(minTxIdToKeep > 0,"Invalid transaction id " + minTxIdToKeep);  checkClosedOrInError("purgeLogSegmentsOlderThan");  BKLogWriteHandler ledgerHandler=createWriteHandler(true);  try {    LOG.info("Purging logs for {} older than {}",ledgerHandler.getFullyQualifiedName(),minTxIdToKeep);    FutureUtils.result(ledgerHandler.purgeLogSegmentsOlderThanTxnId(minTxIdToKeep));  }  finally {    Utils.closeQuietly(ledgerHandler);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:11.615 -0500",hash_original_method="42296DC9EADFEA8A232AFEC4CE089FE4",hash_generated_method="5F24148571F9B41E8B35FB5513F9ABD6") public boolean equals(Timestamp theTimestamp){  if (theTimestamp == null) {    return false;  }  return (this.getTime() == theTimestamp.getTime()) && (this.getNanos() == theTimestamp.getNanos());}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  try {    doGetHelper(request,response);  } catch (  final Exception e) {    logger.log(Level.INFO,"Exception",e);    response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  }  dbLogic.rollback();}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private static void showPopup(AnActionEvent event){  GoogleLoginUsersPanel usersPanel=new GoogleLoginUsersPanel();  JComponent source=(JComponent)event.getInputEvent().getSource();  ComponentPopupBuilder popupBuilder=JBPopupFactory.getInstance().createComponentPopupBuilder(usersPanel,usersPanel.getList());  JBPopup popup=popupBuilder.createPopup();  JComponent component=popup.getContent();  int startingPoint=(int)(source.getWidth() - component.getPreferredSize().getWidth());  popup.show(new RelativePoint(source,new Point(startingPoint,source.getHeight() - 1)));}  }
class C{  private void startMaintenance(State currentState,String clusterId){  ServiceUtils.logInfo(this,"Starting maintenance for clusterId: %s",clusterId);  sendRequest(HostUtils.getCloudStoreHelper(this).createGet(getClusterDocumentLink(clusterId)).setCompletion(null));}  }
class C{  public final boolean match(OpApplNode sn,ModuleNode mn){  return false;}  }
class C{  public void close(){  try {    if (fileLock != null) {      fileLock.release();      fileLock=null;    }    file.close();    freeSpace.clear();  } catch (  Exception e) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_WRITING_FAILED,"Closing failed for file {0}",fileName,e);  } finally {    file=null;  }}  }
class C{  private static String determineRootDir(String location){  int prefixEnd=location.indexOf(":") + 1;  int rootDirEnd=location.length();  while (rootDirEnd > prefixEnd && pathMatcher.isPattern(location.substring(prefixEnd,rootDirEnd))) {    rootDirEnd=location.lastIndexOf('/',rootDirEnd - 1);  }  if (rootDirEnd == 0) {    rootDirEnd=prefixEnd;  }  return location.substring(0,rootDirEnd);}  }
class C{  @Override public boolean isEmpty(){  return false;}  }
class C{  public Attr createAttributeNS(String namespaceURI,String qualifiedName) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public static <V>List<V> randomSample(List<V> samples,int sampleSize){  if (sampleSize < samples.size())   return samples;  return sampleWithoutReplacement(0,samples.size(),sampleSize).mapToObj(null).collect(Collectors.toList());}  }
class C{  public void touch(){  this.lastUsed=new Date();}  }
class C{  protected JComponent createAccessoryPanel(){  m_PanelBookmarks=new FileChooserBookmarksPanel();  m_PanelBookmarks.setOwner(this);  m_PanelBookmarks.setBorder(BorderFactory.createEmptyBorder(2,5,0,0));  return m_PanelBookmarks;}  }
class C{  public static void filledCircle(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("circle radius must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public void append(final int b){  final int newlen=this.len + 1;  if (newlen > this.buffer.length) {    expand(newlen);  }  this.buffer[this.len]=(byte)b;  this.len=newlen;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return Boolean.valueOf(mf != null && mf.isBluRay());}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  double[] vals=new double[outputFormatPeek().numAttributes()];  for (int i=0; i < getInputFormat().numAttributes(); i++) {    vals[i]=instance.value(i);  }  int j=getInputFormat().numAttributes();  for (int i=0; i < m_SelectedAttributes.length; i++) {    int current=m_SelectedAttributes[i];    vals[i + j]=instance.value(current);  }  Instance inst=null;  if (instance instanceof SparseInstance) {    inst=new SparseInstance(instance.weight(),vals);  } else {    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(getOutputFormat());  copyValues(inst,false,instance.dataset(),getOutputFormat());  inst.setDataset(getOutputFormat());  push(inst);  return true;}  }
class C{  private ContentValues makeRawContactData(String displayName,Uri rawContactUri){  ContentValues values=new ContentValues();  values.put(Data.RAW_CONTACT_ID,ContentUris.parseId(rawContactUri));  values.put(Data.MIMETYPE,StructuredName.CONTENT_ITEM_TYPE);  values.put(StructuredName.DISPLAY_NAME,displayName);  return values;}  }
class C{  private void resetLocal(){  this.isWritingSequence=false;  this.wroteSequenceHeader=false;  this.theStreamMetadata=null;  this.imageIndex=0;}  }
class C{  public boolean addIncidentEdges(List<Edge> edges){  return getIncidentEdges().addAll(edges);}  }
class C{  public void sync(){  flush();  store.sync();}  }
class C{  public boolean intersects(Point point){  if (this.center.distance(point) <= this.radius) {    return true;  } else {    return false;  }}  }
class C{  public boolean shouldUpdate(){  boolean val=false;  boolean up=false;synchronized (updateLock) {    up=updateOnce;  }  if (up)   val=true; else   if (updateRule == UPDATE_RULE_ALWAYS)   val=true; else   if (updateRule == UPDATE_RULE_STEPS) {    long step=simulation.state.schedule.getSteps();    val=(lastStep < 0 || stepInterval == 0 || step - lastStep >= stepInterval || lastStep % stepInterval >= step % stepInterval);    if (val)     lastStep=step;  } else   if (updateRule == UPDATE_RULE_WALLCLOCK_TIME) {    long wall=System.currentTimeMillis();    val=(lastWall == 0 || wallInterval == 0 || wall - lastWall >= wallInterval || lastWall % wallInterval >= wall % wallInterval);    if (val)     lastWall=wall;  } else   if (updateRule == UPDATE_RULE_INTERNAL_TIME) {    double time=simulation.state.schedule.getTime();    val=(lastTime == 0 || timeInterval == 0 || time - lastTime >= timeInterval || lastTime % timeInterval >= time % timeInterval);    if (val)     lastTime=time;  }synchronized (updateLock) {    updateOnce=false;  }  return val;}  }
class C{  private void applyLink(Link link,Range range,Spannable text){  TouchableSpan span=new TouchableSpan(context,link);  text.setSpan(span,range.start,range.end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);}  }
class C{  public ResourceDescriptionWithoutModuleUserData(IResourceDescription delegate){  this.delegate=delegate;}  }
class C{  public synchronized void test(){  if (enabled) {    for (    String stream : streams) {      streamStatus(api.getStreamInfo(stream,null));    }  }}  }
class C{  private static boolean isNELorLSEPCharacter(char ch){  return (ch == 0x85 || ch == 0x2028);}  }
class C{  public boolean equals(Object obj){  if (obj == null || (!(obj instanceof CodeSigner))) {    return false;  }  CodeSigner that=(CodeSigner)obj;  if (this == that) {    return true;  }  Timestamp thatTimestamp=that.getTimestamp();  if (timestamp == null) {    if (thatTimestamp != null) {      return false;    }  } else {    if (thatTimestamp == null || (!timestamp.equals(thatTimestamp))) {      return false;    }  }  return signerCertPath.equals(that.getSignerCertPath());}  }
class C{  public void actionPerformed(ActionEvent e){  ActionMap map=tabPane.getActionMap();  if (map != null) {    String actionKey;    if (e.getSource() == scrollForwardButton) {      actionKey="scrollTabsForwardAction";    } else {      actionKey="scrollTabsBackwardAction";    }    Action action=map.get(actionKey);    if (action != null && action.isEnabled()) {      action.actionPerformed(new ActionEvent(tabPane,ActionEvent.ACTION_PERFORMED,null,e.getWhen(),e.getModifiers()));    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());}  }
class C{  public DetailView makeDetailView(){  return overview.makeDetailView(it);}  }
class C{  public ParameterizationFunction(NumberVector vec){  super();  this.vec=vec;  determineGlobalExtremum();}  }
class C{  @Override public boolean ready() throws IOException {synchronized (lock) {    checkNotClosed();    return ((end - pos) > 0) || in.ready();  }}  }
class C{  public static double distance(double lat1,double lon1,double lat2,double lon2){  return Geo.distance(new Geo(lat1,lon1),new Geo(lat2,lon2));}  }
class C{  public Day(Date time,TimeZone zone,Locale locale){  ParamChecks.nullNotPermitted(time,"time");  ParamChecks.nullNotPermitted(zone,"zone");  ParamChecks.nullNotPermitted(locale,"locale");  Calendar calendar=Calendar.getInstance(zone,locale);  calendar.setTime(time);  int d=calendar.get(Calendar.DAY_OF_MONTH);  int m=calendar.get(Calendar.MONTH) + 1;  int y=calendar.get(Calendar.YEAR);  this.serialDate=SerialDate.createInstance(d,m,y);  peg(calendar);}  }
class C{  public Time(Date date){  SimpleTimeZone tz=new SimpleTimeZone(0,"Z");  SimpleDateFormat dateF=new SimpleDateFormat("yyyyMMddHHmmss");  dateF.setTimeZone(tz);  String d=dateF.format(date) + "Z";  int year=Integer.parseInt(d.substring(0,4));  if (year < 1950 || year > 2049) {    time=new DERGeneralizedTime(d);  } else {    time=new DERUTCTime(d.substring(2));  }}  }
class C{  void returnLocal(Local right){  ret.clear();  ret.addAll(locals.get(right));  if (doCheck)   sanityCheck();}  }
class C{  public RoundedColorDrawable(int color){  setColor(color);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void addContextDataFactory(ContextDataFactory contextDataFactory){  if (contextDataFactory == null) {    throw new IllegalArgumentException("Parameter contextDataFactory must not be null.");  }  this.contextDataFactories.add(contextDataFactory);  if (postInitialisation) {    for (    Context context : getSession().getContexts()) {      contextDataFactory.loadContextData(getSession(),context);    }  }}  }
class C{  private boolean waitForMessageWindow(MessageType type,short nodeId,long maxWait) throws InterruptedException {  if (!windowedTypes.contains(type))   return true;  long start=System.nanoTime();  MessageWindow mw=getMW(nodeId);  if (!mw.disconnected && mw.pending.get() >= MAX_PENDING_MESSAGES) {    mw.lock.lock();    try {      while (!mw.disconnected && mw.pending.get() >= MAX_PENDING_MESSAGES) {        long now=System.nanoTime();        if (maxWait > 0 && (now - start) > maxWait * 1000)         return false;        mw.full.awaitNanos(now - start);      }    }  finally {      mw.lock.unlock();    }  }  mw=getMW(nodeId);  if (mw != null)   mw.pending.getAndIncrement();  return true;}  }
class C{  public void visitTopLevel(JCCompilationUnit tree){  try {    printUnit(tree,null);  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  public boolean isSnapshotOperationsSupported(){  return snapshotOperationsSupported;}  }
class C{  @Override protected int sizeOf(String key,Bitmap bitmap){  final int bitmapSize=getBitmapSize(bitmap) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Element store(Object o){  AcelaSignalHead p=(AcelaSignalHead)o;  Element element=new Element("signalhead");  element.setAttribute("class",this.getClass().getName());  element.setAttribute("systemName",p.getSystemName());  String tu;  tu=p.getUserName();  if (tu != null) {    element.setAttribute("userName",tu);  }  AcelaNode sh=AcelaAddress.getNodeFromSystemName(p.getSystemName(),_memo);  int rawaddr=AcelaAddress.getBitFromSystemName(p.getSystemName());  String shtype=sh.getOutputSignalHeadTypeString(rawaddr);  element.setAttribute("signalheadType",shtype);  storeCommon(p,element);  return element;}  }
class C{  public static <T>T deserialize(String filename,Class<T> type,SerializationMode mode){  try {    T object;    final Path filePath=Paths.get(filename);    if (!Files.exists(filePath) || Files.size(filePath) == 0L) {      object=null;    } else     if (mode == SerializationMode.BIN || mode == SerializationMode.BIN_GZ) {      Kryo kryo=new Kryo();      kryo.setReferences(false);      Input input=new Input(mode == SerializationMode.BIN_GZ ? new GZIPInputStream(new FileInputStream(filename)) : new FileInputStream(filename));      object=kryo.readObject(input,type);      input.close();    } else     if (mode == SerializationMode.DEFAULT || mode == SerializationMode.DEFAULT_GZ) {      FileInputStream input=new FileInputStream(new File(filename));      ObjectInputStream inStream=mode == SerializationMode.DEFAULT_GZ ? new ObjectInputStream(new GZIPInputStream(input)) : new ObjectInputStream(input);      object=type.cast(inStream.readObject());      inStream.close();    } else {      throw new UnsupportedOperationException();    }    return object;  } catch (  KryoException|ClassNotFoundException|IOException e) {    logger.error("Unable to deserialize {} (mode: {})",filename,mode);    logger.error("Deserialization exception",e);    throw new RuntimeException(e);  }}  }
class C{  public static Date toDate(XMLGregorianCalendar xmlGregorianCalendar){  if (xmlGregorianCalendar == null) {    return null;  }  return xmlGregorianCalendar.toGregorianCalendar().getTime();}  }
class C{  public Counter createCounter(){  return new CounterImpl(initialValue);}  }
class C{  public Matrix4x3f m02(float m02){  this.m02=m02;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public boolean equalsDefault(){  return (Float.floatToIntBits(value) == 0);}  }
class C{  private void remove(Field field,Annotation label){  done.remove(new FieldKey(field));}  }
class C{  private void generatePatternBitmap(){  if (getBounds().width() <= 0 || getBounds().height() <= 0) {    return;  }  mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);  Canvas canvas=new Canvas(mBitmap);  Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException {  setHints(null);  return decodeInternal(image);}  }
class C{  public static Vector formatDecimal(Collection c,String pattern){  DecimalFormat f=new DecimalFormat(pattern);  Vector v=new Vector();  for (Iterator i=c.iterator(); i.hasNext(); ) {    Object o=i.next();    if (o instanceof Double)     v.add(f.format(o)); else     v.add(o);  }  return v;}  }
class C{  private void parse(String rawdata) throws MimeTypeParseException {  int slashIndex=rawdata.indexOf('/');  int semIndex=rawdata.indexOf(';');  if ((slashIndex < 0) && (semIndex < 0)) {    throw new MimeTypeParseException("Unable to find a sub type.");  } else   if ((slashIndex < 0) && (semIndex >= 0)) {    throw new MimeTypeParseException("Unable to find a sub type.");  } else   if ((slashIndex >= 0) && (semIndex < 0)) {    primaryType=rawdata.substring(0,slashIndex).trim().toLowerCase(Locale.ENGLISH);    subType=rawdata.substring(slashIndex + 1).trim().toLowerCase(Locale.ENGLISH);    parameters=new MimeTypeParameterList();  } else   if (slashIndex < semIndex) {    primaryType=rawdata.substring(0,slashIndex).trim().toLowerCase(Locale.ENGLISH);    subType=rawdata.substring(slashIndex + 1,semIndex).trim().toLowerCase(Locale.ENGLISH);    parameters=new MimeTypeParameterList(rawdata.substring(semIndex));  } else {    throw new MimeTypeParseException("Unable to find a sub type.");  }  if (!isValidToken(primaryType)) {    throw new MimeTypeParseException("Primary type is invalid.");  }  if (!isValidToken(subType)) {    throw new MimeTypeParseException("Sub type is invalid.");  }}  }
class C{  public void testStateFormatUpdateWithTimeDelayLazy() throws Exception {  testStateFormatUpdate(false,false);}  }
class C{  public boolean areEqual(Value a,Value b){  return a.compareTo(b,compareMode) == 0;}  }
class C{  @Override public Collection<Token> convert(String original){  if (original == null) {    return Collections.emptyList();  }  boolean mightContainRangeQuery=(original.indexOf('[') != -1 || original.indexOf('{') != -1) && (original.indexOf(']') != -1 || original.indexOf('}') != -1);  Collection<Token> result=new ArrayList<>();  Matcher matcher=QUERY_REGEX.matcher(original);  String nextWord=null;  int nextStartIndex=0;  String lastBooleanOp=null;  while (nextWord != null || matcher.find()) {    String word=null;    int startIndex=0;    if (nextWord != null) {      word=nextWord;      startIndex=nextStartIndex;      nextWord=null;    } else {      word=matcher.group(0);      startIndex=matcher.start();    }    if (matcher.find()) {      nextWord=matcher.group(0);      nextStartIndex=matcher.start();    }    if (mightContainRangeQuery && "TO".equals(word)) {      continue;    }    if ("AND".equals(word) || "OR".equals(word) || "NOT".equals(word)) {      lastBooleanOp=word;      continue;    }    if ("AND".equals(nextWord) && original.length() > nextStartIndex + 7 && original.substring(nextStartIndex,nextStartIndex + 7).equals("AND NOT")) {      nextWord="NOT";    }    int flagValue=0;    if (word.charAt(0) == '-' || (startIndex > 0 && original.charAt(startIndex - 1) == '-')) {      flagValue=PROHIBITED_TERM_FLAG;    } else     if (word.charAt(0) == '+' || (startIndex > 0 && original.charAt(startIndex - 1) == '+')) {      flagValue=REQUIRED_TERM_FLAG;    } else     if (nextWord != null && lastBooleanOp != null && !nextWord.equals(lastBooleanOp) && ("AND".equals(nextWord) || "OR".equals(nextWord) || "NOT".equals(nextWord))) {      flagValue=TERM_PRECEDES_NEW_BOOLEAN_OPERATOR_FLAG;    } else     if (nextWord != null && lastBooleanOp == null && !nextWord.equals(lastBooleanOp) && ("NOT".equals(nextWord))) {      flagValue=TERM_PRECEDES_NEW_BOOLEAN_OPERATOR_FLAG;    }    try {      analyze(result,word,startIndex,flagValue);    } catch (    IOException e) {    }  }  if (lastBooleanOp != null) {    for (    Token t : result) {      int f=t.getFlags();      t.setFlags(f|=QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG);    }  }  return result;}  }
class C{  public String testsetSuffixTipText(){  return "The suffix to use for the filename of the test sets - must contain " + "the file extension.";}  }
class C{  private SandboxBody create(int index){  SandboxBody body=new SandboxBody();  if (index == 0) {    body.addFixture(new Circle(0.5));    body.translate(3.5,0.0);  } else   if (index == 1) {    body.addFixture(Geometry.createUnitCirclePolygon(5,1.0));    body.translate(0.0,2.5);  } else   if (index == 2) {    body.addFixture(new Rectangle(0.5,0.5));    body.translate(-4.0,-0.5);  } else   if (index == 3) {    body.addFixture(new Triangle(new Vector2(0.45,-0.12),new Vector2(-0.45,0.38),new Vector2(-0.15,-0.22)));    body.translate(0.5,0.5);  } else {    body.addFixture(new Segment(new Vector2(-0.3,0.2),new Vector2(0.0,-0.1)));    body.translate(-1.0,-1.5);  }  body.setMass(MassType.INFINITE);  body.setUserData("Body" + (index + 1));  return body;}  }
class C{  public ActionList decode(int length) throws IOException {  return decode(length,true);}  }
class C{  public void releaseLocal(){  if (this.localLockHeld) {    txLocalRelease(this.localLocks);    this.localLockHeld=false;  }}  }
class C{  public void handleOtherAnimationChanged(String type){}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  flushPending();  try {    if (inTemporaryOutputState()) {      m_writer.write(ch,start,length);    } else {      writeNormalizedChars(ch,start,length,m_lineSepUse);    }    if (m_tracer != null)     super.fireCharEvent(ch,start,length);  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  @org.junit.Test public void testSelf(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("test self");  String response=waitForOutput(output);  checkResponse(response,"2 1 0 0.5 1");  bot.shutdown();}  }
class C{  public ClusterInfo removeImage(String version){  return removeImage(version,false);}  }
class C{  public static PhysicsConfig process(Context c,AttributeSet attrs){  PhysicsConfig config=PhysicsConfig.create();  TypedArray array=c.obtainStyledAttributes(attrs,R.styleable.Physics_Layout);  processCustom(array,config);  processBodyDef(array,config);  processFixtureDef(array,config);  array.recycle();  return config;}  }
class C{  public NodeList(List nodes,boolean copy){  if (nodes == null) {    throw new IllegalArgumentException("Cannot initialize NodeList with null list");  }  this.nodes=copy ? new ArrayList(nodes) : nodes;}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return 1;}  }
class C{  public boolean hasAdminRight(final String auth,final String cookies){  final Entry entry=getUser(auth,cookies);  return (entry != null) ? entry.hasRight(AccessRight.ADMIN_RIGHT) : false;}  }
class C{  @Nonnull public static final String selectPath(@Nonnull String alias,@SuppressWarnings("rawtypes") @Nonnull Class clazz){  return "SELECT " + " " + alias + " "+ "FROM"+ " "+ clazz.getSimpleName()+ " "+ alias;}  }
class C{  public Iterator children(Node n){  return super.outNeighbors(n);}  }
class C{  private static void onBinderStrictModePolicyChange(int newPolicy){  setBlockGuardPolicy(newPolicy);}  }
class C{  public void addCertificateChain(List<BurpCertificate> burpCertificateChain){  Collections.reverse(burpCertificateChain);  DefaultMutableTreeNode currentNode=null;  DefaultMutableTreeNode previousNode=null;  for (  BurpCertificate c : burpCertificateChain) {    currentNode=new DefaultMutableTreeNode(c);    if (previousNode == null) {      rootNode.add(currentNode);    } else {      previousNode.add(currentNode);    }    previousNode=currentNode;  }}  }
class C{  public static Vector2f dFdyLinear(float v0X,float v0Y,float f0X,float f0Y,float v1X,float v1Y,float f1X,float f1Y,float v2X,float v2Y,float f2X,float f2Y,Vector2f dest){  float v21X=v2X - v1X;  float v02X=v0X - v2X;  float den=(v1Y - v2Y) * v02X + v21X * (v0Y - v2Y);  float l3_1=den - v21X - v02X;  float invDen=1.0f / den;  dest.x=invDen * (v21X * f0X + v02X * f1X + l3_1 * f2X) - f2X;  dest.y=invDen * (v21X * f0Y + v02X * f1Y + l3_1 * f2Y) - f2Y;  return dest;}  }
class C{  public double parseDouble() throws SyntaxError {  String str=parseArg();  if (argWasQuoted())   throw new SyntaxError("Expected double instead of quoted string:" + str);  double value=Double.parseDouble(str);  return value;}  }
class C{  protected void clearOutEvents(){  sCInterface.clearOutEvents();}  }
class C{  @Override public int compareTo(Derivation other){  if (this.equals(other)) {    return 0;  } else   if (other == null) {    return 1;  }  int result=this.rule.compareTo(other.rule);  if (result == 0) {    result=this.sources.size() - other.sources.size();    if (result == 0) {      Fact first1=this.sources.first();      Fact first2=other.sources.first();      result=first1.compareTo(first2);      while (result == 0) {        first1=this.sources.higher(first1);        if (first1 == null) {          result=-1;        } else {          first2=other.sources.higher(first2);          result=first1.compareTo(first2);        }      }    }  }  return result;}  }
class C{  protected static DHPrivateKeyParameters decodeDHPrivateKey(byte[] encoded){  BigInteger i=new BigInteger(encoded);  return new DHPrivateKeyParameters(i,DH_GROUP_PARAMETERS);}  }
class C{  public void memberLeft(ClientMembershipEvent event){}  }
class C{  public Space prune(Space prefix) throws ScopeException {  Space x=this;  ArrayList<Space> stack=new ArrayList<>();  while (x != null && !x.equals(prefix)) {    stack.add(0,x);    x=x.getParent();  }  if (x == null) {    throw new ScopeException("cannot prune distinct spaces");  } else {    Space result=new Space(universe,x.getDomain());    for (    Space space : stack) {      result=result.S(space.getRelation());    }    return result;  }}  }
class C{  @Timed @ExceptionMetered @PUT @Path("{name}/groups") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public Iterable<String> modifySecretGroups(@Auth AutomationClient automationClient,@PathParam("name") String name,@Valid ModifyGroupsRequestV2 request){  Secret secret=secretController.getSecretByName(name).orElseThrow(null);  String user=automationClient.getName();  long secretId=secret.getId();  Set<String> oldGroups=aclDAO.getGroupsFor(secret).stream().map(null).collect(toSet());  Set<String> groupsToAdd=Sets.difference(request.addGroups(),oldGroups);  Set<String> groupsToRemove=Sets.intersection(request.removeGroups(),oldGroups);  groupsToGroupIds(groupsToAdd).forEach(null);  groupsToGroupIds(groupsToRemove).forEach(null);  return aclDAO.getGroupsFor(secret).stream().map(null).collect(toSet());}  }
class C{  private boolean isNativeVolumeExpansionSupported(Volume vplexVolume,Long newSize){  boolean useNativeVolumeExpansion=true;  StringSet assocVolumeIds=vplexVolume.getAssociatedVolumes();  if (null == assocVolumeIds) {    s_logger.warn("VPLEX volume {} has no backend volumes. It was probably ingested 'Virtual Volume Only'.",vplexVolume.forDisplay());    useNativeVolumeExpansion=false;  } else {    for (    String assocVolumeId : assocVolumeIds) {      Volume assocVolume=_permissionsHelper.getObjectById(URI.create(assocVolumeId),Volume.class);      try {        super.verifyVolumeExpansionRequest(assocVolume,newSize);      } catch (      Exception e) {        useNativeVolumeExpansion=false;        break;      }    }  }  return useNativeVolumeExpansion;}  }
class C{  public ProjectMarkerProcessor(IProject project){  fProject=project;}  }
class C{  public synchronized void listenToProjRoot(){  List<String> dirsAdded=new ArrayList<String>();  String relativePath=null;  FileObject fo=this.projRoot;  FileChangeListener weakFcl=FileUtil.weakFileChangeListener(this,fo);  fo.addFileChangeListener(weakFcl);  FileObject parent=null;  FileObject child=null;  for (  List<String> path : paths) {    parent=fo;    for (    String pathElem : path) {      child=parent.getFileObject(pathElem);      if (child != null) {        relativePath=FileUtil.getRelativePath(fo,child);        if (!dirsAdded.contains(relativePath)) {          dirsAdded.add(relativePath);          weakFcl=FileUtil.weakFileChangeListener(this,child);          child.addFileChangeListener(weakFcl);          parent=child;        }      } else {        break;      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(0,50,"2600");  childData=child.getData();  assertEquals("characterdataReplaceDataExceedsLengthOfDataAssert","2600",childData);}  }
class C{  public void testEscapes() throws Exception {  Directory indexStore=getIndexStore("field",new String[]{"foo*bar","foo??bar","fooCDbar","fooSOMETHINGbar","foo\\"});  IndexReader reader=DirectoryReader.open(indexStore);  IndexSearcher searcher=newSearcher(reader);  WildcardQuery unescaped=new WildcardQuery(new Term("field","foo*bar"));  assertMatches(searcher,unescaped,4);  WildcardQuery escaped=new WildcardQuery(new Term("field","foo\\*bar"));  assertMatches(searcher,escaped,1);  unescaped=new WildcardQuery(new Term("field","foo??bar"));  assertMatches(searcher,unescaped,2);  escaped=new WildcardQuery(new Term("field","foo\\?\\?bar"));  assertMatches(searcher,escaped,1);  WildcardQuery atEnd=new WildcardQuery(new Term("field","foo\\"));  assertMatches(searcher,atEnd,1);  reader.close();  indexStore.close();}  }
class C{  private void createMenuBar(){  add(createFileMenu());  add(createViewMenu());  add(createToolsMenu());  add(createHelpMenu());}  }
class C{  public void apply(Message m,TSIGRecord old){  apply(m,Rcode.NOERROR,old);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public ReentrantContextProviderCLQ(final int refType){  super(refType);}  }
class C{  public Object source(String filename,NameSpace nameSpace) throws FileNotFoundException, IOException, EvalError {  File file=pathToFile(filename);  if (Interpreter.DEBUG)   debug("Sourcing file: " + file);  Reader sourceIn=new BufferedReader(new FileReader(file));  try {    return eval(sourceIn,nameSpace,filename);  }  finally {    sourceIn.close();  }}  }
class C{  public static void writeMetadata(BeanInfo metadata,ResponseWriter writer) throws IOException {  BeanDescriptor descriptor=metadata.getBeanDescriptor();  writeFeatureDescriptor("composite-component-BeanDescriptor",descriptor,writer);  writeFeatureDescriptorValues("composite-component-BeanDescriptor",descriptor,writer);  PropertyDescriptor attributes[]=metadata.getPropertyDescriptors();  for (  PropertyDescriptor cur : attributes) {    writeFeatureDescriptor("composite-component-attribute",cur,writer);    writeFeatureDescriptorValues("composite-component-attribute",cur,writer);  }}  }
class C{  public int readInt(final JBBPByteOrder byteOrder) throws IOException {  if (byteOrder == JBBPByteOrder.BIG_ENDIAN) {    return (readUnsignedShort(byteOrder) << 16) | readUnsignedShort(byteOrder);  } else {    return readUnsignedShort(byteOrder) | (readUnsignedShort(byteOrder) << 16);  }}  }
class C{  public GrammarCrossover(double probability){  super();  this.probability=probability;}  }
class C{  public static boolean isVolatile(int flags){  return (flags & VOLATILE) != 0;}  }
class C{  protected boolean removeImageTileFromList(ImageTile tile){  return ((DefaultListModel)getListModel()).removeElement(tile);}  }
class C{  public static IMarker findMarker(String markerId,int start,int end,IResource resource,String message,boolean includeSubtypes) throws CoreException {  IMarker[] markers=resource.findMarkers(markerId,includeSubtypes,IResource.DEPTH_ZERO);  for (  IMarker marker : markers) {    int curStart=marker.getAttribute(IMarker.CHAR_START,-1);    if (curStart != start) {      continue;    }    int curEnd=marker.getAttribute(IMarker.CHAR_END,-1);    if (curEnd != end) {      continue;    }    String curMsg=marker.getAttribute(IMarker.MESSAGE,null);    if (curMsg == null || !message.equals(curMsg)) {      continue;    }    return marker;  }  return null;}  }
class C{  @SuppressWarnings("unchecked") public P2AntRunner mirrorApp(File dstFolder){  return performWithoutMissingBundlePool(null);}  }
class C{  public void clearSomeChat(Document doc){  int count=doc.getDefaultRootElement().getElementCount();  if (count > MAX_NUMBER_LINES) {    removeFirstLines(doc,10);  }}  }
class C{  public static Map<String,Properties> readSheet(Sheet sheet,Iterator<Locale> supportedLocales,String sheetName,Set<Object> defaultKeySet) throws ValidationException, TranslationImportException {  List<String> localeStringList=readFirstRow(sheet);  Map<String,Properties> propertiesMap=initializePropertyMap(supportedLocales,localeStringList,sheetName);  readRows(sheet,propertiesMap,localeStringList,defaultKeySet);  return propertiesMap;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  return validateFrm(mapping,request,null);}  }
class C{  public static boolean isMinimumSdkLevel(int minimumSdkLevel){  return Build.VERSION.SDK_INT >= minimumSdkLevel;}  }
class C{  public static String replace(String input,String find,String repl){  return replace(input,find,repl,false,false);}  }
class C{  void edtLoopImpl(){  try {    if (animationQueue == null || animationQueue.size() == 0) {      if (!noSleep) {synchronized (lock) {          impl.edtIdle(true);          lock.wait(Math.max(1,framerateLock - (time)));          impl.edtIdle(false);        }      }    } else {      paintTransitionAnimation();      return;    }  } catch (  Exception ignor) {    ignor.printStackTrace();  }  long currentTime=System.currentTimeMillis();synchronized (lock) {    inputEventStackPointerTmp=inputEventStackPointer;    inputEventStackPointer=0;    lastDragOffset=-1;    int[] qt=inputEventStackTmp;    inputEventStackTmp=inputEventStack;    inputEventStack=qt;  }  int offset=0;  while (offset < inputEventStackPointerTmp) {    if (offset == inputEventStackPointer) {      inputEventStackPointer=0;      lastDragOffset=-1;    }    offset=handleEvent(offset);  }  if (!impl.isInitialized()) {    return;  }  codenameOneGraphics.setGraphics(impl.getNativeGraphics());  impl.paintDirty();  Form current=impl.getCurrentForm();  if (current != null) {    current.repaintAnimations();    long t=System.currentTimeMillis();    if (keyRepeatCharged && nextKeyRepeatEvent <= t) {      current.keyRepeated(keyRepeatValue);      nextKeyRepeatEvent=t + keyRepeatNextIntervalTime;    }    if (longPressCharged && longPressInterval <= t - longKeyPressTime) {      longPressCharged=false;      current.longKeyPress(keyRepeatValue);    }    if (longPointerCharged && longPressInterval <= t - longKeyPressTime) {      longPointerCharged=false;      current.longPointerPress(pointerX,pointerY);    }  }  processSerialCalls();  time=System.currentTimeMillis() - currentTime;}  }
class C{  public DirtyRegion(int offset,int length,String type,String text){  fOffset=offset;  fLength=length;  fType=normalizeTypeValue(type);  fText=text;}  }
class C{  private PreferenceLayout createPreferenceLayout(Preference preference,PreferenceLayout in){  PreferenceLayout pl=in != null ? in : new PreferenceLayout();  pl.name=preference.getClass().getName();  pl.resId=preference.getLayoutResource();  pl.widgetResId=preference.getWidgetLayoutResource();  return pl;}  }
class C{  public static void log(LogEvent event){  loggerImpl.log(event);}  }
class C{  @Override final public byte[] keyAt(final long entryIndex){  rangeCheckSpannedTupleIndex(entryIndex);  int childIndex=0;  long remaining=entryIndex;  final int nkeys=getKeyCount();  for (; childIndex <= nkeys; childIndex++) {    final long nspanned=getChildEntryCount(childIndex);    if (remaining < nspanned) {      break;    }    remaining-=nspanned;    assert remaining >= 0;  }  final AbstractNode<?> child=getChild(childIndex);  return child.keyAt(remaining);}  }
class C{  public boolean isValidDay(int dayOfMonth){  return dayOfMonth >= 1 && dayOfMonth <= lengthOfMonth();}  }
class C{  private static Prototype putIntern(Prototype desc){synchronized (internTable) {    String descriptor=desc.getDescriptor();    Prototype already=internTable.get(descriptor);    if (already != null) {      return already;    }    internTable.put(descriptor,desc);    return desc;  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  BollingerBandsSeries clone=(BollingerBandsSeries)super.clone();  clone.yyValues=new LinkedList<Double>();  return clone;}  }
class C{  public static void editLocalCodeNodeComment(final SQLProvider provider,final INaviCodeNode codeNode,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02495: provider argument can not be null");  Preconditions.checkNotNull(codeNode,"IE02496: codeNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE02497: commentId argument can not be null");  Preconditions.checkNotNull(userId,"IE02498: userId argument can not be null");  Preconditions.checkNotNull(newComment,"IE02499: newComment argument can not be null");  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,newComment);}  }
class C{  public List<String> groupNames(){  if (groupNames == null) {    groupNames=new ArrayList<String>(groupInfo.keySet());  }  return groupNames;}  }
class C{  public static void println(Object self){  if (self instanceof Writer) {    PrintWriter pw=new GroovyPrintWriter((Writer)self);    pw.println();  } else {    System.out.println();  }}  }
class C{  public URI uri(){  return uri;}  }
class C{  private void repaintTab(final int index){  if (!isRunsDirty && index >= 0 && index < tabPane.getTabCount()) {    Rectangle rect=getTabBounds(tabPane,index);    if (rect != null) {      tabPane.repaint(rect);    }  }}  }
class C{  public void remove(String key){  map.remove(key);}  }
class C{  public static Color rgba(int rgba){  int alpha=rgba & 0xFF;  int argb=rgba << 8;  argb|=alpha << 24;  return argb(argb);}  }
class C{  private PointPair calculateEdge(DisplayNode comp,Point p){  Rectangle r=comp.getBounds();  Point p1=new Point((int)(r.x + r.width / 2.0),(int)(r.y + r.height / 2.0));  Point p2=new Point(p);  p2.translate(getLocation().x,getLocation().y);  Point p3=getBoundaryIntersection(comp,p1,p2);  return (p3 == null) ? null : new PointPair(p3,p2);}  }
class C{  public WrappedAsyncResult(AsyncResult wrapped){  this.wrapped=wrapped;}  }
class C{  @Override public void onLocationChanged(Location location){  updateCurrentLocation(location);}  }
class C{  public EditSession redo(@Nullable BlockBag newBlockBag,LocalPlayer player){  return redo(newBlockBag,(Player)player);}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,String key,E defaultValue){  try {    Object val=this.opt(key);    if (NULL.equals(val)) {      return defaultValue;    }    if (clazz.isAssignableFrom(val.getClass())) {      @SuppressWarnings("unchecked") E myE=(E)val;      return myE;    }    return Enum.valueOf(clazz,val.toString());  } catch (  IllegalArgumentException|NullPointerException e) {    return defaultValue;  }}  }
class C{  public boolean isErrorEnabled(){  return (getLogger().isLoggable(Level.SEVERE));}  }
class C{  public JsonApiDocument readJsonApiPatchExtValue(JsonNode value) throws JsonProcessingException {  JsonNode data=JsonNodeFactory.instance.objectNode().set("data",value);  return mapper.treeToValue(data,JsonApiDocument.class);}  }
class C{  private void cleanConstraintMaps(Container parent){  HashSet<Component> parentCompSet=new HashSet<Component>(Arrays.asList(parent.getComponents()));  Iterator<Map.Entry<ComponentWrapper,CC>> it=ccMap.entrySet().iterator();  while (it.hasNext()) {    Component c=(Component)it.next().getKey().getComponent();    if (parentCompSet.contains(c) == false) {      it.remove();      scrConstrMap.remove(c);    }  }}  }
class C{  public void applyMatrix(float n00,float n01,float n02,float n10,float n11,float n12){  showMissingWarning("applyMatrix");}  }
class C{  public JSONWriter endObject() throws JSONException {  return this.end('k','}');}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public BuyClientBuilder callbackScheduler(final Scheduler callbackScheduler){  this.callbackScheduler=callbackScheduler;  return this;}  }
class C{  public boolean isEntryADescendantOfAncestor(Entry descendant,Entry potentialAncestor){  while (true) {    if (descendant.getId().equals(potentialAncestor.getId())) {      return true;    }    if (!descendant.hasParentId()) {      break;    }    descendant=getEntryById(descendant.getParentId());  }  return false;}  }
class C{  public PSPCommunicationException(){  super();}  }
class C{  public boolean hasDWP(){  for (  Mounted mounted : getWeaponList()) {    if (mounted.isDWPMounted()) {      if (mounted.isMissing()) {        continue;      } else       if ((mounted.getLinked() != null) && (mounted.getLinked().getUsableShotsLeft() > 0)) {        return true;      } else       if ((mounted.getLinked() == null) && !mounted.isMissing()) {        return true;      }    }  }  return false;}  }
class C{  private static void convertOpaqueToTranslucentAfterL(Activity activity){  try {    Field field=Activity.class.getDeclaredField("mTranslucentCallback");    field.setAccessible(true);    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",field.getType(),ActivityOptions.class);    method.setAccessible(true);    Method methodGetOptions=Activity.class.getDeclaredMethod("getActivityOptions");    methodGetOptions.setAccessible(true);    Object options=methodGetOptions.invoke(activity);    method.invoke(activity,null,options);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected JButton editButton(){  JButton editButton=new JButton(Bundle.getMessage("EditTurnoutOperation"));  return (editButton);}  }
class C{  public static byte[] readAll(InputStream inputStream) throws IOException {  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  byte[] buffer=new byte[1024];  int k=0;  for (; (k=inputStream.read(buffer)) != -1; ) {    outputStream.write(buffer,0,k);  }  return outputStream.toByteArray();}  }
class C{  public static void addRuntimeProperty(String key,String value){  env.runtimeProps.put(key,value);}  }
class C{  private void checkOperation(){  if (shouldFail)   throw new IgniteException("Store exception.");  if (operationDelay > 0) {    try {      U.sleep(operationDelay);    } catch (    IgniteInterruptedCheckedException e) {      throw new IgniteException(e);    }  }}  }
class C{  public String evaluationMeasureTipText(){  return "The measure used to evaluate the performance of attribute combinations.";}  }
class C{  public Builder addCharFilter(String name,String... params) throws IOException {  return addCharFilter(name,paramsToMap(params));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode22.class,args);}  }
class C{  private Object unmarshallEntityByName(String entityName,Map<String,Object> map,Object currentNode) throws ODataException {  LOG.debug("Entity '{}' created.",entityName);  if (!isNullOrEmpty(entityName)) {    Object entity=loadEntity(entityName);    setEntityProperties(entity,JsonParserUtils.getStructuredType(entityName,entityDataModel),map,currentNode);    LOG.debug("Entity '{}' properties mapped successfully.",entityName);    return entity;  } else {    throw new ODataUnmarshallingException("Unmarshalling Entity name should be null !!!!...");  }}  }
class C{  public QueryGoal(String query_words){  assert query_words != null;  this.query_original=query_words;  this.include_words=new NormalizedWords();  this.exclude_words=new NormalizedWords();  this.include_strings=new ArrayList<String>();  this.exclude_strings=new ArrayList<String>();  query_words=CharacterCoding.html2unicode(AbstractScraper.stripAllTags(query_words.toCharArray())).toLowerCase().trim();  int c;  for (int i=0; i < seps.length(); i++) {    while ((c=query_words.indexOf(seps.charAt(i))) >= 0) {      query_words=query_words.substring(0,c) + (((c + 1) < query_words.length()) ? (' ' + query_words.substring(c + 1)) : "");    }  }  parseQuery(query_words,this.include_strings,this.exclude_strings);  for (  String s : this.include_strings)   parseQuery(s,this.include_words,this.include_words);  for (  String s : this.exclude_strings)   parseQuery(s,this.exclude_words,this.exclude_words);  WordCache.learn(this.include_words);  WordCache.learn(this.exclude_words);  this.include_hashes=null;  this.exclude_hashes=null;}  }
class C{  public SQLTransactionRollbackException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  @DSComment("Character encoder/decoder") @DSSafe(DSCat.UTIL_FUNCTION) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:01.573 -0500",hash_original_method="32B9309C5888D5D441E10DB420683F91",hash_generated_method="EA5ABC13387F1533A05FEB74F9C87F72") public static synchronized CoderResult malformedForLength(int length) throws IllegalArgumentException {  if (length > 0) {    Integer key=Integer.valueOf(length);synchronized (_malformedErrors) {      CoderResult r=_malformedErrors.get(key);      if (r == null) {        r=new CoderResult(TYPE_MALFORMED_INPUT,length);        _malformedErrors.put(key,r);      }      return r;    }  }  throw new IllegalArgumentException("Length must be greater than 0; was " + length);}  }
class C{  public T caseYieldExpression(YieldExpression object){  return null;}  }
class C{  public FieldsDescriptor(Map<String,Type> fieldToType,Set<Type> compressedTypes){  setFieldToType(fieldToType);  setCompressedTypes(compressedTypes);  initialize();}  }
class C{  private static int findNextUCSigma(List<Set<GraphChange>> F,HsNode n){  int index=n.getLabel();  GraphChange path=n.getPath();  for (; index < F.size(); index++) {    Set<GraphChange> sigma=F.get(index);    boolean intersect=false;    for (    GraphChange aSigma : sigma) {      if (path.contains(aSigma)) {        intersect=true;        break;      }    }    if (!intersect)     return index;  }  return -1;}  }
class C{  private void decodeHeader(BufferedReader in,Properties pre,Properties parms,Properties header) throws InterruptedException {  try {    String inLine=in.readLine();    if (inLine == null)     return;    StringTokenizer st=new StringTokenizer(inLine);    if (!st.hasMoreTokens())     sendError(HTTP_BADREQUEST,"BAD REQUEST: Syntax error. Usage: GET /example/file.html");    String method=st.nextToken();    pre.put("method",method);    if (!st.hasMoreTokens())     sendError(HTTP_BADREQUEST,"BAD REQUEST: Missing URI. Usage: GET /example/file.html");    String uri=st.nextToken();    int qmi=uri.indexOf('?');    if (qmi >= 0) {      decodeParms(uri.substring(qmi + 1),parms);      uri=decodePercent(uri.substring(0,qmi));    } else     uri=decodePercent(uri);    if (st.hasMoreTokens()) {      String line=in.readLine();      while (line != null && line.trim().length() > 0) {        int p=line.indexOf(':');        if (p >= 0)         header.put(line.substring(0,p).trim().toLowerCase(),line.substring(p + 1).trim());        line=in.readLine();      }    }    pre.put("uri",uri);  } catch (  IOException ioe) {    sendError(HTTP_INTERNALERROR,"SERVER INTERNAL ERROR: IOException: " + ioe.getMessage());  }}  }
class C{  public static String findIOSFile(String filename){  Process p=null;  String ret=null;  try {    String[] cmdLS={"ssh","-p","2222","root@localhost","ls","-l","--time-style=full-iso",filename};    p=Runtime.getRuntime().exec(cmdLS);    ret=MobileUtil.monitorProcessOutput(p,filename);  } catch (  Exception e) {    e.printStackTrace();  }  return ret;}  }
class C{  public AutoDeskewTransform(DataSet dataSet){  this(dataSet,defaultList);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String01() throws NoSuchProviderException, NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      KeyManagerFactory.getInstance(validValues[i],provider);      fail("Expected IllegalArgumentException was not thrown for null provider");    } catch (    IllegalArgumentException e) {    }    try {      KeyManagerFactory.getInstance(validValues[i],"");      fail("Expected IllegalArgumentException was not thrown for empty provider");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public boolean isFocused(){  return isFocused;}  }
class C{  public String simpleClassName(Object obj){  return obj.getClass().getSimpleName();}  }
class C{  void translate(float x,float y,float z){  xo+=x;  yo+=y;  zo+=z;}  }
class C{  public void incrByFloat(String key,double doubleValue){  connection.incrbyfloat(key,doubleValue);  if (keyExpiryTime != -1) {    connection.expire(key,keyExpiryTime);  }}  }
class C{  public Permutation(int[] permutation){  super();  this.permutation=permutation;  fromArray(permutation);}  }
class C{  public static String bytesToBinHex(byte[] data,int nStartPos,int nNumOfBytes){  StringBuilder sbuf=new StringBuilder();  sbuf.setLength(nNumOfBytes << 1);  int nPos=0;  for (int nI=0; nI < nNumOfBytes; nI++) {    sbuf.setCharAt(nPos++,HEXTAB[(data[nI + nStartPos] >> 4) & 0x0f]);    sbuf.setCharAt(nPos++,HEXTAB[data[nI + nStartPos] & 0x0f]);  }  return sbuf.toString();}  }
class C{  public SocksSocket(SocksProxy proxy,String remoteServerHost,int remoteServerPort) throws SocksException, IOException {  this.proxy=checkNotNull(proxy,"Argument [proxy] may not be null").copy();  this.proxy.setProxySocket(proxySocket);  this.remoteServerHost=checkNotNull(remoteServerHost,"Argument [remoteServerHost] may not be null");  this.remoteServerPort=remoteServerPort;  this.proxy.buildConnection();  proxySocket=this.proxy.getProxySocket();  initProxyChain();  this.proxy.requestConnect(remoteServerHost,remoteServerPort);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"ORR");  translateAll(environment,instruction,"ORR",instructions);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public AccountHeaderBuilder withDividerBelowHeader(boolean dividerBelowHeader){  this.mDividerBelowHeader=dividerBelowHeader;  return this;}  }
class C{  public void save(View v){  setResult(RESULT_OK,new Intent().putExtra("newmembers",getToBeAddMembers().toArray(new String[0])));  finish();}  }
class C{  @HLEFunction(nid=0xFA324B4E,version=150) public int sceNetAdhocGameModeUpdateReplica(int id,@CanBeNull TPointer infoAddr){  checkInitialized();  for (  GameModeArea gameModeArea : replicaGameModeAreas) {    if (gameModeArea.id == id) {      GameModeUpdateInfo gameModeUpdateInfo=new GameModeUpdateInfo();      if (infoAddr.isNotNull()) {        gameModeUpdateInfo.read(infoAddr);      }      if (gameModeArea.hasNewData()) {        if (log.isDebugEnabled()) {          log.debug(String.format("Updating GameMode Area with new data: %s",gameModeArea));        }        gameModeArea.writeNewData();        gameModeArea.resetNewData();        if (log.isTraceEnabled()) {          log.trace(String.format("Replica GameMode Area updated: %s",Utilities.getMemoryDump(gameModeArea.addr,gameModeArea.size)));        }        gameModeUpdateInfo.updated=1;      } else {        gameModeUpdateInfo.updated=0;      }      if (infoAddr.getAddress() != 0) {        gameModeUpdateInfo.timeStamp=gameModeArea.getUpdateTimestamp();        gameModeUpdateInfo.write(Memory.getInstance());      }      break;    }  }  return 0;}  }
class C{  public void drawTextBox(){  if (func_146176_q()) {    if (func_146181_i()) {      drawRect(field_146209_f - 1,field_146210_g - 1,field_146209_f + field_146218_h + 1,field_146210_g + field_146219_i + 1,-6250336);      drawRect(field_146209_f,field_146210_g,field_146209_f + field_146218_h,field_146210_g + field_146219_i,-16777216);    }    int var1=field_146226_p ? field_146222_t : field_146221_u;    int var2=field_146224_r - field_146225_q;    int var3=field_146223_s - field_146225_q;    String var4=field_146211_a.trimStringToWidth(field_146216_j.substring(field_146225_q),func_146200_o());    boolean var5=var2 >= 0 && var2 <= var4.length();    boolean var6=field_146213_o && field_146214_l / 6 % 2 == 0 && var5;    int var7=field_146215_m ? field_146209_f + 4 : field_146209_f;    int var8=field_146215_m ? field_146210_g + (field_146219_i - 8) / 2 : field_146210_g;    int var9=var7;    if (var3 > var4.length())     var3=var4.length();    if (var4.length() > 0) {      String var10=var5 ? var4.substring(0,var2) : var4;      String stars="";      for (int i=0; i < var10.length(); i++)       stars=stars.concat("*");      var9=field_146211_a.drawStringWithShadow(stars,var7,var8,var1);    }    boolean var13=field_146224_r < field_146216_j.length() || field_146216_j.length() >= func_146208_g();    int var11=var9;    if (!var5)     var11=var2 > 0 ? var7 + field_146218_h : var7; else     if (var13) {      var11=var9 - 1;      --var9;    }    if (var4.length() > 0 && var5 && var2 < var4.length()) {      String stars="";      for (int i=0; i < var4.substring(var2).length(); i++)       stars=stars.concat("*");      field_146211_a.drawStringWithShadow(stars,var9,var8,var1);    }    if (var6)     if (var13)     Gui.drawRect(var11,var8 - 1,var11 + 1,var8 + 1 + field_146211_a.FONT_HEIGHT,-3092272); else     field_146211_a.drawStringWithShadow("_",var11,var8,var1);    if (var3 != var2) {      String stars="";      for (int i=0; i < var4.substring(0,var3).length(); i++)       stars=stars.concat("*");      int var12=var7 + field_146211_a.getStringWidth(stars);      func_146188_c(var11,var8 - 1,var12 - 1,var8 + 1 + field_146211_a.FONT_HEIGHT);    }  }}  }
class C{  @SuppressWarnings("rawtypes") private static final PipelineOp addConditional(PipelineOp left,final JoinGroupNode joinGroup,final FilterNode filter,final Set<IVariable<?>> doneSet,final AST2BOpContext ctx){  @SuppressWarnings("unchecked") final IValueExpression<IV> ve=(IValueExpression<IV>)filter.getValueExpression();  final Set<IVariable<IV>> vars=new LinkedHashSet<IVariable<IV>>();  final ComputedMaterializationRequirement req=filter.getMaterializationRequirement();  vars.addAll(req.getVarsToMaterialize());  vars.removeAll(doneSet);  final int bopId=ctx.nextId();  if (!vars.isEmpty()) {    left=addMaterializationSteps1(left,bopId,ve,vars,joinGroup.getQueryHints(),ctx);    if (req.getRequirement() == Requirement.ALWAYS) {      doneSet.addAll(vars);    }  }  final IConstraint c=new SPARQLConstraint<XSDBooleanIV<BigdataLiteral>>(ve);  left=applyQueryHints(new ConditionalRoutingOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,bopId),new NV(ConditionalRoutingOp.Annotations.CONDITION,c)),joinGroup,ctx);  return left;}  }
class C{  private void emptyTable(){  dao.deleteAll();  assertEquals("There should be no proteins in the Protein table following a call to dao.deleteAll",Long_0,dao.count());}  }
class C{  public int compareTo(final CharArrayList l){  final int s1=size(), s2=l.size();  final char a1[]=a, a2[]=l.a;  char e1, e2;  int r, i;  for (i=0; i < s1 && i < s2; i++) {    e1=a1[i];    e2=a2[i];    if ((r=(e1 - e2)) != 0)     return r;  }  return i < s2 ? -1 : (i < s1 ? 1 : 0);}  }
class C{  public String parse(String info){  if (info == null || info.length() == 0)   return "";  if (info.startsWith("[") && info.endsWith("]"))   return "";  String retValue=null;  if (isNumber())   retValue=parseNumber(info); else   if (isDate())   retValue=parseDate(info); else   if (isConstant())   retValue=m_constantIsString ? parseString(m_constantValue) : m_constantValue; else   retValue=parseString(info);  if (m_callout != null) {    try {      retValue=m_callout.convert(m_method,retValue);    } catch (    Exception e) {      log.log(Level.SEVERE,"ImpFormatRow.parse - " + info + " ("+ retValue+ ")",e);    }  }  if (retValue == null)   retValue="";  return retValue.trim();}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:00.371 -0500",hash_original_method="D301FBD428349B466ACCB27339A08D2F",hash_generated_method="1EF36E0E81A21E092BB79644E67D0F14") public void bind(LocalSocketAddress endpoint) throws IOException {  if (fd == null) {    throw new IOException("socket not created");  }  bindLocal(fd,endpoint.getName(),endpoint.getNamespace().getId());}  }
class C{  private Node createButtonGraphic(Image image){  final ImageView icon=new ImageView(image);  icon.setFitHeight(DPIUtility.MINI_ICON_SIZE);  icon.setFitWidth(DPIUtility.MINI_ICON_SIZE);  return icon;}  }
class C{  public Test(File f) throws FileNotFoundException {  is=new FileInputStream(f);}  }
class C{  public static void copyResourceFile(String resourceFile,String destFile){  URL url=Activator.getDefault().getBundle().getEntry(resourceFile);  URL fileURL;  try {    fileURL=FileLocator.toFileURL(url);    URL resolve=FileLocator.resolve(fileURL);    File file=new File(resolve.getFile());    FileInputStream fis=new FileInputStream(file);    File outputFile=new File(destFile);    FileOutputStream fos=new FileOutputStream(outputFile);    writeFile(fis,fos);  } catch (  IOException e) {    Activator.getDefault().log(e.getMessage(),e);  }}  }
class C{  public PreparedPolygonContains(PreparedPolygon prepPoly){  super(prepPoly);}  }
class C{  public boolean hasNestedTransaction(){  return mTransactionStack != null && mTransactionStack.mParent != null;}  }
class C{  private void findLocalMethodsFromStaticImports(char[] methodName,MethodBinding[] methods,Scope scope,boolean exactMatch,ObjectVector methodsFound,ReferenceBinding receiverType,InvocationSite invocationSite){  ObjectVector newMethodsFound=new ObjectVector();  next:   for (int f=methods.length; --f >= 0; ) {    MethodBinding method=methods[f];    if (method.isSynthetic())     continue next;    if (method.isDefaultAbstract())     continue next;    if (method.isConstructor())     continue next;    if (!method.isStatic())     continue next;    if (this.options.checkDeprecation && method.isViewedAsDeprecated() && !scope.isDefinedInSameUnit(method.declaringClass))     continue next;    if (this.options.checkVisibility && !method.canBeSeenBy(receiverType,invocationSite,scope))     continue next;    for (int i=methodsFound.size(); --i >= 0; ) {      Object[] other=(Object[])methodsFound.elementAt(i);      MethodBinding otherMethod=(MethodBinding)other[0];      ReferenceBinding otherReceiverType=(ReferenceBinding)other[1];      if (method == otherMethod && receiverType == otherReceiverType)       continue next;      if (CharOperation.equals(method.selector,otherMethod.selector,true)) {        if (this.lookupEnvironment.methodVerifier().isMethodSubsignature(otherMethod,method)) {          continue next;        }      }    }    newMethodsFound.add(new Object[]{method,receiverType});    int length=method.parameters.length;    char[][] parameterPackageNames=new char[length][];    char[][] parameterTypeNames=new char[length][];    for (int i=0; i < length; i++) {      TypeBinding type=method.original().parameters[i];      parameterPackageNames[i]=type.qualifiedPackageName();      parameterTypeNames[i]=type.qualifiedSourceName();    }    char[][] parameterNames=findMethodParameterNames(method,parameterTypeNames);    char[] completion=CharOperation.NO_CHAR;    int previousStartPosition=this.startPosition;    int previousTokenStart=this.tokenStart;    if (!exactMatch) {      if (this.source != null && this.source.length > this.endPosition && this.source[this.endPosition] == '(') {        completion=method.selector;      } else {        completion=CharOperation.concat(method.selector,new char[]{'(',')'});      }    } else {      this.startPosition=this.endPosition;      this.tokenStart=this.tokenEnd;    }    int relevance=computeBaseRelevance();    relevance+=computeRelevanceForResolution();    relevance+=computeRelevanceForInterestingProposal();    relevance+=computeRelevanceForCaseMatching(methodName,method.selector);    relevance+=computeRelevanceForExpectingType(method.returnType);    relevance+=computeRelevanceForEnumConstant(method.returnType);    relevance+=computeRelevanceForStatic(true,method.isStatic());    relevance+=computeRelevanceForQualification(false);    this.noProposal=false;    if (!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {      InternalCompletionProposal proposal=createProposal(CompletionProposal.METHOD_REF,this.actualCompletionPosition);      proposal.setDeclarationSignature(getSignature(method.declaringClass));      proposal.setSignature(getSignature(method));      MethodBinding original=method.original();      if (original != method) {        proposal.setOriginalSignature(getSignature(original));      }      proposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());      proposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());      proposal.setParameterPackageNames(parameterPackageNames);      proposal.setParameterTypeNames(parameterTypeNames);      proposal.setPackageName(method.returnType.qualifiedPackageName());      proposal.setTypeName(method.returnType.qualifiedSourceName());      proposal.setName(method.selector);      proposal.setCompletion(completion);      proposal.setFlags(method.modifiers);      proposal.setReplaceRange(this.startPosition - this.offset,this.endPosition - this.offset);      proposal.setTokenRange(this.tokenStart - this.offset,this.tokenEnd - this.offset);      proposal.setRelevance(relevance);      if (parameterNames != null)       proposal.setParameterNames(parameterNames);      this.requestor.accept(proposal);    }    this.startPosition=previousStartPosition;    this.tokenStart=previousTokenStart;  }  methodsFound.addAll(newMethodsFound);}  }
class C{  public static void maxpooling(MatrixObject image,MatrixObject outputBlock,int N,int C,int H,int W,int K,int R,int S,int pad_h,int pad_w,int stride_h,int stride_w,int P,int Q) throws DMLRuntimeException {  Pointer alpha=null;  Pointer beta=null;  cudnnTensorDescriptor xDesc=null;  cudnnTensorDescriptor yDesc=null;  cudnnPoolingDescriptor poolingDesc=null;  try {    yDesc=allocateTensorDescriptor(N,C,P,Q);    xDesc=allocateTensorDescriptor(N,C,H,W);    poolingDesc=allocatePoolingDescriptor(R,S,pad_h,pad_w,stride_h,stride_w);    Pointer x=((JCudaObject)image.getGPUObject()).jcudaDenseMatrixPtr;    Pointer y=((JCudaObject)outputBlock.getGPUObject()).jcudaDenseMatrixPtr;    alpha=pointerTo(1.0);    beta=pointerTo(0.0f);    int status=cudnnPoolingForward(cudnnHandle,poolingDesc,alpha,xDesc,x,beta,yDesc,y);    if (status != jcuda.jcudnn.cudnnStatus.CUDNN_STATUS_SUCCESS) {      throw new DMLRuntimeException("Could not executed cudnnPoolingForward: " + jcuda.jcudnn.cudnnStatus.stringFor(status));    }  }  finally {    if (alpha != null)     cudaFree(alpha);    if (beta != null)     cudaFree(beta);    if (yDesc != null)     cudnnDestroyTensorDescriptor(yDesc);    if (xDesc != null)     cudnnDestroyTensorDescriptor(xDesc);    if (poolingDesc != null)     cudnnDestroyPoolingDescriptor(poolingDesc);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.COMPOSED_CONTENT__OWNER:    return basicSetOwner(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected void sendMomentaryFunctionGroup1(){  DCCppMessage msg=DCCppMessage.makeFunctionGroup1SetMomMsg(this.getDccAddress(),f0Momentary,f1Momentary,f2Momentary,f3Momentary,f4Momentary);  queueMessage(msg,THROTTLEIDLE);}  }
class C{  public static String longToString(long l){  return convertLong(null,l);}  }
class C{  public boolean isClosed(){  return isClosed;}  }
class C{  public boolean isOnATextPath(){  return (textPath != null);}  }
class C{  public OrganizationAuthorityException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void onPreviewFrame(byte[] data,Camera camera){  if (RCTCamera.getInstance().isBarcodeScannerEnabled() && !RCTCameraViewFinder.barcodeScannerTaskLock) {    RCTCameraViewFinder.barcodeScannerTaskLock=true;    new ReaderAsyncTask(camera,data).execute();  }}  }
class C{  public BuiltInType createBuiltInType(){  BuiltInTypeImpl builtInType=new BuiltInTypeImpl();  return builtInType;}  }
class C{  public <T>T createDto(Class<T> dtoInterface){  return getDtoProvider(dtoInterface).newInstance();}  }
class C{  public static void separateLinkCandidates(Set<LinkCandidate> linkCandidatesCurrent,Set<LinkCandidate> linkCandidatesNext){  Set<LinkCandidate> removeFromCurrent=new HashSet<>();  Set<LinkCandidate> removeFromNext=new HashSet<>();  for (  LinkCandidate lcCurrent : linkCandidatesCurrent) {    for (    LinkCandidate lcNext : linkCandidatesNext) {      if (lcCurrent.getLinkId().equals(lcNext.getLinkId())) {        if (lcCurrent.getStopFacilityDistance() > lcNext.getStopFacilityDistance()) {          removeFromCurrent.add(lcCurrent);        } else {          removeFromNext.add(lcNext);        }      }    }  }  removeFromCurrent.forEach(null);  removeFromNext.forEach(null);}  }
class C{  public static void drawRect(GL2 gl,Rectangle bounds){  if (gl == null) {    String message=Logging.getMessage("nullValue.DrawingContextGLIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (bounds == null) {    String message=Logging.getMessage("nullValue.BoundingBoxIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  gl.glRecti(bounds.x,bounds.y,bounds.x + bounds.width,bounds.y + bounds.height);}  }
class C{  public Point2D toPoint(Vec2 p){  return new Point2D(toPixels(p.x),toPixels(toMeters(appHeight) - p.y));}  }
class C{  public boolean currentTemplateRuleIsNull(){  return ((!m_currentTemplateRuleIsNull.isEmpty()) && (m_currentTemplateRuleIsNull.peek() == true));}  }
class C{  private static void quickSort1(Object x[],int off,int len,Comparator comp){  if (len < SMALL) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && comp.compare(x[j - 1],x[j]) > 0; j--)     swap(x,j,j - 1);    return;  }  int m=off + len / 2;  if (len > SMALL) {    int l=off;    int n=off + len - 1;    if (len > MEDIUM) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s,comp);      m=med3(x,m - s,m,m + s,comp);      n=med3(x,n - 2 * s,n - s,n,comp);    }    m=med3(x,l,m,n,comp);  }  Object v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    int comparison;    while (b <= c && (comparison=comp.compare(x[b],v)) <= 0) {      if (comparison == 0)       swap(x,a++,b);      b++;    }    while (c >= b && (comparison=comp.compare(x[c],v)) >= 0) {      if (comparison == 0)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   quickSort1(x,off,s,comp);  if ((s=d - c) > 1)   quickSort1(x,n - s,s,comp);}  }
class C{  public String globalInfo(){  return "Writes to a destination that is in arff (attribute relation file format) " + "format. The data can be compressed with gzip in order to save space.";}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input.toString(),encoding);}  }
class C{  public static Map<Integer,FilterGH> parse(String fileURI){  Map<Integer,FilterGH> filterGHMap=new HashMap<Integer,FilterGH>();  DocumentBuilder db=null;  Document dom=null;  Element el=null;  NodeList nl=null;  FilterGH filterGH=null;  try {    db=DocumentBuilderFactory.newInstance().newDocumentBuilder();    dom=db.parse(db.getClass().getResourceAsStream(fileURI));    nl=dom.getDocumentElement().getElementsByTagName("filterGH");    if (nl != null && nl.getLength() > 0) {      for (int i=0; i < nl.getLength(); i++) {        el=(Element)nl.item(i);        filterGH=getFilterGH(el);        filterGHMap.put(filterGH.getId(),filterGH);      }    }    return filterGHMap;  } catch (  ParserConfigurationException pcEx) {    pcEx.printStackTrace();    throw new IllegalArgumentException("Invalid Filter XML file");  }catch (  SAXException saxEx) {    saxEx.printStackTrace();    throw new IllegalArgumentException("Invalid Filter XML file");  }catch (  IOException ioEx) {    ioEx.printStackTrace();    throw new IllegalArgumentException("Invalid Filter XML file");  }}  }
class C{  public long blocked(){  return Long.parseLong(fields[31]);}  }
class C{  public StoragePort placeFileShareExport(FileShare fs,String protocol,List<String> clients){  StoragePort sp;  if (fs.getStoragePort() == null) {    _log.info("Placement for file system {} with no assigned port.",fs.getName());    List<StoragePort> ports=getStorageSystemPortsInVarray(fs.getStorageDevice(),fs.getVirtualArray());    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());    if (Type.isilon.name().equals(storageSystem.getSystemType())) {      if (ports != null && !ports.isEmpty()) {        for (Iterator<StoragePort> iterator=ports.iterator(); iterator.hasNext(); ) {          StoragePort storagePort=iterator.next();          List<VirtualNAS> vNASList=StoragePortAssociationHelper.getStoragePortVirtualNAS(storagePort,_dbClient);          if (vNASList != null && !vNASList.isEmpty()) {            _log.info("Removing port {} as it is assigned to a vNAS.",storagePort.getNativeGuid());            iterator.remove();          }        }      }    }    if ((null != protocol) && (!protocol.isEmpty())) {      getPortsWithFileSharingProtocol(protocol,ports);    }    if (ports == null || ports.isEmpty()) {      _log.error(MessageFormat.format("There are no active and registered storage ports assigned to virtual array {0}",fs.getVirtualArray()));      throw APIException.badRequests.noStoragePortFoundForVArray(fs.getVirtualArray().toString());    }    Collections.shuffle(ports);    sp=ports.get(0);    fs.setStoragePort(sp.getId());    fs.setPortName(sp.getPortName());    _dbClient.persistObject(fs);  } else {    sp=_dbClient.queryObject(StoragePort.class,fs.getStoragePort());    _log.info("Placement for file system {} with port {}.",fs.getName(),sp.getPortName());    if ((null != protocol) && (!protocol.isEmpty())) {      List<StoragePort> ports=new ArrayList<StoragePort>();      ports.add(sp);      getPortsWithFileSharingProtocol(protocol,ports);      if (ports.isEmpty()) {        _log.error(MessageFormat.format("There are no active and registered storage ports assigned to virtual array {0}",fs.getVirtualArray()));        throw APIException.badRequests.noStoragePortFoundForVArray(fs.getVirtualArray().toString());      }    }  }  return sp;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public SQLInvalidAuthorizationSpecException(){}  }
class C{  public TIntIntHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public static void eachByte(URL url,int bufferLen,@ClosureParams(value=FromString.class,options="byte[],Integer") Closure closure) throws IOException {  InputStream is=url.openConnection().getInputStream();  IOGroovyMethods.eachByte(is,bufferLen,closure);}  }
class C{  private void checkPropertyEltName(String namespaceURI,String localName,String qName,RioSetting<Boolean> setting) throws RDFParseException {  if (RDF.NAMESPACE.equals(namespaceURI)) {    if (localName.equals("li") || localName.equals("Seq") || localName.equals("Bag")|| localName.equals("Alt")|| localName.equals("Statement")|| localName.equals("Property")|| localName.equals("List")|| localName.equals("subject")|| localName.equals("predicate")|| localName.equals("object")|| localName.equals("type")|| localName.equals("value")|| localName.equals("first")|| localName.equals("rest")|| localName.equals("nil")|| localName.startsWith("_")) {    } else     if (localName.equals("Description") || localName.equals("RDF") || localName.equals("ID")|| localName.equals("about")|| localName.equals("parseType")|| localName.equals("resource")|| localName.equals("nodeID")|| localName.equals("datatype")) {      reportError("<" + qName + "> not allowed as property element",setting);    } else     if (localName.equals("bagID") || localName.equals("aboutEach") || localName.equals("aboutEachPrefix")) {      reportError(qName + " is no longer a valid RDF name",setting);    } else {      reportWarning("unknown rdf element <" + qName + ">");    }  }}  }
class C{  public void relocateBean(Object bean,BeanInfo beanInfo,Point newLocation){  if (!(bean instanceof SimpleBeanObject))   throw new IllegalArgumentException("not instanceof SimpleBeanObject " + bean);  SimpleBeanObject obj=(SimpleBeanObject)bean;  Point2D llp=layer.getProjection().inverse(newLocation.x,newLocation.y);  relocateSimpleBeanObject(obj,llp);  layer.updateGraphics();}  }
class C{  public RuleGrounding copy(){  return new RuleGrounding(groundings.stream().map(null).collect(Collectors.toSet()));}  }
class C{  private Map<IAccessRuleParticipant,IAccessRule[][]> collectRulesByParticipant(IAccessRuleParticipant[] participants,IVMInstallType vm,LibraryLocation[] libraries,IJavaProject project){  Map<IAccessRuleParticipant,IAccessRule[][]> map=new HashMap<IAccessRuleParticipant,IAccessRule[][]>();  for (int i=0; i < participants.length; i++) {    map.put(participants[i],participants[i].getAccessRules(this,vm,libraries,project));  }  return map;}  }
class C{  private void writeHex(int i) throws IOException {  int cursor=8;  do {    hex[--cursor]=HEX_DIGITS[i & 0xf];  } while ((i>>>=4) != 0);  socketOut.write(hex,cursor,hex.length - cursor);}  }
class C{  public void resume(){}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {    ((RecyclingBitmapDrawable)oldValue).setIsCached(false);  } else {    if (Utils.hasHoneycomb()) {      mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));    }  }}  }
class C{  public static Scenario loadScenario(final Config config){  return ScenarioLoaderImpl.loadScenario(config);}  }
class C{  public static void translate(final ArrayList objects,final double offsetX,final double offsetY){  for (  Object object : objects) {    if (object instanceof Neuron) {      Neuron neuron=(Neuron)object;      neuron.setX(neuron.getX() + offsetX);      neuron.setY(neuron.getY() + offsetY);    } else     if (object instanceof Network) {      for (      Neuron neuron : ((Network)object).getFlatNeuronList()) {        neuron.setX(neuron.getX() + offsetX);        neuron.setY(neuron.getY() + offsetY);      }    } else     if (object instanceof NetworkTextObject) {      NetworkTextObject text=(NetworkTextObject)object;      text.setX(text.getX() + offsetX);      text.setY(text.getY() + offsetY);    } else     if (object instanceof NeuronGroup) {      NeuronGroup group=(NeuronGroup)object;      group.offset(offsetX,offsetY);    }  }}  }
class C{  public synchronized static Expression parse(String expr,boolean throwsException){  if (!s_init) {    new ExpressionParser(new StringReader(expr));    s_init=true;  } else {    ExpressionParser.ReInit(new StringReader(expr));  }  try {    Expression e=Parse();    s_error=null;    if (LOG_LEVEL)     s_logger.info("Parsed Expression: " + e);    return e;  } catch (  ParseException t) {    s_error=t;    if (throwsException) {      throw t;    } else {      if (LOG_LEVEL)       s_logger.warning("Expression Parse Error: " + t.getMessage() + "\n"+ StringLib.getStackTrace(t));      return null;    }  }}  }
class C{  public DocTermOrds(LeafReader reader,Bits liveDocs,String field) throws IOException {  this(reader,liveDocs,field,null,Integer.MAX_VALUE);}  }
class C{  @Override protected void acceptState(){}  }
class C{  protected DoubleMatrix3D viewSelectionLike(int[] sliceOffsets,int[] rowOffsets,int[] columnOffsets){  return new SelectedDenseDoubleMatrix3D(this.elements,sliceOffsets,rowOffsets,columnOffsets,this.offset);}  }
class C{  public boolean isUseIdentityHashCode(){  return super.isUseIdentityHashCode();}  }
class C{  public PluginException(String msg,Throwable cause){  super(cause);  this.message=(msg != null ? msg + "\nCaused by: " + cause.getMessage() : cause.getMessage());}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public static void e(String tag,String s,Throwable e){  if (LDJSLOG.ERROR >= LOGLEVEL)   Log.e(tag,s,e);}  }
class C{  protected BufferedImage readImage(String path){  if (path == null) {    String msg=Logging.getMessage("nullValue.PathIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  StringBuilder sb=new StringBuilder();  sb.append(WWIO.stripTrailingSeparator(this.getRetrieverPath()));  sb.append("/");  sb.append(WWIO.stripLeadingSeparator(path));  InputStream is=null;  try {    URL url=WWIO.makeURL(sb.toString());    if (url != null)     return ImageIO.read(url);    is=WWIO.openFileOrResourceStream(sb.toString(),this.getClass());    if (is != null)     return ImageIO.read(is);  } catch (  Exception e) {    String msg=Logging.getMessage("generic.ExceptionWhileReading",sb.toString());    Logging.logger().fine(msg);  } finally {    WWIO.closeStream(is,sb.toString());  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.530 -0400",hash_original_method="9499BE247F1730AA8CF296221D534645",hash_generated_method="EB864A80A53714A8E85868E377B41FEC") public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isSystemWindows()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  public RuleNode(double globalDev,double globalAbsDev,RuleNode parent){  m_nodeModel=null;  m_right=null;  m_left=null;  m_parent=parent;  m_globalDeviation=globalDev;  m_globalAbsDeviation=globalAbsDev;}  }
class C{  public static String xmlSingleQuotedEscape(String s){  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);switch (c) {case '\'':      sb.append("&quot;");    break;case '&':  sb.append("&amp;");break;case '<':sb.append("&lt;");break;case '\n':sb.append("&#xA;");break;case '\000':case '\001':case '\002':case '\003':case '\004':case '\005':case '\006':case '\007':case '\010':case '\013':case '\014':case '\016':case '\017':case '\020':case '\021':case '\022':case '\023':case '\024':case '\025':case '\026':case '\027':case '\030':case '\031':case '\032':case '\033':case '\034':case '\035':case '\036':case '\037':break;default :sb.append(c);}}return sb.toString();}  }
class C{  public PrintPhaseStats(){  super(Options.set,"Print Phase Stats","When printing statistics, should statistics for each gc-mutator phase be printed?",false);}  }
class C{  public boolean reverseCorrectIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  MDocType dt=MDocType.get(getCtx(),getC_DocType_ID());  if (!MPeriod.isOpen(getCtx(),getDateAcct(),dt.getDocBaseType(),getAD_Org_ID())) {    m_processMsg="@PeriodClosed@";    return false;  }  if (!isSOTrx()) {    MMatchInv[] mInv=MMatchInv.getInOut(getCtx(),getM_InOut_ID(),get_TrxName());    for (int i=0; i < mInv.length; i++)     mInv[i].deleteEx(true);    MMatchPO[] mPO=MMatchPO.getInOut(getCtx(),getM_InOut_ID(),get_TrxName());    for (int i=0; i < mPO.length; i++) {      if (mPO[i].getC_InvoiceLine_ID() == 0)       mPO[i].deleteEx(true); else {        mPO[i].setM_InOutLine_ID(0);        mPO[i].saveEx();      }    }  }  MInOut reversal=copyFrom(this,getMovementDate(),getDateAcct(),getC_DocType_ID(),isSOTrx(),false,get_TrxName(),true);  if (reversal == null) {    m_processMsg="Could not create Ship Reversal";    return false;  }  reversal.setReversal(true);  MInOutLine[] sLines=getLines(true);  MInOutLine[] rLines=reversal.getLines(true);  for (int i=0; i < rLines.length; i++) {    MInOutLine rLine=rLines[i];    rLine.setQtyEntered(rLine.getQtyEntered().negate());    rLine.setMovementQty(rLine.getMovementQty().negate());    rLine.setM_AttributeSetInstance_ID(sLines[i].getM_AttributeSetInstance_ID());    rLine.setReversalLine_ID(sLines[i].getM_InOutLine_ID());    if (!rLine.save(get_TrxName())) {      m_processMsg="Could not correct Ship Reversal Line";      return false;    }    if (rLine.getM_AttributeSetInstance_ID() == 0) {      List<MInOutLineMA> mas=MInOutLineMA.get(getCtx(),sLines[i].getM_InOutLine_ID(),get_TrxName());      for (      MInOutLineMA ma : mas) {        MInOutLineMA reverseLine=new MInOutLineMA(rLine,ma.getM_AttributeSetInstance_ID(),ma.getMovementQty().negate());        reverseLine.saveEx();      }    }  }  reversal.setC_Order_ID(getC_Order_ID());  reversal.setM_RMA_ID(getM_RMA_ID());  reversal.addDescription("{->" + getDocumentNo() + ")");  reversal.setReversal_ID(getM_InOut_ID());  reversal.saveEx(get_TrxName());  if (!reversal.processIt(DocAction.ACTION_Complete) || !reversal.getDocStatus().equals(DocAction.STATUS_Completed)) {    m_processMsg="Reversal ERROR: " + reversal.getProcessMsg();    return false;  }  reversal.closeIt();  reversal.setProcessing(false);  reversal.setDocStatus(DOCSTATUS_Reversed);  reversal.setDocAction(DOCACTION_None);  reversal.saveEx(get_TrxName());  addDescription("(" + reversal.getDocumentNo() + "<-)");  setDocStatus(DOCSTATUS_Reversed);  saveEx();  voidConfirmations();  Set<Integer> inOutOrders=new TreeSet<Integer>();  MInOutLine[] lines=getLines(false);  for (int lineIndex=0; lineIndex < lines.length; lineIndex++) {    MInOutLine sLine=lines[lineIndex];    MOrderLine oLine=null;    if (sLine.getC_OrderLine_ID() != 0) {      oLine=new MOrderLine(getCtx(),sLine.getC_OrderLine_ID(),get_TrxName());      inOutOrders.add(oLine.getC_Order_ID());    }  }  if (inOutOrders.size() > 0) {    MOrder order;    for (Iterator<Integer> it=inOutOrders.iterator(); it.hasNext(); ) {      order=new MOrder(getCtx(),it.next().intValue(),get_TrxName());      try {        order.updateIsDelivered();      } catch (      SQLException ee) {        log.warning("Could not update isDelivered flag on order " + order.getDocumentNo() + " : "+ ee.getMessage());      }      order.saveEx(get_TrxName());    }  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  m_processMsg=reversal.getDocumentNo();  this.setReversal_ID(reversal.getM_InOut_ID());  setProcessed(true);  setDocStatus(DOCSTATUS_Reversed);  setDocAction(DOCACTION_None);  return true;}  }
class C{  public void characters(char[] characters,int offset,int length) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.characters(characters,offset,length);}  }
class C{  public TerminalSeqf(Iterator<Terminal> iterator){  super(iterator);  this.hashCode=calcHashCode();}  }
class C{  public boolean removeLocation(Where location){  return super.removeElement(location);}  }
class C{  public void add(EventBean theEvent){  buffer[nextFreeIndex]=theEvent;  nextFreeIndex++;  if (nextFreeIndex == buffer.length) {    nextFreeIndex=0;  }}  }
class C{  public TMethod createTMethod(){  TMethodImpl tMethod=new TMethodImpl();  return tMethod;}  }
class C{  public boolean contains(int taxId){  return mNodes.containsKey(taxId);}  }
class C{  public ProjectionUTM(int zone){  super(centralMeridianForZone(zone));}  }
class C{  public Directory directory(){  return si.info.dir;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public String readFileContent(String filePath,int startFrom,int limit) throws MachineException {  if (limit <= 0 || startFrom <= 0) {    throw new MachineException("Impossible to read file " + limit + " lines from "+ startFrom+ " line");  }  String shCommand=format("sed -n \'%1$2s, %2$2sp\' %3$2s",startFrom,startFrom + limit,filePath);  final String[] command={"/bin/sh","-c",shCommand};  ListLineConsumer lines=new ListLineConsumer();  try {    Exec exec=docker.createExec(CreateExecParams.create(container,command).withDetach(false));    docker.startExec(StartExecParams.create(exec.getId()),new LogMessagePrinter(lines,null));  } catch (  IOException e) {    throw new MachineException(format("Error occurs while initializing command %s in docker container %s: %s",Arrays.toString(command),container,e.getLocalizedMessage()),e);  }  String content=lines.getText();  if (content.contains("sed: can't read " + filePath + ": No such file or directory") || content.contains("cat: " + filePath + ": No such file or directory")) {    throw new MachineException("File with path " + filePath + " not found");  }  return content;}  }
class C{  @Nullable public static PsiFile findFile(PsiReference... references){  for (int i=references.length - 1; i >= 0; i--) {    PsiReference ref=references[i];    if (ref instanceof FileReferenceOwner && !(ref instanceof PsiFileReference)) {      ref=((FileReferenceOwner)ref).getLastFileReference();    }    if (ref instanceof PsiFileReference) {      final PsiElement file=references[i].resolve();      return file instanceof PsiFile ? (PsiFile)file : null;    }  }  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataappenddatanomodificationallowederrEE.class,args);}  }
class C{  public static NbtOutputStream writeDeflated(NbtTag tag,File file) throws IOException {  createFile(file);  NbtOutputStream out=new NbtOutputStream(new DeflaterOutputStream(new FileOutputStream(file,false)));  out.write(tag);  return out;}  }
class C{  public GeneralizedSemImWrapper(GeneralizedSemPmWrapper wrapper){  this(wrapper.getSemPm());}  }
class C{  public DoubleParameter(OptionID optionID){  super(optionID);}  }
class C{  public MethodHandler(){  super();  m_Methods=new Hashtable<Object,Method>();}  }
class C{  public static boolean isBuildOver(int version){  if (android.os.Build.VERSION.SDK_INT > version)   return true;  return false;}  }
class C{  @Override public synchronized void addSeed(final CrawlURI curi){  if (!(textSource instanceof WriteTarget)) {    logger.log(Level.WARNING,"nowhere to log added seed: {0}",curi);  } else {    try {      Writer fw=((WriteTarget)textSource).obtainWriter(true);      fw.write("\n");      fw.write("# Heritrix added seed " + ((curi.getVia() != null) ? "redirect from " + curi.getVia() : "(JMX)") + ".\n");      fw.write(curi.toString());      fw.flush();      fw.close();    } catch (    IOException e) {      DevUtils.warnHandle(e,"problem writing new seed");    }  }  publishAddedSeed(curi);}  }
class C{  public boolean validSystemNameConfig(String systemName){  return (AcelaAddress.validSystemNameConfig(systemName,'L',_memo));}  }
class C{  public void hidePopup(){  showPending=false;  if (popup != null) {    popup.hide();    popup=null;  }}  }
class C{  @Override public void onPreAdd(IoFilterChain parent,String name,NextFilter nextFilter) throws SSLException {  if (parent.contains(SslFilter.class)) {    String msg="Only one SSL filter is permitted in a chain.";    LOGGER.error(msg);    throw new IllegalStateException(msg);  }  LOGGER.debug("Adding the SSL Filter {} to the chain",name);  IoSession session=parent.getSession();  session.setAttribute(NEXT_FILTER,nextFilter);  SslHandler sslHandler=new SslHandler(this,session);  sslHandler.init();  String[] ciphers=sslContext.getServerSocketFactory().getSupportedCipherSuites();  setEnabledCipherSuites(ciphers);  session.setAttribute(SSL_HANDLER,sslHandler);}  }
class C{  public void endReadyForEventsSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(readyForEventsSendInProgressId,-1);  int endReadyForEventsSendId;  if (failed) {    endReadyForEventsSendId=readyForEventsSendFailedId;  } else {    endReadyForEventsSendId=readyForEventsSendId;  }  this.sendStats.incInt(endReadyForEventsSendId,1);  this.stats.incLong(readyForEventsSendDurationId,duration);}  }
class C{  public static SourceLineAnnotation createUnknown(@DottedClassName String className){  return createUnknown(className,AnalysisContext.currentAnalysisContext().lookupSourceFile(className),-1,-1);}  }
class C{  synchronized void removeTracer(Tracer tracer){  if (curTracers.remove(tracer)) {    LOG.trace(toString() + ": removing tracer " + tracer.toString());    if (curTracers.size() == 0) {      removeAndCloseAllSpanReceivers();    }  }}  }
class C{  private void loadBooleanSetting(SQLiteStatement stmt,String name,int resId){  loadSetting(stmt,name,mContext.getResources().getBoolean(resId) ? "1" : "0");}  }
class C{  protected Resource parseImplicitBlank() throws IOException, RDFParseException, RDFHandlerException {  verifyCharacterOrFail(readCodePoint(),"[");  BNode bNode=createBNode();  int c=readCodePoint();  if (c != ']') {    unread(c);    Resource oldSubject=subject;    IRI oldPredicate=predicate;    subject=bNode;    skipWSC();    parsePredicateObjectList();    skipWSC();    verifyCharacterOrFail(readCodePoint(),"]");    subject=oldSubject;    predicate=oldPredicate;  }  return bNode;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.964 -0500",hash_original_method="26A4AB68F41643C912C51D77CC375C44",hash_generated_method="02191E5A470E6246C40D89D3F1FC593B") public boolean equals(Object that){  if (!this.getClass().equals(that.getClass()))   return false;  Class<?> myclass=this.getClass();  Class<?> hisclass=that.getClass();  while (true) {    Field[] fields=myclass.getDeclaredFields();    Field[] hisfields=hisclass.getDeclaredFields();    for (int i=0; i < fields.length; i++) {      Field f=fields[i];      Field g=hisfields[i];      int modifier=f.getModifiers();      if ((modifier & Modifier.PRIVATE) == Modifier.PRIVATE)       continue;      Class<?> fieldType=f.getType();      String fieldName=f.getName();      if (fieldName.compareTo("stringRepresentation") == 0) {        continue;      }      if (fieldName.compareTo("indentation") == 0) {        continue;      }      try {        if (fieldType.isPrimitive()) {          String fname=fieldType.toString();          if (fname.compareTo("int") == 0) {            if (f.getInt(this) != g.getInt(that))             return false;          } else           if (fname.compareTo("short") == 0) {            if (f.getShort(this) != g.getShort(that))             return false;          } else           if (fname.compareTo("char") == 0) {            if (f.getChar(this) != g.getChar(that))             return false;          } else           if (fname.compareTo("long") == 0) {            if (f.getLong(this) != g.getLong(that))             return false;          } else           if (fname.compareTo("boolean") == 0) {            if (f.getBoolean(this) != g.getBoolean(that))             return false;          } else           if (fname.compareTo("double") == 0) {            if (f.getDouble(this) != g.getDouble(that))             return false;          } else           if (fname.compareTo("float") == 0) {            if (f.getFloat(this) != g.getFloat(that))             return false;          }        } else         if (g.get(that) == f.get(this))         continue; else         if (f.get(this) == null && g.get(that) != null)         return false; else         if (g.get(that) == null && f.get(that) != null)         return false; else         if (!f.get(this).equals(g.get(that)))         return false;      } catch (      IllegalAccessException ex1) {        InternalErrorHandler.handleException(ex1);      }    }    if (myclass.equals(NetObject.class))     break; else {      myclass=myclass.getSuperclass();      hisclass=hisclass.getSuperclass();    }  }  return true;}  }
class C{  public int loadSigned16(int addr){  return (loadSigned8(addr + 1) << 8) | loadUnsigned8(addr);}  }
class C{  public boolean equivTo(Object o){  return this.equals(o);}  }
class C{  @Override public Iterator<T> iterator(){  return reset();}  }
class C{  public StackedBarChart(final String title,final String xAxisLabel,final String yAxisLabel,final String[] categories){  super(title,xAxisLabel,yAxisLabel);  this.dataset=new DefaultCategoryDataset();  this.chart=createChart(title,xAxisLabel,yAxisLabel,this.dataset);  this.plot=this.chart.getCategoryPlot();  this.categories=categories.clone();}  }
class C{  private ImportRewrite createImportRewrite(){  if (fCompilationUnit != null && shouldAddImports()) {    ImportRewrite rewrite=StubUtility.createImportRewrite(document,fCompilationUnit,true);    fImportContext=new ContextSensitiveImportRewriteContext(fCompilationUnit,fInvocationContext.getInvocationOffset(),rewrite);    return rewrite;  }  return null;}  }
class C{  public TObjectLongHashMap(TObjectHashingStrategy<K> strategy){  super(strategy);}  }
class C{  public TupleManagerIterator(TupleManager tuples,IntIterator rows){  m_tuples=tuples;  m_rows=rows;}  }
class C{  public TraceSystem(String fileName){  this.fileName=fileName;  updateLevel();}  }
class C{  private byte[] generateRandomBytes(final String prefix,final Byte[] body,final int length){  byte[] data=new byte[length];  for (int i=0; i < length; i++) {    data[i]=(body != null && i < body.length) ? data[i]=body[i] : (byte)(Math.random() * (122 - 65) + 65);  }  if (prefix != null) {    byte[] prefixBytes=prefix.getBytes();    for (int i=0; i < prefix.length(); i++) {      data[i]=prefixBytes[i];    }  }  return data;}  }
class C{  public static String[] resize(String buffer[],int newSize){  String temp[]=new String[newSize];  System.arraycopy(buffer,0,temp,0,buffer.length >= newSize ? newSize : buffer.length);  return temp;}  }
class C{  public static RecipeElvenTrade registerElvenTradeRecipe(ItemStack output,Object... inputs){  return registerElvenTradeRecipe(new ItemStack[]{output},inputs);}  }
class C{  public DefUseCoverageTestFitness(Use use){  if (!use.isParameterUse())   throw new IllegalArgumentException("this constructor is only for Parameter-Uses");  initParameterUse(use);}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  public RowSetWarning(){  super();}  }
class C{  public SearchRequest extraSource(SearchSourceBuilder sourceBuilder){  if (sourceBuilder == null) {    extraSource=null;    return this;  }  this.extraSource=sourceBuilder.buildAsBytes(Requests.CONTENT_TYPE);  return this;}  }
class C{  @Inline public static boolean objectTryCompareAndSwap(Object ref,Offset offset,Object old,Object value){  if (NEEDS_OBJECT_GC_WRITE_BARRIER || NEEDS_OBJECT_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().objectReferenceTryCompareAndSwap(src,src.toAddress().plus(offset),ObjectReference.fromObject(old),ObjectReference.fromObject(value),offset.toWord(),Word.zero(),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  public boolean cancelPressed(){  if (factory != null) {    factory.cancel();    factory=null;    return (false);  } else {    return (true);  }}  }
class C{  public int streamCount(StreamKind streamKind){  if (isLoaded()) {    try {      String StreamCount=get(streamKind,0,"StreamCount");      if (StreamCount == null || StreamCount.length() == 0) {        return 0;      }      return Integer.parseInt(StreamCount);    } catch (    Exception e) {      return 0;    }  } else {    return 0;  }}  }
class C{  public ColladaLines(String ns){  super(ns);}  }
class C{  public static BaseFile baseFile(File file,boolean gzip){  return FileUtils.getBaseFile(file,gzip,EXTS);}  }
class C{  public static void d(String tag,Object object){  Logger.t(tag).d(object);}  }
class C{  public ObjectReference prepareObjectReference(){  return null;}  }
class C{  public OrganizationRemovedException(String message,Object[] params,Throwable cause){  super(message,cause,params);}  }
