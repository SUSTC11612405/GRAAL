class C{  @Requires(Resolved.class) public boolean isCyclic(){  if (isCyclic != null) {    return isCyclic;  }  return isCyclic=checkCyclic(Sets.<MessageType>newHashSet(),this);}  }
class C{  private double guessPhi(WeightedObservedPoint[] observations){  double fcMean=0;  double fsMean=0;  double currentX=observations[0].getX();  double currentY=observations[0].getY();  for (int i=1; i < observations.length; ++i) {    final double previousX=currentX;    final double previousY=currentY;    currentX=observations[i].getX();    currentY=observations[i].getY();    final double currentYPrime=(currentY - previousY) / (currentX - previousX);    double omegaX=omega * currentX;    double cosine=FastMath.cos(omegaX);    double sine=FastMath.sin(omegaX);    fcMean+=omega * currentY * cosine - currentYPrime * sine;    fsMean+=omega * currentY * sine + currentYPrime * cosine;  }  return FastMath.atan2(-fsMean,fcMean);}  }
class C{  public static void o(Zdiagmat D){  o(D,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);}  }
class C{  public void drawChartTransposed(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  int x0=leftMargin;  int x1=getWidth() - rightMargin;  if (x0 >= x1)   return;  int numberOfClasses=getChartData().getNumberOfClasses();  int numberOfDataSets=getChartData().getNumberOfSeries();  double xStep=(x1 - x0) / numberOfClasses;  double yStep=(y0 - y1) / (0.5 + numberOfDataSets);  double maxValue=getChartData().getRange().get2().doubleValue();  if (scalingType == ChartViewer.ScalingType.LOG && maxValue > 0)   maxValue=Math.log(maxValue); else   if (scalingType == ChartViewer.ScalingType.SQRT && maxValue > 0)   maxValue=Math.sqrt(maxValue); else   if (scalingType == ChartViewer.ScalingType.PERCENT)   maxValue=100;  int gridWidth=5;  double drawWidth=(double)maxRadius / (double)gridWidth;  int totalBoxes=gridWidth * gridWidth;  int e=maxValue > 0 ? (int)Math.ceil(Math.log10(maxValue)) : 0;  int x=(int)Math.ceil(maxValue / Math.pow(10,e));  int boxValue=(int)((x * Math.pow(10,e)) / totalBoxes);  int c=0;  for (  String className : getChartData().getClassNames()) {    if (isShowXAxis()) {      double xLabel=x0 + (c + 0.5) * xStep;      Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelected(null,className)) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));      if (sgc != null)       sgc.setCurrentItem(new String[]{null,className});      drawString(gc,className,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null)       sgc.clearCurrentItem();    }    int d=0;    for (    String series : getChartData().getSeriesNames()) {      double value;      if (scalingType == ChartViewer.ScalingType.PERCENT) {        double total=getChartData().getTotalForClassIncludingDisabledSeries(className);        if (total == 0)         value=0; else         value=100 * getChartData().getValueAsDouble(series,className) / total;      } else       if (scalingType == ChartViewer.ScalingType.LOG) {        value=getChartData().getValueAsDouble(series,className);        if (value > 1)         value=Math.log(value);      } else       if (scalingType == ChartViewer.ScalingType.SQRT) {        value=getChartData().getValueAsDouble(series,className);        if (value > 1)         value=Math.sqrt(value);      } else       value=getChartData().getValueAsDouble(series,className);      Point bottomLeft=new Point((int)((x0 + (c + 0.5) * xStep) - maxRadius / 2),(int)((y0 - (d + 1) * yStep)));      Color color=getChartColors().getSampleColorWithAlpha(series,150);      gc.setColor(color);      int numberOfBoxes=(value <= 0 ? 0 : (int)Math.ceil(totalBoxes / maxValue * value));      int currentWidth=Math.min(totalBoxes,(int)Math.ceil(Math.sqrt(numberOfBoxes + 1)));      Rectangle2D rect=new Rectangle2D.Double();{        if (sgc != null)         sgc.setCurrentItem(new String[]{series,className});        int row=0;        int col=0;        for (int i=1; i <= numberOfBoxes; i++) {          rect.setRect(bottomLeft.x + col * drawWidth,bottomLeft.y - row * drawWidth,drawWidth,drawWidth);          if (i == numberOfBoxes) {            double coveredValue=(numberOfBoxes - 1) * boxValue;            double diff=value - coveredValue;            double factor=diff / boxValue;            double height=rect.getHeight() * factor;            double y=rect.getY() + (rect.getHeight() - height);            rect.setRect(rect.getX(),y,rect.getWidth(),height);          }          gc.fill(rect);          if ((i % currentWidth) == 0) {            col=0;            row++;          } else           col++;        }        if (sgc != null)         sgc.clearCurrentItem();      }      gc.setColor(color.darker());{        int row=0;        int col=0;        for (int i=1; i <= numberOfBoxes; i++) {          rect.setRect(bottomLeft.x + col * drawWidth,bottomLeft.y - row * drawWidth,drawWidth,drawWidth);          gc.draw(rect);          if ((i % currentWidth) == 0) {            col=0;            row++;          } else           col++;        }      }      boolean isSelected=getChartData().getChartSelection().isSelected(series,className);      if (isSelected) {        gc.setStroke(HEAVY_STROKE);        gc.setColor(ProgramProperties.SELECTION_COLOR);        int row=0;        int col=0;        for (int i=1; i <= numberOfBoxes; i++) {          rect.setRect(bottomLeft.x + col * drawWidth,bottomLeft.y - row * drawWidth,drawWidth,drawWidth);          gc.draw(rect);          if ((i % currentWidth) == 0) {            col=0;            row++;          } else           col++;        }        gc.setStroke(NORMAL_STROKE);      }      d++;      if (showValues || isSelected) {        String label="" + (int)getChartData().getValueAsDouble(series,className);        valuesList.add(new DrawableValue(label,bottomLeft.x + maxRadius + 2,bottomLeft.y - maxRadius / 2,isSelected));      }    }    c++;  }  if (valuesList.size() > 0) {    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    DrawableValue.drawValues(gc,valuesList,false,true);    valuesList.clear();  }  drawScale(gc,drawWidth,boxValue);}  }
class C{  private Object handleRuleWithNoInvalidTags(final Map<Long,Object> pInputParams) throws RuleEvaluationException {  final Object[] valueTokens=splitToTokens(pInputParams);  final Object result=Parser.getInstance().eval(valueTokens);  return result;}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public LogException(){  initCause(null);}  }
class C{  public void next(){  nextButton.click();}  }
class C{  public ArrayRealVector(double[] d,int pos,int size) throws MathIllegalArgumentException, NullArgumentException {  if (d == null) {    throw new NullArgumentException();  }  if (d.length < pos + size) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE,pos + size,d.length);  }  data=new double[size];  System.arraycopy(d,pos,data,0,size);}  }
class C{  private int sampleLine(ResultPoint p1,ResultPoint p2,int size){  int result=0;  float d=distance(p1,p2);  float moduleSize=d / size;  float px=p1.getX();  float py=p1.getY();  float dx=moduleSize * (p2.getX() - p1.getX()) / d;  float dy=moduleSize * (p2.getY() - p1.getY()) / d;  for (int i=0; i < size; i++) {    if (image.get(MathUtils.round(px + i * dx),MathUtils.round(py + i * dy))) {      result|=1 << (size - i - 1);    }  }  return result;}  }
class C{  public Object postMessage(String id,Object data){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      Object obj=plugin.onMessage(id,data);      if (obj != null) {        return obj;      }    }  }  return ctx.onMessage(id,data);}  }
class C{  public static String formatCurrency(BigDecimal price,String isoCode,Locale locale){  return formatCurrency(price,isoCode,locale,-1);}  }
class C{  private static void savePgr(DispatchContext dctx,GenericValue pgr){  Map<String,GenericValue> context=UtilMisc.<String,GenericValue>toMap("paymentGatewayResponse",pgr);  LocalDispatcher dispatcher=dctx.getDispatcher();  Delegator delegator=dctx.getDelegator();  try {    dispatcher.addRollbackService("savePaymentGatewayResponse",context,true);    delegator.create(pgr);  } catch (  Exception e) {    Debug.logError(e,module);  }}  }
class C{  public Builder minColumns(String... columns){  return add(ReduceOp.Min,columns);}  }
class C{  public TypeNode typeNode(Type type){  if (type == null) {    throw new InternalTypingException();  }  type=transform.toInt(type);  TypeNode typeNode=typeNodeMap.get(type);  if (typeNode == null) {    int id=typeNodeList.size();    typeNodeList.add(null);    typeNode=make.typeNode(id,type,this);    typeNodeList.set(id,typeNode);    typeNodeMap.put(type,typeNode);  }  return typeNode;}  }
class C{  public SourceEditor toggleWrap(){  return setWrap(!wrap);}  }
class C{  long increaseItemCount(Item item,long count,ItemUpdateType updateType,Player actor){  long leftCount=item.increaseItemCount(count);  ItemPacketService.sendItemPacket(actor,storageType,item,updateType);  setPersistentState(PersistentState.UPDATE_REQUIRED);  return leftCount;}  }
class C{  public static void print(Object x){  out.print(x);  out.flush();}  }
class C{  public String process(Item item) throws ProcessException {  return pos.getPartOfSpeech(item.toString());}  }
class C{  @Nullable private static Message findRootCause(@NotNull String text,@NotNull Collection<Message> messages){  for (  Message message : messages) {    if (message.getKind() != Message.Kind.INFO && message.getText().contains(text)) {      if (message.getSourceFilePositions().isEmpty()) {        return message;      }    }  }  int index=text.indexOf(':');  if (index != -1 && index < text.length() - 1) {    return findRootCause(text.substring(index + 1).trim(),messages);  }  return null;}  }
class C{  public MessagesGetChatQueryWithChatIdsFields nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public final void write(final byte[] b){  for (int x=0; x < b.length; x++) {    baos.write(b[x]);  }}  }
class C{  public boolean isValid(String value){  if (value == null) {    return false;  }  Matcher urlMatcher=URL_PATTERN.matcher(value);  if (!urlMatcher.matches()) {    return false;  }  String scheme=urlMatcher.group(PARSE_URL_SCHEME);  if (!isValidScheme(scheme)) {    return false;  }  String authority=urlMatcher.group(PARSE_URL_AUTHORITY);  if ("file".equals(scheme) && "".equals(authority)) {  } else {    if (!isValidAuthority(authority)) {      return false;    }  }  if (!isValidPath(urlMatcher.group(PARSE_URL_PATH))) {    return false;  }  if (!isValidQuery(urlMatcher.group(PARSE_URL_QUERY))) {    return false;  }  if (!isValidFragment(urlMatcher.group(PARSE_URL_FRAGMENT))) {    return false;  }  return true;}  }
class C{  public PlaceAutocompleteAdapter(Context context,GoogleApiClient googleApiClient,LatLngBounds bounds,AutocompleteFilter filter){  super(context,android.R.layout.simple_expandable_list_item_2,android.R.id.text1);  mGoogleApiClient=googleApiClient;  mBounds=bounds;  mPlaceFilter=filter;}  }
class C{  private static void visitSelectedLeavesRec(ClassificationViewer viewer,Node v,NodeSet selected,Vector<String> path,LinkedList<Map> rowList,LinkedList<int[]> dataList,ProgressListener progressListener) throws CanceledException {  if (v.getOutDegree() > 0 || selected.contains(v)) {    Integer classId=(Integer)v.getInfo();    String className=v == viewer.getTree().getRoot() ? "Root" : viewer.getClassification().getName2IdMap().get(classId);    path.addElement(className);    if (selected.contains(v)) {      NodeData data=viewer.getNodeData(v);      if (data != null) {        int[] values;        if (v.getOutDegree() == 0)         values=data.getSummarized(); else         values=data.getAssigned();        Map rowItem=new StringMap();        rowItem.put("id","" + classId);        Map metadata=new StringMap();        ArrayList<String> classification=new ArrayList<>(path.size());        classification.addAll(path);        metadata.put("taxonomy",classification);        rowItem.put("metadata",metadata);        rowList.add(rowItem);        dataList.add(values);      }      progressListener.incrementProgress();    }    for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {      visitSelectedLeavesRec(viewer,e.getTarget(),selected,path,rowList,dataList,progressListener);    }    path.setSize(path.size() - 1);  }}  }
class C{  public static void main(String[] args){  Distribution dDist=new Distribution();  dDist.setValue(1,0.9);  dDist.setValue(2,0.1);  System.out.println("Entropy: " + entropy(dDist));}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public int geom_frac_base(){  return soot.PhaseOptions.getInt(options,"geom-frac-base");}  }
class C{  public boolean isAssignableFrom(ServiceType cls){  if (hash == cls.hash)   return true;  if (isInterface()) {    if (cls.interfaces != null && isAssignableFrom(cls.interfaces))     return true;    for (ServiceType sup=cls.superclass; sup != null && sup.interfaces != null; sup=sup.superclass) {      if (isAssignableFrom(sup.interfaces))       return true;    }  } else {    for (ServiceType sup=cls.superclass; sup != null; sup=sup.superclass) {      if (hash == sup.hash)       return true;    }  }  return false;}  }
class C{  private Spinner initializeTypeSpinner(View view){  List<String> talismanNames=new ArrayList<>();  for (  String s : getResources().getStringArray(R.array.talisman_names)) {    String name=s.split(",")[0];    talismanNames.add(name);  }  Spinner spinner=(Spinner)view.findViewById(R.id.talisman_rank_spinner);  spinner.setAdapter(new ArrayAdapter<>(getActivity(),R.layout.support_simple_spinner_dropdown_item,talismanNames));  return spinner;}  }
class C{  public static boolean isNoDictionaryBlock(int[] noDictionaryColIndexes,int blockIndex){  if (null != noDictionaryColIndexes) {    for (    int noDictionaryValIndex : noDictionaryColIndexes) {      if (noDictionaryValIndex == blockIndex) {        return true;      }    }  }  return false;}  }
class C{  public static String msToSmpteTimecode(long milliseconds,BigFraction unitsInSec){  BigFraction ms=new BigFraction(milliseconds);  BigFraction msInMin=new BigFraction(60 * 1000);  BigFraction msInHour=new BigFraction(60 * 60 * 1000);  BigFraction msInSec=new BigFraction(1000);  BigFraction unitsInMs=unitsInSec.divide(msInSec);  int hours=ms.divide(msInHour).intValue();  int minutes=ms.subtract(msInHour.multiply(hours)).divide(msInMin).intValue();  int seconds=ms.subtract(msInHour.multiply(hours)).subtract(msInMin.multiply(minutes)).divide(msInSec).intValue();  int units=ms.subtract(msInHour.multiply(hours)).subtract(msInMin.multiply(minutes)).subtract(msInSec.multiply(seconds)).multiply(unitsInMs).intValue();  return String.format("%02d:%02d:%02d:%02d",hours,minutes,seconds,units);}  }
class C{  public static SLDWriterInterface createWriter(SLDOutputFormatEnum hint){  if (hint == null) {    hint=defaultWriter;  }switch (hint) {case YSLD:{      if (ysldWriterImpl == null) {        ysldWriterImpl=new YSLDWriterImpl();      }      return ysldWriterImpl;    }case SLD:default :{    if (sldWriterImpl == null) {      sldWriterImpl=new SLDWriterImpl();    }    return sldWriterImpl;  }}}  }
class C{  public static void init(){  HAS_GLES30=Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;  HAS_GL_OES_texture_half_float=checkExtension("GL_OES_texture_half_float");  HAS_GL_OES_texture_float=checkExtension("GL_OES_texture_float");  HAS_GPU_TEGRA=GLES20.glGetString(GLES20.GL_RENDERER).toLowerCase().contains("tegra");  if (HAS_GL_OES_texture_half_float || HAS_GL_OES_texture_float) {    try {      HAS_FLOAT_FRAMEBUFFER_SUPPORT=true;      new Framebuffer(8,8);    } catch (    RuntimeException e) {      Log.w(TAG,"float framebuffer test failed");      HAS_FLOAT_FRAMEBUFFER_SUPPORT=false;      GLUtils.clearError();    }  }}  }
class C{  @NonNull public static Observable<LoginResult> loginWithButton(@NonNull final LoginButton loginButton,@NonNull final android.app.Fragment fragment){  checkNotNull(fragment,"fragment == null");  checkNotNull(loginButton,"loginButton == null");  ReactiveFB.checkInit();  return Observable.create(new LoginWithButtonOnSubscribe(loginButton));}  }
class C{  public static boolean canLearnMoreMasterCraftingSkill(Player player){  return getTotalMasterCraftingSkills(player) < CraftConfig.MAX_MASTER_CRAFTING_SKILLS;}  }
class C{  public PhotosReorderPhotosQuery after(Integer value){  return unsafeParam("after",value);}  }
class C{  public boolean isFollowPeak(){  return followPeak;}  }
class C{  public void unregister(Object recipient){  unregisterFromLists(recipient,recipientsOfSubclassesAction);  unregisterFromLists(recipient,recipientsStrictAction);  cleanup();}  }
class C{  protected BoardDeleteCommentQuery topicId(int value){  return unsafeParam("topic_id",value);}  }
class C{  public SiteAdminPage movePage(String title,String destinationPath){  grid.selectPageByTitle(title);  grid.getActionBar().clickOnButton(SiteAdminButtons.MOVE,movePageWindow);  movePageWindow.typeDestinationPath(destinationPath);  movePageWindow.confirm();  clickYesOnConfirmationWindow();  grid.waitForLoaderNotPresent();  return this;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("zoom what=fit;");}  }
class C{  public static FSize calcTextSize(Paint paint,String demoText){  Rect r=new Rect();  paint.getTextBounds(demoText,0,demoText.length(),r);  return new FSize(r.width(),r.height());}  }
class C{  @Override public PolynomialSplineFunction interpolate(double x[],double y[]) throws MathIllegalArgumentException {  if (x.length != y.length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,x.length,y.length);  }  if (x.length < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_OF_POINTS,x.length,2,true);  }  int n=x.length - 1;  MathArrays.checkOrder(x);  final double m[]=new double[n];  for (int i=0; i < n; i++) {    m[i]=(y[i + 1] - y[i]) / (x[i + 1] - x[i]);  }  final PolynomialFunction polynomials[]=new PolynomialFunction[n];  final double coefficients[]=new double[2];  for (int i=0; i < n; i++) {    coefficients[0]=y[i];    coefficients[1]=m[i];    polynomials[i]=new PolynomialFunction(coefficients);  }  return new PolynomialSplineFunction(x,polynomials);}  }
class C{  String generateSharedPrefsString(){  return String.valueOf(mDownloadId) + "," + mInstallNotifyURI;}  }
class C{  protected void jimplifySpecial(DexBody body){  List<Local> parameters=buildParameters(body,false);  invocation=Jimple.v().newSpecialInvokeExpr(parameters.get(0),getSootMethodRef(),parameters.subList(1,parameters.size()));  body.setDanglingInstruction(this);}  }
class C{  public boolean filterOut(final SAMRecord record){  if (include) {    if (record.getReadFailsVendorQualityCheckFlag()) {      return false;    }  } else {    if (!record.getReadFailsVendorQualityCheckFlag()) {      return false;    }  }  return true;}  }
class C{  public MultiFile8BitAudioPlayer(){  this(Utilities.getProperty("com.sun.speech.freetts.AudioPlayer.baseName","freetts"),AudioFileFormat.Type.WAVE);}  }
class C{  public static <T>Aggregate<Map<String,Concept>,Map<Concept,T>> group(String varName,Aggregate<? super Map<String,Concept>,T> aggregate){  return Aggregates.group(varName,aggregate);}  }
class C{  public static boolean isMarkup(int c){  return c == '<' || c == '&' || c == '%';}  }
class C{  private Date parseDate(String date){  try {    return DateFormat.getDateInstance(DateFormat.SHORT).parse(date);  } catch (  ParseException e) {    MessageDialog.openError(getShell(),Messages.FilterRevisionsDialog_dateParseErrorTitle,Messages.FilterRevisionsDialog_dateParseErrorMessage);    return null;  }}  }
class C{  public static boolean timeIsValid(String time){  return TIME_OF_DAY_PATTERN.matcher(time).matches();}  }
class C{  public TypeInferencer(){  this(new ParserFactory());}  }
class C{  public void error(String message){  currentTest.get().error(message);}  }
class C{  public Z1(int n) throws JampackException {  if (n <= 0) {    throw new JampackException("Nonpositive dimension.");  }  this.n=n;  re=new double[n];  im=new double[n];}  }
class C{  private static <T>String flagDefaultValue(FlagField<T> field){  return field.valueString(field.defaultValue());}  }
class C{  public double distanceSquared(double x,double y,double z){  double xd=this.x - x;  double yd=this.y - y;  double zd=this.z - z;  return xd * xd + yd * yd + zd * zd;}  }
class C{  public void stop(){  stop(false);}  }
class C{  protected WallGetByIdQueryWithExtended posts(String... value){  return unsafeParam("posts",value);}  }
class C{  private void updateStyleAndText(){  updateStyleImp(style);  if (attr != null) {    mText=WXAttr.getValue(attr);  }}  }
class C{  public int compareTo(ByteBuffer byteBuffer1,ByteBuffer byteBuffer2){  if (byteBuffer1 == byteBuffer2) {    return 0;  }  int len1=byteBuffer1.remaining();  int len2=byteBuffer2.remaining();  byte[] buffer1=new byte[len1];  byte[] buffer2=new byte[len2];  byteBuffer1.get(buffer1);  byteBuffer2.get(buffer2);  return compareTo(buffer1,buffer2);}  }
class C{  boolean enabledInAndroid(Context context){  return enabledGlobally() && enabledForChrome(context);}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  @Override public boolean isRunning(){  return false;}  }
class C{  private void reset(){  boolean isStarted=isStarted();  clear();  build();  if (isStarted) {    start();  }}  }
class C{  private void ensureDataConformance(final double[] x,final double[] y) throws MathIllegalArgumentException, NullArgumentException {  if (x == null || y == null) {    throw new NullArgumentException();  }  if (x.length == 0 || y.length == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NO_DATA);  }  MathArrays.checkEqualLength(y,x);}  }
class C{  public static ResponseProperties createPartialContentResponse(String statusMessage){  return new ResponseProperties(HttpServletResponse.SC_PARTIAL_CONTENT,statusMessage);}  }
class C{  @Override public void handleMessage(Message msg){switch (msg.what) {case 0:    invalidate();  if (isSpinning) {    progress+=spinSpeed;    if (progress > 360) {      progress=0;    }    spinHandler.sendEmptyMessageDelayed(0,delayMillis);  }break;case 1:spinHandler.removeMessages(0);isSpinning=false;invalidate();break;}}  }
class C{  public void reportBadSelectors(DiagCollector collector,ConfigLocationResolver configLocationResolver,String category,String messagePrefix){  for (  RuleWrapper<RuleType> ruleWrapper : rules) {    for (    String selector : ruleWrapper.selectors) {      if (!SELECTOR_PATTERN.matcher(selector).matches()) {        collector.addDiag(getBadSelectorErrorDiag(configLocationResolver.getLocationInConfig(ruleWrapper.rule,SELECTOR_FIELD_NAME),category,messagePrefix,selector));      }    }  }}  }
class C{  public static <T extends Bean>T load(Bson query,Class<T> t){  String collection=getCollection(t);  if (collection != null) {    try {      T obj=t.newInstance();      return load(query,null,obj);    } catch (    Exception e) {      if (log.isErrorEnabled())       log.error(e.getMessage(),e);    }  }  return null;}  }
class C{  protected Column removeColumn(int idx){  if (idx < 0 || idx >= m_columns.size()) {    throw new IllegalArgumentException("Column index is not legal.");  }  String name=(String)m_names.get(idx);  ((ColumnEntry)m_entries.get(name)).dispose();  Column col=(Column)m_columns.remove(idx);  m_entries.remove(name);  m_names.remove(idx);  renumberColumns();  m_lastCol=-1;  invalidateSchema();  col.removeColumnListener(this);  fireTableEvent(m_rows.getMinimumRow(),m_rows.getMaximumRow(),idx,TableModelEvent.DELETE);  return col;}  }
class C{  public void apply(int alignmentNumber,Alignment alignment,int minReads,double minCoverage,int minLength,boolean sortAlignmentByContigs,ProgressListener progress) throws CanceledException {  progress.setSubtask("Building contigs");  progress.setMaximum(paths.length);  progress.setProgress(0);  countContigs=0;  countSingletons=singles.length;  for (  Node[] contig : paths) {    if (contig.length > 0) {      countContigs++;      final String contigName=(alignmentNumber == 0 ? String.format("Contig-%06d",countContigs) : String.format("Contig-%06d.%d",alignmentNumber,countContigs));      final StringBuilder sequenceBuffer=new StringBuilder();      int minCoordinate=Integer.MAX_VALUE;      int maxCoordinate=Integer.MIN_VALUE;      int totalBases=0;      int totalReads=0;      for (int i=0; i < contig.length; i++) {        totalReads++;        int readId=(Integer)contig[i].getInfo();        if (readId2ContainedReads[readId] != null) {          totalReads+=readId2ContainedReads[readId].size();        }        final Lane iLane=alignment.getLane(readId);        minCoordinate=Math.min(minCoordinate,iLane.getFirstNonGapPosition());        maxCoordinate=Math.max(maxCoordinate,iLane.getLastNonGapPosition());        totalBases+=iLane.getLastNonGapPosition() - iLane.getFirstNonGapPosition() + 1;        if (i + 1 < contig.length) {          int nextReadId=(Integer)contig[i + 1].getInfo();          int length=alignment.getLane(nextReadId).getFirstNonGapPosition() - iLane.getFirstNonGapPosition();          sequenceBuffer.append(iLane.getBlock().substring(0,length));        } else {          sequenceBuffer.append(iLane.getBlock());        }      }      if (totalReads < minReads) {        continue;      }      final String contigSequence=sequenceBuffer.toString().replaceAll("-","");      if (contigSequence.length() < minLength) {        continue;      }      float coverage=(float)totalBases / Math.max(1.0f,contigSequence.length());      if (coverage < minCoverage) {        continue;      }      final String referenceName=Basic.replaceSpaces(alignment.getReferenceName(),'_');      final Pair<String,String> aContig=new Pair<>();      aContig.setFirst(String.format(">%s\tlength=%d\treads=%d\tcoverage=%.1f\tref=%s\tcoords=%d..%d\n",contigName,contigSequence.length(),totalReads,coverage,Basic.swallowLeadingGreaterSign(referenceName),(minCoordinate + 1),(maxCoordinate + 1)));      aContig.setSecond(contigSequence);      System.err.print(aContig.getFirst());      result.add(aContig);    } else     countSingletons++;    progress.incrementProgress();  }  if (sortAlignmentByContigs)   sortAlignmentByContigs(alignment);  if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  protected MarketRemoveFromAlbumQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  public static <T>void cancel(Future<T> future){  future.raise(new FutureCancelledException());}  }
class C{  PopulateState(){  startStyles();  startLayers();}  }
class C{  public static float[] evaluate(List<String> automaticSentences,List<String> correctSentences){  logs.clear();  float[] pr=new float[2];  pr[0]=0;  pr[1]=0;  int n=Math.min(automaticSentences.size(),correctSentences.size());  int totalMatches=0;  int totalLen1=0;  int totalLen2=0;  for (int i=0; i < n; i++) {    String[] s1=automaticSentences.get(i).split("\\s+");    String[] s2=correctSentences.get(i).split("\\s+");    if (checkSentence(s1,s2)) {      int c=evaluate(s1,s2,i);      totalMatches+=c;      totalLen1+=s1.length;      totalLen2+=s2.length;    }  }  if (totalLen1 > 0) {    pr[0]=(float)totalMatches / totalLen1;  }  if (totalLen2 > 0) {    pr[1]=(float)totalMatches / totalLen2;  }  System.out.println("      #(matches) = " + totalMatches + " (words)");  System.out.println("Automatic length = " + totalLen1 + " (words)");  System.out.println("  Correct length = " + totalLen2 + " (words)");  System.out.println("       Precision = " + pr[0]);  System.out.println("          Recall = " + pr[1]);  return pr;}  }
class C{  private void addFolder(boolean descend,String name) throws FileNotFoundException {  Path pathPath=Paths.get(path);  FileTreeNode node=new FileTreeNode(pathPath,name);  this.add(node);  if (descend) {    node.populateDirectories(false);  }}  }
class C{  @Override protected void processPolar(double[] r,double[] phi){  int halfWinLength=r.length / 2;  for (int i=0; i < r.length; i++) {    double rNorm=r[i] / halfWinLength;    double factor=rNorm / (rNorm + threshold);    r[i]*=factor;  }}  }
class C{  public void populateFieldTypeConstraint(FieldIdEnum fieldId,List<FeatureTypeConstraint> ftcList){  if (fieldConfigManager == null) {    return;  }  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (fieldConfig != null) {    fieldConfig.populateField(ftcList);  }}  }
class C{  public static void appendBlocks(DAAHeader header,BlockType type,byte[][] blocks,int[] sizes) throws IOException {  BlockType[] types=new BlockType[blocks.length];  for (int i=0; i < types.length; i++) {    types[i]=type;  }  appendBlocks(header,types,blocks,sizes);}  }
class C{  public void removeHeader(String header){  clientHeaderMap.remove(header);}  }
class C{  public static synchronized ApplicationViewsSupport sharedInstance(){  if (sharedInstance == null)   sharedInstance=new ApplicationViewsSupport();  return sharedInstance;}  }
class C{  private void ensureCapacity(int n){  if (n <= 0) {    return;  }  int max;  if (data == null || data.length == 0) {    max=25;  } else   if (data.length >= n * 5) {    return;  } else {    max=data.length;  }  while (max < n * 5) {    max*=2;  }  String newData[]=new String[max];  if (length > 0) {    System.arraycopy(data,0,newData,0,length * 5);  }  data=newData;}  }
class C{  public SAXParser(SymbolTable symbolTable){  this(symbolTable,null);}  }
class C{  @Override public String toString(){  if (exception != null) {    return exception.toString();  } else {    return super.toString();  }}  }
class C{  public long seedLow(){  return seedLow;}  }
class C{  private void dismiss(){  preferencesManager.setDisplayed(usageId);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    if (isRevealAnimationEnabled)     exitRevealAnimation(); else     startFadeout();  } else {    startFadeout();  }}  }
class C{  public GroupsGetBannedQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public boolean isApproveData(){  for (  DataSet dataSet : getDataSets()) {    if (dataSet != null && dataSet.getWorkflow() != null) {      return true;    }  }  return false;}  }
class C{  public static double swapDouble(double value){  return Double.longBitsToDouble(swapLong(Double.doubleToLongBits(value)));}  }
class C{  private boolean validateEquippedWeapon(Item item,boolean validateOnly){  if (item.getItemTemplate().getArmorType() == ArmorType.ARROW) {    return false;  }  int[] requiredSkills=item.getItemTemplate().getWeaponType().getRequiredSkills();  if (!checkAvailableEquipSkills(requiredSkills)) {    return false;  }  Item itemInRightHand, itemInLeftHand;  long rightSlot, leftSlot;  if ((item.getEquipmentSlot() & ItemSlot.MAIN_OR_SUB.getSlotIdMask()) != 0) {    rightSlot=ItemSlot.MAIN_HAND.getSlotIdMask();    leftSlot=ItemSlot.SUB_HAND.getSlotIdMask();    itemInRightHand=equipment.get(rightSlot);    itemInLeftHand=equipment.get(leftSlot);  } else   if ((item.getEquipmentSlot() & ItemSlot.MAIN_OFF_OR_SUB_OFF.getSlotIdMask()) != 0) {    rightSlot=ItemSlot.MAIN_OFF_HAND.getSlotIdMask();    leftSlot=ItemSlot.SUB_OFF_HAND.getSlotIdMask();    itemInRightHand=equipment.get(rightSlot);    itemInLeftHand=equipment.get(leftSlot);  } else {    return false;  }  if (itemInRightHand == itemInLeftHand) {    itemInLeftHand=null;  }  int requiredInventorySlots=0;  boolean mainIsTwoHand=itemInRightHand != null && itemInRightHand.getItemTemplate().isTwoHandWeapon();  if (item.getItemTemplate().isTwoHandWeapon()) {    if (mainIsTwoHand) {      if (validateOnly) {        requiredInventorySlots++;        markedFreeSlots.add(rightSlot);        markedFreeSlots.add(leftSlot);      } else {        unEquip(rightSlot | leftSlot);      }    } else {      if (itemInRightHand != null) {        if (validateOnly) {          requiredInventorySlots++;          markedFreeSlots.add(rightSlot);        } else {          unEquip(rightSlot);        }      }      if (itemInLeftHand != null) {        if (validateOnly) {          requiredInventorySlots++;          markedFreeSlots.add(leftSlot);        } else {          unEquip(leftSlot);        }      }    }  } else {    if (itemInRightHand != null) {      boolean addingLeftHand=(item.getEquipmentSlot() & ItemSlot.LEFT_HAND.getSlotIdMask()) != 0;      if (mainIsTwoHand) {        if (validateOnly) {          requiredInventorySlots++;          markedFreeSlots.add(rightSlot);          markedFreeSlots.add(leftSlot);        } else {          unEquip(rightSlot | leftSlot);        }      } else       if (hasDualWieldingSkills()) {        if (itemInLeftHand == null && addingLeftHand) {          return true;        }        long switchSlot=addingLeftHand ? leftSlot : rightSlot;        if (validateOnly) {          requiredInventorySlots++;          markedFreeSlots.add(switchSlot);        } else {          unEquip(switchSlot);        }      } else {        if (addingLeftHand && itemInLeftHand != null) {          if (validateOnly) {            markedFreeSlots.add(leftSlot);          } else {            unEquip(leftSlot);          }        } else {          if (validateOnly) {            markedFreeSlots.add(rightSlot);          } else {            unEquip(rightSlot);          }          item.setEquipmentSlot(rightSlot);          return true;        }      }    }  }  return requiredInventorySlots == 0 || owner.getInventory().getFreeSlots() >= requiredInventorySlots;}  }
class C{  public Iterator inNeighbors(Node n){  return new NeighborIterator(n,inEdges(n));}  }
class C{  protected PrimeFinder(){}  }
class C{  @Override public void comment(XMLString text,Augmentations augs) throws XNIException {}  }
class C{  public static float enlarge(float startValue,float endValue,float time){  if (startValue > endValue)   throw new IllegalArgumentException("Start size can't be larger than end size.");  return startValue + (endValue - startValue) * time;}  }
class C{  public static Manager v(){  return G.v().soot_toolkits_exceptions_ThrowableSet_Manager();}  }
class C{  public static DirectCallExecutor newExecutor(SchedulingContextFactory schedulingContextFactory){  return new DirectCallExecutor(schedulingContextFactory);}  }
class C{  public static ItemStack writeQualityTag(ItemStack stack,Quality quality){  if (stack == null)   return stack;  if (!stack.hasTagCompound()) {    stack.setTagCompound(new NBTTagCompound());  }  stack.getTagCompound().setString(QUALITY_TAG,quality.getUnlocalizedName());  return stack;}  }
class C{  public GSMapMessageImpl() throws JMSException {  super();}  }
class C{  public PreviewMediaFragment(OCFile fileToDetail,Account ocAccount,int startPlaybackPosition,boolean autoplay){  super(fileToDetail);  mAccount=ocAccount;  mSavedPlaybackPosition=startPlaybackPosition;  mAutoplay=autoplay;}  }
class C{  public static Result verify(String sid,String code){  String id="//captcha/" + sid;  Code c=(Code)Cache.get(id);  if (c == null) {    log.warn("no code in cache, sid=" + sid);    return Result.badcode;  } else   if (!X.isSame(code,c.code)) {    log.warn("is not same, code.server=" + c.code + ", code.client="+ code);    return Result.badcode;  } else   if (c.expired < System.currentTimeMillis()) {    log.warn("expired, expired=" + c.expired);    return Result.expired;  }  return Result.ok;}  }
class C{  private CrashHandler(){}  }
class C{  public static void writeToEntityXml(String fileName,DataFile dataFile) throws DataFileException {  File file=new File(fileName);  BufferedWriter outFile=null;  try {    outFile=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),"UTF-8"));  } catch (  Exception e) {    throw new DataFileException("Could not open file " + fileName,e);  }  try {    outFile.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");    outFile.newLine();    outFile.write("<entity-engine-xml>");    outFile.newLine();    for (    Record record : dataFile.getRecords()) {      ModelRecord modelRecord=record.getModelRecord();      outFile.write("<" + modelRecord.name + " ");      for (      ModelField modelField : modelRecord.fields) {        if (modelField.ignored)         continue;        Object value=record.get(modelField.name);        if (value == null) {          value=modelField.defaultValue;        }        if (value instanceof String) {          value=((String)value).trim();          if (((String)value).length() == 0) {            value=modelField.defaultValue;          }        }        if (value != null) {          if (value instanceof String) {            outFile.write(modelField.name + "=\"" + UtilFormatOut.encodeXmlValue((String)value)+ "\" ");          } else {            outFile.write(modelField.name + "=\"" + value+ "\" ");          }        }      }      outFile.write("/>");      outFile.newLine();    }    outFile.write("</entity-engine-xml>");    outFile.close();  } catch (  IOException e) {    throw new DataFileException("Error writing to file " + fileName,e);  }}  }
class C{  public void onCameraOpened(CameraView cameraView){}  }
class C{  public void add(RemoteEventBusPacket packet){  OperationID id=packet.getStatus().getOperationId();  ConcurrentHashSet<RemoteEventBusPacket> outgoingEventsForOperation=_outgoingEvents.get(id);  if (outgoingEventsForOperation == null) {    outgoingEventsForOperation=new ConcurrentHashSet<RemoteEventBusPacket>();    ConcurrentHashSet<RemoteEventBusPacket> previous=_outgoingEvents.putIfAbsent(id,outgoingEventsForOperation);    if (previous != null)     outgoingEventsForOperation=previous;  }  outgoingEventsForOperation.add(packet);}  }
class C{  public GroupsEditQuery marketCity(List<Integer> value){  return unsafeParam("market_city",value);}  }
class C{  public static MyServicePrx uncheckedCast(Ice.ObjectPrx __obj){  return uncheckedCastImpl(__obj,MyServicePrx.class,MyServicePrxHelper.class);}  }
class C{  public boolean isSeparateGroup(){  if (separateGroup == null) {    return false;  } else {    return separateGroup;  }}  }
class C{  private static long convertToLong(int[] seed){  final long prime=4294967291l;  long combined=0l;  for (  int s : seed) {    combined=combined * prime + s;  }  return combined;}  }
class C{  public void requestRemoveNodesStart(){  if (exclusion == true || inclusion == true) {    logger.debug("ZWave exclusion already in progress - aborted");    return;  }  enqueue(new RemoveNodeMessageClass().doRequestStart());  exclusion=true;  startInclusionTimer();  logger.debug("ZWave controller start exclusion");}  }
class C{  @Override public void onMessage(final Message message,final Session session) throws JMSException {  if (LOG.isDebugEnabled()) {    LOG.debug("onMessage() : Client request received.");  }  try {    Destination replyDestination=null;    try {      replyDestination=message.getJMSReplyTo();    } catch (    JMSException jmse) {      LOG.error("onMessage() : Cannot extract ReplyTo from message.",jmse);      throw jmse;    }    ClientRequest clientRequest=ClientRequestMessageConverter.fromMessage(message);    Collection<? extends ClientRequestResult> response=handleClientRequest(clientRequest,session,replyDestination);    if (replyDestination != null) {      MessageProducer messageProducer=session.createProducer(replyDestination);      try {        messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);        messageProducer.setTimeToLive(DEFAULT_REPLY_TTL);        Message replyMessage=null;        if (clientRequest.requiresObjectResponse()) {          replyMessage=session.createObjectMessage((Serializable)response);        } else {switch (clientRequest.getResultType()) {case TRANSFER_TAG_LIST:case TRANSFER_TAG_VALUE_LIST:            replyMessage=session.createTextMessage(TransferTagSerializer.getJacksonParser().writeValueAsString(response));          break;default :        replyMessage=session.createTextMessage(GSON.toJson(response));    }  }  if (LOG.isDebugEnabled()) {    LOG.debug("onMessage() : Responded to ClientRequest.");  }  messageProducer.send(replyMessage);}  finally {  messageProducer.close();}} else {LOG.error("onMessage() : JMSReplyTo destination is null - cannot send reply.");throw new MessageConversionException("JMS reply queue could not be extracted (returned null).");}} catch (Exception e) {LOG.error("Exception caught while processing client request - unable to process it; request will time out",e);}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHANGE_ITEM_SKIN_INVALID_STANCE(String value0){  return new SM_SYSTEM_MESSAGE(1300484,value0);}  }
class C{  public int prepareAndCommit(TransactionManager mgr,ServerTransaction st,OperationID operationID) throws UnknownTransactionException, RemoteException {  if (_operationLogger.isLoggable(Level.FINEST))   _operationLogger.finest("preparing and committing transaction [" + createTransactionDetailsString(st,operationID) + "]");  int result;  if (isExecutedAlready(operationID)) {    handleDuplicateCommitOperation(st,operationID);    result=TransactionConstants.COMMITTED;  } else {    result=prepare(mgr,st,true,false,operationID);    if (result == TransactionConstants.PREPARED) {      commitSA(mgr,st,false,null,true);      result=TransactionConstants.COMMITTED;    }  }  if (_operationLogger.isLoggable(Level.FINEST))   _operationLogger.finest("prepared and committed transaction [" + createTransactionDetailsString(st,operationID) + "] result="+ result);  return result;}  }
class C{  public void startRTM(String slackToken){  RTM rtm=slackDao.startRTM(slackToken);  currentUser=rtm.getUser();  dmChannels=rtm.getDmChannels();  webSocketUrl=rtm.getWebSocketUrl();}  }
class C{  @Override public void endConditional(Augmentations augs) throws XNIException {}  }
class C{  public WallGetByIdQueryWithExtended fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  public SecureGetUserLevelQuery(VkApiClient client,ServiceActor actor,int... userIds){  super(client,"secure.getUserLevel",Utils.buildParametrizedType(List.class,Level.class));  accessToken(actor.getAccessToken());  clientSecret(actor.getClientSecret());  userIds(userIds);}  }
class C{  protected BoardFixTopicQuery topicId(int value){  return unsafeParam("topic_id",value);}  }
class C{  protected AuthConfirmQuery clientSecret(String value){  return unsafeParam("client_secret",value);}  }
class C{  public void testDeployIntermediateVersionWithoutSignalStartEvent(){  String deploymentId1=deployStartSignalTestProcess();  assertEquals(1,getAllEventSubscriptions().size());  assertEquals(0,runtimeService.createProcessInstanceQuery().count());  runtimeService.signalEventReceived("myStartSignal");  assertEquals(1,runtimeService.createProcessInstanceQuery().count());  assertEventSubscriptionsCount(1);  String deploymentId2=deployProcessWithoutEvents();  assertEquals(0,getAllEventSubscriptions().size());  assertEquals(1,runtimeService.createProcessInstanceQuery().count());  runtimeService.signalEventReceived("myStartSignal");  assertEquals(1,runtimeService.createProcessInstanceQuery().count());  assertEventSubscriptionsCount(0);  String deploymentId3=deployStartSignalTestProcess();  assertEquals(1,getAllEventSubscriptions().size());  assertEquals(1,runtimeService.createProcessInstanceQuery().count());  runtimeService.signalEventReceived("myStartSignal");  assertEquals(2,runtimeService.createProcessInstanceQuery().count());  assertEventSubscriptionsCount(1);  List<EventSubscriptionEntity> eventSubscriptions=getAllEventSubscriptions();  assertEquals(repositoryService.createProcessDefinitionQuery().deploymentId(deploymentId3).singleResult().getId(),eventSubscriptions.get(0).getProcessDefinitionId());  cleanup(deploymentId1,deploymentId2,deploymentId3);}  }
class C{  public Dfp nextAfter(final Dfp x){  if (field.getRadixDigits() != x.field.getRadixDigits()) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    final Dfp result=newInstance(getZero());    result.nans=QNAN;    return dotrap(DfpField.FLAG_INVALID,NEXT_AFTER_TRAP,x,result);  }  boolean up=false;  if (this.lessThan(x)) {    up=true;  }  if (compare(this,x) == 0) {    return newInstance(x);  }  if (lessThan(getZero())) {    up=!up;  }  final Dfp inc;  Dfp result;  if (up) {    inc=newInstance(getOne());    inc.exp=this.exp - mant.length + 1;    inc.sign=this.sign;    if (this.equals(getZero())) {      inc.exp=MIN_EXP - mant.length;    }    result=add(inc);  } else {    inc=newInstance(getOne());    inc.exp=this.exp;    inc.sign=this.sign;    if (this.equals(inc)) {      inc.exp=this.exp - mant.length;    } else {      inc.exp=this.exp - mant.length + 1;    }    if (this.equals(getZero())) {      inc.exp=MIN_EXP - mant.length;    }    result=this.subtract(inc);  }  if (result.classify() == INFINITE && this.classify() != INFINITE) {    field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);    result=dotrap(DfpField.FLAG_INEXACT,NEXT_AFTER_TRAP,x,result);  }  if (result.equals(getZero()) && this.equals(getZero()) == false) {    field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);    result=dotrap(DfpField.FLAG_INEXACT,NEXT_AFTER_TRAP,x,result);  }  return result;}  }
class C{  public StatelessChunkListDataIterator(String hQuery,SessionFactory sessionFactory,int fetchSize,int chunkSize){  super(hQuery,sessionFactory,fetchSize,chunkSize);}  }
class C{  public IntegerProperty countProperty(){  return count;}  }
class C{  public synchronized boolean wasReleased(){  return this.released;}  }
class C{  public final boolean isAlternatingLocale(){  return (myAlternate & CFG_LOCALE) != 0;}  }
class C{  @Override public void clearDataTags(){  sourceDataTags.clear();  movingAverages.clear();}  }
class C{  final short findParserAction(int state,short lookahead){  int index=actn_offsets[state];  if (index != UNUSED_OFFSET) {    index+=lookahead;    if (0 <= index && index < actions.length && lookaheads[index] == lookahead) {      return actions[index];    }  }  return compressed ? default_actions[state] : 0;}  }
class C{  public static boolean hasKitkat(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;}  }
class C{  public boolean addProcessId(final Long processId){  if (processId != null && processId > 0) {    return processIds.add(processId);  }  return false;}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public static String readStringFromFile(String path,SparkContext sc) throws IOException {  FileSystem fileSystem=FileSystem.get(sc.hadoopConfiguration());  try (BufferedInputStream bis=new BufferedInputStream(fileSystem.open(new Path(path)))){    byte[] asBytes=IOUtils.toByteArray(bis);    return new String(asBytes,"UTF-8");  } }  }
class C{  public static <T>Flowable<T> whileDo(Publisher<? extends T> source,BooleanSupplier preCondition){  ObjectHelper.requireNonNull(source,"source is null");  ObjectHelper.requireNonNull(preCondition,"preCondition is null");  return RxJavaPlugins.onAssembly(new FlowableWhileDoWhile<T>(source,preCondition,preCondition));}  }
class C{  void clear(){  panelFont=null;  this.repaint();}  }
class C{  public void addToBreakList(String labelBroken,DavaFlowSet<T> set){  List<DavaFlowSet<T>> labelsBreakList=breakList.get(labelBroken);  if (labelsBreakList == null) {    labelsBreakList=new ArrayList<DavaFlowSet<T>>();    labelsBreakList.add(set);    breakList.put(labelBroken,labelsBreakList);  } else {    breakList.put(labelBroken,addIfNotDuplicate(labelsBreakList,set));  }}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  long before=mTotalSize;  int prunedFiles=0;  Iterator<Map.Entry<String,CacheHeader>> iterator=mDataEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    mTotalSize-=e.data.length;    iterator.remove();    ++prunedFiles;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }}  }
class C{  public void deleteComponent(String parsys,String componentName){  globalBar.switchToEditMode();  getParsys(parsys).deleteComponent(componentName);  verifyParsysRerendered(parsys);}  }
class C{  public static void paintDebug(Graphics g,int viewMargin,ViewTransform viewTransform){  if (!DEBUG) {    return;  }  if (debugDraw != null) {    g.setColor(Color.GREEN.darker());    for (    Rectangle r : debugDraw) {      int x=viewMargin + viewTransform.getSwingX(r.x);      int y=viewMargin + viewTransform.getSwingY(r.y);      int wid=viewTransform.getSwingDimension(r.width);      int hei=viewTransform.getSwingDimension(r.height);      if (r != null) {        g.drawRect(x,y,wid,hei);      }    }    g.setColor(Color.RED);{      Rectangle r=debugBestRect;      int x=viewMargin + viewTransform.getSwingX(r.x);      int y=viewMargin + viewTransform.getSwingY(r.y);      int wid=viewTransform.getSwingDimension(r.width);      int hei=viewTransform.getSwingDimension(r.height);      if (r != null) {        g.drawRect(x,y,wid,hei);      }    }    g.setColor(new Color(0x50909022,true));    for (    Rectangle r : debugGap) {      int x=viewMargin + viewTransform.getSwingX(r.x);      int y=viewMargin + viewTransform.getSwingY(r.y);      int wid=viewTransform.getSwingDimension(r.width);      int hei=viewTransform.getSwingDimension(r.height);      if (r != null) {        g.fillRect(x,y,wid,hei);      }    }  }}  }
class C{  public int hashCode(){  long v=Double.doubleToLongBits(value);  return (int)(v ^ (v >>> 32));}  }
class C{  public T walkInDefaultOrder(final FieldVectorChangingVisitor<T> visitor){  final int dim=getDimension();  visitor.start(dim,0,dim - 1);  for (int i=0; i < dim; i++) {    setEntry(i,visitor.visit(i,getEntry(i)));  }  return visitor.end();}  }
class C{  protected void mangleClass(StringBuilder sb,Class cl){  String name=cl.getName();  if (cl.isArray()) {    sb.append("array_");    this.mangleClass(sb,cl.getComponentType());  } else {    sb.append(name);  }}  }
class C{  public PhotosGetAlbumsCountQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  @Override public void processingInstruction(String target,String data) throws SAXException {  return;}  }
class C{  public Number avg(SelectColumn funcColumn,IQueryResultSet<IEntryPacket> entries) throws SQLException {  Iterator<IEntryPacket> iter=entries.iterator();  IEntryPacket entry=iter.next();  Number sum=getNumber(entry,funcColumn,entries);  String numberClassName=sum.getClass().getName();  sum=sum.doubleValue();  String doubleType=Double.class.getName();  double size=entries.size();  while (iter.hasNext()) {    entry=iter.next();    Number value=getNumber(entry,funcColumn,entries);    sum=NumberUtil.add(sum,value.doubleValue(),doubleType);  }  Number avg=NumberUtil.divide(sum,size,numberClassName);  return avg;}  }
class C{  @POST @Produces(MediaType.APPLICATION_JSON) @Path("/data") public void postData(@Context UriInfo uriInfo,@Suspended AsyncResponse asyncResponse){  StringBuilder b=new StringBuilder();  for (int i=0; i < 65536; i++) {    b.append((char)('A' + i % 26));  }  asyncResponse.resume(b.toString());}  }
class C{  @Override public List<Class<? extends ConfigAspect>> mergeDependencies(){  return ImmutableList.of();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("select series=");  List<String> list=np.getTokensRespectCase(null,";");  ChartViewer viewer=(ChartViewer)getViewer();  for (  String name : list) {    if (name.equalsIgnoreCase("all"))     viewer.getChartSelection().setSelectedSeries(viewer.getChartData().getSeriesNames(),true); else     if (name.equalsIgnoreCase("none"))     viewer.getChartSelection().setSelectedSeries(viewer.getChartData().getSeriesNames(),false); else     viewer.getChartSelection().setSelectedSeries(name,true);  }  viewer.repaint();}  }
class C{  public static boolean nullSafeEquals(Object o1,Object o2){  if (o1 == o2)   return true;  if (o1 == null || o2 == null)   return false;  if (o1.equals(o2))   return true;  if (o1 instanceof Object[] && o2 instanceof Object[])   return Arrays.equals((Object[])o1,(Object[])o2);  if (o1 instanceof byte[] && o2 instanceof byte[])   return Arrays.equals((byte[])o1,(byte[])o2);  if (o1 instanceof short[] && o2 instanceof short[])   return Arrays.equals((short[])o1,(short[])o2);  if (o1 instanceof int[] && o2 instanceof int[])   return Arrays.equals((int[])o1,(int[])o2);  if (o1 instanceof long[] && o2 instanceof long[])   return Arrays.equals((long[])o1,(long[])o2);  if (o1 instanceof float[] && o2 instanceof float[])   return Arrays.equals((float[])o1,(float[])o2);  if (o1 instanceof double[] && o2 instanceof double[])   return Arrays.equals((double[])o1,(double[])o2);  if (o1 instanceof boolean[] && o2 instanceof boolean[])   return Arrays.equals((boolean[])o1,(boolean[])o2);  if (o1 instanceof char[] && o2 instanceof char[])   return Arrays.equals((char[])o1,(char[])o2);  return false;}  }
class C{  public void activate(){  getViewer().getSearchManager().setSearcher(getSearcher());  getViewer().getSearchManager().getFindDialogAsToolBar().clearMessage();  if (!inSelection) {    inSelection=true;    try {      chartSelection.clearSelectionSeries();      chartSelection.setSelectedSeries(getSelectedLabels(),true);      this.repaint();    }  finally {      inSelection=false;    }  }}  }
class C{  @Override public void activate(){}  }
class C{  @Deployment public void testActivitySignalEvents() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("signalProcess");  assertNotNull(processInstance);  Execution executionWithSignal=runtimeService.createExecutionQuery().activityId("receivePayment").singleResult();  assertNotNull(executionWithSignal);  runtimeService.trigger(executionWithSignal.getId());  assertEquals(1,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiSignalEvent);  ActivitiSignalEvent signalEvent=(ActivitiSignalEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_SIGNALED,signalEvent.getType());  assertEquals("receivePayment",signalEvent.getActivityId());  assertEquals(executionWithSignal.getId(),signalEvent.getExecutionId());  assertEquals(executionWithSignal.getProcessInstanceId(),signalEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),signalEvent.getProcessDefinitionId());  assertNull(signalEvent.getSignalName());  assertNull(signalEvent.getSignalData());  listener.clearEventsReceived();  Execution executionWithSignalEvent=runtimeService.createExecutionQuery().activityId("shipOrder").singleResult();  runtimeService.signalEventReceived("alert",executionWithSignalEvent.getId(),Collections.singletonMap("test",(Object)"test"));  assertEquals(1,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiSignalEvent);  signalEvent=(ActivitiSignalEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_SIGNALED,signalEvent.getType());  assertEquals("shipOrder",signalEvent.getActivityId());  assertEquals(executionWithSignalEvent.getId(),signalEvent.getExecutionId());  assertEquals(executionWithSignalEvent.getProcessInstanceId(),signalEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),signalEvent.getProcessDefinitionId());  assertEquals("alert",signalEvent.getSignalName());  assertNotNull(signalEvent.getSignalData());  listener.clearEventsReceived();  assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_SIGNALED);}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  public static String methodNameToFieldName(String methodPrefix,String methodName){  return methodNameToFieldName(methodPrefix,methodName,false);}  }
class C{  public static void renameTableForDeletion(int partitionCount,String storePath,String databaseName,String tableName){  String tableNameWithPartition="";  String databaseNameWithPartition="";  String fullPath="";  String newFilePath="";  String newFileName="";  Callable<Void> c=null;  long time=System.currentTimeMillis();  FileFactory.FileType fileType=null;  ExecutorService executorService=Executors.newFixedThreadPool(10);  for (int i=0; i < partitionCount; i++) {    databaseNameWithPartition=databaseName + '_' + i;    tableNameWithPartition=tableName + '_' + i;    newFileName=tableNameWithPartition + '_' + time;    fullPath=storePath + File.separator + databaseNameWithPartition+ File.separator+ tableNameWithPartition;    newFilePath=storePath + File.separator + databaseNameWithPartition+ File.separator+ newFileName;    fileType=FileFactory.getFileType(fullPath);    try {      if (FileFactory.isFileExist(fullPath,fileType)) {        CarbonFile file=FileFactory.getCarbonFile(fullPath,fileType);        boolean isRenameSuccessfull=file.renameTo(newFilePath);        if (!isRenameSuccessfull) {          LOGGER.error("Problem renaming the table :: " + fullPath);          c=new DeleteFolderAndFiles(file);          executorService.submit(c);        } else {          c=new DeleteFolderAndFiles(FileFactory.getCarbonFile(newFilePath,fileType));          executorService.submit(c);        }      }    } catch (    IOException e) {      LOGGER.error("Problem renaming the table :: " + fullPath);    }  }  executorService.shutdown();}  }
class C{  public int uninstallSilent(Context context,String packageName){  return uninstallSilent(context,packageName,false);}  }
class C{  public void connect(List<StompHeader> _headers,boolean reconnect){  if (reconnect)   disconnect();  if (mConnected)   return;  mConnectionProvider.getLifecycleReceiver().subscribe(null);  mMessagesSubscription=mConnectionProvider.messages().map(null).subscribe(null);}  }
class C{  public EglCore(){  this(null,0);}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),0);  setChild(new List(),1);}  }
class C{  @Override public void onClick(View v){  int id=v.getId();switch (id) {case R.id.email_login_button:    login();  break;case R.id.guest_login:guestLogin();break;case R.id.gplus_login_button:signInWithGPlus();break;default :break;}}  }
class C{  private void createField(String key,String labelString){  int row=textFieldMap.size();  int y=row * ROW_HEIGHT;  JLabel label=new JLabel(labelString);  label.setBounds(LABEL_X,y,LABEL_WIDTH,FIELD_HEIGHT);  panel.add(label);  JTextField textField=new JTextField();  textField.setBounds(FIELD_X,y,FIELD_WIDTH,FIELD_HEIGHT);  textFieldMap.put(key,textField);  panel.add(textField);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_INTERVAL_HEAL_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201058,num0,skilltarget,skillname);}  }
class C{  public static void register(String owner,GUIHandler handler){  handlers.put(owner,handler);}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public PhotosSaveWallPhotoQuery server(Integer value){  return unsafeParam("server",value);}  }
class C{  public static void resume(){  TrafficService service=getAirMapTrafficService();  if (service != null) {    service.connect();  }}  }
class C{  static public String trimDoubleQuotesIfAny(String value){  if (value != null) {    int len=value.length();    if (len > 2 && value.charAt(0) == '\"' && value.charAt(len - 1) == '\"') {      return value.substring(1,len - 1);    }  }  return value;}  }
class C{  public static RuntimeEnvironment system(InputStream in,OutputStream out,OutputStream err){  return new SystemRuntimeEnvironment(in,out,err);}  }
class C{  public static String utf8BytesWithUtf16LengthToString(@Nonnull byte[] bytes,int start,int utf16Length){  return utf8BytesWithUtf16LengthToString(bytes,start,utf16Length,null);}  }
class C{  public static String removeDelimiter(String s,char delim){  return removeDelimiter(s,delim,(char)-1,(char)-1);}  }
class C{  private void assignAnglesToSplits(double[] TaxaAngles,double[] split2angle,SplitSystem splits,int[] cycle) throws NotOwnerException {  for (int s=1; s <= splits.size(); s++) {    BitSet part=splits.getSplit(s).getA();    if (part.get(1))     part=splits.getSplit(s).getB();    int xp=0;    int xq=0;    for (int i=1; i <= ntax; i++) {      int t=cycle[i];      if (part.get(t)) {        if (xp == 0)         xp=i;        xq=i;      }    }    int xpneighbour=(xp - 2) % ntax + 1;    int xqneighbour=(xq) % ntax + 1;    double TaxaAngleP;    double TaxaAngleQ;    TaxaAngleP=Geometry.midAngle(TaxaAngles[xp],TaxaAngles[xpneighbour]);    TaxaAngleQ=Geometry.midAngle(TaxaAngles[xq],TaxaAngles[xqneighbour]);    split2angle[s]=Geometry.moduloTwoPI((TaxaAngleQ + TaxaAngleP) / 2);    if (xqneighbour == 1) {      split2angle[s]=Geometry.moduloTwoPI(split2angle[s] + Math.PI);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDARTIFACT_CORE_CASTING(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400314,value1,value0);}  }
class C{  @NotNull public List<String> modulePaths(){  List<String> result=Lists.newArrayList();  result.add(":");  List<String> includePaths=myGradleDslFile.getListProperty(INCLUDE,String.class);  if (includePaths == null) {    return result;  }  for (  String includePath : includePaths) {    result.add(standardiseModulePath(includePath));  }  return result;}  }
class C{  @Override public int peekChar() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int c=fCurrentEntity.ch[fCurrentEntity.position];  if (fCurrentEntity.isExternal()) {    return (c != '\r' && c != 0x85 && c != 0x2028) ? c : '\n';  } else {    return c;  }}  }
class C{  public UnicastResponse(String host,int port,String[] groups,ServiceRegistrar registrar){  this(host,port,groups,registrar,null,null);}  }
class C{  public void unify(Atomic parentAtom){  unifyViaAtom(parentAtom);  propagateConstraints(parentAtom);}  }
class C{  protected void handleRestricted(File directory,int depth,Collection<T> results) throws IOException {}  }
class C{  public boolean hasFill(){  return SLDTreeLeafFactory.getInstance().hasFill(getSymbolizer());}  }
class C{  public DocsGetQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static void drawTableControls(ViewTransform transform,Graphics2D g,ConstraintTableLayout table){  ArrayList<Guideline> vertical=table.getVerticalGuidelines();  Graphics2D g2=(Graphics2D)g.create();  g2.setStroke(new BasicStroke(1));  int l=transform.getSwingX(table.getDrawX());  int t=transform.getSwingY(table.getDrawY());  g2.setFont(sFont);  g2.drawRect(l,t - 20 - 4,20,20);  int column=0;  String align=table.getColumnAlignmentRepresentation(column++);  g2.drawString(align,l + 5,t - 4 - 5);  for (  ConstraintWidget v : vertical) {    int x=transform.getSwingX(v.getX()) + l;    g2.drawRect(x,t - 20 - 4,20,20);    align=table.getColumnAlignmentRepresentation(column++);    g2.drawString(align,x + 5,t - 4 - 5);  }  g2.dispose();}  }
class C{  @Nullable @WorkerThread static File writeBitmapToFile(@NonNull Bitmap bitmap,@NonNull File file){  FileOutputStream fileStream=null;  try {    ByteArrayOutputStream byteStream=new ByteArrayOutputStream();    bitmap.compress(Bitmap.CompressFormat.PNG,0,byteStream);    fileStream=new FileOutputStream(file);    fileStream.write(byteStream.toByteArray());    return file;  } catch (  IOException e) {    Log.e(TAG,e.getMessage(),e);  } finally {    if (fileStream != null) {      try {        fileStream.close();      } catch (      IOException e) {        Log.e(TAG,e.getMessage(),e);      }    }  }  return null;}  }
class C{  public double pace(double f){  return 2 * (f <= 0.5 ? f : (1 - f));}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  public RotateEvent(BinlogEventHeader eventHeader){  super(eventHeader);}  }
class C{  public static boolean checkAnyUserHasSeenToS(Context context){  HashSet<String> toSAckedAccounts=(HashSet<String>)PreferenceManager.getDefaultSharedPreferences(context).getStringSet(TOS_ACKED_ACCOUNTS,null);  if (toSAckedAccounts == null || toSAckedAccounts.isEmpty())   return false;  AccountManagerHelper accountHelper=AccountManagerHelper.get(context);  List<String> accountNames=accountHelper.getGoogleAccountNames();  if (accountNames.isEmpty())   return false;  for (int k=0; k < accountNames.size(); k++) {    if (toSAckedAccounts.contains(accountNames.get(k)))     return true;  }  return false;}  }
class C{  private synchronized void decRef(){  _referenceCount-=1;  _log.info("Data store reference count updated: [id = {}, reference count = {}]",_id,_referenceCount);  if (_referenceCount == 0) {    closeDataStore();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_CASH_TITLE(int value0){  return new SM_SYSTEM_MESSAGE(1390242,new DescriptionId(value0));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_NOTIFY_PLAYING_TIME(String value0){  return new SM_SYSTEM_MESSAGE(1390214,value0);}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapAircraftManufacturer && ((AirMapAircraftManufacturer)o).getId().equals(getId());}  }
class C{  @Override public void endContentModel(Augmentations augs) throws XNIException {}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public GroupsEditPlaceQuery countryId(Integer value){  return unsafeParam("country_id",value);}  }
class C{  public void writeFileContent(String content,Path path) throws CommandException {  try {    Files.write(content,path.toFile(),StandardCharsets.UTF_8);  } catch (  IOException e) {    throw new CommandException("Cannot write file content in path: " + path.toString(),e);  }}  }
class C{  public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  public String toStringTree(){  return toStringTree(false);}  }
class C{  @Override public boolean isDataPresent(){  return true;}  }
class C{  @VisibleForTesting protected boolean isMinidumpCleanNeeded(){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  boolean cleanNeeded=!sharedPreferences.contains(MinidumpUploadCallable.PREF_LAST_UPLOAD_DAY) && PrivacyPreferencesManager.getInstance(getApplicationContext()).isUploadLimited();  if (cleanNeeded) {    sharedPreferences.edit().putInt(MinidumpUploadCallable.PREF_LAST_UPLOAD_DAY,0).apply();  }  return cleanNeeded;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_REQUESTER_WITHDRAW_REQUEST(String value0){  return new SM_SYSTEM_MESSAGE(1300134,value0);}  }
class C{  private TextEditor escapeSpecialCharsWithinTagAttributes(TextEditor text){  Collection<HTMLToken> tokens=text.tokenizeHTML();  TextEditor newText=new TextEditor("");  for (  HTMLToken token : tokens) {    String value=token.getText();    if (token.isTag()) {      value=value.replaceAll("\\\\",CHAR_PROTECTOR.encode("\\"));      value=value.replaceAll("`",CHAR_PROTECTOR.encode("`"));      value=value.replaceAll("\\*",CHAR_PROTECTOR.encode("*"));      value=value.replaceAll("_",CHAR_PROTECTOR.encode("_"));    }    newText.append(value);  }  return newText;}  }
class C{  public View detachCurrentView(){  assert getChildCount() > 1;  View view=getChildAt(CONTENT_INDEX);  removeView(view);  return view;}  }
class C{  public void rectValueToPixelHorizontal(RectF r,float phaseY){  r.left*=phaseY;  r.right*=phaseY;  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  public static BaseRecordReader createRecordReader(Configuration config,Path path) throws IOException {  EmoInputSplittable emoFs=(EmoInputSplittable)path.getFileSystem(config);  return emoFs.getBaseRecordReader(config,path,getSplitSize(config));}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathEqual(String path,Object value){  return path(path,equal(value));}  }
class C{  @TargetApi(Build.VERSION_CODES.M) public static boolean checkPermission(String permissionName){  if (context == null) {    throw new RuntimeException("Before comparing permissions you need to call Nammu.init(context)");  }  return PackageManager.PERMISSION_GRANTED == context.checkSelfPermission(permissionName);}  }
class C{  public NewPointSLD(){  super(Localisation.getString(NewPointSLD.class,"NewPointSLD.title"));}  }
class C{  public Zdiagmat(Zdiagmat D){  Parameters.BaseIndexNotChangeable=true;  basex=Parameters.BaseIndex;  order=D.order;  getProperties();  re=new double[n];  im=new double[n];  for (int i=0; i < n; i++) {    re[i]=D.re[i];    im[i]=D.im[i];  }}  }
class C{  public int computeNaiveLCA(Collection<Integer> taxonIds){  if (taxonIds.size() == 0)   return IdMapper.NOHITS_ID; else   if (taxonIds.size() == 1)   return taxonIds.iterator().next();  if (taxonIds.size() > addresses.length) {    addresses=new String[taxonIds.size()];  }  int numberOfAddresses=0;  for (  Integer id : taxonIds) {    if (!idMapper.isDisabled(id)) {      final String address=fullTree.getAddress(id);      if (address != null) {        addresses[numberOfAddresses++]=address;      }    }  }  if (numberOfAddresses > 0) {    final String address=LCAAddressing.getCommonPrefix(addresses,numberOfAddresses,true);    return fullTree.getAddress2Id(address);  }  return IdMapper.UNASSIGNED_ID;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_CHANNEL_JOIN_TRADE(String value0){  return new SM_SYSTEM_MESSAGE(1400240,value0);}  }
class C{  public MarketGetQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public EmailBuilder replyTo(List<String> replyToAddresses){  this.replyTo=replyToAddresses;  return this;}  }
class C{  private boolean addPointsTo(int code,AllocNode obj){  GeometricManager gm=pt_objs.get(obj);  if (gm == null) {    gm=new GeometricManager();    pt_objs.put(obj,gm);  } else   if (gm == deadManager) {    return false;  }  SegmentNode p=gm.addNewFigure(code,pres);  if (p != null) {    new_pts.put(obj,gm);    return true;  }  return false;}  }
class C{  private void readObjectNoData() throws ObjectStreamException {  throw new InvalidObjectException("no data");}  }
class C{  @JsOverlay final public <R extends JsPlainObj,O extends JsPlainObj>R merge(O toMerge){  return JsHelper.merge(this,toMerge);}  }
class C{  public TCPInputPoller(int requestedPort,int portmin,int portmax){  this.requestedPortNumber=requestedPort;  this.portRangeMax=Math.max(portmin,portmax);  this.portRangeMin=Math.min(portmin,portmax);  this.commandQueue=new ArrayList<CommandAndIPAddress>();}  }
class C{  private void checkConfiguration(){  if (configuration == null) {    throw new IllegalStateException(ERROR_NOT_INIT);  }}  }
class C{  public ClientGameInformation(String sGameName){  super();  this.gameName=sGameName;  this.playTimes=0;  this.win=0;  this.defeat=0;  this.score=0;}  }
class C{  public boolean isAlias(IVarAbstraction pn1,IVarAbstraction pn2){  pn1=pn1.getRepresentative();  pn2=pn2.getRepresentative();  if (!pn1.hasPTResult() || !pn2.hasPTResult()) {    VarNode vn1=(VarNode)pn1.getWrappedNode();    VarNode vn2=(VarNode)pn2.getWrappedNode();    return isAliasCI((Local)vn1.getVariable(),(Local)vn2.getVariable());  }  return pn1.heap_sensitive_intersection(pn2);}  }
class C{  @Override public boolean containsVertex(Set<String> labels){  return true;}  }
class C{  public void appendAsterisksParams(Appendable sr,Map<String,Object> context,ModelFormField modelFormField) throws IOException {  String requiredField="false";  String requiredStyle="";  if (modelFormField.getRequiredField()) {    requiredField="true";    requiredStyle=modelFormField.getRequiredFieldStyle();  }  sr.append(" requiredField=");  sr.append(ftlFmt.makeStringLiteral(requiredField));  sr.append(" requiredStyle=");  sr.append(ftlFmt.makeStringLiteral(requiredStyle));  sr.append("");}  }
class C{  public boolean skipSpaces() throws IOException {  if (DEBUG_BUFFER) {    System.out.print("(skipSpaces: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int c=fCurrentEntity.ch[fCurrentEntity.position];  if (XMLChar.isSpace(c)) {    boolean external=fCurrentEntity.isExternal();    do {      boolean entityChanged=false;      if (c == '\n' || (external && c == '\r')) {        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count - 1) {          fCurrentEntity.ch[0]=(char)c;          entityChanged=load(1,true);          if (!entityChanged) {            fCurrentEntity.position=0;            fCurrentEntity.startPosition=0;          }        }        if (c == '\r' && external) {          if (fCurrentEntity.ch[++fCurrentEntity.position] != '\n') {            fCurrentEntity.position--;          }        }      } else {        fCurrentEntity.columnNumber++;      }      if (!entityChanged)       fCurrentEntity.position++;      if (fCurrentEntity.position == fCurrentEntity.count) {        load(0,true);      }    } while (XMLChar.isSpace(c=fCurrentEntity.ch[fCurrentEntity.position]));    if (DEBUG_BUFFER) {      System.out.print(")skipSpaces: ");      XMLEntityManager.print(fCurrentEntity);      System.out.println(" -> true");    }    return true;  }  if (DEBUG_BUFFER) {    System.out.print(")skipSpaces: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println(" -> false");  }  return false;}  }
class C{  public AsyncCatchOptions noMasterBall(boolean skipMasterBall){  this.skipMasterBall=skipMasterBall;  return this;}  }
class C{  public void click(int mask,int x,int y) throws InterruptedException {  move(x,y);  click(mask);}  }
class C{  @Override public void load(DictionaryInfo dictionaryInfo,ColumnIdentifier columnIdentifier,long dictionaryChunkStartOffset,long dictionaryChunkEndOffset,boolean loadSortIndex) throws IOException {  Iterator<byte[]> columnDictionaryChunkWrapper=load(columnIdentifier,dictionaryChunkStartOffset,dictionaryChunkEndOffset);  if (loadSortIndex) {    readSortIndexFile(dictionaryInfo,columnIdentifier);  }  fillDictionaryValuesAndAddToDictionaryChunks(dictionaryInfo,columnDictionaryChunkWrapper);}  }
class C{  public SubEquipmentUnitAdd(final Long changeId,final long subEquipmentId,final long parentEquipmentId,final String subEquipmentUnitXml){  setChangeId(changeId);  this.subEquipmentId=subEquipmentId;  this.parentEquipmentId=parentEquipmentId;  this.subEquipmentUnitXml=subEquipmentUnitXml;}  }
class C{  private void connectDB(){  mongoClient=new MongoClient(dbHost,dbPort);  db=mongoClient.getDatabase(dbName);  usersCollection=db.getCollection("users");  loginSessionsCollection=db.getCollection("logins");}  }
class C{  public EventRegistration(long eventID,Object source,Lease lease,long seqNum){  this.eventID=eventID;  this.source=source;  this.lease=lease;  this.seqNum=seqNum;}  }
class C{  public static boolean isNumeric(String value){  return NUMERIC_PATTERN.matcher(value).matches();}  }
class C{  @VisibleForTesting public ResultWallet(String email,String googleTransactionId,ResultCard card,ResultAddress billingAddress,ResultAddress shippingAddress){  mEmail=email;  mGoogleTransactionId=googleTransactionId;  mCard=card;  mBillingAddress=billingAddress;  mShippingAddress=shippingAddress;}  }
class C{  private void computeUPMATree(Taxa taxa,Distances dist,PhyloTree tree){  tree.clear();  int ntax=dist.getNtax();  Node[] subtrees=new Node[ntax + 1];  int[] sizes=new int[ntax + 1];  double[] heights=new double[ntax + 1];  for (int i=1; i <= ntax; i++) {    subtrees[i]=tree.newNode();    tree.setLabel(subtrees[i],taxa.getLabel(i));    sizes[i]=1;  }  double d[][]=new double[ntax + 1][ntax + 1];  for (int i=1; i <= ntax; i++) {    for (int j=i + 1; j <= ntax; j++) {      double dij=(dist.get(i,j) + dist.get(j,i)) / 2.0;      d[i][j]=d[j][i]=dij;    }  }  for (int actual=ntax; actual > 2; actual--) {    int i_min=0, j_min=0;    double d_min=Double.MAX_VALUE;    for (int i=1; i <= actual; i++) {      for (int j=i + 1; j <= actual; j++) {        double dij=d[i][j];        if (i_min == 0 || dij < d_min) {          i_min=i;          j_min=j;          d_min=dij;        }      }    }    double height=d_min / 2.0;    Node v=tree.newNode();    Edge e=tree.newEdge(v,subtrees[i_min]);    tree.setWeight(e,Math.max(height - heights[i_min],0.0));    Edge f=tree.newEdge(v,subtrees[j_min]);    tree.setWeight(f,Math.max(height - heights[j_min],0.0));    subtrees[i_min]=v;    subtrees[j_min]=null;    heights[i_min]=height;    int size_i=sizes[i_min];    int size_j=sizes[j_min];    sizes[i_min]=size_i + size_j;    for (int k=1; k <= ntax; k++) {      if ((k == i_min) || k == j_min)       continue;      double dki=(d[k][i_min] * size_i + d[k][j_min] * size_j) / ((double)(size_i + size_j));      d[k][i_min]=d[i_min][k]=dki;    }    if (j_min < actual) {      for (int k=1; k <= actual; k++) {        d[j_min][k]=d[k][j_min]=d[actual][k];      }      d[j_min][j_min]=0.0;      subtrees[j_min]=subtrees[actual];      sizes[j_min]=sizes[actual];      heights[j_min]=heights[actual];    }  }  int sister=2;  while (subtrees[sister] == null)   sister++;  Node root=tree.newNode();  tree.setRoot(root);  double w1, w2;  double delta=Math.abs(heights[1] - heights[sister]);  double distance=d[1][sister] - delta;  if (heights[1] <= heights[sister]) {    w1=0.5 * distance + delta;    w2=0.5 * distance;  } else {    w1=0.5 * distance;    w2=0.5 * distance + delta;  }  Edge e1=tree.newEdge(root,subtrees[1]);  tree.setWeight(e1,w1);  Edge e2=tree.newEdge(root,subtrees[sister]);  tree.setWeight(e2,w2);}  }
class C{  private String number2Full(int time){  if (time < 10) {    return "0" + time;  } else {    return "" + time;  }}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public void onPause(boolean multitasking){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onPause(multitasking);    }  }}  }
class C{  Stream<Concept> insertAll(){  return insertAll(new HashMap<>());}  }
class C{  public void normalizeCifar(File fileName){  DataSet result=new DataSet();  result.load(fileName);  if (!meanStdStored && train) {    uMean=Math.abs(uMean / numExamples);    uStd=Math.sqrt(uStd);    vMean=Math.abs(vMean / numExamples);    vStd=Math.sqrt(vStd);    try {      FileUtils.write(meanVarPath,uMean + "," + uStd+ ","+ vMean+ ","+ vStd);    } catch (    IOException e) {      e.printStackTrace();    }    meanStdStored=true;  } else   if (uMean == 0 && meanStdStored) {    try {      String[] values=FileUtils.readFileToString(meanVarPath).split(",");      uMean=Double.parseDouble(values[0]);      uStd=Double.parseDouble(values[1]);      vMean=Double.parseDouble(values[2]);      vStd=Double.parseDouble(values[3]);    } catch (    IOException e) {      e.printStackTrace();    }  }  for (int i=0; i < result.numExamples(); i++) {    INDArray newFeatures=result.get(i).getFeatureMatrix();    newFeatures.tensorAlongDimension(0,new int[]{0,2,3}).divi(255);    newFeatures.tensorAlongDimension(1,new int[]{0,2,3}).subi(uMean).divi(uStd);    newFeatures.tensorAlongDimension(2,new int[]{0,2,3}).subi(vMean).divi(vStd);    result.get(i).setFeatures(newFeatures);  }  result.save(fileName);}  }
class C{  public boolean isCandidateResizable(int dimension){  if (dimension == 0) {    return mConstraintWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.ANY || ((mConstraintWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) && mConstraintWidget.getHeight() > mConstraintWidget.getMinHeight());  } else {    return (mConstraintWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.ANY) || ((mConstraintWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) && mConstraintWidget.getWidth() > mConstraintWidget.getMinWidth());  }}  }
class C{  public UserDTO toDTO(User user){  return toDTO(user,1);}  }
class C{  @Override public void endElement(String uri,String localName,String qName) throws SAXException {  writeText4Links();  if (!mIgnoredTags.isEmpty() && mIgnoredTags.peek().equalsIgnoreCase(qName)) {    mIgnoredTags.pop();  } else {    if (!(htmlMode && (uri.equals("http://www.w3.org/1999/xhtml") || uri.equals("")) && (qName.equals("area") || qName.equals("base") || qName.equals("basefont")|| qName.equals("br")|| qName.equals("col")|| qName.equals("frame")|| qName.equals("hr")|| qName.equals("img")|| qName.equals("input")|| qName.equals("isindex")|| qName.equals("link")|| qName.equals("meta")|| qName.equals("param")))) {      write("</");      writeName(uri,localName,qName,true);      write('>');    }    if (elementLevel == 1) {      write('\n');    }    if (htmlMode && localName.equals("a")) {      mIgnoreChars=false;    }    cdataElement=false;    super.endElement(uri,localName,qName);    nsSupport.popContext();    elementLevel--;  }}  }
class C{  static void updateFileListener(@NotNull Project project){  InstantRunManager manager=get(project);  manager.myFileChangeListener.setEnabled(InstantRunSettings.isInstantRunEnabled());}  }
class C{  public static Map<String,Object> deleteParty(DispatchContext ctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_delete_party_not_implemented",locale));}  }
class C{  public void undo(){  for (int i=pathEvents.size() - 1; i >= 0; i--) {    if (pathEvents.remove(i).isMove)     break;  }  applyEvents();  invalidate();}  }
class C{  public static double distanceSq(Vector1D p1,Vector1D p2){  return p1.distanceSq(p2);}  }
class C{  public void clear(){  this.poNumber=null;  this.orderId=null;  this.firstAttemptOrderId=null;  this.billingAccountId=null;  this.billingAccountAmt=BigDecimal.ZERO;  this.nextItemSeq=1;  this.agreementId=null;  this.quoteId=null;  this.defaultItemDeliveryDate=null;  this.defaultItemComment=null;  this.orderAdditionalEmails=null;  this.readOnlyCart=false;  this.lastListRestore=null;  this.orderTermSet=false;  this.orderTerms.clear();  this.adjustments.clear();  this.expireSingleUsePayments();  this.cartLines.clear();  this.itemGroupByNumberMap.clear();  this.clearPayments();  this.shipInfo.clear();  this.contactMechIdsMap.clear();  this.internalOrderNotes.clear();  this.orderNotes.clear();  this.attributes.clear();  this.orderAttributes.clear();  for (  Map.Entry<String,List<String>> me : this.additionalPartyRole.entrySet()) {    ((LinkedList<String>)me.getValue()).clear();  }  this.additionalPartyRole.clear();  this.freeShippingProductPromoActions.clear();  this.desiredAlternateGiftByAction.clear();  this.productPromoUseInfoList.clear();  this.productPromoCodes.clear();  if (ProductStoreWorker.autoSaveCart(this.getDelegator(),this.getProductStoreId())) {    GenericValue ul=this.getUserLogin();    if (ul == null) {      ul=this.getAutoUserLogin();    }    if (ul != null && !"anonymous".equals(ul.getString("userLoginId"))) {      this.autoSaveListId=null;    }    if (autoSaveListId == null) {      try {        autoSaveListId=ShoppingListEvents.getAutoSaveListId(this.getDelegator(),null,null,ul,this.getProductStoreId());      } catch (      GeneralException e) {        Debug.logError(e,module);      }    }    if (autoSaveListId != null) {      try {        org.ofbiz.order.shoppinglist.ShoppingListEvents.clearListInfo(this.getDelegator(),autoSaveListId);      } catch (      GenericEntityException e) {        Debug.logError(e,module);      }    }    this.lastListRestore=null;    this.autoSaveListId=null;  }}  }
class C{  public boolean shExpMatch(String str,String shexp){  StringTokenizer tokenizer=new StringTokenizer(shexp,"*");  int startPos=0;  while (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken();    int temp=str.indexOf(token,startPos);    if (startPos == 0 && !shexp.startsWith("*") && temp != 0) {      return false;    }    if (!tokenizer.hasMoreTokens() && !shexp.endsWith("*") && !str.endsWith(token)) {      return false;    }    if (temp == -1) {      return false;    } else {      startPos=temp + token.length();    }  }  return true;}  }
class C{  @RequestMapping(value="/user/login",method=RequestMethod.POST,headers={"Accept=application/json; charset=UTF-8","Content-Type=application/json"}) public RespJson userLogin(@RequestBody LoginReqDto reqDto){  if (reqDto == null || StringUtils.isEmpty(reqDto.getUserId()) || StringUtils.isEmpty(reqDto.getPassword())) {    return RespJson.buildFailureResponse(ERR_ID_PASSWORD_EMPTY);  }  try {    LoginResDto resDto=userService.login(reqDto);    return RespJson.buildSuccessResponse(resDto);  } catch (  Exception e) {    logger.error("Login Failed: " + StringUtils.getValidString(e.getMessage()));    return RespJson.buildFailureResponse(StringUtils.getValidString(e.getMessage()));  }}  }
class C{  public void requestSoftReset(){  SerialMessage msg=new SerialApiSoftResetMessageClass().doRequest();  msg.attempts=1;  enqueue(msg);  logger.debug("ZWave controller soft reset");}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  public static <T>T readRepetitiveObject(ObjectInput in) throws IOException, ClassNotFoundException {  if (in instanceof MarshalInputStream)   return (T)((MarshalInputStream)in).readRepetitiveObject();  return (T)readObject(in);}  }
class C{  public void loadMultipleFragments(FragmentManager fragmentManager,int containerId,int showPos,BaseFragment... fragments){  FragmentTransaction ft=fragmentManager.beginTransaction();  ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);  for (int i=0; i < fragments.length; i++) {    BaseFragment fragment=fragments[i];    if (fragment == null) {      throw new IllegalArgumentException("loadMultipleFragments fragment in list can not be null ");    }    String tag=fragment.getClass().getName();    ft.add(containerId,fragment,tag);    if (showPos != i) {      ft.hide(fragment);    }    Bundle bundle=fragment.getArguments();    if (bundle != null) {      bundle.putBoolean(ARG_IS_ROOT,true);    }  }  ft.commit();}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  public LinkedList<Patch> patch_make(String text1,LinkedList<Diff> diffs){  if (text1 == null || diffs == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  LinkedList<Patch> patches=new LinkedList<Patch>();  if (diffs.isEmpty()) {    return patches;  }  Patch patch=new Patch();  int char_count1=0;  int char_count2=0;  String prepatch_text=text1;  String postpatch_text=text1;  for (  Diff aDiff : diffs) {    if (patch.diffs.isEmpty() && aDiff.operation != Operation.EQUAL) {      patch.start1=char_count1;      patch.start2=char_count2;    }switch (aDiff.operation) {case INSERT:      patch.diffs.add(aDiff);    patch.length2+=aDiff.text.length();  postpatch_text=postpatch_text.substring(0,char_count2) + aDiff.text + postpatch_text.substring(char_count2);break;case DELETE:patch.length1+=aDiff.text.length();patch.diffs.add(aDiff);postpatch_text=postpatch_text.substring(0,char_count2) + postpatch_text.substring(char_count2 + aDiff.text.length());break;case EQUAL:if (aDiff.text.length() <= 2 * Patch_Margin && !patch.diffs.isEmpty() && aDiff != diffs.getLast()) {patch.diffs.add(aDiff);patch.length1+=aDiff.text.length();patch.length2+=aDiff.text.length();}if (aDiff.text.length() >= 2 * Patch_Margin) {if (!patch.diffs.isEmpty()) {patch_addContext(patch,prepatch_text);patches.add(patch);patch=new Patch();prepatch_text=postpatch_text;char_count1=char_count2;}}break;}if (aDiff.operation != Operation.INSERT) {char_count1+=aDiff.text.length();}if (aDiff.operation != Operation.DELETE) {char_count2+=aDiff.text.length();}}if (!patch.diffs.isEmpty()) {patch_addContext(patch,prepatch_text);patches.add(patch);}return patches;}  }
class C{  private Iterator<Map.Entry<UUID,Change>> decodeChangesFromCql(final Iterator<Row> iter){  return Iterators.transform(iter,null);}  }
class C{  public int flags(){  return theFlags;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUMMON_COOLDOWN(String value0){  return new SM_SYSTEM_MESSAGE(1200012,value0);}  }
class C{  public FactoryConfigurationError(java.lang.Exception e,java.lang.String msg){  super(msg);  nested=e;}  }
class C{  public void readFields(DataInput in) throws IOException {  long length=in.readLong();  if (length == 0) {    array=null;    return;  }  int type=in.readInt();  if (array == null || array.length() != length) {    if (length >= Integer.MAX_VALUE) {      throw new IllegalArgumentException("Length can not be >= Integer.MAX_VALUE");    }    array=Nd4j.zeros((int)length);  }  if (type == DataBuffer.Type.DOUBLE.ordinal()) {    for (int i=0; i < length; i++) {      array.putScalar(i,in.readDouble());    }  } else   if (type == DataBuffer.Type.FLOAT.ordinal()) {    for (int i=0; i < length; i++) {      array.putScalar(i,in.readFloat());    }  } else   if (type == DataBuffer.Type.INT.ordinal()) {    for (int i=0; i < length; i++) {      array.putScalar(i,in.readInt());    }  } else {    throw new UnsupportedOperationException("Unsupported data type: " + type);  }}  }
class C{  public static Matrix magic(int n){  double[][] M=new double[n][n];  if ((n % 2) == 1) {    int a=(n + 1) / 2;    int b=(n + 1);    for (int j=0; j < n; j++) {      for (int i=0; i < n; i++) {        M[i][j]=n * ((i + j + a) % n) + ((i + 2 * j + b) % n) + 1;      }    }  } else   if ((n % 4) == 0) {    for (int j=0; j < n; j++) {      for (int i=0; i < n; i++) {        if (((i + 1) / 2) % 2 == ((j + 1) / 2) % 2) {          M[i][j]=n * n - n * i - j;        } else {          M[i][j]=n * i + j + 1;        }      }    }  } else {    int p=n / 2;    int k=(n - 2) / 4;    Matrix A=magic(p);    for (int j=0; j < p; j++) {      for (int i=0; i < p; i++) {        double aij=A.get(i,j);        M[i][j]=aij;        M[i][j + p]=aij + 2 * p * p;        M[i + p][j]=aij + 3 * p * p;        M[i + p][j + p]=aij + p * p;      }    }    for (int i=0; i < p; i++) {      for (int j=0; j < k; j++) {        double t=M[i][j];        M[i][j]=M[i + p][j];        M[i + p][j]=t;      }      for (int j=n - k + 1; j < n; j++) {        double t=M[i][j];        M[i][j]=M[i + p][j];        M[i + p][j]=t;      }    }    double t=M[k][0];    M[k][0]=M[k + p][0];    M[k + p][0]=t;    t=M[k][k];    M[k][k]=M[k + p][k];    M[k + p][k]=t;  }  return new Matrix(M);}  }
class C{  public PagesGetVersionQuery needHtml(Boolean value){  return unsafeParam("need_html",value);}  }
class C{  public void indexDocsByDelta(Path path,String repoName,String repoLocations,String repoRemoteLocation,RepositoryChanged repositoryChanged){  SearchcodeLib scl=Singleton.getSearchCodeLib();  Queue<CodeIndexDocument> codeIndexDocumentQueue=Singleton.getCodeIndexQueue();  String fileRepoLocations=FilenameUtils.separatorsToUnix(repoLocations);  List<String[]> reportList=new ArrayList<>();  for (  String changedFile : repositoryChanged.getChangedFiles()) {    if (this.shouldJobPauseOrTerminate() == true) {      return;    }    String[] split=changedFile.split("/");    String fileName=split[split.length - 1];    changedFile=fileRepoLocations + "/" + repoName+ "/"+ changedFile;    String md5Hash=Values.EMPTYSTRING;    List<String> codeLines=null;    try {      codeLines=Helpers.readFileLinesGuessEncoding(changedFile,this.MAXFILELINEDEPTH);    } catch (    IOException ex) {      Singleton.getLogger().warning("ERROR - caught a " + ex.getClass() + " in "+ this.getClass()+ "\n with message: "+ ex.getMessage());      reportList.add(new String[]{changedFile,"excluded","unable to guess guess file encoding"});      break;    }    if (scl.isMinified(codeLines)) {      Singleton.getLogger().info("Appears to be minified will not index  " + changedFile);      reportList.add(new String[]{changedFile,"excluded","appears to be minified"});      break;    }    if (codeLines.isEmpty()) {      Singleton.getLogger().info("Unable to guess encoding type or file is empty " + changedFile);      reportList.add(new String[]{changedFile,"excluded","empty file"});      break;    }    if (this.determineBinary(changedFile,fileName,codeLines,reportList)) {      break;    }    md5Hash=this.getFileMd5(changedFile);    String languageName=scl.languageGuesser(changedFile,codeLines);    String fileLocation=changedFile.replace(fileRepoLocations,Values.EMPTYSTRING).replace(fileName,Values.EMPTYSTRING);    String fileLocationFilename=changedFile.replace(fileRepoLocations,Values.EMPTYSTRING);    String repoLocationRepoNameLocationFilename=changedFile;    String newString=this.getBlameFilePath(fileLocationFilename);    String codeOwner=getCodeOwner(codeLines,newString,repoName,fileRepoLocations,scl);    reportList.add(new String[]{changedFile,"included",""});    if (codeLines != null) {      if (this.LOWMEMORY) {        try {          CodeIndexer.indexDocument(new CodeIndexDocument(repoLocationRepoNameLocationFilename,repoName,fileName,fileLocation,fileLocationFilename,md5Hash,languageName,codeLines.size(),StringUtils.join(codeLines," "),repoRemoteLocation,codeOwner));        } catch (        IOException ex) {          Singleton.getLogger().warning("ERROR - caught a " + ex.getClass() + " in "+ this.getClass()+ "\n with message: "+ ex.getMessage());        }      } else {        Singleton.incrementCodeIndexLinesCount(codeLines.size());        codeIndexDocumentQueue.add(new CodeIndexDocument(repoLocationRepoNameLocationFilename,repoName,fileName,fileLocation,fileLocationFilename,md5Hash,languageName,codeLines.size(),StringUtils.join(codeLines," "),repoRemoteLocation,codeOwner));      }    }  }  if (this.LOGINDEXED && reportList.isEmpty() == false) {    this.logIndexed(repoName + "_delta",reportList);  }  for (  String deletedFile : repositoryChanged.getDeletedFiles()) {    Singleton.getLogger().info("Missing from disk, removing from index " + deletedFile);    try {      CodeIndexer.deleteByFileLocationFilename(deletedFile);    } catch (    IOException ex) {      Singleton.getLogger().warning("ERROR - caught a " + ex.getClass() + " in "+ this.getClass()+ " indexDocsByDelta deleteByFileLocationFilename for "+ repoName+ " "+ deletedFile+ "\n with message: "+ ex.getMessage());    }  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 2318) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void splashscreenVisible(){  assert mSplashScreenVisibleTime == 0;  mSplashScreenVisibleTime=SystemClock.elapsedRealtime();}  }
class C{  public void collapseViews(){  if (isSelectAnimationInProcess || isWaitingToSelectAnimation || isDeselectAnimationInProcess|| isWaitingToDeselectAnimation|| isSelectedItemStraightened|| isViewCollapsing) {    return;  }  isViewCollapsing=true;  updateItemsByMode();}  }
class C{  @SuppressWarnings("deprecation") private void initTime(){  Time time=new Time(System.currentTimeMillis());  int hours=time.getHours();  mHourSingleDigits=hours % 10;  mHourTenDigits=hours / 10;  int minutes=time.getMinutes();  mMinSingleDigits=minutes % 10;  mMinTenDigits=minutes / 10;  int seconds=time.getSeconds();  mSecSingleDigits=seconds % 10;  mSecTenDigits=seconds / 10;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  public void remove(){}  }
class C{  public GetRemoteResourceCommand(ISVNRepositoryLocation repository,SVNUrl url,SVNRevision revision){  this.repository=repository;  this.url=url;  this.revision=revision;}  }
class C{  public boolean canSet(T value){  return isSettable ? internalCanSet(value) : matches(value);}  }
class C{  @RequestMapping(method=RequestMethod.GET,produces="application/json") public JsonNode listDeployments(HttpServletRequest request){  log.debug("REST request to get a list of deployments");  JsonNode resultNode=null;  ServerConfig serverConfig=retrieveServerConfig();  Map<String,String[]> parameterMap=getRequestParametersWithoutServerId(request);  try {    resultNode=clientService.listDeployments(serverConfig,parameterMap);  } catch (  ActivitiServiceException e) {    throw new BadRequestException(e.getMessage());  }  return resultNode;}  }
class C{  public Matrix minusEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] - B.A[i][j];    }  }  return this;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  getActivity().requestWindowFeature(Window.FEATURE_NO_TITLE);  setContentView(R.layout.activity_capture);  surfaceView=(SurfaceView)findViewById(R.id.surfaceview);  viewfinderView=(ViewfinderView)findViewById(R.id.viewfinderview);  Window window=getActivity().getWindow();  window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);  hasSurface=false;  inactivityTimer=new InactivityTimer(getActivity());  XHscantype=getIntent().getIntExtra("XHscantype",2);}  }
class C{  public Matrix4f mult(Matrix4f in2){  return mult(in2,null);}  }
class C{  public AuthConfirmQuery(VkApiClient client,int clientId,String clientSecret,String phone,String code){  super(client,"auth.confirm",ConfirmResponse.class);  clientId(clientId);  clientSecret(clientSecret);  phone(phone);  code(code);}  }
class C{  public static void createAccessorMethods(Body body,Stmt before,Stmt after){  soot.util.Chain units=body.getUnits();  if (before != null && !units.contains(before))   throw new RuntimeException();  if (after != null && !units.contains(after))   throw new RuntimeException();  ArrayList<Unit> unitList=new ArrayList<Unit>();  unitList.addAll(units);  boolean bInside=before == null;  for (  Unit unit : unitList) {    Stmt s=(Stmt)unit;    if (bInside) {      if (s == after)       return;      if (!isAccessLegal(body.getMethod(),s))       createAccessorMethod(body.getMethod(),s);    } else {      if (s == before)       bInside=true;    }  }}  }
class C{  public String start_graph(){  return "digraph G {";}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  private void checkTotalDuration(){  String metadataTotalDurationTc=metadataXmlProvider.getDpp().getTechnical().getTimecodes().getTotalProgrammeDuration().getValue();  if (StringUtils.isEmpty(metadataTotalDurationTc)) {    return;  }  String destFps=contextProvider.getDestContext().getParameterValue(DestContextParameters.FRAME_RATE);  if (destFps == null) {    destFps=MetadataXmlProvider.DEST_FRAME_RATE;  }  BigFraction fps=ConversionHelper.parseEditRate(destFps);  long metadataTotalDurationMs=ConversionHelper.smpteTimecodeToMilliSeconds(metadataTotalDurationTc,fps);  long cplTotalDurationMs=getCplTotalDurationMs();  if (metadataTotalDurationMs == 0) {    return;  }  if (metadataTotalDurationMs > cplTotalDurationMs) {    throw new ConversionException(String.format("A total programme duration as specified in metadata.xml (%s, %s ms) exceeds a " + "total duration of the output as defined by the CPL (%s, %s ms) ",metadataTotalDurationTc,String.valueOf(metadataTotalDurationMs),ConversionHelper.msToSmpteTimecode(cplTotalDurationMs,fps),String.valueOf(cplTotalDurationMs)));  }}  }
class C{  public void track(File file,Object marker,FileDeleteStrategy deleteStrategy){  if (file == null) {    throw new NullPointerException("The file must not be null");  }  addTracker(file.getPath(),marker,deleteStrategy);}  }
class C{  public void clearBasicAuth(){  this.httpClient.getCredentialsProvider().clear();}  }
class C{  protected void mouseClicked(int mouseX,int mouseY,int mouseButton){  for (int i=0; i < 12; i++) {    GuiTextField txt=((GuiQuickCommandsList.CommandEntry)this.guiList.getListEntry(i)).txt;    txt.setFocused(false);  }  if (mouseButton != 0 || !this.guiList.mouseClicked(mouseX,mouseY,mouseButton)) {    try {      super.mouseClicked(mouseX,mouseY,mouseButton);    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public DatabaseGetRegionsQuery q(String value){  return unsafeParam("q",value);}  }
class C{  public OrdersChangeStateQuery appOrderId(Integer value){  return unsafeParam("app_order_id",value);}  }
class C{  public FriendsDeleteListQuery(VkApiClient client,UserActor actor,int listId){  super(client,"friends.deleteList",OkResponse.class);  accessToken(actor.getAccessToken());  listId(listId);}  }
class C{  public static S2LatLngRect fromPoint(S2LatLng p){  return new S2LatLngRect(p,p);}  }
class C{  public final boolean isFinished(){  return mScrollerX.mFinished && mScrollerY.mFinished;}  }
class C{  public static void saveDocument(final Document document,final String outputFullFilename){  OutputStream outputStream=null;  try {    TransformerFactory transformerFactory=TransformerFactory.newInstance();    Transformer transformer=transformerFactory.newTransformer();    DOMSource domSource=new DOMSource(document);    transformer.setOutputProperty(OutputKeys.ENCODING,Constant.Encoding.UTF8);    outputStream=new FileOutputStream(outputFullFilename);    StreamResult result=new StreamResult(outputStream);    transformer.transform(domSource,result);  } catch (  Exception e) {    throw new JavaXmlUtilException(e);  } finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      Exception e) {        throw new JavaXmlUtilException(e);      }    }  }}  }
class C{  public ArrayRealVector(Double[] d,int pos,int size) throws MathIllegalArgumentException, NullArgumentException {  if (d == null) {    throw new NullArgumentException();  }  if (d.length < pos + size) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE,pos + size,d.length);  }  data=new double[size];  for (int i=pos; i < pos + size; i++) {    data[i - pos]=d[i].doubleValue();  }}  }
class C{  public static void syncSummary2NetworkFormatting(DataTable megan4Table,ClusterViewer clusterViewer){  System.err.println("syncSummary2NetworkFormatting(): not implemented");}  }
class C{  public boolean useRecentUpdatesForPinning(){  return isEvictableCachePolicy() && !_isMemorySA && (!_readOnlySA || _engine.hasMirror());}  }
class C{  public boolean isLegendVisible(){  return legendVisible;}  }
class C{  public OrExpr newOrExpr(Value op1,Value op2){  return new GOrExpr(op1,op2);}  }
class C{  public static boolean isUrlString(String s){  return s.startsWith("http:/") || s.startsWith("ftp:/") || s.startsWith("file:/");}  }
class C{  public static String sanitizeText(String text){  if (text == null)   return null;  return text.replace(OBJ_CHARACTER," ").trim();}  }
class C{  public static boolean isAtLeastJava19(){  return getMajorJavaVersion() >= JAVA_19;}  }
class C{  @Override public void run(){  logger.debug("Starting ZWave thread: Input");  SerialMessage recvMessage;  while (!interrupted()) {    try {      if (recvQueue.size() == 0) {        sendAllowed.release();      }      recvMessage=recvQueue.take();      logger.debug("Receive queue TAKE: Length={}",recvQueue.size());      logger.debug("Process Message = {}",SerialMessage.bb2hex(recvMessage.getMessageBuffer()));      handleIncomingMessage(recvMessage);      sendAllowed.tryAcquire();    } catch (    InterruptedException e) {      logger.error("Exception during ZWave thread: Input 1. {}",e);      break;    }catch (    Exception e) {      logger.error("Exception during ZWave thread: Input 2. {}",e);    }  }  logger.debug("Stopped ZWave thread: Input");}  }
class C{  public static byte[] encode(byte[] data,String pub_key){  try {    Cipher cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");    java.security.Key k=getPublicKey(pub_key);    cipher.init(Cipher.ENCRYPT_MODE,k);    byte[] enBytes=cipher.doFinal(data);    return enBytes;  } catch (  Exception e) {    log.error("pubkey=" + pub_key + ", data.length="+ data.length,e);  }  return null;}  }
class C{  public HttpUrl baseUrl(){  return baseUrl;}  }
class C{  @Nullable private TableReportEntry convertToTableReportEntry(Map<String,Object> map,Predicate<String> placementFilter,Predicate<Boolean> droppedFilter,Predicate<Boolean> facadeFilter){  if (Intrinsic.isDeleted(map)) {    return null;  }  final String tableName=Intrinsic.getId(map);  List<TableReportEntryTable> tables=Lists.newArrayListWithExpectedSize(map.size());  for (  Map.Entry<String,Object> entry : toMap(map.get("tables")).entrySet()) {    TableReportEntryTable entryTable=convertToTableReportEntryTable(entry.getKey(),toMap(entry.getValue()),placementFilter,droppedFilter,facadeFilter);    if (entryTable != null) {      tables.add(entryTable);    }  }  if (tables.isEmpty()) {    return null;  }  return new TableReportEntry(tableName,tables);}  }
class C{  public void computeFromPoints(FloatBuffer points){  containAABB(points);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  @Override public void actionPerformed(ActionEvent event){  final ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();  final File lastOpenFile=ProgramProperties.getFile(MeganProperties.BLASTFILE);  final DAAFileFilter fileFilter=new DAAFileFilter();  java.util.List<File> files=ChooseFileDialog.chooseFilesToOpen(importBlastDialog,lastOpenFile,fileFilter,fileFilter,event,"Open Diamond DAA file(s)");  if (files.size() > 0) {    importBlastDialog.setBlastFileName(Basic.toString(files,"\n"));    importBlastDialog.getBlastFileNameField().setText(Basic.toString(files,"\n"));    ProgramProperties.put(MeganProperties.BLASTFILE,files.get(0));  }}  }
class C{  public void updateDataTag(final DataTagUpdate dataTagUpdate,final SourceDataTag sourceDataTag) throws IllegalAccessException, NoSuchFieldException {  fillNonNullFields(dataTagUpdate,sourceDataTag,CHANGE_ID_FIELD,DATA_TAG_ID_FIELD,EQUIPMENT_ID_FIELD);  removeListOfFields(dataTagUpdate.getFieldsToRemove(),sourceDataTag);  if (dataTagUpdate.getDataTagAddressUpdate() != null) {    DataTagAddress dataTagAddress=sourceDataTag.getAddress();    if (dataTagAddress == null) {      dataTagAddress=new DataTagAddress();      sourceDataTag.setAddress(dataTagAddress);    }    updateDataTagAddress(dataTagUpdate.getDataTagAddressUpdate(),dataTagAddress);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DECOMPOUND_ERROR_NOT_DECOMPOUNDABLE_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1400859,value0);}  }
class C{  public static ComponentMeta metaByStateLink(String stateLink){  if (null == stateLink) {    return null;  }  List<RegistryEntry> list=entries.stream().filter(null).collect(Collectors.toList());  if (list.isEmpty()) {    return null;  }  return list.get(0).componentMeta;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SELL_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300786,value0);}  }
class C{  public static java.util.Date toDate(String monthStr,String dayStr,String yearStr,String hourStr,String minuteStr,String secondStr){  int month, day, year, hour, minute, second;  try {    month=Integer.parseInt(monthStr);    day=Integer.parseInt(dayStr);    year=Integer.parseInt(yearStr);    hour=Integer.parseInt(hourStr);    minute=Integer.parseInt(minuteStr);    second=Integer.parseInt(secondStr);  } catch (  Exception e) {    return null;  }  return toDate(month,day,year,hour,minute,second);}  }
class C{  public TIntObjectHashMap(){  super();}  }
class C{  public LookupDiscovery(String[] groups) throws IOException {  try {    beginDiscovery(groups,EmptyConfiguration.INSTANCE);  } catch (  ConfigurationException e) {  }}  }
class C{  public ShardRouterException(String message){  super(message);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_StatDown_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200417,value0,skillname);}  }
class C{  public final boolean decrypt(ByteBuffer buf){  if (!isEnabled) {    log.debug("if encryption wasn't enabled, then maybe it's client reconnection, so skip packet");    return true;  }  return packetKey.decrypt(buf);}  }
class C{  protected void tag(String tag,String[] names,String[] values,int nattr,boolean close){  spacing();  m_out.print('<');  m_out.print(tag);  for (int i=0; i < nattr; ++i) {    m_out.print(' ');    m_out.print(names[i]);    m_out.print('=');    m_out.print('\"');    escapeString(values[i]);    m_out.print('\"');  }  if (close)   m_out.print('/');  m_out.print('>');  println();  if (!close) {    m_tagStack.add(tag);  }}  }
class C{  private boolean findRoot(final FieldODEStateInterpolator<T> interpolator,final T ta,final T ga,final T tb,final T gb){  check(ga.getReal() == 0.0 || gb.getReal() == 0.0 || (ga.getReal() > 0.0 && gb.getReal() < 0.0) || (ga.getReal() < 0.0 && gb.getReal() > 0.0));  final RealFieldUnivariateFunction<T> f=null;  T beforeRootT=null, beforeRootG=null;  T afterRootT=ta, afterRootG=ga.getField().getZero();  if (ta.getReal() == tb.getReal()) {    beforeRootT=ta;    beforeRootG=ga;    afterRootT=shiftedBy(beforeRootT,convergence);    afterRootG=f.value(afterRootT);  } else   if (ga.getReal() != 0.0 && gb.getReal() == 0.0) {    beforeRootT=tb;    beforeRootG=gb;    afterRootT=shiftedBy(beforeRootT,convergence);    afterRootG=f.value(afterRootT);  } else   if (ga.getReal() != 0.0) {    final T newGa=f.value(ta);    if (ga.getReal() > 0 != newGa.getReal() > 0) {      beforeRootT=ta;      beforeRootG=newGa;      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);      afterRootG=f.value(afterRootT);    }  }  T loopT=ta, loopG=ga;  while ((afterRootG.getReal() == 0.0 || afterRootG.getReal() > 0.0 == g0Positive) && strictlyAfter(afterRootT,tb)) {    if (loopG.getReal() == 0.0) {      beforeRootT=loopT;      beforeRootG=loopG;      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);      afterRootG=f.value(afterRootT);    } else {      if (forward) {        final Interval<T> interval=solver.solveInterval(maxIterationCount,f,loopT,tb);        beforeRootT=interval.getLeftAbscissa();        beforeRootG=interval.getLeftValue();        afterRootT=interval.getRightAbscissa();        afterRootG=interval.getRightValue();      } else {        final Interval<T> interval=solver.solveInterval(maxIterationCount,f,tb,loopT);        beforeRootT=interval.getRightAbscissa();        beforeRootG=interval.getRightValue();        afterRootT=interval.getLeftAbscissa();        afterRootG=interval.getLeftValue();      }    }    if (beforeRootT == afterRootT) {      afterRootT=nextAfter(afterRootT);      afterRootG=f.value(afterRootT);    }    check((forward && afterRootT.getReal() > beforeRootT.getReal()) || (!forward && afterRootT.getReal() < beforeRootT.getReal()));    loopT=afterRootT;    loopG=afterRootG;  }  if (afterRootG.getReal() == 0.0 || afterRootG.getReal() > 0.0 == g0Positive) {    return false;  } else {    check(beforeRootT != null && beforeRootG != null);    increasing=!g0Positive;    pendingEventTime=beforeRootT;    stopTime=beforeRootG.getReal() == 0.0 ? beforeRootT : afterRootT;    pendingEvent=true;    afterEvent=afterRootT;    afterG=afterRootG;    check(afterG.getReal() > 0 == increasing);    check(increasing == gb.getReal() >= ga.getReal());    return true;  }}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public static SiteSettingsCategory fromContentSettingsType(int contentSettingsType){  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_MEDIASTREAM_CAMERA) {    return fromString(CATEGORY_CAMERA);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_COOKIES) {    return fromString(CATEGORY_COOKIES);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_JAVASCRIPT) {    return fromString(CATEGORY_JAVASCRIPT);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_GEOLOCATION) {    return fromString(CATEGORY_DEVICE_LOCATION);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_FULLSCREEN) {    return fromString(CATEGORY_FULLSCREEN);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_MEDIASTREAM_MIC) {    return fromString(CATEGORY_MICROPHONE);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_POPUPS) {    return fromString(CATEGORY_POPUPS);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_PROTECTED_MEDIA_IDENTIFIER) {    return fromString(CATEGORY_PROTECTED_MEDIA);  }  if (contentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_NOTIFICATIONS) {    return fromString(CATEGORY_NOTIFICATIONS);  }  return null;}  }
class C{  public final boolean isValid(){  return qualityCode == SourceDataTagQualityCode.OK;}  }
class C{  private void processPlayFileRequest(Intent intent){  if (mState != State.PREPARING) {    mFile=intent.getExtras().getParcelable(EXTRA_FILE);    mAccount=intent.getExtras().getParcelable(EXTRA_ACCOUNT);    mPlayOnPrepared=intent.getExtras().getBoolean(EXTRA_PLAY_ON_LOAD,false);    mStartPosition=intent.getExtras().getInt(EXTRA_START_POSITION,0);    tryToGetAudioFocus();    playMedia();  }}  }
class C{  public UrlValidator(RegexValidator authorityValidator,long options){  this(null,authorityValidator,options);}  }
class C{  private boolean compare(Map lex,Map other){  for (Iterator i=lex.keySet().iterator(); i.hasNext(); ) {    String key=(String)i.next();    String[] thisPhonemes=getPhones(lex,key);    String[] otherPhonemes=getPhones(other,key);    if (thisPhonemes == null) {      System.out.println(key + " not found in this.");      return false;    } else     if (otherPhonemes == null) {      System.out.println(key + " not found in other.");      return false;    } else     if (thisPhonemes.length == otherPhonemes.length) {      for (int j=0; j < thisPhonemes.length; j++) {        if (!thisPhonemes[j].equals(otherPhonemes[j])) {          return false;        }      }    } else {      return false;    }  }  return true;}  }
class C{  private static int infer_pts_is_many_to_many(RectangleNode pts,SegmentNode pe,int code){  long interI, interJ;  interI=pe.I1 < pts.I1 ? pts.I1 : pe.I1;  interJ=(pe.I1 + pe.L < pts.I1 + pts.L ? pe.I1 + pe.L : pts.I1 + pts.L);  if (interI < interJ) {switch (code) {case GeometricManager.ONE_TO_ONE:      pres.I1=interI - pe.I1 + pe.I2;    pres.I2=pts.I2;  pres.L=interJ - interI;pres.L_prime=pts.L_prime;break;case GeometricManager.MANY_TO_MANY:pres.I1=pe.I2;pres.I2=pts.I2;pres.L=((RectangleNode)pe).L_prime;pres.L_prime=pts.L_prime;break;}return GeometricManager.MANY_TO_MANY;}return GeometricManager.Undefined_Mapping;}  }
class C{  @Override public String toString(){  return "PointD, x: " + x + ", y: "+ y;}  }
class C{  private void calculateOptimalWidthAndHeight(){  if (state == State.DEFAULT || getWidth() == 0) {    return;  }  float maxWidth=getWidth(), maxHeight=getHeight();  float w=pageWidth, h=pageHeight;  float ratio=w / h;  w=maxWidth;  h=(float)Math.floor(maxWidth / ratio);  if (h > maxHeight) {    h=maxHeight;    w=(float)Math.floor(maxHeight * ratio);  }  optimalPageWidth=w;  optimalPageHeight=h;}  }
class C{  public PopupManageImplementor(PopupManageView view){  this.view=view;}  }
class C{  public static void writeLines(File file,Collection<?> lines) throws IOException {  writeLines(file,null,lines,null,false);}  }
class C{  public StatelessHibernateSpaceDataSourceConfigurer useScrollableResultSet(boolean useScrollableResultSet){  this.useScrollableResultSet=useScrollableResultSet;  return this;}  }
class C{  public static String guessMimeTypeFromExtension(String extension){  if (extension == null || extension.isEmpty()) {    return null;  }  return extensionToMimeTypeMap.get(extension);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public void mergeGraph(DocumentNGramGraph dgOtherGraph,double fWeightPercent){  if (dgOtherGraph == this)   return;  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gGraph=getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gOtherGraph=dgOtherGraph.getGraphLevelByNGramSize(iCurLvl);    if (gOtherGraph == null)     continue;    java.util.Iterator iIter=gOtherGraph.getEdgeSet().iterator();    ArrayList<String> lOtherNodes=new ArrayList<String>();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      String sHead=weCurItem.getVertexA().getLabel();      String sTail=weCurItem.getVertexB().getLabel();      double dWeight=weCurItem.getWeight();      lOtherNodes.clear();      lOtherNodes.add(sTail);      createWeightedEdgesConnecting(gGraph,sHead,lOtherNodes,dWeight,dWeight,fWeightPercent);    }  }}  }
class C{  public void doInsertionSort(String[] names,int[] values){  int i, j, t;  String temp="";  for (i=1; i < values.length; i++) {    j=i;    t=values[j];    temp=names[j];    while (j > 0 && values[j - 1] > t) {      values[j]=values[j - 1];      names[j]=names[j - 1];      j--;    }    values[j]=t;    names[j]=temp;  }}  }
class C{  public void addSuperInterfaceId(Access node){  List<Access> list=(parent == null || state == null) ? getSuperInterfaceIdListNoTransform() : getSuperInterfaceIdList();  list.addChild(node);}  }
class C{  public GroupsEditPlaceQuery cityId(Integer value){  return unsafeParam("city_id",value);}  }
class C{  private Iterator<Map<String,Object>> resolveScanResults(final Iterator<Record> records,final ReadConsistency consistency){  return resolveScanResults(records,consistency,false);}  }
class C{  @Override public void nextTuple(){  Message msg;  msg=failedMessages.peek();  if (msg != null) {    MessageRetries messageRetries=pendingMessageRetries.get(msg.getMessageId());    if (Backoff.shouldBackoff(messageRetries.getTimeStamp(),TimeUnit.NANOSECONDS,messageRetries.getNumRetries())) {      Utils.sleep(100);    } else {      LOG.info("[{}] Retrying failed message {}",spoutId,msg.getMessageId());      failedMessages.remove();      mapToValueAndEmit(msg);    }    return;  }  if (consumer != null) {    if (LOG.isDebugEnabled()) {      LOG.debug("[{}] Receiving the next message from pulsar consumer to emit to the collector",spoutId);    }    try {      msg=consumer.receive(1,TimeUnit.SECONDS);      if (msg != null) {        ++messagesReceived;        messageSizeReceived+=msg.getData().length;      }      mapToValueAndEmit(msg);    } catch (    PulsarClientException e) {      LOG.error("[{}] Error receiving message from pulsar consumer",spoutId,e);    }  }}  }
class C{  public void put(int ii,int jj,Z a){  dirty=true;  re[ii - basex][jj - basex]=a.re;  im[ii - basex][jj - basex]=a.im;}  }
class C{  private void deleteStorePath(){  FileFactory.FileType fileType=FileFactory.getFileType(this.hdfsStorePath);  CarbonFile carbonFile=FileFactory.getCarbonFile(this.hdfsStorePath,fileType);  deleteRecursiveSilent(carbonFile);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  public StatusGetQuery(VkApiClient client,UserActor actor){  super(client,"status.get",Status.class);  accessToken(actor.getAccessToken());}  }
class C{  public void paintConsensus(Graphics g0){  Graphics2D g=(Graphics2D)g0;  Rectangle rec=getVisibleRect();  g.setColor(Color.WHITE);  g.fillRect(0,0,getWidth(),getHeight());  g.setColor(Color.BLACK);  g.setBackground(Color.WHITE);  g.setFont(sequenceFont);  final Lane consensusSequence=alignment.getConsensus();  if (alignment.getConsensus() != null) {    final GapColumnContractor gapColumnContractor=getAlignment().getGapColumnContractor();    int minVisibleCol=(int)Math.max(0,(rec.getX() / cellWidth)) + gapColumnContractor.getFirstOriginalColumn();    int maxVisibleCol=(int)Math.min(gapColumnContractor.getLastOriginalColumn() - 1,(rec.getX() + rec.getWidth()) / cellWidth);    if (minVisibleCol - 3 > 0)     minVisibleCol-=3;    if ((!alignment.isTranslate() && cellWidth < 1) || cellWidth < 0.5) {      final Lane lane=alignment.getConsensus();      int firstLayoutCol=lane.getFirstNonGapPosition();      Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToOriginalColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToOriginalColumns().size()]);      if (jumpCols.length > 0) {        int jc=0;        int jumped=0;        while (jc < jumpCols.length && jumpCols[jc] <= firstLayoutCol) {          jumped+=gapColumnContractor.getJumpBeforeOriginalColumn(jumpCols[jc]);          jc++;        }        firstLayoutCol-=jumped;      }      int lastLayoutCol=lane.getLastNonGapPosition();      if (jumpCols.length > 0) {        int jc=0;        int jumped=0;        while (jc < jumpCols.length && jumpCols[jc] < lastLayoutCol) {          jumped+=gapColumnContractor.getJumpBeforeOriginalColumn(jumpCols[jc]);          jc++;        }        lastLayoutCol-=jumped;      }      double firstX=getX(firstLayoutCol);      double lastX=getX(lastLayoutCol);      if (firstX <= maxVisibleCol && lastX >= minVisibleCol) {        g.setColor(Color.GRAY);        g.fill(new Rectangle2D.Double(firstX,0,lastX - firstX,getHeight()));      }    } else {      final Rectangle2D drawRect=new Rectangle2D.Float();      if (isShowColors() && getColorScheme() != null) {        g.setColor(Color.WHITE);        Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().size()]);        int jc=0;        int jumped=0;        int colorStreak=0;        for (int layoutCol=minVisibleCol; layoutCol <= maxVisibleCol; layoutCol++) {          while (jc < jumpCols.length && jumpCols[jc] <= layoutCol) {            jumped+=gapColumnContractor.getJumpBeforeLayoutColumn(jumpCols[jc]);            jc++;          }          int trueCol=layoutCol + jumped;          char ch=consensusSequence.charAt(trueCol);          if (ch == 0 || ch == '-') {            g.setColor(Color.WHITE);          } else           if (ch != ' ') {            g.setColor(getColorScheme().getBackground(ch));            colorStreak=0;          } else {            colorStreak++;            if (colorStreak == 3) {              g.setColor(Color.WHITE);              colorStreak=0;            }          }          if (!g.getColor().equals(Color.WHITE)) {            drawRect.setRect(getX(layoutCol) - 1,0,cellWidth,getSize().height);            g.fill(drawRect);          }        }        g.setColor(Color.BLACK);      }    }    if (cellWidth > 4) {      Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().size()]);      int jc=0;      int jumped=0;      for (int layoutCol=minVisibleCol; layoutCol <= maxVisibleCol; layoutCol++) {        while (jc < jumpCols.length && jumpCols[jc] <= layoutCol) {          jumped+=gapColumnContractor.getJumpBeforeLayoutColumn(jumpCols[jc]);          jc++;        }        int trueCol=layoutCol + jumped;        if (trueCol < gapColumnContractor.getLastOriginalColumn()) {          char ch=consensusSequence.charAt(trueCol);          if (ch == 0)           ch='-';          if (isShowColors() && getColorScheme() != null) {            g.setColor(Color.BLACK);          }          g.drawString("" + ch,Math.round(getX(layoutCol)),(int)Math.round(getSize().height - 0.5 * (getSize().height - cellHeight)) - 2);        }      }    }    if (cellWidth > 1) {      SortedSet<Integer> jumpColumns=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns();      for (      Integer col : jumpColumns) {        g.setColor(Color.WHITE);        g.drawLine((int)getX(col),-1,(int)getX(col),getSize().height);        g.setColor(Color.GRAY);        g.drawLine((int)getX(col) - 1,-1,(int)getX(col) - 1,getSize().height);        g.drawLine((int)getX(col) + 1,-1,(int)getX(col) + 1,getSize().height);      }    }  }}  }
class C{  public static final void emoteStopAttacking(Npc owner){  owner.unsetState(CreatureState.WEAPON_EQUIPPED);  if (owner.getTarget() != null && owner.getTarget() instanceof Player) {    PacketSendUtility.sendPacket((Player)owner.getTarget(),SM_SYSTEM_MESSAGE.STR_UI_COMBAT_NPC_RETURN(owner.getObjectTemplate().getNameId()));  }}  }
class C{  private void removePokemonFromFavs(PokeModel pokeModel,ArrayList<Integer> listOfFavPokemon,int chosenPokemon){  if (pokeModel != null && listOfFavPokemon != null) {    if (mListOfFavPokemon.contains(chosenPokemon)) {      mContext.getContentResolver().delete(PokeDBContract.FavoritePokemonEntry.CONTENT_URI,PokeDBContract.FavoritePokemonEntry.COLUMN_NUMBER + " = " + chosenPokemon,null);      TypefaceUtils.displayToast(mContext,getString(R.string.remove_fav_pokemon_msg),TypefaceUtils.TOAST_SHORT_DURATION);    } else {      TypefaceUtils.displayToast(mContext,getString(R.string.redundant_remove_fav_pokemon_msg),TypefaceUtils.TOAST_SHORT_DURATION);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Aura_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200611,skillcaster,skillname);}  }
class C{  public Builder diskCacheExtraOptions(int maxImageWidthForDiskCache,int maxImageHeightForDiskCache,BitmapProcessor processorForDiskCache){  this.maxImageWidthForDiskCache=maxImageWidthForDiskCache;  this.maxImageHeightForDiskCache=maxImageHeightForDiskCache;  this.processorForDiskCache=processorForDiskCache;  return this;}  }
class C{  @SuppressLint("NewApi") void scrapActiveViews(){  final View[] activeViews=this.activeViews;  final int[] activeViewTypes=this.activeViewTypes;  final boolean multipleScraps=viewTypeCount > 1;  SparseArray<View> scrapViews=currentScrapViews;  final int count=activeViews.length;  for (int i=count - 1; i >= 0; i--) {    final View victim=activeViews[i];    if (victim != null) {      int whichScrap=activeViewTypes[i];      activeViews[i]=null;      activeViewTypes[i]=-1;      if (!shouldRecycleViewType(whichScrap)) {        continue;      }      if (multipleScraps) {        scrapViews=this.scrapViews[whichScrap];      }      scrapViews.put(i,victim);      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {        victim.setAccessibilityDelegate(null);      }    }  }  pruneScrapViews();}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXTEND_ACCOUNT_WAREHOUSE_SIZE_EXTENDED(String value0){  return new SM_SYSTEM_MESSAGE(1300435,value0);}  }
class C{  public AuthSignupQuery testMode(Boolean value){  return unsafeParam("test_mode",value);}  }
class C{  public int size(){  return 5;}  }
class C{  public List<ShoppingCartItem> findAllCartItems(String productId,String groupNumber){  if (productId == null)   return this.items();  List<ShoppingCartItem> itemsToReturn=FastList.newInstance();  for (  ShoppingCartItem cartItem : cartLines) {    if (UtilValidate.isNotEmpty(groupNumber) && !cartItem.isInItemGroup(groupNumber)) {      continue;    }    if (productId.equals(cartItem.getProductId())) {      itemsToReturn.add(cartItem);    }  }  return itemsToReturn;}  }
class C{  protected void drawFilledPath(Canvas c,Path filledPath,int fillColor,int fillAlpha){  int color=(fillAlpha << 24) | (fillColor & 0xffffff);  if (clipPathSupported()) {    int save=c.save();    c.clipPath(filledPath);    c.drawColor(color);    c.restoreToCount(save);  } else {    Paint.Style previous=mRenderPaint.getStyle();    int previousColor=mRenderPaint.getColor();    mRenderPaint.setStyle(Paint.Style.FILL);    mRenderPaint.setColor(color);    c.drawPath(filledPath,mRenderPaint);    mRenderPaint.setColor(previousColor);    mRenderPaint.setStyle(previous);  }}  }
class C{  public void clean(){  for (int i=theAtts.getLength() - 1; i >= 0; i--) {    String name=theAtts.getLocalName(i);    if (theAtts.getValue(i) == null || name == null || name.length() == 0) {      theAtts.removeAttribute(i);      continue;    }  }}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];        fileCount++;      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public synchronized boolean isDiscarded(){  return bDiscarded;}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  @NotNull public static ResizePolicy vertical(){  return ourVertical;}  }
class C{  @Override public void mark(int readAheadLimit) throws IOException {  throw new IOException(fFormatter.formatMessage(fLocale,"OperationNotSupported",new Object[]{"mark()","UTF-8"}));}  }
class C{  public void addRows(int nrows){  for (int i=0; i < nrows; ++i) {    addRow();  }}  }
class C{  private void addLegionMember(Legion legion,Player player,LegionRank rank){  player.setLegionMember(new LegionMember(player.getObjectId(),legion,rank));  storeLegionMember(player.getLegionMember(),true);  PacketSendUtility.sendPacket(player,new SM_LEGION_INFO(legion));  ArrayList<LegionMemberEx> totalMembers=loadLegionMemberExList(legion,player.getObjectId());  ListSplitter<LegionMemberEx> splits=new ListSplitter<LegionMemberEx>(totalMembers,128);  boolean isFirst=true;  while (!splits.isLast()) {    boolean result=false;    List<LegionMemberEx> curentMembers=splits.getNext();    if (isFirst && curentMembers.size() < totalMembers.size()) {      result=true;    }    PacketSendUtility.sendPacket(player,new SM_LEGION_MEMBERLIST(curentMembers,result,isFirst));    isFirst=false;  }  PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_ADD_MEMBER(player,false,1300260,player.getName()),player.getObjectId());  PacketSendUtility.sendPacket(player,new SM_LEGION_ADD_MEMBER(player,false,0,""));  LegionEmblem legionEmblem=legion.getLegionEmblem();  PacketSendUtility.broadcastPacket(player,new SM_LEGION_UPDATE_EMBLEM(legion.getLegionId(),legionEmblem.getEmblemId(),legionEmblem.getColor_r(),legionEmblem.getColor_g(),legionEmblem.getColor_b(),legionEmblem.getEmblemType()),true);  PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x08));  PacketSendUtility.broadcastPacket(player,new SM_LEGION_UPDATE_TITLE(player.getObjectId(),legion.getLegionId(),legion.getLegionName(),player.getLegionMember().getRank().getRankId()),true);}  }
class C{  private static String makeGeoString(List<Coordinate> coordinates){  return TextUtils.join(",",coordinates);}  }
class C{  public void transformValues(TObjectFunction<V,V> function){  byte[] states=_states;  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public static boolean isTime(String hour,String minute,String second){  if (isHour(hour) && isMinute(minute) && isSecond(second))   return true; else   return false;}  }
class C{  public String typeName(){  return "long";}  }
class C{  @Override public void onRenderSurfaceSizeChanged(GL10 gl,int width,int height){  super.onRenderSurfaceSizeChanged(gl,width,height);  sceneCameraConfigured=false;}  }
class C{  public void addNewImageOutlinePolygon(){  if (symbolTree == null) {    return;  }  Object oldValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());  PolygonSymbolizer newPolygonSymbolizer=DefaultSymbols.createDefaultPolygonSymbolizer();  DefaultMutableTreeNode rasterNode=getRasterTreeNode();  SelectedSymbol.getInstance().addImageOutlineSymbolizerToRaster(newPolygonSymbolizer);  DefaultMutableTreeNode newNode=sldTree.addObject(rasterNode,newPolygonSymbolizer,true);  if (newNode != null) {    sldTree.addObject(newNode,SLDTreeLeafFactory.getInstance().getFill(newPolygonSymbolizer),true);    sldTree.addObject(newNode,SLDTreeLeafFactory.getInstance().getStroke(newPolygonSymbolizer),true);    TreePath newPath=getPath(newNode);    symbolTree.setSelectionPath(newPath);    Object newValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());    UndoManager.getInstance().addUndoEvent(new UndoEvent(sldTree.getUndoObject(),getClass().getName(),oldValueObj,newValueObj));  }}  }
class C{  public ComboMenuItem(ValueComboBoxData data){  super(data.getText());  this.data=data;}  }
class C{  public void addModule(Module module){  module.setupModule(new ModuleContextImpl());  modules.add(module);}  }
class C{  public static void clear(View view){  view.setOnTouchListener(null);}  }
class C{  public void updateModelBound(){  mesh.updateBound();  worldBound=getModelBound().transform(cachedWorldMat,worldBound);}  }
class C{  private static void handleScrolling(@NotNull View view){  int scrollPosX=view.getScrollX();  int scrollPosY=view.getScrollY();  if (scrollPosX != 0 || scrollPosY != 0) {    if (view.isNestedScrollingEnabled()) {      int[] consumed=new int[2];      int axis=scrollPosX != 0 ? View.SCROLL_AXIS_HORIZONTAL : 0;      axis|=scrollPosY != 0 ? View.SCROLL_AXIS_VERTICAL : 0;      if (view.startNestedScroll(axis)) {        view.dispatchNestedPreScroll(scrollPosX,scrollPosY,consumed,null);        view.dispatchNestedScroll(consumed[0],consumed[1],scrollPosX,scrollPosY,null);        view.stopNestedScroll();        scrollPosX-=consumed[0];        scrollPosY-=consumed[1];      }    }    if (scrollPosX != 0 || scrollPosY != 0) {      view.scrollTo(scrollPosX,scrollPosY);    }  }  if (!(view instanceof ViewGroup)) {    return;  }  ViewGroup group=(ViewGroup)view;  for (int i=0; i < group.getChildCount(); i++) {    View child=group.getChildAt(i);    handleScrolling(child);  }}  }
class C{  public void addEntry(CatchEntry entry){  entries.addElement(entry);}  }
class C{  public ClickToDeleteItemListenerImpl(int id){  this.mDeleteViewId=id;}  }
class C{  @Override public Object asJavaVal(){  return val;}  }
class C{  @Nullable public static TypeRef fromPrimitiveName(String name){  Type kind=PRIMITIVE_TYPE_MAP.get(name);  return kind == null ? null : of(kind);}  }
class C{  public boolean isAutoConnect(){  return mAutoConnect;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  private void fillDictionaryValuesAndAddToDictionaryChunks(DictionaryInfo dictionaryInfo,Iterator<byte[]> columnDictionaryChunkWrapper){  int dictionaryChunkSize=CarbonUtil.getDictionaryChunkSize();  int sizeOfLastDictionaryChunk=dictionaryInfo.getSizeOfLastDictionaryChunk();  int sizeOfOneDictionaryChunk=dictionaryChunkSize - sizeOfLastDictionaryChunk;  if (sizeOfOneDictionaryChunk <= 0) {    sizeOfOneDictionaryChunk=dictionaryChunkSize;  }  List<List<byte[]>> dictionaryChunks=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  List<byte[]> oneDictionaryChunk=new ArrayList<>(sizeOfOneDictionaryChunk);  dictionaryChunks.add(oneDictionaryChunk);  while (columnDictionaryChunkWrapper.hasNext()) {    oneDictionaryChunk.add(columnDictionaryChunkWrapper.next());    if (oneDictionaryChunk.size() >= sizeOfOneDictionaryChunk) {      sizeOfOneDictionaryChunk=dictionaryChunkSize;      oneDictionaryChunk=new ArrayList<>(sizeOfOneDictionaryChunk);      dictionaryChunks.add(oneDictionaryChunk);    }  }  for (  List<byte[]> dictionaryChunk : dictionaryChunks) {    if (!dictionaryChunk.isEmpty()) {      dictionaryInfo.addDictionaryChunk(dictionaryChunk);    }  }}  }
class C{  public void addEvent(String e){  if (TextUtils.isEmpty(e)) {    return;  }  if (event == null) {    event=new WXEvent();  }  if (containsEvent(e)) {    return;  }  event.add(e);}  }
class C{  Casting(VarAdmin rolePlayer){  this.roleType=Optional.empty();  this.rolePlayer=rolePlayer;}  }
class C{  public static void o(Z[] a){  o(a,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);}  }
class C{  public static final String roll(String isoString,int field,boolean up) throws ParseException {  return roll(isoString,DATETIME_PATTERN,field,up);}  }
class C{  public void addArg(Expr node){  List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();  list.addChild(node);}  }
class C{  public InlineGMLPreviewPanel(InlineFeatureUpdateInterface parentObj,int noOfRows){  this.parentObj=parentObj;  createUI(noOfRows);}  }
class C{  public FriendsAddListQuery userIds(List<Integer> value){  return unsafeParam("user_ids",value);}  }
class C{  @VisibleForTesting static int calculateSizeShownNext(List<Double> yAxisPoints,double yMinShown,double yMaxShown){  if (yAxisPoints.size() < 2) {    return 0;  }  double increment=(yAxisPoints.get(1) - yAxisPoints.get(0));  int startIndex=(int)Math.floor((yMinShown - yAxisPoints.get(0)) / increment + 1);  int endIndex=(int)Math.ceil((yMaxShown - yAxisPoints.get(yAxisPoints.size() - 1)) / increment) + yAxisPoints.size() - 1;  return endIndex - startIndex;}  }
class C{  private byte[] copyOfRange(byte[] source,int from,int to){  byte[] range=new byte[to - from];  System.arraycopy(source,from,range,0,range.length);  return range;}  }
class C{  public Object jjtAccept(MithraQLVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SELL_ITEM_MULTI(String value1,String value0s){  return new SM_SYSTEM_MESSAGE(1300787,value1,value0s);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ARTIFACT_INITIAL_TIME(String value0){  return new SM_SYSTEM_MESSAGE(1390197,value0);}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  private static void save(){  if (isSaving.compareAndSet(false,true)) {    Executors.newSingleThreadScheduledExecutor().schedule(null,SAVE_DELAY_SECONDS,TimeUnit.SECONDS);  }}  }
class C{  public V remove(Object key){  return doRemove(key,null);}  }
class C{  public boolean contains(ClearModifiers modifiers){  return super.contains(modifiers);}  }
class C{  public VideoEditQuery edit(UserActor actor,int videoId){  return new VideoEditQuery(getClient(),actor,videoId);}  }
class C{  private void renderVectorMap(FeatureSource<SimpleFeatureType,SimpleFeature> features,Rectangle imageSize,Style style,int dpi){  List<Layer> layerList=new ArrayList<Layer>();  if (style != null) {    FeatureLayer featureLayer=new FeatureLayer(features,style);    layerList.add(featureLayer);  }  boolean hasGeometry=false;  ReferencedEnvelope bounds=null;  if (features != null) {    bounds=calculateBounds();    wmsEnvVarValues.setMapBounds(bounds);    EnvironmentVariableManager.getInstance().setWMSEnvVarValues(wmsEnvVarValues);    if (features.getSchema() != null) {      hasGeometry=(features.getSchema().getGeometryDescriptor() != null);    }  }  internal_renderMap(layerList,bounds,imageSize,hasGeometry,dpi);}  }
class C{  public void caseCastExpr(CastExpr v){  setResult(fetchNode(v.getOp()));}  }
class C{  public void removeTemplate(Context context,ITemplateHolder template,boolean fromReplication,boolean origin,boolean dontReplicate){  removeTemplate(context,template,fromReplication,origin,dontReplicate,TemplateRemoveReasonCodes.OPERATED_OR_TIMEDOUT);}  }
class C{  public void clearDirtyFlag(){  dirty=false;}  }
class C{  public static boolean clearIfNotModified(HttpServletRequest request,HttpServletResponse response,Collection<? extends IdentifiableObject> objects){  String tag=QUOTE + IdentifiableObjectUtils.getLastUpdatedTag(objects) + QUOTE;  response.setHeader(HEADER_ETAG,tag);  String inputTag=request.getHeader(HEADER_IF_NONE_MATCH);  if (objects != null && inputTag != null && inputTag.equals(tag)) {    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);    objects.clear();    return true;  }  return false;}  }
class C{  public final boolean isValid(){  State state=getConnection().getState();  boolean valid=validStates.contains(state);  if (!valid) {    log.info(this + " wont be processed cuz its valid state don't match current connection state: " + state);  }  return valid;}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  private IEntryPacket readObjectFromSpace(OpenJPAStateManager sm) throws UnusableEntryException, TransactionException, InterruptedException, RemoteException {  IEntryPacket result;  final ISpaceProxy proxy=(ISpaceProxy)getConfiguration().getSpace();  final ITypeDesc typeDescriptor=proxy.getDirectProxy().getTypeManager().getTypeDescByName(sm.getMetaData().getDescribedType().getName());  final Object[] ids=ApplicationIds.toPKValues(sm.getObjectId(),sm.getMetaData());  final int readModifier=(_transaction != null) ? getConfiguration().getReadModifier() : ReadModifiers.REPEATABLE_READ;  ITemplatePacket template;  if (typeDescriptor.isAutoGenerateId())   template=TemplatePacketFactory.createUidPacket((String)ids[0],null,0,QueryResultTypeInternal.OBJECT_JAVA); else   template=TemplatePacketFactory.createIdPacket(ids[0],null,0,typeDescriptor,QueryResultTypeInternal.OBJECT_JAVA,null);  result=(IEntryPacket)proxy.read(template,_transaction,0,readModifier);  return result;}  }
class C{  protected String determineInitialUrl(int tabId){  String initialUrl=null;  if (mTabModel != null) {    initialUrl=mTabModel.getInitialUrlForDocument(tabId);  }  if (TextUtils.isEmpty(initialUrl) && getIntent() != null) {    initialUrl=IntentHandler.getUrlFromIntent(getIntent());  }  if (TextUtils.isEmpty(initialUrl) && mDocumentTab != null && mDocumentTab.getWebContents() != null) {    NavigationEntry entry=mDocumentTab.getWebContents().getNavigationController().getEntryAtIndex(0);    if (entry != null)     initialUrl=entry.getOriginalUrl();  }  return initialUrl;}  }
class C{  public void put0(int i,int j,Z a){  dirty=true;  re[i][j]=a.re;  im[i][j]=a.im;}  }
class C{  protected void bindIconToView(boolean showImage,RecipientEntry entry,ImageView view,AdapterType type){  if (view == null) {    return;  }  if (showImage) {switch (type) {case BASE_RECIPIENT:      byte[] photoBytes=entry.getPhotoBytes();    if (photoBytes != null && photoBytes.length > 0) {      final Bitmap photo=ChipsUtil.getClip(BitmapFactory.decodeByteArray(photoBytes,0,photoBytes.length));      view.setImageBitmap(photo);    } else {      BaseRecipientAdapter.tryFetchPhoto(entry,mContext.getContentResolver(),null,true,-1);      view.setImageResource(getDefaultPhotoResId());    }  break;case RECIPIENT_ALTERNATES:Uri thumbnailUri=entry.getPhotoThumbnailUri();if (thumbnailUri != null) {view.setImageURI(thumbnailUri);} else {view.setImageResource(getDefaultPhotoResId());}break;case SINGLE_RECIPIENT:default :break;}view.setVisibility(View.VISIBLE);} else {view.setVisibility(View.GONE);}}  }
class C{  private void beforeBulkExecution(IReplicationInBatchContext context){  if (_operationStatisticsHandler != null) {    MirrorOperationsImpl sourceChannelStatistics=(MirrorOperationsImpl)_operationStatisticsHandler.getSourceChannelStatistics(context.getSourceLookupName());    List<BulkItem> bulk=context.getPendingContext();    sourceChannelStatistics.addOperationCount(bulk);  }}  }
class C{  public Object jjtAccept(MithraQLVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  private void broadcastToGroupMembers(final Player player){  if (player.isInTeam()) {    player.getCurrentGroup().sendPacket(new SM_MESSAGE(player,message,type));  } else {    PacketSendUtility.sendMessage(player,"You are not in an alliance or group. (Error 105)");  }}  }
class C{  public WishlistDataCursor queryWishlistsData(){  QueryHelper qh=new QueryHelper();  qh.Distinct=false;  qh.Table=S.TABLE_WISHLIST_DATA;  qh.Columns=null;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  SQLiteQueryBuilder qb=builderWishlistData();  Cursor cursor=qb.query(getWritableDatabase(),qh.Columns,qh.Selection,qh.SelectionArgs,qh.GroupBy,qh.Having,qh.OrderBy,qh.Limit);  return new WishlistDataCursor(cursor);}  }
class C{  private void processCall(PathEdge<N,D> edge){  final D d1=edge.factAtSource();  final N n=edge.getTarget();  logger.trace("Processing call to {}",n);  final D d2=edge.factAtTarget();  assert d2 != null;  Collection<N> returnSiteNs=icfg.getReturnSitesOfCallAt(n);  Collection<M> callees=icfg.getCalleesOfCallAt(n);  for (  M sCalledProcN : callees) {    FlowFunction<D> function=flowFunctions.getCallFlowFunction(n,sCalledProcN);    Set<D> res=computeCallFlowFunction(function,d1,d2);    Collection<N> startPointsOf=icfg.getStartPointsOf(sCalledProcN);    for (    D d3 : res) {      compactAbstractionChain(d3,d2);      for (      N sP : startPointsOf) {        propagate(d3,sP,d3,n,false);      }      if (!addIncoming(sCalledProcN,d3,n,d1,d2))       continue;      Set<Pair<N,D>> endSumm=endSummary(sCalledProcN,d3);      if (endSumm != null)       for (      Pair<N,D> entry : endSumm) {        N eP=entry.getO1();        D d4=entry.getO2();        for (        N retSiteN : returnSiteNs) {          FlowFunction<D> retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,eP,retSiteN);          for (          D d5 : computeReturnFlowFunction(retFunction,d3,d4,n,Collections.singleton(d1))) {            D d5p=d5;            if (d5.equals(d2))             d5p=d2; else             if (setJumpPredecessors)             d5p.setPredecessor(d3);            propagate(d1,retSiteN,d5p,n,false);          }        }      }    }  }  for (  N returnSiteN : returnSiteNs) {    FlowFunction<D> callToReturnFlowFunction=flowFunctions.getCallToReturnFlowFunction(n,returnSiteN);    for (    D d3 : computeCallToReturnFlowFunction(callToReturnFlowFunction,d1,d2)) {      compactAbstractionChain(d3,d2);      propagate(d1,returnSiteN,d3,n,false);    }  }}  }
class C{  public Builder withDenyDialogMsg(@StringRes int denyDialogMsgRes){  buildObj.denyDialogMsgRes=denyDialogMsgRes;  buildObj.showDenyDialog=true;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_TS_RANK(String value0){  return new SM_SYSTEM_MESSAGE(1300574,value0);}  }
class C{  public AggregateTranslator(final CharSequenceTranslator... translators){  this.translators=clone(translators);}  }
class C{  public static void save(String filename){  if (filename == null)   throw new NullPointerException();  File file=new File(filename);  String suffix=filename.substring(filename.lastIndexOf('.') + 1);  if (suffix.toLowerCase().equals("png")) {    try {      ImageIO.write(onscreenImage,suffix,file);    } catch (    IOException e) {      e.printStackTrace();    }  } else   if (suffix.toLowerCase().equals("jpg")) {    WritableRaster raster=onscreenImage.getRaster();    WritableRaster newRaster;    newRaster=raster.createWritableChild(0,0,width,height,0,0,new int[]{0,1,2});    DirectColorModel cm=(DirectColorModel)onscreenImage.getColorModel();    DirectColorModel newCM=new DirectColorModel(cm.getPixelSize(),cm.getRedMask(),cm.getGreenMask(),cm.getBlueMask());    BufferedImage rgbBuffer=new BufferedImage(newCM,newRaster,false,null);    try {      ImageIO.write(rgbBuffer,suffix,file);    } catch (    IOException e) {      e.printStackTrace();    }  } else {    System.out.println("Invalid image file type: " + suffix);  }}  }
class C{  private void captureView(View view,OutputStream os){  int w=view.getWidth();  int h=view.getHeight();  if (w <= 0 || h <= 0) {    throw new RuntimeException("Impossible to snapshot the view: view is invalid");  }  Bitmap bitmap=Bitmap.createBitmap(view.getWidth(),view.getHeight(),Bitmap.Config.ARGB_8888);  Canvas c=new Canvas(bitmap);  view.draw(c);  if (width != null && height != null && (width != w || height != h)) {    bitmap=Bitmap.createScaledBitmap(bitmap,width,height,true);  }  if (bitmap == null) {    throw new RuntimeException("Impossible to snapshot the view");  }  bitmap.compress(format,(int)(100.0 * quality),os);}  }
class C{  public static boolean exists(String name){  return channels.containsKey(name);}  }
class C{  public static void playWavFile(String filename,int loop){  playWavFile(filename,loop,false);}  }
class C{  public static Document createXmlDocument(AnnotatedString input){  Document doc=null;  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder builder=factory.newDocumentBuilder();    doc=builder.newDocument();  } catch (  ParserConfigurationException pce) {    throw new ProcessingException(pce.getLocalizedMessage(),pce);  }  Element root=doc.createElement(XML_DOCUMENT);  doc.appendChild(root);  int tuId=0;  Element p=doc.createElement(XML_PARAGRAPH);  Element tu=doc.createElement(XML_TEXT_UNIT);  tu.setAttribute(ID_ATT,tuId + "");  char c=input.setIndex(0);  while (c != CharacterIterator.DONE) {    int tokenStart=input.getRunStart(JTok.CLASS_ANNO);    int tokenEnd=input.getRunLimit(JTok.CLASS_ANNO);    if (null != input.getAnnotation(JTok.CLASS_ANNO)) {      String type=(String)input.getAnnotation(JTok.CLASS_ANNO);      if (null == type) {        throw new ProcessingException(String.format("undefined class %s",input.getAnnotation(JTok.CLASS_ANNO)));      }      Element xmlToken=doc.createElement(XML_TOKEN);      String image=input.substring(tokenStart,tokenEnd);      xmlToken.setAttribute(IMAGE_ATT,image);      String ptbImage=Token.applyPtbFormat(image,type);      if (null != ptbImage) {        xmlToken.setAttribute(PTB_ATT,ptbImage);      }      xmlToken.setAttribute(TOK_TYPE_ATT,type);      xmlToken.setAttribute(OFFSET_ATT,tokenStart + "");      xmlToken.setAttribute(LENGTH_ATT,image.length() + "");      if (null != input.getAnnotation(JTok.BORDER_ANNO)) {        if (tu.hasChildNodes()) {          p.appendChild(tu);          tu=doc.createElement(XML_TEXT_UNIT);          tuId++;          tu.setAttribute(ID_ATT,tuId + "");        }      }      if (input.getAnnotation(JTok.BORDER_ANNO) == JTok.P_BORDER) {        if (p.hasChildNodes()) {          root.appendChild(p);          p=doc.createElement(XML_PARAGRAPH);        }      }      tu.appendChild(xmlToken);    }    c=input.setIndex(tokenEnd);  }  if (tu.hasChildNodes()) {    p.appendChild(tu);  }  if (p.hasChildNodes()) {    root.appendChild(p);  }  return doc;}  }
class C{  public static final Vertex locateVertexInGraph(UniqueVertexGraph gGraph,String sToFind){  return gGraph.locateVertex(new VertexImpl(sToFind));}  }
class C{  @NotNull public static Color worstContrastColor(@NotNull Color foreground,@NotNull Color background){  int backgroundAlpha=background.getAlpha();  int r=worstContrastComponent(foreground.getRed(),background.getRed(),backgroundAlpha);  int g=worstContrastComponent(foreground.getGreen(),background.getGreen(),backgroundAlpha);  int b=worstContrastComponent(foreground.getBlue(),background.getBlue(),backgroundAlpha);  return new Color(r,g,b);}  }
class C{  public static String readFile(final InputStream inputStream){  String str;  final StringBuilder buf=new StringBuilder();  try {    final BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream,CHARSET));    while ((str=reader.readLine()) != null) {      buf.append(str).append(StringLiterals.NEWLINE);    }  } catch (  IOException e) {    System.out.println(ExceptionMessages.COULD_NOT_READ.with(e));  } finally {    try {      inputStream.close();    } catch (    IOException ignore) {    }  }  return buf.toString().trim();}  }
class C{  private void updateMediaSessionIntent(){  if (mVideoSession == null) {    return;  }  Intent nowPlayIntent=new Intent(getContext(),VideoExampleActivity.class);  nowPlayIntent.putExtra(VideoExampleActivity.TAG,mMediaMetaData);  nowPlayIntent.setData(Uri.parse(mMediaMetaData.getMediaSourcePath()));  PendingIntent pi=PendingIntent.getActivity(getContext(),0,nowPlayIntent,PendingIntent.FLAG_CANCEL_CURRENT);  mVideoSession.setSessionActivity(pi);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stun_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200594,skillcaster,skillname);}  }
class C{  public void loadGrammarWithContext(XMLDTDValidator validator,String rootName,String publicId,String systemId,String baseSystemId,String internalSubset) throws IOException, XNIException {  final DTDGrammarBucket grammarBucket=validator.getGrammarBucket();  final DTDGrammar activeGrammar=grammarBucket.getActiveGrammar();  if (activeGrammar != null && !activeGrammar.isImmutable()) {    fGrammarBucket=grammarBucket;    fEntityManager.setScannerVersion(getScannerVersion());    reset();    try {      if (internalSubset != null) {        StringBuffer buffer=new StringBuffer(internalSubset.length() + 2);        buffer.append(internalSubset).append("]>");        XMLInputSource is=new XMLInputSource(null,baseSystemId,null,new StringReader(buffer.toString()),null);        fEntityManager.startDocumentEntity(is);        fDTDScanner.scanDTDInternalSubset(true,false,systemId != null);      }      if (systemId != null) {        XMLDTDDescription desc=new XMLDTDDescription(publicId,systemId,baseSystemId,null,rootName);        XMLInputSource source=fEntityManager.resolveEntity(desc);        fDTDScanner.setInputSource(source);        fDTDScanner.scanDTDExternalSubset(true);      }    } catch (    EOFException e) {    } finally {      fEntityManager.closeReaders();    }  }}  }
class C{  public static void debug(){  DEBUG=true;}  }
class C{  public static void main(String[] args){  Vertx vertx=Vertx.vertx();  vertx.deployVerticleObservable(WebServiceExample.class.getName()).subscribe(null,null);}  }
class C{  private DimensionRow makeDimensionRow(String value){  LinkedHashMap<DimensionField,String> map=new LinkedHashMap<>();  for (  DimensionField dimensionField : dimension.getDimensionFields()) {    map.put(dimensionField,value);  }  return new DimensionRow(dimension.getKey(),map);}  }
class C{  @Deprecated public SimplifiedIntervalList findMissingRequestTimeGrainIntervals(DataApiRequest apiRequest,DruidAggregationQuery<?> query,Set<PhysicalTable> physicalTables){  if (apiRequest.getIntervals() == null) {    String message="Requested interval list cannot be null";    LOG.error(message);    throw new IllegalArgumentException(message);  }  return findMissingTimeGrainIntervals(apiRequest,query,physicalTables,new SimplifiedIntervalList(apiRequest.getIntervals()),apiRequest.getGranularity());}  }
class C{  public void attackMode(int targetObjId){  VisibleObject obj=getOwner().getKnownList().getObject(targetObjId);  if (obj != null && obj instanceof Creature) {    SummonsService.attackMode(getOwner());  }}  }
class C{  public boolean inRangeForLuredPokemon(){  return getDistance() <= api.getSettings().getMapSettings().getPokemonVisibilityRange();}  }
class C{  @Override public void eventEntry(EventEntry eventLogEntry){  throw new UnsupportedOperationException();}  }
class C{  public void fileOpenedSaved(){  dataEditedFlag=false;  notifySLDEditorFileHasUpdated();}  }
class C{  public Builder addColumnDouble(String name,Double minAllowedValue,Double maxAllowedValue,boolean allowNaN,boolean allowInfinite){  return addColumn(new DoubleMetaData(name,minAllowedValue,maxAllowedValue,allowNaN,allowInfinite));}  }
class C{  public static double tan(double x){  boolean negative=false;  int quadrant=0;  double xa=x;  if (x < 0) {    negative=true;    xa=-xa;  }  if (xa == 0.0) {    long bits=Double.doubleToRawLongBits(x);    if (bits < 0) {      return -0.0;    }    return 0.0;  }  if (xa != xa || xa == Double.POSITIVE_INFINITY) {    return Double.NaN;  }  double xb=0;  if (xa > 3294198.0) {    double reduceResults[]=new double[3];    reducePayneHanek(xa,reduceResults);    quadrant=((int)reduceResults[0]) & 3;    xa=reduceResults[1];    xb=reduceResults[2];  } else   if (xa > 1.5707963267948966) {    final CodyWaite cw=new CodyWaite(xa);    quadrant=cw.getK() & 3;    xa=cw.getRemA();    xb=cw.getRemB();  }  if (xa > 1.5) {    final double pi2a=1.5707963267948966;    final double pi2b=6.123233995736766E-17;    final double a=pi2a - xa;    double b=-(a - pi2a + xa);    b+=pi2b - xb;    xa=a + b;    xb=-(xa - a - b);    quadrant^=1;    negative^=true;  }  double result;  if ((quadrant & 1) == 0) {    result=tanQ(xa,xb,false);  } else {    result=-tanQ(xa,xb,true);  }  if (negative) {    result=-result;  }  return result;}  }
class C{  public final void addPropertyChangeListener(PropertyChangeListener listener){  getChangeSupport().addPropertyChangeListener(listener);}  }
class C{  public ConversationFactory withFirstPrompt(Prompt firstPrompt){  this.firstPrompt=firstPrompt;  return this;}  }
class C{  private View findReferenceChildClosestToStart(RecyclerView.State state){  return mShouldReverseLayout ? findLastReferenceChild(state.getItemCount()) : findFirstReferenceChild(state.getItemCount());}  }
class C{  public static Bitmap toRoundCorner(Bitmap bitmap){  int height=bitmap.getHeight();  int width=bitmap.getHeight();  Bitmap output=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(output);  final Paint paint=new Paint();  final Rect rect=new Rect(0,0,width,height);  paint.setAntiAlias(true);  canvas.drawARGB(0,0,0,0);  paint.setColor(0xff424242);  canvas.drawCircle(width / 2,height / 2,width / 2,paint);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));  canvas.drawBitmap(bitmap,rect,rect,paint);  return output;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AssignModExpr fullCopy(){  AssignModExpr tree=(AssignModExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public VisualTree(VisualTable nodes,VisualTable edges,String nodeKey,String sourceKey,String targetKey){  super(nodes,edges,nodeKey,sourceKey,targetKey);}  }
class C{  public static void drawRect(Graphics2D gc,double x,double y,double width,double height,double labelAngle){  Dimension theSize=new Dimension((int)Math.round(width),(int)Math.round(height));  Point2D apt=new Point2D.Float((float)x,(float)y);  AffineTransform saveTransform=gc.getTransform();  if (labelAngle >= 0.5 * Math.PI && labelAngle <= 1.5 * Math.PI) {    apt=Geometry.translateByAngle(apt,labelAngle,theSize.getWidth());    gc.rotate(Geometry.moduloTwoPI(labelAngle - Math.PI),apt.getX(),apt.getY());  } else {    gc.rotate(labelAngle,apt.getX(),apt.getY());  }  gc.drawRect((int)Math.round(apt.getX()),(int)Math.round(apt.getY()) - theSize.height,theSize.width,theSize.height);  gc.setTransform(saveTransform);}  }
class C{  @ObjectiveCName("listen:listenCallback:") public void listen(String pattern,ListenListener listenCallback){  if (listeners.containsKey(pattern)) {    client.onError(Topic.RECORD,Event.LISTENER_EXISTS,pattern);  } else {synchronized (this) {      UtilListener utilListener=new UtilListener(Topic.RECORD,pattern,listenCallback,deepstreamConfig,client,connection);      listeners.put(pattern,utilListener);      utilListener.start();    }  }}  }
class C{  public String fetchFileRevision(String repoLocation,String revision,String filePath) throws MissingObjectException, IncorrectObjectTypeException, IOException {  Repository localRepository=new FileRepository(new File(repoLocation));  ObjectId id=localRepository.resolve(revision);  ObjectReader reader=localRepository.newObjectReader();  try {    RevWalk walk=new RevWalk(reader);    RevCommit commit=walk.parseCommit(id);    RevTree tree=commit.getTree();    TreeWalk treewalk=TreeWalk.forPath(reader,filePath,tree);    if (treewalk != null) {      byte[] data=reader.open(treewalk.getObjectId(0)).getBytes();      return new String(data,"utf-8");    } else {      return "";    }  }  finally {    reader.close();  }}  }
class C{  private VisibilityAnnotationTag findOrAdd(Host h,int visibility){  ArrayList<VisibilityAnnotationTag> va_tags=new ArrayList<VisibilityAnnotationTag>();  for (  Tag t : h.getTags()) {    if (t instanceof VisibilityAnnotationTag) {      VisibilityAnnotationTag vat=(VisibilityAnnotationTag)t;      if (vat.getVisibility() == visibility)       va_tags.add(vat);    }  }  if (va_tags.isEmpty()) {    VisibilityAnnotationTag vat=new VisibilityAnnotationTag(visibility);    h.addTag(vat);    return vat;  }  return (va_tags.get(0));}  }
class C{  public SootClass tryLoadClass(String className,int desiredLevel){  setPhantomRefs(true);  if (!getPhantomRefs() && SourceLocator.v().getClassSource(className) == null) {    setPhantomRefs(false);    return null;  }  SootResolver resolver=SootResolver.v();  SootClass toReturn=resolver.resolveClass(className,desiredLevel);  setPhantomRefs(false);  return toReturn;}  }
class C{  static boolean compare(Tag tag1,Tag tag2){  if (tag1 == tag2) {    return true;  }  if (tag1 == null || tag2 == null) {    return false;  }  if (!(tag2 instanceof ClientDataTagImpl)) {    return false;  }  if (tag1.getDaqTimestamp() == null) {    if (tag2.getDaqTimestamp() != null) {      return false;    }  } else   if (!tag1.getDaqTimestamp().equals(tag2.getDaqTimestamp())) {    return false;  }  if (tag1.getId() == null) {    if (tag2.getId() != null) {      return false;    }  } else   if (!tag1.getId().equals(tag2.getId())) {    return false;  }  if (tag1.getServerTimestamp() == null) {    if (tag2.getServerTimestamp() != null) {      return false;    }  } else   if (!tag1.getServerTimestamp().equals(tag2.getServerTimestamp())) {    return false;  }  if (tag1.getTimestamp() == null) {    if (tag2.getTimestamp() != null) {      return false;    }  } else   if (!tag1.getTimestamp().equals(tag2.getTimestamp())) {    return false;  }  if (tag1.getDataTagQuality() == null) {    if (tag2.getDataTagQuality() != null) {      return false;    }  } else   if (!tag1.getDataTagQuality().equals(tag2.getDataTagQuality())) {    return false;  }  if (tag1.getValue() == null) {    if (tag2.getValue() != null) {      return false;    }  } else   if (!tag1.getValue().equals(tag2.getValue())) {    return false;  }  if (tag1.getValueDescription() == null) {    if (tag2.getValueDescription() != null) {      return false;    }  } else   if (!tag1.getValueDescription().equals(tag2.getValueDescription())) {    return false;  }  return true;}  }
class C{  public Vector1DFormat(final String prefix,final String suffix,final NumberFormat format){  super(prefix,suffix,DEFAULT_SEPARATOR,format);}  }
class C{  public void register(String key,ItemStack value){  register(key,matcherOf(value));}  }
class C{  protected void startResetExpiredJobsThread(){  if (resetExpiredJobThread == null) {    resetExpiredJobThread=new Thread(resetExpiredJobsRunnable);  }  resetExpiredJobThread.start();}  }
class C{  public boolean addAll(PointsToSet s){  return false;}  }
class C{  public LeadsCompleteQuery complete(String vkSid,String secret){  return new LeadsCompleteQuery(getClient(),vkSid,secret);}  }
class C{  public boolean hasPermissionByInternalId(String internalId,String permission){  Permission resolvedPermission=getPermissionResolver().resolvePermission(permission);  return hasPermissionByInternalId(internalId,resolvedPermission);}  }
class C{  public static String qualifySignature(final String signature,final IType context){  if (context == null)   return signature;  String qualifier=Signature.getSignatureQualifier(signature);  if (qualifier.length() > 0)   return signature;  String elementType=Signature.getElementType(signature);  String erasure=Signature.getTypeErasure(elementType);  String simpleName=Signature.getSignatureSimpleName(erasure);  String genericSimpleName=Signature.getSignatureSimpleName(elementType);  int dim=Signature.getArrayCount(signature);  try {    String[][] strings=context.resolveType(simpleName);    if (strings != null && strings.length > 0)     qualifier=strings[0][0];  } catch (  JavaModelException e) {  }  if (qualifier.length() == 0)   return signature;  String qualifiedType=Signature.toQualifiedName(new String[]{qualifier,genericSimpleName});  String qualifiedSignature=Signature.createTypeSignature(qualifiedType,true);  String newSignature=Signature.createArraySignature(qualifiedSignature,dim);  return newSignature;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_NAME_CHANGE_DELAY(String durationtime1,String durationtime0){  return new SM_SYSTEM_MESSAGE(1400692,durationtime1,durationtime0);}  }
class C{  public boolean documentFitsView(){  if (swipeVertical) {    return getPageCount() * optimalPageHeight < getHeight();  } else {    return getPageCount() * optimalPageWidth < getWidth();  }}  }
class C{  public boolean retainEntries(TIntObjectProcedure<V> procedure){  boolean modified=false;  byte[] states=_states;  int[] keys=_set;  V[] values=_values;  tempDisableAutoCompaction();  try {    for (int i=keys.length; i-- > 0; ) {      if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {        removeAt(i);        modified=true;      }    }  }  finally {    reenableAutoCompaction(true);  }  return modified;}  }
class C{  public void put(Object[] parameters){  if (!this.isAlive()) {    LOGGER.warn("HandlerThread has not being started yet and objects are being added!");  } else {    if (handlerEnabled) {synchronized (threadMonitorObject) {        incomingQueue.offer(parameters);        threadMonitorObject.notify();      }    } else {      throw new IllegalStateException("The ThreadHandler is no longer enabled and cannot accept any new objects.");    }  }}  }
class C{  public int k(){  return soot.PhaseOptions.getInt(options,"k");}  }
class C{  private boolean isNextInStep(final T nextTime,final FieldODEStateInterpolator<T> interpolator){  return forward ? nextTime.getReal() <= interpolator.getCurrentState().getTime().getReal() : nextTime.getReal() >= interpolator.getCurrentState().getTime().getReal();}  }
class C{  public boolean isModuleDependency(@NotNull String artifact){  AndroidGradleModel gradleModel=AndroidGradleModel.get(myFacet);  return gradleModel != null && GradleUtil.dependsOn(gradleModel,artifact);}  }
class C{  protected void calcYValueCount(){  mYValCount=0;  if (mDataSets == null)   return;  int count=0;  for (int i=0; i < mDataSets.size(); i++) {    count+=mDataSets.get(i).getEntryCount();  }  mYValCount=count;}  }
class C{  public StorageGetKeysQuery(VkApiClient client,UserActor actor){  super(client,"storage.getKeys",Utils.buildParametrizedType(List.class,String.class));  accessToken(actor.getAccessToken());}  }
class C{  private int FF1(int x7,int x6,int x5,int x4,int x3,int x2,int x1,int x0,int w){  int t;switch (rounds) {case 3:    t=f1(x1,x0,x3,x5,x6,x2,x4);  break;case 4:t=f1(x2,x6,x1,x4,x5,x3,x0);break;default :t=f1(x3,x4,x1,x0,x5,x2,x6);}return (t >>> 7 | t << 25) + (x7 >>> 11 | x7 << 21) + w;}  }
class C{  public Builder(File base){  this.base=base;  this.patterns=Lists.newArrayList();  this.excludes=Lists.newArrayList();  this.excludeDirectories=false;  this.pathFilter=null;}  }
class C{  public static int read(){  return KEYS;}  }
class C{  public static ILogEntry[] createLogEntriesFrom(ISVNRemoteFile remoteFile,ISVNLogMessage[] logMessages,Tags[] tags,SVNUrl[] urls){  ILogEntry[] result=new ILogEntry[logMessages.length];  for (int i=0; i < logMessages.length; i++) {    ISVNLogMessage logMessage=logMessages[i];    ISVNRemoteResource correspondingResource;    correspondingResource=new RemoteFile(null,remoteFile.getRepository(),urls[i],logMessage.getRevision(),logMessage.getRevision(),logMessage.getDate(),logMessage.getAuthor());    result[i]=new LogEntry(logMessage,remoteFile,correspondingResource,(tags[i] != null) ? tags[i].getTags() : null);  }  return result;}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  @Override public RegressionResults regress() throws MathIllegalArgumentException {  return regress(this.nvars);}  }
class C{  public static String decompressToStringForZlib(byte[] bytesToDecompress){  byte[] bytesDecompressed=decompressForZlib(bytesToDecompress);  String returnValue=null;  try {    returnValue=new String(bytesDecompressed,0,bytesDecompressed.length,"UTF-8");  } catch (  UnsupportedEncodingException uee) {    uee.printStackTrace();  }  return returnValue;}  }
class C{  public void extractSamples(Collection<String> samples,Document srcDoc){  getDataTable().clear();  srcDoc.getDataTable().extractSamplesTo(samples,getDataTable());  getSampleAttributeTable().clear();  getSampleAttributeTable().addTable(srcDoc.getSampleAttributeTable().extractTable(samples),false,true);  getSampleAttributeTable().getAttributeOrder().clear();  getSampleAttributeTable().setAttributeOrder(srcDoc.getSampleAttributeTable().getAttributeOrder());  getSampleAttributeTable().getSampleOrder().clear();  getSampleAttributeTable().getSampleOrder().addAll(samples);}  }
class C{  public static Aggregate<Object,Long> count(){  return new CountAggregate();}  }
class C{  public boolean changeHovering(@SwingCoordinate int x,@SwingCoordinate int y){  boolean oldHovering=myIsHovering;  Dimension size=myScreenView.getSize();  Rectangle resizeZone=new Rectangle(myScreenView.getX() + size.width,myScreenView.getY() + size.height,RESIZING_HOVERING_SIZE,RESIZING_HOVERING_SIZE);  myIsHovering=resizeZone.contains(x,y);  return myIsHovering != oldHovering;}  }
class C{  private Intent createPasswordIntent(){  mProfileSyncService.setPassphrasePrompted(true);  Intent intent=new Intent(Intent.ACTION_MAIN);  intent.setComponent(new ComponentName(mApplicationContext,mPassphraseRequestActivity));  intent.addCategory(Intent.CATEGORY_LAUNCHER);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  return intent;}  }
class C{  private static int byteCompaction(int mode,int[] codewords,Charset encoding,int codeIndex,StringBuilder result){  ByteArrayOutputStream decodedBytes=new ByteArrayOutputStream();  if (mode == BYTE_COMPACTION_MODE_LATCH) {    int count=0;    long value=0;    int[] byteCompactedCodewords=new int[6];    boolean end=false;    int nextCode=codewords[codeIndex++];    while ((codeIndex < codewords[0]) && !end) {      byteCompactedCodewords[count++]=nextCode;      value=900 * value + nextCode;      nextCode=codewords[codeIndex++];      if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      } else {        if ((count % 5 == 0) && (count > 0)) {          for (int j=0; j < 6; ++j) {            decodedBytes.write((byte)(value >> (8 * (5 - j))));          }          value=0;          count=0;        }      }    }    if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) {      byteCompactedCodewords[count++]=nextCode;    }    for (int i=0; i < count; i++) {      decodedBytes.write((byte)byteCompactedCodewords[i]);    }  } else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) {    int count=0;    long value=0;    boolean end=false;    while (codeIndex < codewords[0] && !end) {      int code=codewords[codeIndex++];      if (code < TEXT_COMPACTION_MODE_LATCH) {        count++;        value=900 * value + code;      } else {        if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {          codeIndex--;          end=true;        }      }      if ((count % 5 == 0) && (count > 0)) {        for (int j=0; j < 6; ++j) {          decodedBytes.write((byte)(value >> (8 * (5 - j))));        }        value=0;        count=0;      }    }  }  result.append(new String(decodedBytes.toByteArray(),encoding));  return codeIndex;}  }
class C{  public static ContextSet singleton(String key,String value){  if (key == null) {    throw new NullPointerException("key");  }  if (value == null) {    throw new NullPointerException("value");  }  MutableContextSet set=new MutableContextSet();  set.add(key,value);  return set.immutableCopy();}  }
class C{  public JMXConnection(){}  }
class C{  private void initPresenter(){  this.toolbarPresenter=new ToolbarImplementor();  this.pagerManagePresenter=new PagerManageImplementor(pagerManageModel,this);  this.popupManagePresenter=new PopupManageImplementor(this);  this.swipeBackManagePresenter=new SwipeBackManageImplementor(this);  this.browsablePresenter=new BrowsableImplementor(browsableModel,this);}  }
class C{  public static SpaceURL verifyURL(String url) throws MalformedURLException {  return parseURL(url,null);}  }
class C{  public ConfigureLayerStyleDialog(){  setResizable(true);  setTitle(Localisation.getString(ConfigureLayerStyleDialog.class,"ConfigureLayerStyleDialog.title"));  setModalityType(ModalityType.APPLICATION_MODAL);  setModalExclusionType(ModalExclusionType.APPLICATION_EXCLUDE);  setModal(true);  createUI();  setSize(800,400);  Controller.getInstance().centreDialog(this);}  }
class C{  protected GroupsApproveRequestQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public boolean saveHtmlCache(String url,byte[] bytes){  if (TextUtils.isEmpty(url) || null == bytes || bytes.length == 0) {    return false;  }  if (!checkUrl(url)) {    return true;  }  return mInternalHtmlCache.saveCache(url,bytes);}  }
class C{  public void displaySearchContext(String selection,String end){  cancelSearchTermResolutionAnimation();  getSearchBarControl().setSearchContext(selection,end);  resetSearchBarContextOpacity();}  }
class C{  @Override public String toString(){  String s=super.toString();  int index1=s.lastIndexOf('$');  if (index1 != -1) {    return s.substring(index1 + 1);  }  int index2=s.lastIndexOf('.');  if (index2 != -1) {    return s.substring(index2 + 1);  }  return s;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_WRONG_TARGET_CLASS(String value0){  return new SM_SYSTEM_MESSAGE(1400338,value0);}  }
class C{  public boolean hasNewerVersion(){  return latestStable.compareTo(currentVersion) > 0;}  }
class C{  public SearchGetHintsQuery limit(Integer value){  return unsafeParam("limit",value);}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0d,0.0000059049d,0.000137781d,0.0014467005,0.009001692,0.036756909,0.1029193452,0.200120949,0.266827932,0.2334744405,0.121060821,0.0282475249,0d};}  }
class C{  static String makePrivateSnippetName(Location location,String name){  return name + "#" + location.baseInputName();}  }
class C{  public boolean islocked(Object key){  String uid=String.valueOf(key);  if (lockedUIDHashMap.containsKey(uid))   return true;  SpaceMapEntry ee=getTemplate(key);  try {    Object lockEntry=masterSpace.readIfExists(ee,null,0);    return lockEntry == null;  } catch (  Exception e) {    return true;  } finally {    releaseTemplate(ee);  }}  }
class C{  public Map.Entry<K,V> lowerEntry(K key){  return getNear(key,LT);}  }
class C{  private void fillXMLAttributes2(Attributes2 att){  fAttributes.removeAllAttributes();  final int len=att.getLength();  for (int i=0; i < len; ++i) {    fillXMLAttribute(att,i);    fAttributes.setSpecified(i,att.isSpecified(i));    if (att.isDeclared(i)) {      fAttributes.getAugmentations(i).putItem(Constants.ATTRIBUTE_DECLARED,Boolean.TRUE);    }  }}  }
class C{  private void addDynamicParameter(DynamicParameterConcatType dynParam,Map<String,Integer> iterators){  DynamicParameterConcatType resolvedParameter=contextProvider.getDynamicContext().cloneParameter(dynParam);  resolvedParameter.setName(parameterResolver.resolveIteratorParameter(resolvedParameter.getName(),iterators));  resolvedParameter.setValue(parameterResolver.resolveIteratorParameter(resolvedParameter.getValue(),iterators));  resolvedParameter.setAdd(parameterResolver.resolveIteratorParameter(resolvedParameter.getAdd(),iterators));  contextProvider.getDynamicContext().addParameter(resolvedParameter,ContextInfo.EMPTY,skipOperationResolver.isSkip(dynParam));}  }
class C{  protected static String cast(VariableRef value,Type<?> type){  String castValue=value.toString();  String typeName=type.getCanonicalName();  if (type.isPrimitive()) {    if (value.isWrapper()) {      castValue=format("%s.%sValue()",castValue,type);    } else     if (Character.TYPE == type.getRawType() && value.type().isString()) {      castValue=format("%s.charAt(0)",value);    } else     if (!value.isPrimitive()) {      castValue=format("%s.valueOf(\"\"+%s).%sValue()",type.getWrapperType().getCanonicalName(),castValue,typeName);    }  } else   if (type.isPrimitiveWrapper() && value.isPrimitive()) {    castValue=format("%s.valueOf(%s)",type.getCanonicalName(),castValue);  } else   if (type.isString() && !value.type().isString()) {    castValue="\"\" + " + castValue;  } else   if (!castValue.replace("(","").startsWith(typeName)) {    castValue="((" + typeName + ")"+ castValue+ ")";  }  return castValue;}  }
class C{  public View(String typeName,String sqlExpression){  super(typeName,sqlExpression);}  }
class C{  public boolean hasIDConstraints(){  return fHasIDC;}  }
class C{  public SM_PLAYER_INFO(Player player,boolean enemy){  this.player=player;  this.enemy=enemy;}  }
class C{  public boolean isAspectPreserving(){  return (myFlags & PRESERVE_RATIO) != 0;}  }
class C{  DynamicAABBTreeNode balance(DynamicAABBTreeNode node){  DynamicAABBTreeNode a=node;  if (a.isLeaf() || a.height < 2) {    return a;  }  DynamicAABBTreeNode b=a.left;  DynamicAABBTreeNode c=a.right;  int balance=c.height - b.height;  if (balance > 1) {    DynamicAABBTreeNode f=c.left;    DynamicAABBTreeNode g=c.right;    c.left=a;    c.parent=a.parent;    a.parent=c;    if (c.parent != null) {      if (c.parent.left == a) {        c.parent.left=c;      } else {        c.parent.right=c;      }    } else {      this.root=c;    }    if (f.height > g.height) {      c.right=f;      a.right=g;      g.parent=a;      a.aabb=b.aabb.getUnion(g.aabb);      c.aabb=a.aabb.getUnion(f.aabb);      a.height=1 + Math.max(b.height,g.height);      c.height=1 + Math.max(a.height,f.height);    } else {      c.right=g;      a.right=f;      f.parent=a;      a.aabb=b.aabb.getUnion(f.aabb);      c.aabb=a.aabb.getUnion(g.aabb);      a.height=1 + Math.max(b.height,f.height);      c.height=1 + Math.max(a.height,g.height);    }    return c;  }  if (balance < -1) {    DynamicAABBTreeNode d=b.left;    DynamicAABBTreeNode e=b.right;    b.left=a;    b.parent=a.parent;    a.parent=b;    if (b.parent != null) {      if (b.parent.left == a) {        b.parent.left=b;      } else {        b.parent.right=b;      }    } else {      this.root=b;    }    if (d.height > e.height) {      b.right=d;      a.left=e;      e.parent=a;      a.aabb=c.aabb.getUnion(e.aabb);      b.aabb=a.aabb.getUnion(d.aabb);      a.height=1 + Math.max(c.height,e.height);      b.height=1 + Math.max(a.height,d.height);    } else {      b.right=e;      a.left=d;      d.parent=a;      a.aabb=c.aabb.getUnion(d.aabb);      b.aabb=a.aabb.getUnion(e.aabb);      a.height=1 + Math.max(c.height,d.height);      b.height=1 + Math.max(a.height,e.height);    }    return b;  }  return a;}  }
class C{  private HarmonicCurveFitter(double[] initialGuess,int maxIter){  this.initialGuess=initialGuess;  this.maxIter=maxIter;}  }
class C{  public void computeOverlapGraph(String label,int minOverlap,List<ReadData> readData,ProgressListener progress) throws IOException, CanceledException {  this.label=label;  final OverlapGraphBuilder overlapGraphBuilder=new OverlapGraphBuilder(minOverlap,verbose);  overlapGraphBuilder.apply(readData,progress);  overlapGraph=overlapGraphBuilder.getOverlapGraph();{    if (verbose)     System.err.print("Checking for cycles: ");    final int edgesRemoved=DirectedCycleBreaker.apply(overlapGraph);    if (verbose) {      System.err.println(edgesRemoved + (edgesRemoved > 0 ? " removed" : ""));    }  }  readId2ReadData=overlapGraphBuilder.getReadId2ReadData();  node2ReadNameMap=overlapGraphBuilder.getNode2ReadNameMap();  readId2ContainedReads=overlapGraphBuilder.getReadId2ContainedReads();  final PathExtractor pathExtractor=new PathExtractor(overlapGraph,readId2ContainedReads);  pathExtractor.apply(progress);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UI_COMBAT_NPC_FLEE_ORG(String value0){  return new SM_SYSTEM_MESSAGE(1300132,value0);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public Collection<NewDependencyInfo> collect(Collection<TypeElement> modules,Collection<TypeElement> memberInjectors,List<String> allErrors){  SetMultimap<NewBindingKey,NewDependencyInfo> result=HashMultimap.create();  modules=Utils.findAllModulesRecursively(modules);  for (  TypeElement e : modules) {    Collection<NewDependencyInfo> dependencies=collectFromModule(e);    checkDependencies(result,dependencies);    addDependencyInfo(result,dependencies);  }  memberInjectors=findAllMembersInjectorsRecursively(memberInjectors);  Set<NewBindingKey> requiredKeys=getRequiredKeys(memberInjectors,result);  addDependenciesForRequiredKeys(result,requiredKeys);  allErrors.addAll(errors);  return result.values();}  }
class C{  public void writeByteByteInt(ByteByteInt a) throws IOException {  outs.write(a.getByte1());  outs.write(a.getByte2());  position+=2;  writeInt(a.getValue());}  }
class C{  public CategoryObject(Context c){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(c);  this.adapter=new PhotoAdapter(c,new ArrayList<Photo>());  this.service=PhotoService.getService();  String defaultOrder=sharedPreferences.getString(c.getString(R.string.key_default_photo_order),PhotoApi.ORDER_BY_LATEST);  RANDOM_TXT=c.getResources().getStringArray(R.array.photo_order_values)[3];  this.photosCategory=Mysplash.CATEGORY_BUILDINGS_ID;  this.photosOrder=defaultOrder.equals(RANDOM_TXT) ? RANDOM_TXT : PhotoApi.ORDER_BY_LATEST;  this.photosPage=0;  this.pageList=new ArrayList<>();  this.refreshing=false;  this.loading=false;  this.over=false;}  }
class C{  public int compare(Authenticator a1,Authenticator a2){  if (a1.getWeight() < a2.getWeight()) {    return -1;  } else   if (a1.getWeight() > a2.getWeight()) {    return 1;  } else   if (!a1.getClass().equals(a2.getClass())) {    return -1;  } else {    return a1.getClass().getName().compareTo(a2.getClass().getName());  }}  }
class C{  public static String loadFileToString(String sFilename,int iMaxLen){  StringBuffer sb=new StringBuffer();  try {    BufferedReader in=new BufferedReader(new FileReader(sFilename));    String line;    while (((line=in.readLine()) != null) && (sb.length() + line.length() < iMaxLen)) {      sb.append(line);    }    in.close();  } catch (  Exception e) {    System.err.println("Coult not load file:" + sFilename);    e.printStackTrace(System.err);  }  return sb.toString();}  }
class C{  public AdsGetSuggestionsQuery q(String value){  return unsafeParam("q",value);}  }
class C{  void jimplify(cp_info constant_pool[],int this_class){  Code_attribute codeAttribute=method.locate_code_attribute();  Set<Instruction> handlerInstructions=new ArraySet<Instruction>();  Map<Instruction,SootClass> handlerInstructionToException=new HashMap<Instruction,SootClass>();  Map<Instruction,TypeStack> instructionToTypeStack;  Map<Instruction,TypeStack> instructionToPostTypeStack;{    buildInsnCFGfromBBCFG();{      for (int i=0; i < codeAttribute.exception_table_length; i++) {        Instruction startIns=codeAttribute.exception_table[i].start_inst;        Instruction endIns=codeAttribute.exception_table[i].end_inst;        Instruction handlerIns=codeAttribute.exception_table[i].handler_inst;        handlerInstructions.add(handlerIns);{          int catchType=codeAttribute.exception_table[i].catch_type;          SootClass exception;          if (catchType != 0) {            CONSTANT_Class_info classinfo=(CONSTANT_Class_info)constant_pool[catchType];            String name=((CONSTANT_Utf8_info)(constant_pool[classinfo.name_index])).convert();            name=name.replace('/','.');            exception=cm.getSootClass(name);          } else           exception=cm.getSootClass("java.lang.Throwable");          handlerInstructionToException.put(handlerIns,exception);        }        if (startIns == endIns)         throw new RuntimeException("Empty catch range for exception handler");        Instruction ins=startIns;        for (; ; ) {          Instruction[] succs=ins.succs;          Instruction[] newsuccs=new Instruction[succs.length + 1];          System.arraycopy(succs,0,newsuccs,0,succs.length);          newsuccs[succs.length]=handlerIns;          ins.succs=newsuccs;          ins=ins.next;          if (ins == endIns || ins == null)           break;        }      }    }  }  Set<Instruction> reachableInstructions=new HashSet<Instruction>();{    LinkedList<Instruction> instructionsToVisit=new LinkedList<Instruction>();    reachableInstructions.add(firstInstruction);    instructionsToVisit.addLast(firstInstruction);    while (!instructionsToVisit.isEmpty()) {      Instruction ins=instructionsToVisit.removeFirst();      Instruction[] succs=ins.succs;      for (      Instruction succ : succs) {        if (!reachableInstructions.contains(succ)) {          reachableInstructions.add(succ);          instructionsToVisit.addLast(succ);        }      }    }  }{    instructionToTypeStack=new HashMap<Instruction,TypeStack>();    instructionToPostTypeStack=new HashMap<Instruction,TypeStack>();    Set<Instruction> visitedInstructions=new HashSet<Instruction>();    List<Instruction> changedInstructions=new ArrayList<Instruction>();    TypeStack initialTypeStack;{      initialTypeStack=TypeStack.v();    }{      instructionToTypeStack.put(firstInstruction,initialTypeStack);      visitedInstructions.add(firstInstruction);      changedInstructions.add(firstInstruction);    }{      while (!changedInstructions.isEmpty()) {        Instruction ins=changedInstructions.get(0);        changedInstructions.remove(0);        OutFlow ret=processFlow(ins,instructionToTypeStack.get(ins),constant_pool);        instructionToPostTypeStack.put(ins,ret.typeStack);        Instruction[] successors=ins.succs;        for (        Instruction s : successors) {          if (!visitedInstructions.contains(s)) {            if (handlerInstructions.contains(s)) {              TypeStack exceptionTypeStack=(TypeStack.v()).push(RefType.v(handlerInstructionToException.get(s).getName()));              instructionToTypeStack.put(s,exceptionTypeStack);            } else {              instructionToTypeStack.put(s,ret.typeStack);            }            visitedInstructions.add(s);            changedInstructions.add(s);          } else {            TypeStack newTypeStack, oldTypeStack=instructionToTypeStack.get(s);            if (handlerInstructions.contains(s)) {              TypeStack exceptionTypeStack=(TypeStack.v()).push(RefType.v(handlerInstructionToException.get(s).getName()));              newTypeStack=exceptionTypeStack;            } else {              try {                newTypeStack=ret.typeStack.merge(oldTypeStack);              } catch (              RuntimeException re) {                G.v().out.println("Considering " + s);                throw re;              }            }            if (!newTypeStack.equals(oldTypeStack)) {              changedInstructions.add(s);            }            instructionToTypeStack.put(s,newTypeStack);          }        }      }    }  }{    BasicBlock b=cfg;    while (b != null) {      Instruction ins=b.head;      b.statements=new ArrayList<Stmt>();      List<Stmt> blockStatements=b.statements;      for (; ; ) {        List<Stmt> statementsForIns=new ArrayList<Stmt>();        if (reachableInstructions.contains(ins))         generateJimple(ins,instructionToTypeStack.get(ins),instructionToPostTypeStack.get(ins),constant_pool,statementsForIns,b); else         statementsForIns.add(Jimple.v().newNopStmt());        if (!statementsForIns.isEmpty()) {          for (int i=0; i < statementsForIns.size(); i++) {            units.add(statementsForIns.get(i));            blockStatements.add(statementsForIns.get(i));          }          instructionToFirstStmt.put(ins,statementsForIns.get(0));          instructionToLastStmt.put(ins,statementsForIns.get(statementsForIns.size() - 1));        }        if (ins == b.tail)         break;        ins=ins.next;      }      b=b.next;    }  }  jimpleTargetFixup();{    Map<Stmt,Stmt> targetToHandler=new HashMap<Stmt,Stmt>();    for (int i=0; i < codeAttribute.exception_table_length; i++) {      Instruction startIns=codeAttribute.exception_table[i].start_inst;      Instruction endIns=codeAttribute.exception_table[i].end_inst;      Instruction targetIns=codeAttribute.exception_table[i].handler_inst;      if (!instructionToFirstStmt.containsKey(startIns) || (endIns != null && (!instructionToLastStmt.containsKey(endIns)))) {        throw new RuntimeException("Exception range does not coincide with jimple instructions");      }      if (!instructionToFirstStmt.containsKey(targetIns)) {        throw new RuntimeException("Exception handler does not coincide with jimple instruction");      }      SootClass exception;{        int catchType=codeAttribute.exception_table[i].catch_type;        if (catchType != 0) {          CONSTANT_Class_info classinfo=(CONSTANT_Class_info)constant_pool[catchType];          String name=((CONSTANT_Utf8_info)(constant_pool[classinfo.name_index])).convert();          name=name.replace('/','.');          exception=cm.getSootClass(name);        } else         exception=cm.getSootClass("java.lang.Throwable");      }      Stmt newTarget;{        Stmt firstTargetStmt=instructionToFirstStmt.get(targetIns);        if (targetToHandler.containsKey(firstTargetStmt))         newTarget=targetToHandler.get(firstTargetStmt); else {          Local local=Util.v().getLocalCreatingIfNecessary(listBody,"$stack0",UnknownType.v());          newTarget=Jimple.v().newIdentityStmt(local,Jimple.v().newCaughtExceptionRef());          ((PatchingChain<Unit>)units).insertBeforeNoRedirect(newTarget,firstTargetStmt);          targetToHandler.put(firstTargetStmt,newTarget);          if (units.getFirst() != newTarget) {            Unit prev=(Unit)units.getPredOf(newTarget);            if (prev != null && prev.fallsThrough())             units.insertAfter(Jimple.v().newGotoStmt(firstTargetStmt),prev);          }        }      }{        Stmt firstStmt=instructionToFirstStmt.get(startIns);        Stmt afterEndStmt;        if (endIns == null) {          afterEndStmt=(Stmt)units.getLast();        } else {          afterEndStmt=instructionToLastStmt.get(endIns);          IdentityStmt catchStart=(IdentityStmt)targetToHandler.get(afterEndStmt);          if (catchStart != null) {            if (catchStart != units.getPredOf(afterEndStmt)) {              throw new IllegalStateException("Assertion failure: catchStart != pred of afterEndStmt");            }            afterEndStmt=catchStart;          }        }        Trap trap=Jimple.v().newTrap(exception,firstStmt,afterEndStmt,newTarget);        listBody.getTraps().add(trap);      }    }  }  if (Options.v().keep_line_number()) {    HashMap<Stmt,Tag> stmtstags=new HashMap<Stmt,Tag>();    LinkedList<Stmt> startstmts=new LinkedList<Stmt>();    attribute_info[] attrs=codeAttribute.attributes;    for (    attribute_info element : attrs) {      if (element instanceof LineNumberTable_attribute) {        LineNumberTable_attribute lntattr=(LineNumberTable_attribute)element;        for (        line_number_table_entry element0 : lntattr.line_number_table) {          Stmt start_stmt=instructionToFirstStmt.get(element0.start_inst);          if (start_stmt != null) {            LineNumberTag lntag=new LineNumberTag(element0.line_number);            stmtstags.put(start_stmt,lntag);            startstmts.add(start_stmt);          }        }      }    }    for (Iterator<Stmt> stmtIt=new ArrayList<Stmt>(stmtstags.keySet()).iterator(); stmtIt.hasNext(); ) {      final Stmt stmt=stmtIt.next();      Stmt pred=stmt;      Tag tag=stmtstags.get(stmt);      while (true) {        pred=(Stmt)units.getPredOf(pred);        if (pred == null)         break;        if (!(pred instanceof IdentityStmt))         break;        stmtstags.put(pred,tag);        pred.addTag(tag);      }    }    for (int i=0; i < startstmts.size(); i++) {      Stmt stmt=startstmts.get(i);      Tag tag=stmtstags.get(stmt);      stmt.addTag(tag);      stmt=(Stmt)units.getSuccOf(stmt);      while (stmt != null && !stmtstags.containsKey(stmt)) {        stmt.addTag(tag);        stmt=(Stmt)units.getSuccOf(stmt);      }    }  }}  }
class C{  public int gap(Direction direction,ScoutWidget[] list){  int rootWidth=list[0].mConstraintWidget.getWidth();  int rootHeight=list[0].mConstraintWidget.getHeight();  Rectangle rect=new Rectangle();switch (direction) {case NORTH:{      rect.y=0;      rect.x=mConstraintWidget.getX() + 1;      rect.width=mConstraintWidget.getWidth() - 2;      rect.height=mConstraintWidget.getY();    }  break;case SOUTH:{  rect.y=mConstraintWidget.getY() + mConstraintWidget.getHeight();  rect.x=mConstraintWidget.getX() + 1;  rect.width=mConstraintWidget.getWidth() - 2;  rect.height=rootHeight - rect.y;}break;case WEST:{rect.y=mConstraintWidget.getY() + 1;rect.x=0;rect.width=mConstraintWidget.getX();rect.height=mConstraintWidget.getHeight() - 2;}break;case EAST:{rect.y=mConstraintWidget.getY() + 1;rect.x=mConstraintWidget.getX() + mConstraintWidget.getWidth();rect.width=rootWidth - rect.x;rect.height=mConstraintWidget.getHeight() - 2;}break;}int min=Integer.MAX_VALUE;for (int i=1; i < list.length; i++) {ScoutWidget scoutWidget=list[i];if (scoutWidget == this) {continue;}Rectangle r=scoutWidget.getRectangle();if (r.intersects(rect)) {int dist=(int)distance(scoutWidget,this);if (min > dist) {min=dist;}}}if (min > Math.max(rootHeight,rootWidth)) {switch (direction) {case NORTH:return mConstraintWidget.getY();case SOUTH:return rootHeight - (mConstraintWidget.getY() + mConstraintWidget.getHeight());case WEST:return mConstraintWidget.getX();case EAST:return rootWidth - (mConstraintWidget.getX() + mConstraintWidget.getWidth());}}return min;}  }
class C{  @Override public String toString(){  return "Xen []";}  }
class C{  public static void doInitializeAndInstallGenerator(Context context){  UniqueIdentificationGenerator idGenerator=new UuidBasedUniqueIdentificationGenerator(context,INVALIDATIONS_UUID_PREF_KEY);  InvalidationClientNameGenerator clientNameGenerator=new UniqueIdInvalidationClientNameGenerator(idGenerator);  InvalidationClientNameProvider.get().setPreferredClientNameGenerator(clientNameGenerator);}  }
class C{  public boolean isNullExpression(){  return _isNullExpression;}  }
class C{  protected Catalog newCatalog(){  String catalogClass=this.getClass().getName();  try {    Catalog c=(Catalog)(Class.forName(catalogClass).newInstance());    c.setCatalogManager(catalogManager);    copyReaders(c);    return c;  } catch (  ClassNotFoundException cnfe) {    catalogManager.debug.message(1,"Class Not Found Exception: " + catalogClass);  }catch (  IllegalAccessException iae) {    catalogManager.debug.message(1,"Illegal Access Exception: " + catalogClass);  }catch (  InstantiationException ie) {    catalogManager.debug.message(1,"Instantiation Exception: " + catalogClass);  }catch (  ClassCastException cce) {    catalogManager.debug.message(1,"Class Cast Exception: " + catalogClass);  }catch (  Exception e) {    catalogManager.debug.message(1,"Other Exception: " + catalogClass);  }  Catalog c=new Catalog();  c.setCatalogManager(catalogManager);  copyReaders(c);  return c;}  }
class C{  public BoardCreateCommentQuery(VkApiClient client,UserActor actor,int groupId,int topicId){  super(client,"board.createComment",Integer.class);  accessToken(actor.getAccessToken());  groupId(groupId);  topicId(topicId);}  }
class C{  void save(PermissionHolder holder){  if (holder instanceof User) {    plugin.getDatastore().saveUser(((User)holder),null);  }  if (holder instanceof Group) {    plugin.getDatastore().saveGroup(((Group)holder),null);  }}  }
class C{  public synchronized void releaseLock(String tableName,long transNum){  if (this.databaseLocked && this.databaseTransactionOwner == transNum) {    this.databaseLocked=false;    this.databaseTransactionOwner=-1;    notifyAll();  }}  }
class C{  @Override public void onNextItemAppear(View view){  View descriptionLayout=view.findViewById(R.id.description_layout);  if (descriptionLayout != null) {    float layoutY=ViewHelper.getY(descriptionLayout);    view.findViewById(R.id.description_layout).setVisibility(View.VISIBLE);    ValueAnimator animator=ObjectAnimator.ofFloat(descriptionLayout,"y",layoutY + descriptionLayout.getHeight(),layoutY).setDuration(500);    animator.start();  }}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public void addGroupPropertiesListener(GroupPropertiesListener groupPropertiesListener){  groupPropertiesListeners.add(groupPropertiesListener);}  }
class C{  @Override public IBinder onBind(Intent arg){  return mBinder;}  }
class C{  public boolean usePotentialScroll(int scrollId){  Map<String,Integer> scrollInfo=MapleItemInformationProvider.getInstance().getEquipStats(scrollId);  final int chance=scrollInfo.containsKey("success") ? scrollInfo.get("success") : 0;  if (Randomizer.nextInt(100) > chance) {    return true;  }  resetPotentialWithRank(GameConstants.getStateOfPotScroll(scrollId),GameConstants.CHANCE_ON_3RD_LINE_WITH_POT_SCROLL);  return false;}  }
class C{  public final void writeShort(final int i){  baos.write((byte)(i & 0xFF));  baos.write((byte)((i >>> 8) & 0xFF));}  }
class C{  public void startFirstSampleTimer(){}  }
class C{  public static ResponseProperties createNotAuthorizedResponse(String statusMessage){  return new ResponseProperties(HttpServletResponse.SC_UNAUTHORIZED,statusMessage);}  }
class C{  public String packageName(){  return mPackageName;}  }
class C{  public boolean isLimitEnabled(){  return this.limitEnabled;}  }
class C{  public static void sendExceptionCount(){  sMoveToFrontExceptionHistogram.commitHistogram();}  }
class C{  @Override public boolean isAllowed(Authentication authentication,Object projectName){  return authentication.isAuthenticated() && projectRepository.get().isAssignedToProject((String)projectName,authentication.getName());}  }
class C{  private void tryPopulateLogcat(Intent redirectAction){  redirectAction.putExtra(FINISHED_LOGCAT_EXTRACTION_KEY,true);  Context context=getApplicationContext();  CrashFileManager fileManager=new CrashFileManager(context.getCacheDir());  File[] dumps=fileManager.getMinidumpWithoutLogcat();  if (dumps.length == 0) {    onHandleIntent(redirectAction);    return;  }  context.startService(LogcatExtractionService.createLogcatExtractionTask(context,dumps,redirectAction));}  }
class C{  @RequestMapping(value="/complete",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<List<BookDTO>> complete(@RequestBody AutoCompleteQuery acq) throws URISyntaxException {  List<BookDTO> results=bookDTOService.complete(acq.query,acq.maxResults);  return new ResponseEntity<>(results,new HttpHeaders(),HttpStatus.OK);}  }
class C{  public void computeConstraints(ScoutWidget[] list){  if (list.length < 2) {    throw new IllegalArgumentException("list must contain more than 1 widget");  }  if (!list[0].isRoot()) {    throw new IllegalArgumentException("list[0] must be root");  }  len=list.length;  mProbability=new float[len][][];  mMargin=new float[len][][];  float[] result=new float[2];  for (int i=1; i < len; i++) {    Direction[] all=Direction.getAllDirections();    if (list[i].isGuideline()) {      continue;    }    mProbability[i]=new float[all.length][];    mMargin[i]=new float[all.length][];    for (int dir=0; dir < all.length; dir++) {      Direction direction=Direction.get(dir);      int connectTypes=direction.connectTypes();      mProbability[i][dir]=new float[len * connectTypes];      mMargin[i][dir]=new float[len * connectTypes];      for (int candidate=0; candidate < mMargin[i][dir].length; candidate++) {        int widgetNumber=candidate / connectTypes;        int opposite=candidate % connectTypes;        Direction connectTo=(opposite == 0) ? direction : direction.getOpposite();        estimateProbability(list[i],direction,list[widgetNumber],connectTo,list,result);        mProbability[i][dir][candidate]=result[RESULT_PROBABILITY];        mMargin[i][dir][candidate]=result[RESULT_MARGIN];      }    }  }  mBinaryProbability=new float[len][2][len * 2][len * 2];  mBinaryBias=new float[len][2][len * 2][len * 2];  Direction[][] directions={{Direction.NORTH,Direction.SOUTH},{Direction.WEST,Direction.EAST}};  for (int i=1; i < len; i++) {    for (int horizontal=0; horizontal < 2; horizontal++) {      Direction[] sides=directions[horizontal];      for (int candidate1=0; candidate1 < len * 2; candidate1++) {        for (int candidate2=0; candidate2 < len * 2; candidate2++) {          int widget1Number=candidate1 / 2;          int widget2Number=candidate2 / 2;          Direction widget1Side=sides[candidate1 & 0x1];          Direction widget2Side=sides[candidate2 & 0x1];          estimateBinaryProbability(list[i],horizontal,list[widget1Number],widget1Side,list[widget2Number],widget2Side,list,result);          mBinaryProbability[i][horizontal][candidate1][candidate2]=result[RESULT_PROBABILITY];          mBinaryBias[i][horizontal][candidate1][candidate2]=result[RESULT_MARGIN];        }      }    }  }  if (DEBUG) {    printTable(list);  }}  }
class C{  public void diff_cleanupMerge(LinkedList<Diff> diffs){  diffs.add(new Diff(Operation.EQUAL,""));  ListIterator<Diff> pointer=diffs.listIterator();  int count_delete=0;  int count_insert=0;  String text_delete="";  String text_insert="";  Diff thisDiff=pointer.next();  Diff prevEqual=null;  int commonlength;  while (thisDiff != null) {switch (thisDiff.operation) {case INSERT:      count_insert++;    text_insert+=thisDiff.text;  prevEqual=null;break;case DELETE:count_delete++;text_delete+=thisDiff.text;prevEqual=null;break;case EQUAL:if (count_delete + count_insert > 1) {boolean both_types=count_delete != 0 && count_insert != 0;pointer.previous();while (count_delete-- > 0) {pointer.previous();pointer.remove();}while (count_insert-- > 0) {pointer.previous();pointer.remove();}if (both_types) {commonlength=diff_commonPrefix(text_insert,text_delete);if (commonlength != 0) {if (pointer.hasPrevious()) {thisDiff=pointer.previous();assert thisDiff.operation == Operation.EQUAL : "Previous diff should have been an equality.";thisDiff.text+=text_insert.substring(0,commonlength);pointer.next();} else {pointer.add(new Diff(Operation.EQUAL,text_insert.substring(0,commonlength)));}text_insert=text_insert.substring(commonlength);text_delete=text_delete.substring(commonlength);}commonlength=diff_commonSuffix(text_insert,text_delete);if (commonlength != 0) {thisDiff=pointer.next();thisDiff.text=text_insert.substring(text_insert.length() - commonlength) + thisDiff.text;text_insert=text_insert.substring(0,text_insert.length() - commonlength);text_delete=text_delete.substring(0,text_delete.length() - commonlength);pointer.previous();}}if (text_delete.length() != 0) {pointer.add(new Diff(Operation.DELETE,text_delete));}if (text_insert.length() != 0) {pointer.add(new Diff(Operation.INSERT,text_insert));}thisDiff=pointer.hasNext() ? pointer.next() : null;} else if (prevEqual != null) {prevEqual.text+=thisDiff.text;pointer.remove();thisDiff=pointer.previous();pointer.next();}count_insert=0;count_delete=0;text_delete="";text_insert="";prevEqual=thisDiff;break;}thisDiff=pointer.hasNext() ? pointer.next() : null;}if (diffs.getLast().text.length() == 0) {diffs.removeLast();}boolean changes=false;pointer=diffs.listIterator();Diff prevDiff=pointer.hasNext() ? pointer.next() : null;thisDiff=pointer.hasNext() ? pointer.next() : null;Diff nextDiff=pointer.hasNext() ? pointer.next() : null;while (nextDiff != null) {if (prevDiff.operation == Operation.EQUAL && nextDiff.operation == Operation.EQUAL) {if (thisDiff.text.endsWith(prevDiff.text)) {thisDiff.text=prevDiff.text + thisDiff.text.substring(0,thisDiff.text.length() - prevDiff.text.length());nextDiff.text=prevDiff.text + nextDiff.text;pointer.previous();pointer.previous();pointer.previous();pointer.remove();pointer.next();thisDiff=pointer.next();nextDiff=pointer.hasNext() ? pointer.next() : null;changes=true;} else if (thisDiff.text.startsWith(nextDiff.text)) {prevDiff.text+=nextDiff.text;thisDiff.text=thisDiff.text.substring(nextDiff.text.length()) + nextDiff.text;pointer.remove();nextDiff=pointer.hasNext() ? pointer.next() : null;changes=true;}}prevDiff=thisDiff;thisDiff=nextDiff;nextDiff=pointer.hasNext() ? pointer.next() : null;}if (changes) {diff_cleanupMerge(diffs);}}  }
class C{  public void addAll(Map<String,String> map){  if (map == null) {    throw new NullPointerException("contexts");  }  addAll(map.entrySet());}  }
class C{  public static long deserializeLogSegmentSequenceNumber(byte[] data){  String seqNoStr=new String(data,UTF_8);  return Long.parseLong(seqNoStr);}  }
class C{  public int addNewSegment(int index){  WKTSegmentList newSegmentList=new WKTSegmentList();  newSegmentList.addPoint(new WKTPoint());  if (geometryType.getNumOfPoints() > 1) {    newSegmentList.addPoint(new WKTPoint());  }  return addSegmentList(index,newSegmentList);}  }
class C{  public static final void bubbleSortArray(Comparable[] aArr){  boolean bChanged=true;  Comparable a, b;  while (bChanged) {    bChanged=false;    for (int iCnt=0; iCnt < aArr.length - 1; iCnt++) {      a=aArr[iCnt];      b=aArr[iCnt + 1];      if (a.compareTo(b) > 0) {        aArr[iCnt]=b;        aArr[iCnt + 1]=a;        bChanged=true;      }    }  }}  }
class C{  public static boolean deleteDir(File dir){  if (dir == null) {    return false;  }  if (dir.isDirectory()) {    String[] children=dir.list();    for (    String child : children) {      boolean success=deleteDir(new File(dir,child));      if (!success) {        return false;      }    }  }  return dir.delete();}  }
class C{  public boolean isLoadingMore(){  return STATUS.isLoadingMore(mStatus);}  }
class C{  public static String convertReaderToString(Reader reader,int readerLength) throws IOException {  StringWriter writer=new StringWriter();  int blockSize=DEFAULT_BUFFER_SIZE;  char[] buffer=new char[blockSize];  int left=readerLength;  while (left > 0) {    int read=reader.read(buffer,0,left > blockSize ? blockSize : left);    if (read == -1)     break;    writer.write(buffer,0,read);    left-=read;  }  writer.close();  return writer.toString();}  }
class C{  public QueryData(boolean isExplain,Set<String> projFields,Set<String> tables,Predicate pred,Set<String> groupFields,Set<AggregationFn> aggFn,List<String> sortFields,List<Integer> sortDirs){  this.isExplain=isExplain;  this.projFields=projFields;  this.tables=tables;  this.pred=pred;  this.groupFields=groupFields;  this.aggFn=aggFn;  this.sortFields=sortFields;  this.sortDirs=sortDirs;}  }
class C{  @Override public void removeRaster(Symbolizer symbolizer){}  }
class C{  public static void main(String[] args){  try {    ProgramProperties.setProgramName("GCAssembler");    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);    PeakMemoryUsageMonitor.start();    (new GCAssembler()).run(args);    System.err.println("Total time:  " + PeakMemoryUsageMonitor.getSecondsSinceStartString());    System.err.println("Peak memory: " + PeakMemoryUsageMonitor.getPeakUsageString());    System.exit(0);  } catch (  Exception ex) {    Basic.caught(ex);    System.exit(1);  }}  }
class C{  public boolean isMotorEnabled(){  return motorEnabled;}  }
class C{  private static LinkedHashMap<String,ChannelType> createTrack(Channel... channels){  return StreamUtil.createLinkedMap(channels);}  }
class C{  private static boolean checkLoaded(){  if (manifest == null) {    return parse();  }  return true;}  }
class C{  private Cursor queryImgDB(Uri contentStore){  return this.cordova.getActivity().getContentResolver().query(contentStore,new String[]{MediaStore.Images.Media._ID},null,null,null);}  }
class C{  public boolean isValueDeadbandFiltered(final SourceDataTag currentTag,final ValueUpdate update){  return isValueDeadbandFiltered(currentTag,update,new SourceDataTagQuality());}  }
class C{  @Override public int hashCode(){  return lowerBound.hashCode() * 31 + upperBound.hashCode();}  }
class C{  public static SiteSettingsCategory fromString(String category){  assert !category.isEmpty();  if (CATEGORY_ALL_SITES.equals(category)) {    return new SiteSettingsCategory(CATEGORY_ALL_SITES,"",-1);  }  if (CATEGORY_CAMERA.equals(category)) {    return new SiteSettingsCategory(SiteSettingsCategory.CATEGORY_CAMERA,android.Manifest.permission.CAMERA,ContentSettingsType.CONTENT_SETTINGS_TYPE_MEDIASTREAM_CAMERA);  }  if (CATEGORY_COOKIES.equals(category)) {    return new SiteSettingsCategory(CATEGORY_COOKIES,"",ContentSettingsType.CONTENT_SETTINGS_TYPE_COOKIES);  }  if (CATEGORY_JAVASCRIPT.equals(category)) {    return new SiteSettingsCategory(CATEGORY_JAVASCRIPT,"",ContentSettingsType.CONTENT_SETTINGS_TYPE_JAVASCRIPT);  }  if (CATEGORY_DEVICE_LOCATION.equals(category)) {    return new LocationCategory();  }  if (CATEGORY_FULLSCREEN.equals(category)) {    return new SiteSettingsCategory(CATEGORY_FULLSCREEN,"",ContentSettingsType.CONTENT_SETTINGS_TYPE_FULLSCREEN);  }  if (CATEGORY_MICROPHONE.equals(category)) {    return new SiteSettingsCategory(SiteSettingsCategory.CATEGORY_MICROPHONE,android.Manifest.permission.RECORD_AUDIO,ContentSettingsType.CONTENT_SETTINGS_TYPE_MEDIASTREAM_MIC);  }  if (CATEGORY_POPUPS.equals(category)) {    return new SiteSettingsCategory(CATEGORY_POPUPS,"",ContentSettingsType.CONTENT_SETTINGS_TYPE_POPUPS);  }  if (CATEGORY_PROTECTED_MEDIA.equals(category)) {    return new SiteSettingsCategory(CATEGORY_PROTECTED_MEDIA,"",ContentSettingsType.CONTENT_SETTINGS_TYPE_PROTECTED_MEDIA_IDENTIFIER);  }  if (CATEGORY_NOTIFICATIONS.equals(category)) {    return new SiteSettingsCategory(CATEGORY_NOTIFICATIONS,"",ContentSettingsType.CONTENT_SETTINGS_TYPE_NOTIFICATIONS);  }  if (CATEGORY_USE_STORAGE.equals(category)) {    return new SiteSettingsCategory(CATEGORY_USE_STORAGE,"",-1);  }  return null;}  }
class C{  public static boolean isSystemApplication(Context context,String packageName){  PackageManager packageManager=context.getPackageManager();  if (packageManager == null || packageName == null || packageName.length() == 0) {    return false;  }  try {    ApplicationInfo app=packageManager.getApplicationInfo(packageName,0);    return (app != null && (app.flags & ApplicationInfo.FLAG_SYSTEM) > 0);  } catch (  Exception e) {    e.printStackTrace();  }  return false;}  }
class C{  public static boolean isEmpty(IsEmpty o){  return o == null || o.isEmpty();}  }
class C{  public static void appendCigar(String alignedQuery,String alignedReference,StringBuilder buffer){  char cigarState='M';  int count=0;  for (int i=0; i < alignedQuery.length(); i++) {    if (alignedQuery.charAt(i) == '-') {      if (cigarState == 'D') {        count++;      } else       if (count > 0) {        buffer.append(count).append(cigarState);        cigarState='D';        count=1;      }    } else     if (alignedReference.charAt(i) == '-') {      if (cigarState == 'I') {        count++;      } else       if (count > 0) {        buffer.append(count).append(cigarState);        cigarState='I';        count=1;      }    } else {      if (cigarState == 'M') {        count++;      } else       if (count > 0) {        buffer.append(count).append(cigarState);        cigarState='M';        count=1;      }    }  }  if (count > 0) {    buffer.append(count).append(cigarState);  }}  }
class C{  public BeyondExtended(){  super(null,null);}  }
class C{  public CharMap4User(CharMap4 charMap4,String command){  super();  this.putValue(Action.NAME,command);  this.charMap4=charMap4;}  }
class C{  public DecorationCursor queryDecorations(){  return mHelper.queryDecorations();}  }
class C{  public static void error(Object message){  Gdx.app.error(TAG,String.valueOf(message));}  }
class C{  public static double vectorLength(double[] vector){  double ret=0;  if (vector == null)   return ret; else {    for (    double aVector : vector) {      ret+=Math.pow(aVector,2);    }  }  return ret;}  }
class C{  public PhotosGetCommentsQuery needLikes(Boolean value){  return unsafeParam("need_likes",value);}  }
class C{  public boolean hasFeature(String name){  return featureNames.contains(name);}  }
class C{  public boolean extended(){  return soot.PhaseOptions.getBoolean(options,"extended");}  }
class C{  public static <T>IEntryPacket createFromObject(T entry,ITypeDesc typeDesc,EntryType entryType,boolean ignoreAutoGenerateUid){  if (entryType.isConcrete() && typeDesc.isExternalizable())   return new ExternalizableEntryPacket(typeDesc,entryType,(Externalizable)entry);  final ITypeIntrospector<T> introspector=typeDesc.getIntrospector(entryType);  final Object[] fixedProperties=introspector.getSerializedValues(entry);  Map<String,Object> dynamicProperties=introspector.getDynamicProperties(entry);  if (!typeDesc.supportsDynamicProperties() && dynamicProperties != null && !dynamicProperties.isEmpty()) {    final String propertyName=(String)dynamicProperties.keySet().toArray()[0];    String message="Cannot access dynamic property '" + propertyName + "' in type '"+ typeDesc.getTypeName()+ "' - this type does not support dynamic properties.";    if (typeDesc.getTypeName().equals(Object.class.getName()))     message+=" If you're using SpaceDocument make sure the type name was properly set.";    throw new SpaceMetadataException(message);  }  String uid=introspector.getUID(entry,false,ignoreAutoGenerateUid);  if (uid == null && entryType == EntryType.EXTERNAL_ENTRY)   uid=ExternalEntryIntrospector.getUid(typeDesc,fixedProperties);  return new EntryPacket(typeDesc,entryType,fixedProperties,dynamicProperties,uid,introspector.getVersion(entry),introspector.getTimeToLive(entry),introspector.isTransient(entry));}  }
class C{  public boolean class_method_var(){  return soot.PhaseOptions.getBoolean(options,"class-method-var");}  }
class C{  public static AnySpacePredicate any(ISpacePredicate... predicates){  return new AnySpacePredicate(predicates);}  }
class C{  public int key() throws ConcurrentModificationException, NoSuchElementException {  if (referenceCount != count) {    throw new ConcurrentModificationException();  }  if (current < 0) {    throw new NoSuchElementException();  }  return keys[current];}  }
class C{  @Override public boolean isNonSingular(){  return nonSingular;}  }
class C{  public DataSourceConnectorArcSDE(){  createUI();}  }
class C{  public static Map<String,Object> checkCopyPermission(DispatchContext ctx,Map<String,?> context){  boolean hasPermission=false;  GenericValue userLogin=(GenericValue)context.get("userLogin");  if (userLogin != null) {    String userLoginId=userLogin.getString("userLoginId");    String userLoginIdArg=(String)context.get(LOGINID_PARAMETER_NAME);    if (userLoginIdArg == null || (userLoginIdArg != null && userLoginId.equals(userLoginIdArg))) {      hasPermission=true;    } else {      Security security=ctx.getSecurity();      hasPermission=security.hasPermission(ADMIN_PERMISSION,userLogin);    }  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("hasPermission",hasPermission);  return result;}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public UsersSearchQuery universityChair(Integer value){  return unsafeParam("university_chair",value);}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public static String removeElementEvent(HttpServletRequest request,HttpServletResponse response){  String errMsg="";  Locale locale=UtilHttp.getLocale(request);  Security security=(Security)request.getAttribute("security");  if (!security.hasPermission("UTIL_CACHE_EDIT",request.getSession())) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCacheEvents.permissionEdit",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  String name=request.getParameter("UTIL_CACHE_NAME");  if (name == null) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCacheEvents.noCacheNameSpecified",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  String numString=request.getParameter("UTIL_CACHE_ELEMENT_NUMBER");  if (numString == null) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCacheEvents.noElementNumberSpecified",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_","");    return "error";  }  int number;  try {    number=Integer.parseInt(numString);  } catch (  Exception e) {    return "error";  }  UtilCache<?,?> utilCache=UtilCache.findCache(name);  if (utilCache != null) {    Object key=null;    Iterator<?> ksIter=utilCache.getCacheLineKeys().iterator();    int curNum=0;    while (ksIter.hasNext()) {      if (number == curNum) {        key=ksIter.next();        break;      } else {        ksIter.next();      }      curNum++;    }    if (key != null) {      utilCache.remove(key);      errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.removeElementWithKey",UtilMisc.toMap("key",key.toString()),locale) + ".";      request.setAttribute("_EVENT_MESSAGE_",errMsg);    } else {      errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.couldNotRemoveElementNumber",UtilMisc.toMap("name",name,"numString",numString),locale) + ".";      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }  } else {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.couldNotRemoveElement",UtilMisc.toMap("name",name),locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  public static Object deepClone(Object obj){  try {    byte[] bArray=objectToByteBuffer(obj);    return objectFromByteBuffer(bArray);  } catch (  Exception ex) {    throw new IllegalArgumentException("Failed to perform deep clone on [" + obj + "] object. Check that the all object context are implements java.io.Serializable.",ex);  }}  }
class C{  private RuntimeException propagateTableNotStashed(TableNotStashedException e) throws TableNotStashedException, UnknownTableException {  if (_dataStore.getTableExists(e.getTable())) {    throw e;  }  throw new UnknownTableException(e.getTable());}  }
class C{  public void onDirectoryCreate(final File directory){}  }
class C{  public DotGraphEdge(DotGraphNode src,DotGraphNode dst,boolean directed){  this.start=src;  this.end=dst;  this.isDirected=directed;}  }
class C{  public double doGraphCompareToSet(String sSummaryTextFile,Set<String> ssModelFiles,String sGraphModelClassName,String sComparatorClassName,int iMinNGramRank,int iMaxNGramRank,int iNGramDist){  DocumentNGramGraph ndNDoc1=null;  try {    int iIdx=utils.getConstructor(sGraphModelClassName,3);    if (iIdx > -1)     ndNDoc1=(DocumentNGramGraph)Class.forName(sGraphModelClassName).getConstructors()[iIdx].newInstance(iMinNGramRank,iMaxNGramRank,iNGramDist); else {      iIdx=utils.getConstructor(sGraphModelClassName,5);      ndNDoc1=(DocumentNGramGraph)Class.forName(sGraphModelClassName).getConstructors()[iIdx].newInstance(iMinNGramRank,iMaxNGramRank,iNGramDist,iMinNGramRank,iMaxNGramRank);    }  } catch (  IllegalArgumentException ex) {    ex.printStackTrace(System.err);  }catch (  SecurityException ex) {    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);  }catch (  InstantiationException ex) {    ex.printStackTrace(System.err);  }catch (  IllegalAccessException ex) {    ex.printStackTrace(System.err);  }catch (  InvocationTargetException ex) {    ex.printStackTrace(System.err);  }  if (ndNDoc1 == null)   return Double.NEGATIVE_INFINITY;  try {    ndNDoc1.loadDataStringFromFile(sSummaryTextFile);  } catch (  IOException ex) {    Logger.getLogger(summarySingleFileEvaluator.class.getName()).log(Level.SEVERE,null,ex);    return Double.NEGATIVE_INFINITY;  }  SimilarityComparatorListener sdcNComparator=null;  try {    int iIdx=utils.getConstructor(sComparatorClassName,1);    if (iIdx > -1)     sdcNComparator=(SimilarityComparatorListener)Class.forName(sComparatorClassName).getConstructors()[iIdx].newInstance(1.0); else     sdcNComparator=(SimilarityComparatorListener)Class.forName(sComparatorClassName).newInstance();  } catch (  IllegalArgumentException ex) {    ex.printStackTrace(System.err);  }catch (  SecurityException ex) {    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);  }catch (  InstantiationException ex) {    ex.printStackTrace(System.err);  }catch (  IllegalAccessException ex) {    ex.printStackTrace(System.err);  }catch (  InvocationTargetException ex) {    ex.printStackTrace(System.err);  }  if (sdcNComparator == null)   return Double.NEGATIVE_INFINITY;  if (!Jackknifing) {    DocumentNGramGraph ndNModel=null;    Iterator<String> iOtherIter=ssModelFiles.iterator();    int iDocCnt=0;    while (iOtherIter.hasNext()) {      String sModelFile=iOtherIter.next();      DocumentNGramGraph ndNDoc2=null;      try {        int iIdx=utils.getConstructor(sGraphModelClassName,3);        if (iIdx > -1)         ndNDoc2=(DocumentNGramGraph)Class.forName(sGraphModelClassName).getConstructors()[iIdx].newInstance(iMinNGramRank,iMaxNGramRank,iNGramDist); else {          iIdx=utils.getConstructor(sGraphModelClassName,5);          ndNDoc2=(DocumentNGramGraph)Class.forName(sGraphModelClassName).getConstructors()[iIdx].newInstance(iMinNGramRank,iMaxNGramRank,iNGramDist,iMinNGramRank,iMaxNGramRank);        }      } catch (      IllegalArgumentException ex) {        ex.printStackTrace(System.err);      }catch (      SecurityException ex) {        ex.printStackTrace(System.err);      }catch (      ClassNotFoundException ex) {        ex.printStackTrace(System.err);      }catch (      InstantiationException ex) {        ex.printStackTrace(System.err);      }catch (      IllegalAccessException ex) {        ex.printStackTrace(System.err);      }catch (      InvocationTargetException ex) {        ex.printStackTrace(System.err);      }      if (ndNDoc2 == null)       return Double.NEGATIVE_INFINITY;      try {        ndNDoc2.loadDataStringFromFile(sModelFile);      } catch (      IOException ex) {        Logger.getLogger(summarySingleFileEvaluator.class.getName()).log(Level.SEVERE,null,ex);        return Double.NEGATIVE_INFINITY;      }      ++iDocCnt;      if (ndNModel == null)       ndNModel=ndNDoc2; else       ndNModel.merge(ndNDoc2,1.0 - (iDocCnt / ssModelFiles.size()));    }    GraphSimilarity sSimil=null;    try {      sSimil=(GraphSimilarity)sdcNComparator.getSimilarityBetween(ndNDoc1,ndNModel);    } catch (    InvalidClassException iceE) {      System.err.println("Cannot compare...");      return Double.NEGATIVE_INFINITY;    }    return (sSimil.SizeSimilarity == 0) ? 0 : (sSimil.ValueSimilarity / sSimil.SizeSimilarity);  } else {    Distribution<Double> dJackknifingResults=new Distribution<Double>();    DocumentNGramGraph ndNModel=null;    for (int iLeaveOutCnt=0; iLeaveOutCnt < ssModelFiles.size(); iLeaveOutCnt++) {      Distribution<Double> dFoldRes=new Distribution<Double>();      Iterator<String> iOtherIter=ssModelFiles.iterator();      int iDocCnt=0;      int iCurModelCnt=0;      while (iOtherIter.hasNext()) {        String sModelFile=iOtherIter.next();        if (iCurModelCnt++ == iLeaveOutCnt) {          if (!Silent)           System.err.println(String.format("Skipping '%s' to " + "'%s' comparison",sModelFile,sSummaryTextFile));          continue;        }        DocumentNGramGraph ndNDoc2=null;        try {          int iIdx=utils.getConstructor(sGraphModelClassName,3);          if (iIdx > -1)           ndNDoc2=(DocumentNGramGraph)Class.forName(sGraphModelClassName).getConstructors()[iIdx].newInstance(iMinNGramRank,iMaxNGramRank,iNGramDist); else {            iIdx=utils.getConstructor(sGraphModelClassName,5);            ndNDoc2=(DocumentNGramGraph)Class.forName(sGraphModelClassName).getConstructors()[iIdx].newInstance(iMinNGramRank,iMaxNGramRank,iNGramDist,iMinNGramRank,iMaxNGramRank);          }        } catch (        IllegalArgumentException ex) {          ex.printStackTrace(System.err);        }catch (        SecurityException ex) {          ex.printStackTrace(System.err);        }catch (        ClassNotFoundException ex) {          ex.printStackTrace(System.err);        }catch (        InstantiationException ex) {          ex.printStackTrace(System.err);        }catch (        IllegalAccessException ex) {          ex.printStackTrace(System.err);        }catch (        InvocationTargetException ex) {          ex.printStackTrace(System.err);        }        if (ndNDoc2 == null)         return Double.NEGATIVE_INFINITY;        try {          ndNDoc2.loadDataStringFromFile(sModelFile);        } catch (        IOException ex) {          Logger.getLogger(summarySingleFileEvaluator.class.getName()).log(Level.SEVERE,null,ex);          return Double.NEGATIVE_INFINITY;        }        ++iDocCnt;        if (ndNModel == null)         ndNModel=ndNDoc2; else         ndNModel.merge(ndNDoc2,1.0 - (iDocCnt / ssModelFiles.size()));      }      GraphSimilarity sSimil=null;      try {        sSimil=(GraphSimilarity)sdcNComparator.getSimilarityBetween(ndNDoc1,ndNModel);      } catch (      InvalidClassException iceE) {        System.err.println("Cannot compare...");        return Double.NEGATIVE_INFINITY;      }      double dTmpRes=(sSimil.SizeSimilarity == 0) ? 0.0 : (sSimil.ValueSimilarity / sSimil.SizeSimilarity);      dJackknifingResults.increaseValue(dTmpRes,1.0);    }    return dJackknifingResults.average(false);  }}  }
class C{  public boolean isFinal(){  return Modifier.isFinal(this.getModifiers());}  }
class C{  public LengthExpr newLengthExpr(Value op){  return new GLengthExpr(op);}  }
class C{  private ResultPoint correctTopRight(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimension){  float corr=distance(bottomLeft,bottomRight) / (float)dimension;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimension;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(transitionsBetween(topLeft,c1).getTransitions() - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(transitionsBetween(topLeft,c2).getTransitions() - transitionsBetween(bottomRight,c2).getTransitions());  return l1 <= l2 ? c1 : c2;}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,null,lines,lineEnding,false);}  }
class C{  @RequestMapping(value="/{namespace}/{key}",method=RequestMethod.POST,produces="application/json",consumes="application/json") public void addKeyJsonValue(@PathVariable String namespace,@PathVariable String key,@RequestBody String body,@RequestParam(defaultValue="false") boolean encrypt,HttpServletResponse response) throws IOException, WebMessageException {  if (!hasAccess(namespace)) {    throw new WebMessageException(WebMessageUtils.forbidden("The namespace '" + namespace + "' is protected, and you don't have the right authority to access it."));  }  if (keyJsonValueService.getKeyJsonValue(namespace,key) != null) {    throw new WebMessageException(WebMessageUtils.conflict("The key '" + key + "' already exists on the namespace '"+ namespace+ "'."));  }  if (!renderService.isValidJson(body)) {    throw new WebMessageException(WebMessageUtils.badRequest("The data is not valid JSON."));  }  KeyJsonValue keyJsonValue=new KeyJsonValue();  keyJsonValue.setKey(key);  keyJsonValue.setNamespace(namespace);  keyJsonValue.setValue(body);  keyJsonValue.setEncrypted(encrypt);  keyJsonValueService.addKeyJsonValue(keyJsonValue);  response.setStatus(HttpServletResponse.SC_CREATED);  messageService.sendJson(WebMessageUtils.created("Key '" + key + "' created."),response);}  }
class C{  public Builder countColumns(String... columns){  return add(ReduceOp.Count,columns);}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  return newInstance(className,cl,doFallback,false,false);}  }
class C{  public static void loadAllCallerLists(IDexUnit unit,Map<Integer,Map<Integer,Integer>> allCallerLists,Map<Integer,String> matchedClasses,Map<Integer,String> matchedMethods){  allCallerLists.clear();  List<? extends IDexClass> classes=unit.getClasses();  if (classes == null || classes.size() == 0) {    return;  }  for (  IDexClass eClass : classes) {    List<? extends IDexMethod> methods=eClass.getMethods();    if (methods == null || methods.size() == 0)     continue;    if (matchedClasses != null) {      if (!matchedClasses.containsKey(eClass.getIndex())) {        continue;      }    }    for (    IDexMethod m : methods) {      if (!m.isInternal()) {        continue;      }      if (matchedMethods != null) {        if (!matchedMethods.containsKey(m.getIndex())) {          continue;        }      }      IDexMethodData md=m.getData();      if (md == null) {        continue;      }      IDexCodeItem ci=md.getCodeItem();      if (ci == null) {        continue;      }      for (      IDalvikInstruction insn : ci.getInstructions()) {        if (!insn.getMnemonic().contains("invoke")) {          continue;        }        for (        IDalvikInstructionParameter param : insn.getParameters()) {          if (param.getType() == IDalvikInstruction.TYPE_IDX) {            int poolIndex=insn.getParameterIndexType();            if (poolIndex == IDalvikInstruction.INDEX_TO_METHOD) {              int paraValue=(int)param.getValue();              if (paraValue > unit.getMethods().size()) {                continue;              }              Map<Integer,Integer> temp=allCallerLists.get(paraValue);              int methodIndex=m.getIndex();              if (temp != null) {                Integer times=temp.get(methodIndex);                if (times != null) {                  temp.put(methodIndex,times + 1);                } else {                  temp.put(methodIndex,1);                }              } else {                HashMap<Integer,Integer> temp1=new HashMap<Integer,Integer>();                temp1.put(methodIndex,1);                allCallerLists.put(paraValue,temp1);              }            }          }        }      }    }  }}  }
class C{  public void selectItem(final int location,final boolean value){  if (value) {    this.selectedItems.put(location,true);  } else {    this.selectedItems.delete(location);  }  this.notifyItemChanged(location);}  }
class C{  private static boolean matches(Pattern pattern,String label){  if (label == null)   label="";  Matcher matcher=pattern.matcher(label);  return matcher.find();}  }
class C{  public void writeInt(int startPos,int value){  this.writeBytes(startPos,4,ByteBuffer.allocate(4).putInt(value).array());}  }
class C{  @Deprecated public static JsonArray readFrom(Reader reader) throws IOException {  return JsonValue.readFrom(reader).asArray();}  }
class C{  private void readDocument(IProgressMonitor monitor) throws CoreException {  if (!isReferenceInitialized)   return;  if (referenceDocument == null)   referenceDocument=new Document();  if (computeChange(monitor)) {    ISVNRemoteFile remoteFile=(ISVNRemoteFile)fLastSyncState.getBase();    if (remoteFile != null && documentProvider instanceof IStorageDocumentProvider) {      IStorageDocumentProvider provider=(IStorageDocumentProvider)documentProvider;      String encoding=provider.getEncoding(editor.getEditorInput());      if (encoding == null) {        encoding=provider.getDefaultEncoding();      }      if (monitor.isCanceled())       return;      InputStream stream=remoteFile.getStorage(monitor).getContents();      if (stream == null || monitor.isCanceled() || !isReferenceInitialized) {        return;      }      setDocumentContent(referenceDocument,stream,encoding);    } else {      if (monitor.isCanceled())       return;      referenceDocument.set("");    }    if (DEBUG)     System.out.println("+ SVNQuickDiff: updating document " + (referenceDocument != null ? "remote found" : "remote empty"));  }}  }
class C{  public long writeTo(OutputStream out) throws IOException {  long size=0;  if (fileName != null) {    size=write(out);  }  return size;}  }
class C{  @Override public void start(){  m_line.start();  super.start();}  }
class C{  private void determineProsodicSettings(Document doc){  NodeList prosodies=doc.getElementsByTagName(MaryXML.PROSODY);  for (int i=0; i < prosodies.getLength(); i++) {    Element prosody=(Element)prosodies.item(i);    ProsodicSettings settings=new ProsodicSettings();    ProsodicSettings parentSettings=new ProsodicSettings();    Element ancestor=(Element)DomUtils.getAncestor(prosody,MaryXML.PROSODY);    if (ancestor != null) {      ProsodicSettings testSettings=(ProsodicSettings)prosodyMap.get(ancestor);      if (testSettings != null) {        parentSettings=testSettings;      }    }    settings.setRate(parentSettings.rate() + getPercentageDelta(prosody.getAttribute("rate")));    settings.setAccentProminence(parentSettings.accentProminence() + getPercentageDelta(prosody.getAttribute("accent-prominence")));    settings.setAccentSlope(parentSettings.accentSlope() + getPercentageDelta(prosody.getAttribute("accent-slope")));    settings.setNumberOfPauses(parentSettings.numberOfPauses() + getPercentageDelta(prosody.getAttribute("number-of-pauses")));    settings.setPauseDuration(parentSettings.pauseDuration() + getPercentageDelta(prosody.getAttribute("pause-duration")));    settings.setVowelDuration(parentSettings.vowelDuration() + getPercentageDelta(prosody.getAttribute("vowel-duration")));    settings.setPlosiveDuration(parentSettings.plosiveDuration() + getPercentageDelta(prosody.getAttribute("plosive-duration")));    settings.setFricativeDuration(parentSettings.fricativeDuration() + getPercentageDelta(prosody.getAttribute("fricative-duration")));    settings.setNasalDuration(parentSettings.nasalDuration() + getPercentageDelta(prosody.getAttribute("nasal-duration")));    settings.setLiquidDuration(parentSettings.liquidDuration() + getPercentageDelta(prosody.getAttribute("liquid-duration")));    settings.setGlideDuration(parentSettings.glideDuration() + getPercentageDelta(prosody.getAttribute("glide-duration")));    String sVolume=prosody.getAttribute("volume");    if (sVolume.equals("")) {      settings.setVolume(parentSettings.volume());    } else     if (isPercentageDelta(sVolume)) {      int newVolume=parentSettings.volume() + getPercentageDelta(sVolume);      if (newVolume < 0)       newVolume=0; else       if (newVolume > 100)       newVolume=100;      settings.setVolume(newVolume);    } else     if (isUnsignedNumber(sVolume)) {      settings.setVolume(getUnsignedNumber(sVolume));    } else     if (sVolume.equals("silent")) {      settings.setVolume(0);    } else     if (sVolume.equals("soft")) {      settings.setVolume(25);    } else     if (sVolume.equals("medium")) {      settings.setVolume(50);    } else     if (sVolume.equals("loud")) {      settings.setVolume(75);    }    prosodyMap.put(prosody,settings);  }}  }
class C{  public SoftReferenceSymbolTable(int initialCapacity){  this(initialCapacity,0.75f);}  }
class C{  @Override public final void run(){  try {    runImpl();  } catch (  Throwable e) {    log.warn("error handling ls (" + getConnection().getIP() + ") message "+ this,e);  }}  }
class C{  public void clearLabels(){  sample2label.clear();}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  public TIntHashSet(int[] array,TIntHashingStrategy strategy){  this(array.length,strategy);  addAll(array);}  }
class C{  public void resume(){  engine.resume();}  }
class C{  public void clear(){  numElements=0;  startIndex=0;}  }
class C{  public FramewiseMerger(DoubleDataSource inputSource,DoubleDataSource pitchmarks,int samplingRate,DoubleDataSource labelTimes,DoubleDataSource otherSource,DoubleDataSource otherPitchmarks,int otherSamplingRate,DoubleDataSource otherLabelTimes,InlineFrameMerger merger){  this.labelTimes=labelTimes;  this.otherLabelTimes=otherLabelTimes;  prevLabel=0;  currentLabel=0;  prevOtherLabel=0;  currentOtherLabel=0;  InlineDataProcessor analysisWindow=new DynamicTwoHalvesWindow(Window.HANNING,0.5);  double firstPitchmark=pitchmarks.getData(1)[0];  assert firstPitchmark > 0;  if (firstPitchmark < 0.001 * samplingRate)   firstPitchmark=pitchmarks.getData(1)[0];  pitchmarks=new SequenceDoubleDataSource(new DoubleDataSource[]{new BufferedDoubleDataSource(new double[]{firstPitchmark}),pitchmarks});  int firstPeriodLength=(int)(firstPitchmark * samplingRate);  double[] firstPeriod=new double[firstPeriodLength];  inputSource.getData(firstPeriod,0,firstPeriodLength);  inputSource=new SequenceDoubleDataSource(new DoubleDataSource[]{new BufferedDoubleDataSource(firstPeriod),inputSource});  this.memory=new double[2 * firstPeriodLength];  System.arraycopy(firstPeriod,0,memory,firstPeriodLength,firstPeriodLength);  analysisWindow.applyInline(memory,0,memory.length);  if (merger != null) {    double firstOtherPitchmark=otherPitchmarks.getData(1)[0];    assert firstOtherPitchmark > 0;    if (firstOtherPitchmark < 0.001 * otherSamplingRate)     firstPitchmark=otherPitchmarks.getData(1)[0];    otherPitchmarks=new SequenceDoubleDataSource(new DoubleDataSource[]{new BufferedDoubleDataSource(new double[]{firstOtherPitchmark}),otherPitchmarks});    int firstOtherPeriodLength=(int)(firstOtherPitchmark * otherSamplingRate);    double[] firstOtherPeriod=new double[firstOtherPeriodLength];    otherSource.getData(firstOtherPeriod,0,firstOtherPeriodLength);    otherSource=new SequenceDoubleDataSource(new DoubleDataSource[]{new BufferedDoubleDataSource(firstOtherPeriod),otherSource});    double[] frameToMerge=new double[2 * firstOtherPeriodLength];    System.arraycopy(firstOtherPeriod,0,frameToMerge,firstOtherPeriodLength,firstOtherPeriodLength);    merger.setFrameToMerge(frameToMerge);    merger.applyInline(memory,0,memory.length);  }  System.arraycopy(memory,firstPeriodLength,memory,0,firstPeriodLength);  Arrays.fill(memory,firstPeriodLength,memory.length,0);  this.frameProvider=new PitchFrameProvider(inputSource,pitchmarks,analysisWindow,samplingRate,8,1);  this.otherFrameProvider=new PitchFrameProvider(otherSource,otherPitchmarks,analysisWindow,otherSamplingRate,8,1);  this.processor=merger;}  }
class C{  protected MessagesIsMessagesFromGroupAllowedQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public void saveFolder(OCFile folder,Collection<OCFile> updatedFiles,Collection<OCFile> filesToRemove){  Log_OC.d(TAG,"Saving folder " + folder.getRemotePath() + " with "+ updatedFiles.size()+ " children and "+ filesToRemove.size()+ " files to remove");  ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>(updatedFiles.size());  for (  OCFile file : updatedFiles) {    ContentValues cv=new ContentValues();    cv.put(ProviderTableMeta.FILE_MODIFIED,file.getModificationTimestamp());    cv.put(ProviderTableMeta.FILE_MODIFIED_AT_LAST_SYNC_FOR_DATA,file.getModificationTimestampAtLastSyncForData());    cv.put(ProviderTableMeta.FILE_CREATION,file.getCreationTimestamp());    cv.put(ProviderTableMeta.FILE_CONTENT_LENGTH,file.getFileLength());    cv.put(ProviderTableMeta.FILE_CONTENT_TYPE,file.getMimetype());    cv.put(ProviderTableMeta.FILE_NAME,file.getFileName());    cv.put(ProviderTableMeta.FILE_PARENT,folder.getFileId());    cv.put(ProviderTableMeta.FILE_PATH,file.getRemotePath());    if (!file.isFolder()) {      cv.put(ProviderTableMeta.FILE_STORAGE_PATH,file.getStoragePath());    }    cv.put(ProviderTableMeta.FILE_ACCOUNT_OWNER,mAccount.name);    cv.put(ProviderTableMeta.FILE_LAST_SYNC_DATE,file.getLastSyncDateForProperties());    cv.put(ProviderTableMeta.FILE_LAST_SYNC_DATE_FOR_DATA,file.getLastSyncDateForData());    cv.put(ProviderTableMeta.FILE_KEEP_IN_SYNC,file.isFavorite() ? 1 : 0);    cv.put(ProviderTableMeta.FILE_ETAG,file.getEtag());    cv.put(ProviderTableMeta.FILE_SHARED_VIA_LINK,file.isSharedViaLink() ? 1 : 0);    cv.put(ProviderTableMeta.FILE_SHARED_WITH_SHAREE,file.isSharedWithSharee() ? 1 : 0);    cv.put(ProviderTableMeta.FILE_PUBLIC_LINK,file.getPublicLink());    cv.put(ProviderTableMeta.FILE_PERMISSIONS,file.getPermissions());    cv.put(ProviderTableMeta.FILE_REMOTE_ID,file.getRemoteId());    cv.put(ProviderTableMeta.FILE_UPDATE_THUMBNAIL,file.needsUpdateThumbnail());    cv.put(ProviderTableMeta.FILE_IS_DOWNLOADING,file.isDownloading());    cv.put(ProviderTableMeta.FILE_ETAG_IN_CONFLICT,file.getEtagInConflict());    boolean existsByPath=fileExists(file.getRemotePath());    if (existsByPath || fileExists(file.getFileId())) {      operations.add(ContentProviderOperation.newUpdate(ProviderTableMeta.CONTENT_URI).withValues(cv).withSelection(ProviderTableMeta._ID + "=?",new String[]{String.valueOf(file.getFileId())}).build());    } else {      operations.add(ContentProviderOperation.newInsert(ProviderTableMeta.CONTENT_URI).withValues(cv).build());    }  }  String where=ProviderTableMeta.FILE_ACCOUNT_OWNER + "=?" + " AND "+ ProviderTableMeta.FILE_PATH+ "=?";  String[] whereArgs=null;  for (  OCFile file : filesToRemove) {    if (file.getParentId() == folder.getFileId()) {      whereArgs=new String[]{mAccount.name,file.getRemotePath()};      if (file.isFolder()) {        operations.add(ContentProviderOperation.newDelete(ContentUris.withAppendedId(ProviderTableMeta.CONTENT_URI_DIR,file.getFileId())).withSelection(where,whereArgs).build());        File localFolder=new File(FileStorageUtils.getDefaultSavePathFor(mAccount.name,file));        if (localFolder.exists()) {          removeLocalFolder(localFolder);        }      } else {        operations.add(ContentProviderOperation.newDelete(ContentUris.withAppendedId(ProviderTableMeta.CONTENT_URI_FILE,file.getFileId())).withSelection(where,whereArgs).build());        if (file.isDown()) {          String path=file.getStoragePath();          new File(path).delete();          triggerMediaScan(path);        }      }    }  }  ContentValues cv=new ContentValues();  cv.put(ProviderTableMeta.FILE_MODIFIED,folder.getModificationTimestamp());  cv.put(ProviderTableMeta.FILE_MODIFIED_AT_LAST_SYNC_FOR_DATA,folder.getModificationTimestampAtLastSyncForData());  cv.put(ProviderTableMeta.FILE_CREATION,folder.getCreationTimestamp());  cv.put(ProviderTableMeta.FILE_CONTENT_LENGTH,0);  cv.put(ProviderTableMeta.FILE_CONTENT_TYPE,folder.getMimetype());  cv.put(ProviderTableMeta.FILE_NAME,folder.getFileName());  cv.put(ProviderTableMeta.FILE_PARENT,folder.getParentId());  cv.put(ProviderTableMeta.FILE_PATH,folder.getRemotePath());  cv.put(ProviderTableMeta.FILE_ACCOUNT_OWNER,mAccount.name);  cv.put(ProviderTableMeta.FILE_LAST_SYNC_DATE,folder.getLastSyncDateForProperties());  cv.put(ProviderTableMeta.FILE_LAST_SYNC_DATE_FOR_DATA,folder.getLastSyncDateForData());  cv.put(ProviderTableMeta.FILE_KEEP_IN_SYNC,folder.isFavorite() ? 1 : 0);  cv.put(ProviderTableMeta.FILE_ETAG,folder.getEtag());  cv.put(ProviderTableMeta.FILE_SHARED_VIA_LINK,folder.isSharedViaLink() ? 1 : 0);  cv.put(ProviderTableMeta.FILE_SHARED_WITH_SHAREE,folder.isSharedWithSharee() ? 1 : 0);  cv.put(ProviderTableMeta.FILE_PUBLIC_LINK,folder.getPublicLink());  cv.put(ProviderTableMeta.FILE_PERMISSIONS,folder.getPermissions());  cv.put(ProviderTableMeta.FILE_REMOTE_ID,folder.getRemoteId());  operations.add(ContentProviderOperation.newUpdate(ProviderTableMeta.CONTENT_URI).withValues(cv).withSelection(ProviderTableMeta._ID + "=?",new String[]{String.valueOf(folder.getFileId())}).build());  ContentProviderResult[] results=null;  Log_OC.d(TAG,"Sending " + operations.size() + " operations to FileContentProvider");  try {    if (getContentResolver() != null) {      results=getContentResolver().applyBatch(MainApp.getAuthority(),operations);    } else {      results=getContentProviderClient().applyBatch(operations);    }  } catch (  OperationApplicationException e) {    Log_OC.e(TAG,"Exception in batch of operations " + e.getMessage());  }catch (  RemoteException e) {    Log_OC.e(TAG,"Exception in batch of operations  " + e.getMessage());  }  if (results != null) {    long newId;    Iterator<OCFile> filesIt=updatedFiles.iterator();    OCFile file=null;    for (int i=0; i < results.length; i++) {      if (filesIt.hasNext()) {        file=filesIt.next();      } else {        file=null;      }      if (results[i].uri != null) {        newId=Long.parseLong(results[i].uri.getPathSegments().get(1));        if (file != null) {          file.setFileId(newId);        }      }    }  }}  }
class C{  protected AdsDeleteClientsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FREE_EXPERIENCE_CHARACTER_CANT_USE_WAREHOUSE(String value0){  return new SM_SYSTEM_MESSAGE(1400402,value0);}  }
class C{  public boolean hasMoved(){  return this.moved;}  }
class C{  private String daKey(DataApproval approval){  return daKey(approval,approval.getAttributeOptionCombo() == null ? "null" : approval.getAttributeOptionCombo().getUid());}  }
class C{  public PetCategory save(PetCategory petCategory){  log.debug("Request to save PetCategory : {}",petCategory);  PetCategory result=petCategoryRepository.save(petCategory);  return result;}  }
class C{  private void startCameraSource() throws SecurityException {  int code=GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(getContext());  if (code != ConnectionResult.SUCCESS) {    Dialog dlg=GoogleApiAvailability.getInstance().getErrorDialog(getActivity(),code,RC_HANDLE_GMS);    dlg.show();  }  if (mCameraSource != null) {    try {      mPreview.start(mCameraSource,mGraphicOverlay);    } catch (    IOException e) {      Log.e(TAG,"Unable to start camera source.",e);      mCameraSource.release();      mCameraSource=null;    }  }}  }
class C{  protected void processPlayRequest(){  tryToGetAudioFocus();  if (mState == State.STOPPED) {    playMedia();  } else   if (mState == State.PAUSED) {    mState=State.PLAYING;    setUpAsForeground(String.format(getString(R.string.media_state_playing),mFile.getFileName()));    configAndStartMediaPlayer();  }}  }
class C{  public void fitScreen(){  Matrix save=mFitScreenMatrixBuffer;  mViewPortHandler.fitScreen(save);  mViewPortHandler.refresh(save,this,false);  calculateOffsets();  postInvalidate();}  }
class C{  public NoiseTagLdaModel(int numTopics){  alpha=50.0 / numTopics;  beta=0.01;  eta=1.0;  locked=false;  this.numTopics=numTopics;  wnz=new int[numTopics];  tnz=new int[numTopics + 1];  Arrays.fill(wnz,0);  Arrays.fill(tnz,0);  noise=numTopics;}  }
class C{  public boolean sameObjectId(int objectId){  return this.getObjectId() == objectId;}  }
class C{  public static void open(EntityPlayer player,String owner,String guiID,GUIContext context){  if (player.worldObj.isRemote) {    openClient(player,owner,guiID,context);  } else {    openServer(player,owner,guiID,context);  }}  }
class C{  public CommandTagUpdate(final long changeId,final long commandTagId,final long equipmentId){  setChangeId(changeId);  this.commandTagId=commandTagId;  this.equipmentId=equipmentId;}  }
class C{  private void handleUnderXtnUpdates(Context context,XtnEntry xtnEntry,boolean isCommitting) throws SAException {  ISAdapterIterator iter=null;  ILockObject entryLock=null;  final XtnData pXtn=xtnEntry.getXtnData();  try {    iter=_cacheManager.makeUnderXtnEntriesIter(context,xtnEntry,SelectType.ALL_ENTRIES);    if (iter == null)     return;    while (true) {      IEntryHolder eh=(IEntryHolder)iter.next();      if (eh == null)       break;      try {        entryLock=_cacheManager.getLockManager().getLockObject(eh);synchronized (entryLock) {          if (eh.isDeleted())           continue;          if (!_leaseManager.isNoReapUnderXtnLeases() && eh.isExpired() && !_leaseManager.isSlaveLeaseManagerForEntries()&& !isExpiredEntryStayInSpace(eh))           continue;          if (eh.getWriteLockOwner() == null || eh.getWriteLockOwner() != xtnEntry)           continue;          if (eh.getWriteLockOperation() == SpaceOperations.READ || eh.getWriteLockOperation() == SpaceOperations.READ_IE)           continue;          context.setOperationID(pXtn.getOperationID(eh.getUID()));          if (!isCommitting) {            if (eh.getWriteLockOperation() != SpaceOperations.UPDATE && eh.getWriteLockOperation() != SpaceOperations.TAKE && eh.getWriteLockOperation() != SpaceOperations.TAKE_IE)             continue;            if (eh.getXidOriginated() == xtnEntry)             continue;            if (eh.hasShadow(true))             _cacheManager.handleUnderXtnUpdate(context,xtnEntry.m_Transaction,eh,isCommitting,pXtn);          } else {            if (eh.getWriteLockOperation() != SpaceOperations.WRITE && eh.hasShadow(true))             _cacheManager.handleUnderXtnUpdate(context,xtnEntry.m_Transaction,eh,isCommitting,pXtn);          }        }      }  finally {        if (entryLock != null) {          _cacheManager.getLockManager().freeLockObject(entryLock);          entryLock=null;        }      }    }  }  finally {    if (iter != null)     iter.close();  }}  }
class C{  public void makeCurrent(EGLSurface eglSurface){  if (eGLDisplay == EGL14.EGL_NO_DISPLAY) {    Log.d(TAG,"NOTE: makeCurrent w/o display");  }  if (!EGL14.eglMakeCurrent(eGLDisplay,eglSurface,eglSurface,eGLContext)) {    throw new RuntimeException("eglMakeCurrent failed");  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTrap_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200427,value0,skillname);}  }
class C{  protected InternalEventTracker handleEvent(Event event){  InternalEventTracker eventTracker=bus.postEvent(event);  if (eventTracker.hasErrors()) {    eventTracker.getFirstError().printStackTrace();  }  return eventTracker;}  }
class C{  public RMA6FromBlastCreator(String creator,BlastFileFormat format,BlastMode blastMode,String[] blastFiles,String[] readsFiles,String rma6File,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes) throws IOException {  this.format=format;  this.blastMode=blastMode;  this.blastFiles=blastFiles;  this.readsFiles=readsFiles;  this.rma6File=rma6File;  this.maxMatchesPerRead=maxMatchesPerRead;  this.doc=doc;  doc.getMeganFile().setFile(rma6File,MeganFile.Type.RMA6_FILE);  if (doc.getActiveViewers().size() > 0)   cNames=doc.getActiveViewers().toArray(new String[doc.getActiveViewers().size()]); else   cNames=new String[]{Classification.Taxonomy};  this.parsers=new IdParser[cNames.length];  int taxonMapperIndex=-1;  System.err.println("Classifications: " + Basic.toString(cNames,","));  for (int i=0; i < cNames.length; i++) {    parsers[i]=ClassificationManager.get(cNames[i],true).getIdMapper().createIdParser();    if (cNames[i].equals(Classification.Taxonomy)) {      taxonMapperIndex=i;    }  }  if (taxonMapperIndex == -1)   throw new IOException("Internal error: taxonMapperIndex=-1"); else   this.taxonMapperIndex=taxonMapperIndex;  ReadMagnitudeParser.setEnabled(hasMagnitudes);  this.pairedReads=doc.isPairedReads();  this.pairedReadSuffixLength=doc.getPairedReadSuffixLength();  rma6FileCreator=new RMA6FileCreator(rma6File,useCompression);  final String[] matchClassificationNames=new String[parsers.length];  for (int i=0; i < parsers.length; i++)   matchClassificationNames[i]=parsers[i].getCName();  rma6FileCreator.writeHeader(creator,blastMode,matchClassificationNames,doc.isPairedReads());}  }
class C{  public int next(){  if (!hasNextLine())   return -1;  matchesTextLength=0;  String line=nextLine();  boolean found=false;  while (line != null && !found) {    if (Basic.countOccurrences(line,'\t') == 1)     found=true; else     if (hasNext())     line=nextLine(); else     line=null;  }  if (line == null)   return -1;  int matchId=0;  matches.clear();  final String[] lines=Basic.split(line,'\t');  final String queryName=lines[0];  final String[] tokens=Basic.split(lines[1],';');  StringBuilder path=new StringBuilder();  try {    int whichToken=0;    while (whichToken < tokens.length) {      if (whichToken < tokens.length) {        String name=tokens[whichToken++];        if (name.equals("Root"))         name="root";        path.append(name).append(";");        String scoreString=tokens[whichToken++];        if (!scoreString.endsWith(")")) {          System.err.println("Expected (number) in: " + line);          break;        }        float bitScore=Basic.parseFloat(scoreString);        if (matches.size() < getMaxNumberOfMatchesPerRead() || bitScore > matches.last().bitScore) {          Match match=new Match();          match.bitScore=bitScore;          match.id=matchId++;          String ref=Basic.toString(tokens,0,whichToken,";") + ";";          match.samLine=makeSAM(queryName,path.toString(),bitScore,ref);          matches.add(match);          if (matches.size() > getMaxNumberOfMatchesPerRead())           matches.remove(matches.last());        }      }    }  } catch (  Exception ex) {    System.err.println("Error parsing file near line: " + getLineNumber());    if (incrementNumberOfErrors() >= getMaxNumberOfErrors())     throw new RuntimeException("Too many errors");  }  if (matches.size() == 0) {    if (queryName.length() > matchesText.length) {      matchesText=new byte[2 * queryName.length()];    }    for (int i=0; i < queryName.length(); i++)     matchesText[matchesTextLength++]=(byte)queryName.charAt(i);    matchesText[matchesTextLength++]='\n';    return 0;  } else {    for (    Match match : matches) {      byte[] bytes=match.samLine.getBytes();      if (matchesTextLength + bytes.length + 1 >= matchesText.length) {        byte[] tmp=new byte[2 * (matchesTextLength + bytes.length + 1)];        System.arraycopy(matchesText,0,tmp,0,matchesTextLength);        matchesText=tmp;      }      System.arraycopy(bytes,0,matchesText,matchesTextLength,bytes.length);      matchesTextLength+=bytes.length;      matchesText[matchesTextLength++]='\n';    }    return matches.size();  }}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  private void qTy(double[] y,InternalData internalData){  final double[][] weightedJacobian=internalData.weightedJacobian;  final int[] permutation=internalData.permutation;  final double[] beta=internalData.beta;  final int nR=weightedJacobian.length;  final int nC=weightedJacobian[0].length;  for (int k=0; k < nC; ++k) {    int pk=permutation[k];    double gamma=0;    for (int i=k; i < nR; ++i) {      gamma+=weightedJacobian[i][pk] * y[i];    }    gamma*=beta[pk];    for (int i=k; i < nR; ++i) {      y[i]-=gamma * weightedJacobian[i][pk];    }  }}  }
class C{  public IdsQuery(Class<T> type,Object[] ids,Object routing,QueryResultType queryResultType){  this(type.getName(),ids,routing,null,queryResultType);}  }
class C{  @Override public XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier) throws XNIException, IOException {  String resolvedId=resolveIdentifier(resourceIdentifier);  if (resolvedId != null) {    return new XMLInputSource(resourceIdentifier.getPublicId(),resolvedId,resourceIdentifier.getBaseSystemId());  }  return null;}  }
class C{  public MessageOnlyLogFilter(LogNode next){  mNext=next;}  }
class C{  public AutomaticNamespacedRegistry(Function<String,K> keyFactory){  this.keyFactory=keyFactory;}  }
class C{  private void onEquipmentDown(final Long equipmentId,final Timestamp timestamp,final String message){  if (LOGGER.isDebugEnabled()) {    StringBuffer str=new StringBuffer("onEquipmentDown(");    str.append("Equipment with id " + equipmentId);    str.append(", ");    str.append(timestamp);    str.append(", ");    str.append(message);    LOGGER.debug(str.toString());  }  equipmentFacade.suspend(equipmentId,timestamp,message);  final Equipment equipmentCopy=equipmentCache.getCopy(equipmentId);  Long stateTagId=equipmentCopy.getStateTagId();  if (stateTagId == null) {    LOGGER.error("Could not find any state tag for equipment " + equipmentCopy.getId() + " - this should never happen.");  } else {    try {      controlTagFacade.updateAndValidate(stateTagId,SupervisionStatus.DOWN.toString(),message,timestamp);    } catch (    CacheElementNotFoundException cacheEx) {      LOGGER.error("Could not locate state tag (Id is " + stateTagId + ") in cache for equipment "+ equipmentCopy.getId());    }  }}  }
class C{  public void addException(Access node){  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();  list.addChild(node);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_INTERVAL_HEAL_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201060,num0,skilltarget,skillname);}  }
class C{  protected void noteRemoval(K key,V oldValue){  for (  CacheListener<K,V> listener : listeners) {    listener.noteKeyRemoval(this,key,oldValue);  }}  }
class C{  private void validateIsPrimitiveType(String typeName) throws PIRException {  if (!allowedPrimitiveJavaTypes.contains(typeName.toLowerCase())) {    throw new PIRException("javaType = " + typeName + " is not one of the allowed javaTypes: "+ " byte, short, int, long, float, double, char, string");  }}  }
class C{  public void buildPathPart(Appendable buffer,String url) throws WebAppConfigurationException, IOException {  if (servletPath == null) {    throw new IllegalStateException("Servlet path is unknown");  }  buffer.append(servletPath);  if (!servletPath.endsWith("/") && !url.startsWith("/")) {    buffer.append("/");  }  buffer.append(url);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public DoubleType fullCopy(){  DoubleType tree=(DoubleType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void dump(String title){  dump(new PrintWriter(System.out),0,title,false);}  }
class C{  private void notifyDataSourceLoaded(){  List<DataSourceUpdatedInterface> copyListenerList=new ArrayList<DataSourceUpdatedInterface>(listenerList);  for (  DataSourceUpdatedInterface listener : copyListenerList) {    listener.dataSourceLoaded(getGeometryType(),this.connectedToDataSourceFlag);  }}  }
class C{  private List<RuleWrapper<RuleType>> minimize(List<RuleWrapper<RuleType>> rules){  ImmutableList.Builder<RuleWrapper<RuleType>> minimized=ImmutableList.builder();  for (int i=0; i < rules.size(); i++) {    RuleWrapper<RuleType> ruleWrapper=rules.get(i);    ruleWrapper.minimizeSelectors(rules,i + 1);    if (!ruleWrapper.selectors.isEmpty()) {      minimized.add(ruleWrapper);    }  }  return minimized.build();}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  private <T extends Type,S extends Instance>S putInstance(Optional<String> id,T type,BiFunction<String,T,S> putInstance,Function<T,S> addInstance){  return id.map(null).orElseGet(null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_HE_BECOME_OFFLINE_TIMEOUT(String value0){  return new SM_SYSTEM_MESSAGE(1300176,value0);}  }
class C{  private synchronized void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();}  }
class C{  public static float[] pointOnCircumference(int centerX,int centerY,double angle,double radius){  float[] result=new float[2];  pointOnCircumference(centerX,centerY,angle,radius,result);  return result;}  }
class C{  @Override public boolean requiresConcurrencyProtection(){  return false;}  }
class C{  private String toUrl(String testFile) throws MalformedURLException {  return new File(TestUtil.TEST_DATA_FOLDER + "pac",testFile).toURI().toURL().toString();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  protected AdsGetSuggestionsQueryWithRegions section(AdsGetSuggestionsSection value){  return unsafeParam("section",value);}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Logger.e("CustomTabsHelper","Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  public boolean isCreateTab(){  if (createTab == null) {    return false;  } else {    return createTab;  }}  }
class C{  public LandlordLease(Uuid cookie,Landlord landlord,Uuid landlordUuid,long expiration){  super(expiration);  if (cookie == null)   throw new NullPointerException("Can't create a LandlordLease " + "with a null cookie");  if (landlord == null)   throw new NullPointerException("Can't create a LandlordLease " + "with a null landlord");  if (landlordUuid == null)   throw new NullPointerException("Can't create a LandlordLease " + "with a null landlordUuid");  this.cookie=cookie;  this.landlord=landlord;  this.landlordUuid=landlordUuid;}  }
class C{  private boolean cIsArithmetic(Character c){  return (c == '+' || c == '-' || c == '*' || c == '/');}  }
class C{  public void onDownloadFailed(DownloadInfo downloadInfo,int reason,String notifyURI){  String status=DOWNLOAD_STATUS_DEVICE_ABORTED;switch (reason) {case DownloadManager.ERROR_CANNOT_RESUME:    status=DOWNLOAD_STATUS_LOSS_OF_SERVICE;  break;case DownloadManager.ERROR_HTTP_DATA_ERROR:case DownloadManager.ERROR_TOO_MANY_REDIRECTS:case DownloadManager.ERROR_UNHANDLED_HTTP_CODE:status=DOWNLOAD_STATUS_LOADER_ERROR;break;case DownloadManager.ERROR_INSUFFICIENT_SPACE:status=DOWNLOAD_STATUS_INSUFFICIENT_MEMORY;break;default :break;}long downloadId=downloadInfo.getDownloadId();OMAInfo omaInfo=mPendingOMADownloads.get(downloadId);if (omaInfo == null) {omaInfo=new OMAInfo();omaInfo.addAttributeValue(OMA_INSTALL_NOTIFY_URI,notifyURI);sendInstallNotificationAndNextStep(omaInfo,downloadInfo,status);return;}showDownloadWarningDialog(R.string.oma_download_failed,omaInfo,downloadInfo,status);mPendingOMADownloads.remove(downloadId);}  }
class C{  public void changeButtonBackgroundColor(int resId){  this.slickButtonBackgroundColor=resId;  slickFormSubmitButton.setBackgroundColor(slickButtonBackgroundColor);  slickFormSubmitButton.invalidate();}  }
class C{  public boolean isByteFeature(int index){  return 0 <= index && index < byteValuedDiscreteFeatures.length;}  }
class C{  private static void checkParameters(int numberOfTrials,double probabilityOfSuccess,double confidenceLevel){  if (numberOfTrials <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_OF_TRIALS,numberOfTrials);  }  MathUtils.checkRangeInclusive(probabilityOfSuccess,0,1);  if (confidenceLevel <= 0 || confidenceLevel >= 1) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_BOUNDS_CONFIDENCE_LEVEL,confidenceLevel,0,1);  }}  }
class C{  public MovieSaveException(String msg){  super(msg);}  }
class C{  public SessionInitializationException(String logMessage){  this(null,logMessage);}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){switch (requestCode) {case Constants.PERMISSION_REQUEST_WRITE_EXTERNAL_STORAGE:{      if (grantResults.length != 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {        Log.d(TAG,"Write External permission granted");        getData();        return;      }      Log.e(TAG,"Permission not granted: results len = " + grantResults.length + " Result code = "+ (grantResults.length > 0 ? grantResults[0] : "(empty)"));      finish();    }case Constants.PERMISSION_REQUEST_CAMERA:{    if (grantResults.length != 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {      Log.d(TAG,"Camera permission granted");      captureImage();      return;    }    Log.e(TAG,"Permission not granted: results len = " + grantResults.length + " Result code = "+ (grantResults.length > 0 ? grantResults[0] : "(empty)"));    break;  }default :{  Log.d(TAG,"Got unexpected permission result: " + requestCode);  super.onRequestPermissionsResult(requestCode,permissions,grantResults);  break;}}}  }
class C{  public void clear(){  mIntentToken=null;  mUri=null;}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  public IntIterator rows(Predicate filter){  return FilterIteratorFactory.rows(this,filter);}  }
class C{  public static void createFlight(Activity activity,int requestCode,Coordinate coordinate,@Nullable HashMap<String,String> extras){  Intent intent=new Intent(activity,CreateFlightActivity.class);  intent.putExtra(CreateFlightActivity.COORDINATE,coordinate);  if (extras != null) {    intent.putExtra(CreateFlightActivity.KEY_VALUE_EXTRAS,extras);  }  activity.startActivityForResult(intent,requestCode);}  }
class C{  private static void thresholdBlock(byte[] luminances,int xoffset,int yoffset,int threshold,int stride,BitMatrix matrix){  for (int y=0, offset=yoffset * stride + xoffset; y < BLOCK_SIZE; y++, offset+=stride) {    for (int x=0; x < BLOCK_SIZE; x++) {      if ((luminances[offset + x] & 0xFF) <= threshold) {        matrix.set(xoffset + x,yoffset + y);      }    }  }}  }
class C{  public void initialize(long initializationTimestamp){  mInitializationTimestamp=initializationTimestamp;}  }
class C{  public static Map<String,TaskBlockInfo> createMappingForSegments(List<TableBlockInfo> tableBlockInfoList){  Map<String,TaskBlockInfo> segmentBlockInfoMapping=new HashMap<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  for (  TableBlockInfo info : tableBlockInfoList) {    String segId=info.getSegmentId();    TaskBlockInfo taskBlockInfoMapping=segmentBlockInfoMapping.get(segId);    String taskNo=CarbonTablePath.DataFileUtil.getTaskNo(info.getFilePath());    if (null == taskBlockInfoMapping) {      taskBlockInfoMapping=new TaskBlockInfo();      groupCorrespodingInfoBasedOnTask(info,taskBlockInfoMapping,taskNo);      segmentBlockInfoMapping.put(segId,taskBlockInfoMapping);    } else {      groupCorrespodingInfoBasedOnTask(info,taskBlockInfoMapping,taskNo);    }  }  return segmentBlockInfoMapping;}  }
class C{  public static void showDocument(URL url){  showDocument(url.toString());}  }
class C{  public boolean hasCurve(){  return mHasCurve;}  }
class C{  public boolean hasGeomExecuted(){  return hasExecuted;}  }
class C{  public Vector3DFormat(final String prefix,final String suffix,final String separator,final NumberFormat format){  super(prefix,suffix,separator,format);}  }
class C{  public TileLayerOptions build(){  TileLayerOptions options=new TileLayerOptions();  options.minZoom=this.minZoom;  options.maxZoom=this.maxZoom;  options.maxNativeZoom=this.maxNativeZoom;  options.tileSize=this.tileSize;  options.subdomains=this.subdomains;  options.errorTileUrl=this.errorTileUrl;  options.attribution=this.attribution;  options.tms=this.tms;  options.continuousWorld=this.continuousWorld;  options.noWrap=this.noWrap;  options.zoomOffset=this.zoomOffset;  options.zoomReverse=this.zoomReverse;  options.opacity=this.opacity;  options.zIndex=this.zIndex;  options.unloadInvisibleTiles=this.unloadInvisibleTiles;  options.updateWhenIdle=this.updateWhenIdle;  options.detectRetina=this.detectRetina;  options.reuseTiles=this.reuseTiles;  options.bounds=this.bounds;  return options;}  }
class C{  public static void hideProgressDialogsAll(){synchronized (sLock) {    for (    ProgressDialog dialog : sDialogs.keySet()) {      if (isAlive(dialog) && dialog.isShowing())       dialog.dismiss();    }    sDialogs.clear();  }}  }
class C{  public Object executeScript(Map<String,Object> context) throws Exception {  return ScriptUtil.evaluate(language,script,null,context);}  }
class C{  public KMeansClustering(int numberClusters,PointList pl,boolean normalize) throws IllegalArgumentException {  this(numberClusters,pl,normalize,80);}  }
class C{  public TemplateDruidQuery withPostAggregations(Collection<PostAggregation> newPostAggregations){  return new TemplateDruidQuery(aggregations,newPostAggregations,nestedQuery,timeGrain);}  }
class C{  @NonNull public static void onActivityResult(int requestCode,int resultCode,Intent data){  ReactiveFB.getSessionManager().getCallbackManager().onActivityResult(requestCode,resultCode,data);}  }
class C{  protected void patch_addContext(Patch patch,String text){  if (text.length() == 0) {    return;  }  String pattern=text.substring(patch.start2,patch.start2 + patch.length1);  int padding=0;  while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length() < Match_MaxBits - Patch_Margin - Patch_Margin) {    padding+=Patch_Margin;    pattern=text.substring(Math.max(0,patch.start2 - padding),Math.min(text.length(),patch.start2 + patch.length1 + padding));  }  padding+=Patch_Margin;  String prefix=text.substring(Math.max(0,patch.start2 - padding),patch.start2);  if (prefix.length() != 0) {    patch.diffs.addFirst(new Diff(Operation.EQUAL,prefix));  }  String suffix=text.substring(patch.start2 + patch.length1,Math.min(text.length(),patch.start2 + patch.length1 + padding));  if (suffix.length() != 0) {    patch.diffs.addLast(new Diff(Operation.EQUAL,suffix));  }  patch.start1-=prefix.length();  patch.start2-=prefix.length();  patch.length1+=prefix.length() + suffix.length();  patch.length2+=prefix.length() + suffix.length();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Curse_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201140,value0);}  }
class C{  private void notifyAdded(List<AirMapTraffic> added){  if (added == null || added.isEmpty()) {    return;  }  for (  AirMapTrafficListener listener : listeners) {    listener.onAddTraffic(added);  }}  }
class C{  public static Pair<ZooKeeperServerShim,Integer> runZookeeperOnAnyPort(int basePort,File zkDir) throws Exception {  final int MAX_RETRIES=20;  final int MIN_PORT=1025;  final int MAX_PORT=65535;  ZooKeeperServerShim zks=null;  int zkPort=basePort;  boolean success=false;  int retries=0;  while (!success) {    try {      LOG.info("zk trying to bind to port " + zkPort);      zks=LocalBookKeeper.runZookeeper(1000,zkPort,zkDir);      success=true;    } catch (    BindException be) {      retries++;      if (retries > MAX_RETRIES) {        throw be;      }      zkPort++;      if (zkPort > MAX_PORT) {        zkPort=MIN_PORT;      }    }  }  return Pair.of(zks,zkPort);}  }
class C{  public boolean isIdentity(){  for (int i=0; i < v.length; i++) {    for (int j=0; j < v.length; j++) {      if (i == j) {        if (v[i].v[j] != 1)         return false;      } else       if (v[i].v[j] != 0)       return false;    }  }  return true;}  }
class C{  public GroupsSetCallbackSettingsQuery audioNew(Boolean value){  return unsafeParam("audio_new",value);}  }
class C{  @Override public void focusLost(FocusEvent e){  final JTextField tf=(JTextField)e.getSource();  if (!(VDICalculator.validationsobj.equalNumeric(tf.getText()))) {    JOptionPane.showMessageDialog(getRootPane(),VDICalculator.MESSAGES.getString("onlynumbersaccepted.validation"),null,JOptionPane.ERROR_MESSAGE,null);    tf.setText(VDICalculator.DEFAULTS.getString(tf.getName() + ".default"));    tf.requestFocus();  }}  }
class C{  public SiteAdminPage copyPage(String title){  grid.selectPageByTitle(title);  final SiteAdminActionBar siteAdminActionBar=grid.getActionBar();  bobcatWait.withTimeout(Timeouts.BIG).until(null,2);  grid.waitForLoaderNotPresent();  return this;}  }
class C{  public boolean hasProblems(){  return hasErrors() || myFidelityWarnings != null;}  }
class C{  public MetricDictionary(){  super();}  }
class C{  public Builder flushIntervalMicros(int flushIntervalMicros){  this._flushIntervalMicros=flushIntervalMicros;  return this;}  }
class C{  public static void dropTable(Database db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";  db.execSQL(sql);}  }
class C{  public AdsUpdateAdsQuery updateAds(UserActor actor,int accountId,String data){  return new AdsUpdateAdsQuery(getClient(),actor,accountId,data);}  }
class C{  @Override public Filter createFilter(){  return new DuringExtended();}  }
class C{  @VisibleForTesting public Optional<CertificateRequest> prepareCertificateRequest(Service service){  val requestAnnotation=service.getMetadata().getAnnotations().get(REQUEST_ANNOTATION);  val domains=getCertificateDomains(requestAnnotation);  val serviceName=service.getMetadata().getName();  val secretAnnotation=service.getMetadata().getAnnotations().get(SECRET_NAME_ANNOTATION);  val secretName=getSecretName(domains,Optional.ofNullable(secretAnnotation));  val secretOptional=secretManager.getSecret(namespace,secretName);  val requestBuilder=CertificateRequest.builder().secretName(secretName).domains(domains);  if (!secretOptional.isPresent()) {    log.info("Service {} requesting certificates: {}",serviceName,domains.toString());    requestBuilder.renew(false);  } else   if (certificateNeedsRenewal(domains,secretOptional.get())) {    log.info("Renewing certificates {} requested by {}",domains.toString(),serviceName);    requestBuilder.renew(true);  } else {    log.debug("Certificate for {} requested by {} already exists",domains.toString(),serviceName);    return Optional.empty();  }  return Optional.of(requestBuilder.build());}  }
class C{  private static void cleanDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDeleteOnExit(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public static void error(@NonNull String tag,String message,Object... args){  android.util.Log.e(tag,String.format(Locale.ENGLISH,message,args));}  }
class C{  protected void convertToDouble(byte[] in,int len,double[] out,int start){  int db=0;  if (frameSize == 1) {    for (int i=0; i < len; i+=frameSize)     out[start++]=((double)in[i]) * scale;  } else {    if (isBigEndian) {      db=(int)in[0];      for (int i=1, j=frameSize; i < len; i++) {        if (i == j) {          out[start++]=((double)db) * scale;          db=(int)in[i];          j+=frameSize;        } else {          db=db << 8 | ((int)in[i] & 0xff);        }      }      out[start++]=((double)db) * scale;    } else {      for (int i=0; i < len; i+=frameSize) {        db=(int)in[i + frameSize - 1];        for (int b=frameSize - 2; b >= 0; b--)         db=db << 8 | ((int)in[i + b] & 0xff);        out[start++]=((double)db) * scale;      }    }  }}  }
class C{  public NonPositiveDefiniteMatrixException(double wrong,int index,double threshold){  super(wrong,threshold,false);  this.index=index;  this.threshold=threshold;}  }
class C{  public TextPartsBuilder addTextPart(@NonNull CharSequence textPart){  Pair<CharSequence,BackgroundHolder> pair=Pair.create(textPart,null);  mTextParts.add(pair);  return this;}  }
class C{  public void flushTermination(){  for (int i=0; i < numberOfQueues; i++) {    if (!terminateLists[i].isEmpty()) {      this.submitTaskToQueue(this.createTerminateTask(terminateLists[i]),i,processedTerminates);      this.terminateLists[i]=new ArrayList(batchSize);      this.terminatesQueued++;    }  }}  }
class C{  private Map<String,ComplexValue> mapAggregationConvert(Map<String,String> input){  return input.entrySet().stream().collect(toMap(null,null));}  }
class C{  private Class<?> defineClass(String className,byte[] definition) throws ClassFormatError {  if (_logger.isLoggable(Level.FINE))   _logger.fine(this.toString() + " defining class: " + className);  try {    Class<?> defineClass=defineClass(className,definition,0,definition.length);    LRMIClassLoader previousClassLoader=_serviceClassLoaderContext.putClassBytesAndLoader(className,this,definition);    if (previousClassLoader != null)     throw new IllegalStateException("Class: " + className + " is already loaded in this service by LRMIClassLoader "+ previousClassLoader);    return defineClass;  } catch (  ClassFormatError e) {    if (_logger.isLoggable(Level.SEVERE))     _logger.log(Level.SEVERE,this.toString() + " class format error caught while defining class: " + className,e);    throw e;  }}  }
class C{  public boolean isApplicable(){  try {    resamplingMethod.setOptionResamplingSize(Integer.parseInt(resamplingSizeTF.getText()));    resamplingMethod.setOptionRepeatitions(Integer.parseInt(repeatitionsTF.getText()));    resamplingMethod.setOptionLeftPercentile(Double.parseDouble(percentileLeftTF.getText()));    return resamplingMethod.isApplicable();  } catch (  NumberFormatException ex) {    System.err.println("Error: " + ex);    return false;  }}  }
class C{  @Override public final void storeData(final IFallback object) throws IDBPersistenceException {  if (object instanceof FallbackImpl) {    if (!((FallbackImpl)object).toString().equals(FallbackImpl.ERROR)) {      storage.add(object);    } else {      throw new IDBPersistenceException("Connection to the DB has been lost");    }  }}  }
class C{  public boolean wasReleased(int code){  MouseButton mb=this.buttons.get(code);  if (mb == null) {    return false;  }  return mb.wasReleased();}  }
class C{  public static void translucentStatusBar(Activity activity,boolean hideStatusBarBackground){  Window window=activity.getWindow();  ViewGroup mContentView=(ViewGroup)activity.findViewById(Window.ID_ANDROID_CONTENT);  View mChildView=mContentView.getChildAt(0);  if (mChildView != null) {    ViewCompat.setFitsSystemWindows(mChildView,false);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    int statusBarHeight=getStatusBarHeight(activity);    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);      if (hideStatusBarBackground) {        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.setStatusBarColor(COLOR_TRANSLUCENT);      } else {        window.setStatusBarColor(calculateStatusBarColor(COLOR_TRANSLUCENT,DEFAULT_COLOR_ALPHA));      }      if (mChildView != null) {        ViewCompat.requestApplyInsets(mChildView);      }    } else {      ViewGroup mDecorView=(ViewGroup)window.getDecorView();      if (mDecorView.getTag() != null && mDecorView.getTag() instanceof Boolean && (Boolean)mDecorView.getTag()) {        mChildView=mDecorView.getChildAt(0);        mContentView.removeView(mChildView);        mChildView=mContentView.getChildAt(0);        if (mChildView != null) {          FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mChildView.getLayoutParams();          if (lp != null && lp.topMargin >= statusBarHeight) {            lp.topMargin-=statusBarHeight;            mChildView.setLayoutParams(lp);          }        }        mDecorView.setTag(false);      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Petrification_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200780,skilltarget);}  }
class C{  @Override public String toString(){  return super.toString() + "[caseSensitivity=" + caseSensitivity+ "]";}  }
class C{  public void pause(){}  }
class C{  public SketchSetOperationPostAggregation withFunc(SketchSetOperationPostAggFunction func){  return new SketchSetOperationPostAggregation(getName(),func,getFields(),getSize());}  }
class C{  public String toString(){  return "AudioOutput";}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  private HttpURLConnection createConnectionAndWriteData(IBasicRequest request) throws Exception {  HttpURLConnection connection=null;  Exception exception=null;  int retryCount=request.getRetryCount() + 1;  boolean failed=true;  for (; failed && retryCount > 0; retryCount--) {    try {      connection=createHttpURLConnection(request);      exception=null;      failed=false;    } catch (    Exception e) {      exception=e;    }  }  if (failed) {    throw exception;  } else   if (request.getRequestMethod().allowRequestBody()) {    writeRequestBody(request,connection.getOutputStream());  }  return connection;}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  protected void initializeContentModelStack(){  if (fOpStack == null) {    fOpStack=new short[8];    fNodeIndexStack=new int[8];    fPrevNodeIndexStack=new int[8];  } else   if (fDepth == fOpStack.length) {    short[] newStack=new short[fDepth * 2];    System.arraycopy(fOpStack,0,newStack,0,fDepth);    fOpStack=newStack;    int[] newIntStack=new int[fDepth * 2];    System.arraycopy(fNodeIndexStack,0,newIntStack,0,fDepth);    fNodeIndexStack=newIntStack;    newIntStack=new int[fDepth * 2];    System.arraycopy(fPrevNodeIndexStack,0,newIntStack,0,fDepth);    fPrevNodeIndexStack=newIntStack;  }  fOpStack[fDepth]=-1;  fNodeIndexStack[fDepth]=-1;  fPrevNodeIndexStack[fDepth]=-1;}  }
class C{  protected boolean isValidFragment(String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName) || GeneralPreferenceFragment.class.getName().equals(fragmentName) || DataSyncPreferenceFragment.class.getName().equals(fragmentName)|| NotificationPreferenceFragment.class.getName().equals(fragmentName);}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public EmailBuilder to(String to){  this.to.add(to);  return this;}  }
class C{  public static TransferDevice fromJson(final String json){  return getGson().fromJson(json,TransferDeviceImpl.class);}  }
class C{  public synchronized void zoom(final Point2D p,double scale){  m_itransform.transform(p,m_tmpPoint);  zoomAbs(m_tmpPoint,scale);}  }
class C{  public SM_EMOTION(Creature creature,EmotionType emotionType,int emotion,int targetObjectId){  this.senderObjectId=creature.getObjectId();  this.emotionType=emotionType;  this.emotion=emotion;  this.targetObjectId=targetObjectId;  this.state=creature.getState();  Stat2 aSpeed=creature.getGameStats().getAttackSpeed();  this.baseAttackSpeed=aSpeed.getBase();  this.currentAttackSpeed=aSpeed.getCurrent();  this.speed=creature.getGameStats().getMovementSpeedFloat();}  }
class C{  public GroupsEditManagerQuery role(GroupsEditManagerRole value){  return unsafeParam("role",value);}  }
class C{  public boolean hasLure(boolean updateFortDetails) throws LoginFailedException, RemoteServerException {  if (updateFortDetails) {    List<FortModifierOuterClass.FortModifier> modifiers=getDetails().getModifier();    for (    FortModifierOuterClass.FortModifier modifier : modifiers) {      if (modifier.getItemId() == ItemIdOuterClass.ItemId.ITEM_TROY_DISK) {        return true;      }    }    return false;  }  return fortData.getActiveFortModifierList().contains(ItemIdOuterClass.ItemId.ITEM_TROY_DISK);}  }
class C{  public static <T extends RealFieldElement<T>>FieldVector3D<T> applyTo(final Rotation r,final FieldVector3D<T> u){  final T x=u.getX();  final T y=u.getY();  final T z=u.getZ();  final T s=x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3()));  return new FieldVector3D<T>(x.multiply(r.getQ0()).subtract(z.multiply(r.getQ2()).subtract(y.multiply(r.getQ3()))).multiply(r.getQ0()).add(s.multiply(r.getQ1())).multiply(2).subtract(x),y.multiply(r.getQ0()).subtract(x.multiply(r.getQ3()).subtract(z.multiply(r.getQ1()))).multiply(r.getQ0()).add(s.multiply(r.getQ2())).multiply(2).subtract(y),z.multiply(r.getQ0()).subtract(y.multiply(r.getQ1()).subtract(x.multiply(r.getQ2()))).multiply(r.getQ0()).add(s.multiply(r.getQ3())).multiply(2).subtract(z));}  }
class C{  public static Label createLabel(String name,String value){  return new Label().withName(name).withValue(value);}  }
class C{  public void rewind(){  goTo(0);}  }
class C{  public PolylineOptions build(){  PolylineOptions options=new PolylineOptions();  options.smoothFactor=this.smoothFactor;  options.noClip=this.noClip;  options.stroke=this.stroke;  options.color=this.color;  options.weight=this.weight;  options.opacity=this.opacity;  options.fill=this.fill;  options.fillColor=this.fillColor;  options.fillOpacity=this.fillOpacity;  options.fillRule=this.fillRule;  options.dashArray=this.dashArray;  options.lineCap=this.lineCap;  options.lineJoin=this.lineJoin;  options.clickable=this.clickable;  options.pointerEvents=this.pointerEvents;  options.className=this.className;  return options;}  }
class C{  protected PhotosDeleteQuery photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  public SaveStatusLine(final SaveProtocolVersion version,int statusCode,final String reasonPhrase){  super();  if (version == null) {    throw new IllegalArgumentException("Protocol version may not be null.");  }  if (statusCode < 0) {    throw new IllegalArgumentException("Status code may not be negative.");  }  this.protoVersion=version;  this.statusCode=statusCode;  this.reasonPhrase=reasonPhrase;}  }
class C{  public AdsCreateAdsQuery createAds(UserActor actor,int accountId,String data){  return new AdsCreateAdsQuery(getClient(),actor,accountId,data);}  }
class C{  public VideoSearchQueryWithExtended date(Integer value){  return unsafeParam("date",value);}  }
class C{  public S2LatLngRect convolveWithCap(S1Angle angle){  S2Cap cap=S2Cap.fromAxisAngle(new S2Point(1,0,0),angle);  S2LatLngRect r=this;  for (int k=0; k < 4; ++k) {    S2Cap vertexCap=S2Cap.fromAxisHeight(getVertex(k).toPoint(),cap.height());    r=r.union(vertexCap.getRectBound());  }  return r;}  }
class C{  public EmailBuilder bcc(List<String> bccAddresses){  this.bcc.addAll(bccAddresses);  return this;}  }
class C{  @Override protected void fillUtterance(Utterance utterance,Element sentence){  fillUtterance(utterance,sentence,true,true,true);}  }
class C{  public static String u2(int v){  char[] result=new char[4];  for (int i=0; i < 4; i++) {    result[3 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public String viewName(){  return viewName;}  }
class C{  public static Type toSoot(TypeReference type){  return toSoot(type.getType(),0);}  }
class C{  public void assertTextPresentIgnoreCase(String expected,String actual){  assertTextPresent(expected.toLowerCase(),actual.toLowerCase());}  }
class C{  public void addChildren(final ReadDataLevelNode parent){  parent.add(new ReadDataNode(parent.getData()));}  }
class C{  @Override public void onLoadPackageCheckFail(File patchFile,int errorCode){  TinkerLog.i(TAG,"load patch package check fail file path:%s, errorCode:%d",patchFile.getAbsolutePath(),errorCode);  Tinker.with(context).cleanPatch();}  }
class C{  public static String whichDoctypeSystem(Document doc){  DocumentType doctype;  doctype=doc.getDoctype();  if (doctype != null) {    try {      return doctype.getSystemId();    } catch (    Error except) {    }  }  if (doc instanceof HTMLDocument)   return DTD.XHTMLSystemId;  return null;}  }
class C{  public boolean isBackup(){  return spaceMode == SpaceMode.BACKUP;}  }
class C{  public int compareTo(Issue otherIssue){  return this.getKey().compareTo(otherIssue.getKey());}  }
class C{  public void addCPItem(CP cp){  String uniq=cp.getUniq();  CP intern;  if ((intern=(CP)(cpe.get(uniq))) == null) {    cpe.put(uniq,cp);    cp.resolve(this);  }}  }
class C{  private int calculateTargetFrequency(Target target,int lastHFreq){  if (target == null || target.targetRule() == null || target.segment() == null)   throw new NullPointerException("Null target specification -- cannot calculate Frequency");  String f0descr=target.targetRule().getAttribute("f0");  int f0=0;  TopBaseConfiguration tbConf=null;  if (f0descr.equals("last_H_freq") && lastHFreq == 0) {    f0descr="1100";  }  if (MaryUtils.isNumber(f0descr)) {    int f0promille=MaryUtils.getNumber(f0descr);    Element phrase=(Element)DomUtils.getAncestor(target.segment(),MaryXML.PHRASE);    Element prosody=(Element)DomUtils.getAncestor(target.segment(),MaryXML.PROSODY);    Element topBaseRef=phrase;    if (prosody != null && DomUtils.isAncestor(phrase,prosody)) {      topBaseRef=prosody;    }    if (prosody != null && target.targetRule().getParentNode().getNodeName().equals("accent") && target.type().equals("star")) {      ProsodicSettings settings=prosodyMap.get(prosody);      if (settings != null) {        int accentProminence=settings.accentProminence();        int dist=f0promille - 500;        int newDist=(dist * accentProminence) / 100;        f0promille=500 + newDist;      }    }    tbConf=topBaseConfMap.get(topBaseRef);    assert tbConf != null;    int d=0;    try {      d=Integer.parseInt(target.segment().getAttribute("d"));    } catch (    NumberFormatException e) {      Log.w(Mary.LOG,"Unexpected duration value `" + target.segment().getAttribute("d") + "'");    }    int end=getSegmentEndInMillis(target.segment());    if (end == -1) {      Log.w(Mary.LOG,"Unexpected duration value `" + target.segment().getAttribute("end") + "'");    }    int timeMillis=(end - d) + (d * target.timing()) / 100;    if (f0promille == 1000) {      f0=tbConf.toplineFrequency(timeMillis);      lastHFreq=f0;    } else     if (f0promille == 0) {      f0=tbConf.baselineFrequency(timeMillis);    } else {      int base=tbConf.baselineFrequency(timeMillis);      int top=tbConf.toplineFrequency(timeMillis);      int range=top - base;      f0=base + (f0promille * range) / 1000;    }  } else   if (f0descr.equals("last_H_freq")) {    f0=lastHFreq;  } else {    Log.w(Mary.LOG,"Unknown f0 specification `" + f0descr + "' in file "+ MaryProperties.getFilename(tobirulefilePropertyName));  }  if (f0 != 0) {    target.setF0(f0);    Log.d(Mary.LOG,"Target on segment [" + target.segment().getAttribute("p") + "] at "+ target.getTargetTime()+ " ms, "+ target.f0()+ " Hz ("+ f0descr+ ")");  }  return lastHFreq;}  }
class C{  public <T>boolean isProvidedFor(Class<T> service){synchronized (providers) {    return providers.containsKey(service);  }}  }
class C{  public boolean containsKey(final int key){  final int hash=hashOf(key);  int index=hash & mask;  if (containsKey(key,index)) {    return true;  }  if (states[index] == FREE) {    return false;  }  int j=index;  for (int perturb=perturb(hash); states[index] != FREE; perturb>>=PERTURB_SHIFT) {    j=probe(perturb,j);    index=j & mask;    if (containsKey(key,index)) {      return true;    }  }  return false;}  }
class C{  public boolean isDashedLineEnabled(){  return mDashPathEffect == null ? false : true;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public boolean needsOffset(){  return (isEnabled() && isDrawLabelsEnabled() && getLabelPosition() == YAxisLabelPosition.OUTSIDE_CHART);}  }
class C{  public UrlValidator(String[] schemes,long options){  this(schemes,null,options);}  }
class C{  public DocsGetByIdQuery(VkApiClient client,UserActor actor,List<String> docs){  super(client,"docs.getById",Utils.buildParametrizedType(List.class,Doc.class));  accessToken(actor.getAccessToken());  docs(docs);}  }
class C{  public boolean print(){  return soot.PhaseOptions.getBoolean(options,"print");}  }
class C{  public void startBoolean(){}  }
class C{  @Override public final void element(String elementName,Augmentations augs) throws XNIException {  addToCurrentGroup(addUniqueLeafNode(elementName));}  }
class C{  public void union(MonitorSet other){}  }
class C{  private SLDDataInterface readSLDEditorFile(File file){  SLDDataInterface sldData=null;  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder documentBuilder;  try {    documentBuilder=documentBuilderFactory.newDocumentBuilder();    Document document=documentBuilder.parse(file);    String sldFile=extractTextData(document,SLDEditorFileHandler.SLD_ELEMENT);    DataSourcePropertiesInterface dataSourceProperties=DataSourceProperties.decodeXML(document,SLDEditorFileHandler.DATASOURCE_ELEMENT);    List<VersionData> vendorOptionList=extractVendorOptionData(document,SLDEditorFileHandler.VENDOR_OPTION_ELEMENT);    List<EnvVar> envVarList=extractEnvironmentVariables(document,SLDEditorFileHandler.ENVVAR_ELEMENT);    LegendOptionData legendOption=LegendOptionData.decodeXML(document,SLDEditorFileHandler.LEGEND_OPTION_ELEMENT);    File f=new File(sldFile);    String sldContents=readFile(f,Charset.defaultCharset());    List<DataSourceFieldInterface> fieldList=null;    sldData=new SLDData(new StyleWrapper(sldFile),sldContents);    sldData.setDataSourceProperties(dataSourceProperties);    sldData.setVendorOptionList(vendorOptionList);    sldData.setFieldList(fieldList);    sldData.setSLDFile(f);    sldData.setReadOnly(false);    sldData.setSldEditorFile(file);    sldData.setEnvVarList(envVarList);    sldData.setLegendOptions(legendOption);  } catch (  ParserConfigurationException e) {    ConsoleManager.getInstance().exception(this,e);  }catch (  SAXException e) {    ConsoleManager.getInstance().exception(this,e);  }catch (  IOException e) {    ConsoleManager.getInstance().exception(this,e);  }  return sldData;}  }
class C{  public TimeoutExpiredException(String desc,boolean committed){  super(desc);  this.committed=committed;}  }
class C{  public QualityCheckStep(){  super();  try {    parentSession=new QualityCheckSession();    Field field=FieldUtils.getDeclaredField(this.getClass().getSuperclass(),"session",true);    field.set(this,parentSession);  } catch (  IllegalAccessException e) {    logger.error("Cannot replace the QualityCheckSession with Reflection");  }}  }
class C{  protected ApplicationDescriptor(Application application,int preferredPosition){  this(application,ApplicationTypeFactory.getApplicationTypeFor(application),preferredPosition);}  }
class C{  public static Pose toOpenGLPoseWithScreenRotation(TangoPoseData tangoPose,int rotationIndex){  Matrix4 startServiceTDevice=tangoPoseToMatrix(tangoPose);  Matrix4 openglWorldTDevice=OPENGL_T_TANGO_WORLD.clone().multiply(startServiceTDevice);switch (rotationIndex) {case 0:    openglWorldTDevice.multiply(ROTATION_0_T_DEFAULT);  break;case 1:openglWorldTDevice.multiply(ROTATION_90_T_DEFAULT);break;case 2:openglWorldTDevice.multiply(ROTATION_180_T_DEFAULT);break;case 3:openglWorldTDevice.multiply(ROTATION_270_T_DEFAULT);break;default :openglWorldTDevice.multiply(ROTATION_0_T_DEFAULT);break;}return matrixToPose(openglWorldTDevice);}  }
class C{  @Override public void initialize(ConnectorContext ctx,List<Map<String,String>> taskConfigs){}  }
class C{  private String generateSupervisionIndex(long time){  return retrieveIndexFormat(indexPrefix + "-supervision_",time);}  }
class C{  public static AudioInputStream createSingleAudioInputStream(Vector<AudioInputStream> audioInputStreams){  if (audioInputStreams == null)   throw new NullPointerException("Received null vector of AudioInputStreams");  if (audioInputStreams.isEmpty())   throw new IllegalArgumentException("Received empty vector of AudioInputStreams");  AudioInputStream singleStream;  if (audioInputStreams.size() == 1)   singleStream=audioInputStreams.get(0); else {    AudioFormat audioFormat=audioInputStreams.get(0).getFormat();    singleStream=new SequenceAudioInputStream(audioFormat,audioInputStreams);  }  return singleStream;}  }
class C{  public void useStyle(@NotNull NlDrawingStyle style){  myStyle=style;}  }
class C{  public static String clearAllEvent(HttpServletRequest request,HttpServletResponse response){  String errMsg="";  Locale locale=UtilHttp.getLocale(request);  Security security=(Security)request.getAttribute("security");  if (!security.hasPermission("UTIL_CACHE_EDIT",request.getSession())) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCacheEvents.permissionEdit",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  UtilCache.clearAllCaches();  errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.clearAllCaches",locale);  request.setAttribute("_EVENT_MESSAGE_",errMsg + " (" + UtilDateTime.nowDateString("yyyy-MM-dd HH:mm:ss")+ ").");  return "success";}  }
class C{  public void removeOperationListener(OnRemoteOperationListener listener){synchronized (mBoundListeners) {    mBoundListeners.remove(listener);  }}  }
class C{  public IndexJoinPlan(Plan p1,TablePlan tp2,IndexInfo ii,String joinField,Transaction tx){  this.p1=p1;  this.tp2=tp2;  this.ii=ii;  this.joinField=joinField;  this.tx=tx;  schema.addAll(p1.schema());  schema.addAll(tp2.schema());  hist=joinHistogram(p1.histogram(),tp2.histogram(),joinField,ii.fieldName());}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new List(),1);}  }
class C{  public HumanTime ms(int n){  delta+=Math.abs(n);  return this;}  }
class C{  public void close(){  LOGGER.debug("synchro close");  setClosed(true);  while (!isEmpty() || isFiring() && !checkingThread.isDaemon()) {    try {      Thread.sleep(minWindowSize);    } catch (    Exception e) {      LOGGER.debug("Exception");    }  }}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public CharacterLiteral fullCopy(){  CharacterLiteral tree=(CharacterLiteral)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static EqualsSpacePredicate equal(Object value){  return new EqualsSpacePredicate(value);}  }
class C{  public void putLong(long v) throws IOException {  buffer.write((byte)(v >>> 0));  buffer.write((byte)(v >>> 8));  buffer.write((byte)(v >>> 16));  buffer.write((byte)(v >>> 24));  buffer.write((byte)(v >>> 32));  buffer.write((byte)(v >>> 40));  buffer.write((byte)(v >>> 48));  buffer.write((byte)(v >>> 56));}  }
class C{  protected Dfp(final DfpField field){  mant=new int[field.getRadixDigits()];  sign=1;  exp=0;  nans=FINITE;  this.field=field;}  }
class C{  protected Object prepareInput(IProgressMonitor monitor) throws InterruptedException {  initLabels();  try {    monitor.beginTask(Policy.bind("SVNCompareEditorInput.comparing"),30);    IProgressMonitor sub=new SubProgressMonitor(monitor,30);    sub.beginTask(Policy.bind("SVNCompareEditorInput.comparing"),100);    Object[] result=new Object[]{null};    ArrayList resourceSummaryNodeList=new ArrayList();    ArrayList summaryEditionNodeList=new ArrayList();    ISVNClientAdapter client=null;    try {      for (int i=0; i < resources.length; i++) {        ISVNLocalResource resource=resources[i];        ISVNRemoteFolder remoteFolder=remoteFolders[i];        SVNDiffSummary[] diffSummary=null;        client=SVNProviderPlugin.getPlugin().getSVNClientManager().getSVNClient();        diffSummary=client.diffSummarize(new File(resource.getResource().getLocation().toString()),remoteFolder.getUrl(),remoteFolder.getRevision(),true);        SVNProviderPlugin.getPlugin().getSVNClientManager().returnSVNClient(client);        client=null;        if (diffSummary != null && diffSummary.length > 0) {          diffSummary=getDiffSummaryWithSubfolders(diffSummary);          ITypedElement left=new SVNLocalResourceSummaryNode(resource,diffSummary,resource.getResource().getLocation().toString());          SummaryEditionNode right=new SummaryEditionNode(remoteFolder);          right.setName(resource.getFile().getName());          right.setRootFolder((RemoteFolder)remoteFolder);          right.setNodeType(SummaryEditionNode.RIGHT);          right.setRoot(true);          right.setDiffSummary(diffSummary);          String localCharset=Utilities.getCharset(resource.getIResource());          try {            right.setCharset(localCharset);          } catch (          CoreException e) {            SVNUIPlugin.log(IStatus.ERROR,e.getMessage(),e);          }          resourceSummaryNodeList.add(left);          summaryEditionNodeList.add(right);        }      }      if (resourceSummaryNodeList.size() == 0) {        result[0]=null;      } else {        Object[] resourceSummaryNodes=new Object[resourceSummaryNodeList.size()];        resourceSummaryNodeList.toArray(resourceSummaryNodes);        Object[] summaryEditionNodes=new Object[summaryEditionNodeList.size()];        summaryEditionNodeList.toArray(summaryEditionNodes);        MultipleSelectionNode left=new MultipleSelectionNode(resourceSummaryNodes);        MultipleSelectionNode right=new MultipleSelectionNode(summaryEditionNodes);        result[0]=new SummaryDifferencer().findDifferences(false,monitor,null,null,left,right);        fRoot=result[0];      }    }  finally {      sub.done();      if (client != null) {        SVNProviderPlugin.getPlugin().getSVNClientManager().returnSVNClient(client);      }    }    if (result[0] instanceof DiffNode) {      DiffNode diffNode=(DiffNode)result[0];      if (!diffNode.hasChildren()) {        return null;      }    }    return result[0];  } catch (  OperationCanceledException e) {    throw new InterruptedException(e.getMessage());  }catch (  Exception e) {    return e.getMessage();  } finally {    monitor.done();  }}  }
class C{  public boolean deleteTrack(Track track){synchronized (tracks) {    return tracks.removeElement(track);  }}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.BRAYCURTIS);}  }
class C{  protected VirtualFile createFile(String filePath,String... contentLines){  return createFile(filePath,Joiner.on("\n").join(contentLines));}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", groupId=").append(groupId);  sb.append(", taskName=").append(taskName);  sb.append(", taskType=").append(taskType);  sb.append(", taskDesc=").append(taskDesc);  sb.append(", taskCron=").append(taskCron);  sb.append(", taskPreviousFireTime=").append(taskPreviousFireTime);  sb.append(", taskNextFireTime=").append(taskNextFireTime);  sb.append(", contactEmail=").append(contactEmail);  sb.append("]");  return sb.toString();}  }
class C{  @Nullable public String doc(){  String s=this.optionalDocComment;  this.optionalDocComment=null;  return s;}  }
class C{  @Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {  try {    if (fDocumentHandler != null) {      fDocumentHandler.ignorableWhitespace(text.ch,text.offset,text.length);    }    if (fContentHandler != null) {      fContentHandler.ignorableWhitespace(text.ch,text.offset,text.length);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public Future execute(CompletionCallback<Object> callback){  if (callback == null)   throw new IllegalArgumentException("Callback cannot be null");  TaskManagerImpl taskManager=new TaskManagerImpl(this.executor_,this.cond_,this.task_,callback);  this.executor_.execute(taskManager);  return new Future(taskManager);}  }
class C{  public static HttpConnectTiming consumeConnectTimingForConnection(InetSocketAddress clientAddress){  return httpConnectTimes.remove(clientAddress);}  }
class C{  public static Dfp sin(final Dfp a){  final Dfp pi=a.getField().getPi();  final Dfp zero=a.getField().getZero();  boolean neg=false;  Dfp x=a.remainder(pi.multiply(2));  if (x.lessThan(zero)) {    x=x.negate();    neg=true;  }  if (x.greaterThan(pi.divide(2))) {    x=pi.subtract(x);  }  Dfp y;  if (x.lessThan(pi.divide(4))) {    y=sinInternal(split(x));  } else {    final Dfp c[]=new Dfp[2];    final Dfp[] piSplit=a.getField().getPiSplit();    c[0]=piSplit[0].divide(2).subtract(x);    c[1]=piSplit[1].divide(2);    y=cosInternal(c);  }  if (neg) {    y=y.negate();  }  return a.newInstance(y);}  }
class C{  public static void prepareKeysFromSurrogates(DimColumnFilterInfo filterValues,SegmentProperties segmentProperties,CarbonDimension dimension,DimColumnExecuterFilterInfo dimColumnExecuterInfo){  byte[][] keysBasedOnFilter=getKeyArray(filterValues,dimension,segmentProperties);  dimColumnExecuterInfo.setFilterKeys(keysBasedOnFilter);}  }
class C{  public SplitSystem apply(ProgressListener progressListener,Taxa taxa,Distances distances) throws CanceledException {  progressListener.setTasks("Computing non-hierarchical clustering using","Neighbor-Net");  ordering=new int[taxa.size() + 1];  if (taxa.size() > 3)   runNeighborNet(progressListener,taxa.size(),setupMatrix(distances),ordering); else   return new SplitSystem();  return CircularSplitWeights.getWeightedSplits(ordering,distances,"ols",true,0.0001f);}  }
class C{  public CreateSiteWindow selectBlueprint(String createdSiteTitle,String createdSiteName,String createdSiteTemplate){  typeTitle(createdSiteTitle);  typeName(createdSiteName);  selectTemplate(createdSiteTemplate);  return this;}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  public Box(float x,float y,float z){  super();  updateGeometry(Vector3f.ZERO,x,y,z);}  }
class C{  public DoubleColumn(int nrows,int capacity,double defaultValue){  super(double.class,new Double(defaultValue));  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new double[capacity];  Arrays.fill(m_values,defaultValue);  m_size=nrows;}  }
class C{  public WallRestoreQuery restore(UserActor actor){  return new WallRestoreQuery(getClient(),actor);}  }
class C{  private Object readLiteral() throws JSONException {  String literal=nextToInternal("{}[]/\\:,=;# \t\f");  if (literal.length() == 0) {    throw syntaxError("Expected literal value");  } else   if ("null".equalsIgnoreCase(literal)) {    return JSONObject.NULL;  } else   if ("true".equalsIgnoreCase(literal)) {    return Boolean.TRUE;  } else   if ("false".equalsIgnoreCase(literal)) {    return Boolean.FALSE;  }  if (literal.indexOf('.') == -1) {    int base=10;    String number=literal;    if (number.startsWith("0x") || number.startsWith("0X")) {      number=number.substring(2);      base=16;    } else     if (number.startsWith("0") && number.length() > 1) {      number=number.substring(1);      base=8;    }    try {      long longValue=Long.parseLong(number,base);      if (longValue <= Integer.MAX_VALUE && longValue >= Integer.MIN_VALUE) {        return (int)longValue;      } else {        return longValue;      }    } catch (    NumberFormatException e) {    }  }  try {    return Double.valueOf(literal);  } catch (  NumberFormatException ignored) {  }  return new String(literal);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DISABLE(String value0){  return new SM_SYSTEM_MESSAGE(1390230,value0);}  }
class C{  public StringToDoubleAdapterProperty(@NotNull AbstractProperty<String> wrappedProperty){  this(wrappedProperty,1);}  }
class C{  public int findColumn(String name){  for (int col=0; col < getColumnCount(); col++)   if (getColumnName(col).equals(name))   return col;  return -1;}  }
class C{  public static void main(String[] sArgs){  TAC2008DirectoryFileSet t=new TAC2008DirectoryFileSet("/home/ggianna/JInsect/TAC2008/UpdateSumm08_test_docs_files/");  t.createSets();  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTrainingSet(),"\n"));  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTestSet(),"\n"));  System.err.println("Per category:");  for (  String sCategory : (List<String>)t.getCategories()) {    System.err.println(utils.printIterable(t.getFilesFromCategory(sCategory),"\n"));  }  String sLastCat=(String)t.getCategories().get(t.getCategories().size() - 1);  String sFile=((CategorizedFileEntry)t.getFilesFromCategory(sLastCat).get(0)).getFileName();  System.out.println(t.loadFile(sFile));}  }
class C{  private static Date parseDate(String when) throws ParseException {  if (!DATE_TIME.matcher(when).matches()) {    throw new ParseException(when,0);  }  if (when.length() == 8) {    return buildDateFormat().parse(when);  } else {    Date date;    if (when.length() == 16 && when.charAt(15) == 'Z') {      date=buildDateTimeFormat().parse(when.substring(0,15));      Calendar calendar=new GregorianCalendar();      long milliseconds=date.getTime();      milliseconds+=calendar.get(Calendar.ZONE_OFFSET);      calendar.setTime(new Date(milliseconds));      milliseconds+=calendar.get(Calendar.DST_OFFSET);      date=new Date(milliseconds);    } else {      date=buildDateTimeFormat().parse(when);    }    return date;  }}  }
class C{  public Bindings add(String property,JTextArea textArea,String defaultValue){  registerPropertyChangeListener(textArea);  return add(new JTextComponentBinding(property,textArea,defaultValue));}  }
class C{  protected void performTypingAction(PsiFile file,char typedChar){  performTypingAction(openFileInEditor(file.getVirtualFile()),typedChar);}  }
class C{  public static void checkCanceled(IProgressMonitor monitor){  if (monitor.isCanceled())   throw new OperationCanceledException();}  }
class C{  public CM_REPORT_PLAYER(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public long first(){  return startDate.getTime();}  }
class C{  @Override public void computeTargetFeatures(Target target){  FeatureVector fv=targetFeatureComputer.computeFeatureVector(target);  target.setFeatureVector(fv);}  }
class C{  public void validateIntegrity() throws ByteBufferStorageCompromisedException {synchronized (this) {    if (!_initialized)     return;  }  try {    SegmentCursor reader=null;    int segmentIndex=0;    int packetCount=0;    long unindexedLength=0;    int packetInSegment=0;    long position=0;    try {      StorageSegment currentSegment=getFirstSegment();      reader=currentSegment.getCursorForReading();      reader.setPosition(0);      boolean firstIteration=true;      while (true) {        position=reader.getPosition();        if (_traceableLogger.isLoggable(Level.FINEST))         _traceableLogger.finest("start index integrity iteration [" + packetCount + "], position="+ position+ " segment index ["+ segmentIndex+ "] in segment packet index ["+ packetInSegment+ "] unindexed length ["+ unindexedLength+ "]");        if (!firstIteration && unindexedLength >= _maxScanLength) {          long indexPos=currentSegment.getIndexPosition(packetInSegment);          if (_traceableLogger.isLoggable(Level.FINEST))           _traceableLogger.finest("index position=" + indexPos + " reader position="+ position);          if (indexPos != reader.getPosition())           throw new ByteBufferStorageCompromisedException("Error while checking index integrity, segment index [" + segmentIndex + "]"+ " packet index ["+ packetCount+ "] in segment packet index ["+ packetInSegment+ "] expected index ["+ reader.getPosition()+ "] actual ["+ indexPos+ "]");          unindexedLength=0;        }        firstIteration=false;        int length=reader.readInt();        if (_traceableLogger.isLoggable(Level.FINEST))         _traceableLogger.finest("next packet length=" + length);        if (length == END_OF_PACKETS_MARKER) {          if (_traceableLogger.isLoggable(Level.FINEST))           _traceableLogger.finest("reached end of packets marker");          break;        }        if (length == END_OF_SEGMENT_MARKER) {          if (_traceableLogger.isLoggable(Level.FINEST))           _traceableLogger.finest("reached end of segment marker");          SegmentCursor tempReader=reader;          reader=null;          if (_traceableLogger.isLoggable(Level.FINEST))           _traceableLogger.finest("releasing reader");          tempReader.release();          currentSegment=_segments.get(++segmentIndex);          reader=currentSegment.getCursorForReading();          reader.setPosition(0);          position=0;          packetInSegment=0;          unindexedLength=0;          if (_traceableLogger.isLoggable(Level.FINEST))           _traceableLogger.finest("moved to next segment");          continue;        }        byte[] packetBuffer=new byte[length];        reader.readBytes(packetBuffer,0,length);        if (_traceableLogger.isLoggable(Level.FINEST))         _traceableLogger.finest("deserializing packet");        T deserializePacket=_packetSerializer.deserializePacket(packetBuffer);        if (deserializePacket == null)         throw new ByteBufferStorageCompromisedException("Error while checking data integrity, packet at index " + packetCount + " is null");        if (packetInSegment >= currentSegment.getNumOfDeletedPackets())         packetCount++;        packetInSegment++;        unindexedLength+=reader.getPosition() - position;      }      if (_traceableLogger.isLoggable(Level.FINEST))       _traceableLogger.finest("done index integrity check, releasing last reader");      SegmentCursor tempReader=reader;      reader=null;      if (tempReader != null)       tempReader.release();    } catch (    Exception e) {      if (reader != null)       try {        reader.release();      } catch (      Exception ei) {        throw new ByteBufferStorageCompromisedException("Error while checking data integrity, reached packet index " + packetCount + " additionally exception occurred when releasing the reader "+ ei.toString(),e);      }      if (e instanceof ByteBufferStorageCompromisedException)       throw (ByteBufferStorageCompromisedException)e;      throw new ByteBufferStorageCompromisedException("Error while checking data integrity, reached packet index " + packetCount,e);    }    if (_traceableLogger.isLoggable(Level.FINEST))     _traceableLogger.finest("validating size integrity, expected size=" + packetCount + " known size="+ _size);    if (packetCount != _size)     throw new ByteBufferStorageCompromisedException("Calculated size [" + packetCount + "] does not match kept size ["+ _size+ "]");    if (_traceableLogger.isLoggable(Level.FINEST))     _traceableLogger.finest("perform one entire scan using iterator");    StorageReadOnlyIterator<T> iterator=null;    int count=0;    try {      iterator=readOnlyIterator();      while (iterator.hasNext()) {        if (iterator.next() == null)         throw new ByteBufferStorageCompromisedException("Error while checking full iteration indexes, at packet index " + count + " iterator returned null packet");        if (_traceableLogger.isLoggable(Level.FINEST))         _traceableLogger.finest("iteration count " + count);        count++;      }      if (_traceableLogger.isLoggable(Level.FINEST))       _traceableLogger.finest("done iterator integrity check, closing iterator");      StorageReadOnlyIterator<T> tempIterator=iterator;      iterator=null;      tempIterator.close();      if (_traceableLogger.isLoggable(Level.FINEST))       _traceableLogger.finest("validating iterator size integrity, expected size=" + count + " known size="+ _size);      if (count != _size)       throw new ByteBufferStorageCompromisedException("Full iteration size [" + packetCount + "] does not match kept size ["+ _size+ "]");    } catch (    Exception e) {      if (iterator != null)       try {        iterator.close();      } catch (      StorageException ei) {        throw new ByteBufferStorageCompromisedException("Error while checking full iteration integrity, at packet index " + count + " additionally an error occurred while closing iterator "+ ei.toString(),e);      }      if (e instanceof ByteBufferStorageCompromisedException)       throw (ByteBufferStorageCompromisedException)e;      throw new ByteBufferStorageCompromisedException("Error while checking full iteration integrity, at packet index " + count,e);    }    if (_traceableLogger.isLoggable(Level.FINEST))     _traceableLogger.finest("validating fetch iterator by index integrity");    iterator=null;    int i=0;    try {      for (; i < _size; ++i) {        iterator=readOnlyIterator(i);        if (!iterator.hasNext())         throw new ByteBufferStorageCompromisedException("Error while validating indexes, at packet index " + i + " iterator has no next");        T packet=iterator.next();        if (packet == null)         throw new ByteBufferStorageCompromisedException("Error while validating indexes, at packet index " + i + " iterator returned null packet");        if (_traceableLogger.isLoggable(Level.FINEST))         _traceableLogger.finest("validated fetch iterator by index [" + i + "] integrity done, closing iterator");        StorageReadOnlyIterator<T> tempIterator=iterator;        iterator=null;        tempIterator.close();      }    } catch (    Exception e) {      if (iterator != null)       try {        iterator.close();      } catch (      StorageException ei) {        throw new ByteBufferStorageCompromisedException("Error while validating indexes, at packet index " + i + " additionally an error occurred while closing iterator "+ ei.toString(),e);      }      if (e instanceof ByteBufferStorageCompromisedException)       throw (ByteBufferStorageCompromisedException)e;      throw new ByteBufferStorageCompromisedException("Error while validating indexes, at packet index " + i,e);    }  } catch (  ByteBufferStorageCompromisedException e) {    logGeneralStatusOnError();    if (_traceableLogger.isLoggable(Level.FINEST))     _traceableLogger.finest(e.getMessage());    _traceableLogger.showThreadTrace();    throw e;  }catch (  Exception e) {    logGeneralStatusOnError();    if (_traceableLogger.isLoggable(Level.FINEST))     _traceableLogger.finest(e.getMessage());    _traceableLogger.showThreadTrace();    throw new ByteBufferStorageCompromisedException(e);  } finally {    _traceableLogger.clearThreadTrace();  }}  }
class C{  private void openAppSettings(){  Intent intent=new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,Uri.fromParts("package",getPackageName(),null));  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  startActivity(intent);}  }
class C{  public void registerListener(Condition condition,EventListener listener,int priority){  getListenerForCondition(condition,-1).registerListener(listener,priority);}  }
class C{  public boolean isView(){  return SqlViewType.QUERY.equals(type) || isMaterializedView();}  }
class C{  public static int exportTaxon2ReadNames(String format,Director dir,File file,char separator,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    final MainViewer viewer=dir.getMainViewer();    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      final IConnector connector=viewer.getDir().getDocument().getConnector();      final IClassificationBlock classificationBlock=connector.getClassificationBlock(viewer.getClassName());      final java.util.Collection<Integer> taxonIds=viewer.getSelectedIds();      progressListener.setSubtask("Taxa to read names");      progressListener.setMaximum(taxonIds.size());      progressListener.setProgress(0);      for (      int taxonId : taxonIds) {        Set<Integer> allBelow;        Node v=viewer.getTaxId2Node(taxonId);        if (v.getOutDegree() == 0)         allBelow=TaxonomyData.getTree().getAllDescendants(taxonId); else {          allBelow=new HashSet<>();          allBelow.add(taxonId);        }        final String name=getTaxonLabelSource(dir,format,taxonId);        if (name != null) {          w.write(name);          for (          int id : allBelow) {            if (classificationBlock.getSum(id) > 0) {              try (IReadBlockIterator it=connector.getReadsIterator(viewer.getClassName(),id,0,10000,true,false)){                while (it.hasNext()) {                  String readId=it.next().getReadName();                  w.write(separator + "" + readId);                }              }               w.write("\n");              totalLines++;              progressListener.checkForCancel();            }          }        }        progressListener.incrementProgress();      }    }   } catch (  CanceledException canceled) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  public double doCompare(String sSummaryTextFile,Set<String> ssModelFiles){  Distribution dRes=new Distribution();  NGramSymWinHierDocument ndNDoc1=new NGramSymWinHierDocument(MinN,Levels,DistFactor,GraphIndices);  ndNDoc1.loadDataStringFromFile(sSummaryTextFile);  File fSummaryFile=new File(sSummaryTextFile);  Iterator<String> iOtherIter=ssModelFiles.iterator();  while (iOtherIter.hasNext()) {    String sModelFile=iOtherIter.next();    if (new File(sModelFile).getName().equals(fSummaryFile.getName()) && AvoidSelfComparison) {      System.err.print(String.format("Skipping '%s' to '%s' comparison",sModelFile,fSummaryFile));      continue;    }    NGramSymWinHierDocument ndNDoc2=new NGramSymWinHierDocument(MinN,Levels,DistFactor,GraphIndices);    ndNDoc2.loadDataStringFromFile(sModelFile);    GraphSimilarity sSimil=null;    sSimil=ndNDoc1.compareTo(ndNDoc2);    dRes.increaseValue(sSimil.ValueSimilarity,1.0);  }  return dRes.average(false);}  }
class C{  public String toString(){  return "ClientMinPrincipal" + Constraint.toString(principals);}  }
class C{  public boolean mergerSlice(){  boolean mergeStatus=false;  int index=0;  try {    dataHandler.initialise();    for (    RawResultIterator leaftTupleIterator : this.rawResultIteratorList) {      this.recordHolderHeap.add(leaftTupleIterator);      index++;    }    RawResultIterator iterator=null;    while (index > 1) {      iterator=this.recordHolderHeap.poll();      Object[] convertedRow=iterator.next();      if (null == convertedRow) {        throw new SliceMergerException("Unable to generate mdkey during compaction.");      }      addRow(convertedRow);      if (!iterator.hasNext()) {        index--;        continue;      }      this.recordHolderHeap.add(iterator);    }    iterator=this.recordHolderHeap.poll();    while (true) {      Object[] convertedRow=iterator.next();      if (null == convertedRow) {        throw new SliceMergerException("Unable to generate mdkey during compaction.");      }      addRow(convertedRow);      if (!iterator.hasNext()) {        break;      }    }    this.dataHandler.finish();    mergeStatus=true;  } catch (  Exception e) {    LOGGER.error("Exception in compaction merger " + e.getMessage());    mergeStatus=false;  } finally {    try {      this.dataHandler.closeHandler();    } catch (    CarbonDataWriterException e) {      LOGGER.error("Exception while closing the handler in compaction merger " + e.getMessage());      mergeStatus=false;    }  }  return mergeStatus;}  }
class C{  public Builder iconSize(Point iconSize){  this.iconSize=iconSize;  return this;}  }
class C{  private static boolean inRange(float value,float min,float max){  return (min <= value) && (value <= max);}  }
class C{  public static void xml(String xml){  printer.xml(xml);}  }
class C{  public static boolean isEquals(Object actual,Object expected){  return actual == expected || (actual == null ? expected == null : actual.equals(expected));}  }
class C{  public void lockFlushing(){  flushLock.lock();}  }
class C{  public synchronized boolean removeGroup(String group){  TupleSet ts=getFocusGroup(group);  if (ts != null) {    for (Iterator items=ts.tuples(ValidatedPredicate.TRUE); items.hasNext(); ) {      ((VisualItem)items.next()).setValidated(false);    }    ts.clear();    m_focus.remove(group);    return true;  }  ts=getVisualGroup(group);  if (ts == null) {    return false;  }  TupleSet[] focus=new TupleSet[m_focus.size()];  m_focus.values().toArray(focus);  for (Iterator items=ts.tuples(); items.hasNext(); ) {    VisualItem item=(VisualItem)items.next();    for (int j=0; j < focus.length; ++j) {      focus[j].removeTuple(item);    }    item.setValidated(false);  }  if (ts instanceof CompositeTupleSet) {    CompositeTupleSet cts=(CompositeTupleSet)ts;    for (Iterator names=cts.setNames(); names.hasNext(); ) {      String name=(String)names.next();      String subgroup=PrefuseLib.getGroupName(group,name);      m_visual.remove(subgroup);      m_source.remove(subgroup);    }  }  m_visual.remove(group);  m_source.remove(group);  return true;}  }
class C{  public boolean isValid(boolean runFromCommandLine,List<String> errorMessages){  boolean inputValid=false;  boolean outputValid=false;  if (inputFile != null) {    if (!inputFile.isFile()) {      errorMessages.add("Input file is not a file.");    } else {      if (!inputFile.exists()) {        errorMessages.add("Input file does not exist.");      } else {        inputValid=true;      }    }  } else {    errorMessages.add("Input file not specified.");  }  if (outputFile != null) {    if (runFromCommandLine) {      if (outputFile.exists() && !overwrite) {        errorMessages.add("Output file already exists, use -overwrite option on the command line.");      } else {        outputValid=true;      }    } else {      if (outputFile.exists() && !overwrite) {        int result=JOptionPane.showConfirmDialog(null,"Overwrite output file?","Output file exists",JOptionPane.YES_NO_OPTION);        if (result == JOptionPane.YES_OPTION) {          overwrite=true;          outputValid=true;        } else {          errorMessages.add("Output file already exists.");        }      } else {        outputValid=true;      }    }    if (outputValid) {      if (outputFile.getParentFile() != null) {        outputValid=outputFile.getParentFile().exists();        if (!outputValid) {          errorMessages.add("Path of output file does not exist.");        }      }    }  } else {    errorMessages.add("Output file not specified.");  }  return inputValid && outputValid;}  }
class C{  private static String quote(String s){  StringBuffer sb=new StringBuffer(s.length() + 2);  sb.append('"');  char[] ca=s.toCharArray();  for (int i=0; i < ca.length; i++) {    char c=ca[i];    if (c == '\\' || c == '"') {      sb.append("\\").append(c);    } else     if (c == '\n') {      sb.append("\\n");    } else     if (c == '\r') {      sb.append("\\r");    } else     if (c == '\t') {      sb.append("\\t");    } else     if (c == '\f') {      sb.append("\\f");    } else     if (c == '\b') {      sb.append("\\b");    } else     if (c < 0x20) {      sb.append("\\").append(Integer.toOctalString(c));    } else {      sb.append(c);    }  }  return sb.append('"').toString();}  }
class C{  public static byte[] objectToByteBuffer(Object obj) throws IOException {  OptimizedByteArrayOutputStream outStream=cachedByteArrayOutputStream.get();  outStream.reset();  ObjectOutputStream out=new ObjectOutputStream(outStream);  out.writeObject(obj);  out.flush();  byte[] result=outStream.toByteArray();  out.close();  return result;}  }
class C{  public static <T>Set<T> toSet(T obj1,T obj2,T obj3,T obj4,T obj5,T obj6){  Set<T> theSet=new LinkedHashSet<T>();  theSet.add(obj1);  theSet.add(obj2);  theSet.add(obj3);  theSet.add(obj4);  theSet.add(obj5);  theSet.add(obj6);  return theSet;}  }
class C{  public CarouselOptions scrollToFlingUncertaintyTimeout(int scrollToFlingUncertaintyTimeout){  mScrollToFlingUncertaintyTimeout=scrollToFlingUncertaintyTimeout;  return this;}  }
class C{  public String timerString(String message,String module){  long tsStart=System.currentTimeMillis();  StringBuilder retBuf=new StringBuilder();  retBuf.append("[[").append(message).append("- total:").append(secondsSinceStart());  if (lastMessage != null) {    retBuf.append(",since last(").append(((lastMessage.length() > 20) ? (lastMessage.substring(0,17) + "...") : lastMessage)).append("):").append(secondsSinceLast());  }  retBuf.append("]]");  if (UtilValidate.isNotEmpty(timerName)) {    retBuf.append(" - '").append(timerName).append("'");  }  lastMessage=message;  String retString=retBuf.toString();  if (log)   Debug.log(Debug.TIMING,null,retString,module,"org.ofbiz.base.util.UtilTimer");  lastMessageTime=System.currentTimeMillis();  startTime+=(lastMessageTime - tsStart);  return retString;}  }
class C{  private void addCachedLegionMemberEx(LegionMemberEx legionMemberEx){  this.allCachedLegionMembers.addMemberEx(legionMemberEx);}  }
class C{  private int computeKey(int row,int column){  return row * columns + column;}  }
class C{  public RMA6FileModifier(String fileName) throws IOException {  super(fileName,READ_WRITE);  super.close();}  }
class C{  public void addField(FieldConfigBase fieldConfig){  if (fieldConfig != null) {    add(fieldConfig.getFieldId(),fieldConfig);  }}  }
class C{  public boolean isAvailable(){  return available;}  }
class C{  @Override protected synchronized void beforeWrite(int n){  count+=n;}  }
class C{  public int compare(File file1,File file2){  long result=file1.lastModified() - file2.lastModified();  if (result < 0) {    return -1;  } else   if (result > 0) {    return 1;  } else {    return 0;  }}  }
class C{  public static void write(RMA2Formatter rma2Formatter,IReadBlockWithLocation readBlock,IOutputWriter dumpWriter,IOutputWriter indexWriter) throws IOException {  readBlock.setUId(indexWriter.getPosition());  Location location=readBlock.getTextLocation();  if (dumpWriter != null) {    long dataDumpPos=dumpWriter.getPosition();    if (readBlock.getReadSequence() != null)     dumpWriter.writeString(readBlock.getReadHeader() + "\n" + readBlock.getReadSequence()); else     dumpWriter.writeString(readBlock.getReadHeader() + "\n");    if (location == null) {      location=new Location();      readBlock.setTextLocation(location);    }    location.setFileId(0);    location.setPosition(dataDumpPos);    location.setSize((int)(dumpWriter.getPosition() - dataDumpPos));  }  ReadBlockRMA2Formatter readBlockFormatter=rma2Formatter.getReadBlockRMA2Formatter();  readBlockFormatter.setReadWeight(readBlock.getReadWeight());  readBlockFormatter.setMateUId(readBlock.getMateUId());  readBlockFormatter.setMateType(readBlock.getMateType());  readBlockFormatter.setReadLength(readBlock.getReadLength());  readBlockFormatter.setComplexity(readBlock.getComplexity());  readBlockFormatter.setNumberOfMatches(readBlock.getNumberOfMatches());  readBlockFormatter.write(indexWriter);  if (location != null) {    indexWriter.writeChar((char)location.getFileId());    indexWriter.writeLong(location.getPosition());    indexWriter.writeInt(location.getSize());  } else {    indexWriter.writeChar((char)-1);    indexWriter.writeLong(-1);    indexWriter.writeInt(-1);  }  for (int i=0; i < readBlock.getNumberOfMatches(); i++) {    IMatchBlockWithLocation matchBlock=readBlock.getMatchBlock(i);    MatchBlockRMA2.write(rma2Formatter,matchBlock,dumpWriter,indexWriter);  }}  }
class C{  @Override public void put(int index,byte[] value){  System.arraycopy(value,0,datastore,((index) * sizeOfEachElement),sizeOfEachElement);}  }
class C{  public XorPredicate(){}  }
class C{  private void analyzeAssociations(DataSupport baseObj){  try {    Collection<AssociationsInfo> associationInfos=getAssociationInfo(baseObj.getClassName());    analyzeAssociatedModels(baseObj,associationInfos);  } catch (  Exception e) {    throw new DataSupportException(e.getMessage());  }}  }
class C{  public void addImplements(Access node){  List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();  list.addChild(node);}  }
class C{  public static void splitTexts(String sFile){  try {    FileReader frIn=new FileReader(sFile);    BufferedReader brIn=new BufferedReader(frIn);    String sText="";    String sLine;    while ((sLine=brIn.readLine()) != null) {      sText+=sLine;    }    String[] sSplitLine=sText.split("\\s*#[0-9]+\\s*-{8,}\\s*\\S*\\s*-{8,}\\s*|\\s*-{8,}\\s*\\S*\\s*-{8,}\\s*");    sText="";    for (int iCnt=0; iCnt < sSplitLine.length; iCnt++) {      sText=sSplitLine[iCnt];      if (sText.length() > 0) {        FileWriter fwOut=new FileWriter(sFile + iCnt);        System.out.println("TEXT " + iCnt + ":\n"+ sText+ "\n\n");        fwOut.write(sText);        fwOut.close();      }    }    frIn.close();    brIn.close();  } catch (  FileNotFoundException fnfE) {    System.err.println(fnfE.getMessage());    fnfE.printStackTrace();    System.exit(1);  }catch (  IOException ioe) {    System.err.println(ioe.getMessage());    ioe.printStackTrace();    System.exit(2);  }}  }
class C{  public Expression matches(Value str,Value regexp,String single,String multi,String escape){  if (escape != null)   throw new IllegalArgumentException("JPQL ESCAPE keyword is not supported.");  return new MatchesExpression(str,regexp);}  }
class C{  private void sumUpAttributeValues(){  Collection<String> microbialTaxa=taxaName2AttributesRawData.keySet();  for (  String taxname : microbialTaxa) {    if (!taxaName2Attributes2Properties.containsKey(taxname)) {      continue;    }    Hashtable<String,String> taxonAttributes=taxaName2Attributes2Properties.get(taxname);    if (taxonAttributes.size() > 0) {      for (      String attribute : AttributeData.attributeList) {        String parsed=taxonAttributes.get(attribute);switch (attribute) {case "Gram Stain":case "Endospores":case "Motility":          if (parsed.equals("+") || parsed.equals("Yes")) {            this.updateAttributes2TaxaNames(attribute,0,taxname);          } else           if (parsed.equals("-") || parsed.equals("No")) {            updateAttributes2TaxaNames(attribute,1,taxname);          } else           if (parsed.equals("")) {            this.updateAttributes2TaxaNames(attribute,2,taxname);          }        break;case "Pathogenic":      if (parsed.equals("")) {        this.updateAttributes2TaxaNames(attribute,2,taxname);      } else       if (parsed.equals("No")) {        this.updateAttributes2TaxaNames(attribute,1,taxname);      } else {        this.updateAttributes2TaxaNames(attribute,0,taxname);      }    break;default :  int propertyIndex=this.getPropertyIndex(attribute,parsed);this.updateAttributes2TaxaNames(attribute,propertyIndex,taxname);break;}}}}}  }
class C{  public static TaskInfo packTaskInfo(TaskInfo taskInfo){  if (!taskInfo.hasExecutor()) {    return taskInfo;  } else {    ExecutorInfo.Builder executorInfoBuilder=ExecutorInfo.newBuilder().setExecutorId(ExecutorID.newBuilder().setValue(COMMAND_DATA_PACKAGE_EXECUTOR));    if (taskInfo.hasCommand()) {      executorInfoBuilder.setCommand(taskInfo.getCommand());    } else {      executorInfoBuilder.setCommand(CommandInfo.getDefaultInstance());    }    if (taskInfo.hasData()) {      executorInfoBuilder.setData(taskInfo.getData());    }    return TaskInfo.newBuilder(taskInfo).setData(executorInfoBuilder.build().toByteString()).clearCommand().build();  }}  }
class C{  public static boolean isOrSubOf(Object obj,Object parentObject){  Class<?> parentClass=parentObject.getClass();  return isOrSubOf(obj,parentClass);}  }
class C{  public static double asin(double x){  if (Double.isNaN(x)) {    return Double.NaN;  }  if (x > 1.0 || x < -1.0) {    return Double.NaN;  }  if (x == 1.0) {    return Math.PI / 2.0;  }  if (x == -1.0) {    return -Math.PI / 2.0;  }  if (x == 0.0) {    return x;  }  double temp=x * HEX_40000000;  final double xa=x + temp - temp;  final double xb=x - xa;  double ya=xa * xa;  double yb=xa * xb * 2.0 + xb * xb;  ya=-ya;  yb=-yb;  double za=1.0 + ya;  double zb=-(za - 1.0 - ya);  temp=za + yb;  zb+=-(temp - za - yb);  za=temp;  double y;  y=sqrt(za);  temp=y * HEX_40000000;  ya=y + temp - temp;  yb=y - ya;  yb+=(za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);  double dx=zb / (2.0 * y);  double r=x / y;  temp=r * HEX_40000000;  double ra=r + temp - temp;  double rb=r - ra;  rb+=(x - ra * ya - ra * yb - rb * ya - rb * yb) / y;  rb+=-x * dx / y / y;  temp=ra + rb;  rb=-(temp - ra - rb);  ra=temp;  return atan(ra,rb,false);}  }
class C{  public final void removeFactoryChangeListener(DataChangeListener<ModelProvider<M,D>> listener){  factoryChange.removeChangeListener(listener);}  }
class C{  public void paint(Graphics g){  g.translate(0,-visibleRow * getRowHeight());  super.paint(g);}  }
class C{  public void userForeground(int userId){synchronized (mPackagesLock) {    VUserInfo user=mUsers.get(userId);    long now=System.currentTimeMillis();    if (user == null || user.partial) {      VLog.w(LOG_TAG,"userForeground: unknown user #" + userId);      return;    }    if (now > EPOCH_PLUS_30_YEARS) {      user.lastLoggedInTime=now;      writeUserLocked(user);    }  }}  }
class C{  public Boolean shouldAllowRequest(String url){  return null;}  }
class C{  public FramewiseMerger(DoubleDataSource inputSource,int frameLength,int samplingRate,DoubleDataSource labelTimes,DoubleDataSource otherSource,int otherSamplingRate,DoubleDataSource otherLabelTimes,InlineFrameMerger merger){  DoubleDataSource paddingOther1=new BufferedDoubleDataSource(new double[3 * frameLength / 4]);  DoubleDataSource paddedOtherSource=new SequenceDoubleDataSource(new DoubleDataSource[]{paddingOther1,otherSource});  this.otherFrameProvider=new FrameProvider(paddedOtherSource,Window.get(Window.HANNING,frameLength,0.5),frameLength,frameLength / 4,samplingRate,true);  this.blockSize=frameLength / 4;  int inputFrameshift=blockSize;  Window window=Window.get(Window.HANNING,frameLength + 1,0.5);  this.outputWindow=null;  this.memory=new double[frameLength];  this.processor=merger;  DoubleDataSource padding1=new BufferedDoubleDataSource(new double[3 * inputFrameshift]);  DoubleDataSource padding2=new BufferedDoubleDataSource(new double[3 * inputFrameshift]);  DoubleDataSource paddedSource=new SequenceDoubleDataSource(new DoubleDataSource[]{padding1,inputSource,padding2});  this.frameProvider=new FrameProvider(paddedSource,window,frameLength,inputFrameshift,samplingRate,true);  double[] dummy=new double[blockSize];  for (int i=0; i < 3; i++) {    getData(dummy,0,blockSize);  }  this.frameProvider.resetInternalTimer();  this.otherFrameProvider.resetInternalTimer();  this.labelTimes=labelTimes;  this.otherLabelTimes=otherLabelTimes;  prevLabel=0;  currentLabel=0;  prevOtherLabel=0;  currentOtherLabel=0;}  }
class C{  @SuppressWarnings("unchecked") @Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {  String id;  if (AnonymousToken.isAnonymous(token)) {    if (_anonymousId != null) {      id=_anonymousId;    } else {      return null;    }  } else {    id=((ApiKeyAuthenticationToken)token).getPrincipal();  }  return getUncachedAuthenticationInfoForKey(id);}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public void collapsed(boolean collapsed){  this.collapsed=collapsed;  if (collapsed) {    Assert.IsNull(entryLookup);    entryLookup=new ConsoleEntryLookupTable();  } else {    entryLookup=null;  }  applyFilter();}  }
class C{  public CommandManagerFX(IDirector dir,Object viewer,String[] commandsPaths,boolean returnOnCommandNotFound){  super(dir,viewer,commandsPaths,returnOnCommandNotFound);}  }
class C{  private static void usage(){  int consoleWidth=ConsoleUtil.getConsoleWidth();  if (consoleWidth <= 0) {    consoleWidth=80;  }  System.out.println("java -cp baksmali.jar org.cc.dexlib2.analysis.DumpVtables -d path/to/framework/jar/files <dex-file>");}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0.001,0.01,0.025,0.05,0.1,0.999,0.990,0.975,0.950,0.900};}  }
class C{  public OrdersChangeStateQuery changeState(UserActor actor,int orderId,OrdersChangeStateAction action){  return new OrdersChangeStateQuery(getClient(),actor,orderId,action);}  }
class C{  public long optLong(String key){  return optLong(key,0);}  }
class C{  public DDSAudioInputStream(DoubleDataSource source,AudioFormat format){  super(new ByteArrayInputStream(new byte[0]),format,AudioSystem.NOT_SPECIFIED);  if (format.getChannels() > 1) {    throw new IllegalArgumentException("Can only produce mono audio");  }  if (!format.getEncoding().equals(AudioFormat.Encoding.PCM_SIGNED) && !format.getEncoding().equals(AudioFormat.Encoding.PCM_UNSIGNED)) {    throw new IllegalArgumentException("Can only produce PCM_SIGNED or PCM_UNSIGNED audio");  }  int bitsPerSample=format.getSampleSizeInBits();  if (bitsPerSample != 8 && bitsPerSample != 16 && bitsPerSample != 24) {    throw new IllegalArgumentException("Can deal with sample size 8 or 16 or 24, but not " + bitsPerSample);  }  this.source=source;  this.sampleBuf=new double[SAMPLEBUFFERSIZE];  assert frameSize == bitsPerSample / 8;}  }
class C{  public void populateUI(int noOfItems){  String selectedItem=null;  if (noOfItems > 1) {    selectedItem=MULTIPLE_SYMBOL;  } else   if (noOfItems == 1) {    selectedItem=SINGLE_SYMBOL;  } else {    selectedItem=NO_SYMBOL;  }  SymbolPanelInterface symbolPanelUI=uiSymbolMap.get(selectedItem);  if (symbolPanelUI != null) {    CardLayout cl=(CardLayout)(panelDataTab.getLayout());    cl.show(panelDataTab,selectedItem);    symbolPanelUI.populate(SelectedSymbol.getInstance());  }  SymbolPanelInterface legendPanelUI=uiLegendMap.get(selectedItem);  if (legendPanelUI != null) {    CardLayout cl=(CardLayout)(panelLegendTab.getLayout());    cl.show(panelLegendTab,selectedItem);    legendPanelUI.populate(SelectedSymbol.getInstance());  }}  }
class C{  private void insertTemplateToCache(Context context,TemplateCacheInfo pTemplate){  final ITemplateHolder template=pTemplate.m_TemplateHolder;  final TypeData typeData=_typeDataMap.get(template.getServerTypeDesc());  if (template.isNotifyTemplate())   typeData.incM_NumRegularNotifyTemplatesStored();  if (template.isFifoGroupPoll())   _fifoGroupCacheImpl.incrementNumOfTemplates();  final boolean anyIndexes=typeData.hasInitialIndexes();  final boolean extendedMatch=template.getExtendedMatchCodes() != null;  if (template.getUidToOperateBy() != null)   insertTemplateByUid(pTemplate,typeData); else   if (!anyIndexes)   insertNonIndexedTemplate(pTemplate,typeData,extendedMatch); else   TypeDataIndex.insertIndexedTemplate(pTemplate,typeData,extendedMatch);  if (template.isNotifyTemplate()) {    context.setNotifyLease(_leaseManager.registerTemplateLease(pTemplate));  }  if (template.getXidOriginated() != null) {    XtnData pXtn=template.getXidOriginated().getXtnData();    if (template.isNotifyTemplate())     pXtn.getNTemplates(true).add(pTemplate); else     pXtn.getRTTemplates(true).add(pTemplate);  }}  }
class C{  public static void show(@Nullable Activity activity,CharSequence msg){  show(activity,msg,LENGTH_SHORT);}  }
class C{  public void log(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  function[0]=FastMath.log(operand[operandOffset]);  if (order > 0) {    double inv=1.0 / operand[operandOffset];    double xk=inv;    for (int i=1; i <= order; ++i) {      function[i]=xk;      xk*=-i * inv;    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public Matrix3f transposeLocal(){  float tmp=m01;  m01=m10;  m10=tmp;  tmp=m02;  m02=m20;  m20=tmp;  tmp=m12;  m12=m21;  m21=tmp;  return this;}  }
class C{  @Override public void accept(TestValueVisitor visitor,FieldIdEnum fieldId){  visitor.setTestValue(fieldId,this.value);}  }
class C{  public void clearCurrentItem(){  currentItem=null;}  }
class C{  void unpin(){  internalLock.writeLock().lock();  try {    pins--;  }  finally {    internalLock.writeLock().unlock();  }}  }
class C{  public InvalidDescriptionException(final Throwable cause){  super("Invalid plugin.yml",cause);}  }
class C{  public static StatefulHash createStateful(HashParameters params){  return HashProviders.best(params).createStateful(params);}  }
class C{  public double[] unCompress(byte[] compInput){  try {    return Snappy.uncompressDoubleArray(compInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return null;}  }
class C{  private URI parseUri(String url,String defaultPath) throws URISyntaxException {  if (url.matches("^http:|^https:")) {    throw new URISyntaxException(url,"HTTP/HTTPS is not supported, please use ws or wss instead");  }  if (url.matches("^//")) {    url="ws:" + url;  } else   if (!url.matches("^ws:|^wss:")) {    url="ws://" + url;  }  URI uri=new URI(url);  if (uri.getPath().equals("")) {    uri=uri.resolve(defaultPath);  }  return uri;}  }
class C{  public String encodeAsString(){  StringBuilder sb=new StringBuilder();  sb.append(connectionName);  sb.append(DELIMETER);  sb.append(url);  sb.append(DELIMETER);  sb.append(userName);  sb.append(DELIMETER);  sb.append(password);  return sb.toString();}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public ExtractionFilter withExtractionFunction(ExtractionFunction extractionFunction){  return new ExtractionFilter(getDimension(),value,extractionFunction);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  ClassificationViewer classificationViewer=(ClassificationViewer)((Director)getDir()).getViewerByClassName(cName);  if (classificationViewer == null) {    try {      classificationViewer=new ClassificationViewer((Director)getDir(),ClassificationManager.get(cName,true),true);      getDir().addViewer(classificationViewer);    } catch (    Exception e) {      Basic.caught(e);    }  }  if (classificationViewer != null) {    classificationViewer.updateView(Director.ALL);    classificationViewer.getFrame().setVisible(true);    classificationViewer.getFrame().setState(JFrame.NORMAL);    classificationViewer.getFrame().toFront();  }}  }
class C{  public String fileName(){  return tblName + ".tbl";}  }
class C{  public StreamReaderDelegate(){}  }
class C{  public void anonymize(){  for (int i=theAtts.getLength() - 1; i >= 0; i--) {    if (theAtts.getType(i).equals("ID") || theAtts.getQName(i).equals("name")) {      theAtts.removeAttribute(i);    }  }}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  private void requestInputMethod(Dialog dialog){  Window window=dialog.getWindow();  window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);}  }
class C{  public ArraySet(ArraySet<E> set){  this();  if (set != null) {    addAll(set);  }}  }
class C{  private static void verify(InvocationConstraint[] constraints) throws InvalidObjectException {  if (constraints == null) {    throw new InvalidObjectException("array cannot be null");  }  for (int i=constraints.length; --i >= 0; ) {    InvocationConstraint c=constraints[i];    if (c == null) {      throw new InvalidObjectException("elements cannot be null");    } else     if (Constraint.contains(constraints,i,c)) {      throw new InvalidObjectException("cannot create constraint with redundant elements");    }  }}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=InfiniteViewPager.FakePositionHelper.getAdapterSize(mViewPager);    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public void onContextChanged(Context context){  mScroller=new StackScroller(context);  mContext=context;}  }
class C{  public void addStatement(Statement s){  s.setIndex(sl.size());  sl.add(s);  s.setMethod(this);  if (s instanceof Return) {    rs.add((Return)s);  }  if (s instanceof MethodCall) {    MethodCall mc=(MethodCall)s;    mc.getTarget().sites.add(mc);  }}  }
class C{  static String generateErrorCorrection(CharSequence dataCodewords,int errorCorrectionLevel){  int k=getErrorCorrectionCodewordCount(errorCorrectionLevel);  char[] e=new char[k];  int sld=dataCodewords.length();  for (int i=0; i < sld; i++) {    int t1=(dataCodewords.charAt(i) + e[e.length - 1]) % 929;    int t2;    int t3;    for (int j=k - 1; j >= 1; j--) {      t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][j]) % 929;      t3=929 - t2;      e[j]=(char)((e[j - 1] + t3) % 929);    }    t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][0]) % 929;    t3=929 - t2;    e[0]=(char)(t3 % 929);  }  StringBuilder sb=new StringBuilder(k);  for (int j=k - 1; j >= 0; j--) {    if (e[j] != 0) {      e[j]=(char)(929 - e[j]);    }    sb.append(e[j]);  }  return sb.toString();}  }
class C{  private void initView(View v){  StatusBarView statusBar=(StatusBarView)v.findViewById(R.id.fragment_home_statusBar);  if (DisplayUtils.isNeedSetStatusBarMask()) {    statusBar.setBackgroundResource(R.color.colorPrimary_light);    statusBar.setMask(true);  }  this.container=(CoordinatorLayout)v.findViewById(R.id.fragment_home_container);  this.appBar=(AppBarLayout)v.findViewById(R.id.fragment_home_appBar);  this.toolbar=(Toolbar)v.findViewById(R.id.fragment_home_toolbar);  if (Mysplash.getInstance().isLightTheme()) {    toolbar.inflateMenu(R.menu.fragment_home_toolbar_light);    toolbar.setNavigationIcon(R.drawable.ic_toolbar_menu_light);  } else {    toolbar.inflateMenu(R.menu.fragment_home_toolbar_dark);    toolbar.setNavigationIcon(R.drawable.ic_toolbar_menu_dark);  }  toolbar.setOnMenuItemClickListener(this);  toolbar.setNavigationOnClickListener(this);  toolbar.setOnClickListener(this);  initPages(v);}  }
class C{  private boolean canDisbandLegion(Player activePlayer,Legion legion){  if (legion == null) {    return false;  }  if (!isBrigadeGeneral(activePlayer)) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_DISPERSE_ONLY_MASTER_CAN_DISPERSE);    return false;  } else   if (legion.getLegionWarehouse().size() > 0) {    return false;  } else   if (legion.isDisbanding()) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_DISPERSE_ALREADY_REQUESTED);    return false;  } else   if (legion.getLegionWarehouse().size() > 0) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_DISPERSE_CANT_DISPERSE_GUILD_STORE_ITEM_IN_WAREHOUSE);    return false;  }  return true;}  }
class C{  public SingleLinkClusterer(){  ClusteringsInTime=new ArrayList();  Hierarchy=new UniqueVertexGraph();}  }
class C{  public NewsfeedDeleteBanQuery(VkApiClient client,UserActor actor){  super(client,"newsfeed.deleteBan",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  protected Object rdbGenericLoadStringObject(boolean encode) throws IOException {  Len lenObj=rdbLoadLen();  int len=lenObj.len;  boolean isencoded=lenObj.isencoded;  if (isencoded) {switch (len) {case REDIS_RDB_ENC_INT8:case REDIS_RDB_ENC_INT16:case REDIS_RDB_ENC_INT32:      return rdbLoadIntegerObject(len,encode);case REDIS_RDB_ENC_LZF:    return rdbLoadLzfStringObject(encode);default :  throw new AssertionError("Unknown RdbParser encoding type:" + len);}}byte[] bytes;return encode ? new EncodedString(new String(bytes=in.readBytes(len),Constants.CHARSET),bytes) : in.readBytes(len);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public MultiCatch fullCopy(){  MultiCatch tree=(MultiCatch)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private MatchQuery reasonMatchQuery(MatchQuery query){  if (!reasoner.getRules().isEmpty()) {    return reasoner.resolveToQuery(query);  } else {    return query;  }}  }
class C{  @Override public boolean canReceiveEventsFromTable(String table){  return _permissionCheckCache != null ? _permissionCheckCache.getUnchecked(new OwnerTableCacheKey(_ownerId,table)) : ownerCanReadTable(_ownerId,table);}  }
class C{  public String toString(int w,int d){  DecimalFormat format=new DecimalFormat();  format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));  format.setMinimumIntegerDigits(1);  format.setMaximumFractionDigits(d);  format.setMinimumFractionDigits(d);  format.setGroupingUsed(false);  w+=2;  String s;  String result="";  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      s=format.format(A[i][j]);      int padding=Math.max(1,w - result.length());      result+=s;      for (int k=0; k < padding; k++)       result+=" ";    }    result+="\n";  }  return result;}  }
class C{  public void resetRowSelection(){  if (!updatingListSelectionModel) {    updatingListSelectionModel=true;    try {      super.resetRowSelection();    }  finally {      updatingListSelectionModel=false;    }  }}  }
class C{  public static String fixedWidthIntegertoString(int n,int w){  String s=Integer.toString(n);  while (s.length() < w) {    s=" " + s;  }  return s;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Silence_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200589,skillcaster,skillname);}  }
class C{  public Level(EntityLivingBase entityLiving,Enchantment enchantment,ItemStack heldItem,int level){  this.entityLiving=entityLiving;  this.enchantment=enchantment;  this.heldItem=heldItem;  this.level=level;}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  @Nullable public Boolean isDebuggable(){  AndroidModel androidModel=myFacet.getAndroidModel();  if (androidModel != null) {    Boolean debuggable=androidModel.isDebuggable();    if (debuggable != null) {      return debuggable;    }  }  return MergedManifest.get(myFacet).getApplicationDebuggable();}  }
class C{  public NGramDocumentComparatorAgent(){  super();}  }
class C{  void renamedElement(Element oldEl,Element newEl){}  }
class C{  public SynchronizedGrammarPool(XMLGrammarPool grammarPool){  fGrammarPool=grammarPool;}  }
class C{  public boolean isTrunkServer(){  return this.ifTrunkServer;}  }
class C{  SimplexTableau(final LinearObjectiveFunction f,final Collection<LinearConstraint> constraints,final GoalType goalType,final boolean restrictToNonNegative,final double epsilon,final int maxUlps) throws MathIllegalArgumentException {  checkDimensions(f,constraints);  this.f=f;  this.constraints=normalizeConstraints(constraints);  this.restrictToNonNegative=restrictToNonNegative;  this.epsilon=epsilon;  this.maxUlps=maxUlps;  this.numDecisionVariables=f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1);  this.numSlackVariables=getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);  this.numArtificialVariables=getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);  this.tableau=createTableau(goalType == GoalType.MAXIMIZE);  initializeBasicVariables(getSlackVariableOffset());  initializeColumnLabels();}  }
class C{  public void cleanUp(){  boolean performDeletion=true;  Collection<Instance> rolePlayers=rolePlayers().values();  rolePlayers.forEach(null);  this.getMappingCasting().forEach(null);  for (  Instance instance : rolePlayers) {    if (instance != null && (instance.getId() != null)) {      performDeletion=false;    }  }  if (performDeletion) {    delete();  }}  }
class C{  public static boolean isMajorRank(int rank){  return getInstance().majorRanks.get(rank);}  }
class C{  @Override public void stop(){}  }
class C{  public void updateDependencies(){  @SuppressWarnings("unchecked") SetMultimap<String,String> dependencies=(SetMultimap<String,String>)get(ATTR_DEPENDENCIES_MULTIMAP);  if (dependencies == null) {    dependencies=HashMultimap.create();  }  RepositoryUrlManager urlManager=RepositoryUrlManager.get();  Object fragmentsExtra=get(ATTR_FRAGMENTS_EXTRA);  Object navigationDrawerExtra=get(ATTR_NAVIGATION_DRAWER_EXTRA);  if ((fragmentsExtra != null && Boolean.parseBoolean(fragmentsExtra.toString())) || (navigationDrawerExtra != null && Boolean.parseBoolean(navigationDrawerExtra.toString()))) {    dependencies.put(SdkConstants.GRADLE_COMPILE_CONFIGURATION,urlManager.getLibraryStringCoordinate(SupportLibrary.SUPPORT_V4,true));  }  Object actionBarExtra=get(ATTR_ACTION_BAR_EXTRA);  if (actionBarExtra != null && Boolean.parseBoolean(actionBarExtra.toString())) {    dependencies.put(SdkConstants.GRADLE_COMPILE_CONFIGURATION,urlManager.getLibraryStringCoordinate(SupportLibrary.APP_COMPAT_V7,true));  }  Object gridLayoutExtra=get(ATTR_GRID_LAYOUT_EXTRA);  if (gridLayoutExtra != null && Boolean.parseBoolean(gridLayoutExtra.toString())) {    dependencies.put(SdkConstants.GRADLE_COMPILE_CONFIGURATION,urlManager.getLibraryStringCoordinate(SupportLibrary.GRID_LAYOUT_V7,true));  }  put(ATTR_DEPENDENCIES_MULTIMAP,dependencies);}  }
class C{  private void initConnectivity(){  if (!isConnectivityLayoutOverridden()) {    if (connectivityText == null) {      connectivityText=(TextView)connectivityView.findViewById(R.id.connectivity_text);    }  }  if (mReceiver == null) {    mReceiver=new NetworkReceiver(this);    mContext.registerReceiver(mReceiver,new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));  }}  }
class C{  public void apply(PhyloTree tree,Map<Integer,Node> taxId2Node){  for (  Edit edit : list) {switch (edit.type) {case Edit.APPEND:      if (taxId2Node.get(edit.taxId) != null)       System.err.println("Can't append node, taxId already present: " + edit.taxId); else       if (taxId2Node.get(edit.parentId) == null)       System.err.println("Can't append node, parentId not present: " + edit.parentId); else {        Node v=taxId2Node.get(edit.parentId);        if (v != null) {          Node w=tree.newNode();          tree.setInfo(w,edit.taxId);          tree.newEdge(v,w);          taxId2Node.put(edit.taxId,w);          System.err.println("Appended node " + edit.taxId + " below "+ edit.parentId);        }      }    break;case Edit.DELETE:  if (taxId2Node.get(edit.taxId) == null)   System.err.println("Can't delete node, taxId not present: " + edit.taxId); else {    Node v=taxId2Node.get(edit.taxId);    if (v != null) {      if (v.getInDegree() == 1) {        Node p=v.getFirstInEdge().getOpposite(v);        for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {          Node w=e.getOpposite(v);          tree.newEdge(p,w);        }        tree.deleteNode(v);        taxId2Node.remove(edit.taxId);        System.err.println("Removed node " + edit.taxId);      }    }  }break;case Edit.RENAME:break;default :System.err.println("Unknown edit type: " + edit.type);break;}}}  }
class C{  void flushAll(){  for (  Buffer buff : bufferPool) {    try {      buff.getExternalLock().lock();      buff.flush();    }  finally {      buff.getExternalLock().unlock();    }  }}  }
class C{  protected LinkedHashSet<Dimension> generateDimensions(List<PathSegment> apiDimensions,DimensionDictionary dimensionDictionary) throws BadApiRequestException {  if (apiDimensions == null || apiDimensions.isEmpty()) {    return new LinkedHashSet<>();  }  List<String> dimApiNames=apiDimensions.stream().map(null).filter(null).collect(Collectors.toList());  LinkedHashSet<Dimension> generated=new LinkedHashSet<>();  List<String> invalidDimensions=new ArrayList<>();  for (  String dimApiName : dimApiNames) {    Dimension dimension=dimensionDictionary.findByApiName(dimApiName);    if (dimension == null) {      invalidDimensions.add(dimApiName);    } else {      generated.add(dimension);    }  }  if (!invalidDimensions.isEmpty()) {    LOG.debug(DIMENSIONS_UNDEFINED.logFormat(invalidDimensions.toString()));    throw new BadApiRequestException(DIMENSIONS_UNDEFINED.format(invalidDimensions.toString()));  }  LOG.trace("Generated set of dimension: {}",generated);  return generated;}  }
class C{  @Override public void printStackTrace(PrintWriter pw){  super.printStackTrace(pw);  if (nested != null)   nested.printStackTrace(pw);}  }
class C{  public static boolean isSame(Displacement defaultDisplacement,Displacement displacement){  if ((defaultDisplacement != null) && (displacement != null)) {    return areDoubleValuesSame(defaultDisplacement.getDisplacementX(),displacement.getDisplacementX()) && areDoubleValuesSame(defaultDisplacement.getDisplacementY(),displacement.getDisplacementY());  }  return false;}  }
class C{  public Expression isEmpty(Value target){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public static boolean isConnectedWifi(Context context){  NetworkInfo info=NetworkUtil.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);}  }
class C{  public PlacesGetCheckinsQuery needPlaces(Boolean value){  return unsafeParam("need_places",value);}  }
class C{  public static String grabLastInLinePassedScore(String text,String key) throws IOException {  int scorePos=text.indexOf("Score");  if (scorePos == -1)   throw new IOException("Token not found: 'Score'");  int end=text.lastIndexOf(key);  if (end == -1)   throw new IOException("Token not found: '" + key + "'");  if (end < scorePos)   throw new IOException("Token not found before 'Score': '" + key + "'");  end=text.indexOf("\n",end);  if (end == -1)   end=text.length() - 1;  while (end > 0 && Character.isWhitespace(text.charAt(end)))   end--;  int start=end;  while (start > 0 && !Character.isWhitespace(text.charAt(start)))   start--;  start+=1;  return text.substring(start,end + 1);}  }
class C{  public VideoAddToAlbumQuery targetId(Integer value){  return unsafeParam("target_id",value);}  }
class C{  protected static void parseAndIgnoreWhitespace(final String source,final ParsePosition pos){  parseNextCharacter(source,pos);  pos.setIndex(pos.getIndex() - 1);}  }
class C{  @Override public boolean equals(Object object){  if (object == this) {    return true;  }  if (object instanceof StreamingStatistics == false) {    return false;  }  StreamingStatistics other=(StreamingStatistics)object;  return other.getN() == getN() && Precision.equalsIncludingNaN(other.getMax(),getMax()) && Precision.equalsIncludingNaN(other.getMin(),getMin()) && Precision.equalsIncludingNaN(other.getSum(),getSum()) && Precision.equalsIncludingNaN(other.getGeometricMean(),getGeometricMean()) && Precision.equalsIncludingNaN(other.getMean(),getMean()) && Precision.equalsIncludingNaN(other.getSumOfSquares(),getSumOfSquares()) && Precision.equalsIncludingNaN(other.getSumOfLogs(),getSumOfLogs()) && Precision.equalsIncludingNaN(other.getVariance(),getVariance());}  }
class C{  public static boolean isSuitableAttribute(SampleAttributeTable sampleAttributeTable,String attribute){  if (sampleAttributeTable.isSecretAttribute(attribute) || sampleAttributeTable.isHiddenAttribute(attribute))   return false;  boolean ok=true;  Map<Object,Integer> value2count=new HashMap<>();  for (  String sample : sampleAttributeTable.getSampleOrder()) {    Object value=sampleAttributeTable.get(sample,attribute);    if (value == null) {      ok=false;      break;    } else {      Integer count=value2count.get(value);      if (count == null)       value2count.put(value,1); else       value2count.put(value,count + 1);    }  }  if (ok) {    for (    Integer count : value2count.values()) {      if (count < 2) {        ok=false;        break;      }    }  }  return ok;}  }
class C{  ThreadPool(ThreadGroup threadGroup){  this.threadGroup=threadGroup;}  }
class C{  @Override public boolean hasNext(){  return hasNextLine();}  }
class C{  public void testGetDecisionTables() throws Exception {  try {    DmnDeployment firstDeployment=dmnRepositoryService.createDeployment().name("Deployment 1").addClasspathResource("org/activiti/rest/dmn/service/api/repository/simple.dmn").category("cat one").deploy();    DmnDeployment secondDeployment=dmnRepositoryService.createDeployment().name("Deployment 2").addClasspathResource("org/activiti/rest/dmn/service/api/repository/simple.dmn").category("cat two").addClasspathResource("org/activiti/rest/dmn/service/api/repository/simple-2.dmn").deploy();    DecisionTable firstDecision=dmnRepositoryService.createDecisionTableQuery().decisionTableKey("decision").deploymentId(firstDeployment.getId()).singleResult();    DecisionTable latestDecision=dmnRepositoryService.createDecisionTableQuery().decisionTableKey("decision").deploymentId(secondDeployment.getId()).singleResult();    DecisionTable decisionTwo=dmnRepositoryService.createDecisionTableQuery().decisionTableKey("decisionTwo").deploymentId(secondDeployment.getId()).singleResult();    String baseUrl=DmnRestUrls.createRelativeResourceUrl(DmnRestUrls.URL_DECISION_TABLE_COLLETION);    assertResultsPresentInDataResponse(baseUrl,firstDecision.getId(),decisionTwo.getId(),latestDecision.getId());    String url=baseUrl + "?name=" + encode("Full Decision Two");    assertResultsPresentInDataResponse(url,decisionTwo.getId());    url=baseUrl + "?nameLike=" + encode("Full Decision Tw%");    assertResultsPresentInDataResponse(url,decisionTwo.getId());    url=baseUrl + "?key=decisionTwo";    assertResultsPresentInDataResponse(url,decisionTwo.getId());    url=baseUrl + "?key=decision";    assertResultsPresentInDataResponse(url,firstDecision.getId(),latestDecision.getId());    url=baseUrl + "?keyLike=" + encode("%Two");    assertResultsPresentInDataResponse(url,decisionTwo.getId());    url=baseUrl + "?resourceName=org/activiti/rest/dmn/service/api/repository/simple-2.dmn";    assertResultsPresentInDataResponse(url,decisionTwo.getId());    url=baseUrl + "?resourceNameLike=" + encode("%simple-2%");    assertResultsPresentInDataResponse(url,decisionTwo.getId());    url=baseUrl + "?version=2";    assertResultsPresentInDataResponse(url,latestDecision.getId());    url=baseUrl + "?latest=true";    assertResultsPresentInDataResponse(url,latestDecision.getId(),decisionTwo.getId());    url=baseUrl + "?latest=false";    assertResultsPresentInDataResponse(baseUrl,firstDecision.getId(),latestDecision.getId(),decisionTwo.getId());    url=baseUrl + "?deploymentId=" + secondDeployment.getId();    assertResultsPresentInDataResponse(url,latestDecision.getId(),decisionTwo.getId());  }  finally {    List<DmnDeployment> deployments=dmnRepositoryService.createDeploymentQuery().list();    for (    DmnDeployment deployment : deployments) {      dmnRepositoryService.deleteDeployment(deployment.getId());    }  }}  }
class C{  public Querier encrypt() throws InterruptedException, PIRException {  int numThreads=SystemConfiguration.getIntProperty("numThreads",1);  return encrypt(numThreads);}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (object instanceof JSONArray) {    ((JSONArray)object).put(value);  } else {    this.put(key,new JSONArray().put(object).put(value));  }  return this;}  }
class C{  public char next(char c){  char n=next();  if (n != c) {    throw syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostHealEffect_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200843,skillcaster,skillname);}  }
class C{  public void showSymbolizerButtons(){  overallEnableSymbolizersOverride=true;}  }
class C{  public boolean closeDatabase(String dbfile){  if (databases.get(dbfile) != null) {    SQLiteDatabase db=(SQLiteDatabase)databases.get(dbfile);    db.close();    databases.remove(dbfile);    return true;  }  return false;}  }
class C{  @Override protected void onImpact(RayTraceResult result){  if (result.entityHit != null) {    if (result.entityHit instanceof EntityLivingBase) {      result.entityHit.attackEntityFrom(DamageSource.causeThrownDamage(this,result.entityHit),potency);    }  }  for (int j=0; j < 8; ++j) {    Roots.proxy.spawnParticleMagicAuraFX(worldObj,this.posX,this.posY,this.posZ,0,0,0,255,255,255);  }  if (!this.worldObj.isRemote) {    this.setDead();  }}  }
class C{  public boolean isUptoDate(){  return this.uptodate;}  }
class C{  public SimpleXMLParser() throws ParserConfigurationException {  builder=DocumentBuilderFactoryImpl.newInstance().newDocumentBuilder();}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  public int readInt() throws IOException {  if (ins.read(bytes,0,4) < 4)   throw new IOException("buffer underflow");  return (((int)bytes[0] & 0xFF)) | (((int)bytes[1] & 0xFF) << 8) | (((int)bytes[2] & 0xFF) << 16)| (((int)bytes[3]) << 24);}  }
class C{  public static void applyDrawableToImageView(Drawable drawable,ImageView view,int color){  drawable.mutate().setColorFilter(color,PorterDuff.Mode.MULTIPLY);  view.setImageDrawable(drawable);}  }
class C{  public static Map<String,Object> migrateWorkEffortEventReminders(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  Locale locale=(Locale)context.get("locale");  ModelEntity modelEntity=delegator.getModelEntity("WorkEffortEventReminder");  if (modelEntity != null && modelEntity.getField("recurrenceOffset") != null) {    List<GenericValue> eventReminders=null;    try {      eventReminders=EntityQuery.use(delegator).from("WorkEffortEventReminder").queryList();      for (      GenericValue reminder : eventReminders) {        if (UtilValidate.isNotEmpty(reminder.get("recurrenceOffset"))) {          reminder.set("reminderOffset",reminder.get("recurrenceOffset"));          reminder.store();        }      }    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"WorkEffortEventRemindersMigrationError",UtilMisc.toMap("errorString",e),locale));    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public int append_file(String group_name,String appender_filename,String local_filename) throws IOException, MyException {  File f=new File(local_filename);  FileInputStream fis=new FileInputStream(f);  try {    return this.do_append_file(group_name,appender_filename,f.length(),new UploadStream(fis,f.length()));  }  finally {    fis.close();  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set colorMatchesVsConsensus=");  boolean value=np.getBoolean();  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.getAlignmentViewerPanel().getAlignmentPanel().setColorMatchesVsConsensus(value);  ProgramProperties.put("ColorMatchesVsConsensus",value);  viewer.repaint();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  if (LitePalParser.NODE_DB_NAME.equalsIgnoreCase(localName)) {    for (int i=0; i < attributes.getLength(); i++) {      if (LitePalParser.ATTR_VALUE.equalsIgnoreCase(attributes.getLocalName(i))) {        litePalAttr.setDbName(attributes.getValue(i).trim());      }    }  } else   if (LitePalParser.NODE_VERSION.equalsIgnoreCase(localName)) {    for (int i=0; i < attributes.getLength(); i++) {      if (LitePalParser.ATTR_VALUE.equalsIgnoreCase(attributes.getLocalName(i))) {        litePalAttr.setVersion(Integer.parseInt(attributes.getValue(i).trim()));      }    }  } else   if (LitePalParser.NODE_MAPPING.equalsIgnoreCase(localName)) {    for (int i=0; i < attributes.getLength(); i++) {      if (LitePalParser.ATTR_CLASS.equalsIgnoreCase(attributes.getLocalName(i))) {        litePalAttr.addClassName(attributes.getValue(i).trim());      }    }  } else   if (LitePalParser.NODE_CASES.equalsIgnoreCase(localName)) {    for (int i=0; i < attributes.getLength(); i++) {      if (LitePalParser.ATTR_VALUE.equalsIgnoreCase(attributes.getLocalName(i))) {        litePalAttr.setCases(attributes.getValue(i).trim());      }    }  }}  }
class C{  private static void handleJavaResources(@NotNull Module module,@NotNull AndroidGradleModel androidModel,@NotNull PathsList classPath){  CompilerManager compilerManager=CompilerManager.getInstance(module.getProject());  CompileScope scope=compilerManager.createModulesCompileScope(new Module[]{module},true,true);  JavaArtifact testArtifact=androidModel.getUnitTestArtifactInSelectedVariant();  if (testArtifact != null) {    try {      classPath.add(testArtifact.getJavaResourcesFolder());    } catch (    UnsupportedMethodException ignored) {    }  }  FileRootSearchScope excludeScope=null;  TestArtifactSearchScopes testScopes=TestArtifactSearchScopes.get(module);  if (testScopes != null) {    excludeScope=testScopes.getUnitTestExcludeScope();  }  for (  Module affectedModule : scope.getAffectedModules()) {    AndroidFacet facet=AndroidFacet.getInstance(affectedModule);    if (facet != null) {      AndroidGradleModel affectedAndroidModel=AndroidGradleModel.get(facet);      if (affectedAndroidModel != null) {        try {          File resourceFolder=affectedAndroidModel.getMainArtifact().getJavaResourcesFolder();          if (excludeScope != null && excludeScope.accept(resourceFolder)) {            continue;          }          classPath.add(resourceFolder);        } catch (        UnsupportedMethodException ignored) {        }      }    }  }}  }
class C{  public void createPage(String parentPath,String title,String template) throws IOException {  triggerAction(Maps.newHashMap(new ImmutableMap.Builder<String,String>().put(CMD_PROPERTY,CREATE_PAGE_COMMAND).put(CHARSET_PROPERTY,UTF_8).put(PARENT_PATH_PROPERTY,parentPath).put(TITLE_PROPERTY,title).put(TEMPLATE_PROPERTY,template).build()),WCM_COMMAND_URL,PAGE_CREATED_SUCCESS_MESSAGE);}  }
class C{  private void scheduleValueProcessing(ValuePropagationTask vpt){  if (executor.isTerminating())   return;  executor.execute(vpt);}  }
class C{  public static Map<String,Object> createContent(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=createContentMethod(dctx,context);  return result;}  }
class C{  public static void init(String dirName){  init(dirName,BufferMgrType.DefaultBufferMgr);}  }
class C{  public boolean isSpring(){  return this.frequency > 0.0;}  }
class C{  private void createBaseNode() throws KeeperException, InterruptedException {  if (null == zk.exists(zooKeeperLocation,true)) {    zk.create(zooKeeperLocation,new byte[1],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonSkillArea_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201149,skillcaster,skillname);}  }
class C{  public CollapsedSubtreeLayout(String group,int orientation){  super(group);  m_orientation=orientation;}  }
class C{  public static String S2T(String text){  char[] chars=text.toCharArray();  for (int i=0; i < chars.length; i++) {    Character replacement=s2t.get(chars[i]);    if (replacement != null) {      chars[i]=replacement;    }  }  return new String(chars);}  }
class C{  public AemParsys removeNthComponentOfType(Class<?> componentClass,int n){  WebElement webElement=getComponentScope(componentClass,n);  clickDeleteInContextMenu(webElement);  wait.withTimeout(Timeouts.SMALL).until(ExpectedConditions.stalenessOf(webElement));  return this;}  }
class C{  public RedisStore(String storeName,JedisPool pool,String redisNamespace){  this.pool=pool;  this.storeName=storeName;  this.redisIsHealthy=true;  this.redisNamespace=redisNamespace;  open();}  }
class C{  public static BigInteger signedMessageToKey(byte[] message,SignatureData signatureData) throws SignatureException {  int header=signatureData.getV() & 0xFF;  if (header < 27 || header > 34)   throw new SignatureException("Header byte out of range: " + header);  BigInteger r=new BigInteger(1,signatureData.getR());  BigInteger s=new BigInteger(1,signatureData.getS());  ECDSASignature sig=new ECDSASignature(r,s);  byte[] messageHash=Hash.sha3(message);  int recId=header - 27;  BigInteger key=recoverFromSignature(recId,sig,messageHash);  if (key == null)   throw new SignatureException("Could not recover public key from signature");  return key;}  }
class C{  public TableScan(TableInfo ti,Transaction tx){  rf=ti.open(tx,true);  schema=ti.schema();}  }
class C{  public void clear(){  super.clear();  short[] keys=_set;  long[] vals=_values;  byte[] states=_states;  Arrays.fill(_set,0,_set.length,(short)0);  Arrays.fill(_values,0,_values.length,(long)0);  Arrays.fill(_states,0,_states.length,FREE);}  }
class C{  public DOMASBuilderImpl(SymbolTable symbolTable,XMLGrammarPool grammarPool){  super(new XMLGrammarCachingConfiguration(symbolTable,grammarPool));}  }
class C{  public void drawFrame(int textureId,float[] texMatrix){  program.draw(GlUtil.IDENTITY_MATRIX,rectDrawable.getVertexArray(),0,rectDrawable.getVertexCount(),rectDrawable.getCoordsPerVertex(),rectDrawable.getVertexStride(),texMatrix,rectDrawable.getTexCoordArray(),textureId,rectDrawable.getTexCoordStride());}  }
class C{  public void addServiceName(String name){  if (name != null) {    this.serviceNameSet.add(name);  }}  }
class C{  private PokemonCalculationUtils(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Slow_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200926,skilltarget,skillcaster,skillname);}  }
class C{  private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  private void unknownPacket(State state,int id,ByteBuffer data){  if (NetworkConfig.DISPLAY_UNKNOWNPACKETS) {    log.warn(String.format("Unknown packet received from Aion client: 0x%04X, state=%s %n%s",id,state.toString(),Util.toHex(data)));  }}  }
class C{  static private int[] worstIndices(double[] x,double propKept){  if (propKept == 0)   return null;  int n=x.length;  int numNeg=0;  for (  double aX1 : x)   if (aX1 < 0.0)   numNeg++;  if (numNeg == 0)   return null;  double[] xcopy=new double[numNeg];  int j=0;  for (  double aX : x)   if (aX < 0.0)   xcopy[j++]=aX;  Arrays.sort(xcopy);  int nkept=(int)Math.ceil(propKept * numNeg);  double cutoff=xcopy[nkept - 1];  int[] result=new int[nkept];  int front=0, back=nkept - 1;  for (int i=0; i < n; i++) {    if (x[i] < cutoff)     result[front++]=i; else     if (x[i] == cutoff) {      if (back >= front)       result[back--]=i;    }  }  return result;}  }
class C{  public static String elementValue(Element element){  if (element == null)   return null;  element.normalize();  Node textNode=element.getFirstChild();  if (textNode == null)   return null;  StringBuilder valueBuffer=new StringBuilder();  do {    if (textNode.getNodeType() == Node.CDATA_SECTION_NODE || textNode.getNodeType() == Node.TEXT_NODE) {      valueBuffer.append(textNode.getNodeValue());    }  } while ((textNode=textNode.getNextSibling()) != null);  return valueBuffer.toString();}  }
class C{  public static boolean begin(int timeout) throws GenericTransactionException {  UserTransaction ut=TransactionFactoryLoader.getInstance().getUserTransaction();  if (ut != null) {    try {      int currentStatus=ut.getStatus();      if (Debug.verboseOn()) {        Debug.logVerbose("Current status : " + getTransactionStateString(currentStatus),module);      }      if (currentStatus == Status.STATUS_ACTIVE) {        if (Debug.verboseOn()) {          Debug.logVerbose("Active transaction in place, so no transaction begun",module);        }        return false;      } else       if (currentStatus == Status.STATUS_MARKED_ROLLBACK) {        Exception e=getTransactionBeginStack();        if (e != null) {          Debug.logWarning(e,"Active transaction marked for rollback in place, so no transaction begun; this stack trace shows when the exception began: ",module);        } else {          Debug.logWarning("Active transaction marked for rollback in place, so no transaction begun",module);        }        RollbackOnlyCause roc=getSetRollbackOnlyCause();        if (UtilValidate.isNotEmpty(roc)) {          throw new GenericTransactionException("The current transaction is marked for rollback, not beginning a new transaction and aborting current operation; the rollbackOnly was caused by: " + roc.getCauseMessage(),roc.getCauseThrowable());        } else {          return false;        }      }      internalBegin(ut,timeout);      clearTransactionStamps();      getTransactionStartStamp();      setTransactionBeginStack();      if (debugResources()) {        DebugXaResource dxa=new DebugXaResource();        try {          dxa.enlist();        } catch (        XAException e) {          Debug.logError(e,module);        }      }      return true;    } catch (    NotSupportedException e) {      throw new GenericTransactionException("Not Supported error, could not begin transaction (probably a nesting problem)",e);    }catch (    SystemException e) {      throw new GenericTransactionException("System error, could not begin transaction",e);    }  } else {    if (Debug.infoOn())     Debug.logInfo("No user transaction, so no transaction begun",module);    return false;  }}  }
class C{  public static Vector3f sphericalToCartesian(Vector3f sphereCoords,Vector3f store){  store.y=sphereCoords.x * FastMath.sin(sphereCoords.z);  float a=sphereCoords.x * FastMath.cos(sphereCoords.z);  store.x=a * FastMath.cos(sphereCoords.y);  store.z=a * FastMath.sin(sphereCoords.y);  return store;}  }
class C{  public static void main(String[] args){  try {    ProgramProperties.setProgramName("DAA2RMA");    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);    PeakMemoryUsageMonitor.start();    (new DAA2RMA6()).run(args);    System.err.println("Total time:  " + PeakMemoryUsageMonitor.getSecondsSinceStartString());    System.err.println("Peak memory: " + PeakMemoryUsageMonitor.getPeakUsageString());    System.exit(0);  } catch (  Exception ex) {    Basic.caught(ex);    System.exit(1);  }}  }
class C{  public void attachPrevious(NlComponent previous,NlComponent node){  removeRelativeParams(node);  String id=previous.getId();  if (StringUtil.isEmpty(id)) {    return;  }  if (myCurrentTopMatch != null || myCurrentBottomMatch != null) {    node.setAttribute(ANDROID_URI,myCurrentTopMatch != null ? ATTR_LAYOUT_BELOW : ATTR_LAYOUT_ABOVE,id);    if (myCurrentLeftMatch != null) {      applyConstraint(node,myCurrentLeftMatch.getConstraint(true));      applyMargin(node,ATTR_LAYOUT_MARGIN_LEFT,myLeftMargin);    } else     if (myCurrentRightMatch != null) {      applyConstraint(node,myCurrentRightMatch.getConstraint(true));      applyMargin(node,ATTR_LAYOUT_MARGIN_RIGHT,myRightMargin);    }  } else   if (myCurrentLeftMatch != null || myCurrentRightMatch != null) {    node.setAttribute(ANDROID_URI,myCurrentLeftMatch != null ? ATTR_LAYOUT_TO_RIGHT_OF : ATTR_LAYOUT_TO_LEFT_OF,id);    if (myCurrentTopMatch != null) {      applyConstraint(node,myCurrentTopMatch.getConstraint(true));      applyMargin(node,ATTR_LAYOUT_MARGIN_TOP,getTopMarginDp());    } else     if (myCurrentBottomMatch != null) {      applyConstraint(node,myCurrentBottomMatch.getConstraint(true));      applyMargin(node,ATTR_LAYOUT_MARGIN_BOTTOM,getBottomMarginDp());    }  }}  }
class C{  @Override public boolean equals(Object other){  return this == other || (other instanceof User && hashCode() == other.hashCode());}  }
class C{  protected Session createSession(final CredentialsProvider credentialsProvider,final OpenSshConfig.Host hc,final String user,final String host,final int port,FS fs) throws JSchException {  Session session=getJSch(credentialsProvider,hc,fs).getSession(user,host,port);  Properties config=new Properties();  config.put("StrictHostKeyChecking","no");  session.setConfig(config);  return session;}  }
class C{  public LoadImplementor(LoadModel model,LoadView view){  this.model=model;  this.view=view;}  }
class C{  private static int res(String res){  int nextRes=lastRes++;  resources.put(nextRes,res);  return nextRes;}  }
class C{  public void copyRemoteResource(ISVNRemoteResource resource,ISVNRemoteFolder destinationFolder,String message,IProgressMonitor monitor) throws SVNException {  IProgressMonitor progress=Policy.monitorFor(monitor);  progress.beginTask(Policy.bind("RepositoryResourcesManager.copyRemoteResources"),100);  ISVNClientAdapter svnClient=null;  try {    svnClient=resource.getRepository().getSVNClient();    svnClient.copy(resource.getUrl(),destinationFolder.getUrl(),message,SVNRevision.HEAD);    destinationFolder.refresh();    remoteResourceCopied(resource,destinationFolder);  } catch (  SVNClientException e) {    throw SVNException.wrapException(e);  } finally {    resource.getRepository().returnSVNClient(svnClient);    progress.done();  }}  }
class C{  public void handleDecode(Result rawResult,Bundle bundle){  inactivityTimer.onActivity();  beepManager.playBeepSoundAndVibrate();  Intent resultIntent=new Intent();  bundle.putInt("width",mCropRect.width());  bundle.putInt("height",mCropRect.height());  bundle.putString("result",rawResult.getText());  resultIntent.putExtras(bundle);  this.setResult(RESULT_OK,resultIntent);  CaptureActivity.this.finish();}  }
class C{  private main(){}  }
class C{  public String toString(cp_info constant_pool[]){  CONSTANT_Utf8_info ci=(CONSTANT_Utf8_info)(constant_pool[name_index]);  return ci.convert();}  }
class C{  private Label createLabel(Composite parent,String text,int span,int horizontalIndent){  Label label=new Label(parent,SWT.LEFT);  label.setText(text);  GridData data=new GridData();  data.horizontalSpan=span;  data.horizontalAlignment=GridData.FILL;  data.horizontalIndent=horizontalIndent;  label.setLayoutData(data);  return label;}  }
class C{  public boolean isMaximumScaleUpdated(){  return maximumScaleUpdated;}  }
class C{  public static File toFile(URL url){  if (url == null || !"file".equalsIgnoreCase(url.getProtocol())) {    return null;  } else {    String filename=url.getFile().replace('/',File.separatorChar);    filename=decodeUrl(filename);    return new File(filename);  }}  }
class C{  public void showContent(){  for (int i=0; i < getChildCount(); i++) {    getChildAt(i).setVisibility(VISIBLE);  }}  }
class C{  public int addSplit(Split split){  nsplits++;  index2split.put(nsplits,split);  split2index.put(split,nsplits);  return nsplits;}  }
class C{  public AccountSetOnlineQuery voip(Boolean value){  return unsafeParam("voip",value);}  }
class C{  public void printSources(){  if (this.sourceSinkProvider == null) {    System.err.println("Sources not calculated yet");    return;  }  System.out.println("Sources:");  for (  SourceSinkDefinition am : getSources()) {    System.out.println(am.toString());  }  System.out.println("End of Sources");}  }
class C{  public UnknownEventException(String reason){  super(reason);}  }
class C{  public void cancel(Account account,OCFile file){  cancel(account.name,file.getRemotePath());}  }
class C{  public void addArg(Expr node){  List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();  list.addChild(node);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  Director dir=(Director)getDir();  MainViewer mainViewer=dir.getMainViewer();  ExtractReadsViewer viewer=(ExtractReadsViewer)getViewer();  JTextField outDirectory=viewer.getOutDirectory();  JTextField outFileTemplate=viewer.getOutFileTemplate();  StringBuilder buf=new StringBuilder();  buf.append("extract what=reads");  buf.append(" outdir='");  buf.append(outDirectory.getText()).append("'");  buf.append(" outfile='");  buf.append(outFileTemplate.getText()).append("'");  buf.append(" data=").append(viewer.getMode());  buf.append(" ids=");  if (viewer.getMode().equals(ClassificationType.Taxonomy.toString())) {    PhyloTree tree=mainViewer.getTree();    if (mainViewer.getSelectedNodes() == null || mainViewer.getSelectedNodes().size() == 0) {      NotificationsInSwing.showWarning(viewer.getFrame(),"Nothing to save, no nodes selected");      return;    }    for (Node v=tree.getFirstNode(); v != null; v=v.getNext()) {      if (mainViewer.getSelected(v)) {        Integer taxId=(Integer)v.getInfo();        buf.append(" ").append(taxId);      }    }  } else   if (ClassificationManager.getAllSupportedClassificationsExcludingNCBITaxonomy().contains(viewer.getMode())) {    boolean ok=false;    ClassificationViewer classificationViewer=(ClassificationViewer)dir.getViewerByClassName(viewer.getMode());    if (classificationViewer != null) {      Collection<Integer> selected=classificationViewer.getSelectedIds();      if (selected != null && selected.size() > 0) {        buf.append(Basic.toString(selected," "));        ok=true;      }    }    if (!ok) {      NotificationsInSwing.showWarning(viewer.getFrame(),"Must first select nodes in the " + viewer.getMode() + " viewer");      return;    }  }  buf.append(" allBelow=").append(viewer.isIncludeSummarized()).append(";");  ProgramProperties.put(MeganProperties.EXTRACT_OUTFILE_DIR,outDirectory.getText());  ProgramProperties.put(MeganProperties.EXTRACT_OUTFILE_TEMPLATE,outFileTemplate.getText());  execute(buf.toString());}  }
class C{  protected GroupExpression(String group){  m_group=new ObjectLiteral(group);}  }
class C{  private boolean isDiscovered(LookupLocator lct){  Iterator iter=discoveredLocators.iterator();  while (iter.hasNext()) {    LocatorReg reg=(LocatorReg)iter.next();    if (reg.l.equals(lct))     return true;  }  return false;}  }
class C{  public String process(Item seg) throws ProcessException {  return segOnsetCtype(seg,"n");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200351,skillname);}  }
class C{  public LinearRegression(float[] x,float[] y){  if (x.length != y.length) {    throw new IllegalArgumentException("array lengths are not equal");  }  N=x.length;  double sumx=0.0, sumy=0.0, sumx2=0.0;  for (int i=0; i < N; i++)   sumx+=x[i];  for (int i=0; i < N; i++)   sumx2+=x[i] * x[i];  for (int i=0; i < N; i++)   sumy+=y[i];  double xbar=sumx / N;  double ybar=sumy / N;  double xxbar=0.0, yybar=0.0, xybar=0.0;  for (int i=0; i < N; i++) {    xxbar+=(x[i] - xbar) * (x[i] - xbar);    yybar+=(y[i] - ybar) * (y[i] - ybar);    xybar+=(x[i] - xbar) * (y[i] - ybar);  }  beta=xybar / xxbar;  alpha=ybar - beta * xbar;  double rss=0.0;  double ssr=0.0;  for (int i=0; i < N; i++) {    double fit=beta * x[i] + alpha;    rss+=(fit - y[i]) * (fit - y[i]);    ssr+=(fit - ybar) * (fit - ybar);  }  int degreesOfFreedom=N - 2;  R2=ssr / yybar;  svar=rss / degreesOfFreedom;  svar1=svar / xxbar;  svar0=svar / N + xbar * xbar * svar1;}  }
class C{  public void startTransfer(int accountId,int targetAccountId,int playerId,byte targetServerId,int taskId){  boolean exist=false;  for (  int id : DAOManager.getDAO(PlayerDAO.class).getPlayerOidsOnAccount(accountId)) {    if (id == playerId) {      exist=true;      break;    }  }  if (!exist) {    log.warn("transfer #" + taskId + " player "+ playerId+ " is not present on account "+ accountId+ ".");    LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.TASK_STOP,taskId,"player " + playerId + " is not present on account "+ accountId));    return;  }  if (DAOManager.getDAO(LegionMemberDAO.class).isIdUsed(playerId)) {    log.warn("cannot transfer #" + taskId + " player with existing legion "+ playerId+ ".");    LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.TASK_STOP,taskId,"cannot transfer player with existing legion " + playerId));    return;  }  PlayerCommonData common=dao.loadPlayerCommonData(playerId);  if (common.isOnline()) {    log.warn("cannot transfer #" + taskId + " online players "+ playerId+ ".");    LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.TASK_STOP,taskId,"cannot transfer online players " + playerId));    return;  }  if (PlayerTransferConfig.REUSE_HOURS > 0 && common.getLastTransferTime() + PlayerTransferConfig.REUSE_HOURS * 3600000 > System.currentTimeMillis()) {    log.warn("cannot transfer #" + taskId + " that player so often "+ playerId+ ".");    LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.TASK_STOP,taskId,"cannot transfer that player so often " + playerId));    return;  }  Player player=PlayerService.getPlayer(playerId,AccountService.loadAccount(accountId));  long kinah=player.getInventory().getKinah() + player.getWarehouse().getKinah();  if (PlayerTransferConfig.MAX_KINAH > 0 && kinah >= PlayerTransferConfig.MAX_KINAH) {    log.warn("cannot transfer #" + taskId + " players with "+ kinah+ " kinah in inventory/wh.");    LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.TASK_STOP,taskId,"cannot transfer players with " + kinah + " kinah in inventory/wh."));    return;  }  if (BrokerService.getInstance().hasRegisteredItems(player)) {    log.warn("cannot transfer #" + taskId + " player while he own some items in broker.");    LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.TASK_STOP,taskId,"cannot transfer player while he own some items in broker."));    return;  }  TransferablePlayer tp=new TransferablePlayer(playerId,accountId,targetAccountId);  tp.player=player;  tp.targetServerId=targetServerId;  tp.accountId=accountId;  tp.targetAccountId=targetAccountId;  tp.taskId=taskId;  transfers.put(taskId,tp);  textLog.info("taskId:" + taskId + "; [StartTransfer]");  LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.CHARACTER_INFORMATION,tp));}  }
class C{  private void startWaveSouthernShieldGenerator1(){  sp(233724,337.93338f,257.88702f,292.43845f,(byte)60,1000,"SouthernShieldGenerator1");  sp(233725,338.05304f,254.6424f,292.3325f,(byte)60,1000,"SouthernShieldGenerator2");  sp(233883,338.13315f,251.34738f,292.48932f,(byte)59,1000,"SouthernShieldGenerator3");}  }
class C{  public AccountSaveProfileInfoQuery relation(AccountSaveProfileInfoRelation value){  return unsafeParam("relation",value);}  }
class C{  public static void main(String[] args) throws IOException, DataFormatException {  Compressor compression=new Compressor();  BufferedReader r=new BufferedReader(new InputStreamReader(System.in));  System.out.print("> ");  System.out.flush();  String inputString="";  String aLine;  while ((aLine=r.readLine()) != null) {    if (aLine.length() > 0) {      if (aLine.equals(".")) {        byte[] bytes=new byte[inputString.length() + 1000];        int numberOfBytes=compression.deflateString2ByteArray(inputString,bytes);        String outputString;        if (numberOfBytes < 0)         outputString=compression.inflateByteArray2String(-numberOfBytes,bytes); else         outputString=Compressor.convertUncompressedByteArray2String(numberOfBytes,bytes);        System.err.println("=<" + outputString + ">");        System.err.println("= " + outputString);        System.err.println("uncompressed: " + inputString.length());        System.err.println("compressed:   " + numberOfBytes);        System.err.println("decompressed: " + outputString.length());{          byte[] target=new byte[10 * bytes.length];          compression.inflateByteArray(-numberOfBytes,bytes,target);          System.err.println("decompressed bytes: " + Basic.toString(target));        }        inputString="";        System.out.print("> ");      } else {        inputString+=aLine + "\n";        System.out.print("? ");      }      System.out.flush();    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_OTHER_FRIENDLY(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1240222,skilltarget,skillcaster);}  }
class C{  public Builder clickable(Boolean clickable){  this.clickable=clickable;  return this;}  }
class C{  public GroupsGetQuery filter(GroupsGetFilter... value){  return unsafeParam("filter",value);}  }
class C{  protected Map<String,Object> filterItemValue(String entityName,Map<String,Object> itemValues){  ClassMetadata classMetadata=sessionFactory.getClassMetadata(entityName);  String[] propertyNames=classMetadata.getPropertyNames();  List<String> names=Arrays.asList(propertyNames);  Iterator<String> iterator=itemValues.keySet().iterator();  while (iterator.hasNext()) {    if (!names.contains(iterator.next()))     iterator.remove();  }  return itemValues;}  }
