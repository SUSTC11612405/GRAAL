class C{  String shorten(String javaName){  if (group != null) {    int lastDot=0;    String s1=javaName, s2=group.javaName + '.';    for (int i=0; i < s1.length() && i < s2.length(); i++) {      if (s1.charAt(i) != s2.charAt(i)) {        break;      } else       if (s1.charAt(i) == '.') {        lastDot=i;      }    }    if (lastDot > 0) {      javaName=javaName.substring(lastDot + 1);    }  }  return javaName;}  }
class C{  public static Dog maxDog(Dog d1,Dog d2){  if (d1.size >= d2.size)   return d1;  return d2;}  }
class C{  public String internalCacheSizeTipText(){  return "The size of the internal cache (a prime number).";}  }
class C{  public void recordState(DialogueState state,String name){  if (frame != null) {    stateMonitorTab.recordState(state,name);  }}  }
class C{  public boolean decodeLayer(final String name,final boolean isID){  if (layerCount == 0) {    return true;  }  boolean isLayerVisible=false;  String layerName=name;  if (isID) {    final String mappedName=streamToName.get(name);    if (mappedName != null) {      layerName=mappedName;    }  }  if (layerName == null) {    return false;  } else {    if (layerName.indexOf(',') == -1) {      isLayerVisible=layersEnabled.containsKey(layerName);      if (isLayerVisible) {        isLayerVisible=hiddenByParent(isLayerVisible,layerName);      }    } else {      final StringTokenizer names=new StringTokenizer(layerName,",");      while (names.hasMoreTokens()) {        final String nextName=names.nextToken();        isLayerVisible=layersEnabled.containsKey(nextName);        if (isLayerVisible) {          isLayerVisible=hiddenByParent(isLayerVisible,nextName);        }        if (isLayerVisible) {          break;        }      }    }    if (debug) {      System.out.println("[isVisible] " + name + " decode="+ isLayerVisible+ " enabled="+ layersEnabled+ " layerName="+ layerName+ " isEnabled="+ this.layersEnabled);    }    return isLayerVisible;  }}  }
class C{  @Override protected void fillBuffer(final IScope scope) throws GamaRuntimeException {  loadObject(scope,false);  setBuffer(GamaListFactory.<IShape>create(Types.GEOMETRY));  final IList<IShape> vertices=GamaListFactory.create(Types.POINT);  for (  final float[] coords : vertexSets) {    final GamaPoint pt=new GamaPoint(coords[0],-coords[1],coords[2]);    vertices.add(pt);  }  for (  final int[] vertexRefs : faces) {    final IList<IShape> face=GamaListFactory.<IShape>create(Types.POINT);    for (    final int vertex : vertexRefs) {      face.add(vertices.get(vertex - 1));      getBuffer().add(GamaGeometryType.buildPolygon(face));    }  }  envelope=new Envelope3D(leftpoint,rightpoint,bottompoint,toppoint,nearpoint,farpoint);}  }
class C{  public static String[] stripAll(String[] strs,String delimiter){  if ((strs == null) || (strs.length == 0)) {    return strs;  }  int sz=strs.length;  String[] newArr=new String[sz];  for (int i=0; i < sz; i++) {    newArr[i]=strip(strs[i],delimiter);  }  return newArr;}  }
class C{  private void addEdge(EscapeSet parentSet,EscapeSet childSet){  if (!childSet.parentSets.contains(parentSet)) {    childSet.parentSets.add(parentSet);  }  if (!parentSet.childSets.contains(childSet)) {    parentSet.childSets.add(childSet);  }}  }
class C{  private void updatePeriodFactorFirstSliceFirstValue(TimeSlice timeSlice,LinkedList<XParameterPeriodValue> valuesPerSlice){  XParameterPeriodValue firstPeriodValue=valuesPerSlice.getLast();  updateParameterPeriodFactor(timeSlice,firstPeriodValue,timeSlice.getStartAsCalendar(),parameterEndTimeForPeriodCalculation(timeSlice,firstPeriodValue));  valuesPerSlice.removeLast();}  }
class C{  public void keepSessionAlive(){  getAuthService().getUsername();}  }
class C{  public PointLatLon(final String s) throws NumberFormatException {  if (s == null || s.isEmpty()) {    throw new NumberFormatException("Point is null or empty.");  }  String[] coords=s.split(POINT_SEPARATOR);  if (coords.length != 2) {    throw new NumberFormatException("Point must have 2 components, but has " + coords.length);  }  this.point=new CoordinateDD(Double.valueOf(coords[0]),Double.valueOf(coords[1]));}  }
class C{  public static Instruction findInstruction(final View view,final IInstruction searchInstruction){  Preconditions.checkNotNull(view,"IE02056: View argument can not be null");  Preconditions.checkNotNull(searchInstruction,"IE02060: Instruction argument can not be null");  for (  final ViewNode node : view.getGraph().getNodes()) {    if (node instanceof CodeNode) {      final CodeNode codeNode=(CodeNode)node;      for (      final Instruction instruction : codeNode.getInstructions()) {        if (instruction.getNative() == searchInstruction) {          return instruction;        }      }    }  }  throw new IllegalStateException("IE01275: Could not determine what instruction could not be translated");}  }
class C{  public boolean isEmpty(){  for (  Model model : this) {    if (model != null) {      if (!model.isEmpty()) {        return false;      }    }  }  return true;}  }
class C{  public static double basicInterpolant(double interpolant,double startInterpolant,double stopInterpolant,int maxSmoothing){  double normalizedInterpolant=interpolantNormalized(interpolant,startInterpolant,stopInterpolant);  return interpolantSmoothed(normalizedInterpolant,maxSmoothing);}  }
class C{  public void pruneZeroCounts(){  int i=0;  while (i < rankedItems.size()) {    if (rankedItems.get(i).getCount() == 0) {      rankedItems.remove(i);    } else {      i++;    }  }}  }
class C{  public static void deployViews(Element rootElement){  Element metadataContextEl=rootElement.element("metadataContext");  if (metadataContextEl != null) {    AbstractViewRepository viewRepository=AppBeans.get(ViewRepository.NAME);    for (    Element fileEl : Dom4j.elements(metadataContextEl,"deployViews")) {      String resource=fileEl.attributeValue("name");      Resources resources=AppBeans.get(Resources.NAME);      InputStream resourceInputStream=resources.getResourceAsStream(resource);      if (resourceInputStream == null) {        throw new RuntimeException("View resource not found: " + resource);      }      try {        viewRepository.deployViews(resourceInputStream);      }  finally {        IOUtils.closeQuietly(resourceInputStream);      }    }    for (    Element viewEl : Dom4j.elements(metadataContextEl,"view")) {      viewRepository.deployView(metadataContextEl,viewEl);    }  }}  }
class C{  public boolean match(String string){  return strings.contains(string.trim());}  }
class C{  public void entityAdded(String type){  Long count=entityAddedCounts.get(type);  if (count == null) {    count=0L;  }  count++;  entityAddedCounts.put(type,count);  logger.trace("Entity of type {} added",type);}  }
class C{  protected String readRecordShapeType(ByteBuffer buffer){  buffer.order(ByteOrder.LITTLE_ENDIAN);  int type=buffer.getInt(buffer.position() + 2 * 4);  String shapeType=this.getShapeType(type);  if (shapeType == null) {    throw new WWRuntimeException(Logging.getMessage("SHP.UnsupportedShapeType",type));  }  return shapeType;}  }
class C{  public InstructionGraphNode(final ReilInstruction instruction){  if (instruction == null) {    throw new IllegalArgumentException("Error: Instruction argument can not be null");  }  this.instruction=instruction;}  }
class C{  public static boolean isFileURL(URL url){  String protocol=url.getProtocol();  return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) || URL_PROTOCOL_VFS.equals(protocol));}  }
class C{  public boolean removeSpringElements(VerletSpring2D s){  if (removeSpring(s)) {    return (removeParticle(s.a) && removeParticle(s.b));  }  return false;}  }
class C{  public int depth(BasicBlock b){  return dominatorInfoMap[b.getNumber()].getDepth();}  }
class C{  public ReturnStmt(String expr){  setExpr(new NameExpr(expr));}  }
class C{  public DockerContainersUtil kill(boolean ignoreFailure){  if (containers != null) {    for (    Container container : containers) {      try {        DockerClientFactory.build().killContainerCmd(container.getId()).exec();      } catch (      DockerException failure) {        if (!ignoreFailure) {          throw failure;        }      }    }  }  return this;}  }
class C{  private void forwardButtonInvoked(){  final String forwardUrl=browserHistory.moveForward();  setToolbarButtonState();  isBackOrForwardInProgress=true;  navigateToURL(forwardUrl);}  }
class C{  public static List<Plan> wrapPlan(Plan plan,String timeWindow){  List<Plan> list=new ArrayList<Plan>();  Plan tmpPlan=PopulationUtils.createPlan();  PopulationUtils.copyFromTo(plan,tmpPlan);  int dayCount=1;  Plan segment=PopulationUtils.createPlan();  int index=0;  while (index < tmpPlan.getPlanElements().size()) {    PlanElement pe=tmpPlan.getPlanElements().get(index);    if (pe instanceof Leg) {      segment.addLeg((Leg)pe);      index++;    } else {      Activity act=(Activity)pe;      double startTime=index == 0 ? 0 : act.getStartTime();      double endTime=index == plan.getPlanElements().size() - 1 ? Math.max(Time.MIDNIGHT,act.getStartTime()) : act.getEndTime();      if (startTime < Time.MIDNIGHT * dayCount) {        if (endTime < Time.MIDNIGHT * dayCount) {          act.setStartTime(act.getStartTime() - Time.MIDNIGHT * (dayCount - 1));          act.setEndTime(act.getEndTime() - Time.MIDNIGHT * (dayCount - 1));          segment.addActivity(act);          index++;        } else {          if (act.getType().contains("minor")) {            Activity end=PopulationUtils.createActivity(act);            end.setStartTime(end.getStartTime() - Time.MIDNIGHT * (dayCount - 1));            end.setEndTime(Time.MIDNIGHT);            segment.addActivity(end);            Plan p=PopulationUtils.createPlan();            PopulationUtils.copyFromTo(segment,p);            list.add(p);            Activity start=PopulationUtils.createActivity(act);            start.setStartTime(Time.parseTime("00:00:00"));            start.setEndTime(start.getEndTime() - Time.MIDNIGHT * (dayCount));            segment=PopulationUtils.createPlan();            segment.addActivity(start);            dayCount++;            index++;          } else {            if (index != tmpPlan.getPlanElements().size()) {              LOG.error("Non-minor activity in the middle of the chain: " + act.getType() + ". Behaviour not guaranteed!!");            }            act.setStartTime(act.getStartTime() - Time.MIDNIGHT * (dayCount - 1));            act.setEndTime(act.getEndTime() - Time.MIDNIGHT * (dayCount - 1));            segment.addActivity(act);            Plan p=PopulationUtils.createPlan();            PopulationUtils.copyFromTo(segment,p);            list.add(p);            Activity start=PopulationUtils.createActivity(act);            start.setStartTime(Time.parseTime("00:00:00"));            start.setEndTime(act.getEndTime() - Time.MIDNIGHT * (dayCount));            segment=PopulationUtils.createPlan();            segment.addActivity(start);            dayCount++;            index++;          }        }      } else {        final Activity act1=act;        Activity previousActivity=PopulationUtils.getPreviousActivity(tmpPlan,PopulationUtils.getPreviousLeg(tmpPlan,act1));        double chopFraction=(Time.MIDNIGHT * dayCount - previousActivity.getEndTime()) / (act.getStartTime() - previousActivity.getEndTime());        double distance=CoordUtils.calcEuclideanDistance(act.getCoord(),previousActivity.getCoord()) * chopFraction;        double dy=act.getCoord().getY() - previousActivity.getCoord().getY();        double dx=act.getCoord().getX() - previousActivity.getCoord().getX();        double angle=Math.atan(dy / dx);        Coord coord=new Coord(distance * Math.cos(angle),distance * Math.sin(angle));        Activity chopEnd=PopulationUtils.createActivityFromCoord("chopEnd",coord);        chopEnd.setEndTime(Time.MIDNIGHT);        Activity chopStart=PopulationUtils.createActivityFromCoord("chopStart",coord);        chopStart.setEndTime(Time.parseTime("00:00:00"));        segment.addActivity(chopEnd);        Plan p=PopulationUtils.createPlan();        PopulationUtils.copyFromTo(segment,p);        list.add(p);        segment=PopulationUtils.createPlan();        segment.addActivity(chopStart);        final Activity act2=act;        segment.addLeg(PopulationUtils.getPreviousLeg(tmpPlan,act2));        Activity firstRealActivity=PopulationUtils.createActivity(act);        firstRealActivity.setStartTime(act.getStartTime() - Time.MIDNIGHT * dayCount);        firstRealActivity.setEndTime(act.getEndTime() - Time.MIDNIGHT * dayCount);        segment.addActivity(act);        dayCount++;        index++;      }    }  }  return list;}  }
class C{  private Header createDigestHeader(final Credentials credentials,final String digest) throws AuthenticationException {  CharArrayBuffer buffer=new CharArrayBuffer(128);  if (isProxy()) {    buffer.append(AUTH.PROXY_AUTH_RESP);  } else {    buffer.append(AUTH.WWW_AUTH_RESP);  }  buffer.append(": Digest ");  String uri=getParameter("uri");  String realm=getParameter("realm");  String nonce=getParameter("nonce");  String opaque=getParameter("opaque");  String response=digest;  String algorithm=getParameter("algorithm");  String uname=credentials.getUserPrincipal().getName();  List<BasicNameValuePair> params=new ArrayList<BasicNameValuePair>(20);  params.add(new BasicNameValuePair("username",uname));  params.add(new BasicNameValuePair("realm",realm));  params.add(new BasicNameValuePair("nonce",nonce));  params.add(new BasicNameValuePair("uri",uri));  params.add(new BasicNameValuePair("response",response));  if (qopVariant != QOP_MISSING) {    params.add(new BasicNameValuePair("qop",getQopVariantString()));    params.add(new BasicNameValuePair("nc",NC));    params.add(new BasicNameValuePair("cnonce",getCnonce()));  }  if (algorithm != null) {    params.add(new BasicNameValuePair("algorithm",algorithm));  }  if (opaque != null) {    params.add(new BasicNameValuePair("opaque",opaque));  }  for (int i=0; i < params.size(); i++) {    BasicNameValuePair param=params.get(i);    if (i > 0) {      buffer.append(", ");    }    boolean noQuotes="nc".equals(param.getName()) || "qop".equals(param.getName());    BasicHeaderValueFormatter.DEFAULT.formatNameValuePair(buffer,param,!noQuotes);  }  return new BufferedHeader(buffer);}  }
class C{  public SortedSet<ScoredResult> search(SearchQuery query){  ArrayList<Track> tracks=new ArrayList<Track>();  ArrayList<Waypoint> waypoints=new ArrayList<Waypoint>();  TreeSet<ScoredResult> scoredResults=new TreeSet<ScoredResult>(SCORED_RESULT_COMPARATOR);  retrieveTracks(query,tracks);  retrieveWaypoints(query,waypoints);  scoreTrackResults(tracks,query,scoredResults);  scoreWaypointResults(waypoints,query,scoredResults);  return scoredResults;}  }
class C{  public Builder clearField(final int number){  if (number == 0) {    throw new IllegalArgumentException("Zero is not a valid field number.");  }  if (lastField != null && lastFieldNumber == number) {    lastField=null;    lastFieldNumber=0;  }  if (fields.containsKey(number)) {    fields.remove(number);  }  return this;}  }
class C{  public void doRedirects(){  try {    if (System.out != psOut) {      if (psOldOut == null)       psOldOut=System.out;      psOut=new PrintStream(new RedirectorStream(psOldOut,LogIDs.STDOUT,LogEvent.LT_INFORMATION));      System.setOut(psOut);    }    if (System.err != psErr) {      if (psOldErr == null)       psOldErr=System.err;      psErr=new PrintStream(new RedirectorStream(psOldErr,LogIDs.STDERR,LogEvent.LT_ERROR));      System.setErr(psErr);    }  } catch (  Throwable e) {    Debug.printStackTrace(e);  }}  }
class C{  public boolean isLabel(){  return StorageClass == IMAGE_SYM_CLASS_LABEL;}  }
class C{  public static void sendFailurePatchToEnumerationTask(StatelessService service,URI taskLink,Throwable t){  service.logWarning(Utils.toString(t));  sendPatchToEnumerationTask(service,taskLink,t);}  }
class C{  protected boolean processToken(String token){  if ("EXECUTE".equalsIgnoreCase(token) && !isExecuteWordProcessed && !isProcedureWordProcessed&& !isNameProcessed) {    isExecuteWordProcessed=true;    return true;  }  if ("PROCEDURE".equalsIgnoreCase(token) && isExecuteWordProcessed && !isProcedureWordProcessed&& !isNameProcessed) {    isProcedureWordProcessed=true;    return true;  }  if ("call".equalsIgnoreCase(token) && !isCallWordProcessed && !isNameProcessed) {    isCallWordProcessed=true;    return true;  }  if ((isCallWordProcessed || (isExecuteWordProcessed && isProcedureWordProcessed)) && !isNameProcessed) {    procedureCall.setName(token);    isNameProcessed=true;    return true;  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputStreamsFile;  int row, col;  int i;  int topRow, bottomRow, leftCol, rightCol;  float progress;  double decrement;  double decayCoefficient=0;  double elevation;  double infVal=9999999;  double value;  double rowYCoord, colXCoord;  double[][] geometry;  BoundingBox box;  int numPoints, numParts, part;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime, yPrime;  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  inputStreamsFile=args[1];  outputHeader=args[2];  decrement=Double.parseDouble(args[3]);  if (!args[4].toLowerCase().contains("not specified")) {    decayCoefficient=Double.parseDouble(args[4]);    if (decayCoefficient < 0) {      decayCoefficient=0;    }  }  if ((demHeader == null) || (inputStreamsFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(demHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    if (inputStreamsFile.toLowerCase().endsWith(".dep")) {      streamsHeader=inputStreamsFile;      streams=new WhiteboxRaster(streamsHeader,"r");    } else     if (inputStreamsFile.toLowerCase().endsWith(".shp")) {      streamsHeader=inputStreamsFile.replace(".shp","_temp.dep");      ShapeFile input=new ShapeFile(inputStreamsFile);      int numRecs=input.getNumberOfRecords();      if (input.getShapeType() != ShapeType.POLYLINE && input.getShapeType() != ShapeType.POLYLINEZ && input.getShapeType() != ShapeType.POLYLINEM && input.getShapeType() != ShapeType.POLYGON && input.getShapeType() != ShapeType.POLYGONZ && input.getShapeType() != ShapeType.POLYGONM) {        showFeedback("The input shapefile must be of a 'polyline' or " + "'polygon' data type.");        return;      }      streams=new WhiteboxRaster(streamsHeader,"rw",demHeader,WhiteboxRasterBase.DataType.INTEGER,0);      streams.isTemporaryFile=true;      ArrayList<RecordInfo> myList=new ArrayList<RecordInfo>();      for (      ShapeFileRecord record : input.records) {        i=record.getRecordNumber();        box=getBoundingBoxFromShapefileRecord(record);        myList.add(new RecordInfo(box.getMaxY(),i));      }      Collections.sort(myList);      long heapSize=Runtime.getRuntime().totalMemory();      int flushSize=(int)(heapSize / 32);      int j, numCellsToWrite;      PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<RowPriorityGridCell>(flushSize);      RowPriorityGridCell cell;      int numRecords=input.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      progress=0;      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=input.getRecord(ri.recNumber - 1);        value=record.getRecordNumber();        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][0] < box.getMinX()) {              box.setMinX(geometry[i][0]);            }            if (geometry[i][0] > box.getMaxX()) {              box.setMaxX(geometry[i][0]);            }            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=streams.getRowFromYCoordinate(box.getMaxY());          bottomRow=streams.getRowFromYCoordinate(box.getMinY());          leftCol=streams.getColumnFromXCoordinate(box.getMinX());          rightCol=streams.getColumnFromXCoordinate(box.getMaxX());          for (row=topRow; row <= bottomRow; row++) {            rowYCoord=streams.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1);                  col=streams.getColumnFromXCoordinate(xPrime);                  pq.add(new RowPriorityGridCell(row,col,value));                }              }            }          }          for (col=leftCol; col <= rightCol; col++) {            colXCoord=streams.getXCoordinateFromColumn(col);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(colXCoord,geometry[i][0],geometry[i + 1][0])) {                x1=geometry[i][0];                x2=geometry[i + 1][0];                if (x1 != x2) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  yPrime=y1 + (colXCoord - x1) / (x2 - x1) * (y2 - y1);                  row=streams.getRowFromYCoordinate(yPrime);                  pq.add(new RowPriorityGridCell(row,col,value));                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            streams.setValue(cell.row,cell.col,cell.z);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress((int)progress);        }      }      j=0;      numCellsToWrite=pq.size();      do {        cell=pq.poll();        streams.setValue(cell.row,cell.col,cell.z);        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);      streams.flush();    } else {      showFeedback("The input streams file must be either a Whitebox raster or shapefile.");      return;    }    if (streams.getNumberColumns() != cols || streams.getNumberRows() != rows) {      showFeedback("The input files must have the same dimensions.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,infVal);    output.setPreferredPalette(DEM.getPreferredPalette());    if (decayCoefficient > 0) {      if (!CalculateDistance()) {        showFeedback("An error was encountered calculating distances.");        return;      }      double distVal=0;      double[] data;      for (row=0; row < rows; row++) {        data=DEM.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            distVal=output.getValue(row,col);            elevation=data[col] - (Math.pow((gridRes / (gridRes + distVal)),decayCoefficient) * decrement);            output.setValue(row,col,elevation);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Burning Streams:",(int)progress);      }    } else {      double[] demData;      double[] streamData;      for (row=0; row < rows; row++) {        demData=DEM.getRowValues(row);        streamData=streams.getRowValues(row);        for (col=0; col < cols; col++) {          if (demData[col] != noData && streamData[col] > 0) {            elevation=demData[col] - decrement;            output.setValue(row,col,elevation);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Burning Streams:",(int)progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static boolean areEqual(int fromIndex,CharSequence left,CharSequence right){  if (left == right)   return true;  if ((left == null) || (right == null))   return false;  int n=left.length();  if (right.length() != n)   return false;  for (int i=n; i > fromIndex; ) {    if (Character.toUpperCase(left.charAt(--i)) != Character.toUpperCase(right.charAt(i)))     return false;  }  return true;}  }
class C{  protected boolean processBackground(Form f){  try {    Thread.sleep(3000);  } catch (  InterruptedException ex) {    ex.printStackTrace();  }  return true;}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  public TransferEntropyCalculatorMultiVariateKraskov(String calculatorName) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(calculatorName);  if (calculatorName.equalsIgnoreCase(COND_MI_CALCULATOR_KRASKOV1)) {    kraskovAlgorithmNumber=1;  } else   if (calculatorName.equalsIgnoreCase(COND_MI_CALCULATOR_KRASKOV2)) {    kraskovAlgorithmNumber=2;  } else {    throw new ClassNotFoundException("Must be an underlying Kraskov-Grassberger conditional MI calculator");  }  props=new Hashtable<String,String>();}  }
class C{  public StreamVerifier(TSIG tsig,TSIGRecord old){  key=tsig;  verifier=new HMAC(key.digest,key.digestBlockLength,key.key);  nresponses=0;  lastTSIG=old;}  }
class C{  public static RelationalOpExpression ge(String propertyName,Object value){  return new RelationalOpExpression(getPropExpr(propertyName),">=",new ConstantExpression(value));}  }
class C{  protected JPanel createTitledPanel(String title){  JPanel panel=new JPanel(new GridBagLayout());  Border titleBorder=BorderFactory.createTitledBorder(title);  panel.setBorder(BorderFactory.createCompoundBorder(titleBorder,PADDING));  return panel;}  }
class C{  public TIntHashSet(int[] array){  this(array.length);  addAll(array);}  }
class C{  public int offset(){  return offset;}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  public String request(String message,String bot,String botid,String server,Primitive service,String apikey,int limit,String hint,Network network) throws Exception {  if (!isEnabled()) {    return null;  }  try {    log("Request",Level.INFO,message);    if (service != null) {      if (service.equals(Primitive.PANNOUS)) {        return requestPannous(message,botid,server,apikey,limit);      } else       if (service.equals(Primitive.BOTLIBRE)) {        server=SERVER;      } else       if (service.equals(Primitive.BOTLIBRETWITTER)) {        server="http://twitter.botlibre.com";      } else       if (service.equals(Primitive.PAPHUS)) {        server="http://www.paphuslivechat.com";      } else       if (service.equals(Primitive.WIKIDATA)) {        return requestWikidata(message,botid,server,apikey,limit,hint,network);      } else       if (service.equals(Primitive.FREEBASE)) {        return requestFreebase(message,botid,server,apikey,limit,hint,network);      } else       if (service.equals(Primitive.WIKTIONARY)) {        return requestWiktionary(message,botid,server,apikey,limit,hint,network);      }    }    if ((server == null || server.isEmpty()) && (botid == null || botid.isEmpty()) && (bot == null || bot.isEmpty())) {      return requestPannous(message,botid,server,apikey,limit);    }    if (server != null && !server.isEmpty()) {      server=server.toLowerCase();      if (!server.startsWith("http")) {        server="http://" + server;      }    } else {      server=SERVER;    }    String url=server + "/pandora/talk-xml?";    if (botid != null && !botid.isEmpty()) {      url=url + "botid=" + botid;    } else     if (bot != null && !bot.isEmpty()) {      url=url + "botid=" + Utils.encodeURL(bot);    }    if (apikey != null && !apikey.isEmpty()) {      url=url + "&custid=" + apikey;    }    url=url + "&input=" + Utils.encodeURL(message);    log("SERVICE",Level.INFO,url);    InputStream stream=Utils.openStream(new URL(url),20000);    String result=Utils.loadTextFile(stream,"UTF-8",1000000);    log("Response",Level.INFO,result);    Element dom=parseXML(result);    log("Response",Level.INFO,result);    if (result == null) {      return null;    }    NodeList thats=dom.getElementsByTagName("that");    if (thats == null || thats.getLength() == 0) {      return null;    }    String text=thats.item(0).getTextContent().trim();    if (limit > 0) {      StringWriter writer=new StringWriter();      TextStream textStream=new TextStream(text);      for (int index=0; index < limit; index++) {        if (textStream.atEnd()) {          break;        }        writer.write(textStream.nextSentence());      }      text=writer.toString();    }    return text;  } catch (  Exception exception) {    log(exception);    return null;  }}  }
class C{  public void die(){  int size=edits.size();  for (int i=size - 1; i >= 0; i--) {    UndoableEdit e=edits.elementAt(i);    e.die();  }  super.die();}  }
class C{  public static Map<String,Object> sendOrderBackorderNotification(DispatchContext ctx,Map<String,? extends Object> context){  return sendOrderNotificationScreen(ctx,context,"PRDS_ODR_BACKORDER");}  }
class C{  private static boolean isShown(){  boolean isHidden=(mToastBean == null || mToast == null || mToast.getView() == null || mToast.getView().getWindowVisibility() != View.VISIBLE);  return !isHidden;}  }
class C{  private static <E>ImmutableList<E> construct(Object... elements){  return asImmutableList(checkElementsNotNull(elements));}  }
class C{  public DSubjectAlternativeName(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DSubjectAlternativeName.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ID1;case 2:  return ID2;default :return null;}}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  LookupPaintScale clone=(LookupPaintScale)super.clone();  clone.lookupTable=new java.util.ArrayList(this.lookupTable);  return clone;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  double x, y;  double z;  double gpsTime;  int intensity;  byte classValue, numReturns, returnNum, scanAngle;  int a;  int progress=0;  int numPoints=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      numPointsInFile=las.getNumPointRecords();      if (numPointsInFile > 70000000) {        showFeedback("Error: The number of points exceeds the limit on the number of features that a shapefile can contain.");        return;      }      String outputFile=pointFiles[j].replace(".las",".shp");      File file=new File(outputFile);      if (file.exists()) {        file.delete();      }      DBFField fields[]=new DBFField[8];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      fields[1]=new DBFField();      fields[1].setName("Z");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      fields[2]=new DBFField();      fields[2].setName("I");      fields[2].setDataType(DBFField.DBFDataType.NUMERIC);      fields[2].setFieldLength(8);      fields[2].setDecimalCount(0);      fields[3]=new DBFField();      fields[3].setName("CLASS");      fields[3].setDataType(DBFField.DBFDataType.NUMERIC);      fields[3].setFieldLength(4);      fields[3].setDecimalCount(0);      fields[4]=new DBFField();      fields[4].setName("RTN_NUM");      fields[4].setDataType(DBFField.DBFDataType.NUMERIC);      fields[4].setFieldLength(4);      fields[4].setDecimalCount(0);      fields[5]=new DBFField();      fields[5].setName("NUM_RTNS");      fields[5].setDataType(DBFField.DBFDataType.NUMERIC);      fields[5].setFieldLength(4);      fields[5].setDecimalCount(0);      fields[6]=new DBFField();      fields[6].setName("SCAN_ANGLE");      fields[6].setDataType(DBFField.DBFDataType.NUMERIC);      fields[6].setFieldLength(4);      fields[6].setDecimalCount(0);      fields[7]=new DBFField();      fields[7].setName("GPS_TIME");      fields[7].setDataType(DBFField.DBFDataType.NUMERIC);      fields[7].setFieldLength(14);      fields[7].setDecimalCount(6);      ShapeFile output=new ShapeFile(outputFile,ShapeType.POINT,fields);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);      numPoints=0;      progress=0;      int oldProgress=-1;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (!point.isPointWithheld()) {          x=point.getX();          y=point.getY();          z=point.getZ();          intensity=point.getIntensity();          classValue=point.getClassification();          returnNum=point.getReturnNumber();          numReturns=point.getNumberOfReturns();          scanAngle=point.getScanAngle();          gpsTime=point.getGPSTime();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(x,y);          Object[] rowData=new Object[8];          rowData[0]=(double)numPoints + 1;          rowData[1]=z;          rowData[2]=(double)intensity;          rowData[3]=(double)classValue;          rowData[4]=(double)returnNum;          rowData[5]=(double)numReturns;          rowData[6]=(double)scanAngle;          rowData[7]=gpsTime;          output.addRecord(wbGeometry,rowData);          numPoints++;        }        progress=(int)(100f * a / numPointsInFile);        if (progress != oldProgress) {          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);        }      }      output.write();    }    showFeedback("Operation Complete.");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private Boolean processYESNO(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  if (!(value.equals("yes") || value.equals("no"))) {    handleError(handler,XSLTErrorResources.INVALID_BOOLEAN,new Object[]{name,value},null);    return null;  }  return new Boolean(value.equals("yes") ? true : false);}  }
class C{  private void drawWind(Canvas canvas,float y,float xOffset){  float cof=(mScreenWidth + xOffset) / (LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT);  float time=mLoadingAnimationTime;  if (mLastAnimationTime - mLoadingAnimationTime > 0) {    mInverseDirection=true;    time=(LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT) - mLoadingAnimationTime;  } else {    mNewWindSet=true;    mInverseDirection=false;  }  float x=(mScreenWidth - (time * cof)) + xOffset - mWindLineWidth;  float xEnd=x + mWindLineWidth;  canvas.drawLine(x,y,xEnd,y,mWindPaint);}  }
class C{  public static SubqueryInExpression subqueryIn(Expression expression,EPStatementObjectModel model){  return new SubqueryInExpression(expression,model,false);}  }
class C{  public String geCodigoPostalColumnName(){  return CN_CP;}  }
class C{  public boolean isSpecified(int index){  if ((index < 0) || (index >= mLength)) {    throw new ArrayIndexOutOfBoundsException("");  }  String str=mItems[(index << 3) + 5];  return ((str != null) ? (str.charAt(0) == 'd') : true);}  }
class C{  public DrmInfoStatus(int statusCode,int infoType,ProcessedData data,String mimeType){  if (!DrmInfoRequest.isValidType(infoType)) {    throw new IllegalArgumentException("infoType: " + infoType);  }  if (!isValidStatusCode(statusCode)) {    throw new IllegalArgumentException("Unsupported status code: " + statusCode);  }  if (mimeType == null || mimeType == "") {    throw new IllegalArgumentException("mimeType is null or an empty string");  }  this.statusCode=statusCode;  this.infoType=infoType;  this.data=data;  this.mimeType=mimeType;}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  private void initRoutingRules(){  JsonObject rules=new JsonObject();  rules=TestUtils.addRoutingRuleMainStorage(rules);  rules=TestUtils.addRoutingRuleHooks(rules);  TestUtils.putRoutingRules(rules);}  }
class C{  @Override public void close(){  _offset=_tail;  _pageBuffer=null;}  }
class C{  private void throwCustomException(int numOfChildViews){  if (numOfChildViews == 1) {    throw new NumberOfFoldingLayoutChildrenException(FOLDING_VIEW_EXCEPTION_MESSAGE);  }}  }
class C{  public boolean isDefined(Object key){  if (key instanceof StyleConstants) {    Object cssKey=css.styleConstantsKeyToCSSKey((StyleConstants)key);    if (cssKey != null) {      return super.isDefined(cssKey);    }  }  return super.isDefined(key);}  }
class C{  public static String escapeXml(String s,boolean advanced,boolean recognizeUnicodeChars,boolean translateSpecialEntities,boolean isDomCreation,boolean transResCharsToNCR,boolean translateSpecialEntitiesToNCR,boolean isHtmlOutput){  if (s != null) {    int len=s.length();    StringBuilder result=new StringBuilder(len);    for (int i=0; i < len; i++) {      char ch=s.charAt(i);      SpecialEntity code;      if (ch == '&') {        if ((advanced || recognizeUnicodeChars) && (i < len - 1) && (s.charAt(i + 1) == '#')) {          i=convertToUnicode(s,isDomCreation,recognizeUnicodeChars,translateSpecialEntitiesToNCR,result,i + 2);        } else         if ((translateSpecialEntities || advanced) && (code=SpecialEntities.INSTANCE.getSpecialEntity(s.substring(i,i + Math.min(10,len - i)))) != null) {          if (translateSpecialEntities && code.isHtmlSpecialEntity()) {            if (recognizeUnicodeChars) {              result.append((char)code.intValue());            } else {              result.append(code.getDecimalNCR());            }            i+=code.getKey().length() + 1;          } else           if (advanced) {            result.append(transResCharsToNCR ? code.getDecimalNCR() : code.getEscaped(isHtmlOutput || isDomCreation));            i+=code.getKey().length() + 1;          } else {            result.append(transResCharsToNCR ? getAmpNcr() : "&amp;");          }        } else         if (isHtmlOutput) {          code=SpecialEntities.INSTANCE.getSpecialEntity(s.substring(i,i + Math.min(10,len - i)));          if (code != null) {            result.append(code.getEscapedValue());            i+=code.getKey().length() + 1;          } else           if ((i < len - 1) && (s.charAt(i + 1) == '#')) {            i=convert_To_Entity_Name(s,false,false,false,result,i + 2);          } else {            result.append(transResCharsToNCR ? getAmpNcr() : "&amp;");          }        } else {          result.append(transResCharsToNCR ? getAmpNcr() : "&amp;");        }      } else       if ((code=SpecialEntities.INSTANCE.getSpecialEntityByUnicode(ch)) != null) {        if (isHtmlOutput) {          if ("apos".equals(code.getKey())) {            result.append(ch);          } else {            result.append(isDomCreation ? code.getHtmlString() : code.getEscapedValue());          }        } else {          result.append(transResCharsToNCR ? code.getDecimalNCR() : code.getEscaped(isDomCreation));        }      } else {        result.append(ch);      }    }    return result.toString();  }  return null;}  }
class C{  protected void closeSoftKeyboard(EditText et){  InputMethodManager inputMethodManager=(InputMethodManager)mContext.getSystemService(Context.INPUT_METHOD_SERVICE);  if (inputMethodManager != null && ((Activity)mContext).getCurrentFocus() != null) {    inputMethodManager.hideSoftInputFromWindow(et.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);  }  isAutoViewNeedHide=false;}  }
class C{  protected Boolean compute(Boolean value){  if (value == null) {    return true;  } else {    return false;  }}  }
class C{  public List<Entry<E>> asList(){  if (nonNullList == null) {    if (array == null || array.length() == 0) {      nonNullList=Collections.emptyList();    } else {      List<Entry<E>> list=new ArrayList<>(array.length());      for (int i=0; i < array.length(); i++) {        E e=array.get(i);        if (e != null) {          list.add(new Entry<>(i,e));        }      }      nonNullList=list;    }  }  return nonNullList;}  }
class C{  public String doubleMetaphone(String value,boolean alternate){  value=cleanInput(value);  if (value == null) {    return null;  }  boolean slavoGermanic=isSlavoGermanic(value);  int index=isSilentStart(value) ? 1 : 0;  DoubleMetaphoneResult result=new DoubleMetaphoneResult(this.getMaxCodeLen());  while (!result.isComplete() && index <= value.length() - 1) {switch (value.charAt(index)) {case 'A':case 'E':case 'I':case 'O':case 'U':case 'Y':      index=handleAEIOUY(value,result,index);    break;case 'B':  result.append('P');index=charAt(value,index + 1) == 'B' ? index + 2 : index + 1;break;case '\u00C7':result.append('S');index++;break;case 'C':index=handleC(value,result,index);break;case 'D':index=handleD(value,result,index);break;case 'F':result.append('F');index=charAt(value,index + 1) == 'F' ? index + 2 : index + 1;break;case 'G':index=handleG(value,result,index,slavoGermanic);break;case 'H':index=handleH(value,result,index);break;case 'J':index=handleJ(value,result,index,slavoGermanic);break;case 'K':result.append('K');index=charAt(value,index + 1) == 'K' ? index + 2 : index + 1;break;case 'L':index=handleL(value,result,index);break;case 'M':result.append('M');index=conditionM0(value,index) ? index + 2 : index + 1;break;case 'N':result.append('N');index=charAt(value,index + 1) == 'N' ? index + 2 : index + 1;break;case '\u00D1':result.append('N');index++;break;case 'P':index=handleP(value,result,index);break;case 'Q':result.append('K');index=charAt(value,index + 1) == 'Q' ? index + 2 : index + 1;break;case 'R':index=handleR(value,result,index,slavoGermanic);break;case 'S':index=handleS(value,result,index,slavoGermanic);break;case 'T':index=handleT(value,result,index);break;case 'V':result.append('F');index=charAt(value,index + 1) == 'V' ? index + 2 : index + 1;break;case 'W':index=handleW(value,result,index);break;case 'X':index=handleX(value,result,index);break;case 'Z':index=handleZ(value,result,index,slavoGermanic);break;default :index++;break;}}return alternate ? result.getAlternate() : result.getPrimary();}  }
class C{  public double[] asDegreesArray(){  return new double[]{this.getLatitude().degrees,this.getLongitude().degrees};}  }
class C{  public static synchronized void beginRecordingMacro(){  if (isRecordingMacro()) {    return;  }  if (currentMacro != null)   currentMacro=null;  currentMacro=new Macro();  recordingMacro=true;}  }
class C{  OkHttpClient copyWithDefaults(){  OkHttpClient result=new OkHttpClient(this);  if (result.proxySelector == null) {    result.proxySelector=ProxySelector.getDefault();  }  if (result.cookieHandler == null) {    result.cookieHandler=CookieHandler.getDefault();  }  if (result.socketFactory == null) {    result.socketFactory=SocketFactory.getDefault();  }  if (result.sslSocketFactory == null) {    result.sslSocketFactory=getDefaultSSLSocketFactory();  }  if (result.hostnameVerifier == null) {    result.hostnameVerifier=OkHostnameVerifier.INSTANCE;  }  if (result.certificatePinner == null) {    result.certificatePinner=CertificatePinner.DEFAULT;  }  if (result.authenticator == null) {    result.authenticator=AuthenticatorAdapter.INSTANCE;  }  if (result.connectionPool == null) {    result.connectionPool=ConnectionPool.getDefault();  }  if (result.protocols == null) {    result.protocols=DEFAULT_PROTOCOLS;  }  if (result.connectionSpecs == null) {    result.connectionSpecs=DEFAULT_CONNECTION_SPECS;  }  if (result.dns == null) {    result.dns=Dns.SYSTEM;  }  return result;}  }
class C{  float screenYToCurveProgress(int screenY){  float x=(float)(screenY - mStackVisibleRect.top) / mStackVisibleRect.height();  if (x < 0 || x > 1)   return x;  float xIndex=x * PrecisionSteps;  int xFloorIndex=(int)Math.floor(xIndex);  int xCeilIndex=(int)Math.ceil(xIndex);  float pFraction=0;  if (xFloorIndex < PrecisionSteps && (xCeilIndex != xFloorIndex)) {    float xFraction=(xIndex - xFloorIndex) / (xCeilIndex - xFloorIndex);    pFraction=(px[xCeilIndex] - px[xFloorIndex]) * xFraction;  }  return px[xFloorIndex] + pFraction;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.708 -0500",hash_original_method="2C0349D8A755A992C407F37169B24D0C",hash_generated_method="A839BB6C885C046CDCE6C7E7906B1179") private ThreadGroup(){  this.name="system";  this.parent=null;}  }
class C{  public JKeyStoreTabbedPane(KseFrame kseFrame){  this.kseFrame=kseFrame;  new DropTarget(this,this);}  }
class C{  public boolean isCellEditable(int row,int column){  Date openDate=(Date)this.getValueAt(row,0);  Date closeDate=(Date)this.getValueAt(row,1);  Tradingday tradingday=getData().getTradingday(openDate.getZonedDateTime(),closeDate.getZonedDateTime());  if (null != tradingday && Tradingdays.hasTradeOrders(tradingday)) {    if ((columnNames[column] == OPEN) || (columnNames[column] == CLOSE)) {      return false;    }  }  return true;}  }
class C{  public BuildPureClustersParamsEditor(){}  }
class C{  private Node<K,V> findPredecessor(Object key,Comparator<? super K> cmp){  if (key == null)   throw new NullPointerException();  for (; ; ) {    for (Index<K,V> q=head, r=q.right, d; ; ) {      if (r != null) {        Node<K,V> n=r.node;        K k=n.key;        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (cpr(cmp,key,k) > 0) {          q=r;          r=r.right;          continue;        }      }      if ((d=q.down) == null)       return q.node;      q=d;      r=d.right;    }  }}  }
class C{  public int compare(Object obj1,Object obj2){  int result=-1;  if (obj1 == null && obj2 == null) {    return 0;  }  assert !(obj1 instanceof VMCachedDeserializable || obj2 instanceof VMCachedDeserializable);  if ((this.objType.isStructType() && obj1 instanceof Object[] && obj2 instanceof Object[]) || !this.objType.isStructType()) {    Object[] list1=this.evaluateSortCriteria(obj1);    Object[] list2=this.evaluateSortCriteria(obj2);    if (list1.length != list2.length) {      Support.assertionFailed("Error Occured due to improper sort criteria evaluation ");    } else {      for (int i=0; i < list1.length; i++) {        Object arr1[]=(Object[])list1[i];        Object arr2[]=(Object[])list2[i];        if (arr1[0] == null || arr2[0] == null) {          if (arr1[0] == null) {            result=(arr2[0] == null ? 0 : -1);          } else {            result=1;          }        } else         if (arr1[0] == QueryService.UNDEFINED || arr2[0] == QueryService.UNDEFINED) {          if (arr1[0] == QueryService.UNDEFINED) {            result=(arr2[0] == QueryService.UNDEFINED ? 0 : -1);          } else {            result=1;          }        } else {          if (arr1[0] instanceof Number && arr2[0] instanceof Number) {            double diff=((Number)arr1[0]).doubleValue() - ((Number)arr2[0]).doubleValue();            result=diff > 0 ? 1 : diff < 0 ? -1 : 0;          } else {            if (arr1[0] instanceof PdxString && arr2[0] instanceof String) {              arr2[0]=new PdxString((String)arr2[0]);            } else             if (arr2[0] instanceof PdxString && arr1[0] instanceof String) {              arr1[0]=new PdxString((String)arr1[0]);            }            result=((Comparable)arr1[0]).compareTo(arr2[0]);          }        }        if (result == 0) {          continue;        } else {          if (((Boolean)arr1[1]).booleanValue()) {            result=(result * -1);          }          return result;        }      }      QueryObserver observer=QueryObserverHolder.getInstance();      if (observer != null) {        observer.orderByColumnsEqual();      }      if (this.objType.isStructType()) {        int i=0;        for (        Object o1 : (Object[])obj1) {          Object o2=((Object[])obj2)[i++];          if (o1 == null || o2 == null) {            if (o1 == null) {              if (o2 == null) {                continue;              }              return -1;            } else {              return 1;            }          } else           if (o1 == QueryService.UNDEFINED || o2 == QueryService.UNDEFINED) {            if (o1 == QueryService.UNDEFINED) {              if (o2 == QueryService.UNDEFINED) {                continue;              }              return -1;            } else {              return 1;            }          }          if (o1 instanceof Comparable) {            final int rslt;            if (o1 instanceof Number && o2 instanceof Number) {              double diff=((Number)o1).doubleValue() - ((Number)o2).doubleValue();              rslt=diff > 0 ? 1 : diff < 0 ? -1 : 0;            } else {              if (o1 instanceof PdxString && o2 instanceof String) {                o2=new PdxString((String)o2);              } else               if (o2 instanceof PdxString && o1 instanceof String) {                o1=new PdxString((String)o1);              }              rslt=((Comparable)o1).compareTo(o2);            }            if (rslt == 0) {              continue;            } else {              return rslt;            }          } else           if (!o1.equals(o2)) {            return -1;          }        }        return 0;      } else {        if (obj1 instanceof PdxString && obj2 instanceof String) {          obj2=new PdxString((String)obj2);        } else         if (obj2 instanceof PdxString && obj1 instanceof String) {          obj1=new PdxString((String)obj1);        }        if (obj1 instanceof Comparable) {          return ((Comparable)obj1).compareTo(obj2);        } else {          return obj1.equals(obj2) ? 0 : -1;        }      }    }  }  return -1;}  }
class C{  public static QueryStoragePortsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryStoragePortsResponse object=new QueryStoragePortsResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryStoragePortsResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryStoragePortsResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(StoragePort.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(StoragePort.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((StoragePort[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(StoragePort.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public Class[] qualifiers(){  return _annTypes;}  }
class C{  public static void stepEnd(final JFrame parent,final IDebugger debugger,final ZyGraph graph){  checkArguments(parent,debugger,graph);  if (!debugger.isConnected()) {    return;  }  final TargetProcessThread activeThread=debugger.getProcessManager().getActiveThread();  if (activeThread == null) {    return;  }  final RelocatedAddress currentAddress=activeThread.getCurrentAddress();  if (currentAddress == null) {    CMessageBox.showError(parent,"Could not step because the selected thread is not suspended");    return;  }  final Set<BreakpointAddress> relocatedBlockAddresses=CStepEndHelper.getEndAddresses(graph);  if (relocatedBlockAddresses.isEmpty()) {    CMessageBox.showError(parent,"Couldn't step to the end of the function");    return;  } else {    debugger.getProcessManager().setActiveThread(null);    debugger.getBreakpointManager().addBreakpoints(BreakpointType.STEP,relocatedBlockAddresses);    try {      debugger.resume();    } catch (    final DebugExceptionWrapper e) {      debugger.getBreakpointManager().removeBreakpoints(BreakpointType.STEP,relocatedBlockAddresses);      debugger.getProcessManager().setActiveThread(activeThread);      CUtilityFunctions.logException(e);      final String innerMessage="E00086: " + "Could not send step end command to the debug client";      final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not send the step end command to the debug client.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The state of the debugged process remains unchanged."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  private boolean resizeAndSaveImage(int maxWidth,int maxHeight) throws IOException {  boolean saved=false;  File targetFile=configuration.diskCache.get(uri);  if (targetFile != null && targetFile.exists()) {    ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);    DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();    ImageDecodingInfo decodingInfo=new ImageDecodingInfo(memoryCacheKey,Scheme.FILE.wrap(targetFile.getAbsolutePath()),uri,targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);    Bitmap bmp=decoder.decode(decodingInfo);    if (bmp != null && configuration.processorForDiskCache != null) {      L.d(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISK,memoryCacheKey);      bmp=configuration.processorForDiskCache.process(bmp);      if (bmp == null) {        L.e(ERROR_PROCESSOR_FOR_DISK_CACHE_NULL,memoryCacheKey);      }    }    if (bmp != null) {      saved=configuration.diskCache.save(uri,bmp);      bmp.recycle();    }  }  return saved;}  }
class C{  public DescriptiveStatistics statistics(Set<? extends Vertex> vertices){  DescriptiveStatistics distribution=new DescriptiveStatistics();  for (  Vertex v : vertices)   distribution.addValue(v.getEdges().size());  return distribution;}  }
class C{  public void clearEditInfo() throws Exception {  m_relFlds.clearEditInfo();  m_extFlds.clearEditInfo();  m_multFlds.clearEditInfo();}  }
class C{  @Deprecated public TermsQueryBuilder minimumShouldMatch(String minimumShouldMatch){  this.minimumShouldMatch=minimumShouldMatch;  return this;}  }
class C{  public NotificationChain basicSetSuperScope(ExecutionScope newSuperScope,NotificationChain msgs){  ExecutionScope oldSuperScope=superScope;  superScope=newSuperScope;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_STATE__SUPER_SCOPE,oldSuperScope,newSuperScope);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  static String mysqlToSqlState(int errno,boolean useSql92States){  if (useSql92States) {    return mysqlToSql99(errno);  }  return mysqlToXOpen(errno);}  }
class C{  public void signOut() throws AbelanaClientException {  setUserIdToken(null);}  }
class C{  public void testChunkCleanup() throws IOException {  Directory dir=newDirectory();  IndexWriterConfig iwConf=newIndexWriterConfig(new MockAnalyzer(random()));  iwConf.setMergePolicy(NoMergePolicy.INSTANCE);  iwConf.setCodec(CompressingCodec.randomInstance(random(),4 * 1024,100,false,8));  IndexWriter iw=new IndexWriter(dir,iwConf);  DirectoryReader ir=DirectoryReader.open(iw);  for (int i=0; i < 5; i++) {    Document doc=new Document();    FieldType ft=new FieldType(TextField.TYPE_NOT_STORED);    ft.setStoreTermVectors(true);    doc.add(new Field("text","not very long at all",ft));    iw.addDocument(doc);    DirectoryReader ir2=DirectoryReader.openIfChanged(ir);    assertNotNull(ir2);    ir.close();    ir=ir2;    for (    LeafReaderContext leaf : ir2.leaves()) {      CodecReader sr=(CodecReader)leaf.reader();      CompressingTermVectorsReader reader=(CompressingTermVectorsReader)sr.getTermVectorsReader();      assertEquals(1,reader.getNumChunks());      assertEquals(1,reader.getNumDirtyChunks());    }  }  iw.getConfig().setMergePolicy(newLogMergePolicy());  iw.forceMerge(1);  DirectoryReader ir2=DirectoryReader.openIfChanged(ir);  assertNotNull(ir2);  ir.close();  ir=ir2;  CodecReader sr=(CodecReader)getOnlyLeafReader(ir);  CompressingTermVectorsReader reader=(CompressingTermVectorsReader)sr.getTermVectorsReader();  assertTrue(reader.getNumDirtyChunks() <= 1);  ir.close();  iw.close();  dir.close();}  }
class C{  public void syncCommentsAndReviews() throws GitClientException {  RevWalk revWalk=null;  try (Git git=new Git(repo)){    revWalk=new RevWalk(repo);    RefSpec spec=new RefSpec(DEVTOOLS_PULL_REFSPEC);    git.fetch().setRefSpecs(spec).call();    syncNotes(revWalk,COMMENTS_REF,COMMENTS_ORIGIN_REF);    revWalk.reset();    syncNotes(revWalk,REVIEWS_REF,REVIEWS_ORIGIN_REF);  } catch (  Exception e) {    throw new GitClientException("Error syncing notes",e);  } finally {    if (revWalk != null) {      revWalk.close();    }  }}  }
class C{  public static void main(String[] args){  if (args.length == 0) {    System.out.println("\nCalifornium (Cf) Plugtest Client");    System.out.println("(c) 2014, Institute for Pervasive Computing, ETH Zurich");    System.out.println();    System.out.println("Usage: " + PlugtestClient.class.getSimpleName() + " [-s] URI");    System.out.println("  -s        : Skip the ping in case the remote does not implement it");    System.out.println("  URI       : The CoAP URI of the Plugtest server to test (coap://...)");    System.exit(-1);  }  NetworkConfig.getStandard().setInt(NetworkConfig.Keys.MAX_MESSAGE_SIZE,64).setInt(NetworkConfig.Keys.PREFERRED_BLOCK_SIZE,64);  int first=0;  if (args[first].equals("-s"))   ++first;  String uri=args[first++];  if (!uri.startsWith("coap://")) {    uri="coap://" + uri;  }  if (uri.endsWith("/")) {    uri=uri.substring(-1);  }  if (first == 1) {    CoapClient clientPing=new CoapClient(uri);    System.out.println("===============\nCC31\n---------------");    if (!clientPing.ping(2000)) {      System.out.println(uri + " does not respond to ping, exiting...");      System.exit(-1);    } else {      System.out.println(uri + " reponds to ping");      EndpointManager.getEndpointManager().getDefaultEndpoint().addInterceptor(new MessageTracer());    }  }  testCC(uri);  testCB(uri);  testCO(uri);  testCL(uri);  System.exit(0);}  }
class C{  public boolean containsCreature(){  for (  final RPObject obj : objects.values()) {    if (obj instanceof Creature) {      return true;    }  }  return false;}  }
class C{  public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {  MessageDigest md;  md=MessageDigest.getInstance(MD5);  md.update(text.getBytes(UTF_8_ENCODING),0,text.length());  return convertToHex(md.digest());}  }
class C{  public int stop(){  mAudioPauser.resume();  return mTts.stop();}  }
class C{  public void removeWritten(byte[] value){  writeSetLock.lock();  Set<TimestampValuePair> temp=(HashSet<TimestampValuePair>)writeSet.clone();  for (  TimestampValuePair rv : temp) {    if (Arrays.equals(rv.getValue(),value))     writeSet.remove(rv);  }  writeSetLock.unlock();}  }
class C{  public void print(final OutputStream output) throws IOException {  this.printHead(output);  this.printBody(output);}  }
class C{  @Override public void skip(final long itemsCount) throws IOException {}  }
class C{  @Override public boolean remove(Object o){  if (!(o instanceof Struct)) {    return false;  }  Struct s=(Struct)o;  if (!this.elementType.equals(StructTypeImpl.typeFromStruct(s))) {    return false;  }  return removeFieldValues(s.getFieldValues());}  }
class C{  public void testBasics() throws IOException {  Analyzer a=new SpanishAnalyzer();  checkOneTerm(a,"chicana","chican");  checkOneTerm(a,"chicano","chican");  assertAnalyzesTo(a,"los",new String[]{});  a.close();}  }
class C{  public static Project readProject(String argument) throws IOException {  String projectFileName=argument;  File projectFile=new File(projectFileName);  if (projectFileName.endsWith(".xml") || projectFileName.endsWith(".fbp")) {    try {      return Project.readXML(projectFile);    } catch (    SAXException e) {      IOException ioe=new IOException("Couldn't read saved FindBugs project");      ioe.initCause(e);      throw ioe;    }  }  throw new IllegalArgumentException("Can't read project from " + argument);}  }
class C{  public static void main(String[] args){  double[][] points={{-1,0,3},{-1,-1,-1},{4,1,1},{2,0.5,9},{3.5,2,-1},{3,1.5,3},{-1.5,4,2},{5.5,4,-0.5}};  int p1=0, p2=1, p3=3;  double shortestDistance=distance(points[p1][0],points[p1][1],points[p1][2],points[p2][0],points[p2][p1],points[p3][p2]);  for (int i=0; i < points.length; i++) {    for (int j=i + 1; j < points.length; j++) {      double distance=distance(points[i][0],points[i][1],points[i][2],points[j][0],points[j][1],points[j][2]);      if (shortestDistance > distance) {        p1=i;        p2=j;        shortestDistance=distance;      }    }  }  System.out.println("The closest two points are " + "(" + points[p1][0] + ", "+ points[p1][1]+ ") and ("+ points[p2][0]+ ", "+ points[p2][1]+ ")");}  }
class C{  public static List<Ignite> allGrids(){  return IgnitionEx.allGrids();}  }
class C{  private void paintForegroundEnabled(Graphics2D g,int width,int height){  Shape s=decodeArrowPath(width,height);  g.setPaint(enabledColor);  g.fill(s);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public String toString(){  return "ECEFPoint[x=" + x_ + ",y="+ y_+ ",z="+ z_+ "]";}  }
class C{  public int size(){  return methods.size();}  }
class C{  private void disposeUndoHistory(){  fHistory.dispose(fUndoContext,true,true,true);}  }
class C{  public int to(){  return w;}  }
class C{  public Duration plusMinutes(long minutesToAdd){  return plus(Math.multiplyExact(minutesToAdd,SECONDS_PER_MINUTE),0);}  }
class C{  public ObjectFactory(){}  }
class C{  public Query orderBy(String column,@Order int direction){  if (direction != ORDER_ASCENDING && direction != ORDER_DESCENDING) {    throw new IllegalArgumentException("Invalid direction: " + direction);  }  String resolvedOrderColumn;switch (column) {case DownloadManager.COLUMN_LAST_MODIFIED_TIMESTAMP:    resolvedOrderColumn=DownloadContract.Downloads.COLUMN_LAST_MODIFICATION;  break;case DownloadManager.COLUMN_TOTAL_SIZE_BYTES:resolvedOrderColumn=DownloadContract.Downloads.COLUMN_TOTAL_BYTES;break;default :throw new IllegalArgumentException("Cannot order by " + column);}String orderDirection=(direction == ORDER_ASCENDING ? "ASC" : "DESC");orderString=resolvedOrderColumn + " " + orderDirection;return this;}  }
class C{  private void doTestWithSameArrays(int offset,AlgorithmParameters params) throws Exception {  Cipher c=createCipher(Cipher.ENCRYPT_MODE,params);  int outputLength=c.getOutputSize(textLength);  int outputBufSize=AADLength + outputLength + offset * 2;  byte[] AAD_and_text=Helper.generateBytes(outputBufSize);  runGCMWithSameArray(Cipher.ENCRYPT_MODE,AAD_and_text,AADLength + offset,textLength,params);  int tagLength=c.getParameters().getParameterSpec(GCMParameterSpec.class).getTLen() / 8;  runGCMWithSameArray(Cipher.DECRYPT_MODE,AAD_and_text,AADLength + offset,textLength + tagLength,params);}  }
class C{  public MultiplyAlphaRed(CachableRed src,CachableRed alpha){  super(makeList(src,alpha),makeBounds(src,alpha),fixColorModel(src),fixSampleModel(src),src.getTileGridXOffset(),src.getTileGridYOffset(),null);}  }
class C{  public void testAuthenticateSpringOpenLdapNotCorrect(){  LdapManager mgr=getLdapOpenLdap();  LdapAuthenticationUserNameVO authenticationInfo=new LdapAuthenticationUserNameVO();  authenticationInfo.setUserName("ngomila");  authenticationInfo.setUserCredentials("ldap2");  String ret=null;  try {    ret=mgr.authenticate(authenticationInfo);  } catch (  Exception e) {    assertEquals(LdapErrorCodes.ERR_10002_AUTHENTICATION_PROBLEM,((LdapException)e).getErrCode());  }  assertNull(ret);}  }
class C{  public void align(final long alignByteNumber) throws IOException {  this.alignByte();  if (alignByteNumber > 0) {    long padding=(alignByteNumber - (this.byteCounter % alignByteNumber)) % alignByteNumber;    while (padding > 0) {      final int skippedByte=this.read();      if (skippedByte < 0) {        throw new EOFException("Can't align for " + alignByteNumber + " byte(s)");      }      padding--;    }  }}  }
class C{  private static void populateRequest(HttpServletRequest request,List<Sequence<IString>> translationList,List<List<String>> alignments,List<Double> scoreList){  Type t=new TypeToken<TranslationReply>(){  }.getType();  List<TranslationQuery> queryList=toQuery(translationList,alignments,scoreList);  TranslationReply baseResponse=new TranslationReply(queryList);  ServiceResponse serviceResponse=new ServiceResponse(baseResponse,t);  request.setAttribute(PhrasalServlet.ASYNC_KEY,serviceResponse);}  }
class C{  void initFromNode(final Node fromNode,final double startTime,final PseudoRemovePriorityQueue<Node> pendingNodes){  DijkstraNodeData data=getData(fromNode);  visitNode(fromNode,data,pendingNodes,startTime,0,null);}  }
class C{  protected void warn(String message){  set.warn(this,message);}  }
class C{  public void testSigner(){  Signer s=new SignerStub();  assertNotNull(s);  assertNull(s.getPrivateKey());}  }
class C{  protected void addChristianHoliday(LocalDate day,String propertiesKey,HolidayType holidayType,Set<Holiday> holidays){  de.jollyday.HolidayType type=xmlUtil.getType(holidayType);  Holiday h=new Holiday(day,propertiesKey,type);  holidays.add(h);}  }
class C{  protected void calculatePositions(){  try {    IDocumentExtension3 extension=(IDocumentExtension3)document;    ITypedRegion[] partitions=extension.computePartitioning(TLAPartitionScanner.TLA_PARTITIONING,0,document.getLength(),false);    for (int i=0; i < partitions.length; i++) {      IRegion lineOnPartitionStart=document.getLineInformationOfOffset(partitions[i].getOffset());      if ((partitions[i].getType().equals(TLAPartitionScanner.TLA_MULTI_LINE_COMMENT)) && partitions[i].getLength() > lineOnPartitionStart.getLength()) {        positions.add(new Position(partitions[i].getOffset(),partitions[i].getLength()));      }    }  } catch (  BadLocationException e) {    e.printStackTrace();  }catch (  BadPartitioningException e) {    e.printStackTrace();  }}  }
class C{  public ProofOfPossession(int type,POPOPrivKey privkey){  tagNo=type;  obj=privkey;}  }
class C{  public int read() throws IOException {  int len=_stream.read(_buf,0,1);  if (len == 1)   return _buf[0] & 0xff; else   return -1;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.291 -0500",hash_original_method="797988AA09B377AAD595A673B0C7988B",hash_generated_method="D920FE10DB13EBBC00F5D9F8CC7066A9") public static boolean isNaN(float f){  return ((f) == 1);}  }
class C{  private static UriMatcher buildUriMatcher(){  UriMatcher matcher=new UriMatcher(UriMatcher.NO_MATCH);  matcher.addURI(AUTHORITY,SearchManager.SUGGEST_URI_PATH_QUERY,SEARCH_SUGGEST);  matcher.addURI(AUTHORITY,SearchManager.SUGGEST_URI_PATH_QUERY + "/*",SEARCH_SUGGEST);  return matcher;}  }
class C{  public static int tileXToX(int tx,int tileGridXOffset,int tileWidth){  return tx * tileWidth + tileGridXOffset;}  }
class C{  protected void checkClosed(boolean write){  if (session == null) {    throw DbException.get(ErrorCode.OBJECT_CLOSED);  }  if (session.isClosed()) {    throw DbException.get(ErrorCode.DATABASE_CALLED_AT_SHUTDOWN);  }  if (session.isReconnectNeeded(write)) {    trace.debug("reconnect");    closePreparedCommands();    session=session.reconnect(write);    trace=session.getTrace();  }}  }
class C{  public Double computeStorageSystemAvgPortMetrics(URI storageSystemURI){  StorageSystem storageDevice=_dbClient.queryObject(StorageSystem.class,storageSystemURI);  Double portMetricsSum=0.0;  double usablePortCount=0;  Double storageSystemPortsMetrics=null;  if (storageDevice != null) {    if (!DiscoveredDataObject.Type.xtremio.name().equals(storageDevice.getSystemType())) {      URIQueryResultList storagePortURIs=new URIQueryResultList();      _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePortConstraint(storageSystemURI),storagePortURIs);      List<StoragePort> storagePorts=_dbClient.queryObject(StoragePort.class,storagePortURIs);      if (!metricsValid(storagePorts)) {        _log.info(String.format("Port metrics not valid for array %s (%s), using 50.0 percent for array metric",storageDevice.getLabel(),storageSystemURI.toString()));        storageDevice.setAveragePortMetrics(-1.0);        _dbClient.updateObject(storageDevice);        return 50.0;      }      for (      StoragePort storagePort : storagePorts) {        if (isPortUsable(storagePort,false)) {          portMetricsSum+=MetricsKeys.getDouble(MetricsKeys.portMetric,storagePort.getMetrics());          usablePortCount++;        }      }      storageSystemPortsMetrics=(Double.compare(usablePortCount,0) == 0) ? 0.0 : portMetricsSum / usablePortCount;      _log.info(String.format("Array %s metric %f",storageDevice.getLabel(),storageSystemPortsMetrics));      storageDevice.setAveragePortMetrics(storageSystemPortsMetrics);      _dbClient.persistObject(storageDevice);    } else {      URIQueryResultList storageHADomainURIs=new URIQueryResultList();      _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStorageHADomainConstraint(storageSystemURI),storageHADomainURIs);      List<StorageHADomain> storageHADomains=_dbClient.queryObject(StorageHADomain.class,storageHADomainURIs);      if (!isMetricsValid(storageHADomains)) {        _log.info(String.format("CPU usage metrics not valid for array %s (%s), using 50.0 percent for array metric",storageDevice.getLabel(),storageSystemURI.toString()));        storageDevice.setAveragePortMetrics(-1.0);        _dbClient.updateObject(storageDevice);        return 50.0;      }      for (      StorageHADomain storageHADomain : storageHADomains) {        if (!storageHADomain.getInactive()) {          portMetricsSum+=MetricsKeys.getDouble(MetricsKeys.avgCpuPercentBusy,storageHADomain.getMetrics());          usablePortCount++;        }      }      storageSystemPortsMetrics=(Double.compare(usablePortCount,0) == 0) ? 0.0 : portMetricsSum / usablePortCount;      _log.info(String.format("Array %s CPU usage %f",storageDevice.getLabel(),storageSystemPortsMetrics));      storageDevice.setAveragePortMetrics(storageSystemPortsMetrics);      _dbClient.updateObject(storageDevice);    }  }  return storageSystemPortsMetrics;}  }
class C{  public static String methodStatic(){  return "foo";}  }
class C{  public static boolean isBlank(String str){  if (str == null || str.length() == 0) {    return true;  }  for (  char c : str.toCharArray()) {    if (!Character.isWhitespace(c)) {      return false;    }  }  return true;}  }
class C{  public void closeSequence() throws BerException {  if (stackBuf[stackTop - 1] == next) {    stackTop--;  } else {    throw new BerException();  }}  }
class C{  public static void updateStyles(Component c){  if (c instanceof JComponent) {    String name=c.getName();    c.setName(null);    if (name != null) {      c.setName(name);    }    ((JComponent)c).revalidate();  }  Component[] children=null;  if (c instanceof JMenu) {    children=((JMenu)c).getMenuComponents();  } else   if (c instanceof Container) {    children=((Container)c).getComponents();  }  if (children != null) {    for (    Component child : children) {      updateStyles(child);    }  }  c.repaint();}  }
class C{  public void updateAccountTime(String timeStamp){  try {    _log.debug("updateAccountTime:" + timeStamp);    for (    String accountNumber : m_accountRequests.keySet()) {      Account account=m_accountRequests.get(accountNumber);synchronized (account) {        if (account.isDirty()) {          account.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());          account=m_tradePersistentModel.persistAspect(account,true);          m_accountRequests.replace(accountNumber,account);          this.fireUpdateAccountTime(accountNumber);        }      }    }  } catch (  Exception ex) {    error(0,3310,"Errors updating Trade Account: " + ex.getMessage());  }}  }
class C{  public static <T1>MTuple1<T1> match(final T1 v){  return null;}  }
class C{  public void deleteRecords(String cfName,String[] ids,boolean force){  for (  String id : ids) {    try {      delete(id,cfName,force);    } catch (    Exception e) {      System.err.println("Caught exception" + e);      log.error("Caught Exception: ",e);    }  }}  }
class C{  public static void waitForOrKill(Process self,long numberOfMillis){  ProcessRunner runnable=new ProcessRunner(self);  Thread thread=new Thread(runnable);  thread.start();  runnable.waitForOrKill(numberOfMillis);}  }
class C{  public MoviesNavigatorView(){}  }
class C{  public FluentTriFunction<T1,T2,T3,R> after(final QuadConsumer<T1,T2,T3,R> action){  return withFn(null);}  }
class C{  public ClassSource find(String className){  String fileName=className.replace('.','/') + ".class";  SourceLocator.FoundFile file=SourceLocator.v().lookupInClassPath(fileName);  if (file == null)   return null;  return new CoffiClassSource(className,file.inputStream());}  }
class C{  @Override public void doRender(Entity p_76986_1_,double p_76986_2_,double p_76986_4_,double p_76986_6_,float p_76986_8_,float p_76986_9_){  this.doRender((PlasmaBolt)p_76986_1_,p_76986_2_,p_76986_4_,p_76986_6_,p_76986_8_,p_76986_9_);}  }
class C{  public void discardAllEdits(){  undoManager.discardAllEdits();}  }
class C{  public static void writeJSONString(List list,Writer out) throws IOException {  if (list == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=list.iterator();  out.write('[');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Object value=iter.next();    if (value == null) {      out.write("null");      continue;    }    JSONValue.writeJSONString(value,out);  }  out.write(']');}  }
class C{  @Override protected void resetupConnection(){}  }
class C{  public void testValueOfDocType12() throws Exception {  DocType docType=new DocType("application",ApplicationXmlVersion.V1_2.getPublicId(),ApplicationXmlVersion.V1_2.getSystemId());  assertEquals(ApplicationXmlVersion.V1_2,ApplicationXmlVersion.valueOf(docType));}  }
class C{  public boolean isMissingAt(int rowIndex,int columnIndex){  boolean result;  result=false;  if ((rowIndex >= 0) && (rowIndex < getRowCount()) && (columnIndex > 0)&& (columnIndex < getColumnCount())) {    result=(m_Data.instance(rowIndex).isMissing(columnIndex - 1));  }  return result;}  }
class C{  public void ReInit(SimpleCharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  public int countRowsByCodigoRelacion(String codigoRelacion){  StringBuffer qual=new StringBuffer(DBUtils.WHERE).append(DBUtils.generateEQTokenField(ID_RELACION_FIELD,codigoRelacion));  return getVOCount(qual.toString(),TABLE_NAME);}  }
class C{  public TrAXFilter(Templates templates) throws TransformerConfigurationException {  m_templates=templates;  m_transformer=(TransformerImpl)templates.newTransformer();}  }
class C{  public boolean isPrivileged(){  return privileged;}  }
class C{  public ObjectFactory(){}  }
class C{  @Override public boolean isTrialLicense(License license){  return false;}  }
class C{  public TableHeaderView(final Context context){  super(context);  setOrientation(LinearLayout.HORIZONTAL);  setGravity(Gravity.CENTER_VERTICAL);  final LayoutParams layoutParams=new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  setLayoutParams(layoutParams);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.882 -0400",hash_original_method="FD5A39B36982792EEF1A803F6631F17B",hash_generated_method="822B63CAD49D3B1E46C60C099810924B") public static IOFileFilter sizeFileFilter(long threshold,boolean acceptLarger){  return new SizeFileFilter(threshold,acceptLarger);}  }
class C{  @ExceptionHandler(HttpRequestMethodNotSupportedException.class) @ResponseBody @ResponseStatus(HttpStatus.METHOD_NOT_ALLOWED) public String handleException(final HttpRequestMethodNotSupportedException e){  return convertErrorAsJson(e.getMessage());}  }
class C{  public static Bitmap doBlur(Bitmap sentBitmap,int radius,boolean canReuseInBitmap){  Bitmap bitmap;  if (canReuseInBitmap) {    bitmap=sentBitmap;  } else {    bitmap=sentBitmap.copy(sentBitmap.getConfig(),true);  }  if (radius < 1) {    return (null);  }  int w=bitmap.getWidth();  int h=bitmap.getHeight();  int[] pix=new int[w * h];  bitmap.getPixels(pix,0,w,0,0,w,h);  int wm=w - 1;  int hm=h - 1;  int wh=w * h;  int div=radius + radius + 1;  int r[]=new int[wh];  int g[]=new int[wh];  int b[]=new int[wh];  int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;  int vmin[]=new int[Math.max(w,h)];  int divsum=(div + 1) >> 1;  divsum*=divsum;  int dv[]=new int[256 * divsum];  for (i=0; i < 256 * divsum; i++) {    dv[i]=(i / divsum);  }  yw=yi=0;  int[][] stack=new int[div][3];  int stackpointer;  int stackstart;  int[] sir;  int rbs;  int r1=radius + 1;  int routsum, goutsum, boutsum;  int rinsum, ginsum, binsum;  for (y=0; y < h; y++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    for (i=-radius; i <= radius; i++) {      p=pix[yi + Math.min(wm,Math.max(i,0))];      sir=stack[i + radius];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rbs=r1 - Math.abs(i);      rsum+=sir[0] * rbs;      gsum+=sir[1] * rbs;      bsum+=sir[2] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }    }    stackpointer=radius;    for (x=0; x < w; x++) {      r[yi]=dv[rsum];      g[yi]=dv[gsum];      b[yi]=dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (y == 0) {        vmin[x]=Math.min(x + radius + 1,wm);      }      p=pix[yw + vmin[x]];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[(stackpointer) % div];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi++;    }    yw+=w;  }  for (x=0; x < w; x++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    yp=-radius * w;    for (i=-radius; i <= radius; i++) {      yi=Math.max(0,yp) + x;      sir=stack[i + radius];      sir[0]=r[yi];      sir[1]=g[yi];      sir[2]=b[yi];      rbs=r1 - Math.abs(i);      rsum+=r[yi] * rbs;      gsum+=g[yi] * rbs;      bsum+=b[yi] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }      if (i < hm) {        yp+=w;      }    }    yi=x;    stackpointer=radius;    for (y=0; y < h; y++) {      pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (x == 0) {        vmin[y]=Math.min(y + r1,hm) * w;      }      p=x + vmin[y];      sir[0]=r[p];      sir[1]=g[p];      sir[2]=b[p];      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[stackpointer];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi+=w;    }  }  bitmap.setPixels(pix,0,w,0,0,w,h);  return (bitmap);}  }
class C{  static Type smallUnderlyingType(Type type){  Type result;  if (type.isInteger()) {    result=type.withoutUnderlyingType();    result.setUnderlyingType("int");    return result;  } else   if (type.isFloat()) {    result=type.withoutUnderlyingType();    result.setUnderlyingType("float");  } else   if (type.isCharacter()) {    result=type.withoutUnderlyingType();    result.setUnderlyingType("char");  } else {    result=type;  }  return result;}  }
class C{  private LinkedList<Diff> diff_main(String text1,String text2,boolean checklines,long deadline){  if (text1 == null || text2 == null) {    throw new IllegalArgumentException("Null inputs. (diff_main)");  }  LinkedList<Diff> diffs;  if (text1.equals(text2)) {    diffs=new LinkedList<Diff>();    if (text1.length() != 0) {      diffs.add(new Diff(Operation.EQUAL,text1));    }    return diffs;  }  int commonlength=diff_commonPrefix(text1,text2);  String commonprefix=text1.substring(0,commonlength);  text1=text1.substring(commonlength);  text2=text2.substring(commonlength);  commonlength=diff_commonSuffix(text1,text2);  String commonsuffix=text1.substring(text1.length() - commonlength);  text1=text1.substring(0,text1.length() - commonlength);  text2=text2.substring(0,text2.length() - commonlength);  diffs=diff_compute(text1,text2,checklines,deadline);  if (commonprefix.length() != 0) {    diffs.addFirst(new Diff(Operation.EQUAL,commonprefix));  }  if (commonsuffix.length() != 0) {    diffs.addLast(new Diff(Operation.EQUAL,commonsuffix));  }  diff_cleanupMerge(diffs);  return diffs;}  }
class C{  private void initResourcesIfNecessary(){  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(wheelForeground);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }  setBackgroundResource(wheelBackground);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:35.212 -0500",hash_original_method="048650AFF94B01A571A17F813CE8142B",hash_generated_method="570265486E6BAC8556276C3D4D46AB4B") public boolean dismissPopupMenus(){  boolean result=hideOverflowMenu();  result|=hideSubMenus();  return result;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void validateVarEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  node.validateVarId(var,data);}  }
class C{  static public String listToString(List<String> list){  StringBuilder builder=new StringBuilder();  int itemCount=0;  for (  String value : list) {    itemCount++;    if (itemCount > 1) {      builder.append(",");    }    builder.append(value);  }  return builder.toString();}  }
class C{  public boolean sizeMatches(int w,int h){  return (w == getTargetWidth() && h == getTargetHeight());}  }
class C{  public CTabbedPane(CompiereColor bg){  super();  init();  setBackgroundColor(bg);}  }
class C{  public Insertion(double probability){  super();  this.probability=probability;}  }
class C{  public void addListener(ColorMapListener listener){  listeners.add(listener);}  }
class C{  public boolean retainEntries(TObjectDoubleProcedure<K> procedure){  boolean modified=false;  K[] keys=(K[])_set;  double[] values=_values;  stopCompactingOnRemove();  try {    for (int i=keys.length; i-- > 0; ) {      if (keys[i] != null && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {        removeAt(i);        modified=true;      }    }  }  finally {    startCompactingOnRemove(modified);  }  return modified;}  }
class C{  public static NamingException mapErrorCode(int errorCode,String errorMessage){  if (errorCode == LdapClient.LDAP_SUCCESS)   return null;  NamingException e=null;  String message=LdapClient.getErrorMessage(errorCode,errorMessage);switch (errorCode) {case LdapClient.LDAP_ALIAS_DEREFERENCING_PROBLEM:    e=new NamingException(message);  break;case LdapClient.LDAP_ALIAS_PROBLEM:e=new NamingException(message);break;case LdapClient.LDAP_ATTRIBUTE_OR_VALUE_EXISTS:e=new AttributeInUseException(message);break;case LdapClient.LDAP_AUTH_METHOD_NOT_SUPPORTED:case LdapClient.LDAP_CONFIDENTIALITY_REQUIRED:case LdapClient.LDAP_STRONG_AUTH_REQUIRED:case LdapClient.LDAP_INAPPROPRIATE_AUTHENTICATION:e=new AuthenticationNotSupportedException(message);break;case LdapClient.LDAP_ENTRY_ALREADY_EXISTS:e=new NameAlreadyBoundException(message);break;case LdapClient.LDAP_INVALID_CREDENTIALS:case LdapClient.LDAP_SASL_BIND_IN_PROGRESS:e=new AuthenticationException(message);break;case LdapClient.LDAP_INAPPROPRIATE_MATCHING:e=new InvalidSearchFilterException(message);break;case LdapClient.LDAP_INSUFFICIENT_ACCESS_RIGHTS:e=new NoPermissionException(message);break;case LdapClient.LDAP_INVALID_ATTRIBUTE_SYNTAX:case LdapClient.LDAP_CONSTRAINT_VIOLATION:e=new InvalidAttributeValueException(message);break;case LdapClient.LDAP_LOOP_DETECT:e=new NamingException(message);break;case LdapClient.LDAP_NO_SUCH_ATTRIBUTE:e=new NoSuchAttributeException(message);break;case LdapClient.LDAP_NO_SUCH_OBJECT:e=new NameNotFoundException(message);break;case LdapClient.LDAP_OBJECT_CLASS_MODS_PROHIBITED:case LdapClient.LDAP_OBJECT_CLASS_VIOLATION:case LdapClient.LDAP_NOT_ALLOWED_ON_RDN:e=new SchemaViolationException(message);break;case LdapClient.LDAP_NOT_ALLOWED_ON_NON_LEAF:e=new ContextNotEmptyException(message);break;case LdapClient.LDAP_OPERATIONS_ERROR:e=new NamingException(message);break;case LdapClient.LDAP_OTHER:e=new NamingException(message);break;case LdapClient.LDAP_PROTOCOL_ERROR:e=new CommunicationException(message);break;case LdapClient.LDAP_SIZE_LIMIT_EXCEEDED:e=new SizeLimitExceededException(message);break;case LdapClient.LDAP_TIME_LIMIT_EXCEEDED:e=new TimeLimitExceededException(message);break;case LdapClient.LDAP_UNAVAILABLE_CRITICAL_EXTENSION:e=new OperationNotSupportedException(message);break;case LdapClient.LDAP_UNAVAILABLE:case LdapClient.LDAP_BUSY:e=new ServiceUnavailableException(message);break;case LdapClient.LDAP_UNDEFINED_ATTRIBUTE_TYPE:e=new InvalidAttributeIdentifierException(message);break;case LdapClient.LDAP_UNWILLING_TO_PERFORM:e=new OperationNotSupportedException(message);break;case LdapClient.LDAP_COMPARE_FALSE:case LdapClient.LDAP_COMPARE_TRUE:case LdapClient.LDAP_IS_LEAF:e=new NamingException(message);break;case LdapClient.LDAP_ADMIN_LIMIT_EXCEEDED:e=new LimitExceededException(message);break;case LdapClient.LDAP_REFERRAL:e=new NamingException(message);break;case LdapClient.LDAP_PARTIAL_RESULTS:e=new NamingException(message);break;case LdapClient.LDAP_INVALID_DN_SYNTAX:case LdapClient.LDAP_NAMING_VIOLATION:e=new InvalidNameException(message);break;default :e=new NamingException(message);break;}return e;}  }
class C{  public static boolean isvulnerabilityFound(IBurpExtenderCallbacks callbacks,String vulnerabilityName,String protocol,String host){  IScanIssue[] allIssues;  allIssues=callbacks.getScanIssues(protocol + "://" + host);  for (  IScanIssue a : allIssues) {    if (a.getIssueName().contains(vulnerabilityName)) {      return true;    }  }  return false;}  }
class C{  public void testComputeLocationWhenAnyPackagingWithDeployableTypeFile() throws Exception {  Deployable deployableElement=new Deployable();  deployableElement.setGroupId("projectGroupId");  deployableElement.setArtifactId("projectArtifactId");  deployableElement.setType("file");  this.mockLog.expects(never()).method("warn");  String location=deployableElement.computeLocation(createDefaultProject("somerandompackaging",null));  assertTrue(location,location.endsWith("projectFinalName.somerandompackaging"));}  }
class C{  private static int compareLobContents(final IonLob lob1,final IonLob lob2){  int in1=lob1.byteSize();  int in2=lob2.byteSize();  int result=(in1 - in2);  if (result == 0) {    final InputStream stream1=lob1.newInputStream();    final InputStream stream2=lob2.newInputStream();    try {      try {        try {          while (result == 0) {            in1=stream1.read();            in2=stream2.read();            if (in1 == -1 || in2 == -1) {              if (in1 != -1)               result=1;              if (in2 != -1)               result=-1;              break;            }            result=(in1 - in2);          }        }  finally {          stream1.close();        }      }  finally {        stream2.close();      }    } catch (    final IOException e) {      throw new IonException(e);    }  }  return result;}  }
class C{  public static boolean isNumericString(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }    if (('0' <= ch && ch <= '9') || ch == ' ') {      continue;    }    return false;  }  return true;}  }
class C{  public void keyPressed(GraphicsNodeKeyEvent evt){  if (!isDown) {    isDown=true;    dispatchKeyboardEvent("keydown",evt);  }  if (evt.getKeyChar() == KeyEvent.CHAR_UNDEFINED) {    dispatchTextEvent(evt);  }}  }
class C{  public boolean authenticate(){  if (!this.members.containsKey("authenticate"))   return false;  return Boolean.valueOf(this.members.get("authenticate"));}  }
class C{  public static List<org.oscm.vo.VOServiceReview> convertToApiVOServiceReview(List<org.oscm.internal.vo.VOServiceReview> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOServiceReview> newVO=new ArrayList<org.oscm.vo.VOServiceReview>();  for (  org.oscm.internal.vo.VOServiceReview tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public void addAggregatedValue(final String field,final String fieldValue,final long aggregationValue) throws RequiredInputMissingException {  if (StringUtils.isBlank(field))   throw new RequiredInputMissingException("Missing required input for parameter 'field'");  if (StringUtils.isBlank(fieldValue))   throw new RequiredInputMissingException("Missing required input for parameter 'fieldValue'");  String fieldKey=StringUtils.lowerCase(StringUtils.trim(field));  Map<String,Long> fieldAggregationValues=this.aggregatedValues.get(fieldKey);  if (fieldAggregationValues == null)   fieldAggregationValues=new HashMap<>();  fieldAggregationValues.put(fieldValue,aggregationValue);  this.aggregatedValues.put(fieldKey,fieldAggregationValues);}  }
class C{  protected void encodeFields(mxCodec enc,Object obj,Node node){  Class type=obj.getClass();  while (type != null) {    Field[] fields=type.getDeclaredFields();    for (int i=0; i < fields.length; i++) {      Field f=fields[i];      if ((f.getModifiers() & Modifier.TRANSIENT) != Modifier.TRANSIENT) {        String fieldname=f.getName();        Object value=getFieldValue(obj,fieldname);        encodeValue(enc,obj,fieldname,value,node);      }    }    type=type.getSuperclass();  }}  }
class C{  synchronized void split(){  CompilerAsserts.neverPartOfCompilation();  if (splitCallTarget != null) {    return;  }  assert isCallTargetCloningAllowed();  OptimizedCallTarget currentTarget=getCallTarget();  OptimizedCallTarget splitTarget=getCallTarget().cloneUninitialized();  if (callCount >= 1) {    currentTarget.decrementKnownCallSites();  }  splitTarget.incrementKnownCallSites();  if (getParent() != null) {    replace(this,"Split call node");  }  splitCallTarget=splitTarget;  runtime.getCompilationNotify().notifyCompilationSplit(this);}  }
class C{  public void printHelp(String cmdLineSyntax,String header,Options options,String footer){  printHelp(cmdLineSyntax,header,options,footer,false);}  }
class C{  private void showError(String error){  setPageStatus(2);switch (error) {case "network":    errorView.setSubtitle(R.string.network_error);  break;case "token":errorView.setSubtitle(R.string.error_token);break;case "notFound":errorView.setSubtitle(R.string.error_not_found);break;case "captcha":errorView.setSubtitle(R.string.error_captcha);break;default :errorView.setSubtitle(getString(R.string.error) + ": " + error);break;}}  }
class C{  public static byte[] tauAdicNaf(byte mu,ZTauElement lambda){  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger norm=norm(mu,lambda);  int log2Norm=norm.bitLength();  int maxLength=log2Norm > 30 ? log2Norm + 4 : 34;  byte[] u=new byte[maxLength];  int i=0;  int length=0;  BigInteger r0=lambda.u;  BigInteger r1=lambda.v;  while (!((r0.equals(ECConstants.ZERO)) && (r1.equals(ECConstants.ZERO)))) {    if (r0.testBit(0)) {      u[i]=(byte)ECConstants.TWO.subtract((r0.subtract(r1.shiftLeft(1))).mod(ECConstants.FOUR)).intValue();      if (u[i] == 1) {        r0=r0.clearBit(0);      } else {        r0=r0.add(ECConstants.ONE);      }      length=i;    } else {      u[i]=0;    }    BigInteger t=r0;    BigInteger s=r0.shiftRight(1);    if (mu == 1) {      r0=r1.add(s);    } else {      r0=r1.subtract(s);    }    r1=t.shiftRight(1).negate();    i++;  }  length++;  byte[] tnaf=new byte[length];  System.arraycopy(u,0,tnaf,0,length);  return tnaf;}  }
class C{  private static boolean contains(Value[] increments,Register register){  for (  Value increment : increments) {    if (isRegister(increment) && asRegister(increment).equals(register)) {      return true;    }  }  return false;}  }
class C{  public static String cacheRecommendationsAndCreateNewUUID(String client,String userId,Set<Integer> dimensions,String currentUUID,List<Long> recs,String algKey,Long currentItemId,int numRecentActions,ClientStrategy strat,String recTag){  String counterKey=MemCacheKeys.getRecommendationListUserCounter(client,dimensions,userId);  Integer userRecCounter=(Integer)MemCachePeer.get(counterKey);  if (userRecCounter == null)   userRecCounter=0;  try {    userRecCounter++;    String recsList=CollectionTools.join(recs,":");    String abTestingKey=strat.getName(userId,recTag);    CtrLogger.log(false,client,algKey,-1,userId,"" + userRecCounter,currentItemId,numRecentActions,recsList,abTestingKey,recTag);    MemCachePeer.put(MemCacheKeys.getRecommendationListUUID(client,userId,userRecCounter,recTag),new LastRecommendationBean(algKey,recs),MEMCACHE_EXCLUSIONS_EXPIRE_SECS);    MemCachePeer.put(counterKey,userRecCounter,MEMCACHE_EXCLUSIONS_EXPIRE_SECS);  } catch (  NumberFormatException e) {    logger.error("Can decode user UUID as integer: " + currentUUID);  }  return "" + userRecCounter;}  }
class C{  public Builder withVerifyPeer(boolean verifyPeer){  disqueURI.setVerifyPeer(verifyPeer);  return this;}  }
class C{  @SuppressWarnings("unchecked") protected GenericServiceAPIResponseEntity<String> postEntitiesWithService(String resourceURL,List<? extends TaggedLogAPIEntity> entities,String serviceName) throws JsonMappingException, JsonGenerationException, IOException {  final String json=marshall(entities);  final WebResource r=getWebResource(resourceURL);  return putAuthHeaderIfNeeded(r.queryParam(SERVICE_NAME,serviceName).accept(DEFAULT_MEDIA_TYPE)).header(CONTENT_TYPE,DEFAULT_HTTP_HEADER_CONTENT_TYPE).post(GenericServiceAPIResponseEntity.class,json);}  }
class C{  public ColorfulSquare(float r,float g,float b,float a){  ByteBuffer bb=ByteBuffer.allocateDirect(squareCoords.length * 4);  bb.order(ByteOrder.nativeOrder());  vertexBuffer=bb.asFloatBuffer();  vertexBuffer.put(squareCoords);  vertexBuffer.position(0);  ByteBuffer dlb=ByteBuffer.allocateDirect(drawOrder.length * 2);  dlb.order(ByteOrder.nativeOrder());  drawListBuffer=dlb.asShortBuffer();  drawListBuffer.put(drawOrder);  drawListBuffer.position(0);  color=new float[]{r,g,b,a};}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void quickReply(String text){  if (quickReplySmsMessage != null) {    if (quickReplySmsMessage.isMms() || quickReplySmsMessage.isEmail()) {      replyToMessage();    } else {      updateQuickReplyView(text);      showDialog(DIALOG_QUICKREPLY);    }  }}  }
class C{  public void testSkipRawBytesBug() throws Exception {  byte[] rawBytes=new byte[]{1,2};  CodedInputStream input=CodedInputStream.newInstance(rawBytes);  int limit=input.pushLimit(1);  input.skipRawBytes(1);  input.popLimit(limit);  assertEquals(2,input.readRawByte());}  }
class C{  @Override public boolean updateData(){  try {    if (!this.isConnected()) {      return false;    }    cluster.getDeletedMembers().clear();    for (    Entry<String,Cluster.Member> memberSet : cluster.getMembersHMap().entrySet()) {      cluster.getDeletedMembers().add(memberSet.getKey());    }    cluster.getDeletedRegions().clear();    for (    Cluster.Region region : cluster.getClusterRegions().values()) {      cluster.getDeletedRegions().add(region.getFullPath());    }    this.systemMBeans=this.mbs.queryNames(this.MBEAN_OBJECT_NAME_SYSTEM_DISTRIBUTED,null);    for (    ObjectName sysMBean : this.systemMBeans) {      updateClusterSystem(sysMBean);    }    Set<ObjectName> regionMBeans=this.mbs.queryNames(this.MBEAN_OBJECT_NAME_REGION_DISTRIBUTED,null);    Set<ObjectName> tableMBeans=this.mbs.queryNames(this.MBEAN_OBJECT_NAME_TABLE_AGGREGATE,null);    if (PulseConstants.PRODUCT_NAME_SQLFIRE.equalsIgnoreCase(PulseController.getPulseProductSupport())) {      for (      ObjectName tableMBean : tableMBeans) {        String regNameFromTable=StringUtils.getRegionNameFromTableName(tableMBean.getKeyProperty("table"));        for (        ObjectName regionMBean : regionMBeans) {          String regionName=regionMBean.getKeyProperty("name");          if (regNameFromTable.equals(regionName)) {            updateClusterRegion(regionMBean);            cluster.setTotalRegionCount(cluster.getTotalRegionCount() + 1);            break;          }        }      }    } else {      for (      ObjectName regMBean : regionMBeans) {        updateClusterRegion(regMBean);      }    }    for (Iterator<String> it=cluster.getDeletedRegions().iterator(); it.hasNext(); ) {      cluster.removeClusterRegion(it.next());    }    Set<ObjectName> memberMBeans=this.mbs.queryNames(this.MBEAN_OBJECT_NAME_MEMBER,null);    for (    ObjectName memMBean : memberMBeans) {      String service=memMBean.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_SERVICE);      if (service == null) {        updateClusterMember(memMBean);      } else {switch (service) {case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_REGION:          if (PulseConstants.PRODUCT_NAME_SQLFIRE.equalsIgnoreCase(PulseController.getPulseProductSupport())) {            for (            ObjectName tableMBean : tableMBeans) {              String regNameFromTable=StringUtils.getRegionNameFromTableName(tableMBean.getKeyProperty("table"));              String regionName=memMBean.getKeyProperty("name");              if (regNameFromTable.equals(regionName)) {                updateMemberRegion(memMBean);                break;              }            }          } else {            updateMemberRegion(memMBean);          }        break;case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_CACHESERVER:      updateMemberClient(memMBean);    break;case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_GATEWAYRECEIVER:  updateGatewayReceiver(memMBean);break;case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_GATEWAYSENDER:updateGatewaySender(memMBean);break;case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_ASYNCEVENTQUEUE:updateAsyncEventQueue(memMBean);break;case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_LOCATOR:updateClusterMember(memMBean);break;}}}Set<ObjectName> statementObjectNames=this.mbs.queryNames(this.MBEAN_OBJECT_NAME_STATEMENT_DISTRIBUTED,null);for (ObjectName stmtObjectName : statementObjectNames) {updateClusterStatement(stmtObjectName);}} catch (IOException ioe) {StringWriter swBuffer=new StringWriter();PrintWriter prtWriter=new PrintWriter(swBuffer);ioe.printStackTrace(prtWriter);LOGGER.severe("IOException Details : " + swBuffer.toString() + "\n");this.mbs=null;if (this.conn != null) {try {this.conn.close();} catch (IOException e1) {LOGGER.severe("Error closing JMX connection " + swBuffer.toString() + "\n");}}return false;}Iterator<String> iterator=cluster.getDeletedMembers().iterator();while (iterator.hasNext()) {String memberKey=iterator.next();if (cluster.getMembersHMap().containsKey(memberKey)) {Cluster.Member member=cluster.getMembersHMap().get(memberKey);List<Cluster.Member> memberArrList=cluster.getPhysicalToMember().get(member.getHost());if (memberArrList != null) {if (memberArrList.contains(member)) {String host=member.getHost();cluster.getPhysicalToMember().get(member.getHost()).remove(member);if (cluster.getPhysicalToMember().get(member.getHost()).size() == 0) {cluster.getPhysicalToMember().remove(host);}}}cluster.getMembersHMap().remove(memberKey);}}return true;}  }
class C{  public static boolean isEmpty(final int[] array){  return array == null || array.length == 0;}  }
class C{  public void clearAll(){  int itemCount=productImagesUrls.size();  if (itemCount > 0) {    productImagesUrls.clear();    notifyItemRangeRemoved(0,itemCount);  }}  }
class C{  public static Workload createWorkload(){  return Workload.builder().name("Test Workload " + generateStringOfLength(15)).build();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.000 -0500",hash_original_method="E88D028A2F4D25267A398506CBA854E6",hash_generated_method="E88D028A2F4D25267A398506CBA854E6") ScheduledFutureTask(Callable<V> callable,long ns){  super(callable);  this.time=ns;  this.period=0;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  private boolean releaseLock(InternalDistributedMember member,int lockId){  if (lockId == -1)   return false;  checkDestroyed();  if (isLeaseHeldBy(member,lockId)) {    if (logger.isTraceEnabled(LogMarker.DLS)) {      logger.trace(LogMarker.DLS,"[DLockGrantToken.releaseLock] releasing ownership: {}",this);    }    this.lessee=null;    this.leaseId=-1;    this.lesseeThread=null;    this.leaseExpireTime=-1;    return true;  }  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"[DLockGrantToken.releaseLock] {} attempted to release: {}",member,this);  }  return false;}  }
class C{  public void processServerResponse(int response,com.google.android.vending.licensing.ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(Long.toString(System.currentTimeMillis() + MILLIS_PER_MINUTE));    Set<String> keys=extras.keySet();    for (    String key : keys) {      if (key.equals("VT")) {        setValidityTimestamp(extras.get(key));      } else       if (key.equals("GT")) {        setRetryUntil(extras.get(key));      } else       if (key.equals("GR")) {        setMaxRetries(extras.get(key));      } else       if (key.startsWith("FILE_URL")) {        int index=Integer.parseInt(key.substring("FILE_URL".length())) - 1;        setExpansionURL(index,extras.get(key));      } else       if (key.startsWith("FILE_NAME")) {        int index=Integer.parseInt(key.substring("FILE_NAME".length())) - 1;        setExpansionFileName(index,extras.get(key));      } else       if (key.startsWith("FILE_SIZE")) {        int index=Integer.parseInt(key.substring("FILE_SIZE".length())) - 1;        setExpansionFileSize(index,Long.parseLong(extras.get(key)));      }    }  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  public void temporaryLoggingContext(String contextName,Runnable operation){  LoggingContext.temporarilyForConnector("MySQL",serverName(),contextName,operation);}  }
class C{  public void characters(String chars) throws SAXException {  final int length=chars.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  chars.getChars(0,length,m_charsBuff,0);  this.characters(m_charsBuff,0,length);}  }
class C{  public void printErrorNoLog(){  Diagnostic.errorNoLog(mErrorType,mErrorArguments);}  }
class C{  public double mod2(){  return (x * x + y * y + z * z);}  }
class C{  private void initializeWorld(World world){  world.setGameRuleValue("mobGreifing","false");}  }
class C{  public void stopWork(){  if (DEBUG) {    CLog.d(LOG_TAG,"work_status: stopWork %s",this);  }  mExitTasksEarly=true;  setPause(false);  flushFileCache();}  }
class C{  public final <T2>Flux<Tuple2<T,T2>> zipWith(Publisher<? extends T2> source2,int prefetch){  return zipWith(source2,prefetch,tuple2Function());}  }
class C{  protected BasicArchImpl(int id,String name){  _id=id;  _name=name;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WReport.init");}  }
class C{  public void actionPerformed(ActionEvent e){  DefaultMutableTreeNode lastItem=getSelectedNode();  DefaultMutableTreeNode parent;  if (lastItem != null) {    parent=(DefaultMutableTreeNode)lastItem.getParent();    if (parent == null) {      parent=(DefaultMutableTreeNode)treeModel.getRoot();      lastItem=null;    }  } else {    parent=(DefaultMutableTreeNode)treeModel.getRoot();  }  if (parent == null) {    treeModel.setRoot(createNewNode("Added " + Integer.toString(addCount++)));  } else {    int newIndex;    if (lastItem == null) {      newIndex=treeModel.getChildCount(parent);    } else {      newIndex=parent.getIndex(lastItem) + 1;    }    treeModel.insertNodeInto(createNewNode("Added " + Integer.toString(addCount++)),parent,newIndex);  }}  }
class C{  public MockElement(String nodeName){  name=nodeName;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 <= z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 <= constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row <= rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 < constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ServerContextBuilder teamProject(final String teamProjectName){  this.teamProjectReference=new TeamProjectReference();  this.teamProjectReference.setName(teamProjectName);  return this;}  }
class C{  private void assertEqualStreams(InputStream expIn,IgfsInputStream actIn,@Nullable Long expSize,@Nullable Long seek) throws IOException {  if (seek != null)   expIn.skip(seek);  int bufSize=2345;  byte buf1[]=new byte[bufSize];  byte buf2[]=new byte[bufSize];  long pos=0;  long start=System.currentTimeMillis();  while (true) {    int read=(int)Math.min(bufSize,expSize - pos);    int i1;    if (seek == null)     i1=actIn.read(buf1,0,read); else     if (seek % 2 == 0)     i1=actIn.read(pos + seek,buf1,0,read); else {      i1=read;      actIn.readFully(pos + seek,buf1,0,read);    }    int i2=expIn.read(buf2,0,Math.max(0,Math.min(i1,read)));    if (i1 != i2) {      fail("Expects the same data [read=" + read + ", pos="+ pos+ ", seek="+ seek+ ", i1="+ i1+ ", i2="+ i2+ ']');    }    if (i1 == -1)     break;    assertTrue("Expects the same data [read=" + read + ", pos="+ pos+ ", seek="+ seek+ ", i1="+ i1+ ", i2="+ i2+ ']',Arrays.equals(buf1,buf2));    if (read == 0)     break;    pos+=i1;  }  if (expSize != null)   assertEquals(expSize.longValue(),pos);  long time=System.currentTimeMillis() - start;  if (time != 0 && log.isInfoEnabled()) {    log.info(String.format("Streams were compared in continuous reading " + "[size=%7d, rate=%3.1f MB/sec]",expSize,expSize * 1000. / time / 1024 / 1024));  }}  }
class C{  public static boolean checkName(String name){  return (name != null);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + TABLE_NAME;  db.execSQL(sql);}  }
class C{  public Boolean next(BiFunction<Boolean,String,Boolean> getline){  String s=null;  try {    s=br.readLine();    lineno++;  } catch (  IOException ex) {    Logger.getLogger(LineReaderCtx.class.getName()).log(Level.SEVERE,null,ex);  }  return getline.apply(s == null || error,s);}  }
class C{  public final void entityReference(String name) throws org.xml.sax.SAXException {  try {    final java.io.Writer writer=m_writer;    writer.write('&');    writer.write(name);    writer.write(';');  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public double nextGaussian(){  return random.nextGaussian();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  protected JMenuItem createMenuItem(String cmd){  JMenuItem mi=new JMenuItem(getResourceString(cmd + labelSuffix));  URL url=getResource(cmd + imageSuffix);  if (url != null) {    mi.setHorizontalTextPosition(JButton.RIGHT);    mi.setIcon(new ImageIcon(url));  }  String astr=getProperty(cmd + actionSuffix);  if (astr == null) {    astr=cmd;  }  mi.setActionCommand(astr);  Action a=getAction(astr);  if (a != null) {    mi.addActionListener(a);    a.addPropertyChangeListener(createActionChangeListener(mi));    mi.setEnabled(a.isEnabled());  } else {    mi.setEnabled(false);  }  return mi;}  }
class C{  public void testExpandToDirectory() throws Exception {  String filePath="/foo/bar.tar";  File file=new File(filePath);  expect(mockfs.getTemporaryDirectory(EasyMock.<String>anyObject())).andReturn(new File("/test"));  mockfs.makeDirs(EasyMock.<File>anyObject());  EasyMock.expectLastCall().once();  expect(mockcmd.runCommand(EasyMock.<String>anyObject(),EasyMock.<List<String>>anyObject(),EasyMock.<String>anyObject())).andReturn(null);  control.replay();  File directory=creator.expandToDirectory(file);  assertNotNull(directory);  assertEquals("/test",directory.toString());  control.verify();}  }
class C{  @Override public void recordGaugeValue(String key,long value){  Map<String,Long> gauges=ImmutableMap.of(key,value);  recordGaugeValues(gauges);}  }
class C{  public void insert(int i,Key key){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException();  if (contains(i))   throw new IllegalArgumentException("Specified index is already in the queue");  Node<Key> x=new Node<Key>();  x.key=key;  x.index=i;  nodes[i]=x;  size++;  head=insert(x,head);  if (min == null)   min=head; else   min=(greater(min.key,key)) ? head : min;}  }
class C{  public boolean isInline() throws Exception {  return isAttribute();}  }
class C{  public static void storeSourceURL(final Context context,URL url){  PreferenceManager.getDefaultSharedPreferences(context).edit().putString(KEY_SOURCE_URL,url.toExternalForm()).apply();}  }
class C{  protected BusinessObjectDataRestoreDto prepareToFinalizeRestoreImpl(StorageUnitAlternateKeyDto glacierStorageUnitKey){  BusinessObjectDataKey businessObjectDataKey=businessObjectDataHelper.createBusinessObjectDataKeyFromStorageUnitKey(glacierStorageUnitKey);  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataKey);  StorageUnitEntity glacierStorageUnitEntity=getGlacierStorageUnit(businessObjectDataEntity,glacierStorageUnitKey.getStorageName());  String glacierBucketName=storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),glacierStorageUnitEntity.getStorage(),true);  StorageUnitEntity originStorageUnitEntity=getOriginStorageUnit(glacierStorageUnitEntity);  String originBucketName=storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),originStorageUnitEntity.getStorage(),true);  Assert.isTrue(glacierStorageUnitEntity.getDirectoryPath().startsWith(originBucketName + "/"),String.format("Storage directory path \"%s\" for business object data in \"%s\" %s storage does not start with the origin S3 bucket name. " + "Origin S3 bucket name: {%s}, origin storage: {%s}, business object data: {%s}",glacierStorageUnitEntity.getDirectoryPath(),glacierStorageUnitEntity.getStorage().getName(),StoragePlatformEntity.GLACIER,originBucketName,originStorageUnitEntity.getStorage().getName(),businessObjectDataHelper.businessObjectDataEntityAltKeyToString(businessObjectDataEntity)));  String originS3KeyPrefix=StringUtils.removeStart(glacierStorageUnitEntity.getDirectoryPath(),originBucketName + "/");  List<StorageFile> originStorageFiles=storageFileHelper.createStorageFilesFromEntities(originStorageUnitEntity.getStorageFiles());  Assert.isTrue(CollectionUtils.isNotEmpty(originStorageFiles),String.format("Business object data has no storage files registered in \"%s\" origin storage. Business object data: {%s}",originStorageUnitEntity.getStorage().getName(),businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));  BusinessObjectDataRestoreDto businessObjectDataRestoreDto=new BusinessObjectDataRestoreDto();  businessObjectDataRestoreDto.setBusinessObjectDataKey(businessObjectDataKey);  businessObjectDataRestoreDto.setOriginStorageName(originStorageUnitEntity.getStorage().getName());  businessObjectDataRestoreDto.setOriginBucketName(originBucketName);  businessObjectDataRestoreDto.setOriginS3KeyPrefix(originS3KeyPrefix);  businessObjectDataRestoreDto.setOriginStorageFiles(originStorageFiles);  businessObjectDataRestoreDto.setGlacierStorageName(glacierStorageUnitEntity.getStorage().getName());  businessObjectDataRestoreDto.setGlacierBucketName(glacierBucketName);  businessObjectDataRestoreDto.setGlacierS3KeyBasePrefix(originBucketName);  businessObjectDataRestoreDto.setGlacierS3KeyPrefix(glacierStorageUnitEntity.getDirectoryPath());  return businessObjectDataRestoreDto;}  }
class C{  public static ResourceSnippet createResourceSnippet(InputStream is,int startChar,int endChar,String charset){  return createResourceSnippet(getContents(is,charset),startChar,endChar);}  }
class C{  public void logp(Level level,String sourceClass,String sourceMethod,String msg,Throwable thrown){  throw new RuntimeException();}  }
class C{  public boolean isDisjoint(IntervalWindow other){  return !this.end.isAfter(other.start) || !other.end.isAfter(this.start);}  }
class C{  public _BuildReason(final String[] flagStrings){  super(flagStrings);}  }
class C{  public SceneDescriptor loadScene(ProjectContext context,String sceneName) throws FileNotFoundException {  String sceneDir=FilenameUtils.concat(context.path + "/" + ProjectManager.PROJECT_SCENES_DIR,sceneName + "." + ProjectManager.PROJECT_SCENE_EXTENSION);  Input input=new Input(new FileInputStream(sceneDir));  SceneDescriptor sceneDescriptor=kryo.readObjectOrNull(input,SceneDescriptor.class);  return sceneDescriptor;}  }
class C{  public static List<String> readLines(InputStream stream) throws IOException {  return readLines(newReader(stream));}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  @EventHandler public void onPlayerDeath(PlayerDeathEvent event){  for (  Wool wool : getWools(Cardinal.getMatch(event.getWorld()))) {    wool.removePlayerTouched(event.getEntity());  }}  }
class C{  public void test_ticket_1207() throws Exception {  final ValueFactoryImpl vf=ValueFactoryImpl.getInstance();  final Statement[] a=new Statement[]{vf.createStatement(s,p,o),vf.createStatement(p,RDFS.SUBPROPERTYOF,p1)};  final AddOp addOp=new AddOp(Arrays.asList(a));  m_repo.add(addOp);  final GraphQueryResult resultIncludeInferred=m_repo.getStatements(s,null,o,true);  try {    int count=0;    while (resultIncludeInferred.hasNext()) {      resultIncludeInferred.next();      count++;    }    assertEquals(2,count);  }  finally {    resultIncludeInferred.close();  }  final GraphQueryResult resultDoNotIncludeInferred=m_repo.getStatements(s,null,o,false);  try {    int count=0;    while (resultDoNotIncludeInferred.hasNext()) {      resultDoNotIncludeInferred.next();      count++;    }    assertEquals(1,count);  }  finally {    resultDoNotIncludeInferred.close();  }{    final TupleQuery tq=m_repo.getBigdataSailRemoteRepository().getConnection().prepareTupleQuery(QueryLanguage.SPARQL,"SELECT * {?s ?p ?o} LIMIT 100",null);    tq.setBinding("s",s);    tq.setIncludeInferred(true);    final TupleQueryResult tqr=tq.evaluate();    try {      int count=0;      while (tqr.hasNext()) {        tqr.next();        count++;      }      assertEquals(2,count);    }  finally {      tqr.close();    }  }{    final TupleQuery tq=m_repo.getBigdataSailRemoteRepository().getConnection().prepareTupleQuery(QueryLanguage.SPARQL,"SELECT * {?s ?p ?o} LIMIT 100",null);    tq.setBinding("s",s);    tq.setIncludeInferred(false);    final TupleQueryResult tqr=tq.evaluate();    try {      int count=0;      while (tqr.hasNext()) {        System.out.println(tqr.next());        count++;      }      assertEquals(1,count);    }  finally {      tqr.close();    }  }}  }
class C{  @Override public boolean isEmpty(){  return heap.isEmpty();}  }
class C{  private boolean actionSave(){  log.config("");  if (fName.getText().equals("")) {    fName.setBackground(AdempierePLAF.getFieldBackground_Error());    return false;  } else   fName.setBackground(AdempierePLAF.getFieldBackground_Mandatory());  if (fAddress.getC_Location_ID() == 0) {    fAddress.setBackground(AdempierePLAF.getFieldBackground_Error());    return false;  } else   fAddress.setBackground(AdempierePLAF.getFieldBackground_Mandatory());  if (m_partner == null) {    int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());    m_partner=MBPartner.getTemplate(Env.getCtx(),AD_Client_ID);    m_partner.setAD_Org_ID(Env.getAD_Org_ID(Env.getCtx()));    boolean isSOTrx=!"N".equals(Env.getContext(Env.getCtx(),m_WindowNo,"IsSOTrx"));    m_partner.setIsCustomer(isSOTrx);    m_partner.setIsVendor(!isSOTrx);  }  String value=fValue.getText();  if (value == null || value.length() == 0) {    value=DB.getDocumentNo(Env.getAD_Client_ID(Env.getCtx()),"C_BPartner",null,m_partner);    fValue.setText(value);  }  m_partner.setValue(fValue.getText());  m_partner.setName(fName.getText());  m_partner.setName2(fName2.getText());  KeyNamePair p=(KeyNamePair)fGreetingBP.getSelectedItem();  if (p != null && p.getKey() > 0)   m_partner.setC_Greeting_ID(p.getKey()); else   m_partner.setC_Greeting_ID(0);  if (m_partner.save())   log.fine("C_BPartner_ID=" + m_partner.getC_BPartner_ID()); else   ADialog.error(m_WindowNo,this,"BPartnerNotSaved");  if (m_pLocation == null)   m_pLocation=new MBPartnerLocation(m_partner);  m_pLocation.setC_Location_ID(fAddress.getC_Location_ID());  m_pLocation.setPhone(fPhone.getText());  m_pLocation.setPhone2(fPhone2.getText());  m_pLocation.setFax(fFax.getText());  if (m_pLocation.save())   log.fine("C_BPartner_Location_ID=" + m_pLocation.getC_BPartner_Location_ID()); else   ADialog.error(m_WindowNo,this,"BPartnerNotSaved",Msg.translate(Env.getCtx(),"C_BPartner_Location_ID"));  String contact=fContact.getText();  String email=fEMail.getText();  if (m_user == null && (contact.length() > 0 || email.length() > 0))   m_user=new MUser(m_partner);  if (m_user != null) {    if (contact.length() == 0)     contact=fName.getText();    m_user.setName(contact);    m_user.setEMail(email);    m_user.setTitle(fTitle.getText());    p=(KeyNamePair)fGreetingC.getSelectedItem();    if (p != null && p.getKey() > 0)     m_user.setC_Greeting_ID(p.getKey()); else     m_user.setC_Greeting_ID(0);    m_user.setPhone(fPhone.getText());    m_user.setPhone2(fPhone2.getText());    m_user.setFax(fFax.getText());    if (m_user.save())     log.fine("AD_User_ID=" + m_user.getAD_User_ID()); else     ADialog.error(m_WindowNo,this,"BPartnerNotSaved",Msg.translate(Env.getCtx(),"AD_User_ID"));  }  return true;}  }
class C{  protected boolean filterCheck(VisualItem item){  if (filter == null)   return true;  try {    return filter.getBoolean(item);  } catch (  Exception e) {    Logger.getLogger(getClass().getName()).warning(e.getMessage() + "\n" + StringLib.getStackTrace(e));    return false;  }}  }
class C{  public boolean isRegistered(){  boolean result=true;  if (id == File.NOT_REGISTERED) {    result=false;  }  return result;}  }
class C{  public WebSocket removeListeners(List<WebSocketListener> listeners){  mListenerManager.removeListeners(listeners);  return this;}  }
class C{  @Override public boolean isSaveAsAllowed(){  return true;}  }
class C{  public QRDecomposition(final Matrix A,final boolean pivot){  this.A=A;  this.m=A.rows();  this.n=A.cols();  this.ipvt=new int[n];  final Matrix mT=A.clone().toJava().transpose();  final Array rdiag=new Array(n);  final Array wa=new Array(n);  System.out.println("mT (BEFORE) = " + mT);  Minpack.qrfac(m,n,mT,pivot,ipvt,rdiag,rdiag,wa);  System.out.println("mT (AFTER)  = " + mT);  System.out.println("Array ipvt = " + Arrays.toString(ipvt));  System.out.println("Array rdiag = " + rdiag);  System.out.println("Array wa = " + wa);  final double[][] r=new double[n][n];  for (int i=0; i < n; i++) {    r[i][i]=rdiag.get(i);    if (i < m) {      for (int k=i + 1; k < n; k++) {        r[i][k]=mT.get(k,i);      }    }  }  final double[][] q=new double[m][n];  final double w[]=new double[m];  for (int k=0; k < m; k++) {    Arrays.fill(w,0.0);    w[k]=1.0;    for (int j=0; j < Math.min(n,m); j++) {      final double t3=mT.get(j,j);      if (t3 != 0.0) {        double t=0.0;        for (int p=j; p < m; p++) {          t+=mT.get(j,p) * w[p];        }        t/=t3;        for (int i=j; i < m; i++) {          w[i]-=mT.get(j,i) * t;        }      }      q[k][j]=w[j];    }  }  final double[][] p=new double[n][n];  if (pivot) {    for (int i=0; i < n; ++i) {      p[ipvt[i]][i]=1.0;    }  } else {    for (int i=0; i < n; ++i) {      p[i][i]=1.0;    }  }  this.isNonSingular=isNonSingular(rdiag.$);  final boolean fortran=this.A.addr.isFortran();  this.R=fortran ? new Matrix(r).toFortran() : new Matrix(r);  this.Q=fortran ? new Matrix(q).toFortran() : new Matrix(q);  this.P=fortran ? new Matrix(p).toFortran() : new Matrix(p);  System.out.println("Matrix Q = " + Q.toString());  System.out.println("Matrix R = " + R.toString());  System.out.println("Matrix P = " + P.toString());  System.out.println("Matrix mT = " + mT.toString());}  }
class C{  private SchedulerTestEnvironment(HostClientFactory hostClientFactory,RootSchedulerConfig config,ConstraintChecker constraintChecker,CloudStoreHelper cloudStoreHelper,int hostCount) throws Throwable {  assertTrue(hostCount > 0);  hosts=new PhotonControllerXenonHost[hostCount];  for (int i=0; i < hosts.length; i++) {    String sandbox=generateStorageSandboxPath();    FileUtils.forceMkdir(new File(sandbox));    XenonConfig xenonConfig=new XenonConfig();    xenonConfig.setBindAddress(BIND_ADDRESS);    xenonConfig.setPort(0);    xenonConfig.setStoragePath(sandbox);    hosts[i]=new PhotonControllerXenonHost(xenonConfig,hostClientFactory,null,null,cloudStoreHelper);    SchedulerServiceGroup schedulerServiceGroup=new SchedulerServiceGroup(config.getRoot(),constraintChecker);    hosts[i].registerScheduler(schedulerServiceGroup);  }}  }
class C{  public void putKthNearest(double d){  if (m_KthNearest == null) {    m_KthNearest=new MyHeapElement[initSize];  }  if (m_KthNearestSize >= m_KthNearest.length) {    initSize+=initSize;    MyHeapElement temp[]=new MyHeapElement[initSize];    System.arraycopy(m_KthNearest,0,temp,0,m_KthNearest.length);    m_KthNearest=temp;  }  m_KthNearest[m_KthNearestSize++]=new MyHeapElement(d);}  }
class C{  public SSpaceVectorReader(SemanticSpace aSSpace){  sspace=aSSpace;  builder=new DocumentVectorBuilder(aSSpace);}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  builder.put(k4,v4);  builder.put(k5,v5);  return builder.build();}  }
class C{  private Entry<E> entry(int index){  if (index < 0 || index >= size)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  Entry<E> e=header;  if (index < (size >> 1)) {    for (int i=0; i <= index; i++)     e=e.next;  } else {    for (int i=size; i > index; i--)     e=e.previous;  }  return e;}  }
class C{  public NettyTcpTransport(NettyTransportListener listener,URI remoteLocation,NettyTransportOptions options){  this.options=options;  this.listener=listener;  this.remote=remoteLocation;  this.secure=remoteLocation.getScheme().equalsIgnoreCase("ssl");}  }
class C{  public AbDownloadThread(AbFileDownloader downloader,DownFile downFile,File saveFile){  this.saveFile=saveFile;  this.downloader=downloader;  this.mDownFile=downFile;}  }
class C{  public void createBug10476_upgradeSuspendedSubscription() throws Exception {  setDateFactory("2013-08-02 10:00:00");  String customerAdminId="Bug10476UpgrSusCustomerAdmin";  VOOrganization customer=orgSetup.registerCustomer("Bug10476UpgrSusCustomer",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,customerAdminId,supplierMarketplace.getMarketplaceId(),basicSetup.getSupplierOrgID());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10476_UPGRSUS_SERVICE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),3);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(customerAdmin.getKey(),"BUG10476_UPGRSUS",serviceDetails,customerAdmin,VOServiceFactory.getRole(serviceDetails,"GUEST"));  setDateFactory("2013-08-03 00:00:00");  paymentSetup.deleteCustomerPaymentTypes(basicSetup.getSupplierAdminKey(),customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  setDateFactory("2013-08-04 12:00:00");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOServiceDetails upgradedServiceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10476_UPGRSUS_FREE_SERVICE",TestService.EXAMPLE2,TestPriceModel.FREE,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(basicSetup.getSupplierAdminKey(),serviceDetails,upgradedServiceDetails);  setDateFactory("2013-08-10 23:10:00");  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(customerAdmin.getKey(),subDetails,upgradedServiceDetails);  setDateFactory("2013-08-11 15:00:00");  paymentSetup.reassignCustomerPaymentTypes(basicSetup.getSupplierAdminKey(),customer);  upgradedSubDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),upgradedSubDetails.getSubscriptionId());  setDateFactory("2013-08-15 08:12:00");  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10476_UPGRSUS",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10476_UPGRSUS",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("BUG10476_UPGRSUS",customer);}  }
class C{  public final double numInstances(){  return m_WithClass;}  }
class C{  public boolean contains(final Object element){  return _elements.containsValue(element);}  }
class C{  private void processSelectControl(ControlFontPair pair,Control ctrl,PDAcroForm acro,int i,Box root,PdfBoxOutputDevice od) throws IOException {  PDComboBox field=new PDComboBox(acro);  Field fObj=allFieldMap.get(ctrl.box.getElement().getAttribute("name"));  fObj.field=field;  field.setPartialName(fObj.partialName);  List<String> labels=new ArrayList<String>();  List<String> values=new ArrayList<String>();  String selectedLabel=populateOptions(ctrl.box.getElement(),labels,values,null);  field.setOptions(values,labels);  field.setValue(selectedLabel);  field.setDefaultValue(selectedLabel);  FSColor color=ctrl.box.getStyle().getColor();  String colorOperator=getColorOperator(color);  String fontInstruction="/" + pair.fontName + " 0 Tf";  field.setDefaultAppearance(fontInstruction + ' ' + colorOperator);  if (ctrl.box.getElement().hasAttribute("required")) {    field.setRequired(true);  }  if (ctrl.box.getElement().hasAttribute("readonly")) {    field.setReadOnly(true);  }  if (ctrl.box.getElement().hasAttribute("title")) {    field.setAlternateFieldName(ctrl.box.getElement().getAttribute("title"));  }  if (ctrl.box.getElement().getNodeName().equals("openhtmltopdf-combo")) {    field.setEdit(true);    field.setCombo(true);  }  PDAnnotationWidget widget=field.getWidgets().get(0);  Rectangle2D rect2D=PdfBoxLinkManager.createTargetArea(ctrl.c,ctrl.box,ctrl.pageHeight,ctrl.transform,root,od);  PDRectangle rect=new PDRectangle((float)rect2D.getMinX(),(float)rect2D.getMinY(),(float)rect2D.getWidth(),(float)rect2D.getHeight());  widget.setRectangle(rect);  widget.setPage(ctrl.page);  widget.setPrinted(true);  ctrl.page.getAnnotations().add(widget);}  }
class C{  public DSignMidlet(JFrame parent){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  setTitle(res.getString("DSignMidlet.Title"));  initComponents();}  }
class C{  public static Class<?> classForName(String className) throws ClassNotFoundException {  Class<?> clazz=null;  try {    clazz=getClassLoader().loadClass(className);  } catch (  Exception e) {  }  if (clazz == null) {    clazz=Class.forName(className);  }  return clazz;}  }
class C{  private String rename(final String group,final InputStream input) throws Exception {  try {    final String newName=getManagerFactory().create().getNamingStrategy().rename(group,input);    groupNames.setProperty(group,newName);    return newName;  } catch (  final IOException e) {    throw new MojoExecutionException("Error occured during renaming",e);  }}  }
class C{  public AsynchOutputStream(OutputStream stream,int pipeSize){  assert pipeSize >= 1024;  mQueue=new ConcurrentByteQueue(pipeSize);  if (stream == null) {    throw new IllegalArgumentException("Stream cannot be null");  }  mAsynchOutput=new AsynchOutput(stream,mQueue);  mThread=new Thread(mAsynchOutput,"AsynchOutputStream");  mThread.setDaemon(true);  mThread.start();}  }
class C{  public FontAction(String group,Font defaultFont){  super(group);  this.defaultFont=defaultFont;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.UNIT_NAME__REF:    if (resolve)     return getRef();  return basicGetRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isTopicFilterValid(String topicFilter){  return !StringUtils.isEmpty(topicFilter) && (this.topicFilterPattern == null || this.topicFilterPattern.matcher(topicFilter).matches());}  }
class C{  public String toString(int maxKeysToPrint){  return asPriorityQueue().toString(maxKeysToPrint,false);}  }
class C{  public void search(){  String searchString;  searchString=ComponentHelper.showInputBox(getParent(),"Search...","Enter the string to search for",m_LastSearch);  if (searchString != null) {    m_LastSearch=searchString;  }  getTable().setSearchString(searchString);}  }
class C{  public boolean refill() throws IOException {  if (!inflater.needsInput())   return false;  releaseInflatedBytes();  if (inflater.getRemaining() != 0)   throw new IllegalStateException("?");  if (source.exhausted())   return true;  Segment head=source.buffer().head;  bufferBytesHeldByInflater=head.limit - head.pos;  inflater.setInput(head.data,head.pos,bufferBytesHeldByInflater);  return false;}  }
class C{  public static void openImdbForMovie(Context context,String imdbNumber){  if (context == null || TextUtils.isEmpty(imdbNumber)) {    return;  }  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(String.format(IMDB_APP_MOVIE_URI,imdbNumber)));  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  if (!Utils.tryStartActivity(context,intent)) {    intent=new Intent(Intent.ACTION_VIEW,Uri.parse(String.format(IMDB_MOVIE_URL,imdbNumber)));    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);    context.startActivity(intent);  }}  }
class C{  static void checkInternalName(final String name,final int start,final int end,final String msg){  int max=end == -1 ? name.length() : end;  try {    int begin=start;    int slash;    do {      slash=name.indexOf('/',begin + 1);      if (slash == -1 || slash > max) {        slash=max;      }      checkIdentifier(name,begin,slash,null);      begin=slash + 1;    } while (slash != max);  } catch (  IllegalArgumentException unused) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a fully qualified class name in internal form): "+ name);  }}  }
class C{  public static String randomLetters(int length){  return randomString(LETTERS,length);}  }
class C{  public boolean reallyRestoreMsWordListFormatForUser(String userId,InputStreamReader streamReader,boolean isAdmin,Errors errors){  if (userId == null) {    Errors.add(errors,errorMessages.errorsUserIdIsNull());    return false;  }  if (streamReader == null) {    Errors.add(errors,errorMessages.errorsTheInputStreamReaderIsNull());    return false;  }  BufferedReader bf=new BufferedReader(streamReader);  final User user=getUserById(userId);  if (user == null) {    return false;  }  boolean createdAnyChildren=false;  try {    final long now=System.currentTimeMillis();    Entry notebook=createEntryNoteBook(user,"Restored Notebook",now,null,null,false,false,false,isAdmin,false,errors);    if (notebook == null) {      return false;    }    Entry root=getEntryById(notebook.getRootId());    ArrayList<Entry> parents=new ArrayList<Entry>();    HashMap<String,Integer> bulletToDepth=new HashMap<String,Integer>();    String line=null;    Integer previousDepth=0;    parents.add(root);    while ((line=bf.readLine()) != null) {      line=line.trim();      if (line.isEmpty()) {        continue;      }      String note=line;      Integer depth=1;      if (line.length() > 1 && line.charAt(1) == '\t') {        String bullet=line.substring(0,1);        note=line.substring(2);        depth=bulletToDepth.get(bullet);        if (depth == null) {          depth=new Integer(bulletToDepth.size() + 1);          bulletToDepth.put(bullet,depth);        }        for (int i=parents.size(); i > depth.intValue(); --i) {          parents.remove(i - 1);        }        depth=new Integer(parents.size() + 1);      } else {        previousDepth=0;        while (parents.size() > 1) {          parents.remove(parents.size() - 1);        }      }      if (parents.isEmpty()) {        return false;      }      Entry parent=parents.get(parents.size() - 1);      Entry entry=createSimpleEntry(user,note,now,parent.getId(),TreeRelType.Parent,false,false,false,isAdmin,Constants.note,errors,null);      if (entry == null) {        return false;      }      if (previousDepth.intValue() != depth.intValue()) {        parents.add(entry);      } else {        parents.set(parents.size() - 1,entry);      }      createdAnyChildren=true;    }  } catch (  IOException e) {    Errors.add(errors,errorMessages.errorProblemReadingInput());  }  return createdAnyChildren;}  }
class C{  public Matrix solveTranspose(Matrix B){  return transpose().solve(B.transpose());}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] newArray(Class<T> type,int length){  return (T[])Array.newInstance(type,length);}  }
class C{  public static void openGamesBotWindowItem(FicsConnector connector,String playerName){  RaptorWindowItem[] items=Raptor.getInstance().getWindow().getWindowItems(GameBotHistoryWindowItem.class);  boolean openNewWindow=true;  for (  RaptorWindowItem item : items) {    GameBotHistoryWindowItem gamesBotWindowItem=(GameBotHistoryWindowItem)item;    if (gamesBotWindowItem.getConnector() instanceof FicsConnector) {      gamesBotWindowItem.setPlayerName(playerName);      Raptor.getInstance().getWindow().forceFocus(item);      openNewWindow=false;      break;    }  }  if (openNewWindow) {    GameBotHistoryWindowItem item=new GameBotHistoryWindowItem(connector,playerName);    Raptor.getInstance().getWindow().addRaptorWindowItem(item);  }}  }
class C{  public NestedQueryBuilder innerHit(QueryInnerHitBuilder innerHit){  this.innerHit=innerHit;  return this;}  }
class C{  public boolean hasNonNullKeys(){  for (  DeviceField f : keyFields) {switch (f) {case MAC:      return true;case IPV4:    if (entity.ipv4Address != null)     return true;  break;case SWITCH:if (entity.switchDPID != null) return true;break;case PORT:if (entity.switchPort != null) return true;break;case VLAN:if (entity.vlan != null) return true;break;}}return false;}  }
class C{  private void updateDirectorInfo(String engineName,VPlexDirectorInfo directorInfo) throws VPlexApiException {  String directorName=directorInfo.getName();  StringBuilder uriBuilder=new StringBuilder();  uriBuilder.append(VPlexApiConstants.URI_ENGINES.toString());  uriBuilder.append(engineName);  uriBuilder.append(VPlexApiConstants.URI_DIRECTORS.toString());  uriBuilder.append(directorName);  URI requestURI=_vplexApiClient.getBaseURI().resolve(URI.create(uriBuilder.toString()));  s_logger.info("Director Info Request URI is {}",requestURI.toString());  ClientResponse response=_vplexApiClient.get(requestURI);  String responseStr=response.getEntity(String.class);  s_logger.info("Response is {}",responseStr);  int status=response.getStatus();  response.close();  if (status != VPlexApiConstants.SUCCESS_STATUS) {    throw new VPlexApiException(String.format("Failed getting info for director %s in engine %s with status: %s",directorName,engineName,status));  }  try {    VPlexApiUtils.setAttributeValues(responseStr,directorInfo);    s_logger.info("Updated Director Info {}",directorInfo.toString());  } catch (  Exception e) {    throw new VPlexApiException(String.format("Error processing director information: %s",e.getMessage()),e);  }}  }
class C{  @Nullable private static IMember asMember(IJavaElement element){  if (element instanceof IMember) {    return (IMember)element;  }  return null;}  }
class C{  private boolean containsBlackPoint(int a,int b,int fixed,boolean horizontal){  if (horizontal) {    for (int x=a; x <= b; x++) {      if (image.get(x,fixed)) {        return true;      }    }  } else {    for (int y=a; y <= b; y++) {      if (image.get(fixed,y)) {        return true;      }    }  }  return false;}  }
class C{  private void verifyTargetStorageSystemForMigration(URI vplexVolumeURI,URI vplexSystemURI,URI srcStorageSystemURI,URI tgtStorageSystemURI){  if (tgtStorageSystemURI.toString().equals(srcStorageSystemURI.toString())) {    throw APIException.badRequests.targetAndSourceStorageCannotBeSame();  }  StorageSystem tgtStorageSystem=_permissionsHelper.getObjectById(tgtStorageSystemURI,StorageSystem.class);  ArgValidator.checkEntity(tgtStorageSystem,tgtStorageSystemURI,false);  boolean isConnectedToVPlex=false;  Set<URI> associatedVplexes=ConnectivityUtil.getVPlexSystemsAssociatedWithArray(_dbClient,tgtStorageSystemURI);  if (associatedVplexes.contains(vplexSystemURI)) {    isConnectedToVPlex=true;  }  if (!isConnectedToVPlex) {    throw APIException.badRequests.storageSystemNotConnectedToCorrectVPlex(tgtStorageSystemURI,vplexSystemURI);  }}  }
class C{  @SuppressWarnings({"HardCodedStringLiteral"}) public String scramble(String text){  final StringBuffer buffer=new StringBuffer("A");  if (text != null) {    for (int i=0; i < text.length(); ++i) {      final char chr=text.charAt(i);      final byte scrambledChr=(byte)(shifts[(int)chr & 255] & 255);      buffer.append((char)scrambledChr);    }  }  return buffer.toString();}  }
class C{  public static boolean isNegative(Query q){  if (!(q instanceof BooleanQuery))   return false;  BooleanQuery bq=(BooleanQuery)q;  Collection<BooleanClause> clauses=bq.clauses();  if (clauses.size() == 0)   return false;  for (  BooleanClause clause : clauses) {    if (!clause.isProhibited())     return false;  }  return true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:58.840 -0500",hash_original_method="D359964B058F5C9ECC2D15DB024983EF",hash_generated_method="0D8C7939C3B1DDE90D4DB882655A0701") private Connection checkMtFindNewRinging(DriverCall dc,int i){  Connection newRinging=null;  connections[i]=new CdmaConnection(phone.getContext(),dc,this,i);  if (connections[i].getCall() == ringingCall) {    newRinging=connections[i];    if (Phone.DEBUG_PHONE)     log("Notify new ring " + dc);  } else {    Log.e(LOG_TAG,"Phantom call appeared " + dc);    if (dc.state != DriverCall.State.ALERTING && dc.state != DriverCall.State.DIALING) {      connections[i].connectTime=System.currentTimeMillis();    }  }  return newRinging;}  }
class C{  public static float unitRatio(long t,long tBegin,float tDuration){  if (t <= tBegin) {    return 0.0f;  }  return (t - tBegin) / tDuration;}  }
class C{  public Polygon(List<PolygonPoint> points){  if (points.get(0).equals(points.get(points.size() - 1))) {    logger.warn("Removed duplicate point");    points.remove(points.size() - 1);  }  _points.addAll(points);}  }
class C{  protected byte readByteProtected(DataInputStream istream) throws java.io.IOException {  while (true) {    int nchars;    nchars=istream.read(rcvBuffer,0,1);    if (nchars > 0) {      return rcvBuffer[0];    }  }}  }
class C{  public static double pareto(double alpha){  return Math.pow(1 - uniform(),-1.0 / alpha) - 1.0;}  }
class C{  public static PsiFile findLayoutResource(PsiFile file,Project project,String fileName){  String name=String.format("%s.xml",fileName);  return resolveLayoutResourceFile(file,project,name);}  }
class C{  public boolean mouseOver(MouseEvent me){  if (DEBUG) {    Debug.output("mouseOver(MAP) at " + me.getX() + ", "+ me.getY());  }  if (grp != null && grp.receivesMapEvents() && me instanceof MapMouseEvent) {    return grp.mouseOver((MapMouseEvent)me);  }  return false;}  }
class C{  private void parseInputArchive(final Node node,final ConfigSettings config){  String name;  InputType type=null;  String path=null;  long startPosition=0;  Node nnode;  NodeList list=node.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    nnode=list.item(i);    name=nnode.getNodeName().toUpperCase();    if (name.equals(KEY_TYPE)) {      type=InputType.parse(nnode.getChildNodes().item(0).getNodeValue());    } else     if (name.equals(KEY_PATH)) {      path=nnode.getChildNodes().item(0).getNodeValue();      path=path.substring(1,path.length() - 1);    } else     if (name.equals(KEY_START)) {      startPosition=Long.parseLong(nnode.getChildNodes().item(0).getNodeValue());    }  }  if (type == null || path == null) {    throw new IllegalArgumentException("Illegal Archive Description");  }  ArchiveDescription archive=new ArchiveDescription(type,path);  if (startPosition > 0) {    archive.setStartPosition(startPosition);  }  config.add(archive);}  }
class C{  public void addKey(Key key){switch (key.getForType()) {case EDGE:{      getKeyList(Metadata.MetadataType.EDGE).add(key);      break;    }case ENDPOINT:{    getKeyList(Metadata.MetadataType.ENDPOINT).add(key);    break;  }case GRAPH:{  getKeyList(Metadata.MetadataType.GRAPH).add(key);  break;}case HYPEREDGE:{getKeyList(Metadata.MetadataType.HYPEREDGE).add(key);break;}case NODE:{getKeyList(Metadata.MetadataType.NODE).add(key);break;}case PORT:{getKeyList(Metadata.MetadataType.PORT).add(key);break;}default :{getKeyList(Metadata.MetadataType.EDGE).add(key);getKeyList(Metadata.MetadataType.ENDPOINT).add(key);getKeyList(Metadata.MetadataType.GRAPH).add(key);getKeyList(Metadata.MetadataType.HYPEREDGE).add(key);getKeyList(Metadata.MetadataType.NODE).add(key);getKeyList(Metadata.MetadataType.PORT).add(key);}}}  }
class C{  public AirspySampleAdapter(){}  }
class C{  private void saveAttributes(final IScope scope,final IAgent agent) throws GamaRuntimeException {  variables=new THashMap<String,Object>(11,0.9f);  final ISpecies species=agent.getSpecies();  for (  final String specVar : species.getVarNames()) {    if (UNSAVABLE_VARIABLES.contains(specVar)) {      continue;    }    if (species.getVar(specVar).value(scope,agent) instanceof IPopulation) {      continue;    }    if (specVar.equals(IKeyword.SHAPE)) {      final GamaShape shape=new GamaShape(((GamaShape)species.getVar(specVar).value(scope,agent)).getInnerGeometry());      if (agent.getAttributes() != null) {        for (        final Object keyAttr : agent.getAttributes().keySet()) {          final String attrName=(String)keyAttr;          if (UNSAVABLE_VARIABLES.contains(attrName)) {            continue;          }          if (species.getVarNames().contains(attrName)) {            continue;          }          if (agent.getAttribute(keyAttr) instanceof IPopulation) {            continue;          }          shape.setAttribute(attrName,agent.getAttribute(keyAttr));        }      }      variables.put(specVar,shape);      continue;    }    variables.put(specVar,species.getVar(specVar).value(scope,agent));  }}  }
class C{  public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents){  if (persistentAuditEvents == null) {    return Collections.emptyList();  }  List<AuditEvent> auditEvents=new ArrayList<>();  for (  PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {    auditEvents.add(convertToAuditEvent(persistentAuditEvent));  }  return auditEvents;}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel dataModel=getDataEditor().getSelectedDataModel();  if (dataModel instanceof DataSet) {    DataSet dataSet=(DataSet)dataModel;    DataFilter interpolator=new ExtraCategoryInterpolator();    DataSet newDataSet=interpolator.filter(dataSet);    DataModelList list=new DataModelList();    list.add(newDataSet);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else   if (dataModel instanceof ICovarianceMatrix) {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Must be a tabular data set.");  }}  }
class C{  private void addCabspottingPeopleAndRandomSocialNetwork(){  List<String> locationTraceFilenames;  try {    locationTraceFilenames=getLocationTraceFilenames(traceIndexFilename);  } catch (  FileNotFoundException e) {    System.err.println(e);    locationTraceFilenames=new ArrayList<String>();  }  Iterator<String> traceIterator=locationTraceFilenames.iterator();  for (int i=0; i < NUMBER_OF_PEOPLE; i++) {    Person p=new Person(i,Person.TRUST_POLICY_SIGMOID_FRACTION_OF_FRIENDS,this);    try {      p.addMobilityTrace(traceIterator.next());      setObjectLatLonLocation(p,p.mobilityTrace.locations.get(0));    } catch (    FileNotFoundException e) {      System.err.println(e);    }    socialNetwork.addNode(p);    p.schedule();  }  addScaleFreeRandomSocialGraph();}  }
class C{  private Point determineUpperLeft(final Point p1,final Point p2){  final Point temp=new Point();  if (p1.x < p2.x) {    temp.x=p1.x;  } else   if (p1.x >= p2.x) {    temp.x=p2.x;  }  if (p1.y < p2.y) {    temp.y=p1.y;  } else   if (p1.y >= p2.y) {    temp.y=p2.y;  }  return temp;}  }
class C{  protected void decodeImageData(){  int NullCode=-1;  int npix=iw * ih;  int available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, count, i, datum, data_size, first, top, bi, pi;  if ((pixels == null) || (pixels.length < npix)) {    pixels=new byte[npix];  }  if (prefix == null)   prefix=new short[MaxStackSize];  if (suffix == null)   suffix=new byte[MaxStackSize];  if (pixelStack == null)   pixelStack=new byte[MaxStackSize + 1];  data_size=read();  clear=1 << data_size;  end_of_information=clear + 1;  available=clear + 2;  old_code=NullCode;  code_size=data_size + 1;  code_mask=(1 << code_size) - 1;  for (code=0; code < clear; code++) {    prefix[code]=0;    suffix[code]=(byte)code;  }  datum=bits=count=first=top=pi=bi=0;  for (i=0; i < npix; ) {    if (top == 0) {      if (bits < code_size) {        if (count == 0) {          count=readBlock();          if (count <= 0)           break;          bi=0;        }        datum+=(block[bi] & 0xff) << bits;        bits+=8;        bi++;        count--;        continue;      }      code=datum & code_mask;      datum>>=code_size;      bits-=code_size;      if ((code > available) || (code == end_of_information))       break;      if (code == clear) {        code_size=data_size + 1;        code_mask=(1 << code_size) - 1;        available=clear + 2;        old_code=NullCode;        continue;      }      if (old_code == NullCode) {        pixelStack[top++]=suffix[code];        old_code=code;        first=code;        continue;      }      in_code=code;      if (code == available) {        pixelStack[top++]=(byte)first;        code=old_code;      }      while (code > clear) {        pixelStack[top++]=suffix[code];        code=prefix[code];      }      first=suffix[code] & 0xff;      if (available >= MaxStackSize)       break;      pixelStack[top++]=(byte)first;      prefix[available]=(short)old_code;      suffix[available]=(byte)first;      available++;      if (((available & code_mask) == 0) && (available < MaxStackSize)) {        code_size++;        code_mask+=available;      }      old_code=in_code;    }    top--;    pixels[pi++]=pixelStack[top];    i++;  }  for (i=pi; i < npix; i++) {    pixels[i]=0;  }}  }
class C{  public boolean isRoleUsed(String role){  List<Integer> columnsWithRole=columnRoles.get(role);  return columnsWithRole != null && !columnsWithRole.isEmpty();}  }
class C{  public static double valueNoise2D(int x,int z,long seed){  long n=(1619 * x + 6971 * z + 1013 * seed) & 0x7fffffff;  n=(n >> 13) ^ n;  return 1.0 - ((double)((n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff) / 1073741824.0);}  }
class C{  @Override public void clear(){  datastore=new byte[this.totalNumberOfElements * this.sizeOfEachElement];}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  EcorePackage theEcorePackage=(EcorePackage)EPackage.Registry.INSTANCE.getEPackage(EcorePackage.eNS_URI);  projectDescriptionEClass.getESuperTypes().add(this.getSimpleProjectDescription());  testedProjectEClass.getESuperTypes().add(this.getSimpleProjectDependency());  simpleProjectDependencyEClass.getESuperTypes().add(this.getProjectReference());  runtimeProjectDependencyEClass.getESuperTypes().add(this.getSimpleProjectDependency());  requiredRuntimeLibraryDependencyEClass.getESuperTypes().add(this.getRuntimeProjectDependency());  providedRuntimeLibraryDependencyEClass.getESuperTypes().add(this.getRuntimeProjectDependency());  projectDependencyEClass.getESuperTypes().add(this.getSimpleProjectDependency());  initEClass(projectDescriptionEClass,ProjectDescription.class,"ProjectDescription",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getProjectDescription_VendorName(),theEcorePackage.getEString(),"vendorName",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProjectDescription_ProjectVersion(),this.getDeclaredVersion(),null,"projectVersion",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getProjectDescription_ProjectType(),this.getProjectType(),"projectType",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getProjectDescription_MainModule(),theEcorePackage.getEString(),"mainModule",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProjectDescription_ExtendedRuntimeEnvironment(),this.getExtendedRuntimeEnvironment(),null,"extendedRuntimeEnvironment",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProjectDescription_ProvidedRuntimeLibraries(),this.getProvidedRuntimeLibraries(),null,"providedRuntimeLibraries",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProjectDescription_RequiredRuntimeLibraries(),this.getRequiredRuntimeLibraries(),null,"requiredRuntimeLibraries",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProjectDescription_ProjectDependencies(),this.getProjectDependencies(),null,"projectDependencies",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getProjectDescription_ImplementationId(),theEcorePackage.getEString(),"implementationId",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProjectDescription_ImplementedProjects(),this.getImplementedProjects(),null,"implementedProjects",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProjectDescription_InitModules(),this.getInitModules(),null,"initModules",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProjectDescription_ExecModule(),this.getExecModule(),null,"execModule",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getProjectDescription_OutputPath(),theEcorePackage.getEString(),"outputPath",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getProjectDescription_LibraryPaths(),theEcorePackage.getEString(),"libraryPaths",null,0,-1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getProjectDescription_ResourcePaths(),theEcorePackage.getEString(),"resourcePaths",null,0,-1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProjectDescription_SourceFragment(),this.getSourceFragment(),null,"sourceFragment",null,0,-1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProjectDescription_ModuleFilters(),this.getModuleFilter(),null,"moduleFilters",null,0,-1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProjectDescription_TestedProjects(),this.getTestedProjects(),null,"testedProjects",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getProjectDescription_ModuleLoader(),this.getModuleLoader(),"moduleLoader",null,0,1,ProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getProjectDescription__GetAllTestedProjects(),this.getTestedProject(),"getAllTestedProjects",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getProjectDescription__GetAllInitModules(),this.getBootstrapModule(),"getAllInitModules",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getProjectDescription__GetAllImplementedProjects(),this.getProjectReference(),"getAllImplementedProjects",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getProjectDescription__GetAllProjectDependencies(),this.getProjectDependency(),"getAllProjectDependencies",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getProjectDescription__GetAllProvidedRuntimeLibraries(),this.getProvidedRuntimeLibraryDependency(),"getAllProvidedRuntimeLibraries",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getProjectDescription__GetAllRequiredRuntimeLibraries(),this.getRequiredRuntimeLibraryDependency(),"getAllRequiredRuntimeLibraries",0,-1,!IS_UNIQUE,IS_ORDERED);  initEClass(execModuleEClass,ExecModule.class,"ExecModule",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExecModule_ExecModule(),this.getBootstrapModule(),null,"execModule",null,0,1,ExecModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(testedProjectsEClass,TestedProjects.class,"TestedProjects",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTestedProjects_TestedProjects(),this.getTestedProject(),null,"testedProjects",null,0,-1,TestedProjects.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(initModulesEClass,InitModules.class,"InitModules",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getInitModules_InitModules(),this.getBootstrapModule(),null,"initModules",null,0,-1,InitModules.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(implementedProjectsEClass,ImplementedProjects.class,"ImplementedProjects",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getImplementedProjects_ImplementedProjects(),this.getProjectReference(),null,"implementedProjects",null,0,-1,ImplementedProjects.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(projectDependenciesEClass,ProjectDependencies.class,"ProjectDependencies",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getProjectDependencies_ProjectDependencies(),this.getProjectDependency(),null,"projectDependencies",null,0,-1,ProjectDependencies.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(providedRuntimeLibrariesEClass,ProvidedRuntimeLibraries.class,"ProvidedRuntimeLibraries",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getProvidedRuntimeLibraries_ProvidedRuntimeLibraries(),this.getProvidedRuntimeLibraryDependency(),null,"providedRuntimeLibraries",null,0,-1,ProvidedRuntimeLibraries.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(requiredRuntimeLibrariesEClass,RequiredRuntimeLibraries.class,"RequiredRuntimeLibraries",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getRequiredRuntimeLibraries_RequiredRuntimeLibraries(),this.getRequiredRuntimeLibraryDependency(),null,"requiredRuntimeLibraries",null,0,-1,RequiredRuntimeLibraries.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(simpleProjectDescriptionEClass,SimpleProjectDescription.class,"SimpleProjectDescription",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getSimpleProjectDescription_DeclaredVendorId(),theEcorePackage.getEString(),"declaredVendorId",null,0,1,SimpleProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getSimpleProjectDescription_ProjectId(),theEcorePackage.getEString(),"projectId",null,0,1,SimpleProjectDescription.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getSimpleProjectDescription__GetVendorId(),theEcorePackage.getEString(),"getVendorId",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(testedProjectEClass,TestedProject.class,"TestedProject",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTestedProject_VersionConstraint(),this.getVersionConstraint(),null,"versionConstraint",null,0,1,TestedProject.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTestedProject_DeclaredScope(),this.getProjectDependencyScope(),"declaredScope",null,0,1,TestedProject.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(declaredVersionEClass,DeclaredVersion.class,"DeclaredVersion",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getDeclaredVersion_Major(),theEcorePackage.getEInt(),"major",null,0,1,DeclaredVersion.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getDeclaredVersion_Minor(),theEcorePackage.getEInt(),"minor",null,0,1,DeclaredVersion.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getDeclaredVersion_Micro(),theEcorePackage.getEInt(),"micro",null,0,1,DeclaredVersion.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getDeclaredVersion_Qualifier(),theEcorePackage.getEString(),"qualifier",null,0,1,DeclaredVersion.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(sourceFragmentEClass,SourceFragment.class,"SourceFragment",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getSourceFragment_SourceFragmentType(),this.getSourceFragmentType(),"sourceFragmentType",null,0,1,SourceFragment.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getSourceFragment_Paths(),theEcorePackage.getEString(),"paths",null,0,-1,SourceFragment.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  EOperation op=initEOperation(getSourceFragment__CompareByFragmentType__SourceFragment(),theEcorePackage.getEInt(),"compareByFragmentType",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,this.getSourceFragment(),"other",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(moduleFilterEClass,ModuleFilter.class,"ModuleFilter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getModuleFilter_ModuleFilterType(),this.getModuleFilterType(),"moduleFilterType",null,0,1,ModuleFilter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getModuleFilter_ModuleSpecifiers(),this.getModuleFilterSpecifier(),null,"moduleSpecifiers",null,0,-1,ModuleFilter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(bootstrapModuleEClass,BootstrapModule.class,"BootstrapModule",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getBootstrapModule_ModuleSpecifierWithWildcard(),theEcorePackage.getEString(),"moduleSpecifierWithWildcard",null,0,1,BootstrapModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getBootstrapModule_SourcePath(),theEcorePackage.getEString(),"sourcePath",null,0,1,BootstrapModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(extendedRuntimeEnvironmentEClass,ExtendedRuntimeEnvironment.class,"ExtendedRuntimeEnvironment",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExtendedRuntimeEnvironment_ExtendedRuntimeEnvironment(),this.getProjectReference(),null,"extendedRuntimeEnvironment",null,0,1,ExtendedRuntimeEnvironment.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(projectReferenceEClass,ProjectReference.class,"ProjectReference",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getProjectReference_Project(),this.getSimpleProjectDescription(),null,"project",null,0,1,ProjectReference.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(simpleProjectDependencyEClass,SimpleProjectDependency.class,"SimpleProjectDependency",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getSimpleProjectDependency__GetScope(),this.getProjectDependencyScope(),"getScope",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(moduleFilterSpecifierEClass,ModuleFilterSpecifier.class,"ModuleFilterSpecifier",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getModuleFilterSpecifier_ModuleSpecifierWithWildcard(),theEcorePackage.getEString(),"moduleSpecifierWithWildcard",null,0,1,ModuleFilterSpecifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getModuleFilterSpecifier_SourcePath(),theEcorePackage.getEString(),"sourcePath",null,0,1,ModuleFilterSpecifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(runtimeProjectDependencyEClass,RuntimeProjectDependency.class,"RuntimeProjectDependency",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(requiredRuntimeLibraryDependencyEClass,RequiredRuntimeLibraryDependency.class,"RequiredRuntimeLibraryDependency",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(providedRuntimeLibraryDependencyEClass,ProvidedRuntimeLibraryDependency.class,"ProvidedRuntimeLibraryDependency",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(projectDependencyEClass,ProjectDependency.class,"ProjectDependency",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getProjectDependency_VersionConstraint(),this.getVersionConstraint(),null,"versionConstraint",null,0,1,ProjectDependency.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getProjectDependency_DeclaredScope(),this.getProjectDependencyScope(),"declaredScope",null,0,1,ProjectDependency.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getProjectDependency__GetScope(),this.getProjectDependencyScope(),"getScope",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(versionConstraintEClass,VersionConstraint.class,"VersionConstraint",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getVersionConstraint_ExclLowerBound(),theEcorePackage.getEBoolean(),"exclLowerBound",null,0,1,VersionConstraint.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getVersionConstraint_LowerVersion(),this.getDeclaredVersion(),null,"lowerVersion",null,0,1,VersionConstraint.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getVersionConstraint_ExclUpperBound(),theEcorePackage.getEBoolean(),"exclUpperBound",null,0,1,VersionConstraint.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getVersionConstraint_UpperVersion(),this.getDeclaredVersion(),null,"upperVersion",null,0,1,VersionConstraint.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEEnum(projectTypeEEnum,ProjectType.class,"ProjectType");  addEEnumLiteral(projectTypeEEnum,ProjectType.APPLICATION);  addEEnumLiteral(projectTypeEEnum,ProjectType.PROCESSOR);  addEEnumLiteral(projectTypeEEnum,ProjectType.LIBRARY);  addEEnumLiteral(projectTypeEEnum,ProjectType.API);  addEEnumLiteral(projectTypeEEnum,ProjectType.RUNTIME_ENVIRONMENT);  addEEnumLiteral(projectTypeEEnum,ProjectType.RUNTIME_LIBRARY);  addEEnumLiteral(projectTypeEEnum,ProjectType.TEST);  initEEnum(sourceFragmentTypeEEnum,SourceFragmentType.class,"SourceFragmentType");  addEEnumLiteral(sourceFragmentTypeEEnum,SourceFragmentType.SOURCE);  addEEnumLiteral(sourceFragmentTypeEEnum,SourceFragmentType.TEST);  addEEnumLiteral(sourceFragmentTypeEEnum,SourceFragmentType.EXTERNAL);  initEEnum(moduleFilterTypeEEnum,ModuleFilterType.class,"ModuleFilterType");  addEEnumLiteral(moduleFilterTypeEEnum,ModuleFilterType.NO_VALIDATE);  addEEnumLiteral(moduleFilterTypeEEnum,ModuleFilterType.NO_MODULE_WRAPPING);  initEEnum(projectDependencyScopeEEnum,ProjectDependencyScope.class,"ProjectDependencyScope");  addEEnumLiteral(projectDependencyScopeEEnum,ProjectDependencyScope.COMPILE);  addEEnumLiteral(projectDependencyScopeEEnum,ProjectDependencyScope.TEST);  initEEnum(moduleLoaderEEnum,ModuleLoader.class,"ModuleLoader");  addEEnumLiteral(moduleLoaderEEnum,ModuleLoader.N4JS);  addEEnumLiteral(moduleLoaderEEnum,ModuleLoader.COMMONJS);  addEEnumLiteral(moduleLoaderEEnum,ModuleLoader.NODE_BUILTIN);  createResource(eNS_URI);}  }
class C{  public void testNextDouble(){  SplittableRandom sr=new SplittableRandom();  double f=sr.nextDouble();  int i=0;  while (i < NCALLS && sr.nextDouble() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public boolean contains(String suffix){  boolean result;  Character c;  String newSuffix;  TrieNode child;  c=suffix.charAt(0);  newSuffix=suffix.substring(1);  child=m_Children.get(c);  if (child == null) {    result=false;  } else   if (newSuffix.length() == 0) {    result=true;  } else {    result=child.contains(newSuffix);  }  return result;}  }
class C{  @Override public UtilityTable copy(){  return new UtilityTable(getTable());}  }
class C{  public void processAttribute(String namespace,String localName,String value) throws ParseException {}  }
class C{  public void testDefaultFoldersOverride() throws Exception {  setSecondaryFs=true;  mode=DUAL_ASYNC;  pathModes(F.t("/ignite/primary",PROXY),F.t("/ignite/proxy",DUAL_SYNC),F.t("/ignite/sync",DUAL_ASYNC),F.t("/ignite/async",PRIMARY));  startUp();  checkMode("/ignite/primary",PRIMARY);  checkMode("/ignite/proxy",PROXY);  checkMode("/ignite/sync",DUAL_SYNC);  checkMode("/ignite/async",DUAL_ASYNC);}  }
class C{  protected String calculateFullDn(final String relativeDn,final String baseDn){  String fullDn=relativeDn;  if (StringUtils.isEmpty(relativeDn)) {    fullDn=baseDn;  } else   if ((StringUtils.isNotEmpty(baseDn)) && (relativeDn.toLowerCase().indexOf(baseDn.toLowerCase()) == -1)) {    fullDn=relativeDn + LdapConstants.NODE_SEPARATOR + baseDn;  }  return fullDn;}  }
class C{  private String userAgent(){  return mUserAgent;}  }
class C{  private void performRAGroupsBookKeeping(Set<String> raGroupIds,URI storageSystemURI) throws IOException {  @SuppressWarnings("deprecation") List<URI> raGroupsInDB=_dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceRemoteGroupsConstraint(storageSystemURI));  for (  URI raGroupUri : raGroupsInDB) {    RemoteDirectorGroup raGroup=_dbClient.queryObject(RemoteDirectorGroup.class,raGroupUri);    if (null == raGroup || raGroup.getInactive()) {      continue;    }    if (!raGroupIds.contains(raGroup.getNativeGuid())) {      _log.info("RA Group set to inactive",raGroup);      raGroup.setSourceStorageSystemUri(NullColumnValueGetter.getNullURI());      raGroup.setInactive(true);      _dbClient.updateAndReindexObject(raGroup);    }  }}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent e){  boolean now=clock.getRun();  if (now) {    b.setText("Stop");  } else {    b.setText("Run");  }}  }
class C{  public Data execute(Data in1,double u,double v,double w2) throws DMLRuntimeException {  CM_COV_Object cov1=(CM_COV_Object)in1;  if (cov1.isCOVAllZeros()) {    cov1.w=w2;    cov1.mean.set(u,0);    cov1.mean_v.set(v,0);    cov1.c2.set(0,0);    return cov1;  }  double w=cov1.w + w2;  double du=u - cov1.mean._sum;  double dv=v - cov1.mean_v._sum;  cov1.mean=(KahanObject)_plus.execute(cov1.mean,w2 * du / w);  cov1.mean_v=(KahanObject)_plus.execute(cov1.mean_v,w2 * dv / w);  cov1.c2=(KahanObject)_plus.execute(cov1.c2,cov1.w * w2 / w * du * dv);  cov1.w=w;  return cov1;}  }
class C{  public static String findUrn(String datasetPath){  Pattern pattern=Pattern.compile("([^/]/|^/)[^/]");  Matcher m=pattern.matcher(datasetPath);  int begin=0;  if (m.find() && (datasetPath.contains("://") || datasetPath.startsWith("/"))) {    begin=m.end() - 1;  }  pattern=Pattern.compile("(/|\\*)*(.avro)*$");  m=pattern.matcher(datasetPath);  int end=datasetPath.length();  if (m.find()) {    end=m.start();  }  return datasetPath.substring(begin,end);}  }
class C{  public Map<Installment,BigDecimal> prepareRsnWiseDemandForProp(final Property property){  Installment inst=null;  final Map<Installment,BigDecimal> instAmountMap=new TreeMap<Installment,BigDecimal>();  final EgDemand egDemand=ptDemandDAO.getNonHistoryCurrDmdForProperty(property);  String demandReason="";  BigDecimal amount=BigDecimal.ZERO;  final List<String> demandReasonExcludeList=Arrays.asList(DEMANDRSN_CODE_PENALTY_FINES,DEMANDRSN_CODE_ADVANCE);  for (  final EgDemandDetails dmdDet : egDemand.getEgDemandDetails()) {    amount=BigDecimal.ZERO;    demandReason=dmdDet.getEgDemandReason().getEgDemandReasonMaster().getCode();    if (!demandReasonExcludeList.contains(demandReason)) {      inst=dmdDet.getEgDemandReason().getEgInstallmentMaster();      if (instAmountMap.get(inst) == null)       instAmountMap.put(inst,dmdDet.getAmount()); else {        amount=instAmountMap.get(inst);        amount=amount.add(dmdDet.getAmount());        instAmountMap.put(inst,amount);      }    }  }  return instAmountMap;}  }
class C{  public static Vector tokenizeString(String source,char separator){  Vector tokenized=new Vector();  int len=source.length();  boolean lastSeparator=false;  StringBuilder buf=new StringBuilder();  for (int iter=0; iter < len; iter++) {    char current=source.charAt(iter);    if (current == separator) {      if (lastSeparator) {        buf.append(separator);        lastSeparator=false;        continue;      }      lastSeparator=true;      if (buf.length() > 0) {        tokenized.addElement(buf.toString());        buf=new StringBuilder();      }    } else {      lastSeparator=false;      buf.append(current);    }  }  if (buf.length() > 0) {    tokenized.addElement(buf.toString());  }  return tokenized;}  }
class C{  public static void writeStringToFile(File file,String data,String encoding,boolean append) throws IOException {  writeStringToFile(file,data,Charsets.toCharset(encoding),append);}  }
class C{  protected boolean clipToInsideHrect(KDTreeNode node,Instance x){  boolean inside=true;  for (int i=0; i < m_Instances.numAttributes(); i++) {    if (x.value(i) < node.m_NodeRanges[i][MIN]) {      x.setValue(i,node.m_NodeRanges[i][MIN]);      inside=false;    } else     if (x.value(i) > node.m_NodeRanges[i][MAX]) {      x.setValue(i,node.m_NodeRanges[i][MAX]);      inside=false;    }  }  return inside;}  }
class C{  public MBeanException(java.lang.Exception e,String message){  super(message);  exception=e;}  }
class C{  @Override public ICalendar _readNext() throws IOException {  if (reader.eof()) {    return null;  }  context.setVersion(ICalVersion.V2_0);  JCalDataStreamListenerImpl listener=new JCalDataStreamListenerImpl();  reader.readNext(listener);  return listener.getICalendar();}  }
class C{  public LayerCreationPanel(String label,int numNeurons){  this(DEFAULT_NEURON_TYPES,label,numNeurons);}  }
class C{  public static void selectNodesWithString(final ZyGraph graph,final String searchString){  Preconditions.checkNotNull(graph,"IE02117: Graph argument can not be null");  Preconditions.checkNotNull(searchString,"IE02118: Search string argument can not be null");  final GraphSearcher searcher=new GraphSearcher();  searcher.search(GraphHelpers.getNodes(graph),new ArrayList<NaviEdge>(),searchString);  final List<SearchResult> results=searcher.getResults();  final List<NaviNode> resultNodes=new ArrayList<NaviNode>();  for (  final SearchResult searchResult : results) {    resultNodes.add((NaviNode)searchResult.getObject());  }  graph.selectNodes(resultNodes,true);  searcher.dispose();}  }
class C{  protected void removeTag(short tagId,int ifdId){  IfdData ifdData=mIfdDatas[ifdId];  if (ifdData == null) {    return;  }  ifdData.removeTag(tagId);}  }
class C{  public void testCreateDeployerForEmbeddedContainers(){  this.factory.registerDeployer(EmbeddedLocalContainerStub.ID,DeployerType.EMBEDDED,EmbeddedLocalDeployerStub.class);  Deployer deployer=this.factory.createDeployer(new EmbeddedLocalContainerStub());  assertEquals(EmbeddedLocalDeployerStub.class.getName(),deployer.getClass().getName());  assertEquals(DeployerType.EMBEDDED,deployer.getType());}  }
class C{  public Long saveOrUpdateUser(Long user_level,ObjectMap<?,?> values,Long users_id){  try {    if (authLevelManagement.checkAdminLevel(user_level)) {      Long returnLong=null;      Long user_id=Long.parseLong(values.get("user_id").toString());      if (user_id != null && user_id > 0) {        returnLong=user_id;        Users savedUser=usersDao.getUser(user_id);        savedUser.setAge((Date)values.get("age"));        savedUser.setFirstname(values.get("firstname").toString());        savedUser.setLastname(values.get("lastname").toString());        savedUser.setTitle_id(Integer.parseInt(values.get("title_id").toString()));        savedUser.setLanguage_id(Long.parseLong(values.get("languages_id").toString()));        savedUser.setOmTimeZone(omTimeZoneDaoImpl.getOmTimeZone((values.get("jnameTimeZone").toString())));        String password=values.get("password").toString();        if (password.length() > 3) {          savedUser.setPassword(manageCryptStyle.getInstanceOfCrypt().createPassPhrase(password));        }        String email=values.get("email").toString();        if (!email.equals(savedUser.getAdresses().getEmail())) {          boolean checkEmail=emailManagement.checkUserEMail(email);          if (!checkEmail) {            returnLong=new Long(-11);          } else {            savedUser.getAdresses().setEmail(email);          }        }        String phone=values.get("phone").toString();        savedUser.getAdresses().setPhone(phone);        savedUser.getAdresses().setComment(values.get("comment").toString());        savedUser.getAdresses().setStreet(values.get("street").toString());        savedUser.getAdresses().setTown(values.get("town").toString());        savedUser.getAdresses().setAdditionalname(values.get("additionalname").toString());        savedUser.getAdresses().setZip(values.get("zip").toString());        savedUser.setForceTimeZoneCheck(false);        savedUser.getAdresses().setStates(statemanagement.getStateById(Long.parseLong(values.get("state_id").toString())));        savedUser.setShowContactData(Boolean.valueOf(values.get("showContactData").toString()));        savedUser.setShowContactDataToContacts(Boolean.valueOf(values.get("showContactDataToContacts").toString()));        savedUser.setUserOffers(values.get("userOffers").toString());        savedUser.setUserSearchs(values.get("userSearchs").toString());        if (savedUser.getUser_id() == null) {          em.persist(savedUser);        } else {          if (!em.contains(savedUser)) {            em.merge(savedUser);          }        }        return returnLong;      }    } else {      log.error("[saveOrUpdateUser] invalid auth " + users_id + " "+ new Date());    }  } catch (  Exception ex) {    log.error("[saveOrUpdateUser]",ex);  }  return null;}  }
class C{  public void printInstructions(String[] lines,TreeMap<Integer,ArrayList<Instruction>> DMLInstMap,IntRange range,boolean debug){  for (int lineNumber=range.getMinimumInteger(); lineNumber <= range.getMaximumInteger(); lineNumber++) {    System.out.format("line %4d: %s\n",lineNumber,lines[lineNumber - 1]);    if (DMLInstMap.get(lineNumber) != null) {      for (      Instruction currInst : DMLInstMap.get(lineNumber)) {        if (currInst instanceof CPInstruction) {          if (!debug)           System.out.format("\t\t id %4d: %s\n",currInst.getInstID(),prepareInstruction(currInst.toString())); else {            String[] instStr=prepareInstruction(currInst.toString()).split(" ");            System.out.format("\t\t id %4d: %s %s\n",currInst.getInstID(),instStr[0],instStr[1]);          }        } else         if (currInst instanceof MRJobInstruction) {          MRJobInstruction currMRInst=(MRJobInstruction)currInst;          System.out.format("\t\t id %4d: %s\n",currInst.getInstID(),prepareInstruction(currMRInst.getMRString(debug)));        } else         if (currInst instanceof BreakPointInstruction) {          BreakPointInstruction currBPInst=(BreakPointInstruction)currInst;          System.out.format("\t\t id %4d: %s\n",currInst.getInstID(),currBPInst.toString());        }      }    }  }}  }
class C{  private byte[] decryptContent(final byte[] input,final int off,final int len) throws BadCiphertextException {  if (blockHeaders_.isComplete() == false) {    return new byte[0];  }  final byte[] nonce=blockHeaders_.getNonce();  final int seqNum=1;  final byte[] contentAad=Utils.generateContentAad(messageId_,Constants.SINGLE_BLOCK_STRING_ID,seqNum,blockHeaders_.getContentLength());  final CipherHandler cipherHandler=new CipherHandler(decryptionKey_,nonce,contentAad,Cipher.DECRYPT_MODE,cryptoAlgo_);  return cipherHandler.cipherData(input,off,len);}  }
class C{  public void log(Level logLevel,String msg,Object param){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setParameters(new Object[]{param});  setResourceBundle(record);  log(record);}  }
class C{  public StrBuilder replaceFirst(StrMatcher matcher,String replaceStr){  return replace(matcher,replaceStr,0,size,1);}  }
class C{  public static int yearFromDateValue(long x){  return (int)(x >>> SHIFT_YEAR);}  }
class C{  public EntityGenerationSettingDialog(JPAModelerScene scene,EntityMappings entityMappings){  this.scene=scene;  initComponents();  ((EntityMappingMemberPanel)classGenerationPanel).init();  ((EntityMappingMemberPanel)classGenerationPanel).setValue(entityMappings);  generateDefaultValue.setSelected(GeneratorUtil.isGenerateDefaultValue());}  }
class C{  private String generateObjectID(String componentKey,String arrayType,String serialNumber,String nativeID){  String[] uriParams=new String[]{componentKey,arrayType,serialNumber,nativeID};  return MessageFormatter.arrayFormat(HDSConstants.HDS_OBJECT_ID_FORMAT,uriParams).getMessage();}  }
class C{  public R1Interval intersection(R1Interval y){  return new R1Interval(Math.max(lo(),y.lo()),Math.min(hi(),y.hi()));}  }
class C{  public static boolean isInitialized(){  return INSTANCE != null;}  }
class C{  public void invalidateSize(){  size=-1;}  }
class C{  @Override public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer){  outputFieldsDeclarer.declare(new Fields(IGNITE_TUPLE_FIELD));}  }
class C{  protected double[] combineCoords(double[] orig,double[] addCoords){  if (orig != null && addCoords != null) {    System.out.println("creating double array size " + (orig.length + addCoords.length));    double[] newCoords=new double[orig.length + addCoords.length];    System.arraycopy(orig,0,newCoords,0,orig.length);    System.arraycopy(addCoords,0,newCoords,orig.length,addCoords.length);    return newCoords;  } else   if (orig == null && addCoords == null) {    return new double[]{};  } else   if (orig != null) {    return orig;  } else {    return addCoords;  }}  }
class C{  private Getter<?,?> generateGettersForField(Class<?> cls,String inputFieldName) throws NoSuchFieldException, SecurityException {  java.lang.reflect.Field f=cls.getDeclaredField(inputFieldName);  Class<?> c=ClassUtils.primitiveToWrapper(f.getType());  Getter<?,?> classGetter=PojoUtils.createGetter(cls,inputFieldName,c);  return classGetter;}  }
class C{  public IntroduceFactoryRefactoring(ICompilationUnit cu,int selectionStart,int selectionLength){  Assert.isTrue(selectionStart >= 0);  Assert.isTrue(selectionLength >= 0);  fSelectionStart=selectionStart;  fSelectionLength=selectionLength;  fCUHandle=cu;  if (cu != null)   initialize();}  }
class C{  @Procedure @PerformsWrites @Description("apoc.periodic.iterate('statement returning items', 'statement per item', {batchSize:1000,parallel:true}) YIELD batches, total - run the second statement for each item returned by the first statement. Returns number of batches and total processed rows") public Stream<BatchAndTotalResult> iterate(@Name("cypherIterate") String cypherIterate,@Name("cypherAction") String cypherAction,@Name("config") Map<String,Object> config){  long batchSize=Util.toLong(config.getOrDefault("batchSize",10000));  boolean parallel=Util.toBoolean(config.getOrDefault("parallel",false));  Map<String,Object> params=(Map)config.getOrDefault("params",Collections.emptyMap());  log.info("starting batched operation using iteration `%s` in separate thread",cypherIterate);  try (Result result=db.execute(cypherIterate,params)){    return iterateAndExecuteBatchedInSeparateThread((int)batchSize,parallel,result,null);  } }  }
class C{  public TimerWorker(){  total=new AtomicLong();  callsNumber=new AtomicLong();  minimum=new AtomicLong();  maximum=new AtomicLong();}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  public void addSection(final TimeSection SECTION){  if (null == SECTION)   return;  sections.add(SECTION);  Collections.sort(sections,new TimeSectionComparator());  fireUpdateEvent(SECTION_EVENT);}  }
class C{  private WrappedIOException(IOException exception){  this.exception=exception;}  }
class C{  private static <E>ImmutableList<E> construct(Object... elements){  return asImmutableList(checkElementsNotNull(elements));}  }
class C{  @Override public void updateNull(int columnIndex) throws SQLException {  try {    debugCodeCall("updateNull",columnIndex);    update(columnIndex,ValueNull.INSTANCE);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override default Eval<OptionalDouble> averageDouble(final ToDoubleFunction<? super T> fn){  return Eval.later(null);}  }
class C{  public KMLRoot parse(Object... args) throws XMLStreamException {  KMLParserContext ctx=this.parserContext;  try {    for (XMLEvent event=ctx.nextEvent(); ctx.hasNext(); event=ctx.nextEvent()) {      if (event == null)       continue;      if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals("kml")) {        super.parse(ctx,event,args);        return this;      } else       if (event.isStartElement() && ctx.getParser(event) != null) {        this.doParseEventContent(ctx,event,args);        return this;      }    }  }  finally {    ctx.getEventReader().close();    this.closeEventStream();  }  return null;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public boolean contains(Assignment a){  for (  String key : a.getVariables()) {    if (map.containsKey(key)) {      Value val=a.getValue(key);      Value val2=map.get(key);      if (val2 == null) {        if (val != null) {          return false;        }      } else       if (!val2.equals(val)) {        return false;      }    } else {      return false;    }  }  return true;}  }
class C{  @Override public void draw(Canvas canvas,int x,int y,int width,int height,Paint paint){  paint.setAntiAlias(mRenderer.isAntialiasing());  paint.setStyle(Style.FILL);  paint.setTextSize(mRenderer.getLabelsTextSize());  int legendSize=getLegendSize(mRenderer,height / 5,0);  int left=x;  int top=y;  int right=x + width;  int sLength=mDataset.getItemCount();  double total=0;  String[] titles=new String[sLength];  for (int i=0; i < sLength; i++) {    total+=mDataset.getValue(i);    titles[i]=mDataset.getCategory(i);  }  if (mRenderer.isFitLegend()) {    legendSize=drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,true);  }  int bottom=y + height - legendSize;  drawBackground(mRenderer,canvas,x,y,width,height,paint,false,DefaultRenderer.NO_COLOR);  float currentAngle=mRenderer.getStartAngle();  int mRadius=Math.min(Math.abs(right - left),Math.abs(bottom - top));  int radius=(int)(mRadius * 0.35 * mRenderer.getScale());  if (autoCalculateCenter || mCenterX == NO_VALUE) {    mCenterX=(left + right) / 2;  }  if (autoCalculateCenter || mCenterY == NO_VALUE) {    mCenterY=(bottom + top) / 2;  }  mPieMapper.setDimensions(radius,mCenterX,mCenterY);  boolean loadPieCfg=!mPieMapper.areAllSegmentPresent(sLength);  if (loadPieCfg) {    mPieMapper.clearPieSegments();  }  float shortRadius=radius * 0.9f;  float longRadius=radius * 1.1f;  Rectangle2D oval=PkgUtils.makeRect(mCenterX - radius,mCenterY - radius,mCenterX + radius,mCenterY + radius);  List<Rectangle2D> prevLabelsBounds=new ArrayList<Rectangle2D>();  for (int i=0; i < sLength; i++) {    SimpleSeriesRenderer seriesRenderer=mRenderer.getSeriesRendererAt(i);    boolean gradient=false;    GradientDrawable gradientDrawable=null;    if (seriesRenderer.isGradientEnabled()) {      gradient=true;      gradientDrawable=new GradientDrawable(Orientation.TOP_BOTTOM,new int[]{seriesRenderer.getGradientStartColor(),seriesRenderer.getGradientStopColor()});      paint.setColor(seriesRenderer.getGradientStartColor());    } else {      paint.setColor(seriesRenderer.getColor());    }    float value=(float)mDataset.getValue(i);    float angle=(float)(value / total * 360);    if (seriesRenderer.isHighlighted()) {      double rAngle=Math.toRadians(90 - (currentAngle + angle / 2));      float translateX=(float)(radius * 0.1 * Math.sin(rAngle));      float translateY=(float)(radius * 0.1 * Math.cos(rAngle));      oval.translate(translateX,translateY);      if (gradient) {        canvas.drawArcWithGradient(oval,currentAngle,angle,true,paint,gradientDrawable);      } else {        canvas.drawArc(oval,currentAngle,angle,true,paint);      }      oval.translate(-translateX,-translateY);    } else {      if (gradient) {        canvas.drawArcWithGradient(oval,currentAngle,angle,true,paint,gradientDrawable);      } else {        canvas.drawArc(oval,currentAngle,angle,true,paint);      }    }    paint.setColor(seriesRenderer.getColor());    drawLabel(canvas,mDataset.getCategory(i),mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius,longRadius,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,true,false);    if (mRenderer.isDisplayValues()) {      drawLabel(canvas,getLabel(mRenderer.getSeriesRendererAt(i).getChartValuesFormat(),mDataset.getValue(i)),mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius / 2,longRadius / 2,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,false,true);    }    if (loadPieCfg) {      mPieMapper.addPieSegment(i,value,currentAngle,angle);    }    currentAngle+=angle;  }  prevLabelsBounds.clear();  drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,false);  drawTitle(canvas,x,y,width,paint);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PiePlot3D)) {    return false;  }  PiePlot3D that=(PiePlot3D)obj;  if (this.depthFactor != that.depthFactor) {    return false;  }  if (this.darkerSides != that.darkerSides) {    return false;  }  return super.equals(obj);}  }
class C{  public void createWeekScenarioParAndUserAssignChange() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-01 00:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PARCHARGE_PU_WEEK_ASSIGN",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PARCHARGE_PU_WEEK_ASSIGN",serviceDetails,basicSetup.getCustomerUser1(),role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-04 00:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-04 00:00:00"),"MAX_FOLDER_NUMBER","2");  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-11 00:00:00"),"MAX_FOLDER_NUMBER","7");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-12 06:00:00"));  subDetails=subscrSetup.revokeUser(basicSetup.getCustomerUser1(),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-14 12:00:00"));  subDetails=subscrSetup.addUser(basicSetup.getCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"GUEST"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-19 18:00:00"),"MAX_FOLDER_NUMBER","13");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-21 12:00:00"));  subDetails=subscrSetup.revokeUser(basicSetup.getCustomerUser1(),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-24 00:00:00"));  subDetails=subscrSetup.addUser(basicSetup.getCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"GUEST"),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance("2013-03-01 00:00:00");  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PARCHARGE_PU_WEEK_ASSIGN",subDetails);}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VinciLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VinciLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public static void showAndFocus(Context context,View view){  show(context);  if (view != null) {    view.requestFocus();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public double doOperation() throws OperatorFailedException {  double logq=0;  final Bounds<Double> bounds=variable.getBounds();  final int dim=variable.getSize();  int i=0;  while (i < dim) {    Object draw=randomGenerator.nextRandom();    if (univariate) {      double currentValue=variable.getValue(i);      double newValue=(Double)draw;      logq+=randomGenerator.logPdf(currentValue) - randomGenerator.logPdf(newValue);      if (newValue < bounds.getLowerLimit(i) || newValue > bounds.getUpperLimit(i)) {        throw new OperatorFailedException("Proposed value outside boundaries");      }    } else {      double[] currentValue=new double[generatorLength];      double[] newValue=(double[])draw;      for (int j=0; j < generatorLength; ++j) {        final int index=i * generatorLength + j;        currentValue[j]=variable.getValue(index);      }      logq+=randomGenerator.logPdf(currentValue) - randomGenerator.logPdf(newValue);      for (int j=0; j < generatorLength; ++j) {        final int index=i * generatorLength + j;        if (newValue[j] < bounds.getLowerLimit(index) || newValue[j] > bounds.getUpperLimit(index)) {          throw new OperatorFailedException("Proposed value outside boundaries");        }        variable.setValue(index,newValue[j]);      }    }    i+=generatorLength;  }  return logq;}  }
class C{  public BBOBTransformation(BBOBFunction function){  super(function.getNumberOfVariables());  this.function=function;}  }
class C{  @Override public void shutdown(ShutdownModeAmp mode){  QueryMap queryMap=_queryMapRef.get();  if (queryMap != null) {    queryMap.close();  }}  }
class C{  public static GF2Vector[] decryptionPrimitive(McElieceCCA2PrivateKeyParameters privKey,GF2Vector c){  int k=privKey.getK();  Permutation p=privKey.getP();  GF2mField field=privKey.getField();  PolynomialGF2mSmallM gp=privKey.getGoppaPoly();  GF2Matrix h=privKey.getH();  PolynomialGF2mSmallM[] q=privKey.getQInv();  Permutation pInv=p.computeInverse();  GF2Vector cPInv=(GF2Vector)c.multiply(pInv);  GF2Vector syndVec=(GF2Vector)h.rightMultiply(cPInv);  GF2Vector errors=GoppaCode.syndromeDecode(syndVec,field,gp,q);  GF2Vector mG=(GF2Vector)cPInv.add(errors);  mG=(GF2Vector)mG.multiply(p);  errors=(GF2Vector)errors.multiply(p);  GF2Vector m=mG.extractRightVector(k);  return new GF2Vector[]{m,errors};}  }
class C{  private static TreeNode previous(TreeNode x){  if (x == null) {    return null;  }  TreeNode l=x.left;  if (l != null) {    x=l;    TreeNode r=x.right;    while (r != null) {      x=r;      r=x.right;    }    return x;  }  TreeNode ch=x;  x=x.parent;  while (x != null && ch == x.left) {    ch=x;    x=x.parent;  }  return x;}  }
class C{  protected void installKeyboardActions(){  LazyActionMap.installLazyActionMap(table,BasicTableUI.class,"Table.actionMap");  InputMap inputMap=getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  SwingUtilities.replaceUIInputMap(table,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,inputMap);}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public boolean allowAppend(final Class<?> appendType){  final int count=getChildCount();  if (isRoot() && getChildCount() > 0) {    return false;  }  if (getCriterium() instanceof CConditionCriterium && !isRoot()) {    return false;  }  if (appendType == CConditionCriterium.class) {    return (getCriterium() instanceof CConditionCriterium && isRoot() && count == 0) || !(getCriterium() instanceof CNotCriterium) || count == 0;  }  if (appendType == CAndCriterium.class || appendType == COrCriterium.class) {    return (!(getCriterium() instanceof CNotCriterium) || getChildCount() == 0);  }  if (appendType == CNotCriterium.class) {    return !(getCriterium() instanceof CNotCriterium);  }  return false;}  }
class C{  public String contentType(){  return contentType;}  }
class C{  public static void sendFailurePatch(StatefulService service,TaskServiceState taskState,Throwable t){  TaskState state=new TaskState();  state.stage=TaskStage.FAILED;  state.failure=Utils.toServiceErrorResponse(t);  service.logWarning("Operation failed: %s",Utils.toString(t));  taskState.taskInfo=state;  sendPatch(service,taskState);}  }
class C{  @Override public int compareTo(Field o){  return DEFAULT_SORT.compare(this,o);}  }
class C{  public static BufferedImage toBufferedImage(RenderedImage rImg){  BufferedImage image;  if (rImg instanceof BufferedImage) {    image=(BufferedImage)rImg;  } else {    Raster r=rImg.getData();    WritableRaster wr=WritableRaster.createWritableRaster(r.getSampleModel(),null);    rImg.copyData(wr);    image=new BufferedImage(rImg.getColorModel(),wr,rImg.getColorModel().isAlphaPremultiplied(),null);  }  return image;}  }
class C{  public static void addIterator(final AccumuloStore store,final IteratorSetting iteratorSetting) throws StoreException {  try {    store.getConnection().tableOperations().attachIterator(store.getProperties().getTable(),iteratorSetting);  } catch (  AccumuloSecurityException|AccumuloException|TableNotFoundException e) {    throw new StoreException("Add iterator with Name: " + iteratorSetting.getName(),e);  }  TableUtils.setLocalityGroups(store);}  }
class C{  public BookmarkServiceImpl(final CategoryService categoryService,final ContentService contentService,final ProductService productService,final CacheManager cacheManager){  this.categoryService=categoryService;  this.productService=productService;  this.contentService=contentService;  CATEGORY_DECODE_CACHE=cacheManager.getCache("web.bookmarkService-seoCategoryDecode");  CATEGORY_ENCODE_CACHE=cacheManager.getCache("web.bookmarkService-seoCategoryEncode");  CONTENT_DECODE_CACHE=cacheManager.getCache("web.bookmarkService-seoContentDecode");  CONTENT_ENCODE_CACHE=cacheManager.getCache("web.bookmarkService-seoContentEncode");  SKU_DECODE_CACHE=cacheManager.getCache("web.bookmarkService-seoSkuDecode");  SKU_ENCODE_CACHE=cacheManager.getCache("web.bookmarkService-seoSkuEncode");  PRODUCT_DECODE_CACHE=cacheManager.getCache("web.bookmarkService-seoProductDecode");  PRODUCT_ENCODE_CACHE=cacheManager.getCache("web.bookmarkService-seoProductEncode");}  }
class C{  protected void assertEquals(Integer expected,Integer actual){  if (expected == null || actual == null) {    if (expected != actual) {      assertEquals("" + expected,"" + actual);    }  } else {    assertEquals(expected.intValue(),actual.intValue());  }}  }
class C{  public double nextDouble(double a){  double u, v, p, q;  int k;  if (a != a_prev) {    a_prev=a;    if (a < 0.97)     t=-a / Math.log(1.0 - a); else     h=Math.log(1.0 - a);  }  u=randomGenerator.raw();  if (a < 0.97) {    k=1;    p=t;    while (u > p) {      u-=p;      k++;      p*=a * (k - 1.0) / (double)k;    }    return k;  }  if (u > a)   return 1;  u=randomGenerator.raw();  v=u;  q=1.0 - Math.exp(v * h);  if (u <= q * q) {    k=(int)(1 + Math.log(u) / Math.log(q));    return k;  }  if (u > q)   return 1;  return 2;}  }
class C{  public StartListener(Object resource){  _resource=resource;}  }
class C{  public void sessionDestroyed(HttpSessionEvent hse){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"Cleaning up session for CDI @ViewScoped beans");  }  HttpSession session=hse.getSession();  Map<Object,Map<String,ViewScopeContextObject>> activeViewScopeContexts=(Map<Object,Map<String,ViewScopeContextObject>>)session.getAttribute(ACTIVE_VIEW_CONTEXTS);  if (activeViewScopeContexts != null) {    Map<String,Object> activeViewMaps=(Map<String,Object>)session.getAttribute(ACTIVE_VIEW_MAPS);    if (activeViewMaps != null) {      Iterator<Object> activeViewMapsIterator=activeViewMaps.values().iterator();      while (activeViewMapsIterator.hasNext()) {        Map<String,Object> instanceMap=(Map<String,Object>)activeViewMapsIterator.next();        Map<String,ViewScopeContextObject> contextMap=activeViewScopeContexts.get(System.identityHashCode(instanceMap));        destroyBeans(instanceMap,contextMap);      }    }    activeViewScopeContexts.clear();    session.removeAttribute(ACTIVE_VIEW_CONTEXTS);  }}  }
class C{  private void clear(){  int n=count();  for (int i=0; i < n; i++) {    data.setRowIndex(i);    checked.setSelected(false);  }}  }
class C{  public ZoomEvent(boolean in,float rate){  mZoomIn=in;  mZoomRate=rate;}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  int n=a.length;  int w=a[0].length();  for (int i=0; i < n; i++)   assert a[i].length() == w : "Strings must have fixed length";  sort(a,w);  for (int i=0; i < n; i++)   StdOut.println(a[i]);}  }
class C{  private void replaceData(LocalDataList list){  if (list.size() == 0 && mImages.size() == 0) {    return;  }  mImages=list;  if (mListener != null) {    mListener.onDataLoaded();  }}  }
class C{  public void test_insertLargeValue(){  final IRawStore store=new SimpleMemoryRawStore();  final IndexMetadata metadata=new IndexMetadata(UUID.randomUUID());  metadata.setRawRecords(true);  metadata.setMaxRecLen(64);  final BTree btree=BTree.create(store,metadata);  assertEquals(64,btree.getMaxRecLen());  assertTrue(((ILeafData)btree.getRoot()).hasRawRecords());  final byte[] key=new byte[]{1};  final byte[] val=new byte[btree.getMaxRecLen() + 1];  r.nextBytes(val);  assertNull(btree.insert(key,val));  final Leaf root=(Leaf)btree.getRoot();  final long addr=root.getRawRecord(0);  assertTrue(addr != IRawStore.NULL);  final ByteBuffer actual=btree.readRawRecord(addr);  TestCase3.assertEquals(val,actual);}  }
class C{  private void testFindFirstUnseenMessageUid() throws Exception {  LOG.info("findFirstUnseenMessageUid");  MessageUid uid=messageMapper.findFirstUnseenMessageUid(MBOXES.get(1));  assertEquals(MessageUid.of(1),uid);}  }
class C{  public void onPackageAdded(String packageName,int uid){}  }
class C{  public static String printTime(Time time,String format){  if (time == null) {    return "";  }  return new SimpleDateFormat(format).format(time);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.INTERFACE_BODY___INTERFACE_MEMBER_DECLARATION_1:    return getInterfaceMemberDeclaration_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public T find(int id){  View view=findView(id);  return create(view);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (nodeType == null) {    throw new NullPointerException();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void load(String pathName){  load0(pathName,RVMClass.getClassLoaderFromStackFrame(1),true);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.321 -0500",hash_original_method="045E6201A2106A3289C0B2900185AAE3",hash_generated_method="FEDE9724C2C0685BF0392B60ED6AFB46") private ClonedAttributes(int parserPointer,int pointer,int length){  this.parserPointer=parserPointer;  this.pointer=pointer;  this.length=length;}  }
class C{  public Persistence(Context context){  super(context,DATABASE_NAME,null,DATABASE_VERSION);}  }
class C{  private void claimInterface() throws SourceException {  if (mDeviceHandle != null) {    int result=LibUsb.kernelDriverActive(mDeviceHandle,USB_INTERFACE);    if (result == 1) {      result=LibUsb.detachKernelDriver(mDeviceHandle,USB_INTERFACE);      if (result != LibUsb.SUCCESS) {        mLog.error("failed attempt to detach kernel driver [" + LibUsb.errorName(result) + "]");        throw new SourceException("couldn't detach kernel driver " + "from device");      }    }    result=LibUsb.setConfiguration(mDeviceHandle,1);    if (result != LibUsb.SUCCESS) {      throw new SourceException("couldn't set USB configuration 1 [" + LibUsb.errorName(result) + "]");    }    result=LibUsb.claimInterface(mDeviceHandle,USB_INTERFACE);    if (result != LibUsb.SUCCESS) {      throw new SourceException("couldn't claim usb interface [" + LibUsb.errorName(result) + "]");    }  } else {    throw new SourceException("couldn't claim usb interface - no " + "device handle");  }}  }
class C{  public void namespaceAfterStartElement(final String prefix,final String uri) throws SAXException {  if (m_elemContext.m_elementURI == null) {    String prefix1=getPrefixPart(m_elemContext.m_elementName);    if (prefix1 == null && EMPTYSTRING.equals(prefix)) {      m_elemContext.m_elementURI=uri;    }  }  startPrefixMapping(prefix,uri,false);  return;}  }
class C{  protected void clearMenuSelection(){  popupMenuGroup.clearSelection();  updateSelectionStatus();}  }
class C{  private boolean isBlank(String str){  return str == null || str.trim().length() == 0;}  }
class C{  public void add(Cycle cycle){  currentCycle=cycle;  DOLLARS_PER_STEP=getDollarsPerStep();  STEP_AMOUNT=getStepAmount();  MAX_AMOUNT=getMaxAmount();  notifyBinderDataSetChanged();}  }
class C{  public void info(String msg){  log(Log.INFO,msg,null);}  }
class C{  public void testInsert2() throws SQLException {  DatabaseCreator.fillParentTable(conn);  DatabaseCreator.fillFKStrictTable(conn);  DatabaseCreator.fillFKCascadeTable(conn);  try {    statement.execute("INSERT INTO " + DatabaseCreator.FKSTRICT_TABLE + " VALUES(4, 4, 'testInsert')");  } catch (  SQLException ex) {  }  try {    statement.execute("INSERT INTO " + DatabaseCreator.FKCASCADE_TABLE + " VALUES(4, 4, 'testInsert')");  } catch (  SQLException ex) {  }}  }
class C{  public CommandServiceInfo(ICommandServiceInfo source){  this.id=source.getId();  this.name=source.getName();  Iterator<String> keys=source.metadataKeys();  while (keys.hasNext()) {    String key=keys.next();    metadata.put(key,source.getMetadata(key));  }}  }
class C{  public void testOneWriter() throws Exception {  File logDir=prepareLogDir("testOneWriter");  DiskLog log=openLog(logDir,false);  LogConnection conn=log.connect(false);  LogConnection conn2=null;  try {    conn2=log.connect(false);    throw new Exception("Able to connect with 2nd writer");  } catch (  THLException e) {  }  conn.release();  conn2=log.connect(false);  assertNotNull("Expect to get a connection",conn2);  assertFalse("Should be writable",conn2.isReadonly());  conn2.release();  log.release();}  }
class C{  public TypeTypeRef createTypeTypeRef(){  TypeTypeRefImpl typeTypeRef=new TypeTypeRefImpl();  return typeTypeRef;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ValuePreference.NAME)) {    if (MRole.getDefault().isShowPreference())     ValuePreference.start(m_mField,getValue());    return;  } else   if (e.getActionCommand().equals(FieldRecordInfo.CHANGE_LOG_COMMAND)) {    FieldRecordInfo.start(m_mField);    return;  }  if (e.getSource() == mEditor) {    String s=Editor.startEditor(this,Msg.translate(Env.getCtx(),m_columnName),getText(),isEditable(),m_fieldLength);    setText(s);  }  try {    fireVetoableChange(m_columnName,m_oldText,getText());  } catch (  PropertyVetoException pve) {  }}  }
class C{  public void removeSensorAssignment(Sensor sensor){  if (sensor == null) {    return;  }  for (  PositionablePoint po : layoutEditor.pointList) {    if ((po.getEastBoundSensor() != null) && po.getEastBoundSensor() == sensor) {      po.setEastBoundSensor(null);    }    if ((po.getWestBoundSensor() != null) && po.getWestBoundSensor() == sensor) {      po.setWestBoundSensor(null);    }  }  for (  LayoutTurnout to : layoutEditor.turnoutList) {    if ((to.getSensorA() != null) && to.getSensorA() == sensor) {      to.setSensorA(null);    }    if ((to.getSensorB() != null) && to.getSensorB() == sensor) {      to.setSensorB(null);    }    if ((to.getSensorC() != null) && to.getSensorC() == sensor) {      to.setSensorC(null);    }    if ((to.getSensorD() != null) && to.getSensorD() == sensor) {      to.setSensorD(null);    }  }  for (  LayoutSlip to : layoutEditor.slipList) {    if ((to.getSensorA() != null) && to.getSensorA() == sensor) {      to.setSensorA(null);    }    if ((to.getSensorB() != null) && to.getSensorB() == sensor) {      to.setSensorB(null);    }    if ((to.getSensorC() != null) && to.getSensorC() == sensor) {      to.setSensorC(null);    }    if ((to.getSensorD() != null) && to.getSensorD() == sensor) {      to.setSensorD(null);    }  }  for (  LevelXing x : layoutEditor.xingList) {    if ((x.getSensorA() != null) && x.getSensorA() == sensor) {      x.setSensorAName(null);    }    if ((x.getSensorB() != null) && x.getSensorB() == sensor) {      x.setSensorBName(null);    }    if ((x.getSensorC() != null) && x.getSensorC() == sensor) {      x.setSensorCName(null);    }    if ((x.getSensorD() != null) && x.getSensorD() == sensor) {      x.setSensorDName(null);    }  }}  }
class C{  public MovieFindMissingAction(String datasource){  this.datasource=datasource;  setValues();}  }
class C{  public void reduce(){  if (!getNewVariables().isEmpty() || !evidence.isEmpty()) {    StatePruner.prune(this);  }}  }
class C{  public boolean onMachineActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int side,float hitX,float hitY,float hitZ){  return false;}  }
class C{  public VertexPartition(Graph<V,E> g,Collection<Set<V>> vertex_sets){  this.vertex_sets=vertex_sets;  this.graph=g;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_TYPE_ACCESS_MODIFIER:    setDeclaredTypeAccessModifier(DECLARED_TYPE_ACCESS_MODIFIER_EDEFAULT);  return;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_PROVIDED_BY_RUNTIME:setDeclaredProvidedByRuntime(DECLARED_PROVIDED_BY_RUNTIME_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @Override public void onAction(final ActionType at){  IEntity entity=this.entity;  if (isReleased()) {    Logger.getLogger(Entity2DView.class).debug("View " + this + " already released - action not processed: "+ at);    return;  }  final int id=entity.getID().getObjectID();switch (at) {case LOOK:case ADMIN_INSPECT:case ADMIN_DESTROY:    at.send(at.fillTargetInfo(entity));  break;case ADMIN_ALTER:j2DClient.get().setChatLine("/alter #" + id + " ");break;default :Logger.getLogger(Entity2DView.class).error("Unknown action not processed: " + at);break;}}  }
class C{  public void print(TranspilerState state,Writer outCode,Optional<SourceMapInfo> optSourceMapInfo){  try {    prettyPrinter.print(state,outCode,optSourceMapInfo);  } catch (  IOException e) {    throw new WrappedException("exception while pretty-printing the intermediate model",e);  }}  }
class C{  public void test_ticket_1007_string3() throws Exception {  new TestHelper("ticket-1007-string3","ticket-1007-string3.rq","ticket-1007-custom.trig","ticket-1007-string.srx",false).runTest();}  }
class C{  public List<NamedRelatedResourceRep> listStoragePools(URI id){  StoragePoolList response=client.get(StoragePoolList.class,getIdUrl() + "/storage-pools",id);  return defaultList(response.getPools());}  }
class C{  private void validateResourceGroup(EnumerationContext ctx,ResourceGroupState resourceGroup){  if (resourceGroup.name == null) {    throw new IllegalArgumentException("projectName is required");  }  ctx.projectId=resourceGroup.name;}  }
class C{  public static void toggleView(View view){  if (view != null) {    if (view.getVisibility() == View.VISIBLE) {      hideView(view);    } else {      showView(view);    }  }}  }
class C{  void revokeRight(Table table){  if (grantedRights == null) {    return;  }  grantedRights.remove(table);  if (grantedRights.size() == 0) {    grantedRights=null;  }}  }
class C{  public boolean isParentDimension(Axis putativeChild) throws ComputingException, InterruptedException {  DimensionIndex parentIndex=getIndex();  DimensionIndex childIndex=putativeChild.getIndex();  if (parentIndex == null || childIndex == null) {    return false;  }  if (parentIndex.getRoot().equals(childIndex.getRoot())) {    if (getParent().equals(putativeChild.getParent())) {      if (parentIndex.equals(childIndex)) {        return true;      }      while (childIndex.getParent() != null) {        childIndex=childIndex.getParent();        if (parentIndex.equals(childIndex)) {          return true;        }      }    }  }  return false;}  }
class C{  public SelfIteratorNoPredicate() throws javax.xml.transform.TransformerException {  super(null);}  }
class C{  public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {  for (int i=0; i < callbacks.length; i++) {    if (callbacks[i] instanceof NameCallback) {      ((NameCallback)callbacks[i]).setName(username);    } else     if (callbacks[i] instanceof PasswordCallback) {      ((PasswordCallback)callbacks[i]).setPassword(password.toCharArray());    } else {      throw new UnsupportedCallbackException(callbacks[i],"Unrecognized Callback");    }  }}  }
class C{  public static void fill(int[] array,int start,int end,int value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  private boolean test_float4_2D(){  CUarray array=new CUarray();  CUDA_ARRAY_DESCRIPTOR ad=new CUDA_ARRAY_DESCRIPTOR();  ad.Format=CU_AD_FORMAT_FLOAT;  ad.Width=sizeX;  ad.Height=sizeY;  ad.NumChannels=4;  cuArrayCreate(array,ad);  CUDA_MEMCPY2D copyHD=new CUDA_MEMCPY2D();  copyHD.srcMemoryType=CUmemorytype.CU_MEMORYTYPE_HOST;  copyHD.srcHost=Pointer.to(input_float4_2D);  copyHD.srcPitch=sizeX * Sizeof.FLOAT * 4;  copyHD.dstMemoryType=CUmemorytype.CU_MEMORYTYPE_ARRAY;  copyHD.dstArray=array;  copyHD.WidthInBytes=sizeX * Sizeof.FLOAT * 4;  copyHD.Height=sizeY;  cuMemcpy2D(copyHD);  CUtexref texref=new CUtexref();  cuModuleGetTexRef(texref,module,"texture_float4_2D");  cuTexRefSetFilterMode(texref,CU_TR_FILTER_MODE_LINEAR);  cuTexRefSetAddressMode(texref,0,CU_TR_ADDRESS_MODE_CLAMP);  cuTexRefSetAddressMode(texref,1,CU_TR_ADDRESS_MODE_CLAMP);  cuTexRefSetFlags(texref,CU_TRSF_NORMALIZED_COORDINATES);  cuTexRefSetFormat(texref,CU_AD_FORMAT_FLOAT,4);  cuTexRefSetArray(texref,array,CU_TRSA_OVERRIDE_FORMAT);  CUdeviceptr dOutput=new CUdeviceptr();  cuMemAlloc(dOutput,Sizeof.FLOAT * 4);  CUfunction function=new CUfunction();  cuModuleGetFunction(function,module,"test_float4_2D");  Pointer kernelParameters=Pointer.to(Pointer.to(dOutput),Pointer.to(new float[]{posX}),Pointer.to(new float[]{posY}));  cuLaunchKernel(function,1,1,1,1,1,1,0,null,kernelParameters,null);  cuCtxSynchronize();  float hOutput[]=new float[4];  cuMemcpyDtoH(Pointer.to(hOutput),dOutput,Sizeof.FLOAT * 4);  log("Result float4 2D " + Arrays.toString(hOutput));  float expected[]=new float[]{1.5f,1.5f,1.5f,1.5f};  boolean passed=Arrays.equals(hOutput,expected);  log("Test   float4 2D " + (passed ? "PASSED" : "FAILED"));  cuArrayDestroy(array);  cuMemFree(dOutput);  return passed;}  }
class C{  static <T>Mono<T> convertToMono(Callable<T> supplier){  if (supplier instanceof Fuseable.ScalarCallable) {    Fuseable.ScalarCallable<T> scalarCallable=(Fuseable.ScalarCallable<T>)supplier;    T v=scalarCallable.call();    if (v == null) {      return Mono.empty();    }    return Mono.just(v);  }  return Mono.onAssembly(new MonoCallable<>(supplier));}  }
class C{  public void initLeading(){  this.leading=0;  while (this.leading < this.value.length() && this.value.charAt(this.leading) == ' ') {    this.leading++;  }  if (this.leading == this.value.length()) {    this.setEmpty();  }}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  protected byte[] lastKey() throws IOException {  assert (this.index != null) : "index == null; closeDate=" + this.closeDate + ", now="+ new Date();  if (this.index == null) {    log.severe("this.index == null in lastKey(); closeDate=" + this.closeDate + ", now="+ new Date()+ this.heapFile == null ? "" : (" file = " + this.heapFile.toString()));    return null;  }  if (this.index == null)   return null;synchronized (this.index) {    return this.index.largestKey();  }}  }
class C{  public int compareTo(XMLString xstr){  int len1=this.length();  int len2=xstr.length();  int n=Math.min(len1,len2);  int i=0;  int j=0;  while (n-- != 0) {    char c1=this.charAt(i);    char c2=xstr.charAt(j);    if (c1 != c2) {      return c1 - c2;    }    i++;    j++;  }  return len1 - len2;}  }
class C{  public static XMLTreeLocation inTheEnd(){  return new XMLTreeLocation(LocationType.END,"");}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public SQLFeatureNotSupportedException(){}  }
class C{  private void postInitViewPager(){  if (isInEditMode()) {    return;  }  try {    Field scroller=ViewPager.class.getDeclaredField("mScroller");    scroller.setAccessible(true);    Field interpolator=ViewPager.class.getDeclaredField("sInterpolator");    interpolator.setAccessible(true);    mScroller=new WXSmoothScroller(getContext(),(Interpolator)interpolator.get(null));    scroller.set(this,mScroller);  } catch (  Exception e) {    WXLogUtils.e("[CircleViewPager] postInitViewPager: ",e);  }}  }
class C{  public void deleteStringAttributes(){  deleteAttributeType(Attribute.STRING);}  }
class C{  public static double percentPlus(final double a,final double b){  return round((double)a / (double)(a + b));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:43.381 -0500",hash_original_method="0F092EE343E640C5A578BAEFAE8AEFB5",hash_generated_method="6F28AC5149E20C1DA152AF872D663D1C") public void resetDocumentLocator(String publicid,String systemid){  thePublicid=publicid;  theSystemid=systemid;  theLastLine=theLastColumn=theCurrentLine=theCurrentColumn=0;}  }
class C{  public void testTopicDinamicallyIncludedBehavior() throws Exception {  startAllBrokers();  Destination dest=createDestination("test",true);  MessageConsumer clientA=createConsumer("BrokerA",dest);  MessageConsumer clientB=createConsumer("BrokerB",dest);  Thread.sleep(2 * 1000);  sendMessages("BrokerA",dest,MESSAGE_COUNT);  MessageIdList msgsA=getConsumerMessages("BrokerA",clientA);  msgsA.waitForMessagesToArrive(MESSAGE_COUNT);  assertEquals(MESSAGE_COUNT,msgsA.getMessageCount());  MessageIdList msgsB=getConsumerMessages("BrokerB",clientB);  msgsB.waitForMessagesToArrive(MESSAGE_COUNT);  assertEquals(0,msgsB.getMessageCount());}  }
class C{  public boolean isString(){  return rawClass.equals(String.class);}  }
class C{  public DoubleByte(int val){  if (val > 0xFFFF || val < 0) {    throw new IllegalArgumentException("value is out of range");  }  msb=val >> 8;  lsb=val & 0xFF;}  }
class C{  public void insert(int offset,double value){  if (offset == _pos) {    add(value);    return;  }  ensureCapacity(_pos + 1);  System.arraycopy(_data,offset,_data,offset + 1,_pos - offset);  _data[offset]=value;  _pos++;}  }
class C{  public synchronized TypeMember appendMember(final BaseType containingType,final BaseType memberType,final String memberName) throws CouldntSaveDataException {  Preconditions.checkNotNull(containingType,"IE02775: Containing type can not be null.");  Preconditions.checkNotNull(memberType,"IE02776: Base type can not be null.");  Preconditions.checkNotNull(memberName,"IE02777: Member name can not be null.");switch (containingType.getCategory()) {case STRUCT:    return createStructureMember(containingType,memberType,memberName,determineAppendOffset(containingType));case UNION:  return createUnionMember(containingType,memberType,memberName);case FUNCTION_PROTOTYPE:return createFunctionPrototypeMember(containingType,memberType,memberName,determineAppendIndex(containingType));default :throw new IllegalStateException("Error: cannot insert member into non-compound type.");}}  }
class C{  <T,S extends BaseStream<T,S>,R>S assertNCallsOnly(S s,BiFunction<S,Consumer<T>,S> pf,int n){  AtomicInteger boxedInt=new AtomicInteger();  return pf.apply(s,null);}  }
class C{  public void updateProjectionMatrix(int width,int height){  mCamera.setProjectionMatrix(width,height);}  }
class C{  @Override public double op(final double x,final double y){  final TabulatedGaussLegendre gaussLegendreQuad=new TabulatedGaussLegendre(20);  if (Math.abs(correlation) < 0.3) {    gaussLegendreQuad.setOrder(6);  } else   if (Math.abs(correlation) < 0.75) {    gaussLegendreQuad.setOrder(12);  }  final double h=-x;  double k=-y;  double hk=h * k;  double bvn=0.0;  if (Math.abs(correlation) < 0.925) {    if (Math.abs(correlation) > 0) {      final double asr=Math.asin(correlation);      final Eqn3 f=new Eqn3(h,k,asr);      bvn=gaussLegendreQuad.evaluate(f);      bvn*=asr * (0.25 / Math.PI);    }    bvn+=cumnorm.op(-h) * cumnorm.op(-k);  } else {    if (correlation < 0) {      k*=-1;      hk*=-1;    }    if (Math.abs(correlation) < 1) {      final double Ass=(1 - correlation) * (1 + correlation);      double a=Math.sqrt(Ass);      final double bs=(h - k) * (h - k);      final double c=(4 - hk) / 8;      final double d=(12 - hk) / 16;      final double asr=-(bs / Ass + hk) / 2;      if (asr > -100) {        bvn=a * Math.exp(asr) * (1 - c * (bs - Ass) * (1 - d * bs / 5) / 3 + c * d * Ass* Ass / 5);      }      if (-hk < 100) {        final double B=Math.sqrt(bs);        bvn-=Math.exp(-hk / 2) * Constants.M_SQRT2PI * cumnorm.op(-B / a)* B* (1 - c * bs * (1 - d * bs / 5) / 3);      }      a/=2;      final Eqn6 f=new Eqn6(a,c,d,bs,hk);      bvn+=gaussLegendreQuad.evaluate(f);      bvn/=(-2.0 * Math.PI);    }    if (correlation > 0) {      bvn+=cumnorm.op(-Math.max(h,k));    } else {      bvn*=-1;      if (k > h) {        bvn+=cumnorm.op(k) - cumnorm.op(h);      }    }  }  return bvn;}  }
class C{  private List<String> makeAbsoluteCwdCandidates(String fileName){  List<String> candidates=new ArrayList<String>();  boolean hasProtocol=(URLClassPath.getURLProtocol(fileName) != null);  if (hasProtocol) {    candidates.add(fileName);    return candidates;  }  if (new File(fileName).isAbsolute()) {    candidates.add(fileName);    return candidates;  }  for (  File currentWorkingDirectory : currentWorkingDirectoryList) {    File relativeToCurrent=new File(currentWorkingDirectory,fileName);    if (relativeToCurrent.exists()) {      candidates.add(relativeToCurrent.toString());    }  }  if (candidates.isEmpty()) {    candidates.add(fileName);  }  return candidates;}  }
class C{  public T casePropertyType(PropertyType object){  return null;}  }
class C{  public boolean wasCancelled(){  return cancelled;}  }
class C{  public void testDelete() throws IOException {  InfoStreamListener stream=new InfoStreamListener("delete");  Path dir=wrap(createTempDir(),stream);  Files.createFile(dir.resolve("foobar"));  Files.delete(dir.resolve("foobar"));  assertTrue(stream.sawMessage());  try {    Files.delete(dir.resolve("foobar"));    fail("didn't get expected exception");  } catch (  IOException expected) {  }}  }
class C{  public static void swap(float[] array){  for (int i=0; i < array.length; i++)   array[i]=swap(array[i]);}  }
class C{  public static List<String> classesPath() throws FileNotFoundException, LoadingFileException {  List<File> files=getJavaFiles();  List<String> paths=new ArrayList<String>();  for (  File file : files)   paths.add(file.getPath());  return paths;}  }
class C{  public void addEntry(PrincipalName service,char[] psswd,int kvno,boolean append) throws KrbException {  addEntry(service,service.getSalt(),psswd,kvno,append);}  }
class C{  public WrapToken(Krb5Context context,InputStream is,MessageProp prop) throws GSSException {  super(Krb5Token.WRAP_ID,context,is,prop);  this.is=is;  this.privacy=prop.getPrivacy();  dataSize=getGSSHeader().getMechTokenLength() - getTokenSize();}  }
class C{  @Override public boolean equals(final Object o){  if (!(o instanceof IntegerGeoPoint))   return false;  IntegerGeoPoint oo=(IntegerGeoPoint)o;  return (this.latlon == oo.latlon);}  }
class C{  public boolean isInline(){  return label.isInline();}  }
class C{  @Override public void mouseExited(MouseEvent e){}  }
class C{  public void testParseUserWithNoRoles(){  User expectedUser=new User();  expectedUser.setName("name");  expectedUser.setPassword("pwd");  User user=User.parseUser("name:pwd");  assertEquals(expectedUser,user);}  }
class C{  @SkipValidation @Action(value="/revPetition-newForm") public String newForm(){  if (LOGGER.isDebugEnabled())   LOGGER.debug("Entered into newForm");  final BasicProperty basicProperty=basicPropertyDAO.getBasicPropertyByIndexNumAndParcelID(propertyId,null);  if (basicProperty.getProperty().getStatus().equals(PropertyTaxConstants.STATUS_ISACTIVE)) {    addActionError(getText("revPetition.demandActive"));    return COMMON_FORM;  }  getPropertyView(propertyId);  if (objection != null && objection.getBasicProperty() != null && objection.getBasicProperty().isUnderWorkflow()) {    addActionMessage(getText("property.state.objected",new String[]{objection.getBasicProperty().getUpicNo()}));    return STRUTS_RESULT_MESSAGE;  }  isMeesevaUser=propService.isMeesevaUser(securityUtils.getCurrentUser());  if (isMeesevaUser) {    if (getMeesevaApplicationNumber() == null) {      addActionMessage(getText("MEESEVA.005"));      return MEESEVA_ERROR;    } else {      objection.setMeesevaApplicationNumber(getMeesevaApplicationNumber());    }  }  setFloorDetails(objection.getBasicProperty().getProperty());  return NEW;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:11.083 -0500",hash_original_method="EC3762ABD187734DF955C9D194C2C167",hash_generated_method="ED6218BA92B2498B7E6ECACC0FCD68CE") public void disconnect() throws IOException {  if (_errorStream_ != null)   _errorStream_.close();  _errorStream_=null;  super.disconnect();}  }
class C{  protected void initModes(){  addInputMode(QWERTY_MODE,DEFAULT_QWERTY);  addInputMode(NUMBERS_SYMBOLS_MODE,DEFAULT_NUMBERS_SYMBOLS);  addInputMode(SYMBOLS_MODE,DEFAULT_SYMBOLS);  addInputMode(NUMBERS_MODE,DEFAULT_NUMBERS);  if (defaultInputModes != null) {    Enumeration e=defaultInputModes.keys();    while (e.hasMoreElements()) {      String key=(String)e.nextElement();      addInputMode(key,(String[][])defaultInputModes.get(key));    }  }}  }
class C{  public void rotateAroundZ(float angle){  angle*=Math.PI / 180.0;  float f1=MathHelper.cos(angle);  float f2=MathHelper.sin(angle);  double d0=this.x * (double)f1 + this.y * (double)f2;  double d1=this.y * (double)f1 - this.x * (double)f2;  double d2=this.z;  this.set(d0,d1,d2);}  }
class C{  protected byte[] engineSign() throws SignatureException {  BigInteger k=generateK(presetQ);  BigInteger r=generateR(presetP,presetQ,presetG,k);  BigInteger s=generateS(presetX,presetQ,r,k);  try {    DerOutputStream outseq=new DerOutputStream(100);    outseq.putInteger(r);    outseq.putInteger(s);    DerValue result=new DerValue(DerValue.tag_Sequence,outseq.toByteArray());    return result.toByteArray();  } catch (  IOException e) {    throw new SignatureException("error encoding signature");  }}  }
class C{  public StaticAnalysisStats(){  this.optimizerStats=new LinkedHashMap<String,StaticAnalysisStat>();  parserStat=new StaticAnalysisStat("ParseTime");  resolveValuesStat=new StaticAnalysisStat("ResolveValues");  rangeCountStat=new StaticAnalysisStat("RangeCount");  optimizerLoopStat=new StaticAnalysisStat("Optimizers");}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StackedAreaRenderer)) {    return false;  }  StackedAreaRenderer that=(StackedAreaRenderer)obj;  if (this.renderAsPercentages != that.renderAsPercentages) {    return false;  }  return super.equals(obj);}  }
class C{  public void onPlayerClosed(){  if (LogUtils.isActive) {    Log.d(LOGTAG,"onPlayerClosed");  }}  }
class C{  public static double AHrawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum,double precision){  double expectedResult;  double predictedValue;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  double sumOfHits=0.0;  int len=dvValues.length;  if (precision < 0.0) {    precision=-precision;    System.err.println("Warning: precision (" + precision + ") < 0 in call to AHfitness, setting to -precision.");  }  for (int i=0; i < len; i++) {    predictedValue=ind.eval(chromosomeNum,useTrainingData,i);    expectedResult=dvValues[i];    if (Math.abs(predictedValue - expectedResult) <= precision)     sumOfHits+=1.0;  }  return sumOfHits;}  }
class C{  private static String unwrapArgumentCode(Type type,String name){  if (type.dimension().length() > 0 || type.asClassDoc() != null) {    return "((" + type.toString() + ") "+ name+ ")";  } else   if (type.typeName().equals("boolean")) {    return "((java.lang.Boolean) " + name + ").booleanValue()";  } else   if (type.typeName().equals("byte")) {    return "((java.lang.Byte) " + name + ").byteValue()";  } else   if (type.typeName().equals("char")) {    return "((java.lang.Character) " + name + ").charValue()";  } else   if (type.typeName().equals("short")) {    return "((java.lang.Short) " + name + ").shortValue()";  } else   if (type.typeName().equals("int")) {    return "((java.lang.Integer) " + name + ").intValue()";  } else   if (type.typeName().equals("long")) {    return "((java.lang.Long) " + name + ").longValue()";  } else   if (type.typeName().equals("float")) {    return "((java.lang.Float) " + name + ").floatValue()";  } else   if (type.typeName().equals("double")) {    return "((java.lang.Double) " + name + ").doubleValue()";  } else {    throw new AssertionError(type);  }}  }
class C{  public boolean isLocallyInitiated(){  boolean streamIsClient=((id & 1) == 1);  return connection.client == streamIsClient;}  }
class C{  public void clear(){  if (data != null) {    for (int i=0; i < (length * 5); i++)     data[i]=null;  }  length=0;}  }
class C{  public static Builder builder(){  return new Builder(new AcceptRequest());}  }
class C{  private boolean isCollapsed(){  return mTabSpinner != null && mTabSpinner.getParent() == this;}  }
class C{  @RequestMapping(value="/emrClusters",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_EMR_CLUSTERS_POST) public EmrCluster createEmrCluster(@RequestBody EmrClusterCreateRequest request) throws Exception {  return emrService.createCluster(request);}  }
class C{  public byte[] messageDecrypt(byte[] input) throws Exception {  GF2Vector vec=GF2Vector.OS2VP(n,input);  McEliecePrivateKeyParameters privKey=(McEliecePrivateKeyParameters)key;  GF2mField field=privKey.getField();  PolynomialGF2mSmallM gp=privKey.getGoppaPoly();  GF2Matrix sInv=privKey.getSInv();  Permutation p1=privKey.getP1();  Permutation p2=privKey.getP2();  GF2Matrix h=privKey.getH();  PolynomialGF2mSmallM[] qInv=privKey.getQInv();  Permutation p=p1.rightMultiply(p2);  Permutation pInv=p.computeInverse();  GF2Vector cPInv=(GF2Vector)vec.multiply(pInv);  GF2Vector syndrome=(GF2Vector)h.rightMultiply(cPInv);  GF2Vector z=GoppaCode.syndromeDecode(syndrome,field,gp,qInv);  GF2Vector mSG=(GF2Vector)cPInv.add(z);  mSG=(GF2Vector)mSG.multiply(p1);  z=(GF2Vector)z.multiply(p);  GF2Vector mS=mSG.extractRightVector(k);  GF2Vector mVec=(GF2Vector)sInv.leftMultiply(mS);  return computeMessage(mVec);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public void login(){  Presence presence=new Presence(Presence.Type.available);  login(presence);}  }
class C{  @Override public void onPassphraseCreated(String passphrase){  if (!mProfileSyncService.isSyncInitialized()) {    return;  }  configureEncryption(passphrase);}  }
class C{  private static void printUserCalendars(CalendarService service,URL feedUrl) throws IOException, ServiceException {  CalendarFeed resultFeed=service.getFeed(feedUrl,CalendarFeed.class);  for (int i=0; i < resultFeed.getEntries().size(); i++) {    CalendarEntry entry=resultFeed.getEntries().get(i);    System.out.println("\t" + entry.getTitle().getPlainText());  }}  }
class C{  public static void printAllInfo(McfData mcfData){  printReportInfo(mcfData);  printProfileInfo(mcfData);  printQueryInfo(mcfData);  printPaginationInfo(mcfData);  printTotalsForAllResults(mcfData);  printColumnHeaders(mcfData);  printDataTable(mcfData);  System.out.println();  System.out.println();}  }
class C{  public static void startActivity(Context context){  if (context == null)   return;  Intent intent=new Intent(context,ExpandedControllerActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public static NamespaceId readFrom(final Deserializer deserializer,final String label){  return new NamespaceId(deserializer.readString(label));}  }
class C{  public final double doOperation() throws OperatorFailedException {  System.out.println("Walking cluster");  int index;  if (updateMap == null) {    index=MathUtils.nextInt(parameter.getDimension());  } else {    index=updateMap.get(MathUtils.nextInt(updateMap.size()));  }  double draw=(2.0 * MathUtils.nextDouble() - 1.0) * windowSize;  double newValue=parameter.getParameterValue(index) + draw;  final Bounds<Double> bounds=parameter.getBounds();  final double lower=(lowerOperatorBound == null ? bounds.getLowerLimit(index) : Math.max(bounds.getLowerLimit(index),lowerOperatorBound));  final double upper=(upperOperatorBound == null ? bounds.getUpperLimit(index) : Math.min(bounds.getUpperLimit(index),upperOperatorBound));  if (condition == BoundaryCondition.reflecting) {    newValue=reflectValue(newValue,lower,upper);  } else   if (newValue < lower || newValue > upper) {    throw new OperatorFailedException("proposed value outside boundaries");  }  parameter.setParameterValue(index,newValue);  return 0.0;}  }
class C{  public String filterTipText(){  return "The filter to be used.";}  }
class C{  private synchronized ResourceBundle findResourceBundle(String name,boolean useCallersClassLoader){  throw new RuntimeException();}  }
class C{  public static boolean isCauseMethodName(String methodName){  return ArrayUtils.indexOf(CAUSE_METHOD_NAMES,methodName) >= 0;}  }
class C{  public SocketTimeoutException(){}  }
class C{  @Override public void onBackPressed(){  if (mIgnoreBack)   return;  super.onBackPressed();}  }
class C{  private SSLInstruction matchInstruction(Instruction instr){  String name=instr.getName();  name=name.toUpperCase(Locale.ENGLISH);  if (instr instanceof X86Instruction) {    X86Instruction x86instr=(X86Instruction)instr;    if (x86instr.hasPrefixLOCK() && x86instr.hasPrefixREPZ()) {      if (name.equals("INCL")) {        return magicInstructions.getAllocPrototype();      } else       if (name.equals("NOTL")) {        return magicInstructions.getDeallocPrototype();      } else       if (name.equals("SUBL")) {        return magicInstructions.getHavoc32Prototype();      } else       if (name.equals("SUBW")) {        return magicInstructions.getHavoc16Prototype();      } else       if (name.equals("SUBB")) {        return magicInstructions.getHavoc8Prototype();      } else       if (name.equals("MOVL")) {        return magicInstructions.getNondet32Prototype();      } else       if (name.equals("MOVW")) {        return magicInstructions.getNondet16Prototype();      } else       if (name.equals("MOVB")) {        return magicInstructions.getNondet8Prototype();      } else       if (name.equals("ADDL")) {        return magicInstructions.getAssertGTPrototype();      } else       if (name.equals("CMPL")) {        return magicInstructions.getAssertEQPrototype();      } else       if (name.equals("ADCL")) {        return magicInstructions.getAssertGEPrototype();      } else {        logger.warn("Instruction with both LOCK and REP prefixes was not recognized as Jakstab magic!");      }    } else     if (x86instr.hasPrefixREPZ() || x86instr.hasPrefixREPNZ()) {      boolean legalREP=false;      for (      String repInstr : repInstructions) {        if (name.startsWith(repInstr)) {          if (x86instr.hasPrefixREPZ())           name="REP" + name;          if (x86instr.hasPrefixREPNZ())           name="REPNE" + name;          legalREP=true;          break;        }      }      if (!legalREP)       logger.info("Ignoring REP prefix of " + name + "!");    }  }  if (instructions.containsKey(name) && (!instrGroups.containsKey(name) || instrGroups.get(name).size() == 1)) {    return instructions.get(name);  }  if (!(instrGroups.containsKey(name))) {    logger.warn("SSL library has no entry for " + name + "!");    return null;  }  List<SSLInstruction> instrList=instrGroups.get(name);  if (instrList.size() == 1)   return instrList.get(0);  int maxScore=-1;  int score=0;  SSLInstruction maxMatch=null;  for (  SSLInstruction proto : instrList) {    score=0;    if (instr.getOperandCount() == proto.getParameterCount())     score+=NUM_OPERANDS_SCORE;    if (Options.summarizeRep.getValue() && proto.getName().startsWith("REP") && proto.getName().endsWith("SUMMARY")) {      score++;    }    for (int i=0; i < instr.getOperandCount(); i++) {      Operand oper=instr.getOperand(i);      if (oper instanceof Register && ((oper.equals(X86Registers.EAX) && proto.getName().endsWith("EAX")) || (oper.equals(X86Registers.AX) && proto.getName().endsWith("AX")) || (oper.equals(X86Registers.AL) && proto.getName().endsWith("AL"))|| (oper.equals(X86SegmentRegisters.CS) && proto.getName().endsWith("CS"))|| (oper.equals(X86SegmentRegisters.DS) && proto.getName().endsWith("DS"))|| (oper.equals(X86SegmentRegisters.ES) && proto.getName().endsWith("ES"))|| (oper.equals(X86SegmentRegisters.FS) && proto.getName().endsWith("FS"))|| (oper.equals(X86SegmentRegisters.GS) && proto.getName().endsWith("GS"))|| (oper.equals(X86SegmentRegisters.SS) && proto.getName().endsWith("SS")))) {        score+=IMPLICIT_OPERAND_MATCH_SCORE;        if (instr.getOperandCount() == proto.getParameterCount() + 1) {          score+=NUM_OPERANDS_SCORE;        }      }      if (proto.getParameter(i) == null)       continue;      String param=proto.getParameter(i).getName();      if ((oper instanceof Register && param.startsWith("reg")) || (oper instanceof X86FloatRegister && param.equals("sti")) || (oper instanceof Immediate && param.equals("i" + Integer.toString(((Immediate)oper).getDataType().bits())))|| (oper instanceof MemoryOperand && (param.equals("modrm") || param.equals("mem")))|| (oper instanceof PCRelativeAddress && (param.startsWith("reloc"))))       score+=OPERAND_TYPE_EXACT_SCORE; else       if (oper instanceof Register && param.equals("modrm"))       score+=OPERAND_TYPE_MATCH_SCORE;    }    if (score > maxScore) {      maxMatch=proto;      maxScore=score;    }  }  return maxMatch;}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  public Boolean isCsumOffload(){  return csumOffload;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public VersionedBrowserMatcher(@NonNull String packageName,@NonNull String signatureHash,boolean usingCustomTab,@NonNull VersionRange versionRange){  this(packageName,Collections.singleton(signatureHash),usingCustomTab,versionRange);}  }
class C{  public static String generateSUM(DbColumnDef colDef,String alias){  StringBuffer sql=new StringBuffer(" SUM(").append(colDef.getQualifiedName()).append(") AS ").append(alias).append(" ");  return sql.toString();}  }
class C{  @Override public void onCanceled(D result){  super.onCanceled(result);  if (result != null) {    onReleaseResult(result);  }}  }
class C{  private byte[] keyBytes(SwapKey key) throws IgniteSpiException {  assert key != null;  byte[] keyBytes=key.keyBytes();  if (keyBytes == null) {    try {      keyBytes=ignite.configuration().getMarshaller().marshal(key.key());    } catch (    IgniteCheckedException e) {      throw new IgniteSpiException("Failed to marshal key: " + key.key(),e);    }    key.keyBytes(keyBytes);  }  return keyBytes;}  }
class C{  private void drawHStretch(float stretch){  final float ag=scurve(stretch,8.0f);  if (DEBUG) {    Slog.d(TAG,"drawHStretch: stretch=" + stretch + ", ag="+ ag);  }  if (stretch < 1.0f) {    GLES10.glVertexPointer(2,GLES10.GL_FLOAT,0,mVertexBuffer);    GLES10.glEnableClientState(GLES10.GL_VERTEX_ARRAY);    setHStretchQuad(mVertexBuffer,mDisplayWidth,mDisplayHeight,ag,mSwapNeeded);    GLES10.glColor4f(1.0f - ag,1.0f - ag,1.0f - ag,1.0f);    GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN,0,4);    GLES10.glDisableClientState(GLES10.GL_VERTEX_ARRAY);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.CONDITIONAL_ROUTE__CONDITION:    setCondition((String)newValue);  return;case EipPackage.CONDITIONAL_ROUTE__CHANNEL:setChannel((Channel)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  char[] buffer=new char[DEFAULT_BUFFER_SIZE];  int count=0;  int n=0;  while (-1 != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.STATE__SCOPES:    return ((InternalEList<?>)getScopes()).basicRemove(otherEnd,msgs);case SGraphPackage.STATE__PARENT_REGION:  return basicSetParentRegion(null,msgs);case SGraphPackage.STATE__INCOMING_TRANSITIONS:return ((InternalEList<?>)getIncomingTransitions()).basicRemove(otherEnd,msgs);case SGraphPackage.STATE__OUTGOING_TRANSITIONS:return ((InternalEList<?>)getOutgoingTransitions()).basicRemove(otherEnd,msgs);case SGraphPackage.STATE__REGIONS:return ((InternalEList<?>)getRegions()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Bindings add(String property,JToggleButton c,boolean defaultValue){  registerPropertyChangeListener(c);  return add(new JToggleButtonBinding(property,c,defaultValue));}  }
class C{  public void batchFinished() throws Exception {  if (m_InputFormat == null) {    throw new Exception("No input instance format defined");  }  notifyInstanceProduced(new InstanceEvent(this,InstanceEvent.BATCH_FINISHED));}  }
class C{  private Map<TreeSpec,String> buildExpected(CompilationUnitTree tree){  Map<TreeSpec,String> expected=new HashMap<TreeSpec,String>();  try {    JavaFileObject o=tree.getSourceFile();    File sourceFile=new File(o.toUri());    LineNumberReader reader=new LineNumberReader(new FileReader(sourceFile));    String line=reader.readLine();    Pattern prevsubtreePattern=Pattern.compile("\\s*///(.*)-:-(.*)");    Pattern prevfulltreePattern=Pattern.compile("\\s*///(.*)");    Pattern subtreePattern=Pattern.compile("(.*)///(.*)-:-(.*)");    Pattern fulltreePattern=Pattern.compile("(.*)///(.*)");    while (line != null) {      Matcher prevsubtreeMatcher=prevsubtreePattern.matcher(line);      Matcher prevfulltreeMatcher=prevfulltreePattern.matcher(line);      Matcher subtreeMatcher=subtreePattern.matcher(line);      Matcher fulltreeMatcher=fulltreePattern.matcher(line);      if (prevsubtreeMatcher.matches()) {        String treeString=prevsubtreeMatcher.group(1).trim();        if (treeString.endsWith(";")) {          treeString=treeString.substring(0,treeString.length() - 1);        }        TreeSpec treeSpec=new TreeSpec(treeString.trim(),reader.getLineNumber() + 1);        expected.put(treeSpec,canonizeTypeString(prevsubtreeMatcher.group(2)));      } else       if (prevfulltreeMatcher.matches()) {        String treeString=reader.readLine().trim();        if (treeString.endsWith(";")) {          treeString=treeString.substring(0,treeString.length() - 1);        }        TreeSpec treeSpec=new TreeSpec(treeString.trim(),reader.getLineNumber());        expected.put(treeSpec,canonizeTypeString(prevfulltreeMatcher.group(1)));      } else       if (subtreeMatcher.matches()) {        String treeString=subtreeMatcher.group(2).trim();        if (treeString.endsWith(";")) {          treeString=treeString.substring(0,treeString.length() - 1);        }        TreeSpec treeSpec=new TreeSpec(treeString.trim(),reader.getLineNumber());        expected.put(treeSpec,canonizeTypeString(subtreeMatcher.group(3)));      } else       if (fulltreeMatcher.matches()) {        String treeString=fulltreeMatcher.group(1).trim();        if (treeString.endsWith(";")) {          treeString=treeString.substring(0,treeString.length() - 1);        }        TreeSpec treeSpec=new TreeSpec(treeString.trim(),reader.getLineNumber());        expected.put(treeSpec,canonizeTypeString(fulltreeMatcher.group(2)));      }      line=reader.readLine();    }    reader.close();  } catch (  IOException e) {    e.printStackTrace();  }  return expected;}  }
class C{  public static void confirmYesno(Context context,CharSequence msg,DialogInterface.OnClickListener onYes){  confirmYesno(context,msg,onYes,null);}  }
class C{  private static boolean checkOrder(List<? extends AbstractBlockBase<?>> order,int expectedBlockCount){  assert order.size() == expectedBlockCount : String.format("Number of blocks in ordering (%d) does not match expected block count (%d)",order.size(),expectedBlockCount);  return true;}  }
class C{  public boolean checkNoDependency(Tenant tenant,String module){  ModuleDescriptor mod=moduleManager.get(module);  if (mod == null) {    logger.warn("Module " + module + " not found when checking delete dependencies!");    return true;  }  logger.debug("Checking that we can delete " + module);  ModuleInterface[] provides=mod.getProvides();  if (provides == null) {    return true;  }  for (  ModuleInterface prov : provides) {    logger.debug("Checking provided service " + prov.getId());    for (    String enabledmodule : tenant.listModules()) {      ModuleDescriptor em=moduleManager.get(enabledmodule);      ModuleInterface[] req=em.getRequires();      logger.debug("Checking provided service " + prov.getId() + " against "+ enabledmodule);      if (req != null) {        for (        ModuleInterface ri : req) {          if (prov.getId().equals(ri.getId())) {            logger.debug("checkNoDependency: " + module + " "+ prov.getId()+ " is used by "+ enabledmodule);            return false;          }        }      }    }  }  return true;}  }
class C{  static final double orientation(IMovingAgent agent1,IMovingAgent agent2){  return Geometric.angle(agent1.getLocation(),agent2.getLocation());}  }
class C{  public static byte[] accDecoderPkt(int number,boolean closed){  int dBits=(((number - 1) & 0x03) << 1);  dBits=closed ? (dBits | 1) : dBits;  int aBits=(number - 1) >> 2;  aBits+=1;  int cBit=1;  return NmraPacket.accDecoderPkt(aBits,cBit,dBits);}  }
class C{  public static java.lang.String toString(int modifiers){  StringBuilder buf=new StringBuilder();  if (isPublic(modifiers)) {    buf.append("public ");  }  if (isProtected(modifiers)) {    buf.append("protected ");  }  if (isPrivate(modifiers)) {    buf.append("private ");  }  if (isAbstract(modifiers)) {    buf.append("abstract ");  }  if (isStatic(modifiers)) {    buf.append("static ");  }  if (isFinal(modifiers)) {    buf.append("final ");  }  if (isTransient(modifiers)) {    buf.append("transient ");  }  if (isVolatile(modifiers)) {    buf.append("volatile ");  }  if (isSynchronized(modifiers)) {    buf.append("synchronized ");  }  if (isNative(modifiers)) {    buf.append("native ");  }  if (isStrict(modifiers)) {    buf.append("strictfp ");  }  if (isInterface(modifiers)) {    buf.append("interface ");  }  if (buf.length() == 0) {    return "";  }  buf.setLength(buf.length() - 1);  return buf.toString();}  }
class C{  public void insertFirst(Instruction inst,LinkedList<MethodVariables> mvarList){  list.addFirst(new VariableMapElement(inst,mvarList));}  }
class C{  static ModuleIdentifier createModuleIdentifier(ArtifactResult i){  String name=ModuleUtil.makeModuleName(i.namespace(),i.name(),null);  return ModuleIdentifier.create(name,i.version());}  }
class C{  public static <T>LazyPOrderedSetX<T> generate(long limit,Supplier<T> s){  return fromStreamS(ReactiveSeq.generate(s).limit(limit));}  }
class C{  public GravityCompassProvider(SensorManager sensorManager){  super(sensorManager);  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY));  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD));}  }
class C{  protected synchronized void save(){  int retVal;  File file;  String text;  FileWriter fwriter;  BufferedWriter bwriter;  retVal=m_FileChooser.showOpenDialog(this);  if (retVal != MekaFileChooser.APPROVE_OPTION)   return;  file=m_FileChooser.getSelectedFile();  text=m_TextArea.getText();  fwriter=null;  bwriter=null;  try {    fwriter=new FileWriter(file);    bwriter=new BufferedWriter(fwriter);    bwriter.write(text);    bwriter.newLine();    bwriter.flush();    log("Log successfully saved to: " + file);  } catch (  Exception e) {    handleException("Failed to save log output to: " + file,e);  } finally {    FileUtils.closeQuietly(bwriter);    FileUtils.closeQuietly(fwriter);  }}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  public double calculateLogLikelihood(){  double logLikelihood=traitLogLikelihood(treeModel.getRoot());  if (logLikelihood > maxLogLikelihood) {    maxLogLikelihood=logLikelihood;  }  return logLikelihood;}  }
class C{  private ScriptFragment extractFunction(Reader scriptReader) throws IOException {  ScriptFragment fragment=new ScriptFragment();  boolean inString=false;  boolean inChar=false;  boolean escaped=false;  boolean lineComment=false;  boolean blockComment=false;  char lastCh='\0';  int braceCounter=0;  boolean notStarted=true;  int b=scriptReader.read();  int skip=0;  while (b != -1 && (notStarted || braceCounter > 0)) {    char ch=(char)b;    if (!blockComment && !lineComment) {      fragment.script=fragment.script + ch;      if (!escaped) {        if (!inString && !inChar) {          if (ch == '{') {            braceCounter++;            notStarted=false;          }          if (ch == '}') {            braceCounter--;          }        }        if (ch == '\"') {          inString=!inString;        }        if (ch == '\'') {          inChar=!inChar;        }        if (ch == '\\') {          escaped=true;        }        if (ch == '\n') {          fragment.numberOfLines++;        }        if (ch == '/' && lastCh == '/') {          lineComment=true;          fragment.script=fragment.script.substring(0,fragment.script.length() - 2);        }        if (ch == '*' && lastCh == '/') {          blockComment=true;          fragment.script=fragment.script.substring(0,fragment.script.length() - 2);        }      } else {        if (ch == 'u') {          skip=4;        } else         if (skip > 0) {          skip--;        } else {          escaped=false;        }      }    } else {      if (lineComment) {        if (ch == '\n') {          lineComment=false;        }      }      if (blockComment) {        if (ch == '/' && lastCh == '*') {          blockComment=false;        }      }    }    lastCh=ch;    b=scriptReader.read();  }  return fragment;}  }
class C{  public FieldType(){}  }
class C{  public static void printResult(int result){  if (result == 0)   System.out.println("You lose"); else   System.out.println("You win");}  }
class C{  protected void buildCoverTree(Instances insts) throws Exception {  if (insts.numInstances() == 0) {    throw new Exception("CoverTree: Empty set of instances. Cannot build tree.");  }  checkMissing(insts);  if (m_EuclideanDistance == null) {    m_DistanceFunction=m_EuclideanDistance=new EuclideanDistance(insts);  } else {    m_EuclideanDistance.setInstances(insts);  }  Stack<DistanceNode> point_set=new Stack<DistanceNode>();  Stack<DistanceNode> consumed_set=new Stack<DistanceNode>();  Instance point_p=insts.instance(0);  int p_idx=0;  double max_dist=-1, dist=0.0;  for (int i=1; i < insts.numInstances(); i++) {    DistanceNode temp=new DistanceNode();    temp.dist=new Stack<Double>();    dist=Math.sqrt(m_DistanceFunction.distance(point_p,insts.instance(i),Double.POSITIVE_INFINITY));    if (dist > max_dist) {      max_dist=dist;      insts.instance(i);    }    temp.dist.push(dist);    temp.idx=i;    point_set.push(temp);  }  max_dist=max_set(point_set);  m_Root=batch_insert(p_idx,get_scale(max_dist),get_scale(max_dist),point_set,consumed_set);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.REFERENCED_STATE_MACHINE___EXTENDED_STATE_MACHINE_1:    return ((InternalEList<?>)getExtendedStateMachine_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  boolean isCandidate(Rect srcRect,Rect destRect,int direction){switch (direction) {case View.FOCUS_LEFT:    return (srcRect.right > destRect.right || srcRect.left >= destRect.right) && srcRect.left > destRect.left;case View.FOCUS_RIGHT:  return (srcRect.left < destRect.left || srcRect.right <= destRect.left) && srcRect.right < destRect.right;case View.FOCUS_UP:return (srcRect.bottom > destRect.bottom || srcRect.top >= destRect.bottom) && srcRect.top > destRect.top;case View.FOCUS_DOWN:return (srcRect.top < destRect.top || srcRect.bottom <= destRect.top) && srcRect.bottom < destRect.bottom;}throw new IllegalArgumentException("direction must be one of " + "{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");}  }
class C{  protected int index(int rank){  return _offset(_rank(rank));}  }
class C{  public void paintTableHeaderBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private boolean loadProfile(){  String profileDirectory=get("directory") + "/";  try {    DetectorFactory.loadProfile(profileDirectory);    Long seed=getLong("seed");    if (seed != null)     DetectorFactory.setSeed(seed);    return false;  } catch (  LangDetectException e) {    System.err.println("ERROR: " + e.getMessage());    return true;  }}  }
class C{  private void restoreConfigurationFile(){  try {    File backup=new File(getBackupFileName());    File conf=getAuthConfiguration().getFile();    FileUtils.copyFile(backup,conf);  } catch (  Exception t) {    log.error("Error while restoring authorization configuration.",t);  }}  }
class C{  public SecP192K1Point(ECCurve curve,ECFieldElement x,ECFieldElement y){  this(curve,x,y,false);}  }
class C{  public static boolean isTruncated(String url,WebPage page){  ByteBuffer content=page.getContent();  if (content == null) {    return false;  }  CharSequence lengthUtf8=page.getHeaders().get(new Utf8(HttpHeaders.CONTENT_LENGTH));  if (lengthUtf8 == null) {    return false;  }  String lengthStr=lengthUtf8.toString().trim();  if (StringUtil.isEmpty(lengthStr)) {    return false;  }  int inHeaderSize;  try {    inHeaderSize=Integer.parseInt(lengthStr);  } catch (  NumberFormatException e) {    LOG.warn("Wrong contentlength format for " + url,e);    return false;  }  int actualSize=content.limit();  if (inHeaderSize > actualSize) {    LOG.warn(url + " skipped. Content of size " + inHeaderSize+ " was truncated to "+ actualSize);    return true;  }  if (LOG.isDebugEnabled()) {    LOG.debug(url + " actualSize=" + actualSize+ " inHeaderSize="+ inHeaderSize);  }  return false;}  }
class C{  private void makeTunnel(TunnelRequest tunnelRequest) throws IOException {  RawHeaders requestHeaders=tunnelRequest.getRequestHeaders();  while (true) {    out.write(requestHeaders.toBytes());    RawHeaders responseHeaders=RawHeaders.fromBytes(in);switch (responseHeaders.getResponseCode()) {case HTTP_OK:      return;case HTTP_PROXY_AUTH:    requestHeaders=new RawHeaders(requestHeaders);  URL url=new URL("https",tunnelRequest.host,tunnelRequest.port,"/");boolean credentialsFound=HttpAuthenticator.processAuthHeader(route.address.authenticator,HTTP_PROXY_AUTH,responseHeaders,requestHeaders,route.proxy,url);if (credentialsFound) {continue;} else {throw new IOException("Failed to authenticate with proxy");}default :throw new IOException("Unexpected response code for CONNECT: " + responseHeaders.getResponseCode());}}}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public InstalledLocalContainerStub(){  this(null);}  }
class C{  public void onMapSetup() throws IOException, InterruptedException {}  }
class C{  public void drop(Widget widget,int left,int top){  left=Math.max(0,Math.min(left,dropTarget.getOffsetWidth() - widget.getOffsetWidth()));  top=Math.max(0,Math.min(top,dropTarget.getOffsetHeight() - widget.getOffsetHeight()));  dropTarget.add(widget,left,top);}  }
class C{  public static BigInteger decodeDimension(byte value[],int offset){  return NumericUtils.sortableBytesToBigInt(value,offset,BYTES);}  }
class C{  private void updateOccurrenceAnnotations(ITextSelection selection){  if (fOccurrencesFinderJob != null)   fOccurrencesFinderJob.cancel();  if (!fMarkOccurrenceAnnotations) {    return;  }  if (selection == null) {    return;  }  final IDocument document=getSourceViewer().getDocument();  if (document == null)   return;  if (occurrencesCollector == null) {    occurrencesCollector=new OccurrencesCollector();  }  occurrencesCollector.setDocument(document);  try {    ITypeScriptFile tsFile=getTypeScriptFile(document);    if (tsFile != null) {      occurrencesCollector.setSelection(selection);      tsFile.occurrences(selection.getOffset(),occurrencesCollector);    }  } catch (  Exception e) {    Trace.trace(Trace.SEVERE,"Error while getting TypeScript occurrences.",e);  }}  }
class C{  public static byte[][] splitNoDictionaryKey(byte[] NoDictionaryArr,int NoDictionaryCount){  byte[][] split=new byte[NoDictionaryCount][];  ByteBuffer buff=ByteBuffer.wrap(NoDictionaryArr,2,NoDictionaryCount * 2);  int remainingCol=NoDictionaryCount;  short secIndex=0;  short firstIndex=0;  for (int i=0; i < NoDictionaryCount; i++) {    if (remainingCol == 1) {      firstIndex=buff.getShort();      int length=NoDictionaryArr.length - firstIndex;      split[i]=new byte[length + 2];      ByteBuffer splittedCol=ByteBuffer.wrap(split[i]);      splittedCol.putShort((short)length);      System.arraycopy(NoDictionaryArr,firstIndex,split[i],2,length);    } else {      firstIndex=buff.getShort();      secIndex=buff.getShort();      int length=secIndex - firstIndex;      split[i]=new byte[length + 2];      ByteBuffer splittedCol=ByteBuffer.wrap(split[i]);      splittedCol.putShort((short)length);      System.arraycopy(NoDictionaryArr,firstIndex,split[i],2,length);      buff.position(buff.position() - 2);    }    remainingCol--;  }  return split;}  }
class C{  public static Text createText(Composite parent,int style,int hspan,int fill){  Text t=new Text(parent,style);  t.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  t.setLayoutData(gd);  return t;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:08.947 -0500",hash_original_method="F4CB3C27487DF72857FE3507DC40AD75",hash_generated_method="55D2E894E200221966BF60F73B91F1CC") private Executors(){}  }
class C{  public Button(){  this("");}  }
class C{  public static List<BlockSnapshot> validateSnapshotSessionTargets(BlockSnapshotSession snapSession,Set<URI> snapshotURIs,UriInfo uriInfo,DbClient dbClient){  StringSet sessionTargets=snapSession.getLinkedTargets();  if ((sessionTargets == null) || (sessionTargets.isEmpty())) {    throw APIException.badRequests.snapshotSessionDoesNotHaveAnyTargets(snapSession.getId().toString());  }  List<BlockSnapshot> snapshots=new ArrayList<BlockSnapshot>();  Iterator<URI> snapshotURIsIter=snapshotURIs.iterator();  while (snapshotURIsIter.hasNext()) {    URI snapshotURI=snapshotURIsIter.next();    BlockSnapshot snapshot=validateSnapshot(snapshotURI,uriInfo,dbClient);    String snapshotId=snapshotURI.toString();    if (!sessionTargets.contains(snapshotId)) {      throw APIException.badRequests.targetIsNotLinkedToSnapshotSession(snapshotId,snapSession.getId().toString());    }    snapshots.add(snapshot);  }  return snapshots;}  }
class C{  public static void filledPolygon(double[] x,double[] y){  int N=x.length;  GeneralPath path=new GeneralPath();  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));  for (int i=0; i < N; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));  path.closePath();  offscreen.fill(path);  draw();}  }
class C{  private void writeValue(OutputNode node) throws Exception {  Mode mode=node.getMode();  String value=node.getValue();  if (value != null) {    for (    OutputNode next : stack) {      if (mode != Mode.INHERIT) {        break;      }      mode=next.getMode();    }    writer.writeText(value,mode);  }  node.setValue(null);}  }
class C{  public DataConfigurationFilter(){}  }
class C{  public String pushMsg(String user_id,String channel_id,String title,String description) throws UnsupportedEncodingException, UtilException {  String url="http://channel.api.duapp.com/rest/2.0/channel/channel";  String method="push_msg";  String apikey="wNTs4veiwjRS6y9ZWmXj3fSl";  String secret="jLj7WGaDLPOeKdez2Pu944Nb3ntarla4";  int push_type=1;  int device_type=3;  int message_type=1;  String messages=getMessage(title,description);  String msg_keys=UUID.randomUUID().toString();  String timestamp=Long.toString(new Date().getTime());  Map<String,String> parameters=new TreeMap<String,String>();  parameters.put("method",method);  parameters.put("apikey",apikey);  parameters.put("user_id",user_id);  if (null != channel_id) {    parameters.put("channel_id",channel_id);  }  parameters.put("push_type",push_type + "");  parameters.put("device_type",device_type + "");  parameters.put("message_type",message_type + "");  parameters.put("messages",messages);  parameters.put("msg_keys",msg_keys);  parameters.put("timestamp",timestamp + "");  String sign=getSignature(url,parameters,secret);  parameters.put("sign",sign);  String responseStr=HttpClientUtil.post(url,parameters);  return responseStr;}  }
class C{  public final boolean hasOnValidationFailureBeenCalled(){  return onValidationFailure;}  }
class C{  public static void computeApprox(TreeSet<TypeVariable> workList) throws TypeException {  while (workList.size() > 0) {    TypeVariable var=workList.first();    workList.remove(var);    var.fixApprox(workList);  }}  }
class C{  public static boolean isValidMediaType(final String mediaType){  return (mediaType != null) && MEDIA_TYPES.values().contains(mediaType.toLowerCase());}  }
class C{  public void findMatches(MatchResultSink sink,MatchOptions options) throws MalformedPatternException, UnsupportedPatternException {  super.findMatches(sink,options);}  }
class C{  public static <TA,TB>Pair<TA,TB> createPair(TA a,TB b){  return new Pair<TA,TB>(a,b);}  }
class C{  public static boolean acceptURL(final MultiProtocolURL url){  if (scancache == null || scancache.isEmpty())   return true;  final InetAddress a=url.getInetAddress();  if (a == null)   return true;  for (  Map.Entry<Service,Access> entry : scancache.entrySet()) {    Service service=entry.getKey();    if (service.inetAddress.equals(a) && service.protocol.toString().equals(url.getProtocol())) {      Access access=entry.getValue();      if (access == null)       return false;      return access == Access.granted;    }  }  return true;}  }
class C{  @Override public void init(IWorkbench workbench,IStructuredSelection selection){}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public List<GroupRemoveDeviceDB> _queryGroupDB_RemoveDevices(long groupId){synchronized (this) {    if (groupDB_RemoveDevicesQuery == null) {      QueryBuilder<GroupRemoveDeviceDB> queryBuilder=queryBuilder();      queryBuilder.where(Properties.GroupId.eq(null));      groupDB_RemoveDevicesQuery=queryBuilder.build();    }  }  Query<GroupRemoveDeviceDB> query=groupDB_RemoveDevicesQuery.forCurrentThread();  query.setParameter(0,groupId);  return query.list();}  }
class C{  public static IStatus createStatus(int severity,int code,String message,Throwable t){  return new Status(severity,PLUGIN_ID,code,message,t);}  }
class C{  @Deprecated public Builder addReadPartition(final String readPartition){  this.readPartitions.add(readPartition);  return this;}  }
class C{  public void removeHeader(final Header header){  headers.remove(header);}  }
class C{  private static boolean isSuccessful(int responseCode){  return responseCode == 200 || responseCode == 201 || responseCode == 202;}  }
class C{  public T caseStaticBaseTypeRef(StaticBaseTypeRef object){  return null;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 194) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    for (    FieldNode f : fields) {      f.check(api);    }    for (    MethodNode m : methods) {      m.check(api);    }  }}  }
class C{  void checkOutput(String out,boolean expectWarnings){  boolean foundWarnings=out.contains("warning");  if (foundWarnings) {    if (!expectWarnings)     error("unexpected warnings found");  } else {    if (expectWarnings)     error("expected warnings not found");  }}  }
class C{  public void removeAttributeById(int attrId){  if ((attrId < 0) || (attrId >= ATTRIBUTE_NAMES.length)) {    throw new IllegalArgumentException("Attribute Id must be in the range of 0-" + (ATTRIBUTE_NAMES.length - 1));  }  removeAttribute(new Integer(attrId));}  }
class C{  @Deprecated public ClusterState(Set<String> liveNodes,Map<String,DocCollection> collectionStates){  this(null,liveNodes,collectionStates);}  }
class C{  public void delete(Instruction inst){  Iterator<GCIRMapElement> iter=list.iterator();  while (iter.hasNext()) {    GCIRMapElement ptr=iter.next();    if (ptr.getInstruction() == inst) {      iter.remove();      return;    }  }  throw new OptimizingCompilerException("GCIRMap.delete(" + inst + ") did not delete instruction from GC Map ");}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public T casespeciesOrGridDisplayStatement(speciesOrGridDisplayStatement object){  return null;}  }
class C{  public String textCode(){  return "" + getCode();}  }
class C{  @Override public void configure(ResourceServerSecurityConfigurer resources) throws Exception {  resources.resourceId("apis");}  }
class C{  public IncompatibleRolesException(String message){  super(message);}  }
class C{  public static InputMethodSubtype findLastResortApplicableSubtypeLocked(Resources res,List<InputMethodSubtype> subtypes,String mode,String locale,boolean canIgnoreLocaleAsLastResort){  if (subtypes == null || subtypes.size() == 0) {    return null;  }  if (TextUtils.isEmpty(locale)) {    locale=res.getConfiguration().locale.toString();  }  final String language=locale.substring(0,2);  boolean partialMatchFound=false;  InputMethodSubtype applicableSubtype=null;  InputMethodSubtype firstMatchedModeSubtype=null;  final int N=subtypes.size();  for (int i=0; i < N; ++i) {    InputMethodSubtype subtype=subtypes.get(i);    final String subtypeLocale=subtype.getLocale();    if (mode == null || subtypes.get(i).getMode().equalsIgnoreCase(mode)) {      if (firstMatchedModeSubtype == null) {        firstMatchedModeSubtype=subtype;      }      if (locale.equals(subtypeLocale)) {        applicableSubtype=subtype;        break;      } else       if (!partialMatchFound && subtypeLocale.startsWith(language)) {        applicableSubtype=subtype;        partialMatchFound=true;      }    }  }  if (applicableSubtype == null && canIgnoreLocaleAsLastResort) {    return firstMatchedModeSubtype;  }  if (DEBUG) {    if (applicableSubtype != null) {      Slog.d(TAG,"Applicable InputMethodSubtype was found: " + applicableSubtype.getMode() + ","+ applicableSubtype.getLocale());    }  }  return applicableSubtype;}  }
class C{  protected SIPTransactionStack(StackMessageFactory messageFactory){  this();  this.sipMessageFactory=messageFactory;}  }
class C{  public static int readFixInt32(final InputStream input) throws IOException {  final int b1=safeRead(input);  final int b2=safeRead(input);  final int b3=safeRead(input);  final int b4=safeRead(input);  return (b1 << 24) | (b2 << 16) | (b3 << 8)| b4;}  }
class C{  void callbackToActivity(String clientHandle,Status status,Bundle dataBundle){  Intent callbackIntent=new Intent(MqttServiceConstants.CALLBACK_TO_ACTIVITY);  if (clientHandle != null) {    callbackIntent.putExtra(MqttServiceConstants.CALLBACK_CLIENT_HANDLE,clientHandle);  }  callbackIntent.putExtra(MqttServiceConstants.CALLBACK_STATUS,status);  if (dataBundle != null) {    callbackIntent.putExtras(dataBundle);  }  LocalBroadcastManager.getInstance(this).sendBroadcast(callbackIntent);}  }
class C{  public Keyboard(Context context,int xmlLayoutResId,int modeId){  DisplayMetrics dm=context.getResources().getDisplayMetrics();  mDisplayWidth=dm.widthPixels;  mDisplayHeight=dm.heightPixels;  mDefaultHorizontalGap=0;  mDefaultWidth=mDisplayWidth / 10;  mDefaultVerticalGap=0;  mDefaultHeight=mDefaultWidth;  mKeys=new ArrayList<Key>();  mModifierKeys=new ArrayList<Key>();  mKeyboardMode=modeId;  loadKeyboard(context,context.getResources().getXml(xmlLayoutResId));}  }
class C{  public NestedQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public static int calcOffset(@NotNull EditorEx editor,@NotNull CharSequence text,int start,int end,int columnNumber,int tabSize,@Nullable StringBuilder debugBuffer){  assert start >= 0 : "start (" + start + ") must not be negative. end ("+ end+ ")";  assert end >= start : "start (" + start + ") must not be greater than end ("+ end+ ")";  if (debugBuffer != null) {    debugBuffer.append(String.format("Starting calcOffset(). Start=%d, end=%d, column number=%d, tab size=%d%n",start,end,columnNumber,tabSize));  }  final int maxScanIndex=Math.min(start + columnNumber + 1,end);  SoftWrapModel softWrapModel=editor.getSoftWrapModel();  List<? extends SoftWrap> softWraps=softWrapModel.getSoftWrapsForRange(start,maxScanIndex);  int startToUse=start;  int x=editor.getDocument().getLineNumber(start) == 0 ? editor.getPrefixTextWidthInPixels() : 0;  int[] currentColumn={0};  for (  SoftWrap softWrap : softWraps) {    if (currentColumn[0] >= columnNumber) {      return startToUse;    }    int result=calcSoftWrapUnawareOffset(editor,text,startToUse,softWrap.getEnd(),columnNumber,tabSize,x,currentColumn,debugBuffer);    if (result >= 0) {      return result;    }    startToUse=softWrap.getStart();    x=softWrap.getIndentInPixels();  }  if (currentColumn[0] >= columnNumber) {    return startToUse;  }  int result=calcSoftWrapUnawareOffset(editor,text,startToUse,end,columnNumber,tabSize,x,currentColumn,debugBuffer);  if (result >= 0) {    return result;  }  if (debugBuffer != null) {    debugBuffer.append(String.format("Returning %d as no match has been found for the target column (%d) at the target range [%d;%d)",end,columnNumber,start,end));  }  return end;}  }
class C{  protected void containerDeallocateAll(){  getContainerRamProvisioner().deallocateRamForAllContainers();  getContainerBwProvisioner().deallocateBwForAllContainers();  getContainerScheduler().deallocatePesForAllContainers();}  }
class C{  CacheKey(Object key,int xstate){  init(key,xstate);}  }
class C{  private int findValue(String string){  for (int i=0; i < values.length; i++) {    if (values[i].equals(string)) {      return i;    }  }  fail("Invalid Enumeration Value");  return -1;}  }
class C{  public DTMConfigurationException(String msg,Throwable e){  super(msg,e);}  }
class C{  private TableUtils(){}  }
class C{  public void onSignInPressed(View view){  signInPassword();}  }
class C{  public MilStd2525PointGraphic(String sidc){  this.symbol=this.createSymbol(sidc);}  }
class C{  public void addSupportingConstraint(IntegerConstraint c){  Constraint<?> normalizedConstraint=normalizeConstraint(c);  currentSupportingConstraints.add(normalizedConstraint);}  }
class C{  public boolean dial(BluetoothDevice device,String number){  if (DBG)   log("dial()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.dial(device,number);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  public static long[] toLongArray(boolean[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? 1 : 0;  }  return result;}  }
class C{  protected boolean traverse(Tree tree,NodeRef node){  boolean update=false;  int nodeNum=node.getNumber();  NodeRef parent=tree.getParent(node);  if (parent != null && updateNode[nodeNum]) {    final double branchRate=branchRateModel.getBranchRate(tree,node);    final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));    if (branchTime < 0.0) {      throw new RuntimeException("Negative branch length: " + branchTime);    }    likelihoodCore.setNodeMatrixForUpdate(nodeNum);    for (int i=0; i < categoryCount; i++) {      double branchLength=siteModel.getRateForCategory(i) * branchTime;      siteModel.getSubstitutionModel().getTransitionProbabilities(branchLength,probabilities);      likelihoodCore.setNodeMatrix(nodeNum,i,probabilities);    }    update=true;  }  if (!tree.isExternal(node)) {    NodeRef child1=tree.getChild(node,0);    final boolean update1=traverse(tree,child1);    NodeRef child2=tree.getChild(node,1);    final boolean update2=traverse(tree,child2);    if (update1 || update2) {      final int childNum1=child1.getNumber();      final int childNum2=child2.getNumber();      likelihoodCore.setNodePartialsForUpdate(nodeNum);      if (integrateAcrossCategories) {        likelihoodCore.calculatePartials(childNum1,childNum2,nodeNum);      } else {        likelihoodCore.calculatePartials(childNum1,childNum2,nodeNum,siteCategories);      }      if (COUNT_TOTAL_OPERATIONS) {        totalOperationCount++;      }      if (parent == null) {        double[] frequencies=frequencyModel.getFrequencies();        double[] partials=getRootPartials();        likelihoodCore.calculateLogLikelihoods(partials,frequencies,patternLogLikelihoods);      }      update=true;    }  }  return update;}  }
class C{  public CompletableFuture<Void> close(){  if (state.getState() == Session.State.EXPIRED)   return CompletableFuture.completedFuture(null);  CompletableFuture<Void> future=new CompletableFuture<>();  context.executor().execute(null);  return future;}  }
class C{  public static long deepMemoryUsageOf(Instrumentation inst,final Object obj){  return deepMemoryUsageOf(inst,obj,NON_PUBLIC);}  }
class C{  private Map<String,Integer> findLanguageFallbacks(final ServiceParams params){  List<TermNode> paramNodes=params.get(LANGUAGE_PARAM);  if (paramNodes.size() < 1) {    throw new IllegalArgumentException("You must provide the label service a list of languages.");  }  Map<String,Integer> fallbacksMap=new HashMap<>();  int cnt=0;  for (  TermNode term : paramNodes) {    if (term.isVariable()) {      throw new IllegalArgumentException("not a constant");    }    final Value v=term.getValue();    if (!(v instanceof Literal)) {      throw new IllegalArgumentException("not a literal");    }    final String s=v.stringValue();    if (s.contains(",")) {      for (      String ls : s.split(",")) {        fallbacksMap.put(ls.trim(),cnt);        ++cnt;      }    } else {      fallbacksMap.put(s.trim(),cnt);    }    ++cnt;  }  return fallbacksMap;}  }
class C{  public void resetWithShared(char[] buf,int start,int len){  _resultString=null;  _resultArray=null;  _inputBuffer=buf;  _inputStart=start;  _inputLen=len;  if (_hasSegments) {    clearSegments();  }}  }
class C{  public static boolean startsWithIgnoreCase(String searchIn,int startAt,String searchFor){  return searchIn.regionMatches(true,startAt,searchFor,0,searchFor.length());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_CASE_ACTIVATION___TRACECASE_ACT_NAME_1:    setTracecase_act_name_1(TRACECASE_ACT_NAME_1_EDEFAULT);  return;case UmplePackage.TRACE_CASE_ACTIVATION___ANONYMOUS_TRACE_CASE_ACTIVATION_11:getAnonymous_traceCaseActivation_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  private void addFilesRecursively(List<File> files,File saveLocation,Set<File> ignore){  if (saveLocation.isFile()) {    if (!ignore.contains(saveLocation)) {      files.add(saveLocation);    }  } else   if (saveLocation.isDirectory()) {    File[] listFiles=saveLocation.listFiles();    if (listFiles != null) {      for (      File f : listFiles) {        addFilesRecursively(files,f,ignore);      }    }  }}  }
class C{  private static int relEval(final String rels){  int i=0;  final String s0=rels.toLowerCase().trim();  if ("me".equals(s0))   i+=1;  if ("nofollow".equals(s0))   i+=2;  return i;}  }
class C{  public static boolean equals(long[] array1,long[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  @Override public boolean equals(Object o){  if (o != null && o instanceof PLShakeData) {    if (this == o)     return true;    PLShakeData data=(PLShakeData)o;    return (lastTime == data.lastTime && shakePosition.equals(data.shakePosition) && shakeLastPosition.equals(data.shakeLastPosition));  }  return false;}  }
class C{  public static synchronized void addToDisabledList(List<String> classnames){  for (  String s : classnames) {    addToDisabledList(s);  }}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (!(obj instanceof CarbonDimension)) {    return false;  }  CarbonDimension other=(CarbonDimension)obj;  if (columnSchema == null) {    if (other.columnSchema != null) {      return false;    }  } else   if (!columnSchema.equals(other.columnSchema)) {    return false;  }  return true;}  }
class C{  @Override public void deleteEvent(Event event){}  }
class C{  @Override protected void onVisibilityChanged(View changedView,int visibility){  super.onVisibilityChanged(changedView,visibility);  if (visibility != View.VISIBLE)   return;  refresh();}  }
class C{  @ReactMethod public void logPurchase(double purchaseAmount,String currencyCode,@Nullable ReadableMap parameters){  mAppEventLogger.logPurchase(BigDecimal.valueOf(purchaseAmount),Currency.getInstance(currencyCode),Arguments.toBundle(parameters));}  }
class C{  public IconItem withIcon(IIcon icon){  this.mIcon=icon;  return this;}  }
class C{  private boolean fireSelectionListeners(final Event event){  for (  final SelectionListener selectionListener : listeners) {    final SelectionEvent selectionEvent=new SelectionEvent(event);    selectionListener.widgetSelected(selectionEvent);    if (!selectionEvent.doit) {      return false;    }  }  return true;}  }
class C{  public EdgeIntersection add(Coordinate intPt,int segmentIndex,double dist){  EdgeIntersection eiNew=new EdgeIntersection(intPt,segmentIndex,dist);  EdgeIntersection ei=(EdgeIntersection)nodeMap.get(eiNew);  if (ei != null) {    return ei;  }  nodeMap.put(eiNew,eiNew);  return eiNew;}  }
class C{  public void dispatchEvent(Event event){  Assertions.assertCondition(event.isInitialized(),"Dispatched event hasn't been initialized");  boolean eventHandled=false;  for (  EventDispatcherListener listener : mListeners) {    if (listener.onEventDispatch(event)) {      eventHandled=true;    }  }  if (eventHandled) {    return;  }synchronized (mEventsStagingLock) {    mEventStaging.add(event);    Systrace.startAsyncFlow(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE,event.getEventName(),event.getUniqueID());  }  if (mRCTEventEmitter != null) {    mCurrentFrameCallback.maybePostFromNonUI();  } else {  }}  }
class C{  public T caseAnonymous_constraintExpr_1_(Anonymous_constraintExpr_1_ object){  return null;}  }
class C{  @Override protected void onDeop(String target,String sourceNick,String sourceLogin,String sourceHostname,String recipient){  Message message=new Message(service.getString(R.string.message_deop,sourceNick,recipient));  message.setIcon(R.drawable.op);  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target);  service.sendBroadcast(intent);}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster features;  WhiteboxRaster dataImage;  WhiteboxRaster output;  String featureHeader=null;  String dataHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  int i;  double featuresNoData=-32768;  double dataNoData=-32768;  double distThreshold=0;  boolean blnSelect=true;  int featureID;  String instructions=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      if (args[i].toLowerCase().contains("isolate features from")) {        blnSelect=true;      } else       if (args[i].toLowerCase().contains("remove features from")) {        blnSelect=false;      }    } else     if (i == 1) {      featureHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("intersect")) {        instructions="intersect";      } else       if (args[i].toLowerCase().contains("are completely within")) {        instructions="within";      } else       if (args[i].toLowerCase().contains("are within a distance of")) {        instructions="distance";      } else       if (args[i].toLowerCase().contains("have their centroid in")) {        instructions="centroid";      }    } else     if (i == 3) {      dataHeader=args[i];    } else     if (i == 4) {      outputHeader=args[i];    } else     if (i == 5) {      if (!args[i].equals("not specified")) {        distThreshold=Double.parseDouble(args[i]);      }    }  }  if ((featureHeader == null) || (dataHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    features=new WhiteboxRaster(featureHeader,"r");    int rows=features.getNumberRows();    int cols=features.getNumberColumns();    featuresNoData=features.getNoDataValue();    int minFeatureID=(int)features.getMinimumValue();    int numFeatures=(int)(features.getMaximumValue() - minFeatureID);    dataImage=new WhiteboxRaster(dataHeader,"r");    if (dataImage.getNumberColumns() != cols || dataImage.getNumberRows() != rows) {      showFeedback("The input files must have the same dimensions, i.e. number of" + " rows and columns.");      return;    }    dataNoData=dataImage.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,featuresNoData);    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (instructions.equals("intersect")) {      boolean[] intersect=new boolean[numFeatures + 1];      double[] featuresData=null;      double[] data=null;      updateProgress("Loop 1 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (featureID != 0 && data[col] > 0 && data[col] != dataNoData) {              intersect[featureID - minFeatureID]=true;            }          } else {            output.setValue(row,col,featuresNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 1 of 2:",progress);      }      updateProgress("Loop 2 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (intersect[featureID - minFeatureID] == blnSelect) {              output.setValue(row,col,featureID);            } else {              output.setValue(row,col,0);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 2 of 2:",progress);      }    } else     if (instructions.equals("within")) {      boolean[] within=new boolean[numFeatures + 1];      double[] dataFeature=new double[numFeatures + 1];      for (i=0; i <= numFeatures; i++) {        within[i]=true;        dataFeature[i]=-9999999;      }      double[] featuresData=null;      double[] data=null;      updateProgress("Loop 1 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (featureID != 0) {              if (data[col] != 0 && data[col] != dataNoData && dataFeature[featureID - minFeatureID] != -9999999) {                if (within[featureID - minFeatureID] && data[col] != dataFeature[featureID - minFeatureID]) {                  within[featureID - minFeatureID]=false;                }              } else               if (data[col] == 0) {                within[featureID - minFeatureID]=false;              } else {                dataFeature[featureID - minFeatureID]=data[col];              }            }          } else {            output.setValue(row,col,featuresNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 1 of 2:",progress);      }      updateProgress("Loop 2 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (within[featureID - minFeatureID] == blnSelect) {              output.setValue(row,col,featureID);            } else {              output.setValue(row,col,0);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 2 of 2:",progress);      }    } else     if (instructions.equals("distance")) {      if (distThreshold <= 0) {        showFeedback("The distance threshold has not been set to an appropriate value.");        return;      }      double z, z2, zMin;      double h=0;      int whichCell;      int x, y;      double infVal=9999999;      int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};      int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};      int[] Gx=new int[]{1,1,0,1,1,1,0,1};      int[] Gy=new int[]{0,1,1,1,0,1,1,1};      double gridRes=(features.getCellSizeX() + features.getCellSizeY()) / 2;      WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,0);      Rx.isTemporaryFile=true;      WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,0);      Ry.isTemporaryFile=true;      WhiteboxRaster bufferedData=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,infVal);      bufferedData.isTemporaryFile=true;      double[] data;      updateProgress("Buffering features:",0);      for (row=0; row < rows; row++) {        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != 0) {            bufferedData.setValue(row,col,0);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Buffering features:",progress);      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=bufferedData.getValue(row,col);          if (z != 0) {            zMin=infVal;            whichCell=-1;            for (i=0; i <= 3; i++) {              x=col + dX[i];              y=row + dY[i];              z2=bufferedData.getValue(y,x);              if (z2 != dataNoData) {switch (i) {case 0:                  h=2 * Rx.getValue(y,x) + 1;                break;case 1:              h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);            break;case 2:          h=2 * Ry.getValue(y,x) + 1;        break;case 3:      h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);    break;}z2+=h;if (z2 < zMin) {  zMin=z2;  whichCell=i;}}}if (zMin < z) {bufferedData.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Buffering features:",progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=bufferedData.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=bufferedData.getValue(y,x);if (z2 != dataNoData) {switch (i) {case 5:  h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {bufferedData.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * (rows - 1 - row) / (rows - 1));updateProgress("Buffering features:",progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=bufferedData.getValue(row,col);if (Math.sqrt(z) * gridRes < distThreshold) {bufferedData.setValue(row,col,1);} else {bufferedData.setValue(row,col,0);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Buffering features:",progress);}Rx.close();Ry.close();bufferedData.flush();boolean[] intersect=new boolean[numFeatures + 1];double[] featuresData=null;updateProgress("Loop 1 of 2:",0);for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);data=bufferedData.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] != featuresNoData) {featureID=(int)featuresData[col];if (featureID != 0 && data[col] > 0 && data[col] != dataNoData) {intersect[featureID - minFeatureID]=true;}} else {output.setValue(row,col,featuresNoData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 1 of 2:",progress);}updateProgress("Loop 2 of 2:",0);for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);data=bufferedData.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] != featuresNoData) {featureID=(int)featuresData[col];if (intersect[featureID - minFeatureID] == blnSelect) {output.setValue(row,col,featureID);} else {output.setValue(row,col,0);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 2 of 2:",progress);}bufferedData.close();} else if (instructions.equals("centroid")) {long[] totalColumns=new long[numFeatures + 1];long[] totalRows=new long[numFeatures + 1];long[] totalN=new long[numFeatures + 1];updateProgress("Loop 1 of 2:",0);double[] featuresData=null;for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] > 0) {i=(int)featuresData[col] - minFeatureID;totalColumns[i]+=col;totalRows[i]+=row;totalN[i]++;}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 1 of 2:",progress);}double z;boolean[] intersect=new boolean[numFeatures + 1];double[] data=null;for (i=0; i <= numFeatures; i++) {if (totalN[i] > 0) {col=(int)(totalColumns[i] / totalN[i]);row=(int)(totalRows[i] / totalN[i]);z=dataImage.getValue(row,col);if (z != 0 && z != dataNoData) {intersect[i]=true;}}}updateProgress("Loop 2 of 2:",0);for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);data=dataImage.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] != featuresNoData) {featureID=(int)featuresData[col];if (intersect[featureID - minFeatureID] == blnSelect) {output.setValue(row,col,featureID);} else {output.setValue(row,col,0);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 2 of 2:",progress);}} else {showFeedback("Instructions not recognized.");return;}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());features.close();dataImage.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  @Override protected View makeContentView(GameActivity activity){  ll=new LinearLayout(top);  hsv=new HorizontalScrollView(top);  hsv.addView(ll);  return hsv;}  }
class C{  public void disConnect(){  if (mBluetoothGatt != null) {    mBluetoothGatt.disconnect();  }}  }
class C{  private void resetCached(){  setFlags(false,FLAG_CACHED_VALUES_CHECKED + FLAG_TARGET_FILE);  clearCachedInformation();}  }
class C{  public void stopHorn(){  VSDSound snd=sound_list.get("HORN");  snd.stop();}  }
class C{  public int size(){  int i=0;  for (  Map<String,String> trans : mainTransLists.values()) {    i+=trans.size();  }  return i;}  }
class C{  @DSComment("File Information") @DSSpec(DSCat.TRIGGER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.517 -0500",hash_original_method="0921E33485CFCA34C1412D0CC74585F6",hash_generated_method="D860E5F1DFBA213A0282A688E6D70B62") public long lastModified(){  return 0l;}  }
class C{  public static double nextExpGamma(double shape,double scale,double bias){  return nextExpGamma(shape,scale,bias,false);}  }
class C{  public void onWriteCompleted(final Port port){  final Instruction instruction=getInstruction();  if (instruction != null) {    instruction.onWriteCompleted(this,port);  }}  }
class C{  @Override public String run(String[] args){  if (getClient().getGame().getOptions().booleanOption("double_blind")) {    return "Sorry, this command is disabled during double blind.";  }  if (args.length == 1) {    String list="List of all entities.\n";    for (    Entity ent : getClient().getEntitiesVector()) {      list+=ent.getId() + " " + ent.getOwner().getName()+ "'s "+ ent.getDisplayName()+ "\n";    }    return list;  }  try {    int id=Integer.parseInt(args[1]);    Entity ent=getClient().getEntity(id);    if (ent != null) {      if (args.length > 2) {        String str="";        for (int i=2; i < args.length; i++) {          str+=ent.statusToString(args[i]);        }        return str;      }      return ent.statusToString();    } else {      return "No such entity.";    }  } catch (  NumberFormatException nfe) {  }catch (  NullPointerException npe) {  }catch (  IndexOutOfBoundsException ioobe) {  }  return "Error parsing the command.";}  }
class C{  private static BigInteger paddedPositiveInt(byte[] bytes,int length){  int bytePaddingNeeded=length - bytes.length;  checkArgument(bytePaddingNeeded >= 0,"Required bytes.length {} < length {}",bytes.length,length);  BigInteger ret=new BigInteger(1,bytes);  return (bytePaddingNeeded == 0) ? ret : ret.shiftLeft(8 * bytePaddingNeeded);}  }
class C{  @Override public final boolean isEmpty(){  return collection.isEmpty();}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public T caseResequencer(Resequencer object){  return null;}  }
class C{  public void addPage(LexiconPage page){  pages.add(page);}  }
class C{  protected Generator addGenerator(String arg){  Generator gen;  String className=getString("generator.class." + arg);  if (className == null) {    error("rmic.missing.property",arg);    return null;  }  try {    gen=(Generator)Class.forName(className).newInstance();  } catch (  Exception e) {    error("rmic.cannot.instantiate",className);    return null;  }  generators.addElement(gen);  Class<?> envClass=BatchEnvironment.class;  String env=getString("generator.env." + arg);  if (env != null) {    try {      envClass=Class.forName(env);      if (environmentClass.isAssignableFrom(envClass)) {        environmentClass=envClass.asSubclass(BatchEnvironment.class);      } else {        if (!envClass.isAssignableFrom(environmentClass)) {          error("rmic.cannot.use.both",environmentClass.getName(),envClass.getName());          return null;        }      }    } catch (    ClassNotFoundException e) {      error("rmic.class.not.found",env);      return null;    }  }  if (arg.equals("iiop")) {    iiopGeneration=true;  }  return gen;}  }
class C{  public static void openActivityDurationTrack(boolean activityTrack){  log.openActivityDurationTrack(activityTrack);}  }
class C{  public Vector2f fma(Vector2fc a,Vector2fc b){  x+=a.x() * b.x();  y+=a.y() * b.y();  return this;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  @Interruptible private TreadmillDriver newTreadmillDriver(String name,LargeObjectSpace space){  return new TreadmillDriver(GCspy.server,name,space,Options.gcspyTileSize.getValue(),MAX_NON_LOS_COPY_BYTES,false);}  }
class C{  private void extract(Class type){  for (  Annotation label : labels) {    if (label instanceof Namespace) {      namespace(label);    }    if (label instanceof NamespaceList) {      scope(label);    }    if (label instanceof Root) {      root(label);    }    if (label instanceof Order) {      order(label);    }    if (label instanceof Default) {      access(label);    }  }}  }
class C{  public void addEntry(Entry e,int dataSetIndex){  if (mDataSets.size() > dataSetIndex && dataSetIndex >= 0) {    float val=e.getVal();    mYValCount+=1;    mYValueSum+=val;    if (mYMax < val)     mYMax=val;    if (mYMin > val)     mYMin=val;    T set=mDataSets.get(dataSetIndex);    if (set != null) {      if (set.getAxisDependency() == AxisDependency.LEFT) {        if (mLeftAxisMax < e.getVal())         mLeftAxisMax=e.getVal();        if (mLeftAxisMin > e.getVal())         mLeftAxisMin=e.getVal();      } else {        if (mRightAxisMax < e.getVal())         mRightAxisMax=e.getVal();        if (mRightAxisMin > e.getVal())         mRightAxisMin=e.getVal();      }      handleEmptyAxis(getFirstLeft(),getFirstRight());      set.addEntry(e);    }  } else {    Log.e("addEntry","Cannot add Entry because dataSetIndex too high or too low.");  }}  }
class C{  public ClientSharedObject(String name,boolean persistent){  super();  this.name=name;  persistentSO=persistent;}  }
class C{  @Override public String toString(){  return "CUarray[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public static void trimEdgesAmongParents(Graph graph,Node target){  List parents=graph.getParents(target);  if (parents.size() >= 2) {    ChoiceGenerator cg=new ChoiceGenerator(parents.size(),2);    int[] choice;    while ((choice=cg.next()) != null) {      Node v=(Node)parents.get(choice[0]);      Node w=(Node)parents.get(choice[1]);      Edge edge=graph.getEdge(v,w);      if (edge != null) {        graph.removeEdges(v,w);      }    }  }}  }
class C{  private Cache createCache(Properties props) throws Exception {  DistributedSystem ds=getSystem(props);  ds.disconnect();  ds=getSystem(props);  Cache cache=null;  cache=CacheFactory.create(ds);  if (cache == null) {    throw new Exception("CacheFactory.create() returned null ");  }  return cache;}  }
class C{  public static Tuple median(Iterator tuples,String field){  return median(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public int indexOfIso(String iso){  for (int i=0; i < this.size(); i++) {    if (this.get(i).getIso().toUpperCase().equals(iso.toUpperCase())) {      return i;    }  }  return -1;}  }
class C{  public Boolean isSkip(){  return skip;}  }
class C{  public void removeListener(@Service TableListener listener){  _listeners.remove(listener);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr domesticAttr;  boolean specified;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(0);  attributes=testEmployee.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  specified=domesticAttr.getSpecified();  assertTrue("acronymTitleSpecified",specified);}  }
class C{  private void updateNear(GridNearAtomicUpdateRequest req,GridNearAtomicUpdateResponse res){  assert nearEnabled;  if (res.remapKeys() != null || !req.hasPrimary())   return;  GridNearAtomicCache near=(GridNearAtomicCache)cctx.dht().near();  near.processNearAtomicUpdateResponse(req,res);}  }
class C{  public static void writeElementList(XMLOutput xmlOutput,String tagName,Iterable<String> listValues) throws IOException {  writeElementList(xmlOutput,tagName,listValues.iterator());}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getPosition_();}  }
class C{  public static void fill(BigInteger[] array,BigInteger value){  for (int i=array.length - 1; i >= 0; i--) {    array[i]=value;  }}  }
class C{  private Builder(org.apache.nutch.storage.WebPage other){  super(org.apache.nutch.storage.WebPage.SCHEMA$);  if (isValidValue(fields()[0],other.baseUrl)) {    this.baseUrl=(java.lang.CharSequence)data().deepCopy(fields()[0].schema(),other.baseUrl);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.status)) {    this.status=(java.lang.Integer)data().deepCopy(fields()[1].schema(),other.status);    fieldSetFlags()[1]=true;  }  if (isValidValue(fields()[2],other.fetchTime)) {    this.fetchTime=(java.lang.Long)data().deepCopy(fields()[2].schema(),other.fetchTime);    fieldSetFlags()[2]=true;  }  if (isValidValue(fields()[3],other.prevFetchTime)) {    this.prevFetchTime=(java.lang.Long)data().deepCopy(fields()[3].schema(),other.prevFetchTime);    fieldSetFlags()[3]=true;  }  if (isValidValue(fields()[4],other.fetchInterval)) {    this.fetchInterval=(java.lang.Integer)data().deepCopy(fields()[4].schema(),other.fetchInterval);    fieldSetFlags()[4]=true;  }  if (isValidValue(fields()[5],other.retriesSinceFetch)) {    this.retriesSinceFetch=(java.lang.Integer)data().deepCopy(fields()[5].schema(),other.retriesSinceFetch);    fieldSetFlags()[5]=true;  }  if (isValidValue(fields()[6],other.modifiedTime)) {    this.modifiedTime=(java.lang.Long)data().deepCopy(fields()[6].schema(),other.modifiedTime);    fieldSetFlags()[6]=true;  }  if (isValidValue(fields()[7],other.prevModifiedTime)) {    this.prevModifiedTime=(java.lang.Long)data().deepCopy(fields()[7].schema(),other.prevModifiedTime);    fieldSetFlags()[7]=true;  }  if (isValidValue(fields()[8],other.protocolStatus)) {    this.protocolStatus=(org.apache.nutch.storage.ProtocolStatus)data().deepCopy(fields()[8].schema(),other.protocolStatus);    fieldSetFlags()[8]=true;  }  if (isValidValue(fields()[9],other.content)) {    this.content=(java.nio.ByteBuffer)data().deepCopy(fields()[9].schema(),other.content);    fieldSetFlags()[9]=true;  }  if (isValidValue(fields()[10],other.contentType)) {    this.contentType=(java.lang.CharSequence)data().deepCopy(fields()[10].schema(),other.contentType);    fieldSetFlags()[10]=true;  }  if (isValidValue(fields()[11],other.prevSignature)) {    this.prevSignature=(java.nio.ByteBuffer)data().deepCopy(fields()[11].schema(),other.prevSignature);    fieldSetFlags()[11]=true;  }  if (isValidValue(fields()[12],other.signature)) {    this.signature=(java.nio.ByteBuffer)data().deepCopy(fields()[12].schema(),other.signature);    fieldSetFlags()[12]=true;  }  if (isValidValue(fields()[13],other.title)) {    this.title=(java.lang.CharSequence)data().deepCopy(fields()[13].schema(),other.title);    fieldSetFlags()[13]=true;  }  if (isValidValue(fields()[14],other.text)) {    this.text=(java.lang.CharSequence)data().deepCopy(fields()[14].schema(),other.text);    fieldSetFlags()[14]=true;  }  if (isValidValue(fields()[15],other.parseStatus)) {    this.parseStatus=(org.apache.nutch.storage.ParseStatus)data().deepCopy(fields()[15].schema(),other.parseStatus);    fieldSetFlags()[15]=true;  }  if (isValidValue(fields()[16],other.score)) {    this.score=(java.lang.Float)data().deepCopy(fields()[16].schema(),other.score);    fieldSetFlags()[16]=true;  }  if (isValidValue(fields()[17],other.reprUrl)) {    this.reprUrl=(java.lang.CharSequence)data().deepCopy(fields()[17].schema(),other.reprUrl);    fieldSetFlags()[17]=true;  }  if (isValidValue(fields()[18],other.headers)) {    this.headers=(java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)data().deepCopy(fields()[18].schema(),other.headers);    fieldSetFlags()[18]=true;  }  if (isValidValue(fields()[19],other.outlinks)) {    this.outlinks=(java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)data().deepCopy(fields()[19].schema(),other.outlinks);    fieldSetFlags()[19]=true;  }  if (isValidValue(fields()[20],other.inlinks)) {    this.inlinks=(java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)data().deepCopy(fields()[20].schema(),other.inlinks);    fieldSetFlags()[20]=true;  }  if (isValidValue(fields()[21],other.markers)) {    this.markers=(java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)data().deepCopy(fields()[21].schema(),other.markers);    fieldSetFlags()[21]=true;  }  if (isValidValue(fields()[22],other.metadata)) {    this.metadata=(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>)data().deepCopy(fields()[22].schema(),other.metadata);    fieldSetFlags()[22]=true;  }  if (isValidValue(fields()[23],other.batchId)) {    this.batchId=(java.lang.CharSequence)data().deepCopy(fields()[23].schema(),other.batchId);    fieldSetFlags()[23]=true;  }}  }
class C{  public Properties findTemplateTags(){  Properties tags=new Properties();  m_errorMessages.setLength(0);  m_missingKeys.removeAllElements();  while (true) {    NextToken result=getNextToken();    if (!result.finishedParsing()) {      if (result.foundToken() && !BEGIN_FOR_EACH.equals(result.getKey()) && !END_FOR_EACH.equals(result.getKey())) {        tags.put(result.getKey(),result.getKey());      }    } else {      break;    }  }  return (tags);}  }
class C{  public void paintLabelBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  @HLEFunction(nid=0xCBCD4F79,version=150,checkInsideInterrupt=true) public int __sceSasSetSimpleADSR(int sasCore,int voice,int ADSREnv1,int ADSREnv2){  checkSasAndVoiceHandlesGood(sasCore,voice);  int env1Bitfield=(ADSREnv1 & 0xFFFF);  int env2Bitfield=(ADSREnv2 & 0xFFFF);  VoiceADSREnvelope envelope=voices[voice].getEnvelope();  envelope.SustainLevel=getSimpleSustainLevel(env1Bitfield);  envelope.DecayRate=getSimpleDecayRate(env1Bitfield);  envelope.DecayCurveType=PSP_SAS_ADSR_CURVE_MODE_EXPONENT_DECREASE;  envelope.AttackRate=getSimpleAttackRate(env1Bitfield);  envelope.AttackCurveType=getSimpleAttackCurveType(env1Bitfield);  envelope.ReleaseRate=getSimpleReleaseRate(env2Bitfield);  envelope.ReleaseCurveType=getSimpleReleaseCurveType(env2Bitfield);  envelope.SustainRate=getSimpleSustainRate(env2Bitfield);  envelope.SustainCurveType=getSimpleSustainCurveType(env2Bitfield);  if (log.isDebugEnabled()) {    log.debug(String.format("__sceSasSetSimpleADSR voice=0x%X: %s",voice,envelope.toString()));  }  return 0;}  }
class C{  public WeddingRing(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);  setPersistent(true);}  }
class C{  public void close() throws IOException {  try (ServerSocket refServerSocket=serverSocket){    closeConnection();  } }  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  boolean itemVisible=getItemVisible(series,item);  Shape entityArea=null;  EntityCollection entities=null;  if (info != null) {    entities=info.getOwner().getEntityCollection();  }  PlotOrientation orientation=plot.getOrientation();  Paint paint=getItemPaint(series,item);  Stroke seriesStroke=getItemStroke(series,item);  g2.setPaint(paint);  g2.setStroke(seriesStroke);  double x1=dataset.getXValue(series,item);  double y1=dataset.getYValue(series,item);  if (Double.isNaN(x1) || Double.isNaN(y1)) {    itemVisible=false;  }  RectangleEdge xAxisLocation=plot.getDomainAxisEdge();  RectangleEdge yAxisLocation=plot.getRangeAxisEdge();  double transX1=domainAxis.valueToJava2D(x1,dataArea,xAxisLocation);  double transY1=rangeAxis.valueToJava2D(y1,dataArea,yAxisLocation);  if (getPlotLines()) {    if (this.drawSeriesLineAsPath) {      State s=(State)state;      if (s.getSeriesIndex() != series) {        s.seriesPath.reset();        s.lastPointGood=false;        s.setSeriesIndex(series);      }      if (itemVisible && !Double.isNaN(transX1) && !Double.isNaN(transY1)) {        float x=(float)transX1;        float y=(float)transY1;        if (orientation == PlotOrientation.HORIZONTAL) {          x=(float)transY1;          y=(float)transX1;        }        if (s.isLastPointGood()) {          s.seriesPath.lineTo(x,y);        } else {          s.seriesPath.moveTo(x,y);        }        s.setLastPointGood(true);      } else {        s.setLastPointGood(false);      }      if (item == dataset.getItemCount(series) - 1) {        if (s.seriesIndex == series) {          g2.setStroke(lookupSeriesStroke(series));          g2.setPaint(lookupSeriesPaint(series));          g2.draw(s.seriesPath);        }      }    } else     if (item != 0 && itemVisible) {      double x0=dataset.getXValue(series,item - 1);      double y0=dataset.getYValue(series,item - 1);      if (!Double.isNaN(x0) && !Double.isNaN(y0)) {        boolean drawLine=true;        if (getPlotDiscontinuous()) {          int numX=dataset.getItemCount(series);          double minX=dataset.getXValue(series,0);          double maxX=dataset.getXValue(series,numX - 1);          if (this.gapThresholdType == UnitType.ABSOLUTE) {            drawLine=Math.abs(x1 - x0) <= this.gapThreshold;          } else {            drawLine=Math.abs(x1 - x0) <= ((maxX - minX) / numX * getGapThreshold());          }        }        if (drawLine) {          double transX0=domainAxis.valueToJava2D(x0,dataArea,xAxisLocation);          double transY0=rangeAxis.valueToJava2D(y0,dataArea,yAxisLocation);          if (Double.isNaN(transX0) || Double.isNaN(transY0) || Double.isNaN(transX1)|| Double.isNaN(transY1)) {            return;          }          if (orientation == PlotOrientation.HORIZONTAL) {            state.workingLine.setLine(transY0,transX0,transY1,transX1);          } else           if (orientation == PlotOrientation.VERTICAL) {            state.workingLine.setLine(transX0,transY0,transX1,transY1);          }          if (state.workingLine.intersects(dataArea)) {            g2.draw(state.workingLine);          }        }      }    }  }  if (!itemVisible) {    return;  }  if (getBaseShapesVisible()) {    Shape shape=getItemShape(series,item);    if (orientation == PlotOrientation.HORIZONTAL) {      shape=ShapeUtilities.createTranslatedShape(shape,transY1,transX1);    } else     if (orientation == PlotOrientation.VERTICAL) {      shape=ShapeUtilities.createTranslatedShape(shape,transX1,transY1);    }    if (shape.intersects(dataArea)) {      if (getItemShapeFilled(series,item)) {        g2.fill(shape);      } else {        g2.draw(shape);      }    }    entityArea=shape;  }  if (getPlotImages()) {    Image image=getImage(plot,series,item,transX1,transY1);    if (image != null) {      Point hotspot=getImageHotspot(plot,series,item,transX1,transY1,image);      g2.drawImage(image,(int)(transX1 - hotspot.getX()),(int)(transY1 - hotspot.getY()),null);      entityArea=new Rectangle2D.Double(transX1 - hotspot.getX(),transY1 - hotspot.getY(),image.getWidth(null),image.getHeight(null));    }  }  double xx=transX1;  double yy=transY1;  if (orientation == PlotOrientation.HORIZONTAL) {    xx=transY1;    yy=transX1;  }  if (isItemLabelVisible(series,item)) {    drawItemLabel(g2,orientation,dataset,series,item,xx,yy,(y1 < 0.0));  }  int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);  int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);  updateCrosshairValues(crosshairState,x1,y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,orientation);  if (entities != null && isPointInRect(dataArea,xx,yy)) {    addEntity(entities,entityArea,dataset,series,item,xx,yy);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String school="index.jsp";  Cookie[] cookies=request.getCookies();  if (cookies == null) {    return;  }  request.getSession().removeAttribute("schoolController");  for (  Cookie cookie : cookies) {    if ("userCookie".equalsIgnoreCase(cookie.getName()) || "token".equalsIgnoreCase(cookie.getName())) {      cookie.setValue(null);      cookie.setMaxAge(0);      cookie.setPath("/");      response.addCookie(cookie);    }    if ("school".equalsIgnoreCase(cookie.getName())) {      school=cookie.getValue();      cookie.setValue(null);      cookie.setMaxAge(0);      cookie.setPath("/");      response.addCookie(cookie);    }  }  RequestDispatcher dispatcher=request.getRequestDispatcher(school);  dispatcher.forward(request,response);}  }
class C{  public void color(String s) throws IOException {  outs.get(0).write(s.getBytes());  String noc=Pretty.strip(s);  for (int i=1; i < outs.size(); i++) {    OutputStream stream=outs.get(i);    if (stream instanceof ColorPrint.ColorStream)     stream.write(s.getBytes()); else     stream.write(noc.getBytes());  }}  }
class C{  public FunctionBlock createFunctionBlock(){  FunctionBlockImpl functionBlock=new FunctionBlockImpl();  return functionBlock;}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (getApplicationInfo().targetSdkVersion >= Build.VERSION_CODES.ECLAIR) {    if (keyCode == KeyEvent.KEYCODE_BACK && event.isTracking() && !event.isCanceled()) {      onBackPressed();      return true;    }  }  return false;}  }
class C{  private void removeCouplingFromList(final List<Coupling<?>> list,final Coupling<?> coupling){  if (list != null) {    list.remove(coupling);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void actionPerformed(ActionEvent e){}  }
class C{  private StatementBlock vectorizeElementwiseBinary(StatementBlock sb,StatementBlock csb,Hop from,Hop to,Hop increment,String itervar) throws HopsException {  StatementBlock ret=sb;  if (!(increment instanceof LiteralOp && ((LiteralOp)increment).getDoubleValue() == 1.0)) {    return ret;  }  boolean apply=false;  boolean rowIx=false;  if (csb.get_hops() != null && csb.get_hops().size() == 1) {    Hop root=csb.get_hops().get(0);    if (root.getDataType() == DataType.MATRIX && root.getInput().get(0) instanceof LeftIndexingOp) {      LeftIndexingOp lix=(LeftIndexingOp)root.getInput().get(0);      Hop lixlhs=lix.getInput().get(0);      Hop lixrhs=lix.getInput().get(1);      if (lixlhs instanceof DataOp && lixrhs instanceof BinaryOp && lixrhs.getInput().get(0) instanceof IndexingOp&& lixrhs.getInput().get(1) instanceof IndexingOp&& lixrhs.getInput().get(0).getInput().get(0) instanceof DataOp&& lixrhs.getInput().get(1).getInput().get(0) instanceof DataOp) {        IndexingOp rix0=(IndexingOp)lixrhs.getInput().get(0);        IndexingOp rix1=(IndexingOp)lixrhs.getInput().get(1);        if (lix.getRowLowerEqualsUpper() && rix0.getRowLowerEqualsUpper() && rix1.getRowLowerEqualsUpper()&& lix.getInput().get(2).getName().equals(itervar)&& rix0.getInput().get(1).getName().equals(itervar)&& rix1.getInput().get(1).getName().equals(itervar)) {          apply=true;          rowIx=true;        }        if (lix.getColLowerEqualsUpper() && rix0.getColLowerEqualsUpper() && rix1.getColLowerEqualsUpper()&& lix.getInput().get(4).getName().equals(itervar)&& rix0.getInput().get(3).getName().equals(itervar)&& rix1.getInput().get(3).getName().equals(itervar)) {          apply=true;          rowIx=false;        }      }    }  }  if (apply) {    Hop root=csb.get_hops().get(0);    LeftIndexingOp lix=(LeftIndexingOp)root.getInput().get(0);    BinaryOp bop=(BinaryOp)lix.getInput().get(1);    IndexingOp rix0=(IndexingOp)bop.getInput().get(0);    IndexingOp rix1=(IndexingOp)bop.getInput().get(1);    int index1=rowIx ? 2 : 4;    int index2=rowIx ? 3 : 5;    HopRewriteUtils.removeChildReferenceByPos(lix,lix.getInput().get(index1),index1);    HopRewriteUtils.addChildReference(lix,from,index1);    HopRewriteUtils.removeChildReferenceByPos(lix,lix.getInput().get(index2),index2);    HopRewriteUtils.addChildReference(lix,to,index2);    HopRewriteUtils.removeChildReferenceByPos(rix0,rix0.getInput().get(index1 - 1),index1 - 1);    HopRewriteUtils.addChildReference(rix0,from,index1 - 1);    HopRewriteUtils.removeChildReferenceByPos(rix0,rix0.getInput().get(index2 - 1),index2 - 1);    HopRewriteUtils.addChildReference(rix0,to,index2 - 1);    HopRewriteUtils.removeChildReferenceByPos(rix1,rix1.getInput().get(index1 - 1),index1 - 1);    HopRewriteUtils.addChildReference(rix1,from,index1 - 1);    HopRewriteUtils.removeChildReferenceByPos(rix1,rix1.getInput().get(index2 - 1),index2 - 1);    HopRewriteUtils.addChildReference(rix1,to,index2 - 1);    rix0.refreshSizeInformation();    rix1.refreshSizeInformation();    bop.refreshSizeInformation();    lix.refreshSizeInformation();    ret=csb;    LOG.debug("Applied vectorizeElementwiseBinaryForLoop.");  }  return ret;}  }
class C{  public Command showPopupDialog(Component c){  Rectangle componentPos=c.getSelectedRect();  componentPos.setX(componentPos.getX() - c.getScrollX());  componentPos.setY(componentPos.getY() - c.getScrollY());  return showPopupDialog(componentPos);}  }
class C{  public void brokerError(BrokerModelException ex){  if (502 == ex.getErrorCode()) {    _log.info("TWS is not running test will not be run");    return;  }  if (ex.getErrorId() == 1) {    _log.error("Error: " + ex.getErrorCode(),ex.getMessage(),ex);  } else   if (ex.getErrorId() == 2) {    _log.warn("Warning: " + ex.getMessage(),BasePanel.WARNING);  } else   if (ex.getErrorId() == 3) {    _log.info("Information: " + ex.getMessage(),BasePanel.INFORMATION);  } else {    _log.error("Unknown Error Id Code: " + ex.getErrorCode(),ex.getMessage(),ex);  }}  }
class C{  public ObjectiveComparator(int objective){  this.objective=objective;}  }
class C{  public NotificationChain basicSetExprs(ExpressionList newExprs,NotificationChain msgs){  ExpressionList oldExprs=exprs;  exprs=newExprs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.ARRAY__EXPRS,oldExprs,newExprs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static synchronized void markAsNumericLiteral(int size,Offset fieldOffset){  int slot=offsetAsSlot(fieldOffset);  if (size == BYTES_IN_LONG) {    numericFieldVector.clear(slot);    numericFieldVector.clear(slot + 1);  } else {    numericFieldVector.clear(slot);  }}  }
class C{  public void reportGpsGeofenceAddStatus(int geofenceId,int status){  if (DEBUG)   Log.d(TAG,"Add Callback: GPS : Id: " + geofenceId + " Status: "+ status);  acquireWakeLock();  Message m=mGeofenceHandler.obtainMessage(ADD_GEOFENCE_CALLBACK);  m.arg1=geofenceId;  m.arg2=getGeofenceStatus(status);  mGeofenceHandler.sendMessage(m);}  }
class C{  public void add(DBIDRef id){  this.newids.add(id);}  }
class C{  protected void generatePseudoRookMoves(PriorityMoveList moves){  long fromBB=getPieceBB(colorToMove,ROOK);  while (fromBB != 0) {    int fromSquare=bitscanForward(fromBB);    long toBB=orthogonalMove(fromSquare,emptyBB,occupiedBB) & getNotColorToMoveBB();    while (toBB != 0) {      int toSquare=bitscanForward(toBB);      int contents=getPieceWithPromoteMask(toSquare);      addMove(new Move(fromSquare,toSquare,getPieceWithPromoteMask(fromSquare),colorToMove,contents),moves);      toBB=bitscanClear(toBB);    }    fromBB=bitscanClear(fromBB);  }}  }
class C{  private static CssPropertySignature parseSignature(Name name,String sig){  try {    return CssPropertySignature.Parser.parseSignature(sig);  } catch (  RuntimeException ex) {    throw new SomethingWidgyHappenedError("Error parsing symbol " + name + " with signature "+ sig,ex);  }}  }
class C{  public void discardRecording(){  if (recorder != null) {    try {      recorder.stop();      recorder.release();      recorder=null;      if (file != null && file.exists() && !file.isDirectory()) {        file.delete();      }    } catch (    IllegalStateException e) {    }catch (    RuntimeException e) {    }    isRecording=false;  }}  }
class C{  private void createDataLinks(CWLWorkflow workflow) throws CWLException {  for (  CWLOutputPort port : workflow.getOutputs()) {    port.setId(Draft2ToCWLConverter.convertPortID(port.getId()));    List<String> sources=transformSource(port.getSource());    for (int position=0; position < sources.size(); position++) {      String destination=port.getId();      LinkMerge linkMerge=port.getLinkMerge() != null ? LinkMerge.valueOf(port.getLinkMerge()) : LinkMerge.merge_nested;      String source=sources.get(position);      source=Draft2ToCWLConverter.convertSource(source);      source=CWLSchemaHelper.normalizeId(source);      CWLDataLink dataLink=new CWLDataLink(source,destination,linkMerge,position + 1);      workflow.addDataLink(dataLink);    }  }  for (  CWLStep step : workflow.getSteps()) {    step.setId(Draft2ToCWLConverter.convertStepID(step.getId()));    List<CWLDataLink> dataLinks=new ArrayList<>();    for (    Map<String,Object> input : step.getInputs()) {      List<String> sources=transformSource(CWLBindingHelper.getSource(input));      for (int position=0; position < sources.size(); position++) {        String destination=CWLBindingHelper.getId(input);        destination=Draft2ToCWLConverter.convertDestinationId(destination);        destination=step.getId() + SLASH_SEPARATOR + destination;        LinkMerge linkMerge=CWLBindingHelper.getLinkMerge(input) != null ? LinkMerge.valueOf(CWLBindingHelper.getLinkMerge(input)) : LinkMerge.merge_nested;        String source=sources.get(position);        source=Draft2ToCWLConverter.convertSource(source);        source=CWLSchemaHelper.normalizeId(source);        CWLDataLink dataLink=new CWLDataLink(source,destination,linkMerge,position + 1);        dataLinks.add(dataLink);      }    }    workflow.addDataLinks(dataLinks);  }}  }
class C{  public void push(final double value){  long bits=Double.doubleToLongBits(value);  if (bits == 0L || bits == 0x3ff0000000000000L) {    mv.visitInsn(Opcodes.DCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  private void initValues(){  for (int i=0; i < KEY_COUNT; i++) {    values[i]=new byte[VALUE_LENGTH];    rnd.nextBytes(values[i]);  }}  }
class C{  public void remove(Component comp){  getContentPane().remove(comp);}  }
class C{  public void testDoCheckWithDefaultDetectionResult(){  LOGGER.debug("doCheckWithDefaultDetectionResult");  elements.add(element);  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("test");  mockTestSolutionHandler.addTestSolution(TestSolution.FAILED);  expectLastCall().once();  expect(mockNomenclature.getValueList()).andReturn(Arrays.asList("test"));  mockProcessRemarkService.addSourceCodeRemarkOnElement(TestSolution.FAILED,element,DETECTION_MSG,null);  expectLastCall().once();  TextBelongsToBlackListChecker instance=new TextBelongsToBlackListChecker(mockTextElementBuilder,BLACKLIST_NOM_NAME,DETECTION_MSG);  instance.setNomenclatureLoaderService(mockNomenclatureLoaderService);  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService,mockProcessRemarkService);}  }
class C{  public QueueReader newListener(){  return stream.reader();}  }
class C{  public MalformedCookieException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void addRows(Map<Value,Double> heads){  for (  Value head : heads.keySet()) {    addRow(head,heads.get(head));  }}  }
class C{  @Override public synchronized Object retrieve(){  Class itf=ClassLoaderUtils.load(serviceInterface,this.getClass().getClassLoader());  if (itf == null) {    throw new IllegalStateException("Cannot load class " + clientClass);  } else {    Object proxy=ProxyHelper.createProxy(itf,vertx,record().getLocation().getString(Record.ENDPOINT),deliveryOptions);    if (clientClass != null) {      try {        Class client=ClassLoaderUtils.load(clientClass,this.getClass().getClassLoader());        Constructor constructor=client.getConstructor(Object.class);        return constructor.newInstance(proxy);      } catch (      Exception e) {        throw new RuntimeException(e);      }    } else {      return proxy;    }  }}  }
class C{  public static int min(int[] array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  } else   if (array.length == 0) {    throw new IllegalArgumentException("Array cannot be empty.");  }  int min=array[0];  for (int j=1; j < array.length; j++) {    if (array[j] < min) {      min=array[j];    }  }  return min;}  }
class C{  @Override public String lpop(final String key){  checkIsInMultiOrPipeline();  client.lpop(key);  return client.getBulkReply();}  }
class C{  public static long encodeZigZag64(final long n){  return (n << 1) ^ (n >> 63);}  }
class C{  public final void removeElementAt(int i){  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree); else   m_map[i]=java.lang.Integer.MIN_VALUE;  m_firstFree--;}  }
class C{  public void RemoveAllNoClear(){  if (null == m_map)   return;  m_firstFree=0;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer(100);  buf.append("[");  if (index == -1) {    buf.append(oid.toString());  } else {    buf.append(OID_NAME_TABLE.get(PKCS9_OIDS[index]));  }  buf.append(": ");  if (index == -1 || SINGLE_VALUED[index]) {    if (value instanceof byte[]) {      HexDumpEncoder hexDump=new HexDumpEncoder();      buf.append(hexDump.encodeBuffer((byte[])value));    } else {      buf.append(value.toString());    }    buf.append("]");    return buf.toString();  } else {    boolean first=true;    Object[] values=(Object[])value;    for (int j=0; j < values.length; j++) {      if (first)       first=false; else       buf.append(", ");      buf.append(values[j].toString());    }    return buf.toString();  }}  }
class C{  public void initialise(int k,double kernelWidth) throws Exception {  this.kernelWidth=kernelWidth;  initialise(k,1,1);}  }
class C{  ORCLUSCluster(){}  }
class C{  public int size(){  return this.datbase.size();}  }
class C{  @Override public void onRestore(BackupDataInput data,int appVersionCode,ParcelFileDescriptor newState) throws IOException {  long crc=-1;  File tmpfile=File.createTempFile("rst",null,getFilesDir());  try {    while (data.readNextHeader()) {      if (BOOKMARK_KEY.equals(data.getKey())) {        crc=copyBackupToFile(data,tmpfile,data.getDataSize());        FileInputStream infstream=new FileInputStream(tmpfile);        DataInputStream in=new DataInputStream(infstream);        try {          int count=in.readInt();          ArrayList<Bookmark> bookmarks=new ArrayList<Bookmark>(count);          for (int i=0; i < count; i++) {            Bookmark mark=new Bookmark();            mark.url=in.readUTF();            mark.visits=in.readInt();            mark.date=in.readLong();            mark.created=in.readLong();            mark.title=in.readUTF();            bookmarks.add(mark);          }          int N=bookmarks.size();          int nUnique=0;          if (DEBUG)           Log.v(TAG,"Restoring " + N + " bookmarks");          String[] urlCol=new String[]{Bookmarks.URL};          for (int i=0; i < N; i++) {            Bookmark mark=bookmarks.get(i);            Cursor cursor=getContentResolver().query(Bookmarks.CONTENT_URI,urlCol,Bookmarks.URL + " == ?",new String[]{mark.url},null);            if (cursor.getCount() <= 0) {              if (DEBUG)               Log.v(TAG,"Did not see url: " + mark.url);              addBookmark(mark);              nUnique++;            } else {              if (DEBUG)               Log.v(TAG,"Skipping extant url: " + mark.url);            }            cursor.close();          }          Log.i(TAG,"Restored " + nUnique + " of "+ N+ " bookmarks");        } catch (        IOException ioe) {          Log.w(TAG,"Bad backup data; not restoring");          crc=-1;        } finally {          if (in != null) {            in.close();          }        }      }      writeBackupState(tmpfile.length(),crc,newState);    }  }  finally {    tmpfile.delete();  }}  }
class C{  private ArtworkViewLoader(ArtworkEntry artworkEntry,ImageView imageView,int defaultImage){  mImageView=new WeakReference<>(imageView);  mArtworkEntry=artworkEntry;  mDefaultImage=defaultImage;}  }
class C{  private void checkShellsNotNested(MultiPolygon mp,GeometryGraph graph){  for (int i=0; i < mp.getNumGeometries(); i++) {    Polygon p=(Polygon)mp.getGeometryN(i);    LinearRing shell=(LinearRing)p.getExteriorRing();    for (int j=0; j < mp.getNumGeometries(); j++) {      if (i == j)       continue;      Polygon p2=(Polygon)mp.getGeometryN(j);      checkShellNotNested(shell,p2,graph);      if (validErr != null)       return;    }  }}  }
class C{  public void writeOperationsCarFile(){  makeBackupFile(defaultOperationsFilename());  try {    if (!checkFile(defaultOperationsFilename())) {      java.io.File file=new java.io.File(defaultOperationsFilename());      java.io.File parentDir=file.getParentFile();      if (!parentDir.exists()) {        if (!parentDir.mkdir()) {          log.error("Directory wasn't created");        }      }      if (file.createNewFile()) {        log.debug("File created");      }    }    writeFile(defaultOperationsFilename());  } catch (  Exception e) {    log.error("Exception while writing the new CSV operations file, may not be complete: " + e);  }}  }
class C{  public static void main(String[] args){  CommandLine cmdline=new CommandLine();  OptionSet options=cmdline.parser().parse(args);  Config config=cmdline.loadConfig(options);  ConfigManager configManager=new ConfigManager(config);  configManager.run();}  }
class C{  public int size(){  return counterMap.size();}  }
class C{  public int countDigitOne(int n){  int res=0;  for (long m=1; m <= n; m*=10)   res+=(n / m + 8) / 10 * m + (n / m % 10 == 1 ? n % m + 1 : 0);  return res;}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  private void testFindRecentMessageUidsInMailbox() throws Exception {  LOG.info("findRecentMessageUidsInMailbox");  List<MessageUid> recentMessages=messageMapper.findRecentMessageUidsInMailbox(MBOXES.get(1));  assertEquals(MESSAGE_NO.size() - 1,recentMessages.size());}  }
class C{  public IgniteCacheQueryMultiThreadedSelfTest(){  super(false);}  }
class C{  protected static int parseValueLength(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int temp=pduDataStream.read();  assert (-1 != temp);  int first=temp & 0xFF;  if (first <= SHORT_LENGTH_MAX) {    return first;  } else   if (first == LENGTH_QUOTE) {    return parseUnsignedInt(pduDataStream);  }  throw new RuntimeException("Value length > LENGTH_QUOTE!");}  }
class C{  public void onSort(MenuItem item){}  }
class C{  private boolean validateMembershipRange(String membershipPortRange){  int[] range=null;  if (membershipPortRange != null && membershipPortRange.trim().length() > 0) {    String[] splitted=membershipPortRange.split("-");    range=new int[2];    range[0]=Integer.parseInt(splitted[0].trim());    range[1]=Integer.parseInt(splitted[1].trim());    if (range[0] < 0 || range[0] >= range[1] || range[1] < 0 || range[1] > 65535) {      range=null;    }  }  return range != null;}  }
class C{  FutureSolution(Solution solution){  super(solution);}  }
class C{  public Matrix4x3d lerp(Matrix4x3dc other,double t){  return lerp(other,t,this);}  }
class C{  public void testUnsizedLongsCountSeq(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.longs().limit(size).forEach(null);  assertEquals(size,counter.sum());}  }
class C{  public OutlierResult run(Database db,Relation<V> relation){  ArrayDBIDs ids=DBIDUtil.ensureArray(relation.getDBIDs());  SimilarityQuery<V> sq=db.getSimilarityQuery(relation,kernelFunction);  KernelMatrix kernelMatrix=new KernelMatrix(sq,relation,ids);  WritableDoubleDataStore abodvalues=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_STATIC);  DoubleMinMax minmaxabod=new DoubleMinMax();  MeanVariance s=new MeanVariance();  DBIDArrayIter pA=ids.iter(), pB=ids.iter(), pC=ids.iter();  for (; pA.valid(); pA.advance()) {    final double abof=computeABOF(kernelMatrix,pA,pB,pC,s);    minmaxabod.put(abof);    abodvalues.putDouble(pA,abof);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("Angle-Based Outlier Degree","abod-outlier",abodvalues,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new InvertedOutlierScoreMeta(minmaxabod.getMin(),minmaxabod.getMax(),0.0,Double.POSITIVE_INFINITY);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  private void checkRedirect(HTMLElement head){  if (head != null) {    HTMLElement meta=head.getFirstChildByTagId(HTMLElement.TAG_META);    if (meta != null) {      String httpequiv=meta.getAttributeById(HTMLElement.ATTR_HTTPEQUIV);      if ((httpequiv != null) && (httpequiv.equalsIgnoreCase("refresh"))) {        String content=meta.getAttributeById(HTMLElement.ATTR_CONTENT);        if (content != null) {          int seperator=content.indexOf(';');          String redirectURL=null;          if (seperator != -1) {            String tempUrl=content.substring(seperator + 1);            redirectURL="";            for (int i=0; i < tempUrl.length(); i++) {              char ch=tempUrl.charAt(i);              if (!CSSParser.isWhiteSpace(ch)) {                redirectURL+=ch;              }            }            if (redirectURL.startsWith("url=")) {              redirectURL=redirectURL.substring(4);            }            content=content.substring(0,seperator);          }          int redirectTime=-1;          try {            redirectTime=Integer.parseInt(content);            redirectThread=new RedirectThread(this,redirectTime,redirectURL);            Display.getInstance().startThread(redirectThread,"HTML checkRedirect").start();          } catch (          NumberFormatException nfe) {          }        }      }    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static LaunchSession launchSessionForAppId(String appId){  LaunchSession launchSession=new LaunchSession();  launchSession.appId=appId;  return launchSession;}  }
class C{  public void addPatterns(SiteList siteList,int from,int to,int every){  if (siteList == null) {    return;  }  if (taxonList == null) {    taxonList=siteList;    patternLength=taxonList.getTaxonCount();  }  if (dataType == null) {    dataType=siteList.getDataType();  } else   if (dataType != siteList.getDataType()) {    throw new IllegalArgumentException("Patterns' existing DataType does not match that of added SiteList");  }  if (from < 0)   from=0;  if (to <= 0)   to=siteList.getSiteCount() - 1;  if (every <= 0)   every=1;  for (int i=from; i <= to; i+=every) {    int[] pattern=siteList.getSitePattern(i);    if (pattern != null && (!isInvariant(pattern) || (!isGapped(pattern) && !isAmbiguous(pattern) && !isUnknown(pattern)))) {      addPattern(pattern,1.0);    }  }}  }
class C{  public static SnapshotMode parse(String value,String defaultValue){  SnapshotMode mode=parse(value);  if (mode == null && defaultValue != null)   mode=parse(defaultValue);  return mode;}  }
class C{  @Nullable public Byte dataCenterId(){  return dataCenterId;}  }
class C{  public void putList(String settingName,List list){synchronized (LOCK) {    Collection settingList=(Collection)get(settingName,Setting.LIST);    settingList.clear();    settingList.addAll(list);  }}  }
class C{  private void advance(double realDeltaTime){  if (isAtRest()) {    return;  }  double adjustedDeltaTime=realDeltaTime;  if (realDeltaTime > MAX_DELTA_TIME_SEC) {    adjustedDeltaTime=MAX_DELTA_TIME_SEC;  }  mTimeAccumulator+=adjustedDeltaTime;  double tension=mSpringTension;  double friction=mSpringFriction;  double position=mCurrentState.position;  double velocity=mCurrentState.velocity;  double tempPosition=mTempState.position;  double tempVelocity=mTempState.velocity;  double aVelocity, aAcceleration;  double bVelocity, bAcceleration;  double cVelocity, cAcceleration;  double dVelocity, dAcceleration;  double dxdt, dvdt;  while (mTimeAccumulator >= SOLVER_TIMESTEP_SEC) {    mTimeAccumulator-=SOLVER_TIMESTEP_SEC;    if (mTimeAccumulator < SOLVER_TIMESTEP_SEC) {      mPreviousState.position=position;      mPreviousState.velocity=velocity;    }    aVelocity=velocity;    aAcceleration=(tension * (mEndValue - tempPosition)) - friction * velocity;    tempPosition=position + aVelocity * SOLVER_TIMESTEP_SEC * 0.5;    tempVelocity=velocity + aAcceleration * SOLVER_TIMESTEP_SEC * 0.5;    bVelocity=tempVelocity;    bAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;    tempPosition=position + bVelocity * SOLVER_TIMESTEP_SEC * 0.5;    tempVelocity=velocity + bAcceleration * SOLVER_TIMESTEP_SEC * 0.5;    cVelocity=tempVelocity;    cAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;    tempPosition=position + cVelocity * SOLVER_TIMESTEP_SEC;    tempVelocity=velocity + cAcceleration * SOLVER_TIMESTEP_SEC;    dVelocity=tempVelocity;    dAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;    dxdt=1.0 / 6.0 * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity);    dvdt=1.0 / 6.0 * (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration);    position+=dxdt * SOLVER_TIMESTEP_SEC;    velocity+=dvdt * SOLVER_TIMESTEP_SEC;  }  mTempState.position=tempPosition;  mTempState.velocity=tempVelocity;  mCurrentState.position=position;  mCurrentState.velocity=velocity;  if (mTimeAccumulator > 0) {    interpolate(mTimeAccumulator / SOLVER_TIMESTEP_SEC);  }  if (isAtRest() || (mOvershootClampingEnabled && isOvershooting())) {    if (tension > 0) {      mStartValue=mEndValue;      mCurrentState.position=mEndValue;    } else {      mEndValue=mCurrentState.position;      mStartValue=mEndValue;    }    mCurrentState.velocity=0;  }}  }
class C{  private LineCoordinateGenerator(double[] radians){  this.llpts=radians;}  }
class C{  public void testSameClassLoaderIsolatedClassLoaderMode() throws Exception {  processTestHotRedeployment(DeploymentMode.ISOLATED);}  }
class C{  @Override public Collection<GraphNode> nextMatch(GraphModel graph,Collection<GraphNode> input){  Collection<GraphNode> nextTermInput=Sets.newHashSet();  nextTermInput.addAll(input);  for (  PathMatcherTerm pathMatcher : matchers) {    Collection<GraphNode> localInput=Sets.newHashSet();    localInput.addAll(nextTermInput);    Collection<GraphNode> termOutput=Sets.newHashSet();    boolean loop=false;    do {      loop=false;      boolean elementAdded=false;      Collection<GraphNode> localOutput=pathMatcher.getPathMatcher().nextMatch(graph,localInput);      for (      GraphNode node : localOutput) {        boolean added=termOutput.add(node);        elementAdded=elementAdded || added;      }      if (elementAdded && pathMatcher.isRecursive()) {        localInput=localOutput;        loop=true;      }    } while (loop);    if (pathMatcher.isCumulative()) {      nextTermInput.addAll(termOutput);    } else {      nextTermInput=termOutput;    }  }  return nextTermInput;}  }
class C{  public ReceptiveField(final int x,final int y,final int width,final int height){  this.x=x;  this.y=y;  this.width=width;  this.height=height;}  }
class C{  @Override public double evaluate(){  double gi=0;  double[] cs=itemCount.values().toDoubleArray();  sort(cs);  for (int j=0; j < cs.length; j++) {    gi+=(2 * (j + (numItems - cs.length) + 1) - numItems - 1) * (cs[j] / freeNorm);  }  gi/=(numItems - 1);  gi=1 - gi;  return gi;}  }
class C{  private boolean compareAndIncrementWorkerCount(int expect){  return ctl.compareAndSet(expect,expect + 1);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void openCurrentAndNext(){  openCurrentAndMaybeNext(true);}  }
class C{  public void verifyKeyNotNull(K key){  if (key == null) {    throw new NullPointerException("null key is not allowed. cache=" + id);  }}  }
class C{  @Override public void execute() throws Exception {  statementBuilder=new PreparedStatementBuilder(getConnection());  List<VOTriggerProcessParameter> parameterList=findTriggerProcessParameters();  for (  VOTriggerProcessParameter param : parameterList) {    VOService service=(VOService)param.getValue();    if (updateVOParameters(service.getParameters())) {      updateTriggerProcessParameter(param.getKey(),getSerializedValue(param.getValue()));    }  }}  }
class C{  public CSVReaderBuilder(final Reader reader){  if (reader == null) {    throw new IllegalArgumentException("Reader may not be null");  }  this.reader=reader;}  }
class C{  @Override public void computeScroll(){  if (!isInEditMode() && mViewDragHelper.continueSettling(true)) {    ViewCompat.postInvalidateOnAnimation(this);  }}  }
class C{  public static boolean isSqlServer(DbConnection conn) throws IeciTdException {  if (conn.getEngine() == DbEngine.SQLSERVER)   return true;  return false;}  }
class C{  public synchronized void startUpload(AccessStructure struct,int filesize,byte[] data) throws JPlagException {  if (userToUploadMap.containsKey(struct.getUsername())) {    throw new JPlagException("uploadException","You are already " + "uploading a submission!","Only one submission may be " + "uploaded by one user at a time");  }  File file=new File(struct.getEntryPath());  if (file.exists()) {    throw new JPlagException("uploadException","File already exist!?","Unable to create new file. Please tell the admins " + "about this!");  }  TransferObject obj=new TransferObject(struct,file,filesize,120);  if (!obj.writeNextPart(data)) {    userToUploadMap.put(struct.getUsername(),obj);    uploadTimeoutQueue.add(obj);  } else   JPlagCentral.addToReadyQueue(struct);}  }
class C{  public void createWeekScenarioBug10265_ParChangeWithFreeP() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-02-28 07:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"RARCHANGE_WEEK_FREEP",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS_FREEP,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("RARCHANGE_WEEK_FREEP",serviceDetails,basicSetup.getCustomerUser1(),role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 00:00:00"));  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-01 00:00:00"),"MAX_FOLDER_NUMBER","7");  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-01 01:00:00"),"MAX_FOLDER_NUMBER","3");  long usageEndTime=DateTimeHandling.calculateMillis("2013-03-03 07:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("RARCHANGE_WEEK_FREEP",subDetails);}  }
class C{  public Object findByName(String name){  for (  Dimension check : getContent().getDimensions()) {    if (check.getName() != null && check.getName().equals(name)) {      return check;    }  }  for (  Metric check : getContent().getMetrics()) {    if (check.getName() != null && check.getName().equals(name)) {      return check;    }  }  try {    for (    Space next : root.S()) {      if (next.getRelationName() != null && next.getRelationName().equals(name)) {        return next.getRelation();      }    }  } catch (  ComputingException|ScopeException e) {  }  return null;}  }
class C{  public void removeImplementationEventListenerNS(String namespaceURI,String type,EventListener listener,boolean useCapture){  HashTable listeners=useCapture ? capturingImplementationListeners : bubblingImplementationListeners;  if (listeners == null) {    return;  }  EventListenerList list=(EventListenerList)listeners.get(type);  if (list == null) {    return;  }  list.removeListener(namespaceURI,listener);  if (list.size() == 0) {    listeners.remove(type);  }}  }
class C{  public static String doubleToString(double value,int width,int afterDecimalPoint){  String tempString=doubleToString(value,afterDecimalPoint);  char[] result;  int dotPosition;  if ((afterDecimalPoint >= width) || (tempString.indexOf('E') != -1)) {    return tempString;  }  result=new char[width];  for (int i=0; i < result.length; i++) {    result[i]=' ';  }  if (afterDecimalPoint > 0) {    dotPosition=tempString.indexOf('.');    if (dotPosition == -1) {      dotPosition=tempString.length();    } else {      result[width - afterDecimalPoint - 1]='.';    }  } else {    dotPosition=tempString.length();  }  int offset=width - afterDecimalPoint - dotPosition;  if (afterDecimalPoint > 0) {    offset--;  }  if (offset < 0) {    return tempString;  }  for (int i=0; i < dotPosition; i++) {    result[offset + i]=tempString.charAt(i);  }  for (int i=dotPosition + 1; i < tempString.length(); i++) {    result[offset + i]=tempString.charAt(i);  }  return new String(result);}  }
class C{  @Override public void addProperty(String name,String text){  LuceneIndex.addPredicateField(name,text,doc);  LuceneIndex.addTextField(text,doc);}  }
class C{  protected SystemMemberImpl(AdminDistributedSystem system) throws AdminException {  this.system=system;  refreshConfig(getDefaultConfig());}  }
class C{  private static File generateFileMountedOnSDcard(Context context,int filePathResId,int fileNameFormatResId){  StringBuilder sb=new StringBuilder();  sb.append(Environment.getExternalStorageDirectory());  sb.append(context.getString(filePathResId));  File filedir=new File(sb.toString());  sb.append(context.getString(fileNameFormatResId,DateFormat.format(context.getString(R.string.format_date_ymd),System.currentTimeMillis())));  File file=new File(sb.toString());  try {    if (!filedir.exists()) {      filedir.mkdir();    }    if (!file.exists()) {      file.createNewFile();    }    return file;  } catch (  SecurityException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  @GET @Produces({MediaType.APPLICATION_JSON}) public ListQueryAPIResponseEntity listQuery(@QueryParam("query") String query,@QueryParam("startTime") String startTime,@QueryParam("endTime") String endTime,@QueryParam("pageSize") int pageSize,@QueryParam("startRowkey") String startRowkey,@QueryParam("treeAgg") boolean treeAgg,@QueryParam("timeSeries") boolean timeSeries,@QueryParam("intervalmin") long intervalmin,@QueryParam("top") int top,@QueryParam("filterIfMissing") boolean filterIfMissing,@QueryParam("parallel") int parallel,@QueryParam("metricName") String metricName,@QueryParam("verbose") Boolean verbose){  if (!EagleConfigFactory.load().isCoprocessorEnabled())   return listQueryWithoutCoprocessor(query,startTime,endTime,pageSize,startRowkey,treeAgg,timeSeries,intervalmin,top,filterIfMissing,parallel,metricName,verbose);  StopWatch watch=new StopWatch();  watch.start();  ListQueryAPIResponseEntity result=new ListQueryAPIResponseEntity();  try {    validateQueryParameters(startRowkey,pageSize);    ListQueryCompiler comp=new ListQueryCompiler(query,filterIfMissing);    String serviceName=comp.serviceName();    SearchCondition condition=new SearchCondition();    condition.setOutputVerbose(verbose == null || verbose);    condition.setOutputAlias(comp.getOutputAlias());    condition.setFilter(comp.filter());    condition.setQueryExpression(comp.getQueryExpression());    if (comp.sortOptions() == null && top > 0) {      LOG.warn("Parameter \"top\" is only used for sort query! Ignore top parameter this time since it's not a sort query");    }    final List<String[]> partitionValues=comp.getQueryPartitionValues();    if (partitionValues != null) {      condition.setPartitionValues(Arrays.asList(partitionValues.get(0)));    }    EntityDefinition ed=EntityDefinitionManager.getEntityByServiceName(serviceName);    if (ed.isTimeSeries()) {      condition.setStartTime(startTime);      condition.setEndTime(endTime);    }    condition.setStartRowkey(startRowkey);    condition.setPageSize(pageSize);    List<String> outputFields=comp.outputFields();    List<String> groupbyFields=comp.groupbyFields();    List<String> aggregateFields=comp.aggregateFields();    Set<String> filterFields=comp.getFilterFields();    condition.setOutputAll(comp.isOutputAll());    if (outputFields == null)     outputFields=new ArrayList<String>();    if (comp.hasAgg()) {      if (groupbyFields != null)       outputFields.addAll(groupbyFields);      if (aggregateFields != null)       outputFields.addAll(aggregateFields);      if (GenericMetricEntity.GENERIC_METRIC_SERVICE.equals(serviceName) && !outputFields.contains(GenericMetricEntity.VALUE_FIELD)) {        outputFields.add(GenericMetricEntity.VALUE_FIELD);      }    }    if (filterFields != null)     outputFields.addAll(filterFields);    condition.setOutputFields(outputFields);    if (comp.isOutputAll()) {      LOG.info("Output fields: ALL");    } else {      LOG.info("Output fields: " + StringUtils.join(outputFields,","));    }    GenericQuery reader=GenericQueryBuilder.select(outputFields).from(serviceName,metricName).where(condition).groupBy(comp.hasAgg(),groupbyFields,comp.aggregateFunctionTypes(),aggregateFields).timeSeries(timeSeries,intervalmin).treeAgg(treeAgg).orderBy(comp.sortOptions(),comp.sortFunctions(),comp.sortFields()).top(top).parallel(parallel).build();    List entities=reader.result();    result.setObj(entities);    result.setTotalResults(entities.size());    result.setSuccess(true);    result.setLastTimestamp(reader.getLastTimestamp());    result.setFirstTimestamp(reader.getFirstTimeStamp());  } catch (  Exception ex) {    LOG.error("Fail executing list query",ex);    result.setException(EagleExceptionWrapper.wrap(ex));    result.setSuccess(false);    return result;  } finally {    watch.stop();    result.setElapsedms(watch.getTime());  }  LOG.info("Query done " + watch.getTime() + " ms");  return result;}  }
class C{  public void quadTo(float x1,float y1,float x2,float y2){  checkBuf(4,true);  types[typeSize++]=PathIterator.SEG_QUADTO;  points[pointSize++]=x1;  points[pointSize++]=y1;  points[pointSize++]=x2;  points[pointSize++]=y2;  dirty=true;}  }
class C{  public double[] keys(){  double[] keys=new double[size()];  double[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public Portfolio persistPortfolio(final Portfolio instance) throws PersistentModelException {  try {    return m_portfolioHome.persistPortfolio(instance);  } catch (  Exception ex) {    throw new PersistentModelException("Error saving PortfolioAccount: " + ex.getMessage());  }}  }
class C{  public synchronized void rotate(final Point2D p,double theta){  m_itransform.transform(p,m_tmpPoint);  rotateAbs(m_tmpPoint,theta);}  }
class C{  public static void pushParameter(Object o){  parametersObject.push(o);}  }
class C{  public static Expr parse(String input,VariableRegistry variableRegistry){  List<String> tokens=SExprTokenizer.tokenize(input);  if (tokens.isEmpty()) {    return null;  }  if (tokens.size() == 1) {    String newExp=tokens.get(0);    if (newExp.startsWith(SExprTokenizer.OPEN_PAREN)) {      return parse(newExp.substring(1,newExp.length() - 1),variableRegistry);    } else {      return Atom.parse(newExp,variableRegistry);    }  } else {    return Operator.parse(tokens.get(0),tokens.subList(1,tokens.size()),variableRegistry);  }}  }
class C{  public ThrottledRunLater(){  this.runnable=null;}  }
class C{  public void maximiseComponent(Component component){  if (component == null) {    throw new IllegalArgumentException("Parameter component must not be null.");  }  if (maximisedComponent != null) {    return;  }  maximisedComponent=component;  parentMaximisedComponent=component.getParent();  containerChild=container.getComponent(0);  parentMaximisedComponent.remove(component);  container.remove(containerChild);  container.add(component);  container.validate();}  }
class C{  @Override public void selectLevelOfDetail(RenderContext rc,Placemark placemark,double cameraDistance){  boolean highlighted=placemark.isHighlighted();  boolean highlightChanged=this.lastHighlightState != highlighted;  if (cameraDistance > LEVEL_0_DISTANCE) {    if (this.lastLevelOfDetail != LEVEL_0 || highlightChanged) {      if (place.population > LEVEL_0_POPULATION || place.isCapital()) {        this.attributes=getPlacemarkAttributes(this.resources,this.place);      } else {        this.attributes=null;      }      this.lastLevelOfDetail=LEVEL_0;    }  } else   if (cameraDistance > LEVEL_1_DISTANCE) {    if (this.lastLevelOfDetail != LEVEL_1 || highlightChanged) {      if (place.population > LEVEL_1_POPULATION || place.isCapital()) {        this.attributes=getPlacemarkAttributes(this.resources,this.place);      } else {        this.attributes=null;      }      this.lastLevelOfDetail=LEVEL_1;    }  } else   if (cameraDistance > LEVEL_2_DISTANCE) {    if (this.lastLevelOfDetail != LEVEL_2 || highlightChanged) {      if (place.population > LEVEL_2_POPULATION || place.isCapital()) {        this.attributes=getPlacemarkAttributes(this.resources,this.place);      } else {        this.attributes=null;      }      this.lastLevelOfDetail=LEVEL_2;    }  } else   if (cameraDistance > LEVEL_3_DISTANCE) {    if (this.lastLevelOfDetail != LEVEL_3 || highlightChanged) {      if (place.population > LEVEL_3_POPULATION || place.isCapital()) {        this.attributes=getPlacemarkAttributes(this.resources,this.place);      } else {        this.attributes=null;      }      this.lastLevelOfDetail=LEVEL_3;    }  } else   if (cameraDistance > LEVEL_4_DISTANCE) {    if (this.lastLevelOfDetail != LEVEL_4 || highlightChanged) {      if (place.population > LEVEL_4_POPULATION || place.isCapital()) {        this.attributes=getPlacemarkAttributes(this.resources,this.place);      } else {        this.attributes=null;      }      this.lastLevelOfDetail=LEVEL_4;    }  } else {    if (this.lastLevelOfDetail != LEVEL_5 || highlightChanged) {      this.attributes=getPlacemarkAttributes(this.resources,this.place);      this.lastLevelOfDetail=LEVEL_5;    }  }  if (highlightChanged) {    if (highlighted) {      double scale=this.attributes.getImageScale();      this.attributes=new PlacemarkAttributes(this.attributes).setImageScale(scale * 2.0);    }  }  this.lastHighlightState=highlighted;  placemark.setAttributes(this.attributes);}  }
class C{  public void normalize(){}  }
class C{  public void status(int status){  this.status=status;}  }
class C{  public QuestsInRegionCompletedCondition(final String region){  this.region=checkNotNull(region);}  }
class C{  private synchronized void log(final String text){  try {    this.writer.write(text);  } catch (  IOException ioe) {    ioe.printStackTrace();  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.852 -0500",hash_original_method="270A029E5D11891F0D07089698FD1A31",hash_generated_method="8E8F4677D82BD84A63C391BB76BDF7E8") final boolean isRunningOrShutdown(boolean shutdownOK){  int rs=runStateOf(ctl.get());  return rs == RUNNING || (rs == SHUTDOWN && shutdownOK);}  }
class C{  public static void logInfo(ILog log,String message){  logInfo(log,message,new Object[0]);}  }
class C{  public PuzzleEvaluator(int target[]){  this.target=target;}  }
class C{  public LabelMaker(boolean fullColor,int strikeWidth,int strikeHeight){  mFullColor=fullColor;  mStrikeWidth=strikeWidth;  mStrikeHeight=strikeHeight;  mTexelWidth=(float)(1.0 / mStrikeWidth);  mTexelHeight=(float)(1.0 / mStrikeHeight);  mClearPaint=new Paint();  mClearPaint.setARGB(0,0,0,0);  mClearPaint.setStyle(Style.FILL);  mState=STATE_NEW;}  }
class C{  public static Completion of(String value){  return new SimpleCompletion(value,"");}  }
class C{  public static double log1p(double value){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.log1p(value) : Math.log1p(value);  }  if (false) {    if (value == Double.POSITIVE_INFINITY) {      return Double.POSITIVE_INFINITY;    }    double valuePlusOne=1 + value;    if (valuePlusOne == 1.0) {      return value;    } else {      return FastMath.log(valuePlusOne) * (value / (valuePlusOne - 1.0));    }  }  if (value > -1.0) {    if (value == Double.POSITIVE_INFINITY) {      return Double.POSITIVE_INFINITY;    }    double valuePlusOne=1.0 + value;    if (valuePlusOne == 1.0) {      return value;    } else     if (Math.abs(value) < 0.15) {      double z=value / (value + 2.0);      double z2=z * z;      return z * (2 + z2 * ((2.0 / 3) + z2 * ((2.0 / 5) + z2 * ((2.0 / 7) + z2 * ((2.0 / 9) + z2 * ((2.0 / 11)))))));    }    int valuePlusOneBitsHi=(int)(Double.doubleToRawLongBits(valuePlusOne) >> 32) & 0x7FFFFFFF;    int valuePlusOneExp=(valuePlusOneBitsHi >> 20) - MAX_DOUBLE_EXPONENT;    int xIndex=((valuePlusOneBitsHi << 12) >>> (32 - LOG_BITS));    double z=(valuePlusOne * twoPowTab[-valuePlusOneExp - MIN_DOUBLE_EXPONENT]) * logXInvTab[xIndex] - 1;    z*=(1 - z * ((1.0 / 2) - z * (1.0 / 3)));    return valuePlusOneExp * LOG_2 + logXLogTab[xIndex] + (z + (value - (valuePlusOne - 1)) / valuePlusOne);  } else   if (value == -1.0) {    return Double.NEGATIVE_INFINITY;  } else {    return Double.NaN;  }}  }
class C{  public static String exceptionChainToString(Throwable t){  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw,true);  while (t != null) {    t.printStackTrace(pw);    t=t.getCause();  }  pw.flush();  sw.flush();  return sw.toString();}  }
class C{  public OraWriter(){}  }
class C{  public static String createCnonce(){  LOG.trace("enter DigestScheme.createCnonce()");  String cnonce;  final String digAlg="MD5";  MessageDigest md5Helper;  try {    md5Helper=MessageDigest.getInstance(digAlg);  } catch (  final NoSuchAlgorithmException e) {    throw new HttpClientError("Unsupported algorithm in HTTP Digest authentication: " + digAlg);  }  cnonce=Long.toString(System.currentTimeMillis());  cnonce=encode(md5Helper.digest(EncodingUtil.getAsciiBytes(cnonce)));  return cnonce;}  }
class C{  public static int dpToPx(Context context,int dp){  DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();  int px=Math.round(dp * (displayMetrics.xdpi / DisplayMetrics.DENSITY_DEFAULT));  return px;}  }
class C{  public OrQueryBuilder add(QueryBuilder filterBuilder){  filters.add(filterBuilder);  return this;}  }
class C{  public boolean contains(S2Point p){  if (!bound.contains(p)) {    return false;  }  boolean inside=originInside;  S2Point origin=S2.origin();  S2EdgeUtil.EdgeCrosser crosser=new S2EdgeUtil.EdgeCrosser(origin,p,vertices[numVertices - 1]);  if (numVertices < 2000) {    for (int i=0; i < numVertices; i++) {      inside^=crosser.edgeOrVertexCrossing(vertices[i]);    }  } else {    DataEdgeIterator it=getEdgeIterator(numVertices);    int previousIndex=-2;    for (it.getCandidates(origin,p); it.hasNext(); it.next()) {      int ai=it.index();      if (previousIndex != ai - 1) {        crosser.restartAt(vertices[ai]);      }      previousIndex=ai;      inside^=crosser.edgeOrVertexCrossing(vertex(ai + 1));    }  }  return inside;}  }
class C{  public void addTriggers(List<String> triggers){  for (  String s : triggers) {    addTrigger(s);  }}  }
class C{  public void append(final char c){  builder.append(c);}  }
class C{  public ObjectProperty<DockStation> stationProperty(){  return station;}  }
class C{  private static Integer decodeInt(String token){  try {    return Integer.decode(token);  } catch (  NumberFormatException e) {    return null;  }}  }
class C{  @Override public byte[] decode(final byte[] data) throws IOException {  String line;  StringBuilder value=new StringBuilder();  final StringBuilder valuesRead=new StringBuilder();  BufferedReader mappingStream=null;  ByteArrayInputStream bis=null;  try {    bis=new ByteArrayInputStream(data);    mappingStream=new BufferedReader(new InputStreamReader(bis));    if (mappingStream != null) {      while (true) {        line=mappingStream.readLine();        if (line == null) {          break;        }        valuesRead.append(line);      }    }  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " reading ASCII stream ");  }  if (mappingStream != null) {    try {      mappingStream.close();      bis.close();    } catch (    final IOException e) {      LogWriter.writeLog("Exception: " + e.getMessage());    }  }  final int data_size=valuesRead.length();  int i=0, count=0;  char current;  final FastByteArrayOutputStream bos=new FastByteArrayOutputStream(data.length);  while (true) {    current=valuesRead.charAt(i);    if ((current >= '0' && current <= '9') || (current >= 'a' && current <= 'f') || (current >= 'A' && current <= 'F')) {      value.append(current);      if (count == 1) {        bos.write(Integer.valueOf(value.toString(),16));        count=0;        value=new StringBuilder();      } else {        count++;      }    }    if (current == '>') {      break;    }    i++;    if (i == data_size) {      break;    }  }  if (count == 1) {    value.append('0');    bos.write(Integer.valueOf(value.toString(),16));  }  return bos.toByteArray();}  }
class C{  public void remove(Id person){  if (sittingPersons.remove(person)) {    if (standingPersons.size() > 0) {      Id sitter=rule.giveSeatOnLeave(person,vehicle,sittingPersons.size(),Collections.unmodifiableList(standingPersons));      if (sitter != null) {        standingPersons.remove(sitter);        sittingPersons.add(sitter);      }    }  } else {    standingPersons.remove(person);  }}  }
class C{  public void store(double key,double value,double pmiss){  if (!m_Cache.containsKey(key)) {    m_Cache.insert(key,value,pmiss);  }}  }
class C{  public void testDefaultPropertiesAreSet() throws Exception {  TestableAbstractStandaloneConfiguration configuration=new TestableAbstractStandaloneConfiguration("dummy");  assertEquals("8080",configuration.getPropertyValue(ServletPropertySet.PORT));  assertEquals(LoggingLevel.MEDIUM.getLevel(),configuration.getPropertyValue(GeneralPropertySet.LOGGING));  assertEquals("localhost",configuration.getPropertyValue(GeneralPropertySet.HOSTNAME));}  }
class C{  public int parseLength() throws DecodeException {  int lengthbyte=parseByte();  if ((lengthbyte & 0x80) == 0x80) {    lengthbyte&=0x7f;    if (lengthbyte == 0) {      throw new DecodeException("Indefinite length not supported");    }    if (lengthbyte > 4) {      throw new DecodeException("encoding too long");    }    if (bufsize - offset < lengthbyte) {      throw new DecodeException("Insufficient data");    }    int retval=0;    for (int i=0; i < lengthbyte; i++) {      retval=(retval << 8) + (buf[offset++] & 0xff);    }    if (retval < 0) {      throw new DecodeException("Invalid length bytes");    }    return retval;  } else {    return lengthbyte;  }}  }
class C{  public static int compare(double left,double right){  if ((left) < (right))   return -1; else   if ((left) > (right))   return 1; else   return 0;}  }
class C{  public boolean evaluate(int fileCount,long aggregateFileSize){  return (this.fileCount > 0 && fileCount > this.fileCount) || (this.aggregateFileSize > 0 && aggregateFileSize > this.aggregateFileSize);}  }
class C{  public List<ValidationErrorMessage> validate(){  errorMessageIds.clear();  if (paymentProduct == null) {    throw new NullPointerException("Error validating PaymentRequest, please set a paymentProduct first.");  }  for (  PaymentProductField field : paymentProduct.getPaymentProductFields()) {    if (!isFieldInAccountOnFileAndNotAltered(field)) {      errorMessageIds.addAll(field.validateValue(getValue(field.getId())));    }  }  return errorMessageIds;}  }
class C{  private void printTree(RedBlackNode t){  if (t != nullNode) {    printTree(t.left);    System.out.println(t.element);    printTree(t.right);  }}  }
class C{  DeclaredType styleClass(){  return styleClass;}  }
class C{  public void testMoveRenameFileSourceAndDestinationMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  create(igfs,null,null);  igfs.rename(FILE,FILE_NEW);  checkExist(igfs,DIR,SUBDIR,DIR_NEW,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,FILE_NEW);  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  @Override public boolean isNamespaceAware(){  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void stopChatService(){  final Intent intent=new Intent(sStaticContext,ChatService.class);  sStaticContext.stopService(intent);}  }
class C{  public AnthBandit(double lambda,int minKnownDomains,int domainQueueOfferTime,AnthProcessor p,boolean lambdaDecay,int lambdaDecayValue){  this.lambda=lambda;  this.lambdaDecay=lambdaDecay;  this.lambdaDecayValue=lambdaDecayValue;  this.domainQueueOfferTime=domainQueueOfferTime;  this.minKnownHosts=minKnownDomains;  this.processor=p;  this.rnd=new Random();}  }
class C{  public void printFlags(long flags) throws IOException {  if ((flags & SYNTHETIC) != 0)   print("/*synthetic*/ ");  print(TreeInfo.flagNames(flags));  if ((flags & ExtendedStandardFlags) != 0)   print(" ");  if ((flags & ANNOTATION) != 0)   print("@");}  }
class C{  @DSComment("not sensitive/not an action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:20.358 -0500",hash_original_method="5DC1275450A355C1DC130895BF0B045F",hash_generated_method="E048853307992D93F474B7024676B12D") public static AttributeSet asAttributeSet(XmlPullParser parser){  return (parser instanceof AttributeSet) ? (AttributeSet)parser : new XmlPullAttributes(parser);}  }
class C{  private Hop processDataExpression(DataExpression source,DataIdentifier target,HashMap<String,Hop> hops) throws ParseException, HopsException {  HashMap<String,Hop> paramHops=new HashMap<String,Hop>();  Hop pHop=null;  for (  String paramName : source.getVarParams().keySet()) {    pHop=processExpression(source.getVarParam(paramName),null,hops);    paramHops.put(paramName,pHop);  }  Hop currBuiltinOp=null;  if (target == null) {    target=createTarget(source);  }switch (source.getOpCode()) {case READ:    currBuiltinOp=new DataOp(target.getName(),target.getDataType(),target.getValueType(),DataOpTypes.PERSISTENTREAD,paramHops);  ((DataOp)currBuiltinOp).setFileName(((StringIdentifier)source.getVarParam(DataExpression.IO_FILENAME)).getValue());break;case WRITE:String name=target.getName();currBuiltinOp=new DataOp(target.getName(),target.getDataType(),target.getValueType(),DataOpTypes.PERSISTENTWRITE,hops.get(name),paramHops);break;case RAND:DataGenMethod method=(paramHops.get(DataExpression.RAND_MIN).getValueType() == ValueType.STRING) ? DataGenMethod.SINIT : DataGenMethod.RAND;currBuiltinOp=new DataGenOp(method,target,paramHops);break;case MATRIX:ArrayList<Hop> tmp=new ArrayList<Hop>();tmp.add(0,paramHops.get(DataExpression.RAND_DATA));tmp.add(1,paramHops.get(DataExpression.RAND_ROWS));tmp.add(2,paramHops.get(DataExpression.RAND_COLS));tmp.add(3,paramHops.get(DataExpression.RAND_BY_ROW));currBuiltinOp=new ReorgOp(target.getName(),target.getDataType(),target.getValueType(),ReOrgOp.RESHAPE,tmp);break;default :LOG.error(source.printErrorLocation() + "processDataExpression():: Unknown operation:  " + source.getOpCode());throw new ParseException(source.printErrorLocation() + "processDataExpression():: Unknown operation:  " + source.getOpCode());}setIdentifierParams(currBuiltinOp,source.getOutput());if (source.getOpCode() == DataExpression.DataOp.READ) ((DataOp)currBuiltinOp).setInputBlockSizes(target.getRowsInBlock(),target.getColumnsInBlock());currBuiltinOp.setAllPositions(source.getBeginLine(),source.getBeginColumn(),source.getEndLine(),source.getEndColumn());return currBuiltinOp;}  }
class C{  private synchronized Terms drawFromQueue(){  if (theQ.isEmpty())   populateQueue();  Terms toReturn=theQ.poll();  return toReturn;}  }
class C{  public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  public void addToBucket(BasicBlock block){  bucket.add(block);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_BASE_TYPE:    return delegationBaseType != null;case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:  return delegationSuperClassSteps != DELEGATION_SUPER_CLASS_STEPS_EDEFAULT;case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_TARGET:return delegationTarget != null;case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:return delegationTargetIsAbstract != DELEGATION_TARGET_IS_ABSTRACT_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public double im(){  return im;}  }
class C{  public boolean isVoid(){  return rawClass.equals(Void.class) || rawClass.equals(void.class);}  }
class C{  public KerberosTime(Date time){  this(time.getTime(),0);}  }
class C{  public TreeLayout(Forest<V,E> g){  this(g,DEFAULT_DISTX,DEFAULT_DISTY);}  }
class C{  public static String hexStringToAsciiString(final String hexString){  final String realText=(hexString.length() % 2) == 0 ? hexString : "0" + hexString;  final StringBuilder stringBuilder=new StringBuilder();  for (int i=0; i < realText.length(); i+=2) {    final char c1=realText.charAt(i);    final char c2=realText.charAt(i + 1);    if (!isHexCharacter(c1) || !isHexCharacter(c2)) {      throw new IllegalArgumentException("Error: Invalid hex string");    }    final char code=(char)((Character.digit(c1,16) << 4) + Character.digit(c2,16));    stringBuilder.append(isPrintableCharacter(code) ? code : ".");  }  return stringBuilder.toString();}  }
class C{  public ConnectionConfig(){  super();  adapter=new RaspberryPiAdapter();}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  startNonText(handler);  handler.getCurrentProcessor().endElement(handler,uri,localName,rawName);  handler.popProcessor();}  }
class C{  public static void handleCLIResult(final CommandLineResult result) throws Exception {  if (result.getExitCode() != 0) {    throw new SubversionException(Joiner.on("\n").join(result.getStderr().size() != 0 ? result.getStderr().toArray(new String[result.getStderr().size()]) : result.getStdout().toArray(new String[result.getStdout().size()])));  }}  }
class C{  public void clearBoundingBoxes(){  List<BoundingBox> boundingBoxes=getStorage().getBoundingBoxes();  if (boundingBoxes != null) {    boundingBoxes.clear();  }}  }
class C{  private boolean startScrollIfNeeded(final int y){  final int deltaY=y - mMotionY;  final int distance=Math.abs(deltaY);  final boolean overscroll=false;  if (overscroll || distance > mTouchSlop) {    if (overscroll) {      mMotionCorrection=0;    } else {      mTouchMode=TOUCH_MODE_SCROLLING;      mMotionCorrection=deltaY > 0 ? mTouchSlop : -mTouchSlop;    }    setPressed(false);    View motionView=getChildAt(mMotionPosition - mFirstPosition);    if (motionView != null) {      motionView.setPressed(false);    }    final ViewParent parent=getParent();    if (parent != null) {      parent.requestDisallowInterceptTouchEvent(true);    }    scrollIfNeeded(y);    return true;  }  return false;}  }
class C{  private long session() throws IgniteCheckedException {  Long sesPtr=(Long)ses.properties().get(KEY_SES);  if (sesPtr == null) {    sesPtr=platformCtx.gateway().cacheStoreSessionCreate(ptr);    ses.properties().put(KEY_SES,sesPtr);  }  return sesPtr;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.263 -0500",hash_original_method="F1B813BD238681733DAFF269616C7CF7",hash_generated_method="F681E3FD634766498B11C935AE1CEDA2") public static void wtf(String tag,Throwable t){  try {    if (ActivityManagerNative.getDefault().handleApplicationWtf(mApplicationObject,tag,new ApplicationErrorReport.CrashInfo(t))) {      Process.killProcess(Process.myPid());      System.exit(10);    }  } catch (  Throwable t2) {    Slog.e(TAG,"Error reporting WTF",t2);  }}  }
class C{  public void validateBusinessObjectFormatKey(BusinessObjectFormatKey key) throws IllegalArgumentException {  validateBusinessObjectFormatKey(key,true);}  }
class C{  public <T>PushableReactiveSeq<T> reactiveSeq(){  Queue<T> q=createQueue();  return new PushableReactiveSeq<T>(q,q.stream());}  }
class C{  private void locateProtocols(String protocolList,Object transportConfig,Map<String,ProtocolManagerFactory> protocolMap){  String[] protocolsSplit=protocolList.split(",");  for (  String protocolItem : protocolsSplit) {    ProtocolManagerFactory protocolManagerFactory=this.protocolMap.get(protocolItem);    if (protocolManagerFactory == null) {      ActiveMQServerLogger.LOGGER.noProtocolManagerFound(protocolItem,transportConfig.toString());    } else {      protocolMap.put(protocolItem,protocolManagerFactory);    }  }}  }
class C{  public static boolean containsOnlyWhitespaces(CharSequence string){  int size=string.length();  for (int i=0; i < size; i++) {    char c=string.charAt(i);    if (CharUtil.isWhitespace(c) == false) {      return false;    }  }  return true;}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  super.endCompose(sroot);  if (m_parentNode instanceof Stylesheet) {    StylesheetRoot.ComposeState cstate=sroot.getComposeState();    m_frameSize=cstate.getFrameSize();    cstate.resetStackFrameSize();  }}  }
class C{  public CameraDeviceKey(ApiType apiType,CameraId cameraId){  mApiType=apiType;  mCameraId=cameraId;}  }
class C{  public void removeEntry(RosterEntry entry) throws XMPPException {  if (!connection.isAuthenticated()) {    throw new IllegalStateException("Not logged in to server.");  }  if (connection.isAnonymous()) {    throw new IllegalStateException("Anonymous users can't have a roster.");  }  if (!entries.containsKey(entry.getUser())) {    return;  }  RosterPacket packet=new RosterPacket();  packet.setType(IQ.Type.SET);  RosterPacket.Item item=RosterEntry.toRosterItem(entry);  item.setItemType(RosterPacket.ItemType.remove);  packet.addRosterItem(item);  PacketCollector collector=connection.createPacketCollector(new PacketIDFilter(packet.getPacketID()));  connection.sendPacket(packet);  IQ response=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (response == null) {    throw new XMPPException("No response from the server.");  } else   if (response.getType() == IQ.Type.ERROR) {    throw new XMPPException(response.getError());  }}  }
class C{  private void convertToNetwork(){  for (  OsmParser.OsmRelation relation : this.relations.values()) {    for (    OsmParser.OsmRelationMember member : relation.members) {      MapUtils.getSet(member.refId,relationMembers).add(relation.id);    }  }  TagFilter serviceRailTracksFilter=new TagFilter();  serviceRailTracksFilter.add(OsmTag.SERVICE);  for (  OsmParser.OsmWay way : ways.values()) {    if (!highwayParams.containsKey(way.tags.get(OsmTag.HIGHWAY)) && !railwayParams.containsKey(way.tags.get(OsmTag.RAILWAY)) && !relationMembers.containsKey(way.id)) {      way.used=false;    } else     if (!this.nodes.containsKey(way.nodes.get(0)) || !this.nodes.containsKey(way.nodes.get(way.nodes.size() - 1))) {      way.used=false;    }  }  Iterator<Map.Entry<Long,OsmParser.OsmWay>> it=ways.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<Long,OsmParser.OsmWay> entry=it.next();    if (!entry.getValue().used) {      it.remove();    }  }  for (  OsmParser.OsmWay way : this.ways.values()) {    if (this.nodes.containsKey(way.nodes.get(0)) && this.nodes.containsKey(way.nodes.get(way.nodes.size() - 1))) {      this.nodes.get(way.nodes.get(0)).ways++;      this.nodes.get(way.nodes.get(way.nodes.size() - 1)).ways++;    }    for (    Long nodeId : way.nodes) {      OsmParser.OsmNode node=this.nodes.get(nodeId);      node.used=true;      node.ways++;    }  }  if (!config.getKeepPaths()) {    for (    OsmParser.OsmWay way : this.ways.values()) {      double length=0.0;      OsmParser.OsmNode lastNode=this.nodes.get(way.nodes.get(0));      for (int i=1; i < way.nodes.size(); i++) {        OsmParser.OsmNode node=this.nodes.get(way.nodes.get(i));        if (node.ways > 1) {          length=0.0;          lastNode=node;        } else         if (node.ways == 1) {          length+=CoordUtils.calcEuclideanDistance(lastNode.coord,node.coord);          if (length <= config.getMaxLinkLength()) {            node.used=false;            lastNode=node;          } else {            length=0.0;            lastNode=node;          }        } else {          log.warn("Way node with less than 1 ways found.");        }      }    }    for (    OsmParser.OsmWay way : this.ways.values()) {      int prevRealNodeIndex=0;      OsmParser.OsmNode prevRealNode=this.nodes.get(way.nodes.get(prevRealNodeIndex));      for (int i=1; i < way.nodes.size(); i++) {        OsmParser.OsmNode node=this.nodes.get(way.nodes.get(i));        if (node.used) {          if (prevRealNode == node) {            double increment=Math.sqrt(i - prevRealNodeIndex);            double nextNodeToKeep=prevRealNodeIndex + increment;            for (double j=nextNodeToKeep; j < i; j+=increment) {              int index=(int)Math.floor(j);              OsmParser.OsmNode intermediaryNode=this.nodes.get(way.nodes.get(index));              intermediaryNode.used=true;            }          }          prevRealNodeIndex=i;          prevRealNode=node;        }      }    }  }  for (  OsmParser.OsmNode node : this.nodes.values()) {    if (node.used) {      Node nn=this.network.getFactory().createNode(Id.create(node.id,Node.class),node.coord);      this.network.addNode(nn);    }  }  this.id=1;  for (  OsmParser.OsmWay way : this.ways.values()) {    OsmParser.OsmNode fromNode=this.nodes.get(way.nodes.get(0));    double length=0.0;    OsmParser.OsmNode lastToNode=fromNode;    if (fromNode.used) {      for (int i=1, n=way.nodes.size(); i < n; i++) {        OsmParser.OsmNode toNode=this.nodes.get(way.nodes.get(i));        if (toNode != lastToNode) {          length+=CoordUtils.calcEuclideanDistance(lastToNode.coord,toNode.coord);          if (toNode.used) {            createLink(this.network,way,fromNode,toNode,length);            fromNode=toNode;            length=0.0;          }          lastToNode=toNode;        }      }    }  }  this.nodes.clear();  this.ways.clear();  this.relations.clear();  log.info("= conversion statistics: ==========================");  log.info("MATSim: # nodes created: " + this.network.getNodes().size());  log.info("MATSim: # links created: " + this.network.getLinks().size());  if (this.unknownHighways.size() > 0) {    log.info("The following highway-types had no defaults set and were thus NOT converted:");    for (    String highwayType : this.unknownHighways) {      log.info("- \"" + highwayType + "\"");    }  }  if (this.unknownRailways.size() > 0) {    log.info("The following railway-types had no defaults set and were thus NOT converted:");    for (    String railwayType : this.unknownRailways) {      log.info("- \"" + railwayType + "\"");    }  }  if (this.unknownPTs.size() > 0) {    log.info("The following PT-types had no defaults set and were thus NOT converted:");    for (    String ptType : this.unknownPTs) {      log.info("- \"" + ptType + "\"");    }  }  if (this.unknownWays.size() > 0) {    log.info("The way-types with the following tags had no defaults set and were thus NOT converted:");    for (    String wayType : this.unknownWays) {      log.info("- \"" + wayType + "\"");    }  }  log.info("= end of conversion statistics ====================");}  }
class C{  public static String formatHeaderByte(int b){  return "Dim: " + ((b >> 3) & 0x1F) + ((b & 0x02) != 0 ? " function" : " address ")+ ((b & 0x01) != 0 ? " extended" : " ");}  }
class C{  public void purge() throws IOException {  out(true).writeTo(out);}  }
class C{  private void createSignalSystems(){  createSignalSystemAtNode(this.scenario.getNetwork().getNodes().get(Id.createNodeId(2)));  createSignalSystemAtNode(this.scenario.getNetwork().getNodes().get(Id.createNodeId(3)));  createSignalSystemAtNode(this.scenario.getNetwork().getNodes().get(Id.createNodeId(4)));  createSignalSystemAtNode(this.scenario.getNetwork().getNodes().get(Id.createNodeId(5)));  createSignalSystemAtNode(this.scenario.getNetwork().getNodes().get(Id.createNodeId(7)));  createSignalSystemAtNode(this.scenario.getNetwork().getNodes().get(Id.createNodeId(8)));  if (TtCreateParallelNetworkAndLanes.checkNetworkForSecondODPair(this.scenario.getNetwork())) {    createSignalSystemAtNode(this.scenario.getNetwork().getNodes().get(Id.createNodeId(10)));    createSignalSystemAtNode(this.scenario.getNetwork().getNodes().get(Id.createNodeId(11)));  }}  }
class C{  public void execute(StepInstance stepInstance,String temporaryFileDirectory){  final String outputFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.getSsfOutputFileTemplate());  final Set<RawProtein<Gene3dHmmer3RawMatch>> rawProteins=this.getRawMatchDAO().getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),getSignatureLibraryRelease());  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("In execute() method of Gene3dHmmer3FilterStep.java (Gene3D Post Processing.)");    LOGGER.debug("DAO returned " + rawProteins.size() + " raw proteins to filter.");  }  filteredMatchDAO.persist(this.getPostProcessor().filter(rawProteins,outputFilePath));}  }
class C{  private static boolean hasANode(ArrayList<Lop> nodes,ExecLocation loc){  for (  Lop n : nodes) {    if (n.getExecLocation() == ExecLocation.RecordReader)     return true;  }  return false;}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof AccessControlContext))   return false;  AccessControlContext that=(AccessControlContext)obj;  if (!equalContext(that))   return false;  if (!equalLimitedContext(that))   return false;  return true;}  }
class C{  protected void popWriteContext(){  writeContext_=writeContextStack_.pop();}  }
class C{  @Override public void close() throws IOException {  if (in != null) {    in.close();    in=null;    buf=null;  }}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public void removeDirectionsLocationPane(Waypoint waypoint){}  }
class C{  public static String createBoundary(){  StringBuilder sb=new StringBuilder("----NoHttpFormBoundary");  for (int t=1; t < 12; t++) {    long time=System.currentTimeMillis() + t;    if (time % 3L == 0L) {      sb.append((char)(int)time % '\t');    } else     if (time % 3L == 1L) {      sb.append((char)(int)(65L + time % 26L));    } else {      sb.append((char)(int)(97L + time % 26L));    }  }  return sb.toString();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.652 -0500",hash_original_method="9930459085CDC2417094A7A8585D74E6",hash_generated_method="5A33FCD11FD7601B075450C8B2424E13") private void parseMenu(XmlPullParser parser,AttributeSet attrs,Menu menu) throws XmlPullParserException, IOException {  MenuState menuState=new MenuState(menu);  int eventType=parser.getEventType();  String tagName;  boolean lookingForEndOfUnknownTag=false;  String unknownTagName=null;  do {    if (eventType == XmlPullParser.START_TAG) {      tagName=parser.getName();      if (tagName.equals(XML_MENU)) {        eventType=parser.next();        break;      }      throw new RuntimeException("Expecting menu, got " + tagName);    }    eventType=parser.next();  } while (eventType != XmlPullParser.END_DOCUMENT);  boolean reachedEndOfMenu=false;  while (!reachedEndOfMenu) {switch (eventType) {case XmlPullParser.START_TAG:      if (lookingForEndOfUnknownTag) {        break;      }    tagName=parser.getName();  if (tagName.equals(XML_GROUP)) {    menuState.readGroup(attrs);  } else   if (tagName.equals(XML_ITEM)) {    menuState.readItem(attrs);  } else   if (tagName.equals(XML_MENU)) {    SubMenu subMenu=menuState.addSubMenuItem();    parseMenu(parser,attrs,subMenu);  } else {    lookingForEndOfUnknownTag=true;    unknownTagName=tagName;  }break;case XmlPullParser.END_TAG:tagName=parser.getName();if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {lookingForEndOfUnknownTag=false;unknownTagName=null;} else if (tagName.equals(XML_GROUP)) {menuState.resetGroup();} else if (tagName.equals(XML_ITEM)) {if (!menuState.hasAddedItem()) {if (menuState.itemActionProvider != null && menuState.itemActionProvider.hasSubMenu()) {  menuState.addSubMenuItem();} else {  menuState.addItem();}}} else if (tagName.equals(XML_MENU)) {reachedEndOfMenu=true;}break;case XmlPullParser.END_DOCUMENT:throw new RuntimeException("Unexpected end of document");}eventType=parser.next();}}  }
class C{  synchronized public double nextGaussian(){  if (__haveNextNextGaussian) {    __haveNextNextGaussian=false;    return __nextNextGaussian;  } else {    double v1, v2, s;    do {      v1=2 * nextDouble() - 1;      v2=2 * nextDouble() - 1;      s=v1 * v1 + v2 * v2;    } while (s >= 1 || s == 0);    double multiplier=StrictMath.sqrt(-2 * StrictMath.log(s) / s);    __nextNextGaussian=v2 * multiplier;    __haveNextNextGaussian=true;    return v1 * multiplier;  }}  }
class C{  public boolean hasNonSolidColors(){  return mHasNonSolidColors;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported09.class,args);}  }
class C{  public int executeUpdate(final String sql,final int[] columnIndexes) throws SQLException {  if (executeInternal(sql,fetchSize)) {    return 0;  }  return getUpdateCount();}  }
class C{  public Boolean isWaitingForGuest(){  return waitingForGuest;}  }
class C{  @VisibleForTesting public ResultCard(int expirationMonth,int expirationYear,String pan,String cvn){  mExpirationMonth=expirationMonth;  mExpirationYear=expirationYear;  mPan=pan;  mCvn=cvn;}  }
class C{  @Inline @Entrypoint public static double doubleArrayRead(double[] ref,int index){  if (NEEDS_DOUBLE_GC_READ_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_DOUBLE);    return Selected.Mutator.get().doubleRead(array,array.toAddress().plus(offset),offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public Task<ComputeSystemRestRep> deactivate(URI id){  return doDeactivateWithTask(id);}  }
class C{  public NotificationChain basicSetReactSequence(Sequence newReactSequence,NotificationChain msgs){  Sequence oldReactSequence=reactSequence;  reactSequence=newReactSequence;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_NODE__REACT_SEQUENCE,oldReactSequence,newReactSequence);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void runAndThrow() throws Throwable {  final String expectedGetRequest="GET " + this.remotePath;  while (!this.stopped) {    Socket socket=null;    try {      this.logger.debug("Waiting for connection on socket " + this.serverSocket,this.getClass().getName());      socket=this.serverSocket.accept();      this.logger.debug("Handling request on socket " + socket,this.getClass().getName());      boolean error=false;      BufferedReader in=new BufferedReader(new InputStreamReader(socket.getInputStream()));      String line=in.readLine();      if (line == null) {        line="";      }      if (!line.startsWith(expectedGetRequest)) {        error=true;      }      while (!"".equals(line)) {        line=in.readLine();      }      this.logger.debug("Got HTTP request line " + line,this.getClass().getName());      OutputStream out=socket.getOutputStream();      if (error) {        StringBuilder answer=new StringBuilder();        answer.append("HTTP/1.0 404 NOTFOUND");        answer.append("\r\n");        answer.append("Connection: close");        answer.append("\r\n");        answer.append("\r\n");        out.write(answer.toString().getBytes("US-ASCII"));        out.flush();      } else {        StringBuilder answer=new StringBuilder();        answer.append("HTTP/1.0 200 OK");        answer.append("\r\n");        answer.append("Connection: close");        answer.append("\r\n");        answer.append("Content-Type: application/octet-stream");        answer.append("\r\n");        answer.append("Content-Length: ");        answer.append(Long.toString(this.fileHandler.getSize(this.filePath)));        answer.append("\r\n");        answer.append("\r\n");        out.write(answer.toString().getBytes("US-ASCII"));        out.flush();        byte[] fileBytes=new byte[socket.getSendBufferSize()];        InputStream file=this.fileHandler.getInputStream(this.filePath);        try {          int read;          while ((read=file.read(fileBytes)) > 0) {            out.write(fileBytes,0,read);            out.flush();          }        }  finally {          file.close();          file=null;        }        this.callCount++;      }      this.logger.debug("Finished responding to HTTP request line " + line,this.getClass().getName());      out.flush();      out.close();      out=null;      in.close();      in=null;    } catch (    SocketException ignored) {    } finally {      if (socket != null) {        socket.close();        socket=null;      }    }  }}  }
class C{  public final int establishedFusionMode(){  return establishedFusionMode;}  }
class C{  public void registerNetworkForCleanup(String networkName){  registeredNetworks.add(networkName);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Element store(Object o){  ConnectionConfig oprime=((JmrixConfigPane)o).getCurrentObject();  if (oprime == null) {    return null;  }  String adapter=ConfigXmlManager.adapterName(oprime);  log.debug("forward to " + adapter);  try {    XmlAdapter x=(XmlAdapter)Class.forName(adapter).newInstance();    return x.store(oprime);  } catch (  Exception e) {    log.error("Exception: " + e);    e.printStackTrace();    return null;  }}  }
class C{  public boolean isEmptyImportDeclaration(){  return this.isEmptyImportDeclaration;}  }
class C{  public static Curve25519KeyPair keyGen(byte[] randomBytes){  byte[] privateKey=keyGenPrivate(randomBytes);  byte[] publicKey=keyGenPublic(privateKey);  return new Curve25519KeyPair(publicKey,privateKey);}  }
class C{  public void inviteParticipants(final GroupChatSession session,final Set<ContactId> participants) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("Adding " + Arrays.toString(participants.toArray()) + " to the session.");  }  int maxNumberOfAdditionalParticipants=session.getMaxNumberOfAdditionalParticipants();  if (maxNumberOfAdditionalParticipants < participants.size()) {    throw new ServerApiPermissionDeniedException("Invite of " + participants.size() + " participants failed, max number of additional participants: "+ maxNumberOfAdditionalParticipants+ "!");  }  session.inviteParticipants(participants);}  }
class C{  public static String decode(String s){  int n=s.length();  if ((n == 0) || (s.indexOf('%') < 0))   return s;  StringBuilder sb=new StringBuilder(n);  ByteBuffer bb=ByteBuffer.allocate(n);  CharBuffer cb=CharBuffer.allocate(n);  CharsetDecoder dec=ThreadLocalCoders.decoderFor("UTF-8").onMalformedInput(CodingErrorAction.REPORT).onUnmappableCharacter(CodingErrorAction.REPORT);  char c=s.charAt(0);  for (int i=0; i < n; ) {    assert c == s.charAt(i);    if (c != '%') {      sb.append(c);      if (++i >= n)       break;      c=s.charAt(i);      continue;    }    bb.clear();    int ui=i;    for (; ; ) {      assert (n - i >= 2);      try {        bb.put(unescape(s,i));      } catch (      NumberFormatException e) {        throw new IllegalArgumentException();      }      i+=3;      if (i >= n)       break;      c=s.charAt(i);      if (c != '%')       break;    }    bb.flip();    cb.clear();    dec.reset();    CoderResult cr=dec.decode(bb,cb,true);    if (cr.isError())     throw new IllegalArgumentException("Error decoding percent encoded characters");    cr=dec.flush(cb);    if (cr.isError())     throw new IllegalArgumentException("Error decoding percent encoded characters");    sb.append(cb.flip().toString());  }  return sb.toString();}  }
class C{  public ImportRewrite createImportRewrite(CompilationUnit astRoot){  fImportRewrite=StubUtility.createImportRewrite(document,astRoot,true);  return fImportRewrite;}  }
class C{  public final boolean checkTag(int identifier){  return this.constrId == identifier;}  }
class C{  public DrawerBuilder withStickyFooter(@NonNull ViewGroup stickyFooter){  this.mStickyFooterView=stickyFooter;  return this;}  }
class C{  public void passScoreAfterParsing(Text url,Content content,Parse parse){  parse.getData().getContentMeta().set(Nutch.SCORE_KEY,content.getMetadata().get(Nutch.SCORE_KEY));}  }
class C{  public static String[] lsDirectories(String directory) throws Exception {  String[] tmp=ls(directory);  ArrayList<String> files=new ArrayList<>();  for (  String s : tmp) {    if (isDirectory(directory + File.separator + s))     files.add(s);  }  return files.toArray(new String[files.size()]);}  }
class C{  public String[] suggestSimilar(String word,int numSug) throws IOException {  return this.suggestSimilar(word,numSug,null,null,SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);}  }
class C{  public void startFunctionExecution(boolean haveResult){  this._stats.incInt(_functionExecutionCallsId,1);  this._stats.incInt(_functionExecutionsRunningId,1);  if (haveResult) {    this._stats.incInt(_functionExecutionsHasResultRunningId,1);  }}  }
class C{  public static FlowValue flowValueFromWhen(When when){switch (when) {case ALWAYS:    return FlowValue.ALWAYS;case MAYBE:  return FlowValue.UNKNOWN;case NEVER:return FlowValue.NEVER;case UNKNOWN:return FlowValue.UNKNOWN;default :throw new IllegalStateException();}}  }
class C{  @Override public void doGenerate(Monitor monitor) throws IOException {  super.doGenerate(monitor);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.731 -0500",hash_original_method="C179D3525D5003A50B8C9C0361938568",hash_generated_method="E0441F7BCCFA454A6F9B18F539E83028") public void resetSync(){  Message response=sendMessageSynchronously(REQ_RESET);  if ((response != null) && (response.what == RSP_RESET)) {    if (DBG)     log("restSync ok");  } else {    log("restSync error response=" + response);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void dupX1(){  mv.visitInsn(Opcodes.DUP_X1);}  }
class C{  public double cdf(double x){  if (x == mu)   return 0.5; else   return (0.5) * (1 + ((x - mu) / Math.abs(x - mu)) * (1 - Math.exp(-Math.abs(x - mu) / beta)));}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.EXPORTED_VARIABLE_STATEMENT___IS_EXTERNAL:    return isExternal();case N4JSPackage.EXPORTED_VARIABLE_STATEMENT___GET_ANNOTATIONS:  return getAnnotations();case N4JSPackage.EXPORTED_VARIABLE_STATEMENT___IS_EXPORTED:return isExported();case N4JSPackage.EXPORTED_VARIABLE_STATEMENT___IS_EXPORTED_AS_DEFAULT:return isExportedAsDefault();case N4JSPackage.EXPORTED_VARIABLE_STATEMENT___GET_EXPORTED_NAME:return getExportedName();case N4JSPackage.EXPORTED_VARIABLE_STATEMENT___IS_TOPLEVEL:return isToplevel();}return super.eInvoke(operationID,arguments);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.286 -0500",hash_original_method="1BC95C43CEE0FFE1F6217DA26B59C5B9",hash_generated_method="26CC9F7BD5DA7915884E25F00AB2853B") private void nativeAddJavascriptInterface(int nativeFramePointer,Object obj,String interfaceName){  addTaint(nativeFramePointer);  addTaint(obj.getTaint());  addTaint(interfaceName.getTaint());}  }
class C{  String formatItemNum(int itemNum,char type){  String numStyle="1";  boolean uppercase=false;  String formattedNum;switch (type) {case '1':default :    formattedNum=String.valueOf(itemNum);  break;case 'A':uppercase=true;case 'a':formattedNum=formatAlphaNumerals(itemNum);break;case 'I':uppercase=true;case 'i':formattedNum=formatRomanNumerals(itemNum);}if (uppercase) {formattedNum=formattedNum.toUpperCase();}return formattedNum;}  }
class C{  protected int drawSelectedText(Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  g.setColor(selected);  Document doc=getDocument();  Segment s=SegmentCache.getSharedSegment();  doc.getText(p0,p1 - p0,s);  int ret=Utilities.drawTabbedText(this,s,x,y,g,this,p0);  SegmentCache.releaseSharedSegment(s);  return ret;}  }
class C{  private static int skipAlias(String stmt,int offset){  offset=ParseUtil.move(stmt,offset,0);  if (offset >= stmt.length())   return offset;switch (stmt.charAt(offset)) {case '\'':    return skipString(stmt,offset);case '"':  return skipString2(stmt,offset);case '`':return skipIdentifierEscape(stmt,offset);default :if (CharTypes.isIdentifierChar(stmt.charAt(offset))) {for (; offset < stmt.length() && CharTypes.isIdentifierChar(stmt.charAt(offset)); ++offset) ;return offset;}}return -1;}  }
class C{  public void addBlockDenyList(String pName){  Block blk=jmri.InstanceManager.getDefault(jmri.BlockManager.class).getBlock(pName);  NamedBeanHandle<Block> namedBlock=jmri.InstanceManager.getDefault(jmri.NamedBeanHandleManager.class).getNamedBeanHandle(pName,blk);  if (!blockDenyList.contains(namedBlock)) {    blockDenyList.add(namedBlock);  }}  }
class C{  public Configuration build(){  return new Configuration(this.encoding,this.decorator,this.codeBlockEmitter);}  }
class C{  @Override public boolean supportsOuterJoins(){  debugCodeCall("supportsOuterJoins");  return true;}  }
class C{  private static Pair<String,String> register(final String registerNodeValue){  return new Pair<String,String>(registerNodeValue,"C");}  }
class C{  int width(){  return ((num instanceof Double) || (num instanceof Long)) ? 2 : 1;}  }
class C{  private void adjustSizeForAbsolute(boolean isHor){  int[] curSizes=isHor ? width : height;  Cell absCell=grid.get(null);  if (absCell == null || absCell.compWraps.size() == 0)   return;  ArrayList<CompWrap> cws=absCell.compWraps;  int maxEnd=0;  for (int j=0, cwSz=absCell.compWraps.size(); j < cwSz + 3; j++) {    boolean doAgain=false;    for (int i=0; i < cwSz; i++) {      CompWrap cw=cws.get(i);      int[] stSz=getAbsoluteDimBounds(cw,0,isHor);      int end=stSz[0] + stSz[1];      if (maxEnd < end)       maxEnd=end;      if (linkTargetIDs != null)       doAgain|=setLinkedBounds(cw.comp,cw.cc,stSz[0],stSz[0],stSz[1],stSz[1],false);    }    if (doAgain == false)     break;    maxEnd=0;    clearGroupLinkBounds();  }  maxEnd+=LayoutUtil.getInsets(lc,isHor ? 3 : 2,!hasDocks()).getPixels(0,container,null);  if (curSizes[LayoutUtil.MIN] < maxEnd)   curSizes[LayoutUtil.MIN]=maxEnd;  if (curSizes[LayoutUtil.PREF] < maxEnd)   curSizes[LayoutUtil.PREF]=maxEnd;}  }
class C{  public boolean isSetCreateTime(){  return EncodingUtils.testBit(issetBitfield,CREATETIME_ISSET_ID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:27.608 -0400",hash_original_method="65EB69FC29F1EADADCBEB67EAE7AC562",hash_generated_method="E1D1D12DB1EFFE38BCB85989125300E3") public void buildSearchableList(){  HashMap<ComponentName,SearchableInfo> newSearchablesMap=new HashMap<ComponentName,SearchableInfo>();  ArrayList<SearchableInfo> newSearchablesList=new ArrayList<SearchableInfo>();  ArrayList<SearchableInfo> newSearchablesInGlobalSearchList=new ArrayList<SearchableInfo>();  final PackageManager pm=mContext.getPackageManager();  List<ResolveInfo> searchList;  final Intent intent=new Intent(Intent.ACTION_SEARCH);  searchList=pm.queryIntentActivities(intent,PackageManager.GET_META_DATA);  List<ResolveInfo> webSearchInfoList;  final Intent webSearchIntent=new Intent(Intent.ACTION_WEB_SEARCH);  webSearchInfoList=pm.queryIntentActivities(webSearchIntent,PackageManager.GET_META_DATA);  if (searchList != null || webSearchInfoList != null) {    int search_count=(searchList == null ? 0 : searchList.size());    int web_search_count=(webSearchInfoList == null ? 0 : webSearchInfoList.size());    int count=search_count + web_search_count;    for (int ii=0; ii < count; ii++) {      ResolveInfo info=(ii < search_count) ? searchList.get(ii) : webSearchInfoList.get(ii - search_count);      ActivityInfo ai=info.activityInfo;      if (newSearchablesMap.get(new ComponentName(ai.packageName,ai.name)) == null) {        SearchableInfo searchable=SearchableInfo.getActivityMetaData(mContext,ai);        if (searchable != null) {          newSearchablesList.add(searchable);          newSearchablesMap.put(searchable.getSearchActivity(),searchable);          if (searchable.shouldIncludeInGlobalSearch()) {            newSearchablesInGlobalSearchList.add(searchable);          }        }      }    }  }  List<ResolveInfo> newGlobalSearchActivities=findGlobalSearchActivities();  ComponentName newGlobalSearchActivity=findGlobalSearchActivity(newGlobalSearchActivities);  ComponentName newWebSearchActivity=findWebSearchActivity(newGlobalSearchActivity);synchronized (this) {    mSearchablesMap=newSearchablesMap;    mSearchablesList=newSearchablesList;    mSearchablesInGlobalSearchList=newSearchablesInGlobalSearchList;    mGlobalSearchActivities=newGlobalSearchActivities;    mCurrentGlobalSearchActivity=newGlobalSearchActivity;    mWebSearchActivity=newWebSearchActivity;  }}  }
class C{  private LinkedHashSet<DataFlavor> nativeToFlavorLookup(String nat){  LinkedHashSet<DataFlavor> flavors=getNativeToFlavor().get(nat);  if (nat != null && !disabledMappingGenerationKeys.contains(nat)) {    DataTransferer transferer=DataTransferer.getInstance();    if (transferer != null) {      LinkedHashSet<DataFlavor> platformFlavors=transferer.getPlatformMappingsForNative(nat);      if (!platformFlavors.isEmpty()) {        if (flavors != null) {          platformFlavors.addAll(flavors);        }        flavors=platformFlavors;      }    }  }  if (flavors == null && isJavaMIMEType(nat)) {    String decoded=decodeJavaMIMEType(nat);    DataFlavor flavor=null;    try {      flavor=new DataFlavor(decoded);    } catch (    Exception e) {      System.err.println("Exception \"" + e.getClass().getName() + ": "+ e.getMessage()+ "\"while constructing DataFlavor for: "+ decoded);    }    if (flavor != null) {      flavors=new LinkedHashSet<>(1);      getNativeToFlavor().put(nat,flavors);      flavors.add(flavor);      flavorsForNativeCache.remove(nat);      LinkedHashSet<String> natives=getFlavorToNative().get(flavor);      if (natives == null) {        natives=new LinkedHashSet<>(1);        getFlavorToNative().put(flavor,natives);      }      natives.add(nat);      nativesForFlavorCache.remove(flavor);    }  }  return (flavors != null) ? flavors : new LinkedHashSet<>(0);}  }
class C{  public Object remove(Object key){synchronized (table) {    MostRecentKeyValue recent=mostRecentKeyValue;    if ((recent != null) && (recent.key == key))     recent.value=null;    return table.remove(key);  }}  }
class C{  public RoaringDocIdSet build(){  flush();  return new RoaringDocIdSet(sets,cardinality);}  }
class C{  public Builder backgroundColor(int color){  backgroundColor=color;  return this;}  }
class C{  public static boolean inArea(Point point,Rect area,float offsetRatio){  int offset=(int)(area.width() * offsetRatio);  return point.x >= area.left - offset && point.x <= area.right + offset && point.y >= area.top - offset && point.y <= area.bottom + offset;}  }
class C{  public static void zoomToScreen(final ZyGraph graph){  checkArguments(graph);  ZoomFunctions.zoomToScreen(graph);}  }
class C{  public synchronized Runnable addAllocationThreshold(ThresholdDirection direction,long threshold,Runnable action){switch (direction) {case RISING:    return risingThresholds.put(threshold,action);case FALLING:  return fallingThresholds.put(threshold,action);}throw new AssertionError();}  }
class C{  public boolean hasPrimary(){  return super.hasAttribute(PRIMARY);}  }
class C{  protected Iterator createKeySetIterator(){  if (size() == 0) {    return EmptyIterator.INSTANCE;  }  return new KeySetIterator(this);}  }
class C{  public static int sizeOf(long value){  if (isLessThanUnsigned(value,253))   return 1; else   if (isLessThanUnsigned(value,65536))   return 3; else   if (isLessThanUnsigned(value,UnsignedInteger.MAX_VALUE.longValue()))   return 5; else   return 9;}  }
class C{  public static Date nextGivenMinuteDate(Date date,int minuteBase){  if (minuteBase < 0 || minuteBase > 59) {    throw new IllegalArgumentException("minuteBase must be >=0 and <= 59");  }  if (date == null) {    date=new Date();  }  Calendar c=Calendar.getInstance();  c.setTime(date);  c.setLenient(true);  if (minuteBase == 0) {    c.set(Calendar.HOUR_OF_DAY,c.get(Calendar.HOUR_OF_DAY) + 1);    c.set(Calendar.MINUTE,0);    c.set(Calendar.SECOND,0);    c.set(Calendar.MILLISECOND,0);    return c.getTime();  }  int minute=c.get(Calendar.MINUTE);  int arItr=minute / minuteBase;  int nextMinuteOccurance=minuteBase * (arItr + 1);  if (nextMinuteOccurance < 60) {    c.set(Calendar.MINUTE,nextMinuteOccurance);    c.set(Calendar.SECOND,0);    c.set(Calendar.MILLISECOND,0);    return c.getTime();  } else {    c.set(Calendar.HOUR_OF_DAY,c.get(Calendar.HOUR_OF_DAY) + 1);    c.set(Calendar.MINUTE,0);    c.set(Calendar.SECOND,0);    c.set(Calendar.MILLISECOND,0);    return c.getTime();  }}  }
class C{  @Override @Inline public ObjectReference traceObject(ObjectReference object){  if (RCBase.isRCObject(object)) {    if (RCHeader.testAndMark(object)) {      RCHeader.initRC(object);      processNode(object);    } else {      RCHeader.incRC(object);    }  }  return object;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize1=3;  int filterSize2=3;  double n;  double sum;  int[] dX1;  int[] dX2;  int[] dY1;  int[] dY2;  double[] weights1;  double[] weights2;  int midPoint;  int numPixelsInFilter1;  int numPixelsInFilter2;  boolean reflectAtBorders=false;  double sigma1=0;  double sigma2=0;  double recipRoot2PiTimesSigma1;  double recipRoot2PiTimesSigma2;  double twoSigmaSqr1;  double twoSigmaSqr2;  double zN, zFinal_1, zFinal_2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigma1=Double.parseDouble(args[i]);    } else     if (i == 3) {      sigma2=Double.parseDouble(args[i]);    } else     if (i == 4) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigma1 < 0.5) {    sigma1=0.5;  } else   if (sigma1 > 20) {    sigma1=20;  }  if (sigma2 < 0.5) {    sigma2=0.5;  } else   if (sigma2 > 20) {    sigma2=20;  }  if (sigma1 == sigma2) {    showFeedback("The two standard deviations cannot be equal.");    return;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    recipRoot2PiTimesSigma1=1 / (Math.sqrt(2 * Math.PI) * sigma1);    twoSigmaSqr1=2 * sigma1 * sigma1;    recipRoot2PiTimesSigma2=1 / (Math.sqrt(2 * Math.PI) * sigma2);    twoSigmaSqr2=2 * sigma2 * sigma2;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigma1 * Math.exp(-1 * (i * i) / twoSigmaSqr1);      if (weight <= 0.001) {        filterSize1=i * 2 + 1;        break;      }    }    if (filterSize1 % 2 == 0) {      filterSize1++;    }    if (filterSize1 < 3) {      filterSize1=3;    }    numPixelsInFilter1=filterSize1 * filterSize1;    dX1=new int[numPixelsInFilter1];    dY1=new int[numPixelsInFilter1];    weights1=new double[numPixelsInFilter1];    midPoint=(int)Math.floor(filterSize1 / 2) + 1;    a=0;    for (row=0; row < filterSize1; row++) {      for (col=0; col < filterSize1; col++) {        x=col - midPoint;        y=row - midPoint;        dX1[a]=x;        dY1[a]=y;        weight=recipRoot2PiTimesSigma1 * Math.exp(-1 * (x * x + y * y) / twoSigmaSqr1);        weights1[a]=weight;        a++;      }    }    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigma2 * Math.exp(-1 * (i * i) / twoSigmaSqr2);      if (weight <= 0.001) {        filterSize2=i * 2 + 1;        break;      }    }    if (filterSize2 % 2 == 0) {      filterSize2++;    }    if (filterSize2 < 3) {      filterSize2=3;    }    numPixelsInFilter2=filterSize2 * filterSize2;    dX2=new int[numPixelsInFilter2];    dY2=new int[numPixelsInFilter2];    weights2=new double[numPixelsInFilter2];    midPoint=(int)Math.floor(filterSize2 / 2) + 1;    a=0;    for (row=0; row < filterSize2; row++) {      for (col=0; col < filterSize2; col++) {        x=col - midPoint;        y=row - midPoint;        dX2[a]=x;        dY2[a]=y;        weight=recipRoot2PiTimesSigma2 * Math.exp(-1 * (x * x + y * y) / twoSigmaSqr2);        weights2[a]=weight;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          zFinal_1=0;          for (a=0; a < numPixelsInFilter1; a++) {            x=col + dX1[a];            y=row + dY1[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights1[a];              zFinal_1+=weights1[a] * zN;            }          }          zFinal_1=zFinal_1 / sum;          sum=0;          zFinal_2=0;          for (a=0; a < numPixelsInFilter2; a++) {            x=col + dX2[a];            y=row + dY2[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights2[a];              zFinal_2+=weights2[a] * zN;            }          }          zFinal_2=zFinal_2 / sum;          outputFile.setValue(row,col,zFinal_1 - zFinal_2);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int hashCode(){  return id;}  }
class C{  public void enableEvents(){  m_mTable.addDataStatusListener(this);}  }
class C{  public void addPromotion(final Promotion promotion,final PromotionCondition condition,final PromotionAction action){  final PromoTriplet promo=new PromoTripletImpl(promotion,condition,action);  promotionByCode.put(promotion.getCode(),promo);  List<List<PromoTriplet>> buckets=promotionBuckets.get(promotion.getPromoType());  if (buckets == null) {    buckets=new ArrayList<List<PromoTriplet>>();    buckets.add(new ArrayList<PromoTriplet>());    promotionBuckets.put(promotion.getPromoType(),buckets);  }  if (promotion.isCanBeCombined()) {    buckets.get(0).add(promo);  } else {    buckets.add(Arrays.asList(promo));  }}  }
class C{  public MiniAdmin(java.sql.Connection conn) throws SQLException {  if (conn == null) {    throw SQLError.createSQLException(Messages.getString("MiniAdmin.0"),SQLError.SQL_STATE_GENERAL_ERROR,null);  }  if (!(conn instanceof Connection)) {    throw SQLError.createSQLException(Messages.getString("MiniAdmin.1"),SQLError.SQL_STATE_GENERAL_ERROR,((com.mysql.jdbc.ConnectionImpl)conn).getExceptionInterceptor());  }  this.conn=(Connection)conn;}  }
class C{  public LocationOperand(Offset jtocOffset){  type=JTOC_ACCESS;  JTOCoffset=jtocOffset;}  }
class C{  private void parseMainVowel(){  if (!validViSyll)   return;  if (iCurPos > strSyllable.length() - 1) {    validViSyll=false;    return;  }  String strVowel="";  for (int i=iCurPos; i < strSyllable.length(); ++i) {    int idx=vnVowels.indexOf(strSyllable.charAt(i));    if (idx == -1)     break;    strVowel+=vnVowels.charAt((idx / 6) * 6);    if (tone.getValue() == TONE.NO_TONE.getValue())     tone=TONE.getTone(idx % 6);  }  Iterator iter=alMainVowels.iterator();  while (iter.hasNext()) {    String tempVowel=(String)iter.next();    if (strVowel.startsWith(tempVowel)) {      strMainVowel=tempVowel;      iCurPos+=tempVowel.length();      return;    }  }  validViSyll=false;  return;}  }
class C{  public BigDecimalMapperBuilder decimalDigits(Integer decimalDigits){  this.decimalDigits=decimalDigits;  return this;}  }
class C{  private void expandDirNodes(SpatialPrimitiveDistanceFunction<NV> distFunction,DeLiCluNode node1,DeLiCluNode node2){  if (LOG.isDebuggingFinest()) {    LOG.debugFinest("ExpandDirNodes: " + node1.getPageID() + " + "+ node2.getPageID());  }  int numEntries_1=node1.getNumEntries();  int numEntries_2=node2.getNumEntries();  for (int i=0; i < numEntries_1; i++) {    DeLiCluEntry entry1=node1.getEntry(i);    if (!entry1.hasUnhandled()) {      continue;    }    for (int j=0; j < numEntries_2; j++) {      DeLiCluEntry entry2=node2.getEntry(j);      if (!entry2.hasHandled()) {        continue;      }      double distance=distFunction.minDist(entry1,entry2);      SpatialObjectPair nodePair=new SpatialObjectPair(distance,entry1,entry2,true);      heap.add(nodePair);    }  }}  }
class C{  protected void print(Object msg){  if (!getSilent()) {    System.out.print(msg);  }}  }
class C{  public boolean removeTrace(final Trace trace){  final boolean r=traceList.remove(trace);  performAutoScale(false);  return r;}  }
class C{  private static MappedField checkAccessors(XML xml,Class<?> aClass,Field nestedField){  MappedField field=checkGetAccessor(xml,aClass,nestedField);  verifySetterMethods(aClass,field);  return field;}  }
class C{  public INDArray documentAsVector(@NonNull LabelledDocument document){  List<String> documentAsTokens=tokenizerFactory.create(document.getContent()).getTokens();  AtomicInteger cnt=new AtomicInteger(0);  for (  String word : documentAsTokens) {    if (vocabCache.containsWord(word))     cnt.incrementAndGet();  }  INDArray allWords=Nd4j.create(cnt.get(),lookupTable.layerSize());  cnt.set(0);  for (  String word : documentAsTokens) {    if (vocabCache.containsWord(word))     allWords.putRow(cnt.getAndIncrement(),lookupTable.vector(word));  }  INDArray mean=allWords.mean(0);  return mean;}  }
class C{  @Override public ImmutableMap<String,BlobMetaData> listBlobsByPrefix(String blobNamePrefix) throws IOException {  throw new UnsupportedOperationException("URL repository doesn't support this operation");}  }
class C{  @Override protected boolean isHostOverUtilized(PowerHost host){  PowerHostUtilizationHistory _host=(PowerHostUtilizationHistory)host;  double upperThreshold=0;  try {    upperThreshold=1 - getSafetyParameter() * getHostUtilizationMad(_host);  } catch (  IllegalArgumentException e) {    return getFallbackVmAllocationPolicy().isHostOverUtilized(host);  }  addHistoryEntry(host,upperThreshold);  double totalRequestedMips=0;  for (  Vm vm : host.getVmList()) {    totalRequestedMips+=vm.getCurrentRequestedTotalMips();  }  double utilization=totalRequestedMips / host.getTotalMips();  return utilization > upperThreshold;}  }
class C{  public int rawValue(){  return value;}  }
class C{  public static void guess_dc(MpegEncContext s,int[] dc_base,int dc_offset,int w,int h,int stride,int is_luma){  int b_x, b_y;  for (b_y=0; b_y < h; b_y++) {    for (b_x=0; b_x < w; b_x++) {      int color[]={1024,1024,1024,1024};      int distance[]={9999,9999,9999,9999};      int mb_index, error, j;      long guess, weight_sum;      mb_index=(b_x >> is_luma) + (b_y >> is_luma) * s.mb_stride;      error=s.error_status_table[mb_index];      if ((((s.current_picture.mb_type_base[s.current_picture.mb_type_offset + mb_index])) & (H264Context.MB_TYPE_16x16 | H264Context.MB_TYPE_16x8 | H264Context.MB_TYPE_8x16| H264Context.MB_TYPE_8x8)) != 0)       continue;      if (0 == (error & MpegEncContext.DC_ERROR))       continue;      for (j=b_x + 1; j < w; j++) {        int mb_index_j=(j >> is_luma) + (b_y >> is_luma) * s.mb_stride;        int error_j=s.error_status_table[mb_index_j];        int intra_j=(7 & (int)(s.current_picture.mb_type_base[s.current_picture.mb_type_offset + mb_index_j]));        if (intra_j == 0 || 0 == (error_j & MpegEncContext.DC_ERROR)) {          color[0]=dc_base[dc_offset + j + b_y * stride];          distance[0]=j - b_x;          break;        }      }      for (j=b_x - 1; j >= 0; j--) {        int mb_index_j=(j >> is_luma) + (b_y >> is_luma) * s.mb_stride;        int error_j=s.error_status_table[mb_index_j];        int intra_j=7 & (int)(s.current_picture.mb_type_base[s.current_picture.mb_type_offset + mb_index_j]);        if (intra_j == 0 || 0 == (error_j & MpegEncContext.DC_ERROR)) {          color[1]=dc_base[dc_offset + j + b_y * stride];          distance[1]=b_x - j;          break;        }      }      for (j=b_y + 1; j < h; j++) {        int mb_index_j=(b_x >> is_luma) + (j >> is_luma) * s.mb_stride;        int error_j=s.error_status_table[mb_index_j];        int intra_j=7 & (int)(s.current_picture.mb_type_base[s.current_picture.mb_type_offset + mb_index_j]);        if (intra_j == 0 || 0 == (error_j & MpegEncContext.DC_ERROR)) {          color[2]=dc_base[dc_offset + b_x + j * stride];          distance[2]=j - b_y;          break;        }      }      for (j=b_y - 1; j >= 0; j--) {        int mb_index_j=(b_x >> is_luma) + (j >> is_luma) * s.mb_stride;        int error_j=s.error_status_table[mb_index_j];        int intra_j=7 & (int)(s.current_picture.mb_type_base[s.current_picture.mb_type_offset + mb_index_j]);        if (intra_j == 0 || 0 == (error_j & MpegEncContext.DC_ERROR)) {          color[3]=dc_base[dc_offset + b_x + j * stride];          distance[3]=b_y - j;          break;        }      }      weight_sum=0;      guess=0;      for (j=0; j < 4; j++) {        long weight=256 * 256 * 256* 16 / distance[j];        guess+=weight * (long)color[j];        weight_sum+=weight;      }      guess=(guess + weight_sum / 2) / weight_sum;      dc_base[dc_offset + b_x + b_y * stride]=(int)guess;    }  }}  }
class C{  public void removeUnusableIndexConditions(){  for (int i=0; i < allFilters.length; i++) {    TableFilter f=allFilters[i];    setEvaluatable(f,true);    if (i < allFilters.length - 1 || f.getSession().getDatabase().getSettings().earlyFilter) {      f.optimizeFullCondition(false);    }    f.removeUnusableIndexConditions();  }  for (  TableFilter f : allFilters) {    setEvaluatable(f,false);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:04.617 -0500",hash_original_method="60FC0B8BE57466D21B9D49483A61B23F",hash_generated_method="F915E46001B4749FC6EB32B77CE142F9") @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (getClass() != obj.getClass()) {    return false;  }  BaseObj b=(BaseObj)obj;  return mID == b.mID;}  }
class C{  @SuppressWarnings("deprecation") public synchronized void disableEvents(int[] types){  assert types != null;  ctx.security().authorize(null,SecurityPermission.EVENTS_DISABLE,null);  boolean[] userRecordableEvts0=userRecordableEvts;  boolean[] recordableEvts0=recordableEvts;  int[] inclEvtTypes0=inclEvtTypes;  int[] userTypes=new int[types.length];  int userTypesLen=0;  for (  int type : types) {    if (binarySearch(cfgInclEvtTypes,type)) {      U.warn(log,"Can't disable event since it was enabled in configuration: " + U.gridEventName(type));      continue;    }    if (type < len) {      userRecordableEvts0[type]=false;      if (!isInternalEvent(type))       recordableEvts0[type]=false;    } else     userTypes[userTypesLen++]=type;  }  if (userTypesLen > 0) {    Arrays.sort(userTypes,0,userTypesLen);    userTypes=compact(userTypes,userTypesLen);    inclEvtTypes0=U.difference(inclEvtTypes0,inclEvtTypes0.length,userTypes,userTypesLen);  }  userRecordableEvts=userRecordableEvts0;  recordableEvts=recordableEvts0;  inclEvtTypes=inclEvtTypes0;}  }
class C{  public void testDeleteLockFile() throws IOException {  try (Directory dir=getDirectory(createTempDir())){    assumeFalse("we must be able to delete an open file",TestUtil.hasWindowsFS(dir));    Lock lock=dir.obtainLock("test.lock");    lock.ensureValid();    dir.deleteFile("test.lock");    expectThrows(IOException.class,null);    IOUtils.closeWhileHandlingException(lock);  } }  }
class C{  public boolean addAll(int index,RoleList roleList) throws IllegalArgumentException, IndexOutOfBoundsException {  if (roleList == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  return (super.addAll(index,roleList));}  }
class C{  protected void update(IInstance ins,IStructure gold,IStructure prediction,WeightVector w,WeightVector avg,int epoch,int count){  IFeatureVector goldFeatures=featureGenerator.getFeatureVector(ins,gold);  IFeatureVector predictedFeatures=featureGenerator.getFeatureVector(ins,prediction);  IFeatureVector update=goldFeatures.difference(predictedFeatures);  double learningRate=getLearningRate(epoch,count);  w.addSparseFeatureVector(update,learningRate);  avg.addSparseFeatureVector(update,count * learningRate);}  }
class C{  public s addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  public void addLicenseFeature(LicenseFeature licenseFeature){  if (licenseFeatures == null) {    licenseFeatures=new ArrayList<LicenseFeature>();  }  licenseFeatures.add(licenseFeature);}  }
class C{  public TcpDiscoveryNode node(){  return node;}  }
class C{  public void addMessage(String message){  messages.addLast(message);  if (messages.size() > MAX_HISTORY) {    messages.removeFirst();  }  pointer=messages.size();}  }
class C{  public static boolean isBase64(final String base64){  return isBase64(getBytesUtf8(base64));}  }
class C{  private void testIsoYearJanuary1thThursday() throws Exception {  assertEquals(2008,getIsoYear(parse("2008-12-28")));  assertEquals(2009,getIsoYear(parse("2008-12-29")));  assertEquals(2009,getIsoYear(parse("2008-12-30")));  assertEquals(2009,getIsoYear(parse("2008-12-31")));  assertEquals(2009,getIsoYear(parse("2009-01-01")));  assertEquals(2009,getIsoYear(parse("2009-01-02")));  assertEquals(2009,getIsoYear(parse("2009-01-03")));  assertEquals(2009,getIsoYear(parse("2009-01-04")));}  }
class C{  public GeometryComparator(){  super();}  }
class C{  private static void writeInstallInfo(){  if (fgInstallTimeMap != null) {    OutputStream stream=null;    try {      Document doc=newDocument();      Element root=doc.createElement("dirs");      doc.appendChild(root);      Map.Entry<String,Long> entry=null;      Element e=null;      String key=null;      for (Iterator<Map.Entry<String,Long>> i=fgInstallTimeMap.entrySet().iterator(); i.hasNext(); ) {        entry=i.next();        key=entry.getKey();        if (fgLibraryInfoMap == null || fgLibraryInfoMap.containsKey(key)) {          e=doc.createElement("entry");          root.appendChild(e);          e.setAttribute("loc",key);          e.setAttribute("stamp",entry.getValue().toString());        }      }      String xml=serializeDocument(doc);      IPath libPath=getDefault().getStateLocation();      libPath=libPath.append(".install.xml");      File file=libPath.toFile();      if (!file.exists()) {        file.createNewFile();      }      stream=new BufferedOutputStream(new FileOutputStream(file));      stream.write(xml.getBytes("UTF8"));    } catch (    IOException e) {      log(e);    }catch (    CoreException e) {      log(e);    } finally {      if (stream != null) {        try {          stream.close();        } catch (        IOException e1) {        }      }    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputName=null;  String workingDirectory=null;  WhiteboxRasterInfo[] images=null;  int nCols=0;  int nRows=0;  double z;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[] imageAverages;  double[] imageTotals;  double[] imageNumPixels;  double[][] data;  double[] noDataValues;  String pathSep=File.separator;  boolean standardizedPCA=false;  int numberOfComponentImagesToCreate=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputName=args[1];  if (outputName.toLowerCase().contains(".dep")) {    outputName=outputName.replace(".dep","");  }  standardizedPCA=Boolean.parseBoolean(args[2]);  if (args[3].toLowerCase().contains("not")) {    numberOfComponentImagesToCreate=9999999;  } else {    numberOfComponentImagesToCreate=Integer.parseInt(args[3]);  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    images=new WhiteboxRasterInfo[numImages];    imageAverages=new double[numImages];    imageTotals=new double[numImages];    imageNumPixels=new double[numImages];    noDataValues=new double[numImages];    data=new double[numImages][];    for (i=0; i < numImages; i++) {      images[i]=new WhiteboxRasterInfo(imageFiles[i]);      noDataValues[i]=images[i].getNoDataValue();      if (i == 0) {        nCols=images[i].getNumberColumns();        nRows=images[i].getNumberRows();        File file=new File(imageFiles[i]);        workingDirectory=file.getParent();      } else {        if (images[i].getNumberColumns() != nCols || images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }    }    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        for (i=0; i < numImages; i++) {          if (data[i][col] != noDataValues[i]) {            imageTotals[i]+=data[i][col];            imageNumPixels[i]++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Calculating image means:",progress);    }    for (i=0; i < numImages; i++) {      imageAverages[i]=imageTotals[i] / imageNumPixels[i];    }    double[] imageTotalDeviation=new double[numImages];    double[][] covariances=new double[numImages][numImages];    double[][] correlationMatrix=new double[numImages][numImages];    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        for (i=0; i < numImages; i++) {          if (data[i][col] != noDataValues[i]) {            imageTotalDeviation[i]+=(data[i][col] - imageAverages[i]) * (data[i][col] - imageAverages[i]);            for (a=0; a < numImages; a++) {              if (data[a][col] != noDataValues[a]) {                covariances[i][a]+=(data[i][col] - imageAverages[i]) * (data[a][col] - imageAverages[a]);              }            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Calculating covariances:",progress);    }    for (i=0; i < numImages; i++) {      for (a=0; a < numImages; a++) {        correlationMatrix[i][a]=covariances[i][a] / (Math.sqrt(imageTotalDeviation[i] * imageTotalDeviation[a]));      }    }    for (i=0; i < numImages; i++) {      for (a=0; a < numImages; a++) {        covariances[i][a]=covariances[i][a] / (imageNumPixels[i] - 1);      }    }    Matrix cov=null;    if (!standardizedPCA) {      cov=new Matrix(covariances);    } else {      cov=new Matrix(correlationMatrix);    }    EigenvalueDecomposition eigen=cov.eig();    double[] eigenvalues;    Matrix eigenvectors;    SortedSet<PrincipalComponent> principalComponents;    eigenvalues=eigen.getRealEigenvalues();    eigenvectors=eigen.getV();    double[][] vecs=eigenvectors.getArray();    int numComponents=eigenvectors.getColumnDimension();    principalComponents=new TreeSet<PrincipalComponent>();    for (i=0; i < numComponents; i++) {      double[] eigenvector=new double[numComponents];      for (j=0; j < numComponents; j++) {        eigenvector[j]=vecs[j][i];      }      principalComponents.add(new PrincipalComponent(eigenvalues[i],eigenvector));    }    double totalEigenvalue=0;    for (i=0; i < numComponents; i++) {      totalEigenvalue+=eigenvalues[i];    }    double[][] explainedVarianceArray=new double[numComponents][2];    j=0;    for (    PrincipalComponent pc : principalComponents) {      explainedVarianceArray[j][0]=pc.eigenValue / totalEigenvalue * 100.0;      if (j == 0) {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0];      } else {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0] + explainedVarianceArray[j - 1][1];      }      j++;    }    DecimalFormat df1=new DecimalFormat("0.00");    DecimalFormat df2=new DecimalFormat("0.0000");    DecimalFormat df3=new DecimalFormat("0.000000");    String ret="Principal Component Analysis Report:\n\n";    ret+="Component\tExplained Var.\tCum. %\tEigenvalue\tEigenvector\n";    j=0;    for (    PrincipalComponent pc : principalComponents) {      String explainedVariance=df1.format(explainedVarianceArray[j][0]);      String explainedCumVariance=df1.format(explainedVarianceArray[j][1]);      double[] eigenvector=pc.eigenVector.clone();      ret+=(j + 1) + "\t" + explainedVariance+ "\t"+ explainedCumVariance+ "\t"+ df2.format(pc.eigenValue)+ "\t";      String eigenvec="[";      for (i=0; i < numComponents; i++) {        if (i < numComponents - 1) {          eigenvec+=df3.format(eigenvector[i]) + ", ";        } else {          eigenvec+=df3.format(eigenvector[i]);        }      }      eigenvec+="]";      ret+=eigenvec + "\n";      if (j < numberOfComponentImagesToCreate) {        String outputHeader=workingDirectory + pathSep + outputName+ "_comp"+ (j + 1)+ ".dep";        WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,0);        output.setDataScale(DataScale.CONTINUOUS);        for (row=0; row < nRows; row++) {          for (i=0; i < numImages; i++) {            data[i]=images[i].getRowValues(row);          }          for (col=0; col < nCols; col++) {            if (data[0][col] != noDataValues[0]) {              z=0;              for (i=0; i < numImages; i++) {                z+=data[i][col] * eigenvector[i];              }              output.setValue(row,col,z);            } else {              output.setValue(row,col,noDataValues[0]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (nRows - 1));          updateProgress("Creating component images:",progress);        }        output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        output.addMetadataEntry("Created on " + new Date());        output.addMetadataEntry("Principal Component Num.: " + (j + 1));        output.addMetadataEntry("Eigenvalue: " + pc.eigenValue);        eigenvec="[";        for (i=0; i < numComponents; i++) {          if (i < numComponents - 1) {            eigenvec+=eigenvector[i] + ", ";          } else {            eigenvec+=eigenvector[i];          }        }        eigenvec+="]";        output.addMetadataEntry("Eigenvector: " + eigenvec);        if (!standardizedPCA) {          output.addMetadataEntry("PCA Type: unstandardized");        } else {          output.addMetadataEntry("PCA Type: standardized");        }        output.close();      }      j++;    }    ret+="\nFactor Loadings:\n";    ret+="\t\tComponent\n\t";    for (i=0; i < numComponents; i++) {      ret+=(i + 1) + "\t";    }    ret+="\n";    double loading=0;    if (!standardizedPCA) {      for (i=0; i < numImages; i++) {        ret+="band" + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev)) / Math.sqrt(covariances[i][i]);          ret+=df1.format(loading) + "\t";        }        ret+="\n";      }    } else {      for (i=0; i < numImages; i++) {        ret+="band" + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev));          ret+=df1.format(loading) + "\t";        }        ret+="\n";      }    }    for (i=0; i < numImages; i++) {      images[i].close();    }    returnData(ret);    ScreePlot plot=new ScreePlot(explainedVarianceArray);    returnData(plot);    if (numComponents > 3) {      for (i=2; i >= 0; i--) {        if (i < numberOfComponentImagesToCreate) {          String outputHeader=workingDirectory + pathSep + outputName+ "_comp"+ (i + 1)+ ".dep";          returnData(outputHeader);        }      }    } else {      for (i=numComponents - 1; i >= 0; i--) {        if (i < numberOfComponentImagesToCreate) {          String outputHeader=workingDirectory + pathSep + outputName+ "_comp"+ (i + 1)+ ".dep";          returnData(outputHeader);        }      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void disallowIn(){  Rectangle r=new Rectangle(0,0,Integer.MAX_VALUE,Integer.MAX_VALUE);  arrivingBarriers.add(r);}  }
class C{  public void testRadix24Pos(){  String value="287628a883451bg80ijhk0865c67e8d7ff20";  int radix=24;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  public MaxProjectionExpression(boolean isDistinct){  this.distinct=isDistinct;}  }
class C{  private void executeDownload(State state,AndroidHttpClient client,HttpGet request) throws StopRequest, RetryDownload {  InnerState innerState=new InnerState();  byte data[]=new byte[Constants.BUFFER_SIZE];  checkPausedOrCanceled(state);  setupDestinationFile(state,innerState);  addRequestHeaders(innerState,request);  checkConnectivity(state);  mNotification.onDownloadStateChanged(IDownloaderClient.STATE_CONNECTING);  HttpResponse response=sendRequest(state,client,request);  handleExceptionalStatus(state,innerState,response);  if (Constants.LOGV) {    Log.v(Constants.TAG,"received response for " + mInfo.mUri);  }  processResponseHeaders(state,innerState,response);  InputStream entityStream=openResponseEntity(state,response);  mNotification.onDownloadStateChanged(IDownloaderClient.STATE_DOWNLOADING);  transferData(state,innerState,data,entityStream);}  }
class C{  public void delete() throws IOException, ServiceException {  if (state.service == null) {    throw new ServiceException(CoreErrorDomain.ERR.entryNotAssociated);  }  Link editLink=getEditLink();  if (editLink == null) {    throw new UnsupportedOperationException("Entry cannot be deleted");  }  URL editUrl=new URL(editLink.getHref());  state.service.delete(editUrl,GDataProtocol.isWeakEtag(state.etag) ? null : state.etag);}  }
class C{  public ColumnReverseDictionaryInfo(){  boolean useXXHash=Boolean.valueOf(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.ENABLE_XXHASH,CarbonCommonConstants.ENABLE_XXHASH_DEFAULT));  if (useXXHash) {    xxHash32=XXHashFactory.fastestInstance().hash32();  }}  }
class C{  public static boolean fileCopy(File sourceFile,File outputFile) throws IOException, Exception {  log.info("Copying file " + sourceFile.getCanonicalPath() + " to "+ outputFile.getCanonicalPath());  return writeBinaryFile(readBinaryFile(sourceFile),outputFile);}  }
class C{  @Override public void endWindow(){  map.clear();}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void putChild(String name,FieldVector vector){  putVector(name,vector);}  }
class C{  public void iconifyFrame(final JInternalFrame f){  JInternalFrame.JDesktopIcon desktopIcon;  Container c;  desktopIcon=f.getDesktopIcon();  final Rectangle r=getBoundsForIconOf(f);  desktopIcon.setBounds(r.x,r.y,r.width,r.height);  c=f.getParent();  if (c == null)   return;  c.remove(f);  addIcon(c,desktopIcon);  c.repaint(f.getX(),f.getY(),f.getWidth(),f.getHeight());}  }
class C{  public double nextDouble(){  return nextDouble(this.my_k);}  }
class C{  @SuppressWarnings("rawtypes") public static void createCurationDocumentContent(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();    String entryName=normalizeEntryName(entry);    if (entryName.startsWith(CURATION_AS_SERIALISED_CAS)) {      String fileName=entryName.replace(CURATION_AS_SERIALISED_CAS,"");      String username=FilenameUtils.getBaseName(fileName).replace(".ser","");      fileName=fileName.replace(FilenameUtils.getName(fileName),"").replace("/","");      de.tudarmstadt.ukp.clarin.webanno.model.SourceDocument sourceDocument=aRepository.getSourceDocument(aProject,fileName);      File annotationFilePath=aRepository.getCasFile(sourceDocument,username);      FileUtils.copyInputStreamToFile(zip.getInputStream(entry),annotationFilePath);      LOG.info("Imported curation document content for user [" + username + "] for source document ["+ sourceDocument.getId()+ "] in project ["+ aProject.getName()+ "] with id ["+ aProject.getId()+ "]");    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SRuntimePackage.EXECUTION_EVENT__RAISED:    return isRaised();case SRuntimePackage.EXECUTION_EVENT__SCHEDULED:  return isScheduled();case SRuntimePackage.EXECUTION_EVENT__DIRECTION:return getDirection();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public Object invokeMethod(String methodName,Object args){  Map attributes=findAttributes(args);  for (Iterator<Map.Entry> iter=attributes.entrySet().iterator(); iter.hasNext(); ) {    Map.Entry entry=iter.next();    String key=String.valueOf(entry.getKey());    if (key.startsWith("xmlns:")) {      String prefix=key.substring(6);      String uri=String.valueOf(entry.getValue());      namespace(uri,prefix);      iter.remove();    }  }  return super.invokeMethod(methodName,args);}  }
class C{  OFSwitchHandshakeHandler(@Nonnull IOFConnectionBackend connection,@Nonnull OFFeaturesReply featuresReply,@Nonnull IOFSwitchManager switchManager,@Nonnull RoleManager roleManager,@Nonnull Timer timer){  Preconditions.checkNotNull(connection,"connection");  Preconditions.checkNotNull(featuresReply,"featuresReply");  Preconditions.checkNotNull(switchManager,"switchManager");  Preconditions.checkNotNull(roleManager,"roleManager");  Preconditions.checkNotNull(timer,"timer");  Preconditions.checkArgument(connection.getAuxId().equals(OFAuxId.MAIN),"connection must be MAIN connection but is %s",connection);  this.switchManager=switchManager;  this.roleManager=roleManager;  this.mainConnection=connection;  this.auxConnections=new ConcurrentHashMap<OFAuxId,IOFConnectionBackend>();  this.featuresReply=featuresReply;  this.timer=timer;  this.switchManagerCounters=switchManager.getCounters();  this.factory=OFFactories.getFactory(featuresReply.getVersion());  this.roleChanger=new RoleChanger(DEFAULT_ROLE_TIMEOUT_NS);  setState(new InitState());  this.pendingPortStatusMsg=new ArrayList<OFPortStatus>();  connection.setListener(this);}  }
class C{  @RequestMapping(value="/_search/weights/{query}",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public List<Weight> search(@PathVariable String query){  return StreamSupport.stream(weightSearchRepository.search(queryString(query)).spliterator(),false).collect(Collectors.toList());}  }
class C{  private void testSubmitCommand(int live,int total) throws Throwable {  createServers(live,total);  CopycatClient client=createClient();  client.submit(new TestCommand()).thenAccept(null);  await(30000);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void updateFileProtectionParamsForVirtualPool(VirtualPool virtualPool,FileVirtualPoolProtectionUpdateParam param){  if (param != null) {    if (param.getScheduleSnapshots() != null) {      virtualPool.setScheduleSnapshots(param.getScheduleSnapshots());    } else {      virtualPool.setScheduleSnapshots(false);    }    if (param.getSnapshots() != null) {      if (param.getSnapshots().getMaxSnapshots() != null) {        virtualPool.setMaxNativeSnapshots(param.getSnapshots().getMaxSnapshots());      } else {        virtualPool.setMaxNativeSnapshots(VirtualPool.MAX_DISABLED);      }    }    if (param.getReplicationParam() != null) {      if (param.getReplicationParam().getAddRemoteCopies() == null && param.getReplicationParam().getRemoveRemoteCopies() == null && param.getReplicationParam().getSourcePolicy() == null) {        deleteReplicationParams(virtualPool,param);      } else {        updateReplicationParams(virtualPool,param);      }    }  }}  }
class C{  @Deprecated public static <V1,V2,V3>GridTuple3<V1,V2,V3> t3(){  return new GridTuple3<>();}  }
class C{  public static char[] utf2chars(byte[] src){  return utf2chars(src,0,src.length);}  }
class C{  @SuppressWarnings("unchecked") public Frame(final int nLocals,final int nStack){  this.values=(V[])new Value[nLocals + nStack];  this.locals=nLocals;}  }
class C{  private ObjectAnimator createEnteringFadeAnimator(){  ObjectAnimator fadeInAnimator=ObjectAnimator.ofFloat(mMainContainer,"alpha",0.0f,1.0f);  return fadeInAnimator;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.789 -0400",hash_original_method="D5DE3D5D9AF246B7B9A0720792C74103",hash_generated_method="59B0806481D8C8BA3E3B25E052B9470F") public boolean accept(File file){  return accept(file.getParentFile(),file.getName());}  }
class C{  public static boolean isBinaryInstruction(final String mnemonic){  return mnemonic.equals(ReilHelpers.OPCODE_ADD) || mnemonic.equals(ReilHelpers.OPCODE_SUB) || mnemonic.equals(ReilHelpers.OPCODE_MUL)|| mnemonic.equals(ReilHelpers.OPCODE_DIV)|| mnemonic.equals(ReilHelpers.OPCODE_BSH)|| mnemonic.equals(ReilHelpers.OPCODE_AND)|| mnemonic.equals(ReilHelpers.OPCODE_OR)|| mnemonic.equals(ReilHelpers.OPCODE_XOR);}  }
class C{  public static void closeBufferedReader(BufferedReader stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing BufferedReader",e);    }  }}  }
class C{  public static void println(char x){  out.println(x);}  }
class C{  public void store(double value,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  private static boolean isLineBreak(final char c){  return c == LF || c == CR;}  }
class C{  public int read() throws IOException {  if (mTmpBuf == null) {    mTmpBuf=new char[1];  }  if (read(mTmpBuf,0,1) < 1) {    return -1;  }  return mTmpBuf[0];}  }
class C{  void validateNumber(int i,int ofs,String name,int min,int max) throws ParseException {  if (i < min || i > max) {    throwInvalid(name,ofs);  }}  }
class C{  protected void clearOutEvents(){}  }
class C{  protected final synchronized boolean isDoneImpl(Object key){  Object o=map.get(key);  if (o == null)   return false;  SoftReference sr=(SoftReference)o;  o=sr.get();  if (o != null)   return true;  clearImpl(key);  return false;}  }
class C{  @Override public boolean hasNext(){  if (open && src.hasNext())   return true;  close();  return false;}  }
class C{  private void emitLines(final HtmlEscapeStringBuilder out,final Block block){switch (block.type) {case FENCED_CODE:    this.emitCodeLines(out,block.lines,block.meta);  break;case PARAGRAPH:this.emitMarkedLines(out,block.lines);break;default :this.emitMarkedLines(out,block.lines);break;}}  }
class C{  public boolean hasDefinition(){  return hasExtension(Definition.class);}  }
class C{  protected DOMException createDOMException(short type,String key,Object[] args){  return element.createDOMException(type,key,args);}  }
class C{  private static boolean isMultSelectNode(Element child){  return (child.getAttributeValue(null,ATTRIBUTE_MULTIPLE) != null && child.getAttributeValue(null,ATTRIBUTE_MULTIPLE).equals("1"));}  }
class C{  public FBResultSetNotUpdatableException(){  this("Underlying ResultSet is not updatable.");}  }
class C{  protected CCShakyTiles3D(int range,boolean sz,ccGridSize gridSize,float d){  super(gridSize,d);  randrange=range;  shakeZ=sz;}  }
class C{  @Override public int hashCode(){  return intValue;}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  public OutgoingMessageEnvelope(SystemStream systemStream,String keySerializerName,String messageSerializerName,Object partitionKey,Object key,Object message){  this.systemStream=systemStream;  this.keySerializerName=keySerializerName;  this.messageSerializerName=messageSerializerName;  this.partitionKey=partitionKey;  this.key=key;  this.message=message;}  }
class C{  public static List<ShareACL> queryShareACLs(String shareName,URI fs,DbClient dbClient){  List<ShareACL> aclList=new ArrayList<ShareACL>();  ContainmentConstraint containmentConstraint=ContainmentConstraint.Factory.getFileCifsShareAclsConstraint(fs);  List<CifsShareACL> shareAclList=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,CifsShareACL.class,containmentConstraint);  if (shareAclList != null) {    Iterator<CifsShareACL> shareAclIter=shareAclList.iterator();    while (shareAclIter.hasNext()) {      CifsShareACL dbShareAcl=shareAclIter.next();      if (shareName.equals(dbShareAcl.getShareName())) {        ShareACL acl=new ShareACL();        acl.setShareName(shareName);        acl.setDomain(dbShareAcl.getDomain());        acl.setUser(dbShareAcl.getUser());        acl.setGroup(dbShareAcl.getGroup());        acl.setPermission(dbShareAcl.getPermission());        acl.setFileSystemId(fs);        aclList.add(acl);      }    }  }  return aclList;}  }
class C{  public int hashCode(){  long bits=1L;  bits=31L * bits + VecMathUtil.floatToIntBits(x);  bits=31L * bits + VecMathUtil.floatToIntBits(y);  bits=31L * bits + VecMathUtil.floatToIntBits(width);  bits=31L * bits + VecMathUtil.floatToIntBits(height);  return (int)(bits ^ (bits >> 32));}  }
class C{  public ExceptionWithContext(String message,Object... formatArgs){  this(null,message,formatArgs);}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof Sort))   return false;  final Sort other=(Sort)o;  return Arrays.equals(this.fields,other.fields);}  }
class C{  @Inject public DaemonRunning(final CassandraExecutor executor){  this.executor=executor;}  }
class C{  public Matrix solve(Matrix B,ExecutorService threadpool){  Matrix y=forwardSub(L,B,threadpool);  Matrix x=backSub(L,y,threadpool);  return x;}  }
class C{  public static IntsRef deepCopyOf(IntsRef other){  return new IntsRef(Arrays.copyOfRange(other.ints,other.offset,other.offset + other.length),0,other.length);}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  @Override public boolean containsKey(Object key){  Entry<K,V> m=getEntry(key);  return m != null;}  }
class C{  private static HttpHost[] toChain(HttpHost proxy){  if (proxy == null)   return null;  return new HttpHost[]{proxy};}  }
class C{  @Override public double classifyInstance(Instance inst) throws Exception {  Rule temp;  double prediction=0;  boolean success=false;  m_replaceMissing.input(inst);  inst=m_replaceMissing.output();  m_nominalToBinary.input(inst);  inst=m_nominalToBinary.output();  m_removeUseless.input(inst);  inst=m_removeUseless.output();  if (m_ruleSet == null) {    throw new Exception("Classifier has not been built yet!");  }  if (!m_generateRules) {    temp=m_ruleSet.get(0);    return temp.classifyInstance(inst);  }  boolean cont;  int i;  for (i=0; i < m_ruleSet.size(); i++) {    cont=false;    temp=m_ruleSet.get(i);    try {      prediction=temp.classifyInstance(inst);      success=true;    } catch (    Exception e) {      cont=true;    }    if (!cont) {      break;    }  }  if (!success) {    System.out.println("Error in predicting (DecList)");  }  return prediction;}  }
class C{  public static String readSetting(final AbstractSQLProvider provider,final INaviProject project,final String key) throws CouldntLoadDataException {  Preconditions.checkNotNull(project,"IE00537: Project argument can not be null");  Preconditions.checkNotNull(key,"IE00538: Key argument can not be null");  Preconditions.checkArgument(project.inSameDatabase(provider),"IE00539: Project is not part of this database");  return readSetting(provider.getConnection(),project.getConfiguration().getId(),key,"project_id",CTableNames.PROJECT_SETTINGS_TABLE);}  }
class C{  public TMethod method(boolean _abstract){  return (TMethod)((_abstract) ? members[ABSTRACT_OFFSET + METHOD] : members[METHOD]);}  }
class C{  public void reconnect(){  if (opened && !allowConnectionRecovery) {    return;  }  reconnectwait thread=new reconnectwait();  thread.setName("Connection Recovery " + getHostName());  thread.start();  try {    thread.join();  } catch (  InterruptedException e) {    log.error("Unable to join to the reconnection thread");  }  if (!opened) {    log.error("Failed to re-establish connectivity");  } else {    resetupConnection();    log.info("Reconnected to " + getHostName());  }}  }
class C{  public GenericAttr(String name,byte data[]){  attr_name=new AsciiCP(name);  this.data=data;}  }
class C{  void serviceTypeAdded(ServiceEvent event){  if (null == _addedTypes.putIfAbsent(event.getType(),event.getType())) {    this.getListener().serviceTypeAdded(event);  } else {    logger.finest("Service Type Added called for a service type already added: " + event);  }}  }
class C{  public static boolean[] booleans(boolean... elements){  return elements;}  }
class C{  public static VcfReader openVcfReader(File f) throws IOException {  final boolean stdin=CommonFlags.isStdio(f);  return new VcfReader(new BufferedReader(new InputStreamReader(stdin ? System.in : FileUtils.createInputStream(f,true))));}  }
class C{  private void addErrorMessage(String message){  if (message != null) {    m_errorMessages.append(message);  }  m_errorMessages.append("\r\n");}  }
class C{  public static void declareEntryExtensions(ExtensionProfile extProfile){  extProfile.declare(BaseEntry.class,BatchId.getDefaultDescription());  extProfile.declare(BaseEntry.class,BatchOperation.getDefaultDescription());  extProfile.declare(BaseEntry.class,BatchInterrupted.getDefaultDescription());  extProfile.declare(BaseEntry.class,BatchStatus.getDefaultDescription());}  }
class C{  static protected void removeIconMap(String type,String family){  if (log.isDebugEnabled()) {    log.debug("removeIconMap for family \"" + family + " \" in type \""+ type+ "\"");  }  _iconMaps.get(type).remove(family);  ImageIndexEditor.indexChanged(true);  if (log.isDebugEnabled()) {    HashMap<String,HashMap<String,NamedIcon>> families=getFamilyMaps(type);    if (families != null && families.size() > 0) {      Iterator<String> it=families.keySet().iterator();      while (it.hasNext()) {        log.debug("removeIconMap remaining Keys: family \"" + it.next() + " \" in type \""+ type+ "\"");      }    }  }}  }
class C{  public Country detectCountry(){  try {    return mService.detectCountry();  } catch (  RemoteException e) {    Log.e(TAG,"detectCountry: RemoteException",e);    return null;  }}  }
class C{  public SamlTokenImpl(String xml,JAXBContext jaxbContext) throws InvalidTokenException {  this("XML",parseTokenXmlToDom(xml),jaxbContext,false);}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Cache affinity example started.");    CacheConfiguration<Integer,String> cfg=new CacheConfiguration<>();    cfg.setCacheMode(CacheMode.PARTITIONED);    cfg.setName(CACHE_NAME);    try (IgniteCache<Integer,String> cache=ignite.getOrCreateCache(cfg)){      for (int i=0; i < KEY_CNT; i++)       cache.put(i,Integer.toString(i));      visitUsingAffinityRun();      visitUsingMapKeysToNodes();    }  finally {      ignite.destroyCache(CACHE_NAME);    }  } }  }
class C{  public static Bitmap scaleDownBitmap(Context ctx,Bitmap source,int newHeight){  final float densityMultiplier=Utils.getDensityMultiplier(ctx);  int h=(int)(newHeight * densityMultiplier);  int w=(int)(h * source.getWidth() / ((double)source.getHeight()));  Bitmap photo=Bitmap.createScaledBitmap(source,w,h,true);  return photo;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.741 -0500",hash_original_method="3DD6E391932A9CCCB1C61486572B8B95",hash_generated_method="79218625F7A38328686D86781DBE3551") public void focusIn(View view){synchronized (mH) {    focusInLocked(view);  }}  }
class C{  @Override public void run(){  mWrappedTask.run();  if (mImageBackend.decrementTaskDone(mImageShadowTask)) {    Runnable doneRunnable=mImageShadowTask.getRunnableWhenDone();    if (doneRunnable != null) {      if (mWrappedTask.mExecutor == null) {        doneRunnable.run();      } else {        mWrappedTask.mExecutor.execute(doneRunnable);      }    }  }}  }
class C{  @DSComment("no input, no suspicious activity to abstract method") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:12.125 -0500",hash_original_method="FDB67D996B87AFA9828831030DD04774",hash_generated_method="CF201CA93963A12DA7AA2B504A495C37") public static XmlPullParserFactory newInstance() throws XmlPullParserException {  return newInstance(null,null);}  }
class C{  private void startSpider(){  spider=new Spider(id,extension,spiderParams,extension.getModel().getOptionsParam().getConnectionParam(),extension.getModel(),this.scanContext);  spider.addSpiderListener(this);  for (  SpiderListener l : pendingSpiderListeners) {    spider.addSpiderListener(l);  }  spider.setExcludeList(extension.getExcludeList());  addSeeds();  spider.setScanAsUser(scanUser);  if (this.customSpiderParsers != null) {    for (    SpiderParser sp : this.customSpiderParsers) {      spider.addCustomParser(sp);    }  }  if (this.customFetchFilters != null) {    for (    FetchFilter ff : this.customFetchFilters) {      spider.addFetchFilter(ff);    }  }  if (this.customParseFilters != null) {    for (    ParseFilter pf : this.customParseFilters) {      spider.addParseFilter(pf);    }  }  spider.start();}  }
class C{  private long parseLong(String[] ss,int ix,long dflt){  if (ss.length <= ix)   return dflt; else {    String s=ss[ix];    return s.isEmpty() ? dflt : Long.parseLong(s);  }}  }
class C{  private CentralRegistrationClass(){}  }
class C{  public void namespaceAfterStartElement(final String prefix,final String uri) throws SAXException {  startPrefixMapping(prefix,uri,false);}  }
class C{  @SafeVarargs public static <A>Set<A> of(A... as){  return Set.<A>empty().plus(as);}  }
class C{  public void mouseDragged(MouseEvent e){}  }
class C{  public boolean isChangeFlag(){  return changeFlag;}  }
class C{  private static int codeToUnary(final int code){  final int result;switch (code) {case CODE_MINUS:    result=CODE_UNARYMINUS;  break;case CODE_ADD:result=CODE_UNARYPLUS;break;default :result=code;break;}return result;}  }
class C{  @SuppressWarnings("unchecked") public Iter<O> iterParents(){  if (nump == 0) {    return (Iter<O>)EMPTY_ITERATOR;  }  return new ItrParents();}  }
class C{  public FileEntry(){  super();  getCategories().remove(DocumentListEntry.CATEGORY);  getCategories().add(CATEGORY);}  }
class C{  public void resetBit(int i) throws RuntimeException {  if (i < 0) {    throw new RuntimeException();  }  if (i > (len - 1)) {    return;  }  value[i >>> 5]&=~bitMask[i & 0x1f];}  }
class C{  public static String stripXMLTags(String xml){  return stripIndividualTags(xml);}  }
class C{  private static Attributes filterAttributes(IntSet indexSet,Attributes attributes){  if (indexSet.size() == attributes.getLength())   return attributes;  return new FilteredAttributes(indexSet,attributes);}  }
class C{  private void drawAnimationLayer(Canvas canvas,float centerX,float centerY){  if (mAmbient) {    mTimeMotionStart=-1;  } else {    if (mTimeMotionStart < 0) {      mTimeMotionStart=System.currentTimeMillis();    }    mTimeElapsed=System.currentTimeMillis() - mTimeMotionStart;    for (mLoop=0; mLoop < mCloudBitmaps.length; mLoop++) {      canvas.save();      canvas.rotate(mCloudDegrees[mLoop],centerX,centerY);      int speed=mCloudSpeeds[mLoop];      if (mHyperSpeedOverrun[mLoop]) {        speed=mCloudHyperSpeeds[mLoop];      }      mRadius=centerX - (mTimeElapsed / speed) % centerX;      if (System.currentTimeMillis() >= mHyperSpeedStartTime + HYPERSPEED_DURATION_MS && mHyperSpeedOverrun[mLoop]) {        float slowRadius=centerX - (mTimeElapsed / mCloudSpeeds[mLoop]) % centerX;        if (Math.abs(mRadius - slowRadius) < HYPERSPEED_HANDOVER_EPSILON) {          mHyperSpeedOverrun[mLoop]=false;        }      }      mCloudFilterPaints[mLoop].setAlpha((int)(mRadius / centerX * 255));      canvas.drawBitmap(mCloudBitmaps[mLoop],centerX,centerY - mRadius,mCloudFilterPaints[mLoop]);      canvas.restore();    }  }}  }
class C{  protected void unhandledMessageReceived(OFMessage m){  switchManagerCounters.unhandledMessage.increment();  if (log.isDebugEnabled()) {    String msg=getSwitchStateMessage(m,"Ignoring unexpected message");    log.debug(msg);  }}  }
class C{  public LFWriter(Writer out){  super(out);  lineSeparator=(String)System.getProperty("line.separator");}  }
class C{  public void removeVolume(String volumeId) throws Exception {  String uri=ScaleIOConstants.getRemoveVolumeURI(volumeId);  ScaleIORemoveVolume removeParm=new ScaleIORemoveVolume();  post(URI.create(uri),getJsonForEntity(removeParm));}  }
class C{  public void MainActionController() throws NoSuchFieldException, IllegalAccessException {  Field field=mainActivity.getClass().getDeclaredField("mainActionController");  field.setAccessible(true);  Object value=field.get(mainActivity);  assertNotNull(value);}  }
class C{  public BoxAndWhiskerToolTipGenerator(String format,NumberFormat formatter){  super(format,formatter);}  }
class C{  public static String print(Object o){  return print(o,false);}  }
class C{  public int diff_xIndex(LinkedList<Diff> diffs,int loc){  int chars1=0;  int chars2=0;  int last_chars1=0;  int last_chars2=0;  Diff lastDiff=null;  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.INSERT) {      chars1+=aDiff.text.length();    }    if (aDiff.operation != Operation.DELETE) {      chars2+=aDiff.text.length();    }    if (chars1 > loc) {      lastDiff=aDiff;      break;    }    last_chars1=chars1;    last_chars2=chars2;  }  if (lastDiff != null && lastDiff.operation == Operation.DELETE) {    return last_chars2;  }  return last_chars2 + (loc - last_chars1);}  }
class C{  public void closeAll(){  for (Enumeration<Socket> values=socketTable.elements(); values.hasMoreElements(); ) {    Socket s=(Socket)values.nextElement();    try {      s.close();    } catch (    IOException ex) {    }  }}  }
class C{  public static ImageDecodeOptionsBuilder newBuilder(){  return new ImageDecodeOptionsBuilder();}  }
class C{  public static Transaction createMockTransactionWithNestedChildren(final int seed){  final Transaction child1=createMockTransactionWithTwoChildren(seed + 10);  final Transaction child2=new MockTransaction(Utils.generateRandomAccount(),seed + 20);  final Transaction child3=createMockTransactionWithTwoChildren(seed + 30);  final MockTransaction parent=new MockTransaction(Utils.generateRandomAccount(),seed);  parent.setChildTransactions(Arrays.asList(child1,child2,child3));  return parent;}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);  ValidationUtils.validateTaskStage(currentState.taskState);}  }
class C{  @Override public boolean isResultRequired(ResultProducer rp,Object[] key) throws Exception {  if (m_ResultProducer != rp) {    throw new Error("Unrecognized ResultProducer sending results!!");  }  boolean isRequiredByListener=m_ResultListener.isResultRequired(this,key);  boolean isRequiredByDatabase=super.isResultRequired(rp,key);  if (!isRequiredByDatabase && isRequiredByListener) {    Object[] result=getResultFromTable(m_ResultsTableName,rp,key);    System.err.println("Got result from database: " + DatabaseUtils.arrayToString(result));    m_ResultListener.acceptResult(this,key,result);    return false;  }  return (isRequiredByListener || isRequiredByDatabase);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.BOOLEAN_LITERAL__TRUE:    setTrue(TRUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private boolean isCollectionUsageUnsupported(MemoryPoolMXBean mp){  return this.collectionUsageUnsupported.contains(mp.getName());}  }
class C{  public void exec(String description,String baseCommand) throws BackupException {  exec(description,baseCommand.split(" "));}  }
