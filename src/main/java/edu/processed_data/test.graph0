class C{  public static String unEscapeString(String str,char escapeChar,char charToEscape){  return unEscapeString(str,escapeChar,new char[]{charToEscape});}  }
class C{  public void checkNextPoissonConsistency(double mean){  final int sampleSize=1000;  final int minExpectedCount=7;  long maxObservedValue=0;  final double alpha=0.001;  UnitTestUtils.Frequency<Long> frequency=new UnitTestUtils.Frequency<Long>();  for (int i=0; i < sampleSize; i++) {    long value=randomData.nextPoisson(mean);    if (value > maxObservedValue) {      maxObservedValue=value;    }    frequency.addValue(value);  }  PoissonDistribution poissonDistribution=new PoissonDistribution(mean);  int lower=1;  while (poissonDistribution.cumulativeProbability(lower - 1) * sampleSize < minExpectedCount) {    lower++;  }  int upper=(int)(5 * mean);  while ((1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize < minExpectedCount) {    upper--;  }  int binWidth=0;  boolean widthSufficient=false;  double lowerBinMass=0;  double upperBinMass=0;  while (!widthSufficient) {    binWidth++;    lowerBinMass=poissonDistribution.probability(lower - 1,lower + binWidth - 1);    upperBinMass=poissonDistribution.probability(upper - binWidth - 1,upper - 1);    widthSufficient=FastMath.min(lowerBinMass,upperBinMass) * sampleSize >= minExpectedCount;  }  List<Integer> binBounds=new ArrayList<Integer>();  binBounds.add(lower);  int bound=lower + binWidth;  while (bound < upper - binWidth) {    binBounds.add(bound);    bound+=binWidth;  }  binBounds.add(upper);  final int binCount=binBounds.size() + 1;  long[] observed=new long[binCount];  double[] expected=new double[binCount];  observed[0]=0;  for (int i=0; i < lower; i++) {    observed[0]+=frequency.getCount((long)i);  }  expected[0]=poissonDistribution.cumulativeProbability(lower - 1) * sampleSize;  observed[binCount - 1]=0;  for (int i=upper; i <= maxObservedValue; i++) {    observed[binCount - 1]+=frequency.getCount((long)i);  }  expected[binCount - 1]=(1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize;  for (int i=1; i < binCount - 1; i++) {    observed[i]=0;    for (int j=binBounds.get(i - 1); j < binBounds.get(i); j++) {      observed[i]+=frequency.getCount((long)j);    }    expected[i]=(poissonDistribution.cumulativeProbability(binBounds.get(i) - 1) - poissonDistribution.cumulativeProbability(binBounds.get(i - 1) - 1)) * sampleSize;  }  if (UnitTestUtils.chiSquareTest(expected,observed) < alpha) {    StringBuilder msgBuffer=new StringBuilder();    DecimalFormat df=new DecimalFormat("#.##");    msgBuffer.append("Chisquare test failed for mean = ");    msgBuffer.append(mean);    msgBuffer.append(" p-value = ");    msgBuffer.append(UnitTestUtils.chiSquareTest(expected,observed));    msgBuffer.append(" chisquare statistic = ");    msgBuffer.append(UnitTestUtils.chiSquare(expected,observed));    msgBuffer.append(". \n");    msgBuffer.append("bin\t\texpected\tobserved\n");    for (int i=0; i < expected.length; i++) {      msgBuffer.append("[");      msgBuffer.append(i == 0 ? 1 : binBounds.get(i - 1));      msgBuffer.append(",");      msgBuffer.append(i == binBounds.size() ? "inf" : binBounds.get(i));      msgBuffer.append(")");      msgBuffer.append("\t\t");      msgBuffer.append(df.format(expected[i]));      msgBuffer.append("\t\t");      msgBuffer.append(observed[i]);      msgBuffer.append("\n");    }    msgBuffer.append("This test can fail randomly due to sampling error with probability ");    msgBuffer.append(alpha);    msgBuffer.append(".");    Assert.fail(msgBuffer.toString());  }}  }
class C{  public DefaultJobRowBuilder(Function<Map<JobField,String>,String> idGenerator,Function<SecurityContext,String> userIdExtractor,Clock timestampGenerator){  this.idGenerator=idGenerator;  this.userIdExtractor=userIdExtractor;  this.timestampGenerator=timestampGenerator;}  }
class C{  protected final boolean handleAllocNode(AllocNode src){  boolean ret=false;  Node[] targets=pag.allocLookup(src);  for (  Node element : targets) {    if (element.makeP2Set().add(src)) {      varNodeWorkList.add((VarNode)element);      ret=true;    }  }  return ret;}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigWKT copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigWKT(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public void handleEntryExpiredSA(EntryExpiredBusPacket packet) throws Exception {  handleEntryExpiredCoreSA(packet.getEntryHolder(),packet.getTransaction(),packet.isFromReplication());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXTRACT_GATHER_SUCCESS_1_BASIC(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1330078,descriptionId);}  }
class C{  public void toggle(Animation animIn,Animation animOut){  toggle(true,animIn,animOut);}  }
class C{  private boolean isInSameEvolutionChain(Pokemon p1,Pokemon p2){  ArrayList<Pokemon> evolutionLine=getEvolutionLine(p1);  for (  Pokemon poke : evolutionLine) {    if (poke.number == p2.number) {      return true;    }  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Aura_END_ME_TO_B(String skillname){  return new SM_SYSTEM_MESSAGE(1200459,skillname);}  }
class C{  public PhotosGetUploadServerQuery(VkApiClient client,UserActor actor){  super(client,"photos.getUploadServer",PhotoUpload.class);  accessToken(actor.getAccessToken());}  }
class C{  public ChangeReport onEquipmentUnitAdd(final EquipmentUnitAdd equipmentUnitAdd){  log.debug("onEquipmentUnitAdd - entering onEquipmentUnitAdd()..");  ChangeReport changeReport=new ChangeReport(equipmentUnitAdd);  changeReport.setState(CHANGE_STATE.SUCCESS);  ProcessConfiguration processConfiguration=configurationController.getProcessConfiguration();  if (processConfiguration.getEquipmentConfiguration(equipmentUnitAdd.getEquipmentId()) != null) {    changeReport.appendError("onEquipmentUnitAdd - Equipment unit id: " + equipmentUnitAdd.getEquipmentId() + " is already registered");    changeReport.setState(CHANGE_STATE.FAIL);    return changeReport;  }  EquipmentConfiguration conf=null;  try {    conf=equipmentConfigurationFactory.createEquipmentConfiguration(equipmentUnitAdd.getEquipmentUnitXml());  } catch (  Exception ex) {    changeReport.setState(CHANGE_STATE.FAIL);    changeReport.appendError(StackTraceHelper.getStackTrace(ex));    return changeReport;  }  EquipmentMessageHandler equnit=null;  boolean dynamicTimeDeadbandEnabled=environment.getRequiredProperty(Options.DYNAMIC_TIME_DEADBAND_ENABLED,Boolean.class);  conf.setDynamicTimeDeadbandEnabled(dynamicTimeDeadbandEnabled);  log.info("onEquipmentUnitAdd - Dynamic timedeadband enabled for equipment id: " + conf.getId() + " enabled: "+ dynamicTimeDeadbandEnabled);  EquipmentLoggerFactory equipmentLoggerFactory=EquipmentLoggerFactory.createFactory(conf,processConfiguration,environment.getProperty("c2mon.daq.logging.useEquipmentLoggers",Boolean.class,false),environment.getProperty("c2mon.daq.logging.useEquipmentAppendersOnly",Boolean.class,false));  EquipmentMessageSender equipmentMessageSender=(EquipmentMessageSender)applicationContext.getBean(EQUIPMENT_MESSAGE_SENDER);  equipmentMessageSender.init(conf,equipmentLoggerFactory);  configurationController.addCoreDataTagChanger(conf.getId(),equipmentMessageSender);  try {    validateDataTags(conf,equipmentMessageSender);    validateCommandTags(conf,equipmentMessageSender);    equnit=EquipmentMessageHandler.createEquipmentMessageHandler(conf.getHandlerClassName(),new EquipmentCommandHandler(conf.getId(),requestController),new EquipmentConfigurationHandler(conf.getId(),configurationController),equipmentMessageSender);    equnit.setEquipmentLoggerFactory(equipmentLoggerFactory);    processConfiguration.addEquipmentConfiguration(conf);  } catch (  InstantiationException e) {    String msg="Error while instantiating " + conf.getHandlerClassName();    equipmentMessageSender.confirmEquipmentStateIncorrect(msg + ": " + e.getMessage());    log.error(msg,e);  }catch (  IllegalAccessException e) {    String msg="Access error while calling constructor of " + conf.getHandlerClassName();    equipmentMessageSender.confirmEquipmentStateIncorrect("Error in code: " + msg);    log.error(msg,e);  }catch (  ClassNotFoundException e) {    String msg="Handler class not found: " + conf.getHandlerClassName();    equipmentMessageSender.confirmEquipmentStateIncorrect("Error during configuration: " + msg);    log.error(msg,e);  }  if (equnit != null) {    if (!registerNewEquipmentUnit(equnit)) {      changeReport.setState(CHANGE_STATE.REBOOT);      changeReport.appendWarn("problem detected while registering new equipment. You need to restart the DAQ");    }  }  return changeReport;}  }
class C{  private void requestNewPhotosOrders(Context c,int page,boolean refresh){  page=refresh ? 1 : page + 1;  listener=new OnRequestPhotosListener(c,page,Mysplash.CATEGORY_TOTAL_NEW,refresh,false);  model.getService().requestPhotos(page,Mysplash.DEFAULT_PER_PAGE,model.getPhotosOrder(),listener);}  }
class C{  public static void picture(double x,double y,String filename,double scaledWidth,double scaledHeight,double degrees){  if (scaledWidth < 0)   throw new IllegalArgumentException("width is negative: " + scaledWidth);  if (scaledHeight < 0)   throw new IllegalArgumentException("height is negative: " + scaledHeight);  Image image=getImage(filename);  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(scaledWidth);  double hs=factorY(scaledHeight);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + filename + " is corrupt");  if (ws <= 1 && hs <= 1)   pixel(x,y);  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),(int)Math.round(ws),(int)Math.round(hs),null);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);  draw();}  }
class C{  public VisualTable(Visualization vis,String group,Schema schema){  super(TableVisualItem.class);  init(vis,group,schema);}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public static DataTag buildCreateBasicDataTag(Properties properties){  if (properties == null) {    properties=new Properties();  }  DataTag dataTag=DataTag.create("DataTag",Integer.class,new DataTagAddress()).build();  dataTag.setEquipmentId(10L);  properties.setProperty("name","DataTag");  properties.setProperty("description","<no description provided>");  properties.setProperty("mode",String.valueOf(TagMode.OPERATIONAL.ordinal()));  properties.setProperty("dataType",Integer.class.getName());  properties.setProperty("isLogged",String.valueOf(true));  properties.setProperty("equipmentId",String.valueOf(10l));  properties.setProperty("address",new DataTagAddress().toConfigXML());  return dataTag;}  }
class C{  protected void updateRowCount(){  int maxrow=m_rows.getMaximumRow() + 1;  Iterator cols=getColumns();  while (cols.hasNext()) {    Column c=(Column)cols.next();    c.setMaximumRow(maxrow);  }}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowTriPlot();}  }
class C{  public int hashCode(){  return (int)(ConnectionRelativeTime.class.hashCode() + time);}  }
class C{  protected VideoRemoveTagQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  public static void cover(String dest,int w,int h,List<String> sources) throws Exception {  if (sources == null) {    throw new Exception("no source!");  }  int len=sources.size();  if (len == 4 || len == 9) {    BufferedImage src[]=new BufferedImage[len];    for (int i=0; i < len; i++) {      src[i]=ImageIO.read(new File(sources.get(i)));    }    BufferedImage out=new BufferedImage(w,h,BufferedImage.TYPE_3BYTE_BGR);    Graphics g=out.getGraphics();    g.setColor(Color.WHITE);    g.fillRect(0,0,w,h);    g.setColor(new Color(0xCCD4D0));    int size=len == 4 ? 2 : 3;    int space=len == 4 ? 4 : 2;    int w1=(w - 1) / size;    int h1=(h - 1) / size;    float fd=((float)w1) / h1;    for (int i=0; i < len; i++) {      BufferedImage img=src[i];      int w2=img.getWidth();      int h2=img.getHeight();      float fs=((float)w2) / h2;      if (fs > fd) {        w2=w1;        h2=(int)(w2 / fs);      } else       if (fs < fd) {        h2=h1;        w2=(int)(h2 * fs);      } else {        w2=w1;        h2=h1;      }      Image tmp=img.getScaledInstance(w2,h2,Image.SCALE_SMOOTH);      int x=(i % size) * w1;      int y=(i / size) * h1;      g.drawImage(tmp,x + space + (w1 - w2) / 2,y + space + (h1 - h2) / 2,w2 - 2 * space,h2 - 2 * space,null);      g.drawRect(x,y,w1,h1);    }    ImageIO.write(out,"jpg",new File(dest));  } else {    throw new Exception("sources MUST is 4 or 9 picutures!" + len);  }}  }
class C{  public Bindings add(String property,JRadioButton[] cs,int defaultValue){  registerPropertyChangeListener(cs);  return add(new JRadioButtonBinding(property,cs,defaultValue));}  }
class C{  public void cancelAlarm(Context context){  if (alarmMgr != null) {    alarmMgr.cancel(alarmIntent);  }  ComponentName receiver=new ComponentName(context,BootReceiver.class);  PackageManager pm=context.getPackageManager();  pm.setComponentEnabledSetting(receiver,PackageManager.COMPONENT_ENABLED_STATE_DISABLED,PackageManager.DONT_KILL_APP);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCBuff_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201257,skillcaster,skillname);}  }
class C{  public static <T>T findValueOfType(Collection<T> collection,Class<? extends T>[] types){  if (isEmpty(collection) || ObjectUtils.isEmpty(types))   return null;  for (  Class<? extends T> type : types) {    T value=findValueOfType(collection,type);    if (value != null)     return value;  }  return null;}  }
class C{  private static long writeLogSegment(DistributedLogManager dlm,int numRecords,long startTxId,int flushPerNumRecords,boolean emptyRecord) throws IOException {  long txid=startTxId;  LogWriter writer=dlm.startLogSegmentNonPartitioned();  for (long j=1; j <= numRecords; j++) {    if (emptyRecord) {      writer.write(DLMTestUtil.getEmptyLogRecordInstance(txid++));    } else {      writer.write(DLMTestUtil.getLargeLogRecordInstance(txid++));    }    if (j % flushPerNumRecords == 0) {      writer.setReadyToFlush();      writer.flushAndSync();    }  }  writer.setReadyToFlush();  writer.flushAndSync();  writer.close();  return txid;}  }
class C{  @Override public void characters(char[] ch,int start,int length) throws SAXException {}  }
class C{  protected boolean runTestsOnEdt(){  return true;}  }
class C{  @Override public Histogram histogram(){  return hist;}  }
class C{  public CountriesExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public Pair<Integer,Set<Long>> writeTable(long uuid){  preBufferAccess();  int offset=_buffer.position();  try {    if (_buffer.remaining() < 4) {      return Pair.<Integer,Set<Long>>create(-1,ImmutableSet.<Long>of());    }    _buffer.position(offset + 4);    Set<Long> uuids;    try {      ByteBuffer tableBuffer=_buffer.slice();      uuids=getTableSerializer().loadAndSerialize(uuid,new ByteBufferOutputStream(tableBuffer));      tableBuffer.flip();      int length=tableBuffer.limit();      _buffer.position(offset);      _buffer.putInt(length);      _buffer.position(offset + 4 + length);    } catch (    UnknownTableException|DroppedTableException e) {      uuids=ImmutableSet.of(uuid);      writeUnknownOrDroppedTable(offset,e);    }    _modified=true;    return Pair.create(offset,uuids);  } catch (  BufferOverflowException e) {    _buffer.position(offset);    if (offset == 0) {      _log.error("Table with UUID {} is too large to fit in a single block",uuid);      throw new IllegalArgumentException("Table too large");    }    return Pair.<Integer,Set<Long>>create(-1,ImmutableSet.<Long>of());  }catch (  IOException e) {    throw Throwables.propagate(e);  } finally {    postBufferAccess();  }}  }
class C{  public static boolean isBehind(VisibleObject object1,VisibleObject object2){  float angle=MathUtil.convertHeadingToDegree(object1.getHeading()) + 90;  if (angle >= 360) {    angle-=360;  }  double radian=Math.toRadians(angle);  float x0=object1.getX();  float y0=object1.getY();  float x1=(float)(Math.cos(radian) * 5) + x0;  float y1=(float)(Math.sin(radian) * 5) + y0;  float xA=object2.getX();  float yA=object2.getY();  float temp=(x1 - x0) * (yA - y0) - (y1 - y0) * (xA - x0);  return temp > 0;}  }
class C{  void assignToBlock(BlockId blk){  internalLock.writeLock().lock();  try {    flush();    this.blk=blk;    contents.read(blk);    pins=0;    lastLsn=LogSeqNum.readFromPage(contents,LAST_LSN_OFFSET);  }  finally {    internalLock.writeLock().unlock();  }}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  @Override public boolean hasPassword(){  return propertyMap.containsKey(PASSWORD_KEY);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200701,skillcaster,skillname);}  }
class C{  protected Highlight buildHighlight(IDataSet set,int dataSetIndex,float xVal,DataSet.Rounding rounding){  final Entry e=set.getEntryForXPos(xVal,rounding);  if (e == null)   return null;  MPPointD pixels=mChart.getTransformer(set.getAxisDependency()).getPixelsForValues(e.getX(),e.getY());  return new Highlight(e.getX(),e.getY(),(float)pixels.x,(float)pixels.y,dataSetIndex,set.getAxisDependency());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_MY_PARTY_STATE(String value0){  return new SM_SYSTEM_MESSAGE(1390135,value0);}  }
class C{  private static void storeAsTypeWithSignaturesImport(String strTypeToImport,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){  if (strTypeToImport.contains("|")) {    for (    String strOneType : strTypeToImport.split("\\|")) {      storeAsTypeWithSignaturesImport(Types.getType(strOneType),objScope,objIndex,objTypesSet);    }    return;  }  if (StringUtil.isEmpty(strTypeToImport) || strTypeToImport.equals("?")) {    return;  }  if (strTypeToImport.contains("#")) {    TypeFromSignatureResolvingUtil.resolveSignature(strTypeToImport,objScope,objIndex,objTypesSet);    return;  }  objTypesSet.add(Types.getType(strTypeToImport));}  }
class C{  private V doGet(Object okey){  Comparable<? super K> key=comparable(okey);  for (; ; ) {    Node<K,V> n=findNode(key);    if (n == null)     return null;    Object v=n.value;    if (v != null)     return (V)v;  }}  }
class C{  public JSONWriter key(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null key.");  }  if (this.mode == 'k') {    try {      this.stack[this.top - 1].putOnce(string,Boolean.TRUE);      if (this.comma) {        this.writer.write(',');      }      this.writer.write(JSONObject.quote(string));      this.writer.write(':');      this.comma=false;      this.mode='o';      return this;    } catch (    IOException e) {      throw new JSONException(e);    }  }  throw new JSONException("Misplaced key.");}  }
class C{  private boolean useIsSameNode(Node node){  if (node instanceof NodeImpl) {    return false;  }  Document doc=node.getNodeType() == Node.DOCUMENT_NODE ? (Document)node : node.getOwnerDocument();  return (doc != null && doc.getImplementation().hasFeature("Core","3.0"));}  }
class C{  public boolean isExpired(Period period,Date now){  int expiryDays=getExpiryDays();  return expiryDays != DataSet.NO_EXPIRY && new DateTime(period.getEndDate()).plusDays(expiryDays).isBefore(new DateTime(now));}  }
class C{  protected void at(String msg,boolean condition){  Assert.assertTrue(msg,condition);}  }
class C{  @Deprecated public boolean isAssignableFrom(Type from){  if (from == null) {    return false;  }  if (type.equals(from)) {    return true;  }  if (type instanceof Class<?>) {    return rawType.isAssignableFrom($Gson$Types.getRawType(from));  } else   if (type instanceof ParameterizedType) {    return isAssignableFrom(from,(ParameterizedType)type,new HashMap<String,Type>());  } else   if (type instanceof GenericArrayType) {    return rawType.isAssignableFrom($Gson$Types.getRawType(from)) && isAssignableFrom(from,(GenericArrayType)type);  } else {    throw buildUnexpectedTypeError(type,Class.class,ParameterizedType.class,GenericArrayType.class);  }}  }
class C{  private Collection<Var> migrateColumnValueAsRelation(Var parent,String fkName,String childType,Object childId){  if (childId == null) {    return Collections.emptyList();  }  String relationType=namer.relationName(fkName);  String childRole=namer.roleChildName(fkName);  String parentRole=namer.roleParentName(fkName);  String foreignPrimaryKey=namer.primaryKey(childType,Collections.singleton(childId.toString()));  Var child=var().isa(childType).id(foreignPrimaryKey);  Var relation=var().rel(childRole,var().id(id(child))).rel(parentRole,var().id(id(parent))).isa(relationType);  return Arrays.asList(child,relation);}  }
class C{  protected void animateToState(boolean checked){  if (mProcessAnimator == null) {    return;  }  if (mProcessAnimator.isRunning()) {    mProcessAnimator.cancel();  }  mProcessAnimator.setDuration(mAnimationDuration);  if (checked) {    mProcessAnimator.setFloatValues(mProcess,1f);  } else {    mProcessAnimator.setFloatValues(mProcess,0);  }  mProcessAnimator.start();}  }
class C{  @Override public Fraction reciprocal(){  return new Fraction(denominator,numerator);}  }
class C{  public String listTargetFeatures(TargetFeatureComputer featureComputer,List<Element> segmentsAndBoundaries){  String pauseSymbol=featureComputer.getPauseSymbol();  List<Target> targets=overridableCreateTargetsWithPauses(segmentsAndBoundaries,pauseSymbol);  String header=featureComputer.getAllFeatureProcessorNamesAndValues();  StringBuilder text=new StringBuilder();  StringBuilder bin=new StringBuilder();  for (  Target target : targets) {    FeatureVector features=featureComputer.computeFeatureVector(target);    text.append(featureComputer.toStringValues(features)).append("\n");    bin.append(features.toString()).append("\n");  }  String out=header + "\n" + text+ "\n"+ bin;  return out;}  }
class C{  public void type(int... keys) throws InterruptedException {  for (  int key : keys) {    type(key);  }}  }
class C{  public FriendsAddQuery(VkApiClient client,UserActor actor,int userId){  super(client,"friends.add",AddResponse.class);  accessToken(actor.getAccessToken());  userId(userId);}  }
class C{  public void clear(){  cache.invalidateAllData();}  }
class C{  @Override public void onConfigsUpdated(List<ConfigItem> configItems){  if (configItems != null && !configItems.isEmpty()) {    for (    ConfigItem configItem : configItems) {      configValues.put(configItem.getName(),configItem.getValue());    }  }}  }
class C{  @Override public boolean shouldSkipClass(Class<?> aClass){  return false;}  }
class C{  private static Field[] fieldInfo(Entry entry){  Field[] fields=null;synchronized (AbstractEntry.class) {    if (fieldArrays == null)     fieldArrays=new WeakHashMap(); else {      fields=(Field[])fieldArrays.get(entry.getClass());      if (fields != null)       return fields;    }  }  final int SKIP_MODIFIERS=(Modifier.STATIC | Modifier.TRANSIENT | Modifier.FINAL);  fields=entry.getClass().getFields();  ArrayList usable=null;  for (int i=0; i < fields.length; i++) {    if ((fields[i].getModifiers() & SKIP_MODIFIERS) != 0 || (fields[i].getType().isPrimitive())) {      if (usable == null) {        usable=new ArrayList();        for (int j=0; j < i; j++)         usable.add(fields[j]);      }    } else {      if (usable != null)       usable.add(fields[i]);    }  }  if (usable != null)   fields=(Field[])usable.toArray(new Field[usable.size()]);synchronized (AbstractEntry.class) {    fieldArrays.put(entry.getClass(),fields);  }  return fields;}  }
class C{  public boolean equals(Object obj){  return obj == this || (obj != null && obj.getClass() == getClass() && instance.equals(((MarshalledWrapper)obj).instance));}  }
class C{  protected static Dfp atanInternal(final Dfp a){  Dfp y=new Dfp(a);  Dfp x=new Dfp(y);  Dfp py=new Dfp(y);  for (int i=3; i < 90; i+=2) {    x=x.multiply(a);    x=x.multiply(a);    x=x.negate();    y=y.add(x.divide(i));    if (y.equals(py)) {      break;    }    py=new Dfp(y);  }  return y;}  }
class C{  private void flush(){  myPage.write(currentBlk);  lastFlushedLsn=lastLsn;}  }
class C{  private XtnConfilctCheckIndicators checkTransactionConflict(Context context,IEntryHolder entry,ITemplateHolder template,boolean isShadow){  XtnEntry xtnEntry;  if ((template.getTemplateOperation() == SpaceOperations.READ || template.getTemplateOperation() == SpaceOperations.READ_IE) && !template.isExclusiveReadLockOperation()) {    ITransactionalEntryData edata=context.isNonBlockingReadOp() ? context.getLastRawMatchSnapshot() : entry.getTxnEntryData();    xtnEntry=edata.getWriteLockOwner();    if (xtnEntry == null)     return XtnConfilctCheckIndicators.NO_CONFLICT;    final XtnStatus entryWriteLockStatus=xtnEntry.getStatus();    final int entryWriteLockOperation=edata.getWriteLockOperation();    final boolean isDirtyRead=indicateDirtyRead(template);    final boolean isReadCommitted=indicateReadCommitted(edata,template);    if (template.getXidOriginatedTransaction() == null || !edata.getWriteLockTransaction().equals(template.getXidOriginatedTransaction())) {      if (isDirtyRead)       return checkTransactionConflictDirtyRead(context,xtnEntry,entryWriteLockStatus,entryWriteLockOperation,entry,edata,isShadow);      if (isReadCommitted)       return checkTransactionConflictReadCommitted(context,xtnEntry,entryWriteLockStatus,entryWriteLockOperation,entry,edata,isShadow);      return checkTransactionConflict(xtnEntry,entryWriteLockStatus,entryWriteLockOperation);    }    if (entryWriteLockOperation == SpaceOperations.TAKE || entryWriteLockOperation == SpaceOperations.TAKE_IE)     return XtnConfilctCheckIndicators.DELETED_BY_OWN_XTN;    if (isReadCommitted && isShadow)     return XtnConfilctCheckIndicators.XTN_CONFLICT;    return XtnConfilctCheckIndicators.NO_CONFLICT;  }  if ((template.getTemplateOperation() == SpaceOperations.TAKE_IE || template.getTemplateOperation() == SpaceOperations.TAKE)) {    List<XtnEntry> readWriteLock=entry.getReadLockOwners();    if (entry.getWriteLockTransaction() == null && (readWriteLock == null || readWriteLock.isEmpty()))     return XtnConfilctCheckIndicators.NO_CONFLICT;    if (readWriteLock != null && !readWriteLock.isEmpty()) {      for (      XtnEntry readLockOwner : readWriteLock) {        xtnEntry=readLockOwner;        if (xtnEntry != null) {          XtnStatus entryReadLockStatus=xtnEntry.getStatus();          if (entryReadLockStatus == XtnStatus.COMMITED || entryReadLockStatus == XtnStatus.COMMITING || (entryReadLockStatus == XtnStatus.PREPARED && xtnEntry.m_SingleParticipant) || entryReadLockStatus == XtnStatus.ROLLED || (entryReadLockStatus == XtnStatus.ROLLING && !xtnEntry.m_AlreadyPrepared))           continue;          if (template.getXidOriginatedTransaction() == null || !readLockOwner.m_Transaction.equals(template.getXidOriginatedTransaction()))           return XtnConfilctCheckIndicators.XTN_CONFLICT;        }      }    }    xtnEntry=entry.getWriteLockOwner();    if (xtnEntry == null)     return XtnConfilctCheckIndicators.NO_CONFLICT;    XtnStatus entryWriteLockStatus=xtnEntry.getStatus();    int entryWriteLockOperation=entry.getWriteLockOperation();    if (template.getXidOriginatedTransaction() == null || !entry.getWriteLockTransaction().equals(template.getXidOriginatedTransaction())) {      return checkTransactionConflict(xtnEntry,entryWriteLockStatus,entryWriteLockOperation);    }    if (entryWriteLockOperation == SpaceOperations.TAKE || entryWriteLockOperation == SpaceOperations.TAKE_IE)     return XtnConfilctCheckIndicators.DELETED_BY_OWN_XTN;    return XtnConfilctCheckIndicators.NO_CONFLICT;  }  if (template.getTemplateOperation() == SpaceOperations.UPDATE || template.isExclusiveReadLockOperation()) {    List<XtnEntry> rwLock=entry.getReadLockOwners();    if (entry.getWriteLockTransaction() == null && (rwLock == null || rwLock.isEmpty()))     return XtnConfilctCheckIndicators.NO_CONFLICT;    if (rwLock != null && !rwLock.isEmpty()) {      for (      XtnEntry readLockOwner : rwLock) {        xtnEntry=readLockOwner;        if (xtnEntry != null) {          XtnStatus entryReadLockStatus=xtnEntry.getStatus();          if (entryReadLockStatus == XtnStatus.COMMITED || entryReadLockStatus == XtnStatus.COMMITING || (entryReadLockStatus == XtnStatus.PREPARED && xtnEntry.m_SingleParticipant) || entryReadLockStatus == XtnStatus.ROLLED || (entryReadLockStatus == XtnStatus.ROLLING && !xtnEntry.m_AlreadyPrepared))           continue;          if (template.getXidOriginatedTransaction() == null || !readLockOwner.m_Transaction.equals(template.getXidOriginatedTransaction()))           return XtnConfilctCheckIndicators.XTN_CONFLICT;        }      }    }    xtnEntry=entry.getWriteLockOwner();    if (xtnEntry == null)     return XtnConfilctCheckIndicators.NO_CONFLICT;    XtnStatus entryWriteLockStatus=xtnEntry.getStatus();    int entryWriteLockOperation=entry.getWriteLockOperation();    if (template.getXidOriginatedTransaction() == null || !entry.getWriteLockTransaction().equals(template.getXidOriginatedTransaction())) {      return checkTransactionConflict(xtnEntry,entryWriteLockStatus,entryWriteLockOperation);    }    if (entryWriteLockOperation == SpaceOperations.TAKE || entryWriteLockOperation == SpaceOperations.TAKE_IE)     return UpdateModifiers.isUpdateOrWrite(template.getOperationModifiers()) ? XtnConfilctCheckIndicators.NO_CONFLICT : XtnConfilctCheckIndicators.DELETED_BY_OWN_XTN;    if (template.isFifoGroupPoll() && xtnEntry == template.getXidOriginated() && template.isExclusiveReadLockOperation())     return XtnConfilctCheckIndicators.DELETED_BY_OWN_XTN;    return XtnConfilctCheckIndicators.NO_CONFLICT;  }  return XtnConfilctCheckIndicators.NO_CONFLICT;}  }
class C{  public boolean freePage(int pageNum){  Page p;  try {    p=fetchPage(pageNum);  } catch (  PageException e) {    return false;  }  return freePage(p);}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    if (requestedCameraId >= 0) {      theCamera=OpenCameraInterface.open(requestedCameraId);    } else {      theCamera=OpenCameraInterface.open();    }    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  @Override public IntegerDistribution makeDistribution(){  return new GeometricDistribution(0.40);}  }
class C{  public final boolean isOverridingLocale(){  return (myOverride & CFG_LOCALE) != 0;}  }
class C{  public static ContourNextLinkMessage fromBytes(MedtronicCNLSession pumpSession,byte[] bytes) throws ChecksumException, EncryptionException {  ContourNextLinkMessage message=MedtronicMessage.fromBytes(bytes);  if (bytes.length >= 57) {    byte encryptedPayloadSize=bytes[56];    ByteBuffer encryptedPayload=ByteBuffer.allocate(encryptedPayloadSize);    encryptedPayload.put(bytes,57,encryptedPayloadSize);    byte[] decryptedPayload=decrypt(pumpSession.getKey(),pumpSession.getIV(),encryptedPayload.array());    message.mPayload.position(57);    message.mPayload.put(decryptedPayload);  }  return message;}  }
class C{  public Builder popupAnchor(Point popupAnchor){  this.popupAnchor=popupAnchor;  return this;}  }
class C{  @deprecated protected DictionaryBasedBreakIterator(InputStream compiledRules) throws IOException {  this.fRData=RBBIDataWrapper.get(compiledRules);  this.dictionary=null;  this.usingCTDictionary=true;}  }
class C{  public Builder boxZoom(Boolean boxZoom){  this.boxZoom=boxZoom;  return this;}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if (comboBox != null) {    String oldValue=(String)undoRedoObject.getOldValue();    comboBox.setSelectValueKey(oldValue);  }}  }
class C{  public void removeRule(Rule ruleToDelete){  List<Rule> ruleList=(List<Rule>)this.symbolData.getFeatureTypeStyle().rules();  int indexFound=-1;  int index=0;  for (  Rule rule : ruleList) {    if (rule == ruleToDelete) {      indexFound=index;      break;    } else {      index++;    }  }  if (indexFound > -1) {    ruleList.remove(indexFound);  }}  }
class C{  public void loadMoreComplate(){  isLoadingMoreData=false;  if (mFooterView != null) {    if (isManualLoadMoreData) {      mFooterView.getLayoutParams().height=0;    } else {      mFooterView.setVisibility(GONE);    }  }  getAdapter().notifyDataSetChanged();}  }
class C{  protected String renderUri(URI uri){  return uri.toASCIIString();}  }
class C{  public JsonArray(){  values=new ArrayList<JsonValue>();}  }
class C{  public void actionPerformed(ActionEvent ev){  executeImmediately("close what=current;");}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public static String nullSafeToString(byte[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  public static void writeStringToFile(File file,String data) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),false);}  }
class C{  public boolean removeTuple(Tuple t){  Table table=t.getTable();  if (m_sets.contains(table)) {    return table.removeTuple(t);  } else {    return false;  }}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {}  }
class C{  @SuppressWarnings("unchecked") public final S withValueSupplier(Splittable.BigIntegerIndexed<T> valueSupplier){  this.valueSupplier=valueSupplier;  return (S)this;}  }
class C{  public static boolean hasNextKeyTyped(){synchronized (keyLock) {    return !keysTyped.isEmpty();  }}  }
class C{  public void loadSavedApi(){  String savedApiLevel=PropertiesComponent.getInstance().getValue(FormFactorUtils.getPropertiesComponentMinSdkKey(myFormFactor),Integer.toString(myFormFactor.defaultApi));  setSelectedApiLevel(savedApiLevel);  if (getSelectedIndex() < 0 && getItemCount() > 0) {    setSelectedIndex(0);  }}  }
class C{  private void createFilter(Rule rule,JsonElement fieldsElement,JsonElement fieldDelimiterElement,String value){  if (fieldsElement == null)   return;  if (value == null) {    rule.setElseFilter(true);  } else {    List<String> fieldList=new ArrayList<String>();    JsonArray fieldArray=fieldsElement.getAsJsonArray();    for (int fieldIndex=0; fieldIndex < fieldArray.size(); fieldIndex++) {      JsonElement jsonFieldElement=fieldArray.get(fieldIndex);      if (jsonFieldElement != null) {        JsonObject fieldObj=jsonFieldElement.getAsJsonObject();        fieldList.add(fieldObj.get("name").getAsString());      }    }    String[] values=null;    if (fieldDelimiterElement != null) {      values=value.split(fieldDelimiterElement.getAsString());    } else {      values=new String[1];      values[0]=value;    }    List<Filter> filterList=new ArrayList<Filter>();    int index=0;    while (index < values.length) {      Expression fieldExpression=filterFactory.property(fieldList.get(index));      Expression valueExpression=filterFactory.literal(values[index]);      PropertyIsEqualTo filter=filterFactory.equals(fieldExpression,valueExpression);      filterList.add(filter);      index++;    }    Filter completeFilter=null;    if (filterList.size() > 1) {      completeFilter=filterFactory.and(filterList);    } else     if (filterList.size() == 1) {      completeFilter=filterList.get(0);    }    rule.setFilter(completeFilter);  }}  }
class C{  public static void computeReachableFromObject(Object root,Class<?> declaredRootClass,List<String> currentPath,ReachableClasses reachableClasses) throws IllegalAccessException, ClassNotFoundException {  final Class<?> concreteRootClass=DeepEqualsTesterUtil.getClass(declaredRootClass,root);  List<Field> allFields=DeepEqualsTesterUtil.getAllFields(concreteRootClass);  for (  Field field : allFields) {    if (!Modifier.isStatic(field.getModifiers())) {      field.setAccessible(true);      final Object fieldObject;      if (root == null) {        fieldObject=null;      } else {        fieldObject=field.get(root);      }      List<String> childPath=Lists.newArrayList();      childPath.addAll(currentPath);      childPath.add(field.toString());      addToReachableAndRecurse(fieldObject,field.getType(),field.getGenericType(),childPath,reachableClasses);    }  }}  }
class C{  public int next(){  if (!hasNextLine())   return -1;  String line=nextLine();  while (hasNextLine() && !line.startsWith(">")) {    line=nextLine();  }  if (line == null || !line.startsWith(">"))   return -1;  final String queryName=Basic.getReadName(line);  matchesTextLength=0;  byte[] bytes=makeSAM(queryName,Basic.replaceSpaces(line,' ')).getBytes();  if (matchesTextLength + bytes.length >= matchesText.length) {    byte[] tmp=new byte[2 * (matchesTextLength + bytes.length)];    System.arraycopy(matchesText,0,tmp,0,matchesTextLength);    matchesText=tmp;  }  System.arraycopy(bytes,0,matchesText,matchesTextLength,bytes.length);  matchesTextLength+=bytes.length;  return 1;}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  @Override public void touchAuthorAvatar(){  User u=User.buildUser(model.getPhoto());  Mysplash.getInstance().setUser(u);  view.touchAuthorAvatar();}  }
class C{  private void requestUserPhotos(Context c,int page,boolean refresh,String order){  page=refresh ? 1 : page + 1;  listener=new OnRequestPhotosListener(c,page,refresh);  model.getService().requestUserPhotos((User)model.getRequestKey(),page,Mysplash.DEFAULT_PER_PAGE,order,listener);}  }
class C{  private void listSelectionChanged(IStructuredSelection selection){  if (editor == null || editor.getSelectionProvider() == null) {    try {      contents.reset();      showAnnotations(svnFile,svnAnnotateBlocks,contents,false);    } catch (    PartInitException e) {      return;    }catch (    IOException e) {      return;    }  }  ISelectionProvider selectionProvider=editor.getSelectionProvider();  if (selectionProvider == null) {    return;  }  ITextSelection textSelection=(ITextSelection)selectionProvider.getSelection();  AnnotateBlock listSelection=null;  try {    listSelection=(AnnotateBlock)selection.getFirstElement();  } catch (  ClassCastException cce) {    return;  }  if (listSelection == null) {    return;  }  if (textSelection.getStartLine() == listSelection.getStartLine() && textSelection.getEndLine() == listSelection.getEndLine() && selection.equals(previousListSelection)) {    return;  }  if (!lastSelectionWasText) {    try {      int start=document.getLineOffset(listSelection.getStartLine());      int end=document.getLineOffset(listSelection.getEndLine() + 1);      editor.selectAndReveal(start,end - start);      if (editor != null && !page.isPartVisible(editor)) {        page.activate(editor);      }    } catch (    BadLocationException e) {    }  }  if (historyView != null) {    SVNHistoryPage page=(SVNHistoryPage)historyView.getHistoryPage();    page.selectRevision(new SVNRevision.Number(listSelection.getRevision()));  }  lastSelectionWasText=false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200280,skillname);}  }
class C{  public static void o(double[][] A){  o(A,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);}  }
class C{  public void addClickingListener(OnWheelClickedListener listener){  clickingListeners.add(listener);}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public static byte[] compressForGzip(String string){  ByteArrayOutputStream os=null;  GZIPOutputStream gos=null;  try {    os=new ByteArrayOutputStream(string.length());    gos=new GZIPOutputStream(os);    gos.write(string.getBytes("UTF-8"));    byte[] compressed=os.toByteArray();    return compressed;  } catch (  IOException e) {    e.printStackTrace();  } finally {    okhttp3.internal.Util.closeQuietly(gos);    okhttp3.internal.Util.closeQuietly(os);  }  return null;}  }
class C{  public SimpleAsyncPollingContainerConfigurer eventListenerMethod(Object eventListener,String methodName){  MethodEventListenerAdapter methodEventListenerAdapter=new MethodEventListenerAdapter();  methodEventListenerAdapter.setDelegate(eventListener);  methodEventListenerAdapter.setMethodName(methodName);  methodEventListenerAdapter.afterPropertiesSet();  pollingEventListenerContainer.setEventListener(methodEventListenerAdapter);  return this;}  }
class C{  public void waitUntilFinished(){  flushTermination();  flushUpdate();  flushInsert();  shutdown();  for (int i=0; i < numberOfQueues; i++) {    while (!executors[i].isTerminated()) {      try {        executors[i].awaitTermination(10000000,TimeUnit.SECONDS);      } catch (      InterruptedException e) {      }    }  }  if (useBulkInsert) {    bulkInsert();  }  logFinalResults();  if (this.error != null) {    if (error instanceof RuntimeException) {      throw (RuntimeException)error;    } else {      throw new RuntimeException("One or more parallel tasks failed",this.error);    }  }}  }
class C{  public void onCreate(K key,R resource){}  }
class C{  public static String formatMillis(int millisec){  int seconds=(int)(millisec / 1000);  int hours=seconds / (60 * 60);  seconds%=(60 * 60);  int minutes=seconds / 60;  seconds%=60;  String time;  if (hours > 0) {    time=String.format(Locale.ROOT,"%d:%02d:%02d",hours,minutes,seconds);  } else {    time=String.format(Locale.ROOT,"%d:%02d",minutes,seconds);  }  return time;}  }
class C{  public Matrix3f adjoint(){  return adjoint(null);}  }
class C{  @Override public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  allowXMLCatalogPI=false;  if (dtdHandler != null) {    dtdHandler.unparsedEntityDecl(name,publicId,systemId,notationName);  }}  }
class C{  protected void createNetwork() throws Throwable {  sendContainerNetworkRequest(NetworkOperationType.CREATE);  verifyNetworkStateExists(networkStateReference);  sendGetNetworkStateRequest();}  }
class C{  private void pickCenterOverlap(ScoutWidget[] list){  for (int i=0; i < list.length; i++) {    ScoutWidget scoutWidget=list[i];    float centerX=scoutWidget.getX() + scoutWidget.getWidth() / 2;    float centerY=scoutWidget.getY() + scoutWidget.getHeight() / 2;    for (int j=0; j < list.length; j++) {      if (i == j)       continue;      ScoutWidget widget=list[j];      if (scoutWidget.isGuideline()) {        continue;      }      if (!widget.isGuideline() && ScoutWidget.distance(scoutWidget,widget) > MAX_DIST_FOR_CENTER_OVERLAP) {        continue;      }      if (!widget.isGuideline() || widget.isVerticalGuideline()) {        if (Math.abs(widget.getX() - centerX) < CENTER_ERROR) {          scoutWidget.setEdgeCentered(1,widget,Direction.WEST);        }        if (Math.abs(widget.getX() + widget.getWidth() - centerX) < CENTER_ERROR) {          scoutWidget.setEdgeCentered(1,widget,Direction.EAST);        }      }      if (!widget.isGuideline() || widget.isHorizontalGuideline()) {        if (Math.abs(widget.getY() - centerY) < CENTER_ERROR) {          scoutWidget.setEdgeCentered(0,widget,Direction.NORTH);        }        if (Math.abs(widget.getY() + widget.getHeight() - centerY) < CENTER_ERROR) {          scoutWidget.setEdgeCentered(0,widget,Direction.SOUTH);        }      }    }  }}  }
class C{  public JSONObject optJSONObject(String key){  Object o=opt(key);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  private BSPTree<Euclidean1D> childAfter(BSPTree<Euclidean1D> node){  if (isDirect(node)) {    return node.getPlus();  } else {    return node.getMinus();  }}  }
class C{  @Override public Object[] toArray(){  return backedSet.toArray();}  }
class C{  public void init(String title){  mTitleView=(TextView)findViewById(R.id.most_visited_title);  mThumbnailView=(MostVisitedThumbnail)findViewById(R.id.most_visited_thumbnail);  mTitleView.setText(title);  mTitlePaddingStart=ApiCompatibilityUtils.getPaddingStart(mTitleView);  mFaviconSize=getResources().getDimensionPixelSize(R.dimen.default_favicon_size);  int extraPaddingStart=mFaviconSize + mTitleView.getCompoundDrawablePadding();  ApiCompatibilityUtils.setPaddingRelative(mTitleView,mTitlePaddingStart + extraPaddingStart,0,0,0);}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList<Object>();}  }
class C{  public boolean start(){  if (!mIsStarted && !mIsStopped) {    mStopWatch.start();    mIsStarted=true;    return true;  }  return false;}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public static long floorDiv(final long a,final long b) throws MathRuntimeException {  if (b == 0l) {    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_DENOMINATOR);  }  final long m=a % b;  if ((a ^ b) >= 0l || m == 0l) {    return a / b;  } else {    return (a / b) - 1l;  }}  }
class C{  public void compose(final double[] operand,final int operandOffset,final double[] f,final double[] result,final int resultOffset){  for (int i=0; i < compIndirection.length; ++i) {    final int[][] mappingI=compIndirection[i];    double r=0;    for (int j=0; j < mappingI.length; ++j) {      final int[] mappingIJ=mappingI[j];      double product=mappingIJ[0] * f[mappingIJ[1]];      for (int k=2; k < mappingIJ.length; ++k) {        product*=operand[operandOffset + mappingIJ[k]];      }      r+=product;    }    result[resultOffset + i]=r;  }}  }
class C{  public static Value local(Value val){  if (val != null && isLocal(val))   return val; else   return null;}  }
class C{  public static boolean isEmpty(Object s){  return s == null || X.EMPTY.equals(s) || X.EMPTY.equals(s.toString().trim());}  }
class C{  public void testIntegerField() throws Exception {  AnObject empty=new AnObject();  AnObject full=helper.fill(new AnObject());  assertTrue(helper.areEquals(full,full));  assertFalse(helper.areEquals(empty,full));}  }
class C{  public static Integer toIntegerObject(Object obj){  if (obj == null) {    return null;  }  if (obj instanceof Integer) {    return (Integer)obj;  }  if (obj instanceof Number) {    return ((Number)obj).intValue();  }  Integer result=null;  try {    result=Integer.parseInt(obj.toString());  } catch (  Exception e) {  }  return result;}  }
class C{  @Nullable public TypeRef lookupType(String fullName){  return typeByName.get(getTypeNameInSymbolTable(fullName));}  }
class C{  public AtomicFile(File baseName){  mBaseName=baseName;  mBackupName=new File(baseName.getPath() + ".bak");}  }
class C{  public FieldRotation<T> revert(){  return new FieldRotation<T>(q0.negate(),q1,q2,q3,false);}  }
class C{  boolean doesProfileMatch(Experiment experiment,SegmentationProfile segmentationProfile,HttpHeaders headers,Context context){  return doesProfileMatch(experiment,segmentationProfile,headers,context,false);}  }
class C{  private static final void addSuperClasses(final TypeDecl t,final HashSet result){  if (t == null)   return;  if (t.isClassDecl() && !result.contains(t)) {    result.add((ClassDecl)t);  } else   if (t.isTypeVariable()) {    TypeVariable var=(TypeVariable)t;    for (int i=0; i < var.getNumTypeBound(); i++)     addSuperClasses(var.getTypeBound(i).type(),result);  } else   if (t instanceof LUBType || t instanceof GLBType) {    result.add(t);  } else   if (t.isInterfaceDecl())   result.add((ClassDecl)t.typeObject());}  }
class C{  private ChannelSelection createChannelSelectionError(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());  FilterFactory ff=CommonFactoryFinder.getFilterFactory();  Map<String,Expression> options=contrastEnhancement.getOptions();  options.put("algorithm",ff.literal("TestStretchToMinimumMaximum"));  options.put("minValue",ff.literal("1.0"));  options.put("maxValue",ff.literal("5.0"));  SelectedChannelType channelType=styleFactory.createSelectedChannelType("channel name",contrastEnhancement);  SelectedChannelType[] channels=new SelectedChannelType[3];  channels[0]=channelType;  channels[1]=channelType;  channels[2]=channelType;  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);  return channelSelection;}  }
class C{  public static boolean isNativePageUrl(String url,boolean isIncognito){  return nativePageType(url,null,isIncognito) != NativePageType.NONE;}  }
class C{  @NotNull @VisibleForTesting public static ModuleResourceRepository createForTest(@NotNull AndroidFacet facet,@NotNull Collection<VirtualFile> resourceDirectories){  return createForTest(facet,resourceDirectories,Collections.<LocalResourceRepository>emptyList());}  }
class C{  public LazyConnectionDataSourceProxy(AbstractReadRoutingDataSource abstractReadRoutingDataSource){  this.abstractReadRoutingDataSource=abstractReadRoutingDataSource;}  }
class C{  public static List<List<Double>> partitionVariable(List<Double> arr,int chunk){  int count=0;  List<List<Double>> ret=new ArrayList<List<Double>>();  while (count < arr.size()) {    List<Double> sublist=arr.subList(count,count + chunk);    count+=chunk;    ret.add(sublist);  }  for (  List<Double> lists : ret) {    if (lists.size() < chunk)     ret.remove(lists);  }  return ret;}  }
class C{  private void encodeContexts(){  int i, j;  int n_reachable=0, n_scc_reachable=0;  int n_full=0;  long max_contexts=Long.MIN_VALUE;  CgEdge p;  Random rGen=new Random();  pre_cnt=1;  max_scc_size=1;  for (i=0; i < n_func; ++i) {    vis_cg[i]=0;    indeg_cg[i]=0;    max_context_size_block[i]=0;  }  queue_cg.clear();  callGraphDFS(Constants.SUPER_MAIN);  for (i=0; i < n_func; ++i) {    if (vis_cg[i] == 0)     continue;    p=call_graph[i];    while (p != null) {      if (rep_cg[i] == rep_cg[p.t]) {        p.scc_edge=true;      } else {        p.scc_edge=false;        ++indeg_cg[rep_cg[p.t]];      }      p=p.next;    }    ++n_reachable;    if (rep_cg[i] == i)     ++n_scc_reachable;  }  for (i=0; i < n_func; ++i)   if (vis_cg[i] != 0 && rep_cg[i] != i) {    p=call_graph[i];    while (p.next != null)     p=p.next;    p.next=call_graph[rep_cg[i]];    call_graph[rep_cg[i]]=call_graph[i];  }  max_context_size_block[Constants.SUPER_MAIN]=1;  queue_cg.addLast(Constants.SUPER_MAIN);  while (!queue_cg.isEmpty()) {    i=queue_cg.getFirst();    queue_cg.removeFirst();    p=call_graph[i];    while (p != null) {      if (p.scc_edge == false) {        j=rep_cg[p.t];        if (Constants.MAX_CONTEXTS - max_context_size_block[i] < max_context_size_block[j]) {          long start=rGen.nextLong();          if (start < 0)           start=-start;          if (start > Constants.MAX_CONTEXTS - max_context_size_block[i]) {            start=Constants.MAX_CONTEXTS - max_context_size_block[i];            max_context_size_block[j]=Constants.MAX_CONTEXTS;          } else {            if (max_context_size_block[j] < start + max_context_size_block[i])             max_context_size_block[j]=start + max_context_size_block[i];          }          p.map_offset=start + 1;        } else {          p.map_offset=max_context_size_block[j] + 1;          max_context_size_block[j]+=max_context_size_block[i];        }        if (--indeg_cg[j] == 0)         queue_cg.addLast(j);      } else {        p.map_offset=1;      }      p=p.next;    }    if (max_context_size_block[i] > max_contexts)     max_contexts=max_context_size_block[i];  }  for (i=n_func - 1; i > -1; --i) {    if (vis_cg[i] == 0)     continue;    if (rep_cg[i] != i) {      max_context_size_block[i]=max_context_size_block[rep_cg[i]];      p=call_graph[i];      while (p.next.s == i)       p=p.next;      call_graph[rep_cg[i]]=p.next;      p.next=null;    }    if (max_context_size_block[i] == Constants.MAX_CONTEXTS)     ++n_full;    context_size[i]=max_context_size_block[i];    block_num[i]=1;  }  if (getOpts().geom_blocking()) {    for (i=0; i < n_func; ++i) {      if (vis_cg[i] == 0)       continue;      p=call_graph[i];      while (p != null) {        j=p.t;        if (j != i && p.scc_edge == true) {          if (context_size[j] <= Constants.MAX_CONTEXTS - max_context_size_block[i]) {            p.map_offset=context_size[j] + 1;            context_size[j]+=max_context_size_block[i];            ++block_num[j];          } else {            int iBlock=0;            if (block_num[j] > 1)             iBlock=rGen.nextInt(block_num[j] - 1) + 1;            p.map_offset=iBlock * max_context_size_block[j] + 1;          }        }        p=p.next;      }    }  }  ps.printf("Reachable Methods = %d, in which #Condensed Nodes = %d, #Full Context Nodes = %d \n",n_reachable - 1,n_scc_reachable - 1,n_full);  ps.printf("Maximum SCC = %d \n",max_scc_size);  ps.printf("The maximum context size = %e\n",(double)max_contexts);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Slow_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200935,skilltarget);}  }
class C{  protected double populationVariance(double[] v){  double mean=StatUtils.mean(v);  double sum=0;  for (  double val : v) {    sum+=(val - mean) * (val - mean);  }  return sum / v.length;}  }
class C{  @Override public boolean hasField(String fldName){  return currentScan.hasField(fldName);}  }
class C{  public static boolean searchInArray(int[] data,int key){  for (int i=0; i < data.length; i++) {    if (key == data[i]) {      return true;    }  }  return false;}  }
class C{  private void initialize(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {    Log.e("GradientRadioLayout","GradientRadioLayout is only Android 21+ compatible. The view will crash !");  }  final TypedArray styleAttributes=context.obtainStyledAttributes(attrs,R.styleable.GradientRadioLayout,defStyleAttr,defStyleRes);  mColorA=styleAttributes.getColor(R.styleable.GradientRadioLayout_colorA,getResources().getColor(R.color.color_a_default));  mColorB=styleAttributes.getColor(R.styleable.GradientRadioLayout_colorB,getResources().getColor(R.color.color_b_default));  mDegreesAngle=styleAttributes.getInt(R.styleable.GradientRadioLayout_angle,0);  styleAttributes.recycle();}  }
class C{  protected WSService importService(Service service){  String name=service.getQName().getLocalPart();  Port port=(Port)service.getPorts().values().iterator().next();  String location="";  List extensionElements=port.getExtensibilityElements();  for (  Object extension : extensionElements) {    if (extension instanceof SOAPAddress) {      SOAPAddress address=(SOAPAddress)extension;      location=address.getLocationURI();    }  }  WSService wsService=new WSService(this.namespace + name,location,this.wsdlLocation);  return wsService;}  }
class C{  public ApplicationType createApplicationTypeFor(Application app,Jvm jvm,String mainClass){  String[] appDesc=map.get(mainClass);  if (appDesc != null) {    return new MainClassApplicationType(app,appDesc[NAME],appDesc[DESCRIPTION],appDesc[ICON_PATH]);  }  return null;}  }
class C{  public static Map<String,Object> makeValidContext(ModelService model,String mode,Map<String,? extends Object> context) throws GenericServiceException {  Map<String,Object> newContext;  int modeInt=0;  if (mode.equalsIgnoreCase("in")) {    modeInt=1;  } else   if (mode.equalsIgnoreCase("out")) {    modeInt=2;  }  if (model == null) {    throw new GenericServiceException("Model service is null! Should never happen.");  } else {switch (modeInt) {case 2:      newContext=model.makeValid(context,ModelService.OUT_PARAM,true,null);    break;case 1:  newContext=model.makeValid(context,ModelService.IN_PARAM,true,null);break;default :throw new GenericServiceException("Invalid mode, should be either IN or OUT");}return newContext;}}  }
class C{  public UsersReportQuery comment(String value){  return unsafeParam("comment",value);}  }
class C{  public Vector2f(){  x=y=0;}  }
class C{  @Override public int addAttribute(QName qname,String attrType,String attrValue){  int index=fElement.getXercesAttribute(qname.uri,qname.localpart);  if (index < 0) {    AttrImpl attr=(AttrImpl)((CoreDocumentImpl)fElement.getOwnerDocument()).createAttributeNS(qname.uri,qname.rawname,qname.localpart);    attr.setNodeValue(attrValue);    index=fElement.setXercesAttributeNode(attr);    fDTDTypes.insertElementAt(attrType,index);    fAugmentations.insertElementAt(new AugmentationsImpl(),index);    attr.setSpecified(false);  } else {  }  return index;}  }
class C{  public boolean exists(){  return scanner != null;}  }
class C{  public void startDeleteJob(){  try {    Scheduler scheduler=Singleton.getScheduler();    JobDetail job=newJob(DeleteRepositoryJob.class).withIdentity("deletejob").build();    SimpleTrigger trigger=newTrigger().withIdentity("deletejob").withSchedule(simpleSchedule().withIntervalInSeconds(1).repeatForever()).build();    scheduler.scheduleJob(job,trigger);    scheduler.start();  } catch (  SchedulerException ex) {    LOGGER.severe(" caught a " + ex.getClass() + "\n with message: "+ ex.getMessage());  }}  }
class C{  public static GsAuthResponse registerGameServer(GsConnection gsConnection,byte requestedId,byte[] defaultAddress,List<IPRange> ipRanges,int port,int maxPlayers,String password){  GameServerInfo gsi=gameservers.get(requestedId);  if (gsi == null) {    log.info(gsConnection + " requestedID=" + requestedId+ " not aviable!");    return GsAuthResponse.NOT_AUTHED;  }  if (gsi.getConnection() != null) {    return GsAuthResponse.ALREADY_REGISTERED;  }  if (!gsi.getPassword().equals(password) || !NetworkUtils.checkIPMatching(gsi.getIp(),gsConnection.getIP())) {    log.info(gsi.getPassword() + " " + password);    log.info(gsConnection + " wrong ip or password!");    return GsAuthResponse.NOT_AUTHED;  }  gsi.setDefaultAddress(defaultAddress);  gsi.setIpRanges(ipRanges);  gsi.setPort(port);  gsi.setMaxPlayers(maxPlayers);  gsi.setConnection(gsConnection);  gsConnection.setGameServerInfo(gsi);  return GsAuthResponse.AUTHED;}  }
class C{  public boolean handleResponse(ZWaveController zController,SerialMessage lastSentMessage,SerialMessage incomingMessage) throws ZWaveSerialMessageException {  logger.warn("TODO: {} unsupported RESPONSE.",incomingMessage.getMessageClass().getLabel());  return false;}  }
class C{  public static void buildUnpaidOrderTable(Connection conn){  try {    Statement stmt=conn.createStatement();    stmt.execute("CREATE TABLE UnpaidOrder " + "( CustomerNumber CHAR(10) NOT NULL REFERENCES Customer(CustomerNumber), " + "  ProdNum CHAR(10) NOT NULL REFERENCES Coffee(ProdNum),"+ "  OrderDate CHAR(10),"+ "  Quantity DOUBLE,"+ "  Cost DOUBLE )");  } catch (  SQLException ex) {    System.out.println("ERROR: " + ex.getMessage());  }}  }
class C{  public void addTypeBound(Access node){  List<Access> list=(parent == null || state == null) ? getTypeBoundListNoTransform() : getTypeBoundList();  list.addChild(node);}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Integer_info cu=(CONSTANT_Integer_info)cp;  return ((int)bytes) - (int)cu.bytes;}  }
class C{  public <T>T recall(File file,Class<T> type) throws IOException {  try (FileInputStream fis=new FileInputStream(file)){    return serializer.read(fis,type);  } }  }
class C{  private void handleFinishedH(boolean reschedule){switch (mVerb) {case VERB_EXECUTING:case VERB_STOPPING:    closeAndCleanupJobH(reschedule);  break;default :break;}}  }
class C{  public static int bestFactor(long size,Transaction tx){  int avail=tx.bufferMgr().available();  if (avail <= 1)   return 1;  long k=size;  double i=1.0;  while (k > avail) {    i++;    k=(int)Math.ceil(size / i);  }  return (int)k;}  }
class C{  protected void restoreBaseURI(){  fBaseURI.pop();  fLiteralSystemID.pop();  fExpandedSystemID.pop();  fBaseURIScope.pop();  fCurrentBaseURI.setBaseSystemId((String)fBaseURI.peek());  fCurrentBaseURI.setLiteralSystemId((String)fLiteralSystemID.peek());  fCurrentBaseURI.setExpandedSystemId((String)fExpandedSystemID.peek());}  }
class C{  @Deprecated public MapCursor addCursor(int x,int y,byte direction,byte type){  return addCursor(x,y,direction,type,true);}  }
class C{  public synchronized static LuaState newLuaState(){  int i=getNextStateIndex();  LuaState L=new LuaState(i);  states.add(i,L);  return L;}  }
class C{  public boolean equals(final Quaternion q,final double eps){  return Precision.equals(q0,q.getQ0(),eps) && Precision.equals(q1,q.getQ1(),eps) && Precision.equals(q2,q.getQ2(),eps)&& Precision.equals(q3,q.getQ3(),eps);}  }
class C{  @Override public Collection<SerialMessage> initialize(boolean refresh){  ArrayList<SerialMessage> result=new ArrayList<SerialMessage>();  if (isSupportRequestSupported == true && (refresh == true || initialiseDone == false) && getVersion() > 1) {    result.add(getSupportedMessage());  }  return result;}  }
class C{  @SuppressWarnings("WeakerAccess") public boolean hasHeader(){  return header != null;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static Zmat o(Zdiagmat D,Zmat A) throws JampackException {  if (D.order != A.nrow) {    throw new JampackException("Unconformity in product.");  }  Zmat B=new Zmat(A.nrow,A.ncol);  for (int i=0; i < A.nrow; i++) {    for (int j=0; j < A.nc; j++) {      B.re[i][j]=D.re[i] * A.re[i][j] - D.im[i] * A.im[i][j];      B.im[i][j]=D.re[i] * A.im[i][j] + D.im[i] * A.re[i][j];    }  }  return B;}  }
class C{  protected AbstractLeaseMap(Map map,Lease lease,long duration){  this(map);  map.put(lease,new Long(duration));}  }
class C{  public static String grabQueryString(String text) throws IOException {  BufferedReader r=new BufferedReader(new StringReader(text));  String aLine;  StringBuilder buf=new StringBuilder();  boolean passedScore=false;  while ((aLine=r.readLine()) != null) {    aLine=aLine.trim();    if (aLine.startsWith("Score")) {      if (!passedScore)       passedScore=true; else       break;    }    if (aLine.startsWith("Query")) {      String[] words=aLine.split(" +");      buf.append(words[2]);    }  }  return buf.toString().replaceAll("\n","").replaceAll("\r","");}  }
class C{  public Math_Vector add(Math_Vector other){  this.x+=other.x;  this.y+=other.y;  return this;}  }
class C{  @deprecated public LanguageMatcherData addDistance(String desired,String supported,int percent,String comment){  return addDistance(desired,supported,percent,false,comment);}  }
class C{  public Location(int x,int y,int z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public static String dottedClassName(String typeDescriptor){  if (!isByteCodeClassName(typeDescriptor)) {    String t=typeDescriptor;    int idx=0;    while (idx < t.length() && t.charAt(idx) == '[') {      idx++;    }    String c=t.substring(idx);    if (c.length() == 1 && (c.startsWith("I") || c.startsWith("B") || c.startsWith("C")|| c.startsWith("S")|| c.startsWith("J")|| c.startsWith("D")|| c.startsWith("F")|| c.startsWith("Z"))) {      Type ty=getType(t);      return ty == null ? "" : getType(t).toString();    }    throw new IllegalArgumentException("typeDescriptor is not a class typedescriptor: '" + typeDescriptor + "'");  }  String t=typeDescriptor;  int idx=0;  while (idx < t.length() && t.charAt(idx) == '[') {    idx++;  }  String className=typeDescriptor.substring(idx);  className=className.substring(className.indexOf('L') + 1,className.indexOf(';'));  className=className.replace('/','.');  return className;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (cookie == null)   throw new InvalidObjectException("null cookie reference");  if (landlord == null)   throw new InvalidObjectException("null landlord reference");  if (landlordUuid == null)   throw new InvalidObjectException("null landlordUuid reference");}  }
class C{  @Override public long skip(long n){  if (n < 0) {    throw new IllegalArgumentException("Number of characters to skip is less than zero: " + n);  }  if (idx >= charSequence.length()) {    return -1;  }  int dest=(int)Math.min(charSequence.length(),idx + n);  int count=dest - idx;  idx=dest;  return count;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public IntType fullCopy(){  IntType tree=(IntType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static void deleteConnection(GeoServerConnection connection){  getInstance().internal_deleteConnection(connection);}  }
class C{  public boolean isAssumedNonNullBefore(Unit s,Immediate i){  AnalysisInfo ai=(AnalysisInfo)getFlowBefore(s);  return ai.get(i) == NON_NULL;}  }
class C{  public boolean hasSet(String name){  return m_map.containsKey(name);}  }
class C{  protected AbstractJmsListener(Delegator delegator){  this.dispatcher=ServiceContainer.getLocalDispatcher("JMSDispatcher",delegator);}  }
class C{  public static String millisToString(long millis){  return Strings.millisToString(millis,false);}  }
class C{  public final void incrementIdCounterTo(int id){  int diff=id - mIdCounter.get();  if (diff < 0)   return;  mIdCounter.addAndGet(diff);  updateSharedPreference();}  }
class C{  public static String join(Collection<? extends IdentifiableObject> objects){  if (objects != null && objects.size() > 0) {    Iterator<? extends IdentifiableObject> iterator=objects.iterator();    StringBuilder builder=new StringBuilder(iterator.next().getDisplayName());    while (iterator.hasNext()) {      builder.append(SEPARATOR_JOIN).append(iterator.next().getDisplayName());    }    return builder.toString();  }  return null;}  }
class C{  public static boolean isMeganizedDAAFile(String fileName,boolean meganized) throws IOException {  try (InputReaderLittleEndian ins=new InputReaderLittleEndian(new FileInputStreamAdapter(fileName))){    long magicNumber=ins.readLong();    if (magicNumber != DAAHeader.MAGIC_NUMBER)     throw new IOException("Input file is not a DAA file.");    long version=ins.readLong();    if (version > DAAHeader.DAA_VERSION)     throw new IOException("DAA version requires later version of MEGAN.");    if (!meganized)     return true;    ins.skip(76);    int meganVersion=ins.readInt();    if (meganVersion <= 0)     return false;    if (meganVersion > DAAHeader.MEGAN_VERSION)     throw new IOException("DAA version requires later version of MEGAN."); else     return true;  } }  }
class C{  public PollsDeleteVoteQuery(VkApiClient client,UserActor actor,int pollId,int answerId){  super(client,"polls.deleteVote",BoolInt.class);  accessToken(actor.getAccessToken());  pollId(pollId);  answerId(answerId);}  }
class C{  public static String callPayPal(HttpServletRequest request,HttpServletResponse response){  Locale locale=UtilHttp.getLocale(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  String orderId=(String)request.getAttribute("orderId");  GenericValue orderHeader=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Cannot get the order header for order: " + orderId,module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingOrderHeader",locale));    return "error";  }  String orderTotal=orderHeader.getBigDecimal("grandTotal").toPlainString();  String currencyUom=orderHeader.getString("currencyUom");  GenericValue productStore=ProductStoreWorker.getProductStore(request);  if (productStore == null) {    Debug.logError("ProductStore is null",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingMerchantConfiguration",locale));    return "error";  }  GenericValue paymentConfig=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStore.getString("productStoreId"),"EXT_PAYPAL",null,true);  String configString=null;  String paymentGatewayConfigId=null;  if (paymentConfig != null) {    paymentGatewayConfigId=paymentConfig.getString("paymentGatewayConfigId");    configString=paymentConfig.getString("paymentPropertiesPath");  }  if (configString == null) {    configString="payment.properties";  }  String company=UtilFormatOut.checkEmpty(productStore.getString("companyName"),"");  String itemName=UtilProperties.getMessage(resource,"AccountingOrderNr",locale) + orderId + " "+ (company != null ? UtilProperties.getMessage(commonResource,"CommonFrom",locale) + " " + company : "");  String itemNumber="0";  String redirectUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"redirectUrl",configString,"payment.paypal.redirect");  String notifyUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"notifyUrl",configString,"payment.paypal.notify");  String returnUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"returnUrl",configString,"payment.paypal.return");  String cancelReturnUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"cancelReturnUrl",configString,"payment.paypal.cancelReturn");  String imageUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"imageUrl",configString,"payment.paypal.image");  String payPalAccount=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"businessEmail",configString,"payment.paypal.business");  if (UtilValidate.isEmpty(redirectUrl) || UtilValidate.isEmpty(notifyUrl) || UtilValidate.isEmpty(returnUrl)|| UtilValidate.isEmpty(imageUrl)|| UtilValidate.isEmpty(payPalAccount)) {    Debug.logError("Payment properties is not configured properly, some notify URL from PayPal is not correctly defined!",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingMerchantConfiguration",locale));    return "error";  }  Map<String,Object> parameters=new LinkedHashMap<String,Object>();  parameters.put("cmd","_xclick");  parameters.put("business",payPalAccount);  parameters.put("item_name",itemName);  parameters.put("item_number",itemNumber);  parameters.put("invoice",orderId);  parameters.put("custom",userLogin.getString("userLoginId"));  parameters.put("amount",orderTotal);  parameters.put("currency_code",currencyUom);  parameters.put("return",returnUrl);  if (UtilValidate.isNotEmpty(cancelReturnUrl))   parameters.put("cancel_return",cancelReturnUrl);  parameters.put("notify_url",notifyUrl);  parameters.put("image_url",imageUrl);  parameters.put("no_note","1");  parameters.put("no_shipping","1");  String encodedParameters=UtilHttp.urlEncodeArgs(parameters,false);  String redirectString=redirectUrl + "?" + encodedParameters;  request.getSession().setAttribute("PAYPAL_ORDER",orderId);  try {    response.sendRedirect(redirectString);  } catch (  IOException e) {    Debug.logError(e,"Problems redirecting to PayPal",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsConnectingWithPayPal",locale));    return "error";  }  return "success";}  }
class C{  @Override public void doNamespaceBundleSplit() throws Exception {  int maxBundleCount=pulsar.getConfiguration().getLoadBalancerNamespaceMaximumBundles();  long maxBundleTopics=pulsar.getConfiguration().getLoadBalancerNamespaceBundleMaxTopics();  long maxBundleSessions=pulsar.getConfiguration().getLoadBalancerNamespaceBundleMaxSessions();  long maxBundleMsgRate=pulsar.getConfiguration().getLoadBalancerNamespaceBundleMaxMsgRate();  long maxBundleBandwidth=pulsar.getConfiguration().getLoadBalancerNamespaceBundleMaxBandwidthMbytes() * MBytes;  log.info("Running namespace bundle split with thresholds: topics {}, sessions {}, msgRate {}, bandwidth {}, maxBundles {}",maxBundleTopics,maxBundleSessions,maxBundleMsgRate,maxBundleBandwidth,maxBundleCount);  if (this.lastLoadReport == null || this.lastLoadReport.getBundleStats() == null) {    return;  }  Map<String,NamespaceBundleStats> bundleStats=this.lastLoadReport.getBundleStats();  Set<String> bundlesToBeSplit=new HashSet<>();  for (  Map.Entry<String,NamespaceBundleStats> statsEntry : bundleStats.entrySet()) {    String bundleName=statsEntry.getKey();    NamespaceBundleStats stats=statsEntry.getValue();    long totalSessions=stats.consumerCount + stats.producerCount;    double totalMsgRate=stats.msgRateIn + stats.msgRateOut;    double totalBandwidth=stats.msgThroughputIn + stats.msgThroughputOut;    boolean needSplit=false;    if (stats.topics > maxBundleTopics || totalSessions > maxBundleSessions || totalMsgRate > maxBundleMsgRate || totalBandwidth > maxBundleBandwidth) {      if (stats.topics <= 1) {        log.info("Unable to split hot namespace bundle {} since there is only one topic.",bundleName);      } else {        NamespaceName namespaceName=new NamespaceName(getNamespaceNameFromBundleName(bundleName));        int numBundles=pulsar.getNamespaceService().getBundleCount(namespaceName);        if (numBundles >= maxBundleCount) {          log.info("Unable to split hot namespace bundle {} since the namespace has too many bundles.",bundleName);        } else {          needSplit=true;        }      }    }    if (needSplit) {      if (this.getLoadBalancerAutoBundleSplitEnabled()) {        log.info("Will split hot namespace bundle {}, topics {}, producers+consumers {}, msgRate in+out {}, bandwidth in+out {}",bundleName,stats.topics,totalSessions,totalMsgRate,totalBandwidth);        bundlesToBeSplit.add(bundleName);      } else {        log.info("DRY RUN - split hot namespace bundle {}, topics {}, producers+consumers {}, msgRate in+out {}, bandwidth in+out {}",bundleName,stats.topics,totalSessions,totalMsgRate,totalBandwidth);      }    }  }  if (bundlesToBeSplit.size() > 0) {    for (    String bundleName : bundlesToBeSplit) {      try {        pulsar.getAdminClient().namespaces().splitNamespaceBundle(getNamespaceNameFromBundleName(bundleName),getBundleRangeFromBundleName(bundleName));        log.info("Successfully split namespace bundle {}",bundleName);      } catch (      Exception e) {        log.error("Failed to split namespace bundle {}",bundleName,e);      }    }    this.setLoadReportForceUpdateFlag();  }}  }
class C{  public void writeByteByteInt(ByteByteInt a) throws IOException {  io.write(a.getByte1());  io.write(a.getByte2());  writeInt(a.getValue());}  }
class C{  public ShortArrayCodeOutput(short[] array){  if (array == null) {    throw new IllegalArgumentException("array is null.");  }  this.array=array;}  }
class C{  private void parseLayoutAttributes(String layoutFile,SootClass layoutClass,AXmlNode rootNode){  boolean isSensitive=false;  int id=-1;  for (  Entry<String,AXmlAttribute<?>> entry : rootNode.getAttributes().entrySet()) {    String attrName=entry.getKey().trim();    AXmlAttribute<?> attr=entry.getValue();    if (attrName.isEmpty())     continue;    if (!isAndroidNamespace(attr.getNamespace()))     continue;    if (attrName.equals("id") && (attr.getType() == AxmlVisitor.TYPE_REFERENCE || attr.getType() == AxmlVisitor.TYPE_INT_HEX))     id=(Integer)attr.getValue(); else     if (attrName.equals("password")) {      if (attr.getType() == AxmlVisitor.TYPE_INT_HEX)       isSensitive=((Integer)attr.getValue()) != 0; else       if (attr.getType() == AxmlVisitor.TYPE_INT_BOOLEAN)       isSensitive=(Boolean)attr.getValue(); else       throw new RuntimeException("Unknown representation of boolean data type");    } else     if (!isSensitive && attrName.equals("inputType") && attr.getType() == AxmlVisitor.TYPE_INT_HEX) {      int tp=(Integer)attr.getValue();      isSensitive=((tp & TYPE_NUMBER_VARIATION_PASSWORD) == TYPE_NUMBER_VARIATION_PASSWORD) || ((tp & TYPE_TEXT_VARIATION_PASSWORD) == TYPE_TEXT_VARIATION_PASSWORD) || ((tp & TYPE_TEXT_VARIATION_VISIBLE_PASSWORD) == TYPE_TEXT_VARIATION_VISIBLE_PASSWORD)|| ((tp & TYPE_TEXT_VARIATION_WEB_PASSWORD) == TYPE_TEXT_VARIATION_WEB_PASSWORD);    } else     if (isActionListener(attrName) && attr.getType() == AxmlVisitor.TYPE_STRING && attr.getValue() instanceof String) {      String strData=((String)attr.getValue()).trim();      addCallbackMethod(layoutFile,strData);    } else     if (attr.getType() == AxmlVisitor.TYPE_STRING && attrName.equals("text")) {    } else     if (DEBUG && attr.getType() == AxmlVisitor.TYPE_STRING) {      System.out.println("Found unrecognized XML attribute:  " + attrName);    }  }  addToMapSet(this.userControls,layoutFile,new LayoutControl(id,layoutClass,isSensitive));}  }
class C{  @PostConstruct public void init(){  listenerContainer=cacheRegistrationService.registerToAlarms(this);}  }
class C{  @Override public void run(){  while (!shutdownRequestMade) {    try {      ObjectAndMethod objectAndMethod=taskQueue.poll(THREAD_SHUTDOWN_CHECK_INTERVAL,TimeUnit.MILLISECONDS);      if (objectAndMethod != null) {        callCorrectMethod(objectAndMethod);      }    } catch (    InterruptedException e) {      LOGGER.warn("Cache Listener thread interrupted in MultiThreadedListener.",e);    }  }  ObjectAndMethod objectAndMethod;  while ((objectAndMethod=taskQueue.poll()) != null) {    callCorrectMethod(objectAndMethod);  }}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public boolean hasNext(){  if (error || currentClass == null)   return false;  if (currentCount < currentClass.getFirst())   return true;  currentClass=null;  while (classes.size() > 0) {    currentCount=0;    Pair<Integer,Long> next=classes.remove(0);    if (next != null && next.getFirst() > 0 && next.getSecond() >= 0) {      try {        classDumpReader.seek(next.getSecond());      } catch (      IOException e) {        Basic.caught(e);        return false;      }      currentClass=next;      return true;    }  }  return false;}  }
class C{  public void writeLong(long value) throws JMSException {  initializeWriting();  try {    this.dataOut.write(_LONG);    this.dataOut.writeLong(value);  } catch (  IOException ioe) {    raise(ioe);  }}  }
class C{  public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {  String str=data == null ? null : data.toString();  writeStringToFile(file,str,encoding,append);}  }
class C{  public SpaceConfigurationException(String str,Throwable cause){  super(str,cause);}  }
class C{  @Override public void disconnect(long timeout) throws AWSIotException, AWSIotTimeoutException {  super.disconnect(timeout);}  }
class C{  @NonNull public static StorableFence or(@NonNull StorableFence... fences){  return StorableFence.or(Arrays.asList(fences));}  }
class C{  public LoadInfo(LoadInfo other){  __isset_bit_vector.clear();  __isset_bit_vector.or(other.__isset_bit_vector);  this.averageLoad=other.averageLoad;  this.oldGC=other.oldGC;  this.threadNum=other.threadNum;  this.queueSize=other.queueSize;  if (other.isSetMethodQpsMap()) {    Map<String,Double> __this__methodQpsMap=new HashMap<String,Double>();    for (    Map.Entry<String,Double> other_element : other.methodQpsMap.entrySet()) {      String other_element_key=other_element.getKey();      Double other_element_value=other_element.getValue();      String __this__methodQpsMap_copy_key=other_element_key;      Double __this__methodQpsMap_copy_value=other_element_value;      __this__methodQpsMap.put(__this__methodQpsMap_copy_key,__this__methodQpsMap_copy_value);    }    this.methodQpsMap=__this__methodQpsMap;  }}  }
class C{  private void checkPathParameterConditions(Method method,FieldSelector selector){  TypeRef type=selector.getType();  WellKnownType wkt=type.getWellKnownType();  if (type.isMap()) {    error(method,"map field not allowed: reached via '%s' on message '%s'.",selector.toString(),getInputMessageName(method));  } else   if (type.isRepeated()) {    error(method,"repeated field not allowed: reached via '%s' on message '%s'.",selector,getInputMessageName(method));  } else   if (type.isMessage() && !wkt.allowedAsPathParameter()) {    error(method,"message field not allowed: reached via '%s' on message '%s'.",selector,getInputMessageName(method));  }}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  private Style renderSymbol(Style style,FeatureTypeStyle ftsToRender,Rule ruleToRender,RuleRenderOptions options){  int symbolIndex=SelectedSymbol.getInstance().getSymbolIndex();  RuleRenderVisitor visitor=new RuleRenderVisitor(ftsToRender,ruleToRender,symbolIndex,options);  style.accept(visitor);  Style copy=(Style)visitor.getCopy();  return copy;}  }
class C{  @Inject public Jersey2UnhandledExceptionHandler(ProjectApiErrors projectApiErrors,ApiExceptionHandlerUtils utils){  super(projectApiErrors,utils);  this.singletonGenericServiceError=Collections.singleton(projectApiErrors.getGenericServiceError());  this.genericServiceErrorHttpStatusCode=projectApiErrors.getGenericServiceError().getHttpStatusCode();}  }
class C{  public SuffixFileFilter(String[] suffixes,IOCase caseSensitivity){  if (suffixes == null) {    throw new IllegalArgumentException("The array of suffixes must not be null");  }  this.suffixes=new String[suffixes.length];  System.arraycopy(suffixes,0,this.suffixes,0,suffixes.length);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  boolean descendsFrom(ClassFile cf){  return descendsFrom(cf.toString());}  }
class C{  public DocumentNGramDistroGraph allNotIn(DocumentNGramDistroGraph dgOtherGraph){  EdgeCachedLocator eclLocator=new EdgeCachedLocator(100);  DocumentNGramDistroGraph dgClone=(DocumentNGramDistroGraph)clone();  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gCloneLevel=dgClone.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gOtherGraphLevel=dgOtherGraph.getGraphLevelByNGramSize(iCurLvl);    if (gOtherGraphLevel == null)     continue;    java.util.Iterator iIter=gCloneLevel.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gOtherGraphLevel,weCurItem.getVertexA(),weCurItem.getVertexB());      if (eEdge != null)       try {        gCloneLevel.removeEdge(weCurItem);        dgClone.getEdgesToDistros().remove(weCurItem);        iIter=gCloneLevel.getEdgeSet().iterator();      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }  return dgClone;}  }
class C{  public void received(ByteBuffer buffer){  hasReceivedData=true;  lastReceiveTime=System.currentTimeMillis();}  }
class C{  public void populateField(FieldIdEnum fieldId,Expression value){  if (fieldConfigManager == null) {    return;  }  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (fieldConfig != null) {    fieldConfig.populate(value);  } else {    ConsoleManager.getInstance().error(this,String.format("populateField - %s : %s",Localisation.getString(StandardPanel.class,"StandardPanel.unknownField"),fieldId));  }}  }
class C{  public void onSuccess(JSONObject response){}  }
class C{  @Override public void initialize(){  getUserList();}  }
class C{  public static void deleteAll(){  Helper.delete(new BasicDBObject(),AccessLog.class);}  }
class C{  public static final void shuffle(long[] a,Random r){  shuffle(a,0,a.length,r);}  }
class C{  public static CharSequence extractFlagsForEditText(CharSequence text){  char[] textChars=text.toString().toCharArray();  ArrayList<Character> characters=new ArrayList<>();  ArrayList<WhatsappUtil.Flag> flags=new ArrayList<>();  WhatsappUtil.Flag boldFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,BOLD_FLAG);  WhatsappUtil.Flag strikeFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,STRIKE_FLAG);  WhatsappUtil.Flag italicFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,ITALIC_FLAG);  for (int i=0, j=0; i < textChars.length; i++) {    char c=textChars[i];    if (c == BOLD_FLAG) {      if (boldFlag.start == INVALID_INDEX) {        if (WhatsappUtil.hasFlagSameLine(text,BOLD_FLAG,i + 1)) {          boldFlag.start=j + 1;        }      } else {        boldFlag.end=j;        flags.add(boldFlag);        boldFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,BOLD_FLAG);      }    } else     if (c == STRIKE_FLAG) {      if (strikeFlag.start == INVALID_INDEX) {        if (WhatsappUtil.hasFlagSameLine(text,STRIKE_FLAG,i + 1)) {          strikeFlag.start=j + 1;        }      } else {        strikeFlag.end=j;        flags.add(strikeFlag);        strikeFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,STRIKE_FLAG);      }    } else     if (c == ITALIC_FLAG) {      if (italicFlag.start == INVALID_INDEX) {        if (WhatsappUtil.hasFlagSameLine(text,ITALIC_FLAG,i + 1)) {          italicFlag.start=j + 1;        }      } else {        italicFlag.end=j;        flags.add(italicFlag);        italicFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,ITALIC_FLAG);      }    }    characters.add(c);    j++;  }  String formatted=WhatsappUtil.getText(characters);  SpannableStringBuilder builder=new SpannableStringBuilder(formatted);  for (int i=0; i < flags.size(); i++) {    WhatsappUtil.Flag flag=flags.get(i);    if (flag.flag == BOLD_FLAG) {      StyleSpan bss=new StyleSpan(Typeface.BOLD);      builder.setSpan(bss,flag.start,flag.end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);      builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.start - 1,flag.start,Spanned.SPAN_INCLUSIVE_INCLUSIVE);      builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.end,flag.end + 1,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    } else     if (flag.flag == STRIKE_FLAG) {      builder.setSpan(new StrikethroughSpan(),flag.start,flag.end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);      builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.start - 1,flag.start,Spanned.SPAN_INCLUSIVE_INCLUSIVE);      builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.end,flag.end + 1,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    } else     if (flag.flag == ITALIC_FLAG) {      StyleSpan iss=new StyleSpan(Typeface.ITALIC);      builder.setSpan(iss,flag.start,flag.end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);      builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.start - 1,flag.start,Spanned.SPAN_INCLUSIVE_INCLUSIVE);      builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.end,flag.end + 1,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    }  }  return builder;}  }
class C{  private void bindViewType(WXComponent component){  int id=generateViewType(component);  if (mViewTypes == null) {    mViewTypes=new SparseArray<>();  }  ArrayList<WXComponent> mTypes=mViewTypes.get(id);  if (mTypes == null) {    mTypes=new ArrayList<>();    mViewTypes.put(id,mTypes);  }  mTypes.add(component);}  }
class C{  public AudioMoveToAlbumQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public void startFirstSampleTimer(){}  }
class C{  public void startPlaying(String file){  if (this.readyPlayer(file) && this.player != null) {    this.player.start();    this.setState(STATE.MEDIA_RUNNING);    this.seekOnPrepared=0;  } else {    this.prepareOnly=false;  }}  }
class C{  protected void checkForNumericAttribute(ProposedTuples tuples,SemanticGraph sg,IndexedWord word){  if (sg.hasChildWithReln(word,UniversalEnglishGrammaticalRelations.NUMERIC_MODIFIER)) {    IndexedWord nummod=sg.getChildWithReln(word,UniversalEnglishGrammaticalRelations.NUMERIC_MODIFIER);    if (nummod.index() < word.index()) {      tuples.addTuple(word,nummod);    }  } else   if (sg.hasChildWithReln(word,SemanticGraphEnhancer.QMOD_RELATION)) {    IndexedWord qmod=sg.getChildWithReln(word,SemanticGraphEnhancer.QMOD_RELATION);    tuples.addTuple(word,qmod);  }}  }
class C{  public static int nullSafeHashCode(double[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + hashCode(array[i]);  }  return hash;}  }
class C{  public static void showToast(Context context,String message){  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  public boolean hasItem(){  return this.item != null;}  }
class C{  @Override public long blocksAccessed(){  return p.blocksAccessed();}  }
class C{  public IntObjectHashMap(){  this(defaultCapacity);}  }
class C{  private void createClassBody(polyglot.ast.ClassBody classBody){  staticFieldInits=null;  fieldInits=null;  initializerBlocks=null;  staticInitializerBlocks=null;  Iterator it=classBody.members().iterator();  while (it.hasNext()) {    Object next=it.next();    if (next instanceof polyglot.ast.MethodDecl) {      createMethodDecl((polyglot.ast.MethodDecl)next);    } else     if (next instanceof polyglot.ast.FieldDecl) {      createFieldDecl((polyglot.ast.FieldDecl)next);    } else     if (next instanceof polyglot.ast.ConstructorDecl) {      createConstructorDecl((polyglot.ast.ConstructorDecl)next);    } else     if (next instanceof polyglot.ast.ClassDecl) {      Util.addInnerClassTag(sootClass,Util.getSootType(((polyglot.ast.ClassDecl)next).type()).toString(),sootClass.getName(),((polyglot.ast.ClassDecl)next).name().toString(),Util.getModifier(((polyglot.ast.ClassDecl)next).flags()));    } else     if (next instanceof polyglot.ast.Initializer) {      createInitializer((polyglot.ast.Initializer)next);    } else     if (Options.v().verbose()) {      G.v().out.println("Class Body Member not implemented for type " + next.getClass().getName());    }  }  handleInnerClassTags(classBody);  handleClassLiteral(classBody);  handleAssert(classBody);}  }
class C{  public Matrix copy(){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  public Iterator items(String group,String expr){  Expression e=ExpressionParser.parse(expr);  if (!(e instanceof Predicate) || ExpressionParser.getError() != null)   return Collections.EMPTY_LIST.iterator();  return items(group,(Predicate)e);}  }
class C{  public void write(IOutputWriter indexWriter) throws IOException {  for (  Object[] dataRecord : data) {switch ((Character)dataRecord[1]) {case 'i':      indexWriter.writeInt((Integer)dataRecord[2]);    break;case 'f':  indexWriter.writeFloat((Float)dataRecord[2]);break;case 'l':indexWriter.writeLong((Long)dataRecord[2]);break;case 'b':indexWriter.write((Byte)dataRecord[2]);break;case 'B':indexWriter.writeByteByteInt((ByteByteInt)dataRecord[2]);break;case 'c':indexWriter.writeChar((Character)dataRecord[2]);break;}}}  }
class C{  public boolean check(Player player,boolean warn){  QuestStateList qsl=player.getQuestStateList();  return checkFinishedQuests(qsl) && checkUnfinishedQuests(qsl) && checkAcquiredQuests(qsl)&& checkNoAcquiredQuests(qsl)&& checkEquippedItems(player,warn);}  }
class C{  public static boolean checkComplete(Context context,String directory,ShareSecurityCheck securityCheck,Intent intentResult){  String meta=securityCheck.getMetaContentMap().get(RESOURCE_META_FILE);  if (meta == null) {    return true;  }  ShareResPatchInfo.parseResPatchInfoFirstLine(meta,resPatchInfo);  if (resPatchInfo.resArscMd5 == null) {    return true;  }  if (!ShareResPatchInfo.checkResPatchInfo(resPatchInfo)) {    intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,ShareConstants.ERROR_PACKAGE_CHECK_RESOURCE_META_CORRUPTED);    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);    return false;  }  String resourcePath=directory + "/" + RESOURCE_PATH+ "/";  File resourceDir=new File(resourcePath);  if (!resourceDir.exists() || !resourceDir.isDirectory()) {    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_DIRECTORY_NOT_EXIST);    return false;  }  File resourceFile=new File(resourcePath + RESOURCE_FILE);  if (!resourceFile.exists()) {    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_FILE_NOT_EXIST);    return false;  }  try {    TinkerResourcePatcher.isResourceCanPatch(context);  } catch (  Throwable e) {    Log.e(TAG,"resource hook check failed.",e);    intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,e);    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_LOAD_EXCEPTION);    return false;  }  return true;}  }
class C{  protected void transform(byte[] in,int off){  updateCheckSumAndEncryptBlock(in,off);}  }
class C{  public void seekToPlaying(int milliseconds){  if (this.readyPlayer(this.audioFile)) {    this.player.seekTo(milliseconds);    Log.d(LOG_TAG,"Send a onStatus update for the new seek");    sendStatusChange(MEDIA_POSITION,null,(milliseconds / 1000.0f));  } else {    this.seekOnPrepared=milliseconds;  }}  }
class C{  @Override public void actionPerformed(ActionEvent e){}  }
class C{  public PollsCreateQuery question(String value){  return unsafeParam("question",value);}  }
class C{  public boolean isEmptyResponse(){  return isOptionEnabled(UrlFilterRuleOption.EMPTY_RESPONSE);}  }
class C{  protected VirtualFile createFile(String filePath,String contents){  assertPathIsNotAbsolute(filePath);  try {    return testFixture.getTempDirFixture().createFile(filePath,contents);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stagger_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200898,skilltarget,skillcaster,skillname);}  }
class C{  private static BigDecimal normalizeDecimalValue(BigDecimal bigDecimal,int allowedPrecision){  if (bigDecimal.precision() > allowedPrecision) {    return null;  }  return bigDecimal;}  }
class C{  public Boolean removeColumn(Column columnToRemove){  return this.columns.remove(columnToRemove);}  }
class C{  private static boolean extractDexToJar(ZipFile zipFile,ZipEntry entryFile,File extractTo,String targetMd5) throws IOException {  int numAttempts=0;  boolean isExtractionSuccessful=false;  while (numAttempts < MAX_EXTRACT_ATTEMPTS && !isExtractionSuccessful) {    numAttempts++;    FileOutputStream fos=new FileOutputStream(extractTo);    InputStream in=zipFile.getInputStream(entryFile);    ZipOutputStream zos=null;    BufferedInputStream bis=null;    TinkerLog.i(TAG,"try Extracting " + extractTo.getPath());    try {      zos=new ZipOutputStream(new BufferedOutputStream(fos));      bis=new BufferedInputStream(in);      byte[] buffer=new byte[ShareConstants.BUFFER_SIZE];      ZipEntry entry=new ZipEntry(ShareConstants.DEX_IN_JAR);      zos.putNextEntry(entry);      int length=bis.read(buffer);      while (length != -1) {        zos.write(buffer,0,length);        length=bis.read(buffer);      }      zos.closeEntry();    }  finally {      SharePatchFileUtil.closeQuietly(bis);      SharePatchFileUtil.closeQuietly(zos);    }    isExtractionSuccessful=SharePatchFileUtil.verifyDexFileMd5(extractTo,targetMd5);    TinkerLog.i(TAG,"isExtractionSuccessful: %b",isExtractionSuccessful);    if (!isExtractionSuccessful) {      extractTo.delete();      if (extractTo.exists()) {        TinkerLog.e(TAG,"Failed to delete corrupted dex " + extractTo.getPath());      }    }  }  return isExtractionSuccessful;}  }
class C{  private void initCache(){  lruCacheMap=new LinkedHashMap<String,Cacheable>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE,1.0f,true);}  }
class C{  public String process(Item item) throws ProcessException {  int count=0;  for (Item p=item.getItemAs(Relation.SYLLABLE); p != null; p=p.getPrevious(), count++) {    if (isAccented(p)) {      break;    }  }  return Integer.toString(rail(count));}  }
class C{  public VOGeoServerShapeSymbol(){  String fullResourceName="geoserver/GeoServerShapeSymbol.xml";  SymbolTypeConfigReader.readConfig(VOGeoServerShapeSymbol.class,fullResourceName,fieldEnableMap);}  }
class C{  private void updateButtonState(boolean dataChanged){  btnApply.setEnabled(dataChanged);  btnRevert.setEnabled(dataChanged);}  }
class C{  protected SchedulerDriver createInternal(final Scheduler scheduler,final FrameworkInfo frameworkInfo,final String masterUrl,final Credential credential){  if (credential == null) {    return new MesosSchedulerDriver(scheduler,frameworkInfo,masterUrl);  } else {    return new MesosSchedulerDriver(scheduler,frameworkInfo,masterUrl,credential);  }}  }
class C{  private void resize(int newCapacity){  Entry[] oldTable=getTable();  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry[] newTable=new Entry[newCapacity];  transfer(oldTable,newTable);  table=newTable;  threshold=(int)(newCapacity * loadFactor);}  }
class C{  public static Call checkCoordinate(Coordinate coordinate,@Nullable Double buffer,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean weather,Date date,AirMapCallback<AirMapStatus> listener){  String url=statusPointUrl;  Map<String,String> params=AirMapStatus.getAsParams(coordinate,types,ignoredTypes,weather,date);  if (buffer != null) {    params.put("buffer",String.valueOf(buffer));  }  return AirMap.getClient().get(url,params,new GenericOkHttpCallback(listener,AirMapStatus.class));}  }
class C{  public Object[] call(Object[] args,int nres) throws LuaException {synchronized (L) {    if (!isFunction() && !isTable() && !isUserdata())     throw new LuaException("Invalid object. Not a function, table or userdata .");    int top=L.getTop();    push();    int nargs;    if (args != null) {      nargs=args.length;      for (int i=0; i < nargs; i++) {        Object obj=args[i];        L.pushObjectValue(obj);      }    } else     nargs=0;    int err=L.pcall(nargs,nres,0);    if (err != 0) {      String str;      if (L.isString(-1)) {        str=L.toString(-1);        L.pop(1);      } else       str="";      if (err == LuaState.LUA_ERRRUN.intValue()) {        str="Runtime error. " + str;      } else       if (err == LuaState.LUA_ERRMEM.intValue()) {        str="Memory allocation error. " + str;      } else       if (err == LuaState.LUA_ERRERR.intValue()) {        str="Error while running the error handler function. " + str;      } else {        str="Lua Error code " + err + ". "+ str;      }      throw new LuaException(str);    }    if (nres == LuaState.LUA_MULTRET.intValue())     nres=L.getTop() - top;    if (L.getTop() - top < nres) {      throw new LuaException("Invalid Number of Results .");    }    Object[] res=new Object[nres];    for (int i=nres; i > 0; i--) {      res[i - 1]=L.toJavaObject(-1);      L.pop(1);    }    return res;  }}  }
class C{  @Override protected AudioInputStream generateAudioStream(List<SelectedUnit> units) throws IOException {  int len=units.size();  Datagram[][] datagrams=new Datagram[len][];  Datagram[] rightContexts=new Datagram[len];  for (int i=0; i < len; i++) {    SelectedUnit unit=units.get(i);    OverlapUnitData unitData=(OverlapUnitData)unit.getConcatenationData();    assert unitData != null : "Should not have null unitdata here";    Datagram[] frames=unitData.getFrames();    assert frames != null : "Cannot generate audio from null frames";    datagrams[i]=frames;    Unit nextInDB=database.getUnitFileReader().getNextUnit(unit.getUnit());    Unit nextSelected;    if (i + 1 == len)     nextSelected=null; else     nextSelected=units.get(i + 1).getUnit();    if (nextInDB != null && !nextInDB.equals(nextSelected)) {      rightContexts[i]=unitData.getRightContextFrame();    }  }  DoubleDataSource audioSource=new DatagramOverlapDoubleDataSource(datagrams,rightContexts);  return new DDSAudioInputStream(new BufferedDoubleDataSource(audioSource),audioformat);}  }
class C{  public void addDiscoveryListener(DiscoveryListener listener){  if (listener == null) {    throw new NullPointerException("can't add null listener");  }  if (!listeners.contains(listener)) {    listeners.add(listener);  }  HashMap groupsMap;synchronized (discoveredSet) {    groupsMap=new HashMap(discoveredSet.size());    if (discoveredSet.isEmpty())     return;    for (int i=0; i < discoveredSet.size(); i++) {      ProxyReg reg=(ProxyReg)discoveredSet.get(i);      groupsMap.put(reg.proxy,reg.getMemberGroups());    }  }  notifyListener(listener,groupsMap,DISCOVERED);}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof GrantPermission)) {    return false;  }  if (implier == null) {    Implier imp=new Implier();    imp.add(this);    implier=imp;  }  return implier.implies(permission);}  }
class C{  public void recordFocusedOmnibox(){  setFirstAction(FOCUSED_OMNIBOX);}  }
class C{  public static String graphToDot(UniqueVertexGraph gTree,boolean bDirected,Map hEdgeDistros){  StringBuffer sb=new StringBuffer();  String sConnector;  boolean bDistroGraph=(hEdgeDistros != null);  if (!bDirected) {    sb.append("graph {\n");    sConnector="--";  } else {    sb.append("digraph {\n");    sConnector="->";  }  Iterator iIter=gTree.getEdgeSet().iterator();  while (iIter.hasNext()) {    Edge e=(Edge)iIter.next();    String sA="_" + e.getVertexA().toString().replaceAll("\\W","_");    String sB="_" + e.getVertexB().toString().replaceAll("\\W","_");    String sLabel="";    if (e instanceof WeightedEdge) {      sLabel+=String.format("%4.2f",((WeightedEdge)e).getWeight());    }    if (bDistroGraph) {      Distribution dTmp;      if ((dTmp=(Distribution)(hEdgeDistros.get(e))) != null)       sLabel+=" - Distro: " + dTmp.toString();    }    if (e instanceof WeightedEdge)     sb.append("\t" + sA + " "+ sConnector+ " "+ sB+ " [label=\""+ sLabel.replaceAll("\\s+"," ")+ "\"]\n"); else     sb.append("\t" + sA + " "+ sConnector+ " "+ sB+ "\n");    sb.append("\t" + sA + " [label=\""+ sA+ "\"] "+ "\n");  }  sb.append("}");  return sb.toString();}  }
class C{  public boolean isNative(){  return Modifier.isNative(this.getModifiers());}  }
class C{  public void addFirst(E u){  innerChain.addFirst(u);}  }
class C{  public MarketSearchQuery(VkApiClient client,UserActor actor,int ownerId){  super(client,"market.search",SearchResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);}  }
class C{  public void addToken(View v){  if (selectedToken != null) {    cth.addToken(selectedToken);    updateEditField();    updateClipPreview();  } else {    Toast.makeText(this,R.string.clipboard_no_token_selected,Toast.LENGTH_LONG).show();  }}  }
class C{  private void printSchema(XMLWriter xml,String group,Schema s,String[] ignore){  String[] attr=new String[]{Tokens.ID,Tokens.FOR,Tokens.ATTRNAME,Tokens.ATTRTYPE};  String[] vals=new String[4];  OUTER:   for (int i=0; i < s.getColumnCount(); ++i) {    vals[0]=s.getColumnName(i);    for (int j=0; ignore != null && j < ignore.length; ++j) {      if (vals[0].equals(ignore[j]))       continue OUTER;    }    vals[1]=group;    vals[2]=vals[0];    vals[3]=(String)TYPES.get(s.getColumnType(i));    Object dflt=s.getDefault(i);    if (dflt == null) {      xml.tag(Tokens.KEY,attr,vals,4);    } else {      xml.start(Tokens.KEY,attr,vals,4);      xml.contentTag(Tokens.DEFAULT,dflt.toString());      xml.end();    }  }}  }
class C{  private void ensureStackCapacity(int newElementDepth){  if (newElementDepth == fElementQNamePartsStack.length) {    QName[] newStackOfQueue=new QName[newElementDepth * 2];    System.arraycopy(this.fElementQNamePartsStack,0,newStackOfQueue,0,newElementDepth);    fElementQNamePartsStack=newStackOfQueue;    QName qname=fElementQNamePartsStack[newElementDepth];    if (qname == null) {      for (int i=newElementDepth; i < fElementQNamePartsStack.length; i++) {        fElementQNamePartsStack[i]=new QName();      }    }    int[] newStack=new int[newElementDepth * 2];    System.arraycopy(fElementIndexStack,0,newStack,0,newElementDepth);    fElementIndexStack=newStack;    newStack=new int[newElementDepth * 2];    System.arraycopy(fContentSpecTypeStack,0,newStack,0,newElementDepth);    fContentSpecTypeStack=newStack;  }}  }
class C{  public boolean deleteImage(String path){  return new File(path).delete();}  }
class C{  public static void writeSwappedInteger(byte[] data,int offset,int value){  data[offset + 0]=(byte)((value >> 0) & 0xff);  data[offset + 1]=(byte)((value >> 8) & 0xff);  data[offset + 2]=(byte)((value >> 16) & 0xff);  data[offset + 3]=(byte)((value >> 24) & 0xff);}  }
class C{  private void readChunkHeader(InputStream stream,ResChunk_Header nextChunkHeader) throws IOException {  byte[] header=new byte[8];  stream.read(header);  readChunkHeader(nextChunkHeader,header,0);}  }
class C{  public static String repeatString(String source,int repeat){  if (repeat < 0) {    throw new IllegalArgumentException("Cannot repeat " + repeat + " times.");  }  if (repeat == 0 || source == null || source.length() == 0) {    return "";  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < repeat; i++) {    buffer.append(source);  }  return buffer.toString();}  }
class C{  public static Value concreteRef(Value val){  if (val == null)   return null;  if (val instanceof ConcreteRef)   return val;  return null;}  }
class C{  public static boolean isExtension(String filename,String[] extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.length == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public static boolean putMapNotEmptyKey(Map<String,String> map,String key,String value){  if (map == null || StringUtil.isEmpty(key)) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public AccountChangePasswordQuery changePasswordHash(String value){  return unsafeParam("change_password_hash",value);}  }
class C{  public void updateCache() throws SVNException {  ensurePreferencesStored();}  }
class C{  public ResourcesPoet addStringArray(String name,@NotNull List<String> values){  Element element=document.createElement("string-array");  element.setAttribute("name",name);  for (  String value : values) {    Element valueElement=document.createElement("item");    valueElement.appendChild(document.createTextNode(value));    element.appendChild(valueElement);  }  resourceElement.appendChild(element);  return this;}  }
class C{  public Template(ServiceTemplate tmpl) throws RemoteException {  serviceID=tmpl.serviceID;  serviceTypes=ClassMapper.toServiceType(tmpl.serviceTypes);  attributeSetTemplates=EntryRep.toEntryRep(tmpl.attributeSetTemplates,false);}  }
class C{  public long nextLong(long least,long bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextLong(bound - least) + least;}  }
class C{  public MessagesCreateChatQuery createChat(UserActor actor,List<Integer> userIds){  return new MessagesCreateChatQuery(getClient(),actor,userIds);}  }
class C{  public WKTType(String name,boolean multipleCoordinates,int numOfPoints,String listItem,boolean canHaveMultipleShapes,boolean doFirstLastHaveToBeSame){  super();  this.name=name;  this.multipleCoordinates=multipleCoordinates;  this.numOfPoints=numOfPoints;  this.listItem=listItem;  this.canHaveMultipleShapes=canHaveMultipleShapes;  this.doFirstLastHaveToBeSame=doFirstLastHaveToBeSame;}  }
class C{  public boolean addSample(String sample,Map<String,Object> attribute2value,boolean allowReplaceSample,boolean allowAddAttribute){  if (!table.rowKeySet().contains(sample)) {    sampleOrder.add(sample);  }  if (allowReplaceSample || !table.rowKeySet().contains(sample)) {    for (    String attribute : attribute2value.keySet()) {      if (allowAddAttribute || getAttributeSet().contains(attribute))       put(sample,attribute,attribute2value.get(attribute));    }    return true;  }  return false;}  }
class C{  public static Matrix constructWithCopy(double[][] A){  int m=A.length;  int n=A[0].length;  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  public boolean offer(E e){  if (e == null) {    throw new NullPointerException();  }  Node<E> n=new Node<E>(e,null);  for (; ; ) {    Node<E> t=tail;    n.setNext(t);    count.incrementAndGet();    if (casTail(t,n)) {      t.setPrev(n);      return true;    }  }}  }
class C{  private void storeLegionMemberExInCache(Player player){  if (this.allCachedLegionMembers.containsEx(player.getObjectId())) {    LegionMemberEx legionMemberEx=allCachedLegionMembers.getMemberEx(player.getObjectId());    legionMemberEx.setNickname(player.getLegionMember().getNickname());    legionMemberEx.setSelfIntro(player.getLegionMember().getSelfIntro());    legionMemberEx.setPlayerClass(player.getPlayerClass());    legionMemberEx.setExp(player.getCommonData().getExp());    legionMemberEx.setLastOnline(player.getCommonData().getLastOnline());    legionMemberEx.setWorldId(player.getPosition().getMapId());    legionMemberEx.setOnline(false);  } else {    LegionMemberEx legionMemberEx=new LegionMemberEx(player,player.getLegionMember(),false);    addCachedLegionMemberEx(legionMemberEx);  }}  }
class C{  public void unsubscribe(String subscriptionName) throws JMSException {  ensureOpen();  throw new JMSException("This version of JMS does not support durable subscribers.");}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  private void findEigenVectors(final double[][] householderMatrix){  final double[][] z=householderMatrix.clone();  final int n=main.length;  realEigenvalues=new double[n];  imagEigenvalues=new double[n];  final double[] e=new double[n];  for (int i=0; i < n - 1; i++) {    realEigenvalues[i]=main[i];    e[i]=secondary[i];  }  realEigenvalues[n - 1]=main[n - 1];  e[n - 1]=0;  double maxAbsoluteValue=0;  for (int i=0; i < n; i++) {    if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {      maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);    }    if (FastMath.abs(e[i]) > maxAbsoluteValue) {      maxAbsoluteValue=FastMath.abs(e[i]);    }  }  if (maxAbsoluteValue != 0) {    for (int i=0; i < n; i++) {      if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {        realEigenvalues[i]=0;      }      if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {        e[i]=0;      }    }  }  for (int j=0; j < n; j++) {    int its=0;    int m;    do {      for (m=j; m < n - 1; m++) {        double delta=FastMath.abs(realEigenvalues[m]) + FastMath.abs(realEigenvalues[m + 1]);        if (FastMath.abs(e[m]) + delta == delta) {          break;        }      }      if (m != j) {        if (its == MAX_ITER) {          throw new MathIllegalStateException(LocalizedCoreFormats.CONVERGENCE_FAILED,MAX_ITER);        }        its++;        double q=(realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);        double t=FastMath.sqrt(1 + q * q);        if (q < 0.0) {          q=realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);        } else {          q=realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);        }        double u=0.0;        double s=1.0;        double c=1.0;        int i;        for (i=m - 1; i >= j; i--) {          double p=s * e[i];          double h=c * e[i];          if (FastMath.abs(p) >= FastMath.abs(q)) {            c=q / p;            t=FastMath.sqrt(c * c + 1.0);            e[i + 1]=p * t;            s=1.0 / t;            c*=s;          } else {            s=p / q;            t=FastMath.sqrt(s * s + 1.0);            e[i + 1]=q * t;            c=1.0 / t;            s*=c;          }          if (e[i + 1] == 0.0) {            realEigenvalues[i + 1]-=u;            e[m]=0.0;            break;          }          q=realEigenvalues[i + 1] - u;          t=(realEigenvalues[i] - q) * s + 2.0 * c * h;          u=s * t;          realEigenvalues[i + 1]=q + u;          q=c * t - h;          for (int ia=0; ia < n; ia++) {            p=z[ia][i + 1];            z[ia][i + 1]=s * z[ia][i] + c * p;            z[ia][i]=c * z[ia][i] - s * p;          }        }        if (t == 0.0 && i >= j) {          continue;        }        realEigenvalues[j]-=u;        e[j]=q;        e[m]=0.0;      }    } while (m != j);  }  for (int i=0; i < n; i++) {    int k=i;    double p=realEigenvalues[i];    for (int j=i + 1; j < n; j++) {      if (realEigenvalues[j] > p) {        k=j;        p=realEigenvalues[j];      }    }    if (k != i) {      realEigenvalues[k]=realEigenvalues[i];      realEigenvalues[i]=p;      for (int j=0; j < n; j++) {        p=z[j][i];        z[j][i]=z[j][k];        z[j][k]=p;      }    }  }  maxAbsoluteValue=0;  for (int i=0; i < n; i++) {    if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {      maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);    }  }  if (maxAbsoluteValue != 0.0) {    for (int i=0; i < n; i++) {      if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {        realEigenvalues[i]=0;      }    }  }  eigenvectors=new ArrayRealVector[n];  final double[] tmp=new double[n];  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      tmp[j]=z[j][i];    }    eigenvectors[i]=new ArrayRealVector(tmp);  }}  }
class C{  public MonsterAilmentCursor queryAilmentsFromId(long id){  return mHelper.queryAilmentsFromMonster(id);}  }
class C{  public SynchronizedSymbolTable(SymbolTable symbolTable){  fSymbolTable=symbolTable;}  }
class C{  public HttpClient(URL url,Map<String,Object> parameters,Map<String,String> headers){  this.url=url.toExternalForm();  this.parameters=parameters;  this.headers=headers;}  }
class C{  public void addTypeDecl(TypeDecl node){  List<TypeDecl> list=(parent == null || state == null) ? getTypeDeclListNoTransform() : getTypeDeclList();  list.addChild(node);}  }
class C{  public boolean isUrlWhiteListed(String uri){  if (whiteList == null)   return true;  Uri parsedUri=Uri.parse(uri);  Iterator<URLPattern> pit=whiteList.iterator();  while (pit.hasNext()) {    URLPattern p=pit.next();    if (p.matches(parsedUri)) {      return true;    }  }  return false;}  }
class C{  public Builder withStreaming(){  this.streaming=true;  return this;}  }
class C{  public boolean isDirty(){  return isTextDirty() || isPropDirty();}  }
class C{  @Override public boolean equals(Object other){  return this == other || (other instanceof Book && hashCode() == other.hashCode());}  }
class C{  public static boolean swordSimilar(ItemStack a,ItemStack b){  if (a == null || b == null) {    return a == b;  }  if (a.getItem() != b.getItem())   return false;  if (a.getItem().isDamageable())   return true;  return a.getItemDamage() == b.getItemDamage();}  }
class C{  public void initialiseNode(){  nodeInitStageAdvancer.startInitialisation();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public SuperAccess fullCopy(){  SuperAccess tree=(SuperAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public DerivativeStructure(final int parameters,final int order) throws MathIllegalArgumentException {  this(DSCompiler.getCompiler(parameters,order));}  }
class C{  public LabeledContext extract(List<Tuple2<String,String>> labeledSequence,int position){  Set<String> fs=new HashSet<String>();  fs.addAll(extractBasicFeatures(labeledSequence,position));  fs.addAll(extractWordFormFeatures(labeledSequence,position));  fs.addAll(extractJointFeatures(labeledSequence,position));  StringBuilder features=new StringBuilder(64);  for (  String s : fs) {    features.append(s);    features.append(' ');  }  LabeledContext context=new LabeledContext();  context.setWord(labeledSequence.get(position)._1());  context.setTag(labeledSequence.get(position)._2());  context.setFeatureStrings(features.toString().trim());  return context;}  }
class C{  public FriendsEditListQuery userIds(Integer... value){  return unsafeParam("user_ids",value);}  }
class C{  public static boolean isNearBottom(EntityPlayer player){  Block toCheck=player.getEntityWorld().getBlockState(player.getPosition().down()).getBlock();  Block toCheck2=player.getEntityWorld().getBlockState(player.getPosition().down(2)).getBlock();  return !toCheck.isReplaceable(player.getEntityWorld(),player.getPosition().down()) || !toCheck2.isReplaceable(player.getEntityWorld(),player.getPosition().down(2));}  }
class C{  public GossipService(String cluster,URI uri,String id,List<GossipMember> gossipMembers,GossipSettings settings,GossipListener listener) throws InterruptedException, UnknownHostException {  gossipManager=RandomGossipManager.newBuilder().withId(id).cluster(cluster).uri(uri).settings(settings).gossipMembers(gossipMembers).listener(listener).build();}  }
class C{  private void responseJson(String jsonstr){  this.setContentType(Model.MIME_JSON);  this.print(jsonstr);}  }
class C{  protected BuildSystem buildSystem(){  return BuildSystem.Blaze;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(StringCodingUtils.getBytes(line.toString(),cs));    }    output.write(StringCodingUtils.getBytes(lineEnding,cs));  }}  }
class C{  public DefaultCredentialsProvider(){}  }
class C{  public static synchronized DataSourceInterface createDataSource(DataSourceInterface override){  if (override != null) {    if ((dataSource == null) || override.getClass() != dataSource.getClass()) {      dataSource=override;      dataSource.setDataSourceCreation(internalDataSource,externalDataSource,inlineDataSource);    }  } else {    if (dataSource == null) {      dataSource=new DataSourceImpl();      dataSource.setDataSourceCreation(internalDataSource,externalDataSource,inlineDataSource);    }  }  return dataSource;}  }
class C{  public <T>Some<T> some(Task<T> task){  return new Some<>(this.executor_,task);}  }
class C{  private SubHyperplane<Euclidean3D> boundaryFacet(final Vector3D point,final BSPTree<Euclidean3D> node){  final Vector2D point2D=((Plane)node.getCut().getHyperplane()).toSubSpace((Point<Euclidean3D>)point);  @SuppressWarnings("unchecked") final BoundaryAttribute<Euclidean3D> attribute=(BoundaryAttribute<Euclidean3D>)node.getAttribute();  if ((attribute.getPlusOutside() != null) && (((SubPlane)attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {    return attribute.getPlusOutside();  }  if ((attribute.getPlusInside() != null) && (((SubPlane)attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {    return attribute.getPlusInside();  }  return null;}  }
class C{  @Path(path="check") public void check(){  JSON jo=new JSON();  String op=this.getString("op");  if ("db".equals(op)) {    String url=this.getHtml("url").trim();    try {      if (!X.isEmpty(url)) {        Connection c1=DB.getConnectionByUrl(url);        Statement stat=c1.createStatement();        stat.execute("create table test_ppp(X char(1))");        stat.execute("drop table test_ppp");      }      jo.put(X.STATE,200);    } catch (    Exception e1) {      log.error(e1.getMessage(),e1);      OpLog.error(setup.class,"check",e1.getMessage(),e1,login,this.getRemoteHost());      jo.put(X.STATE,201);      jo.put(X.MESSAGE,e1.getMessage());    }  } else   if ("mongo".equals(op)) {    String url=this.getHtml("url").trim();    String dbname=this.getString("db").trim();    if (!X.isEmpty(url) && !X.isEmpty(dbname)) {      log.debug("url=" + url + ", db="+ dbname);      try {        MongoClientOptions.Builder opts=new MongoClientOptions.Builder().socketTimeout(5000).serverSelectionTimeout(1000);        MongoClient client=new MongoClient(new MongoClientURI(url,opts));        MongoDatabase g=client.getDatabase(dbname);        String name="test_" + UID.digital(5);        g.createCollection(name);        MongoCollection<Document> c1=g.getCollection(name);        if (c1 != null) {          c1.drop();          jo.put(X.STATE,200);        } else {          jo.put(X.STATE,201);          jo.put(X.MESSAGE,"can not access");        }        client.close();      } catch (      Exception e1) {        log.error(e1.getMessage(),e1);        OpLog.error(setup.class,"check",e1.getMessage(),e1,login,this.getRemoteHost());        jo.put(X.STATE,201);        jo.put(X.MESSAGE,e1.getMessage());      }    } else {      jo.put(X.STATE,200);    }  } else   if ("cache".equals(op)) {    String url=this.getHtml("url").trim();    String group=this.getString("group").trim();    try {      if (!X.isEmpty(url)) {        Configuration conf=Config.getConfig();        conf.setProperty("cache.url",url);        conf.setProperty("cache.group",group);        Cache.init(conf);        DefaultCachable v1=new DefaultCachable();        Cache.set("test",v1);        DefaultCachable v2=(DefaultCachable)Cache.get("test");        if (v2 != null && v1.age() == v2.age()) {          jo.put(X.STATE,200);        } else {          jo.put(X.STATE,201);          jo.put(X.MESSAGE,"cache system failed");        }      } else {        jo.put(X.STATE,200);      }    } catch (    Exception e) {      log.error("url=" + url,e);      jo.put(X.STATE,201);      jo.put(X.MESSAGE,e.getMessage());    }  } else {    jo.put(X.STATE,201);  }  this.response(jo);}  }
class C{  public static Fill createDefaultGraphicFill(){  Graphic graphicFill=styleFactory.createDefaultGraphic();  Expression colour=ff.literal(DEFAULT_FILL_COLOUR);  Expression backgroundColour=null;  Expression opacity=ff.literal(1.0);  Fill fill=styleFactory.createFill(colour,backgroundColour,opacity,graphicFill);  return fill;}  }
class C{  @Override public synchronized Edge addEdge(Vertex vHead,Vertex vTail) throws Exception {  Vertex vH=null, vT=null;  boolean bVertexMissed=false;  if ((vH=locateVertex(vHead)) == null) {    add(vH=vHead);    bVertexMissed=true;  }  if ((vT=locateVertex(vTail)) == null) {    add(vT=vTail);    bVertexMissed=true;  }  Edge e=null;  if (eclLocator == null) {    if (!bVertexMissed)     e=utils.locateDirectedEdgeInGraph(this,vH,vT);  } else {    if (!bVertexMissed)     e=eclLocator.locateDirectedEdgeInGraph(this,vH,vT);  }  if (e == null) {    e=super.addEdge(vH,vT);    if (eclLocator != null)     eclLocator.addedEdge(e);  }  return e;}  }
class C{  public static Equipment buildCreateAllFieldsEquipment(Long id,Properties properties){  if (properties == null) {    properties=new Properties();  }  Equipment equipment=Equipment.create("E_TEST" + id,"cern.c2mon.daq.testhandler.TestMessageHandler").id(id).description("foo").commFaultTag(CommFaultTag.create("E_TEST" + id + ":COMM_FAULT").build()).aliveTag(AliveTag.create("E_TEST" + id + ":ALIVE").build(),70000).statusTag(StatusTag.create("E_TEST" + id + ":STATUS").build()).address("testAddress").build();  equipment.setProcessId(1L);  properties.setProperty("name","E_TEST" + id);  properties.setProperty("description","foo");  properties.setProperty("statusTagId",String.valueOf(101l));  properties.setProperty("commFaultTagId",String.valueOf(102l));  properties.setProperty("aliveInterval",String.valueOf(70000));  properties.setProperty("aliveTagId",String.valueOf(100l));  properties.setProperty("processId",String.valueOf(1l));  properties.setProperty("handlerClass","cern.c2mon.daq.testhandler.TestMessageHandler");  properties.setProperty("address","testAddress");  return equipment;}  }
class C{  StackFrame(AsmMethodSource src){  this.src=src;}  }
class C{  public static void clear(int notificationId){  MediaNotificationManager manager=getManager(notificationId);  if (manager == null)   return;  manager.clearNotification();  sManagers.remove(notificationId);}  }
class C{  private void updateSyncEverythingState(){  boolean isSyncEnabled=mSyncSwitchPreference.isChecked();  mSyncEverything.setEnabled(isSyncEnabled);  mSyncEverything.setChecked(!isSyncEnabled || mProfileSyncService.hasKeepEverythingSynced());}  }
class C{  void reportNewIdleState(boolean isIdle){synchronized (mTrackedTasks) {    for (    JobStatus task : mTrackedTasks) {      task.idleConstraintSatisfied.set(isIdle);    }  }  mStateChangedListener.onControllerStateChanged();}  }
class C{  public void clear(){  sharedPreferences.edit().clear().apply();}  }
class C{  public Matrix plus(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] + B.A[i][j];    }  }  return X;}  }
class C{  public Code39Reader(boolean usingCheckDigit){  this(usingCheckDigit,false);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_REMAIN_TIME_10(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400204,durationtime0);}  }
class C{  public void complainIfNotSupported(final String name) throws MathIllegalArgumentException {  if (!isSupported(name)) {    throw new MathIllegalArgumentException(LocalizedODEFormats.UNKNOWN_PARAMETER,name);  }}  }
class C{  protected static LazyNode cNumberValue(int index){  return new LazyNode(VALUE_INTEGER,index);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_NPC_GUILD(String value0){  return new SM_SYSTEM_MESSAGE(1300595,value0);}  }
class C{  public void clear(int code){  MouseButton mb=this.buttons.get(code);  if (mb == null) {    return;  }  mb.clear();}  }
class C{  @Override public double evaluate(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {  if (MathArrays.verifyValues(values,begin,length)) {    double sampleSize=length;    double xbar=StatUtils.sum(values,begin,length) / sampleSize;    double correction=0;    for (int i=begin; i < begin + length; i++) {      correction+=values[i] - xbar;    }    return xbar + (correction / sampleSize);  }  return Double.NaN;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_STIGMA_CANNT_UNEQUIP_STONE_OTHER_STONE_NEED_ITS_SKILL(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1300410,value1,value0);}  }
class C{  public boolean publish(final String publicationTopic,final byte[] payload,final int qos,final boolean retained){  if (canPublish()) {    try {      logger.info("Publishing message on topic \"" + publicationTopic + "\". Payload size = "+ payload.length);      client.publish(publicationTopic,payload,qos,retained);      logger.trace("Published message on topic \"" + publicationTopic + "\". Payload size = "+ payload.length);      return true;    } catch (    MqttException e) {      logger.error("Cannot publish message on " + publicationTopic,e);    }  } else {    logger.warn("Publication attempt failure - no connection available...");  }  return false;}  }
class C{  static final TypeKey valueOf(Class<?> rawType,java.lang.reflect.Type[] typeArguments){  byte[] identityHashBytes=new byte[(typeArguments.length + 1) * 4];  intToByteArray(getTypeIndex(rawType),identityHashBytes,0);  for (int i=0, len=typeArguments.length; i < len; ++i) {    intToByteArray(getTypeIndex(typeArguments[i]),identityHashBytes,i + 1);  }  return new TypeKey(identityHashBytes);}  }
class C{  private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt){  if (JOptionPane.showConfirmDialog(this,"Do you wish to end the application?","Confirm",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {    if (taskInProgress())     removeTask(getActiveTask());    this.setVisible(false);    this.dispose();  }}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200526,skilltarget,skillname);}  }
class C{  public static String valueOf(Boolean value){  return value != null ? String.valueOf(value) : null;}  }
class C{  private void encXORPass(byte[] data,int offset,int length,int key){  int stop=length - 8;  int pos=4 + offset;  int edx;  int ecx=key;  while (pos < stop) {    edx=(data[pos] & 0xFF);    edx|=(data[pos + 1] & 0xFF) << 8;    edx|=(data[pos + 2] & 0xFF) << 16;    edx|=(data[pos + 3] & 0xFF) << 24;    ecx+=edx;    edx^=ecx;    data[pos++]=(byte)(edx & 0xFF);    data[pos++]=(byte)(edx >> 8 & 0xFF);    data[pos++]=(byte)(edx >> 16 & 0xFF);    data[pos++]=(byte)(edx >> 24 & 0xFF);  }  data[pos++]=(byte)(ecx & 0xFF);  data[pos++]=(byte)(ecx >> 8 & 0xFF);  data[pos++]=(byte)(ecx >> 16 & 0xFF);  data[pos]=(byte)(ecx >> 24 & 0xFF);}  }
class C{  public PolygonFillDetails(FunctionNameInterface functionManager){  super(PolygonFillDetails.class,configFile,functionManager);}  }
class C{  public LevenbergMarquardtOptimizer(final double initialStepBoundFactor,final double costRelativeTolerance,final double parRelativeTolerance,final double orthoTolerance,final double qrRankingThreshold){  this.initialStepBoundFactor=initialStepBoundFactor;  this.costRelativeTolerance=costRelativeTolerance;  this.parRelativeTolerance=parRelativeTolerance;  this.orthoTolerance=orthoTolerance;  this.qrRankingThreshold=qrRankingThreshold;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200962,skilltarget,num0,skillcaster,skillname);}  }
class C{  @Override protected boolean scanRootElementHook() throws IOException, XNIException {  if (fExternalSubsetResolver != null && !fSeenDoctypeDecl && !fDisallowDoctype && (fValidation || fLoadExternalDTD)) {    scanStartElementName();    resolveExternalSubsetAndRead();    reconfigurePipeline();    if (scanStartElementAfterName()) {      setScannerState(SCANNER_STATE_TRAILING_MISC);      setDispatcher(fTrailingMiscDispatcher);      return true;    }  } else {    reconfigurePipeline();    if (scanStartElement()) {      setScannerState(SCANNER_STATE_TRAILING_MISC);      setDispatcher(fTrailingMiscDispatcher);      return true;    }  }  return false;}  }
class C{  public static ExpectedCondition<Boolean> listSizeIsConstant(final WebElement element,final By byElement){  return null;}  }
class C{  public void drawChartTransposed(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  final String[] series=getChartData().getSeriesNames().toArray(new String[getChartData().getNumberOfSeries()]);  final double topY;  final double[] percentFactor;switch (scalingType) {case PERCENT:{      final String[] seriesIncludingDisabled=getChartData().getSeriesNamesIncludingDisabled();      percentFactor=computePercentFactorPerSampleForTransposedChart((DefaultChartData)getChartData(),seriesIncludingDisabled);      topY=computeMaxClassValueUsingPercentFactorPerSeries((DefaultChartData)getChartData(),seriesIncludingDisabled,percentFactor);      break;    }case LOG:{    topY=computeMaxYAxisValueLogScale(getMaxValue());    percentFactor=null;    break;  }case SQRT:{  topY=Math.sqrt(getMaxValue());  percentFactor=null;  break;}default :case LINEAR:{topY=1.1 * getMaxValue();percentFactor=null;}}final double yFactor=(y0 - y1) / topY;final int x0=leftMargin;final int x1=getWidth() - rightMargin;if (x0 >= x1) return;final int numberOfClasses=getChartData().getNumberOfClasses();double xStep=(x1 - x0) / (2 * numberOfClasses);final double bigSpace=Math.max(2,Math.min(10,xStep));xStep=(x1 - x0 - bigSpace * numberOfClasses) / numberOfClasses;Point[] previousPoint=new Point[getChartData().getNumberOfSeries()];java.util.List<Triplet<String,String,int[]>> list=new LinkedList<>();int c=0;for (String className : getChartData().getClassNames()) {if (showXAxis) {double xLabel=x0 + bigSpace + c * bigSpace + (c + 0.5) * xStep;Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();if (classLabelAngle == 0) {apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());} else if (classLabelAngle > Math.PI / 2) {apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);}if (getChartData().getChartSelection().isSelected(null,className)) {gc.setColor(ProgramProperties.SELECTION_COLOR);fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);}gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));if (sgc != null) sgc.setCurrentItem(new String[]{null,className});drawString(gc,className,apt.getX(),apt.getY(),classLabelAngle);if (sgc != null) sgc.clearCurrentItem();}double currentHeight=y0;double currentValueForLog=0;int d=0;for (int i=0; i < series.length; i++) {final String seriesName=series[i];double value=getChartData().getValueAsDouble(seriesName,className);switch (scalingType) {case PERCENT:{  value*=percentFactor[i];  break;}case LOG:{if (value >= 1) {  if (currentValueForLog <= 1) {    value=Math.log10(value);  } else {    value=Math.log10(value + currentValueForLog) - Math.log10(currentValueForLog);  }  currentValueForLog+=getChartData().getValueAsDouble(seriesName,className);} else value=0;break;}case SQRT:{if (value >= 1) {if (currentValueForLog <= 1) {  value=Math.sqrt(value);} else {  value=Math.sqrt(value + currentValueForLog) - Math.sqrt(currentValueForLog);}currentValueForLog+=getChartData().getValueAsDouble(seriesName,className);} else value=0;break;}}final double xBar=x0 + bigSpace + c * bigSpace + c * xStep;final double height=value * yFactor;final Point aPt=new Point((int)Math.round(xBar + xStep / 2.0),(int)Math.round(currentHeight - height));currentHeight-=height;Point bPt=previousPoint[d];if (bPt == null && numberOfClasses == 1) bPt=new Point(aPt.x - 2,aPt.y);if (bPt != null) {Triplet<String,String,int[]> triplet=new Triplet<>(seriesName,className,new int[]{bPt.x,bPt.y,aPt.x,aPt.y});list.add(triplet);}previousPoint[d]=aPt;d++;}c++;}list=Basic.reverseList(list);for (Triplet<String,String,int[]> triplet : list) {String seriesName=triplet.get1();String className=triplet.get2();int[] coords=triplet.get3();Color color=getChartColors().getSampleColor(seriesName);gc.setColor(color);int[] xs=new int[]{coords[0],coords[2],coords[2],coords[0]};int[] ys=new int[]{coords[1],coords[3],y0,y0};gc.fillPolygon(xs,ys,4);gc.setColor(color.darker());if (sgc != null) sgc.setCurrentItem(new String[]{seriesName,className});gc.drawLine(coords[0],coords[1],coords[2],coords[3]);if (sgc != null) sgc.clearCurrentItem();}Triplet<String,String,int[]> current=null;for (Triplet<String,String,int[]> next : list) {if (current != null) {String seriesName=current.get1();String className=current.get2();int[] coords=current.get3();if (getChartData().getChartSelection().isSelected(seriesName,null)) {gc.setStroke(HEAVY_STROKE);gc.setColor(ProgramProperties.SELECTION_COLOR);gc.drawLine(coords[0],coords[1],coords[2],coords[3]);coords=next.get3();gc.drawLine(coords[0],coords[1],coords[2],coords[3]);gc.setStroke(NORMAL_STROKE);} else if (getChartData().getChartSelection().isSelected(null,className)) {gc.setStroke(HEAVY_STROKE);gc.setColor(ProgramProperties.SELECTION_COLOR);gc.drawOval(coords[2] - 1,coords[3] - 1,2,2);gc.setStroke(NORMAL_STROKE);}}current=next;}if (current != null) {String seriesName=current.get1();String className=current.get2();int[] coords=current.get3();if (getChartData().getChartSelection().isSelected(seriesName,null)) {gc.setStroke(HEAVY_STROKE);gc.setColor(ProgramProperties.SELECTION_COLOR);gc.drawLine(coords[0],coords[1],coords[2],coords[3]);gc.setStroke(NORMAL_STROKE);} else if (getChartData().getChartSelection().isSelected(null,className)) {gc.setStroke(HEAVY_STROKE);gc.setColor(ProgramProperties.SELECTION_COLOR);gc.drawOval(coords[2] - 1,coords[3] - 1,2,2);gc.setStroke(NORMAL_STROKE);}}}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  Relation segmentRelation=utterance.getRelation(Relation.SEGMENT);  Relation targetRelation=utterance.getRelation(Relation.TARGET);  Item segment=segmentRelation.getHead();  Item target=null;  if (targetRelation != null)   target=targetRelation.getHead();  float prevEnd=0f;  while (segment != null) {    String name=segment.getFeatures().getString("name");    float end=segment.getFeatures().getFloat("end");    int dur=(int)((end - prevEnd) * 1000);    StringBuffer targetStringBuffer=new StringBuffer();    while (target != null && target.getFeatures().getFloat("pos") <= end) {      float pos=target.getFeatures().getFloat("pos");      int percentage=((int)((pos - prevEnd) * 1000)) * 100 / dur;      int f0=(int)target.getFeatures().getFloat("f0");      targetStringBuffer.append(" ");      targetStringBuffer.append(percentage);      targetStringBuffer.append(" ");      targetStringBuffer.append(f0);      target=target.getNext();    }    segment.getFeatures().setInt("mbr_dur",dur);    segment.getFeatures().setString("mbr_targets",targetStringBuffer.toString().trim());    prevEnd=end;    segment=segment.getNext();  }}  }
class C{  static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  public NewsfeedSearchQueryWithExtended latitude(Float value){  return unsafeParam("latitude",value);}  }
class C{  public int[] toNativeArray(){  return toNativeArray(0,_pos);}  }
class C{  public void safeTimeToSpeech(String time){  try {    if (time.equals("now")) {      speakNow();    } else {      timeToSpeech(time);    }  } catch (  IllegalArgumentException iae) {    System.err.println("Bad time format");  }}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  trimToFileCount();  journalWriter.flush();}  }
class C{  final public boolean isSyncReplicationEnabled(){  return _isSyncReplication;}  }
class C{  public GroupsSetCallbackSettingsQuery boardPostNew(Boolean value){  return unsafeParam("board_post_new",value);}  }
class C{  @Override protected void synchronizeData(){  needsSyncData(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument();  data=ownerDocument.getNodeValueString(fNodeIndex);}  }
class C{  public void addElementValue(ElementValue node){  List<ElementValue> list=(parent == null || state == null) ? getElementValueListNoTransform() : getElementValueList();  list.addChild(node);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ENSLAVE_PET_LEVEL_CHANGE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300086,value0,value1);}  }
class C{  @NotNull public AddFaceToPersonAction addFaceToPerson(@NotNull String personGroupId,@NotNull String personId,@Nullable String userData,@NotNull String url){  Validation.validate(personGroupId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("personGroupId","Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  Validation.validate(userData,1,new ParameterValidationException("userData","User-specified data for any purpose. The maximum length is 1KB."));  return new AddFaceToPersonAction(cognitiveContext,personGroupId,personId,userData,url);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ChangeHateOnAttacked_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200647,skillcaster,value0,skillname);}  }
class C{  public double crossProduct(final Vector2D p1,final Vector2D p2){  final double x1=p2.getX() - p1.getX();  final double y1=getY() - p1.getY();  final double x2=getX() - p1.getX();  final double y2=p2.getY() - p1.getY();  return MathArrays.linearCombination(x1,y1,-x2,y2);}  }
class C{  private static File createReserveDiskCacheDir(Context context){  File cacheDir=StorageUtils.getCacheDirectory(context,false);  File individualDir=new File(cacheDir,"uil-images");  if (individualDir.exists() || individualDir.mkdir()) {    cacheDir=individualDir;  }  return cacheDir;}  }
class C{  public int peekChar() throws IOException {  if (DEBUG_BUFFER) {    System.out.print("(peekChar: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int c=fCurrentEntity.ch[fCurrentEntity.position];  if (DEBUG_BUFFER) {    System.out.print(")peekChar: ");    XMLEntityManager.print(fCurrentEntity);    if (fCurrentEntity.isExternal()) {      System.out.println(" -> '" + (c != '\r' ? (char)c : '\n') + "'");    } else {      System.out.println(" -> '" + (char)c + "'");    }  }  if (fCurrentEntity.isExternal()) {    return c != '\r' ? c : '\n';  } else {    return c;  }}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  public boolean inRange(VersionData minimumVersion,VersionData maximumVersion){  if ((minimumVersion == null) || (maximumVersion == null)) {    return false;  }  boolean inRange=minimumVersion.greaterThan(this) && this.lessThan(maximumVersion);  return inRange;}  }
class C{  public ControlScaleOptions build(){  ControlScaleOptions options=new ControlScaleOptions();  options.position=this.position;  options.maxWidth=maxWidth;  options.metric=metric;  options.imperial=imperial;  options.updateWhenIdle=updateWhenIdle;  return options;}  }
class C{  @Override public synchronized long skip(final long length) throws IOException {  final long skip=super.skip(length);  this.count+=skip;  return skip;}  }
class C{  private double mahalanobis(double[] v1,double[] v2,double[] sig2){  if (v1.length != v2.length)   throw new RuntimeException("Given array lengths were not equal.");  if (v1.length != sig2.length)   throw new RuntimeException("Given array lengths were not equal.");  double sum=0.0;  double diff=0.0;  for (int i=0; i < v1.length; i++) {    diff=v1[i] - v2[i];    sum+=((diff * diff) / sig2[i]);  }  return (sum);}  }
class C{  public SingularValueDecomposition svd(){  return new SingularValueDecomposition(this);}  }
class C{  @Override public int[] makeCumulativeTestPoints(){  return makeDensityTestPoints();}  }
class C{  public static void w(String tag,String msg,Exception e){  if (LOG_ENABLE) {    Log.w(tag,buildMsg(msg),e);  }}  }
class C{  private void updatePlacements(ResourcePoolService.ResourcePoolState resourcePoolState){  QueryTask queryTask=QueryUtil.buildPropertyQuery(GroupResourcePlacementService.GroupResourcePlacementState.class,GroupResourcePlacementService.GroupResourcePlacementState.FIELD_NAME_RESOURCE_POOL_LINK,resourcePoolState.documentSelfLink);  QueryUtil.addExpandOption(queryTask);  ServiceDocumentQuery<GroupResourcePlacementState> query=new ServiceDocumentQuery<>(getHost(),GroupResourcePlacementState.class);  List<GroupResourcePlacementState> placements=new ArrayList<>();  query.query(queryTask,null);}  }
class C{  public ConflictsCompareInput(CompareConfiguration config){  super(config);}  }
class C{  public void endObjectName(O object,String name){}  }
class C{  public T distance(final FieldVector3D<T> v){  final T dx=v.x.subtract(x);  final T dy=v.y.subtract(y);  final T dz=v.z.subtract(z);  return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz)).sqrt();}  }
class C{  public PointF mapViewToImage(PointF viewPoint){  float[] points=mTempValues;  points[0]=viewPoint.x;  points[1]=viewPoint.y;  mActiveTransform.invert(mActiveTransformInverse);  mActiveTransformInverse.mapPoints(points,0,points,0,1);  mapAbsoluteToRelative(points,points,1);  return new PointF(points[0],points[1]);}  }
class C{  private double determineLMParameter(double[] qy,double delta,double[] diag,InternalData internalData,int solvedCols,double[] work1,double[] work2,double[] work3,double[] lmDir,double lmPar){  final double[][] weightedJacobian=internalData.weightedJacobian;  final int[] permutation=internalData.permutation;  final int rank=internalData.rank;  final double[] diagR=internalData.diagR;  final int nC=weightedJacobian[0].length;  for (int j=0; j < rank; ++j) {    lmDir[permutation[j]]=qy[j];  }  for (int j=rank; j < nC; ++j) {    lmDir[permutation[j]]=0;  }  for (int k=rank - 1; k >= 0; --k) {    int pk=permutation[k];    double ypk=lmDir[pk] / diagR[pk];    for (int i=0; i < k; ++i) {      lmDir[permutation[i]]-=ypk * weightedJacobian[i][pk];    }    lmDir[pk]=ypk;  }  double dxNorm=0;  for (int j=0; j < solvedCols; ++j) {    int pj=permutation[j];    double s=diag[pj] * lmDir[pj];    work1[pj]=s;    dxNorm+=s * s;  }  dxNorm=FastMath.sqrt(dxNorm);  double fp=dxNorm - delta;  if (fp <= 0.1 * delta) {    lmPar=0;    return lmPar;  }  double sum2;  double parl=0;  if (rank == solvedCols) {    for (int j=0; j < solvedCols; ++j) {      int pj=permutation[j];      work1[pj]*=diag[pj] / dxNorm;    }    sum2=0;    for (int j=0; j < solvedCols; ++j) {      int pj=permutation[j];      double sum=0;      for (int i=0; i < j; ++i) {        sum+=weightedJacobian[i][pj] * work1[permutation[i]];      }      double s=(work1[pj] - sum) / diagR[pj];      work1[pj]=s;      sum2+=s * s;    }    parl=fp / (delta * sum2);  }  sum2=0;  for (int j=0; j < solvedCols; ++j) {    int pj=permutation[j];    double sum=0;    for (int i=0; i <= j; ++i) {      sum+=weightedJacobian[i][pj] * qy[i];    }    sum/=diag[pj];    sum2+=sum * sum;  }  double gNorm=FastMath.sqrt(sum2);  double paru=gNorm / delta;  if (paru == 0) {    paru=Precision.SAFE_MIN / FastMath.min(delta,0.1);  }  lmPar=FastMath.min(paru,FastMath.max(lmPar,parl));  if (lmPar == 0) {    lmPar=gNorm / dxNorm;  }  for (int countdown=10; countdown >= 0; --countdown) {    if (lmPar == 0) {      lmPar=FastMath.max(Precision.SAFE_MIN,0.001 * paru);    }    double sPar=FastMath.sqrt(lmPar);    for (int j=0; j < solvedCols; ++j) {      int pj=permutation[j];      work1[pj]=sPar * diag[pj];    }    determineLMDirection(qy,work1,work2,internalData,solvedCols,work3,lmDir);    dxNorm=0;    for (int j=0; j < solvedCols; ++j) {      int pj=permutation[j];      double s=diag[pj] * lmDir[pj];      work3[pj]=s;      dxNorm+=s * s;    }    dxNorm=FastMath.sqrt(dxNorm);    double previousFP=fp;    fp=dxNorm - delta;    if (FastMath.abs(fp) <= 0.1 * delta || (parl == 0 && fp <= previousFP && previousFP < 0)) {      return lmPar;    }    for (int j=0; j < solvedCols; ++j) {      int pj=permutation[j];      work1[pj]=work3[pj] * diag[pj] / dxNorm;    }    for (int j=0; j < solvedCols; ++j) {      int pj=permutation[j];      work1[pj]/=work2[j];      double tmp=work1[pj];      for (int i=j + 1; i < solvedCols; ++i) {        work1[permutation[i]]-=weightedJacobian[i][pj] * tmp;      }    }    sum2=0;    for (int j=0; j < solvedCols; ++j) {      double s=work1[permutation[j]];      sum2+=s * s;    }    double correction=fp / (delta * sum2);    if (fp > 0) {      parl=FastMath.max(parl,lmPar);    } else     if (fp < 0) {      paru=FastMath.min(paru,lmPar);    }    lmPar=FastMath.max(parl,lmPar + correction);  }  return lmPar;}  }
class C{  public void writeBoolean(boolean value) throws JMSException {  initializeWriting();  try {    this.dataOut.writeBoolean(value);  } catch (  IOException ioe) {    JMSException jmsEx=new JMSException("Could not write data:" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public AggregateTranslator(final CharSequenceTranslator... translators){  this.translators=clone(translators);}  }
class C{  public boolean hasAuthorities(){  for (  UserAuthorityGroup group : userAuthorityGroups) {    if (group != null && group.getAuthorities() != null && !group.getAuthorities().isEmpty()) {      return true;    }  }  return false;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (names != null) {    for (int i=0; i < names.length; i++) {      if (i > 0) {        buffer.append(",");      }      buffer.append(names[i]);    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public VideoGetAlbumByIdQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  private void transferToSpecificBuilderAndReset(){  if (currentTag == Tag.VERSION) {    dataBuilder.setVersion(buffer.toString());  }  addToRobotBuilder();  addToBrowserBuilder();  addToOperatingSystemBuilder();  addToBrowserPatternBuilder();  addToBrowserTypeBuilder();  addToBrowserOsMappingBuilder();  addToOperatingSystemPatternBuilder();  addToDeviceBuilder();  addToDevicePatternBuilder();  buffer=new StringBuilder();}  }
class C{  public boolean isInterfaceDirectSuperinterfaceOf(SootClass parent,SootClass possibleChild){  parent.checkLevel(SootClass.HIERARCHY);  possibleChild.checkLevel(SootClass.HIERARCHY);  return getDirectSuperinterfacesOf(possibleChild).contains(parent);}  }
class C{  public void addSuperInterfaceId(Access node){  List<Access> list=(parent == null || state == null) ? getSuperInterfaceIdListNoTransform() : getSuperInterfaceIdList();  list.addChild(node);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getGroupName() == null) ? 0 : getGroupName().hashCode());  result=prime * result + ((getTaskName() == null) ? 0 : getTaskName().hashCode());  result=prime * result + ((getStartTime() == null) ? 0 : getStartTime().hashCode());  result=prime * result + ((getEndTime() == null) ? 0 : getEndTime().hashCode());  result=prime * result + ((getStatus() == null) ? 0 : getStatus().hashCode());  result=prime * result + ((getServerHost() == null) ? 0 : getServerHost().hashCode());  result=prime * result + ((getServerDuid() == null) ? 0 : getServerDuid().hashCode());  result=prime * result + ((getFireInfo() == null) ? 0 : getFireInfo().hashCode());  return result;}  }
class C{  public MessagesSearchQuery q(String value){  return unsafeParam("q",value);}  }
class C{  protected final float calculateModuleSize(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft){  return (calculateModuleSizeOneWay(topLeft,topRight) + calculateModuleSizeOneWay(topLeft,bottomLeft)) / 2.0f;}  }
class C{  private void updateSharedPreferencesEntry(int notificationId,boolean remove){  Set<String> notificationIds=new HashSet<String>(mSharedPreferences.getStringSet(WEBRTC_NOTIFICATION_IDS,new HashSet<String>()));  if (remove && !notificationIds.isEmpty() && notificationIds.contains(String.valueOf(notificationId))) {    notificationIds.remove(String.valueOf(notificationId));  } else   if (!remove) {    notificationIds.add(String.valueOf(notificationId));  }  SharedPreferences.Editor sharedPreferenceEditor=mSharedPreferences.edit();  sharedPreferenceEditor.putStringSet(WEBRTC_NOTIFICATION_IDS,notificationIds);  sharedPreferenceEditor.apply();}  }
class C{  static public void normalize(Node node){  for (int i=0; i < node.getChildNodes().getLength(); i++) {    Node childNode=node.getChildNodes().item(i);    if (childNode.getNodeType() == Node.TEXT_NODE && childNode.getNodeValue().trim().length() == 0) {      node.removeChild(childNode);      i--;    } else     normalize(childNode);  }}  }
class C{  protected Dfp trap(int type,String what,Dfp oper,Dfp def,Dfp result){  return def;}  }
class C{  @Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {  fAllWhitespace=true;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  CompareWindow viewer=(CompareWindow)getParent();  viewer.getJList().setSelectionInterval(0,viewer.getListModel().getSize() - 1);  viewer.getJList().setSelectionInterval(0,viewer.getListModel().getSize() - 1);}  }
class C{  public DefaultingDictionary(V defaultValue){  this.defaultValue=defaultValue;}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  public int addSeries(Color color){  int i=this.series.size();  this.series.add(new Series(color));  return i;}  }
class C{  public void notifyDataChanged(){  init();}  }
class C{  public BoardGetCommentsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public double det(){  return new LUDecomposition(this).det();}  }
class C{  void addNeighbourRegion(MapRegion neighbour){  neighbours=(MapRegion[])ArrayUtils.add(neighbours,neighbour);}  }
class C{  private void updateSize(){  int newLineCount=ActionUtils.getLineCount(pane);  if (newLineCount == lineCount) {    return;  }  lineCount=newLineCount;  int h=lineCount * charHeight + pane.getHeight();  int d=(int)Math.log10(lineCount) + 1;  if (d < 1) {    d=1;  }  int w=d * charWidth + r_margin + l_margin;  format="%" + d + "d";  setPreferredSize(new Dimension(w,h));  if (getParent() != null) {    getParent().doLayout();  }}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  private boolean handleException(Throwable ex){  if (ex == null) {    return false;  }  collectDeviceInfo(mContext);  return true;}  }
class C{  private void updateNamespaceBundles(NamespaceName nsname,NamespaceBundles nsBundles,StatCallback callback) throws Exception {  checkNotNull(nsname);  checkNotNull(nsBundles);  String path=joinPath(LOCAL_POLICIES_ROOT,nsname.toString());  LocalPolicies policies=null;  try {    policies=this.pulsar.getLocalZkCacheService().policiesCache().get(path);  } catch (  KeeperException.NoNodeException ne) {    this.pulsar.getLocalZkCacheService().createPolicies(path,false);    policies=this.pulsar.getLocalZkCacheService().policiesCache().get(path);  }  policies.bundles=getBundlesData(nsBundles);  this.pulsar.getLocalZkCache().getZooKeeper().setData(path,ObjectMapperFactory.getThreadLocal().writeValueAsBytes(policies),-1,callback,null);}  }
class C{  @Override public List<Period> generatePeriods(DateTimeUnit dateTimeUnit){  dateTimeUnit.setMonth(1);  dateTimeUnit.setDay(1);  List<Period> periods=Lists.newArrayList();  int year=dateTimeUnit.getYear();  Calendar calendar=getCalendar();  while (year == dateTimeUnit.getYear()) {    periods.add(createPeriod(dateTimeUnit,null));    dateTimeUnit=calendar.plusDays(dateTimeUnit,1);  }  return periods;}  }
class C{  private Vector resolveAllLocalSystem(String systemId){  Vector map=new Vector();  String osname=System.getProperty("os.name");  boolean windows=(osname.indexOf("Windows") >= 0);  Enumeration en=catalogEntries.elements();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == SYSTEM && (e.getEntryArg(0).equals(systemId) || (windows && e.getEntryArg(0).equalsIgnoreCase(systemId)))) {      map.addElement(e.getEntryArg(1));    }  }  if (map.size() == 0) {    return null;  } else {    return map;  }}  }
class C{  @Override public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event){  if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {    event.getText().clear();    int flags=DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR | DateUtils.FORMAT_SHOW_WEEKDAY;    String dateString=DateUtils.formatDateTime(getContext(),mDateMillis,flags);    event.getText().add(dateString);    return true;  }  return super.dispatchPopulateAccessibilityEvent(event);}  }
class C{  public int validSamplesInFrame(){  return validSamplesInFrame;}  }
class C{  public int download_file1(String file_id,long file_offset,long download_bytes,DownloadCallback callback) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(file_id,parts);  if (this.errno != 0) {    return this.errno;  }  return this.download_file(parts[0],parts[1],file_offset,download_bytes,callback);}  }
class C{  @Override public void valueChanged(ListSelectionEvent e){  if (!e.getValueIsAdjusting()) {    int selectedIndex=multiList.getSelectedIndex();    if (selectedIndex >= 0) {      populateSegmentList(selectedIndex);    }  }}  }
class C{  private void createRecordHolderQueue(File[] listFiles){  this.recordHolderHeapLocal=new PriorityQueue<SortTempFileChunkHolder>(listFiles.length);}  }
class C{  private static byte[] copyOfRange(byte[] from,int start,int end){  int length=end - start;  byte[] result=new byte[length];  System.arraycopy(from,start,result,0,length);  return result;}  }
class C{  public ArrayFieldVector<T> append(ArrayFieldVector<T> v){  return new ArrayFieldVector<T>(this,v);}  }
class C{  public void addEntryForMigration(Entry entry){  addTabId(getCount(),entry.tabId);  if (mEntryMap.indexOfKey(entry.tabId) >= 0)   return;  mEntryMap.put(entry.tabId,entry);}  }
class C{  public void testStandaloneTaskEvents() throws Exception {  Task task=null;  try {    task=taskService.newTask();    task.setCategory("123");    task.setDescription("Description");    taskService.saveTask(task);    assertEquals(3,listener.getEventsReceived().size());    ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());    assertTrue(event.getEntity() instanceof Task);    Task taskFromEvent=(Task)event.getEntity();    assertEquals(task.getId(),taskFromEvent.getId());    assertNull(event.getProcessDefinitionId());    assertNull(event.getProcessInstanceId());    assertNull(event.getExecutionId());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);    assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(2);    assertEquals(ActivitiEventType.TASK_CREATED,event.getType());    listener.clearEventsReceived();    taskService.setOwner(task.getId(),"owner");    assertEquals(1,listener.getEventsReceived().size());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());    assertTrue(event.getEntity() instanceof Task);    taskFromEvent=(Task)event.getEntity();    assertEquals(task.getId(),taskFromEvent.getId());    assertEquals("owner",taskFromEvent.getOwner());    assertNull(event.getProcessDefinitionId());    assertNull(event.getProcessInstanceId());    assertNull(event.getExecutionId());    listener.clearEventsReceived();    taskService.setAssignee(task.getId(),"kermit");    assertEquals(2,listener.getEventsReceived().size());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.TASK_ASSIGNED,event.getType());    assertTrue(event.getEntity() instanceof Task);    taskFromEvent=(Task)event.getEntity();    assertEquals(task.getId(),taskFromEvent.getId());    assertEquals("kermit",taskFromEvent.getAssignee());    assertNull(event.getProcessDefinitionId());    assertNull(event.getProcessInstanceId());    assertNull(event.getExecutionId());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);    assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());    assertTrue(event.getEntity() instanceof Task);    taskFromEvent=(Task)event.getEntity();    assertEquals(task.getId(),taskFromEvent.getId());    assertNull(event.getProcessDefinitionId());    assertNull(event.getProcessInstanceId());    assertNull(event.getExecutionId());    listener.clearEventsReceived();    taskService.complete(task.getId());    assertEquals(2,listener.getEventsReceived().size());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.TASK_COMPLETED,event.getType());    assertTrue(event.getEntity() instanceof Task);    taskFromEvent=(Task)event.getEntity();    assertEquals(task.getId(),taskFromEvent.getId());    assertNull(event.getProcessDefinitionId());    assertNull(event.getProcessInstanceId());    assertNull(event.getExecutionId());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);    assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());    assertTrue(event.getEntity() instanceof Task);    taskFromEvent=(Task)event.getEntity();    assertEquals(task.getId(),taskFromEvent.getId());    assertNull(event.getProcessDefinitionId());    assertNull(event.getProcessInstanceId());    assertNull(event.getExecutionId());  }  finally {    if (task != null) {      String taskId=task.getId();      task=taskService.createTaskQuery().taskId(taskId).singleResult();      if (task != null) {        taskService.deleteTask(taskId);      }      historyService.deleteHistoricTaskInstance(taskId);    }  }}  }
class C{  private Throwable afterConsumption(boolean successful,long lastProcessedKey){  try {    getReplicationInFacade().afterConsumption(getReplicationInContext(),successful,lastProcessedKey);    return null;  } catch (  Throwable ex) {    if (_specificLogger.isLoggable(Level.SEVERE)) {      _specificLogger.log(Level.SEVERE,"failure during after consumption",ex);    }    final long possibleRevertedKey=calcLastProcessedkey();    if (possibleRevertedKey != _lastProcessedKey) {      if (_specificLogger.isLoggable(Level.SEVERE)) {        _specificLogger.log(Level.SEVERE,"reverting last processed redo key from: " + _lastProcessedKey + " to "+ possibleRevertedKey,ex);      }      _lastProcessedKey=possibleRevertedKey;    }    return ex;  }}  }
class C{  private MetricName(List<String> path){  path_=unmodifiableList(new ArrayList<>(path));}  }
class C{  public void add(Unit u){  getBody().getUnits().add(u);}  }
class C{  public static String[] tokenizeToStringArray(String str,String delimiters,boolean trimTokens,boolean ignoreEmptyTokens){  StringTokenizer st=new StringTokenizer(str,delimiters);  List<String> tokens=new ArrayList<String>();  while (st.hasMoreTokens()) {    String token=st.nextToken();    if (trimTokens) {      token=token.trim();    }    if (!ignoreEmptyTokens || token.length() > 0) {      tokens.add(token);    }  }  return toStringArray(tokens);}  }
class C{  AsmClassSource(String cls,InputStream data){  super(cls);  this.data=data;}  }
class C{  private InferenceTestUtils(){  super();}  }
class C{  private synchronized ContentModelValidator createChildModel(int contentSpecIndex){  XMLContentSpec contentSpec=new XMLContentSpec();  getContentSpec(contentSpecIndex,contentSpec);  if ((contentSpec.type & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY || (contentSpec.type & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY_OTHER || (contentSpec.type & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY_LOCAL) {  } else   if (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_LEAF) {    if (contentSpec.value == null && contentSpec.otherValue == null)     throw new RuntimeException("ImplementationMessages.VAL_NPCD");    fQName.setValues(null,(String)contentSpec.value,(String)contentSpec.value,(String)contentSpec.otherValue);    return new SimpleContentModel(contentSpec.type,fQName,null);  } else   if ((contentSpec.type == XMLContentSpec.CONTENTSPECNODE_CHOICE) || (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_SEQ)) {    XMLContentSpec contentSpecLeft=new XMLContentSpec();    XMLContentSpec contentSpecRight=new XMLContentSpec();    getContentSpec(((int[])contentSpec.value)[0],contentSpecLeft);    getContentSpec(((int[])contentSpec.otherValue)[0],contentSpecRight);    if ((contentSpecLeft.type == XMLContentSpec.CONTENTSPECNODE_LEAF) && (contentSpecRight.type == XMLContentSpec.CONTENTSPECNODE_LEAF)) {      fQName.setValues(null,(String)contentSpecLeft.value,(String)contentSpecLeft.value,(String)contentSpecLeft.otherValue);      fQName2.setValues(null,(String)contentSpecRight.value,(String)contentSpecRight.value,(String)contentSpecRight.otherValue);      return new SimpleContentModel(contentSpec.type,fQName,fQName2);    }  } else   if ((contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_ONE) || (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_MORE) || (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ONE_OR_MORE)) {    XMLContentSpec contentSpecLeft=new XMLContentSpec();    getContentSpec(((int[])contentSpec.value)[0],contentSpecLeft);    if (contentSpecLeft.type == XMLContentSpec.CONTENTSPECNODE_LEAF) {      fQName.setValues(null,(String)contentSpecLeft.value,(String)contentSpecLeft.value,(String)contentSpecLeft.otherValue);      return new SimpleContentModel(contentSpec.type,fQName,null);    }  } else {    throw new RuntimeException("ImplementationMessages.VAL_CST");  }  fLeafCount=0;  fLeafCount=0;  CMNode cmn=buildSyntaxTree(contentSpecIndex,contentSpec);  return new DFAContentModel(cmn,fLeafCount,false);}  }
class C{  public static synchronized JSpaceAttributes loadConfigDCache(String fileName) throws SpaceConfigurationException, IOException, SAXException, ParserConfigurationException {  JSpaceAttributes prop=dCacheConfigFilesMap.get(fileName);  if (prop == null) {    InputStream dCacheInputStream=ResourceLoader.findConfigDCache(fileName);    if (dCacheInputStream != null) {      prop=(JSpaceAttributes)JProperties.convertXML(dCacheInputStream);      dCacheConfigFilesMap.put(fileName,prop);    }  }  return (JSpaceAttributes)prop.clone();}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new AbsListView.LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public static final double footPoundsToNewtonMeters(double footPound){  return footPound * FOOT_POUND_TO_NEWTON_METER;}  }
class C{  @Override public final void writeLong(long v) throws IOException {  work[0]=(byte)v;  work[1]=(byte)(v >> 8);  work[2]=(byte)(v >> 16);  work[3]=(byte)(v >> 24);  work[4]=(byte)(v >> 32);  work[5]=(byte)(v >> 40);  work[6]=(byte)(v >> 48);  work[7]=(byte)(v >> 56);  dis.write(work,0,8);}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  public void stop() throws IOException {  logger.info("Stopping storage process...");  ProcessBuilder stopBuilder=process(getStopCommand());  Process stopper=stopBuilder.start();  sleeper.sleepQuietly(SCRIPT_EXECUTE_WAIT_TIME_MS);  try {    int code=stopper.exitValue();    if (code == 0) {      logger.info("Storage process has been stopped");      instanceState.setStorageProxyAlive(false);    } else {      logger.error("Unable to stop storage process. Error code: {}",code);      logProcessOutput(stopper);    }  } catch (  Exception e) {    logger.warn("Could not shut down storage process correctly: ",e);  }}  }
class C{  @Override public Object call(){  cachePersistenceDAO.persistBatch(keyList);  return null;}  }
class C{  public static UserFeedback createUserFeedback(){  UserFeedback userFeedback=new UserFeedback(Constants.DEFAULT_PREFIX_USER_FEEDBACK + internalId++);  return userFeedback;}  }
class C{  public NeighborIterator(Node n,Iterator edges){  m_node=n;  m_edges=edges;}  }
class C{  public void rectValueToPixel(RectF r){  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new List(),1);  setChild(new List(),2);}  }
class C{  public void connect(final MqttCallback callback,final Runnable connectionRunnable) throws SpyException {  createClient(callback);  final ReconnectionSettings reconnectionSettings=getMqttConnectionDetails().getReconnectionSettings();  if (reconnectionSettings == null) {    new Thread(connectionRunnable).start();  } else {    reconnectionManager.addConnection(this,connectionRunnable);  }}  }
class C{  public VideoEditQuery privacyView(List<String> value){  return unsafeParam("privacy_view",value);}  }
class C{  public LineIterator(final Reader reader){  if (reader == null) {    throw new IllegalArgumentException("Reader must not be null");  }  if (reader instanceof BufferedReader) {    bufferedReader=(BufferedReader)reader;  } else {    bufferedReader=new BufferedReader(reader);  }}  }
class C{  public static boolean startsWith(String columnPath,String tableName){  if (tableName == null || columnPath == null)   return false;  return columnPath.startsWith(tableName + ".");}  }
class C{  public boolean isCannotShare(){  if (cannotShare == null) {    return false;  } else {    return cannotShare;  }}  }
class C{  public Object clone(){  MultipleReturnValueRuleExpression clone=(MultipleReturnValueRuleExpression)super.clone();  clone.conditions=new ArrayList<IRuleCondition>();  Iterator<IRuleCondition> i=conditions.iterator();  while (i.hasNext()) {    clone.conditions.add((IRuleCondition)i.next().clone());  }  return clone;}  }
class C{  public static Charset toCharset(String charset){  return charset == null ? Charset.defaultCharset() : Charset.forName(charset);}  }
class C{  private void hamming(int size){  int start=(windowFunction.length - size) / 2;  int stop=(windowFunction.length + size) / 2;  double scale=1.0 / (double)size / 0.54;  double factor=twoPI / (double)size;  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (25.0 / 46.0 - 21.0 / 46.0 * Math.cos(factor * i));}  }
class C{  private static Class<?>[] reloadClasses(Class<?> root,Class<?>[] suiteClasses) throws InitializationError {  URL[] urls=new URL[]{classpathOf(root),classpathOf(IsolatedClassLoaderSuite.class)};  Class<?> sc=null;  try {    for (int i=0; i < suiteClasses.length; i++) {      sc=suiteClasses[i];      ClassLoader cl=new IsolatedClassLoader(urls,IsolatedClassLoaderSuite.class.getClassLoader());      suiteClasses[i]=cl.loadClass(sc.getName());    }    return suiteClasses;  } catch (  ClassNotFoundException cex) {    throw new InitializationError("could not reload class: " + sc);  }}  }
class C{  public static DataFrame zeromeanUnitVariance(DataFrame frame){  return zeromeanUnitVariance(frame,Collections.<String>emptyList());}  }
class C{  @CallSuper public void bind(@NonNull PreferenceData preferenceData){  if (DesignConfig.DEBUG_RECYCLER_VIEW) {    Log.v(TAG,getLogPrefix() + "bind to " + preferenceData.title+ getLogSuffix());  }  bindTextView(titleView,preferenceData.title);  bindTextView(summaryView,preferenceData.summary);  boolean removeIcon=preferenceData.removeIconIfEmpty && preferenceData.icon == null;  if (iconView != null) {    if (preferenceData.icon != null) {      iconView.setImageDrawable(preferenceData.icon);    }    iconView.setVisibility(removeIcon ? View.GONE : View.VISIBLE);  }  if (iconFrame != null) {    iconFrame.setVisibility(removeIcon ? View.GONE : View.VISIBLE);  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public ZWaveMtpWindowCoveringCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public static JavaRDD<List<Writable>> normalize(Schema schema,JavaRDD<List<Writable>> data,double min,double max,List<String> skipColumns){  DataFrame frame=DataFrames.toDataFrame(schema,data);  return DataFrames.toRecords(normalize(frame,min,max,skipColumns)).getSecond();}  }
class C{  @Override public List<Module> searchModule(Module module){  return sessionTemplate.selectList(NAMESPACE + ".searchModule",module);}  }
class C{  public boolean select(Viewer viewer,Object parentElement,Object element){  return false;}  }
class C{  protected static void showLogin(){  if (loginListener != null) {    loginListener.shouldAuthenticate();  }}  }
class C{  private void indexSplitDoc(){  try {    _indexSplitDoc();  }  finally {    shardState.indexState.globalState.indexingJobsRunning.release();    semaphore.release();    ctx.inFlightChunks.arriveAndDeregister();  }}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public boolean isApplicable(){  RemoteServiceBrowser remoteServiceBrowser=(RemoteServiceBrowser)getViewer();  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null && remoteServiceBrowser.getServicePanel().getFileTree().getModel().getRoot() != null && remoteServiceBrowser.getServicePanel().getFileTree().getModel().getChildCount(remoteServiceBrowser.getServicePanel().getFileTree().getModel().getRoot()) > 0;}  }
class C{  public String process(Item item) throws ProcessException {  int count=0;  Item ss=item.getItemAs(Relation.SYLLABLE);  Item firstSyllable=FIRST_SYLLABLE_PATH.findItem(item);  for (Item p=ss.getPrevious(); p != null && !p.equalsShared(firstSyllable); p=p.getPrevious()) {    if ("1".equals(p.getFeatures().getString("stress"))) {      count++;    }  }  return Integer.toString(rail(count));}  }
class C{  public static String checkNull(String string1){  if (string1 != null)   return string1; else   return "";}  }
class C{  public void error(Object elementOrLocation,String message,Object... params){  model.getDiagCollector().addDiag(Diag.error(getLocation(elementOrLocation),Model.diagPrefix(aspectName) + message,params));}  }
class C{  @Override public FDistribution makeDistribution(){  return new FDistribution(5.0,6.0);}  }
class C{  @LegacyNetworkConstant private int convertConstraintsToLegacyNetConstant(int constraintMap){  int reqNet=LEGACY_NETWORK_ANY;  reqNet=(constraintMap & Constraint.ON_ANY_NETWORK) == Constraint.ON_ANY_NETWORK ? LEGACY_NETWORK_CONNECTED : reqNet;  reqNet=(constraintMap & Constraint.ON_UNMETERED_NETWORK) == Constraint.ON_UNMETERED_NETWORK ? LEGACY_NETWORK_UNMETERED : reqNet;  return reqNet;}  }
class C{  public Entry copy(){  return new Entry(mVal,mXIndex,mData);}  }
class C{  private boolean equals(SimpleRegression model1,SimpleRegression model2,double tol){  if (model1.getN() != model2.getN()) {    return false;  }  if (FastMath.abs(model1.getIntercept() - model2.getIntercept()) > tol) {    return false;  }  if (FastMath.abs(model1.getInterceptStdErr() - model2.getInterceptStdErr()) > tol) {    return false;  }  if (FastMath.abs(model1.getMeanSquareError() - model2.getMeanSquareError()) > tol) {    return false;  }  if (FastMath.abs(model1.getR() - model2.getR()) > tol) {    return false;  }  if (FastMath.abs(model1.getRegressionSumSquares() - model2.getRegressionSumSquares()) > tol) {    return false;  }  if (FastMath.abs(model1.getRSquare() - model2.getRSquare()) > tol) {    return false;  }  if (FastMath.abs(model1.getSignificance() - model2.getSignificance()) > tol) {    return false;  }  if (FastMath.abs(model1.getSlope() - model2.getSlope()) > tol) {    return false;  }  if (FastMath.abs(model1.getSlopeConfidenceInterval() - model2.getSlopeConfidenceInterval()) > tol) {    return false;  }  if (FastMath.abs(model1.getSlopeStdErr() - model2.getSlopeStdErr()) > tol) {    return false;  }  if (FastMath.abs(model1.getSumOfCrossProducts() - model2.getSumOfCrossProducts()) > tol) {    return false;  }  if (FastMath.abs(model1.getSumSquaredErrors() - model2.getSumSquaredErrors()) > tol) {    return false;  }  if (FastMath.abs(model1.getTotalSumSquares() - model2.getTotalSumSquares()) > tol) {    return false;  }  if (FastMath.abs(model1.getXSumSquares() - model2.getXSumSquares()) > tol) {    return false;  }  return true;}  }
class C{  private boolean firstParamIsSelf(TypeElement classElement,SkylarkModule skyModule,DeclaredType objectType){  return !skyModule.namespace() && objectType.toString().equals(classElement.toString());}  }
class C{  public SpaceTypeDescriptorBuilder addCompoundIndex(String[] paths,boolean unique){  return addIndex(SpaceIndexFactory.createCompoundIndex(paths,SpaceIndexType.BASIC,null,unique));}  }
class C{  public static MultivaluedMap<String,String> decodeMatrix(String pathSegment,boolean decode){  MultivaluedMap<String,String> matrixMap=EmoMultivaluedMap.create();  int s=pathSegment.indexOf(';') + 1;  if (s == 0 || s == pathSegment.length()) {    return matrixMap;  }  do {    int e=pathSegment.indexOf(';',s);    if (e == -1) {      decodeMatrixParam(matrixMap,pathSegment.substring(s),decode);    } else     if (e > s) {      decodeMatrixParam(matrixMap,pathSegment.substring(s,e),decode);    }    s=e + 1;  } while (s > 0 && s < pathSegment.length());  return matrixMap;}  }
class C{  public static UUID maximumUuid(){  return new UUID(getMostSignificantBits(Long.MAX_VALUE),getLeastSignificantBits(Integer.MAX_VALUE,Long.MAX_VALUE));}  }
class C{  public String namespace(){  return theNamespace;}  }
class C{  public void updateExpandableItem(int expandableItemPosition,ExpandableItem expandableItem){  validateExpandableItem(expandableItem);  expandableItems.remove(expandableItemPosition);  expandableItems.add(expandableItemPosition,expandableItem);  int buttonPosition=buttons.size() - 1 - expandableItemPosition;  configureButtonContent(buttons.get(buttonPosition),expandableItem);}  }
class C{  public static Object deserialize(String content,Delegator delegator) throws SerializeException, SAXException, ParserConfigurationException, IOException {  Document document=UtilXml.readXmlDocument(content,false);  if (document != null) {    if (!"ofbiz-ser".equals(document.getDocumentElement().getTagName())) {      return UtilXml.fromXml(content);    }    return deserialize(document,delegator);  } else {    Debug.logWarning("Serialized document came back null",module);    return null;  }}  }
class C{  public void destroy(){}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(StringCodingUtils.getBytes(line.toString(),cs));    }    output.write(StringCodingUtils.getBytes(lineEnding,cs));  }}  }
class C{  public FileWriterWithEncoding(File file,Charset encoding,boolean append) throws IOException {  super();  this.out=initWriter(file,encoding,append);}  }
class C{  public boolean isDrawEntryLabelsEnabled(){  return mDrawEntryLabels;}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public void addTypeArgument(Access node){  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();  list.addChild(node);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public ASBSessionCursor queryASBSession(long id){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_ASB_SETS;  qh.Selection="ar." + S.COLUMN_ASB_SET_ID + " = ?";  qh.SelectionArgs=new String[]{String.valueOf(id)};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit="1";  return new ASBSessionCursor(wrapJoinHelper(builderASBSession(),qh));}  }
class C{  public DecorationCursor queryDecorationsSearch(String filter){  filter=(filter == null) ? "" : filter.trim();  if (filter.equals(""))   return mHelper.queryDecorations();  return mHelper.queryDecorationsSearch(filter);}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(change);}  }
class C{  public static int generateBackgroundColor(BookmarkItem item){  int normalizedIndex=MathUtils.positiveModulo(item.getUrl().hashCode(),DEFAULT_BACKGROUND_COLORS.length);  return DEFAULT_BACKGROUND_COLORS[normalizedIndex];}  }
class C{  public GaussianRandomGenerator(final RandomGenerator generator){  this.generator=generator;}  }
class C{  public static void write(File file,CharSequence data) throws IOException {  write(file,data,Charset.defaultCharset(),false);}  }
class C{  public void scrollToFinishActivity(){  final int childWidth=mContentView.getWidth();  int left=0, top=0;  left=childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE;  mDragHelper.smoothSlideViewTo(mContentView,left,top);  invalidate();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MoveBehindATK_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200838,skillcaster,num0,skillname);}  }
class C{  private void terminateTaskMgr(){synchronized (taskManager) {    List pendingTasks=taskManager.getPending();    for (int i=0; i < pendingTasks.size(); i++) {      taskManager.remove((TaskManager.Task)pendingTasks.get(i));    }synchronized (pendingDiscoveries) {      for (Iterator iter=pendingDiscoveries.iterator(); iter.hasNext(); ) {        Object req=iter.next();        iter.remove();        if (req instanceof Socket) {          try {            ((Socket)req).close();          } catch (          IOException e) {          }        }      }    }    taskManager.terminate();  }synchronized (pendingNotifies) {    pendingNotifies.clear();  }}  }
class C{  public void clearParams(){  params.clear();}  }
class C{  public boolean shouldInterceptNavigation(ExternalNavigationHandler externalNavHandler,NavigationParams navigationParams){  return true;}  }
class C{  public boolean isShowLabel(){  return showTitle;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FREE_EXPERIENCE_CHARACTER_CANT_TRADE(String value0){  return new SM_SYSTEM_MESSAGE(1400400,value0);}  }
class C{  protected void actionPerformed(GuiButton button) throws IOException {  if (button.id == 0) {    this.mc.displayGuiScreen(new GuiAchievements(this,this.mc.thePlayer.getStatFileWriter()));  }  if (button.id == 1) {    this.mc.displayGuiScreen(new GuiStats(this,this.mc.thePlayer.getStatFileWriter()));  }}  }
class C{  public IsEqualToExtended(Expression expression1,Expression expression2,boolean matchCase){  super(expression1,expression2,matchCase);}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  @Override protected void handleIOException(IOException e) throws IOException {  throw new TaggedIOException(e,tag);}  }
class C{  public double cond(){  return new SingularValueDecomposition(this).cond();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_Instant_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200413,num0,skillname);}  }
class C{  protected PolicyAuditor(){}  }
class C{  public static Point size(URL url){  if (url == null)   return null;  try {    return size(url.openStream());  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return null;}  }
class C{  public Interceptor[] buildRouteInterceptors(Interceptor[] defaultInters,Interceptor[] resourceInters,Class<? extends Resource> resourceClass,Interceptor[] methodInters,Method method){  List<Interceptor> allInters=new ArrayList<Interceptor>();  for (  Interceptor defaultInter : defaultInters) {    allInters.add(defaultInter);  }  for (  Interceptor resourceInter : resourceInters) {    allInters.add(resourceInter);  }  for (  Interceptor methodInter : methodInters) {    allInters.add(methodInter);  }  Class<? extends Interceptor>[] resourceClears=getResourceClears(resourceClass);  Class<? extends Interceptor>[] methodClears=getMethodClears(method);  if ((resourceClears != null && resourceClears.length > 0) || (methodClears != null && methodClears.length > 0)) {    for (int i=0; i < allInters.size(); i++) {      i=clearInterceptor(allInters,resourceClears,i);      i=clearInterceptor(allInters,methodClears,i);    }  }  return allInters.toArray(new Interceptor[allInters.size()]);}  }
class C{  public Response<?> response(){  return response;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_ITEM_WIN(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390003,value0,value1);}  }
class C{  public Response(int init){  out=new byte[init];  offset=0;}  }
class C{  private int compareDates(Duration duration1,Duration duration2){  int resultA=DatatypeConstants.INDETERMINATE;  int resultB=DatatypeConstants.INDETERMINATE;  XMLGregorianCalendar tempA=(XMLGregorianCalendar)TEST_POINTS[0].clone();  XMLGregorianCalendar tempB=(XMLGregorianCalendar)TEST_POINTS[0].clone();  tempA.add(duration1);  tempB.add(duration2);  resultA=tempA.compare(tempB);  if (resultA == DatatypeConstants.INDETERMINATE) {    return DatatypeConstants.INDETERMINATE;  }  tempA=(XMLGregorianCalendar)TEST_POINTS[1].clone();  tempB=(XMLGregorianCalendar)TEST_POINTS[1].clone();  tempA.add(duration1);  tempB.add(duration2);  resultB=tempA.compare(tempB);  resultA=compareResults(resultA,resultB);  if (resultA == DatatypeConstants.INDETERMINATE) {    return DatatypeConstants.INDETERMINATE;  }  tempA=(XMLGregorianCalendar)TEST_POINTS[2].clone();  tempB=(XMLGregorianCalendar)TEST_POINTS[2].clone();  tempA.add(duration1);  tempB.add(duration2);  resultB=tempA.compare(tempB);  resultA=compareResults(resultA,resultB);  if (resultA == DatatypeConstants.INDETERMINATE) {    return DatatypeConstants.INDETERMINATE;  }  tempA=(XMLGregorianCalendar)TEST_POINTS[3].clone();  tempB=(XMLGregorianCalendar)TEST_POINTS[3].clone();  tempA.add(duration1);  tempB.add(duration2);  resultB=tempA.compare(tempB);  resultA=compareResults(resultA,resultB);  return resultA;}  }
class C{  public static FragmentIntroBase newInstance(String type){  FragmentIntroBase fragment=new FragmentIntroBase();  Bundle args=new Bundle();  args.putString("type",type);  fragment.setArguments(args);  return fragment;}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  public MarketGetQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public boolean isRequiredEncode(){  return requiredEncode;}  }
class C{  public int currentId(){  return currentSlot;}  }
class C{  public String process(Item item) throws ProcessException {  int count=0;  Item ss=item.getItemAs(Relation.SYLLABLE);  Item firstSyllable=LAST_LAST_SYLLABLE_PATH.findItem(item);  for (Item p=ss; p != null; p=p.getNext()) {    if (p.equalsShared(firstSyllable)) {      break;    }    count++;  }  return Integer.toString(rail(count));}  }
class C{  private void parseAttributes(TypedArray a){  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_barWidth_progress,barWidth);  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_rimWidth_progress,rimWidth);  spinSpeed=(int)a.getInteger(R.styleable.ProgressWheel_spinSpeed_progress,spinSpeed);  delayMillis=(int)a.getInteger(R.styleable.ProgressWheel_delayMillis_progress,delayMillis);  if (delayMillis < 0) {    delayMillis=0;  }  barColor=a.getColor(R.styleable.ProgressWheel_barColor_progress,barColor);  barLength=(int)a.getDimension(R.styleable.ProgressWheel_barLength_progress,barLength);  textSize=(int)a.getDimension(R.styleable.ProgressWheel_textSize_progress,textSize);  textColor=(int)a.getColor(R.styleable.ProgressWheel_textColor_progress,textColor);  setText(a.getString(R.styleable.ProgressWheel_text_progress));  rimColor=(int)a.getColor(R.styleable.ProgressWheel_rimColor_progress,rimColor);  spinRimColor=(int)a.getColor(R.styleable.ProgressWheel_spinRimColor_progress,spinRimColor);  circleColor=(int)a.getColor(R.styleable.ProgressWheel_circleColor_progress,circleColor);  spinCircleColor=(int)a.getColor(R.styleable.ProgressWheel_spinCircleColor_progress,spinCircleColor);  barDegree=(int)a.getInteger(R.styleable.ProgressWheel_barDegree_progress,-1);}  }
class C{  @POST @Path("applications/{applicationName}/experiments/{experimentLabel}/users/{userID}") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value="Submit a single event or a batch of events for the specified assigned user(customer)",notes="*NOTE*: For a given user, please make sure that you have the user assignment done using the " + "assignments API before using this API. An event is either an impression, indicating the user " + "has been exposed to the treatment, or an action, indicating that the user has done something "+ "that you want to track. Please record impressions first and then action - use event "+ "name = \"IMPRESSION\" for impressions.") @Timed public Response recordEvents(@PathParam("applicationName") @ApiParam(value="Application Name") final Application.Name applicationName,@PathParam("experimentLabel") @ApiParam(value="Experiment Label") final Experiment.Label experimentLabel,@PathParam("userID") @ApiParam(value="Customer User ID that is already assigned using assignments API") final User.ID userID,@ApiParam(name="eventList",required=true,value="For impression",defaultValue=DEFAULT_EVENT) final EventList eventList) throws Exception {  final Date NOW=new Date();  Set<Context> contextSet=new HashSet<>();  for (  Event event : eventList.getEvents()) {    if (event.getTimestamp() == null) {      event.setTimestamp(NOW);    }    contextSet.add(event.getContext());    if (event.getName() == null || isBlank(event.getName().toString())) {      throw new IllegalArgumentException("Event name cannot be null or an empty string");    }  }  events.recordEvents(applicationName,experimentLabel,userID,eventList,contextSet);  return httpHeader.headers(CREATED).build();}  }
class C{  public static synchronized List<Proxy> noProxyList(){  if (noProxyList == null) {    ArrayList<Proxy> list=new ArrayList<Proxy>(1);    list.add(Proxy.NO_PROXY);    noProxyList=Collections.unmodifiableList(list);  }  return noProxyList;}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  @Override public void onConnectionCreated(Session session,Connection connection){  WritableMap payload=Arguments.createMap();  payload.putString("connectionId",connection.getConnectionId());  payload.putString("creationTime",connection.getCreationTime().toString());  payload.putString("data",connection.getData());  sendEvent(Events.EVENT_CLIENT_CONNECTED,payload);}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new List(),1);  setChild(new List(),2);  setChild(new Opt(),3);}  }
class C{  public void remove(int id){  String name=id2name.get(id);  if (name != null)   name2id.remove(name);  id2name.remove(id);}  }
class C{  public void clearChanged(){  changed.set(false);}  }
class C{  private void bindSession(){  SessionFactory sessionFactory=(SessionFactory)getBean("sessionFactory");  Session session=sessionFactory.openSession();  TransactionSynchronizationManager.bindResource(sessionFactory,new SessionHolder(session));}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  public static boolean isEcKey(Key key){  return "EC".equals(key.getAlgorithm());}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public EnumeratedRealDistribution(final double[] singletons,final double[] probabilities) throws MathIllegalArgumentException {  super();  innerDistribution=new EnumeratedDistribution<Double>(createDistribution(singletons,probabilities));}  }
class C{  private void rdp_decoding_rd(char[][] g_data,int disks,int stripe_unit_size,int w,int x,int y){  int packet_size=stripe_unit_size / w;  int ccount, count, rcount;  char[] rdata, xdata, ydata, row_data, diag_data;  int g, gx, gy, coffset, i, j, k, c;  int row_disk, diag_disk;  rcount=stripe_unit_size;  rdata=g_data[0];  xdata=g_data[x];  ydata=g_data[y];  gx=(x >= 3 ? x - 3 : pnumRdp - 1);  gy=(y >= 3 ? y - 3 : pnumRdp - 1);  row_disk=x;  diag_disk=y;  row_data=xdata;  diag_data=ydata;  g=gx;  while (true) {    if (g == pnumRdp - 1) {      if (gx == (row_disk >= 3 ? row_disk - 3 : row_disk + pnumRdp - 3)) {        row_disk=y;        diag_disk=x;        row_data=ydata;        diag_data=xdata;        g=gy;        continue;      } else       break;    } else {      int row_index;      char[] cdata;      int diag_count;      int row_count;      diag_count=stripe_unit_size;      row_count=stripe_unit_size;      row_index=(g - diag_disk + pnumRdp + 2) % pnumRdp;      coffset=(row_index + diag_disk - 2 + pnumRdp) % pnumRdp * packet_size;      cdata=g_data[1];      for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && k < packet_size; i++, j++, k++) {        diag_data[i]=cdata[j];      }      for (c=2; c < (disks + 2); c++) {        if (c == diag_disk)         continue;        ccount=stripe_unit_size;        cdata=g_data[c];        coffset=(row_index + diag_disk - c + pnumRdp) % pnumRdp * packet_size;        for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && j < ccount && k < packet_size; i++, j++, k++) {          diag_data[i]^=cdata[j];        }      }      ccount=rcount;      cdata=rdata;      coffset=(row_index + diag_disk - 1 + pnumRdp) % pnumRdp * packet_size;      for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && j < ccount && k < packet_size; i++, j++, k++) {        diag_data[i]^=cdata[j];      }      coffset=row_index * packet_size;      for (c=2; c < (disks + 2); c++) {        if (c == row_disk)         continue;        ccount=stripe_unit_size;        cdata=g_data[c];        coffset=row_index * packet_size;        for (i=coffset, k=0; i < ccount && k < packet_size; i++, k++) {          row_data[i]^=cdata[i];        }      }      cdata=rdata;      coffset=row_index * packet_size;      count=row_count;      for (i=coffset, k=0; i < count && k < packet_size; i++, k++) {        row_data[i]^=cdata[i];      }      g=(row_index + row_disk - 2) % pnumRdp;    }  }}  }
class C{  public FastFourierTransformer(final DftNormalization normalization){  this.normalization=normalization;}  }
class C{  public void addCoreEquipmentConfigurationChanger(final long equipmentId,final ICoreEquipmentConfigurationChanger coreEquipmentConfigurationChanger){  List<ICoreEquipmentConfigurationChanger> changers=coreEquipmentConfigurationChangers.get(equipmentId);  if (changers == null) {    changers=new ArrayList<>();    coreEquipmentConfigurationChangers.put(equipmentId,changers);  }  changers.add(coreEquipmentConfigurationChanger);}  }
class C{  int baselineFrequency(int time){  if (time < startTime || time > endTime) {    throw new RuntimeException("Invalid time " + time + "(startTime "+ startTime+ ", endTime "+ endTime+ ")");  }  return baseStart + (int)(baseSlope * (time - startTime));}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  protected VideoReorderVideosQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public boolean testAttribute(String sldContentString,TreeSelectionData selectionData,FieldIdEnum field,XMLSetFieldAttribute testValue){  boolean passed=false;  Document doc=getXMLDocument(sldContentString);  String extractedString=getString(doc,selectionData,field,XPATH_CHILD_ELEMENT_VALUE);  String valueToTest=testValue.getAttribute();  passed=(valueToTest.compareTo(extractedString) == 0);  System.out.println("Checking : " + field + " "+ extractedString+ " "+ (passed ? "PASS" : "FAIL"));  return passed;}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  String silence=utterance.getVoice().getFeatures().getString(Voice.FEATURE_SILENCE);  Item phraseHead=utterance.getRelation(Relation.PHRASE).getHead();  if (phraseHead == null) {    return;  }  Relation segment=utterance.getRelation(Relation.SEGMENT);  Item s=segment.getHead();  if (s == null) {    s=segment.appendItem(null);  } else {    s=s.prependItem(null);  }  s.getFeatures().setString("name",silence);  for (Item phrase=phraseHead; phrase != null; phrase=phrase.getNext()) {    Item word=phrase.getLastDaughter();    while (word != null) {      Item seg=segmentPath.findItem(word);      if (seg != null) {        Item pause=seg.appendItem(null);        pause.getFeatures().setString("name",silence);        break;      }      word=word.getPrevious();    }  }}  }
class C{  public static String version(){  return version;}  }
class C{  private void bringToBodies(SootClass sc){  if (sc.resolvingLevel() >= SootClass.BODIES)   return;  bringToSignatures(sc);  if (Options.v().debug_resolver())   G.v().out.println("bringing to BODIES: " + sc);  sc.setResolvingLevel(SootClass.BODIES);{    Collection<Type> references=classToTypesHierarchy.get(sc);    if (references != null) {      Iterator<Type> it=references.iterator();      while (it.hasNext()) {        final Type t=it.next();        addToResolveWorklist(t,SootClass.HIERARCHY);      }    }  }{    Collection<Type> references=classToTypesSignature.get(sc);    if (references != null) {      Iterator<Type> it=references.iterator();      while (it.hasNext()) {        final Type t=it.next();        addToResolveWorklist(t,SootClass.SIGNATURES);      }    }  }}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public GuiControllerSettings(){  title="";  resizeable=true;  maximized=false;  stageStyle=StageStyle.DECORATED;  changeToPrimaryStage=true;}  }
class C{  public boolean isSetLoadInfo(){  return this.loadInfo != null;}  }
class C{  public ZWaveAlarmCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  versionMax=MAX_SUPPORTED_VERSION;}  }
class C{  public void save() throws IOException {  if (myFilename == null) {    throw new IOException("No filename specified for PreferenceStore.");  }  if (myChanged) {    FileOutputStream out=new FileOutputStream(myFilename);    try {      save(out,null);      myChanged=false;    }  finally {      out.close();    }  }}  }
class C{  public XMLStreamException(String msg,Location location,Throwable th){  super("ParseError at [row,col]:[" + location.getLineNumber() + ","+ location.getColumnNumber()+ "]\n"+ "Message: "+ msg);  nested=th;  this.location=location;}  }
class C{  public SuffixFSM(URL url) throws IOException {  super(url,false);}  }
class C{  @Override public void write(byte[] b,int off,int len){  if (off < 0 || off > b.length || len < 0 || off + len > b.length || off + len < 0) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  int newcount=ensureCapacity(len);  System.arraycopy(b,off,buf,count,len);  count=newcount;}  }
class C{  public void showLoading(){  switchState(LOADING,null,null,null,null,Collections.<Integer>emptyList());}  }
class C{  public static EditShareFragment newInstance(OCShare shareToEdit,OCFile sharedFile,Account account){  EditShareFragment fragment=new EditShareFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_SHARE,shareToEdit);  args.putParcelable(ARG_FILE,sharedFile);  args.putParcelable(ARG_ACCOUNT,account);  fragment.setArguments(args);  return fragment;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_CHANGE_RANK(String value0){  return new SM_SYSTEM_MESSAGE(1390232,value0);}  }
class C{  public static boolean sectionLike(Item tokenItem){  String sectionType=((String)tokenItem.findFeature("p.name")).toLowerCase();  return inKingSectionLikeHash(sectionType,SECTION_TYPES);}  }
class C{  public boolean startTheRoomGame(String clientName,boolean setReady){  for (  Client client : roomClients)   if (client.getClientName().equals(clientName))   client.setGameStartSet(setReady);  for (  Client client : roomClients)   if (client.isGameStartSet() == false)   return false;  if (Settings.nGameCatchMe == getGameType()) {    for (    Client client : roomClients) {      String query;      client.getCatchMe().setPlayTimes(client.getCatchMe().getPlayTimes() + 1);      try {        query="update catchme set playtimes =" + client.getCatchMe().getPlayTimes() + " where id='"+ client.getClientName()+ "'";        stmt.executeUpdate(query);      } catch (      SQLException e) {        e.printStackTrace();      }    }  } else   if (Settings.nGameTicTacToc == getGameType()) {    for (    Client client : roomClients) {      String query;      System.out.println(client.getTicTacToc().getPlayTimes());      client.getTicTacToc().setPlayTimes(client.getTicTacToc().getPlayTimes() + 1);      try {        query="update tictactoc set playtimes =" + client.getTicTacToc().getPlayTimes() + " where id='"+ client.getClientName()+ "'";        System.out.println(client.getTicTacToc().getPlayTimes() + " testing");        stmt.executeUpdate(query);      } catch (      SQLException e) {        e.printStackTrace();      }    }  } else   if (Settings.nGameMeteorGame == getGameType()) {    for (    Client client : roomClients) {      String query;      client.getMeteor().setPlayTimes(client.getMeteor().getPlayTimes() + 1);      try {        query="update meteor set playtimes =" + client.getMeteor().getPlayTimes() + " where id='"+ client.getClientName()+ "'";        stmt.executeUpdate(query);      } catch (      SQLException e) {        e.printStackTrace();      }    }  } else   if (Settings.nGamePangPang == getGameType()) {    for (    Client client : roomClients) {      String query;      client.getPangPang().setPlayTimes(client.getPangPang().getPlayTimes() + 1);      try {        query="update pangpang set playtimes =" + client.getPangPang().getPlayTimes() + " where id='"+ client.getClientName()+ "'";        stmt.executeUpdate(query);      } catch (      SQLException e) {        e.printStackTrace();      }    }  }  setGameRunning(true);  if (Settings.nGameMeteorGame == getGameType())   initMeteorGameWhenConditionStart(); else   if (Settings.nGamePangPang == getGameType())   initPangPangWhenConditionStart(); else   roomClients.get(playTokenPositionNumber).setPlayToken(true);  return true;}  }
class C{  public static AttackStatus calculatePhysicalStatus(Creature attacker,Creature attacked,boolean isMainHand){  return calculatePhysicalStatus(attacker,attacked,isMainHand,0,100,false,false);}  }
class C{  @Override public boolean hasIntercept(){  return hasIntercept;}  }
class C{  public static int ushortToInt(short s){  return s & MAX_USHORT;}  }
class C{  public static void showProfile(Fragment fragment,String pilotId,@Nullable HashMap<String,String> extras){  if ((pilotId == null || pilotId.isEmpty()) && AirMap.hasValidAuthenticatedUser()) {    pilotId=AirMap.getUserId();  }  Intent intent=new Intent(fragment.getActivity(),ProfileActivity.class);  intent.putExtra(ProfileActivity.ARG_PILOT_ID,pilotId);  if (extras != null) {    intent.putExtra(CreateFlightActivity.KEY_VALUE_EXTRAS,extras);  }  fragment.startActivity(intent);}  }
class C{  public void testBoundaryEventSubscrptionsDeletedOnProcessInstanceDelete(){  String deploymentId1=deployBoundaryMessageTestProcess();  runtimeService.startProcessInstanceByKeyAndTenantId("messageTest",TENANT_ID);  assertEquals("My Task",taskService.createTaskQuery().singleResult().getName());  String deploymentId2=deployBoundaryMessageTestProcess();  ProcessInstance processInstance2=runtimeService.startProcessInstanceByKeyAndTenantId("messageTest",TENANT_ID);  assertEquals(2,taskService.createTaskQuery().count());  assertEquals(2,getAllEventSubscriptions().size());  runtimeService.deleteProcessInstance(processInstance2.getId(),"testing");  assertEquals("My Task",taskService.createTaskQuery().singleResult().getName());  assertEquals(1,getAllEventSubscriptions().size());  runtimeService.messageEventReceived("myMessage",getExecutionIdsForMessageEventSubscription("myMessage").get(0));  assertEquals(0,getAllEventSubscriptions().size());  assertEquals("Task after message",taskService.createTaskQuery().singleResult().getName());  cleanup(deploymentId1,deploymentId2);}  }
class C{  public static ArrayList<CompanyInfo.Company> searchCompany(String keyword){  keyword=ZHConverter.convert(keyword,ZHConverter.SIMPLIFIED);  ArrayList<CompanyInfo.Company> src=new ArrayList<>();  if (keyword != null && keyword.trim().length() > 0) {    for (int i=0; i < CompanyInfo.info.size(); i++) {      if (!CompanyInfo.names[i].contains(keyword) && !CompanyInfo.pinyin[i].contains(keyword)) {        continue;      }      src.add(CompanyInfo.info.get(i));    }  } else {    return CompanyInfo.info;  }  return src;}  }
class C{  public double[] breadthFirstSearch(double intialValue,double firstValue,IBFSTraversable<N> traversable,IDoubleBfsNextLevelValueIterator<N> nextValueIterator,List<Integer> sources){  double[] results=new double[nodes.length];  Arrays.fill(results,intialValue);  boolean[] alreadyScanned=new boolean[nodes.length];  Arrays.fill(alreadyScanned,false);  Set<Integer> currentNodesIndex=new HashSet<>(sources);  iterativeDoubleBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traversable,nextValueIterator);  return results;}  }
class C{  public void defaultCase(Object object){  throw new RuntimeException("Internal error: " + object + " unhandled case.");}  }
class C{  private static ColumnType selectType(List<ColumnType> typeCandidates){  if (typeCandidates.isEmpty()) {    return CATEGORY;  } else {    return typeCandidates.get(0);  }}  }
class C{  public static long readVLong(byte[] bytes,int start) throws IOException {  return WritableComparator.readVLong(bytes,start);}  }
class C{  @Override public void mark(int readAheadLimit) throws IOException {  fInputStream.mark(readAheadLimit);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public void swapItems(List<T> items){  this.items=items;  notifyDataSetChanged();}  }
class C{  @Override public void start(){  m_line.start();  super.start();}  }
class C{  private String generateReportTableHtml(ReportTable reportTable,User user){  StringWriter stringWriter=new StringWriter();  GridUtils.toHtmlInlineCss(reportTableService.getReportTableGridByUser(reportTable.getUid(),new Date(),user.getOrganisationUnit().getUid(),user),stringWriter);  return stringWriter.toString().replaceAll("\\R","");}  }
class C{  public GSObjectMessageImpl(GSSessionImpl session,Serializable objBody) throws JMSException {  super(session,GSMessageImpl.OBJECT);  setObject(objBody);}  }
class C{  private void updateFixutreFilterMask(int mask){  Filter filter=bodyFixture.getFilter();  if (filter == Filter.DEFAULT_FILTER) {    CategoryFilter cf=new CategoryFilter(Integer.MAX_VALUE,mask);    bodyFixture.setFilter(cf);  } else {    CategoryFilter cf=new CategoryFilter(((CategoryFilter)filter).getCategory(),mask);    bodyFixture.setFilter(cf);  }}  }
class C{  public T[] computeDerivatives(final T t,final T[] y) throws MathIllegalArgumentException, MathIllegalStateException, NullPointerException {  evaluations.increment();  return equations.computeDerivatives(t,y);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PAY_DISTRIBUTE(long highestValue,int num2,long distributeKinah){  return new SM_SYSTEM_MESSAGE(1390187,highestValue,num2,distributeKinah);}  }
class C{  public void handleRollbackSA(RollbackBusPacket packet) throws SAException {  Context context=null;  ISAdapterIterator iter=null, entriesIter=null;  ILockObject templateLock=null, entryLock=null;  final XtnEntry xtnEntry=packet._xtnEntry;  final XtnData pXtn=xtnEntry.getXtnData();  try {    context=_cacheManager.getCacheContext();    try {      iter=_cacheManager.makeUnderXtnTemplatesIter(context,xtnEntry);      if (iter != null) {        while (true) {          ITemplateHolder template=(ITemplateHolder)iter.next();          if (template == null)           break;          try {            templateLock=getTemplateLockObject(template);synchronized (templateLock) {              if (template.isDeleted())               continue;              if (template.isExpired(xtnEntry.m_CommitRollbackTimeStamp))               context.setOperationAnswer(template,null,null); else               context.setOperationAnswer(template,null,new TransactionException("Transaction not active : " + xtnEntry.m_Transaction));              _cacheManager.removeTemplate(context,template,false,true,false);            }          }  finally {            if (templateLock != null)             freeTemplateLockObject(templateLock);          }        }      }    }  finally {      if (iter != null)       iter.close();    }    _engine.getFifoGroupsHandler().handleNeedFgOnlyScanOnXtnEnd(context,xtnEntry);    try {      entriesIter=_cacheManager.makeUnderXtnEntriesIter(context,xtnEntry,SelectType.ALL_ENTRIES,true);      if (entriesIter != null) {        Collection<ITemplateHolder> wf=null;        ENTRY_LOOP:         while (true) {          IEntryCacheInfo entryCacheHolder=(IEntryCacheInfo)entriesIter.next();          if (entryCacheHolder == null)           break ENTRY_LOOP;          IEntryHolder entry=_cacheManager.getEntryFromCacheHolder(entryCacheHolder);          if (entry == null)           continue ENTRY_LOOP;          if ((_cacheManager.isMemorySpace() || _cacheManager.isResidentEntriesCachePolicy()) && entry.isDeleted())           continue ENTRY_LOOP;          boolean entry_has_wf=false;          try {            entryLock=getEntryLockObject(entry);synchronized (entryLock) {              IEntryHolder eh=_cacheManager.getEntry(context,entry,true,true,true);              if (eh == null || eh.isDeleted())               continue ENTRY_LOOP;              if (!entry.isSameEntryInstance(eh) && _cacheManager.getLockManager().isPerLogicalSubjectLockObject(_cacheManager.isEvictableCachePolicy()))               continue ENTRY_LOOP;              entry=eh;              boolean updatedEntry=pXtn.isUpdatedEntry(entry);              _cacheManager.disconnectEntryFromXtn(context,entry,xtnEntry,true);              if (entry.isExpired(xtnEntry.m_CommitRollbackTimeStamp) && !entry.isEntryUnderWriteLockXtn()) {                if (!_engine.isExpiredEntryStayInSpace(entry) && entry.isExpired(_engine.getLeaseManager().getEffectiveEntryLeaseTime(xtnEntry.m_CommitRollbackTimeStamp))) {                  if (entry.isOffHeapEntry())                   _cacheManager.getEntry(context,entry,true,true,true);                  IServerTypeDesc typeDesc=_engine.getTypeManager().getServerTypeDesc(entry.getClassName());                  _engine.removeEntrySA(context,entry,typeDesc,false,true,SpaceEngine.EntryRemoveReasonCodes.LEASE_EXPIRED,false,false,false);                  continue ENTRY_LOOP;                }              }              if (updatedEntry && entry.isHasWaitingFor())               _engine.checkWFValidityAfterUpdate(context,entry);              if (entry.isHasWaitingFor()) {                entry_has_wf=true;                wf=entry.getCopyOfTemplatesWaitingForEntry();              }            }          }  finally {            if (entryLock != null)             freeEntryLockObject(entryLock);            entryLock=null;          }          if (entry_has_wf && wf != null) {            TEMPLATE_LOOP:             for (            ITemplateHolder template : wf) {              if (template.isDeleted()) {                handleRemoveWaitingForInfoSA_EntryBased(context,entry,template);                continue TEMPLATE_LOOP;              }              if (template.isFifoTemplate())               continue TEMPLATE_LOOP;              try {                _engine.performTemplateOnEntrySA(context,template,entry,true);              } catch (              TransactionConflictException ex) {                continue TEMPLATE_LOOP;              }catch (              TemplateDeletedException ex) {                continue TEMPLATE_LOOP;              }catch (              NoMatchException ex) {                continue TEMPLATE_LOOP;              }catch (              FifoException ex) {                continue TEMPLATE_LOOP;              }catch (              TransactionNotActiveException ex) {                continue TEMPLATE_LOOP;              }catch (              EntryDeletedException ex) {                continue ENTRY_LOOP;              }catch (              RuntimeException ex) {                after_xtn_activity_error(context,template,ex,false);                continue ENTRY_LOOP;              }            }          }          try {            _engine.touchLastEntryTimestamp();            _engine.getTemplateScanner().scanNonNotifyTemplates(context,entry,null,FifoSearch.NO,FifoGroupsSearch.NO);          } catch (          EntryDeletedException ex) {            continue ENTRY_LOOP;          }        }      }    }  finally {      if (entriesIter != null)       entriesIter.close();    }    _engine.getTransactionHandler().removeTransactionAfterEnd(xtnEntry);  }  finally {    _cacheManager.freeCacheContext(context);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_IS_NOT_WILLING_TO_RECEIVE(String value0){  return new SM_SYSTEM_MESSAGE(1300382,value0);}  }
class C{  public static String simpleHostname(String fullHostname){  int offset=fullHostname.indexOf('.');  if (offset != -1) {    return fullHostname.substring(0,offset);  }  return fullHostname;}  }
class C{  public void checkAndHide(){  if ((hideRequested() && mouseFurtherThan(5)) || (mouseFurtherThan(15))) {    hideTooltip();  }}  }
class C{  public ResponseListener() throws IOException {  super("GS-multicast-discovery-response-listener");  setDaemon(true);  serv=new ServerSocket(0,100,InetAddress.getByName(SystemInfo.singleton().network().getHostId()));}  }
class C{  Offset(Point drag,Point drop){  this.x=drop.getX() - drag.getX();  this.y=drop.getY() - drag.getY();}  }
class C{  private View fillFromTop(int nextTop){  mFirstPosition=Math.min(mFirstPosition,-1);  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);  if (mFirstPosition < 0) {    mFirstPosition=0;  }  return fillDown(mFirstPosition,nextTop);}  }
class C{  public void dump(){  System.out.println("Diphone: " + name);  System.out.println("    MP : " + midPoint);  for (int i=0; i < samples.length; i++) {    samples[i].dump();  }}  }
class C{  public GenomicCoords goToNextFeatureOnFile(String trackId,GenomicCoords currentGc,double slop) throws InvalidGenomicCoordsException, IOException, InvalidCommandLineException {  Track tr=matchIntervalFeatureTrack(trackId.trim());  if (tr == null) {    return currentGc;  }  TrackIntervalFeature tif=(TrackIntervalFeature)tr;  if (slop < 0) {    return tif.getIntervalFeatureSet().coordsOfNextFeature(currentGc);  } else {    GenomicCoords featureGc=tif.getIntervalFeatureSet().startEndOfNextFeature(currentGc);    if (featureGc.equalCoords(currentGc)) {      return currentGc;    } else {      featureGc.centerAndExtendGenomicCoords(featureGc,featureGc.getGenomicWindowSize(),slop);      return featureGc;    }  }}  }
class C{  DataSourceProvider(){}  }
class C{  @Override protected void configurePipeline(){  super.configurePipeline();  if (fXIncludeEnabled) {    if (fXIncludeHandler == null) {      fXIncludeHandler=new XIncludeHandler();      setProperty(XINCLUDE_HANDLER,fXIncludeHandler);      addCommonComponent(fXIncludeHandler);      fXIncludeHandler.reset(this);    }    if (fCurrentNSContext != fXIncludeNSContext) {      if (fXIncludeNSContext == null) {        fXIncludeNSContext=new XIncludeNamespaceSupport();      }      fCurrentNSContext=fXIncludeNSContext;      setProperty(NAMESPACE_CONTEXT,fXIncludeNSContext);    }    fDTDScanner.setDTDHandler(fDTDProcessor);    fDTDProcessor.setDTDSource(fDTDScanner);    fDTDProcessor.setDTDHandler(fXIncludeHandler);    fXIncludeHandler.setDTDSource(fDTDProcessor);    fXIncludeHandler.setDTDHandler(fDTDHandler);    if (fDTDHandler != null) {      fDTDHandler.setDTDSource(fXIncludeHandler);    }    XMLDocumentSource prev=null;    if (fFeatures.get(XMLSCHEMA_VALIDATION) == Boolean.TRUE) {      prev=fSchemaValidator.getDocumentSource();    } else {      prev=fLastComponent;      fLastComponent=fXIncludeHandler;    }    XMLDocumentHandler next=prev.getDocumentHandler();    prev.setDocumentHandler(fXIncludeHandler);    fXIncludeHandler.setDocumentSource(prev);    if (next != null) {      fXIncludeHandler.setDocumentHandler(next);      next.setDocumentSource(fXIncludeHandler);    }  } else {    if (fCurrentNSContext != fNonXIncludeNSContext) {      fCurrentNSContext=fNonXIncludeNSContext;      setProperty(NAMESPACE_CONTEXT,fNonXIncludeNSContext);    }  }}  }
class C{  protected boolean raycast(Vector2 start,double length,double invDx,double invDy,AABB aabb){  double tx1=(aabb.getMinX() - start.x) * invDx;  double tx2=(aabb.getMaxX() - start.x) * invDx;  double tmin=Math.min(tx1,tx2);  double tmax=Math.max(tx1,tx2);  double ty1=(aabb.getMinY() - start.y) * invDy;  double ty2=(aabb.getMaxY() - start.y) * invDy;  tmin=Math.max(tmin,Math.min(ty1,ty2));  tmax=Math.min(tmax,Math.max(ty1,ty2));  if (tmax < 0)   return false;  if (tmin > length)   return false;  return tmax >= tmin;}  }
class C{  public static String guessBuildSystemName(){  Project project=guessCurrentProject();  return buildSystemName(project);}  }
class C{  public WebappUrlBar(Context context,AttributeSet attrSet){  super(context,attrSet);  mIconResourceWidths=new SparseIntArray();  mUrlBar=new TextView(context);  mUrlBar.setSingleLine(true);  mUrlBar.setGravity(Gravity.CENTER_VERTICAL);  mUrlBar.setMovementMethod(ScrollingMovementMethod.getInstance());  mUrlBar.setHorizontalFadingEdgeEnabled(true);  mSeparator=new View(context);  addView(mUrlBar,new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT,Gravity.CENTER));  addView(mSeparator,new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,1,Gravity.BOTTOM));  mSeparator.setBackgroundColor(ApiCompatibilityUtils.getColor(context.getResources(),R.color.webapp_url_bar_separator));  setBackgroundColor(ApiCompatibilityUtils.getColor(context.getResources(),R.color.webapp_url_bar_bg));  mUrlBar.addOnLayoutChangeListener(this);}  }
class C{  public void reset(byte[] buf){  if (buf != null) {    reset(buf,0,buf.length);  } else {    clear();  }}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathAny(String path,ISpacePredicate... predicates){  return path(path,any(predicates));}  }
class C{  public static int dip2px(Context context,float dpValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dpValue * scale + 0.5f);}  }
class C{  BinarySearchTreeNode<E> contains(BinarySearchTreeNode<E> node,E comparable){  while (node != null) {    E nodeData=node.comparable;    int diff=comparable.compareTo(nodeData);    if (diff == 0) {      if (node.comparable.equals(comparable)) {        return node;      } else {        return null;      }    } else     if (diff < 0) {      node=node.left;    } else {      node=node.right;    }  }  return null;}  }
class C{  public LazyArray(String raw) throws LazyException {  LazyParser parser=new LazyParser(raw);  parser.tokenize();  if (parser.root.type != LazyNode.ARRAY) {    throw new LazyException("JSON Array must start with [",0);  }  root=parser.root;  cbuf=parser.cbuf;}  }
class C{  public String[] upload_appender_file(String group_name,byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_APPENDER_FILE,group_name,null,null,file_ext_name,length,new UploadBuff(file_buff,offset,length),meta_list);}  }
class C{  void fling(float velocityAngle){  mMode=FLING_MODE;  mFinished=false;  float velocity=velocityAngle;  mVelocity=velocity;  mDurationMillis=(int)(250.0f * Math.sqrt(2.0f * mCoeffVelocity * Math.abs(velocity) / DECELERATION));  mStartMillis=AnimationUtils.currentAnimationTimeMillis();}  }
class C{  private static void addAllComplexTypeChildren(CarbonDimension dimension,StringBuilder dimString,String parent){  dimString.append(dimension.getColName() + CarbonCommonConstants.COLON_SPC_CHARACTER + dimension.getDataType()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ parent+ CarbonCommonConstants.COLON_SPC_CHARACTER+ dimension.getColumnId()+ CarbonCommonConstants.HASH_SPC_CHARACTER);  for (int i=0; i < dimension.getNumberOfChild(); i++) {    CarbonDimension childDim=dimension.getListOfChildDimensions().get(i);    if (childDim.getNumberOfChild() > 0) {      addAllComplexTypeChildren(childDim,dimString,dimension.getColName());    } else {      dimString.append(childDim.getColName() + CarbonCommonConstants.COLON_SPC_CHARACTER + childDim.getDataType()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ dimension.getColName()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ childDim.getColumnId()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ childDim.getOrdinal()+ CarbonCommonConstants.HASH_SPC_CHARACTER);    }  }}  }
class C{  public LogicalMetric(TemplateDruidQuery templateDruidQuery,ResultSetMapper calculation,String name){  this(templateDruidQuery,calculation,name,name,DEFAULT_CATEGORY,name);}  }
class C{  private void checkIndex(final int index) throws MathIllegalArgumentException {  if (index < 0 || index >= getDimension()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INDEX,index,0,getDimension() - 1);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANT_EQUIP(String value0){  return new SM_SYSTEM_MESSAGE(1300386,value0);}  }
class C{  private void persistNewTemp(File fileCfg){  if (hsDeleteOnExit.size() == 0) {    logDebug(LogArea.CONFIG,"No temp file names to persist on exit.");    fileCfg.delete();    return;  }  logDebug(LogArea.CONFIG,"Persisting %d temp file names into %s",hsDeleteOnExit.size(),fileCfg.getAbsolutePath());  BufferedWriter writer=null;  try {    writer=new BufferedWriter(new FileWriter(fileCfg));    for (    File file : hsDeleteOnExit) {      if (!file.delete()) {        String f=file.getCanonicalPath();        writer.write(f);        writer.newLine();        logWarn(LogArea.JAR,"JVM failed to release %s",f);      }    }  } catch (  IOException e) {  } finally {    if (writer != null) {      try {        writer.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public ZeroException(Localizable specific,Object... arguments){  super(specific,INTEGER_ZERO,arguments);}  }
class C{  public E peek(){  for (; ; ) {    Node<E> node=top.get();    if (node == null) {      return null;    }    E e=node.get();    if (e == null) {      top.compareAndSet(node,node.next);    } else {      return e;    }  }}  }
class C{  public PolynomialFunction negate(){  double[] newCoefficients=new double[coefficients.length];  for (int i=0; i < coefficients.length; ++i) {    newCoefficients[i]=-coefficients[i];  }  return new PolynomialFunction(newCoefficients);}  }
class C{  public PhotosGetAlbumsQuery(VkApiClient client){  super(client,"photos.getAlbums",GetAlbumsResponse.class);}  }
class C{  public static synchronized boolean prepareDirectory(File directory){  if (directory.exists())   return true;  directory.mkdirs();  return directory.exists();}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=getFilterFactory().literal(getStringValue());  return expression;}  }
class C{  public void draw(Graphics2D gc,Dimension size){  if (doc.getNumberOfSamples() > 1) {    boolean vertical=viewer.getShowLegend().equals("vertical");    gc.setFont(getFont());    boolean doDraw=(size == null);    int yStart=20;    int x=3;    int maxX=x;    if (doDraw) {      String legend="Legend:";      gc.setColor(Color.BLACK);      gc.drawString(legend,x,yStart);      Dimension labelSize=Basic.getStringSize(gc,legend,gc.getFont()).getSize();      maxX=Math.max(maxX,labelSize.width);    }    int y=yStart + (int)(1.5 * gc.getFont().getSize());    Set<String> samples=new HashSet<>();    samples.addAll(doc.getSampleNames());    if (viewer.getGraphView() != null) {      for (Node v=viewer.getGraphView().getGraph().getFirstNode(); v != null; v=v.getNext()) {        String sampleName=((PhyloTree)viewer.getGraphView().getGraph()).getLabel(v);        if (sampleName != null && samples.contains(sampleName)) {          String label=doc.getSampleLabelGetter().getLabel(sampleName);          if (!label.equals(sampleName))           label+=" (" + sampleName + ")";          final Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();          int boxSize=labelSize.height - 2;          if (x + boxSize + labelSize.width+ 2 > getWidth() || vertical) {            x=3;            y+=1.5 * gc.getFont().getSize();          }          if (doDraw) {            final Image image=GraphicsUtilities.makeSampleIconSwing(doc,sampleName,true,true,boxSize + 1);            gc.drawImage(image,x,y - boxSize,this);            gc.setColor(getFontColor());            gc.drawString(label,x + boxSize + 2,y);          }          maxX=Math.max(maxX,x);          x+=boxSize + 2 + labelSize.width+ 10;          if (vertical)           maxX=Math.max(maxX,x);        }        if (size != null)         size.setSize(maxX,y);      }    }  }}  }
class C{  public static ShoppingCart makeShoppingListCart(ShoppingCart listCart,LocalDispatcher dispatcher,GenericValue shoppingList,Locale locale){  Delegator delegator=dispatcher.getDelegator();  if (shoppingList != null && shoppingList.get("productStoreId") != null) {    String productStoreId=shoppingList.getString("productStoreId");    String currencyUom=shoppingList.getString("currencyUom");    if (currencyUom == null) {      GenericValue productStore=ProductStoreWorker.getProductStore(productStoreId,delegator);      if (productStore == null) {        return null;      }      currencyUom=productStore.getString("defaultCurrencyUomId");    }    if (locale == null) {      locale=Locale.getDefault();    }    List<GenericValue> items=null;    try {      items=shoppingList.getRelated("ShoppingListItem",null,UtilMisc.toList("shoppingListItemSeqId"),false);    } catch (    GenericEntityException e) {      Debug.logError(e,module);    }    if (UtilValidate.isNotEmpty(items)) {      if (listCart == null) {        listCart=new ShoppingCart(delegator,productStoreId,locale,currencyUom);        listCart.setOrderPartyId(shoppingList.getString("partyId"));        listCart.setAutoOrderShoppingListId(shoppingList.getString("shoppingListId"));      } else {        if (!listCart.getPartyId().equals(shoppingList.getString("partyId"))) {          Debug.logError("CANNOT add shoppingList: " + shoppingList.getString("shoppingListId") + " of partyId: "+ shoppingList.getString("partyId")+ " to a shoppingcart with a different orderPartyId: "+ listCart.getPartyId(),module);          return listCart;        }      }      ProductConfigWrapper configWrapper=null;      for (      GenericValue shoppingListItem : items) {        String productId=shoppingListItem.getString("productId");        BigDecimal quantity=shoppingListItem.getBigDecimal("quantity");        Timestamp reservStart=shoppingListItem.getTimestamp("reservStart");        BigDecimal reservLength=null;        String configId=shoppingListItem.getString("configId");        if (shoppingListItem.get("reservLength") != null) {          reservLength=shoppingListItem.getBigDecimal("reservLength");        }        BigDecimal reservPersons=null;        if (shoppingListItem.get("reservPersons") != null) {          reservPersons=shoppingListItem.getBigDecimal("reservPersons");        }        if (UtilValidate.isNotEmpty(productId) && quantity != null) {          if (UtilValidate.isNotEmpty(configId)) {            configWrapper=ProductConfigWorker.loadProductConfigWrapper(delegator,dispatcher,configId,productId,listCart.getProductStoreId(),null,listCart.getWebSiteId(),listCart.getCurrency(),listCart.getLocale(),listCart.getAutoUserLogin());          }          String listId=shoppingListItem.getString("shoppingListId");          String itemId=shoppingListItem.getString("shoppingListItemSeqId");          Map<String,Object> attributes=UtilMisc.<String,Object>toMap("shoppingListId",listId,"shoppingListItemSeqId",itemId);          try {            listCart.addOrIncreaseItem(productId,null,quantity,reservStart,reservLength,reservPersons,null,null,null,null,null,attributes,null,configWrapper,null,null,null,dispatcher);          } catch (          CartItemModifyException e) {            Debug.logError(e,"Unable to add product to List Cart - " + productId,module);          }catch (          ItemNotFoundException e) {            Debug.logError(e,"Product not found - " + productId,module);          }        }      }      if (listCart.size() > 0) {        if (UtilValidate.isNotEmpty(shoppingList.get("paymentMethodId"))) {          listCart.addPayment(shoppingList.getString("paymentMethodId"));        }        if (UtilValidate.isNotEmpty(shoppingList.get("contactMechId"))) {          listCart.setAllShippingContactMechId(shoppingList.getString("contactMechId"));        }        if (UtilValidate.isNotEmpty(shoppingList.get("shipmentMethodTypeId"))) {          listCart.setAllShipmentMethodTypeId(shoppingList.getString("shipmentMethodTypeId"));        }        if (UtilValidate.isNotEmpty(shoppingList.get("carrierPartyId"))) {          listCart.setAllCarrierPartyId(shoppingList.getString("carrierPartyId"));        }        if (UtilValidate.isNotEmpty(shoppingList.getString("productPromoCodeId"))) {          listCart.addProductPromoCode(shoppingList.getString("productPromoCodeId"),dispatcher);        }      }    }  }  return listCart;}  }
class C{  public void performQuery() throws IOException, PIRException {  logger.info("Performing query: ");  JavaDStream<MapWritable> inputRDD=null;  if (dataInputFormat.equals(InputFormatConst.BASE_FORMAT)) {    inputRDD=readData();  } else   if (dataInputFormat.equals(InputFormatConst.ES)) {    inputRDD=readDataES();  } else {    throw new PIRException("Unknown data input format " + dataInputFormat);  }  performQuery(inputRDD);}  }
class C{  public GroupsGetMembersQuery sort(GroupsGetMembersSort value){  return unsafeParam("sort",value);}  }
class C{  public double minValue(){  Iterator iIter=asTreeMap().values().iterator();  Double dMin=Double.POSITIVE_INFINITY;  while (iIter.hasNext()) {    Double dVal=(Double)iIter.next();    dMin=(dVal < dMin) ? dVal : dMin;  }  return dMin;}  }
class C{  public void initialize() throws CarbonSortKeyAndGroupByException {  prefetch=Boolean.parseBoolean(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.CARBON_MERGE_SORT_PREFETCH,CarbonCommonConstants.CARBON_MERGE_SORT_PREFETCH_DEFAULT));  bufferSize=CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE;  this.isSortTempFileCompressionEnabled=Boolean.parseBoolean(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.IS_SORT_TEMP_FILE_COMPRESSION_ENABLED,CarbonCommonConstants.IS_SORT_TEMP_FILE_COMPRESSION_ENABLED_DEFAULTVALUE));  if (this.isSortTempFileCompressionEnabled) {    LOGGER.info("Compression was used while writing the sortTempFile");  }  try {    this.sortTempFileNoOFRecordsInCompression=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION,CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE));    if (this.sortTempFileNoOFRecordsInCompression < 1) {      LOGGER.error("Invalid value for: " + CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION + ": Only Positive Integer value(greater than zero) is allowed.Default value will"+ " be used");      this.sortTempFileNoOFRecordsInCompression=Integer.parseInt(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE);    }  } catch (  NumberFormatException e) {    LOGGER.error("Invalid value for: " + CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION + ", only Positive Integer value is allowed.Default value will be used");    this.sortTempFileNoOFRecordsInCompression=Integer.parseInt(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE);  }  initialise();}  }
class C{  public void clear(){  if (data != null) {    for (int i=0; i < (length * 5); i++)     data[i]=null;  }  length=0;}  }
class C{  public SegmentIntervalsHashIdGenerator(PhysicalTableDictionary physicalTableDictionary,DataSourceMetadataService dataSourceMetadataService){  this(physicalTableDictionary,dataSourceMetadataService,new DefaultingDictionary<>(null));}  }
class C{  public EsriFileGDB(){  addFieldTranslation("DATABASE",DataSourceConnectorFileGDB.FIELD_DATABASE);}  }
class C{  public static <T extends RealFieldElement<T>>T distance(final FieldVector3D<T> v1,final FieldVector3D<T> v2){  return v1.distance(v2);}  }
class C{  private void induceRec(Node v,Node vCpy,PhyloTree treeCpy,NodeSet keep,Set<Integer> stopIds,Map<Integer,NodeData> id2data,Map<Node,Node> node2copy){  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {    Node w=e.getTarget();    if (keep.contains(w)) {      int id=(Integer)w.getInfo();      Node wCpy=null;      if (node2copy != null)       wCpy=node2copy.get(w);      if (wCpy == null) {        wCpy=treeCpy.newNode();        if (node2copy != null)         node2copy.put(w,wCpy);        wCpy.setInfo(id);      }      NodeData nodeData=id2data.get(id);      if (nodeData != null)       wCpy.setData(nodeData); else       wCpy.setData(new NodeData(new int[0],new int[0]));      treeCpy.newEdge(vCpy,wCpy);      if (wCpy.getInDegree() > 1) {        for (Edge f=wCpy.getFirstInEdge(); f != null; f=wCpy.getNextInEdge(f))         treeCpy.setSpecial(f,true);      }      if (!stopIds.contains((Integer)w.getInfo()))       induceRec(w,wCpy,treeCpy,keep,stopIds,id2data,node2copy);    }  }}  }
class C{  public static long calculateBrokerMaxCapacity(SystemResourceUsage systemResourceUsage,ResourceQuota defaultQuota){  double bandwidthOutLimit=systemResourceUsage.bandwidthOut.limit * KBITS_TO_BYTES;  double bandwidthInLimit=systemResourceUsage.bandwidthIn.limit * KBITS_TO_BYTES;  long capacity=calculateBrokerCapacity(defaultQuota,systemResourceUsage.cpu.limit,systemResourceUsage.memory.limit,bandwidthOutLimit,bandwidthInLimit);  return capacity;}  }
class C{  public void onPrepared(MediaPlayer player){  mState=State.PLAYING;  updateNotification(String.format(getString(R.string.media_state_playing),mFile.getFileName()));  if (mMediaController != null) {    mMediaController.setEnabled(true);  }  player.seekTo(mStartPosition);  configAndStartMediaPlayer();  if (!mPlayOnPrepared) {    processPauseRequest();  }  if (mMediaController != null) {    mMediaController.updatePausePlay();  }}  }
class C{  public static void w(Class<?> clazz,String msg){  if (isDebug) {    Log.w(clazz.getSimpleName(),msg);  }}  }
class C{  public void notifySummonReleaseObservers(){  notifyObservers(ObserverType.SUMMONRELEASE);}  }
class C{  public void loadBcpFile(String bcpFilename,String delimiter,List<Attribute> attributes,String dateFormatString,ObjectSourceConnectionManager connectionManager,String sourceAttribute){  loadBcpFile(bcpFilename,delimiter,attributes,connectionManager,dateFormatString != null ? new SimpleDateFormat(dateFormatString) : null,sourceAttribute);}  }
class C{  @Nullable public static String readTextFromDisk(@NotNull File file){  return readTextFromDisk(file,true);}  }
class C{  public boolean spansMultiplePartitions(){  return partitions != null && partitions.isMultiple();}  }
class C{  private static Key generateKey64bits(){  byte[] keyValue=null;  MessageDigest sha=null;  try {    keyValue=Settings.keyStr.getBytes("UTF-8");    sha=MessageDigest.getInstance("SHA-1");    keyValue=sha.digest(keyValue);    keyValue=Arrays.copyOf(keyValue,16);    Key key=new SecretKeySpec(keyValue,Settings.ALGO);    return key;  } catch (  UnsupportedEncodingException e) {    System.out.println(e);  }catch (  NoSuchAlgorithmException e) {    System.out.println(e);  }  return null;}  }
class C{  public void componentMoved(ComponentEvent ev){}  }
class C{  public boolean isUptoDate(){  return true;}  }
class C{  public void reset(){  mGestureDetector.reset();  mPreviousTransform.reset();  mActiveTransform.reset();}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyAnd(String propertyName,ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){  return property(propertyName,and(leftPredicate,rightPredicate));}  }
class C{  public static void mergeStacks(IStorage sourceStorage,IStorage destStorage,Item sourceItem,Item targetItem,long count){  if (sourceItem.getItemCount() >= count) {    long freeCount=targetItem.getFreeCount();    count=count > freeCount ? freeCount : count;    long leftCount=destStorage.increaseItemCount(targetItem,count,sourceStorage.getStorageType() == destStorage.getStorageType() ? ItemUpdateType.INC_ITEM_MERGE : ItemUpdateType.INC_ITEM_COLLECT);    sourceStorage.decreaseItemCount(sourceItem,count - leftCount,sourceStorage.getStorageType() == destStorage.getStorageType() ? ItemUpdateType.DEC_ITEM_SPLIT : ItemUpdateType.DEC_ITEM_SPLIT_MOVE);  }}  }
class C{  private void updateEquipmentStatus(){  boolean down=false;  StringBuilder invalidationMessage=new StringBuilder();  for (  SupervisionEvent event : equipmentSupervisionStatus.values()) {    if (event != null) {      boolean isDown=false;      isDown|=event.getStatus().equals(SupervisionStatus.DOWN);      isDown|=event.getStatus().equals(SupervisionStatus.STOPPED);      if (isDown) {        down=true;        if (invalidationMessage.length() > 0) {          invalidationMessage.append("; ");        }        invalidationMessage.append(event.getMessage());      }    }  }  if (down) {    tagQuality.addInvalidStatus(TagQualityStatus.EQUIPMENT_DOWN,invalidationMessage.toString());  } else {    tagQuality.removeInvalidStatus(TagQualityStatus.EQUIPMENT_DOWN);  }}  }
class C{  public Boolean deleteProduct(EntityManager em,String productId){  Boolean status=true;  Product product=null;  try {    if (!em.getTransaction().isActive()) {      em.getTransaction().begin();    }    product=em.find(Product.class,productId);    if (product != null) {      em.remove(product);      em.getTransaction().commit();    } else {      logger.info("Product " + productId + " does not exist in the db");      status=false;    }  } catch (  Exception e) {    status=false;    logger.error("Error occured during delete of product. Detailed info: " + e);  }  return status;}  }
class C{  @Override public final int readInt() throws IOException {  dis.readFully(work,0,4);  return (work[3]) << 24 | (work[2] & 0xff) << 16 | (work[1] & 0xff) << 8 | (work[0] & 0xff);}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  if (needsSyncChildren()) {    synchronizeChildren();  }  out.defaultWriteObject();}  }
class C{  public NativeImageLoader(int height,int width,int channels){  this.height=height;  this.width=width;  this.channels=channels;}  }
class C{  public PagesGetQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public boolean isZoomOverItem(){  return m_zoomOverItem;}  }
class C{  @Override public void closeKeepAliveService(){synchronized (this) {    if (this.scheduledFuture != null) {      this.keepAliveRequestStreamObserver.onCompleted();      this.keepAliveRequestStreamObserver=null;      this.keepAliveResponseStreamObserver=null;      this.scheduledFuture.cancel(true);      this.scheduledFuture=null;    } else {      throw new IllegalStateException("Lease keep alive service not start yet");    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201051,num0,skillname);}  }
class C{  private BattlePokemonInfo createBattlePokemon(Pokemon pokemon){  return BattlePokemonInfo.newBuilder().setCurrentEnergy(0).setCurrentHealth(100).setPokemonData(pokemon.getDefaultInstanceForType()).build();}  }
class C{  public void addCommandClass(ZWaveCommandClass commandClass){  CommandClass key=commandClass.getCommandClass();  if (!supportedCommandClasses.containsKey(key)) {    logger.debug("NODE {}: Adding command class {} to the list of supported command classes.",nodeId,commandClass.getCommandClass().getLabel());    supportedCommandClasses.put(key,commandClass);    if (commandClass instanceof ZWaveEventListener) {      this.controller.addEventListener((ZWaveEventListener)commandClass);    }  }}  }
class C{  public static Dfp computeLn(final Dfp a,final Dfp one,final Dfp two){  int den=1;  Dfp x=a.add(new Dfp(a.getField(),-1)).divide(a.add(one));  Dfp y=new Dfp(x);  Dfp num=new Dfp(x);  Dfp py=new Dfp(y);  for (int i=0; i < 10000; i++) {    num=num.multiply(x);    num=num.multiply(x);    den+=2;    Dfp t=num.divide(den);    y=y.add(t);    if (y.equals(py)) {      break;    }    py=new Dfp(y);  }  return y.multiply(two);}  }
class C{  public AudioGetBroadcastListQuery active(Boolean value){  return unsafeParam("active",value);}  }
class C{  public int increment(int offset){  CharSequence txt=getText();  int i;  if (txt != null) {    try {      i=Integer.parseInt(txt.toString());    } catch (    NumberFormatException e) {      i=0;    }  } else {    i=0;  }  i=i + offset;  setText(String.valueOf(i));  return i;}  }
class C{  public void reset(){  Iterator iter=m_vis.visibleItems(m_nodeGroup);  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    ForceItem fitem=(ForceItem)item.get(FORCEITEM);    if (fitem != null) {      fitem.location[0]=(float)item.getEndX();      fitem.location[1]=(float)item.getEndY();      fitem.force[0]=fitem.force[1]=0;      fitem.velocity[0]=fitem.velocity[1]=0;    }  }  m_lasttime=-1L;}  }
class C{  public DeterministicHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public VertexBuffer(Type type){  super(GLObject.Type.VertexBuffer);  this.bufType=type;}  }
class C{  @Deprecated public static byte matchColor(Color color){  if (color.getAlpha() < 128)   return 0;  int index=0;  double best=-1;  for (int i=4; i < colors.length; i++) {    double distance=getDistance(color,colors[i]);    if (distance < best || best == -1) {      best=distance;      index=i;    }  }  return (byte)(index < 128 ? index : -129 + (index - 127));}  }
class C{  @Override public long readDouble(String filePath,long offset){  FileChannel fileChannel=updateCache(filePath);  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.LONG_SIZE_IN_BYTE,offset);  return byteBffer.getLong();}  }
class C{  public static <T>boolean containsDuplicates(List<T> list,Comparator<T> comparator){  Collections.sort(list,comparator);  T previous=null;  for (  T entry : list) {    if (previous != null && previous.equals(entry)) {      return true;    }    previous=entry;  }  return false;}  }
class C{  public static String millisToText(long millis){  return Strings.millisToString(millis,true);}  }
class C{  public static double[] lsfInHz2lpc(double[] lsf,int samplingRate){  double[] normalised_lsf=new double[lsf.length];  for (int i=0; i < lsf.length; i++) {    normalised_lsf[i]=lsf[i] / samplingRate;    assert 0 <= normalised_lsf[i];    assert normalised_lsf[i] <= 0.5;  }  return lsf2lpc(normalised_lsf);}  }
class C{  private boolean maintainSelectorMinimizationBugExperimentEnabled(){  return (model != null && model.isExperimentEnabled(MAINTAIN_SELECTOR_MINIMIZATION_BUG));}  }
class C{  public static ProcessEngineInfo retry(String resourceUrl){  log.debug("retying initializing of resource {}",resourceUrl);  try {    return initProcessEnginFromResource(new URL(resourceUrl));  } catch (  MalformedURLException e) {    throw new ActivitiIllegalArgumentException("invalid url: " + resourceUrl,e);  }}  }
class C{  public void resetTask(){  this.mate=null;  this.spawnBabyDelay=0;}  }
class C{  public synchronized void press(int value){  if (this.state != Input.State.WAITING_FOR_RELEASE) {    this.value=this.value + value;    if (this.holdType == Input.Hold.HOLD) {      this.state=Input.State.WAITING_FOR_RELEASE;    } else {      this.state=Input.State.PRESSED;    }  }}  }
class C{  @Override public void startCDATA(Augmentations augs) throws XNIException {  try {    if (fLexicalHandler != null) {      fLexicalHandler.startCDATA();    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public Builder certificateInfo(CertificateInfo certificateInfo){  this.certificateInfo=certificateInfo;  return this;}  }
class C{  public static String slurpReader(Reader reader){  BufferedReader r=new BufferedReader(reader);  StringBuilder buff=new StringBuilder();  try {    char[] chars=new char[SLURPBUFFSIZE];    while (true) {      int amountRead=r.read(chars,0,SLURPBUFFSIZE);      if (amountRead < 0) {        break;      }      buff.append(chars,0,amountRead);    }    r.close();  } catch (  Exception e) {    throw new RuntimeException();  }  return buff.toString();}  }
class C{  private void updateSequence(){  setLong(mBuffers[mBufferIn],++mSeq,2,4);}  }
class C{  public boolean intersects(S2CellUnion union){  for (  S2CellId id : union) {    if (intersects(id)) {      return true;    }  }  return false;}  }
class C{  public boolean profiling(){  return soot.PhaseOptions.getBoolean(options,"profiling");}  }
class C{  @Override public void createIndex(){  Clusterer=new AverageLinkClusterer();  initComparator();  ProgressEvent peCreation=new ProgressEvent("Index creation",0.0);  if (Notifier != null)   Notifier.Notify(this,peCreation.updateSubtask("Calculating clusters..."));  Clusterer.calculateClusters(NamedObjects,Comparator);  if (Notifier != null)   Notifier.Notify(this,peCreation.updateSubtask("Getting hierarchy..."));  Hierarchy=Clusterer.getHierarchy();}  }
class C{  public void shutdown(){  this.handlerEnabled=false;synchronized (threadMonitorObject) {    threadMonitorObject.notify();  }  while (!incomingQueue.isEmpty()) {    try {      Thread.sleep(500);    } catch (    InterruptedException e) {      LOGGER.error("Interrupted while waiting.");      e.printStackTrace();    }  }}  }
class C{  private static Throwable extractException(Exception ex){  if (ex instanceof UnableToTakeScreenshotException) {    return ex.getCause();  }  return ex;}  }
class C{  public boolean isPrimaryKey(){  return isPrimaryKey(false);}  }
class C{  @Override public String toString(){  String ivString=Base64.encodeToString(iv,BASE64_FLAGS);  String cipherTextString=Base64.encodeToString(cipherText,BASE64_FLAGS);  String macString=Base64.encodeToString(mac,BASE64_FLAGS);  return String.format(ivString + ":" + macString+ ":"+ cipherTextString);}  }
class C{  @Override public void actionPerformed(ActionEvent e){}  }
class C{  @Override public boolean accepts(Field field){  return isList(field) && AnnotationsHelper.isFindByAnnotationPresent(field) && AnnotationsHelper.isGenericTypeAnnotedWithPageObject(field);}  }
class C{  private List<String> pickTableNamesFromTableModels(){  List<String> tableNames=new ArrayList<String>();  for (  TableModel tableModel : mTableModels) {    tableNames.add(tableModel.getTableName());  }  return tableNames;}  }
class C{  public static S2LatLngRect fromEdge(S2Point a,S2Point b){  S2LatLngRect r=fromPointPair(new S2LatLng(a),new S2LatLng(b));  S2Point ab=S2.robustCrossProd(a,b);  S2Point dir=S2Point.crossProd(ab,new S2Point(0,0,1));  double da=dir.dotProd(a);  double db=dir.dotProd(b);  if (da * db >= 0) {    return r;  }  double absLat=Math.acos(Math.abs(ab.z / ab.norm()));  if (da < 0) {    return new S2LatLngRect(new R1Interval(r.lat().lo(),absLat),r.lng());  } else {    return new S2LatLngRect(new R1Interval(-absLat,r.lat().hi()),r.lng());  }}  }
class C{  private void showMessage(String message,boolean error){  lblError.setForeground(error ? Color.RED : Color.BLACK);  lblError.setText(message);}  }
class C{  public Object clone() throws CloneNotSupportedException {  AlarmPublication alarmPublication=(AlarmPublication)super.clone();  if (this.publicationTime != null) {    alarmPublication.publicationTime=(Timestamp)this.publicationTime.clone();  }  return alarmPublication;}  }
class C{  private boolean expungeStaleEntries(){  if (size == 0)   return false;  Object r;  boolean result=false;  while ((r=queue.poll()) != null) {    result=true;    Entry e=(Entry)r;    int h=e.hash;    int i=indexFor(h,table.length);    Entry prev=table[i];    Entry p=prev;    while (p != null) {      Entry next=p.next;      if (p == e) {        if (prev == e)         table[i]=next; else         prev.next=next;        e.next=null;        size--;        break;      }      prev=p;      p=next;    }  }  return result;}  }
class C{  public void dumpBinary(CART cart,DataOutput os) throws IOException {  try {    toWagonFormat(cart.getRootNode(),(DataOutputStream)os,null,null);  } catch (  IOException ioe) {    IOException newIOE=new IOException("Error dumping CART to output stream");    newIOE.initCause(ioe);    throw newIOE;  }}  }
class C{  private void digitsToWords(String tokenVal){  FeatureSet featureSet=tokenItem.getFeatures();  String nsw="";  if (featureSet.isPresent("nsw")) {    nsw=featureSet.getString("nsw");  }  if (nsw.equals("nide")) {    NumberExpander.expandID(tokenVal,wordRelation);  } else {    String rName=featureSet.getString("name");    String digitsType=null;    if (tokenVal.equals(rName)) {      digitsType=(String)cart.interpret(tokenItem);    } else {      featureSet.setString("name",tokenVal);      digitsType=(String)cart.interpret(tokenItem);      featureSet.setString("name",rName);    }    if (digitsType.equals("ordinal")) {      NumberExpander.expandOrdinal(tokenVal,wordRelation);    } else     if (digitsType.equals("digits")) {      NumberExpander.expandDigits(tokenVal,wordRelation);    } else     if (digitsType.equals("year")) {      NumberExpander.expandID(tokenVal,wordRelation);    } else {      NumberExpander.expandNumber(tokenVal,wordRelation);    }  }}  }
class C{  public BaseViewHolder addOnLongClickListener(int viewId){  itemChildLongClickViewIds.add(viewId);  return this;}  }
class C{  @Override public QueryTemplatePacket and(QueryTemplatePacket template){  LinkedList<QueryTemplatePacket> optimizedPackets=new LinkedList<QueryTemplatePacket>();  for (  QueryTemplatePacket packet : getPackets()) {    QueryTemplatePacket result=new QueryTemplatePacket(packet);    result.intersectRanges(template);    result.intersectUids(template);    if (!result.isAlwaysEmpty())     optimizedPackets.add(result);  }  setPackets(optimizedPackets);  if (optimizedPackets.isEmpty())   setAlwaysEmpty(true);  return this;}  }
class C{  public boolean isSecondPhase(){  return _secondPhase;}  }
class C{  public static boolean addUIdToSetOfOpenFiles(String name,long uId){  final Pair<String,Long> pair=new Pair<>(name,uId);  Integer count=openFiles.get(pair);  if (count == null) {    openFiles.put(pair,1);    return true;  } else {    openFiles.put(pair,count + 1);    return false;  }}  }
class C{  @NotNull public static BufferedImage pad(@NotNull BufferedImage image,int paddingPercent){  if (image.getWidth() <= 1 || image.getHeight() <= 1) {    return image;  }  if (paddingPercent > 100) {    paddingPercent=100;  }  int largerSide=Math.max(image.getWidth(),image.getHeight());  int smallerSide=Math.min(image.getWidth(),image.getHeight());  int padding=(largerSide * paddingPercent / 100);  padding=Math.max(-(smallerSide / 2 - 1),padding);  return AssetUtil.paddedImage(image,padding);}  }
class C{  public boolean isApplicable(){  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();  return inspectorWindow != null;}  }
class C{  public boolean hasMagicalStateEffect(){  Iterator<Effect> effectIterator=this.abnormalEffectMap.values().iterator();  while (effectIterator.hasNext()) {    Effect localEffect=effectIterator.next();    if (localEffect.isMagicalState()) {      return true;    }  }  return false;}  }
class C{  private void selectEngine(PacScriptSource pacSource){  try {    Logger.log(getClass(),LogLevel.INFO,"Using javax.script JavaScript engine.");    this.pacScriptParser=new JavaxPacScriptParser(pacSource);  } catch (  Exception e) {    Logger.log(getClass(),LogLevel.ERROR,"PAC parser error.",e);  }}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  public void requestTransfer(int taskId,String name,byte[] db){  PlayerTransferTask task=this.tasks.get(taskId);  GameServerInfo targetServer=GameServerTable.getGameServerInfo(task.targetServerId);  if (targetServer == null || targetServer.getConnection() == null) {    log.error("Player transfer requests offline server! #" + task.targetServerId);    return;  }  GameServerInfo server=GameServerTable.getGameServerInfo(task.sourceServerId);  if (server == null || server.getConnection() == null) {    log.error("Player transfer requests offline server! #" + task.sourceServerId);    return;  }  if (targetServer.isAccountOnGameServer(task.targetAccountId)) {    log.error("Player transfer cant be performed while target account is online at server #" + task.targetServerId + ". "+ task.targetAccountId);    server.getConnection().sendPacket(new SM_PTRANSFER_RESPONSE(PlayerTransferResultStatus.ERROR,taskId,"transfer cant be performed while target account is online at server"));    return;  }  if (transfers.containsKey(taskId)) {    log.error("Player transfer cant be performed while it is already active #" + task.targetServerId + ". "+ task.targetAccountId);    server.getConnection().sendPacket(new SM_PTRANSFER_RESPONSE(PlayerTransferResultStatus.ERROR,taskId,"transfer cant be performed while it is already active"));    return;  }  Account account=AccountController.loadAccount(task.targetAccountId);  Account saccount=AccountController.loadAccount(task.sourceAccountId);  PlayerTransferRequest request=new PlayerTransferRequest(PlayerTransferStatus.STEP1);  request.serverId=task.sourceServerId;  request.targetServerId=task.targetServerId;  request.targetAccountId=task.targetAccountId;  request.db=db;  request.name=name;  request.targetAccount=account;  request.account=account;  request.saccount=saccount;  request.taskId=taskId;  transfers.put(taskId,request);  account.setActivated((byte)0);  saccount.setActivated((byte)0);  DAOManager.getDAO(AccountDAO.class).updateAccount(account);  DAOManager.getDAO(AccountDAO.class).updateAccount(saccount);  targetServer.getConnection().sendPacket(new SM_PTRANSFER_RESPONSE(PlayerTransferResultStatus.SEND_INFO,request));  log.info("player transfer account " + task.targetServerId + " became active.");}  }
class C{  private DataType fromExternalToWrapperDataType(org.apache.carbondata.format.DataType dataType){  if (null == dataType) {    return null;  }switch (dataType) {case STRING:    return DataType.STRING;case INT:  return DataType.INT;case SHORT:return DataType.SHORT;case LONG:return DataType.LONG;case DOUBLE:return DataType.DOUBLE;case DECIMAL:return DataType.DECIMAL;case TIMESTAMP:return DataType.TIMESTAMP;case ARRAY:return DataType.ARRAY;case STRUCT:return DataType.STRUCT;default :return DataType.STRING;}}  }
class C{  public LogNormalDistribution(double scale,double shape) throws MathIllegalArgumentException {  this(scale,shape,DEFAULT_SOLVER_ABSOLUTE_ACCURACY);}  }
class C{  public DatabaseGetRegionsQuery(VkApiClient client,int countryId){  super(client,"database.getRegions",GetRegionsResponse.class);  countryId(countryId);}  }
class C{  public static Dfp asin(final Dfp a){  return atan(a.divide(a.getOne().subtract(a.multiply(a)).sqrt()));}  }
class C{  public char readChar() throws JMSException {  initializeReading();  try {    this.dataIn.mark(Integer.MAX_VALUE);    return this.dataIn.readChar();  } catch (  EOFException eof) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageEOFException(eof.toString());    jmsEx.setLinkedException(eof);    throw jmsEx;  }catch (  IOException ioe) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageFormatException("Format error occurred" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  private void checkSufficientData(final RealMatrix matrix){  int nRows=matrix.getRowDimension();  int nCols=matrix.getColumnDimension();  if (nRows < 2 || nCols < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INSUFFICIENT_ROWS_AND_COLUMNS,nRows,nCols);  }}  }
class C{  private byte[] patchExploit(byte[] exploit,Map<String,String> params) throws Exception {  if (params.size() != 7) {    throw new Exception("invalid argument count");  }  ArrayList<Long> args=new ArrayList<>();  args.add(0L);  for (int i=1; i <= 7; ++i) {    String arg=String.format("a%s",i);    if (params.containsKey(arg)) {      args.add(Long.parseLong(params.get(arg),16));    } else {      throw new Exception(String.format("argument %s is missing",arg));    }  }  byte[] copy=new byte[exploit.length];  System.arraycopy(exploit,0,copy,0,exploit.length);  ByteBuffer buf=ByteBuffer.wrap(copy).order(ByteOrder.LITTLE_ENDIAN);  int size_words=buf.getInt(0);  int dsize=buf.getInt(4 + 0x10);  int csize=buf.getInt(4 + 0x20);  long data_base=args.get(1) + csize;  for (int i=1; i < size_words; ++i) {    long add=0;    byte x=buf.get(size_words * 4 + 4 + i - 1);    if (x == 1) {      add=data_base;    } else     if (x != 0) {      add=args.get(x);    }    buf.putInt(i * 4,buf.getInt(i * 4) + (int)add);  }  byte[] out=new byte[dsize + csize];  System.arraycopy(copy,4 + 0x40,out,csize,dsize);  System.arraycopy(copy,4 + 0x40 + dsize,out,0,csize);  return out;}  }
class C{  public GSQueueSessionImpl(GSConnectionImpl connection,boolean transacted,int acknowledgeMode) throws JMSException {  super(connection,transacted,acknowledgeMode);}  }
class C{  void balanceTree(BinarySearchTreeNode<E> node){  while (node != null) {    node=balance(node);    node=node.parent;  }}  }
class C{  public boolean naive_side_effect(){  return soot.PhaseOptions.getBoolean(options,"naive-side-effect");}  }
class C{  private char[] convertToVararg(char[] typeName){  if (typeName == null)   return typeName;  final int len=typeName.length;  if (len < 2)   return typeName;  if (typeName[len - 1] != ']')   return typeName;  if (typeName[len - 2] != '[')   return typeName;  char[] vararg=new char[len + 1];  System.arraycopy(typeName,0,vararg,0,len - 2);  vararg[len - 2]='.';  vararg[len - 1]='.';  vararg[len]='.';  return vararg;}  }
class C{  public static final Future<?> newFollowingToTargetCheckTask(Summon follower,Creature leading){  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new FollowSummonTaskAI(leading,follower),1000,1000);}  }
class C{  public static boolean isFileExists(String fileName){  try {    FileFactory.FileType fileType=FileFactory.getFileType(fileName);    if (FileFactory.isFileExist(fileName,fileType)) {      return true;    }  } catch (  IOException e) {    LOGGER.error("@@@@@@  File not found at a given location @@@@@@ : " + fileName);  }  return false;}  }
class C{  @Override public void saveRep(Repository rep,ObjectId idTransformation,ObjectId idStep) throws KettleException {  try {    rep.saveStepAttribute(idTransformation,idStep,"TableName",tabelName);    rep.saveStepAttribute(idTransformation,idStep,"MDKeySize",mdkeySize);    rep.saveStepAttribute(idTransformation,idStep,"Measurecount",measureCount);    rep.saveStepAttribute(idTransformation,idStep,"HeirAndKeySize",heirAndKeySize);    rep.saveStepAttribute(idTransformation,idStep,"tableName",tableName);    rep.saveStepAttribute(idTransformation,idStep,"databaseName",databaseName);    rep.saveStepAttribute(idTransformation,idStep,"isGroupByEnabled",groupByEnabled);    rep.saveStepAttribute(idTransformation,idStep,"aggregatorClassString",aggregatorClassString);    rep.saveStepAttribute(idTransformation,idStep,"aggregatorString",aggregatorString);    rep.saveStepAttribute(idTransformation,idStep,"factDimLensString",factDimLensString);    rep.saveStepAttribute(idTransformation,idStep,"levelAnddataTypeString",levelAnddataTypeString);    rep.saveStepAttribute(idTransformation,idStep,"partitionID",partitionID);    rep.saveStepAttribute(idTransformation,idStep,"segmentId",segmentId);    rep.saveStepAttribute(idTransformation,idStep,"taskNo",taskNo);  } catch (  Exception e) {    throw new KettleException(BaseMessages.getString(PKG,"TemplateStep.Exception.UnableToSaveStepInfoToRepository") + idStep,e);  }}  }
class C{  public void write(char[] cbuf) throws IOException {  writeIntoClob(new String(cbuf));}  }
class C{  private void performAction(byte action){switch (action) {case -9:    if (!pop(MODE_KEY)) {      event1=JsonEvent.ERROR;      return;    }  state=OK;event1=JsonEvent.END_OBJECT;break;case -8:if (!pop(MODE_OBJECT)) {event1=JsonEvent.ERROR;return;}state=OK;event1=JsonEvent.END_OBJECT;break;case -7:if (!pop(MODE_ARRAY)) {event1=JsonEvent.ERROR;return;}event1=stateToEvent();if (event1 == JsonEvent.NEED_MORE_INPUT) {event1=JsonEvent.END_ARRAY;} else {event2=JsonEvent.END_ARRAY;}state=OK;break;case -6:if (!push(MODE_KEY)) {event1=JsonEvent.ERROR;return;}state=OB;event1=JsonEvent.START_OBJECT;break;case -5:if (!push(MODE_ARRAY)) {event1=JsonEvent.ERROR;return;}state=AR;event1=JsonEvent.START_ARRAY;break;case -4:switch (stack[top]) {case MODE_KEY:state=CO;event1=JsonEvent.FIELD_NAME;break;case MODE_ARRAY:case MODE_OBJECT:state=OK;event1=JsonEvent.VALUE_STRING;break;default :event1=JsonEvent.ERROR;return;}break;case -3:switch (stack[top]) {case MODE_OBJECT:if (!pop(MODE_OBJECT) || !push(MODE_KEY)) {event1=JsonEvent.ERROR;return;}event1=stateToEvent();state=KE;break;case MODE_ARRAY:event1=stateToEvent();state=VA;break;default :event1=JsonEvent.ERROR;return;}break;case -2:if (!pop(MODE_KEY) || !push(MODE_OBJECT)) {event1=JsonEvent.ERROR;return;}state=VA;break;default :event1=JsonEvent.ERROR;return;}}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  public static Integer[] transformIntArray(int[] source){  Integer[] destin=new Integer[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public Builder opacity(Number opacity){  this.opacity=opacity;  return this;}  }
class C{  public AsyncPropertyChangeSupport(Object sourceBean){  super(sourceBean);}  }
class C{  public void initialise() throws XMLException {  loader=new MqttSpyDaemonConfigLoader();  showInfo();}  }
class C{  public static S2CellId fromFaceIJ(int face,int i,int j){  long n[]={0,face << (POS_BITS - 33)};  int bits=(face & SWAP_MASK);  for (int k=7; k >= 0; --k) {    bits=getBits(n,i,j,k,bits);  }  S2CellId s=new S2CellId((((n[1] << 32) + n[0]) << 1) + 1);  return s;}  }
class C{  public final Observable<T> read(final Object group){  return Observable.defer(null);}  }
class C{  public GotoStmt newGotoStmt(Unit target){  return Jimple.v().newGotoStmt(target);}  }
class C{  private void sendBroadcastUploadStarted(UploadFileOperation upload){  Intent start=new Intent(getUploadStartMessage());  start.putExtra(EXTRA_REMOTE_PATH,upload.getRemotePath());  start.putExtra(EXTRA_OLD_FILE_PATH,upload.getOriginalStoragePath());  start.putExtra(ACCOUNT_NAME,upload.getAccount().name);  sendStickyBroadcast(start);}  }
class C{  public boolean forEachEntry(TObjectIntProcedure<K> procedure){  K[] keys=(K[])_set;  int[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (keys[i] != FREE && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  private void reindexTypeEntries(TypeData updatedTypeData,boolean indexAddition){  if (!indexAddition)   throw new RuntimeException("dropindex not supported");  IStoredList<IEntryCacheInfo> entriesList=updatedTypeData.getEntries();  IStoredListIterator pos=null;  Context context=getCacheContext();  try {    for (pos=entriesList.establishListScan(true); pos != null; pos=entriesList.next(pos)) {      IEntryCacheInfo pEntry=(IEntryCacheInfo)pos.getSubject();      if (pEntry == null || (isEvictableCachePolicy() && pEntry.isRemoving()))       continue;      IEntryHolder entry=pEntry.getEntryHolder(this);      if (entry.isDeleted())       continue;      if (pEntry.isRecentDelete())       continue;      ILockObject entryLock=getLockManager().getLockObject(entry);      try {        boolean needUnpin=false;synchronized (entryLock) {          try {            if (entry.isDeleted())             continue;            if (isEvictableCachePolicy()) {              if (pEntry.setPinned(true,true)) {                needUnpin=true;              } else               continue;            } else             if (entry.isOffHeapEntry()) {              entry=getEntry(context,entry,true,true);              needUnpin=true;            }            TypeDataIndex.reindexEntry(this,pEntry,updatedTypeData);          } catch (          SAException ex) {            if (_logger.isLoggable(Level.SEVERE))             _logger.log(Level.SEVERE,"Reindex entry problem uid=" + entry.getUID(),ex);            throw new RuntimeException("Reindex problem: " + ex);          } finally {            if (needUnpin)             unpinIfNeeded(context,entry,null,null);          }        }      }  finally {        if (entryLock != null) {          getLockManager().freeLockObject(entryLock);        }      }    }  }  finally {    entriesList.freeSLHolder(pos);    freeCacheContext(context);  }}  }
class C{  @CalledByNative public static Bitmap generateHomeScreenIcon(Context context,String url,int red,int green,int blue){  ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  final int outerSize=am.getLauncherLargeIconSize();  final int iconDensity=am.getLauncherLargeIconDensity();  Bitmap bitmap=null;  try {    bitmap=Bitmap.createBitmap(outerSize,outerSize,Bitmap.Config.ARGB_8888);  } catch (  OutOfMemoryError e) {    Log.w(TAG,"OutOfMemoryError while trying to draw bitmap on canvas.");    return null;  }  Canvas canvas=new Canvas(bitmap);  int padding=(int)(GENERATED_ICON_PADDING_RATIO * outerSize);  Rect outerBounds=new Rect(0,0,outerSize,outerSize);  Bitmap bookmarkWidgetBg=getBitmapFromResourceId(context,R.mipmap.bookmark_widget_bg,iconDensity);  Paint paint=new Paint(Paint.FILTER_BITMAP_FLAG);  canvas.drawBitmap(bookmarkWidgetBg,null,outerBounds,paint);  int innerSize=outerSize - 2 * padding;  int cornerRadius=Math.round(ICON_CORNER_RADIUS_RATIO * outerSize);  int fontSize=Math.round(GENERATED_ICON_FONT_SIZE_RATIO * outerSize);  int color=Color.rgb(red,green,blue);  RoundedIconGenerator generator=new RoundedIconGenerator(innerSize,innerSize,cornerRadius,color,fontSize);  Bitmap icon=generator.generateIconForUrl(url);  if (icon == null)   return null;  canvas.drawBitmap(icon,padding,padding,null);  return bitmap;}  }
class C{  public static Map<String,Object> removeCategoryMembersOfDiscProducts(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  Locale locale=(Locale)context.get("locale");  String errMsg=null;  try {    EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.NOT_EQUAL,null),EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp)),EntityOperator.AND);    EntityListIterator eli=EntityQuery.use(delegator).from("Product").where(condition).queryIterator();    GenericValue product=null;    int numSoFar=0;    while ((product=eli.next()) != null) {      String productId=product.getString("productId");      List<GenericValue> productCategoryMemberList=EntityQuery.use(delegator).from("ProductCategoryMember").where("productId",productId).queryList();      if (productCategoryMemberList.size() > 0) {        for (        GenericValue productCategoryMember : productCategoryMemberList) {          productCategoryMember.remove();        }        numSoFar++;        if (numSoFar % 500 == 0) {          Debug.logInfo("Removed category members for " + numSoFar + " sales discontinued products.",module);        }      }    }    eli.close();    Debug.logInfo("Completed - Removed category members for " + numSoFar + " sales discontinued products.",module);  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());    errMsg=UtilProperties.getMessage(resourceError,"productutilservices.entity_error_running_removeCategoryMembersOfDiscProducts",messageMap,locale);    Debug.logError(e,errMsg,module);    return ServiceUtil.returnError(errMsg);  }  return ServiceUtil.returnSuccess();}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  setContentView(R.layout.slice_fileselect);  listView=(ListView)findViewById(R.id.listView);  boolean bBrowseToRoot=true;  Bundle extras=getIntent().getExtras();  if (extras != null) {    msPathSelectedFile=extras.getString(PATH_FILE_IN_ID);    if (!msPathSelectedFile.equals("")) {      File CurrentFile=new File(msPathSelectedFile);      if (CurrentFile != null && CurrentFile.exists()) {        if (CurrentFile.getParent() != null) {          this.browseTo(CurrentFile.getParentFile());          bBrowseToRoot=false;        }      }    }  }  if (bBrowseToRoot == true)   browseToRoot();  listView.setSelection(0);  listView.setOnItemClickListener(this);}  }
class C{  public String upload_appender_file1(String group_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String parts[]=this.upload_appender_file(group_name,file_size,callback,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  private long timeSinceLastPrecacheMs(Context context){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  long lastPrecacheTimeMs=prefs.getLong(PREF_PRECACHE_LAST_TIME,-WAIT_UNTIL_NEXT_PRECACHE_MS);  return getElapsedRealtimeOnSystem() - lastPrecacheTimeMs;}  }
class C{  public static boolean isUSPhoneNumber(String s){  if (isEmpty(s))   return defaultEmptyOK;  String normalizedPhone=stripCharsInBag(s,phoneNumberDelimiters);  return (isInteger(normalizedPhone) && normalizedPhone.length() == digitsInUSPhoneNumber);}  }
class C{  UnicodeEscapesDecodingReader(Reader reader){  if (reader == null) {    throw new NullPointerException("reader is null");  }  this.reader=reader;}  }
class C{  public FriendsGetQuery(VkApiClient client){  super(client,"friends.get",GetResponse.class);}  }
class C{  private String stripTags(String content){  return Jsoup.parse(content).text();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_EVENT_WIN_FIELDARTIFACT(String value1,String value0,String value2){  return new SM_SYSTEM_MESSAGE(1400301,value1,value0,value2);}  }
class C{  private int start(){  if ((this.status == AccelListener.RUNNING) || (this.status == AccelListener.STARTING)) {    startTimeout();    return this.status;  }  this.setStatus(AccelListener.STARTING);  List<Sensor> list=this.sensorManager.getSensorList(Sensor.TYPE_ACCELEROMETER);  if ((list != null) && (list.size() > 0)) {    this.mSensor=list.get(0);    if (this.sensorManager.registerListener(this,this.mSensor,SensorManager.SENSOR_DELAY_UI)) {      this.setStatus(AccelListener.STARTING);    } else {      this.setStatus(AccelListener.ERROR_FAILED_TO_START);      this.fail(AccelListener.ERROR_FAILED_TO_START,"Device sensor returned an error.");      return this.status;    }    ;  } else {    this.setStatus(AccelListener.ERROR_FAILED_TO_START);    this.fail(AccelListener.ERROR_FAILED_TO_START,"No sensors found to register accelerometer listening to.");    return this.status;  }  startTimeout();  return this.status;}  }
class C{  static void calcConsole(){  Scanner read=new Scanner(System.in);  System.out.println("Enter separated by space: Integer [+|-|*|/] Integer");  int first=read.nextInt();  String operator=read.next();  int second=read.nextInt();switch (operator) {case "+":    System.out.println("= " + (first + second));  break;case "-":System.out.println("= " + (first - second));break;case "*":System.out.println("= " + (first * second));break;case "/":if (second != 0) {System.out.println("= " + (first / second));} else {System.out.println("Error: Division by zero");}break;default :System.out.println("Error: Undefined operation");}}  }
class C{  public static void init(String conf_filename) throws FileNotFoundException, IOException, MyException {  IniFileReader iniReader;  String[] szTrackerServers;  String[] parts;  iniReader=new IniFileReader(conf_filename);  g_connect_timeout=iniReader.getIntValue("connect_timeout",DEFAULT_CONNECT_TIMEOUT);  if (g_connect_timeout < 0) {    g_connect_timeout=DEFAULT_CONNECT_TIMEOUT;  }  g_connect_timeout*=1000;  g_network_timeout=iniReader.getIntValue("network_timeout",DEFAULT_NETWORK_TIMEOUT);  if (g_network_timeout < 0) {    g_network_timeout=DEFAULT_NETWORK_TIMEOUT;  }  g_network_timeout*=1000;  g_charset=iniReader.getStrValue("charset");  if (g_charset == null || g_charset.length() == 0) {    g_charset="ISO8859-1";  }  szTrackerServers=iniReader.getValues("tracker_server");  if (szTrackerServers == null) {    throw new MyException("item \"tracker_server\" in " + conf_filename + " not found");  }  InetSocketAddress[] tracker_servers=new InetSocketAddress[szTrackerServers.length];  for (int i=0; i < szTrackerServers.length; i++) {    parts=szTrackerServers[i].split("\\:",2);    if (parts.length != 2) {      throw new MyException("the value of item \"tracker_server\" is invalid, the correct format is host:port");    }    tracker_servers[i]=new InetSocketAddress(parts[0].trim(),Integer.parseInt(parts[1].trim()));  }  g_tracker_group=new TrackerGroup(tracker_servers);  g_tracker_http_port=iniReader.getIntValue("http.tracker_http_port",80);  g_anti_steal_token=iniReader.getBoolValue("http.anti_steal_token",false);  if (g_anti_steal_token) {    g_secret_key=iniReader.getStrValue("http.secret_key");  }}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putInt(CURRENT_SELECTED_ITEM_BUNDLE_KEY,currentSelectedItem);  outState.putInt(CENTRE_BUTTON_ICON_KEY,centreButtonIcon);  outState.putInt(SPACE_BACKGROUND_COLOR_KEY,spaceBackgroundColor);  outState.putBoolean(BADGE_FULL_TEXT_KEY,shouldShowBadgeWithNinePlus);  if (badgeSaveInstanceHashMap.size() > 0)   outState.putSerializable(BUDGES_ITEM_BUNDLE_KEY,badgeSaveInstanceHashMap);  if (changedItemAndIconHashMap.size() > 0)   outState.putSerializable(CHANGED_ICON_AND_TEXT_BUNDLE_KEY,changedItemAndIconHashMap);}  }
class C{  public void addGatingSequences(Sequence... gatingSequences){  sequencer.addGatingSequences(gatingSequences);}  }
class C{  public boolean typedEquals(IdentifiableObject other){  if (other == null) {    return false;  }  if (getUid() != null ? !getUid().equals(other.getUid()) : other.getUid() != null) {    return false;  }  if (getCode() != null ? !getCode().equals(other.getCode()) : other.getCode() != null) {    return false;  }  if (getName() != null ? !getName().equals(other.getName()) : other.getName() != null) {    return false;  }  return true;}  }
class C{  public void recover(long cookie,LogRecord rec) throws LogException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerImpl.class.getName(),"recover",new Object[]{new Long(cookie),rec});  }  TxnManagerTransaction tmt=enterTMT(cookie);  TxnLogRecord trec=(TxnLogRecord)rec;  trec.recover(tmt);  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TxnManagerImpl.class.getName(),"recover");  }}  }
class C{  public static boolean shouldUseOpaqueTextboxBackground(int color){  return getLightnessForColor(color) > LIGHTNESS_OPAQUE_BOX_THRESHOLD;}  }
class C{  public boolean isAltDown(){  return mIsAltDown;}  }
class C{  public static PolynomialCluster[] train(Polynomial[] polynomials,KMeansClusteringTrainerParams kmeansParams){  int[] totalObservationsInClusters;  int[] clusterIndices;  int observations=polynomials.length;  int polynomialOrder=polynomials[0].getOrder();  Polynomial[] m_new=new Polynomial[kmeansParams.numClusters];  boolean[][] b=new boolean[observations][kmeansParams.numClusters];  boolean[][] b_old=new boolean[observations][kmeansParams.numClusters];  Polynomial[] clusterMeans=new Polynomial[kmeansParams.numClusters];  for (int k=0; k < kmeansParams.numClusters; k++)   clusterMeans[k]=new Polynomial(polynomialOrder);  for (int t=1; t <= observations; t++) {    Arrays.fill(b[t - 1],false);  }  Polynomial mAll=Polynomial.mean(polynomials);  double[] dists=new double[observations];  double[] tmp=new double[kmeansParams.numClusters + 1];  for (int k=1; k <= kmeansParams.numClusters; k++) {    for (int t=1; t <= observations; t++) {      if (k > 1) {        for (int i=1; i <= k - 1; i++) {          tmp[i - 1]=clusterMeans[i - 1].polynomialDistance(polynomials[t - 1]);        }        tmp[k - 1]=mAll.polynomialDistance(polynomials[t - 1]);        dists[t - 1]=MathUtils.mean(tmp,0,k - 1);      } else {        dists[t - 1]=mAll.polynomialDistance(polynomials[t - 1]);      }    }    double maxD=Double.MIN_VALUE;    int maxInd=-1;    for (int t=1; t <= observations; t++) {      if (dists[t - 1] > maxD) {        maxD=dists[t - 1];        maxInd=t;      }    }    clusterMeans[k - 1].copyCoeffs(polynomials[maxInd - 1]);  }  int[] tinyClusterInds=new int[kmeansParams.numClusters];  int numTinyClusters=0;  totalObservationsInClusters=new int[kmeansParams.numClusters];  clusterIndices=new int[observations];  int iter=0;  boolean bCont=true;  while (bCont) {    for (int t=1; t <= observations; t++) {      double minDist=Double.MAX_VALUE;      int ind=-1;      for (int i=1; i <= kmeansParams.numClusters; i++) {        double tmpDist=clusterMeans[i - 1].polynomialDistance(polynomials[t - 1]);        b[t - 1][i - 1]=false;        if (tmpDist < minDist) {          minDist=tmpDist;          ind=i;        }      }      b[t - 1][ind - 1]=true;    }    for (int i=1; i <= kmeansParams.numClusters; i++) {      totalObservationsInClusters[i - 1]=0;      tinyClusterInds[i - 1]=0;    }    int c=1;    for (int i=1; i <= kmeansParams.numClusters; i++) {      m_new[i - 1]=new Polynomial(polynomialOrder);      for (int t=1; t <= observations; t++) {        if (b[t - 1][i - 1]) {          for (int d=0; d <= polynomialOrder; d++)           m_new[i - 1].coeffs[d]+=polynomials[t - 1].coeffs[d];          clusterIndices[t - 1]=i - 1;          (totalObservationsInClusters[i - 1])++;        }      }      if ((double)totalObservationsInClusters[i - 1] < kmeansParams.minSamplesInOneCluster) {        tinyClusterInds[c - 1]=i;        numTinyClusters++;        c++;      }    }    c=0;    double[] tmps=new double[totalObservationsInClusters.length];    for (int a=0; a < tmps.length; a++) {      tmps[a]=totalObservationsInClusters[a];    }    int[] inds=MathUtils.quickSort(tmps,0,kmeansParams.numClusters - 1);    for (int i=1; i <= kmeansParams.numClusters; i++) {      if (totalObservationsInClusters[i - 1] >= kmeansParams.minSamplesInOneCluster) {        for (int d=0; d <= polynomialOrder; d++) {          clusterMeans[i - 1].coeffs[d]=m_new[i - 1].coeffs[d] / totalObservationsInClusters[i - 1];        }      } else {        for (int d=0; d <= polynomialOrder; d++) {          double rnd=2 * (Math.random() - 0.5) * clusterMeans[inds[kmeansParams.numClusters - c - 1]].coeffs[d]* 0.01;          clusterMeans[i - 1].coeffs[d]=clusterMeans[inds[kmeansParams.numClusters - c - 1]].coeffs[d] + rnd;        }        c++;      }    }    int[] prev_totals=totalObservationsInClusters.clone();    iter++;    int totChanged=0;    if (iter > 1) {      if (iter >= kmeansParams.maxIterations) {        bCont=false;      }      for (int t=1; t <= observations; t++) {        for (int i=1; i <= kmeansParams.numClusters; i++) {          if (b_old[t - 1][i - 1] != b[t - 1][i - 1]) {            totChanged++;            break;          }        }      }      double changedPerc=(double)totChanged / observations * 100.0;      if (changedPerc < kmeansParams.minClusterChangePercent) {        bCont=false;      }    }    for (int t=1; t <= observations; t++) {      System.arraycopy(b[t - 1],0,b_old[t - 1],0,b[t - 1].length);    }  }  PolynomialCluster[] clusters=new PolynomialCluster[kmeansParams.numClusters];  for (int i=1; i <= kmeansParams.numClusters; i++) {    Polynomial[] members=new Polynomial[totalObservationsInClusters[i - 1]];    int m=0;    for (int t=1; t <= observations; t++) {      if (b[t - 1][i - 1]) {        members[m]=polynomials[t - 1];        m++;      }    }    assert m == members.length;    clusters[i - 1]=new PolynomialCluster(clusterMeans[i - 1],members);  }  return clusters;}  }
class C{  public Window(Collection<String> words,int windowSize,int begin,int end){  if (words == null)   throw new IllegalArgumentException("Words must be a list of size 3");  this.words=new ArrayList<>(words);  int windowSize1=windowSize;  this.begin=begin;  this.end=end;  initContext();}  }
class C{  static <ParameterType>void checkParameterArrayIsNotNull(final String parameterName,final ParameterType[] parameterValues){  checkParameterIsNotNull(parameterName,parameterValues);  if (parameterValues.length == 0) {    throw new IllegalArgumentException(parameterName + " cannot be empty.");  }  for (  final ParameterType parameterValue : parameterValues) {    if (parameterValue == null) {      throw new IllegalArgumentException(parameterName + " cannot contain null.");    }  }}  }
class C{  public static String toString(final int intValue){  return Integer.toHexString(intValue);}  }
class C{  public void testWriteReadFull() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(full);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  LoadBalancingPolicy copy=(LoadBalancingPolicy)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(full,copy));}  }
class C{  public static Timestamp stringToTimeStamp(String dateTimeString,String dateTimeFormat,TimeZone tz,Locale locale) throws ParseException {  DateFormat dateFormat=toDateTimeFormat(dateTimeFormat,tz,locale);  Date parsedDate=dateFormat.parse(dateTimeString);  return new Timestamp(parsedDate.getTime());}  }
class C{  public final int hashCode(){  if (toString() == null) {    return 0;  }  return toString().hashCode();}  }
class C{  synchronized void unregisterToNotifications() throws JMSException {  if (eventSession == null) {    return;  }  if (_logger.isLoggable(Level.FINE)) {    _logger.log(Level.FINE,toString2() + "GSMessageConsumerImpl.unregisterToNotifications(): unregistering from notifications");  }  try {    eventSession.close();  } catch (  IOException e) {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,toString2() + "GSMessageConsumerImpl.stopAsynchronous(): IOException while closing event session" + e);    }    JMSException e1=new JMSException("Failed to close event session.");    e1.setLinkedException(e);    throw e1;  }catch (  UnknownLeaseException e) {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,toString2() + "GSMessageConsumerImpl.stopAsynchronous(): UnknownLeaseException while closing event session" + e);    }    JMSException e1=new JMSException("Failed to close event session.");    e1.setLinkedException(e);    throw e1;  }catch (  Exception e) {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,toString2() + "GSMessageConsumerImpl.stopAsynchronous(): UnknownLeaseException while closing event session" + e);    }    JMSException e1=new JMSException("Failed to close event session.");    e1.setLinkedException(e);    throw e1;  } finally {    eventSession=null;  }}  }
class C{  public Object nextEntity(char a) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=next();    if (Character.isLetterOrDigit(c) || c == '#') {      sb.append(Character.toLowerCase(c));    } else     if (c == ';') {      break;    } else {      throw syntaxError("Missing ';' in XML entity: &" + sb);    }  }  String s=sb.toString();  Object e=entity.get(s);  return e != null ? e : a + s + ";";}  }
class C{  public PointList(int dimension,int capacity) throws IllegalArgumentException {  if (dimension < 1)   throw new IllegalArgumentException("the dimension must be at least one");  if (capacity < 1)   throw new IllegalArgumentException("the initial capacity must be at least one");  this.data=new Matrix[capacity];  this.dimension=dimension;  this.min=new double[dimension];  this.max=new double[dimension];  this.sum=new Matrix(dimension,1);  this.squaredSum=new Matrix(dimension,1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200849,skillcaster,num0,skillname);}  }
class C{  public void init$Children(){}  }
class C{  public BKLogSegmentWriter startLogSegment(long txId) throws IOException {  return startLogSegment(txId,false,false);}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  private boolean isWidgetNewlyCreated(){  long currentFolder=mPreferences.getLong(STATE_CURRENT_FOLDER,ChromeBrowserProviderClient.INVALID_BOOKMARK_ID);  return currentFolder == ChromeBrowserProviderClient.INVALID_BOOKMARK_ID;}  }
class C{  public IntDataType(byte[] buf){  if (buf.length != this.getSize()) {    throw new DataTypeException("Wrong size buffer for int");  }  this.i=ByteBuffer.wrap(buf).getInt();}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public boolean isReWrittenEntry(String uid){  return _reWrittenEntries != null && _reWrittenEntries.containsKey(uid);}  }
class C{  public NewsfeedSearchQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override protected void parseOptimizationData(OptimizationData... optData){  super.parseOptimizationData(optData);  for (  OptimizationData data : optData) {    if (data instanceof ObjectiveFunctionGradient) {      gradient=((ObjectiveFunctionGradient)data).getObjectiveFunctionGradient();      break;    }  }}  }
class C{  public void finish() throws IOException {  if (out == null) {    throw new IOException("Stream is closed");  }  if (cDir == null) {    return;  }  if (entries.isEmpty()) {    throw new ZipException("No entries");  }  if (currentEntry != null) {    closeEntry();  }  int cdirEntriesSize=cDir.size();  writeLongAsUint32(cDir,ENDSIG);  writeIntAsUint16(cDir,0);  writeIntAsUint16(cDir,0);  if (archiveNeedsZip64EocdRecord) {    writeIntAsUint16(cDir,0xFFFF);    writeIntAsUint16(cDir,0xFFFF);    writeLongAsUint32(cDir,0xFFFFFFFF);    writeLongAsUint32(cDir,0xFFFFFFFF);  } else {    writeIntAsUint16(cDir,entries.size());    writeIntAsUint16(cDir,entries.size());    writeLongAsUint32(cDir,cdirEntriesSize);    writeLongAsUint32(cDir,offset);  }  writeIntAsUint16(cDir,commentBytes.length);  if (commentBytes.length > 0) {    cDir.write(commentBytes);  }  cDir.writeTo(out);  cDir=null;}  }
class C{  public void java_lang_Package_getSystemPackages0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastArrayObject());}  }
class C{  @Override public boolean input(I input){  if (getAvailableInputSlot() <= 0) {    return false;  }  int bufferIndex=(int)(inputCnt % bufferSize);  inputs.set(bufferIndex,input);  inputCnt++;  scheduleRun();  return true;}  }
class C{  public T key(){  return k;}  }
class C{  private boolean shouldIgnoreSelection(){  return ignoreSelection;}  }
class C{  public void trim(double leftTrimSecond,double rightTrimSecond){  int sampleRate=waveHeader.getSampleRate();  int bitsPerSample=waveHeader.getBitsPerSample();  int channels=waveHeader.getChannels();  int leftTrimNumberOfSample=(int)(sampleRate * bitsPerSample / 8 * channels * leftTrimSecond);  int rightTrimNumberOfSample=(int)(sampleRate * bitsPerSample / 8 * channels * rightTrimSecond);  trim(leftTrimNumberOfSample,rightTrimNumberOfSample);}  }
class C{  public double tTest(final double mu,final StatisticalSummary sampleStats) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {  checkSampleData(sampleStats);  return tTest(sampleStats.getMean(),mu,sampleStats.getVariance(),sampleStats.getN());}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  public void addResource(InputStream in){  addResourceObject(in);}  }
class C{  public MultipartParser(HttpRequest req,int maxSize,boolean buffer,boolean limitLength) throws IOException {  this(req,maxSize,buffer,limitLength,null);}  }
class C{  public void testQueryExcludeSubtasksSorted() throws Exception {  TaskQuery query=taskService.createTaskQuery().orderByTaskAssignee().asc();  assertEquals(10,query.count());  assertEquals(10,query.list().size());  query=taskService.createTaskQuery().excludeSubtasks().orderByTaskAssignee().desc();  assertEquals(3,query.count());  assertEquals(3,query.list().size());}  }
class C{  private static boolean nsEquals(String nsURI_1,String nsURI_2){  if (nsURI_1 == null) {    return (nsURI_2 == null);  } else {    return nsURI_1.equals(nsURI_2);  }}  }
class C{  public static <T>Observable<T> whileDo(ObservableSource<? extends T> source,BooleanSupplier preCondition){  ObjectHelper.requireNonNull(source,"source is null");  ObjectHelper.requireNonNull(preCondition,"preCondition is null");  return RxJavaPlugins.onAssembly(new ObservableWhileDoWhile<T>(source,preCondition,preCondition));}  }
class C{  public static final List bubbleSortVerticesByStringLength(List l){  boolean bChanged=true;  while (bChanged) {    bChanged=false;    for (int iCnt=0; iCnt < l.size() - 1; iCnt++) {      if ((l.get(iCnt + 1).toString()).length() > (l.get(iCnt).toString()).length()) {        VertexImpl vTmp=(VertexImpl)(l.get(iCnt + 1));        l.set(iCnt + 1,l.get(iCnt));        l.set(iCnt,vTmp);        bChanged=true;      }    }  }  return l;}  }
class C{  protected boolean atToken(TokenKind kind){  return currentToken() == kind;}  }
class C{  public String process(Item word) throws ProcessException {  return wordBreak(word);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_SCORE_ALARM(int num0){  return new SM_SYSTEM_MESSAGE(1400236,num0);}  }
class C{  private Object invokeLRMIProxy(final IMethod method,Object[] args) throws Exception {  return method.invoke(this,args);}  }
class C{  public ViewBinder linkify(int viewId){  TextView view=retrieveView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public boolean isPublic(){  return Modifier.isPublic(this.getModifiers());}  }
class C{  protected void writeEntityToNBT(NBTTagCompound compound){  compound.setShort("Fuse",(short)this.getFuse());  compound.setByte("Facing",(byte)this.getFacing().getIndex());}  }
class C{  public static boolean attemptSmelting(EntityPlayerMP player,ItemStack input){  if (player == null || input == null)   return false;  List<ItemStack> ingredients=new ArrayList<ItemStack>();  ingredients.add(input);  ItemStack isOutput=(ItemStack)FurnaceRecipes.instance().getSmeltingList().get(input);  if (isOutput == null)   return false;  int cookingTime=200;  if (playerHasIngredients(player,ingredients) && totalBurnTimeInInventory(player) >= cookingTime) {    removeIngredientsFromPlayer(player,ingredients);    burnInventory(player,cookingTime,input);    ItemStack resultForInventory=isOutput.copy();    ItemStack resultForReward=isOutput.copy();    player.inventory.addItemStackToInventory(resultForInventory);    RewardForCollectingItemImplementation.GainItemEvent event=new RewardForCollectingItemImplementation.GainItemEvent(resultForReward);    MinecraftForge.EVENT_BUS.post(event);    return true;  }  return false;}  }
class C{  public static final void addPlayer(PlayerAlliance alliance,Player player){  Preconditions.checkNotNull(alliance,"Alliance should not be null");  alliance.onEvent(new PlayerEnteredEvent(alliance,player));}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public static String join(String... paths){  return PATH_JOINER.join(paths);}  }
class C{  private void onGoogleAuthBtnClicked(final ActionEvent ignored){  final LoginData loginData=new LoginData();  if (configLoginData.hasToken()) {    loginData.setToken(configLoginData.getToken());    loginData.setSavedToken(true);  } else {    loginData.setToken(tokenField.getText());  }  loginData.setLoginType(LoginType.GOOGLE_AUTH);  tryLogin(loginData);}  }
class C{  public static boolean isBoundsEnabled(){  return boundsEnabled;}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  if (DEBUG)   debugPrintln("debug is on");  ClassLoader cl=findClassLoader();  try {    String systemProp=SecuritySupport.getSystemProperty(factoryId);    if (systemProp != null && systemProp.length() > 0) {      if (DEBUG)       debugPrintln("found system property, value=" + systemProp);      return newInstance(systemProp,cl,true);    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=SecuritySupport.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=SecuritySupport.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXercesProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=SecuritySupport.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXercesProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=SecuritySupport.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXercesProperties=new Properties();          fis=SecuritySupport.getFileInputStream(propertiesFile);          fXercesProperties.load(fis);        }      } catch (      Exception x) {        fXercesProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXercesProperties != null) {      factoryClassName=fXercesProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=SecuritySupport.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    if (DEBUG)     debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return newInstance(factoryClassName,cl,true);  }  Object provider=findJarServiceProvider(factoryId);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  if (DEBUG)   debugPrintln("using fallback, value=" + fallbackClassName);  return newInstance(fallbackClassName,cl,true);}  }
class C{  public CreatePageWindow openCreatePageWindow(){  bobcatWait.withTimeout(Timeouts.BIG).until(null,2);  return createPageWindow;}  }
class C{  @deprecated public char last(){  if (this.end != this.begin) {    this.pos=(this.end - 1);  } else {    this.pos=this.end;  }  return current();}  }
class C{  public boolean equalStranded(IntervalFeature x){  if (x == null) {    return false;  }  return (this.chrom.equals(x.chrom) && this.from == x.from && this.to == x.to && this.strand == x.strand);}  }
class C{  public static boolean writeFile(File file,InputStream stream){  return writeFile(file,stream,false);}  }
class C{  public List<Writable> execute(List<Writable> input){  List<Writable> currValues=input;  for (  DataAction d : actionList) {    if (d.getTransform() != null) {      Transform t=d.getTransform();      currValues=t.map(currValues);    } else     if (d.getFilter() != null) {      Filter f=d.getFilter();      if (f.removeExample(currValues))       return null;    } else     if (d.getConvertToSequence() != null) {      throw new RuntimeException("Cannot execute examples individually: TransformProcess contains a ConvertToSequence operation");    } else     if (d.getConvertFromSequence() != null) {      throw new RuntimeException("Unexpected operation: TransformProcess contains a ConvertFromSequence operation");    } else     if (d.getSequenceSplit() != null) {      throw new RuntimeException("Cannot execute examples individually: TransformProcess contains a SequenceSplit operation");    } else {      throw new RuntimeException("Unknown action: " + d);    }  }  return currValues;}  }
class C{  @Override public void onResults(Bundle bundle){  ArrayList<String> matches=bundle.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);  for (  String result : matches)   Log.i(TAG,"A FINAL RESULTS: " + result);  etQuestion.setText(matches.get(0));}  }
class C{  public static boolean isValidNmtoken(String nmtoken){  final int length=nmtoken.length();  if (length == 0) {    return false;  }  for (int i=0; i < length; ++i) {    char ch=nmtoken.charAt(i);    if (!isName(ch)) {      return false;    }  }  return true;}  }
class C{  public int addChildEdge(int parent,int child){  return super.addEdge(parent,child);}  }
class C{  public MarketGetByIdQuery(VkApiClient client,UserActor actor,List<String> itemIds){  super(client,"market.getById",GetByIdResponse.class);  accessToken(actor.getAccessToken());  itemIds(itemIds);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return MESSAGE_TYPE;case 2:  return REQUEST_INFO;case 3:return RESPONSE_INFO;case 4:return TRACE_INFO;case 5:return GLOBAL_CONTEXT;case 6:return LOCAL_CONTEXT;case 7:return HEARTBEAT_INFO;default :return null;}}  }
class C{  public AwsIotCompletion(String topic,AWSIotQos qos,long timeout){  super(topic,qos);  this.timeout=timeout;  this.request=null;  this.isAsync=false;}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if (groupCheckbox != null) {    Boolean oldValue=(Boolean)undoRedoObject.getOldValue();    groupCheckbox.setSelected(oldValue.booleanValue());    enableSubGroups(oldValue.booleanValue());  }}  }
class C{  public Boolean createProductCategory(EntityManager em,String productCategory){  Boolean status=true;  ProductCategory prodcat=null;  try {    if (!em.getTransaction().isActive()) {      em.getTransaction().begin();    }    prodcat=new ProductCategory();    prodcat.setCategory(productCategory);    prodcat.setCategoryName(productCategory);    em.persist(prodcat);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during creation of Product category . Detailed info: " + e);  }  return status;}  }
class C{  public Bundler putCharSequence(String key,CharSequence value){  bundle.putCharSequence(key,value);  return this;}  }
class C{  public static Matrix random(int m,int n){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=Math.random();    }  }  return A;}  }
class C{  private void adjustBottomByAspectRatio(RectF rect,float aspectRatio){  rect.bottom=rect.top + rect.width() / aspectRatio;}  }
class C{  public int size(){  return elements.size();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Slow_ME_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200467,skilltarget,skillcaster,skillname);}  }
class C{  @Override public int[] startContentModel(){  int[] state=new int[fNumElements + 1];  for (int i=0; i <= fNumElements; i++) {    state[i]=STATE_START;  }  return state;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200751,skilltarget);}  }
class C{  protected boolean confirmCommit(IResource[] modifiedResources,ProjectProperties projectProperties) throws SVNException {  IPreferenceStore preferenceStore=SVNUIPlugin.getPlugin().getPreferenceStore();  boolean commitToTagsPathWithoutWarning=preferenceStore.getBoolean(ISVNUIConstants.PREF_COMMIT_TO_TAGS_PATH_WITHOUT_WARNING);  if (!commitToTagsPathWithoutWarning && onTagPath(modifiedResources)) {    CommitToTagsWarningDialog dialog=new CommitToTagsWarningDialog(getShell());    if (dialog.open() != CommitToTagsWarningDialog.OK) {      return false;    }  }  int highestProblemSeverity=getHighestProblemSeverity(modifiedResources);switch (highestProblemSeverity) {case IMarker.SEVERITY_WARNING:    String allowCommitsWithWarnings=preferenceStore.getString(ISVNUIConstants.PREF_ALLOW_COMMIT_WITH_WARNINGS);  if (MessageDialogWithToggle.PROMPT.equals(allowCommitsWithWarnings) || MessageDialogWithToggle.NEVER.equals(allowCommitsWithWarnings)) {    MessageDialogWithToggle warningDialog=MessageDialogWithToggle.openYesNoQuestion(shell,Policy.bind("CommitWizard.commitResources"),Policy.bind("CommitWizard.warningMarkers"),Policy.bind("CommitWizard.warningQuestion"),false,preferenceStore,ISVNUIConstants.PREF_ALLOW_COMMIT_WITH_WARNINGS);    if (IDialogConstants.YES_ID != warningDialog.getReturnCode()) {      return false;    }  }break;case IMarker.SEVERITY_ERROR:String allowCommitsWithErrors=preferenceStore.getString(ISVNUIConstants.PREF_ALLOW_COMMIT_WITH_ERRORS);if (MessageDialogWithToggle.PROMPT.equals(allowCommitsWithErrors) || MessageDialogWithToggle.NEVER.equals(allowCommitsWithErrors)) {MessageDialogWithToggle errorDialog=MessageDialogWithToggle.openYesNoQuestion(shell,Policy.bind("CommitWizard.commitResources"),Policy.bind("CommitWizard.errorMarkers"),Policy.bind("CommitWizard.errorQuestion"),false,preferenceStore,ISVNUIConstants.PREF_ALLOW_COMMIT_WITH_ERRORS);if (IDialogConstants.YES_ID != errorDialog.getReturnCode()) {return false;}}break;}SvnWizardCommitPage commitPage=new SvnWizardCommitPage(modifiedResources,url,projectProperties,statusMap,null,false);SvnWizard wizard=new SvnWizard(commitPage);SvnWizardDialog dialog=new SvnWizardDialog(getShell(),wizard);if (proposedComment == null || proposedComment.length() == 0) {commitPage.setComment(getProposedComment(modifiedResources));} else {commitPage.setComment(proposedComment);}wizard.setParentDialog(dialog);boolean commitOK=(dialog.open() == SvnWizardDialog.OK);url=null;commitComment=commitPage.getComment();resourcesToCommit=commitPage.getSelectedResources();keepLocks=commitPage.isKeepLocks();return commitOK;}  }
class C{  public FeatureVector[] featureVectorMapping(FeatureDefinition newFeatureDefinition){  if (!this.featureDefinition.contains(newFeatureDefinition)) {    throw new RuntimeException("the new feature definition is not a subset of original feature definition");  }  int numberOfFeatures=newFeatureDefinition.getNumberOfFeatures();  int noByteFeatures=newFeatureDefinition.getNumberOfByteFeatures();  int noShortFeatures=newFeatureDefinition.getNumberOfShortFeatures();  int noContiniousFeatures=newFeatureDefinition.getNumberOfContinuousFeatures();  if (numberOfFeatures != (noByteFeatures + noShortFeatures + noContiniousFeatures)) {    throw new RuntimeException("The sum of byte, short and continious features are not equal to number of features");  }  String[] featureNames=new String[numberOfFeatures];  for (int j=0; j < numberOfFeatures; j++) {    featureNames[j]=newFeatureDefinition.getFeatureName(j);  }  int[] featureIndexes=featureDefinition.getFeatureIndexArray(featureNames);  FeatureVector[] newFV=new FeatureVector[this.getNumberOfUnits()];  for (int i=0; i < this.getNumberOfUnits(); i++) {    byte[] byteFeatures=new byte[noByteFeatures];    short[] shortFeatures=new short[noShortFeatures];    float[] continiousFeatures=new float[noContiniousFeatures];    int countByteFeatures=0;    int countShortFeatures=0;    int countFloatFeatures=0;    for (int j=0; j < featureIndexes.length; j++) {      if (newFeatureDefinition.isByteFeature(j)) {        byteFeatures[countByteFeatures++]=featureVectors[i].getByteFeature(featureIndexes[j]);      } else       if (newFeatureDefinition.isShortFeature(j)) {        shortFeatures[countShortFeatures++]=featureVectors[i].getShortFeature(featureIndexes[j]);      } else       if (newFeatureDefinition.isContinuousFeature(j)) {        continiousFeatures[countFloatFeatures++]=featureVectors[i].getContinuousFeature(featureIndexes[j]);      }    }    newFV[i]=newFeatureDefinition.toFeatureVector(i,byteFeatures,shortFeatures,continiousFeatures);  }  return newFV;}  }
class C{  public static <T>T[] readArray(Class<T> clazz,PacketBuffer buf,Function<PacketBuffer,T> reader){  T[] value=(T[])Array.newInstance(clazz,buf.readInt());  for (int i=0; i < value.length; i++) {    value[i]=reader.apply(buf);  }  return value;}  }
class C{  public void addModule(Module module){  if (module instanceof HttpAdapterAware) {    ((HttpAdapterAware)module).setHttpAdapter(getHttpAdapter());  }  this.moduleRegistry.addModule(module);}  }
class C{  public boolean isUseCompression(){  return useCompression;}  }
class C{  public boolean store(){  try {    prefs.sync();    return true;  } catch (  BackingStoreException ex) {    LOGGER.log(Level.SEVERE,"Error saving preferences",ex);  }  return false;}  }
class C{  public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,"uil-pool-"));}  }
class C{  public boolean skipString(String s) throws IOException {  if (DEBUG_BUFFER) {    System.out.print("(skipString, \"" + s + "\": ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  final int length=s.length();  for (int i=0; i < length; i++) {    char c=fCurrentEntity.ch[fCurrentEntity.position++];    if (c != s.charAt(i)) {      fCurrentEntity.position-=i + 1;      if (DEBUG_BUFFER) {        System.out.print(")skipString, \"" + s + "\": ");        XMLEntityManager.print(fCurrentEntity);        System.out.println(" -> false");      }      return false;    }    if (i < length - 1 && fCurrentEntity.position == fCurrentEntity.count) {      System.arraycopy(fCurrentEntity.ch,fCurrentEntity.count - i - 1,fCurrentEntity.ch,0,i + 1);      if (load(i + 1,false)) {        fCurrentEntity.startPosition-=i + 1;        fCurrentEntity.position-=i + 1;        if (DEBUG_BUFFER) {          System.out.print(")skipString, \"" + s + "\": ");          XMLEntityManager.print(fCurrentEntity);          System.out.println(" -> false");        }        return false;      }    }  }  if (DEBUG_BUFFER) {    System.out.print(")skipString, \"" + s + "\": ");    XMLEntityManager.print(fCurrentEntity);    System.out.println(" -> true");  }  fCurrentEntity.columnNumber+=length;  return true;}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public login(){  frame=new JFrame();  frame.getContentPane().setFont(new Font("Tahoma",Font.PLAIN,11));  frame.setSize(6000,5000);  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().setLayout(null);  JLabel lblNewLabel=new JLabel("Connect To The World :");  lblNewLabel.setFont(new Font("Tahoma",Font.BOLD,40));  lblNewLabel.setBounds(38,26,3290,42);  frame.getContentPane().add(lblNewLabel);  JLabel lblEmail=new JLabel("Email");  lblEmail.setFont(new Font("Tahoma",Font.PLAIN,17));  lblEmail.setBounds(101,288,129,31);  frame.getContentPane().add(lblEmail);  textField=new JTextField();  textField.setFont(new Font("Tahoma",Font.PLAIN,17));  textField.setBounds(345,290,221,28);  frame.getContentPane().add(textField);  textField.setColumns(10);  JLabel lblPassword=new JLabel("Password");  lblPassword.setFont(new Font("Tahoma",Font.PLAIN,17));  lblPassword.setBounds(101,347,102,21);  frame.getContentPane().add(lblPassword);  passwordField=new JPasswordField();  passwordField.setFont(new Font("Tahoma",Font.PLAIN,17));  passwordField.setBounds(345,344,221,28);  frame.getContentPane().add(passwordField);  btnLogin=new JButton("Login");  btnLogin.addActionListener(this);  btnLogin.setFont(new Font("Tahoma",Font.PLAIN,18));  btnLogin.setBounds(101,435,129,42);  frame.getContentPane().add(btnLogin);  JLabel lblOr=new JLabel("or");  lblOr.setBounds(709,299,46,14);  frame.getContentPane().add(lblOr);  btnSignup=new JButton("SignUp");  btnSignup.addActionListener(this);  btnSignup.setFont(new Font("Tahoma",Font.PLAIN,25));  btnSignup.setBounds(900,309,202,42);  frame.getContentPane().add(btnSignup);  JLabel lblLoginInExisting=new JLabel("Login existing account");  lblLoginInExisting.setFont(new Font("Tahoma",Font.PLAIN,14));  lblLoginInExisting.setBounds(101,238,210,21);  frame.getContentPane().add(lblLoginInExisting);  JLabel lblCreateNewAccount=new JLabel("Create New Account :");  lblCreateNewAccount.setFont(new Font("Tahoma",Font.PLAIN,14));  lblCreateNewAccount.setBounds(906,234,188,28);  frame.getContentPane().add(lblCreateNewAccount);}  }
class C{  public void renewFor(Lease lease,long desiredDuration,long renewDuration,LeaseListener listener){  validateDuration(renewDuration,desiredDuration == Lease.FOREVER,"desiredDuration");  long now=SystemTime.timeMillis();  long desiredExpiration;  if (desiredDuration < Lease.FOREVER - now) {    desiredExpiration=now + desiredDuration;  } else {    desiredExpiration=Lease.FOREVER;  }  addLease(lease,desiredExpiration,renewDuration,listener,now);}  }
class C{  @Override protected void drawLabels(Canvas c,float pos,PointF anchor){  final float labelRotationAngleDegrees=mXAxis.getLabelRotationAngle();  float[] position=new float[]{0f,0f};  BarData bd=mChart.getData();  int step=bd.getDataSetCount();  for (int i=mMinX; i <= mMaxX; i+=mXAxis.mAxisLabelModulus) {    position[1]=i * step + i * bd.getGroupSpace() + bd.getGroupSpace() / 2f;    if (step > 1) {      position[1]+=((float)step - 1f) / 2f;    }    mTrans.pointValuesToPixel(position);    if (mViewPortHandler.isInBoundsY(position[1])) {      String label=mXAxis.getValues().get(i);      drawLabel(c,label,i,pos,position[1],anchor,labelRotationAngleDegrees);    }  }}  }
class C{  public void resetUploadSettings(){  this.isUploading=false;  this.uploadedSize=0;  this.uploadData=null;}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public H263Stream(int cameraId){  super(cameraId);  mCameraImageFormat=ImageFormat.NV21;  mVideoEncoder=MediaRecorder.VideoEncoder.H263;  mPacketizer=new H263Packetizer();}  }
class C{  Dict parse(Element element) throws XmlParseException {  if (!"plist".equalsIgnoreCase(element.getNodeName())) {    throw new XmlParseException("Expected plist top element, was: " + element.getNodeName());  }  Node n=element.getFirstChild();  while (n != null && !n.getNodeName().equals("dict")) {    n=n.getNextSibling();  }  Dict result=(Dict)parseElement(n);  return result;}  }
class C{  public LeaseDeniedException(){  super();}  }
class C{  @Override public void endPrefixMapping(String prefix) throws SAXException {  return;}  }
class C{  public ImageLoader(int height,int width){  super();  this.height=height;  this.width=width;}  }
class C{  public String timestamp(){  float totalSeconds=this.length();  float second=totalSeconds % 60;  int minute=(int)totalSeconds / 60 % 60;  int hour=(int)(totalSeconds / 3600);  StringBuilder sb=new StringBuilder();  if (hour > 0) {    sb.append(hour + ":");  }  if (minute > 0) {    sb.append(minute + ":");  }  sb.append(second);  return sb.toString();}  }
class C{  public static boolean equalInterfaces(Object obj1,Object obj2){  Class[] intf1=obj1.getClass().getInterfaces();  Class[] intf2=obj2.getClass().getInterfaces();  if (intf1.length != intf2.length) {    return false;  } else {    for (int i=0; i < intf1.length; i++) {      if (intf1[i] != intf2[i]) {        return false;      }    }    return true;  }}  }
class C{  public static boolean shuffle(Object[] objArray){  if (objArray == null) {    return false;  }  return shuffle(objArray,getRandom(objArray.length));}  }
class C{  public CarouselOptions minQuantity(int minQuantity){  mMinQuantity=minQuantity;  return this;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  final Map oldUserData=this.userData;  final Map oldNodeTable=this.nodeTable;  try {    if (oldUserData != null) {      this.userData=new Hashtable(oldUserData);    }    if (oldNodeTable != null) {      nodeTable=new Hashtable(oldNodeTable);    }    out.defaultWriteObject();  }  finally {    this.userData=oldUserData;    this.nodeTable=oldNodeTable;  }}  }
class C{  public static Map<String,Object> badExpireEvenProcessor(DispatchContext dctx,Map<String,? extends Object> context){  GenericValue creditCard=(GenericValue)context.get("creditCard");  String expireDate=creditCard.getString("expireDate");  String lastNumberStr=expireDate.substring(expireDate.length() - 1);  int lastNumber=Integer.parseInt(lastNumberStr);  if (lastNumber % 2.0 == 0.0) {    return alwaysBadExpireProcessor(dctx,context);  } else {    return alwaysApproveProcessor(dctx,context);  }}  }
class C{  public void addAllFiles(File[] files){  for (  File f : files)   addEntry(f.getPath());}  }
class C{  public ChangePassword(String email){  Email=email;  System.out.println("change password" + Email);  Name=sql_object.retunnNameByEmail(Email);  System.out.println("change password" + Name);  frame=new JFrame();  frame.getContentPane().setFont(new Font("Tahoma",Font.PLAIN,17));  frame.setSize(6000,5000);  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().setLayout(null);  JLabel lblChangePassword=new JLabel("Change Password :");  lblChangePassword.setFont(new Font("Tahoma",Font.BOLD,30));  lblChangePassword.setBounds(125,11,359,64);  frame.getContentPane().add(lblChangePassword);  JButton btnNewButton=new JButton("Log Out");  btnNewButton.addActionListener(this);  btnNewButton.setFont(new Font("Tahoma",Font.PLAIN,17));  btnNewButton.setBounds(1099,31,232,29);  frame.getContentPane().add(btnNewButton);  JButton btnMyAccount=new JButton("My Account");  btnMyAccount.addActionListener(this);  btnMyAccount.setFont(new Font("Tahoma",Font.PLAIN,17));  btnMyAccount.setBounds(1099,90,232,29);  frame.getContentPane().add(btnMyAccount);  passwordField=new JPasswordField();  passwordField.setFont(new Font("Tahoma",Font.PLAIN,17));  passwordField.setBounds(438,217,177,29);  frame.getContentPane().add(passwordField);  JLabel lblOldPassword=new JLabel("Old Password");  lblOldPassword.setFont(new Font("Tahoma",Font.PLAIN,17));  lblOldPassword.setBounds(205,217,157,29);  frame.getContentPane().add(lblOldPassword);  JLabel lblNewPassword=new JLabel("New Password");  lblNewPassword.setFont(new Font("Tahoma",Font.PLAIN,17));  lblNewPassword.setBounds(205,301,157,29);  frame.getContentPane().add(lblNewPassword);  passwordField_1=new JPasswordField();  passwordField_1.setFont(new Font("Tahoma",Font.PLAIN,17));  passwordField_1.setBounds(438,301,177,29);  frame.getContentPane().add(passwordField_1);  JLabel lblConfirmPassword=new JLabel("Confirm Password");  lblConfirmPassword.setFont(new Font("Tahoma",Font.PLAIN,17));  lblConfirmPassword.setBounds(205,384,157,29);  frame.getContentPane().add(lblConfirmPassword);  passwordField_2=new JPasswordField();  passwordField_2.setFont(new Font("Tahoma",Font.PLAIN,17));  passwordField_2.setBounds(438,384,177,27);  frame.getContentPane().add(passwordField_2);  JButton btnNewButton_1=new JButton("Confirm");  btnNewButton_1.addActionListener(this);  btnNewButton_1.setFont(new Font("Tahoma",Font.PLAIN,17));  btnNewButton_1.setBounds(540,484,205,38);  frame.getContentPane().add(btnNewButton_1);  JLabel lblNewLabel=new JLabel("Hi " + Name);  lblNewLabel.setFont(new Font("Tahoma",Font.PLAIN,22));  lblNewLabel.setBounds(642,31,232,55);  frame.getContentPane().add(lblNewLabel);}  }
class C{  protected VideoGetCommentsQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public DocumentNGramDistroGraph intersectDistroGraph(DocumentNGramDistroGraph dgOtherGraph){  DocumentNGramDistroGraph gRes=new DocumentNGramDistroGraph(MinSize,MaxSize,CorrelationWindow);  EdgeCachedLocator ecLocator=new EdgeCachedLocator(10);  EdgeCachedLocator ecNewLocator=new EdgeCachedLocator(10);  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gGraph=getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gOtherGraph=dgOtherGraph.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gNewGraph=gRes.getGraphLevelByNGramSize(iCurLvl);    if (gOtherGraph == null)     continue;    java.util.Iterator iIter=gOtherGraph.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      WeightedEdge eEdge=(WeightedEdge)ecLocator.locateDirectedEdgeInGraph(gGraph,weCurItem.getVertexA(),weCurItem.getVertexB());      WeightedEdge weNewEdge=null;      String sHead=weCurItem.getVertexA().getLabel();      String sTail=weCurItem.getVertexB().getLabel();      if (eEdge != null) {        try {          List l=new ArrayList();          l.add(sTail);          createWeightedEdgesConnecting(gNewGraph,sHead,l,eEdge.getWeight() + weCurItem.getWeight(),eEdge.getWeight() + weCurItem.getWeight(),1.0);          weNewEdge=(WeightedEdge)gr.demokritos.iit.jinsect.utils.locateDirectedEdgeInGraph(gNewGraph,weCurItem.getVertexA(),weCurItem.getVertexB());        } catch (        Exception e) {          e.printStackTrace();        }        Distribution d1=(Distribution)this.EdgeDistros.get(eEdge);        if (d1 == null)         d1=new Distribution();        Distribution d2=(Distribution)dgOtherGraph.EdgeDistros.get(weCurItem);        if (d2 == null)         d2=new Distribution();        if (weNewEdge != null)         gRes.EdgeDistros.put(weNewEdge,d2.addTo(d1));      }    }  }  return gRes;}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  @Override public final MaryData process(MaryData d) throws Exception {  assert state == MODULE_RUNNING;  Log.i(Mary.LOG,"Adding request");  ExternalModuleRequest request=new ExternalModuleRequest(d);  addRequest(request);  doNotifyAll();  Log.i(Mary.LOG,"Now waiting for request to be processed");  long tStart=System.currentTimeMillis();  while (!request.problemOccurred() && request.getOutput() == null && System.currentTimeMillis() - tStart < timeLimit) {    doWait(timeLimit);  }  if (request.getOutput() == null) {    if (request.problemOccurred()) {      Log.i(Mary.LOG,"Problem occurred. Rescheduling request.");    } else {      Log.i(Mary.LOG,"Timeout occurred. Requesting module restart and rescheduling request.");      setNeedToRestart(true);    }    removeRequest(request);    request.setProblemOccurred(false);    addRequest(request);    doNotifyAll();    Log.i(Mary.LOG,"Waiting for request to be processed (2nd try)");    tStart=System.currentTimeMillis();    while (!request.problemOccurred() && request.getOutput() == null && System.currentTimeMillis() - tStart < timeLimit) {      doWait(timeLimit);    }    if (request.getOutput() == null) {      if (request.problemOccurred()) {        Log.i(Mary.LOG,"Problem occurred again. Giving up.");      } else {        Log.i(Mary.LOG,"Timeout occurred again. Requesting module restart, but giving up on this request.");        setNeedToRestart(true);      }      removeRequest(request);      throw new IOException("Module " + name() + " cannot process.");    }  }  Log.i(Mary.LOG,"Request processed");  return request.getOutput();}  }
class C{  public T search(final double[] key) throws KeySizeException {  if (key.length != m_K) {    throw new KeySizeException();  }  final KDNode<T> kd=KDNode.srch(new HPoint(key),m_root,m_K);  return (kd == null ? null : kd.v);}  }
class C{  public static void useHotspotTeleport(HotspotTeleportTemplate template,int teleportGoal,Player player,int kinah,int level){  Race race=player.getRace();  if (template.getLocId() != teleportGoal)   log.warn("[HOTSPOT] packet loc id dont equals server loc id! Packet id=" + teleportGoal + " Server id="+ template.getLocId());  if (template.getRace() != race)   return;  if (player.getLevel() < level)   return;  if (!checkKinahForTransportation(template,player,kinah,false)) {    return;  }  int instanceId=1;  int mapId=template.getMapId();  if (player.getWorldId() == mapId) {    instanceId=player.getInstanceId();  }  sendLoc(player,mapId,instanceId,template.getX(),template.getY(),template.getZ(),(byte)template.getHeading(),teleportGoal,1);}  }
class C{  public Iterator<Map.Entry<T,Long>> entrySetIterator(){  return freqTable.entrySet().iterator();}  }
class C{  public void where(String column,PredicateOperator comparison,DataType value) throws QueryPlanException {  this.whereColumnNames.add(column);  this.whereOperators.add(comparison);  this.whereDataTypes.add(value);}  }
class C{  public int readUnsignedByte() throws JMSException {  initializeReading();  try {    this.dataIn.mark(Integer.MAX_VALUE);    return this.dataIn.readUnsignedByte();  } catch (  EOFException eof) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageEOFException(eof.toString());    jmsEx.setLinkedException(eof);    throw jmsEx;  }catch (  IOException ioe) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageFormatException("Format error occurred" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  private UnitsOfMeasure(){  unitMap.put("pixel",NonSI.PIXEL);  unitMap.put("metre",SI.METRE);  unitMap.put("foot",NonSI.FOOT);}  }
class C{  Ack(String producerKey,String consumerKey,String ackedMessageID,String destNameToBeAcked){  this.producerKey=producerKey;  this.consumerKey=consumerKey;  this.ackedMessageID=ackedMessageID;  this.destNameToBeAcked=destNameToBeAcked;}  }
class C{  @Override public void changePresenter(@NonNull final CoreContract.Presenter presenter){  this.presenter=requireNonNull(presenter);  delegate.setPresenter(presenter);}  }
class C{  public void reAddAllInserts(@NonNull Collection<? extends Insertion> collection){  if (collection.size() == 0) {    return;  }  mInserts.addAll(collection);  getItems().addAll(createEmptyItemsList(collection.size()));}  }
class C{  private void processConfigurationReport(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {  int parameter=serialMessage.getMessagePayloadByte(offset + 1);  int size=serialMessage.getMessagePayloadByte(offset + 2);  if (size == 0) {    logger.warn("NODE {}: Parameter {} response has 0 length",getNode().getNodeId(),parameter);    return;  }  try {    int value=extractValue(serialMessage.getMessagePayload(),offset + 3,size);    logger.debug("NODE {}: Node configuration report, parameter = {}, value = {}, size = {}",getNode().getNodeId(),parameter,value,size);    ZWaveConfigurationParameter configurationParameter;    configurationParameter=configParameters.get(parameter);    if (configurationParameter == null) {      configurationParameter=new ZWaveConfigurationParameter(parameter,value,size);    } else {      configurationParameter.setValue(value);    }    configParameters.put(parameter,configurationParameter);    ZWaveConfigurationParameterEvent zEvent=new ZWaveConfigurationParameterEvent(getNode().getNodeId(),configurationParameter);    getController().notifyEventListeners(zEvent);  } catch (  NumberFormatException e) {    return;  }}  }
class C{  public final int hashCode(){  return Hash;}  }
class C{  public boolean string_constants(){  return soot.PhaseOptions.getBoolean(options,"string-constants");}  }
class C{  protected void assertHasHeaderValue(String name,String value){  MultivaluedMap<String,String> headers=getLastReceivedHeaders();  Assert.assertNotNull(headers);  List<String> values=headers.get(name);  Assert.assertNotNull(values);  Assert.assertTrue(values.contains(value));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_JOIN_ROUND_IDARENA(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400931,value0,value1);}  }
class C{  @Nullable public static MediaSource from(String sourceId){  assert sourceId != null;  Uri sourceUri=Uri.parse(sourceId);  if (!CAST_SOURCE_ID_HOST.equals(sourceUri.getHost()))   return null;  if (!CAST_SOURCE_ID_PATH.equals(sourceUri.getPath()))   return null;  String uriFragment=sourceUri.getFragment();  if (uriFragment == null)   return null;  String[] parameters=uriFragment.split(CAST_SOURCE_ID_SEPARATOR);  String applicationId=extractParameter(parameters,CAST_SOURCE_ID_APPLICATION_ID);  if (applicationId == null)   return null;  String clientId=extractParameter(parameters,CAST_SOURCE_ID_CLIENT_ID);  String autoJoinPolicy=extractParameter(parameters,CAST_SOURCE_ID_AUTOJOIN_POLICY);  return new MediaSource(sourceId,applicationId,clientId,autoJoinPolicy);}  }
class C{  @Override public Dimension minimumLayoutSize(Container target){  Dimension minimum=layoutSize(target,false);  minimum.width-=(getHgap() + 1);  return minimum;}  }
class C{  static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  @Override public Double analyse(double[] frame){  if (frame.length != getFrameLengthSamples())   throw new IllegalArgumentException("Expected frame of length " + getFrameLengthSamples() + ", got "+ frame.length);  double totalEnergy=0;  for (int i=0; i < frame.length; i++) {    if (frame[i] != 0)     totalEnergy+=MathUtils.db(frame[i] * frame[i]);  }  rememberFrameEnergy(totalEnergy);  return new Double(totalEnergy);}  }
class C{  public boolean deleteStorage(TrackerGroup trackerGroup,String groupName,String storageIpAddr) throws IOException {  int serverIndex;  int notFoundCount;  TrackerServer trackerServer;  notFoundCount=0;  for (serverIndex=0; serverIndex < trackerGroup.tracker_servers.length; serverIndex++) {    try {      trackerServer=trackerGroup.getConnection(serverIndex);    } catch (    IOException ex) {      ex.printStackTrace(System.err);      this.errno=ProtoCommon.ECONNREFUSED;      return false;    }    try {      StructStorageStat[] storageStats=listStorages(trackerServer,groupName,storageIpAddr);      if (storageStats == null) {        if (this.errno == ProtoCommon.ERR_NO_ENOENT) {          notFoundCount++;        } else {          return false;        }      } else       if (storageStats.length == 0) {        notFoundCount++;      } else       if (storageStats[0].getStatus() == ProtoCommon.FDFS_STORAGE_STATUS_ONLINE || storageStats[0].getStatus() == ProtoCommon.FDFS_STORAGE_STATUS_ACTIVE) {        this.errno=ProtoCommon.ERR_NO_EBUSY;        return false;      }    }  finally {      try {        trackerServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      }    }  }  if (notFoundCount == trackerGroup.tracker_servers.length) {    this.errno=ProtoCommon.ERR_NO_ENOENT;    return false;  }  notFoundCount=0;  for (serverIndex=0; serverIndex < trackerGroup.tracker_servers.length; serverIndex++) {    try {      trackerServer=trackerGroup.getConnection(serverIndex);    } catch (    IOException ex) {      System.err.println("connect to server " + trackerGroup.tracker_servers[serverIndex].getAddress().getHostAddress() + ":"+ trackerGroup.tracker_servers[serverIndex].getPort()+ " fail");      ex.printStackTrace(System.err);      this.errno=ProtoCommon.ECONNREFUSED;      return false;    }    try {      if (!this.deleteStorage(trackerServer,groupName,storageIpAddr)) {        if (this.errno != 0) {          if (this.errno == ProtoCommon.ERR_NO_ENOENT) {            notFoundCount++;          } else           if (this.errno != ProtoCommon.ERR_NO_EALREADY) {            return false;          }        }      }    }  finally {      try {        trackerServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      }    }  }  if (notFoundCount == trackerGroup.tracker_servers.length) {    this.errno=ProtoCommon.ERR_NO_ENOENT;    return false;  }  if (this.errno == ProtoCommon.ERR_NO_ENOENT) {    this.errno=0;  }  return this.errno == 0;}  }
class C{  public boolean contains(T dataSet){  for (  T set : mDataSets) {    if (set.equals(dataSet))     return true;  }  return false;}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  public SlickForm(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  initAttrs(context,attrs);}  }
class C{  public SourceContextAndPath extendPath(Abstraction abs){  return extendPath(abs,true);}  }
class C{  public void updateCloud(int pointCount,FloatBuffer pointBuffer){  calculateColors(pointCount,pointBuffer);  updatePoints(pointCount,pointBuffer,mColorArray);}  }
class C{  public static double toDouble(Object obj){  Double result=toDoubleObject(obj);  return result == null ? 0.0 : result.doubleValue();}  }
class C{  public NotificationsGetQuery endTime(Integer value){  return unsafeParam("end_time",value);}  }
class C{  @Override public Future<BoxedUnit> advanceCommitPosition(DLSN newPosition){  if (null == lastCommittedPosition.get() || (newPosition.compareTo(lastCommittedPosition.get()) > 0)) {    lastCommittedPosition.set(newPosition);    return Utils.zkAsyncCreateFullPathOptimisticAndSetData(zooKeeperClient,zkPath,newPosition.serialize().getBytes(Charsets.UTF_8),zooKeeperClient.getDefaultACL(),CreateMode.PERSISTENT);  } else {    return Future.Done();  }}  }
class C{  public boolean isHighlightEnabled(){  for (  IDataSet set : mDataSets) {    if (!set.isHighlightEnabled())     return false;  }  return true;}  }
class C{  public static String slurpFileNoExceptions(String filename){  try {    return slurpFile(filename);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  @POST @Path("/roles") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value="Assign roles for a list of users and applications") @Timed public Response assignUserRoles(@ApiParam(name="userRoleList",value="Please see model example",required=true) final UserRoleList userRoleList,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  List<Map> status=updateUserRole(userRoleList,authorizationHeader);  return httpHeader.headers().entity(ImmutableMap.<String,Object>builder().put("assignmentStatuses",status).build()).build();}  }
class C{  protected Type(String name){  super(name);}  }
class C{  public EncodingException(){  super();}  }
class C{  public PlacesGetByIdQuery(VkApiClient client,UserActor actor,List<Integer> places){  super(client,"places.getById",Utils.buildParametrizedType(List.class,Place.class));  accessToken(actor.getAccessToken());  places(places);}  }
class C{  public static final int daysBetween(Date early,Date late){  Calendar c1=Calendar.getInstance();  Calendar c2=Calendar.getInstance();  c1.setTime(early);  c2.setTime(late);  return daysBetween(c1,c2);}  }
class C{  public FormScalingUtil(Class clazz){  this(clazz,JBUI.scale(1.0f));}  }
class C{  public boolean removeDataSet(T d){  if (d == null)   return false;  boolean removed=mDataSets.remove(d);  if (removed) {    mYValCount-=d.getEntryCount();    calcMinMax(0,mYValCount);  }  return removed;}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public void invokeMain(String sClass,String[] args) throws Throwable {  Class<?> clazz=loadClass(sClass);  logInfo(LogArea.CONFIG,"Launch: %s.main(); Loader: %s",sClass,clazz.getClassLoader());  Method method=clazz.getMethod("main",new Class<?>[]{String[].class});  boolean bValidModifiers=false;  boolean bValidVoid=false;  if (method != null) {    method.setAccessible(true);    int nModifiers=method.getModifiers();    bValidModifiers=Modifier.isPublic(nModifiers) && Modifier.isStatic(nModifiers);    Class<?> clazzRet=method.getReturnType();    bValidVoid=(clazzRet == void.class);  }  if (method == null || !bValidModifiers || !bValidVoid) {    throw new NoSuchMethodException("The main() method in class \"" + sClass + "\" not found.");  }  try {    method.invoke(null,(Object)args);  } catch (  InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  public static String toInternalName(SootClass cls){  return toInternalName(cls.getName());}  }
class C{  @Override public LogNormalDistribution makeDistribution(){  return new LogNormalDistribution(2.1,1.4);}  }
class C{  private Object legalOrIllegal(Metadata<Optional> metadata){  Type type=metadata.getType();  if (type.equals(String.class)) {    return safetyCast.with("",type);  }  for (  Type numericType : SupportedTypes.NUMERIC) {    if (type.equals(numericType)) {      return safetyCast.with(0,type);    }  }  return null;}  }
class C{  public static boolean isUnmatched(int mod){  return (mod & NOTIFY_UNMATCHED) != 0;}  }
class C{  public static boolean hasJellyBeanMr1(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1;}  }
class C{  public boolean isValidPoint(double x,double y,double z){  if (x < xval[0] || x > xval[xval.length - 1] || y < yval[0] || y > yval[yval.length - 1] || z < zval[0] || z > zval[zval.length - 1]) {    return false;  } else {    return true;  }}  }
class C{  public JsonObject(JsonObject object){  this(object,false);}  }
class C{  public static boolean isRedirect(HttpResponse httpResponse){switch (httpResponse.getStatus().code()) {case 300:case 301:case 302:case 303:case 307:    return true;default :  return false;}}  }
class C{  private void updateAndValidate(final T dataTag,final Object value,final String valueDescription,final Timestamp timestamp){  if (!filteroutValid(dataTag,value,valueDescription,timestamp)) {    updateAndValidateQuietly(dataTag,value,valueDescription,null,null,timestamp);  } else {    if (LOGGER.isTraceEnabled()) {      LOGGER.trace("Filtering out repeated update for datatag " + dataTag.getId());    }  }}  }
class C{  public Conversation(Plugin plugin,Conversable forWhom,Prompt firstPrompt){  this(plugin,forWhom,firstPrompt,new HashMap<Object,Object>());}  }
class C{  private Base64(){}  }
class C{  public static Player newPlayer(PlayerCommonData playerCommonData,PlayerAppearance playerAppearance,Account account){  PlayerInitialData playerInitialData=DataManager.PLAYER_INITIAL_DATA;  LocationData ld=playerInitialData.getSpawnLocation(playerCommonData.getRace());  WorldPosition position=World.getInstance().createPosition(ld.getMapId(),ld.getX(),ld.getY(),ld.getZ(),ld.getHeading(),0);  playerCommonData.setPosition(position);  Player newPlayer=new Player(new PlayerController(),playerCommonData,playerAppearance,account);  newPlayer.setSkillList(new PlayerSkillList());  SkillLearnService.addNewSkills(newPlayer);  PlayerCreationData playerCreationData=playerInitialData.getPlayerCreationData(playerCommonData.getPlayerClass());  Storage playerInventory=new PlayerStorage(StorageType.CUBE);  Storage regularWarehouse=new PlayerStorage(StorageType.REGULAR_WAREHOUSE);  Storage accountWarehouse=new PlayerStorage(StorageType.ACCOUNT_WAREHOUSE);  newPlayer.setStorage(playerInventory,StorageType.CUBE);  newPlayer.setStorage(regularWarehouse,StorageType.REGULAR_WAREHOUSE);  newPlayer.setStorage(accountWarehouse,StorageType.ACCOUNT_WAREHOUSE);  Equipment equipment=new Equipment(newPlayer);  if (playerCreationData != null) {    List<ItemType> items=playerCreationData.getItems();    for (    ItemType itemType : items) {      int itemId=itemType.getTemplate().getTemplateId();      Item item=ItemFactory.newItem(itemId,itemType.getCount());      if (item == null) {        continue;      }      ItemTemplate itemTemplate=item.getItemTemplate();      if ((itemTemplate.isArmor() || itemTemplate.isWeapon()) && !(equipment.isSlotEquipped(itemTemplate.getItemSlot()))) {        item.setEquipped(true);        ItemSlot itemSlot=ItemSlot.getSlotFor(itemTemplate.getItemSlot());        item.setEquipmentSlot(itemSlot.getSlotIdMask());        equipment.onLoadHandler(item);      } else {        playerInventory.onLoadHandler(item);      }    }  }  newPlayer.setEquipment(equipment);  newPlayer.setMailbox(new Mailbox(newPlayer));  for (int petBagId=StorageType.PET_BAG_MIN; petBagId <= StorageType.PET_BAG_MAX; petBagId++) {    Storage petBag=new PlayerStorage(StorageType.getStorageTypeById(petBagId));    newPlayer.setStorage(petBag,StorageType.getStorageTypeById(petBagId));  }  for (int houseWhId=StorageType.HOUSE_WH_MIN; houseWhId <= StorageType.HOUSE_WH_MAX; houseWhId++) {    StorageType whType=StorageType.getStorageTypeById(houseWhId);    if (whType != null) {      Storage cabinet=new PlayerStorage(whType);      newPlayer.setStorage(cabinet,StorageType.getStorageTypeById(houseWhId));    }  }  playerInventory.setPersistentState(PersistentState.UPDATE_REQUIRED);  equipment.setPersistentState(PersistentState.UPDATE_REQUIRED);  return newPlayer;}  }
class C{  public void print(PrintStream out){  if (rootNodes != null) {    for (    TreeSearchNode<M,G> node : rootNodes) {      printNode(node,out);    }  }}  }
class C{  public void mousePressed(@AndroidCoordinate int x,@AndroidCoordinate int y){  if (myMouseInteraction != null) {    myMouseInteraction.mousePressed(pxToDp(x),pxToDp(y),false);    myMouseInteraction.setAutoConnect(ConstraintModel.isAutoConnect());  }}  }
class C{  public void updateData(LegendOptionData newOptionData){  data=newOptionData;  populate(newOptionData);}  }
class C{  public WriteModifiers(WriteModifiers... modifiers){  super(modifiers);}  }
class C{  @RequestMapping(value="/",method=PUT,produces=APPLICATION_JSON_VALUE) public ResponseEntity<BookDTO> update(@RequestBody BookDTO bookDTO) throws URISyntaxException {  log.debug("Update BookDTO : {}",bookDTO);  if (!bookDTO.isIdSet()) {    return create(bookDTO);  }  BookDTO result=bookDTOService.save(bookDTO);  return ResponseEntity.ok().body(result);}  }
class C{  public R1Interval addPoint(double p){  if (isEmpty()) {    return R1Interval.fromPoint(p);  } else   if (p < lo()) {    return new R1Interval(p,hi());  } else   if (p > hi()) {    return new R1Interval(lo(),p);  } else {    return new R1Interval(lo(),hi());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CAPTCHA_UNRESTRICT_FAILED_RETRY(String value0){  return new SM_SYSTEM_MESSAGE(1400271,value0);}  }
class C{  public static LineIterator lineIterator(File file) throws IOException {  return lineIterator(file,null);}  }
class C{  @Override public Writer append(CharSequence csq,int start,int end) throws IOException {  try {    beforeWrite(end - start);    out.append(csq,start,end);    afterWrite(end - start);  } catch (  IOException e) {    handleIOException(e);  }  return this;}  }
class C{  public void stopRecording(){  if (this.recorder != null) {    try {      if (this.state == STATE.MEDIA_RUNNING) {        this.recorder.stop();        this.setState(STATE.MEDIA_STOPPED);      }      this.recorder.reset();      this.moveFile(this.audioFile);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public boolean isCellEditable(int row,int col){  if (!m_rows.isValidRow(row)) {    return false;  } else {    return getColumn(col).isCellEditable(row);  }}  }
class C{  private List<Map<String,byte[]>> prepareFavorites(){  List<Map<String,byte[]>> queryResult=new ArrayList<>();  for (int i=0; i < 8; ++i) {    Map<String,byte[]> row=new HashMap<>();    byte[] id=new byte[16];    new Random().nextBytes(id);    id[0]=(byte)i;    row.put("experiment_id",id);    queryResult.add(row);  }  return queryResult;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_HE_IS_BANISHED(String value0){  return new SM_SYSTEM_MESSAGE(1301021,value0);}  }
class C{  private void initModels(){  File root=new File(path + "/model");  File[] list=root.listFiles();  if (list != null) {    for (    File f : list) {      if (f.getName().endsWith(".jar")) {        classLoader.addJar(f.getAbsolutePath());        log.debug("loading: " + f.getAbsolutePath());      }    }  }}  }
class C{  public Vector1DFormat(final NumberFormat format){  super(DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_SEPARATOR,format);}  }
class C{  private int findSmallestFrom(int startId,List<String> sortFlds,List<Integer> sortDirs){  int minId=startId;  moveToId(startId);  while (super.next()) {    int id=currentId();    if (minId < 0 || compareRecords(minId,id,sortFlds,sortDirs) > 0)     minId=id;    moveToId(id);  }  return minId;}  }
class C{  private void readFeatureSimilarityMatrices(BufferedReader input) throws IOException {  String line=null;  similarityMatrices=new float[this.getNumberOfByteFeatures()][][];  for (int i=0; i < this.getNumberOfByteFeatures(); i++) {    similarityMatrices[i]=null;  }  while ((line=input.readLine()) != null) {    if ("".equals(line)) {      return;    }    String[] featureUniqueValues=line.trim().split("\\s+");    String featureName=featureUniqueValues[0];    if (!isByteFeature(featureName)) {      throw new RuntimeException("Similarity matrix support is for bytefeatures only, but not for other feature types...");    }    int featureIndex=this.getFeatureIndex(featureName);    int noUniqValues=featureUniqueValues.length - 1;    similarityMatrices[featureIndex]=new float[noUniqValues][noUniqValues];    for (int i=1; i <= noUniqValues; i++) {      Arrays.fill(similarityMatrices[featureIndex][i - 1],0);      String featureValue=featureUniqueValues[i];      String matLine=input.readLine();      if (matLine == null) {        throw new RuntimeException("Feature definition file is having unexpected format...");      }      String[] lines=matLine.trim().split("\\s+");      if (!featureValue.equals(lines[0])) {        throw new RuntimeException("Feature definition file is having unexpected format...");      }      if (lines.length != i) {        throw new RuntimeException("Feature definition file is having unexpected format...");      }      for (int j=1; j < i; j++) {        float similarity=(new Float(lines[j])).floatValue();        similarityMatrices[featureIndex][i - 1][j - 1]=similarity;        similarityMatrices[featureIndex][j - 1][i - 1]=similarity;      }    }  }}  }
class C{  public Path[] updatePhare(@FloatRange(from=0,to=1.0) float percentage,final boolean async){  if (mSubPathsOutputStore != null) {    mPathMeasure.setPath(mPath,false);    int i=0;    do {      mSubPathsOutputStore[i].reset();      if (async) {        boolean success=mPathMeasure.getSegment(0,mSubPathLengths[i] * percentage,mSubPathsOutputStore[i],true);        if (success) {          mSubPathsOutputStore[i].rLineTo(0,0);          mSubPathsOutput[i]=mSubPathsOutputStore[i];        } else {          mSubPathsOutput[i]=null;        }      } else {        float subPathStart=mSubPathPercentageRanges[i * 3];        float subPathEnd=mSubPathPercentageRanges[i * 3 + 1];        float multiples=mSubPathPercentageRanges[i * 3 + 2];        if (subPathStart >= percentage) {          mSubPathsOutput[i]=null;        } else {          float endD=subPathEnd >= percentage ? (percentage - subPathStart) * multiples * mSubPathLengths[i] : mSubPathLengths[i];          boolean success=mPathMeasure.getSegment(0,endD,mSubPathsOutputStore[i],true);          if (success) {            mSubPathsOutputStore[i].rLineTo(0,0);            mSubPathsOutput[i]=mSubPathsOutputStore[i];          } else {            mSubPathsOutput[i]=null;          }        }      }      i++;    } while (i < mSubPathsOutputStore.length && mPathMeasure.nextContour());    mPathMeasure.setPath(mPath,false);    return mSubPathsOutput;  }  return null;}  }
class C{  public boolean fire(Context context){  return Utils.openIntentSafely(context,action);}  }
class C{  public List<DexlibAbstractInstruction> instructionsAfter(DexlibAbstractInstruction instruction){  int i=instructions.indexOf(instruction);  if (i == -1)   throw new IllegalArgumentException("Instruction" + instruction + "not part of this body.");  return instructions.subList(i + 1,instructions.size());}  }
class C{  private double extractDouble(JsonObject jsonObj,String field){  double value=0.0;  if (jsonObj != null) {    JsonElement element=jsonObj.get(field);    if (element != null) {      value=element.getAsDouble();    }  }  return value;}  }
class C{  private void addOrDeleteBoundaries(Document doc){  NodeIterator it=((DocumentTraversal)doc).createNodeIterator(doc,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.BOUNDARY),false);  Element boundary=null;  List<Element> bi1prosodyElements=null;  while ((boundary=(Element)it.nextNode()) != null) {    int minBI=3;    Element prosody=(Element)DomUtils.getAncestor(boundary,MaryXML.PROSODY);    if (prosody != null) {      ProsodicSettings settings=prosodyMap.get(prosody);      assert settings != null;      int rate=settings.rate();      int numberOfPauses=settings.numberOfPauses();      if (numberOfPauses <= 50)       minBI=5; else       if (numberOfPauses <= 75)       minBI=4; else       if (numberOfPauses > 150)       minBI=1; else       if (numberOfPauses > 125)       minBI=2;      if (rate < 90 && minBI > 1)       minBI--;      if (minBI == 1) {        if (bi1prosodyElements == null)         bi1prosodyElements=new ArrayList<Element>();        bi1prosodyElements.add(prosody);      }    }    int bi=3;    try {      bi=Integer.parseInt(boundary.getAttribute("breakindex"));    } catch (    NumberFormatException e) {      Log.i(Mary.LOG,"Unexpected breakindex value `" + boundary.getAttribute("breakindex") + "', assuming "+ bi);    }  }  if (bi1prosodyElements != null) {    Iterator<Element> elIt=bi1prosodyElements.iterator();    while (elIt.hasNext()) {      Element prosody=elIt.next();      NodeIterator nodeIt=((DocumentTraversal)doc).createNodeIterator(prosody,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.TOKEN,MaryXML.BOUNDARY),false);      Element el=null;      Element prevEl=null;      while ((el=(Element)nodeIt.nextNode()) != null) {        if (el.getTagName().equals(MaryXML.TOKEN) && prevEl != null && prevEl.getTagName().equals(MaryXML.TOKEN)) {          Element newBoundary=MaryXML.createElement(doc,MaryXML.BOUNDARY);          newBoundary.setAttribute("breakindex","1");          el.getParentNode().insertBefore(newBoundary,el);        }        prevEl=el;      }    }  }}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  public void removeFromHouse(){  this.setX(0);  this.setY(0);  this.setZ(0);  this.setHeading((byte)0);}  }
class C{  public static void checkZoneLevels(Player player){  World world=World.getInstance();  float z=player.getZ();  if (player.getLifeStats().isAlreadyDead()) {    return;  }  if (z < world.getWorldMap(player.getWorldId()).getDeathLevel()) {    player.getController().die();    return;  }  float playerheight=player.getPlayerAppearance().getHeight() * 1.6f;  if (z < world.getWorldMap(player.getWorldId()).getWaterLevel() - playerheight) {    startDrowning(player);  } else {    stopDrowning(player);  }}  }
class C{  protected void querySegmentMetadata(final PhysicalTable table){  String resourcePath=String.format(SEGMENT_METADATA_QUERY_FORMAT,table.getName());  SuccessCallback success=buildSegmentMetadataSuccessCallback(table);  druidWebService.getJsonObject(success,errorCallback,failureCallback,resourcePath);}  }
class C{  public boolean hasPermissionsByInternalId(String internalId,Collection<Permission> permissions){  AuthorizationInfo authorizationInfo=getAuthorizationInfoByInternalId(internalId);  return authorizationInfo != null && isPermittedAll(permissions,authorizationInfo);}  }
class C{  public BasePresenter create(String tag){  return mPresenterStorage.create(tag);}  }
class C{  @Override public void onTabClosing(long time,int id){  reset();  forceAnimationToFinish();  TabModel model=mTabModelSelector.getModelForTabId(id);  if (model != null) {    mClosedTab=createLayoutTab(id,model.isIncognito(),NO_CLOSE_BUTTON,NO_TITLE);    mClosedTab.setBorderAlpha(0.0f);    mLayoutTabs=new LayoutTab[]{mClosedTab};    updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(id)));  } else {    mLayoutTabs=null;    mClosedTab=null;  }  super.onTabClosing(time,id);}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  private ArrayList<ContentProviderOperation> prepareInsertShares(ArrayList<OCShare> shares,ArrayList<ContentProviderOperation> operations){  if (shares != null) {    for (    OCShare share : shares) {      ContentValues cv=new ContentValues();      cv.put(ProviderTableMeta.OCSHARES_FILE_SOURCE,share.getFileSource());      cv.put(ProviderTableMeta.OCSHARES_ITEM_SOURCE,share.getItemSource());      cv.put(ProviderTableMeta.OCSHARES_SHARE_TYPE,share.getShareType().getValue());      cv.put(ProviderTableMeta.OCSHARES_SHARE_WITH,share.getShareWith());      cv.put(ProviderTableMeta.OCSHARES_PATH,share.getPath());      cv.put(ProviderTableMeta.OCSHARES_PERMISSIONS,share.getPermissions());      cv.put(ProviderTableMeta.OCSHARES_SHARED_DATE,share.getSharedDate());      cv.put(ProviderTableMeta.OCSHARES_EXPIRATION_DATE,share.getExpirationDate());      cv.put(ProviderTableMeta.OCSHARES_TOKEN,share.getToken());      cv.put(ProviderTableMeta.OCSHARES_SHARE_WITH_DISPLAY_NAME,share.getSharedWithDisplayName());      cv.put(ProviderTableMeta.OCSHARES_IS_DIRECTORY,share.isFolder() ? 1 : 0);      cv.put(ProviderTableMeta.OCSHARES_USER_ID,share.getUserId());      cv.put(ProviderTableMeta.OCSHARES_ID_REMOTE_SHARED,share.getRemoteId());      cv.put(ProviderTableMeta.OCSHARES_ACCOUNT_OWNER,mAccount.name);      operations.add(ContentProviderOperation.newInsert(ProviderTableMeta.CONTENT_URI_SHARE).withValues(cv).build());    }  }  return operations;}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FACTION_LEAVE(String value0){  return new SM_SYSTEM_MESSAGE(1300526,value0);}  }
class C{  public static Map<String,Object> findOrdersInternal(DispatchContext dctx,Map<String,? extends Object> context){  return findOrders(dctx,context,false);}  }
class C{  protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public void prevImage() throws IOException {  super.prev();}  }
class C{  @Override protected void processLPC(LpCoeffs coeffs,double[] residual){  double totalResidualEnergy=coeffs.getGain() * coeffs.getGain();  double avgAbsAmplitude=Math.sqrt(totalResidualEnergy / residual.length);  double maxAbsAmplitude=2 * avgAbsAmplitude;  double spread=2 * maxAbsAmplitude;  for (int i=0; i < residual.length; i++)   residual[i]=whisperAmount * spread * (Math.random() - 0.5) + oneMinusWhisperAmount * residual[i];}  }
class C{  @Override protected StateManagerImpl newStateManagerImpl(Object oid,ClassMetaData meta){  return new StateManager(oid,meta,this);}  }
class C{  public String upload_file1(String master_file_id,String prefix_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(master_file_id,parts);  if (this.errno != 0) {    return null;  }  parts=this.upload_file(parts[0],parts[1],prefix_name,file_size,callback,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  public static URI toLocation(URI sourceUri,String table){  getLocationType(sourceUri);  return UriBuilder.fromUri(sourceUri).path(table).build();}  }
class C{  protected FriendsGetAvailableForCallQueryWithFields fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  public SM_UPDATE_SESSION(SessionKey key){  super(0x0c);  this.accountId=key.accountId;  this.loginOk=key.loginOk;}  }
class C{  private static String massageURI(String uri){  uri=uri.trim();  int protocolEnd=uri.indexOf(':');  if (protocolEnd < 0 || isColonFollowedByPortNumber(uri,protocolEnd)) {    uri="http://" + uri;  }  return uri;}  }
class C{  public Logo(String img,String url){  super(new BorderLayout());  Icon image=new ImageIcon(ImageUtilities.loadImage(img,true));  JLabel label=new JLabel(image);  label.setBorder(BorderFactory.createEmptyBorder());  label.setOpaque(false);  label.addMouseListener(this);  setOpaque(false);  add(label,BorderLayout.CENTER);  setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));  this.url=url;}  }
class C{  public static Complex valueOf(double realPart){  if (Double.isNaN(realPart)) {    return NaN;  }  return new Complex(realPart);}  }
class C{  public boolean isUsePercentValuesEnabled(){  return mUsePercentValues;}  }
class C{  @Override public void reset() throws IOException {  fInputStream.reset();}  }
class C{  public boolean areTransmitOptionsSet(){  return transmitOptions != TRANSMIT_OPTIONS_NOT_SET;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public int geom_eval(){  return soot.PhaseOptions.getInt(options,"geom-eval");}  }
class C{  public NewInvokeExpr newNewInvokeExpr(RefType base,SootMethodRef method,List args){  return new GNewInvokeExpr(base,method,args);}  }
class C{  public static void polygon(double[] x,double[] y){  if (x == null)   throw new NullPointerException();  if (y == null)   throw new NullPointerException();  int n1=x.length;  int n2=y.length;  if (n1 != n2)   throw new IllegalArgumentException("arrays must be of the same length");  int n=n1;  GeneralPath path=new GeneralPath();  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));  for (int i=0; i < n; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));  path.closePath();  offscreen.draw(path);  draw();}  }
class C{  public boolean contains(long val){  return index(val) >= 0;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", roleId=").append(roleId);  sb.append(", menuId=").append(menuId);  sb.append(", permission=").append(permission);  sb.append("]");  return sb.toString();}  }
class C{  public UserAlreadyExistsException(String s){  super(s);}  }
class C{  public static boolean isUpdateOrWrite(int mod){  return Modifiers.contains(mod,UpdateModifiers.UPDATE_OR_WRITE);}  }
class C{  public void hideToolbar(boolean clearSelection){  if (mFindToolbar == null)   return;  mFindToolbar.deactivate(clearSelection);}  }
class C{  public synchronized void addLocators(LookupLocator[] locators){  testSetForNull(locators);  if (terminated) {    throw new IllegalStateException("discovery terminated");  }  discoverLocators(locators);}  }
class C{  public MessagesGetChatUsersQueryWithChatIds(VkApiClient client,UserActor actor,List<Integer> chatIds){  super(client,"messages.getChatUsers",GetChatUsersChatIdsResponse.class);  accessToken(actor.getAccessToken());  chatIds(chatIds);}  }
class C{  static public void validateClusterDocument(Node validatedXmlDocument) throws SAXException, IOException {  if (validXMLSchema) {    Validator validator=null;    try {      initClusterXSDSchema();    } catch (    SAXException saxE) {      if (_logger.isLoggable(Level.SEVERE)) {        _logger.log(Level.SEVERE,"Failed to create XML xsd validator. Will not validate the cluster configuration due to:  " + saxE.toString(),saxE);      }    }catch (    IllegalArgumentException iae) {      if (_logger.isLoggable(Level.SEVERE)) {        _logger.log(Level.SEVERE,"Failed to create XML xsd validator. Will not validate the cluster configuration due to:  " + iae.toString(),iae);      }    }    if (schemaXSD != null) {      validator=schemaXSD.newValidator();      validator.setErrorHandler(new DefaultErrorHandler());      Attr xpathAttr=null;      boolean exceptionThrown=false;      try {        Node attrNode=validatedXmlDocument.getFirstChild();        if (attrNode != null && attrNode instanceof Element) {          Attr attr=(Attr)attrNode.getAttributes().getNamedItem("xmlns");          if (attr != null) {            xpathAttr=((Element)attrNode).removeAttributeNode(attr);            if (xpathAttr != null && _logger.isLoggable(Level.FINE)) {              _logger.log(Level.FINE,"In order the cluster schema xsl validation succeeds you need to remove the following xsl " + " header attribute. \n" + xpathAttr + "\nCurrently we bypassed the validation and continued as expected.");            }          }        }      } catch (      Exception e) {        if (_logger.isLoggable(Level.FINE)) {          _logger.log(Level.FINE,"In order the cluster schema xsl validation succeeds you need to remove the following xsl " + " header attribute. \n" + xpathAttr + "\nException thrown before validating: "+ e.getMessage());        }        exceptionThrown=true;      }      if (xpathAttr == null && !exceptionThrown) {        if (validator != null && validXMLSchema)         validator.validate(new DOMSource(validatedXmlDocument));        if (_logger.isLoggable(Level.FINE)) {          _logger.log(Level.FINE,"Validated successfully the cluster configuration using the XML xsd validator: " + validator.toString());        }      }    }  }}  }
class C{  void mirror(){  for (int x=0; x < bitMatrix.getWidth(); x++) {    for (int y=x + 1; y < bitMatrix.getHeight(); y++) {      if (bitMatrix.get(x,y) != bitMatrix.get(y,x)) {        bitMatrix.flip(y,x);        bitMatrix.flip(x,y);      }    }  }}  }
class C{  public boolean isCaseSensitive(){  return sensitive;}  }
class C{  private void loadSettings(){  Properties pIn=new Properties();  try {    if (!(new File("AutoSummENGGUI.properties").exists()))     return;    FileInputStream fsIn=new FileInputStream("AutoSummENGGUI.properties");    pIn.loadFromXML(fsIn);    fsIn.close();  } catch (  IOException ioe) {    ioe.printStackTrace(System.err);    return;  }  try {    ModelsRootDirEdt.setText(pIn.getProperty("ModelDir","./models"));    SummariesRootDirEdt.setText(pIn.getProperty("SummaryDir","./summaries"));    OutputFileEdt.setText(pIn.getProperty("OutputFile","./jinsect.table"));    ThreadCntEdt.setValue(Integer.valueOf(pIn.getProperty("Threads","2")));    SilentChk.setSelected(Boolean.valueOf(pIn.getProperty("Silent",Boolean.TRUE.toString())));    ProgressChk.setSelected(Boolean.valueOf(pIn.getProperty("ShowProgress",Boolean.TRUE.toString())));    DoWordChk.setSelected(Boolean.valueOf(pIn.getProperty("DoWord",Boolean.TRUE.toString())));    DoWordChkStateChanged(new ChangeEvent(DoWordChk));    DoCharChk.setSelected(Boolean.valueOf(pIn.getProperty("DoChar",Boolean.TRUE.toString())));    DoCharChkStateChanged(new ChangeEvent(DoCharChk));    if (pIn.getProperty("Use","Occurences").equals("Occurences"))     OccurencesChk.setSelected(true); else     DistrosChk.setSelected(true);    CharMinEdt.setValue(Integer.valueOf(pIn.getProperty("CharMin","3")));    CharMaxEdt.setValue(Integer.valueOf(pIn.getProperty("CharMax","3")));    CharDistEdt.setValue(Integer.valueOf(pIn.getProperty("CharDist","3")));    WordMinEdt.setValue(Integer.valueOf(pIn.getProperty("WordMin","1")));    WordMaxEdt.setValue(Integer.valueOf(pIn.getProperty("WordMax","2")));    WordDistEdt.setValue(Integer.valueOf(pIn.getProperty("WordDist","3")));  } catch (  Exception e) {    System.err.println("Could not load settings...");    return;  }  PerformanceTableModel tTmp=new PerformanceTableModel();  DetailedResultsTbl.setModel(tTmp);}  }
class C{  public List<Supplier> loadSuppliers(){  EntityManager em=emf.createEntityManager();  TypedQuery<Supplier> queryBP;  List<Supplier> resBP=null;  try {    em.getTransaction().begin();    queryBP=em.createQuery("SELECT s FROM Supplier s",Supplier.class);    resBP=queryBP.getResultList();    if (resBP.size() > 5) {      logger.info(resBP.size() + " Suppliers already available in the db");    } else {      new XMLParser().readSuppliers(em,"com/sap/espm/model/data/Business_Partners.xml");      em.getTransaction().commit();      queryBP=em.createQuery("SELECT s FROM Supplier s",Supplier.class);      resBP=queryBP.getResultList();      logger.info(resBP.size() + " suppliers loaded into the db");    }  } catch (  Exception e) {    logger.error("Exception occured",e);  } finally {    em.close();  }  return resBP;}  }
class C{  public boolean containsDetailsView(DetailsView detailsView){  return getDisplayArea(detailsView.getTab()) != null;}  }
class C{  @Deprecated public int _INVALID_getDamage(){  return NumberConversions.ceil(getDamage());}  }
class C{  public static final void shuffle(int[] a,int start,int len,Random r){  for (int i=start + len; --i > 0; ) {    int t=a[i], j=r.nextInt(i);    a[i]=a[j];    a[j]=t;  }}  }
class C{  public SpringPlugin(){  this.configFiles=new String[]{"classpath:applicationContext.xml"};}  }
class C{  public static float distance(float eventX,float startX,float eventY,float startY){  float dx=eventX - startX;  float dy=eventY - startY;  return (float)Math.sqrt(dx * dx + dy * dy);}  }
class C{  public boolean oneofScoped(){  return oneof != null;}  }
class C{  final public boolean isMultipart(){  return _multipart;}  }
class C{  public MarketEditQuery deleted(Boolean value){  return unsafeParam("deleted",value);}  }
class C{  public static <L,R>Either<L,R> right(R right){  return new Either<>(null,right,false);}  }
class C{  public String toString(){  return "" + offset;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_STIGMA_EXHAUST(int num0sp){  return new SM_SYSTEM_MESSAGE(1300411,num0sp);}  }
class C{  public PhotosCreateCommentQuery attachments(String... value){  return unsafeParam("attachments",value);}  }
class C{  public DistanceEstimator(Distribution tmSymbolsPerRank,Distribution tmNonSymbolsPerRank,NGramSizeEstimator nseEstimator){  SymbolsPerRank=new Distribution();  SymbolsPerRank.asTreeMap().putAll(tmSymbolsPerRank.asTreeMap());  NonSymbolsPerRank=new Distribution();  NonSymbolsPerRank.asTreeMap().putAll(tmNonSymbolsPerRank.asTreeMap());  MinRank=Math.min((Integer)tmSymbolsPerRank.asTreeMap().firstKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().firstKey());  MaxRank=Math.max((Integer)tmSymbolsPerRank.asTreeMap().lastKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().lastKey());  Estimator=nseEstimator;}  }
class C{  private List<Result> makeLookbackResults(JsonNode jsonResult,Set<DimensionColumn> dimensionColumns,Set<MetricColumn> metricColumns,DateTimeZone dateTimeZone){  List<Result> results=new ArrayList<>();  for (  JsonNode record : jsonResult) {    DateTime timeStamp=new DateTime(record.get("timestamp").asText(),dateTimeZone);    JsonNode result=record.get("result");    LinkedHashMap<MetricColumn,Object> metricValues=extractMetricValues(metricColumns,result);    LinkedHashMap<DimensionColumn,DimensionRow> dimensionRows;    dimensionRows=dimensionColumns == null ? new LinkedHashMap<>() : extractDimensionRows(dimensionColumns,result);    results.add(new Result(dimensionRows,metricValues,timeStamp));  }  return results;}  }
class C{  @Override public void populateExpression(Object objValue){  Double value=defaultValue;  if (objValue instanceof Integer) {    int i=((Integer)objValue).intValue();    value=Double.valueOf((double)i);  } else   if (objValue instanceof Double) {    value=(Double)objValue;  } else   if (objValue instanceof String) {    value=Double.valueOf((String)objValue);  }  populateField(value);}  }
class C{  private String statusAndPermissions(DataApprovalWorkflow workflow,Period period,OrganisationUnit organisationUnit,DataElementCategoryOptionCombo attributeOptionCombo){  DataApprovalStatus status=dataApprovalService.getDataApprovalStatusAndPermissions(workflow,period,organisationUnit,attributeOptionCombo);  DataApprovalPermissions permissions=status.getPermissions();  return status.getState().toString() + " level=" + (status.getApprovedLevel() == null ? "null" : status.getApprovedLevel().getName())+ " approve="+ (permissions.isMayApprove() ? "T" : "F")+ " unapprove="+ (permissions.isMayUnapprove() ? "T" : "F")+ " accept="+ (permissions.isMayAccept() ? "T" : "F")+ " unaccept="+ (permissions.isMayUnaccept() ? "T" : "F")+ " read="+ (permissions.isMayReadData() ? "T" : "F");}  }
class C{  public short[] unCompress(byte[] compInput){  try {    return Snappy.uncompressShortArray(compInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return null;}  }
class C{  private Collection<AssociationsInfo> analyzeAssociations(DataSupport baseObj){  try {    Collection<AssociationsInfo> associationInfos=getAssociationInfo(baseObj.getClassName());    analyzeAssociatedModels(baseObj,associationInfos);    return associationInfos;  } catch (  Exception e) {    throw new DataSupportException(e.getMessage());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATK_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200869,skillcaster,num0,skillname);}  }
class C{  private void drawDownError(Canvas canvas){  if (mIfShowMarkRun) {    final float progress=mProgress;    drawText(canvas,progress);  }  publicPaint.setColor(Color.WHITE);  final Path dst=mDst;  dst.reset();  dst.lineTo(0,0);  pathMeasure1.getSegment(0.2f * mErrorPathLengthLeft,mErrorRightDegree * mErrorPathLengthLeft,dst,true);  canvas.drawPath(dst,publicPaint);  dst.reset();  dst.lineTo(0,0);  pathMeasure2.getSegment(0.2f * mErrorPathLengthRight,mErrorLeftDegree * mErrorPathLengthRight,dst,true);  canvas.drawPath(dst,publicPaint);}  }
class C{  protected void reset(VisualItem item){  item.setVisible(false);  item.setEndVisible(false);  item.setStartStrokeColor(item.getStrokeColor());  item.revertToDefault(VisualItem.STROKECOLOR);  item.revertToDefault(VisualItem.ENDSTROKECOLOR);  item.setStartTextColor(item.getTextColor());  item.revertToDefault(VisualItem.TEXTCOLOR);  item.revertToDefault(VisualItem.ENDTEXTCOLOR);  item.setStartFillColor(item.getFillColor());  item.revertToDefault(VisualItem.FILLCOLOR);  item.revertToDefault(VisualItem.ENDFILLCOLOR);}  }
class C{  public static void releasePbsStream(IThreadLocalResource pbsStream){  pbsStream.release();}  }
class C{  public void addField(FieldState symbolType){  if (symbolType != null) {    FieldConfigBase fieldConfig=symbolType.getConfigField();    Class<?> panelId=symbolType.getClass();    VendorOptionVersion vendorOption=symbolType.getVendorOption();    if (fieldConfig == null) {      ConsoleManager.getInstance().error(this,"FieldConfigSymbolType.addPanel passed a field config as null");    } else {      containingPanel.add(fieldConfig.getPanel(),panelId.getName());      fieldConfigMap.put(panelId,fieldConfig);      vendorOptionMap.put(panelId,vendorOption);      fieldConfig.setExpressionUpdateListener(this);      fieldConfig.setParent(this);    }  }}  }
class C{  private void initWidget(){  SwipeBackLayout swipeBackLayout=(SwipeBackLayout)findViewById(R.id.activity_login_swipeBackLayout);  swipeBackLayout.setOnSwipeListener(this);  StatusBarView statusBar=(StatusBarView)findViewById(R.id.activity_login_statusBar);  if (DisplayUtils.isNeedSetStatusBarMask()) {    statusBar.setBackgroundResource(R.color.colorPrimary_light);    statusBar.setMask(true);  }  this.container=(CoordinatorLayout)findViewById(R.id.activity_login_container);  ImageButton closeBtn=(ImageButton)findViewById(R.id.activity_login_closeBtn);  closeBtn.setOnClickListener(this);  if (Mysplash.getInstance().isLightTheme()) {    closeBtn.setImageResource(R.drawable.ic_close_light);  } else {    closeBtn.setImageResource(R.drawable.ic_close_dark);  }  ImageView icon=(ImageView)findViewById(R.id.activity_login_icon);  Glide.with(this).load(R.drawable.ic_launcher).diskCacheStrategy(DiskCacheStrategy.NONE).into(icon);  DisplayUtils.setTypeface(this,((TextView)findViewById(R.id.activity_login_content)));  Button loginBtn=(Button)findViewById(R.id.activity_login_loginBtn);  loginBtn.setOnClickListener(this);  Button joinBtn=(Button)findViewById(R.id.activity_login_joinBtn);  joinBtn.setOnClickListener(this);  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {    if (Mysplash.getInstance().isLightTheme()) {      loginBtn.setBackgroundResource(R.color.colorTextTitle_light);      joinBtn.setBackgroundResource(R.color.colorPrimaryDark_light);    } else {      loginBtn.setBackgroundResource(R.color.colorTextTitle_dark);      joinBtn.setBackgroundResource(R.color.colorPrimaryDark_dark);    }  } else {    loginBtn.setBackgroundResource(R.drawable.button_login);    joinBtn.setBackgroundResource(R.drawable.button_join);  }  this.buttonContainer=(LinearLayout)findViewById(R.id.activity_login_buttonContainer);  this.progressContainer=(RelativeLayout)findViewById(R.id.activity_login_progressContainer);  progressContainer.setVisibility(View.GONE);}  }
class C{  public String toString(){  return val ? "Integrity.YES" : "Integrity.NO";}  }
class C{  @Override public void bindViewHolder(@NonNull ViewHolder viewHolder,@NonNull String item,int position){  Glide.with(viewHolder.itemView.getContext()).load(item).diskCacheStrategy(DiskCacheStrategy.NONE).into(viewHolder.photo);  viewHolder.itemView.setOnClickListener(null);}  }
class C{  private void init(String[] catalogs,boolean preferPublic){  fCatalogsList=(catalogs != null) ? catalogs.clone() : null;  fPreferPublic=preferPublic;  fResolverCatalogManager=new CatalogManager();  fResolverCatalogManager.setAllowOasisXMLCatalogPI(false);  fResolverCatalogManager.setCatalogClassName("org.apache.xml.resolver.Catalog");  fResolverCatalogManager.setCatalogFiles("");  fResolverCatalogManager.setIgnoreMissingProperties(true);  fResolverCatalogManager.setPreferPublic(fPreferPublic);  fResolverCatalogManager.setRelativeCatalogs(false);  fResolverCatalogManager.setUseStaticCatalog(false);  fResolverCatalogManager.setVerbosity(0);}  }
class C{  static void validateRefSpec(Location location,Map<String,String> env,Path cwd,String refspec) throws EvalException {  try {    executeGit(cwd,ImmutableList.of("check-ref-format","--allow-onelevel","--refspec-pattern",refspec),env,false);  } catch (  BadExitStatusWithOutputException e) {    throw new EvalException(location,"Invalid refspec: " + refspec);  }catch (  CommandException e) {    throw new RuntimeException("Error validating refspec",e);  }}  }
class C{  public ChangeReport(final Change change){  this(change.getChangeId());}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  void reset(){  if (sUidToThrottler != null)   sUidToThrottler.remove(mUid);  mSharedPreferences.edit().remove(SCORE + mUid).remove(LAST_REQUEST + mUid).remove(BANNED_UNTIL + mUid).apply();}  }
class C{  public void insertedNodeFromDOM(Node node){  if (node == null)   return;  if (fInsertNode == node)   return;  if (fInsertedFromRange)   return;  Node parent=node.getParentNode();  if (parent == fStartContainer) {    int index=indexOf(node,fStartContainer);    if (index < fStartOffset) {      fStartOffset++;    }  }  if (parent == fEndContainer) {    int index=indexOf(node,fEndContainer);    if (index < fEndOffset) {      fEndOffset++;    }  }}  }
class C{  @NonNull static String createUniqueFilename(String prefix){  String randomId=Long.toString(System.currentTimeMillis());  return String.format(Locale.US,FILE_NAME_TEMPLATE,prefix,randomId);}  }
class C{  public GetTypeDescriptorActionInfo(){}  }
class C{  public boolean isButtonEnabled(SiteAdminButtons button){  return !getButton(button).findElement(By.xpath(BUTTON_TABLE_PARENT_XPATH)).getAttribute(HtmlTags.Attributes.CLASS).contains(DISABLED_BUTTON_CLASS);}  }
class C{  public StatelessChunkListDataIterator(String entityName,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int chunkSize){  super(entityName,sessionFactory,fetchSize,performOrderById,chunkSize);}  }
class C{  public SVNCompareRevisionsInput(IFile resource,ILogEntry[] logEntries){  super(new CompareConfiguration());  this.resource=resource;  this.logEntries=logEntries;  updateCurrentEdition();  initializeActions();}  }
class C{  public boolean isSelectionFindable(){  return false;}  }
class C{  private void populateAttributeComboBox(){  if (attributeComboBox != null) {    setPopulatingComboBox(true);    Object selectedItem=model.getSelectedItem();    model.removeAllElements();    model.addElement("");    if (attributeNameList != null) {      for (      String attribute : attributeNameList) {        model.addElement(attribute);      }    }    attributeComboBox.setModel(model);    model.setSelectedItem(selectedItem);    setPopulatingComboBox(false);  }}  }
class C{  private char readEscapeCharacter() throws JSONException {  char escaped=in.charAt(pos++);switch (escaped) {case 'u':    if (pos + 4 > in.length()) {      throw syntaxError("Unterminated escape sequence");    }  String hex=in.substring(pos,pos + 4);pos+=4;try {return (char)Integer.parseInt(hex,16);} catch (NumberFormatException nfe) {throw syntaxError("Invalid escape sequence: " + hex);}case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\'':case '"':case '\\':default :return escaped;}}  }
class C{  static CachedModel create(Class<Model> model,Map<Integer,Map<String,PathMapping>> pathmapping,Module module){  CachedModel m=new CachedModel();  m.model=model;  m.pathmapping=pathmapping;  m.module=module;  return m;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200504,skilltarget,skillname);}  }
class C{  public static void show(Activity activity,int resId){  show(activity,resId,LENGTH_SHORT);}  }
class C{  public static String lowerFirst(String s){  if (s.isEmpty()) {    return s;  }  char c=s.charAt(0);  if (Character.isLowerCase(c)) {    return s;  }  c=Character.toLowerCase(c);  return c + s.substring(1);}  }
class C{  public void actionPerformed(ActionEvent ev){  String radius="" + getViewer().getNodeRadius();  radius=JOptionPane.showInputDialog(getViewer().getFrame(),"Enter node radius (0-100)",radius);  if (radius != null && Basic.isInteger(radius) && Integer.parseInt(radius) >= 0)   execute("set nodeRadius=" + radius + ";");}  }
class C{  public int readBytes(byte[] value,int length) throws JMSException {  initializeReading();  if (value == null) {    throw new NullPointerException("Byte buffer is null");  }  if (length < 0 || length > value.length) {    throw new IndexOutOfBoundsException("Illegal byte buffer size. Must be between 0 and value.length.");  }  this.dataIn.mark(Integer.MAX_VALUE);  try {    int n=0;    while (n < length) {      int count=this.dataIn.read(value,n,length - n);      if (count < 0) {        break;      }      n+=count;    }    if (n == 0 && length > 0) {      n=-1;    }    return n;  } catch (  EOFException eof) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageEOFException(eof.toString());    jmsEx.setLinkedException(eof);    throw jmsEx;  }catch (  IOException ioe) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageFormatException("Format error occurred" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public ConstraintTrustVerifier(){}  }
class C{  private final boolean isPostBreak(Item syllable){  return ((syllable.getPrevious() == null) || "pau".equals(postBreakPath.findFeature(syllable)));}  }
class C{  private void invalidateLayouts(){  itemsLayout=null;  valueLayout=null;  scrollingOffset=0;}  }
class C{  public AdsGetCategoriesQuery lang(String value){  return unsafeParam("lang",value);}  }
class C{  public int nextInt(){  if (m_modCount != m_table.getModificationCount())   throw new ConcurrentModificationException();  m_cur=m_rows.nextInt();  return m_cur;}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  private void updateButtonState(boolean enabled){  btnConnect.setEnabled(enabled);  connectionComboBox.setEnabled(enabled);  btnEditConnection.setEnabled(enabled);}  }
class C{  private List<EmailData> createEmailDataList(List<Message> messageList){  List<EmailData> emailDataList=new ArrayList<>();  for (  Message message : messageList) {    EmailData emailData=emailDataFactory.create(message);    emailDataList.add(emailData);  }  return emailDataList;}  }
class C{  public boolean write(byte[] bytes,int offset,int size){  if (line == null) {    return false;  }  int bytesRemaining=size;  int curIndex=offset;  if (firstSample) {    firstSample=false;    timer.stop("firstAudio");    if (audioMetrics) {      timer.getTimer("firstAudio").showTimesShortTitle("");      timer.getTimer("firstAudio").showTimesShort(0);    }  }  debugPrint(" au write " + bytesRemaining + " pos "+ line.getMicrosecondPosition()+ " avail "+ line.available()+ " bsz "+ line.getBufferSize());  while (bytesRemaining > 0 && !isCancelled()) {    if (!waitResume()) {      return false;    }    debugPrint("   queueing cur " + curIndex + " br "+ bytesRemaining);    int bytesWritten;synchronized (lineLock) {      bytesWritten=line.write(bytes,curIndex,Math.min(BYTES_PER_WRITE,bytesRemaining));      if (bytesWritten != bytesWritten) {        debugPrint("RETRY! bw" + bytesWritten + " br "+ bytesRemaining);      }      curIndex+=bytesWritten;      bytesRemaining-=bytesWritten;    }    debugPrint("   wrote " + " cur " + curIndex + " br "+ bytesRemaining+ " bw "+ bytesWritten);  }  return !isCancelled() && !isDone();}  }
class C{  public Builder fadeAnimation(Boolean fadeAnimation){  this.fadeAnimation=fadeAnimation;  return this;}  }
class C{  public FileFooter readFooter() throws IOException {  ThriftReader thriftReader=openThriftReader(filePath);  thriftReader.open();  thriftReader.setReadOffset(offset);  FileFooter footer=(FileFooter)thriftReader.read();  thriftReader.close();  return footer;}  }
class C{  public static Configuration createSubEquipment(){  Configuration configuration=new Configuration();  SubEquipment subEquipment=SubEquipment.create("SE_INI_TEST").id(25L).statusTag(StatusTag.create("SE:STATUS").id(300L).build()).commFaultTag(CommFaultTag.create("SE:Comm").id(301L).build()).aliveTag(AliveTag.create("SE:Alive").id(302L).address(new DataTagAddress()).build(),60000).build();  subEquipment.setEquipmentId(15L);  configuration.addEntity(subEquipment);  return configuration;}  }
class C{  private void compareSurrogateKeyData(List<String> data,Dictionary forwardDictionary){  int surrogateKey=0;  for (int i=0; i < data.size(); i++) {    surrogateKey++;    String dictionaryValue=forwardDictionary.getDictionaryValueForKey(surrogateKey);    assertTrue(data.get(i).equals(dictionaryValue));  }}  }
class C{  private static int byteCompaction(int mode,int[] codewords,Charset encoding,int codeIndex,StringBuilder result){  ByteArrayOutputStream decodedBytes=new ByteArrayOutputStream();  if (mode == BYTE_COMPACTION_MODE_LATCH) {    int count=0;    long value=0;    int[] byteCompactedCodewords=new int[6];    boolean end=false;    int nextCode=codewords[codeIndex++];    while ((codeIndex < codewords[0]) && !end) {      byteCompactedCodewords[count++]=nextCode;      value=900 * value + nextCode;      nextCode=codewords[codeIndex++];      if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      } else {        if ((count % 5 == 0) && (count > 0)) {          for (int j=0; j < 6; ++j) {            decodedBytes.write((byte)(value >> (8 * (5 - j))));          }          value=0;          count=0;        }      }    }    if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) {      byteCompactedCodewords[count++]=nextCode;    }    for (int i=0; i < count; i++) {      decodedBytes.write((byte)byteCompactedCodewords[i]);    }  } else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) {    int count=0;    long value=0;    boolean end=false;    while (codeIndex < codewords[0] && !end) {      int code=codewords[codeIndex++];      if (code < TEXT_COMPACTION_MODE_LATCH) {        count++;        value=900 * value + code;      } else {        if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {          codeIndex--;          end=true;        }      }      if ((count % 5 == 0) && (count > 0)) {        for (int j=0; j < 6; ++j) {          decodedBytes.write((byte)(value >> (8 * (5 - j))));        }        value=0;        count=0;      }    }  }  result.append(new String(decodedBytes.toByteArray(),encoding));  return codeIndex;}  }
class C{  @Override public IBinder onBind(Intent intent){  return null;}  }
class C{  private void decode(byte[] data,int width,int height){  Size size=activity.getCameraManager().getPreviewSize();  byte[] rotatedData=new byte[data.length];  for (int y=0; y < size.height; y++) {    for (int x=0; x < size.width; x++)     rotatedData[x * size.height + size.height - y - 1]=data[x + y * size.width];  }  int tmp=size.width;  size.width=size.height;  size.height=tmp;  Result rawResult=null;  PlanarYUVLuminanceSource source=buildLuminanceSource(rotatedData,size.width,size.height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public Number sum(SelectColumn funcColumn,IQueryResultSet<IEntryPacket> entries) throws SQLException {  if (entries.isEmpty())   return null;  Iterator<IEntryPacket> iter=entries.iterator();  IEntryPacket entry=iter.next();  Number sum=getNumber(entry,funcColumn,entries);  while (iter.hasNext()) {    entry=iter.next();    sum=NumberUtil.add(sum,getNumber(entry,funcColumn,entries),sum.getClass().getName());  }  return sum;}  }
class C{  @Override public void addEntry(CatalogEntry entry){  int type=entry.getEntryType();  if (type == URISUFFIX) {    String suffix=normalizeURI(entry.getEntryArg(0));    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(1,fsi);    catalogManager.debug.message(4,"URISUFFIX",suffix,fsi);  } else   if (type == SYSTEMSUFFIX) {    String suffix=normalizeURI(entry.getEntryArg(0));    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(1,fsi);    catalogManager.debug.message(4,"SYSTEMSUFFIX",suffix,fsi);  }  super.addEntry(entry);}  }
class C{  public static int gcd(final int p,final int q){  int u=p;  int v=q;  if ((u == 0) || (v == 0)) {    if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {      throw MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31",p,q);    }    return Math.abs(u) + Math.abs(v);  }  if (u > 0) {    u=-u;  }  if (v > 0) {    v=-v;  }  int k=0;  while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {    u/=2;    v/=2;    k++;  }  if (k == 31) {    throw MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31",p,q);  }  int t=((u & 1) == 1) ? v : -(u / 2);  do {    while ((t & 1) == 0) {      t/=2;    }    if (t > 0) {      u=-t;    } else {      v=t;    }    t=(v - u) / 2;  } while (t != 0);  return -u * (1 << k);}  }
class C{  private Collection<? extends ClientRequestResult> handleClientRequest(@Valid final ClientRequest clientRequest,final Session session,final Destination replyDestination){switch (clientRequest.getRequestType()) {case TAG_CONFIGURATION_REQUEST:    if (LOG.isDebugEnabled()) {      LOG.debug(String.format("handleClientRequest() - Received a TAG_CONFIGURATION_REQUEST for %d tags (with configuration details).",clientRequest.getIds().size()));    }  return tagrequestHelper.handleTagConfigurationRequest(clientRequest);case APPLY_CONFIGURATION_REQUEST:if (LOG.isDebugEnabled()) {  LOG.debug("handleClientRequest() - Received an APPLY_CONFIGURATION_REQUEST with " + clientRequest.getIds().size() + " configurations.");}return clientConfigurationRequestHandler.handleApplyConfigurationRequest(clientRequest,session,replyDestination);case RETRIEVE_CONFIGURATION_REQUEST:if (LOG.isDebugEnabled()) {LOG.debug("handleClientRequest() - Received a RETRIEVE_CONFIGURATION_REQUEST.");}return clientConfigurationRequestHandler.handleRetrieveConfigurationsRequest(clientRequest,session,replyDestination);case TAG_REQUEST:if (LOG.isDebugEnabled()) {if (clientRequest.getIds().isEmpty()) {LOG.debug(String.format("handleClientRequest() - Received a TAG_REQUEST with %d wildcard(s) for tag name search: %s",clientRequest.getRegexList().size(),clientRequest.getRegexList()));} else {LOG.debug("handleClientRequest() - Received a TAG_REQUEST for " + clientRequest.getIds().size() + " tags.");}}return tagrequestHelper.handleTagRequest(clientRequest);case ALARM_REQUEST:if (LOG.isDebugEnabled()) {LOG.debug("handleClientRequest() - Received an ALARM_REQUEST for " + clientRequest.getIds().size() + " alarms.");}return clientAlarmRequestHandler.handleAlarmRequest(clientRequest);case ACTIVE_ALARMS_REQUEST:if (LOG.isDebugEnabled()) {LOG.debug("handleClientRequest() - Received an ACTIVE_ALARMS_REQUEST.");}return clientAlarmRequestHandler.handleActiveAlarmRequest(clientRequest);case SUPERVISION_REQUEST:if (LOG.isDebugEnabled()) {LOG.debug("handleClientRequest() - Received a SUPERVISION_REQUEST.");}return supervisionFacade.getAllSupervisionStates();case COMMAND_HANDLE_REQUEST:if (LOG.isDebugEnabled()) {LOG.debug("handleClientRequest() - Received a COMMAND_HANDLE_REQUEST for " + clientRequest.getIds().size() + " commands.");}return clientCommandRequestHandler.handleCommandHandleRequest(clientRequest);case EXECUTE_COMMAND_REQUEST:if (LOG.isDebugEnabled()) {LOG.debug("handleClientRequest() - Received an EXECUTE_COMMAND_REQUEST.");}return clientCommandRequestHandler.handleExecuteCommandRequest(clientRequest);case DAQ_XML_REQUEST:if (LOG.isDebugEnabled()) {LOG.debug("handleClientRequest() - Received a DAQ_XML_REQUEST");}return clientProcessRequestHandler.handleDaqXmlRequest(clientRequest);case PROCESS_NAMES_REQUEST:if (LOG.isDebugEnabled()) {LOG.debug("handleClientRequest() - Received a PROCESS_NAMES_REQUEST");}return clientProcessRequestHandler.handleProcessNamesRequest(clientRequest);case DEVICE_CLASS_NAMES_REQUEST:if (LOG.isDebugEnabled()) {LOG.debug("handleClientRequest() - Received a DEVICE_CLASS_NAMES_REQUEST");}return clientDeviceRequestHelper.handleDeviceClassNamesRequest(clientRequest);case DEVICE_REQUEST:if (LOG.isDebugEnabled()) {LOG.debug("handleClientRequest() - Received a DEVICE_REQUEST");}return clientDeviceRequestHelper.handleDeviceRequest(clientRequest);case TAG_STATISTICS_REQUEST:if (LOG.isDebugEnabled()) {LOG.debug("handleClientRequest() - Received a TAG_STATISTICS_REQUEST");}return tagrequestHelper.handleTagStatisticsRequest(clientRequest);default :LOG.error("handleClientRequest() - Client request not supported: " + clientRequest.getRequestType());return Collections.emptyList();}}  }
class C{  private void updateGraph(){  graph.clear();  Map<String,Node> className2Node=new HashMap<>();  for (  String className1 : getChartData().getClassNames()) {    int prevalenceOfClass1=0;    for (    String series : getChartData().getSeriesNames()) {      double percentage=100.0 * getChartData().getValue(series,className1).doubleValue() / getChartData().getTotalForSeries(series);      if (percentage >= getMinThreshold())       prevalenceOfClass1++;    }    double prevalencePercentage=100.0 * prevalenceOfClass1 / (double)getChartData().getNumberOfSeries();    if (prevalencePercentage >= getMinPrevalence() && prevalencePercentage <= getMaxPrevalence()) {      Node v=graph.newNode();      NodeData nodeData=new NodeData();      nodeData.setLabel(className1);      v.setData(nodeData);      className2Node.put(className1,v);      nodeData.setPrevalence(prevalenceOfClass1);    }  }  for (Node v=graph.getFirstNode(); v != null; v=v.getNext()) {    String className1=((NodeData)v.getData()).getLabel();    for (Node w=v.getNext(); w != null; w=w.getNext()) {      String className2=((NodeData)w.getData()).getLabel();      Set<String> intersection=new HashSet<>();      Set<String> union=new HashSet<>();      for (      String series : getChartData().getSeriesNames()) {        double total=getChartData().getTotalForSeries(series);        double percentage1=100.0 * getChartData().getValue(series,className1).doubleValue() / total;        double percentage2=100.0 * getChartData().getValue(series,className2).doubleValue() / total;        if (percentage1 >= getMinThreshold() || percentage2 >= getMinThreshold()) {          union.add(series);        }        if (percentage1 > getMinThreshold() && percentage2 >= getMinThreshold()) {          intersection.add(series);        }      }      if (union.size() > 0) {        double probabilityPercent=(100.0 * (double)intersection.size() / (double)union.size());        if (probabilityPercent >= getMinProbability()) {          Edge e=graph.newEdge(className2Node.get(className1),className2Node.get(className2));          graph.setInfo(e,(double)intersection.size() / (double)union.size());        }      }    }  }}  }
class C{  private boolean matchValue(Collection<?> collection,int tokenIndex){  if (tokenIndex == _tokens.length)   return match(collection,getExpectedValue());  return matchCollectionItemNestedProperty(collection,tokenIndex);}  }
class C{  public String toString(){  return "null";}  }
class C{  public void populateContextForRequest(HttpServletRequest request,HttpServletResponse response,ServletContext servletContext){  populateContextForRequest(context,this,request,response,servletContext);}  }
class C{  public void clear(){  fromDir=null;  fromExt=null;  bList.removeAllElements();  hasChanged=true;}  }
class C{  public void timeoutOccured(Collection<WatchedObject> bucket) throws Exception {  SocketAddress serverAddress=null;  SocketChannel socketChannel=null;  long startInvocationVersion=-1;  try {    socketChannel=SocketChannel.open();    LRMIUtilities.initNewSocketProperties(socketChannel);    Socket newSock=socketChannel.socket();    WatchedObject watched=bucket.iterator().next();    startInvocationVersion=watched.getVersion();    serverAddress=watched.getSocket().socket().getRemoteSocketAddress();    if (serverAddress == null)     throw new IOException("Watched socket was already closed: " + watched.getSocket().socket());    final int localPort=watched.getSocket().socket().getLocalPort();    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"Attempting to create a new socket to the ServerEndPoint [" + serverAddress + "], local port["+ localPort+ "]");    socketChannel.configureBlocking(true);    long absoluteTimeout=SystemTime.timeMillis() + _inspectResponseTimeout;    newSock.connect(serverAddress,_INSPECT_TIMEOUT);    handleOpenSocket(socketChannel,localPort,absoluteTimeout,watched.getClient());    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,getValidConnectionMessage(serverAddress));    watched.startWatch();  } catch (  IOException e) {    close(bucket,serverAddress,e,startInvocationVersion);  } finally {    if (socketChannel != null)     socketChannel.close();  }}  }
class C{  public boolean postScale(float sx,float sy){  Matrix matrix=new Matrix();  matrix.setValues(new float[]{sx,0,0,0,sy,0,0,0,1});  Matrix current=new Matrix();  current.setValues(MATRIX);  matrix.preConcat(current);  set(matrix);  return true;}  }
class C{  public static void playWavFile(String filename,int loop,boolean waitUntilCompleted){  AudioInputStream audioInputStream=null;  File clipFile=new File(filename);  try {    audioInputStream=AudioSystem.getAudioInputStream(clipFile);  } catch (  Exception e) {    e.printStackTrace();  }  if (audioInputStream != null) {    AudioFormat format=audioInputStream.getFormat();    DataLine.Info info=new DataLine.Info(Clip.class,format);    try {      m_clip=(Clip)AudioSystem.getLine(info);      m_clip.open(audioInputStream);    } catch (    LineUnavailableException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }    m_clip.loop(loop);    if (waitUntilCompleted)     m_clip.drain();  } else {    System.out.println("playWavFile<init>(): can't get data from file " + clipFile.getName());  }}  }
class C{  public static IBaseResourceStorageFactory current(){  return currentFactory;}  }
class C{  @Override protected void synchronizeData(){  needsSyncData(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument();  name=ownerDocument.getNodeName(fNodeIndex);  ownerDocument.getNodeType(fNodeIndex);  publicId=ownerDocument.getNodeValue(fNodeIndex);  systemId=ownerDocument.getNodeURI(fNodeIndex);  int extraDataIndex=ownerDocument.getNodeExtra(fNodeIndex);  ownerDocument.getNodeType(extraDataIndex);  baseURI=ownerDocument.getNodeName(extraDataIndex);}  }
class C{  public void addException(Access node){  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();  list.addChild(node);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PARTY_LOOTING_CHANGED_RULE(String value0,String value1,String value2){  return new SM_SYSTEM_MESSAGE(1390250,value0,value1,value2);}  }
class C{  public UsersGetQuery nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public static Diphone loadBinary(ByteBuffer bb) throws IOException {  StringBuffer sb=new StringBuffer();  int midPoint;  int numSamples;  Sample[] samples;  if (bb.getInt() != MAGIC) {    throw new Error("Bad magic number in diphone");  }  for (int i=0; i < NAME_LENGTH; i++) {    char c=bb.getChar();    if (!Character.isWhitespace(c)) {      sb.append(c);    }  }  midPoint=bb.getInt();  numSamples=bb.getInt();  samples=new Sample[numSamples];  for (int i=0; i < numSamples; i++) {    samples[i]=Sample.loadBinary(bb);  }  return new Diphone(sb.toString().trim(),samples,midPoint);}  }
class C{  public static int diff(FeatureVector v1,FeatureVector v2){  int ret=0;  if (v1.byteValuedDiscreteFeatures.length < v2.byteValuedDiscreteFeatures.length) {    throw new RuntimeException("v1 and v2 don't have the same number of byte-valued features: [" + v1.byteValuedDiscreteFeatures.length + "] versus ["+ v2.byteValuedDiscreteFeatures.length+ "].");  }  for (int i=0; i < v1.byteValuedDiscreteFeatures.length; i++) {    if (v1.byteValuedDiscreteFeatures[i] == v2.byteValuedDiscreteFeatures[i])     ret++;  }  if (v1.shortValuedDiscreteFeatures.length < v2.shortValuedDiscreteFeatures.length) {    throw new RuntimeException("v1 and v2 don't have the same number of short-valued features: [" + v1.shortValuedDiscreteFeatures.length + "] versus ["+ v2.shortValuedDiscreteFeatures.length+ "].");  }  for (int i=0; i < v1.shortValuedDiscreteFeatures.length; i++) {    if (v1.shortValuedDiscreteFeatures[i] == v2.shortValuedDiscreteFeatures[i])     ret++;  }  return (ret);}  }
class C{  public boolean isNonEscapingElement(String tagName){  int i;  if (_nonEscapingElements == null) {    return false;  }  for (i=0; i < _nonEscapingElements.length; ++i)   if (_nonEscapingElements[i].equals(tagName))   return true;  return false;}  }
class C{  private static void createNodeVsBlockMapping(List<NodeBlockRelation> flattenedList,Map<String,List<Distributable>> nodeAndBlockMapping){  for (  NodeBlockRelation nbr : flattenedList) {    String node=nbr.getNode();    List<Distributable> list;    if (null == nodeAndBlockMapping.get(node)) {      list=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);      list.add(nbr.getBlock());      Collections.sort(list);      nodeAndBlockMapping.put(node,list);    } else {      list=nodeAndBlockMapping.get(node);      list.add(nbr.getBlock());      Collections.sort(list);    }  }}  }
class C{  private boolean isCharType(Field field){  String type=field.getType().getName();  return type.equals("char") || type.endsWith("Character");}  }
