class C{  private long generateRandomDelay(){  long delay;  int numFailedAttempts=getNumFailedAttempts();  if (numFailedAttempts == 0) {    delay=Math.min(mBaseMilliseconds,mMaxMilliseconds);  } else {    int backoffCoefficient=computeConstrainedBackoffCoefficient(numFailedAttempts);    delay=Math.min(backoffCoefficient * mBaseMilliseconds,mMaxMilliseconds);  }  SharedPreferences preferences=getSharedPreferences();  preferences.edit().putLong(PREFERENCE_DELAY,delay).apply();  return delay;}  }
class C{  private MarshObject compressObject(Object objToCompress) throws IOException {  CompressedMarshObjectConvertor cv=null;  try {    cv=_compressedConvertorPool.getResource();    MarshObject cmo=cv.getMarshObject(objToCompress);    return cmo;  }  finally {    if (cv != null) {      _compressedConvertorPool.freeResource(cv);    }  }}  }
class C{  private static int[][] findReferences(final List<Vector3D> vertices,final List<int[]> facets){  final int[] nbFacets=new int[vertices.size()];  int maxFacets=0;  for (  final int[] facet : facets) {    if (facet.length < 3) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.WRONG_NUMBER_OF_POINTS,3,facet.length,true);    }    for (    final int index : facet) {      maxFacets=FastMath.max(maxFacets,++nbFacets[index]);    }  }  final int[][] references=new int[vertices.size()][maxFacets];  for (  int[] r : references) {    Arrays.fill(r,-1);  }  for (int f=0; f < facets.size(); ++f) {    for (    final int v : facets.get(f)) {      int k=0;      while (k < maxFacets && references[v][k] >= 0) {        ++k;      }      references[v][k]=f;    }  }  return references;}  }
class C{  private void addDimensions(List<DimensionalObject> dimensions){  for (  DimensionalObject dim : dimensions) {    addDimension(dim);  }}  }
class C{  public static Bitmap rotate(Bitmap bitmap,int degrees){  if (bitmap != null && degrees != 0) {    Matrix matrix=new Matrix();    matrix.postRotate(degrees);    bitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);  }  return bitmap;}  }
class C{  public QueryPlan query(String tableName) throws DatabaseException {  assert (this.active);  checkAndGrabSharedLock(tableName);  return new QueryPlan(this,tableName);}  }
class C{  public static boolean isValidPassword(@NonNull String password){  return !TextUtils.isEmpty(password) && password.length() >= 8 && !(Pattern.compile(PASSWORD_REGEX).matcher(password).matches());}  }
class C{  public JsonRequestParams(Object... keysAndValues){  int len=keysAndValues.length;  if (len % 2 != 0)   throw new IllegalArgumentException("Supplied arguments must be even");  for (int i=0; i < len; i+=2) {    if (!(keysAndValues[i] instanceof CharSequence)) {      throw new IllegalArgumentException("invalid key,the type of key must be String " + keysAndValues[i]);    }    String key=String.valueOf(keysAndValues[i]);    put(key,keysAndValues[i + 1]);  }}  }
class C{  public static boolean isInvalid(int c){  return !isValid(c);}  }
class C{  public void spin(){  isSpinning=true;  spinHandler.sendEmptyMessage(0);}  }
class C{  public boolean isManaged(){  return org.tigris.subversion.svnclientadapter.utils.SVNStatusUtils.isManaged(getTextStatus());}  }
class C{  public static boolean updateGradlePluginVersion(@NotNull Project project,@NotNull String pluginVersion,@Nullable String gradleVersion){  return updateGradlePluginVersion(project,pluginVersion,gradleVersion,false);}  }
class C{  public static Map<String,Object> updateContactMech(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  boolean isModified=false;  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_UPDATE");  if (result.size() > 0)   return result;  String newCmId=null;  try {    newCmId=delegator.getNextSeqId("ContactMech");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_id_generation_failure",locale));  }  String contactMechId=(String)context.get("contactMechId");  GenericValue contactMech=null;  GenericValue partyContactMech=null;  try {    contactMech=EntityQuery.use(delegator).from("ContactMech").where("contactMechId",contactMechId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    contactMech=null;  }  if (!partyId.equals("_NA_")) {    try {      partyContactMech=EntityQuery.use(delegator).from("PartyContactMech").where("partyId",partyId,"contactMechId",contactMechId).orderBy("fromDate").filterByDate().queryFirst();      if (partyContactMech == null) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.cannot_update_specified_contact_info_not_corresponds",locale));      } else {        toBeStored.add(partyContactMech);      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      contactMech=null;    }  }  if (contactMech == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_find_specified_contact_info_read",locale));  }  String contactMechTypeId=contactMech.getString("contactMechTypeId");  GenericValue newContactMech=GenericValue.create(contactMech);  GenericValue newPartyContactMech=GenericValue.create(partyContactMech);  if ("POSTAL_ADDRESS".equals(contactMechTypeId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.service_updateContactMech_not_be_used_for_POSTAL_ADDRESS",locale));  } else   if ("TELECOM_NUMBER".equals(contactMechTypeId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.service_updateContactMech_not_be_used_for_TELECOM_NUMBER",locale));  } else {    newContactMech.set("infoString",context.get("infoString"));  }  newPartyContactMech.set("roleTypeId",context.get("roleTypeId"));  newPartyContactMech.set("allowSolicitation",context.get("allowSolicitation"));  if (!newContactMech.equals(contactMech))   isModified=true;  if (!newPartyContactMech.equals(partyContactMech))   isModified=true;  toBeStored.add(newContactMech);  toBeStored.add(newPartyContactMech);  if (isModified) {    newContactMech.set("contactMechId",newCmId);    newPartyContactMech.set("contactMechId",newCmId);    newPartyContactMech.set("fromDate",now);    newPartyContactMech.set("thruDate",null);    try {      Iterator<GenericValue> partyContactMechPurposes=UtilMisc.toIterator(partyContactMech.getRelated("PartyContactMechPurpose",null,null,false));      while (partyContactMechPurposes != null && partyContactMechPurposes.hasNext()) {        GenericValue tempVal=GenericValue.create(partyContactMechPurposes.next());        tempVal.set("contactMechId",newCmId);        toBeStored.add(tempVal);      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));    }    partyContactMech.set("thruDate",now);    try {      delegator.storeAll(toBeStored);    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));    }  } else {    result.put("newContactMechId",contactMechId);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resourceError,"contactmechservices.no_changes_made_not_updating",locale));    return result;  }  result.put("newContactMechId",newCmId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public static short quantize(float f,float fMin,float fRange){  return ((short)(((double)f - (double)fMin) * 65535.0 / (fRange) - 32768.0));}  }
class C{  public List<Entry> filter(List<Entry> points,double tolerance){  if (tolerance <= 0)   return points;  keep=new boolean[points.size()];switch (mType) {case DOUGLAS_PEUCKER:    return reduceWithDouglasPeuker(points,tolerance);case NONE:  return points;default :return points;}}  }
class C{  private boolean regTryGetProxy(LocatorReg reg){  boolean b=reg.tryGetProxy();synchronized (this) {    if (!undiscoveredLocators.contains(reg)) {      return true;    }    if (!b) {      return false;    }    undiscoveredLocators.remove(reg);    discoveredLocators.add(reg);    if (!listeners.isEmpty()) {      addNotify((ArrayList)listeners.clone(),mapRegToGroups(reg.proxy,reg.memberGroups),false);    }    return true;  }}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  @Override protected void checkProperty(String propertyId) throws XMLConfigurationException {  if (propertyId.startsWith(Constants.XERCES_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.XERCES_PROPERTY_PREFIX.length();    if (suffixLength == Constants.SCHEMA_LOCATION.length() && propertyId.endsWith(Constants.SCHEMA_LOCATION)) {      return;    }    if (suffixLength == Constants.SCHEMA_NONS_LOCATION.length() && propertyId.endsWith(Constants.SCHEMA_NONS_LOCATION)) {      return;    }  }  if (propertyId.startsWith(Constants.JAXP_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.JAXP_PROPERTY_PREFIX.length();    if (suffixLength == Constants.SCHEMA_SOURCE.length() && propertyId.endsWith(Constants.SCHEMA_SOURCE)) {      return;    }  }  super.checkProperty(propertyId);}  }
class C{  public static int extractReadsByFViewer(final String cName,final ProgressListener progressListener,final Collection<Integer> classIds,final String outDirectory,final String outFileName,final Document doc) throws IOException, CanceledException {  final Classification classification=ClassificationManager.get(cName,true);  Map<Integer,String> classId2Name=new HashMap<>();  Map<Integer,Collection<Integer>> classId2Descendants=new HashMap<>();  for (  Integer id : classIds) {    classId2Name.put(id,classification.getName2IdMap().get(id));    classId2Descendants.put(id,classification.getFullTree().getAllDescendants(id));  }  return extractReads(progressListener,cName,classIds,classId2Name,classId2Descendants,outDirectory,outFileName,doc,true);}  }
class C{  public static void closeWriter(){  try {    if (writer != null) {      writer.flush();      writer.close();      writer=null;    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysDodge_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200938,skilltarget,skillcaster,skillname);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200674,skillcaster,skillname);}  }
class C{  public String loadFile(String sID){  return getDocumentText(sID,true);}  }
class C{  public Z(double x,double y){  re=x;  im=y;}  }
class C{  public double estimateCost(double effortApplied,double averageWage){  double estimatedCost=effortApplied * (averageWage / 12) * 1.8;  return estimatedCost;}  }
class C{  protected void markTabStateInitialized(){  mTabStateInitialized=true;  for (  TabModelSelectorObserver listener : mObservers)   listener.onTabStateInitialized();}  }
class C{  public static boolean checkTypeMirrorInheritance(TypeMirror enclosingType,String parentClass,Types types){  if (parentClass.equals(enclosingType.toString())) {    return true;  }  List<? extends TypeMirror> supertypes=types.directSupertypes(enclosingType);  if (supertypes.size() > 0) {    if (checkTypeMirrorInheritance(supertypes.get(0),parentClass,types)) {      return true;    }  }  return false;}  }
class C{  public Builder maxLengthPerLine(int val){  maxLengthPerLine=val;  return this;}  }
class C{  public void clear(){  fLength=0;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1788) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  protected SparseFieldVector(SparseFieldVector<T> v,int resize){  field=v.field;  virtualSize=v.getDimension() + resize;  entries=new OpenIntToFieldHashMap<T>(v.entries);}  }
class C{  static public char[] encode(byte[] data){  char[] out=new char[((data.length + 2) / 3) * 4];  for (int i=0, index=0; i < data.length; i+=3, index+=4) {    boolean quad=false;    boolean trip=false;    int val=(0xFF & (int)data[i]);    val<<=8;    if ((i + 1) < data.length) {      val|=(0xFF & (int)data[i + 1]);      trip=true;    }    val<<=8;    if ((i + 2) < data.length) {      val|=(0xFF & (int)data[i + 2]);      quad=true;    }    out[index + 3]=alphabet[(quad ? (val & 0x3F) : 64)];    val>>=6;    out[index + 2]=alphabet[(trip ? (val & 0x3F) : 64)];    val>>=6;    out[index + 1]=alphabet[val & 0x3F];    val>>=6;    out[index + 0]=alphabet[val & 0x3F];  }  return out;}  }
class C{  public Result start() throws LoginFailedException, RemoteServerException {  Builder builder=StartGymBattleMessageOuterClass.StartGymBattleMessage.newBuilder();  for (  Pokemon team : teams) {    builder.addAttackingPokemonIds(team.getId());  }  List<PokemonDataOuterClass.PokemonData> defenders=gym.getDefendingPokemon();  builder.setGymId(gym.getId());  builder.setPlayerLongitude(api.getLongitude());  builder.setPlayerLatitude(api.getLatitude());  builder.setDefendingPokemonId(defenders.get(0).getId());  ServerRequest serverRequest=new ServerRequest(RequestType.START_GYM_BATTLE,builder.build());  api.getRequestHandler().sendServerRequests(serverRequest);  try {    battleResponse=StartGymBattleResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException();  }  this.sendBlankAction();  for (  BattleAction action : battleResponse.getBattleLog().getBattleActionsList()) {    gymIndex.add(action.getTargetIndex());  }  return battleResponse.getResult();}  }
class C{  public String newSessionId(HttpServletRequest request,long created){synchronized (this) {    String requested_id=request.getRequestedSessionId();    if (requested_id != null) {      String cluster_id=getClusterId(requested_id);      if (idInUse(cluster_id))       return cluster_id;    }    String new_id=(String)request.getAttribute(__NEW_SESSION_ID);    if (new_id != null && idInUse(new_id))     return new_id;    String id=null;    while (id == null || id.length() == 0 || idInUse(id)) {      long r=_weakRandom ? (hashCode() ^ Runtime.getRuntime().freeMemory() ^ _random.nextInt()^ (((long)request.hashCode()) << 32)) : _random.nextLong();      r^=created;      if (request != null && request.getRemoteAddr() != null)       r^=request.getRemoteAddr().hashCode();      if (r < 0)       r=-r;      id=Long.toString(r,36);      if (_workerName != null) {        id=_workerName + id;      }    }    request.setAttribute(__NEW_SESSION_ID,id);    return id;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Aura_END_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200612,skillcaster,skillname);}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  protected TrieNode add(Symbol[] entry,int index){  if (index == entry.length) {    this.isFinal=true;    return this;  }  Integer labelId=label2id.get(entry[index]);  if (null == labelId) {    labelId=labels.size();    labels.add(entry[index]);    label2id.put(entry[index],labelId);  }  TrieNode successor=this.labelId2node.get(labelId);  if (null == successor) {    successor=new TrieNode(this,label2id,labels);    this.labelId2node.put(labelId,successor);  }  return successor.add(entry,index + 1);}  }
class C{  public SyntaxException(String msg){  super(msg);}  }
class C{  public boolean containsPairWithAllFourIntersections(){  for (int s=1; s <= size(); s++) {    Split S=getSplit(s);    for (int t=s + 1; t <= size(); t++) {      Split T=getSplit(t);      if (S.getA().intersects(T.getA()) && S.getA().intersects(T.getB()) && S.getB().intersects(T.getA())&& S.getB().intersects(T.getB()))       return true;    }  }  return false;}  }
class C{  public static double information(double[] probabilities){  double total=0.0;  for (  double d : probabilities) {    total+=(-1.0 * log2(d) * d);  }  return total;}  }
class C{  public boolean matches(Line.Info info){  if (!(super.matches(info))) {    return false;  }  if (!(name.equals(((Info)info).getName()))) {    return false;  }  return isSource == ((Info)info).isSource();}  }
class C{  @Override public int hashCode(){  return (getClass().getName() + Name).hashCode();}  }
class C{  public static boolean isMac(){  return (OS.indexOf("mac") >= 0);}  }
class C{  public void addClassPath(PathPart pathPart){  classPath.add(pathPart);  pathPart.program=this;}  }
class C{  public static ProbeItemDescriptor discreteLineFillItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue){  return discreteOutlineItem(name,description,formatter,dataFactor,minValue,maxValue,DEFAULT_LINE_WIDTH,DEFAULT_COLOR,DEFAULT_COLOR);}  }
class C{  public void endStatement(){  for (  TransactionLifecycleListener l : lifecycleListeners)   l.onTxEndStatement(this);}  }
class C{  private static int computeBlastFrame(int frame){  return frame <= 2 ? frame + 1 : 2 - frame;}  }
class C{  public void printBaseTable(ScoutWidget[] list){  System.out.println("----------------- CENTER TABLE --------------------");  final int SIZE=10;  String padd=new String(new char[SIZE]).replace('\0',' ');  System.out.print(" ");  for (int i=0; i < len; i++) {    String dbg="[" + i + "] "+ list[i]+ "-------------------------";    if (i == 0) {      dbg=padd + dbg.substring(0,20);    } else {      dbg=dbg.substring(0,20);    }    System.out.print(dbg + ((i == len - 1) ? "\n" : ""));  }  String str="[";  for (int con=0; con < len * 2; con++) {    int opposite=con & 0x1;    str+=(con / 2 + ((opposite == 0) ? "->" : "<-") + "           ").substring(0,10);  }  String header=("Connection " + padd).substring(0,SIZE);  System.out.println(header + " " + str);  for (int i=1; i < len; i++) {    if (mProbability[i] == null) {      continue;    }    for (int dir=0; dir < mProbability[i].length; dir++) {      System.out.println(Utils.leftTrim(padd + i + " "+ Direction.toString(dir),SIZE) + " " + Utils.toS(mProbability[i][dir]));      System.out.println(padd + " " + Utils.toS(mMargin[i][dir]));    }  }}  }
class C{  @deprecated public final void reset(char[] chars,int start,int count){  if (chars == null) {    chars=this.emptyCharArray;  }  this.text=chars;  reset(start,count);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_INTERVAL_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200658,skillcaster,num0,skillname);}  }
class C{  public void updateAllSteps(){  Runnable batch=myBatchQueue.poll();  while (batch != null) {    batch.run();    batch=myBatchQueue.poll();  }}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  private String verifyRestoreCode(String restoreCode,String code){  if (code == null) {    return "code_parameter_is_null";  }  if (restoreCode == null) {    return "account_restore_code_is_null";  }  boolean validCode=passwordManager.matches(code,restoreCode);  return validCode ? null : "code_does_not_match_restoreCode - code: '" + code + "' restoreCode: '"+ restoreCode+ "'";}  }
class C{  public WallPostQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static float min(float a,float b){  return (a <= b) ? a : b;}  }
class C{  @Deprecated public static void track(String path,Object marker,FileDeleteStrategy deleteStrategy){  theInstance.track(path,marker,deleteStrategy);}  }
class C{  public static CompilerSettings defaultNoAccountingSettings(){  return defaultSettings().withCPUAccountingMode(CPUAccountingMode.NO_CPU_ACCOUNTING);}  }
class C{  public static ULong ulong(BigInteger value) throws NumberFormatException {  return ULong.valueOf(value);}  }
class C{  public int findLastCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,true,false);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public boolean isNull(String key){  LazyNode token=getFieldToken(key);  if (token.type == LazyNode.VALUE_NULL)   return true;  return false;}  }
class C{  public synchronized ZooKeeperClientBuilder connectionTimeoutMs(int connectionTimeoutMs){  this.conectionTimeoutMs=connectionTimeoutMs;  return this;}  }
class C{  public BoardOpenTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId){  super(client,"board.openTopic",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  topicId(topicId);}  }
class C{  public static void pa(Rot P,Zmat A,int ii1,int ii2,int jj1,int jj2){  double t1r, t1i, t2r, t2i;  A.dirty=true;  int i1=ii1 - A.basex;  int i2=ii2 - A.basex;  int j1=jj1 - A.basex;  int j2=jj2 - A.basex;  for (int j=j1; j <= j2; j++) {    t1r=P.c * A.re[i1][j] + P.sr * A.re[i2][j] - P.si * A.im[i2][j];    t1i=P.c * A.im[i1][j] + P.sr * A.im[i2][j] + P.si * A.re[i2][j];    t2r=P.c * A.re[i2][j] - P.sr * A.re[i1][j] - P.si * A.im[i1][j];    t2i=P.c * A.im[i2][j] - P.sr * A.im[i1][j] + P.si * A.re[i1][j];    A.re[i1][j]=t1r;    A.im[i1][j]=t1i;    A.re[i2][j]=t2r;    A.im[i2][j]=t2i;  }}  }
class C{  public static RunReviewFragment newInstance(String startLabelId,int sensorIndex,boolean createTask){  RunReviewFragment fragment=new RunReviewFragment();  Bundle args=new Bundle();  args.putString(ARG_START_LABEL_ID,startLabelId);  args.putInt(ARG_SENSOR_INDEX,sensorIndex);  args.putBoolean(ARG_CREATE_TASK,createTask);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("move dir=down;");}  }
class C{  public static void showCode(Instruction inst,cp_info constant_pool[]){  showCode(inst,0,constant_pool);}  }
class C{  private final IEntryHolder extendLeasePeriod(String entryUid,String className,int objectType,long duration,boolean fromReplication,boolean origin,boolean leaseExpired,OperationID operationID,boolean isFromGatway) throws UnknownLeaseException, InternalSpaceException {  IEntryHolder entry=null;  Context context=null;  ILockObject entryLock=null;  boolean non_evictable=false;  boolean cancelLease=(duration == LeaseUtils.DISCARD_LEASE);  long original_time=0;  try {    context=_cacheManager.getCacheContext();    context.setFromReplication(fromReplication);    context.setOperationID(operationID);    context.setFromGateway(isFromGatway);    long currentTime=SystemTime.timeMillis();    long timeToCheck=getEffectiveEntryLeaseTime(currentTime);    if (!_cacheManager.isEvictableCachePolicy() || objectType != ObjectTypes.ENTRY) {      entry=objectType == ObjectTypes.ENTRY ? _cacheManager.getEntry(context,entryUid,className,null,false,false,true) : _cacheManager.getTemplate(entryUid);      non_evictable=true;      if (entry == null || entry.isExpired(timeToCheck)) {        String reason="Failed to " + getExtendLeasePeriodDescription(leaseExpired,cancelLease) + " entry's lease of class "+ className+ " and uid "+ entryUid+ (entry == null ? " as it is no longer present in space " : "")+ " (may have been already expired or canceled).";        throw new UnknownLeaseException(reason);      }    }    boolean extended=false;    entryLock=non_evictable ? _cacheManager.getLockManager().getLockObject(entry,!non_evictable) : _cacheManager.getLockManager().getLockObject(entryUid);synchronized (entryLock) {      try {        if (_cacheManager.isEvictableCachePolicy() && objectType == ObjectTypes.ENTRY) {          if (cancelLease) {            if (_cacheManager.requiresEvictionReplicationProtection() && _cacheManager.getEvictionReplicationsMarkersRepository().isEntryEvictable(entryUid,false))             throw new UnknownLeaseException("entry in markers repository- cannot be cancelled.");            IEntryCacheInfo pe=_cacheManager.getPEntryByUid(entryUid);            if (pe == null) {              String reason="Failed to " + getExtendLeasePeriodDescription(leaseExpired,cancelLease) + " entry's lease of class "+ className+ " and uid "+ entryUid+ (entry == null ? " as it is no longer present in space " : "")+ " (may have been already expired canceled or evicted).";              throw new UnknownLeaseException(reason);            }            if (_engine.isExpiredEntryStayInSpace(pe.getEntryHolder(_cacheManager)) && pe.isPinned())             throw new UnknownLeaseException("entry is pinned- cannot be cancelled.");          }          entry=_cacheManager.getEntry(context,entryUid,className,null,true,true,_cacheManager.isCacheExternalDB());        } else {          if (entry.isOffHeapEntry()) {            entry=_cacheManager.getEntry(context,entry,true,true,true);          }        }        if (entry == null || entry.isDeleted() || entry.isExpired(timeToCheck)) {          String reason="Failed to " + getExtendLeasePeriodDescription(leaseExpired,cancelLease) + " entry's lease "+ (entry == null ? " as it is no longer present in space " : (entry.isDeleted() ? " as it is already deleted inside the space " : ""))+ "(entry may have been already expired or canceled).";          throw new UnknownLeaseException(reason);        }        if (objectType == ObjectTypes.ENTRY && entry.getWriteLockOwner() != null) {          XtnStatus status=entry.getWriteLockOwner().getStatus();          if (status != XtnStatus.COMMITED && status != XtnStatus.ROLLED)           throw new UnknownLeaseException("Failed to " + getExtendLeasePeriodDescription(leaseExpired,cancelLease) + " entry's lease, entry is write-locked under an ongoing transaction.");        }        boolean shouldReplicate=false;        if (entry instanceof NotifyTemplateHolder) {          NotifyTemplateHolder template=(NotifyTemplateHolder)entry;          XtnEntry xtnEntry=template.getXidOriginated();          if (xtnEntry != null && !xtnEntry.m_Active)           throw new UnknownLeaseException("Failed to " + getExtendLeasePeriodDescription(leaseExpired,cancelLease) + " template's lease: Non-active transaction.");          if (_engine.isReplicated() && !fromReplication) {            shouldReplicate=template.isReplicateNotify();          }          if (cancelLease) {            _cacheManager.removeTemplate(context,template,fromReplication,origin,false,leaseExpired ? SpaceEngine.TemplateRemoveReasonCodes.LEASE_EXPIRED : SpaceEngine.TemplateRemoveReasonCodes.LEASE_CANCEL);            return template;          }        } else {          boolean ofReplicableClass=false;          if (_engine.isReplicated()) {            IServerTypeDesc typeDesc=_typeManager.getServerTypeDesc(entry.getClassName());            ReplicationOperationType oper=cancelLease ? ReplicationOperationType.LEASE_EXPIRATION : ReplicationOperationType.EXTEND_LEASE;            shouldReplicate=_engine.shouldReplicate(oper,typeDesc,false,fromReplication);            ofReplicableClass=typeDesc.getTypeDesc().isReplicable();          }          if (cancelLease) {            _engine.removeEntrySA(context,entry,fromReplication,origin,ofReplicableClass,leaseExpired ? SpaceEngine.EntryRemoveReasonCodes.LEASE_EXPIRED : SpaceEngine.EntryRemoveReasonCodes.LEASE_CANCEL,false,false,false);            return entry;          }        }        original_time=entry.getEntryData().getExpirationTime();        entry.setExpirationTime(toAbsoluteTime(duration));        if (entry.isOffHeapEntry())         ((IOffHeapEntryHolder)entry).setDirty(_cacheManager);        _cacheManager.extendLeasePeriod(context,entry.getEntryData().getExpirationTime(),original_time,entryUid,className,objectType,shouldReplicate,origin);        extended=true;      }  finally {        if (extended && objectType == ObjectTypes.ENTRY && _cacheManager.mayNeedEntriesUnpinning())         _cacheManager.unpinIfNeeded(context,entry,null,null);      }    }  } catch (  SAException ex) {    JSpaceUtilities.throwLeaseInternalSpaceException(ex.toString(),ex);  } finally {    if (entryLock != null)     _cacheManager.getLockManager().freeLockObject(entryLock);    if (context != null) {      try {        _engine.performReplication(context);      }  finally {        _cacheManager.freeCacheContext(context);      }    }  }  return entry;}  }
class C{  public static boolean isPackageInstalled(Context context,String packageName){  if (!TextUtils.isEmpty(packageName)) {    try {      PackageInfo packageInfo=context.getPackageManager().getPackageInfo(packageName,0);      return packageInfo != null;    } catch (    PackageManager.NameNotFoundException e) {    }  }  return false;}  }
class C{  public boolean isShiftDown(){  return mIsShiftDown;}  }
class C{  private void showPanel(String selectedItem){  CardLayout cl=(CardLayout)(outerPanel.getLayout());  cl.show(outerPanel,selectedItem);}  }
class C{  public Matrix plusEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] + B.A[i][j];    }  }  return this;}  }
class C{  public T initializeStep(final boolean forward,final int order,final T[] scale,final FieldODEStateAndDerivative<T> state0,final FieldEquationsMapper<T> mapper) throws MathIllegalArgumentException, MathIllegalStateException {  if (initialStep.getReal() > 0) {    return forward ? initialStep : initialStep.negate();  }  final T[] y0=state0.getCompleteState();  final T[] yDot0=state0.getCompleteDerivative();  T yOnScale2=getField().getZero();  T yDotOnScale2=getField().getZero();  for (int j=0; j < scale.length; ++j) {    final T ratio=y0[j].divide(scale[j]);    yOnScale2=yOnScale2.add(ratio.multiply(ratio));    final T ratioDot=yDot0[j].divide(scale[j]);    yDotOnScale2=yDotOnScale2.add(ratioDot.multiply(ratioDot));  }  T h=(yOnScale2.getReal() < 1.0e-10 || yDotOnScale2.getReal() < 1.0e-10) ? getField().getZero().add(1.0e-6) : yOnScale2.divide(yDotOnScale2).sqrt().multiply(0.01);  if (!forward) {    h=h.negate();  }  final T[] y1=MathArrays.buildArray(getField(),y0.length);  for (int j=0; j < y0.length; ++j) {    y1[j]=y0[j].add(yDot0[j].multiply(h));  }  final T[] yDot1=computeDerivatives(state0.getTime().add(h),y1);  T yDDotOnScale=getField().getZero();  for (int j=0; j < scale.length; ++j) {    final T ratioDotDot=yDot1[j].subtract(yDot0[j]).divide(scale[j]);    yDDotOnScale=yDDotOnScale.add(ratioDotDot.multiply(ratioDotDot));  }  yDDotOnScale=yDDotOnScale.sqrt().divide(h);  final T maxInv2=MathUtils.max(yDotOnScale2.sqrt(),yDDotOnScale);  final T h1=maxInv2.getReal() < 1.0e-15 ? MathUtils.max(getField().getZero().add(1.0e-6),h.abs().multiply(0.001)) : maxInv2.multiply(100).reciprocal().pow(1.0 / order);  h=MathUtils.min(h.abs().multiply(100),h1);  h=MathUtils.max(h,state0.getTime().abs().multiply(1.0e-12));  h=MathUtils.max(minStep,MathUtils.min(maxStep,h));  if (!forward) {    h=h.negate();  }  return h;}  }
class C{  public LazyObject optJSONObject(String key) throws LazyException {  LazyNode token=getOptionalFieldToken(key);  if (token == null)   return null;  if (token.type == LazyNode.VALUE_NULL)   return null;  if (token.type != LazyNode.OBJECT)   throw new LazyException("Requested value is not an object",token);  return new LazyObject(token,cbuf);}  }
class C{  public static void drawSnapIndicator(ViewTransform transform,Graphics2D g,SnapCandidate candidate){  if (candidate.source == null || candidate.target == null) {    return;  }  if (candidate.source.isVerticalAnchor()) {    drawSnapVerticalIndicator(transform,g,candidate);  } else {    drawSnapHorizontalIndicator(transform,g,candidate);  }}  }
class C{  private ConfigurationReportConverter(){}  }
class C{  public static Charset toCharset(String charset){  return charset == null ? Charset.defaultCharset() : Charset.forName(charset);}  }
class C{  public boolean hasData(){  return (dataStore != null) || (gridCoverageReader != null);}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  public UserImplementor(UserModel model,UserView view){  this.model=model;  this.view=view;}  }
class C{  public static void register(String name,AbstractChannel<?> channel){  channels.put(name,channel);}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  public boolean do_mhp(){  return soot.PhaseOptions.getBoolean(options,"do-mhp");}  }
class C{  private void addApplicationCallbackMethods(){  if (!this.callbackFunctions.containsKey(applicationClass.getName()))   return;  if (applicationClass.isAbstract())   return;  if (applicationClass.isPhantom()) {    System.err.println("Skipping possible application callbacks in " + "phantom class " + applicationClass);    return;  }  for (  String methodSig : this.callbackFunctions.get(applicationClass.getName())) {    SootMethodAndClass methodAndClass=SootMethodRepresentationParser.v().parseSootMethodString(methodSig);    if (AndroidEntryPointConstants.getApplicationLifecycleMethods().contains(methodAndClass.getSubSignature()))     continue;    SootMethod method=findMethod(Scene.v().getSootClass(methodAndClass.getClassName()),methodAndClass.getSubSignature());    if (method == null)     continue;    if (method.getDeclaringClass().getName().startsWith("android.") || method.getDeclaringClass().getName().startsWith("java."))     continue;    Local local=this.localVarsForClasses.get(methodAndClass.getClassName());    if (local == null) {      System.err.println("Could not create call to application callback " + method.getSignature() + ". Local was null.");      continue;    }    JNopStmt thenStmt=new JNopStmt();    createIfStmt(thenStmt);    buildMethodCall(method,body,local,generator);    body.getUnits().add(thenStmt);  }}  }
class C{  public AudioGetQuery audioIds(Integer... value){  return unsafeParam("audio_ids",value);}  }
class C{  public VideoEditQuery name(String value){  return unsafeParam("name",value);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  public ClearModifiers remove(ClearModifiers modifiers){  return createIfNeeded(super.remove(modifiers));}  }
class C{  private void updateHierarchyKeyGenerators(Map<String,KeyGenerator> keyGenerators,Map<String,int[]> hirches,int[] dimLens,String[] dimCols){  String timeHierNameVal="";  if (meta.getCarbonTime() == null || "".equals(meta.getCarbonTime())) {    timeHierNameVal="";  } else {    String[] hies=meta.getCarbonTime().split(":");    timeHierNameVal=hies[1];  }  Iterator<Entry<String,int[]>> itr=hirches.entrySet().iterator();  while (itr.hasNext()) {    Entry<String,int[]> hieEntry=itr.next();    int[] a=hieEntry.getValue();    int[] lens=new int[a.length];    String name=hieEntry.getKey();    if (name.equalsIgnoreCase(timeHierNameVal)) {      for (int i=0; i < a.length; i++) {        lens[i]=dimLens[a[i]];      }    } else {      String[] columns=meta.hierColumnMap.get(name);      if (meta.getComplexTypes().get(columns[0]) != null) {        continue;      }      boolean isNoDictionary=false;      for (int i=0; i < a.length; i++) {        if (null != meta.noDictionaryCols && isDimensionNoDictionary(meta.noDictionaryCols,columns[i])) {          isNoDictionary=true;          break;        }      }      if (isNoDictionary) {        continue;      }      for (int i=0; i < a.length; i++) {        int newIndex=-1;        for (int j=0; j < dimCols.length; j++) {          if (checkDimensionColName(dimCols[j],columns[i])) {            newIndex=j;            break;          }        }        lens[i]=dimLens[newIndex];      }    }    KeyGenerator generator=KeyGeneratorFactory.getKeyGenerator(lens);    keyGenerators.put(name,generator);  }  Iterator<Entry<String,GenericDataType>> complexMap=meta.getComplexTypes().entrySet().iterator();  while (complexMap.hasNext()) {    Entry<String,GenericDataType> complexDataType=complexMap.next();    List<GenericDataType> primitiveTypes=new ArrayList<GenericDataType>();    complexDataType.getValue().getAllPrimitiveChildren(primitiveTypes);    for (    GenericDataType eachPrimitive : primitiveTypes) {      KeyGenerator generator=KeyGeneratorFactory.getKeyGenerator(new int[]{-1});      keyGenerators.put(eachPrimitive.getName(),generator);    }  }}  }
class C{  @Override public void innerDelete(){  InstanceImpl<?,?> parent=this;  Set<CastingImpl> castings=parent.castings();  deleteNode();  for (  CastingImpl casting : castings) {    Set<RelationImpl> relations=casting.getRelations();    getMindmapsGraph().getConceptLog().putConcept(casting);    for (    RelationImpl relation : relations) {      getMindmapsGraph().getConceptLog().putConcept(relation);      relation.cleanUp();    }    casting.deleteNode();  }}  }
class C{  long decreaseItemCount(Item item,long count,ItemUpdateType updateType,Player actor){  return decreaseItemCount(item,count,updateType,QuestStatus.NONE,actor);}  }
class C{  public WriteEntriesSpaceOperationResult(){}  }
class C{  public void onLongPress(long time,float x,float y){  final StripLayoutTab clickedTab=getTabAtPosition(x);  if (clickedTab != null && clickedTab.checkCloseHitTest(x,y)) {    clickedTab.setClosePressed(false);    mRenderHost.requestRender();    showTabMenu(clickedTab);  } else {    resetResizeTimeout(false);    startReorderMode(time,x,x);  }}  }
class C{  @Override protected Map<String,Set<String>> filterQueryParamsByKey(QueryParamsParserContext context,String queryKey){  Map<String,Set<String>> filteredQueryParams=new HashMap<>();  for (  String paramName : context.getParameterNames()) {    if (paramName.startsWith(queryKey)) {      filteredQueryParams.put(paramName,parseDelimitedParameters(context.getParameterValue(paramName)));    }  }  return filteredQueryParams;}  }
class C{  public boolean runAfter(List tasks,int size){  return false;}  }
class C{  public static NumericEntityEscaper below(final int codepoint){  return outsideOf(codepoint,Integer.MAX_VALUE);}  }
class C{  public Chat(ITextComponent message,ICommandSender sender,Side side){  super(message,side);  this.sender=sender;}  }
class C{  public void init(){  verticalStepperFormLayout.initialiseVerticalStepperForm(this);}  }
class C{  public SymbolTable(){  this(TABLE_SIZE,0.75f);}  }
class C{  private boolean hasLogTypeFilters(){  return logDisabledTypesMask != 0;}  }
class C{  public void pathValuesToPixel(List<Path> paths){  for (int i=0; i < paths.size(); i++) {    pathValueToPixel(paths.get(i));  }}  }
class C{  public final void copy(byte[] bytes,int offset,int length){  if (this.bytes == null || this.bytes.length < length) {    this.bytes=new byte[length];  }  System.arraycopy(bytes,offset,this.bytes,0,length);  this.count=length;}  }
class C{  @NotNull public DetectFaceAction detectFace(boolean returnFaceId,boolean returnFaceLandmarks,@NotNull EnumSet<FaceAttributes> returnFaceAttributes,@NotNull InputStream image){  return new DetectFaceAction(cognitiveContext,returnFaceId,returnFaceLandmarks,returnFaceAttributes,image);}  }
class C{  public static PkgInfo recvPackage(InputStream in,byte expect_cmd,long expect_body_len) throws IOException {  PkgHeader header=recvHeader(in,expect_cmd,expect_body_len);  if (header.status != 0) {    return new PkgInfo(header,null);  }  byte[] body=new byte[header.body_len];  int totalBytes=0;  int remainBytes=header.body_len;  int bytes;  while (totalBytes < header.body_len) {    if ((bytes=in.read(body,totalBytes,remainBytes)) < 0) {      break;    }    totalBytes+=bytes;    remainBytes-=bytes;  }  if (totalBytes != header.body_len) {    throw new IOException("recv package size " + totalBytes + " != "+ header.body_len);  }  return new PkgInfo(header,body);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public void onException(final JMSException exception){  LOGGER.error("JMSException caught by JMS connection exception listener. Attempting to reconnect.",exception);  startReconnectThread();}  }
class C{  public MultiBufferProductScan(Scan lhsScan,TableInfo ti,Transaction tx){  this.lhsScan=lhsScan;  this.ti=ti;  this.tx=tx;  fileSize=ti.open(tx,true).fileSize();  chunkSize=BufferNeeds.bestFactor(fileSize,tx);  beforeFirst();}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=null;    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),null);    message.sendToTarget();  }}  }
class C{  boolean parseHeader(String aLine) throws IOException {  referenceLine=aLine;  int index=aLine.indexOf(vsString);  if (index <= 0) {    index=aLine.indexOf(noHitString);    if (index <= 0)     throw new IOException("Token 'vs' or 'NO HIT' not found in line: " + aLine); else     isNoHit=true;  }  readName=aLine.substring(aLine.charAt(0) == '>' ? 1 : 0,index).trim();  if (isNoHit)   return false;  String suffix=aLine.substring(index + vsString.length(),aLine.length()).trim();  index=suffix.indexOf(" ");  if (index <= 0)   throw new IOException("Token ' ' not found after ' vs ' in line: " + aLine);  referenceName=suffix.substring(0,index).trim();  suffix=suffix.substring(index + 1,suffix.length()).trim();  String[] tokens=suffix.split(" ");  if (tokens[0].startsWith(bitsString) && Basic.isFloat(tokens[0].substring(bitsString.length())))   bitScore=Float.parseFloat(tokens[0].substring(bitsString.length())); else   throw new IOException("Failed to parse  '" + bitsString + "' in: "+ aLine);  if (tokens[1].startsWith(evalueString) && Basic.isFloat(tokens[1].substring(evalueString.length())))   expected=(float)Math.pow(10,Float.parseFloat(tokens[1].substring(evalueString.length()))); else   if (tokens[1].startsWith(evalueStringAlt) && Basic.isFloat(tokens[1].substring(evalueStringAlt.length())))   expected=(float)Math.pow(10,Float.parseFloat(tokens[1].substring(evalueStringAlt.length()))); else   throw new IOException("Failed to parse '" + evalueString + "' or '"+ evalueStringAlt+ "' in: "+ aLine);  if (tokens[2].startsWith(identityString) && Basic.isFloat(tokens[2].substring(identityString.length(),tokens[2].length() - 1)))   identity=Float.parseFloat(tokens[2].substring(identityString.length(),tokens[2].length() - 1)); else   throw new IOException("Failed to parse '" + identityString + "' in: "+ aLine);  if (tokens[3].startsWith(lengthString) && Basic.isInteger(tokens[3].substring(lengthString.length())))   length=Integer.parseInt(tokens[3].substring(lengthString.length())); else   if (tokens[3].startsWith(lengthStringAlt) && Basic.isInteger(tokens[3].substring(lengthStringAlt.length())))   length=Integer.parseInt(tokens[3].substring(lengthStringAlt.length())); else   throw new IOException("Failed to parse '" + lengthString + "' or '"+ lengthStringAlt+ "' in: "+ aLine);  if (tokens[6].startsWith(frameString) && Basic.isInteger(tokens[6].substring(frameString.length()))) {    int f=Integer.parseInt(tokens[6].substring(frameString.length()));    if (f < 3)     frame=f + 1; else     frame=f - 6;  } else   throw new IOException("Failed to parse '" + frameString + "' in: "+ aLine);  return true;}  }
class C{  public void remove(int offset,int length){  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  if (offset == 0) {    System.arraycopy(_data,length,_data,0,_pos - length);  } else   if (_pos - length == offset) {  } else {    System.arraycopy(_data,offset + length,_data,offset,_pos - (offset + length));  }  _pos-=length;}  }
class C{  public void onNetConnected(NetUtils.NetType type){}  }
class C{  @Override protected short compareDates(DateTimeData date1,DateTimeData date2,boolean strict){  short resultA, resultB=INDETERMINATE;  resultA=compareOrder(date1,date2);  if (resultA == 0) {    return 0;  }  DateTimeData[] result=new DateTimeData[2];  result[0]=new DateTimeData(null,this);  result[1]=new DateTimeData(null,this);  DateTimeData tempA=addDuration(date1,DATETIMES[0],result[0]);  DateTimeData tempB=addDuration(date2,DATETIMES[0],result[1]);  resultA=compareOrder(tempA,tempB);  if (resultA == INDETERMINATE) {    return INDETERMINATE;  }  tempA=addDuration(date1,DATETIMES[1],result[0]);  tempB=addDuration(date2,DATETIMES[1],result[1]);  resultB=compareOrder(tempA,tempB);  resultA=compareResults(resultA,resultB,strict);  if (resultA == INDETERMINATE) {    return INDETERMINATE;  }  tempA=addDuration(date1,DATETIMES[2],result[0]);  tempB=addDuration(date2,DATETIMES[2],result[1]);  resultB=compareOrder(tempA,tempB);  resultA=compareResults(resultA,resultB,strict);  if (resultA == INDETERMINATE) {    return INDETERMINATE;  }  tempA=addDuration(date1,DATETIMES[3],result[0]);  tempB=addDuration(date2,DATETIMES[3],result[1]);  resultB=compareOrder(tempA,tempB);  resultA=compareResults(resultA,resultB,strict);  return resultA;}  }
class C{  public static java.sql.Time toSqlTime(int hour,int minute,int second){  java.util.Date newDate=toDate(0,0,0,hour,minute,second);  if (newDate != null) {    return new java.sql.Time(newDate.getTime());  } else {    return null;  }}  }
class C{  public void clear(){  mSize=0;}  }
class C{  public AemDropdown selectByPartialText(String text){  if (text == null) {    return this;  }  expandDropdown();  getItemByTextContaining(text).click();  return this;}  }
class C{  protected void checkFeature(String featureId) throws XMLConfigurationException {  if (!fRecognizedFeatures.contains(featureId)) {    if (fParentSettings != null) {      fParentSettings.getFeature(featureId);    } else {      short type=XMLConfigurationException.NOT_RECOGNIZED;      throw new XMLConfigurationException(type,featureId);    }  }}  }
class C{  private Data<Input,Output> derive_(Input input){  Data<Input,Output> result=new Data<>(input,fn_.apply(input));  recent_.set(result);  return result;}  }
class C{  public MessagesMarkAsReadQuery startMessageId(Integer value){  return unsafeParam("start_message_id",value);}  }
class C{  public static void registerEntity(Class<? extends Entity> entityClass,String entityName,int trackingRange,int updateFrequency,boolean sendsVelocityUpdates){  EntityRegistry.registerModEntity(entityClass,entityName,availableEntityId,BWMod.instance,trackingRange,updateFrequency,sendsVelocityUpdates);  availableEntityId++;}  }
class C{  public synchronized void end(Component component){  this.active=false;  this.offset=null;  this.beginPosition=null;  component.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  public VideoHideCatalogSectionQuery hideCatalogSection(UserActor actor,int sectionId){  return new VideoHideCatalogSectionQuery(getClient(),actor,sectionId);}  }
class C{  public static void convert(String inFileName,String outFileName) throws IOException {  ESTTrackReader etr=new ESTTrackReader(inFileName);  float[][] lpc=convertData(etr.getFrames());  ESTTrackWriter etw=new ESTTrackWriter(etr.getTimes(),lpc,"lpc");  etw.doWriteAndClose(outFileName,etr.isBinary(),etr.isBigEndian());}  }
class C{  public static double distance(S2Point p1,S2Point p2){  return Vector3D.angle(p1.vector,p2.vector);}  }
class C{  protected BoardCreateCommentQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public static EnumValue create(EnumType parent,EnumValueDescriptorProto proto,String path){  return new EnumValue(parent,proto,path);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();  String name=ProgramProperties.get(MeganProperties.FINDTAXON,"");  name=JOptionPane.showInputDialog(inspectorWindow.getFrame(),"Enter taxon name or Id",name);  if (name != null && name.trim().length() > 0) {    name=name.trim();    ProgramProperties.put(MeganProperties.FINDTAXON,name);    executeImmediately("show taxon='" + name + "';");  }}  }
class C{  protected LeadsCompleteQuery vkSid(String value){  return unsafeParam("vk_sid",value);}  }
class C{  protected AdsGetTargetingStatsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  @Override public void endConditional(Augmentations augs) throws XNIException {}  }
class C{  public void startPreview(){  if (mCamera != null && !mPreviewing) {    mCamera.startPreview();    mPreviewing=true;  }}  }
class C{  public static int pairBytesToHashcode(byte[] pairBytes){  return (pairBytes[0] & 0xFF) << 8 | (pairBytes[1] & 0xFF);}  }
class C{  public boolean declaresMethod(String subsignature){  checkLevel(SIGNATURES);  return declaresMethod(Scene.v().getSubSigNumberer().findOrAdd(subsignature));}  }
class C{  public static double fro(Zmat A,int ii1,int ii2,int jj1,int jj2){  int i, i1, i2, j, j1, j2;  double fac, nrm, scale;  i1=ii1 - A.basex;  i2=ii2 - A.basex;  j1=jj1 - A.basex;  j2=jj2 - A.basex;  scale=0.0;  for (i=i1; i <= i2; i++) {    for (j=j1; j <= j2; j++) {      scale=Math.max(scale,Math.abs(A.re[i][j]) + Math.abs(A.im[i][j]));    }  }  if (scale == 0) {    return 0.0;  }  if (scale < 1) {    scale=scale * 1.0e20;  }  scale=1 / scale;  nrm=0;  for (i=i1; i <= i2; i++) {    for (j=j1; j <= j2; j++) {      fac=scale * A.re[i][j];      nrm=nrm + fac * fac;      fac=scale * A.im[i][j];      nrm=nrm + fac * fac;    }  }  return Math.sqrt(nrm) / scale;}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  @Override public void onAliveTimerExpiration(final Long aliveTimerId){  if (aliveTimerId == null) {    LOGGER.warn("onAliveTimerExpiration(null) called - ignoring the call.");    return;  }  AliveTimer aliveTimer=aliveTimerCache.getCopy(aliveTimerId);  StringBuffer msg=new StringBuffer("Alive of ");  msg.append(aliveTimer.getAliveTypeDescription() + " ");  msg.append(aliveTimer.getRelatedName());  msg.append(" (alive tag: ");  msg.append(aliveTimer.getId());  msg.append(") has expired.");  LOGGER.debug(msg.toString());  if (aliveTimer.getRelatedId() == null) {    LOGGER.error("AliveTimer has not relatedId - unable to take any action on alive reception.");  } else {    try {      final Long processId=processFacade.getProcessIdFromAlive(aliveTimer.getId());      if (aliveTimer.isProcessAliveType()) {        onProcessDown(processId,new Timestamp(System.currentTimeMillis()),msg.toString());      } else {        if (aliveTimer.isEquipmentAliveType()) {          Long equipmentId=aliveTimer.getRelatedId();          Timestamp timestamp=new Timestamp(System.currentTimeMillis());          onEquipmentDown(equipmentId,timestamp,msg.toString());          ControlTag commFaultTag=controlTagCache.getCopy(equipmentCache.getCopy(equipmentId).getCommFaultTagId());          setCommFaultTag(commFaultTag.getId(),false,commFaultTag.getValueDescription(),timestamp);          for (          Long subEquipmentId : equipmentCache.get(equipmentId).getSubEquipmentIds()) {            String message="Alive timer for parent Equipment expired: " + msg.toString();            onSubEquipmentDown(subEquipmentId,timestamp,message);            commFaultTag=controlTagCache.getCopy(subEquipmentCache.getCopy(subEquipmentId).getCommFaultTagId());            setCommFaultTag(commFaultTag.getId(),false,commFaultTag.getValueDescription(),timestamp);          }        } else {          Long subEquipmentId=aliveTimer.getRelatedId();          Timestamp timestamp=new Timestamp(System.currentTimeMillis());          onSubEquipmentDown(subEquipmentId,timestamp,msg.toString());          ControlTag commFaultTag=controlTagCache.getCopy(subEquipmentCache.getCopy(subEquipmentId).getCommFaultTagId());          setCommFaultTag(commFaultTag.getId(),false,commFaultTag.getValueDescription(),timestamp);        }      }    } catch (    CacheElementNotFoundException cacheEx) {      LOGGER.error("Unable to locate a required element within the cache on Alive Timer expiration.",cacheEx);    }catch (    NullPointerException nullEx) {      LOGGER.error("NullPointer exception caught on Alive Timer expiration.",nullEx);    }catch (    IllegalArgumentException argEx) {      LOGGER.error("IllegalArgument exception caught on Aliver Timer expiration",argEx);    }  }}  }
class C{  public static PacketFormat generateFromString(String str,List<Integer> ids){  PacketFormat pf=new PacketFormat();  str=str.trim();  int i=0;  if (str.charAt(i) == '(') {    List<PartType> idparts=new FastList<PartType>();    while (str.charAt(i) != ')') {      if (str.charAt(i) == ' ') {        i++;        if (i >= str.length())         return null;      }      PartType type=PartTypeManager.getInstance().getType(str.substring(i,i + 1));      if (type != null)       idparts.add(type); else       return null;      i++;      if (i >= str.length())       return null;    }    pf.addIdPartsAtBegining(idparts,ids);  } else   return null;  while (i < str.length()) {    if (str.charAt(i) != '[') {      i++;      for (      Part part : parseForString(str.substring(i,str.substring(i).indexOf(']')))) {        pf.getDataFormat().getMainBlock().addPart(part);        while (str.charAt(i) == ' ') {          i++;          if (i >= str.length())           return null;        }        i++;        if (i >= str.length())         return null;      }    } else     if (str.charAt(i) == ' ') {      i++;      if (i >= str.length())       return null;    } else {      PartType type=PartTypeManager.getInstance().getType(str.substring(i,i + 1));      if (type != null)       pf.getDataFormat().getMainBlock().addPart(new Part(type,-1,"","","")); else       return null;      i++;      if (i >= str.length())       return null;    }  }  return pf;}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  if (datePicker != null) {    expression=getFilterFactory().literal(getStringValue());  }  return expression;}  }
class C{  public final synchronized String resolveURI(String uri) throws IOException {  if (fCatalogsChanged) {    parseCatalogs();    fCatalogsChanged=false;  }  return (fCatalog != null) ? fCatalog.resolveURI(uri) : null;}  }
class C{  public static void open(@NotNull Project project){  updateLastProjectLocation(project.getBasePath());  if (WindowManager.getInstance().isFullScreenSupportedInCurrentOS()) {    IdeFocusManager instance=IdeFocusManager.findInstance();    IdeFrame lastFocusedFrame=instance.getLastFocusedFrame();    if (lastFocusedFrame instanceof IdeFrameEx) {      boolean fullScreen=((IdeFrameEx)lastFocusedFrame).isInFullScreen();      if (fullScreen) {        project.putUserData(SHOULD_OPEN_IN_FULL_SCREEN,TRUE);      }    }  }  ProjectManagerEx.getInstanceEx().openProject(project);}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0.00240506434076,0.0190372444310,0.0417464784322,0.0736683145538,0.125355951380,0.00240506434076,0.0190372444310,0.0417464784322,0.0736683145538,0.125355951380};}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_overview);  TelephonyManager telephonyManager=((TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE));  networkOperator=telephonyManager.getNetworkOperatorName();  if (savedInstanceState != null) {    peerList=(ArrayList<Peer>)savedInstanceState.getSerializable("peers");    System.out.println("New peerlist: " + peerList);  } else {    peerList=new ArrayList<>();  }  incomingList=new ArrayList<>();  outgoingList=new ArrayList<>();  hashId=getId();  ((TextView)findViewById(R.id.peer_id)).setText(hashId.toString().substring(0,4));  wanVote=new WanVote();  outBuffer=ByteBuffer.allocate(BUFFER_SIZE);  mWanVote=(TextView)findViewById(R.id.wanvote);  mActivePeers=(TextView)findViewById(R.id.active_peers);  mConnectablePeers=(TextView)findViewById(R.id.connectable_peers);  mConnectableRatio=(TextView)findViewById(R.id.connectable_ratio);  initExitButton();  try {    channel=DatagramChannel.open();    channel.socket().bind(new InetSocketAddress(DEFAULT_PORT));  } catch (  IOException e) {    e.printStackTrace();  }  updateConnectionType();  addInitialPeer();  startListenThread();  startSendThread();  showLocalIpAddress();  initPeerLists();  if (savedInstanceState != null) {    updatePeerLists();  }}  }
class C{  void flush(){  boolean hasFailed=false;  int numberOfFailures=0;  do {    try {      persistResources();    } catch (    Exception e) {      hasFailed=true;      numberOfFailures++;      if (!(numberOfFailures < numberOfRetries))       throw new RuntimeException(ErrorMessage.BULK_PERSIST.getMessage(resourceTypeId,e.getMessage()),e);    }  } while (hasFailed);  resourcesToPersist.clear();  currentNumberOfVertices=0;}  }
class C{  public DateColumn(){  this(Date.class,0,10,0L);}  }
class C{  public void add(String key,String value){  if (key != null && value != null) {    Object params=urlParamsWithObjects.get(key);    if (params == null) {      params=new HashSet<String>();      this.put(key,params);    }    if (params instanceof List) {      ((List<Object>)params).add(value);    } else     if (params instanceof Set) {      ((Set<Object>)params).add(value);    }  }}  }
class C{  private static void populate(){  geometryMap.put(Point.class,GeometryTypeEnum.POINT);  geometryMap.put(MultiPoint.class,GeometryTypeEnum.POINT);  geometryMap.put(LineString.class,GeometryTypeEnum.LINE);  geometryMap.put(MultiLineString.class,GeometryTypeEnum.LINE);  geometryMap.put(Polygon.class,GeometryTypeEnum.POLYGON);  geometryMap.put(MultiPolygon.class,GeometryTypeEnum.POLYGON);}  }
class C{  @Override public ASEntityDeclaration createASEntityDeclaration(String name) throws DOMException {  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}  }
class C{  public MessagesGetHistoryAttachmentsQuery fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  @Override public void onShadowUpdate(String jsonState){  super.onShadowUpdate(jsonState);}  }
class C{  public Builder proxyPort(int proxyPort){  this._proxyPort=proxyPort;  return this;}  }
class C{  @deprecated protected int writeValueAndType(boolean hasValue,int value,int node){}  }
class C{  public PhotosGetUploadServerQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  private static String encodeMetricFilters(String metricString,Map<String,String> mapper){  String finalString=metricString;  int counter=0;  int startIndex=0;  int endIndex=0;  for (int i=0; i < metricString.length(); i++) {    char currentChar=metricString.charAt(i);    startIndex=(currentChar == '(' && counter == 0) ? i : startIndex;    counter=(currentChar == '(') ? counter + 1 : counter;    if (currentChar == ')') {      endIndex=i;      counter=counter - 1;    }    if (counter == 0 && startIndex != 0) {      String filterString=metricString.substring(startIndex,endIndex + 1);      finalString=finalString.replace(filterString,"-" + startIndex);      mapper.put("-" + startIndex,filterString);      startIndex=0;    }  }  return finalString;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcDPHeal_Instant_HEAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201237,skillcaster,num0,skillname);}  }
class C{  public String toString(){  return "ClientMaxPrincipal" + Constraint.toString(principals);}  }
class C{  public MessagesSendQuery forwardMessages(List<String> value){  return unsafeParam("forward_messages",value);}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  @Override public void keyReleased(KeyEvent e){synchronized (keyLock) {    keysDown.remove(e.getKeyCode());  }}  }
class C{  public Edge addChildEdge(Node parent,Node child){  nodeCheck(parent,true);  nodeCheck(child,true);  return getEdge(addChildEdge(parent.getRow(),child.getRow()));}  }
class C{  public static boolean isTime(String time){  if (isEmpty(time))   return defaultEmptyOK;  String hour;  String minute;  String second;  int timeColon1=time.indexOf(":");  int timeColon2=time.lastIndexOf(":");  if (timeColon1 <= 0)   return false;  hour=time.substring(0,timeColon1);  if (timeColon1 == timeColon2) {    minute=time.substring(timeColon1 + 1);    second="0";  } else {    minute=time.substring(timeColon1 + 1,timeColon2);    second=time.substring(timeColon2 + 1);  }  return isTime(hour,minute,second);}  }
class C{  public static RuleKey forPlainTarget(Label label){  return new RuleKey(label);}  }
class C{  public int increment(){  lock.lock();  int newValue=++value;  lock.unlock();  return newValue;}  }
class C{  public String read(){  switchToTextArea();  try {    return webDriver.findElement(By.xpath(".//body")).getText();  }  finally {    frameSwitcher.switchTo("/$cq");  }}  }
class C{  public MessagesSetChatPhotoQuery(VkApiClient client,UserActor actor,String file){  super(client,"messages.setChatPhoto",SetChatPhotoResponse.class);  accessToken(actor.getAccessToken());  file(file);}  }
class C{  public UtilsResolveScreenNameQuery(VkApiClient client,String screenName){  super(client,"utils.resolveScreenName",DomainResolved.class);  screenName(screenName);}  }
class C{  public boolean isDirty() throws SVNException {  if (getStatusFromCache().isDirty()) {    return true;  }  ISVNLocalResource[] children=(ISVNLocalResource[])members(new NullProgressMonitor(),ALL_UNIGNORED_MEMBERS);  for (int i=0; i < children.length; i++) {    if (children[i].isDirty() || children[i].getStatusFromCache().isMissing() || (children[i].exists() && !children[i].isManaged())) {      return true;    }  }  return false;}  }
class C{  public void editRow(int index){  Row r=getRowValue(index);  EditSourceDialog input=showEditDialog(r.mySource);  if (input.isOK()) {    removeRow(index);    createSource(input.getUrl(),input.getUiName());  }}  }
class C{  public EscapedWriter(Writer fos){  super(fos);}  }
class C{  public static void drawCenteredString(Graphics2D g,Rectangle rect,String str){  UIUtil.drawCenteredString(g,rect,str);}  }
class C{  public Element generateSimpleElement(final Document document,final Object pojo,final List<String> attributes) throws ParserConfigurationException, IllegalAccessException, InstantiationException {  return generateSimpleElement(document,pojo.getClass().getSimpleName(),pojo,attributes);}  }
class C{  public ParseLayer(ConversionData data){  this.data=data;  instance=this;}  }
class C{  public PickRequest withRequestType(final int pRequestType){  this.mRequestType=pRequestType;  return this;}  }
class C{  public void write(String id,String bundle){  SQLiteDatabase db=this.getWritableDatabase();  ContentValues values=new ContentValues();  values.put(KEY_ID,id);  values.put(KEY_BUNDLE,bundle);  db.replace(TABLE_BUNDLES,null,values);  db.close();}  }
class C{  private double doRemove(int index){  keys[index]=0;  states[index]=REMOVED;  final double previous=values[index];  values[index]=missingEntries;  --size;  ++count;  return previous;}  }
class C{  public static RegexSpacePredicate regex(String pattern){  return new RegexSpacePredicate(pattern);}  }
class C{  private void computeVectors(Matrix3f mat,Vector3f vect,int index1,int index2,int index3){  Vector3f vectorU=new Vector3f(), vectorV=new Vector3f();  Vector3f.generateComplementBasis(vectorU,vectorV,vect);  Vector3f tempVect=mat.mult(vectorU);  float p00=eigenValues[index3] - vectorU.dot(tempVect);  float p01=vectorV.dot(tempVect);  float p11=eigenValues[index3] - vectorV.dot(mat.mult(vectorV));  float invLength;  float max=FastMath.abs(p00);  int row=0;  float fAbs=FastMath.abs(p01);  if (fAbs > max) {    max=fAbs;  }  fAbs=FastMath.abs(p11);  if (fAbs > max) {    max=fAbs;    row=1;  }  if (max >= FastMath.ZERO_TOLERANCE) {    if (row == 0) {      invLength=FastMath.invSqrt(p00 * p00 + p01 * p01);      p00*=invLength;      p01*=invLength;      vectorU.mult(p01,eigenVectors[index3]).addLocal(vectorV.mult(p00));    } else {      invLength=FastMath.invSqrt(p11 * p11 + p01 * p01);      p11*=invLength;      p01*=invLength;      vectorU.mult(p11,eigenVectors[index3]).addLocal(vectorV.mult(p01));    }  } else {    if (row == 0) {      eigenVectors[index3]=vectorV;    } else {      eigenVectors[index3]=vectorU;    }  }  Vector3f vectorS=vect.cross(eigenVectors[index3]);  mat.mult(vect,tempVect);  p00=eigenValues[index1] - vect.dot(tempVect);  p01=vectorS.dot(tempVect);  p11=eigenValues[index1] - vectorS.dot(mat.mult(vectorS));  max=FastMath.abs(p00);  row=0;  fAbs=FastMath.abs(p01);  if (fAbs > max) {    max=fAbs;  }  fAbs=FastMath.abs(p11);  if (fAbs > max) {    max=fAbs;    row=1;  }  if (max >= FastMath.ZERO_TOLERANCE) {    if (row == 0) {      invLength=FastMath.invSqrt(p00 * p00 + p01 * p01);      p00*=invLength;      p01*=invLength;      eigenVectors[index1]=vect.mult(p01).add(vectorS.mult(p00));    } else {      invLength=FastMath.invSqrt(p11 * p11 + p01 * p01);      p11*=invLength;      p01*=invLength;      eigenVectors[index1]=vect.mult(p11).add(vectorS.mult(p01));    }  } else {    if (row == 0) {      eigenVectors[index1].set(vectorS);    } else {      eigenVectors[index1].set(vect);    }  }  eigenVectors[index3].cross(eigenVectors[index1],eigenVectors[index2]);}  }
class C{  static public Text createTextField(Composite parent){  Text text=new Text(parent,SWT.SINGLE | SWT.BORDER);  GridData data=new GridData(GridData.FILL_HORIZONTAL);  data.verticalAlignment=GridData.CENTER;  data.grabExcessVerticalSpace=false;  data.widthHint=IDialogConstants.ENTRY_FIELD_WIDTH;  text.setLayoutData(data);  return text;}  }
class C{  @Override public synchronized void reset() throws IOException {  if (!markSupported) {    throw new UnsupportedOperationException("Mark not supported");  }  if (mark < 0) {    throw new IOException("No position has been marked");  }  if (position > mark + readlimit) {    throw new IOException("Marked position [" + mark + "] is no longer valid - passed the read limit ["+ readlimit+ "]");  }  position=mark;  eof=false;}  }
class C{  @Override public void readAttributes(DataSourceAttributeListInterface attributeData){}  }
class C{  public Object nextValue(){  char c=lookAhead();switch (c) {case '"':    return nextString();case '{':  return nextObject();case '[':return nextArray();}String s=nextToken();return tokenToValue(s);}  }
class C{  void registerTap(){  if (isPromoAvailable()) {    DisableablePromoTapCounter promoTapCounter=getPromoTapCounter();    if (promoTapCounter.isEnabled()) {      promoTapCounter.increment();    }  }  int tapsSinceOpen=mPreferenceManager.getContextualSearchTapCount();  mPreferenceManager.setContextualSearchTapCount(++tapsSinceOpen);  if (isUserUndecided()) {    ContextualSearchUma.logTapsSinceOpenForUndecided(tapsSinceOpen);  } else {    ContextualSearchUma.logTapsSinceOpenForDecided(tapsSinceOpen);  }}  }
class C{  public String plus(Object value){  return this.theString + value;}  }
class C{  public WallPostQuery lng(Float value){  return unsafeParam("long",value);}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public SimplePointChecker(final double relativeThreshold,final double absoluteThreshold,final int maxIter){  super(relativeThreshold,absoluteThreshold);  if (maxIter <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,maxIter,0);  }  maxIterationCount=maxIter;}  }
class C{  public void openDatabase() throws SQLException {  myDataBase=getWritableDatabase();}  }
class C{  public AudioReorderQuery after(Integer value){  return unsafeParam("after",value);}  }
class C{  @Override protected void normalizeWhitespace(XMLString value){  int end=value.offset + value.length;  for (int i=value.offset; i < end; ++i) {    int c=value.ch[i];    if (XMLChar.isSpace(c)) {      value.ch[i]=' ';    }  }}  }
class C{  public QueryString add(String o,String n){  int i1=getInt(o);  int i2=getInt(n);  set(o,i1 + i2);  q=null;  return this;}  }
class C{  public List<BoxFile> listFiles(String folderId) throws BoxSDKServiceException {  try {    BoxFolder folder=new BoxFolder(getBoxAPIConnection(),folderId);    List<BoxFile> files=new ArrayList<>();    for (    BoxItem.Info itemInfo : folder) {      if (itemInfo instanceof BoxFile.Info) {        BoxFile.Info fileInfo=(BoxFile.Info)itemInfo;        files.add(fileInfo.getResource());      }    }    return files;  } catch (  BoxAPIException e) {    String msg="Can't list files in folder, id: " + folderId;    logger.error(msg,e);    throw new BoxSDKServiceException(msg,e);  }}  }
class C{  public ParameterRef newParameterRef(Type paramType,int number){  return new ParameterRef(paramType,number);}  }
class C{  public static float calculateDistance(float x1,float y1,float x2,float y2){  final float side1=x2 - x1;  final float side2=y2 - y1;  return (float)Math.sqrt(side1 * side1 + side2 * side2);}  }
class C{  public Result decodeWithState(BinaryBitmap image) throws NotFoundException {  if (readers == null) {    setHints(null);  }  return decodeInternal(image);}  }
class C{  private void doUpdate() throws XMLStreamException, IOException {  XMLEventReader reader=null;  XMLEventWriter writer=null;  Properties metadata=new Properties();  try {    writer=outputFactory.createXMLEventWriter(new BufferedWriter(new FileWriter(destFile,false)));    reader=inputFactory.createXMLEventReader(new FileReader(sourceFile));    while (reader.hasNext()) {      final XMLEvent xmlEvent=reader.nextEvent();      if (xmlEvent.isStartElement() && isImportQName(xmlEvent.asStartElement().getName())) {        processImportElement(xmlEvent.asStartElement(),writer,metadata);        continue;      }      if (xmlEvent.isEndElement() && isImportQName(xmlEvent.asEndElement().getName())) {        continue;      }      if (xmlEvent instanceof Comment) {        continue;      }      if (xmlEvent.isCharacters()) {        if (xmlEvent.asCharacters().isWhiteSpace() || xmlEvent.asCharacters().isIgnorableWhiteSpace()) {          continue;        }      }      writer.add(xmlEvent);      if (xmlEvent.isStartDocument()) {        writer.add(eventFactory.createComment("\nThis file is machine-generated. DO NOT MODIFY IT!\n"));      }    }    storeFileModifications(metadata,metaDataFile);  }  finally {    if (writer != null) {      try {        writer.close();      } catch (      Exception ignored) {      }    }    if (reader != null) {      try {        reader.close();      } catch (      Exception ignored) {      }    }  }}  }
class C{  @SuppressLint("EmptyCatchBlock") void rebuild(){  if (mJournalWriter != null) {    closeQuietly(mJournalWriter);  }  Writer writer=null;  try {    ArrayList<Entry> entries=mCache.getEntryCollection();    mLineCount=entries.size();    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(mJournalFileTmp),US_ASCII));    for (    Entry entry : entries) {      if (entry.isReadable()) {        writer.write(CLEAN_ENTRY_PREFIX + ' ' + entry.getKey()+ ' '+ String.valueOf(entry.getLengthInBytes())+ '\n');      } else {        writer.write(DIRTY_ENTRY_PREFIX + ' ' + entry.getKey()+ '\n');      }    }    writer.flush();    if (mJournalFile.exists()) {      mJournalFile.renameTo(mJournalFileBackup);    }    mJournalFileTmp.renameTo(mJournalFile);    createJournalWriter();    mJournalFileBackup.delete();  } catch (  IOException ignored) {  } finally {    closeQuietly(writer);  }}  }
class C{  public FieldConfigSymbolType(FieldConfigCommonData commonData){  super(commonData);}  }
class C{  @Override public void pcdata(Augmentations augmentations) throws XNIException {}  }
class C{  public WilcoxonSignedRankTest(){  naturalRanking=new NaturalRanking(NaNStrategy.FIXED,TiesStrategy.AVERAGE);}  }
class C{  @Override public XPathMatcher activateField(Field field,int initialDepth){  ValueStore valueStore=fValueStoreCache.getValueStoreFor(field.getIdentityConstraint(),initialDepth);  XPathMatcher matcher=field.createMatcher(valueStore);  fMatcherStack.addMatcher(matcher);  matcher.startDocumentFragment();  return matcher;}  }
class C{  public WallPostQuery signed(Boolean value){  return unsafeParam("signed",value);}  }
class C{  public WallEditQuery lng(Float value){  return unsafeParam("long",value);}  }
class C{  public void timeToSpeech(String time){  String theTime=timeToString(time);  if (theTime != null) {    textToSpeech(theTime);  } else {    throw new IllegalArgumentException("Bad time format");  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (!(backend instanceof RemoteMethodControl)) {    throw new InvalidObjectException("ConstrainableTxnMgrProxy.readObject failure - backend " + "does not implement constrainable functionality ");  }}  }
class C{  protected void checkContractExpand(double contraction,double expansion) throws MathIllegalArgumentException {  if (contraction < expansion) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR,contraction,expansion);  }  if (contraction <= 1) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE,contraction);  }  if (expansion <= 1) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE,expansion);  }}  }
class C{  public void destroyView() throws CanceledException {  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());  super.destroyView();}  }
class C{  @Override public double doubleValue(){  return (double)numerator / (double)denominator;}  }
class C{  public FaveAddLinkQuery(VkApiClient client,UserActor actor,String link){  super(client,"fave.addLink",OkResponse.class);  accessToken(actor.getAccessToken());  link(link);}  }
class C{  @Override public boolean isRuleResult(){  return true;}  }
class C{  public boolean contains(int i){  return (i >= startLine && i <= endLine);}  }
class C{  public void assertMatches(String errorMessage,String stringToMatch,String regex){  assertTrue(errorMessage,stringToMatch.matches(regex));}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator<String> keys=this.keys();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  @Override public LeafNode locateLeaf(DataType key,boolean findFirst){  return null;}  }
class C{  protected static ObjectReader init(CsvSchema filterCsvSchema){  return new CsvMapper().disable(CsvParser.Feature.WRAP_AS_ARRAY).readerFor(String[].class).with(filterCsvSchema);}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  @SuppressWarnings("unchecked") private String addKeyToCacheAndReturnKey(String key,String languageId){  List<String> keyList=(List<String>)LanguageListCacheGroupHandler.getInstance().get(Configuration.CacheListKeysWithoutValue + languageId);  if (!keyList.contains(key)) {    keyList.add(key);  }  if (!Configuration.isValueOfKeyEmptyShowKey()) {    if (Configuration.isReplacementValueAnEmptyString()) {      key="";    } else {      key=Configuration.getReplacementValueIfValueIsEmpty();    }  }  return key;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_INVITE_PARTY_HIM(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300969,value0,value1);}  }
class C{  public boolean hasNext(){  return !error && iterator.hasNext();}  }
class C{  protected Object entryInitialFlow(){  FlowSet entrySet=(FlowSet)emptySet.emptySet();  entrySet.add(TopConstant.v());  return entrySet;}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  public <T>Constant<T> constant(String name,T constant){  return new Constant<T>(name,constant);}  }
class C{  public static IntIterator rows(Table t,Predicate p){  IntIterator iter=null;  iter=getOptimizedIterator(t,p);  if (iter == null) {    iter=new FilterRowIterator(t.rows(),t,p);  }  return iter;}  }
class C{  private void initPresenter(){  this.searchBarPresenter=new SearchBarImplementor(this);  this.messageManagePresenter=new MessageManageImplementor(this);  this.pagerManagePresenter=new PagerManageImplementor(pagerManageModel,this);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ReturnHome_A_TO_B(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200916,skillcaster,skillname);}  }
class C{  public static void main(String[] args){  System.out.println(OS);  if (isWindows()) {    System.out.println("This is Windows");  } else   if (isMac()) {    System.out.println("This is Mac");  } else   if (isUnix()) {    System.out.println("This is Unix or Linux");  } else   if (isSolaris()) {    System.out.println("This is Solaris");  } else {    System.out.println("Your OS is not support!!");  }}  }
class C{  public static int jdkToClassVersion(@NotNull String version){  int dot=version.indexOf('.');  if (dot != -1) {    dot++;    int end=version.length();    for (int i=dot; i < end; i++) {      if (!Character.isDigit(version.charAt(i))) {        end=i;        break;      }    }    if (end > dot) {      int major=Integer.valueOf(version.substring(dot,end));      if (major > 0) {        return major + 44;      }    }  }  return -1;}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  public static final void sort(int[] a,double[] b,int begin,int end){  mergesort(a,b,begin,end - 1);}  }
class C{  @Override @Test public void testLongly(){  RealMatrix matrix=createRealMatrix(longleyData,16,7);  SpearmansCorrelation corrInstance=new SpearmansCorrelation(matrix);  RealMatrix correlationMatrix=corrInstance.getCorrelationMatrix();  double[] rData=new double[]{1,0.982352941176471,0.985294117647059,0.564705882352941,0.2264705882352941,0.976470588235294,0.976470588235294,0.982352941176471,1,0.997058823529412,0.664705882352941,0.2205882352941176,0.997058823529412,0.997058823529412,0.985294117647059,0.997058823529412,1,0.638235294117647,0.2235294117647059,0.9941176470588236,0.9941176470588236,0.564705882352941,0.664705882352941,0.638235294117647,1,-0.3411764705882353,0.685294117647059,0.685294117647059,0.2264705882352941,0.2205882352941176,0.2235294117647059,-0.3411764705882353,1,0.2264705882352941,0.2264705882352941,0.976470588235294,0.997058823529412,0.9941176470588236,0.685294117647059,0.2264705882352941,1,1,0.976470588235294,0.997058823529412,0.9941176470588236,0.685294117647059,0.2264705882352941,1,1};  UnitTestUtils.assertEquals("Spearman's correlation matrix",createRealMatrix(rData,7,7),correlationMatrix,10E-15);}  }
class C{  protected boolean matchChildSequence(QName element,int event) throws XNIException {  if (fCurrentChildDepth >= fCurrentChildSequence.length) {    int tmpCurrentChildSequence[]=new int[fCurrentChildSequence.length];    System.arraycopy(fCurrentChildSequence,0,tmpCurrentChildSequence,0,fCurrentChildSequence.length);    fCurrentChildSequence=new int[fCurrentChildDepth * 2];    System.arraycopy(tmpCurrentChildSequence,0,fCurrentChildSequence,0,tmpCurrentChildSequence.length);  }  if (fIsResolveElement) {    if (event == XPointerPart.EVENT_ELEMENT_START) {      fCurrentChildSequence[fCurrentChildDepth]=fCurrentChildPosition;      fCurrentChildDepth++;      fCurrentChildPosition=1;      if ((fCurrentChildDepth <= fFoundDepth) || (fFoundDepth == 0)) {        if (checkMatch()) {          fIsElementFound=true;          fFoundDepth=fCurrentChildDepth;        } else {          fIsElementFound=false;          fFoundDepth=0;        }      }    } else     if (event == XPointerPart.EVENT_ELEMENT_END) {      if (fCurrentChildDepth == fFoundDepth) {        fIsElementFound=true;      } else       if (((fCurrentChildDepth < fFoundDepth) && (fFoundDepth != 0)) || ((fCurrentChildDepth > fFoundDepth) && (fFoundDepth == 0))) {        fIsElementFound=false;      }      fCurrentChildSequence[fCurrentChildDepth]=0;      fCurrentChildDepth--;      fCurrentChildPosition=fCurrentChildSequence[fCurrentChildDepth] + 1;    } else     if (event == XPointerPart.EVENT_ELEMENT_EMPTY) {      fCurrentChildSequence[fCurrentChildDepth]=fCurrentChildPosition;      fCurrentChildPosition++;      if (checkMatch()) {        fWasOnlyEmptyElementFound=!fIsElementFound;        fIsElementFound=true;      } else {        fIsElementFound=false;        fWasOnlyEmptyElementFound=false;      }    }  }  return fIsElementFound;}  }
class C{  private void compactAbstractionChain(D d3,D d2){  if (d3 != d2) {    D pred=d3.getPredecessor();    if (pred != null && pred != d2)     d3.setPredecessor(d2);  }}  }
class C{  @Override public void populateExpression(Object objValue){  if (windBarbsPanel != null) {    if (objValue instanceof String) {      windBarbsPanel.populateExpression((String)objValue);    }  }}  }
class C{  private void removeUnneededVisualizationCards(){  Map<String,VisualizationCardData> removableVisualizationCards=new HashMap<>();  Map<String,VisualizationCardData> visualizationCards=cardListAdapter.getVisualizationCards();  for (  Map.Entry<String,VisualizationCardData> visualizationCardDataEntry : visualizationCards.entrySet()) {    String nodeId=visualizationCardDataEntry.getKey();    VisualizationCardData visualizationCard=visualizationCardDataEntry.getValue();    if (!isRequestingSensorEventData(nodeId,visualizationCard.getDataBatch().getSource())) {      removableVisualizationCards.put(nodeId,visualizationCard);      continue;    }  }  for (  Map.Entry<String,VisualizationCardData> visualizationCardDataEntry : removableVisualizationCards.entrySet()) {    Log.d(TAG,"Removing unneeded visualization card: " + visualizationCardDataEntry.getValue().getHeading());    cardListAdapter.remove(visualizationCardDataEntry.getValue());  }}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  private Filter addFilter(FilterNode node){  Filter filter=node.getFilter();  FilterConfigInterface filterConfig=node.getFilterConfig();  if (filter instanceof LogicFilterImpl) {    List<Filter> filterList=new ArrayList<Filter>();    createFilterList(node,filterList);    return filterConfig.createLogicFilter(filterList);  }  List<Expression> parameterFilter=new ArrayList<Expression>();  if (filter instanceof FidFilterImpl) {    createExpressionParameterList(node,1,parameterFilter);  } else   if (filter instanceof BinaryTemporalOperator) {    createExpressionParameterList(node,2,parameterFilter);  } else   if (filter instanceof PropertyIsBetween) {    createExpressionParameterList(node,3,parameterFilter);  } else   if (filter instanceof PropertyIsNull) {    createExpressionParameterList(node,1,parameterFilter);  } else   if (filter instanceof PropertyIsLike) {    createExpressionParameterList(node,6,parameterFilter);  } else   if (filter instanceof BinarySpatialOperator) {    createExpressionParameterList(node,2,parameterFilter);  } else   if (filter instanceof BinaryComparisonAbstract) {    if (filter instanceof Not) {      createExpressionParameterList(node,1,parameterFilter);    } else     if (filter instanceof PropertyIsGreaterThan) {      createExpressionParameterList(node,2,parameterFilter);    } else {      createExpressionParameterList(node,3,parameterFilter);    }  } else {    return filter;  }  return filterConfig.createFilter(parameterFilter);}  }
class C{  public void writePacket(byte[] buffer,SocketAddress dest) throws IOException {  DatagramPacket dp=new DatagramPacket(buffer,buffer.length,dest);  socket.send(dp);}  }
class C{  public SortByName(){  this.caseSensitive=false;}  }
class C{  public boolean isAllViewersUptodate(){  for (  IDirectableViewer viewer : viewers) {    if (!viewer.isUptoDate()) {      return false;    }  }  return true;}  }
class C{  public static String humanReadableInt(long number){  long absNumber=Math.abs(number);  double result=number;  String suffix="";  if (absNumber < 1024) {  } else   if (absNumber < 1024 * 1024) {    result=number / 1024.0;    suffix="k";  } else   if (absNumber < 1024 * 1024 * 1024) {    result=number / (1024.0 * 1024);    suffix="m";  } else {    result=number / (1024.0 * 1024 * 1024);    suffix="g";  }  return oneDecimal.format(result) + suffix;}  }
class C{  private void acquireWakeLockAndStartService(Context context){  acquireWakeLock(context);  startPrecacheService(context);}  }
class C{  public void startDocument(){  fValueStores.clear();  fIdentityConstraint2ValueStoreMap.clear();  fGlobalIDConstraintMap.clear();  fGlobalMapStack.removeAllElements();}  }
class C{  public Headers headers(){  return rawResponse.headers();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_NPC_BLOCK(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1260217,value0,value1);}  }
class C{  public static void validateName(String nameOfStream) throws InvalidStreamNameException {  String reason=null;  char chars[]=nameOfStream.toCharArray();  char c;  for (int i=0; i < chars.length; i++) {    c=chars[i];    if (c == 0) {      reason="null character not allowed @" + i;      break;    } else     if (c == '/') {      reason="'/' not allowed @" + i;      break;    } else     if (c > '\u0000' && c < '\u001f' || c > '\u007f' && c < '\u009F' || c > '\ud800' && c < '\uf8ff' || c > '\ufff0' && c < '\uffff') {      reason="invalid charater @" + i;      break;    }  }  if (null != reason) {    throw new InvalidStreamNameException(nameOfStream,reason);  }  if (isReservedStreamName(nameOfStream)) {    throw new InvalidStreamNameException(nameOfStream,"Stream Name is reserved");  }}  }
class C{  public boolean decrypt(ByteBuffer buf){  final byte[] data=buf.array();  final int size=buf.remaining();  byte[] clientPacketKey=keys[CLIENT];  int arrayIndex=buf.arrayOffset() + buf.position();  int prev=data[arrayIndex];  data[arrayIndex++]^=(clientPacketKey[0] & 0xff);  for (int i=1; i < size; i++, arrayIndex++) {    int curr=data[arrayIndex] & 0xff;    data[arrayIndex]^=(staticKey[i & 63] & 0xff) ^ (clientPacketKey[i & 7] & 0xff) ^ prev;    prev=curr;  }  long oldKey=(((long)clientPacketKey[0] & 0xff) << 0) | (((long)clientPacketKey[1] & 0xff) << 8) | (((long)clientPacketKey[2] & 0xff) << 16)| (((long)clientPacketKey[3] & 0xff) << 24)| (((long)clientPacketKey[4] & 0xff) << 32)| (((long)clientPacketKey[5] & 0xff) << 40)| (((long)clientPacketKey[6] & 0xff) << 48)| (((long)clientPacketKey[7] & 0xff) << 56);  oldKey+=size;  if (validateClientPacket(buf)) {    clientPacketKey[0]=(byte)(oldKey >> 0 & 0xff);    clientPacketKey[1]=(byte)(oldKey >> 8 & 0xff);    clientPacketKey[2]=(byte)(oldKey >> 16 & 0xff);    clientPacketKey[3]=(byte)(oldKey >> 24 & 0xff);    clientPacketKey[4]=(byte)(oldKey >> 32 & 0xff);    clientPacketKey[5]=(byte)(oldKey >> 40 & 0xff);    clientPacketKey[6]=(byte)(oldKey >> 48 & 0xff);    clientPacketKey[7]=(byte)(oldKey >> 56 & 0xff);    return true;  }  return false;}  }
class C{  public static Pair<Double,Double> computeSequenceDiversityRatio(Alignment alignment,int kmer,int step,int minDepth,ProgressListener progressListener) throws CanceledException {  progressListener.setTasks("Computing diversity ratio k/n","");  progressListener.setMaximum(alignment.getNumberOfSequences());  progressListener.setProgress(0);  int firstCol=Integer.MAX_VALUE;  int lastCol=0;  for (int row=0; row < alignment.getNumberOfSequences(); row++) {    Lane lane=alignment.getLane(row);    firstCol=Math.min(firstCol,lane.getFirstNonGapPosition());    lastCol=Math.max(firstCol,lane.getLastNonGapPosition());  }  Set<String> words=new HashSet<>();  List<Pair<Integer,Integer>> listKN=new LinkedList<>();  for (int col=firstCol; col <= lastCol; col+=step) {    words.clear();    int n=0;    for (int row=0; row < alignment.getNumberOfSequences(); row++) {      Lane lane=alignment.getLane(row);      if (col >= lane.getFirstNonGapPosition() && col + kmer <= lane.getLastNonGapPosition()) {        int start=col - lane.getFirstNonGapPosition();        String word=lane.getBlock().substring(start,start + kmer);        if (!(word.contains("-") || word.contains("N"))) {          words.add(word);          n++;        }      }      if (n >= minDepth) {        listKN.add(new Pair<>(words.size(),n));      }      progressListener.incrementProgress();    }  }  if (listKN.size() == 0)   return new Pair<>(0.0,0.0);  double averageK=0;  double averageN=0;  for (  Pair<Integer,Integer> kn : listKN) {    averageK+=kn.getFirst();    averageN+=kn.getSecond();  }  averageK/=listKN.size();  averageN/=listKN.size();  return new Pair<>(averageK,averageN);}  }
class C{  public ArrayFieldVector<T> solve(ArrayFieldVector<T> b){  final int m=pivot.length;  final int length=b.getDimension();  if (length != m) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,length,m);  }  if (singular) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SINGULAR_MATRIX);  }  final T[] bp=MathArrays.buildArray(field,m);  for (int row=0; row < m; row++) {    bp[row]=b.getEntry(pivot[row]);  }  for (int col=0; col < m; col++) {    final T bpCol=bp[col];    for (int i=col + 1; i < m; i++) {      bp[i]=bp[i].subtract(bpCol.multiply(lu[i][col]));    }  }  for (int col=m - 1; col >= 0; col--) {    bp[col]=bp[col].divide(lu[col][col]);    final T bpCol=bp[col];    for (int i=0; i < col; i++) {      bp[i]=bp[i].subtract(bpCol.multiply(lu[i][col]));    }  }  return new ArrayFieldVector<T>(bp,false);}  }
class C{  public Builder withRationaleDialogMsg(@StringRes int rationaleMsgRes){  buildObj.rationaleDialogMsgRes=rationaleMsgRes;  buildObj.showRationaleDialog=true;  return this;}  }
class C{  private boolean canAddTask(){  return tCur == null;}  }
class C{  public CommitPreparedTransactionSpaceOperationRequest(){}  }
class C{  public static String loadFileToString(String sFilename){  StringBuffer sb=new StringBuffer();  try {    BufferedReader in=new BufferedReader(new FileReader(sFilename));    String line;    while ((line=in.readLine()) != null) {      sb.append(line);    }    in.close();  } catch (  Exception e) {    System.err.println("Coult not load file:" + sFilename);    e.printStackTrace(System.err);  }  return sb.toString();}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,boolean append) throws IOException {  writeLines(file,encoding,lines,null,append);}  }
class C{  public static final void fillPolygon(GL2 gl,Polygon p){  RenderUtilities.fillPolygon(gl,p.getVertices());}  }
class C{  public boolean intersects(S2Cell cell){  if (isEmpty()) {    return false;  }  if (contains(cell.getCenter())) {    return true;  }  if (cell.contains(getCenter().toPoint())) {    return true;  }  if (!intersects(cell.getRectBound())) {    return false;  }  S2Point[] cellV=new S2Point[4];  S2LatLng[] cellLl=new S2LatLng[4];  for (int i=0; i < 4; ++i) {    cellV[i]=cell.getVertex(i);    cellLl[i]=new S2LatLng(cellV[i]);    if (contains(cellLl[i])) {      return true;    }  }  for (int i=0; i < 4; ++i) {    S1Interval edgeLng=S1Interval.fromPointPair(cellLl[i].lng().radians(),cellLl[(i + 1) & 3].lng().radians());    if (!lng.intersects(edgeLng)) {      continue;    }    final S2Point a=cellV[i];    final S2Point b=cellV[(i + 1) & 3];    if (edgeLng.contains(lng.lo())) {      if (intersectsLngEdge(a,b,lat,lng.lo())) {        return true;      }    }    if (edgeLng.contains(lng.hi())) {      if (intersectsLngEdge(a,b,lat,lng.hi())) {        return true;      }    }    if (intersectsLatEdge(a,b,lat.lo(),lng)) {      return true;    }    if (intersectsLatEdge(a,b,lat.hi(),lng)) {      return true;    }  }  return false;}  }
class C{  protected void processBasicReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  int value=serialMessage.getMessagePayloadByte(offset + 1);  logger.debug(String.format("NODE %d: Basic report, value = 0x%02X",this.getNode().getNodeId(),value));  ZWaveCommandClassValueEvent zEvent=new ZWaveCommandClassValueEvent(this.getNode().getNodeId(),endpoint,this.getCommandClass(),value);  this.getController().notifyEventListeners(zEvent);}  }
class C{  public static final String concatGroups(Matcher matcher){  StringBuilder b=new StringBuilder();  final int numGroups=matcher.groupCount();  for (int i=1; i <= numGroups; i++) {    String s=matcher.group(i);    if (s != null) {      b.append(s);    }  }  return b.toString();}  }
class C{  private void sendBroadcastOperationFinished(Target target,RemoteOperation operation,RemoteOperationResult result){  Intent intent=new Intent(ACTION_OPERATION_FINISHED);  intent.putExtra(EXTRA_RESULT,result);  if (target.mAccount != null) {    intent.putExtra(EXTRA_ACCOUNT,target.mAccount);  } else {    intent.putExtra(EXTRA_SERVER_URL,target.mServerUrl);  }  sendStickyBroadcast(intent);}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,ProductConfigWrapper configWrapper,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,null,null,null,null,null,features,attributes,prodCatalogId,configWrapper,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,Boolean.FALSE,Boolean.FALSE));}  }
class C{  @SuppressWarnings("unchecked") public CompositeFileComparator(Comparator<File>... delegates){  if (delegates == null) {    this.delegates=(Comparator<File>[])NO_COMPARATORS;  } else {    this.delegates=(Comparator<File>[])new Comparator<?>[delegates.length];    System.arraycopy(delegates,0,this.delegates,0,delegates.length);  }}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public void multLocal(float scalar){  m00*=scalar;  m01*=scalar;  m02*=scalar;  m03*=scalar;  m10*=scalar;  m11*=scalar;  m12*=scalar;  m13*=scalar;  m20*=scalar;  m21*=scalar;  m22*=scalar;  m23*=scalar;  m30*=scalar;  m31*=scalar;  m32*=scalar;  m33*=scalar;}  }
class C{  boolean isOptimal(){  final double[] objectiveFunctionRow=getRow(0);  final int end=getRhsOffset();  for (int i=getNumObjectiveFunctions(); i < end; i++) {    final double entry=objectiveFunctionRow[i];    if (Precision.compareTo(entry,0d,epsilon) < 0) {      return false;    }  }  return true;}  }
class C{  public String makeLinkFull(HttpServletRequest request,HttpServletResponse response,String url){  return makeLink(request,response,url,true,null,null);}  }
class C{  @Override public void characters(XMLString text,Augmentations augs) throws XNIException {  if (text.length == 0) {    return;  }  try {    if (fDocumentHandler != null) {      fDocumentHandler.characters(text.ch,text.offset,text.length);    }    if (fContentHandler != null) {      fContentHandler.characters(text.ch,text.offset,text.length);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public ChangeSet removeFromCollection(String path,Serializable itemToRemove){  return add(new RemoveFromCollectionSpaceEntryMutator(path,itemToRemove));}  }
class C{  public RemoteEventBusPacket(ITemplateHolder templateHolder,RemoteEvent re,int TTL,NotifyContext notifyContext,boolean fromReplication){  super((OperationID)null,templateHolder,null,0);  if (re instanceof EntryArrivedRemoteEvent)   super.setOperationID(((EntryArrivedRemoteEvent)re).getOperationID());  _remoteEvent=re;  _TTL=TTL;  _notifyContext=notifyContext;  _fromReplication=fromReplication;}  }
class C{  public void addAll(List<String> stringValues){  for (  String stringValue : stringValues) {    add(stringValue);  }}  }
class C{  public boolean forall(P2SetVisitor v){  oldSet.forall(v);  newSet.forall(v);  return v.getReturnValue();}  }
class C{  private void readObjectNoData() throws InvalidObjectException {  throw new InvalidObjectException("Permissions must be specified");}  }
class C{  protected MarketEditAlbumQuery albumId(int value){  return unsafeParam("album_id",value);}  }
class C{  public long size(){  return sequence.values().stream().mapToInt(null).sum();}  }
class C{  public PhotosImplementor(PhotosModel model,PhotosView view){  this.model=model;  this.view=view;}  }
class C{  private static void start(Context context,Class<?> daemonClazzName,int interval){  String cmd=context.getDir(BIN_DIR_NAME,Context.MODE_PRIVATE).getAbsolutePath() + File.separator + DAEMON_BIN_NAME;  StringBuilder cmdBuilder=new StringBuilder();  cmdBuilder.append(cmd);  cmdBuilder.append(" -p ");  cmdBuilder.append(context.getPackageName());  cmdBuilder.append(" -s ");  cmdBuilder.append(daemonClazzName.getName());  cmdBuilder.append(" -t ");  cmdBuilder.append(interval);  try {    Runtime.getRuntime().exec(cmdBuilder.toString()).waitFor();  } catch (  IOException|InterruptedException e) {    Log.e(TAG,"start daemon error: " + e.getMessage());  }}  }
class C{  public static void main(String[] args) throws Exception {  int maxHTTPThreadCount=2 * Runtime.getRuntime().availableProcessors();  List<String> bindIPPorts=new ArrayList<>();  Path stateDir=Paths.get(System.getProperty("user.home"),"lucene","server");  for (int i=0; i < args.length; i++) {    if (args[i].equals("-maxHTTPThreadCount")) {      if (args.length == i + 1) {        throw new IllegalArgumentException("no value specified after -maxHTTPThreadCount");      }      maxHTTPThreadCount=Integer.parseInt(args[i + 1]);      i++;    } else     if (args[i].equals("-stateDir")) {      if (args.length == i + 1) {        throw new IllegalArgumentException("no value specified after -stateDir");      }      stateDir=Paths.get(args[i + 1]);      i++;    } else     if (args[i].equals("-ipPort")) {      if (args.length == i + 1) {        throw new IllegalArgumentException("no value specified after -ipPort");      }      bindIPPorts.add(args[i + 1]);      i++;    } else {      System.err.println("ERROR: unknown command line option " + args[i]);      usage();      System.exit(-1);    }  }  if (bindIPPorts.isEmpty()) {    bindIPPorts.add("127.0.0.1:4000");  }  new Server("main",stateDir,50,10,bindIPPorts).run(new CountDownLatch(1));}  }
class C{  public void internalize(byte[] optionsArray){  int pos=4;  byte code, length;  byte value[];  while (optionsArray[pos] != (byte)255) {    code=optionsArray[pos++];    length=optionsArray[pos++];    value=getArrayOption(length,pos,optionsArray);    setOption(code,value);    pos+=length;  }}  }
class C{  public static void formatUid(PrintWriter pw,int uid){  if (uid < Process.FIRST_APPLICATION_UID) {    pw.print(uid);  } else {    pw.print('u');    pw.print(getUserId(uid));    final int appId=getAppId(uid);    if (appId >= FIRST_ISOLATED_UID && appId <= LAST_ISOLATED_UID) {      pw.print('i');      pw.print(appId - FIRST_ISOLATED_UID);    } else     if (appId >= Process.FIRST_APPLICATION_UID) {      pw.print('a');      pw.print(appId - Process.FIRST_APPLICATION_UID);    } else {      pw.print('s');      pw.print(appId);    }  }}  }
class C{  public static void drawVerticalMarginIndicator(Graphics2D g,String text,int x,int y1,int y2){  if (y1 > y2) {    int temp=y1;    y1=y2;    y2=temp;  }  if (text == null) {    g.drawLine(x,y1,x,y2);    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);    return;  }  Canvas c=new Canvas();  FontMetrics fm=c.getFontMetrics(sFont);  g.setFont(sFont);  int padding=4;  Rectangle2D bounds=fm.getStringBounds(text,g);  int th=(int)bounds.getHeight();  int offset=3 * CONNECTION_ARROW_SIZE;  int h=((y2 - y1) - (th + 2 * padding)) / 2;  if (h <= padding) {    g.drawLine(x,y1,x,y2);    g.drawString(text,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding);    g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);    g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2);  } else {    g.drawLine(x,y1,x,y1 + h);    g.drawLine(x,y2 - h,x,y2);    g.drawString(text,(int)(x - bounds.getWidth() / 2),y2 - h - padding);    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);  }}  }
class C{  Node matchNodeOrParent(Node node){  if (fCurrentNode == null)   return null;  for (Node n=fCurrentNode; n != fRoot; n=n.getParentNode()) {    if (node == n)     return n;  }  return null;}  }
class C{  public void internalTransform(Body b,String phaseName,Map<String,String> options){  JimpleBody body=(JimpleBody)b;  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "] Folding Jimple constructors...");  Analysis analysis=new Analysis(new BriefUnitGraph(body));  Chain<Unit> units=body.getUnits();  List<Unit> stmtList=new ArrayList<Unit>();  stmtList.addAll(units);  for (  Unit u : stmtList) {    Stmt s=(Stmt)u;    if (isCopy(s))     continue;    if (isConstructor(s))     continue;    Fact before=analysis.getFlowBefore(s);    for (    ValueBox usebox : s.getUseBoxes()) {      Value value=usebox.getValue();      if (!(value instanceof Local))       continue;      Local local=(Local)value;      if (before.get(local) != null)       throw new RuntimeException("Use of an unitialized value " + "before constructor call; are you sure this " + "bytecode is verifiable?\n"+ s);    }  }  for (  Unit u : stmtList) {    Stmt s=(Stmt)u;    if (isNew(s)) {      units.remove(s);    }  }  for (  Unit u : stmtList) {    Stmt s=(Stmt)u;    Fact before=analysis.getFlowBefore(s);    Fact after=analysis.getFlowAfter(s);    if (isCopy(s)) {      Stmt newStmt=before.get(rhsLocal(s));      if (newStmt != null)       units.remove(s);    } else     if (after.alloc() != null) {      Stmt newStmt=before.get(base(s));      setBase(s,lhsLocal(newStmt));      units.insertBefore(newStmt,s);      for (      Local l : before.get(newStmt)) {        if (l.equals(base(s)))         continue;        units.insertAfter(Jimple.v().newAssignStmt(l,base(s)),s);      }    }  }}  }
class C{  public CM_MAC_ADDRESS(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  private String printEFormat(double x){  if (conversionCharacter == 'e')   return eFormatString(x,'e'); else   return eFormatString(x,'E');}  }
class C{  @Override public void startElement(String name,AttributeList atts) throws SAXException {  if (abandonHope) {    return;  }  if (saxParser == null) {    String prefix="";    if (name.indexOf(':') > 0) {      prefix=name.substring(0,name.indexOf(':'));    }    String localName=name;    if (localName.indexOf(':') > 0) {      localName=localName.substring(localName.indexOf(':') + 1);    }    String namespaceURI=null;    if (prefix.equals("")) {      namespaceURI=atts.getValue("xmlns");    } else {      namespaceURI=atts.getValue("xmlns:" + prefix);    }    String saxParserClass=getCatalogParser(namespaceURI,localName);    if (saxParserClass == null) {      abandonHope=true;      if (namespaceURI == null) {        debug.message(2,"No Catalog parser for " + name);      } else {        debug.message(2,"No Catalog parser for " + "{" + namespaceURI + "}"+ name);      }      return;    }    try {      saxParser=(SAXCatalogParser)Class.forName(saxParserClass,true,loader != null ? loader : this.getClass().getClassLoader()).newInstance();      saxParser.setCatalog(catalog);      saxParser.startDocument();      saxParser.startElement(name,atts);    } catch (    ClassNotFoundException cnfe) {      saxParser=null;      abandonHope=true;      debug.message(2,cnfe.toString());    }catch (    InstantiationException ie) {      saxParser=null;      abandonHope=true;      debug.message(2,ie.toString());    }catch (    IllegalAccessException iae) {      saxParser=null;      abandonHope=true;      debug.message(2,iae.toString());    }catch (    ClassCastException cce) {      saxParser=null;      abandonHope=true;      debug.message(2,cce.toString());    }  } else {    saxParser.startElement(name,atts);  }}  }
class C{  public LeastSquaresBuilder maxEvaluations(final int newMaxEvaluations){  this.maxEvaluations=newMaxEvaluations;  return this;}  }
class C{  @Override public boolean equals(Object other){  if (this == other) {    return true;  }  if (other == null || getClass() != other.getClass()) {    return false;  }  DictionaryByteArrayWrapper otherObjectToCompare=(DictionaryByteArrayWrapper)other;  if (data.length != otherObjectToCompare.data.length) {    return false;  }  return ByteUtil.UnsafeComparer.INSTANCE.equals(data,otherObjectToCompare.data);}  }
class C{  public static int[] readInts(){  return new In().readAllInts();}  }
class C{  public void showContent(){  switchState(CONTENT,null,null,null,null,null,Collections.<Integer>emptyList());}  }
class C{  public static String makeSafe(String s){  return (s == null) ? "" : s;}  }
class C{  public void resetPotentialWithRank(int rank,int chanceOnThirdLine){  setPotentialByLine(0,-rank);  setPotentialByLine(1,-rank);  if (getPotentialByLine(2) == 0) {    setPotentialByLine(2,(Randomizer.nextInt(100) < chanceOnThirdLine) ? -rank : 0);  } else {    setPotentialByLine(2,-rank);  }}  }
class C{  public static boolean verifyPermissions(int... grantResults){  if (grantResults.length == 0) {    return false;  }  for (  int result : grantResults) {    if (result != PackageManager.PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  public BpmResult(final String errorMessage){  success=false;  this.errorMessage=errorMessage;}  }
class C{  @deprecated public StringTokenizer(String str,UnicodeSet delim,boolean returndelims,boolean coalescedelims){  this.m_source_=str;  this.m_length_=str.length();  if (delim == null) {    this.m_delimiters_=EMPTY_DELIMITER_;  } else {    this.m_delimiters_=delim;  }  this.m_returnDelimiters_=returndelims;  this.m_coalesceDelimiters_=coalescedelims;  this.m_tokenOffset_=-1;  this.m_tokenSize_=-1;  if (this.m_length_ == 0) {    this.m_nextOffset_=-1;  } else {    this.m_nextOffset_=0;    if (!returndelims) {      this.m_nextOffset_=getNextNonDelimiter(0);    }  }}  }
class C{  @Override public boolean hasFixedPropertiesArray(){  return false;}  }
class C{  public boolean hasApiCapability(SerialMessageClass capability){  return apiCapabilities.contains(capability);}  }
class C{  public void collapse(DefaultMutableTreeNode v){  if (v == null)   v=(DefaultMutableTreeNode)fileTree.getModel().getRoot();  for (Enumeration descendants=v.depthFirstEnumeration(); descendants.hasMoreElements(); ) {    v=(DefaultMutableTreeNode)descendants.nextElement();    fileTree.collapsePath(new TreePath(v.getPath()));  }}  }
class C{  private MathUtils(){}  }
class C{  public static Zmat aib(Zutmat U,Zmat B) throws JampackException {  int i, j, k;  Z x=new Z();  U.getProperties();  B.getProperties();  if (U.nr != U.nc)   throw new JampackException("Rectangular matrix.");  if (U.nr != B.nr)   throw new JampackException("Inconsistent dimensions.");  Zmat X=new Zmat(B);  for (i=U.nr - 1; i >= 0; i--)   for (j=0; j < B.nc; j++) {    for (k=i + 1; k < U.nc; k++) {      X.re[i][j]=X.re[i][j] - U.re[i][k] * X.re[k][j] + U.im[i][k] * X.im[k][j];      X.im[i][j]=X.im[i][j] - U.im[i][k] * X.re[k][j] - U.re[i][k] * X.im[k][j];    }    if (U.re[i][i] == 0.0 && U.im[i][i] == 0.0)     throw new JampackException("Zero diagonal in solving riangular system");    X.put0(i,j,x.Div(X.get0(i,j),U.get0(i,i)));  }  return X;}  }
class C{  public LocalUnitPair(Local local,Unit unit){  this.local=local;  this.unit=unit;}  }
class C{  public void updateXmlConfigEntry(String configEntry,String configValue) throws IOException {  String spaceConfigURL=JProperties.getURL(getServiceName());  ReplaceInFileUtils updateFile=new ReplaceInFileUtils(spaceConfigURL);  updateFile.xmlReplace(configEntry,configValue);  updateFile.close();}  }
class C{  private void replicateAndfreeCacheContextTxn(Context context,ServerTransaction transaction){  try {    replicateAndfreeCache(context);  } catch (  RuntimeException ex) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"Failed to perform sync-replication on transactionId: " + transaction,ex);    }  }}  }
class C{  public CollectionsImplementor(CollectionsModel model,CollectionsView view){  this.model=model;  this.view=view;}  }
class C{  @Override public Histogram histogram(){  return hist;}  }
class C{  public Boolean isDirected(){  return m_directed;}  }
class C{  public void startValueScope(){  fValuesCount=0;  for (int i=0; i < fFieldCount; i++) {    fLocalValues[i]=null;    fLocalValueTypes[i]=0;    fLocalItemValueTypes[i]=null;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MoveBehindATK_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200685,skillcaster,num0,skillname);}  }
class C{  public ProductConfigWrapperException(String message){  super(message);}  }
class C{  public void assertContains(Predicate<HarEntry> predicate){  assertThat(trafficLogProvider.get(),new TrafficLogContains(Collections.singletonList(predicate)));}  }
class C{  public DocumentNGramDistroGraph mergeDistroGraph(DocumentNGramDistroGraph dgOtherGraph){  EdgeCachedLocator ecLocator=new EdgeCachedLocator(10);  DocumentNGramDistroGraph res=(DocumentNGramDistroGraph)clone();  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gGraph=res.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gOtherGraph=dgOtherGraph.getGraphLevelByNGramSize(iCurLvl);    if (gOtherGraph == null)     continue;    java.util.Iterator iIter=gOtherGraph.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      String sHead=weCurItem.getVertexA().getLabel();      String sTail=weCurItem.getVertexB().getLabel();      WeightedEdge weMyCurItem=(WeightedEdge)ecLocator.locateDirectedEdgeInGraph(gGraph,weCurItem.getVertexA(),weCurItem.getVertexB());      if (weMyCurItem == null) {        try {          weMyCurItem=gGraph.addEdge(weCurItem.getVertexA(),weCurItem.getVertexB(),weCurItem.getWeight());          ecLocator.addedEdge(weMyCurItem);        } catch (        Exception ex) {          ex.printStackTrace(System.err);          continue;        }      }      Distribution d1=(Distribution)res.EdgeDistros.get(weMyCurItem);      if (d1 == null)       d1=new Distribution();      Distribution d2=(Distribution)dgOtherGraph.EdgeDistros.get(weCurItem);      if (d2 == null)       d2=new Distribution();      res.EdgeDistros.put(weMyCurItem,d2.addTo(d1));      if (weMyCurItem != null) {        double dWeight=weCurItem.getWeight() + weMyCurItem.getWeight();        weMyCurItem.setWeight(dWeight);      }    }  }  return res;}  }
class C{  private void ensureTextSet(){  if (_text.limit() == 0) {    checkState(_map != null,"Neither JSON text nor map has been set");    _text.clear();    try {      JsonHelper.writeJson(new ByteBufferOutputStream(_text),_map);      _text.flip();    } catch (    Exception e) {      if (Iterables.tryFind(Throwables.getCausalChain(e),Predicates.instanceOf(BufferOverflowException.class)).isPresent()) {        byte[] utf8=JsonHelper.asUtf8Bytes(_map);        _text=ByteBuffer.wrap(utf8);      } else {        throw Throwables.propagate(e);      }    }  }}  }
class C{  public void apply(){  assert useWeight;  String value=mWeight > 0 ? formatFloatAttribute(mWeight) : null;  component.setAttribute(ANDROID_URI,ATTR_LAYOUT_WEIGHT,value);  if (mClearWeights != null) {    for (    NlComponent n : mClearWeights) {      if (getWeight(n) > 0.0f) {        n.setAttribute(ANDROID_URI,ATTR_LAYOUT_WEIGHT,null);      }    }  }  if (mNewWeightSum > 0.0) {    layout.setAttribute(ANDROID_URI,ATTR_WEIGHT_SUM,formatFloatAttribute(mNewWeightSum));  }}  }
class C{  public Access substituted(Collection<TypeVariable> original,List<TypeVariable> substitution){  ASTNode$State state=state();  try {    return (Access)cloneSubtree();  }  finally {  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_PROTECT_A_to_B(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1201175,skilltarget,skillcaster);}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  protected void reportFatalError(String msgId,Object[] args) throws XNIException {  fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,msgId,args,XMLErrorReporter.SEVERITY_FATAL_ERROR);}  }
class C{  public NodeLinkTreeLayout(String group){  super(group);  m_orientation=Constants.ORIENT_LEFT_RIGHT;}  }
class C{  @TargetApi(Build.VERSION_CODES.KITKAT) public void show(){  if (isShow)   return;  initTN();  try {    show.invoke(mTN);  } catch (  InvocationTargetException|IllegalAccessException e) {    e.printStackTrace();  }  isShow=true;  if (mDuration > LENGTH_ALWAYS) {    handler.postDelayed(hideRunnable,mDuration * 1000);  }}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public static final void sort(int[] a,double[] b,int length){  mergesort(a,b,0,length - 1);}  }
class C{  public EntryClass(Class clazz,EntryClass superclass) throws MarshalException {  name=clazz.getName();  this.superclass=superclass;  ClassMapper.EntryField[] fields=ClassMapper.getFields(clazz);  numFields=fields.length;  computeHash(fields);}  }
class C{  private Node namedItem(Element topLevel,String name){  Node node;  Node result;synchronized (topLevel) {    node=topLevel.getFirstChild();    while (node != null) {      if (node instanceof Element) {        if (collectionMatch((Element)node,name))         return node; else         if (recurse()) {          result=namedItem((Element)node,name);          if (result != null)           return result;        }      }      node=node.getNextSibling();    }    return node;  }}  }
class C{  private void initParser(){  catalogResolver=new CatalogResolver(catalogManager);  SAXParserFactory spf=SAXParserFactory.newInstance();  spf.setNamespaceAware(namespaceAware);  spf.setValidating(validating);  try {    saxParser=spf.newSAXParser();    parser=saxParser.getParser();    documentHandler=null;    dtdHandler=null;  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  private IOUtils(){}  }
class C{  public void abortIfRunning(){  if (mRunning) {    if (!mScroller.isFinished()) {      mAbort=true;      mScroller.forceFinished(true);    }    finish();    mAbort=false;  }}  }
class C{  private static Entry[] delete(Entry[] attrs,int i){  int len=attrs.length - 1;  Entry[] nattrs=new Entry[len];  System.arraycopy(attrs,0,nattrs,0,i);  System.arraycopy(attrs,i + 1,nattrs,i,len - i);  return nattrs;}  }
class C{  protected void drawDataSet(Canvas c,IRadarDataSet dataSet,int mostEntries){  float phaseX=mAnimator.getPhaseX();  float phaseY=mAnimator.getPhaseY();  float sliceangle=mChart.getSliceAngle();  float factor=mChart.getFactor();  MPPointF center=mChart.getCenterOffsets();  MPPointF pOut=MPPointF.getInstance(0,0);  Path surface=mDrawDataSetSurfacePathBuffer;  surface.reset();  boolean hasMovedToPoint=false;  for (int j=0; j < dataSet.getEntryCount(); j++) {    mRenderPaint.setColor(dataSet.getColor(j));    RadarEntry e=dataSet.getEntryForIndex(j);    Utils.getPosition(center,(e.getY() - mChart.getYChartMin()) * factor * phaseY,sliceangle * j * phaseX + mChart.getRotationAngle(),pOut);    if (Float.isNaN(pOut.x))     continue;    if (!hasMovedToPoint) {      surface.moveTo(pOut.x,pOut.y);      hasMovedToPoint=true;    } else     surface.lineTo(pOut.x,pOut.y);  }  if (dataSet.getEntryCount() > mostEntries) {    surface.lineTo(center.x,center.y);  }  surface.close();  if (dataSet.isDrawFilledEnabled()) {    final Drawable drawable=dataSet.getFillDrawable();    if (drawable != null) {      drawFilledPath(c,surface,drawable);    } else {      drawFilledPath(c,surface,dataSet.getFillColor(),dataSet.getFillAlpha());    }  }  mRenderPaint.setStrokeWidth(dataSet.getLineWidth());  mRenderPaint.setStyle(Paint.Style.STROKE);  if (!dataSet.isDrawFilledEnabled() || dataSet.getFillAlpha() < 255)   c.drawPath(surface,mRenderPaint);  MPPointF.recycleInstance(center);  MPPointF.recycleInstance(pOut);}  }
class C{  void updateItem(Barcode barcode){  mBarcode=barcode;  postInvalidate();}  }
class C{  public EncounterResult encounterPokemon() throws LoginFailedException, RemoteServerException {  return AsyncHelper.toBlocking(encounterPokemonAsync());}  }
class C{  private synchronized void updateContainerXML() throws IOException, ParserConfigurationException {synchronized (_lock) {    if (_containerEntry == null)     return;  }  if (m_ContainerFile != null && !m_ContainerFile.exists()) {    m_ContainerFile.createNewFile();    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("Created new " + m_ContainerFile + " XML file for "+ _containerName+ " container.");    }  }  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  m_containerFileDocument=builder.newDocument();  m_rootContainerElement=m_containerFileDocument.createElement(_containerName);  m_rootSpaceElement=m_containerFileDocument.createElement(SPACE_TAG);  m_rootContainerElement.appendChild(m_rootSpaceElement);synchronized (_lock) {    if (_containerEntry != null)     updateContainerXMLTree(_containerEntry.getName(),_containerEntry.getSpaceAttributes());  }  saveState();}  }
class C{  public Vector3f mult(Vector3f vec,Vector3f product){  if (null == product) {    product=new Vector3f();  }  float x=vec.x;  float y=vec.y;  float z=vec.z;  product.x=m00 * x + m01 * y + m02 * z;  product.y=m10 * x + m11 * y + m12 * z;  product.z=m20 * x + m21 * y + m22 * z;  return product;}  }
class C{  public static boolean isUrl(String s){  if (isEmpty(s))   return defaultEmptyOK;  if (s.indexOf("://") != -1)   return true;  return false;}  }
class C{  public static JsonArray array(double... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JsonArray array=new JsonArray();  for (  double value : values) {    array.add(value);  }  return array;}  }
class C{  public void insertEntry(Context context,IEntryHolder entryHolder,boolean origin,boolean shouldReplicate) throws SAException {}  }
class C{  public PlacesCheckinQuery latitude(Float value){  return unsafeParam("latitude",value);}  }
class C{  public void loadBcpFile(String bcpFilename,String delimiter,List<Attribute> attributes,String dateFormatString,IntSourceConnectionManager connectionManager,int sourceAttribute){  loadBcpFile(bcpFilename,delimiter,attributes,connectionManager,dateFormatString != null ? new SimpleDateFormat(dateFormatString) : null,sourceAttribute);}  }
class C{  public void write(byte b[],int off,int len){  if (len == 0)   return;  ensureCapacity(len);  System.arraycopy(b,off,_buffer,_count,len);  _count+=len;}  }
class C{  public Builder cacheInMemory(){  cacheInMemory=true;  return this;}  }
class C{  public boolean isLeaf(){  return this.left == null;}  }
class C{  public static synchronized void indexDocuments(Queue<CodeIndexDocument> codeIndexDocumentQueue) throws IOException {  Directory dir=FSDirectory.open(Paths.get(Properties.getProperties().getProperty(Values.INDEXLOCATION,Values.DEFAULTINDEXLOCATION)));  Directory facetsdir=FSDirectory.open(Paths.get(Properties.getProperties().getProperty(Values.FACETSLOCATION,Values.DEFAULTFACETSLOCATION)));  Analyzer analyzer=new CodeAnalyzer();  IndexWriterConfig iwc=new IndexWriterConfig(analyzer);  FacetsConfig facetsConfig=new FacetsConfig();  SearchcodeLib scl=new SearchcodeLib();  iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);  IndexWriter writer=new IndexWriter(dir,iwc);  TaxonomyWriter taxoWriter=new DirectoryTaxonomyWriter(facetsdir);  try {    CodeIndexDocument codeIndexDocument=codeIndexDocumentQueue.poll();    int count=0;    while (codeIndexDocument != null) {      Singleton.getLogger().info("Indexing file " + codeIndexDocument.getRepoLocationRepoNameLocationFilename());      Singleton.decrementCodeIndexLinesCount(codeIndexDocument.getCodeLines());      Document doc=new Document();      Field pathField=new StringField("path",codeIndexDocument.getRepoLocationRepoNameLocationFilename(),Field.Store.YES);      doc.add(pathField);      facetsConfig=new FacetsConfig();      facetsConfig.setIndexFieldName(Values.LANGUAGENAME,Values.LANGUAGENAME);      facetsConfig.setIndexFieldName(Values.REPONAME,Values.REPONAME);      facetsConfig.setIndexFieldName(Values.CODEOWNER,Values.CODEOWNER);      if (Helpers.isNullEmptyOrWhitespace(codeIndexDocument.getLanguageName()) == false) {        doc.add(new SortedSetDocValuesFacetField(Values.LANGUAGENAME,codeIndexDocument.getLanguageName()));      }      if (Helpers.isNullEmptyOrWhitespace(codeIndexDocument.getRepoName()) == false) {        doc.add(new SortedSetDocValuesFacetField(Values.REPONAME,codeIndexDocument.getRepoName()));      }      if (Helpers.isNullEmptyOrWhitespace(codeIndexDocument.getCodeOwner()) == false) {        doc.add(new SortedSetDocValuesFacetField(Values.CODEOWNER,codeIndexDocument.getCodeOwner()));      }      scl.addToSpellingCorrector(codeIndexDocument.getContents());      StringBuilder indexContents=new StringBuilder();      indexContents.append(codeIndexDocument.getFileName());      indexContents.append(" ");      indexContents.append(codeIndexDocument.getFileLocationFilename());      indexContents.append(" ");      indexContents.append(codeIndexDocument.getFileLocation());      indexContents.append(scl.splitKeywords(codeIndexDocument.getContents()));      indexContents.append(scl.codeCleanPipeline(codeIndexDocument.getContents()));      indexContents.append(scl.findInterestingKeywords(codeIndexDocument.getContents()));      String toIndex=indexContents.toString().toLowerCase();      doc.add(new TextField(Values.REPONAME,codeIndexDocument.getRepoName(),Field.Store.YES));      doc.add(new TextField(Values.FILENAME,codeIndexDocument.getFileName(),Field.Store.YES));      doc.add(new TextField(Values.FILELOCATION,codeIndexDocument.getFileLocation(),Field.Store.YES));      doc.add(new TextField(Values.FILELOCATIONFILENAME,codeIndexDocument.getFileLocationFilename(),Field.Store.YES));      doc.add(new TextField(Values.MD5HASH,codeIndexDocument.getMd5hash(),Field.Store.YES));      doc.add(new TextField(Values.LANGUAGENAME,codeIndexDocument.getLanguageName(),Field.Store.YES));      doc.add(new IntField(Values.CODELINES,codeIndexDocument.getCodeLines(),Field.Store.YES));      doc.add(new TextField(Values.CONTENTS,toIndex,Field.Store.NO));      doc.add(new TextField(Values.REPOLOCATION,codeIndexDocument.getRepoRemoteLocation(),Field.Store.YES));      doc.add(new TextField(Values.CODEOWNER,codeIndexDocument.getCodeOwner(),Field.Store.YES));      doc.add(new TextField(Values.CODEID,codeIndexDocument.getHash(),Field.Store.YES));      doc.add(new LongField(Values.MODIFIED,new Date().getTime(),Field.Store.YES));      writer.updateDocument(new Term(Values.PATH,codeIndexDocument.getRepoLocationRepoNameLocationFilename()),facetsConfig.build(taxoWriter,doc));      count++;      if (count >= 1000) {        codeIndexDocument=null;      } else {        codeIndexDocument=codeIndexDocumentQueue.poll();      }    }  }  finally {    try {      writer.close();    }  finally {      taxoWriter.close();    }    Singleton.getLogger().info("Closing writers");  }}  }
class C{  public VideoAddToAlbumQuery albumIds(Integer... value){  return unsafeParam("album_ids",value);}  }
class C{  private static int decodeDigit(int[] counters) throws NotFoundException {  float bestVariance=MAX_AVG_VARIANCE;  int bestMatch=-1;  int max=PATTERNS.length;  for (int i=0; i < max; i++) {    int[] pattern=PATTERNS[i];    float variance=patternMatchVariance(counters,pattern,MAX_INDIVIDUAL_VARIANCE);    if (variance < bestVariance) {      bestVariance=variance;      bestMatch=i;    }  }  if (bestMatch >= 0) {    return bestMatch;  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  private PollingUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public boolean canCausePartialRendering(){  return !myDryRun;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testProcessDefinitionEvents() throws Exception {  ProcessDefinition processDefinition=repositoryService.createProcessDefinitionQuery().processDefinitionKey("oneTaskProcess").singleResult();  assertNotNull(processDefinition);  assertEquals(2,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);  ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertEquals(processDefinition.getId(),((ProcessDefinition)event.getEntity()).getId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  assertEquals(processDefinition.getId(),((ProcessDefinition)event.getEntity()).getId());  listener.clearEventsReceived();  repositoryService.setProcessDefinitionCategory(processDefinition.getId(),"test");  assertEquals(1,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());  assertEquals(processDefinition.getId(),((ProcessDefinition)event.getEntity()).getId());  assertEquals("test",((ProcessDefinition)event.getEntity()).getCategory());  listener.clearEventsReceived();  repositoryService.suspendProcessDefinitionById(processDefinition.getId());  repositoryService.activateProcessDefinitionById(processDefinition.getId());  assertEquals(2,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(processDefinition.getId(),((ProcessDefinition)event.getEntity()).getId());  assertEquals(ActivitiEventType.ENTITY_SUSPENDED,event.getType());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_ACTIVATED,event.getType());  assertEquals(processDefinition.getId(),((ProcessDefinition)event.getEntity()).getId());  listener.clearEventsReceived();  repositoryService.deleteDeployment(processDefinition.getDeploymentId(),true);  deploymentIdFromDeploymentAnnotation=null;  assertEquals(1,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());  assertEquals(processDefinition.getId(),((ProcessDefinition)event.getEntity()).getId());  listener.clearEventsReceived();}  }
class C{  public VisibilityFilter(Visualization vis,String group,Predicate p){  super(vis,group);  setPredicate(p);}  }
class C{  public WallPinQuery(VkApiClient client,UserActor actor,int postId){  super(client,"wall.pin",OkResponse.class);  accessToken(actor.getAccessToken());  postId(postId);}  }
class C{  @Override public int hashCode(){  if (_stubId != null)   return _stubId.hashCode();  return _part.hashCode();}  }
class C{  @Override public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  protected void dismissProgress(){  if (progress != null) {    progress.dismiss();    progress=null;  }}  }
class C{  public static AbstractStepperType createType(int stepType,StepperLayout stepperLayout){switch (stepType) {case AbstractStepperType.DOTS:    return new DotsStepperType(stepperLayout);case AbstractStepperType.PROGRESS_BAR:  return new ProgressBarStepperType(stepperLayout);case AbstractStepperType.TABS:return new TabsStepperType(stepperLayout);default :Log.e(TAG,"Unsupported type: " + stepType);throw new IllegalArgumentException("Unsupported type: " + stepType);}}  }
class C{  private void drawAsBarChart(Node v,NodeView nv,NodeData data){  long count;  int[] array;  if (scaleBy == ScaleBy.Summarized || v.getOutDegree() == 0) {    count=data.getCountSummarized();    array=data.getSummarized();  } else {    count=data.getCountAssigned();    array=data.getAssigned();  }  Point2D location=nv.getLocation();  Rectangle box=new Rectangle();  viewer.trans.w2d(new Rectangle(0,0,MainViewer.XSTEP,MainViewer.YSTEP),box);  int width;  if (array.length <= 1)   width=30; else   width=(int)(30.0 / array.length * (Math.sqrt(array.length)));  box.setRect(box.x,box.y,width,Math.min(2 * maxNodeHeight,box.height));  if (location == null)   return;  Point apt=viewer.trans.w2d(location);  if (v.getOutDegree() == 0 || count > 0) {    nv.setShape(NodeView.RECT_NODE);    nv.setWidth((int)Math.round((array.length) * box.getWidth()));    nv.setHeight((int)Math.round(box.getHeight()));  } else {    nv.setShape(NodeView.OVAL_NODE);    nv.setWidth(1);    nv.setHeight(1);  }  apt.x-=nv.getWidth() >> 1;  apt.y-=box.getHeight() / 2;  if (data.getUpPValue() >= 0) {    gc.setColor(pvalueColor);    Stroke oldStroke=gc.getStroke();    int leftWidth=getWidthForPValue(data.getUpPValue());    gc.setStroke(new BasicStroke(leftWidth));    gc.drawLine(apt.x - 1,apt.y,apt.x - 1,apt.y + nv.getHeight());    gc.setStroke(oldStroke);  }  if (data.getDownPValue() >= 0) {    gc.setColor(pvalueColor);    Stroke oldStroke=gc.getStroke();    int rightWidth=getWidthForPValue(data.getDownPValue());    gc.setStroke(new BasicStroke(rightWidth));    gc.drawLine(apt.x + nv.getWidth() + 1,apt.y,apt.x + nv.getWidth() + 1,apt.y + nv.getHeight());    gc.setStroke(oldStroke);  }  if (v.getOutDegree() == 0 || count > 0) {    for (int i=0; i < array.length; i++) {      gc.setColor(Color.WHITE);      gc.fill(new Rectangle2D.Double(apt.x + i * box.getWidth(),apt.y,box.getWidth(),box.getHeight()));      gc.setColor(doc.getColorByIndex(i));      double height=box.getHeight() / (double)getMaxNodeHeight() * getScaledSize(array[i]);      gc.fill(new Rectangle2D.Double(apt.x + i * box.getWidth(),apt.y + (box.getHeight() - height),box.getWidth(),height));      gc.setColor(Color.GRAY);      gc.draw(new Rectangle2D.Double(apt.x + i * box.getWidth(),apt.y,box.getWidth(),box.getHeight()));    }  } else   nv.draw(gc,viewer.trans);}  }
class C{  @Override public final void startGroup(Augmentations augs) throws XNIException {  ++fDepth;  initializeContentModelStacks();  fMixed=false;}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  public static void wtf(String tag,String msg){  wtf(tag,msg,null);}  }
class C{  private void moveRecords(Segment seg,ByteBuffer max,boolean deleteFromSource){  checkWritesAllowed();  ByteBuffer from=seg.getMin();  ByteBuffer toExclusive=successor(max);  int batchSize=scanBatchSize();  Iterator<List<ByteBuffer>> batchIter=Iterators.partition(_dao.scanRecords(seg.getDataId(),from,toExclusive,batchSize,Integer.MAX_VALUE),batchSize);  while (batchIter.hasNext()) {    List<ByteBuffer> records=batchIter.next();    addAll(records);    if (deleteFromSource) {      _dao.prepareUpdate(_name).deleteRecords(seg.getDataId(),records).execute();    }  }  seg.setMin(toExclusive);}  }
class C{  public boolean initialiseAR(int videoWidth,int videoHeight,String cameraParaPath,int cameraIndex,boolean cameraIsFrontFacing){  if (!initedNative) {    Log.e(TAG,"Cannot initialise camera because native interface not inited.");    return false;  }  this.frameWidth=videoWidth;  this.frameHeight=videoHeight;  this.cameraIndex=cameraIndex;  this.cameraIsFrontFacing=cameraIsFrontFacing;  if (!NativeInterface.arwStartRunning("-format=NV21",cameraParaPath,10.0f,10000.0f)) {    Log.e(TAG,"Error starting video");    return false;  }  debugImageData=new byte[frameWidth * frameHeight * 4];  debugImageColors=new int[frameWidth * frameHeight];  debugBitmap=Bitmap.createBitmap(frameWidth,frameHeight,Bitmap.Config.ARGB_8888);  return true;}  }
class C{  public void dispose(){  FileUtil.delete(myRootDir);}  }
class C{  public double standardDeviation(boolean bOnlyValue){  return Math.sqrt(variance(bOnlyValue));}  }
class C{  @Override public boolean hasField(String fldName){  return ss1.hasField(fldName) || ss2.hasField(fldName);}  }
class C{  public void createEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  double dStartWeight=0;  double dIncreaseWeight=0;  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace();    }    return;  }  java.util.Iterator iIter=lOtherNodes.iterator();  Vertex vOldA=utils.locateVertexInGraph(gGraph,sStartNode);  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  List lOldEdges;  lOldEdges=gGraph.getEdges(vA);  int iCnt=0;  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    double dOldWeight=0;    double dNewWeight=0;    dStartWeight=ScalingFunction(Math.abs(++iCnt - (lOtherNodes.size() / 2)));    dIncreaseWeight=dStartWeight;    if (eclLocator == null)     eclLocator=new EdgeCachedLocator(10);    WeightedEdge weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vA,vB);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vA,vB,dNewWeight);        eclLocator.addedEdge(e);      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public Variance(boolean isBiasCorrected){  this(new SecondMoment(),true,isBiasCorrected);}  }
class C{  public void removeFilter(JpaRepositoryFilter filter){  filters.remove(filter);}  }
class C{  public void searchLf0InCartTree(HTSModel m,FeatureVector fv,FeatureDefinition featureDef,double uvthresh){  for (int s=0; s < numStates; s++) {    PdfLeafNode node=(PdfLeafNode)lf0Tree[s].interpretToNode(fv,1);    m.setLf0Mean(s,node.getMean());    m.setLf0Variance(s,node.getVariance());    if (node.getVoicedWeight() > uvthresh)     m.setVoiced(s,true); else     m.setVoiced(s,false);  }}  }
class C{  @SuppressWarnings("unchecked") public JavaRDD<MapWritable> readData() throws IOException, PIRException {  logger.info("Reading data ");  JavaRDD<MapWritable> jsonRDD;  Job job=Job.getInstance();  String baseQuery=SystemConfiguration.getProperty("pir.baseQuery");  String jobName="pirSpark_base_" + baseQuery + "_"+ System.currentTimeMillis();  job.setJobName(jobName);  job.getConfiguration().setBoolean("mapreduce.input.fileinputformat.input.dir.recursive",true);  job.getConfiguration().set("query",baseQuery);  logger.debug("queryType = " + bVars.getQueryInfo().getQueryType());  logger.debug("QuerySchemaLoader.getSchemaNames().size() = " + QuerySchemaRegistry.getNames().size());  for (  String name : QuerySchemaRegistry.getNames()) {    logger.debug("schemaName = " + name);  }  job.getConfiguration().set("dataSchemaName",qSchema.getDataSchemaName());  job.getConfiguration().set("data.schemas",SystemConfiguration.getProperty("data.schemas"));  String classString=SystemConfiguration.getProperty("pir.baseInputFormat");  Class<? extends BaseInputFormat<Text,MapWritable>> inputClass;  try {    inputClass=(Class<? extends BaseInputFormat<Text,MapWritable>>)Class.forName(classString);  } catch (  ClassNotFoundException|ClassCastException e) {    throw new PIRException(classString + " cannot be instantiated or does not extend BaseInputFormat",e);  }  job.setInputFormatClass(inputClass);  FileInputFormat.setInputPaths(job,inputData);  jsonRDD=sc.newAPIHadoopRDD(job.getConfiguration(),inputClass,Text.class,MapWritable.class).values().coalesce(numDataPartitions);  if (qSchema.getFilter() != null) {    return jsonRDD.filter(new FilterData(accum,bVars));  } else {    logger.info("qSchema.getFilter() is null");    return jsonRDD;  }}  }
class C{  public static boolean hasAnnotationMirror(Element element,Class<? extends Annotation> annotation,ProcessingEnvironment env){  Elements elements=env.getElementUtils();  for (  AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {    if (annotationMirror.getAnnotationType().asElement().equals(elements.getTypeElement(annotation.getCanonicalName()))) {      return true;    }  }  return false;}  }
class C{  void clearWeight(NlComponent n){  if (mClearWeights == null) {    mClearWeights=new ArrayList<NlComponent>();  }  mClearWeights.add(n);}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException ignored) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  public void changed(DiscoveryEvent e){  ServiceRegistrar[] proxys=e.getRegistrars();  Map groupsMap=e.getGroups();  HashMap changedGroupsMap=new HashMap(proxys.length);  for (int i=0; i < proxys.length; i++) {synchronized (discoveredSet) {      ProxyReg reg=findReg(proxys[i]);      if (reg != null) {        String[] newGroups=(String[])groupsMap.get(reg.proxy);        reg.setMemberGroups(newGroups);        changedGroupsMap.put(reg.proxy,newGroups);      }    }  }  notifyListener(changedGroupsMap,CHANGED);}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mXAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] position=mRenderLimitLinesBuffer;  position[0]=0;  position[1]=0;  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    if (!l.isEnabled())     continue;    position[0]=l.getLimit();    position[1]=0.f;    mTrans.pointValuesToPixel(position);    renderLimitLineLine(c,l,position);    renderLimitLineLabel(c,l,position,2.f + l.getYOffset());  }}  }
class C{  public int entries(){  return m_entries;}  }
class C{  private void addInsertionsToAlignment(SortedMap<Integer,Collection<Pair<Integer,String>>> pos2Insertions,Alignment alignment,ProgressListener progressListener) throws CanceledException {  if (alignment.getReference().getLength() > 0) {    Lane reference=alignment.getReference();    int offset=0;    for (    Integer col : pos2Insertions.keySet()) {      int maxInsertion=0;      Collection<Pair<Integer,String>> insertions=pos2Insertions.get(col);      for (      Pair<Integer,String> pair : insertions) {        maxInsertion=Math.max(maxInsertion,pair.getSecond().length());      }      col+=offset;      if (maxInsertion > 0) {        if (col < reference.getLeadingGaps()) {          reference.setLeadingGaps(reference.getLeadingGaps() + maxInsertion);        } else         if (col < reference.getLeadingGaps() + reference.getBlock().length()) {          int insertAfter=col - reference.getLeadingGaps();          reference.setBlock(reference.getBlock().substring(0,insertAfter + 1) + gaps(maxInsertion) + reference.getBlock().substring(insertAfter + 1,reference.getBlock().length()));        } else         if (col > reference.getLeadingGaps() + reference.getBlock().length()) {          reference.setTrailingGaps(reference.getTrailingGaps() + maxInsertion);        }        offset+=maxInsertion;      }      for (int i=col + 1; i < col + maxInsertion + 1; i++) {        alignment.getInsertionsIntoReference().add(i);      }      progressListener.checkForCancel();    }  }  if (alignment.getNumberOfSequences() > 0) {    for (int row=0; row < alignment.getNumberOfSequences(); row++) {      alignment.getLane(row).setBlock(alignment.getLane(row).getBlock().toUpperCase());    }    int offset=0;    for (    Integer col : pos2Insertions.keySet()) {      int maxInsertion=0;      Collection<Pair<Integer,String>> insertions=pos2Insertions.get(col);      for (      Pair<Integer,String> pair : insertions) {        maxInsertion=Math.max(maxInsertion,pair.getSecond().length());      }      col+=offset;      if (maxInsertion > 0) {        Set<Integer> seen=new HashSet<>();        for (        Pair<Integer,String> pair : insertions) {          int row=pair.getFirst();          seen.add(row);          String insert=pair.getSecond();          Lane lane=alignment.getLane(row);          if (col < lane.getLeadingGaps()) {            lane.setLeadingGaps(lane.getLeadingGaps() + maxInsertion);          } else           if (col < lane.getLeadingGaps() + lane.getBlock().length()) {            int insertAfter=col - lane.getLeadingGaps();            lane.setBlock(lane.getBlock().substring(0,insertAfter + 1) + insert.toLowerCase() + gaps(maxInsertion - insert.length())+ lane.getBlock().substring(insertAfter + 1,lane.getBlock().length()));          } else           if (col > lane.getLeadingGaps() + lane.getBlock().length()) {            lane.setTrailingGaps(lane.getTrailingGaps() + maxInsertion);          }        }        for (int row=0; row < alignment.getNumberOfSequences(); row++) {          if (!seen.contains(row)) {            Lane lane=alignment.getLane(row);            if (col < lane.getLeadingGaps()) {              lane.setLeadingGaps(lane.getLeadingGaps() + maxInsertion);            } else             if (col < lane.getLeadingGaps() + lane.getBlock().length()) {              int insertAfter=col - lane.getLeadingGaps();              lane.setBlock(lane.getBlock().substring(0,insertAfter + 1) + gaps(maxInsertion) + lane.getBlock().substring(insertAfter + 1,lane.getBlock().length()));            } else             if (col > lane.getLeadingGaps() + lane.getBlock().length()) {              lane.setTrailingGaps(lane.getTrailingGaps() + maxInsertion);            }          }        }        offset+=maxInsertion;      }      progressListener.checkForCancel();    }  }}  }
class C{  private void loadLabelText(JLabel component,String text){  StringBuffer result=new StringBuffer();  boolean haveMnemonic=false;  char mnemonic='\0';  int mnemonicIndex=-1;  for (int i=0; i < text.length(); i++) {    if (text.charAt(i) == '&') {      i++;      if (i == text.length()) {        break;      }      if (!haveMnemonic && text.charAt(i) != '&') {        haveMnemonic=true;        mnemonic=text.charAt(i);        mnemonicIndex=result.length();      }    }    result.append(text.charAt(i));  }  component.setText(result.toString());  if (haveMnemonic) {    component.setDisplayedMnemonic(mnemonic);    component.setDisplayedMnemonicIndex(mnemonicIndex);  }}  }
class C{  public AuditLogEntry(Calendar time,UserInfo user,AuditLogAction action){  this(time,user,action,null,null,null,null,null);}  }
class C{  @Override public long skip(long n) throws IOException {  long bytesSkipped=fInputStream.skip(n << 1);  if ((bytesSkipped & 1) != 0) {    int b=fInputStream.read();    if (b == -1) {      expectedTwoBytes();    }    ++bytesSkipped;  }  return bytesSkipped >> 1;}  }
class C{  private int[] createPalette(){  int[] palette=new int[PALETTE_SIZE];  float[] hsv=new float[3];  hsv[1]=hsv[2]=1;  for (int i=0; i < PALETTE_SIZE; i++) {    hsv[0]=(HUE_END - HUE_BEGIN) * i / PALETTE_SIZE + HUE_BEGIN;    palette[i]=Color.HSVToColor(hsv);  }  return palette;}  }
class C{  public TAC2008TopicFileSet(String sTopicXMLFile,String sCorpusRootDir) throws ParserConfigurationException, SAXException, IOException {  TopicFile=sTopicXMLFile;  CorpusDir=sCorpusRootDir;  DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();  TopicXMLDoc=docBuilder.parse(new File(sTopicXMLFile));  Categories=null;  TrainingFiles=null;  TestFiles=null;}  }
class C{  static Collection<ViewAnimationInfo> generate(int delta,boolean isSelected,@NonNull RecyclerView.LayoutManager layoutManager,int centerViewPos,boolean isCollapsed){  final List<ViewAnimationInfo> infoViews=new ArrayList<>();  View view;  int viewPosition;  ViewAnimationInfo info;  int isSelectedKoef;  int collapseKoef;  for (int count=layoutManager.getChildCount(), i=0; i < count; i++) {    view=layoutManager.getChildAt(i);    viewPosition=layoutManager.getPosition(view);    if (viewPosition == centerViewPos) {      continue;    }    info=new ViewAnimationInfo();    info.view=view;    info.startLeft=layoutManager.getDecoratedLeft(view);    info.startRight=layoutManager.getDecoratedRight(view);    info.top=layoutManager.getDecoratedTop(view);    info.bottom=layoutManager.getDecoratedBottom(view);    if (viewPosition < centerViewPos) {      isSelectedKoef=isSelected ? -1 : 1;      collapseKoef=isCollapsed ? centerViewPos - viewPosition : 1;      info.finishLeft=info.startLeft + delta * isSelectedKoef * collapseKoef;      info.finishRight=info.startRight + delta * isSelectedKoef * collapseKoef;    } else {      isSelectedKoef=isSelected ? 1 : -1;      collapseKoef=isCollapsed ? viewPosition - centerViewPos : 1;      info.finishLeft=info.startLeft + delta * isSelectedKoef * collapseKoef;      info.finishRight=info.startRight + delta * isSelectedKoef * collapseKoef;    }    infoViews.add(info);  }  return infoViews;}  }
class C{  public static Experiment createExperimentWithRule(){  Experiment experiment=ExperimentFactory.createExperiment();  experiment.rule="(salary < 10000) && (state = 'VA')";  return experiment;}  }
class C{  private BpmResult logOnGoogleAuth(final LoginData loginData){  OkHttpClient http;  CredentialProvider cp;  http=new OkHttpClient();  final String authCode=loginData.getToken();  final boolean saveAuth=config.getBool(ConfigKey.LOGIN_SAVE_AUTH);  boolean shouldRefresh=false;  if (loginData.isSavedToken() && saveAuth) {    shouldRefresh=true;  }  try {    final GoogleUserCredentialProvider provider;    if (shouldRefresh) {      provider=new GoogleUserCredentialProvider(http,authCode);    } else {      provider=new GoogleUserCredentialProvider(http);      provider.login(authCode);    }    if (provider.isTokenIdExpired()) {      throw new LoginFailedException();    }    cp=provider;    if (saveAuth && !shouldRefresh) {      config.setString(ConfigKey.LOGIN_GOOGLE_AUTH_TOKEN,provider.getRefreshToken());    } else     if (!saveAuth) {      deleteLoginData(LoginType.GOOGLE_AUTH);    }  } catch (  LoginFailedException|RemoteServerException e) {    deleteLoginData(LoginType.GOOGLE_APP_PASSWORD);    return new BpmResult(e.getMessage());  }  try {    prepareLogin(cp,http);    return new BpmResult();  } catch (  LoginFailedException|RemoteServerException e) {    deleteLoginData(LoginType.ALL);    return new BpmResult(e.getMessage());  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public LShiftExpr fullCopy(){  LShiftExpr tree=(LShiftExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public final void run(){  boolean deadlock=false;  while (!deadlock) {    try {      long[] ids=tmx.findDeadlockedThreads();      if (ids != null) {        deadlock=true;        ThreadInfo[] tis=tmx.getThreadInfo(ids,true,true);        String info="DeadLock Found!\n";        for (        ThreadInfo ti : tis) {          info+=ti.toString();        }        for (        ThreadInfo ti : tis) {          LockInfo[] locks=ti.getLockedSynchronizers();          MonitorInfo[] monitors=ti.getLockedMonitors();          if (locks.length == 0 && monitors.length == 0) {            continue;          }          ThreadInfo dl=ti;          info+="Java-level deadlock:\n";          info+="\t" + dl.getThreadName() + " is waiting to lock "+ dl.getLockInfo().toString()+ " which is held by "+ dl.getLockOwnerName()+ "\n";          while ((dl=tmx.getThreadInfo(new long[]{dl.getLockOwnerId()},true,true)[0]).getThreadId() != ti.getThreadId()) {            info+="\t" + dl.getThreadName() + " is waiting to lock "+ dl.getLockInfo().toString()+ " which is held by "+ dl.getLockOwnerName()+ "\n";          }        }        log.warn(info);        if (doWhenDL == RESTART) {          System.exit(ExitCode.CODE_RESTART);        }      }      Thread.sleep(sleepTime);    } catch (    Exception e) {      log.warn("DeadLockDetector: " + e,e);    }  }}  }
class C{  private void calcAngles(){  mDrawAngles=new float[mData.getYValCount()];  mAbsoluteAngles=new float[mData.getYValCount()];  float yValueSum=mData.getYValueSum();  List<IPieDataSet> dataSets=mData.getDataSets();  int cnt=0;  for (int i=0; i < mData.getDataSetCount(); i++) {    IPieDataSet set=dataSets.get(i);    for (int j=0; j < set.getEntryCount(); j++) {      mDrawAngles[cnt]=calcAngle(Math.abs(set.getEntryForIndex(j).getVal()),yValueSum);      if (cnt == 0) {        mAbsoluteAngles[cnt]=mDrawAngles[cnt];      } else {        mAbsoluteAngles[cnt]=mAbsoluteAngles[cnt - 1] + mDrawAngles[cnt];      }      cnt++;    }  }}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  protected void removeContainer() throws Throwable {  if (containerId == null) {    return;  }  sendDeleteContainerRequest();  waitForPropertyValue(provisioningTaskLink,MockTaskState.class,"taskInfo.stage",TaskState.TaskStage.FINISHED);  if (!isMockTarget()) {    Thread.sleep(2000L);  }  verifyContainerDoesNotExist(containerId);}  }
class C{  public static StorableActivityFence during(@ActivityType int... activityTypes){  return new StorableActivityFence(activityTypes,DURING_TYPE);}  }
class C{  public float[] evaluate(DataFrame dataset){  List<String> correctSequences=dataset.javaRDD().map(new RowToStringFunction(1)).collect();  long beginTime=System.currentTimeMillis();  DataFrame output=cmmModel.transform(dataset);  long endTime=System.currentTimeMillis();  if (verbose) {    System.out.println(" Number of sentences = " + correctSequences.size());    long duration=(endTime - beginTime);    System.out.println("  Total tagging time = " + duration + " ms.");    System.out.println("Average tagging time = " + ((float)duration) / correctSequences.size() + " ms.");  }  List<String> automaticSequences=output.javaRDD().map(new RowToStringFunction(1)).collect();  return Evaluator.evaluate(automaticSequences,correctSequences);}  }
class C{  @Override public void updateFields(DataSourceAttributeListInterface attributeData){}  }
class C{  @Override public boolean isEmpty(){  return mSize <= 0;}  }
class C{  private void doPostConfigurationOfProcessControlTags(){  for (  Long key : getKeys()) {    doPostDbLoading(get(key));  }}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public WallGetByIdQueryWithExtended(VkApiClient client,UserActor actor,String... posts){  super(client,"wall.getById",GetByIdExtendedResponse.class);  accessToken(actor.getAccessToken());  posts(posts);  extended(true);}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  private void openLogFile() throws IOException {  try {    close();  } catch (  IOException e) {  }  logName=versionName(logfilePrefix);  log=new RandomAccessFile(logName,"rw");  logFD=log.getFD();  if (logBytes == 0) {    format=FORMAT_PADDED;    writeInt(log,MAGIC);    writeInt(log,format);    logBytes=(intBytes + intBytes);  } else {    log.seek(logBytes);  }  log.setLength(logBytes);  log.write(zeroBuf);  logFD.sync();}  }
class C{  public static CanFollow fromSnippets(KindredSnippets[] snippets){  for (  KindredSnippets obj : snippets) {    if (obj instanceof CanFollow) {      return (CanFollow)obj;    }  }  return null;}  }
class C{  int positionEnd(){  return positionStart + itemCount;}  }
class C{  public static User createFromJSONString(String json){  return new GsonBuilder().create().fromJson(json,User.class);}  }
class C{  public String prototype(cp_info constant_pool[]){  CONSTANT_Utf8_info cm, dm;  String s;  cm=(CONSTANT_Utf8_info)(constant_pool[name_index]);  dm=(CONSTANT_Utf8_info)(constant_pool[descriptor_index]);  s=ClassFile.access_string(access_flags," ");  if (s.compareTo("") != 0)   s=s + " ";  return s + ClassFile.parseDesc(dm.convert(),"") + " "+ cm.convert();}  }
class C{  public void delete(final PutFlags... f){  if (SHOULD_CHECK) {    checkNotClosed();    txn.checkReady();    txn.checkWritesAllowed();  }  final int flags=mask(f);  checkRc(LIB.mdb_cursor_del(ptrCursor,flags));}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  @Override public final void processValues(final DataTagValueUpdate dataTagValueUpdate) throws JMSException {  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("entering processValues()...");  }  if (this.isEnabled) {    SourceDataTagValue sdtValue=(SourceDataTagValue)dataTagValueUpdate.getValues().iterator().next();    jmsTemplate.setPriority(sdtValue.getPriority());    jmsTemplate.setTimeToLive(sdtValue.getTimeToLive());    if (sdtValue.isGuaranteedDelivery()) {      LOGGER.debug("\t sending PERSISTENT message");      jmsTemplate.setDeliveryMode(javax.jms.DeliveryMode.PERSISTENT);    } else {      LOGGER.debug("\t sending NON-PERSISTENT message");      jmsTemplate.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);    }    jmsTemplate.convertAndSend(dataTagValueUpdate);  } else {    LOGGER.debug("DAQ in test mode; not sending the value to JMS");  }  LOGGER.debug("leaving processValues()");}  }
class C{  public static Map<String,Object> alwaysNsfProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  Debug.logInfo("Test Processor NSF Credit Card",module);  String refNum=UtilDateTime.nowAsString();  result.put("authResult",Boolean.FALSE);  result.put("resultNsf",Boolean.TRUE);  result.put("processAmount",processAmount);  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authFlag","N");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestProcessor",locale));  return result;}  }
class C{  public final void writeLine(final IFallback object) throws DataFallbackException {  String str=object.toString();  try {    output.write(str);    output.newLine();    output.flush();  } catch (  IOException e) {    throw new DataFallbackException("writeLine() : An error has ocurred while trying to write in the " + getDataFile().getName() + " file "+ e.getMessage());  }  if (LOG.isDebugEnabled()) {    LOG.debug("writeLine() - The object with id " + object.getId() + " has been logged to the "+ dataFile.getPath()+ " file");  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private static boolean ignoreUsage(UsageInfo usage){  if (usage.getReference() instanceof GlobReference && usage instanceof SafeDeleteUsageInfo) {    PsiElement referencedElement=((SafeDeleteUsageInfo)usage).getReferencedElement();    PsiFileSystemItem file=ResolveUtil.asFileSystemItemSearch(referencedElement);    String relativePath=getBlazePackageRelativePathToFile(file);    if (relativePath == null) {      return false;    }    return !((GlobReference)usage.getReference()).matchesDirectly(relativePath,file.isDirectory());  }  return false;}  }
class C{  public boolean isGlobalScope(){  return true;}  }
class C{  public static void writeVInt(DataOutput stream,int i) throws IOException {  writeVLong(stream,i);}  }
class C{  public static byte[] int32RGBBufferedImageToByteArray(BufferedImage img){  int[] pixels=null;  DataBuffer db=img.getRaster().getDataBuffer();  if (db instanceof DataBufferInt)   pixels=((DataBufferInt)db).getData(); else   throw new RuntimeException("Format not supported...");  byte[] ret=new byte[pixels.length * 4];  for (int i=0; i < pixels.length; i++) {    ret[4 * i]=(byte)(pixels[i] & 0xff000000);    ret[4 * i + 1]=(byte)(pixels[i] & 0x00ff0000);    ret[4 * i + 2]=(byte)(pixels[i] & 0x0000ff00);    ret[4 * i + 3]=(byte)(pixels[i] & 0x000000ff);  }  return ret;}  }
class C{  public int generateDirectSurrogateKey(String memberStr,String format){  if (null == format) {    return generateDirectSurrogateKeyForNonTimestampType(memberStr);  } else {    SimpleDateFormat timeParser=new SimpleDateFormat(format);    timeParser.setLenient(false);    if (null == memberStr || memberStr.trim().isEmpty() || memberStr.equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {      return 1;    }    return getDirectSurrogateForMember(memberStr,timeParser);  }}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  public boolean isDirect(){  return direct;}  }
class C{  private void processResultFromGallery(int destType,Intent intent){  Uri uri=intent.getData();  if (uri == null) {    if (croppedUri != null) {      uri=croppedUri;    } else {      this.failPicture("null data from photo library");      return;    }  }  int rotate=0;  String fileLocation=FileHelper.getRealPath(uri,this.cordova);  Log.d(LOG_TAG,"File locaton is: " + fileLocation);  if (this.mediaType != PICTURE) {    this.callbackContext.success(fileLocation);  } else {    if (this.targetHeight == -1 && this.targetWidth == -1 && (destType == FILE_URI || destType == NATIVE_URI) && !this.correctOrientation) {      this.callbackContext.success(uri.toString());    } else {      String uriString=uri.toString();      String mimeType=FileHelper.getMimeType(uriString,this.cordova);      if (!("image/jpeg".equalsIgnoreCase(mimeType) || "image/png".equalsIgnoreCase(mimeType))) {        Log.d(LOG_TAG,"I either have a null image path or bitmap");        this.failPicture("Unable to retrieve path to picture!");        return;      }      Bitmap bitmap=null;      try {        bitmap=getScaledBitmap(uriString);      } catch (      IOException e) {        e.printStackTrace();      }      if (bitmap == null) {        Log.d(LOG_TAG,"I either have a null image path or bitmap");        this.failPicture("Unable to create bitmap!");        return;      }      if (this.correctOrientation) {        rotate=getImageOrientation(uri);        if (rotate != 0) {          Matrix matrix=new Matrix();          matrix.setRotate(rotate);          try {            bitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);            this.orientationCorrected=true;          } catch (          OutOfMemoryError oom) {            this.orientationCorrected=false;          }        }      }      if (destType == DATA_URL) {        this.processPicture(bitmap,this.encodingType);      } else       if (destType == FILE_URI || destType == NATIVE_URI) {        if ((this.targetHeight > 0 && this.targetWidth > 0) || (this.correctOrientation && this.orientationCorrected)) {          try {            String modifiedPath=this.ouputModifiedBitmap(bitmap,uri);            this.callbackContext.success("file://" + modifiedPath + "?"+ System.currentTimeMillis());          } catch (          Exception e) {            e.printStackTrace();            this.failPicture("Error retrieving image.");          }        } else {          this.callbackContext.success(fileLocation);        }      }      if (bitmap != null) {        bitmap.recycle();        bitmap=null;      }      System.gc();    }  }}  }
class C{  public Partitions prunePartitions(Set<String> validPartitions){  if (validPartitions != null && !validPartitions.isEmpty()) {    partitions.retainAll(validPartitions);  }  return this;}  }
class C{  public DynamicTemplateParameterContext appendParameter(String paramName,String paramValue){  return appendParameter(paramName,paramValue,ContextInfo.EMPTY);}  }
class C{  public static S2LatLngRect full(){  return new S2LatLngRect(fullLat(),fullLng());}  }
class C{  private Base64(){}  }
class C{  public HectorCassandraClientConfigurer keyspaceName(String keyspaceName){  this.keyspaceName=keyspaceName;  return this;}  }
class C{  @Override public boolean checkUniqueParticleAttribution(SubstitutionGroupHandler subGroupHandler) throws XMLSchemaException {  byte conflictTable[][]=new byte[fElemMapSize][fElemMapSize];  for (int i=0; i < fTransTable.length && fTransTable[i] != null; i++) {    for (int j=0; j < fElemMapSize; j++) {      for (int k=j + 1; k < fElemMapSize; k++) {        if (fTransTable[i][j] != -1 && fTransTable[i][k] != -1) {          if (conflictTable[j][k] == 0) {            if (XSConstraints.overlapUPA(fElemMap[j],fElemMap[k],subGroupHandler)) {              if (fCountingStates != null) {                Occurence o=fCountingStates[i];                if (o != null && fTransTable[i][j] == i ^ fTransTable[i][k] == i && o.minOccurs == o.maxOccurs) {                  conflictTable[j][k]=(byte)-1;                  continue;                }              }              conflictTable[j][k]=(byte)1;            } else {              conflictTable[j][k]=(byte)-1;            }          }        }      }    }  }  for (int i=0; i < fElemMapSize; i++) {    for (int j=0; j < fElemMapSize; j++) {      if (conflictTable[i][j] == 1) {        throw new XMLSchemaException("cos-nonambig",new Object[]{fElemMap[i].toString(),fElemMap[j].toString()});      }    }  }  for (int i=0; i < fElemMapSize; i++) {    if (fElemMapType[i] == XSParticleDecl.PARTICLE_WILDCARD) {      XSWildcardDecl wildcard=(XSWildcardDecl)fElemMap[i];      if (wildcard.fType == XSWildcard.NSCONSTRAINT_LIST || wildcard.fType == XSWildcard.NSCONSTRAINT_NOT) {        return true;      }    }  }  return false;}  }
class C{  public void testGroupMembershipEvents() throws Exception {  TestActivitiIdmEventListener membershipListener=new TestActivitiIdmEventListener();  processEngineConfiguration.getIdmEventDispatcher().addEventListener(membershipListener);  User user=null;  Group group=null;  try {    user=identityService.newUser("kermit");    identityService.saveUser(user);    group=identityService.newGroup("sales");    identityService.saveGroup(group);    membershipListener.clearEventsReceived();    identityService.createMembership("kermit","sales");    assertEquals(1,membershipListener.getEventsReceived().size());    assertTrue(membershipListener.getEventsReceived().get(0) instanceof ActivitiIdmMembershipEvent);    ActivitiIdmMembershipEvent event=(ActivitiIdmMembershipEvent)membershipListener.getEventsReceived().get(0);    assertEquals(ActivitiIdmEventType.MEMBERSHIP_CREATED,event.getType());    assertEquals("sales",event.getGroupId());    assertEquals("kermit",event.getUserId());    membershipListener.clearEventsReceived();    identityService.deleteMembership("kermit","sales");    assertEquals(1,membershipListener.getEventsReceived().size());    assertTrue(membershipListener.getEventsReceived().get(0) instanceof ActivitiIdmMembershipEvent);    event=(ActivitiIdmMembershipEvent)membershipListener.getEventsReceived().get(0);    assertEquals(ActivitiIdmEventType.MEMBERSHIP_DELETED,event.getType());    assertEquals("sales",event.getGroupId());    assertEquals("kermit",event.getUserId());    membershipListener.clearEventsReceived();    identityService.createMembership("kermit","sales");    membershipListener.clearEventsReceived();    identityService.deleteGroup(group.getId());    assertEquals(2,membershipListener.getEventsReceived().size());    assertTrue(membershipListener.getEventsReceived().get(0) instanceof ActivitiIdmMembershipEvent);    event=(ActivitiIdmMembershipEvent)membershipListener.getEventsReceived().get(0);    assertEquals(ActivitiIdmEventType.MEMBERSHIPS_DELETED,event.getType());    assertEquals("sales",event.getGroupId());    assertNull(event.getUserId());    membershipListener.clearEventsReceived();  }  finally {    processEngineConfiguration.getIdmEventDispatcher().removeEventListener(membershipListener);    if (user != null) {      identityService.deleteUser(user.getId());    }    if (group != null) {      identityService.deleteGroup(group.getId());    }  }}  }
class C{  public VideoSearchQueryWithExtended sort(VideoSearchSort value){  return unsafeParam("sort",value);}  }
class C{  private Animation applySlideDownAnimationTo(View view){  Animation animation=new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,-1.0f,Animation.RELATIVE_TO_SELF,0.0f);  animation.setDuration(100);  animation.setInterpolator(new AccelerateInterpolator());  view.startAnimation(animation);  return animation;}  }
class C{  public void createSets(){  createSets(true,1.0,false);}  }
class C{  public Vector2f divideLocal(float scalar){  x/=scalar;  y/=scalar;  return this;}  }
class C{  public S2Point interpolate(double fraction){  if (fraction <= 0) {    return vertex(0);  }  double lengthSum=0;  for (int i=1; i < numVertices(); ++i) {    lengthSum+=vertex(i - 1).angle(vertex(i));  }  double target=fraction * lengthSum;  for (int i=1; i < numVertices(); ++i) {    double length=vertex(i - 1).angle(vertex(i));    if (target < length) {      double f=Math.sin(target) / Math.sin(length);      return S2Point.add(S2Point.mul(vertex(i - 1),(Math.cos(target) - f * Math.cos(length))),S2Point.mul(vertex(i),f));    }    target-=length;  }  return vertex(numVertices() - 1);}  }
class C{  public static S2CellId fromPoint(S2Point p){  int face=S2Projections.xyzToFace(p);  R2Vector uv=S2Projections.validFaceXyzToUv(face,p);  int i=stToIJ(S2Projections.uvToST(uv.x()));  int j=stToIJ(S2Projections.uvToST(uv.y()));  return fromFaceIJ(face,i,j);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200414,num0,skillname);}  }
class C{  public boolean inheritedParameters(){  return this.inheritedParameters;}  }
class C{  public void startComponents(){  startComponents(true);  startComponents(false);  _spaceMode=SpaceMode.PRIMARY;}  }
class C{  public void addCategoriesListener(SnapshotCategoriesListener listener){  listeners.add(listener);}  }
class C{  @Override public void initialise(marytts.modules.synthesis.Voice aMaryVoice,String lexiconClassName){  super.initialise(aMaryVoice,lexiconClassName);  if (!aMaryVoice.getLocale().equals(Locale.US)) {    throw new IllegalArgumentException("This dummy freetts voice is meant for US English voices only!");  }}  }
class C{  @POST @Consumes("text/plain") @Verify public void post(@HeaderParam(DKIMSignature.DKIM_SIGNATURE) DKIMSignature signature,String input){  Assert.assertNotNull(signature);  System.out.println(signature);  Assert.assertEquals(input,"hello world");}  }
class C{  @Override public void nodeLeft(final ClusterNode clusterNode){  LOGGER.info("Detected Terracotta node left cluster: " + clusterNode.getId());}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  private boolean trimToSize(){  List<String> toEvict=new ArrayList<>();  int num=0;  Cursor c=mDatabaseSupplier.getDatabase().query(WXSQLiteOpenHelper.TABLE_STORAGE,new String[]{WXSQLiteOpenHelper.COLUMN_KEY,WXSQLiteOpenHelper.COLUMN_PERSISTENT},null,null,null,null,WXSQLiteOpenHelper.COLUMN_TIMESTAMP + " ASC");  try {    int evictSize=c.getCount() / 10;    while (c.moveToNext()) {      String key=c.getString(c.getColumnIndex(WXSQLiteOpenHelper.COLUMN_KEY));      boolean persistent=c.getInt(c.getColumnIndex(WXSQLiteOpenHelper.COLUMN_PERSISTENT)) == 1;      if (!persistent && key != null) {        num++;        toEvict.add(key);        if (num == evictSize) {          break;        }      }    }  } catch (  Exception e) {    WXLogUtils.e(WXSQLiteOpenHelper.TAG_STORAGE,"DefaultWXStorage occurred an exception when execute trimToSize:" + e.getMessage());  } finally {    c.close();  }  if (num <= 0) {    return false;  }  for (  String key : toEvict) {    performRemoveItem(key);  }  WXLogUtils.e(WXSQLiteOpenHelper.TAG_STORAGE,"remove " + num + " items by lru");  return true;}  }
class C{  public KendallsCorrelation(){  correlationMatrix=null;}  }
class C{  public GenericValue create(GenericValue value) throws GenericEntityException {  if (value == null) {    return null;  }  int retVal=genericDAO.insert(value);  if (Debug.verboseOn())   Debug.logVerbose("Insert Return Value : " + retVal,module);  return value;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Snare_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200774,skillcaster,skillname);}  }
class C{  public void deleteFaceList(@NotNull String faceListId){  faceListBuilder.deleteFaceList(faceListId).withNoResult();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_STIGMA_NOT_USABLE_SKILL(String value0){  return new SM_SYSTEM_MESSAGE(1300414,value0);}  }
class C{  public static Map<String,Object> entityFailTest(DispatchContext dctx,Map<String,?> context){  Delegator delegator=dctx.getDelegator();  Locale locale=(Locale)context.get("locale");  GenericValue newEntity=delegator.makeValue("DataSource");  newEntity.set("dataSourceId","ENTITY_FAIL_TEST");  newEntity.set("dataSourceTypeId","ENTITY_FAIL_TEST");  newEntity.set("description","Entity Fail Test - Delete me if I am here");  try {    delegator.create(newEntity);  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEntityTestFailure",locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  public static void showError(String message){  showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,60000);}  }
class C{  public MarketEditCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){  super(client,"market.editComment",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  commentId(commentId);}  }
class C{  Domino<T,R> defaultScheduler(){  return schedule(new DefaultScheduler());}  }
class C{  @Override public List<Class<? extends ConfigAspect>> mergeDependencies(){  return ImmutableList.of();}  }
class C{  public static boolean playerHasIngredients(EntityPlayerMP player,List<ItemStack> ingredients){  ItemStack[] main=player.inventory.mainInventory;  ItemStack[] arm=player.inventory.armorInventory;  for (  ItemStack isIngredient : ingredients) {    int target=isIngredient.stackSize;    for (int i=0; i < main.length + arm.length && target > 0; i++) {      ItemStack isPlayer=(i >= main.length) ? arm[i - main.length] : main[i];      if (isPlayer != null && isIngredient != null && itemStackIngredientsMatch(isPlayer,isIngredient))       target-=isPlayer.stackSize;    }    if (target > 0)     return false;  }  return true;}  }
class C{  private String readPacFileContent(String scriptUrl) throws IOException {  try {    File file=null;    if (scriptUrl.indexOf(":/") == -1) {      file=new File(scriptUrl);    } else {      file=new File(new URL(scriptUrl).toURI());    }    BufferedReader r=new BufferedReader(new FileReader(file));    StringBuilder result=new StringBuilder();    try {      String line;      while ((line=r.readLine()) != null) {        result.append(line).append("\n");      }    }  finally {      r.close();    }    return result.toString();  } catch (  Exception e) {    System.out.println(System.getProperty("user.dir"));    Logger.log(getClass(),LogLevel.ERROR,"File reading error.",e);    throw new IOException(e.getMessage());  }}  }
class C{  @NotNull static String formatMessage(@NotNull String format,@NotNull String msg){  if (format.isEmpty()) {    return msg;  }  LogCatMessage message=parseMessage(msg);  return formatMessage(format,message.getHeader(),message.getMessage());}  }
class C{  public int findFirstCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(0,getChildCount(),true);  return child == null ? NO_POSITION : getPosition(child);}  }
class C{  public int max_container_size(){  return soot.PhaseOptions.getInt(options,"max-container-size");}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public MemberClassDecl fullCopy(){  MemberClassDecl tree=(MemberClassDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCost_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200792,skillcaster,skillname);}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public Builder marginTop(int marginTop){  this.marginTop=marginTop;  return this;}  }
class C{  public MovePageWindow typeDestinationPath(String destinationPath){  AemPathWindow pathWindow=lookupField.openPathWindow();  pathWindow.getContentTree().selectPath(destinationPath);  pathWindow.clickOk();  return this;}  }
class C{  public SyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  super(fixNoHttpResponseException,httpPort,httpsPort);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public GSTopicPublisherImpl(GSSessionImpl sess,GSTopicImpl topic,IMessageConverter messageConverter) throws JMSException {  super(sess,topic,messageConverter);}  }
class C{  public BoardCreateCommentQuery createComment(UserActor actor,int groupId,int topicId){  return new BoardCreateCommentQuery(getClient(),actor,groupId,topicId);}  }
class C{  public static void writeln(String fileName,Object[] objects){  if (writer == null) {    createWriter(fileName);    for (    Object obj : objects) {      writeln(obj.toString());    }    closeWriter();  }}  }
class C{  public void typeCheck(){  if (constant().error)   error("The integer literal \"" + getLITERAL() + "\" is too large for type int.");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANNOT_RESURRECT_HERE_BY_ABYSS_POINT_ZERO(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400024,value1,value0);}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  public void append(File file,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {  if (!file.exists()) {    throw new FileNotFoundException(file.getAbsolutePath());  }  InputStream inputStream=null;  try {    inputStream=new FileInputStream(file);  } catch (  IOException e) {    throw new FTPDataTransferException(e);  }  try {    append(file.getName(),inputStream,0,listener);  } catch (  IllegalStateException e) {    throw e;  }catch (  IOException e) {    throw e;  }catch (  FTPIllegalReplyException e) {    throw e;  }catch (  FTPException e) {    throw e;  }catch (  FTPDataTransferException e) {    throw e;  }catch (  FTPAbortedException e) {    throw e;  } finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      Throwable t) {        ;      }    }  }}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  private boolean cancelDiscardScrollingAnimation(){  if (mOverviewAnimationType == OverviewAnimationType.DISCARD || mOverviewAnimationType == OverviewAnimationType.UNDISCARD || mOverviewAnimationType == OverviewAnimationType.DISCARD_ALL) {    mTabAnimations.cancel(null,StackTab.Property.SCROLL_OFFSET);    return true;  }  return false;}  }
class C{  public void detachAllChildren(){  for (int i=children.size() - 1; i >= 0; i--) {    detachChildAt(i);  }  logger.info("All children removed.");}  }
class C{  public LitePalApplication(){  sContext=this;}  }
class C{  public void add(Metric m){  final MetricName key=m.getName();  metrics_.put(key,m);}  }
class C{  public boolean string_constants(){  return soot.PhaseOptions.getBoolean(options,"string-constants");}  }
class C{  public boolean swapBuffers(){  boolean result=eglCore.swapBuffers(eGLSurface);  if (!result) {    Log.i(TAG,"WARNING: swapBuffers() failed");  }  return result;}  }
class C{  private boolean isMultipart(Object content){  return content instanceof Multipart;}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,null,lines,lineEnding,false);}  }
class C{  private boolean mustUpdateCoordinates(){  boolean mustUpdate=(dataMatrix.size() == 0);  if (previousTranspose != isTranspose()) {    mustUpdate=true;  }  if (scalingType != ChartViewer.ScalingType.LINEAR)   return mustUpdate;  if (previousTranspose != isTranspose()) {    previousTranspose=isTranspose();    previousClusterSeries=false;    previousClusterClasses=false;  }{    final ArrayList<String> currentClasses=new ArrayList<>();    currentClasses.addAll(getChartData().getClassNames());    if (!previousClasses.equals(currentClasses)) {      mustUpdate=true;      previousClasses.clear();      previousClasses.addAll(currentClasses);    }  }{    final ArrayList<String> currentSamples=new ArrayList<>();    currentSamples.addAll(getChartData().getSeriesNames());    if (!previousSamples.equals(currentSamples)) {      mustUpdate=true;      previousSamples.clear();      previousSamples.addAll(currentSamples);    }  }{    if (!previousClusterClasses && viewer.getClassesList().isDoClustering() && !isTranspose())     mustUpdate=true;  }{    if (!previousClusterSeries && viewer.getSeriesList().isDoClustering() && isTranspose())     mustUpdate=true;  }  return mustUpdate;}  }
class C{  private List<String> generateMultipleTestTasks() throws Exception {  List<String> ids=new ArrayList<String>();  SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy hh:mm:ss.SSS");  processEngineConfiguration.getClock().setCurrentTime(sdf.parse("01/01/2001 01:01:01.000"));  for (int i=0; i < 100; i++) {    Task task=taskService.newTask();    task.setName("testTask");    task.setDescription("testTask description");    task.setPriority(3);    taskService.saveTask(task);    ids.add(task.getId());    taskService.setVariableLocal(task.getId(),"test","test");    taskService.setVariableLocal(task.getId(),"testBinary","This is a binary variable".getBytes());    taskService.addCandidateUser(task.getId(),"kermit");  }  return ids;}  }
class C{  public boolean hasRequiredMembers(){  int memberSize=getLegionMembers().size();switch (getLegionLevel()) {case 1:    return memberSize >= LegionConfig.LEGION_LEVEL2_REQUIRED_MEMBERS;case 2:  return memberSize >= LegionConfig.LEGION_LEVEL3_REQUIRED_MEMBERS;case 3:return memberSize >= LegionConfig.LEGION_LEVEL4_REQUIRED_MEMBERS;case 4:return memberSize >= LegionConfig.LEGION_LEVEL5_REQUIRED_MEMBERS;case 5:return memberSize >= LegionConfig.LEGION_LEVEL6_REQUIRED_MEMBERS;case 6:return memberSize >= LegionConfig.LEGION_LEVEL7_REQUIRED_MEMBERS;case 7:return memberSize >= LegionConfig.LEGION_LEVEL8_REQUIRED_MEMBERS;}return false;}  }
class C{  private void createMapWhenNeeded(){  if (isMapInitialized) {    return;  }  if (resourceBundle != null) {    Set<String> set=resourceBundle.keySet();    topLevelMap=new HashMap<String,Object>(set.size());    for (    String key : set) {      Object value=resourceBundle.getObject(key);      topLevelMap.put(key,value);    }  } else {    topLevelMap=new HashMap<String,Object>(1);  }  topLevelMap.put("_RESOURCE_BUNDLE_",resourceBundle);  isMapInitialized=true;}  }
class C{  @NotNull private Dimension modelToView(int width,int height){  return new Dimension((int)(width * myScale),(int)(height * myScale));}  }
class C{  public void Attack(){  if (map_ctrl.get_Enemy_live_Count() <= Settings.nTotalPangPangEnemyAttackWhenThisNumber) {    AttackAll();    return;  }  loop++;  int n=loop - (map_ctrl.get_Attack_Time() + 180);  if (n < 0)   return;switch (n % 1800) {case 0:    r1=rnd.nextInt(10) + 1;  AttackPath(3,1,r1);AttackPath(3,3,r1);AttackPath(2,1,r1);break;case 150:r1=rnd.nextInt(10) + 1;AttackPath(5,4,r1);AttackPath(5,2,r1);AttackPath(4,0,r1);break;case 300:r1=rnd.nextInt(10) + 1;AttackPath(3,0,r1);AttackPath(3,2,r1);AttackPath(2,4,r1);break;case 450:r1=rnd.nextInt(10) + 1;AttackPath(0,2,r1);AttackPath(1,3,r1);AttackPath(1,4,r1);break;case 600:r1=rnd.nextInt(10) + 1;AttackPath(5,3,r1);AttackPath(5,5,r1);AttackPath(4,6,r1);break;case 750:r1=rnd.nextInt(10) + 1;AttackPath(3,6,r1);AttackPath(3,4,r1);AttackPath(2,2,r1);break;case 900:r1=rnd.nextInt(10) + 1;r2=rnd.nextInt(10) + 1;AttackPath(2,7,r1);AttackPath(2,5,r1);AttackPath(0,5,r2);AttackPath(1,1,r2);break;case 1050:r1=rnd.nextInt(10) + 1;r2=rnd.nextInt(10) + 1;AttackPath(4,6,r1);AttackPath(4,5,r1);AttackPath(3,5,r1);AttackPath(3,7,r2);AttackPath(4,4,r2);break;case 1200:r1=rnd.nextInt(10) + 1;r2=rnd.nextInt(10) + 1;AttackPath(5,6,r1);AttackPath(5,1,r1);AttackPath(2,6,r2);AttackPath(2,3,r2);break;case 1350:r1=rnd.nextInt(10) + 1;r2=rnd.nextInt(10) + 1;AttackPath(1,2,r1);AttackPath(1,6,r1);AttackPath(2,0,r2);AttackPath(4,3,r2);break;case 1600:r1=rnd.nextInt(10) + 1;r2=rnd.nextInt(10) + 1;AttackPath(4,2,r1);AttackPath(4,1,r1);AttackPath(1,5,r2);AttackPath(5,7,r2);break;}}  }
class C{  private void fillMeasureArrayFromRow(CarbonRow row,Object[] outputArray){  if (measueFieldIndexes.length > 0) {    Object[] measureArray=new Object[measueFieldIndexes.length];    for (int i=0; i < measueFieldIndexes.length; i++) {      measureArray[i]=row.getObject(measueFieldIndexes[i]);    }    outputArray[measureIndexInRow]=measureArray;  }}  }
class C{  private void clearAllAction(){  int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),Messages.getString("menu.context.removeAll.warning"),Messages.getString("menu.context.removeAll.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);  if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {      this.simulation.getWorld().removeAllBodiesAndJoints(false);      this.simulation.getContactCounter().clear();    }    this.bodyFolder.removeAllChildren();    this.jointFolder.removeAllChildren();    this.model.reload(this.bodyFolder);    this.model.reload(this.jointFolder);    this.notifyActionListeners("clear-all");  }}  }
class C{  public static <K,R>Observable<R> switchCase(Callable<? extends K> caseSelector,Map<? super K,? extends ObservableSource<? extends R>> mapOfCases){  return switchCase(caseSelector,mapOfCases,Observable.<R>empty());}  }
class C{  @Override protected boolean doDelete(File fileToDelete) throws IOException {  FileUtils.forceDelete(fileToDelete);  return true;}  }
class C{  @Override public void do_after_propagation(){  for (  HeapInsIntervalManager im : new_pts.values()) {    im.flush();  }  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();}  }
class C{  public static String integerToString(Integer value){  return value.toString();}  }
class C{  @Override public void populateField(Integer value){  internalSetValue(value);}  }
class C{  public void shuffleTrainingSet(){  utils.shuffleList(TrainingFiles);}  }
class C{  public int search(String txt){  int M=pat.length();  int N=txt.length();  int skip;  for (int i=0; i <= N - M; i+=skip) {    skip=0;    for (int j=M - 1; j >= 0; j--) {      if (pat.charAt(j) != txt.charAt(i + j)) {        skip=Math.max(1,j - right[txt.charAt(i + j)]);        break;      }    }    if (skip == 0)     return i;  }  return N;}  }
class C{  public Map<String,Object> runSync(String localName,ModelService service,Map<String,? extends Object> context) throws ServiceAuthException, ServiceValidationException, GenericServiceException {  return runSync(localName,service,context,true);}  }
class C{  public boolean useSkill(){  return useSkill(true,true);}  }
class C{  @Override public void removeSubscription(final String topic,final String clientID){  final List<ClientTopicCouple> clientSubscriptions=subscriptions.get(clientID);  if (clientSubscriptions != null) {    clientSubscriptions.remove(topic);  }}  }
class C{  public AuthCheckPhoneQuery authByPhone(Boolean value){  return unsafeParam("auth_by_phone",value);}  }
class C{  static boolean isLaunchNameMatched(Launch launch,EmailSenderCase oneCase){  List<String> configuredNames=oneCase.getLaunchNames();  return (null == configuredNames) || (configuredNames.isEmpty()) || configuredNames.contains(launch.getName());}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static Map<String,String> domNodeToMap(Node node){  Map<String,String> result=new HashMap<>();  if (!node.getNodeName().equals("address-parameters")) {    throw new IllegalArgumentException("Node does not hold the Information for creating a map");  }  NodeList entryNodes=node.getChildNodes();  for (int i=0; i < entryNodes.getLength(); i++) {    Node entryNode=entryNodes.item(i);    if (entryNode.getNodeValue() != null && entryNode.getNodeValue().trim().isEmpty()) {      continue;    }    String key=entryNode.getAttributes().item(0).getNodeValue().toString();    String value=entryNode.getFirstChild().getNodeValue();    result.put(key,value);  }  return result;}  }
class C{  public void removeMember(String targetMemberName) throws ClusterException {  removeMemberFromReplGroup(targetMemberName);  try {    saveFile();  } catch (  FileNotFoundException ex) {    throw new ClusterException("Failed to remove " + targetMemberName + " member from "+ clusterConfigFile+ ". "+ ex.toString(),ex);  }}  }
class C{  public void init(){  try {    this.parser=new SimpleXMLParser();  } catch (  ParserConfigurationException e) {    throw new RuntimeException("Error creating instance of SimpleXMLParser:",e);  }}  }
class C{  @Override public boolean ready() throws IOException {  return false;}  }
class C{  public static final int binarySearch(Object[] a,Object key,Comparator cp,int length){  int x1=0;  int x2=length;  int i=x2 / 2, c;  while (x1 < x2) {    c=cp.compare(a[i],key);    if (c == 0) {      return i;    } else     if (c < 0) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  private static boolean permissionExists(String permission){  Integer minVersion=MIN_SDK_PERMISSIONS.get(permission);  return minVersion == null || Build.VERSION.SDK_INT >= minVersion;}  }
class C{  private void invokeResources(AppCompatActivity activity){  try {    Field resources=AppCompatActivity.class.getDeclaredField("mResources");    resources.setAccessible(true);    resources.set(activity,null);  } catch (  NoSuchFieldException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  public static void snapWidget(Collection<ConstraintWidget> widgets,ConstraintWidget widget,Point candidatePoint,boolean useGridSnap,ArrayList<SnapCandidate> snapCandidates,ViewTransform transform){  if (widget instanceof Guideline) {    return;  }  ConstraintAnchor left=widget.getAnchor(ConstraintAnchor.Type.LEFT);  ConstraintAnchor right=widget.getAnchor(ConstraintAnchor.Type.RIGHT);  if (left.isConnected() && right.isConnected()) {  } else {    widget.setDrawX(candidatePoint.x);    WidgetCompanion widgetCompanion=(WidgetCompanion)widget.getCompanionWidget();    WidgetInteractionTargets widgetInteraction=widgetCompanion.getWidgetInteractionTargets();    widgetInteraction.updatePosition(transform);    if (!checkHorizontalMarginsSnap(snapCandidates,widget,candidatePoint,DEFAULT_MARGIN)) {      if (!snapExistingHorizontalMargin(widget,candidatePoint)) {        SnapCandidate candidate=new SnapCandidate();        findSnap(widgets,widget,candidate,true);        if (candidate.target == null || candidate.target.getType() == ConstraintAnchor.Type.CENTER_X || candidate.target.getType() == ConstraintAnchor.Type.CENTER) {          for (int i=SNAP_MARGIN_INCREMENT; i <= SNAP_MARGIN_MAX; i+=SNAP_MARGIN_INCREMENT) {            findSnapMargin(widgets,widget,candidate,false,ConstraintAnchor.Type.LEFT,ConstraintAnchor.Type.RIGHT,i,CONNECTION_SLOPE);            findSnapMargin(widgets,widget,candidate,false,ConstraintAnchor.Type.RIGHT,ConstraintAnchor.Type.LEFT,-i,CONNECTION_SLOPE);          }        }        if (!snapToHorizontalAnchor(candidatePoint,widget,candidate)) {          if (useGridSnap) {            snapHorizontalGrid(candidatePoint);          }        } else {          snapCandidates.add(candidate);        }      }    }  }  ConstraintAnchor top=widget.getAnchor(ConstraintAnchor.Type.TOP);  ConstraintAnchor bottom=widget.getAnchor(ConstraintAnchor.Type.BOTTOM);  ConstraintAnchor baseline=widget.getAnchor(ConstraintAnchor.Type.BASELINE);  if (baseline.isConnected() || (top.isConnected() && bottom.isConnected())) {  } else {    widget.setDrawY(candidatePoint.y);    WidgetCompanion widgetCompanion=(WidgetCompanion)widget.getCompanionWidget();    WidgetInteractionTargets widgetInteraction=widgetCompanion.getWidgetInteractionTargets();    widgetInteraction.updatePosition(transform);    if (!checkVerticalMarginsSnap(snapCandidates,widget,candidatePoint,DEFAULT_MARGIN)) {      if (!snapExistingVerticalMargin(widget,candidatePoint)) {        SnapCandidate candidate=new SnapCandidate();        findSnap(widgets,widget,candidate,false);        if (candidate.target == null || candidate.target.getType() == ConstraintAnchor.Type.CENTER_Y || candidate.target.getType() == ConstraintAnchor.Type.CENTER) {          for (int i=SNAP_MARGIN_INCREMENT; i <= SNAP_MARGIN_MAX; i+=SNAP_MARGIN_INCREMENT) {            findSnapMargin(widgets,widget,candidate,true,ConstraintAnchor.Type.TOP,ConstraintAnchor.Type.BOTTOM,i,CONNECTION_SLOPE);            findSnapMargin(widgets,widget,candidate,true,ConstraintAnchor.Type.BOTTOM,ConstraintAnchor.Type.TOP,-i,CONNECTION_SLOPE);          }        }        if (!snapToVerticalAnchor(candidatePoint,widget,candidate)) {          if (useGridSnap) {            snapVerticalGrid(candidatePoint);          }        } else {          snapCandidates.add(candidate);        }      }    }  }}  }
class C{  private static void extractCircleItem(SvgTree avg,SvgLeafNode child,Node currentGroupNode){  logger.log(Level.FINE,"circle found" + currentGroupNode.getTextContent());  if (currentGroupNode.getNodeType() == Node.ELEMENT_NODE) {    float cx=0;    float cy=0;    float radius=0;    NamedNodeMap a=currentGroupNode.getAttributes();    int len=a.getLength();    boolean pureTransparent=false;    for (int j=0; j < len; j++) {      Node n=a.item(j);      String name=n.getNodeName();      String value=n.getNodeValue();      if (name.equals(SVG_STYLE)) {        addStyleToPath(child,value);        if (value.contains("opacity:0;")) {          pureTransparent=true;        }      } else       if (presentationMap.containsKey(name)) {        child.fillPresentationAttributes(name,value);      } else       if (name.equals("clip-path") && value.startsWith("url(#SVGID_")) {      } else       if (name.equals("cx")) {        cx=Float.parseFloat(value);      } else       if (name.equals("cy")) {        cy=Float.parseFloat(value);      } else       if (name.equals("r")) {        radius=Float.parseFloat(value);      }    }    if (!pureTransparent && avg != null && !Float.isNaN(cx) && !Float.isNaN(cy)) {      PathBuilder builder=new PathBuilder();      builder.absoluteMoveTo(cx,cy);      builder.relativeMoveTo(-radius,0);      builder.relativeArcTo(radius,radius,false,true,true,2 * radius,0);      builder.relativeArcTo(radius,radius,false,true,true,-2 * radius,0);      child.setPathData(builder.toString());    }  }}  }
class C{  protected CreateSimpleLexer(List<List<Object>> shortcutStylePatterns,List<List<Object>> fallthroughStylePatterns) throws Exception {  this.fallthroughStylePatterns=fallthroughStylePatterns;  List<List<Object>> allPatterns=new ArrayList<List<Object>>(shortcutStylePatterns);  allPatterns.addAll(fallthroughStylePatterns);  List<Pattern> allRegexs=new ArrayList<Pattern>();  Map<String,Object> regexKeys=new HashMap<String,Object>();  for (int i=0, n=allPatterns.size(); i < n; ++i) {    List<Object> patternParts=allPatterns.get(i);    String shortcutChars=patternParts.size() > 3 ? (String)patternParts.get(3) : null;    if (shortcutChars != null) {      for (int c=shortcutChars.length(); --c >= 0; ) {        shortcuts.put(shortcutChars.charAt(c),patternParts);      }    }    Pattern regex=(Pattern)patternParts.get(1);    String k=regex.pattern();    if (regexKeys.get(k) == null) {      allRegexs.add(regex);      regexKeys.put(k,new Object());    }  }  allRegexs.add(Pattern.compile("[\0-\\uffff]"));  tokenizer=new CombinePrefixPattern().combinePrefixPattern(allRegexs);  nPatterns=fallthroughStylePatterns.size();}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  private void parseParameter(String parameter){  if (parameter != null) {    int i=parameter.indexOf('=');    if (i >= 0) {      String token=parameter.substring(0,i).trim();      String value=trimDoubleQuotesIfAny(parameter.substring(i + 1).trim());      Log.v("HttpHeader","HttpAuthHeader.parseParameter():" + " token: " + token + " value: "+ value);      if (token.equalsIgnoreCase(REALM_TOKEN)) {        mRealm=value;      } else {        if (mScheme == DIGEST) {          parseParameter(token,value);        }      }    }  }}  }
class C{  public static UnrevealBuilder unreveal(@NonNull final View viewToUnreveal){  return new UnrevealBuilder(viewToUnreveal);}  }
class C{  private void safeAddTrap(Body b,Trap newTrap){  if (newTrap.getBeginUnit() != newTrap.getEndUnit())   b.getTraps().add(newTrap);}  }
class C{  public summaryGenericEvaluator(String[] args){  OutputSemaphore=new Semaphore(1);  Hashtable hSwitches=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(args);  if (gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"?","").length() > 0) {    printUsage();    System.exit(0);  }  try {    NMin=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"nMin","3"));    NMax=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"nMax","5"));    Dist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"dist","3"));    Threads=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"t","" + Runtime.getRuntime().availableProcessors()));    DocumentClass=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"docClass",NGramDocument.class.getName());    ComparatorClass=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"compClass",StandardDocumentComparator.class.getName());    OutFile=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"o","");    SummaryDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"summaryDir","summaries" + System.getProperty("file.separator"));    ModelDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"modelDir","models" + System.getProperty("file.separator"));    Silent=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"s","FALSE").equals("TRUE");    Progress=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"progress","FALSE").equals("TRUE");    if (!Silent)     System.err.println("Using parameters:\n" + hSwitches);  } catch (  ClassCastException cce) {    System.err.println("Malformed switch:" + cce.getMessage() + ". Aborting...");    printUsage();  }}  }
class C{  private void handleRemoveWaitingForInfoSA_TemplateBased(Context context,ITemplateHolder template) throws SAException {  ILockObject entryLock=null;  Collection<IEntryHolder> clonedWaitingFor;  ILockObject templateLock=getTemplateLockObject(template);  try {synchronized (templateLock) {      clonedWaitingFor=template.getEntriesWaitingForTemplate() != null ? new ArrayList<IEntryHolder>(template.getEntriesWaitingForTemplate()) : null;      if (clonedWaitingFor == null)       return;    }  }  finally {    freeTemplateLockObject(templateLock);  }  for (  IEntryHolder entry : clonedWaitingFor) {    boolean need_unpin=false;    try {      entryLock=getEntryLockObject(entry);synchronized (entryLock) {        try {          if (entry.isOffHeapEntry()) {            need_unpin=true;            entry=((IOffHeapEntryHolder)entry).getLatestEntryVersion(_cacheManager,true,context);          }          handleRemoveWaitingForInfoSA_Template(context,entry,template);        }  finally {          if (need_unpin)           _cacheManager.unpinIfNeeded(context,entry,null,null);        }      }    }  finally {      if (entryLock != null) {        freeEntryLockObject(entryLock);        entryLock=null;      }    }  }}  }
class C{  public void put(final CharSequence key,final Object value){  this.additionalData.put(key,value);}  }
class C{  private void createImageDescriptor(String id){  imageDescriptors.put(id,imageDescriptorFromPlugin(PLUGIN_ID,"icons/" + id));}  }
class C{  public boolean addTable(SampleAttributeTable sampleAttributeTable,boolean allowReplaceSample,boolean allowAddAttribute){  boolean changed=false;  for (  String sample : sampleAttributeTable.getSampleSet()) {    if (allowReplaceSample || !table.rowKeySet().contains(sample)) {      if (addSample(sample,sampleAttributeTable.getAttributesToValues(sample),true,allowAddAttribute))       changed=true;    }  }  return changed;}  }
class C{  public MessagesGetLongPollServerQuery useSsl(Boolean value){  return unsafeParam("use_ssl",value);}  }
class C{  public static void checkReady(Player player,TeamCommand eventCode){  PlayerAlliance alliance=player.getPlayerAlliance2();  if (alliance != null) {    alliance.onEvent(new CheckAllianceReadyEvent(alliance,player,eventCode));  }}  }
class C{  private boolean peekOrPoll(@Nullable Duration claimTtl,EventSink rawSink){  if (!_dedupEnabled.get()) {    return false;  }  if (claimTtl != null && _eventStore.getClaimCount(_readChannel) >= Limits.MAX_CLAIMS_OUTSTANDING) {    return false;  }  TrackingEventSink sink=new TrackingEventSink(rawSink);  boolean moreRead=peekOrPollReadChannel(claimTtl,sink);  if (sink.isDone()) {    return moreRead;  }  Set<ByteBuffer> unique=Sets.newHashSet();  boolean moreWrite=peekOrPollWriteChannel(claimTtl,sink,unique);  if (moreWrite) {    _asyncFiller.start();  }  boolean moreSorted=peekOrPollSortedQueue(claimTtl,sink,unique);  return moreWrite || moreSorted;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CMD_SHOUT_OUTPUT1_NPC(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400003,value0,value1);}  }
class C{  public int append_file1(String appender_file_id,byte[] file_buff,int offset,int length) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(appender_file_id,parts);  if (this.errno != 0) {    return this.errno;  }  return this.append_file(parts[0],parts[1],file_buff,offset,length);}  }
class C{  public static String initializeOrderEntry(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  HttpSession session=request.getSession();  Security security=(Security)request.getAttribute("security");  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  Locale locale=UtilHttp.getLocale(request);  String productStoreId=request.getParameter("productStoreId");  if (UtilValidate.isNotEmpty(productStoreId)) {    session.setAttribute("productStoreId",productStoreId);  }  ShoppingCart cart=getCartObject(request);  String orderMode=request.getParameter("orderMode");  if (orderMode != null) {    cart.setOrderType(orderMode);    session.setAttribute("orderMode",orderMode);  } else {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderPleaseSelectEitherSaleOrPurchaseOrder",locale));    return "error";  }  GenericValue productStore=null;  if (UtilValidate.isNotEmpty(productStoreId)) {    productStore=ProductStoreWorker.getProductStore(productStoreId,delegator);    if (productStore != null) {      boolean hasPermission=false;      if ((cart.getOrderType().equals("PURCHASE_ORDER")) && (security.hasEntityPermission("ORDERMGR","_PURCHASE_CREATE",session))) {        hasPermission=true;      } else       if (cart.getOrderType().equals("SALES_ORDER")) {        if (security.hasEntityPermission("ORDERMGR","_SALES_CREATE",session)) {          hasPermission=true;        } else {          List<GenericValue> storeReps=null;          try {            storeReps=EntityQuery.use(delegator).from("ProductStoreRole").where("productStoreId",productStore.getString("productStoreId"),"partyId",userLogin.getString("partyId"),"roleTypeId","SALES_REP").filterByDate().queryList();          } catch (          GenericEntityException gee) {          }          if (UtilValidate.isNotEmpty(storeReps)) {            hasPermission=true;          }        }      }      if (hasPermission) {        cart=ShoppingCartEvents.getCartObject(request,null,productStore.getString("defaultCurrencyUomId"));      } else {        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToTakeOrdersForThisStore",locale));        cart.clear();        session.removeAttribute("orderMode");        return "error";      }      cart.setProductStoreId(productStoreId);    } else {      cart.setProductStoreId(null);    }  }  if ("SALES_ORDER".equals(cart.getOrderType()) && UtilValidate.isEmpty(cart.getProductStoreId())) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderAProductStoreMustBeSelectedForASalesOrder",locale));    cart.clear();    session.removeAttribute("orderMode");    return "error";  }  String salesChannelEnumId=request.getParameter("salesChannelEnumId");  if (UtilValidate.isNotEmpty(salesChannelEnumId)) {    cart.setChannelType(salesChannelEnumId);  }  String partyId=request.getParameter("supplierPartyId");  cart.setSupplierPartyId(partyId);  String originOrderId=request.getParameter("originOrderId");  cart.setAttribute("originOrderId",originOrderId);  if (!UtilValidate.isEmpty(request.getParameter("partyId"))) {    partyId=request.getParameter("partyId");  }  String userLoginId=request.getParameter("userLoginId");  if (partyId != null || userLoginId != null) {    if (UtilValidate.isEmpty(partyId) && UtilValidate.isNotEmpty(userLoginId)) {      GenericValue thisUserLogin=null;      try {        thisUserLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();      } catch (      GenericEntityException gee) {      }      if (thisUserLogin != null) {        partyId=thisUserLogin.getString("partyId");      } else {        partyId=userLoginId;      }    }    if (UtilValidate.isNotEmpty(partyId)) {      GenericValue thisParty=null;      try {        thisParty=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();      } catch (      GenericEntityException gee) {      }      if (thisParty == null) {        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderCouldNotLocateTheSelectedParty",locale));        return "error";      } else {        cart.setOrderPartyId(partyId);        if ("PURCHASE_ORDER".equals(cart.getOrderType())) {          cart.setBillFromVendorPartyId(partyId);        }      }    } else     if (partyId != null && partyId.length() == 0) {      cart.setOrderPartyId("_NA_");      partyId=null;    }  } else {    partyId=cart.getPartyId();    if (partyId != null && partyId.equals("_NA_"))     partyId=null;  }  return "success";}  }
class C{  @VisibleForTesting void computeUniqueProjectLocation(){  String projectLocation=myTemplateState.hasAttr(ATTR_PROJECT_LOCATION) ? myTemplateState.getString(ATTR_PROJECT_LOCATION) : computeProjectLocation();  if (!projectLocation.isEmpty() && (myProject == null || !myProject.isInitialized())) {    File file=new File(projectLocation);    if (file.exists()) {      String appName=myTemplateState.getString(ATTR_APP_TITLE);      int i=2;      while (file.exists()) {        myTemplateState.put(ATTR_APP_TITLE,String.format(Locale.getDefault(),"%s %d",appName,i));        file=new File(computeProjectLocation());        i++;      }      deriveValues();    }  }}  }
class C{  protected void wrapContent(){  mWidget.setMinWidth(100);  mWidget.setMinHeight(100);  int tw=mWidget.getMinWidth();  int th=mWidget.getMinHeight();  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {    mWidget.setWidth(tw);  }  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {    mWidget.setHeight(th);  }  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {    if (mWidget.getWidth() <= mWidget.getMinWidth()) {      mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);    }  }  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {    if (mWidget.getHeight() <= mWidget.getMinHeight()) {      mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);    }  }  mWidget.setBaselineDistance(0);}  }
class C{  void showSecurityButton(){  if (mSecurityButton.getVisibility() == View.VISIBLE)   return;  if (mSecurityButtonShowAnimator.isRunning())   mSecurityButtonShowAnimator.cancel();  mSecurityButtonShowAnimator.start();}  }
class C{  public void update(){  enabled=true;  compressedRow2Reads.clear();  SortedSet<Pair<Integer,Integer>> sortedReads=new TreeSet<>();  int numberOfCompressedRows=0;  int[] ends=new int[alignment.getNumberOfSequences()];  for (int read=0; read < alignment.getNumberOfSequences(); read++) {    int start=alignment.getLane(read).getFirstNonGapPosition();    sortedReads.add(new Pair<>(start,read));  }  for (  Pair<Integer,Integer> pair : sortedReads) {    int read=pair.get2();    int start=alignment.getLane(read).getFirstNonGapPosition();    boolean done=false;    for (int row=0; !done && row < numberOfCompressedRows; row++) {      if (start > ends[row] + 10) {        compressedRow2Reads.get(row).add(read);        ends[row]=alignment.getLane(read).getLastNonGapPosition();        done=true;      }    }    if (!done) {      ends[numberOfCompressedRows]=alignment.getLane(read).getLastNonGapPosition();      List<Integer> reads=new LinkedList<>();      reads.add(read);      compressedRow2Reads.add(numberOfCompressedRows,reads);      numberOfCompressedRows++;    }  }}  }
class C{  public static void enforceExternalBuild(@NotNull Project project){  if (requiresAndroidModel(project)) {    AndroidGradleBuildConfiguration.getInstance(project).USE_EXPERIMENTAL_FASTER_BUILD=isAndroidStudio();  }}  }
class C{  public static MyServicePrx checkedCast(Ice.ObjectPrx __obj,String __facet,java.util.Map<String,String> __ctx){  return checkedCastImpl(__obj,__facet,__ctx,ice_staticId(),MyServicePrx.class,MyServicePrxHelper.class);}  }
class C{  public static Aggregate<Map<String,Concept>,Map<Concept,List<Map<String,Concept>>>> group(String varName){  return group(varName,Aggregates.list());}  }
class C{  public AbstractEquipment clone(){  return (AbstractEquipmentCacheObject)super.clone();}  }
class C{  public static boolean isHttp(String scheme){  return scheme.equalsIgnoreCase("http") || scheme.equalsIgnoreCase("https");}  }
class C{  public static boolean createAndLaunchWorld(WorldSettings worldsettings,boolean isTemporary){  String s=getNewSaveFileLocation(isTemporary);  Minecraft.getMinecraft().launchIntegratedServer(s,s,worldsettings);  cleanupTemporaryWorlds(s);  return true;}  }
class C{  private File createCaptureFile(int encodingType){  return createCaptureFile(encodingType,"");}  }
class C{  private void populateFunctionComboBox(){  if (filterComboBox != null) {    DefaultComboBoxModel<String> model=new DefaultComboBoxModel<String>();    model.addElement("");    for (    String name : filterNameMap.keySet()) {      FilterConfigInterface filterConfig=filterNameMap.get(name);      model.addElement(filterConfig.getFilterConfiguration().getFilterName());    }    filterComboBox.setModel(model);  }}  }
class C{  public GSBytesMessageImpl(GSSessionImpl session,byte[] bytesArray) throws JMSException {  super(session,GSMessageImpl.BYTES);  Body=bytesArray;}  }
class C{  public final void removeAll(){  clear();}  }
class C{  private void createInfoLayout(){  LayoutInflater inflater=(LayoutInflater)getSystemService(LAYOUT_INFLATER_SERVICE);  infoLayout=(LinearLayout)inflater.inflate(R.layout.dialog_info_window,null);  layoutParams.gravity=Gravity.CENTER | Gravity.BOTTOM;  ButterKnife.bind(this,infoLayout);  createInputLayout();  createResultLayout();  createAllIvLayout();  initPositionHandler();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201019,skilltarget,skillcaster,skillname);}  }
class C{  public String typeName(){  return "double";}  }
class C{  public Tokenizer(String master,String lexiconFileName,String regexpFileName,String bigramFileName){  this(master,lexiconFileName,regexpFileName);  bigram=new Bigrams(bigramFileName);}  }
class C{  public FieldVector3D<T> scalarMultiply(final T a){  return new FieldVector3D<T>(x.multiply(a),y.multiply(a),z.multiply(a));}  }
class C{  private void actualizeOptimizationFields() throws CovarianceSingularityException {  double detCovariances=0.0d;  chol=covariances.chol();  double[][] covars=chol.getL().getArray();  detCovariances=1.0d;  for (int i=0; i < covars.length; i++)   detCovariances*=covars[i][i];  detCovariances*=detCovariances;  if (detCovariances < SINGULARITY_DETECTION_THRESHOLD)   throw new CovarianceSingularityException(null);  invChol=chol.getL().inverse();  coefficient=1.0d / (Math.pow((2.0d * Math.PI),dimension / 2.0) * Math.pow(detCovariances,0.5d));}  }
class C{  private void delayedHide(int delayMillis){  mHideHandler.removeCallbacks(mHideRunnable);  mHideHandler.postDelayed(mHideRunnable,delayMillis);}  }
class C{  public void removeGraphModelListener(GraphListener listnr){  m_listeners.remove(listnr);}  }
class C{  public void removeAllRoles(){  Helper.delete(W.create("uid",this.getId()),UserRole.class);}  }
class C{  public void trackNextPageLoadFromTimestamp(long timestamp){  mIntentReceivedTimestamp=timestamp;  mCurrentState=STATE_WAITING_LOAD_START;}  }
class C{  public ExportDisplayAction(Display display){  this.display=display;}  }
class C{  @ManagedOperation(description="Refreshes DataTags from DAQ cache. Refresh supervision status after this call!") public void refreshDataTags(){  LOGGER.info("Recovery task: refreshing DataTags from DAQ (using DAQ cache).");  dataRefreshManager.refreshTagsForAllProcess();  LOGGER.info("Recovery task: finished refreshing all DataTags from DAQ.");}  }
class C{  @TargetApi(21) public Bundler putSize(String key,Size value){  bundle.putSize(key,value);  return this;}  }
class C{  public static void assertContains(String msg,Complex[] values,Complex z,double epsilon){  for (  Complex value : values) {    if (Precision.equals(value.getReal(),z.getReal(),epsilon) && Precision.equals(value.getImaginary(),z.getImaginary(),epsilon)) {      return;    }  }  Assert.fail(msg + " Unable to find " + (new ComplexFormat()).format(z));}  }
class C{  @SuppressWarnings("unchecked") public static <R>JoinObservable<R> when(Plan<R> p1){  return from(JoinPatterns.when(p1));}  }
class C{  public static String prettyPrintArgv(List<String> argv){  StringBuilder buf=new StringBuilder();  for (  String arg : argv) {    if (buf.length() > 0) {      buf.append(' ');    }    buf.append(shellEscape(arg));  }  return buf.toString();}  }
class C{  private SyncResult taskDetailsToSyncResult(JSONObject taskDetails){  try {    JSONObject results=taskDetails.getJSONObject("result");    JSONArray changesJSON=results.getJSONArray("changes");    JSONArray conflictsJSON=results.getJSONArray("conflicts");    String serializedLibrary=results.getString("library");    SyncResult result=new SyncResult();    for (int i=0; i < changesJSON.length(); i++) {      result.getChanges().add(changesJSON.getString(i));    }    for (int i=0; i < conflictsJSON.length(); i++) {      result.getConflicts().add(conflictsJSON.getString(i));    }    result.setSerializedLibrary(serializedLibrary);    result.setSuccessful(true);    return result;  } catch (  JSONException e) {    throw new RuntimeException(e);  }}  }
class C{  public void destroyView() throws CanceledException {  locked=true;  ProgramProperties.put("SampleViewerGeometry",new int[]{frame.getLocation().x,frame.getLocation().y,frame.getSize().width,frame.getSize().height});  searchManager.getFindDialogAsToolBar().close();  doc.getSampleSelection().removeSampleSelectionListener(selectionListener);  frame.setVisible(false);  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());  dir.removeViewer(this);  frame.dispose();}  }
class C{  public void reverse(){  int[] newBits=new int[bits.length];  int len=(size - 1) / 32;  int oldBitsLen=len + 1;  for (int i=0; i < oldBitsLen; i++) {    long x=(long)bits[i];    x=((x >> 1) & 0x55555555L) | ((x & 0x55555555L) << 1);    x=((x >> 2) & 0x33333333L) | ((x & 0x33333333L) << 2);    x=((x >> 4) & 0x0f0f0f0fL) | ((x & 0x0f0f0f0fL) << 4);    x=((x >> 8) & 0x00ff00ffL) | ((x & 0x00ff00ffL) << 8);    x=((x >> 16) & 0x0000ffffL) | ((x & 0x0000ffffL) << 16);    newBits[len - i]=(int)x;  }  if (size != oldBitsLen * 32) {    int leftOffset=oldBitsLen * 32 - size;    int currentInt=newBits[0] >>> leftOffset;    for (int i=1; i < oldBitsLen; i++) {      int nextInt=newBits[i];      currentInt|=nextInt << (32 - leftOffset);      newBits[i - 1]=currentInt;      currentInt=nextInt >>> leftOffset;    }    newBits[oldBitsLen - 1]=currentInt;  }  bits=newBits;}  }
class C{  public FillTreeItem(){}  }
class C{  public JobRowFilter withValues(Set<String> values){  return new JobRowFilter(jobField,operation,values);}  }
class C{  private RangeSpecifications(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HostileUp_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200682,skillcaster,value0,skillname);}  }
class C{  public final String readAsciiString(final int n){  final char ret[]=new char[n];  for (int x=0; x < n; x++) {    ret[x]=(char)readByte();  }  return new String(ret);}  }
class C{  public static void e(Class<?> clazz,String msg){  if (isDebug) {    Log.e(clazz.getSimpleName(),msg);  }}  }
class C{  public float readFloat() throws JMSException {  initializeReading();  try {    this.dataIn.mark(Integer.MAX_VALUE);    return this.dataIn.readFloat();  } catch (  EOFException eof) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageEOFException(eof.toString());    jmsEx.setLinkedException(eof);    throw jmsEx;  }catch (  IOException ioe) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageFormatException("Format error occurred" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public void redirectOutputStream(String fileName) throws FileNotFoundException {  Executor.redirectOutputStream(getProcess(),new FileOutputStream(fileName,true),getCommand());}  }
class C{  @Override public PolynomialFunctionLagrangeForm interpolate(double x[],double y[]) throws MathIllegalArgumentException {  return new PolynomialFunctionLagrangeForm(x,y);}  }
class C{  public SimpleTimeSeriesCollection(@NonNull DateTime timestamp,@NonNull Stream<? extends TimeSeriesValue> tsv){  this.timestamp=timestamp;  groupMap=tsv.collect(Collectors.toMap(null,null,throwing_merger_(),hashmap_constructor_()));  pathMap=groupMap.values().stream().collect(Collectors.groupingBy(null,hashmap_constructor_(),Collectors.toList()));}  }
class C{  public PhotosDeleteQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / ((float)metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);  return dp;}  }
class C{  public static boolean isZip(BufferedInputStream in){  in.mark(4);  byte[] b=new byte[4];  byte[] zipSig=new byte[4];  zipSig[0]=0x50;  zipSig[1]=0x4b;  zipSig[2]=0x03;  zipSig[3]=0x04;  try {    in.read(b,0,4);  } catch (  Exception ex) {    throw new RuntimeException("Couldn't read header from stream ",ex);  }  try {    in.reset();  } catch (  Exception ex) {    throw new RuntimeException("Couldn't reset stream ",ex);  }  return Arrays.equals(b,zipSig);}  }
class C{  public ZWaveDeviceResetLocallyCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public UserPhotosView(Activity a,int type){  super(a);  this.initialize(a,type);}  }
class C{  private boolean doesProfileMatch(Experiment experiment,SegmentationProfile segmentationProfile,HttpHeaders headers,Context context,boolean testMode){  try {    String ruleExpression=experiment.getRule();    if (ruleExpression == null || ruleExpression.trim().isEmpty()) {      return true;    } else {      Map<String,Object> profileAttrs;      if (testMode) {        profileAttrs=segmentationProfile.getProfile();      } else {        segmentationProfile=mergeHeaderAndContextWithProfile(segmentationProfile,headers,context);        if (segmentationProfile == null) {          profileAttrs=null;        } else {          profileAttrs=segmentationProfile.getProfile();        }      }      Rule ruleObject=null;      if (testMode) {        ruleObject=new RuleBuilder().parseExpression(ruleExpression);        return ruleObject.evaluate((HashMap)profileAttrs);      }      ruleObject=ruleCache.getRule(experiment.getID());      if (ruleObject == null) {        ruleObject=new RuleBuilder().parseExpression(ruleExpression);        ruleCache.setRule(experiment.getID(),ruleObject);        return ruleObject.evaluate((HashMap)profileAttrs);      } else {        return ruleObject.evaluate((HashMap)profileAttrs);      }    }  } catch (  MissingInputException|InvalidInputException|TreeStructureException e) {    LOGGER.warn("assignment: profile match exception " + e);    return false;  }}  }
class C{  public Decision(Object dDocument,Object oFinalDecision,double dDecisionBelief,Map mDecisionEvidence){  Document=dDocument;  FinalDecision=oFinalDecision;  DecisionBelief=dDecisionBelief;  DecisionEvidence=mDecisionEvidence;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public BlockingQueueCompiledScriptPoolFactory(int size){  this.size=size;}  }
class C{  public DelimitedTextTableWriter(){  this("\t");}  }
class C{  private void mergeCommentsIntoTextUnitDTOs(List<TextUnitDTOWithComments> textUnitDTOsWithComments,List<TextUnitDTO> textUnitDTOs,Multimap<Long,TMTextUnitVariantComment> textUnitVariantCommentsMap){  for (  TextUnitDTO textUnitDTO : textUnitDTOs) {    TextUnitDTOWithComments textUnitDTOWithComments=new TextUnitDTOWithComments(textUnitDTO);    Long tmTextUnitVariantId=textUnitDTO.getTmTextUnitVariantId();    Collection<TMTextUnitVariantComment> variantComments=textUnitVariantCommentsMap.get(tmTextUnitVariantId);    textUnitDTOWithComments.setTmTextUnitVariantComments(new ArrayList<>(variantComments));    textUnitDTOsWithComments.add(textUnitDTOWithComments);  }}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] enclosingRectangle=image.getEnclosingRectangle();  if (enclosingRectangle == null) {    throw NotFoundException.getNotFoundInstance();  }  int left=enclosingRectangle[0];  int top=enclosingRectangle[1];  int width=enclosingRectangle[2];  int height=enclosingRectangle[3];  BitMatrix bits=new BitMatrix(MATRIX_WIDTH,MATRIX_HEIGHT);  for (int y=0; y < MATRIX_HEIGHT; y++) {    int iy=top + (y * height + height / 2) / MATRIX_HEIGHT;    for (int x=0; x < MATRIX_WIDTH; x++) {      int ix=left + (x * width + width / 2 + (y & 0x01) * width / 2) / MATRIX_WIDTH;      if (image.get(ix,iy)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  @Override public void notationDecl(String name,String publicId,String systemId) throws SAXException {  allowXMLCatalogPI=false;  super.notationDecl(name,publicId,systemId);}  }
class C{  private Element resolveSchema(XSDDescription desc,boolean mustResolve,Element referElement,boolean usePairs){  XMLInputSource schemaSource=null;  try {    Hashtable pairs=usePairs ? fLocationPairs : EMPTY_TABLE;    schemaSource=XMLSchemaLoader.resolveDocument(desc,pairs,fEntityResolver);  } catch (  IOException ex) {    if (mustResolve) {      reportSchemaError("schema_reference.4",new Object[]{desc.getLocationHints()[0]},referElement);    } else {      reportSchemaWarning("schema_reference.4",new Object[]{desc.getLocationHints()[0]},referElement);    }  }  if (schemaSource instanceof DOMInputSource) {    return getSchemaDocument(desc.getTargetNamespace(),(DOMInputSource)schemaSource,mustResolve,desc.getContextType(),referElement);  } else   if (schemaSource instanceof SAXInputSource) {    return getSchemaDocument(desc.getTargetNamespace(),(SAXInputSource)schemaSource,mustResolve,desc.getContextType(),referElement);  } else   if (schemaSource instanceof StAXInputSource) {    return getSchemaDocument(desc.getTargetNamespace(),(StAXInputSource)schemaSource,mustResolve,desc.getContextType(),referElement);  } else   if (schemaSource instanceof XSInputSource) {    return getSchemaDocument((XSInputSource)schemaSource,desc);  }  return getSchemaDocument(desc.getTargetNamespace(),schemaSource,mustResolve,desc.getContextType(),referElement);}  }
class C{  public static void computeApprox(TreeSet<TypeVariable> workList) throws TypeException {  while (workList.size() > 0) {    TypeVariable var=workList.first();    workList.remove(var);    var.fixApprox(workList);  }}  }
class C{  public ValidationException(Object concerned,String strMessage,String strCompatibilityMessage,boolean isWarning){  super(strMessage);  this.strCompatibilityMessage=strCompatibilityMessage;  this.strMessage=strMessage;  this.concerned=concerned;  this.warning=isWarning;}  }
class C{  public static Style blue(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_BLUE);  return style;}  }
class C{  public void startEnqueueJob(){  try {    Scheduler scheduler=Singleton.getScheduler();    JobDetail job=newJob(EnqueueRepositoryJob.class).withIdentity("enqueuejob").build();    SimpleTrigger trigger=newTrigger().withIdentity("enqueuejob").withSchedule(simpleSchedule().withIntervalInSeconds(this.UPDATETIME).repeatForever()).build();    scheduler.scheduleJob(job,trigger);    scheduler.start();    Scheduler scheduler2=Singleton.getScheduler();    JobDetail job2=newJob(EnqueueFileRepositoryJob.class).withIdentity("enqueuefilejob").build();    SimpleTrigger trigger2=newTrigger().withIdentity("enqueuefilejob").withSchedule(simpleSchedule().withIntervalInSeconds(this.FILEINDEXUPDATETIME).repeatForever()).build();    scheduler2.scheduleJob(job2,trigger2);    scheduler2.start();  } catch (  SchedulerException ex) {    LOGGER.severe(" caught a " + ex.getClass() + "\n with message: "+ ex.getMessage());  }}  }
class C{  private ItemStack fillContainer(IBlockSource source,ItemStack stack){  World world=source.getWorld();  EnumFacing dispenserFacing=source.func_189992_e().getValue(BlockDispenser.FACING);  BlockPos blockpos=source.getBlockPos().offset(dispenserFacing);  ItemStack result=FluidUtil.tryPickUpFluid(stack,null,world,blockpos,dispenserFacing.getOpposite());  if (result == null) {    return super.dispenseStack(source,stack);  }  if (--stack.stackSize == 0) {    stack.deserializeNBT(result.serializeNBT());  } else   if (((TileEntityDispenser)source.getBlockTileEntity()).addItemStack(result) < 0) {    this.dispenseBehavior.dispense(source,result);  }  return stack;}  }
class C{  public Well19937a(long seed){  super(K,seed);}  }
class C{  private void rdp_decoding_d(List<ArrayList<Character>> g_data,int disks,int stripe_unit_size,int w,int x){  int xcount, ccount, count, dcount;  int packet_size=stripe_unit_size / w;  int gr, g, gx;  int row_disk, diag_disk;  ArrayList<Character> row_data, diag_data, rdata, xdata;  int coffset;  int i, j, k, c;  int diag_count;  int row_count;  dcount=stripe_unit_size;  xcount=stripe_unit_size;  gr=pnumRdp - 2;  gx=(x >= 3 ? x - 3 : pnumRdp - 1);  row_disk=pnumRdp + 1;  diag_disk=x;  rdata=g_data.get(0);  xdata=g_data.get(x);  row_data=rdata;  diag_data=xdata;  g=gr;  diag_count=xcount;  row_count=dcount;  while (true) {    if (g == pnumRdp - 1) {      if (gr == (row_disk >= 3 ? row_disk - 3 : row_disk + pnumRdp - 3)) {        row_disk=x;        diag_disk=pnumRdp + 1;        row_data=xdata;        diag_data=rdata;        g=gx;        row_count=diag_count;        diag_count=dcount;        continue;      } else       break;    } else {      int row_index;      ArrayList<Character> cdata;      row_index=(g - diag_disk + pnumRdp + 2) % pnumRdp;      coffset=(row_index + diag_disk - 2 + pnumRdp) % pnumRdp * packet_size;      cdata=g_data.get(1);      for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && k < packet_size; i++, j++, k++) {        diag_data.set(i,(char)(diag_data.get(i) ^ cdata.get(j)));      }      for (c=2; c < (disks + 2); c++) {        if ((int)c == diag_disk)         continue;        ccount=stripe_unit_size;        cdata=g_data.get(c);        coffset=(row_index + diag_disk - c + pnumRdp) % pnumRdp * packet_size;        for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && j < ccount && k < packet_size; i++, j++, k++) {          diag_data.set(i,(char)(diag_data.get(i) ^ cdata.get(j)));        }      }      if (pnumRdp + 1 != diag_disk) {        ccount=stripe_unit_size;        cdata=g_data.get(0);        coffset=(row_index + diag_disk - 1 + pnumRdp) % pnumRdp * packet_size;        for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && j < ccount && k < packet_size; i++, j++, k++) {          diag_data.set(i,(char)(diag_data.get(i) ^ cdata.get(j)));        }      }      for (c=2; c < (disks + 2); c++) {        if ((int)c == row_disk)         continue;        ccount=stripe_unit_size;        cdata=g_data.get(c);        coffset=row_index * packet_size;        for (i=coffset, k=0; i < ccount && k < packet_size; i++, k++) {          row_data.set(i,(char)(row_data.get(i) ^ cdata.get(i)));        }      }      if (row_disk != pnumRdp + 1) {        count=row_count;        cdata=diag_data;        coffset=row_index * packet_size;        for (i=coffset, k=0; i < count && k < packet_size; i++, k++) {          row_data.set(i,(char)(row_data.get(i) ^ cdata.get(i)));        }      }      g=(row_index + row_disk - 2) % pnumRdp;    }  }}  }
class C{  @Override public String toString(){  return "DummyFreeTTSVoice US-English";}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static Class needClass(String property) throws NoSuchPropertyException {  String value=needProperty(property);  Class c=null;  try {    c=Class.forName(value);  } catch (  ClassNotFoundException e) {    throw new NoSuchPropertyException("Cannot find class `" + value + "'. Check property `"+ property+ "' in configuration files");  }  return c;}  }
class C{  protected Object findService(SpaceURL url,Properties customProperties,LifeCycle lifeCycle,CredentialsProvider credentialsProvider,long timeout,LookupType lookupType) throws FinderException {  try {    initSecurityManagerIfNeeded(url.getURL());    if (credentialsProvider == null && customProperties != null) {      final String username=(String)customProperties.remove(Constants.Security.USERNAME);      final String password=(String)customProperties.remove(Constants.Security.PASSWORD);      if (StringUtils.hasLength(username) || StringUtils.hasLength(password))       credentialsProvider=new DefaultCredentialsProvider(username,password);    }    Object result;    if (url.isEmbeddedProtocol())     result=findEmbeddedSpace(url,customProperties,credentialsProvider,lifeCycle); else     if (url.isJiniProtocol()) {      result=findJiniSpace(url,customProperties,timeout,lookupType,true);    } else     throw new SpaceURLValidationException("Unsupported url protocol: " + url.getProtocol());    if (result instanceof ISpaceProxy)     result=initSpaceProxy((ISpaceProxy)result,url,customProperties,credentialsProvider);    return result;  } catch (  FinderException e) {    throw e;  }catch (  Exception e) {    throw new FinderException("Failed to find: " + url,e);  } finally {    if (securityManagerEnabled && currentSecurityManager != null) {      try {        System.setSecurityManager(currentSecurityManager);      } catch (      Exception e) {        System.err.println("WARNING: Failed to set RMISecurityManager. \n" + e.getMessage());      }    }  }}  }
class C{  private void _init(Configuration conf){  try {    if (this.id > 0) {      DefaultListener d=new DefaultListener();      d.upgrade(conf,this);    }    if (!X.isEmpty(listener)) {      String name=listener;      if (name != null) {        try {          Class<?> c=Class.forName(name,true,classLoader);          Object o=c.newInstance();          if (o instanceof IListener) {            log.info("initializing: " + name);            IListener l=(IListener)o;            l.upgrade(conf,this);            l.onStart(conf,this);          }        } catch (        Throwable e) {          log.error(this.name + ", listener=" + name,e);        }      }    }  } catch (  Throwable e) {    log.error(e.getMessage(),e);  }}  }
class C{  @NotNull private ParseResult tryParse(int previewWidth){  StringBuilder errorBuffer=new StringBuilder();  File path=myPath.get();  if (!path.exists() || path.isDirectory()) {    return ParseResult.INVALID;  }  String xmlFileContent=null;  FileType fileType=myFileType.get();  if (fileType.equals(FileType.SVG)) {    OutputStream outStream=new ByteArrayOutputStream();    String errorLog=Svg2Vector.parseSvgToXml(path,outStream);    errorBuffer.append(errorLog);    xmlFileContent=outStream.toString();  } else   if (fileType.equals(FileType.LAYERED_IMAGE)) {    try {      xmlFileContent=new LayeredImageConverter().toVectorDrawableXml(path);    } catch (    IOException e) {      errorBuffer.append(e.getMessage());    }  } else {    try {      xmlFileContent=Files.toString(path,Charsets.UTF_8);    } catch (    IOException e) {      errorBuffer.append(e.getMessage());    }  }  BufferedImage image=null;  int originalWidth=0;  int originalHeight=0;  if (xmlFileContent != null) {    Document vdDocument=VdPreview.parseVdStringIntoDocument(xmlFileContent,errorBuffer);    if (vdDocument != null) {      VdPreview.SourceSize vdOriginalSize=VdPreview.getVdOriginalSize(vdDocument);      originalWidth=vdOriginalSize.getWidth();      originalHeight=vdOriginalSize.getHeight();      String overriddenXml=overrideXmlFileContent(vdDocument,vdOriginalSize,errorBuffer);      if (overriddenXml != null) {        xmlFileContent=overriddenXml;      }      if (previewWidth <= 0) {        previewWidth=myOutputWidth.get() > 0 ? myOutputWidth.get() : originalWidth;      }      final VdPreview.TargetSize imageTargetSize=VdPreview.TargetSize.createSizeFromWidth(previewWidth);      image=VdPreview.getPreviewFromVectorXml(imageTargetSize,xmlFileContent,errorBuffer);    }  }  if (image == null) {    errorBuffer.insert(0,ERROR_EMPTY_PREVIEW + "\n");    return new ParseResult(errorBuffer.toString());  } else {    return new ParseResult(errorBuffer.toString(),image,originalWidth,originalHeight,xmlFileContent);  }}  }
class C{  public ZWaveGroupingNameCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  protected void addLink(String field,int len,int n,int e){  int[] array=(int[])m_links.get(n,field);  if (array == null) {    array=new int[]{e};    m_links.set(n,field,array);    return;  } else   if (len == array.length) {    int[] narray=new int[Math.max(3 * array.length / 2,len + 1)];    System.arraycopy(array,0,narray,0,array.length);    array=narray;    m_links.set(n,field,array);  }  array[len]=e;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("compute wordCount kmer=");  int kmer=np.getInt(1,Integer.MAX_VALUE);  np.matchIgnoreCase("step=");  int step=np.getInt(1,Integer.MAX_VALUE);  np.matchIgnoreCase("mindepth=");  int mindepth=np.getInt(1,Integer.MAX_VALUE);  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  LinkedList<Pair<Number,Number>> depthVsDifferences=new LinkedList<>();  SortedMap<Number,Number> rank2percentage=new TreeMap<>();  WordCountAnalysis.apply(viewer.getAlignment(),kmer,step,mindepth,((Director)getDir()).getDocument().getProgressListener(),depthVsDifferences,rank2percentage);  System.out.println("Depth vs Differences (" + depthVsDifferences.size() + "):");  for (  Pair<Number,Number> pair : depthVsDifferences) {    System.out.println(pair.get1() + " " + pair.get2());  }  System.out.println("done");}  }
class C{  private void startWaveWesternShieldGenerator1(){  sp(233722,258.37912f,176.03621f,325.59268f,(byte)30,1000,"WesternShieldGenerator1");  sp(233723,255.55922f,176.17963f,325.49332f,(byte)29,1000,"WesternShieldGenerator2");  sp(233882,252.49738f,176.27466f,325.52942f,(byte)29,1000,"WesternShieldGenerator3");}  }
class C{  private Circle(final Vector3D pole,final Vector3D x,final Vector3D y,final double tolerance){  this.pole=pole;  this.x=x;  this.y=y;  this.tolerance=tolerance;}  }
class C{  public LinearConstraintSet(Collection<LinearConstraint> constraints){  linearConstraints.addAll(constraints);}  }
class C{  protected void addLanguageVariables(BundleContext context,Language language){  if (languageVariablesNotAdded) {    languageVariablesNotAdded=false;    try {      URL resourceURL=context.getBundle().getResource("conf/Language-ext.properties");      PropertyResourceBundle resourceBundle=new PropertyResourceBundle(resourceURL.openStream());      Map<String,String> languageVariables=new HashMap<String,String>();      for (      String key : resourceBundle.keySet()) {        languageVariables.put(key,resourceBundle.getString(key));      }      addLanguageVariables(languageVariables,language);    } catch (    IOException e) {      Logger.warn(this,"Exception while registering language variables",e);    }  }}  }
class C{  private static void format(EditText editText,TextWatcher mainWatcher,TextWatcher[] otherWatchers){  Editable text=editText.getText();  CharSequence formatted=WhatsappViewCompat.extractFlagsForEditText(text);  removeTextChangedListener(editText,mainWatcher);  int selectionEnd=editText.getSelectionEnd();  int selectionStart=editText.getSelectionStart();  editText.setText(formatted);  editText.setSelection(selectionStart,selectionEnd);  Editable formattedEditableText=editText.getText();  sendAfterTextChanged(otherWatchers,formattedEditableText);  addTextChangedListener(editText,mainWatcher);}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public void startLayers(){  layersComplete=false;}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_CONFLICT_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201087,skillcaster,skillname);}  }
class C{  private void initWritingAttributes(ImmutableEndpoint endpoint){  Properties params=endpoint.getEndpointURI().getParams();  if (params != null) {    try {      String workManager=(String)params.get(ENDPOINT_PARAM_WORK_MANAGER);      if (workManager != null) {        this.workManager=Boolean.valueOf(workManager);      }    } catch (    Exception e) {      throw new MuleRuntimeException(CoreMessages.failedToCreateConnectorFromUri(endpoint.getEndpointURI()),e);    }  }}  }
class C{  public boolean addItemStack(ItemStack itemStack){  int openX=-1, openY=-1;  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      if (inventory[x][y] != null) {        if (inventory[x][y].getItem().getTypeId() == itemStack.getItem().getTypeId()) {          int count=itemStack.getStack();          inventory[x][y].mergeStack(itemStack);          if (itemStack.getStack() != count) {            if (itemStack.getStack() > 0) {              return addItemStack(itemStack);            } else {              itemStack.destroy();              wasChanged=true;              return true;            }          }        }      } else {        if (openX == -1 && openY == -1) {          openX=x;          openY=y;        }      }    }  }  if (openX != -1 && openY != -1) {    inventory[openX][openY]=itemStack;    wasChanged=true;    return true;  }  return false;}  }
class C{  private double linToMelFreq(double inputFreq){  return (2595.0 * (Math.log(1.0 + inputFreq / 700.0) / Math.log(10.0)));}  }
class C{  public RenderOptionsPanel(RenderSymbolInterface renderSymbol,List<RenderSymbolInterface> rendererList){  this.renderSymbol=renderSymbol;  this.rendererList=rendererList;  DataSourceInterface dataSource=DataSourceFactory.getDataSource();  dataSource.addListener(this);  createUI();  populate();  updateButtonState(GeometryTypeEnum.UNKNOWN);}  }
class C{  public OverScroller(Context context){  this(context,null);}  }
class C{  public synchronized void send(DHCPMessage inMessage) throws IOException {  byte data[]=new byte[this.mtu];  data=inMessage.externalize();  InetAddress dest=null;  try {    dest=InetAddress.getByName(inMessage.getDestinationAddress());  } catch (  UnknownHostException e) {  }  DatagramPacket outgoing=new DatagramPacket(data,data.length,dest,inMessage.getPort());  send(outgoing);}  }
class C{  private void removeDownloadIdFromSharedPrefs(int downloadId){  Set<String> downloadIds=getStoredDownloadInfo(DOWNLOAD_NOTIFICATION_IDS);  String id=Integer.toString(downloadId);  if (downloadIds.contains(id)) {    downloadIds.remove(id);    storeDownloadInfo(DOWNLOAD_NOTIFICATION_IDS,downloadIds);  }}  }
class C{  public MarketDeleteCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){  super(client,"market.deleteComment",BoolInt.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  commentId(commentId);}  }
class C{  public boolean canBatch(Entry e){  return (!renewalsDone() && !e.renewalsDone() && sameConstraints(lease,e.lease)&& lease.canBatch(e.lease)&& (renewDuration == Lease.ANY || renew - e.renew <= renewalRTT / 2 || endTime - e.renew <= renewDuration / 2)&& (e.renewDuration == Lease.ANY || e.renew > renew - e.renewDuration || e.renew >= e.expiration - e.renewDuration));}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=_set.length;  long oldKeys[]=_set;  V oldVals[]=_values;  byte oldStates[]=_states;  _set=new long[newCapacity];  _values=(V[])new Object[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      long o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  public static void printToFile(File file,String message){  printToFile(file,message,false);}  }
class C{  public void orderBy(IQueryResultSet<IEntryPacket> entries,List<OrderColumn> orderColumns) throws SQLException {  Collections.sort((List<IEntryPacket>)entries,getOrderByComparator(entries,orderColumns));}  }
class C{  public FilesExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public GenericAttr(CP name,byte data[]){  attr_name=name;  this.data=data;}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String srcPath,int reqWidth,int reqHeight){  final Options options=new Options();  options.inScaled=true;  options.inPurgeable=true;  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.GINGERBREAD_MR1) {    options.inPreferQualityOverSpeed=false;  }  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB) {    options.inMutable=false;  }  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(srcPath,options);  options.inSampleSize=calculateSampleFactor(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(srcPath,options);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  private void initView(){  this.progressView=(CircularProgressView)findViewById(R.id.container_photo_details_progressView);  progressView.setVisibility(VISIBLE);  this.detailsContainer=(RelativeLayout)findViewById(R.id.container_photo_details_detailsContainer);  detailsContainer.setVisibility(GONE);  if (Mysplash.getInstance().isLightTheme()) {    ((ImageView)findViewById(R.id.container_photo_details_sizeIcon)).setImageResource(R.drawable.ic_size_light);    ((ImageView)findViewById(R.id.container_photo_details_colorIcon)).setImageResource(R.drawable.ic_color_light);    ((ImageView)findViewById(R.id.container_photo_details_locationIcon)).setImageResource(R.drawable.ic_location_light);    ((ImageView)findViewById(R.id.container_photo_details_modelIcon)).setImageResource(R.drawable.ic_camera_light);    ((ImageView)findViewById(R.id.container_photo_details_exposureIcon)).setImageResource(R.drawable.ic_exposure_light);    ((ImageView)findViewById(R.id.container_photo_details_apertureIcon)).setImageResource(R.drawable.ic_aperture_light);    ((ImageView)findViewById(R.id.container_photo_details_focalIcon)).setImageResource(R.drawable.ic_focal_light);    ((ImageView)findViewById(R.id.container_photo_details_isoIcon)).setImageResource(R.drawable.ic_iso_light);  } else {    ((ImageView)findViewById(R.id.container_photo_details_sizeIcon)).setImageResource(R.drawable.ic_size_dark);    ((ImageView)findViewById(R.id.container_photo_details_colorIcon)).setImageResource(R.drawable.ic_color_dark);    ((ImageView)findViewById(R.id.container_photo_details_locationIcon)).setImageResource(R.drawable.ic_location_dark);    ((ImageView)findViewById(R.id.container_photo_details_modelIcon)).setImageResource(R.drawable.ic_camera_dark);    ((ImageView)findViewById(R.id.container_photo_details_exposureIcon)).setImageResource(R.drawable.ic_exposure_dark);    ((ImageView)findViewById(R.id.container_photo_details_apertureIcon)).setImageResource(R.drawable.ic_aperture_dark);    ((ImageView)findViewById(R.id.container_photo_details_focalIcon)).setImageResource(R.drawable.ic_focal_dark);    ((ImageView)findViewById(R.id.container_photo_details_isoIcon)).setImageResource(R.drawable.ic_iso_dark);  }  this.sizeText=(TextView)findViewById(R.id.container_photo_details_sizeTxt);  DisplayUtils.setTypeface(getContext(),sizeText);  this.colorText=(TextView)findViewById(R.id.container_photo_details_colorTxt);  DisplayUtils.setTypeface(getContext(),colorText);  this.locationText=(TextView)findViewById(R.id.container_photo_details_locationTxt);  DisplayUtils.setTypeface(getContext(),locationText);  this.modelText=(TextView)findViewById(R.id.container_photo_details_modelTxt);  DisplayUtils.setTypeface(getContext(),modelText);  this.exposureText=(TextView)findViewById(R.id.container_photo_details_exposureTxt);  DisplayUtils.setTypeface(getContext(),exposureText);  this.apertureText=(TextView)findViewById(R.id.container_photo_details_apertureTxt);  DisplayUtils.setTypeface(getContext(),apertureText);  this.focalText=(TextView)findViewById(R.id.container_photo_details_focalTxt);  DisplayUtils.setTypeface(getContext(),focalText);  this.isoText=(TextView)findViewById(R.id.container_photo_details_isoTxt);  DisplayUtils.setTypeface(getContext(),isoText);  this.colorSample=(FrameLayout)findViewById(R.id.container_photo_details_colorSample);  findViewById(R.id.container_photo_details_sizeContainer).setOnClickListener(this);  findViewById(R.id.container_photo_details_colorContainer).setOnClickListener(this);  findViewById(R.id.container_photo_details_locationContainer).setOnClickListener(this);  findViewById(R.id.container_photo_details_modelContainer).setOnClickListener(this);  findViewById(R.id.container_photo_details_exposureContainer).setOnClickListener(this);  findViewById(R.id.container_photo_details_apertureContainer).setOnClickListener(this);  findViewById(R.id.container_photo_details_focalContainer).setOnClickListener(this);  findViewById(R.id.container_photo_details_isoContainer).setOnClickListener(this);  this.tagView=(TagFlowLayout)findViewById(R.id.container_photo_details_tagView);}  }
class C{  @Bean public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(){  MappingJackson2HttpMessageConverter mjhmc=new MappingJackson2HttpMessageConverter();  Jackson2ObjectMapperFactoryBean jomfb=new Jackson2ObjectMapperFactoryBean();  jomfb.setAutoDetectFields(false);  jomfb.setIndentOutput(shouldIndentJacksonOutput);  jomfb.afterPropertiesSet();  mjhmc.setObjectMapper(jomfb.getObject());  return mjhmc;}  }
class C{  public void writeInt(int a) throws IOException {  outs.write((byte)(a >> 24));  outs.write((byte)(a >> 16));  outs.write((byte)(a >> 8));  outs.write((byte)(a));  position+=4;}  }
class C{  public boolean isApplicable(){  final LabelsJList list=((ChartViewer)getViewer()).getActiveLabelsJList();  return list != null && list.getSelectedIndex() != -1;}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  public boolean isCancelled(){  return this.request != null && request.isCancelled();}  }
class C{  public CategoryManageObject(int categoryId){  this.categoryId=categoryId;}  }
class C{  public static long addItem(Player player,Item sourceItem){  return addItem(player,sourceItem.getItemId(),sourceItem.getItemCount(),sourceItem,DEFAULT_UPDATE_PREDICATE);}  }
class C{  private static Set<GroupName> calculateNames(TimeSeriesCollection current,Collection<TimeSeriesCollection> backward,Collection<TimeSeriesCollection> forward){  final Set<GroupName> names=backward.stream().map(null).flatMap(null).collect(Collectors.toCollection(null));  names.retainAll(forward.stream().map(null).flatMap(null).collect(Collectors.toSet()));  names.removeAll(current.getGroups());  return names;}  }
class C{  public static String generateTightHashcode(IDexCodeItem ci){  StringBuilder sig=new StringBuilder();  for (  IDalvikInstruction insn : ci.getInstructions()) {    sig.append(insn.getMnemonic() + ":");    for (    IDalvikInstructionParameter param : insn.getParameters()) {      int pt=param.getType();      sig.append(String.format("%d,",pt));      if (pt == IDalvikInstruction.TYPE_IDX || pt == IDalvikInstruction.TYPE_REG) {        sig.append("x,");      } else {        sig.append(String.format("%d,",param.getValue()));      }    }    sig.append(" ");  }  byte[] h;  try {    MessageDigest md=MessageDigest.getInstance("SHA-256");    h=md.digest(sig.toString().getBytes());  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }  sig=null;  return Formatter.byteArrayToHexString(h).toLowerCase();}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  JFrame frame=null;  if (getViewer() != null)   frame=getViewer().getFrame();  String result=JOptionPane.showInputDialog(frame,"Set directory:",System.getProperty("user.dir"));  if (result != null && result.trim().length() > 0) {    execute("set dir='" + result.trim() + "';");  }}  }
class C{  public void refresh(){  loaderPolicy.refresh();  defaultPolicy.refresh();}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  private void loadListFromOpenDocuments(){  java.util.List<IDirector> projects=ProjectManager.getProjects();  for (  IDirector project : projects) {    if (project instanceof Director) {      Director dir=(Director)project;      if (!dir.getMainViewer().isLocked() && dir.getDocument().getNumberOfReads() > 0) {        listModel.addElement(new MyListItem(dir));      }    }  }}  }
class C{  private char[] fFormatDigits(double x){  String sx, sxOut;  int i, j, k;  int n1In, n2In;  int expon=0;  boolean minusSign=false;  if (x > 0.0)   sx=Double.toString(x); else   if (x < 0.0) {    sx=Double.toString(-x);    minusSign=true;  } else {    sx=Double.toString(x);    if (sx.charAt(0) == '-') {      minusSign=true;      sx=sx.substring(1);    }  }  int ePos=sx.indexOf('E');  int rPos=sx.indexOf('.');  if (rPos != -1)   n1In=rPos; else   if (ePos != -1)   n1In=ePos; else   n1In=sx.length();  if (rPos != -1) {    if (ePos != -1)     n2In=ePos - rPos - 1; else     n2In=sx.length() - rPos - 1;  } else   n2In=0;  if (ePos != -1) {    int ie=ePos + 1;    expon=0;    if (sx.charAt(ie) == '-') {      for (++ie; ie < sx.length(); ie++)       if (sx.charAt(ie) != '0')       break;      if (ie < sx.length())       expon=-Integer.parseInt(sx.substring(ie));    } else {      if (sx.charAt(ie) == '+')       ++ie;      for (; ie < sx.length(); ie++)       if (sx.charAt(ie) != '0')       break;      if (ie < sx.length())       expon=Integer.parseInt(sx.substring(ie));    }  }  int p;  if (precisionSet)   p=precision; else   p=defaultDigits - 1;  char[] ca1=sx.toCharArray();  char[] ca2=new char[n1In + n2In];  char[] ca3, ca4, ca5;  for (j=0; j < n1In; j++)   ca2[j]=ca1[j];  i=j + 1;  for (k=0; k < n2In; j++, i++, k++)   ca2[j]=ca1[i];  if (n1In + expon <= 0) {    ca3=new char[-expon + n2In];    for (j=0, k=0; k < (-n1In - expon); k++, j++)     ca3[j]='0';    for (i=0; i < (n1In + n2In); i++, j++)     ca3[j]=ca2[i];  } else   ca3=ca2;  boolean carry=false;  if (p < -expon + n2In) {    if (expon < 0)     i=p; else     i=p + n1In;    carry=checkForCarry(ca3,i);    if (carry)     carry=startSymbolicCarry(ca3,i - 1,0);  }  if (n1In + expon <= 0) {    ca4=new char[2 + p];    if (!carry)     ca4[0]='0'; else     ca4[0]='1';    if (alternateForm || !precisionSet || precision != 0) {      ca4[1]='.';      for (i=0, j=2; i < Math.min(p,ca3.length); i++, j++)       ca4[j]=ca3[i];      for (; j < ca4.length; j++)       ca4[j]='0';    }  } else {    if (!carry) {      if (alternateForm || !precisionSet || precision != 0)       ca4=new char[n1In + expon + p+ 1]; else       ca4=new char[n1In + expon];      j=0;    } else {      if (alternateForm || !precisionSet || precision != 0)       ca4=new char[n1In + expon + p+ 2]; else       ca4=new char[n1In + expon + 1];      ca4[0]='1';      j=1;    }    for (i=0; i < Math.min(n1In + expon,ca3.length); i++, j++)     ca4[j]=ca3[i];    for (; i < n1In + expon; i++, j++)     ca4[j]='0';    if (alternateForm || !precisionSet || precision != 0) {      ca4[j]='.';      j++;      for (k=0; i < ca3.length && k < p; i++, j++, k++)       ca4[j]=ca3[i];      for (; j < ca4.length; j++)       ca4[j]='0';    }  }  int nZeros=0;  if (!leftJustify && leadingZeros) {    int xThousands=0;    if (thousands) {      int xlead=0;      if (ca4[0] == '+' || ca4[0] == '-' || ca4[0] == ' ')       xlead=1;      int xdp=xlead;      for (; xdp < ca4.length; xdp++)       if (ca4[xdp] == '.')       break;      xThousands=(xdp - xlead) / 3;    }    if (fieldWidthSet)     nZeros=fieldWidth - ca4.length;    if ((!minusSign && (leadingSign || leadingSpace)) || minusSign)     nZeros--;    nZeros-=xThousands;    if (nZeros < 0)     nZeros=0;  }  j=0;  if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) {    ca5=new char[ca4.length + nZeros + 1];    j++;  } else   ca5=new char[ca4.length + nZeros];  if (!minusSign) {    if (leadingSign)     ca5[0]='+';    if (leadingSpace)     ca5[0]=' ';  } else   ca5[0]='-';  for (i=0; i < nZeros; i++, j++)   ca5[j]='0';  for (i=0; i < ca4.length; i++, j++)   ca5[j]=ca4[i];  int lead=0;  if (ca5[0] == '+' || ca5[0] == '-' || ca5[0] == ' ')   lead=1;  int dp=lead;  for (; dp < ca5.length; dp++)   if (ca5[dp] == '.')   break;  int nThousands=(dp - lead) / 3;  if (dp < ca5.length)   ca5[dp]=dfs.getDecimalSeparator();  char[] ca6=ca5;  if (thousands && nThousands > 0) {    ca6=new char[ca5.length + nThousands + lead];    ca6[0]=ca5[0];    for (i=lead, k=lead; i < dp; i++) {      if (i > 0 && (dp - i) % 3 == 0) {        ca6[k]=dfs.getGroupingSeparator();        ca6[k + 1]=ca5[i];        k+=2;      } else {        ca6[k]=ca5[i];        k++;      }    }    for (; i < ca5.length; i++, k++) {      ca6[k]=ca5[i];    }  }  return ca6;}  }
class C{  private boolean isLargeEnough(){  int x0=leftMargin;  int x1=getWidth() - rightMargin;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  return x0 < x1 && y0 > y1;}  }
class C{  @Override public void createUI(){  FieldPanel fieldPanel=createFieldPanel(0,"");  fieldPanel.setLayout(new BorderLayout());  externalGraphicPanel=new ExternalGraphicDetails(this,FunctionManager.getInstance());  fieldPanel.add(externalGraphicPanel,BorderLayout.CENTER);  Dimension panelSize=externalGraphicPanel.getPanelSize();  fieldPanel.setPreferredSize(panelSize);}  }
class C{  public AbstractClientPacket handle(ChannelBuffer buf,ClientChannelHandler channelHandler){  byte opCode=buf.readByte();  State state=channelHandler.getState();  AbstractClientPacket clientPacket=null;switch (state) {case CONNECTED:switch (opCode) {case 0x30:      clientPacket=new CM_CHAT_INI(buf,channelHandler,chatService);    break;case 0x05:  clientPacket=new CM_PLAYER_AUTH(buf,channelHandler,chatService);break;default :}break;case AUTHED:switch (opCode) {case 0x10:clientPacket=new CM_CHANNEL_REQUEST(buf,channelHandler,chatService);break;case 0x18:clientPacket=new CM_CHANNEL_MESSAGE(buf,channelHandler,broadcastService);default :}break;}return clientPacket;}  }
class C{  protected void handle(Throwable e){  SVNUIPlugin.openError(getShell(),null,null,e);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  private void rehash(final int newCapacity){  m_threshold=(int)(newCapacity / 2 * m_fillFactor);  m_mask=newCapacity / 2 - 1;  m_mask2=newCapacity - 1;  final int oldCapacity=m_data.length;  final int[] oldData=m_data;  m_data=new int[newCapacity];  m_size=m_hasFreeKey ? 1 : 0;  for (int i=0; i < oldCapacity; i+=2) {    final int oldKey=oldData[i];    if (oldKey != FREE_KEY)     put(oldKey,oldData[i + 1]);  }}  }
class C{  public ImageSize scaleDown(int sampleSize){  return new ImageSize(width / sampleSize,height / sampleSize);}  }
class C{  public Player findPlayer(String name){  return allPlayers.get(name);}  }
class C{  public static String[] grabNext3(String text,String key,String key2){  int pos=text.indexOf(key);  int length=key.length();  if (pos == -1 && key2 != null) {    pos=text.indexOf(key2);    length=key2.length();  }  if (pos == -1)   return null; else {    String[] result=new String[3];    StringTokenizer st=new StringTokenizer(text.substring(pos + length).trim());    for (int i=0; i < 3; i++) {      if (st.hasMoreTokens())       result[i]=st.nextToken(); else       return null;    }    return result;  }}  }
class C{  public OpenSpacesQueueObject newQueueEntry(String queueName){  OpenSpacesQueueObject queueObject=isFifo() ? new OpenSpacesFifoQueueObject() : new OpenSpacesQueueObject();  queueObject.setPersistent(isPersistent());  queueObject.setEndpointURI(queueName);  return queueObject;}  }
class C{  public DocsEditQuery tags(String... value){  return unsafeParam("tags",value);}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testProcessInstanceIdentityDeleteCandidateGroupEvents() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  taskService.addCandidateUser(task.getId(),"kermit");  taskService.addCandidateGroup(task.getId(),"sales");  assertEquals(6,listener.getEventsReceived().size());  listener.clearEventsReceived();  taskService.deleteCandidateUser(task.getId(),"kermit");  assertEquals(1,listener.getEventsReceived().size());  listener.clearEventsReceived();  taskService.deleteCandidateGroup(task.getId(),"sales");  assertEquals(1,listener.getEventsReceived().size());}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MSG_HOUSING_CANT_BID_LOW_LEVEL(int minLevel){  return new SM_SYSTEM_MESSAGE(1401225,minLevel);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public FriendsGetQueryWithFields(VkApiClient client,UserField... fields){  super(client,"friends.get",GetFieldsResponse.class);  fields(fields);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) static boolean less(Object v1,Object v2){  v1=maybeConvertToString(v1);  v2=maybeConvertToString(v2);  if (v1.getClass() != v2.getClass()) {    return false;  }  if (v1 instanceof Comparable) {    return ((Comparable)v1).compareTo(v2) < 0;  }  return false;}  }
class C{  private void sendQueryEnd(){  sendJson(Json.object(ACTION,ACTION_QUERY_END));}  }
class C{  public static void makeFriends(Player friend1,Player friend2){  DAOManager.getDAO(FriendListDAO.class).addFriends(friend1,friend2);  friend1.getFriendList().addFriend(new Friend(friend2.getCommonData()));  friend2.getFriendList().addFriend(new Friend(friend1.getCommonData()));  friend1.getClientConnection().sendPacket(new SM_FRIEND_LIST());  friend2.getClientConnection().sendPacket(new SM_FRIEND_LIST());  friend1.getClientConnection().sendPacket(new SM_FRIEND_RESPONSE(friend2.getName(),SM_FRIEND_RESPONSE.TARGET_ADDED));  friend2.getClientConnection().sendPacket(new SM_FRIEND_RESPONSE(friend1.getName(),SM_FRIEND_RESPONSE.TARGET_ADDED));}  }
class C{  public static final Color show(Component parent,Color initialColor,boolean alpha){  Window owner=ControlUtilities.getParentWindow(parent);  ColorDialog dialog=new ColorDialog(owner,initialColor,alpha);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    return dialog.pnlColor.getColor();  }  return null;}  }
class C{  public static boolean updateGradlePluginVersionAndNotifyFailure(@NotNull Project project,@NotNull String pluginVersion,@Nullable String gradleVersion,boolean invalidateSyncOnFailure){  return updateGradlePluginVersionAndNotifyFailure(project,pluginVersion,gradleVersion,false,invalidateSyncOnFailure);}  }
class C{  public String makeStringValue(String value){  value=StringUtils.replace(value,"\\","\\\\");  value=StringUtils.replace(value,"${","$\\{");  value=StringUtils.replace(value,"\"","\\\"");  return value;}  }
class C{  public Dependencies resolveFromFile(File file,String className,SootClass sc){  DexlibWrapper wrapper=cache.get(file);  if (wrapper == null) {    wrapper=new DexlibWrapper(file);    cache.put(file,wrapper);    wrapper.initialize();  }  Dependencies deps=wrapper.makeSootClass(sc,className);  addSourceFileTag(sc,"dalvik_source_" + file.getName());  return deps;}  }
class C{  public Document createDocument() throws ParserConfigurationException {  if (documentBuilder == null) {    documentBuilder=documentBuilderFactory.newDocumentBuilder();  }  return documentBuilder.newDocument();}  }
class C{  public static int calculateViewvCPU(int connectionServerCount,int securityServerCount,int vCenterServerCount){  final int cs=Integer.parseInt(VDICalculator.DEFAULTS.getString("view.connectionserver.vcpu.default")) * connectionServerCount;  final int ss=Integer.parseInt(VDICalculator.DEFAULTS.getString("view.securityserver.vcpu.default")) * securityServerCount;  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString("view.vcenter.vcpu.default")) * securityServerCount;  final int co=Integer.parseInt(VDICalculator.DEFAULTS.getString("view.composer.vcpu.default"));  return cs + ss + vc+ co;}  }
class C{  protected Control(Type type){  this.type=type;}  }
class C{  public List<LocalDateTime> top(int n){  List<LocalDateTime> top=new ArrayList<>();  long[] values=data.toLongArray();  LongArrays.parallelQuickSort(values,ReverseLongComparator.instance());  for (int i=0; i < n && i < values.length; i++) {    top.add(PackedLocalDateTime.asLocalDateTime(values[i]));  }  return top;}  }
class C{  public synchronized boolean receive(DHCPMessage outMessage){  try {    DatagramPacket incoming=new DatagramPacket(new byte[this.mtu],this.mtu);    receive(incoming);    outMessage.internalize(incoming.getData());  } catch (  java.io.IOException e) {    return false;  }  return true;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),0);  setChild(new List(),1);}  }
class C{  protected FriendsEditListQuery listId(int value){  return unsafeParam("list_id",value);}  }
class C{  private void reduce(){  if (reqs == null) {    reqs=empty;  }  if (prefs == null) {    prefs=empty;  }  reduce(0,0);  setRelative(reqs,REL_REQS);  setRelative(prefs,REL_PREFS);}  }
class C{  public static Map<String,Object> renderSubContentAsText(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> results=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> templateContext=UtilGenerics.checkMap(context.get("templateContext"));  String contentId=(String)context.get("contentId");  if (templateContext != null && UtilValidate.isEmpty(contentId)) {    contentId=(String)templateContext.get("contentId");  }  String mapKey=(String)context.get("mapKey");  if (templateContext != null && UtilValidate.isEmpty(mapKey)) {    mapKey=(String)templateContext.get("mapKey");  }  String mimeTypeId=(String)context.get("mimeTypeId");  if (templateContext != null && UtilValidate.isEmpty(mimeTypeId)) {    mimeTypeId=(String)templateContext.get("mimeTypeId");  }  Locale locale=(Locale)context.get("locale");  if (templateContext != null && locale == null) {    locale=(Locale)templateContext.get("locale");  }  GenericValue subContentDataResourceView=(GenericValue)context.get("subContentDataResourceView");  if (templateContext != null && subContentDataResourceView == null) {    subContentDataResourceView=(GenericValue)templateContext.get("subContentDataResourceView");  }  Writer out=(Writer)context.get("outWriter");  Writer outWriter=new StringWriter();  if (templateContext == null) {    templateContext=FastMap.newInstance();  }  try {    ContentWorker.renderSubContentAsText(dispatcher,delegator,contentId,outWriter,mapKey,templateContext,locale,mimeTypeId,true);    out.write(outWriter.toString());    results.put("textData",outWriter.toString());  } catch (  GeneralException e) {    Debug.logError(e,"Error rendering sub-content text",module);    return ServiceUtil.returnError(e.toString());  }catch (  IOException e) {    Debug.logError(e,"Error rendering sub-content text",module);    return ServiceUtil.returnError(e.toString());  }  return results;}  }
class C{  @Override public void endElement(QName element,Augmentations augs) throws XNIException {  if (fAnnotationDepth > -1) {    if (fInnerAnnotationDepth == fDepth) {      fInnerAnnotationDepth=-1;      schemaDOM.endAnnotationElement(element);      schemaDOM.endElement();    } else     if (fAnnotationDepth == fDepth) {      fAnnotationDepth=-1;      schemaDOM.endAnnotation(element,fCurrentAnnotationElement);      schemaDOM.endElement();    } else {      schemaDOM.endAnnotationElement(element);    }  } else {    if (element.uri == SchemaSymbols.URI_SCHEMAFORSCHEMA && fGenerateSyntheticAnnotation) {      boolean value=fHasNonSchemaAttributes.pop();      boolean sawann=fSawAnnotation.pop();      if (value && !sawann) {        String schemaPrefix=fNamespaceContext.getPrefix(SchemaSymbols.URI_SCHEMAFORSCHEMA);        final String annRawName=(schemaPrefix.length() == 0) ? SchemaSymbols.ELT_ANNOTATION : (schemaPrefix + ':' + SchemaSymbols.ELT_ANNOTATION);        schemaDOM.startAnnotation(annRawName,fEmptyAttr,fNamespaceContext);        final String elemRawName=(schemaPrefix.length() == 0) ? SchemaSymbols.ELT_DOCUMENTATION : (schemaPrefix + ':' + SchemaSymbols.ELT_DOCUMENTATION);        schemaDOM.startAnnotationElement(elemRawName,fEmptyAttr);        schemaDOM.charactersRaw("SYNTHETIC_ANNOTATION");        schemaDOM.endSyntheticAnnotationElement(elemRawName,false);        schemaDOM.endSyntheticAnnotationElement(annRawName,true);      }    }    schemaDOM.endElement();  }  fDepth--;}  }
class C{  public boolean addAll(PointsToSetInternal other,PointsToSetInternal exclude){  throw new RuntimeException("can't add into empty immutable set");}  }
class C{  public boolean drawShadows(){  return drawShadows;}  }
class C{  public boolean isBreak(){  String tokenWhiteSpace=token.getWhitespace();  String lastTokenPostpunctuation=null;  if (lastToken != null) {    lastTokenPostpunctuation=lastToken.getPostpunctuation();  }  if (lastToken == null || token == null) {    return false;  } else   if (tokenWhiteSpace.indexOf('\n') != tokenWhiteSpace.lastIndexOf('\n')) {    return true;  } else   if (lastTokenPostpunctuation.indexOf(':') != -1 || lastTokenPostpunctuation.indexOf('?') != -1 || lastTokenPostpunctuation.indexOf('!') != -1) {    return true;  } else   if (lastTokenPostpunctuation.indexOf('.') != -1 && tokenWhiteSpace.length() > 1 && Character.isUpperCase(token.getWord().charAt(0))) {    return true;  } else {    String lastWord=lastToken.getWord();    int lastWordLength=lastWord.length();    if (lastTokenPostpunctuation.indexOf('.') != -1 && Character.isUpperCase(token.getWord().charAt(0)) && !(Character.isUpperCase(lastWord.charAt(lastWordLength - 1)) || (lastWordLength < 4 && Character.isUpperCase(lastWord.charAt(0))))) {      return true;    }  }  return false;}  }
class C{  public void removePaintListener(PaintListener pl){  m_painters.remove(pl);}  }
class C{  public static <T extends ServiceDocument>ServiceDocumentQueryResult createQueryResult(Collection<T> documents){  ServiceDocumentQueryResult result=new ServiceDocumentQueryResult();  result.documentCount=(long)documents.size();  result.documentLinks=documents.stream().map(null).collect(Collectors.toList());  result.documents=new HashMap<>();  documents.forEach(null);  return result;}  }
class C{  private Map<String,Object> parse(String[] header,String[] data){  if (header.length != data.length) {    throw new RuntimeException("Invalid CSV");  }  return IntStream.range(0,header.length).mapToObj(null).filter(null).collect(toMap(null,null));}  }
class C{  public void toNativeArray(int[] dest,int offset,int len){  if (len == 0) {    return;  }  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  System.arraycopy(_data,offset,dest,0,len);}  }
class C{  public AxisLabelLayout(String group,AxisLayout layout,Rectangle2D bounds){  this(group,layout,bounds,50);}  }
class C{  public void init$Children(){}  }
class C{  protected void refreshConnectionUntilSuccessful(){  sleepInbetweenRecoveryAttempts();}  }
class C{  public MqttConnectionWithReconnection(final ReconnectionManager reconnectionManager,final MqttConnectionDetailsWithOptions connectionDetails){  super(connectionDetails);  this.reconnectionManager=reconnectionManager;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("BasicMethodConstraints{");  for (int i=0; i < descs.length; i++) {    if (i > 0) {      buf.append(", ");    }    descs[i].toString(buf,true);  }  buf.append('}');  return buf.toString();}  }
class C{  public boolean languageCostIgnore(String languagename){  boolean ignore;switch (languagename) {case "Unknown":case "Text":case "JSON":case "Markdown":case "INI File":case "ReStructuredText":case "Configuration":    ignore=true;  break;default :ignore=false;break;}return ignore;}  }
class C{  @BeforeClass public void init(){  userName=appProperties.getProperty("user-name");  initialExperiment=ExperimentFactory.createCompleteExperiment();  completeExperiment=ExperimentFactory.createCompleteExperiment();  personalizationExperiment=ExperimentFactory.createCompleteExperiment();}  }
class C{  public void check(long animationDurationMS){  if (state == FLAG_STATE_CHECK) {    return;  }  toggle(animationDurationMS);}  }
class C{  public ChallengesExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  private void createUI(){  createVendorOptionPanel();  readRasterConfigFile(vendorOptionRasterFactory,this,"Raster.xml");}  }
class C{  protected boolean sameFile(URL u1,URL u2){  if (!((u1.getProtocol() == u2.getProtocol()) || (u1.getProtocol() != null && u1.getProtocol().equalsIgnoreCase(u2.getProtocol())))) {    return false;  }  if (!hostsEqual(u1,u2)) {    return false;  }  String path1=u1.getPath();  String path2=u2.getPath();  if (path1 == path2) {  } else   if (path1 == null || path2 == null) {    return false;  } else   if (!path1.equals(path2)) {    int param=path1.lastIndexOf(';');    if (param < 0 || param != path2.lastIndexOf(';')) {      return false;    }    if (!path1.regionMatches(0,path2,0,param)) {      return false;    }    int comment1=path1.indexOf(',',param + 1);    int len=(comment1 != -1) ? comment1 : path1.length();    int comment2=path2.indexOf(',',param + 1);    int len2=(comment2 != -1) ? comment2 : path2.length();    if (len != len2) {      return false;    }    if (!path1.regionMatches(true,param + 1,path2,param + 1,len - param - 1)) {      return false;    }  }  if (u1.getQuery() == null ? u2.getQuery() != null : !u1.getQuery().equals(u2.getQuery())) {    return false;  }  int port1=(u1.getPort() != -1) ? u1.getPort() : u1.getDefaultPort();  int port2=(u2.getPort() != -1) ? u2.getPort() : u2.getDefaultPort();  if (port1 != port2) {    return false;  }  return true;}  }
class C{  public Matrix abs(){  Matrix result=new Matrix(m,n);  for (int i=0; i < result.A.length; i++) {    for (int j=0; j < result.A[i].length; j++)     result.A[i][j]=Math.abs(A[i][j]);  }  return result;}  }
class C{  private void rotateRight(Node<K,V> root){  Node<K,V> pivot=root.left;  Node<K,V> right=root.right;  Node<K,V> pivotLeft=pivot.left;  Node<K,V> pivotRight=pivot.right;  root.left=pivotRight;  if (pivotRight != null) {    pivotRight.parent=root;  }  replaceInParent(root,pivot);  pivot.right=root;  root.parent=pivot;  root.height=Math.max(right != null ? right.height : 0,pivotRight != null ? pivotRight.height : 0) + 1;  pivot.height=Math.max(root.height,pivotLeft != null ? pivotLeft.height : 0) + 1;}  }
class C{  protected TopNQuery buildTopNQuery(TemplateDruidQuery template,PhysicalTable table,Granularity granularity,DateTimeZone timeZone,Set<Dimension> groupByDimension,Filter filter,Set<Interval> intervals,TopNMetric metricSpec,int topN){  LOG.trace("Building druid topN query with following parameters \n" + "TemplateDruidQuery: {} \n" + "TimeGrain: {} \n"+ "TimeZone: {} \n"+ "Table: {} \n"+ "Group by dimensions: {} \n"+ "Filter: {} \n"+ "Intervals: {} \n"+ "MetricSpec: {} \n"+ "Threshold: {} \n",template,granularity,timeZone,table,groupByDimension,filter,intervals,metricSpec,topN);  if (template.getTimeGrain() != null) {    granularity=template.getTimeGrain().buildZonedTimeGrain(timeZone);  }  LOG.trace("Building a single pass druid topN query");  DataSource dataSource=new TableDataSource(table);  return new TopNQuery(dataSource,granularity,groupByDimension.iterator().next(),filter,template.getAggregations(),template.getPostAggregations(),intervals,topN,metricSpec);}  }
class C{  public int read(){  return bytes[pos++] & 0xFF;}  }
class C{  public boolean isFirst(){  return first;}  }
class C{  public static <T extends ConfigurationEntity>void validateIsCreate(List<T> configurationObjects){  for (  T config : configurationObjects) {    if (!config.isCreated()) {      throw new IllegalArgumentException(config.getClass() + " Created through the wrong builder pattern. " + "Please use the 'create' builder provided by the class of the object");    }  }}  }
class C{  private static void expandLargeNumber(String numberString,String order,int numberZeroes,WordRelation wordRelation){  int numberDigits=numberString.length();  int i=numberDigits - numberZeroes;  String part=numberString.substring(0,i);  Item oldTail=wordRelation.getTail();  expandNumber(part,wordRelation);  if (wordRelation.getTail() == oldTail) {    expandNumberAt(numberString,i,wordRelation);  } else {    wordRelation.addWord(order);    expandNumberAt(numberString,i,wordRelation);  }}  }
class C{  public TObjectIntHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  @SuppressWarnings("unchecked") TypeToken(Type type){  this.type=$Gson$Types.canonicalize($Gson$Preconditions.checkNotNull(type));  this.rawType=(Class<? super T>)$Gson$Types.getRawType(this.type);  this.hashCode=this.type.hashCode();}  }
class C{  public SM_PLAY_FAIL(AionAuthResponse response){  super(0x06);  this.response=response;}  }
class C{  public static boolean interfaceOf(Object obj,Object interfaceObject){  Class<?> interfaceClass=interfaceObject.getClass();  return interfaceOf(obj,interfaceClass);}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public static UnicastResponse readUnicastResponse(InputStream in,ClassLoader defaultLoader,boolean verifyCodebaseIntegrity,ClassLoader verifierLoader,Collection context) throws IOException, ClassNotFoundException {  try {    DataInput din=new DataInputStream(in);    String host=din.readUTF();    int port=din.readUnsignedShort();    String[] groups=new String[din.readInt()];    for (int i=0; i < groups.length; i++) {      groups[i]=din.readUTF();    }    MarshalledInstance mi=(MarshalledInstance)new ObjectInputStream(in).readObject();    ServiceRegistrar reg=(ServiceRegistrar)mi.get(defaultLoader,verifyCodebaseIntegrity,verifierLoader,context);    return new UnicastResponse(host,port,groups,reg);  } catch (  RuntimeException e) {    throw new DiscoveryProtocolException(null,e);  }}  }
class C{  @Override public Document createDefaultDocument(){  return new SyntaxDocument(lexer);}  }
class C{  @NotNull public static InspectionResult invalid(@NotNull PsiExpression node){  return new InspectionResult(node);}  }
class C{  private SecurityContext createTrustedContext(){  return new SecurityContext(null,trustedToken);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_FOOD_NOT_LOVEFLAVOR(String petName,int nameId){  return new SM_SYSTEM_MESSAGE(1400618,petName,new DescriptionId(nameId));}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  getViewer().selectComponent(getViewer().getMatrixTab());}  }
class C{  default String classEntityTypeName(IRI classIri){  return "t" + fromIri(classIri);}  }
class C{  public static Map<String,Object> updateContentMethod(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> result=FastMap.newInstance();  context.put("entityOperation","_UPDATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  GenericValue content=null;  Locale locale=(Locale)context.get("locale");  String contentId=(String)context.get("contentId");  try {    content=EntityQuery.use(delegator).from("Content").where("contentId",contentId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentNoContentFound",UtilMisc.toMap("contentId",contentId),locale));  }  context.put("currentContent",content);  Map<String,Object> permResults=ContentWorker.callContentPermissionCheckResult(delegator,dispatcher,context);  String permissionStatus=(String)permResults.get("permissionStatus");  if (permissionStatus != null && permissionStatus.equalsIgnoreCase("granted")) {    GenericValue userLogin=(GenericValue)context.get("userLogin");    String userLoginId=(String)userLogin.get("userLoginId");    String lastModifiedByUserLogin=userLoginId;    Timestamp lastModifiedDate=UtilDateTime.nowTimestamp();    if (UtilValidate.isNotEmpty(context.get("statusId"))) {      Map<String,Object> statusInMap=UtilMisc.<String,Object>toMap("contentId",context.get("contentId"),"statusId",context.get("statusId"),"userLogin",userLogin);      try {        dispatcher.runSync("setContentStatus",statusInMap);      } catch (      GenericServiceException e) {        Debug.logError(e,"Problem updating content Status","ContentServices");        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentStatusUpdateError",UtilMisc.toMap("errorString",e),locale));      }    }    content.setNonPKFields(context);    content.put("lastModifiedByUserLogin",lastModifiedByUserLogin);    content.put("lastModifiedDate",lastModifiedDate);    try {      content.store();    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(e.getMessage());    }  } else {    String errorMsg=ContentWorker.prepPermissionErrorMsg(permResults);    return ServiceUtil.returnError(errorMsg);  }  return result;}  }
class C{  private static int calculateBestInSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float inSampleSize=1.0f;  while ((inSampleSize * 2) <= ratio) {    inSampleSize*=2;  }  return (int)inSampleSize;}  }
class C{  public static Map<String,Object> updateFile(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=null;  try {    result=updateFileMethod(dctx,context);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(e.getMessage());  }  return result;}  }
class C{  private boolean isParagraphChange(String wSpaces){  int len=wSpaces.length();  for (int i=0; i < len; i++) {    char c=wSpaces.charAt(i);    if (('\n' == c) || ('\r' == c)) {      for (int j=i + 1; j < len; j++) {        if (c == wSpaces.charAt(j)) {          return true;        }      }    }  }  return false;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int len=s.readInt();  Object[] elements=new Object[len];  for (int i=0; i < len; i++)   elements[i]=s.readObject();  setArray(elements);}  }
class C{  public InternalEventTracker postEvent(Event event){  return eventBus.postEvent(event);}  }
class C{  public boolean isEditable(int row){  return isEditable() && getRowValue(row).mySource.getProvider().isModifiable();}  }
class C{  @Override public void startParameterEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  if (fPEDepth == fPEntityStack.length) {    boolean[] entityarray=new boolean[fPEntityStack.length * 2];    System.arraycopy(fPEntityStack,0,entityarray,0,fPEntityStack.length);    fPEntityStack=entityarray;  }  fPEntityStack[fPEDepth]=fReadingExternalDTD;  fPEDepth++;}  }
class C{  public WallEditQuery message(String value){  return unsafeParam("message",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_USE_CASH_TYPE_ITEM2(String value1,String value0s){  return new SM_SYSTEM_MESSAGE(1400334,value1,value0s);}  }
class C{  @Override public TDistribution makeDistribution(){  return new TDistribution(5.0);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  initModel();  initPresenter();}  }
class C{  protected VideoGetAlbumsByVideoQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  public int maxId(){  int t=-1;  while (true) {    int s=bits.nextSetBit(t + 1);    if (s == -1)     return t; else     t=s;  }}  }
class C{  public DocumentQuery addColumn(String document) throws NullPointerException {  this.documents.add(Objects.requireNonNull(document,"document is required"));  return this;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  protected void fireUpdateSymbol(){  if (!Controller.getInstance().isPopulating()) {    for (    RenderSymbolInterface renderer : rendererList) {      renderer.renderSymbol();    }    if (fieldConfigVisitor.isTreeDataUpdated()) {      for (      SLDTreeUpdatedInterface sldTree : treeUpdateList) {        sldTree.textUpdated();      }      fieldConfigVisitor.resetTreeDataUpdated();    }  }}  }
class C{  private void drawPrepare(Canvas canvas){  publicPaint.setColor(getProgressColor());  if (mArrow_center_effect != null) {    publicPaint.setPathEffect(mArrow_center_effect);  }  canvas.drawPath(path1,publicPaint);  if (mArrow_left_effect != null) {    publicPaint.setPathEffect(mArrow_left_effect);  }  canvas.drawPath(path2,publicPaint);  if (mArrow_right_effect != null) {    publicPaint.setPathEffect(mArrow_right_effect);  }  canvas.drawPath(path3,publicPaint);}  }
class C{  public boolean isValidGeometricNode(Node sparkNode){  IVarAbstraction pNode=consG.get(sparkNode);  return pNode != null && pNode.reachable();}  }
class C{  public void insert(int slot){  currentBuff.lockFlushing();  try {    for (int i=getNumRecords(); i > slot; i--)     copyRecordWithoutLogging(i - 1,i);    setNumRecordsWithoutLogging(getNumRecords() + 1);  }  finally {    currentBuff.unlockFlushing();  }}  }
class C{  @Override public boolean isConnected(){  return connected;}  }
class C{  public void fill(int fromIndex,int toIndex,short val){  if (toIndex > _pos) {    ensureCapacity(toIndex);    _pos=toIndex;  }  Arrays.fill(_data,fromIndex,toIndex,val);}  }
class C{  public ObjectMessage createObjectMessage(Serializable object) throws JMSException {  ensureOpen();  GSObjectMessageImpl objMsg=new GSObjectMessageImpl(this,object);  return objMsg;}  }
class C{  public DistanceEstimator(Distribution tmSymbolsPerRank,Distribution tmNonSymbolsPerRank){  SymbolsPerRank=new Distribution();  SymbolsPerRank.asTreeMap().putAll(tmSymbolsPerRank.asTreeMap());  NonSymbolsPerRank=new Distribution();  NonSymbolsPerRank.asTreeMap().putAll(tmNonSymbolsPerRank.asTreeMap());  MinRank=Math.min((Integer)tmSymbolsPerRank.asTreeMap().firstKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().firstKey());  MaxRank=Math.max((Integer)tmSymbolsPerRank.asTreeMap().lastKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().lastKey());  Estimator=new NGramSizeEstimator(SymbolsPerRank,NonSymbolsPerRank);}  }
class C{  public MnistImageFile(String name,String mode) throws IOException {  super(name,mode);  rows=readInt();  cols=readInt();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_BLOCK_ME_TO_B(String value0){  return new SM_SYSTEM_MESSAGE(1201084,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ChangeHateOnAttacked_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200800,skillcaster,value0,skillname);}  }
class C{  public short key(){  return _map._set[_index];}  }
class C{  public ParticleSystem(Activity a,int maxParticles,int drawableResId,long timeToLive,int parentViewId){  this(a,maxParticles,ContextCompat.getDrawable(a,drawableResId),timeToLive,parentViewId);}  }
class C{  public static void writeStringToFile(File file,String data,String encoding,boolean append) throws IOException {  writeStringToFile(file,data,Charsets.toCharset(encoding),append);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public MulExpr fullCopy(){  MulExpr tree=(MulExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  public String restoreLanguage(){  fLanguageStack.pop();  fLanguageScope.pop();  return (String)fLanguageStack.peek();}  }
class C{  public static void write(File file,CharSequence data,boolean append) throws IOException {  write(file,data,Charset.defaultCharset(),append);}  }
class C{  public boolean canZoomOutMoreX(){  return (mScaleX > mMinScaleX);}  }
class C{  public AdsUpdateTargetGroupQuery clientId(Integer value){  return unsafeParam("client_id",value);}  }
class C{  public Fraction subtract(final int i){  return new Fraction(numerator - i * denominator,denominator);}  }
class C{  public WallGetQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  protected void processPauseRequest(){  if (mState == State.PLAYING) {    mState=State.PAUSED;    mPlayer.pause();    releaseResources(false);  }}  }
class C{  public void deleteRemoteResources(ISVNRemoteResource[] remoteResources,String message,IProgressMonitor monitor) throws SVNException {  IProgressMonitor progress=Policy.monitorFor(monitor);  progress.beginTask(Policy.bind("RepositoryResourcesManager.deleteRemoteResources"),100 * remoteResources.length);  HashMap<ISVNRepositoryLocation,List<ISVNRemoteResource>> mapRepositories=new HashMap<ISVNRepositoryLocation,List<ISVNRemoteResource>>();  for (  ISVNRemoteResource remoteResource : remoteResources) {    ISVNRepositoryLocation repositoryLocation=remoteResource.getRepository();    List<ISVNRemoteResource> resources=(List<ISVNRemoteResource>)mapRepositories.get(repositoryLocation);    if (resources == null) {      resources=new ArrayList<ISVNRemoteResource>();      mapRepositories.put(repositoryLocation,resources);    }    resources.add(remoteResource);  }  ISVNClientAdapter svnClient=null;  ISVNRepositoryLocation repository=null;  try {    for (    List<ISVNRemoteResource> resources : mapRepositories.values()) {      repository=(resources.get(0)).getRepository();      svnClient=repository.getSVNClient();      SVNUrl urls[]=new SVNUrl[resources.size()];      for (int i=0; i < resources.size(); i++) {        ISVNRemoteResource resource=resources.get(i);        urls[i]=resource.getUrl();        resource.getParent().refresh();      }      svnClient.remove(urls,message);      repository.returnSVNClient(svnClient);      svnClient=null;      repository=null;      for (      ISVNRemoteResource resource : resources) {        remoteResourceDeleted(resource);      }      progress.worked(100 * urls.length);    }  } catch (  SVNClientException e) {    throw SVNException.wrapException(e);  } finally {    if (repository != null) {      repository.returnSVNClient(svnClient);    }    progress.done();  }}  }
class C{  public static ZooKeeperClientBuilder newBuilder(DistributedLogConfiguration conf){  return ZooKeeperClientBuilder.newBuilder().retryPolicy(RetryPolicyUtils.DEFAULT_INFINITE_RETRY_POLICY).sessionTimeoutMs(conf.getZKSessionTimeoutMilliseconds()).zkAclId(conf.getZkAclId()).retryThreadCount(conf.getZKClientNumberRetryThreads()).requestRateLimit(conf.getZKRequestRateLimit()).statsLogger(NullStatsLogger.INSTANCE);}  }
class C{  public static int probRound(double value,Random rand){  if (value >= 0) {    double lower=Math.floor(value);    double prob=value - lower;    if (rand.nextDouble() < prob) {      return (int)lower + 1;    } else {      return (int)lower;    }  } else {    double lower=Math.floor(Math.abs(value));    double prob=Math.abs(value) - lower;    if (rand.nextDouble() < prob) {      return -((int)lower + 1);    } else {      return -(int)lower;    }  }}  }
class C{  public DistributedLogManager createDistributedLogManagerWithSharedClients(String nameOfLogStream) throws InvalidStreamNameException, IOException {  return createDistributedLogManager(nameOfLogStream,ClientSharingOption.SharedClients);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Polymorph_A_TO_B(String skilltarget,String value0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201001,skilltarget,value0,skillcaster,skillname);}  }
class C{  public static ExpectedCondition<Boolean> collapse(){  return null;}  }
class C{  public Clock(){  super();}  }
class C{  public SecureCheckTokenQuery token(String value){  return unsafeParam("token",value);}  }
class C{  public boolean isHidden(final WebElement element,int timeout){  return isConditionMet(not(visibilityOf(element)),timeout);}  }
class C{  public boolean isKeepPositionOnRotation(){  return mKeepPositionOnRotation;}  }
class C{  public GroupsGetCatalogQuery categoryId(Integer value){  return unsafeParam("category_id",value);}  }
class C{  public Vector2 solve(Vector2 b){  double det=this.determinant();  if (Math.abs(det) > Epsilon.E) {    det=1.0 / det;  }  Vector2 r=new Vector2();  r.x=det * (this.m11 * b.x - this.m01 * b.y);  r.y=det * (this.m00 * b.y - this.m10 * b.x);  return r;}  }
class C{  public void paintNames(Graphics g0){  final Graphics2D g=(Graphics2D)g0;  final Rectangle visibleRect=getVisibleRect();  final Rectangle2D drawRect=new Rectangle2D.Double();  g.setColor(Color.WHITE);  g.fillRect(0,0,getWidth(),getHeight());  g.setBackground(Color.WHITE);  if (sequenceFont.getSize() > 14)   sequenceFont=sequenceFont.deriveFont(14.0f);  g.setFont(sequenceFont);  boolean showText=(sequenceFont.getSize() > 6);  if (showText)   g.setColor(Color.BLACK); else   g.setColor(Color.GRAY);  if (alignment != null && !alignment.getRowCompressor().isEnabled()) {    int minVisibleRow=(int)Math.max(0,(visibleRect.getY() / cellHeight));    int maxVisibleRow=(int)Math.min(alignment.getNumberOfSequences() - 1,(visibleRect.getY() + visibleRect.getHeight()) / cellHeight);    for (int row=minVisibleRow; row <= maxVisibleRow; row++) {      String name=alignment.getName(row);      int y=(int)Math.round(getY(row)) - 2;      if (showText)       g.drawString(name,Math.round(getX(0)),y - (int)(cellHeight - sequenceFont.getSize()) / 2); else {        drawRect.setRect(0,getY(row) - cellHeight + 2,getX(name.length()),Math.max(1,cellHeight - 1));        g.fill(drawRect);      }    }  }}  }
class C{  public boolean last(){  return seek(MDB_LAST);}  }
class C{  private int stateToEvent(){  if (state == IN || state == ZE) {    return JsonEvent.VALUE_INT;  } else   if (state >= FR && state <= E3) {    return JsonEvent.VALUE_DOUBLE;  } else   if (state == T3) {    return JsonEvent.VALUE_TRUE;  } else   if (state == F4) {    return JsonEvent.VALUE_FALSE;  } else   if (state == N3) {    return JsonEvent.VALUE_NULL;  }  return JsonEvent.NEED_MORE_INPUT;}  }
class C{  @Override public void dispatch(BusPacket<Processor> packet){  try {    if (_logger.isLoggable(Level.FINE))     _logger.fine("Bus packet arrived: " + packet.getClass().getName());    packet.execute(this);  } catch (  Exception ex) {    if (_logger.isLoggable(Level.SEVERE))     _logger.log(Level.SEVERE,ex.toString(),ex);  }}  }
class C{  public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  protected AdsGetStatisticsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public GroupsEditQuery docs(GroupsEditDocs value){  return unsafeParam("docs",value);}  }
class C{  public static boolean shouldShowRequestPermissionRationale(Activity activity,String permission){  return ActivityCompat.shouldShowRequestPermissionRationale(activity,permission);}  }
class C{  @Override public String toString(){  return getMessage();}  }
class C{  @JsonIgnore public boolean isProcessValueDeadbandEnabled(){  if (valueDeadbandType == DataTagDeadband.DEADBAND_PROCESS_ABSOLUTE || valueDeadbandType == DataTagDeadband.DEADBAND_PROCESS_RELATIVE || valueDeadbandType == DataTagDeadband.DEADBAND_PROCESS_ABSOLUTE_VALUE_DESCR_CHANGE || valueDeadbandType == DataTagDeadband.DEADBAND_PROCESS_RELATIVE_VALUE_DESCR_CHANGE) {    return true;  } else {    return false;  }}  }
class C{  public void clearAllQueryCaches(){  this.configManager.clearAllQueryCaches();}  }
class C{  protected XMLEntityManager createEntityManager(){  return new XMLEntityManager();}  }
class C{  public Location toLocation(World world,float yaw,float pitch){  return new Location(world,x,y,z,yaw,pitch);}  }
class C{  private static void assertNoCharactersMissing(int totalLength,Token[] tokens){  if (tokens.length != 0 && tokens[tokens.length - 1].right != totalLength) {    throw new AssertionError(String.format("Last tokenized character '%s' doesn't match document length '%s'",tokens[tokens.length - 1].right,totalLength));  }  int start=0;  for (int i=0; i < tokens.length; i++) {    Token token=tokens[i];    if (token.left != start) {      throw new AssertionError("Gap/inconsistency at: " + start);    }    start=token.right;  }}  }
class C{  protected AuthConfirmQuery phone(String value){  return unsafeParam("phone",value);}  }
class C{  private void notifyListeners(Object object,JsonObject config){  for (  PropertyChangeListener configUpdate : listener) {    configUpdate.propertyChange(new PropertyChangeEvent(this,"configSetup",config,config));  }}  }
class C{  private void importInitialData(SQLiteDatabase db){  final int length=5;  final String[] starterTaskTitles=mContext.getResources().getStringArray(R.array.starter_tasks);  final int[] starterTaskIntervals={2,5,5,5,3};  NagboxDbOps.Transaction transaction=NagboxDbOps.startTransaction(db);  Task reusableTask=new Task();  for (int i=0; i < length; i++) {    reusableTask.title=starterTaskTitles[i];    reusableTask.interval=starterTaskIntervals[i];    reusableTask.displayOrder=i + 1;    transaction.createTask(reusableTask);  }  transaction.commit();}  }
class C{  public static boolean interfaceOf(Class<?> objectClass,String interfaceName) throws ClassNotFoundException {  Class<?> interfaceClass=loadClass(interfaceName);  return interfaceOf(objectClass,interfaceClass);}  }
class C{  public static GsonBuilder createGsonBuilder(){  GsonBuilder gsonBuilder=new GsonBuilder().registerTypeAdapter(Timestamp.class,new TimestampSerializer()).registerTypeAdapter(Timestamp.class,new TimestampDeserializer()).registerTypeAdapter(Object.class,new TagValueDeserializer());  return gsonBuilder;}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  public MulExpr newMulExpr(Value op1,Value op2){  return new JMulExpr(op1,op2);}  }
class C{  public WriteEntryResult handleDirectWriteSA(Context context,IEntryHolder entry,IServerTypeDesc typeDesc,boolean fromReplication,boolean origin,boolean reInsertedEntry,boolean supplied_uid,boolean lockXtnsIfNeeded,int modifiers) throws TransactionException, UnusableEntryException, RemoteException, SAException {  ILockObject entryLock=null;  boolean originalMultiOpSyncReplIndicator=context.isSyncReplFromMultipleOperation();  try {    entryLock=getEntryLockObject(entry);    if (entry.isOffHeapEntry())     _cacheManager.getBlobStoreMemoryMonitor().onMemoryAllocation(((IOffHeapEntryHolder)entry).getOffHeapResidentPart().getStorageKey());    _engine.setLastEntryTimestamp(entry.getSCN());    boolean doNotNotifyListeners=reInsertedEntry;    IEntryHolder original_eh=null;    if (!reInsertedEntry)     original_eh=entry.createCopy();    context.setNotifyNewEntry(original_eh);    if (lockXtnsIfNeeded && entry.getXidOriginated() != null) {      if (!context.isTransactionalMultipleOperation())       entry.getXidOriginated().lock();      if (entry.getServerTypeDesc().isFifoSupported())       _engine.getTransactionHandler().getTxReadLock().lock();      try {        XtnEntry xtnEntry=entry.getXidOriginated();        if (xtnEntry == null || !xtnEntry.m_Active)         throw new TransactionException("The transaction is not active: " + entry.getXidOriginatedTransaction());        insertToSpaceLoop(context,entry,typeDesc,fromReplication,origin,supplied_uid,entryLock,modifiers);      }  finally {        if (!context.isTransactionalMultipleOperation())         entry.getXidOriginated().unlock();        if (entry.getServerTypeDesc().isFifoSupported())         _engine.getTransactionHandler().getTxReadLock().unlock();        _engine.performReplication(context);      }    } else {      insertToSpaceLoop(context,entry,typeDesc,fromReplication,origin,supplied_uid,entryLock,modifiers);    }    _engine.touchLastEntryTimestamp();    if (_cacheManager.getTemplatesManager().anyNonNotifyTemplates() || _cacheManager.getTemplatesManager().anyNotifyWriteTemplates()) {      EntryArrivedPacket ea=_engine.getEntryArrivedPacketsFactory().getPacket(context.getOperationID(),entry,entry.getXidOriginatedTransaction(),!doNotNotifyListeners,original_eh,fromReplication);      _engine.getProcessorWG().enqueueBlocked(ea);    }    return context.getWriteResult();  } catch (  Exception ex) {    if (!originalMultiOpSyncReplIndicator && context.isSyncReplFromMultipleOperation()) {      context.setSyncReplFromMultipleOperation(false);      _engine.performReplication(context);    }    if (ex instanceof SAException)     throw (SAException)ex;    if (ex instanceof TransactionException)     throw (TransactionException)ex;    if (ex instanceof UnusableEntryException)     throw (UnusableEntryException)ex;    if (ex instanceof RemoteException)     throw (RemoteException)ex;    if (ex instanceof RuntimeException)     throw (RuntimeException)ex;    throw new RuntimeException(ex);  } finally {    if (!originalMultiOpSyncReplIndicator && context.isSyncReplFromMultipleOperation())     context.setSyncReplFromMultipleOperation(false);    context.resetRecentFifoObject();    if (entryLock != null)     freeEntryLockObject(entryLock);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_INTERVAL_HEAL_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201154,num0,skilltarget,skillname);}  }
class C{  public XMLWriter(PrintWriter out,int tabLength){  m_out=out;  m_tab=2;}  }
class C{  public static BigInteger pow(final BigInteger k,BigInteger e) throws MathIllegalArgumentException {  if (e.compareTo(BigInteger.ZERO) < 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EXPONENT,e);  }  BigInteger result=BigInteger.ONE;  BigInteger k2p=k;  while (!BigInteger.ZERO.equals(e)) {    if (e.testBit(0)) {      result=result.multiply(k2p);    }    k2p=k2p.multiply(k2p);    e=e.shiftRight(1);  }  return result;}  }
class C{  public static Map<String,String> makeFeatureIdByTypeMap(Map<String,Object> parameters){  Map<String,String> featureIdByType=FastMap.newInstance();  if (parameters == null)   return featureIdByType;  for (  Map.Entry<String,Object> entry : parameters.entrySet()) {    String parameterName=entry.getKey();    if (parameterName.startsWith("pft_")) {      String productFeatureTypeId=parameterName.substring(4);      String productFeatureId=(String)entry.getValue();      if (UtilValidate.isNotEmpty(productFeatureId)) {        featureIdByType.put(productFeatureTypeId,productFeatureId);      }    }  }  return featureIdByType;}  }
class C{  @SuppressWarnings({"checkstyle:javadocmethod","checkstyle:javadocstyle"}) public Object parse(Reader reader){  Object content;  JsonLexer lexer=new JsonLexer(reader);  JsonToken token=lexer.nextToken();  if (token.getType() == OPEN_CURLY) {    content=parseObject(lexer);  } else   if (token.getType() == OPEN_BRACKET) {    content=parseArray(lexer);  } else {    throw new JsonException("A JSON payload should start with " + OPEN_CURLY.getLabel() + " or "+ OPEN_BRACKET.getLabel()+ ".\n"+ "Instead, '"+ token.getText()+ "' was found "+ "on line: "+ token.getStartLine()+ ", "+ "column: "+ token.getStartColumn());  }  return content;}  }
class C{  public void loadTabs(){  arrButton=new ArrayList<Button>();  arrTabs=new ArrayList<TabInfo>();  LinearLayout tabWidget=(LinearLayout)rootView.findViewById(R.id.custom_tabwidget);  LauncherSQLiteHelper sql=new LauncherSQLiteHelper(mActivity.getApplicationContext());  List<TabTable> tabTables=sql.getAllTabs();  for (  TabTable tabEntry : tabTables) {    TabInfo tab=new TabInfo(tabEntry);    arrTabs.add(tab);    Button btn=new Button(mActivity.getApplicationContext());    btn.setText(tab.getLabel());    arrButton.add(btn);    btn.setBackgroundResource(R.drawable.tab_style);    btn.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT,1));    btn.setTextColor(Color.WHITE);    tabWidget.addView(btn);    TabHost.TabSpec tSpecFragmentId=tHost.newTabSpec(tab.getTag());    tSpecFragmentId.setIndicator(tab.getLabel());    tSpecFragmentId.setContent(new DummyTabContent(mActivity.getBaseContext()));    tHost.addTab(tSpecFragmentId);  }}  }
class C{  public Text(Text utf8){  set(utf8);}  }
class C{  private static boolean rotateIfLandScapeCamera(){  if (Build.BRAND.toLowerCase().equals("samsung")) {    return true;  } else   if (Build.BRAND.toLowerCase().equals("sony")) {    return true;  } else {    return false;  }}  }
class C{  public void updateEnvVarManager(){  if (this.envMgr != null) {    this.envMgr.update(dataList);  }}  }
class C{  public FriendsGetAvailableForCallQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){  super(client,"friends.getAvailableForCall",GetAvailableForCallFieldsResponse.class);  accessToken(actor.getAccessToken());  fields(fields);}  }
class C{  @Override public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public MultiKMeansPlusPlusClusterer(final KMeansPlusPlusClusterer<T> clusterer,final int numTrials){  this(clusterer,numTrials,new SumOfClusterVariances<T>(clusterer.getDistanceMeasure()));}  }
class C{  @POST @Path("/applications/{applicationName}/users/{user}") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value="Sends email to administrators of the specified application requesting access for a user",httpMethod="POST",produces="application/json",protocols="https") @Timed public Response postEmail(@PathParam("applicationName") @ApiParam(value="Application Name") final Application.Name applicationName,@PathParam("user") @ApiParam(value="Requesting user ID") final UserInfo.Username user,@ApiParam(name="clickableAccessEmailLinks",value="Clickable Access Email Links") final EmailLinksList emails){  String message;  if (emailService.isActive()) {    emailService.sendEmailForUserPermission(applicationName,user,emails);    message="An email has been sent to the administrators of " + applicationName + " to ask for access for user "+ user+ "with links"+ emails.toString();    return httpHeader.headers().entity(message).build();  } else {    LOGGER.warn("User tried to send an email via API-call, but the service is not active.");    message="The email service is not activate at the moment.";  }  return httpHeader.headers(SERVICE_UNAVAILABLE).entity(message).build();}  }
class C{  protected static char[] encodeHex(byte[] data,char[] toDigits){  int l=data.length;  char[] out=new char[l << 1];  for (int i=0, j=0; i < l; i++) {    out[j++]=toDigits[(0xF0 & data[i]) >>> 4];    out[j++]=toDigits[0x0F & data[i]];  }  return out;}  }
class C{  public Texture2dProgram(ProgramType programType){  this.programType=programType;switch (programType) {case TEXTURE_2D:    textureTarget=GLES20.GL_TEXTURE_2D;  programHandle=GlUtil.createProgram(VERTEX_SHADER,FRAGMENT_SHADER_2D);break;case TEXTURE_EXT:textureTarget=GLES11Ext.GL_TEXTURE_EXTERNAL_OES;programHandle=GlUtil.createProgram(VERTEX_SHADER,FRAGMENT_SHADER_EXT);break;case TEXTURE_EXT_BW:textureTarget=GLES11Ext.GL_TEXTURE_EXTERNAL_OES;programHandle=GlUtil.createProgram(VERTEX_SHADER,FRAGMENT_SHADER_EXT_BW);break;case TEXTURE_EXT_FILT:textureTarget=GLES11Ext.GL_TEXTURE_EXTERNAL_OES;programHandle=GlUtil.createProgram(VERTEX_SHADER,FRAGMENT_SHADER_EXT_FILT);break;default :throw new RuntimeException("Unhandled type " + programType);}if (programHandle == 0) {throw new RuntimeException("Unable to create program");}Log.i(TAG,"Created program " + programHandle + " ("+ programType+ ")");positionLoc=GLES20.glGetAttribLocation(programHandle,"aPosition");GlUtil.checkLocation(positionLoc,"aPosition");textureCoordLoc=GLES20.glGetAttribLocation(programHandle,"aTextureCoord");GlUtil.checkLocation(textureCoordLoc,"aTextureCoord");mvpMatrixLoc=GLES20.glGetUniformLocation(programHandle,"uMVPMatrix");GlUtil.checkLocation(mvpMatrixLoc,"uMVPMatrix");texMatrixLoc=GLES20.glGetUniformLocation(programHandle,"uTexMatrix");GlUtil.checkLocation(texMatrixLoc,"uTexMatrix");kernelLoc=GLES20.glGetUniformLocation(programHandle,"uKernel");if (kernelLoc < 0) {kernelLoc=-1;texOffsetLoc=-1;colorAdjustLoc=-1;} else {texOffsetLoc=GLES20.glGetUniformLocation(programHandle,"uTexOffset");GlUtil.checkLocation(texOffsetLoc,"uTexOffset");colorAdjustLoc=GLES20.glGetUniformLocation(programHandle,"uColorAdjust");GlUtil.checkLocation(colorAdjustLoc,"uColorAdjust");setKernel(new float[]{0f,0f,0f,0f,1f,0f,0f,0f,0f},0f);setTexSize(256,256);}}  }
class C{  private void sendDelayedMessage(SuperToast superToast,int messageId,long delay){  Message message=obtainMessage(messageId);  message.obj=superToast;  sendMessageDelayed(message,delay);}  }
class C{  public boolean isLegionMember(){  return legionMember != null;}  }
class C{  public Webster() throws BindException {  this.port=Integer.getInteger(WEBSTER_PORT,0);  initialize();}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  public LineIterator(final Reader reader) throws IllegalArgumentException {  if (reader == null) {    throw new IllegalArgumentException("Reader must not be null");  }  if (reader instanceof BufferedReader) {    bufferedReader=(BufferedReader)reader;  } else {    bufferedReader=new BufferedReader(reader);  }}  }
class C{  public LookupTranslator(final CharSequence[]... lookup){  lookupMap=new HashMap<String,String>();  prefixSet=new HashSet<Character>();  int _shortest=Integer.MAX_VALUE;  int _longest=0;  if (lookup != null) {    for (    final CharSequence[] seq : lookup) {      this.lookupMap.put(seq[0].toString(),seq[1].toString());      this.prefixSet.add(seq[0].charAt(0));      final int sz=seq[0].length();      if (sz < _shortest) {        _shortest=sz;      }      if (sz > _longest) {        _longest=sz;      }    }  }  shortest=_shortest;  longest=_longest;}  }
class C{  protected GroupsEditLinkQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  private void closeCounterDataOutputStream() throws DataFallbackException {  if (LOG.isDebugEnabled())   LOG.debug("Closing the counter file writer for the file " + counterFile.getName());  if (dOutput != null) {    try {      dOutput.close();    } catch (    IOException e) {      throw new DataFallbackException(e.getMessage());    } finally {      dOutput=null;    }  }}  }
class C{  public WallGetRepostsQuery(VkApiClient client,UserActor actor){  super(client,"wall.getReposts",GetRepostsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public boolean geom_app_only(){  return soot.PhaseOptions.getBoolean(options,"geom-app-only");}  }
class C{  public final String toJson(){  return getGson().toJson(this);}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  private void validateDuration(long renewDuration,boolean isForever,String name){  if (renewDuration <= 0 && !(renewDuration == Lease.ANY && isForever)) {    if (renewDuration == Lease.ANY) {      throw new IllegalArgumentException("A renewDuration of " + "Lease.ANY can only be used with a " + name + " of "+ "Lease.FOREVER");    }    if (isForever) {      throw new IllegalArgumentException("When " + name + " is "+ "Lease.FOREVER the only valid values for renewDuration "+ "are a positive number, Lease.ANY, or Lease.FOREVER");    }    throw new IllegalArgumentException("When the " + name + " is not Lease.FOREVER the only valid values for "+ "renewDuration are a positive number or Lease.FOREVER");  }}  }
class C{  ConstrainableLandlordLeaseMap(Landlord landlord,Uuid landlordUuid,Lease lease,long duration){  super(landlord,landlordUuid,lease,duration);  if (!(landlord instanceof RemoteMethodControl))   throw new ClassCastException("landlord must implement " + "RemoteMethodControl");}  }
class C{  public NotesEditCommentQuery(VkApiClient client,UserActor actor,int commentId){  super(client,"notes.editComment",OkResponse.class);  accessToken(actor.getAccessToken());  commentId(commentId);}  }
class C{  private void fillDeclaredPrefixes(EndElement event){  fillDeclaredPrefixes(event.getNamespaces());}  }
class C{  private static boolean prefCapableTargetInstalled(@NotNull PsiFile file){  Module module=ModuleUtilCore.findModuleForPsiElement(file);  if (module != null) {    AndroidPlatform platform=AndroidPlatform.getInstance(module);    if (platform != null) {      IAndroidTarget[] targets=platform.getSdkData().getTargets();      for (int i=targets.length - 1; i >= 0; i--) {        IAndroidTarget target=targets[i];        if (target.isPlatform()) {          AndroidVersion version=target.getVersion();          int featureLevel=version.getFeatureLevel();          if (featureLevel >= PREFERENCES_MIN_API) {            return true;          }        }      }    }  }  return false;}  }
class C{  private ChannelBuffer storeResponse(SpaceCache.StoreResponse storeResponse){switch (storeResponse) {case EXISTS:    return EXISTS.duplicate();case NOT_FOUND:  return NOT_FOUND.duplicate();case NOT_STORED:return NOT_STORED.duplicate();case STORED:return STORED.duplicate();}throw new RuntimeException("unknown store response from cache: " + storeResponse);}  }
class C{  public void deleteImage(){  if (cameraBitmapPath != null) {    File image=new File(cameraBitmapPath);    if (image.exists()) {      image.delete();    }  }}  }
class C{  @Override public void drop_duplicates(){  for (  HeapInsIntervalManager im : pt_objs.values()) {    im.removeUselessSegments();  }}  }
class C{  @RequestMapping(value="/metrics/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteMetric(@PathVariable String id){  log.debug("REST request to delete Metric : {}",id);  metricRepository.delete(UUID.fromString(id));  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("metric",id.toString())).build();}  }
class C{  public NestableServerTransaction(){  super();}  }
class C{  public GeoServerConnectionListTool(GeoServerConnectUpdateInterface geoServerConnectUpdate){  super();  this.geoServerConnectUpdate=geoServerConnectUpdate;  createUI();}  }
class C{  public Webster(int port) throws BindException {  this.port=Integer.getInteger(WEBSTER_PORT,0);  initialize();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_INVITE_HIM(String value0,int allianceSize){  return new SM_SYSTEM_MESSAGE(1400558,value0,allianceSize);}  }
class C{  public static String formatQuantity(Long quantity){  if (quantity == null)   return ""; else   return formatQuantity(quantity.doubleValue());}  }
class C{  public void testTransitiveDependencies() throws IOException {  VirtualFile project1=createGradleProjectToImport(dir,module(1));  VirtualFile project2=createGradleProjectToImport(dir,module(2),module(1));  VirtualFile project3=createGradleProjectToImport(dir,module(3),module(2));  configureTopLevelProject(dir,Arrays.asList(module(1),module(2),module(3)),Collections.<String>emptySet());  Map<String,VirtualFile> projects=moduleListToMap(GradleModuleImporter.getRelatedProjects(project3,getProject()));  assertEquals(3,projects.size());  assertEquals(project1,projects.get(pathToGradleName(module(1))));  assertEquals(project2,projects.get(pathToGradleName(module(2))));  assertEquals(project3,projects.get(pathToGradleName(module(3))));}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  @Override public boolean isDataPresent(){  return true;}  }
class C{  public DestroyThread(){  super("DestroyThread");  setDaemon(false);}  }
class C{  public void stopAndGone(){  mBasoStatus=BasoStatus.GONE;  toggleLayout();}  }
class C{  public GeometricMean(){  sumOfLogs=new SumOfLogs();  incSumOfLogs=true;}  }
class C{  public static boolean isVeryDangerous(double d){  return Double.isInfinite(d) || Double.isNaN(d);}  }
class C{  public VideoGetQueryWithExtended(VkApiClient client,UserActor actor){  super(client,"video.get",GetExtendedResponse.class);  accessToken(actor.getAccessToken());  extended(true);}  }
class C{  private void cancelTimeoutTask(){  if (timeoutTask != null && !timeoutTask.isCancelled()) {    timeoutTask.cancel(false);  }}  }
class C{  public final void removePropertyChangeListener(String propertyName,PropertyChangeListener listener){  getChangeSupport().removePropertyChangeListener(propertyName,listener);}  }
class C{  public boolean run(String allowed){  return run(allowed,"t");}  }
class C{  public PaginationParameters withPerPage(String perPage) throws BadPaginationException {  return new PaginationParameters(parseParameter(perPage,"perPage"),page);}  }
class C{  static boolean linkClicked(TabLaunchType type){  return type == TabLaunchType.FROM_LINK || type == TabLaunchType.FROM_LONGPRESS_FOREGROUND || type == TabLaunchType.FROM_LONGPRESS_BACKGROUND;}  }
class C{  private void reportDisplaySelection(@Nullable GSAContextDisplaySelection displaySelection){  Tab currentTab=mActivity.getActivityTab();  reportUsageOfCurrentContextIfPossible(currentTab,false,displaySelection);}  }
class C{  public boolean hasTrackedEntity(){  return trackedEntity != null;}  }
class C{  public void addCommunicationListener(FTPCommunicationListener listener){synchronized (lock) {    communicationListeners.add(listener);    if (communication != null) {      communication.addCommunicationListener(listener);    }  }}  }
class C{  public RMA3FileModifier(String fileName) throws IOException {  super(fileName,READ_WRITE);  close();}  }
class C{  public boolean equalsTransform(ViewTransform transform){  if (dx == transform.dx && dy == transform.dy && scale == transform.scale) {    return true;  }  return false;}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  public static void w(String tag,String msg){  if (LOG_ENABLE) {    Log.w(tag,buildMsg(msg));  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();  viewer.setCanceled(false);  viewer.setVisible(false);}  }
class C{  public TrustManagerBuilder withConfig(@NonNull Context ctxt,@XmlRes int resourceId,boolean isDebugBuild){  return (withConfig(new XmlConfigSource(ctxt,resourceId,isDebugBuild)));}  }
class C{  public SiteAdminPage deletePage(String title){  clickDeleteAndConfirm(title);  grid.waitForLoaderNotPresent();  waitForPageNotExists(title);  return this;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private static double mlsadf1(double x,double b[],int m,double a,double d[]){  double out=0.0;  for (int i=PADEORDER; i > 0; i--) {    d[i]=(1 - a * a) * d[PADEORDER + i] + a * d[i];    d[PADEORDER + 1 + i]=d[i] * b[1];    double v=d[PADEORDER + 1 + i] * pade[ppade + i];    x+=((1 & i) == 1) ? v : -v;    out+=v;  }  d[PADEORDER + 1]=x;  out+=x;  return out;}  }
class C{  private Object writeReplace() throws ObjectStreamException {  return new LinkedHashMap<K,V>(this);}  }
class C{  public NewRasterSLD(){  super(Localisation.getString(NewRasterSLD.class,"NewRasterSLD.title"));}  }
class C{  public Matrix solve(Matrix B){  return (m == n ? (new LUDecomposition(this)).solve(B) : (new QRDecomposition(this)).solve(B));}  }
class C{  public static void wtf(String tag,String msg,Throwable tr){  println(ASSERT,tag,msg,tr);}  }
class C{  protected List<Local> buildParameters(DexBody body,boolean isStatic){  MethodReference item=getTargetMethodReference();  List<? extends CharSequence> paramTypes=item.getParameterTypes();  List<Local> parameters=new ArrayList<Local>();  List<Integer> regs=getUsedRegistersNums();  Debug.printDbg(" [methodIdItem]: ",item);  Debug.printDbg(" params types:");  if (paramTypes != null) {    for (    CharSequence t : paramTypes) {      Debug.printDbg(" t: ",t);    }  }  Debug.printDbg(" used registers (",regs.size(),"): ");  for (  int i : regs) {    Debug.printDbg(" r: ",i);  }  for (int i=0, j=0; i < regs.size(); i++, j++) {    parameters.add(body.getRegisterLocal(regs.get(i)));    if (!isStatic && i == 0) {      j--;      continue;    }    if (paramTypes != null && DexType.isWide(paramTypes.get(j).toString())) {      i++;    }  }  return parameters;}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  public synchronized void progressValue(int value){  if (this.progressDialog != null) {    this.progressDialog.setProgress(value);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Disease_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200891,skilltarget,skillcaster,skillname);}  }
class C{  public SpearmansCorrelation(final RealMatrix dataMatrix){  this(dataMatrix,new NaturalRanking());}  }
class C{  public InvalidConfigurationException(Throwable cause){  super(cause);}  }
class C{  protected Map<Character,Integer> match_alphabet(String pattern){  Map<Character,Integer> s=new HashMap<Character,Integer>();  char[] char_pattern=pattern.toCharArray();  for (  char c : char_pattern) {    s.put(c,0);  }  int i=0;  for (  char c : char_pattern) {    s.put(c,s.get(c) | (1 << (pattern.length() - i - 1)));    i++;  }  return s;}  }
class C{  public void writeChar(char a) throws IOException {  outs.write((byte)(a));  outs.write((byte)(a >> 8));}  }
class C{  private boolean hasLeaked(LeakKey<N> leakKey){  return leakedSources.contains(leakKey);}  }
class C{  public TypeVariableBV typeVariable(TypeNode typeNode){  TypeVariableBV result=typeVariableMap.get(typeNode);  if (result == null) {    int id=typeVariableList.size();    typeVariableList.add(null);    result=new TypeVariableBV(id,this,typeNode);    typeVariableList.set(id,result);    typeVariableMap.put(typeNode,result);  }  return result;}  }
class C{  static Field findField(Object instance,String name) throws NoSuchFieldException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Field field=clazz.getDeclaredField(name);      if (!field.isAccessible()) {        field.setAccessible(true);      }      return field;    } catch (    NoSuchFieldException e) {    }  }  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());}  }
class C{  public static final double binomialSuccessProbability(int iNumberOfTrials,int iNumberOfSuccesses,double dSuccessChance){  return gr.demokritos.iit.jinsect.utils.factorial(iNumberOfTrials,iNumberOfSuccesses) * Math.pow(dSuccessChance,iNumberOfSuccesses) * Math.pow(1.0 - dSuccessChance,iNumberOfTrials - iNumberOfSuccesses);}  }
class C{  public boolean canZoomOutMoreX(){  return (mScaleX > mMinScaleX);}  }
class C{  public final TObjectType filter(TObjectType obj){  return obj;}  }
class C{  private Class<?> findJarClass(String sClassName) throws JarClassLoaderException {  Class<?> c=hmClass.get(sClassName);  if (c != null) {    return c;  }  String sName=sClassName.replace('.','/') + ".class";  JarEntryInfo inf=findJarEntry(sName);  String jarSimpleName=null;  if (inf != null) {    jarSimpleName=inf.jarFileInfo.simpleName;    definePackage(sClassName,inf);    byte[] a_by=inf.getJarBytes();    try {      c=defineClass(sClassName,a_by,0,a_by.length,inf.jarFileInfo.pd);    } catch (    ClassFormatError e) {      throw new JarClassLoaderException(null,e);    }  }  if (c == null) {    throw new JarClassLoaderException(sClassName);  }  hmClass.put(sClassName,c);  logInfo(LogArea.CLASS,"Loaded %s by %s from JAR %s",sClassName,getClass().getName(),jarSimpleName);  return c;}  }
class C{  private static String cityFromGoogleMatchesList(final JSONArray array,final String node){  if (array == null || array.length() == 0) {    return null;  }  for (int i=0; i < array.length(); i++) {    final JSONObject component=array.getJSONObject(i);    final JSONArray types=component.getJSONArray(GoogleKey.TYPES);    boolean isCity=false;    for (int typeIndex=0; typeIndex < types.length(); typeIndex++) {      final String type=types.optString(typeIndex);      if ("postal_code".equals(type)) {        isCity=false;        break;      }      if ("locality".equals(type)) {        isCity=true;      }    }    if (isCity) {      return component.optString(node);    }  }  return null;}  }
class C{  public MessagesGetQuery lastMessageId(Integer value){  return unsafeParam("last_message_id",value);}  }
class C{  public static boolean isRemoteProtocol(IJSpace space){  if (space.getFinderURL() == null) {    return false;  }  return space.getFinderURL().isRemoteProtocol();}  }
class C{  synchronized void handleSendMessage(GSMessageImpl message) throws RemoteException, TransactionException, JMSException {  if (m_acknowledgeMode != Session.SESSION_TRANSACTED) {    doSend(message,null);    if (m_space.isEmbedded()) {      message.setProperties(message.cloneProperties());    }  } else {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("GSSessionImpl.sendMessage():" + " Adding message to sent messages list: " + message.JMSMessageID);    }    GSMessageImpl duplicate=message.duplicate();    sentMessages.add(duplicate);  }}  }
class C{  public VoiceQuality(int numVqParams,int Fs,float skipSize,float winSize){  params=new VoiceQualityFileHeader();  params.dimension=numVqParams;  params.samplingRate=16000;  params.skipsize=skipSize;  params.winsize=winSize;}  }
class C{  private long calcNextTime(){  long nextTime=Long.MAX_VALUE;  for (int i=0; i < _groups.length; i++) {    WatchdogGroup group=_groups[i];    long gTime=group._time;    long gWaitInterval=group._waitInterval;    nextTime=Math.min(nextTime,gTime + gWaitInterval);  }  for (int i=0; i < _groups.length; i++) {    WatchdogGroup group=_groups[i];    group._doTimeout=(nextTime == group._time + group._waitInterval);  }  return nextTime;}  }
class C{  public FloatArrayList top(int n){  FloatArrayList top=new FloatArrayList();  float[] values=data.toFloatArray();  FloatArrays.parallelQuickSort(values,reverseFloatComparator);  for (int i=0; i < n && i < values.length; i++) {    top.add(values[i]);  }  return top;}  }
class C{  @Nullable private static File findSrcDirectory(@NotNull SourceProvider sourceProvider){  return Iterables.getFirst(sourceProvider.getJavaDirectories(),null);}  }
class C{  public Database(String fileDir) throws DatabaseException {  this.fileDir=fileDir;  numTransactions=0;  tableLookup=new ConcurrentHashMap<String,Table>();  indexLookup=new ConcurrentHashMap<String,BPlusTree>();  File dir=new File(fileDir);  lockMan=new LockManager();  if (!dir.exists()) {    dir.mkdirs();  }  File[] files=dir.listFiles();  for (  File f : files) {    String fName=f.getName();    if (fName.endsWith(Table.FILENAME_EXTENSION)) {      int lastIndex=fName.lastIndexOf(Table.FILENAME_EXTENSION);      String tableName=fName.substring(0,lastIndex);      tableLookup.put(tableName,new Table(tableName,this.fileDir));    } else     if (fName.endsWith(BPlusTree.FILENAME_EXTENSION)) {      int lastIndex=fName.lastIndexOf(BPlusTree.FILENAME_EXTENSION);      String indexName=fName.substring(0,lastIndex);      indexLookup.put(indexName,new BPlusTree(indexName,this.fileDir));    }  }}  }
class C{  private UnicastResponse doUnicastDiscovery(final Socket socket,final DiscoveryConstraints unicastDiscoveryConstraints,final Discovery disco) throws IOException, ClassNotFoundException {  return disco.doUnicastDiscovery(socket,unicastDiscoveryConstraints.getUnfulfilledConstraints(),null,null,null);}  }
class C{  private void finalizeRecord(){  myPage.setVal(currentPos,new IntegerConstant(getLastRecordPosition()));  setPreviousNextRecordPosition(currentPos + pointerSize);  setLastRecordPosition(currentPos);  currentPos+=pointerSize;  setNextRecordPosition(currentPos);  currentPos+=pointerSize;}  }
class C{  public PraatTextfileDoubleDataSource(File file) throws FileNotFoundException {  this(new FileReader(file));}  }
class C{  public SpaceHealthStatus(){}  }
class C{  public void mergeFieldDataManager(GraphicPanelFieldManager mergedData){  for (  String key : panelMap.keySet()) {    List<PopulateDetailsInterface> panelList=panelMap.get(key);    for (    PopulateDetailsInterface panel : panelList) {      mergedData.add(panel.getFieldDataManager());    }  }}  }
class C{  public static PsiReference[] findReferencesInElementScope(PsiElement element){  return findReferencesInScope(element,PsiSearchHelper.SERVICE.getInstance(element.getProject()).getUseScope(element));}  }
class C{  public static final boolean isValidQueryParam(String param){  return StringUtils.isAlphanumeric(param);}  }
class C{  public JSONWriter value(long l) throws JSONException {  return this.append(Long.toString(l));}  }
class C{  public double normF(){  double f=0;  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      f=Maths.hypot(f,A[i][j]);    }  }  return f;}  }
class C{  protected void handleDirectoryEnd(File directory,int depth,Collection<T> results) throws IOException {}  }
class C{  public double distinctValues(String fldName){  double sum=0;  for (  Bucket bkt : dists.get(fldName))   sum+=bkt.distinctValues();  return sum;}  }
class C{  @SuppressFBWarnings("DM_EXIT") private void dispatchIntentOnUIThread(Intent intent){  Context context=getApplicationContext();  if (!CommandLine.isInitialized()) {    ContentApplication.initCommandLine(context);  }  try {    BrowserStartupController.get(this,LibraryProcessType.PROCESS_BROWSER).startBrowserProcessesSync(false);    if (!NotificationUIManager.dispatchNotificationEvent(intent)) {      Log.w(TAG,"Unable to dispatch the notification event to Chrome.");    }  } catch (  ProcessInitException e) {    Log.e(TAG,"Unable to start the browser process.",e);    System.exit(-1);  }}  }
class C{  public boolean optimizeScanForSingleObject(){  return true;}  }
class C{  public void collapse(TreePath[] paths){  for (  TreePath path : paths) {    collapse((NodeBase)path.getLastPathComponent());  }}  }
class C{  public static int round(final float x){  final int bits=Float.floatToRawIntBits(x);  final int biasedExp=(bits >> 23) & 0xff;  final int shift=(23 - 1 + Float.MAX_EXPONENT) - biasedExp;  if ((shift & -32) == 0) {    int extendedMantissa=0x00800000 | (bits & 0x007fffff);    if (bits < 0) {      extendedMantissa=-extendedMantissa;    }    return ((extendedMantissa >> shift) + 1) >> 1;  } else {    return (int)x;  }}  }
class C{  protected FriendsAddQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  @SuppressWarnings("unchecked") public static <R>JoinObservable<R> when(Plan<R> p1,Plan<R> p2,Plan<R> p3,Plan<R> p4,Plan<R> p5,Plan<R> p6){  return from(JoinPatterns.when(p1,p2,p3,p4,p5,p6));}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigEnum copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigEnum(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public DeleteBackupPolicy(){  LogManager manager=LogManager.getLogManager();  this.period=DAYS_TO_MILLIS * getPeriodProperty(resolvePolicyProperty(manager,PERIOD_PROPERTY));  this.backup=getBackupProperty(resolvePolicyProperty(manager,BACKUP_PROPERTY));  this.files=new ArrayList<File>(backup);}  }
class C{  @Deprecated public boolean isReverseOrder(){  return mIsReversed;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_StatDown_A_TO_SELF(String skilltarget,String value0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200876,skilltarget,value0,skillcaster,skillname);}  }
class C{  public UsersGetNearbyQuery timeout(Integer value){  return unsafeParam("timeout",value);}  }
class C{  public boolean contains(final S1Interval y){  if (isInverted()) {    if (y.isInverted()) {      return y.lo() >= lo() && y.hi() <= hi();    }    return (y.lo() >= lo() || y.hi() <= hi()) && !isEmpty();  } else {    if (y.isInverted()) {      return isFull() || y.isEmpty();    }    return y.lo() >= lo() && y.hi() <= hi();  }}  }
class C{  private void initModel(){  this.pagerManageModel=new PagerManageObject(0);}  }
class C{  protected void unbind(){  if (mResolver != null && isNullable) {    for (    final Field field : mResolver.getClass().getDeclaredFields()) {      try {        if (!field.getType().isPrimitive()) {          field.setAccessible(true);          field.set(mResolver,null);        }      } catch (      IllegalAccessException e) {        e.printStackTrace();      }    }    mResolver=null;    mAnimationResolver=null;  }}  }
class C{  @OnClick(R.id.loadDataButton) public void loadData(){  mApiInterface.sleep("5").subscribeOn(Schedulers.io()).compose(getRxPhoenix().<JsonElement>surviveConfigChanges(REQUEST_SLOW));}  }
class C{  public void addArg(Expr node){  List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();  list.addChild(node);}  }
class C{  public void content(String content){  escapeString(content);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static void cancelAll(String id){  Token token;synchronized (TOKENS) {    token=TOKENS.remove(id);  }  if (token == null) {    return;  }  HANDLER.removeCallbacksAndMessages(token);}  }
class C{  public GSMessageImpl(){  super();  setFifo(true);  setNOWriteLeaseMode(true);  makeTransient();}  }
class C{  public ActivitiTestCase(){}  }
class C{  private void writeMetaObject(JsonGenerator generator,Collection<Interval> missingIntervals,SimplifiedIntervalList volatileIntervals,Pagination pagination) throws IOException {  boolean paginating=pagination != null;  boolean haveMissingIntervals=BardFeatureFlag.PARTIAL_DATA.isOn() && !missingIntervals.isEmpty();  boolean haveVolatileIntervals=volatileIntervals != null && !volatileIntervals.isEmpty();  if (!paginating && !haveMissingIntervals && !haveVolatileIntervals) {    return;  }  generator.writeObjectFieldStart("meta");  if (haveMissingIntervals) {    generator.writeObjectField("missingIntervals",buildIntervalStringList(missingIntervals));  }  if (haveVolatileIntervals) {    generator.writeObjectField("volatileIntervals",buildIntervalStringList(volatileIntervals));  }  if (paginating) {    generator.writeObjectFieldStart("pagination");    for (    Entry<String,URI> entry : paginationLinks.entrySet()) {      generator.writeObjectField(entry.getKey(),entry.getValue());    }    generator.writeNumberField("currentPage",pagination.getPage());    generator.writeNumberField("rowsPerPage",pagination.getPerPage());    generator.writeNumberField("numberOfResults",pagination.getNumResults());    generator.writeEndObject();  }  generator.writeEndObject();}  }
class C{  @Deprecated protected boolean isRequired(AnnotationIntrospector intr){  return _metadata.isRequired();}  }
class C{  @Override public void flush(){}  }
class C{  public E argMax(){  double maxCount=Double.NEGATIVE_INFINITY;  E maxKey=null;  for (  Entry<E,Double> entry : entries.entrySet()) {    if (entry.getValue() > maxCount || maxKey == null) {      maxKey=entry.getKey();      maxCount=entry.getValue();    }  }  return maxKey;}  }
class C{  public ElementDefinitionImpl createElementDefinition(String name) throws DOMException {  if (errorChecking && !isXMLName(name,xml11Version)) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);  }  return new ElementDefinitionImpl(this,name);}  }
class C{  public void updateHighlights(){  Markers.removeMarkers(textComponent,SEARCH_MARKER);  if (jTglHighlight.isSelected()) {    Markers.markAll(textComponent,finder.getPattern(),SEARCH_MARKER);  }}  }
class C{  @Override public void delete() throws AWSIotException {  super.delete();}  }
class C{  public MultiDirectionalSimplex(final int n,double sideLength){  this(n,sideLength,DEFAULT_KHI,DEFAULT_GAMMA);}  }
class C{  static boolean isOSVersionMatch(final String osVersion,final String osVersionPrefix){  if (osVersion == null || osVersion.trim().isEmpty()) {    return false;  }  String[] versionPrefixParts=osVersionPrefix.split("\\.");  String[] versionParts=osVersion.split("\\.");  for (int i=0; i < Math.min(versionPrefixParts.length,versionParts.length); i++) {    if (!versionPrefixParts[i].equals(versionParts[i])) {      return false;    }  }  return true;}  }
class C{  @Override public void showMessage(String message){  Snackbar.make(bgSplash,message,Snackbar.LENGTH_SHORT).show();}  }
class C{  public void delServerService(String serviceName,String group) throws RegistryException {  if (registry != null) {    registry.delServerService(serviceName,group);  }  monitor.logEvent("PigeonGovernor.delService",serviceName,"swimlane=" + group);}  }
class C{  @Override public boolean hasField(String fldname){  if (groupFlds.contains(fldname))   return true;  if (aggFns != null)   for (  AggregationFn fn : aggFns)   if (fn.fieldName().equals(fldname))   return true;  return false;}  }
class C{  private void initializeCatalogs(boolean privateCatalog){  catalog=catalogManager.getCatalog();}  }
class C{  public void init$Children(){  children=new ASTNode[5];  setChild(new List(),2);  setChild(new List(),3);  setChild(new Opt(),4);}  }
class C{  protected int isUnchangedByNormalization(XMLString value){  int end=value.offset + value.length;  for (int i=value.offset; i < end; ++i) {    int c=value.ch[i];    if (c < 0x20) {      return i - value.offset;    }  }  return -1;}  }
class C{  public boolean remove(final T object){  final int location=this.getLocation(object);  final boolean removed=this.data.remove(object);  this.notifyItemRemoved(location);  return removed;}  }
class C{  private static void populateMainMimeTypeMapping(){  MAINMIMETYPE_TO_ICON_MAPPING.put("audio",R.drawable.file_sound);  MAINMIMETYPE_TO_ICON_MAPPING.put("database",R.drawable.file);  MAINMIMETYPE_TO_ICON_MAPPING.put("httpd",R.drawable.file_zip);  MAINMIMETYPE_TO_ICON_MAPPING.put("image",R.drawable.file_image);  MAINMIMETYPE_TO_ICON_MAPPING.put("text",R.drawable.file_text);  MAINMIMETYPE_TO_ICON_MAPPING.put("video",R.drawable.file_movie);  MAINMIMETYPE_TO_ICON_MAPPING.put("web",R.drawable.file_code);}  }
class C{  private int peek(){  if (stackSize == 0) {    throw new IllegalStateException("JsonWriter is closed.");  }  return stack[stackSize - 1];}  }
class C{  public void swipeStarted(long time,ScrollDirection direction,float x,float y){  if (direction != ScrollDirection.DOWN)   return;  setWarpState(false,false);  startAnimation(time,OverviewAnimationType.ENTER_STACK);  final int index=mTabModel.index();  if (mCurrentMode == Orientation.PORTRAIT) {    mScrollOffset=-index * mSpacing;  } else {    mScrollOffset=-index * mSpacing + x - LANDSCAPE_SWIPE_DRAG_TAB_OFFSET_DP;    mScrollOffset=MathUtils.clamp(mScrollOffset,getMinScroll(false),getMaxScroll(false));  }  setScrollTarget(mScrollOffset,true);  mEvenOutProgress=1.f;  mSwipeUnboundScrollOffset=mScrollOffset;  mSwipeBoundedScrollOffset=mScrollOffset;  mSwipeIsCancelable=false;  mSwipeCanScroll=false;  mInSwipe=true;}  }
class C{  public static boolean instanceOf(Object obj,String typeName){  return instanceOf(obj,typeName,null);}  }
class C{  public int compareTo(GenericEntity that){  if (that == null)   return -1;  int tempResult=this.entityName.compareTo(that.entityName);  if (tempResult != 0)   return tempResult;  Iterator<ModelField> pkIter=getModelEntity().getPksIterator();  while (pkIter.hasNext()) {    ModelField curField=pkIter.next();    tempResult=compareToFields(that,curField.getName());    if (tempResult != 0)     return tempResult;  }  Iterator<ModelField> nopkIter=getModelEntity().getNopksIterator();  while (nopkIter.hasNext()) {    ModelField curField=nopkIter.next();    if (!curField.getIsAutoCreatedInternal()) {      tempResult=compareToFields(that,curField.getName());      if (tempResult != 0)       return tempResult;    }  }  return tempResult;}  }
class C{  public TransformerException(String message){  super(message);  this.containedException=null;  this.locator=null;}  }
class C{  public static double[][] ndary(int m,int n){  double d[][]=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      d[i][j]=R.nextGaussian();    }  }  return d;}  }
class C{  public void load(String featureFileName,String weightsFile,FeatureProcessorManager featProc) throws IOException, MaryConfigurationException {  HalfPhoneFeatureFileReader ffr=new HalfPhoneFeatureFileReader(featureFileName);  load(ffr,weightsFile,featProc);}  }
class C{  protected boolean isValidPath(String path){  if (path == null) {    return false;  }  if (!PATH_PATTERN.matcher(path).matches()) {    return false;  }  int slash2Count=countToken("//",path);  if (isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {    return false;  }  int slashCount=countToken("/",path);  int dot2Count=countToken("..",path);  if (dot2Count > 0 && (slashCount - slash2Count - 1) <= dot2Count) {    return false;  }  return true;}  }
class C{  public MessagesRestoreQuery(VkApiClient client,Actor actor,int messageId){  super(client,"messages.restore",OkResponse.class);  accessToken(actor.getAccessToken());  messageId(messageId);}  }
class C{  private void layout(NodeItem p,Rectangle2D r){  Iterator childIter=p.children();  while (childIter.hasNext())   m_kids.add(childIter.next());  Collections.sort(m_kids,s_cmp);  double w=Math.min(r.getWidth(),r.getHeight());  squarify(m_kids,m_row,w,r);  m_kids.clear();  childIter=p.children();  while (childIter.hasNext()) {    NodeItem c=(NodeItem)childIter.next();    if (c.getChildCount() > 0 && c.getDouble(AREA) > 0) {      updateArea(c,r);      layout(c,r);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_CHANGE_LEADER(String value0,String value1,String value2){  return new SM_SYSTEM_MESSAGE(1300986,value0,value1,value2);}  }
class C{  public static void overwriteNukkit(ItemStack bukkit,cn.nukkit.item.Item nukkit){  PokkitMaterialData materialData=PokkitMaterialData.fromBukkit(bukkit.getType(),bukkit.getDurability());  if (materialData.getNukkitId() != nukkit.getId()) {    Bukkit.getLogger().info("Cannot change item material from " + bukkit.getType() + " to "+ cn.nukkit.item.Item.get(nukkit.getId()));    return;  }  nukkit.setDamage(materialData.getNukkitDamage());  nukkit.setCount(bukkit.getAmount());  if (bukkit.hasItemMeta()) {    PokkitItemMeta meta=(PokkitItemMeta)bukkit.getItemMeta();    nukkit.setNamedTag(meta.getTag());  } else {    nukkit.clearNamedTag();  }}  }
class C{  public void addButtonPressedListener(FieldConfigStringButtonInterface listener){  if (buttonPressedListenerList == null) {    buttonPressedListenerList=new ArrayList<FieldConfigStringButtonInterface>();  }  buttonPressedListenerList.add(listener);}  }
class C{  protected void releaseResources(boolean releaseMediaPlayer){  stopForeground(true);  if (releaseMediaPlayer && mPlayer != null) {    mPlayer.reset();    mPlayer.release();    mPlayer=null;  }  if (mWifiLock.isHeld()) {    mWifiLock.release();  }}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=Camera.open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  configManager.setDesiredCameraParameters(theCamera);  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  reverseImage=prefs.getBoolean(KEY_REVERSE_IMAGE,false);}  }
class C{  public synchronized void cancel(){}  }
class C{  private static void closeSafe(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    IOException ignored) {    }  }}  }
class C{  public void processPicture(Bitmap bitmap,int encodingType){  ByteArrayOutputStream jpeg_data=new ByteArrayOutputStream();  CompressFormat compressFormat=encodingType == JPEG ? CompressFormat.JPEG : CompressFormat.PNG;  try {    if (bitmap.compress(compressFormat,mQuality,jpeg_data)) {      byte[] code=jpeg_data.toByteArray();      byte[] output=Base64.encode(code,Base64.NO_WRAP);      String js_out=new String(output);      this.callbackContext.success(js_out);      js_out=null;      output=null;      code=null;    }  } catch (  Exception e) {    this.failPicture("Error compressing image.");  }  jpeg_data=null;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (name == null)   throw new InvalidObjectException("name cannot be null");  integrity=MarshalledWrapper.integrityEnforced(in);  if (hash == 0) {    try {      computeHash();    } catch (    Exception e) {      throw new UnmarshalException("unable to calculate the type" + " hash for " + name,e);    }  }}  }
class C{  public static int convertSpToPx(int spSize){  return Math.round((float)spSize / getDisplayDensity4Fonts());}  }
class C{  public void incrementSelectedStyleIndex(){  this.selectedStyleIndex++;}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  public NotesGetQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  protected void queryDataSourceMetadata(PhysicalTable table){  String resourcePath=String.format(DATASOURCE_METADATA_QUERY_FORMAT,table.getName());  SuccessCallback success=buildDataSourceMetadataSuccessCallback(table);  HttpErrorCallback errorCallback=getErrorCallback(table);  druidWebService.getJsonObject(success,errorCallback,failureCallback,resourcePath);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ALARM_COLD_GAME_IDAB1_DREADGION(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400264,durationtime0);}  }
class C{  public void seek(long pos) throws IOException {  throw new IOException("seek(" + pos + "): not supported");}  }
class C{  public void init$Children(){}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (getInt(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  private void registerSymbols(){  logger.debug("Symbols supported:");  addSymbol(new CharacterMarkerSymbol());  addSymbol(new CartographicLineSymbol());  addSymbol(new TextSymbol());  addSymbol(new SimpleMarkerSymbol());  addSymbol(new SimpleLineSymbol());  addSymbol(new LineFillSymbol());  addSymbol(new MultiLayerFillSymbol());  addSymbol(new MultiLayerLineSymbol());  addSymbol(new MultiLayerMarkerSymbol());  addSymbol(new SimpleFillSymbol());  addSymbol(new PictureFillSymbol());}  }
class C{  public static void toast(Context context,String str,int lengthShort){  Toast.makeText(context,str,lengthShort).show();}  }
class C{  private void checkAtEnd(){  if (!hasSynErrors && matched) {    syntaxError("unrecognized input: ");  }}  }
class C{  public AemBubbleMessage waitForAemBubbleMessage(){  bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.presenceOfElementLocated(BUBBLE_MSG_BY_SELECTOR));  return this;}  }
class C{  public NotificationsMarkAsViewedQuery(VkApiClient client,UserActor actor){  super(client,"notifications.markAsViewed",BoolInt.class);  accessToken(actor.getAccessToken());}  }
class C{  public PhotosGetByIdQueryWithExtended(VkApiClient client,UserActor actor,String... photos){  super(client,"photos.getById",Utils.buildParametrizedType(List.class,PhotoFull.class));  accessToken(actor.getAccessToken());  photos(photos);  extended(true);}  }
class C{  public void java_lang_Class_setProtectionDomain0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable protdmn=helper.tempField("<java.lang.Class ProtDmn>");  helper.assign(protdmn,params[0]);}  }
class C{  public static WordRelation createWordRelation(Utterance utterance,TokenToWords tokenToWords){  Relation relation=utterance.createRelation(Relation.WORD);  return new WordRelation(relation,tokenToWords);}  }
class C{  public void write(int b) throws IOException {  outs.write(b);}  }
class C{  public void placeItem(ItemStack stack,BlockPos pos,World world,boolean centreItem){  double offset=(centreItem) ? 0.5D : 0.0D;  EntityItem entityitem=new EntityItem(world,(double)pos.getX() + offset,(double)pos.getY() + offset,(double)pos.getZ() + offset,stack);  entityitem.motionX=0;  entityitem.motionY=0;  entityitem.motionZ=0;  entityitem.setDefaultPickupDelay();  world.spawnEntityInWorld(entityitem);}  }
class C{  public void addParameter(ParameterDeclaration node){  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();  list.addChild(node);}  }
class C{  public void printContext(PrintWriter out){  out.println(getMessage());  out.print(context);}  }
class C{  public void oneShot(View emiter,int numParticles,Interpolator interpolator){  configureEmiter(emiter,Gravity.CENTER);  mActivatedParticles=0;  mEmittingTime=mTimeToLive;  for (int i=0; i < numParticles && i < mMaxParticles; i++) {    activateParticle(0);  }  startAnimator(interpolator,mTimeToLive);}  }
class C{  @Nullable @Override public T startIfOwner(String name,Duration waitDuration){  long timeoutAt=System.currentTimeMillis() + waitDuration.getMillis();  LeaderService leaderService=_leaderMap.getUnchecked(name).orNull();  if (leaderService == null || !awaitRunning(leaderService,timeoutAt)) {    return null;  }  Service service;  for (; ; ) {    Optional<Service> opt=leaderService.getCurrentDelegateService();    if (opt.isPresent()) {      service=opt.get();      break;    }    if (System.currentTimeMillis() >= timeoutAt) {      return null;    }    try {      Thread.sleep(10);    } catch (    InterruptedException e) {      throw Throwables.propagate(e);    }  }  if (!awaitRunning(service,timeoutAt)) {    return null;  }  return (T)service;}  }
class C{  @Override protected float evaluate(Target target){  float result=0;  if (targetAttributeName.contentEquals("f0")) {    result=(float)sopModels.get("f0").interpret(target);  } else {    if (target.getAllophone().isVowel())     result=(float)sopModels.get("vowel").interpret(target); else     if (target.getAllophone().isConsonant())     result=(float)sopModels.get("consonant").interpret(target); else     if (target.getAllophone().isPause())     result=(float)sopModels.get("pause").interpret(target); else {      Log.w(Mary.LOG,"Warning: No SoP model for target " + target.toString());    }  }  return result;}  }
class C{  public static final void banPlayer(Player bannedPlayer,Player banGiver){  Preconditions.checkNotNull(bannedPlayer,"Banned player should not be null");  Preconditions.checkNotNull(banGiver,"Bangiver player should not be null");  PlayerGroup group=banGiver.getPlayerGroup2();  if (group != null) {    if (group.hasMember(bannedPlayer.getObjectId())) {      group.onEvent(new PlayerGroupLeavedEvent(group,bannedPlayer,LeaveReson.BAN,banGiver.getName()));    } else {      log.warn("TEAM2: banning player not in group {}",group.onlineMembers());    }  }}  }
class C{  @Deprecated public void showDoneButton(boolean showDone){  setProgressButtonEnabled(showDone);}  }
class C{  void recordLongTimesHistogram100(String name,long duration){  RecordHistogram.recordCustomTimesHistogram(name,TimeUnit.MILLISECONDS.toMillis(duration),TimeUnit.MILLISECONDS.toMillis(1),TimeUnit.HOURS.toMillis(1),TimeUnit.MILLISECONDS,100);}  }
class C{  public SimpsonIntegrator(final int minimalIterationCount,final int maximalIterationCount) throws MathIllegalArgumentException {  super(minimalIterationCount,maximalIterationCount);  if (maximalIterationCount > SIMPSON_MAX_ITERATIONS_COUNT) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,maximalIterationCount,SIMPSON_MAX_ITERATIONS_COUNT);  }}  }
class C{  public ShimpleBody newBody(Body b,Map<String,String> options){  return new ShimpleBody(b,options);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MAIL_MSG_RECIPIENT_MAILBOX_FULL(String value0){  return new SM_SYSTEM_MESSAGE(1390113,value0);}  }
class C{  private void configureLogging(final Client clientProxy){  clientProxy.getInInterceptors().add(WebserviceLogging.LOGGING_IN_INTERCEPTOR);  clientProxy.getOutInterceptors().add(WebserviceLogging.LOGGING_OUT_INTERCEPTOR);}  }
class C{  @Override public void start(){  Log.d(SBMP_TAG,"start()");  if (pmInterface == null) {    if (!ConnectPlayMediaService()) {      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  try {    pmInterface.start(ServiceBackedMediaPlayer.this.sessionId);  } catch (  RemoteException e) {    e.printStackTrace();    ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);  }}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public AnimationHelper(InfoBarContainer container,ContentWrapperView target,InfoBar infoBar,View toShow,int animationType){  mContainer=container;  mLinearLayout=container.getLinearLayout();  mInfoBar=infoBar;  mTargetWrapperView=target;  mAnimatorSet=new AnimatorSet();  mAnimationType=animationType;  mToShow=toShow;  assert mLinearLayout.indexOfChild(mTargetWrapperView) != -1;}  }
class C{  @Override public void applyDimensionBehaviour(){  wrapContent();}  }
class C{  public static ChatPage paginate(String unpaginatedString,int pageNumber){  return paginate(unpaginatedString,pageNumber,GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH,CLOSED_CHAT_PAGE_HEIGHT);}  }
class C{  protected void onAnimationStarted(){}  }
class C{  public void notifyMoveObservers(){  notifyObservers(ObserverType.MOVE);}  }
class C{  public synchronized boolean isInitialized(){  return initialized;}  }
class C{  private boolean checkIfNameExists(String name){  boolean returnValue=false;  for (  DrawableData drawable : drawables) {    if (drawable.name.equals(name)) {      returnValue=true;      break;    }  }  return returnValue;}  }
class C{  public PhotosCreateAlbumQuery uploadByAdminsOnly(Boolean value){  return unsafeParam("upload_by_admins_only",value);}  }
class C{  private static boolean isAccessibilityManagerEnabled(Context context){  AccessibilityManager accessibilityManager=((AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE));  return accessibilityManager != null && accessibilityManager.isEnabled();}  }
class C{  @Override public void addDate(String word,Date date){  addDateInternal(new Index(word.length()),word,date);}  }
class C{  public String matchPattern(String alias){  if (alias != null)   return "(" + alias + processLabels(matchLabels,false)+ ")";  return "(" + processLabels(matchLabels,false) + ")";}  }
class C{  protected GroupsAddLinkQuery link(String value){  return unsafeParam("link",value);}  }
class C{  public GroupsEditQuery website(String value){  return unsafeParam("website",value);}  }
class C{  public Instruction parseMethod(method_info m){  int j;  Code_attribute ca;  ByteCode bc;  Instruction inst, head, tail;  exception_table_entry e;  head=null;  tail=null;  bc=new ByteCode();  ca=m.locate_code_attribute();  if (ca == null)   return null;  j=0;  while (j < ca.code_length) {    inst=bc.disassemble_bytecode(ca.code,j);    inst.originalIndex=j;    if (inst instanceof Instruction_Unknown) {      G.v().out.println("Unknown instruction in \"" + m.toName(constant_pool) + "\" at offset "+ j);      G.v().out.println(" bytecode = " + (((int)(inst.code)) & 0xff));    }    j=inst.nextOffset(j);    if (head == null)     head=inst; else {      tail.next=inst;      inst.prev=tail;    }    tail=inst;  }  bc.build(head);  for (j=0; j < ca.exception_table_length; j++) {    e=ca.exception_table[j];    e.start_inst=bc.locateInst(e.start_pc);    if (e.end_pc == ca.code_length)     e.end_inst=null; else     e.end_inst=bc.locateInst(e.end_pc);    e.handler_inst=bc.locateInst(e.handler_pc);    if (e.handler_inst != null)     e.handler_inst.labelled=true;  }  m.instructions=head;  for (  attribute_info element : ca.attributes) {    if (element instanceof LineNumberTable_attribute) {      LineNumberTable_attribute lntattr=(LineNumberTable_attribute)element;      for (      line_number_table_entry element0 : lntattr.line_number_table) {        element0.start_inst=bc.locateInst(element0.start_pc);      }    }  }  return head;}  }
class C{  protected double computeMaxYAxisValueLogScale(double maxValue){  double v=0;  int mantisse=0;  int exponent=0;  while (v < maxValue) {    if (mantisse < 9)     mantisse++; else {      mantisse=1;      exponent++;    }    v=mantisse * Math.pow(10,exponent);  }  return Math.log10(v);}  }
class C{  @SuppressWarnings("SameReturnValue") boolean attachToConsole(){  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Snare_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200936,skilltarget);}  }
class C{  public static Thread start(Thread thread,long timeout){  Thread monitor=null;  if (timeout > 0) {    ThreadMonitor timout=new ThreadMonitor(thread,timeout);    monitor=new Thread(timout,ThreadMonitor.class.getSimpleName());    monitor.setDaemon(true);    monitor.start();  }  return monitor;}  }
class C{  public void commit() throws GenericDataSourceException {  if (_connection == null) {    return;  }  if (Debug.verboseOn())   Debug.logVerbose("SQLProcessor:commit() _manualTX=" + _manualTX,module);  if (_manualTX) {    try {      _connection.commit();      if (Debug.verboseOn())       Debug.logVerbose("SQLProcessor:commit() : called commit on connection",module);    } catch (    SQLException sqle) {      Debug.logError(sqle,"Error committing transaction: " + sqle.toString());      try {        rollback();      } catch (      GenericDataSourceException rbsqle) {        Debug.logError(rbsqle,"Got another error when trying to rollback after error committing transaction: " + sqle.toString());      }      throw new GenericDataSourceException("SQL Exception occurred on commit",sqle);    }  }}  }
class C{  private void storeLegionMember(LegionMember legionMember){  storeLegionMember(legionMember,false);}  }
class C{  public boolean hasProgram(){  return program != null;}  }
class C{  public ParameterGuesser(Collection<WeightedObservedPoint> observations){  MathUtils.checkNotNull(observations);  if (observations.size() < 3) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,observations.size(),3);  }  final List<WeightedObservedPoint> sorted=sortObservations(observations);  final double[] params=basicGuess(sorted.toArray(new WeightedObservedPoint[0]));  norm=params[0];  mean=params[1];  sigma=params[2];}  }
class C{  public DataParseException(){  super();}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public void activateAemPackage(String packageName) throws IOException {  HttpPost upload=builder.createUploadRequest();  MultipartEntityBuilder entityBuilder=MultipartEntityBuilder.create();  entityBuilder.addBinaryBody("package",new File(CONTENT_PATH,packageName),ContentType.DEFAULT_BINARY,packageName);  entityBuilder.addTextBody("force","true");  upload.setEntity(entityBuilder.build());  JsonObject result=sender.sendCrxRequest(upload);  String path=result.get("path").getAsString();  HttpPost install=builder.createInstallRequest(path);  sender.sendCrxRequest(install);  HttpPost replicate=builder.createReplicateRequest(path);  sender.sendCrxRequest(replicate);}  }
class C{  public void removeLastHistoryEntry(String historyUrl,long urlTimeMs){  if (mContent == null)   return;  mContent.removeLastHistoryEntry(historyUrl,urlTimeMs);}  }
class C{  public double estimateEffort(double sloc){  double eaf=1;  double effortApplied=3.2 * Math.pow(sloc / 1000,1.05) * eaf;  return effortApplied;}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public void denormalize(int minLevel,int levelMod,ArrayList<S2CellId> output){  output.clear();  output.ensureCapacity(size());  for (  S2CellId id : this) {    int level=id.level();    int newLevel=Math.max(minLevel,level);    if (levelMod > 1) {      newLevel+=(S2CellId.MAX_LEVEL - (newLevel - minLevel)) % levelMod;      newLevel=Math.min(S2CellId.MAX_LEVEL,newLevel);    }    if (newLevel == level) {      output.add(id);    } else {      S2CellId end=id.childEnd(newLevel);      for (id=id.childBegin(newLevel); !id.equals(end); id=id.next()) {        output.add(id);      }    }  }}  }
class C{  private boolean checkResult(File f,String result,int expectedNoOfExternalGraphics){  boolean ok=false;  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=null;  try {    InputSource is=new InputSource(new StringReader(result));    builder=factory.newDocumentBuilder();    Document doc=builder.parse(is);    NodeList nodeList=doc.getDocumentElement().getElementsByTagName("sld:OnlineResource");    assertEquals(expectedNoOfExternalGraphics,nodeList.getLength());    int noFound=0;    for (int index=0; index < nodeList.getLength(); index++) {      Element node=(Element)nodeList.item(index);      String href=node.getAttribute("xlink:href");      assertTrue(f.getName().compareTo(href) == 0);      noFound++;    }    assertEquals(noFound,expectedNoOfExternalGraphics);    ok=true;  } catch (  SAXException|IOException e) {    e.printStackTrace();  }catch (  ParserConfigurationException e) {    e.printStackTrace();  }  return ok;}  }
