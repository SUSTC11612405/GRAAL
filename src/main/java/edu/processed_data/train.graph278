class C{  @Override public final boolean hasNext(){  return _nextIndex != _size;}  }
class C{  public BEFileChooserUICross(JFileChooser filechooser){  super(filechooser);}  }
class C{  private void coalesceTwoActiveNodes(double height){  int node1=MathUtils.nextInt(activeNodeCount);  int node2=node1;  while (node2 == node1) {    node2=MathUtils.nextInt(activeNodeCount);  }  SimpleNode left=nodeList.get(node1);  SimpleNode right=nodeList.get(node2);  SimpleNode newNode=new SimpleNode();  newNode.setHeight(height);  newNode.addChild(left);  newNode.addChild(right);  nodeList.remove(left);  nodeList.remove(right);  activeNodeCount-=2;  nodeList.add(activeNodeCount,newNode);  activeNodeCount+=1;  if (getMinimumInactiveHeight() < height) {    throw new RuntimeException("This should never happen! Somehow the current active node is older than the next inactive node!");  }}  }
class C{  public static double log(double x){  return logConst * log2(x);}  }
class C{  @Override public void clear(){  super.clear();  int[] keys=_set;  double[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  private void added(IJavaElement element){  this.added.add(element);  ListItem current=getNewPosition(element);  ListItem previous=null, next=null;  if (current.previous != null)   previous=getNewPosition(current.previous);  if (current.next != null)   next=getNewPosition(current.next);  if (previous != null)   previous.next=current.next;  if (next != null)   next.previous=current.previous;}  }
class C{  public String dataPath(String where){  if (new File(where).isAbsolute())   return where;  return sketchPath + File.separator + "data"+ File.separator+ where;}  }
class C{  private void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  public void collectiveUpdated(ContributionBox peer){}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {}  }
class C{  @Override protected BrokerService createBroker() throws Exception {  BrokerService broker=super.createBroker();  broker.setPopulateJMSXUserID(true);  return broker;}  }
class C{  private SipRequest createSubscribe(SipDialogPath dialog,long expirePeriod) throws PayloadException {  try {    SipRequest subscribe=SipMessageFactory.createSubscribe(dialog,expirePeriod);    SipUtils.setFeatureTags(subscribe.getStackMessage(),InstantMessagingService.CHAT_FEATURE_TAGS);    subscribe.addHeader("Event","conference");    subscribe.addHeader("Accept","application/conference-info+xml");    return subscribe;  } catch (  ParseException e) {    throw new PayloadException("Unable to form subscribe message with featureTags : ".concat(Arrays.asList(InstantMessagingService.CHAT_FEATURE_TAGS).toString()),e);  }}  }
class C{  public Builder recordFailure(Predicate<Throwable> predicate){  this.exceptionPredicate=predicate;  return this;}  }
class C{  public SerialLight(String systemName,CMRISystemConnectionMemo memo){  super(systemName);  _memo=memo;  initializeLight(systemName);}  }
class C{  @Override public Runnable wrap(Runnable runnable){  if (isTracing()) {    return new TraceRunnable(this,this.spanNamer,runnable);  }  return runnable;}  }
class C{  public ImmutableList<DynamicMessage> read(){  ImmutableList.Builder<DynamicMessage> resultBuilder=ImmutableList.builder();  try {    String line;    boolean wasLastLineEmpty=false;    while (true) {      line=bufferedReader.readLine();      if (Strings.isNullOrEmpty(line)) {        if (wasLastLineEmpty) {          return resultBuilder.build();        }        wasLastLineEmpty=true;        continue;      } else {        wasLastLineEmpty=false;      }      StringBuilder stringBuilder=new StringBuilder();      while (!Strings.isNullOrEmpty(line)) {        stringBuilder.append(line);        line=bufferedReader.readLine();      }      wasLastLineEmpty=true;      DynamicMessage.Builder nextMessage=DynamicMessage.newBuilder(descriptor);      jsonParser.merge(stringBuilder.toString(),nextMessage);      resultBuilder.add(nextMessage.build());    }  } catch (  Exception e) {    throw new IllegalArgumentException("Unable to read messages from: " + source,e);  }}  }
class C{  public ActionEvent(Object source,int id,String command,long when,int modifiers){  super(source,id);  this.actionCommand=command;  this.when=when;  this.modifiers=modifiers;}  }
class C{  public static Composite createComposite(Composite parent,Font font,int style,int columns,int hspan,int fill,int marginwidth,int marginheight){  Composite g=new Composite(parent,style);  GridLayout layout=new GridLayout(columns,false);  layout.marginWidth=marginwidth;  layout.marginHeight=marginheight;  g.setLayout(layout);  g.setFont(font);  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  g.setLayoutData(gd);  return g;}  }
class C{  public static boolean isValueCode(char ch){  return ch == '@' || ch == ':' || ch == '%' || ch == '+' || ch == '#' || ch == '<' || ch == '>' || ch == '*' || ch == '/' || ch == '!';}  }
class C{  public void writeMessageNoTag(final MessageNano value) throws IOException {  writeRawVarint32(value.getCachedSize());  value.writeTo(this);}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS11.class,args);}  }
class C{  public void remove(String key){  if (key == null || key.isEmpty())   return;  if (super.containsKey(key))   super.remove(key); else   if (this.containsKey(".")) {    String[] keys=key.split("\\.",2);    if (super.get(keys[0]) instanceof ConfigSection) {      ConfigSection section=(ConfigSection)super.get(keys[0]);      section.remove(keys[1]);    }  }}  }
class C{  private void applyOnAllWithExactNumber(ExampleSet exampleSet,Attribute[] allAttributes,int exactNumberOfFeatures) throws OperatorException {  ExampleSet workingSet=(ExampleSet)exampleSet.clone();  this.featureNumber=exactNumberOfFeatures;  if (exactNumberOfFeatures == 1) {    for (int i=0; i < allAttributes.length; i++) {      workingSet.getAttributes().clearRegular();      workingSet.getAttributes().addRegular(allAttributes[i]);      this.iteration++;      this.featureNames=allAttributes[i].getName();      applyInnerOperators(workingSet);      getProgress().setCompleted(iteration);    }  } else   if (exactNumberOfFeatures == allAttributes.length) {    StringBuffer nameBuffer=new StringBuffer();    boolean first=true;    workingSet.getAttributes().clearRegular();    for (int i=0; i < allAttributes.length; i++) {      Attribute attribute=allAttributes[i];      workingSet.getAttributes().addRegular(attribute);      if (!first) {        nameBuffer.append(", ");      }      nameBuffer.append(attribute.getName());      first=false;    }    this.iteration++;    this.featureNames=nameBuffer.toString();    applyInnerOperators(workingSet);    getProgress().setCompleted(iteration);  } else {    CombinationGenerator combinationGenerator=new CombinationGenerator(allAttributes.length,exactNumberOfFeatures);    while (combinationGenerator.hasMore()) {      int[] indices=combinationGenerator.getNext();      StringBuffer nameBuffer=new StringBuffer();      boolean first=true;      workingSet.getAttributes().clearRegular();      for (int i=0; i < indices.length; i++) {        Attribute attribute=allAttributes[indices[i]];        workingSet.getAttributes().addRegular(attribute);        if (!first) {          nameBuffer.append(", ");        }        nameBuffer.append(attribute.getName());        first=false;      }      this.iteration++;      this.featureNames=nameBuffer.toString();      applyInnerOperators(workingSet);      getProgress().setCompleted(iteration);    }  }}  }
class C{  public static MOrder copyFrom(MOrder from,Timestamp dateDoc,int C_DocTypeTarget_ID,boolean isSOTrx,boolean counter,boolean copyASI,String trxName){  MOrder to=new MOrder(from.getCtx(),0,trxName);  to.set_TrxName(trxName);  PO.copyValues(from,to,from.getAD_Client_ID(),from.getAD_Org_ID());  to.set_ValueNoCheck("C_Order_ID",I_ZERO);  to.set_ValueNoCheck("DocumentNo",null);  to.setDocStatus(DOCSTATUS_Drafted);  to.setDocAction(DOCACTION_Complete);  to.setC_DocType_ID(0);  to.setC_DocTypeTarget_ID(C_DocTypeTarget_ID);  to.setIsSOTrx(isSOTrx);  to.setIsSelected(false);  to.setDateOrdered(dateDoc);  to.setDateAcct(dateDoc);  to.setDatePromised(dateDoc);  to.setDatePrinted(null);  to.setIsPrinted(false);  to.setIsApproved(false);  to.setIsCreditApproved(false);  to.setC_Payment_ID(0);  to.setC_CashLine_ID(0);  to.setGrandTotal(Env.ZERO);  to.setTotalLines(Env.ZERO);  to.setIsDelivered(false);  to.setIsInvoiced(false);  to.setIsSelfService(false);  to.setIsTransferred(false);  to.setPosted(false);  to.setProcessed(false);  if (counter)   to.setRef_Order_ID(from.getC_Order_ID()); else   to.setRef_Order_ID(0);  if (!to.save(trxName))   throw new IllegalStateException("Could not create Order");  if (counter)   from.setRef_Order_ID(to.getC_Order_ID());  if (to.copyLinesFrom(from,counter,copyASI) == 0)   throw new IllegalStateException("Could not create Order Lines");  to.setLink_Order_ID(0);  return to;}  }
class C{  private void createRelayedCandidate(Response response){  Attribute attribute=response.getAttribute(Attribute.MAPPED_ADDRESS);  if (attribute != null) {    TransportAddress relayedAddress=((MappedAddressAttribute)attribute).getAddress();    if (harvester.stunServer.getTransport() == Transport.TCP) {      relayedAddress=new TransportAddress(relayedAddress.getAddress(),harvester.stunServer.getPort(),Transport.TCP);    }    GoogleRelayedCandidate relayedCandidate=createRelayedCandidate(relayedAddress,getMappedAddress(response));    if (relayedCandidate != null) {      harvester.getStunStack().addSocket(relayedCandidate.getStunSocket(null));      addCandidate(relayedCandidate);    }  }}  }
class C{  public static String unescapeJava(String str){  if (str == null) {    return null;  }  try {    StringWriter writer=new StringWriter(str.length());    unescapeJava(writer,str);    return writer.toString();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){}  }
class C{  protected static void checkRangeFromTo(int from,int to,int theSize){  if (to == from - 1)   return;  if (from < 0 || from > to || to >= theSize)   throw new IndexOutOfBoundsException("from: " + from + ", to: "+ to+ ", size="+ theSize);}  }
class C{  public void reset(){  finished=false;}  }
class C{  private Response uploadFile(@FormDataParam("deviceDriver") InputStream fileInputStream,@FormDataParam("deviceDriver") FormDataContentDisposition contentDispositionHeader){  log.info("Upload of device driver file started, time: " + System.currentTimeMillis());  String filePath=UPLOAD_DEVICE_DRIVER + contentDispositionHeader.getFileName();  saveFile(fileInputStream,filePath);  log.info("Device driver file uploaded at " + filePath);  Response myhttpresponse=Response.status(Response.Status.OK).build();  return myhttpresponse;}  }
class C{  public void putTemplate(String name,byte[] templateSource,long lastModified){  templates.put(name,new ByteArrayTemplateSource(name,templateSource,lastModified));}  }
class C{  protected void brute_nearest(final int k,final CoverTreeNode query,Stack<d_node> zero_set,MyHeap upper_k,Stack<NeighborList> results) throws Exception {  if (query.num_children > 0) {    Stack<d_node> new_zero_set=new Stack<d_node>();    CoverTreeNode query_chi=query.children.element(0);    brute_nearest(k,query_chi,zero_set,upper_k,results);    MyHeap new_upper_k=new MyHeap(k);    for (int i=1; i < query.children.length; i++) {      query_chi=query.children.element(i);      setter(new_upper_k,upper_k.peek().distance + query_chi.parent_dist,k);      copy_zero_set(query_chi,new_upper_k,zero_set,new_zero_set);      brute_nearest(k,query_chi,new_zero_set,new_upper_k,results);    }  } else {    NeighborList temp=new NeighborList(k);    d_node ele;    for (int i=0; i < zero_set.length; i++) {      ele=zero_set.element(i);      if (ele.dist <= upper_k.peek().distance) {        temp.insertSorted(ele.dist,ele.n.p());      }    }    results.push(temp);  }}  }
class C{  @Override public void close() throws IOException {  super.close();}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public void addServer(Server server){  if (!servers.containsKey(server.getId())) {    servers.put(server.getId(),server);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.FEATURE_CALL__OWNER:    return getOwner();case ExpressionsPackage.FEATURE_CALL__FEATURE:  if (resolve)   return getFeature();return basicGetFeature();case ExpressionsPackage.FEATURE_CALL__OPERATION_CALL:return isOperationCall();case ExpressionsPackage.FEATURE_CALL__ARGS:return getArgs();case ExpressionsPackage.FEATURE_CALL__ARRAY_SELECTOR:return getArraySelector();case ExpressionsPackage.FEATURE_CALL__ARRAY_ACCESS:return isArrayAccess();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void testEmpty() throws Exception {  Map<String,Method> functions=Collections.emptyMap();  ParseException expected=expectThrows(ParseException.class,null);  assertEquals("Invalid expression 'sqrt(20)': Unrecognized function call (sqrt).",expected.getMessage());  assertEquals(expected.getErrorOffset(),0);}  }
class C{  public void alterSequence(SequenceDefinition sequenceDefinition) throws EclipseLinkException {  if (!sequenceDefinition.isAlterSupported(getSession())) {    return;  }  boolean usesBatchWriting=false;  if (getSession().getPlatform().usesBatchWriting()) {    usesBatchWriting=true;    getSession().getPlatform().setUsesBatchWriting(false);  }  try {    if (shouldWriteToDatabase()) {      sequenceDefinition.alterOnDatabase(getSession());    } else {      sequenceDefinition.alter(getSession(),createSchemaWriter);    }  }  finally {    if (usesBatchWriting) {      getSession().getPlatform().setUsesBatchWriting(true);    }  }}  }
class C{  @Override public boolean containsTag(String tagName){  return this.tags.containsKey(tagName.toLowerCase(Locale.ROOT));}  }
class C{  public Complex add(Complex c){  Complex ret=new Complex(real,imag);  ret.mutableAdd(c);  return ret;}  }
class C{  void action(final int d) throws IOException, UnterminatedRegExpLiteralException, UnterminatedCommentException, UnterminatedStringLiteralException {switch (d) {case 1:    out.write(theA);  if (theA == theB && (theA == '+' || theA == '-') && theY != theA) {    out.write(' ');  }case 2:theA=theB;if (theA == '\'' || theA == '"' || theA == '`') {for (; ; ) {  out.write(theA);  theA=get();  if (theA == theB) {    break;  }  if (theA <= '\n') {    throw new UnterminatedStringLiteralException();  }  if (theA == '\\') {    out.write(theA);    theA=get();  }}}case 3:theB=next();if (theB == '/' && (theA == '(' || theA == ',' || theA == '=' || theA == ':' || theA == '[' || theA == '!' || theA == '&' || theA == '|' || theA == '?' || theA == '+' || theA == '-' || theA == '~' || theA == '*' || theA == '/' || theA == '{' || theA == '\n')) {out.write(theA);if (theA == '/' || theA == '*') {out.write(' ');}out.write(theB);for (; ; ) {theA=get();if (theA == '[') {for (; ; ) {  out.write(theA);  theA=get();  if (theA == ']') {    break;  }  if (theA == '\\') {    out.write(theA);    theA=get();  }  if (theA <= '\n') {    throw new UnterminatedRegExpLiteralException();  }}} else if (theA == '/') {switch (peek()) {case '/':case '*':  throw new UnterminatedRegExpLiteralException();}break;} else if (theA == '\\') {out.write(theA);theA=get();} else if (theA <= '\n') {throw new UnterminatedRegExpLiteralException();}out.write(theA);}theB=next();}}}  }
class C{  public static String difference(String s1,String s2){  int at=differenceAt(s1,s2);  if (at == -1) {    return "";  }  return s2.substring(at);}  }
class C{  public boolean isValueLengthKnown(){  return (vlen >= 0);}  }
class C{  public DateTimeException(String message){  super(message);}  }
class C{  public boolean truncateToZxid(String zxid){  long lastValidZxid=getLastValidZxid();  long targetZxid=Long.parseLong(zxid,16);  if (targetZxid < lastValidZxid) {    String errstr=String.format("It is not allowed to truncate to the txn %s(hex) which is prior to the last valid txn %s(hex)! It would lose data!",Long.toHexString(targetZxid),Long.toHexString(lastValidZxid));    log.error(errstr);    System.out.println(errstr);    return false;  }  try {    dataDir=new File(dataPath,version + VERSION);    FileTxnLog truncLog=new FileTxnLog(dataDir);    truncLog.truncate(targetZxid);    truncLog.close();    System.out.println(String.format("Successfully truncated to zxid: %s(hex)",Long.toHexString(targetZxid)));  } catch (  IOException e) {    String errstr=String.format("Failed to truncated to zxid: %s(hex). Please check it manually.",Long.toHexString(targetZxid));    log.error(errstr);    System.out.println(errstr);    return false;  }  return true;}  }
class C{  public void fetchAlbumPhoto(final Activity context,final String album,final String artist){  if (!TextUtils.isEmpty(album)) {    mFetcher.removeFromCache(ImageFetcher.generateAlbumCacheKey(album,artist));    mFetcher.loadAlbumImage(artist,album,-1,mAlbumArt);  } else {    setDefault(context);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:38.553 -0500",hash_original_method="FEFE1B40777B5F58606593D185335D3A",hash_generated_method="8FFBB5AFF6C1B48BDA2E2D9101D20C7A") public void clear(){  mNum=0;}  }
class C{  public static Bitmap createReflectionImageWithOrigin(Bitmap bitmap){  final int reflectionGap=4;  int w=bitmap.getWidth();  int h=bitmap.getHeight();  Matrix matrix=new Matrix();  matrix.preScale(1,-1);  Bitmap reflectionImage=Bitmap.createBitmap(bitmap,0,h / 2,w,h / 2,matrix,false);  Bitmap bitmapWithReflection=Bitmap.createBitmap(w,(h + h / 2),Config.ARGB_8888);  Canvas canvas=new Canvas(bitmapWithReflection);  canvas.drawBitmap(bitmap,0,0,null);  Paint deafalutPaint=new Paint();  canvas.drawRect(0,h,w,h + reflectionGap,deafalutPaint);  canvas.drawBitmap(reflectionImage,0,h + reflectionGap,null);  Paint paint=new Paint();  LinearGradient shader=new LinearGradient(0,bitmap.getHeight(),0,bitmapWithReflection.getHeight() + reflectionGap,0x70ffffff,0x00ffffff,TileMode.CLAMP);  paint.setShader(shader);  paint.setXfermode(new PorterDuffXfermode(Mode.DST_IN));  canvas.drawRect(0,h,w,bitmapWithReflection.getHeight() + reflectionGap,paint);  return bitmapWithReflection;}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity is about to be \"paused\")");}  }
class C{  public RemoteCountryServiceImpl(final GenericDTOService<CountryDTO> countryDTOGenericDTOService){  super(countryDTOGenericDTOService);}  }
class C{  public TransactionWrapper(Transaction transaction,ECDSASignature signature){  this.transaction=transaction;  this.signature=signature;}  }
class C{  public void testClose(){  try {    this.crf.channel.close();  } catch (  IOException ignore) {  }  try {    this.crf.raf.close();  } catch (  IOException ignore) {  }}  }
class C{  public final AssertSubscriber<T> configureValuesTimeout(Duration timeout){  this.valuesTimeout=timeout;  return this;}  }
class C{  public SVGOMTRefElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public void flush(){  if (this.size > 0) {    xList.setSize(this.size);    yList.setSize(this.size);    zList.setSize(this.size);    this.target.addAllOf(xList,yList,zList);    this.size=0;  }}  }
class C{  public boolean wasCFGModified(){  return cfgModified;}  }
class C{  public static void checkForExportRuleToAdd(FileShare sourceFileShare,FileShare targetFileShare,HashMap<String,ExportRule> sourceExportRuleMap,HashMap<String,ExportRule> targetExportRuleMap,List<ExportRule> exportRulesToAdd){  for (  String secFlavour : sourceExportRuleMap.keySet()) {    if (!targetExportRuleMap.containsKey(secFlavour)) {      ExportRule sourceExportRule=sourceExportRuleMap.get(secFlavour);      ExportRule exportRule=new ExportRule();      exportRule.setFsID(targetFileShare.getId());      if (sourceExportRule.getExportPath().equals(sourceFileShare.getPath())) {        exportRule.setExportPath(targetFileShare.getPath());      } else {        ArrayList<String> subdirName=new ArrayList<String>();        subdirName.add(sourceExportRule.getExportPath().split(sourceFileShare.getPath())[1]);        exportRule.setExportPath(targetFileShare.getPath() + subdirName.get(0));      }      exportRule.setAnon(sourceExportRule.getAnon());      exportRule.setReadOnlyHosts(sourceExportRule.getReadOnlyHosts());      exportRule.setRootHosts(sourceExportRule.getRootHosts());      exportRule.setReadWriteHosts(sourceExportRule.getReadWriteHosts());      exportRule.setSecFlavor(sourceExportRule.getSecFlavor());      exportRulesToAdd.add(exportRule);    }  }}  }
class C{  private void handleNotificationNotif(byte[] value){  if (value.length != 1) {    LOG.error("Notifications should be 1 byte long.");    LOG.info("RECEIVED DATA WITH LENGTH: " + value.length);    for (    byte b : value) {      LOG.warn("DATA: " + String.format("0x%2x",b));    }    return;  }switch (value[0]) {case MiBandService.NOTIFY_AUTHENTICATION_FAILED:    getDevice().setState(State.AUTHENTICATION_REQUIRED);  getDevice().sendDeviceUpdateIntent(getContext());GB.toast(getContext(),"Band needs pairing",Toast.LENGTH_LONG,GB.ERROR);break;case MiBandService.NOTIFY_AUTHENTICATION_SUCCESS:case MiBandService.NOTIFY_RESET_AUTHENTICATION_SUCCESS:case MiBandService.NOTIFY_STATUS_MOTOR_AUTH_SUCCESS:LOG.info("Band successfully authenticated");doInitialize();break;case MiBandService.NOTIFY_STATUS_MOTOR_AUTH:LOG.info("Band needs authentication (MOTOR_AUTH)");getDevice().setState(State.AUTHENTICATING);getDevice().sendDeviceUpdateIntent(getContext());break;case MiBandService.NOTIFY_SET_LATENCY_SUCCESS:LOG.info("Setting latency succeeded.");break;default :for (byte b : value) {LOG.warn("DATA: " + String.format("0x%2x",b));}}}  }
class C{  public Bitmap drawableToBitmap(Drawable drawable){  if (drawable == null)   return null; else   if (drawable instanceof BitmapDrawable) {    Log.i(TAG,"Bitmap drawable!");    return ((BitmapDrawable)drawable).getBitmap();  }  int intrinsicWidth=drawable.getIntrinsicWidth();  int intrinsicHeight=drawable.getIntrinsicHeight();  if (!(intrinsicWidth > 0 && intrinsicHeight > 0))   return null;  try {    Bitmap bitmap=Bitmap.createBitmap(intrinsicWidth,intrinsicHeight,Bitmap.Config.ARGB_8888);    Canvas canvas=new Canvas(bitmap);    drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());    drawable.draw(canvas);    return bitmap;  } catch (  OutOfMemoryError e) {    Log.e(TAG,"Encountered OutOfMemoryError while generating bitmap!");    return null;  }}  }
class C{  public TemplateNameExtractor(SimpleWikiConfiguration config){  this.config=config;}  }
class C{  @Override public void mouseEntered(MouseEvent e){  events.clear();}  }
class C{  public T caseDepend_(Depend_ object){  return null;}  }
class C{  private static RetryPolicy retryOnException(Request<?> request,HttpException exception) throws HttpException {  RetryPolicy retryPolicy=request.getRetryPolicy();  try {    retryPolicy.retry(exception);  } catch (  HttpException e) {    throw e;  }  request.getRequestQueue().getDelivery().postRequestRetry(request,retryPolicy.getCurrentRetryCount(),exception);  return retryPolicy;}  }
class C{  public SystemProperty(String key,String value){  this.key=key;  this.value=value;}  }
class C{  public XCalElement append(ICalDataType dataType){  return append(dataType.getName().toLowerCase());}  }
class C{  public ContainerDatacenter(String name,ContainerDatacenterCharacteristics characteristics,ContainerVmAllocationPolicy vmAllocationPolicy,ContainerAllocationPolicy containerAllocationPolicy,List<Storage> storageList,double schedulingInterval,String experimentName,String logAddress) throws Exception {  super(name);  setCharacteristics(characteristics);  setVmAllocationPolicy(vmAllocationPolicy);  setContainerAllocationPolicy(containerAllocationPolicy);  setLastProcessTime(0.0);  setStorageList(storageList);  setContainerVmList(new ArrayList<ContainerVm>());  setContainerList(new ArrayList<Container>());  setSchedulingInterval(schedulingInterval);  setExperimentName(experimentName);  setLogAddress(logAddress);  for (  ContainerHost host : getCharacteristics().getHostList()) {    host.setDatacenter(this);  }  if (getCharacteristics().getNumberOfPes() == 0) {    throw new Exception(super.getName() + " : Error - this entity has no PEs. Therefore, can't process any Cloudlets.");  }  getCharacteristics().setId(super.getId());}  }
class C{  private void handleRequest(long requestId,Object request,HandlerHolder handler){  @SuppressWarnings("unchecked") CompletableFuture<Object> responseFuture=handler.handler.handle(request);  responseFuture.whenComplete(null);}  }
class C{  private void step4(DBIDRef id,WritableDBIDDataStore pi,WritableDoubleDataStore lambda,DBIDs processedIDs){  DBIDVar p_i=DBIDUtil.newVar();  for (DBIDIter it=processedIDs.iter(); it.valid(); it.advance()) {    double l_i=lambda.doubleValue(it);    pi.assignVar(it,p_i);    double lp_i=lambda.doubleValue(p_i);    if (l_i >= lp_i) {      pi.put(it,id);    }  }}  }
class C{  public static String encode(byte[] input){  if (input.length == 0) {    return "";  }  input=copyOfRange(input,0,input.length);  int zeroCount=0;  while (zeroCount < input.length && input[zeroCount] == 0) {    ++zeroCount;  }  byte[] temp=new byte[input.length * 2];  int j=temp.length;  int startAt=zeroCount;  while (startAt < input.length) {    byte mod=divmod58(input,startAt);    if (input[startAt] == 0) {      ++startAt;    }    temp[--j]=(byte)ALPHABET[mod];  }  while (j < temp.length && temp[j] == ALPHABET[0]) {    ++j;  }  while (--zeroCount >= 0) {    temp[--j]=(byte)ALPHABET[0];  }  byte[] output=copyOfRange(temp,j,temp.length);  try {    return new String(output,"US-ASCII");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static int gallopLeft(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (key.compareTo(a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:17.083 -0400",hash_original_method="13CBEB5F84026BAB57A09069F12B4679",hash_generated_method="CBB08CBAF3A6BF1693C490D95205D74E") public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ECFieldFp) {    return (this.p.equals(((ECFieldFp)obj).p));  }  return false;}  }
class C{  public boolean init(){  log.config("");  boolean trl=!Env.isBaseLanguage(m_ctx,"AD_Process");  String sql="SELECT Name, Description, Help, IsReport, ShowHelp " + "FROM AD_Process " + "WHERE AD_Process_ID=?";  if (trl)   sql="SELECT t.Name, t.Description, t.Help, p.IsReport, p.ShowHelp " + "FROM AD_Process p, AD_Process_Trl t " + "WHERE p.AD_Process_ID=t.AD_Process_ID"+ " AND p.AD_Process_ID=? AND t.AD_Language=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_AD_Process_ID);    if (trl)     pstmt.setString(2,Env.getAD_Language(m_ctx));    rs=pstmt.executeQuery();    if (rs.next()) {      m_Name=rs.getString(1);      m_ShowHelp=rs.getString(5);      m_messageText.append("<b>");      String s=rs.getString(2);      if (rs.wasNull())       m_messageText.append(Msg.getMsg(m_ctx,"StartProcess?")); else       m_messageText.append(s);      m_messageText.append("</b>");      s=rs.getString(3);      if (!rs.wasNull())       m_messageText.append("<p>").append(s).append("</p>");    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (m_Name == null)   return false;  this.setTitle(m_Name);  message.setMargin(new Insets(10,10,10,10));  message.setText(m_messageText.toString());  m_pi=new ProcessInfo(m_Name,m_AD_Process_ID,m_tableId,m_recordId);  m_pi.setAD_User_ID(Env.getAD_User_ID(Env.getCtx()));  m_pi.setAD_Client_ID(Env.getAD_Client_ID(Env.getCtx()));  parameterPanel=new ProcessParameterPanel(m_WindowNo,m_pi);  centerPanel.removeAll();  if (parameterPanel.init()) {    centerPanel.add(separator,BorderLayout.NORTH);    centerPanel.add(parameterPanel,BorderLayout.CENTER);  } else {    if (m_ShowHelp != null && m_ShowHelp.equals("N")) {      m_autoStart=true;    }    if (m_autoStart)     bOK.doClick();  }  if (m_ShowHelp != null && m_ShowHelp.equals("S"))   bOK.doClick();  dialog.revalidate();  return true;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  @Override public void afterTextChanged(Editable s){  if (s.length() > 0) {    if (!mConfirmingPassCode) {      mPassCodeDigits[mIndex]=mPassCodeEditTexts[mIndex].getText().toString();    }    mPassCodeEditTexts[next()].requestFocus();    if (mLastOne) {      processFullPassCode();    }  } else {    Log_OC.d(TAG,"Text box " + mIndex + " was cleaned");  }}  }
class C{  public void incNumUpdates(){  this._stats.incLong(_numUpdatesId,1);}  }
class C{  @Override public void free(long idleStartTime){  if (_is == null) {    IllegalStateException exn=new IllegalStateException(L.l("{0} unexpected free of closed stream",this));    exn.fillInStackTrace();    log.log(Level.FINE,exn.toString(),exn);    return;  }  long requestStartTime=_requestStartTime;  _requestStartTime=0;  if (requestStartTime > 0)   _requestTimeProbe.end(requestStartTime);  if (idleStartTime <= 0) {    idleStartTime=_is.getReadTime();    if (idleStartTime <= 0) {      idleStartTime=CurrentTime.currentTime();    }  }  _idleStartTime=idleStartTime;  _idleProbe.start();  _isIdle=true;  _pool.free(this);}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException("The remove  operation is not supported by this Iterator.");}  }
class C{  public void dropActionChanged(DropTargetDragEvent dtde){  Debug.message("dndlistener","dropActionChanged(target)");  int action=dtde.getDropAction();  Debug.message("dndlistener","action=" + action);  dtde.acceptDrag(action);}  }
class C{  public int[] findIndices(){  int len=0;  for (int i=0; i < length; i++) {    if (get(i) != 0.0) {      len++;    }  }  int[] indices=new int[len];  int c=0;  for (int i=0; i < length; i++) {    if (get(i) != 0.0) {      indices[c++]=i;    }  }  return indices;}  }
class C{  @SuppressWarnings("WeakerAccess") public SwingTerminalFrame(String title,TerminalEmulatorAutoCloseTrigger... autoCloseTriggers) throws HeadlessException {  this(title,new SwingTerminal(),autoCloseTriggers);}  }
class C{  public DtlsException(String message,InetSocketAddress peer){  super(message);  this.peer=peer;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Box(){  this.setUpGeometryCache();}  }
class C{  private void addViewInChildContainer(boolean derection){  ImageView imageView=new ImageView(mContext);  LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);  imageView.setLayoutParams(lp);  imageView.setImageBitmap(showContent);  Log.e("addViewInChildContainer",(Runtime.getRuntime().totalMemory() / 1024 / 1024) + "MB" + getWidth());  if (resetPositionCount == 0) {    ImageView imageView2=new ImageView(mContext);    imageView2.setLayoutParams(lp);    imageView2.setImageBitmap(showContent);    childContainer.addView(imageView);    childContainer.addView(imageView2);  } else {    if (derection) {      childContainer.addView(imageView);    } else {      childContainer.addView(imageView,0);      scrollTo(showContent.getWidth(),0);    }    autoScrollPosition=autoScrollPosition + showContent.getWidth();  }}  }
class C{  public boolean isSetNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NODEID_ISSET_ID);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean isIMMdate(final Date date,final boolean mainCycle){  if (date.weekday() != Weekday.Wednesday) {    return false;  }  final int d=date.dayOfMonth();  if (d < 15 || d > 21) {    return false;  }  if (!mainCycle) {    return true;  }  final Month m=date.month();  return (m == Month.March || m == Month.June || m == Month.September || m == Month.December);}  }
class C{  public static Map<String,String> makeFeatureIdByTypeMap(Map<String,Object> parameters){  Map<String,String> featureIdByType=FastMap.newInstance();  if (parameters == null)   return featureIdByType;  for (  Map.Entry<String,Object> entry : parameters.entrySet()) {    String parameterName=entry.getKey();    if (parameterName.startsWith("pft_")) {      String productFeatureTypeId=parameterName.substring(4);      String productFeatureId=(String)entry.getValue();      if (UtilValidate.isNotEmpty(productFeatureId)) {        featureIdByType.put(productFeatureTypeId,productFeatureId);      }    }  }  return featureIdByType;}  }
class C{  public final void collidePolygons(Manifold manifold,final PolygonShape polyA,final Transform xfA,final PolygonShape polyB,final Transform xfB){  manifold.pointCount=0;  float totalRadius=polyA.m_radius + polyB.m_radius;  findMaxSeparation(results1,polyA,xfA,polyB,xfB);  if (results1.separation > totalRadius) {    return;  }  findMaxSeparation(results2,polyB,xfB,polyA,xfA);  if (results2.separation > totalRadius) {    return;  }  final PolygonShape poly1;  final PolygonShape poly2;  Transform xf1, xf2;  int edge1;  boolean flip;  final float k_tol=0.1f * Settings.linearSlop;  if (results2.separation > results1.separation + k_tol) {    poly1=polyB;    poly2=polyA;    xf1=xfB;    xf2=xfA;    edge1=results2.edgeIndex;    manifold.type=ManifoldType.FACE_B;    flip=true;  } else {    poly1=polyA;    poly2=polyB;    xf1=xfA;    xf2=xfB;    edge1=results1.edgeIndex;    manifold.type=ManifoldType.FACE_A;    flip=false;  }  final Rot xf1q=xf1.q;  findIncidentEdge(incidentEdge,poly1,xf1,edge1,poly2,xf2);  int count1=poly1.m_count;  final Vec2[] vertices1=poly1.m_vertices;  final int iv1=edge1;  final int iv2=edge1 + 1 < count1 ? edge1 + 1 : 0;  v11.set(vertices1[iv1]);  v12.set(vertices1[iv2]);  localTangent.x=v12.x - v11.x;  localTangent.y=v12.y - v11.y;  localTangent.normalize();  localNormal.x=1f * localTangent.y;  localNormal.y=-1f * localTangent.x;  planePoint.x=(v11.x + v12.x) * .5f;  planePoint.y=(v11.y + v12.y) * .5f;  tangent.x=xf1q.c * localTangent.x - xf1q.s * localTangent.y;  tangent.y=xf1q.s * localTangent.x + xf1q.c * localTangent.y;  final float normalx=1f * tangent.y;  final float normaly=-1f * tangent.x;  Transform.mulToOut(xf1,v11,v11);  Transform.mulToOut(xf1,v12,v12);  float frontOffset=normalx * v11.x + normaly * v11.y;  float sideOffset1=-(tangent.x * v11.x + tangent.y * v11.y) + totalRadius;  float sideOffset2=tangent.x * v12.x + tangent.y * v12.y + totalRadius;  int np;  tangent.negateLocal();  np=clipSegmentToLine(clipPoints1,incidentEdge,tangent,sideOffset1,iv1);  tangent.negateLocal();  if (np < 2) {    return;  }  np=clipSegmentToLine(clipPoints2,clipPoints1,tangent,sideOffset2,iv2);  if (np < 2) {    return;  }  manifold.localNormal.set(localNormal);  manifold.localPoint.set(planePoint);  int pointCount=0;  for (int i=0; i < Settings.maxManifoldPoints; ++i) {    float separation=normalx * clipPoints2[i].v.x + normaly * clipPoints2[i].v.y - frontOffset;    if (separation <= totalRadius) {      ManifoldPoint cp=manifold.points[pointCount];      Vec2 out=cp.localPoint;      final float px=clipPoints2[i].v.x - xf2.p.x;      final float py=clipPoints2[i].v.y - xf2.p.y;      out.x=(xf2.q.c * px + xf2.q.s * py);      out.y=(-xf2.q.s * px + xf2.q.c * py);      cp.id.set(clipPoints2[i].id);      if (flip) {        cp.id.flip();      }      ++pointCount;    }  }  manifold.pointCount=pointCount;}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    int ch=readChar();    if (lastWasCR && ch == '\n') {      ch=readChar();    }    lastWasCR=false;    return ch;  }}  }
class C{  public Set<Map.Entry<String,JsonElement>> entrySet(){  return members.entrySet();}  }
class C{  public Relationship(final RelationshipType relationshipType){  this.relationshipType=relationshipType;  this.roundCreated=getData().getSequence().getRound();}  }
class C{  @SuppressLint("NewApi") public static void writeArrayMapInternal(Parcel parcel,ArrayMap<String,Object> val){  if (val == null) {    parcel.writeInt(-1);    return;  }  final int N=val.size();  parcel.writeInt(N);  for (int i=0; i < N; i++) {    parcel.writeString(val.keyAt(i));    parcel.writeValue(val.valueAt(i));  }}  }
class C{  public void clearCoRoutine(){  clearCoRoutine(true);}  }
class C{  public UWidget widget(){  UWidget uw=new UWidget();  uw.tb(this);  return uw;}  }
class C{  public void addSubtask(Task subtask){  ParamChecks.nullNotPermitted(subtask,"subtask");  this.subtasks.add(subtask);}  }
class C{  public static void fixCC(STVWidget[] swz,java.util.Map idMap){  java.util.Set conerrs=new java.util.HashSet();  for (int i=0; i < swz.length; i++) {    swz[i].index=i;  }  for (int j=0; j < swz.length; j++) {    STVWidget stvWidget=swz[j];    boolean conerr=false;    java.util.ArrayList conv=new java.util.ArrayList();    for (int i=0; i < stvWidget.rawContents.length; i++) {      if (stvWidget.rawContents[i] >= 0) {        STVWidget stw=(STVWidget)idMap.get(new Integer(stvWidget.rawContents[i]));        if (stw != null) {          conv.add(stw);        } else {          conerr=true;          conerrs.add(new Integer(stvWidget.rawContents[i]));        }      }    }    stvWidget.contentz=new STVWidget[conv.size()];    for (int k=0; k < stvWidget.contentz.length; k++) {      stvWidget.contentz[k]=(STVWidget)conv.get(k);    }    conv.clear();    for (int i=0; i < stvWidget.rawContainers.length; i++) {      if (stvWidget.rawContainers[i] >= 0) {        STVWidget stw=(STVWidget)idMap.get(new Integer(stvWidget.rawContainers[i]));        if (stw != null) {          conv.add(stw);        } else {          conerr=true;          conerrs.add(new Integer(stvWidget.rawContainers[i]));        }      }    }    stvWidget.containerz=new STVWidget[conv.size()];    for (int k=0; k < stvWidget.containerz.length; k++) {      stvWidget.containerz[k]=(STVWidget)conv.get(k);    }    if (conerr) {      String message="unmapped rawCon element in " + stvWidget;      if (sage.Sage.DBG)       System.out.println("Modules: tv.sage.ws.STVWidget.mapCC: " + message);    }  }  if (!conerrs.isEmpty()) {    if (sage.Sage.DBG)     System.out.println("Modules: tv.sage.ws.STVWidget.mapCC: conerrs = " + conerrs);  }}  }
class C{  public void addResult(double pred[],Instance real){  predictions.add(pred);  actuals.add(MLUtils.toIntArray(real,pred.length));}  }
class C{  public static TypeSubstitutionAction instantiateEditTypeSubstitution(final JFrame owner,final TypeManager typeManager,final BaseType stackFrame,final INaviOperandTreeNode selectedNode){  return new TypeSubstitutionAction(owner,"Edit type substitution",typeManager,stackFrame,selectedNode);}  }
class C{  public LimitIteration(Iteration<? extends E,X> iter,long limit){  super(iter);  assert iter != null;  assert limit >= 0;  this.limit=limit;  this.returnCount=0;}  }
class C{  private static void parse(String xml,ContentHandler contentHandler) throws SAXException {  try {    XMLReader reader=new ExpatReader();    reader.setContentHandler(contentHandler);    reader.parse(new InputSource(new StringReader(xml)));  } catch (  IOException e) {    throw new AssertionError(e);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.ARRAY_LIKE__DECLARED_ELEMENT_TYPE:    setDeclaredElementType((TypeRef)null);  return;}super.eUnset(featureID);}  }
class C{  public static boolean isSubset(Set<? extends Statement> model1,Set<? extends Statement> model2){  if (model1.size() > model2.size()) {    return false;  }  return isSubsetInternal(model1,model2);}  }
class C{  private boolean isLookingAtObject(){  float[] initVec={0,0,0,1.0f};  float[] objPositionVec=new float[4];  Matrix.multiplyMM(modelView,0,headView,0,modelCube,0);  Matrix.multiplyMV(objPositionVec,0,modelView,0,initVec,0);  float pitch=(float)Math.atan2(objPositionVec[1],-objPositionVec[2]);  float yaw=(float)Math.atan2(objPositionVec[0],-objPositionVec[2]);  return Math.abs(pitch) < PITCH_LIMIT && Math.abs(yaw) < YAW_LIMIT;}  }
class C{  @Override public String toString(){  return (getClass().getSimpleName() + "[" + name()+ "."+ getClusterId()+ "]");}  }
class C{  public static void printError(int errorCode,String[] cause,Throwable throwable){  printError(errorCode,cause);  if (TLCGlobals.debug) {    DebugPrinter.print("printing stacktrace in printError(int, Throwable, boolean)");    throwable.printStackTrace(ToolIO.out);  }}  }
class C{  public static Typeface freedom(Context context){  return FontSourceProcessor.process(R.raw.freedom,context);}  }
class C{  private static final String correctModuleNameCapitalization(String nameToFind,ParseResult result){  try {    IResource[] resources=result.getParsedResource().getParent().members();    for (int i=0; i < resources.length; i++) {      if (resources[i].getType() == IResource.FILE) {        String resourceName=resources[i].getName().substring(0,resources[i].getName().length() - 4);        if ((nameToFind.toLowerCase()).equals(resourceName.toLowerCase())) {          nameToFind=resourceName;          break;        }      }    }  } catch (  CoreException e) {    Activator.getDefault().logError("Error finding modules",e);  }  return nameToFind;}  }
class C{  public StringBand(String s){  this();  array[0]=s;  index=1;  length=s.length();}  }
class C{  @Override protected JsonGenerator _createJsonGenerator(Writer out,IOContext ctxt) throws IOException {  if (_cfgDelegateToTextual) {    return super._createJsonGenerator(out,ctxt);  }  throw new UnsupportedOperationException("Can not create generator for non-byte-based target");}  }
class C{  public PendingInstallShortcutInfo(LauncherActivityInfoCompat info,Context context){  this.data=null;  mContext=context;  activityInfo=info;  user=info.getUser();  launchIntent=AppInfo.makeLaunchIntent(context,info,user);  label=info.getLabel().toString();}  }
class C{  private static void printMessage(String[] msg,boolean addNewline){  for (  String s : msg) {    if (addNewline) {      System.out.println(s);    } else {      System.out.print(s + " ");    }  }}  }
class C{  private static byte[] readBytes(InputStream source,int length) throws IOException {  byte[] result=new byte[length];  for (int i=0; i < length; i++) {    int bytik=source.read();    if (bytik == -1) {      return null;    }    result[i]=(byte)bytik;  }  return result;}  }
class C{  protected static boolean playerOwnsHouse(final Player player){  return (getPlayersHouse(player) != null);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Test public void testNodeProcessing() throws Exception {  KeyValPairToHashMap oper=new KeyValPairToHashMap();  CountTestSink mapSink=new CountTestSink();  oper.map.setSink(mapSink);  oper.beginWindow(0);  KeyValPair<String,String> input=new KeyValPair<String,String>("a","1");  int numtuples=1000;  for (int i=0; i < numtuples; i++) {    oper.keyval.process(input);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",numtuples,mapSink.count);}  }
class C{  private String listToString(List<String> stringList){  StringBuilder concat=new StringBuilder();  for (  String str : stringList) {    concat.append(str);    concat.append(System.getProperty("line.separator"));  }  return concat.toString();}  }
class C{  @Override public int print(Graphics g,PageFormat pageFormat,int pageIndex){  if (pageIndex > 0) {    return (NO_SUCH_PAGE);  } else {    Graphics2D g2d=(Graphics2D)g;    g2d.translate(pageFormat.getImageableX(),pageFormat.getImageableY());    double fHeight=pageFormat.getImageableHeight();    double fWidth=pageFormat.getImageableWidth();    int xMax=1;    int yMax=1;    for (int iNode=0; iNode < m_BayesNet.getNrOfNodes(); iNode++) {      if (xMax < m_BayesNet.getPositionX(iNode)) {        xMax=m_BayesNet.getPositionX(iNode);      }      if (yMax < m_BayesNet.getPositionY(iNode)) {        yMax=m_BayesNet.getPositionY(iNode);      }    }    double fCurrentScale=m_fScale;    xMax+=m_nPaddedNodeWidth + 100;    if (fWidth / xMax < fHeight / yMax) {      m_fScale=fWidth / xMax;    } else {      m_fScale=fHeight / yMax;    }    paint(g2d);    m_fScale=fCurrentScale;    return (PAGE_EXISTS);  }}  }
class C{  public void addToCourseOfferings(CourseOffering co){  this.courseOfferings.add(co);}  }
class C{  ClassOrInterfaceImpl(String name){  this.name=requireNonNull(name);  this.javadoc=null;  this.annotations=new ArrayList<>();  this.generics=new ArrayList<>();  this.interfaces=new ArrayList<>();  this.fields=new ArrayList<>();  this.methods=new ArrayList<>();  this.initalizers=new ArrayList<>();  this.classes=new ArrayList<>();  this.modifiers=EnumSet.noneOf(Modifier.class);}  }
class C{  public void testTextAreas1(){  final JPanel panel=new JPanel(new GridBagLayout());  final JLabel label1=new JLabel();  label1.setPreferredSize(new Dimension(15,20));  final JLabel label2=new JLabel();  label2.setPreferredSize(new Dimension(15,20));  final JTextArea textArea=new JTextArea();  textArea.setLineWrap(true);  GridBagConverter converter=new GridBagConverter();  converter.addComponent(label1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(label2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(textArea,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0));  applyConversionResults(panel,converter);  assertEquals(100,textArea.getPreferredSize().width);  final Dimension initialPreferredSize=panel.getPreferredSize();  assertEquals(new Dimension(100,20 + textArea.getPreferredSize().height),initialPreferredSize);  panel.setSize(initialPreferredSize);  panel.invalidate();  panel.doLayout();  assertEquals(initialPreferredSize,panel.getPreferredSize());}  }
class C{  public void toggleExpanded(){  SimpleBooleanProperty expanded=expandedProperty();  expanded.setValue(!expanded.getValue());}  }
class C{  public LeftSegmentEdgeAccessor(MultiSegmentReaderAccessibleInfo<T> readerAccessibleInfo,Int2ObjectMap<ReusableNodeIntIterator> segmentNodeIntIteratorMap,Int2ObjectMap<ReusableInternalIdToLongIterator> segmentInternalIdToLongIteratorMap){  super(readerAccessibleInfo);  this.segmentInternalIdToLongIteratorMap=segmentInternalIdToLongIteratorMap;  this.segmentNodeIntIteratorMap=segmentNodeIntIteratorMap;}  }
class C{  public boolean isSetId(){  return EncodingUtils.testBit(__isset_bitfield,__ID_ISSET_ID);}  }
class C{  public void addChild(TreeNode node){  if (leftChild == null) {    leftChild=node;  } else {    TreeNode siblingNode=leftChild;    while (siblingNode.rightSibling != null) {      siblingNode=siblingNode.rightSibling;    }    siblingNode.rightSibling=node;  }  node.parent=this;}  }
class C{  public synchronized void checkAccess(LicenseCheckerCallback callback){  if (mPolicy.allowAccess()) {    Log.i(TAG,"Using cached license response");    callback.allow(Policy.LICENSED);  } else {    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);    if (mService == null) {      Log.i(TAG,"Binding to licensing service.");      try {        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode("Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U="))).setPackage("com.android.vending"),this,Context.BIND_AUTO_CREATE);        if (bindResult) {          mPendingChecks.offer(validator);        } else {          Log.e(TAG,"Could not bind to service.");          handleServiceConnectionError(validator);        }      } catch (      SecurityException e) {        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);      }catch (      Base64DecoderException e) {        e.printStackTrace();      }    } else {      mPendingChecks.offer(validator);      runChecks();    }  }}  }
class C{  public void execute(final String source){  initializeLivingDocConstants();  if (outputFile == null) {    specificationRunner.getReportGenerator().adjustReportFilesExtensions(true);  }  final String destination=determineDestination(source);  specificationRunner.run(source,destination);}  }
class C{  public void testJob02(){  System.out.println("testJob02");}  }
class C{  public NetworkLite(String label){  _label=label;}  }
class C{  @Override protected void optimize(){  int i;  int j;  double[] my_primal=primal;  qp.b[0]=0;  for (i=0; i < working_set_size; i++) {    qp.b[0]+=alphas[working_set[i]];  }  ;  double new_target=0;  double old_target=0;  double target_tmp;  for (i=0; i < working_set_size; i++) {    target_tmp=my_primal[i] * qp.H[i * working_set_size + i] / 2;    for (j=0; j < i; j++) {      target_tmp+=my_primal[j] * qp.H[j * working_set_size + i];    }    ;    target_tmp+=qp.c[i];    old_target+=target_tmp * my_primal[i];  }  ;  double new_constraint_sum=0;  double my_is_zero=is_zero;  int sv_count=working_set_size;  boolean KKTerror=true;  boolean convError=false;  qp.max_allowed_error=convergence_epsilon;  qp.x=primal;  qp.solve();  primal=qp.x;  lambda_WS=qp.lambda_eq;  my_primal=primal;  int it=3;  double lambda_lo;  while (KKTerror && (it > 0)) {    KKTerror=false;    it--;    for (i=0; i < working_set_size; i++) {      if (my_primal[i] < is_zero) {        lambda_lo=epsilon_neg + epsilon_pos - qp.c[i];        for (j=0; j < working_set_size; j++) {          lambda_lo-=my_primal[j] * qp.H[i * working_set_size + j];        }        ;        if (qp.A[i] > 0) {          lambda_lo-=lambda_WS;        } else {          lambda_lo+=lambda_WS;        }        ;        if (lambda_lo < -convergence_epsilon) {          KKTerror=true;          qp.A[i]=-qp.A[i];          which_alpha[i]=!which_alpha[i];          my_primal[i]=-my_primal[i];          qp.c[i]=epsilon_neg + epsilon_pos - qp.c[i];          if (qp.A[i] > 0) {            qp.u[i]=cNeg[working_set[i]];          } else {            qp.u[i]=cPos[working_set[i]];          }          ;          for (j=0; j < working_set_size; j++) {            qp.H[i * working_set_size + j]=-qp.H[i * working_set_size + j];            qp.H[j * working_set_size + i]=-qp.H[j * working_set_size + i];          }          ;          if (quadraticLossNeg) {            if (which_alpha[i]) {              (qp.H)[i * (working_set_size + 1)]+=1 / cNeg[working_set[i]];              (qp.u)[i]=Double.MAX_VALUE;            } else {              (qp.H)[i * (working_set_size + 1)]-=1 / cNeg[working_set[i]];            }            ;          }          ;          if (quadraticLossPos) {            if (!which_alpha[i]) {              (qp.H)[i * (working_set_size + 1)]+=1 / cPos[working_set[i]];              (qp.u)[i]=Double.MAX_VALUE;            } else {              (qp.H)[i * (working_set_size + 1)]-=1 / cPos[working_set[i]];            }            ;          }          ;        }        ;      }      ;    }    ;    qp.x=my_primal;    qp.solve();    my_primal=qp.x;    lambda_WS=qp.lambda_eq;  }  ;  KKTerror=true;  while (KKTerror) {    sv_count=working_set_size;    new_constraint_sum=qp.b[0];    for (i=0; i < working_set_size; i++) {      if (my_primal[i] <= my_is_zero) {        my_primal[i]=qp.l[i];        sv_count--;      } else       if (qp.u[i] - my_primal[i] <= my_is_zero) {        my_primal[i]=qp.u[i];        sv_count--;      }      ;      new_constraint_sum-=qp.A[i] * my_primal[i];    }    ;    if (sv_count > 0) {      new_constraint_sum/=sv_count;      logln(5,"adjusting " + sv_count + " alphas by "+ new_constraint_sum);      for (i=0; i < working_set_size; i++) {        if ((my_primal[i] > qp.l[i]) && (my_primal[i] < qp.u[i])) {          my_primal[i]+=qp.A[i] * new_constraint_sum;        }        ;      }      ;    } else     if (Math.abs(new_constraint_sum) > working_set_size * is_zero) {      logln(5,"WARNING: No SVs, constraint_sum = " + new_constraint_sum);      old_target=-Double.MIN_VALUE;      convError=true;    }    ;    new_target=0;    for (i=0; i < working_set_size; i++) {      target_tmp=my_primal[i] * qp.H[i * working_set_size + i] / 2.0;      for (j=0; j < i; j++) {        target_tmp+=my_primal[j] * qp.H[j * working_set_size + i];      }      ;      target_tmp+=qp.c[i];      new_target+=target_tmp * my_primal[i];    }    ;    if (new_target < old_target) {      KKTerror=false;      if (descend < old_target - new_target) {        target_count=0;      } else {        convError=true;      }      ;      logln(5,"descend = " + (old_target - new_target));    } else     if (sv_count > 0) {      my_is_zero=Double.MAX_VALUE;      for (i=0; i < working_set_size; i++) {        if ((my_primal[i] > qp.l[i]) && (my_primal[i] < qp.u[i])) {          if (my_primal[i] - qp.l[i] < my_is_zero) {            my_is_zero=my_primal[i] - qp.l[i];          }          ;          if (qp.u[i] - my_primal[i] < my_is_zero) {            my_is_zero=qp.u[i] - my_primal[i];          }          ;        }        ;      }      ;      if (target_count == 0) {        my_is_zero*=2;      }      ;      logln(5,"WARNING: no descend (" + (old_target - new_target) + " <= "+ descend+ "), adjusting is_zero to "+ my_is_zero);      logln(5,"new_target = " + new_target);    } else {      logln(5,"WARNING: no descend (" + (old_target - new_target) + " <= "+ descend+ "), stopping.");      KKTerror=false;      convError=true;    }    ;  }  ;  if (convError) {    target_count++;    if (old_target < new_target) {      for (i=0; i < working_set_size; i++) {        my_primal[i]=qp.A[i] * alphas[working_set[i]];      }      ;      logln(5,"WARNING: Convergence error, restoring old primals");    }    ;  }  ;  if (target_count > 50) {    convergence_epsilon*=2;    feasible_epsilon=convergence_epsilon;    logln(1,"WARNING: reducing KKT precision to " + convergence_epsilon);    target_count=0;  }  ;}  }
class C{  public URI(final String s,final boolean escaped,final String charset) throws URIException, NullPointerException {  protocolCharset=charset;  parseUriReference(s,escaped);}  }
class C{  public double compute(Collection<? extends Number> dataset){  return computeInPlace(Doubles.toArray(dataset));}  }
class C{  public AsyncResult CloseSessionAsync(RequestHeader RequestHeader,Boolean DeleteSubscriptions){  CloseSessionRequest req=new CloseSessionRequest(RequestHeader,DeleteSubscriptions);  return channel.serviceRequestAsync(req);}  }
class C{  protected void PathExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  int filterExprMatch=FilterExpr();  if (filterExprMatch != FILTER_MATCH_FAILED) {    boolean locationPathStarted=(filterExprMatch == FILTER_MATCH_PREDICATES);    if (tokenIs('/')) {      nextToken();      if (!locationPathStarted) {        insertOp(opPos,2,OpCodes.OP_LOCATIONPATH);        locationPathStarted=true;      }      if (!RelativeLocationPath()) {        error(XPATHErrorResources.ER_EXPECTED_REL_LOC_PATH,null);      }    }    if (locationPathStarted) {      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);      m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);      m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    }  } else {    LocationPath();  }}  }
class C{  synchronized void sendBytes(byte[] bytes){  try {    if (ostream == null) {      throw new IOException("Unable to send data to command station: output stream is null");    } else {      for (int i=0; i < bytes.length; i++) {        ostream.write(bytes[i]);        wait(3);      }      final byte endbyte=13;      ostream.write(endbyte);    }  } catch (  IOException e) {    log.error("Exception on output: " + e);  }catch (  InterruptedException e) {    Thread.currentThread().interrupt();    log.error("Interrupted output: " + e);  }}  }
class C{  public TransactionEvent build(){  TransactionEvent txEvent=new TransactionEvent(this);  return txEvent;}  }
class C{  public String toString(){  return "LenientChronology[" + getBase().toString() + ']';}  }
class C{  public void addOMGraphics(OMGraphicList list,DrawingAttributes drawingAttributes){  if (ii == null) {    OMPoint r=new OMPoint((float)y,(float)x);    if (drawingAttributes != null) {      drawingAttributes.setTo(r);    }    list.add(r);    r.putAttribute(ShapeConstants.SHAPE_INDEX_ATTRIBUTE,new Integer(getRecordNumber()));  } else {    list.add(new OMRaster((float)y,(float)x,-ii.getIconWidth() / 2,-ii.getIconHeight() / 2,ii));  }}  }
class C{  public void showDialog(@NotNull DebuggerInfo debuggerInfo,@NotNull Variable variable,@NotNull AsyncCallback<String> callback){  this.debuggerInfo=debuggerInfo;  this.variable=variable;  this.callback=callback;  view.setValueTitle(constant.changeValueViewExpressionFieldTitle(variable.getName()));  view.setValue(variable.getValue());  view.focusInValueField();  view.selectAllText();  view.setEnableChangeButton(false);  view.showDialog();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ASSIGNMENT_EXPRESSION;}  }
class C{  public final Document parse(InputSource xml,InputSource validator,boolean isHtml) throws SAXException, IOException {  if (!isHtml) {    DocumentBuilderFactory factory=null;    try {      factory=new DocumentBuilderFactoryImpl();    } catch (    Throwable t) {      factory=DocumentBuilderFactory.newInstance();    }    if (validator == null) {      setAttributeEL(factory,NON_VALIDATING_DTD_EXTERNAL,Boolean.FALSE);      setAttributeEL(factory,NON_VALIDATING_DTD_GRAMMAR,Boolean.FALSE);    } else {      setAttributeEL(factory,VALIDATION_SCHEMA,Boolean.TRUE);      setAttributeEL(factory,VALIDATION_SCHEMA_FULL_CHECKING,Boolean.TRUE);    }    factory.setNamespaceAware(true);    factory.setValidating(validator != null);    try {      DocumentBuilder builder=factory.newDocumentBuilder();      builder.setEntityResolver(new XMLEntityResolverDefaultHandler(validator));      builder.setErrorHandler(new ThrowingErrorHandler(true,true,false));      return builder.parse(xml);    } catch (    ParserConfigurationException e) {      throw new SAXException(e);    }  }  XMLReader reader=new Parser();  reader.setFeature(Parser.namespacesFeature,true);  reader.setFeature(Parser.namespacePrefixesFeature,true);  try {    Transformer transformer=TransformerFactory.newInstance().newTransformer();    DOMResult result=new DOMResult();    transformer.transform(new SAXSource(reader,xml),result);    return getDocument(result.getNode());  } catch (  Exception e) {    throw new SAXException(e);  }}  }
class C{  public void testConstrStringExceptionEmptyExponent1(){  String a="-238768.787678287e";  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public static SipResponse createResponse(SipRequest request,String localTag,int code,String warning) throws PayloadException {  try {    Response response=SipUtils.MSG_FACTORY.createResponse(code,request.getStackMessage());    if (localTag != null) {      ToHeader to=(ToHeader)response.getHeader(ToHeader.NAME);      to.setTag(localTag);    }    if (warning != null) {      WarningHeader warningHeader=SipUtils.HEADER_FACTORY.createWarningHeader("SIP",403,warning);      response.addHeader(warningHeader);    }    SipResponse resp=new SipResponse(response);    resp.setStackTransaction(request.getStackTransaction());    return resp;  } catch (  ParseException|InvalidArgumentException e) {    throw new PayloadException("Can't create SIP message for localTag : " + localTag,e);  }}  }
class C{  public static BufferedReader decode(String b64string) throws MessagingException {  return new BufferedReader(new InputStreamReader(MimeUtility.decode(new ByteArrayInputStream(b64string.getBytes()),"base64")));}  }
class C{  public static float[] convertRGBtoLAB(int rgb){  float[] lab=new float[3];  float fx, fy, fz;  float eps=216.f / 24389.f;  float k=24389.f / 27.f;  float Xr=0.964221f;  float Yr=1.0f;  float Zr=0.825211f;  float r=Color.red(rgb) / 255.f;  float g=Color.green(rgb) / 255.f;  float b=Color.blue(rgb) / 255.f;  if (r <= 0.04045)   r=r / 12; else   r=(float)Math.pow((r + 0.055) / 1.055,2.4);  if (g <= 0.04045)   g=g / 12; else   g=(float)Math.pow((g + 0.055) / 1.055,2.4);  if (b <= 0.04045)   b=b / 12; else   b=(float)Math.pow((b + 0.055) / 1.055,2.4);  float X=0.436052025f * r + 0.385081593f * g + 0.143087414f * b;  float Y=0.222491598f * r + 0.71688606f * g + 0.060621486f * b;  float Z=0.013929122f * r + 0.097097002f * g + 0.71418547f * b;  float xr=X / Xr;  float yr=Y / Yr;  float zr=Z / Zr;  if (xr > eps)   fx=(float)Math.pow(xr,1 / 3.); else   fx=(float)((k * xr + 16.) / 116.);  if (yr > eps)   fy=(float)Math.pow(yr,1 / 3.); else   fy=(float)((k * yr + 16.) / 116.);  if (zr > eps)   fz=(float)Math.pow(zr,1 / 3.); else   fz=(float)((k * zr + 16.) / 116);  float Ls=(116 * fy) - 16;  float as=500 * (fx - fy);  float bs=200 * (fy - fz);  lab[0]=(2.55f * Ls + .5f);  lab[1]=(as + .5f);  lab[2]=(bs + .5f);  return lab;}  }
class C{  public void remove() throws Exception {  try {    String exprFilter=Messages.exprConst;    XPath xpath=XPathFactory.newInstance().newXPath();    Element eleFilter=(Element)xpath.evaluate(exprFilter,doc,XPathConstants.NODE);    if (eleFilter != null) {      eleFilter.getParentNode().removeChild(eleFilter);    }    String exprFltMapping=Messages.exprFltMapping;    Element eleFilMapping=(Element)xpath.evaluate(exprFltMapping,doc,XPathConstants.NODE);    if (eleFilMapping != null) {      eleFilMapping.getParentNode().removeChild(eleFilMapping);    }  } catch (  Exception ex) {    Activator.getDefault().log(ex.getMessage(),ex);    throw new Exception(String.format("%s%s",Messages.acsRemoveErr,ex.getMessage()));  }}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(Constant.messages.getString("api.options.title"));  this.add(getPanelMisc(),getPanelMisc().getName());}  }
class C{  public List<GenericEntry> retrieveAllOrganizationUsers(String customerId) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return retrieveAllPages(new URL("https://apps-apis.google.com/a/feeds/orguser/2.0/" + customerId + "?get=all"));}  }
class C{  @Override protected void populateAttributeDescriptor(Descriptor desc,Method getter,Method setter,String beanKey){  Method resolvedGetter=findJmxMethod(getter,beanKey);  Method resolvedSetter=findJmxMethod(setter,beanKey);  ManagedMetric metricInfo=resolvedGetter != null ? attributeSource.getManagedMetric(resolvedGetter) : null;  if (getter != null && metricInfo != null) {    populateMetricDescriptor(desc,metricInfo);  } else {    ManagedAttribute gma=(resolvedGetter == null) ? null : this.attributeSource.getManagedAttribute(resolvedGetter);    ManagedAttribute sma=(resolvedSetter == null) ? null : this.attributeSource.getManagedAttribute(resolvedSetter);    if (gma == null) {      gma=ManagedAttribute.EMPTY;    }    if (sma == null) {      sma=ManagedAttribute.EMPTY;    }    populateAttributeDescriptor(desc,gma,sma);  }}  }
class C{  @Override protected void swapValues(int a,int b){  boolean tt=values[a];  values[a]=values[b];  values[b]=tt;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:      return N4JSPackage.PROPERTY_GETTER_DECLARATION___GET_ANNOTATIONS;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:  return N4JSPackage.PROPERTY_GETTER_DECLARATION___IS_VALID_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == FieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.FIELD_ACCESSOR___IS_VALID_NAME:return N4JSPackage.PROPERTY_GETTER_DECLARATION___IS_VALID_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == PropertyAssignment.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_ASSIGNMENT___GET_DEFINED_MEMBER:return N4JSPackage.PROPERTY_GETTER_DECLARATION___GET_DEFINED_MEMBER;case N4JSPackage.PROPERTY_ASSIGNMENT___IS_VALID_NAME:return N4JSPackage.PROPERTY_GETTER_DECLARATION___IS_VALID_NAME;default :return -1;}}if (baseClass == AnnotablePropertyAssignment.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT___GET_ANNOTATIONS:return N4JSPackage.PROPERTY_GETTER_DECLARATION___GET_ANNOTATIONS;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public ControllerCollectorContext(ParallelCollectorGroup workers){  this.workers=workers;}  }
class C{  public static void debug(Object obj){  debug(obj,1,true);}  }
class C{  public static File unpackLibraryAndDependencies(String shortName) throws UnsatisfiedLinkError {  assertInitialized();  try {    return unpackLibraryBySoName(System.mapLibraryName(shortName));  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  @Override public void close() throws IOException {  parkCursorAtEnd();}  }
class C{  public static IndexSchema buildIndexSchema(String resourceName,SolrConfig config){  PluginInfo info=config.getPluginInfo(IndexSchemaFactory.class.getName());  IndexSchemaFactory factory;  if (null != info) {    factory=config.getResourceLoader().newInstance(info.className,IndexSchemaFactory.class);    factory.init(info.initArgs);  } else {    if (config.luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)) {      factory=config.getResourceLoader().newInstance(ManagedIndexSchemaFactory.class.getName(),IndexSchemaFactory.class);    } else {      factory=new ClassicIndexSchemaFactory();    }  }  IndexSchema schema=factory.create(resourceName,config);  return schema;}  }
class C{  public void moveToFront(Component c){  setPosition(c,0);}  }
class C{  @Override public void mouseClicked(MouseEvent event){  if (SwingUtilities.isRightMouseButton(event)) {    JPopupMenu contextMenu=new JPopupMenu();    JMenu colorMenu=new JMenu("Color");    colorMenu.add(new ColorSettingMenuItem(mSettingsManager,ColorSettingName.SPECTRUM_CURSOR));    colorMenu.add(new ColorSettingMenuItem(mSettingsManager,ColorSettingName.SPECTRUM_LINE));    colorMenu.add(new ColorSettingMenuItem(mSettingsManager,ColorSettingName.SPECTRUM_BACKGROUND));    colorMenu.add(new ColorSettingMenuItem(mSettingsManager,ColorSettingName.SPECTRUM_GRADIENT_BOTTOM));    colorMenu.add(new ColorSettingMenuItem(mSettingsManager,ColorSettingName.SPECTRUM_GRADIENT_TOP));    contextMenu.add(colorMenu);    JMenu displayMenu=new JMenu("Display");    contextMenu.add(displayMenu);    JMenu averagingMenu=new JMenu("Averaging");    averagingMenu.add(new AveragingItem(ChannelSpectrumPanel.this,2));    displayMenu.add(averagingMenu);    JMenu fftWidthMenu=new JMenu("FFT Width");    displayMenu.add(fftWidthMenu);    for (    DFTSize width : DFTSize.values()) {      fftWidthMenu.add(new DFTSizeItem(mDFTProcessor,width));    }    JMenu frameRateMenu=new JMenu("Frame Rate");    displayMenu.add(frameRateMenu);    frameRateMenu.add(new FrameRateItem(mDFTProcessor,14));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,16));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,18));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,20));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,25));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,30));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,40));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,50));    JMenu fftWindowType=new JMenu("Window Type");    displayMenu.add(fftWindowType);    for (    WindowType type : WindowType.values()) {      fftWindowType.add(new FFTWindowTypeItem(mDFTProcessor,type));    }    JMenu smoothingMenu=new JMenu("Smoothing");    if (mSpectrumPanel.getSmoothingType() != SmoothingType.NONE) {      smoothingMenu.add(new SmoothingItem(ChannelSpectrumPanel.this,5));      smoothingMenu.add(new JSeparator());    }    smoothingMenu.add(new SmoothingTypeItem(ChannelSpectrumPanel.this,SmoothingType.GAUSSIAN));    smoothingMenu.add(new SmoothingTypeItem(ChannelSpectrumPanel.this,SmoothingType.TRIANGLE));    smoothingMenu.add(new SmoothingTypeItem(ChannelSpectrumPanel.this,SmoothingType.RECTANGLE));    smoothingMenu.add(new SmoothingTypeItem(ChannelSpectrumPanel.this,SmoothingType.NONE));    displayMenu.add(smoothingMenu);    if (contextMenu != null) {      contextMenu.show(mOverlayPanel,event.getX(),event.getY());    }  }}  }
class C{  @Override public void drawRangeLine(Graphics2D g2,XYPlot plot,ValueAxis axis,Rectangle2D dataArea,double value,Paint paint,Stroke stroke){  Range range=axis.getRange();  if (!range.contains(value)) {    return;  }  PlotOrientation orientation=plot.getOrientation();  Line2D line=null;  double v=axis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());  if (orientation == PlotOrientation.HORIZONTAL) {    line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());  } else   if (orientation == PlotOrientation.VERTICAL) {    line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);  }  g2.setPaint(paint);  g2.setStroke(stroke);  Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);  g2.draw(line);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved);}  }
class C{  public void releaseStatement(Statement stmt){  if (stmt == null)   return;  try {    stmt.close();  } catch (  SQLException e) {    s_dbEngine.setDBError(true);    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"releaseStatementError",new Object[]{e.getMessage()});  } finally {    stmt=null;  }}  }
class C{  private void dumpTree(){  Enumeration en=m_root.preorderEnumeration();  int count=0;  while (en.hasMoreElements()) {    StringBuffer sb=new StringBuffer();    MTreeNode nd=(MTreeNode)en.nextElement();    for (int i=0; i < nd.getLevel(); i++)     sb.append(" ");    sb.append("ID=").append(nd.getNode_ID()).append(", SeqNo=").append(nd.getSeqNo()).append(" ").append(nd.getName());    System.out.println(sb.toString());    count++;  }  System.out.println("Count=" + count);}  }
class C{  public Builder withButton(String buttonText,View.OnClickListener onClickListener){  this.buttonText=buttonText;  this.onClickListener=onClickListener;  return this;}  }
class C{  public boolean isEmpty(){  return CollectionUtils.isEmpty(methodInstrumentationConfigs);}  }
class C{  public static Properties splitArrayElementsIntoProperties(String[] array,String delimiter,String charsToDelete){  if (isEmpty(array)) {    return null;  }  Properties result=new Properties();  for (  String element : array) {    if (charsToDelete != null) {      element=deleteAny(element,charsToDelete);    }    String[] splittedElement=split(element,delimiter);    if (splittedElement == null) {      continue;    }    result.setProperty(splittedElement[0].trim(),splittedElement[1].trim());  }  return result;}  }
class C{  private void updateEffectiveSize(){  try {    int r=Integer.valueOf(rows.getText());    int c=Integer.valueOf(columns.getText());    int h=Integer.valueOf(receptiveFieldHeight.getText());    int w=Integer.valueOf(receptiveFieldWidth.getText());    effectiveSize.setText((c * w) + "x" + (r * h));  } catch (  NumberFormatException e) {    effectiveSize.setText("...");  }}  }
class C{  public Gulf(){  super();}  }
class C{  @Override public void remove(){  src.remove();}  }
class C{  public void onStart(){  if (mInitializationComplete) {    startNowAndProcessPendingItems();  } else {    mOnStartPending=true;  }}  }
class C{  public static void starCameraFromGalleryPhotoPreviewActivity(Context context){  Intent intent=new Intent(context,CameraPhotoPreviewActivity.class);  intent.putExtra(Const.Extras.TYPE_OF_PHOTO_INTENT,Const.PhotoIntents.GALLERY);  ((Activity)context).startActivityForResult(intent,Const.RequestCode.PHOTO_CHOOSE);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  BigdataElement other=(BigdataElement)obj;  if (graph == null) {    if (other.graph != null)     return false;  } else   if (!graph.equals(other.graph))   return false;  if (uri == null) {    if (other.uri != null)     return false;  } else   if (!uri.equals(other.uri))   return false;  return true;}  }
class C{  protected Task<T> deleteTask(String path,Object... args){  TaskResourceRep task=client.delete(TaskResourceRep.class,path,args);  return new Task<T>(client,task,resourceClass);}  }
class C{  protected TypeIdResolver idResolver(MapperConfig<?> config,JavaType baseType,Collection<NamedType> subtypes,boolean forSer,boolean forDeser){  if (_customIdResolver != null) {    return _customIdResolver;  }  if (_idType == null) {    throw new IllegalStateException("Can not build, 'init()' not yet called");  }switch (_idType) {case CLASS:    return new ClassNameIdResolver(baseType,config.getTypeFactory());case MINIMAL_CLASS:  return new MinimalClassNameIdResolver(baseType,config.getTypeFactory());case NAME:return TypeNameIdResolver.construct(config,baseType,subtypes,forSer,forDeser);case NONE:return null;case CUSTOM:}throw new IllegalStateException("Do not know how to construct standard type id resolver for idType: " + _idType);}  }
class C{  @Override @Pure public String toString(){  return getDescriptor().classNameFromDescriptor();}  }
class C{  void handleSensorChange(java.beans.PropertyChangeEvent e){  if (e.getPropertyName().equals("KnownState")) {    int state=getSensor().getState();    if (state == Sensor.ACTIVE) {      goingActive();    } else     if (state == Sensor.INACTIVE) {      goingInactive();    } else     if (state == Sensor.UNKNOWN) {      setValue(null);      setState(UNKNOWN);    } else {      setValue(null);      setState(INCONSISTENT);    }  }}  }
class C{  public static void openView(CallHierarchy callHierarchy){  IWorkbenchPage activePage=Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();  CallHierarchyViewPart view=(CallHierarchyViewPart)activePage.findView(VIEW_ID);  if (view == null) {    try {      view=(CallHierarchyViewPart)activePage.showView(VIEW_ID);    } catch (    PartInitException e) {      e.printStackTrace();    }  }  view.setInput(callHierarchy);  activePage.activate(view);}  }
class C{  protected static void doConfigure(ConfigurationDBAdapter configuration,InputStream stream,String resourceName) throws RuntimeException {  Document document=getDocument(stream,resourceName);  doConfigure(configuration,document);}  }
class C{  @Override public void mousePressed(MouseEvent e){  m_frameLimiter.setRepeats(true);  if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !e.isAltDown() && m_mouseState == 0 && m_scaling == 0) {    if (((e.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((e.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {      m_mouseState=2;    } else     if (((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((e.getModifiers() & InputEvent.CTRL_MASK) == 0)) {      m_oldMousePos.width=e.getX();      m_oldMousePos.height=e.getY();      m_newMousePos.width=e.getX();      m_newMousePos.height=e.getY();      m_mouseState=3;      Graphics g=getGraphics();      if (m_ZoomBoxColor == null) {        g.setColor(Color.black);      } else {        g.setColor(m_ZoomBoxColor);      }      if (m_ZoomBoxXORColor == null) {        g.setXORMode(Color.white);      } else {        g.setXORMode(m_ZoomBoxXORColor);      }      g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);      g.dispose();    } else {      m_oldMousePos.width=e.getX();      m_oldMousePos.height=e.getY();      m_newMousePos.width=e.getX();      m_newMousePos.height=e.getY();      m_mouseState=1;      m_frameLimiter.start();    }  } else   if ((e.getButton() == MouseEvent.BUTTON1) && e.isAltDown() && e.isShiftDown()&& !e.isControlDown()) {    saveComponent();  } else   if (m_mouseState == 0 && m_scaling == 0) {  }}  }
class C{  protected void notifySendMessage(String method,List<?> params){  for (  ISharedObjectListener listener : listeners) {    listener.onSharedObjectSend(this,method,params);  }}  }
class C{  @Override public void valueChange(ValueChangeEvent e){  String name=e.getPropertyName();  Object value=e.getNewValue();  log.config(name + "=" + value);  if (value == null)   return;  if (name.equals("C_PaySelection_ID")) {    paySelectSearch.setValue(value);    m_C_PaySelection_ID=((Integer)value).intValue();    loadPaySelectInfo();  }}  }
class C{  public static void fill(int[] array,int value){  for (int i=array.length - 1; i >= 0; i--) {    array[i]=value;  }}  }
class C{  public NetworkConfig(String init){  String fragments[]=init.split(",");  name=fragments[0].trim().toLowerCase(Locale.ROOT);  type=Integer.parseInt(fragments[1]);  radio=Integer.parseInt(fragments[2]);  priority=Integer.parseInt(fragments[3]);  restoreTime=Integer.parseInt(fragments[4]);  dependencyMet=Boolean.parseBoolean(fragments[5]);}  }
class C{  public void toggle(boolean animate){  toggle(animate,fadeIn,fadeOut);}  }
class C{  public static double mean(double[] a,int lo,int hi){  int length=hi - lo + 1;  if (lo < 0 || hi >= a.length || lo > hi)   throw new IndexOutOfBoundsException("Subarray indices out of bounds");  if (length == 0)   return Double.NaN;  double sum=sum(a,lo,hi);  return sum / length;}  }
class C{  @Override public void process(V tuple){  dval+=tuple.doubleValue();}  }
class C{  public PutIndexTemplateRequestBuilder cause(String cause){  request.cause(cause);  return this;}  }
class C{  @Override public synchronized List<E> subList(int start,int end){  return new Collections.SynchronizedRandomAccessList<E>(super.subList(start,end),this);}  }
class C{  @Override public void sessionClosed(NextFilter nextFilter,IoSession session) throws Exception {  if (profileSessionClosed) {    long start=timeNow();    nextFilter.sessionClosed(session);    long end=timeNow();    sessionClosedTimerWorker.addNewDuration(end - start);  } else {    nextFilter.sessionClosed(session);  }}  }
class C{  public ItemChangeGuardCreature(final Creature copy,final String oldItemType,final String itemType){  super(copy);  this.itemType=itemType;  this.oldItemType=oldItemType;  if (!SingletonRepository.getEntityManager().isItem(itemType)) {    logger.error(copy.getName() + " drops nonexistent item " + itemType);  }}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T>T[] insert(T[] dest,T src,int offset,Class componentType){  T[] temp=(T[])Array.newInstance(componentType,dest.length + 1);  System.arraycopy(dest,0,temp,0,offset);  temp[offset]=src;  System.arraycopy(dest,offset,temp,offset + 1,dest.length - offset);  return temp;}  }
class C{  private static void parseInternal(UrlParser urlParser,String url,Properties properties) throws SQLException {  try {    int separator=url.indexOf("//");    if (separator == -1) {      throw new IllegalArgumentException("url parsing error : '//' is not present in the url " + url);    }    setHaMode(urlParser,url,separator);    String urlSecondPart=url.substring(separator + 2);    int dbIndex=urlSecondPart.indexOf("/");    int paramIndex=urlSecondPart.indexOf("?");    String hostAddressesString;    String additionalParameters;    if ((dbIndex < paramIndex && dbIndex < 0) || (dbIndex > paramIndex && paramIndex > -1)) {      hostAddressesString=urlSecondPart.substring(0,paramIndex);      additionalParameters=urlSecondPart.substring(paramIndex);    } else     if ((dbIndex < paramIndex && dbIndex > -1) || (dbIndex > paramIndex && paramIndex < 0)) {      hostAddressesString=urlSecondPart.substring(0,dbIndex);      additionalParameters=urlSecondPart.substring(dbIndex);    } else {      hostAddressesString=urlSecondPart;      additionalParameters=null;    }    defineUrlParserParameters(urlParser,properties,hostAddressesString,additionalParameters);    setDefaultHostAddressType(urlParser);  } catch (  IllegalArgumentException i) {    throw new SQLException(i.getMessage());  }}  }
class C{  public static DigestAlgorithm forName(final String name){  final String c14nName=name.replaceAll("-","");  final DigestAlgorithm algorithm=Registry.ALGORITHMS.get(c14nName);  if (algorithm == null) {    throw new DSSException("Unsupported algorithm: " + name + "/"+ c14nName);  }  return algorithm;}  }
class C{  @Override public boolean optimize(ParForStatementBlock sb,ParForProgramBlock pb,OptTree plan,CostEstimator est,ExecutionContext ec) throws DMLRuntimeException {  LOG.debug("--- " + getOptMode() + " OPTIMIZER -------");  OptNode pn=plan.getRoot();  double M0=-1, M1=-1, M2=-1;  if (pn.isLeaf())   return true;  analyzeProblemAndInfrastructure(pn);  _cost=est;  LOG.debug(getOptMode() + " OPT: Optimize w/ max_mem=" + toMB(_lm)+ "/"+ toMB(_rm)+ "/"+ toMB(_rm2)+ ", max_k="+ _lk+ "/"+ _rk+ "/"+ _rk2+ ").");  if (_rnk <= 0 || _rk <= 0)   LOG.warn(getOptMode() + " OPT: Optimize for inactive cluster (num_nodes=" + _rnk+ ", num_map_slots="+ _rk+ ").");  pn.setSerialParFor();  M0=_cost.getEstimate(TestMeasure.MEMORY_USAGE,pn);  LOG.debug(getOptMode() + " OPT: estimated mem (serial exec) M=" + toMB(M0));  HashMap<String,PDataPartitionFormat> partitionedMatrices=new HashMap<String,PDataPartitionFormat>();  rewriteSetDataPartitioner(pn,ec.getVariables(),partitionedMatrices);  M1=_cost.getEstimate(TestMeasure.MEMORY_USAGE,pn);  rewriteRemoveUnnecessaryCompareMatrix(pn,ec);  boolean flagLIX=rewriteSetResultPartitioning(pn,M1,ec.getVariables());  M1=_cost.getEstimate(TestMeasure.MEMORY_USAGE,pn);  M2=_cost.getEstimate(TestMeasure.MEMORY_USAGE,pn,LopProperties.ExecType.CP);  LOG.debug(getOptMode() + " OPT: estimated new mem (serial exec) M=" + toMB(M1));  LOG.debug(getOptMode() + " OPT: estimated new mem (serial exec, all CP) M=" + toMB(M2));  boolean flagRecompMR=rewriteSetExecutionStategy(pn,M0,M1,M2,flagLIX);  if (pn.getExecType() == ExecType.MR || pn.getExecType() == ExecType.SPARK) {    if (flagRecompMR) {      rewriteSetOperationsExecType(pn,flagRecompMR);      M1=_cost.getEstimate(TestMeasure.MEMORY_USAGE,pn);    }    rewriteDataColocation(pn,ec.getVariables());    rewriteSetPartitionReplicationFactor(pn,partitionedMatrices,ec.getVariables());    rewriteSetExportReplicationFactor(pn,ec.getVariables());    boolean flagNested=rewriteNestedParallelism(pn,M1,flagLIX);    rewriteSetDegreeOfParallelism(pn,M1,flagNested);    rewriteSetTaskPartitioner(pn,flagNested,flagLIX);    rewriteSetFusedDataPartitioningExecution(pn,M1,flagLIX,partitionedMatrices,ec.getVariables());    rewriteSetTranposeSparseVectorOperations(pn,partitionedMatrices,ec.getVariables());    HashSet<String> inplaceResultVars=new HashSet<String>();    rewriteSetInPlaceResultIndexing(pn,M1,ec.getVariables(),inplaceResultVars,ec);    rewriteDisableCPCaching(pn,inplaceResultVars,ec.getVariables());  } else {    rewriteSetDegreeOfParallelism(pn,M1,false);    rewriteSetTaskPartitioner(pn,false,false);    HashSet<String> inplaceResultVars=new HashSet<String>();    rewriteSetInPlaceResultIndexing(pn,M1,ec.getVariables(),inplaceResultVars,ec);    if (!OptimizerUtils.isSparkExecutionMode()) {      rewriteEnableRuntimePiggybacking(pn,ec.getVariables(),partitionedMatrices);    } else {      rewriteInjectSparkLoopCheckpointing(pn);      rewriteInjectSparkRepartition(pn,ec.getVariables());      rewriteSetSparkEagerRDDCaching(pn,ec.getVariables());    }  }  rewriteSetResultMerge(pn,ec.getVariables(),true);  rewriteSetRecompileMemoryBudget(pn);  rewriteRemoveRecursiveParFor(pn,ec.getVariables());  rewriteRemoveUnnecessaryParFor(pn);  _numTotalPlans=-1;  return true;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (const: ");  result.append(const_);  result.append(", readonly: ");  result.append(readonly);  result.append(", external: ");  result.append(external);  result.append(')');  return result.toString();}  }
class C{  public static void logFallbackSearchRequestOutcome(boolean isFailure){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchFallbackSearchRequestStatus",isFailure ? REQUEST_FAILED : REQUEST_NOT_FAILED,REQUEST_BOUNDARY);}  }
class C{  public LocalDateTime roundHalfEvenCopy(){  return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));}  }
class C{  public Poisson(double mean,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setMean(mean);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  mContext=context;  mAccount=account;  mAuthTokenType=authTokenType;  mNotifyAuthFailure=notifyAuthFailure;}  }
class C{  public static Change relationshipChange(final PlayerID player,final PlayerID player2,final RelationshipType currentRelation,final RelationshipType newRelation){  return new RelationshipChange(player,player2,currentRelation,newRelation);}  }
class C{  public IPsecStatus checkStatus(){  log.info("Checking ipsec status ...");  IPsecStatus status=new IPsecStatus();  String vdcConfigVersion=loadVdcConfigVersionFromZK();  status.setVersion(vdcConfigVersion);  String ipsecKeyUpdatedTime=ipsecConfig.getIpsecKeyUpdatedTime();  String ipsecStatus=ipsecConfig.getIpsecStatus();  if (ipsecStatus != null && ipsecStatus.equals(STATUS_DISABLED)) {    status.setStatus(ipsecStatus);  } else {    List<String> disconnectedNodes=checkIPsecStatus();    if (CollectionUtils.isEmpty(disconnectedNodes)) {      status.setStatus(STATUS_GOOD);    } else {      status.setStatus(STATUS_DEGRADED);      status.setDisconnectedNodes(disconnectedNodes);    }    if (ipsecKeyUpdatedTime == null) {      ipsecKeyUpdatedTime=vdcConfigVersion;    }    status.setUpdatedTime(ipsecKeyUpdatedTime);  }  return status;}  }
class C{  public LiteFragment(){}  }
class C{  protected void checkDimensionCompatibility(BitMatrix other){  if (columns != other.columns() || rows != other.rows())   throw new IllegalArgumentException("Incompatible dimensions: (columns,rows)=(" + columns + ","+ rows+ "), (other.columns,other.rows)=("+ other.columns()+ ","+ other.rows()+ ")");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.018 -0400",hash_original_method="9671436258BFA7D3534A417C2F91BAEF",hash_generated_method="A939336884D8C91010AEE963C2C4C32C") public ByteArrayOutputStream(){  this(1024);}  }
class C{  public static double[][] performTranspose(double[][] a){  int rows=a[0].length;  int cols=a.length;  double[][] result=new double[rows][cols];  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      result[i][j]=a[j][i];    }  }  return result;}  }
class C{  public double reduce(String numericColumnName,NumericReduceFunction function){  Column column=column(numericColumnName);  return function.reduce(column.subset(rowMap).toDoubleArray());}  }
class C{  public KernelSGD(LossFunc loss,KernelTrick kernel,double lambda,KernelPoint.BudgetStrategy budgetStrategy,int budgetSize){  this(loss,kernel,lambda,budgetStrategy,budgetSize,1.0,0.05);}  }
class C{  public AdvancingFrontNode locatePoint(final TriangulationPoint point){  final double px=point.getX();  AdvancingFrontNode node=findSearchNode(px);  final double nx=node.point.getX();  if (px == nx) {    if (point != node.point) {      if (point == node.prev.point) {        node=node.prev;      } else       if (point == node.next.point) {        node=node.next;      } else {        throw new RuntimeException("Failed to find Node for given afront point");      }    }  } else   if (px < nx) {    while ((node=node.prev) != null) {      if (point == node.point) {        break;      }    }  } else {    while ((node=node.next) != null) {      if (point == node.point) {        break;      }    }  }  search=node;  return node;}  }
class C{  public static final void outlineShapes(GL2 gl,SandboxBody body,float w,float[] color,double scale){  float lw=RenderUtilities.setLineWidth(gl,w);  if (color != null)   gl.glColor4fv(color,0);  double we=w * 0.5 / scale;  int fSize=body.getFixtureCount();  for (int i=0; i < fSize; i++) {    BodyFixture bf=body.getFixture(i);    Shape s=bf.getShape();    if (s instanceof Circle) {      Circle c=(Circle)s;      Vector2 ct=c.getCenter();      RenderUtilities.fillCircleFromCenter(gl,c.getRadius() + we,ct.x,ct.y);    } else {      Wound wo=(Wound)s;      Vector2[] vs=wo.getVertices();      gl.glBegin(GL.GL_LINE_LOOP);      for (int j=0; j < vs.length; j++) {        Vector2 v=vs[j];        gl.glVertex2d(v.x,v.y);      }      gl.glEnd();      for (int j=0; j < vs.length; j++) {        Vector2 v=vs[j];        RenderUtilities.fillCircleFromCenter(gl,we,v.x,v.y);      }    }  }  RenderUtilities.setLineWidth(gl,lw);}  }
class C{  public static <T>T[] removeLast(T[] array,int count){  assertTrue(array.length >= count);  T[] newArray=ArrayUtil.copyFrom(array,array.length - count);  return newArray;}  }
class C{  void listItemsSortedInsecure() throws Exception {  System.out.println("Insecure Systems Inc. - list items");  String order=input("order (id, name)?");  try {    ResultSet rs=stat.executeQuery("SELECT ID, NAME FROM ITEMS ORDER BY " + order);    while (rs.next()) {      System.out.println(rs.getString(1) + ": " + rs.getString(2));    }  } catch (  SQLException e) {    System.out.println(e);  }}  }
class C{  public static CachableRed wrap(RenderedImage ri){  if (ri instanceof CachableRed)   return (CachableRed)ri;  if (ri instanceof BufferedImage)   return new BufferedImageCachableRed((BufferedImage)ri);  return new RenderedImageCachableRed(ri);}  }
class C{  public Listener<Member> onLeaderElection(Consumer<Member> listener){  return electionListeners.add(listener);}  }
class C{  public void removeProgressListener(ActionListener<NetworkEvent> al){  if (progressListeners == null) {    return;  }  progressListeners.removeListener(al);  Collection v=progressListeners.getListenerCollection();  if (v == null || v.size() == 0) {    progressListeners=null;  }}  }
class C{  XSLTSchema(){  build();}  }
class C{  public boolean shouldBob(){  return true;}  }
class C{  public void findAndInit(Object obj){  if (obj instanceof NetMapConnector) {    checkGraphicLoader(new NetMapGraphicLoader((NetMapConnector)obj));  } else {    super.findAndInit(obj);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_CLASS_EXPRESSION__ANNOTATION_LIST:    setAnnotationList((ExpressionAnnotationList)newValue);  return;case N4JSPackage.N4_CLASS_EXPRESSION__NAME:setName((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static int readHeaderFromStream(int maxHeaderLength,final InputStream is,final byte[] imageHeaderBytes) throws IOException {  Preconditions.checkNotNull(is);  Preconditions.checkNotNull(imageHeaderBytes);  Preconditions.checkArgument(imageHeaderBytes.length >= maxHeaderLength);  if (is.markSupported()) {    try {      is.mark(maxHeaderLength);      return ByteStreams.read(is,imageHeaderBytes,0,maxHeaderLength);    }  finally {      is.reset();    }  } else {    return ByteStreams.read(is,imageHeaderBytes,0,maxHeaderLength);  }}  }
class C{  private void copyGL(MAcctSchema targetAS) throws Exception {  MAcctSchemaGL source=MAcctSchemaGL.get(getCtx(),p_SourceAcctSchema_ID);  MAcctSchemaGL target=new MAcctSchemaGL(getCtx(),0,get_TrxName());  target.setC_AcctSchema_ID(p_TargetAcctSchema_ID);  ArrayList<KeyNamePair> list=source.getAcctInfo();  for (int i=0; i < list.size(); i++) {    KeyNamePair pp=list.get(i);    int sourceC_ValidCombination_ID=pp.getKey();    String columnName=pp.getName();    MAccount sourceAccount=MAccount.get(getCtx(),sourceC_ValidCombination_ID);    MAccount targetAccount=createAccount(targetAS,sourceAccount);    target.setValue(columnName,new Integer(targetAccount.getC_ValidCombination_ID()));  }  if (!target.save())   throw new AdempiereSystemError("Could not Save GL");}  }
class C{  public synchronized boolean retainAll(Collection c){  Object[] elements=getArray();  int len=elements.length;  if (len != 0) {    int newlen=0;    Object[] temp=new Object[len];    for (int i=0; i < len; ++i) {      Object element=elements[i];      if (c.contains(element))       temp[newlen++]=element;    }    if (newlen != len) {      setArray(copyOfRange(temp,0,newlen,Object[].class));      return true;    }  }  return false;}  }
class C{  public FlexStreamSend(IoBuffer data){  super(data);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_ENUM_LITERAL;}  }
class C{  public void my(){}  }
class C{  public void optimize(){  info("Performing an OPTIMIZE to " + solrUrl + "..");  doGet(appendParam(solrUrl.toString(),"optimize=true"));}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  public ComponentBuilder event(HoverEvent hoverEvent){  current.setHoverEvent(hoverEvent);  return this;}  }
class C{  public TableBuilder putProperty(String name,DataType type,Object value){  if (_props == null) {    _props=new HashMap<String,PropertyMap.Property>();  }  _props.put(name,PropertyMapImpl.createProperty(name,type,value));  return this;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:49.784 -0500",hash_original_method="8E90C4CB34BFA3C349704DFD8C6BECF1",hash_generated_method="A642FAE04AD387A5323BD6E74B8D7924") private static String filterNumericSugar(String address){  StringBuilder builder=new StringBuilder();  int len=address.length();  for (int i=0; i < len; i++) {    char c=address.charAt(i);    int mapIndex=numericCharDialableMap.indexOfKey(c);    if (mapIndex < 0)     return null;    if (!numericCharDialableMap.valueAt(mapIndex))     continue;    builder.append(c);  }  return builder.toString();}  }
class C{  public IntList(int head0,IntList tail0){  head=head0;  tail=tail0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.523 -0500",hash_original_method="9E40B472DD9B461ACD98BE83100C34CB",hash_generated_method="6CE253272E113F090E23F22A83149CD1") public SubjectParser(String subject){  super(subject);}  }
class C{  @Override public void render(){  Gdx.gl.glClearColor(0,0,0,1);  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);  viewport.apply();  renderer.setProjectionMatrix(viewport.getCamera().combined);  renderer.begin(ShapeType.Filled);  drawSmileyFace(renderer);  renderer.end();}  }
class C{  public static BinaryMessage merge(boolean[] preloadBits,BinaryMessage bitsetToAppend){  BinaryMessage returnValue=new BinaryMessage(preloadBits.length + bitsetToAppend.size(),preloadBits);  int pointer=0;  while (pointer < bitsetToAppend.size() && !returnValue.isFull()) {    try {      returnValue.add(bitsetToAppend.get(pointer));    } catch (    BitSetFullException e) {      e.printStackTrace();    }    pointer++;  }  return returnValue;}  }
class C{  public void readFrom(ChannelBuffer data,int length){  super.readFrom(data,length);  reportMirrorPorts=data.readByte();  pad1=data.readByte();  pad2=data.readByte();  pad3=data.readByte();}  }
class C{  default String renderType(Generator gen,M model){  return gen.on(model.getType()).map(null).orElse("");}  }
class C{  public final CC growPrioY(int p){  ver.setGrowPriority(p);  return this;}  }
class C{  public void addLayoutComponent(String name,Component comp){  invalidateLayout(comp.getParent());}  }
class C{  public ResolveUrls(String urlsFile){  this(urlsFile,100);}  }
class C{  @SuppressWarnings("unused") private static void normalizeSSA(IR ir){  for (Instruction s=ir.firstInstructionInCodeOrder(), sentinel=ir.lastInstructionInCodeOrder(), nextInstr=null; s != sentinel; s=nextInstr) {    nextInstr=s.nextInstructionInCodeOrder();    if (Phi.conforms(s) && !s.getBasicBlock().isExceptionHandlerBasicBlock()) {      if (DEBUG)       VM.sysWriteln("Processing " + s + " of basic block "+ s.getBasicBlock());      boolean hasUnreachable=false;      for (int index=0; index < Phi.getNumberOfPreds(s); index++) {        Operand op=Phi.getValue(s,index);        if (op.isRegister()) {          Register rval=op.asRegister().getRegister();          if (rval.isValidation()) {            continue;          } else {            Register rvalPrime=ir.regpool.getReg(rval);            Instruction copy=SSA.makeMoveInstruction(ir,rvalPrime,rval,op.getType());            BasicBlock pred=Phi.getPred(s,index).block;            pred.appendInstructionRespectingTerminalBranch(copy);            if (DEBUG)             VM.sysWriteln("Inserted rval copy of " + copy + " into basic block "+ pred);            op.asRegister().setRegister(rvalPrime);          }        } else         if (op instanceof UnreachableOperand) {          hasUnreachable=true;        }      }      if (!hasUnreachable) {        Operand op=Phi.getResult(s);        if (!op.isRegister()) {        } else {          Register lval=op.asRegister().getRegister();          Register lvalPrime=ir.regpool.getReg(lval);          Instruction copy=SSA.makeMoveInstruction(ir,lval,lvalPrime,op.getType());          s.insertAfter(copy);          op.asRegister().setRegister(lvalPrime);          if (DEBUG)           VM.sysWriteln("Inserted lval copy of " + copy + " after "+ s);        }      }    }  }}  }
class C{  public Set<UserInfo> queryUsersWithRole(String roleName){  Role role=findRoleByRoleName(roleName);  if (role == null) {    return Collections.emptySet();  }  List<UserRole> userRoles=userRoleRepository.findByRoleId(role.getId());  Set<UserInfo> users=FluentIterable.from(userRoles).transform(null).toSet();  return users;}  }
class C{  public void testDrainToN(){  LinkedBlockingDeque q=new LinkedBlockingDeque();  for (int i=0; i < SIZE + 2; ++i) {    for (int j=0; j < SIZE; j++)     assertTrue(q.offer(new Integer(j)));    ArrayList l=new ArrayList();    q.drainTo(l,i);    int k=(i < SIZE) ? i : SIZE;    assertEquals(l.size(),k);    assertEquals(q.size(),SIZE - k);    for (int j=0; j < k; ++j)     assertEquals(l.get(j),new Integer(j));    while (q.poll() != null)     ;  }}  }
class C{  public PullUpDescriptor(){  super(IJavaRefactorings.PULL_UP);}  }
class C{  public int responseCode(){  return responseCode;}  }
class C{  public int compareTo(Object obj){  int diff=-1;  if (obj instanceof ParserNotice) {    ParserNotice p2=(ParserNotice)obj;    diff=level - p2.getLevel();    if (diff == 0) {      diff=line - p2.getLine();      if (diff == 0) {        diff=message.compareTo(p2.getMessage());      }    }  }  return diff;}  }
class C{  @Override public String longitude(Angle angle){  if (angle == null) {    String msg=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (this.isShowDMS()) {    double[] dms=angle.toDMS();    return String.format("%03.0f%02.0f%04.1f%s",Math.abs(dms[0]),dms[1],dms[2],dms[0] < 0 ? "W" : "E");  } else {    return super.longitude(angle);  }}  }
class C{  public static ReuseResult loadReuseExact(String fileName,Bitmap dest) throws ImageLoadException {  return loadBitmapReuseExact(new FileSource(fileName),dest);}  }
class C{  public static Rule defaultRule(){  return RuleImpl.defaultInstance();}  }
class C{  public boolean checkIfBackupSetExists(String setName){  validateNotNullOrEmpty(setName);  try {    File file=new File(getBackupRoot(),setName);    if (file.exists()) {      return true;    }  } catch (  Exception e) {    log.error("Exception during backup set directory exists check");  }  return false;}  }
class C{  SimpleExpression(ExpressionEvaluator evaluator){  this.evaluator=evaluator;}  }
class C{  public boolean is_subset_of(lalr_item_set other) throws internal_error {  not_null(other);  for (Enumeration e=all(); e.hasMoreElements(); )   if (!other.contains((lalr_item)e.nextElement()))   return false;  return true;}  }
class C{  public void beforeFirst() throws GenericEntityException {  try {    resultSet.beforeFirst();  } catch (  SQLException e) {    if (!closed) {      this.close();      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GenericEntityException("Error setting the cursor to beforeFirst",e);  }}  }
class C{  public boolean intersects(IntervalWindow other){  return !isDisjoint(other);}  }
class C{  private boolean commitPermitted(Collection commitInstances,Collection newInstanceIds){  for (  Object commitInstance : commitInstances) {    Entity entity=(Entity)commitInstance;    String fullId=entity.getMetaClass().getName() + "-" + entity.getId();    if (newInstanceIds.contains(fullId)) {      if (!createPermitted(entity.getMetaClass()))       return false;    } else     if (!updatePermitted(entity.getMetaClass())) {      return false;    }  }  return true;}  }
class C{  private void printMethodHeader(){  RVMMethod method=compiledMethod.getMethod();  Log.write("\n--- METHOD (");  Log.write(CompiledMethod.compilerTypeToString(compiledMethodType));  Log.write(") ");  if (method == null)   Log.write("null method"); else   printMethod(method);  Log.writeln();  Log.write("--- fp = ");  Log.write(fp);  if (compiledMethod.isCompiled()) {    ObjectReference codeBase=ObjectReference.fromObject(compiledMethod.getEntryCodeArray());    Log.write("     code base = ");    Log.write(codeBase);    Log.write("     code offset = ");    Log.writeln(ip.diff(codeBase.toAddress()));    Log.write("     line number = ");    Log.writeln(compiledMethod.findLineNumberForInstruction(ip.diff(codeBase.toAddress())));  } else {    Log.write("   Method is uncompiled - ip = ");    Log.writeln(ip);  }}  }
class C{  @SuppressWarnings("rawtypes") public XPathFilter2ParameterSpec(List xPathList){  if (xPathList == null) {    throw new NullPointerException("xPathList cannot be null");  }  List<?> xPathListCopy=new ArrayList<>((List<?>)xPathList);  if (xPathListCopy.isEmpty()) {    throw new IllegalArgumentException("xPathList cannot be empty");  }  int size=xPathListCopy.size();  for (int i=0; i < size; i++) {    if (!(xPathListCopy.get(i) instanceof XPathType)) {      throw new ClassCastException("xPathList[" + i + "] is not a valid type");    }  }  @SuppressWarnings("unchecked") List<XPathType> temp=(List<XPathType>)xPathListCopy;  this.xPathList=Collections.unmodifiableList(temp);}  }
class C{  public static boolean tryValidate(String uri,boolean useStrictValidation){  return tryValidate(uri,useStrictValidation ? STRICT_URI : LOOSE_URI);}  }
class C{  public NATURAL_LEFT_OUTER_JOIN NATURAL_LEFT_OUTER_JOIN(String tableToJoin){  return new NATURAL_LEFT_OUTER_JOIN(this,tableToJoin);}  }
class C{  public FileInputStream OpenInputfile(String filePath){  FileInputStream fileTarget=null;  try {    fileTarget=new FileInputStream(filePath);  } catch (  FileNotFoundException e) {    System.out.println("Can't find file ");    return null;  }  return fileTarget;}  }
class C{  @Override protected Integer reduce(Integer hashcode1,Integer hashcode2){  if (hashcode1 == null) {    return hashcode2;  }  if (hashcode2 == null) {    return hashcode1;  }  return hashcode1 + hashcode2;}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  public ZyGraphSearchSettings(final GraphSettingsConfigItem type){  Preconditions.checkNotNull(type,"IE00873: Type argument can't be null");  m_type=type;}  }
class C{  @Override public int hashCode(){  return isPresent ? Integer.hashCode(value) : 0;}  }
class C{  public DoubleArrayDataRow(double[] data){  this.data=data;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Iterator<XAtom> iterator(){  return atoms.iterator();}  }
class C{  public RESTServiceModule(TokenSessionMap tokenSessionMap){  this.tokenSessionMap=tokenSessionMap;}  }
class C{  public void ensureCapacity(int minCapacity){  if (minCapacity > 0) {    ensureCapacityInternal(minCapacity);  }}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer execStateId,Principal principal){  RestWrapper restWrapper=null;  try {    execStatusDAO.delete(execStateId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with ID:" + execStateId + " deleted from ExecStatus by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public boolean isAuthenticated(){  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();  if (authentication != null) {    Object principal=authentication.getPrincipal();    return (principal instanceof String) == false;  }  return false;}  }
class C{  public void propagateMouseEventsToParent(){  this.addEventHandler(MouseEvent.ANY,null);}  }
class C{  public Call(String functionName,Class<?> returnType,String[] variableNames,Class<?>[] variableTypes){  super(returnType,variableTypes);  this.functionName=functionName;  this.variableNames=variableNames;  this.variableTypes=variableTypes;}  }
class C{  @Deprecated public static SocketCreator createNonDefaultInstance(final boolean useSSL,final boolean needClientAuth,final String protocols,final String ciphers,final Properties gfsecurityProps){  SSLConfig sslConfig=SSLConfigurationFactory.getSSLConfigForComponent(useSSL,needClientAuth,protocols,ciphers,gfsecurityProps,null);  return new SocketCreator(sslConfig);}  }
class C{  public Clustering<Model> run(){  DBIDs ids=npred.getIDs();  ParallelExecutor.run(ids,this);  FiniteProgress pprog=LOG.isVerbose() ? new FiniteProgress("Building final result",ids.size(),LOG) : null;  ModifiableDBIDs[] clusters=new ModifiableDBIDs[nextclus];  ModifiableDBIDs noise=DBIDUtil.newArray();  for (DBIDIter it=ids.iter(); it.valid(); it.advance()) {    Assignment cids=clusterids.get(it);    if (cids == null) {      noise.add(it);      LOG.incrementProcessed(pprog);      continue;    }    if (cids instanceof MultiBorder) {      cids=((MultiBorder)cids).getCore();    } else     if (cids instanceof Border) {      cids=((Border)cids).core;    }    assert (cids instanceof Core);    Core co=(Core)cids;    while (cores[co.num].num != co.num) {      co=cores[co.num=cores[co.num].num];    }    ModifiableDBIDs clu=clusters[co.num];    if (clu == null) {      clu=clusters[co.num]=DBIDUtil.newArray();    }    clu.add(it);    LOG.incrementProcessed(pprog);  }  LOG.ensureCompleted(pprog);  clusterids.destroy();  Clustering<Model> result=new Clustering<>("DBSCAN Clustering","dbscan-clustering");  for (int i=0; i < clusters.length; i++) {    if (clusters[i] != null) {      result.addToplevelCluster(new Cluster<Model>(clusters[i],ClusterModel.CLUSTER));    }  }  if (noise.size() > 0) {    result.addToplevelCluster(new Cluster<Model>(noise,true,ClusterModel.CLUSTER));  }  return result;}  }
class C{  public IllegalAddressException(){}  }
class C{  public MenuEvent(Object source){  super(source);}  }
class C{  public void addJob(JobDetail jobDetail,boolean replace) throws SchedulerException {  addJob(jobDetail,replace,false);}  }
class C{  private void startThreads(long timeout){synchronized (fsm_) {    if (timer_ == null) {      stateHandler_.activate();      timer_=new PooledAlarmTimer(timeout);      timer_.addAlarmTimerListener(this);      submitTimer(timer_);    }  }}  }
class C{  public EpsilonProgressContinuation(EpsilonBoxEvolutionaryAlgorithm algorithm,int windowSize,int maxWindowSize,double populationRatio,int minimumPopulationSize,int maximumPopulationSize,Selection selection,Variation variation){  super(algorithm,windowSize,maxWindowSize,populationRatio,minimumPopulationSize,maximumPopulationSize,selection,variation);}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  public static void lArraySet(long[] a,int i,long v){  try {    a[i]=v;  } catch (  Throwable t) {    a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)]=v;  }}  }
class C{  protected void imageImpl(PImage image,float x1,float y1,float x2,float y2,int u1,int v1,int u2,int v2){  boolean savedStroke=stroke;  boolean savedFill=fill;  int savedTextureMode=textureMode;  stroke=false;  fill=true;  textureMode=IMAGE;  float savedFillR=fillR;  float savedFillG=fillG;  float savedFillB=fillB;  float savedFillA=fillA;  if (tint) {    fillR=tintR;    fillG=tintG;    fillB=tintB;    fillA=tintA;  } else {    fillR=1;    fillG=1;    fillB=1;    fillA=1;  }  beginShape(QUADS);  texture(image);  vertex(x1,y1,u1,v1);  vertex(x1,y2,u1,v2);  vertex(x2,y2,u2,v2);  vertex(x2,y1,u2,v1);  endShape();  stroke=savedStroke;  fill=savedFill;  textureMode=savedTextureMode;  fillR=savedFillR;  fillG=savedFillG;  fillB=savedFillB;  fillA=savedFillA;}  }
class C{  public static Class sqlTypeToClass(int sqlType,String className){  if ((sqlType == Types.BOOLEAN) || (sqlType == Types.BIT)) {    return Boolean.class;  }  if ((sqlType == Types.CHAR) || (sqlType == Types.VARCHAR) || (sqlType == Types.LONGVARCHAR)) {    return String.class;  }  if ((sqlType == Types.CHAR) || (sqlType == Types.VARCHAR)) {    return String.class;  }  if ((sqlType == Types.DOUBLE) || (sqlType == Types.FLOAT)) {    return Double.class;  }  if (sqlType == Types.REAL) {    return Float.class;  }  if (sqlType == Types.INTEGER) {    return Integer.class;  }  if (sqlType == Types.BIGINT) {    return Long.class;  }  if (sqlType == Types.TINYINT) {    return Byte.class;  }  if (sqlType == Types.SMALLINT) {    return Short.class;  }  if ((sqlType == Types.NUMERIC) || (sqlType == Types.DECIMAL)) {    return BigDecimal.class;  }  if ((sqlType == Types.BINARY) || (sqlType == Types.VARBINARY) || (sqlType == Types.LONGVARBINARY)) {    return byte[].class;  }  if (sqlType == Types.DATE) {    return java.sql.Date.class;  }  if (sqlType == Types.TIME) {    return java.sql.Time.class;  }  if (sqlType == Types.TIMESTAMP) {    return java.sql.Timestamp.class;  }  if (sqlType == Types.CLOB) {    return java.sql.Clob.class;  }  if (sqlType == Types.BLOB) {    return java.sql.Blob.class;  }  if (sqlType == Types.ARRAY) {    return java.sql.Array.class;  }  if (sqlType == Types.STRUCT) {    return java.sql.Struct.class;  }  if (sqlType == Types.REF) {    return java.sql.Ref.class;  }  if (sqlType == Types.DATALINK) {    return java.net.URL.class;  }  if ((sqlType == Types.JAVA_OBJECT) || (sqlType == Types.DISTINCT)) {    if (className == null) {      throw new IllegalArgumentException("No class supplied for sql type " + sqlType);    }    try {      ClassLoader cl=Thread.currentThread().getContextClassLoader();      return Class.forName(className,true,cl);    } catch (    ClassNotFoundException e) {      throw new IllegalArgumentException("Cannot load class for sql type " + sqlType + " and class "+ className);    }  }  throw new IllegalArgumentException("Cannot map java.sql.Types type " + sqlType);}  }
class C{  public void insert(NodeDescriptor parent,int index,List<Node> children){  int initialCount=parent.getChildren().size();  parent.addChildren(index,wrap(children));  if (initialCount != parent.getChildren().size()) {    List<Node> addedChildren=new ArrayList<>();    List<NodeDescriptor> currentChildren=parent.getChildren();    if (isSorted()) {      int currentChildrenSize=currentChildren.size();      for (int i=0; i < currentChildrenSize; i++) {        int childrenSize=children.size();        for (int j=0; j < childrenSize; j++) {          Node currentData=currentChildren.get(i).getNode();          Node child=children.get(j);          if (child == currentData) {            addedChildren.add(child);            break;          }        }      }    } else {      int i=index;      int childrenSize=children.size();      for (int j=0; j < childrenSize; j++) {        if (currentChildren.get(i) == children.get(j)) {          addedChildren.add(children.get(j));          i++;        }      }    }    if (addedChildren.size() != 0) {      fireEvent(new StoreAddEvent(index,addedChildren));    }  }}  }
class C{  public void java_lang_SecurityManager_currentLoadedClass0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  public boolean isDragEnabled(){  return mDragEnabled;}  }
class C{  public boolean isFile(){  return getBestPath().isFile();}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String batchSizeTipText(){  return "Batch size option is not used in LogitBoost";}  }
class C{  @After public void tearDown(){  value=null;}  }
class C{  public Bundler putInt(String key,int value){  bundle.putInt(key,value);  return this;}  }
class C{  public int intersectSphere(float x,float y,float z,float r){  boolean inside=true;  float dist;  dist=nxX * x + nxY * y + nxZ * z + nxW;  if (dist >= -r) {    inside&=dist >= r;    dist=pxX * x + pxY * y + pxZ * z + pxW;    if (dist >= -r) {      inside&=dist >= r;      dist=nyX * x + nyY * y + nyZ * z + nyW;      if (dist >= -r) {        inside&=dist >= r;        dist=pyX * x + pyY * y + pyZ * z + pyW;        if (dist >= -r) {          inside&=dist >= r;          dist=nzX * x + nzY * y + nzZ * z + nzW;          if (dist >= -r) {            inside&=dist >= r;            dist=pzX * x + pzY * y + pzZ * z + pzW;            if (dist >= -r) {              inside&=dist >= r;              return inside ? INSIDE : INTERSECT;            }          }        }      }    }  }  return OUTSIDE;}  }
class C{  private void flushBuffer() throws IOException {  if (count > 0) {    out.write(buf,0,count);    count=0;  }}  }
class C{  protected synchronized void majorRequirementChange(ChildState cs,float delta){  if (estimatedMajorSpan == false) {    majorSpan+=delta;  }  majorChanged=true;}  }
class C{  public LogFileTailer(File file){  this.logfile=file;}  }
class C{  public EntityEvent(@NamedArg("eventType") EventType<? extends Event> eventType,Entity triggerEntity){  this(eventType,triggerEntity,triggerEntity);}  }
class C{  public PapeMessage(ParameterList params){  setParameters(params);  if (DEBUG)   _log.debug("Created PapeMessage from parameter list:\n" + params);}  }
class C{  @Override public Event createEvent(Resource resource,String name,String description,String category,Date date){  return null;}  }
class C{  private void limitNodes(MutableTree tree,double limit){  for (int i=0; i < tree.getInternalNodeCount(); i++) {    final NodeRef n=tree.getInternalNode(i);    if (tree.getNodeHeight(n) > limit) {      tree.setNodeHeight(n,limit);    }  }  MutableTree.Utils.correctHeightsForTips(tree);}  }
class C{  public GOCDataBuilder withElementName(final String smElementNamec){  this.smElementNamec=smElementNamec;  return this;}  }
class C{  public void transpose(){}  }
class C{  private URL makeUri(String... id) throws Exception {  String uri=base + String.format(uriFormat,id);  boolean first=true;  for (  String param : params) {    uri+=(first ? "?" : "&") + param;    first=false;  }  System.err.println(uri);  return new URL(uri);}  }
class C{  public static int binarySearch(float[] array,int startIndex,int endIndex,float value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int intBits=Float.floatToIntBits(value);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (lessThan(array[mid],value)) {      low=mid + 1;    } else     if (intBits == Float.floatToIntBits(array[mid])) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (lessThan(value,array[mid]) ? 1 : 2);}  }
class C{  public String toString(){  StringBuilder buff=new StringBuilder();  buff.append(padWithBlanks("",10)).append(" ");  for (  String dsName : dsNames) {    buff.append(padWithBlanks(dsName,18));  }  buff.append("\n \n");  for (int i=0; i < timestamps.length; i++) {    buff.append(padWithBlanks(Long.toString(timestamps[i]),10));    buff.append(":");    for (int j=0; j < dsNames.length; j++) {      double value=values[j][i];      String valueStr=Double.isNaN(value) ? "nan" : Util.formatDouble(value);      buff.append(padWithBlanks(valueStr,18));    }    buff.append("\n");  }  return buff.toString();}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof java.lang.String)) {    throw new EncoderException("Parameter supplied to RefinedSoundex encode is not of type java.lang.String");  }  return soundex((String)pObject);}  }
class C{  public static void validateNatureForOpenPortFeature(String nature,Application application) throws CheckException {  if (nature == null || nature.trim().length() == 0) {    String messageTranslated=messageSource.getMessage("port.nature",null,Locale.ENGLISH);    throw new CheckException(messageTranslated + " : " + nature);  }  if (!nature.equalsIgnoreCase("web") && !nature.equalsIgnoreCase("other")) {    String messageTranslated=messageSource.getMessage("port.nature",null,Locale.ENGLISH);    throw new CheckException(messageTranslated + " : " + nature);  }}  }
class C{  @VisibleForTesting void invokeSubscriberMethod(Object event) throws InvocationTargetException {  try {    method.invoke(target,checkNotNull(event));  } catch (  IllegalArgumentException e) {    throw new Error("Method rejected target/argument: " + event,e);  }catch (  IllegalAccessException e) {    throw new Error("Method became inaccessible: " + event,e);  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof Error) {      throw (Error)e.getCause();    }    throw e;  }}  }
class C{  private void bindRcon(){  if (!config.getBoolean(Key.RCON_ENABLED)) {    return;  }  SocketAddress address=getBindAddress(Key.RCON_PORT);  rconServer=new RconServer(this,config.getString(Key.RCON_PASSWORD));  logger.info("Binding rcon to address: " + address + "...");  ChannelFuture future=rconServer.bind(address);  Channel channel=future.awaitUninterruptibly().channel();  if (!channel.isActive()) {    logger.warning("Failed to bind rcon. Address already in use?");  }}  }
class C{  public OptionSet clearUriQuery(){  getUriQuery().clear();  return this;}  }
class C{  public boolean isArrayBounds(){  return trapCode == RuntimeEntrypoints.TRAP_ARRAY_BOUNDS;}  }
class C{  public InputStream openClassfile(String classname){  try {    URLConnection con=openClassfile0(classname);    if (con != null)     return con.getInputStream();  } catch (  IOException e) {  }  return null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TFIELD__CONST:    return const_ != CONST_EDEFAULT;case TypesPackage.TFIELD__HAS_EXPRESSION:  return hasExpression != HAS_EXPRESSION_EDEFAULT;case TypesPackage.TFIELD__TYPE_REF:return typeRef != null;}return super.eIsSet(featureID);}  }
class C{  public static String filterUselessZeros(final String integer){  logger.debug("(filterUselessZeros)(integer:" + integer + ")|start");  final String result=new Integer(Integer.parseInt(integer)).toString();  logger.debug("(filterUselessZeros) return:" + result + "|end");  return result;}  }
class C{  public boolean isEndpoint(Geometry linearGeom){  LineString lineComp=(LineString)linearGeom.getGeometryN(componentIndex);  int nseg=lineComp.getNumPoints() - 1;  return segmentIndex >= nseg || (segmentIndex == nseg && segmentFraction >= 1.0);}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {  try {    if (null != getStylesheetRoot()) {      if (0 == m_stylesheetLevel)       getStylesheetRoot().recompose();    } else     throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_STYLESHEETROOT,null));    XSLTElementProcessor elemProcessor=getCurrentProcessor();    if (null != elemProcessor)     elemProcessor.startNonText(this);    m_stylesheetLevel--;    popSpaceHandling();    m_parsingComplete=(m_stylesheetLevel < 0);  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public DellSCDriverException(String message){  super(message);}  }
class C{  public boolean hasSource(){  return getSource() != null;}  }
class C{  public void onGetIncludedService(String address,int srvcType,int srvcInstId,ParcelUuid srvcUuid,int inclSrvcType,int inclSrvcInstId,ParcelUuid inclSrvcUuid){  if (DBG)   Log.d(TAG,"onGetIncludedService() - Device=" + address + " UUID="+ srvcUuid+ " Included="+ inclSrvcUuid);  if (!address.equals(mDevice.getAddress())) {    return;  }  BluetoothGattService service=getService(mDevice,srvcUuid.getUuid(),srvcInstId,srvcType);  BluetoothGattService includedService=getService(mDevice,inclSrvcUuid.getUuid(),inclSrvcInstId,inclSrvcType);  if (service != null && includedService != null) {    service.addIncludedService(includedService);  }}  }
class C{  public boolean isDiscountPrinted(){  Object oo=get_Value(COLUMNNAME_IsDiscountPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void httpRequest(HttpRequestEvent e) throws IOException {  String s=e.getRequest();  System.out.println(s);  Document d=new Document(s);  d.addElement(new HeaderElement(1,s));  try {    DcwRecordFile f=new DcwRecordFile(s);    d.addElement(new HeaderElement(3,"Table Description Schema"));    d.addElement(new StringElement("<table border>"));    DcwColumnInfo dci[]=f.getColumnInfo();    TableRowElement t=new TableRowElement();    d.addElement(t);    t.addElement(new TableHeaderElement("Column Name"));    t.addElement(new TableHeaderElement("Field Type"));    t.addElement(new TableHeaderElement("Number Of Elements"));    t.addElement(new TableHeaderElement("Key Type"));    t.addElement(new TableHeaderElement("Column Description"));    t.addElement(new TableHeaderElement("Value Description Table"));    t.addElement(new TableHeaderElement("Thematic Index Name"));    t.addElement(new TableHeaderElement("Narrative Table"));    TableRowElement rw=new TableRowElement();    for (int i=0; i < dci.length; i++) {      TableRowElement row=new TableRowElement();      d.addElement(row);      row.addElement(dci[i].getColumnName());      char munge[]=dci[i].getColumnName().toCharArray();      for (int j=0; j < munge.length; j++)       if (munge[j] == '_')       munge[j]=' ';      rw.addElement(new TableHeaderElement(new String(munge)));      row.addElement(new Character(dci[i].getFieldType()).toString());      row.addElement(Integer.toString(dci[i].getNumberOfElements()));      row.addElement(new Character(dci[i].getKeyType()).toString());      row.addElement(dci[i].getColumnDescription());      row.addElement(dci[i].getValueDescriptionTable());      row.addElement(dci[i].getThematicIndexName());      row.addElement(dci[i].getNarrativeTable());    }    d.addElement(new StringElement("</table>"));    d.addElement(new HeaderElement(3,"Table Data"));    d.addElement(new StringElement("<table border>"));    d.addElement(rw);    List colhdr;    while ((colhdr=f.parseRow()) != null) {      d.addElement(listAsTableRow(colhdr));    }    d.addElement(new StringElement("</table>"));    f.close();  } catch (  com.bbn.openmap.io.FormatException f) {    d.addElement(new StringElement(f.getMessage()));  }  d.generate(e.getWriter());}  }
class C{  public static void assertFalse(boolean condition){  Assert.assertFalse(condition);}  }
class C{  public void sendMessage(SIPMessage messageToSend) throws IOException {  try {    SIPRequest transactionRequest;    transactionRequest=(SIPRequest)messageToSend;    Via topVia=(Via)transactionRequest.getViaHeaders().getFirst();    try {      topVia.setBranch(getBranch());    } catch (    java.text.ParseException ex) {    }    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("Sending Message " + messageToSend);      sipStack.getStackLogger().logDebug("TransactionState " + this.getState());    }    if (TransactionState.PROCEEDING == getState() || TransactionState.CALLING == getState()) {      if (transactionRequest.getMethod().equals(Request.ACK)) {        if (isReliable()) {          this.setState(TransactionState.TERMINATED);        } else {          this.setState(TransactionState.COMPLETED);        }        super.sendMessage(transactionRequest);        return;      }    }    try {      lastRequest=transactionRequest;      if (getState() == null) {        setOriginalRequest(transactionRequest);        if (transactionRequest.getMethod().equals(Request.INVITE)) {          this.setState(TransactionState.CALLING);        } else         if (transactionRequest.getMethod().equals(Request.ACK)) {          this.setState(TransactionState.TERMINATED);        } else {          this.setState(TransactionState.TRYING);        }        if (!isReliable()) {          enableRetransmissionTimer();        }        if (isInviteTransaction()) {          enableTimeoutTimer(TIMER_B);        } else {          enableTimeoutTimer(TIMER_F);        }      }      super.sendMessage(transactionRequest);    } catch (    IOException e) {      this.setState(TransactionState.TERMINATED);      throw e;    }  }  finally {    this.isMapped=true;    this.startTransactionTimer();  }}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:20.749 -0500",hash_original_method="E97D5EED29ED8377C999990C20A12343",hash_generated_method="883E33622B92FE2F9F88EA2CD46632D6") public SparseArray(){  this(10);}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (o instanceof X500Principal) {    X500Principal that=(X500Principal)o;    try {      X500Name thatX500Name=new X500Name(that.getName());      return thisX500Name.equals(thatX500Name);    } catch (    Exception e) {      return false;    }  } else   if (o instanceof Principal) {    return o.equals(thisX500Name);  }  return false;}  }
class C{  private void updateMeta(){  meta=new BundleMeta();  BundleMeta origmeta=source.getMeta();  for (int i=0; i < origmeta.size(); i++) {    SimpleTypeInformation<?> type=origmeta.get(i);    if (column < 0) {      if (TypeUtil.NUMBER_VECTOR_VARIABLE_LENGTH.isAssignableFromType(type)) {        if (type instanceof VectorFieldTypeInformation) {          @SuppressWarnings("unchecked") final VectorFieldTypeInformation<V> castType=(VectorFieldTypeInformation<V>)type;          if (dim != -1 && castType.mindim() > dim) {            throw new AbortException("Would filter all vectors: minimum dimensionality " + castType.mindim() + " > desired dimensionality "+ dim);          }          if (dim != -1 && castType.maxdim() < dim) {            throw new AbortException("Would filter all vectors: maximum dimensionality " + castType.maxdim() + " < desired dimensionality "+ dim);          }          if (dim == -1) {            dim=castType.mindim();          }          if (castType.mindim() == castType.maxdim()) {            meta.add(castType);            column=i;            continue;          }        }        @SuppressWarnings("unchecked") final VectorTypeInformation<V> castType=(VectorTypeInformation<V>)type;        if (dim != -1) {          meta.add(new VectorFieldTypeInformation<>(FilterUtil.guessFactory(castType),dim,dim,castType.getSerializer()));        } else {          LOG.warning("No dimensionality yet for column " + i);          meta.add(castType);        }        column=i;        continue;      }    }    meta.add(type);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int f=getInt(stack);  String ass=getString(stack);  stack.getUIMgrSafe().getVideoFrame().setVideoOffsetY(f,VideoFrame.getAspectRatioCode(ass));  return null;}  }
class C{  @Inline(value=Inline.When.ArgumentsAreConstant,arguments={1,3,4}) public static void arraycopy(long[] src,int srcIdx,long[] dst,int dstIdx,int len){  if (srcIdx >= 0 && dstIdx >= 0 && len >= 0 && (srcIdx + len) >= 0 && (srcIdx + len) <= src.length && (dstIdx + len) >= 0 && (dstIdx + len) <= dst.length) {    if ((src != dst || srcIdx > dstIdx) && LONG_BULK_COPY_SUPPORTED) {      if (NEEDS_LONG_ASTORE_BARRIER || NEEDS_LONG_ALOAD_BARRIER) {        Offset srcOffset=Offset.fromIntZeroExtend(srcIdx << LOG_BYTES_IN_LONG);        Offset dstOffset=Offset.fromIntZeroExtend(dstIdx << LOG_BYTES_IN_LONG);        Barriers.longBulkCopy(src,srcOffset,dst,dstOffset,len << LOG_BYTES_IN_LONG);      } else {        Memory.arraycopy64Bit(src,srcIdx,dst,dstIdx,len);      }    } else {      arraycopyPiecemeal(src,srcIdx,dst,dstIdx,len);    }  } else {    failWithIndexOutOfBoundsException();  }}  }
class C{  private IndexedImage(int width,int height,int[] palette,int[] rgb){  super(null);  this.width=width;  this.height=height;  this.palette=palette;  imageDataByte=new byte[width * height];  int ilen=imageDataByte.length;  for (int iter=0; iter < ilen; iter++) {    imageDataByte[iter]=(byte)paletteOffset(rgb[iter]);  }  initOpaque();}  }
class C{  public void testExternalDTDSubset() throws Exception {  DocumentType expected=new DefaultDocumentType("another-greeting",null,DTD_SYSTEM_ID);  expected.setExternalDeclarations(getExternalDeclarations());  assertSameDocumentType(expected,readDocument(XML_EXTERNAL_FILE,false,true).getDocType());}  }
class C{  public boolean applyOptions() throws IOException {  if (!isDirty())   return false;  StatusBarSettings.CONNECTION_QUALITY_DISPLAY_ENABLED.setValue(CHECK_BOX.isSelected());  GUIMediator.instance().getStatusLine().refresh();  return false;}  }
class C{  private MInOut createDropShipment(){  if (isSOTrx() || !isDropShip() || getC_Order_ID() == 0)   return null;  int C_DocTypeTarget_ID=0;  MDocType[] shipmentTypes=MDocType.getOfDocBaseType(getCtx(),MDocType.DOCBASETYPE_MaterialDelivery);  for (int i=0; i < shipmentTypes.length; i++) {    if (shipmentTypes[i].isSOTrx() && (C_DocTypeTarget_ID == 0 || shipmentTypes[i].isDefault()))     C_DocTypeTarget_ID=shipmentTypes[i].getC_DocType_ID();  }  MInOut dropShipment=copyFrom(this,getMovementDate(),getDateAcct(),C_DocTypeTarget_ID,!isSOTrx(),false,get_TrxName(),true);  int linkedOrderID=new MOrder(getCtx(),getC_Order_ID(),get_TrxName()).getLink_Order_ID();  if (linkedOrderID != 0) {    dropShipment.setC_Order_ID(linkedOrderID);    int invID=new MOrder(getCtx(),linkedOrderID,get_TrxName()).getC_Invoice_ID();    if (invID != 0)     dropShipment.setC_Invoice_ID(invID);  } else   return null;  dropShipment.setC_BPartner_ID(getDropShip_BPartner_ID());  dropShipment.setC_BPartner_Location_ID(getDropShip_Location_ID());  dropShipment.setAD_User_ID(getDropShip_User_ID());  dropShipment.setIsDropShip(false);  dropShipment.setDropShip_BPartner_ID(0);  dropShipment.setDropShip_Location_ID(0);  dropShipment.setDropShip_User_ID(0);  dropShipment.setMovementType(MOVEMENTTYPE_CustomerShipment);  dropShipment.setSalesRep_ID(getSalesRep_ID());  dropShipment.save(get_TrxName());  MInOutLine[] lines=dropShipment.getLines(true);  for (int i=0; i < lines.length; i++) {    MInOutLine dropLine=lines[i];    MOrderLine ol=new MOrderLine(getCtx(),dropLine.getC_OrderLine_ID(),null);    if (ol.getC_OrderLine_ID() != 0) {      dropLine.setC_OrderLine_ID(ol.getLink_OrderLine_ID());      dropLine.saveEx();    }  }  log.fine(dropShipment.toString());  dropShipment.setDocAction(DocAction.ACTION_Complete);  dropShipment.processIt(DocAction.ACTION_Complete);  dropShipment.saveEx();  return dropShipment;}  }
class C{  protected boolean isLayoutValid(int axis){  if (axis == majorAxis) {    return majorAllocValid;  } else {    return minorAllocValid;  }}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  public String seedTipText(){  return "The random number seed to be used.";}  }
class C{  public MiniDrawer withIncludeSecondaryDrawerItems(boolean includeSecondaryDrawerItems){  this.mIncludeSecondaryDrawerItems=includeSecondaryDrawerItems;  return this;}  }
class C{  public void stateChanged(ChangeEvent e){  if (loginTabPane.getSelectedIndex() == 2)   return;  if (!(String.valueOf(passwordField.getPassword()).equals(m_pwd) && userTextField.getText().equals(m_user)))   m_connectionOK=false;  if (m_connectionOK)   statusBar.setStatusLine(txt_LoggedIn); else {    statusBar.setStatusLine(txt_NotConnected,true);    loginTabPane.setSelectedIndex(0);  }  confirmPanel.getOKButton().requestFocus();}  }
class C{  public void initialise(int k) throws Exception {  initialise(k,epsilon);}  }
class C{  private DocumentLoaderBasic(){}  }
class C{  @Override public int updateIndex(BloomFilter<E> newBloomFilter,InsDelUpdateStatistics stat){  int id=newBloomFilter.getID();  BFINode<E> node=this.idMap.get(id);  if (node == null) {    System.err.println("ERROR: Cound not find node with ID " + id);    return -1;  }  updateValueToTheRoot(node,newBloomFilter,stat);  return 0;}  }
class C{  public ColumnVector multiply(final double scalar){  return this.transform(null);}  }
class C{  private Spannable highlightHashtags(Spannable text){  if (text == null) {    return null;  }  final Matcher matcher=PATTERN_HASHTAGS.matcher(text);  while (matcher.find()) {    final int start=matcher.start(1);    final int end=matcher.end(1);    text.setSpan(new ForegroundColorSpan(mHighlightColor),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);    text.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  }  return text;}  }
class C{  protected int readULong(final int position) throws AuthenticationException {  return ZapNTLMEngineImpl.readULong(messageContents,position);}  }
class C{  private static boolean removeDuplicateClassRoots(@NotNull Sdk sdk,@NotNull SdkModificator modificator){  final List<VirtualFile> sourceRoots=Arrays.asList(sdk.getRootProvider().getFiles(OrderRootType.CLASSES));  final LinkedHashSet<VirtualFile> uniqueRoots=new LinkedHashSet<VirtualFile>(sourceRoots);  if (uniqueRoots.size() != sourceRoots.size()) {    modificator.removeRoots(OrderRootType.CLASSES);    for (    VirtualFile root : uniqueRoots) {      modificator.addRoot(root,OrderRootType.CLASSES);    }    return true;  }  return false;}  }
class C{  @Override public void updateNotification(String singerName,String songName,int smallArt,Bitmap bigArt){  if (mService != null)   mService.updateNotification(singerName,songName,smallArt,bigArt);}  }
class C{  public void addError(String message){  addError(message,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.842 -0500",hash_original_method="604DE186E2AE6B899B90A7B635A83D11",hash_generated_method="2CB7CD056B0E91053905099F59714CD2") public SubscriptionStateParser(String subscriptionState){  super(subscriptionState);}  }
class C{  private StringBuffer printNode(MTreeNode node,Properties ctx){  StringBuffer sb=new StringBuffer();  if (!node.isSummary()) {    String cssClassName="";    String servletName="";    if (node.isWindow()) {      cssClassName="menuWindow";      servletName="WWindow";    } else     if (node.isForm()) {      cssClassName="menuWindow";      servletName="WForm";    } else     if (node.isBrowse()) {      cssClassName="menuWindow";      servletName="WBrowse";    } else     if (node.isReport()) {      cssClassName="menuReport";      servletName="WProcess";    } else     if (node.isProcess()) {      cssClassName="menuProcess";      servletName="WProcess";    } else     if (node.isWorkFlow()) {      cssClassName="menuWorkflow";      servletName="WWorkflow";    } else     if (node.isTask()) {      cssClassName="menuProcess";      servletName="WTask";    } else     servletName="WError";    String name=node.getName().replace('\'',' ').replace('"',' ');    String description=node.getDescription().replace('\'',' ').replace('"',' ');    sb.append("<li class=\"" + cssClassName + "\" id=\""+ node.getNode_ID()+ "\"><a href=\"");    boolean standardURL=true;    if (node.isForm()) {      MForm form=new MForm(ctx,node.getNode_ID(),null);      if (form.getJSPURL() != null && form.getJSPURL().length() > 0) {        sb.append(form.getJSPURL());        standardURL=false;      }    }    if (standardURL) {      sb.append(WebEnv.getBaseDirectory(servletName)).append("?AD_Menu_ID=").append(node.getNode_ID());    }    sb.append("\" title=\"" + description + "\" onClick=\"showLoadingWindow('"+ WebEnv.getBaseDirectory("")+ "')\">").append(name).append("</a></li>\n");  } else {    String name=node.getName().replace('\'',' ').replace('"',' ');    sb.append("\n<li class=\"menuSummary\"" + " id=\"" + node.getNode_ID() + "\" onClick=\"changeMenu(event);\">").append(name).append("\n");  }  return sb;}  }
class C{  private static int try_warning(int count,String s,String e){  print(">    " + s + "*** warning ***\n>      Message: "+ e+ "\n");  return ++count;}  }
class C{  public String compressOutputTipText(){  return "Optional compression of the output data";}  }
class C{  public static Table stripNonComparables(Table table){  Table newTable=new Table(table);  newTable.setCreateTime(0);  newTable.setLastAccessTime(0);  return newTable;}  }
class C{  public ResultSet executeQuery() throws SQLException {  if (executeInternal()) {    return executionResult.getResultSet();  }  return MariaSelectResultSet.EMPTY;}  }
class C{  public StyledTextFieldUI(Style style){  this.style=style;}  }
class C{  private static void conditionalCopy(final List<NV> anns,final Properties queryHints,final String name){  if (queryHints == null)   return;  final Object val=queryHints.getProperty(name);  if (val != null) {    anns.add(new NV(name,val));  }}  }
class C{  public final int readInt() throws IOException {  int ch1=in.read();  int ch2=in.read();  int ch3=in.read();  int ch4=in.read();  if ((ch1 | ch2 | ch3| ch4) < 0)   throw new EOFException();  return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8)+ (ch4 << 0));}  }
class C{  private void xsampleNextElements(BooleanArrayList acceptList){  int length=acceptList.size();  boolean[] accept=acceptList.elements();  for (int i=0; i < length; i++) {    if (n == 0) {      accept[i]=false;      continue;    }    if (skip-- > 0) {      accept[i]=false;      continue;    }    n--;    if (bufferPosition < buffer.length - 1) {      skip=buffer[bufferPosition + 1] - buffer[bufferPosition++];      --skip;    } else {      fetchNextBlock();    }    accept[i]=true;  }}  }
class C{  public static boolean addSawmillRecipe(ItemStack aInput1,ItemStack aOutput1,ItemStack aOutput2){  aOutput1=GT_OreDictUnificator.get(true,aOutput1);  aOutput2=GT_OreDictUnificator.get(true,aOutput2);  if (aInput1 == null || aOutput1 == null)   return false;  if (!GregTech_API.sRecipeFile.get(ConfigCategories.Machines.sawmill,aInput1,true))   return false;  try {    ThermalExpansion.addSawmillRecipe(1600,aInput1,aOutput1,aOutput2,100);  } catch (  Throwable e) {  }  return true;}  }
class C{  public PDFPage(int pageNumber,RectF bbox,int rotation,Cache cache){  this.pageNumber=pageNumber;  this.cache=cache;  if (bbox == null) {    bbox=new RectF(0,0,1,1);  }  if (rotation < 0) {    rotation+=360;  }  this.rotation=rotation;  if (rotation == 90 || rotation == 270) {    bbox=new RectF(bbox.left,bbox.top,bbox.left + bbox.height(),bbox.top + bbox.width());  }  this.bbox=bbox;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.VERSION_CONSTRAINT__EXCL_LOWER_BOUND:    return exclLowerBound != EXCL_LOWER_BOUND_EDEFAULT;case N4mfPackage.VERSION_CONSTRAINT__LOWER_VERSION:  return lowerVersion != null;case N4mfPackage.VERSION_CONSTRAINT__EXCL_UPPER_BOUND:return exclUpperBound != EXCL_UPPER_BOUND_EDEFAULT;case N4mfPackage.VERSION_CONSTRAINT__UPPER_VERSION:return upperVersion != null;}return super.eIsSet(featureID);}  }
class C{  private AttributeRule(String name,Class c,boolean optional,String description){  this.name=name;  this.c=c;  this.optional=optional;  this.description=description;}  }
class C{  protected void drawDimmedLayer(@NonNull Canvas canvas){  canvas.save();  if (mOvalDimmedLayer) {    canvas.clipPath(mCircularPath,Region.Op.DIFFERENCE);  } else {    canvas.clipRect(mCropViewRect,Region.Op.DIFFERENCE);  }  canvas.drawColor(mDimmedColor);  canvas.restore();  if (mOvalDimmedLayer) {    canvas.drawOval(mCropViewRect,mDimmedStrokePaint);  }}  }
class C{  public synchronized void trimToSize(){  if (elementData.length != elementCount) {    grow(elementCount);  }}  }
class C{  public Node(final BitVector path,final int word){  if (path == null) {    this.path=null;    this.pathLength=0;  } else {    this.path=path.bits();    this.pathLength=path.size();  }  this.word=word;}  }
class C{  private Boolean functionExists(String functionName){  return functionExists(functionName,null);}  }
class C{  private void assertQueueCorrect(){  for (int x=0; x < N; x++) {    for (int y=0; y < N; y++) {      Position p=new Position(x,y);      Occupant o=getOccupant(x,y);      if ((o instanceof Creature) && (!moveQueue.contains(p))) {        throw new Error(String.format("(%d, %d) is missing from moveQueue",x,y));      }    }  }}  }
class C{  private ActionBarBackground fadeBackground(Drawable newDrawable){  fadeBackground(mOldBackground,newDrawable);  return this;}  }
class C{  static boolean isConditionType(TestSynth config,int type){switch (config.getMode()) {case TestSynth.H2:case TestSynth.H2_MEM:    return true;case TestSynth.MYSQL:case TestSynth.HSQLDB:case TestSynth.POSTGRESQL:switch (type) {case Types.INTEGER:case Types.VARCHAR:case Types.DECIMAL:case Types.DATE:case Types.TIME:case Types.TIMESTAMP:case Types.DOUBLE:case Types.BIGINT:case Types.BOOLEAN:case Types.BIT:    return true;case Types.BINARY:case Types.VARBINARY:case Types.BLOB:case Types.CLOB:case Types.LONGVARCHAR:case Types.LONGVARBINARY:  return false;default :throw new AssertionError("type=" + type);}default :throw new AssertionError("type=" + type);}}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE___TRACE_DIRECTIVE_1:    getTraceDirective_1().clear();  getTraceDirective_1().addAll((Collection<? extends TraceDirective_>)newValue);return;case UmplePackage.TRACE___TRACE_CASE_1:getTraceCase_1().clear();getTraceCase_1().addAll((Collection<? extends TraceCase_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static <K,V,M extends SortedMap<K,V>>UnmodifiableTreeMap<K,V> of(M map){  if (map == null) {    throw new IllegalArgumentException("cannot create a UnmodifiableSortedMap for null");  }  return new UnmodifiableTreeMap<>(SortedMapAdapter.adapt(map));}  }
class C{  @Override @SuppressWarnings("unchecked") public Iterator<AbstractNode> postOrderNodeIterator(final boolean dirtyNodesOnly,final boolean nodesOnly){  if (dirtyNodesOnly && !dirty) {    return EmptyIterator.DEFAULT;  }  return new Striterator(postOrderIterator1(dirtyNodesOnly,nodesOnly)).append(new SingleValueIterator(this));}  }
class C{  public void registerPush(Hashtable metaData,boolean noFallback){  if (Preferences.get("push_id",(long)-1) == -1) {    impl.registerPush(metaData,noFallback);  }}  }
class C{  public Element toXml(Document doc,boolean includeTargets){  try {    Element behavior=doc.createElement("behavior");    Element nameNode=doc.createElement("name");    nameNode.setTextContent(StringUtil.makeXmlSafe(getDescription()));    behavior.appendChild(nameNode);    Element homeEdgeNode=doc.createElement("homeEdge");    homeEdgeNode.setTextContent("" + getHomeEdge().getIndex());    behavior.appendChild(homeEdgeNode);    Element forcedWithdrawalNode=doc.createElement("forcedWithdrawal");    forcedWithdrawalNode.setTextContent("" + isForcedWithdrawal());    behavior.appendChild(forcedWithdrawalNode);    Element goHomeNode=doc.createElement("goHome");    goHomeNode.setTextContent("" + shouldGoHome());    behavior.appendChild(goHomeNode);    Element autoFleeNode=doc.createElement("autoFlee");    autoFleeNode.setTextContent("" + shouldAutoFlee());    behavior.appendChild(autoFleeNode);    Element fallShameNode=doc.createElement("fallShameIndex");    fallShameNode.setTextContent("" + getFallShameIndex());    behavior.appendChild(fallShameNode);    Element hyperAggressionNode=doc.createElement("hyperAggressionIndex");    hyperAggressionNode.setTextContent("" + getHyperAggressionIndex());    behavior.appendChild(hyperAggressionNode);    Element selfPreservationNode=doc.createElement("selfPreservationIndex");    selfPreservationNode.setTextContent("" + getSelfPreservationIndex());    behavior.appendChild(selfPreservationNode);    Element herdMentalityNode=doc.createElement("herdMentalityIndex");    herdMentalityNode.setTextContent("" + getHerdMentalityIndex());    behavior.appendChild(herdMentalityNode);    Element braveryNode=doc.createElement("braveryIndex");    braveryNode.setTextContent("" + getBraveryIndex());    behavior.appendChild(braveryNode);    Element targetsNode=doc.createElement("strategicBuildingTargets");    if (includeTargets) {      for (      String t : getStrategicBuildingTargets()) {        Element targetElement=doc.createElement("target");        targetElement.setTextContent(StringUtil.makeXmlSafe(t));        targetsNode.appendChild(targetElement);      }      for (      int id : getPriorityUnitTargets()) {        Element unitElement=doc.createElement("unit");        unitElement.setTextContent(String.valueOf(id));        targetsNode.appendChild(unitElement);      }    }    behavior.appendChild(targetsNode);    return behavior;  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public TurnDatagramPacketFilter(TransportAddress turnServer){  super(turnServer);}  }
class C{  protected void configureFromProperties(InputStream is,String rootDirectory) throws IOException {  Properties props=new Properties();  props.load(is);  props.put(ROOT_DIR_PATH_PROPERTY,rootDirectory);  String oldPrefix=getPropertyPrefix();  setProperties(null,props);  setPropertyPrefix(oldPrefix);}  }
class C{  public static String toString(boolean value){  return String.valueOf(value);}  }
class C{  public boolean isSecureRtpOverMobile(){  return readBoolean(RcsSettingsData.SECURE_RTP_OVER_MOBILE);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public CSearchForSelection(final CGraphSearchField searchField,final NaviNode node){  super("Search for selection");  Preconditions.checkNotNull(searchField,"IE00942: Search field argument can not be null");  Preconditions.checkNotNull(node,"IE00943: Node argument can not be null");  m_searchField=searchField;  m_node=node;}  }
class C{  public Builder addClass(String className,File positiveExamples){  Validator.notNull(className,"'className' cannot be null");  Validator.notNull(positiveExamples,"'positiveExamples' cannot be null");  positiveExamplesByName.put(className,positiveExamples);  return this;}  }
class C{  public final boolean peekOrTrue(){  return (m_index > -1) ? m_values[m_index] : true;}  }
class C{  public boolean isTypeCardCredit(){  return TYPE_CARD_CREDIT;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.REQUIRED_RUNTIME_LIBRARIES__REQUIRED_RUNTIME_LIBRARIES:    getRequiredRuntimeLibraries().clear();  return;}super.eUnset(featureID);}  }
class C{  public void testDivideByZero(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=BigDecimal.valueOf(0L);  try {    aNumber.divide(bNumber);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {    assertEquals("Improper exception message","Division by zero",e.getMessage());  }}  }
class C{  public List<JSONObject> toHarbormaster(){  List<JSONObject> harbormasterData=new ArrayList<JSONObject>();  for (  LintResult result : results) {    harbormasterData.add(result.toHarbormaster());  }  return harbormasterData;}  }
class C{  public String combinationRuleTipText(){  return "The combination rule used.";}  }
class C{  public void mergeResponseFromShard(int shardNumber,ResponseBuilder rb,List<NamedList<Object>> response){  knownShards.set(shardNumber);  if (pivotFacetField == null) {    pivotFacetField=PivotFacetField.createFromListOfNamedLists(shardNumber,rb,null,response);  } else {    pivotFacetField.contributeFromShard(shardNumber,rb,response);  }}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    System.err.println("usage: java edu.illinois.cs.cogcomp.lbj.pos.POSTagPlain <text file>");    System.exit(1);  }  String testingFile=args[0];  POSTagger tagger=new POSTagger();  Parser parser=new PlainToTokenParser(new WordSplitter(new SentenceSplitter(testingFile)));  String sentence="";  for (Token word=(Token)parser.next(); word != null; word=(Token)parser.next()) {    String tag=tagger.discreteValue(word);    sentence+=" (" + tag + " "+ word.form+ ")";    if (word.next == null) {      System.out.println(sentence.substring(1));      sentence="";    }  }}  }
class C{  private void checkRedelivery(){  for (  Job job : jobs) {    job.redeliver();  }}  }
class C{  public static void checkEntity(final DataObject object,final URI id,final boolean idEmbeddedInURL,final boolean checkInactive){  checkEntityNotNull(object,id,idEmbeddedInURL);  if (checkInactive && object.getInactive()) {    if (idEmbeddedInURL) {      throw APIException.notFound.entityInURLIsInactive(id);    } else {      throw APIException.badRequests.entityInRequestIsInactive(id);    }  }}  }
class C{  public double[] computeLocalFromPreviousObservations(int states[][],int col){  int rows=states.length;  double[] localPredictive=new double[rows];  if (rows < k + (k - 1)) {    return localPredictive;  }  average=0;  max=0;  min=0;  int prevVal=0;  int nextVal=0;  for (int p=0; p < k; p++) {    prevVal*=numDiscreteValues;    prevVal+=states[p][col];    nextVal*=numDiscreteValues;    nextVal+=states[k - 1 + p][col];  }  double logTerm=0.0;  for (int r=k; r < rows - (k - 1); r++) {    nextVal-=maxShiftedValue[states[r - 1][col]];    nextVal*=numDiscreteValues;    nextVal+=states[k - 1 + r][col];    logTerm=((double)jointCount[nextVal][prevVal]) / ((double)nextCount[nextVal] * (double)prevCount[prevVal]);    logTerm*=(double)observations;    localPredictive[r]=Math.log(logTerm) / log_base;    average+=localPredictive[r];    if (localPredictive[r] > max) {      max=localPredictive[r];    } else     if (localPredictive[r] < min) {      min=localPredictive[r];    }    prevVal-=maxShiftedValue[states[r - k][col]];    prevVal*=numDiscreteValues;    prevVal+=states[r][col];  }  average=average / (double)(rows - k - (k - 1));  return localPredictive;}  }
class C{  public MultiEpochExponentialModel(String name,Parameter N0Parameter,Parameter growthRateParameter,Parameter transitionTimeParameter,Type units){  super(name);  int numEpoch=growthRateParameter.getDimension();  if (numEpoch != transitionTimeParameter.getDimension() + 1) {    throw new IllegalArgumentException("Invalid parameter dimensions");  }  multiEpochExponential=new MultiEpochExponential(units,numEpoch);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,growthRateParameter.getDimension()));  this.transitionTimeParameter=transitionTimeParameter;  addVariable(transitionTimeParameter);  transitionTimeParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,transitionTimeParameter.getDimension()));  setUnits(units);}  }
class C{  public int incrementSubscriberCount(){  if (isAvailable()) {    return jmdnsSubscriberCount.incrementAndGet();  }  return 0;}  }
class C{  public void sendLogon(boolean resetSeqNum) throws IOException {  prepare(txMessage,Logon);  txMessage.addField(EncryptMethod).setInt(0);  txMessage.addField(HeartBtInt).setInt(config.getHeartBtInt());  if (resetSeqNum)   txMessage.addField(ResetSeqNumFlag).setChar('Y');  send(txMessage);}  }
class C{  private void initBPRMADetails(int C_BPartner_ID){  rmaField.removeActionListener(this);  rmaField.removeAllItems();  KeyNamePair pp=new KeyNamePair(0,"");  rmaField.addItem(pp);  ArrayList<KeyNamePair> list=loadRMAData(C_BPartner_ID);  for (  KeyNamePair knp : list)   rmaField.addItem(knp);  rmaField.setSelectedIndex(0);  rmaField.addActionListener(this);}  }
class C{  public boolean isRecordSet(){  return isRecordSet(metadata);}  }
class C{  public static <A>DecomposableMatchBuilder0<Tuple1<A>> tuple1(MatchesExact<A> a){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.eq(a.t));  return new DecomposableMatchBuilder0<Tuple1<A>>(matchers,new Tuple1FieldExtractor<>());}  }
class C{  @Override public String toString(){  return "N(" + ValueFactory.create(mean) + ","+ ValueFactory.create(variance)+ ")";}  }
class C{  public double valueSparseDouble(int indexOfIndex) throws Exception {  return Double.parseDouble(actualValue(indexOfIndex));}  }
class C{  public static IStatus validateIdentifier(String id,String sourceLevel,String complianceLevel){  if (scannedIdentifier(id,sourceLevel,complianceLevel) != null) {    return JavaModelStatus.VERIFIED_OK;  } else {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.bind(Messages.convention_illegalIdentifier,id),null);  }}  }
class C{  public void readTime(long readTime){  this.readTime=readTime;}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,10,10,8,8,new ECBlocks(5,new ECB(1,3))),new Version(2,12,12,10,10,new ECBlocks(7,new ECB(1,5))),new Version(3,14,14,12,12,new ECBlocks(10,new ECB(1,8))),new Version(4,16,16,14,14,new ECBlocks(12,new ECB(1,12))),new Version(5,18,18,16,16,new ECBlocks(14,new ECB(1,18))),new Version(6,20,20,18,18,new ECBlocks(18,new ECB(1,22))),new Version(7,22,22,20,20,new ECBlocks(20,new ECB(1,30))),new Version(8,24,24,22,22,new ECBlocks(24,new ECB(1,36))),new Version(9,26,26,24,24,new ECBlocks(28,new ECB(1,44))),new Version(10,32,32,14,14,new ECBlocks(36,new ECB(1,62))),new Version(11,36,36,16,16,new ECBlocks(42,new ECB(1,86))),new Version(12,40,40,18,18,new ECBlocks(48,new ECB(1,114))),new Version(13,44,44,20,20,new ECBlocks(56,new ECB(1,144))),new Version(14,48,48,22,22,new ECBlocks(68,new ECB(1,174))),new Version(15,52,52,24,24,new ECBlocks(42,new ECB(2,102))),new Version(16,64,64,14,14,new ECBlocks(56,new ECB(2,140))),new Version(17,72,72,16,16,new ECBlocks(36,new ECB(4,92))),new Version(18,80,80,18,18,new ECBlocks(48,new ECB(4,114))),new Version(19,88,88,20,20,new ECBlocks(56,new ECB(4,144))),new Version(20,96,96,22,22,new ECBlocks(68,new ECB(4,174))),new Version(21,104,104,24,24,new ECBlocks(56,new ECB(6,136))),new Version(22,120,120,18,18,new ECBlocks(68,new ECB(6,175))),new Version(23,132,132,20,20,new ECBlocks(62,new ECB(8,163))),new Version(24,144,144,22,22,new ECBlocks(62,new ECB(8,156),new ECB(2,155))),new Version(25,8,18,6,16,new ECBlocks(7,new ECB(1,5))),new Version(26,8,32,6,14,new ECBlocks(11,new ECB(1,10))),new Version(27,12,26,10,24,new ECBlocks(14,new ECB(1,16))),new Version(28,12,36,10,16,new ECBlocks(18,new ECB(1,22))),new Version(29,16,36,14,16,new ECBlocks(24,new ECB(1,32))),new Version(30,16,48,14,22,new ECBlocks(28,new ECB(1,49)))};}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (moduleSpecifierWithWildcard: ");  result.append(moduleSpecifierWithWildcard);  result.append(", sourcePath: ");  result.append(sourcePath);  result.append(')');  return result.toString();}  }
class C{  public QueryWorkerJobStatus(Status status,ProjectPK projectPK,String jobID,String key,int ID,String SQL,long linesRead,long start,long elapse){  this.status=status;  this.projectPK=projectPK;  this.jobID=jobID;  this.key=key;  this.ID=ID;  this.SQL=SQL;  this.elapse=elapse;  this.lineRead=linesRead;  this.elapseTime=DurationFormatUtils.formatDurationHMS(elapse);}  }
class C{  public void initDrawer(){  mDrawerManager.buildDrawer(this,mToolbar);  mDrawerManager.getDrawer().setOnDrawerItemClickListener(this);}  }
class C{  public JTextComponent(){  super();  enableEvents(AWTEvent.KEY_EVENT_MASK | AWTEvent.INPUT_METHOD_EVENT_MASK);  caretEvent=new MutableCaretEvent(this);  addMouseListener(caretEvent);  addFocusListener(caretEvent);  setEditable(true);  setDragEnabled(false);  setLayout(null);  updateUI();}  }
class C{  public VisibilityReport computeStackVisibilityReport(ArrayList<T> data){  if (data.size() <= 1) {    return new VisibilityReport(1,1);  }  int taskHeight=mTaskRect.height();  int numVisibleTasks=1;  int numVisibleThumbnails=1;  float progress=mTaskProgressMap.get(data.get(data.size() - 1)) - mInitialScrollP;  int prevScreenY=curveProgressToScreenY(progress);  for (int i=data.size() - 2; i >= 0; i--) {    progress=mTaskProgressMap.get(data.get(i)) - mInitialScrollP;    if (progress < 0) {      break;    }    boolean isFrontMostTaskInGroup=true;    if (isFrontMostTaskInGroup) {      float scaleAtP=curveProgressToScale(progress);      int scaleYOffsetAtP=(int)(((1f - scaleAtP) * taskHeight) / 2);      int screenY=curveProgressToScreenY(progress) + scaleYOffsetAtP;      boolean hasVisibleThumbnail=(prevScreenY - screenY) > mConfig.taskBarHeight;      if (hasVisibleThumbnail) {        numVisibleThumbnails++;        numVisibleTasks++;        prevScreenY=screenY;      } else {        for (int j=i; j >= 0; j--) {          numVisibleTasks++;          progress=mTaskProgressMap.get(data.get(i)) - mInitialScrollP;          if (progress < 0) {            break;          }        }        break;      }    } else     if (!isFrontMostTaskInGroup) {      numVisibleTasks++;    }  }  return new VisibilityReport(numVisibleTasks,numVisibleThumbnails);}  }
class C{  @Override protected CommMessage recvImpl() throws IOException {  try {    return protocol().recv(istream,ostream);  } catch (  IllegalBlockingModeException e) {    throw new IOException(e);  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof NumberOfDocuments);}  }
class C{  public static boolean orderedCCW(S2Point a,S2Point b,S2Point c,S2Point o){  int sum=0;  if (robustCCW(b,o,a) >= 0) {    ++sum;  }  if (robustCCW(c,o,b) >= 0) {    ++sum;  }  if (robustCCW(a,o,c) > 0) {    ++sum;  }  return sum >= 2;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  NodeList elementList;  Element testName;  Node firstChild;  String childValue;  doc=(Document)load("staff",true);  root=doc.getDocumentElement();  root.normalize();  elementList=root.getElementsByTagName("name");  testName=(Element)elementList.item(2);  firstChild=testName.getFirstChild();  childValue=firstChild.getNodeValue();  assertEquals("elementNormalizeAssert","Roger\n Jones",childValue);}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.164 -0400",hash_original_method="75A2BF9566AA1720575AC35B18B3F7AE",hash_generated_method="7BB1F4CE156719EC4F2ED2A76AB7B47F") private static void doCopyFile(File srcFile,File destFile,boolean preserveFileDate) throws IOException {  if (destFile.exists() && destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' exists but is a directory");  }  FileInputStream fis=null;  FileOutputStream fos=null;  FileChannel input=null;  FileChannel output=null;  try {    fis=new FileInputStream(srcFile);    fos=new FileOutputStream(destFile);    input=fis.getChannel();    output=fos.getChannel();    long size=input.size();    long pos=0;    long count=0;    while (pos < size) {      count=size - pos > FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;      pos+=output.transferFrom(input,pos,count);    }  }  finally {    IOUtils.closeQuietly(output);    IOUtils.closeQuietly(fos);    IOUtils.closeQuietly(input);    IOUtils.closeQuietly(fis);  }  if (srcFile.length() != destFile.length()) {    throw new IOException("Failed to copy full contents from '" + srcFile + "' to '"+ destFile+ "'");  }  if (preserveFileDate) {    destFile.setLastModified(srcFile.lastModified());  }}  }
class C{  @Override protected final int nextIndex(){  if (_expectedSize != _hash.size()) {    throw new ConcurrentModificationException();  }  Object[] set=_map._set;  int i=_index;  while (i-- > 0 && (set[i] == null || set[i] == TObjectHash.REMOVED))   ;  return i;}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  public ClientKeyExchange(byte[] encrypted_pre_master_secret,boolean isTLS){  this.exchange_keys=encrypted_pre_master_secret;  length=this.exchange_keys.length;  if (isTLS) {    length+=2;  }  this.isTLS=isTLS;  isRSA=true;}  }
class C{  @Override protected List<String> createCommand(StepInstance stepInstance,String temporaryFileDirectory){  final String fastaFilePathName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.fastaFileNameTemplate);  List<String> command=new ArrayList<String>();  command.add(this.perlCommand);  command.add("-I");  command.add("bin/prodom/2006.1");  command.add(this.fullPathToProDomBlast3iPerlScript);  command.add("-P");  command.add(this.fullPathToBlast);  command.add("-d");  command.add(this.fullPathToProDomIprFile);  command.add("-s");  command.add(fastaFilePathName);  if (this.fullPathToTempDirectory != null && !this.fullPathToTempDirectory.equals("")) {    command.add("-t");    command.add(this.fullPathToTempDirectory);  }  command.addAll(this.getBinarySwitchesAsList());  if (LOGGER.isDebugEnabled()) {    LOGGER.debug(command.toString());  }  return command;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static double stdDev(double[][] matrix,int column,double mean){  if (matrix.length == 0) {    return 0.0;  }  double sumSqs=0.0;  for (int m=0; m < matrix.length; m++) {    sumSqs+=(matrix[m][column] - mean) * (matrix[m][column] - mean);  }  double std=sumSqs / (double)(matrix.length - 1);  std=Math.sqrt(std);  return std;}  }
class C{  public ReplicaSets(Collection<ReplicaSet> rsSpecs){  if (rsSpecs != null) {    rsSpecs.forEach(null);  }  Collections.sort(nonReplicaSets);}  }
class C{  public HardlinkCopyDirectoryWrapper(Directory in){  super(in);}  }
class C{  public void testGetIndex(){  for (int x=0; x < 8; x++) {    for (int y=0; y < 8; y++) {      int sq=Position.getSquare(x,y);      int x2=Position.getX(sq);      int y2=Position.getY(sq);      assertEquals(x,x2);      assertEquals(y,y2);    }  }}  }
class C{  BKDLConfig(URI uri){  this(DLUtils.getZKServersFromDLUri(uri),DLUtils.getZKServersFromDLUri(uri),null,null,null);}  }
class C{  private static void handleDelayedTrueBranches(final List<ReilBlock> nodes,final List<ReilEdge> edges,final List<List<ReilInstruction>> delayedTrueBranches){  for (  final List<ReilInstruction> lastReil : delayedTrueBranches) {    final ReilInstruction lastReilInstruction=lastReil.get(lastReil.size() - 1);    for (    final ReilBlock node : nodes) {      final Iterable<ReilInstruction> nodeInstructions=node.getInstructions();      if (Iterables.getLast(nodeInstructions) == lastReilInstruction) {        final ReilEdge incomingEdge=node.getIncomingEdges().get(0);        final ReilBlock parentNode=incomingEdge.getSource();        edges.remove(incomingEdge);        boolean first=true;        for (        final ReilEdge outgoingEdge : node.getOutgoingEdges()) {          if (first) {            first=false;            final ReilEdge newEdge=new ReilEdge(parentNode,node,EdgeType.JUMP_CONDITIONAL_TRUE);            ReilBlock.link(parentNode,node,newEdge);            edges.add(newEdge);            final ReilEdge newEdge2=new ReilEdge(parentNode,outgoingEdge.getTarget(),EdgeType.JUMP_CONDITIONAL_FALSE);            ReilBlock.link(parentNode,outgoingEdge.getTarget(),newEdge2);            edges.add(newEdge2);          } else {            final ReilEdge newEdge2=new ReilEdge(node,outgoingEdge.getTarget(),outgoingEdge.getType());            ReilBlock.link(node,outgoingEdge.getTarget(),newEdge2);            edges.add(newEdge2);          }          edges.remove(outgoingEdge);          ReilBlock.unlink(outgoingEdge.getSource(),outgoingEdge.getTarget(),outgoingEdge);        }      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.947 -0500",hash_original_method="BD9F8FC335D977E935DA4351136AEC70",hash_generated_method="9C66D4F99612AC7286E6B0458CEBF6F8") public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  for (int i=off; i < (off + length); i++) {    int v=data[i] & 0xff;    out.write(encodingTable[(v >>> 4)]);    out.write(encodingTable[v & 0xf]);  }  return length * 2;}  }
class C{  public ObjectReader withType(TypeReference<?> valueTypeRef){  return withType(_config.getTypeFactory().constructType(valueTypeRef.getType()));}  }
class C{  public byte[] formatImage(BufferedImage bi){  return null;}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public int add(String o){  return index.addToIndex(o);}  }
class C{  public final synchronized void uciNewGame(){  newGame=true;}  }
class C{  @SuppressWarnings("unchecked") public final void testFactoryMethod(){  Constraint<Object> constraint1=new ConstraintImplementation(true);  Constraint<Object> constraint2=new ConstraintImplementation(true);  Constraint<Object>[] constraints=new Constraint[2];  constraints[0]=constraint1;  constraints[1]=constraint2;  ConjunctiveConstraint<Object> conjunctiveConstraint=ConjunctiveConstraint.create(constraints);  assertEquals(constraints,conjunctiveConstraint.getConstraints());}  }
class C{  public static boolean checkMobileIsActive(Context context){  ConnectivityManager connec=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  android.net.NetworkInfo mobile=connec.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);  if (mobile.isConnected()) {    return true;  }  return false;}  }
class C{  public static void sort(int[] array){  sort(0,array.length,array);}  }
class C{  public IdentifierTree buildClassUse(Element elt){  return maker.Ident((Symbol)elt);}  }
class C{  public T caseStateEntity_(StateEntity_ object){  return null;}  }
class C{  private void zApplyAllowEmptyTimes(){  if ((!allowEmptyTimes) && (parent.getTime() == null)) {    LocalTime defaultTime=LocalTime.of(7,0);    if (InternalUtilities.isTimeVetoed(vetoPolicy,defaultTime)) {      throw new RuntimeException("Exception in TimePickerSettings.zApplyAllowEmptyTimes(), " + "Could not initialize a null time to 7am, because 7am is vetoed by " + "the veto policy. To prevent this exception, always call "+ "setAllowEmptyTimes() -before- setting a veto policy.");    }    parent.setTime(defaultTime);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (!Sage.EMBEDDED && uiMgr != null && uiMgr.getUIClientType() == UIClient.REMOTE_UI) {    return ((MiniClientSageRenderer)uiMgr.getRootPanel().getRenderEngine()).supportsScreenshots() ? Boolean.TRUE : Boolean.FALSE;  }  return Boolean.FALSE;}  }
class C{  public static Element toElement(Document doc,Object o) throws PageException {  if (o instanceof Element)   return (Element)o; else   if (o instanceof Node)   throw new ExpressionException("Object " + Caster.toClassName(o) + " must be a XML Element");  return doc.createElement(Caster.toString(o));}  }
class C{  public static void decodeCorrelationIdentifiers(Set<CorrelationIdentifier> correlations,String encoded){  if (encoded != null && !encoded.trim().isEmpty()) {    StringTokenizer st=new StringTokenizer(encoded,",");    while (st.hasMoreTokens()) {      String token=st.nextToken();      String[] parts=token.split("[|]");      if (parts.length == 2) {        String scope=parts[0].trim();        String value=parts[1].trim();        log.tracef("Extracted correlation identifier scope [%s] value [%s]",scope,value);        CorrelationIdentifier cid=new CorrelationIdentifier();        cid.setScope(Scope.valueOf(scope));        cid.setValue(value);        correlations.add(cid);      }    }  }}  }
class C{  public static boolean isEmpty(String param){  return param == null || param.isEmpty();}  }
class C{  public static Typeface robotoThinItalic(Context context){  return FontSourceProcessor.process(R.raw.roboto_thinitalic,context);}  }
class C{  public void classInfoIndex(int index) throws IOException {  output.write('c');  write16bit(index);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditemns01.class,args);}  }
class C{  public int numberOfFilesBeforePurge() throws CLIArgumentParserException {  return getIntegerArgument(Messages.PURGE_OPT);}  }
class C{  private boolean wasReversed(SolrQueryParser qp,String query) throws Exception {  Query q=qp.parse(query);  if (!(q instanceof AutomatonQuery)) {    return false;  }  Automaton automaton=((AutomatonQuery)q).getAutomaton();  String prefix=Operations.getCommonPrefix(Operations.determinize(automaton,Operations.DEFAULT_MAX_DETERMINIZED_STATES));  return prefix.length() > 0 && prefix.charAt(0) == '\u0001';}  }
class C{  public static void createJar(String dest,Path filesLocation,String... fileNames) throws IOException {  try (JarOutputStream jos=new JarOutputStream(new FileOutputStream(dest),new Manifest())){    for (    String fileName : fileNames) {      System.out.println(String.format("Adding %s to %s",fileName,dest));      jos.putNextEntry(new JarEntry(fileName));      File file;      if (filesLocation != null) {        file=filesLocation.resolve(fileName).toFile();      } else {        file=new File(fileName);      }      try (FileInputStream fis=new FileInputStream(file)){        Utils.transferBetweenStreams(fis,jos);      }     }  }   System.out.println();}  }
class C{  public IShareRequest buildRequest(final List<Option> options){  return new ShareRequest(getRequestUrl(),getClient(),options);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:11.416 -0500",hash_original_method="124BFC00035B67AF657D6336BEA07CC5",hash_generated_method="2823AFE6AA2CFFB4F440BE1D573A853D") protected byte[] wrap(){  byte[] res=recordProtocol.wrap(ContentType.ALERT,alert,0,2);  return res;}  }
class C{  public OctagonalEnvelope(){}  }
class C{  public void print(int size){  System.out.println("Generating " + size + " random seeds...");  RandomSeedGenerator copy=(RandomSeedGenerator)this.clone();  for (int i=0; i < size; i++) {    int seed=copy.nextSeed();    System.out.println(seed);  }  System.out.println("\ndone.");}  }
class C{  public SQLWarning(String reason,Throwable cause){  super(reason,cause);  DriverManager.println("SQLWarning : reason(" + reason + ")");}  }
class C{  public void postIndexUnderLock(Engine.Index index){}  }
class C{  public CUDA_ARRAY3D_DESCRIPTOR(){}  }
class C{  public void sessionDestroyed(HttpSessionEvent se){  if (m_activeSessions > 0)   m_activeSessions--;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.314 -0500",hash_original_method="FCCD2BDA38C43A03106A3DA5EA866DEA",hash_generated_method="A8751CA0E6011BD377A71992646CC23F") public StringIndexOutOfBoundsException(String s,int index){  this(s.length(),index);}  }
class C{  public OIDCException(final Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  private String convertToClassName(String prefix,String pathEntry){  String className=pathEntry;  if (prefix != null) {    className=className.substring(prefix.length());  }  className=className.substring(0,(className.length() - 7));  return className.replace('/','.');}  }
class C{  public static <T,H extends PsiElement>PsiCacheKey<T,H> create(@NonNls @NotNull String name,@NotNull Function<H,T> function,@NotNull Key<?> modifyCause){  return new PsiCacheKey<T,H>(name,function,modifyCause);}  }
class C{  public static void moveDirectoryToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  } else   if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  } else {    if (!destDir.exists() && createDestDir) {      destDir.mkdirs();    }    if (!destDir.exists()) {      throw new FileNotFoundException("Destination directory \'" + destDir + "\' does not exist [createDestDir="+ createDestDir+ "]");    } else     if (!destDir.isDirectory()) {      throw new IOException("Destination \'" + destDir + "\' is not a directory");    } else {      File finalDestDir=new File(destDir,src.getName());      boolean rename=src.renameTo(finalDestDir);      if (!rename) {        if (finalDestDir.getCanonicalPath().startsWith(src.getCanonicalPath())) {          throw new IOException("Cannot move directory: " + src + " to a subdirectory of itself: "+ destDir);        }        copyDirectory(src,finalDestDir);        deleteDirectory(src);        if (src.exists()) {          throw new IOException("Failed to delete original directory \'" + src + "\' after copy to \'"+ finalDestDir+ "\'");        }      }    }  }}  }
class C{  public static void BB_BEGIN(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.BB_BEGIN();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public static boolean isReplaceApplets(Context c){  SharedPreferences pref=c.getSharedPreferences(APP_PREF_NAME,Context.MODE_PRIVATE);  return pref.getBoolean("replace",c.getString(R.string.replace).equals("true"));}  }
class C{  @Override public Address clone() throws CloneNotSupportedException {  return (Address)super.clone();}  }
class C{  public void reset(){  circularSkyView.showCircle(TimeUtils.getInstance(getContext()).isDay);  changeStarAlPha();}  }
class C{  public void xxtestBrokenConnection2(){  try {    fetch("www.heise.de",80,false,"/index.html",1,2,60,60);    fail("Oops - timeout expected.");  } catch (  IOException ex) {    android.util.Log.d("SSLSocketTest","Exception",ex);  }}  }
class C{  protected void engineUpdate(byte[] data,int off,int len){  md.update(data,off,len);}  }
class C{  @Override public boolean longClick(Selector obj) throws UiObjectNotFoundException {  if (obj.toUiObject2() == null) {    return device.findObject(obj.toUiSelector()).longClick();  } else {    obj.toUiObject2().longClick();    return true;  }}  }
class C{  public boolean isEmpty(){  return this == EMPTY;}  }
class C{  private void handleOperand(String tok) throws Exception {  if (tok.indexOf('a') != -1) {    m_postFixExpVector.addElement(new AttributeOperand(tok,m_signMod));  } else {    try {      m_postFixExpVector.addElement(new NumericOperand(tok,m_signMod));    } catch (    NumberFormatException ne) {      throw new Exception("Trouble parsing numeric constant");    }  }  m_signMod=false;}  }
class C{  void testFail(String input,String cmd) throws Exception {  boolean ok;  try {    test(input,cmd);    ok=true;  } catch (  Exception e) {    if (e instanceof MissingResourceException) {      ok=true;    } else {      ok=false;    }  }  if (ok) {    afterFail(input,cmd,"FAIL");    throw new RuntimeException();  }}  }
class C{  public boolean existsConstructor(Class modelClass,Class[] argumentTypes){  for (  Class argumentType1 : argumentTypes) {    if (argumentType1 == null) {      throw new IllegalArgumentException("Argument classes must be " + "non-null");    }  }  Constructor[] constructors=modelClass.getConstructors();  loop:   for (  Constructor constructor : constructors) {    Class[] parameterTypes=constructor.getParameterTypes();    List<Class> remainingParameterTypes=new ArrayList<>(Arrays.asList(parameterTypes));    loop2:     for (    Class argumentType : argumentTypes) {      Class type=findMatchingType(remainingParameterTypes,argumentType);      if (type == null) {        continue loop;      } else {        remainingParameterTypes.remove(type);      }    }    return true;  }  return false;}  }
class C{  private void typeCheck(K key){  Class<?> keyClass=key.getClass();  if (keyClass != keyType && keyClass.getSuperclass() != keyType)   throw new ClassCastException(keyClass + " != " + keyType);}  }
class C{  public void exec(Value... params){  setActualParams(params);  while (true) {    PseudoOp op=code[pc++];    Clock.stop();    Trace.trace(Item.EVAL,"depth=%-4d pc=%4d: %s",nesting,pc - 1,op);    Clock.start();    try {      if (op.mayTriggerGc() || op.affectsControlFlow()) {        gcSafePoint(op,true);      }      op.exec(env);      if (op.affectsControlFlow()) {        if (op.isBranch()) {          if (op.isTaken(env)) {            pc=op.getBranchTarget();          }        } else {          if (op.isCall()) {            methodCall((CallNormalOp)op);          } else           if (op.isReturn()) {            if (nesting == 0) {              break;            }            methodReturn((ReturnOp)op);          }        }      }    } catch (    RuntimeException e) {      System.err.printf("Runtime exception encountered at line %d, column %d%n",op.getLine(),op.getColumn());      stackTrace(op);      throw e;    }  }}  }
class C{  public static Type wildLowerBound(ProcessingEnvironment env,TypeMirror tm){  Type t=(Type)tm;  if (t.hasTag(WILDCARD)) {    Context context=((JavacProcessingEnvironment)env).getContext();    Symtab syms=Symtab.instance(context);    Type.WildcardType w=(Type.WildcardType)TypeAnnotationUtils.unannotatedType(t);    return w.isExtendsBound() ? syms.botType : wildLowerBound(env,w.type);  } else {    return t.unannotatedType();  }}  }
class C{  public APISharingProfile(SharingProfile sharingProfile){  this.name=sharingProfile.getName();  this.identifier=sharingProfile.getIdentifier();  this.primaryConnectionIdentifier=sharingProfile.getPrimaryConnectionIdentifier();  this.attributes=sharingProfile.getAttributes();}  }
class C{  public boolean hasParent(){  boolean hasParentDatePicker=(parentDatePicker != null);  boolean hasParentCalendarPanel=(parentCalendarPanel != null);  return (hasParentDatePicker || hasParentCalendarPanel);}  }
class C{  public static void onErrorDropped(Throwable e,Throwable root){  if (root != null) {    e.addSuppressed(root);  }  onErrorDropped(e);}  }
class C{  @ReactMethod public void flush(){  mAppEventLogger.flush();}  }
class C{  @Uninterruptible public static int offsetAsSlot(Offset offset){  if (VM.VerifyAssertions)   VM._assert((offset.toInt() & 3) == 0);  return middleOfTable + (offset.toInt() >> LOG_BYTES_IN_INT);}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  if (Consts.DEBUG) {    Log.i(TAG,"signature: " + signature);  }  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (trace_duration_1: ");  result.append(trace_duration_1);  result.append(')');  return result.toString();}  }
class C{  private boolean step1(){  if (CT == null)   return false;  if (suffix(CT,"uciones") && suffix(R2,"uciones")) {    CT=replaceSuffix(CT,"uciones","u");    return true;  }  if (CT.length() >= 6) {    if (suffix(CT,"imentos") && suffix(R2,"imentos")) {      CT=removeSuffix(CT,"imentos");      return true;    }    if (suffix(CT,"amentos") && suffix(R2,"amentos")) {      CT=removeSuffix(CT,"amentos");      return true;    }    if (suffix(CT,"adores") && suffix(R2,"adores")) {      CT=removeSuffix(CT,"adores");      return true;    }    if (suffix(CT,"adoras") && suffix(R2,"adoras")) {      CT=removeSuffix(CT,"adoras");      return true;    }    if (suffix(CT,"logias") && suffix(R2,"logias")) {      replaceSuffix(CT,"logias","log");      return true;    }    if (suffix(CT,"encias") && suffix(R2,"encias")) {      CT=replaceSuffix(CT,"encias","ente");      return true;    }    if (suffix(CT,"amente") && suffix(R1,"amente")) {      CT=removeSuffix(CT,"amente");      return true;    }    if (suffix(CT,"idades") && suffix(R2,"idades")) {      CT=removeSuffix(CT,"idades");      return true;    }  }  if (CT.length() >= 5) {    if (suffix(CT,"acoes") && suffix(R2,"acoes")) {      CT=removeSuffix(CT,"acoes");      return true;    }    if (suffix(CT,"imento") && suffix(R2,"imento")) {      CT=removeSuffix(CT,"imento");      return true;    }    if (suffix(CT,"amento") && suffix(R2,"amento")) {      CT=removeSuffix(CT,"amento");      return true;    }    if (suffix(CT,"adora") && suffix(R2,"adora")) {      CT=removeSuffix(CT,"adora");      return true;    }    if (suffix(CT,"ismos") && suffix(R2,"ismos")) {      CT=removeSuffix(CT,"ismos");      return true;    }    if (suffix(CT,"istas") && suffix(R2,"istas")) {      CT=removeSuffix(CT,"istas");      return true;    }    if (suffix(CT,"logia") && suffix(R2,"logia")) {      CT=replaceSuffix(CT,"logia","log");      return true;    }    if (suffix(CT,"ucion") && suffix(R2,"ucion")) {      CT=replaceSuffix(CT,"ucion","u");      return true;    }    if (suffix(CT,"encia") && suffix(R2,"encia")) {      CT=replaceSuffix(CT,"encia","ente");      return true;    }    if (suffix(CT,"mente") && suffix(R2,"mente")) {      CT=removeSuffix(CT,"mente");      return true;    }    if (suffix(CT,"idade") && suffix(R2,"idade")) {      CT=removeSuffix(CT,"idade");      return true;    }  }  if (CT.length() >= 4) {    if (suffix(CT,"acao") && suffix(R2,"acao")) {      CT=removeSuffix(CT,"acao");      return true;    }    if (suffix(CT,"ezas") && suffix(R2,"ezas")) {      CT=removeSuffix(CT,"ezas");      return true;    }    if (suffix(CT,"icos") && suffix(R2,"icos")) {      CT=removeSuffix(CT,"icos");      return true;    }    if (suffix(CT,"icas") && suffix(R2,"icas")) {      CT=removeSuffix(CT,"icas");      return true;    }    if (suffix(CT,"ismo") && suffix(R2,"ismo")) {      CT=removeSuffix(CT,"ismo");      return true;    }    if (suffix(CT,"avel") && suffix(R2,"avel")) {      CT=removeSuffix(CT,"avel");      return true;    }    if (suffix(CT,"ivel") && suffix(R2,"ivel")) {      CT=removeSuffix(CT,"ivel");      return true;    }    if (suffix(CT,"ista") && suffix(R2,"ista")) {      CT=removeSuffix(CT,"ista");      return true;    }    if (suffix(CT,"osos") && suffix(R2,"osos")) {      CT=removeSuffix(CT,"osos");      return true;    }    if (suffix(CT,"osas") && suffix(R2,"osas")) {      CT=removeSuffix(CT,"osas");      return true;    }    if (suffix(CT,"ador") && suffix(R2,"ador")) {      CT=removeSuffix(CT,"ador");      return true;    }    if (suffix(CT,"ivas") && suffix(R2,"ivas")) {      CT=removeSuffix(CT,"ivas");      return true;    }    if (suffix(CT,"ivos") && suffix(R2,"ivos")) {      CT=removeSuffix(CT,"ivos");      return true;    }    if (suffix(CT,"iras") && suffix(RV,"iras") && suffixPreceded(CT,"iras","e")) {      CT=replaceSuffix(CT,"iras","ir");      return true;    }  }  if (CT.length() >= 3) {    if (suffix(CT,"eza") && suffix(R2,"eza")) {      CT=removeSuffix(CT,"eza");      return true;    }    if (suffix(CT,"ico") && suffix(R2,"ico")) {      CT=removeSuffix(CT,"ico");      return true;    }    if (suffix(CT,"ica") && suffix(R2,"ica")) {      CT=removeSuffix(CT,"ica");      return true;    }    if (suffix(CT,"oso") && suffix(R2,"oso")) {      CT=removeSuffix(CT,"oso");      return true;    }    if (suffix(CT,"osa") && suffix(R2,"osa")) {      CT=removeSuffix(CT,"osa");      return true;    }    if (suffix(CT,"iva") && suffix(R2,"iva")) {      CT=removeSuffix(CT,"iva");      return true;    }    if (suffix(CT,"ivo") && suffix(R2,"ivo")) {      CT=removeSuffix(CT,"ivo");      return true;    }    if (suffix(CT,"ira") && suffix(RV,"ira") && suffixPreceded(CT,"ira","e")) {      CT=replaceSuffix(CT,"ira","ir");      return true;    }  }  return false;}  }
class C{  protected byte[] _readChunk(long index) throws IOException, InvalidKeyException, InvalidAlgorithmParameterException, FileEncryptionException, IllegalBlockSizeException, BadPaddingException {  long oldpos=backingRandomAccessFile.getFilePointer();  backingRandomAccessFile.seek(chunkOffset(index));  byte[] iv=new byte[CHUNK_IV_SIZE];  int ret=backingRandomAccessFile.read(iv);  if (ret != CHUNK_IV_SIZE) {    throw new FileEncryptionException("Size mismatch reading chunk IV!");  }  IvParameterSpec spec=new IvParameterSpec(iv);  decCipher.init(Cipher.DECRYPT_MODE,getFileKey(),spec);  byte[] res;  byte[] buf=new byte[CHUNK_ENC_DATA_SIZE];  ret=backingRandomAccessFile.read(buf);  backingRandomAccessFile.seek(oldpos);  if (ret != CHUNK_ENC_DATA_SIZE) {    throw new FileEncryptionException("Size mismatch reading encrypted chunk data!");  }  res=decCipher.doFinal(buf);  if ((res == null) || (res.length != CHUNK_DATA_SIZE)) {    throw new FileEncryptionException("Decryption error or chunk size mismatch during decryption!");  } else {    return res;  }}  }
class C{  public String toString(){  return _prefix != null ? (_prefix + ":" + _localName) : (_namespaceURI != null ? ("{" + _namespaceURI + "}"+ _localName) : _localName);}  }
class C{  public boolean doesCgExist(String cgName) throws RecoverPointException {  String mgmtIPAddress=_endpoint.toASCIIString();  if (null == mgmtIPAddress) {    throw RecoverPointException.exceptions.noRecoverPointEndpoint();  }  try {    List<ConsistencyGroupUID> allCgs=functionalAPI.getAllConsistencyGroups();    for (    ConsistencyGroupUID cg : allCgs) {      ConsistencyGroupSettings settings=functionalAPI.getGroupSettings(cg);      if (settings.getName().toString().equalsIgnoreCase(cgName)) {        return true;      }    }  } catch (  Exception e) {    logger.error(e.getMessage(),e);    throw RecoverPointException.exceptions.failedToLookupConsistencyGroup(cgName,getCause(e));  }  return false;}  }
class C{  private void createMultiOptionField(PropertyType type,boolean editable,Composite parent,boolean focus,boolean reference,boolean crudButtons,boolean cnalinkreference,boolean showValidationHint,boolean useValidationGuiHints){  MultiSelectionControl mlControl=new MultiSelectionControl(entity,type,parent,editable,reference,crudButtons,cnalinkreference,showValidationHint,useValidationGuiHints);  mlControl.create();  if (focus) {    focusField=mlControl;  }  fields.put(type.getId(),mlControl);  mlControl.validate();  setFirstField(mlControl);}  }
class C{  public FileObject write(ClassSymbol c) throws IOException {  String className=c.flatName().toString();  FileObject outFile=fileManager.getFileForOutput(StandardLocation.NATIVE_HEADER_OUTPUT,"",className.replaceAll("[.$]","_") + ".h",null);  Writer out=outFile.openWriter();  try {    write(out,c);    if (verbose)     log.printVerbose("wrote.file",outFile);    out.close();    out=null;  }  finally {    if (out != null) {      out.close();      outFile.delete();      outFile=null;    }  }  return outFile;}  }
class C{  public int lineNumber(int i){  return ByteArray.readU16bit(info,i * 4 + 4);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof GeneralSubtrees == false) {    return false;  }  GeneralSubtrees other=(GeneralSubtrees)obj;  return this.trees.equals(other.trees);}  }
class C{  boolean unlocked(Object key){  locked.remove(key);  return locked.isEmpty();}  }
class C{  public final void testToString() throws NoSuchAlgorithmException {  for (int k=0; k < algorithmName.length; k++) {    try {      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(bos,md);      assertNotNull(dos.toString());      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  private static void abort(String message,Throwable exception) throws CoreException {  IStatus status=new Status(IStatus.ERROR,getUniqueIdentifier(),ERROR,message,exception);  throw new CoreException(status);}  }
class C{  public SecuritySubjectType subjectType(){  return subjType;}  }
class C{  protected void needAppData() throws IOException {  if (!handshake_started) {    startHandshake();  }  int type;  if (logger != null) {    logger.println("SSLSocket.needAppData..");  }  try {    while (appDataIS.available() == 0) {switch (type=recordProtocol.unwrap()) {case ContentType.HANDSHAKE:        if (!handshakeProtocol.getStatus().equals(SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING)) {          doHandshake();        }      break;case ContentType.ALERT:    processAlert();  if (socket_was_closed) {    return;  }break;case ContentType.APPLICATION_DATA:if (logger != null) {logger.println("SSLSocket.needAppData: got the data");}break;default :reportFatalAlert(AlertProtocol.UNEXPECTED_MESSAGE,new SSLException("Unexpected message of type " + type + " has been got"));}if (alertProtocol.hasAlert()) {output.write(alertProtocol.wrap());alertProtocol.setProcessed();}if (socket_was_closed) {appDataIS.setEnd();return;}}} catch (AlertException e) {reportFatalAlert(e.getDescriptionCode(),e.getReason());}catch (EndOfSourceException e) {appDataIS.setEnd();}if (logger != null) {logger.println("SSLSocket.needAppData: app data len: " + appDataIS.available());}}  }
class C{  public static Object stringToValue(String string){  if ("".equals(string)) {    return string;  }  if ("true".equalsIgnoreCase(string)) {    return Boolean.TRUE;  }  if ("false".equalsIgnoreCase(string)) {    return Boolean.FALSE;  }  if ("null".equalsIgnoreCase(string)) {    return JSONObject.NULL;  }  if ("0".equals(string)) {    return new Integer(0);  }  try {    char initial=string.charAt(0);    boolean negative=false;    if (initial == '-') {      initial=string.charAt(1);      negative=true;    }    if (initial == '0' && string.charAt(negative ? 2 : 1) == '0') {      return string;    }    if ((initial >= '0' && initial <= '9')) {      if (string.indexOf('.') >= 0) {        return Double.valueOf(string);      } else       if (string.indexOf('e') < 0 && string.indexOf('E') < 0) {        Long myLong=new Long(string);        if (myLong.longValue() == myLong.intValue()) {          return new Integer(myLong.intValue());        } else {          return myLong;        }      }    }  } catch (  Exception ignore) {  }  return string;}  }
class C{  public void ensureCapacity(int capacity){  if (mGarbage && mSize >= mKeys.length) {    gc();  }  if (mKeys.length < capacity) {    int[] nkeys=new int[capacity];    Object[] nvalues=new Object[capacity];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }}  }
class C{  public static KeyStore load(File keyStoreFile,Password password,KeyStoreType keyStoreType) throws CryptoException, FileNotFoundException {  if (!keyStoreType.isFileBased()) {    throw new CryptoException(MessageFormat.format(res.getString("NoLoadKeyStoreNotFile.exception.message"),keyStoreType.jce()));  }  FileInputStream fis=new FileInputStream(keyStoreFile);  KeyStore keyStore=getKeyStoreInstance(keyStoreType);  try {    keyStore.load(fis,password.toCharArray());  } catch (  CertificateException ex) {    throw new KeyStoreLoadException(MessageFormat.format(res.getString("NoLoadKeyStoreType.exception.message"),keyStoreType),ex,keyStoreType);  }catch (  NoSuchAlgorithmException ex) {    throw new KeyStoreLoadException(MessageFormat.format(res.getString("NoLoadKeyStoreType.exception.message"),keyStoreType),ex,keyStoreType);  }catch (  FileNotFoundException ex) {    throw ex;  }catch (  IOException ex) {    throw new KeyStoreLoadException(MessageFormat.format(res.getString("NoLoadKeyStoreType.exception.message"),keyStoreType),ex,keyStoreType);  } finally {    IOUtils.closeQuietly(fis);  }  return keyStore;}  }
class C{  protected Document createConfigurationDocument(AVList params){  Document doc=super.createConfigurationDocument(params);  if (doc == null || doc.getDocumentElement() == null)   return doc;  DataConfigurationUtils.createWCSLayerConfigElements(params,doc.getDocumentElement());  return doc;}  }
class C{  public Plane(float width,float height,int segmentsW,int segmentsH,Axis upAxis,boolean createTextureCoordinates,boolean createVertexColorBuffer,int numTextureTiles){  this(width,height,segmentsW,segmentsH,upAxis,createTextureCoordinates,createVertexColorBuffer,numTextureTiles,true);}  }
class C{  public static void cleanupWorkingDirectories(){  JobConf job=ConfigurationManager.getCachedJobConf();  if (!InfrastructureAnalyzer.isLocalMode(job)) {    CacheableData.cleanupCacheDir();    CacheableData.disableCaching();    LocalFileUtils.cleanupWorkingDirectory();  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.868 -0500",hash_original_method="A13E8F561D1454805516846C4F2ACB3F",hash_generated_method="7AFB85B6ED9D1B4895FE3646E7F116A7") public void dump(Printer pw,String prefix){  pw.println(prefix + "usagePercent: " + usagePercent);  pw.println(prefix + "durationMicros: " + durationMicros);  pw.println(prefix + "usageDetails: " + usageDetails);  pw.println(prefix + "checkinDetails: " + checkinDetails);}  }
class C{  public QueryStringQueryBuilder timeZone(String timeZone){  this.timeZone=timeZone;  return this;}  }
class C{  protected ObjectMatrix2D like2D(int rows,int columns,int rowZero,int columnZero,int rowStride,int columnStride){  return new DenseObjectMatrix2D(rows,columns,this.elements,rowZero,columnZero,rowStride,columnStride);}  }
class C{  @Override public void readFields(DataInput in) throws IOException {  int b=in.readByte();  type=mapping[b];  nodeid=in.readInt();  if (type.equals(Type.Mass)) {    pagerank=in.readFloat();    return;  }  if (type.equals(Type.Complete)) {    pagerank=in.readFloat();  }  adjacenyList=new ArrayListOfIntsWritable();  adjacenyList.readFields(in);}  }
class C{  private String convertToIsoDateTime(String humanReadableDateTime) throws ParseException {  DateFormat dfInitial=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  Date initialDateTime=dfInitial.parse(humanReadableDateTime);  DateFormat df=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.S'Z'");  return df.format(initialDateTime);}  }
class C{  private CModulesPanelFunctions(){}  }
class C{  public void clear(){  removeAll(false);}  }
class C{  public static PointRDD SpatialRangeQueryUsingIndex(PointRDD pointRDD,Envelope envelope,Integer condition){  if (pointRDD.indexedRDDNoId == null) {    throw new NullPointerException("Need to invoke buildIndex() first, indexedRDDNoId is null");  }  JavaRDD<Point> result=pointRDD.indexedRDDNoId.mapPartitions(new PointRangeFilterUsingIndex(envelope));  return new PointRDD(result);}  }
class C{  public GenericItemAdapter<Model,Item> removeModel(int position){  super.remove(position);  return this;}  }
class C{  public boolean contains(Node obj){  final List<Node> l;synchronized (this) {    l=this.list;  }  return l.contains(obj);}  }
class C{  private Object loadSerializedObject(URL codebase,String filename) throws IOException, ClassNotFoundException {  if (filename != null) {    filename=filename.replace(File.separatorChar,'/');  }  if (MLET_LOGGER.isLoggable(Level.FINER)) {    MLET_LOGGER.logp(Level.FINER,MLet.class.getName(),"loadSerializedObject",codebase.toString() + filename);  }  InputStream is=getResourceAsStream(filename);  if (is != null) {    try {      ObjectInputStream ois=new MLetObjectInputStream(is,this);      Object serObject=ois.readObject();      ois.close();      return serObject;    } catch (    IOException e) {      if (MLET_LOGGER.isLoggable(Level.FINEST)) {        MLET_LOGGER.logp(Level.FINEST,MLet.class.getName(),"loadSerializedObject","Exception while deserializing " + filename,e);      }      throw e;    }catch (    ClassNotFoundException e) {      if (MLET_LOGGER.isLoggable(Level.FINEST)) {        MLET_LOGGER.logp(Level.FINEST,MLet.class.getName(),"loadSerializedObject","Exception while deserializing " + filename,e);      }      throw e;    }  } else {    if (MLET_LOGGER.isLoggable(Level.FINEST)) {      MLET_LOGGER.logp(Level.FINEST,MLet.class.getName(),"loadSerializedObject","Error: File " + filename + " containing serialized object not found");    }    throw new Error("File " + filename + " containing serialized object not found");  }}  }
class C{  private static void onBraceClosed(KeyEvent event) throws BadLocationException {  JEditorPane editor=(JEditorPane)event.getSource();  Document doc=editor.getDocument();  int pos=editor.getCaretPosition();  String tag=getCurrentTag(doc.getText(0,pos));  if (tag.equals("")) {    return;  }  String textAfter=doc.getText(pos,doc.getLength() - pos);  Matcher m=Pattern.compile("<" + tag).matcher(textAfter);  Matcher m2=Pattern.compile("</" + tag).matcher(textAfter);  int openingCount=0;  while (m.find()) {    openingCount++;  }  int closingCount=0;  while (m2.find()) {    closingCount++;  }  if (openingCount == closingCount - 1) {    return;  }  StringBuffer buffer=new StringBuffer();  int newPosition=pos;  String indent=getIndent(doc,pos);  if (tag.equals("rule")) {    buffer.append(">\n" + indent + "\t<case>\n");    buffer.append(indent + "\t\t<condition>\n");    buffer.append(indent + "\t\t\t<if var=\"\" relation=\"=\" value=\"\"/>\n");    buffer.append(indent + "\t\t</condition>\n");    String param=(isUtility(doc,pos)) ? "util=\"0\"" : "prob=\"1\"";    buffer.append(indent + "\t\t<effect " + param+ ">\n");    buffer.append(indent + "\t\t\t<set var=\"\" value=\"\"/>\n");    buffer.append(indent + "\t\t</effect>\n");    buffer.append(indent + "\t</case>\n");    buffer.append(indent + "</rule>\n");    newPosition+=36 + indent.length() * 3;  } else   if (tag.equals("case")) {    buffer.append(">\n" + indent + "\t<condition>\n");    buffer.append(indent + "\t\t<if var=\"\" relation=\"=\" value=\"\"/>\n");    buffer.append(indent + "\t</condition>\n");    String param=(isUtility(doc,pos)) ? "util=\"0\"" : "prob=\"1\"";    buffer.append(indent + "\t<effect " + param+ ">\n");    buffer.append(indent + "\t\t<set var=\"\" value=\"\"/>\n");    buffer.append(indent + "\t</effect>\n");    buffer.append(indent + "</case>");    newPosition+=26 + indent.length() * 2;  } else {    buffer.append("></" + tag + ">");    newPosition+=1;  }  doc.insertString(pos,buffer.toString(),null);  editor.setCaretPosition(newPosition);  event.consume();}  }
class C{  private void process(TrafficChannelAllocationEvent event){  CallEvent callEvent=event.getCallEvent();synchronized (mTrafficChannelsInUse) {    if (mTrafficChannelsInUse.containsKey(callEvent.getChannel())) {      return;    }    long frequency=callEvent.getFrequency();    if (isDoNotMonitor(callEvent)) {      callEvent.setCallEventType(CallEventType.CALL_DO_NOT_MONITOR);      if (isSameCallEvent(mPreviousDoNotMonitorCallEvent,callEvent)) {        return;      } else {        mPreviousDoNotMonitorCallEvent=callEvent;      }    } else     if (frequency > 0) {      Channel channel=getChannel(callEvent.getChannel(),new TunerChannel(Type.TRAFFIC,frequency,mDecodeConfiguration.getDecoderType().getChannelBandwidth()));      if (channel != null) {        TrafficChannelEvent trafficChannelEvent=new TrafficChannelEvent(this,channel,Event.REQUEST_ENABLE,callEvent);        mChannelModel.broadcast(trafficChannelEvent);        if (channel.getEnabled()) {          mTrafficChannelsInUse.put(callEvent.getChannel(),channel);        } else {          callEvent.setCallEventType(CallEventType.CALL_DETECT);          String details=callEvent.getDetails();          if (details == null || details.isEmpty()) {            callEvent.setDetails(CHANNEL_START_REJECTED);          } else           if (!details.contains(CHANNEL_START_REJECTED)) {            callEvent.setDetails(new StringBuilder(CHANNEL_START_REJECTED).append(" : ").append(callEvent.getDetails()).toString());          }        }      } else {        callEvent.setCallEventType(CallEventType.CALL_DETECT);        String details=callEvent.getDetails();        if (details == null || details.isEmpty()) {          callEvent.setDetails(NO_TUNER_AVAILABLE);        } else         if (!details.contains(NO_TUNER_AVAILABLE)) {          callEvent.setDetails(new StringBuilder(NO_TUNER_AVAILABLE).append(" : ").append(callEvent.getDetails()).toString());        }      }    } else {      callEvent.setCallEventType(CallEventType.CALL_DETECT);      String details=callEvent.getDetails();      if (details == null || details.isEmpty()) {        callEvent.setDetails(UNKNOWN_FREQUENCY);      } else       if (!details.contains(UNKNOWN_FREQUENCY)) {        callEvent.setDetails(new StringBuilder(UNKNOWN_FREQUENCY).append(" : ").append(callEvent.getDetails()).toString());      }    }    final Listener<CallEvent> listener=mCallEventListener;    if (listener != null) {      listener.receive(callEvent);    }  }}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public static void main(final String[] args){  new SdfStatistics().mainExit(args);}  }
class C{  public void revalidate(){  m_pageMax=m_viewPanel.getPageCount();  spinnerModel.setMaximum(new Integer(m_pageMax));  centerScrollPane.setPreferredSize(new Dimension(m_viewPanel.getPaperWidth() + 30,m_viewPanel.getPaperHeight() + 15));  centerScrollPane.getViewport().setViewSize(new Dimension(m_viewPanel.getPaperWidth() + 2 * m_viewPanel.getMarginSize(true),m_viewPanel.getPaperHeight() + 2 * m_viewPanel.getMarginSize(true)));  setTitle(Msg.getMsg(m_ctx,"Report") + ": " + m_reportEngine.getName()+ "  "+ Env.getHeader(m_ctx,0));  StringBuffer sb=new StringBuffer();  sb.append(m_viewPanel.getPaper().toString(m_ctx)).append(" - ").append(Msg.getMsg(m_ctx,"DataCols")).append("=").append(m_reportEngine.getColumnCount()).append(", ").append(Msg.getMsg(m_ctx,"DataRows")).append("=").append(m_reportEngine.getRowCount());  statusBar.setStatusLine(sb.toString());  setPage(m_pageNo);}  }
class C{  public void writeDiff(final Task<Diff> diff,final int start) throws IOException {  int size=diff.size();  Diff d;  String previousRevision=null, currentRevision=null;  this.writer.write(WikipediaXMLKeys.KEY_START_PAGE.getKeyword() + "\r\n");  ArticleInformation header=diff.getHeader();  this.writer.write("\t" + WikipediaXMLKeys.KEY_START_TITLE.getKeyword());  this.writer.write(header.getArticleName());  this.writer.write(WikipediaXMLKeys.KEY_END_TITLE.getKeyword() + "\r\n");  this.writer.write("\t" + WikipediaXMLKeys.KEY_START_ID.getKeyword());  this.writer.write(Integer.toString(header.getArticleId()));  this.writer.write(WikipediaXMLKeys.KEY_END_ID.getKeyword() + "\r\n");  this.writer.write("\t<partCounter>");  this.writer.write(Integer.toString(diff.getPartCounter()));  this.writer.write("</partCounter>\r\n");  for (int i=start; i < size; i++) {    d=diff.get(i);    currentRevision=d.buildRevision(previousRevision);    this.writer.write("\t" + WikipediaXMLKeys.KEY_START_REVISION.getKeyword() + "\r\n");    this.writer.write("\t\t" + WikipediaXMLKeys.KEY_START_ID.getKeyword());    this.writer.write(Integer.toString(d.getRevisionID()));    this.writer.write(WikipediaXMLKeys.KEY_END_ID.getKeyword() + "\r\n");    this.writer.write("\t\t<revCount>");    this.writer.write(Integer.toString(d.getRevisionCounter()));    this.writer.write("</revCount>\r\n");    this.writer.write("\t\t" + WikipediaXMLKeys.KEY_START_TIMESTAMP.getKeyword());    this.writer.write(d.getTimeStamp().toString());    this.writer.write(WikipediaXMLKeys.KEY_END_TIMESTAMP.getKeyword() + "\r\n");    this.writer.write("\t\t" + WikipediaXMLKeys.KEY_START_TEXT.getKeyword());    if (currentRevision != null) {      this.writer.write(currentRevision);      previousRevision=currentRevision;    }    this.writer.write(WikipediaXMLKeys.KEY_END_TEXT.getKeyword() + "\r\n");    this.writer.write("\t" + WikipediaXMLKeys.KEY_END_REVISION.getKeyword() + "\r\n");  }  this.writer.write(WikipediaXMLKeys.KEY_END_PAGE.getKeyword() + "\r\n");  this.writer.flush();}  }
class C{  public Response.Builder readResponse() throws IOException {  if (state != STATE_OPEN_REQUEST_BODY && state != STATE_READ_RESPONSE_HEADERS) {    throw new IllegalStateException("state: " + state);  }  try {    while (true) {      StatusLine statusLine=StatusLine.parse(source.readUtf8LineStrict());      Response.Builder responseBuilder=new Response.Builder().protocol(statusLine.protocol).code(statusLine.code).message(statusLine.message).headers(readHeaders());      if (statusLine.code != HTTP_CONTINUE) {        state=STATE_OPEN_RESPONSE_BODY;        return responseBuilder;      }    }  } catch (  EOFException e) {    IOException exception=new IOException("unexpected end of stream on " + streamAllocation);    exception.initCause(e);    throw exception;  }}  }
class C{  public boolean removeExchangeInfo(Exchange exchange){  if (exchangeInfoMap.remove(exchange) == null) {    return false;  } else {    return true;  }}  }
class C{  public SymbolTableEntryOriginal basicGetDelegationTarget(){  return delegationTarget;}  }
class C{  public String render(String resourceName,String screenName) throws GeneralException, IOException, SAXException, ParserConfigurationException {  ModelScreen modelScreen=ScreenFactory.getScreenFromLocation(resourceName,screenName);  if (modelScreen.getUseCache()) {    WidgetContextCacheKey wcck=new WidgetContextCacheKey(context);    String screenCombinedName=resourceName + ":" + screenName;    ScreenCache screenCache=new ScreenCache();    GenericWidgetOutput gwo=screenCache.get(screenCombinedName,wcck);    if (gwo == null) {      Writer sw=new StringWriter();      modelScreen.renderScreenString(sw,context,screenStringRenderer);      gwo=new GenericWidgetOutput(sw.toString());      screenCache.put(screenCombinedName,wcck,gwo);      writer.append(gwo.toString());    } else {      writer.append(gwo.toString());    }  } else {    context.put("renderFormSeqNumber",String.valueOf(renderFormSeqNumber));    modelScreen.renderScreenString(writer,context,screenStringRenderer);  }  return "";}  }
class C{  public ConsistencyException(String arg0){  super(arg0);}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName){  getCurrentProcessor().unparsedEntityDecl(this,name,publicId,systemId,notationName);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (external: ");  result.append(external);  result.append(')');  return result.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.228 -0400",hash_original_method="1212272BD01F83C868E797A5AC3981E4",hash_generated_method="B7ED7482547FB4C801E9956D267E111F") public CopyUtils(){}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  public void addProperty(String property,Boolean value){  add(property,createJsonElement(value));}  }
class C{  public TransformEdit(Figure figure,AffineTransform tx){  figures=new LinkedList<Figure>();  ((LinkedList<Figure>)figures).add(figure);  this.tx=(AffineTransform)tx.clone();}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public boolean write(Type type,Object value,NodeMap node,Map map){  WriteGraph graph=write.find(map);  if (graph != null) {    return graph.write(type,value,node);  }  return false;}  }
class C{  public boolean isNodeRelated(DefaultMutableTreeNode aNode){  return (aNode != null) && (getRoot() == aNode.getRoot());}  }
class C{  private void calcLabelYPosition(LayoutResult lr){  if (verticalAlignment == SwingUtilities.TOP) {    lr.labelRect.y=viewRect.y;  } else   if (verticalAlignment == SwingUtilities.CENTER) {    lr.labelRect.y=(int)(viewRect.y + (float)viewRect.height / 2 - (float)lr.labelRect.height / 2);  } else   if (verticalAlignment == SwingUtilities.BOTTOM) {    lr.labelRect.y=viewRect.y + viewRect.height - lr.labelRect.height;  }}  }
class C{  public void openKeyStore(File keyStoreFile){  openKeyStore(keyStoreFile,null);}  }
class C{  @org.junit.Test public void testResponseMatching(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  bot.setDebugLevel(Level.FINER);  text.input("this is a very complicated sentence");  String response=waitForOutput(output);  if (!response.equals("this is a good reply to that")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("this is very complicated sentence");  response=waitForOutput(output);  if (!response.equals("this is a good reply to that")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("this is a very complicated");  response=waitForOutput(output);  if (!response.equals("this is a good reply to that")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  bot.shutdown();}  }
class C{  @DSSource({DSSourceKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:52.900 -0500",hash_original_method="79DF1B5079137D62C29C5EAC0F3F40E2",hash_generated_method="A015978186413157B4AD18DBEEDB9864") public Socket createSocket(InetAddress address,int port,InetAddress myAddress,int myPort) throws IOException {  if (myAddress != null)   return new Socket(address,port,myAddress,myPort); else   if (port != 0) {    Socket sock=new Socket();    sock.bind(new InetSocketAddress(port));    sock.connect(new InetSocketAddress(address,port));    return sock;  } else   return new Socket(address,port);}  }
class C{  @Override public boolean connectionAllowed(String eventName){  return (m_listenee == null);}  }
class C{  private void editFilter(Filter filter){  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();  EditFilterWizard wizard=new EditFilterWizard();  wizard.init(newFilters,filter,filterFields);  WizardDialog dialog=new WizardDialog(window.getShell(),wizard);  dialog.open();}  }
class C{  public ToolbarArmedXYGraph(final XYGraph xyGraph){  this(xyGraph,XYGraphFlags.COMBINED_ZOOM);}  }
class C{  public JavaDocContext(TemplateContextType type,IDocument document,Position completionPosition,ICompilationUnit compilationUnit){  super(type,document,completionPosition,compilationUnit);}  }
class C{  private double[] computeLocalUsingPreviousObservations(double[] source,double[] destination,boolean isPreviousObservations) throws Exception {  double[][] newDestPastVectors;  double[][] newDestNextPastVectors;  double[][] newDestPastSourceVectors;  double[][] newDestNextPastSourceVectors;  if (isPreviousObservations) {    newDestPastVectors=destPastVectors;    newDestNextPastVectors=destNextPastVectors;    newDestPastSourceVectors=destPastSourceVectors;    newDestNextPastSourceVectors=destNextPastSourceVectors;  } else {    newDestPastVectors=makeJointVectorForPast(destination);    newDestNextPastVectors=makeJointVectorForNextPast(destination);    newDestPastSourceVectors=makeJointVectorForPastSource(destination,source);    newDestNextPastSourceVectors=makeJointVectorForNextPastSource(destination,source);  }  double te=0.0;  int numLocalObservations=newDestPastVectors.length;  double[] localTE;  int offset=0;  if (isPreviousObservations && addedMoreThanOneObservationSet) {    localTE=new double[numLocalObservations];    offset=0;  } else {    localTE=new double[numLocalObservations + k];    offset=k;  }  double countPast, countNextPast, countPastSource, countNextPastSource;  for (int b=0; b < numLocalObservations; b++) {    if (isPreviousObservations) {      countPast=mvkeDestinationPast.getCount(newDestPastVectors[b],b);      countNextPast=mvkeDestinationNextPast.getCount(newDestNextPastVectors[b],b);      countPastSource=mvkeDestinationPastSource.getCount(newDestPastSourceVectors[b],b);      countNextPastSource=mvkeDestinationNextPastSource.getCount(newDestNextPastSourceVectors[b],b);    } else {      countPast=mvkeDestinationPast.getCount(newDestPastVectors[b]);      countNextPast=mvkeDestinationNextPast.getCount(newDestNextPastVectors[b]);      countPastSource=mvkeDestinationPastSource.getCount(newDestPastSourceVectors[b]);      countNextPastSource=mvkeDestinationNextPastSource.getCount(newDestNextPastSourceVectors[b]);    }    double logTerm=0.0;    double local=0.0;    if (countNextPastSource > 0) {      logTerm=(countNextPastSource / countPastSource) / (countNextPast / countPast);      local=Math.log(logTerm) / Math.log(2.0);    }    localTE[offset + b]=local;    te+=local;    if (debug) {      System.out.println(b + ": " + logTerm+ " -> "+ local+ " -> sum: "+ te);    }  }  lastAverage=te / (double)numLocalObservations;  return localTE;}  }
class C{  X509KeySelector(KeyStore keyStore) throws KeyStoreException {  this(keyStore,true);}  }
class C{  public boolean isRecordSepsets(){  return recordSepsets;}  }
class C{  public void printHelp(int width,String cmdLineSyntax,String header,Options options,String footer){  printHelp(width,cmdLineSyntax,header,options,footer,false);}  }
class C{  public static String extendSelection(@Nullable String selection,@Nullable String selectionToAdd){  if (!TextUtils.isEmpty(selection)) {    if (TextUtils.isEmpty(selectionToAdd)) {      return selection;    }    StringBuilder selectionToAddBuilder=new StringBuilder();    selection=selectionToAddBuilder.append("(").append(selection).append(") AND (").append(selectionToAdd).append(")").toString();  } else {    selection=selectionToAdd;  }  return selection;}  }
class C{  public static final boolean equivalent(PngChunk c1,PngChunk c2){  if (c1 == c2)   return true;  if (c1 == null || c2 == null || !c1.id.equals(c2.id))   return false;  if (c1.crit)   return false;  if (c1.getClass() != c2.getClass())   return false;  if (!c2.allowsMultiple())   return true;  if (c1 instanceof PngChunkTextVar) {    return ((PngChunkTextVar)c1).getKey().equals(((PngChunkTextVar)c2).getKey());  }  if (c1 instanceof PngChunkSPLT) {    return ((PngChunkSPLT)c1).getPalName().equals(((PngChunkSPLT)c2).getPalName());  }  return false;}  }
class C{  public TLCJobChangeListener(Model model){  this.model=model;}  }
class C{  public KMLVec2(String namespaceURI){  super(namespaceURI);}  }
class C{  private static int clampSize(int size,int spec){  int specMode=MeasureSpec.getMode(spec);  int specSize=MeasureSpec.getSize(spec);switch (specMode) {case MeasureSpec.EXACTLY:{      return specSize;    }case MeasureSpec.AT_MOST:{    return Math.min(size,specSize);  }case MeasureSpec.UNSPECIFIED:default :{  return size;}}}  }
class C{  public final double distance(Point3d p){  return location.distance(p);}  }
class C{  public Launcher.ProcStarter launch(){  return launcher.launch().envs(environment).stderr(stderr).pwd(pwd);}  }
class C{  public T caseGateway(Gateway object){  return null;}  }
class C{  public final void addHelperText(@NonNull final CharSequence helperText){  ensureNotNull(helperText,"The helper text may not be null");  ensureNotEmpty(helperText,"The helper text may not be empty");  if (!helperTexts.contains(helperText)) {    helperTexts.add(helperText);    verifyPasswordStrength();  }}  }
class C{  public StatusBar(final Color newColor){  masterColor=newColor;  initialiseStatus("");}  }
class C{  @Override public AttachTodoObject copy(){  return new AttachTodoObject(this);}  }
class C{  public void overwriteCRS(CoordinateReferenceSystem crs){  this.crs=crs;  this.srid=CRSUtils.getSRID(crs);  for (  Zone<?> zone : zones) {    zone.getGeometry().setSRID(srid);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditem.class,args);}  }
class C{  @Override public void stopObserving(String shardId,String masterShardId,long timeoutMs) throws ShardManagerException, InterruptedException {  trace("[{}] shardId={} un-followed shardId={}",gondola.getHostId(),shardId,masterShardId);  Member.SlaveStatus status=gondola.getShard(shardId).getLocalMember().getSlaveStatus();  if (status == null) {    return;  }  String curMasterShardId=config.getMember(status.masterId).getShardId();  if (!curMasterShardId.equals(masterShardId)) {    throw new ShardManagerException(FAILED_STOP_SLAVE,String.format("Cannot stop slave due to follow different shard. current=%s, target=%s",curMasterShardId,masterShardId));  }  try {    gondola.getShard(shardId).getLocalMember().setSlave(-1);  } catch (  GondolaException e) {    throw new ShardManagerException(e);  }  try {    if (!Utils.pollingWithTimeout(null,timeoutMs / POLLING_TIMES,timeoutMs)) {      throw new ShardManagerException(FAILED_STOP_SLAVE,"timed out");    }  } catch (  ExecutionException e) {    throw new ShardManagerException(e);  }  observedShards.remove(masterShardId);}  }
class C{  public static void putByteField(Object obj,long fieldOff,byte val){  UNSAFE.putByte(obj,fieldOff,val);}  }
class C{  @Override public void run(){  amIActive=true;  String featureFile=null;  ShapeFile featureShape;  String dataFile=null;  ShapeFile dataShape;  String outputFile=null;  ShapeFile output;  String instructions=null;  int progress;  int previousProgress=0;  int i, n;  int numRecsFeature;  int numRecsData;  boolean blnSelect=true;  double distThreshold=0;  ShapeType featureShapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  outputFile=args[1];  for (i=0; i < args.length; i++) {    if (i == 0) {      if (args[i].toLowerCase().contains("isolate features from")) {        blnSelect=true;      } else       if (args[i].toLowerCase().contains("remove features from")) {        blnSelect=false;      }    } else     if (i == 1) {      featureFile=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("does not intersect")) {        instructions="notIntersect";      } else       if (args[i].toLowerCase().contains("intersect")) {        instructions="intersect";      } else       if (args[i].toLowerCase().contains("are completely within")) {        instructions="within";      } else       if (args[i].toLowerCase().contains("contains")) {        instructions="contains";      } else       if (args[i].toLowerCase().contains("does not contain")) {        instructions="notContain";      } else       if (args[i].toLowerCase().contains("covers")) {        instructions="covers";      } else       if (args[i].toLowerCase().contains("are covered by")) {        instructions="coveredBy";      } else       if (args[i].toLowerCase().contains("crosses")) {        instructions="crosses";      } else       if (args[i].toLowerCase().contains("touches")) {        instructions="touches";      } else       if (args[i].toLowerCase().contains("does not touch")) {        instructions="notTouch";      } else       if (args[i].toLowerCase().contains("are within a distance of")) {        instructions="distance";      }    } else     if (i == 3) {      dataFile=args[i];    } else     if (i == 4) {      outputFile=args[i];    } else     if (i == 5) {      if (!args[i].equals("not specified")) {        distThreshold=Double.parseDouble(args[i]);      }    }  }  if ((featureFile == null) || (dataFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    featureShape=new ShapeFile(featureFile);    featureShapeType=featureShape.getShapeType();    numRecsFeature=featureShape.getNumberOfRecords();    dataShape=new ShapeFile(dataFile);    numRecsData=dataShape.getNumberOfRecords();    AttributeTable reader=featureShape.getAttributeTable();    int numFields=reader.getFieldCount();    DBFField fields[]=new DBFField[numFields];    for (int a=0; a < reader.getFieldCount(); a++) {      DBFField inputField=reader.getField(a);      fields[a]=inputField;    }    outputShapeType=featureShapeType;    output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(featureShape);    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    updateProgress("Loop 1 of 2:",0);    n=0;    for (    ShapeFileRecord record : dataShape.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      n++;      progress=(int)(n * 100.0 / numRecsData);      if (progress != previousProgress) {        previousProgress=progress;        updateProgress("Loop 1 of 2:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    previousProgress=0;    if (instructions.equals("intersect")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.intersects(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("notIntersect")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (!g2.intersects(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("within")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.within(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("contains")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.contains(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("notContain")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (!g2.contains(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("covers")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.covers(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("coveredBy")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.coveredBy(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("crosses")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.crosses(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("touches")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.touches(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("notTouch")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (!g2.touches(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("distance")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.isWithinDistance(g1,distThreshold)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.GLOSSARY___WORD_1:    getWord_1().clear();  getWord_1().addAll((Collection<? extends Word_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void init(Resource connection,Map<String,Object> config) throws BaleenException {  if (config.containsKey(CONFIG_FILE)) {    file=new File(config.get(CONFIG_FILE).toString());  } else {    file=new File("gazetteer.txt");  }  if (!file.exists() || !file.canRead()) {    throw new InvalidParameterException("Unable to read file " + file.getPath());  }  super.init(connection,config);}  }
class C{  public boolean upField(){  return upField(currentField);}  }
class C{  @VisibleForTesting Collection<Range<Token>> createRepairRangeFrom(String beginToken,String endToken){  Token parsedBeginToken=getPartitioner().getTokenFactory().fromString(beginToken);  Token parsedEndToken=getPartitioner().getTokenFactory().fromString(endToken);  ArrayList<Range<Token>> repairingRange=new ArrayList<>();  ArrayList<Token> tokens=new ArrayList<>(tokenMetadata.sortedTokens());  if (!tokens.contains(parsedBeginToken)) {    tokens.add(parsedBeginToken);  }  if (!tokens.contains(parsedEndToken)) {    tokens.add(parsedEndToken);  }  Collections.sort(tokens);  int start=tokens.indexOf(parsedBeginToken), end=tokens.indexOf(parsedEndToken);  for (int i=start; i != end; i=(i + 1) % tokens.size()) {    Range<Token> range=new Range<>(tokens.get(i),tokens.get((i + 1) % tokens.size()));    repairingRange.add(range);  }  return repairingRange;}  }
class C{  public static void write(CharSequence from,File to,Charset charset) throws IOException {  asCharSink(to,charset).write(from);}  }
class C{  public void tryToDeleteOneToOneChat(ContactId contact){  mImDeleteOperationHandler.post(new OneToOneFileTransferDeleteTask(mFileTransferService,this,mLocalContentResolver,contact));  mImDeleteOperationHandler.post(new OneToOneChatMessageDeleteTask(mChatService,this,mLocalContentResolver,contact));}  }
class C{  public static double cdf(double x,double mu,double shape){  if (!(x > 0.)) {    return 0.;  }  final double v0=x / mu;  final double v1=Math.sqrt(shape / x);  if (v1 == 0.) {    return v0 > 0. ? 1 : 0.;  }  double c1=NormalDistribution.standardNormalCDF(v1 * (v0 - 1.));  double c2=NormalDistribution.standardNormalCDF(-v1 * (v0 + 1.));  return (c2 > 0.) ? c1 + Math.exp(2 * shape / mu) * c2 : c1;}  }
class C{  public boolean remove(int val){  if (!map.containsKey(val)) {    return false;  }  int idx=map.remove(val);  int lastValue=list.remove(list.size() - 1);  if (val != lastValue) {    list.set(idx,lastValue);    map.put(lastValue,idx);  }  return true;}  }
class C{  void defocusSearchText(){  getListView().requestFocus();}  }
class C{  public AbstractSimpleState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,PseudoState<S,E> pseudoState,Collection<Region<S,E>> regions){  super(id,deferred,entryActions,exitActions,pseudoState,regions);  this.ids=new ArrayList<S>();  this.ids.add(id);}  }
class C{  public TvShowEpisodeTreeNode(Object userObject){  super(userObject);}  }
class C{  public KDCOptions(byte[] options){  super(options.length * BITS_PER_UNIT,options);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private Builder(com.linkedin.camus.example.records.DummyLog2.Builder other){  super(other);}  }
class C{  @Override public void paintComponent(Graphics g){  super.paintComponent(g);  if (this.chart == null) {    return;  }  Graphics2D g2=(Graphics2D)g.create();  Dimension size=getSize();  Insets insets=getInsets();  Rectangle2D available=new Rectangle2D.Double(insets.left,insets.top,size.getWidth() - insets.left - insets.right,size.getHeight() - insets.top - insets.bottom);  boolean scale=false;  double drawWidth=available.getWidth();  double drawHeight=available.getHeight();  this.scaleX=1.0;  this.scaleY=1.0;  if (drawWidth < this.minimumDrawWidth) {    this.scaleX=drawWidth / this.minimumDrawWidth;    drawWidth=this.minimumDrawWidth;    scale=true;  } else   if (drawWidth > this.maximumDrawWidth) {    this.scaleX=drawWidth / this.maximumDrawWidth;    drawWidth=this.maximumDrawWidth;    scale=true;  }  if (drawHeight < this.minimumDrawHeight) {    this.scaleY=drawHeight / this.minimumDrawHeight;    drawHeight=this.minimumDrawHeight;    scale=true;  } else   if (drawHeight > this.maximumDrawHeight) {    this.scaleY=drawHeight / this.maximumDrawHeight;    drawHeight=this.maximumDrawHeight;    scale=true;  }  Rectangle2D chartArea=new Rectangle2D.Double(0.0,0.0,drawWidth,drawHeight);  if (this.useBuffer) {    if ((this.chartBuffer == null) || (this.chartBufferWidth != available.getWidth()) || (this.chartBufferHeight != available.getHeight())) {      this.chartBufferWidth=(int)available.getWidth();      this.chartBufferHeight=(int)available.getHeight();      GraphicsConfiguration gc=g2.getDeviceConfiguration();      this.chartBuffer=gc.createCompatibleImage(this.chartBufferWidth,this.chartBufferHeight,Transparency.TRANSLUCENT);      this.refreshBuffer=true;    }    if (this.refreshBuffer) {      this.refreshBuffer=false;      Rectangle2D bufferArea=new Rectangle2D.Double(0,0,this.chartBufferWidth,this.chartBufferHeight);      Graphics2D bufferG2=(Graphics2D)this.chartBuffer.getGraphics();      Composite savedComposite=bufferG2.getComposite();      bufferG2.setComposite(AlphaComposite.getInstance(AlphaComposite.CLEAR,0.0f));      Rectangle r=new Rectangle(0,0,this.chartBufferWidth,this.chartBufferHeight);      bufferG2.fill(r);      bufferG2.setComposite(savedComposite);      if (scale) {        AffineTransform saved=bufferG2.getTransform();        AffineTransform st=AffineTransform.getScaleInstance(this.scaleX,this.scaleY);        bufferG2.transform(st);        this.chart.draw(bufferG2,chartArea,this.anchor,this.info);        bufferG2.setTransform(saved);      } else {        this.chart.draw(bufferG2,bufferArea,this.anchor,this.info);      }    }    g2.drawImage(this.chartBuffer,insets.left,insets.top,this);  } else {    AffineTransform saved=g2.getTransform();    g2.translate(insets.left,insets.top);    if (scale) {      AffineTransform st=AffineTransform.getScaleInstance(this.scaleX,this.scaleY);      g2.transform(st);    }    this.chart.draw(g2,chartArea,this.anchor,this.info);    g2.setTransform(saved);  }  Iterator iterator=this.overlays.iterator();  while (iterator.hasNext()) {    Overlay overlay=(Overlay)iterator.next();    overlay.paintOverlay(g2,this);  }  drawZoomRectangle(g2,!this.useBuffer);  g2.dispose();  this.anchor=null;  this.verticalTraceLine=null;  this.horizontalTraceLine=null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_MEMBER_ANNOTATION_LIST__DECLARED_MODIFIERS:    return declaredModifiers != null && !declaredModifiers.isEmpty();case N4JSPackage.N4_MEMBER_ANNOTATION_LIST__OWNER:  return basicGetOwner() != null;}return super.eIsSet(featureID);}  }
class C{  public static final String characterPad(String s,int fieldLength,char padChar,boolean postpend){  char[] chArr=s.toCharArray();  int sLen=chArr.length;  if (sLen < fieldLength) {    char[] out=new char[fieldLength];    int blanks=fieldLength - sLen;    if (postpend) {      for (int i=0; i < sLen; i++) {        out[i]=chArr[i];      }      for (int i=sLen; i < fieldLength; i++) {        out[i]=padChar;      }    } else {      for (int i=0; i < blanks; i++) {        out[i]=padChar;      }      for (int i=blanks; i < fieldLength; i++) {        out[i]=chArr[i - blanks];      }    }    return String.valueOf(out);  }  return s;}  }
class C{  private void verifyErrorPayload(JavaResult javaResult) throws Exception {  EchoCommand command=javaResult.getBean(EchoCommand.class);  if (null == command || null == command.getStatus() || HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {    Error error=javaResult.getBean(Error.class);    log.info("Error response received from Hitachi server for messageID",command.getMessageID());    log.info("Hitachi command failed with error code:{} with message:{} for request:{}",new Object[]{error.getCode().toString(),error.getDescription(),error.getSource()});    throw HDSException.exceptions.errorResponseReceived(error.getCode(),error.getDescription());  }}  }
class C{  public Set<String> keySet(){  return data.keySet();}  }
class C{  public Castle(){  super();}  }
class C{  public int compareTo(Country country){  if (getName() == null) {    if (country.getName() == null) {      return 0;    } else {      return -1;    }  }  return getName().compareTo(country.getName());}  }
class C{  private AnnotationInvocationHandler asOneOfUs(Object o){  if (Proxy.isProxyClass(o.getClass())) {    InvocationHandler handler=Proxy.getInvocationHandler(o);    if (handler instanceof AnnotationInvocationHandler)     return (AnnotationInvocationHandler)handler;  }  return null;}  }
class C{  public static DocAttributeSet synchronizedView(DocAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new SynchronizedDocAttributeSet(attributeSet);}  }
class C{  public static boolean isMarkup(int c){  return c == '<' || c == '&' || c == '%';}  }
class C{  public int size(){  return internalMap.size();}  }
class C{  public LocalSolrQueryRequest makeRequest(String... q){  if (q.length == 1) {    return new LocalSolrQueryRequest(TestHarness.this.getCore(),q[0],qtype,start,limit,args);  }  if (q.length % 2 != 0) {    throw new RuntimeException("The length of the string array (query arguments) needs to be even");  }  Map.Entry<String,String>[] entries=new NamedListEntry[q.length / 2];  for (int i=0; i < q.length; i+=2) {    entries[i / 2]=new NamedListEntry<>(q[i],q[i + 1]);  }  NamedList nl=new NamedList(entries);  if (nl.get("wt") == null)   nl.add("wt","xml");  return new LocalSolrQueryRequest(TestHarness.this.getCore(),nl);}  }
class C{  @Override public void onDeleteUser(User user,int position){  Settings settings=user.getSettings();  mSettingsDataSource.delete(settings);  List<Completion> completions=user.getCompletions();  for (  Completion completion : completions)   completion.delete();  List<Statistics> statistics=user.getStatistics();  for (  Statistics statistic : statistics)   statistic.delete();  user.delete();  mListAdapter.removeAt(position);}  }
class C{  private void decorateVolumeInformationFinalIngest(IngestionRequestContext requestContext,UnManagedVolume unManagedVolume){  RecoverPointVolumeIngestionContext volumeContext=(RecoverPointVolumeIngestionContext)requestContext.getVolumeContext();  ProtectionSet pset=volumeContext.getManagedProtectionSet();  BlockConsistencyGroup cg=volumeContext.getManagedBlockConsistencyGroup();  if (pset.getVolumes() == null) {    _logger.error("No volumes found in protection set: " + pset.getLabel() + ", cannot process ingestion");    throw IngestionException.exceptions.noVolumesFoundInProtectionSet(pset.getLabel());  }  List<Volume> volumes=new ArrayList<Volume>();  for (  String volId : pset.getVolumes()) {    BlockObject volume=requestContext.getRootIngestionRequestContext().findCreatedBlockObject(URI.create(volId));    if (volume != null && volume instanceof Volume) {      volumes.add((Volume)volume);    }  }  volumes.add((Volume)volumeContext.getManagedBlockObject());  Set<DataObject> updatedObjects=new HashSet<DataObject>();  VolumeIngestionUtil.decorateRPVolumesCGInfo(volumes,pset,cg,updatedObjects,_dbClient,requestContext);  VolumeIngestionUtil.clearPersistedReplicaFlags(requestContext,volumes,updatedObjects,_dbClient);  clearReplicaFlagsInIngestionContext(volumeContext,volumes);  for (  DataObject volume : updatedObjects) {    if (volumeContext.getManagedBlockObject().getId().equals(volume.getId()) && (null == _dbClient.queryObject(Volume.class,volume.getId()))) {      continue;    } else {      volumeContext.addDataObjectToUpdate(volume,unManagedVolume);    }  }}  }
class C{  private static int NextSpaceCol(String str,int col){  String[] splitStr=str.substring(col).split(" ");  if (splitStr.length == 0) {    return col;  }  return col + splitStr[0].length();}  }
class C{  public synchronized String write(T date) throws Exception {  return DateType.getText(date);}  }
class C{  public String toHexString(){  StringBuffer buf=new StringBuffer();  buf.append("0x" + Integer.toHexString(_dataChars[0]));  for (int i=1; i < _nDataChars; i++) {    buf.append(", 0x" + Integer.toHexString(_dataChars[i]));  }  return buf.toString();}  }
class C{  public void keyPressed(KeyEvent e){  char input=e.getKeyChar();  int code=e.getKeyCode();  e.consume();  if (code == KeyEvent.VK_DELETE)   input='A'; else   if (code == KeyEvent.VK_BACK_SPACE)   input='C'; else   if (code == KeyEvent.VK_ENTER)   input='='; else   if (code == KeyEvent.VK_SHIFT)   return; else   if (code == KeyEvent.VK_CANCEL || code == KeyEvent.VK_ESCAPE) {    m_abort=true;    dispose();    return;  }  handleInput(input);}  }
class C{  public boolean isComputed(int i){  return (masks[i] & COMPUTED_MASK) != 0;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    ZLabel label=uiComp.findFirstLabelChild();    if (label != null)     return label.getText();  }  return null;}  }
class C{  static public String generateSaveFileName(Context c,String fileName){  String path=getSaveFilePath(c) + File.separator + fileName;  return path;}  }
class C{  public Map merge(ConfigObject other){  return doMerge(this,other);}  }
class C{  public void testSetDefaultSSLSocketFactory() throws Throwable {  SSLContext ctx=getContext();  SSLServerSocket ss=(SSLServerSocket)ctx.getServerSocketFactory().createServerSocket(0);  SSLSocketFactory socketFactory=(SSLSocketFactory)ctx.getSocketFactory();  HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);  assertSame("Default SSLSocketFactory differs from expected",socketFactory,HttpsURLConnection.getDefaultSSLSocketFactory());  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://localhost:" + ss.getLocalPort());  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();  TestHostnameVerifier hnv_late=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv_late);  SSLSocket peerSocket=(SSLSocket)doInteraction(connection,ss);  checkConnectionStateParameters(connection,peerSocket);  assertTrue("Hostname verification was not done",hnv.verified);  assertFalse("Hostname verification should not be done by this verifier",hnv_late.verified);  assertSame("Default SSLSocketFactory should be used",HttpsURLConnection.getDefaultSSLSocketFactory(),connection.getSSLSocketFactory());  connection.connect();}  }
class C{  public MenuNotUnified(){  super("NotUnified");}  }
class C{  public static boolean testCircleTriangle(double centerX,double centerY,double radiusSquared,double v0X,double v0Y,double v1X,double v1Y,double v2X,double v2Y){  double c1x=centerX - v0X, c1y=centerY - v0Y;  double c1sqr=c1x * c1x + c1y * c1y - radiusSquared;  if (c1sqr <= 0.0)   return true;  double c2x=centerX - v1X, c2y=centerY - v1Y;  double c2sqr=c2x * c2x + c2y * c2y - radiusSquared;  if (c2sqr <= 0.0)   return true;  double c3x=centerX - v2X, c3y=centerY - v2Y;  double c3sqr=c3x * c3x + c3y * c3y - radiusSquared;  if (c3sqr <= 0.0)   return true;  double e1x=v1X - v0X, e1y=v1Y - v0Y;  double e2x=v2X - v1X, e2y=v2Y - v1Y;  double e3x=v0X - v2X, e3y=v0Y - v2Y;  if (e1x * c1y - e1y * c1x >= 0.0 && e2x * c2y - e2y * c2x >= 0.0 && e3x * c3y - e3y * c3x >= 0.0)   return true;  double k=c1x * e1x + c1y * e1y;  if (k >= 0.0) {    double len=e1x * e1x + e1y * e1y;    if (k <= len) {      if (c1sqr * len <= k * k)       return true;    }  }  k=c2x * e2x + c2y * e2y;  if (k > 0.0) {    double len=e2x * e2x + e2y * e2y;    if (k <= len) {      if (c2sqr * len <= k * k)       return true;    }  }  k=c3x * e3x + c3y * e3y;  if (k >= 0.0) {    double len=e3x * e3x + e3y * e3y;    if (k < len) {      if (c3sqr * len <= k * k)       return true;    }  }  return false;}  }
class C{  public static <S extends HasMouseUpHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MouseUpEvent event=new MouseUpEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  private static String replaceChars(String str){  StringBuffer buf=new StringBuffer(str);  int length=buf.length();  for (int i=0; i < length; i++) {    char currentChar=buf.charAt(i);    if (currentChar == ' ') {      buf.setCharAt(i,'%');      buf.insert(i + 1,"20");      length=length + 2;      i=i + 2;    } else     if (currentChar == '\\') {      buf.setCharAt(i,'/');    }  }  return buf.toString();}  }
class C{  public void generateErrorCodes(List<ApiErrorCode> serviceCodes){  Map<String,Object> parameters=new HashMap<String,Object>();  parameters.put("errorCodes",serviceCodes);  parameters.put("title","Error Codes");  addCommonTemplateParameters(parameters);  TemplateEngine.generateFileFromTemplate(KnownPaths.getTemplateFile(ERROR_CODES_TEMPLATE),KnownPaths.getHtmlOutputFile(ERROR_CODES_TEMPLATE),parameters);}  }
class C{  public ErrorInfoHeader createErrorInfoHeader(URI errorInfo){  if (errorInfo == null)   throw new NullPointerException("null arg");  return new ErrorInfo((GenericURI)errorInfo);}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  protected String deriveLogicalMetricName(String metric,SingleMetricAggregator aggregator){  Name aggregatorName=aggregator.getClass().getAnnotation(Name.class);  String aggregatorDesc;  if (aggregatorName == null) {    aggregatorDesc=aggregator.getClass().getName();  } else {    aggregatorDesc=aggregatorName.value();  }  return aggregatorDesc + aggregatorMetricSeparator + metric;}  }
class C{  public static <T>List<T> concatenate(List<List<T>> lists){  List<T> result=new ArrayList<T>();  for (  List<T> list : lists) {    result.addAll(list);  }  return result;}  }
class C{  public boolean isInJavadoc(){  return false;}  }
class C{  public static void suspend(final TargetProcessThread thread){  thread.setState(ThreadState.SUSPENDED);}  }
class C{  protected void prepare(){  AD_Client_ID=Integer.parseInt(Env.getContext(Env.getCtx(),"#AD_Client_ID"));  ProcessInfoParameter[] para=getParameter();  AD_PInstance_ID=getAD_PInstance_ID();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("S_Resource_ID")) {      p_S_Resource_ID=((BigDecimal)para[i].getParameter()).intValue();    } else     if (name.equals("DateFrom")) {      p_DateFrom=((Timestamp)para[i].getParameter());    } else     if (name.equals("DateTo")) {      p_DateTo=((Timestamp)para[i].getParameter());    } else     if (name.equals("FrequencyType")) {      p_FrequencyType=((String)para[i].getParameter());    } else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getC_Location_ID() == 0)   return false;  if (!newRecord)   return true;  MLocation address=getLocation(true);  m_uniqueName=getName();  m_unique=MSysConfig.getIntValue("START_VALUE_BPLOCATION_NAME",0,getAD_Client_ID(),getAD_Org_ID());  if (m_unique < 0 || m_unique > 4)   m_unique=0;  if (m_uniqueName != null && m_uniqueName.equals(".")) {    m_uniqueName=null;    makeUnique(address);  }  MBPartnerLocation[] locations=getForBPartner(getCtx(),getC_BPartner_ID());  boolean unique=locations.length == 0;  while (!unique) {    unique=true;    for (int i=0; i < locations.length; i++) {      MBPartnerLocation location=locations[i];      if (location.getC_BPartner_Location_ID() == get_ID())       continue;      if (m_uniqueName.equals(location.getName())) {        m_unique++;        makeUnique(address);        unique=false;        break;      }    }  }  setName(m_uniqueName);  return true;}  }
class C{  public boolean isDateAllowed(LocalDate date){  if (date == null) {    return allowEmptyDates;  }  return (!(InternalUtilities.isDateVetoed(vetoPolicy,date)));}  }
class C{  private String diff_wordsToCharsMunge(String text,List<String> lineArray,Map<String,Integer> lineHash){  int lineStart=0;  int lineEnd=-1;  String line;  StringBuilder chars=new StringBuilder();  while (lineEnd < text.length() - 1) {    String patternStr="[. :;\\[\\]\\{\\}\\(\\)\\+!?\\-]";    Pattern pattern=Pattern.compile(patternStr);    Matcher matcher=pattern.matcher(text);    matcher.region(lineStart,text.length());    if (matcher.find()) {      lineEnd=matcher.start();    } else     lineEnd=-1;    if (lineEnd == -1) {      lineEnd=text.length() - 1;    }    line=text.substring(lineStart,lineEnd + 1);    lineStart=lineEnd + 1;    if (lineHash.containsKey(line)) {      chars.append(String.valueOf((char)(int)lineHash.get(line)));    } else {      lineArray.add(line);      lineHash.put(line,lineArray.size() - 1);      chars.append(String.valueOf((char)(lineArray.size() - 1)));    }  }  return chars.toString();}  }
class C{  public void addRootBlock(Block block,boolean isNewBlock){  if (block == null) {    throw new IllegalArgumentException("Cannot add a null block as a root block");  }  if (block.getPreviousBlock() != null) {    throw new IllegalArgumentException("Root blocks may not have a previous block");  }  if (mRootBlocks.contains(block)) {    throw new IllegalArgumentException("Block is already a root block.");  }  mRootBlocks.add(block);  if (isNewBlock) {    mStats.collectStats(block,true);  }}  }
class C{  protected int parseLogOffset(final byte[] result) throws ProtocolException {  if (checkOk(result)) {    if (ByteArray.byteArrayToInt(result,4) == 4) {      return ByteArray.byteArrayToInt(result,8);    }    return 0;  }  return -1;}  }
class C{  public static BayesUpdaterClassifier serializableInstance(){  return new BayesUpdaterClassifier(MlBayesIm.serializableInstance(),DataUtils.discreteSerializableInstance());}  }
class C{  public double deltaLatitude(){  return this.maxLatitude - this.minLatitude;}  }
class C{  public void filterEvent(ReplDBMSEvent event,RowChangeData rdata) throws ReplicatorException {  for (Iterator<OneRowChange> itORC=rdata.getRowChanges().iterator(); itORC.hasNext(); ) {    OneRowChange orc=itORC.next();    if (orc.getAction() != ActionType.INSERT)     continue;    if (orc.getSchemaName().compareToIgnoreCase(tungstenSchema) == 0) {      if (logger.isDebugEnabled())       logger.debug("Ignoring " + tungstenSchema + " schema");      continue;    }    for (    Object o : definitions) {      JSONObject jo=(JSONObject)o;      String defSchema=(String)jo.get("schema");      String defTable=(String)jo.get("table");      String defColumn=(String)jo.get("column");      if ((defSchema.equals("*") || defSchema.equals(orc.getSchemaName())) && (defTable.equals("*") || defTable.equals(orc.getTableName()))) {        ArrayList<ColumnSpec> colSpecs=orc.getColumnSpec();        ArrayList<ArrayList<OneRowChange.ColumnVal>> colValues=orc.getColumnValues();        for (int col=0; col < colSpecs.size(); col++) {          ColumnSpec colSpec=colSpecs.get(col);          if (colSpec.getName() == null) {            throw new ReplicatorException("Expected to filter column, but column name is undefined: " + orc.getSchemaName() + "."+ orc.getTableName()+ "["+ colSpec.getIndex()+ "]");          }          if (defColumn.equals("*") || defColumn.equals(colSpec.getName())) {            JSONArray defValues=(JSONArray)jo.get("values");            for (Iterator<ArrayList<ColumnVal>> itValuesInRow=colValues.iterator(); itValuesInRow.hasNext(); ) {              ArrayList<ColumnVal> valuesInRow=itValuesInRow.next();              ColumnVal colValue=valuesInRow.get(col);              if (colValue.getValue() != null && defValues.contains(colValue.getValue().toString())) {                itValuesInRow.remove();                logger.info(String.format("Row INSERT removed: seqno=%d schema=%s table=%s column=%s value=%s",event.getSeqno(),orc.getSchemaName(),orc.getTableName(),colSpec.getName(),colValue.getValue().toString()));                if (colValues.size() == 0)                 itORC.remove();              }            }          }        }      }    }  }}  }
class C{  public static int[] toIntArray(short[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(int)array[i];  }  return result;}  }
class C{  public String seedTipText(){  return "The random seed used by the random" + " number generator used for generating" + " the random matrix ";}  }
class C{  protected void processCloudletStatus(SimEvent ev){  int cloudletId=0;  int userId=0;  int vmId=0;  int containerId=0;  int status=-1;  try {    int data[]=(int[])ev.getData();    cloudletId=data[0];    userId=data[1];    vmId=data[2];    containerId=data[3];    status=getVmAllocationPolicy().getHost(vmId,userId).getContainerVm(vmId,userId).getContainer(containerId,userId).getContainerCloudletScheduler().getCloudletStatus(cloudletId);  } catch (  ClassCastException c) {    try {      ContainerCloudlet cl=(ContainerCloudlet)ev.getData();      cloudletId=cl.getCloudletId();      userId=cl.getUserId();      containerId=cl.getContainerId();      status=getVmAllocationPolicy().getHost(vmId,userId).getContainerVm(vmId,userId).getContainer(containerId,userId).getContainerCloudletScheduler().getCloudletStatus(cloudletId);    } catch (    Exception e) {      Log.printConcatLine(getName(),": Error in processing CloudSimTags.CLOUDLET_STATUS");      Log.printLine(e.getMessage());      return;    }  }catch (  Exception e) {    Log.printConcatLine(getName(),": Error in processing CloudSimTags.CLOUDLET_STATUS");    Log.printLine(e.getMessage());    return;  }  int[] array=new int[3];  array[0]=getId();  array[1]=cloudletId;  array[2]=status;  int tag=CloudSimTags.CLOUDLET_STATUS;  sendNow(userId,tag,array);}  }
class C{  public ODGPathFigure(){  add(new ODGBezierFigure());  ODGAttributeKeys.setDefaults(this);}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue,RejectedExecutionHandler handler){  this(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,Executors.defaultThreadFactory(),handler);}  }
class C{  @Override protected void rollbackCastlingMove(Move move){  FischerRandomUtils.rollbackCastlingMove(this,move,initialKingFile,initialShortRookFile,initialLongRookFile);}  }
class C{  protected int _columnOffset(int absRank){  return columnOffsets[absRank];}  }
class C{  static InterpretedFunction createFunction(Context cx,Scriptable scope,InterpretedFunction parent,int index){  InterpretedFunction f=new InterpretedFunction(parent,index);  f.initInterpretedFunction(cx,scope);  return f;}  }
class C{  public JSONNode(String name,String value){  this(name,value,NodeType.PRIMITIVE);}  }
class C{  void modifyNetwork(Network network){}  }
class C{  private static boolean isThreeBytesSequence(byte b){  return -32 <= b && b <= -17;}  }
class C{  private int createCheckpoint(Connection conn,String key,byte[] state,Time expTime) throws SQLException {  PreparedStatement st=null;  try {    st=conn.prepareStatement(insSql);    st.setString(1,key);    st.setBytes(2,state);    st.setTime(3,expTime);    return st.executeUpdate();  }  finally {    U.close(st,log);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:11.076 -0500",hash_original_method="D6AAE40F539D7383E827DA395512E95B",hash_generated_method="6CAFD55FB74ECA4404786941388DD45A") public PointerProperties(){  clear();}  }
class C{  public void beforeProcessMessage(DistributionManager dm,DistributionMessage message){}  }
class C{  private ExprCfg parseSimpleTerm(){  int ch=read();  ch=skipWhitespace(ch);switch (ch) {case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':{      long value=0;      double exp=1;      int digits=0;      for (; ch >= '0' && ch <= '9'; ch=read())       value=10 * value + ch - '0';      if (ch != '.' && ch != 'e' && ch != 'E') {        unread();        return new ExprCfgLong(value);      }      if (ch == '.') {        for (ch=read(); ch >= '0' && ch <= '9'; ch=read()) {          value=10 * value + ch - '0';          exp*=10;          digits--;        }      }      if (ch == 'e' || ch == 'E') {        int sign=1;        int expValue=0;        ch=read();        if (ch == '-') {          sign=-1;          ch=read();        } else         if (ch == '+')         ch=read();        for (; ch >= '0' && ch <= '9'; ch=read())         expValue=10 * expValue + ch - '0';        exp=Math.pow(10,digits + sign * expValue);        unread();        return new ExprCfgDouble((double)value * (double)exp);      }      unread();      return new ExprCfgDouble((double)value / (double)exp);    }case '+':{    return parseTerm();  }case '(':{  int index=_index;  ch=skipWhitespace(read());  _index=index;  ExprCfg expr=parseExpr();  ch=skipWhitespace(read());  if (ch != ')') {    throw error(L.l("Expected `)' at {0}.  All open parentheses must have matching closing parentheses.",badChar(ch)));  }  return expr;}case '\'':case '"':{int end=ch;CharBuffer cb=_cb;cb.clear();for (ch=read(); ch >= 0; ch=read()) {  if (ch == '\\')   cb.append((char)read()); else   if (ch != end)   cb.append((char)ch); else   if ((ch=read()) == end)   cb.append((char)ch); else {    unread();    break;  }}return new ExprCfgString(cb.toString());}default :if (!Character.isJavaIdentifierStart((char)ch) && ch != ':') {throw error(L.l("Unexpected character at {0}.",badChar(ch)));}CharBuffer cb=_cb;cb.clear();for (; Character.isJavaIdentifierPart((char)ch) || ch == ':'; ch=read()) cb.append((char)ch);unread();if (cb.charAt(cb.length() - 1) == ':') {unread();cb.deleteCharAt(cb.length() - 1);}String name=cb.toString();return new ExprCfgId(name);}}  }
class C{  @Override public Message makeAlertMessage(byte[] payloadBytes) throws ProtocolException {  return new AlertMessage(params,payloadBytes);}  }
class C{  public boolean isValuesEmpty(){  return values.isEmpty();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final Instances resample(Random random){  Instances newData=new Instances(this,numInstances());  while (newData.numInstances() < numInstances()) {    int i=(int)(random.nextDouble() * (double)numInstances());    newData.add(instance(i));  }  return newData;}  }
class C{  private void updateEmptySearchBackgroundBounds(){  if (mEmptySearchBackground == null) {    return;  }  int x=(getMeasuredWidth() - mEmptySearchBackground.getIntrinsicWidth()) / 2;  int y=mEmptySearchBackgroundTopOffset;  mEmptySearchBackground.setBounds(x,y,x + mEmptySearchBackground.getIntrinsicWidth(),y + mEmptySearchBackground.getIntrinsicHeight());}  }
class C{  void installBorder(JRootPane root){  int style=root.getWindowDecorationStyle();  if (style == JRootPane.NONE) {    LookAndFeel.uninstallBorder(root);  } else {    LookAndFeel.installBorder(root,borderKeys[style]);  }}  }
class C{  private void removeActiveMessage(){  final int status=smsPopupPager.removeActiveMessage();  if (status == SmsPopupPager.STATUS_NO_MESSAGES_REMAINING) {    myFinish();  }}  }
class C{  public static void main(final String[] args){  final File f=new File(args[0]);  if (f.exists())   FileUtils.deletedelete(f);  try {    final CachedRecords t=new CachedRecords(f,8);    final byte[] b=new byte[8];    t.add("01234567".getBytes(),0);    t.add("ABCDEFGH".getBytes(),0);    t.add("abcdefgh".getBytes(),0);    t.add("--------".getBytes(),0);    t.add("********".getBytes(),0);    for (int i=0; i < 1000; i++)     t.add("++++++++".getBytes(),0);    t.add("=======0".getBytes(),0);    t.add("=======1".getBytes(),0);    t.add("=======2".getBytes(),0);    t.cleanLast(b,0);    System.out.println(UTF8.String(b));    t.cleanLast(b,0);    System.out.println(UTF8.String(b));    t.get(1,b,0);    System.out.println(UTF8.String(b));    t.put(1,"AbCdEfGh".getBytes(),0);    t.get(1,b,0);    System.out.println(UTF8.String(b));    t.get(3,b,0);    System.out.println(UTF8.String(b));    t.get(4,b,0);    System.out.println(UTF8.String(b));    System.out.println("size = " + t.size());    t.cleanLast();    final long start=System.currentTimeMillis();    long c=0;    for (int i=0; i < 100000; i++) {      c=t.size();    }    System.out.println("size() needs " + ((System.currentTimeMillis() - start) / 100) + " nanoseconds");    System.out.println("size = " + c);    t.close();  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }}  }
class C{  public boolean isAssociationExist(Association assoc,int regLevel){  String temFileExt=null;  String temMimeType=assoc.getMimeType();  Iterator<String> temFileExtIter;  if (assoc.getFileExtList() != null) {    temFileExtIter=assoc.getFileExtList().iterator();  } else {    temFileExtIter=null;  }  if (temFileExtIter != null) {    if (temFileExtIter.hasNext()) {      temFileExt=(String)temFileExtIter.next();    }  }  if (WinRegistryUtil.isWin2kUserDefinedFileExtExist(temFileExt)) {    return true;  }  if ((temMimeType == null) && (temFileExt == null)) {    return false;  } else   if ((temMimeType == null) && (temFileExt != null)) {    return WinRegistryUtil.isFileExtExist(temFileExt,regLevel);  } else   if ((temMimeType != null) && (temFileExt == null)) {    return WinRegistryUtil.isMimeTypeExist(temMimeType,regLevel);  } else {    String regMimeType=WinRegistryUtil.getMimeTypeByFileExt(temFileExt,regLevel);    String regFileExt=WinRegistryUtil.getFileExtByMimeType(temMimeType,regLevel);    return ((WinRegistryUtil.isMimeTypeExist(temMimeType,regLevel)) && (WinRegistryUtil.isFileExtExist(temFileExt,regLevel)) && (temFileExt == null ? regFileExt == null : temFileExt.equals(regFileExt))&& (temMimeType == null ? regMimeType == null : temMimeType.equals(regMimeType)));  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.BINDING_PATTERN;}  }
class C{  @Override final public Void visit(final ASTNamedSubqueryInclude node,final Object data) throws VisitorException {  final NamedSubqueryInclude includeNode=new NamedSubqueryInclude(node.getName());  graphPattern.add(includeNode);  return null;}  }
class C{  public synchronized void transactionErrorEvent(SIPTransactionErrorEvent transactionErrorEvent){  SIPTransaction transaction=(SIPTransaction)transactionErrorEvent.getSource();  if (transactionErrorEvent.getErrorID() == SIPTransactionErrorEvent.TRANSPORT_ERROR) {    transaction.setState(SIPTransaction.TERMINATED_STATE);    if (transaction instanceof SIPServerTransaction) {      ((SIPServerTransaction)transaction).collectionTime=0;    }    transaction.disableTimeoutTimer();    transaction.disableRetransmissionTimer();  }}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof ConditionContainer))   return false;  ConditionContainer container=(ConditionContainer)o;  if (minimumShouldMatch != container.minimumShouldMatch)   return false;  if (must != null ? !must.equals(container.must) : container.must != null)   return false;  return should != null ? should.equals(container.should) : container.should == null;}  }
class C{  public boolean isThumbnailCompressed(){  return mData.hasCompressedThumbnail();}  }
class C{  public boolean equals(Object o){  if (o instanceof User) {    User other=(User)o;    return other._lowerNick.equals(_lowerNick);  }  return false;}  }
class C{  private CASHInterval determineNextIntervalAtMaxLevel(ObjectHeap<IntegerPriorityObject<CASHInterval>> heap){  CASHInterval next=doDetermineNextIntervalAtMaxLevel(heap);  while (next == null) {    if (heap.isEmpty()) {      return null;    }    next=doDetermineNextIntervalAtMaxLevel(heap);  }  return next;}  }
class C{  public static Container east(Component east){  return Container.encloseIn(new BorderLayout(),east,BorderLayout.EAST);}  }
class C{  public static String extractFromCode128(String code){  if (code.length() < 16) {    return null;  }  if (code.startsWith("01") || code.startsWith("02")) {    return code.substring(2,16);  }  return null;}  }
class C{  private void createNotice(MProduct product,String msg){  String productValue=product != null ? product.getValue() : "-";  addLog("WARNING: Product " + productValue + ": "+ msg);}  }
class C{  public BasicPoolEntry allocEntry(final Object state){  if (!freeEntries.isEmpty()) {    ListIterator<BasicPoolEntry> it=freeEntries.listIterator(freeEntries.size());    while (it.hasPrevious()) {      BasicPoolEntry entry=it.previous();      if (LangUtils.equals(state,entry.getState())) {        it.remove();        return entry;      }    }  }  if (!freeEntries.isEmpty()) {    BasicPoolEntry entry=freeEntries.remove();    entry.setState(null);    OperatedClientConnection conn=entry.getConnection();    try {      conn.close();    } catch (    IOException ex) {      log.debug("I/O error closing connection",ex);    }    return entry;  }  return null;}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration<String> keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key != null) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  public void removeBiomeType(BiomeDictionary.Type type){  ArrayList<BiomeGenBase> entryList=new ArrayList<BiomeGenBase>();  entryList.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(type)));  for (  BiomeGenBase biome : entryList) {    Iterator<BiomeEntry> iterator=allowedBiomes.iterator();    while (iterator.hasNext()) {      if (BiomeDictionary.areBiomesEquivalent(iterator.next().biome,biome))       iterator.remove();    }  }}  }
class C{  public int showInputDialogForPositiveIntegerInput(final String message,final String suggestedInput){  String lineWidth=suggestedInput;  while (1 > 0) {    lineWidth=JOptionPane.showInputDialog(null,message,lineWidth);    if (lineWidth == null) {      return 0;    }    try {      return Integer.parseInt(lineWidth);    } catch (    final NumberFormatException ex) {      JOptionPane.showMessageDialog(null,"'" + lineWidth + "' is not a valid positive integer value.","Invalid Input",JOptionPane.ERROR_MESSAGE);    }  }}  }
class C{  private void computeEncryptionKey() throws PdfSecurityException {  final MessageDigest md;  final byte[] key=getPaddedKey(encryptionPassword,encryptionPassword);  try {    md=MessageDigest.getInstance("MD5");    encryptionKey=md.digest(key);    if (rev >= 3) {      for (int ii=0; ii < 50; ii++) {        encryptionKey=md.digest(encryptionKey);      }    }  } catch (  final Exception e) {    throw new PdfSecurityException("Exception " + e + " generating encryption key");  }}  }
class C{  public void init(boolean isSecure,CharSequence host,int port,byte[] uri,int uriLength){  _isSecure=isSecure;  _host=host;  _port=port;  _uri=uri;  _uriLength=uriLength;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatagetlength.class,args);}  }
class C{  public void recalculate(){  if (getHeight() > 0 && getWidth() > 0) {    calculateBaseOffsets();    calculateCurrentOffsets();  }}  }
class C{  private void closeAllConnections(){  for (  Entry<String,CimConnection> connectionEntry : _connections.entrySet()) {    connectionEntry.getValue().close();  }  _connections.clear();  connectionLastTouch.clear();}  }
class C{  public int[] addWrapField(ReadablePartial instant,int fieldIndex,int[] values,int valueToAdd){  throw unsupported();}  }
class C{  public HeadPhaseBuilder<S> findFirst(S defaultValue){  assert defaultValue != null : "defaultValue cannot be null";  pipelineBuilder().appendFindFirst(defaultValue,elementClass,null,null,null);  return new HeadPhaseBuilder<>(pipelineBuilder());}  }
class C{  public Scroller(Context context){  this(context,null);}  }
class C{  void flowFields(Environment env,Label lbl,MemberDefinition locals[]){  if (lbl.locals != null) {    MemberDefinition f[]=lbl.locals;    for (int i=0; i < maxvar; i++) {      if (f[i] != locals[i]) {        f[i]=null;      }    }    return;  }  lbl.locals=new MemberDefinition[maxvar];  System.arraycopy(locals,0,lbl.locals,0,maxvar);  MemberDefinition newlocals[]=new MemberDefinition[maxvar];  System.arraycopy(locals,0,newlocals,0,maxvar);  locals=newlocals;  for (Instruction inst=lbl.next; inst != null; inst=inst.next) {switch (inst.opc) {case opc_istore:case opc_istore_0:case opc_istore_1:case opc_istore_2:case opc_istore_3:case opc_fstore:case opc_fstore_0:case opc_fstore_1:case opc_fstore_2:case opc_fstore_3:case opc_astore:case opc_astore_0:case opc_astore_1:case opc_astore_2:case opc_astore_3:case opc_lstore:case opc_lstore_0:case opc_lstore_1:case opc_lstore_2:case opc_lstore_3:case opc_dstore:case opc_dstore_0:case opc_dstore_1:case opc_dstore_2:case opc_dstore_3:      if (inst.value instanceof LocalVariable) {        LocalVariable v=(LocalVariable)inst.value;        locals[v.slot]=v.field;      }    break;case opc_label:  flowFields(env,(Label)inst,locals);return;case opc_ifeq:case opc_ifne:case opc_ifgt:case opc_ifge:case opc_iflt:case opc_ifle:case opc_if_icmpeq:case opc_if_icmpne:case opc_if_icmpgt:case opc_if_icmpge:case opc_if_icmplt:case opc_if_icmple:case opc_if_acmpeq:case opc_if_acmpne:case opc_ifnull:case opc_ifnonnull:case opc_jsr:flowFields(env,(Label)inst.value,locals);break;case opc_goto:flowFields(env,(Label)inst.value,locals);return;case opc_return:case opc_ireturn:case opc_lreturn:case opc_freturn:case opc_dreturn:case opc_areturn:case opc_athrow:case opc_ret:return;case opc_tableswitch:case opc_lookupswitch:{SwitchData sw=(SwitchData)inst.value;flowFields(env,sw.defaultLabel,locals);for (Enumeration<Label> e=sw.tab.elements(); e.hasMoreElements(); ) {flowFields(env,e.nextElement(),locals);}return;}case opc_try:{Vector<CatchData> catches=((TryData)inst.value).catches;for (Enumeration<CatchData> e=catches.elements(); e.hasMoreElements(); ) {CatchData cd=e.nextElement();flowFields(env,cd.getLabel(),locals);}break;}}}}  }
class C{  @Step("Asserting element {1} is not clickable after {2} seconds") public static void assertElementIsNotClickableAfter(AugmentedFunctions driver,By by,int timeoutInSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(by);  try {    driver.findElementClickableAfter(by,timeoutInSeconds);    org.junit.Assert.fail(String.format("Element %s is clickable",by));  } catch (  TimeoutException e) {  }}  }
class C{  public void addError(String message,DiagnosticPosition pos){  ast.printMessage(Diagnostic.Kind.ERROR,message,null,pos,true);}  }
class C{  public static JournalStore create(Path path) throws IOException {  return create(path,true);}  }
class C{  public ClusterUpdateSettingsRequest persistentSettings(Settings.Builder settings){  this.persistentSettings=settings.build();  return this;}  }
class C{  public void onCancelMarketData(Tradestrategy tradestrategy){}  }
class C{  public static String generateNativeGuid(DbClient dbClient,StoragePort port){  StorageSystem device=dbClient.queryObject(StorageSystem.class,port.getStorageDevice());  return String.format("%s+%s+" + PORT + "+%s",_deviceTypeMap.get(device.getSystemType()),device.getSerialNumber(),port.getPortNetworkId());}  }
class C{  private void updateTagEntity(TagEntity tagEntity,TagUpdateRequest tagUpdateRequest){  tagEntity.setDisplayName(tagUpdateRequest.getDisplayName());  tagEntity.setDescription(tagUpdateRequest.getDescription());  if (tagUpdateRequest.getParentTagKey() != null) {    TagEntity parentTagEntity=tagDaoHelper.getTagEntity(tagUpdateRequest.getParentTagKey());    tagEntity.setParentTagEntity(parentTagEntity);  } else {    tagEntity.setParentTagEntity(null);  }  tagDao.saveAndRefresh(tagEntity);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected int computeHorizontalScrollOffset(){  return mSelectedPosition;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return FIELD;default :  return null;}}  }
class C{  public void testGetF0(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF0();  assertEquals(expResult,result);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static synchronized void info(String message){  LogFactory.getLog(ToolBox.getCaller()).info(message);}  }
class C{  @Deprecated public double norm(){  return Math.sqrt(this.dot(this));}  }
class C{  public Vector3f multLocal(Vector3f vec){  if (vec == null) {    return null;  }  float x=vec.x;  float y=vec.y;  vec.x=m00 * x + m01 * y + m02 * vec.z;  vec.y=m10 * x + m11 * y + m12 * vec.z;  vec.z=m20 * x + m21 * y + m22 * vec.z;  return vec;}  }
class C{  @SideEffectFree @Override public ImmutableSet<Entry<K,V>> entrySet(){  ImmutableSet<Entry<K,V>> es=entrySet;  return (es == null) ? (entrySet=createEntrySet()) : es;}  }
class C{  private CatalogDownload jsonToDownload(JSONObject obj) throws JSONException {  String updated=obj.getString("last_updated");  String title=obj.getString("title");  String region=obj.getString("region");  String url=obj.getString("url");  String id=obj.getString("id");  return new CatalogDownload(title,region,url,id,updated);}  }
class C{  protected Control createDialogArea(Composite composite){  list=new List(composite,SWT.SINGLE | SWT.V_SCROLL | SWT.RESIZE);  setList();  list.addSelectionListener(new ShowUsesSelectionListener(this.showUses,this.moduleList));  list.addKeyListener(new ShowUsesKeyListener(this));  list.setSelection(0);  return list;}  }
class C{  public static void cleanupVolumeFoldersIfNeeded(XtremIOClient client,String xioClusterName,String volumeFolderName,StorageSystem storageSystem) throws Exception {  try {    boolean isVersion2=client.isVersion2();    XtremIOTag tag=client.getTagDetails(volumeFolderName,XTREMIO_ENTITY_TYPE.Volume.name(),xioClusterName);    if (tag == null) {      _log.info("Tag {} not found on the array",volumeFolderName);      return;    }    _log.info("Got back tag details {}",tag.toString());    String numOfVols=isVersion2 ? tag.getNumberOfDirectObjs() : tag.getNumberOfVolumes();    int numberOfVolumes=Integer.parseInt(numOfVols);    if (numberOfVolumes == 0) {      if (isVersion2) {        client.deleteTag(volumeFolderName,XtremIOConstants.XTREMIO_ENTITY_TYPE.Volume.name(),xioClusterName);      } else {        String volumesFolderName=volumeFolderName.concat(XtremIOConstants.VOLUMES_SUBFOLDER);        String snapshotsFolderName=volumeFolderName.concat(XtremIOConstants.SNAPSHOTS_SUBFOLDER);        _log.info("Deleting Volumes Folder ...");        client.deleteTag(volumesFolderName,XtremIOConstants.XTREMIO_ENTITY_TYPE.Volume.name(),xioClusterName);        _log.info("Deleting Snapshots Folder ...");        client.deleteTag(snapshotsFolderName,XtremIOConstants.XTREMIO_ENTITY_TYPE.Volume.name(),xioClusterName);        _log.info("Deleting Root Folder ...");        client.deleteTag(volumeFolderName,XtremIOConstants.XTREMIO_ENTITY_TYPE.Volume.name(),xioClusterName);      }    }  } catch (  Exception e) {    _log.warn("Deleting root folder {} failed",volumeFolderName,e);  }}  }
class C{  public JCArrayAccess Indexed(Symbol v,JCExpression index){  JCArrayAccess tree=new JCArrayAccess(QualIdent(v),index);  tree.type=((ArrayType)v.type).elemtype;  return tree;}  }
class C{  public static double convertDaysToMillis(double millis){  return millis * DAY_TO_MILLIS;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public static UTMPoint LLtoUTM(LatLonPoint llpoint){  return LLtoUTM(llpoint,Ellipsoid.WGS_84,new UTMPoint());}  }
class C{  protected void tearDown(){  hm=null;  objArray=null;  objArray2=null;}  }
class C{  public RepairPanel(final GameData data,final MapPanel map){  super(data,map);  m_unitsPanel=new SimpleUnitPanel(map.getUIContext());  m_buyButton=new JButton(BUY);  m_buyButton.addActionListener(PURCHASE_ACTION);}  }
class C{  public void onReqExecutions(Tradestrategy tradestrategy,boolean addOrders) throws BrokerModelException {}  }
class C{  public boolean hasIncompatibleSuperType(ReferenceBinding otherType){  if (this == otherType)   return false;  ReferenceBinding[] interfacesToVisit=null;  int nextPosition=0;  ReferenceBinding currentType=this;  TypeBinding match;  do {    match=otherType.findSuperTypeOriginatingFrom(currentType);    if (match != null && match.isProvablyDistinct(currentType))     return true;    ReferenceBinding[] itsInterfaces=currentType.superInterfaces();    if (itsInterfaces != null && itsInterfaces != Binding.NO_SUPERINTERFACES) {      if (interfacesToVisit == null) {        interfacesToVisit=itsInterfaces;        nextPosition=interfacesToVisit.length;      } else {        int itsLength=itsInterfaces.length;        if (nextPosition + itsLength >= interfacesToVisit.length)         System.arraycopy(interfacesToVisit,0,interfacesToVisit=new ReferenceBinding[nextPosition + itsLength + 5],0,nextPosition);        nextInterface:         for (int a=0; a < itsLength; a++) {          ReferenceBinding next=itsInterfaces[a];          for (int b=0; b < nextPosition; b++)           if (next == interfacesToVisit[b])           continue nextInterface;          interfacesToVisit[nextPosition++]=next;        }      }    }  } while ((currentType=currentType.superclass()) != null);  for (int i=0; i < nextPosition; i++) {    currentType=interfacesToVisit[i];    if (currentType == otherType)     return false;    match=otherType.findSuperTypeOriginatingFrom(currentType);    if (match != null && match.isProvablyDistinct(currentType))     return true;    ReferenceBinding[] itsInterfaces=currentType.superInterfaces();    if (itsInterfaces != null && itsInterfaces != Binding.NO_SUPERINTERFACES) {      int itsLength=itsInterfaces.length;      if (nextPosition + itsLength >= interfacesToVisit.length)       System.arraycopy(interfacesToVisit,0,interfacesToVisit=new ReferenceBinding[nextPosition + itsLength + 5],0,nextPosition);      nextInterface:       for (int a=0; a < itsLength; a++) {        ReferenceBinding next=itsInterfaces[a];        for (int b=0; b < nextPosition; b++)         if (next == interfacesToVisit[b])         continue nextInterface;        interfacesToVisit[nextPosition++]=next;      }    }  }  return false;}  }
class C{  public void downloadApk(final Context context,final UpdateResponse updateResponse,final DownloadListener downloadListener){  if (downloadListener != null) {    this.downloadListener=downloadListener;  }  String url=updateResponse.path;  String apk=null;  String fileName=updateResponse.md5 + ".apk";  File parentPath=getDownloadAPKParent();  if (parentPath != null && parentPath.exists()) {    File file=new File(parentPath,fileName);    apk=file.getAbsolutePath();  }  LoggerThread.getInstance().downloadApk(context,url,apk);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (!Sage.isNonLocalClient())   return Boolean.FALSE;  if (pluggy != null)   return sage.plugin.CorePluginManager.getInstance().isPluginCompatible(pluggy,stack.getUIMgr()) ? Boolean.TRUE : Boolean.FALSE;  return Boolean.FALSE;}  }
class C{  public void sendWarning(Object source,Throwable e){  try {    e.printStackTrace();    String msg=e.toString();    String s=getClass().getSimpleName() + ": " + e;    System.err.println(s);    for (    WarningHandler handler : _priorityHandlers) {      try {        handler.warning(source,msg);      } catch (      Throwable e1) {        log.log(Level.WARNING,e1.toString(),e1);      }    }    for (    WarningHandler handler : _handlers) {      try {        handler.warning(source,msg);      } catch (      Throwable e1) {        log.log(Level.WARNING,e1.toString(),e1);      }    }    log.warning(s);  } catch (  Throwable e1) {    log.log(Level.WARNING,e1.toString(),e1);  }}  }
class C{  @Override public void configureMessageConverters(List<HttpMessageConverter<?>> converters){  converters.add(jsonMessageConverter());  converters.add(xmlMessageConverter());}  }
class C{  public void debug(String format,Object arg1,Object arg2){  formatAndLog(Log.DEBUG,format,arg1,arg2);}  }
class C{  public Editor(){  initComponents();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.135 -0500",hash_original_method="E3508FF8AABC28C56148C557B4E38064",hash_generated_method="7253AF807017D803A7677EF0EDA83AD0") public synchronized StringBuffer insert(int index,char[] chars,int start,int length){  insert0(index,chars,start,length);  return this;}  }
class C{  public byte[] compress(double[] unCompInput){  try {    return Snappy.compress(unCompInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());    return null;  }}  }
class C{  @Override public int distance(){  if (positions() == null || positions().isEmpty())   return 0;  int d=0;  Iterator<Integer> i=positions().iterator();  int s0=posintext();  int s1;  while (i.hasNext()) {    s1=i.next();    if (s0 > 0)     d+=Math.abs(s0 - s1);    s0=s1;  }  try {    return d == 0 ? 0 : d / positions().size();  } catch (  ArithmeticException ex) {    ConcurrentLog.fine("AbstractReference","word distance calculation:" + ex.getMessage());    return 0;  }}  }
class C{  int size(){  if (largeTransactions) {    return storedEntries + records.size();  }  if (SysProperties.CHECK && memoryUndo > records.size()) {    DbException.throwInternalError();  }  return records.size();}  }
class C{  public void deleteText(final NetworkTextObject text){  textList.remove(text);  this.fireTextRemoved(text);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().getVideoFrame().getBluRayTitleDesc(getInt(stack));}  }
class C{  public int compareTo(Object arg0){  if (arg0 instanceof MedianCellSorter) {    if (medianValue < ((MedianCellSorter)arg0).medianValue) {      return -1;    } else     if (medianValue > ((MedianCellSorter)arg0).medianValue) {      return 1;    } else {      if (nudge) {        return -1;      } else {        return 1;      }    }  } else {    return 0;  }}  }
class C{  public Bundle(Bundle b){  if (b.mParcelledData != null) {    mParcelledData=Parcel.obtain();    mParcelledData.appendFrom(b.mParcelledData,0,b.mParcelledData.dataSize());    mParcelledData.setDataPosition(0);  } else {    mParcelledData=null;  }  if (b.mMap != null) {    mMap=new HashMap<String,Object>(b.mMap);  } else {    mMap=null;  }  mHasFds=b.mHasFds;  mFdsKnown=b.mFdsKnown;  mClassLoader=b.mClassLoader;}  }
class C{  public static <E>Set<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9){  return new ImmutableCollections.SetN<E>(e1,e2,e3,e4,e5,e6,e7,e8,e9);}  }
class C{  public void dispose(){  log.debug("Disposing " + getTitle());  addressPanel.removeAddressListener(this);  jmri.jmrit.throttle.ThrottleFrameManager.instance().getThrottlesListPanel().getTableModel().removeThrottleFrame(this,addressPanel.getCurrentAddress());  controlPanel.destroy();  functionPanel.destroy();  addressPanel.destroy();}  }
class C{  public boolean isSetError(){  return this.error != null;}  }
class C{  protected boolean isAuthenticated(final By by,final HttpServletRequest request){  final String[] authToks=parseAuthorization(request);  if (authToks == null) {    return false;  }  final String deployKey=authToks[1];  logger.debug("Deploy key: '{}'",deployKey);  final ChannelService service=getService(request);  if (service == null) {    logger.info("Called 'isAuthenticated' without service");    return false;  }  return service.getChannelDeployKeyStrings(by).orElse(Collections.emptySet()).contains(deployKey);}  }
class C{  public boolean filterResult(Long result,SmallArrayBasedLongToDoubleMap[] socialProofs){  return resultFilterChain != null && resultFilterChain.filterResult(result,socialProofs);}  }
class C{  public void snmpV1Trap(InetAddress addr,SnmpIpAddress agentAddr,String cs,SnmpOid enterpOid,int generic,int specific,SnmpVarBindList varBindList,SnmpTimeticks time) throws IOException, SnmpStatusException {  snmpV1Trap(addr,trapPort,agentAddr,cs,enterpOid,generic,specific,varBindList,time);}  }
class C{  public boolean isAccessible(){  return isAccessible;}  }
class C{  protected Query newTermQuery(Term term,TermContext context){  return context == null ? new TermQuery(term) : new TermQuery(term,context);}  }
class C{  protected void recoverPrimary(Set excludedServers){  if (pool.getPoolOrCacheCancelInProgress() != null) {    return;  }  final boolean isDebugEnabled=logger.isDebugEnabled();  if (queueConnections.getPrimary() != null) {    if (isDebugEnabled) {      logger.debug("Primary recovery not needed");    }    return;  }  if (isDebugEnabled) {    logger.debug("SubscriptionManager redundancy satisfier - primary endpoint has been lost. Attempting to recover");  }  if (printRecoveringPrimary) {    logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));    printRecoveringPrimary=false;  }  QueueConnectionImpl newPrimary=null;  while (newPrimary == null && pool.getPoolOrCacheCancelInProgress() == null) {    List backups=queueConnections.getBackups();    newPrimary=promoteBackupToPrimary(backups);    if (newPrimary == null) {      break;    }    if (!addToConnectionList(newPrimary,true)) {synchronized (lock) {        queueConnections=queueConnections.removeConnection(newPrimary);      }      newPrimary=null;    }  }  if (newPrimary != null) {    if (isDebugEnabled) {      logger.debug("SubscriptionManager redundancy satisfier - Switched backup server to primary: {}",newPrimary.getEndpoint());    }    if (PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {      ClientServerObserver bo=ClientServerObserverHolder.getInstance();      bo.afterPrimaryRecovered(newPrimary.getServer());    }    cqsConnected();    printPrimaryNotFoundError=true;    printRecoveringPrimary=true;    return;  }  while (newPrimary == null) {    newPrimary=createNewPrimary(excludedServers);    if (newPrimary == null) {      break;    }    if (!addToConnectionList(newPrimary,true)) {      excludedServers.add(newPrimary.getServer());      newPrimary=null;    }    if (newPrimary != null) {      if (isDebugEnabled) {        logger.debug("SubscriptionManager redundancy satisfier - Non backup server was made primary. Recovering interest {}",newPrimary.getEndpoint());      }      if (!recoverInterest(newPrimary,true)) {        excludedServers.add(newPrimary.getServer());        newPrimary=null;      }      cqsConnected();    }    if (newPrimary != null && PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {      ClientServerObserver bo=ClientServerObserverHolder.getInstance();      bo.afterPrimaryRecovered(newPrimary.getServer());    }    printPrimaryNotFoundError=true;    printRecoveringPrimary=true;    return;  }  cqsDisconnected();  if (isDebugEnabled) {    logger.debug("SubscriptionManager redundancy satisfier - Could not recover a new primary");  }synchronized (lock) {    queueConnections=queueConnections.setPrimaryDiscoveryFailed(null);    lock.notifyAll();  }}  }
class C{  @Override public void startDownload(int blocks){  if (blocks == 0) {    doneDownload();  } else {synchronized (lockObject) {      String startDownloadText=controller.getLocaliser().getString("multiBitDownloadListener.downloadingTextShort");      if (!(startDownloadText.indexOf("multiBitDownloadListener") > -1)) {        singleWalletPanel.setSyncMessage(startDownloadText,Message.NOT_RELEVANT_PERCENTAGE_COMPLETE);      }    }  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"call");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not a call instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize nextSize=TranslationHelpers.getNextSize(archSize);  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  final String tempEsp=environment.getNextVariableString();  final String returnAddress=String.valueOf(instruction.getAddress().toLong() + instruction.getLength());  instructions.add(ReilHelpers.createSub(offset,archSize,"esp",archSize,"4",nextSize,tempEsp));  instructions.add(ReilHelpers.createAnd(offset + 1,nextSize,tempEsp,archSize,truncateMask,archSize,"esp"));  instructions.add(ReilHelpers.createStm(offset + 2,archSize,returnAddress,archSize,"esp"));  final IOperandTree targetOperand=instruction.getOperands().get(0);  final TranslationResult result=Helpers.translateOperand(environment,offset + 3,targetOperand,true);  instructions.addAll(result.getInstructions());  offset=baseOffset + instructions.size();  instructions.add(ReilHelpers.createJcc(offset,OperandSize.DWORD,"1",result.getSize(),result.getRegister(),"isCall","true"));}  }
class C{  public void addListener(INotifyChangedListener notifyChangedListener){  changeNotifier.addListener(notifyChangedListener);}  }
class C{  public FilePipeline(){  setPath("/data/webmagic/");}  }
class C{  public static void printOption(Writer out,String label,String value,boolean selected) throws IOException {  out.write("<option");  if (selected) {    out.write(" selected");  }  out.write(" value=\"");  out.write(value);  out.write("\">");  out.write(escape(label));  out.write("</option>");}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof QuarterDateFormat)) {    return false;  }  QuarterDateFormat that=(QuarterDateFormat)obj;  if (!Arrays.equals(this.quarters,that.quarters)) {    return false;  }  if (this.quarterFirst != that.quarterFirst) {    return false;  }  return super.equals(obj);}  }
class C{  public void testSyncTracksWithMultiAccounts() throws Exception {  if (!RunConfiguration.getInstance().getRunSyncTest()) {    return;  }  SyncTestUtils.enableSync(GoogleUtils.ACCOUNT_1);  EndToEndTestUtils.createSimpleTrack(0,true);  SyncTestUtils.enableSync(GoogleUtils.ACCOUNT_2);  EndToEndTestUtils.createSimpleTrack(0,true);  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  drive=SyncTestUtils.getGoogleDrive(trackListActivity.getApplicationContext());  SyncTestUtils.checkFilesNumber(drive);  SyncTestUtils.enableSync(GoogleUtils.ACCOUNT_1);  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  drive=SyncTestUtils.getGoogleDrive(trackListActivity.getApplicationContext());  SyncTestUtils.checkFilesNumber(drive);  SyncTestUtils.enableSync(GoogleUtils.ACCOUNT_2);  drive=SyncTestUtils.getGoogleDrive(trackListActivity.getApplicationContext());  SyncTestUtils.checkFilesNumber(drive);}  }
class C{  public TIntObjectIterator(TIntObjectHashMap<V> map){  super(map);  _map=map;}  }
class C{  public static SchemaItem findPropertyMapping(SchemaElementComplex def,String property){  for (  SchemaItemAttribute attribute : def.getAttributes()) {    if (attribute.getName().equals(property)) {      return attribute;    }  }  for (  SchemaElementSimple simple : def.getSimpleElements()) {    if (simple.getName().equals(property)) {      return simple;    }  }  for (  SchemaElementComplex complex : def.getChildren()) {    if (complex.getName().equals(property)) {      return complex;    }  }  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=opt(key);  if (value == null) {    put(key,1);  } else {    if (value instanceof Integer) {      put(key,((Integer)value).intValue() + 1);    } else     if (value instanceof Long) {      put(key,((Long)value).longValue() + 1);    } else     if (value instanceof Double) {      put(key,((Double)value).doubleValue() + 1);    } else     if (value instanceof Float) {      put(key,((Float)value).floatValue() + 1);    } else {      throw new JSONException("Unable to increment [" + key + "].");    }  }  return this;}  }
class C{  private static <T>void siftUpComparable(int k,T x,Object[] array){  Comparable<? super T> key=(Comparable<? super T>)x;  while (k > 0) {    int parent=(k - 1) >>> 1;    Object e=array[parent];    if (key.compareTo((T)e) >= 0)     break;    array[k]=e;    k=parent;  }  array[k]=key;}  }
class C{  public Destructurer(final Tree.Pattern that,final GenerateJsVisitor gen,final Set<Declaration> directAccess,final String expvar,boolean first,final boolean forAssert){  this.gen=gen;  jsw=gen == null ? null : gen.out;  names=gen == null ? null : gen.getNames();  this.directAccess=directAccess;  this.expvar=expvar;  this.first=first;  this.forAssert=forAssert;  that.visit(this);  if (jsw != null && !attribs.isEmpty()) {    for (    Value attr : attribs) {      jsw.write(";",names.self((TypeDeclaration)attr.getContainer()),".",names.name(attr),"=",names.name(attr));    }  }}  }
class C{  protected Caret createCaret(){  return new WindowsCaret();}  }
class C{  public static void createASDocConfig(ASDocConfiguration config) throws CompilerException {  String templatesPath=config.getTemplatesPath();  String ditaPath=config.getOutput() + "tempdita" + File.separator;  File ditaDir=new File(ditaPath);  if (!ditaDir.exists()) {    ditaDir.mkdirs();  }  BufferedWriter writer=null;  Reader reader=null;  try {    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(ditaPath + "ASDoc_Config.xml"),"UTF-8"));    reader=new BufferedReader(new InputStreamReader(new FileInputStream(templatesPath + "ASDoc_Config_Base.xml"),"UTF-8"));    ASDocConfigHandler h=new ASDocConfigHandler(writer,config);    InputSource source=new InputSource(reader);    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(source,h);  } catch (  Exception e) {    if (Trace.error)     e.printStackTrace();    CompilerMessage c=new CouldNotCreate("ASDoc_Config.xml",e.getMessage());    ThreadLocalToolkit.log(c);    throw c;  } finally {    if (writer != null) {      try {        writer.close();      } catch (      IOException ioe) {      }    }    if (reader != null) {      try {        reader.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public CursorIterator<Model> queryAsIterator(Context context){  CPOrmCursor<Model> cursor=queryAsCursor(context);  return cursor == null ? null : new CursorIterator<Model>(cursor.getTableDetails(),cursor);}  }
class C{  public static byte[] decode(char[] in,int iOff,int iLen){  if (iLen % 4 != 0) {    throw new IllegalArgumentException("Length of Base64 encoded input string is not a multiple of 4.");  }  int iLength=iLen;  while (iLength > 0 && in[iOff + iLength - 1] == '=') {    iLength--;  }  final int oLen=iLength * 3 / 4;  final byte[] out=new byte[oLen];  int ip=iOff;  final int iEnd=iOff + iLength;  int op=0;  while (ip < iEnd) {    final int i0=in[ip++];    final int i1=in[ip++];    final int i2=ip < iEnd ? in[ip++] : 'A';    final int i3=ip < iEnd ? in[ip++] : 'A';    if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127) {      throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    }    final int b0=MAP2[i0];    final int b1=MAP2[i1];    final int b2=MAP2[i2];    final int b3=MAP2[i3];    if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0) {      throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    }    final int o0=b0 << 2 | b1 >>> 4;    final int o1=(b1 & 0xf) << 4 | b2 >>> 2;    final int o2=(b2 & 3) << 6 | b3;    out[op++]=(byte)o0;    if (op < oLen) {      out[op++]=(byte)o1;    }    if (op < oLen) {      out[op++]=(byte)o2;    }  }  return out;}  }
class C{  public static Object stringToValue(String string){  if ("".equals(string)) {    return string;  }  if ("true".equalsIgnoreCase(string)) {    return Boolean.TRUE;  }  if ("false".equalsIgnoreCase(string)) {    return Boolean.FALSE;  }  if ("null".equalsIgnoreCase(string)) {    return JSONObject.NULL;  }  if ("0".equals(string)) {    return new Integer(0);  }  try {    char initial=string.charAt(0);    boolean negative=false;    if (initial == '-') {      initial=string.charAt(1);      negative=true;    }    if (initial == '0' && string.charAt(negative ? 2 : 1) == '0') {      return string;    }    if ((initial >= '0' && initial <= '9')) {      if (string.indexOf('.') >= 0) {        return Double.valueOf(string);      } else       if (string.indexOf('e') < 0 && string.indexOf('E') < 0) {        Long myLong=new Long(string);        if (myLong.longValue() == myLong.intValue()) {          return new Integer(myLong.intValue());        } else {          return myLong;        }      }    }  } catch (  Exception ignore) {  }  return string;}  }
class C{  @Override public UpdateResponse deleteById(List<String> ids) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards.server4read())   ur=s.deleteById(ids);  return ur;}  }
class C{  protected void onParseError(WebURL webUrl){  logger.warn("Parsing error of: {}",webUrl.getURL());}  }
class C{  public void addObserver(Observer observer){  if (observer == null) {    throw new NullPointerException();  }synchronized (this) {    if (!observers.contains(observer))     observers.add(observer);  }}  }
class C{  @Override protected void toASCII(StringBuilder ascii,int level){  indent(ascii,level);  NSObject[] array=allObjects();  ascii.append(ASCIIPropertyListParser.ARRAY_BEGIN_TOKEN);  int indexOfLastNewLine=ascii.lastIndexOf(NEWLINE);  for (int i=0; i < array.length; i++) {    Class<?> objClass=array[i].getClass();    if ((objClass.equals(NSDictionary.class) || objClass.equals(NSArray.class) || objClass.equals(NSData.class)) && indexOfLastNewLine != ascii.length()) {      ascii.append(NEWLINE);      indexOfLastNewLine=ascii.length();      array[i].toASCII(ascii,level + 1);    } else {      if (i != 0)       ascii.append(' ');      array[i].toASCII(ascii,0);    }    if (i != array.length - 1)     ascii.append(ASCIIPropertyListParser.ARRAY_ITEM_DELIMITER_TOKEN);    if (ascii.length() - indexOfLastNewLine > ASCII_LINE_LENGTH) {      ascii.append(NEWLINE);      indexOfLastNewLine=ascii.length();    }  }  ascii.append(ASCIIPropertyListParser.ARRAY_END_TOKEN);}  }
class C{  public void applyAttrSets(TransformerImpl transformer,StylesheetRoot stylesheet) throws TransformerException {  applyAttrSets(transformer,stylesheet,m_attributeSetsNames);}  }
class C{  public DSAPrivateKey(BigInteger x,BigInteger p,BigInteger q,BigInteger g) throws InvalidKeyException {  this.x=x;  algid=new AlgIdDSA(p,q,g);  try {    key=new DerValue(DerValue.tag_Integer,x.toByteArray()).toByteArray();    encode();  } catch (  IOException e) {    InvalidKeyException ike=new InvalidKeyException("could not DER encode x: " + e.getMessage());    ike.initCause(e);    throw ike;  }}  }
class C{  public ColorHelper(double radianHeight,int val){  height=radianHeight;  value=val;}  }
class C{  public static boolean isAnswerCorrect(SparseBooleanArray checkedItems,int[] answerIds){  if (null == checkedItems || null == answerIds) {    Log.i(TAG,"isAnswerCorrect got a null parameter input.");    return false;  }  for (  int answer : answerIds) {    if (0 > checkedItems.indexOfKey(answer)) {      return false;    }  }  return checkedItems.size() == answerIds.length;}  }
class C{  public void phaseIIU(final int lindex,final int levels[][]){  float rowBC[];  rowBC=calcRowBC(lindex,levels);  for (int i=0; i < rowBC.length - 1; i++) {    if (rowBC[i] == rowBC[i + 1]) {      int tempLevels[][]=new int[levels.length][];      copy2DArray(levels,tempLevels);      int node1=levels[lindex][i];      int node2=levels[lindex][i + 1];      levels[lindex][i + 1]=node1;      levels[lindex][i]=node2;      for (int k=lindex - 1; k >= 0; k--) {        phaseIU(k,levels);      }      if (crossings(levels) <= crossings(tempLevels)) {        copy2DArray(levels,tempLevels);      } else {        copy2DArray(tempLevels,levels);        levels[lindex][i + 1]=node1;        levels[lindex][i]=node2;      }      for (int k=0; k < levels.length - 1; k++) {        phaseID(k,levels);      }      if (crossings(tempLevels) <= crossings(levels)) {        copy2DArray(tempLevels,levels);      }    }  }}  }
class C{  public SendableVoiceMessage.SendableVoiceMessageBuilder voice(InputFile voice){  this.voice=voice;  return this;}  }
class C{  public void writeOperatorSchedule(List<Operator> operators,XMLWriter writer){  Attribute[] operatorAttributes;  boolean shouldLogCool=false;  for (  PartitionTreePrior partition : options.getPartitionTreePriors()) {    if (partition.getNodeHeightPrior() == TreePriorType.SKYGRID || partition.getNodeHeightPrior() == TreePriorType.GMRF_SKYRIDE) {      shouldLogCool=true;      break;    }  }  for (  PartitionSubstitutionModel model : options.getPartitionSubstitutionModels()) {    if (model.getDataType().getType() == DataType.GENERAL || model.getDataType().getType() == DataType.CONTINUOUS) {      shouldLogCool=true;      break;    }  }  operatorAttributes=new Attribute[]{new Attribute.Default<String>(XMLParser.ID,"operators"),new Attribute.Default<String>(SimpleOperatorScheduleParser.OPTIMIZATION_SCHEDULE,(shouldLogCool ? OperatorSchedule.OptimizationTransform.LOG.toString() : OperatorSchedule.OptimizationTransform.DEFAULT.toString()))};  writer.writeComment("Define operators");  writer.writeOpenTag(SimpleOperatorScheduleParser.OPERATOR_SCHEDULE,operatorAttributes);  for (  Operator operator : operators) {    if (operator.getWeight() > 0. && operator.isUsed()) {      setModelPrefix(operator.getPrefix());      writeOperator(operator,writer);    }  }  generateInsertionPoint(ComponentGenerator.InsertionPoint.IN_OPERATORS,writer);  writer.writeCloseTag(SimpleOperatorScheduleParser.OPERATOR_SCHEDULE);}  }
class C{  public void realClose(boolean calledExplicitly) throws SQLException {  MySQLConnection locallyScopedConn=this.connection;  if (locallyScopedConn == null) {    return;  }synchronized (locallyScopedConn.getConnectionMutex()) {    if (this.isClosed) {      return;    }    try {      if (this.useUsageAdvisor) {        if (!calledExplicitly) {          this.eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_WARN,"",(this.owningStatement == null) ? "N/A" : this.owningStatement.currentCatalog,this.connectionId,(this.owningStatement == null) ? (-1) : this.owningStatement.getId(),this.resultId,System.currentTimeMillis(),0,Constants.MILLIS_I18N,null,this.pointOfOrigin,Messages.getString("ResultSet.ResultSet_implicitly_closed_by_driver")));        }        if (this.rowData instanceof RowDataStatic) {          if (this.rowData.size() > this.connection.getResultSetSizeThreshold()) {            this.eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_WARN,"",(this.owningStatement == null) ? Messages.getString("ResultSet.N/A_159") : this.owningStatement.currentCatalog,this.connectionId,(this.owningStatement == null) ? (-1) : this.owningStatement.getId(),this.resultId,System.currentTimeMillis(),0,Constants.MILLIS_I18N,null,this.pointOfOrigin,Messages.getString("ResultSet.Too_Large_Result_Set",new Object[]{Integer.valueOf(this.rowData.size()),Integer.valueOf(this.connection.getResultSetSizeThreshold())})));          }          if (!isLast() && !isAfterLast() && (this.rowData.size() != 0)) {            this.eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_WARN,"",(this.owningStatement == null) ? Messages.getString("ResultSet.N/A_159") : this.owningStatement.currentCatalog,this.connectionId,(this.owningStatement == null) ? (-1) : this.owningStatement.getId(),this.resultId,System.currentTimeMillis(),0,Constants.MILLIS_I18N,null,this.pointOfOrigin,Messages.getString("ResultSet.Possible_incomplete_traversal_of_result_set",new Object[]{Integer.valueOf(getRow()),Integer.valueOf(this.rowData.size())})));          }        }        if (this.columnUsed.length > 0 && !this.rowData.wasEmpty()) {          StringBuilder buf=new StringBuilder(Messages.getString("ResultSet.The_following_columns_were_never_referenced"));          boolean issueWarn=false;          for (int i=0; i < this.columnUsed.length; i++) {            if (!this.columnUsed[i]) {              if (!issueWarn) {                issueWarn=true;              } else {                buf.append(", ");              }              buf.append(this.fields[i].getFullName());            }          }          if (issueWarn) {            this.eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_WARN,"",(this.owningStatement == null) ? "N/A" : this.owningStatement.currentCatalog,this.connectionId,(this.owningStatement == null) ? (-1) : this.owningStatement.getId(),0,System.currentTimeMillis(),0,Constants.MILLIS_I18N,null,this.pointOfOrigin,buf.toString()));          }        }      }    }  finally {      if (this.owningStatement != null && calledExplicitly) {        this.owningStatement.removeOpenResultSet(this);      }      SQLException exceptionDuringClose=null;      if (this.rowData != null) {        try {          this.rowData.close();        } catch (        SQLException sqlEx) {          exceptionDuringClose=sqlEx;        }      }      if (this.statementUsedForFetchingRows != null) {        try {          this.statementUsedForFetchingRows.realClose(true,false);        } catch (        SQLException sqlEx) {          if (exceptionDuringClose != null) {            exceptionDuringClose.setNextException(sqlEx);          } else {            exceptionDuringClose=sqlEx;          }        }      }      this.rowData=null;      this.fields=null;      this.columnLabelToIndex=null;      this.fullColumnNameToIndex=null;      this.columnToIndexCache=null;      this.eventSink=null;      this.warningChain=null;      if (!this.retainOwningStatement) {        this.owningStatement=null;      }      this.catalog=null;      this.serverInfo=null;      this.thisRow=null;      this.fastDefaultCal=null;      this.fastClientCal=null;      this.connection=null;      this.isClosed=true;      if (exceptionDuringClose != null) {        throw exceptionDuringClose;      }    }  }}  }
class C{  public boolean canI(Object key){  Object o=locks.get(key);  return null == o || o == this.getCallerId();}  }
class C{  public CStarViewsAction(final Window parent,final INaviView[] views){  super("Star view");  m_parent=parent;  m_views=views.clone();}  }
class C{  public static <R,A,B,C,D,E>CompletionStage<R> combine(CompletionStage<A> a,CompletionStage<B> b,CompletionStage<C> c,CompletionStage<D> d,CompletionStage<E> e,Function5<A,B,C,D,E,R> function){  final CompletableFuture<A> af=a.toCompletableFuture();  final CompletableFuture<B> bf=b.toCompletableFuture();  final CompletableFuture<C> cf=c.toCompletableFuture();  final CompletableFuture<D> df=d.toCompletableFuture();  final CompletableFuture<E> ef=e.toCompletableFuture();  return CompletableFuture.allOf(af,bf,cf,df,ef).thenApply(null);}  }
class C{  public static Operator toOperator(String token){  return (Operator)CODES.get(token);}  }
class C{  public void testParseSimple() throws Exception {  String testFile="spider man, spiderman\n" + "usa,united states,u s a,united states of america\n" + "mystyped, mistyped => mistyped\n"+ "foo => foo bar\n"+ "foo => baz";  Analyzer analyzer=new MockAnalyzer(random());  SolrSynonymParser parser=new SolrSynonymParser(true,true,analyzer);  parser.parse(new StringReader(testFile));  final SynonymMap map=parser.build();  analyzer.close();  assertEntryEquals(map,"spiderman",true,"spider man");  assertEntryEquals(map,"spider man",true,"spiderman");  assertEntryEquals(map,"usa",true,new String[]{"united states","u s a","united states of america"});  assertEntryEquals(map,"united states",true,new String[]{"usa","u s a","united states of america"});  assertEntryEquals(map,"u s a",true,new String[]{"usa","united states","united states of america"});  assertEntryEquals(map,"united states of america",true,new String[]{"usa","u s a","united states"});  assertEntryEquals(map,"mistyped",false,"mistyped");  assertEntryEquals(map,"mystyped",false,"mistyped");  assertEntryEquals(map,"foo",false,new String[]{"foo bar","baz"});  assertEntryAbsent(map,"baz");  assertEntryAbsent(map,"bar");}  }
class C{  public static double[] toNativeArray(Collection<Double> values,boolean ignoreNull,boolean ignoreNAN,boolean ignoreInf){  double[] nativeVals=new double[values.size()];  int cnt=0;  for (  Double val : values) {    if (!ignoreNull || val != null) {      if (val == null)       val=0.0;      if (!ignoreNAN || !val.isNaN()) {        if (!ignoreInf || !val.isInfinite()) {          nativeVals[cnt]=val;          cnt++;        }      }    }  }  if (cnt < values.size()) {    nativeVals=Arrays.copyOf(nativeVals,cnt);  }  return nativeVals;}  }
class C{  public CandleItem(Contract contract,Tradingday tradingday,RegularTimePeriod period,double open,double high,double low,double close,long volume,double vwap,int count,ZonedDateTime lastUpdateDate){  super(period,new Candle(contract,tradingday,period,open,high,low,close,volume,vwap,count,lastUpdateDate));}  }
class C{  public VcfInfoDoubleAnnotator(AbstractDerivedAnnotation annotation){  this(annotation,3);}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  public VectorClock incremented(int nodeId,long time){  if (nodeId < 0 || nodeId > Short.MAX_VALUE)   throw new IllegalArgumentException(nodeId + " is outside the acceptable range of node ids.");  List<ClockEntry> newversions=Lists.newArrayList(versions);  boolean found=false;  int index=0;  for (; index < newversions.size(); index++) {    if (newversions.get(index).getNodeId() == nodeId) {      found=true;      break;    } else     if (newversions.get(index).getNodeId() > nodeId) {      found=false;      break;    }  }  if (found) {    newversions.set(index,newversions.get(index).incremented());  } else   if (index < newversions.size() - 1) {    newversions.add(index,new ClockEntry((short)nodeId,1));  } else {    if (newversions.size() > MAX_NUMBER_OF_VERSIONS)     throw new IllegalStateException("Vector clock is full!");    newversions.add(index,new ClockEntry((short)nodeId,1));  }  return new VectorClock(newversions,time);}  }
class C{  void addReasons(ReasonsMask mask){  _reasons=_reasons | mask.getReasons();}  }
class C{  @Override public void onStart(){  super.onStart();  LaunchApp();  finish(Activity.RESULT_OK,mResults);}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public void addStutteringPropertyForTraceExplorer(SimpleTLCState finalState){  String id=getValidIdentifier(PROP_SCHEME);  cfgBuffer.append(COMMENT).append("PROPERTY definition").append(CR);  cfgBuffer.append("PROPERTY").append(CR);  cfgBuffer.append(id).append(CR);  tlaBuffer.append(COMMENT).append("PROPERTY definition").append(CR);  tlaBuffer.append(id).append(DEFINES_CR);  tlaBuffer.append(TLA_NOT).append(TLA_EVENTUALLY_ALWAYS).append(L_PAREN).append(CR).append(getStateConjunction(finalState)).append(CR).append(R_PAREN).append(CR);  tlaBuffer.append(SEP).append(CR).append(CR);}  }
class C{  public static void putbytes2Uint8s(char[] destUint8s,byte[] srcBytes,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destUint8s[destOffset + i]=convertByte2Uint8(srcBytes[srcOffset + i]);  }}  }
class C{  public boolean isLocal(){  return true;}  }
class C{  public static boolean canBeOutputted(ItemStack itemstack,boolean chargeSlot){  return true;}  }
class C{  public Canyon(){  super();}  }
class C{  public SubscriberExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  private static String test(Object test,Object should){  StringBuffer sb=new StringBuffer();  sb.append(test);  if (test == null) {    if (should == null)     sb.append(" - ok"); else     sb.append(" [Should=").append(should).append("] - ERROR");  } else {    if (test.equals(should))     sb.append(" - ok"); else     sb.append(" [Should=").append(should).append("] - ERROR");  }  return sb.toString();}  }
class C{  private void cleanupExecutorCache(){  if (this.executorCache == null) {    return;  }  for (  ExecutorService executorService : this.executorCache.values()) {    if (!executorService.isShutdown()) {      executorService.shutdown();      awaitTermination(logger,executorService);    }    this.executorCache.clear();  }}  }
class C{  public ProductsMap(){  this(null,null,0,-1);}  }
class C{  public int size(){  checkTokenized();  return tokens.length;}  }
class C{  public boolean isSocialBookmarkEnabled(){  return socialBookmarkEnabled;}  }
class C{  public void java_lang_Class_newInstance0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable instanceVar=helper.newInstanceOf(thisVar);  helper.assign(returnVar,instanceVar);}  }
class C{  @Override public String toString(){  return "Pair(" + first + ", "+ (second != null ? second.toString() : "null")+ ")";}  }
class C{  void addAttribute(String name,Object value){  if (name.isEmpty())   throw new IllegalArgumentException("Empty name not allowed.");  if (value == null)   throw new NullPointerException("Null value not allowed.");  this.attributesNames.add(name);  this.attributesValues.add(value);}  }
class C{  protected MockResponse buildResponse(int status,File bodyFile) throws FileNotFoundException, IOException {  final byte[] body=Streams.readFully(new FileInputStream(bodyFile));  return buildResponse(status).setBody(body);}  }
class C{  private void createAndRunProducers(boolean generateSameKeys,boolean generateSameIds,boolean conflationEnabled,int putPerProducer) throws Exception {  Producer[] putThreads=new Producer[TOTAL_PUT_THREADS];  int i=0;  for (i=0; i < TOTAL_PUT_THREADS; i++) {    String keyPrefix=null;    long startId;    if (generateSameKeys) {      keyPrefix="key";    } else {      keyPrefix=i + "key";    }    if (generateSameIds) {      startId=1;    } else {      startId=i * 100000;    }    putThreads[i]=new Producer("Producer-" + i,keyPrefix,startId,putPerProducer,conflationEnabled);  }  for (i=0; i < TOTAL_PUT_THREADS; i++) {    putThreads[i].start();  }  for (i=0; i < TOTAL_PUT_THREADS; i++) {    ThreadUtils.join(putThreads[i],30 * 1000);  }  assertFalse(encounteredException);}  }
class C{  public boolean isServer(){  return _is_server;}  }
class C{  @Override public void handleAbout(GenericAboutEvent event){  log.debug("Called");  if (event == null) {    log.warn("Received a null event");    return;  }  log.debug("Event class is {}",event.getClass().getSimpleName());  log.debug("Broadcasting to {} listener(s)",listeners.size());  for (  GenericAboutEventListener listener : listeners) {    listener.onAboutEvent(event);  }}  }
class C{  @Override public ResponseEntity<Void> deleteTenant(@PathVariable("tenant") final String tenant){  systemManagement.deleteTenant(tenant);  return new ResponseEntity<>(HttpStatus.OK);}  }
class C{  @Override public void startUpdate(UpdateContext op) throws SailException {  throw new SailException(ERR_OPENRDF_QUERY_MODEL);}  }
class C{  private Object generateValue(MethodSymbol meth,Attribute attr){  ValueVisitor vv=new ValueVisitor(meth);  return vv.getValue(attr);}  }
class C{  @Override public void updateShort(String columnLabel,short x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateShort(" + quote(columnLabel) + ", (short) "+ x+ ");");    }    update(columnLabel,ValueShort.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public final int update(final Uri uri,final ContentValues values,final String selection,final String[] selectionArgs){  final SQLiteDatabase dbConnection=db.getWritableDatabase();  int updateCount=0;  try {    dbConnection.beginTransaction();switch (URI_MATCHER.match(uri)) {case SITE_DIR:      updateCount=dbConnection.update(SiteTable.TABLE_NAME,values,selection,selectionArgs);    dbConnection.setTransactionSuccessful();  break;case SITE_ID:final Long siteId=ContentUris.parseId(uri);updateCount=dbConnection.update(SiteTable.TABLE_NAME,values,SiteTable.ID + "=" + siteId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;case USERINFO_DIR:updateCount=dbConnection.update(UserInfoTable.TABLE_NAME,values,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case USERINFO_ID:final Long userinfoId=ContentUris.parseId(uri);updateCount=dbConnection.update(UserInfoTable.TABLE_NAME,values,UserInfoTable.ID + "=" + userinfoId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;case FEATURED_USERS_DIR:updateCount=dbConnection.update(Featured_usersTable.TABLE_NAME,values,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case FEATURED_USERS_ID:final Long featured_usersId=ContentUris.parseId(uri);updateCount=dbConnection.update(Featured_usersTable.TABLE_NAME,values,Featured_usersTable.ID + "=" + featured_usersId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;case CATEGORY_PROPERTIES_DIR:updateCount=dbConnection.update(Category_propertiesTable.TABLE_NAME,values,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case CATEGORY_PROPERTIES_ID:final Long category_propertiesId=ContentUris.parseId(uri);updateCount=dbConnection.update(Category_propertiesTable.TABLE_NAME,values,Category_propertiesTable.ID + "=" + category_propertiesId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;case CATEGORIES_DIR:updateCount=dbConnection.update(CategoriesTable.TABLE_NAME,values,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case CATEGORIES_ID:final Long categoriesId=ContentUris.parseId(uri);updateCount=dbConnection.update(CategoriesTable.TABLE_NAME,values,CategoriesTable.ID + "=" + categoriesId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICS_DIR:updateCount=dbConnection.update(TopicsTable.TABLE_NAME,values,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICS_ID:final Long topicsId=ContentUris.parseId(uri);updateCount=dbConnection.update(TopicsTable.TABLE_NAME,values,TopicsTable.ID + "=" + topicsId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICSDETAILS_DIR:updateCount=dbConnection.update(TopicsDetailsTable.TABLE_NAME,values,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICSDETAILS_ID:final Long topicsdetailsId=ContentUris.parseId(uri);updateCount=dbConnection.update(TopicsDetailsTable.TABLE_NAME,values,TopicsDetailsTable.ID + "=" + topicsdetailsId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICSPARTICIPANTS_DIR:updateCount=dbConnection.update(TopicsParticipantsTable.TABLE_NAME,values,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICSPARTICIPANTS_ID:final Long topicsparticipantsId=ContentUris.parseId(uri);updateCount=dbConnection.update(TopicsParticipantsTable.TABLE_NAME,values,TopicsParticipantsTable.ID + "=" + topicsparticipantsId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;case SUGGESTED_TOPICS_DIR:updateCount=dbConnection.update(Suggested_topicsTable.TABLE_NAME,values,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case SUGGESTED_TOPICS_ID:final Long suggested_topicsId=ContentUris.parseId(uri);updateCount=dbConnection.update(Suggested_topicsTable.TABLE_NAME,values,Suggested_topicsTable.ID + "=" + suggested_topicsId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;case CATEGORY_GROUP_PERMISSIONS_DIR:updateCount=dbConnection.update(Category_group_permissionsTable.TABLE_NAME,values,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case CATEGORY_GROUP_PERMISSIONS_ID:final Long category_group_permissionsId=ContentUris.parseId(uri);updateCount=dbConnection.update(Category_group_permissionsTable.TABLE_NAME,values,Category_group_permissionsTable.ID + "=" + category_group_permissionsId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICS_USERS_DIR:updateCount=dbConnection.update(Topics_usersTable.TABLE_NAME,values,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICS_USERS_ID:final Long topics_usersId=ContentUris.parseId(uri);updateCount=dbConnection.update(Topics_usersTable.TABLE_NAME,values,Topics_usersTable.ID + "=" + topics_usersId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICS_PROPERTIES_DIR:updateCount=dbConnection.update(Topics_propertiesTable.TABLE_NAME,values,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPICS_PROPERTIES_ID:final Long topics_propertiesId=ContentUris.parseId(uri);updateCount=dbConnection.update(Topics_propertiesTable.TABLE_NAME,values,Topics_propertiesTable.ID + "=" + topics_propertiesId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPIC_POSTERS_DIR:updateCount=dbConnection.update(Topic_postersTable.TABLE_NAME,values,selection,selectionArgs);dbConnection.setTransactionSuccessful();break;case TOPIC_POSTERS_ID:final Long topic_postersId=ContentUris.parseId(uri);updateCount=dbConnection.update(Topic_postersTable.TABLE_NAME,values,Topic_postersTable.ID + "=" + topic_postersId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;default :throw new IllegalArgumentException("Unsupported URI:" + uri);}}  finally {dbConnection.endTransaction();}if (updateCount > 0) {getContext().getContentResolver().notifyChange(uri,null);}return updateCount;}  }
class C{  public void paintMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static int abs(int i){  return (i < 0) ? -i : i;}  }
class C{  public static void closeQuietly(@Nullable AsyncCloseable closeable){  if (null == closeable) {    return;  }  try {    FutureUtils.result(closeable.asyncClose());  } catch (  IOException e) {  }}  }
class C{  protected SourceImpl(){  super();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    return new Float(uiComp.getHeightf() / uiComp.getReality().getHeight());  }  return null;}  }
class C{  public SlideMove(int tile,int fromR,int fromC,int toR,int toC){  this.tile=tile;  this.fromR=fromR;  this.fromC=fromC;  this.toR=toR;  this.toC=toC;}  }
class C{  public static boolean hasMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return false;  }  return mimeTypeToExtensionMap.containsKey(mimeType);}  }
class C{  static String readFile(File file){  byte[] encoded;  try {    encoded=Files.readAllBytes(file.toPath());  } catch (  IOException e) {    return null;  }  return new String(encoded,Charset.forName("UTF-8"));}  }
class C{  public ShortcutInfo(AppInfo info){  super(info);  title=info.title.toString();  intent=new Intent(info.intent);  customIcon=false;  flags=info.flags;  firstInstallTime=info.firstInstallTime;}  }
class C{  public void addKeyword(String keyword){  keywords.add(keyword);}  }
class C{  public void carriageReturn(){  carriageReturn(0,-tl);}  }
class C{  public void writeClass(String className) throws IOException {  ConstantPool pool=_javaClass.getConstantPool();  ClassConstant classConst=pool.getClass(className);  if (classConst != null)   writeShort(classConst.getIndex()); else   writeShort(0);}  }
class C{  public void init(boolean forEncryption,CipherParameters param){  if (param instanceof ParametersWithRandom) {    ParametersWithRandom rParam=(ParametersWithRandom)param;    key=(RSAKeyParameters)rParam.getParameters();  } else {    key=(RSAKeyParameters)param;  }  this.forEncryption=forEncryption;}  }
class C{  public boolean hasAttribute(String key){  return client.hasAttribute(key);}  }
class C{  List<Product> moveProductsOfType(final List<Product> products,ServiceType... types){  if (types == null) {    return new ArrayList<Product>();  }  final List<Product> result=new ArrayList<Product>();  HashSet<ServiceType> srvTypes=new HashSet<ServiceType>(Arrays.asList(types));  for (  Product prd : products) {    if (srvTypes.contains(prd.getType())) {      result.add(prd);    }  }  products.removeAll(result);  return result;}  }
class C{  @Override public RegistrarContact build(){  checkNotNull(getInstance().parent,"Registrar parent cannot be null");  checkNotNull(getInstance().emailAddress,"Email address cannot be null");  return cloneEmptyToNull(super.build());}  }
class C{  public void mirror(Dataset other){  clear();  this.ntree.addAll(other.ntree);}  }
class C{  protected void updateOptionsForCode(String text){  for (Iterator it=options.getOptions().iterator(); it.hasNext(); ) {    CodePosition cp=(CodePosition)it.next();    JComboBox jcb=(JComboBox)optionMenuHashtable.get(cp);    if (jcb != null) {      int numComps=jcb.getItemCount();      for (int i=0; i < numComps; i++) {        if (((CodePosition)jcb.getItemAt(i)).codeMatches(text)) {          jcb.setSelectedIndex(i);          break;        }      }    }  }}  }
class C{  @Override public DPState computeFinal(HGNode tailNode,int i,int j,SourcePath sourcePath,Sentence sentence,Accumulator acc){  return tailNode.getDPState(stateIndex);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  UIManager.getLookAndFeel().provideErrorFeedback(target);}  }
class C{  private void caseFoldTitle(char word[],int length){  titleBuffer=ArrayUtil.grow(titleBuffer,length);  System.arraycopy(word,0,titleBuffer,0,length);  for (int i=1; i < length; i++) {    titleBuffer[i]=dictionary.caseFold(titleBuffer[i]);  }}  }
class C{  public ContributionBox(Address a,Object o){  this(a,System.currentTimeMillis(),o);}  }
class C{  public JVM(){  this(System.getProperty("java.version"));}  }
class C{  public static <U,R>Function<ObservableTSeq<U>,ObservableTSeq<R>> lift(final Function<? super U,? extends R> fn){  return null;}  }
class C{  public Entry(int start,int end,CatchHandlerList handlers){  if (start < 0) {    throw new IllegalArgumentException("start < 0");  }  if (end <= start) {    throw new IllegalArgumentException("end <= start");  }  if (handlers.isMutable()) {    throw new IllegalArgumentException("handlers.isMutable()");  }  this.start=start;  this.end=end;  this.handlers=handlers;}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  if (unit instanceof Infantry) {    result=true;  }  if (currentSpace < 1) {    result=false;  }  if (doors < loadedThisTurn) {    result=false;  }  return result;}  }
class C{  protected HashAttributeSet(Attribute[] attributes,Class<?> interfaceName){  if (interfaceName == null) {    throw new NullPointerException("null interface");  }  myInterface=interfaceName;  int n=attributes == null ? 0 : attributes.length;  for (int i=0; i < n; ++i) {    add(attributes[i]);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void error(String msg,Object[] args) throws javax.xml.transform.TransformerException {  java.lang.String fmsg=org.apache.xalan.res.XSLMessages.createXPATHMessage(msg,args);  throw new javax.xml.transform.TransformerException(fmsg);}  }
class C{  public MassData(){  mass=I=0f;  center=new Vec2();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:23.632 -0400",hash_original_method="89F2C35600300C50A3DBB522D6A4DDE2",hash_generated_method="5146E8B818C8357BD9CA478C2FE8526E") public void run(){  if (mMenuBeingLongpressed) {    setChildrenCaptionMode(!mLastChildrenCaptionMode);  } else {    mMenuBeingLongpressed=true;    setCycleShortcutCaptionMode(true);  }  postDelayed(this,ITEM_CAPTION_CYCLE_DELAY);}  }
class C{  protected void reflectionAppendArrayDetail(StringBuffer buffer,String fieldName,Object array){  buffer.append(arrayStart);  int length=Array.getLength(array);  for (int i=0; i < length; i++) {    Object item=Array.get(array,i);    if (i > 0) {      buffer.append(arraySeparator);    }    if (item == null) {      appendNullText(buffer,fieldName);    } else {      appendInternal(buffer,fieldName,item,arrayContentDetail);    }  }  buffer.append(arrayEnd);}  }
class C{  @Override public void put(String name,int value){  emulatedFields.put(name,value);}  }
class C{  public h1(String value){  addElement(value);}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=itemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * PADDING;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  private String updateResponse(HttpServletRequest request,MRfQResponse rfqResponse){  log.fine("updateResponse - " + rfqResponse);  String saveError="RfQ NOT updated";  String msg="RfQ updated";  rfqResponse.setName(WebUtil.getParameter(request,"Name"));  rfqResponse.setDescription(WebUtil.getParameter(request,"Description"));  rfqResponse.setHelp(WebUtil.getParameter(request,"Help"));  rfqResponse.setDateWorkStart(WebUtil.getParameterAsDate(request,"DateWorkStart"));  rfqResponse.setDateWorkComplete(WebUtil.getParameterAsDate(request,"DateWorkComplete"));  rfqResponse.setDeliveryDays(WebUtil.getParameterAsInt(request,"DeliveryDays"));  rfqResponse.setPrice(WebUtil.getParameterAsBD(request,"Price"));  rfqResponse.setIsSelfService(true);  rfqResponse.setDateResponse(new Timestamp(System.currentTimeMillis()));  if (WebUtil.getParameterAsBoolean(request,"IsComplete")) {    String msgComplete=rfqResponse.checkComplete();    if (msgComplete != null && msgComplete.length() > 0)     msg=msgComplete;  }  if (!rfqResponse.save())   return saveError;  MRfQResponseLine[] lines=rfqResponse.getLines(false);  for (int i=0; i < lines.length; i++) {    MRfQResponseLine line=lines[i];    if (!line.isActive())     continue;    String paraAdd="_" + line.getC_RfQResponseLine_ID();    line.setDescription(WebUtil.getParameter(request,"Description" + paraAdd));    line.setHelp(WebUtil.getParameter(request,"Help" + paraAdd));    line.setDateWorkStart(WebUtil.getParameterAsDate(request,"DateWorkStart" + paraAdd));    line.setDateWorkComplete(WebUtil.getParameterAsDate(request,"DateWorkComplete" + paraAdd));    line.setDeliveryDays(WebUtil.getParameterAsInt(request,"DeliveryDays" + paraAdd));    line.setIsSelfService(true);    if (!line.save())     return saveError;    MRfQResponseLineQty[] qtys=line.getQtys(true);    for (int j=0; j < qtys.length; j++) {      MRfQResponseLineQty qty=qtys[j];      if (!qty.isActive())       continue;      paraAdd="_" + qty.getC_RfQResponseLineQty_ID();      qty.setDiscount(WebUtil.getParameterAsBD(request,"Discount" + paraAdd));      qty.setPrice(WebUtil.getParameterAsBD(request,"Price" + paraAdd));      if (!qty.save())       return saveError;    }  }  log.fine("complete - " + rfqResponse);  return msg;}  }
class C{  public List<StorageFile> createStorageFilesFromS3ObjectSummaries(List<S3ObjectSummary> s3ObjectSummaries){  List<StorageFile> storageFiles=new ArrayList<>();  for (  S3ObjectSummary s3ObjectSummary : s3ObjectSummaries) {    storageFiles.add(new StorageFile(s3ObjectSummary.getKey(),s3ObjectSummary.getSize(),null));  }  return storageFiles;}  }
class C{  public static boolean isUrl(String url){  if (TextUtils.isEmpty(url)) {    return false;  }  String encodedUrl=getASCIIEncodedUrl(url,"UTF-8");  if (TextUtils.isEmpty(encodedUrl)) {    return false;  }  return true;}  }
class C{  public ProcessExecutionOperatorExceptionError(Operator operator,OperatorException cause){  super(operator,971,"unknown",operator.getName(),cause.getMessage());  this.cause=cause;}  }
class C{  public static Account selected(){  if (sAccount == null) {    String name=Prefs.getString(context(),APP,ACCOUNT_NAME);    if (!TextUtils.isEmpty(name)) {      sAccount=new Account(name,GOOGLE_ACCOUNT_TYPE);    }  }  return sAccount;}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  public static IHjsonDsfProvider math(){  return new DsfMath();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private void startManagedProfileManager(){  Intent ManagedProfileManager=new Intent(getApplicationContext(),WorkProfileManager.class);  startActivity(ManagedProfileManager);}  }
class C{  @Override public void generateOutput() throws Exception {  BufferedImage bi;  Graphics g;  ImageWriter writer;  Iterator<ImageWriter> iter;  ImageOutputStream ios;  ImageWriteParam param;  bi=new BufferedImage(getComponent().getWidth(),getComponent().getHeight(),BufferedImage.TYPE_INT_RGB);  g=bi.getGraphics();  g.setPaintMode();  g.setColor(getBackground());  if (g instanceof Graphics2D) {    ((Graphics2D)g).scale(getXScale(),getYScale());  }  g.fillRect(0,0,getComponent().getWidth(),getComponent().getHeight());  getComponent().printAll(g);  writer=null;  iter=ImageIO.getImageWritersByFormatName(getExtension().replace(".",""));  if (iter.hasNext()) {    writer=iter.next();  } else {    throw new Exception("No writer available for " + getDescription() + "!");  }  ios=ImageIO.createImageOutputStream(getFile());  writer.setOutput(ios);  param=new JPEGImageWriteParam(Locale.getDefault());  param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);  param.setCompressionQuality(getQuality());  writer.write(null,new IIOImage(bi,null,null),param);  ios.flush();  writer.dispose();  ios.close();}  }
class C{  public static AsicContainer read(InputStream is) throws Exception {  return AsicHelper.read(is);}  }
class C{  private boolean ruleR8(Node a,Node c,Graph graph){  List<Node> intoCArrows=graph.getNodesInTo(c,Endpoint.ARROW);  for (  Node b : intoCArrows) {    if (!graph.isAdjacentTo(a,b)) {      continue;    }    if (!graph.isAdjacentTo(b,c)) {      continue;    }    if (!(graph.getEndpoint(b,a) == Endpoint.TAIL)) {      continue;    }    if (!(graph.getEndpoint(c,b) == Endpoint.TAIL)) {      continue;    }    if (graph.getEndpoint(a,b) == Endpoint.TAIL) {      continue;    }    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("R8",graph.getEdge(c,a)));    graph.setEndpoint(c,a,Endpoint.TAIL);    changeFlag=true;    return true;  }  return false;}  }
class C{  public String lowercaseTokensTipText(){  return "Whether to convert all tokens to lowercase";}  }
class C{  public void invertOrder(){  this.ascending=!this.ascending;}  }
class C{  public LoginButton(Context context){  super(context,null,0,0,AnalyticsEvents.EVENT_LOGIN_BUTTON_CREATE,DEFAULT_REQUEST_CODE);}  }
class C{  public void init() throws ServletException {}  }
class C{  public RosterFrameAction(String pName,boolean allowQuit){  super(pName);  this.allowQuit=allowQuit;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().getChannels();}  }
class C{  public boolean isEmpty(){  return !iterator().hasNext();}  }
class C{  public StatisticalResultsViewer(Controller controller,String results){  super(localization.getString("title.statisticalResults"));  this.controller=controller;  this.results=results;  initialize();  layoutComponents();  setSize(800,600);  setMinimumSize(new Dimension(800,600));  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);}  }
class C{  public final T blockLastMillis(long timeout){  BlockingLastSubscriber<T> subscriber=new BlockingLastSubscriber<>();  subscribe(subscriber);  return subscriber.blockingGet(timeout,TimeUnit.MILLISECONDS);}  }
class C{  public Matrix4x3d translation(Vector3dc offset){  return translation(offset.x(),offset.y(),offset.z());}  }
class C{  public boolean isCachedFile(){  return true;}  }
class C{  public Table findLocalTempTable(String name){  if (localTempTables == null) {    return null;  }  return localTempTables.get(name);}  }
class C{  ResumableHttpFileUploader(Builder builder) throws IOException {  url=builder.url;  data=builder.data;  executor=builder.executor;  urlConnectionFactory=builder.urlConnectionFactory;  progressListener=builder.progressListener;  progressIntervalMillis=Math.max(0,builder.progressIntervalMillis);  chunkSize=builder.chunkSize;  httpRequestMethod=builder.requestMethod;  backoffPolicy=builder.backoffPolicy;  checkArgument(url != null && url.getHost() != null && url.getHost().length() > 0 && url.getPath() != null && url.getPath().length() > 0,"The url must be non null and have a non-empty host and path.");  checkArgument(executor != null,"Must provide a non-null executor service.");  checkArgument(urlConnectionFactory != null,"Factories must be non-null.");  if (RequestMethod.POST.equals(httpRequestMethod)) {    addHeader(METHOD_OVERRIDE,RequestMethod.PUT.toString());  }}  }
class C{  public int hashCode(){  return toString().hashCode();}  }
class C{  public final AC grow(float w){  return grow(w,curIx);}  }
class C{  private TXOriginatorRecoveryProcessor(DM dm,Set members){  super(dm,members);}  }
class C{  public CActionZoomSelected(final ZyGraph graph){  super("Zoom Selected");  m_graph=Preconditions.checkNotNull(graph,"IE02836: graph argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Zoom Selected");  putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/frameall_up.jpg")));}  }
class C{  protected void optimize(final AST2BOpContext ctx,final StaticAnalysis sa,final JoinGroupNode group,final FilterNode filterNode){  final IValueExpressionNode veNode=filterNode.getValueExpressionNode();  if (veNode instanceof FunctionNode) {    final FunctionNode funcNode=(FunctionNode)veNode;    if (funcNode.getFunctionURI().equals(BDS.SEARCH_IN_SEARCH)) {      filterNode.setArg(0,convert(ctx,funcNode));    }  }}  }
class C{  protected double estimateMaximumTickLabelWidth(Graphics2D g2,TickUnit unit){  RectangleInsets tickLabelInsets=getTickLabelInsets();  double result=tickLabelInsets.getLeft() + tickLabelInsets.getRight();  if (isVerticalTickLabels()) {    FontRenderContext frc=g2.getFontRenderContext();    LineMetrics lm=getTickLabelFont().getLineMetrics("0",frc);    result+=lm.getHeight();  } else {    FontMetrics fm=g2.getFontMetrics(getTickLabelFont());    Range range=getRange();    double lower=range.getLowerBound();    double upper=range.getUpperBound();    String lowerStr, upperStr;    NumberFormat formatter=getNumberFormatOverride();    if (formatter != null) {      lowerStr=formatter.format(lower);      upperStr=formatter.format(upper);    } else {      lowerStr=unit.valueToString(lower);      upperStr=unit.valueToString(upper);    }    double w1=fm.stringWidth(lowerStr);    double w2=fm.stringWidth(upperStr);    result+=Math.max(w1,w2);  }  return result;}  }
class C{  public static Object newInstance(File file,Class<?> template,File[] paths){  Object result;  String tempName;  String instanceName;  String javaClassName;  String objectDef;  int i;  String[] tmpPaths;  HashSet<String> currentPaths;  String filename;  Object interpreter;  result=null;  if (!isPresent()) {    return result;  }  interpreter=newInterpreter();  if (interpreter == null) {    return result;  }  if (paths.length > 0) {    invoke(interpreter,"exec",new Class[]{String.class},new Object[]{"import sys"});    instanceName="syspath";    invoke(interpreter,"exec",new Class[]{String.class},new Object[]{instanceName + " = sys.path"});    currentPaths=new HashSet<String>();    try {      tmpPaths=(String[])invoke(interpreter,"get",new Class[]{String.class,Class.class},new Object[]{instanceName,String[].class});      for (i=0; i < tmpPaths.length; i++) {        currentPaths.add(tmpPaths[i]);      }    } catch (    Exception ex) {      ex.printStackTrace();    }    for (i=0; i < paths.length; i++) {      if (!currentPaths.contains(paths[i].getAbsolutePath())) {        invoke(interpreter,"exec",new Class[]{String.class},new Object[]{"sys.path.append('" + paths[i].getAbsolutePath() + "')"});      }    }  }  filename=file.getAbsolutePath();  invoke(interpreter,"execfile",new Class[]{String.class},new Object[]{filename});  tempName=filename.substring(filename.lastIndexOf("/") + 1);  tempName=tempName.substring(0,tempName.indexOf("."));  instanceName=tempName.toLowerCase();  javaClassName=tempName.substring(0,1).toUpperCase() + tempName.substring(1);  objectDef="=" + javaClassName + "()";  invoke(interpreter,"exec",new Class[]{String.class},new Object[]{instanceName + objectDef});  try {    result=invoke(interpreter,"get",new Class[]{String.class,Class.class},new Object[]{instanceName,template});  } catch (  Exception ex) {    ex.printStackTrace();  }  return result;}  }
class C{  private void resetStatusValues(){  dupToken=false;  oldToken=false;  unseqToken=false;  gapToken=false;  minorStatus=0;  minorString=null;}  }
class C{  public TermVectorsRequest dfs(boolean dfs){  setFlag(Flag.Dfs,dfs);  return this;}  }
class C{  public boolean inPackage(){  return false;}  }
class C{  public void pause(){  try {    mCurrentMediaPlayer.pause();  } catch (  Throwable ignored) {  }}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  final SpeakerNPC npc=instantiate(getName(ctx));  npc.setBaseHP(100);  npc.setHP(getHP(ctx));  npc.setLevel(getLevel(ctx));  final String clazz=getClass(ctx);  if (clazz != null) {    npc.setEntityClass(clazz);  }  final String description=getDescription(ctx);  if (description != null) {    npc.setDescription(description);  }  final List<Node> path=getPath(ctx);  npc.setPath(new FixedPath(path,path.size() > 0));  npc.setDirection(getDirection(ctx));  createDialog(npc);  return npc;}  }
class C{  public static double parseDouble(FXGNode node,String value,String name,double min,double max,double defaultValue){  try {    double d=Double.parseDouble(value);    if (d >= min && d <= max) {      return d;    }  } catch (  NumberFormatException e) {    throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidDoubleValue",name,value);  }  if (((AbstractFXGNode)node).isVersionGreaterThanCompiler()) {    FXGLog.getLogger().log(FXGLogger.WARN,"DefaultAttributeValue",null,((AbstractFXGNode)node).getDocumentName(),node.getStartLine(),node.getStartColumn(),defaultValue,name);    return defaultValue;  } else {    throw new FXGException(node.getStartLine(),node.getStartColumn(),"OutOfRangeValue",name,value,min,max);  }}  }
class C{  public static final long crc64Long(String in){  if (in == null || in.length() == 0) {    return 0;  }  return crc64Long(getBytes(in));}  }
class C{  protected void initVariantsInClassScope(){{    final ElementFilter position=new AndFilter(new NotFilter(CLASS_BODY.getValue()),new NotFilter(new AfterElementFilter(new ContentFilter(new TextFilter(PsiKeyword.EXTENDS)))),new NotFilter(new AfterElementFilter(new ContentFilter(new TextFilter(PsiKeyword.IMPLEMENTS)))),new NotFilter(new LeftNeighbour(new LeftNeighbour(new TextFilter("<",",")))),new NotFilter(new ScopeFilter(new EnumOrAnnotationTypeFilter())),new LeftNeighbour(new OrFilter(new ClassFilter(PsiIdentifier.class),new TextFilter(">"))));    final CompletionVariant variant=new CompletionVariant(position);    variant.includeScopeClass(PsiClass.class,true);    variant.addCompletion(PsiKeyword.EXTENDS,TailType.HUMBLE_SPACE_BEFORE_WORD);    variant.excludeScopeClass(PsiAnonymousClass.class);    variant.excludeScopeClass(PsiTypeParameter.class);    registerVariant(variant);  }{    final ElementFilter position=new AndFilter(new NotFilter(CLASS_BODY.getValue()),new NotFilter(new BeforeElementFilter(new ContentFilter(new TextFilter(PsiKeyword.EXTENDS)))),new NotFilter(new AfterElementFilter(new ContentFilter(new TextFilter(PsiKeyword.IMPLEMENTS)))),new NotFilter(new LeftNeighbour(new LeftNeighbour(new TextFilter("<",",")))),new LeftNeighbour(new OrFilter(new ClassFilter(PsiIdentifier.class),new TextFilter(">"))),new NotFilter(new ScopeFilter(new InterfaceFilter())));    final CompletionVariant variant=new CompletionVariant(position);    variant.includeScopeClass(PsiClass.class,true);    variant.addCompletion(PsiKeyword.IMPLEMENTS,TailType.HUMBLE_SPACE_BEFORE_WORD);    variant.excludeScopeClass(PsiAnonymousClass.class);    registerVariant(variant);  }{    final CompletionVariant variant=new CompletionVariant(PsiElement.class,psiElement().afterLeaf(psiElement(PsiIdentifier.class).afterLeaf(psiElement().withText(string().oneOf(",","<")).withParent(PsiTypeParameterList.class))));    variant.addCompletion(PsiKeyword.EXTENDS,TailType.HUMBLE_SPACE_BEFORE_WORD);    registerVariant(variant);  }}  }
class C{  public static boolean isName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0;}  }
class C{  public Object clone(){  ListeningPointImpl lip=new ListeningPointImpl(this.sipStack,this.port,null);  lip.sipStack=this.sipStack;  return lip;}  }
class C{  public String sprintf(){  final Iterator<ConversionSpecification> e=vFmt.iterator();  ConversionSpecification cs;  char c;  final StringBuilder sb=new StringBuilder();  while (e.hasNext()) {    cs=e.next();    c=cs.getConversionCharacter();    if (c == '\0') {      sb.append(cs.getLiteral());    } else     if (c == '%') {      sb.append('%');    }  }  return sb.toString();}  }
class C{  @Deprecated public List<Reference> listByTimeRange(Date start,Date end){  Long startTime=null;  if (start != null) {    startTime=start.getTime();  }  Long endTime=null;  if (end != null) {    endTime=end.getTime();  }  return listByTimeRange(startTime,endTime);}  }
class C{  public void updateCouplings(List<Coupling<?>> couplingList){  for (  Coupling<?> coupling : couplingList) {    coupling.setBuffer();  }  for (  Coupling<?> coupling : couplingList) {    coupling.update();  }}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  return errors;}  }
class C{  public static double sumArea(GeometricObject[] a){  double sum=0;  for (int i=0; i < a.length; i++) {    sum+=a[i].getArea();  }  return sum;}  }
class C{  public void dragExit(DropTargetEvent e){  if (!DragSource.isDragImageSupported()) {    repaint(_raGhost.getBounds());  }}  }
class C{  public RunPanel(){  m_StartBut.addActionListener(this);  m_StopBut.addActionListener(this);  m_StartBut.setEnabled(false);  m_StopBut.setEnabled(false);  m_StartBut.setMnemonic('S');  m_StopBut.setMnemonic('t');  m_Log.statusMessage(NOT_RUNNING);  JPanel controls=new JPanel();  GridBagLayout gb=new GridBagLayout();  GridBagConstraints constraints=new GridBagConstraints();  controls.setBorder(BorderFactory.createEmptyBorder(10,5,10,5));  controls.setLayout(gb);  constraints.gridx=0;  constraints.gridy=0;  constraints.weightx=5;  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.insets=new Insets(0,2,0,2);  controls.add(m_StartBut,constraints);  constraints.gridx=1;  constraints.gridy=0;  constraints.weightx=5;  constraints.gridwidth=1;  constraints.gridheight=1;  controls.add(m_StopBut,constraints);  setLayout(new BorderLayout());  add(controls,BorderLayout.NORTH);  add(m_Log,BorderLayout.CENTER);}  }
class C{  public int indentationLevel(){  return indentationLevel;}  }
class C{  private String maskCompanyName(String currentLine){  return currentLine.replace(mCompanyName,mCompanyNameNew);}  }
class C{  public void gprint(String srcName,String format,boolean strftime){  comments.add(new PrintText(srcName,format,true,strftime));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.758 -0500",hash_original_method="FAC876C37AFEF4F78CD743FFA4604104",hash_generated_method="BD2EA33AFE401E1B9E6A8F89B30E473D") public Reader retrieveArticleHeader(String articleId) throws IOException {  return retrieveArticleHeader(articleId,null);}  }
class C{  public boolean isVisible(){  return mVisible;}  }
class C{  public static void onEvent(int eventType){  if (sInstance == null) {    sInstance=new CameraPerformanceTracker();  }  long currentTime=System.currentTimeMillis();switch (eventType) {case ACTIVITY_START:    sInstance.mAppStartTime=currentTime;  break;case ACTIVITY_PAUSE:sInstance.mFirstPreviewFrameLatencyWarmStart=UNSET;break;case ACTIVITY_RESUME:sInstance.mAppResumeTime=currentTime;break;case FIRST_PREVIEW_FRAME:Log.d(TAG,"First preview frame received");if (sInstance.mFirstPreviewFrameLatencyColdStart == UNSET) {sInstance.mFirstPreviewFrameLatencyColdStart=currentTime - sInstance.mAppStartTime;} else {sInstance.mFirstPreviewFrameLatencyWarmStart=currentTime - sInstance.mAppResumeTime;}if (sInstance.mModeSwitchStartTime != UNSET) {sInstance.mModeSwitchDuration=currentTime - sInstance.mModeSwitchStartTime;sInstance.mModeSwitchStartTime=UNSET;}break;case MODE_SWITCH_START:sInstance.mModeSwitchStartTime=currentTime;break;default :break;}if (DEBUG && eventType == FIRST_PREVIEW_FRAME) {Log.d(TAG,"Mode switch duration: " + (sInstance.mModeSwitchDuration == UNSET ? "UNSET" : sInstance.mModeSwitchDuration));Log.d(TAG,"Cold start latency: " + (sInstance.mFirstPreviewFrameLatencyColdStart == UNSET ? "UNSET" : sInstance.mFirstPreviewFrameLatencyColdStart));Log.d(TAG,"Warm start latency: " + (sInstance.mFirstPreviewFrameLatencyWarmStart == UNSET ? "UNSET" : sInstance.mFirstPreviewFrameLatencyWarmStart));}}  }
class C{  public void mouseDragged(MouseEvent e){  if (gestures != null) {    gestures.mouseDragged(e);  }  mouseSupport.fireMapMouseDragged(e);  fireMouseLocation(e);}  }
class C{  public Soap parse(String contentType,InputStream is){  String mimeType=MimeUtils.getBaseContentType(contentType);  String charset=MimeUtils.getCharset(contentType);  return parse(mimeType,charset,is);}  }
class C{  public void save(){  final StringBuilder buf=new StringBuilder();  for (  final WindowConfiguration config : configs.values()) {    buf.append(config.writeToPropertyString());  }  for (  final Object key : properties.keySet()) {    if (key.toString().startsWith("config.")) {      buf.append(key.toString() + "=" + properties.get(key)+ "\n");    }  }  try {    final OutputStream os=Persistence.get().getOutputStream(false,stendhal.getGameFolder(),FILE_NAME);    try {      final OutputStreamWriter writer=new OutputStreamWriter(os,"ISO-8859-1");      try {        writer.append(buf.toString());      }  finally {        writer.close();      }    }  finally {      os.close();    }  } catch (  final IOException e) {    logger.error("Can't write " + stendhal.getGameFolder() + FILE_NAME,e);  }}  }
class C{  Wizard(WizardImplementation impl){  this.impl=impl;  if (impl == null)   throw new NullPointerException();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.PARAMETER_LIST___PARAMETER_1:    getParameter_1().clear();  return;case UmplePackage.PARAMETER_LIST___ANONYMOUS_PARAMETER_LIST_11:getAnonymous_parameterList_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  Set extns=getCriticalExtensionOIDs();  return extns != null && !extns.isEmpty();}  }
class C{  public IMessage delete(int index) throws RateLimitException, DiscordException, MissingPermissionsException {  IMessage message=get(index);  if (message != null) {    message.delete();  }  return message;}  }
class C{  public void close() throws IOException {  reader.close();}  }
class C{  public final Flux<T> defaultIfEmpty(T defaultV){  return onAssembly(new FluxDefaultIfEmpty<>(this,defaultV));}  }
class C{  DeckChildView findViewAtPoint(int x,int y){  int childCount=mDeckView.getChildCount();  for (int i=childCount - 1; i >= 0; i--) {    DeckChildView tv=(DeckChildView)mDeckView.getChildAt(i);    if (tv.getVisibility() == View.VISIBLE) {      if (mDeckView.isTransformedTouchPointInView(x,y,tv)) {        return tv;      }    }  }  return null;}  }
class C{  protected SystemColorSupport(){}  }
class C{  public T caseActionDefinition(ActionDefinition object){  return null;}  }
class C{  public void deleteInvalidFlows(IOFSwitch sw,Map<OFPort,List<Match>> invalidOutportAndMatch){  log.debug("Deleting invalid flows on switch : " + sw.getId());  Map<OFPort,List<Match>> invalidNeighborIngressAndMatches=new HashMap<OFPort,List<Match>>();  for (  OFPort outPort : invalidOutportAndMatch.keySet()) {    List<OFFlowStatsReply> flows=getFlows(sw,outPort);    for (    OFFlowStatsReply flow : flows) {      for (      OFFlowStatsEntry entry : flow.getEntries()) {        for (        Match match : invalidOutportAndMatch.get(outPort)) {          if (entry.getMatch().get(MatchField.ETH_DST).equals(match.get(MatchField.ETH_DST)) && entry.getMatch().get(MatchField.ETH_SRC).equals(match.get(MatchField.ETH_SRC)) && entry.getMatch().get(MatchField.ETH_TYPE).equals(match.get(MatchField.ETH_TYPE))&& entry.getMatch().get(MatchField.VLAN_VID).equals(match.get(MatchField.VLAN_VID))&& entry.getMatch().get(MatchField.IPV4_DST).equals(match.get(MatchField.IPV4_DST))&& entry.getMatch().get(MatchField.IP_PROTO).equals(match.get(MatchField.IP_PROTO))&& entry.getMatch().get(MatchField.IPV4_SRC).equals(match.get(MatchField.IPV4_SRC))&& entry.getMatch().get(MatchField.IP_DSCP).equals(match.get(MatchField.IP_DSCP))&& entry.getMatch().get(MatchField.IP_ECN).equals(match.get(MatchField.IP_ECN))) {            if (invalidNeighborIngressAndMatches.containsKey(match.get(MatchField.IN_PORT)))             invalidNeighborIngressAndMatches.get(match.get(MatchField.IN_PORT)).add(match); else {              List<Match> matches=new ArrayList<Match>();              matches.add(match);              invalidNeighborIngressAndMatches.put(match.get(MatchField.IN_PORT),matches);            }            clearFlowMods(sw,entry.getMatch(),outPort);          }        }      }    }    Map<IOFSwitch,Map<OFPort,List<Match>>> neighborSwitches=new HashMap<IOFSwitch,Map<OFPort,List<Match>>>();    for (    Link link : links.keySet()) {      if (link.getDst().equals(sw.getId())) {        for (        Entry<OFPort,List<Match>> ingressPort : invalidNeighborIngressAndMatches.entrySet()) {          if (link.getDstPort().equals(ingressPort.getKey())) {            Map<OFPort,List<Match>> invalidNeighborOutportAndMatch=new HashMap<OFPort,List<Match>>();            invalidNeighborOutportAndMatch.put(link.getSrcPort(),ingressPort.getValue());            neighborSwitches.put(switchService.getSwitch(link.getSrc()),invalidNeighborOutportAndMatch);          }        }      }    }    log.debug("We have " + neighborSwitches.size() + " neighbors to deal with!");    for (    IOFSwitch neighborSwitch : neighborSwitches.keySet()) {      log.debug("NeighborSwitch ID : " + neighborSwitch.getId());      deleteInvalidFlows(neighborSwitch,neighborSwitches.get(neighborSwitch));    }  }}  }
class C{  private void checkPersianDateValidation(int year,int month,int day){  if (year < 1)   throw new RuntimeException("year is not valid");  if (month < 1 || month > 12)   throw new RuntimeException("month is not valid");  if (day < 1 || day > 31)   throw new RuntimeException("day is not valid");  if (month > 6 && day == 31)   throw new RuntimeException("day is not valid");  if (month == 12 && day == 30 && !PersianCalendarUtils.isPersianLeapYear(year))   throw new RuntimeException("day is not valid " + year + " is not a leap year");}  }
class C{  int transientBits(){  int freebits=0;  if (m_addr != 0) {    for (int i=0; i < m_live.length; i++) {      int chkbits=m_transients[i] & ~m_live[i];      if (chkbits != 0) {        if (chkbits == 0xFFFFFFFF) {          freebits+=32;        } else {          for (int b=0; b < 32; b++) {            if ((chkbits & (1 << b)) != 0) {              freebits++;            }          }        }      }    }  }  return freebits;}  }
class C{  private Class<?> findDexClass(String name) throws TestFailed, InvocationTargetException {  try {    Class mDexClass=ClassLoader.getSystemClassLoader().loadClass("dalvik.system.DexFile");    Constructor ctor=mDexClass.getConstructor(new Class[]{String.class});    Object mDexFile=ctor.newInstance(DEX_FILE);    Method meth=mDexClass.getMethod("loadClass",new Class[]{String.class,ClassLoader.class});    meth.invoke(mDexFile,name,this);  } catch (  NoSuchMethodException nsme) {    throw new TestFailed(nsme);  }catch (  InstantiationException ie) {    throw new TestFailed(ie);  }catch (  IllegalAccessException iae) {    throw new TestFailed(iae);  }catch (  ClassNotFoundException cnfe) {    throw new TestFailed(cnfe);  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:32.927 -0500",hash_original_method="17488503592C6659F091CE1A79A12BD0",hash_generated_method="C72B4B66FE340E977D3EB25CDE7A551B") static public IApplicationThread asInterface(IBinder obj){  if (obj == null) {    return null;  }  IApplicationThread in=(IApplicationThread)obj.queryLocalInterface(descriptor);  if (in != null) {    return in;  }  return new ApplicationThreadProxy(obj);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  java.util.List expectedNames=new java.util.ArrayList();  expectedNames.add("html");  expectedNames.add("head");  expectedNames.add("meta");  expectedNames.add("title");  expectedNames.add("script");  expectedNames.add("script");  expectedNames.add("script");  expectedNames.add("body");  expectedNames.add("p");  expectedNames.add("em");  expectedNames.add("strong");  expectedNames.add("code");  expectedNames.add("sup");  expectedNames.add("var");  expectedNames.add("acronym");  expectedNames.add("p");  expectedNames.add("em");  expectedNames.add("strong");  expectedNames.add("code");  expectedNames.add("sup");  expectedNames.add("var");  expectedNames.add("acronym");  expectedNames.add("p");  expectedNames.add("em");  expectedNames.add("strong");  expectedNames.add("code");  expectedNames.add("sup");  expectedNames.add("var");  expectedNames.add("acronym");  expectedNames.add("p");  expectedNames.add("em");  expectedNames.add("strong");  expectedNames.add("code");  expectedNames.add("sup");  expectedNames.add("var");  expectedNames.add("acronym");  expectedNames.add("p");  expectedNames.add("em");  expectedNames.add("strong");  expectedNames.add("code");  expectedNames.add("sup");  expectedNames.add("var");  expectedNames.add("acronym");  java.util.List svgExpectedNames=new java.util.ArrayList();  svgExpectedNames.add("svg");  svgExpectedNames.add("rect");  svgExpectedNames.add("script");  svgExpectedNames.add("head");  svgExpectedNames.add("meta");  svgExpectedNames.add("title");  svgExpectedNames.add("body");  svgExpectedNames.add("p");  svgExpectedNames.add("em");  svgExpectedNames.add("strong");  svgExpectedNames.add("code");  svgExpectedNames.add("sup");  svgExpectedNames.add("var");  svgExpectedNames.add("acronym");  svgExpectedNames.add("p");  svgExpectedNames.add("em");  svgExpectedNames.add("strong");  svgExpectedNames.add("code");  svgExpectedNames.add("sup");  svgExpectedNames.add("var");  svgExpectedNames.add("acronym");  svgExpectedNames.add("p");  svgExpectedNames.add("em");  svgExpectedNames.add("strong");  svgExpectedNames.add("code");  svgExpectedNames.add("sup");  svgExpectedNames.add("var");  svgExpectedNames.add("acronym");  svgExpectedNames.add("p");  svgExpectedNames.add("em");  svgExpectedNames.add("strong");  svgExpectedNames.add("code");  svgExpectedNames.add("sup");  svgExpectedNames.add("var");  svgExpectedNames.add("acronym");  svgExpectedNames.add("p");  svgExpectedNames.add("em");  svgExpectedNames.add("strong");  svgExpectedNames.add("code");  svgExpectedNames.add("sup");  svgExpectedNames.add("var");  svgExpectedNames.add("acronym");  java.util.List actualNames=new java.util.ArrayList();  Element thisElement;  String thisTag;  doc=(Document)load("hc_staff",false);  nameList=doc.getElementsByTagName("*");  for (int indexN10148=0; indexN10148 < nameList.getLength(); indexN10148++) {    thisElement=(Element)nameList.item(indexN10148);    thisTag=thisElement.getTagName();    actualNames.add(thisTag);  }  if (("image/svg+xml".equals(getContentType()))) {    assertEqualsAutoCase("element","svgTagNames",svgExpectedNames,actualNames);  } else {    assertEqualsAutoCase("element","tagNames",expectedNames,actualNames);  }}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public SusiThought(Matcher matcher){  this();  this.setOffset(0).setHits(1);  JSONObject row=new JSONObject();  row.put("0",matcher.group(0));  for (int i=0; i < matcher.groupCount(); i++) {    row.put(Integer.toString(i + 1),matcher.group(i + 1));  }  this.setData(new JSONArray().put(row));}  }
class C{  @Path("show") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public ShowFileContentResponse showFileContent(ShowFileContentRequest request) throws ApiException {  try (GitConnection gitConnection=getGitConnection()){    return gitConnection.showFileContent(request);  } }  }
class C{  public static VariableLatch create(){  return create(0);}  }
class C{  private void parseImplicitTld(JspCompilationContext ctxt,String path) throws JasperException {  InputStream is=null;  TreeNode tld=null;  try {    URL uri=ctxt.getResource(path);    if (uri == null) {      return;    }    is=uri.openStream();    tld=new ParserUtils().parseXMLDocument(IMPLICIT_TLD,is,ctxt.getOptions().isValidationEnabled());  } catch (  Exception ex) {    throw new JasperException(ex);  } finally {    if (is != null) {      try {        is.close();      } catch (      Throwable t) {      }    }  }  this.jspversion=tld.findAttribute("version");  Iterator list=tld.findChildren();  while (list.hasNext()) {    TreeNode element=(TreeNode)list.next();    String tname=element.getName();    if ("tlibversion".equals(tname) || "tlib-version".equals(tname)) {      this.tlibversion=element.getBody();    } else     if ("jspversion".equals(tname) || "jsp-version".equals(tname)) {      this.jspversion=element.getBody();    } else     if (!"shortname".equals(tname) && !"short-name".equals(tname)) {      err.jspError("jsp.error.implicitTld.additionalElements",path,tname);    }  }  Double jspVersionDouble=Double.valueOf(this.jspversion);  if (Double.compare(jspVersionDouble,Constants.JSP_VERSION_2_0) < 0) {    err.jspError("jsp.error.implicitTld.jspVersion",path,this.jspversion);  }}  }
class C{  public static String byteToString58(byte[] array){  return Base58.encode(array);}  }
class C{  protected boolean isStartBlockOccupied(){  int blockState=getBlockOrderAt(0).getBlock().getState();  if ((blockState & OBlock.UNOCCUPIED) == OBlock.UNOCCUPIED) {    return false;  } else {    return true;  }}  }
class C{  public AllToAll(boolean allowSelfConnect){  this.selfConnectionAllowed=allowSelfConnect;}  }
class C{  public int update(String table,String key,HashMap<String,ByteIterator> values){  delay();  if (verbose) {    System.out.print("UPDATE " + table + " "+ key+ " [ ");    if (values != null) {      for (      String k : values.keySet()) {        System.out.print(k + "=" + values.get(k)+ " ");      }    }    System.out.println("]");  }  return 0;}  }
class C{  private void verifyPropertySourceValue(ReloadablePropertySource reloadablePropertySource,String expectedValue){  logger.debug("Reading key " + TEST_KEY + " and expecting value "+ expectedValue);  logger.debug("Properties file value is " + properties.get(TEST_KEY) + " and reloadable property source value is "+ reloadablePropertySource.getProperty(TEST_KEY));  String value=(String)reloadablePropertySource.getProperty(TEST_KEY);  assertEquals(expectedValue,value);}  }
class C{  private boolean isVpoolQuotaUpdate(Map<String,String> updateMap){  for (  String iter : updateMap.keySet()) {    if (iter.startsWith("volumes_") || iter.startsWith("snapshots_") || iter.startsWith("gigabytes_")) {      return true;    }  }  return false;}  }
class C{  public void validateCustomDdlKey(CustomDdlKey key) throws IllegalArgumentException {  Assert.notNull(key,"A custom DDL key must be specified.");  key.setNamespace(alternateKeyHelper.validateStringParameter("namespace",key.getNamespace()));  key.setBusinessObjectDefinitionName(alternateKeyHelper.validateStringParameter("business object definition name",key.getBusinessObjectDefinitionName()));  key.setBusinessObjectFormatUsage(alternateKeyHelper.validateStringParameter("business object format usage",key.getBusinessObjectFormatUsage()));  key.setBusinessObjectFormatFileType(alternateKeyHelper.validateStringParameter("business object format file type",key.getBusinessObjectFormatFileType()));  Assert.notNull(key.getBusinessObjectFormatVersion(),"A business object format version must be specified.");  key.setCustomDdlName(alternateKeyHelper.validateStringParameter("custom DDL name",key.getCustomDdlName()));}  }
class C{  public static String preambleToString(Memory mem){  int preLongs=getAndCheckPreLongs(mem);  long pre0=mem.getLong(0);  ResizeFactor rf=ResizeFactor.getRF(extractResizeFactor(pre0));  int serVer=extractSerVer(pre0);  Family family=Family.idToFamily(extractFamilyID(pre0));  int flags=extractFlags(pre0);  String flagsStr=zeroPad(Integer.toBinaryString(flags),8) + ", " + (flags);  String nativeOrder=ByteOrder.nativeOrder().toString();  boolean isEmpty=(flags & EMPTY_FLAG_MASK) > 0;  short encResSize=extractReservoirSize(pre0);  int resSize=ReservoirSize.decodeValue(encResSize);  int serDeId=extractSerDeId(pre0);  long itemsSeen=0;  if (!isEmpty) {    long pre1=mem.getLong(8);    itemsSeen=extractItemsSeenCount(pre1);  }  StringBuilder sb=new StringBuilder();  sb.append(LS).append("### SKETCH PREAMBLE SUMMARY:").append(LS).append("Byte  0: Preamble Longs       : ").append(preLongs).append(LS).append("Byte  0: ResizeFactor         : ").append(rf.toString()).append(LS).append("Byte  1: Serialization Version: ").append(serVer).append(LS).append("Byte  2: Family               : ").append(family.toString()).append(LS).append("Byte  3: Flags Field          : ").append(flagsStr).append(LS).append("  (Native Byte Order)         : ").append(nativeOrder).append(LS).append("  EMPTY                       : ").append(isEmpty).append(LS).append("Bytes 4-5   : Reservoir Size  : ").append(resSize).append(TAB + "(").append(Integer.toHexString(encResSize)).append(")").append(LS).append("Bytes 6-7   : SerDe ID        : ").append(Integer.toHexString(serDeId)).append(LS);  if (!isEmpty) {    sb.append("Bytes 8-13  : Items Seen      : ").append(itemsSeen).append(LS);  }  sb.append("Preamble Bytes                : ").append(preLongs << 3).append(LS);  sb.append("### END SKETCH PREAMBLE SUMMARY").append(LS);  return sb.toString();}  }
class C{  @Reference(authors="Nguyen, X. V. and Epps, J. and Bailey, J.",title="Information theoretic measures for clusterings comparison: is a correction for chance necessary?",booktitle="Proc. ICML '09 Proceedings of the 26th Annual International Conference on Machine Learning",url="http://dx.doi.org/10.1145/1553374.1553511") public double normalizedVariationOfInformation(){  return (1.0 - (entropyMutualInformation() / entropyJoint()));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  final void advance(){  for (; ; ) {    if (nextTableIndex >= 0) {      if ((nextEntry=entryAt(currentTable,nextTableIndex--)) != null)       break;    } else     if (nextSegmentIndex >= 0) {      Segment<K,V> seg=segmentAt(segments,nextSegmentIndex--);      if (seg != null && (currentTable=seg.table) != null)       nextTableIndex=currentTable.length - 1;    } else     break;  }}  }
class C{  public String render(ValueExpr theExpr) throws Exception {  reset();  theExpr.visit(this);  return mBuffer.toString();}  }
class C{  public static PublicKey load(InputStream is) throws CryptoException, IOException {  byte[] streamContents=ReadUtil.readFully(is);  PemInfo pemInfo=PemUtil.decode(new ByteArrayInputStream(streamContents));  if (pemInfo != null) {    streamContents=pemInfo.getContent();  }  try {    X509EncodedKeySpec x509EncodedKeySpec=new X509EncodedKeySpec(streamContents);    PublicKey pubKey=null;    try {      pubKey=KeyFactory.getInstance("RSA").generatePublic(x509EncodedKeySpec);    } catch (    InvalidKeySpecException e) {      pubKey=KeyFactory.getInstance("DSA").generatePublic(x509EncodedKeySpec);    }    return pubKey;  } catch (  GeneralSecurityException ex) {    throw new CryptoException(res.getString("NoLoadOpenSslPublicKey.exception.message"),ex);  }}  }
class C{  public JSONArray put(int index,Collection value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  protected ImplementationFactory(){}  }
class C{  public ExecModule createExecModule(){  ExecModuleImpl execModule=new ExecModuleImpl();  return execModule;}  }
class C{  public static byte[] SHA1(final byte[] message,final int offset,final int length){  MessageDigest digest;  try {    digest=MessageDigest.getInstance("SHA-1");    digest.update(message,offset,length);    final byte[] sha1=digest.digest();    return sha1;  } catch (  final NoSuchAlgorithmException e) {  }  return null;}  }
class C{  public Response networkResponse(){  return networkResponse;}  }
class C{  protected Size2D arrangeRF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  Size2D s=arrangeNF(container,g2,constraint);  if (constraint.getWidthRange().contains(s.width)) {    return s;  } else {    RectangleConstraint c=constraint.toFixedWidth(constraint.getWidthRange().constrain(s.getWidth()));    return arrangeFF(container,g2,c);  }}  }
class C{  @Override public void copyGroupSnapshotsToTarget(StorageSystem storage,List<URI> snapshotList,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    _log.info("copyGroupSnapshotsToTarget operation START");    callEMCRefreshIfRequired(_dbClient,_helper,storage,snapshotList);    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotList.get(0));    if (snapshot.getSettingsGroupInstance() == null) {      taskCompleter.error(_dbClient,DeviceControllerErrors.vnx.copyGroupSnapshotsToTargetSettingsInstanceNull(snapshot.getSnapsetLabel(),snapshot.getId().toString()));      return;    }    internalGroupSnapCopyToTarget(storage,snapshot,snapshotList);    taskCompleter.ready(_dbClient);  } catch (  Exception e) {    _log.error("Exception in copyGroupSnapshotsToTarget",e);    taskCompleter.error(_dbClient,DeviceControllerErrors.vnx.copyGroupSnapshotsToTargetException(e));  }}  }
class C{  public void addResourceType(String type){  findAttributeValues(LinkFormat.RESOURCE_TYPE).add(type);}  }
class C{  private void init(){  delete();  JsonObject rules=TestUtils.addRoutingRuleMainStorage(new JsonObject());  TestUtils.putRoutingRules(rules);  given().body("{ \"foo\": \"bar1\" }").put("tree/resources/res1").then().assertThat().statusCode(200);  given().body("{ \"foo\": \"bar2\" }").put("tree/resources/res2").then().assertThat().statusCode(200);  given().body("{ \"foo\": \"bar3\" }").put("tree/resources/res3").then().assertThat().statusCode(200);  given().body("{ \"foo\": \"bar4\" }").put("tree/resources/res4").then().assertThat().statusCode(200);  given().body("{ \"foo\": \"bar5\" }").put("tree/resources/col1/subres1").then().assertThat().statusCode(200);  given().body("{ \"foo\": \"bar6\" }").put("tree/resources/col1/subres2").then().assertThat().statusCode(200);  given().body("{ \"foo\": \"bar7\" }").put("tree/resources/col2/subres3").then().assertThat().statusCode(200);  given().body("{ \"foo\": \"bar8\" }").put("tree/resources/col3/subres4").then().assertThat().statusCode(200);  given().body("{ \"foo\": \"bar9\" }").put("tree/resources/col1/col4/subres5").then().assertThat().statusCode(200);  given().body("{ \"foo\": \"bar10\" }").put("tree/resources/col1/col4/subres6").then().assertThat().statusCode(200);  given().body("{ \"foo\": \"bar11\" }").put("tree/resources/col1/col4/subres7").then().assertThat().statusCode(200);  checkGETStatusCodeWithAwait("tree/resources/res1",200);  checkGETStatusCodeWithAwait("tree/resources/res2",200);  checkGETStatusCodeWithAwait("tree/resources/res3",200);  checkGETStatusCodeWithAwait("tree/resources/res4",200);  checkGETStatusCodeWithAwait("tree/resources/col1/subres1",200);  checkGETStatusCodeWithAwait("tree/resources/col1/subres2",200);  checkGETStatusCodeWithAwait("tree/resources/col2/subres3",200);  checkGETStatusCodeWithAwait("tree/resources/col3/subres4",200);  checkGETStatusCodeWithAwait("tree/resources/col1/col4/subres5",200);  checkGETStatusCodeWithAwait("tree/resources/col1/col4/subres6",200);  checkGETStatusCodeWithAwait("tree/resources/col1/col4/subres7",200);}  }
class C{  public boolean isNullable(){  return m_isNullable;}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  private void clear(final ControllerState toState){  for (  final TileEntityCasing casing : casings) {    casing.setController(null);  }  if (toState != ControllerState.INCOMPLETE) {    casings.forEach(null);  }  casings.clear();  state=toState;}  }
class C{  @Override public void registerBufferAutoReclaim(MemBufferHolder<A> mholder){  m_bufcollector.register(mholder);}  }
class C{  public static double distanceToSphere(BoundingVolume bs,ReadOnlyVector3 point,ReadOnlyVector3 direction){  IntersectionRecord record=bs.intersectsWhere(new Ray3(point,direction));  if (record != null) {    return (record.getFurthestDistance());  } else {    return (bs.getRadius() * 2);  }}  }
class C{  public synchronized void renameDatabaseObject(Session session,DbObject obj,String newName){  int type=obj.getType();  HashMap<String,DbObject> map=getMap(type);  if (SysProperties.CHECK) {    if (!map.containsKey(obj.getName())) {      DbException.throwInternalError("not found: " + obj.getName());    }    if (obj.getName().equals(newName) || map.containsKey(newName)) {      DbException.throwInternalError("object already exists: " + newName);    }  }  obj.checkRename();  map.remove(obj.getName());  obj.rename(newName);  map.put(newName,obj);}  }
class C{  protected void implReset(){  state=NORMAL_BYTES;  ext_count=ext_offset=0;  versionSequenceAllowed=true;  queue.reset();  encodingQueue.reset();  nonStandardDecoder=lastDecoder=null;  glHigh=false;  grHigh=true;  try {    glDecoder=Charset.forName("ASCII").newDecoder();    grDecoder=Charset.forName("ISO8859_1").newDecoder();  } catch (  IllegalArgumentException e) {    error(ERR_LATIN1);  }  initDecoder(glDecoder);  initDecoder(grDecoder);}  }
class C{  static float dpToPixel(float dp,Resources resources){  DisplayMetrics metrics=resources.getDisplayMetrics();  return metrics.density * dp;}  }
class C{  static Collection<Element> createParentElements(Path path,Element rootElement,ElementMetadata<?,?> rootMetadata,int elementCount) throws ParseException {  Preconditions.checkNotNull(path,"path");  Preconditions.checkNotNull(rootElement,"rootElement");  List<MetadataKey<?>> steps=path.getSteps();  if (steps.isEmpty()) {    return ImmutableList.of();  }  Element parent=rootElement;  List<Element> parents=null;  ElementMetadata<?,?> parentMetadata=rootMetadata;  for (int i=0; i < steps.size() - 1; i++) {    ElementKey<?,?> childKey=(ElementKey<?,?>)steps.get(i);    ElementMetadata<?,?> childMetadata=(parentMetadata == null) ? null : parentMetadata.bindElement(childKey);    if (parents != null) {      checkNotMultiple(childMetadata);      List<Element> children=Lists.newArrayListWithCapacity(parents.size());      for (      Element p : parents) {        children.add(getOrCreateChild(p,childKey));      }      parents=children;      parentMetadata=childMetadata;      continue;    }    if (childMetadata == null || childMetadata.getCardinality() == Cardinality.SINGLE) {      Element child=getOrCreateChild(parent,childKey);      parent=child;      parentMetadata=childMetadata;      continue;    }    List<Element> children=Lists.newArrayListWithCapacity(elementCount);    for (int j=0; j < elementCount; j++) {      try {        Element child=Element.createElement(childKey);        parent.addElement(child);        children.add(child);      } catch (      ContentCreationException e) {        throw new ParseException(e);      }    }    parents=children;    parentMetadata=childMetadata;  }  if (parents != null) {    return parents;  }  return ImmutableList.of(parent);}  }
class C{  public static ResultSet testCall(Connection conn,int a,String b,Timestamp c,Timestamp d) throws SQLException {  SimpleResultSet rs=new SimpleResultSet();  rs.addColumn("A",Types.INTEGER,0,0);  rs.addColumn("B",Types.VARCHAR,0,0);  rs.addColumn("C",Types.TIMESTAMP,0,0);  rs.addColumn("D",Types.TIMESTAMP,0,0);  if ("jdbc:columnlist:connection".equals(conn.getMetaData().getURL())) {    return rs;  }  rs.addRow(a * 2,b.toUpperCase(),new Timestamp(c.getTime() + 1),d);  return rs;}  }
class C{  private void showPlayerList(){  if (playerListDialog == null) {    playerListDialog=new PlayerListDialog(frame,client);  }  playerListDialog.setVisible(true);}  }
class C{  public RandomBallCover(List<V> vecs,DistanceMetric dm){  this(vecs,dm,new FakeExecutor());}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.REACTION_EFFECT__ACTIONS:    getActions().clear();  return;}super.eUnset(featureID);}  }
class C{  public final boolean showConfirm(String message){  return false;}  }
class C{  protected Event(final IBigdataFederation fed,final EventResource resource,final Object majorEventType,final Object minorEventType,final Map<String,Object> details){  if (fed == null)   throw new IllegalArgumentException();  if (resource == null)   throw new IllegalArgumentException();  if (majorEventType == null)   throw new IllegalArgumentException();  if (minorEventType == null)   throw new IllegalArgumentException();  this.fed=fed;  this.eventUUID=UUID.randomUUID();  this.hostname=AbstractStatisticsCollector.fullyQualifiedHostName;  this.serviceIface=this.fed.getServiceIface();  this.serviceName=this.fed.getServiceName();  this.serviceUUID=this.fed.getServiceUUID();  this.resource=resource;  this.majorEventType=majorEventType;  this.minorEventType=minorEventType;  if (details != null) {    addDetails(details);  }}  }
class C{  public Long loginUserByRemote(String SID){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      Sessiondata sd=sessionManagement.getSessionByHash(SID);      if (sd == null || sd.getSessionXml() == null) {        return new Long(-37);      } else {        XStream xStream=new XStream(new DomDriver("UTF-8"));        xStream.setMode(XStream.NO_REFERENCES);        String xmlString=sd.getSessionXml();        RemoteSessionObject userObject=(RemoteSessionObject)xStream.fromXML(xmlString);        log.debug("userObject.getUsername(), userObject.getFirstname(), userObject.getLastname() " + userObject.getUsername() + ", "+ userObject.getFirstname()+ ", "+ userObject.getLastname());        IConnection current=Red5.getConnectionLocal();        String streamId=current.getClient().getId();        RoomClient currentClient=this.clientListManager.getClientByStreamId(streamId);        log.debug("userObject.getExternalUserId() -1- " + userObject.getExternalUserId());        if (userObject.getExternalUserId() != null && userObject.getExternalUserId() != null && !userObject.getExternalUserId().equals("0")) {          Users user=userManagement.getUserByExternalIdAndType(userObject.getExternalUserId(),userObject.getExternalUserType());          if (user == null) {            Configuration conf=cfgManagement.getConfKey(3L,"default.timezone");            String jName_timeZone="";            if (conf != null) {              jName_timeZone=conf.getConf_value();            }            long userId=userManagement.addUserWithExternalKey(1,0,0,userObject.getFirstname(),userObject.getUsername(),userObject.getLastname(),1L,"",null,null,"",userObject.getExternalUserId(),userObject.getExternalUserType(),true,userObject.getEmail(),jName_timeZone,userObject.getPictureUrl());            currentClient.setUser_id(userId);          } else {            user.setPictureuri(userObject.getPictureUrl());            userManagement.updateUser(user);            currentClient.setUser_id(user.getUser_id());          }        }        log.debug("userObject.getExternalUserId() -2- " + currentClient.getUser_id());        currentClient.setUserObject(userObject.getUsername(),userObject.getFirstname(),userObject.getLastname());        currentClient.setPicture_uri(userObject.getPictureUrl());        currentClient.setMail(userObject.getEmail());        log.debug("UPDATE USER BY STREAMID " + streamId);        if (currentClient.getUser_id() != null) {          sessionManagement.updateUser(SID,currentClient.getUser_id());        }        this.clientListManager.updateClientByStreamId(streamId,currentClient);        return new Long(1);      }    }  } catch (  Exception err) {    log.error("[loginUserByRemote] ",err);  }  return new Long(-1);}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,new Byte((byte)readInt(items[readUnsignedShort(v)])));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,new Short((short)readInt(items[readUnsignedShort(v)])));v+=2;break;case 'C':av.visit(name,new Character((char)readInt(items[readUnsignedShort(v)])));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  long reduce(long threshold,long next_threshold){  if (nchild != 0) {    for (int id=0; id < child.length; id++) {      if (child[id] != null) {        next_threshold=child[id].reduce(threshold,next_threshold);      }    }  }  if (number_pixels <= threshold) {    pruneChild();  } else {    if (unique != 0) {      cube.colors++;    }    if (number_pixels < next_threshold) {      next_threshold=number_pixels;    }  }  return next_threshold;}  }
class C{  private JPanel createProjectTreePanel(){  final JPanel projectTreePanel=new JPanel(new BorderLayout());  projectTreePanel.setBorder(null);  projectTreePanel.setBackground(Color.WHITE);  m_projectTree.setBorder(new EmptyBorder(2,4,2,2));  m_projectTree.addTreeSelectionListener(new InternalTreeSelectionListener());  final JScrollPane pane=new JScrollPane(m_projectTree);  pane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);  pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);  pane.setBorder(null);  projectTreePanel.add(pane,BorderLayout.CENTER);  return projectTreePanel;}  }
class C{  public WriterToASCI(OutputStream os){  m_os=os;}  }
class C{  public String toPattern(){  return ndf.toPattern();}  }
class C{  protected void print(HttpServletResponse response,String message) throws IOException {  response.setCharacterEncoding("UTF-8");  PrintWriter writer=response.getWriter();  writer.print(message);  writer.flush();  writer.close();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override public int hashCode(){  return getObject() != null ? getObject().hashCode() : 0;}  }
class C{  public DGeneralNameChooser(JFrame parent,String title,GeneralName generalName){  super(parent,title,ModalityType.DOCUMENT_MODAL);  initComponents(generalName);}  }
class C{  public void toEPL(StringWriter writer){  String delimiter="";  for (  ForClauseItem child : items) {    writer.write(delimiter);    child.toEPL(writer);    delimiter=" ";  }}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  protected void loadUrlDataIn(Tab t,UrlData data){  if (data != null) {    if (data.isPreloaded()) {    } else {      if (t != null && data.mDisableUrlOverride) {        t.disableUrlOverridingForLoad();      }      loadUrl(t,data.mUrl,data.mHeaders);    }  }}  }
class C{  public void notifyAppWidgetViewDataChanged(int[] appWidgetIds,int viewId){  try {    sService.notifyAppWidgetViewDataChanged(appWidgetIds,viewId,mContext.getUserId());  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }}  }
class C{  public void updateMethodParameterType(Class<?> type,int index){  types[index]=type;}  }
class C{  protected void processLine(String nextElement,Appendable appendable) throws IOException {  for (int j=0; j < nextElement.length(); j++) {    char nextChar=nextElement.charAt(j);    processCharacter(appendable,nextChar);  }}  }
class C{  public void onAnswer(long sessionId,String sdp){  send(new RTCAnswer(deviceId,sessionId,sdp));}  }
class C{  public void bindNull(int index){}  }
class C{  public void enableWrites(final String name){  disabledShards.remove(name);}  }
class C{  @NoInline private static void arraycopyPiecemeal(byte[] src,int srcIdx,byte[] dst,int dstIdx,int len){  if (srcIdx < dstIdx) {    srcIdx+=len;    dstIdx+=len;    while (len-- != 0) {      dst[--dstIdx]=src[--srcIdx];    }  } else {    while (len-- != 0) {      dst[dstIdx++]=src[srcIdx++];    }  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == AccessibleTypeElement.class) {switch (derivedFeatureID) {case TypesPackage.TN4_CLASSIFIER__DECLARED_TYPE_ACCESS_MODIFIER:      return TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_TYPE_ACCESS_MODIFIER;case TypesPackage.TN4_CLASSIFIER__DECLARED_PROVIDED_BY_RUNTIME:    return TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_PROVIDED_BY_RUNTIME;default :  return -1;}}if (baseClass == DeclaredTypeWithAccessModifier.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  AttrContext dup(){  return dup(scope);}  }
class C{  protected int bytesPerAtom(){  return (4);}  }
class C{  public Analyzer includeAdditiveEpsilonIndicator(){  includeAdditiveEpsilonIndicator=true;  return this;}  }
class C{  public void readOID() throws IOException {  if (tag != ASN1Constants.TAG_OID) {    throw expected("OID");  }  if (length < 1) {    throw new ASN1Exception("Wrong length for ASN.1 object identifier at [" + tagOffset + "]");  }  readContent();  if ((buffer[offset - 1] & 0x80) != 0) {    throw new ASN1Exception("Wrong encoding at [" + (offset - 1) + "]");  }  oidElement=1;  for (int i=0; i < length; i++, ++oidElement) {    while ((buffer[contentOffset + i] & 0x80) == 0x80) {      i++;    }  }}  }
class C{  public final Vec2 negateLocal(){  x=-x;  y=-y;  return this;}  }
class C{  public final void testValidateCaseInsensitiveAllowingSpacesSucceeds(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.CASE_INSENSITIVE,true,allowedCharacters);  assertTrue(characterOrNumberValidator.validate("Ab 1-"));}  }
class C{  @FlashException public static void addStoragePorts(String virtualArrayId,@As(",") String[] ids){  if ((ids != null) && (ids.length > 0)) {    VirtualArrayRestRep virtualArray=getVirtualArray(virtualArrayId);    updateStoragePorts(uris(ids),addVirtualArray(virtualArray));  }  storagePorts(virtualArrayId);}  }
class C{  void declare(String name,Type type){  if (reservedWords.contains(name))   throw new RuntimeException(name + " is a reserved word");  if (table.containsKey(name))   throw new RuntimeException("Symbol " + name + " already defined");  Symbol symbol=new Symbol(this,name,type);  table.put(name,symbol);  stackMap.add(new Declaration(symbol));}  }
class C{  static public String generateSaveFileName(Context c,String fileName){  String path=getSaveFilePath(c) + File.separator + fileName;  return path;}  }
class C{  @Override public int hashCode(){  long nod=toNanoOfDay();  return (int)(nod ^ (nod >>> 32));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ChatMessage sendMessage(Geoloc geoloc) throws RcsPersistentStorageException, RcsGenericException {  try {    return new ChatMessage(mOneToOneChatInf.sendMessage2(geoloc));  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  public SimpleWeightingData(String id){  assert id != null && id.length() > 0;  this.id_=id;}  }
class C{  public static int[] splitGt(String gt){  final int gtlen=gt.length();  if (gtlen == 1) {    return new int[]{alleleId(gt.charAt(0))};  } else {    int[] result=new int[2];    int ploid=0;    int allelestart=0;    for (int i=0; i < gtlen; i++) {      final char c=gt.charAt(i);      if (c == PHASED_SEPARATOR || c == UNPHASED_SEPARATOR) {        if (ploid == result.length) {          result=Arrays.copyOf(result,result.length + 1);        }        result[ploid++]=alleleId(gt,allelestart,i - allelestart);        allelestart=i + 1;      }    }    if (allelestart < gtlen) {      if (ploid == result.length) {        result=Arrays.copyOf(result,result.length + 1);      }      result[ploid++]=alleleId(gt,allelestart,gtlen - allelestart);    }    if (ploid < result.length) {      result=Arrays.copyOf(result,ploid);    }    if (ploid == 0) {      throw new NumberFormatException("Malformed GT '" + gt + "'");    }    return result;  }}  }
class C{  @Override public void execute(){  final String columnsToQuery[]=new String[]{ContactsContract.Contacts._ID,ContactsContract.Contacts.DISPLAY_NAME,ContactsContract.Contacts.STARRED};  final String selection="((" + Contacts.DISPLAY_NAME + " NOTNULL) AND ("+ Contacts.DISPLAY_NAME+ " != '' ) AND ("+ Contacts.STARRED+ "== 1))";  getArgs().getAdapter().startQuery(this,0,ContactsContract.Contacts.CONTENT_URI,columnsToQuery,selection,null,ContactsContract.Contacts._ID + " ASC");}  }
class C{  void compare(File f1,File f2){  compare(f1,f2,null);}  }
class C{  private void saveNewPatientEncounterIfAny(Patient patient,Element root,String pathName,boolean propagateErrors) throws Exception {  NodeList elemList=root.getElementsByTagName("form");  if (!(elemList != null && elemList.getLength() > 0))   return;  Element formNode=(Element)elemList.item(0);  String id=formNode.getAttribute("id");  String name=formNode.getAttribute("name");  if (!(id != null && name != null && id.trim().length() > 0 && name.trim().length() > 0))   return;  setNodeValue(formNode,XformBuilder.NODE_PATIENT_PATIENT_ID,patient.getPatientId().toString());  setNodeValue(formNode,XformBuilder.NODE_ENCOUNTER_LOCATION_ID,patient.getIdentifiers().iterator().next().getLocation().getLocationId().toString());  String xml=XformsUtil.doc2String(formNode);  if (isRemoteFormEntry()) {    FormEntryWrapper.createFormEntryQueue(xml);  } else {    processDoc(xml,pathName,propagateErrors);  }}  }
class C{  private void drawOffsets(final Graphics g){  if (isEnabled()) {    g.setColor(m_fontColorOffsets);  } else {    g.setColor(m_disabledColor != m_bgColorOffset ? m_disabledColor : Color.WHITE);  }  final int x=(-m_firstColumn * m_charWidth) + 10;  final int bytesToDraw=getMaximumVisibleBytes();  final String formatString=m_addressMode == AddressMode.BIT32 ? "%08X" : "%016X";  for (int i=0; i < bytesToDraw; i+=m_bytesPerRow) {    final long address=m_baseAddress + (m_firstRow * m_bytesPerRow) + i;    final String offsetString=String.format(formatString,address);    final int currentRow=i / m_bytesPerRow;    g.drawString(offsetString,x,m_paddingTop + (currentRow * m_rowHeight));  }}  }
class C{  public void sendNotificationWave(boolean customNotification) throws Exception {  Collection<Callable<Integer>> tasks=new HashSet<Callable<Integer>>(numOfNotificationSenders);  for (int i=1; i <= numOfNotificationSenders; i++) {    tasks.add(new NotifSender(numOfNotificationSenderLoops,customNotification,i));  }  ExecutorService execServ=null;  try {    execServ=Executors.newFixedThreadPool(numOfNotificationSenders);    List<Future<Integer>> taskHandlers=execServ.invokeAll(tasks);    checkNotifSenderThreadStatus(taskHandlers);  }  finally {    if (!execServ.isShutdown()) {      execServ.shutdown();    }  }}  }
class C{  public BugObject(){  super();}  }
class C{  public Builder cacheInMemory(boolean cacheInMemory){  this.cacheInMemory=cacheInMemory;  return this;}  }
class C{  public boolean isSetResponse(){  return this.response != null;}  }
class C{  public void test_clearSolutionSet_01() throws UpdateExecutionException, RepositoryException, MalformedQueryException {  if (!isSolutionSetUpdateEnabled()) {    return;  }  try {    con.prepareUpdate(QueryLanguage.SPARQL,"clear solutions %namedSet1").execute();    fail("Excepting: " + UpdateExecutionException.class);  } catch (  UpdateExecutionException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }}  }
class C{  protected boolean launchAssignToClusters(Instances insts,int[] clusterAssignments) throws Exception {  int numPerTask=insts.numInstances() / m_executionSlots;  List<Future<Boolean>> results=new ArrayList<Future<Boolean>>();  for (int i=0; i < m_executionSlots; i++) {    int start=i * numPerTask;    int end=start + numPerTask;    if (i == m_executionSlots - 1) {      end=insts.numInstances();    }    Future<Boolean> futureKM=m_executorPool.submit(new KMeansClusterTask(insts,start,end,clusterAssignments));    results.add(futureKM);  }  boolean converged=true;  for (  Future<Boolean> f : results) {    if (!f.get()) {      converged=false;    }  }  return converged;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (extendsName_1: ");  result.append(extendsName_1);  result.append(')');  return result.toString();}  }
class C{  public void paintTabbedPaneTabAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private BusinessObjectDataAttributeEntity createBusinessObjectDataAttributeEntity(BusinessObjectDataEntity businessObjectDataEntity,BusinessObjectDataAttributeCreateRequest request){  BusinessObjectDataAttributeEntity businessObjectDataAttributeEntity=new BusinessObjectDataAttributeEntity();  businessObjectDataAttributeEntity.setBusinessObjectData(businessObjectDataEntity);  businessObjectDataAttributeEntity.setName(request.getBusinessObjectDataAttributeKey().getBusinessObjectDataAttributeName());  businessObjectDataAttributeEntity.setValue(request.getBusinessObjectDataAttributeValue());  return businessObjectDataAttributeEntity;}  }
class C{  public TripleStoreSchema(){}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.SIMPLE_PROJECT_DESCRIPTION__DECLARED_VENDOR_ID:    return DECLARED_VENDOR_ID_EDEFAULT == null ? declaredVendorId != null : !DECLARED_VENDOR_ID_EDEFAULT.equals(declaredVendorId);case N4mfPackage.SIMPLE_PROJECT_DESCRIPTION__PROJECT_ID:  return PROJECT_ID_EDEFAULT == null ? projectId != null : !PROJECT_ID_EDEFAULT.equals(projectId);}return super.eIsSet(featureID);}  }
class C{  public void fireInitDoneEvent(){  fireEvent(EventType.INIT_DONE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:51.520 -0500",hash_original_method="B050407BAA043C3F798F83BEFE766D07",hash_generated_method="FF3362D7E65E851E017CC900CB892AF0") public boolean hasPort(){  return port != -1;}  }
class C{  private int findMinimumUnmarked(){  return -1;}  }
class C{  public void reset(){  for (int i=0; i < values.length; i++) {    this.values[i]=ZERO;  }  clearDirty();}  }
class C{  public SubscriptionStillActiveException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  @SuppressWarnings("rawtypes") private <T>void updateAuditFields(T entity){  if (entity instanceof AuditableEntity) {    AuditableEntity auditableEntity=(AuditableEntity)entity;    String username=herdDaoSecurityHelper.getCurrentUsername();    if (auditableEntity.getCreatedBy() == null) {      auditableEntity.setCreatedBy(username);    }    auditableEntity.setUpdatedBy(username);    Timestamp currentTime=new Timestamp(System.currentTimeMillis());    auditableEntity.setUpdatedOn(currentTime);    if (auditableEntity.getCreatedOn() == null) {      auditableEntity.setCreatedOn(currentTime);    }  }  for (  Field field : entity.getClass().getDeclaredFields()) {    for (    Annotation annotation : field.getDeclaredAnnotations()) {      if (annotation instanceof OneToMany) {        OneToMany oneToManyAnnotation=(OneToMany)annotation;        List<CascadeType> cascadeTypes=new ArrayList<>(Arrays.asList(oneToManyAnnotation.cascade()));        if ((cascadeTypes.contains(CascadeType.ALL)) || (cascadeTypes.contains(CascadeType.PERSIST)) || cascadeTypes.contains(CascadeType.MERGE)) {          try {            field.setAccessible(true);            Object fieldValue=field.get(entity);            if (fieldValue instanceof Collection) {              Collection collection=(Collection)fieldValue;              for (              Object object : collection) {                if (object instanceof AuditableEntity) {                  updateAuditFields(object);                }              }            }          } catch (          IllegalAccessException ex) {            throw new IllegalStateException("Unable to get field value for field \"" + field.getName() + "\" due to access restriction.",ex);          }        }      }    }  }}  }
class C{  public BitmapAjaxCallback animation(int animation){  this.animation=animation;  return this;}  }
class C{  public ZapToggleButton(String text){  super(text,null,false);}  }
class C{  public static void saveCmrRepositoryDefinitions(List<CmrRepositoryDefinition> repositoryDefinitions,boolean isDefault){  saveObject(PreferencesConstants.CMR_REPOSITORY_DEFINITIONS,repositoryDefinitions,isDefault);}  }
class C{  public final void log(LogMessage lm){  if (flushMessages)   lm.prepareForFlush();  addMessage(lm);}  }
class C{  public ProfilerSection(String name,Profiler parent){  this.name=name;  this.profiler=parent;}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("glassfish2x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,GlassFish2xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("glassfish2x",ContainerType.INSTALLED,ConfigurationType.EXISTING,GlassFishExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("glassfish3x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,GlassFish3xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("glassfish3x",ContainerType.INSTALLED,ConfigurationType.EXISTING,GlassFishExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("glassfish3x",ContainerType.REMOTE,ConfigurationType.RUNTIME,GlassFish3xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("glassfish4x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,GlassFish4xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("glassfish4x",ContainerType.INSTALLED,ConfigurationType.EXISTING,GlassFishExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("glassfish4x",ContainerType.REMOTE,ConfigurationType.RUNTIME,GlassFish4xRuntimeConfigurationCapability.class);}  }
class C{  public void add(float v){  _add(numberNode(v));}  }
class C{  public void disableDashedHighlightLine(){  mHighlightDashPathEffect=null;}  }
class C{  protected void updateDepthOffset(){  if (isRootVisible()) {    if (getShowsRootHandles())     depthOffset=1; else     depthOffset=0;  } else   if (!getShowsRootHandles())   depthOffset=-1; else   depthOffset=0;}  }
class C{  protected final void saveChanges(MimeMessage message) throws MessagingException {  String messageId=message.getMessageID();  message.saveChanges();  if (messageId != null) {    message.setHeader(RFC2822Headers.MESSAGE_ID,messageId);  }}  }
class C{  public static void deleteProject(String projectName) throws CoreException {  IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();  IProject project=workspaceRoot.getProject(projectName);  if (!project.exists()) {    throw new IllegalStateException("Project " + projectName + " does not exist in this workspace");  }  project.delete(true,new NullProgressMonitor());}  }
class C{  private void restoreScreen(Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking screen " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  ContentResolver cr=mContext.getContentResolver();  ContentValues values=unpackScreen(buffer,dataSize);  cr.insert(LauncherSettings.WorkspaceScreens.CONTENT_URI,values);}  }
class C{  public static double skew(DoubleArrayList data,double mean,double standardDeviation){  return skew(moment(data,3,mean),standardDeviation);}  }
class C{  protected boolean publishOldestJmsMessageFromDatabaseQueueImpl(){  boolean messageSent=false;  JmsMessageEntity jmsMessageEntity=jmsMessageDao.getOldestJmsMessage();  if (jmsMessageEntity != null) {    try {      LOGGER.debug(String.format("send SQS text message: id: %s, jmsQueueName: %s, messageText:%n%s",jmsMessageEntity.getId(),jmsMessageEntity.getJmsQueueName(),jmsMessageEntity.getMessageText()));      sqsDao.sendSqsTextMessage(awsHelper.getAwsParamsDto(),jmsMessageEntity.getJmsQueueName(),jmsMessageEntity.getMessageText());      messageSent=true;    } catch (    Exception e) {      LOGGER.error(String.format("Failed to post message on \"%s\" SQS queue. Message: %s",jmsMessageEntity.getJmsQueueName(),jmsMessageEntity.getMessageText()));      throw new IllegalStateException(e.getMessage(),e);    }    jmsMessageDao.delete(jmsMessageEntity);  }  return messageSent;}  }
