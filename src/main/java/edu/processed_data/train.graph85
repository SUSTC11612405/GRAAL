class C{  public boolean hasOp(){  return this.op != OP_NULL;}  }
class C{  public TypedTextField(String value,TextFieldValidator textFieldValidator){  super();  this.validator=textFieldValidator;  this.setAlignment(Pos.BASELINE_RIGHT);  textProperty().addListener(null);  focusedProperty().addListener(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:44.166 -0500",hash_original_method="AE589E28DA0FF19F04E5968FD5B7BCF7",hash_generated_method="A14F05ED755959656EBBF6F461EF602E") public static boolean preserveBackBuffer(){  return nPreserveBackBuffer();}  }
class C{  public static boolean installNormal(Context context,String filePath){  Intent i=new Intent(Intent.ACTION_VIEW);  File file=new File(filePath);  if (file == null || !file.exists() || !file.isFile() || file.length() <= 0) {    return false;  }  i.setDataAndType(Uri.parse("file://" + filePath),"application/vnd.android.package-archive");  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(i);  return true;}  }
class C{  public String nativeSQL(String sql) throws SQLException {  checkClosed();  try {    return this.mc.nativeSQL(sql);  } catch (  SQLException sqlException) {    checkAndFireConnectionError(sqlException);  }  return null;}  }
class C{  public List<GenericEntry> retrieveAllPagesOfGroups() throws MalformedURLException, IOException, ServiceException {  return getAllPages(new URL(baseDomainUrl),GenericFeed.class);}  }
class C{  public DependenciesNotFoundException(String message){  super(message);}  }
class C{  static void checkOpcode(final int opcode,final int type){  if (opcode < 0 || opcode > 199 || TYPE[opcode] != type) {    throw new IllegalArgumentException("Invalid opcode: " + opcode);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:23.619 -0400",hash_original_method="D366EB4474B58C92DE0B49A58CD76C7E",hash_generated_method="D366EB4474B58C92DE0B49A58CD76C7E") void markStaleChildren(){  if (!mHasStaleChildren) {    mHasStaleChildren=true;    requestLayout();  }}  }
class C{  public static ObjectReference allocateObject(MutatorContext context,int refCount,int dataCount,boolean doubleAlign,int site){  int bytes=(HEADER_WORDS + refCount + dataCount) << MemoryConstants.LOG_BYTES_IN_WORD;  int align=ArchitecturalWord.getModel().bitsInWord() == 64 ? MemoryConstants.BYTES_IN_WORD : (doubleAlign ? 2 : 1) * MemoryConstants.BYTES_IN_INT;  int allocator=context.checkAllocator(bytes,align,refCount == 0 ? Plan.ALLOC_NON_REFERENCE : Plan.ALLOC_DEFAULT);  Address region=context.alloc(bytes,align,0,allocator,0);  ObjectReference ref=region.toObjectReference();  Clock.stop();  if (SimulatedMemory.isWatched(region,bytes)) {    Trace.printf("%4d  alloc %s [%s-%s]%n",Thread.currentThread().getId(),region.toObjectReference(),region,region.plus(bytes));  }  Clock.start();  if (doubleAlign)   region.store(DOUBLE_ALIGN,STATUS_OFFSET);  setId(ref,allocateObjectId());  setSite(ref,site);  setRefCount(ref,refCount);  setDataCount(ref,dataCount);  Clock.stop();  Sanity.getObjectTable().alloc(region,bytes);  if (isWatched(ref)) {    System.err.printf("WATCH: Object %s created%n",objectIdString(ref));  }  Clock.start();  context.postAlloc(ref,null,bytes,allocator);  return ref;}  }
class C{  static <V,A>void invokeIndirectly(PendingFuture<V,A> future){  assert future.isDone();  CompletionHandler<V,? super A> handler=future.handler();  if (handler != null) {    invokeIndirectly(future.channel(),handler,future.attachment(),future.value(),future.exception());  }}  }
class C{  public void addLine(String line){  int index=line.indexOf(":",1);  if (index != -1) {    addLenient(line.substring(0,index),line.substring(index + 1));  } else   if (line.startsWith(":")) {    addLenient("",line.substring(1));  } else {    addLenient("",line);  }}  }
class C{  public void addRow(ArrayList<Object> l){  m_data.rows.add(l);  m_data.rowsMeta.add(null);}  }
class C{  public boolean isError(){  Object oo=get_Value(COLUMNNAME_IsError);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void trackEvent(String category,String action,String label){  Tracker tracker=getGoogleAnalyticsTracker();  tracker.send(new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.259 -0400",hash_original_method="0F9B01024D57A40518D48F0508A35A8A",hash_generated_method="2BF66D02D99CF00172DE0386D01CDE0C") private Node<K,V> findNode(Comparable<? super K> key){  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c == 0)       return n;      if (c < 0)       return null;      b=n;      n=f;    }  }}  }
class C{  int hash(int x){  x=((x >>> 16) ^ x) * constant;  x=((x >>> 16) ^ x) * constant;  x=(x >>> 16) ^ x;  return x;}  }
class C{  public final void signalAll(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignalAll(first);}  }
class C{  public synchronized boolean isConsumer(ImageConsumer ic){  return (proxies != null && proxies.containsKey(ic));}  }
class C{  protected boolean onFeatureLinkActivated(KMLRoot doc,String linkFragment,SelectEvent event){  String[] parts=linkFragment.split(";");  String featureId=parts[0];  String directive=parts.length > 1 ? parts[1] : FLY_TO;  if (!WWUtil.isEmpty(featureId) && doc != null) {    Object o=doc.resolveReference(featureId);    if (o instanceof KMLAbstractFeature) {      if (event == null || this.isLinkActivationTrigger(event))       this.doFeatureLinkActivated((KMLAbstractFeature)o,directive);      return true;    }  }  return false;}  }
class C{  public void testTicketBlzg463d() throws Exception {  final ASTContainer container=new TestHelper("explainHints-blzg1463d","explainHints-blzg1463d.rq","explainHints.trig","explainHints-blzg1463d.srx").runTest();  final Iterator<BOp> explainHintAnnotatedBOps=ExplainHints.explainHintAnnotatedBOpIterator(container.getOptimizedAST());  assertTrue(explainHintAnnotatedBOps.hasNext());}  }
class C{  protected void addResourceToConfigurationViaProperty(ResourceFixture fixture){  Configuration config=getLocalContainer().getConfiguration();  config.setProperty(ResourcePropertySet.RESOURCE,fixture.buildResourcePropertyString());}  }
class C{  public static float scaleToFitTargetSize(int[] dimensions,int targetWidth,int targetHeight){  if (dimensions.length < 2 || dimensions[0] <= 0 || dimensions[1] <= 0) {    throw new IllegalArgumentException("Expected dimensions to have length >= 2 && dimensions[0] > 0 && " + "dimensions[1] > 0");  }  float scale=Math.max((float)targetWidth / dimensions[0],(float)targetHeight / dimensions[1]);  dimensions[0]*=scale;  dimensions[1]*=scale;  return scale;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  @Override public TagObject copy(){  return new TagObject(this);}  }
class C{  public static void copyFile(String srcPath,String destPath) throws Exception {  File srcFile=new File(srcPath);  File destFile=new File(destPath);  if (!srcFile.exists()) {    throw new Exception("source file does not exist");  }  String srcFileLocation=srcFile.getAbsolutePath();  String destFileLocation=destFile.getAbsolutePath();  if (srcFileLocation.equals(destFileLocation)) {    throw new Exception("source and destination are the same file");  }  InputStream input=new FileInputStream(srcFile);  OutputStream output=new FileOutputStream(destFile);  byte[] buf=new byte[1024];  int length;  while ((length=input.read(buf)) > 0) {    output.write(buf,0,length);  }  input.close();  output.close();}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=context.labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int[] tanns=null;int[] itanns=null;int tann=0;int itann=0;int ntoff=-1;int nitoff=-1;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}Label l=labels[label];while (l.line > 0) {if (l.next == null) {l.next=new Label();}l=l.next;}l.line=readUnsignedShort(v + 12);v+=4;}}} else if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {tanns=readTypeAnnotations(mv,context,u + 8,true);ntoff=tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1 : readUnsignedShort(tanns[0] + 1);} else if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {itanns=readTypeAnnotations(mv,context,u + 8,false);nitoff=itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1 : readUnsignedShort(itanns[0] + 1);} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {Label next=l.next;l.next=null;mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);while (next != null) {mv.visitLineNumber(next.line,l);next=next.next;}}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];boolean itf=b[cpIndex - 1] == ClassWriter.IMETH;String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc,itf);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}while (tanns != null && tann < tanns.length && ntoff <= offset) {if (ntoff == offset) {int v=readAnnotationTarget(context,tanns[tann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));}ntoff=++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1 : readUnsignedShort(tanns[tann] + 1);}while (itanns != null && itann < itanns.length && nitoff <= offset) {if (nitoff == offset) {int v=readAnnotationTarget(context,itanns[itann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));}nitoff=++itann >= itanns.length || readByte(itanns[itann]) < 0x43 ? -1 : readUnsignedShort(itanns[itann] + 1);}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}if (tanns != null) {for (int i=0; i < tanns.length; ++i) {if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,tanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),true));}}}if (itanns != null) {for (int i=0; i < itanns.length; ++i) {if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,itanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),false));}}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  public ProxyAuthenticateHeader createProxyAuthenticateHeader(String scheme) throws ParseException {  if (scheme == null)   throw new NullPointerException("bad scheme arg");  ProxyAuthenticate p=new ProxyAuthenticate();  p.setScheme(scheme);  return p;}  }
class C{  public static void populateSigAlgs(KeyPairType keyPairType,PrivateKey privateKey,Provider provider,JComboBox<SignatureType> jcbSignatureAlgorithm) throws CryptoException {  List<SignatureType> sigAlgs;switch (keyPairType) {case RSA:    KeyInfo keyInfo=KeyPairUtil.getKeyInfo(privateKey);  sigAlgs=SignatureType.rsaSignatureTypes(keyInfo.getSize());break;case DSA:sigAlgs=SignatureType.dsaSignatureTypes();break;case EC:default :sigAlgs=SignatureType.ecdsaSignatureTypes();}jcbSignatureAlgorithm.removeAllItems();for (SignatureType sigAlg : sigAlgs) {jcbSignatureAlgorithm.addItem(sigAlg);}if (sigAlgs.contains(SignatureType.SHA256_RSA)) {jcbSignatureAlgorithm.setSelectedItem(SignatureType.SHA256_RSA);} else if (sigAlgs.contains(SignatureType.SHA256_ECDSA)) {jcbSignatureAlgorithm.setSelectedItem(SignatureType.SHA256_ECDSA);} else if (sigAlgs.contains(SignatureType.SHA256_DSA)) {jcbSignatureAlgorithm.setSelectedItem(SignatureType.SHA256_DSA);} else {jcbSignatureAlgorithm.setSelectedIndex(0);}}  }
class C{  public int max_container_size(){  return soot.PhaseOptions.getInt(options,"max-container-size");}  }
class C{  @Override public void testSendReceive() throws Exception {  super.testSendReceive();  messages.clear();  consumer2.setMessageListener(this);  assertMessagesAreReceived();  LOG.info("" + data.length + " messages(s) received, closing down connections");}  }
class C{  @Override public void configure(){  if (isAutoRange()) {    autoAdjustRange();  }}  }
class C{  public boolean isNativeTransportRunning(){  return nativeTransportRunning;}  }
class C{  public KMLItemIcon(String namespaceURI){  super(namespaceURI);}  }
class C{  public static int ENFILE(){  return Errno.ENFILE.intValue();}  }
class C{  public boolean isLocalInvalidate(){  return this == LOCAL_INVALIDATE;}  }
class C{  public boolean isWhitelist(){  return !blacklist;}  }
class C{  public synchronized StorageFileSystem[] queryStorageFileSystems(String[] fsUniqueIds) throws InvalidArgument, StorageFault, NotImplemented, InvalidSession {  final String methodName="queryStorageFileSystems(): ";  log.debug(methodName + "Entry");  List<StorageFileSystem> list=null;  try {    Boolean supportsFile=new Boolean(_config.getConfigValue("config/service/storageTopology/storageArray/support-file-profile"));    if (!supportsFile) {      log.error(methodName + " This function is not implemented");      throw FaultUtil.NotImplemented("This function is not implemented");    }    if (Util.isEmpty(fsUniqueIds)) {      throw FaultUtil.InvalidArgument("Given file system Ids are invalid");    }    for (    String fsId : fsUniqueIds) {      if (!Util.isEmpty(fsId)) {        if (!fsId.startsWith(FILESYSTEM_IDENTIFIER_PREFIX)) {          throw FaultUtil.InvalidArgument("Given filesytem Id is invalid: " + fsId);        }      } else {        throw FaultUtil.InvalidArgument("Given filesytem Id is invalid: " + fsId);      }    }    this.setFileSystemIds();    List<String> existingFsIdList=new ArrayList<String>();    for (    String inputFSId : fsUniqueIds) {      if (_reportedFileSystemIdList.contains(inputFSId)) {        existingFsIdList.add(inputFSId);      }    }    list=new ArrayList<StorageFileSystem>();    List<FileShare> fsList=_syncManager.getFileSystemDetailList(existingFsIdList);    for (    FileShare fileshare : fsList) {      StorageFileSystem fileSystem=new StorageFileSystem();      fileSystem.setUniqueIdentifier(fileshare.getId());      if (fileshare.getProtocols().getProtocol().contains("NFS")) {        fileSystem.setFileSystem(FileSystemEnum.NFS.getValue());      } else       if (fileshare.getProtocols().getProtocol().contains("NFSv4")) {        fileSystem.setFileSystem(FileSystemEnum.NFS.getValue());      } else {        fileSystem.setFileSystem(FileSystemEnum.Other.getValue());      }      fileSystem.setFileSystemVersion(FileSystemVersionEnum.NFSV3_0.getValue());      FileSystemInfo fsDetail=new FileSystemInfo();      String fsNetworkId="";      if (fileshare.getStoragePort() != null && fileshare.getStorageController() != null) {        String storageSystemId=fileshare.getStorageController().getId();        String storagePortId=fileshare.getStoragePort().getId();        com.emc.storageos.vasa.data.internal.StoragePort storagePort=_syncManager.getStoragePort(storageSystemId,storagePortId);        fsNetworkId=storagePort.getPortNetworkId();      }      fsDetail.setIpAddress(fsNetworkId);      fsDetail.setFileServerName(fsNetworkId);      fsDetail.setFileSystemPath(fileshare.getMountPath());      fileSystem.addFileSystemInfo(fsDetail);      fileSystem.setNativeSnapshotSupported(true);      fileSystem.setThinProvisioningStatus(AlarmStatusEnum.Green.getValue());      if (log.isDebugEnabled()) {        log.debug(methodName + "filesystem: id[" + fileSystem.getUniqueIdentifier()+ "] type["+ fileSystem.getFileSystem()+ "] version["+ fileSystem.getFileSystemVersion()+ "] thinProvisioningStatus["+ fileSystem.getThinProvisioningStatus()+ "] snapShotsupported["+ fileSystem.getNativeSnapshotSupported()+ "] IpAddress["+ fileSystem.getFileSystemInfo()[0].getFileServerName()+ "] serverName["+ fileSystem.getFileSystemInfo()[0].getFileServerName()+ "] fileSystemPath["+ fileSystem.getFileSystemInfo()[0].getFileSystemPath()+ "]");      }      list.add(fileSystem);    }  } catch (  SOSFailure e) {    log.error(methodName + "StorageOSFailure occured ",e);    throw FaultUtil.StorageFault(e);  }catch (  InvalidArgument e) {    log.error(methodName + "InvalidArgument occured ",e);    throw e;  }catch (  NotImplemented e) {    log.error(methodName + "NotImplemented occured ",e);    throw e;  }  log.debug(methodName + "Exit returning list of file systems of size[" + list.size()+ "]");  return list.toArray(new StorageFileSystem[0]);}  }
class C{  private static <K,V>CacheConfiguration<K,V> cacheEmployee(){  CacheConfiguration<K,V> ccfg=cacheConfiguration(EMPLOYEE_CACHE_NAME);  ccfg.setAtomicityMode(CacheAtomicityMode.TRANSACTIONAL);  ccfg.setBackups(1);  Collection<QueryEntity> qryEntities=new ArrayList<>();  QueryEntity type=new QueryEntity();  qryEntities.add(type);  type.setKeyType(Integer.class.getName());  type.setValueType(Employee.class.getName());  LinkedHashMap<String,String> qryFlds=new LinkedHashMap<>();  qryFlds.put("id","java.lang.Integer");  qryFlds.put("departmentId","java.lang.Integer");  qryFlds.put("managerId","java.lang.Integer");  qryFlds.put("firstName","java.lang.String");  qryFlds.put("lastName","java.lang.String");  qryFlds.put("email","java.lang.String");  qryFlds.put("phoneNumber","java.lang.String");  qryFlds.put("hireDate","java.sql.Date");  qryFlds.put("job","java.lang.String");  qryFlds.put("salary","java.lang.Double");  type.setFields(qryFlds);  Collection<QueryIndex> indexes=new ArrayList<>();  QueryIndex idx=new QueryIndex();  idx.setName("EMP_NAMES");  idx.setIndexType(QueryIndexType.SORTED);  LinkedHashMap<String,Boolean> indFlds=new LinkedHashMap<>();  indFlds.put("firstName",Boolean.FALSE);  indFlds.put("lastName",Boolean.FALSE);  idx.setFields(indFlds);  indexes.add(idx);  indexes.add(new QueryIndex("salary",QueryIndexType.SORTED,false,"EMP_SALARY"));  type.setIndexes(indexes);  ccfg.setQueryEntities(qryEntities);  return ccfg;}  }
class C{  private void retainOldRowIfPossible(int nodeIndex,int rowIndex,BayesIm oldBayesIm,int initializationMethod){  int oldNodeIndex=getCorrespondingNodeIndex(nodeIndex,oldBayesIm);  if (oldNodeIndex == -1) {    overwriteRow(nodeIndex,rowIndex,initializationMethod);  } else   if (getNumColumns(nodeIndex) != oldBayesIm.getNumColumns(oldNodeIndex)) {    overwriteRow(nodeIndex,rowIndex,initializationMethod);  } else {    int oldRowIndex=getUniqueCompatibleOldRow(nodeIndex,rowIndex,oldBayesIm);    if (oldRowIndex >= 0) {      copyValuesFromOldToNew(oldNodeIndex,oldRowIndex,nodeIndex,rowIndex,oldBayesIm);    } else {      overwriteRow(nodeIndex,rowIndex,initializationMethod);    }  }}  }
class C{  @SuppressWarnings("deprecation") @Deprecated protected void showSplashScreen(final int time){  preferences.set("SplashScreenDelay",time);  doSplashScreenAction("show",null);}  }
class C{  public static String readPayload(BufferedReader socketReader,int payloadLength) throws IOException, ReplicatorException {  if (payloadLength == 0) {    return "";  } else   if (payloadLength == -1) {    return null;  }  char[] buf=new char[1024];  StringBuilder payload=new StringBuilder();  do {    int bytesRead=socketReader.read(buf,0,buf.length);    if (bytesRead > 0)     payload.append(new String(buf,0,bytesRead));  } while (payload.length() < payloadLength);  if (payload.length() != payloadLength) {    throw new ReplicatorException("Size of received payload is incorrect (expected=" + payloadLength + ", received="+ payload.length()+ "):"+ payload);  }  return payload.toString();}  }
class C{  public MediaControlsHelper(@NonNull Context context,@NonNull Class<? extends Service> mediaServiceClass){  this.context=context;  ComponentName componentName=new ComponentName(context,MediaControlsReceiver.class.getName());  mediaSession=new MediaSessionCompat(context,SESSION_TAG,componentName,getMediaButtonReceiverPendingIntent(componentName,mediaServiceClass));  mediaSession.setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS | MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS);  mediaSession.setCallback(new SessionCallback(mediaServiceClass));}  }
class C{  protected GraphicsNode instantiateGraphicsNode(){  return new CompositeGraphicsNode();}  }
class C{  public static void main(String[] args) throws Exception {  String zkUrl="localhost:2181";  String brokerUrl="localhost:9092";  if (args.length > 2 || (args.length == 1 && args[0].matches("^-h|--help$"))) {    System.out.println("Usage: TridentKafkaWordCount [kafka zookeeper url] [kafka broker url]");    System.out.println("   E.g TridentKafkaWordCount [" + zkUrl + "]"+ " ["+ brokerUrl+ "]");    System.exit(1);  } else   if (args.length == 1) {    zkUrl=args[0];  } else   if (args.length == 2) {    zkUrl=args[0];    brokerUrl=args[1];  }  System.out.println("Using Kafka zookeeper url: " + zkUrl + " broker url: "+ brokerUrl);  TridentKafkaWordCount wordCount=new TridentKafkaWordCount(zkUrl,brokerUrl);  LocalDRPC drpc=new LocalDRPC();  LocalCluster cluster=new LocalCluster();  cluster.submitTopology("wordCounter",wordCount.getConsumerConfig(),wordCount.buildConsumerTopology(drpc));  Config conf=new Config();  conf.setMaxSpoutPending(20);  cluster.submitTopology("kafkaBolt",conf,wordCount.buildProducerTopology(wordCount.getProducerConfig()));  for (int i=0; i < 60; i++) {    System.out.println("DRPC RESULT: " + drpc.execute("words","the and apple snow jumped"));    Thread.sleep(1000);  }  cluster.killTopology("kafkaBolt");  cluster.killTopology("wordCounter");  cluster.shutdown();}  }
class C{  public DrawerBuilder withFooter(@LayoutRes int footerViewRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (footerViewRes != -1) {    this.mFooterView=mActivity.getLayoutInflater().inflate(footerViewRes,null,false);  }  return this;}  }
class C{  public TaggingData(ArrayList<ContextGenerator> _cntxGenVector){  cntxGenVector=_cntxGenVector;}  }
class C{  public PidUnavailableException(final String message){  super(message);}  }
class C{  @Override protected int computeHorizontalScrollRange(){  return mItemCount;}  }
class C{  public JmsMessageEntity addJmsMessageToDatabaseQueue(String jmsQueueName,String messageText){  JmsMessageEntity jmsMessageEntity=new JmsMessageEntity();  jmsMessageEntity.setJmsQueueName(jmsQueueName);  jmsMessageEntity.setMessageText(messageText);  return jmsMessageDao.saveAndRefresh(jmsMessageEntity);}  }
class C{  private JapaneseEra(int eraValue,LocalDate since){  this.eraValue=eraValue;  this.since=since;}  }
class C{  @Override protected void initListeners(){  this.findViewById(R.id.otto_send).setOnClickListener(this);}  }
class C{  public static void saveKOML(File saveTo,Object model,Instances header) throws Exception {  Vector<Object> v=new Vector<Object>();  v.add(model);  if (header != null) {    v.add(header);  }  v.trimToSize();  KOML.write(saveTo.getAbsolutePath(),v);}  }
class C{  private void layout(int width,int height){  int itemsWidth=width - 2 * PADDING;  itemsLayout.layout(0,0,itemsWidth,height);}  }
class C{  public static SecretKey generateSecretKey(SecretKeyType secretKeyType,int keySize) throws CryptoException {  try {    KeyGenerator keyGenerator=KeyGenerator.getInstance(secretKeyType.jce(),BOUNCY_CASTLE.jce());    keyGenerator.init(keySize,SecureRandom.getInstance("SHA1PRNG"));    return keyGenerator.generateKey();  } catch (  GeneralSecurityException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoGenerateSecretKey.exception.message"),secretKeyType),ex);  }}  }
class C{  public boolean savedPatternExists(){  try {    return getLockSettings().havePattern(getCurrentOrCallingUserId());  } catch (  RemoteException re) {    return false;  }}  }
class C{  private void registerReceivers(){  if (!mReceiverRegistered) {    registerReceiver(mHeadsetReceiver,new IntentFilter(Intent.ACTION_HEADSET_PLUG));    registerReceiver(mHeadsetReceiver,new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));    mReceiverRegistered=true;  }}  }
class C{  private void prepareRunObject(Class extraParam){  if (log.isDebugEnabled()) {    log.debug("looking for class " + classStr);  }  Class runClass;  try {    runClass=Class.forName(classStr);  } catch (  ClassNotFoundException e) {    setError("could not find " + classStr + " got a "+ e.toString(),e);    return;  }catch (  NoClassDefFoundError e) {    setError("could not find " + classStr + " got a "+ e.toString(),e);    return;  }  try {    runConstructor=runClass.getConstructor((Class[])null);  } catch (  NoSuchMethodException e) {    setError("could not get constructor for " + classStr,e);    return;  }  if (!runMethodUseDefaultParams) {    if (log.isDebugEnabled()) {      log.debug("looking for " + methodStr + " with specific params");    }    try {      runMethod=runClass.getMethod(methodStr,runMethodParams);    } catch (    NoSuchMethodException e) {      if (log.isDebugEnabled()) {        log.debug(methodStr + " not found");      }    }  } else {    if (log.isDebugEnabled()) {      log.debug("looking for " + methodStr + "(ServletRequest, ServletResponse)");    }    for (int i=0; i < runMethodPossibleSignatures.length; i++) {      Class[] runMethodPossibleSignature=runMethodPossibleSignatures[i];      if (extraParam != null) {        if (runMethodPossibleSignature.length == 2) {          runMethodPossibleSignature=new Class[]{runMethodPossibleSignature[0],runMethodPossibleSignature[1],extraParam};        }        if (runMethodPossibleSignature.length == 1) {          runMethodPossibleSignature=new Class[]{runMethodPossibleSignature[0],extraParam};        }      }      if (log.isDebugEnabled()) {        StringBuffer possible=new StringBuffer();        for (int j=0; j < runMethodPossibleSignature.length; j++) {          if (j > 0)           possible.append(",");          possible.append(runMethodPossibleSignature[j].getName());        }        log.debug("looking for " + methodStr + "("+ possible+ ")");      }      try {        runMethod=runClass.getMethod(methodStr,runMethodPossibleSignature);        runMethodParams=runMethodPossibleSignature;        break;      } catch (      NoSuchMethodException e) {        runMethodParams=null;      }    }    if (runMethod == null) {      setError("could not find method with the name " + methodStr + " on "+ classStr);      return;    }  }  Method[] methods=runClass.getMethods();  for (int i=0; i < methods.length; i++) {    Method method=methods[i];    if ("destroy".equals(method.getName()) && method.getParameterTypes().length == 0) {      log.debug("found destroy methodStr");      destroyMethod=method;    }    if ("init".equals(method.getName()) && method.getParameterTypes().length == 1 && ServletConfig.class.getName().equals(method.getParameterTypes()[0].getName())) {      log.debug("found init methodStr");      initMethod=method;    }    if ("init".equals(method.getName()) && method.getParameterTypes().length == 1 && FilterConfig.class.getName().equals(method.getParameterTypes()[0].getName())) {      log.debug("found filter init methodStr");      filterInitMethod=method;    }    if (initMethod != null && destroyMethod != null)     break;  }  if (!newEachTime) {    runClassInstance=fetchNewInstance();  }  valid=true;}  }
class C{  public void testAliasedTables() throws Exception {  if (versionMeetsMinimum(4,1)) {    Statement scrollableStmt=null;    try {      scrollableStmt=this.conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);      this.rs=scrollableStmt.executeQuery("SELECT pos1 AS p1, pos2 AS P2, char_field AS cf FROM UPDATABLE AS UPD LIMIT 1");      this.rs.next();      this.rs.close();      this.rs=null;      scrollableStmt.close();      scrollableStmt=null;    }  finally {      if (this.rs != null) {        try {          this.rs.close();        } catch (        SQLException sqlEx) {        }        this.rs=null;      }      if (scrollableStmt != null) {        try {          scrollableStmt.close();        } catch (        SQLException sqlEx) {        }        scrollableStmt=null;      }    }  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void moveNow(){  if (engineState.state == MainState.SEARCH)   uciEngine.writeLineToEngine("stop");}  }
class C{  public ScriptBuilder addChunk(int index,ScriptChunk chunk){  chunks.add(index,chunk);  return this;}  }
class C{  public boolean isOpsModePossible(){  if (cmdStationType == 0x01 || cmdStationType == 0x02) {    return false;  } else {    return true;  }}  }
class C{  private NodeSequence(DTMIterator iter,int context,XPathContext xctxt,boolean shouldCacheNodes){  setIter(iter);  setRoot(context,xctxt);  setShouldCacheNodes(shouldCacheNodes);}  }
class C{  public static float calculateAspectRatio(float left,float top,float right,float bottom){  final float width=right - left;  final float height=bottom - top;  final float aspectRatio=width / height;  return aspectRatio;}  }
class C{  public static final Button createProcessButton(){  Button btnProcess=new Button();  btnProcess.setImage("/images/Process24.png");  btnProcess.setName(Msg.getMsg(Env.getCtx(),"Process"));  return btnProcess;}  }
class C{  AllInstructionEnumeration(BasicBlock bb,SSADictionary dict){  explicitInstructions=bb.forwardInstrEnumerator();  implicitInstructions=dict.getHeapPhiInstructions(bb);  labelInstruction=explicitInstructions.nextElement();}  }
class C{  private void simpleNonCyclicFillRaster(int pixels[],int off,int adjust,int x,int y,int w,int h){  float rowX=(a00 * x) + (a01 * y) + constA;  float rowY=(a10 * x) + (a11 * y) + constB;  float gDeltaDelta=this.gDeltaDelta;  adjust+=w;  int rgbclip=gradient[fastGradientArraySize];  for (int j=0; j < h; j++) {    float gRel=(rowX * rowX + rowY * rowY) / radiusSq;    float gDelta=(2 * (a00 * rowX + a10 * rowY) / radiusSq + gDeltaDelta / 2);    int i=0;    while (i < w && gRel >= 1.0f) {      pixels[off + i]=rgbclip;      gRel+=gDelta;      gDelta+=gDeltaDelta;      i++;    }    while (i < w && gRel < 1.0f) {      int gIndex;      if (gRel <= 0) {        gIndex=0;      } else {        float fIndex=gRel * SQRT_LUT_SIZE;        int iIndex=(int)(fIndex);        float s0=sqrtLut[iIndex];        float s1=sqrtLut[iIndex + 1] - s0;        fIndex=s0 + (fIndex - iIndex) * s1;        gIndex=(int)(fIndex * fastGradientArraySize);      }      pixels[off + i]=gradient[gIndex];      gRel+=gDelta;      gDelta+=gDeltaDelta;      i++;    }    while (i < w) {      pixels[off + i]=rgbclip;      i++;    }    off+=adjust;    rowX+=a01;    rowY+=a11;  }}  }
class C{  public String validateStringParameter(String parameterName,String parameterValue) throws IllegalArgumentException {  return validateStringParameter("A",parameterName,parameterValue);}  }
class C{  public static TrapCodeOperand CheckCast(){  return new TrapCodeOperand((byte)RuntimeEntrypoints.TRAP_CHECKCAST);}  }
class C{  @Override public String toString(){  return "cudaTextureObject[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public void removeAllPlugins(){  Iterator<AbstractPlugin> iter=allPlugins.iterator();  while (iter.hasNext()) {    AbstractPlugin plugin=(AbstractPlugin)iter.next();    plugin.removePluginObserver(this);    activePlugins.remove(plugin);    iter.remove();  }}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.126 -0500",hash_original_method="552217161A043147D154E437EB4B14C4",hash_generated_method="1F4F734C1780E7BC04FB653B2CE957E6") public void loadLibrary(String libName){  loadLibrary(libName,VMStack.getCallingClassLoader());}  }
class C{  public void handleEvent(Event evt){  toBeRemoved.add(evt.getTarget());}  }
class C{  public boolean equals(XObject obj2){  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.equals(this);  try {    return m_val == obj2.bool();  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }}  }
class C{  public final WritableRaster filter(Raster src,WritableRaster dst){  if (dst == null) {    dst=createCompatibleDestRaster(src);  } else   if (src == dst) {    throw new IllegalArgumentException("src image cannot be the " + "same as the dst image");  } else   if (src.getNumBands() != dst.getNumBands()) {    throw new ImagingOpException("Different number of bands in src " + " and dst Rasters");  }  if (ImagingLib.filter(this,src,dst) == null) {    throw new ImagingOpException("Unable to convolve src image");  }  return dst;}  }
class C{  public AnimatedPickingGraphMousePlugin(int selectionModifiers){  super(selectionModifiers);  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);}  }
class C{  private void performDrag(MotionEvent event){  mLastGesture=ChartGesture.DRAG;  mMatrix.set(mSavedMatrix);  OnChartGestureListener l=mChart.getOnChartGestureListener();  float dX, dY;  if (mChart.isAnyAxisInverted() && mClosestDataSetToTouch != null && mChart.getAxis(mClosestDataSetToTouch.getAxisDependency()).isInverted()) {    if (mChart instanceof HorizontalBarChart) {      dX=-(event.getX() - mTouchStartPoint.x);      dY=event.getY() - mTouchStartPoint.y;    } else {      dX=event.getX() - mTouchStartPoint.x;      dY=-(event.getY() - mTouchStartPoint.y);    }  } else {    dX=event.getX() - mTouchStartPoint.x;    dY=event.getY() - mTouchStartPoint.y;  }  mMatrix.postTranslate(dX,dY);  if (l != null)   l.onChartTranslate(event,dX,dY);}  }
class C{  private static String readAmfString(ParsableByteArray data){  int size=data.readUnsignedShort();  int position=data.getPosition();  data.skipBytes(size);  return new String(data.data,position,size);}  }
class C{  public void clearAppData(String deviceID,String app_package) throws InterruptedException, IOException {  cmd.runCommand("adb -s " + deviceID + " shell pm clear "+ app_package);}  }
class C{  public SubscriptionNotEnabledException(Throwable cause){  super(cause);}  }
class C{  @Override protected boolean drawImageToPlatform(Image image,AffineTransform xform,Color bgcolor,int srcX,int srcY,int srcWidth,int srcHeight,boolean handlingTransparency){  BufferedImage img=getBufferedImage(image);  if (img == null) {    return true;  }  WPrinterJob wPrinterJob=(WPrinterJob)getPrinterJob();  AffineTransform fullTransform=getTransform();  if (xform == null) {    xform=new AffineTransform();  }  fullTransform.concatenate(xform);  double[] fullMatrix=new double[6];  fullTransform.getMatrix(fullMatrix);  Point2D.Float unitVectorX=new Point2D.Float(1,0);  Point2D.Float unitVectorY=new Point2D.Float(0,1);  fullTransform.deltaTransform(unitVectorX,unitVectorX);  fullTransform.deltaTransform(unitVectorY,unitVectorY);  Point2D.Float origin=new Point2D.Float(0,0);  double scaleX=unitVectorX.distance(origin);  double scaleY=unitVectorY.distance(origin);  double devResX=wPrinterJob.getXRes();  double devResY=wPrinterJob.getYRes();  double devScaleX=devResX / DEFAULT_USER_RES;  double devScaleY=devResY / DEFAULT_USER_RES;  int transformType=fullTransform.getType();  boolean clampScale=((transformType & (AffineTransform.TYPE_GENERAL_ROTATION | AffineTransform.TYPE_GENERAL_TRANSFORM)) != 0);  if (clampScale) {    if (scaleX > devScaleX)     scaleX=devScaleX;    if (scaleY > devScaleY)     scaleY=devScaleY;  }  if (scaleX != 0 && scaleY != 0) {    AffineTransform rotTransform=new AffineTransform(fullMatrix[0] / scaleX,fullMatrix[1] / scaleY,fullMatrix[2] / scaleX,fullMatrix[3] / scaleY,fullMatrix[4] / scaleX,fullMatrix[5] / scaleY);    Rectangle2D.Float srcRect=new Rectangle2D.Float(srcX,srcY,srcWidth,srcHeight);    Shape rotShape=rotTransform.createTransformedShape(srcRect);    Rectangle2D rotBounds=rotShape.getBounds2D();    rotBounds.setRect(rotBounds.getX(),rotBounds.getY(),rotBounds.getWidth() + 0.001,rotBounds.getHeight() + 0.001);    int boundsWidth=(int)rotBounds.getWidth();    int boundsHeight=(int)rotBounds.getHeight();    if (boundsWidth > 0 && boundsHeight > 0) {      boolean drawOpaque=true;      if (!handlingTransparency && hasTransparentPixels(img)) {        drawOpaque=false;        if (isBitmaskTransparency(img)) {          if (bgcolor == null) {            if (drawBitmaskImage(img,xform,bgcolor,srcX,srcY,srcWidth,srcHeight)) {              return true;            }          } else           if (bgcolor.getTransparency() == Transparency.OPAQUE) {            drawOpaque=true;          }        }        if (!canDoRedraws()) {          drawOpaque=true;        }      } else {        bgcolor=null;      }      if ((srcX + srcWidth > img.getWidth(null) || srcY + srcHeight > img.getHeight(null)) && canDoRedraws()) {        drawOpaque=false;      }      if (drawOpaque == false) {        fullTransform.getMatrix(fullMatrix);        AffineTransform tx=new AffineTransform(fullMatrix[0] / devScaleX,fullMatrix[1] / devScaleY,fullMatrix[2] / devScaleX,fullMatrix[3] / devScaleY,fullMatrix[4] / devScaleX,fullMatrix[5] / devScaleY);        Rectangle2D.Float rect=new Rectangle2D.Float(srcX,srcY,srcWidth,srcHeight);        Shape shape=fullTransform.createTransformedShape(rect);        Rectangle2D region=shape.getBounds2D();        region.setRect(region.getX(),region.getY(),region.getWidth() + 0.001,region.getHeight() + 0.001);        int w=(int)region.getWidth();        int h=(int)region.getHeight();        int nbytes=w * h * 3;        int maxBytes=8 * 1024 * 1024;        double origDpi=(devResX < devResY) ? devResX : devResY;        int dpi=(int)origDpi;        double scaleFactor=1;        double maxSFX=w / (double)boundsWidth;        double maxSFY=h / (double)boundsHeight;        double maxSF=(maxSFX > maxSFY) ? maxSFY : maxSFX;        int minDpi=(int)(dpi / maxSF);        if (minDpi < DEFAULT_USER_RES)         minDpi=DEFAULT_USER_RES;        while (nbytes > maxBytes && dpi > minDpi) {          scaleFactor*=2;          dpi/=2;          nbytes/=4;        }        if (dpi < minDpi) {          scaleFactor=(origDpi / minDpi);        }        region.setRect(region.getX() / scaleFactor,region.getY() / scaleFactor,region.getWidth() / scaleFactor,region.getHeight() / scaleFactor);        wPrinterJob.saveState(getTransform(),getClip(),region,scaleFactor,scaleFactor);        return true;      } else {        int dibType=BufferedImage.TYPE_3BYTE_BGR;        IndexColorModel icm=null;        ColorModel cm=img.getColorModel();        int imgType=img.getType();        if (cm instanceof IndexColorModel && cm.getPixelSize() <= 8 && (imgType == BufferedImage.TYPE_BYTE_BINARY || imgType == BufferedImage.TYPE_BYTE_INDEXED)) {          icm=(IndexColorModel)cm;          dibType=imgType;          if (imgType == BufferedImage.TYPE_BYTE_BINARY && cm.getPixelSize() == 2) {            int[] rgbs=new int[16];            icm.getRGBs(rgbs);            boolean transparent=icm.getTransparency() != Transparency.OPAQUE;            int transpixel=icm.getTransparentPixel();            icm=new IndexColorModel(4,16,rgbs,0,transparent,transpixel,DataBuffer.TYPE_BYTE);          }        }        int iw=(int)rotBounds.getWidth();        int ih=(int)rotBounds.getHeight();        BufferedImage deepImage=null;        boolean newImage=true;        if (newImage) {          if (icm == null) {            deepImage=new BufferedImage(iw,ih,dibType);          } else {            deepImage=new BufferedImage(iw,ih,dibType,icm);          }          Graphics2D imageGraphics=deepImage.createGraphics();          imageGraphics.clipRect(0,0,deepImage.getWidth(),deepImage.getHeight());          imageGraphics.translate(-rotBounds.getX(),-rotBounds.getY());          imageGraphics.transform(rotTransform);          if (bgcolor == null) {            bgcolor=Color.white;          }          imageGraphics.drawImage(img,srcX,srcY,srcX + srcWidth,srcY + srcHeight,srcX,srcY,srcX + srcWidth,srcY + srcHeight,bgcolor,null);          imageGraphics.dispose();        } else {          deepImage=img;        }        Rectangle2D.Float scaledBounds=new Rectangle2D.Float((float)(rotBounds.getX() * scaleX),(float)(rotBounds.getY() * scaleY),(float)(rotBounds.getWidth() * scaleX),(float)(rotBounds.getHeight() * scaleY));        WritableRaster raster=deepImage.getRaster();        byte[] data;        if (raster instanceof ByteComponentRaster) {          data=((ByteComponentRaster)raster).getDataStorage();        } else         if (raster instanceof BytePackedRaster) {          data=((BytePackedRaster)raster).getDataStorage();        } else {          return false;        }        int bitsPerPixel=24;        SampleModel sm=deepImage.getSampleModel();        if (sm instanceof ComponentSampleModel) {          ComponentSampleModel csm=(ComponentSampleModel)sm;          bitsPerPixel=csm.getPixelStride() * 8;        } else         if (sm instanceof MultiPixelPackedSampleModel) {          MultiPixelPackedSampleModel mppsm=(MultiPixelPackedSampleModel)sm;          bitsPerPixel=mppsm.getPixelBitStride();        } else {          if (icm != null) {            int diw=deepImage.getWidth();            int dih=deepImage.getHeight();            if (diw > 0 && dih > 0) {              bitsPerPixel=data.length * 8 / diw / dih;            }          }        }        Shape holdClip=getClip();        clip(xform.createTransformedShape(srcRect));        deviceClip(getClip().getPathIterator(getTransform()));        wPrinterJob.drawDIBImage(data,scaledBounds.x,scaledBounds.y,(float)Math.rint(scaledBounds.width + 0.5),(float)Math.rint(scaledBounds.height + 0.5),0f,0f,deepImage.getWidth(),deepImage.getHeight(),bitsPerPixel,icm);        setClip(holdClip);      }    }  }  return true;}  }
class C{  @ZeppelinApi public void put(String name,Object value){  ResourcePool resourcePool=interpreterContext.getResourcePool();  resourcePool.put(name,value);}  }
class C{  public FlipVerticalAnimation(View view){  this.view=view;  degrees=360;  pivot=PIVOT_CENTER;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  protected void fireKNNsRemoved(DBIDs removals,DBIDs updates){  KNNChangeEvent e=new KNNChangeEvent(this,KNNChangeEvent.Type.DELETE,removals,updates);  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == KNNListener.class) {      ((KNNListener)listeners[i + 1]).kNNsChanged(e);    }  }}  }
class C{  public void endDocument() throws SAXException {  if (DEBUG)   System.out.println("endDocument");  charactersFlush();  m_nextsib.setElementAt(NULL,0);  if (m_firstch.elementAt(0) == NOTPROCESSED)   m_firstch.setElementAt(NULL,0);  if (DTM.NULL != m_previous)   m_nextsib.setElementAt(DTM.NULL,m_previous);  m_parents=null;  m_prefixMappings=null;  m_contextIndexes=null;  m_endDocumentOccured=true;  m_locator=null;}  }
class C{  public XMLElement(String fullName){  this(fullName,null,null,NO_LINE);}  }
class C{  public void testRemoveInTheFuture(){  AnnualCalendar annualCalendar=new AnnualCalendar();  Calendar day=Calendar.getInstance();  day.set(Calendar.MONTH,Calendar.JUNE);  day.set(Calendar.YEAR,2005);  day.set(Calendar.DAY_OF_MONTH,23);  annualCalendar.setDayExcluded((Calendar)day.clone(),true);  day.set(Calendar.MONTH,Calendar.JUNE);  day.set(Calendar.YEAR,2008);  day.set(Calendar.DAY_OF_MONTH,23);  annualCalendar.setDayExcluded((Calendar)day.clone(),false);  assertTrue("The day 23 June is not expected to be excluded but it is",!annualCalendar.isDayExcluded(day));}  }
class C{  public boolean isSupported(ICalVersion version){  for (  ICalVersion supportedVersion : supportedVersions) {    if (supportedVersion == version) {      return true;    }  }  return false;}  }
class C{  public Button addShootOFFButton(final String text,final EventHandler<ActionEvent> eventHandler){  final Button exerciseButton=new Button(text);  final Button resetButton=(Button)buttonsContainer.getChildren().get(0);  exerciseButton.setOnAction(eventHandler);  exerciseButton.setPrefSize(resetButton.getPrefWidth(),resetButton.getPrefHeight());  exerciseButtons.add(exerciseButton);  buttonsContainer.getChildren().add(exerciseButton);  return exerciseButton;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.VERSION_CONSTRAINT__LOWER_VERSION:    return basicSetLowerVersion(null,msgs);case N4mfPackage.VERSION_CONSTRAINT__UPPER_VERSION:  return basicSetUpperVersion(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public final int numRows(){  return m_Matrix.getRowDimension();}  }
class C{  private void readParameterAnnotations(final MethodVisitor mv,final Context context,int v,final boolean visible){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(context.desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  char[] c=context.buffer;  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,c),visible);      v=readAnnotationValues(v + 2,c,true,av);    }  }}  }
class C{  public SnackbarBuilder consecutiveDismissCallback(SnackbarConsecutiveDismissCallback callback){  callbackBuilder.consecutiveDismissCallback(callback);  return this;}  }
class C{  public static int largestElementLen(String[] enumValues){  return enumValues[largestElement(enumValues)].length();}  }
class C{  public static void putDouble(String property,double val){  SIMBRAIN_PREFERENCES.putDouble(property,val);}  }
class C{  private String convertToElementName(String attributeName){  return attributeName.replace(' ','_');}  }
class C{  public SavePlotAction(final GuiComponent component){  super("Save");  if (component == null) {    throw new IllegalArgumentException("Desktop component must not be null");  }  this.component=component;}  }
class C{  private static final MediaCodecInfo selectAudioCodec(final String mimeType){  if (DEBUG)   Log.v(TAG,"selectAudioCodec:");  MediaCodecInfo result=null;  final int numCodecs=MediaCodecList.getCodecCount();  LOOP:   for (int i=0; i < numCodecs; i++) {    final MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(i);    if (!codecInfo.isEncoder()) {      continue;    }    final String[] types=codecInfo.getSupportedTypes();    for (int j=0; j < types.length; j++) {      if (DEBUG)       Log.i(TAG,"supportedType:" + codecInfo.getName() + ",MIME="+ types[j]);      if (types[j].equalsIgnoreCase(mimeType)) {        if (result == null) {          result=codecInfo;          break LOOP;        }      }    }  }  return result;}  }
class C{  public Dimension2D(double width,double height){  this.width=width;  this.height=height;}  }
class C{  public CCachedOutdegreeCriterium(final String operator,final int outdegree){  m_operator=operator;  m_outdegree=outdegree;}  }
class C{  public ViewEngine find(Viewable viewable){  Optional<ViewEngine> engine;  final String view=viewable.getView();  final Class<? extends ViewEngine> engineClass=viewable.getViewEngine();  if (engineClass != null) {    engine=Optional.of(cdiUtils.newBean(engineClass));  } else {    engine=Optional.ofNullable(cache.get(view));    if (!engine.isPresent()) {      final Set<ViewEngine> candidates=new HashSet<>();      for (      ViewEngine e : engines) {        if (e.supports(view)) {          candidates.add(e);        }      }      engine=candidates.stream().max(null);      if (engine.isPresent()) {        cache.put(view,engine.get());      }    }  }  return engine.isPresent() ? engine.get() : null;}  }
class C{  private boolean mutationChange(){  boolean changed=false;  int lastMutatableStatement=getLastMutatableStatement();  double pl=1d / (lastMutatableStatement + 1);  TestFactory testFactory=TestFactory.getInstance();  if (Randomness.nextDouble() < Properties.CONCOLIC_MUTATION) {    try {      changed=mutationConcolic();    } catch (    Exception exc) {      logger.warn("Encountered exception when trying to use concolic mutation: {}",exc.getMessage());      logger.debug("Detailed exception trace: ",exc);    }  }  if (!changed) {    for (int position=0; position <= lastMutatableStatement; position++) {      if (Randomness.nextDouble() <= pl) {        assert (test.isValid());        Statement statement=test.getStatement(position);        if (statement.isReflectionStatement())         continue;        int oldDistance=statement.getReturnValue().getDistance();        if (statement.mutate(test,testFactory)) {          changed=true;          mutationHistory.addMutationEntry(new TestMutationHistoryEntry(TestMutationHistoryEntry.TestMutation.CHANGE,statement));          assert (test.isValid());          assert ConstraintVerifier.verifyTest(test);        } else         if (!statement.isAssignmentStatement() && ConstraintVerifier.canDelete(test,position)) {          int pos=statement.getPosition();          if (testFactory.changeRandomCall(test,statement)) {            changed=true;            mutationHistory.addMutationEntry(new TestMutationHistoryEntry(TestMutationHistoryEntry.TestMutation.CHANGE,test.getStatement(pos)));            assert ConstraintVerifier.verifyTest(test);          }          assert (test.isValid());        }        statement.getReturnValue().setDistance(oldDistance);        position=statement.getPosition();      }    }  }  if (changed) {    assert ConstraintVerifier.verifyTest(test);  }  return changed;}  }
class C{  public static double distancePointLinePerpendicular(Coordinate p,Coordinate A,Coordinate B){  double len2=(B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y);  double s=((A.y - p.y) * (B.x - A.x) - (A.x - p.x) * (B.y - A.y)) / len2;  return Math.abs(s) * Math.sqrt(len2);}  }
class C{  public ServiceStateException(ServiceStatus current,String expected,String serviceId){  super("Service operation tried on the service " + serviceId + " with invalid status",new Object[]{expected,current.name(),serviceId});}  }
class C{  public boolean isGuardTrue(){  return (flags & GUARD_TRUE) != 0;}  }
class C{  public void checkQuotaAndDiskStatus(){  validateQuotaLimit();  validateDiskUsedStatus();}  }
class C{  public StrBuilder append(int value){  return append(String.valueOf(value));}  }
class C{  public Matrix3f m02(float m02){  this.m02=m02;  return this;}  }
class C{  public static void main(String[] args) throws IgniteException {  System.out.println();  System.out.println(">>> Lifecycle example started.");  IgniteConfiguration cfg=new IgniteConfiguration();  LifecycleExampleBean bean=new LifecycleExampleBean();  cfg.setLifecycleBeans(bean);  try (Ignite ignite=Ignition.start(cfg)){    assert bean.isStarted();  }   assert !bean.isStarted();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.810 -0500",hash_original_method="BAFA9801ECAE5A57159F89B1B15A5520",hash_generated_method="6612F428A82251604690485051B0E8F1") @DSVerified @DSBan(DSCat.PRIVATE_METHOD) private static byte[] digest(MessageDigest digest,InputStream data) throws IOException {  byte[] buffer=new byte[STREAM_BUFFER_LENGTH];  int read=data.read(buffer,0,STREAM_BUFFER_LENGTH);  while (read > -1) {    digest.update(buffer,0,read);    read=data.read(buffer,0,STREAM_BUFFER_LENGTH);  }  return digest.digest();}  }
class C{  private static void warnAddOnsAndExtensionsNoLongerRunnable(){  final AddOnLoader addOnLoader=ExtensionFactory.getAddOnLoader();  List<String> idsAddOnsNoLongerRunning=addOnLoader.getIdsAddOnsWithRunningIssuesSinceLastRun();  if (idsAddOnsNoLongerRunning.isEmpty()) {    return;  }  List<AddOn> addOnsNoLongerRunning=new ArrayList<>(idsAddOnsNoLongerRunning.size());  for (  String id : idsAddOnsNoLongerRunning) {    addOnsNoLongerRunning.add(addOnLoader.getAddOnCollection().getAddOn(id));  }  AddOnRunIssuesUtils.showWarningMessageAddOnsNotRunnable(Constant.messages.getString("start.gui.warn.addOnsOrExtensionsNoLongerRunning"),addOnLoader.getAddOnCollection(),addOnsNoLongerRunning);}  }
class C{  protected SysexMessage(byte[] data){  super(data);}  }
class C{  public static <V extends IView,D>void put(V view,D data,IPresenter<V,D> presenter){  assert view != null;  assert data != null;  assert presenter != null;  if (view instanceof View) {    View v=(View)view;    forParentActivity(v).put(v,data,presenter);  } else   if (view instanceof Activity) {    Activity a=(Activity)view;    forActivity(a).put(data,presenter);  } else {    throw new IllegalArgumentException("View has to be instance of android View or Activity.");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:11.993 -0400",hash_original_method="35C9CBE5101C777B4EADABC10088A8AB",hash_generated_method="804A354FC075BF45DF30348B6C2C8C9C") public boolean isDefaultRouteSet(){  return mDefaultRouteSet.get();}  }
class C{  private boolean checkVersion(){  boolean retValue=false;  try {    String version=AEnv.getServerVersion();    if (Adempiere.DATE_VERSION.equals(version)) {      log.config("Server = Client - " + version);      retValue=true;    } else     if (version != null) {      StringBuffer msg=new StringBuffer(">>\n");      msg.append(res.getString("VersionConflict")).append("\n").append(res.getString("VersionInfo")).append("\n");      msg.append(version == null ? "null" : version).append(" <> ").append(Adempiere.DATE_VERSION).append("\n");      msg.append(res.getString("PleaseUpgrade")).append("\n<<");      JOptionPane.showMessageDialog(null,msg.toString(),Adempiere.getName() + " - " + res.getString("VersionConflict"),JOptionPane.ERROR_MESSAGE);      AEnv.exit(1);    }  } catch (  Exception e) {    log.severe("Contact Server failed - " + e.getClass().toString() + ": "+ e.getMessage());  }  return retValue;}  }
class C{  public void acceptAST(String sourceFilePath,CompilationUnit ast){}  }
class C{  private static int charToKeyCode(char c){  if (c >= '0' && c <= '9') {    int offset=c - '0';    return KeyEvent.KEYCODE_0 + offset;  }  if (c >= 'a' && c <= 'z') {    int offset=c - 'a';    return KeyEvent.KEYCODE_A + offset;  }switch (c) {case '*':    return KeyEvent.KEYCODE_STAR;case '#':  return KeyEvent.KEYCODE_POUND;case ',':return KeyEvent.KEYCODE_COMMA;case '.':return KeyEvent.KEYCODE_PERIOD;case '\t':return KeyEvent.KEYCODE_TAB;case ' ':return KeyEvent.KEYCODE_SPACE;case '\n':return KeyEvent.KEYCODE_ENTER;case '\b':case 0x7F:return KeyEvent.KEYCODE_DEL;case '~':return KeyEvent.KEYCODE_GRAVE;case '-':return KeyEvent.KEYCODE_MINUS;case '=':return KeyEvent.KEYCODE_EQUALS;case '(':return KeyEvent.KEYCODE_LEFT_BRACKET;case ')':return KeyEvent.KEYCODE_RIGHT_BRACKET;case '\\':return KeyEvent.KEYCODE_BACKSLASH;case ';':return KeyEvent.KEYCODE_SEMICOLON;case '\'':return KeyEvent.KEYCODE_APOSTROPHE;case '/':return KeyEvent.KEYCODE_SLASH;default :return c;}}  }
class C{  public void write(ByteCodeWriter out) throws IOException {  out.writeShort(_accessFlags);  out.writeUTF8Const(_name);  out.writeUTF8Const(_descriptor);  out.writeShort(_attributes.size());  for (int i=0; i < _attributes.size(); i++) {    Attribute attr=_attributes.get(i);    attr.write(out);  }}  }
class C{  @Override public void createPaths(final int[] pX,final int[] pY,final boolean[] onCurve,final boolean[] endOfContour,final int endIndex){  if (endOfContour == null) {    return;  }  final int ptCount=endOfContour.length;  int start=0, firstPt=-1;  for (int ii=0; ii < ptCount; ii++) {    if (endOfContour[ii]) {      if (firstPt != -1 && (!onCurve[start] || !onCurve[ii])) {        final int diff=firstPt - start;        int newPos;        final int pXlength=pX.length;        final int[] old_pX=new int[pXlength];        System.arraycopy(pX,0,old_pX,0,pXlength);        final int[] old_pY=new int[pXlength];        System.arraycopy(pY,0,old_pY,0,pXlength);        final boolean[] old_onCurve=new boolean[pXlength];        System.arraycopy(onCurve,0,old_onCurve,0,pXlength);        for (int oldPos=start; oldPos < ii + 1; oldPos++) {          newPos=oldPos + diff;          if (newPos > ii) {            newPos-=(ii - start + 1);          }          pX[oldPos]=old_pX[newPos];          pY[oldPos]=old_pY[newPos];          onCurve[oldPos]=old_onCurve[newPos];        }      }      start=ii + 1;      firstPt=-1;    } else     if (onCurve[ii] && firstPt == -1) {      firstPt=ii;    }  }  boolean isFirstDraw=true;  if (pathsFX == null) {    pathsFX=new Path();    pathsFX.setFillRule(FillRule.NON_ZERO);  }  final int c=pX.length;  int fc=-1;  for (int jj=0; jj < c; jj++) {    if (endOfContour[jj]) {      fc=jj + 1;      jj=c;    }  }  int x1, y1, x2=0, y2=0, x3=0, y3=0;  x1=pX[0];  y1=pY[0];  if (debug) {    System.out.println(pX[0] + " " + pY[0]+ " move to x1,y1="+ x1+ ' '+ y1);  }  final ObservableList<PathElement> elements=pathsFX.getElements();  elements.add(new MoveTo(x1,y1));  if (debug) {    System.out.println("first contour=" + fc + "===================================="+ pX[0]+ ' '+ pY[0]);  }  int xs=0, ys=0, lc=0;  boolean isEnd=false;  for (int j=0; j < endIndex; j++) {    final int p=j % fc;    int p1=(j + 1) % fc;    int p2=(j + 2) % fc;    int pm1=(j - 1) % fc;    if (j == 0) {      pm1=fc - 1;    }    if (p1 < lc) {      p1+=lc;    }    if (p2 < lc) {      p2+=lc;    }    if (debug) {      System.out.println("points=" + lc + '/'+ fc+ ' '+ pm1+ ' '+ p+ ' '+ p1+ ' '+ p2+ " j="+ j+ " endOfContour[j]="+ endOfContour[j]);    }    if (endOfContour[j]) {      isEnd=true;      if (onCurve[fc]) {        xs=pX[fc];        ys=pY[fc];      } else {        xs=pX[j + 1];        ys=pY[j + 1];      }      lc=fc;      for (int jj=j + 1; jj < c; jj++) {        if (endOfContour[jj]) {          fc=jj + 1;          jj=c;        }      }      if (debug) {        System.out.println("End of contour. next=" + j + ' '+ fc+ ' '+ lc);      }    }    if (debug) {      if (j > 0) {        System.out.println("curves=" + onCurve[p] + ' '+ onCurve[p1]+ ' '+ onCurve[p2]+ " EndOfContour j-1="+ endOfContour[j - 1]+ " j="+ endOfContour[j]+ " j+1="+ endOfContour[j + 1]);      } else {        System.out.println("curves=" + onCurve[p] + ' '+ onCurve[p1]+ ' '+ onCurve[p2]+ " EndOfContour j="+ endOfContour[j]+ " j+1="+ endOfContour[j + 1]);      }    }    if (lc == fc && onCurve[p]) {      j=c;      if (debug) {        System.out.println("last 2 match");      }    } else {      if (debug) {        System.out.println(fc + " " + pm1+ ' '+ p+ ' '+ p1+ ' '+ p2);      }      if (onCurve[p] && onCurve[p1]) {        x3=pX[p1];        y3=pY[p1];        elements.add(new LineTo(x3,y3));        if (debug) {          System.out.println(p + " pt,pt " + x3+ ' '+ y3+ " (lineTo)");        }        isFirstDraw=false;      } else       if (j < (c - 3) && ((fc - lc) > 1 || fc == lc)) {        boolean checkEnd=false;        if (onCurve[p] && !onCurve[p1] && onCurve[p2]) {          x1=pX[p];          y1=pY[p];          x2=pX[p1];          y2=pY[p1];          x3=pX[p2];          y3=pY[p2];          j++;          checkEnd=true;          if (debug) {            System.out.println(p + " pt,cv,pt " + x1+ ' '+ y1+ ' '+ x2+ ' '+ y2+ ' '+ x3+ ' '+ y3);          }        } else         if (onCurve[p] && !onCurve[p1] && !onCurve[p2]) {          x1=pX[p];          y1=pY[p];          x2=pX[p1];          y2=pY[p1];          x3=midPt(pX[p1],pX[p2]);          y3=midPt(pY[p1],pY[p2]);          j++;          checkEnd=true;          if (debug) {            System.out.println(p + " pt,cv,cv " + x1+ ' '+ y1+ ' '+ x2+ ' '+ y2+ ' '+ x3+ ' '+ y3);          }        } else         if (!onCurve[p] && !onCurve[p1] && (!endOfContour[p2] || fc - p2 == 1)) {          x1=midPt(pX[pm1],pX[p]);          y1=midPt(pY[pm1],pY[p]);          x2=pX[p];          y2=pY[p];          x3=midPt(pX[p],pX[p1]);          y3=midPt(pY[p],pY[p1]);          if (debug) {            System.out.println(p + " cv,cv1 " + x1+ ' '+ y1+ ' '+ x2+ ' '+ y2+ ' '+ x3+ ' '+ y3);          }        } else         if (!onCurve[p] && onCurve[p1]) {          x1=midPt(pX[pm1],pX[p]);          y1=midPt(pY[pm1],pY[p]);          x2=pX[p];          y2=pY[p];          x3=pX[p1];          y3=pY[p1];          if (debug) {            System.out.println(p + " cv,pt " + x1+ ' '+ y1+ ' '+ x2+ ' '+ y2+ ' '+ x3+ ' '+ y3);          }        }        if (isFirstDraw) {          elements.add(new MoveTo(x1,y1));          isFirstDraw=false;          if (debug) {            System.out.println("first draw move to " + x1 + ' '+ y1);          }        }        if (!(endOfContour[p] && p > 0 && endOfContour[p - 1])) {          elements.add(new CubicCurveTo(x1,y1,x2,y2,x3,y3));        }        if (debug) {          System.out.println("curveto " + x1 + ' '+ y1+ ' '+ x2+ ' '+ y2+ ' '+ x3+ ' '+ y3);        }        if (checkEnd && endOfContour[j]) {          isEnd=true;          xs=pX[fc];          ys=pY[fc];          lc=fc;          for (int jj=j + 1; jj < c; jj++) {            if (endOfContour[jj]) {              fc=jj + 1;              jj=c;            }          }          if (debug) {            System.out.println("Curve");          }        }      }      if (endOfContour[p]) {        elements.add(new ClosePath());      }      if (debug) {        System.out.println("x2 " + xs + ' '+ ys+ ' '+ isEnd);      }      if (isEnd) {        elements.add(new MoveTo(xs,ys));        isEnd=false;        if (debug) {          System.out.println("Move to " + xs + ' '+ ys);        }      }    }  }  if (debug) {    System.out.println("Ends at " + x1 + ' '+ y1+ " x="+ minX+ ','+ maxX+ " y="+ minY+ ','+ maxY+ " glyph x="+ compMinX+ ','+ compMaxX+ " y="+ compMinY+ ','+ compMaxY);  }}  }
class C{  public final <I,K extends Serializable,V extends Serializable,O,R>MapReduceJob<I,K,V,O,R> createMapreduceJob(Mapper<I,K,V> mapper,Reducer<K,V,O> reducer,Iterable<? extends Input<? extends I>> inputs,Output<O,R> output){  checkCommonRequiredFields(inputs,mapper);  checkArgumentNotNull(reducer,"reducer");  return new MapReduceJob<>(new MapReduceSpecification.Builder<I,K,V,O,R>().setJobName(jobName).setInput(new ConcatenatingInput<>(inputs,httpParamMapShards.or(defaultMapShards))).setMapper(mapper).setReducer(reducer).setOutput(output).setKeyMarshaller(Marshallers.<K>getSerializationMarshaller()).setValueMarshaller(Marshallers.<V>getSerializationMarshaller()).setNumReducers(httpParamReduceShards.or(defaultReduceShards)).build(),new MapReduceSettings.Builder().setWorkerQueueName(QUEUE_NAME).setBaseUrl(BASE_URL).setModule(moduleName).setMillisPerSlice((int)sliceDuration.getMillis()).build());}  }
class C{  public Vertex search(Vertex source,Vertex filter,Vertex vertex,Vertex vertex2,Vertex vertex3,Vertex vertex4,Vertex vertex5){  return discover(true,true,(String)filter.getData(),vertex,vertex2,vertex3,vertex4,vertex5);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:18.885 -0500",hash_original_method="1EE7C68A79581646D3317E6FF35ECA2F",hash_generated_method="086A9D938367E6358DB7E7C1B324BC3D") void processClientHello(){  CipherSuite cipher_suite;  checkCompression: {    for (int i=0; i < clientHello.compression_methods.length; i++) {      if (clientHello.compression_methods[i] == 0) {        break checkCompression;      }    }    fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. Incorrect client hello message");  }  if (!ProtocolVersion.isSupported(clientHello.client_version)) {    fatalAlert(AlertProtocol.PROTOCOL_VERSION,"PROTOCOL VERSION. Unsupported client version " + clientHello.client_version[0] + clientHello.client_version[1]);  }  isResuming=false;  FIND:   if (clientHello.session_id.length != 0) {    SSLSessionImpl sessionToResume;    boolean reuseCurrent=false;    if (session != null && Arrays.equals(session.id,clientHello.session_id)) {      if (session.isValid()) {        isResuming=true;        break FIND;      }      reuseCurrent=true;    }    sessionToResume=findSessionToResume(clientHello.session_id);    if (sessionToResume == null || !sessionToResume.isValid()) {      if (!parameters.getEnableSessionCreation()) {        if (reuseCurrent) {          sendWarningAlert(AlertProtocol.NO_RENEGOTIATION);          status=NOT_HANDSHAKING;          clearMessages();          return;        }        fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created");      }      session=null;    } else {      session=(SSLSessionImpl)sessionToResume.clone();      isResuming=true;    }  }  if (isResuming) {    cipher_suite=session.cipherSuite;    checkCipherSuite: {      for (int i=0; i < clientHello.cipher_suites.length; i++) {        if (cipher_suite.equals(clientHello.cipher_suites[i])) {          break checkCipherSuite;        }      }      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. Incorrect client hello message");    }  } else {    cipher_suite=selectSuite(clientHello.cipher_suites);    if (cipher_suite == null) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. NO COMMON SUITE");    }    if (!parameters.getEnableSessionCreation()) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created");    }    session=new SSLSessionImpl(cipher_suite,parameters.getSecureRandom());    if (engineOwner != null) {      session.setPeer(engineOwner.getPeerHost(),engineOwner.getPeerPort());    } else {      session.setPeer(socketOwner.getInetAddress().getHostName(),socketOwner.getPort());    }  }  recordProtocol.setVersion(clientHello.client_version);  session.protocol=ProtocolVersion.getByVersion(clientHello.client_version);  session.clientRandom=clientHello.random;  serverHello=new ServerHello(parameters.getSecureRandom(),clientHello.client_version,session.getId(),cipher_suite,(byte)0);  session.serverRandom=serverHello.random;  send(serverHello);  if (isResuming) {    sendChangeCipherSpec();    return;  }  if (!cipher_suite.isAnonymous()) {    X509Certificate[] certs=null;    String certType=cipher_suite.getServerKeyType();    if (certType == null) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"NO CERT TYPE FOR " + cipher_suite.getName());    }    String alias=null;    X509KeyManager km=parameters.getKeyManager();    if (km instanceof X509ExtendedKeyManager) {      X509ExtendedKeyManager ekm=(X509ExtendedKeyManager)km;      if (this.socketOwner != null) {        alias=ekm.chooseServerAlias(certType,null,this.socketOwner);      } else {        alias=ekm.chooseEngineServerAlias(certType,null,this.engineOwner);      }      if (alias != null) {        certs=ekm.getCertificateChain(alias);      }    } else {      alias=km.chooseServerAlias(certType,null,this.socketOwner);      if (alias != null) {        certs=km.getCertificateChain(alias);      }    }    if (certs == null) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"NO SERVER CERTIFICATE FOUND");      return;    }    session.localCertificates=certs;    serverCert=new CertificateMessage(certs);    privKey=km.getPrivateKey(alias);    send(serverCert);  }  RSAPublicKey rsakey=null;  DHPublicKeySpec dhkeySpec=null;  byte[] hash=null;  BigInteger p=null;  BigInteger g=null;  KeyPairGenerator kpg=null;  try {    if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {      PublicKey pk=serverCert.certs[0].getPublicKey();      if (getRSAKeyLength(pk) > 512) {        kpg=KeyPairGenerator.getInstance("RSA");        kpg.initialize(512);      }    } else     if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS_EXPORT || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA_EXPORT || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon_EXPORT) {      kpg=KeyPairGenerator.getInstance("DH");      p=new BigInteger(1,DHParameters.getPrime());      g=new BigInteger("2");      DHParameterSpec spec=new DHParameterSpec(p,g);      kpg.initialize(spec);    }  } catch (  Exception e) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);  }  if (kpg != null) {    DigitalSignature ds=new DigitalSignature(cipher_suite.authType);    KeyPair kp=null;    try {      kp=kpg.genKeyPair();      if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {        rsakey=(RSAPublicKey)kp.getPublic();      } else {        DHPublicKey dhkey=(DHPublicKey)kp.getPublic();        KeyFactory kf=KeyFactory.getInstance("DH");        dhkeySpec=kf.getKeySpec(dhkey,DHPublicKeySpec.class);      }      if (!cipher_suite.isAnonymous()) {        ds.init(privKey);        privKey=kp.getPrivate();        ds.update(clientHello.getRandom());        ds.update(serverHello.getRandom());        byte[] tmp;        byte[] tmpLength=new byte[2];        if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {          tmp=ServerKeyExchange.toUnsignedByteArray(rsakey.getModulus());          tmpLength[0]=(byte)((tmp.length & 0xFF00) >>> 8);          tmpLength[1]=(byte)(tmp.length & 0xFF);          ds.update(tmpLength);          ds.update(tmp);          tmp=ServerKeyExchange.toUnsignedByteArray(rsakey.getPublicExponent());          tmpLength[0]=(byte)((tmp.length & 0xFF00) >>> 8);          tmpLength[1]=(byte)(tmp.length & 0xFF);          ds.update(tmpLength);          ds.update(tmp);        } else {          tmp=ServerKeyExchange.toUnsignedByteArray(dhkeySpec.getP());          tmpLength[0]=(byte)((tmp.length & 0xFF00) >>> 8);          tmpLength[1]=(byte)(tmp.length & 0xFF);          ds.update(tmpLength);          ds.update(tmp);          tmp=ServerKeyExchange.toUnsignedByteArray(dhkeySpec.getG());          tmpLength[0]=(byte)((tmp.length & 0xFF00) >>> 8);          tmpLength[1]=(byte)(tmp.length & 0xFF);          ds.update(tmpLength);          ds.update(tmp);          tmp=ServerKeyExchange.toUnsignedByteArray(dhkeySpec.getY());          tmpLength[0]=(byte)((tmp.length & 0xFF00) >>> 8);          tmpLength[1]=(byte)(tmp.length & 0xFF);          ds.update(tmpLength);          ds.update(tmp);        }        hash=ds.sign();      } else {        privKey=kp.getPrivate();      }    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);    }    if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {      serverKeyExchange=new ServerKeyExchange(rsakey.getModulus(),rsakey.getPublicExponent(),null,hash);    } else {      serverKeyExchange=new ServerKeyExchange(p,g,dhkeySpec.getY(),hash);    }    send(serverKeyExchange);  }  certRequest:   if (parameters.getWantClientAuth() || parameters.getNeedClientAuth()) {    X509Certificate[] accepted;    try {      X509TrustManager tm=parameters.getTrustManager();      accepted=tm.getAcceptedIssuers();    } catch (    ClassCastException e) {      break certRequest;    }    byte[] requestedClientCertTypes={CipherSuite.TLS_CT_RSA_SIGN,CipherSuite.TLS_CT_DSS_SIGN};    certificateRequest=new CertificateRequest(requestedClientCertTypes,accepted);    send(certificateRequest);  }  serverHelloDone=new ServerHelloDone();  send(serverHelloDone);  status=NEED_UNWRAP;}  }
class C{  private void readFromProperties(final Properties props,final boolean defaultMinimized,final int defaultX,final int defaultY,final boolean defaultVisible){  minimized=Boolean.parseBoolean(props.getProperty("window." + name + ".minimized",Boolean.toString(defaultMinimized)));  visible=Boolean.parseBoolean(props.getProperty("window." + name + ".visible",Boolean.toString(defaultVisible)));  x=Integer.parseInt(props.getProperty("window." + name + ".x",Integer.toString(defaultX)));  y=Integer.parseInt(props.getProperty("window." + name + ".y",Integer.toString(defaultY)));}  }
class C{  public boolean isCallComposerSupported(){  return readBoolean(RcsSettingsData.CAPABILITY_CALL_COMPOSER);}  }
class C{  public static List<URI> returnVplexSrdfTargets(DbClient dbClient,List<URI> vplexVolumeURIs){  List<URI> returnedVolumes=new ArrayList<URI>();  for (  URI vplexURI : vplexVolumeURIs) {    Volume vplexVolume=dbClient.queryObject(Volume.class,vplexURI);    if (vplexVolume == null) {      continue;    }    Volume srdfVolume=getSrdfVolumeFromVplexVolume(dbClient,vplexVolume);    if (srdfVolume != null && !NullColumnValueGetter.isNullNamedURI(srdfVolume.getSrdfParent())) {      returnedVolumes.add(vplexVolume.getId());    }  }  return returnedVolumes;}  }
class C{  @Override public void write(byte[] buffer,int offset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (currentEntry == null) {    throw new ZipException("No active entry");  }  if (currentEntry.getMethod() == STORED) {    out.write(buffer,offset,byteCount);  } else {    super.write(buffer,offset,byteCount);  }  crc.update(buffer,offset,byteCount);}  }
class C{  @Deprecated public static @CheckForNull JavaClassAndMethod findConcreteMethod(JavaClass javaClass,String methodName,String methodSig){  if (DEBUG_METHOD_LOOKUP) {    System.out.println("Check " + javaClass.getClassName());  }  Method[] methodList=javaClass.getMethods();  for (  Method method : methodList) {    if (method.getName().equals(methodName) && method.getSignature().equals(methodSig) && accessFlagsAreConcrete(method.getAccessFlags())) {      JavaClassAndMethod m=new JavaClassAndMethod(javaClass,method);      return m;    }  }  if (DEBUG_METHOD_LOOKUP) {    System.out.println("\t==> NOT FOUND");  }  return null;}  }
class C{  public boolean rowDeleted() throws SQLException {  throw SQLError.createSQLFeatureNotSupportedException();}  }
class C{  public Generator(String propFile){  try {    BufferedInputStream bi=null;    try {      bi=new BufferedInputStream(new FileInputStream(propFile));      props.load(bi);    }  finally {      if (bi != null) {        bi.close();      }    }  } catch (  Exception e) {    setDefaultProps();  }}  }
class C{  public void openFile(JDBCSequentialFile file) throws SQLException {  int fileId=fileExists(file);  if (fileId < 0) {    createFile(file);  } else {    file.setId(fileId);    loadFile(file);  }}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  SGraphPackage theSGraphPackage=(SGraphPackage)EPackage.Registry.INSTANCE.getEPackage(SGraphPackage.eNS_URI);  BasePackage theBasePackage=(BasePackage)EPackage.Registry.INSTANCE.getEPackage(BasePackage.eNS_URI);  TypesPackage theTypesPackage=(TypesPackage)EPackage.Registry.INSTANCE.getEPackage(TypesPackage.eNS_URI);  ExpressionsPackage theExpressionsPackage=(ExpressionsPackage)EPackage.Registry.INSTANCE.getEPackage(ExpressionsPackage.eNS_URI);  statechartRootEClass.getESuperTypes().add(this.getDefRoot());  stateRootEClass.getESuperTypes().add(this.getDefRoot());  transitionRootEClass.getESuperTypes().add(this.getDefRoot());  statechartSpecificationEClass.getESuperTypes().add(theSGraphPackage.getScopedElement());  statechartScopeEClass.getESuperTypes().add(theSGraphPackage.getScope());  interfaceScopeEClass.getESuperTypes().add(this.getStatechartScope());  interfaceScopeEClass.getESuperTypes().add(theBasePackage.getNamedElement());  internalScopeEClass.getESuperTypes().add(this.getStatechartScope());  importScopeEClass.getESuperTypes().add(this.getStatechartScope());  eventDefinitionEClass.getESuperTypes().add(theTypesPackage.getEvent());  variableDefinitionEClass.getESuperTypes().add(theTypesPackage.getProperty());  operationDefinitionEClass.getESuperTypes().add(theTypesPackage.getOperation());  typeAliasDefinitionEClass.getESuperTypes().add(theTypesPackage.getTypeAlias());  typeAliasDefinitionEClass.getESuperTypes().add(theTypesPackage.getDeclaration());  localReactionEClass.getESuperTypes().add(theSGraphPackage.getReaction());  transitionReactionEClass.getESuperTypes().add(theSGraphPackage.getReaction());  entryPointSpecEClass.getESuperTypes().add(theSGraphPackage.getReactionProperty());  exitPointSpecEClass.getESuperTypes().add(theSGraphPackage.getReactionProperty());  regularEventSpecEClass.getESuperTypes().add(this.getEventSpec());  timeEventSpecEClass.getESuperTypes().add(this.getEventSpec());  builtinEventSpecEClass.getESuperTypes().add(this.getEventSpec());  entryEventEClass.getESuperTypes().add(this.getBuiltinEventSpec());  exitEventEClass.getESuperTypes().add(this.getBuiltinEventSpec());  alwaysEventEClass.getESuperTypes().add(this.getBuiltinEventSpec());  simpleScopeEClass.getESuperTypes().add(theSGraphPackage.getScope());  reactionTriggerEClass.getESuperTypes().add(theSGraphPackage.getTrigger());  defaultTriggerEClass.getESuperTypes().add(theSGraphPackage.getTrigger());  reactionEffectEClass.getESuperTypes().add(theSGraphPackage.getEffect());  eventRaisingExpressionEClass.getESuperTypes().add(theExpressionsPackage.getExpression());  eventValueReferenceExpressionEClass.getESuperTypes().add(theExpressionsPackage.getExpression());  activeStateReferenceExpressionEClass.getESuperTypes().add(theExpressionsPackage.getExpression());  initEClass(rootEClass,Root.class,"Root",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getRoot_Roots(),this.getDefRoot(),null,"roots",null,0,-1,Root.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(defRootEClass,DefRoot.class,"DefRoot",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(statechartRootEClass,StatechartRoot.class,"StatechartRoot",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getStatechartRoot_Def(),this.getStatechartSpecification(),null,"def",null,0,1,StatechartRoot.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(stateRootEClass,StateRoot.class,"StateRoot",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getStateRoot_Def(),this.getStateSpecification(),null,"def",null,0,1,StateRoot.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(transitionRootEClass,TransitionRoot.class,"TransitionRoot",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTransitionRoot_Def(),this.getTransitionSpecification(),null,"def",null,0,1,TransitionRoot.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(statechartSpecificationEClass,StatechartSpecification.class,"StatechartSpecification",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(stateSpecificationEClass,StateSpecification.class,"StateSpecification",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getStateSpecification_Scope(),theSGraphPackage.getScope(),null,"scope",null,0,1,StateSpecification.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(transitionSpecificationEClass,TransitionSpecification.class,"TransitionSpecification",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTransitionSpecification_Reaction(),this.getTransitionReaction(),null,"reaction",null,0,1,TransitionSpecification.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(statechartScopeEClass,StatechartScope.class,"StatechartScope",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(interfaceScopeEClass,InterfaceScope.class,"InterfaceScope",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(internalScopeEClass,InternalScope.class,"InternalScope",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(importScopeEClass,ImportScope.class,"ImportScope",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getImportScope_Imports(),theTypesPackage.getPackage(),null,"imports",null,0,-1,ImportScope.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(eventDefinitionEClass,EventDefinition.class,"EventDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(variableDefinitionEClass,VariableDefinition.class,"VariableDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getVariableDefinition_InitialValue(),theExpressionsPackage.getExpression(),null,"initialValue",null,0,1,VariableDefinition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(operationDefinitionEClass,OperationDefinition.class,"OperationDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(typeAliasDefinitionEClass,TypeAliasDefinition.class,"TypeAliasDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(localReactionEClass,LocalReaction.class,"LocalReaction",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(transitionReactionEClass,TransitionReaction.class,"TransitionReaction",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(guardEClass,Guard.class,"Guard",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getGuard_Expression(),theExpressionsPackage.getExpression(),null,"expression",null,0,1,Guard.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(entryPointSpecEClass,EntryPointSpec.class,"EntryPointSpec",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getEntryPointSpec_Entrypoint(),ecorePackage.getEString(),"entrypoint",null,0,1,EntryPointSpec.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(exitPointSpecEClass,ExitPointSpec.class,"ExitPointSpec",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getExitPointSpec_Exitpoint(),ecorePackage.getEString(),"exitpoint",null,0,1,ExitPointSpec.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(eventSpecEClass,EventSpec.class,"EventSpec",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(regularEventSpecEClass,RegularEventSpec.class,"RegularEventSpec",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getRegularEventSpec_Event(),theExpressionsPackage.getExpression(),null,"event",null,0,1,RegularEventSpec.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(timeEventSpecEClass,TimeEventSpec.class,"TimeEventSpec",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTimeEventSpec_Type(),this.getTimeEventType(),"type",null,0,1,TimeEventSpec.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTimeEventSpec_Value(),theExpressionsPackage.getExpression(),null,"value",null,0,1,TimeEventSpec.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTimeEventSpec_Unit(),this.getTimeUnit(),"unit",null,0,1,TimeEventSpec.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(builtinEventSpecEClass,BuiltinEventSpec.class,"BuiltinEventSpec",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(entryEventEClass,EntryEvent.class,"EntryEvent",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(exitEventEClass,ExitEvent.class,"ExitEvent",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(alwaysEventEClass,AlwaysEvent.class,"AlwaysEvent",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(simpleScopeEClass,SimpleScope.class,"SimpleScope",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(reactionTriggerEClass,ReactionTrigger.class,"ReactionTrigger",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getReactionTrigger_Triggers(),this.getEventSpec(),null,"triggers",null,0,-1,ReactionTrigger.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getReactionTrigger_Guard(),this.getGuard(),null,"guard",null,0,1,ReactionTrigger.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(defaultTriggerEClass,DefaultTrigger.class,"DefaultTrigger",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(reactionEffectEClass,ReactionEffect.class,"ReactionEffect",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getReactionEffect_Actions(),theExpressionsPackage.getExpression(),null,"actions",null,0,-1,ReactionEffect.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(eventRaisingExpressionEClass,EventRaisingExpression.class,"EventRaisingExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEventRaisingExpression_Event(),theExpressionsPackage.getExpression(),null,"event",null,0,1,EventRaisingExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getEventRaisingExpression_Value(),theExpressionsPackage.getExpression(),null,"value",null,0,1,EventRaisingExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(eventValueReferenceExpressionEClass,EventValueReferenceExpression.class,"EventValueReferenceExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEventValueReferenceExpression_Value(),theExpressionsPackage.getExpression(),null,"value",null,0,1,EventValueReferenceExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(activeStateReferenceExpressionEClass,ActiveStateReferenceExpression.class,"ActiveStateReferenceExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getActiveStateReferenceExpression_Value(),theSGraphPackage.getState(),null,"value",null,0,1,ActiveStateReferenceExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEEnum(timeEventTypeEEnum,TimeEventType.class,"TimeEventType");  addEEnumLiteral(timeEventTypeEEnum,TimeEventType.AFTER);  addEEnumLiteral(timeEventTypeEEnum,TimeEventType.EVERY);  initEEnum(timeUnitEEnum,TimeUnit.class,"TimeUnit");  addEEnumLiteral(timeUnitEEnum,TimeUnit.SECOND);  addEEnumLiteral(timeUnitEEnum,TimeUnit.MILLISECOND);  addEEnumLiteral(timeUnitEEnum,TimeUnit.MICROSECOND);  addEEnumLiteral(timeUnitEEnum,TimeUnit.NANOSECOND);  createResource(eNS_URI);}  }
class C{  public static int[] toIntArray(String str){  return toIntArray(str,true);}  }
class C{  public void add(Change change){  if (change != null) {    Assert.isTrue(change.getParent() == null);    fChanges.add(change);    change.setParent(this);  }}  }
class C{  synchronized byte[] cipherData(final byte[] content,final int off,final int len) throws BadCiphertextException {  final int cipherOutLen=cipher_.getOutputSize(len);  final byte[] cipherOut=new byte[cipherOutLen];  try {    final int processedSize=cipher_.update(content,off,len,cipherOut,0);    cipher_.doFinal(cipherOut,processedSize);  } catch (  final GeneralSecurityException e) {    throw new BadCiphertextException(e);  }  return cipherOut;}  }
class C{  public void postSerializationInit(){  super.postSerializationInit();  initTreeMap();  Iterator<Double> i=imageMap.keySet().iterator();  while (i.hasNext()) {    Double key=i.next();    imageMap.get(key).initializeImages();  }}  }
class C{  @Benchmark public void unlimitedConcurrentMap(){  run();}  }
class C{  private void beginMyTurn(){  clientgui.setDisplayVisible(true);  selectEntity(clientgui.getClient().getFirstDeployableEntityNum());  setNextEnabled(true);  setRemoveEnabled(true);  clientgui.bv.markDeploymentHexesFor(ce());}  }
class C{  DccManager(PircBot bot){  _bot=bot;}  }
class C{  public GeoPoint bisection(final GeoPoint pt1,final GeoPoint pt2){  final double A0=(pt1.x + pt2.x) * 0.5;  final double B0=(pt1.y + pt2.y) * 0.5;  final double C0=(pt1.z + pt2.z) * 0.5;  final double denom=inverseAbSquared * A0 * A0 + inverseAbSquared * B0 * B0 + inverseCSquared * C0 * C0;  if (denom < Vector.MINIMUM_RESOLUTION) {    return null;  }  final double t=Math.sqrt(1.0 / denom);  return new GeoPoint(t * A0,t * B0,t * C0);}  }
class C{  @Override protected boolean mustDrawLabel(){  double labelScale=this.getActiveAttributes().getLabelScale() != null ? this.getActiveAttributes().getLabelScale() : PointPlacemarkAttributes.DEFAULT_LABEL_SCALE;  double imageScale=this.getActiveAttributes().getScale() != null ? this.getActiveAttributes().getScale() : PointPlacemarkAttributes.DEFAULT_IMAGE_SCALE;  return this.isHighlighted() || labelScale >= this.getLabelScaleThreshold() || imageScale == 0;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public static List<StreetDistance> transformToStreetDistance(String aliasList[],List<?> resultList){  List<StreetDistance> transformList=new ArrayList<StreetDistance>();  if (aliasList != null && !resultList.isEmpty()) {    AliasToBeanResultTransformer tr=new AliasToBeanResultTransformer(StreetDistance.class);    Iterator<?> it=resultList.iterator();    Object[] obj;    while (it.hasNext()) {      obj=(Object[])it.next();      StreetDistance streetDistance=(StreetDistance)tr.transformTuple(obj,aliasList);      streetDistance.updateFields();      transformList.add(streetDistance);    }  }  return transformList;}  }
class C{  private void logStorageStatistics(){  log.info("Status of the Write Channel Manager's executor service: " + writingChannelManager.getExecutorServiceStatus());  log.info("Status of each writable storage and its executor service:");  Map<StorageData,String> writersStatusMap=storageManager.getWritersStatus();  if (!writersStatusMap.isEmpty()) {    for (    Map.Entry<StorageData,String> entry : writersStatusMap.entrySet()) {      log.info("Storage " + entry.getKey() + " - "+ entry.getValue());    }  } else {    log.info("No active writable storage available.");  }  if (storageManager.getRecordingState() == RecordingState.ON) {    StorageData recordingStorageData=storageManager.getRecordingStorage();    if (null != recordingStorageData) {      log.info("Recording is active on the storage " + recordingStorageData + ".");    }  } else {    log.info("Recording is not active.");  }  log.info("Byte buffer provider has " + byteBufferProvider.getBufferPoolSize() + " available buffers in the pool with total capacity of "+ byteBufferProvider.getAvailableCapacity()+ " bytes. Total created capacity of the pool is "+ byteBufferProvider.getCreatedCapacity()+ " bytes.");}  }
class C{  int readCorner1(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public static void addWatch(Address watchAddress){  watches.add(watchAddress);}  }
class C{  public NbtTagList(String name,int size){  super(name);  this.tagList=new ArrayList<>(size);}  }
class C{  public void update(final Memory mem,final ArrayOfItemsSerDe<T> serDe){  if (mem == null) {    return;  }  ReservoirItemsSketch<T> ris=ReservoirItemsSketch.getInstance(mem,serDe);  final int maxK=ReservoirSize.decodeValue(encodedMaxK_);  ris=(ris.getK() <= maxK ? ris : ris.downsampledCopy(encodedMaxK_));  if (gadget_ == null) {    gadget_=ris;  } else {    twoWayMergeInternal(ris,true);  }}  }
class C{  @Override public int[] executeBatch() throws SQLException {  try {    debugCodeCall("executeBatch");    checkClosedForWrite();    try {      if (batchCommands == null) {        batchCommands=New.arrayList();      }      int size=batchCommands.size();      int[] result=new int[size];      boolean error=false;      SQLException next=null;      for (int i=0; i < size; i++) {        String sql=batchCommands.get(i);        try {          result[i]=executeUpdateInternal(sql);        } catch (        Exception re) {          SQLException e=logAndConvert(re);          if (next == null) {            next=e;          } else {            e.setNextException(next);            next=e;          }          result[i]=Statement.EXECUTE_FAILED;          error=true;        }      }      batchCommands=null;      if (error) {        throw new JdbcBatchUpdateException(next,result);      }      return result;    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public ImageWriteParam(Locale locale){  this.locale=locale;}  }
class C{  public void removeAllRenderers(){  mRenderers.clear();}  }
class C{  public JSONTest(String name){  super(name);}  }
class C{  protected AbstractMatrix1D vPart(int index,int width){  checkRange(index,width);  this.zero+=this.stride * index;  this.size=width;  this.isNoView=false;  return this;}  }
class C{  public boolean containsChangesIn(ICompilationUnit cu){  return fMap.containsKey(cu);}  }
class C{  private synchronized long createEntry(File temp,String tag,int flags) throws IOException {  long t=System.currentTimeMillis();  SortedSet<EntryFile> tail=mAllFiles.contents.tailSet(new EntryFile(t + 10000));  EntryFile[] future=null;  if (!tail.isEmpty()) {    future=tail.toArray(new EntryFile[tail.size()]);    tail.clear();  }  if (!mAllFiles.contents.isEmpty()) {    t=Math.max(t,mAllFiles.contents.last().timestampMillis + 1);  }  if (future != null) {    for (    EntryFile late : future) {      mAllFiles.blocks-=late.blocks;      FileList tagFiles=mFilesByTag.get(late.tag);      if (tagFiles != null && tagFiles.contents.remove(late)) {        tagFiles.blocks-=late.blocks;      }      if ((late.flags & DropBoxManager.IS_EMPTY) == 0) {        enrollEntry(new EntryFile(late.file,mDropBoxDir,late.tag,t++,late.flags,mBlockSize));      } else {        enrollEntry(new EntryFile(mDropBoxDir,late.tag,t++));      }    }  }  if (temp == null) {    enrollEntry(new EntryFile(mDropBoxDir,tag,t));  } else {    enrollEntry(new EntryFile(temp,mDropBoxDir,tag,t,flags,mBlockSize));  }  return t;}  }
class C{  @Override public void zoomRangeAxes(double lowerPercent,double upperPercent,PlotRenderingInfo info,Point2D source){  CategoryPlot subplot=findSubplot(info,source);  if (subplot != null) {    subplot.zoomRangeAxes(lowerPercent,upperPercent,info,source);  } else {    Iterator iterator=getSubplots().iterator();    while (iterator.hasNext()) {      subplot=(CategoryPlot)iterator.next();      subplot.zoomRangeAxes(lowerPercent,upperPercent,info,source);    }  }}  }
class C{  public static Integer checkCode(KeyID key,int valueCode){  if (key == KeyID.GeogAngularUnits) {    for (int i=0; i < angularUnitsCode.length; ++i) {      if (valueCode == angularUnitsCode[i]) {        return (new Integer(valueCode));      }    }    System.out.println("Angular units code " + valueCode + " not supported.");    return (null);  } else   if (key == KeyID.GeogLinearUnits) {    for (int i=0; i < linearUnitsCode.length; ++i) {      if (valueCode == linearUnitsCode[i]) {        return (new Integer(valueCode));      }    }    System.out.println("Linear units code " + valueCode + " not supported.");    return (null);  } else   if (key == KeyID.ModelType) {    for (int i=0; i < modelTypeCode.length; ++i) {      if (valueCode == modelTypeCode[i]) {        return (new Integer(valueCode));      }    }    System.out.println("Mode type code " + valueCode + " not supported.");    return (null);  } else   if (key == KeyID.RasterType) {    for (int i=0; i < rasterTypeCode.length; ++i) {      if (valueCode == rasterTypeCode[i]) {        return (new Integer(valueCode));      }    }    System.out.println("Raster type code " + valueCode + " not supported.");    return (null);  } else   if (key == KeyID.ProjLinearUnits) {    for (int i=0; i < linearUnitsCode.length; ++i) {      if (valueCode == linearUnitsCode[i]) {        return (new Integer(valueCode));      }    }    System.out.println("Projected linear units code " + valueCode + " not supported.");    return (null);  } else   if (key == KeyID.ProjCoordTrans) {    for (int i=0; i < coordinateTransformCode.length; ++i) {      if (valueCode == coordinateTransformCode[i]) {        if (valueCode == Code_UserDefined) {        }        return (new Integer(valueCode));      }    }    System.out.println("Projected coordinate transform code " + valueCode + " not supported.");    return (null);  } else   if (key == KeyID.GeographicType) {    if (valueCode == Code_Datum_WGS84) {      valueCode=Code_GCS_WGS_84;    }    for (int i=0; i < geographicTypeCode.length; ++i) {      if (valueCode == geographicTypeCode[i]) {        return (new Integer(valueCode));      }    }    System.out.println("Geographic CS type code " + valueCode + " not supported.");    return (null);  } else   if ((valueCode > -1) && (valueCode < 65536))   return (new Integer(valueCode));  return (null);}  }
class C{  public ProtocolSession buildProtocolSession(String fileName) throws Exception {  ProtocolSession session=new ProtocolSession();  addTestFile(fileName,session);  return session;}  }
class C{  public static long generate(long hash,int key){  final long m=0xc6a4a7935bd1e995L;  final int r=47;  int length=4;  hash^=length * m;  hash^=Integer.reverseBytes(key);  hash*=m;  hash^=hash >>> r;  hash*=m;  hash^=hash >>> r;  return hash;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  protected static Agent createAgent(int rtpPort,boolean isTrickling) throws Throwable {  return createAgent(rtpPort,isTrickling,null);}  }
class C{  public void testAccessAndModificationTimeUpwardsPropagation() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR),paths(FILE,FILE2));  T2<Long,Long> timesDir0=checkParentListingTime(igfsSecondaryFileSystem,DIR);  T2<Long,Long> timesSubDir0=checkParentListingTime(igfsSecondaryFileSystem,SUBDIR);  T2<Long,Long> timesFile0=checkParentListingTime(igfsSecondaryFileSystem,FILE);  T2<Long,Long> timesFile20=checkParentListingTime(igfsSecondaryFileSystem,FILE2);  Thread.sleep(500L);  T2<Long,Long> timesDir1=checkParentListingTime(igfs.asSecondary(),DIR);  T2<Long,Long> timesSubDir1=checkParentListingTime(igfs.asSecondary(),SUBDIR);  T2<Long,Long> timesFile1=checkParentListingTime(igfs.asSecondary(),FILE);  T2<Long,Long> timesFile21=checkParentListingTime(igfs.asSecondary(),FILE2);  assertEquals(timesDir0,timesDir1);  assertEquals(timesSubDir0,timesSubDir1);  assertEquals(timesFile0,timesFile1);  assertEquals(timesFile20,timesFile21);}  }
class C{  private NetUtils(){}  }
class C{  public static List<MultiLabelClassifier> classifiers(List<EvaluationStatistics> stats,boolean sort){  List<MultiLabelClassifier> result;  List<String> cmdlines;  result=new ArrayList<>();  cmdlines=commandLines(stats,sort);  for (  String cmdline : cmdlines) {    try {      result.add(OptionUtils.fromCommandLine(MultiLabelClassifier.class,cmdline));    } catch (    Exception e) {      System.err.println("Failed to instantiate command-line: " + cmdline);      e.printStackTrace();    }  }  return result;}  }
class C{  private void processThreadAction(ThreadAction action){synchronized (vm.state()) {    Iterator<WeakReference<ThreadListener>> iter=listeners.iterator();    while (iter.hasNext()) {      WeakReference<ThreadListener> ref=iter.next();      ThreadListener listener=ref.get();      if (listener != null) {switch (action.id()) {case ThreadAction.THREAD_RESUMABLE:          if (!listener.threadResumable(action)) {            iter.remove();          }        break;    }  } else {    iter.remove();  }}resetLocalCache();}}  }
class C{  public DTEDAdmin(String dtedDir,double ullat,double ullon,double lrlat,double lrlon,int level,boolean inside,int equal){  setFrameList(dtedDir,ullat,ullon,lrlat,lrlon,level,inside,equal);}  }
class C{  public void startParse(InputSource source) throws SAXException {  if (fNoMoreEvents)   throw new SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_INCRSAXSRCFILTER_NOT_RESTARTABLE,null));  if (fXMLReader == null)   throw new SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_XMLRDR_NOT_BEFORE_STARTPARSE,null));  fXMLReaderInputSource=source;  ThreadControllerWrapper.runThread(this,-1);}  }
class C{  private static synchronized void initTrueRandom(long adjustedTimestamp){  _rand_m=971;  _rand_ia=11113;  _rand_ib=104322;  _rand_irand=4181;  int seed=(int)(adjustedTimestamp >>> 48) ^ (int)(adjustedTimestamp >>> 32) ^ (int)(adjustedTimestamp >>> 16)^ (int)(adjustedTimestamp & 0x000000000000FFFF);  _rand_irand=_rand_irand + seed + _osProcessId;}  }
class C{  public static int indexOf(byte[] array,byte value,int startIndex,int endIndex){  for (int i=startIndex; i < endIndex; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  public static byte[] randomBytes(int size){  byte[] bytes=new byte[size];  seededRandom.nextBytes(bytes);  return bytes;}  }
class C{  public void removeConsistencyGroupSnapshot(String consistencyGroupId) throws Exception {  String systemId=getSystemId();  String uri=ScaleIOConstants.getRemoveConsistencyGroupSnapshotsURI(systemId);  ScaleIORemoveConsistencyGroupSnapshots parm=new ScaleIORemoveConsistencyGroupSnapshots();  parm.setSnapGroupId(consistencyGroupId);  post(URI.create(uri),getJsonForEntity(parm));}  }
class C{  public SQLiteDatabaseConfiguration(String path,int openFlags){  if (path == null) {    throw new IllegalArgumentException("path must not be null.");  }  this.path=path;  label=stripPathForLogs(path);  this.openFlags=openFlags;  maxSqlCacheSize=25;  locale=Locale.getDefault();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void chooseReceiverType(String className,Object receiver,String methDesc,Method staticMethod){  if (nullReferenceViolation(receiver,null)) {    throw new IllegalArgumentException("we are post null-deref check");  }  final Class<?> staticReceiver=env.ensurePrepared(className);  if (Modifier.isFinal(staticReceiver.getModifiers()))   return;  final int methodModifiers=staticMethod.getModifiers();  if (Modifier.isNative(methodModifiers) && Modifier.isFinal(methodModifiers))   return;}  }
class C{  public BadPaddingException(){  super();}  }
class C{  private void totalVisitantes(){  lbTotalVisitantes.setText("" + ControleDAO.getBanco().getVisitanteDAO().total());}  }
class C{  protected double computeRipleRadius(){  double width2=((Region)control).getLayoutBounds().getWidth() * ((Region)control).getLayoutBounds().getWidth();  double height2=((Region)control).getLayoutBounds().getHeight() * ((Region)control).getLayoutBounds().getHeight();  double radius=Math.min(Math.sqrt(width2 + height2),RIPPLE_MAX_RADIUS) * 1.1 + 5;  return radius;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static boolean nextBitSet(int entry,int[] gcMap){  return (gcMap[entry] & NEXT_BIT) == NEXT_BIT;}  }
class C{  public boolean release(boolean majorGC){  boolean didDefrag=defrag.inDefrag();  if (majorGC) {    if (lineMarkState == MAX_LINE_MARK_STATE)     lineMarkState=RESET_LINE_MARK_STATE;    lineUnavailState=lineMarkState;  }  chunkMap.reset();  defrag.globalRelease();  inCollection=false;  if (allocBlockCursor.isZero())   allocBlockCursor=chunkMap.getHeadChunk();  allocBlockSentinel=allocBlockCursor;  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(isRecycleAllocChunkAligned(allocBlockSentinel));  exhaustedReusableSpace=allocBlockCursor.isZero();  if (VM.VERIFY_ASSERTIONS && Options.verbose.getValue() >= 9) {    Log.write("gr[allocBlockCursor: ");    Log.write(allocBlockCursor);    Log.write(" allocBlockSentinel: ");    Log.write(allocBlockSentinel);    Log.writeln("]");  }  reusableMarkStateThreshold=(short)(Options.lineReuseRatio.getValue() * MAX_BLOCK_MARK_STATE);  Defrag.defragReusableMarkStateThreshold=(short)(Options.defragLineReuseRatio.getValue() * MAX_BLOCK_MARK_STATE);  linesConsumed=0;  return didDefrag;}  }
class C{  public ObjectName[] manageCacheServers() throws AdminException, MalformedObjectNameException {  try {    SystemMemberCacheServer[] bridges=getCacheServers();    ObjectName[] names=new ObjectName[bridges.length];    for (int i=0; i < bridges.length; i++) {      SystemMemberBridgeServerJmxImpl bridge=(SystemMemberBridgeServerJmxImpl)bridges[i];      names[i]=ObjectName.getInstance(bridge.getMBeanName());    }    return names;  } catch (  AdminException e) {    MBeanUtil.logStackTrace(Level.WARN,e);    throw e;  }catch (  RuntimeException e) {    MBeanUtil.logStackTrace(Level.WARN,e);    throw e;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error e) {    SystemFailure.checkFailure();    MBeanUtil.logStackTrace(Level.ERROR,e);    throw e;  }}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public void removeListener(CacheListener<K,V> listener){  listeners.remove(listener);}  }
class C{  public RTText convertTo(RTFormat destFormat,RTMediaFactory<RTImage,RTAudio,RTVideo> mediaFactory){  if (destFormat == mRTFormat) {    return this;  }  throw new UnsupportedOperationException("Can't convert from " + mRTFormat.getClass().getSimpleName() + " to "+ destFormat.getClass().getSimpleName());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void reverse(float[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  float tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  @SuppressWarnings("unchecked") protected IgniteInternalFuture<T> future(int idx){  assert Thread.holdsLock(sync);  assert futs != null && idx >= 0 && idx < futuresCount();  if (futs instanceof IgniteInternalFuture) {    assert idx == 0;    return (IgniteInternalFuture<T>)futs;  } else   return ((List<IgniteInternalFuture>)futs).get(idx);}  }
class C{  void jbInit() throws Exception {  panel.setLayout(panelLayout);  southPanel.setLayout(southLayout);  mainPanel.setLayout(gridBagLayout);  panelLayout.setHgap(5);  panelLayout.setVgap(10);  getContentPane().add(panel);  panel.add(mainPanel,BorderLayout.CENTER);  panel.add(southPanel,BorderLayout.SOUTH);  southPanel.add(confirmPanel,BorderLayout.NORTH);  bUrl.setMargin(ConfirmPanel.s_insets);  bUrl.setIcon(Env.getImageIcon("Online10.gif"));  confirmPanel.addComponent(bUrl);  confirmPanel.addActionListener(this);  fCityAutoCompleter=new CityAutoCompleter(fCity,m_WindowNo);}  }
class C{  public String open(){  Shell shell=new Shell(getParent(),getStyle());  shell.setText(getText());  createContents(shell);  shell.pack();  SWTUtils.center(shell);  shell.open();  Display display=getParent().getDisplay();  while (!shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }  return input;}  }
class C{  public void updateWorldData(float time){  super.updateGeometricState(time);  super.updateWorldTransform(false);  direction.set(0,0,-1);  ReadOnlyMatrix3 rotMat=_worldTransform.getMatrix();  rotMat.applyPost(direction,direction);  direction.normalizeLocal();  location.set(_worldTransform.getTranslation());  if (light != null) {    light.setDirection(direction);  }}  }
class C{  protected static boolean isUserDefinedProperty(String propName){  return !standardPropNames.contains(propName);}  }
class C{  public static String binaryToInternal(String clazz){  if (clazz.indexOf('/') >= 0 || clazz.indexOf('[') >= 0) {    throw new IllegalArgumentException(String.format(Locale.ENGLISH,"'%s' is not a valid binary class name.",clazz));  }  return clazz.replace('.','/');}  }
class C{  public TransportException(final int i){  if (Cfg.DEBUG) {    Check.log(TAG + " TransportException: " + i);  }}  }
class C{  public void advance(){  pos+=2;}  }
class C{  void checkCompilationOK(boolean ok){  if (!ok)   error("compilation failed");}  }
class C{  public long estimatedSizeInBytes(){  return sizeInBytes;}  }
class C{  public void moveQueenTo(XYLocation l){  for (int i=0; i < size; i++)   squares[l.getXCoOrdinate()][i]=0;  squares[l.getXCoOrdinate()][l.getYCoOrdinate()]=1;}  }
class C{  public static String plus(CharSequence left,Object value){  return left + DefaultGroovyMethods.toString(value);}  }
class C{  public Boolean isArpRedirectEnabled(){  return arpRedirectEnabled;}  }
class C{  public boolean isAnnotationPresent(Class<? extends Annotation> annTypeTest){  for (  Class<?> annType : _annTypes) {    if (annType.equals(annTypeTest)) {      return true;    }  }  return false;}  }
class C{  public Binh2(){  super(2,2,2);}  }
class C{  private boolean nextTo(final Player player,final PassiveEntity entity){  if (!player.nextTo(entity)) {    player.sendPrivateText("You must be next to something you wish to move.");  }  return player.nextTo(entity);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.010 -0400",hash_original_method="EB7BB1C25F5D1946BE8A4B7766DB032F",hash_generated_method="4794EFD0AA9A0858083368DCD03E3B6D") public E poll(long timeout,TimeUnit unit) throws InterruptedException {  long nanos=unit.toNanos(timeout);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    for (; ; ) {      E first=q.peek();      if (first == null) {        if (nanos <= 0)         return null; else         nanos=available.awaitNanos(nanos);      } else {        long delay=first.getDelay(NANOSECONDS);        if (delay <= 0)         return q.poll();        if (nanos <= 0)         return null;        first=null;        if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            long timeLeft=available.awaitNanos(delay);            nanos-=delay - timeLeft;          }  finally {            if (leader == thisThread)             leader=null;          }        }      }    }  }  finally {    if (leader == null && q.peek() != null)     available.signal();    lock.unlock();  }}  }
class C{  public PacketOutputStream writeString(final String str){  final byte[] strBytes;  try {    strBytes=str.getBytes("UTF-8");    return writeByteArray(strBytes);  } catch (  UnsupportedEncodingException u) {    return this;  }}  }
class C{  public double[] distributionForInstance(Instance inst) throws Exception {  double[] probs=new double[inst.numClasses()];  Instance newInst;  double sum=0;  for (int i=0; i < inst.numClasses(); i++) {    m_ClassFilters[i].input(inst);    m_ClassFilters[i].batchFinished();    newInst=m_ClassFilters[i].output();    probs[i]=m_Classifiers[i].classifyInstance(newInst);    if (Utils.isMissingValue(probs[i])) {      throw new UnassignedClassException("ClassificationViaRegression: base learner predicted missing value.");    }    if (probs[i] > 1) {      probs[i]=1;    }    if (probs[i] < 0) {      probs[i]=0;    }    sum+=probs[i];  }  if (sum != 0) {    Utils.normalize(probs,sum);  }  return probs;}  }
class C{  public static void deletePage(final IdocFrame ui){  FileVO ele=(FileVO)ui.getFileVO();  ImageVO imageVO=(ImageVO)ele.getListImage().get(ele.getImageSelectIndex());  ele.getListImage().remove(ele.getImageSelectIndex());  ele.setImageSelectIndex(0);  delete(imageVO.getImage());}  }
class C{  public int start_production(){  return 1;}  }
class C{  public static void resolveFunctions(final Window parent,final IDatabase database,final INaviModule module){  final CResolveFunctionDialog dlg=new CResolveFunctionDialog(parent,database,module);  GuiHelper.centerChildToParent(parent,dlg,true);  dlg.setVisible(true);}  }
class C{  public static Integer[] transformIntArray(int[] source){  Integer[] destin=new Integer[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public BranchGroupPortrayal3D(BranchGroup scene,Transform3D transform,Appearance a){  setTransform(null,transform);  traverseForAttributes(scene);  group=scene;  appearance=a;}  }
class C{  public void addAll(List<Usage> usages){  appUsages=usages;  notifyBinderDataSetChanged();}  }
class C{  private void unlock0(int fromIdx){  for (int i=fromIdx; i >= 0; i--)   locks[i].writeLock().unlock();}  }
class C{  public MonitorStructureException(){  super();}  }
class C{  public static Node toRawNode(Node node){  if (node instanceof XMLStruct)   return ((XMLStruct)node).toNode();  return node;}  }
class C{  public static boolean isJavaOK(boolean isClient){  String jVersion=System.getProperty("java.version");  if (jVersion.startsWith("1.7.0"))   return true;  if (jVersion.startsWith("1.8.0"))   return true;  boolean ok=false;  StringBuffer msg=new StringBuffer();  msg.append(System.getProperty("java.vm.name")).append(" - ").append(jVersion);  if (ok)   msg.append("(untested)");  msg.append(" <> 1.7.0 , 1.8.0");  if (isClient)   JOptionPane.showMessageDialog(null,msg.toString(),org.compiere.Adempiere.getName() + " - Java Version Check",ok ? JOptionPane.WARNING_MESSAGE : JOptionPane.ERROR_MESSAGE); else   log.severe(msg.toString());  return ok;}  }
class C{  public synchronized void connect() throws Exception {  connect(false);}  }
class C{  public DocumentRetrievalTask(String url,KMLRoot context,String featureRef,long timeout){  this.docUrl=url;  this.context=context;  this.featureRef=featureRef;  this.timeout=timeout;}  }
class C{  public void testSimple() throws Exception {  String cursorMark;  SolrParams params=null;  final String intsort="int" + (random().nextBoolean() ? "" : "_dv");  final String intmissingsort=intsort;  cursorMark=CURSOR_MARK_START;  params=params("q","*:*","rows","4","fl","id","sort","id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==0","/response/start==0","/response/docs==[]");  assertEquals(CURSOR_MARK_START,cursorMark);  assertU(adoc("id","9","str","c","float","-3.2","int","42"));  assertU(adoc("id","7","str","c","float","-3.2","int","-1976"));  assertU(adoc("id","2","str","c","float","-3.2","int","666"));  assertU(adoc("id","0","str","b","float","64.5","int","-42"));  assertU(adoc("id","5","str","b","float","64.5","int","2001"));  assertU(adoc("id","8","str","b","float","64.5","int","4055"));  assertU(adoc("id","6","str","a","float","64.5","int","7"));  assertU(adoc("id","1","str","a","float","64.5","int","7"));  assertU(adoc("id","4","str","a","float","11.1","int","6"));  assertU(adoc("id","3","str","a","float","11.1"));  assertU(commit());  cursorMark=CURSOR_MARK_START;  params=params("q","id:9999999","rows","4","fl","id","sort","id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==0","/response/start==0","/response/docs==[]");  assertEquals(CURSOR_MARK_START,cursorMark);  cursorMark=CURSOR_MARK_START;  params=params("q","*:*","rows","0","fl","id","sort","id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[]");  assertEquals(CURSOR_MARK_START,cursorMark);  cursorMark=CURSOR_MARK_START;  params=params("q","-int:6","rows","4","fl","id","sort","id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==9","/response/start==0","/response/docs==[{'id':9},{'id':8},{'id':7},{'id':6}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==9","/response/start==0","/response/docs==[{'id':5},{'id':3},{'id':2},{'id':1}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==9","/response/start==0","/response/docs==[{'id':0}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==9","/response/start==0","/response/docs==[]"));  cursorMark=CURSOR_MARK_START;  params=params("q","float:[0 TO *] int:7 id:6","rows","4","fl","id","facet","true","facet.field","str","json.nl","map","sort","score desc, id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==7","/response/start==0","/response/docs==[{'id':6},{'id':1},{'id':8},{'id':5}]","/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==7","/response/start==0","/response/docs==[{'id':4},{'id':3},{'id':0}]","/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==7","/response/start==0","/response/docs==[]","/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}"));  cursorMark=CURSOR_MARK_START;  params=params("q","-int:2001 -int:4055","rows","3","fl","id","facet","true","facet.field","str","json.nl","map","sort",intsort + " asc, id asc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':7},{'id':0},{'id':3}]","/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':4},{'id':1},{'id':6}]","/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':9},{'id':2}]","/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[]","/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}"));  cursorMark=CURSOR_MARK_START;  params=params("q","-int:2001 -int:4055","rows","3","fl","id","json.nl","map","sort",intmissingsort + "_first asc, id asc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':3},{'id':7},{'id':0}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':4},{'id':1},{'id':6}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':9},{'id':2}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[]"));  cursorMark=CURSOR_MARK_START;  params=params("q","-int:2001 -int:4055","rows","3","fl","id","json.nl","map","sort",intmissingsort + "_last asc, id asc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':7},{'id':0},{'id':4}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':1},{'id':6},{'id':9}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':2},{'id':3}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[]"));  cursorMark=CURSOR_MARK_START;  params=params("q","*:*","rows","6","fl","id","sort","str asc, id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':6},{'id':4},{'id':3},{'id':1},{'id':8},{'id':5}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':0},{'id':9},{'id':7},{'id':2}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[]"));  cursorMark=CURSOR_MARK_START;  params=params("q","*:*","rows","2","fl","id","sort","float asc, " + intsort + " desc, id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':2},{'id':9}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':7},{'id':4}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':3},{'id':8}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':5},{'id':6}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':1},{'id':0}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[]"));  cursorMark=CURSOR_MARK_START;  params=params("q","id:3 id:7","rows","111","fl","id","sort",intsort + " asc, id asc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==2","/response/start==0","/response/docs==[{'id':7},{'id':3}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==2","/response/start==0","/response/docs==[]"));  SentinelIntSet ids;  ids=assertFullWalkNoDups(10,params("q","*:*","rows","4","sort","id desc"));  assertEquals(10,ids.size());  ids=assertFullWalkNoDups(9,params("q","*:*","rows","1","fq","-id:4","sort","id asc"));  assertEquals(9,ids.size());  assertFalse("matched on id:4 unexpectedly",ids.exists(4));  ids=assertFullWalkNoDups(9,params("q","*:*","rows","3","fq","-id:6","sort","float desc, id asc, " + intsort + " asc"));  assertEquals(9,ids.size());  assertFalse("matched on id:6 unexpectedly",ids.exists(6));  ids=assertFullWalkNoDups(9,params("q","float:[0 TO *] int:7 id:6","rows","3","sort","score desc, id desc"));  assertEquals(7,ids.size());  assertFalse("matched on id:9 unexpectedly",ids.exists(9));  assertFalse("matched on id:7 unexpectedly",ids.exists(7));  assertFalse("matched on id:2 unexpectedly",ids.exists(2));  cursorMark=CURSOR_MARK_START;  params=params("q","*:*","rows","2","fl","id","sort","str asc, id asc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':1},{'id':3}]");  assertU(delI("3"));  assertU(commit());  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==9","/response/start==0","/response/docs==[{'id':4},{'id':6}]");  assertU(delI("0"));  assertU(commit());  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':5},{'id':8}]");  assertU(adoc("id","5","str","c"));  assertU(commit());  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':2},{'id':5}]");  assertU(adoc("id","7","str","a"));  assertU(commit());  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':9}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[]"));}  }
class C{  public void update(SimulationThread simulationThread){  if (simulationThread.isCanceled()) {    frame.setStatus("Task canceled.");    isPrepared=false;  } else   if (frame.simulationPaused()) {    frame.setStatus("Task paused.");  } else {    frame.setStatus("Task completed.");  }}  }
class C{  public static BedReader openBedReader(RegionRestriction region,File f,int minAnnotations) throws IOException {  final boolean stdin=CommonFlags.isStdio(f);  final BedReader bedr;  if (region != null) {    if (stdin) {      throw new IOException("Cannot apply region restriction when reading from stdin");    }    bedr=new BedReader(new TabixLineReader(f,TabixIndexer.indexFileName(f),region),f,minAnnotations);  } else {    bedr=new BedReader(new BufferedReader(new InputStreamReader(stdin ? System.in : FileUtils.createInputStream(f,true))),minAnnotations);  }  return bedr;}  }
class C{  public String sql_deleteByCondition(String vendorName,String catalogName,String schemaName,String tableName,String condition){  return sql_delete(vendorName,catalogName,schemaName,tableName,condition,null);}  }
class C{  public Pair(final S first,final T second){  this.first=first;  this.second=second;}  }
class C{  public T caseIsA_(IsA_ object){  return null;}  }
class C{  private static PatternsInfo loadPatterns(String filePath,String kind){  PatternsInfo patternsInfo=new PatternsInfo();  if (!filePath.toLowerCase().contains(kind)) {    patternsInfo.html.append("ERROR: invalid configuration file-name: '', (file-name should contain '").append(kind).append("') !!!");    return patternsInfo;  }  File file=new File(filePath);  if (!file.exists()) {    patternsInfo.html.append("File ").append(filePath).append(" does not exist.");    return patternsInfo;  } else   if (!file.canRead()) {    patternsInfo.html.append("ERROR: Can't read existing file: ").append(filePath);    return patternsInfo;  }  Scanner scan=null;  try {    scan=new Scanner(file);  } catch (  FileNotFoundException exc) {  }  int version=(-1);  if (!scan.hasNextLine()) {    patternsInfo.html.append("ERROR: configuration file: ").append(filePath).append(" is empty");    return patternsInfo;  }  String firstLine=scan.nextLine();  try {    version=Integer.parseInt(firstLine);    if (version <= 0)     throw new NumberFormatException();    patternsInfo.version=version;    patternsInfo.html.append("Loaded ").append(kind).append("-patterns configuration-file: ").append(filePath).append(":<br/>");    patternsInfo.html.append(firstLine).append("<br/>");  } catch (  NumberFormatException exc) {    patternsInfo.html.append("ERROR: first line in confuguration file: ").append(filePath).append(" is not a positive integer");    return patternsInfo;  }  ArrayList<String> patterns=new ArrayList<String>();  while (scan.hasNextLine()) {    boolean isReject=false;    String text=scan.nextLine().toLowerCase();    text=text.replace("http://","//");    text=text.replace("https://","//");    if (text.startsWith("!")) {      isReject=true;      patterns.add(REJECT);      text=text.substring(1);    } else {      patterns.add(ACCEPT);    }    if (text.equals("*")) {      patterns.add(ALL);      patterns.add(null);      patterns.add(null);    } else     if (!text.contains("*")) {      patterns.add(EQUALS);      patterns.add(text);      patterns.add(null);    } else {      int firstAsterix=text.indexOf('*');      int secondAsterix=text.indexOf('*',firstAsterix + 1);      if (firstAsterix > 0)       patterns.add(text.substring(0,firstAsterix)); else       patterns.add(null);      if (firstAsterix + 1 < secondAsterix)       patterns.add(text.substring(firstAsterix + 1,secondAsterix)); else       patterns.add(null);      int maxAsterix=Math.max(firstAsterix,secondAsterix);      if (maxAsterix < text.length() - 1)       patterns.add(text.substring(maxAsterix + 1)); else       patterns.add(null);    }    patternsInfo.html.append(isReject ? "!" : "").append(text).append("<br/>");  }  scan.close();  patternsInfo.patterns=patterns.toArray(new String[patterns.size()]);  return patternsInfo;}  }
class C{  private Object queryCommandValue(final String commandIdentifier){  Check.notNull(commandIdentifier,"command");  final StringBuffer cmd=new StringBuffer();  cmd.append("return editor.queryCommandValue(\"");  cmd.append(commandIdentifier);  cmd.append("\") || ''");  return browser.evaluate(cmd.toString());}  }
class C{  public void removeOldestThan(long timeStamp){  int spot=numberOfAssemblers - 1;  for (int i=0; i < numberOfAssemblers; i++) {    if (timeStamp <= assemblers[i].getTimeStamp()) {      spot=i;    }  }  for (int i=numberOfAssemblers - 1; i > spot; i--) {    assemblers[i - 1]=assemblers[i];  }  numberOfAssemblers-=spot + 1;}  }
class C{  public static Object featureToObject(Feature f,Annotation a){  Object ret=null;switch (f.getRange().getName()) {case CAS.TYPE_NAME_STRING:    ret=StringToObject.convertStringToObject(a.getStringValue(f));  break;case CAS.TYPE_NAME_INTEGER:ret=a.getIntValue(f);break;case CAS.TYPE_NAME_FLOAT:ret=a.getFloatValue(f);break;case CAS.TYPE_NAME_BOOLEAN:ret=a.getBooleanValue(f);break;case CAS.TYPE_NAME_BYTE:ret=a.getByteValue(f);break;case CAS.TYPE_NAME_SHORT:ret=a.getShortValue(f);break;case CAS.TYPE_NAME_LONG:ret=a.getLongValue(f);break;case CAS.TYPE_NAME_DOUBLE:ret=a.getDoubleValue(f);break;default :ret=null;}return ret;}  }
class C{  public static String readFileToString(File file){  if (null == file) {    return "";  }  FileInputStream fileInput=null;  StringBuffer strBuf=new StringBuffer();  try {    fileInput=new FileInputStream(file);    byte[] buf=new byte[BUF_SIZE];    while (fileInput.read(buf) != -1) {      strBuf.append(new String(buf));      buf=new byte[BUF_SIZE];    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  SecurityException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    if (fileInput != null) {      try {        fileInput.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  }  return strBuf.toString();}  }
class C{  @SuppressWarnings("unchecked") private void computeRegisterMap(IR ir){  registerMap=new ArrayList[ir.regpool.getNumberOfSymbolicRegisters()];  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {    BasicBlock bb=e.nextElement();    for (Enumeration<LiveIntervalElement> i=liveIntervals.enumerateLiveIntervals(bb); i.hasMoreElements(); ) {      LiveIntervalElement lie=i.nextElement();      lie.setBasicBlock(bb);      if (lie.getRegister().isSymbolic()) {        addToRegisterMap(lie.getRegister(),lie);      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String docTypeName;  String nodeValue;  NamedNodeMap attributes;  doc=(Document)load("hc_staff",false);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);  }  if ((docType != null)) {    docTypeName=docType.getName();    if (("image/svg+xml".equals(getContentType()))) {      assertEquals("nodeNameSVG","svg",docTypeName);    } else {      assertEquals("nodeName","html",docTypeName);    }    nodeValue=docType.getNodeValue();    assertNull("nodeValue",nodeValue);    attributes=docType.getAttributes();    assertNull("attributes",attributes);  }}  }
class C{  public static Action proxy(final Action action){  return (Action)java.lang.reflect.Proxy.newProxyInstance(action.getClass().getClassLoader(),new Class<?>[]{Action.class},new CActionProxy(action));}  }
class C{  public void addColumn(String name,int sqlType,String sqlTypeName,int precision,int scale){  if (rows != null && rows.size() > 0) {    throw new IllegalStateException("Cannot add a column after adding rows");  }  if (name == null) {    name="C" + (columns.size() + 1);  }  Column column=new Column();  column.name=name;  column.sqlType=sqlType;  column.precision=precision;  column.scale=scale;  column.sqlTypeName=sqlTypeName;  columns.add(column);}  }
class C{  public void append(String text){  m_textArea.append(text);}  }
class C{  void removeAll(final boolean mark){  if (mark) {    AbstractInsnNode insn=first;    while (insn != null) {      AbstractInsnNode next=insn.next;      insn.index=-1;      insn.prev=null;      insn.next=null;      insn=next;    }  }  size=0;  first=null;  last=null;  cache=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.333 -0500",hash_original_method="1F784E81F2EDB796AFED78AD0553EEBB",hash_generated_method="CF2B33FE12DFFCA467EB4D8132098B98") public final static boolean is12Key(char c){  return (c >= '0' && c <= '9') || c == '*' || c == '#';}  }
class C{  public boolean isLeaveUserUndefined(){  return fieldLeaveUserUndefined;}  }
class C{  public MessageSaver(MessageFactory messageFactory,File saveDir) throws FileNotFoundException {  this(messageFactory,saveDir,OwnHomeData,VisitedHomeData,EnemyHomeData,WarHomeData,HomeBattleReplayData);}  }
class C{  @Scheduled(initialDelayString="${batch.greeting.initialdelay}",fixedRateString="${batch.greeting.fixedrate}") public void fixedRateJobWithInitialDelay(){  logger.info("> fixedRateJobWithInitialDelay");  long pause=5000;  long start=System.currentTimeMillis();  do {    if (start + pause < System.currentTimeMillis()) {      break;    }  } while (true);  logger.info("Processing time was {} seconds.",pause / 1000);  logger.info("< fixedRateJobWithInitialDelay");}  }
class C{  public void start(final CTutorial tutorial){  Preconditions.checkNotNull(tutorial,"IE01296: Tutorial argument can not be null");  tutorial.addListener(m_listener);  tutorial.start();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.FUNCTION_BLOCK_ATTRIBUTE_SOURCE__ATTRIBUTE:    setAttribute((ModelAttribute)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean isInArea(Coord coord,Coord SW,Coord NE){  return (getCompassQuarter(SW,coord) == 1 && getCompassQuarter(NE,coord) == 3);}  }
class C{  public boolean checkPersonality(String personality){  if (NullColumnValueGetter.isNotNullValue(this.getPersonality()) && this.getPersonality().equalsIgnoreCase(personality)) {    return true;  }  return false;}  }
class C{  public CompletableFuture<T> exceptAsync(Consumer<Throwable> consumer){  return whenCompleteAsync(null);}  }
class C{  public void authorizeComplete() throws TwitterException {  AccessToken token=getConnection().getOAuthAccessToken();  setToken(token.getToken());  setTokenSecret(token.getTokenSecret());}  }
class C{  @SuppressWarnings("unused") @Test public void testSiblingRegionEntryOnTargetState(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    Region r=_createRegion("r",sc);{      Entry r_entry=_createEntry(EntryKind.INITIAL,null,r);      State s1=_createState("s1",r);{        Region r2=_createRegion("r2",s1);{          Entry r2_entry=_createEntry(EntryKind.INITIAL,null,r2);          State s2=_createState("s2",r2);          _createTransition(r2_entry,s2);        }        Region r3=_createRegion("r3",s1);{          Entry r3_entry=_createEntry(EntryKind.INITIAL,null,r3);          State s3=_createState("s3",r3);          _createTransition(r3_entry,s3);        }        Region r4=_createRegion("r4",s1);{          Entry r4_entry=_createEntry(EntryKind.INITIAL,null,r4);          State s4=_createState("s4",r4);          _createTransition(r4_entry,s4);        }      }      _createTransition(r_entry,s1);      State s5=_createState("s5",r);      _createTransition(s5,findState(sc,"s3"));    }  }  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s2=flow.getStates().get(1);  assertEquals("sc.r.s1.r2.s2",_s2.getName());  ExecutionState _s3=flow.getStates().get(2);  assertEquals("sc.r.s1.r3.s3",_s3.getName());  ExecutionState _s4=flow.getStates().get(3);  assertEquals("sc.r.s1.r4.s4",_s4.getName());  ExecutionState _s5=flow.getStates().get(4);  assertEquals("sc.r.s5",_s5.getName());  Reaction _t=_s5.getReactions().get(0);  assertTrue(_t.isTransition());  Sequence _effect=(Sequence)_t.getEffect();  assertEquals("wrong sequence: " + stepListAsString(_effect),4,_effect.getSteps().size());  assertCall(_effect,0,_s5.getExitSequence());  assertCall(_effect,1,_s2.getSuperScope().getEnterSequences().get(0));  assertCall(_s2.getSuperScope().getEnterSequences().get(0),0,flow.getNodes().get(1).getReactSequence());  assertCall(_effect,2,_s3.getEnterSequences().get(0));  assertCall(_effect,3,_s4.getSuperScope().getEnterSequences().get(0));  assertCall(_s4.getSuperScope().getEnterSequences().get(0),0,flow.getNodes().get(3).getReactSequence());}  }
class C{  @Override public Assignments<E> split(AbstractMTree<O,N,E,?> tree,N node){  final int n=node.getNumEntries();  int pos1=random.nextInt(n);  int pos2=random.nextInt(n - 1);  if (pos2 >= pos1) {    ++pos2;  }  DBID id1=node.getEntry(pos1).getRoutingObjectID();  DBID id2=node.getEntry(pos2).getRoutingObjectID();  return balancedPartition(tree,node,id1,id2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.083 -0400",hash_original_method="510E55A569E5F58C0254A27CAD05D1AE",hash_generated_method="4EFE0B36F792513ED2C5DD72288AD049") public boolean isComplete(){  if ((m_state == STATE_VALID_SERVER_RESPONSE) || (m_state == STATE_INVALID_SERVER_RESPONSE) || (m_state == STATE_DISPOSED))   return true; else   return false;}  }
class C{  public KernelDistance(KernelTrick kf){  this.kf=kf;}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  public static PDF417DetectorResult detect(BinaryBitmap image,Map<DecodeHintType,?> hints,boolean multiple) throws NotFoundException {  BitMatrix bitMatrix=image.getBlackMatrix();  List<ResultPoint[]> barcodeCoordinates=detect(multiple,bitMatrix);  if (barcodeCoordinates.isEmpty()) {    bitMatrix=bitMatrix.clone();    bitMatrix.rotate180();    barcodeCoordinates=detect(multiple,bitMatrix);  }  return new PDF417DetectorResult(bitMatrix,barcodeCoordinates);}  }
class C{  public BetweenExpression(Expression datapoint,Expression lower,Expression higher){  this(datapoint,lower,higher,true,true,false);}  }
class C{  @Override public boolean isTimeIncluded(long timeInMillis){  if ((getBaseCalendar() != null) && (getBaseCalendar().isTimeIncluded(timeInMillis) == false)) {    return false;  }  long startOfDayInMillis=getStartOfDayJavaCalendar(timeInMillis).getTime().getTime();  long endOfDayInMillis=getEndOfDayJavaCalendar(timeInMillis).getTime().getTime();  long timeRangeStartingTimeInMillis=getTimeRangeStartingTimeInMillis(timeInMillis);  long timeRangeEndingTimeInMillis=getTimeRangeEndingTimeInMillis(timeInMillis);  if (!invertTimeRange) {    return ((timeInMillis > startOfDayInMillis && timeInMillis < timeRangeStartingTimeInMillis) || (timeInMillis > timeRangeEndingTimeInMillis && timeInMillis < endOfDayInMillis));  } else {    return ((timeInMillis >= timeRangeStartingTimeInMillis) && (timeInMillis <= timeRangeEndingTimeInMillis));  }}  }
class C{  private boolean skipChecksForInternalRegion(CacheDistributionAdvisee rgn){  boolean skip=false;  if (rgn instanceof LocalRegion) {    LocalRegion lr=(LocalRegion)rgn;    skip=lr.isInternalRegion();  }  return skip;}  }
class C{  public Pid(){}  }
class C{  public double[][] computeLocal(int timeSeries[][]){  initialise();  addObservations(timeSeries);  return computeLocalFromPreviousObservations(timeSeries);}  }
class C{  public static int[] cs_maxtrans(Scs A,int seed){  int i, j, k, n, m, p, n2=0, m2=0, Ap[], jimatch[], w[], cheap[], js[], is[], ps[], Ai[], Cp[], jmatch[], imatch[], q[];  Scs C;  if (!Scs_util.CS_CSC(A))   return (null);  n=A.n;  m=A.m;  Ap=A.p;  Ai=A.i;  w=jimatch=new int[m + n];  for (k=0, j=0; j < n; j++) {    if (Ap[j] < Ap[j + 1])     n2++;    for (p=Ap[j]; p < Ap[j + 1]; p++) {      w[Ai[p]]=1;      if (j == Ai[p])       k++;    }  }  if (k == Math.min(m,n)) {    jmatch=jimatch;    imatch=jimatch;    int imatch_offset=m;    for (i=0; i < k; i++)     jmatch[i]=i;    for (; i < m; i++)     jmatch[i]=-1;    for (j=0; j < k; j++)     imatch[imatch_offset + j]=j;    for (; j < n; j++)     imatch[imatch_offset + j]=-1;    return jimatch;  }  for (i=0; i < m; i++)   m2+=w[i];  C=(m2 < n2) ? Scs_transpose.cs_transpose(A,false) : A;  if (C == null)   return null;  n=C.n;  m=C.m;  Cp=C.p;  jmatch=jimatch;  imatch=jimatch;  int jmatch_offset=0;  int imatch_offset=0;  if (m2 < n2) {    jmatch_offset=n;  } else {    imatch_offset=m;  }  w=new int[5 * n];  cheap=w;  int cheap_offset=n;  js=w;  int js_offset=2 * n;  is=w;  int is_offset=3 * n;  ps=w;  int ps_offset=4 * n;  for (j=0; j < n; j++)   cheap[cheap_offset + j]=Cp[j];  for (j=0; j < n; j++)   w[j]=-1;  for (i=0; i < m; i++)   jmatch[jmatch_offset + i]=-1;  q=Scs_randperm.cs_randperm(n,seed);  for (k=0; k < n; k++) {    cs_augment(q != null ? q[k] : k,C,jmatch,jmatch_offset,cheap,cheap_offset,w,0,js,js_offset,is,is_offset,ps,ps_offset);  }  q=null;  for (j=0; j < n; j++)   imatch[imatch_offset + j]=-1;  for (i=0; i < m; i++)   if (jmatch[jmatch_offset + i] >= 0)   imatch[imatch_offset + jmatch[jmatch_offset + i]]=i;  return jimatch;}  }
class C{  @PermitAll @POST public ResultEntity<Boolean> unsubscribe(@PathParam("clientId") String clientId,@Auth UserPrincipal user,@QueryParam("protocol") @DefaultValue("4") byte protocol,@QueryParam("packetId") @DefaultValue("0") int packetId,List<String> topics){  String userName=user.getName();  MqttVersion version=MqttVersion.fromProtocolLevel(protocol);  if (!this.validator.isClientIdValid(clientId)) {    logger.debug("Protocol violation: Client id {} not valid based on configuration",clientId);    throw new ValidateException(new ErrorEntity(ErrorCode.INVALID));  }  for (  String topic : topics) {    if (!this.validator.isTopicFilterValid(topic)) {      logger.debug("Protocol violation: Client {} un-subscription {} is not valid based on configuration",clientId,topic);      throw new ValidateException(new ErrorEntity(ErrorCode.INVALID));    }  }  logger.debug("Message received: Received UNSUBSCRIBE message from client {} user {} topics {}",clientId,userName,ArrayUtils.toString(topics));  topics.forEach(null);  Message<MqttPacketIdVariableHeader,MqttUnsubscribePayload> msg=new Message<>(new MqttFixedHeader(MqttMessageType.UNSUBSCRIBE,false,MqttQoS.AT_LEAST_ONCE,false,0),new MqttAdditionalHeader(version,clientId,userName,null),MqttPacketIdVariableHeader.from(packetId),new MqttUnsubscribePayload(topics));  this.cluster.sendToApplication(msg);  return new ResultEntity<>(true);}  }
class C{  public SimpleEdgePortrayal2D(Paint fromPaint,Paint toPaint,Paint labelPaint,Font labelFont){  this.fromPaint=fromPaint;  this.toPaint=toPaint;  this.labelPaint=labelPaint;  this.labelFont=labelFont;}  }
class C{  public static TextEdit format2(int kind,String source,int offset,int length,int indentationLevel,String lineSeparator,Map<String,String> options){  if (offset < 0 || length < 0 || offset + length > source.length()) {    throw new IllegalArgumentException("offset or length outside of string. offset: " + offset + ", length: "+ length+ ", string size: "+ source.length());  }  return ToolFactory.createCodeFormatter(options).format(kind,source,offset,length,indentationLevel,lineSeparator);}  }
class C{  public static void main(String[] args) throws IOException, GeneralSecurityException {  if (args.length != 1) {    System.err.println("Usage:");    System.err.printf("\tjava %s gs://<bucket_name>/<object_name>\n",DetectLandmark.class.getCanonicalName());    System.exit(1);  } else   if (!args[0].toLowerCase().startsWith("gs://")) {    System.err.println("Google Cloud Storage url must start with 'gs://'.");    System.exit(1);  }  DetectLandmark app=new DetectLandmark(getVisionService());  List<EntityAnnotation> landmarks=app.identifyLandmark(args[0],MAX_RESULTS);  System.out.printf("Found %d landmark%s\n",landmarks.size(),landmarks.size() == 1 ? "" : "s");  for (  EntityAnnotation annotation : landmarks) {    System.out.printf("\t%s\n",annotation.getDescription());  }}  }
class C{  public static void ensureNotError(ObjectMapper mapper,JsonNode resourceNode){  if (resourceNode != null && resourceNode.hasNonNull(JSONAPISpecConstants.ERRORS)) {    try {      throw new ResourceParseException(ErrorUtils.parseError(mapper,resourceNode,Errors.class));    } catch (    JsonProcessingException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public boolean isInclusive(){  return isInclusive;}  }
class C{  public static BigDecimal computePi(int digits){  int scale=digits + 5;  BigDecimal arctan1_5=arctan(5,scale);  BigDecimal arctan1_239=arctan(239,scale);  BigDecimal pi=arctan1_5.multiply(FOUR).subtract(arctan1_239).multiply(FOUR);  return pi.setScale(digits,BigDecimal.ROUND_HALF_UP);}  }
class C{  private void changeShip(ObservableValue<? extends ShortageShipItem> observable,ShortageShipItem oldValue,ShortageShipItem value){  if (value != null) {    Ship ship=value.shipProperty().get();    this.changeShip(ship);    this.ships.filtered(null).forEach(null);  }}  }
class C{  public FireworkEffectBuilder flicker(boolean flicker){  this.flicker=flicker;  return this;}  }
class C{  public static String updateNodeTooltip(final AbstractZyGraph<?,?> graph,final Node node){  Preconditions.checkNotNull(graph,"Graph argument can not be null");  Preconditions.checkNotNull(node,"Node argument can not be null");  if (isProximityNode(graph,node)) {    return TooltipGenerator.createTooltip(graph,node);  }  if (graph.getView() instanceof ZyGraph2DView) {    if (((ZyGraph2DView)graph.getView()).isNodeSloppyPaintMode()) {      return TooltipGenerator.createTooltip(graph,node);    }  }  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public INode randomize(int n){  INode prev=goal;  ArrayList<INode> visited=new ArrayList<INode>();  visited.add(goal);  while (n > 0) {    ArrayList<INode> nodes=new ArrayList<INode>();    ArrayList<INode> visitedNodes=new ArrayList<INode>();    for (Iterator<IMove> it=prev.validMoves().iterator(); it.hasNext(); ) {      INode copy=prev.copy();      IMove move=it.next();      move.execute(copy);      copy.storedData(new Transition(move,prev));      if (!visited.contains(copy)) {        nodes.add(copy);      } else {        visitedNodes.add(copy);      }    }    if (nodes.size() == 0) {      int rnd=(int)(Math.random() * visitedNodes.size());      prev=visitedNodes.get(rnd);    } else {      int rnd=(int)(Math.random() * nodes.size());      prev=nodes.get(rnd);    }    visited.add(prev);    n--;  }  return prev;}  }
class C{  public MMRoll(MMRandom rng){  super(6,1);  this.total=rng.randomInt(this.faces) + this.min;  all.addElement(this.total);}  }
class C{  private Region createRegion(String name,Compressor compressor){  return getCache().<String,String>createRegionFactory().setDataPolicy(DataPolicy.REPLICATE).setCloningEnabled(true).setCompressor(compressor).create(name);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  private boolean deliver(Mail mail,Session session){  try {    if (isDebug) {      log("Attempting to deliver " + mail.getName());    }    MimeMessage message=mail.getMessage();    Collection<MailAddress> recipients=mail.getRecipients();    InternetAddress addr[]=new InternetAddress[recipients.size()];    int j=0;    for (Iterator<MailAddress> i=recipients.iterator(); i.hasNext(); j++) {      MailAddress rcpt=i.next();      addr[j]=rcpt.toInternetAddress();    }    if (addr.length <= 0) {      log("No recipients specified... not sure how this could have happened.");      return true;    }    Iterator<HostAddress> targetServers;    if (gatewayServer == null) {      MailAddress rcpt=recipients.iterator().next();      String host=rcpt.getDomain();      try {        targetServers=new MXHostAddressIterator(dnsServer.findMXRecords(host).iterator(),dnsServer,false,logAdapter);      } catch (      TemporaryResolutionException e) {        log("Temporary problem looking up mail server for host: " + host);        String exceptionBuffer="Temporary problem looking up mail server for host: " + host + ".  I cannot determine where to send this message.";        return failMessage(mail,new MessagingException(exceptionBuffer),false);      }      if (!targetServers.hasNext()) {        log("No mail server found for: " + host);        String exceptionBuffer="There are no DNS entries for the hostname " + host + ".  I cannot determine where to send this message.";        int retry=0;        try {          retry=Integer.parseInt(mail.getErrorMessage());        } catch (        NumberFormatException e) {        }        if (retry == 0 || retry > dnsProblemRetry) {          return failMessage(mail,new MessagingException(exceptionBuffer),true);        } else {          return failMessage(mail,new MessagingException(exceptionBuffer),false);        }      }    } else {      targetServers=getGatewaySMTPHostAddresses(gatewayServer);    }    MessagingException lastError=null;    while (targetServers.hasNext()) {      try {        Properties props=session.getProperties();        if (mail.getSender() == null) {          props.put("mail.smtp.from","<>");        } else {          String sender=mail.getSender().toString();          props.put("mail.smtp.from",sender);        }        HostAddress outgoingMailServer=targetServers.next();        StringBuilder logMessageBuffer=new StringBuilder(256).append("Attempting delivery of ").append(mail.getName()).append(" to host ").append(outgoingMailServer.getHostName()).append(" at ").append(outgoingMailServer.getHost()).append(" from ").append(props.get("mail.smtp.from")).append(" for addresses ").append(Arrays.asList(addr));        log(logMessageBuffer.toString());        SMTPTransport transport=null;        try {          transport=(SMTPTransport)session.getTransport(outgoingMailServer);          transport.setLocalHost(props.getProperty("mail.smtp.localhost",heloName));          try {            if (authUser != null) {              transport.connect(outgoingMailServer.getHostName(),authUser,authPass);            } else {              transport.connect();            }          } catch (          MessagingException me) {            if (isDebug) {              log(me.getMessage(),me.getCause());            } else {              log(me.getMessage());            }            continue;          }          if (transport.getClass().getName().endsWith(".SMTPTransport")) {            boolean supports8bitmime=false;            try {              Method supportsExtension=transport.getClass().getMethod("supportsExtension",new Class[]{String.class});              supports8bitmime=(Boolean)supportsExtension.invoke(transport,"8BITMIME");            } catch (            NoSuchMethodException nsme) {            }catch (            IllegalAccessException iae) {            }catch (            IllegalArgumentException iae) {            }catch (            InvocationTargetException ite) {            }            if (!supports8bitmime) {              try {                convertTo7Bit(message);              } catch (              IOException e) {                log("Error during the conversion to 7 bit.",e);              }            }          } else {            try {              convertTo7Bit(message);            } catch (            IOException e) {              log("Error during the conversion to 7 bit.",e);            }          }          transport.sendMessage(message,addr);        }  finally {          if (transport != null) {            try {              transport.close();            } catch (            MessagingException e) {              log("Warning: could not close the SMTP transport after sending mail (" + mail.getName() + ") to "+ outgoingMailServer.getHostName()+ " at "+ outgoingMailServer.getHost()+ " for "+ mail.getRecipients()+ "; probably the server has already closed the "+ "connection. Message is considered to be delivered. Exception: "+ e.getMessage());            }            transport=null;          }        }        logMessageBuffer=new StringBuilder(256).append("Mail (").append(mail.getName()).append(") sent successfully to ").append(outgoingMailServer.getHostName()).append(" at ").append(outgoingMailServer.getHost()).append(" from ").append(props.get("mail.smtp.from")).append(" for ").append(mail.getRecipients());        log(logMessageBuffer.toString());        return true;      } catch (      SendFailedException sfe) {        logSendFailedException(sfe);        if (sfe.getValidSentAddresses() != null) {          Address[] validSent=sfe.getValidSentAddresses();          if (validSent.length > 0) {            String logMessageBuffer="Mail (" + mail.getName() + ") sent successfully for "+ Arrays.asList(validSent);            log(logMessageBuffer);          }        }        if (sfe.getClass().getName().endsWith(".SMTPSendFailedException")) {          try {            int returnCode=(Integer)invokeGetter(sfe,"getReturnCode");            if (returnCode >= 500 && returnCode <= 599)             throw sfe;          } catch (          ClassCastException cce) {          }catch (          IllegalArgumentException iae) {          }        }        if (sfe.getValidUnsentAddresses() != null && sfe.getValidUnsentAddresses().length > 0) {          if (isDebug)           log("Send failed, " + sfe.getValidUnsentAddresses().length + " valid addresses remain, continuing with any other servers");          lastError=sfe;        } else {          throw sfe;        }      }catch (      MessagingException me) {        String exceptionBuffer="Exception delivering message (" + mail.getName() + ") - "+ me.getMessage();        log(exceptionBuffer);        if ((me.getNextException() != null) && (me.getNextException() instanceof java.io.IOException)) {          lastError=me;          continue;        }        throw me;      }    }    if (lastError != null) {      throw lastError;    }  } catch (  SendFailedException sfe) {    logSendFailedException(sfe);    Collection<MailAddress> recipients=new ArrayList<MailAddress>(mail.getRecipients());    boolean deleteMessage=false;    try {      if (sfe.getClass().getName().endsWith(".SMTPSendFailedException")) {        int returnCode=(Integer)invokeGetter(sfe,"getReturnCode");        deleteMessage=(returnCode >= 500 && returnCode <= 599);      } else {        MessagingException me=sfe;        Exception ne;        while ((ne=me.getNextException()) != null && ne instanceof MessagingException) {          me=(MessagingException)ne;          if (me.getClass().getName().endsWith(".SMTPAddressFailedException")) {            int returnCode=(Integer)invokeGetter(me,"getReturnCode");            deleteMessage=(returnCode >= 500 && returnCode <= 599);          }        }      }    } catch (    IllegalStateException ise) {    }catch (    ClassCastException cce) {    }    if (isDebug)     log("Recipients: " + recipients);    if (sfe.getInvalidAddresses() != null) {      Address[] address=sfe.getInvalidAddresses();      if (address.length > 0) {        recipients.clear();        for (        Address addres : address) {          try {            recipients.add(new MailAddress(addres.toString()));          } catch (          ParseException pe) {            log("Can't parse invalid address: " + pe.getMessage());          }        }        mail.setRecipients(recipients);        if (isDebug)         log("Invalid recipients: " + recipients);        deleteMessage=failMessage(mail,sfe,true);      }    }    if (sfe.getValidUnsentAddresses() != null) {      Address[] address=sfe.getValidUnsentAddresses();      if (address.length > 0) {        recipients.clear();        for (        Address addres : address) {          try {            recipients.add(new MailAddress(addres.toString()));          } catch (          ParseException pe) {            log("Can't parse unsent address: " + pe.getMessage());          }        }        mail.setRecipients(recipients);        if (isDebug)         log("Unsent recipients: " + recipients);        if (sfe.getClass().getName().endsWith(".SMTPSendFailedException")) {          int returnCode=(Integer)invokeGetter(sfe,"getReturnCode");          deleteMessage=failMessage(mail,sfe,returnCode >= 500 && returnCode <= 599);        } else {          deleteMessage=failMessage(mail,sfe,false);        }      }    }    return deleteMessage;  }catch (  MessagingException ex) {    return failMessage(mail,ex,('5' == ex.getMessage().charAt(0)));  }catch (  Exception ex) {    log("Generic exception = permanent failure: " + ex.getMessage(),ex);    return failMessage(mail,ex,true);  }  return failMessage(mail,new MessagingException("No mail server(s) available at this time."),false);}  }
class C{  public SPOAssertionBuffer(AbstractTripleStore focusStore,AbstractTripleStore db,IElementFilter<ISPO> filter,int capacity,boolean justified){  this(focusStore,db,filter,capacity,justified,null);}  }
class C{  public static void sendBroadcast(Context mContext){  mContext.sendBroadcast(mSimpleLastFMIntent);}  }
class C{  protected static boolean isSingleElement(Object value){  return value instanceof Integer || value instanceof Double || value instanceof Byte|| value instanceof String;}  }
class C{  public Dcc4PcMessage(byte[] packet){  this((packet.length));  int i=0;  int j=0;  setBinary(true);  for (j=0; j < packet.length; j++) {    this.setElement(i,packet[i]);    i++;  }  setRetries(1);}  }
class C{  @Override public int size(){  return size;}  }
class C{  public void close() throws SQLException {}  }
class C{  public static ActiveMQConnectionFactory createConnectionFactoryWithHA(JMSFactoryType jmsFactoryType,final TransportConfiguration... initialServers){  ActiveMQConnectionFactory factory=null;  if (jmsFactoryType.equals(JMSFactoryType.CF)) {    factory=new ActiveMQJMSConnectionFactory(true,initialServers);  } else   if (jmsFactoryType.equals(JMSFactoryType.QUEUE_CF)) {    factory=new ActiveMQQueueConnectionFactory(true,initialServers);  } else   if (jmsFactoryType.equals(JMSFactoryType.TOPIC_CF)) {    factory=new ActiveMQTopicConnectionFactory(true,initialServers);  } else   if (jmsFactoryType.equals(JMSFactoryType.XA_CF)) {    factory=new ActiveMQXAConnectionFactory(true,initialServers);  } else   if (jmsFactoryType.equals(JMSFactoryType.QUEUE_XA_CF)) {    factory=new ActiveMQXAQueueConnectionFactory(true,initialServers);  } else   if (jmsFactoryType.equals(JMSFactoryType.TOPIC_XA_CF)) {    factory=new ActiveMQXATopicConnectionFactory(true,initialServers);  }  return factory;}  }
class C{  static <T>T checkNotNull(T object,String message){  if (object == null)   throw new NullPointerException(message);  return object;}  }
class C{  public void addValidator(Schema schema,ModeUsage modeUsage){  schemas.addElement(schema);  Validator validator=createValidator(schema);  validators.addElement(validator);  activeHandlers.addElement(validator.getContentHandler());  activeHandlersAttributeModeUsage.addElement(modeUsage);  attributeProcessing=Math.max(attributeProcessing,modeUsage.getAttributeProcessing());  childPrograms.addElement(new Program(modeUsage,validator.getContentHandler()));  if (modeUsage.isContextDependent())   contextDependent=true;}  }
class C{  private DatabaseExportUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  if (actions == null)   getActions();  s.defaultWriteObject();}  }
class C{  protected void computeLinks(Element e) throws BadLocationException {  int caretPos=getCaretPosition();  try {    if (isLink(e))     correctLink(e); else     createLink(e);  } catch (  IOException ex) {    ex.printStackTrace();  }  setCaretPosition(Math.min(caretPos,getLength()));}  }
class C{  void onActivityReady(Activity activity){  this.activity=activity;  PermissionStates permissionStates=null;synchronized (pendingPermissionsMutex) {    if (activity != null) {      permissionStates=getPermissionStates(pendingPermissions);    }  }  if (permissionStates != null) {    handleDeniedPermissions(permissionStates.getDeniedPermissions());    updatePermissionsAsGranted(permissionStates.getGrantedPermissions());  }}  }
class C{  public void move(Vector3 pos){switch (mode) {case Anchor:    break;case Current:  setCurrentPoint(pos);break;}}  }
class C{  @ObjectiveCName("changeGroupAvatarWithGid:withDescriptor:") public void changeGroupAvatar(int gid,String descriptor){  modules.getGroupsModule().changeAvatar(gid,descriptor);}  }
class C{  private static void disableSoftInputFromAppearing(EditText editText){  if (Build.VERSION.SDK_INT >= 11) {    editText.setRawInputType(InputType.TYPE_CLASS_TEXT);    editText.setTextIsSelectable(true);  } else {    editText.setRawInputType(InputType.TYPE_NULL);    editText.setFocusable(true);  }}  }
class C{  public CacheServerConfigImpl(GemFireVM vm){  super(vm);  String name=CACHE_XML_FILE;  this.cacheXMLFile=vm.getConfig().getAttribute(name);  this.classpath=null;}  }
class C{  @SuppressWarnings("unchecked") public final void testFactoryMethod(){  Constraint<Object> constraint1=new ConstraintImplementation(true);  Constraint<Object> constraint2=new ConstraintImplementation(true);  Constraint<Object>[] constraints=new Constraint[2];  constraints[0]=constraint1;  constraints[1]=constraint2;  DisjunctiveConstraint<Object> disjunctiveConstraint=DisjunctiveConstraint.create(constraints);  assertEquals(constraints,disjunctiveConstraint.getConstraints());}  }
class C{  private static OFActionSetVlanPcp decode_set_vlan_priority(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        VlanPcp prior=VlanPcp.of(get_byte(n.group(1)));        OFActionSetVlanPcp.Builder ab=OFFactories.getFactory(version).actions().buildSetVlanPcp();        ab.setVlanPcp(prior);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid VLAN priority in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  public static String encode(final Coordinate[] coords){  long lastLat=0;  long lastLng=0;  final StringBuffer result=new StringBuffer();  for (  final Coordinate point : coords) {    long lat=Math.round(point.y * 1e5);    long lng=Math.round(point.x * 1e5);    long dLat=lat - lastLat;    long dLng=lng - lastLng;    encode(dLat,result);    encode(dLng,result);    lastLat=lat;    lastLng=lng;  }  return result.toString();}  }
class C{  public static S2CellId fromToken(String token){  if (token == null) {    throw new NumberFormatException("Null string in S2CellId.fromToken");  }  if (token.length() == 0) {    throw new NumberFormatException("Empty string in S2CellId.fromToken");  }  if (token.length() > 16 || "X".equals(token)) {    return none();  }  long value=0;  for (int pos=0; pos < 16; pos++) {    int digit=0;    if (pos < token.length()) {      digit=Character.digit(token.charAt(pos),16);      if (digit == -1) {        throw new NumberFormatException(token);      }      if (overflowInParse(value,digit)) {        throw new NumberFormatException("Too large for unsigned long: " + token);      }    }    value=(value * 16) + digit;  }  return new S2CellId(value);}  }
class C{  private void buildSecuritySchemeSection(PathOperation operation,MarkupDocBuilder docBuilder){  List<Map<String,List<String>>> securitySchemes=operation.getOperation().getSecurity();  MarkupDocBuilder securityBuilder=copyMarkupDocBuilder();  applyPathsDocumentExtension(new Context(Position.OPERATION_SECURITY_BEGIN,securityBuilder,operation));  if (CollectionUtils.isNotEmpty(securitySchemes)) {    Map<String,SecuritySchemeDefinition> securityDefinitions=globalContext.getSwagger().getSecurityDefinitions();    List<List<String>> cells=new ArrayList<>();    ArrayList<MarkupTableColumn> cols=new ArrayList<>(Arrays.asList(new MarkupTableColumn(TYPE_COLUMN).withWidthRatio(3).withHeaderColumn(false).withMarkupSpecifiers(MarkupLanguage.ASCIIDOC,".^3"),new MarkupTableColumn(NAME_COLUMN).withWidthRatio(4).withHeaderColumn(false).withMarkupSpecifiers(MarkupLanguage.ASCIIDOC,".^4"),new MarkupTableColumn(SCOPES_COLUMN).withWidthRatio(13).withMarkupSpecifiers(MarkupLanguage.ASCIIDOC,".^13")));    ArrayList<Integer> unusedCols=new ArrayList<>(Arrays.asList(2,1,0));    for (    Map<String,List<String>> securityScheme : securitySchemes) {      for (      Map.Entry<String,List<String>> securityEntry : securityScheme.entrySet()) {        String securityKey=securityEntry.getKey();        String type=UNKNOWN;        if (securityDefinitions != null && securityDefinitions.containsKey(securityKey)) {          type=securityDefinitions.get(securityKey).getType();        }        ArrayList<String> content=new ArrayList<>(Arrays.asList(boldText(type),boldText(copyMarkupDocBuilder().crossReference(securityDocumentResolver(),securityKey,securityKey).toString()),Joiner.on(",").join(securityEntry.getValue())));        unusedCols.removeIf(null);        cells.add(content);      }    }    for (    int index : unusedCols) {      cols.remove(index);      for (      List cell : cells) {        cell.remove(index);      }    }    securityBuilder.tableWithColumnSpecs(cols,cells);  }  applyPathsDocumentExtension(new Context(Position.OPERATION_SECURITY_END,securityBuilder,operation));  String securityContent=securityBuilder.toString();  applyPathsDocumentExtension(new Context(Position.OPERATION_SECURITY_BEFORE,docBuilder,operation));  if (isNotBlank(securityContent)) {    buildSectionTitle(SECURITY,docBuilder);    docBuilder.text(securityContent);  }  applyPathsDocumentExtension(new Context(Position.OPERATION_SECURITY_AFTER,docBuilder,operation));}  }
class C{  public static boolean isAppEngineStandardRuntime(IRuntime facetRuntime){  Preconditions.checkNotNull(facetRuntime,"runtime is null");  org.eclipse.wst.server.core.IRuntime serverRuntime=FacetUtil.getRuntime(facetRuntime);  if (serverRuntime != null) {    IRuntimeType runtimeType=serverRuntime.getRuntimeType();    if (runtimeType == null) {      return false;    }    return DEFAULT_RUNTIME_ID.equals(runtimeType.getId());  } else {    return false;  }}  }
class C{  private static int blend_add_pin(int a,int b){  int f=(b & ALPHA_MASK) >>> 24;  return (low(((a & ALPHA_MASK) >>> 24) + f,0xff) << 24 | low(((a & RED_MASK) + ((b & RED_MASK) >> 8) * f),RED_MASK) & RED_MASK | low(((a & GREEN_MASK) + ((b & GREEN_MASK) >> 8) * f),GREEN_MASK) & GREEN_MASK | low((a & BLUE_MASK) + (((b & BLUE_MASK) * f) >> 8),BLUE_MASK));}  }
class C{  void reset(){  mSlideItem=null;  mScrollState=SLIDING_STATE_NONE;}  }
class C{  public static boolean isInputStreamGZIPCompressed(final PushbackInputStream inputStream) throws IOException {  if (inputStream == null)   return false;  byte[] signature=new byte[2];  int readStatus=inputStream.read(signature);  inputStream.unread(signature);  int streamHeader=((int)signature[0] & 0xff) | ((signature[1] << 8) & 0xff00);  return readStatus == 2 && GZIPInputStream.GZIP_MAGIC == streamHeader;}  }
class C{  static final int advanceProbe(int probe){  probe^=probe << 13;  probe^=probe >>> 17;  probe^=probe << 5;  UNSAFE.putInt(Thread.currentThread(),PROBE,probe);  return probe;}  }
class C{  public static void sampleSubtract(FixedBitSet vector,FixedBitSet subvector){  long numchanges=vector.length() / 2 - xorCount(vector,subvector);  java.util.Random random=new java.util.Random();  random.setSeed((long)23);  FixedBitSet commonGround=(FixedBitSet)vector.clone();  commonGround.xor(subvector);  int cnt=0;  if (numchanges > 0)   for (int x=0; cnt < numchanges; x++) {    if (x >= vector.length())     x=0;    double change=random.nextDouble();    if (!commonGround.get(x) && change > 0.5) {      vector.flip(x);      cnt++;    }  } else   if (numchanges < 0) {    for (int x=0; cnt > numchanges; x++) {      if (x >= vector.length())       x=0;      double change=random.nextDouble();      if (commonGround.get(x) && change > 0.5) {        vector.flip(x);        cnt--;      }    }  }}  }
class C{  public String toStringSummary(){  String result;  String titles;  int i;  int j;  String line;  if (m_NonSigWins == null)   return "-summary data not set-";  result="";  titles="";  for (i=0; i < getColCount(); i++) {    if (getColHidden(i))     continue;    if (!titles.equals(""))     titles+=",";    titles+=getSummaryTitle(i);  }  result+=titles + ",'(No. of datasets where [col] >> [row])'\n";  for (i=0; i < getColCount(); i++) {    if (getColHidden(i))     continue;    line="";    for (j=0; j < getColCount(); j++) {      if (getColHidden(j))       continue;      if (!line.equals(""))       line+=",";      if (j == i)       line+="-"; else       line+=m_NonSigWins[i][j] + " (" + m_Wins[i][j]+ ")";    }    result+=line + "," + getSummaryTitle(i)+ " = "+ removeFilterName(m_ColNames[i])+ '\n';  }  return result;}  }
class C{  public String encodedPassword(){  if (password.isEmpty())   return "";  int passwordStart=url.indexOf(':',scheme.length() + 3) + 1;  int passwordEnd=url.indexOf('@');  return url.substring(passwordStart,passwordEnd);}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  throw new RejectedExecutionException("Task " + r.toString() + " rejected from "+ e.toString());}  }
class C{  public static Dataflow.Builder newDataflowClient(DataflowPipelineOptions options){  String servicePath=options.getDataflowEndpoint();  ApiComponents components;  if (servicePath.contains("://")) {    components=apiComponentsFromUrl(servicePath);  } else {    components=new ApiComponents(options.getApiRootUrl(),servicePath);  }  return new Dataflow.Builder(getTransport(),getJsonFactory(),chainHttpRequestInitializer(options.getGcpCredential(),new RetryHttpRequestInitializer(ImmutableList.of(404)))).setApplicationName(options.getAppName()).setRootUrl(components.rootUrl).setServicePath(components.servicePath).setGoogleClientRequestInitializer(options.getGoogleApiTrace());}  }
class C{  public boolean isOpen(){  return isOpen;}  }
class C{  static public void dropUnisolatedIndex(final String name){  if (log.isInfoEnabled())   log.info("name=" + name);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private LabelRef(final LIR lir,final AbstractBlockBase<?> block,final int suxIndex){  this.lir=lir;  this.block=block;  this.suxIndex=suxIndex;}  }
class C{  public Replace(double probability){  super();  this.probability=probability;}  }
class C{  public boolean greaterThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.lessThanOrEqual(this);  return this.num() >= obj2.num();}  }
class C{  public static BatchStatus createSuccessStatus(){  BatchStatus retval=new BatchStatus();  retval.setCode(HttpURLConnection.HTTP_OK);  retval.setReason("Success");  return retval;}  }
class C{  static void createFileFromResource(String resource,Resource file,String password) throws IOException {  SystemOut.printDate(SystemUtil.getPrintWriter(SystemUtil.OUT),"write file:" + file);  file.delete();  InputStream is=InfoImpl.class.getResourceAsStream(resource);  if (is == null)   throw new IOException("file [" + resource + "] does not exist.");  file.createNewFile();  IOUtil.copy(is,file,true);}  }
class C{  public void add(Object element){  add(new Object[]{element});}  }
class C{  private CStaredItemFunctions(){}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.THROW_STATEMENT__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public XPathFilterParameterSpec(String xPath){  if (xPath == null) {    throw new NullPointerException();  }  this.xPath=xPath;  this.nsMap=Collections.emptyMap();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return DELETED;default :return null;}}  }
class C{  public boolean hasNext() throws IOException {  peek();  return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY;}  }
class C{  public static boolean isWifiConnected(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();  return networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI;}  }
class C{  public AnnotationMember(String name,Object val,Class type,Method m){  this(name,val);  definingMethod=m;  if (type == int.class) {    elementType=Integer.class;  } else   if (type == boolean.class) {    elementType=Boolean.class;  } else   if (type == char.class) {    elementType=Character.class;  } else   if (type == float.class) {    elementType=Float.class;  } else   if (type == double.class) {    elementType=Double.class;  } else   if (type == long.class) {    elementType=Long.class;  } else   if (type == short.class) {    elementType=Short.class;  } else   if (type == byte.class) {    elementType=Byte.class;  } else {    elementType=type;  }}  }
class C{  public static StringBuffer leftShift(String self,Object value){  return new StringBuffer(self).append(value);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Override public void endWindow(){  if (!highs.isEmpty()) {    for (    Map.Entry<K,V> e : highs.entrySet()) {      max.emit(new KeyValPair(e.getKey(),e.getValue()));    }    clearCache();  }}  }
class C{  public void cancel(RpcCancel rpcCancel){  int correlationId=rpcCancel.getCorrelationId();  if (callExecutor == null) {    return;  }  PendingServerCallState state=pendingServerCallMap.remove(correlationId);  if (state != null) {    callExecutor.cancel(state.getExecutor());    if (log.isDebugEnabled()) {      log.debug("Received [" + rpcCancel.getCorrelationId() + "]RpcCancel.");    }    doLog(state,rpcCancel,"Cancelled");  }}  }
class C{  public ResultContentEvent(long instanceIndex,Instance instance,int classId,double[] classVotes,boolean isLast){  if (instance != null) {    this.instance=new SerializableInstance(instance);  }  this.instanceIndex=instanceIndex;  this.classId=classId;  this.classVotes=classVotes;  this.isLast=isLast;}  }
class C{  public static Appendable format(int i,Appendable a) throws IOException {  if (a == null)   throw new IllegalArgumentException("Appendable Cannot Be Null");  if (a instanceof TextBuilder)   return ((TextBuilder)a).append(i);  TextBuilder tb=new TextBuilder();  tb.append(i);  return a.append(tb);}  }
class C{  @AfterMethod public void deleteDescriptor() throws IOException {  if (Files.exists(file.toPath())) {    Files.delete(file.toPath());  }}  }
class C{  public static OMPoly read(DataInputStream dis,LinkProperties propertiesBuffer) throws IOException {  OMPoly poly=null;  int numPoints;  int[] xpoints, ypoints;  int renderType=dis.readByte();switch (renderType) {case RENDERTYPE_LATLON:    int lineType=dis.readByte();  numPoints=dis.readInt();double[] llpoints=new double[numPoints];for (int i=0; i < numPoints; i++) {llpoints[i]=dis.readFloat();}int units=dis.readByte();int nsegs=dis.readInt();if (Debug.debugging("linkdetail")) {System.out.println("  Lat/Lon LinkPoly:");System.out.println("  linetype = " + lineType);System.out.println("  number of points = " + numPoints / 2);System.out.println("  units = " + units);System.out.println("  nsegs = " + nsegs);}poly=new OMPoly(llpoints,units,lineType,nsegs);break;case RENDERTYPE_XY:numPoints=dis.readInt();xpoints=new int[numPoints / 2];ypoints=new int[numPoints / 2];for (int i=0; i < numPoints / 2; i+=1) {xpoints[i]=dis.readInt();ypoints[i]=dis.readInt();}if (Debug.debugging("linkdetail")) {System.out.println("  X/Y LinkPoly:");System.out.println("  number of points = " + numPoints / 2);}poly=new OMPoly(xpoints,ypoints);break;case RENDERTYPE_OFFSET:float lat_1=dis.readFloat();float lon_1=dis.readFloat();numPoints=dis.readInt();xpoints=new int[numPoints / 2];ypoints=new int[numPoints / 2];for (int i=0; i < numPoints / 2; i+=1) {xpoints[i]=dis.readInt();ypoints[i]=dis.readInt();}int cMode=dis.readByte();if (Debug.debugging("linkdetail")) {System.out.println("  Offset LinkPoly:");System.out.println("  lat = " + lat_1);System.out.println("  lon = " + lon_1);System.out.println("  number of points = " + numPoints / 2);System.out.println("  cMode = " + cMode);}poly=new OMPoly(lat_1,lon_1,xpoints,ypoints,cMode);break;default :}if (poly != null) {LinkProperties.loadPropertiesIntoOMGraphic(dis,poly,propertiesBuffer);}return poly;}  }
class C{  public static final double[][] threshold(double P[][],Random r){  double X[][]=new double[P.length][P[0].length];  for (int i=0; i < P.length; i++) {    for (int j=0; j < P[i].length; j++) {      X[i][j]=(P[i][j] > r.nextDouble()) ? 1.0 : 0.0;    }  }  return X;}  }
class C{  public boolean isPublic(){  Object oo=get_Value(COLUMNNAME_IsPublic);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void readFile(String name) throws org.jdom2.JDOMException, java.io.IOException {  if (findFile(name) == null) {    log.debug("{} file could not be found",name);    return;  }  Element root=rootFromName(name);  if (root == null) {    log.debug("{} file could not be read",name);    return;  }  LocationManager.instance().load(root);  ScheduleManager.instance().load(root);  setDirty(false);  log.debug("Locations have been loaded!");}  }
class C{  public String classifierTipText(){  return "The classifier to use.";}  }
class C{  public String createDefaultTitle(final List<GitCommit> commits,final String sourceBranchName,final String targetBranchName){  if (commits == null || commits.isEmpty()) {    return StringUtils.EMPTY;  }  if (commits.size() == 1) {    final GitCommit commit=commits.get(0);    final String commitMessage=commit.getSubject();    final int titleLength=120;    if (commitMessage.length() < titleLength) {      return commitMessage;    } else {      final String shortCommitMessage=commitMessage.substring(0,titleLength);      return StringUtils.substringBeforeLast(shortCommitMessage,"\\s+");    }  }  return TfPluginBundle.message(TfPluginBundle.KEY_CREATE_PR_DEFAULT_TITLE,sourceBranchName,targetBranchName);}  }
class C{  public void putResponseGetResource(String resourceId,ByteBuffer object){  ResourceId rid=gson.fromJson(resourceId,ResourceId.class);  logger.debug("Response resource {} from RemoteInterpreter",rid.getName());  Object o=null;  try {    o=Resource.deserializeObject(object);  } catch (  IOException e) {    logger.error(e.getMessage(),e);  }catch (  ClassNotFoundException e) {    logger.error(e.getMessage(),e);  }synchronized (getResourceResponse) {    getResourceResponse.put(rid,o);    getResourceResponse.notifyAll();  }}  }
class C{  public boolean isSetSwPortTuple(){  return this.swPortTuple != null;}  }
class C{  public String createThickVolumes(String systemObjectId,String arrayGroupId,Long luCapacity,int noOfLus,String label,String formatType,String model,Integer devNum) throws Exception {  return hdsApiVolumeManager.createThickVolumes(systemObjectId,arrayGroupId,luCapacity,noOfLus,label,formatType,model,devNum);}  }
class C{  @Override public String toString(){  long nanos=elapsedNanos();  TimeUnit unit=chooseUnit(nanos);  double value=(double)nanos / NANOSECONDS.convert(1,unit);  return Platform.formatCompact4Digits(value) + " " + abbreviate(unit);}  }
class C{  public void testSetPublicKey4() throws Exception {  Identity i=new IdentityStub("testSetPublicKey4");  PublicKeyStub pk1=new PublicKeyStub("kkk","Identity.testSetPublicKey4",null);  CertificateStub c1=new CertificateStub("fff",null,null,pk1);  CertificateStub c2=new CertificateStub("zzz",null,null,pk1);  i.addCertificate(c1);  i.addCertificate(c2);  assertEquals(2,i.certificates().length);  assertSame(pk1,i.getPublicKey());  PublicKeyStub pk2=new PublicKeyStub("zzz","Identity.testSetPublicKey4",null);  i.setPublicKey(pk2);  assertSame(pk2,i.getPublicKey());  assertEquals(0,i.certificates().length);}  }
class C{  @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {  User user=userRepository.findOne(username);  if (user == null)   throw new UsernameNotFoundException("No user found for username '" + username + "'.");  return new UserDetailsImpl(user);}  }
class C{  protected StaticTypeCheckingVisitor newVisitor(SourceUnit unit,ClassNode node){  return new StaticTypeCheckingVisitor(unit,node);}  }
class C{  public static int installSilent(Context context,String filePath){  return installSilent(context,filePath," -r " + getInstallLocationParams());}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Equals(){  super(Boolean.class,Number.class,Number.class);}  }
class C{  private void addAndRunTask(Runnable task){  mTaskEngine.execute(task);}  }
class C{  public Rational add(Rational secondRational){  long n=r[0] * secondRational.getDenominator() + r[1] * secondRational.getNumerator();  long d=r[1] * secondRational.getDenominator();  return new Rational(n,d);}  }
class C{  private Chunk dumpHierarchy(View rootView,ByteBuffer in){  boolean skipChildren=in.getInt() > 0;  boolean includeProperties=in.getInt() > 0;  ByteArrayOutputStream b=new ByteArrayOutputStream(1024);  try {    ViewDebug.dump(rootView,skipChildren,includeProperties,b);  } catch (  IOException e) {    return createFailChunk(1,"Unexpected error while obtaining view hierarchy: " + e.getMessage());  }  byte[] data=b.toByteArray();  return new Chunk(CHUNK_VURT,data,0,data.length);}  }
class C{  public void testRackspace() throws Exception {  testCloudProvider("rackspace-cloudservers-us");}  }
class C{  public static void off(){  init();  util.setOn(false);}  }
class C{  public String validatePut(String request,String content,String... tests) throws Exception {  String res=put(request,content);  return validateXPath(res,tests);}  }
class C{  public T caseAnnotationArgument(AnnotationArgument object){  return null;}  }
class C{  private void fillPicks() throws Exception {  prepareTable(m_layout,getTableName(),getWhereClause(getSQLWhere()),"DatePromised,ProductValue");}  }
class C{  public static boolean checkUnManagedVolumeHasReplicas(UnManagedVolume unManagedVolume){  StringMap unManagedVolumeCharacteristics=unManagedVolume.getVolumeCharacterstics();  String volumeHasReplicas=unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.HAS_REPLICAS.toString());  String volumeHasRemoteReplicas=unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.REMOTE_MIRRORING.toString());  String isVplexVolume=unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_VPLEX_VOLUME.toString());  if (null != volumeHasReplicas && Boolean.parseBoolean(volumeHasReplicas) || (null != volumeHasRemoteReplicas && Boolean.parseBoolean(volumeHasRemoteReplicas)) || (null != isVplexVolume && Boolean.parseBoolean(isVplexVolume))) {    return true;  }  return false;}  }
class C{  private static BitMatrix bitMatrixFrombitArray(byte[][] input){  int whiteSpace=30;  BitMatrix output=new BitMatrix(input[0].length + 2 * whiteSpace,input.length + 2 * whiteSpace);  output.clear();  for (int y=0, yOutput=output.getHeight() - whiteSpace; y < input.length; y++, yOutput--) {    for (int x=0; x < input[0].length; x++) {      if (input[y][x] == 1) {        output.set(x + whiteSpace,yOutput);      }    }  }  return output;}  }
class C{  public void defineOrientation(int motionType,int startTime,int duration,int start,int end){  orientation=createMotion(motionType,startTime,duration,start,end);}  }
class C{  protected void addEntrypointPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_EntryPointSpec_entrypoint_feature"),getString("_UI_PropertyDescriptor_description","_UI_EntryPointSpec_entrypoint_feature","_UI_EntryPointSpec_type"),StextPackage.Literals.ENTRY_POINT_SPEC__ENTRYPOINT,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  protected void initTopLevelState(APMSpan topSpan,TraceReporter reporter){  nodeBuilder=new NodeBuilder();  traceContext=new TraceContext(topSpan,nodeBuilder,reporter);}  }
class C{  private static int gcd(int a,int b){  while (b != 0) {    int t=b;    b=a % b;    a=t;  }  return a;}  }
class C{  GridJavadocCharArrayLexReader(char[] chars){  this.chars=chars;}  }
class C{  private char[] allocate(int size){  return new char[size];}  }
class C{  public static boolean isHardwarePresent(){  return ReprintInternal.INSTANCE.isHardwarePresent();}  }
class C{  public void testAfterSaveError(){{    MyTestPO test=new MyTestPO(getCtx(),true,null);    assertFalse("Object should not be saved -- " + test,test.save());    assertFalse("Object should not be saved -- " + test,test.get_ID() <= 0);    assertFalse("Object should not be saved(2) -- " + test,MyTestPO.exists(test.get_ID(),null));  }{    MyTestPO test=new MyTestPO(getCtx(),false,null);    assertTrue("Object *should* be saved -- " + test,test.save());    MyTestPO test2=new MyTestPO(getCtx(),test.get_ID(),null);    assertEquals("Object not found",test.get_ID(),test2.get_ID());    test2.failOnSave=true;    test2.setName(test2.getName() + "_2");    assertFalse("Object should not be saved -- " + test2,test2.save());    String name=MyTestPO.getName(test2.get_ID(),null);    assertEquals("Object should not be modified(2) -- id=" + test2,test.getName(),name);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void mouseMove(int x,int y,int dx,int dy,int mouseButton,boolean cntlDown,boolean shiftDown){  mouseX=x;  mouseY=y;  this.mouseButton=mouseButton;  if (mouseButton > 1) {    controller.mouseMove(x,y,dx,dy,mouseButton);  } else   if (!hasMouse()) {    controller.mouseMove(x,y,dx,dy,mouseButton);  }  if (tape != null) {    controller.doPick(mouseX,mouseY,pickPosition,pickNormal,false);    tape.move(pickPosition);  }  if (hasMouse()) {    if (shiftDown) {      double s=controller.getViewpointNode().getCamera().getPixelSizeAt(pickPosition,false);      movable.setZOffset(movable.getZOffset() + dy * s,true);    } else {      controller.doPick(mouseX,mouseY,pickPosition,pickNormal,true);      move(pickPosition,pickNormal);    }  }}  }
class C{  public synchronized E remove(int index){  modCount++;  if (index >= elementCount)   throw new ArrayIndexOutOfBoundsException(index);  E oldValue=elementData(index);  int numMoved=elementCount - index - 1;  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);  elementData[--elementCount]=null;  return oldValue;}  }
class C{  public static String join(char[] self,String separator){  StringBuilder buffer=new StringBuilder();  boolean first=true;  if (separator == null)   separator="";  for (  char next : self) {    if (first) {      first=false;    } else {      buffer.append(separator);    }    buffer.append(next);  }  return buffer.toString();}  }
class C{  @SuppressWarnings("unchecked") public OutputSocket linkedOutputSocket(String hintIdentifier){  final OutputSocket outSocket=outputSocketFactory.create(new IdentiferOverridingSocketHintDecorator(this,hintIdentifier));  controlledOutputSockets.add(outSocket);  return outSocket;}  }
class C{  public boolean isLast() throws SQLException {  notSupported();  return false;}  }
class C{  public void appendDouble(double x){  ByteArrayOutputStream buffer=new ByteArrayOutputStream(8);  DataOutputStream bufout=new DataOutputStream(buffer);  try {    bufout.writeDouble(x);    appendBytes(buffer.toByteArray(),0,8);  } catch (  IOException e) {    throw new AssertionError("write");  }}  }
class C{  void enterState(){}  }
class C{  public static final boolean isSegmentNearRegion(GeoSegment segment,double hrange,GeoRegion region){  return isSegmentNearPolyRegion(segment,region.getPoints(),hrange);}  }
class C{  public FXGMatrix(){  this.identity();}  }
class C{  public Socks5(String host,int port) throws UnknownHostException {  this(InetAddress.getByName(host),port);}  }
class C{  public HandleSet keysFromBuffer(final int load) throws IOException {  if (load > this.buffersize)   throw new IOException("buffer load size exceeded");synchronized (this.backend) {    int missing=Math.min(this.backend.size(),load - this.buffer.size());    while (missing-- > 0) {      try {        this.buffer.put(this.backend.removeOne());      } catch (      final SpaceExceededException e) {        ConcurrentLog.logException(e);        break;      }    }    final HandleSet handles=new RowHandleSet(this.buffer.row().primaryKeyLength,this.buffer.row().objectOrder,this.buffer.size());    final Iterator<byte[]> i=this.buffer.keys();    while (i.hasNext()) {      try {        handles.put(i.next());      } catch (      final SpaceExceededException e) {        ConcurrentLog.logException(e);        break;      }    }    handles.optimize();    return handles;  }}  }
class C{  public CompileFileTest(String syntax,OutputStyle outputStyle){  super(syntax,outputStyle);}  }
class C{  public void forceRewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  if (!rewriteExif(filename,tags)) {    ExifData tempData=mData;    mData=new ExifData(DEFAULT_BYTE_ORDER);    FileInputStream is=null;    ByteArrayOutputStream bytes=null;    try {      is=new FileInputStream(filename);      bytes=new ByteArrayOutputStream();      doExifStreamIO(is,bytes);      byte[] imageBytes=bytes.toByteArray();      readExif(imageBytes);      setTags(tags);      writeExif(imageBytes,filename);    } catch (    IOException e) {      closeSilently(is);      throw e;    } finally {      is.close();      mData=tempData;    }  }}  }
class C{  protected boolean nullByteBufferTest(Mac theMac){  try {    ByteBuffer buf=null;    theMac.update(buf);    theMac.doFinal();  } catch (  IllegalArgumentException e) {    return true;  }  System.out.println("FAIL: " + "IllegalArgumentException hasn't been thrown as expected");  return false;}  }
class C{  public ReplDBMSEvent eventFromBinaryStatement(long seqno,String defaultSchema,byte[] queryAsBytes,int fragNo,boolean lastFrag,String charset){  Timestamp ts=new Timestamp(System.currentTimeMillis());  ArrayList<DBMSData> t=new ArrayList<DBMSData>();  StatementData sd=new StatementData(null,ts.getTime(),defaultSchema);  sd.setQuery(queryAsBytes);  sd.setCharset(charset);  t.add(sd);  DBMSEvent dbmsEvent=new DBMSEvent(new Long(seqno).toString(),null,t,lastFrag,new Timestamp(System.currentTimeMillis()));  ReplDBMSEvent replDbmsEvent=new ReplDBMSEvent(seqno,(short)fragNo,lastFrag,"NONE",0,ts,dbmsEvent);  return replDbmsEvent;}  }
class C{  public void decay(final double decayPercent){  double decayAmount=decayPercent * getStrength();  setStrength(getStrength() - decayAmount);}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  protected final synchronized Object requestImpl(Object key){  if (map.containsKey(key)) {    Object o=map.get(key);    while (o == null) {      try {        wait();      } catch (      InterruptedException ie) {      }      if (!map.containsKey(key))       break;      o=map.get(key);    }    if (o != null) {      SoftReference sr=(SoftReference)o;      o=sr.get();      if (o != null)       return o;    }  }  map.put(key,null);  return null;}  }
class C{  protected LongType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public Builder text(String s){  html.a(Util.escapeXml(s));  text.a(s);  return this;}  }
class C{  @SuppressWarnings("signedness") public static String toUnsignedString(@Unsigned byte b,int radix){  return Long.toString(toUnsignedLong(b),radix);}  }
class C{  public Word(Word w){  this(w,null);}  }
class C{  public static int missilesHit(int missiles,int nMod,boolean hotloaded){  return Compute.missilesHit(missiles,nMod,hotloaded,false,false);}  }
class C{  public void appendToLog(RequestInfo requestInfo,String lastSendResult,int firstRequestSendCount) throws Exception {  String info=String.format("Appending to asynclog -lastSendResult: '%s', first request " + "send count: '%d' and request info: '%s'",lastSendResult,firstRequestSendCount,requestInfo);  log.info(info);  StringBuilder sb=new StringBuilder();  String currentTimeInTimestampSeonds=dateToSecondsString(new Date());  log.debug("Current date in timestamp seconds: '{}'",currentTimeInTimestampSeonds);  sb.append(currentTimeInTimestampSeonds).append(FIELD_SEPARATOR);  sb.append(dateToSecondsString(requestInfo.getReceivedTime())).append(FIELD_SEPARATOR);  String removedTime=requestInfo.getRemovedTime() != null ? dateToSecondsString(requestInfo.getRemovedTime()) : "0";  sb.append(removedTime).append(FIELD_SEPARATOR);  sb.append(lastSendResult).append(FIELD_SEPARATOR);  sb.append(firstRequestSendCount).append(FIELD_SEPARATOR);  sb.append(provider.toShortString()).append(FIELD_SEPARATOR);  sb.append(requestInfo.getSender()).append(FIELD_SEPARATOR);  sb.append(requestInfo.getUser()).append(FIELD_SEPARATOR);  sb.append(requestInfo.getService()).append(FIELD_SEPARATOR);  String requestIdEscaped=StringEscapeUtils.escapeJava(requestInfo.getId());  sb.append(requestIdEscaped);  sb.append('\n');  final String logFileLine=sb.toString();  log.debug("Log file line: '{}'",logFileLine);  Callable<Object> task=null;  AsyncDBUtil.performLocked(task,getLogFilePath(),this);}  }
class C{  public static final float[] hexToRGB(String hexRGB){  return hexToRGB(hexRGB,new float[3]);}  }
class C{  private PDFObject readName() throws IOException {  StringBuffer sb=new StringBuffer();  int c;  while (isRegularCharacter(c=buf.get())) {    if (c < '!' && c > '~') {      break;    }    if (c == '#' && (majorVersion != 1 && minorVersion != 1)) {      int hex=readHexPair();      if (hex >= 0) {        c=hex;      } else {        throw new PDFParseException("Bad #hex in /Name");      }    }    sb.append((char)c);  }  buf.position(buf.position() - 1);  return new PDFObject(this,PDFObject.NAME,sb.toString());}  }
class C{  @Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  try {    if (XHTML_NS.equals(namespaceURI)) {      if ("meta".equals(localName) && ((atts.getIndex("","http-equiv") != -1) || (atts.getIndex("","httpequiv") != -1))) {        return;      }      writer.write('<');      writer.write(localName);      int length=atts.getLength();      boolean langPrinted=false;      for (int i=0; i < length; i++) {        String ns=atts.getURI(i);        String name=null;        if ("".equals(ns)) {          name=atts.getLocalName(i);        } else         if ("http://www.w3.org/XML/1998/namespace".equals(ns) && "lang".equals(atts.getLocalName(i))) {          name="lang";        }        if (name != null && !(langPrinted && "lang".equals(name))) {          writer.write(' ');          writer.write(name);          if ("lang".equals(name)) {            langPrinted=true;          }          if (Arrays.binarySearch(booleanAttributes,name) < 0) {            writer.write("=\"");            String value=atts.getValue(i);            for (int j=0; j < value.length(); j++) {              char c=value.charAt(j);switch (c) {case '<':                writer.write("&lt;");              break;case '>':            writer.write("&gt;");          break;case '&':        writer.write("&amp;");      break;case '"':    writer.write("&quot;");  break;default :writer.write(c);}}writer.write('"');}}}writer.write('>');if ("head".equals(localName)) {writer.write("<meta charset=\"UTF-8\">");}}} catch (IOException e) {throw (SAXException)new SAXException(e).initCause(e);}}  }
class C{  protected CaseClauseImpl(){  super();}  }
class C{  public void onCancelBrokerData(Tradestrategy tradestrategy){  if (m_historyDataRequests.containsKey(tradestrategy.getId())) {    tradestrategy.getContract().removeTradestrategy(tradestrategy);synchronized (m_historyDataRequests) {      m_historyDataRequests.remove(tradestrategy.getId());      m_historyDataRequests.notify();    }  }  m_client.removeBackTestBroker(tradestrategy.getId());}  }
class C{  public boolean isProjectACL(String acl){  return (acl.equalsIgnoreCase(ACL.OWN.toString()) || acl.equalsIgnoreCase(ACL.ALL.toString()) || acl.equalsIgnoreCase(ACL.BACKUP.toString()));}  }
class C{  public CUnhideNodesAction(final JFrame parent,final ZyGraph graph,final ZyProximityNode<INaviViewNode> node){  super("Unhide Nodes");  Preconditions.checkNotNull(parent,"IE00953: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE00954: Graph argument can't be null");  Preconditions.checkNotNull(node,"IE00955: Node argument can't be null");  m_parent=parent;  m_graph=graph;  m_node=node;}  }
class C{  private static int openURLWindows(String url) throws IOException {  url=url.replace("&","^&");  String[] command=new String[]{"cmd.exe","/c","start",url};  ProcessBuilder pb=new ProcessBuilder(command);  pb.start();  return 0;}  }
class C{  private void verifyUserHasAccessToTenants(Collection<URI> tenants){  StorageOSUser user=getUserFromContext();  if (_permissionsHelper.userHasGivenRole(user,URI.create(user.getTenantId()),Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN,Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN)) {    return;  }  Set<String> subtenants=_permissionsHelper.getSubtenantRolesForUser(user).keySet();  for (  URI tenantId : tenants) {    if (tenantId.equals(TenantOrg.SYSTEM_TENANT)) {      verifySystemAdmin();    } else     if (!tenantId.toString().equals(user.getTenantId()) && !subtenants.contains(tenantId.toString())) {      throw APIException.forbidden.insufficientPermissionsForUser(user.getName());    }  }}  }
class C{  public void writeConfig(String source,Config config){  log.debug("Writing config: {}",config);  for (  Map.Entry<String,String> configPair : config.entrySet()) {    send(new SetConfig(source,configPair.getKey(),configPair.getValue()));  }  systemProducer.flush(source);}  }
class C{  public boolean isInDownload(Node n){  return getDelegator().isInDownload(n.getLat(),n.getLon());}  }
class C{  public void ping(){}  }
class C{  public PTQuery_Partial Where(String replacementExpression,String... replacementVariables) throws PTQueryException {  PTQuery_Partial copy=new PTQuery_Partial(this);  Var[] vars=copy.requireInputs(replacementVariables);  copy.conditions.add(new WhereCondition(replacementExpression,vars));  return copy;}  }
class C{  private void testIsoYearJanuary1thSaturday() throws Exception {  assertEquals(2010,getIsoYear(parse("2010-12-28")));  assertEquals(2010,getIsoYear(parse("2010-12-29")));  assertEquals(2010,getIsoYear(parse("2010-12-30")));  assertEquals(2010,getIsoYear(parse("2010-12-31")));  assertEquals(2010,getIsoYear(parse("2011-01-01")));  assertEquals(2010,getIsoYear(parse("2011-01-02")));  assertEquals(2011,getIsoYear(parse("2011-01-03")));  assertEquals(2011,getIsoYear(parse("2011-01-04")));}  }
class C{  private String createString(String f){  return "srcArray=" + srcArray + f+ "srcPos="+ srcPos+ f+ "srcPtr="+ srcPtr+ f+ "dstArray="+ dstArray+ f+ "dstPos="+ dstPos+ f+ "dstPtr="+ dstPtr+ f+ "extent="+ extent+ f+ "kind="+ cudaMemcpyKind.stringFor(kind);}  }
class C{  public PearsonDistance(){  this(false,false);}  }
class C{  public FluentJdbc build(){  return new FluentJdbcInternal(connectionProvider,Maps.copyOf(paramSetters),defaultFetchSize,afterQueryListener);}  }
class C{  public TransformerException(Throwable e){  super(e.toString());  this.containedException=e;  this.locator=null;}  }
class C{  public long position(){  return this.position;}  }
class C{  @TCB static String stripBannedCodeunits(String s){  int safeLimit=longestPrefixOfGoodCodeunits(s);  if (safeLimit < 0) {    return s;  }  StringBuilder sb=new StringBuilder(s);  stripBannedCodeunits(sb,safeLimit);  return sb.toString();}  }
class C{  public static List<MapRoute> readRoutes(String fileName,int type,SimMap map){  List<MapRoute> routes=new ArrayList<MapRoute>();  WKTReader reader=new WKTReader();  List<List<Coord>> coords;  File routeFile=null;  boolean mirror=map.isMirrored();  double xOffset=map.getOffset().getX();  double yOffset=map.getOffset().getY();  if (type != CIRCULAR && type != PINGPONG) {    throw new SettingsError("Invalid route type (" + type + ")");  }  try {    routeFile=new File(fileName);    coords=reader.readLines(routeFile);  } catch (  IOException ioe) {    throw new SettingsError("Couldn't read MapRoute-data file " + fileName + " (cause: "+ ioe.getMessage()+ ")");  }  for (  List<Coord> l : coords) {    List<MapNode> nodes=new ArrayList<MapNode>();    for (    Coord c : l) {      if (mirror) {        c.setLocation(c.getX(),-c.getY());      }      c.translate(xOffset,yOffset);      MapNode node=map.getNodeByCoord(c);      if (node == null) {        Coord orig=c.clone();        orig.translate(-xOffset,-yOffset);        orig.setLocation(orig.getX(),-orig.getY());        throw new SettingsError("MapRoute in file " + routeFile + " contained invalid coordinate "+ c+ " orig: "+ orig);      }      nodes.add(node);    }    routes.add(new MapRoute(type,nodes));  }  return routes;}  }
class C{  protected boolean isReuseAddressChanged(){  return true;}  }
class C{  public void receiveErrorqueryAssociatedCapabilityForLun(java.lang.Exception e){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  try {    return EPG.getInstance().getLocalMarketsAndCacheNames();  } catch (  sage.EPGServerException e) {    System.out.println("ERROR communicating with EPG server of: " + e);    return e.getMessage();  }}  }
class C{  public Cell interpretXY(int x,int y){  if (drawer != null) {    return drawer.interpretXY(x,y);  }  return null;}  }
class C{  public static void longClick(ActivityInstrumentationTestCase test){  final Instrumentation inst=test.getInstrumentation();  inst.sendKeySync(new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_DPAD_CENTER));  try {    Thread.sleep((long)(ViewConfiguration.getLongPressTimeout() * 1.5f));  } catch (  InterruptedException e) {    e.printStackTrace();  }  inst.sendKeySync(new KeyEvent(KeyEvent.ACTION_UP,KeyEvent.KEYCODE_DPAD_CENTER));}  }
class C{  public static List<GeoTimeSerie> doubleExponentialSmoothing(GeoTimeSerie gts,double alpha,double beta) throws WarpScriptException {  if (alpha <= 0.0D || alpha >= 1.0D) {    throw new WarpScriptException("The data smoothing factor must be in 0 < alpha < 1.");  }  if (beta <= 0.0D || beta >= 1.0D) {    throw new WarpScriptException("The trend smoothing factor must be in 0 < beta < 1.");  }  if (TYPE.LONG != gts.type && TYPE.DOUBLE != gts.type) {    throw new WarpScriptException("Can only perform exponential smoothing on numeric geo time series.");  }  if (gts.values < 2) {    throw new WarpScriptException("Can only perform exponential smoothing on geo time series containing at least two values.");  }  List<GeoTimeSerie> result=new ArrayList<GeoTimeSerie>();  GeoTimeSerie s=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,gts.values);  s.setName(gts.getName());  s.setLabels(gts.getLabels());  GeoTimeSerie b=s.clone();  GTSHelper.sort(gts);  double smoothed=((Number)GTSHelper.valueAtIndex(gts,1)).doubleValue();  double bestestimate=smoothed - ((Number)GTSHelper.valueAtIndex(gts,0)).doubleValue();  double oneminusalpha=1.0D - alpha;  double oneminusbeta=1.0D - beta;  GTSHelper.setValue(s,gts.ticks[1],null != gts.locations ? gts.locations[1] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[1] : GeoTimeSerie.NO_ELEVATION,smoothed,false);  GTSHelper.setValue(b,gts.ticks[1],null != gts.locations ? gts.locations[1] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[1] : GeoTimeSerie.NO_ELEVATION,bestestimate,false);  for (int i=2; i < gts.values; i++) {    double newsmoothed=alpha * ((Number)GTSHelper.valueAtIndex(gts,i)).doubleValue() + oneminusalpha * (smoothed + bestestimate);    bestestimate=beta * (newsmoothed - smoothed) + oneminusbeta * bestestimate;    smoothed=newsmoothed;    GTSHelper.setValue(s,gts.ticks[i],null != gts.locations ? gts.locations[i] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[i] : GeoTimeSerie.NO_ELEVATION,smoothed,false);    GTSHelper.setValue(b,gts.ticks[i],null != gts.locations ? gts.locations[i] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[i] : GeoTimeSerie.NO_ELEVATION,bestestimate,false);  }  result.add(s);  result.add(b);  return result;}  }
class C{  @Override public void onWindowFocusChanged(boolean hasFocus){  super.onWindowFocusChanged(hasFocus);  surfaceWindowFocusChanged(hasFocus);}  }
class C{  public void initRPClasses(){  StendhalRPWorld.get();}  }
class C{  private void addBOMLines(MProduct product,BigDecimal qty){  MPPProductBOMLine[] bomLines=getBOMLines(product);  for (int i=0; i < bomLines.length; i++)   addBOMLine(bomLines[i],qty);  log.fine("#" + bomLines.length);}  }
class C{  static void testCreateDirectories(Path tmpdir) throws IOException {  createDirectories(tmpdir);  Path subdir=tmpdir.resolve("a");  createDirectories(subdir);  assertTrue(exists(subdir));  subdir=subdir.resolve("b/c/d");  createDirectories(subdir);  assertTrue(exists(subdir));  Path file=createFile(tmpdir.resolve("x"));  try {    createDirectories(file);    throw new RuntimeException("failure expected");  } catch (  FileAlreadyExistsException x) {  }  try {    createDirectories(file.resolve("y"));    throw new RuntimeException("failure expected");  } catch (  IOException x) {  }  Path root=Paths.get("/");  Files.createDirectories(root);  Files.createDirectories(root.toAbsolutePath());}  }
class C{  public void testPair(){  int iterations=BluetoothTestRunner.sPairIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("pair iteration " + (i + 1) + " of "+ iterations);    mTestUtils.pair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);    mTestUtils.unpair(adapter,device);  }  mTestUtils.disable(adapter);}  }
class C{  public final Vec4D rotateX(float theta){  final float co=(float)Math.cos(theta);  final float si=(float)Math.sin(theta);  final float zz=co * z - si * y;  y=si * z + co * y;  z=zz;  return this;}  }
class C{  public RangeSelectorHelper withSavedInstanceState(Bundle savedInstanceState){  return withSavedInstanceState(savedInstanceState,"");}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  void addNodeMap(TreeNode node){  StringBuffer sb=new StringBuffer();  TreeNode tn=node;  while (tn != root) {    sb.insert(0,tn.toString());    if (tn.getParent() != root)     sb.insert(0,".");    tn=tn.getParent();  }  String pack=sb.toString();  nodeForPackage.put(pack,node);}  }
class C{  @Override public void clearTextField(Selector obj) throws UiObjectNotFoundException {  try {    obj.toUiObject2().clear();  } catch (  NullPointerException e) {    device.findObject(obj.toUiSelector()).clearTextField();  }}  }
class C{  static CryptoData fromBytes(EncodingProvider encodingProviders,byte[] messageBytes,byte[] ivBytes){  return new CryptoData(encodingProviders,messageBytes,ivBytes);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public AccountHeaderBuilder withHeaderBackgroundScaleType(ImageView.ScaleType headerBackgroundScaleType){  this.mHeaderBackgroundScaleType=headerBackgroundScaleType;  return this;}  }
class C{  public boolean isMarketDataRunning(Tradestrategy tradestrategy){  return false;}  }
class C{  private void updateCandidates(){  if (!mCompletionOn) {    if (mComposing.length() > 0) {      ArrayList<String> list=new ArrayList<String>();      Log.d("SoftKeyboard","REQUESTING: " + mComposing.toString());      mScs.getSentenceSuggestions(new TextInfo[]{new TextInfo(mComposing.toString())},5);      setSuggestions(list,true,true);    } else {      setSuggestions(null,false,false);    }  }}  }
class C{  QuickSelectSketch(final int nomEntries,final SummaryFactory<S> summaryFactory){  this(nomEntries,DEFAULT_LG_RESIZE_FACTOR,summaryFactory);}  }
class C{  void guiChanged(){  Play instruction=(Play)PlayEditor.this.inst;  instruction.setHandle(handleModel.getNumber().intValue());  instruction.setBrk((String)loop.getSelectedItem());  int flag=0;  if (wavbrk1.isSelected()) {    flag|=0x01;  }  if (wavbrk2.isSelected()) {    flag|=0x02;  }  instruction.setWaveBrkFlags(flag);  updated();}  }
class C{  private void logMessage(String msg,Object[] obj){  if (getMonitoringPropertiesLoader().isToLogIndications()) {    _logger.debug(msg,obj);  }}  }
class C{  private StringBuffer processTextArray(final byte[] stream,int startCommand,final int dataPointer,final float multiplyer,final boolean multipleTJs){  glyphData.setText(false);  isHTML=current.isHTMLorSVG();  resetValues(glyphData);  final boolean widthIsVertical=currentFontData.isWidthVertical();  final int Tmode=gs.getTextRenderType();  boolean hasContent=false, isMultiple=false;  char lastTextChar='x';  float TFS=currentTextState.getTfs();  final float rawTFS=TFS;  if (TFS < 0) {    TFS=-TFS;  }  final int type=currentFontData.getFontType();  final float spaceWidth=currentFontData.getCurrentFontSpaceWidth();  StringBuffer textData=null;  if (parserOptions.isTextExtracted()) {    textData=new StringBuffer(50);  }  float currentGap;  boolean isTextShifted=false;  while (stream[startCommand] == 91 || stream[startCommand] == 10 || stream[startCommand] == 13 || stream[startCommand] == 32) {    if (stream[startCommand] == 91) {      isMultiple=true;    }    startCommand++;  }  glyphData.setDefaultCharSize(currentFontData);  charSpacing=currentTextState.getCharacterSpacing() / TFS;  final float wordSpacing=currentTextState.getWordSpacing() / TFS;  if (multipleTJs) {    Trm[2][0]=currentTextState.Tm[2][0];    Trm[2][1]=currentTextState.Tm[2][1];  }  float[][] temp=new float[3][3];  temp[0][0]=rawTFS * currentTextState.getHorizontalScaling();  temp[1][1]=rawTFS;  temp[2][1]=currentTextState.getTextRise();  temp[2][2]=1;  Trm=Matrix.multiply(temp,Trm);  if (currentFontData.isFontVertical()) {    Trm[2][0]-=(Trm[0][0] / 2);    Trm[2][1]-=(Trm[1][1]);  }  if (isMultiple && stream[startCommand] != 60 && stream[startCommand] != 40 && stream[startCommand] != 93) {    float offset=0;    while (stream[startCommand] != 40 && stream[startCommand] != 60 && stream[startCommand] != 93) {      final StringBuilder kerning=new StringBuilder(10);      while (stream[startCommand] != 60 && stream[startCommand] != 40 && stream[startCommand] != 93 && stream[startCommand] != 32) {        kerning.append((char)stream[startCommand]);        startCommand++;      }      offset+=Float.parseFloat(kerning.toString());      while (stream[startCommand] == 32) {        startCommand++;      }    }    if (Trm[0][0] == 0 && Trm[1][1] == 0 && Trm[0][1] != 0 && Trm[1][0] != 0) {      offset=Trm[0][1] * offset / Leading.THOUSAND;      Trm[2][1]-=offset;    } else {      offset=Trm[0][0] * offset / Leading.THOUSAND;      Trm[2][0]-=offset;    }  }  final int fontSize=calcFontSize(glyphData,currentTextState,Trm);  Font javaFont=null;  final int textPrint=parserOptions.getTextPrint();  if (textPrint == PdfDecoderInt.STANDARDTEXTSTRINGPRINT && StandardFonts.isStandardFont(currentFontData.getFontName(),true) && parserOptions.isPrinting()) {    javaFont=currentFontData.getJavaFontX(fontSize);  } else   if (currentFontData.isFontEmbedded && !currentFontData.isFontSubstituted()) {    javaFont=null;  } else   if ((PdfStreamDecoder.useTextPrintingForNonEmbeddedFonts || textPrint != PdfDecoderInt.NOTEXTPRINT) && parserOptions.isPrinting()) {    javaFont=currentFontData.getJavaFontX(fontSize);  }  final float x=Trm[2][0];  if (Trm[1][0] < 0 && Trm[0][1] > 0 && Trm[1][1] == 0 && Trm[0][0] == 0) {    isTextShifted=true;  }  int i=startCommand;  StringBuffer buff=null;  if (returnText) {    buff=new StringBuffer(streamLength);  }  boolean resetCoords=true;  final boolean isCID=currentFontData.isCIDFont();  while (i < dataPointer) {    glyphData.setActualWidth(-1);    i=CharReader.getNextValue(i,stream,glyphData,isCID);    if (glyphData.isText()) {      lastTextChar=glyphData.getRawChar();      if (glyphData.getOpenChar() == 60) {        if (isCID && !currentFontData.isFontSubstituted() && currentFontData.isFontEmbedded&& (stream[i] != '0')) {          i=HexTextUtils.getHexCIDValue(stream,i,glyphData,currentFontData,parserOptions);        } else {          i=HexTextUtils.getHexValue(stream,i,glyphData,currentFontData,parserOptions);        }      } else       if (lastTextChar == 92 && !isCID) {        i=EscapedTextUtils.getEscapedValue(i,stream,glyphData,currentFontData,streamLength,parserOptions,current);      } else       if (isCID) {        i=CIDTextUtils.getCIDCharValues(i,stream,streamLength,glyphData,currentFontData,parserOptions);      } else {        lastTextChar=getValue(lastTextChar,glyphData,currentFontData,current);      }      if (isHTML && !currentFontData.hasToUnicode() && currentFontData.getFontType() == StandardFonts.CIDTYPE0 && currentFontData.getGlyphData().isIdentity()) {        int charToUse=glyphData.getRawChar();        final int valueForHTML=glyphData.getValueForHTML();        if (valueForHTML != -1) {          charToUse=valueForHTML;          glyphData.setValueForHTML(-1);        }        final int rawC=StandardFonts.mapCIDToValidUnicode(currentFontData.getBaseFontName(),charToUse);        glyphData.setUnicodeValue(String.valueOf((char)(rawC)));      }      if (!isTabRemapped && glyphData.getRawInt() == 9 && currentFontData.isFontSubstituted()) {        glyphData.setRawInt(32);        glyphData.set(" ");      }      temp[0][0]=1;      temp[0][1]=0;      temp[0][2]=0;      temp[1][0]=0;      temp[1][1]=1;      temp[1][2]=0;      if (currentFontData.isFontVertical()) {        temp[2][1]=-(currentWidth - glyphData.getLeading());        temp[2][0]=0;      } else {        temp[2][0]=(currentWidth + glyphData.getLeading());        temp[2][1]=0;      }      temp[2][2]=1;      Trm=Matrix.multiply(temp,Trm);      if (glyphData.getRawChar() == ' ' && glyphData.getLastChar() != ' ') {        TrmBeforeSpace=Trm;      }      glyphData.setLeading(0);      float actualWidth=glyphData.getActualWidth();      if (currentFontData.isCIDFont()) {        final int idx=glyphs.getCMAPValue(glyphData.getRawInt());        if (idx > 0) {          if (glyphs.is1C() && !glyphs.isIdentity()) {            glyphData.setRawInt(idx);          }          actualWidth=currentFontData.getWidth(idx);        }      }      int idx=glyphData.getRawInt();      if (!glyphs.isCorrupted()) {        if (currentFontData.isCIDFont() && !glyphs.isIdentity() && !glyphs.hasGIDtoCID()) {          final int mappedIdx=glyphs.getConvertedGlyph(idx);          if (mappedIdx != -1) {            idx=mappedIdx;          }        } else         if (currentFontData.getFontType() == StandardFonts.TYPE1) {          final int diff=currentFontData.getDiffChar(idx);          if (diff > 0) {            glyphData.setRawInt(diff);          }        }      }      if (actualWidth > 0) {        currentWidth=actualWidth;      } else {        currentWidth=currentFontData.getWidth(idx);      }      if (currentWidth == 0 && parserOptions.isXFA()) {        final Float value=StandardFonts.getStandardWidth("Arial",currentFontData.getMappedChar(glyphData.getRawInt(),false));        currentWidth=value != null ? value : 0.0f;        currentFontData.setLastWidth(currentWidth);      }      if (isHTML && (!currentFontData.isFontSubsetted() && currentFontData.getFontEncoding(true) == StandardFonts.WIN && (glyphData.getUnicodeValue().charAt(0) - idx) == 32)) {        glyphData.setUnicodeValue(String.valueOf((char)idx));      }      if (currentWidth == 0 && parserOptions.isXFA()) {        final String glyfName;        final int rawInt=glyphData.getRawInt();        if (rawInt > 255) {          glyfName=String.valueOf(rawInt);        } else {          glyfName=StandardFonts.getUnicodeChar(StandardFonts.WIN,rawInt);        }        currentWidth=currentFontData.getGlyphWidth(glyfName,rawInt,glyphData.getDisplayValue());      }      if (returnText) {        buff.append(glyphData.getDisplayValue());      }      currentTextState.setLastKerningAdded(glyphData.getSpacingAdded());      glyphData.setSpacingAdded(0);      if ((parserOptions.isRenderText() && (Tmode != GraphicsState.INVISIBLE || isHTML)) || (Tmode == GraphicsState.CLIPTEXT && parserOptions.isRenderClipText())) {        if (javaFont != null && parserOptions.isPrinting() && (textPrint == PdfDecoderInt.STANDARDTEXTSTRINGPRINT || (textPrint == PdfDecoderInt.TEXTSTRINGPRINT || (PdfStreamDecoder.useTextPrintingForNonEmbeddedFonts && (!currentFontData.isFontEmbedded || currentFontData.isFontSubstituted()))))) {          if (Tmode == GraphicsState.CLIPTEXT) {            final boolean isSTD=DecoderOptions.isRunningOnMac || StandardFonts.isStandardFont(currentFontData.getBaseFontName(),false);            final Area transformedGlyph2=glyphs.getStandardGlyph(Trm,glyphData.getRawInt(),glyphData.getDisplayValue(),currentWidth,isSTD);            if (transformedGlyph2 != null) {              gs.addClip(transformedGlyph2);            }            current.drawClip(gs,null,true);          }          if (glyphData.getDisplayValue() != null && !glyphData.getDisplayValue().startsWith("&#")) {            if (isHTML) {              current.drawEmbeddedText(Trm,fontSize,null,null,DynamicVectorRenderer.TEXT,gs,null,glyphData.getDisplayValue(),currentFontData,-100);            } else {              current.drawText(Trm,glyphData.getDisplayValue(),gs,Trm[2][0],-Trm[2][1],javaFont);            }          }        } else         if (((textPrint != PdfDecoderInt.TEXTGLYPHPRINT) || (javaFont == null)) && (currentFontData.isFontEmbedded && currentFontData.isFontSubstituted() && ((glyphData.getRawInt() == 9 && !isTabRemapped) || (glyphData.getRawInt() == 10 && !isCRRemapped) || (glyphData.getRawInt() == 13 && !isReturnRemapped)))) {        } else         if (((textPrint != PdfDecoderInt.TEXTGLYPHPRINT) || (javaFont == null)) && (currentFontData.isFontSubstituted() && currentWidth == 0 && glyphData.getDisplayValue().charAt(0) == 13)) {        } else         if (((textPrint != PdfDecoderInt.TEXTGLYPHPRINT) || (javaFont == null)) && (currentFontData.isFontEmbedded)) {          renderText(currentWidth,type,Tmode,multiplyer,isTextShifted);        } else         if (!glyphData.getDisplayValue().isEmpty() && !glyphData.getDisplayValue().startsWith("&#")) {          JavaTextRenderer.renderTextWithJavaFonts(gs,current,streamType,parserOptions,currentFontData,glyphData,Tmode,currentWidth,isTextShifted,glyphs,Trm);        }      }      if (currentFontData.isFontVertical()) {        currentWidth-=charSpacing;      } else {        currentWidth+=charSpacing;      }      if (glyphData.getRawChar() == ' ') {        currentWidth+=wordSpacing;      }      currentGap=(glyphData.getWidth() + charSpacing - lastWidth);      String spaces="";      if (currentGap > 0 && lastWidth > 0) {        spaces=PdfFont.getSpaces(currentGap,spaceWidth,PdfStreamDecoder.currentThreshold);      }      glyphData.addToWidth(currentWidth);      lastWidth=glyphData.getWidth();      if (customGlyphTracker != null) {        customGlyphTracker.addGlyph(Trm,glyphData.getRawInt(),glyphData.getDisplayValue(),glyphData.getUnicodeValue());      }      if (parserOptions.isTextExtracted()) {        hasContent=writeOutText(glyphData,Trm,hasContent,currentWidth,textData,spaces);      }    } else     if (glyphData.getRawChar() == 40 || glyphData.getRawChar() == 60) {      glyphData.setText(true);      glyphData.setOpenChar(glyphData.getRawChar());    } else     if ((glyphData.getRawChar() == 41) || (glyphData.getRawChar() == 62 && glyphData.getOpenChar() == 60) || (!glyphData.isText() && (glyphData.getRawChar() == '-' || (glyphData.getRawChar() >= '0' && glyphData.getRawChar() <= '9')))) {      i=Leading.readLeading(i,stream,glyphData);    }    if (parserOptions.isTextExtracted()) {      resetCoords=setExtractedText(currentWidth,resetCoords);    }    i++;  }  if (returnText) {    if (!tjTextValue.isEmpty()) {      tjTextValue+=' ' + buff.toString();    } else {      tjTextValue=buff.toString();    }  }  Trm=updateMatrixPosition(widthIsVertical,Trm,glyphData.getLeading(),currentWidth,currentTextState);  if (parserOptions.isTextExtracted()) {    return setExtractedText(lastTextChar,x,textData,hasContent);  } else {    return null;  }}  }
class C{  public static Set<UnitCategory> categorize(final Collection<Unit> units,final Map<Unit,Collection<Unit>> dependent,final boolean categorizeMovement,final boolean categorizeTransportCost,final boolean categorizeTrnMovement,final boolean sort){  HashMap<UnitCategory,UnitCategory> categories;  if (sort) {    categories=new HashMap<>();  } else {    categories=new LinkedHashMap<>();  }  for (  final Unit current : units) {    int unitMovement=-1;    if (categorizeMovement || (categorizeTrnMovement && Matches.UnitIsTransport.match(current))) {      unitMovement=TripleAUnit.get(current).getMovementLeft();    }    int unitTransportCost=-1;    if (categorizeTransportCost) {      unitTransportCost=UnitAttachment.get((current).getUnitType()).getTransportCost();    }    Collection<Unit> currentDependents=null;    if (dependent != null) {      currentDependents=dependent.get(current);    }    final boolean disabled=Matches.UnitIsDisabled.match(current);    final UnitCategory entry=new UnitCategory(current,currentDependents,unitMovement,current.getHits(),TripleAUnit.get(current).getUnitDamage(),disabled,unitTransportCost);    if (categories.containsKey(entry)) {      final UnitCategory stored=categories.get(entry);      stored.addUnit(current);    } else {      categories.put(entry,entry);    }  }  if (sort) {    return new TreeSet<>(categories.keySet());  } else {    return new LinkedHashSet<>(categories.keySet());  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public SQLRecoverableException(Throwable cause){  super(cause);}  }
class C{  public StrBuilder appendFixedWidthPadLeft(final int value,final int width,final char padChar){  return appendFixedWidthPadLeft(String.valueOf(value),width,padChar);}  }
class C{  public BigIntPolynomial round(){  int N=coeffs.length;  BigIntPolynomial p=new BigIntPolynomial(N);  for (int i=0; i < N; i++) {    p.coeffs[i]=coeffs[i].setScale(0,BigDecimal.ROUND_HALF_EVEN).toBigInteger();  }  return p;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public SQLRecoverableException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public void deleteTag(int tagId,int ifdId){  mData.removeTag(getTrueTagKey(tagId),ifdId);}  }
class C{  protected BaseDaoImpl(ConnectionSource connectionSource,DatabaseTableConfig<T> tableConfig) throws SQLException {  this(connectionSource,tableConfig.getDataClass(),tableConfig);}  }
class C{  public String process(String to_process){  if (to_process == null || to_process.length() == 0)   return "";  StringBuffer bs=new StringBuffer(to_process.length() + 50);  StringCharacterIterator sci=new StringCharacterIterator(to_process);  String tmp=null;  for (char c=sci.first(); c != CharacterIterator.DONE; c=sci.next()) {    tmp=String.valueOf(c);    if (hasAttribute(tmp))     tmp=(String)this.get(tmp);    int ii=c;    if (ii > 255)     tmp="&#" + ii + ";";    bs.append(tmp);  }  return (bs.toString());}  }
class C{  public static MeteringRectangle[] aeRegionsForNormalizedCoord(float nx,float ny,final Rect cropRegion,int sensorOrientation){  return regionsForNormalizedCoord(nx,ny,Settings3A.getMeteringRegionWidth(),cropRegion,sensorOrientation);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public final void openPdfFileFromStream(final Object filename,final String password) throws PdfException {  closeOnExit=false;  if (filename instanceof ImageInputStream) {    final ImageInputStream iis=(ImageInputStream)filename;    if (isOpen) {      closePdfFile();    }    isOpen=false;    this.filename="ImageInputStream" + System.currentTimeMillis();    org.jpedal.DevFlags.currentFile=this.filename;    res.flush();    res.flushObjects();    objectStoreRef.storeFileName(this.filename);    currentPdfFile=new PdfObjectReader(password);    currentPdfFile.openPdfFile(iis);    openPdfFile();  } else {    throw new RuntimeException(filename + " not currently an option");  }}  }
class C{  private void onCancelClicked(){  this.finish();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(this.getClass().getSimpleName()).append(":");  sb.append(" XID=").append(XID);  sb.append(" type=").append(type);  sb.append(" subtype=").append(subtype);  sb.append(" SCN=").append(SCN);  sb.append(" owner=").append(tableOwner);  sb.append(" table=").append(tableName);  return sb.toString();}  }
class C{  public JSONObject(Map<String,Object> map){  this.map=new HashMap<String,Object>();  if (map != null) {    Iterator<Entry<String,Object>> i=map.entrySet().iterator();    while (i.hasNext()) {      Entry<String,Object> entry=i.next();      Object value=entry.getValue();      if (value != null) {        this.map.put(entry.getKey(),wrap(value));      }    }  }}  }
class C{  protected void initObjects(){  this.mediaPlayer=new MediaPlayer();  this.surfaceView=new SurfaceView(context);  RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);  layoutParams.addRule(CENTER_IN_PARENT);  this.surfaceView.setLayoutParams(layoutParams);  addView(this.surfaceView);  this.surfaceHolder=this.surfaceView.getHolder();  this.surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);  this.surfaceHolder.addCallback(this);  if (this.onProgressView == null)   this.onProgressView=new ProgressBar(context);  layoutParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);  layoutParams.addRule(CENTER_IN_PARENT);  this.onProgressView.setLayoutParams(layoutParams);  addView(this.onProgressView);}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  public Integer checkRoleWriting(Role role,String relationTypeName,Boolean initFlag) throws IllegalArgumentException, RelationTypeNotFoundException {  if (role == null || relationTypeName == null || initFlag == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"checkRoleWriting",new Object[]{role,relationTypeName,initFlag});  RelationType relType=getRelationType(relationTypeName);  String roleName=role.getRoleName();  List<ObjectName> roleValue=role.getRoleValue();  boolean writeChkFlag=true;  if (initFlag.booleanValue()) {    writeChkFlag=false;  }  RoleInfo roleInfo;  try {    roleInfo=relType.getRoleInfo(roleName);  } catch (  RoleInfoNotFoundException exc) {    RELATION_LOGGER.exiting(RelationService.class.getName(),"checkRoleWriting");    return Integer.valueOf(RoleStatus.NO_ROLE_WITH_NAME);  }  Integer result=checkRoleInt(2,roleName,roleValue,roleInfo,writeChkFlag);  RELATION_LOGGER.exiting(RelationService.class.getName(),"checkRoleWriting");  return result;}  }
class C{  private int skipFromPeekBuffer(int length){  int bytesSkipped=Math.min(peekBufferLength,length);  updatePeekBuffer(bytesSkipped);  return bytesSkipped;}  }
class C{  public TStructuralType basicGetStructuralType(){  return structuralType;}  }
class C{  public static void point(double x,double y){  double xs=scaleX(x);  double ys=scaleY(y);  double r=penRadius;  float scaledPenRadius=(float)(r * DEFAULT_SIZE);  if (scaledPenRadius <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - scaledPenRadius / 2,ys - scaledPenRadius / 2,scaledPenRadius,scaledPenRadius));  draw();}  }
class C{  @Override public Object execute(ExecutionEvent event) throws ExecutionException {  IWorkbenchWindow window=HandlerUtil.getActiveWorkbenchWindow(event);  IWorkbenchPage activePage=window.getActivePage();  ISelection selection=HandlerUtil.getActiveSite(event).getSelectionProvider().getSelection();  if (selection instanceof TextSelection) {    TextSelection textSelection=(TextSelection)selection;    IEditorPart editor=activePage.getActiveEditor();    IProject project=DroidsafePluginUtilities.getProcessedDroidsafeProjectForEditor(editor);    if (project != null) {      IEditorInput input=editor.getEditorInput();      if (input instanceof FileEditorInput) {        IFile file=((FileEditorInput)input).getFile();        int offset=textSelection.getOffset();        int length=textSelection.getLength();        IMarker taintMarker=ProjectMarkerProcessor.get(project).findTaintMarker(file,offset,length);        if (taintMarker != null) {          TaintSourcesViewPart.openView(taintMarker,textSelection.getText());        }      }    }  }  return null;}  }
class C{  static MediaType createAudioType(String subtype){  return create(AUDIO_TYPE,subtype);}  }
class C{  public void considerName(String className){  if (className == null) {    return;  }  className=internalToBinaryClassName(className);  if (mInKeep.containsKey(className) || mOutKeep.containsKey(className) || mInDeps.containsKey(className)|| mOutDeps.containsKey(className)) {    return;  }  ClassReader cr=mZipClasses.get(className);  if (cr == null) {    return;  }  try {    if (getClass().getClassLoader().loadClass(className) != null) {      return;    }  } catch (  ClassNotFoundException e) {  }  if (className.indexOf("android") >= 0) {    mOutDeps.put(className,cr);  } else {    mOutKeep.put(className,cr);  }}  }
class C{  public static boolean isLowerCase(char ch){  return Character.toLowerCase(ch) == ch;}  }
class C{  public Builder executors(final IExecutors executors){  mClient.setExecutors(executors);  return this;}  }
class C{  public static BigDecimal sqrt(BigDecimal x,int scale){  if (x.signum() < 0) {    throw new IllegalArgumentException("x < 0");  }  BigInteger n=x.movePointRight(scale << 1).toBigInteger();  int bits=(n.bitLength() + 1) >> 1;  BigInteger ix=n.shiftRight(bits);  BigInteger ixPrev;  do {    ixPrev=ix;    ix=ix.add(n.divide(ix)).shiftRight(1);    Thread.yield();  } while (ix.compareTo(ixPrev) != 0);  return new BigDecimal(ix,scale);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void cancel(Account account,OCFile file){  Pair<DownloadFileOperation,String> removeResult=mPendingDownloads.remove(account,file.getRemotePath());  DownloadFileOperation download=removeResult.first;  if (download != null) {    download.cancel();  } else {    if (mCurrentDownload != null && mCurrentAccount != null && mCurrentDownload.getRemotePath().startsWith(file.getRemotePath()) && account.name.equals(mCurrentAccount.name)) {      mCurrentDownload.cancel();    }  }}  }
class C{  public void testExecute() throws Throwable {  callerContext.execute(null);  await();  ServerSessionContext session=state.getStateMachine().executor().context().sessions().getSession(1);  assertNotNull(session);  assertEquals(session.id(),1);  assertEquals(session.getTimestamp(),timestamp);  assertEquals(session.getCommandSequence(),0);  callerContext.execute(null);  await(1000,2);}  }
class C{  public TickUnits(){  this.tickUnits=new ArrayList();}  }
class C{  private int mod(int a,final int b){  final int n=a / b;  a-=n * b;  if (a < 0) {    return a + b;  }  return a;}  }
class C{  public int randomNonmember(){  if (members.length == n) {    throw new FrameworkException("no non-member exists (k == n)");  } else   if (members.length < n / OPT_FACTOR) {    while (true) {      int value=PRNG.nextInt(n);      if (!memberSet.contains(value)) {        return value;      }    }  } else {    int result=-1;    int count=0;    for (int i=0; i < n; i++) {      if (!memberSet.contains(i)) {        count++;        if (PRNG.nextInt(count) == 0) {          result=i;        }      }    }    return result;  }}  }
class C{  public InlineLocalVariableDescriptor(){  super(IJavaRefactorings.INLINE_LOCAL_VARIABLE);}  }
class C{  protected void addTrailerToOutput(byte[] msg,int offset,AbstractMRMessage m){}  }
class C{  public static CurrentTimestampExpression currentTimestamp(){  return new CurrentTimestampExpression();}  }
class C{  public Automaton toAutomaton(AutomatonProvider automaton_provider,int maxDeterminizedStates) throws IllegalArgumentException, TooComplexToDeterminizeException {  return toAutomaton(null,automaton_provider,maxDeterminizedStates);}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public <S>EqualsVerifier<T> withPrefabValues(Class<S> otherType,S red,S black){  if (otherType == null) {    throw new NullPointerException("Type is null");  }  if (red == null || black == null) {    throw new NullPointerException("One or both values are null.");  }  if (red.equals(black)) {    throw new IllegalArgumentException("Both values are equal.");  }  config.getPrefabValues().addFactory(otherType,red,black);  return this;}  }
class C{  public boolean contains(final AnnotatedTypeMirror type1,final AnnotatedTypeMirror type2){  return this.visited.contains(new Visit(type1,type2));}  }
class C{  private void configureMockCapture(){  myViewConfigCapture=new Capture<C>();  myView.configure(EasyMock.capture(myViewConfigCapture));  EasyMock.expectLastCall().once();}  }
class C{  public static void perpendicular(float x,float y,float z,Vector3f dest1,Vector3f dest2){  float magX=z * z + y * y;  float magY=z * z + x * x;  float magZ=y * y + x * x;  float mag;  if (magX > magY && magX > magZ) {    dest1.x=0;    dest1.y=z;    dest1.z=-y;    mag=magX;  } else   if (magY > magZ) {    dest1.x=z;    dest1.y=0;    dest1.z=x;    mag=magY;  } else {    dest1.x=y;    dest1.y=-x;    dest1.z=0;    mag=magZ;  }  float len=1.0f / (float)Math.sqrt(mag);  dest1.x*=len;  dest1.y*=len;  dest1.z*=len;  dest2.x=y * dest1.z - z * dest1.y;  dest2.y=z * dest1.x - x * dest1.z;  dest2.z=x * dest1.y - y * dest1.x;}  }
class C{  public PoolFiberFactory(Executor executor,ScheduledExecutorService sched){  this.executor=executor;  this._scheduler=sched;}  }
class C{  public void onHttpTransferStarted(){  mListener.handleUploadStarted();}  }
class C{  public static void initialize(Application app){  initialize(app,null);}  }
class C{  public void addSection(PropertySection section){  sections.add(section);}  }
class C{  public WCS100Capabilities parse(Object... args) throws XMLStreamException {  XMLEventParserContext ctx=this.parserContext;  QName capsName=new QName(this.getNamespaceURI(),"WCS_Capabilities");  for (XMLEvent event=ctx.nextEvent(); ctx.hasNext(); event=ctx.nextEvent()) {    if (event == null)     continue;    if (event.isStartElement() && event.asStartElement().getName().equals(capsName)) {      this.doParseEventAttributes(ctx,event);      ctx.setDefaultNamespaceURI(this.getNamespaceURI());      this.registerParsers(ctx);      super.parse(ctx,event,args);      return this;    }  }  return null;}  }
class C{  public void fireJavascriptEvent(String action){  sendEventMessage(action);}  }
class C{  public void updateShort(String columnName,short x) throws SQLException {  updateShort(findColumn(columnName),x);}  }
class C{  public static boolean parseArrayOrSlice(PsiBuilder b,int l){  PsiBuilder.Marker m=b.mark();  if (PerlParserImpl.array_primitive(b,l)) {    assert b instanceof PerlBuilder;    b.getTokenType();    IElementType lastRawTokenType=b.rawLookup(-1);    if (!((PerlBuilder)b).isInterpolated() || lastRawTokenType != TokenType.WHITE_SPACE) {      if (PerlParserImpl.array_index(b,l)) {        m.done(ARRAY_ARRAY_SLICE);      } else       if (PerlParserImpl.hash_index(b,l)) {        m.done(ARRAY_HASH_SLICE);      } else {        m.drop();      }    } else {      m.drop();    }    return true;  }  m.drop();  return false;}  }
class C{  public boolean load(){  if (this.context.getMetricDb() != null) {    try {      List<Subscription> subs=this.context.getMetricDb().loadAlertSubscriptions();synchronized (this.groupSubscriptions) {        this.groupSubscriptions.clear();        for (        Subscription sub : subs) {          String group=sub.group;          if (!this.groupSubscriptions.containsKey(group)) {            this.groupSubscriptions.put(group,new GroupSubscriptions());          }          this.groupSubscriptions.get(group).addSubscription(sub);        }      }      return true;    } catch (    Exception ex) {      logger.log(Level.WARNING,"Failed to load alert subscriptions",ex);      return false;    }  }  return false;}  }
class C{  public boolean isPageBreakNeededBecauseOfMinHeight(LayoutContext context){  float minHeight=getStyle().getFSPageBreakMinHeight(context);  PageBox page=context.getRootLayer().getFirstPage(context,this);  return page != null && getAbsY() + minHeight > page.getBottom();}  }
class C{  public static String clean(final String content,final String baseURI){  final Document.OutputSettings outputSettings=new Document.OutputSettings();  outputSettings.prettyPrint(false);  final String tmp=Jsoup.clean(content,baseURI,Whitelist.relaxed().addAttributes(":all","id","target","class").addTags("span","hr").addAttributes("iframe","src","width","height").addAttributes("audio","controls","src"),outputSettings);  final Document doc=Jsoup.parse(tmp,baseURI,Parser.xmlParser());  final Elements iframes=doc.getElementsByTag("iframe");  for (  final Element iframe : iframes) {    final String src=iframe.attr("src");    if (!src.startsWith("https://wide.b3log.org") && !src.startsWith("http://www.chaojibiaoge.com")) {      iframe.remove();    }  }  final Elements ps=doc.getElementsByTag("p");  for (  final Element p : ps) {    p.removeAttr("style");  }  final Elements as=doc.getElementsByTag("a");  for (  final Element a : as) {    a.attr("rel","nofollow");    final String href=a.attr("href");    if (href.startsWith(Latkes.getServePath())) {      continue;    }    a.attr("target","_blank");  }  final Elements audios=doc.getElementsByTag("audio");  for (  final Element audio : audios) {    final String src=audio.attr("src");    if (!src.startsWith(Symphonys.get("qiniu.domain"))) {      audio.remove();      continue;    }    audio.text(LANG_PROPS_SERVICE.get("notSupportAudioLabel"));    audio.attr("preload","none");  }  return doc.html();}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  public static String formatTime(long time){  return formatTime(new Date(time));}  }
class C{  public static void ensureFromTo(final long bigArrayLength,final long from,final long to){  if (from < 0)   throw new ArrayIndexOutOfBoundsException("Start index (" + from + ") is negative");  if (from > to)   throw new IllegalArgumentException("Start index (" + from + ") is greater than end index ("+ to+ ")");  if (to > bigArrayLength)   throw new ArrayIndexOutOfBoundsException("End index (" + to + ") is greater than big-array length ("+ bigArrayLength+ ")");}  }
class C{  public void finish() throws Exception {}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  return Color.argb(128,r,g,b);}  }
class C{  public static Double calculateCurrentBurnRate(List<Datapoint> dpList){  if (dpList.size() <= 7) {    return null;  }  Datapoint dayOldDatapoint=dpList.get(dpList.size() - 7);  Datapoint latestDatapoint=dpList.get(dpList.size() - 1);  for (  Datapoint datapoint : dpList.subList(dpList.size() - 6,dpList.size() - 1)) {    if (latestDatapoint.getAverage() > dayOldDatapoint.getAverage()) {      break;    }    dayOldDatapoint=datapoint;  }  double currentBurnRate=(latestDatapoint.getAverage() - dayOldDatapoint.getAverage()) / getDateDifference(dayOldDatapoint.getTimestamp(),latestDatapoint.getTimestamp(),TimeUnit.HOURS);  currentBurnRate=(currentBurnRate < 0 ? 0 : currentBurnRate);  return currentBurnRate;}  }
class C{  public static String networkGeolocContentToPersistedGeolocContent(String content) throws PayloadException {  Geoloc geoloc=parseGeolocDocument(content);  return geoloc.toString();}  }
class C{  public final void sample(){synchronized (_lock) {    long count=_totalCount.get();    long lastCount=_lastAvgTotalCount;    _lastAvgTotalCount=count;    long sum=_sum.get();    double lastSum=_lastAvgSum;    _lastAvgSum=sum;    if (count == lastCount) {      _avg=0;    } else {      _avg=_scale * (sum - lastSum) / (double)(count - lastCount);    }  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(')');  return result.toString();}  }
class C{  protected void shutdown(){  _connectionManager.shutdown();}  }
class C{  public ByteSizeValue partSize(){  return partSize;}  }
class C{  public ShopCategoryDTO assignToShop(final long categoryId,final long shopId) throws UnmappedInterfaceException, UnableToCreateInstanceException {  final ShopCategory shopCategory=((ShopCategoryService)shopCategoryGenericService).assignToShop(categoryId,shopId);  ShopCategoryDTO dto=dtoFactory.getByIface(ShopCategoryDTO.class);  shopCategoryAssembler.assembleDto(dto,shopCategory,getAdaptersRepository(),dtoFactory);  return dto;}  }
class C{  public void shuffleFromTo(int from,int to){  if (size == 0)   return;  checkRangeFromTo(from,to,size);  cern.jet.random.Uniform gen=new cern.jet.random.Uniform(new cern.jet.random.engine.DRand(new java.util.Date()));  Object tmpElement;  Object[] theElements=elements;  int random;  for (int i=from; i < to; i++) {    random=gen.nextIntFromTo(i,to);    tmpElement=theElements[random];    theElements[random]=theElements[i];    theElements[i]=tmpElement;  }}  }
class C{  public void resetToDefaults(){  Properties.instance=new Properties(false,true);  for (  Field f : Properties.class.getFields()) {    if (f.isAnnotationPresent(Parameter.class)) {      if (defaultMap.containsKey(f)) {        try {          f.set(null,defaultMap.get(f));        } catch (        Exception e) {          logger.error("Failed to init property field " + f + " , "+ e.getMessage(),e);        }      }    }  }}  }
class C{  public String toString(){  return "ALayoutConstraint [Row=" + m_row + ", Col="+ m_col+ "]";}  }
class C{  public Node(String label,String refer,int backstyle,int shape,Color color,String d){  m_label=label;  m_shape=shape;  m_color=color;  m_refer=refer;  m_center=0;  m_top=0;  m_cVisible=true;  m_visible=true;  m_root=false;  m_parent=new Vector<Edge>(1,1);  m_children=new Vector<Edge>(20,10);  m_lines=new Vector<String>(4,2);  breakupLabel();  m_data=d;  m_theData=null;}  }
class C{  private double estimateMaximumTickLabelWidth(Graphics2D g2,DateTickUnit unit){  RectangleInsets tickLabelInsets=getTickLabelInsets();  double result=tickLabelInsets.getLeft() + tickLabelInsets.getRight();  Font tickLabelFont=getTickLabelFont();  FontRenderContext frc=g2.getFontRenderContext();  LineMetrics lm=tickLabelFont.getLineMetrics("ABCxyz",frc);  if (isVerticalTickLabels()) {    result+=lm.getHeight();  } else {    DateRange range=(DateRange)getRange();    Date lower=range.getLowerDate();    Date upper=range.getUpperDate();    String lowerStr, upperStr;    DateFormat formatter=getDateFormatOverride();    if (formatter != null) {      lowerStr=formatter.format(lower);      upperStr=formatter.format(upper);    } else {      lowerStr=unit.dateToString(lower);      upperStr=unit.dateToString(upper);    }    FontMetrics fm=g2.getFontMetrics(tickLabelFont);    double w1=fm.stringWidth(lowerStr);    double w2=fm.stringWidth(upperStr);    result+=Math.max(w1,w2);  }  return result;}  }
class C{  public void addOrReplaceAutoScaleRule(AutoScaleRule rule){  autoScaler.replaceRule(rule);}  }
class C{  public int readInt(){  return ((buf[position++] & 0xff) + ((buf[position++] & 0xff) << 8) + ((buf[position++] & 0xff) << 16)+ ((buf[position++] & 0xff) << 24));}  }
class C{  @Override public char charAt(final int index){  if (index < 0 || index >= length()) {    throw new StringIndexOutOfBoundsException(index);  }  return buffer[index];}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public boolean isHeaderList(){  return true;}  }
class C{  private void addCubicCurveArea(CubicCurve2D curve){  if (curve.getFlatness() < CURVE_SENSITIVITY) {    appendShapeOutline(new Line2D.Double(curve.getP1(),curve.getP2()));  } else {    CubicCurve2D leftSubcurve=new CubicCurve2D.Double();    CubicCurve2D rightSubcurve=new CubicCurve2D.Double();    curve.subdivide(leftSubcurve,rightSubcurve);    addCubicCurveArea(leftSubcurve);    addCubicCurveArea(rightSubcurve);  }}  }
class C{  public boolean isPostEncumbrance(){  Object oo=get_Value(COLUMNNAME_PostEncumbrance);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Node randomlyAddParenthesis(Expression ex,int minNumParens,int maxNumParens){  Vector<Node> terms=new Vector<>();  if (ex.getOperator() instanceof Operator.Addition) {    terms=ex.splitOnAddition();    int numParensToAdd=randomInt(minNumParens,maxNumParens,true);    int unusedTermsLeft=terms.size();    int tempIndex;    Expression tempEx;    while (unusedTermsLeft > 2 && numParensToAdd > 0) {      tempIndex=randomInt(0,terms.size() - 2,false);      tempEx=new Expression(new Operator.Addition(),terms.remove(tempIndex),terms.remove(tempIndex));      tempEx.setDisplayParentheses(true);      terms.add(tempEx);      unusedTermsLeft--;      numParensToAdd--;    }    return Expression.staggerAddition(terms);  } else   if (ex.getOperator() instanceof Operator.Multiplication) {    terms=ex.splitOnMultiplication();    int numParensToAdd=randomInt(minNumParens,maxNumParens,true);    int unusedTermsLeft=terms.size();    int tempIndex;    Expression tempEx;    while (unusedTermsLeft > 2 && numParensToAdd > 0) {      tempIndex=randomInt(0,terms.size() - 2,false);      tempEx=new Expression(new Operator.Multiplication(),terms.remove(tempIndex),terms.remove(tempIndex));      tempEx.setDisplayParentheses(true);      terms.add(tempEx);      unusedTermsLeft--;      numParensToAdd--;    }    return Expression.staggerMultiplication(terms);  }  return ex;}  }
class C{  public CFlags(final String programName,final String programDescription,final Appendable out,final Appendable err){  this(programName,out,err);  setDescription(programDescription);}  }
class C{  public void clearInternalFlags(Flag... flags){  if (flags == null) {    _log.warn("clearInternalFlags called with null argument");    return;  }  long removeMask=0;  for (  Flag flag : flags) {    removeMask|=flag.getMask();  }  setInternalFlags(_internalFlags & ~removeMask);}  }
class C{  public String html_entry_point(Method m){  String out="";  if (jquery) {    out="<h3>";    String full_cname=m.getCname();    String src_path=full_cname.replace(".","/");    src_path=src_path.replaceFirst("[$][0-9]+","");    if (src_path.indexOf("$") > 0) {      src_path=src_path.substring(0,src_path.indexOf("$"));    }    src_path="jsrc/" + src_path + ".java.html";    if (m.getDeclSourceLocation() != null)     src_path+="#" + m.getDeclSourceLocation().getLine();    out+=html_tooltip_xref(extract_classname(full_cname),full_cname,"class=code","../" + src_path) + ": ";    out+=m.getName().replaceAll("<","&lt;") + " ";    out+="()";    out+="</h3>\n";  } else   if (jqueryMobile) {    out="<div data-role=collapsible data-collapsed=false><h3>";    String full_cname=m.getCname();    out+=html_tooltip(extract_classname(full_cname),full_cname) + ": ";    out+=m.getName().replaceAll("<","&lt;") + " ";    out+="()";    out+="</h3>\n</div>\n";  }  return out;}  }
class C{  private void readCRLF() throws IOException {  int cr=this.in.read();  if (cr != '\r')   throw new IOException("CRLF expected at end of chunk: cr != " + cr);  int lf=this.in.read();  if (lf != '\n')   throw new IOException("CRLF expected at end of chunk: lf != " + lf);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  private static void addToAdapt(Class<? extends Annotation> ann,AnnotatedElement elem){  if (elem == null)   throw new Error("Can't adapt a null element");  if (ann == null)   throw new Error("Can't annotate with null");  Set<Class<? extends Annotation>> set=thingsToAnnotate.get(elem);  if (set == null) {    set=new HashSet<Class<? extends Annotation>>();  }  set.add(ann);  thingsToAnnotate.put(elem,set);}  }
class C{  public FunctionNode createFunctionNode(final Function function){  Preconditions.checkNotNull(function,"Error: Function argument can't be null");  Preconditions.checkNotNull(getFunction(function.getNative()),"Error: Function does not belong to this container");  final CFunctionNode functionNode=naviView.getContent().createFunctionNode(function.getNative());  return (FunctionNode)cachedNodes.get(functionNode);}  }
class C{  public void createTopic(String topic,int partitions,int replication,Properties topicConfig){  log.debug("Creating topic { name: {}, partitions: {}, replication: {}, config: {} }",topic,partitions,replication,topicConfig);  ZkClient zkClient=new ZkClient(zookeeperConnect(),DEFAULT_ZK_SESSION_TIMEOUT_MS,DEFAULT_ZK_CONNECTION_TIMEOUT_MS,ZKStringSerializer$.MODULE$);  boolean isSecure=false;  ZkUtils zkUtils=new ZkUtils(zkClient,new ZkConnection(zookeeperConnect()),isSecure);  AdminUtils.createTopic(zkUtils,topic,partitions,replication,topicConfig,RackAwareMode.Enforced$.MODULE$);  zkClient.close();}  }
class C{  public int findColumn(String columnName) throws SQLException {  return getColIdxByName(columnName);}  }
class C{  public static FileStore open(DataHandler handler,String name,String mode,String cipher,byte[] key){  return open(handler,name,mode,cipher,key,Constants.ENCRYPTION_KEY_HASH_ITERATIONS);}  }
class C{  private Geometry binaryUnion(List geoms){  return binaryUnion(geoms,0,geoms.size());}  }
class C{  private static int fromUtf8(int prefix,int nChunks,char[] chars,int offset,int limit){  int cur=offset + 2;  int end=cur + 1 + 3 * nChunks;  if (end > limit) {    return -1;  }  int bits=prefix;  for (int i=0; i < nChunks; ++i) {    if (chars[++cur] != '%') {      return -1;    }    int a=fromHex(chars[++cur]);    if (a < 0 || ((a & 0xc) != 0x8)) {      return -1;    }    int b=fromHex(chars[++cur]);    if (b < 0) {      return -1;    }    bits=(bits << 6) | (((a & 0x3) << 4) | b);  }  return bits;}  }
class C{  @Override public void doFilter(final ServletRequest request,final ServletResponse response,final FilterChain chain) throws IOException, ServletException {  final SlingHttpServletRequest slingRequest=(SlingHttpServletRequest)request;  final SlingHttpServletResponse slingResponse=(SlingHttpServletResponse)response;  final Resource resource=slingRequest.getResource();  final String method=slingRequest.getMethod();  final String resourceType=resource.getResourceType();  response.setCharacterEncoding(CharEncoding.UTF_8);  if ("GET".equals(method) && PublickConstants.PAGE_TYPE_BLOG.equals(resourceType)) {    if (!resource.getValueMap().get("visible",false)) {      final boolean authorable=userService.isAuthorable(slingRequest.getResourceResolver().adaptTo(Session.class));      if (authorable) {        PrintWriter out=response.getWriter();        CharResponseWrapper responseWrapper=new CharResponseWrapper((HttpServletResponse)response);        try {          chain.doFilter(request,responseWrapper);        } catch (        Exception e) {          LOGGER.error("Could not continue chain",e);          chain.doFilter(request,response);        }        final String servletResponse=new String(responseWrapper.toString());        final String previewHeader=getPreviewHeader(slingRequest,PREVIEW_HEADER_PATH);        if (servletResponse != null && servletResponse.contains(INSERTION_TAG)) {          String[] html=servletResponse.split(INSERTION_TAG);          out.write(html[0] + INSERTION_TAG + previewHeader+ html[1]);        } else {          out.write(servletResponse + previewHeader);        }      } else {        slingResponse.sendError(SlingHttpServletResponse.SC_NOT_FOUND);      }    } else {      chain.doFilter(request,slingResponse);    }  } else {    chain.doFilter(request,slingResponse);  }}  }
class C{  public Matrix4f rotationZYX(float angleZ,float angleY,float angleX){  float cosZ=(float)Math.cos(angleZ);  float sinZ=(float)Math.sin(angleZ);  float cosY=(float)Math.cos(angleY);  float sinY=(float)Math.sin(angleY);  float cosX=(float)Math.cos(angleX);  float sinX=(float)Math.sin(angleX);  float m_sinZ=-sinZ;  float m_sinY=-sinY;  float m_sinX=-sinX;  float nm00=cosZ;  float nm01=sinZ;  float nm10=m_sinZ;  float nm11=cosZ;  float nm20=nm00 * sinY;  float nm21=nm01 * sinY;  float nm22=cosY;  this._m00(nm00 * cosY);  this._m01(nm01 * cosY);  this._m02(m_sinY);  this._m03(0.0f);  this._m10(nm10 * cosX + nm20 * sinX);  this._m11(nm11 * cosX + nm21 * sinX);  this._m12(nm22 * sinX);  this._m13(0.0f);  this._m20(nm10 * m_sinX + nm20 * cosX);  this._m21(nm11 * m_sinX + nm21 * cosX);  this._m22(nm22 * cosX);  this._m23(0.0f);  this._m30(0.0f);  this._m31(0.0f);  this._m32(0.0f);  this._m33(1.0f);  _properties(PROPERTY_AFFINE);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:08:17.589 -0500",hash_original_method="CB7D3E0240991717B6E669C9E8E3B659",hash_generated_method="2849732C64D0FF8A349C153E50FB1717") public static String newStringUtf16(byte[] bytes){  return StringUtils.newString(bytes,CharEncoding.UTF_16);}  }
class C{  protected HARegionQueue createHARegionQueue(String name,HARegionQueueAttributes attrs) throws IOException, ClassNotFoundException, CacheException, InterruptedException {  HARegionQueue regionqueue=HARegionQueue.getHARegionQueueInstance(name,cache,attrs,HARegionQueue.BLOCKING_HA_QUEUE,false);  return regionqueue;}  }
class C{  public AbstractApiServlet(Logger logger,Class<?> clazz){  this(logger,MetricsFactory.getMetrics("web",clazz));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  public HeaderCard(String key,float value,int precision,String comment) throws HeaderCardException {  this(key,dblString(floatToBigDecimal(value),precision,spaceAvailableForValue(key)),comment,false,false);}  }
class C{  public void doFilter(GenericContainerResponse containerResponse){  Object entity=containerResponse.getEntity();  if (entity == null) {    return;  }  if (!MediaType.APPLICATION_JSON_TYPE.equals(containerResponse.getContentType())) {    return;  }  ApplicationContext applicationContext=ApplicationContext.getCurrent();  Request request=applicationContext.getRequest();  if (!HttpMethod.GET.equals(request.getMethod())) {    return;  }  HashFunction hashFunction=Hashing.md5();  Hasher hasher=hashFunction.newHasher();  boolean hashingSuccess=true;  if (entity instanceof List) {    List<?> entities=(List)entity;    for (    Object simpleEntity : entities) {      hashingSuccess=addHash(simpleEntity,hasher);      if (!hashingSuccess) {        break;      }    }  } else {    hashingSuccess=addHash(entity,hasher);  }  if (hashingSuccess) {    HashCode hashCode=hasher.hash();    EntityTag entityTag=new EntityTag(hashCode.toString());    Response.ResponseBuilder builder=request.evaluatePreconditions(entityTag);    if (builder != null) {      containerResponse.setResponse(builder.tag(entityTag).build());    } else {      Response.ResponseBuilder responseBuilder=Response.fromResponse(containerResponse.getResponse()).tag(entityTag);      containerResponse.setResponse(responseBuilder.build());    }  }}  }
class C{  public boolean containsKey(int key){  return contains(key);}  }
class C{  public static void recordDef(RegisterOperand regOp){  Register reg=regOp.getRegister();  if (SUPRESS_DU_FOR_PHYSICALS && reg.isPhysical())   return;  regOp.setNext(reg.defList);  reg.defList=regOp;}  }
class C{  public int countBlock(final Region region,final Set<Integer> searchIDs){  final boolean[] ids=new boolean[256];  for (  final int id : searchIDs) {    if ((id < 256) && (id > 0)) {      ids[id]=true;    }  }  return this.countBlock(region,ids);}  }
class C{  public static void pushChild(SimpleNode parent,SimpleNode child){  int parentSize=parent.jjtGetNumChildren();  parent.jjtAddChild(null,parentSize);  Node currentHeadChild=parent.jjtGetChild(0);  parent.jjtAddChild(child,0);  if (currentHeadChild != null) {    parent.jjtAddChild(currentHeadChild,parentSize);  }  child.jjtSetParent(parent);}  }
class C{  public ControlFlowDistance(){  approachLevel=0;  branchDistance=0.0;}  }
class C{  public boolean addEdge(Edge e){  if (!edges.add(e))   return false;  stream.add(e);  Edge position=null;  position=srcUnitToEdge.get(e.srcUnit());  if (position == null) {    srcUnitToEdge.put(e.srcUnit(),e);    position=dummy;  }  e.insertAfterByUnit(position);  position=srcMethodToEdge.get(e.getSrc());  if (position == null) {    srcMethodToEdge.put(e.getSrc(),e);    position=dummy;  }  e.insertAfterBySrc(position);  position=tgtToEdge.get(e.getTgt());  if (position == null) {    tgtToEdge.put(e.getTgt(),e);    position=dummy;  }  e.insertAfterByTgt(position);  return true;}  }
class C{  public void addChecksListener(PropertyChangeListener l){synchronized (checkListeners) {    if (!checkListeners.contains(l)) {      checkListeners.add(l);    }  }}  }
class C{  public S1Interval union(final S1Interval y){  if (y.isEmpty()) {    return this;  }  if (fastContains(y.lo())) {    if (fastContains(y.hi())) {      if (contains(y)) {        return this;      }      return full();    }    return new S1Interval(lo(),y.hi(),true);  }  if (fastContains(y.hi())) {    return new S1Interval(y.lo(),hi(),true);  }  if (isEmpty() || y.fastContains(lo())) {    return y;  }  double dlo=positiveDistance(y.hi(),lo());  double dhi=positiveDistance(hi(),y.lo());  if (dlo < dhi) {    return new S1Interval(y.lo(),hi(),true);  } else {    return new S1Interval(lo(),y.hi(),true);  }}  }
class C{  public void addReportStream(final ReportStream stream){  reportStreamMap.put(stream.getName(),stream);}  }
class C{  public boolean closeIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  setDocAction(DOCACTION_None);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  public boolean endsWith(String suffix){  return regionMatches(count - suffix.count,suffix,0,suffix.count);}  }
class C{  public LiveChatConnection(Credentials credentials,LiveChatListener listener){  this.credentials=credentials;  this.listener=listener;}  }
class C{  public TranslatedPrintable(Printable painter,Point2D origin){  m_Painter=painter;  m_Origin=origin;}  }
class C{  public boolean decipherAppObject(final FormObject form){  String fontStr="";  final PdfObject appObj=form.getDictionary(PdfDictionary.AP).getDictionary(PdfDictionary.N);  if (appObj != null) {    final byte[] bytes=appObj.getDecodedStream();    if (bytes != null) {      int startTf=-1;      int endTf=-1;      int startTj;      int endTj=-1;      final int end=bytes.length;      for (int i=0; i < end - 1; i++) {        if ((((char)bytes[i]) == 'T' && ((char)bytes[i + 1]) == 'f') && (i + 2 >= end || bytes[i + 2] == 10 || bytes[i + 2] == 13 || bytes[i + 2] == ' ')) {          endTf=i + 2;          break;        }      }      if (endTf == -1) {        startTf=0;        endTf=0;      } else {        for (int i=endTf - 3; i > startTf; i--) {          if (bytes[i] == '/') {            startTf=i;            break;          }        }      }      for (int i=endTf; i < end - 1; i++) {        if ((((char)bytes[i]) == 'T' && ((char)bytes[i + 1]) == 'j') && (i + 2 >= end || bytes[i + 2] == 10 || bytes[i + 2] == 13 || bytes[i + 2] == ' ')) {          endTj=i + 2;          break;        }      }      if (endTj == -1) {        startTj=endTf;        endTj=endTf;      } else {        startTj=endTf;        int brackets=0;        boolean strFound=false;        OUTER:         for (int i=endTj - 3; i > startTj; i--) {switch (bytes[i]) {case ' ':case 10:case 13:            if (strFound && brackets == 0) {              startTj=i + 1;              break OUTER;            }          break;case ')':        brackets++;      break;case '(':    brackets--;  if (brackets == 0 && strFound) {    startTj=i;    break OUTER;  }break;default :strFound=true;break;}}}for (int i=endTf; i < startTj; i++) {if (bytes[i] == ' ' || bytes[i] == 10 || bytes[i] == 13) {} else if (bytes[i] > 47 && bytes[i] < 58) {} else {if (bytes[i] == 'g' && i + 1 < startTj && (bytes[i + 1] == ' ' || bytes[i + 1] == 10 || bytes[i + 1] == 13)) {endTf=i + 1;break;} else if (bytes[i] == 'r' && i + 2 < startTj && bytes[i + 1] == 'g' && (bytes[i + 2] == ' ' || bytes[i + 2] == 10 || bytes[i + 2] == 13)) {endTf=i + 2;break;} else {break;}}}if (endTj != endTf) {if (endTf == 0) {preFontStream=new String(bytes,0,startTj);betweenFontAndTextStream=" ";} else {preFontStream=new String(bytes,0,startTf);fontStr=new String(bytes,startTf,endTf - startTf);betweenFontAndTextStream=new String(bytes,endTf,startTj - endTf);}text=new String(bytes,startTj,endTj - 3 - startTj);afterTextStream=new String(bytes,endTj,bytes.length - endTj);} else {if (endTf == 0) {preFontStream=new String(bytes);} else {preFontStream=new String(bytes,0,startTf);fontStr=new String(bytes,startTf,endTf - startTf);betweenFontAndTextStream=new String(bytes,endTf,bytes.length - endTf);}}}}final String DA=form.getTextStreamValue(PdfDictionary.DA);fakeObj=new XObject(form.getObjectRefAsString());if (DA == null || DA.isEmpty()) {if (!fontStr.isEmpty()) {form.setTextStreamValue(PdfDictionary.DA,StringUtils.toBytes(fontStr));FormStream.decodeFontCommandObj(fontStr,form);}return false;} else {if (fontStr.isEmpty()) {int ptr=DA.indexOf('/');if (ptr < 0) {ptr=0;}fontStr=DA.substring(ptr).trim();} else {final String fontname=DA.substring(0,DA.indexOf(' '));final String fontsize=fontStr.substring(fontStr.indexOf(' '),fontStr.length());fontStr=fontname + fontsize;fontStr=fontStr.trim();}}if (resources != null) {fakeObj.setDictionary(PdfDictionary.Resources,resources);}final Rectangle BBox=form.getBoundingRectangle();if (BBox != null) {fakeObj.setFloatArray(PdfDictionary.BBox,new float[]{BBox.width,0,0,BBox.height,0,0});}subtype=-1;if (preFontStream.isEmpty() || !preFontStream.contains("BT")) {preFontStream="BT 0 0 0 RG 1 TFS ";betweenFontAndTextStream=" 1 0 0 1 0 0 Tm ";afterTextStream="";}final int sizeSt=fontStr.indexOf(' ');int sizeEn=-1;boolean strFound=false;for (int i=sizeSt; i < fontStr.length(); i++) {final char chr=fontStr.charAt(i);if (chr == ' ' || chr == 10 || chr == 13) {if (strFound) {sizeEn=i;break;}} else {strFound=true;}}float size=12;if (sizeEn != -1) {fontName=fontStr.substring(0,sizeSt);fontCommand=fontStr.substring(sizeEn);size=Float.parseFloat(fontStr.substring(sizeSt,sizeEn));}if (fontName.isEmpty()) {final Font textFont=form.getTextFont();fontName='/' + textFont.getFontName();fontCommand="Tf ";}if (size == 0 || size == -1) {size=GUIData.calculateFontSize(BBox.height,BBox.width,false,text);}fontSize=" " + size + ' ';return true;}  }
class C{  public void init(InputStream input,String sqlDefsSection,Connection conn,Map<String,String> configParameters) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  Document sqlDoc=builder.parse(input);  init(sqlDoc,sqlDefsSection,conn,configParameters);}  }
class C{  private void runDijkstra(){  if (!graph.containsKey(SOURCE_ID)) {    System.err.printf("Graph doesn't contain dummy PseudoRouteStop \"%s\"\n",SOURCE_ID);    return;  }  NavigableSet<PseudoRouteStop> queue=new TreeSet<>();  queue.add(graph.get(SOURCE_ID));  PseudoRouteStop currentStop, neighbour;  while (!queue.isEmpty()) {    currentStop=queue.pollFirst();    for (    Map.Entry<PseudoRouteStop,Double> n : currentStop.getNeighbours().entrySet()) {      neighbour=n.getKey();      final double alternateDist=currentStop.getTravelCostToSource() + n.getValue();      if (alternateDist < neighbour.getTravelCostToSource()) {        queue.remove(neighbour);        neighbour.setTravelCostToSource(alternateDist);        neighbour.setClosestPrecedingRouteSTop(currentStop);        queue.add(neighbour);      }    }  }}  }
class C{  private void removeUnusedTilesets(final Map map){  for (final Iterator<?> sets=map.getTileSets().iterator(); sets.hasNext(); ) {    final TileSet tileset=(TileSet)sets.next();    if (!isUsedTileset(map,tileset)) {      sets.remove();    }  }}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,ReplySender replySender,ReplyException ex,VersionTag version){  Assert.assertTrue(recipient != null,"InvalidateReplyMessage NULL reply message");  InvalidateReplyMessage m=new InvalidateReplyMessage(processorId,version,ex);  m.setRecipient(recipient);  replySender.putOutgoing(m);}  }
class C{  public boolean removeAll(Collection<?> c){  boolean modified=false;  for (  Object e : c)   if (remove(e))   modified=true;  return modified;}  }
class C{  public void enable(){}  }
class C{  public void inject(Object object){  objectGraph.inject(object);}  }
class C{  public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  int end=offset + length;  while (offset < end) {    int ch1=buf[offset++] & 0xff;    if (ch1 < 0x80)     os.write(ch1); else     if ((ch1 & 0xe0) == 0xc0) {      if (offset >= end)       throw new EOFException("unexpected end of file in utf8 character");      int ch2=buf[offset++] & 0xff;      if ((ch2 & 0xc0) != 0x80)       throw new CharConversionException("illegal utf8 encoding");      os.write(((ch1 & 0x1f) << 6) + (ch2 & 0x3f));    } else     if ((ch1 & 0xf0) == 0xe0) {      if (offset + 1 >= end)       throw new EOFException("unexpected end of file in utf8 character");      int ch2=buf[offset++] & 0xff;      int ch3=buf[offset++] & 0xff;      if ((ch2 & 0xc0) != 0x80)       throw new CharConversionException("illegal utf8 encoding");      if ((ch3 & 0xc0) != 0x80)       throw new CharConversionException("illegal utf8 encoding");      os.write(((ch1 & 0x1f) << 12) + ((ch2 & 0x3f) << 6) + (ch3 & 0x3f));    } else     throw new CharConversionException("illegal utf8 encoding at (" + (int)ch1 + ")");  }}  }
class C{  private static boolean isEdgeDataValid(final Quad<Integer,IAddress,Integer,IAddress> edgeData){  if ((edgeData.second() == null) || (edgeData.fourth() == null)) {    return false;  }  if ((edgeData.first() == -1) || (edgeData.third() == -1)) {    return false;  }  return true;}  }
class C{  private void initializeViews(){  mCountEditText=(EditText)findViewById(R.id.count);  mSetFab=(FloatingActionButton)findViewById(R.id.set_fab);  mStartOrStopFab=(FloatingActionButton)findViewById(R.id.play_fab);  mCountEditText.setVisibility(View.INVISIBLE);  mStartOrStopFab.setVisibility(View.INVISIBLE);  mCountEditText.setOnEditorActionListener(null);}  }
class C{  public boolean hasMore(){  return resultNumber == (end + 1);}  }
class C{  public InputContactMessageContent build(){  return new InputContactMessageContent(phone_number,first_name,last_name);}  }
class C{  public void updateStatus(String message){}  }
class C{  public int size(){  return this.tables.size();}  }
class C{  boolean checkServiceName(String serviceName){  char[] chars=serviceName.toCharArray();  for (  char c : chars) {    if (Character.isISOControl(c) && c != '\t' && c != ' ') {      return true;    }  }  return false;}  }
class C{  public static boolean isIPv4(final String ip){  if (StringUtils.isBlank(ip)) {    return false;  }  final String regex="^(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|[1-9])\\." + "(00?\\d|1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\." + "(00?\\d|1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\."+ "(00?\\d|1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)$";  final Pattern pattern=Pattern.compile(regex);  final Matcher matcher=pattern.matcher(ip);  return matcher.matches();}  }
class C{  public Builder intent(Intent intent){  if (intents == null) {    intents=new ArrayList<Intent>();  }  intents.add(intent);  return this;}  }
class C{  public static final Criterion internalDateOn(Date date,DateResolution res){  return new InternalDateCriterion(new DateOperator(DateComparator.ON,date,res));}  }
class C{  @Scheduled(cron="${batch.greeting.cron}") public void cronJob(){  logger.info("> cronJob");  Collection<Greeting> greetings=greetingService.findAll();  logger.info("There are {} greetings in the data store.",greetings.size());  logger.info("< cronJob");}  }
class C{  private static <E>int calculateSize(List<E> sortedInputList,Comparator<? super E> comparator){  long permutations=1;  int n=1;  int r=1;  while (n < sortedInputList.size()) {    int comparison=comparator.compare(sortedInputList.get(n - 1),sortedInputList.get(n));    if (comparison < 0) {      permutations*=binomial(n,r);      r=0;      if (!isPositiveInt(permutations)) {        return Integer.MAX_VALUE;      }    }    n++;    r++;  }  permutations*=binomial(n,r);  if (!isPositiveInt(permutations)) {    return Integer.MAX_VALUE;  }  return (int)permutations;}  }
class C{  public static void main(String[] args){  DOMTestCase.doMain(alltests.class,args);}  }
class C{  protected XmlHandler createHandler(QName qName,Element parent,Element child,ElementMetadata<?,?> metadata){  return new XmlHandler(vc,parent,child,metadata);}  }
class C{  public boolean isGlobalBlacklistEnabled(){  return (this.globalBlacklistTimeout > 0);}  }
class C{  private boolean isRedundant(Coordinate pt){  if (ptList.size() < 1)   return false;  Coordinate lastPt=(Coordinate)ptList.get(ptList.size() - 1);  double ptDist=pt.distance(lastPt);  if (ptDist < minimimVertexDistance)   return true;  return false;}  }
class C{  private int workOutHeight(Transaction transaction){  return -1;}  }
class C{  public static DateTimeFormatter dateHourMinute(){  if (dhm == null) {    dhm=new DateTimeFormatterBuilder().append(date()).append(literalTElement()).append(hourMinute()).toFormatter();  }  return dhm;}  }
class C{  public final void mul(Matrix4f m1,Matrix4f m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m01 * m2.m10 + m1.m02 * m2.m20 + m1.m03 * m2.m30;    this.m01=m1.m00 * m2.m01 + m1.m01 * m2.m11 + m1.m02 * m2.m21 + m1.m03 * m2.m31;    this.m02=m1.m00 * m2.m02 + m1.m01 * m2.m12 + m1.m02 * m2.m22 + m1.m03 * m2.m32;    this.m03=m1.m00 * m2.m03 + m1.m01 * m2.m13 + m1.m02 * m2.m23 + m1.m03 * m2.m33;    this.m10=m1.m10 * m2.m00 + m1.m11 * m2.m10 + m1.m12 * m2.m20 + m1.m13 * m2.m30;    this.m11=m1.m10 * m2.m01 + m1.m11 * m2.m11 + m1.m12 * m2.m21 + m1.m13 * m2.m31;    this.m12=m1.m10 * m2.m02 + m1.m11 * m2.m12 + m1.m12 * m2.m22 + m1.m13 * m2.m32;    this.m13=m1.m10 * m2.m03 + m1.m11 * m2.m13 + m1.m12 * m2.m23 + m1.m13 * m2.m33;    this.m20=m1.m20 * m2.m00 + m1.m21 * m2.m10 + m1.m22 * m2.m20 + m1.m23 * m2.m30;    this.m21=m1.m20 * m2.m01 + m1.m21 * m2.m11 + m1.m22 * m2.m21 + m1.m23 * m2.m31;    this.m22=m1.m20 * m2.m02 + m1.m21 * m2.m12 + m1.m22 * m2.m22 + m1.m23 * m2.m32;    this.m23=m1.m20 * m2.m03 + m1.m21 * m2.m13 + m1.m22 * m2.m23 + m1.m23 * m2.m33;    this.m30=m1.m30 * m2.m00 + m1.m31 * m2.m10 + m1.m32 * m2.m20 + m1.m33 * m2.m30;    this.m31=m1.m30 * m2.m01 + m1.m31 * m2.m11 + m1.m32 * m2.m21 + m1.m33 * m2.m31;    this.m32=m1.m30 * m2.m02 + m1.m31 * m2.m12 + m1.m32 * m2.m22 + m1.m33 * m2.m32;    this.m33=m1.m30 * m2.m03 + m1.m31 * m2.m13 + m1.m32 * m2.m23 + m1.m33 * m2.m33;  } else {    float m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33;    m00=m1.m00 * m2.m00 + m1.m01 * m2.m10 + m1.m02 * m2.m20 + m1.m03 * m2.m30;    m01=m1.m00 * m2.m01 + m1.m01 * m2.m11 + m1.m02 * m2.m21 + m1.m03 * m2.m31;    m02=m1.m00 * m2.m02 + m1.m01 * m2.m12 + m1.m02 * m2.m22 + m1.m03 * m2.m32;    m03=m1.m00 * m2.m03 + m1.m01 * m2.m13 + m1.m02 * m2.m23 + m1.m03 * m2.m33;    m10=m1.m10 * m2.m00 + m1.m11 * m2.m10 + m1.m12 * m2.m20 + m1.m13 * m2.m30;    m11=m1.m10 * m2.m01 + m1.m11 * m2.m11 + m1.m12 * m2.m21 + m1.m13 * m2.m31;    m12=m1.m10 * m2.m02 + m1.m11 * m2.m12 + m1.m12 * m2.m22 + m1.m13 * m2.m32;    m13=m1.m10 * m2.m03 + m1.m11 * m2.m13 + m1.m12 * m2.m23 + m1.m13 * m2.m33;    m20=m1.m20 * m2.m00 + m1.m21 * m2.m10 + m1.m22 * m2.m20 + m1.m23 * m2.m30;    m21=m1.m20 * m2.m01 + m1.m21 * m2.m11 + m1.m22 * m2.m21 + m1.m23 * m2.m31;    m22=m1.m20 * m2.m02 + m1.m21 * m2.m12 + m1.m22 * m2.m22 + m1.m23 * m2.m32;    m23=m1.m20 * m2.m03 + m1.m21 * m2.m13 + m1.m22 * m2.m23 + m1.m23 * m2.m33;    m30=m1.m30 * m2.m00 + m1.m31 * m2.m10 + m1.m32 * m2.m20 + m1.m33 * m2.m30;    m31=m1.m30 * m2.m01 + m1.m31 * m2.m11 + m1.m32 * m2.m21 + m1.m33 * m2.m31;    m32=m1.m30 * m2.m02 + m1.m31 * m2.m12 + m1.m32 * m2.m22 + m1.m33 * m2.m32;    m33=m1.m30 * m2.m03 + m1.m31 * m2.m13 + m1.m32 * m2.m23 + m1.m33 * m2.m33;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m03=m03;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m13=m13;    this.m20=m20;    this.m21=m21;    this.m22=m22;    this.m23=m23;    this.m30=m30;    this.m31=m31;    this.m32=m32;    this.m33=m33;  }}  }
class C{  public Update(Name zone){  this(zone,DClass.IN);}  }
class C{  public static boolean isUrl(String resourceLocation){  if (resourceLocation == null) {    return false;  }  if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {    return true;  }  try {    new URL(resourceLocation);    return true;  } catch (  MalformedURLException ex) {    return false;  }}  }
class C{  public ReedSolomon(int dataShardCount,int parityShardCount,CodingLoop codingLoop){  if (256 < dataShardCount + parityShardCount) {    throw new IllegalArgumentException("too many shards - max is 256");  }  this.dataShardCount=dataShardCount;  this.parityShardCount=parityShardCount;  this.codingLoop=codingLoop;  this.totalShardCount=dataShardCount + parityShardCount;  matrix=buildMatrix(dataShardCount,this.totalShardCount);  parityRows=new byte[parityShardCount][];  for (int i=0; i < parityShardCount; i++) {    parityRows[i]=matrix.getRow(dataShardCount + i);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:59.216 -0400",hash_original_method="19C6345BE120C3CA498C8DC19F1539F4",hash_generated_method="8A3F20711BC57180EAAE7F66140628CA") public void putAdvancedOption(String key,int value){  if (mPrototype.mAdvancedOptions == null) {    mPrototype.mAdvancedOptions=new Bundle();  }  mPrototype.mAdvancedOptions.putInt(key,value);}  }
class C{  public void fine(CharSequence message){  log(Level.FINE,message);}  }
class C{  public static double nextTriangular(MersenneTwisterFast randomGenerator){  double u;  u=randomGenerator.nextDouble();  if (u <= 0.5)   return (Math.sqrt(2.0 * u) - 1.0); else   return (1.0 - Math.sqrt(2.0 * (1.0 - u)));}  }
class C{  public void paintInternalFrameTitlePaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static int[] selectVideoFormatsForDefaultDisplay(Context context,List<? extends FormatWrapper> formatWrappers,String[] allowedContainerMimeTypes,boolean filterHdFormats) throws DecoderQueryException {  Point viewportSize=Util.getPhysicalDisplaySize(context);  return selectVideoFormats(formatWrappers,allowedContainerMimeTypes,filterHdFormats,true,false,viewportSize.x,viewportSize.y);}  }
class C{  public static void safeInvokeAndWait(Runnable runnable){  if (EventQueue.isDispatchThread())   runnable.run(); else {    try {      SwingUtilities.invokeAndWait(runnable);    } catch (    InvocationTargetException ite) {      Throwable t=ite.getTargetException();      if (t instanceof Error)       throw (Error)t; else       if (t instanceof RuntimeException)       throw (RuntimeException)t; else       ErrorService.error(t);    }catch (    InterruptedException ignored) {    }  }}  }
class C{  public static int gcd(final int p,final int q){  int u=p;  int v=q;  if ((u == 0) || (v == 0)) {    if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {      throw MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31",p,q);    }    return (Math.abs(u) + Math.abs(v));  }  if (u > 0) {    u=-u;  }  if (v > 0) {    v=-v;  }  int k=0;  while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {    u/=2;    v/=2;    k++;  }  if (k == 31) {    throw MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31",p,q);  }  int t=((u & 1) == 1) ? v : -(u / 2);  do {    while ((t & 1) == 0) {      t/=2;    }    if (t > 0) {      u=-t;    } else {      v=t;    }    t=(v - u) / 2;  } while (t != 0);  return -u * (1 << k);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.TAG_VALUE__KEY:    return KEY_EDEFAULT == null ? key != null : !KEY_EDEFAULT.equals(key);}return super.eIsSet(featureID);}  }
class C{  protected Glyf(){}  }
class C{  protected String doIt() throws java.lang.Exception {  log.info("IsValidateOnly=" + m_IsValidateOnly + ", IsImportOnlyNoErrors="+ m_IsImportOnlyNoErrors);  StringBuffer sql=null;  int no=0;  String clientCheck=" AND AD_Client_ID=" + m_AD_Client_ID;  if (m_DeleteOldImported) {    sql=new StringBuffer("DELETE I_GLJournal " + "WHERE I_IsImported='Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.fine("Delete Old Impored =" + no);  }  sql=new StringBuffer("UPDATE I_GLJournal " + "SET IsActive = COALESCE (IsActive, 'Y')," + " Created = COALESCE (Created, SysDate),"+ " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = COALESCE (UpdatedBy, 0),"+ " I_ErrorMsg = ' ',"+ " I_IsImported = 'N' "+ "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Reset=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET AD_Client_ID=(SELECT c.AD_Client_ID FROM AD_Client c WHERE c.Value=i.ClientValue) " + "WHERE (AD_Client_ID IS NULL OR AD_Client_ID=0) AND ClientValue IS NOT NULL"+ " AND I_IsImported<>'Y'");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Client from Value=" + no);  sql=new StringBuffer("UPDATE I_GLJournal " + "SET AD_Client_ID = COALESCE (AD_Client_ID,").append(m_AD_Client_ID).append(")," + " AD_OrgDoc_ID = COALESCE (AD_OrgDoc_ID,").append(m_AD_Org_ID).append("),");  if (m_C_AcctSchema_ID != 0)   sql.append(" C_AcctSchema_ID = COALESCE (C_AcctSchema_ID,").append(m_C_AcctSchema_ID).append("),");  if (m_DateAcct != null)   sql.append(" DateAcct = COALESCE (DateAcct,").append(DB.TO_DATE(m_DateAcct)).append("),");  sql.append(" Updated = COALESCE (Updated, SysDate) " + "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Client/DocOrg/Default=" + no);  sql=new StringBuffer("UPDATE I_GLJournal o " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Doc Org, '" + "WHERE (AD_OrgDoc_ID IS NULL OR AD_OrgDoc_ID=0"+ " OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_OrgDoc_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Doc Org=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET C_AcctSchema_ID=(SELECT a.C_AcctSchema_ID FROM C_AcctSchema a" + " WHERE i.AcctSchemaName=a.Name AND i.AD_Client_ID=a.AD_Client_ID) "+ "WHERE C_AcctSchema_ID IS NULL AND AcctSchemaName IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set AcctSchema from Name=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET C_AcctSchema_ID=(SELECT c.C_AcctSchema1_ID FROM AD_ClientInfo c WHERE c.AD_Client_ID=i.AD_Client_ID) " + "WHERE C_AcctSchema_ID IS NULL AND AcctSchemaName IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set AcctSchema from Client=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid AcctSchema, '" + "WHERE (C_AcctSchema_ID IS NULL OR C_AcctSchema_ID=0"+ " OR NOT EXISTS (SELECT * FROM C_AcctSchema a WHERE i.AD_Client_ID=a.AD_Client_ID))"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid AcctSchema=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET DateAcct=SysDate " + "WHERE DateAcct IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set DateAcct=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET C_DocType_ID=(SELECT d.C_DocType_ID FROM C_DocType d" + " WHERE d.Name=i.DocTypeName AND d.DocBaseType='GLJ' AND i.AD_Client_ID=d.AD_Client_ID) "+ "WHERE C_DocType_ID IS NULL AND DocTypeName IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set DocType=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid DocType, '" + "WHERE (C_DocType_ID IS NULL OR C_DocType_ID=0"+ " OR NOT EXISTS (SELECT * FROM C_DocType d WHERE i.AD_Client_ID=d.AD_Client_ID AND d.DocBaseType='GLJ'))"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid DocType=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET GL_Category_ID=(SELECT c.GL_Category_ID FROM GL_Category c" + " WHERE c.Name=i.CategoryName AND i.AD_Client_ID=c.AD_Client_ID) "+ "WHERE GL_Category_ID IS NULL AND CategoryName IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set DocType=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Category, '" + "WHERE (GL_Category_ID IS NULL OR GL_Category_ID=0)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid GLCategory=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET C_Currency_ID=(SELECT c.C_Currency_ID FROM C_Currency c" + " WHERE c.ISO_Code=i.ISO_Code AND c.AD_Client_ID IN (0,i.AD_Client_ID)) "+ "WHERE C_Currency_ID IS NULL AND ISO_Code IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Currency from ISO=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET C_Currency_ID=(SELECT a.C_Currency_ID FROM C_AcctSchema a" + " WHERE a.C_AcctSchema_ID=i.C_AcctSchema_ID AND a.AD_Client_ID=i.AD_Client_ID)"+ "WHERE C_Currency_ID IS NULL AND ISO_Code IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Default Currency=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Currency, '" + "WHERE (C_Currency_ID IS NULL OR C_Currency_ID=0)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Currency=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET ConversionTypeValue='S' " + "WHERE C_ConversionType_ID IS NULL AND ConversionTypeValue IS NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set CurrencyType Value to Spot =" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET C_ConversionType_ID=(SELECT c.C_ConversionType_ID FROM C_ConversionType c" + " WHERE c.Value=i.ConversionTypeValue AND c.AD_Client_ID IN (0,i.AD_Client_ID)) "+ "WHERE C_ConversionType_ID IS NULL AND ConversionTypeValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set CurrencyType from Value=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid CurrencyType, '" + "WHERE (C_ConversionType_ID IS NULL OR C_ConversionType_ID=0) AND ConversionTypeValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid CurrencyTypeValue=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No ConversionType, '" + "WHERE (C_ConversionType_ID IS NULL OR C_ConversionType_ID=0)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No CourrencyType=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET CurrencyRate=1" + "WHERE EXISTS (SELECT * FROM C_AcctSchema a"+ " WHERE a.C_AcctSchema_ID=i.C_AcctSchema_ID AND a.C_Currency_ID=i.C_Currency_ID)"+ " AND C_Currency_ID IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Home CurrencyRate=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET CurrencyRate=(SELECT MAX(r.MultiplyRate) FROM C_Conversion_Rate r, C_AcctSchema s" + " WHERE s.C_AcctSchema_ID=i.C_AcctSchema_ID AND s.AD_Client_ID=i.AD_Client_ID"+ " AND r.C_Currency_ID=i.C_Currency_ID AND r.C_Currency_ID_TO=s.C_Currency_ID"+ " AND r.AD_Client_ID=i.AD_Client_ID AND r.AD_Org_ID=i.AD_OrgDoc_ID"+ " AND r.C_ConversionType_ID=i.C_ConversionType_ID"+ " AND i.DateAcct BETWEEN r.ValidFrom AND r.ValidTo "+ ") WHERE CurrencyRate IS NULL OR CurrencyRate=0 AND C_Currency_ID>0"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Org Rate=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET CurrencyRate=(SELECT MAX(r.MultiplyRate) FROM C_Conversion_Rate r, C_AcctSchema s" + " WHERE s.C_AcctSchema_ID=i.C_AcctSchema_ID AND s.AD_Client_ID=i.AD_Client_ID"+ " AND r.C_Currency_ID=i.C_Currency_ID AND r.C_Currency_ID_TO=s.C_Currency_ID"+ " AND r.AD_Client_ID=i.AD_Client_ID"+ " AND r.C_ConversionType_ID=i.C_ConversionType_ID"+ " AND i.DateAcct BETWEEN r.ValidFrom AND r.ValidTo "+ ") WHERE CurrencyRate IS NULL OR CurrencyRate=0 AND C_Currency_ID>0"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Client Rate=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Rate, '" + "WHERE CurrencyRate IS NULL OR CurrencyRate=0"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Rate=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET C_Period_ID=(SELECT MAX(p.C_Period_ID) FROM C_Period p" + " INNER JOIN C_Year y ON (y.C_Year_ID=p.C_Year_ID)"+ " INNER JOIN AD_ClientInfo c ON (c.C_Calendar_ID=y.C_Calendar_ID)"+ " WHERE c.AD_Client_ID=i.AD_Client_ID"+ " AND i.DateAcct BETWEEN p.StartDate AND p.EndDate AND p.IsActive='Y' AND p.PeriodType='S') "+ "WHERE C_Period_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Period=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Period, '" + "WHERE C_Period_ID IS NULL OR C_Period_ID NOT IN"+ "(SELECT C_Period_ID FROM C_Period p"+ " INNER JOIN C_Year y ON (y.C_Year_ID=p.C_Year_ID)"+ " INNER JOIN AD_ClientInfo c ON (c.C_Calendar_ID=y.C_Calendar_ID) "+ " WHERE c.AD_Client_ID=i.AD_Client_ID"+ " AND i.DateAcct BETWEEN p.StartDate AND p.EndDate AND p.IsActive='Y' AND p.PeriodType='S')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Period=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_ErrorMsg=I_ErrorMsg||'WARN=Period Closed, ' " + "WHERE C_Period_ID IS NOT NULL AND NOT EXISTS"+ " (SELECT * FROM C_PeriodControl pc WHERE pc.C_Period_ID=i.C_Period_ID AND DocBaseType='GLJ' AND PeriodStatus='O') "+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Period Closed=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET PostingType='A' " + "WHERE PostingType IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Actual PostingType=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid PostingType, ' " + "WHERE PostingType IS NULL OR NOT EXISTS"+ " (SELECT * FROM AD_Ref_List r WHERE r.AD_Reference_ID=125 AND i.PostingType=r.Value)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid PostingTypee=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET AD_Org_ID=COALESCE((SELECT o.AD_Org_ID FROM AD_Org o" + " WHERE o.Value=i.OrgValue AND o.IsSummary='N' AND i.AD_Client_ID=o.AD_Client_ID),AD_Org_ID) "+ "WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0) AND OrgValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Org from Value=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET AD_Org_ID=AD_OrgDoc_ID " + "WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0) AND OrgValue IS NULL AND AD_OrgDoc_ID IS NOT NULL AND AD_OrgDoc_ID<>0"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Org from Doc Org=" + no);  sql=new StringBuffer("UPDATE I_GLJournal o " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Org, '" + "WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0"+ " OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Org=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET Account_ID=(SELECT MAX(ev.C_ElementValue_ID) FROM C_ElementValue ev" + " INNER JOIN C_Element e ON (e.C_Element_ID=ev.C_Element_ID)"+ " INNER JOIN C_AcctSchema_Element ase ON (e.C_Element_ID=ase.C_Element_ID AND ase.ElementType='AC')"+ " WHERE ev.Value=i.AccountValue AND ev.IsSummary='N'"+ " AND i.C_AcctSchema_ID=ase.C_AcctSchema_ID AND i.AD_Client_ID=ev.AD_Client_ID) "+ "WHERE Account_ID IS NULL AND AccountValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Account from Value=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Account, '" + "WHERE (Account_ID IS NULL OR Account_ID=0)"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Account=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET C_BPartner_ID=(SELECT bp.C_BPartner_ID FROM C_BPartner bp" + " WHERE bp.Value=i.BPartnerValue AND bp.IsSummary='N' AND i.AD_Client_ID=bp.AD_Client_ID) "+ "WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set BPartner from Value=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid BPartner, '" + "WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid BPartner=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET M_Product_ID=(SELECT MAX(p.M_Product_ID) FROM M_Product p" + " WHERE (p.Value=i.ProductValue OR p.UPC=i.UPC OR p.SKU=i.SKU)"+ " AND p.IsSummary='N' AND i.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL AND (ProductValue IS NOT NULL OR UPC IS NOT NULL OR SKU IS NOT NULL)"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Product from Value=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Product, '" + "WHERE M_Product_ID IS NULL AND (ProductValue IS NOT NULL OR UPC IS NOT NULL OR SKU IS NOT NULL)"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Product=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET C_Project_ID=(SELECT p.C_Project_ID FROM C_Project p" + " WHERE p.Value=i.ProjectValue AND p.IsSummary='N' AND i.AD_Client_ID=p.AD_Client_ID) "+ "WHERE C_Project_ID IS NULL AND ProjectValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Project from Value=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Project, '" + "WHERE C_Project_ID IS NULL AND ProjectValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Project=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET AD_OrgTrx_ID=(SELECT o.AD_Org_ID FROM AD_Org o" + " WHERE o.Value=i.OrgValue AND o.IsSummary='N' AND i.AD_Client_ID=o.AD_Client_ID) "+ "WHERE AD_OrgTrx_ID IS NULL AND OrgTrxValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set OrgTrx from Value=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid OrgTrx, '" + "WHERE AD_OrgTrx_ID IS NULL AND OrgTrxValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid OrgTrx=" + no);  sql=new StringBuffer("UPDATE I_GLJournal " + "SET AmtSourceDr = 0 " + "WHERE AmtSourceDr IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set 0 Source Dr=" + no);  sql=new StringBuffer("UPDATE I_GLJournal " + "SET AmtSourceCr = 0 " + "WHERE AmtSourceCr IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set 0 Source Cr=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_ErrorMsg=I_ErrorMsg||'WARN=Zero Source Balance, ' " + "WHERE (AmtSourceDr-AmtSourceCr)=0"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Zero Source Balance=" + no);  sql=new StringBuffer("UPDATE I_GLJournal " + "SET AmtAcctDr = ROUND(AmtSourceDr * CurrencyRate, 2) " + "WHERE AmtAcctDr IS NULL OR AmtAcctDr=0"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Calculate Acct Dr=" + no);  sql=new StringBuffer("UPDATE I_GLJournal " + "SET AmtAcctCr = ROUND(AmtSourceCr * CurrencyRate, 2) " + "WHERE AmtAcctCr IS NULL OR AmtAcctCr=0"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Calculate Acct Cr=" + no);  sql=new StringBuffer("UPDATE I_GLJournal i " + "SET I_ErrorMsg=I_ErrorMsg||'WARN=Zero Acct Balance, ' " + "WHERE (AmtSourceDr-AmtSourceCr)<>0 AND (AmtAcctDr-AmtAcctCr)=0"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Zero Acct Balance=" + no);  sql=new StringBuffer("SELECT SUM(AmtSourceDr)-SUM(AmtSourceCr), SUM(AmtAcctDr)-SUM(AmtAcctCr) " + "FROM I_GLJournal " + "WHERE I_IsImported='N'").append(clientCheck);  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      BigDecimal source=rs.getBigDecimal(1);      BigDecimal acct=rs.getBigDecimal(2);      if (source != null && source.signum() == 0 && acct != null && acct.signum() == 0)       log.info("Import Balance = 0"); else       log.warning("Balance Source=" + source + ", Acct="+ acct);      if (source != null)       addLog(0,null,source,"@AmtSourceDr@ - @AmtSourceCr@");      if (acct != null)       addLog(0,null,acct,"@AmtAcctDr@ - @AmtAcctCr@");    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  SQLException ex) {    log.log(Level.SEVERE,sql.toString(),ex);  }  try {    if (pstmt != null)     pstmt.close();  } catch (  SQLException ex1) {  }  pstmt=null;  commitEx();  int errors=DB.getSQLValue(get_TrxName(),"SELECT COUNT(*) FROM I_GLJournal WHERE I_IsImported NOT IN ('Y','N')" + clientCheck);  if (errors != 0) {    if (m_IsValidateOnly || m_IsImportOnlyNoErrors)     throw new Exception("@Errors@=" + errors);  } else   if (m_IsValidateOnly)   return "@Errors@=" + errors;  log.info("Validation Errors=" + errors);  int noInsert=0;  int noInsertJournal=0;  int noInsertLine=0;  MJournalBatch batch=null;  String BatchDocumentNo="";  MJournal journal=null;  String JournalDocumentNo="";  Timestamp DateAcct=null;  sql=new StringBuffer("SELECT * FROM I_GLJournal " + "WHERE I_IsImported='N'").append(clientCheck).append(" ORDER BY COALESCE(BatchDocumentNo, TO_NCHAR(I_GLJournal_ID)||' '), COALESCE(JournalDocumentNo, " + "TO_NCHAR(I_GLJournal_ID)||' '), C_AcctSchema_ID, PostingType, C_DocType_ID, GL_Category_ID, " + "C_Currency_ID, TRUNC(DateAcct, 'DD'), Line, I_GLJournal_ID");  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      X_I_GLJournal imp=new X_I_GLJournal(getCtx(),rs,get_TrxName());      String impBatchDocumentNo=imp.getBatchDocumentNo();      if (impBatchDocumentNo == null)       impBatchDocumentNo="";      if (batch == null || imp.isCreateNewBatch() || journal.getC_AcctSchema_ID() != imp.getC_AcctSchema_ID() || !BatchDocumentNo.equals(impBatchDocumentNo)) {        BatchDocumentNo=impBatchDocumentNo;        batch=new MJournalBatch(getCtx(),0,get_TrxName());        batch.setClientOrg(imp.getAD_Client_ID(),imp.getAD_OrgDoc_ID());        if (imp.getBatchDocumentNo() != null && imp.getBatchDocumentNo().length() > 0)         batch.setDocumentNo(imp.getBatchDocumentNo());        batch.setC_DocType_ID(imp.getC_DocType_ID());        batch.setPostingType(imp.getPostingType());        String description=imp.getBatchDescription();        if (description == null || description.length() == 0)         description="*Import-"; else         description+=" *Import-";        description+=new Timestamp(System.currentTimeMillis());        batch.setDescription(description);        if (!batch.save()) {          log.log(Level.SEVERE,"Batch not saved");          Exception ex=CLogger.retrieveException();          if (ex != null) {            addLog(0,null,null,ex.getLocalizedMessage());            throw ex;          }          break;        }        noInsert++;        journal=null;      }      String impJournalDocumentNo=imp.getJournalDocumentNo();      if (impJournalDocumentNo == null)       impJournalDocumentNo="";      Timestamp impDateAcct=TimeUtil.getDay(imp.getDateAcct());      if (journal == null || imp.isCreateNewJournal() || !JournalDocumentNo.equals(impJournalDocumentNo) || journal.getC_DocType_ID() != imp.getC_DocType_ID() || journal.getGL_Category_ID() != imp.getGL_Category_ID() || !journal.getPostingType().equals(imp.getPostingType()) || journal.getC_Currency_ID() != imp.getC_Currency_ID() || !impDateAcct.equals(DateAcct)) {        JournalDocumentNo=impJournalDocumentNo;        DateAcct=impDateAcct;        journal=new MJournal(getCtx(),0,get_TrxName());        journal.setGL_JournalBatch_ID(batch.getGL_JournalBatch_ID());        journal.setClientOrg(imp.getAD_Client_ID(),imp.getAD_OrgDoc_ID());        String description=imp.getBatchDescription();        if (description == null || description.length() == 0)         description="(Import)";        journal.setDescription(description);        if (imp.getJournalDocumentNo() != null && imp.getJournalDocumentNo().length() > 0)         journal.setDocumentNo(imp.getJournalDocumentNo());        journal.setC_AcctSchema_ID(imp.getC_AcctSchema_ID());        journal.setC_DocType_ID(imp.getC_DocType_ID());        journal.setGL_Category_ID(imp.getGL_Category_ID());        journal.setPostingType(imp.getPostingType());        journal.setGL_Budget_ID(imp.getGL_Budget_ID());        journal.setCurrency(imp.getC_Currency_ID(),imp.getC_ConversionType_ID(),imp.getCurrencyRate());        journal.setC_Period_ID(imp.getC_Period_ID());        journal.setDateAcct(imp.getDateAcct());        journal.setDateDoc(imp.getDateAcct());        if (!journal.save()) {          log.log(Level.SEVERE,"Journal not saved");          Exception ex=CLogger.retrieveException();          if (ex != null) {            addLog(0,null,null,ex.getLocalizedMessage());            throw ex;          }          break;        }        noInsertJournal++;      }      MJournalLine line=new MJournalLine(journal);      line.setDescription(imp.getDescription());      line.setCurrency(imp.getC_Currency_ID(),imp.getC_ConversionType_ID(),imp.getCurrencyRate());      if (imp.getC_ValidCombination_ID() == 0) {        MAccount acct=MAccount.get(getCtx(),imp.getAD_Client_ID(),imp.getAD_Org_ID(),imp.getC_AcctSchema_ID(),imp.getAccount_ID(),0,imp.getM_Product_ID(),imp.getC_BPartner_ID(),imp.getAD_OrgTrx_ID(),imp.getC_LocFrom_ID(),imp.getC_LocTo_ID(),imp.getC_SalesRegion_ID(),imp.getC_Project_ID(),imp.getC_Campaign_ID(),imp.getC_Activity_ID(),imp.getUser1_ID(),imp.getUser2_ID(),0,0,null);        if (acct != null && acct.get_ID() == 0)         acct.saveEx();        if (acct == null || acct.get_ID() == 0) {          imp.setI_ErrorMsg("ERROR creating Account");          imp.setI_IsImported(false);          imp.saveEx();          continue;        } else {          line.setC_ValidCombination_ID(acct.get_ID());          imp.setC_ValidCombination_ID(acct.get_ID());        }      } else       line.setC_ValidCombination_ID(imp.getC_ValidCombination_ID());      line.setLine(imp.getLine());      line.setAmtSourceCr(imp.getAmtSourceCr());      line.setAmtSourceDr(imp.getAmtSourceDr());      line.setAmtAcct(imp.getAmtAcctDr(),imp.getAmtAcctCr());      line.setDateAcct(imp.getDateAcct());      line.setC_UOM_ID(imp.getC_UOM_ID());      line.setQty(imp.getQty());      if (line.save()) {        imp.setGL_JournalBatch_ID(batch.getGL_JournalBatch_ID());        imp.setGL_Journal_ID(journal.getGL_Journal_ID());        imp.setGL_JournalLine_ID(line.getGL_JournalLine_ID());        imp.setI_IsImported(true);        imp.setProcessed(true);        if (imp.save())         noInsertLine++;      }    }    rs.close();    pstmt.close();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  try {    if (pstmt != null)     pstmt.close();  } catch (  SQLException ex1) {  }  pstmt=null;  sql=new StringBuffer("UPDATE I_GLJournal " + "SET I_IsImported='N', Updated=SysDate " + "WHERE I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),"@Errors@");  addLog(0,null,new BigDecimal(noInsert),"@GL_JournalBatch_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noInsertJournal),"@GL_Journal_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noInsertLine),"@GL_JournalLine_ID@: @Inserted@");  return "";}  }
class C{  private void testIsoWeekJanuary1thMonday() throws Exception {  assertEquals(52,getIsoWeek(parse("2006-12-31")));  assertEquals(1,getIsoWeek(parse("2007-01-01")));  assertEquals(1,getIsoWeek(parse("2007-01-07")));  assertEquals(2,getIsoWeek(parse("2007-01-08")));}  }
class C{  public static void createCacheClient(Integer port1,String host) throws Exception {  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  new HAOverflowMemObjectSizerDUnitTest().createCache(props);  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setDataPolicy(DataPolicy.NORMAL);  ClientServerTestCase.configureConnectionPool(factory,host,port1.intValue(),-1,true,-1,2,null,-1,-1,false);  RegionAttributes attrs=factory.create();  Region region=cache.createRegion(regionName,attrs);  assertNotNull(region);  region.registerInterest("ALL_KEYS");}  }
class C{  private void speakInternal(int resId,Object... formatArgs){  final TalkBackService service=TalkBackService.getInstance();  if (service == null) {    LogUtils.log(Log.ERROR,"Failed to get TalkBackService instance.");    return;  }  final SpeechController speechController=service.getSpeechController();  final String text=getString(resId,formatArgs);  speechController.speak(text,null,null,0,0,SpeechController.UTTERANCE_GROUP_DEFAULT,null,null,mUtteranceCompleteRunnable);}  }
class C{  static private int SENSOR_ADR(int a1,int a2){  return (((a2 & 0x0f) * 128) + (a1 & 0x7f)) + 1;}  }
class C{  static <T>Middleware<SyncHandler<Response<T>>,SyncHandler<Response<T>>> exceptionMiddleware(){  return null;}  }
class C{  @Override public AmpException rethrow(){  return new AmpExceptionUnknownServiceException(getMessage(),this);}  }
class C{  public byte returnByte(byte in){  oneByte[0]=in;  cipher.processBlock(oneByte,0,oneByte,0);  return oneByte[0];}  }
class C{  protected void receiveBoard(Packet c){  Board newBoard=(Board)c.getObject(0);  getGame().setBoard(newBoard);}  }
class C{  private boolean canPerformModifierAction(){  if (repCounterCoordinator != null) {    GuiUtils.showWarningMsg("Cannot complete action, a replay counting is in progress."," ",GuiUtils.linkForAction("View Running Jobs...",Actions.RUNNING_JOBS));    return false;  }  return true;}  }
class C{  public long value(){  return _map._values[_index];}  }
class C{  public boolean supportsConversion(Class<?> targetType,Object valueToConvert){  boolean rVal=false;  if (valueToConvert instanceof Money) {    rVal=true;  }  return (rVal);}  }
class C{  public boolean equals(Object value){  if (this == value) {    return true;  } else   if (value != null && value instanceof FontDescription) {    FontDescription other=(FontDescription)value;    if (style != other.style)     return false;    if (compactFontFormat != other.compactFontFormat)     return false;    if (advancedAntiAliasing != other.advancedAntiAliasing)     return false;    if (unicodeRanges == null && other.unicodeRanges != null)     return false;    if (source == null && other.source != null)     return false;    if (unicodeRanges != null && !unicodeRanges.equals(other.unicodeRanges))     return false;    if (source != null && !source.equals(other.source))     return false;    return true;  }  return false;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  void appendBtoFList(NodeSetDTM flist,NodeSetDTM blist){  int n=blist.size();  for (int i=(n - 1); i >= 0; i--) {    flist.addElement(blist.item(i));  }}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,int[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public static String captureSnapshot(){  String result=new String();  if (m_profiler != null) {    result=m_profiler.captureSnapshot();  }  return result;}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.add:    String channel=channelInput.getText().toString().trim();  channels.add(channel);adapter.add(channel);channelInput.setText("#");channelInput.setSelection(1);okButton.setEnabled(true);break;case R.id.cancel:setResult(RESULT_CANCELED);finish();break;case R.id.ok:Intent intent=new Intent();intent.putExtra(Extra.CHANNELS,channels);setResult(RESULT_OK,intent);finish();break;}}  }
class C{  public Sec(){  super("sec",1);}  }
class C{  public static Set union(Set x,Set y){  Set result=new Set();  if (x.size() > y.size()) {    result=(Set)x.clone();    result.union(y);  } else {    result=(Set)x.clone();    result.union(y);  }  return result;}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  long[] oldKeys=_set;  float[] oldVals=_values;  byte[] oldStates=_states;  _set=new long[newCapacity];  _values=new float[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      long o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  @Override public void accept(Partition<T,K,LinkedList<T>> partition,T tuple){  submitNextTuple(partition);}  }
class C{  @Override public SyncResults parseOutput(final String stdout,final String stderr){  final List<String> updatedFiles=new ArrayList<String>();  final List<String> newFiles=new ArrayList<String>();  final List<String> deletedFiles=new ArrayList<String>();  final List<VcsException> exceptions=new ArrayList<VcsException>();  if (StringUtils.contains(stdout,UP_TO_DATE_MSG)) {    return new SyncResults();  }  final boolean conflictsExist=StringUtils.contains(stderr,CONFLICT_MESSAGE);  exceptions.addAll(parseException(stderr));  final String[] lines=getLines(stdout);  String path=StringUtils.EMPTY;  for (  final String line : lines) {    if (StringUtils.isNotEmpty(line) || StringUtils.startsWith(line,SUMMARY_PREFIX)) {      if (isFilePath(line)) {        path=getFilePath(line,StringUtils.EMPTY,StringUtils.EMPTY);      } else       if (StringUtils.startsWith(line,NEW_FILE_PREFIX)) {        newFiles.add((new File(path,line.replaceFirst(NEW_FILE_PREFIX,StringUtils.EMPTY)).getPath()));      } else       if (StringUtils.startsWith(line,UPDATED_FILE_PREFIX)) {        updatedFiles.add((new File(path,line.replaceFirst(UPDATED_FILE_PREFIX,StringUtils.EMPTY)).getPath()));      } else       if (StringUtils.startsWith(line,DELETED_FILE_PREFIX)) {        deletedFiles.add((new File(path,line.replaceFirst(DELETED_FILE_PREFIX,StringUtils.EMPTY)).getPath()));      } else {        logger.warn("Unknown response from 'tf get' command: " + line);      }    }  }  return new SyncResults(conflictsExist,updatedFiles,newFiles,deletedFiles,exceptions);}  }
class C{  public static void launch(String updateSiteUrl) throws Exception {  InstallUpdateHandler handler=new InstallUpdateHandler(updateSiteUrl);  handler.execute(null);}  }
class C{  private static String constructMessage(String adMessage,String message){  StringBuffer out=new StringBuffer();  if (adMessage != null && !adMessage.equals("")) {    out.append(Msg.getMsg(Env.getCtx(),adMessage));  }  if (message != null && message.length() > 0) {    out.append("<br><br>").append(message);  }  return out.toString().replace("\n","<br>");}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  public static CipherTextIvMac encrypt(byte[] plaintext,SecretKeys secretKeys) throws GeneralSecurityException {  byte[] iv=generateIv();  Cipher aesCipherForEncryption=Cipher.getInstance(CIPHER_TRANSFORMATION);  aesCipherForEncryption.init(Cipher.ENCRYPT_MODE,secretKeys.getConfidentialityKey(),new IvParameterSpec(iv));  iv=aesCipherForEncryption.getIV();  byte[] byteCipherText=aesCipherForEncryption.doFinal(plaintext);  byte[] ivCipherConcat=CipherTextIvMac.ivCipherConcat(iv,byteCipherText);  byte[] integrityMac=generateMac(ivCipherConcat,secretKeys.getIntegrityKey());  return new CipherTextIvMac(byteCipherText,iv,integrityMac);}  }
class C{  public String name(){  return "Socket";}  }
class C{  private int processFunctionComplexity(FunctionInterface func){  if (func.isAccessor()) {    return 0;  }  int result=func.getComplexity();  for (  FunctionInterface over : func.getOverloadedFunctions()) {    result+=processFunctionComplexity(over);  }  return result;}  }
class C{  protected void dispose(){  if (Debug.debugging("crfp")) {    Debug.output("CRFPClient.finalize(): calling shutdown");  }  try {    if (server != null) {      server.signoff(clientID);    }    server=null;  } catch (  org.omg.CORBA.SystemException e) {    Debug.error("CRFPClient.finalize(): " + e);  }catch (  Throwable t) {    Debug.error("CRFPClient.finalize(): " + t);  }}  }
class C{  public Densifier(Geometry inputGeom){  this.inputGeom=inputGeom;}  }
class C{  public void reset(){  lines.setText("");  repaint();}  }
class C{  public boolean isPointInsideBorderShape(Point2D point){  for (int i=0; i < shapes.size(); i++) {    if (boundaries.get(i).isInsideBorder(point)) {      if (shapes.get(i).isInsideBorder(point)) {        return true;      }    }  }  return false;}  }
class C{  public void startPreserving() throws org.xml.sax.SAXException {  m_preserves.push(true);  m_ispreserve=true;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public static final int BuildIntegerLE(byte bytevec[],int offset){  return (((int)(bytevec[3 + offset]) << 24) | (signedToInt(bytevec[2 + offset]) << 16) | (signedToInt(bytevec[1 + offset]) << 8)| (signedToInt(bytevec[0 + offset])));}  }
class C{  public boolean isPinchZoomEnabled(){  return mPinchZoomEnabled;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @Override public Token nextToken(){  Token next=super.nextToken();  if (next.getChannel() == Token.DEFAULT_CHANNEL) {    this.lastToken=next;  }  return next;}  }
class C{  public void readMessage(InputStream in) throws IOException {  reset();  read(in,buf,0,getHeaderLength());  processHeader();  read(in,buf,getHeaderLength(),getLen());}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  checkLabel(env,ctx);  vset=reach(env,vset);  if (expr != null) {    vset=expr.checkValue(env,ctx,vset,exp);  }  if (ctx.field.isInitializer()) {    env.error(where,"return.inside.static.initializer");    return DEAD_END;  }  if (ctx.field.getType().getReturnType().isType(TC_VOID)) {    if (expr != null) {      if (ctx.field.isConstructor()) {        env.error(where,"return.with.value.constr",ctx.field);      } else {        env.error(where,"return.with.value",ctx.field);      }      expr=null;    }  } else {    if (expr == null) {      env.error(where,"return.without.value",ctx.field);    } else {      expr=convert(env,ctx,ctx.field.getType().getReturnType(),expr);    }  }  CheckContext mctx=ctx.getReturnContext();  if (mctx != null) {    mctx.vsBreak=mctx.vsBreak.join(vset);  }  CheckContext exitctx=ctx.getTryExitContext();  if (exitctx != null) {    exitctx.vsTryExit=exitctx.vsTryExit.join(vset);  }  if (expr != null) {    Node outerFinallyNode=null;    for (Context c=ctx; c != null; c=c.prev) {      if (c.node == null) {        continue;      }      if (c.node.op == METHOD) {        break;      }      if (c.node.op == SYNCHRONIZED) {        outerFinallyNode=c.node;        break;      } else       if (c.node.op == FINALLY && ((CheckContext)c).vsContinue != null) {        outerFinallyNode=c.node;      }    }    if (outerFinallyNode != null) {      if (outerFinallyNode.op == FINALLY) {        ((FinallyStatement)outerFinallyNode).needReturnSlot=true;      } else {        ((SynchronizedStatement)outerFinallyNode).needReturnSlot=true;      }    }  }  return DEAD_END;}  }
class C{  public void accountSummaryEnd(int reqId){  _log.debug("accountSummaryEnd: " + reqId);}  }
class C{  public void insert(final String collectionName,final Map<String,Object> data){  insert(collectionName,data,null);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public static GenericArrayType genericArrayType(final Type componentType){  return new GenericArrayTypeImpl(Validate.notNull(componentType,"componentType is null"));}  }
class C{  private void initializeState(State current){  InitializationUtils.initialize(current);  if (current.taskState.stage == TaskState.TaskStage.CREATED) {    current.taskState.stage=TaskState.TaskStage.STARTED;    current.taskState.subStage=TaskState.SubStage.GET_HOST_INFO;  }  if (current.taskState.stage == TaskState.TaskStage.STARTED && current.taskState.subStage == null) {    current.taskState.subStage=TaskState.SubStage.GET_HOST_INFO;  }  if (current.documentExpirationTimeMicros <= 0) {    current.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  if (null == current.scanTimeout) {    current.scanTimeout=TimeUnit.MICROSECONDS.toSeconds(current.documentExpirationTimeMicros);  }  if (null == current.sweepTimeout) {    current.sweepTimeout=TimeUnit.MICROSECONDS.toSeconds(current.documentExpirationTimeMicros);  }}  }
class C{  public final boolean hasArray(){  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int exprGetNumChildren(){  return getLength();}  }
class C{  public boolean contains(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x))     return true;    i=(i + 1) & mask;  }  return false;}  }
class C{  public Report(int id){  messageId=id;}  }
class C{  public long fetchIntegerAsLong(int tag) throws BerException {  long result=0;  final int backup=next;  try {    if (fetchTag() != tag) {      throw new BerException();    }    result=fetchIntegerValueAsLong();  } catch (  BerException e) {    next=backup;    throw e;  }  return result;}  }
class C{  boolean handleInterruptedException(InterruptedException e){  Thread.currentThread().interrupt();  return true;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeStroke(this.groupStroke,stream);  SerialUtilities.writePaint(this.groupPaint,stream);}  }
class C{  public ClientHttpRequest(URLConnection connection) throws IOException {  this.connection=connection;  connection.setDoOutput(true);  connection.setDoInput(true);  connection.setRequestProperty("Content-Type","multipart/form-data; boundary=" + boundary);}  }
class C{  public static OMArc read(DataInputStream dis,LinkProperties propertiesBuffer) throws IOException {  OMArc arc=null;  float lat, lon, radius, start, extent;  int x, y, w, h;  int renderType=dis.readByte();switch (renderType) {case RENDERTYPE_LATLON:    lat=dis.readFloat();  lon=dis.readFloat();radius=dis.readFloat();start=dis.readFloat();extent=dis.readFloat();int units=dis.readByte();int nverts=dis.readInt();Length unit=Length.DECIMAL_DEGREE;switch (units) {case 0:unit=Length.KM;break;case 1:unit=Length.MILE;break;case 2:unit=Length.NM;break;default :}arc=new OMArc(new LatLonPoint.Double(lat,lon),radius,unit,nverts,start,extent);break;case RENDERTYPE_XY:x=dis.readInt();y=dis.readInt();w=dis.readInt();h=dis.readInt();start=dis.readFloat();extent=dis.readFloat();arc=new OMArc(x,y,w,h,start,extent);break;case RENDERTYPE_OFFSET:lat=dis.readFloat();lon=dis.readFloat();x=dis.readInt();y=dis.readInt();w=dis.readInt();h=dis.readInt();start=dis.readFloat();extent=dis.readFloat();arc=new OMArc(lat,lon,x,y,w,h,start,extent);break;default :}if (arc != null) {LinkProperties.loadPropertiesIntoOMGraphic(dis,arc,propertiesBuffer);}return arc;}  }
class C{  public static <T>LazyIterable<T> adapt(Iterable<T> iterable){  return new LazyIterableAdapter<>(iterable);}  }
class C{  private static double sinQ(double xa,double xb){  int idx=(int)((xa * 8.0) + 0.5);  final double epsilon=xa - EIGHTHS[idx];  final double sintA=SINE_TABLE_A[idx];  final double sintB=SINE_TABLE_B[idx];  final double costA=COSINE_TABLE_A[idx];  final double costB=COSINE_TABLE_B[idx];  double sinEpsA=epsilon;  double sinEpsB=polySine(epsilon);  final double cosEpsA=1.0;  final double cosEpsB=polyCosine(epsilon);  final double temp=sinEpsA * HEX_40000000;  double temp2=(sinEpsA + temp) - temp;  sinEpsB+=sinEpsA - temp2;  sinEpsA=temp2;  double result;  double a=0;  double b=0;  double t=sintA;  double c=a + t;  double d=-(c - a - t);  a=c;  b+=d;  t=costA * sinEpsA;  c=a + t;  d=-(c - a - t);  a=c;  b+=d;  b=b + sintA * cosEpsB + costA * sinEpsB;  b=b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;  if (xb != 0.0) {    t=((costA + costB) * (cosEpsA + cosEpsB) - (sintA + sintB) * (sinEpsA + sinEpsB)) * xb;    c=a + t;    d=-(c - a - t);    a=c;    b+=d;  }  result=a + b;  return result;}  }
class C{  public OffenseArea(String sidc){  super(sidc);  this.setShowHostileIndicator(false);}  }
class C{  public void addIgnorable(String propName){  if (_ignorableProps == null) {    _ignorableProps=new HashSet<String>();  }  _ignorableProps.add(propName);}  }
class C{  private Photo(){}  }
class C{  public void showProgress(boolean show){  circle.showRing(show);}  }
class C{  public void testParameters() throws Exception {  Similarity sim=getSimilarity("text_params");  assertEquals(DFRSimilarity.class,sim.getClass());  DFRSimilarity dfr=(DFRSimilarity)sim;  assertEquals(BasicModelIF.class,dfr.getBasicModel().getClass());  assertEquals(AfterEffectB.class,dfr.getAfterEffect().getClass());  assertEquals(NormalizationH3.class,dfr.getNormalization().getClass());  NormalizationH3 norm=(NormalizationH3)dfr.getNormalization();  assertEquals(900f,norm.getMu(),0.01f);}  }
class C{  @Override public int hashCode(){  return index;}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  Color oldColor=g.getColor();  g.translate(x,y);  if (bevelType == RAISED) {    g.setColor(getHighlightOuterColor(c));    g.drawLine(0,0,width - 2,0);    g.drawLine(0,0,0,height - 2);    g.drawLine(1,1,1,1);    g.setColor(getHighlightInnerColor(c));    g.drawLine(2,1,width - 2,1);    g.drawLine(1,2,1,height - 2);    g.drawLine(2,2,2,2);    g.drawLine(0,height - 1,0,height - 2);    g.drawLine(width - 1,0,width - 1,0);    g.setColor(getShadowOuterColor(c));    g.drawLine(2,height - 1,width - 1,height - 1);    g.drawLine(width - 1,2,width - 1,height - 1);    g.setColor(getShadowInnerColor(c));    g.drawLine(width - 2,height - 2,width - 2,height - 2);  } else   if (bevelType == LOWERED) {    g.setColor(getShadowOuterColor(c));    g.drawLine(0,0,width - 2,0);    g.drawLine(0,0,0,height - 2);    g.drawLine(1,1,1,1);    g.setColor(getShadowInnerColor(c));    g.drawLine(2,1,width - 2,1);    g.drawLine(1,2,1,height - 2);    g.drawLine(2,2,2,2);    g.drawLine(0,height - 1,0,height - 2);    g.drawLine(width - 1,0,width - 1,0);    g.setColor(getHighlightOuterColor(c));    g.drawLine(2,height - 1,width - 1,height - 1);    g.drawLine(width - 1,2,width - 1,height - 1);    g.setColor(getHighlightInnerColor(c));    g.drawLine(width - 2,height - 2,width - 2,height - 2);  }  g.translate(-x,-y);  g.setColor(oldColor);}  }
class C{  public void addDefinition(String definition){  if (!StringUtils.isEmpty(definition)) {    definitions.add(definition);  }}  }
class C{  public SecretBuilder withType(String type){  this.type=checkNotNull(type);  return this;}  }
class C{  public void componentMoved(ComponentEvent e){  if (AWTEventMonitor.componentListener_private != null) {    AWTEventMonitor.componentListener_private.componentMoved(e);  }}  }
class C{  final public void println(boolean v){  Writer out=this.out;  if (out == null)   return;  print(v);  try {    out.write(_newline,0,_newline.length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public FluentJdbcBuilder paramSetters(Map<Class,ParamSetter> paramSetters){  checkNotNull(paramSetters,"paramSetters");  this.paramSetters=paramSetters;  return this;}  }
class C{  public void test_initLjavax_net_ssl_ManagerFactoryParameters() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  ManagerFactoryParameters par=null;  KeyManagerFactory[] keyMF=createKMFac();  assertNotNull("KeyManagerFactory object were not created",keyMF);  for (int i=0; i < keyMF.length; i++) {    try {      keyMF[i].init(par);      fail("InvalidAlgorithmParameterException must be thrown");    } catch (    InvalidAlgorithmParameterException e) {    }  }  KeyStore.ProtectionParameter pp=new ProtectionParameterImpl();  KeyStore.Builder bld=KeyStore.Builder.newInstance("testType",null,pp);  assertNotNull("Null object KeyStore.Builder",bld);  try {    KeyManagerFactory kmf=KeyManagerFactory.getInstance(defaultAlgorithm);    KeyStoreBuilderParameters ksp=new KeyStoreBuilderParameters(bld);    assertNotNull(ksp.getParameters());    kmf.init(ksp);    fail("InvalidAlgorithmParameterException must be thrown");  } catch (  InvalidAlgorithmParameterException e) {  }}  }
class C{  public RuntimeMBeanException(java.lang.RuntimeException e,String message){  super(message);  runtimeException=e;}  }
class C{  private void testCheckpointInUpdateRaceCondition() throws Exception {  boolean longRun=false;  deleteDb("fileLockSerialized");  String url="jdbc:h2:" + getBaseDir() + "/fileLockSerialized;FILE_LOCK=SERIALIZED;OPEN_NEW=TRUE";  Connection conn=getConnection(url);  conn.createStatement().execute("create table test(id int)");  conn.createStatement().execute("insert into test values(1)");  for (int i=0; i < (longRun ? 10000 : 5); i++) {    Thread.sleep(402);    conn.createStatement().execute("update test set id = " + i);  }  conn.close();  deleteDb("fileLockSerialized");}  }
class C{  public final void blinkCaret(){  if (caretBlinks) {    blink=!blink;    painter.invalidateSelectedLines();  } else {    blink=true;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  int numCols;  int numRows;  double z;  double noData;  float progress;  int i;  int numReclassRanges;  int numReclassRangesMinusOne;  String[] reclassRangeStr=null;  double[][] reclassRange;  boolean blnAssignMode=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      reclassRangeStr=args[i].split("\t");      if (reclassRangeStr[2].toLowerCase().equals("not specified")) {        blnAssignMode=true;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double[] data;    noData=image.getNoDataValue();    numReclassRanges=reclassRangeStr.length / 3;    numReclassRangesMinusOne=numReclassRanges - 1;    reclassRange=new double[3][numReclassRanges];    i=0;    for (int b=0; b < reclassRangeStr.length; b++) {      if (!reclassRangeStr[b].toLowerCase().equals("not specified")) {        if (!reclassRangeStr[b].toLowerCase().equals("nodata")) {          reclassRange[i][b / 3]=Double.parseDouble(reclassRangeStr[b]);        } else {          reclassRange[i][b / 3]=noData;        }      } else {        reclassRange[i][b / 3]=0;      }      i++;      if (i == 3) {        i=0;      }    }    if (numReclassRanges == 0) {      showFeedback("There is an error with the reclass ranges.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    if (blnAssignMode) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] == reclassRange[1][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] >= reclassRange[1][i] && data[col] < reclassRange[2][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public int size(){  return objects.size();}  }
class C{  CaseInsensitiveMapImpl(Map<? extends String,? extends V> m,float f){  super(m,f,CaseInsensitiveHashingStrategy.INSTANCE);}  }
class C{  private static boolean compareStrings(final String s1,final String s2){  if (s1 == s2) {    return true;  }  if (s1 == null) {    return false;  }  return s1.equals(s2);}  }
class C{  public Object callModifyReplica(StorageSystem storage,CIMArgument[] inArgs,CIMArgument[] outArgs) throws WBEMException {  CIMObjectPath replicationSvcPath=_cimPath.getControllerReplicationSvcPath(storage);  return invokeMethod(storage,replicationSvcPath,MODIFY_REPLICA_SYNCHRONIZATION,inArgs,outArgs);}  }
class C{  public SnmpString(InetAddress address){  value=address.getAddress();}  }
class C{  private static boolean mergeState(int[] dest,int[] source,int defNum){  assert dest.length == source.length;  boolean changed=false;  for (int idx=0; idx < source.length; idx++) {    int phiNum=defNum + idx;    int dst=dest[idx];    int src=source[idx];    if (dst != src && src != INIT_VALUE && dst != encodeValueNum(phiNum,isObjectValue(dst))) {      if (dst != INIT_VALUE) {        dst=encodeValueNum(phiNum,isObjectValue(dst) || isObjectValue(src));      } else {        dst=src;      }      dest[idx]=dst;      changed=true;    }  }  return changed;}  }
class C{  public void testLegacyFloatReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new LegacyFloatField("value",30.1f,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyFloatField("value",-1.3f,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyFloatField("value",4.2f,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_FLOAT));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.FLOAT,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("30.1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("-1.3",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public FileInputStream openRead() throws FileNotFoundException {  if (mBackupName.exists()) {    mBaseName.delete();    mBackupName.renameTo(mBaseName);  }  return new FileInputStream(mBaseName);}  }
class C{  public NBTTagCompound writeToNBT(NBTTagCompound nbt){  NBTTagList referenceChunkList=new NBTTagList();  for (  ChunkPos referenceChunk : this.linkedChunks) {    NBTTagCompound referenceChunkNbt=new NBTTagCompound();    referenceChunkNbt.setInteger("x",referenceChunk.chunkXPos);    referenceChunkNbt.setInteger("z",referenceChunk.chunkZPos);    referenceChunkList.appendTag(referenceChunkNbt);  }  nbt.setTag("ReferenceChunks",referenceChunkList);  if (this.capabilities != null)   nbt.setTag("ForgeCaps",this.capabilities.serializeNBT());  return nbt;}  }
class C{  public List<File> generatedFiles(){  return Collections.unmodifiableList(generatedFiles);}  }
class C{  public boolean start(final FileDownloadListener listener,final boolean isSerial){  if (listener == null) {    FileDownloadLog.w(this,"Tasks with the listener can't start, because the listener " + "provided is null: [null, %B]",isSerial);    return false;  }  return isSerial ? getQueuesHandler().startQueueSerial(listener) : getQueuesHandler().startQueueParallel(listener);}  }
class C{  private void writeHeaderLine(List<ExtensionProperty> propertyList,int totalColumns,ArchiveFile af,Writer writer) throws IOException {  String[] headers=new String[totalColumns];  headers[ID_COLUMN_INDEX]=ID_COLUMN_NAME;  int c=1;  for (  ExtensionProperty property : propertyList) {    headers[c]=property.simpleName();    c++;  }  String headerLine=tabRow(headers);  af.setIgnoreHeaderLines(1);  writer.write(headerLine);}  }
class C{  public boolean isAutoConnect(){  return m_database.getConfiguration().isAutoConnect();}  }
class C{  @Override public float[] computeStitch(final float[] subinput){  return compute(subinput);}  }
class C{  public boolean isPrivate(){  return privateAccess;}  }
class C{  public ParamTagHandler(GuacamoleConfiguration config){  this.config=config;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addDependency(Dependency dependency){  if (dependencies == null) {    dependencies=new ArrayList<Dependency>();    nodeDependencies=new ArrayList<Node>();  }  dependencies.add(dependency);  if (!nodeDependencies.contains(dependency.node)) {    nodeDependencies.add(dependency.node);  }  Node dependencyNode=dependency.node;  if (dependencyNode.nodeDependents == null) {    dependencyNode.nodeDependents=new ArrayList<Node>();  }  dependencyNode.nodeDependents.add(this);}  }
class C{  public boolean isGeodbServiceStable(){  List<Service> services=coordinator.locateAllServices(Constants.GEODBSVC_NAME,dbClient.getSchemaVersion(),null,null);  log.info("Checking if all geosvcs are up, geosvc count-{}, node count-{}",services.size(),((CoordinatorClientImpl)coordinator).getNodeCount());  return (((CoordinatorClientImpl)coordinator).getNodeCount() == services.size());}  }
class C{  void handleSubscriberException(Throwable e,SubscriberExceptionContext context){  checkNotNull(e);  checkNotNull(context);  try {    exceptionHandler.handleException(e,context);  } catch (  Throwable e2) {    logger.log(Level.SEVERE,String.format(Locale.ROOT,"Exception %s thrown while handling exception: %s",e2,e),e2);  }}  }
class C{  private boolean isEditorValidImpl(){  return FileDocumentManager.getInstance().getDocument(myFile) != null;}  }
class C{  public boolean isRepeater(){  return repeater;}  }
class C{  public UiBuilder<T> text(String text){  text=Strings.nullToEmpty(text);  T control=control();  if (control instanceof Label) {    ((Label)control).setText(text);  } else   if (control instanceof Text) {    ((Text)control).setText(text);  } else   if (control instanceof Button) {    ((Button)control).setText(text);  } else   if (control instanceof Combo) {    ((Combo)control).setText(text);  } else   if (control instanceof Group) {    ((Group)control).setText(text);  } else {    throw new IllegalStateException(String.format("Cannot set text on control of type %s.",control().getClass()));  }  return this;}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  protected static void preparePdfDoc(){  String toSignFilePath=getPathFromResource("/hello-world.pdf");  toSignDocument=new FileDocument(toSignFilePath);}  }
class C{  public boolean isSortingProperties(){  return model.isSortingProperties();}  }
class C{  @Override public boolean equals(Object other){  return sameClassAs(other) && Objects.equals(filter,((SolrConstantScoreQuery)other).filter);}  }
class C{  protected boolean isSlipBusy(){  return (busy);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.049 -0500",hash_original_method="43548DFC0EE197F487A673EC89A4A123",hash_generated_method="43548DFC0EE197F487A673EC89A4A123") long triggerTime(long delay){  return now() + ((delay < (Long.MAX_VALUE >> 1)) ? delay : overflowFree(delay));}  }
class C{  public void filter(double[] x){  for (  SecondOrderSection section : sections) {    section.filter(x,x);  }}  }
class C{  private void addNode(NeuralConnection n){  NeuralConnection[] temp1=new NeuralConnection[m_neuralNodes.length + 1];  for (int noa=0; noa < m_neuralNodes.length; noa++) {    temp1[noa]=m_neuralNodes[noa];  }  temp1[temp1.length - 1]=n;  m_neuralNodes=temp1;}  }
class C{  @Override public ImmutableListMultimap<K,V> build(){  return (ImmutableListMultimap<K,V>)super.build();}  }
class C{  private static synchronized List<ApiService> findApiServices(ClassDoc[] classes){  List<ApiService> apiServices=new ArrayList<ApiService>();  for (  ClassDoc classDoc : classes) {    if (DATASERVICES_CLASSES.contains(classDoc.name())) {      if (!classDoc.name().equals("AtmosService")) {        String baseURL=AnnotationUtils.getAnnotationValue(classDoc,KnownAnnotations.Path_Annotation,KnownAnnotations.Value_Element,"");        for (        ClassDoc operationClassDoc : findDataServiceOperations(classDoc)) {          apiServices.add(processClass(operationClassDoc,baseURL,true));        }      }    } else     if (AnnotationUtils.hasAnnotation(classDoc,KnownAnnotations.Path_Annotation) && !serviceBlackList.contains(classDoc.qualifiedName()) && !serviceBlackList.contains(classDoc.name())) {      String baseURL=AnnotationUtils.getAnnotationValue(classDoc,KnownAnnotations.Path_Annotation,KnownAnnotations.Value_Element,"");      if (!isInternalPath(baseURL)) {        apiServices.add(processClass(classDoc,baseURL,false));      }    }  }  apiServices.addAll(PlayRoutesParser.getPortalServices(portalSource));  return apiServices;}  }
class C{  public SizeTransition(){  init();}  }
class C{  public static char[] toCharArray(final InputStream is,final String encoding) throws IOException {  return IOUtils.toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  public synchronized void addActionListener(ActionListener l){  if (l == null) {    return;  }  actionListener=AWTEventMulticaster.add(actionListener,l);  newEventsOnly=true;}  }
class C{  public static void reverse(int number){  while (number > 0) {    System.out.print((number % 10));    number/=10;  }  System.out.println();}  }
class C{  public boolean removeChildFrame(Container c){  boolean result=m_ChildFrames.remove(c);  windowListChanged();  return result;}  }
class C{  private static boolean maybeNullWebkitIE(boolean ret,int typeInt,KeySignalType type){  if (typeInt == (type == KeySignalType.INPUT ? Event.ONKEYDOWN : Event.ONKEYPRESS)) {    return false;  }  return ret;}  }
class C{  public long position(){  return (((long)index) * allocator.getBlockSize()) + current.limit;}  }
class C{  final Node<K,V> removeNode(int hash,Object key,Object value,boolean matchValue,boolean movable){  Node<K,V>[] tab;  Node<K,V> p;  int n, index;  if ((tab=table) != null && (n=tab.length) > 0 && (p=tab[index=(n - 1) & hash]) != null) {    Node<K,V> node=null, e;    K k;    V v;    if (p.hash == hash && ((k=p.key) == key || (key != null && key.equals(k))))     node=p; else     if ((e=p.next) != null) {      if (p instanceof TreeNode)       node=((TreeNode<K,V>)p).getTreeNode(hash,key); else {        do {          if (e.hash == hash && ((k=e.key) == key || (key != null && key.equals(k)))) {            node=e;            break;          }          p=e;        } while ((e=e.next) != null);      }    }    if (node != null && (!matchValue || (v=node.value) == value || (value != null && value.equals(v)))) {      if (node instanceof TreeNode)       ((TreeNode<K,V>)node).removeTreeNode(this,tab,movable); else       if (node == p)       tab[index]=node.next; else       p.next=node.next;      ++modCount;      --size;      afterNodeRemoval(node);      return node;    }  }  return null;}  }
class C{  public NotificationChain basicSetValue(Expression newValue,NotificationChain msgs){  Expression oldValue=value;  value=newValue;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,StextPackage.EVENT_VALUE_REFERENCE_EXPRESSION__VALUE,oldValue,newValue);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public PublicKey(byte[] pub,boolean compressed){  this.pub=pub;  this.compressed=compressed;}  }
class C{  public Matrix dstRows(boolean scale){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dstRows(scale);  return new Matrix(dm.toArray());}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.legendItemShape=SerialUtilities.readShape(stream);  this.seriesPaint=SerialUtilities.readPaint(stream);  this.baseSeriesPaint=SerialUtilities.readPaint(stream);  this.seriesOutlinePaint=SerialUtilities.readPaint(stream);  this.baseSeriesOutlinePaint=SerialUtilities.readPaint(stream);  this.seriesOutlineStroke=SerialUtilities.readStroke(stream);  this.baseSeriesOutlineStroke=SerialUtilities.readStroke(stream);  this.labelPaint=SerialUtilities.readPaint(stream);  this.axisLinePaint=SerialUtilities.readPaint(stream);  this.axisLineStroke=SerialUtilities.readStroke(stream);  if (this.dataset != null) {    this.dataset.addChangeListener(this);  }}  }
class C{  public final static float OLD_distance_to_line(int x1,int y1,int x2,int y2,int x,int y){  float m;  float c;  float b;  float d;  int xi, yi;  if (x2 == x1) {    if (y1 <= y && y <= y2 || y2 <= y && y <= y1)     return (float)Math.abs(x - x1);    return distance_to_endpoint(x1,y1,x2,y2,x,y);  }  if (y2 == y1) {    if (x1 <= x && x <= x2 || x2 <= x && x <= x1)     return (float)Math.abs(y - y1);    return distance_to_endpoint(x1,y1,x2,y2,x,y);  }  m=((float)(y2 - y1)) / ((float)(x2 - x1));  c=-1.0f / m;  d=(float)y - c * (float)x;  b=(float)y1 - m * (float)x1;  xi=(int)ProjMath.qint((d - b) / (m - c));  yi=(int)ProjMath.qint(c * (float)xi + d);  if ((x1 <= xi && xi <= x2 || x2 <= xi && xi <= x1) && (y1 <= yi && yi <= y2 || y2 <= yi && yi <= y1))   return distance(xi,yi,x,y);  return distance_to_endpoint(x1,y1,x2,y2,x,y);}  }
class C{  public HttpKnife basicAuthorization(String username,String password){  header(RequestHeader.AUTHORIZATION,"Basic " + Base64.encode(username + ':' + password));  return this;}  }
class C{  public String globalInfo(){  return "Generates for each run, carries out an n-fold cross-validation, " + "using the set SplitEvaluator to generate some results. If the class " + "attribute is nominal, the dataset is stratified. Results for each fold "+ "are generated, so you may wish to use this in addition with an "+ "AveragingResultProducer to obtain averages for each run.";}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,Color bgcolor,ImageObserver observer){  DebugGraphicsInfo info=info();  if (debugLog()) {    info.log(toShortString() + " Drawing image: " + img+ " at: "+ new Rectangle(x,y,width,height)+ ", bgcolor: "+ bgcolor);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawImage(img,x,y,width,height,bgcolor,observer);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    int i, count=(info.flashCount * 2) - 1;    ImageProducer oldProducer=img.getSource();    ImageProducer newProducer=new FilteredImageSource(oldProducer,new DebugGraphicsFilter(info.flashColor));    Image newImage=Toolkit.getDefaultToolkit().createImage(newProducer);    DebugGraphicsObserver imageObserver=new DebugGraphicsObserver();    Image imageToDraw;    for (i=0; i < count; i++) {      imageToDraw=(i % 2) == 0 ? newImage : img;      loadImage(imageToDraw);      graphics.drawImage(imageToDraw,x,y,width,height,bgcolor,imageObserver);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }  }  return graphics.drawImage(img,x,y,width,height,bgcolor,observer);}  }
class C{  private boolean isBlockAligned(){  Hop input1=getInput().get(0);  Hop input2=getInput().get(1);  Hop input3=getInput().get(2);  Hop input4=getInput().get(3);  Hop input5=getInput().get(4);  long rl=(input2 instanceof LiteralOp) ? (HopRewriteUtils.getIntValueSafe((LiteralOp)input2)) : -1;  long ru=(input3 instanceof LiteralOp) ? (HopRewriteUtils.getIntValueSafe((LiteralOp)input3)) : -1;  long cl=(input4 instanceof LiteralOp) ? (HopRewriteUtils.getIntValueSafe((LiteralOp)input4)) : -1;  long cu=(input5 instanceof LiteralOp) ? (HopRewriteUtils.getIntValueSafe((LiteralOp)input5)) : -1;  int brlen=(int)input1.getRowsInBlock();  int bclen=(int)input1.getColsInBlock();  return OptimizerUtils.isIndexingRangeBlockAligned(rl,ru,cl,cu,brlen,bclen);}  }
class C{  public Element createOperatorElement(Document d){  throw new RuntimeException("Not implemented!");}  }
class C{  public void sort(Comparator<? super T> comparator){  Collections.sort(mObjects,comparator);  notifyItemRangeChanged(0,getItemCount());}  }
class C{  public Result send(Wechat wechat,boolean... sync){  return service.send(wechat,boolToInt(true,sync));}  }
class C{  public void addCache(GemFireVM systemEntity,RegionSnapshot snap){  if (!snap.getName().equals(this.name)) {    throw new IllegalArgumentException(LocalizedStrings.CompoundRegionSnapshot_ALL_SNAPSHOTS_IN_A_COMPOUND_SNAPSHOT_MUST_HAVE_THE_SAME_NAME.toLocalizedString());  }  RegionAttributes ra=snap.getAttributes();  if (ra != null) {    CacheListener listener=ra.getCacheListener();    if (listener != null) {      allListeners.add(listener.toString());    }    CacheWriter writer=ra.getCacheWriter();    if (writer != null) {      allCacheWriters.add(writer.toString());    }    CacheLoader loader=ra.getCacheLoader();    if (loader != null) {      allCacheLoaders.add(loader);    }    allDataPolicies.add(ra.getDataPolicy());    allRegionTtl.add(ra.getRegionTimeToLive());    allEntryTtl.add(ra.getEntryTimeToLive());    allCustomTtl.add(ra.getCustomEntryTimeToLive().toString());    allRegionIdleTimeout.add(ra.getRegionIdleTimeout());    allEntryIdleTimeout.add(ra.getEntryIdleTimeout());    allCustomIdle.add(ra.getCustomEntryIdleTimeout().toString());    allScopes.add(ra.getScope());    allLoadFactors.add(new Float(ra.getLoadFactor()));    allInitialCaps.add(Integer.valueOf(ra.getInitialCapacity()));    allConcLevels.add(Integer.valueOf(ra.getConcurrencyLevel()));    allStatsEnabled.add(Boolean.valueOf(ra.getStatisticsEnabled()));    allUserAttributes.add(snap.getUserAttribute());    allKeyConstraints.add(ra.getKeyConstraint());    allValueConstraints.add(ra.getValueConstraint());  }  long modified=snap.getLastModifiedTime();  if (modified > 0 && modified > this.lastModifiedTime) {    this.lastModifiedTime=modified;  }  long access=snap.getLastAccessTime();  if (access > 0 && access > this.lastAccessTime) {    this.lastAccessTime=access;  }  long hitCount=snap.getNumberOfHits();  if (hitCount > 0) {    this.numHits+=hitCount;  }  long missCount=snap.getNumberOfMisses();  if (missCount > 0) {    this.numMisses+=missCount;  }  float hitRatio=snap.getHitRatio();  if (hitRatio >= 0.00) {    hitResponders++;    hitRatioSum+=hitRatio;    this.hitRatio=(float)(hitRatioSum / hitResponders);  }}  }
class C{  private String intern(String text){  String result=internedTexts.get(text);  if (result == null) {    internedTexts.put(text,text);    result=text;  }  return text;}  }
class C{  void m3(){  Iterable i=java.util.Collections.EMPTY_LIST;  T7015430.<RuntimeException>empty(i);}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public List<JCTypeParameter> translateTypeParams(List<JCTypeParameter> trees){  for (List<JCTypeParameter> l=trees; l.nonEmpty(); l=l.tail)   l.head=translate(l.head);  return trees;}  }
class C{  public void fill(byte value){  value&=0xf;  Arrays.fill(this.data,(byte)((value << 4) | value));}  }
class C{  public PropertyNotFoundException(String string){  super(string);}  }
class C{  protected final double defaultTransferCost(final Link link,final double time,final Person person,final Vehicle vehicle){  double cost;  double transfertime=getLinkTravelTime(link,time,person,vehicle);  double waittime=this.config.getAdditionalTransferTime();  double walktime=transfertime - waittime;  if (walktime < 0.) {    throw new RuntimeException("negative walk time; should not happen; needs to be repaired");  }  double walkDistance=link.getLength();  cost=-walktime * this.config.getMarginalUtilityOfTravelTimeWalk_utl_s() - walkDistance * this.config.getMarginalUtilityOfTravelDistanceWalk_utl_m() - waittime * this.config.getMarginalUtilityOfWaitingPt_utl_s() - this.config.getUtilityOfLineSwitch_utl();  return cost;}  }
class C{  protected OMGraphic createImage(Projection projection){  if (currentTime)   overlayTime=System.currentTimeMillis();  if (Debug.debugging("daynight")) {    Debug.output("DayNightLayer: Calculating sun position at time " + Long.toString(overlayTime));  }  LatLonPoint brightPoint=SunPosition.sunPosition(overlayTime);  Debug.message("daynight","DayNightLayer: Calculated sun position");  if (doPolyTerminator) {    Debug.message("daynight","DayNightLayer:  Creating polygon terminator");    LatLonPoint darkPoint=brightPoint.getPoint(Math.PI,Math.PI / 4);    OMCircle circle=new OMCircle((float)darkPoint.getY(),(float)darkPoint.getX(),(projection instanceof Cylindrical) ? 90f : 89.0f,Length.DECIMAL_DEGREE,terminatorVerts);    circle.setPolarCorrection(true);    circle.setFillPaint(nighttimeColor);    circle.setLinePaint(nighttimeColor);    circle.generate(projection);    Debug.message("daynight","DayNightLayer: Done creating polygon terminator");    return circle;  }  int width=projection.getWidth();  int height=projection.getHeight();  int[] pixels=new int[width * height];  OMRaster ret=new OMRaster((int)0,(int)0,width,height,pixels);  Debug.message("daynight",getName() + "|createImage: Center of bright spot lat= " + brightPoint.getLatitude()+ ", lon= "+ brightPoint.getLongitude());  int light=daytimeColor.getRGB();  LatLonPoint testPoint=new LatLonPoint.Float(0f,0f);  double distance;  int dark=nighttimeColor.getRGB();  int darkness=dark >>> 24;  int value;  float upperFadeLimit=(float)(MoreMath.HALF_PI * (1.0 + termFade));  float lowerFadeLimit=(float)(MoreMath.HALF_PI * (1.0 - termFade));  int fadeColorValue=0x00FFFFFF & (dark);  for (int i=0; i < width; i++) {    for (int j=0; j < height; j++) {      projection.inverse(i,j,testPoint);      distance=brightPoint.distance(testPoint);      if (distance > upperFadeLimit) {        pixels[j * width + i]=dark;      } else       if (distance > lowerFadeLimit) {        value=(int)(darkness * (1 - ((upperFadeLimit - distance) / (upperFadeLimit - lowerFadeLimit))));        value<<=24;        pixels[j * width + i]=fadeColorValue | value;      } else {        pixels[j * width + i]=light;      }    }  }  ret.generate(projection);  return ret;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:15.487 -0400",hash_original_method="AB50331EB13A7093DFB033A250FD5E79",hash_generated_method="4E82241066805D693816137FDF614267") public void testIncomingPanConnection(){  int iterations=BluetoothTestRunner.sConnectPanIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.disablePan(adapter);  mTestUtils.enablePan(adapter);  mTestUtils.unpair(adapter,device);  mTestUtils.acceptPair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("incomingPanConnection iteration " + (i + 1) + " of "+ iterations);    mTestUtils.incomingPanConnection(adapter,device);    mTestUtils.incomingPanDisconnection(adapter,device);  }  mTestUtils.unpair(adapter,device);  mTestUtils.disablePan(adapter);  mTestUtils.disable(adapter);}  }
class C{  private synchronized void assertRelayLogsEnabled() throws ReplicatorException, InterruptedException {  if (useRelayLogs) {    if (relayLogTask == null) {      startRelayLogs(binlogPosition.getFileName(),binlogPosition.getPosition());    } else     if (relayLogTask.isFinished())     throw new ExtractorException("Relay log task has unexpectedly terminated; logs may not be accessible");  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static boolean isETC1Supported(){  int[] results=new int[20];  GLES10.glGetIntegerv(GLES10.GL_NUM_COMPRESSED_TEXTURE_FORMATS,results,0);  int numFormats=results[0];  if (numFormats > results.length) {    results=new int[numFormats];  }  GLES10.glGetIntegerv(GLES10.GL_COMPRESSED_TEXTURE_FORMATS,results,0);  for (int i=0; i < numFormats; i++) {    if (results[i] == ETC1.ETC1_RGB8_OES) {      return true;    }  }  return false;}  }
class C{  private StrictChronology(Chronology base){  super(base,null);}  }
class C{  protected Match createMatchFromPacket(IOFSwitch sw,OFPort inPort,FloodlightContext cntx){  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  VlanVid vlan=VlanVid.ofVlan(eth.getVlanID());  MacAddress srcMac=eth.getSourceMACAddress();  MacAddress dstMac=eth.getDestinationMACAddress();  Match.Builder mb=sw.getOFFactory().buildMatch();  mb.setExact(MatchField.IN_PORT,inPort).setExact(MatchField.ETH_SRC,srcMac).setExact(MatchField.ETH_DST,dstMac);  if (!vlan.equals(VlanVid.ZERO)) {    mb.setExact(MatchField.VLAN_VID,OFVlanVidMatch.ofVlanVid(vlan));  }  if (eth.getEtherType() == EthType.IPv4) {    IPv4 ip=(IPv4)eth.getPayload();    IPv4Address srcIp=ip.getSourceAddress();    IPv4Address dstIp=ip.getDestinationAddress();    mb.setExact(MatchField.IPV4_SRC,srcIp).setExact(MatchField.IPV4_DST,dstIp).setExact(MatchField.ETH_TYPE,EthType.IPv4);    if (ip.getProtocol().equals(IpProtocol.TCP)) {      TCP tcp=(TCP)ip.getPayload();      mb.setExact(MatchField.IP_PROTO,IpProtocol.TCP).setExact(MatchField.TCP_SRC,tcp.getSourcePort()).setExact(MatchField.TCP_DST,tcp.getDestinationPort());    } else     if (ip.getProtocol().equals(IpProtocol.UDP)) {      UDP udp=(UDP)ip.getPayload();      mb.setExact(MatchField.IP_PROTO,IpProtocol.UDP).setExact(MatchField.UDP_SRC,udp.getSourcePort()).setExact(MatchField.UDP_DST,udp.getDestinationPort());    }  } else   if (eth.getEtherType() == EthType.ARP) {    mb.setExact(MatchField.ETH_TYPE,EthType.ARP);  }  return mb.build();}  }
class C{  public boolean absolute(int row) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity is about to be \"paused\")");}  }
class C{  private void updateDeployment(ConfigureDhcpWorkflowDocument state){  DeploymentService.State deploymentPatchState=new DeploymentService.State();  deploymentPatchState.dhcpRelayProfileId=state.taskServiceEntity.dhcpRelayProfileId;  deploymentPatchState.dhcpRelayServiceId=state.taskServiceEntity.dhcpRelayServiceId;  ServiceHostUtils.getCloudStoreHelper(getHost()).createPatch(state.taskServiceEntity.documentSelfLink).setBody(deploymentPatchState).setCompletion(null).sendWith(this);}  }
class C{  private double computeRotation(double[] prev,int prevSegType,double[] curr,int currSegType,double[] next,int nextSegType){  double[] inSlope=computeInSlope(prev,prevSegType,curr,currSegType);  double[] outSlope=computeOutSlope(curr,currSegType,next,nextSegType);  if (inSlope == null) {    inSlope=outSlope;  }  if (outSlope == null) {    outSlope=inSlope;  }  if (inSlope == null) {    return 0;  }  double dx=inSlope[0] + outSlope[0];  double dy=inSlope[1] + outSlope[1];  if (dx == 0 && dy == 0) {    return Math.toDegrees(Math.atan2(inSlope[1],inSlope[0])) + 90;  } else {    return Math.toDegrees(Math.atan2(dy,dx));  }}  }
class C{  public boolean isFileVisible(VirtualFile file,boolean showHiddenFiles){  if (file.is(VFileProperty.SYMLINK) && file.getCanonicalPath() == null) {    return false;  }  if (!file.isDirectory()) {    if (FileElement.isArchive(file)) {      if (!myChooseJars && !myChooseJarContents) {        return false;      }    } else     if (!myChooseFiles) {      return false;    }    if (myFileFilter != null && !myFileFilter.value(file)) {      return false;    }  }  if (isHideIgnored() && FileTypeManager.getInstance().isFileIgnored(file)) {    return false;  }  if (!showHiddenFiles && FileElement.isFileHidden(file)) {    return false;  }  return true;}  }
class C{  private boolean isAVL(){  return isAVL(root);}  }
class C{  public void append(Shape s,boolean connect){  append(s.getPathIterator(new AffineTransform()),connect);}  }
class C{  @RequestProcessing(value="/admin/comment/{commentId}",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showComment(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String commentId) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/comment.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final JSONObject comment=commentQueryService.getComment(commentId);  dataModel.put(Comment.COMMENT,comment);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public static char[] convertBytes2Uint8s(byte[] bytes){  int len=bytes.length;  char[] uint8s=new char[len];  for (int i=0; i < len; i++) {    uint8s[i]=convertByte2Uint8(bytes[i]);  }  return uint8s;}  }
class C{  public ZAddParams nx(){  addParam(NX);  return this;}  }
class C{  public static final boolean isLinux(){  return m_linux;}  }
class C{  public static final String readString(byte[] bytes,String charset) throws IOException {  return readString(bytes,0,bytes.length,Charset.forName(charset));}  }
class C{  HttpResponse(Http http,URL url,WebPage page,boolean followRedirects) throws IOException {  this.url=url;  GetMethod get=new GetMethod(url.toString());  get.setFollowRedirects(followRedirects);  get.setDoAuthentication(true);  if (page.getModifiedTime() > 0) {    get.setRequestHeader("If-Modified-Since",HttpDateFormat.toString(page.getModifiedTime()));  }  HttpMethodParams params=get.getParams();  if (http.getUseHttp11()) {    params.setVersion(HttpVersion.HTTP_1_1);  } else {    params.setVersion(HttpVersion.HTTP_1_0);  }  params.makeLenient();  params.setContentCharset("UTF-8");  params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);  params.setBooleanParameter(HttpMethodParams.SINGLE_COOKIE_HEADER,true);  try {    code=Http.getClient().executeMethod(get);    Header[] heads=get.getResponseHeaders();    for (int i=0; i < heads.length; i++) {      headers.set(heads[i].getName(),heads[i].getValue());    }    int contentLength=Integer.MAX_VALUE;    String contentLengthString=headers.get(Response.CONTENT_LENGTH);    if (contentLengthString != null) {      try {        contentLength=Integer.parseInt(contentLengthString.trim());      } catch (      NumberFormatException ex) {        throw new HttpException("bad content length: " + contentLengthString);      }    }    if (http.getMaxContent() >= 0 && contentLength > http.getMaxContent()) {      contentLength=http.getMaxContent();    }    InputStream in=get.getResponseBodyAsStream();    try {      byte[] buffer=new byte[HttpBase.BUFFER_SIZE];      int bufferFilled=0;      int totalRead=0;      ByteArrayOutputStream out=new ByteArrayOutputStream();      while ((bufferFilled=in.read(buffer,0,buffer.length)) != -1 && totalRead + bufferFilled <= contentLength) {        totalRead+=bufferFilled;        out.write(buffer,0,bufferFilled);      }      content=out.toByteArray();    } catch (    Exception e) {      if (code == 200)       throw new IOException(e.toString());    } finally {      if (in != null) {        in.close();      }      get.abort();    }    StringBuilder fetchTrace=null;    if (Http.LOG.isTraceEnabled()) {      fetchTrace=new StringBuilder("url: " + url + "; status code: "+ code+ "; bytes received: "+ content.length);      if (getHeader(Response.CONTENT_LENGTH) != null)       fetchTrace.append("; Content-Length: " + getHeader(Response.CONTENT_LENGTH));      if (getHeader(Response.LOCATION) != null)       fetchTrace.append("; Location: " + getHeader(Response.LOCATION));    }    if (content != null) {      String contentEncoding=headers.get(Response.CONTENT_ENCODING);      if (contentEncoding != null && Http.LOG.isTraceEnabled())       fetchTrace.append("; Content-Encoding: " + contentEncoding);      if ("gzip".equals(contentEncoding) || "x-gzip".equals(contentEncoding)) {        content=http.processGzipEncoded(content,url);        if (Http.LOG.isTraceEnabled())         fetchTrace.append("; extracted to " + content.length + " bytes");      } else       if ("deflate".equals(contentEncoding)) {        content=http.processDeflateEncoded(content,url);        if (Http.LOG.isTraceEnabled())         fetchTrace.append("; extracted to " + content.length + " bytes");      }    }    if (page.getHeaders() != null) {      page.getHeaders().clear();    }    for (    String key : headers.names()) {      page.getHeaders().put(new Utf8(key),new Utf8(headers.get(key)));    }    if (Http.LOG.isTraceEnabled()) {      Http.LOG.trace(fetchTrace.toString());    }  }  finally {    get.releaseConnection();  }}  }
class C{  public void test_ASK() throws Exception {  final String queryStr="ASK where {?s ?p ?o}";  final BooleanQuery query=cxn.prepareBooleanQuery(QueryLanguage.SPARQL,queryStr);  assertEquals(false,query.evaluate());}  }
class C{  SolrInputField field(String name,float boost,Object... values){  SolrInputField f=new SolrInputField(name);  for (  Object v : values) {    f.addValue(v,1.0F);  }  f.setBoost(boost);  return f;}  }
class C{  public static void dropTable(Database db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"User\"";  db.execSQL(sql);}  }
class C{  protected static Clustering kMeans(int k,Cluster[] centers,List<? extends Cluster> data){  assert (centers.length == k);  assert (k > 0);  int dimensions=centers[0].getCenter().length;  ArrayList<ArrayList<Cluster>> clustering=new ArrayList<ArrayList<Cluster>>();  for (int i=0; i < k; i++) {    clustering.add(new ArrayList<Cluster>());  }  while (true) {    for (    Cluster point : data) {      double minDistance=distance(point.getCenter(),centers[0].getCenter());      int closestCluster=0;      for (int i=1; i < k; i++) {        double distance=distance(point.getCenter(),centers[i].getCenter());        if (distance < minDistance) {          closestCluster=i;          minDistance=distance;        }      }      clustering.get(closestCluster).add(point);    }    SphereCluster[] newCenters=new SphereCluster[centers.length];    for (int i=0; i < k; i++) {      newCenters[i]=calculateCenter(clustering.get(i),dimensions);      clustering.get(i).clear();    }    boolean converged=true;    for (int i=0; i < k; i++) {      if (!Arrays.equals(centers[i].getCenter(),newCenters[i].getCenter())) {        converged=false;        break;      }    }    if (converged) {      break;    } else {      centers=newCenters;    }  }  return new Clustering(centers);}  }
class C{  public void installUI(JComponent c){  optionPane=(JOptionPane)c;  installDefaults();  optionPane.setLayout(createLayoutManager());  installComponents();  installListeners();  installKeyboardActions();}  }
class C{  public final void testEmailAddressWithContextAndResourceIdParameters(){  assertNotNull(Validators.emailAddress(getContext(),android.R.string.cancel));}  }
class C{  private Object invokeMethodByName(CategoryFeatureType cf,String methodName){  java.lang.reflect.Method m=null;  try {    m=cf.getClass().getMethod(methodName);    if (m != null) {      return m.invoke(cf);    }  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.521 -0500",hash_original_method="48C91C3E7A4F39D8E60BF0ABE327AC31",hash_generated_method="30DC26F914220D71E7656F090C402658") public void finish() throws IOException {  if (!this.wroteLastChunk) {    flushCache();    writeClosingChunk();    this.wroteLastChunk=true;  }}  }
class C{  public JSONArray put(int index,Map<?,?> value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  public static boolean isDonator(){  return DONATOR;}  }
class C{  public Map<String,Object> addToCartBulk(String catalogId,String categoryId,Map<String,? extends Object> context){  String itemGroupNumber=(String)context.get("itemGroupNumber");  String keyPrefix="quantity_";  String productQuantityKeyPrefix="product_";  String ignSeparator="_ign_";  for (  Map.Entry<String,? extends Object> entry : context.entrySet()) {    String productId=null;    String quantStr=null;    String itemGroupNumberToUse=itemGroupNumber;    String originalProductId=null;    if (entry.getKey() instanceof String) {      String key=entry.getKey();      int ignIndex=key.indexOf(ignSeparator);      if (ignIndex > 0) {        itemGroupNumberToUse=key.substring(ignIndex + ignSeparator.length());        key=key.substring(0,ignIndex);      }      if (key.startsWith(keyPrefix)) {        productId=key.substring(keyPrefix.length());        quantStr=(String)entry.getValue();      } else       if (key.startsWith(productQuantityKeyPrefix)) {        productId=(String)entry.getValue();        quantStr="1";      } else {        continue;      }    } else {      continue;    }    if (UtilValidate.isNotEmpty(quantStr)) {      BigDecimal quantity=BigDecimal.ZERO;      try {        quantity=new BigDecimal(quantStr);      } catch (      NumberFormatException nfe) {        quantity=BigDecimal.ZERO;      }      if (quantity.compareTo(BigDecimal.ZERO) > 0) {        if (ProductWorker.isAlternativePacking(delegator,null,productId)) {          GenericValue originalProduct=null;          originalProductId=productId;          productId=ProductWorker.getOriginalProductId(delegator,productId);          try {            originalProduct=EntityQuery.use(delegator).from("Product").where("productId",originalProductId).queryOne();          } catch (          GenericEntityException e) {            Debug.logError(e,"Error getting parent product",module);          }          BigDecimal piecesIncluded=BigDecimal.ZERO;          if (originalProduct != null) {            piecesIncluded=new BigDecimal(originalProduct.getLong("piecesIncluded"));            quantity=quantity.multiply(piecesIncluded);          }        }        try {          if (!ProductWorker.isDecimalQuantityOrderAllowed(delegator,productId,cart.getProductStoreId())) {            BigDecimal remainder=quantity.remainder(BigDecimal.ONE);            if (remainder.compareTo(BigDecimal.ZERO) != 0) {              return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"cart.addToCart.quantityInDecimalNotAllowed",this.cart.getLocale()));            }            quantity=quantity.setScale(0,UtilNumber.getBigDecimalRoundingMode("order.rounding"));          } else {            quantity=quantity.setScale(UtilNumber.getBigDecimalScale("order.decimals"),UtilNumber.getBigDecimalRoundingMode("order.rounding"));          }        } catch (        GenericEntityException e) {          Debug.logError(e.getMessage(),module);          quantity=BigDecimal.ONE;        }        if (quantity.compareTo(BigDecimal.ZERO) < 0) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"cart.quantity_not_positive_number",this.cart.getLocale()));        }        try {          if (Debug.verboseOn())           Debug.logVerbose("Bulk Adding to cart [" + quantity + "] of ["+ productId+ "] in Item Group ["+ itemGroupNumber+ "]",module);          this.cart.addOrIncreaseItem(productId,null,quantity,null,null,null,null,null,null,null,catalogId,null,null,itemGroupNumberToUse,originalProductId,dispatcher);        } catch (        CartItemModifyException e) {          return ServiceUtil.returnError(e.getMessage());        }catch (        ItemNotFoundException e) {          return ServiceUtil.returnError(e.getMessage());        }      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  private PermissionEntry parsePermissionEntry() throws ParsingException, IOException, PropertyExpander.ExpandException {  PermissionEntry e=new PermissionEntry();  match("Permission");  e.permission=match("permission type");  if (peek("\"")) {    e.name=expand(match("quoted string"));  }  if (!peek(",")) {    return e;  }  match(",");  if (peek("\"")) {    e.action=expand(match("quoted string"));    if (!peek(",")) {      return e;    }    match(",");  }  if (peekAndMatch("SignedBy")) {    e.signedBy=expand(match("quoted string"));  }  return e;}  }
class C{  public final boolean isFillY(){  return fillY;}  }
class C{  public static double dev(DoubleList doubles){  if (doubles.isEmpty()) {    return Double.NaN;  }  return Math.sqrt(variance(doubles));}  }
class C{  private MergePolicy buildMergePolicy(IndexSchema schema){  String mpClassName=mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;  MergePolicy policy=schema.getResourceLoader().newInstance(mpClassName,MergePolicy.class);  if (policy instanceof LogMergePolicy) {    LogMergePolicy logMergePolicy=(LogMergePolicy)policy;    fixUseCFMergePolicyInitArg(LogMergePolicy.class);    if (maxMergeDocs != -1)     logMergePolicy.setMaxMergeDocs(maxMergeDocs);    logMergePolicy.setNoCFSRatio(getUseCompoundFile() ? 1.0 : 0.0);    if (mergeFactor != -1)     logMergePolicy.setMergeFactor(mergeFactor);  } else   if (policy instanceof TieredMergePolicy) {    TieredMergePolicy tieredMergePolicy=(TieredMergePolicy)policy;    fixUseCFMergePolicyInitArg(TieredMergePolicy.class);    tieredMergePolicy.setNoCFSRatio(getUseCompoundFile() ? 1.0 : 0.0);    if (mergeFactor != -1) {      tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);      tieredMergePolicy.setSegmentsPerTier(mergeFactor);    }  } else   if (mergeFactor != -1) {    log.warn("Use of <mergeFactor> cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.");  }  if (mergePolicyInfo != null)   SolrPluginUtils.invokeSetters(policy,mergePolicyInfo.initArgs);  return policy;}  }
class C{  protected void restoreModelSettings(TableModel model,Hashtable<String,Object> settings){  int sortCol;  boolean asc;  String search;  boolean regexp;  sortCol=0;  asc=true;  search=null;  regexp=false;  if (settings != null) {    sortCol=(Integer)settings.get(KEY_SORTCOL);    asc=(Boolean)settings.get(KEY_SORTORDER);    if (model instanceof SearchableTableModel) {      search=(String)settings.get(KEY_SEARCHSTRING);      regexp=(Boolean)settings.get(KEY_SEARCHREGEXP);    }  }  if (getSortNewTableModel())   m_Model.sort(sortCol,asc);  if (model instanceof SearchableTableModel)   ((SearchableTableModel)model).search(search,regexp);  if (getUseOptimalColumnWidths())   setOptimalColumnWidth();}  }
class C{  protected void disableSwipeBackLayout(){  enableSwipeBackLayout=false;}  }
class C{  public void resetTSP(){  t.setX(0.0);  t.setY(0.0);  t.setZ(0.0);  s.setX(1.0);  s.setY(1.0);  s.setZ(1.0);  p.setX(0.0);  p.setY(0.0);  p.setZ(0.0);  ip.setX(0.0);  ip.setY(0.0);  ip.setZ(0.0);}  }
class C{  public StringContent(int initialLength){  if (initialLength < 1) {    initialLength=1;  }  data=new char[initialLength];  data[0]='\n';  count=1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:39.987 -0500",hash_original_method="0F761933C6E4A91421ABB8964A4D9EB8",hash_generated_method="10EA241F4E17C54E56CD73AD014CFB39") public Builder detectCustomSlowCalls(){  return enable(DETECT_CUSTOM);}  }
class C{  public SelectFileSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public void testCreateWithoutProjectSpace() throws Exception {  String folder="/foo/bar";  File fileFolder=new File(folder);  expectDirCopy(fileFolder,new File("/tmp/copy"));  control.replay();  Codebase codebase=creator.create(ImmutableMap.<String,String>of("path",folder));  assertNotNull(codebase);  assertEquals("public",codebase.projectSpace());  control.verify();}  }
class C{  private boolean isValidParentId(int parentId,String entidad) throws Exception {  String tblName, qual=null;  boolean valid=false;  int count=0;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    tblName=table.getDirTableName();    qual=table.getLoadDirQual(parentId);    if (parentId == 0)     valid=true; else {      count=DbSelectFns.selectCount(dbConn,tblName,qual);      if (count > 0)       valid=true;    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return valid;}  }
class C{  public static Address alignUp(Address addr,int bits){  return alignWord(addr.toWord(),bits,false).toAddress();}  }
class C{  public TurnRight(){  super();}  }
class C{  private void inspectOffline(final Player admin,final String username){  try {    Map<String,RPObject> characters=DAORegister.get().get(CharacterDAO.class).loadAllActiveCharacters(username);    for (    RPObject object : characters.values()) {      inspect(admin,object);    }  } catch (  SQLException e) {    admin.sendPrivateText(NotificationType.ERROR,e.toString());  }catch (  IOException e) {    admin.sendPrivateText(NotificationType.ERROR,e.toString());  }}  }
class C{  public double globalClusteringCoefficient(Graph graph){  double n_tripples=0;  double n_triangles=0;  SampledGraph sampledGraph=(SampledGraph)graph;  int iteration=SnowballStatistics.getInstance().lastIteration(sampledGraph.getVertices());  for (  SampledVertex v : sampledGraph.getVertices()) {    if (v.isSampled() && v.getIterationSampled() < iteration) {      int k=v.getNeighbours().size();      if (k > 1) {        int n_2=k * (k - 1) / 2;        double n_3=countAdjacentEdges(v);        n_tripples+=n_2;        n_triangles+=n_3;      }    }  }  return n_triangles / n_tripples;}  }
class C{  protected Coordinate_Impl(){  super();}  }
class C{  protected void startNode(Node node) throws org.xml.sax.SAXException {  if (node instanceof Locator) {    Locator loc=(Locator)node;    fLocator.setColumnNumber(loc.getColumnNumber());    fLocator.setLineNumber(loc.getLineNumber());    fLocator.setPublicId(loc.getPublicId());    fLocator.setSystemId(loc.getSystemId());  } else {    fLocator.setColumnNumber(0);    fLocator.setLineNumber(0);  }switch (node.getNodeType()) {case Node.DOCUMENT_TYPE_NODE:    serializeDocType((DocumentType)node,true);  break;case Node.COMMENT_NODE:serializeComment((Comment)node);break;case Node.DOCUMENT_FRAGMENT_NODE:break;case Node.DOCUMENT_NODE:break;case Node.ELEMENT_NODE:serializeElement((Element)node,true);break;case Node.PROCESSING_INSTRUCTION_NODE:serializePI((ProcessingInstruction)node);break;case Node.CDATA_SECTION_NODE:serializeCDATASection((CDATASection)node);break;case Node.TEXT_NODE:serializeText((Text)node);break;case Node.ENTITY_REFERENCE_NODE:serializeEntityReference((EntityReference)node,true);break;default :}}  }
class C{  private char encode(int d){  d&=0x3f;  if (d < 26)   return (char)(d + 'A'); else   if (d < 52)   return (char)(d + 'a' - 26); else   if (d < 62)   return (char)(d + '0' - 52); else   if (d == 62)   return '+'; else   return '/';}  }
class C{  public void loadReferences(String refStr,boolean wrapBoundary) throws IOException {  if (refStr == null || refStr.length() == 0) {    throw new IllegalArgumentException("Invalid reference list");  }  String[] filenames=refStr.split(",");  logger.info("reading references: {}",refStr);  references=MetricUtils.readReferences(filenames);  assert references.get(0).size() == filenames.length;  numReferences=filenames.length;  if (wrapBoundary) {    for (    List<Sequence<IString>> refList : references) {      wrap(refList);    }  }  assert references.size() == tuneSource.size();  logger.info("Number of references for objective function calculation: {}",numReferences);}  }
class C{  private String[] addtoSelectionArgs(final String argValue,final String[] selectionArgsIn){  String[] selectionArgs=selectionArgsIn;  List<String> selectionArgsList=new ArrayList<>();  selectionArgsList.add(argValue);  if (null != selectionArgsIn) {    for (    final String arg : selectionArgsIn) {      selectionArgsList.add(arg);    }  }  selectionArgs=selectionArgsList.toArray(new String[0]);  selectionArgsList.clear();  selectionArgsList=null;  return selectionArgs;}  }
class C{  private void reset(){  startFound=false;  required=false;  escape=false;  toEnd=false;  index1=-1;  index2=-1;}  }
class C{  @UiThread @NonNull @Override public HorizontalChildViewHolder onCreateChildViewHolder(@NonNull ViewGroup parent,int viewType){  View view=mInflater.inflate(R.layout.list_item_child_horizontal,parent,false);  return new HorizontalChildViewHolder(view);}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {  flushPending();  if (m_doIndent && !m_isprevtext) {    try {      outputLineSep();    } catch (    IOException e) {      throw new SAXException(e);    }  }  flushWriter();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  public TestTree(final ID sessionId,final Collection<? extends TestSuite> suites,final String name){  this.name=name;  this.suites=newArrayList(ImmutableList.copyOf(suites));  this.sessionId=sessionId;}  }
class C{  public DateRange(Date lower,Date upper){  super(lower.getTime(),upper.getTime());  this.lowerDate=lower.getTime();  this.upperDate=upper.getTime();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.678 -0400",hash_original_method="B02C906E6ABD17D05C219574C0B0E791",hash_generated_method="DB2D35A555E307126FAC7A0ED05BDE1D") public ProxyReader(Reader proxy){  super(proxy);}  }
class C{  @LayoutlibDelegate static float cos(float angle){  return (float)Math.cos(angle);}  }
class C{  private static GridEmbeddedHttpServer createAndStart(boolean httpsMode) throws Exception {  HttpServer httpSrv;  InetSocketAddress addrToBind=new InetSocketAddress(HOSTNAME_TO_BIND_SRV,getAvailablePort());  if (httpsMode) {    HttpsServer httpsSrv=HttpsServer.create(addrToBind,0);    httpsSrv.setHttpsConfigurator(new HttpsConfigurator(GridTestUtils.sslContext()));    httpSrv=httpsSrv;  } else   httpSrv=HttpServer.create(addrToBind,0);  GridEmbeddedHttpServer embeddedHttpSrv=new GridEmbeddedHttpServer();  embeddedHttpSrv.proto=httpsMode ? "https" : "http";  embeddedHttpSrv.httpSrv=httpSrv;  embeddedHttpSrv.httpSrv.start();  return embeddedHttpSrv;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,false);}  }
class C{  private int writeParameter(String key,String value){  ContentValues values=new ContentValues();  values.put(RcsSettingsData.KEY_VALUE,value);  String[] whereArgs=new String[]{key};  return mLocalContentResolver.update(RcsSettingsData.CONTENT_URI,values,WHERE_CLAUSE,whereArgs);}  }
class C{  public BigdataWriter(BigdataSailRepository repo){  this.repo=repo;}  }
class C{  public void validationError(String systemID,int lineNr,String message,String elementName,String attributeName,String attributeValue) throws XMLValidationException {  XMLUtil.validationError(systemID,lineNr,message,elementName,attributeName,attributeValue);}  }
class C{  public static ODataRequestContext createODataRequestContext(ODataRequest.Method method,ODataUri oDataUri,EntityDataModel entityDataModel) throws UnsupportedEncodingException {  return new ODataRequestContext(createODataRequest(method),oDataUri,entityDataModel);}  }
class C{  public static Date evenHourDateBefore(Date date){  if (date == null) {    date=new Date();  }  Calendar c=Calendar.getInstance();  c.setTime(date);  c.set(Calendar.MINUTE,0);  c.set(Calendar.SECOND,0);  c.set(Calendar.MILLISECOND,0);  return c.getTime();}  }
class C{  public synchronized Way performSplit(final Way way,final Node node){  createCheckpoint(R.string.undo_action_split_way);  Way result=getDelegator().splitAtNode(way,node);  map.invalidate();  return result;}  }
class C{  @Deprecated public static boolean compareByteBuffers(byte[] buf1,byte[] buf2){  if (buf1.length != buf2.length) {    return false;  }  for (int i=0; i < buf1.length; i++) {    if (buf1[i] != buf2[i]) {      return false;    }  }  return true;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:06.718 -0500",hash_original_method="B0B2FCB9CE6FDF4EA578715FA3754421",hash_generated_method="3FC5DF76B8480C3D8AA91CEAB9060C0C") @Override public void close() throws IOException {  buffer=null;}  }
class C{  public YearMonthDay withDayOfMonth(int dayOfMonth){  int[] newValues=getValues();  newValues=getChronology().dayOfMonth().set(this,DAY_OF_MONTH,newValues,dayOfMonth);  return new YearMonthDay(this,newValues);}  }
class C{  public void paint(Graphics g){  Dimension size=getSize();  if ((this.size == null) || !this.size.equals(size)) {    this.size=size;    calcGraphInsets();    calcPlotRect(size);  }  g.setColor(backgroundColor);  g.fillRect(0,0,getWidth(),getHeight());  drawBoundary(g);  drawXTickMarks(g);  drawYTickMarks(g);  drawTitle(g);  drawXLabel(g);  drawYLabel(g);  g.setColor(plotColor);  for (  double[] point : points) {    int x=getXPos(point[0]);    int y=getYPos(point[1]);    g.drawLine(x - 2,y + 2,x + 2,y - 2);    g.drawLine(x - 2,y - 2,x + 2,y + 2);  }  g.setColor(boundaryColor);  g.drawString(info,getXPos(0.6),getYPos(0.2));}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(mTitle);  return xySeries;}  }
class C{  public T caseEnricher(Enricher object){  return null;}  }
class C{  public Vector3D(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  static Spannable buildSpannable(SuggestionAnswer.ImageLine line,Paint.FontMetrics metrics,float density){  SpannableStringBuilder builder=new SpannableStringBuilder();  int maxTextHeightSp=getMaxTextHeightSp(line);  List<SuggestionAnswer.TextField> textFields=line.getTextFields();  for (int i=0; i < textFields.size(); i++) {    appendAndStyleText(builder,textFields.get(i),maxTextHeightSp,metrics,density);  }  if (line.hasAdditionalText()) {    builder.append("  ");    SuggestionAnswer.TextField additionalText=line.getAdditionalText();    appendAndStyleText(builder,additionalText,maxTextHeightSp,metrics,density);  }  if (line.hasStatusText()) {    builder.append("  ");    SuggestionAnswer.TextField statusText=line.getStatusText();    appendAndStyleText(builder,statusText,maxTextHeightSp,metrics,density);  }  return builder;}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  public Comparable find(Comparable x){  nullNode.element=x;  current=header.right;  for (; ; ) {    if (x.compareTo(current.element) < 0)     current=current.left; else     if (x.compareTo(current.element) > 0)     current=current.right; else     if (current != nullNode)     return current.element; else     return null;  }}  }
class C{  public String formatDeleteNfsExportCmd(String dataMover,String path){  StringBuilder cmd=new StringBuilder();  cmd.append(" ");  cmd.append(dataMover);  cmd.append(" -unexport ");  cmd.append(" ");  cmd.append(path);  return cmd.toString();}  }
class C{  public List<RelatedResourceRep> listByHost(URI hostId){  UnManagedExportMaskList response=client.get(UnManagedExportMaskList.class,PathConstants.UNMANAGED_EXPORTS_BY_HOST_URL,hostId);  return ResourceUtils.defaultList(response.getUnManagedExportMasks());}  }
class C{  @Override public void cascadePerformRemoveIfRequired(Object object,UnitOfWorkImpl uow,Map visitedObjects){  cascadePerformRemoveIfRequired(object,uow,visitedObjects,true);}  }
class C{  public ComputeTaskCancelledException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  private static Image loadImage(){  System.out.println("Select the map");  final String mapName=new FileOpen("Select The Map",s_mapFolderLocation,".gif",".png").getPathString();  if (mapName != null) {    final Image img=Toolkit.getDefaultToolkit().createImage(mapName);    final MediaTracker tracker=new MediaTracker(new Panel());    tracker.addImage(img,1);    try {      tracker.waitForAll();      return img;    } catch (    final InterruptedException e) {      ClientLogger.logQuietly(e);      return loadImage();    }  } else {    return null;  }}  }
class C{  public EventStoreBuilder unlimitedClientReconnections(){  settingsBuilder.maxReconnections(-1);  return this;}  }
class C{  public static GF2nONBElement ONE(GF2nONBField gf2n){  int mLength=gf2n.getONBLength();  long[] polynomial=new long[mLength];  for (int i=0; i < mLength - 1; i++) {    polynomial[i]=0xffffffffffffffffL;  }  polynomial[mLength - 1]=mMaxmask[gf2n.getONBBit() - 1];  return new GF2nONBElement(gf2n,polynomial);}  }
class C{  public XMLDocument(double version,boolean standalone,String codeset){  this(version,standalone);  setCodeset(codeset);}  }
class C{  @SuppressWarnings({"StringContatenationInLoop"}) public void print(IndentWriter writer){  writer.println("LookupInstructionExec" + " fromStream=" + fromStream + " fromStreamName="+ fromStreamName+ " numSubStreams="+ numSubStreams+ " requiredSubStreams="+ Arrays.toString(requiredSubStreams)+ " optionalSubStreams="+ Arrays.toString(optionalSubStreams));  writer.incrIndent();  for (int i=0; i < lookupStrategies.length; i++) {    writer.println("lookupStrategies[" + i + "] : "+ lookupStrategies[i].toString());  }  writer.decrIndent();}  }
class C{  @Override public void close() throws IOException {  in.close();}  }
class C{  public void updatePoly(int[] xypoints,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkPoly.write(xypoints,properties,link.dos);}  }
class C{  private double round(double data){  return Math.rint(data / m_Precision) * m_Precision;}  }
class C{  @FlashException public static void registerStoragePools(String virtualArrayId,@As(",") String[] ids){  if ((ids != null) && (ids.length > 0)) {    for (    StoragePoolRestRep pool : StoragePoolUtils.getStoragePools(uris(ids))) {      if (RegistrationStatus.isUnregistered(pool.getRegistrationStatus())) {        StoragePoolUtils.register(id(pool),id(pool.getStorageSystem()));      }    }  }  storagePools(virtualArrayId);}  }
class C{  private void sendMsrpSendRequest(String txId,String to,String from,String msrpMsgId,String contentType,int dataSize,byte data[],long firstByte,long lastByte,long totalSize) throws NetworkException {  ByteArrayOutputStream buffer=null;  try {    boolean isLastChunk=(lastByte == totalSize);    buffer=new ByteArrayOutputStream(4000);    buffer.reset();    buffer.write(MsrpConstants.MSRP_HEADER.getBytes(UTF8));    buffer.write(MsrpConstants.CHAR_SP);    buffer.write(txId.getBytes(UTF8));    buffer.write((" " + MsrpConstants.METHOD_SEND).getBytes(UTF8));    buffer.write(NEW_LINE);    String toHeader=MsrpConstants.HEADER_TO_PATH + ": " + to+ MsrpConstants.NEW_LINE;    buffer.write(toHeader.getBytes(UTF8));    String fromHeader=MsrpConstants.HEADER_FROM_PATH + ": " + from+ MsrpConstants.NEW_LINE;    buffer.write(fromHeader.getBytes(UTF8));    String msgIdHeader=MsrpConstants.HEADER_MESSAGE_ID + ": " + msrpMsgId+ MsrpConstants.NEW_LINE;    buffer.write(msgIdHeader.getBytes(UTF8));    String byteRange=MsrpConstants.HEADER_BYTE_RANGE + ": " + firstByte+ "-"+ lastByte+ "/"+ totalSize+ MsrpConstants.NEW_LINE;    buffer.write(byteRange.getBytes(UTF8));    if (mFailureReportOption) {      String header=MsrpConstants.HEADER_FAILURE_REPORT + ": yes" + MsrpConstants.NEW_LINE;      buffer.write(header.getBytes(UTF8));    }    if (mSuccessReportOption) {      String header=MsrpConstants.HEADER_SUCCESS_REPORT + ": yes" + MsrpConstants.NEW_LINE;      buffer.write(header.getBytes(UTF8));    }    if (contentType != null) {      String content=MsrpConstants.HEADER_CONTENT_TYPE + ": " + contentType+ MsrpConstants.NEW_LINE;      buffer.write(content.getBytes(UTF8));    }    if (data != null) {      buffer.write(NEW_LINE);      buffer.write(data,0,dataSize);      buffer.write(NEW_LINE);    }    buffer.write(MsrpConstants.END_MSRP_MSG.getBytes(UTF8));    buffer.write(txId.getBytes(UTF8));    if (isLastChunk) {      buffer.write(MsrpConstants.FLAG_LAST_CHUNK);    } else {      buffer.write(MsrpConstants.FLAG_MORE_CHUNK);    }    buffer.write(NEW_LINE);    if (mFailureReportOption) {      if (mMsrpTransaction != null) {        mMsrpTransaction.handleRequest();        mRequestTransaction=null;      } else {        mRequestTransaction=new RequestTransaction(mRcsSettings);      }      mConnection.sendChunk(buffer.toByteArray());      buffer.close();      if (mRequestTransaction != null) {        mRequestTransaction.waitResponse();        if (!mRequestTransaction.isResponseReceived()) {          throw new NetworkException("Failed to receive transaction response!");        }      }    } else {      mConnection.sendChunk(buffer.toByteArray());      buffer.close();      if (mMsrpTransaction != null) {        mMsrpTransaction.handleRequest();      }    }  } catch (  IOException e) {    throw new NetworkException("Failed to read chunk data!",e);  } finally {    CloseableUtils.tryToClose(buffer);  }}  }
class C{  @DSComment("Database access") @DSSpec(DSCat.DATABASE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:37.748 -0500",hash_original_method="48B10D52D633E686D99B492C35189F09",hash_generated_method="87F3E7DEB331588F9FEE85FE0B266C4D") public void addRow(Object[] columnValues){  this.addTaint(columnValues[0].toString().getTaint());  this.addTaint(columnValues[0].getTaint());  if (columnValues.length != columnCount) {    throw new IllegalArgumentException();  }  int start=rowCount++ * columnCount;  ensureCapacity(start + columnCount);  System.arraycopy(columnValues,0,data,start,columnCount);}  }
class C{  public Source<T> andAlwaysTheValues(@SuppressWarnings("unchecked") T... values){  return Compositions.combineWithValues(this,values);}  }
class C{  public String trimStringToWidth(String string,int newLength,boolean reverse){  StringBuilder stringbuilder=new StringBuilder();  int width=0;  int k=reverse ? string.length() - 1 : 0;  int l=reverse ? -1 : 1;  boolean flag1=false;  boolean flag2=false;  for (int i1=k; i1 >= 0 && i1 < string.length() && width < newLength; i1+=l) {    char thisChar=string.charAt(i1);    int thisWidth=getCharWidth(thisChar);    if (flag1) {      flag1=false;      if (thisChar != 108 && thisChar != 76) {        if (thisChar == 114 || thisChar == 82) {          flag2=false;        }      } else {        flag2=true;      }    } else     if (thisWidth < 0) {      flag1=true;    } else {      width+=thisWidth;      if (flag2) {        ++width;      }    }    if (width > newLength) {      break;    }    if (reverse) {      stringbuilder.insert(0,thisChar);    } else {      stringbuilder.append(thisChar);    }  }  return stringbuilder.toString();}  }
class C{  public static void writeHTMLReport(InputStream source,OutputStream destination,String wikiPath,boolean isFullHTML) throws TransformerException {  Map<String,String> arguments=new HashMap<>();  arguments.put("wikiPath",wikiPath);  arguments.put("isFullHTML",Boolean.toString(isFullHTML));  XsltTransformer.transform(source,HTMLReport.class.getClassLoader().getResourceAsStream("org/verapdf/report/HTMLReportStylesheet.xsl"),destination,arguments);}  }
class C{  public LatestComputation(UnitGraph unitGraph,DelayabilityAnalysis delayed,Map equivRhsMap){  this(unitGraph,delayed,equivRhsMap,new ArrayPackedSet(new CollectionFlowUniverse(equivRhsMap.values())));}  }
class C{  void addDummy(){  addDummyByte=true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public void start(final InputStream in) throws SAXException, IOException, ParserConfigurationException {  SAXParserFactory factory=SAXParserFactory.newInstance();  SAXParser saxParser=factory.newSAXParser();  saxParser.parse(in,this);}  }
class C{  public boolean isOutputFormatDefined(){  return (m_OutputFormat != null);}  }
class C{  public void closeMenu(){  if (transitionRunning) {    return;  }  if (Display.getInstance().getCurrent() == menu) {    parent.showBack();  }}  }
class C{  public void reject(Object msg){  if (compareAndSetState(State.Proposed,State.Rejected)) {  }}  }
class C{  @Override public boolean hasStableIds(){  return false;}  }
class C{  protected void flushInput(){  if ((m_InputStringAtts.getAttributeIndices().length > 0) || (m_InputRelAtts.getAttributeIndices().length > 0)) {    m_InputFormat=m_InputFormat.stringFreeStructure();    m_InputStringAtts=new StringLocator(m_InputFormat,m_InputStringAtts.getAllowedIndices());    m_InputRelAtts=new RelationalLocator(m_InputFormat,m_InputRelAtts.getAllowedIndices());  } else {    m_InputFormat.delete();  }}  }
class C{  public void testJsp() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public boolean match(SingleMemberAnnotation node,Object other){  if (!(other instanceof SingleMemberAnnotation)) {    return false;  }  SingleMemberAnnotation o=(SingleMemberAnnotation)other;  return (safeSubtreeMatch(node.getTypeName(),o.getTypeName()) && safeSubtreeMatch(node.getValue(),o.getValue()));}  }
class C{  private void checkCodeSigning(X509Certificate cert) throws CertificateException {  Set<String> exts=getCriticalExtensions(cert);  if (checkKeyUsage(cert,KU_SIGNATURE) == false) {    throw new ValidatorException("KeyUsage does not allow digital signatures",ValidatorException.T_EE_EXTENSIONS,cert);  }  if (checkEKU(cert,exts,OID_EKU_CODE_SIGNING) == false) {    throw new ValidatorException("Extended key usage does not permit use for code signing",ValidatorException.T_EE_EXTENSIONS,cert);  }  if (variant.equals(Validator.VAR_JCE_SIGNING) == false) {    if (!SimpleValidator.getNetscapeCertTypeBit(cert,NSCT_CODE_SIGNING)) {      throw new ValidatorException("Netscape cert type does not permit use for code signing",ValidatorException.T_EE_EXTENSIONS,cert);    }    exts.remove(SimpleValidator.OID_NETSCAPE_CERT_TYPE);  }  exts.remove(SimpleValidator.OID_KEY_USAGE);  exts.remove(SimpleValidator.OID_EXTENDED_KEY_USAGE);  checkRemainingExtensions(exts);}  }
class C{  public static X509CRL loadCRLBase64Encoded(final String base64Encoded){  final byte[] derEncoded=Base64.decodeBase64(base64Encoded);  final X509CRL crl=loadCRL(new ByteArrayInputStream(derEncoded));  return crl;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  final boolean isVolatile(){  return Modifier.isVolatile(getModifiers());}  }
class C{  private int amountToScrollToNewFocus(int direction,View newFocus,int positionOfNewFocus){  int amountToScroll=0;  newFocus.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(newFocus,mTempRect);  if (direction == View.FOCUS_UP) {    if (mTempRect.left < mListPadding.left) {      amountToScroll=mListPadding.left - mTempRect.left;      if (positionOfNewFocus > 0) {        amountToScroll+=getArrowScrollPreviewLength();      }    }  } else {    final int listRight=getWidth() - mListPadding.right;    if (mTempRect.bottom > listRight) {      amountToScroll=mTempRect.right - listRight;      if (positionOfNewFocus < mItemCount - 1) {        amountToScroll+=getArrowScrollPreviewLength();      }    }  }  return amountToScroll;}  }
class C{  public void typedEquals() throws IOException {  writeCode(TYPED_EQUALS);}  }
class C{  private boolean routeProfilesEqual(TransitRoute transitRoute,TransitRoute transitRoute2){  if (transitRoute.getStops().size() != transitRoute2.getStops().size())   return false;  for (int i=0; i < transitRoute.getStops().size(); i++) {    if (!(transitRoute.getStops().get(i).getStopFacility().getId().equals(transitRoute2.getStops().get(i).getStopFacility().getId())))     break;    if (i == transitRoute.getStops().size() - 1)     return true;  }  return false;}  }
class C{  public Boolean isConsolidate(){  return consolidate;}  }
class C{  public void testBug22024() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  createProcedure("testBug22024_1","(\r\n)\r\n BEGIN SELECT 1; END");  createProcedure("testBug22024_2","(\r\na INT)\r\n BEGIN SELECT 1; END");  CallableStatement cstmt=null;  try {    cstmt=this.conn.prepareCall("{CALL testBug22024_1()}");    cstmt.execute();    cstmt=this.conn.prepareCall("{CALL testBug22024_2(?)}");    cstmt.setInt(1,1);    cstmt.execute();  }  finally {    if (cstmt != null) {      cstmt.close();    }  }}  }
class C{  private void ensureOpen() throws IOException {  if (buf == null)   throw new IOException("Stream closed");}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1222) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @SuppressWarnings("unused") private void copyHeapDefs(IR ir,HashMap<Instruction,HeapOperand<?>[]> store){  SSADictionary dictionary=ir.HIRInfo.dictionary;  for (Enumeration<BasicBlock> be=ir.forwardBlockEnumerator(); be.hasMoreElements(); ) {    BasicBlock bb=be.nextElement();    for (Enumeration<Instruction> e=dictionary.getAllInstructions(bb); e.hasMoreElements(); ) {      Instruction s=e.nextElement();      store.put(s,ir.HIRInfo.dictionary.getHeapDefs(s));    }  }}  }
class C{  private static void writeInfoFlowDetails(String desc,List<String> infoKinds,Map<String,List<CallLocationModel>> infoUnits,FileWriter fw) throws IOException {  if ((infoKinds != null && !infoKinds.isEmpty()) || (infoUnits != null && !infoUnits.isEmpty())) {    fw.write("  " + desc + "\n");    String kinds=(infoKinds == null) ? "[SENSITIVE_UNCATEGORIZED]" : infoKinds.toString();    fw.write("    " + kinds + "\n");    if (infoUnits != null) {      for (      String kind : infoUnits.keySet()) {        fw.write("    " + kind + "\n");        for (        CallLocationModel loc : infoUnits.get(kind)) {          fw.write("      " + loc + "\n");        }      }    }  }}  }
class C{  public ErdosRenyiConfig(int numberOfNodes,int numberOfEdges){  super(numberOfNodes);  this.numberOfEdges=numberOfEdges;}  }
class C{  public void add(Object element){  if (this.size == this.capacity)   flush();  this.elements[size++]=element;}  }
class C{  @Override public boolean isVisible(){  return false;}  }
class C{  @Override public void onData(Client client,ByteBuffer buffer,int bytes){  buffer.flip();  client.appendMessage(new String(buffer.array(),0,bytes));}  }
class C{  public boolean addEntry(File file){  if (file == null) {    log.warning("No File");    return false;  }  if (!file.exists() || file.isDirectory() || !file.canRead()) {    log.warning("not added - " + file + ", Exists="+ file.exists()+ ", Directory="+ file.isDirectory());    return false;  }  log.fine("addEntry - " + file);  String name=file.getName();  byte[] data=null;  FileInputStream fis=null;  ByteArrayOutputStream os=null;  try {    fis=new FileInputStream(file);    os=new ByteArrayOutputStream();    byte[] buffer=new byte[1024 * 8];    int length=-1;    while ((length=fis.read(buffer)) != -1)     os.write(buffer,0,length);    data=os.toByteArray();  } catch (  IOException ioe) {    log.log(Level.SEVERE,"(file)",ioe);  } finally {    if (fis != null) {      try {        fis.close();      } catch (      IOException ex) {        log.log(Level.SEVERE,"(file)",ex);      }      ;    }    if (os != null) {      try {        os.close();      } catch (      IOException ex) {        log.log(Level.SEVERE,"(file)",ex);      }      ;    }  }  return addEntry(name,data);}  }
class C{  public void recordSnapFromMySQLStatus(Map<String,String> kvPairs){  if (kvPairs == null)   return;  setSlowQueryCount(CommonUtils.getMapValueLong(kvPairs,"SLOW_QUERIES",0L));  setConnections(CommonUtils.getMapValueLong(kvPairs,"CONNECTIONS",0L));  setQueries(CommonUtils.getMapValueLong(kvPairs,"QUERIES",0L));  setThreads((int)CommonUtils.getMapValueLong(kvPairs,"THREADS_CONNECTED",0L));  setAbortedConnectsClients(CommonUtils.getMapValueLong(kvPairs,"ABORTED_CONNECTS",0L));  setActiveThreads((int)CommonUtils.getMapValueLong(kvPairs,"THREADS_RUNNING",0L));  setDeadlocks(CommonUtils.getMapValueLong(kvPairs,"INNODB_DEADLOCKS",0L));  setUptime(CommonUtils.getMapValueLong(kvPairs,"UPTIME",0L));  setMax_conn_error(CommonUtils.getMapValueLong(kvPairs,"CONNECTION_ERRORS_MAX_CONNECTIONS",0L));}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().getArchiveDirectories(Seeker.VIDEO_DIR_MASK);}  }
class C{  private Vector3 keyToTileCenter(String key){  Vector3 p=new Vector3();  String[] token=key.split("/");  if (token.length <= 1) {    return (p);  }  double n=Math.pow(2,token.length);  double w=worldWidth / n;  double l=worldLength / n;  int q=Integer.valueOf(token[token.length - 1]);switch (q) {case 1:    p.set(p.getX() - w,p.getY() + l,0);  break;case 2:p.set(p.getX() + w,p.getY() + l,0);break;case 3:p.set(p.getX() - w,p.getY() - l,0);break;case 4:p.set(p.getX() + w,p.getY() - l,0);break;}return (p);}  }
class C{  public static byte[] encodeBase64(byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  public static File boardBackgroundsDir(){  lock.readLock().lock();  try {    return (board_backgrounds_dir != null) ? board_backgrounds_dir : new File(imagesDir(),DEFAULT_DIR_NAME_BOARD_BACKGROUNDS);  }  finally {    lock.readLock().unlock();  }}  }
class C{  private void analyzeFile(File inputFile,Optional<CommonTokenStream> optTokenStream,Optional<TopLevelContext> optTree,Formatter formatter,Severity maxSeverity,ConstructLengths constructLengths,Set<Rules> enabledRules) throws CLIArgumentParserException {  try {    Printer printer=new Printer(inputFile,maxSeverity,formatter);    if (optTokenStream.isPresent() && optTree.isPresent()) {      CommonTokenStream tokenStream=optTokenStream.get();      TopLevelContext tree=optTree.get();      CommentExtractor commentExtractor=new CommentExtractor(tokenStream);      ViolationSuppressor disableAnalysis=new ViolationSuppressor(printer,commentExtractor.getSingleLineComments(),commentExtractor.getMultilineComments());      disableAnalysis.analyze();      List<SwiftBaseListener> listeners=createListeners(enabledRules,printer,tokenStream,constructLengths,commentExtractor);      walkParseTree(listeners,tree);      try (FileListener fileListener=new FileListener(printer,inputFile,constructLengths,enabledRules)){        fileListener.verify();      }       numErrors.addAndGet(printer.getNumErrorMessages());      numWarnings.addAndGet(printer.getNumWarningMessages());    } else {      printer.setShouldPrintParseErrorMessage(true);    }    printersForAllFiles.add(printer);  } catch (  IOException e) {    handleIOException(e);  }catch (  CLIArgumentParserException e) {    handleCLIException(e);  }}  }
class C{  static private String SHORT_Min(){  short tempValue=Short.MIN_VALUE;  return String.valueOf(tempValue);}  }
class C{  static void sendRawLine(PircBot bot,BufferedWriter bwriter,String line){  if (line.length() > bot.getMaxLineLength() - 2) {    line=line.substring(0,bot.getMaxLineLength() - 2);  }synchronized (bwriter) {    try {      bwriter.write(line + "\r\n");      bwriter.flush();    } catch (    Exception e) {    }  }}  }
class C{  public boolean isNoMultiplePlay(){  return this.noMultiplePlay;}  }
class C{  public ConcurrentHashMap(Map<? extends K,? extends V> m){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);  putAll(m);}  }
class C{  @Override public void acceptTestSet(TestSetEvent e){  Instances testSet=e.getTestSet();  DataSetEvent dse=new DataSetEvent(this,testSet);  acceptDataSet(dse);}  }
class C{  public static Object invokeMethod(Method method,Object target,Object[] args) throws Throwable {  try {    return method.invoke(target,args);  } catch (  InvocationTargetException e) {    throw e.getCause();  }}  }
class C{  private int binarySearch(T x,int from,int to){  while (from <= to) {    int m=(from + to) >>> 1;    if (comp.compare(x,data[m]) >= 0) {      from=m + 1;    } else {      to=m - 1;    }  }  return from;}  }
class C{  public void sort(final DataComparator... comparators){synchronized (rows) {    RecordComparator comparator=new RecordComparator(comparators);    Collections.sort(rows,comparator);  }}  }
class C{  @Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  Cursor retCursor;switch (sUriMatcher.match(uri)) {case ACRONYMS:    retCursor=null;  break;case ACRONYM:final String rowId="" + AcronymContract.AcronymEntry._ID + " = '"+ ContentUris.parseId(uri)+ "'";retCursor=null;break;default :throw new UnsupportedOperationException("Unknown uri: " + uri);}retCursor.setNotificationUri(getContext().getContentResolver(),uri);return retCursor;}  }
class C{  public static void launchURL(final URI uri,final String title,String tooltip,String browserId,LaunchMode launchMode){  Check.notNull(uri,"url");  if (!URISchemeHelper.isOnTrustedUriWhiteList(uri)) {    URISchemeHelper.showUnsafeSchemeError(uri);    return;  }  if (launchMode == null) {    launchMode=LaunchMode.USER_PREFERENCE;  }  if (browserId == null) {    browserId="";  }  if (tooltip == null) {    tooltip="";  }  final boolean workbenchBrowserMode;synchronized (BrowserFacade.class) {    workbenchBrowserMode=useWorkbenchBrowserSupport;  }  if (workbenchBrowserMode) {    try {      launchWithWorkbenchBrowserSupport(uri,title,tooltip,browserId,launchMode);      return;    } catch (    final Exception e) {      log.warn("Problem launching web browser with workbench support (fallback will be tried)",e);    }  }  launchInFallbackMode(uri.toString(),title,tooltip,browserId,launchMode);}  }
class C{  public final Object put(String key,String value){  return entries.put(key,value);}  }
class C{  public void restore_apps(){  List<InstalledApp> to_reinsert=_initialize_data();  _app_adapter.add_apps(to_reinsert,false);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BEMenuItemUI();}  }
class C{  public ResizeHandleKit(){}  }
class C{  public boolean verify(PublicKey pubKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  Signature sig;  try {    if (provider == null) {      sig=Signature.getInstance(getSignatureName(sigAlgId));    } else {      sig=Signature.getInstance(getSignatureName(sigAlgId),provider);    }  } catch (  NoSuchAlgorithmException e) {    if (oids.get(sigAlgId.getObjectId()) != null) {      String signatureAlgorithm=(String)oids.get(sigAlgId.getObjectId());      if (provider == null) {        sig=Signature.getInstance(signatureAlgorithm);      } else {        sig=Signature.getInstance(signatureAlgorithm,provider);      }    } else {      throw e;    }  }  setSignatureParameters(sig,sigAlgId.getParameters());  sig.initVerify(pubKey);  try {    sig.update(reqInfo.getEncoded(ASN1Encoding.DER));  } catch (  Exception e) {    throw new SignatureException("exception encoding TBS cert request - " + e);  }  return sig.verify(sigBits.getBytes());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentfragmentnodename.class,args);}  }
class C{  private void createUbo(){  this.ubo=glCreateBuffers();  glNamedBufferStorage(this.ubo,ALL_UBO_BUFFER_SIZES,GL_DYNAMIC_STORAGE_BIT);}  }
class C{  private List<Map<String,Object>> globFiles(final Draft3Job job,final File workingDir,HashAlgorithm hashAlgorithm,final Draft3OutputPort outputPort,Object outputBinding) throws Draft3GlobException {  if (outputPort.getOutputBinding() != null) {    outputBinding=outputPort.getOutputBinding();  }  if (outputBinding == null) {    logger.debug("Output binding is empty. Skip output extraction.");    return null;  }  Object glob=Draft3BindingHelper.getGlob(outputBinding);  if (glob == null) {    logger.debug("GLOB does not exist. Skip output extraction.");    return null;  }  Set<File> paths=globService.glob(job,workingDir,glob);  if (paths == null) {    logger.info("Glob service didn't find any files.");    return null;  }  logger.debug("Glob service returned result {}",paths);  final List<Map<String,Object>> result=new ArrayList<>();  for (  File path : paths) {    try {      logger.info("Processing {}.",path);      File file=path;      Map<String,Object> fileData=new HashMap<>();      Draft3FileValueHelper.setFileType(fileData);      if (hashAlgorithm != null) {        Draft3FileValueHelper.setChecksum(file,fileData,hashAlgorithm);      }      Draft3FileValueHelper.setSize(file.length(),fileData);      Draft3FileValueHelper.setName(file.getName(),fileData);      Draft3FileValueHelper.setPath(file.getAbsolutePath(),fileData);      List<?> secondaryFiles=getSecondaryFiles(job,hashAlgorithm,fileData,file.getAbsolutePath(),outputPort.getSecondaryFiles());      if (secondaryFiles != null && !secondaryFiles.isEmpty()) {        Draft3FileValueHelper.setSecondaryFiles(secondaryFiles,fileData);      }      Object metadata=Draft3BindingHelper.getMetadata(outputBinding);      metadata=metadataService.evaluateMetadataExpressions(job,fileData,metadata);      logger.info("Metadata expressions evaluated. Metadata is {}.",metadata);      if (metadata != null) {        Draft3FileValueHelper.setMetadata(metadata,fileData);      }      metadata=metadataService.processMetadata(job,fileData,outputPort,outputBinding);      if (metadata != null) {        logger.info("Metadata for {} resolved. Metadata is {}",outputPort.getId(),metadata);        Draft3FileValueHelper.setMetadata(metadata,fileData);      } else {        logger.info("Metadata for {} output is empty.",outputPort.getId());      }      result.add(fileData);      boolean loadContents=Draft3BindingHelper.loadContents(outputBinding);      if (loadContents) {        Draft3FileValueHelper.setContents(fileData);      }    } catch (    Exception e) {      logger.error("Failed to extract outputs",e);      throw new Draft3GlobException("Failed to extract outputs.",e);    }  }  return result;}  }
class C{  private static List<Integer> runsWorstCase(int length,int minRun){  List<Integer> runs=new LinkedList<>();  int runningTotal=0, Y=minRun + 4, X=minRun;  while ((long)runningTotal + Y + X <= length) {    runningTotal+=X + Y;    generateWrongElem(X,minRun,runs);    runs.add(0,Y);    X=Y + runs.get(1) + 1;    Y+=X + 1;  }  if ((long)runningTotal + X <= length) {    runningTotal+=X;    generateWrongElem(X,minRun,runs);  }  runs.add(length - runningTotal);  return runs;}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.traceTest=true;  test.test();}  }
class C{  private void loadCommands(@Nullable final CommandImpl commandToSelect){  setCommands(commandManager.getCommands(),commandToSelect);}  }
class C{  public void union(float x,float y){  if (x < left) {    left=x;  } else   if (x > right) {    right=x;  }  if (y < top) {    top=y;  } else   if (y > bottom) {    bottom=y;  }}  }
class C{  public static void main(String[] args){  TestPrivateClasses tester=new TestPrivateClasses();  run(tester,ARGS1,TEST1,NEGATED_TEST1);  run(tester,ARGS2,TEST2,NEGATED_TEST2);  tester.printSummary();}  }
class C{  private void swap(int index1,int index2){  Node node1=getNode(index1);  Node node2=getNode(index2);  this.contents.set(index1,node2);  this.contents.set(index2,node1);}  }
class C{  protected boolean resetWithShake(UIAcceleration acceleration){  if (!mIsShakeResetEnabled || !mIsResetEnabled || this.isLocked()|| mIsValidForCameraAnimation|| mIsValidForTransition)   return false;  boolean result=false;  long currentTime=System.currentTimeMillis();  if ((currentTime - mShakeData.lastTime) > PLConstants.kShakeDiffTime) {    long diffTime=(currentTime - mShakeData.lastTime);    mShakeData.lastTime=currentTime;    mShakeData.shakePosition.setValues(acceleration);    float speed=Math.abs(mShakeData.shakePosition.x + mShakeData.shakePosition.y + mShakeData.shakePosition.z - mShakeData.shakeLastPosition.x - mShakeData.shakeLastPosition.y - mShakeData.shakeLastPosition.z) / diffTime * 10000;    if (speed > mShakeThreshold) {      boolean isNotCancelable=true;      if (mListener != null)       isNotCancelable=mListener.onShouldReset(this);      if (isNotCancelable) {        this.reset();        if (mListener != null)         mListener.onDidReset(this);        result=true;      }    }    mShakeData.shakeLastPosition.setValues(mShakeData.shakePosition);  }  return result;}  }
class C{  private boolean recover(){  trace.debug("log recover");  recoveryRunning=true;  boolean isEmpty=true;  isEmpty&=log.recover(PageLog.RECOVERY_STAGE_UNDO);  if (reservedPages != null) {    for (    int r : reservedPages.keySet()) {      if (trace.isDebugEnabled()) {        trace.debug("reserve " + r);      }      allocatePage(r);    }  }  isEmpty&=log.recover(PageLog.RECOVERY_STAGE_ALLOCATE);  openMetaIndex();  readMetaData();  isEmpty&=log.recover(PageLog.RECOVERY_STAGE_REDO);  boolean setReadOnly=false;  if (!database.isReadOnly()) {    if (log.getInDoubtTransactions().size() == 0) {      log.recoverEnd();      int firstUncommittedSection=getFirstUncommittedSection();      log.removeUntil(firstUncommittedSection);    } else {      setReadOnly=true;    }  }  PageDataIndex systemTable=(PageDataIndex)metaObjects.get(0);  isNew=systemTable == null;  for (  PageIndex index : metaObjects.values()) {    if (index.getTable().isTemporary()) {      if (tempObjects == null) {        tempObjects=New.hashMap();      }      tempObjects.put(index.getId(),index);    } else {      index.close(pageStoreSession);    }  }  allocatePage(PAGE_ID_META_ROOT);  writeIndexRowCounts();  recoveryRunning=false;  reservedPages=null;  writeBack();  cache.clear();  freeLists.clear();  metaObjects.clear();  metaObjects.put(-1,metaIndex);  if (setReadOnly) {    database.setReadOnly(true);  }  trace.debug("log recover done");  return isEmpty;}  }
class C{  public static void loadAdeDatabaseDriver() throws AdeException {  final IAdeConfigProperties properties=getAdeConfigProperties();  final String driver=properties.database().getDatabaseDriver();  try {    logger.info("Loading ade database driver: " + driver);    Class.forName(driver);  } catch (  Exception e) {    throw new AdeInternalException("Could not load ade database driver",e);  }}  }
class C{  public final void testNumberWithCharSequenceParameter(){  assertNotNull(Validators.number("foo"));}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (fv != null) {    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public DtoProductSkuServiceImpl(final DtoFactory dtoFactory,final ProductSkuService productSkuGenericService,final DtoAttributeService dtoAttributeService,final GenericDAO<AttrValueProductSku,Long> attrValueEntityProductSkuDao,final AdaptersRepository adaptersRepository,final PriceService priceService,final ImageService imageService,final SystemService systemService){  super(dtoFactory,productSkuGenericService,adaptersRepository);  this.imageService=imageService;  this.dtoAttributeService=dtoAttributeService;  this.attrValueEntityProductSkuDao=attrValueEntityProductSkuDao;  this.systemService=systemService;  this.attributeService=dtoAttributeService.getService();  this.priceService=priceService;  this.attrValueAssembler=DTOAssembler.newAssembler(dtoFactory.getImplClass(AttrValueProductSkuDTO.class),productSkuGenericService.getGenericDao().getEntityFactory().getImplClass(AttrValueProductSku.class));  this.skuPriceAssembler=DTOAssembler.newAssembler(dtoFactory.getImplClass(SkuPriceDTO.class),productSkuGenericService.getGenericDao().getEntityFactory().getImplClass(SkuPrice.class));}  }
class C{  public InterfacesComponent create(InterfacesContainingModel interfacesContainingModel,WizardComponentContainer container){  return new InterfacesComponent(interfacesContainingModel,container);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  @Override public void draw(final Graphics2D g2d){  applyChanges();  final Rectangle r=getDrawingArea();  if (isContained()) {    r.setLocation(0,0);  } else {    if (!isOnScreen(g2d,r)) {      return;    }  }  final Composite oldComposite=g2d.getComposite();  try {    g2d.setComposite(entityComposite);    draw(g2d,r.x,r.y,r.width,r.height);  }  finally {    g2d.setComposite(oldComposite);  }}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  @Override @Inline public ObjectReference traceObject(ObjectReference object){  return traceObject(object,false);}  }
class C{  public static boolean checkVPoolValidForUnManagedVolumeAutoTieringPolicy(VirtualPool vPool,String autoTierPolicyId,StorageSystem system){  _log.debug("Policy Id: {}, vPool: {}",autoTierPolicyId,vPool);  boolean policyMatching=false;  String policyIdfromVPool=vPool.getAutoTierPolicyName();  if (autoTierPolicyId != null) {    if (policyIdfromVPool != null) {      if (vPool.getUniquePolicyNames() || DiscoveredDataObject.Type.vnxblock.name().equalsIgnoreCase(system.getSystemType())) {        policyIdfromVPool=NativeGUIDGenerator.generateAutoTierPolicyNativeGuid(system.getNativeGuid(),policyIdfromVPool,NativeGUIDGenerator.getTieringPolicyKeyForSystem(system));        _log.debug("Policy Id generated: {}",policyIdfromVPool);      }      if (autoTierPolicyId.equalsIgnoreCase(policyIdfromVPool)) {        policyMatching=true;      }    }  } else   if ((policyIdfromVPool == null) || (policyIdfromVPool.equalsIgnoreCase("none"))) {    policyMatching=true;  }  if (!policyMatching && DiscoveredDataObject.Type.vnxblock.name().equalsIgnoreCase(system.getSystemType())) {    if (autoTierPolicyId != null && autoTierPolicyId.contains(VnxFastPolicy.DEFAULT_START_HIGH_THEN_AUTOTIER.name()) && policyIdfromVPool == null) {      policyMatching=true;    }  }  if (!policyMatching && DiscoveredDataObject.Type.hds.name().equalsIgnoreCase(system.getSystemType())) {    if (autoTierPolicyId != null && autoTierPolicyId.contains(HitachiTieringPolicy.All.name()) && policyIdfromVPool == null) {      policyMatching=true;    }  }  return policyMatching;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ORDINAL_OP___GREATER_OP_1:    getGreaterOp_1().clear();  getGreaterOp_1().addAll((Collection<? extends GreaterOp_>)newValue);return;case UmplePackage.ORDINAL_OP___LESS_OP_1:getLessOp_1().clear();getLessOp_1().addAll((Collection<? extends LessOp_>)newValue);return;case UmplePackage.ORDINAL_OP___MORE_OP_1:getMoreOp_1().clear();getMoreOp_1().addAll((Collection<? extends MoreOp_>)newValue);return;case UmplePackage.ORDINAL_OP___SMALLER_OP_1:getSmallerOp_1().clear();getSmallerOp_1().addAll((Collection<? extends SmallerOp_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public AtomicRowRead(){}  }
class C{  public String first(String... names){  List<String> localNamesList=Arrays.asList(names);  for (  Element child : children()) {    if (localNamesList.contains(child.getLocalName()) && namespace.equals(child.getNamespaceURI())) {      return child.getTextContent();    }  }  return null;}  }
class C{  public String version(){  final URI uri=UriBuilder.fromUri(rootUri).path("/version").build();  LOGGER.debug("GET {}",uri);  return client.target(uri).request().get(String.class);}  }
class C{  protected static Method resolveExpectedJavaMethod(BshClassManager bcm,Class clas,Object object,String name,Object[] args,boolean staticOnly) throws ReflectError, UtilEvalError {  if (object == Primitive.NULL)   throw new UtilTargetError(new NullPointerException("Attempt to invoke method " + name + " on null value"));  Class[] types=Types.getTypes(args);  Method method=resolveJavaMethod(bcm,clas,name,types,staticOnly);  if (method == null)   throw new ReflectError((staticOnly ? "Static method " : "Method ") + StringUtil.methodString(name,types) + " not found in class'"+ clas.getName()+ "'");  return method;}  }
class C{  public static boolean checkForTemporaryFiles(){  try {    FileSystem fs=FileSystem.get(conf);    Path workingDir=new Path(".");    FileStatus[] files=fs.listStatus(workingDir);    for (    FileStatus file : files) {      String fileName=file.getPath().toString().substring(file.getPath().getParent().toString().length() + 1);      if (fileName.contains("temp"))       return true;    }  } catch (  IOException e) {    e.printStackTrace();    fail("unable to remove temporary files: " + e.getMessage());  }  return false;}  }
class C{  public String prefix() throws Exception {  StringBuffer text;  text=new StringBuffer();  if (m_isLeaf) {    text.append("[" + m_localModel.dumpLabel(0,m_train) + "]");  } else {    prefixTree(text);  }  return text.toString();}  }
class C{  @Override public boolean sameAs(RVVException ex){  if (!super.sameAs(ex)) {    return false;  }  RVVExceptionT other=(RVVExceptionT)ex;  if (this.received == null) {    if (other.received != null && !other.received.isEmpty()) {      return false;    }  } else   if (other.received == null || !this.received.equals(other.received)) {    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.830 -0500",hash_original_method="6C46F13EAE6D974667959E2EC15AB51C",hash_generated_method="EAE182ADFA1096E87D0B571427DD00B1") public SAXException(Exception e){  this.exception=e;}  }
class C{  public void putAll(Map<?,?> attr){  if (!Attributes.class.isInstance(attr))   throw new ClassCastException();  for (  Map.Entry<?,?> me : (attr).entrySet())   put(me.getKey(),me.getValue());}  }
class C{  public void updateLine(float lat_1,float lon_1,float lat_2,float lon_2,int lineType,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkLine.write(lat_1,lon_1,lat_2,lon_2,lineType,properties,link.dos);}  }
class C{  private BusinessObjectDataStatus createAvailableBusinessObjectDataStatus(BusinessObjectDataEntity businessObjectDataEntity){  BusinessObjectDataStatus businessObjectDataStatus=new BusinessObjectDataStatus();  businessObjectDataStatus.setBusinessObjectFormatVersion(businessObjectDataEntity.getBusinessObjectFormat().getBusinessObjectFormatVersion());  businessObjectDataStatus.setPartitionValue(businessObjectDataEntity.getPartitionValue());  businessObjectDataStatus.setSubPartitionValues(businessObjectDataHelper.getSubPartitionValues(businessObjectDataEntity));  businessObjectDataStatus.setBusinessObjectDataVersion(businessObjectDataEntity.getVersion());  businessObjectDataStatus.setReason(businessObjectDataEntity.getStatus().getCode());  return businessObjectDataStatus;}  }
class C{  private void showInfo(String text,int duration){  mInfo.setVisibility(View.VISIBLE);  mInfo.setText(text);  mHandler.removeMessages(FADE_OUT_INFO);  mHandler.sendEmptyMessageDelayed(FADE_OUT_INFO,duration);}  }
class C{  private VisorQueryResult nextScanPage(IgniteBiTuple<String,Integer> arg){  long start=U.currentTimeMillis();  ConcurrentMap<String,VisorQueryCursor<Cache.Entry<Object,Object>>> storage=ignite.cluster().nodeLocalMap();  String qryId=arg.get1();  VisorQueryCursor<Cache.Entry<Object,Object>> cur=storage.get(qryId);  if (cur == null)   throw new IgniteException("Scan query results are expired.");  List<Object[]> rows=VisorQueryUtils.fetchScanQueryRows(cur,arg.get2());  boolean hasMore=cur.hasNext();  if (hasMore)   cur.accessed(true); else {    storage.remove(qryId);    cur.close();  }  return new VisorQueryResult(rows,hasMore,U.currentTimeMillis() - start);}  }
class C{  public static IStatus validatePackageName(String name){  return validatePackageName(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public void resetFilters(RecommendationRequest request){  for (  ResultFilter resultFilter : resultFilterSet) {    resultFilter.resetFilter(request);  }}  }
class C{  public void insertIcon(Icon g){  MutableAttributeSet inputAttributes=getInputAttributes();  inputAttributes.removeAttributes(inputAttributes);  StyleConstants.setIcon(inputAttributes,g);  replaceSelection(" ",false);  inputAttributes.removeAttributes(inputAttributes);}  }
class C{  void entityChanged(final Object property){  if (property == IEntity.PROP_ANIMATED) {    animatedChanged=true;  } else   if (property == IEntity.PROP_POSITION) {    positionChanged=true;  } else   if (property == IEntity.PROP_VISIBILITY) {    visibilityChanged=true;  } else   if (property instanceof ImageEventProperty) {    new ImageEffect(this,((ImageEventProperty)property).getImageName());  }}  }
class C{  String scanString() throws IOException {  int ch=read();switch (ch) {case 'N':    return null;case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:case 0x1a:case 0x1b:case 0x1c:case 0x1d:case 0x1e:case 0x1f:  return readString(ch - 0x00);default :throw new UnsupportedOperationException(getClass().getName());}}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,ttl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    Loger.debug(String.format("%s",e.toString()));    return false;  }}  }
class C{  public boolean hasOngoingHandshake(){  return ongoingHandshake != null;}  }
class C{  public static boolean validate(final String date){  Matcher matcher=PATTERN.matcher(date);  if (matcher.matches()) {    matcher.reset();    if (matcher.find()) {      int year=Integer.parseInt(matcher.group(1));      String month=matcher.group(2);      String day=matcher.group(3);      if (day.equals("31") && (month.equals("4") || month.equals("6") || month.equals("9")|| month.equals("11")|| month.equals("04")|| month.equals("06")|| month.equals("09"))) {        return false;      } else       if (month.equals("2") || month.equals("02")) {        if (year % 4 == 0) {          return !(day.equals("30") || day.equals("31"));        } else {          return !(day.equals("29") || day.equals("30") || day.equals("31"));        }      } else {        return true;      }    } else {      return false;    }  } else {    return false;  }}  }
class C{  public UpperCaseFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  void sendMessageToHandlerNoControllerReset(List<OFMessage> messages) throws Exception {  handler.channelRead(ctx,messages);}  }
class C{  private static void initStemmers(){  Vector<String> classnames;  int i;  if (m_Stemmers != null) {    return;  }  m_Stemmers=new Vector<String>();  if (!m_Present) {    return;  }  classnames=GenericObjectEditor.getClassnames(SNOWBALL_PROGRAM);  if (classnames.size() == 0) {    classnames=ClassDiscovery.find(SNOWBALL_PROGRAM,PACKAGE_EXT);    for (i=0; i < classnames.size(); i++) {      m_Stemmers.add(getStemmerName(classnames.get(i).toString()));    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TimeSeries)) {    return false;  }  TimeSeries that=(TimeSeries)obj;  if (!ObjectUtilities.equal(getDomainDescription(),that.getDomainDescription())) {    return false;  }  if (!ObjectUtilities.equal(getRangeDescription(),that.getRangeDescription())) {    return false;  }  if (!ObjectUtilities.equal(this.timePeriodClass,that.timePeriodClass)) {    return false;  }  if (getMaximumItemAge() != that.getMaximumItemAge()) {    return false;  }  if (getMaximumItemCount() != that.getMaximumItemCount()) {    return false;  }  int count=getItemCount();  if (count != that.getItemCount()) {    return false;  }  if (!ObjectUtilities.equal(this.data,that.data)) {    return false;  }  return super.equals(obj);}  }
class C{  public ObjectFactory(){}  }
class C{  public void startDocument() throws SAXException {  if (DEBUG)   System.out.println("startDocument");  int doc=addNode(DTM.DOCUMENT_NODE,m_expandedNameTable.getExpandedTypeID(DTM.DOCUMENT_NODE),DTM.NULL,DTM.NULL,0,true);  m_parents.push(doc);  m_previous=DTM.NULL;  m_contextIndexes.push(m_prefixMappings.size());}  }
class C{  public void testDumpServersAll() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  Set<ServerGroup> serverGroups=this.client.getServerGroups().getData();  List<Server> servers=new ArrayList<Server>();  for (  ServerGroup g : serverGroups) {    servers.addAll(g.getServers());  }  Collections.sort(servers,serverHostnamePortSorter);  assertEquals(3,servers.size());  assertEquals("fabric_test1_global",servers.get(0).getGroupName());  assertEquals("fabric_test1_shard1",servers.get(1).getGroupName());  assertEquals("fabric_test1_shard2",servers.get(2).getGroupName());  assertEquals((this.globalHost != null ? this.globalHost : "127.0.0.1"),servers.get(0).getHostname());  assertEquals((this.shard1Host != null ? this.shard1Host : "127.0.0.1"),servers.get(1).getHostname());  assertEquals((this.shard2Host != null ? this.shard2Host : "127.0.0.1"),servers.get(2).getHostname());  assertEquals((this.globalPort != null ? Integer.valueOf(this.globalPort) : 3401),servers.get(0).getPort());  assertEquals((this.shard1Port != null ? Integer.valueOf(this.shard1Port) : 3402),servers.get(1).getPort());  assertEquals((this.shard2Port != null ? Integer.valueOf(this.shard2Port) : 3403),servers.get(2).getPort());  assertEquals(ServerMode.READ_WRITE,servers.get(0).getMode());  assertEquals(ServerRole.PRIMARY,servers.get(0).getRole());  assertEquals(ServerMode.READ_WRITE,servers.get(1).getMode());  assertEquals(ServerRole.PRIMARY,servers.get(1).getRole());  assertEquals(ServerMode.READ_WRITE,servers.get(2).getMode());  assertEquals(ServerRole.PRIMARY,servers.get(2).getRole());}  }
class C{  @Override public boolean locatorsUpdateCopy(){  debugCodeCall("locatorsUpdateCopy");  return false;}  }
class C{  public boolean removeAll(Collection<?> c){  return al.removeAll(c);}  }
class C{  private TestSolution checkTextElementOnlyContainsNonAlphanumericCharacters(Element element,String elementText){  if (elementText == null) {    return TestSolution.NOT_APPLICABLE;  }  if (NON_ALPHANUMERIC_PATTERN.matcher(elementText).matches()) {    addSourceCodeRemark(getFailureSolution(),element,textOnlyContainsNacMsgCode);    return getFailureSolution();  } else {    return getSuccessSolution();  }}  }
class C{  private void validateParentDoc(){  if (parentDoc != DocIdSetIterator.NO_MORE_DOCS && !parentBits.get(parentDoc)) {    throw new IllegalStateException(INVALID_QUERY_MESSAGE + parentDoc);  }}  }
class C{  private final static int matchlen(byte[] oldBuf,int oldOffset,byte[] newBuf,int newOffset){  int end=min(oldBuf.length - oldOffset,newBuf.length - newOffset);  int i;  for (i=0; i < end; i++) {    if (oldBuf[oldOffset + i] != newBuf[newOffset + i]) {      break;    }  }  return i;}  }
class C{  public B mapped(final Collection<File> mapped){  mMapped=mapped;  return self();}  }
class C{  public static int toInt(byte a,byte b,byte c,byte d,byte e,byte f,byte g,byte h){  return ((a & NIBBLE_MASK) << (NIBBLE_SIZE * 7)) | ((b & NIBBLE_MASK) << (NIBBLE_SIZE * 6)) | ((c & NIBBLE_MASK) << (NIBBLE_SIZE * 5))| ((d & NIBBLE_MASK) << (NIBBLE_SIZE * 4))| (e << (NIBBLE_SIZE * 3))| ((f & NIBBLE_MASK) << (NIBBLE_SIZE * 2))| ((g & NIBBLE_MASK) << NIBBLE_SIZE)| (h & NIBBLE_MASK);}  }
class C{  public FileTransferXmlParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {  try {    XmlPullParserFactory factory=XmlPullParserFactory.newInstance();    factory.setNamespaceAware(false);    XmlPullParser xpp=factory.newPullParser();    xpp.setInput(new StringReader(mXmlSource));    int eventType=xpp.getEventType();    String text=null;    while (eventType != XmlPullParser.END_DOCUMENT) {      String tagName=xpp.getName();switch (eventType) {case XmlPullParser.START_TAG:        if ("file".equalsIgnoreCase(tagName)) {          if (mFtInfo == null) {            mFtInfo=new FileTransferHttpInfoDocument(mRcsSettings);          }        } else         if ("file-info".equalsIgnoreCase(tagName)) {          if (mFtInfo == null) {            break;          }          String type=xpp.getAttributeValue(null,"type");          if ("thumbnail".equalsIgnoreCase(type)) {            mThumbnailInfo=new FileTransferHttpThumbnail(mRcsSettings);          } else           if ("file".equalsIgnoreCase(type)) {            mThumbnailProcessed=true;            String typeDispo=xpp.getAttributeValue(null,"file-disposition");            if (typeDispo != null) {switch (typeDispo) {case FileSharingSession.FILE_DISPOSITION_ATTACH:                mFtInfo.setFileDisposition(FileTransfer.Disposition.ATTACH);              break;case FileSharingSession.FILE_DISPOSITION_RENDER:            mFtInfo.setFileDisposition(FileTransfer.Disposition.RENDER);          break;      }    }  }} else if ("data".equalsIgnoreCase(tagName)) {  if (mFtInfo == null) {    break;  }  String url=xpp.getAttributeValue(null,"url");  String expiration=xpp.getAttributeValue(null,"until");  if (mThumbnailProcessed) {    mFtInfo.setUri(Uri.parse(url));    mFtInfo.setExpiration(DateUtils.decodeDate(expiration));  } else   if (mThumbnailInfo != null) {    mThumbnailProcessed=true;    mThumbnailInfo.setUri(Uri.parse(url));    mThumbnailInfo.setExpiration(DateUtils.decodeDate(expiration));    mFtInfo.setFileThumbnail(mThumbnailInfo);  }}break;case XmlPullParser.TEXT:text=xpp.getText().trim();break;case XmlPullParser.END_TAG:if (mFtInfo == null) {break;}if (text == null) {throw new ParseFailureException("Bad HTTP file transfer information " + mXmlSource);}if ("file-name".equalsIgnoreCase(tagName)) {if (mThumbnailProcessed) {mFtInfo.setFilename(text);}} else if ("file-size".equalsIgnoreCase(tagName)) {if (mThumbnailProcessed) {mFtInfo.setSize(Integer.parseInt(text));} else if (mThumbnailInfo != null) {mThumbnailInfo.setSize(Integer.parseInt(text));}} else if ("content-type".equalsIgnoreCase(tagName)) {if (mThumbnailProcessed) {mFtInfo.setMimeType(text);} else if (mThumbnailInfo != null) {mThumbnailInfo.setMimeType(text);}} else if ("am:playing-length".equalsIgnoreCase(tagName)) {mFtInfo.setPlayingLength(Integer.parseInt(text));}break;default :break;}eventType=xpp.next();}return this;} catch (XmlPullParserException|IOException e) {throw new ParseFailureException("Failed to parse input source!",e);}}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  @Override public void close(int timeout){  channel.close(timeout);}  }
class C{  public StatusBar(){  this(false);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  if (node != null)   node.refresh();  return null;}  }
class C{  public TreeMap<K,V> insert(K key,V value){  return new TreeMap<>(ord,root.insert(ord,key,value));}  }
class C{  public boolean exists(){  return !takeSnapshot().isMissing();}  }
class C{  public synchronized void reset(){  count=0;}  }
class C{  @Override public void doRun(int run) throws Exception {  Object[] template=determineTemplate(run);  String[] newKey=new String[template.length - 1];  System.arraycopy(template,0,newKey,0,m_KeyIndex);  System.arraycopy(template,m_KeyIndex + 1,newKey,m_KeyIndex,template.length - m_KeyIndex - 1);  if (m_ResultListener.isResultRequired(this,newKey)) {    m_Keys.clear();    m_Results.clear();    m_ResultProducer.doRun(run);    checkForMultipleDifferences();    template=m_Keys.get(0).clone();    template[m_KeyIndex]=null;    checkForDuplicateKeys(template);    doAverageResult(template);  }}  }
class C{  public void removeAll(){  mParts.clear();}  }
class C{  public double magnitudeSquared(){  return this.x * this.x + this.y * this.y;}  }
class C{  ServerSessionContext registerResult(long sequence,ServerStateMachine.Result result){  results.put(sequence,result);  return this;}  }
class C{  public static TypeEvalContext codeInsightFallback(@Nullable final Project project){  final TypeEvalContext anchor=new TypeEvalContext(false,false,false,null);  if (project != null) {    return getContextFromCache(project,anchor);  }  return anchor;}  }
class C{  public AlphaComposite derive(int rule){  return (this.rule == rule) ? this : getInstance(rule,this.extraAlpha);}  }
class C{  private static boolean checkForSubtree(@NotNull LogHierarchyNode tree,@NotNull String relativeBranch,@NotNull String localURL){  final LinkedList<LogHierarchyNode> queue=new LinkedList<LogHierarchyNode>();  queue.addLast(tree);  while (!queue.isEmpty()) {    final LogHierarchyNode element=queue.removeFirst();    ProgressManager.checkCanceled();    if (checkForEntry(element.getMe(),localURL,relativeBranch))     return true;    queue.addAll(element.getChildren());  }  return false;}  }
class C{  public StringBuffer toStringBuffer(){  return new StringBuffer(size).append(buffer,0,size);}  }
class C{  public final void testRead04() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      DigestInputStream dis=new DigestInputStream(null,md);      try {        for (int i=0; i < MY_MESSAGE_LEN; i++) {          dis.read();        }      } catch (      Exception e) {        return;      }      fail("InputStream not set. read() must not work");    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  void appendAttribute(int namespaceIndex,int localNameIndex,int prefixIndex,boolean isID,int m_char_current_start,int contentLength){  int w0=ATTRIBUTE_NODE | namespaceIndex << 16;  int w1=currentParent;  int w2=0;  int w3=localNameIndex | prefixIndex << 16;  System.out.println("set w3=" + w3 + " "+ (w3 >> 16)+ "/"+ (w3 & 0xffff));  int ourslot=appendNode(w0,w1,w2,w3);  previousSibling=ourslot;  w0=TEXT_NODE;  w1=ourslot;  w2=m_char_current_start;  w3=contentLength;  appendNode(w0,w1,w2,w3);  previousSiblingWasParent=true;  return;}  }
class C{  public Matrix4f reflection(float a,float b,float c,float d){  float da=a + a, db=b + b, dc=c + c, dd=d + d;  this._m00(1.0f - da * a);  this._m01(-da * b);  this._m02(-da * c);  this._m03(0.0f);  this._m10(-db * a);  this._m11(1.0f - db * b);  this._m12(-db * c);  this._m13(0.0f);  this._m20(-dc * a);  this._m21(-dc * b);  this._m22(1.0f - dc * c);  this._m23(0.0f);  this._m30(-dd * a);  this._m31(-dd * b);  this._m32(-dd * c);  this._m33(1.0f);  _properties(PROPERTY_AFFINE);  return this;}  }
class C{  public Builder noMinimize(){  mOptions.refreshMinimize=false;  return this;}  }
class C{  public void init() throws ServletException {}  }
class C{  public float[] generateTransformedValuesLine(List<? extends Entry> entries,float phaseX,float phaseY,int from,int to){  final int count=(int)Math.ceil((to - from) * phaseX) * 2;  float[] valuePoints=new float[count];  for (int j=0; j < count; j+=2) {    Entry e=entries.get(j / 2 + from);    if (e != null) {      valuePoints[j]=e.getXIndex();      valuePoints[j + 1]=e.getVal() * phaseY;    }  }  pointValuesToPixel(valuePoints);  return valuePoints;}  }
class C{  public LogConfigurationException(Throwable cause){  this((cause == null) ? null : cause.toString(),cause);}  }
class C{  public void close(){synchronized (this) {    if (this.closed)     return; else     this.closed=true;  }synchronized (packetsToReceive) {    packetsToReceive.notifyAll();  }synchronized (packetsToSend) {    packetsToSend.notifyAll();  }  turnCandidateHarvest.harvester.getStunStack().removeIndicationListener(turnCandidateHarvest.hostCandidate.getTransportAddress(),this);}  }
class C{  public static CodedException tr(String faultCode,String trCode,String faultMessage){  CodedException ret=new CodedException(faultCode,faultMessage);  ret.translationCode=trCode;  return ret;}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source,boolean ignoreSpace){  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,ignoreSpace);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_BP_Group_ID"))     p_C_BP_Group_ID=para[i].getParameterAsInt(); else     if (name.equals("C_AcctSchema_ID"))     p_C_AcctSchema_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  @Override public void prepare() throws ReplicatorException, InterruptedException {  logger.info("Preparing data source: service=" + serviceName);}  }
class C{  public Handle(int tag,String owner,String name,String desc,boolean itf){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;  this.itf=itf;}  }
class C{  protected void failed(long nanos,Throwable e,Description description){}  }
class C{  public T caseEnterState(EnterState object){  return null;}  }
class C{  private static void insertNativeEdges(final List<? extends ICodeEdge<?>> nativeEdges,final List<ReilBlock> nodes,final List<ReilEdge> edges,final Map<IInstruction,ReilInstruction> firstMap,final Map<IInstruction,ReilInstruction> lastMap){  for (  final ICodeEdge<?> nativeEdge : nativeEdges) {    final Object source=nativeEdge.getSource();    final Object target=nativeEdge.getTarget();    if ((source instanceof ICodeContainer) && (target instanceof ICodeContainer)) {      final ICodeContainer<?> sourceCodeNode=(ICodeContainer<?>)source;      final ICodeContainer<?> targetCodeNode=(ICodeContainer<?>)target;      final IInstruction sourceInstruction=getLastInstruction(sourceCodeNode);      final IInstruction targetInstruction=getFirstInstruction(targetCodeNode);      final ReilInstruction sourceReilInstruction=lastMap.get(sourceInstruction);      final ReilInstruction targetReilInstruction=firstMap.get(targetInstruction);      insertNativeEdge(nodes,edges,nativeEdge,sourceReilInstruction,targetReilInstruction);    }  }}  }
class C{  private void sendLoopDetectedResponse(SIPRequest sipRequest,SIPServerTransaction transaction){  SIPResponse sipResponse=sipRequest.createResponse(Response.LOOP_DETECTED);  ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();  if (serverHeader != null) {    sipResponse.setHeader(serverHeader);  }  try {    sipStack.addTransactionPendingAck(transaction);    transaction.sendResponse(sipResponse);    transaction.releaseSem();  } catch (  Exception ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("Problem sending error response",ex);    transaction.releaseSem();    sipStack.removeTransaction(transaction);  }}  }
class C{  public static boolean isProtected(int mod){  return (mod & PROTECTED) != 0;}  }
class C{  public void writeFile(String name,String mimeType,String fileName,byte[] data) throws java.io.IOException {  if (data == null) {    throw new IllegalArgumentException("Data cannot be null.");  }  if (fileName == null || fileName.length() == 0) {    throw new IllegalArgumentException("File name cannot be null or empty.");  }  out.writeBytes(PREFIX);  out.writeBytes(boundary);  out.writeBytes(NEWLINE);  out.writeBytes("Content-Disposition: form-data; name=\"" + name + "\"; filename=\""+ fileName+ "\"");  out.writeBytes(NEWLINE);  if (mimeType != null) {    out.writeBytes("Content-Type: " + mimeType);    out.writeBytes(NEWLINE);  }  out.writeBytes(NEWLINE);  out.write(data,0,data.length);  out.writeBytes(NEWLINE);  out.flush();}  }
class C{  protected SpatialPointLeafEntry createNewLeafEntry(DBIDRef id){  return new SpatialPointLeafEntry(DBIDUtil.deref(id),relation.get(id));}  }
class C{  private List<T> asList(){  if (asList == null) {    List<T> smallestFirstList=Lists.newArrayListWithCapacity(asQueue.size());    while (!asQueue.isEmpty()) {      smallestFirstList.add(asQueue.poll());    }    asList=Lists.reverse(smallestFirstList);    asQueue=null;  }  return asList;}  }
class C{  public CyclicNumberAxis(double period,double offset){  this(period,offset,null);}  }
class C{  public boolean isStreaming(){  return false;}  }
class C{  public boolean correctControlSystems(StringBuffer buff){  if (aero.getEntityType() == Entity.ETYPE_CONV_FIGHTER && aero.getCockpitType() != Aero.COCKPIT_STANDARD) {    buff.append("Conventional fighters may only have standard cockpits!");    return false;  } else   if (aero.getCockpitType() < Aero.COCKPIT_STANDARD || aero.getCockpitType() > Aero.COCKPIT_PRIMITIVE) {    buff.append("Invalid cockpit type!");    return false;  }  return true;}  }
class C{  @Deprecated public static Uri addToGroup(ContentResolver resolver,long personId,String groupName){  long groupId=0;  Cursor groupsCursor=resolver.query(Groups.CONTENT_URI,GROUPS_PROJECTION,Groups.NAME + "=?",new String[]{groupName},null);  if (groupsCursor != null) {    try {      if (groupsCursor.moveToFirst()) {        groupId=groupsCursor.getLong(0);      }    }  finally {      groupsCursor.close();    }  }  if (groupId == 0) {    throw new IllegalStateException("Failed to find the My Contacts group");  }  return addToGroup(resolver,personId,groupId);}  }
class C{  public static void fixGTFSTrainSingapore() throws IOException {  File oldFile=new File("C:/Users/sergioo/Documents/2011/Work/FCL/Operations/Data/GoogleTransitFeed/ProcessedData/Trains/trips2.txt");  File newFile=new File("C:/Users/sergioo/Documents/2011/Work/FCL/Operations/Data/GoogleTransitFeed/ProcessedData/Trains/trips.txt");  BufferedReader reader=new BufferedReader(new FileReader(oldFile));  PrintWriter writer=new PrintWriter(newFile);  String line=reader.readLine();  writer.println(line);  line=reader.readLine();  while (line != null) {    String[] parts=line.split(",");    if (parts[1].endsWith("weeksatday"))     parts[1]="weeksatday"; else     if (parts[1].endsWith("sunday"))     parts[1]="sunday"; else     if (parts[1].endsWith("weekday"))     parts[1]="weekday"; else     if (parts[1].contains("daily"))     parts[1]="daily"; else     System.out.println("Error");    writer.print(parts[0]);    int i=1;    for (; i < parts.length; i++)     writer.print("," + parts[i]);    for (; i < 5; i++)     writer.print(",");    writer.println();    line=reader.readLine();  }  writer.close();  reader.close();}  }
class C{  protected int y(Point2D xyW){  return y(xyW.getY());}  }
class C{  @Override public Graphics create(){  return new WPathGraphics((Graphics2D)getDelegate().create(),getPrinterJob(),getPrintable(),getPageFormat(),getPageIndex(),canDoRedraws());}  }
class C{  public void hideRemoveButton(){  removeButton.setVisible(false);}  }
class C{  private boolean isFinalStage(State s){  return s.taskState.stage == TaskState.TaskStage.FINISHED || s.taskState.stage == TaskState.TaskStage.FAILED || s.taskState.stage == TaskState.TaskStage.CANCELLED;}  }
class C{  public static boolean isMemoryGraph(Graph graph){  if (graph instanceof MultiUnion) {    for (    Graph subGraph : JenaUtil.getSubGraphs((MultiUnion)graph)) {      if (!isMemoryGraph(subGraph)) {        return false;      }    }    return true;  } else {    return helper.isMemoryGraph(graph);  }}  }
class C{  public FileContentChangeChecker(String fileName) throws Exception {  this.fileName=fileName;  File file=getFile();  this.checksum=calculateConfFileChecksum(file);}  }
class C{  boolean defsHeapVariable(Instruction s){  if (s.operator() == PHI) {    Operand result=Phi.getResult(s);    return (result instanceof HeapOperand);  }  HeapOperand<Object>[] o=defs.get(s);  return (o != null);}  }
class C{  @Pure @Inline private static boolean isArgumentCompatible(RVMType expectedType,Object arg){  if (expectedType.isPrimitiveType()) {    return isPrimitiveArgumentCompatible(expectedType,arg);  } else {    if (arg == null)     return true;    RVMType actualType=ObjectModel.getObjectType(arg);    if (expectedType == actualType || expectedType == RVMType.JavaLangObjectType || RuntimeEntrypoints.isAssignableWith(expectedType,actualType)) {      return true;    } else {      throwNewIllegalArgumentException();      return false;    }  }}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tFull class name of attribute evaluator, followed\n" + "\tby its options.\n" + "\teg: \"weka.attributeSelection.CfsSubsetEval -L\"\n"+ "\t(default weka.attributeSelection.CfsSubsetEval)","E",1,"-E <attribute evaluator specification>"));  newVector.addElement(new Option("\tFull class name of search method, followed\n" + "\tby its options.\n" + "\teg: \"weka.attributeSelection.BestFirst -D 1\"\n"+ "\t(default weka.attributeSelection.BestFirst)","S",1,"-S <search method specification>"));  newVector.addAll(Collections.list(super.listOptions()));  if (getEvaluator() instanceof OptionHandler) {    newVector.addElement(new Option("","",0,"\nOptions specific to attribute evaluator " + getEvaluator().getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)getEvaluator()).listOptions()));  }  if (getSearch() instanceof OptionHandler) {    newVector.addElement(new Option("","",0,"\nOptions specific to search method " + getSearch().getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)getSearch()).listOptions()));  }  return newVector.elements();}  }
class C{  private void updatePortsWithNewPortsByNumber(Map<OFPort,OFPortDesc> newPortsByNumber){  if (!lock.writeLock().isHeldByCurrentThread()) {    throw new IllegalStateException("Method called without " + "holding writeLock");  }  Map<String,OFPortDesc> newPortsByName=new HashMap<String,OFPortDesc>();  List<OFPortDesc> newPortList=new ArrayList<OFPortDesc>();  List<OFPortDesc> newEnabledPortList=new ArrayList<OFPortDesc>();  List<OFPort> newEnabledPortNumbers=new ArrayList<OFPort>();  for (  OFPortDesc p : newPortsByNumber.values()) {    newPortList.add(p);    newPortsByName.put(p.getName().toLowerCase(),p);    if (!p.getState().contains(OFPortState.LINK_DOWN) && !p.getConfig().contains(OFPortConfig.PORT_DOWN)) {      if (!newEnabledPortList.contains(p)) {        newEnabledPortList.add(p);      }      if (!newEnabledPortNumbers.contains(p.getPortNo())) {        newEnabledPortNumbers.add(p.getPortNo());      }    }  }  portsByName=Collections.unmodifiableMap(newPortsByName);  portsByNumber=Collections.unmodifiableMap(newPortsByNumber);  enabledPortList=Collections.unmodifiableList(newEnabledPortList);  enabledPortNumbers=Collections.unmodifiableList(newEnabledPortNumbers);  portList=Collections.unmodifiableList(newPortList);}  }
class C{  private void startRecordingFitData(FitDataTypeSetting dataTypeSetting){  Fitness.RecordingApi.subscribe(mGoogleApiClient,dataTypeSetting.getDataType()).setResultCallback(new FitResultCallback<Status>(this,FitResultCallback.RegisterType.RECORDING,dataTypeSetting.getDataType(),true));}  }
class C{  public static String readTextfile(final File file) throws IOException {  final StringBuffer contents=new StringBuffer();  final String lineSeparator=System.getProperty("line.separator");  try (BufferedReader input=new BufferedReader(new FileReader(file))){    String line=null;    while ((line=input.readLine()) != null) {      contents.append(line);      contents.append(lineSeparator);    }  }   return contents.toString();}  }
class C{  public HashCodeBuilder append(final int value){  iTotal=iTotal * iConstant + value;  return this;}  }
class C{  @Override public void removePropertyChangeListener(String name,PropertyChangeListener pcl){  m_bcSupport.removePropertyChangeListener(name,pcl);}  }
class C{  public static Validator<Object> notNull(@NonNull final CharSequence errorMessage){  return new NotNullValidator(errorMessage);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"pusha");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a pusha instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  Helpers.generatePushAllRegisters(environment,baseOffset,OperandSize.DWORD,instructions);}  }
class C{  @Override public boolean isDebugEnabled(){  return logger.isLoggable(Level.FINE);}  }
class C{  public boolean createFlexibleVolume(String volName,String containingAggrName,String path,String size,String spaceReserve,String permission){  if (log.isDebugEnabled()) {    StringBuilder sb=new StringBuilder("Creating new flexible volume offline with params" + "[volName,aggrName,path,size,spaceReserve]:");    sb.append(volName).append(", ");    sb.append(containingAggrName).append(", ");    sb.append(path).append(", ");    sb.append(size).append(", ");    sb.append(spaceReserve).append(", ");    sb.append(permission).append(", ");    log.debug(sb.toString());  }  FlexVolume vol=new FlexVolume(server.getNaServer(),volName);  boolean result=vol.createFlexibleVolume(containingAggrName,path,size,spaceReserve,permission);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:26.857 -0500",hash_original_method="57D47F2F9FCDF87C613C3BEA50BCDEDC",hash_generated_method="DDFD1156A672B3D06EE42F0698E0914D") public boolean isSecure(){  return true;}  }
class C{  private ByteBuf writeResponse(ByteBuf buffer,Object request,ThreadContext context){  context.serializer().writeObject(request,OUTPUT.get().setByteBuf(buffer));  return buffer;}  }
class C{  public void printAclEntry(AclEntry entry){  out.println(" -- " + entry.getScope().getValue() + ": "+ entry.getRole().getValue());}  }
class C{  protected void assertConnectorIsRunning(){  assertThat(engine.isRunning()).isTrue();}  }
class C{  protected void finish(S state,S patchState){  ServiceUtils.logInfo(this,"Finishing task service for workflow %s",state.documentSelfLink);  try {    TaskServiceUtils.complete(this,ServiceDocumentUtils.getTaskServiceState(state),null);  } catch (  Throwable t) {    fail(state,t);  }}  }
class C{  private static IpcEndpoint connectSharedMemoryEndpoint(int port,IgniteLogger log) throws IgniteCheckedException {  return new IpcSharedMemoryClientEndpoint(port,log);}  }
class C{  public static LoggingFraction createErrorLoggingFraction(){  return createDefaultLoggingFraction(Level.ERROR);}  }
class C{  protected void handleNotAuthorized(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.sendError(HttpServletResponse.SC_FORBIDDEN);}  }
class C{  public void playAsync(final String url){  playAsync(url,-1);}  }
