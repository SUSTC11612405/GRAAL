class C{  public void build(String p,String delim) throws Exception {  StringTokenizer st=new StringTokenizer(p,delim);  while (st.hasMoreTokens()) {    String property=st.nextToken().trim();    if (!isHierachic(property)) {      throw new Exception("The given property is not in" + "hierachy structure with seperators!");    }    add(property);  }  goToRoot();}  }
class C{  @SuppressWarnings("deprecation") private void updateUiBySensorType(String sensorType){  boolean isBluetooth=getString(R.string.sensor_type_value_polar).equals(sensorType) || getString(R.string.sensor_type_value_zephyr).equals(sensorType);  findPreference(getString(R.string.settings_sensor_bluetooth_key)).setEnabled(isBluetooth);  boolean isAnt=getString(R.string.sensor_type_value_ant).equals(sensorType);  updateAntSensor(R.string.settings_sensor_ant_reset_heart_rate_monitor_key,R.string.ant_heart_rate_monitor_id_key,isAnt);  updateAntSensor(R.string.settings_sensor_ant_reset_speed_distance_monitor_key,R.string.ant_speed_distance_monitor_id_key,isAnt);  updateAntSensor(R.string.settings_sensor_ant_reset_bike_cadence_sensor_key,R.string.ant_bike_cadence_sensor_id_key,isAnt);  updateAntSensor(R.string.settings_sensor_ant_reset_combined_bike_sensor_key,R.string.ant_combined_bike_sensor_id_key,isAnt);}  }
class C{  public final static String createBubblebabbleFingerprint(String keytype,byte[] publickey){  byte[] raw=rawFingerPrint("sha1",keytype,publickey);  return rawToBubblebabbleFingerprint(raw);}  }
class C{  private Edge newDummyEdge(Node sourceNode,Node targetNode){  DummyEdgePart edgePart=new DummyEdgePart();  Edge edge=new Edge(edgePart,sourceNode,targetNode);  edge.weight=2;  edgeList.add(edge);  return edge;}  }
class C{  public ServerLocatorImpl(final boolean useHA,final TransportConfiguration... transportConfigs){  this(new Topology(null),useHA,null,transportConfigs);  if (useHA) {    topology.setOwner(this);  }}  }
class C{  public static final void install(Globals G){  G.loader=instance;}  }
class C{  public synchronized void post(THLEvent thlEvent) throws InterruptedException {  ReplDBMSEvent replDBMSEvent=(ReplDBMSEvent)thlEvent.getReplEvent();  if (replDBMSEvent == null) {    discardCount.incrementAndGet();    mergeSync(thlEvent);    if (logger.isDebugEnabled()) {      logger.debug("Discarded null event: taskId=" + " seqno=" + thlEvent.getSeqno() + " fragno="+ thlEvent.getFragno());    }    return;  }  DBMSEvent dbmsEvent=replDBMSEvent.getDBMSEvent();  if (dbmsEvent == null || dbmsEvent instanceof DBMSEmptyEvent || (dbmsEvent.getData().size() == 0 && replDBMSEvent.getFragno() == 0 && replDBMSEvent.getLastFrag())) {    discardCount.incrementAndGet();    if (logger.isDebugEnabled()) {      logger.debug("Discarded empty event: taskId=" + taskId + " seqno="+ thlEvent.getSeqno()+ " fragno="+ thlEvent.getFragno());    }    mergeSync(thlEvent);    return;  }  if (logger.isDebugEnabled()) {    logger.debug("Adding event to parallel queue: taskId=" + taskId + " seqno="+ replDBMSEvent.getSeqno());  }  eventQueue.put(replDBMSEvent);  acceptCount.incrementAndGet();  mergeSync(thlEvent);}  }
class C{  @Override public String delete(){  if (resource == null) {    return NOT_FOUND;  }  if (delete) {    if (resource.getStatus().equals(PublicationStatus.DELETED)) {      addActionWarning(getText("manage.overview.resource.invalid.operation",new String[]{resource.getShortname(),resource.getStatus().toString()}));      return INPUT;    }    try {      DOI doi=resource.getDoi();      if (doi != null) {        if (registrationManager.getDoiService() == null) {          String msg=getText("manage.overview.doi.operation.failed.noAccount");          LOG.error(msg);          addActionError(msg);          return INPUT;        }        if (resource.isRegistered()) {          resourceManager.delete(resource,false);        }        doDeactivateDOI(doi);        resource.setIdentifierStatus((resource.getIdentifierStatus().equals(IdentifierStatus.PUBLIC_PENDING_PUBLICATION)) ? IdentifierStatus.UNRESERVED : IdentifierStatus.UNAVAILABLE);        Set<String> deleted=Sets.newHashSet(doi.toString());        if (!resource.getVersionHistory().isEmpty()) {          for (          VersionHistory history : resource.getVersionHistory()) {            DOI formerDoi=history.getDoi();            if (formerDoi != null && !deleted.contains(formerDoi.toString())) {              doDeactivateDOI(formerDoi);              deleted.add(formerDoi.toString());            }          }        }        resource.setStatus(PublicationStatus.DELETED);        resource.updateAlternateIdentifierForDOI();        resource.updateCitationIdentifierForDOI();        saveResource();        addActionMessage(getText("manage.overview.resource.deleted",new String[]{resource.toString()}));      } else {        resourceManager.delete(resource,true);      }      return HOME;    } catch (    IOException e) {      String msg=getText("manage.resource.delete.failed");      LOG.error(msg,e);      addActionError(msg);      addActionExceptionWarning(e);    }catch (    DeletionNotAllowedException e) {      String msg=getText("manage.resource.delete.failed");      LOG.error(msg,e);      addActionError(msg);      addActionExceptionWarning(e);    }  } else {    addActionWarning(getText("manage.overview.resource.invalid.operation",new String[]{resource.getShortname(),resource.getStatus().toString()}));  }  return SUCCESS;}  }
class C{  public static boolean existFile(String file,boolean asRoot){  if (asRoot)   return new RootFile(file).exists();  return new File(file).exists();}  }
class C{  private void createAdjacencyLists(int[][] edges,int numberOfVertices){  for (int i=0; i < edges.length; i++) {    addEdge(edges[i][0],edges[i][1]);  }}  }
class C{  public TreeRTGCeibaPentandra(float length,int branch,float verStart,float verRand){  this();  this.length=length;  this.branch=branch;  this.verStart=verStart;  this.verRand=verRand;}  }
class C{  protected void removeSunnyPath(){  super.removeSunnyPath();}  }
class C{  public URLPermission(String url,String actions){  super(url);  init(actions);}  }
class C{  protected String genName(char code){switch (code) {case '_':    return " ";case 's':  return getCourse().getSubjectArea().getSubjectAreaAbbreviation();case 'c':return getCourse().getCourseNbr();case 'i':switch (getOwnerType()) {case sOwnerTypeClass:return ((Class_)getOwnerObject()).getSchedulingSubpart().getItypeDesc().trim();default :return "";}case 'n':switch (getOwnerType()) {case sOwnerTypeClass:return ((Class_)getOwnerObject()).getSectionNumberString();default :return "";}case 'x':switch (getOwnerType()) {case sOwnerTypeClass:return ((Class_)getOwnerObject()).getSchedulingSubpart().getInstrOfferingConfig().getName();case sOwnerTypeConfig:return ((InstrOfferingConfig)getOwnerObject()).getName();default :return "";}case 'D':return getCourse().getDepartment().getDeptCode();case 'd':Department d=getCourse().getDepartment();return (d.getAbbreviation() == null || d.getAbbreviation().length() == 0 ? d.getDeptCode() : d.getAbbreviation());case 'a':switch (getOwnerType()) {case sOwnerTypeClass:return ((Class_)getOwnerObject()).getClassSuffix(getCourse());default :return "";}case 'y':switch (getOwnerType()) {case sOwnerTypeClass:return ((Class_)getOwnerObject()).getSchedulingSubpart().getSchedulingSubpartSuffix();default :return "";}case 'e':switch (getOwnerType()) {case sOwnerTypeClass:return ((Class_)getOwnerObject()).getExternalId(getCourse());default :return "";}case 'f':return getCourse().getExternalUniqueId();case 'o':return getCourse().getInstructionalOffering().getExternalUniqueId();case 't':return ApplicationProperties.getProperty("tmtbl.exam.name.type." + getExam().getExamType().getReference());case 'I':switch (getOwnerType()) {case sOwnerTypeClass:return ((Class_)getOwnerObject()).getSchedulingSubpart().getItype().getItype().toString();default :return "";}case 'p':switch (getOwnerType()) {case sOwnerTypeClass:ItypeDesc itype=((Class_)getOwnerObject()).getSchedulingSubpart().getItype();while (itype.getParent() != null) itype=itype.getParent();return itype.getAbbv();default :return "";}case 'P':switch (getOwnerType()) {case sOwnerTypeClass:ItypeDesc itype=((Class_)getOwnerObject()).getSchedulingSubpart().getItype();while (itype.getParent() != null) itype=itype.getParent();return itype.getItype().toString();default :return "";}case 'm':switch (getOwnerType()) {case sOwnerTypeConfig:InstructionalMethod im=((InstrOfferingConfig)getOwnerObject()).getInstructionalMethod();if (im != null) return im.getReference();return "";case sOwnerTypeClass:im=((Class_)getOwnerObject()).getSchedulingSubpart().getInstrOfferingConfig().getInstructionalMethod();if (im != null) return im.getReference();return "";default :if (getCourse().getInstructionalOffering().getInstrOfferingConfigs().size() == 1) {im=getCourse().getInstructionalOffering().getInstrOfferingConfigs().iterator().next().getInstructionalMethod();if (im != null) return im.getLabel();}return "";}case 'M':switch (getOwnerType()) {case sOwnerTypeConfig:InstructionalMethod im=((InstrOfferingConfig)getOwnerObject()).getInstructionalMethod();if (im != null) return im.getLabel();return "";case sOwnerTypeClass:im=((Class_)getOwnerObject()).getSchedulingSubpart().getInstrOfferingConfig().getInstructionalMethod();if (im != null) return im.getLabel();return "";default :if (getCourse().getInstructionalOffering().getInstrOfferingConfigs().size() == 1) {im=getCourse().getInstructionalOffering().getInstrOfferingConfigs().iterator().next().getInstructionalMethod();if (im != null) return im.getLabel();}return "";}}return "";}  }
class C{  public void addCheckBoxes(){  tab.addTab(getString("ButtonDemo.checkboxes"),checkboxPanel);  checkboxPanel.setLayout(new BoxLayout(checkboxPanel,BoxLayout.X_AXIS));  checkboxPanel.setBorder(border0);  JPanel p1=createVerticalPanel(true);  p1.setAlignmentY(TOP_ALIGNMENT);  checkboxPanel.add(p1);  p1.add(Box.createHorizontalGlue());  JPanel jb2011p=new JPanel();  jb2011p.setLayout(new BoxLayout(jb2011p,BoxLayout.Y_AXIS));  JPanel p2=createHorizontalPanel(false);  createHorizonalHintBox(jb2011p,p2,getString("ButtonDemo.textcheckboxes"));  p1.add(jb2011p);  checkboxes.add(p2.add(new JCheckBox(getString("ButtonDemo.check1"))));  p2.add(Box.createRigidArea(HGAP10));  checkboxes.add(p2.add(new JCheckBox(getString("ButtonDemo.check2"))));  p2.add(Box.createRigidArea(HGAP10));  checkboxes.add(p2.add(new JCheckBox(getString("ButtonDemo.check3"))));  p1.add(Box.createRigidArea(VGAP30));  jb2011p=new JPanel();  jb2011p.setLayout(new BoxLayout(jb2011p,BoxLayout.Y_AXIS));  JPanel p3=createHorizontalPanel(false);  createHorizonalHintBox(jb2011p,p3,getString("ButtonDemo.imagecheckboxes"));  p1.add(jb2011p);  String description=getString("ButtonDemo.customcheck");  String text=getString("ButtonDemo.check1");  check=new JCheckBox(text,createImageIcon("buttons/cb.gif",description));  check.setRolloverIcon(createImageIcon("buttons/cbr.gif",description));  check.setRolloverSelectedIcon(createImageIcon("buttons/cbrs.gif",description));  check.setSelectedIcon(createImageIcon("buttons/cbs.gif",description));  check.setMargin(new Insets(0,0,0,0));  p3.add(check);  checkboxes.add(check);  p3.add(Box.createRigidArea(HGAP20));  text=getString("ButtonDemo.check2");  check=new JCheckBox(text,createImageIcon("buttons/cb.gif",description));  check.setRolloverIcon(createImageIcon("buttons/cbr.gif",description));  check.setRolloverSelectedIcon(createImageIcon("buttons/cbrs.gif",description));  check.setSelectedIcon(createImageIcon("buttons/cbs.gif",description));  check.setMargin(new Insets(0,0,0,0));  p3.add(check);  checkboxes.add(check);  p3.add(Box.createRigidArea(HGAP20));  text=getString("ButtonDemo.check3");  check=new JCheckBox(text,createImageIcon("buttons/cb.gif",description));  check.setRolloverIcon(createImageIcon("buttons/cbr.gif",description));  check.setRolloverSelectedIcon(createImageIcon("buttons/cbrs.gif",description));  check.setSelectedIcon(createImageIcon("buttons/cbs.gif",description));  check.setMargin(new Insets(0,0,0,0));  p3.add(check);  checkboxes.add(check);  p1.add(Box.createVerticalGlue());  checkboxPanel.add(Box.createHorizontalStrut(10));  currentControls=checkboxes;  checkboxPanel.add(createControls());}  }
class C{  public void inflateDebugMenu(MenuInflater inflater,Menu menu){  inflater.inflate(R.menu.debug,menu);}  }
class C{  private void initComponents(final Dimension maxSize){  final Dimension max=maxSize;  int width=image.getWidth(null);  int height=image.getHeight(null);  if (image.getWidth(null) > max.width) {    width=max.width - 2;  }  if (image.getHeight(null) > max.height) {    height=max.height - 2;  }  String htmlCaption="";  if (caption != null) {    htmlCaption="<b><i><font color=\"" + FONT_COLOR + "\" size=\""+ FONT_SIZE+ "\">"+ caption+ "</big></i></b><br>";  }  final String img="<img width=" + width + " height="+ height+ " src="+ url.toString()+ ">";  final String text="<html>" + htmlCaption + img;  final JLabel imageLabel=new JLabel(text);  add(imageLabel);  setVisible(true);}  }
class C{  private void initBillingAndPaymentResult(){  initCustomerAndBillingResult(true,1L,false,"1030");  PaymentResult pr=new PaymentResult();  pr.setProcessingStatus(PaymentProcessingStatus.RETRY);  pr.setProcessingTime(System.currentTimeMillis());  pr.setBillingResult(billingResult);  billingResult.setPaymentResult(pr);  List<PaymentResult> initialPrs=new ArrayList<PaymentResult>();  initialPrs.add(pr);  qs.setQueryResultList(initialPrs);}  }
class C{  private GraphAlgorithms(){}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  private synchronized LogTarget[] safeGetLogTargets(){  if (null == m_logTargets) {    if (null == m_parent) {      return new LogTarget[0];    } else {      return m_parent.safeGetLogTargets();    }  } else {    final LogTarget[] logTargets=new LogTarget[m_logTargets.length];    for (int i=0; i < logTargets.length; i++) {      logTargets[i]=m_logTargets[i];    }    return logTargets;  }}  }
class C{  private IRegion createRegion(){  if (fDeleteOffset == -1) {    if (fStartOffset == -1 || fEndOffset == -1)     return null;    return new Region(fStartOffset,fEndOffset - fStartOffset);  } else   if (fStartOffset == -1 || fEndOffset == -1) {    return new Region(fDeleteOffset,0);  } else {    int offset=Math.min(fDeleteOffset,fStartOffset);    int endOffset=Math.max(fDeleteOffset,fEndOffset);    return new Region(offset,endOffset - offset);  }}  }
class C{  public static ContactListAdapter createContactListAdapter(Context context){  return createContactListAdapter(context,null);}  }
class C{  public final char yycharat(final int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  protected void computeSubdivisions(DrawContext dc,ShapeData shapeData){}  }
class C{  public static boolean isSVGImage(File f){  try {    System.out.println("Checking if " + f.getAbsolutePath() + " is an SVG file...");    Document document=getXMLDocumentFromFile(f);    boolean headerSVG=document.getDoctype() != null && document.getDoctype().getName().toLowerCase().equals("svg");    if (headerSVG)     return true; else {      return document.getElementsByTagName("svg") != null;    }  } catch (  Exception e) {  }  return false;}  }
class C{  ScatterChart(){}  }
class C{  public CalendarRequestUri(String uri){  super(uri);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementreplaceexistingattribute.class,args);}  }
class C{  public LongIteratorSpliterator(PrimitiveIterator.OfLong iterator,int characteristics){  this.it=iterator;  this.est=Long.MAX_VALUE;  this.characteristics=characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);}  }
class C{  public void handleError(ContentSharingError error){  if (isSessionInterrupted()) {    return;  }  if (sLogger.isActivated()) {    sLogger.info(new StringBuilder("Session error: ").append(String.valueOf(error.getErrorCode())).append(", reason=").append(error.getMessage()).toString());  }  closeMediaSession();  removeSession();  ContactId contact=getRemoteContact();  for (  ImsSessionListener listener : getListeners()) {    ((VideoStreamingSessionListener)listener).onSharingError(contact,error);  }}  }
class C{  public void paint(java.awt.Graphics g){  Debug.message("dted",getName() + "|DTEDLayer.paint()");  super.paint(g);  if (location != null)   location.render(g);  location=null;}  }
class C{  public boolean addGpsDateTimeStampTag(long timestamp){  ExifTag t=buildTag(TAG_GPS_DATE_STAMP,mGPSDateStampFormat.format(timestamp));  if (t == null) {    return false;  }  setTag(t);  mGPSTimeStampCalendar.setTimeInMillis(timestamp);  t=buildTag(TAG_GPS_TIME_STAMP,new Rational[]{new Rational(mGPSTimeStampCalendar.get(Calendar.HOUR_OF_DAY),1),new Rational(mGPSTimeStampCalendar.get(Calendar.MINUTE),1),new Rational(mGPSTimeStampCalendar.get(Calendar.SECOND),1)});  if (t == null) {    return false;  }  setTag(t);  return true;}  }
class C{  private static <T extends GlowStructurePiece>void bind(StructurePieceStore<T> store){  idTable.put(store.getId(),store);  classTable.put(store.getType(),store);}  }
class C{  public static <E>Set<E> singleton(E object){  return new SingletonSet<E>(object);}  }
class C{  public Vec3 subtract(Vec3 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec3","subtract","missingVector"));  }  this.x-=vector.x;  this.y-=vector.y;  this.z-=vector.z;  return this;}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 processor){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"FetchEntryReplyMessage process invoking reply processor with processorId: {}",this.processorId);  }  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"FetchEntryReplyMessage processor not found");    }    return;  }  processor.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.debug("{} processed {}",processor,this);  }  dm.getStats().incReplyMessageTime(NanoTimer.getTime() - startTime);}  }
class C{  @Override public void lightFalloff(float constant,float linear,float quadratic){  currentLightFalloffConstant=constant;  currentLightFalloffLinear=linear;  currentLightFalloffQuadratic=quadratic;}  }
class C{  private void removeAllNodes(@Nullable Object key){  Iterators.clear(new ValueForKeyIterator(key));}  }
class C{  public List<SoftWrapImpl> removeStartingFrom(int offset){  int startIndex=getSoftWrapIndex(offset);  if (startIndex < 0) {    startIndex=-startIndex - 1;  }  if (startIndex >= myWraps.size()) {    return Collections.emptyList();  }  List<SoftWrapImpl> tail=myWraps.subList(startIndex,myWraps.size());  List<SoftWrapImpl> result=new ArrayList<SoftWrapImpl>(tail);  tail.clear();  return result;}  }
class C{  private void initThreadPoolSize(){  try {    thread_pool_size=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.NUM_CORES_LOADING,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));  } catch (  NumberFormatException e) {    thread_pool_size=Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);  }}  }
class C{  public static void copy(File src,File dst) throws IOException {  FileInputStream inStream=new FileInputStream(src);  FileOutputStream outStream=new FileOutputStream(dst);  FileChannel inChannel=inStream.getChannel();  FileChannel outChannel=outStream.getChannel();  inChannel.transferTo(0,inChannel.size(),outChannel);  inStream.close();  outStream.close();}  }
class C{  @Override protected void createChildren(){  if (m_database.isLoaded()) {    for (    final INaviModule module : m_database.getContent().getModules()) {      add(new CModuleNode(getProjectTree(),CModuleContainerNode.this,m_database,module,new CModuleContainer(m_database,module)));    }  }}  }
class C{  public boolean isSetNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NODEID_ISSET_ID);}  }
class C{  private static boolean eq(long v1,long v2){  return v1 == v2;}  }
class C{  public static String decodeString(byte[] value){  return new String(value,Charsets.UTF_8);}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public void addListener(final IViewListener listener){  viewListeners.addListener(listener);}  }
class C{  public static List<CoreLabel> alignedPairToLabeledSequence(SymmetricalWordAlignment alignment){  List<CoreLabel> sequence=new ArrayList<>(alignment.eSize() * 7);  for (int i=0; i < alignment.fSize(); ++i) {    if (sequence.size() > 0)     sequence.add(createDatum(WHITESPACE,Operation.Whitespace.toString(),sequence.size(),WHITESPACE,0));    String token=alignment.f().get(i).toString();    Set<Integer> eAlignments=alignment.f2e(i);    if (eAlignments.size() == 0) {      System.err.printf("%s: WARNING: discarding unaligned token (%s)%n",ProcessorTools.class.getName(),token);    } else {      List<String> eTokens=new ArrayList<>(eAlignments.size());      for (      int j : eAlignments) {        eTokens.add(alignment.e().get(j).toString());      }      List<CoreLabel> charSequence=toSequence(token,eTokens,sequence.size());      sequence.addAll(charSequence);    }  }  return sequence;}  }
class C{  public void fatal(Throwable throwable,String msg){  innerLog(Level.FATAL,throwable,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public void finish() throws IOException {  if (done) {    return;  }  def.finish();  while (!def.finished()) {    int byteCount=def.deflate(buf);    out.write(buf,0,byteCount);  }  done=true;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tSet base of the expansion constant\n" + "\t(default = 1.3).","B",1,"-B <value>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public boolean areLastThreeNonRight(){  if (!hasThree())   return false;  double x1, y1, x2, y2, x3, y3;  int pos=points.size() - 3;  x1=points.get(pos).getX();  y1=points.get(pos).getY();  x2=points.get(pos + 1).getX();  y2=points.get(pos + 1).getY();  x3=points.get(pos + 2).getX();  y3=points.get(pos + 2).getY();  double val1=(x2 - x1) * (y3 - y1);  double val2=(y2 - y1) * (x3 - x1);  double diff=FloatingPoint.value(val1 - val2);  if (diff >= 0)   return true;  return false;}  }
class C{  public static String parseBssid(byte[] bssidBytes){  StringBuilder sb=new StringBuilder();  int k;  String hexK;  String str;  for (int i=0; i < bssidBytes.length; i++) {    k=0xff & bssidBytes[i];    hexK=Integer.toHexString(k);    str=((k < 16) ? ("0" + hexK) : (hexK));    System.out.println(str);    sb.append(str);  }  return sb.toString();}  }
class C{  @Override public void requestPollRead(){  try {    requestLoop();  } catch (  Exception e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  protected void prepare(){  int accountID=0;  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Rule_ID"))     ruleID=para[i].getParameterAsInt(); else     if (name.equals("Account_ID"))     accountID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);    if (accountID > 0)     account=new MElementValue(getCtx(),accountID,get_TrxName());  }}  }
class C{  private static double cost(MovAvgModel model,EvictingQueue<Double> train,double[] test){  double error=0;  double[] predictions=model.predict(train,test.length);  assert (predictions.length == test.length);  for (int i=0; i < predictions.length; i++) {    error+=Math.abs(test[i] - predictions[i]);  }  return error;}  }
class C{  @Override public boolean isCanceled(){  return canceled;}  }
class C{  private void addGiveawayItems(SteamGiftsUserData account){  drawer.addItems(new SectionDrawerItem().withName(R.string.navigation_giveaways).withDivider(!account.isLoggedIn()),new PrimaryDrawerItem().withName(R.string.navigation_giveaways_all).withIdentifier(R.string.navigation_giveaways_all).withIcon(FontAwesome.Icon.faw_gift));  if (account.isLoggedIn()) {    drawer.addItems(new PrimaryDrawerItem().withName(R.string.navigation_giveaways_group).withIdentifier(R.string.navigation_giveaways_group).withIcon(FontAwesome.Icon.faw_users),new PrimaryDrawerItem().withName(R.string.navigation_giveaways_wishlist).withIdentifier(R.string.navigation_giveaways_wishlist).withIcon(FontAwesome.Icon.faw_heart),new PrimaryDrawerItem().withName(R.string.navigation_giveaways_recommended).withIdentifier(R.string.navigation_giveaways_recommended).withIcon(FontAwesome.Icon.faw_thumbs_up));  }  drawer.addItems(new PrimaryDrawerItem().withName(R.string.navigation_giveaways_new).withIdentifier(R.string.navigation_giveaways_new).withIcon(FontAwesome.Icon.faw_refresh));}  }
class C{  public synchronized boolean hasExpiredCnxToServer(ServerLocation currentServer){  if (!this.allConnections.isEmpty()) {    final long now=System.nanoTime();    for (Iterator it=this.allConnections.iterator(); it.hasNext(); ) {      PooledConnection pc=(PooledConnection)it.next();      if (pc.shouldDestroy()) {        continue;      } else       if (currentServer.equals(pc.getServer())) {{          long life=pc.remainingLife(now,lifetimeTimeoutNanos);          if (life <= 0) {            return true;          }        }      }    }  }  return false;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Override public boolean isValidRow(@NotNull Map<String,Object> row){  if (!row.containsKey(column)) {    return false;  }  Object value=row.get(column);  if (value == null) {    return false;  }  if (((Comparable)value).compareTo((Comparable)leftValue) < 0) {    return false;  }  if (((Comparable)value).compareTo((Comparable)rightValue) > 0) {    return false;  }  return true;}  }
class C{  public List<Completion> findByUserAndStageAndCategory(User user,int stage,long categoryId){  List<Completion> userStageCompletions=findByUserAndStage(user,stage);  if (categoryId == CategoryDataSource.CATEGORY_ID_ALL)   return userStageCompletions; else {    List<Completion> completions=new ArrayList<>();    for (    Completion completion : userStageCompletions) {      if (completion.getChallenge().getCategoryId() == categoryId) {        completions.add(completion);      }    }    return completions;  }}  }
class C{  public String debugTipText(){  return "Whether to print additional debug information to the console.";}  }
class C{  public BufferedDataOutputStream(File file) throws IOException {  this(new FileOutputStream(file));}  }
class C{  public void unload(int id){  if (_soundMap.containsKey(id)) {    int soundId=_soundMap.remove(id);    _soundPool.unload(soundId);  } else {    Log.w(TAG,"sound: " + id + " is not loaded!");  }}  }
class C{  private int lineToY(int line){  int h=textArea.getVisibleRect().height;  float lineCount=textArea.getLineCount();  return (int)((line / lineCount) * h) - 2;}  }
class C{  public void testMoveFileSourceParentRootDestinationMissing() throws Exception {  IgfsPath file=new IgfsPath("/" + FILE.name());  create(igfsSecondary,paths(DIR_NEW,SUBDIR_NEW),paths(file));  create(igfs,null,null);  igfs.rename(file,SUBDIR_NEW);  checkExist(igfs,DIR_NEW,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,FILE.name()));  checkNotExist(igfs,igfsSecondary,file);}  }
class C{  public Point2D inverseTransform(Point2D p){  return getInverse().transform(p,null);}  }
class C{  static private String userIdFromRange(String[] values,boolean include){  int minId=Integer.parseInt(values[3]);  int maxId=Integer.parseInt(values[4]);  String exclusions=values.length > 5 ? values[5] : null;  Stack<Integer> stack=getStack(minId,maxId,exclusions,include);  if (stack.size() > 0) {    return Integer.toString(stack.pop());  }  throw new IllegalArgumentException("Exhausted random User Ids. Range not large enough for the number of calls.");}  }
class C{  public ProjectRestRep create(URI tenantId,ProjectParam input){  ProjectElement element=client.post(ProjectElement.class,input,PathConstants.PROJECT_BY_TENANT_URL,tenantId);  return get(element.getId());}  }
class C{  public IMultimediaStreamingSession initiateStreamingSession2(String serviceId,ContactId contact,String encoding) throws RemoteException {  if (TextUtils.isEmpty(serviceId)) {    throw new ServerApiIllegalArgumentException("serviceId must not be null or empty!");  }  if (contact == null) {    throw new ServerApiIllegalArgumentException("contact must not be null!");  }  if (sLogger.isActivated()) {    sLogger.info("Initiate a multimedia streaming session with " + contact);  }  ServerApiUtils.testImsExtension(serviceId);  try {    String featureTag=FeatureTags.FEATURE_RCSE + "=\"" + FeatureTags.FEATURE_RCSE_IARI_EXTENSION+ "."+ serviceId+ "\"";    final GenericSipRtpSession session=mSipService.createRtpSession(contact,featureTag,encoding);    MultimediaStreamingSessionImpl multimediaStreaming=new MultimediaStreamingSessionImpl(session.getSessionID(),mMultimediaStreamingSessionEventBroadcaster,mSipService,this,Direction.OUTGOING,contact,serviceId,State.INITIATING);    session.addListener(multimediaStreaming);    addMultimediaStreaming(multimediaStreaming);    session.startSession();    return multimediaStreaming;  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:18.850 -0500",hash_original_method="F51B80356A627C7A0236999C18E5CD11",hash_generated_method="9B32DD15E18B215F93A633951BC1B4CB") public void clear(){  final Object[] items=this.items;  final ReentrantLock lock=this.lock;  lock.lock();  try {    for (int i=takeIndex, k=count; k > 0; i=inc(i), k--)     items[i]=null;    count=0;    putIndex=0;    takeIndex=0;    notFull.signalAll();  }  finally {    lock.unlock();  }}  }
class C{  public StepObject(int id){  this.id=id;}  }
class C{  private void displayMap(final Intent data){  final Runnable getAndDisplayAddressFromContact=null;  new Thread(getAndDisplayAddressFromContact).start();}  }
class C{  public AnnotatingModalGraphMouse(RenderContext<V,E> rc,AnnotatingGraphMousePlugin<V,E> annotatingPlugin){  this(rc,annotatingPlugin,1.1f,1 / 1.1f);}  }
class C{  public <RO,Entity>List<RO> map(final List<Entity> objects,final Class<RO> ro,final Class<Entity> entity){  final List<RO> ros=new ArrayList<RO>();  if (objects != null) {    DTOAssembler.newAssembler(ro,entity).assembleDtos(ros,objects,adaptersRepository.getAll(),dtoFactory);  }  return ros;}  }
class C{  public static NSObject parse(File f) throws IOException, PropertyListFormatException {  return parse(new FileInputStream(f));}  }
class C{  @Override public synchronized void clear(){  try {    this.blob.clear();  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }  this.cache.clear();}  }
class C{  public void putTruncatedUnalignedBitString(BitArray ba) throws IOException {  putUnalignedBitString(ba.truncate());}  }
class C{  private boolean isProductPublishedOnMarketplace(long tpIndex,int mpIndex){  return tpIndex % Math.pow(2,(mpIndex + 1)) < (mpIndex + 1);}  }
class C{  public static void inhibitForcedDisconnectLogging(boolean b){  inhibitForceDisconnectLogging=b;}  }
class C{  private void checkParameterizations(Collection<Parameterization> collection) throws Exception {  if (collection == null) {    throw new Exception("parameterizations collection may not return null");  }  Set<String> duplicates=new HashSet<>();  Set<Parameterization> checkSet=new HashSet<>();  for (  Parameterization param : collection) {    if (param == null) {      throw new Exception("parameterization collection may not contain null values");    }    if (!checkSet.add(param)) {      duplicates.add(param.getName());    }  }  if (duplicates.size() != 0) {    throw new Exception("duplicated parameterization names: " + duplicates);  }}  }
class C{  private String typeSig(Type type){  L2MSignatureGenerator sg=new L2MSignatureGenerator();  sg.assembleSig(type);  return sg.toString();}  }
class C{  public boolean hasEqualizerSettings(String songId){  String where=SONG_ID + "=" + "'"+ songId+ "'";  Cursor cursor=getDatabase().query(EQUALIZER_TABLE,new String[]{SONG_ID},where,null,null,null,null);  if (cursor != null) {    if (cursor.getCount() > 0) {      cursor.close();      return true;    } else {      cursor.close();      return false;    }  } else {    return false;  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean contains(Point p){  return false;}  }
class C{  public void mask(PImage alpha){  if (alpha.pixels == null) {    alpha.loadPixels();    mask(alpha.pixels);    alpha.pixels=null;  } else {    mask(alpha.pixels);  }}  }
class C{  public EntityFilterParser(Element element) throws FilterException {  String entityProperty=element.getText();  if (entityProperty == null) {    throw new MissingFilterPropertyException("entity name",element);  }  try {    entityType=EntityType.valueOf(Strings.getTechnicalName(entityProperty));  } catch (  IllegalArgumentException e) {    throw new InvalidFilterPropertyException("entity name",element);  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size());  int mask=elements.length - 1;  for (int i=head; i != tail; i=(i + 1) & mask)   s.writeObject(elements[i]);}  }
class C{  public boolean isComplete(){  String ds=getDocStatus();  return DOCSTATUS_Completed.equals(ds) || DOCSTATUS_Closed.equals(ds) || DOCSTATUS_Reversed.equals(ds);}  }
class C{  public void close() throws IOException {  Set<OutputStream> outputStreams=this.streams;  for (  OutputStream out : outputStreams) {    try {      out.flush();    } catch (    IOException ignored) {    }    out.close();  }}  }
class C{  public void consumeBait(){  baitInventory.decrStackSize(0,1);}  }
class C{  public List<Pair<String,Integer>> mockOutput(){  return mockOutput;}  }
class C{  public int write(ByteBuffer src) throws IOException {  if (readonly)   throw new IOException("Buffer is read only.");  if (readLength > 0)   clearReadBuffer();  long startPosition=position();  int length;  while (src.hasRemaining()) {    length=Math.min(writeBuffer.length - writeOffset,src.remaining());    src.get(writeBuffer,writeOffset,length);    writeOffset+=length;    if (writeOffset == writeBuffer.length)     flushOptimized(); else     writePending=true;  }  return (int)(position() - startPosition);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static IntList makeImmutable(int value0,int value1){  IntList result=new IntList(2);  result.add(value0);  result.add(value1);  result.setImmutable();  return result;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    if (loginTabPane.getSelectedIndex() == 0) {      connectionOK();      printerField.refresh();    } else {      setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));      m_okPressed=true;      if (!defaultsOK())       m_okPressed=false;      setCursor(Cursor.getDefaultCursor());    }  } else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   appExit(); else   if (e.getSource() == hostField)   validateConnection(); else   if (e.getSource() == languageCombo)   languageComboChanged(); else   if (e.getSource() == roleCombo)   roleComboChanged(); else   if (e.getSource() == clientCombo)   clientComboChanged(); else   if (e.getSource() == orgCombo)   orgComboChanged(); else   if ("onlineLoginHelp".equals(e.getActionCommand()))   OnlineHelp.openInDefaultBrowser();}  }
class C{  public static Scorer<String> factory(String scorerName,Counter<String> config,Index<String> featureIndex) throws IOException {switch (scorerName) {case UNIFORM_SCORER:    return new UniformScorer<String>();case DENSE_SCORER:  return new DenseScorer(config,featureIndex);case SPARSE_SCORER:return new SparseScorer(config,featureIndex);}throw new RuntimeException(String.format("Unknown scorer \"%s\"",scorerName));}  }
class C{  public void startWith() throws IOException {  writeCode(WITH);  out.writeUI16(2);  out.writeUI16(0);  if (blockStack == null) {    blockStack=new Stack();  }  blockStack.push(new int[]{(int)out.getBytesWritten(),0});}  }
class C{  public SecretKeyWrapper(Context context,String alias) throws GeneralSecurityException, IOException {  mCipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");  final KeyStore keyStore=KeyStore.getInstance("AndroidKeyStore");  keyStore.load(null);  if (!keyStore.containsAlias(alias)) {    generateKeyPair(context,alias);  }  final KeyStore.PrivateKeyEntry entry=(KeyStore.PrivateKeyEntry)keyStore.getEntry(alias,null);  mPair=new KeyPair(entry.getCertificate().getPublicKey(),entry.getPrivateKey());}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static void handleLogout(StatelessService service,Operation op){  if (op.getAuthorizationContext() == null) {    op.complete();    return;  }  String userLink=op.getAuthorizationContext().getClaims().getSubject();  if (!associateAuthorizationContext(service,op,userLink,0)) {    op.setStatusCode(Operation.STATUS_CODE_SERVER_FAILURE_THRESHOLD).complete();    return;  }  op.complete();}  }
class C{  @OnEditorAction(R.id.ring_add_password) @SuppressWarnings("unused") public boolean keyPressedOnPasswordAddField(TextView v,int actionId,KeyEvent event){  if (actionId == EditorInfo.IME_ACTION_DONE) {    addRingAccount();    return true;  }  return false;}  }
class C{  public static RegexpElement and(RegexpElement e1,RegexpElement e2){  if (e1 instanceof NullElement || e2 instanceof NullElement) {    return NullElement.INSTANCE;  }  if (e1 instanceof EmptyElement) {    return e2;  } else   if (e2 instanceof EmptyElement) {    return e1;  } else {    return new AndElement(e1,e2);  }}  }
class C{  public SIPHeader parse() throws ParseException {  ProxyRequireList list=new ProxyRequireList();  if (debug)   dbg_enter("ProxyRequireParser.parse");  try {    headerName(TokenTypes.PROXY_REQUIRE);    while (lexer.lookAhead(0) != '\n') {      ProxyRequire r=new ProxyRequire();      r.setHeaderName(SIPHeaderNames.PROXY_REQUIRE);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      r.setOptionTag(token.getTokenValue());      this.lexer.SPorHT();      list.add(r);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        r=new ProxyRequire();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        r.setOptionTag(token.getTokenValue());        this.lexer.SPorHT();        list.add(r);      }    }  }  finally {    if (debug)     dbg_leave("ProxyRequireParser.parse");  }  return list;}  }
class C{  @Override public Value convertTo(int t){  if (t == type) {    return this;  } else   if (t == Value.CLOB) {    if (handler != null) {      Value copy=handler.getLobStorage().createClob(getReader(),-1);      return copy;    } else     if (small != null) {      return ValueLobDb.createSmallLob(t,small);    }  } else   if (t == Value.BLOB) {    if (handler != null) {      Value copy=handler.getLobStorage().createBlob(getInputStream(),-1);      return copy;    } else     if (small != null) {      return ValueLobDb.createSmallLob(t,small);    }  }  return super.convertTo(t);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (debug_1: ");  result.append(debug_1);  result.append(')');  return result.toString();}  }
class C{  private <Body>void handleErrorResponse(final IHttpRequest request,final Body serializable,final IConnection connection) throws IOException {  throw OneDriveServiceException.createFromConnection(request,serializable,mSerializer,connection);}  }
class C{  public void drawRenderedImage(RenderedImage img,AffineTransform xform){  if (img == null) {    return;  }  if (img instanceof BufferedImage) {    BufferedImage bufImg=(BufferedImage)img;    drawImage(bufImg,xform,null);    return;  }  boolean isIntegerTranslate=(transformState <= TRANSFORM_INT_TRANSLATE) && isIntegerTranslation(xform);  int pad=isIntegerTranslate ? 0 : 3;  Region clip;  try {    clip=getCompClip();  } catch (  InvalidPipeException e) {    return;  }  Rectangle region=getImageRegion(img,clip,transform,xform,pad,pad);  if (region.width <= 0 || region.height <= 0) {    return;  }  if (isIntegerTranslate) {    drawTranslatedRenderedImage(img,region,(int)xform.getTranslateX(),(int)xform.getTranslateY());    return;  }  Raster raster=img.getData(region);  WritableRaster wRaster=Raster.createWritableRaster(raster.getSampleModel(),raster.getDataBuffer(),null);  int minX=raster.getMinX();  int minY=raster.getMinY();  int width=raster.getWidth();  int height=raster.getHeight();  int px=minX - raster.getSampleModelTranslateX();  int py=minY - raster.getSampleModelTranslateY();  if (px != 0 || py != 0 || width != wRaster.getWidth() || height != wRaster.getHeight()) {    wRaster=wRaster.createWritableChild(px,py,width,height,0,0,null);  }  AffineTransform transXform=(AffineTransform)xform.clone();  transXform.translate(minX,minY);  ColorModel cm=img.getColorModel();  BufferedImage bufImg=new BufferedImage(cm,wRaster,cm.isAlphaPremultiplied(),null);  drawImage(bufImg,transXform,null);}  }
class C{  public void pong(long pingId){  if (pingId == pingMessageId) {    pingMessageId=0;  }}  }
class C{  @Override public void onDraw(){  if (mIsControllerAttached) {    return;  }  FLog.wtf(DraweeEventTracker.class,"%x: Draw requested for a non-attached controller %x. %s",System.identityHashCode(this),System.identityHashCode(mController),toString());  mIsHolderAttached=true;  mIsVisible=true;  mIsActivityStarted=true;  attachOrDetachController();}  }
class C{  public static <A>List<A> filter(List<A> l,A elem){  Assert.checkNonNull(elem);  List<A> res=List.nil();  for (  A a : l) {    if (a != null && !a.equals(elem)) {      res=res.prepend(a);    }  }  return res.reverse();}  }
class C{  public boolean isSendInquiry(){  Object oo=get_Value(COLUMNNAME_SendInquiry);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public X500Principal(InputStream in){  if (in == null) {    throw new NullPointerException("in == null");  }  try {    dn=(Name)Name.ASN1.decode(in);  } catch (  IOException e) {    throw incorrectInputEncoding(e);  }}  }
class C{  public void insertBitmap(final BufferedImage bitmap,final int x,final int y,final int xx,final int yy){  insertBitmap(bitmap,x,y,bitmap.getRGB(xx,yy));}  }
class C{  @Override public void writeKMLSpecifics(Writer writer){  try {    writer.write("<color>" + ColorStyle.colorAsKMLString(mColor) + "</color>\n");    writer.write("<Icon><href>" + StringEscapeUtils.escapeXml10(mIconHref) + "</href></Icon>\n");    writer.write("<LatLonBox>");    GeoPoint pNW=mCoordinates.get(0);    GeoPoint pSE=mCoordinates.get(1);    writer.write("<north>" + pNW.getLatitude() + "</north>");    writer.write("<south>" + pSE.getLatitude() + "</south>");    writer.write("<east>" + pSE.getLongitude() + "</east>");    writer.write("<west>" + pNW.getLongitude() + "</west>");    writer.write("<rotation>" + mRotation + "</rotation>");    writer.write("</LatLonBox>\n");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static void insertObjectAtOffset(Object[] sourceArray,Object[] destinationArray,int offset,Object o){  if (offset == 0) {    destinationArray[0]=o;    System.arraycopy(sourceArray,0,destinationArray,1,sourceArray.length);  } else {    if (offset == sourceArray.length) {      System.arraycopy(sourceArray,0,destinationArray,0,sourceArray.length);      destinationArray[sourceArray.length]=o;    } else {      System.arraycopy(sourceArray,0,destinationArray,0,offset);      destinationArray[offset]=o;      System.arraycopy(sourceArray,offset,destinationArray,offset + 1,sourceArray.length - offset);    }  }}  }
class C{  public boolean isExclusive(){  return permits == PathLockFactory.this.maxThreads;}  }
class C{  public byte[] encrypt(BigInteger plain){  byte[] output=key.getModulus().toByteArray();  Arrays.fill(output,(byte)0);  byte[] tmp=key.getG().modPow(plain,key.getModulus()).toByteArray();  System.arraycopy(tmp,0,output,output.length - tmp.length,tmp.length);  if (debug) {    System.out.println("Encrypted value is:  " + new BigInteger(output));  }  return output;}  }
class C{  protected KMLRoot parse() throws IOException, XMLStreamException {  return KMLRoot.createAndParse(this.kmlSource);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.GUARD__EXPRESSION:    return expression != null;}return super.eIsSet(featureID);}  }
class C{  public void mouseDragged(MouseEvent ev){  isResizing=false;}  }
class C{  public static double[][] random(int m,int n,double[] min,double[] max){  double[][] array=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      array[i][j]=min[j] + Random.raw() * (max[j] - min[j]);    }  }  return array;}  }
class C{  public static String parseVdcIdFromURI(String id){  return parsePartFromURI(id,VDC_PARTS_COUNT);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private void dropDecMultTbl(DbConnection dbConn) throws Exception {  String tableName;  if (_logger.isDebugEnabled())   _logger.debug("dropDecMultTbl");  try {    tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.SHORT_DECIMAL);    DbTableFns.dropTable(dbConn,tableName);  } catch (  Exception e) {    _logger.error(e);    throw e;  }}  }
class C{  private void logOperatingSystemStatistics(){  String arch=operatingSystemMXBean.getArch();  String name=operatingSystemMXBean.getName();  String version=operatingSystemMXBean.getVersion();  int availCpus=operatingSystemMXBean.getAvailableProcessors();  double loadAverage=operatingSystemMXBean.getSystemLoadAverage();  StringBuilder sb=new StringBuilder();  sb.append("System: ");  sb.append(name);  sb.append(' ');  sb.append(version);  sb.append(' ');  sb.append(arch);  sb.append(" (");  sb.append(availCpus);  sb.append(" cpu(s) load average: ");  sb.append(loadAverage);  log.info(sb.toString());  logGraphicalLoadAverage(loadAverage,availCpus);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  private TopDocs knnSearch(Document document) throws IOException {  BooleanQuery.Builder mltQuery=new BooleanQuery.Builder();  for (  String fieldName : textFieldNames) {    String boost=null;    if (fieldName.contains("^")) {      String[] field2boost=fieldName.split("\\^");      fieldName=field2boost[0];      boost=field2boost[1];    }    String[] fieldValues=document.getValues(fieldName);    if (boost != null) {      mlt.setBoost(true);      mlt.setBoostFactor(Float.parseFloat(boost));    }    mlt.setAnalyzer(field2analyzer.get(fieldName));    for (    String fieldContent : fieldValues) {      mltQuery.add(new BooleanClause(mlt.like(fieldName,new StringReader(fieldContent)),BooleanClause.Occur.SHOULD));    }    mlt.setBoost(false);  }  Query classFieldQuery=new WildcardQuery(new Term(classFieldName,"*"));  mltQuery.add(new BooleanClause(classFieldQuery,BooleanClause.Occur.MUST));  if (query != null) {    mltQuery.add(query,BooleanClause.Occur.MUST);  }  return indexSearcher.search(mltQuery.build(),k);}  }
class C{  boolean supportsMoreConfig(@Nullable Breakpoint breakpoint){  return process.getBreakpointHandler().getXBreakpoint(breakpoint) != null;}  }
class C{  public Matrix4f assumeNothing(){  this._properties(0);  return this;}  }
class C{  public static void i(String tag,String msg){  log(LEVEL.INFO,tag,msg,null);}  }
class C{  public static boolean isLevel(Level level){  if (level == null)   return false;  return level.intValue() >= s_currentLevel.intValue();}  }
class C{  public Boolean isSplit(){  return split;}  }
class C{  public void draw(String text,int x,int y,int textLineHeight,String effect){  if (effect == null) {    String msg=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (effect.equals(AVKey.TEXT_EFFECT_SHADOW)) {    this.textRenderer.setColor(backColor);    this.draw(text,x + 1,y - 1,textLineHeight);    this.textRenderer.setColor(textColor);  } else   if (effect.equals(AVKey.TEXT_EFFECT_OUTLINE)) {    this.textRenderer.setColor(backColor);    this.draw(text,x,y + 1,textLineHeight);    this.draw(text,x + 1,y,textLineHeight);    this.draw(text,x,y - 1,textLineHeight);    this.draw(text,x - 1,y,textLineHeight);    this.textRenderer.setColor(textColor);  }  this.draw(text,x,y,textLineHeight);}  }
class C{  public static double max(final double... array){  validateArray(array);  double max=array[0];  for (int j=1; j < array.length; j++) {    if (Double.isNaN(array[j])) {      return Double.NaN;    }    if (array[j] > max) {      max=array[j];    }  }  return max;}  }
class C{  public boolean isDistributed(){  return !isLocal();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSecretRoomArea(zone);}  }
class C{  public KnowledgeDisplayEdge(Edge modelEdge,DisplayNode node1,DisplayNode node2){  if (modelEdge == null) {    throw new NullPointerException("Model edge must not be null.");  }  if (node1 == null) {    throw new NullPointerException("Node1 must not be null.");  }  if (node2 == null) {    throw new NullPointerException("Node2 must not be null.");  }  this.modelEdge=modelEdge;  this.node1=node1;  this.node2=node2;  this.mode=ANCHORED_UNSELECTED;  node1.addComponentListener(compHandler);  node2.addComponentListener(compHandler);  KnowledgeModelEdge _modelEdge=(KnowledgeModelEdge)modelEdge;  int edgeType=_modelEdge.getType();  if (edgeType == KnowledgeModelEdge.FORBIDDEN_EXPLICITLY) {    this.type=FORBIDDEN_EXPLICITLY;  } else   if (edgeType == KnowledgeModelEdge.FORBIDDEN_BY_TIERS) {    this.type=FORBIDDEN_BY_TIERS;  } else   if (edgeType == KnowledgeModelEdge.REQUIRED) {    this.type=REQUIRED;  } else   if (edgeType == KnowledgeModelEdge.REQUIRED_BY_GROUPS) {    this.type=REQUIRED_BY_GROUPS;  } else   if (edgeType == KnowledgeModelEdge.FORBIDDEN_BY_GROUPS) {    this.type=FORBIDDEN_BY_GROUPS;  }  node1.addPropertyChangeListener(propertyChangeHandler);  node2.addPropertyChangeListener(propertyChangeHandler);  resetBounds();}  }
class C{  public RequestHandle delete(Context context,String url,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(url);  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  private Instant plus(long secondsToAdd,long nanosToAdd){  if ((secondsToAdd | nanosToAdd) == 0) {    return this;  }  long epochSec=Math.addExact(seconds,secondsToAdd);  epochSec=Math.addExact(epochSec,nanosToAdd / NANOS_PER_SECOND);  nanosToAdd=nanosToAdd % NANOS_PER_SECOND;  long nanoAdjustment=nanos + nanosToAdd;  return ofEpochSecond(epochSec,nanoAdjustment);}  }
class C{  public CompiereColor(CompiereColor cc){  if (cc == null)   return;  setColor(cc);}  }
class C{  public static byte[] unwrapVCF(File sourceFile,File tmpFile) throws FileNotFoundException, IOException {  ZipArchiveInputStream in=null;  FileOutputStream fos=null;  String hmacString=null;  try {    in=new ZipArchiveInputStream(new FileInputStream(sourceFile));    ArchiveEntry entry;    in.getNextEntry();    fos=new FileOutputStream(tmpFile);    IOUtils.copy(in,fos);    entry=in.getNextEntry();    hmacString=entry.getName();    return Utils.hexToBytes(hmacString);  } catch (  StringIndexOutOfBoundsException e) {    logger.error("Error parsing hmac: " + hmacString + " is no valid hex String",e);    throw e;  }catch (  Exception e) {    logger.error("Error unwrapping VCF file",e);    throw e;  } finally {    if (fos != null) {      fos.flush();      fos.close();    }    if (in != null) {      in.close();    }  }}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public void accept(int timeout) throws IOException {  socketImpl.accept(timeout);}  }
class C{  public static void simulateHistogramRPU(LogicCircuit lc,GateLibrary gate_library,Args options){  ArrayList<Gate> logic_and_output_gates=new ArrayList<Gate>();  logic_and_output_gates.addAll(lc.get_logic_gates());  logic_and_output_gates.addAll(lc.get_output_gates());  for (  Gate gate : logic_and_output_gates) {    gate.set_unvisited(true);  }  for (  Gate gate : logic_and_output_gates) {    simulateHistogramRPU(gate,gate_library,options);  }}  }
class C{  public static <T>void gwtSerialize(T object) throws SerializationException {  RPC.encodeResponseForSuccess(arbitraryVoidReturningMethod(),object);}  }
class C{  public static String jsonExtractSubnetMask(String fmJson) throws IOException {  String subnet_mask="";  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  try {    jp=f.createParser(fmJson);  } catch (  JsonParseException e) {    throw new IOException(e);  }  jp.nextToken();  if (jp.getCurrentToken() != JsonToken.START_OBJECT) {    throw new IOException("Expected START_OBJECT");  }  while (jp.nextToken() != JsonToken.END_OBJECT) {    if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {      throw new IOException("Expected FIELD_NAME");    }    String n=jp.getCurrentName();    jp.nextToken();    if (jp.getText().equals(""))     continue;    if (n == "subnet-mask") {      subnet_mask=jp.getText();      break;    }  }  return subnet_mask;}  }
class C{  void preferBinding(String prefix,String ns){  noteBinding(prefix,ns,false);}  }
class C{  public IMouseState createEdgeHoverState(final Edge e,final MouseEvent event){  final CEdgeHoverState state=new CEdgeHoverState(this,m_graph,e);  m_factory.createEdgeHoverAction().execute(state,event);  return state;}  }
class C{  FormSubmitEvent(Object source,EventType type,URL targetURL,Element sourceElement,String targetFrame,MethodType method,String data){  super(source,type,targetURL,sourceElement,targetFrame);  this.method=method;  this.data=data;}  }
class C{  public static Integer toInteger(Number self){  return self.intValue();}  }
class C{  static void queuePlayerCapeReplacement(AbstractClientPlayer player){  final String displayName=player.getDisplayNameString();  Logger.info("Queueing cape replacement for %s",displayName);  THREAD_POOL.submit(null);}  }
class C{  @Override public String toString(){  if (tokens == null) {    return "StrTokenizer[not tokenized yet]";  }  return "StrTokenizer" + getTokenList();}  }
class C{  public String toString(final int i){  return "" + i;}  }
class C{  public LineMapWriter(WriteStreamOld os){  _os=os;}  }
class C{  @Override public void free(){  debugCodeCall("free");  value=null;}  }
class C{  public static double rRMSEfitness(boolean useTrainingData,GEPIndividual ind){  double rRMSE=rRMSErawFitness(useTrainingData,ind,0);  return (1000.0) / (1.0 + rRMSE);}  }
class C{  private static Object cloneClass(Object obj,RVMType type) throws OutOfMemoryError, CloneNotSupportedException {  if (!(obj instanceof Cloneable)) {    throw new CloneNotSupportedException();  } else {    return cloneClass2(obj,type);  }}  }
class C{  public Index findLocalTempTableIndex(String name){  if (localTempTableIndexes == null) {    return null;  }  return localTempTableIndexes.get(name);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  protected SVGOMSubImageRefElement(){}  }
class C{  public _BuildStatus(final String[] flagStrings){  super(flagStrings);}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  @Override public void updateClob(String columnLabel,Clob x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateClob(" + quote(columnLabel) + ", x);");    }    checkClosed();    Value v;    if (x == null) {      v=ValueNull.INSTANCE;    } else {      v=conn.createClob(x.getCharacterStream(),-1);    }    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static <E,C extends Collection<E>>SynchronizedMutableCollection<E> of(C collection,Object lock){  return new SynchronizedMutableCollection<>(CollectionAdapter.adapt(collection),lock);}  }
class C{  public boolean isRunning(){  return null == running ? _running : running.get();}  }
class C{  @Override public int compareTo(Value o){  if (o instanceof BooleanVal) {    return (new Boolean(b)).compareTo(((BooleanVal)o).getBoolean());  } else {    return hashCode() - o.hashCode();  }}  }
class C{  @SuppressWarnings("unchecked") public static <T extends TMember>MemberList<T> emptyList(){  return (MemberList<T>)EMPTY_LIST;}  }
class C{  public static LazyPVectorX<Integer> range(int start,int end){  return fromStreamS(ReactiveSeq.range(start,end));}  }
class C{  private String createMnemonic(String text){  if (text == null)   return text;  int pos=text.indexOf('&');  if (pos != -1) {    char ch=text.charAt(pos + 1);    if (ch != ' ') {      setMnemonic(ch);      return text.substring(0,pos) + text.substring(pos + 1);    }  }  return text;}  }
class C{  public static EntityManagerFactory createEntityManagerFactoryProxy(final EntityManagerFactory entityManagerFactory){  if (DISABLED || !JPA_COUNTER.isDisplayed()) {    return entityManagerFactory;  }  return JdbcWrapper.createProxy(entityManagerFactory,new EntityManagerFactoryHandler(entityManagerFactory));}  }
class C{  public ContentQuery(URL feedUrl){  super(feedUrl);}  }
class C{  static Span readSpan(MessageUnpacker unpacker) throws IOException {  int numEntries=unpacker.unpackMapHeader();  MilliSpan.Builder builder=new MilliSpan.Builder();  while (--numEntries >= 0) {    String key=unpacker.unpackString();    if (key.length() != 1) {      throw new IOException("Unknown key " + key);    }switch (key.charAt(0)) {case 'a':      builder.spanId(readSpanId(unpacker));    break;case 'b':  builder.begin(unpacker.unpackLong());break;case 'e':builder.end(unpacker.unpackLong());break;case 'd':builder.description(unpacker.unpackString());break;case 'r':builder.tracerId(unpacker.unpackString());break;case 'p':int numParents=unpacker.unpackArrayHeader();SpanId[] parents=new SpanId[numParents];for (int i=0; i < numParents; i++) {parents[i]=readSpanId(unpacker);}builder.parents(parents);break;case 'n':int mapEntries=unpacker.unpackMapHeader();HashMap<String,String> entries=new HashMap<String,String>(mapEntries);for (int i=0; i < mapEntries; i++) {String k=unpacker.unpackString();String v=unpacker.unpackString();entries.put(k,v);}builder.traceInfo(entries);break;case 't':int listEntries=unpacker.unpackArrayHeader();ArrayList<TimelineAnnotation> list=new ArrayList<TimelineAnnotation>(listEntries);for (int i=0; i < listEntries; i++) {int timelineObjectSize=unpacker.unpackMapHeader();long time=0;String msg="";for (int j=0; j < timelineObjectSize; j++) {String tlKey=unpacker.unpackString();if (tlKey.length() != 1) {throw new IOException("Unknown timeline map key " + tlKey);}switch (tlKey.charAt(0)) {case 't':time=unpacker.unpackLong();break;case 'm':msg=unpacker.unpackString();break;default :throw new IOException("Unknown timeline map key " + tlKey);}}list.add(new TimelineAnnotation(time,msg));}builder.timeline(list);break;default :throw new IOException("Unknown key " + key);}}return builder.build();}  }
class C{  public boolean isValid(String token){  Map<String,String> payload=tokenMap.get(token);  if (payload != null) {    long creationTime=Long.valueOf(payload.get("creation.time"));    long currentTime=System.currentTimeMillis();    return (creationTime + ticketLifeTimeSeconds * 1000) > currentTime;  }  return false;}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.characters(ch,start,length);  }}  }
class C{  @Override protected Scalar parseScalar(Scalar s){  if (s.val.length < 3)   throw new IllegalArgumentException("Scalar must have 3 or 4 dimensions.");  return new Scalar(s.val[0],s.val[1],s.val[2],(s.val.length >= 4) ? (int)s.val[3] : 255);}  }
class C{  public void addLastDecrementRunnable(Runnable r){  boolean ensureLastDecrement=(mCount == 0);  if (ensureLastDecrement)   increment();  mLastDecRunnables.add(r);  if (ensureLastDecrement)   decrement();}  }
class C{  public CommunicationTimeStamps(final NetworkTimeStamp sendTimeStamp,final NetworkTimeStamp receiveTimeStamp){  this.sendTimeStamp=sendTimeStamp;  this.receiveTimeStamp=receiveTimeStamp;}  }
class C{  public String toString(){  String str="";switch (align) {case LEFT:    str=",align=left";  break;case CENTER:str=",align=center";break;case RIGHT:str=",align=right";break;case LEADING:str=",align=leading";break;case TRAILING:str=",align=trailing";break;}return getClass().getName() + "[hgap=" + hgap+ ",vgap="+ vgap+ str+ "]";}  }
class C{  public static String trim(String s,boolean leading,boolean trailing,String sp){  char space=(sp == null || sp.length() < 1) ? ' ' : sp.charAt(0);  if (leading) {    int len=s.length(), i=0;    while (i < len && s.charAt(i) == space) {      i++;    }    s=(i == 0) ? s : s.substring(i);  }  if (trailing) {    int endIndex=s.length() - 1;    int i=endIndex;    while (i >= 0 && s.charAt(i) == space) {      i--;    }    s=i == endIndex ? s : s.substring(0,i + 1);  }  return s;}  }
class C{  public void updateActivity(){  mActivityTimestamp=System.currentTimeMillis();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.881 -0500",hash_original_method="5377041F441259BEB33F3B708C681E3C",hash_generated_method="5377041F441259BEB33F3B708C681E3C") boolean _requestedDont(int option){  return !_requestedDo(option);}  }
class C{  private void computePatchLayoutMeasures(boolean rtl,boolean useHat){  final Configuration config=mResources.getConfiguration();  if (!getPatchDrawable(R.drawable.top_start_default).getPadding(mTempRect)) {    throw new IllegalStateException("9-patch 'top_start_default' does not have padding.");  }  mBlockStartPadding=rtl ? mTempRect.right : mTempRect.left;  mBlockEndPadding=getPatchDrawable(R.drawable.dummy_input).getIntrinsicWidth();  mValueInputWidth=getPatchDrawable(R.drawable.value_input_external).getIntrinsicWidth() - mBlockEndPadding;  final NinePatchDrawable bottomPatchDefault=getPatchDrawable(R.drawable.bottom_start_default);  if (!bottomPatchDefault.getPadding(mTempRect)) {    throw new IllegalStateException("9-patch 'bottom_start_default' does not have padding.");  }  mBlockBottomPadding=mTempRect.bottom;  final NinePatchDrawable bottomPatchNext=getPatchDrawable(R.drawable.bottom_start_next);  if (!bottomPatchNext.getPadding(mTempRect)) {    throw new IllegalStateException("9-patch 'bottom_start_next' does not have padding.");  }  mNextConnectorHeight=mTempRect.bottom - mBlockBottomPadding;  final NinePatchDrawable topLeftDefaultPatch=getPatchDrawable(useHat ? R.drawable.top_start_hat : R.drawable.top_start_default);  if (!topLeftDefaultPatch.getPadding(mTempRect)) {    throw new IllegalStateException("9-patch 'top_start_default' does not have padding.");  }  ;  mBlockTopDefaultPadding=mTempRect.top;  final NinePatchDrawable topLeftPreviousPatch=getPatchDrawable(R.drawable.top_start_previous);  if (!topLeftPreviousPatch.getPadding(mTempRect)) {    throw new IllegalStateException("9-patch 'top_start_previous' does not have padding.");  }  ;  mBlockTopPreviousPadding=mTempRect.top;  final NinePatchDrawable topLeftOutputPatch=getPatchDrawable(R.drawable.top_start_output);  if (!topLeftOutputPatch.getPadding(mTempRect)) {    throw new IllegalStateException("9-patch 'top_start_output' does not have padding.");  }  ;  mBlockTopOutputPadding=mTempRect.top;  mOutputConnectorWidth=(rtl ? mTempRect.right : mTempRect.left) - mBlockStartPadding;  mOutputConnectorHeight=topLeftOutputPatch.getIntrinsicHeight();  mBlockTopMinPadding=Math.min(mBlockTopDefaultPadding,Math.min(mBlockTopOutputPadding,mBlockTopPreviousPadding));  mMinBlockHeight=mBlockTopMinPadding + mOutputConnectorHeight + mBlockBottomPadding;  final NinePatchDrawable statementTopPatch=getPatchDrawable(R.drawable.statementinput_top);  if (!statementTopPatch.getPadding(mTempRect)) {    throw new IllegalStateException("9-patch 'statementinput_top' does not have padding.");  }  ;  mStatementTopThickness=mTempRect.top;  mStatementInputIndent=statementTopPatch.getIntrinsicWidth();  mStatementInputPadding=rtl ? mTempRect.right : mTempRect.left;  final NinePatchDrawable statementBottomPatch=getPatchDrawable(R.drawable.statementinput_bottom);  if (!statementBottomPatch.getPadding(mTempRect)) {    throw new IllegalStateException("9-patch 'statementinput_bottom' does not have padding.");  }  mStatementBottomThickness=mTempRect.bottom;  mStatementMinHeight=statementTopPatch.getIntrinsicHeight() + statementBottomPatch.getIntrinsicHeight();  final NinePatchDrawable inlineInputPatch=getPatchDrawable(R.drawable.value_input_inline);  mInlineInputMinimumWidth=inlineInputPatch.getIntrinsicWidth();  mInlineInputMinimumHeight=inlineInputPatch.getIntrinsicHeight();  inlineInputPatch.getPadding(mTempRect);  mInlineInputStartPadding=rtl ? mTempRect.right : mTempRect.left;  mInlineInputTopPadding=mTempRect.top;  mInlineInputTotalPaddingX=mTempRect.left + mTempRect.right;  mInlineInputTotalPaddingY=mTempRect.top + mTempRect.bottom;  mBlockTotalPaddingX=mBlockStartPadding + mBlockEndPadding;}  }
class C{  private COutdegreeEvaluator(){}  }
class C{  public Vector3i negate(Vector3i dest){  dest.x=-x;  dest.y=-y;  dest.z=-z;  return dest;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize=3;  double n;  double sum;  int[] dX;  int[] dY;  double[] weightsD;  double[] weightsI;  int midPoint;  int numPixelsInFilter;  boolean reflectAtBorders=false;  double sigmaD=0;  double sigmaI=0;  double recipRoot2PiTimesSigmaD;  double recipRoot2PiTimesSigmaI;  double twoSigmaSqrD;  double twoSigmaSqrI;  double zN, zFinal;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigmaD=Double.parseDouble(args[i]);    } else     if (i == 3) {      sigmaI=Double.parseDouble(args[i]);    } else     if (i == 4) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigmaD < 0.5) {    sigmaD=0.5;  } else   if (sigmaD > 20) {    sigmaD=20;  }  if (sigmaI < 0.001) {    sigmaI=0.001;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    recipRoot2PiTimesSigmaD=1 / (Math.sqrt(2 * Math.PI) * sigmaD);    twoSigmaSqrD=2 * sigmaD * sigmaD;    recipRoot2PiTimesSigmaI=1 / (Math.sqrt(2 * Math.PI) * sigmaI);    twoSigmaSqrI=2 * sigmaI * sigmaI;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (i * i) / twoSigmaSqrD);      if (weight <= 0.001) {        filterSize=i * 2 + 1;        break;      }    }    if (filterSize % 2 == 0) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    weightsD=new double[numPixelsInFilter];    weightsI=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2) + 1;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        x=col - midPoint;        y=row - midPoint;        dX[a]=x;        dY[a]=y;        weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (x * x + y * y) / twoSigmaSqrD);        weightsD[a]=weight;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              weight=recipRoot2PiTimesSigmaI * Math.exp(-1 * ((zN - z) * (zN - z)) / twoSigmaSqrI);              weight=weightsD[a] * weight;              weightsI[a]=weight;              sum+=weight;            }          }          zFinal=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              zFinal+=weightsI[a] * zN / sum;            }          }          outputFile.setValue(row,col,zFinal);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public CSSClass addClass(CSSClass clss) throws CSSNamingConflict {  CSSClass existing=store.get(clss.getName());  if (existing != null && existing.getOwner() != null && existing.getOwner() != clss.getOwner()) {    throw new CSSNamingConflict("CSS class naming conflict between " + clss.getOwner().toString() + " and "+ existing.getOwner().toString());  }  return store.put(clss.getName(),clss);}  }
class C{  @JsonCreator public static TimestampRange createInclusiveRange(@JsonProperty("lowerBound") long boundOne,@JsonProperty("upperBound") long boundTwo){  if (boundTwo < boundOne) {    return new TimestampRange(boundTwo,boundOne);  } else {    return new TimestampRange(boundOne,boundTwo);  }}  }
class C{  public void recordVariable(String typeDesc,String varName,int varNo,SymbolTable tbl) throws CompileError {  char c;  int dim=0;  while ((c=typeDesc.charAt(dim)) == '[')   ++dim;  int type=MemberResolver.descToType(c);  String cname=null;  if (type == CLASS) {    if (dim == 0)     cname=typeDesc.substring(1,typeDesc.length() - 1); else     cname=typeDesc.substring(dim + 1,typeDesc.length() - 1);  }  Declarator decl=new Declarator(type,cname,dim,varNo,new Symbol(varName));  tbl.append(varName,decl);}  }
class C{  @Override public void paintComponent(Graphics g){  super.paintComponent(g);  int x=getWidth();  int y=getHeight();  if (25 * m_numAttributes > 25 * m_numClasses && 25 * m_numAttributes > y) {    setSize(x,25 * m_numAttributes);  } else   if (25 * m_numClasses > y) {    setSize(x,25 * m_numClasses);  } else {    setSize(x,y);  }  y=getHeight();  for (int noa=0; noa < m_numAttributes; noa++) {    m_inputs[noa].drawInputLines(g,x,y);  }  for (int noa=0; noa < m_numClasses; noa++) {    m_outputs[noa].drawInputLines(g,x,y);    m_outputs[noa].drawOutputLines(g,x,y);  }  for (  NeuralConnection m_neuralNode : m_neuralNodes) {    m_neuralNode.drawInputLines(g,x,y);  }  for (int noa=0; noa < m_numAttributes; noa++) {    m_inputs[noa].drawNode(g,x,y);  }  for (int noa=0; noa < m_numClasses; noa++) {    m_outputs[noa].drawNode(g,x,y);  }  for (  NeuralConnection m_neuralNode : m_neuralNodes) {    m_neuralNode.drawNode(g,x,y);  }  for (int noa=0; noa < m_selected.size(); noa++) {    m_selected.get(noa).drawHighlight(g,x,y);  }}  }
class C{  public Tag insertTag(final Tag parent,final String name) throws CouldntSaveDataException {  try {    if (parent == null) {      return ObjectFinders.getObject(m_manager.insertTag(m_root.getNative(),name),m_allTags.values());    } else {      return ObjectFinders.getObject(m_manager.insertTag(parent.getNative(),name),m_allTags.values());    }  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public void createLiftChartPlot(List<double[]> data){  DataTable dataTable=new SimpleDataTable("Lift Chart",new String[]{"Fraction","Lift"});  Iterator i=data.iterator();  int pointCounter=0;  int eachPoint=Math.max(1,(int)Math.round((double)data.size() / (double)MAX_LIFT_POINTS));  while (i.hasNext()) {    double[] point=(double[])i.next();    if ((pointCounter == 0) || ((pointCounter % eachPoint) == 0) || (!i.hasNext())) {      double fraction=point[0];      double lift=point[1];      if (Double.isNaN(lift)) {        lift=this.maxLift;      }      dataTable.add(new SimpleDataTableRow(new double[]{fraction,lift}));    }    pointCounter++;  }  SimplePlotterDialog plotter=new SimplePlotterDialog(dataTable);  plotter.setXAxis(0);  plotter.plotColumn(1,true);  plotter.setVisible(true);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.644 -0500",hash_original_method="5BD29D5C4388EC618AF76FB6968F33B3",hash_generated_method="B17AA50EA89B76D08F40185F34724ACC") public LogConfigurationException(){  super();}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public HyperGraphPeer(File configFile,HyperGraph graph){  this(configFile);  this.graph=graph;}  }
class C{  public void createEntry(String user,String name,String[] groups) throws XMPPException {  if (!connection.isAuthenticated()) {    throw new IllegalStateException("Not logged in to server.");  }  if (connection.isAnonymous()) {    throw new IllegalStateException("Anonymous users can't have a roster.");  }  RosterPacket rosterPacket=new RosterPacket();  rosterPacket.setType(IQ.Type.SET);  RosterPacket.Item item=new RosterPacket.Item(user,name);  if (groups != null) {    for (    String group : groups) {      if (group != null && group.trim().length() > 0) {        item.addGroupName(group);      }    }  }  rosterPacket.addRosterItem(item);  PacketCollector collector=connection.createPacketCollector(new PacketIDFilter(rosterPacket.getPacketID()));  connection.sendPacket(rosterPacket);  IQ response=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (response == null) {    throw new XMPPException("No response from the server.");  } else   if (response.getType() == IQ.Type.ERROR) {    throw new XMPPException(response.getError());  }  Presence presencePacket=new Presence(Presence.Type.subscribe);  presencePacket.setTo(user);  connection.sendPacket(presencePacket);}  }
class C{  private void loadEnvironment(){  Map<String,String> env=System.getenv();  for (  String envName : env.keySet()) {    setParameter(envName,env.get(envName));  }}  }
class C{  public Place(){}  }
class C{  @SuppressWarnings("unchecked") public static <T>T invoke(final Object obj,final String methodName,final Class<?>[] parameterTypes,final Object... arguments){  assert obj != null : String.format("The Object to invoke method (%1$s) on cannot be null!",methodName);  assert methodName != null : String.format("The name of the method to invoke on Object of type (%1$s) cannot be null",obj.getClass().getName());  try {    final Method method=obj.getClass().getMethod(methodName,parameterTypes);    method.setAccessible(true);    return (T)method.invoke(obj,arguments);  } catch (  NoSuchMethodException e) {    throw new RuntimeException(String.format("Method (%1$s) does not exist on Object of type (%2$s)!",methodName,obj.getClass().getName()),e);  }catch (  InvocationTargetException e) {    throw new RuntimeException(String.format("The invocation of method (%1$s) on an Object of type (%2$s) failed!",methodName,obj.getClass().getName()),e);  }catch (  IllegalAccessException e) {    throw new RuntimeException(String.format("The method (%1$s) on an Object of type (%2$s) is not accessible!",methodName,obj.getClass().getName()),e);  }}  }
class C{  public int size(){  return m_Count;}  }
class C{  public XmlTextParser(){  m_text=null;  m_pos=-1;}  }
class C{  public void add(int index,HDR sipHeader) throws IndexOutOfBoundsException {  hlist.add(index,sipHeader);}  }
class C{  private void checkClose(final int readResult) throws IOException {  if (readResult == -1) {    notifyWatcher();  }}  }
class C{  public TimingHit userTimingCategory(String value){  setString(USER_TIMING_CATEGORY,value);  return this;}  }
class C{  public void removeExcludedName(String name){  table.remove(name);}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public Builder month(Integer month){  if (month != null && (month < 1 || month > 12)) {    throw Messages.INSTANCE.getIllegalArgumentException(37,"Month",1,12);  }  components[MONTH]=month;  return this;}  }
class C{  public GeoPointField(String name,double latitude,double longitude,Store stored){  this(name,latitude,longitude,getFieldType(stored));}  }
class C{  protected void fireColumnAdded(TableColumnModelEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TableColumnModelListener.class) {      ((TableColumnModelListener)listeners[i + 1]).columnAdded(e);    }  }}  }
class C{  public void showKeyboard(boolean show){  isShowing=show;  Form current=Display.getInstance().getCurrent();  if (show) {    Component foc=current.getFocused();    if (foc instanceof Container) {      foc=((Container)foc).getLeadComponent();    }    TextArea txtCmp=(TextArea)foc;    if (txtCmp != null) {      if (vkb != null && vkb.contains(txtCmp)) {        return;      }      vkb=VirtualKeyboard.getVirtualKeyboard(txtCmp);      if (vkb == null) {        vkb=createVirtualKeyboard();      }      vkb.setTextField(txtCmp);      int oldTint=current.getTintColor();      current.setTintColor(VirtualKeyboard.getVKBTint(txtCmp));      boolean third=com.codename1.ui.Display.getInstance().isThirdSoftButton();      com.codename1.ui.Display.getInstance().setThirdSoftButton(false);      boolean qwerty=txtCmp.isQwertyInput();      if (txtCmp instanceof TextField) {        ((TextField)txtCmp).setQwertyInput(true);      }      vkb.showDialog();      if (txtCmp instanceof TextField) {        ((TextField)txtCmp).setQwertyInput(qwerty);      }      com.codename1.ui.Display.getInstance().setThirdSoftButton(third);      current.setTintColor(oldTint);    }  }}  }
class C{  private void stop(){  if (this.throttle == null) {    return;  }  internalAdjust=true;  throttle.setSpeedSetting(-1);  speedSlider.setValue(0);  if (speedSpinner != null) {    speedSpinnerModel.setValue(Integer.valueOf(0));  }  if (speedSliderContinuous != null) {    speedSliderContinuous.setValue(Integer.valueOf(0));  }  internalAdjust=false;}  }
class C{  public MatFileWriter(String fileName,Collection<MLArray> data) throws IOException {  this(new File(fileName),data);}  }
class C{  public void markForPendingRemoval(){  mPendingRemoval=true;}  }
class C{  public iframe addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public IllegalBoundaryException(String message){  super(message);}  }
class C{  public Handle(int tag,String owner,String name,String desc){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;}  }
class C{  public static Calendar parseDate(String value,String format) throws ParseException {  Calendar date=Calendar.getInstance();  date.setTime(new SimpleDateFormat(format).parse(value));  return date;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("PopSynchronousTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  for (int i=0; i < popMax; ++i) {    String from=calls[i];    for (int j=i; j < popMax; ++j) {      String to=calls[j];      String prev=calls[j + 1];      println("TEST pop from '" + from + "' to '"+ to+ "'");      resumeTo(from);      reenter(to);      resumeTo("report");      resetExpected();    }  }  println("TEST pop a b c p");  resumeTo("a");  pop("a");  pop("b");  pop("c");  pop("p");  resumeTo("report");  resetExpected();  println("TEST pop a c p");  resumeTo("a");  pop("a");  pop("c");  pop("p");  resumeTo("report");  resetExpected();  println("TEST stress a");  resumeTo("a");  for (int i=0; i < 100; ++i) {    reenter("a");  }  resumeTo("report");  resetExpected();  println("TEST stress c");  resumeTo("c");  for (int i=0; i < 100; ++i) {    reenter("c");  }  resumeTo("report");  resetExpected();  vm().dispose();  if (!testFailed) {    println("PopSynchronousTest: passed");  } else {    throw new Exception("PopSynchronousTest: failed");  }}  }
class C{  public void success(int message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  private static String codegenRSLRootClass(String base,String rootClassName){  String lineSep=System.getProperty("line.separator");  String[] codePieces=new String[]{"package",lineSep,"{",lineSep,lineSep,"import flash.display.Sprite;",lineSep,"import flash.system.Security;",lineSep,lineSep,"/**",lineSep," *  @private",lineSep," */",lineSep,"[ExcludeClass]",lineSep,"public class ",rootClassName,lineSep,"    extends ",base,lineSep,"{",lineSep,"    public function ",rootClassName,"()",lineSep,"    {",lineSep,"        super();",lineSep,"    }",lineSep,lineSep,"}",lineSep,lineSep,"}",lineSep};  return StringJoiner.join(codePieces,null);}  }
class C{  public void clear(){  modCount++;  for (int i=0; i < size; i++)   elementData[i]=null;  size=0;}  }
class C{  private String resolveSnippetField(IBindingSet bs){  String snippetFieldStr=resolveAsString(snippetField,bs);  if (snippetFieldStr == null || snippetFieldStr.isEmpty()) {    snippetFieldStr=defaults.getDefaultSnippetField();  }  return snippetFieldStr == null || snippetFieldStr.isEmpty() ? FTS.Options.DEFAULT_SNIPPET_FIELD : snippetFieldStr;}  }
class C{  @SuppressWarnings("static-method") public ConfigGroup createParameterSet(final String type){  return new ConfigGroup(type);}  }
class C{  public NewClikeResourceAction(String title,String description,SVGResource svgIcon,DialogFactory dialogFactory,CoreLocalizationConstant coreLocalizationConstant,EventBus eventBus,AppContext appContext,NotificationManager notificationManager){  super(title,description,svgIcon,dialogFactory,coreLocalizationConstant,eventBus,appContext,notificationManager);  this.appContext=appContext;}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  private void updateStatus(String message){  setErrorMessage(message);  setPageComplete(message == null);}  }
class C{  public void write(String text) throws IOException {  if (state == IN_TAG) {    out.write(">");    state=IN_BODY;  }  if (text == null)   return;  boolean specialChars=false;  for (int i=0; i < text.length() && !specialChars; i++) {switch (text.charAt(i)) {case '<':case '>':case '&':      specialChars=true;  }}if (specialChars) {  for (int i=0; i < text.length(); i++) {    char c=text.charAt(i);switch (c) {case '<':      out.write("&lt;");    break;case '>':  out.write("&gt;");break;case '&':out.write("&amp;");break;default :out.write(c);}}} else out.write(text);}  }
class C{  protected S_GlobalImpl(){  super();}  }
class C{  public void addEventSourceListener(EventSourceListener listener){  LOG.entering(CLASS_NAME,"addEventSourceListener",listener);  if (listener == null) {    throw new NullPointerException("listener");  }  listeners.add(listener);}  }
class C{  private void sendRelease(){  try {    toServer.print(messageGenerator.release());    toServer.flush();    String header=fromServer.readLine();    if (header != null) {      if (logger.isDebugEnabled())       logger.debug("Received header: " + header);      JSONObject obj=(JSONObject)parser.parse(header);      long payloadLen=(Long)obj.get("payload");      if (logger.isDebugEnabled())       logger.debug("Payload length: " + payloadLen);      String payload=NetworkClientFilter.Protocol.readPayload(fromServer,(int)payloadLen);      if (logger.isDebugEnabled())       logger.debug("Received payload: " + payload);      String type=(String)obj.get("type");      long returnCode=(Long)obj.get("return");      if (type.equals(Protocol.TYPE_ACKNOWLEDGED)) {        if (returnCode == 0) {          logger.info("Server acknowledged filter release: " + payload);        } else {          logger.warn("Server returned a non-zero code (" + returnCode + ") in response to release message: "+ payload);        }      } else {        logger.warn("Server should have returned message of type \"" + Protocol.TYPE_ACKNOWLEDGED + "\", but returned \""+ type+ "\" instead. Full message: "+ header+ payload);      }    } else {      logger.warn("Server didn't send response to a release request");    }  } catch (  ParseException e) {    logger.warn("Error parsing message received back from the filtering server after release message (ignoring): " + e);  }catch (  IOException e) {    logger.warn("Sending of release message to the filtering server failed (ignoring): " + e);  }catch (  ReplicatorException e) {    logger.warn("Sending of release message to the filtering server failed (ignoring): " + e);  }}  }
class C{  public Boolean isPublish(){  Publish publish=getExtension(Publish.class);  return publish == null ? null : publish.getValue();}  }
class C{  public static boolean checkForMissingFiles(Package toLoad,File packageRoot,PrintStream... progress){  boolean result=true;  Object doNotLoadIfFileMissing=toLoad.getPackageMetaDataElement("DoNotLoadIfFileNotPresent");  String packageRootPath=packageRoot.getPath() + File.separator;  if (doNotLoadIfFileMissing != null && doNotLoadIfFileMissing.toString().length() > 0) {    StringTokenizer tok=new StringTokenizer(doNotLoadIfFileMissing.toString(),",");    while (tok.hasMoreTokens()) {      String nextT=tok.nextToken().trim();      File toCheck=new File(packageRootPath + nextT);      if (!toCheck.exists()) {        for (        PrintStream p : progress) {          p.println("[Weka] " + toLoad.getName() + " can't be loaded because "+ toCheck.getPath()+ " appears to be missing.");        }        result=false;        break;      }    }  }  if (!result) {    Object doNotLoadMessage=toLoad.getPackageMetaDataElement("DoNotLoadIfFileNotPresentMessage");    if (doNotLoadMessage != null && doNotLoadMessage.toString().length() > 0) {      String dnlM=doNotLoadMessage.toString();      try {        dnlM=Environment.getSystemWide().substitute(dnlM);      } catch (      Exception ex) {      }      for (      PrintStream p : progress) {        p.println("[Weka] " + dnlM);      }    }  }  return result;}  }
class C{  private void sendError(String status,String msg) throws InterruptedException {  sendResponse(status,MIME_PLAINTEXT,null,new ByteArrayInputStream(msg.getBytes()));  throw new InterruptedException();}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("geronimo1x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Geronimo1xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("geronimo1x",ContainerType.INSTALLED,ConfigurationType.EXISTING,GeronimoExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("geronimo2x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Geronimo2xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("geronimo2x",ContainerType.INSTALLED,ConfigurationType.EXISTING,GeronimoExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("geronimo3x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Geronimo2xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("geronimo3x",ContainerType.INSTALLED,ConfigurationType.EXISTING,GeronimoExistingLocalConfigurationCapability.class);}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  twitterAuthClient.onActivityResult(requestCode,resultCode,data);}  }
class C{  private static double logAdd(double x,double y){  if (y <= x) {    return x + Math.log1p(Math.exp(y - x));  } else {    return y + Math.log1p(Math.exp(x - y));  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  @Override public boolean isArm(int loc){  return false;}  }
class C{  public void sendNovaChange(int ID,String net){  Object[] data={new Integer(ID),new String(net)};  Packet packet=new Packet(Packet.COMMAND_ENTITY_NOVA_NETWORK_CHANGE,data);  send(packet);}  }
class C{  public static ComponentUI createUI(final JComponent c){  return ourInstance;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:44.756 -0500",hash_original_method="2B3CAB6B00B171A015C7D4103C2B529C",hash_generated_method="46464080E4EC25A4875686809D40D7DD") public void skip(int bits) throws AccessException {  if ((mPos + bits) > mEnd) {    throw new AccessException("illegal skip " + "(pos " + mPos + ", end "+ mEnd+ ", bits "+ bits+ ")");  }  mPos+=bits;}  }
class C{  public SellerBehaviour(){  super(new HashMap<String,Integer>());}  }
class C{  public static BufferedImage readRGBImageFromYCCK(InputStream in,ICC_Profile cmykProfile) throws IOException {  ImageInputStream inputStream=null;  ImageReader reader=createNativeJPEGReader();  inputStream=(in instanceof ImageInputStream) ? (ImageInputStream)in : ImageIO.createImageInputStream(in);  reader.setInput(inputStream);  Raster raster=reader.readRaster(0,null);  BufferedImage image=createRGBImageFromYCCK(raster,cmykProfile);  return image;}  }
class C{  public BaseAdapterFactory(){  if (modelPackage == null) {    modelPackage=BasePackage.eINSTANCE;  }}  }
class C{  public double eval(double params[]){  return (Math.floor(params[0]));}  }
class C{  public static Set<Feature> prefix(String prefix,Set<Feature> features){  Set<Feature> feats=new LinkedHashSet<>();  for (  Feature s : features)   feats.add(s.prefixWith(prefix));  return feats;}  }
class C{  private Segment createDiskSegment(SegmentDescriptor descriptor){  File segmentFile=SegmentFile.createSegmentFile(name,storage.directory(),descriptor.id(),descriptor.version());  Buffer buffer=FileBuffer.allocate(segmentFile,Math.min(DEFAULT_BUFFER_SIZE,descriptor.maxSegmentSize()),Integer.MAX_VALUE);  descriptor.copyTo(buffer);  Segment segment=new Segment(new SegmentFile(segmentFile),buffer.slice(),descriptor,createIndex(descriptor),new OffsetPredicate(),serializer.clone(),this);  LOGGER.debug("Created segment: {}",segment);  return segment;}  }
class C{  public void writeField(String name,String value) throws java.io.IOException {  if (name == null) {    throw new IllegalArgumentException("Name cannot be null or empty.");  }  if (value == null) {    value="";  }  out.writeBytes(PREFIX);  out.writeBytes(boundary);  out.writeBytes(NEWLINE);  out.writeBytes("Content-Disposition: form-data; name=\"" + name + "\"");  out.writeBytes(NEWLINE);  out.writeBytes(NEWLINE);  out.writeBytes(value);  out.writeBytes(NEWLINE);  out.flush();}  }
class C{  public boolean isAccessibleSelected(int r,int c){  if (validateIfNecessary()) {    if (r < 0 || r >= getAccessibleRowCount() || c < 0 || c >= getAccessibleColumnCount()) {      return false;    }    TableCellElementInfo cell=getCell(r,c);    if (cell != null) {      Element elem=cell.getElement();      int start=elem.getStartOffset();      int end=elem.getEndOffset();      return start >= editor.getSelectionStart() && end <= editor.getSelectionEnd();    }  }  return false;}  }
class C{  public void unscheduleAllSelectors(){  for (ConcurrentArrayHashMap<Object,tHashSelectorEntry>.Entry e=hashForSelectors.firstValue(); e != null; e=hashForSelectors.nextValue(e)) {    tHashSelectorEntry element=e.getValue();    Object target=element.target;    unscheduleAllSelectors(target);  }  for (  tListEntry entry : updates0) {    unscheduleUpdate(entry.target);  }  for (  tListEntry entry : updatesNeg) {    unscheduleUpdate(entry.target);  }  for (  tListEntry entry : updatesPos) {    unscheduleUpdate(entry.target);  }}  }
class C{  protected float calculateDefense(final RPEntity entity){  float potential;  float min;  float score;  final float armor=entity.getItemDef() + 1.0f;  final int def=entity.getDef();  if (logger.isDebugEnabled()) {    logger.debug("defender has " + def + " and uses a armor of "+ armor);  }  potential=((float)Level.getWisdom(def)) * 2.0f * armor;  min=(float)Level.getWisdom(entity.getLevel()) * 0.60f;  score=((rand.nextFloat() * (1.0f - min)) + min) * potential;  score+=((float)entity.useKarma(0.1) * potential);  if (logger.isDebugEnabled()) {    logger.debug("DEF MAX: " + potential + "  DEF SCORE: "+ score);  }  return score;}  }
class C{  public Matrix4x3f rotationX(float ang){  float sin, cos;  if (ang == (float)Math.PI || ang == -(float)Math.PI) {    cos=-1.0f;    sin=0.0f;  } else   if (ang == (float)Math.PI * 0.5f || ang == -(float)Math.PI * 1.5f) {    cos=0.0f;    sin=1.0f;  } else   if (ang == (float)-Math.PI * 0.5f || ang == (float)Math.PI * 1.5f) {    cos=0.0f;    sin=-1.0f;  } else {    cos=(float)Math.cos(ang);    sin=(float)Math.sin(ang);  }  m00=1.0f;  m01=0.0f;  m02=0.0f;  m10=0.0f;  m11=cos;  m12=sin;  m20=0.0f;  m21=-sin;  m22=cos;  m30=0.0f;  m31=0.0f;  m32=0.0f;  properties=0;  return this;}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Float && val instanceof Integer) {          float k=unwrapKey(key);          int v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public synchronized StringBuffer insert(int index,char ch){  insert0(index,ch);  return this;}  }
class C{  public void failed(Description description,Throwable error,String sessionId){  if (verboseEnabled()) {    slackSession.sendMessage(verboseChannel,"",createHeaderAttachment(description,false));    String title="Reason";    String text=String.format(error.getMessage());    SlackAttachment reason=new SlackAttachment(title,"",text,null);    reason.setColor("warning");    slackSession.sendMessage(verboseChannel,"",reason);    StringBuilder exception=new StringBuilder();    exception.append("```");    Arrays.asList(error.getStackTrace()).stream().forEach(null);    exception.append("```");    slackSession.sendMessage(verboseChannel,exception.toString());  }}  }
class C{  @SuppressWarnings("unchecked") public static <E>Function<E,E> identity(){  return (Function<E,E>)IdentityFunction.INSTANCE;}  }
class C{  void updateFeatureCounts(int[] translationIds,List<List<RichTranslation<IString,String>>> nbestLists){  for (int i=0; i < translationIds.length; i++) {    Set<String> features=new HashSet<String>();    for (    RichTranslation<IString,String> trans : nbestLists.get(i)) {      for (      FeatureValue<String> f : trans.features) {        features.add(f.name);      }    }synchronized (clippedFeatureIndex) {      for (      String fName : features) {        Set<Integer> ids=clippedFeatureIndex.get(fName);        if (ids == null) {          ids=new TreeSet<Integer>();          clippedFeatureIndex.put(fName,ids);        }        if (ids.size() < minFeatureCount) {          ids.add(translationIds[i]);        }      }    }  }}  }
class C{  public boolean userHasGivenProjectACL(StorageOSUser user,ACL... acls){  List<URI> projectIds=_dbClient.queryByType(Project.class,true);  if (projectIds == null || !projectIds.iterator().hasNext()) {    _log.warn("There are no projects configured.");    return false;  }  for (  URI projectId : projectIds) {    if (userHasGivenACL(user,projectId,acls)) {      return true;    } else {      continue;    }  }  return false;}  }
class C{  public static String[] concatenateStringArrays(String[] array1,String[] array2){  if (ObjectUtils.isEmpty(array1)) {    return array2;  }  if (ObjectUtils.isEmpty(array2)) {    return array1;  }  String[] newArr=new String[array1.length + array2.length];  System.arraycopy(array1,0,newArr,0,array1.length);  System.arraycopy(array2,0,newArr,array1.length,array2.length);  return newArr;}  }
class C{  public boolean hasCompositing(){  return mHasCompositing;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord) {    if (TREETYPE_BPartner.equals(getTreeType())) {      MTree_NodeBP ndBP=new MTree_NodeBP(this,0);      ndBP.saveEx();    } else     if (TREETYPE_Menu.equals(getTreeType())) {      MTree_NodeMM ndMM=new MTree_NodeMM(this,0);      ndMM.saveEx();    } else     if (TREETYPE_Product.equals(getTreeType())) {      MTree_NodePR ndPR=new MTree_NodePR(this,0);      ndPR.saveEx();    } else {      MTree_Node nd=new MTree_Node(this,0);      nd.saveEx();    }  }  return success;}  }
class C{  @Override public void writeNewStateDescription(ParcelFileDescriptor newState){  writeJournal(newState,getCurrentStateJournal());}  }
class C{  public void onCreate(SQLiteDatabase paramSQLiteDatabase){  int numSchemas=sSchemas.length;  for (int i=0; i < numSchemas; i++) {    try {      String[][] schema=(String[][])sSchemas[i];      paramSQLiteDatabase.execSQL(createTableQueryFromArray(sTables[i],schema));    } catch (    Exception localException) {      while (true)       localException.printStackTrace();    }  }}  }
class C{  @Override public boolean addressTypeUnique(){  return false;}  }
class C{  public Address minus(long v){  return new Address(value.minus(v));}  }
class C{  public T label(String value){  return attr("label",value);}  }
class C{  public DViewJcePolicy(JFrame parent,JcePolicy jcePolicy) throws CryptoException {  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.jcePolicy=jcePolicy;  initComponents();}  }
class C{  private void initialize(){  this.add(getMenuFile());  this.add(getMenuEdit());  this.add(getMenuView());  this.add(getMenuAnalyse());  this.add(getMenuReport());  this.add(getMenuTools());  this.add(getMenuOnline());  this.add(getMenuHelp());}  }
class C{  public Polynomial over(double c){  double[] tmp=new double[order + 1];  for (int i=0; i < order + 1; i++)   tmp[i]=a[i] / c;  return new Polynomial(tmp);}  }
class C{  private void sendSubscribe(SipRequest subscribe) throws PayloadException, NetworkException {  try {    if (sLogger.isActivated()) {      sLogger.info(new StringBuilder("Send SUBSCRIBE, expire=").append(subscribe.getExpires()).append("ms").toString());    }    if (mSubscribed) {      mAuthenticationAgent.setProxyAuthorizationHeader(subscribe);    }    SipTransactionContext ctx=mImsModule.getSipManager().sendSipMessageAndWait(subscribe);    if (ctx.isSipResponse()) {      final int statusCode=ctx.getStatusCode();switch (statusCode) {case Response.OK:        if (subscribe.getExpires() != 0) {          handle200OK(ctx);        } else {          handle200OkUnsubscribe(ctx);        }      break;case Response.ACCEPTED:    handle200OK(ctx);  break;case Response.PROXY_AUTHENTICATION_REQUIRED:handle407Authentication(ctx);break;case Response.INTERVAL_TOO_BRIEF:handle423IntervalTooBrief(ctx);break;default :handleError(new ChatError(ChatError.SUBSCRIBE_CONFERENCE_FAILED,new StringBuilder(String.valueOf(statusCode)).append(' ').append(ctx.getReasonPhrase()).toString()));break;}} else {if (sLogger.isActivated()) {sLogger.debug("No response received for SUBSCRIBE");}handleError(new ChatError(ChatError.SUBSCRIBE_CONFERENCE_FAILED));}} catch (InvalidArgumentException e) {throw new PayloadException("Unable to set authorization header for subscribe!",e);}catch (ParseException e) {throw new PayloadException("Unable to set authorization header for subscribe!",e);}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public DateTimeFormatterBuilder appendCenturyOfEra(int minDigits,int maxDigits){  return appendSignedDecimal(DateTimeFieldType.centuryOfEra(),minDigits,maxDigits);}  }
class C{  @Override public void dispose(){  if (null != viewPrefsListener) {    viewInfo.removePrefsListener(viewPrefsListener);    viewPrefsListener=new Listener();  }  if (null != hierarchies) {    hierarchies=null;  }  if (null != renderer) {    renderer.dispose();    renderer=null;  }  super.dispose();}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public String delQ(String q,String... args){  return TestHarness.deleteByQuery(q,args);}  }
class C{  protected void sequence_AnnotatedScriptElement_AsyncNoTrailingLineBreak_FunctionBody_FunctionDeclaration_FunctionHeader_FunctionImpl_StrictFormalParameters_TypeVariables(ISerializationContext context,FunctionDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Builder add(Term[] terms){  int position=0;  if (positions.size() > 0)   position=positions.get(positions.size() - 1) + 1;  return add(terms,position);}  }
class C{  protected static void resetID(){  PRINTED_NODES=0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void addAttribute(Attribute attr){  _attributes.add(attr);  attr.addConstants(this);}  }
class C{  public PTBTokenizerFactory(boolean tokenizeCRs){  this.tokenizeCRs=tokenizeCRs;}  }
class C{  public void addRequiredSet(Flag... set){  final TreeSet<Flag> tset=new TreeSet<>();  Collections.addAll(tset,set);  mRequiredSets.add(tset);}  }
class C{  public boolean containsX509Data(){  return this.lengthX509Data() > 0;}  }
class C{  private MoveEvaluation alphabeta(int ply,IPlayer player,IPlayer opponent,int alpha,int beta){  Iterator<IGameMove> it=player.validMoves(state).iterator();  if (ply == 0 || !it.hasNext()) {    return new MoveEvaluation(player.eval(state));  }  MoveEvaluation best=new MoveEvaluation(alpha);  while (it.hasNext()) {    IGameMove move=it.next();    move.execute(state);    numStates++;    MoveEvaluation me=alphabeta(ply - 1,opponent,player,-beta,-alpha);    move.undo(state);    if (-me.score > alpha) {      alpha=-me.score;      best=new MoveEvaluation(move,alpha);    }    if (alpha >= beta) {      return best;    }  }  return best;}  }
class C{  public InlineQueryResultCachedMpeg4GifBuilder title(String title){  this.title=title;  return this;}  }
class C{  public void add(E newObject){  list.add(newObject);  int currentIndex=list.size() - 1;  while (currentIndex > 0) {    int parentIndex=(currentIndex - 1) / 2;    if (list.get(currentIndex).compareTo(list.get(parentIndex)) > 0) {      E temp=list.get(currentIndex);      list.set(currentIndex,list.get(parentIndex));      list.set(parentIndex,temp);    } else     break;    currentIndex=parentIndex;  }}  }
class C{  public ActionEvent(Object source,Type type,int x,int y){  this.source=source;  this.keyEvent=x;  this.y=y;  this.trigger=type;}  }
class C{  public static SECType newInstance(){  final SECType returnInstance=new SECType();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public AlgorithmException(Algorithm algorithm,Throwable cause){  this(algorithm,cause.getMessage(),cause);}  }
class C{  @Override public String toString(){  return this.type;}  }
class C{  public ClientPidMap(Integer pid,String uri){  this.pid=pid;  this.uri=uri;}  }
class C{  public void handleNodeGroupMaintenance(Operation post){  post.complete();}  }
class C{  public void updateProgress(float progress){  if (mLastProgress == progress) {    return;  }  mLastProgress=progress;  if (mUpdateStateAfterUpdateProgress) {    boolean positive=progress >= 0;    TransitionController transitionController;    for (int i=0, size=mTransitionControls.size(); i < size; i++) {      transitionController=mTransitionControls.get(i);      if (positive) {        if (transitionController.getEnd() > 0) {          transitionController.setEnable(true);        } else {          transitionController.setEnable(false);        }      } else {        if (transitionController.getEnd() < 0) {          transitionController.setEnable(true);        } else {          transitionController.setEnable(false);        }      }    }  }  TransitionController transitionController;  for (int i=0, size=mTransitionControls.size(); i < size; i++) {    transitionController=mTransitionControls.get(i);    if (transitionController.isEnable()) {      transitionController.updateProgress(progress);    }  }}  }
class C{  private static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void lshr(int size,Register dst,Register src,Register shift){  super.lsr(size,dst,src,shift);}  }
class C{  public void addVariable(IVariableBinding varBinding,VariableReference varRef){  if ((currentScope == TestScope.FIELDS) || (currentScope == TestScope.STATICFIELDS)) {    fieldVars.put(varBinding.toString(),varRef);    return;  }  currentMethodVars.put(varBinding.toString(),varRef);}  }
class C{  synchronized void receive(char[] chars,int offset,int count) throws IOException {  JTranscArrays.checkOffsetAndCount(chars.length,offset,count);  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (lastReader != null && !lastReader.isAlive()) {    throw new IOException("Pipe broken");  }  lastWriter=Thread.currentThread();  while (count > 0) {    try {      while (buffer != null && out == in) {        notifyAll();        wait(1000);        if (lastReader != null && !lastReader.isAlive()) {          throw new IOException("Pipe broken");        }      }    } catch (    InterruptedException e) {      throw new InterruptedIOException();    }    if (buffer == null) {      throw new IOException("Pipe is closed");    }    if (in == -1) {      in=0;    }    if (in >= out) {      int length=buffer.length - in;      if (count < length) {        length=count;      }      System.arraycopy(chars,offset,buffer,in,length);      offset+=length;      count-=length;      in+=length;      if (in == buffer.length) {        in=0;      }    }    if (count > 0 && in != out) {      int length=out - in;      if (count < length) {        length=count;      }      System.arraycopy(chars,offset,buffer,in,length);      offset+=length;      count-=length;      in+=length;    }  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 200) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void endRule(){  int n=selectors.size();  for (int i=0; i < n; i++) {    String[] selector=selectors.elementAt(i);    if (selector.length > 0) {      StyleSheet.this.addRule(selector,declaration,isLink);    }  }  declaration.removeAttributes(declaration);  selectors.removeAllElements();}  }
class C{  public void queue(final QueueName queueName,final URI deviceURI,final String deviceType,Object target,String method,Object... args) throws ControllerException {  queue(queueName,deviceURI,deviceType,true,target,method,args);}  }
class C{  public static void updateAppWidget(Context context,AppWidgetManager appWidgetManager,int appWidgetId,long trackId){  int size=ApiAdapterFactory.getApiAdapter().getAppWidgetSize(appWidgetManager,appWidgetId);  RemoteViews remoteViews=getRemoteViews(context,trackId,size);  appWidgetManager.updateAppWidget(appWidgetId,remoteViews);}  }
class C{  public PrintWriter(Writer out,boolean autoFlush){  super(out);  this.out=out;  this.autoFlush=autoFlush;  lineSeparator=java.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction("line.separator"));}  }
class C{  @Override public void removeSpeedTestListener(final ISpeedTestListener listener){  mListenerList.remove(listener);}  }
class C{  public final IntGrid2D lowerBound(int toNoLowerThanThisMuch){  int[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      assert sim.util.LocationLog.it(this,new Int2D(x,y));      if (fieldx[y] < toNoLowerThanThisMuch)       fieldx[y]=toNoLowerThanThisMuch;    }  }  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.185 -0400",hash_original_method="592E1D49822A2E8EC5684EEFD3300800",hash_generated_method="3BD1521DDDC437D54AE7B819B7EC8CDC") public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  private double[] CalcVariableCoef(Variogram variogram,KrigingPoint p,List<KrigingPoint> NNPoints){  int n=NNPoints.size();  double[] mat=new double[n + 1];  double dist=0.0;  for (int i=0; i < n; i++) {    dist=Math.sqrt(Math.abs(Math.pow(NNPoints.get(i).x - p.x,2)) + Math.abs(Math.pow(NNPoints.get(i).y - p.y,2)));    mat[i]=getTheoreticalSVValue(dist,variogram);  }  mat[n]=1;  return mat;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Client build(@Nonnull final Client client){  client.register(new BraveClientRequestFilter(new DefaultSpanNameProvider(),brave.clientRequestInterceptor()));  client.register(new BraveClientResponseFilter(brave.clientResponseInterceptor()));  return client;}  }
class C{  public boolean isRoot(){  return "".equals(getName()) || isJuliRoot();}  }
class C{  public VMReferenceMungeVisitor(Map map){  argmap=map;}  }
class C{  public PowerContainerHostUtilizationHistory(int id,ContainerVmRamProvisioner ramProvisioner,ContainerVmBwProvisioner bwProvisioner,long storage,List<? extends ContainerVmPe> peList,ContainerVmScheduler vmScheduler,PowerModel powerModel){  super(id,ramProvisioner,bwProvisioner,storage,peList,vmScheduler,powerModel);}  }
class C{  public FLVReader(IoBuffer buffer,boolean generateMetadata){  this.generateMetadata=generateMetadata;  in=buffer;  postInitialize();}  }
class C{  public void fill(ToolBar parent,int index){  if (widget == null && parent != null) {    int flags=SWT.PUSH | SWT.RIGHT;    if (action != null) {      int style=action.getStyle();      if (style == IAction.AS_CHECK_BOX) {        flags=SWT.CHECK;      } else       if (style == IAction.AS_RADIO_BUTTON) {        flags=SWT.RADIO;      } else       if (style == IAction.AS_DROP_DOWN_MENU) {        flags=SWT.DROP_DOWN;      }    }    ToolItem ti=null;    if (index >= 0) {      ti=new ToolItem(parent,flags,index);    } else {      ti=new ToolItem(parent,flags);    }    ti.setData(this);    ti.addListener(SWT.Selection,getToolItemListener());    ti.addListener(SWT.Dispose,getToolItemListener());    widget=ti;    update(null);    action.addPropertyChangeListener(propertyListener);    if (action != null) {      String commandId=action.getActionDefinitionId();      ExternalActionManager.ICallback callback=ExternalActionManager.getInstance().getCallback();      if ((callback != null) && (commandId != null)) {        callback.addPropertyChangeListener(commandId,actionTextListener);      }    }  }}  }
class C{  @Override public void putNextEntry(ZipEntry ze) throws IOException {  super.putNextEntry(ze);}  }
class C{  public void addFilter(Filter filter){  this.filters.add(filter);}  }
class C{  private V putForNullKey(V value){  for (Entry<K,V> e=table[0]; e != null; e=e.next) {    if (e.key == null) {      V oldValue=e.value;      e.value=value;      e.recordAccess(this);      return oldValue;    }  }  modCount++;  addEntry(0,null,value,0);  return null;}  }
class C{  public void addEntry(EntryEventImpl ev,Integer bucketId){  this.removeAllData[this.removeAllDataSize]=new RemoveAllEntryData(ev);  this.removeAllData[this.removeAllDataSize].setBucketId(bucketId);  this.removeAllDataSize+=1;}  }
class C{  public void addConsumer(OutputFrame.OutputType outputType,Consumer<OutputFrame> consumer){  consumers.put(outputType,consumer);}  }
class C{  @Override public void validateUpdate(IDataType newType) throws TypeUpdateException {  super.validateUpdate(newType);  HierarchicalType newHierarchicalType=(HierarchicalType)newType;  if ((newHierarchicalType.superTypes.size() != superTypes.size()) || !newHierarchicalType.superTypes.containsAll(superTypes)) {    throw new TypeUpdateException(newType,"New type cannot modify superTypes");  }  try {    TypeUtils.validateUpdate(fieldMapping,newHierarchicalType.fieldMapping);  } catch (  TypeUpdateException e) {    throw new TypeUpdateException(newType,e);  }}  }
class C{  public GridCacheVersion nextForLoad(AffinityTopologyVersion topVer){  return next(topVer.topologyVersion(),true,true,dataCenterId);}  }
class C{  public static Pair<Integer,Integer> parseAacAudioSpecificConfig(byte[] audioSpecificConfig){  ParsableBitArray bitArray=new ParsableBitArray(audioSpecificConfig);  int audioObjectType=bitArray.readBits(5);  int frequencyIndex=bitArray.readBits(4);  int sampleRate;  if (frequencyIndex == AUDIO_SPECIFIC_CONFIG_FREQUENCY_INDEX_ARBITRARY) {    sampleRate=bitArray.readBits(24);  } else {    Assertions.checkArgument(frequencyIndex < 13);    sampleRate=AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE[frequencyIndex];  }  int channelConfiguration=bitArray.readBits(4);  if (audioObjectType == AUDIO_OBJECT_TYPE_SBR || audioObjectType == AUDIO_OBJECT_TYPE_PS) {    frequencyIndex=bitArray.readBits(4);    if (frequencyIndex == AUDIO_SPECIFIC_CONFIG_FREQUENCY_INDEX_ARBITRARY) {      sampleRate=bitArray.readBits(24);    } else {      Assertions.checkArgument(frequencyIndex < 13);      sampleRate=AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE[frequencyIndex];    }    audioObjectType=bitArray.readBits(5);    if (audioObjectType == AUDIO_OBJECT_TYPE_ER_BSAC) {      channelConfiguration=bitArray.readBits(4);    }  }  int channelCount=AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE[channelConfiguration];  Assertions.checkArgument(channelCount != AUDIO_SPECIFIC_CONFIG_CHANNEL_CONFIGURATION_INVALID);  return Pair.create(sampleRate,channelCount);}  }
class C{  public SendingThread(){  setName("inspectit-sending-thread");  setDaemon(true);}  }
class C{  public void actionPerformed(ActionEvent ev){  closeDialog();}  }
class C{  private static String decodeParameterValue(String value){  Matcher m=hexPattern.matcher(value);  StringBuffer sb=null;  while (m.find()) {    if (sb == null) {      sb=new StringBuffer(value.length());    }    int hex=Integer.parseInt(m.group(1),16);    m.appendReplacement(sb,Character.toString((char)hex));  }  if (sb == null) {    return value;  }  m.appendTail(sb);  return sb.toString();}  }
class C{  public static IJavaSearchScope createWorkspaceScope(){  return BasicSearchEngine.createWorkspaceScope();}  }
class C{  public void resetSongScannedFlags(){  ContentValues values=new ContentValues();  values.put(SONG_SCANNED,"FALSE");  getDatabase().update(MUSIC_LIBRARY_TABLE,values,null,null);}  }
class C{  public static <T,R>Subscriber<T> subscribe(Subscriber<? super R> s,Function<? super T,? extends Publisher<? extends R>> mapper,boolean delayError,int maxConcurrency,Supplier<? extends Queue<R>> mainQueueSupplier,int prefetch,Supplier<? extends Queue<R>> innerQueueSupplier){  return new PublisherFlatMapMain<>(s,mapper,delayError,maxConcurrency,mainQueueSupplier,prefetch,innerQueueSupplier);}  }
class C{  private boolean checkPartition(int prevPart,int part,int totalParts){  return U.safeAbs(prevPart - part) == 1 || (part == 0 && prevPart == totalParts - 1) || (prevPart == 0 && part == totalParts - 1);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.123 -0500",hash_original_method="B3EA192DB08CDE7F222599E8EB46FFD6",hash_generated_method="78CD894CA5CA8D178BBE65B05D1E4F9A") public int save(int saveFlags){  addTaint(saveFlags);  return getTaintInt();}  }
class C{  public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException {  flushPending();  String data=node.getNodeValue();  if (data != null) {    final int length=data.length();    if (length > m_charsBuff.length) {      m_charsBuff=new char[length * 2 + 1];    }    data.getChars(0,length,m_charsBuff,0);    characters(m_charsBuff,0,length);  }}  }
class C{  public void addEdge(BasicBlock sourceBlock,BasicBlock destBlock,@Edge.Type int edgeType){  if (VERIFY_INTEGRITY) {    if (destBlock.isExceptionHandler() && edgeType != HANDLED_EXCEPTION_EDGE) {      throw new IllegalStateException("In method " + SignatureConverter.convertMethodSignature(methodGen) + ": exception handler "+ destBlock.getFirstInstruction()+ " reachable by non exception edge type "+ edgeType);    }  }  cfgSub.createEdge(sourceBlock,destBlock,edgeType);}  }
class C{  public void remove(){  throw new UnsupportedOperationException("remove() is unsupported");}  }
class C{  @Override public ThaiBuddhistDate date(Era era,int yearOfEra,int month,int dayOfMonth){  return date(prolepticYear(era,yearOfEra),month,dayOfMonth);}  }
class C{  public ClassMemberValue(int index,ConstPool cp){  super('c',cp);  this.valueIndex=index;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.724 -0500",hash_original_method="D12539CEE35D9C982852375BE20257EF",hash_generated_method="0FAE4F94A348B3D10863180E32BA2C1A") protected void removeSipProvider(){  this.sipProvider=null;}  }
class C{  public RangeMarker(int offset,int length){  super(offset,length);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.textview=(TextView)this.findViewById(R.id.textview);  this.progressBar=(ProgressBar)this.findViewById(R.id.progressBar);  this.start=(Button)this.findViewById(R.id.start);}  }
class C{  public boolean isRespondToDisplayReports(){  return readBoolean(RcsSettingsData.CHAT_RESPOND_TO_DISPLAY_REPORTS);}  }
class C{  private void generateTextVariable(TextNode textNode,SourceContext srcContext,Variables varContext){  StringBuilder buf=srcContext.functionBuffer;  Map<String,String> attributes=textNode.getTextAttributes();  List<TextNode> children=textNode.getTextChildren();  String currentVar=varContext.elementVar;  String contentVar=varContext.contentVar;  String parentClass=varContext.elementClass;  String parentChildrenVar=varContext.elementChildrenVar;  Type type=varContext.type;  if (!varContext.varDeclared) {    buf.append("        var ").append(currentVar).append(":").append(parentClass).append(" = new ").append(parentClass).append("();\r\n");    if (contentVar != null)     buf.append("        var ").append(contentVar).append(":Array = [];\r\n");  } else {    buf.append("        ").append(currentVar).append(" = new ").append(parentClass).append("();\r\n");    if (contentVar != null)     buf.append("        ").append(contentVar).append(" = [];\r\n");  }  generateAttributes(textNode,type,attributes,srcContext,currentVar);  if (!(textNode instanceof RichTextNode))   generateProperties(srcContext,textNode,currentVar,varContext);  if (children != null && children.size() > 0) {    Iterator<TextNode> iter=children.iterator();    while (iter.hasNext()) {      String elementVar=null;      TextNode child=iter.next();      if (child instanceof RichTextNode) {        varContext.setVar(richTextType,NodeType.RICHTEXT);        elementVar=varContext.elementVar;        generateTextVariable(child,srcContext,varContext);        buf.append("        ").append(contentVar).append(".push(").append(elementVar).append(");\r\n");      } else       if (child instanceof ParagraphNode) {        varContext.setVar(paragraphType,NodeType.PARAGRAPH);        elementVar=varContext.elementVar;        generateTextVariable(child,srcContext,varContext);        buf.append("        ").append(contentVar).append(".push(").append(elementVar).append(");\r\n");      } else       if (child instanceof SpanNode) {        varContext.setVar(spanType,NodeType.SPAN);        elementVar=varContext.elementVar;        generateTextVariable(child,srcContext,varContext);        buf.append("        ").append(contentVar).append(".push(").append(elementVar).append(");\r\n");      } else       if (child instanceof DivNode) {        varContext.setVar(divType,NodeType.DIV);        elementVar=varContext.elementVar;        generateTextVariable(child,srcContext,varContext);        buf.append("        ").append(contentVar).append(".push(").append(elementVar).append(");\r\n");      } else       if (child instanceof CDATANode) {        String text=formatString(((CDATANode)child).content);        buf.append("        ").append(contentVar).append(".push(").append(text).append(");\r\n");      } else       if (child instanceof BRNode) {        buf.append("        ").append(contentVar).append(".push(new BreakElement());\r\n");      } else       if (child instanceof ImgNode) {        varContext.setVar(imgType,NodeType.IMG);        elementVar=varContext.elementVar;        generateTextVariable(child,srcContext,varContext);        buf.append("        ").append(contentVar).append(".push(").append(elementVar).append(");\r\n");      } else       if (child instanceof LinkNode) {        varContext.setVar(linkType,NodeType.LINK);        elementVar=varContext.elementVar;        generateTextVariable(child,srcContext,varContext);        buf.append("        ").append(contentVar).append(".push(").append(elementVar).append(");\r\n");      } else       if (child instanceof TabNode) {        varContext.setVar(tabType,NodeType.TAB);        elementVar=varContext.elementVar;        generateTextVariable(child,srcContext,varContext);        buf.append("        ").append(contentVar).append(".push(").append(elementVar).append(");\r\n");      } else       if (child instanceof TCYNode) {        varContext.setVar(tcyType,NodeType.TCY);        elementVar=varContext.elementVar;        generateTextVariable(child,srcContext,varContext);        buf.append("        ").append(contentVar).append(".push(").append(elementVar).append(");\r\n");      } else       if (child instanceof TextGraphicNode) {        varContext.setVar(richTextType,NodeType.RICHTEXT);        elementVar=varContext.elementVar;        generateTextVariable(child,srcContext,varContext);        buf.append("        ").append(contentVar).append(".push(").append(elementVar).append(");\r\n");      } else       if (child instanceof com.adobe.internal.fxg.dom.text.ParagraphNode) {        varContext.setVar(paragraphType,NodeType.PARAGRAPH);        elementVar=varContext.elementVar;        generateTextVariable(child,srcContext,varContext);        buf.append("        ").append(contentVar).append(".push(").append(elementVar).append(");\r\n");      } else       if (child instanceof com.adobe.internal.fxg.dom.text.SpanNode) {        varContext.setVar(spanType,NodeType.SPAN);        elementVar=varContext.elementVar;        generateTextVariable(child,srcContext,varContext);        buf.append("        ").append(contentVar).append(".push(").append(elementVar).append(");\r\n");      } else       if (child instanceof com.adobe.internal.fxg.dom.text.BRNode) {        buf.append("        ").append(contentVar).append(".push(new BreakElement());\r\n");      } else {      }    }  }  if (parentChildrenVar != null && contentVar != null)   buf.append("        ").append(currentVar).append(".").append(parentChildrenVar).append(" = ").append(contentVar).append(";\r\n");  if (textNode instanceof RichTextNode)   generateProperties(srcContext,textNode,currentVar,varContext);}  }
class C{  protected void updateText(){  if (updatingDepth++ == 0) {    if (getFormatter() != null) {      try {        String newText=getFormatter().valueToString(getValue());        setText(newText);        if (!isFocusOwner()) {          setCaretPosition(getDocument().getLength());          moveCaretPosition(0);        }      } catch (      ParseException ex) {      }    }  }  updatingDepth--;}  }
class C{  public boolean contains(String[] phraseParts){  int i=0;  PhraseTreeElement match=root.getChild(phraseParts[i]);  while (match != null && i < phraseParts.length - 1) {    i++;    String childToken=phraseParts[i];    PhraseTreeElement child=match.getChild(childToken);    match=child;  }  if (match != null) {    return match.isEndElement();  } else {    return false;  }}  }
class C{  public static void enableStatsD(ManagedServiceBuilder managedServiceBuilder,String host,int port){  if (port < 1)   throw new IllegalStateException("StatsD port must be set");  Objects.requireNonNull(host,"StatsD Host cannot be null");  if (host.isEmpty())   throw new IllegalStateException("StatsD Host name must not be empty");  managedServiceBuilder.getStatsDReplicatorBuilder().setHost(host).setPort(port);  managedServiceBuilder.setEnableStatsD(true);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public Socket createSocket() throws IOException {  Socket s=new Socket();  s.bind(new InetSocketAddress(bindAddress,0));  return s;}  }
class C{  public AutoTransitionBlock_ createAutoTransitionBlock_(){  AutoTransitionBlock_Impl autoTransitionBlock_=new AutoTransitionBlock_Impl();  return autoTransitionBlock_;}  }
class C{  @Nullable public <T>T findUniqueOrNull(@NotNull RowMapper<T> rowMapper,@NotNull @SQL String sql,Object... args){  return findUniqueOrNull(rowMapper,SqlQuery.query(sql,args));}  }
class C{  public void add(final ConfigItem item){  failed=failed || item.getType() == ConfigItemTypes.ERROR;  this.list.add(item);}  }
class C{  public Oid(String strOid) throws GSSException {  try {    oid=new ObjectIdentifier(strOid);    derEncoding=null;  } catch (  Exception e) {    throw new GSSException(GSSException.FAILURE,"Improperly formatted Object Identifier String - " + strOid);  }}  }
class C{  public ReversePolarSorter(IPoint base){  this.baseX=base.getX();  this.baseY=base.getY();}  }
class C{  public boolean equals(Object object){  if (object != null && object instanceof SetOfIntegerSyntax) {    int[][] myMembers=this.members;    int[][] otherMembers=((SetOfIntegerSyntax)object).members;    int m=myMembers.length;    int n=otherMembers.length;    if (m == n) {      for (int i=0; i < m; ++i) {        if (myMembers[i][0] != otherMembers[i][0] || myMembers[i][1] != otherMembers[i][1]) {          return false;        }      }      return true;    } else {      return false;    }  } else {    return false;  }}  }
class C{  public static Face drawSouth(MeshModel model,double minX,double minY,double minZ,double maxX,double maxY,double maxZ,CubeTextureCoordinates textureCoordinates){  Face south=new Face();  south.normal=Direction.SOUTH.toVector();  south.drawVertex(new Vertex(minX,minY,maxZ,textureCoordinates.getSouthMinU(),textureCoordinates.getSouthMaxV()));  south.drawVertex(new Vertex(maxX,minY,maxZ,textureCoordinates.getSouthMaxU(),textureCoordinates.getSouthMaxV()));  south.drawVertex(new Vertex(maxX,maxY,maxZ,textureCoordinates.getSouthMaxU(),textureCoordinates.getSouthMinV()));  south.drawVertex(new Vertex(minX,maxY,maxZ,textureCoordinates.getSouthMinU(),textureCoordinates.getSouthMinV()));  model.drawFace(south);  return south;}  }
class C{  @SuppressWarnings({"UnnecessaryBoxing","PMD.IntegerInstantiation"}) @NoInline @Pure private static Object makeArgumentCompatible(RVMType expectedType,Object arg){  if (expectedType.isPrimitiveType()) {    if (arg instanceof java.lang.Byte) {      if (expectedType.isByteType())       return arg;      if (expectedType.isShortType())       return Short.valueOf((Byte)arg);      if (expectedType.isIntType())       return Integer.valueOf((Byte)arg);      if (expectedType.isLongType())       return Long.valueOf((Byte)arg);    } else     if (arg instanceof java.lang.Short) {      if (expectedType.isShortType())       return arg;      if (expectedType.isIntType())       return Integer.valueOf((Short)arg);      if (expectedType.isLongType())       return Long.valueOf((Short)arg);    } else     if (arg instanceof java.lang.Character) {      if (expectedType.isCharType())       return arg;      if (expectedType.isIntType())       return Integer.valueOf((Character)arg);      if (expectedType.isLongType())       return Long.valueOf((Character)arg);    } else     if (arg instanceof java.lang.Integer) {      if (expectedType.isIntType())       return arg;      if (expectedType.isLongType())       return Long.valueOf((Integer)arg);    } else     if (arg instanceof java.lang.Float) {      if (expectedType.isDoubleType())       return Double.valueOf((Float)arg);    }  }  return arg;}  }
class C{  public boolean maintainAspectRatio(){  return treeLayout.maintainAspectRatio();}  }
class C{  public static NodeIterator selectNodeIterator(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XObject list=eval(contextNode,str,namespaceNode);  return list.nodeset();}  }
class C{  public void testGetTag(){  CoreIdRfidProtocol instance=new CoreIdRfidProtocol();  assertEquals("04171F04FE",instance.getTag(msgStandalone));  instance=new CoreIdRfidProtocol('A','H',1);  assertEquals("04171F04FE",instance.getTag(msgConcentrator));}  }
class C{  public boolean isPhantom(){  Object oo=get_Value(COLUMNNAME_IsPhantom);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String matchMissingValuesTipText(){  return "Missing values count as a match. This setting is independent of " + "the invertSelection option.";}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();case VALUES:return isSetValues();case RESPONSE_TO:return isSetResponseTo();}throw new IllegalStateException();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void recoverTree(TreeNode root){  if (root == null)   return;  prev=new TreeNode(Integer.MIN_VALUE);  morrisInorder(root);  int t=first.val;  first.val=second.val;  second.val=t;}  }
class C{  public Boolean isComplete(){  return isComplete_;}  }
class C{  public void print_date(Date date){  DateFormat date_format=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG);  print(date_format.format(date));}  }
class C{  public ProgressSource(URL url,String method,long expected){  this.url=url;  this.method=method;  this.contentType="content/unknown";  this.progress=0;  this.lastProgress=0;  this.expected=expected;  this.state=State.NEW;  this.progressMonitor=ProgressMonitor.getDefault();  this.threshold=progressMonitor.getProgressUpdateThreshold();}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  BluetoothSocket(int type,int fd,boolean auth,boolean encrypt,BluetoothDevice device,int port,ParcelUuid uuid) throws IOException {  if (type == BluetoothSocket.TYPE_RFCOMM && uuid == null && fd == -1) {    if (port < 1 || port > MAX_RFCOMM_CHANNEL) {      throw new IOException("Invalid RFCOMM channel: " + port);    }  }  if (uuid != null)   mUuid=uuid; else   mUuid=new ParcelUuid(new UUID(0,0));  mType=type;  mAuth=auth;  mEncrypt=encrypt;  mDevice=device;  mPort=port;  mFd=fd;  mSocketState=SocketState.INIT;  if (device == null) {    mAddress=BluetoothAdapter.getDefaultAdapter().getAddress();  } else {    mAddress=device.getAddress();  }  mInputStream=new BluetoothInputStream(this);  mOutputStream=new BluetoothOutputStream(this);}  }
class C{  public boolean hasIcons(){  return mContent.getShortcutsAndWidgets().getChildCount() > 1;}  }
class C{  protected static void doConfigure(ConfigurationSocketAdapter configuration,InputStream stream,String resourceName) throws RuntimeException {  Document document=getDocument(stream,resourceName);  doConfigure(configuration,document);}  }
class C{  public static void checkState(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public <V extends Vertex>TObjectDoubleHashMap<V> localClusteringCoefficients(Collection<V> vertices){  TObjectDoubleHashMap<V> cc=new TObjectDoubleHashMap<V>();  for (  V v : vertices) {    int k=v.getEdges().size();    if (k == 0 || k == 1) {      cc.put(v,0.0);    } else {      cc.put(v,2 * countAdjacentEdges(v) / (double)(k * (k - 1)));    }  }  return cc;}  }
class C{  public static List<SupportedLanguage> toLanguages(List<POSupportedLanguage> poLanguages){  if (poLanguages == null) {    IllegalArgumentException e=new IllegalArgumentException("Parameter must not be null");    logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_PARAMETER_NULL);    throw e;  }  List<SupportedLanguage> result=new ArrayList<SupportedLanguage>();  for (  POSupportedLanguage poLanguage : poLanguages) {    result.add(toLanguage(poLanguage));  }  return result;}  }
class C{  public int lastByte(){  return lastByte;}  }
class C{  public boolean remove(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return q.remove(o);  }  finally {    lock.unlock();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void remove(Object key){synchronized (this) {    LRUListEntry entry=map.remove(key);    if (entry != null) {      if (entry == head) {        head=entry.next;      }      if (entry == tail) {        tail=entry.prev;      }      if (entry.prev != null) {        entry.prev.next=entry.next;        assert (entry.prev.next != entry.prev);      }      if (entry.next != null) {        entry.next.prev=entry.prev;        assert (entry.next.prev != entry.next);      }    }    rmStats(entry);  }}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public static String nullToEmpty(String string){  return (string == null) ? "" : string;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void installUI(JComponent c){  installComponents(fontChooser);  installListeners(fontChooser);}  }
class C{  public static PathPoint moveTo(float x,float y){  return new PathPoint(MOVE,x,y);}  }
class C{  public long sum(String... categories){  return sum((Integer)null,categories);}  }
class C{  public List<GcsPath> expand(GcsPath gcsPattern) throws IOException {  checkArgument(isGcsPatternSupported(gcsPattern.getObject()));  Matcher m=GLOB_PREFIX.matcher(gcsPattern.getObject());  Pattern p=null;  String prefix=null;  if (!m.matches()) {    Storage.Objects.Get getObject=storageClient.objects().get(gcsPattern.getBucket(),gcsPattern.getObject());    try {      ResilientOperation.retry(ResilientOperation.getGoogleRequestCallable(getObject),BACKOFF_FACTORY.backoff(),RetryDeterminer.SOCKET_ERRORS,IOException.class);      return ImmutableList.of(gcsPattern);    } catch (    IOException|InterruptedException e) {      if (e instanceof InterruptedException) {        Thread.currentThread().interrupt();      }      if (e instanceof IOException && errorExtractor.itemNotFound((IOException)e)) {        return ImmutableList.of();      }      throw new IOException("Unable to match files for pattern " + gcsPattern,e);    }  } else {    prefix=m.group("PREFIX");    p=Pattern.compile(globToRegexp(gcsPattern.getObject()));  }  LOG.debug("matching files in bucket {}, prefix {} against pattern {}",gcsPattern.getBucket(),prefix,p.toString());  Storage.Objects.List listObject=storageClient.objects().list(gcsPattern.getBucket());  listObject.setMaxResults(MAX_LIST_ITEMS_PER_CALL);  listObject.setPrefix(prefix);  String pageToken=null;  List<GcsPath> results=new LinkedList<>();  do {    if (pageToken != null) {      listObject.setPageToken(pageToken);    }    Objects objects;    try {      objects=ResilientOperation.retry(ResilientOperation.getGoogleRequestCallable(listObject),BACKOFF_FACTORY.backoff(),RetryDeterminer.SOCKET_ERRORS,IOException.class);    } catch (    Exception e) {      throw new IOException("Unable to match files in bucket " + gcsPattern.getBucket() + ", prefix "+ prefix+ " against pattern "+ p.toString(),e);    }    checkNotNull(objects);    if (objects.getItems() == null) {      break;    }    for (    StorageObject o : objects.getItems()) {      String name=o.getName();      if (p.matcher(name).matches() && !name.endsWith("/")) {        LOG.debug("Matched object: {}",name);        results.add(GcsPath.fromObject(o));      }    }    pageToken=objects.getNextPageToken();  } while (pageToken != null);  return results;}  }
class C{  protected VerletParticle2D createSingleParticle(Vec2D pos,float mass){  return new VerletParticle2D(pos,mass);}  }
class C{  public SemPmWrapper(Simulation simulation,Parameters parameters){  List<SemIm> semIms=null;  if (simulation == null) {    throw new NullPointerException("The Simulation box does not contain a simulation.");  }  edu.cmu.tetrad.algcomparison.simulation.Simulation _simulation=simulation.getSimulation();  if (_simulation == null) {    throw new NullPointerException("No data sets have been simulated.");  }  if (_simulation instanceof LinearFisherModel) {    throw new IllegalArgumentException("Large SEM simulations cannot be represented " + "using a SEM PM or IM box, sorry.");  }  if (!(_simulation instanceof SemSimulation)) {    throw new IllegalArgumentException("That was not a linear, Gaussian SEM simulation.");  }  semIms=((SemSimulation)_simulation).getSemIms();  if (semIms == null) {    throw new NullPointerException("It looks like you have not done a simulation.");  }  semPms=new ArrayList<>();  for (  SemIm semIm : semIms) {    semPms.add(semIm.getSemPm());  }  this.numModels=simulation.getDataModelList().size();  this.modelIndex=0;  this.modelSourceName=simulation.getName();}  }
class C{  public DefaultReflectionPredicate(Pattern omitMethods){  this(omitMethods,new HashSet<String>());}  }
class C{  public void newArray(EditorState editorState,int size,char arrayOpenKey){  MathSequence currentField=editorState.getCurrentField();  int currentOffset=editorState.getCurrentOffset();  MetaArray meta=metaModel.getArray(arrayOpenKey);  MathArray array=new MathArray(meta,size);  currentField.addArgument(currentOffset,array);  MathSequence field=new MathSequence();  array.setArgument(0,field);  for (int i=1; i < size; i++) {    array.setArgument(i,new MathSequence());  }  editorState.setCurrentField(field);  editorState.setCurrentOffset(0);}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:18.220 -0500",hash_original_method="C14F76EB0E4E278210A5D612100CE915",hash_generated_method="DEA1A3687B9F4F4915E561F3434FE6CD") public boolean ackSeen(){  return this.isAckSeen;}  }
class C{  public static void show(Context context){  show(context,null,false);}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length == 5) {    run(args[0],args[1],args[2],args[3],args[4]);  } else   if (args.length == 3) {    run(args[0],args[1],args[2],args[0],args[1]);  } else {    throw new IllegalArgumentException("Wrong number of input arguments.");  }}  }
class C{  public TopicExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void initComponent(){  m_tableModel=new InteractiveTableModel(m_columnNames);  m_tableModel.addTableModelListener(new InteractiveTablePanel.InteractiveTableModelListener());  m_table=new JTable();  m_table.setModel(m_tableModel);  m_table.setSurrendersFocusOnKeystroke(true);  if (!m_tableModel.hasEmptyRow()) {    m_tableModel.addEmptyRow();  }  InteractiveTableModel model=(InteractiveTableModel)m_table.getModel();  m_scroller=new javax.swing.JScrollPane(m_table);  m_table.setPreferredScrollableViewportSize(new java.awt.Dimension(500,80));  TableColumn hidden=m_table.getColumnModel().getColumn(model.m_hidden_index);  hidden.setMinWidth(2);  hidden.setPreferredWidth(2);  hidden.setMaxWidth(2);  hidden.setCellRenderer(new InteractiveRenderer(model.m_hidden_index));  setLayout(new BorderLayout());  add(m_scroller,BorderLayout.CENTER);}  }
class C{  private boolean isPdfFileFromContentProviderWithoutExtension(String localPath,String mimeType){  return localPath.startsWith(UriUtils.URI_CONTENT_SCHEME) && mimeType.equals(MIME_TYPE_PDF) && !localPath.endsWith(FILE_EXTENSION_PDF);}  }
class C{  public CreatureProtectionArea(final int width,final int height){  this(width,height,true);}  }
class C{  @Override public String toString(){  if (projectName != null) {    return projectName;  }  return UNNAMED_PROJECT;}  }
class C{  public boolean isWritable(){  return !persist || dirLock != null;}  }
class C{  public void upgradeCatalog(URI tenantId){  UriBuilder uriBuilder=client.uriBuilder(PathConstants.CATALOG_UPGRADE_URI);  if (tenantId != null) {    uriBuilder=uriBuilder.queryParam(SearchConstants.TENANT_ID_PARAM,tenantId);  }  client.postURI(String.class,uriBuilder.build());}  }
class C{  public void addResolvingSwc(String scriptName,String swcLocation){  if (scriptName == null || swcLocation == null)   throw new NullPointerException();  Set<String> swcSet=scriptToSwcs.get(scriptName);  if (swcSet == null) {    swcSet=new HashSet<String>();    scriptToSwcs.put(scriptName,swcSet);  }  swcSet.add(swcLocation);}  }
class C{  public SolrQuery addSort(String field,ORDER order){  return addSort(new SortClause(field,order));}  }
class C{  public Object clone(){  try {    ArrayList v=(ArrayList)super.clone();    v.elementData=new Object[size];    System.arraycopy(elementData,0,v.elementData,0,size);    v.modCount=0;    return v;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  private void parseCreateColumn(TableBuilderKraken factory,String name){  Token token;  if ((token=scanToken()) != Token.IDENTIFIER) {    throw error(L.l("expected column type at {0}",token));  }  String type=_lexeme;  int length=-1;  int scale=-1;  if (type.equalsIgnoreCase("double")) {    if ((token=peekToken()) == Token.IDENTIFIER) {      scanToken();      if (_lexeme.equalsIgnoreCase("precision")) {      } else       throw error(L.l("unexpected double type at {0}",_lexeme));    }  }  if ((token=peekToken()) == Token.LPAREN) {    scanToken();    if ((token=scanToken()) != Token.INTEGER) {      throw error("expected column width at '{0}'",token);    }    length=Integer.parseInt(_lexeme);    if ((token=scanToken()) == Token.COMMA) {      if ((token=scanToken()) != Token.INTEGER) {        throw error("expected column scale at '{0}'",token);      }      scale=Integer.parseInt(_lexeme);      token=scanToken();    }    if (token != Token.RPAREN) {      throw error("expected ')' at '{0}'",token);    }  }  if (type.equalsIgnoreCase("varchar")) {    factory.addVarchar(name,length);  } else   if (type.equalsIgnoreCase("blob")) {    factory.addBlob(name);  } else   if (type.equalsIgnoreCase("string")) {    factory.addString(name);  } else   if (type.equalsIgnoreCase("object")) {    factory.addObject(name);  } else   if (type.equalsIgnoreCase("char")) {    length=Math.max(length,1);    factory.addVarchar(name,length);  } else   if (type.equalsIgnoreCase("varbinary")) {    if (length < 0) {      throw error("VARBINARY needs a defined length");    }    factory.addVarbinary(name,length);  } else   if (type.equalsIgnoreCase("binary") || type.equalsIgnoreCase("bytes")) {    if (length < 0)     throw error(L.l("BINARY needs a defined length"));    factory.addBytes(name,length);  } else   if (type.equalsIgnoreCase("mediumtext")) {    factory.addVarchar(name,256);  } else   if (type.equalsIgnoreCase("longtext")) {    factory.addVarchar(name,512);  } else   if (type.equalsIgnoreCase("bit") || type.equalsIgnoreCase("bool")) {    factory.addBool(name);  } else   if (type.equalsIgnoreCase("tinyint") || type.equalsIgnoreCase("bit") || type.equalsIgnoreCase("int8")) {    factory.addInt8(name);  } else   if (type.equalsIgnoreCase("smallint") || type.equalsIgnoreCase("int16")) {    factory.addInt16(name);  } else   if (type.equalsIgnoreCase("integer") || type.equalsIgnoreCase("int") || type.equalsIgnoreCase("mediumint")|| type.equalsIgnoreCase("int32")) {    factory.addInt32(name);  } else   if (type.equalsIgnoreCase("bigint") || type.equalsIgnoreCase("long") || type.equalsIgnoreCase("int64")) {    factory.addInt64(name);  } else   if (type.equalsIgnoreCase("double") || type.equalsIgnoreCase("float64") || type.equalsIgnoreCase("real")) {    factory.addDouble(name);  } else   if (type.equalsIgnoreCase("float") || type.equalsIgnoreCase("float32")) {    factory.addFloat(name);  } else   if (type.equalsIgnoreCase("datetime") || type.equalsIgnoreCase("timestamp")) {    factory.addDateTime(name);  } else   if (type.equalsIgnoreCase("text") || type.equalsIgnoreCase("clob")) {    factory.addVarchar(name,255);  } else   if (type.equalsIgnoreCase("identity")) {    factory.addIdentity(name);  } else   throw error(L.l("Unknown type {0}",type));  while (true) {    token=scanToken();switch (token) {case RPAREN:case COMMA:      _token=token;    return;case PRIMARY:  token=scanToken();if (token != Token.KEY) throw error("expected key at {0}",token);factory.setPrimaryKey(name);break;case NULL:break;case NOT:if ((token=scanToken()) == Token.NULL) factory.setNotNull(name); else throw error("unexpected token '{0}'",token);break;default :throw error("unexpected token '{0}'",token);}}}  }
class C{  public boolean onEnterKey(){  if (!modeless && renderer != null && !renderer.isEditing()) {    renderer.editCurrentRow();    renderer.setFocusToEditor();    return true;  }  return false;}  }
class C{  public RegExpStageActivityTypes(final Collection<String> typesRegExps){  this.typesRegExps.addAll(typesRegExps);}  }
class C{  public DirectColorModel(int bits,int rmask,int gmask,int bmask){  this(bits,rmask,gmask,bmask,0);}  }
class C{  public AbOuterScrollView(Context context,AttributeSet attrs){  super(context,attrs);  mGestureDetector=new GestureDetector(new YScrollDetector());  setFadingEdgeLength(0);}  }
class C{  public static void flushCaches(){synchronized (declaredMethodCache) {    ThreadGroupContext.getContext().clearBeanInfoCache();    declaredMethodCache.clear();  }}  }
class C{  public ClientMessage sendMessage(String body,Map<String,Object> properties){  ClientMessage message=createMessage(body);  sendMessage(message);  return message;}  }
class C{  @DELETE @Consumes(MediaType.APPLICATION_JSON) public Response unregisterApplication(@Context final HttpServletRequest httpServletRequest,@QueryParam("bindingId") String bindingId,@QueryParam("serviceId") String serviceId,@QueryParam("appId") String appId){  try {    if (!TestMode.errorExpected)     return Response.status(Status.NO_CONTENT).build(); else     throw new Exception("Test exception");  } catch (  Exception e) {    return Response.status(Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).build();  }}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<?>,V>ImmutableRangeMap<K,V> of(){  return (ImmutableRangeMap<K,V>)EMPTY;}  }
class C{  public StringBody(final String text) throws UnsupportedEncodingException {  this(text,"text/plain",null);}  }
class C{  public int nbPeople(){  return getTreeModel().getAllResouces().size();}  }
class C{  public String addSymbol(char[] buffer,int offset,int len,int hash){  final int bucket=hash & indexMask;  String sym=symbols[bucket];  boolean match=true;  if (sym != null) {    if (sym.length() == len) {      char[] characters=symbols_char[bucket];      for (int i=0; i < len; i++) {        if (buffer[offset + i] != characters[i]) {          match=false;          break;        }      }      if (match) {        return sym;      }    } else {      match=false;    }  }{    int entryIndex=0;    for (Entry entry=buckets[bucket]; entry != null; entry=entry.next) {      char[] characters=entry.characters;      if (len == characters.length && hash == entry.hashCode) {        boolean eq=true;        for (int i=0; i < len; i++) {          if (buffer[offset + i] != characters[i]) {            eq=false;            break;          }        }        if (!eq) {          entryIndex++;          continue;        }        return entry.symbol;      }    }    if (entryIndex >= MAX_BUCKET_LENTH) {      return new String(buffer,offset,len);    }  }  if (size >= MAX_SIZE) {    return new String(buffer,offset,len);  }  Entry entry=new Entry(buffer,offset,len,hash,buckets[bucket]);  buckets[bucket]=entry;  if (match) {    symbols[bucket]=entry.symbol;    symbols_char[bucket]=entry.characters;  }  size++;  return entry.symbol;}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true; else   return false;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameter(s):"));}  }
class C{  public boolean isConnected(short nodeId){  NodeConnection nc=connections.get(nodeId);  return (nc != null && nc.state == NodeConnectionState.CONNECTED);}  }
class C{  private long doCreate(String roleID,BigDecimal pricePerUser) throws Exception {  Organization organization=createOrganization();  TechnicalProduct technicalProduct=createTechnicalProduct(organization);  Product product=createProduct(organization,technicalProduct);  PriceModel priceModel=createPriceModel(product);  RoleDefinition roleDefinition=createRoleDefinition(roleID,technicalProduct);  final long key=createPricedRole(priceModel,roleDefinition,pricePerUser);  return key;}  }
class C{  private void validateQuery(String query){  if (query == null) {    return;  }  int UNSIGNED_SHORT_MAX=0xffff;  if (query.length() % 2 == 1) {    throw new IllegalArgumentException("query size is invalid. query=" + query);  }  if (query.length() / 2 > UNSIGNED_SHORT_MAX) {    throw new IllegalArgumentException("query size is too large. len=" + query.length());  }  query=query.toLowerCase(Locale.ROOT);  char[] chars=query.toCharArray();  for (  char c : chars) {    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f'))) {      throw new IllegalArgumentException("query should be hex string. query=" + query);    }  }}  }
class C{  protected void addNewDTMID(int nodeIndex){  try {    if (m_mgr == null)     throw new ClassCastException();    DTMManagerDefault mgrD=(DTMManagerDefault)m_mgr;    int id=mgrD.getFirstFreeDTMID();    mgrD.addDTM(this,id,nodeIndex);    m_dtmIdent.addElement(id << DTMManager.IDENT_DTM_NODE_BITS);  } catch (  ClassCastException e) {    error(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_DTMIDS_AVAIL,null));  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:04.549 -0500",hash_original_method="451F884D80CF979FA811D85381B93BA8",hash_generated_method="451F884D80CF979FA811D85381B93BA8") StringBlock(int obj,boolean useSparse){  mNative=obj;  mUseSparse=useSparse;  mOwnsNative=false;  if (localLOGV)   Log.v(TAG,"Created string block " + this + ": "+ nativeGetSize(mNative));}  }
class C{  public static <T>LazySortedSetX<T> fromIterable(Iterable<T> it){  return fromIterable(SortedSetX.<T>defaultCollector(),it);}  }
class C{  public void removeTrack(int playlistIndex){  checkState();  SoundCloudTrack currentTrack=mPlayerPlaylist.getCurrentTrack();  SoundCloudTrack removedTrack=mPlayerPlaylist.remove(playlistIndex);  if (removedTrack == null) {    return;  }  if (mPlayerPlaylist.isEmpty()) {    PlaybackService.stop(getContext(),mClientKey);  } else   if (currentTrack != null && currentTrack.equals(removedTrack) && mState == STATE_PLAYING) {    play(mPlayerPlaylist.getCurrentTrackIndex());  }  for (  CheerleaderPlaylistListener listener : mCheerleaderPlaylistListeners) {    listener.onTrackRemoved(removedTrack,mPlayerPlaylist.isEmpty());  }}  }
class C{  public static void savePhotoToSDCard(Bitmap photoBitmap,String path,String photoName){  if (checkSDCardAvailable()) {    File dir=new File(path);    if (!dir.exists()) {      dir.mkdirs();    }    File photoFile=new File(path,photoName);    FileOutputStream fileOutputStream=null;    try {      fileOutputStream=new FileOutputStream(photoFile);      if (photoBitmap != null) {        if (photoBitmap.compress(Bitmap.CompressFormat.PNG,100,fileOutputStream)) {          fileOutputStream.flush();        }      }    } catch (    FileNotFoundException e) {      photoFile.delete();      e.printStackTrace();    }catch (    IOException e) {      photoFile.delete();      e.printStackTrace();    } finally {      try {        fileOutputStream.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  }}  }
class C{  private void checkNodeEltName(String namespaceURI,String localName,String qName) throws RDFParseException {  if (RDF.NAMESPACE.equals(namespaceURI)) {    if (localName.equals("Description") || localName.equals("Seq") || localName.equals("Bag")|| localName.equals("Alt")|| localName.equals("Statement")|| localName.equals("Property")|| localName.equals("List")|| localName.equals("subject")|| localName.equals("predicate")|| localName.equals("object")|| localName.equals("type")|| localName.equals("value")|| localName.equals("first")|| localName.equals("rest")|| localName.equals("nil")|| localName.startsWith("_")) {    } else     if (localName.equals("li") || localName.equals("RDF") || localName.equals("ID")|| localName.equals("about")|| localName.equals("parseType")|| localName.equals("resource")|| localName.equals("nodeID")|| localName.equals("datatype")) {      reportError("<" + qName + "> not allowed as node element",XMLParserSettings.FAIL_ON_NON_STANDARD_ATTRIBUTES);    } else     if (localName.equals("bagID") || localName.equals("aboutEach") || localName.equals("aboutEachPrefix")) {      reportError(qName + " is no longer a valid RDF name",XMLParserSettings.FAIL_ON_NON_STANDARD_ATTRIBUTES);    } else {      reportWarning("unknown rdf element <" + qName + ">");    }  }}  }
class C{  public static ColumnFamily removeDeletedColumnsOnly(ColumnFamily cf,int gcBefore,SecondaryIndexManager.Updater indexer){  BatchRemoveIterator<Cell> iter=cf.batchRemoveIterator();  DeletionInfo.InOrderTester tester=cf.inOrderDeletionTester();  boolean hasDroppedColumns=!cf.metadata.getDroppedColumns().isEmpty();  while (iter.hasNext()) {    Cell c=iter.next();    if (c.getLocalDeletionTime() < gcBefore || tester.isDeleted(c) || (hasDroppedColumns && isDroppedColumn(c,cf.metadata()))) {      iter.remove();      indexer.remove(c);    }  }  iter.commit();  return cf;}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.add(new Option("\tNode splitting method to use.\n" + "\t(default: weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide)","S",1,"-S <classname and options>"));  newVector.addElement(new Option("\tSet minimal width of a box\n" + "\t(default: 1.0E-2).","W",0,"-W <value>"));  newVector.addElement(new Option("\tMaximal number of instances in a leaf\n" + "\t(default: 40).","L",0,"-L"));  newVector.addElement(new Option("\tNormalizing will be done\n" + "\t(Select dimension for split, with normalising to universe).","N",0,"-N"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public Vector3d mulDirection(Matrix4x3fc mat){  return mulDirection(mat,this);}  }
class C{  public HashMap<String,String> hashMap(){  HashMap<String,String> retMap=new HashMap<String,String>();  for (  String key : properties.keySet()) {    Object value=properties.get(key);    if (value != null) {      retMap.put(key,value.toString());    } else {      retMap.put(key,null);    }  }  return retMap;}  }
class C{  ECHOBigCore(){}  }
class C{  public void refresh(){  gridTab.dataRefresh();}  }
class C{  public void println(byte x){  out.println(x);}  }
class C{  public static void toggleBreakpoint(final BackEndDebuggerProvider debuggerProvider,final INaviCodeNode codeNode,final int row){  Preconditions.checkNotNull(debuggerProvider,"IE01719: Debugger provider argument can not be null");  Preconditions.checkNotNull(codeNode,"IE01720: Code node argument can not be null");  final INaviInstruction instruction=CCodeNodeHelpers.lineToInstruction(codeNode,row);  if (instruction == null) {    return;  }  final IDebugger debugger=getDebugger(debuggerProvider,instruction);  if (debugger == null) {    return;  }  toggleBreakpoint(debugger.getBreakpointManager(),instruction.getModule(),new UnrelocatedAddress(instruction.getAddress()));}  }
class C{  private static void lay16Bits(byte[] array,int index,int value){  array[index]=(byte)(value);  array[index + 1]=(byte)(value >> 8);}  }
class C{  public RoleBuilder withColor(Color color){  this.color=color;  return this;}  }
class C{  public void skippedEntity(String name) throws SAXException {}  }
class C{  public boolean hasNext(){  advance();  return tok.getType() != EOF;}  }
class C{  public Builder withSortByLiveness(){  builder.sortBy(ORDER_BY_LIVENESS);  return this;}  }
class C{  public boolean isDistinct(){  return isDistinct;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  OutputStream stream=getStream();  if (stream == null) {    return;  }synchronized (stream) {    stream.write(buf,offset,length);    if (isEnd) {      stream.flush();    }  }}  }
class C{  public static String encodeAsString(String plaintext) throws IOException, MessagingException {  return encode(plaintext).toString();}  }
class C{  @SafeVarargs public static <Type>ConjunctiveValidator<Type> create(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Validator<Type>... validators){  return new ConjunctiveValidator<>(context,resourceId,validators);}  }
class C{  public ArgumentRequest(String argument){  BugLog.getInstance().assertNotNull(argument);  this.argument=argument;}  }
class C{  static void checkInternalName(final String name,final int start,final int end,final String msg){  int max=end == -1 ? name.length() : end;  try {    int begin=start;    int slash;    do {      slash=name.indexOf('/',begin + 1);      if (slash == -1 || slash > max) {        slash=max;      }      checkIdentifier(name,begin,slash,null);      begin=slash + 1;    } while (slash != max);  } catch (  IllegalArgumentException unused) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a fully qualified class name in internal form): "+ name);  }}  }
class C{  public Builder bySecond(Collection<Integer> seconds){  bySecond.addAll(seconds);  return this;}  }
class C{  public void configure(){  Mx1CommandStation cs=new Mx1CommandStation();  this.getSystemConnectionMemo().setCommandStation(cs);  Mx1Packetizer packets=new Mx1Packetizer(cs,Mx1Packetizer.BINARY);  packets.connectPort(this);  this.getSystemConnectionMemo().setMx1TrafficController(packets);  this.getSystemConnectionMemo().configureManagers();  packets.startThreads();}  }
class C{  public static GeoTimeSerie merge(GeoTimeSerie base,GeoTimeSerie gts){  GeoTimeSerie.TYPE baseType=base.getType();  GeoTimeSerie.TYPE gtsType=gts.getType();  if (TYPE.UNDEFINED.equals(baseType) || baseType.equals(gtsType)) {    if (0 == gts.values) {      return base;    }    if (null == base.ticks) {      base.ticks=Arrays.copyOf(gts.ticks,gts.values);    } else {      base.ticks=Arrays.copyOf(base.ticks,base.values + gts.values);      System.arraycopy(gts.ticks,0,base.ticks,base.values,gts.values);    }    if (null == base.locations) {      if (null != gts.locations) {        base.locations=new long[base.ticks.length];        Arrays.fill(base.locations,GeoTimeSerie.NO_LOCATION);        System.arraycopy(gts.locations,0,base.locations,base.values,gts.values);      }    } else {      base.locations=Arrays.copyOf(base.locations,base.values + gts.values);      if (null != gts.locations) {        System.arraycopy(gts.locations,0,base.locations,base.values,gts.values);      } else {        Arrays.fill(base.locations,base.values,base.values + gts.values,GeoTimeSerie.NO_LOCATION);      }    }    if (null == base.elevations) {      if (null != gts.elevations) {        base.elevations=new long[base.ticks.length];        Arrays.fill(base.elevations,GeoTimeSerie.NO_ELEVATION);        System.arraycopy(gts.elevations,0,base.elevations,base.values,gts.values);      }    } else {      base.elevations=Arrays.copyOf(base.elevations,base.values + gts.values);      if (null != gts.elevations) {        System.arraycopy(gts.elevations,0,base.elevations,base.values,gts.values);      } else {        Arrays.fill(base.elevations,base.values,base.values + gts.values,GeoTimeSerie.NO_ELEVATION);      }    }switch (gtsType) {case LONG:      base.type=TYPE.LONG;    if (null == base.longValues) {      base.longValues=Arrays.copyOf(gts.longValues,gts.values);    } else {      base.longValues=Arrays.copyOf(base.longValues,base.values + gts.values);      System.arraycopy(gts.longValues,0,base.longValues,base.values,gts.values);    }  break;case DOUBLE:base.type=TYPE.DOUBLE;if (null == base.doubleValues) {base.doubleValues=Arrays.copyOf(gts.doubleValues,gts.values);} else {base.doubleValues=Arrays.copyOf(base.doubleValues,base.values + gts.values);System.arraycopy(gts.doubleValues,0,base.doubleValues,base.values,gts.values);}break;case STRING:base.type=TYPE.STRING;if (null == base.stringValues) {base.stringValues=Arrays.copyOf(gts.stringValues,gts.values);} else {base.stringValues=Arrays.copyOf(base.stringValues,base.values + gts.values);System.arraycopy(gts.stringValues,0,base.stringValues,base.values,gts.values);}break;case BOOLEAN:base.type=TYPE.BOOLEAN;if (null == base.booleanValues) {base.booleanValues=(BitSet)gts.booleanValues.clone();} else {for (int i=0; i < gts.values; i++) {base.booleanValues.set(base.values + i,gts.booleanValues.get(i));}}break;}base.values=base.values + gts.values;}base.sorted=false;return base;}  }
class C{  public void endCDATA() throws org.xml.sax.SAXException {  m_inCData=false;}  }
class C{  @SuppressLint("InflateParams") @Override public Dialog onCreateDialog(Bundle savedInstanceState){  View view=LayoutInflater.from(getActivity()).inflate(R.layout.dialog_weather,null,false);  this.initWidget(view);  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());  builder.setView(view);  return builder.create();}  }
class C{  public Path toPath(float width,float height,int numSample){  final float[] pts=GestureUtils.temporalSampling(this,numSample);  final RectF rect=boundingBox;  GestureUtils.translate(pts,-rect.left,-rect.top);  float sx=width / rect.width();  float sy=height / rect.height();  float scale=sx > sy ? sy : sx;  GestureUtils.scale(pts,scale,scale);  float mX=0;  float mY=0;  Path path=null;  final int count=pts.length;  for (int i=0; i < count; i+=2) {    float x=pts[i];    float y=pts[i + 1];    if (path == null) {      path=new Path();      path.moveTo(x,y);      mX=x;      mY=y;    } else {      float dx=Math.abs(x - mX);      float dy=Math.abs(y - mY);      if (dx >= TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) {        path.quadTo(mX,mY,(x + mX) / 2,(y + mY) / 2);        mX=x;        mY=y;      }    }  }  return path;}  }
class C{  static UndoLogRecord loadFromBuffer(Data buff,UndoLog log){  UndoLogRecord rec=new UndoLogRecord(null,(short)0,null);  int pos=buff.length();  int len=buff.readInt() * Constants.FILE_BLOCK_SIZE;  rec.load(buff,log);  buff.setPos(pos + len);  return rec;}  }
class C{  public static String arrayToHexString(byte[] array,int offset,int limit){  String retVal;  if (array != null) {    StringBuffer hexString=new StringBuffer(array.length);    int hexVal;    char hexChar;    int length=Math.min(limit,array.length);    for (int i=offset; i < length; i++) {      hexVal=(array[i] & 0xF0) >> 4;      hexChar=(char)((hexVal > 9) ? ('A' + (hexVal - 10)) : ('0' + hexVal));      hexString.append(hexChar);      hexVal=array[i] & 0x0F;      hexChar=(char)((hexVal > 9) ? ('A' + (hexVal - 10)) : ('0' + hexVal));      hexString.append(hexChar);    }    retVal=hexString.toString();  } else {    retVal="<null>";  }  return retVal;}  }
class C{  public IndicatorCollector(Indicator indicator,EpsilonBoxDominanceArchive archive,Algorithm algorithm){  super();  this.indicator=indicator;  this.archive=archive;  this.algorithm=algorithm;}  }
class C{  public State advanceToSuccessor(Edge edge,MatchResult matchResult){  if (matchResult != null && !matchResult.getPatternElement().acceptBranch(edge,getLastMatchedInstruction())) {    return null;  }  return new State(this,edge.getTarget(),edge.getTarget().instructionIterator(),patternElement,matchCount,currentMatch,bindingSet,canFork);}  }
class C{  private List<Object> executeGroupBy(ProfileMeasurement m){  List<Object> groups=new ArrayList<>();  if (!isEmpty(m.getGroupBy())) {    try {      BeanMap measureAsMap=new BeanMap(m);      for (      String expr : m.getGroupBy()) {        Object result=executor.execute(expr,measureAsMap,Object.class);        groups.add(result);      }    } catch (    Throwable e) {      String msg=format("Bad 'groupBy' expression: %s, profile=%s, entity=%s",e.getMessage(),m.getProfileName(),m.getEntity());      throw new ParseException(msg,e);    }  }  return groups;}  }
class C{  private static Element parseRestriction(String name,Element valueNode,Element restrictionNode,Element bodyNode,Element bindingNode,Hashtable<String,String> problemList,Hashtable<String,String> problemListItems,Hashtable<String,Element> repeatControls,Element modelNode){  String type=restrictionNode.getAttributeValue(null,ATTRIBUTE_BASE);  type=getPrefixedDataType(type);  bindingNode.setAttribute(null,ATTRIBUTE_TYPE,type);  String controlName=CONTROL_SELECT;  String maxOccurs=valueNode.getAttributeValue(null,ATTRIBUTE_MAXOCCURS);  if (maxOccurs != null && maxOccurs.equalsIgnoreCase("1"))   controlName=CONTROL_SELECT1;  if (!hasRestrictions(restrictionNode))   controlName=CONTROL_INPUT;  Element controlNode=bodyNode.createElement(NAMESPACE_XFORMS,null);  controlNode.setName(controlName);  String valueNodeName=NODE_VALUE;  if (controlName.equals(CONTROL_SELECT))   valueNodeName=NODE_XFORMS_VALUE;  if (!controlName.equalsIgnoreCase(CONTROL_INPUT))   controlNode.setAttribute(null,ATTRIBUTE_APPEARANCE,Context.getAdministrationService().getGlobalProperty(XformConstants.GLOBAL_PROP_KEY_SINGLE_SELECT_APPEARANCE));  addRepeatControlNode(name,controlNode,bodyNode,problemList,problemListItems,repeatControls,valueNodeName,modelNode,bindingNode);  Element labelNode=bodyNode.createElement(NAMESPACE_XFORMS,null);  labelNode.setName(NODE_LABEL);  controlNode.addChild(Element.ELEMENT,labelNode);  addRestrictionEnumerations(restrictionNode,controlNode);  return labelNode;}  }
class C{  public void onTiltMore(View view){  if (!checkReady()) {    return;  }  CameraPosition currentCameraPosition=mMap.getCameraPosition();  float currentTilt=currentCameraPosition.tilt;  float newTilt=currentTilt + 10;  newTilt=(newTilt > 90) ? 90 : newTilt;  CameraPosition cameraPosition=new CameraPosition.Builder(currentCameraPosition).tilt(newTilt).build();  changeCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));}  }
class C{  @Override public Generator<IMultiPoint> construct(String[] args){  return new UniformGenerator(Integer.valueOf(args[0]),Double.valueOf(args[1]));}  }
class C{  public void unscheduleUpdate(Object target){  if (target == null)   return;  tHashSelectorEntry entry=hashForUpdates.get(target);  if (entry == null)   return;synchronized (entry.list) {    if (currentEntry == entry.entry) {      currentTargetSalvaged=true;    } else {      entry.list.remove(entry.entry);    }  }  hashForUpdates.remove(target);}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return StoreSysCfgResponse.create(dm,this.getSender(),this.sc);}  }
class C{  public static Class[] convertToTypeArray(Object[] args){  if (args == null)   return null;  int s=args.length;  Class[] ans=new Class[s];  for (int i=0; i < s; i++) {    Object o=args[i];    ans[i]=getClassWithNullAndWrapper(o);  }  return ans;}  }
class C{  @Override public Upload upload(PutObjectRequest putObjectRequest,TransferManager transferManager) throws AmazonServiceException, AmazonClientException {  LOGGER.debug("upload(): putObjectRequest.getBucketName() = " + putObjectRequest.getBucketName() + ", putObjectRequest.getKey() = "+ putObjectRequest.getKey());  putObject(putObjectRequest,(AmazonS3Client)transferManager.getAmazonS3Client());  long contentLength=putObjectRequest.getFile().length();  TransferProgress progress=new TransferProgress();  progress.setTotalBytesToTransfer(contentLength);  progress.updateProgress(contentLength);  UploadImpl upload=new UploadImpl(null,progress,null,null);  upload.setState(TransferState.Completed);  return upload;}  }
class C{  public Message(Address sender,Address recipient,String type,Object object) throws IOException {  this(sender,recipient,type);  if (object == null)   return;  ByteArrayOutputStream bos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(bos);  oos.writeObject(object);  oos.flush();  content=bos.toByteArray();}  }
class C{  public void addFileset(final FileSet set){  filesets.add(set);}  }
class C{  public CouldntLoadDataException(final Exception exception){  super(exception);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.VARIABLE_DEFINITION__INITIAL_VALUE:    setInitialValue((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  public QuestCheckingPortal(final String questslot,final String state,final String rejectMessage){  super(rejectMessage);  this.questslot=questslot;  this.requiredState=state;}  }
class C{  @Override public void assertOperationSupported(Component target,int numBuffers,BufferCapabilities caps) throws AWTException {  if (numBuffers < 2 || numBuffers > 4) {    throw new AWTException("Only 2-4 buffers supported");  }  if (caps.getFlipContents() == BufferCapabilities.FlipContents.COPIED && numBuffers != 2) {    throw new AWTException("FlipContents.COPIED is only" + "supported for 2 buffers");  }}  }
class C{  public static void precachingFinished(Context context,boolean tryAgainSoon){  new PrecacheServiceLauncher().precachingFinishedInternal(context,tryAgainSoon);}  }
class C{  public SimpleRegister(int value){  setValue(value);}  }
class C{  public boolean find(){  int nextSearchIndex=last;  if (nextSearchIndex == first)   nextSearchIndex++;  if (nextSearchIndex < from)   nextSearchIndex=from;  if (nextSearchIndex > to) {    for (int i=0; i < groups.length; i++)     groups[i]=-1;    return false;  }  return search(nextSearchIndex);}  }
class C{  public static XPath2FilterContainer04 newInstanceUnion(Document doc,String xpath2filter){  return new XPath2FilterContainer04(doc,xpath2filter,XPath2FilterContainer04._ATT_FILTER_VALUE_UNION);}  }
class C{  @Override public List<MatchResult> find(String str,int maxResults){  str=str.trim();  Matcher matcher=pattern.matcher(str);  List<MatchResult> results=new ArrayList<MatchResult>();  while ((matcher.find())) {    int start=matcher.start();    int end=matcher.end();    if (!StringUtils.isDelimited(str,start,end)) {      continue;    }    MatchResult result=new MatchResult(start,end);    for (    String slot : slots.keySet()) {      String filledValue=matcher.group(slots.get(slot)).trim();      if (!StringUtils.checkForm(filledValue) && permutatePattern()) {        return find(str,maxResults);      }      result.addPair(slot,filledValue);    }    results.add(result);    if (results.size() >= maxResults) {      break;    }  }  return results;}  }
class C{  public final void testMinLengthWithCharSequenceParameter(){  assertNotNull(Validators.minLength("foo",1));}  }
class C{  protected boolean afterDelete(boolean success){  if (success)   updateAchievementGoals();  return success;}  }
class C{  public MyString1 toLowerCase(){  char[] ch=new char[chars.length];  for (int i=0; i < chars.length; i++) {    if (chars[i] >= 'A' && chars[i] <= 'Z')     ch[i]=(char)(chars[i] + 32); else     ch[i]=chars[i];  }  return new MyString1(ch);}  }
class C{  protected void reflectionAppendArrayDetail(final StringBuffer buffer,final String fieldName,final Object array){  buffer.append(arrayStart);  final int length=Array.getLength(array);  for (int i=0; i < length; i++) {    final Object item=Array.get(array,i);    if (i > 0) {      buffer.append(arraySeparator);    }    if (item == null) {      appendNullText(buffer,fieldName);    } else {      appendInternal(buffer,fieldName,item,arrayContentDetail);    }  }  buffer.append(arrayEnd);}  }
class C{  public static int staticNextInt(int n,double p){synchronized (shared) {    return shared.nextInt(n,p);  }}  }
class C{  public CacheLoaderException(){}  }
class C{  public static ClaimsListShard createTestClaimsListShard(DateTime creationTime,ImmutableMap<String,String> labelsToKeys,Key<ClaimsListRevision> revision){  ClaimsListShard claimsList=ClaimsListShard.create(creationTime,labelsToKeys);  claimsList.isShard=true;  claimsList.parent=revision;  return claimsList;}  }
class C{  public void stop(){  log.info("Stopping coordinator stream producer.");  systemProducer.stop();  isStarted=false;}  }
class C{  private UIComponent newInstance(TreeNode n) throws FacesException {  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"newInstance",n.componentType);  }  try {    Class<?> t=((classMap != null) ? classMap.get(n.componentType) : null);    if (t == null) {      t=Util.loadClass(n.componentType,n);      if (t != null && classMap != null) {        classMap.put(n.componentType,t);      } else {        if (!isDevelopmentMode) {          throw new NullPointerException();        }      }    }    assert (t != null);    UIComponent c=(UIComponent)t.newInstance();    c.setId(n.id);    return c;  } catch (  ClassNotFoundException|NullPointerException|InstantiationException|IllegalAccessException e) {    throw new FacesException(e);  }}  }
class C{  public static boolean isWindows95(){  return win95;}  }
class C{  public Presence(Type type){  setType(type);}  }
class C{  @Override public boolean inIncludeSegments(){  for (Segment segment=getSegment(this.segmentStart); segment.getSegmentStart() < this.segmentEnd; segment.inc()) {    if (!segment.inIncludeSegments()) {      return (false);    }  }  return true;}  }
class C{  public void build() throws IOException {  client.post(url + "build");}  }
class C{  public static void startQueryForAll(AsyncQueryHandler handler,int token){  handler.cancelOperation(token);  startQuery(handler,token,null);}  }
class C{  public IntChunks(final int numberChunks,final long length,final int chunkBits){  super(length);  assert chunkBits > 0 && chunkBits <= 30;  mChunkBits=chunkBits;  mChunkSize=1 << mChunkBits;  mChunkMask=mChunkSize - 1;  mArray=new int[numberChunks][];  long soFar=0;  for (int i=0; i < numberChunks && soFar < length; i++) {    mArray[i]=new int[mChunkSize];    soFar+=mChunkSize;  }  mTotalLength=soFar;  if (length > mTotalLength) {    throw new RuntimeException("too few chunks for length=" + length + " chunks="+ numberChunks+ " chunkBits="+ chunkBits);  }  mLength=length;  assert integrity();}  }
class C{  @SuppressWarnings("deprecation") private void cancelRequestAndWorkerOnHost(List<String> targetHosts){  List<String> validTargetHosts=new ArrayList<String>(workers.keySet());  validTargetHosts.retainAll(targetHosts);  logger.info("targetHosts for cancel: Total: {}" + " Valid in current manager with worker threads: {}",targetHosts.size(),validTargetHosts.size());  for (  String targetHost : validTargetHosts) {    ActorRef worker=workers.get(targetHost);    if (worker != null && !worker.isTerminated()) {      worker.tell(OperationWorkerMsgType.CANCEL,getSelf());      logger.info("Submitted CANCEL request on Host {}",targetHost);    } else {      logger.info("Dit NOT Submitted " + "CANCEL request on Host {} as worker on this host is null or already killed",targetHost);    }  }}  }
class C{  public boolean add(Long value){  if (heap.contains(value)) {    return true;  } else   if (heap.size() < sampleSize) {    heap.add(value);    return true;  } else   if (value > heap.element()) {    heap.remove();    heap.add(value);    return true;  } else {    return false;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          flowDir=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData && z2 < z) {              flowDir+=1 << i;            }          }          output.setValue(row,col,flowDir);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public IgniteThread(String gridName,String threadName,Runnable r){  this(gridName,threadName,r,GRP_IDX_UNASSIGNED);}  }
class C{  public static void openGroupChat(Context ctx,String chatId){  Intent intent=new Intent(ctx,GroupTalkView.class);  intent.setAction(OPEN_GROUPCHAT);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.putExtra(GroupTalkView.EXTRA_MODE,GroupChatMode.OPEN);  intent.putExtra(GroupChatIntent.EXTRA_CHAT_ID,chatId);  ctx.startActivity(intent);}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,Color bgcolor,ImageObserver observer){  if (img == null) {    return true;  }  if (dx1 == dx2 || dy1 == dy2 || sx1 == sx2 || sy1 == sy2) {    return true;  }  if (isHiDPIImage(img)) {    return drawHiDPIImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,bgcolor,observer);  }  if (((sx2 - sx1) == (dx2 - dx1)) && ((sy2 - sy1) == (dy2 - dy1))) {    int srcX, srcY, dstX, dstY, width, height;    if (sx2 > sx1) {      width=sx2 - sx1;      srcX=sx1;      dstX=dx1;    } else {      width=sx1 - sx2;      srcX=sx2;      dstX=dx2;    }    if (sy2 > sy1) {      height=sy2 - sy1;      srcY=sy1;      dstY=dy1;    } else {      height=sy1 - sy2;      srcY=sy2;      dstY=dy2;    }    return copyImage(img,dstX,dstY,srcX,srcY,width,height,bgcolor,observer);  }  try {    return imagepipe.scaleImage(this,img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,bgcolor,observer);  } catch (  InvalidPipeException e) {    try {      revalidateAll();      return imagepipe.scaleImage(this,img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,bgcolor,observer);    } catch (    InvalidPipeException e2) {      return false;    }  } finally {    surfaceData.markDirty();  }}  }
class C{  public static int countStops(String str){  int count=0;  for (int i=0; i < str.length(); i++) {    if (str.charAt(i) == '.' || str.charAt(i) == '?' || str.charAt(i) == '!') {      count++;    }  }  return count;}  }
class C{  private void processClass(Element record,boolean isInterface){  String name=record.getAttribute("name");  if (verbose) {    System.out.println("  processing class: " + name);  }  String fullName=record.getAttribute("fullname");  QualifiedNameInfo qualifiedFullName=asDocUtil.decomposeFullClassName(fullName);  if (asDocUtil.hidePackage(qualifiedFullName.getPackageName(),hiddenPackages)) {    return;  }  if (asDocUtil.hideNamespace(record.getAttribute("access"),namespaces)) {    return;  }  AsClass thisClass=classTable.get(fullName);  processCustoms(record,thisClass.getNode(),false,"","","");  if (thisClass.getDecompName().getClassNames().size() > 1) {    thisClass.setInnerClass(true);    String tempFullName=thisClass.getDecompName().getFullClassName();    String classScopName=tempFullName.substring(0,tempFullName.indexOf("/"));    AsClass outerClass=classTable.get(classScopName);    if (outerClass != null) {      if (outerClass.getInnerClassCount() == 0) {        ArrayList<AsClass> innerClasses=outerClass.getInnerClasses();        if (innerClasses == null) {          innerClasses=new ArrayList<AsClass>();        }        innerClasses.add(thisClass);      }    } else {      if (verbose) {        System.out.println("Didn't find outer class for " + thisClass.getDecompName().getFullClassName());      }    }  }  if (verbose) {    System.out.println("  done processing class: ");  }}  }
class C{  protected boolean beforeDelete(){  if (isPosted()) {    MPeriod.testPeriodOpen(getCtx(),getDateTrx(),MDocType.DOCBASETYPE_MatchInvoice,getAD_Org_ID());    setPosted(false);    MFactAcct.deleteEx(Table_ID,get_ID(),get_TrxName());  }  return true;}  }
class C{  private void uninstallWindowListeners(JRootPane root){  if (window != null) {    window.removeMouseListener(mouseInputListener);    window.removeMouseMotionListener(mouseInputListener);  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x3EABA285,version=150) public int sceHttpAddExtraHeader(int requestId,PspString name,PspString value,int unknown1){  HttpRequest httpRequest=getHttpRequest(requestId);  httpRequest.addHeader(name.getString(),value.getString());  return 0;}  }
class C{  public List<String> hmget(final String key,final String... fields){  checkIsInMulti();  client.hmget(key,fields);  return client.getMultiBulkReply();}  }
class C{  protected void renderPoints(Graphics g){  Paint pointPaint=getLabelPaint();  for (Iterator<OMGraphic> it=points.iterator(); it.hasNext(); ) {    OMGraphic point=(OMPoint)it.next();    point.setLinePaint(pointPaint);    point.setFillPaint(pointPaint);    point.render(g);  }}  }
class C{  public synchronized void addSmap(String smap,String stratumName){  embedded.add("*O " + stratumName + "\n"+ smap+ "*C "+ stratumName+ "\n");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void childrenAdded(BeanContextMembershipEvent bcme){  if (!isolated || bcme.getBeanContext().equals(getBeanContext())) {    findAndInit(bcme.iterator());  }}  }
class C{  @DSSource({DSSourceKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:49.619 -0500",hash_original_method="025100544259F7D0606564E546A2F5E4",hash_generated_method="2341EDD86EA5813174DCE00E483983B5") public static SmsMessage createFromEfRecord(int index,byte[] data){  SmsMessageBase wrappedMessage;  int activePhone=TelephonyManager.getDefault().getCurrentPhoneType();  if (PHONE_TYPE_CDMA == activePhone) {    wrappedMessage=com.android.internal.telephony.cdma.SmsMessage.createFromEfRecord(index,data);  } else {    wrappedMessage=com.android.internal.telephony.gsm.SmsMessage.createFromEfRecord(index,data);  }  return wrappedMessage != null ? new SmsMessage(wrappedMessage) : null;}  }
class C{  public static Typeface androidNationBold(Context context){  return FontSourceProcessor.process(R.raw.androidnation_b,context);}  }
class C{  public static FileEncodedImage create(String fileName,int width,int height,boolean keep){  return new FileEncodedImage(fileName,width,height,keep);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:41.580 -0500",hash_original_method="0BBEE324D353623AAF036FC109969157",hash_generated_method="5CAB1DD456441AB86684A0413EFE130B") public void slashSlashComments(boolean flag){  slashSlashComments=flag;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:55.594 -0500",hash_original_method="252146C166F3942BC369E08F0120D87D",hash_generated_method="252146C166F3942BC369E08F0120D87D") CdmaConnection(Context context,DriverCall dc,CdmaCallTracker ct,int index){  createWakeLock(context);  acquireWakeLock();  owner=ct;  h=new MyHandler(owner.getLooper());  address=dc.number;  isIncoming=dc.isMT;  createTime=System.currentTimeMillis();  cnapName=dc.name;  cnapNamePresentation=dc.namePresentation;  numberPresentation=dc.numberPresentation;  this.index=index;  parent=parentFromDCState(dc.state);  parent.attach(this,dc);}  }
class C{  public void add(Coordinate coord,boolean allowRepeated){  if (!allowRepeated) {    if (size() >= 1) {      Coordinate last=(Coordinate)get(size() - 1);      if (last.equals2D(coord))       return;    }  }  super.add(coord);}  }
class C{  private void checkLastLocation(){  mLocationReq=new LocationRequest();  mLocationReq.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);  mLocationReq.setInterval(1000);  mLocationReq.setFastestInterval(5000);  mLocationReq.setNumUpdates(MAX_UPDATE_TRIES);  mLastLocation=LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);  if (mLastLocation == null) {    checkSettings();    return;  }  int hours=getLocationAgeHours(mLastLocation);  Log.d(TAG,mLastLocation + "\nHours since update: " + hours);  if (hours > MIN_AGE_IN_HOURS) {    setLocationListener();    return;  }  getNewPlaces();}  }
class C{  private void addDataFile(File f,String filename) throws InvalidFilenameException {  Source existingSource=resource.getSource(filename);  boolean replaced=existingSource != null;  try {    source=sourceManager.add(resource,f,filename);    resource.setSourcesModified(new Date());    saveResource();    id=source.getName();    if (replaced) {      addActionMessage(getText("manage.source.replaced.existing",new String[]{source.getName()}));      alertColumnNumberChange(resource.hasMappedSource(existingSource),source.getColumns(),existingSource.getColumns());    } else {      addActionMessage(getText("manage.source.added.new",new String[]{source.getName()}));    }  } catch (  ImportException e) {    LOG.error("Cannot add source " + filename + ": "+ e.getMessage(),e);    addActionError(getText("manage.source.cannot.add",new String[]{filename,e.getMessage()}));  }catch (  InvalidFilenameException e) {    removeSessionFile();    throw e;  }}  }
class C{  public static PluginInternalPreferences fromJson(final String json){  PluginInternalPreferences config=new PluginInternalPreferences();  try {    JsonNode jsonNode=new ObjectMapper().readTree(json);    config.setAppBuildVersion(jsonNode.get(APPLICATION_BUILD_VERSION).asInt());    config.setWwwFolderInstalled(jsonNode.get(WWW_FOLDER_INSTALLED_FLAG).asBoolean());    if (jsonNode.has(CURRENT_RELEASE_VERSION_NAME)) {      config.setCurrentReleaseVersionName(jsonNode.get(CURRENT_RELEASE_VERSION_NAME).asText());    }    if (jsonNode.has(PREVIOUS_RELEASE_VERSION_NAME)) {      config.setPreviousReleaseVersionName(jsonNode.get(PREVIOUS_RELEASE_VERSION_NAME).asText());    }    if (jsonNode.has(READY_FOR_INSTALLATION_RELEASE_VERSION_NAME)) {      config.setReadyForInstallationReleaseVersionName(jsonNode.get(READY_FOR_INSTALLATION_RELEASE_VERSION_NAME).asText());    }  } catch (  IOException e) {    e.printStackTrace();    config=null;  }  return config;}  }
class C{  public VideoPanel(){  initComponents();  Graphics2D g2d=(Graphics2D)noConnection.getGraphics();  Font f=g2d.getFont().deriveFont(24.0f);  g2d.setFont(f);  g2d.drawString("No video connection",40,110);  image.set(noConnection);}  }
class C{  private void cleanupCompletedTags() throws Exception {  boolean modified=false;  Set<String> manualBackups=this.cli.getClusterBackupTags(true);  manualBackups.removeAll(ScheduledBackupTag.pickScheduledBackupTags(manualBackups));  for (  String tag : new ArrayList<>(this.cfg.uploadedBackups)) {    if (!this.cfg.retainedBackups.contains(tag) && !manualBackups.contains(tag)) {      this.cfg.uploadedBackups.remove(tag);      modified=true;    }  }  if (modified) {    this.cfg.persist();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_noderemovechild.class,args);}  }
class C{  public void testUserLoaded_hidesSyncFailedDialog(){  mController.init();  JsonUser user=new JsonUser("idA","nameA");  mFakeEventBus.post(new KnownUsersLoadedEvent(ImmutableSet.of(user)));  verify(mMockUi).showSyncFailedDialog(false);}  }
class C{  public static final CButton createRefreshButton(boolean withText){  if (withText)   return createRefreshButton(Msg.getMsg(Env.getCtx(),A_REFRESH));  return createRefreshButton("");}  }
class C{  public Stream(){  super();}  }
class C{  public boolean isWorkFlow(){  return X_AD_Menu.ACTION_WorkFlow.equals(m_imageIndicator);}  }
class C{  public NameBuilder(){  separator=" ";}  }
class C{  @Override public ResultSet executeQuery(String sql) throws SQLException {  try {    debugCodeCall("executeQuery",sql);    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Inline @Entrypoint public static void longFieldWrite(Object ref,long value,Offset offset,int locationMetadata){  if (NEEDS_LONG_GC_WRITE_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    Selected.Mutator.get().longWrite(src,src.toAddress().plus(offset),value,offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.151 -0500",hash_original_method="BC53579CE1693F911190DD8E21DD944D",hash_generated_method="C77C28BAB6A5AD0C9182A3450A1404EA") public static Short valueOf(String string) throws NumberFormatException {  return valueOf(parseShort(string));}  }
class C{  private int computeHammingDistance(BloomFilter<E> filter){  assert bitSetSize == filter.size() : "Different size bitsets in computeHammingDistance: " + bitSetSize + " and "+ filter.size();  return this.bitset.xorcardinality(filter.getBitSet());}  }
class C{  protected BaseDuration(long duration){  super();  iMillis=duration;}  }
class C{  public ISchedulingRule refreshRule(IResource resource){  return parent(resource);}  }
class C{  MetricsFactory(){  this(new MetricRegistry());}  }
class C{  public static GeoBoundingBoxQueryBuilder geoBoundingBoxQuery(String name){  return new GeoBoundingBoxQueryBuilder(name);}  }
class C{  public BasicBlock lastInCodeOrder(){  return (BasicBlock)_lastNode;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 3:{        addNullToken();        return firstToken;      }case 28:    break;case 4:{    addToken(Token.MARKUP_TAG_DELIMITER);    yybegin(INTAG);  }case 29:break;case 23:{int count=yylength();addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - (count - 2),zzMarkedPos - 1,Token.MARKUP_TAG_NAME);yybegin(INTAG);}case 30:break;case 17:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 31:break;case 10:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.FUNCTION);}case 32:break;case 24:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.COMMENT_MULTILINE);}case 33:break;case 14:{addToken(Token.MARKUP_TAG_DELIMITER);}case 34:break;case 5:{addToken(Token.WHITESPACE);}case 35:break;case 9:{addToken(start,zzStartRead - 1,Token.FUNCTION);return firstToken;}case 36:break;case 20:{start=zzMarkedPos - 2;yybegin(DTD);}case 37:break;case 2:{addToken(Token.IDENTIFIER);}case 38:break;case 27:{addToken(Token.DATA_TYPE);start=zzMarkedPos;yybegin(CDATA);}case 39:break;case 6:{addToken(Token.DATA_TYPE);}case 40:break;case 19:{int count=yylength();addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - (count - 1),zzMarkedPos - 1,Token.MARKUP_TAG_NAME);yybegin(INTAG);}case 41:break;case 26:{start=zzMarkedPos - 4;yybegin(COMMENT);}case 42:break;case 25:{int temp=zzStartRead;yybegin(YYINITIAL);addToken(start,zzStartRead - 1,Token.VARIABLE);addToken(temp,zzMarkedPos - 1,Token.DATA_TYPE);}case 43:break;case 21:{start=zzMarkedPos - 2;yybegin(PI);}case 44:break;case 16:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE);}case 45:break;case 13:{yybegin(YYINITIAL);addToken(Token.MARKUP_TAG_DELIMITER);}case 46:break;case 12:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE);}case 47:break;case 8:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 48:break;case 18:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 49:break;case 22:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.PREPROCESSOR);}case 50:break;case 15:{addToken(Token.OPERATOR);}case 51:break;case 11:{addToken(Token.MARKUP_TAG_ATTRIBUTE);}case 52:break;case 1:{}case 53:break;case 7:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 54:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case INTAG:{addToken(start,zzStartRead - 1,INTERNAL_INTAG);return firstToken;}case 57:break;case DTD:{addToken(start,zzStartRead - 1,Token.FUNCTION);return firstToken;}case 58:break;case INATTR_DOUBLE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 59:break;case YYINITIAL:{addNullToken();return firstToken;}case 60:break;case COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 61:break;case CDATA:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 62:break;case INATTR_SINGLE:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 63:break;case PI:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 64:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void testLongAuthResponsePayload() throws Exception {  if (this.sha256Conn != null && versionMeetsMinimum(5,6,6)) {    Properties props=new Properties();    props.setProperty("allowPublicKeyRetrieval","true");    if (!pluginIsActive(this.sha256Stmt,"sha256_password")) {      fail("sha256_password required to run this test");    }    try {      this.sha256Stmt.executeUpdate("SET @current_old_passwords = @@global.old_passwords");      createUser(this.sha256Stmt,"'wl6134user'@'%'","identified WITH sha256_password");      this.sha256Stmt.executeUpdate("grant all on *.* to 'wl6134user'@'%'");      this.sha256Stmt.executeUpdate("SET GLOBAL old_passwords= 2");      this.sha256Stmt.executeUpdate("SET SESSION old_passwords= 2");      this.sha256Stmt.executeUpdate(((MySQLConnection)this.sha256Conn).versionMeetsMinimum(5,7,6) ? "ALTER USER 'wl6134user'@'%' IDENTIFIED BY 'aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee" + "aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeaaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee" + "aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeaaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee"+ "aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee'" : "set password for 'wl6134user'@'%' = PASSWORD('aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee" + "aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeaaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee" + "aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeaaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee"+ "aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee')");      this.sha256Stmt.executeUpdate("flush privileges");      props.setProperty("user","wl6134user");      props.setProperty("password","aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeaaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee" + "aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeaaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee" + "aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeaaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee");      props.setProperty("defaultAuthenticationPlugin","com.mysql.jdbc.authentication.Sha256PasswordPlugin");      props.setProperty("useSSL","false");      Connection testConn=null;      try {        testConn=DriverManager.getConnection(sha256Url,props);        fail("SQLException expected due to password is too long for RSA encryption");      } catch (      Exception e) {        assertTrue(e.getMessage().startsWith("Data must not be longer than"));      } finally {        if (testConn != null) {          testConn.close();        }      }      try {        String trustStorePath="src/testsuite/ssl-test-certs/test-cert-store";        System.setProperty("javax.net.ssl.keyStore",trustStorePath);        System.setProperty("javax.net.ssl.keyStorePassword","password");        System.setProperty("javax.net.ssl.trustStore",trustStorePath);        System.setProperty("javax.net.ssl.trustStorePassword","password");        props.setProperty("useSSL","true");        assertCurrentUser(sha256Url,props,"wl6134user",true);      } catch (      Exception e) {        throw e;      } finally {        if (testConn != null) {          testConn.close();        }      }    }  finally {      this.sha256Stmt.executeUpdate("SET GLOBAL old_passwords = @current_old_passwords");    }  }}  }
class C{  public void testgetOutputPayloadClass(){  TdfApiResponse apires=new TdfApiResponse();  String dummyO=new String("dummy");  apires.setOutputPayload(dummyO);  Class<?> t=apires.getOutputPayloadClass();  if (t.getName() == String.class.getName())   assertTrue(true); else   assertTrue("The returned Type is not the same as the original Object",false);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  TimeManagerInfoDao.createTable(db,ifNotExists);}  }
class C{  public Effect(Collection<BasicEffect> effects){  subeffects=new ArrayList<BasicEffect>(effects);  fullyGrounded=subeffects.stream().allMatch(null);  valueTable=new HashMap<String,Map<Value,Double>>();  randomsToGenerate=new HashSet<String>();  for (  BasicEffect effect : effects) {    if (effect instanceof TemplateEffect) {      ((TemplateEffect)effect).getAllSlots().stream().filter(null).forEach(null);    }  }}  }
class C{  public ParsableBitArray(){}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  @GwtIncompatible CacheBuilder<K,V> lenientParsing(){  strictParsing=false;  return this;}  }
class C{  private static int javaScriptUnescapeHelper(String s,int i,StringBuilder sb){  if (i >= s.length()) {    throw new IllegalArgumentException("End-of-string after escape character in [" + s + "]");  }  char c=s.charAt(i++);switch (c) {case 'n':    sb.append('\n');  break;case 'r':sb.append('\r');break;case 't':sb.append('\t');break;case '\\':case '\"':case '\'':case '>':sb.append(c);break;case 'u':String hexCode;try {hexCode=s.substring(i,i + 4);} catch (IndexOutOfBoundsException ioobe) {throw new IllegalArgumentException("Invalid unicode sequence [" + s.substring(i) + "] at index "+ i+ " in ["+ s+ "]");}int unicodeValue;try {unicodeValue=Integer.parseInt(hexCode,16);} catch (NumberFormatException nfe) {throw new IllegalArgumentException("Invalid unicode sequence [" + hexCode + "] at index "+ i+ " in ["+ s+ "]");}sb.append((char)unicodeValue);i+=4;break;default :throw new IllegalArgumentException("Unknown escape code [" + c + "] at index "+ i+ " in ["+ s+ "]");}return i;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:38.027 -0500",hash_original_method="FCDC82ACC7F918D2268FA007BF779A17",hash_generated_method="5FD2C236158C26BC0F79AF7BB3B83840") protected void formatCookieAsVer(final CharArrayBuffer buffer,final Cookie cookie,int version){  formatParamAsVer(buffer,cookie.getName(),cookie.getValue(),version);  if (cookie.getPath() != null) {    if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.PATH_ATTR)) {      buffer.append("; ");      formatParamAsVer(buffer,"$Path",cookie.getPath(),version);    }  }  if (cookie.getDomain() != null) {    if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.DOMAIN_ATTR)) {      buffer.append("; ");      formatParamAsVer(buffer,"$Domain",cookie.getDomain(),version);    }  }}  }
class C{  public static void print(ClassFile cf,PrintWriter out){  List list;  int n;  int mod=AccessFlag.toModifier(cf.getAccessFlags() & ~AccessFlag.SYNCHRONIZED);  out.println("major: " + cf.major + ", minor: "+ cf.minor+ " modifiers: "+ Integer.toHexString(cf.getAccessFlags()));  out.println(Modifier.toString(mod) + " class " + cf.getName()+ " extends "+ cf.getSuperclass());  String[] infs=cf.getInterfaces();  if (infs != null && infs.length > 0) {    out.print("    implements ");    out.print(infs[0]);    for (int i=1; i < infs.length; ++i)     out.print(", " + infs[i]);    out.println();  }  out.println();  list=cf.getFields();  n=list.size();  for (int i=0; i < n; ++i) {    FieldInfo finfo=(FieldInfo)list.get(i);    int acc=finfo.getAccessFlags();    out.println(Modifier.toString(AccessFlag.toModifier(acc)) + " " + finfo.getName()+ "\t"+ finfo.getDescriptor());    printAttributes(finfo.getAttributes(),out,'f');  }  out.println();  list=cf.getMethods();  n=list.size();  for (int i=0; i < n; ++i) {    MethodInfo minfo=(MethodInfo)list.get(i);    int acc=minfo.getAccessFlags();    out.println(Modifier.toString(AccessFlag.toModifier(acc)) + " " + minfo.getName()+ "\t"+ minfo.getDescriptor());    printAttributes(minfo.getAttributes(),out,'m');    out.println();  }  out.println();  printAttributes(cf.getAttributes(),out,'c');}  }
class C{  public static void removeUnselectedNodes(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01734: Graph argument can not be null");  final List<NaviNode> unselectedNodes=filterHiddenNodes(GraphHelpers.getUnselectedNodes(graph));  graph.deleteNodes(unselectedNodes);}  }
class C{  public MultivariateDiffusionModel(MatrixParameterInterface diffusionPrecisionMatrixParameter){  super(DIFFUSION_PROCESS);  this.diffusionPrecisionMatrixParameter=diffusionPrecisionMatrixParameter;  calculatePrecisionInfo();  addVariable(diffusionPrecisionMatrixParameter);}  }
class C{  public FloatMatrix put(FloatMatrix indices,int c,float v){  return put(indices.findIndices(),c,v);}  }
class C{  private void generate(Class<? extends Message> cls) throws Exception {  assert cls != null;  if (cls.isInterface())   return;  if (cls.isAnnotationPresent(IgniteCodeGeneratingFail.class))   throw new IllegalStateException("@IgniteCodeGeneratingFail is provided for class: " + cls.getName());  write.clear();  read.clear();  fields=new ArrayList<>();  Field[] declaredFields=cls.getDeclaredFields();  for (  Field field : declaredFields) {    int mod=field.getModifiers();    if (!isStatic(mod) && !isTransient(mod) && !field.isAnnotationPresent(GridDirectTransient.class))     fields.add(field);  }  Collections.sort(fields,FIELD_CMP);  int state=startState(cls);  totalFieldCnt=state + fields.size();  indent=2;  boolean hasSuper=cls.getSuperclass() != Object.class;  start(write,hasSuper ? "writeTo" : null,true);  start(read,hasSuper ? "readFrom" : null,false);  indent++;  for (  Field field : fields)   processField(field,state++);  indent--;  finish(write,null);  finish(read,cls.getSimpleName());}  }
class C{  public GameTree(PgnToken.PgnTokenReceiver gameStateListener){  this.gameStateListener=gameStateListener;  try {    setStartPos(TextIO.readFEN(TextIO.startPosFEN));  } catch (  ChessParseError e) {  }}  }
class C{  public String sqlMetadata_triggerNames(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_triggerNames(catalogName,schemaName);}  }
class C{  public void prePrepare(Projection newProj){}  }
class C{  public void spin(){  lastTimeAnimated=SystemClock.uptimeMillis();  isSpinning=true;  invalidate();}  }
class C{  public void sendInsteonSequence(InsteonSequence s,SerialListener l){}  }
class C{  protected void createInstructions(){  _inst=new ArrayList<Instruction>();  block2CellInst=getBlock2CellInstructions(getInputParams(),_unblockedFileNames);  String className=_otherParams.get(ExternalFunctionStatement.CLASS_NAME);  String configFile=_otherParams.get(ExternalFunctionStatement.CONFIG_FILE);  if (className == null)   throw new RuntimeException(this.printBlockErrorLocation() + ExternalFunctionStatement.CLASS_NAME + " not provided!");  String inputParameterString=getParameterString(getInputParams());  String outputParameterString=getParameterString(getOutputParams());  ExternalFunctionInvocationInstruction einst=new ExternalFunctionInvocationInstruction(className,configFile,inputParameterString,outputParameterString);  if (getInputParams().size() > 0)   einst.setLocation(getInputParams().get(0)); else   if (getOutputParams().size() > 0)   einst.setLocation(getOutputParams().get(0)); else   einst.setLocation(this._beginLine,this._endLine,this._beginColumn,this._endColumn);  _inst.add(einst);  cell2BlockInst=getCell2BlockInstructions(getOutputParams(),_blockedFileNames);}  }
class C{  public static PdeInstallation fromProject(Project project){  String version=(String)project.getProperties().get("GOOMPH_PDE_VER");  String updateSite=(String)project.getProperties().get("GOOMPH_PDE_UDPATE_SITE");  String id=(String)project.getProperties().get("GOOMPH_PDE_ID");  String USAGE=StringPrinter.buildStringFromLines("You must specify which version of Eclipse should be used by Goomph.","Option #1: To use an officially supported release, use this:","GOOMPH_PDE_VER=4.5.2 (or any of " + EclipseRelease.supportedRange() + ")","Option #2: To use any release (e.g. milestone, nightly, etc)","GOOMPH_PDE_VER=<any version>","GOOMPH_PDE_UDPATE_SITE=<url to update site>","GOOMPH_PDE_ID=<the ID used for caching, cannot be a version listed in Option #1)","","You must do one or the other, specify only VER for Option #1,","or specify VER, UPDATE_SITE, and ID for Option #2");  if (version == null) {    throw new IllegalArgumentException(USAGE);  }  if (updateSite == null && id == null) {    try {      return new PdeInstallation(EclipseRelease.official(version));    } catch (    IllegalArgumentException e) {      throw new IllegalArgumentException(USAGE,e);    }  }  if (updateSite == null || id == null) {    throw new IllegalArgumentException(USAGE);  }  return from(EclipseRelease.createWithIdVersionUpdatesite(id,version,updateSite));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void readFromFileChannelWithEofException(FileChannel channel,long channelPosition,ByteBuffer dest) throws IOException {  int read=readFromFileChannel(channel,channelPosition,dest);  if (read < 0) {    throw new EOFException("read past EOF. pos [" + channelPosition + "] length: ["+ dest.limit()+ "] end: ["+ channel.size()+ "]");  }}  }
class C{  @Override public void partActivated(IWorkbenchPart arg0){  setInput();}  }
class C{  public PutMappingRequest source(Object... source){  return source(buildFromSimplifiedDef(type,source));}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof MBeanNotificationInfo))   return false;  MBeanNotificationInfo p=(MBeanNotificationInfo)o;  return (Objects.equals(p.getName(),getName()) && Objects.equals(p.getDescription(),getDescription()) && Objects.equals(p.getDescriptor(),getDescriptor())&& Arrays.equals(p.fastGetNotifTypes(),fastGetNotifTypes()));}  }
class C{  public boolean isData(){  return data;}  }
class C{  public Object createHandler(String contextPath,String war) throws Exception {  Object handler=getClassLoader().loadClass("org.mortbay.jetty.webapp.WebAppContext").newInstance();  handler.getClass().getMethod("setContextPath",new Class[]{String.class}).invoke(handler,new Object[]{contextPath});  handler.getClass().getMethod("setWar",new Class[]{String.class}).invoke(handler,new Object[]{war});  setDefaultRealm(handler);  return handler;}  }
class C{  public void addArgument(byte[] argument){  if (argument == null)   throw new NullPointerException("The passed argument is null, have you checked its validity?");  arguments.add(Arrays.copyOfRange(argument,0,(argument.length > 255) ? 255 : argument.length));}  }
class C{  public TagPos pop(){  breakingTags.pop();  return closedByChildBreak.pop();}  }
class C{  public static JSONArray toJSONArray(JSONArray names,JSONTokener x) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (; ; ) {    JSONObject jo=rowToJSONObject(names,x);    if (jo == null) {      break;    }    ja.put(jo);  }  if (ja.length() == 0) {    return null;  }  return ja;}  }
class C{  private void assertWriteVarint(byte[] data,long value) throws Exception {  if ((value >>> 32) == 0) {    ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();    CodedOutputStream output=CodedOutputStream.newInstance(rawOutput);    output.writeRawVarint32((int)value);    output.flush();    assertEqualBytes(data,rawOutput.toByteArray());    assertEquals(data.length,CodedOutputStream.computeRawVarint32Size((int)value));  }{    ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();    CodedOutputStream output=CodedOutputStream.newInstance(rawOutput);    output.writeRawVarint64(value);    output.flush();    assertEqualBytes(data,rawOutput.toByteArray());    assertEquals(data.length,CodedOutputStream.computeRawVarint64Size(value));  }  for (int blockSize=1; blockSize <= 16; blockSize*=2) {    if ((value >>> 32) == 0) {      ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();      CodedOutputStream output=CodedOutputStream.newInstance(rawOutput,blockSize);      output.writeRawVarint32((int)value);      output.flush();      assertEqualBytes(data,rawOutput.toByteArray());    }{      ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();      CodedOutputStream output=CodedOutputStream.newInstance(rawOutput,blockSize);      output.writeRawVarint64(value);      output.flush();      assertEqualBytes(data,rawOutput.toByteArray());    }  }}  }
class C{  public boolean after(Exchange exchange,FluentIterable<Exchange> partialOutputLog) throws Exception {  return true;}  }
class C{  private void doMigrationFromAlpha(){  SharedPreferenceHelper.clearPreferences(this);}  }
class C{  public DefaultTableModel(Vector columnNames,int rowCount){  setDataVector(newVector(rowCount),columnNames);}  }
class C{  public GridLog4jRollingFileAppender(Layout layout,String filename) throws IOException {  super(layout,filename);  init();}  }
class C{  private static void gen64BitPowerPC_ELF_ParameterPassingCode(Assembler asm,TypeReference[] types,int nextVMArgReg,int nextVMArgFloatReg,int spillOffsetVM,int nextOSArgReg,int nextOSArgFloatReg,int spillOffsetOS){  if (VM.BuildForPower64ELF_ABI) {    int numArguments=types.length;    Assembler[] asmForArgs=new Assembler[numArguments];    for (int arg=0; arg < numArguments; arg++) {      boolean mustSaveFloatToSpill;      asmForArgs[arg]=new Assembler(0);      Assembler asmArg=asmForArgs[arg];      if (types[arg].isFloatType()) {        if (nextOSArgReg <= LAST_OS_PARAMETER_GPR.value()) {          nextOSArgReg++;          mustSaveFloatToSpill=false;        } else {          mustSaveFloatToSpill=true;        }        spillOffsetOS+=BYTES_IN_STACKSLOT;        if (nextVMArgFloatReg <= LAST_OS_PARAMETER_FPR.value()) {          if (mustSaveFloatToSpill) {            asmArg.emitSTFS(FPR.lookup(nextVMArgFloatReg),spillOffsetOS - BYTES_IN_FLOAT,FP);          }          nextOSArgFloatReg++;          nextVMArgFloatReg++;        } else         if (nextVMArgFloatReg <= LAST_VOLATILE_FPR.value()) {          asmArg.emitSTFS(FPR.lookup(nextVMArgFloatReg),spillOffsetOS - BYTES_IN_FLOAT,FP);          nextVMArgFloatReg++;        } else {          spillOffsetVM+=BYTES_IN_STACKSLOT;          asmArg.emitLFS(FIRST_SCRATCH_FPR,spillOffsetVM - BYTES_IN_FLOAT,FP);          asmArg.emitSTFS(FIRST_SCRATCH_FPR,spillOffsetOS - BYTES_IN_FLOAT,FP);        }      } else       if (types[arg].isDoubleType()) {        if (VM.BuildFor64Addr) {          if (nextOSArgReg <= LAST_OS_PARAMETER_GPR.value()) {            nextOSArgReg++;            mustSaveFloatToSpill=false;          } else {            mustSaveFloatToSpill=true;          }        } else {          if (nextOSArgReg <= LAST_OS_PARAMETER_GPR.value() - 1) {            nextOSArgReg+=2;            mustSaveFloatToSpill=false;          } else {            if (nextOSArgReg <= LAST_OS_PARAMETER_GPR.value()) {              nextOSArgReg++;            }            mustSaveFloatToSpill=true;          }        }        spillOffsetOS+=BYTES_IN_DOUBLE;        if (nextVMArgFloatReg <= LAST_OS_PARAMETER_FPR.value()) {          if (mustSaveFloatToSpill) {            asmArg.emitSTFD(FPR.lookup(nextVMArgFloatReg),spillOffsetOS - BYTES_IN_DOUBLE,FP);          }          nextOSArgFloatReg++;          nextVMArgFloatReg++;        } else         if (nextVMArgFloatReg <= LAST_VOLATILE_FPR.value()) {          asmArg.emitSTFD(FPR.lookup(nextVMArgFloatReg),spillOffsetOS - BYTES_IN_DOUBLE,FP);          nextVMArgFloatReg++;        } else {          spillOffsetVM+=BYTES_IN_DOUBLE;          asmArg.emitLFD(FIRST_SCRATCH_FPR,spillOffsetVM - BYTES_IN_DOUBLE,FP);          asmArg.emitSTFD(FIRST_SCRATCH_FPR,spillOffsetOS - BYTES_IN_DOUBLE,FP);        }      } else       if (VM.BuildFor32Addr && types[arg].isLongType()) {        spillOffsetOS+=BYTES_IN_LONG;        if (nextOSArgReg <= LAST_OS_PARAMETER_GPR.value() - 1) {          asmArg.emitMR(GPR.lookup(nextOSArgReg + 1),GPR.lookup(nextVMArgReg + 1));          asmArg.emitMR(GPR.lookup(nextOSArgReg),GPR.lookup(nextVMArgReg));          nextOSArgReg+=2;          nextVMArgReg+=2;        } else         if (nextOSArgReg == LAST_OS_PARAMETER_GPR.value() && nextVMArgReg <= LAST_VOLATILE_GPR.value() - 1) {          asmArg.emitSTW(GPR.lookup(nextVMArgReg + 1),spillOffsetOS - BYTES_IN_STACKSLOT,FP);          asmArg.emitMR(GPR.lookup(nextOSArgReg),GPR.lookup(nextVMArgReg));          nextOSArgReg+=2;          nextVMArgReg+=2;        } else         if (nextOSArgReg > LAST_OS_PARAMETER_GPR.value() && nextVMArgReg <= LAST_VOLATILE_GPR.value() - 1) {          asmArg.emitSTW(GPR.lookup(nextVMArgReg++),spillOffsetOS - 2 * BYTES_IN_STACKSLOT,FP);          asmArg.emitSTW(GPR.lookup(nextVMArgReg++),spillOffsetOS - BYTES_IN_STACKSLOT,FP);        } else         if (nextVMArgReg == LAST_VOLATILE_GPR.value()) {          spillOffsetVM+=BYTES_IN_STACKSLOT;          asmArg.emitSTW(GPR.lookup(nextVMArgReg++),spillOffsetOS - 2 * BYTES_IN_STACKSLOT,FP);          asmArg.emitLWZ(REGISTER_ZERO,spillOffsetVM - BYTES_IN_STACKSLOT,FP);          asmArg.emitSTW(REGISTER_ZERO,spillOffsetOS - BYTES_IN_STACKSLOT,FP);        } else {          spillOffsetVM+=BYTES_IN_LONG;          asmArg.emitLFD(FIRST_SCRATCH_FPR,spillOffsetVM - BYTES_IN_LONG,FP);          asmArg.emitSTFD(FIRST_SCRATCH_FPR,spillOffsetOS - BYTES_IN_LONG,FP);        }      } else       if (VM.BuildFor64Addr && types[arg].isLongType()) {        spillOffsetOS+=BYTES_IN_LONG;        if (nextOSArgReg <= LAST_OS_PARAMETER_GPR.value()) {          asmArg.emitMR(GPR.lookup(nextOSArgReg++),GPR.lookup(nextVMArgReg++));        } else         if (nextVMArgReg <= LAST_VOLATILE_GPR.value()) {          asmArg.emitSTAddr(GPR.lookup(nextVMArgReg++),spillOffsetOS - BYTES_IN_LONG,FP);        } else {          spillOffsetVM+=BYTES_IN_LONG;          asmArg.emitLAddr(REGISTER_ZERO,spillOffsetVM - BYTES_IN_LONG,FP);          asmArg.emitSTAddr(REGISTER_ZERO,spillOffsetOS - BYTES_IN_LONG,FP);        }      } else       if (types[arg].isReferenceType()) {        spillOffsetOS+=BYTES_IN_ADDRESS;        if (nextOSArgReg <= LAST_OS_PARAMETER_GPR.value()) {          asmArg.emitCMPI(GPR.lookup(nextVMArgReg),0);          ForwardReference isNull=asmArg.emitForwardBC(EQ);          asmArg.emitSTAddrU(GPR.lookup(nextVMArgReg),BYTES_IN_ADDRESS,KLUDGE_TI_REG);          asmArg.emitSUBFC(GPR.lookup(nextOSArgReg),THREAD_REGISTER,KLUDGE_TI_REG);          ForwardReference done=asmArg.emitForwardB();          isNull.resolve(asmArg);          asmArg.emitMR(GPR.lookup(nextOSArgReg),GPR.lookup(nextVMArgReg));          done.resolve(asmArg);          nextVMArgReg++;          nextOSArgReg++;        } else         if (nextVMArgReg <= LAST_VOLATILE_GPR.value()) {          asmArg.emitCMPI(GPR.lookup(nextVMArgReg),0);          ForwardReference isNull=asmArg.emitForwardBC(EQ);          asmArg.emitSTAddrU(GPR.lookup(nextVMArgReg),BYTES_IN_ADDRESS,KLUDGE_TI_REG);          asmArg.emitSUBFC(REGISTER_ZERO,THREAD_REGISTER,KLUDGE_TI_REG);          ForwardReference done=asmArg.emitForwardB();          isNull.resolve(asmArg);          asmArg.emitLVAL(REGISTER_ZERO,0);          done.resolve(asmArg);          asmArg.emitSTAddr(REGISTER_ZERO,spillOffsetOS - BYTES_IN_ADDRESS,FP);          nextVMArgReg++;        } else {          spillOffsetVM+=BYTES_IN_STACKSLOT;          asmArg.emitLAddr(REGISTER_ZERO,spillOffsetVM - BYTES_IN_ADDRESS,FP);          asmArg.emitCMPI(REGISTER_ZERO,0);          ForwardReference isNull=asmArg.emitForwardBC(EQ);          asmArg.emitSTAddrU(REGISTER_ZERO,BYTES_IN_ADDRESS,KLUDGE_TI_REG);          asmArg.emitSUBFC(REGISTER_ZERO,THREAD_REGISTER,KLUDGE_TI_REG);          ForwardReference done=asmArg.emitForwardB();          isNull.resolve(asmArg);          asmArg.emitLVAL(REGISTER_ZERO,0);          done.resolve(asmArg);          asmArg.emitSTAddr(REGISTER_ZERO,spillOffsetOS - BYTES_IN_ADDRESS,FP);        }      } else {        spillOffsetOS+=BYTES_IN_STACKSLOT;        if (nextOSArgReg <= LAST_OS_PARAMETER_GPR.value()) {          asmArg.emitMR(GPR.lookup(nextOSArgReg++),GPR.lookup(nextVMArgReg++));        } else         if (nextVMArgReg <= LAST_VOLATILE_GPR.value()) {          asmArg.emitSTAddr(GPR.lookup(nextVMArgReg++),spillOffsetOS - BYTES_IN_ADDRESS,FP);        } else {          spillOffsetVM+=BYTES_IN_STACKSLOT;          asmArg.emitLInt(REGISTER_ZERO,spillOffsetVM - BYTES_IN_INT,FP);          asmArg.emitSTAddr(REGISTER_ZERO,spillOffsetOS - BYTES_IN_ADDRESS,FP);        }      }    }    for (int arg=numArguments - 1; arg >= 0; arg--) {      asm.appendInstructions(asmForArgs[arg].getMachineCodes());    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributens02.class,args);}  }
class C{  private static boolean isInCornerTargetZone(float x,float y,float handleX,float handleY,float targetRadius){  if (Math.abs(x - handleX) <= targetRadius && Math.abs(y - handleY) <= targetRadius) {    return true;  }  return false;}  }
class C{  private void manageCallButton(){  if (null != mCallMenuItem) {    mCallMenuItem.setVisible(CallViewActivity.getActiveCall() != null);  }}  }
class C{  public void xMinYMax() throws ParseException {  align=SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMAX;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void updateModificationDate(){  try {    m_modificationDate=m_provider.getModificationDate(m_project);    for (    final IProjectListener listener : m_listeners) {      try {        listener.changedModificationDate(m_project,m_modificationDate);      } catch (      final Exception exception) {        CUtilityFunctions.logException(exception);      }    }  } catch (  final CouldntLoadDataException e) {    CUtilityFunctions.logException(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapnumberofnodes.class,args);}  }
class C{  @Override public void write(int value){  digest.update((byte)value);}  }
class C{  public static void crashIfMainThread(){  if (BuildConfig.DEBUG) {    if (Thread.currentThread() == Looper.getMainLooper().getThread()) {      throw new IllegalStateException("This method should NOT be called from the Main Thread");    }  }}  }
class C{  private void calculateEntropy(double scale,KStarWrapper params){  int i, j, k;  double actent=0.0, randent=0.0;  double pstar, tprob, avgprob=0.0, minprob=1.0;  double actClassProb, randClassProb;  double[][] pseudoClassProbs=new double[NUM_RAND_COLS + 1][m_NumClasses];  for (j=0; j <= NUM_RAND_COLS; j++) {    for (i=0; i < m_NumClasses; i++) {      pseudoClassProbs[j][i]=0.0;    }  }  for (i=0; i < m_NumInstances; i++) {    if (m_Distances[i] < 0) {      continue;    } else {      pstar=PStar(m_Distances[i],scale);      tprob=pstar / m_ActualCount;      avgprob+=tprob;      if (pstar < minprob) {        minprob=pstar;      }      for (k=0; k <= NUM_RAND_COLS; k++) {        pseudoClassProbs[k][m_RandClassCols[k][i]]+=tprob;      }    }  }  for (j=m_NumClasses - 1; j >= 0; j--) {    actClassProb=pseudoClassProbs[NUM_RAND_COLS][j] / avgprob;    if (actClassProb > 0) {      actent-=actClassProb * Math.log(actClassProb) / LOG2;    }  }  for (k=0; k < NUM_RAND_COLS; k++) {    for (i=m_NumClasses - 1; i >= 0; i--) {      randClassProb=pseudoClassProbs[k][i] / avgprob;      if (randClassProb > 0) {        randent-=randClassProb * Math.log(randClassProb) / LOG2;      }    }  }  randent/=NUM_RAND_COLS;  params.actEntropy=actent;  params.randEntropy=randent;  params.avgProb=avgprob;  params.minProb=minprob;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void fireEvent(GameListener gl){  gl.gameClientFeedbackRquest(this);}  }
class C{  private void initializePilotStack(Bundle savedInstanceState,final Class<? extends PilotFrame> launchFrameClass,Args launchFrameArgs){  if (!pilotStack.isEmpty())   throw new IllegalStateException("PilotStack already exists!");  if (savedInstanceState != null && savedInstanceState.containsKey(getStateSaveBundleKey())) {    throw new IllegalStateException("Not impl!");  } else {    Log.d(getClass().getCanonicalName(),"Creating new PilotStack!");    try {      pilotStack.pushFrame(launchFrameClass,launchFrameArgs);    } catch (    Exception e) {      throw new RuntimeException("Launch frame cant be instantiated, check this frame has a no-arg constructor which calls super(null): " + launchFrameClass.getCanonicalName(),e);    }  }}  }
class C{  public static void selectionSort(int[] arr){  if (arr.length < 2) {    return;  }  int minIndex=0;  int minVal=0;  for (int j=0; j < (arr.length - 1); j++) {    System.out.println("Checking position " + j);    printArray(arr);    minIndex=j;    minVal=arr[j];    for (int k=j + 1; k < arr.length; k++) {      System.out.println("\tComparing " + minVal + " & "+ arr[k]);      if (arr[k] < minVal) {        System.out.println("\tSetting minVal to " + arr[k] + " & minIndex to "+ k);        minVal=arr[k];        minIndex=k;      }    }    System.out.println(arr[minIndex] + " < " + minVal+ "?");    System.out.println("Swapping " + j + " - "+ minIndex);    swap(arr,j,minIndex);  }}  }
class C{  public boolean modelValueSelected(){  if (optionModelValue == null) {    return false;  }  return optionModelValue.getSelection();}  }
class C{  @Override protected void internalRender(GL10 gl,PLIRenderer renderer){  gl.glClearColor(mColor.red,mColor.green,mColor.blue,1.0f);  gl.glClear(GL10.GL_COLOR_BUFFER_BIT);}  }
class C{  @Override public void run(){  amIActive=true;  panel=new CoordinateTransformDialog(myHost);  if (myHost instanceof JFrame) {    JDialog dialog=new JDialog((JFrame)myHost,"Coordinate System Transformation",false);    Container contentPane=dialog.getContentPane();    contentPane.add(panel,BorderLayout.CENTER);    dialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    dialog.pack();    dialog.setLocationRelativeTo(null);    dialog.setVisible(true);  } else {    JFrame frame=new JFrame("Coordinate System Transformation");    Container contentPane=frame.getContentPane();    contentPane.add(panel,BorderLayout.CENTER);    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    frame.pack();    frame.setLocationRelativeTo(null);    frame.setVisible(true);  }}  }
class C{  @TruffleBoundary public static Object createLanguageElement(RSyntaxNode element){  assert element != null;  if (element instanceof RSyntaxConstant) {    Object value=((RSyntaxConstant)element).getValue();    if (value == RMissing.instance) {      return RSymbol.MISSING;    }    return value;  } else   if (element instanceof RSyntaxLookup) {    String id=((RSyntaxLookup)element).getIdentifier();    assert id == id.intern() : element;    return RDataFactory.createSymbol(id);  } else {    assert element instanceof RSyntaxCall || element instanceof RSyntaxFunction;    return RDataFactory.createLanguage(element.asRNode());  }}  }
class C{  public boolean isEnabled(){  return fIsEnabled;}  }
class C{  long cleanup(long now){  int inUseConnectionCount=0;  int idleConnectionCount=0;  RealConnection longestIdleConnection=null;  long longestIdleDurationNs=Long.MIN_VALUE;synchronized (this) {    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {      RealConnection connection=i.next();      if (pruneAndGetAllocationCount(connection,now) > 0) {        inUseConnectionCount++;        continue;      }      idleConnectionCount++;      long idleDurationNs=now - connection.idleAtNanos;      if (idleDurationNs > longestIdleDurationNs) {        longestIdleDurationNs=idleDurationNs;        longestIdleConnection=connection;      }    }    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {      connections.remove(longestIdleConnection);    } else     if (idleConnectionCount > 0) {      return keepAliveDurationNs - longestIdleDurationNs;    } else     if (inUseConnectionCount > 0) {      return keepAliveDurationNs;    } else {      cleanupRunning=false;      return -1;    }  }  closeQuietly(longestIdleConnection.socket());  return 0;}  }
class C{  public static String[] split(String s,char delimiter){  return split(s,Character.toString(delimiter));}  }
class C{  public static boolean cs_sprealloc(Dcs A,int nzmax){  if (A == null)   return (false);  if (nzmax <= 0)   nzmax=(Dcs_util.CS_CSC(A)) ? (A.p[A.n]) : A.nz;  int[] Ainew=new int[nzmax];  int length=Math.min(nzmax,A.i.length);  System.arraycopy(A.i,0,Ainew,0,length);  A.i=Ainew;  if (Dcs_util.CS_TRIPLET(A)) {    int[] Apnew=new int[nzmax];    length=Math.min(nzmax,A.p.length);    System.arraycopy(A.p,0,Apnew,0,length);    A.p=Apnew;  }  if (A.x != null) {    double[] Axnew=new double[nzmax];    length=Math.min(nzmax,A.x.length);    System.arraycopy(A.x,0,Axnew,0,length);    A.x=Axnew;  }  A.nzmax=nzmax;  return (true);}  }
class C{  public void call(final String methodName,final ResultListener listener){  call(methodName,null,listener);}  }
class C{  public boolean contains(Object o){  return indexOf(o) >= 0;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public synchronized void recordStatistics(QueryStatistic statistic){  queryStatistics.add(statistic);}  }
class C{  private void notifyOtherPlayers(final PoliticalActionAttachment paa,final String notification){  if (!"NONE".equals(notification)) {    final Collection<PlayerID> currentPlayer=new ArrayList<>();    currentPlayer.add(m_player);    final Collection<PlayerID> otherPlayers=getData().getPlayerList().getPlayers();    otherPlayers.removeAll(currentPlayer);    this.getDisplay().reportMessageToPlayers(otherPlayers,currentPlayer,notification,notification);  }}  }
class C{  @Override public final void startElement(final String ns,final String lName,final String qName,final Attributes list) throws SAXException {  String name=lName == null || lName.length() == 0 ? qName : lName;  StringBuffer sb=new StringBuffer(match);  if (match.length() > 0) {    sb.append('/');  }  sb.append(name);  match=sb.toString();  Rule r=(Rule)RULES.match(match);  if (r != null) {    r.begin(name,list);  }}  }
class C{  public Boolean isCleanSession(){  return cleanSession;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.608 -0500",hash_original_method="2341B98028DF5979D10DDC3712740A20",hash_generated_method="2AF844617832D70B37734FAC2E663D69") public final void offset(int dx,int dy){  addTaint(dx + dy);  droidsafeUpdateMembers();}  }
class C{  ActivityStats(Counter thisActive,Counter primaryActive,Counter allActive){  this.thisActive=thisActive;  this.primaryActive=primaryActive;  this.allActive=allActive;}  }
class C{  public JFXNodesList(){  this.setPickOnBounds(false);  this.getStyleClass().add("jfx-nodes-list");}  }
class C{  protected void reset() throws AdeException {  setProperties();}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    this.encrypting=encrypting;    this.workingKey=((KeyParameter)params).getKey();    setKey(this.workingKey);    return;  }  throw new IllegalArgumentException("invalid parameter passed to Blowfish init - " + params.getClass().getName());}  }
class C{  private void createFooter(){  this.createSeparator();  final Composite informationComposite=new Composite(this.parent.shell,SWT.NONE);  informationComposite.setLayoutData(new GridData(GridData.FILL,GridData.FILL,false,false));  informationComposite.setBackground(this.getGreyColor());  informationComposite.setLayout(new GridLayout(this.icon == null ? 1 : 2,false));  if (this.icon != null) {    final Label labelIcon=new Label(informationComposite,SWT.NONE);    labelIcon.setBackground(this.getGreyColor());    labelIcon.setImage(this.icon);    labelIcon.setLayoutData(new GridData(GridData.CENTER,GridData.CENTER,false,false));  }  final Label labelText=new Label(informationComposite,SWT.NONE);  labelText.setBackground(this.getGreyColor());  labelText.setText(this.footerText);  labelText.setLayoutData(new GridData(GridData.FILL,GridData.CENTER,true,false));}  }
class C{  public static short[] copyOfRange(short[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      short[] copy=new short[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  public static void onError(final Context context){  log.onError(context);}  }
class C{  public void addOutput(TOutput output){  outputs.add(output);}  }
class C{  private void drawCenterText(){  if (mDrawCenterText) {    PointF c=getCenter();    String[] lines=mCenterText.split("\n");    float lineHeight=(mValuePaint.ascent() + mValuePaint.descent()) * 1.6f;    float textheight=lines.length * lineHeight;    for (int i=0; i < lines.length; i++) {      mDrawCanvas.drawText(lines[lines.length - i - 1],c.x,c.y - textheight / 2 + lineHeight * i,mCenterTextPaint);    }  }}  }
class C{  protected void Expr() throws javax.xml.transform.TransformerException {  OrExpr();}  }
class C{  private void changeCamera(ReadOnlyVector3 dir){  Vector3 angle=MathUtil.directionToAzEl(dir,null);  setAzAndEl(-angle.getX(),angle.getY() + Math.PI / 2);  lookAt.set(dir);  lookAt.scaleAddLocal(camera.getDistanceToCoR(),camera.getLocation());  camera.setLookAt(lookAt);  rotateTurntable(camera.getDistanceToCoR());  updateFromCamera();  updateCrosshair();  updateGeometricState(0);  changed.set(true);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.807 -0500",hash_original_method="62FA4DFF9313BF5A320239E33F35F300",hash_generated_method="733B69A8EB45CD063949BB0690FB1778") @Override public final boolean equals(Object obj){  if (obj == null)   return false;  if (this == obj)   return true;  if (!(obj instanceof Scheme))   return false;  Scheme s=(Scheme)obj;  return (name.equals(s.name) && defaultPort == s.defaultPort && layered == s.layered && socketFactory.equals(s.socketFactory));}  }
class C{  public boolean dataNode(){  String data=attributes.get("data");  if (data == null) {    return !clientNode();  }  return Booleans.parseBooleanExact(data);}  }
class C{  @Override public void updateStateTo(final String state){  fireSourceChanged(ISources.WORKBENCH,SIMULATION_RUNNING_STATE,state);  final IExperimentPlan exp=GAMA.getExperiment();  final String type=exp == null ? "NONE" : exp.isBatch() ? "BATCH" : exp.isMemorize() ? "MEMORIZE" : "REGULAR";  fireSourceChanged(ISources.WORKBENCH,SIMULATION_TYPE,type);  String canStepBack="CANNOT_STEP_BACK";  if (exp != null) {    if (exp.getAgent() != null) {      canStepBack=exp.getAgent().canStepBack() ? "CAN_STEP_BACK" : "CANNOT_STEP_BACK";    }  }  fireSourceChanged(ISources.WORKBENCH,SIMULATION_STEPBACK,canStepBack);}  }
class C{  @Override public Iterator<E> iterator(){  return map.keySet().iterator();}  }
class C{  public static void applyBlacklist(ArrayList<String> blacklist){  ArrayList<Pattern> patterns=new ArrayList<Pattern>();  for (  String regex : blacklist) {    patterns.add(Pattern.compile(regex));  }  for (  Pattern p : patterns) {    for (    String key : new TreeSet<String>(backgroundServerList.keySet())) {      TileLayerServer osmts=backgroundServerList.get(key);      Matcher m=p.matcher(osmts.tileUrl);      if (m.find()) {        backgroundServerList.remove(key);        if (cachedBackground != null && cachedBackground.equals(osmts)) {          cachedBackground=null;        }        Log.d("OpenStreetMapTileServer","Removed background tile layer " + key);      }    }    for (    String key : new TreeSet<String>(overlayServerList.keySet())) {      TileLayerServer osmts=overlayServerList.get(key);      Matcher m=p.matcher(osmts.tileUrl);      if (m.find()) {        overlayServerList.remove(key);        if (cachedOverlay != null && cachedOverlay.equals(osmts)) {          cachedOverlay=null;        }        Log.d("OpenStreetMapTileServer","Removed overlay tile layer " + key);      }    }  }}  }
class C{  public static TweenEquation parseEasing(String easingName){  if (easings == null) {    easings=new TweenEquation[]{Linear.INOUT,Quad.IN,Quad.OUT,Quad.INOUT,Cubic.IN,Cubic.OUT,Cubic.INOUT,Quart.IN,Quart.OUT,Quart.INOUT,Quint.IN,Quint.OUT,Quint.INOUT,Circ.IN,Circ.OUT,Circ.INOUT,Sine.IN,Sine.OUT,Sine.INOUT,Expo.IN,Expo.OUT,Expo.INOUT,Back.IN,Back.OUT,Back.INOUT,Bounce.IN,Bounce.OUT,Bounce.INOUT,Elastic.IN,Elastic.OUT,Elastic.INOUT};  }  for (  TweenEquation easing : easings) {    if (easingName.equals(easing.toString()))     return easing;  }  return null;}  }
class C{  final void unsplice(Node pred,Node s){  s.forgetContents();  if (pred != null && pred != s && pred.next == s) {    Node n=s.next;    if (n == null || (n != s && pred.casNext(s,n) && pred.isMatched())) {      for (; ; ) {        Node h=head;        if (h == pred || h == s || h == null)         return;        if (!h.isMatched())         break;        Node hn=h.next;        if (hn == null)         return;        if (hn != h && casHead(h,hn))         h.forgetNext();      }      if (pred.next != pred && s.next != s) {        for (; ; ) {          int v=sweepVotes;          if (v < SWEEP_THRESHOLD) {            if (casSweepVotes(v,v + 1))             break;          } else           if (casSweepVotes(v,0)) {            sweep();            break;          }        }      }    }  }}  }
class C{  public static int compare(long time1,long time2){  TimeStamp t1=new TimeStamp(time1);  TimeStamp t2=new TimeStamp(time2);  return compare(t1,t2);}  }
class C{  public static Impp aim(String handle){  return new Impp(AIM,handle);}  }
class C{  @SuppressWarnings("unchecked") public <T extends Provider>T newProxyInstance(){  long num=getUniqueNumber();  String proxyPkg="";  if (!Modifier.isPublic(providerType.getModifiers())) {    String name=providerType.getName();    int n=name.lastIndexOf('.');    proxyPkg=((n == -1) ? "" : name.substring(0,n + 1));  }  String proxyName=proxyPkg + proxyClassNamePrefix + num;  Class<?> proxyClass=null;  byte[] proxyClassFile=ProxyGenerator.generateProxyClass(proxyName,new Class<?>[]{providerType});  try {    proxyClass=JVM.defineClass(providerType.getClassLoader(),proxyName,proxyClassFile,0,proxyClassFile.length);  } catch (  ClassFormatError e) {    throw new IllegalArgumentException(e.toString());  }  try {    Constructor cons=proxyClass.getConstructor(constructorParams);    return (T)cons.newInstance(new Object[]{this});  } catch (  ReflectiveOperationException e) {    throw new InternalError(e.toString(),e);  }}  }
class C{  public boolean waitForMembershipCheck(InternalDistributedMember remoteId){  return membershipManager.waitForNewMember(remoteId);}  }
class C{  public static void addStmt(BlockStmt block,Expression expr){  addStmt(block,new ExpressionStmt(expr));}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private static void assertGraphNodesEdges(GraphModel testGraph,int nodeCnt,int edgeCnt){  assertEquals(nodeCnt,testGraph.getNodes().size());  assertEquals(edgeCnt,testGraph.getEdges().size());}  }
class C{  public static @Nullable <T extends Closeable>CloseableReference<T> of(@Nullable T t){  if (t == null) {    return null;  } else {    return new CloseableReference<T>(t,(ResourceReleaser<T>)DEFAULT_CLOSEABLE_RELEASER);  }}  }
class C{  @Override public void put(String name,double value){  emulatedFields.put(name,value);}  }
class C{  public void processDanglingIndices(MetaData metaData){  if (nodeEnv.hasNodeFile() == false) {    return;  }  cleanupAllocatedDangledIndices(metaData);  findNewAndAddDanglingIndices(metaData);  allocateDanglingIndices();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void incBatchesRedistributed(){  this.stats.incInt(batchesRedistributedId,1);}  }
class C{  @Override public void clear(){  fromList.clear();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:41.121 -0500",hash_original_method="557183176EBBC482C2193E58BCF0D460",hash_generated_method="557183176EBBC482C2193E58BCF0D460") void cacheAuthorizationHeader(String callId,AuthorizationHeader authorization,int cacheTime){  String user=authorization.getUsername();  if (callId == null)   throw new NullPointerException("Call ID is null!");  if (authorization == null)   throw new NullPointerException("Null authorization domain");  List<AuthorizationHeader> authHeaders=authorizationHeaders.get(callId);  if (authHeaders == null) {    authHeaders=new LinkedList<AuthorizationHeader>();    authorizationHeaders.put(callId,authHeaders);  } else {    String realm=authorization.getRealm();    for (ListIterator<AuthorizationHeader> li=authHeaders.listIterator(); li.hasNext(); ) {      AuthorizationHeader authHeader=(AuthorizationHeader)li.next();      if (realm.equals(authHeader.getRealm())) {        li.remove();      }    }  }  authHeaders.add(authorization);  TimeoutTask timeoutTask=new TimeoutTask(callId,user);  if (cacheTime != -1)   this.timer.schedule(timeoutTask,cacheTime * 1000);}  }
class C{  public void offerSuperUser(Activity activity){  RootTools.log("Launching Market for SuperUser");  Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=com.noshufou.android.su"));  activity.startActivity(i);}  }
class C{  @ExceptionHandler(value={JpaSystemException.class,PersistenceException.class}) @ResponseBody public ErrorInformation handlePersistenceException(Exception exception,HttpServletResponse response){  Throwable throwable=getRootCause(exception);  if (isDataTruncationException(throwable)) {    return getErrorInformationAndSetStatus(HttpStatus.BAD_REQUEST,throwable,response);  } else   if (isCausedByConstraintViolationException(exception)) {    return getErrorInformationAndSetStatus(HttpStatus.BAD_REQUEST,new Exception("A constraint has been violated. Reason: " + throwable.getMessage()),response);  } else {    logError("A persistence error occurred.",exception);    return getErrorInformationAndSetStatus(HttpStatus.INTERNAL_SERVER_ERROR,throwable == null ? new Exception("General Error") : throwable,response);  }}  }
class C{  AddressMessage(NetworkParameters params,byte[] payload,MessageSerializer serializer,int length) throws ProtocolException {  super(params,payload,0,serializer,length);}  }
class C{  public PushPullBlockingQueue(final int capacity){  this(capacity,SpinPolicy.WAITING);}  }
class C{  public static ZoneLayer<Map<String,Object>> read(String filename) throws IOException {  Set<Zone<Map<String,Object>>> zones=new HashSet<Zone<Map<String,Object>>>();  for (  SimpleFeature feature : EsriShapeIO.readFeatures(filename)) {    Zone<Map<String,Object>> zone=new Zone<Map<String,Object>>((Geometry)feature.getDefaultGeometry());    Map<String,Object> map=new HashMap<String,Object>(feature.getAttributeCount());    for (    Property prop : feature.getProperties()) {      map.put(prop.getName().getLocalPart(),prop.getValue());    }    zone.setAttribute(map);    zones.add(zone);  }  return new ZoneLayer<Map<String,Object>>(zones);}  }
class C{  protected final void _writePPFieldName(String name,boolean commaBefore) throws IOException, JsonGenerationException {  if (commaBefore) {    _cfgPrettyPrinter.writeObjectEntrySeparator(this);  } else {    _cfgPrettyPrinter.beforeObjectEntries(this);  }  if (isEnabled(Feature.QUOTE_FIELD_NAMES)) {    if (_outputTail >= _outputEnd) {      _flushBuffer();    }    _outputBuffer[_outputTail++]='"';    _writeString(name);    if (_outputTail >= _outputEnd) {      _flushBuffer();    }    _outputBuffer[_outputTail++]='"';  } else {    _writeString(name);  }}  }
class C{  public static byte[] decode(String hexa) throws CoderException {  if (hexa == null) {    throw new CoderException("can't decode empty String");  }  if ((hexa.length() % 2) != 0) {    throw new CoderException("invalid hexadicimal String");  }  int tamArray=hexa.length() / 2;  byte[] retorno=new byte[tamArray];  for (int i=0; i < tamArray; i++) {    retorno[i]=hexToByte(hexa.substring(i * 2,i * 2 + 2));  }  return retorno;}  }
class C{  @Override protected long basicPutPart2(EntryEventImpl event,RegionEntry entry,boolean isInitialized,long lastModified,boolean clearConflict){  final long modifiedTime=event.getEventTime(lastModified);  if (this.partitionedRegion.getDataStore().hasClientInterest(event)) {    updateStatsForGet(entry,true);  }  if (!event.isOriginRemote()) {    if (event.getVersionTag() == null || event.getVersionTag().isGatewayTag()) {      boolean eventHasDelta=event.getDeltaBytes() != null;      VersionTag v=entry.generateVersionTag(null,eventHasDelta,this,event);      if (v != null) {        if (logger.isDebugEnabled()) {          logger.debug("generated version tag {} in region {}",v,this.getName());        }      }    }    if (!event.isBulkOpInProgress()) {      long start=this.partitionedRegion.getPrStats().startSendReplication();      try {        UpdateOperation op=new UpdateOperation(event,modifiedTime);        op.distribute();      }  finally {        this.partitionedRegion.getPrStats().endSendReplication(start);      }    } else {    }  }  return super.basicPutPart2(event,entry,isInitialized,lastModified,clearConflict);}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  private void cancelNotification(){  final NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  nm.cancel(NOTIFICATION_ID);}  }
class C{  public void writeShort(int v) throws IOException {  _os.write(v >> 8);  _os.write(v);}  }
class C{  public static Object clone(final Object o){  if (o instanceof Cloneable) {    final Object result;    if (o.getClass().isArray()) {      final Class componentType=o.getClass().getComponentType();      if (!componentType.isPrimitive()) {        result=((Object[])o).clone();      } else {        int length=Array.getLength(o);        result=Array.newInstance(componentType,length);        while (length-- > 0) {          Array.set(result,length,Array.get(o,length));        }      }    } else {      try {        result=MethodUtils.invokeMethod(o,"clone",null);      } catch (      final NoSuchMethodException e) {        throw new CloneFailedException("Cloneable type " + o.getClass().getName() + " has no clone method",e);      }catch (      final IllegalAccessException e) {        throw new CloneFailedException("Cannot clone Cloneable type " + o.getClass().getName(),e);      }catch (      final InvocationTargetException e) {        throw new CloneFailedException("Exception cloning Cloneable type " + o.getClass().getName(),e.getTargetException());      }    }    return result;  }  return null;}  }
class C{  public static Tour createRandomTour(int length){  Tour tour=createCanonicalTour(length);  Collections.shuffle(tour.nodes);  return tour;}  }
class C{  public static BinaryVariable newBoolean(){  return new BinaryVariable(1);}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public void append(int key,float value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    float[] nvalues=new float[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public static List<CIMInstance> executeQuery(WBEMClient cimClient,CIMObjectPath objectPath,String query,String queryLanguage){  _log.info(String.format("Executing query: %s, objectPath: %s, query language: %s",query,objectPath,queryLanguage));  CloseableIterator<CIMInstance> iterator=null;  List<CIMInstance> instanceList=new ArrayList<CIMInstance>();  try {    iterator=cimClient.execQuery(objectPath,query,queryLanguage);    while (iterator.hasNext()) {      instanceList.add(iterator.next());    }  } catch (  WBEMException we) {    _log.error("Caught an error while attempting to execute query and process query result. Query: " + query,we);  } finally {    if (iterator != null) {      iterator.close();    }  }  return instanceList;}  }
class C{  private void removeNRZIEncoding(BinaryMessage buffer){  buffer.clear(0);  for (int x=1; x < buffer.size(); x++) {    if (buffer.get(x - 1) ^ buffer.get(x)) {      buffer.set(x);    } else {      buffer.clear(x);    }  }}  }
class C{  public static char possEntityToChar(String possBareEntityWithSemicolon){  return possBareHTMLEntityWithSemicolonToChar(possBareEntityWithSemicolon,UNICODE_NBSP_160_0x0a);}  }
class C{  public BPNNTest(String name){  super(name);}  }
class C{  public static Map<IdUrlPair,List<AppResult>> groupJobs(List<AppResult> results,GroupBy groupBy){  Map<String,List<AppResult>> groupMap=new LinkedHashMap<String,List<AppResult>>();  Map<String,String> idUrlMap=new HashMap<String,String>();  for (  AppResult result : results) {    String idField=null;    String urlField=null;switch (groupBy) {case JOB_EXECUTION_ID:      idField=result.jobExecId;    urlField=result.jobExecUrl;  break;case JOB_DEFINITION_ID:idField=result.jobDefId;urlField=result.jobDefUrl;break;case FLOW_EXECUTION_ID:idField=result.flowExecId;urlField=result.flowExecUrl;break;}if (!idUrlMap.containsKey(idField)) {idUrlMap.put(idField,urlField);}if (groupMap.containsKey(idField)) {groupMap.get(idField).add(result);} else {List<AppResult> list=new ArrayList<AppResult>();list.add(result);groupMap.put(idField,list);}}Map<IdUrlPair,List<AppResult>> resultMap=new LinkedHashMap<IdUrlPair,List<AppResult>>();for (Map.Entry<String,List<AppResult>> entry : groupMap.entrySet()) {String key=entry.getKey();List<AppResult> value=entry.getValue();resultMap.put(new IdUrlPair(key,idUrlMap.get(key)),value);}return resultMap;}  }
class C{  public DoubleProperty xShiftProperty(){  return this.mapArea.getView().translateXProperty();}  }
class C{  public DistributedDataManagerImpl(ZkConnection conn,String basePath){  this(conn,basePath,DEFAULT_MAX_NODES);}  }
class C{  XmlElement(Element domElem){  m_domElem=domElem;}  }
class C{  @Override public void runModel(final Object object,final String exp){  final IModelRunner modelRunner=WorkbenchHelper.getService(IModelRunner.class);  if (modelRunner == null)   return;  modelRunner.runModel(object,exp);}  }
class C{  public static void copy(URL from,OutputStream to) throws IOException {  asByteSource(from).copyTo(to);}  }
class C{  private boolean matchStrings(String pattern,String str,boolean caseSensitive){  char[] patArr=pattern.toCharArray();  char[] strArr=str.toCharArray();  int patIdxStart=0;  int patIdxEnd=patArr.length - 1;  int strIdxStart=0;  int strIdxEnd=strArr.length - 1;  char ch;  boolean containsStar=false;  for (  char c : patArr) {    if (c == '*') {      containsStar=true;      break;    }  }  if (!containsStar) {    if (patIdxEnd != strIdxEnd) {      return false;    }    for (int i=0; i <= patIdxEnd; i++) {      ch=patArr[i];      if (ch != '?') {        if (different(caseSensitive,ch,strArr[i])) {          return false;        }      }    }    return true;  }  if (patIdxEnd == 0) {    return true;  }  while ((ch=patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {    if (ch != '?') {      if (different(caseSensitive,ch,strArr[strIdxStart])) {        return false;      }    }    patIdxStart++;    strIdxStart++;  }  if (strIdxStart > strIdxEnd) {    for (int i=patIdxStart; i <= patIdxEnd; i++) {      if (patArr[i] != '*') {        return false;      }    }    return true;  }  while ((ch=patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {    if (ch != '?') {      if (different(caseSensitive,ch,strArr[strIdxEnd])) {        return false;      }    }    patIdxEnd--;    strIdxEnd--;  }  if (strIdxStart > strIdxEnd) {    for (int i=patIdxStart; i <= patIdxEnd; i++) {      if (patArr[i] != '*') {        return false;      }    }    return true;  }  while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {    int patIdxTmp=-1;    for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {      if (patArr[i] == '*') {        patIdxTmp=i;        break;      }    }    if (patIdxTmp == patIdxStart + 1) {      patIdxStart++;      continue;    }    int patLength=patIdxTmp - patIdxStart - 1;    int strLength=strIdxEnd - strIdxStart + 1;    int foundIdx=-1;    strLoop:     for (int i=0; i <= strLength - patLength; i++) {      for (int j=0; j < patLength; j++) {        ch=patArr[patIdxStart + j + 1];        if (ch != '?') {          if (different(caseSensitive,ch,strArr[strIdxStart + i + j])) {            continue strLoop;          }        }      }      foundIdx=strIdxStart + i;      break;    }    if (foundIdx == -1) {      return false;    }    patIdxStart=patIdxTmp;    strIdxStart=foundIdx + patLength;  }  for (int i=patIdxStart; i <= patIdxEnd; i++) {    if (patArr[i] != '*') {      return false;    }  }  return true;}  }
class C{  private void checkResponseCode(Context context,long requestId,int responseCodeIndex){  Intent intent=new Intent(Consts.ACTION_RESPONSE_CODE);  intent.setClass(context,BillingService.class);  intent.putExtra(Consts.INAPP_REQUEST_ID,requestId);  intent.putExtra(Consts.INAPP_RESPONSE_CODE,responseCodeIndex);  context.startService(intent);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypegetnotations.class,args);}  }
class C{  public String escapeLDAPSearchFilter(String filter){  StringBuilder sb=new StringBuilder();  for (int i=0; i < filter.length(); i++) {    char curChar=filter.charAt(i);switch (curChar) {case '\\':      sb.append("\\5c");    break;case '*':  sb.append("\\2a");break;case '(':sb.append("\\28");break;case ')':sb.append("\\29");break;case '\u0000':sb.append("\\00");break;default :sb.append(curChar);}}return sb.toString();}  }
class C{  public BasicDiagnosticFormatter(JavacMessages msgs){  super(msgs,new BasicConfiguration());}  }
class C{  public boolean isGoalClause(){  return !isEmpty() && cachedPositiveSymbols.size() == 0;}  }
class C{  public synchronized void start(){  createRegistry(registryPort);  startJmxConnector();}  }
class C{  private void removeNodesForNextIteration(Lop node,ArrayList<Lop> finishedNodes,ArrayList<Lop> execNodes,ArrayList<Lop> queuedNodes,ArrayList<ArrayList<Lop>> jobvec) throws LopsException {  if (node.getInputs().size() == 1)   return;  boolean allQueued=true;  for (  Lop input : node.getInputs()) {    if (!queuedNodes.contains(input)) {      allQueued=false;      break;    }  }  if (allQueued)   return;  if (LOG.isTraceEnabled())   LOG.trace("  Before remove nodes for next iteration -- size of execNodes " + execNodes.size());  int jobid=Integer.MIN_VALUE;  boolean inputs_in_same_job=true;  for (  Lop input : node.getInputs()) {    int input_jobid=jobType(input,jobvec);    if (jobid == Integer.MIN_VALUE)     jobid=input_jobid; else     if (jobid != input_jobid) {      inputs_in_same_job=false;      break;    }  }  boolean unassigned_inputs=false;  for (  Lop input : node.getInputs()) {    if (input.getExecType() == ExecType.MR && !execNodes.contains(input)) {      unassigned_inputs=true;      break;    }  }  boolean child_queued=false;  for (  Lop input : node.getInputs()) {    if (queuedNodes.contains(input)) {      child_queued=true;      break;    }  }  if (LOG.isTraceEnabled()) {    LOG.trace("  Property Flags:");    LOG.trace("    Inputs in same job: " + inputs_in_same_job);    LOG.trace("    Unassigned inputs: " + unassigned_inputs);    LOG.trace("    Child queued: " + child_queued);  }  ArrayList<Lop> markedNodes=new ArrayList<Lop>();  for (  Lop tmpNode : execNodes) {    if (LOG.isTraceEnabled()) {      LOG.trace("  Checking for removal (" + tmpNode.getID() + ") "+ tmpNode.toString());    }    if (!isChild(tmpNode,node,IDMap))     continue;    if (node.getInputs().contains(tmpNode) && tmpNode.isAligner()) {      markedNodes.add(tmpNode);      if (LOG.isTraceEnabled())       LOG.trace("    Removing for next iteration (code 1): (" + tmpNode.getID() + ") "+ tmpNode.toString());    }    if (!hasOtherQueuedParentNode(tmpNode,queuedNodes,node) && branchHasNoOtherUnExecutedParents(tmpNode,node,execNodes,finishedNodes)) {      boolean queueit=false;      int code=-1;switch (node.getExecLocation()) {case Map:        if (branchCanBePiggyBackedMap(tmpNode,node,execNodes,queuedNodes,markedNodes))         queueit=true;      code=2;    break;case MapAndReduce:  if (branchCanBePiggyBackedMapAndReduce(tmpNode,node,execNodes,queuedNodes) && !tmpNode.definesMRJob())   queueit=true;code=3;break;case Reduce:if (branchCanBePiggyBackedReduce(tmpNode,node,execNodes,queuedNodes)) queueit=true;code=4;break;default :}if (queueit) {if (LOG.isTraceEnabled()) LOG.trace("    Removing for next iteration (code " + code + "): ("+ tmpNode.getID()+ ") "+ tmpNode.toString());markedNodes.add(tmpNode);}}if ((inputs_in_same_job || unassigned_inputs) && node.getExecLocation() == ExecLocation.MapAndReduce && !hasOtherMapAndReduceParentNode(tmpNode,execNodes,node) && branchCanBePiggyBackedMapAndReduce(tmpNode,node,execNodes,queuedNodes) && !tmpNode.definesMRJob()) {if (LOG.isTraceEnabled()) LOG.trace("    Removing for next iteration (code 5): (" + tmpNode.getID() + ") "+ tmpNode.toString());markedNodes.add(tmpNode);}}for (Lop enode : execNodes) {if (LOG.isTraceEnabled()) {LOG.trace("  Checking for removal - (" + enode.getID() + ") "+ enode.toString());}if (hasChildNode(enode,markedNodes) && !markedNodes.contains(enode)) {markedNodes.add(enode);if (LOG.isTraceEnabled()) LOG.trace("    Removing for next iteration (code 6) (" + enode.getID() + ") "+ enode.toString());}}if (execNodes.size() != markedNodes.size()) {for (Lop n : markedNodes) {if (n.usesDistributedCache()) gmrMapperFootprint-=computeFootprintInMapper(n);finishedNodes.remove(n);execNodes.remove(n);removeNodeByJobType(n,jobvec);queuedNodes.add(n);}}}  }
class C{  public int houseCodeAsValueFromSystemName(String systemName){  int hCode=-1;  if ((!aCodes.reset(systemName).matches()) || (!validSystemNameFormat(systemName,aCodes.group(2).charAt(0)))) {  } else {    if (hCodes.reset(systemName).matches() && hCodes.groupCount() == 4) {      try {        hCode=hCodes.group(3).charAt(0) - 0x40;      } catch (      Exception e) {        log.error("illegal character in number field system name: " + systemName);        return -1;      }    }  }  return hCode;}  }
class C{  public void mouseExited(java.awt.event.MouseEvent e){  if (shouldTakeEvents()) {    Widget mouseListWidg=getUEListenWidget(UE_INDEX_MOUSE_EXIT);    if (mouseListWidg != null) {      if (uiMgr.getTracer() != null)       uiMgr.getTracer().traceListener(this,mouseListWidg);      Catbert.ExecutionPosition ep=null;      Catbert.Context childContext=relatedContext.createChild();      childContext.setLocal("X",new Integer(e.getX()));      childContext.setLocal("Y",new Integer(e.getY()));      childContext.setLocal("RelativeX",new Float(e.getX() / boundsf.width));      childContext.setLocal("RelativeY",new Float(e.getY() / boundsf.height));      childContext.setLocal(Catbert.PASSIVE_LISTEN_VAR,null);      Widget[] listenKids=mouseListWidg.contents();      for (int i=0; i < listenKids.length; i++) {        if (listenKids[i].isProcessChainType()) {          if ((ep=processChain(listenKids[i],childContext,null,this,false)) != null) {            ep.addToStack(listenKids[i]);            ep.addToStackFinal(mouseListWidg);            return;          }        }      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.848 -0500",hash_original_method="45144F3B633868FAD50525AF05DB3D15",hash_generated_method="0F8BF8C945388E9EA49BEDC098E3099E") public void checkHeaders() throws ParseException {  String prefix="Missing a required header : ";  if (getCSeq() == null) {    throw new ParseException(prefix + CSeqHeader.NAME,0);  }  if (getTo() == null) {    throw new ParseException(prefix + ToHeader.NAME,0);  }  if (this.callIdHeader == null || this.callIdHeader.getCallId() == null || callIdHeader.getCallId().equals("")) {    throw new ParseException(prefix + CallIdHeader.NAME,0);  }  if (getFrom() == null) {    throw new ParseException(prefix + FromHeader.NAME,0);  }  if (getViaHeaders() == null) {    throw new ParseException(prefix + ViaHeader.NAME,0);  }  if (getTopmostVia() == null)   throw new ParseException("No via header in request! ",0);  if (getMethod().equals(Request.NOTIFY)) {    if (getHeader(SubscriptionStateHeader.NAME) == null)     throw new ParseException(prefix + SubscriptionStateHeader.NAME,0);    if (getHeader(EventHeader.NAME) == null)     throw new ParseException(prefix + EventHeader.NAME,0);  } else   if (getMethod().equals(Request.PUBLISH)) {    if (getHeader(EventHeader.NAME) == null)     throw new ParseException(prefix + EventHeader.NAME,0);  }  if (requestLine.getMethod().equals(Request.INVITE) || requestLine.getMethod().equals(Request.SUBSCRIBE) || requestLine.getMethod().equals(Request.REFER)) {    if (this.getContactHeader() == null) {      if (this.getToTag() == null)       throw new ParseException(prefix + ContactHeader.NAME,0);    }    if (requestLine.getUri() instanceof SipUri) {      String scheme=((SipUri)requestLine.getUri()).getScheme();      if ("sips".equalsIgnoreCase(scheme)) {        SipUri sipUri=(SipUri)this.getContactHeader().getAddress().getURI();        if (!sipUri.getScheme().equals("sips")) {          throw new ParseException("Scheme for contact should be sips:" + sipUri,0);        }      }    }  }  if (this.getContactHeader() == null && (this.getMethod().equals(Request.INVITE) || this.getMethod().equals(Request.REFER) || this.getMethod().equals(Request.SUBSCRIBE))) {    throw new ParseException("Contact Header is Mandatory for a SIP INVITE",0);  }  if (requestLine != null && requestLine.getMethod() != null && getCSeq().getMethod() != null && requestLine.getMethod().compareTo(getCSeq().getMethod()) != 0) {    throw new ParseException("CSEQ method mismatch with  Request-Line ",0);  }}  }
class C{  public void removeSnapshots(String workspaceId) throws NotFoundException, ServerException {  List<SnapshotImpl> snapshots=getSnapshot(workspaceId);  for (  SnapshotImpl snapshot : snapshots) {    try {      runtimes.removeSnapshot(snapshot);      snapshotDao.removeSnapshot(snapshot.getId());    } catch (    Exception e) {      LOG.error(e.getLocalizedMessage(),e);    }  }}  }
class C{  public SurroundWithWordSelection(){  super(org.eclipse.jface.text.templates.GlobalTemplateVariables.WordSelection.NAME,JavaTemplateMessages.JavaDocContextType_variable_description_word_selection);}  }
class C{  public static void downto(Calendar self,Calendar to,Closure closure){  if (self.compareTo(to) >= 0) {    for (Calendar i=(Calendar)self.clone(); i.compareTo(to) >= 0; i=previous(i)) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to downto() cannot be later than the value ("+ self+ ") it's called on.");}  }
class C{  public boolean filterResult(int idx){  assert filterRes != null : "Should not call filterResult for non-fast-commit transactions.";  return filterRes[idx];}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  for (  Edge<S> edge : edges) {    final S src=edge.getSrc();    sb.append(printItems(src.getItems()));    sb.append(" | " + edge.getSymbol() + " | ");    final S dest=edge.getDest();    sb.append(printItems(dest.getItems()));    if (isEndState(dest)) {      sb.append("[ ACCEPT ]");    }    sb.append("\n");  }  return sb.toString();}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case DatatypePackage.PRIMITIVE_TYPE:    return convertPrimitiveTypeToString(eDataType,instanceValue);case DatatypePackage.CONSTRAINT_INTERVAL_TYPE:  return convertConstraintIntervalTypeToString(eDataType,instanceValue);case DatatypePackage.BOOLEAN_PROPERTY_ATTRIBUTE_TYPE:return convertBooleanPropertyAttributeTypeToString(eDataType,instanceValue);case DatatypePackage.ENUM_LITERAL_PROPERTY_ATTRIBUTE_TYPE:return convertEnumLiteralPropertyAttributeTypeToString(eDataType,instanceValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public DrawerBuilder withFullscreen(boolean fullscreen){  this.mFullscreen=fullscreen;  if (fullscreen) {    withTranslucentStatusBar(false);    withTranslucentNavigationBar(false);  }  return this;}  }
class C{  public static vec3 r_div(vec3 a,vec3 b){  float x=a.m[0] / b.m[0];  float y=a.m[1] / b.m[1];  float z=a.m[2] / b.m[2];  vec3 result=new vec3(x,y,z);  return result;}  }
class C{  public boolean hasPrev(){  return super.hasAttribute(PREV);}  }
class C{  private void initActions(){  getActionMap().put(UndoAction.ID,undo.getUndoAction());  getActionMap().put(RedoAction.ID,undo.getRedoAction());}  }
class C{  public Matrix4d m10(double m10){  this.m10=m10;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);  return this;}  }
class C{  @Inline public static Object moveObject(Object fromObj,Object toObj,int numBytes,RVMArray type){  return moveObject(Address.zero(),fromObj,toObj,numBytes);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  private static void LineOrientedProtocol() throws Throwable {  PairedInputStream pis=new PairedInputStream();  InflaterInputStream iis=new InflaterInputStream(pis);  PairedOutputStream pos=new PairedOutputStream(pis);  pis.setPairedOutputStream(pos);  DeflaterOutputStream dos=new DeflaterOutputStream(pos,true);  checkLOP(iis,dos);}  }
class C{  public EnumMap(EnumMap<K,? extends V> m){  keyType=m.keyType;  keyUniverse=m.keyUniverse;  vals=m.vals.clone();  size=m.size;}  }
class C{  public boolean allowOtherChunksInBetween(String id){  return false;}  }
class C{  public boolean isResponse(){  return this.requestMsg != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:38.175 -0500",hash_original_method="45A6F1E38538846BA699CFB220CE3AE3",hash_generated_method="DFD2A6D833E8FF563A6C31E0748E4021") @DSSafe(DSCat.SAFE_LIST) @DSVerified public final boolean transact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {  if (false)   Log.v("Binder","Transact: " + code + " to "+ this);  if (data != null) {    data.setDataPosition(0);  }  boolean r=onTransact(code,data,reply,flags);  if (reply != null) {    reply.setDataPosition(0);  }  this.addTaint(data.getTaint());  this.addTaint(reply.getTaint());  data.mValueIBinder=this;  reply.mValueIBinder=this;  return r;}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public void snapshot(int cameraId){  final int encWidth=768;  final int encHeight=432;  if (enable.containsKey(cameraId) && !enable.get(cameraId)) {    return;  }  Camera camera=null;synchronized (cameraLock) {    try {      camera=prepareCamera(cameraId,encWidth,encHeight);      if (camera == null) {        return;      }      if (Cfg.DEBUG) {        Check.log(TAG + " (snapshot), cameraId: " + cameraId);      }      if (this.surface == null) {        int[] surfaceparams=new int[1];        GLES20.glGenTextures(1,surfaceparams,0);        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,surfaceparams[0]);        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);        this.surface=new SurfaceTexture(surfaceparams[0]);      }      camera.setPreviewTexture(surface);      camera.startPreview();      camera.setOneShotPreviewCallback(previewCallback);      cameraLock.wait();    } catch (    Exception e) {      if (Cfg.DEBUG) {        Check.log(TAG + " (snapshot) ERROR: " + e);      }    }  }}  }
class C{  public void addRequestListener(TransportAddress localAddress,RequestListener listener){  eventDispatcher.addRequestListener(localAddress,listener);}  }
class C{  public Spring addListener(SpringListener newListener){  if (newListener == null) {    throw new IllegalArgumentException("newListener is required");  }  mListeners.add(newListener);  return this;}  }
class C{  private void processResolveWorklist(){  for (int i=SootClass.BODIES; i >= SootClass.HIERARCHY; i--) {    while (!worklist[i].isEmpty()) {      SootClass sc=(SootClass)worklist[i].removeFirst();      if (resolveEverything()) {        boolean onlySignatures=sc.isPhantom() || (Options.v().no_bodies_for_excluded() && Scene.v().isExcluded(sc) && !Scene.v().getBasicClasses().contains(sc.getName()));        if (onlySignatures) {          bringToSignatures(sc);          sc.setPhantomClass();          if (sc.isPhantom()) {            for (            SootMethod m : sc.getMethods()) {              m.setPhantom(true);            }            for (            SootField f : sc.getFields()) {              f.setPhantom(true);            }          }        } else         bringToBodies(sc);      } else {switch (i) {case SootClass.BODIES:          bringToBodies(sc);        break;case SootClass.SIGNATURES:      bringToSignatures(sc);    break;case SootClass.HIERARCHY:  bringToHierarchy(sc);break;}}}}}  }
class C{  private Map<Unit,Collection<ExceptionDest>> addDestToMap(Map<Unit,Collection<ExceptionDest>> map,Unit u,Trap t,ThrowableSet caught){  Collection<ExceptionDest> dests=(map == null ? null : map.get(u));  if (dests == null) {    if (t == null) {      return map;    } else {      if (map == null) {        map=new HashMap<Unit,Collection<ExceptionDest>>(unitChain.size() * 2 + 1);      }      dests=new ArrayList<ExceptionDest>(3);      map.put(u,dests);    }  }  dests.add(new ExceptionDest(t,caught));  return map;}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public ParameterCountInvalidException(String message){  super(message);}  }
class C{  protected void notifyListeners(boolean isDeployed){  for (  DeployableMonitorListener listener : listeners) {    getLogger().debug("Notifying monitor listener [" + listener + "]",this.getClass().getName());    if (isDeployed) {      listener.deployed();    } else {      listener.undeployed();    }  }}  }
class C{  public final void reset(int index){  bcIndex=index;}  }
class C{  public AnimationBuilder repeatCount(@IntRange(from=-1) int repeatCount){  viewAnimator.repeatCount(repeatCount);  return this;}  }
class C{  public PdfRendererBuilder useUnicodeToUpperTransformer(FSTextTransformer tr){  this._unicodeToUpperTransformer=tr;  return this;}  }
class C{  OptionsTreeSelectionListener(final JTree tree){  _tree=tree;}  }
class C{  private VPlexClusterInfo findTargets(List<PortInfo> targetPortInfo,List<VPlexTargetInfo> targetInfoList,boolean allTargetsOnSameCluster) throws VPlexApiException {  VPlexClusterInfo targetClusterInfo=null;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexClusterInfo> clusterInfoList=discoveryMgr.getClusterInfoLite();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    List<VPlexTargetInfo> clusterTargetInfoList=discoveryMgr.getTargetInfoForCluster(clusterInfo.getName());    for (    PortInfo portInfo : targetPortInfo) {      String portWWN=portInfo.getPortWWN();      for (      VPlexTargetInfo clusterTargetInfo : clusterTargetInfoList) {        if (portWWN.equals(clusterTargetInfo.getPortWwn())) {          targetInfoList.add(clusterTargetInfo);          targetClusterInfo=clusterInfo;          break;        }      }    }    if ((allTargetsOnSameCluster) && (!targetInfoList.isEmpty())) {      break;    }  }  return targetClusterInfo;}  }
class C{  public boolean isProjectFolder() throws ServerException {  final VirtualFileEntry projectFile;  try {    projectFile=getChild(Constants.CODENVY_PROJECT_FILE_RELATIVE_PATH);  } catch (  ForbiddenException e) {    throw new ServerException(e.getServiceError());  }  return projectFile != null && projectFile.isFile();}  }
class C{  static long inverseMod64(long val){  long t=val;  t*=2 - val * t;  t*=2 - val * t;  t*=2 - val * t;  t*=2 - val * t;  t*=2 - val * t;  assert (t * val == 1);  return t;}  }
class C{  public ContainerProcesses top(final TopParams params) throws IOException {  final String[] psArgs=params.getPsArgs();  try (final DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("GET").path(apiVersionPathPrefix + "/containers/" + params.getContainer()+ "/top")){    if (psArgs != null && psArgs.length != 0) {      StringBuilder psArgsQueryBuilder=new StringBuilder();      for (int i=0, l=psArgs.length; i < l; i++) {        if (i > 0) {          psArgsQueryBuilder.append('+');        }        psArgsQueryBuilder.append(URLEncoder.encode(psArgs[i],"UTF-8"));      }      connection.query("ps_args",psArgsQueryBuilder.toString());    }    final DockerResponse response=connection.request();    if (OK.getStatusCode() != response.getStatus()) {      throw getDockerException(response);    }    return parseResponseStreamAndClose(response.getInputStream(),ContainerProcesses.class);  } }  }
class C{  public boolean evaluate(long fileSize,int nTuples,T tuple){  return (this.fileSize > 0 && fileSize > this.fileSize) || (cntTuples > 0 && nTuples > 0 && nTuples % cntTuples == 0) || (tuplePredicate != null && tuplePredicate.test(tuple));}  }
class C{  public boolean isXRoundedLabels(){  return mXRoundedLabels;}  }
class C{  public void monitorUse(InternalDistributedSystem system){  this.system=system;  DM dmgr=system.getDistributionManager();  dmgr.addMembershipListener(this);  MembershipManager mmgr=dmgr.getMembershipManager();  if (mmgr != null) {    log("Log opened with new distributed system connection.  " + system.getDM().getMembershipManager().getView());  } else {    log("Log opened with new distributed system connection.  Membership view not yet available in this VM.");  }}  }
class C{  public static boolean reflectionEquals(Object lhs,Object rhs,boolean testTransients,Class reflectUpToClass,String[] excludeFields){  if (lhs == rhs) {    return true;  }  if (lhs == null || rhs == null) {    return false;  }  Class lhsClass=lhs.getClass();  Class rhsClass=rhs.getClass();  Class testClass;  if (lhsClass.isInstance(rhs)) {    testClass=lhsClass;    if (!rhsClass.isInstance(lhs)) {      testClass=rhsClass;    }  } else   if (rhsClass.isInstance(lhs)) {    testClass=rhsClass;    if (!lhsClass.isInstance(rhs)) {      testClass=lhsClass;    }  } else {    return false;  }  EqualsBuilder equalsBuilder=new EqualsBuilder();  try {    reflectionAppend(lhs,rhs,testClass,equalsBuilder,testTransients,excludeFields);    while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {      testClass=testClass.getSuperclass();      reflectionAppend(lhs,rhs,testClass,equalsBuilder,testTransients,excludeFields);    }  } catch (  IllegalArgumentException e) {    return false;  }  return equalsBuilder.isEquals();}  }
class C{  private static Set<String> jaccardSet(String strA){  Set<String> set=new HashSet<>();  for (int i=0, sz=strA.length(); i < sz; i+=2) {    int end=Math.min(i + 2,sz);    String s=strA.substring(i,end);    set.add(s);  }  return set;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TCLASSIFIER;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.LABELLED_STATEMENT__STATEMENT:    return basicSetStatement(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public ImportNode(ClassNode type,String fieldName,String alias){  this.type=type;  this.alias=alias;  this.isStar=false;  this.isStatic=true;  this.packageName=null;  this.fieldName=fieldName;}  }
class C{  private String optNodeDigest(ParseTreeNode node){  StringBuilder sb=new StringBuilder();  sb.append('(');  for (  ParseTreeNode child : node.children()) {    nodeDigest(child,sb);    if (sb.length() > longestKeyLength) {      return null;    }  }  nodeTail(node,sb);  if (sb.length() > longestKeyLength) {    return null;  }  return sb.toString();}  }
class C{  public static void copyAndScaleBootAnimation(Context context,InputStream input,String dst) throws IOException {  final OutputStream os=new FileOutputStream(dst);  final ZipOutputStream zos=new ZipOutputStream(new BufferedOutputStream(os));  final ZipInputStream bootAni=new ZipInputStream(new BufferedInputStream(input));  ZipEntry ze;  zos.setMethod(ZipOutputStream.STORED);  final byte[] bytes=new byte[4096];  int len;  while ((ze=bootAni.getNextEntry()) != null) {    ZipEntry entry=new ZipEntry(ze.getName());    entry.setMethod(ZipEntry.STORED);    entry.setCrc(ze.getCrc());    entry.setSize(ze.getSize());    entry.setCompressedSize(ze.getSize());    if (!ze.getName().equals("desc.txt")) {      zos.putNextEntry(entry);      while ((len=bootAni.read(bytes)) > 0) {        zos.write(bytes,0,len);      }    } else {      String line;      BufferedReader reader=new BufferedReader(new InputStreamReader(bootAni));      final String[] info=reader.readLine().split(" ");      int scaledWidth;      int scaledHeight;      WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);      DisplayMetrics dm=new DisplayMetrics();      wm.getDefaultDisplay().getRealMetrics(dm);      if (dm.widthPixels > dm.heightPixels) {        scaledWidth=dm.heightPixels;        scaledHeight=dm.widthPixels;      } else {        scaledWidth=dm.widthPixels;        scaledHeight=dm.heightPixels;      }      int width=Integer.parseInt(info[0]);      int height=Integer.parseInt(info[1]);      if (width == height)       scaledHeight=scaledWidth; else {        float scale=(float)scaledWidth / (float)width;        int newHeight=(int)((float)height * scale);        if (newHeight < scaledHeight)         scaledHeight=newHeight;      }      CRC32 crc32=new CRC32();      int size=0;      ByteBuffer buffer=ByteBuffer.wrap(bytes);      line=String.format("%d %d %s\n",scaledWidth,scaledHeight,info[2]);      buffer.put(line.getBytes());      size+=line.getBytes().length;      crc32.update(line.getBytes());      while ((line=reader.readLine()) != null) {        line=String.format("%s\n",line);        buffer.put(line.getBytes());        size+=line.getBytes().length;        crc32.update(line.getBytes());      }      entry.setCrc(crc32.getValue());      entry.setSize(size);      entry.setCompressedSize(size);      zos.putNextEntry(entry);      zos.write(buffer.array(),0,size);    }    zos.closeEntry();  }  zos.close();}  }
class C{  public static boolean isXML11ValidNmtoken(String nmtoken){  int length=nmtoken.length();  if (length == 0)   return false;  for (int i=0; i < length; ++i) {    char ch=nmtoken.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=nmtoken.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }  }  return true;}  }
class C{  public Picker count(int min,int max){  mSelectionSpec.setMinSelectable(min);  mSelectionSpec.setMaxSelectable(max);  return this;}  }
class C{  public boolean isDhcp(){  return dhcp;}  }
class C{  private static <T>SolrInputDocument convert(T ts,TimeSeriesConverter<T> converter){  BinaryTimeSeries series=converter.to(ts);  SolrInputDocument solrDocument=new SolrInputDocument();  series.getFields().entrySet().forEach(null);  return solrDocument;}  }
class C{  public void testClearBitTopNegative(){  byte aBytes[]={1,-128,56,100,-15,35,26};  int aSign=-1;  int number=63;  byte rBytes[]={-1,127,-2,127,-57,-101,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void windowClosing(WindowEvent e){  log.debug("VSDecoderPane windowClosing() called...");}  }
class C{  public final void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  if ((null != m_elemContext.m_elementName) && (m_elemContext.m_elementName.equalsIgnoreCase("SCRIPT") || m_elemContext.m_elementName.equalsIgnoreCase("STYLE"))) {    try {      if (m_elemContext.m_startTagOpen) {        closeStartTag();        m_elemContext.m_startTagOpen=false;      }      m_ispreserve=true;      if (shouldIndent())       indent();      writeNormalizedChars(ch,start,length,true,m_lineSepUse);    } catch (    IOException ioe) {      throw new org.xml.sax.SAXException(Utils.messages.createMessage(MsgKey.ER_OIERROR,null),ioe);    }  } else {    super.cdata(ch,start,length);  }}  }
class C{  public void insert(int index){  if (!m_indicators[index]) {    if (m_number == 0) {      m_first=index;      m_next[index]=-1;      m_previous[index]=-1;    } else {      m_previous[m_first]=index;      m_next[index]=m_first;      m_previous[index]=-1;      m_first=index;    }    m_indicators[index]=true;    m_number++;  }}  }
class C{  public TurnCandidateHarvest(TurnCandidateHarvester harvester,HostCandidate hostCandidate){  super(harvester,hostCandidate);}  }
class C{  public void uninstallUI(JComponent c){  uninstallKeyboardActions();  uninstallListeners();  uninstallDefaults();  dividerLocationIsSet=false;  dividerKeyboardResize=false;  splitPane=null;}  }
class C{  final public MutableString replace(final MutableString s){  return replace(0,Integer.MAX_VALUE,s);}  }
class C{  public static String padRight(String inString,int length){  return fixStringLength(inString,length,true);}  }
class C{  private void extractParameters(Point[] bullEyeCornerPoints) throws NotFoundException {  boolean[] resab=sampleLine(bullEyeCornerPoints[0],bullEyeCornerPoints[1],2 * nbCenterLayers + 1);  boolean[] resbc=sampleLine(bullEyeCornerPoints[1],bullEyeCornerPoints[2],2 * nbCenterLayers + 1);  boolean[] rescd=sampleLine(bullEyeCornerPoints[2],bullEyeCornerPoints[3],2 * nbCenterLayers + 1);  boolean[] resda=sampleLine(bullEyeCornerPoints[3],bullEyeCornerPoints[0],2 * nbCenterLayers + 1);  if (resab[0] && resab[2 * nbCenterLayers]) {    shift=0;  } else   if (resbc[0] && resbc[2 * nbCenterLayers]) {    shift=1;  } else   if (rescd[0] && rescd[2 * nbCenterLayers]) {    shift=2;  } else   if (resda[0] && resda[2 * nbCenterLayers]) {    shift=3;  } else {    throw NotFoundException.getNotFoundInstance();  }  boolean[] parameterData;  boolean[] shiftedParameterData;  if (compact) {    shiftedParameterData=new boolean[28];    for (int i=0; i < 7; i++) {      shiftedParameterData[i]=resab[2 + i];      shiftedParameterData[i + 7]=resbc[2 + i];      shiftedParameterData[i + 14]=rescd[2 + i];      shiftedParameterData[i + 21]=resda[2 + i];    }    parameterData=new boolean[28];    for (int i=0; i < 28; i++) {      parameterData[i]=shiftedParameterData[(i + shift * 7) % 28];    }  } else {    shiftedParameterData=new boolean[40];    for (int i=0; i < 11; i++) {      if (i < 5) {        shiftedParameterData[i]=resab[2 + i];        shiftedParameterData[i + 10]=resbc[2 + i];        shiftedParameterData[i + 20]=rescd[2 + i];        shiftedParameterData[i + 30]=resda[2 + i];      }      if (i > 5) {        shiftedParameterData[i - 1]=resab[2 + i];        shiftedParameterData[i + 10 - 1]=resbc[2 + i];        shiftedParameterData[i + 20 - 1]=rescd[2 + i];        shiftedParameterData[i + 30 - 1]=resda[2 + i];      }    }    parameterData=new boolean[40];    for (int i=0; i < 40; i++) {      parameterData[i]=shiftedParameterData[(i + shift * 10) % 40];    }  }  correctParameterData(parameterData,compact);  getParameters(parameterData);}  }
class C{  private static void ensureDocumentBuilder() throws DSSException {  if (dbFactory != null) {    return;  }  dbFactory=DocumentBuilderFactory.newInstance();  dbFactory.setNamespaceAware(true);  try {    dbFactory.setFeature("http://xml.org/sax/features/external-general-entities",false);    dbFactory.setFeature("http://xml.org/sax/features/external-parameter-entities",false);    dbFactory.setXIncludeAware(false);    dbFactory.setExpandEntityReferences(false);  } catch (  ParserConfigurationException e) {    throw new DSSException(e);  }}  }
class C{  public double classProb(int classIndex,Instance instance,int theSubset) throws Exception {  m_disc.input(instance);  Instance temp=m_disc.output();  return m_nb.distributionForInstance(temp)[classIndex];}  }
class C{  public static boolean checkNetwork(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=connectivityManager == null ? null : connectivityManager.getActiveNetworkInfo();  return networkInfo != null && networkInfo.isConnected();}  }
class C{  private void testEmptyStreams(){  Stream<Movie> moviesEmptyStream=Stream.empty();  System.out.println("Number of movies:" + moviesEmptyStream.count());}  }
class C{  public ReferToHeader createReferToHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  ReferTo referTo=new ReferTo();  referTo.setAddress(address);  return referTo;}  }
class C{  public void startUsingDistance(float deltaAngle){  if (deltaAngle == 0)   return;  startCommon();  mLastFlingAngle=0;synchronized (this) {    mRotator.startRotate(0.0f,-deltaAngle,mAnimationDuration);  }  post(this);}  }
class C{  protected final void switchState(final TransactionState newState) throws SQLException {synchronized (getSynchronizationObject()) {    final TransactionState currentState=state;    if (currentState == newState)     return;    if (currentState.isValidTransition(newState)) {      state=newState;      transactionListenerDispatcher.transactionStateChanged(this,newState,currentState);    } else {      throw new SQLException(String.format("Unable to change transaction state: state %s is not valid after %s",newState,currentState));    }  }}  }
class C{  public boolean isSetShortSet(){  return this.shortSet != null;}  }
class C{  private void deleteOldDocuments(String deletionQuery,UpdateRequestProcessor processor,SolrQueryRequest req) throws IOException {  DeleteUpdateCommand delete=new DeleteUpdateCommand(req);  delete.setQuery(deletionQuery);  processor.processDelete(delete);}  }
class C{  void loadSettingsFromFile(){  settings.loadSettingsFromJson();}  }
class C{  public DrawerItem(int type,int id,String desc,int icon){  this.type=type;  this.id=id;  this.desc=desc;  this.iconResourceId=icon;}  }
class C{  public static <T>TreeSet<T> newTreeSet(){  return new TreeSet<T>();}  }
class C{  public String maxDepthTipText(){  return "The maximum tree depth (-1 for no restriction).";}  }
class C{  public final void removeColumn(int index){  if (index < 0 || index >= variables.size()) {    throw new IllegalArgumentException("Not a column in this data set: " + index);  }  variables.remove(index);  int[] rows=new int[data.length];  for (int i=0; i < data.length; i++) {    rows[i]=i;  }  int[] cols=new int[data[0].length - 1];  int m=-1;  for (int i=0; i < data[0].length; i++) {    if (i != index) {      cols[++m]=i;    }  }  data=viewSelection(rows,cols);}  }
class C{  public void iinc(final int local,final int amount){  mv.visitIincInsn(local,amount);}  }
class C{  protected final V unwrapKey(Object key){  return (V)key;}  }
class C{  @Override public int hashCode(){  int result=39;  result=HashUtilities.hashCode(result,getToolTipText());  result=HashUtilities.hashCode(result,getURLText());  return result;}  }
class C{  public static InputStream openContactPhotoInputStream(ContentResolver cr,Uri contactUri){  return openContactPhotoInputStream(cr,contactUri,false);}  }
class C{  public void checkWall(){  if (!getProcessPost()) {    return;  }  log("Checking wall posts",Level.FINE);  try {    Network memory=getBot().memory().newMemory();    Vertex facebook=memory.createVertex(getPrimitive());    Vertex vertex=facebook.getRelationship(Primitive.LASTTIMELINE);    long last=0;    if (vertex != null) {      last=((Number)vertex.getData()).longValue();    }    long max=0;    ResponseList<Post> timeline=null;    boolean more=true;    int page=1;    int count=0;    int like=0;    this.errors=0;    while (more && (count <= this.maxPost) && page <= this.maxPage) {      if (last == 0) {        timeline=getConnection().getFeed(new Reading().fields("id","message","caption","description","created_time","from"));        more=false;      } else {        Reading paging=new Reading();        paging.fields("id","message","caption","description","created_time","from");        max=last;        paging.since(new Date(last));        timeline=getConnection().getFeed(paging);        if ((timeline == null) || (timeline.size() < 20)) {          more=false;        }        page++;      }      if ((timeline == null) || timeline.isEmpty()) {        log("Empty wall",Level.FINE);        break;      }      log("Processing posts",Level.INFO,timeline.size());      for (int index=timeline.size() - 1; index >= 0; index--) {        if (count >= this.maxPost) {          log("Max posts",Level.FINE,count);          break;        }        if (this.errors > this.maxErrors) {          log("Max errors",Level.WARNING,this.errors);          break;        }        Post post=timeline.get(index);        String userId=post.getFrom() == null ? "anonymous" : post.getFrom().getId();        String userName=post.getFrom() == null ? "anonymous" : post.getFrom().getName();        log("Processing post",Level.FINE,post.getId(),userName,post.getCaption());        long postTime=post.getCreatedTime().getTime();        String postId=post.getId();        if (postTime > max) {          max=postTime;        }        if (!userId.equals(this.userName)) {          if ((System.currentTimeMillis() - postTime) > DAY) {            log("Day old post",Level.INFO,postId,postTime);            more=false;            continue;          }          if (postTime > last) {            boolean match=false;            String message=post.getMessage();            if (message == null || message.isEmpty()) {              message=post.getCaption();            }            if (getLikeAllPosts()) {              if (like >= this.maxLike) {                log("Max like",Level.FINE,like);              } else {                like++;                like(post);                Utils.sleep(500);              }            }            if (message != null && !message.isEmpty()) {              List<String> postWords=new TextStream(message.toLowerCase()).allWords();              if (!getLikeAllPosts()) {                for (                String keywords : getLikeKeywords()) {                  List<String> keyWords=new TextStream(keywords.toLowerCase()).allWords();                  if (!keyWords.isEmpty()) {                    if (postWords.containsAll(keyWords)) {                      if (like >= this.maxLike) {                        log("Max like",Level.FINE,like);                      } else {                        like++;                        like(post);                        Utils.sleep(500);                      }                      break;                    }                  }                }              }              for (              String text : getPostKeywords()) {                List<String> keywords=new TextStream(text.toLowerCase()).allWords();                if (!keywords.isEmpty() && postWords.containsAll(keywords)) {                  match=true;                  break;                }              }              if (match || getProcessAllPosts()) {                count++;                log("Processing post",Level.FINE,post.getCaption(),post.getDescription(),post.getMessage(),userId,userName);                this.wallPosts.add(post.getId());                input(post);                Utils.sleep(500);              } else {                log("Skipping post, missing keywords.",Level.FINE,post.getCaption(),post.getDescription(),post.getMessage());              }            } else {              log("Empty message",Level.FINE,post);            }          } else {            log("Old post",Level.INFO,postId,postTime);          }        } else {          log("Ignoring own post",Level.INFO,postId);        }      }    }    if (count <= this.maxPost) {      timeline=getConnection().getFeed(new Reading().fields("id","from","created_time","comments"));      if ((timeline != null) && !timeline.isEmpty()) {        log("Processing post comments",Level.INFO,timeline.size());        for (int index=timeline.size() - 1; index >= 0; index--) {          if (count >= this.maxPost) {            log("Max posts",Level.FINE,count);            break;          }          if (this.errors > this.maxErrors) {            log("Max errors",Level.WARNING,this.errors);            break;          }          Post post=timeline.get(index);          log("Processing post comments",Level.FINE,post.getId(),post.getCaption());          PagableList<Comment> comments=post.getComments();          if (comments != null && !comments.isEmpty()) {            for (            Comment comment : comments) {              long[] values=processComment(comment,null,memory,count,max,last);              if (values == null) {                break;              }              count=(int)values[0];              max=values[1];              if (count == -1) {                break;              }              ResponseList<Comment> replies=getConnection().getCommentReplies(comment.getId());              if ((replies != null) && !replies.isEmpty()) {                for (int index2=replies.size() - 1; index2 >= 0; index2--) {                  Comment reply=replies.get(index2);                  values=processComment(reply,comment,memory,count,max,last);                  if (values == null) {                    break;                  }                  count=(int)values[0];                  max=values[1];                }              }            }          } else {            log("No comments",Level.FINE,post.getId());          }        }      }    } else {      log("Max posts",Level.FINE,count);    }    if (max != 0) {      facebook.setRelationship(Primitive.LASTTIMELINE,memory.createVertex(max));      memory.save();    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  @LargeTest public void testSkipDisplayNone() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<div>First</div>"+ "<div style=\"display: none;\">Second</div>"+ "<div>Third</div>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,META_STATE_ALT_LEFT_ON);  assertSelectionString("1");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("Third");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("Third");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");}  }
class C{  public float length2(){  return this.x * this.x + this.y * this.y + this.z * this.z;}  }
class C{  public static ConditionOperand BIT_TEST(){  return new ConditionOperand(BIT_TEST);}  }
class C{  public static WroModelFactory decorate(final WroModelFactory decorated,final List<Transformer<WroModel>> modelTransformers){  return decorated instanceof DefaultWroModelFactoryDecorator ? decorated : new DefaultWroModelFactoryDecorator(decorated,modelTransformers);}  }
class C{  private String outOfBoundsMsg(int index){  return "Index: " + index + ", Size: "+ size;}  }
class C{  public static <V,E>UnmodifiableTree<V,E> unmodifiableTree(Tree<V,E> tree){  return new UnmodifiableTree<V,E>(tree);}  }
class C{  public void connectInput(SharedDouble input){  this.input=input;}  }
class C{  public static PBEWrapper createWrapper(Provider p,String algo,String passwd,PrintStream out) throws Exception {  if (algo.toUpperCase().contains(PBKDF2)) {    return new PBKDF2Wrapper(p,algo,passwd,out);  } else   if (algo.toUpperCase().contains(AES)) {    return new AESPBEWrapper(p,algo,passwd,out);  } else {    return new PBECipherWrapper(p,algo,passwd,out);  }}  }
class C{  public void addRevision(String authorinitials,String revremark){  addRevision(maxNumber() + 1,(new java.util.Date()).toString(),authorinitials,revremark);}  }
class C{  public void listenerPaint(Object source,java.awt.Graphics g){  if (drawDistanceObjects) {    for (int i=0; i < segments.size() - 1; i++) {      paintLine((LatLonPoint)(segments.elementAt(i)),(LatLonPoint)(segments.elementAt(i + 1)),g);    }    if (rPoint1 != null && rPoint2 != null) {      paintRubberband(rPoint1,rPoint2,g);    }  }}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  stream(input,output);  return output.toByteArray();}  }
class C{  public void init() throws ServletException {}  }
class C{  public void close(){  eof=true;  buf=null;  pendinglen=0;  offset=0;  if (stream != null && closeStream) {    try {      stream.close();    } catch (    Exception e) {    }  }  stream=null;}  }
class C{  public int category(JavaScriptElement node){  return CATEGORY_DISPATCHER.match(node);}  }
class C{  void syncSummaryView(View view){  boolean useDefaultSummary=true;  if (isChecked && !isEmpty(summaryOn)) {    summaryView.setText(summaryOn);    useDefaultSummary=false;  } else   if (!isChecked && !isEmpty(summaryOff)) {    summaryView.setText(summaryOff);    useDefaultSummary=false;  }  if (useDefaultSummary) {    CharSequence summary=getSummary();    if (!isEmpty(summary)) {      summaryView.setText(summary);      useDefaultSummary=false;    }  }  int newVisibility=View.GONE;  if (!useDefaultSummary) {    newVisibility=View.VISIBLE;  }  if (newVisibility != summaryView.getVisibility()) {    summaryView.setVisibility(newVisibility);  }}  }
class C{  private boolean isClosed(){  return str == null;}  }
class C{  public void clear(){  leftChild=null;  rightSibling=null;  parent=null;}  }
class C{  @Override public void clear(){  final Entity ce=ce();  clientgui.getBoardView().select(null);  clientgui.getBoardView().cursor(null);  clientgui.getBoardView().clearMovementEnvelope();  if (ce == null) {    return;  }  ce.setCarefulStand(false);  ce.setIsJumpingNow(false);  if (ce.getMovementMode() == EntityMovementMode.BIPED_SWIM) {    ce.setMovementMode(EntityMovementMode.BIPED);  } else   if (ce.getMovementMode() == EntityMovementMode.QUAD_SWIM) {    ce.setMovementMode(EntityMovementMode.QUAD);  }  cmd=new MovePath(clientgui.getClient().getGame(),ce);  clientgui.bv.setWeaponFieldofFire(ce,cmd);  if (gear != MovementDisplay.GEAR_JUMP) {    gear=MovementDisplay.GEAR_LAND;    Color walkColor=GUIPreferences.getInstance().getColor(GUIPreferences.ADVANCED_MOVE_DEFAULT_COLOR);    clientgui.getBoardView().setHighlightColor(walkColor);  } else   if (!cmd.isJumping()) {    cmd.addStep(MoveStepType.START_JUMP);  }  clientgui.bv.clearMovementData();  butDone.setText("<html><b>" + Messages.getString("MovementDisplay.Done") + "</b></html>");  updateProneButtons();  updateRACButton();  updateSearchlightButton();  updateElevationButtons();  updateTakeOffButtons();  updateLandButtons();  updateFlyOffButton();  updateLaunchButton();  updateDropButton();  updateRecklessButton();  updateHoverButton();  updateManeuverButton();  loadedUnits=ce.getLoadedUnits();  if (ce instanceof Aero) {    for (    Entity e : ce.getUnitsUnloadableFromBays()) {      if (!loadedUnits.contains(e)) {        loadedUnits.add(e);      }    }  }  updateLoadButtons();  updateJoinButton();  updateRecoveryButton();  updateSpeedButtons();  updateThrustButton();  updateRollButton();  checkFuel();  checkOOC();  checkAtmosphere();  if (ce.isDropping()) {    gear=MovementDisplay.GEAR_TURN;    disableButtons();    butDone.setEnabled(true);  }  if (ce.hasUnloadedUnitsFromBays()) {    disableButtons();    updateLoadButtons();    butDone.setEnabled(true);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_PROGRAM_1__COMMENT_1:    getComment_1().clear();  return;case UmplePackage.ANONYMOUS_PROGRAM_1__DIRECTIVE_1:getDirective_1().clear();return;}super.eUnset(featureID);}  }
class C{  private boolean retrieveWorksheetList(SpreadsheetEntry spreadsheet){  WorksheetFeed feed;  try {    feed=service.getFeed(spreadsheet.getWorksheetFeedUrl(),WorksheetFeed.class);  } catch (  IOException e) {    SpreadsheetApiDemo.showErrorBox(e);    return false;  }catch (  ServiceException e) {    SpreadsheetApiDemo.showErrorBox(e);    return false;  }  this.worksheetEntries=feed.getEntries();  return true;}  }
class C{  public static byte[] createByteArray(int size,String data){  byte[] byteArray=new byte[size];  for (int i=0; i < size; i++) {    byteArray[i]=Byte.parseByte(data,2);  }  return byteArray;}  }
class C{  private void cleanupDestination(State state,int finalStatus){  closeDestination(state);  if (state.mFilename != null && DownloaderService.isStatusError(finalStatus)) {    new File(state.mFilename).delete();    state.mFilename=null;  }}  }
class C{  public static void normalizeVector(float[] v){  float mag2=v[0] * v[0] + v[1] * v[1] + v[2] * v[2] + v[3] * v[3];  if (Math.abs(mag2) > 0.00001f && Math.abs(mag2 - 1.0f) > 0.00001f) {    float mag=(float)Math.sqrt(mag2);    v[0]=v[0] / mag;    v[1]=v[1] / mag;    v[2]=v[2] / mag;    v[3]=v[3] / mag;  }}  }
class C{  public static void copy(Path from,Path to,Predicate<Path> shouldCopyFile) throws IOException {  Files.walkFileTree(from,new FileCopier(from,to,shouldCopyFile,false));}  }
class C{  public void testDontStem() throws IOException {  CzechAnalyzer cz=new CzechAnalyzer();  assertAnalyzesTo(cz,"e",new String[]{"e"});  assertAnalyzesTo(cz,"zi",new String[]{"zi"});  cz.close();}  }
class C{  public double dotProduct(DoubleVector v){  return x * v.x + y * v.y + z * v.z;}  }
class C{  public String openExternal(String url){  try {    Intent intent=null;    intent=new Intent(Intent.ACTION_VIEW);    Uri uri=Uri.parse(url);    if ("file".equals(uri.getScheme())) {      intent.setDataAndType(uri,webView.getResourceApi().getMimeType(uri));    } else {      intent.setData(uri);    }    intent.putExtra(Browser.EXTRA_APPLICATION_ID,cordova.getActivity().getPackageName());    this.cordova.getActivity().startActivity(intent);    return "";  } catch (  android.content.ActivityNotFoundException e) {    Log.d(LOG_TAG,"InAppBrowser: Error loading url " + url + ":"+ e.toString());    return e.toString();  }}  }
class C{  static void refCountChanged(Long address,boolean decRefCount,int rc){  getInstance().refCountChanged(address,decRefCount,rc);}  }
class C{  protected SimpleAttribute_Impl(){  super();}  }
class C{  public void put(String identifier,ActiveConnectionRecord record){synchronized (records) {    Set<ActiveConnectionRecord> connections=records.get(identifier);    if (connections == null) {      connections=Collections.synchronizedSet(Collections.newSetFromMap(new LinkedHashMap<ActiveConnectionRecord,Boolean>()));      records.put(identifier,connections);    }    connections.add(record);  }}  }
class C{  public void addUncheckedCodeDefaults(AnnotationMirror absoluteDefaultAnno,TypeUseLocation[] locations){  for (  TypeUseLocation location : locations) {    addUncheckedCodeDefault(absoluteDefaultAnno,location);  }}  }
class C{  private NoAxiomFilter(){}  }
class C{  public void update(double value){  extremityMonitor.update(value);}  }
class C{  public void sendSerialMessage(SerialMessage m,SerialListener reply){  sendMessage(m,reply);}  }
class C{  private RdapSearchResults makeSearchResults(List<ContactResource> contacts,List<Registrar> registrars,DateTime now){  int numEntities=contacts.size();  OutputDataType outputDataType;  if (numEntities > 1) {    outputDataType=OutputDataType.SUMMARY;  } else {    outputDataType=OutputDataType.FULL;    for (    Registrar registrar : registrars) {      if (registrar.isActiveAndPubliclyVisible()) {        numEntities++;        if (numEntities > 1) {          outputDataType=OutputDataType.SUMMARY;          break;        }      }    }  }  List<ImmutableMap<String,Object>> jsonOutputList=new ArrayList<>();  for (  ContactResource contact : contacts) {    if (jsonOutputList.size() >= rdapResultSetMaxSize) {      return RdapSearchResults.create(ImmutableList.copyOf(jsonOutputList),true);    }    jsonOutputList.add(RdapJsonFormatter.makeRdapJsonForContact(contact,false,Optional.<DesignatedContact.Type>absent(),rdapLinkBase,rdapWhoisServer,now,outputDataType));  }  for (  Registrar registrar : registrars) {    if (registrar.isActiveAndPubliclyVisible()) {      if (jsonOutputList.size() >= rdapResultSetMaxSize) {        return RdapSearchResults.create(ImmutableList.copyOf(jsonOutputList),true);      }      jsonOutputList.add(RdapJsonFormatter.makeRdapJsonForRegistrar(registrar,false,rdapLinkBase,rdapWhoisServer,now,outputDataType));    }  }  return RdapSearchResults.create(ImmutableList.copyOf(jsonOutputList));}  }
class C{  protected ScriptC(int id,RenderScript rs){  super(id,rs);}  }
class C{  private static Level determineLogLevel(String logLevel){  Level level=Level.INFO;  if (DEBUG_LOG_LEVEL.equals(logLevel)) {    level=Level.DEBUG;  } else   if (WARN_LOG_LEVEL.equals(logLevel)) {    level=Level.WARN;  } else   if (ERROR_LOG_LEVEL.equals(logLevel)) {    level=Level.ERROR;  } else   if (INFO_LOG_LEVEL.equals(logLevel)) {    level=Level.INFO;  }  return level;}  }
class C{  public boolean hideSubMenus(){  if (mActionButtonPopup != null) {    mActionButtonPopup.dismiss();    return true;  }  return false;}  }
class C{  public void addActiveHandler(ContentHandler handler,ModeUsage attributeModeUsage){  activeHandlers.addElement(handler);  activeHandlersAttributeModeUsage.addElement(attributeModeUsage);  attributeProcessing=Math.max(attributeProcessing,attributeModeUsage.getAttributeProcessing());  if (attributeModeUsage.isContextDependent())   contextDependent=true;}  }
class C{  public static String utf8Encode(String str,String defultReturn){  if (!isEmpty(str) && str.getBytes().length != str.length()) {    try {      return URLEncoder.encode(str,"UTF-8");    } catch (    UnsupportedEncodingException e) {      return defultReturn;    }  }  return str;}  }
class C{  public Builder(ToneOptions options){  isHtml=options.isHtml;  tones=options.tones;  includeSentences=options.includeSentences;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String headersFile=request.getParameter("headers");  String getHeadersFile=request.getParameter("getheaders");  String xrdsFile=request.getParameter("xrds");  String htmlFile=request.getParameter("html");  if (getHeadersFile != null)   setHeadersFromFile(getHeadersFile,response); else   if (headersFile != null)   setHeadersFromFile(headersFile,response);  if (xrdsFile != null) {    BufferedInputStream input=new BufferedInputStream(new FileInputStream(_testDataPath + "/xrds/" + xrdsFile));    ServletOutputStream output=response.getOutputStream();    byte[] data=new byte[8192];    int bytesRead=input.read(data,0,data.length);    while (bytesRead > 0) {      output.write(data,0,bytesRead);      bytesRead=input.read(data,0,data.length);    }    input.close();    output.close();  } else   if (htmlFile != null) {    BufferedReader input=new BufferedReader(new FileReader(_testDataPath + "/html/" + htmlFile));    ServletOutputStream output=response.getOutputStream();    String line=input.readLine();    while (line != null) {      output.println(line);      line=input.readLine();    }    input.close();    output.close();  }}  }
class C{  public int numberOfFilesBeforePurge() throws CLIArgumentParserException {  if (CLIArgumentParser.shouldClearDFAs()) {    int purge=CLIArgumentParser.numberOfFilesBeforePurge();    if (purge >= 1) {      return purge;    } else {      throw new CLIArgumentParserException("Invalid number of files specified for purge.");    }  }  if (!yamlConfiguration.isPresent() || !yamlConfiguration.get().isPurgeSet()) {    return 0;  }  int purge=yamlConfiguration.get().getPurge();  if (purge >= 1) {    return purge;  } else {    throw new YAMLException("Invalid number of files specified for purge in config file.");  }}  }
class C{  public static void createTypeSubstitution(final Connection connection,final int treeNodeId,final int baseTypeId,final List<Integer> memberPath,final int position,final int offset,final IAddress address,final INaviModule module) throws CouldntSaveDataException {  try {    final String query=String.format("INSERT INTO %s (module_id, address, \"position\", \"offset\", expression_id, path, " + "base_type_id) VALUES (?, ?, ?, ?, ?, ?, ?)",CTableNames.EXPRESSION_TYPES_TABLE);    final PreparedStatement statement=connection.prepareStatement(query);    try {      statement.setInt(1,module.getConfiguration().getId());      statement.setLong(2,address.toLong());      statement.setInt(3,position);      statement.setInt(4,offset);      statement.setInt(5,treeNodeId);      statement.setArray(6,connection.createArrayOf("int4",memberPath.toArray()));      statement.setInt(7,baseTypeId);      statement.executeUpdate();    }  finally {      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public Transfer writeInt(int x) throws IOException {  out.writeInt(x);  return this;}  }
class C{  public boolean hasValue(){  return mValue != null;}  }
class C{  private void filterSOPConfigurationSettings(){  if (existsSopOrgSetting()) {    return;  }  for (Iterator<VOConfigurationSetting> i=configurationSettings.iterator(); i.hasNext(); ) {    VOConfigurationSetting setting=i.next();    if (isSopSetting(setting)) {      i.remove();    }  }}  }
class C{  private void initializeLayout(){  setLayout(new BorderLayout());  JPanel basicStatsPanel=new JPanel();  basicStatsPanel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  GridLayout gL=new GridLayout(0,2);  gL.setVgap(2);  basicStatsPanel.setLayout(gL);  if (displayIDInfo) {    basicStatsPanel.add(new JLabel("Neuron Id:"));    basicStatsPanel.add(idLabel);  }  basicStatsPanel.add(new JLabel("Activation:"));  basicStatsPanel.add(tfActivation);  basicStatsPanel.add(new JLabel("Label:"));  basicStatsPanel.add(tfNeuronLabel);  JPanel trianglePanel=new JPanel();  trianglePanel.setBorder(BorderFactory.createEmptyBorder(0,5,5,5));  trianglePanel.setLayout(new FlowLayout(FlowLayout.TRAILING));  trianglePanel.add(detailTriangle);  BoxLayout layout=new BoxLayout(detailPanel,BoxLayout.Y_AXIS);  detailPanel.setLayout(layout);  GridLayout gl=new GridLayout(0,2);  gl.setVgap(5);  JPanel clampP=new JPanel(gl);  clampP.add(new JLabel("Clamped: "));  clampP.add(clamped);  clampP.setAlignmentX(CENTER_ALIGNMENT);  detailPanel.add(clampP);  detailPanel.add(Box.createVerticalStrut(5));  detailPanel.add(boundsClippingPanel);  JPanel subP=new JPanel(gl);  subP.add(new JLabel("Increment: "));  subP.add(tfIncrement);  subP.add(new JLabel("Priority:"));  subP.add(tfPriority);  subP.add(new JLabel("Input Type:"));  subP.add(inputType);  subP.setAlignmentX(CENTER_ALIGNMENT);  detailPanel.add(subP);  this.add(basicStatsPanel,BorderLayout.NORTH);  this.add(trianglePanel,BorderLayout.CENTER);  detailPanel.setVisible(detailTriangle.isDown());  this.add(detailPanel,BorderLayout.SOUTH);  TitledBorder tb=BorderFactory.createTitledBorder("Neuron Properties");  this.setBorder(tb);}  }
class C{  protected void resetOMGraphicAfterEditRender(){  ((OMDistance)getGraphic()).paintOnlyPoly=false;}  }
class C{  private static String unescapeForEncodeUriCompatability(String str){  return str.replace("%21","!").replace("%7E","~").replace("%27","'").replace("%28","(").replace("%29",")").replace("%3B",";").replace("%2F","/").replace("%3F","?").replace("%3A",":").replace("%40","@").replace("%26","&").replace("%3D","=").replace("%2B","+").replace("%24","$").replace("%2C",",").replace("%23","#");}  }
class C{  boolean fixImportsOnly(){  return fixImportsOnly;}  }
class C{  @Override public void onCreate(SQLiteDatabase db){  db.execSQL("CREATE TABLE '" + table_notes + "' ( '"+ key_id+ "' INTEGER PRIMARY KEY AUTOINCREMENT, '"+ key_remote_id+ "' INTEGER, '"+ key_status+ "' VARCHAR(50), '"+ key_title+ "' TEXT, '"+ key_modified+ "' TEXT, '"+ key_content+ "' TEXT)");}  }
class C{  @Override public void close() throws XMLStreamException {  log.log(Level.FINE,"close()");  stream.close();}  }
class C{  public void testValidityCaseSensitivity(){  assertTrue(sh.isValid("Sunday"));  assertFalse(sh.isValid("sunday"));}  }
class C{  private void readObject(){}  }
class C{  public void comprobardisponibilidadentregaExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  AppUser appUser=getAppUser(request);  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(appUser));  GestionPrestamosBI prestamosService=services.lookupGestionPrestamosBI();  String codigo=request.getParameter("idprestamo");  PrestamoVO prestamo_VO=prestamosService.getPrestamo(codigo);  Collection detallesPrestamos=prestamosService.obtenerDetallesPrestamoByUsuario(prestamo_VO);  prestamosService.comprobarDisponibilidadDetallesPrestamo(prestamo_VO,detallesPrestamos);  PrestamosUtils.establecerVistas(prestamo_VO,appUser,request,prestamosService,detallesPrestamos);  setInTemporalSession(request,PrestamosConstants.DETALLE_PRESTAMO_KEY,detallesPrestamos);  request.setAttribute(PrestamosConstants.VER_COLUMNA_DISPONIBILIDAD,new Boolean(true));  request.setAttribute(PrestamosConstants.METHOD,METHOD_COMPROBARDISPONIBILIDADENTREGA);  verPrestamo(mappings,form,request,response);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y;  double z=0;  int a, i;  int progress=0;  int numPoints=0;  double maxValue;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  String whatToInterpolate="";  String returnNumberToInterpolate="all points";  String suffix="";  boolean excludeNeverClassified=false;  boolean excludeUnclassified=false;  boolean excludeBareGround=false;  boolean excludeLowVegetation=false;  boolean excludeMediumVegetation=false;  boolean excludeHighVegetation=false;  boolean excludeBuilding=false;  boolean excludeLowPoint=false;  boolean excludeModelKeyPoint=false;  boolean excludeWater=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  suffix=args[1].trim();  whatToInterpolate=args[2].toLowerCase();  returnNumberToInterpolate=args[3].toLowerCase();  resolution=Double.parseDouble(args[4]);  double circleCircumscrbingGridCell=Math.sqrt(2) * resolution / 2.0;  excludeNeverClassified=Boolean.parseBoolean(args[5]);  excludeUnclassified=Boolean.parseBoolean(args[6]);  excludeBareGround=Boolean.parseBoolean(args[7]);  excludeLowVegetation=Boolean.parseBoolean(args[8]);  excludeMediumVegetation=Boolean.parseBoolean(args[9]);  excludeHighVegetation=Boolean.parseBoolean(args[10]);  excludeBuilding=Boolean.parseBoolean(args[11]);  excludeLowPoint=Boolean.parseBoolean(args[12]);  excludeModelKeyPoint=Boolean.parseBoolean(args[13]);  excludeWater=Boolean.parseBoolean(args[14]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    boolean[] classValuesToExclude=new boolean[32];    if (excludeNeverClassified) {      classValuesToExclude[0]=true;    }    if (excludeUnclassified) {      classValuesToExclude[1]=true;    }    if (excludeBareGround) {      classValuesToExclude[2]=true;    }    if (excludeLowVegetation) {      classValuesToExclude[3]=true;    }    if (excludeMediumVegetation) {      classValuesToExclude[4]=true;    }    if (excludeHighVegetation) {      classValuesToExclude[5]=true;    }    if (excludeBuilding) {      classValuesToExclude[6]=true;    }    if (excludeLowPoint) {      classValuesToExclude[7]=true;    }    if (excludeModelKeyPoint) {      classValuesToExclude[8]=true;    }    if (excludeWater) {      classValuesToExclude[9]=true;    }    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    PointRecColours pointColours;    double[] entry;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ " Reading point data:",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (returnNumberToInterpolate.equals("all points")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            numPoints++;          }        } else         if (returnNumberToInterpolate.equals("first return")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            numPoints++;          }        } else {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            numPoints++;          }        }      }      minX=Double.POSITIVE_INFINITY;      maxX=Double.NEGATIVE_INFINITY;      minY=Double.POSITIVE_INFINITY;      maxY=Double.NEGATIVE_INFINITY;      KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));      if (returnNumberToInterpolate.equals("all points")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else       if (returnNumberToInterpolate.equals("first return")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      }      outputHeader=pointFiles[j].replace(".las",suffix + ".dep");      if ((new File(outputHeader)).exists()) {        (new File(outputHeader)).delete();        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      west=minX - 0.5 * resolution;      north=maxY + 0.5 * resolution;      nrows=(int)(Math.ceil((north - minY) / resolution));      ncols=(int)(Math.ceil((maxX - west) / resolution));      south=north - nrows * resolution;      east=west + ncols * resolution;      fw=new FileWriter(outputHeader,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="Min:\t" + Double.toString(Integer.MAX_VALUE);      out.println(str1);      str1="Max:\t" + Double.toString(Integer.MIN_VALUE);      out.println(str1);      str1="North:\t" + Double.toString(north);      out.println(str1);      str1="South:\t" + Double.toString(south);      out.println(str1);      str1="East:\t" + Double.toString(east);      out.println(str1);      str1="West:\t" + Double.toString(west);      out.println(str1);      str1="Cols:\t" + Integer.toString(ncols);      out.println(str1);      str1="Rows:\t" + Integer.toString(nrows);      out.println(str1);      str1="Data Type:\t" + "float";      out.println(str1);      str1="Z Units:\t" + "not specified";      out.println(str1);      str1="XY Units:\t" + "not specified";      out.println(str1);      str1="Projection:\t" + "not specified";      out.println(str1);      if (!whatToInterpolate.equals("rgb data")) {        str1="Data Scale:\tcontinuous";      } else {        str1="Data Scale:\trgb";      }      out.println(str1);      if (whatToInterpolate.equals("rgb data")) {        str1="Preferred Palette:\t" + "rgb.pal";      } else       if (whatToInterpolate.equals("intensity")) {        str1="Preferred Palette:\t" + "grey.pal";      } else {        str1="Preferred Palette:\t" + "spectrum.pal";      }      out.println(str1);      str1="NoData:\t" + noData;      out.println(str1);      if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {        str1="Byte Order:\t" + "LITTLE_ENDIAN";      } else {        str1="Byte Order:\t" + "BIG_ENDIAN";      }      out.println(str1);      out.close();      WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");      double halfResolution=resolution / 2;      for (row=0; row < nrows; row++) {        for (col=0; col < ncols; col++) {          easting=(col * resolution) + (west + halfResolution);          northing=(north - halfResolution) - (row * resolution);          entry=new double[]{northing,easting};          results=pointsTree.neighborsWithinRange(entry,circleCircumscrbingGridCell);          if (!results.isEmpty()) {            maxValue=Float.NEGATIVE_INFINITY;            for (i=0; i < results.size(); i++) {              z=results.get(i).value;              if (z > maxValue) {                maxValue=z;              }              ;            }            image.setValue(row,col,maxValue);          } else {            image.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nrows - 1));        updateProgress("Interpolating point data:",progress);      }      image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      image.addMetadataEntry("Created on " + new Date());      image.close();    }    returnData(pointFiles[0].replace(".las",suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  int readPartition(ByteSequencesReader reader) throws IOException {  long start=System.currentTimeMillis();  if (valueLength != -1) {    int limit=ramBufferSize.bytes / valueLength;    for (int i=0; i < limit; i++) {      BytesRef item=null;      try {        item=reader.next();      } catch (      Throwable t) {        verifyChecksum(t,reader);      }      if (item == null) {        break;      }      buffer.append(item);    }  } else {    while (true) {      BytesRef item=null;      try {        item=reader.next();      } catch (      Throwable t) {        verifyChecksum(t,reader);      }      if (item == null) {        break;      }      buffer.append(item);      if (bufferBytesUsed.get() > ramBufferSize.bytes) {        break;      }    }  }  sortInfo.readTime+=System.currentTimeMillis() - start;  return buffer.size();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY:    return basicSetBody(null,msgs);case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK:  return basicSet_lok(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private boolean isTrueSubtypeOf(String subTypeSignature,String superTypeSignature){  if (subTypeSignature.equals(superTypeSignature))   return true;  if (SignatureUtil.isJavaLangObject(subTypeSignature))   return false;  if (Signature.getTypeSignatureKind(subTypeSignature) != Signature.BASE_TYPE_SIGNATURE && SignatureUtil.isJavaLangObject(superTypeSignature))   return true;  IJavaProject project=fUnit.getJavaProject();  try {    if ((Signature.getTypeSignatureKind(subTypeSignature) & (Signature.TYPE_VARIABLE_SIGNATURE | Signature.CLASS_TYPE_SIGNATURE)) == 0)     return false;    IType subType=project.findType(SignatureUtil.stripSignatureToFQN(subTypeSignature));    if (subType == null)     return false;    if ((Signature.getTypeSignatureKind(superTypeSignature) & (Signature.TYPE_VARIABLE_SIGNATURE | Signature.CLASS_TYPE_SIGNATURE)) == 0)     return false;    IType superType=project.findType(SignatureUtil.stripSignatureToFQN(superTypeSignature));    if (superType == null)     return false;    ITypeHierarchy hierarchy=subType.newSupertypeHierarchy(null);    IType[] types=hierarchy.getAllSupertypes(subType);    for (int i=0; i < types.length; i++)     if (types[i].equals(superType))     return true;  } catch (  JavaModelException e) {  }  return false;}  }
class C{  public static void write(OMLine line,Link link,LinkProperties props) throws IOException {switch (line.getRenderType()) {case OMLine.RENDERTYPE_LATLON:    double[] ll=line.getLL();  LinkLine.write((float)ll[0],(float)ll[1],(float)ll[2],(float)ll[3],line.getLineType(),line.getNumSegs(),props,link.dos);break;case OMLine.RENDERTYPE_XY:int[] pts=line.getPts();LinkLine.write(pts[0],pts[1],pts[2],pts[3],props,link.dos);break;case OMLine.RENDERTYPE_OFFSET:ll=line.getLL();pts=line.getPts();LinkLine.write((float)ll[0],(float)ll[1],pts[0],pts[1],pts[2],pts[3],props,link.dos);break;default :Debug.error("LinkLine.write: line rendertype unknown.");}}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.STRUCTURED_TEXT;}  }
class C{  protected static FontUIResource _getControlTextFont(){  if (controlFont == null) {    try {      controlFont=new FontUIResource(Font.getFont("swing.plaf.metal.controlFont",new Font(FONT_DEFAULT,Font.PLAIN,FONT_SIZE)));    } catch (    Exception e) {      controlFont=new FontUIResource(FONT_DEFAULT,Font.PLAIN,FONT_SIZE);    }  }  return controlFont;}  }
class C{  private <T>Collection<T> union(final Collection<T> coll1,final Collection<T> coll2){  Collection<T> union=new HashSet<T>();  union.addAll(coll1);  union.addAll(coll2);  return union;}  }
class C{  protected void ensureRouteConsecutivity(){  boolean deAllocateRestOfRoute=false;  for (int i=_idxCurrentOrder + 1; i < _orders.size(); i++) {    log.debug(_trainName + " ensureRouteConsecutivity for loop #" + i);    BlockOrder bo=getBlockOrderAt(i);    OBlock block=bo.getBlock();    if (!block.isAllocatedTo(this) || (block.getState() & OBlock.OCCUPIED) != 0) {      deAllocateRestOfRoute=true;    }    if (deAllocateRestOfRoute) {      if (block.isAllocatedTo(this)) {        log.info(_trainName + " deallocating " + block.getDisplayName()+ " due to risk of deadlock");        block.deAllocate(this);      }    }  }}  }
class C{  public boolean equals(Object o){  if (!(o instanceof JumboEnumSet))   return super.equals(o);  JumboEnumSet<?> es=(JumboEnumSet<?>)o;  if (es.elementType != elementType)   return size == 0 && es.size == 0;  return Arrays.equals(es.elements,elements);}  }
class C{  public static BundleCollection loadBundles(final CFMLEngineFactory engFac,final File cacheRootDir,final File jarDirectory,final File rc,final BundleCollection old) throws IOException, BundleException {  final JarFile jf=new JarFile(rc);  try {    final Manifest mani=jf.getManifest();    if (mani == null)     throw new IOException("lucee core [" + rc + "] is invalid, there is no META-INF/MANIFEST.MF File");    final Attributes attrs=mani.getMainAttributes();    final Properties defProp=loadDefaultProperties(jf);    final Map<String,Object> config=new HashMap<String,Object>();{      final Iterator<Entry<Object,Object>> it=defProp.entrySet().iterator();      Entry<Object,Object> e;      String k;      while (it.hasNext()) {        e=it.next();        k=(String)e.getKey();        if (!k.startsWith("org.") && !k.startsWith("felix."))         continue;        config.put(k,CFMLEngineFactorySupport.removeQuotes((String)e.getValue(),true));      }    }    Felix felix;    if (old != null) {      removeBundlesEL(old);      felix=old.felix;      BundleUtil.stop(felix,false);      felix=engFac.getFelix(cacheRootDir,config);    } else     felix=engFac.getFelix(cacheRootDir,config);    final BundleContext bc=felix.getBundleContext();    final String rb=attrs.getValue("Require-Bundle");    if (Util.isEmpty(rb))     throw new IOException("lucee core [" + rc + "] is invalid, no Require-Bundle defintion found in the META-INF/MANIFEST.MF File");    final String rbf=attrs.getValue("Require-Bundle-Fragment");    final Map<String,String> requiredBundles=readRequireBundle(rb);    final Map<String,String> requiredBundleFragments=readRequireBundle(rbf);    final Map<String,File> availableBundles=loadAvailableBundles(jarDirectory);    Entry<String,String> e;    File f;    String id;    final List<Bundle> bundles=new ArrayList<Bundle>();    Iterator<Entry<String,String>> it=requiredBundles.entrySet().iterator();    while (it.hasNext()) {      e=it.next();      id=e.getKey() + "|" + e.getValue();      f=availableBundles.get(id);      if (f == null) {      }      if (f == null)       f=engFac.downloadBundle(e.getKey(),e.getValue(),null);      bundles.add(BundleUtil.addBundle(engFac,bc,f,null));    }    final List<Bundle> fragments=new ArrayList<Bundle>();    it=requiredBundleFragments.entrySet().iterator();    while (it.hasNext()) {      e=it.next();      id=e.getKey() + "|" + e.getValue();      f=availableBundles.get(id);      if (f == null)       f=engFac.downloadBundle(e.getKey(),e.getValue(),null);      fragments.add(BundleUtil.addBundle(engFac,bc,f,null));    }    Bundle bundle;    bundle=BundleUtil.addBundle(engFac,bc,rc,null);    BundleUtil.start(engFac,bundles);    BundleUtil.start(engFac,bundle);    return new BundleCollection(felix,bundle,bundles);  }  finally {    if (jf != null)     try {      jf.close();    } catch (    final IOException ioe) {    }  }}  }
class C{  public void testPutFirst() throws InterruptedException {  LinkedBlockingDeque q=new LinkedBlockingDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    Integer I=new Integer(i);    q.putFirst(I);    assertTrue(q.contains(I));  }  assertEquals(0,q.remainingCapacity());}  }
class C{  public static Rect calculateBottomInsetsOnRoundDevice(Display display,Rect systemInsets){  Point size=new Point();  display.getSize(size);  int width=size.x + systemInsets.left + systemInsets.right;  int height=size.y + systemInsets.top + systemInsets.bottom;  int minInset=(int)(height * Constants.WEAR_ROUND_MIN_INSET_PERCENT);  int bottomInset=systemInsets.bottom > minInset ? systemInsets.bottom : minInset;  double radius=width / 2;  double apothem=radius - bottomInset;  double chord=Math.sqrt(Math.pow(radius,2) - Math.pow(apothem,2)) * 2;  int leftRightInset=(int)((width - chord) / 2);  Log.d(TAG,"calculateBottomInsetsOnRoundDevice: " + bottomInset + ", "+ leftRightInset);  return new Rect(leftRightInset,0,leftRightInset,bottomInset);}  }
class C{  TopDocs(int totalHits,ScoreDoc[] scoreDocs){  this(totalHits,scoreDocs,Float.NaN);}  }
class C{  public ArrayList<String> serializeParameters(){  ListParameterization params=new ListParameterization();  logTab.appendParameters(params);  inputTab.appendParameters(params);  algTab.appendParameters(params);  evalTab.appendParameters(params);  outTab.appendParameters(params);  return params.serialize();}  }
class C{  public static _Fields findByName(String name){  return BY_NAME.get(name);}  }
class C{  private CancelAction(){  super("Cancel");}  }
class C{  public void testGetNamedItemNS2() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  String attrName;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.getNamedItemNS("http://www.nist.gov","domestic");  attrName=attribute.getNodeName();  assertEquals("namednodemapgetnameditemns02","emp:domestic",attrName);}  }
class C{  public void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  private static int parseId3Header(ParsableByteArray id3Buffer) throws ParserException {  int id1=id3Buffer.readUnsignedByte();  int id2=id3Buffer.readUnsignedByte();  int id3=id3Buffer.readUnsignedByte();  if (id1 != 'I' || id2 != 'D' || id3 != '3') {    throw new ParserException(String.format(Locale.US,"Unexpected ID3 file identifier, expected \"ID3\", actual \"%c%c%c\".",id1,id2,id3));  }  id3Buffer.skipBytes(2);  int flags=id3Buffer.readUnsignedByte();  int id3Size=id3Buffer.readSynchSafeInt();  if ((flags & 0x2) != 0) {    int extendedHeaderSize=id3Buffer.readSynchSafeInt();    if (extendedHeaderSize > 4) {      id3Buffer.skipBytes(extendedHeaderSize - 4);    }    id3Size-=extendedHeaderSize;  }  if ((flags & 0x8) != 0) {    id3Size-=10;  }  return id3Size;}  }
class C{  public SpellChecker(Directory spellIndex,StringDistance sd) throws IOException {  this(spellIndex,sd,SuggestWordQueue.DEFAULT_COMPARATOR);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeStroke(this.minorTickMarkStroke,stream);  SerialUtilities.writePaint(this.minorTickMarkPaint,stream);}  }
class C{  public IV rdfsLabelIv(){  if (rdfsLabelIv == null) {    rdfsLabelIv=tripleStore.getVocabulary().get(RDFS.LABEL);  }  return rdfsLabelIv;}  }
class C{  public Document createDocument(){  return builder.newDocument();}  }
class C{  public int readIntLE() throws IOException {  inputStream.readFully(workSpace,0,4);  return ((workSpace[3] & 0xff) << 24) | ((workSpace[2] & 0xff) << 16) | ((workSpace[1] & 0xff) << 8)| (workSpace[0] & 0xff);}  }
class C{  private void flatMapMovieActors(List<Movie> movies){  Stream<List<Actor>> actorsListStream=movies.stream().map(null);  actorsListStream.forEach(null);  Stream<Actor> actorsStream=movies.stream().flatMap(null);  actorsStream.forEach(null);}  }
class C{  @Override public void rollback(Exception e){  logger.info("[rollback]{},{} -> {}, reason:{}",this,phaseName,previoisPhaseName,e.getMessage());  phaseName.set(previoisPhaseName.get());}  }
class C{  public static boolean isSupportedOnJVM() throws LinkageError, ExceptionInInitializerError {  String requiredClassname="javax.net.ssl.SSLServerSocketFactory";  try {    Class.forName(requiredClassname);  } catch (  ClassNotFoundException e) {    return false;  }  return true;}  }
class C{  static public boolean isSameDay(Timestamp one,Timestamp two){  GregorianCalendar calOne=new GregorianCalendar();  if (one != null)   calOne.setTimeInMillis(one.getTime());  GregorianCalendar calTwo=new GregorianCalendar();  if (two != null)   calTwo.setTimeInMillis(two.getTime());  if (calOne.get(Calendar.YEAR) == calTwo.get(Calendar.YEAR) && calOne.get(Calendar.MONTH) == calTwo.get(Calendar.MONTH) && calOne.get(Calendar.DAY_OF_MONTH) == calTwo.get(Calendar.DAY_OF_MONTH))   return true;  return false;}  }
class C{  private float spacing(MotionEvent event){  float x=event.getX(0) - event.getX(1);  float y=event.getY(0) - event.getY(1);  return (float)Math.sqrt(x * x + y * y);}  }
class C{  public _BuildReason(final _BuildReason_Flag[] flags){  super(flags);}  }
class C{  public Character(){  super("character","Character");  createLayout();  setCloseable(false);}  }
class C{  public Constraint findLocalTempTableConstraint(String name){  if (localTempTableConstraints == null) {    return null;  }  return localTempTableConstraints.get(name);}  }
class C{  public CRemoteFileSystemView(final RemoteFileSystem fileSystem){  Preconditions.checkNotNull(fileSystem,"IE01496: File system argument can not be null");  m_fileSystem=fileSystem;  m_defaultDirectory=new CRemoteFile(fileSystem.getDirectory().getName(),true);}  }
class C{  public static ComponentUI createUI(JComponent c){  BETextFieldUI.addOtherListener(c);  return new BEEditorPaneUI();}  }
class C{  public void insert(int offset,int[] values,int valOffset,int len){  if (offset == _pos) {    add(values,valOffset,len);    return;  }  ensureCapacity(_pos + len);  System.arraycopy(_data,offset,_data,offset + len,_pos - offset);  System.arraycopy(values,valOffset,_data,offset,len);  _pos+=len;}  }
class C{  public Registry bind(Class type,Class converter) throws Exception {  if (type != null) {    binder.bind(type,converter);  }  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  static void runTest() throws Exception {  Thread[] threadList=new Thread[NUM_OF_THREADS];  s_conn=new Connection[NUM_OF_THREADS];  if (s_cType == C_SHARED)   s_sconn=DriverManager.getConnection(CONNECTION,UID,PWD);  for (int i=0; i < NUM_OF_THREADS; i++) {    if (WITH_OUTPUT)     System.out.println("Starting #" + i);    if (s_cType == C_PRECREATED)     s_conn[i]=DriverManager.getConnection(CONNECTION,UID,PWD);    threadList[i]=new JdbcTestPG(i);    threadList[i].start();  }  long start=System.currentTimeMillis();  setGreenLight();  for (int i=0; i < NUM_OF_THREADS; i++)   threadList[i].join();  if (s_sconn != null)   s_sconn.close();  s_sconn=null;  for (int i=0; i < NUM_OF_THREADS; i++) {    if (s_conn[i] != null)     s_conn[i].close();    s_conn[i]=null;  }  long result=System.currentTimeMillis() - start;  System.out.print(C_INFO[s_cType] + "Threads=" + NUM_OF_THREADS+ " \tYield="+ s_do_yield+ " \tms= "+ result+ " \teach= "+ (result / NUM_OF_THREADS));  System.out.println();}  }
class C{  public static boolean isParent(ClassSymbol clazz,ClassSymbol toFind){  if (clazz == null) {    return false;  }  if (clazz == toFind) {    return true;  }  if (isParent((ClassSymbol)clazz.getSuperclass().tsym,toFind)) {    return true;  }  for (  Type t : clazz.getInterfaces()) {    if (isParent((ClassSymbol)t.tsym,toFind)) {      return true;    }  }  return false;}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  public int depth(){  final String r=get(CrawlAttribute.DEPTH.key);  if (r == null)   return 0;  try {    return Integer.parseInt(r);  } catch (  final NumberFormatException e) {    ConcurrentLog.logException(e);    return 0;  }}  }
class C{  public Object peek(){  try {    return m_map[m_firstFree - 1];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public void test5_sources_closed() throws InterruptedException {  final ThickAsynchronousIterator<String> itr1=iterator("a","b","c");  final ThickAsynchronousIterator<String> itr2=iterator("d","e","f");  final ThickAsynchronousIterator<String> itr3=iterator("g","h","i");  final MultiSourceSequentialCloseableIterator<String> itr=new MultiSourceSequentialCloseableIterator<String>(itr1);  itr.add(itr2);  itr.add(itr3);  assertEquals("a",itr.next());  assertEquals("b",itr.next());  assertEquals("c",itr.next());  assertTrue(itr.hasNext());  assertFalse(itr1.hasNext());  log.info("Will close iterator.");  itr.close();  assertFalse(itr.add(iterator("xxx")));  assertFalse(itr1.open);  assertFalse(itr1.hasNext());  assertFalse(itr2.open);  assertFalse(itr2.hasNext());  assertFalse(itr3.open);  assertFalse(itr3.hasNext());  assertFalse(itr.hasNext());}  }
class C{  public static boolean isUrlWhiteListed(String url){  if (parser == null) {    Log.e(TAG,"Config was not initialised. Did you forget to Config.init(this)?");    return false;  }  return parser.getInternalWhitelist().isUrlWhiteListed(url);}  }
class C{  private ConcurrentSkipListMap.Node<K,V> loNode(){  if (lo == null)   return m.findFirst(); else   if (loInclusive)   return m.findNear(lo,GT | EQ); else   return m.findNear(lo,GT);}  }
class C{  public SplitCasesWrapper(DataWrapper data,Parameters params){  if (data == null) {    throw new NullPointerException("The given data must not be null");  }  if (params == null) {    throw new NullPointerException("The given parameters must not be null");  }  DataSet originalData=(DataSet)data.getSelectedDataModel();  DataModel model=createSplits(originalData,params);  this.setDataModel(model);  this.setSourceGraph(data.getSourceGraph());  LogDataUtils.logDataModelList("One split of the parent data.",getDataModelList());}  }
class C{  public void acceptPackage(char[] packageName){  if (this.knownPkgs.containsKey(packageName))   return;  this.knownPkgs.put(packageName,this);  char[] completion;  if (this.resolvingImports) {    if (this.resolvingStaticImports) {      completion=CharOperation.concat(packageName,new char[]{'.'});    } else {      completion=CharOperation.concat(packageName,new char[]{'.','*',';'});    }  } else {    completion=packageName;  }  int relevance=computeBaseRelevance();  relevance+=computeRelevanceForResolution();  relevance+=computeRelevanceForInterestingProposal();  relevance+=computeRelevanceForCaseMatching(this.qualifiedCompletionToken == null ? this.completionToken : this.qualifiedCompletionToken,packageName);  if (!this.resolvingImports) {    relevance+=computeRelevanceForQualification(true);  }  this.noProposal=false;  if (!this.requestor.isIgnored(CompletionProposal.PACKAGE_REF)) {    InternalCompletionProposal proposal=createProposal(CompletionProposal.PACKAGE_REF,this.actualCompletionPosition);    proposal.setDeclarationSignature(packageName);    proposal.setPackageName(packageName);    proposal.setCompletion(completion);    proposal.setReplaceRange(this.startPosition - this.offset,this.endPosition - this.offset);    proposal.setTokenRange(this.tokenStart - this.offset,this.tokenEnd - this.offset);    proposal.setRelevance(relevance);    this.requestor.accept(proposal);  }}  }
class C{  public BeanTransformerAdapter(Class<T> mappedClass,boolean checkFullyPopulated){  initialize(mappedClass);  this.checkFullyPopulated=checkFullyPopulated;}  }
class C{  @Override public int removeAllByHostHashes(final Set<String> hosthashes){  int c=0;  for (  String h : hosthashes) {    HostQueue hq=this.queues.get(h);    if (hq != null)     c+=hq.removeAllByHostHashes(hosthashes);  }  Iterator<Map.Entry<byte[],Long>> i=depthCache.iterator();  ArrayList<String> deleteHashes=new ArrayList<String>();  while (i.hasNext()) {    String h=ASCII.String(i.next().getKey());    if (hosthashes.contains(h.substring(6)))     deleteHashes.add(h);  }  for (  String h : deleteHashes)   depthCache.remove(ASCII.getBytes(h));  return c;}  }
class C{  public double quadraticMean(){  return quadraticMean.reduce(this);}  }
class C{  public int[] longToIp(long address){  int[] ip=new int[4];  for (int i=3; i >= 0; i--) {    ip[i]=(int)(address % 256);    address=address / 256;  }  return ip;}  }
class C{  public static void fail(){  Assert.fail();}  }
class C{  public static Map<String,Object> entityFailTest(DispatchContext dctx,Map<String,?> context){  Delegator delegator=dctx.getDelegator();  Locale locale=(Locale)context.get("locale");  GenericValue newEntity=delegator.makeValue("DataSource");  newEntity.set("dataSourceId","ENTITY_FAIL_TEST");  newEntity.set("dataSourceTypeId","ENTITY_FAIL_TEST");  newEntity.set("description","Entity Fail Test - Delete me if I am here");  try {    delegator.create(newEntity);  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEntityTestFailure",locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  public boolean add(final CharSequence s){  int i=d, l=s.length();  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(s,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  @SuppressWarnings("unchecked") public static ObjectListing parseListObjects(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    ObjectListing objectListing=new ObjectListing();    objectListing.setBucketName(root.getChildText("Name"));    objectListing.setMaxKeys(Integer.valueOf(root.getChildText("MaxKeys")));    objectListing.setTruncated(Boolean.valueOf(root.getChildText("IsTruncated")));    if (root.getChild("Prefix") != null) {      String prefix=root.getChildText("Prefix");      objectListing.setPrefix(isNullOrEmpty(prefix) ? null : prefix);    }    if (root.getChild("Marker") != null) {      String marker=root.getChildText("Marker");      objectListing.setMarker(isNullOrEmpty(marker) ? null : marker);    }    if (root.getChild("Delimiter") != null) {      String delimiter=root.getChildText("Delimiter");      objectListing.setDelimiter(isNullOrEmpty(delimiter) ? null : delimiter);    }    if (root.getChild("NextMarker") != null) {      String nextMarker=root.getChildText("NextMarker");      objectListing.setNextMarker(isNullOrEmpty(nextMarker) ? null : nextMarker);    }    if (root.getChild("EncodingType") != null) {      String encodingType=root.getChildText("EncodingType");      objectListing.setEncodingType(isNullOrEmpty(encodingType) ? null : encodingType);    }    List<Element> objectSummaryElems=root.getChildren("Contents");    for (    Element elem : objectSummaryElems) {      OSSObjectSummary ossObjectSummary=new OSSObjectSummary();      ossObjectSummary.setKey(elem.getChildText("Key"));      ossObjectSummary.setETag(trimQuotes(elem.getChildText("ETag")));      ossObjectSummary.setLastModified(DateUtil.parseIso8601Date(elem.getChildText("LastModified")));      ossObjectSummary.setSize(Long.valueOf(elem.getChildText("Size")));      ossObjectSummary.setStorageClass(elem.getChildText("StorageClass"));      ossObjectSummary.setBucketName(objectListing.getBucketName());      String id=elem.getChild("Owner").getChildText("ID");      String displayName=elem.getChild("Owner").getChildText("DisplayName");      ossObjectSummary.setOwner(new Owner(id,displayName));      objectListing.addObjectSummary(ossObjectSummary);    }    List<Element> commonPrefixesElems=root.getChildren("CommonPrefixes");    for (    Element elem : commonPrefixesElems) {      String prefix=elem.getChildText("Prefix");      if (!isNullOrEmpty(prefix)) {        objectListing.addCommonPrefix(prefix);      }    }    return objectListing;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  protected TraceDuring_Impl(){  super();}  }
class C{  public void addBitmapToCache(String data,Bitmap bitmap){  if (data == null || bitmap == null) {    return;  }  if (mMemoryCache != null && mMemoryCache.get(data) == null) {    mMemoryCache.put(data,bitmap);  }}  }
class C{  boolean casNext(Node<V> cmp,Node<V> val){  return UNSAFE.compareAndSwapObject(this,nextOffset,cmp,val);}  }
class C{  private View createContentView(){  FrameLayout contentView=new FrameLayout(getContext());  contentView.setId(android.R.id.content);  return contentView;}  }
class C{  public static int cardinality(long v){  return Long.bitCount(v);}  }
class C{  @NoInline @Entrypoint static void raiseArithmeticException(){  throw new java.lang.ArithmeticException();}  }
class C{  public void writeDetails(javax.xml.namespace.QName qname,org.apache.axis.encoding.SerializationContext context) throws java.io.IOException {  context.serialize(qname,null,this);}  }
class C{  @Override public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture,int width,int height){  DisplaySize=new Size(width,height);  String id=Camera.setupCamera(DisplaySize);  if (id != null) {    LiveSurface=LiveView.setPreviewSize(Camera.getLivePreviewSize(),Camera.getNativeRotation(),Camera.getSensorRotation());    Camera.setLiveSurface(LiveSurface);    LiveView.setTransform(LiveView.getSensorTransform());    if (!Camera.openCamera(id))     id=null;  }  if (id == null) {    ((ImageButton)(getActivity().findViewById(R.id.button_quality))).setEnabled(false);  }}  }
class C{  protected void addPoint(OMGraphic graphic,List<Object> record){  addGraphic(getPointList(),graphic,record);}  }
class C{  public static void split(String sourcePath) throws IOException {  RrdDb rrdSource=new RrdDb(sourcePath);  try {    String[] dsNames=rrdSource.getDsNames();    for (    String dsName : dsNames) {      RrdDef rrdDef=rrdSource.getRrdDef();      rrdDef.setPath(createSplitPath(dsName,sourcePath));      rrdDef.saveSingleDatasource(dsName);      RrdDb rrdDest=new RrdDb(rrdDef);      try {        rrdSource.copyStateTo(rrdDest);      }  finally {        rrdDest.close();      }    }  }  finally {    rrdSource.close();  }}  }
class C{  public void scrollToDate(final CalendarEvent calendarEvent){  mListViewWeeks.post(null);}  }
class C{  public boolean isImplosion(){  Object oo=get_Value(COLUMNNAME_Implosion);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DebugOutputBitStream(final OutputBitStream obs){  this(obs,System.err);}  }
class C{  public int drainTo(Collection<? super E> c){  int result=buffer.drainTo(c);  if (producer != null) {    producer.wakeUp();  }  return result;}  }
class C{  public Track queue(File file) throws IOException, UnsupportedAudioFileException {  Track track=new Track(new FileProvider(file));  track.getMetadata().put("file",file);  queue(track);  return track;}  }
class C{  private static String[] toSuffixes(String[] extensions){  String[] suffixes=new String[extensions.length];  for (int i=0; i < extensions.length; i++) {    suffixes[i]="." + extensions[i];  }  return suffixes;}  }
class C{  public boolean canSet(Class type){  return false;}  }
class C{  public void insertLocal(int index,int tag,int classInfo) throws BadBytecode {  byte[] data=new InsertLocal(this.get(),index,tag,classInfo).doit();  this.set(data);}  }
class C{  public Matcher reset(){  first=-1;  last=0;  oldLast=-1;  for (int i=0; i < groups.length; i++)   groups[i]=-1;  for (int i=0; i < locals.length; i++)   locals[i]=-1;  lastAppendPosition=0;  from=0;  to=getTextLength();  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.500 -0500",hash_original_method="BCBDE9868C3CBC78368831B9E15D690C",hash_generated_method="DCD67E531E4DDEB5D451EC285BB12232") public static int countGsmSeptets(char c){  try {    return countGsmSeptets(c,false);  } catch (  EncodeException ex) {    return 0;  }}  }
class C{  public void testBug18740() throws Exception {  if (!versionMeetsMinimum(5,0,2)) {    createTable("testWarnings","(field1 smallint(6), field2 varchar(6), UNIQUE KEY field1(field1))");    try {      this.stmt.executeUpdate("INSERT INTO testWarnings VALUES (10001, 'data1'), (10002, 'data2 foo'), (10003, 'data3'), (10004999, 'data4'), (10005, 'data5')");    } catch (    SQLException sqlEx) {      String sqlStateToCompare="01004";      if (isJdbc4()) {        sqlStateToCompare="22001";      }      assertEquals(sqlStateToCompare,sqlEx.getSQLState());      assertEquals(sqlStateToCompare,sqlEx.getNextException().getSQLState());      SQLWarning sqlWarn=this.stmt.getWarnings();      assertEquals("01000",sqlWarn.getSQLState());      assertEquals("01000",sqlWarn.getNextWarning().getSQLState());    }  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public boolean isPublic(){  return _rawClass.isPublic();}  }
class C{  protected void paintBackground(Graphics g){  super.paintBackground(g);  if (!isUseParentPaint()) {    JTextComponent editor=this.getComponent();    BETextFieldUI.paintBg(g,0,0,editor.getWidth(),editor.getHeight(),editor.isEnabled(),bg);  }}  }
class C{  protected static String extractBucket(String s3uri){  return s3uri.substring(s3uri.indexOf('@') + 1,s3uri.indexOf("/",s3uri.indexOf('@')));}  }
class C{  public void add(ContainerAtom atom){  containerChildren.add(atom);}  }
class C{  public DoubleVector minusEquals(double x){  plusEquals(-x);  return this;}  }
class C{  public static int width(int typecode){switch (typecode) {case LONGcode:case DOUBLEcode:    return 2;case VOIDcode:  return 0;default :return 1;}}  }
class C{  public Boolean isEdition(){  return edition;}  }
class C{  @RequestMapping(value="/posts/{id:\\d+}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deletePost(@PathVariable Long id){  log.debug("REST request to delete Post : {}",id);  Post post=postRepository.findOne(id);  if (!Objects.equals(post.getUser().getId(),userService.getCurrentUserId())) {    return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);  }  postService.deletePost(post);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("post",id.toString())).build();}  }
class C{  protected void parseDefineFont2(InStream in) throws IOException {  int id=in.readUI16();  int flags=in.readUI8();  int reservedFlags=in.readUI8();  int nameLength=in.readUI8();  String name=new String(in.read(nameLength));  int glyphCount=in.readUI16();  List<byte[]> glyphs=new ArrayList();  int[] offsets=new int[glyphCount + 1];  boolean is32=(flags & FONT2_32OFFSETS) != 0;  for (int i=0; i <= glyphCount; i++) {    offsets[i]=is32 ? (int)in.readUI32() : in.readUI16();  }  for (int i=1; i <= glyphCount; i++) {    int glyphSize=offsets[i] - offsets[i - 1];    byte[] glyphBytes=in.read(glyphSize);    glyphs.add(glyphBytes);  }  boolean isWide=((flags & FONT2_WIDECHARS) != 0) || (glyphCount > 256);  int[] codes=new int[glyphCount];  for (int i=0; i < glyphCount; i++) {    codes[i]=isWide ? in.readUI16() : in.readUI8();  }  int ascent=0;  int descent=0;  int leading=0;  int[] advances=null;  Rect[] bounds=null;  int[] kerningCodes1=null;  int[] kerningCodes2=null;  int[] kerningAdjustments=null;  if ((flags & FONT2_HAS_LAYOUT) != 0) {    ascent=in.readSI16();    descent=in.readSI16();    leading=in.readSI16();    advances=new int[glyphCount];    for (int i=0; i < glyphCount; i++) {      advances[i]=in.readSI16();    }    bounds=new Rect[glyphCount];    for (int i=0; i < glyphCount; i++) {      bounds[i]=new Rect(in);    }    int kerningCount=in.readUI16();    kerningCodes1=new int[kerningCount];    kerningCodes2=new int[kerningCount];    kerningAdjustments=new int[kerningCount];    for (int i=0; i < kerningCount; i++) {      kerningCodes1[i]=isWide ? in.readUI16() : in.readUI8();      kerningCodes2[i]=isWide ? in.readUI16() : in.readUI8();      kerningAdjustments[i]=in.readSI16();    }  }  SWFVectors vectors=tagtypes.tagDefineFont2(id,flags,name,glyphCount,ascent,descent,leading,codes,advances,bounds,kerningCodes1,kerningCodes2,kerningAdjustments);  if (vectors == null) {    return;  }  if (glyphs.isEmpty()) {    vectors.done();  } else {    for (    byte[] glyphBytes : glyphs) {      InStream glyphIn=new InStream(glyphBytes);      parseShape(glyphIn,vectors,false,false);    }  }}  }
class C{  public void addActionListener(ActionListener l){  actualButton.addActionListener(l);}  }
class C{  static Intent[] makeMessageIntentStack(Context context,CharSequence from,CharSequence msg){  Intent[] intents=new Intent[4];  intents[0]=Intent.makeRestartActivityTask(new ComponentName(context,com.example.android.apis.ApiDemos.class));  intents[1]=new Intent(context,com.example.android.apis.ApiDemos.class);  intents[1].putExtra("com.example.android.apis.Path","App");  intents[2]=new Intent(context,com.example.android.apis.ApiDemos.class);  intents[2].putExtra("com.example.android.apis.Path","App/Notification");  intents[3]=new Intent(context,IncomingMessageView.class);  intents[3].putExtra(IncomingMessageView.KEY_FROM,from);  intents[3].putExtra(IncomingMessageView.KEY_MESSAGE,msg);  return intents;}  }
class C{  public void insertHDU(BasicHDU<?> myHDU,int position) throws FitsException {  if (myHDU == null) {    return;  }  if (position < 0 || position > getNumberOfHDUs()) {    throw new FitsException("Attempt to insert HDU at invalid location: " + position);  }  try {    if (position == 0) {      if (getNumberOfHDUs() > 0) {        this.hduList.get(0).setPrimaryHDU(false);      }      if (myHDU.canBePrimary()) {        myHDU.setPrimaryHDU(true);        this.hduList.add(0,myHDU);      } else {        insertHDU(BasicHDU.getDummyHDU(),0);        myHDU.setPrimaryHDU(false);        this.hduList.add(1,myHDU);      }    } else {      myHDU.setPrimaryHDU(false);      this.hduList.add(position,myHDU);    }  } catch (  NoSuchElementException e) {    throw new FitsException("hduList inconsistency in insertHDU",e);  }}  }
class C{  public PidUnavailableException(final String message,final Throwable thr){  super(message,thr);}  }
class C{  private IgniteHadoopFileSystem fileSystem() throws Exception {  Configuration fsCfg=new Configuration();  fsCfg.addResource(U.resolveIgniteUrl("modules/core/src/test/config/hadoop/core-site-loopback.xml"));  fsCfg.setBoolean("fs.igfs.impl.disable.cache",true);  if (logging)   fsCfg.setBoolean(String.format(PARAM_IGFS_LOG_ENABLED,"igfs:igfs-grid@"),logging);  fsCfg.setStrings(String.format(PARAM_IGFS_LOG_DIR,"igfs:igfs-grid@"),U.getIgniteHome());  return (IgniteHadoopFileSystem)FileSystem.get(new URI("igfs://igfs:igfs-grid@/"),fsCfg);}  }
class C{  private synchronized Object updateAllLocatorInfo(RemoteLocatorJoinRequest request){  int distributedSystemId=request.getDistributedSystemId();  DistributionLocatorId locator=request.getLocator();  LocatorHelper.addLocator(distributedSystemId,locator,this,null);  return new RemoteLocatorJoinResponse(this.getAllLocatorsInfo());}  }
class C{  public static synchronized ComponentUI createUI(JComponent separator){  if (instance == null) {    instance=new StyledSeparatorUI(StyleUtil.getStyle());  }  return instance;}  }
class C{  public static String sign2(byte[] buf,SecretKey key,String algorithm){  Mac mac;  try {    mac=Mac.getInstance(algorithm);  } catch (  NoSuchAlgorithmException e) {    throw SecurityException.fatals.noSuchAlgorithmException(algorithm,e);  }  try {    mac.init(key);  } catch (  InvalidKeyException e) {    throw APIException.badRequests.theParametersAreNotValid(SecretKey.class.getName(),e);  }  return new String(Base64.encodeBase64(mac.doFinal(buf)),UTF_8);}  }
class C{  public static RedisReport create(final String name){  return create(new Config().useSingleServer().setAddress("127.0.0.1:6379"),name);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  public float asFloat(){  return asNumber().floatValue();}  }
class C{  public AttributeTableModel(Instances instances){  setInstances(instances);}  }
class C{  public String bare(){  final StringBuilder text=new StringBuilder(this.uri.toString());  if (this.uri.getPath().isEmpty()) {    text.append('/');  }  return text.toString();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"CPY");  translateAll(environment,instruction,"CPY",instructions);}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {default :    return new Token();}}  }
class C{  public Builder session(SpeechSession session){  sessionId=session.getSessionId();  return this;}  }
class C{  public static String nullToEmpty(@Nullable String string){  return (string == null) ? "" : string;}  }
class C{  RemoteThread(DistributedMember member,int threadId){  this.member=member;  this.threadId=threadId;}  }
class C{  protected void onModified(){  log.debug("onModified");  final Event e=new Event();  e.widget=this;  final ModifyEvent me=new ModifyEvent(e);  ((ModifyListener)modifyListeners.getListener()).modifyText(me);}  }
class C{  public org.oscm.example.client.SessionServiceStub.DeleteServiceSessionsForSubscriptionResponseE deleteServiceSessionsForSubscription(org.oscm.example.client.SessionServiceStub.DeleteServiceSessionsForSubscriptionE deleteServiceSessionsForSubscription0) throws java.rmi.RemoteException, org.oscm.example.client.OperationNotPermittedExceptionException, org.oscm.example.client.ObjectNotFoundExceptionException {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[0].getName());    _operationClient.getOptions().setAction("http://oscm.org/SessionService/deleteServiceSessionsForSubscriptionRequest");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),deleteServiceSessionsForSubscription0,optimizeContent(new javax.xml.namespace.QName("http://oscm.org","deleteServiceSessionsForSubscription")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.oscm.example.client.SessionServiceStub.DeleteServiceSessionsForSubscriptionResponseE.class,getEnvelopeNamespaces(_returnEnv));    return (org.oscm.example.client.SessionServiceStub.DeleteServiceSessionsForSubscriptionResponseE)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof org.oscm.example.client.OperationNotPermittedExceptionException) {            throw (org.oscm.example.client.OperationNotPermittedExceptionException)ex;          }          if (ex instanceof org.oscm.example.client.ObjectNotFoundExceptionException) {            throw (org.oscm.example.client.ObjectNotFoundExceptionException)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public final void print(char ch) throws IOException {  if (_writeEncoding != null) {    _isDisableFlush=true;    _writeEncoding.write(this,ch);    _isDisableFlush=false;    return;  }  write((byte)ch);}  }
class C{  @Override public void updateObject(int columnIndex,Object x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateObject(" + columnIndex + ", x);");    }    update(columnIndex,convertToUnknownValue(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public final byte readByte() throws IOException {  int ch=in.read();  if (ch < 0)   throw new EOFException();  return (byte)(ch);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public synchronized boolean retainAll(Collection<?> collection){  return super.retainAll(collection);}  }
class C{  @Override public void onTurnReached(int currentTurn){  clean();  TurnNotifier.get().notifyInSeconds(60,this);}  }
class C{  public boolean isStatement(){  Object oo=get_Value(COLUMNNAME_IsStatement);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean equals(Object other){  if (other == this) {    return true;  } else   if (other instanceof TDoubleArrayList) {    TDoubleArrayList that=(TDoubleArrayList)other;    if (that.size() != this.size()) {      return false;    } else {      for (int i=_pos; i-- > 0; ) {        if (this._data[i] != that._data[i]) {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public boolean isAdvancedTab(){  Object oo=get_Value(COLUMNNAME_IsAdvancedTab);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void makeUnitBox(int subdivisions,List<Geometry> meshes){  float radius=1.0f;  Geometry dest;  GeometryBuilder gb=this.getGeometryBuilder();  gb.setOrientation(GeometryBuilder.OUTSIDE);  for (int index=0; index < getFaceCount(); index++) {    GeometryBuilder.IndexedTriangleBuffer itb=gb.tessellateBoxBuffer(index,radius,subdivisions);    FloatBuffer normalBuffer=Buffers.newDirectFloatBuffer(3 * itb.getVertexCount());    gb.makeIndexedTriangleBufferNormals(itb,normalBuffer);    FloatBuffer textureCoordBuffer=Buffers.newDirectFloatBuffer(2 * itb.getVertexCount());    gb.makeUnitBoxTextureCoordinates(index,textureCoordBuffer,itb.getVertexCount());    dest=new Geometry();    dest.setElementData(GL.GL_TRIANGLES,itb.getIndexCount(),itb.getIndices());    dest.setVertexData(itb.getVertexCount(),itb.getVertices());    dest.setNormalData(normalBuffer.limit(),normalBuffer);    dest.setTextureCoordData(textureCoordBuffer.limit(),textureCoordBuffer);    meshes.add(index,dest);  }}  }
class C{  public void testEntityDeclarations(){  assertNotNull("This implementation does not parse entity declarations",sp);}  }
class C{  public static boolean isVisible(Class<?> clazz,ClassLoader classLoader){  if (classLoader == null) {    return true;  }  try {    Class<?> actualClass=classLoader.loadClass(clazz.getName());    return (clazz == actualClass);  } catch (  ClassNotFoundException ex) {    return false;  }}  }
class C{  private char readEscapeCharacter() throws IOException {  if (!fillBuffer(1)) {    throw syntaxError("Unterminated escape sequence");  }  byte escaped=buffer.readByte();switch (escaped) {case 'u':    if (!fillBuffer(4)) {      throw new EOFException("Unterminated escape sequence at path " + getPath());    }  char result=0;for (int i=0, end=i + 4; i < end; i++) {  byte c=buffer.getByte(i);  result<<=4;  if (c >= '0' && c <= '9') {    result+=(c - '0');  } else   if (c >= 'a' && c <= 'f') {    result+=(c - 'a' + 10);  } else   if (c >= 'A' && c <= 'F') {    result+=(c - 'A' + 10);  } else {    throw syntaxError("\\u" + buffer.readUtf8(4));  }}buffer.skip(4);return result;case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\n':case '\'':case '"':case '\\':default :return (char)escaped;}}  }
class C{  @Deprecated public boolean isDeriveSystemParameters(){  return isDiscoverRequestParameters();}  }
class C{  private void ensureBlobNamespace(ElementHandler handler,String qName) throws SAXException {  NamespaceDecl nsDecl=null;  String alias=qName.substring(0,Math.max(0,qName.indexOf(":")));  if (alias.equals("xml")) {    return;  }  Stack<NamespaceDecl> mapping=namespaceMap.get(alias);  if (mapping != null && mapping.size() != 0) {    nsDecl=mapping.peek();  }  if (nsDecl == null && alias.length() != 0) {    throw new SAXException(new ParseException("Undeclared namespace prefix: " + alias));  }  if (nsDecl != null && !nsDecl.inBlob && nsDecl.ns != null && !handler.blobNamespaces.contains(alias)) {    handler.blobNamespaces.add(alias);    handler.xmlBlob.namespaces.add(new XmlNamespace(alias,nsDecl.ns.getUri()));  }}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public boolean isInVolumeGroup(){  return !getVolumeGroupIds().isEmpty();}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  private static synchronized void initDisplayMetrics(Context context){  sDisplayMetrics=context.getResources().getDisplayMetrics();}  }
class C{  @Override default CompletableFuture<OptionalDouble> averageDouble(final ToDoubleFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  public BaseThumbnailStreamRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public static void main(String args[]){  Globals.getInstance();  if (args == null || args.length < 2) {    syntax();    System.exit(1);  }  String refJarFileName=null;  String cmpJarFileName=null;  String specificClass=null;  String logDirFileName=null;  for (int i=0; i < args.length; i++) {    if (i == 0) {      refJarFileName=args[0];      continue;    }    if (i == 1) {      cmpJarFileName=args[1];      continue;    }    if (args[i].startsWith("-O")) {      Globals.setCheckJarClassOrdering(true);    }    if (args[i].startsWith("-b")) {      Globals.setBitWiseClassCompare(true);    }    if (args[i].startsWith("-C")) {      Globals.setIgnoreCompileAttributes(true);    }    if (args[i].startsWith("-D")) {      Globals.setIgnoreDebugAttributes(true);    }    if (args[i].startsWith("-V")) {      Globals.setValidateClass(false);    }    if (args[i].startsWith("-c")) {      i++;      specificClass=args[i].trim();    }    if (args[i].startsWith("-u")) {      i++;      Globals.setIgnoreUnknownAttributes(true);    }    if (args[i].startsWith("-l")) {      i++;      logDirFileName=args[i].trim();    }  }  Globals.openLog(logDirFileName);  File refJarFile=new File(refJarFileName);  File cmpJarFile=new File(cmpJarFileName);  String f1=refJarFile.getAbsoluteFile().toString();  String f2=cmpJarFile.getAbsoluteFile().toString();  System.out.println("LogFile:" + Globals.getLogFileName());  System.out.println("Reference JAR:" + f1);  System.out.println("Compared  JAR:" + f2);  Globals.println("LogFile:" + Globals.getLogFileName());  Globals.println("Reference JAR:" + f1);  Globals.println("Compared  JAR:" + f2);  Globals.println("Ignore Compile Attributes:" + Globals.ignoreCompileAttributes());  Globals.println("Ignore Debug   Attributes:" + Globals.ignoreDebugAttributes());  Globals.println("Ignore Unknown Attributes:" + Globals.ignoreUnknownAttributes());  Globals.println("Class ordering check:" + Globals.checkJarClassOrdering());  Globals.println("Class validation check:" + Globals.validateClass());  Globals.println("Bit-wise compare:" + Globals.bitWiseClassCompare());  Globals.println("ClassName:" + ((specificClass == null) ? "ALL" : specificClass));  if (specificClass == null && Globals.bitWiseClassCompare() == true) {    JarFileCompare.jarCompare(refJarFileName,cmpJarFileName);  } else {    try {      ClassCompare.compareClass(refJarFileName,cmpJarFileName,specificClass);    } catch (    Exception e) {      Globals.log("Exception " + e);      throw new RuntimeException(e);    }  }  if (Globals.getErrors() > 0) {    System.out.println("FAIL");    Globals.println("FAIL");    System.exit(Globals.getErrors());  }  System.out.println("PASS");  Globals.println("PASS");  System.exit(Globals.getErrors());}  }
class C{  public boolean isOverflow(){  return this.type == TYPE_OVERFLOW;}  }
class C{  public boolean isConnected(){  return connected;}  }
class C{  public SFTPv3FileAttributes stat(String path) throws IOException {  return statBoth(path,Packet.SSH_FXP_STAT);}  }
class C{  public final CRL generateCRL(InputStream inStream) throws CRLException {  return spiImpl.engineGenerateCRL(inStream);}  }
class C{  public boolean parentsChanged(){  return parentsChanged;}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public void removeAllStructuralNodeModifiers(){  this.snms=new ArrayList<>();  this.fireTableDataChanged();}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  private LibraryFilesTableMediator(){  super("LIBRARY_FILES_TABLE");}  }
class C{  public NAdaGrad(){}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  protected void removeUnsetVariables(String... names){  for (  String name : names) {    if (!hasVariableValue(name)) {      removeVariable(name);    }  }}  }
class C{  public Gobble(InputStream in){  this(null,in,null);}  }
class C{  public ZoomToFitPageAction(final NetworkPanel networkPanel){  this.networkPanel=networkPanel;  putValue(SMALL_ICON,ResourceManager.getImageIcon("ZoomFitPage.png"));  putValue(SHORT_DESCRIPTION,"Fit all objects on screen (f)");  putValue(SHORT_DESCRIPTION,"Zoom to fit all objects on screen (f)");  networkPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke('f'),this);  networkPanel.getActionMap().put(this,this);}  }
class C{  ZoneRules(ZoneOffset baseStandardOffset,ZoneOffset baseWallOffset,List<ZoneOffsetTransition> standardOffsetTransitionList,List<ZoneOffsetTransition> transitionList,List<ZoneOffsetTransitionRule> lastRules){  super();  this.standardTransitions=new long[standardOffsetTransitionList.size()];  this.standardOffsets=new ZoneOffset[standardOffsetTransitionList.size() + 1];  this.standardOffsets[0]=baseStandardOffset;  for (int i=0; i < standardOffsetTransitionList.size(); i++) {    this.standardTransitions[i]=standardOffsetTransitionList.get(i).toEpochSecond();    this.standardOffsets[i + 1]=standardOffsetTransitionList.get(i).getOffsetAfter();  }  List<LocalDateTime> localTransitionList=new ArrayList<>();  List<ZoneOffset> localTransitionOffsetList=new ArrayList<>();  localTransitionOffsetList.add(baseWallOffset);  for (  ZoneOffsetTransition trans : transitionList) {    if (trans.isGap()) {      localTransitionList.add(trans.getDateTimeBefore());      localTransitionList.add(trans.getDateTimeAfter());    } else {      localTransitionList.add(trans.getDateTimeAfter());      localTransitionList.add(trans.getDateTimeBefore());    }    localTransitionOffsetList.add(trans.getOffsetAfter());  }  this.savingsLocalTransitions=localTransitionList.toArray(new LocalDateTime[localTransitionList.size()]);  this.wallOffsets=localTransitionOffsetList.toArray(new ZoneOffset[localTransitionOffsetList.size()]);  this.savingsInstantTransitions=new long[transitionList.size()];  for (int i=0; i < transitionList.size(); i++) {    this.savingsInstantTransitions[i]=transitionList.get(i).toEpochSecond();  }  if (lastRules.size() > 16) {    throw new IllegalArgumentException("Too many transition rules");  }  this.lastRules=lastRules.toArray(new ZoneOffsetTransitionRule[lastRules.size()]);}  }
class C{  public int intAt(int offset){  return ref.ints[offset];}  }
class C{  protected void addAttributeName(){  if (Strings.isNotEmpty(builder)) {    attribute=builder.toString();    Strings.clearBuilder(builder);  }}  }
class C{  public static Type toType(byte rtmpType){  return typeMap[rtmpType];}  }
class C{  public static void main(String[] args){  char[] test={'T','e','S','t'};  char[] test2={'T','e','S','t','2'};  MyString1 str=new MyString1(test);  MyString1 str2=new MyString1(test2);  System.out.println("\nCharacter at index 1 of MyString1 object 1: " + str.charAt(1));  System.out.println("\nLength of MyString1 object 1: " + str.length());  System.out.println("\nSubstring from index 2 to 4 of MyString1 object 1: ");  MyString1 substr=str.substring(2,4);  for (int i=0; i < substr.length(); i++) {    System.out.print(substr.charAt(i));  }  System.out.println();  System.out.println("\nMyString1 object 1 to lowercase:");  MyString1 lower=str.toLowerCase();  for (int i=0; i < lower.length(); i++) {    System.out.print(lower.charAt(i));  }  System.out.println();  System.out.println("\nMyString1 object 1 is equal to MyString1 object 2? " + str.equals(str2));  System.out.println("\nDisplay the integer 145 as a MyString1 object: ");  MyString1 value=str.valueOf(145);  for (int i=0; i < value.length(); i++) {    System.out.print(value.charAt(i));  }  System.out.println();}  }
class C{  protected ParameterImpl(){  super();}  }
class C{  public void testDoConfigureSetsConfigurationVersion() throws Exception {  configuration.setProperty(WebLogicPropertySet.CONFIGURATION_VERSION,"1.2.2.1");  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("1.2.2.1","//weblogic:configuration-version",config);}  }
class C{  public Filter removeAttribute(String attribute){  try {    remove(attribute);  } catch (  NullPointerException exc) {  }  return (this);}  }
class C{  private void addToBuffer(char c){  if (bufferIndex < MESSAGE_BUFFER_SIZE) {    buffer[bufferIndex++]=c;  } else {    overflow=true;    overflowLastChar=c;  }}  }
class C{  protected List<DecompoundedWord> makeSplit(String aWord){  List<DecompoundedWord> result=new ArrayList<DecompoundedWord>();  for (int i=0; i < aWord.length(); i++) {    String leftWord=aWord.substring(0,i + 1);    String rightWord=aWord.substring(i + 1);    boolean leftGood=dict.contains(leftWord) && leftWord.length() >= minWordLength;    boolean rightGood=rightWord.length() > minRestLength || rightWord.length() == 0;    if (leftGood && rightGood) {      DecompoundedWord split=DecompoundedWord.createFromString(leftWord + "+" + rightWord);      split.setSplitPos(i);      result.add(split);    }    for (    String morpheme : morphemes.getAll()) {      try {        String leftWithoutMorpheme=leftWord.substring(0,leftWord.length() - morpheme.length());        if (leftWord.endsWith(morpheme) && dict.contains(leftWithoutMorpheme) && rightGood) {          DecompoundedWord split=DecompoundedWord.createFromString(leftWithoutMorpheme + "(" + morpheme+ ")+"+ rightWord);          split.setSplitPos(i);          result.add(split);        }      } catch (      StringIndexOutOfBoundsException e) {        continue;      }    }  }  return result;}  }
class C{  public boolean isModifiable(){  return this.modifiable;}  }
class C{  protected TypeImpl(){  super();}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  dataUpdated(this);}  }
class C{  public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  if (curURL != null) {    if ("ExternalPage".equals(qName)) {      if (snippet) {        try {          String reversedUrl=TableUtil.reverseUrl(curURL);          WebPage row=store.get(reversedUrl);          if (row != null) {            if (desc.length() > 0) {              row.getMetadata().put(new Utf8("_dmoz_desc_"),ByteBuffer.wrap(desc.toString().getBytes()));              desc.delete(0,desc.length());            }            if (title.length() > 0) {              row.getMetadata().put(new Utf8("_dmoz_title_"),ByteBuffer.wrap(title.toString().getBytes()));              title.delete(0,title.length());            }            store.put(reversedUrl,row);            store.flush();          }        } catch (        IOException e) {          e.printStackTrace();        }      } else {        System.out.println(curURL);        if (desc.length() > 0) {          desc.delete(0,desc.length());        }        if (title.length() > 0) {          title.delete(0,title.length());        }      }      pages++;      curURL=null;    } else     if ("d:Title".equals(qName)) {      titlePending=false;    } else     if ("d:Description".equals(qName)) {      descPending=false;    }  }}  }
class C{  public RegisterOperand copyRO(){  RegisterOperand temp=new RegisterOperand(register,type);  temp.flags=flags;  temp.flags2=flags2;  temp.nextInDefUseList=nextInDefUseList;  temp.convertedFromRef=convertedFromRef;  temp.guard=guard;  if (VM.VerifyAssertions)   verifyPreciseType();  return temp;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static boolean isPackageDefault(int flags){  return (flags & (AccPublic | AccPrivate | AccProtected)) == 0;}  }
class C{  @Override public void handleMessage(Message msg){switch (msg.arg1) {case NetworkService.RETRIEVE_TITLE_ID:    if (m_prefOpenDialog) {      String title=((String[])msg.obj)[0];      String description=((String[])msg.obj)[1];      if (!stopLoadingTitle && autoTitle) {        if ("".equals(title)) {          updateTitle(title,true);        } else {          updateTitle(title,false);        }      }      if (!stopLoadingDescription && autoDescription) {        if ("".equals(description)) {          updateDescription(description,true);        } else {          updateDescription(description,false);        }      }    }  break;default :Toast.makeText(getApplicationContext(),R.string.error_unknown,Toast.LENGTH_LONG).show();break;}}  }
class C{  public static boolean isApiMethod(@NonNls PsiMethod psiMethod){  PsiModifierList psiModifierList=psiMethod.getModifierList();  if (psiModifierList.hasModifierProperty(PsiModifier.PUBLIC) && !psiModifierList.hasModifierProperty(PsiModifier.STATIC)) {    return true;  }  return false;}  }
class C{  protected int checkReceiving(Message m,DTNHost from){  if (isTransferring()) {    return TRY_LATER_BUSY;  }  if (hasMessage(m.getId()) || isDeliveredMessage(m) || super.isBlacklistedMessage(m.getId())) {    return DENIED_OLD;  }  if (m.getTtl() <= 0 && m.getTo() != getHost()) {    return DENIED_TTL;  }  if (energy != null && energy.getEnergy() <= 0) {    return MessageRouter.DENIED_LOW_RESOURCES;  }  if (!policy.acceptReceiving(from,getHost(),m)) {    return MessageRouter.DENIED_POLICY;  }  if (!makeRoomForMessage(m.getSize())) {    return DENIED_NO_SPACE;  }  return RCV_OK;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.CODE_LANGS___ANONYMOUS_CODE_LANGS_11:    return getAnonymous_codeLangs_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int unreference_pic(AVFrame pic,int refmask){  int i;  if ((pic.reference&=refmask) != 0) {    return 0;  } else {    for (i=0; delayed_pic[i] != null; i++)     if (pic == delayed_pic[i]) {      pic.reference=DELAYED_PIC_REF;      break;    }    return 1;  }}  }
class C{  @VisibleForTesting public static void resetNextTestId(){  checkState(RegistryEnvironment.UNITTEST.equals(RegistryEnvironment.get()),"Can't call resetTestIdCounts() from RegistryEnvironment.%s",RegistryEnvironment.get());  nextTestId.set(1);}  }
class C{  public static void dump(String message,Throwable exception){  printEmphasized(StringPrinter.buildString(null));}  }
class C{  private void printBootstrapMap(){  LOG.info("Bootstrap map:");  for (  Integer i : chainMap.keySet()) {    LOG.info(String.format("  %6d: %d",i,chainMap.get(i)));  }}  }
class C{  public TriangleMesh pointTowards(ReadonlyVec3D dir){  return transform(Quaternion.getAlignmentQuat(dir,Vec3D.Z_AXIS).toMatrix4x4(matrix),true);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String toString(){  return "" + value;}  }
class C{  public boolean isMandatory(){  Object oo=get_Value(COLUMNNAME_IsMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void build(PKIXBuilderParameters params) throws Exception {  CertPathBuilder builder=CertPathBuilder.getInstance("PKIX","SUN");  CertPathBuilderResult cpbr=builder.build(params);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String propV=getString(stack);  String propN=getString(stack);  Airing air=getAir(stack);  ManualRecord mr=Wizard.getInstance().getManualRecord(air);  if (mr != null && Permissions.hasPermission(Permissions.PERMISSION_EDITMETADATA,stack.getUIMgr()))   mr.setProperty(propN,propV);  return null;}  }
class C{  public <T>List<String> validateBean(T bean,String errIfBeanNull){  List<String> errors=new ArrayList<String>();  if (bean == null) {    errors.add(errIfBeanNull);    return errors;  }  Set<ConstraintViolation<T>> violations=validator.validate(bean);  for (  ConstraintViolation<T> violation : violations) {    errors.add(violation.getMessage());  }  return errors;}  }
class C{  public void sendEmail(IOContainer results,Throwable e) throws UndefinedParameterError {  int sendEmail=getParameterAsInt(PARAMETER_SEND_MAIL);  if (sendEmail == PARAMETER_SEND_MAIL_NEVER) {    return;  } else   if (sendEmail == PARAMETER_SEND_MAIL_FOR_LONG) {    long minTimeToSendEmail=getParameterAsInt(PARAMETER_PROCESS_DURATION_FOR_MAIL) * 60 * 1000;    if (System.currentTimeMillis() - getStartTime() < minTimeToSendEmail) {      return;    }  }  String email=getParameterAsString(PARAMETER_NOTIFICATION_EMAIL);  if (email == null) {    return;  }  getLogger().info("Sending notification email to '" + email + "'");  String name=email;  int at=name.indexOf("@");  if (at >= 0) {    name=name.substring(0,at);  }  String subject="Process " + getName() + " finished";  StringBuilder content=new StringBuilder("Hello " + name + ","+ Tools.getLineSeparator()+ Tools.getLineSeparator());  content.append("I'm sending you a notification message on your process '" + getProcess().getProcessLocation() + "'."+ Tools.getLineSeparator());  if (e != null) {    content.append("Process failed: " + e.toString());    subject="Process " + getName() + " failed";  }  if (results != null) {    content.append(Tools.getLineSeparator() + Tools.getLineSeparator() + "Results:");    ResultObject result;    int i=0;    while (true) {      try {        result=results.get(ResultObject.class,i);        content.append(Tools.getLineSeparator() + Tools.getLineSeparator() + Tools.getLineSeparator()+ result.toResultString());        i++;      } catch (      MissingIOObjectException exc) {        break;      }    }  }  MailUtilities.sendEmail(email,subject,content.toString());}  }
class C{  public void unlockUI(ProcessInfo pi){  if (pi.getAD_Process_ID() == 199) {    generateShipments_complete(pi);    generateInvoices();  }  if (pi.getAD_Process_ID() == 134) {    generateInvoice_complete(pi);    this.setEnabled(true);    this.setCursor(Cursor.getDefaultCursor());  }}  }
class C{  public boolean isString(){  return string != null;}  }
class C{  private static int applyMaskPenaltyRule1Internal(ByteMatrix matrix,boolean isHorizontal){  int penalty=0;  int iLimit=isHorizontal ? matrix.getHeight() : matrix.getWidth();  int jLimit=isHorizontal ? matrix.getWidth() : matrix.getHeight();  byte[][] array=matrix.getArray();  for (int i=0; i < iLimit; i++) {    int numSameBitCells=0;    int prevBit=-1;    for (int j=0; j < jLimit; j++) {      int bit=isHorizontal ? array[i][j] : array[j][i];      if (bit == prevBit) {        numSameBitCells++;      } else {        if (numSameBitCells >= 5) {          penalty+=N1 + (numSameBitCells - 5);        }        numSameBitCells=1;        prevBit=bit;      }    }    if (numSameBitCells > 5) {      penalty+=N1 + (numSameBitCells - 5);    }  }  return penalty;}  }
class C{  public Resultant resultant(){  int N=coeffs.length;  LinkedList<ModularResultant> modResultants=new LinkedList<ModularResultant>();  BigInteger prime=null;  BigInteger pProd=Constants.BIGINT_ONE;  BigInteger res=Constants.BIGINT_ONE;  int numEqual=1;  Iterator<BigInteger> primes=BIGINT_PRIMES.iterator();  while (true) {    prime=primes.hasNext() ? primes.next() : prime.nextProbablePrime();    ModularResultant crr=resultant(prime.intValue());    modResultants.add(crr);    BigInteger temp=pProd.multiply(prime);    BigIntEuclidean er=BigIntEuclidean.calculate(prime,pProd);    BigInteger resPrev=res;    res=res.multiply(er.x.multiply(prime));    BigInteger res2=crr.res.multiply(er.y.multiply(pProd));    res=res.add(res2).mod(temp);    pProd=temp;    BigInteger pProd2=pProd.divide(BigInteger.valueOf(2));    BigInteger pProd2n=pProd2.negate();    if (res.compareTo(pProd2) > 0) {      res=res.subtract(pProd);    } else     if (res.compareTo(pProd2n) < 0) {      res=res.add(pProd);    }    if (res.equals(resPrev)) {      numEqual++;      if (numEqual >= NUM_EQUAL_RESULTANTS) {        break;      }    } else {      numEqual=1;    }  }  while (modResultants.size() > 1) {    ModularResultant modRes1=modResultants.removeFirst();    ModularResultant modRes2=modResultants.removeFirst();    ModularResultant modRes3=ModularResultant.combineRho(modRes1,modRes2);    modResultants.addLast(modRes3);  }  BigIntPolynomial rhoP=modResultants.getFirst().rho;  BigInteger pProd2=pProd.divide(BigInteger.valueOf(2));  BigInteger pProd2n=pProd2.negate();  if (res.compareTo(pProd2) > 0) {    res=res.subtract(pProd);  }  if (res.compareTo(pProd2n) < 0) {    res=res.add(pProd);  }  for (int i=0; i < N; i++) {    BigInteger c=rhoP.coeffs[i];    if (c.compareTo(pProd2) > 0) {      rhoP.coeffs[i]=c.subtract(pProd);    }    if (c.compareTo(pProd2n) < 0) {      rhoP.coeffs[i]=c.add(pProd);    }  }  return new Resultant(rhoP,res);}  }
class C{  public Spanned[] history(){  int i=0;  Spanned[] array=new Spanned[history.size()];  for (  String s : history) {    if (s != null) {      array[i]=Html.fromHtml(s);      i++;    }  }  return array;}  }
class C{  public void pushResourceBundle(ResourceBundle topResourceBundle){  this.rbmwStack.push(new InternalRbmWrapper(topResourceBundle));}  }
class C{  public void focusGained(FocusEvent e){  if (e.getSource() == getEditor().getEditorComponent())   return;  repaint();  if (isEditable() && editor != null)   getEditor().getEditorComponent().requestFocus();}  }
class C{  public void clearSelectedPath(){  if (selection.size() > 0) {    setSelectedPath(null);  }}  }
class C{  public int remove(Object key){  Entry e=removeEntryForKey(key);  return (e == null ? 0 : e.value);}  }
class C{  public void finalResize(Uri messageUri) throws MmsException, ExceedMessageSizeException {  int resizableCnt=0;  int fixedSizeTotal=0;  for (  SlideModel slide : mSlides) {    for (    MediaModel media : slide) {      if (media.getMediaResizable()) {        ++resizableCnt;      } else {        fixedSizeTotal+=media.getMediaSize();      }    }  }  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {    Log.v(TAG,"finalResize: original message size: " + getCurrentMessageSize() + " getMaxMessageSize: "+ MmsConfig.getMaxMessageSize()+ " fixedSizeTotal: "+ fixedSizeTotal);  }  if (resizableCnt > 0) {    int remainingSize=MmsConfig.getMaxMessageSize() - fixedSizeTotal - SLIDESHOW_SLOP;    if (remainingSize <= 0) {      throw new ExceedMessageSizeException("No room for pictures");    }    long messageId=ContentUris.parseId(messageUri);    int bytesPerMediaItem=remainingSize / resizableCnt;    for (    SlideModel slide : mSlides) {      for (      MediaModel media : slide) {        if (media.getMediaResizable()) {          media.resizeMedia(bytesPerMediaItem,messageId);        }      }    }    int totalSize=0;    for (    SlideModel slide : mSlides) {      for (      MediaModel media : slide) {        totalSize+=media.getMediaSize();      }    }    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {      Log.v(TAG,"finalResize: new message size: " + totalSize);    }    if (totalSize > MmsConfig.getMaxMessageSize()) {      throw new ExceedMessageSizeException("After compressing pictures, message too big");    }    setCurrentMessageSize(totalSize);    onModelChanged(this,true);    PduBody pb=toPduBody();    PduPersister.getPduPersister(mContext).updateParts(messageUri,pb,null);  }}  }
class C{  public static AccessToken createFromNativeLinkingIntent(Intent intent){  Validate.notNull(intent,"intent");  if (intent.getExtras() == null) {    return null;  }  return createFromBundle(null,intent.getExtras(),AccessTokenSource.FACEBOOK_APPLICATION_WEB,new Date());}  }
class C{  @Override public int length(){  return mListeners.size();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DatatypePackage.PROPERTY__PRESENCE:    return basicSetPresence(null,msgs);case DatatypePackage.PROPERTY__CONSTRAINT_RULE:  return basicSetConstraintRule(null,msgs);case DatatypePackage.PROPERTY__TYPE:return basicSetType(null,msgs);case DatatypePackage.PROPERTY__PROPERTY_ATTRIBUTES:return ((InternalEList<?>)getPropertyAttributes()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void genResultRegisterUnload(MethodReference m){  TypeReference t=m.getReturnType();  if (t.isVoidType()) {  } else   if (t.isLongType()) {    if (VM.BuildFor32Addr) {      asm.emitPUSH_Reg(T0);      asm.emitPUSH_Reg(T1);    } else {      adjustStack(-WORDSIZE,true);      asm.emitPUSH_Reg(T0);    }  } else   if (t.isFloatType()) {    adjustStack(-WORDSIZE,true);    if (SSE2_FULL) {      asm.emitMOVSS_RegInd_Reg(SP,XMM0);    } else {      asm.emitFSTP_RegInd_Reg(SP,FP0);    }  } else   if (t.isDoubleType()) {    adjustStack(-2 * WORDSIZE,true);    if (SSE2_FULL) {      asm.emitMOVSD_RegInd_Reg(SP,XMM0);    } else {      asm.emitFSTP_RegInd_Reg_Quad(SP,FP0);    }  } else {    asm.emitPUSH_Reg(T0);  }}  }
class C{  private void readData(long absolutePosition,ByteBuffer target,int length){  int remaining=length;  while (remaining > 0) {    dropFragmentsTo(absolutePosition);    int positionInFragment=(int)(absolutePosition - totalBytesDropped);    int toCopy=Math.min(remaining,fragmentLength - positionInFragment);    target.put(dataQueue.peek(),positionInFragment,toCopy);    absolutePosition+=toCopy;    remaining-=toCopy;  }}  }
class C{  private static boolean less(Comparable[] pq,int i,int j){  return pq[i - 1].compareTo(pq[j - 1]) < 0;}  }
class C{  public Kim(Kim kim,int from,int thru){  this(kim.bytes,from,thru);}  }
class C{  public EpsilonBoxDominanceArchive(double epsilon){  super(new EpsilonBoxDominanceComparator(epsilon));}  }
