class C{  private int addBinding(final ASTNode node,final SimpleName name,final String fullTypeName){  final int bindingId=nextVarId;  nextVarId++;  nodeScopes.get(node).put(name.getIdentifier(),bindingId);  nodeScopes.get(node.getParent()).put(name.getIdentifier(),bindingId);  variableBinding.put(bindingId,Lists.<ASTNode>newArrayList());  variableTypes.put(bindingId,fullTypeName);  variableDeclarationBinding.put(bindingId,name);  return bindingId;}  }
class C{  public void decodeJBIG2(InputStream inputStream) throws IOException, JBIG2Exception {  int availiable=inputStream.available();  byte[] bytes=new byte[availiable];  inputStream.read(bytes);  decodeJBIG2(bytes);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.692 -0400",hash_original_method="06A3A1AA076BADB04E4D922D26953A96",hash_generated_method="F3F51984BE10A496D3376E237FC9D1AB") @Override protected synchronized void beforeWrite(int n){  count+=n;}  }
class C{  public IdentityHashMap(Map<? extends K,? extends V> map){  this(map.size() < 6 ? 11 : map.size() * 2);  putAllImpl(map);}  }
class C{  public void deleteSnapshot(String pipelineName,String snapshotName,String rev) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling deleteSnapshot");  }  if (snapshotName == null) {    throw new ApiException(400,"Missing the required parameter 'snapshotName' when calling deleteSnapshot");  }  String path="/v1/pipeline/{pipelineName}/snapshot/{snapshotName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString())).replaceAll("\\{" + "snapshotName" + "\\}",apiClient.escapeString(snapshotName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  apiClient.invokeAPI(path,"DELETE",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,null);}  }
class C{  public static Script createMultiSigInputScriptBytes(List<byte[]> signatures){  checkArgument(signatures.size() <= 16);  ScriptBuilder builder=new ScriptBuilder();  builder.smallNum(0);  for (  byte[] signature : signatures)   builder.data(signature);  return builder.build();}  }
class C{  @SuppressWarnings("unchecked") public static List<Short> toList(short[] array){  return DefaultTypeTransformation.primitiveArrayToList(array);}  }
class C{  public final String orSenior(){  return get(Seed.PEERTYPE,Seed.PEERTYPE_SENIOR);}  }
class C{  @Override protected void initGUI(){  super.initGUI();  m_PanelMatrix=new MatrixPanel();  add(m_PanelMatrix,BorderLayout.CENTER);}  }
class C{  @Override public void process(final DM dm,ReplyProcessor21 processor){  final long startTime=getTimestamp();  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"ContainsKeyValueReplyMessage processor not found");    }    return;  }  processor.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} Processed {}",processor,this);  }  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int p_77648_7_,float p_77648_8_,float p_77648_9_,float p_77648_10_){  Block block=world.getBlock(x,y,z);  if (block == Blocks.snow_layer && (world.getBlockMetadata(x,y,z) & 7) < 1) {    p_77648_7_=1;  } else   if (!block.isReplaceable(world,x,y,z)) {    if (p_77648_7_ == 0) {      --y;    }    if (p_77648_7_ == 1) {      ++y;    }    if (p_77648_7_ == 2) {      --z;    }    if (p_77648_7_ == 3) {      ++z;    }    if (p_77648_7_ == 4) {      --x;    }    if (p_77648_7_ == 5) {      ++x;    }  }  if (!player.canPlayerEdit(x,y,z,p_77648_7_,stack)) {    return false;  } else   if (stack.stackSize == 0) {    return false;  } else {    if (world.canPlaceEntityOnSide(this.block,x,y,z,false,p_77648_7_,(Entity)null,stack)) {      int i1=this.block.onBlockPlaced(world,x,y,z,p_77648_7_,p_77648_8_,p_77648_9_,p_77648_10_,0);      if (world.setBlock(x,y,z,this.block,i1,3)) {        if (world.getBlock(x,y,z) == this.block) {          this.block.onBlockPlacedBy(world,x,y,z,player,stack);          this.block.onPostBlockPlaced(world,x,y,z,i1);        }        world.playSoundEffect((double)((float)x + 0.5F),(double)((float)y + 0.5F),(double)((float)z + 0.5F),this.block.stepSound.func_150496_b(),(this.block.stepSound.getVolume() + 1.0F) / 2.0F,this.block.stepSound.getPitch() * 0.8F);        --stack.stackSize;      }    }    return true;  }}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.RegisterVASACertificateResponse registerVASACertificate(com.emc.storageos.vasa.VasaServiceStub.RegisterVASACertificate registerVASACertificate31) throws java.rmi.RemoteException, com.emc.storageos.vasa.InvalidCertificate, com.emc.storageos.vasa.InvalidLogin, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[15].getName());    _operationClient.getOptions().setAction("urn:registerVASACertificate");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),registerVASACertificate31,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","registerVASACertificate")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.RegisterVASACertificateResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.RegisterVASACertificateResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.InvalidCertificate) {            throw (com.emc.storageos.vasa.InvalidCertificate)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidLogin) {            throw (com.emc.storageos.vasa.InvalidLogin)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public MessageInf(Throwable e){  this(SGN_WARNING,e.getLocalizedMessage(),e);}  }
class C{  private static int lf_ch(int x,int y,int z){  return (x & y) ^ ((~x) & z);}  }
class C{  @Override public boolean isReadOnly() throws SQLException {  try {    debugCodeCall("isReadOnly");    return conn.isReadOnly();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasAuthTokenUser[");  buffer.append("m_id = ").append(m_id);  buffer.append("]");  return buffer.toString();}  }
class C{  final public boolean endsWith(final String suffix){  final int l=suffix.length();  int length=length();  if (l > length)   return false;  int i=l;  final char[] a=array;  while (i-- != 0)   if (suffix.charAt(i) != a[--length])   return false;  return true;}  }
class C{  public static String encodeHexString(final byte[] data){  return new String(encodeHex(data));}  }
class C{  private static String[] delimitedListToStringArray(final String str,final String delimiter,final String charsToDelete){  if (str == null) {    return new String[0];  }  if (delimiter == null) {    return new String[]{str};  }  final List<String> result=new ArrayList<String>();  if ("".equals(delimiter)) {    for (int i=0; i < str.length(); i++) {      result.add(deleteAny(str.substring(i,i + 1),charsToDelete));    }  } else {    int pos=0;    int delPos=0;    while ((delPos=str.indexOf(delimiter,pos)) != -1) {      result.add(deleteAny(str.substring(pos,delPos),charsToDelete));      pos=delPos + delimiter.length();    }    if (str.length() > 0 && pos <= str.length()) {      result.add(deleteAny(str.substring(pos),charsToDelete));    }  }  return toStringArray(result);}  }
class C{  public static Object walk(CommonTokenStream tokenStream,EsperEPL2GrammarParser.JsonvalueContext node) throws ASTWalkException {  if (node.constant() != null) {    EsperEPL2GrammarParser.ConstantContext constCtx=node.constant();    if (constCtx.stringconstant() != null) {      return extractString(constCtx.stringconstant().getText());    } else {      return ASTConstantHelper.parse(constCtx.getChild(0));    }  } else   if (node.jsonobject() != null) {    return walkObject(tokenStream,node.jsonobject());  } else   if (node.jsonarray() != null) {    return walkArray(tokenStream,node.jsonarray());  }  throw ASTWalkException.from("Encountered unexpected node type in json tree",tokenStream,node);}  }
class C{  public Result(PrincipalId principalId,Date authnInstant,AuthnMethod authnMethod,byte[] serverLeg){  assert principalId != null;  assert authnInstant != null;  assert authnMethod != null;  this.principalId=principalId;  this.authInstant=authnInstant;  this.authnMethod=authnMethod;  this.serverLeg=serverLeg;}  }
class C{  public CargoTestSuite(String suiteName){  super(suiteName);  initialize();}  }
class C{  public final boolean isSecure(Socket sock) throws IllegalArgumentException {  if (sock == null) {    throw new IllegalArgumentException("Socket may not be null.");  }  if (sock.getClass() != Socket.class) {    throw new IllegalArgumentException("Socket not created by this factory.");  }  if (sock.isClosed()) {    throw new IllegalArgumentException("Socket is closed.");  }  return false;}  }
class C{  public void toggleExpand(){  Perspective perspective=perspectiveManager.getActivePerspective();  if (perspective == null) {    return;  }  expanded=!expanded;  if (expanded) {    perspective.maximizeCentralPart();    if (button != null) {      button.getElement().setInnerHTML(FontAwesome.COMPRESS);    }  } else {    perspective.restoreParts();    if (button != null) {      button.getElement().setInnerHTML(FontAwesome.EXPAND);    }  }}  }
class C{  public static void main(String[] argv){  runClassifier(new AdaBoostM1(),argv);}  }
class C{  public static double dchisq(double x){  if (x == 0.0)   return Double.POSITIVE_INFINITY;  double xh=Math.sqrt(x);  return dnorm(xh) / xh;}  }
class C{  private static int readInt() throws IOException {  String input=readLine();  try {    return Integer.parseInt(input);  } catch (  NumberFormatException nfe) {    return 0;  }}  }
class C{  int calculateHeight(int width,double ratio){  if (ratio == 0) {    return 0;  }  return (int)Math.round(width / ratio);}  }
class C{  public AdeExtConfigProperties(String propertyFile) throws AdeException {  final ConfigPropertiesWrapper m_props=new ConfigPropertiesWrapper(ADE_EXT_PREFIX);  m_props.addPropertyFile(propertyFile);  m_props.addProperties(System.getProperties(),"system property");  m_rmiPort=m_props.getIntProperty(RMI_PORT_PARAM,0);  m_rmiServerCodeBase=m_props.getStringProperty(RMI_CODE_BASE_PARAM,null);  m_trainingScriptFilePath=m_props.getStringProperty(TRAINING_SCRIPT_FILE_PARAM,null);  if (m_props.containsKey(PARSE_ERROR_TO_KEEP)) {    m_parseErrorsToKeep=m_props.getIntProperty(PARSE_ERROR_TO_KEEP);  } else {    m_parseErrorsToKeep=-1;  }  if (m_props.containsKey(PARSE_ERROR_DAYS_TO_TOLERATE)) {    m_parseErrorDaysToTolerate=m_props.getIntProperty(PARSE_ERROR_DAYS_TO_TOLERATE);  } else {    m_parseErrorDaysToTolerate=-1;  }  if (m_props.containsKey(PARSE_ERROR_TRACK_NULL_COMPONENT)) {    m_parseErrorTrackNullComponent=m_props.getBooleanProperty(PARSE_ERROR_TRACK_NULL_COMPONENT);  } else {    m_parseErrorTrackNullComponent=false;  }  if (m_props.containsKey(MSG_RATE_MSG_TO_KEEP)) {    m_msgRateMsgToKeep=m_props.getIntProperty(MSG_RATE_MSG_TO_KEEP);  } else   m_msgRateMsgToKeep=-1;  if (m_props.containsKey(MSG_RATE_10MIN_SLOTS_TO_KEEP)) {    m_msgRate10MinIntervalToKeep=(short)m_props.getIntProperty(MSG_RATE_10MIN_SLOTS_TO_KEEP);  } else {    m_msgRate10MinIntervalToKeep=-1;  }  if (m_props.containsKey(MSG_RATE_MERGE_SOURCE)) {    m_isMsgRateMergeSource=m_props.getBooleanProperty(MSG_RATE_MERGE_SOURCE);  } else {    m_isMsgRateMergeSource=false;  }  if (m_props.containsKey(RUNTIME_MODEL_DATA_STORE_AT_SOURCE)) {    m_isRuntimeModelDataStoreAtSource=m_props.getBooleanProperty(RUNTIME_MODEL_DATA_STORE_AT_SOURCE);  } else {    m_isRuntimeModelDataStoreAtSource=null;  }  if (m_props.containsKey(MSG_RATE_10MIN_SUBINTERVAL_LIST)) {    final String subIntervalList=m_props.getStringProperty(MSG_RATE_10MIN_SUBINTERVAL_LIST);    final StringTokenizer tokenizer=new StringTokenizer(subIntervalList,",");    m_msgRate10MinSubIntervalList=new short[tokenizer.countTokens()];    for (int i=0; i < m_msgRate10MinSubIntervalList.length; i++) {      m_msgRate10MinSubIntervalList[i]=Short.parseShort(tokenizer.nextToken());    }  } else {    m_msgRate10MinSubIntervalList=null;  }  if (m_props.containsKey(MSG_RATE_REPORT_FREQ)) {    m_msgRateReportReq=m_props.getStringProperty(MSG_RATE_REPORT_FREQ);    boolean isNumber=false;    try {      Integer.parseInt(m_msgRateReportReq);      isNumber=true;    } catch (    Exception e) {    }    if (!m_msgRateReportReq.equalsIgnoreCase("MONTHLY") && !isNumber) {      throw new AdeUsageException(MSG_RATE_REPORT_FREQ + " must be either \"MONTHLY\" or number");    }  } else {    m_msgRateReportReq="";  }  if (m_props.containsKey(STATS_ROOT_DIR)) {    m_statsRootDir=m_props.getStringProperty(STATS_ROOT_DIR);  } else {    m_statsRootDir=DEFAULT_STATS_ROOT_DIR;  }  m_props.verifyAllPropertiesUsed();}  }
class C{  protected NodeSelector createNodeSelector(Node node){  return new NodeSelector(node);}  }
class C{  private State applyPatch(State startState,State patchState){  if (patchState.taskState.stage != startState.taskState.stage || patchState.taskState.subStage != startState.taskState.subStage) {    ServiceUtils.logInfo(this,"Moving from %s:%s to stage %s:%s",startState.taskState.stage,startState.taskState.subStage,patchState.taskState.stage,patchState.taskState.subStage);  }  PatchUtils.patchState(startState,patchState);  return startState;}  }
class C{  public static boolean checkProtocols(VirtualPool.Type type,Set<String> protocols){  Iterator<String> it=protocols.iterator();  try {    while (it.hasNext()) {      if (type.name().equals(VirtualPool.Type.block.name())) {        Block.valueOf(it.next());      } else       if (type.name().equals(VirtualPool.Type.file.name())) {        File.valueOf(it.next());      } else {        return false;      }    }  } catch (  IllegalArgumentException e) {    return false;  }  return true;}  }
class C{  public SIPTransaction findCancelTransaction(SIPRequest cancelRequest,boolean isServer){  if (isLoggingEnabled()) {    stackLogger.logDebug("findCancelTransaction request= \n" + cancelRequest + "\nfindCancelRequest isServer="+ isServer);  }  if (isServer) {    Iterator<SIPServerTransaction> li=this.serverTransactionTable.values().iterator();    while (li.hasNext()) {      SIPTransaction transaction=(SIPTransaction)li.next();      SIPServerTransaction sipServerTransaction=(SIPServerTransaction)transaction;      if (sipServerTransaction.doesCancelMatchTransaction(cancelRequest))       return sipServerTransaction;    }  } else {    Iterator<SIPClientTransaction> li=this.clientTransactionTable.values().iterator();    while (li.hasNext()) {      SIPTransaction transaction=(SIPTransaction)li.next();      SIPClientTransaction sipClientTransaction=(SIPClientTransaction)transaction;      if (sipClientTransaction.doesCancelMatchTransaction(cancelRequest))       return sipClientTransaction;    }  }  if (isLoggingEnabled())   stackLogger.logDebug("Could not find transaction for cancel request");  return null;}  }
class C{  protected Vec4 computeControlPointDelta(LatLon previousLocation,LatLon currentLocation){  Vec4 terrainPoint=getWwd().getModel().getGlobe().computeEllipsoidalPointFromLocation(currentLocation);  Vec4 previousPoint=getWwd().getModel().getGlobe().computeEllipsoidalPointFromLocation(previousLocation);  return terrainPoint.subtract3(previousPoint);}  }
class C{  public boolean equalsIdentifiers(String a,String b){  if (a == b || a.equals(b)) {    return true;  }  if (!dbSettings.databaseToUpper && a.equalsIgnoreCase(b)) {    return true;  }  return false;}  }
class C{  public CannotInvokeException(InvocationTargetException e){  super("by " + e.getTargetException().toString());  err=e.getTargetException();}  }
class C{  public void flush() throws IOException {  if (out instanceof Flushable) {    ((Flushable)out).flush();  }}  }
class C{  public CompletionProposal withSeparateTokens(String suffix){  return withSeparateTokens(suffix,null);}  }
class C{  public String toString(){  return getDefaultValue().toString();}  }
class C{  public int hashCode(){  return this.hashcode;}  }
class C{  public FastFloatBuffer append(FastFloatBuffer buff){  if (buff.size == 0) {    return this;  }  for (int i=0; i < buff.currentBufferIndex; i++) {    append(buff.buffers[i]);  }  append(buff.currentBuffer,0,buff.offset);  return this;}  }
class C{  private void initCachingHttpHeadersFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering Caching HTTP Headers Filter");  FilterRegistration.Dynamic cachingHttpHeadersFilter=servletContext.addFilter("cachingHttpHeadersFilter",new CachingHttpHeadersFilter(jHipsterProperties));  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/content/*");  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/app/*");  cachingHttpHeadersFilter.setAsyncSupported(true);}  }
class C{  public static byte[] toBytes(String x){  try {    return x.getBytes(PngHelperInternal.charsetLatin1name);  } catch (  UnsupportedEncodingException e) {    throw new PngBadCharsetException(e);  }}  }
class C{  protected byte[] engineUpdate(byte[] input,int inputOffset,int inputLen){  return core.update(input,inputOffset,inputLen);}  }
class C{  private static boolean isVariableAccess(final INaviOperandTreeNode node){  try {    final INaviOperandTreeNode memoryAccessNode=getMemoryAccessNode(node);    final List<INaviOperandTreeNode> children=memoryAccessNode.getChildren();    if (children.size() == 1) {      final INaviOperandTreeNode child=children.get(0);switch (child.getType()) {case SIZE_PREFIX:        return isVariable(child.getChildren().get(0));case IMMEDIATE_INTEGER:      return isVariable(child);case OPERATOR:    return isOperatorVariableAccess(child);default :  return false;}} else {throw new IllegalStateException("IE00703: Invalid tree shape");}} catch (final MaybeNullException e) {return false;}}  }
class C{  public void evaluate(XPathContext xctxt,FastStringBuffer buf,int context,org.apache.xml.utils.PrefixResolver nsNode){  buf.append(m_val);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static AdempiereLabelUI createUI(JComponent c){  return adempiereLabelUI;}  }
class C{  public CompositeFigureEdit(Figure figure,String presentationName,boolean isSignificant){  super(presentationName,isSignificant);  this.figure=figure;}  }
class C{  public boolean isEmpty(){  return this.removeAllData.length == 0;}  }
class C{  public Polyline2D(){  xpoints=new float[4];  ypoints=new float[4];}  }
class C{  public TransformTreeNode(@Nullable TransformTreeNode enclosingNode,@Nullable PTransform<?,?> transform,String fullName,@Nullable PInput input){  this.enclosingNode=enclosingNode;  this.transform=transform;  checkArgument((enclosingNode == null && transform == null) || (enclosingNode != null && transform != null),"EnclosingNode and transform must both be specified, or both be null");  this.fullName=fullName;  this.input=input;}  }
class C{  public byte[] extractData(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {  BufferedImage image=null;  DWT dwt=null;  ImageTree dwtTree=null;  ImageTree s=null;  Signature sig=null;  int[][] luminance=null;  int cols=0;  int rows=0;  ByteArrayOutputStream baos=null;  ObjectOutputStream oos=null;  Object[] vals=null;  image=ImageUtil.byteArrayToImage(stegoData,stegoFileName);  cols=image.getWidth();  rows=image.getHeight();  luminance=ImageUtil.getYuvFromImage(image).get(0);  sig=new Signature(origSigData);  dwt=new DWT(cols,rows,sig.filterID,sig.decompositionLevel,sig.waveletFilterMethod);  dwtTree=dwt.forwardDWT(luminance);  s=dwtTree;  try {    baos=new ByteArrayOutputStream();    oos=new ObjectOutputStream(baos);    oos.writeBytes(WM_MARKER);    oos.writeInt(sig.decompositionLevel);    oos.writeDouble(sig.alpha);    for (int i=0; i < sig.decompositionLevel; i++) {      vals=invWmSubBand(s.getHorizontal().getImage(),sig.watermark,sig.watermarkLength,sig.detectionThreshold);      oos.writeInt((Integer)vals[0]);      oos.writeDouble((Double)vals[1]);      oos.writeDouble((Double)vals[2]);      vals=invWmSubBand(s.getVertical().getImage(),sig.watermark,sig.watermarkLength,sig.detectionThreshold);      oos.writeInt((Integer)vals[0]);      oos.writeDouble((Double)vals[1]);      oos.writeDouble((Double)vals[2]);      vals=invWmSubBand(s.getDiagonal().getImage(),sig.watermark,sig.watermarkLength,sig.detectionThreshold);      oos.writeInt((Integer)vals[0]);      oos.writeDouble((Double)vals[1]);      oos.writeDouble((Double)vals[2]);      s=s.getCoarse();    }    oos.flush();    oos.close();    return baos.toByteArray();  } catch (  IOException ioEx) {    throw new OpenStegoException(ioEx);  }}  }
class C{  public void narrow() throws OperatorFailedException {  final int nNodes=tree.getNodeCount();  final NodeRef root=tree.getRoot();  for (int tries=0; tries < MAX_TRIES; ++tries) {    NodeRef i=tree.getNode(MathUtils.nextInt(nNodes));    while (root == i || tree.getParent(i) == root) {      i=tree.getNode(MathUtils.nextInt(nNodes));    }    final NodeRef iParent=tree.getParent(i);    final NodeRef iGrandParent=tree.getParent(iParent);    NodeRef iUncle=tree.getChild(iGrandParent,0);    if (iUncle == iParent) {      iUncle=tree.getChild(iGrandParent,1);    }    assert tree.getNodeHeight(i) < tree.getNodeHeight(iGrandParent);    if (tree.getNodeHeight(iUncle) < tree.getNodeHeight(iParent)) {      NodeRef iSister=tree.getChild(iParent,0);      if (iSister == i) {        iSister=tree.getChild(iParent,1);      }      eupdate(i,iUncle,iParent,iGrandParent,iSister);      tree.pushTreeChangedEvent(iParent);      tree.pushTreeChangedEvent(iGrandParent);      return;    }  }  throw new OperatorFailedException("Couldn't find valid narrow move on this tree!!");}  }
class C{  public static void checkCreateDirectoryOK(Resource resource,boolean createParentWhenNotExists) throws IOException {  if (resource.exists()) {    if (resource.isFile())     throw new IOException("can't create directory [" + resource.getPath() + "], resource already exists as a file");    if (resource.isDirectory())     throw new IOException("can't create directory [" + resource.getPath() + "], directory already exists");  }  Resource parent=resource.getParentResource();  if (parent != null) {    if (!parent.exists()) {      if (createParentWhenNotExists)       parent.createDirectory(true); else       throw new IOException("can't create file [" + resource.getPath() + "], missing parent directory");    } else     if (parent.isFile()) {      throw new IOException("can't create directory [" + resource.getPath() + "], parent is a file");    }  }}  }
class C{  public PLSceneElementEventRunnable(PLIView view,PLISceneElement element,CGPoint screenPoint,PLPosition scene3DPoint,PLSceneElementTouchStatus touchStatus){  super();  mView=view;  mElement=element;  mScreenPoint=screenPoint;  mScene3DPoint=scene3DPoint;  mTouchStatus=touchStatus;}  }
class C{  @Override public synchronized void rollback() throws SailException {  if (txLog.isInfoEnabled())   txLog.info("SAIL-ROLLBACK-CONN: " + this);  try {    txService.abort(tx);    dirty=false;    newTx();  } catch (  IOException|DatasetNotFoundException ex) {    throw new SailException(ex);  }}  }
class C{  public void draw(GL10 gl){  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);  gl.glColor4f(color[0],color[1],color[2],color[3]);  gl.glVertexPointer(COORDS_PER_VERTEX,GL10.GL_FLOAT,0,vertexBuffer);  gl.glDrawElements(GL10.GL_TRIANGLES,drawOrder.length,GL10.GL_UNSIGNED_SHORT,drawListBuffer);  gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);}  }
class C{  public static AddressbookEntry renameCategory(AddressbookEntry entry,String oldCategoryName,String newCategoryName){  Set<String> categories=entry.getCategories();  categories.remove(oldCategoryName);  if (newCategoryName != null) {    categories.add(newCategoryName);  }  return new AddressbookEntry(entry.getName(),categories);}  }
class C{  public void longPointerPress(int x,int y){}  }
class C{  public static boolean isTransient(int flags){  return (flags & TRANSIENT) != 0;}  }
class C{  private boolean isInstanceComplete(boolean end){  FormController formController=Collect.getInstance().getFormController();  boolean complete=false;  if (end) {    SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);    complete=sharedPreferences.getBoolean(PreferencesActivity.KEY_COMPLETED_DEFAULT,true);  }  String selection=InstanceColumns.INSTANCE_FILE_PATH + "=?";  String[] selectionArgs={formController.getInstancePath().getAbsolutePath()};  Cursor c=null;  try {    c=getContentResolver().query(InstanceColumns.CONTENT_URI,null,selection,selectionArgs,null);    if (c != null && c.getCount() > 0) {      c.moveToFirst();      String status=c.getString(c.getColumnIndex(InstanceColumns.STATUS));      if (InstanceProviderAPI.STATUS_COMPLETE.compareTo(status) == 0) {        complete=true;      }    }  }  finally {    if (c != null) {      c.close();    }  }  return complete;}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public boolean isSetVersion(){  return this.version != null;}  }
class C{  public void close(){  mVideoSharingCache.clear();  if (sLogger.isActivated()) {    sLogger.info("Video sharing service API is closed");  }}  }
class C{  @SuppressWarnings("unchecked") private int compareIfCompatible(Object first,Object second){  checkForComparable(first,second);  if (first.getClass().isInstance(second)) {    return ((Comparable)first).compareTo(second);  } else   if (second.getClass().isInstance(first)) {    return ((Comparable)second).compareTo(first) * -1;  } else {    throw new InvalidArgumentException("Values for were not of the same type for property: " + property);  }}  }
class C{  public Connection next(String method) throws IOException {  for (Connection pooled; (pooled=pool.get(address)) != null; ) {    if (method.equals("GET") || pooled.isReadable())     return pooled;    pooled.close();  }  if (!hasNextTlsMode()) {    if (!hasNextInetSocketAddress()) {      if (!hasNextProxy()) {        if (!hasNextPostponed()) {          throw new NoSuchElementException();        }        return new Connection(nextPostponed());      }      lastProxy=nextProxy();      resetNextInetSocketAddress(lastProxy);    }    lastInetSocketAddress=nextInetSocketAddress();    resetNextTlsMode();  }  boolean modernTls=nextTlsMode() == TLS_MODE_MODERN;  Route route=new Route(address,lastProxy,lastInetSocketAddress,modernTls);  if (routeDatabase.shouldPostpone(route)) {    postponedRoutes.add(route);    return next(method);  }  return new Connection(route);}  }
class C{  private String ensureIceAttributeLength(String s,int min,int max){  if (s == null)   throw new NullPointerException("s");  if (min < 0)   throw new IllegalArgumentException("min " + min);  if (max < min)   throw new IllegalArgumentException("max " + max);  int length=s.length();  int numberOfIceCharsToAdd=min - length;  if (numberOfIceCharsToAdd > 0) {    StringBuilder sb=new StringBuilder(min);    for (; numberOfIceCharsToAdd > 0; --numberOfIceCharsToAdd) {      sb.append('0');    }    sb.append(s);    s=sb.toString();  } else   if (max < length) {    s=s.substring(0,max);  }  return s;}  }
class C{  public void testFinished(Description description) throws Exception {  String printedOutput=this.endCapture();  if (!mostRecentTestPassed) {    System.out.println("=====> FAILED!\n");  }}  }
class C{  public synchronized void closeAllQueries(){  final Enumeration en=m_prologTable.keys();  Integer nHandle;  while (en.hasMoreElements()) {    nHandle=(Integer)en.nextElement();    final AsyncWAMManager container=(AsyncWAMManager)(m_prologTable.remove(nHandle));    container.close();  }}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.453 -0500",hash_original_method="90BF24DBA9F26B31ED84B0CABBF9287E",hash_generated_method="44ED1D34D5A2181B0D15F63F3B719EC5") public MulticastLock createMulticastLock(String tag){  return new MulticastLock(tag);}  }
class C{  @Override public <V>void write(google.registry.monitoring.metrics.MetricPoint<V> point) throws IOException {  checkNotNull(point);  TimeSeries timeSeries=getEncodedTimeSeries(point);  timeSeriesBuffer.add(timeSeries);  logger.fine(String.format("Enqueued metric %s for writing",timeSeries.getMetric().getType()));  if (timeSeriesBuffer.size() == maxPointsPerRequest) {    flush();  }}  }
class C{  public static String format(double[] d,String sep){  return d == null ? "null" : (d.length == 0) ? "" : formatTo(new StringBuilder(),d,sep).toString();}  }
class C{  protected void error(String err,String arg1,String arg2,String arg3){  handleError(ln,err + " " + arg1+ " "+ arg2+ " "+ arg3);}  }
class C{  private void onHangUp(){  mSavedCallview=null;  if (null != mCall) {    mCall.hangup("");  }}  }
class C{  public static ProcessBuilder createJavaProcessBuilder(boolean addTestVmAndJavaOptions,String... command) throws Exception {  String javapath=JDKToolFinder.getJDKTool("java");  ArrayList<String> args=new ArrayList<>();  args.add(javapath);  Collections.addAll(args,getPlatformSpecificVMArgs());  if (addTestVmAndJavaOptions) {    args.add("-cp");    args.add(System.getProperty("java.class.path"));    Collections.addAll(args,Utils.getTestJavaOpts());  }  Collections.addAll(args,command);  StringBuilder cmdLine=new StringBuilder();  for (  String cmd : args)   cmdLine.append(cmd).append(' ');  System.out.println("Command line: [" + cmdLine.toString() + "]");  return new ProcessBuilder(args.toArray(new String[args.size()]));}  }
class C{  public TeeStream(OutputStream outputStream,Path outputFile) throws IOException {  this.fileStream=new BufferedOutputStream(Files.newOutputStream(outputFile));  this.outputStream=outputStream;}  }
class C{  private void drawCircle(Canvas canvas,float cx,float cy,int color,float pct){  mPaint.setColor(color);  canvas.save();  canvas.translate(cx,cy);  float radiusScale=INTERPOLATOR.getInterpolation(pct);  canvas.scale(radiusScale,radiusScale);  canvas.drawCircle(0,0,cx,mPaint);  canvas.restore();}  }
class C{  public boolean hasString(){  return (null != m_strCache);}  }
class C{  @OptionEquivalent public void addConfiguredMissingDependencyPackages(MissingDependencyPackages missingDependencyPackages){  this.missingDependenciesPackages.add(missingDependencyPackages);}  }
class C{  public Segment(Coordinate p0,Coordinate p1){  ls=new LineSegment(p0,p1);}  }
class C{  public Object remove(Object key){  Entry p=getEntry(key);  if (p == null) {    return null;  }  Object oldValue=p.value;  deleteEntry(p);  return oldValue;}  }
class C{  public static double staticNextInt(int N,int M,int n){synchronized (shared) {    return shared.nextInt(N,M,n);  }}  }
class C{  public void clear(){  mNum=0;}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public void testThreeNodeCloseEvent() throws Throwable {  testSessionClose(3);}  }
class C{  @SuppressWarnings({"unchecked"}) public GridConcurrentHashSet(ConcurrentMap<E,?> map){  this.map=(ConcurrentMap<E,Object>)map;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:24.352 -0400",hash_original_method="6A96B8207BB0375D0756EDBBA2184D9F",hash_generated_method="D06F65A24B6B2C807354DB1BB70A20B4") private int convertState(int state){switch (state) {case BluetoothHealth.STATE_CHANNEL_CONNECTED:    return BluetoothHealth.STATE_CONNECTED;case BluetoothHealth.STATE_CHANNEL_CONNECTING:  return BluetoothHealth.STATE_CONNECTING;case BluetoothHealth.STATE_CHANNEL_DISCONNECTING:return BluetoothHealth.STATE_DISCONNECTING;case BluetoothHealth.STATE_CHANNEL_DISCONNECTED:return BluetoothHealth.STATE_DISCONNECTED;}errorLog("Mismatch in Channel and Health Device State");return -1;}  }
class C{  public FBTraceManager(GDSType gdsType){  super(gdsType);}  }
class C{  public TeXFormula addStrut(int unit,float width,float height,float depth) throws InvalidUnitException {  return add(new SpaceAtom(unit,width,height,depth));}  }
class C{  public long sum(){  long sum=base;  Cell[] as=cells;  if (as != null) {    int n=as.length;    for (int i=0; i < n; ++i) {      Cell a=as[i];      if (a != null)       sum+=a.value;    }  }  return sum;}  }
class C{  private static boolean isAndroid(){  Class<?> clazz=null;  try {    clazz=Class.forName("android.util.DisplayMetrics",false,CountLargeTest.class.getClassLoader());  } catch (  Throwable notPresent) {  }  return clazz != null;}  }
class C{  public boolean warnsWhenOpeningExecutable(){  return !isWin9x() && !isWinNT() && !isWin2000();}  }
class C{  public AnnotationSecurityTest(){}  }
class C{  private Rectangle2D createShadow(RectangularShape bar,double xOffset,double yOffset,RectangleEdge base,boolean pegShadow){  double x0=bar.getMinX();  double x1=bar.getMaxX();  double y0=bar.getMinY();  double y1=bar.getMaxY();  if (base == RectangleEdge.TOP) {    x0+=xOffset;    x1+=xOffset;    if (!pegShadow) {      y0+=yOffset;    }    y1+=yOffset;  } else   if (base == RectangleEdge.BOTTOM) {    x0+=xOffset;    x1+=xOffset;    y0+=yOffset;    if (!pegShadow) {      y1+=yOffset;    }  } else   if (base == RectangleEdge.LEFT) {    if (!pegShadow) {      x0+=xOffset;    }    x1+=xOffset;    y0+=yOffset;    y1+=yOffset;  } else   if (base == RectangleEdge.RIGHT) {    x0+=xOffset;    if (!pegShadow) {      x1+=xOffset;    }    y0+=yOffset;    y1+=yOffset;  }  return new Rectangle2D.Double(x0,y0,(x1 - x0),(y1 - y0));}  }
class C{  private boolean doSearch(TestChromosome test,FieldStatement statement,LocalSearchObjective<TestChromosome> objective){  if (!statement.isStatic()) {    VariableReference source=statement.getSource();    List<VariableReference> objects=test.getTestCase().getObjects(source.getType(),statement.getPosition());    objects.remove(source);    for (    VariableReference replacement : objects) {      statement.setSource(replacement);      if (objective.hasImproved(test)) {        return true;      }    }    statement.setSource(source);  }  return false;}  }
class C{  public static <T>NePredicate<T> ne(Property<T> property,T value){  return new NePredicate<>(property(property),value);}  }
class C{  private void addCommentToGroup(Node n){  if (getFirstLineOfNextComment() - getLastLineOfCurrentComment() > 1) {    n.getParent().addChildBefore(newFloatingComment(),n);  } else {    forceAddCommentToGroup();  }}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public void fillPolygon(int xPoints[],int yPoints[],int nPoints){  mGraphics.fillPolygon(xPoints,yPoints,nPoints);}  }
class C{  public void info(Object message){}  }
class C{  private void inorder(){  inorder(root);}  }
class C{  RenewRestrictor(boolean tokenOwner,int initialCount){  assert initialCount >= 0;  this.tokenOwner=tokenOwner;  this.initialCount=initialCount;}  }
class C{  public Container fraction(Fraction fraction){  if (fraction != null) {    this.fractions.put(fractionRoot(fraction.getClass()),fraction);    this.fractionsBySimpleName.put(fraction.simpleName(),fraction);    fraction.initialize(new InitContext());  }  return this;}  }
class C{  private boolean isSame(final Entity a,final Entity b){  if (a == null && b == null) {    return true;  }  if (a == null || b == null) {    return false;  }  return a.getType().equals(b.getType()) && isSame(a.getValue(),b.getValue());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:29.176 -0500",hash_original_method="8B9E9C35AFB855740620C92F002E4A38",hash_generated_method="D93A43812A9CA0B98209947C6F6A18EE") public boolean isSealed(){  return sealBase.getTaintBoolean();}  }
class C{  public TransactionSignature(BigInteger r,BigInteger s,int sighashFlags){  super(r,s);  this.sighashFlags=sighashFlags;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void appendBytes(byte[] bs){  appendBytes(bs,0,bs.length);}  }
class C{  public final boolean isRemoteStreamLive() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  return mCurrentSessionInfoDto != null && mCurrentSessionInfoDto.getNowPlayingItem() != null && mCurrentSessionInfoDto.getNowPlayingItem().getRunTimeTicks() == null;}  }
class C{  private static File codegenResourceModule(File resourceModuleFile,String[] locales,List bundleNames){  String fileName=resourceModuleFile.getName();  String className=fileName.substring(0,fileName.length() - 3);  StandardDefs standardDefs=ThreadLocalToolkit.getStandardDefs();  String lineSep=System.getProperty("line.separator");  String[] codePieces=new String[]{"package ",lineSep,"{",lineSep,lineSep,"import flash.utils.getDefinitionByName",lineSep,"import ",standardDefs.getModulesPackage(),".ModuleBase;",lineSep,"import ",standardDefs.getResourcesPackage(),".IResourceModule;",lineSep,"import ",standardDefs.getResourcesPackage(),".ResourceBundle;",lineSep,lineSep,"[ExcludeClass]",lineSep,lineSep,codegenResourceBundleMetadata(bundleNames),lineSep,"public class ",className," extends ModuleBase",lineSep,"    implements IResourceModule",lineSep,"{",lineSep,"    private static var resourceBundleClassNames:Array /* of String */ =",lineSep,"    [",lineSep,codegenResourceBundleClassNames(locales,bundleNames),lineSep,"    ];",lineSep,lineSep,"    public function ",className,"()",lineSep,"    {",lineSep,"        super();",lineSep,"    }",lineSep,lineSep,"    private var _resourceBundles:Array /* of ResourceBundle */;",lineSep,lineSep,"    public function get resourceBundles():Array /* of ResourceBundle */",lineSep,"    {",lineSep,"        if (!_resourceBundles)",lineSep,"        {",lineSep,"            _resourceBundles = [];",lineSep,"            var n:int = resourceBundleClassNames.length;",lineSep,"            for (var i:int = 0; i < n; i++)",lineSep,"            {",lineSep,"                var resourceBundleClass:Class =",lineSep,"                    Class(getDefinitionByName(resourceBundleClassNames[i]));",lineSep,"                var resourceBundle:ResourceBundle = new resourceBundleClass();",lineSep,"                _resourceBundles.push(resourceBundle);",lineSep,"            }",lineSep,"        }",lineSep,lineSep,"        return _resourceBundles;",lineSep,"    }",lineSep,"}",lineSep,lineSep,"}",lineSep};  String code=StringJoiner.join(codePieces,null);  try {    BufferedWriter bufferedWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(resourceModuleFile),"UTF8"));    bufferedWriter.write(code);    bufferedWriter.close();  } catch (  Exception e) {  }  return resourceModuleFile;}  }
class C{  public void testGetContentType() throws Exception {  Content c=null;  Metadata p=new Metadata();  c=new Content("http://www.foo.com/","http://www.foo.com/","".getBytes("UTF8"),"text/html; charset=UTF-8",p,conf);  assertEquals("text/html",c.getContentType());  c=new Content("http://www.foo.com/foo.html","http://www.foo.com/","".getBytes("UTF8"),"",p,conf);  assertEquals("text/html",c.getContentType());  c=new Content("http://www.foo.com/foo.html","http://www.foo.com/","".getBytes("UTF8"),null,p,conf);  assertEquals("text/html",c.getContentType());  c=new Content("http://www.foo.com/","http://www.foo.com/","<html></html>".getBytes("UTF8"),"",p,conf);  assertEquals("text/html",c.getContentType());  c=new Content("http://www.foo.com/foo.html","http://www.foo.com/","<html></html>".getBytes("UTF8"),"text/plain",p,conf);  assertEquals("text/html",c.getContentType());  c=new Content("http://www.foo.com/foo.png","http://www.foo.com/","<html></html>".getBytes("UTF8"),"text/plain",p,conf);  assertEquals("text/html",c.getContentType());  c=new Content("http://www.foo.com/","http://www.foo.com/","".getBytes("UTF8"),"",p,conf);  assertEquals(MimeTypes.OCTET_STREAM,c.getContentType());  c=new Content("http://www.foo.com/","http://www.foo.com/","".getBytes("UTF8"),null,p,conf);  assertNotNull(c.getContentType());}  }
class C{  public void test_GET_accessPath_delete_s() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long result=countResults(doGetWithAccessPath(new URIImpl("http://www.bigdata.com/Mike"),null,null));  assertEquals(3,result);}  }
class C{  public synchronized ZooKeeperClientBuilder statsLogger(StatsLogger statsLogger){  this.statsLogger=statsLogger;  return this;}  }
class C{  protected void uninstallKeyboardActions(){  SwingUtilities.replaceUIActionMap(splitPane,null);  SwingUtilities.replaceUIInputMap(splitPane,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,null);}  }
class C{  public InvalidMpqArchiveException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public Key max(){  if (isEmpty())   throw new NoSuchElementException("called max() with empty set");  return set.last();}  }
class C{  public MqttConnectOptions(){}  }
class C{  public boolean isStarted(){  return active;}  }
class C{  boolean isEnabled(Group g,Env.AccessKind access){  if (map.isEmpty())   map.put("all",Env.AccessKind.PROTECTED);  Env.AccessKind ak=map.get(g.optName());  if (ak != null && access.compareTo(ak) >= 0)   return true;  ak=map.get(ALL);  if (ak != null && access.compareTo(ak) >= 0) {    ak=map.get(g.notOptName());    if (ak == null || access.compareTo(ak) > 0)     return true;  }  return false;}  }
class C{  public RemoveNetworkParams withNetworkId(@NotNull String netId){  requireNonNull(netId);  this.netId=netId;  return this;}  }
class C{  public FilterTerms(Terms in){  if (in == null) {    throw new NullPointerException("incoming Terms must not be null");  }  this.in=in;}  }
class C{  protected void assertSingleValue(Statement stat,String sql,int expected) throws SQLException {  ResultSet rs=stat.executeQuery(sql);  assertTrue(rs.next());  assertEquals(expected,rs.getInt(1));  assertFalse(rs.next());}  }
class C{  public boolean pointInScrollBar(int x,int y){  return x >= xpos && x <= xpos + width && y >= startingYPos && y <= startingYPos + maxDisplacement + height;}  }
class C{  public void stop(){  mRunning=false;  mStop=true;}  }
class C{  public JSONWriter endArray() throws JSONException {  return this.end('a',']');}  }
class C{  public boolean isAnExpression(){  if (isA(Types.COMPLEX_EXPRESSION)) {    return true;  }  return marked;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiToolBarUI();  return MultiLookAndFeel.createUIs(mui,((MultiToolBarUI)mui).uis,a);}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public void addAnomalies(XYPlot plot,ArrayList<Anomaly> anomalyList){  for (  Anomaly a : anomalyList) {    IntervalSequence is=a.intervals;    for (    Interval i : is) {      ValueMarker marker=new ValueMarker(i.index);      marker.setPaint(Color.black);      plot.addDomainMarker(marker);    }  }}  }
class C{  public boolean isSetError(){  return this.error != null;}  }
class C{  public Intent putExtra(String name,byte value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putByte(name,value);  return this;}  }
class C{  public boolean equals(String productId,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,Map<String,String> orderItemAttributes,String prodCatalogId,BigDecimal selectedAmount,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,boolean isPromo){  if (this.productId == null || productId == null) {    return false;  }  if (!this.productId.equals(productId)) {    return false;  }  if ((this.prodCatalogId == null && prodCatalogId != null) || (this.prodCatalogId != null && prodCatalogId == null)) {    return false;  }  if (this.prodCatalogId != null && prodCatalogId != null && !this.prodCatalogId.equals(prodCatalogId)) {    return false;  }  if (selectedAmount != null && this.selectedAmount.compareTo(selectedAmount) != 0) {    return false;  }  if ((this.reservStart == null && reservStart != null) || (this.reservStart != null && reservStart == null)) {    return false;  }  if (this.reservStart != null && reservStart != null && !this.reservStart.equals(reservStart)) {    return false;  }  if (reservLength != null && this.reservLength.compareTo(reservLength) != 0) {    return false;  }  if (reservPersons != null && this.reservPersons.compareTo(reservPersons) != 0) {    return false;  }  if (this.accommodationMapId != null && !this.accommodationMapId.equals(accommodationMapId)) {    return false;  }  if (this.accommodationSpotId != null && !this.accommodationSpotId.equals(accommodationSpotId)) {    return false;  }  if (this.isPromo != isPromo) {    return false;  }  if ((this.additionalProductFeatureAndAppls == null && UtilValidate.isNotEmpty(additionalProductFeatureAndAppls)) || (UtilValidate.isNotEmpty(this.additionalProductFeatureAndAppls) && additionalProductFeatureAndAppls == null) || (this.additionalProductFeatureAndAppls != null && additionalProductFeatureAndAppls != null && (this.additionalProductFeatureAndAppls.size() != additionalProductFeatureAndAppls.size() || !(this.additionalProductFeatureAndAppls.equals(additionalProductFeatureAndAppls))))) {    return false;  }  if ((this.attributes == null && UtilValidate.isNotEmpty(attributes)) || (UtilValidate.isNotEmpty(this.attributes) && attributes == null) || (this.attributes != null && attributes != null && (this.attributes.size() != attributes.size() || !(this.attributes.equals(attributes))))) {    return false;  }  if (configWrapper != null && !configWrapper.equals(this.configWrapper)) {    return false;  }  if (itemType != null && !itemType.equals(this.itemType)) {    return false;  }  if (itemGroup != null && !itemGroup.equals(this.itemGroup)) {    return false;  }  if (quoteId != null) {    return false;  }  if (requirementId != null) {    return false;  }  if ((this.orderItemAttributes == null && UtilValidate.isNotEmpty(orderItemAttributes)) || (UtilValidate.isNotEmpty(this.orderItemAttributes) && orderItemAttributes == null) || (this.orderItemAttributes != null && orderItemAttributes != null && (this.orderItemAttributes.size() != orderItemAttributes.size() || !(this.orderItemAttributes.equals(orderItemAttributes))))) {    return false;  }  return true;}  }
class C{  public boolean isPrimitive(){  Class<?> t=getTypeInternal();  return t != null && t.isPrimitive();}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/exports") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep export(@PathParam("id") URI id,FileSystemExportParam param) throws InternalException {  _log.info("Export request recieved {}",id);  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  ArgValidator.checkFieldValueFromEnum(param.getPermissions(),"permissions",EnumSet.allOf(FileShareExport.Permissions.class));  _log.info("Export security type {}",param.getSecurityType());  for (  String sectype : param.getSecurityType().split(",")) {    ArgValidator.checkFieldValueFromEnum(sectype.trim(),"type",EnumSet.allOf(FileShareExport.SecurityTypes.class));  }  ArgValidator.checkFieldValueFromEnum(param.getProtocol(),"protocol",EnumSet.allOf(StorageProtocol.File.class));  validateIpInterfacesRegistered(param.getEndpoints(),_dbClient);  FileShare fs=queryResource(id);  String task=UUID.randomUUID().toString();  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,fs.getVirtualPool());  if (!vpool.getProtocols().contains(StorageProtocol.File.NFS.name()) && !vpool.getProtocols().contains(StorageProtocol.File.NFSv4.name())) {    throw APIException.methodNotAllowed.vPoolDoesntSupportProtocol("Vpool doesn't support " + StorageProtocol.File.NFS.name() + " or "+ StorageProtocol.File.NFSv4+ " protocol");  }  StoragePort sport=_fileScheduler.placeFileShareExport(fs,param.getProtocol(),param.getEndpoints());  String path=fs.getPath();  String mountPath=fs.getMountPath();  String subDirectory=param.getSubDirectory();  if (param.getSubDirectory() != null && !param.getSubDirectory().equalsIgnoreCase("null") && param.getSubDirectory().length() > 0) {    path+="/" + param.getSubDirectory();    mountPath+="/" + param.getSubDirectory();  }  FSExportMap exportMap=fs.getFsExports();  if (exportMap != null) {    Iterator it=fs.getFsExports().keySet().iterator();    boolean exportExists=false;    while (it.hasNext()) {      String fsExpKey=(String)it.next();      FileExport fileExport=fs.getFsExports().get(fsExpKey);      if (fileExport.getPath().equalsIgnoreCase(path)) {        exportExists=true;        break;      }    }    if (exportExists) {      throw APIException.badRequests.fileSystemHasExistingExport();    }  }  FileShareExport export=new FileShareExport(param.getEndpoints(),param.getSecurityType(),param.getPermissions(),param.getRootUserMapping(),param.getProtocol(),sport.getPortGroup(),sport.getPortNetworkId(),path,mountPath,subDirectory,param.getComments());  _log.info(String.format("FileShareExport --- FileShare id: %1$s, Clients: %2$s, StoragePort: %3$s, SecurityType: %4$s, " + "Permissions: %5$s, Root user mapping: %6$s, Protocol: %7$s, path: %8$s, mountPath: %9$s, SubDirectory: %10$s",id,export.getClients(),sport.getPortName(),export.getSecurityType(),export.getPermissions(),export.getRootUserMapping(),export.getProtocol(),export.getPath(),export.getMountPath(),export.getSubDirectory()));  Operation op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.EXPORT_FILE_SYSTEM);  op.setDescription("Filesystem export");  FileServiceApi fileServiceApi=getFileShareServiceImpl(fs,_dbClient);  fileServiceApi.export(device.getId(),fs.getId(),Arrays.asList(export),task);  auditOp(OperationTypeEnum.EXPORT_FILE_SYSTEM,true,AuditLogManager.AUDITOP_BEGIN,fs.getId().toString(),device.getId().toString(),export.getClients(),param.getSecurityType(),param.getPermissions(),param.getRootUserMapping(),param.getProtocol());  return toTask(fs,task,op);}  }
class C{  public boolean isPrivate(){  return Modifier.isPrivate(_method.getModifiers());}  }
class C{  @Override public long lastModified(){  checkCachedValues();  return privateLastModified;}  }
class C{  public void propertyChange(PropertyChangeEvent event){  getListener().propertyChange(event);}  }
class C{  protected JsonToken _handleInvalidNumberStart(int ch,boolean negative) throws IOException, JsonParseException {  if (ch == 'I') {    if (_inputPtr >= _inputEnd) {      if (!loadMore()) {        _reportInvalidEOFInValue();      }    }    ch=_inputBuffer[_inputPtr++];    if (ch == 'N') {      String match=negative ? "-INF" : "+INF";      _matchToken(match,3);      if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {        return resetAsNaN(match,negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);      }      _reportError("Non-standard token '" + match + "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");    } else     if (ch == 'n') {      String match=negative ? "-Infinity" : "+Infinity";      _matchToken(match,3);      if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {        return resetAsNaN(match,negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);      }      _reportError("Non-standard token '" + match + "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");    }  }  reportUnexpectedNumberChar(ch,"expected digit (0-9) to follow minus sign, for valid numeric value");  return null;}  }
class C{  public void initializeBlockConnectivity(){  if (initialized) {    log.error("Call to initialize a connectivity list that has already been initialized");    return;  }  cList=new ArrayList<LayoutConnectivity>();  LayoutBlock blk1=null;  LayoutBlock blk2=null;  LayoutConnectivity c=null;  Point2D p1;  Point2D p2;  if (layoutEditor.pointList.size() > 0) {    PositionablePoint p=null;    TrackSegment ts1=null;    TrackSegment ts2=null;    for (int i=0; i < layoutEditor.pointList.size(); i++) {      p=layoutEditor.pointList.get(i);      if (p.getType() == PositionablePoint.ANCHOR) {        ts1=p.getConnect1();        ts2=p.getConnect2();        if ((ts1 != null) && (ts2 != null)) {          blk1=ts1.getLayoutBlock();          blk2=ts2.getLayoutBlock();          if ((blk1 != null) && (blk2 != null) && (blk1 != blk2)) {            c=new LayoutConnectivity(blk1,blk2);            if (ts1.getConnect1() == p) {              p1=layoutEditor.getCoords(ts1.getConnect2(),ts1.getType2());            } else {              p1=layoutEditor.getCoords(ts1.getConnect1(),ts1.getType1());            }            if (ts2.getConnect1() == p) {              p2=layoutEditor.getCoords(ts2.getConnect2(),ts2.getType2());            } else {              p2=layoutEditor.getCoords(ts2.getConnect1(),ts2.getType1());            }            c.setDirection(computeDirection(p1,p2));            c.setConnections(ts1,ts2,LayoutEditor.TRACK,p);            cList.add(c);          }        }      }      if (p.getType() == PositionablePoint.EDGE_CONNECTOR) {        ts1=p.getConnect1();        ts2=p.getConnect2();        if ((ts1 != null) && (ts2 != null)) {          blk1=ts1.getLayoutBlock();          blk2=ts2.getLayoutBlock();          if ((blk1 != null) && (blk2 != null) && (blk1 != blk2)) {            c=new LayoutConnectivity(blk1,blk2);            if (ts1.getConnect1() == p) {              p1=layoutEditor.getCoords(ts1.getConnect2(),ts1.getType2());            } else {              p1=layoutEditor.getCoords(ts1.getConnect1(),ts1.getType1());            }            c.setDirection(computeDirection(p1,p.getCoords()));            c.setConnections(ts1,ts2,LayoutEditor.TRACK,p);            cList.add(c);          }        }      }    }  }  if (layoutEditor.trackList.size() > 0) {    LayoutTurnout lt=null;    int type=0;    LevelXing lx=null;    LayoutSlip ls=null;    TrackSegment ts=null;    for (int i=0; i < layoutEditor.trackList.size(); i++) {      ts=layoutEditor.trackList.get(i);      blk1=ts.getLayoutBlock();      if (blk1 != null) {        if ((ts.getType1() >= LayoutEditor.TURNOUT_A) && (ts.getType1() <= LayoutEditor.LEVEL_XING_D)) {          if (ts.getType1() <= LayoutEditor.TURNOUT_D) {            lt=(LayoutTurnout)ts.getConnect1();            type=ts.getType1();            blk2=lt.getLayoutBlock();            if (lt.getTurnoutType() > LayoutTurnout.WYE_TURNOUT) {              if ((type == LayoutEditor.TURNOUT_B) && (lt.getLayoutBlockB() != null)) {                blk2=lt.getLayoutBlockB();              }              if ((type == LayoutEditor.TURNOUT_C) && (lt.getLayoutBlockC() != null)) {                blk2=lt.getLayoutBlockC();              }              if ((type == LayoutEditor.TURNOUT_D) && (lt.getLayoutBlockD() != null)) {                blk2=lt.getLayoutBlockD();              }            }            if ((blk2 != null) && (blk1 != blk2)) {              c=new LayoutConnectivity(blk1,blk2);              c.setConnections(ts,lt,type,null);              c.setDirection(computeDirection(layoutEditor.getCoords(ts.getConnect2(),ts.getType2()),layoutEditor.getCoords(ts.getConnect1(),type)));              cList.add(c);            }          } else {            lx=(LevelXing)ts.getConnect1();            type=ts.getType1();            if ((type == LayoutEditor.LEVEL_XING_A) || (type == LayoutEditor.LEVEL_XING_C)) {              blk2=lx.getLayoutBlockAC();            } else {              blk2=lx.getLayoutBlockBD();            }            if ((blk2 != null) && (blk1 != blk2)) {              c=new LayoutConnectivity(blk1,blk2);              c.setConnections(ts,lx,type,null);              c.setDirection(computeDirection(layoutEditor.getCoords(ts.getConnect2(),ts.getType2()),layoutEditor.getCoords(ts.getConnect1(),type)));              cList.add(c);            }          }        } else         if ((ts.getType1() >= LayoutEditor.SLIP_A) && (ts.getType1() <= LayoutEditor.SLIP_D)) {          ls=(LayoutSlip)ts.getConnect1();          type=ts.getType1();          blk2=ls.getLayoutBlock();          if ((blk2 != null) && (blk1 != blk2)) {            c=new LayoutConnectivity(blk1,blk2);            c.setConnections(ts,ls,type,null);            c.setDirection(computeDirection(layoutEditor.getCoords(ts.getConnect2(),ts.getType2()),layoutEditor.getCoords(ts.getConnect1(),type)));            cList.add(c);          }        }        if ((ts.getType2() >= LayoutEditor.TURNOUT_A) && (ts.getType2() <= LayoutEditor.LEVEL_XING_D)) {          if (ts.getType2() <= LayoutEditor.TURNOUT_D) {            lt=(LayoutTurnout)ts.getConnect2();            type=ts.getType2();            blk2=lt.getLayoutBlock();            if (lt.getTurnoutType() > LayoutTurnout.WYE_TURNOUT) {              if ((type == LayoutEditor.TURNOUT_B) && (lt.getLayoutBlockB() != null)) {                blk2=lt.getLayoutBlockB();              }              if ((type == LayoutEditor.TURNOUT_C) && (lt.getLayoutBlockC() != null)) {                blk2=lt.getLayoutBlockC();              }              if ((type == LayoutEditor.TURNOUT_D) && (lt.getLayoutBlockD() != null)) {                blk2=lt.getLayoutBlockD();              }            }            if ((blk2 != null) && (blk1 != blk2)) {              c=new LayoutConnectivity(blk1,blk2);              c.setConnections(ts,lt,type,null);              c.setDirection(computeDirection(layoutEditor.getCoords(ts.getConnect1(),ts.getType1()),layoutEditor.getCoords(ts.getConnect2(),type)));              cList.add(c);            }          } else {            lx=(LevelXing)ts.getConnect2();            type=ts.getType2();            if ((type == LayoutEditor.LEVEL_XING_A) || (type == LayoutEditor.LEVEL_XING_C)) {              blk2=lx.getLayoutBlockAC();            } else {              blk2=lx.getLayoutBlockBD();            }            if ((blk2 != null) && (blk1 != blk2)) {              c=new LayoutConnectivity(blk1,blk2);              c.setConnections(ts,lx,type,null);              c.setDirection(computeDirection(layoutEditor.getCoords(ts.getConnect1(),ts.getType1()),layoutEditor.getCoords(ts.getConnect2(),type)));              cList.add(c);            }          }        } else         if ((ts.getType2() >= LayoutEditor.SLIP_A) && (ts.getType2() <= LayoutEditor.SLIP_D)) {          ls=(LayoutSlip)ts.getConnect2();          type=ts.getType2();          blk2=ls.getLayoutBlock();          if ((blk2 != null) && (blk1 != blk2)) {            c=new LayoutConnectivity(blk1,blk2);            c.setConnections(ts,ls,type,null);            c.setDirection(computeDirection(layoutEditor.getCoords(ts.getConnect1(),ts.getType1()),layoutEditor.getCoords(ts.getConnect2(),type)));            cList.add(c);          }        }      }    }  }  if (layoutEditor.turnoutList.size() > 0) {    LayoutTurnout lt=null;    for (int i=0; i < layoutEditor.turnoutList.size(); i++) {      lt=layoutEditor.turnoutList.get(i);      if ((lt.getTurnoutType() >= LayoutTurnout.DOUBLE_XOVER) && (lt.getLayoutBlock() != null)) {        if ((lt.getLayoutBlockB() != lt.getLayoutBlock()) || (lt.getLayoutBlockC() != lt.getLayoutBlock()) || (lt.getLayoutBlockD() != lt.getLayoutBlock())) {          if (lt.getLayoutBlock() != lt.getLayoutBlockB()) {            c=new LayoutConnectivity(lt.getLayoutBlock(),lt.getLayoutBlockB());            c.setXoverBoundary(lt,LayoutConnectivity.XOVER_BOUNDARY_AB);            c.setDirection(computeDirection(lt.getCoordsA(),lt.getCoordsB()));            cList.add(c);          }          if ((lt.getTurnoutType() != LayoutTurnout.LH_XOVER) && (lt.getLayoutBlock() != lt.getLayoutBlockC())) {            c=new LayoutConnectivity(lt.getLayoutBlock(),lt.getLayoutBlockC());            c.setXoverBoundary(lt,LayoutConnectivity.XOVER_BOUNDARY_AC);            c.setDirection(computeDirection(lt.getCoordsA(),lt.getCoordsC()));            cList.add(c);          }          if (lt.getLayoutBlockC() != lt.getLayoutBlockD()) {            c=new LayoutConnectivity(lt.getLayoutBlockC(),lt.getLayoutBlockD());            c.setXoverBoundary(lt,LayoutConnectivity.XOVER_BOUNDARY_CD);            c.setDirection(computeDirection(lt.getCoordsC(),lt.getCoordsD()));            cList.add(c);          }          if ((lt.getTurnoutType() != LayoutTurnout.RH_XOVER) && (lt.getLayoutBlockB() != lt.getLayoutBlockD())) {            c=new LayoutConnectivity(lt.getLayoutBlockB(),lt.getLayoutBlockD());            c.setXoverBoundary(lt,LayoutConnectivity.XOVER_BOUNDARY_BD);            c.setDirection(computeDirection(lt.getCoordsB(),lt.getCoordsD()));            cList.add(c);          }        }      }    }  }  initialized=true;}  }
class C{  public boolean isSetSet_field(){  return this.set_field != null;}  }
class C{  @SuppressFBWarnings(value="EI_EXPOSE_REP",justification="intended exposure of mutable data") public RandomGroupsData(Object[][] x){  this.dataArray=x;}  }
class C{  public boolean isAssignableFrom(TypeToken<?> token){  return isAssignableFrom(token.getType());}  }
class C{  @Override public void onMessageReceived(GridNioSession ses,Object msg) throws IgniteCheckedException {  head.onMessageReceived(ses,msg);}  }
class C{  public Message createMessage(JMSContext context) throws Exception {  Message m=null;  String messageFile=Config.parms.getString("mf");synchronized (this) {    if (bytes == null) {      if ("".equals(messageFile)) {        bytes=generateRandomBytes(Config.parms.getInt("ms"));      } else {        try {          final InputStream instream=new BufferedInputStream(new FileInputStream(messageFile));          int size=instream.available();          bytes=new byte[size];          instream.read(bytes);          readFile=true;          instream.close();        } catch (        IOException ioe) {          Log.logger.log(Level.SEVERE,"Cannot read file: {0}",messageFile);          throw ioe;        }      }    }  }  String mtype=Config.parms.getString("mt");  if (mtype.equals(TEXT)) {    try {      String s=new String(bytes,0,bytes.length,"UTF-8");      m=context.createTextMessage(s);    } catch (    Exception e) {      Log.logger.severe("Cannot create TextMessage on this JVM");      throw e;    }  } else   if (mtype.equals(BYTES)) {    m=context.createBytesMessage();    ((BytesMessage)m).writeBytes(bytes);  } else   if (mtype.equals(OBJECT)) {    Serializable o=bytes;    if (readFile) {      try {        ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(bytes));        o=(Serializable)ois.readObject();        ois.close();      } catch (      Exception e) {        Log.logger.log(Level.WARNING,"Could not deserialise {0}, using it as a byte array.",messageFile);      }    }    m=context.createObjectMessage(o);  } else   if (mtype.equals(MAP)) {    m=context.createMapMessage();    ((MapMessage)m).setBytes("name",bytes);  } else   if (mtype.equals(STREAM)) {    m=context.createStreamMessage();    ((StreamMessage)m).writeBytes(bytes);  } else   if (mtype.equals(EMPTY)) {    m=context.createMessage();  } else {    throw new Exception("messagetype=[" + mtype + "] unknown");  }  String propertiesFile=Config.parms.getString("pf");  if ((propertiesFile != null) && (!propertiesFile.equals(""))) {    Properties props=new Properties();    props.load(new BufferedInputStream(new FileInputStream(propertiesFile)));    for (Iterator<String> iter=props.stringPropertyNames().iterator(); iter.hasNext(); ) {      String key=iter.next();      if (!key.endsWith(".type")) {        String keyType=props.getProperty(key + ".type");        String value=props.getProperty(key);        if (keyType != null) {          try {            if (keyType.equalsIgnoreCase("int")) {              m.setIntProperty(key,Integer.parseInt(value));            } else             if (keyType.equalsIgnoreCase("boolean")) {              m.setBooleanProperty(key,Boolean.parseBoolean(value));            } else             if (keyType.equalsIgnoreCase("short")) {              m.setShortProperty(key,Short.parseShort(value));            } else             if (keyType.equalsIgnoreCase("byte")) {              m.setByteProperty(key,Byte.parseByte(value));            } else             if (keyType.equalsIgnoreCase("float")) {              m.setFloatProperty(key,Float.parseFloat(value));            } else             if (keyType.equalsIgnoreCase("double")) {              m.setDoubleProperty(key,Double.parseDouble(value));            } else             if (keyType.equalsIgnoreCase("long")) {              m.setLongProperty(key,Long.parseLong(value));            } else             if (keyType.equalsIgnoreCase("string")) {              m.setStringProperty(key,value);            } else {              Log.logger.log(Level.WARNING,"JMS message property [{0}] has unknown type [{1}] - adding as a string.",new Object[]{key,keyType});              m.setStringProperty(key,value);            }          } catch (          Exception e) {            Log.logger.log(Level.SEVERE,"JMS message property [{0}] is not of type [{1}] - skipping.",new Object[]{key,keyType});          }        } else {          m.setStringProperty(key,value);        }      }    }  }  return m;}  }
class C{  @LmlAction({"close","noOp"}) public void emptyMethod(){}  }
class C{  @Override public void fillRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){}  }
class C{  public static boolean hasCompleteContactInfo(Agent agent){  return agent != null && agent.getFullName() != null && !(agent.getFullName().length() == 0) && agent.getEmail() != null && !(agent.getEmail().length() == 0);}  }
class C{  @Override public void close() throws IOException {  close(GOAWAY_OK,SpdyStream.RST_CANCEL);}  }
class C{  public boolean isDoubleBuffered(){  return isDoubleBuffered;}  }
class C{  public synchronized void weakAssociateAll(Primitive associate,Vertex target,Primitive type,float correctnessMultiplier){  weakAssociateAll(this.network.createVertex(associate),target,this.network.createVertex(type),correctnessMultiplier);}  }
class C{  public void start(){  mVibrator=(Vibrator)mContext.getSystemService(Service.VIBRATOR_SERVICE);  mIsGloballyEnabled=checkGlobalSetting(mContext);  Uri uri=Settings.System.getUriFor(Settings.System.HAPTIC_FEEDBACK_ENABLED);  mContext.getContentResolver().registerContentObserver(uri,false,mContentObserver);}  }
class C{  public void nameChosen(String name){}  }
class C{  final public boolean isRemoving(){  return mRemoving;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public static Discrete serializableInstance(){  return new Discrete(.1,.4,.9);}  }
class C{  @Override public Request<List<Workspace>> all(){  final Invocation request=getWebTarget().path("").request().accept(APPLICATION_JSON).buildGet();  Type collectionType=new TypeToken<List<DefaultWorkspace>>(){  }.getType();  return new SimpleRequest<>(request,new GenericType<List<Workspace>>(collectionType){  },getAuthenticationManager());}  }
class C{  public Builder withTerm(long term){  request.term=Assert.argNot(term,term < 0,"term must not be negative");  return this;}  }
class C{  public static float lerp(float v0,float v1,float t){  return v0 + t * (v1 - v0);}  }
class C{  @Override public void onDestroy(){  if (ctlr != null) {    ctlr.destroy();  }  super.onDestroy();}  }
class C{  public GenericFastItemAdapter<Model,Item> removeModel(int position){  mItemAdapter.removeModel(position);  return this;}  }
class C{  public static void addAppender(FileAppender a){  A.notNull(a,"a");  fileAppenders.add(a);}  }
class C{  public int moveCuboidRegion(final Region region,final Vector dir,final int distance,final boolean copyAir,final BaseBlock replacement) throws MaxChangedBlocksException {  return this.moveRegion(region,dir,distance,copyAir,replacement);}  }
class C{  public WETriangleMesh copy(){  WETriangleMesh m=new WETriangleMesh(name + "-copy",numVertices,numFaces);  for (  Face f : faces) {    m.addFace(f.a,f.b,f.c,f.normal,f.uvA,f.uvB,f.uvC);  }  return m;}  }
class C{  public static Object invokeExactMethod(Object object,String methodName,Object[] args,Class[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {  if (args == null) {    args=ArrayUtils.EMPTY_OBJECT_ARRAY;  }  if (parameterTypes == null) {    parameterTypes=ArrayUtils.EMPTY_CLASS_ARRAY;  }  Method method=getAccessibleMethod(object.getClass(),methodName,parameterTypes);  if (method == null) {    throw new NoSuchMethodException("No such accessible method: " + methodName + "() on object: "+ object.getClass().getName());  }  return method.invoke(object,args);}  }
class C{  private void checkValidity() throws ModbusException {  if (request.getTransactionID() == 0 || response.getTransactionID() == 0) {    return;  }  if (request.getTransactionID() != response.getTransactionID()) {    throw new ModbusException("Transaction ID mismatch");  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static byte remoteByteMethod(){  return BYTE_VALUE;}  }
class C{  public QuotaLineItemEntity subtract(QuotaLineItemEntity val){  return operate(OpCode.SUB,val);}  }
class C{  public static boolean isIndentChar(char ch){  return ScannerHelper.isWhitespace(ch) && !isLineDelimiterChar(ch);}  }
class C{  private Object waitDeviceAvailableToken(int timeout){  Object deviceAvailableToken=null;  if (!isConnected()) {    MeshLog.d(DEBUG,USE_LOG4J,CLASS,"waitDeviceAvailableToken() socket isn't connected, return false");    return deviceAvailableToken;  }  try {    deviceAvailableToken=mDeviceAvailableToken.poll(timeout,TimeUnit.MILLISECONDS);  } catch (  InterruptedException e) {    e.printStackTrace();  }  if (DEBUG) {    MeshLog.i(DEBUG,USE_LOG4J,CLASS,"waitDeviceAvailableToken() " + deviceAvailableToken);  }  return deviceAvailableToken;}  }
class C{  public void importConfiguration(String tenantName,Document doc) throws Exception, NoSuchTenantException, IDMException, ParseException {  this.tenantName=tenantName;  Tenant backup_tenant=this.idmClient.getTenant(tenantName);  try {    NodeList entNodes=doc.getElementsByTagNameNS(SAMLNames.NS_NAME_SAML_METADATA,SAMLNames.ENTDESCRIPTOR);    for (int ind=0; ind < entNodes.getLength(); ind++) {      Element entityEle=(Element)entNodes.item(ind);      if (isExpired(entityEle)) {        throw new IDMException("Document has expired!");      }      NodeList idpList=entityEle.getElementsByTagNameNS(SAMLNames.NS_NAME_SAML_METADATA,SAMLNames.SPSSODESCRIPTOR);      if (idpList.getLength() > 0) {        importSPEntity(entityEle);      }    }  } catch (  Exception e) {    if (!idmClient.getSystemTenant().equalsIgnoreCase(tenantName)) {      Tenant tenant=null;      try {        tenant=idmClient.getTenant(tenantName);      } catch (      NoSuchTenantException ex) {      }      if (backup_tenant != null) {        this.idmClient.setTenant(backup_tenant);      }    }    throw e;  }}  }
class C{  public void addNotify(){synchronized (getTreeLock()) {    if (peer == null)     peer=getToolkit().createPanel(this);    super.addNotify();  }}  }
class C{  @SafeVarargs public final <Result,Progress>Promise<Result,Progress> sequentiallyUntilFirstDone(final Task<Result,Progress>... tasks){  return sequentiallyUntilFirstDone(Arrays.asList(tasks));}  }
class C{  void addMember(final TypeMember member){  Preconditions.checkNotNull(member,"Error: member argument can not be null.");  Preconditions.checkArgument(member.getParentType() == this,"Error: the member's parent type is not this type.");  members.add(member);}  }
class C{  public Name(byte[] b) throws IOException {  this(new DNSInput(b));}  }
class C{  @Override public final void preferenceItemDetails(String strClass,String item,String description){  if (!classPreferenceList.containsKey(strClass)) {    classPreferenceList.put(strClass,new ClassPreferences());  }  ArrayList<PreferenceList> a=classPreferenceList.get(strClass).getPreferenceList();  for (int i=0; i < a.size(); i++) {    if (a.get(i).getItem().equals(item)) {      a.get(i).setDescription(description);      return;    }  }  a.add(new PreferenceList(item,description));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  int index;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  index=(int)employeeList.getLength();  index-=1;  child=employeeList.item(((int)index));  childName=child.getNodeName();  if (equals(12,index)) {    assertEquals("lastNodeName_w_whitespace","#text",childName);  } else {    assertEqualsAutoCase("element","lastNodeName","acronym",childName);    assertEquals("index",5,index);  }}  }
class C{  public boolean breakpoint(int line,boolean value){  if (!breakableLine(line)) {    throw new IllegalArgumentException(String.valueOf(line));  }  boolean changed;synchronized (breakpoints) {    if (breakpoints[line] != value) {      breakpoints[line]=value;      changed=true;    } else {      changed=false;    }  }  return changed;}  }
class C{  protected void onStart(){}  }
class C{  public Object show(Wizard wizard,Rectangle r){  return WizardDisplayer.showWizard(wizard,r);}  }
class C{  private Client createServerClient(){  Client client=new Client();  client.name="Larry";  client.registrationToken=SENDER_ID + "@gcm.googleapis.com";  client.profilePictureUrl="https://lh3.googleusercontent.com/-Y86IN-vEObo/AAAAAAAAAAI/AAAAAAADO1I/QzjOGHq5kNQ/photo.jpg?sz=50";  return client;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=s.readFields();  byte[] tmp=(byte[])fields.get("buf",null);  if (tmp == null)   throw new InvalidObjectException("buf is null and should not be!");  buf=tmp.clone();  len=fields.get("len",0L);  if (buf.length != len)   throw new InvalidObjectException("buf is not the expected size");  origLen=fields.get("origLen",0L);  blob=(Blob)fields.get("blob",null);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("CPaper[");  sb.append(getWidth() / 72).append("x").append(getHeight() / 72).append('"').append(m_landscape ? " Landscape " : " Portrait ").append("x=").append(getImageableX()).append(",y=").append(getImageableY()).append(" w=").append(getImageableWidth()).append(",h=").append(getImageableHeight()).append("]");  return sb.toString();}  }
class C{  public static boolean isAbsolutePath(String systemId){  if (systemId == null)   return false;  final File file=new File(systemId);  return file.isAbsolute();}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a string: ");  String string=input.nextLine();  for (int i=0; i < string.length(); i++) {    if (Character.isLetter(string.charAt(i)))     System.out.print(getNumber(Character.toUpperCase(string.charAt(i)))); else     System.out.print(string.charAt(i));  }  System.out.println();}  }
class C{  JPanel makeEditPanel(JComponent comp,String label,String hint){  JPanel panel=new JPanel();  panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));  JPanel p=new JPanel();  p.add(new JLabel(rbx.getString(label)));  panel.add(p);  if (hint != null) {    panel.setToolTipText(rbx.getString(hint));  }  comp.setMaximumSize(comp.getPreferredSize());  panel.add(comp);  panel.add(Box.createVerticalGlue());  return panel;}  }
class C{  public StateMachineEvent(Object source){  super(source);}  }
class C{  private static String toStringPretty(JsonArray jsonArray,int level){  StringBuffer buf=new StringBuffer();  buf.append("[");  String indent="\n" + VAUtils.indent(level);  boolean firstElt=true;  for (int i=0; i < jsonArray.size(); i++) {    JsonElement elt=jsonArray.get(i);    if (firstElt)     firstElt=false; else     buf.append(",");    buf.append(indent);    buf.append(toStringPretty(elt,level + 1));  }  buf.append("]");  return buf.toString();}  }
class C{  private String asRegPattern(String string){  StringBuffer out=new StringBuffer(string.length());  for (int i=0, length=string.length(); i < length; i++) {    char ch=string.charAt(i);    if (ch == '\\') {      out.append("\\\\");    } else     if (ch == '*') {      out.append("\\*");    } else {      out.append(ch);    }  }  return out.toString();}  }
class C{  public static ViewStack create(ViewGroup container,ViewStackDelegate delegate){  checkNotNull(container,"container == null");  checkNotNull(delegate,"delegate == null");  return new ViewStack(container,delegate);}  }
class C{  public void testWithoutMimeMagic(){  for (  String[] testPage : textBasedFormats) {    String mimeType=getMimeType(urlPrefix + testPage[1],testPage[3].getBytes(defaultCharset),testPage[2],false);    assertEquals("",testPage[0],mimeType);  }}  }
class C{  private void handleFileSystemBrowse(){  FileDialog dialog=new FileDialog(getShell());  if (dialog.open() == null) {    return;  }  jarFile.setText(dialog.getFilterPath() + System.getProperty("file.separator") + dialog.getFileName());  loadJdbcDriver();}  }
class C{  public static String nameFor(PTQuery q,Var v){  if (q instanceof PTQuery_GroupBy) {    PTQuery_GroupBy qgb=(PTQuery_GroupBy)q;    if (v instanceof AggVar && qgb.aggregate.contains(v)) {      AggVar av=(AggVar)v;      if (av.aggregationType == Agg.COUNT && av.aggregatedVar == null) {        return "COUNT";      } else {        return String.format("%s(%s)",av.aggregationType,nameFor(qgb,av.aggregatedVar));      }    }  }  if (q.constructed.containsValue(v)) {    return ((LetVar)v).varName;  } else   if (q.observed.containsValue(v)) {    return q.source.varName(((ObservedVar)v).observedAs);  } else {    for (    String hb : q.happenedBefore.keySet()) {      String name=nameFor(q.happenedBefore.get(hb),v);      if (name != null) {        return String.format("%s.%s",hb,name);      }    }  }  return null;}  }
class C{  public void write(String s){  write(s,0,s.length());}  }
class C{  public static boolean contains(Symbol[] symbols,Symbol key){  if (symbols == null || symbols.length == 0) {    return false;  }  for (  Symbol symbol : symbols) {    if (symbol.equals(key)) {      return true;    }  }  return false;}  }
class C{  private String beforeReverseCorrect(MInvoice invoice){  if (invoice.get_ValueAsBoolean("IsFixedAssetInvoice")) {    final String sql="SELECT A_Asset_Addition_ID " + "FROM A_Asset_Addition WHERE C_Invoice_ID=? ";    int A_Asset_Addition_ID=DB.getSQLValueEx(invoice.get_TrxName(),sql,invoice.get_ID());    MAssetAddition assetAdd=new MAssetAddition(invoice.getCtx(),A_Asset_Addition_ID,invoice.get_TrxName());    if (assetAdd.getDocStatus().equals(MAssetAddition.DOCSTATUS_Completed) || assetAdd.getDocStatus().equals(MAssetAddition.DOCSTATUS_Closed)) {      return "Can't Void or Reverse Invoice with Completed Asset Addition";    }  }  return null;}  }
class C{  public static boolean areEqual(Bundle bundle1,Bundle bundle2){  if (bundle1 == null) {    return bundle2 == null;  } else   if (bundle2 == null) {    return false;  } else   if (bundle1 == bundle2) {    return true;  }  Set<String> keySet=bundle1.keySet();  if (!keySet.equals(bundle2.keySet())) {    return false;  }  for (  String key : keySet) {    Object value1=bundle1.get(key);    Object value2=bundle2.get(key);    if (!(value1 == null ? value2 == null : value1.equals(value2))) {      return false;    }  }  return true;}  }
class C{  public void testDhtClose() throws Exception {  IgniteCache<Integer,Integer> dhtCache0=grid(0).getOrCreateCache(getDhtConfig());  final Integer key=primaryKey(dhtCache0);  assertNull(dhtCache0.get(key));  dhtCache0.put(key,key);  assertEquals(key,dhtCache0.get(key));  IgniteCache<Integer,Integer> dhtCache1=grid(1).cache(CACHE_NAME_DHT);  IgniteCache<Integer,Integer> dhtCache2=grid(2).cache(CACHE_NAME_DHT);  dhtCache0.close();  try {    dhtCache0.get(key);    fail();  } catch (  IllegalStateException ignored) {  }  assertEquals(key,dhtCache1.get(key));  assertEquals(key,dhtCache2.get(key));  IgniteCache<Integer,Integer> dhtCache0New=grid(0).cache(CACHE_NAME_DHT);  assertNotSame(dhtCache0,dhtCache0New);  assertEquals(key,dhtCache0New.get(key));  dhtCache2.put(key,key + 1);  assertEquals((Object)(key + 1),dhtCache0New.get(key));  stopAllGrids(true);  startGrid(0);  dhtCache0=grid(0).getOrCreateCache(getDhtConfig());  assertNull(dhtCache0.get(key));  dhtCache0.put(key,key);  assertEquals(key,dhtCache0.get(key));  dhtCache0.close();  try {    dhtCache0.get(key);    fail();  } catch (  IllegalStateException ignored) {  }  dhtCache0=grid(0).cache(CACHE_NAME_DHT);  assertEquals(key,dhtCache0.get(key));}  }
class C{  public static boolean asBoolean(float[] array){  return array.length > 0;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (newRecord) {    MOrgInfo info=new MOrgInfo(this);    info.saveEx();    MRoleOrgAccess.createForOrg(this);    MRole role=MRole.getDefault(getCtx(),true);    role.set_TrxName(get_TrxName());    role.loadAccess(true);    insert_Tree(MTree_Base.TREETYPE_Organization);  }  if (!newRecord && (is_ValueChanged("Value") || is_ValueChanged("Name"))) {    MAccount.updateValueDescription(getCtx(),"AD_Org_ID=" + getAD_Org_ID(),get_TrxName());    if ("Y".equals(Env.getContext(getCtx(),"$Element_OT")))     MAccount.updateValueDescription(getCtx(),"AD_OrgTrx_ID=" + getAD_Org_ID(),get_TrxName());  }  return true;}  }
class C{  protected void burnWhitespaces(){  while (reader.hasNextCharacter()) {    final char character=reader.peekCharacter();    if (Strings.isWhitespace(character) || character == commentMarker && reader.hasNextCharacter(1) && reader.peekCharacter(1) == commentSecondary) {      next();    } else {      return;    }  }}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  public int indexY(int k){  return (k / this.xValues.length);}  }
class C{  private boolean isMusicPlayer(){  return playerSetting != null && playerSetting.equalsIgnoreCase("musicPlayer");}  }
class C{  public Measure withName(String name){  this.name=name;  return this;}  }
class C{  public void mouseDragged(MouseEvent e){  if (Debug.debugging("mousemodedetail")) {    Debug.output(getID() + "|NavMouseMode.mouseDragged()");  }  super.mouseDragged(e);  Object obj=e.getSource();  if (obj instanceof MapBean && theMap == null) {    theMap=(MapBean)obj;    theMap.addPaintListener(this);  }  MapBean map=this.theMap;  Point firstPoint=this.point1;  if (map != null) {    if (!autoZoom) {      return;    }    point2=getRatioPoint(map,firstPoint,e.getPoint());    map.repaint();  }}  }
class C{  @Override public String toString(){  return ("" + byteAllowance + ", "+ rechargeThreshold+ ", "+ rechargeBlockMs);}  }
class C{  protected void createOrReplaceSequences(boolean createSequenceTables,boolean createSequences) throws EclipseLinkException {  boolean fast=FAST_TABLE_CREATOR;  if (fast) {    return;  }  processSequenceDefinitions(createSequenceTables,createSequences,true);}  }
class C{  public Entry(int hash,Object key1,Object key2,Object value,Entry next){  this.hash=hash;  this.key1=key1;  this.key2=key2;  this.value=value;  this.next=next;}  }
class C{  private void addNeuron(final Neuron neuron){  if (objectNodeMap.get(neuron) != null) {    return;  }  NeuronNode node=new NeuronNode(this,neuron);  canvas.getLayer().addChild(node);  objectNodeMap.put(neuron,node);  selectionModel.setSelection(Collections.singleton(node));}  }
class C{  public static <E extends Enum<E>>Field<E> ofEnum(Class<E> enumType,String name,String description){  return new Field<>(name,enumType,description);}  }
class C{  public boolean canMoveForward(){  return currentIndex >= 0 && currentIndex < (history.size() - 1);}  }
class C{  public static int unsignedByteToInt(byte b){  return (int)b & 0xFF;}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  this.sendSelfPatch(buildPatch(TaskState.TaskStage.FAILED,null,e));}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 6;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;    size+=8 + tanns.getSize();    newUTF8("RuntimeVisibleTypeAnnotations");  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;    size+=8 + itanns.getSize();    newUTF8("RuntimeInvisibleTypeAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,0,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    anns=null;    ianns=null;    attrs=null;    innerClassesCount=0;    innerClasses=null;    bootstrapMethodsCount=0;    bootstrapMethods=null;    firstField=null;    lastField=null;    firstMethod=null;    lastMethod=null;    computeMaxs=false;    computeFrames=true;    invalidFrames=false;    new ClassReader(out.data).accept(this,ClassReader.SKIP_FRAMES);    return toByteArray();  }  return out.data;}  }
class C{  public int readUFWord(int index){  return this.readUShort(index);}  }
class C{  @Override public void curveDetail(int detail){}  }
class C{  protected final void sendAttachOrCreateToBuffer(DatabaseParameterBuffer dpb,boolean create) throws SQLException, IOException {  final int operation=create ? op_create : op_attach;  final XdrOutputStream xdrOut=getXdrOut();  final Encoding filenameEncoding=getFilenameEncoding(dpb);  xdrOut.writeInt(operation);  xdrOut.writeInt(0);  xdrOut.writeString(connection.getAttachObjectName(),filenameEncoding);  dpb=((DatabaseParameterBufferExtension)dpb).removeExtensionParams();  xdrOut.writeTyped(dpb);}  }
class C{  public EntryEvent createEntryEvent(){  EntryEventImpl entryEvent=new EntryEventImpl();  return entryEvent;}  }
class C{  protected void initializeIndices(){  int i;  mIndices=new int[mModel.getRowCount()];  for (i=0; i < mIndices.length; i++) {    mIndices[i]=i;  }}  }
class C{  public NecronomiconCreationRitual(String unlocalizedName,int bookType,float requiredEnergy,ItemStack item,Object... offerings){  this(unlocalizedName,bookType,-1,requiredEnergy,item,offerings);}  }
class C{  private void appendTab(Component comp){  String title=comp.getName();  int insertAt=findInsertPosition(title);  tabs.insertTab(title,null,comp,title,insertAt);}  }
class C{  public Map<String,Object> processMetadata(Draft2Job job,Object value,Draft2OutputPort outputPort,Object outputBinding){  if (outputPort.getOutputBinding() != null) {    outputBinding=outputPort.getOutputBinding();  }  Map<String,Object> metadata=Draft2FileValueHelper.getMetadata(value);  String inputId=Draft2BindingHelper.getInheritMetadataFrom(outputBinding);  if (StringUtils.isEmpty(inputId)) {    logger.info("Metadata for {} is {}.",outputPort.getId(),metadata);    return metadata;  }  Object input=null;  String normalizedInputId=Draft2SchemaHelper.normalizeId(inputId);  for (  Entry<String,Object> inputEntry : job.getInputs().entrySet()) {    if (inputEntry.getKey().equals(normalizedInputId)) {      input=inputEntry.getValue();      break;    }  }  List<Map<String,Object>> metadataList=findAllMetadata(input);  Map<String,Object> inheritedMetadata=intersect(metadataList);  if (inheritedMetadata == null) {    return metadata;  }  if (metadata != null) {    inheritedMetadata.putAll(metadata);  }  logger.info("Metadata for {} is {}.",outputPort.getId(),inheritedMetadata);  return inheritedMetadata;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (name == null) {    throw new NullPointerException();  }  if (nodeType == null) {    throw new NullPointerException();  }}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  public Boolean isMutualChapSettable(){  return mutualChapSettable;}  }
class C{  @Override public void deallocateBwForContainer(Container container){  if (getContainerBwTable().containsKey(container.getUid())) {    long amountFreed=getContainerBwTable().remove(container.getUid());    setAvailableVmBw(getAvailableVmBw() + amountFreed);    container.setCurrentAllocatedBw(0);  }}  }
class C{  public void handleSetChildren(ReactShadowNode nodeToManage,ReadableArray childrenTags){  if (!ENABLED) {    mUIViewOperationQueue.enqueueSetChildren(nodeToManage.getReactTag(),childrenTags);    return;  }  for (int i=0; i < childrenTags.size(); i++) {    ReactShadowNode nodeToAdd=mShadowNodeRegistry.getNode(childrenTags.getInt(i));    addNodeToNode(nodeToManage,nodeToAdd,i);  }}  }
class C{  @Override public boolean isProductPurchased(String productID){  if (iapHelper != null) {    return iapHelper.isProductPurchased(productID);  }  return false;}  }
class C{  public RevolvingFileStrategy(final File baseFile,final int maxRotations){  this(baseFile,-1,maxRotations);}  }
class C{  @Override public void write(int v) throws IOException {  _buf[0]=(byte)v;  _stream.write(_buf,0,1,false);}  }
class C{  public NumberRangeModel(double lo,double hi,double min,double max){  this(new Double(lo),new Double(hi),new Double(min),new Double(max));}  }
class C{  private static void mapInitsToVplexStorageViews(Map<String,Set<String>> initToMaskMap,UnManagedExportMask mask,StringSet portList){  String[] maskPathParts=mask.getMaskingViewPath().substring(1).split(VPlexApiConstants.SLASH);  String maskClusterName=maskPathParts[1];  for (  String initPort : portList) {    String initPortKey=maskClusterName + VPlexApiConstants.SLASH + initPort;    Set<String> maskSet=initToMaskMap.get(initPortKey);    if (null == maskSet) {      maskSet=new HashSet<String>();      initToMaskMap.put(initPortKey,maskSet);    }    maskSet.add(mask.getMaskingViewPath());  }}  }
class C{  public Vector(final Vector A,final Vector B){  final double thisX=A.y * B.z - A.z * B.y;  final double thisY=A.z * B.x - A.x * B.z;  final double thisZ=A.x * B.y - A.y * B.x;  final double magnitude=magnitude(thisX,thisY,thisZ);  if (Math.abs(magnitude) < MINIMUM_RESOLUTION) {    throw new IllegalArgumentException("Degenerate/parallel vector constructed");  }  final double inverseMagnitude=1.0 / magnitude;  this.x=thisX * inverseMagnitude;  this.y=thisY * inverseMagnitude;  this.z=thisZ * inverseMagnitude;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPeriodControl[");  sb.append(get_ID()).append(",").append(getDocBaseType()).append(",Status=").append(getPeriodStatus()).append("]");  return sb.toString();}  }
class C{  public boolean isEmpty(){  return mSegments.isEmpty();}  }
class C{  private void generate(Pool cp) throws SAXException {  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) < 0) {    return;  }  if (((PoolImpl)cp).isUsedByGateway()) {    return;  }  AttributesImpl atts=new AttributesImpl();  try {    atts.addAttribute("","",NAME,"",cp.getName());    if (generateDefaults() || cp.getFreeConnectionTimeout() != PoolFactory.DEFAULT_FREE_CONNECTION_TIMEOUT)     atts.addAttribute("","",FREE_CONNECTION_TIMEOUT,"",String.valueOf(cp.getFreeConnectionTimeout()));    if (generateDefaults() || cp.getLoadConditioningInterval() != PoolFactory.DEFAULT_LOAD_CONDITIONING_INTERVAL)     atts.addAttribute("","",LOAD_CONDITIONING_INTERVAL,"",String.valueOf(cp.getLoadConditioningInterval()));    if (generateDefaults() || cp.getMinConnections() != PoolFactory.DEFAULT_MIN_CONNECTIONS)     atts.addAttribute("","",MIN_CONNECTIONS,"",String.valueOf(cp.getMinConnections()));    if (generateDefaults() || cp.getMaxConnections() != PoolFactory.DEFAULT_MAX_CONNECTIONS)     atts.addAttribute("","",MAX_CONNECTIONS,"",String.valueOf(cp.getMaxConnections()));    if (generateDefaults() || cp.getRetryAttempts() != PoolFactory.DEFAULT_RETRY_ATTEMPTS)     atts.addAttribute("","",RETRY_ATTEMPTS,"",String.valueOf(cp.getRetryAttempts()));    if (generateDefaults() || cp.getIdleTimeout() != PoolFactory.DEFAULT_IDLE_TIMEOUT)     atts.addAttribute("","",IDLE_TIMEOUT,"",String.valueOf(cp.getIdleTimeout()));    if (generateDefaults() || cp.getPingInterval() != PoolFactory.DEFAULT_PING_INTERVAL)     atts.addAttribute("","",PING_INTERVAL,"",String.valueOf(cp.getPingInterval()));    if (generateDefaults() || cp.getStatisticInterval() != PoolFactory.DEFAULT_STATISTIC_INTERVAL)     atts.addAttribute("","",STATISTIC_INTERVAL,"",String.valueOf(cp.getStatisticInterval()));    if (generateDefaults() || cp.getSubscriptionAckInterval() != PoolFactory.DEFAULT_SUBSCRIPTION_ACK_INTERVAL)     atts.addAttribute("","",SUBSCRIPTION_ACK_INTERVAL,"",String.valueOf(cp.getSubscriptionAckInterval()));    if (generateDefaults() || cp.getSubscriptionEnabled() != PoolFactory.DEFAULT_SUBSCRIPTION_ENABLED)     atts.addAttribute("","",SUBSCRIPTION_ENABLED,"",String.valueOf(cp.getSubscriptionEnabled()));    if (generateDefaults() || cp.getSubscriptionMessageTrackingTimeout() != PoolFactory.DEFAULT_SUBSCRIPTION_MESSAGE_TRACKING_TIMEOUT)     atts.addAttribute("","",SUBSCRIPTION_MESSAGE_TRACKING_TIMEOUT,"",String.valueOf(cp.getSubscriptionMessageTrackingTimeout()));    if (generateDefaults() || cp.getSubscriptionRedundancy() != PoolFactory.DEFAULT_SUBSCRIPTION_REDUNDANCY)     atts.addAttribute("","",SUBSCRIPTION_REDUNDANCY,"",String.valueOf(cp.getSubscriptionRedundancy()));    if (generateDefaults() || cp.getReadTimeout() != PoolFactory.DEFAULT_READ_TIMEOUT)     atts.addAttribute("","",READ_TIMEOUT,"",String.valueOf(cp.getReadTimeout()));    if (cp.getServerGroup() != null && !cp.getServerGroup().equals("")) {      atts.addAttribute("","",SERVER_GROUP,"",cp.getServerGroup());    }    if (generateDefaults() || cp.getSocketBufferSize() != PoolFactory.DEFAULT_SOCKET_BUFFER_SIZE)     atts.addAttribute("","",SOCKET_BUFFER_SIZE,"",String.valueOf(cp.getSocketBufferSize()));    if (generateDefaults() || cp.getThreadLocalConnections() != PoolFactory.DEFAULT_THREAD_LOCAL_CONNECTIONS)     atts.addAttribute("","",THREAD_LOCAL_CONNECTIONS,"",String.valueOf(cp.getThreadLocalConnections()));    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_1) > 0) {      if (generateDefaults() || cp.getPRSingleHopEnabled() != PoolFactory.DEFAULT_PR_SINGLE_HOP_ENABLED)       atts.addAttribute("","",PR_SINGLE_HOP_ENABLED,"",String.valueOf(cp.getPRSingleHopEnabled()));    }    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_1) > 0) {      if (generateDefaults() || cp.getMultiuserAuthentication() != PoolFactory.DEFAULT_MULTIUSER_AUTHENTICATION)       atts.addAttribute("","",MULTIUSER_SECURE_MODE_ENABLED,"",String.valueOf(cp.getMultiuserAuthentication()));    }  }  finally {    handler.startElement("",CONNECTION_POOL,CONNECTION_POOL,atts);{      Iterator locators=cp.getLocators().iterator();      while (locators.hasNext()) {        InetSocketAddress addr=(InetSocketAddress)locators.next();        AttributesImpl sAtts=new AttributesImpl();        sAtts.addAttribute("","",HOST,"",addr.getHostName());        sAtts.addAttribute("","",PORT,"",String.valueOf(addr.getPort()));        handler.startElement("",LOCATOR,LOCATOR,sAtts);        handler.endElement("",LOCATOR,LOCATOR);      }    }{      Iterator servers=cp.getServers().iterator();      while (servers.hasNext()) {        InetSocketAddress addr=(InetSocketAddress)servers.next();        AttributesImpl sAtts=new AttributesImpl();        sAtts.addAttribute("","",HOST,"",addr.getHostName());        sAtts.addAttribute("","",PORT,"",String.valueOf(addr.getPort()));        handler.startElement("",SERVER,SERVER,sAtts);        handler.endElement("",SERVER,SERVER);      }    }    handler.endElement("","",CONNECTION_POOL);  }}  }
class C{  public final AssertSubscriber<T> configureValuesTimeout(Duration timeout){  this.valuesTimeout=timeout;  return this;}  }
class C{  @Override public int hashCode(){  return mean.hashCode() + variance.hashCode();}  }
class C{  public SobolAnalysis(){  super();}  }
class C{  public CompositeChange(String name,Change[] children){  this(name,new ArrayList(children.length));  addAll(children);}  }
class C{  public List discover(String url,int maxRedirects,HttpFetcher httpFetcher) throws DiscoveryException {  return discover(url,maxRedirects,httpFetcher,DiscoveryInformation.OPENID_OP_TYPES).getDiscoveredInformation(DiscoveryInformation.OPENID_OP_TYPES);}  }
class C{  public void removeListener(final ITrackingResultsListener listener){  m_listeners.removeListener(listener);}  }
class C{  public static final Instances stratify(Instances data,int folds,Random rand){  if (!data.classAttribute().isNominal()) {    return data;  }  Instances result=new Instances(data,0);  Instances[] bagsByClasses=new Instances[data.numClasses()];  for (int i=0; i < bagsByClasses.length; i++) {    bagsByClasses[i]=new Instances(data,0);  }  for (int j=0; j < data.numInstances(); j++) {    Instance datum=data.instance(j);    bagsByClasses[(int)datum.classValue()].add(datum);  }  for (  Instances bagsByClasse : bagsByClasses) {    bagsByClasse.randomize(rand);  }  for (int k=0; k < folds; k++) {    int offset=k, bag=0;    oneFold:     while (true) {      while (offset >= bagsByClasses[bag].numInstances()) {        offset-=bagsByClasses[bag].numInstances();        if (++bag >= bagsByClasses.length) {          break oneFold;        }      }      result.add(bagsByClasses[bag].instance(offset));      offset+=folds;    }  }  return result;}  }
class C{  public static String readFile(String file,boolean asRoot){  if (asRoot)   return new RootFile(file).readFile();  StringBuilder s=null;  FileReader fileReader=null;  BufferedReader buf=null;  try {    fileReader=new FileReader(file);    buf=new BufferedReader(fileReader);    String line;    s=new StringBuilder();    while ((line=buf.readLine()) != null)     s.append(line).append("\n");  } catch (  FileNotFoundException ignored) {    Log.e(TAG,"File does not exist " + file);  }catch (  IOException e) {    Log.e(TAG,"Failed to read " + file);  } finally {    try {      if (fileReader != null)       fileReader.close();      if (buf != null)       buf.close();    } catch (    IOException e) {      e.printStackTrace();    }  }  return s == null ? null : s.toString().trim();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_MEMBER_DECLARATION;}  }
class C{  @Override public NormalCard toolbarColor(@ColorRes int toolbarColor){  if (toolbarColor == 0) {    Log.e("ToolbarColor","Impossible to set Toolbar Color to 0, default value transparent is set! Please Check it");    mToolbarColor=android.R.color.transparent;  } else {    mToolbarColor=toolbarColor;  }  return this;}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:52.093 -0500",hash_original_method="F52296A1A788DF4272F6650232B88A31",hash_generated_method="60B1C824D4E6E3CA5E531FDBE67AE447") public static AccessibilityRecord obtain(){synchronized (sPoolLock) {    if (sPool != null) {      AccessibilityRecord record=sPool;      sPool=sPool.mNext;      sPoolSize--;      record.mNext=null;      record.mIsInPool=false;      return record;    }    return new AccessibilityRecord();  }}  }
class C{  private static void writeSet1(final BTree btree){  log.info("");  for (int i=0; i < 1000; i++) {    btree.insert(i,i);  }}  }
class C{  static String changeWStoRFC(String string){  StringBuilder sb=new StringBuilder();  int i=0;  int k;  for (int j=0; (k=string.indexOf("\\20",j)) >= 0; j=k + 3) {    sb.append(trim(string.substring(i,k)) + "\\ ");    i=k + 3;  }  sb.append(string.substring(i));  return sb.toString();}  }
class C{  private void scanFractionAndSuffix(int pos){  radix=10;  scanFraction(pos);  if (reader.ch == 'f' || reader.ch == 'F') {    reader.putChar(true);    tk=TokenKind.FLOATLITERAL;  } else {    if (reader.ch == 'd' || reader.ch == 'D') {      reader.putChar(true);    }    tk=TokenKind.DOUBLELITERAL;  }}  }
class C{  public void store(Element cat,List<String> trees){  CatalogTreeManager manager=InstanceManager.getDefault(jmri.CatalogTreeManager.class);  cat.setAttribute("class","jmri.jmrit.catalog.DefaultCatalogTreeManagerConfigXML");  Iterator<String> iter=trees.iterator();  while (iter.hasNext()) {    String sname=iter.next();    if (sname == null) {      log.error("System name null during store");      continue;    }    if (log.isDebugEnabled()) {      log.debug("system name is " + sname);    }    if (sname.charAt(1) != CatalogTree.XML) {      continue;    }    CatalogTree ct=manager.getBySystemName(sname);    Element elem=new Element("catalogTree");    elem.setAttribute("systemName",sname);    String uname=ct.getUserName();    if (uname != null) {      elem.setAttribute("userName",uname);    }    storeNode(elem,ct.getRoot());    if (log.isDebugEnabled()) {      log.debug("store CatalogTree " + sname);    }    cat.addContent(elem);  }}  }
class C{  public S addChild(S node){  children.add(node);  node.parent=Optional.of(this);  return node;}  }
class C{  public Boolean isAborted(){  return aborted;}  }
class C{  public CrowdedPenaltyEvent(double time,Id personId,Id vehicleId,double penalty,double externality){  super(time);  this.time=time;  this.personId=personId;  this.vehicleId=vehicleId;  this.penalty=penalty;  this.externality=externality;}  }
class C{  public void startViewTarget() throws ParseException {}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public boolean isFromDHCP(){  return fromDHCP;}  }
class C{  public static void addCol(Matrix A,int j,int start,int to,double c){  for (int i=start; i < to; i++)   A.increment(i,j,c);}  }
class C{  public double nextDouble(){  return nextDouble(this.tau);}  }
class C{  public static boolean looksLikeNumber(String form){  boolean containsDigit=false;  for (int i=0; i < form.length(); ++i) {    if (Character.isDigit(form.charAt(i)))     containsDigit=true; else     if (".,-".indexOf(form.charAt(i)) == -1)     return false;  }  return containsDigit;}  }
class C{  public void connect(TransactionOutput out){  outpoint.fromTx=out.getParentTransaction();  out.markAsSpent(this);  value=out.getValue();}  }
class C{  private BufferedImage loadStoredImage(String current_image,final String ending){  current_image=removeIllegalFileNameCharacters(current_image);  final String file_name=temp_dir + key + current_image+ ending;  if (ending.equals(".jpl")) {    FileInputStream fis=null;    try {      File file=new File(file_name);      byte[] data=new byte[(int)file.length()];      fis=new FileInputStream(file_name);      fis.read(data);      if (encHash != null) {        CryptoAES aes=new CryptoAES();        data=aes.decrypt(encHash,data);      }      BufferedImage img=TempStoreImage.getImage(data);      return img;    } catch (    Exception ex) {      Logger.getLogger(ObjectStore.class.getName()).log(Level.SEVERE,null,ex);    } finally {      try {        fis.close();      } catch (      IOException ex) {        Logger.getLogger(ObjectStore.class.getName()).log(Level.SEVERE,null,ex);      }    }    return null;  }  return DefaultImageHelper.read(file_name);}  }
class C{  public void updateActiveWindows(){  LOG.debug("Updating active windows");  List<ExecutionWindow> allWindows=getAllExecutionWindows();  Map<URI,ExecutionWindow> currentWindows=getCurrentActiveWindows();  Calendar currentTime=Calendar.getInstance();  for (  ExecutionWindow window : allWindows) {    boolean active=isActive(window,currentTime);    if (active) {      activateWindow(window);    } else {      deactivateWindow(window);    }    currentWindows.remove(window.getId());  }  for (  ExecutionWindow window : currentWindows.values()) {    deactivateWindow(window);  }}  }
class C{  public GeneralException(){  super();}  }
class C{  public void testFiveNodeCloseEvent() throws Throwable {  testSessionClose(5);}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length == 1 && args[0].equals("-help")) {    usage();    return;  }  SimpleDateFormat formatter=new SimpleDateFormat("yyyy-MMM-dd hh:mm aaa");  System.err.printf("Extraction started at %s on %s.%n",formatter.format(new Date()),InetAddress.getLocalHost().getHostName());  Properties prop=StringUtils.argsToProperties(args);  System.err.println("Properties: " + prop.toString());  AbstractPhraseExtractor.setPhraseExtractionProperties(prop);  try {    PhraseExtract e=new PhraseExtract(prop);    e.extractAll();  } catch (  Exception e) {    e.printStackTrace();  }  System.err.println("Extraction ended at " + formatter.format(new Date()));}  }
class C{  public static int findBeforeNewLineChar(CharSequence s,int start){  for (int i=start - 1; i > 0; i--) {    if (s.charAt(i) == '\n') {      return i;    }  }  return -1;}  }
class C{  public RenameVirtualMethodProcessor(IMethod method,JavaRefactoringArguments arguments,RefactoringStatus status){  this(method);  RefactoringStatus initializeStatus=initialize(arguments);  status.merge(initializeStatus);  fOriginalMethod=getMethod();}  }
class C{  private void handleUnsupportedTriggerProcessType(TriggerProcess process){  logger.logError(LogMessageIdentifier.ERROR_TRIGGER_TYPE_NOT_SUPPORTED,String.valueOf(process.getTriggerDefinition().getType()),Long.toString(process.getKey()));  process.setState(TriggerProcessStatus.ERROR);}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.VERSION_CONSTRAINT;}  }
class C{  public static void removeBreakpointIndex(int location,BPINSTRUCTION_STATUS status){  int lineNumber=getBreakpointLineNumber(location);  if (lineNumber != -1)   breakpoints.get(lineNumber).setBPInstructionStatus(status);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (curNumberOfParameters == 2) {    int masky=getMediaMask(stack);    return Wizard.getInstance().searchByExactTitle(getString(stack),masky);  } else   return Wizard.getInstance().searchByExactTitle(getString(stack),DBObject.MEDIA_MASK_ALL);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  Document doc=getDocument();  Element map=getElement();  int lineIndex=map.getElementIndex(pos);  if (lineIndex < 0) {    return lineToRect(a,0);  }  Rectangle lineArea=lineToRect(a,lineIndex);  tabBase=lineArea.x;  Element line=map.getElement(lineIndex);  int p0=line.getStartOffset();  Segment s=SegmentCache.getSharedSegment();  doc.getText(p0,pos - p0,s);  int xOffs=Utilities.getTabbedTextWidth(s,metrics,tabBase,this,p0);  SegmentCache.releaseSharedSegment(s);  lineArea.x+=xOffs;  lineArea.width=1;  lineArea.height=metrics.getHeight();  return lineArea;}  }
class C{  static private void validate(int AD_Table_ID,String TableName){  for (int i=0; i < s_cascades.length; i++) {    StringBuffer sql=new StringBuffer("DELETE FROM ").append(s_cascadeNames[i]).append(" WHERE AD_Table_ID=").append(AD_Table_ID).append(" AND Record_ID NOT IN (SELECT ").append(TableName).append("_ID FROM ").append(TableName).append(")");    int no=DB.executeUpdate(sql.toString(),null);    if (no > 0)     log.config(s_cascadeNames[i] + " (" + AD_Table_ID+ "/"+ TableName+ ") Invalid #"+ no);  }}  }
class C{  public boolean forEachKey(TObjectProcedure<K> procedure){  return forEach(procedure);}  }
class C{  protected void calibrateAt(int index){  if (_calibrateIndex == index) {    _mainPanel.remove(3);    _mainPanel.remove(1);    _entryTime=_calibBlockOrder.getBlock()._entryTime;    _mainPanel.add(makeEntryPanel(_calibBlockOrder.getBlock().getDisplayName(),_warrant.getThrottle().getIsForward()),1);    setVisible(true);  } else   if (_calibrateIndex == index - 1) {    setVisible(false);    BlockOrder bo=_warrant.getBlockOrderAt(index);    long eTime=bo.getBlock()._entryTime - _entryTime;    _rawSpeed=_calibBlockOrder.getPath().getLengthMm() / eTime;    _mainPanel.add(makeExitPanel(false),3);    setVisible(true);  }}  }
class C{  public static <T>Range<T> atLeast(T v){  return range(v,BoundType.CLOSED,null,null);}  }
class C{  public static void closeTag(boolean close){  closeTag(close,true);}  }
class C{  public String transferEncoding(){  return this.transferEncoding;}  }
class C{  void hoverAggregate(VisualItem item,boolean b){  if (!PARAM.AGGR.equals(item.getGroup())) {    VisualNode node=map(item);    if (node != null && (node.isNetwork() || node.isHost())) {      aggregateTable.getItem(node.getVisualAgg(getId())).setHover(b);    }  }}  }
class C{  public void disableDashedLine(){  mDashPathEffect=null;}  }
class C{  public ChartComponent(AbstractChart chart){  this.chart=chart;}  }
class C{  final void reenableEvents(){synchronized (this.internalASTLock) {    this.disableEvents--;  }}  }
class C{  @Override protected void removeRange(int start,int end){  if (start < 0) {    throw new IndexOutOfBoundsException("" + start);  } else   if (end > size) {    throw new IndexOutOfBoundsException("" + end + " out of: "+ size);  } else   if (start > end) {    throw new IndexOutOfBoundsException("" + start + " out of: "+ end);  }  if (start == end) {    return;  }  if (end == size) {    Arrays.fill(array,firstIndex + start,firstIndex + size,null);  } else   if (start == 0) {    Arrays.fill(array,firstIndex,firstIndex + end,null);    firstIndex+=end;  } else {    System.arraycopy(array,firstIndex + end,array,firstIndex + start,size - end);    int lastIndex=firstIndex + size;    int newLast=lastIndex + start - end;    Arrays.fill(array,newLast,lastIndex,null);  }  size-=end - start;  modCount++;}  }
class C{  private void returnHtml404(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.response.setStatus(HttpServletResponse.SC_NOT_FOUND);  final String title="Error 404";  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId("404");  pageWrapper.addHeader();  requestAndResponse.print(servletText.errorPageNotFound());  pageWrapper.addFooter();}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private Document createDocument(String path,String user,String pass){  assert path != null;  path=path.trim();  String lowerPath=path.toLowerCase();  if (lowerPath.startsWith("http://") || lowerPath.startsWith("https://")) {    try {      if (user == null && pass == null) {        WebDavServerDescriptor server=myWebDavStorage.findServer(path);        if (server != null) {          user=server.getUsername();          pass=server.getPassword();        }      }      return new HttpDocument(path,user,pass,myWebDavStorage.getProxyOption());    } catch (    IOException e) {      GPLogger.log(e);      return null;    }catch (    WebDavException e) {      GPLogger.log(e);      return null;    }  } else   if (lowerPath.startsWith("ftp:")) {    return new FtpDocument(path,myFtpUserOption,myFtpPasswordOption);  } else   if (!lowerPath.startsWith("file://") && path.contains("://")) {    throw new RuntimeException("Unknown protocol: " + path.substring(0,path.indexOf("://")));  }  return new FileDocument(new File(path));}  }
class C{  public static float[] newCenteredCubeBounds(float w,float d,float h){  return centeredCubeBounds(newBoundsArray(),w,d,h);}  }
class C{  public void createPictScenario05() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-01-28 10:00:00"));  String supplierAdminId="Pict05Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict05SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),2);  String customerAdminId="Pict05DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict05DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-02-01 00:00:00"),DateTimeHandling.calculateMillis("2013-02-16 23:59:59"));  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalServiceAsync);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT_TEST_05",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT05_UNIT_WEEK,technicalServiceAsync,supplierMarketplace);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_05",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-01-30 10:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 00:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 02:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 03:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 04:00:00"));  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 05:00:00"));  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOServiceDetails proRataService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT05_RATA_WEEK_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT05_RATA_WEEK,technicalServiceAsync,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceDetails,proRataService);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 09:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,proRataService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 10:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 10:05:00"));  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetailsOld=upgradedSubDetails;  upgradedSubDetails.setSubscriptionId("PICT_TEST_05" + "_SubID2");  upgradedSubDetails=subscrSetup.modifySubscription(upgradedSubDetails,null);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 10:10:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetailsOld);  VOServiceDetails proRataService2=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT05_RATA_WEEK2_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT05_RATA_WEEK2,technicalServiceAsync,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),proRataService,proRataService2);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-02 00:00:00"));  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(upgradedSubDetails,proRataService2);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-03 00:00:00"));  upgradedSubDetails2=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails2);  upgradedSubDetails2=subscrSetup.modifyParameterForSubscription(upgradedSubDetails2,DateTimeHandling.calculateMillis("2013-02-03 01:00:00"),"HAS_OPTIONS","1");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-03 02:00:00"));  upgradedSubDetails2=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails2);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-03 05:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModelPeriodFee(upgradedSubDetails2.getPriceModel(),new BigDecimal("1000.00"));  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),upgradedSubDetails2,newSubPriceModel,customer);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-02-03 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(upgradedSubDetails2.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_05",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_05",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_05",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_05",customer);}  }
class C{  public static LeftRegularBipartiteGraphSegment buildSmallTestBipartiteGraphSegment(){  LeftRegularBipartiteGraphSegment leftRegularBipartiteGraphSegment=new LeftRegularBipartiteGraphSegment(3,10,10,3,2.0,Integer.MAX_VALUE,new IdentityEdgeTypeMask(),new NullStatsReceiver());  leftRegularBipartiteGraphSegment.addEdge(1,2,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(1,3,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(1,4,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(1,5,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(2,5,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(2,6,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(2,10,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(3,7,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(3,8,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(3,5,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(3,9,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(3,2,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(3,10,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(3,11,(byte)0);  leftRegularBipartiteGraphSegment.addEdge(3,1,(byte)0);  return leftRegularBipartiteGraphSegment;}  }
class C{  public void deregister(Automation automation){  if (automation == null) {    return;  }  automation.dispose();  Integer oldSize=Integer.valueOf(_automationHashTable.size());  _automationHashTable.remove(automation.getId());  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_automationHashTable.size()));}  }
class C{  @Override public final T previous(){  if (_nextIndex == 0) {    throw new NoSuchElementException();  }  if (_nextIndex == _size) {    _lastReturned=_next=_tail;  } else {    _lastReturned=_next=(T)_next.getPrevious();  }  _nextIndex--;  return _lastReturned;}  }
class C{  public void updateActions(){  String text;  Action a=RTextArea.getAction(RTextArea.UNDO_ACTION);  if (canUndo()) {    a.setEnabled(true);    text=getUndoPresentationName();    a.putValue(Action.NAME,text);    a.putValue(Action.SHORT_DESCRIPTION,text);  } else {    if (a.isEnabled()) {      a.setEnabled(false);      text=cantUndoText;      a.putValue(Action.NAME,text);      a.putValue(Action.SHORT_DESCRIPTION,text);    }  }  a=RTextArea.getAction(RTextArea.REDO_ACTION);  if (canRedo()) {    a.setEnabled(true);    text=getRedoPresentationName();    a.putValue(Action.NAME,text);    a.putValue(Action.SHORT_DESCRIPTION,text);  } else {    if (a.isEnabled()) {      a.setEnabled(false);      text=cantRedoText;      a.putValue(Action.NAME,text);      a.putValue(Action.SHORT_DESCRIPTION,text);    }  }}  }
class C{  public void reconnect() throws QueryException {  boolean inTransaction=currentProtocol != null && currentProtocol.inTransaction();  reconnectFailedConnection(new SearchFilter(true,false));  handleFailLoop();  if (inTransaction) {    throw new ReconnectDuringTransactionException("Connection reconnect automatically during an active transaction",1401,"25S03");  }}  }
class C{  private void initSwipeViews(){}  }
class C{  public void removeIndex(Integer idx){  this.occurrences.remove(idx);}  }
class C{  public static void picture(double x,double y,String filename,double scaledWidth,double scaledHeight,double degrees){  if (scaledWidth < 0)   throw new IllegalArgumentException("width is negative: " + scaledWidth);  if (scaledHeight < 0)   throw new IllegalArgumentException("height is negative: " + scaledHeight);  Image image=getImage(filename);  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(scaledWidth);  double hs=factorY(scaledHeight);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + filename + " is corrupt");  if (ws <= 1 && hs <= 1)   pixel(x,y);  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),(int)Math.round(ws),(int)Math.round(hs),null);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);  draw();}  }
class C{  public void dragGestureRecognized(DragGestureEvent e){  if (log.isDebugEnabled()) {    log.debug("DragPositionable.dragGestureRecognized ");  }  e.startDrag(DragSource.DefaultCopyDrop,this,this);}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  public void removeSpiderListener(SpiderListener listener){  this.listeners.remove(listener);}  }
class C{  public void emailAlert(AlertEntry alert){  try {    if (!this.instanceStatesManager.getStates(this.dbInfoManager.findDB(alert.getDbGroup(),alert.getDbHost()).getDbid()).canSendEmailNotification(alert.getTs(),alert.getAlertReason(),this.myperfConfig.getEmailAlertIntervalMinutes()))     return;  } catch (  Exception ex) {  }  String receiver=this.alertSettings.getNotificationEmails(alert.getDbGroup(),alert.getDbHost());  if (receiver != null && !receiver.isEmpty()) {    String subject=this.getAlertEmailSubject(alert);    String msg=this.getAlertMessage(alert);    this.hipchat.sendMessage(msg);    MailUtil.sendMail(receiver,subject,msg);  }}  }
class C{  public final void warn(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {    log(SimpleLog.LOG_LEVEL_WARN,message,null);  }}  }
class C{  public Node namedNode(String name){  if (namedNodes != null) {    NamedNode value=namedNodes.get(name);    if (value != null) {      return value.value;    }  }  throw new GraalError("missing node %s",name);}  }
class C{  public void finish() throws Exception {}  }
class C{  protected final void instrumentPath(Log log,List<String> classpath,File path) throws MojoExecutionException {  try {    Instrumenter instrumenter=getInstrumenter(log,classpath);    InstrumentationSettings settings=new InstrumentationSettings(markerType,debugMode);    for (    File classFile : FileUtils.listFiles(path,new String[]{"class"},true)) {      log.info("Instrumenting " + classFile);      byte[] input=FileUtils.readFileToByteArray(classFile);      byte[] output=instrumenter.instrument(input,settings);      log.debug("File size changed from " + input.length + " to "+ output.length);      FileUtils.writeByteArrayToFile(classFile,output);    }  } catch (  Exception ex) {    throw new MojoExecutionException("Unable to get compile classpath elements",ex);  }}  }
class C{  public int numAttributes(){  return m_Attributes.size();}  }
class C{  @Override public Observable<Void> postApps(HttpServerRequest<ByteBuf> request,HttpServerResponse<ByteBuf> response){  return triathlonService.parseJson(request.getContent()).flatMap(null).flatMap(null).onErrorResumeNext(null).doOnCompleted(null);}  }
class C{  public boolean delete(){  data=null;  al.alDeleteBuffers(1,new int[]{id},0);  return al.alGetError() == AL.AL_NO_ERROR;}  }
class C{  public String dumpStops(TIntIntMap stops){  if (DUMP_STOPS) {    StringBuilder sb=new StringBuilder();    stops.forEachEntry(null);    return sb.toString();  } else {    return "";  }}  }
class C{  private void processFailedMessage(UUID nodeId,GridCacheMessage msg,IgniteBiInClosure<UUID,GridCacheMessage> c) throws IgniteCheckedException {  GridCacheContext ctx=cctx.cacheContext(msg.cacheId());switch (msg.directType()) {case 14:{      GridCacheEvictionRequest req=(GridCacheEvictionRequest)msg;      GridCacheEvictionResponse res=new GridCacheEvictionResponse(ctx.cacheId(),req.futureId(),req.classError() != null);      sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());    }  break;case 30:{  GridDhtLockRequest req=(GridDhtLockRequest)msg;  GridDhtLockResponse res=new GridDhtLockResponse(ctx.cacheId(),req.version(),req.futureId(),req.miniId(),0,ctx.deploymentEnabled());  sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());}break;case 34:{GridDhtTxPrepareRequest req=(GridDhtTxPrepareRequest)msg;GridDhtTxPrepareResponse res=new GridDhtTxPrepareResponse(req.version(),req.futureId(),req.miniId(),req.deployInfo() != null);res.error(req.classError());sendResponseOnFailedMessage(nodeId,res,cctx,req.policy());}break;case 38:{GridDhtAtomicUpdateRequest req=(GridDhtAtomicUpdateRequest)msg;GridDhtAtomicUpdateResponse res=new GridDhtAtomicUpdateResponse(ctx.cacheId(),req.futureVersion(),ctx.deploymentEnabled());res.onError(req.classError());sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());}break;case 40:{GridNearAtomicUpdateRequest req=(GridNearAtomicUpdateRequest)msg;GridNearAtomicUpdateResponse res=new GridNearAtomicUpdateResponse(ctx.cacheId(),nodeId,req.futureVersion(),ctx.deploymentEnabled());res.error(req.classError());sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());}break;case 42:{GridDhtForceKeysRequest req=(GridDhtForceKeysRequest)msg;GridDhtForceKeysResponse res=new GridDhtForceKeysResponse(ctx.cacheId(),req.futureId(),req.miniId(),ctx.deploymentEnabled());res.error(req.classError());sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());}break;case 45:{processMessage(nodeId,msg,c);}break;case 49:{GridNearGetRequest req=(GridNearGetRequest)msg;GridNearGetResponse res=new GridNearGetResponse(ctx.cacheId(),req.futureId(),req.miniId(),req.version(),req.deployInfo() != null);res.error(req.classError());sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());}break;case 50:{GridNearGetResponse res=(GridNearGetResponse)msg;CacheGetFuture fut=(CacheGetFuture)ctx.mvcc().future(res.futureId());if (fut == null) {if (log.isDebugEnabled()) log.debug("Failed to find future for get response [sender=" + nodeId + ", res="+ res+ ']');return;}res.error(res.classError());fut.onResult(nodeId,res);}break;case 51:{GridNearLockRequest req=(GridNearLockRequest)msg;GridNearLockResponse res=new GridNearLockResponse(ctx.cacheId(),req.version(),req.futureId(),req.miniId(),false,0,req.classError(),null,ctx.deploymentEnabled());sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());}break;case 55:{GridNearTxPrepareRequest req=(GridNearTxPrepareRequest)msg;GridNearTxPrepareResponse res=new GridNearTxPrepareResponse(req.version(),req.futureId(),req.miniId(),req.version(),req.version(),null,null,null,req.deployInfo() != null);res.error(req.classError());sendResponseOnFailedMessage(nodeId,res,cctx,req.policy());}break;case 58:{GridCacheQueryRequest req=(GridCacheQueryRequest)msg;GridCacheQueryResponse res=new GridCacheQueryResponse(req.cacheId(),req.id(),req.classError(),cctx.deploymentEnabled());cctx.io().sendOrderedMessage(ctx.node(nodeId),TOPIC_CACHE.topic(QUERY_TOPIC_PREFIX,nodeId,req.id()),res,ctx.ioPolicy(),Long.MAX_VALUE);}break;case 114:{processMessage(nodeId,msg,c);}break;case 116:{GridNearSingleGetRequest req=(GridNearSingleGetRequest)msg;GridNearSingleGetResponse res=new GridNearSingleGetResponse(ctx.cacheId(),req.futureId(),req.topologyVersion(),null,false,req.deployInfo() != null);res.error(req.classError());sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());}break;case 117:{GridNearSingleGetResponse res=(GridNearSingleGetResponse)msg;GridPartitionedSingleGetFuture fut=(GridPartitionedSingleGetFuture)ctx.mvcc().future(new IgniteUuid(IgniteUuid.VM_ID,res.futureId()));if (fut == null) {if (log.isDebugEnabled()) log.debug("Failed to find future for get response [sender=" + nodeId + ", res="+ res+ ']');return;}res.error(res.classError());fut.onResult(nodeId,res);}break;default :throw new IgniteCheckedException("Failed to send response to node. Unsupported direct type [message=" + msg + "]",msg.classError());}}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (strictnessLevel_1: ");  result.append(strictnessLevel_1);  result.append(", message_1: ");  result.append(message_1);  result.append(", messageNumber_1: ");  result.append(messageNumber_1);  result.append(')');  return result.toString();}  }
class C{  public static long copy(final InputStream in,final OutputStream out) throws IOException {  Objects.requireNonNull(in);  Objects.requireNonNull(out);  final byte[] buffer=new byte[COPY_BUFFER_SIZE];  long result=0;  int rc;  while ((rc=in.read(buffer)) >= 0) {    result+=rc;    out.write(buffer,0,rc);  }  return result;}  }
class C{  public static double millisToPoints(double mm){  return mm / INCH_MM * POINT_POSTSCRIPT;}  }
class C{  static void blockyTandemMergeSort(final double[] keyArr,final long[] valArr,final int arrLen,final int blkSize){  assert blkSize >= 1;  if (arrLen <= blkSize)   return;  int numblks=arrLen / blkSize;  if (numblks * blkSize < arrLen)   numblks+=1;  assert (numblks * blkSize >= arrLen);  final double[] keyTmp=Arrays.copyOf(keyArr,arrLen);  final long[] valTmp=Arrays.copyOf(valArr,arrLen);  blockyTandemMergeSortRecursion(keyTmp,valTmp,keyArr,valArr,0,numblks,blkSize,arrLen);}  }
class C{  public DrawerBuilder withFooterDivider(boolean footerDivider){  this.mFooterDivider=footerDivider;  return this;}  }
class C{  public void addChild(NodeCollection childCollection,CommonNodeMaintainer nodeMaintainer){  if (children.isEmpty()) {    children.add(childCollection);    haltStepNode.setToNode(childCollection.getInitStepNode());  } else {    children.add(childCollection);    if (forkNode == null) {      forkNode=ForkNode.getForkNode(id,children,nodeMaintainer);      for (      NodeCollection child : children) {        forkNode.addToNode(child.getInitStepNode());      }    } else {      forkNode.addToNode(childCollection.getInitStepNode());    }    haltStepNode.setToNode(forkNode);  }}  }
class C{  public boolean equalsIgnoreCase(IndexColumn other){  return new EqualsBuilder().append(name.toUpperCase(),other.name.toUpperCase()).append(size,other.size).isEquals();}  }
class C{  protected <T extends BlockObject>void addConsistencyGroupTasks(List<T> objects,TaskList taskList,String taskId,ResourceOperationTypeEnum operationTypeEnum){  Set<URI> consistencyGroups=new HashSet<>();  for (  T object : objects) {    if (!isNullURI(object.getConsistencyGroup())) {      consistencyGroups.add(object.getConsistencyGroup());    }  }  if (consistencyGroups.isEmpty()) {    return;  }  List<BlockConsistencyGroup> groups=_dbClient.queryObject(BlockConsistencyGroup.class,consistencyGroups);  for (  BlockConsistencyGroup group : groups) {    Operation op=_dbClient.createTaskOpStatus(BlockConsistencyGroup.class,group.getId(),taskId,operationTypeEnum);    taskList.getTaskList().add(TaskMapper.toTask(group,taskId,op));  }}  }
class C{  private void registerMBeans() throws JMException {  String baseObjectName="org.apache.james:type=component,component=mailetcontainer,name=processor,";  String[] processorNames=mList.getProcessorStates();  for (  String processorName : processorNames) {    registerProcessorMBean(baseObjectName,processorName);  }}  }
class C{  public LogoutCommandImpl(final ShoppingCartCommandRegistry registry){  super(registry);}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.197 -0400",hash_original_method="1F1851D6DD9C95BEB661D5FE0F05F9BE",hash_generated_method="D27548A5E6DAB9D507CC35D929275FB8") private static void deleteDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    return;  }  directory.deleteOnExit();  if (!isSymlink(directory)) {    cleanDirectoryOnExit(directory);  }}  }
class C{  public Day(SerialDate serialDate){  ParamChecks.nullNotPermitted(serialDate,"serialDate");  this.serialDate=serialDate;  peg(Calendar.getInstance());}  }
class C{  public List<GenericValue> makeAllOrderItemSurveyResponses(){  List<GenericValue> allInfos=new LinkedList<GenericValue>();  for (  ShoppingCartItem item : this) {    List<String> responses=UtilGenerics.checkList(item.getAttribute("surveyResponses"));    GenericValue response=null;    if (responses != null) {      for (      String responseId : responses) {        try {          response=this.getDelegator().findOne("SurveyResponse",UtilMisc.toMap("surveyResponseId",responseId),false);        } catch (        GenericEntityException e) {          Debug.logError(e,"Unable to obtain SurveyResponse record for ID : " + responseId,module);        }      }    } else {      String surveyResponseId=(String)item.getAttribute("surveyResponseId");      try {        response=this.getDelegator().findOne("SurveyResponse",UtilMisc.toMap("surveyResponseId",surveyResponseId),false);      } catch (      GenericEntityException e) {        Debug.logError(e,"Unable to obtain SurveyResponse record for ID : " + surveyResponseId,module);      }    }    if (response != null) {      response.set("orderItemSeqId",item.getOrderItemSeqId());      allInfos.add(response);    }  }  return allInfos;}  }
class C{  public void complete(Void result){  future.complete(result);}  }
class C{  public byte[] extractMark(File stegoFile,File origSigFile) throws OpenStegoException {  if (!this.plugin.getPurposes().contains(OpenStegoPlugin.Purpose.WATERMARKING)) {    throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.PLUGIN_DOES_NOT_SUPPORT_WM);  }  return extractMark(CommonUtil.getFileBytes(stegoFile),stegoFile.getName(),CommonUtil.getFileBytes(origSigFile));}  }
class C{  private String constructTilesetName(String name){  Matcher matcher=namePattern.matcher(name);  if (matcher.find()) {    name=matcher.group(1);  }  return name;}  }
class C{  protected void doPrintFooter(){  append("</" + TAG_PREDICTIONS + ">\n");}  }
class C{  private void initialize(String aggregationString){  String[] fieldArray=aggregationString.split(DELIMETER_SEPERATOR);  Set<String> fieldSet=Sets.newHashSet();  for (  String field : fieldArray) {    String[] fieldAndValue=field.split(DELIMETER_EQUALS);    String fieldName=fieldAndValue[0];    if (fieldName.equals(DIMENSION_TIME_BUCKET)) {      throw new IllegalArgumentException(DIMENSION_TIME_BUCKET + " is an invalid time.");    }    if (!fieldName.equals(DIMENSION_TIME)) {      fieldSet.add(fieldName);    }    if (fieldName.equals(DIMENSION_TIME)) {      if (timeBucket != null) {        throw new IllegalArgumentException("Cannot specify time in a dimensions " + "descriptor when a timebucket is also " + "specified.");      }      if (fieldAndValue.length == 2) {        timeBucket=TimeBucket.TIME_UNIT_TO_TIME_BUCKET.get(TimeUnit.valueOf(fieldAndValue[1]));      }    }  }  fields=new Fields(fieldSet);}  }
class C{  @Override public void validate(final StatementDescription cd){  final String microSpeciesName=cd.getLitteral(AS);  if (microSpeciesName != null) {    final SpeciesDescription macroSpecies=cd.getSpeciesContext();    final TypeDescription microSpecies=macroSpecies.getMicroSpecies(microSpeciesName);    if (microSpecies == null) {      cd.error(macroSpecies.getName() + " species doesn't contain " + microSpeciesName+ " as micro-species",IGamlIssue.UNKNOWN_SUBSPECIES,AS,microSpeciesName);    }  }}  }
class C{  public static void requestPermission(CordovaPlugin plugin,int requestCode,String permission){  PermissionHelper.requestPermissions(plugin,requestCode,new String[]{permission});}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof PriorityAttribute))   return false;  if (obj == this)   return true;  PriorityAttribute att=(PriorityAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || (priority != att.priority))   return false;  return true;}  }
class C{  public long nextIndex(){  return !isEmpty() ? lastIndex() + 1 : descriptor.index() + skip;}  }
class C{  private static String changeFirstCharacterCase(boolean capitalize,String string){  int strLen=string.length();  if (strLen == 0) {    return string;  }  char ch=string.charAt(0);  char modifiedCh;  if (capitalize) {    modifiedCh=Character.toUpperCase(ch);  } else {    modifiedCh=Character.toLowerCase(ch);  }  if (modifiedCh == ch) {    return string;  }  char chars[]=string.toCharArray();  chars[0]=modifiedCh;  return new String(chars);}  }
class C{  public Component modifyContent(Component comp){  JScrollPane pane=new JScrollPane(comp);  pane.setLayout(new OMScrollPaneLayout());  return pane;}  }
class C{  protected ArrayList<FirewallRule> readRulesFromStorage(){  ArrayList<FirewallRule> l=new ArrayList<FirewallRule>();  try {    Map<String,Object> row;    IResultSet resultSet=storageSource.executeQuery(TABLE_NAME,ColumnNames,null,null);    for (Iterator<IResultSet> it=resultSet.iterator(); it.hasNext(); ) {      row=it.next().getRow();      FirewallRule r=new FirewallRule();      if (!row.containsKey(COLUMN_RULEID) || !row.containsKey(COLUMN_DPID)) {        logger.error("skipping entry with missing required 'ruleid' or 'switchid' entry: {}",row);        return l;      }      try {        r.ruleid=Integer.parseInt((String)row.get(COLUMN_RULEID));        r.dpid=DatapathId.of((String)row.get(COLUMN_DPID));        for (        String key : row.keySet()) {          if (row.get(key) == null) {            continue;          }          if (key.equals(COLUMN_RULEID) || key.equals(COLUMN_DPID) || key.equals("id")) {            continue;          } else           if (key.equals(COLUMN_IN_PORT)) {            r.in_port=OFPort.of(Integer.parseInt((String)row.get(COLUMN_IN_PORT)));          } else           if (key.equals(COLUMN_DL_SRC)) {            r.dl_src=MacAddress.of(Long.parseLong((String)row.get(COLUMN_DL_SRC)));          } else           if (key.equals(COLUMN_DL_DST)) {            r.dl_dst=MacAddress.of(Long.parseLong((String)row.get(COLUMN_DL_DST)));          } else           if (key.equals(COLUMN_DL_TYPE)) {            r.dl_type=EthType.of(Integer.parseInt((String)row.get(COLUMN_DL_TYPE)));          } else           if (key.equals(COLUMN_NW_SRC_PREFIX)) {            r.nw_src_prefix_and_mask=IPv4AddressWithMask.of(IPv4Address.of(Integer.parseInt((String)row.get(COLUMN_NW_SRC_PREFIX))),r.nw_src_prefix_and_mask.getMask());          } else           if (key.equals(COLUMN_NW_SRC_MASKBITS)) {            r.nw_src_prefix_and_mask=IPv4AddressWithMask.of(r.nw_src_prefix_and_mask.getValue(),IPv4Address.of(Integer.parseInt((String)row.get(COLUMN_NW_SRC_MASKBITS))));          } else           if (key.equals(COLUMN_NW_DST_PREFIX)) {            r.nw_dst_prefix_and_mask=IPv4AddressWithMask.of(IPv4Address.of(Integer.parseInt((String)row.get(COLUMN_NW_DST_PREFIX))),r.nw_dst_prefix_and_mask.getMask());          } else           if (key.equals(COLUMN_NW_DST_MASKBITS)) {            r.nw_dst_prefix_and_mask=IPv4AddressWithMask.of(r.nw_dst_prefix_and_mask.getValue(),IPv4Address.of(Integer.parseInt((String)row.get(COLUMN_NW_DST_MASKBITS))));          } else           if (key.equals(COLUMN_NW_PROTO)) {            r.nw_proto=IpProtocol.of(Short.parseShort((String)row.get(COLUMN_NW_PROTO)));          } else           if (key.equals(COLUMN_TP_SRC)) {            r.tp_src=TransportPort.of(Integer.parseInt((String)row.get(COLUMN_TP_SRC)));          } else           if (key.equals(COLUMN_TP_DST)) {            r.tp_dst=TransportPort.of(Integer.parseInt((String)row.get(COLUMN_TP_DST)));          } else           if (key.equals(COLUMN_WILDCARD_DPID)) {            r.any_dpid=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DPID));          } else           if (key.equals(COLUMN_WILDCARD_IN_PORT)) {            r.any_in_port=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_IN_PORT));          } else           if (key.equals(COLUMN_WILDCARD_DL_SRC)) {            r.any_dl_src=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DL_SRC));          } else           if (key.equals(COLUMN_WILDCARD_DL_DST)) {            r.any_dl_dst=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DL_DST));          } else           if (key.equals(COLUMN_WILDCARD_DL_TYPE)) {            r.any_dl_type=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DL_TYPE));          } else           if (key.equals(COLUMN_WILDCARD_NW_SRC)) {            r.any_nw_src=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_NW_SRC));          } else           if (key.equals(COLUMN_WILDCARD_NW_DST)) {            r.any_nw_dst=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_NW_DST));          } else           if (key.equals(COLUMN_WILDCARD_NW_PROTO)) {            r.any_nw_proto=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_NW_PROTO));          } else           if (key.equals(COLUMN_PRIORITY)) {            r.priority=Integer.parseInt((String)row.get(COLUMN_PRIORITY));          } else           if (key.equals(COLUMN_ACTION)) {            int tmp=Integer.parseInt((String)row.get(COLUMN_ACTION));            if (tmp == FirewallRule.FirewallAction.DROP.ordinal()) {              r.action=FirewallRule.FirewallAction.DROP;            } else             if (tmp == FirewallRule.FirewallAction.ALLOW.ordinal()) {              r.action=FirewallRule.FirewallAction.ALLOW;            } else {              r.action=null;              logger.error("action not recognized");            }          }        }      } catch (      ClassCastException e) {        logger.error("skipping rule {} with bad data : " + e.getMessage(),r.ruleid);      }      if (r.action != null) {        l.add(r);      }    }  } catch (  StorageException e) {    logger.error("failed to access storage: {}",e.getMessage());  }  Collections.sort(l);  return l;}  }
class C{  public static void deleteProject(final IProject project,final IProgressMonitor aMonitor,boolean isForget){  try {    if (isForget) {      project.delete(IResource.NEVER_DELETE_PROJECT_CONTENT,aMonitor);    } else {      project.delete(true,aMonitor);    }  } catch (  CoreException e) {    Activator.getDefault().logError("Error deleting a specification",e);  }}  }
class C{  protected Resource createResource(final Element resourceElement){  final String uri=resourceElement.getTextContent();  final String minimizeAsString=resourceElement.getAttribute(ATTR_MINIMIZE);  final boolean minimize=StringUtils.isEmpty(minimizeAsString) || Boolean.valueOf(minimizeAsString);  final Resource resource=Resource.create(uri,getResourceType(resourceElement));  resource.setMinimize(minimize);  return resource;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return KEY;case 2:  return VALUES;default :return null;}}  }
class C{  public int readUnsignedShort(){  return (data[position++] & 0xFF) << 8 | (data[position++] & 0xFF);}  }
class C{  public static void addStyleValNode(Element parent,int left,int width,int top){  int newLeft=left + 2 + (width - left);  parent.addElement(XML_STYLEVALIMG_TEXT).addText(formatStyleText(newLeft,top + 5));}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);  in2=createLiveAnimatedString(null,SVG_IN2_ATTRIBUTE);  operator=createLiveAnimatedEnumeration(null,SVG_OPERATOR_ATTRIBUTE,OPERATOR_VALUES,(short)1);  k1=createLiveAnimatedNumber(null,SVG_K1_ATTRIBUTE,0f);  k2=createLiveAnimatedNumber(null,SVG_K2_ATTRIBUTE,0f);  k3=createLiveAnimatedNumber(null,SVG_K3_ATTRIBUTE,0f);  k4=createLiveAnimatedNumber(null,SVG_K4_ATTRIBUTE,0f);}  }
class C{  public DoubleColumn(){  this(0,10,0);}  }
class C{  public String executeExtension(ResourceType extensionType,String extensionName,String commandPrefix,String command,String[] args) throws Exception {  logger.debug(String.format("executeExtension(%s %s %s %s %s)",extensionType,extensionName,commandPrefix,command,args != null ? CLUtils.printArgs(args) : ""));  if (extensionName == null) {    return String.format("You must provide the component name for this command");  }  String cmdPrefix=String.format("%s.",commandPrefix);  String cmdProp=String.format("%s.%s",commandPrefix,command);  String extensionPath=String.format("/%s/%s/conf/%s/%s",getClusterName(),getMemberName(),extensionType.toString().toLowerCase(),extensionName);  ResourceNode extensionNode=locate(getSystemSessionID(),extensionPath);  if (extensionNode == null) {    return String.format("Could not find an extension of type %s named %s on member %s",extensionType,extensionName,memberName);  }  ResourceConfiguration config=(ResourceConfiguration)extensionNode.getResource();  TungstenProperties tp=config.getProperties();  if (command == null) {    return String.format("%s extension for %s takes one of the following commands:\n%s",extensionType,extensionName,tp.subset(cmdPrefix,true).keyNames());  }  String execPath=tp.getString(cmdProp);  if (execPath == null) {    return String.format("The %s extension for component %s does not support the command %s\n" + "It takes one of the following commands\n:%s",extensionType,extensionName,command,tp.subset(cmdPrefix,true).keyNames());  } else {    ArrayList<String> execList=new ArrayList<String>();    for (    String arg : execPath.split(" +")) {      execList.add(arg);    }    if (args != null) {      boolean inQuotedString=false;      String quotedString="";      for (      String arg : args) {        if (arg.startsWith("\"")) {          inQuotedString=true;          quotedString="";          quotedString=quotedString + arg + " ";          continue;        } else         if (inQuotedString) {          if (arg.endsWith("\"")) {            inQuotedString=false;            quotedString=quotedString + arg;            execList.add(quotedString);          } else {            quotedString=quotedString + arg + " ";          }          continue;        } else {          execList.add(arg);        }      }    }    logger.info("Executing OS command: + " + execPath);    ProcessExecutor processExecutor=new ProcessExecutor();    processExecutor.setWorkDirectory(null);    processExecutor.setCommands(execList.toArray(new String[execList.size()]));    processExecutor.run();    if (processExecutor.isSuccessful()) {      logger.debug("**************RESULTS FROM COMMAND EXECUTION****************");      logger.debug("Exit value: " + processExecutor.getExitValue());      logger.debug("Stdout: " + processExecutor.getStdout());      logger.debug("Stderr: " + processExecutor.getStderr());    } else {      logger.warn("Command failed: " + execPath);      logger.info("Exit value: " + processExecutor.getExitValue());      logger.info("Stderr: " + processExecutor.getStderr());      logger.info("Stdout: " + processExecutor.getStdout());    }    String stdOut=processExecutor.getStdout();    String stdErr=processExecutor.getStderr();    return stdErr + stdOut;  }}  }
class C{  public LifecycleListener[] findLifecycleListeners(){  return listeners;}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if ((argNum < 1) || (argNum > 2))   reportWrongNumberArgs();}  }
class C{  public static void evolve(Permutation permutation){  int i=PRNG.nextInt(permutation.size());  int j=PRNG.nextInt(permutation.size() - 1);  if (i == j) {    j=permutation.size() - 1;  }  permutation.insert(i,j);}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  public object addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void add(Match match,AppliedRegion appliedRegion){  add(match,appliedRegion,false);}  }
class C{  public static void doCircularLayout(final JFrame parent,final ZyGraph graph){  checkArguments(parent,graph);  if (!askLayout(parent,graph)) {    return;  }  graph.getSettings().getLayoutSettings().setDefaultGraphLayout(LayoutStyle.CIRCULAR);  refreshLayout(parent,graph);}  }
class C{  public static Distribution guessC(DataSet d){  return new Uniform(-2.4,2.4);}  }
class C{  public Object clone(){  return new X509CollectionStoreParameters(collection);}  }
class C{  public String process(String text){  String ret=text;  ret=convertor.convert(ret);  ret=senSegment(ret);  ret=senTokenize(ret);  ret=wordSegment(ret);  ret=postProcessing(ret);  ret=posTagging(ret);  return ret;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static int[] trimArray(int[] array,int size){  if (size < 0) {    throw new IllegalArgumentException();  }  if (size == 0) {    return NO_ERRORS;  }  int[] a=new int[size];  System.arraycopy(array,0,a,0,size);  return a;}  }
class C{  public static void main(String[] args){  In in=new In(args[0]);  int[] a=in.readAllInts();  Stopwatch timer=new Stopwatch();  int count=count(a);  StdOut.println("elapsed time = " + timer.elapsedTime());  StdOut.println(count);}  }
class C{  public IMouseState createNodeEnterState(final Node n,final MouseEvent event){  final CNodeEnterState<NodeType,EdgeType> state=new CNodeEnterState<NodeType,EdgeType>(this,m_graph,n);  m_factory.createNodeEnterAction().execute(state,event);  return state;}  }
class C{  private ResultList queryDisk(SNMPClient client,QueryParameters qps) throws Exception {  boolean diff="1".equalsIgnoreCase(qps.getSqlParams().get("p_2"));  Map<String,List<SNMPTriple>> snmpData=client.getMultiDiskData();  if (snmpData == null)   return null;  ColumnDescriptor desc=new ColumnDescriptor();  desc.addColumn("NAME",false,0);  desc.addColumn("OID",false,1);  desc.addColumn("VALUE",false,2);  ResultList rList=new ResultList();  rList.setColumnDescriptor(desc);  for (  Map.Entry<String,List<SNMPTriple>> e : snmpData.entrySet()) {    String disk=e.getKey();    for (    SNMPTriple t : e.getValue()) {      if (diff) {        try {          BigDecimal bd=new BigDecimal(t.value);        } catch (        Exception ex) {          continue;        }      }      ResultRow row=new ResultRow();      row.addColumn(disk + "." + t.name);      row.addColumn(t.oid);      row.addColumn(t.value);      row.setColumnDescriptor(desc);      rList.addRow(row);    }  }  return rList;}  }
class C{  public static void parse(InputStream is,DistributedSystemConfig config){  ManagedEntityConfigXmlParser handler=new ManagedEntityConfigXmlParser();  handler.config=config;  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    factory.setValidating(true);    SAXParser parser=factory.newSAXParser();    parser.parse(is,new DefaultHandlerDelegate(handler));  } catch (  Exception ex) {    if (ex instanceof AdminXmlException) {      throw (AdminXmlException)ex;    } else     if (ex.getCause() instanceof AdminXmlException) {      throw (AdminXmlException)ex.getCause();    } else     if (ex instanceof SAXException) {      SAXException sax=(SAXException)ex;      Exception cause=sax.getException();      if (cause instanceof AdminXmlException) {        throw (AdminXmlException)cause;      }    }    throw new AdminXmlException(LocalizedStrings.ManagedEntityConfigXmlParser_WHILE_PARSING_XML.toLocalizedString(),ex);  }}  }
class C{  private void updateChildMaterialWithLights(Object3D child){  Material material=child.getMaterial();  if (material != null && material.lightingEnabled())   material.setLights(mLights);  if (material != null && mFogParams != null)   material.addPlugin(new FogMaterialPlugin(mFogParams));  int numChildren=child.getNumChildren();  for (int i=0; i < numChildren; i++) {    Object3D grandChild=child.getChildAt(i);    updateChildMaterialWithLights(grandChild);  }}  }
class C{  EntityState(MovePath path){  position=path.getFinalCoords();  facing=path.getFinalFacing();  hexesMoved=path.getHexesMoved();  heat=path.getEntity().heat;  if (path.getLastStepMovementType() == EntityMovementType.MOVE_WALK) {    heat=getHeat() + 1;  } else   if (path.getLastStepMovementType() == EntityMovementType.MOVE_RUN) {    heat=getHeat() + 2;  } else   if ((path.getLastStepMovementType() == EntityMovementType.MOVE_JUMP) && (getHexesMoved() <= 3)) {    heat=getHeat() + 3;  } else   if ((path.getLastStepMovementType() == EntityMovementType.MOVE_JUMP) && (getHexesMoved() > 3)) {    heat=getHeat() + getHexesMoved();  }  prone=path.getFinalProne() || path.getFinalHullDown();  immobile=path.getEntity().isImmobile();  jumping=path.isJumping();  movementType=path.getLastStepMovementType();  naturalAptGun=path.getEntity().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_GUNNERY);  naturalAptPilot=path.getEntity().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING);  setSecondaryFacing(getFacing());}  }
class C{  public OMGraphic createGraphic(int renderType,int lineType){  OMGraphic g=null;switch (renderType) {case (OMGraphic.RENDERTYPE_OFFSET):    System.err.println("Offset type not supported for OMDistance");}g=new OMDistance(new double[0],OMGraphic.RADIANS,lineType,Length.NM);((OMDistance)g).setDoShapes(true);return g;}  }
class C{  public static boolean contains(long[] longArray,long value){  for (  long each : longArray) {    if (each == value) {      return true;    }  }  return false;}  }
class C{  public void add(KeyInfoReference keyInfoReference){  this.constructionElement.appendChild(keyInfoReference.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  public T caseRegularState(RegularState object){  return null;}  }
class C{  public static String printSecuritySummary(AuthenticationInfo authInfo){  StringBuilder sb=new StringBuilder();  sb.append("Security summary :\n");  if (authInfo.isEncryptionNeeded()) {    sb.append("JMX connections are encrypted\n");    sb.append("Enabled cipher suites : ");    for (    String s : SecurityHelper.getCiphers())     sb.append("\n\t" + s + " ");    sb.append("\n");    sb.append("Enabled protocols : ");    for (    String s : SecurityHelper.getProtocols())     sb.append("\n\t" + s + " ");    sb.append("\n");  } else {    sb.append("JMX connections are not encrypted\n");  }  if (authInfo.isAuthenticationNeeded()) {    sb.append("Password authentication is used\n");  } else {    sb.append("No password authentication\n");  }  return sb.toString();}  }
class C{  public boolean isSpecified(String qName){  int index=getIndex(qName);  if (index < 0)   throw new IllegalArgumentException("No such attribute: " + qName);  return specified[index];}  }
class C{  public synchronized void abort() throws IOException {  ensureOpen();  if ((mOperationDone) && (mReplyHeader.responseCode != ResponseCodes.OBEX_HTTP_CONTINUE)) {    throw new IOException("Operation has already ended");  }  mExceptionMessage="Operation aborted";  if ((!mOperationDone) && (mReplyHeader.responseCode == ResponseCodes.OBEX_HTTP_CONTINUE)) {    mOperationDone=true;    mParent.sendRequest(ObexHelper.OBEX_OPCODE_ABORT,null,mReplyHeader,null);    if (mReplyHeader.responseCode != ResponseCodes.OBEX_HTTP_OK) {      throw new IOException("Invalid response code from server");    }    mExceptionMessage=null;  }  close();}  }
class C{  public static void addIterator(final AccumuloStore store,final String iteratorName) throws StoreException {  if (!AccumuloStoreConstants.VALIDATOR_ITERATOR_NAME.equals(iteratorName) || store.getProperties().getEnableValidatorIterator()) {    try {      addIterator(store,store.getKeyPackage().getIteratorFactory().getIteratorSetting(store,iteratorName));    } catch (    final IteratorSettingException e) {      throw new StoreException(e.getMessage(),e);    }  }}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (object instanceof JSONArray) {    ((JSONArray)object).put(value);  } else {    this.put(key,new JSONArray().put(object).put(value));  }  return this;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (mainFrame != null) {    mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  }  setEnabled(false);  try {    JFileChooser.setDefaultLocale(controller.getLocaliser().getLocale());    JFileChooser fileChooser=new JFileChooser();    fileChooser.setLocale(controller.getLocaliser().getLocale());    fileChooser.setDialogTitle(controller.getLocaliser().getString("createNewWalletAction.tooltip"));    adjustedFont=FontSizer.INSTANCE.getAdjustedDefaultFont();    if (adjustedFont != null) {      setFileChooserFont(new Container[]{fileChooser});    }    fileChooser.applyComponentOrientation(ComponentOrientation.getOrientation(controller.getLocaliser().getLocale()));    if (this.bitcoinController.getModel().getActiveWalletFilename() != null) {      fileChooser.setCurrentDirectory(new File(this.bitcoinController.getModel().getActiveWalletFilename()));    }    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);    fileChooser.setFileFilter(new WalletFileFilter(controller));    String defaultFileName=fileChooser.getCurrentDirectory().getAbsoluteFile() + File.separator + controller.getLocaliser().getString("saveWalletAsView.untitled")+ "."+ BitcoinModel.WALLET_FILE_EXTENSION;    fileChooser.setSelectedFile(new File(defaultFileName));    fileChooser.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    int returnVal=fileChooser.showSaveDialog(mainFrame);    String newWalletFilename=null;    if (returnVal == JFileChooser.APPROVE_OPTION) {      File file=fileChooser.getSelectedFile();      if (file != null) {        newWalletFilename=file.getAbsolutePath();        createNewWallet(newWalletFilename);      }    }  }  finally {    setEnabled(true);    if (mainFrame != null) {      mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    }  }}  }
class C{  private Stack createPrefixStack(String prefix){  Stack fs=new Stack();  m_namespaces.put(prefix,fs);  return fs;}  }
class C{  public CSVReaderBuilder withFieldAsNull(CSVReaderNullFieldIndicator indicator){  this.nullFieldIndicator=indicator;  return this;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public boolean isShowDMS(){  return this.showDMS;}  }
class C{  public void step(SimState state){}  }
class C{  public void addSharedAvatar(AvatarConfig config){  config.addCredentials(this);  POST(this.url + "/add-shared-avatar",config.toXML());}  }
class C{  public static long lastModified(String fileName){  return FilePath.get(fileName).lastModified();}  }
class C{  public void append(String string){  this.charCount=this.charCount % HeaderCard.FITS_HEADER_CARD_SIZE;  int newLength=this.charCount + string.length();  if (newLength > HeaderCard.FITS_HEADER_CARD_SIZE) {    this.buffer.append(string,0,HeaderCard.FITS_HEADER_CARD_SIZE - this.charCount);    this.charCount=0;  } else {    this.charCount=newLength;    this.buffer.append(string);  }}  }
class C{  protected void handleCreateAction(SolrQueryRequest req,SolrQueryResponse rsp) throws SolrException {  SolrParams params=req.getParams();  log.info("core create command {}",params);  CoreDescriptor dcore=buildCoreDescriptor(params,coreContainer);  if (coreContainer.getAllCoreNames().contains(dcore.getName())) {    log.warn("Creating a core with existing name is not allowed");    throw new SolrException(ErrorCode.SERVER_ERROR,"Core with name '" + dcore.getName() + "' already exists.");  }  boolean preExisitingZkEntry=false;  try {    if (coreContainer.getZkController() != null) {      if (!Overseer.isLegacy(coreContainer.getZkController().getZkStateReader().getClusterProps())) {        if (dcore.getCloudDescriptor().getCoreNodeName() == null) {          throw new SolrException(ErrorCode.SERVER_ERROR,"non legacy mode coreNodeName missing " + params);        }      }      preExisitingZkEntry=checkIfCoreNodeNameAlreadyExists(dcore);    }    SolrCore core=coreContainer.create(dcore);    coreContainer.getCoresLocator().create(coreContainer,dcore);    if (coreContainer.getCoresLocator() instanceof SolrXMLCoresLocator) {      coreContainer.getCoresLocator().create(coreContainer);    }    rsp.add("core",core.getName());  } catch (  Exception ex) {    if (coreContainer.isZooKeeperAware() && dcore != null && !preExisitingZkEntry) {      try {        coreContainer.getZkController().unregister(dcore.getName(),dcore);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        SolrException.log(log,null,e);      }catch (      KeeperException e) {        SolrException.log(log,null,e);      }    }    Throwable tc=ex;    Throwable c=null;    do {      tc=tc.getCause();      if (tc != null) {        c=tc;      }    } while (tc != null);    String rootMsg="";    if (c != null) {      rootMsg=" Caused by: " + c.getMessage();    }    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Error CREATEing SolrCore '" + dcore.getName() + "': "+ ex.getMessage()+ rootMsg,ex);  }}  }
class C{  private int center(Component c,Insets insets,int x,boolean trailing){  Dimension pref=c.getPreferredSize();  int width=pref.width;  if (c instanceof JButton && ((JButton)c).getIcon() != null) {    width=((JButton)c).getIcon().getIconWidth();  }  if (trailing) {    x-=width;  }  int y=0;  if (c == menuButton) {  }  c.setBounds(x,y,pref.width,pref.height);  if (pref.width > 0) {    if (!trailing) {      return x + width;    }  }  return x;}  }
class C{  public TextField(String text){  super(text,1,20);  setUIID("TextField");  setSingleLineTextArea(true);}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  @Ignore("perf") @Test public void testPerformanceForMatchingCQs() throws Exception {  final Host host=Host.getHost(0);  VM server1=host.getVM(0);  VM server2=host.getVM(1);  VM client1=host.getVM(2);  VM client2=host.getVM(3);  cqDUnitTest.createServer(server1);  cqDUnitTest.createServer(server2);  final int port1=server1.invoke(null);  final int port2=server2.invoke(null);  final String host0=NetworkUtils.getServerHostName(server1.getHost());  cqDUnitTest.createClient(client1,new int[]{port1},host0,"-1",null);  cqDUnitTest.createClient(client2,new int[]{port2},host0,"-1",null);  boolean uniqueQueries=false;  String[] matchingCqs=this.generateCqQueries(uniqueQueries);  for (int i=0; i < matchingCqs.length; i++) {    cqDUnitTest.createCQ(client1,"testPerformanceForMatchingCQs_" + i,matchingCqs[i]);    cqDUnitTest.executeCQ(client1,"testPerformanceForMatchingCQs_" + i,false,null);  }  uniqueQueries=true;  matchingCqs=this.generateCqQueries(uniqueQueries);  for (int i=0; i < matchingCqs.length; i++) {    cqDUnitTest.createCQ(client2,"testPerformanceForMatchingCQs_" + i,matchingCqs[i]);    cqDUnitTest.executeCQ(client2,"testPerformanceForMatchingCQs_" + i,false,null);  }  Wait.pause(1 * 1000);  int size=1000;  cqDUnitTest.createValues(server1,cqDUnitTest.regions[0],size);  cqDUnitTest.createValues(server2,cqDUnitTest.regions[1],size);  for (int j=0; j < 5; j++) {    cqDUnitTest.createValues(server1,cqDUnitTest.regions[0],size - 1);    cqDUnitTest.createValues(server2,cqDUnitTest.regions[1],size - 1);  }  for (int j=0; j < 4; j++) {    cqDUnitTest.createValues(server2,cqDUnitTest.regions[0],size - 1);    cqDUnitTest.createValues(server1,cqDUnitTest.regions[1],size - 1);  }  cqDUnitTest.createValues(server2,cqDUnitTest.regions[0],size);  cqDUnitTest.createValues(server1,cqDUnitTest.regions[1],size);  for (int k=1; k <= size; k++) {    cqDUnitTest.waitForUpdated(client1,"testPerformanceForMatchingCQs_0",CqQueryUsingPoolDUnitTest.KEY + k);  }  Wait.pause(1 * 1000);  printCqQueryExecutionTime(server1);  printCqQueryExecutionTime(server2);  cqDUnitTest.closeClient(client1);  cqDUnitTest.closeClient(client2);  cqDUnitTest.closeServer(server2);  cqDUnitTest.closeServer(server1);}  }
class C{  public String globalInfo(){  return "Implements the Manhattan distance (or Taxicab geometry). The distance " + "between two points is the sum of the (absolute) differences of their " + "coordinates.\n\n"+ "For more information, see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public IRCService(){  super();  this.connections=new HashMap<Integer,IRCConnection>();  this.binder=new IRCBinder(this);  this.connectedServerTitles=new ArrayList<String>();  this.mentions=new LinkedHashMap<String,Conversation>();  this.alarmIntents=new HashMap<Integer,PendingIntent>();  this.alarmReceivers=new HashMap<Integer,ReconnectReceiver>();  this.alarmIntentsLock=new Object();}  }
class C{  public void fillRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  mGraphics.fillRoundRect(x,y,width,height,arcWidth,arcHeight);}  }
class C{  public SequentialTimestampGenerator(long seedTimestampMillis){  mSeedTimestampMillis=seedTimestampMillis;}  }
class C{  private void transformState(final Set<GraphNode> nodesToUpdate){  final StateVector<GraphNode,LatticeElement> newState=new StateVector<>();  final Set<GraphNode> newNodesToUpdate=new LinkedHashSet<>();  for (  final GraphNode node : nodesToUpdate) {    final List<IInfluencingState<LatticeElement,ObjectType>> influencingStates=getStates(walker.getInfluencing(node));    final LatticeElement combinedState=lattice.combine(influencingStates);    final LatticeElement transformedState=transformationList.transform(node,state.getState(node),combinedState);    newState.setState(node,transformedState);    if (debugger != null) {      debugger.updatedState(node,influencingStates,transformedState);    }    if (!newState.getState(node).equals(state.getState(node))) {      newNodesToUpdate.addAll(walker.getInfluenced(node));    }    if (newState.getState(node).lessThan(state.getState(node))) {      throw new IllegalStateException("Non-monotone transformation detected");    }  }  updateCurrentState(newState);  if (debugger != null) {    debugger.updatedState(state);  }  nodesToUpdate.clear();  nodesToUpdate.addAll(newNodesToUpdate);}  }
class C{  @Override protected void fixInstanceClass(EClassifier eClassifier){  if (eClassifier.getInstanceClassName() == null) {    eClassifier.setInstanceClassName("cruise.umple.umple." + eClassifier.getName());    setGeneratedClassName(eClassifier);  }}  }
class C{  public String extremeValuesAsOutliersTipText(){  return "Whether to tag extreme values also as outliers.";}  }
class C{  public static void copy(byte[] in,OutputStream out) throws IOException {  Assert.notNull(in,"No input byte array specified");  Assert.notNull(out,"No OutputStream specified");  try {    out.write(in);  }  finally {    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  private static String preencode(String contents){  int length=contents.length();  if (length == 11) {    int sum=0;    for (int i=0; i < 11; ++i) {      sum+=(contents.charAt(i) - '0') * (i % 2 == 0 ? 3 : 1);    }    contents+=(1000 - sum) % 10;  } else   if (length != 12) {    throw new IllegalArgumentException("Requested contents should be 11 or 12 digits long, but got " + contents.length());  }  return '0' + contents;}  }
class C{  public Selection(final T item){  if (item == null) {    this.elements=java.util.Collections.emptyList();    this.head=null;  } else {    this.elements=java.util.Collections.singletonList(item);    this.head=item;  }}  }
class C{  protected void drawTriangle(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow,String direction){  Polygon triangle=new Polygon();  if (direction.equals(mxConstants.DIRECTION_NORTH)) {    triangle.addPoint(x,y + h);    triangle.addPoint(x + w / 2,y);    triangle.addPoint(x + w,y + h);  } else   if (direction.equals(mxConstants.DIRECTION_SOUTH)) {    triangle.addPoint(x,y);    triangle.addPoint(x + w / 2,y + h);    triangle.addPoint(x + w,y);  } else   if (direction.equals(mxConstants.DIRECTION_WEST)) {    triangle.addPoint(x + w,y);    triangle.addPoint(x,y + h / 2);    triangle.addPoint(x + w,y + h);  } else {    triangle.addPoint(x,y);    triangle.addPoint(x + w,y + h / 2);    triangle.addPoint(x,y + h);  }  drawPolygon(triangle,fillColor,fillPaint,penColor,shadow);}  }
class C{  @DELETE @Path("setting/{settingId}") @ZeppelinApi public Response removeSetting(@PathParam("settingId") String settingId) throws IOException {  logger.info("Remove interpreterSetting {}",settingId);  interpreterFactory.remove(settingId);  return new JsonResponse(Status.OK).build();}  }
class C{  @Override public void onAction(final ActionType at){  if (isReleased()) {    return;  }switch (at) {case OPEN:    at.send(at.fillTargetInfo(entity));  break;default :super.onAction(at);break;}}  }
class C{  protected void resetFieldTypeForLOB(DirectToFieldMapping mapping){  if (mapping.getFieldClassification().getName().equals("java.sql.Blob")) {    getFieldDefFromDBField(mapping.getField()).setType(Byte[].class);  } else   if (mapping.getFieldClassification().getName().equals("java.sql.Clob")) {    getFieldDefFromDBField(mapping.getField()).setType(Character[].class);  }}  }
class C{  public ChildMemoryCircuitBreaker(BreakerSettings settings,ESLogger logger,HierarchyCircuitBreakerService parent,String name){  this(settings,null,logger,parent,name);}  }
class C{  public void appendNodes(NodeVector nodes){  int nNodes=nodes.size();  if (null == m_map) {    m_mapSize=nNodes + m_blocksize;    m_map=new int[m_mapSize];  } else   if ((m_firstFree + nNodes) >= m_mapSize) {    m_mapSize+=(nNodes + m_blocksize);    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + nNodes);    m_map=newMap;  }  System.arraycopy(nodes.m_map,0,m_map,m_firstFree,nNodes);  m_firstFree+=nNodes;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public Long countForBackendId(String backendId){  return poiDao.countForBackendId(backendId);}  }
class C{  private Object compareBothRegularAndRaw(RawComparator<UrlWithScore> comp,UrlWithScore k1,UrlWithScore k2) throws IOException {  int regular=comp.compare(k1,k2);  byte[] bytes1=extractBytes(k1);  byte[] bytes2=extractBytes(k2);  int raw=comp.compare(bytes1,0,bytes1.length,bytes2,0,bytes2.length);  assertEquals("Regular compare should equal raw compare",regular,raw);  return regular;}  }
class C{  public boolean addAll(Collection<? extends E> c){  boolean modified=false;  for (  E e : c) {    add(e);    modified=true;  }  return modified;}  }
class C{  @SuppressWarnings({"unchecked"}) public GridSetWrapper(Map<E,?> map){  A.notNull(map,"map");  this.map=(Map<E,Object>)map;}  }
class C{  public void prepend(String k,String v){  grow();  for (int i=nkeys; i > 0; i--) {    keys[i]=keys[i - 1];    values[i]=values[i - 1];  }  keys[0]=k;  values[0]=v;  nkeys++;}  }
class C{  public InterruptedIOException(java.lang.String s){}  }
class C{  public TaggingService(ServiceOption option){  this.option=option;}  }
class C{  protected void drawDraggedImage(Graphics g,Image img,int x,int y){  g.drawImage(img,x,y);}  }
class C{  @SuppressWarnings("unchecked") public V put(K key,V value){  Segment<K,V> s;  if (value == null)   throw new NullPointerException();  int hash=hash(key.hashCode());  int j=(hash >>> segmentShift) & segmentMask;  if ((s=(Segment<K,V>)UNSAFE.getObject(segments,(j << SSHIFT) + SBASE)) == null)   s=ensureSegment(j);  return s.put(key,hash,value,false);}  }
class C{  public void testIsSupported1() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",builder);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("XXX","1.0");  assertFalse("throw_False",state);}  }
class C{  public static void updateViaProcessor(ILaunchConfigurationProcessor processor,ILaunchConfigurationWorkingCopy configuration){  IJavaProject javaProject=LaunchConfigurationUtilities.getJavaProject(configuration);  if (javaProject != null && javaProject.exists()) {    try {      List<String> programArgs=parseProgramArgs(configuration);      List<String> vmArgs=parseVmArgs(configuration);      processor.update(configuration,javaProject,programArgs,vmArgs);      configuration.setAttribute(IJavaLaunchConfigurationConstants.ATTR_PROGRAM_ARGUMENTS,LaunchConfigurationProcessorUtilities.createArgsString(programArgs));      configuration.setAttribute(IJavaLaunchConfigurationConstants.ATTR_VM_ARGUMENTS,LaunchConfigurationProcessorUtilities.createArgsString(vmArgs));    } catch (    Throwable e) {      CorePluginLog.logError(e,"Could not update the launch configuration");    }  }}  }
class C{  public void onZoomIn(View view){  if (!checkReady()) {    return;  }  changeCamera(CameraUpdateFactory.zoomIn());}  }
class C{  public void init() throws ServletException {}  }
class C{  public static void writeElement(final XMLStreamWriter writer,final String elementName,final byte[] value) throws XMLStreamException {  if (value == null) {    return;  }  writer.writeStartElement(elementName);  try {    writer.writeCharacters(new String(Base64.encodeBase64(value),"US-ASCII"));  } catch (  final UnsupportedEncodingException e) {    throw new RuntimeException(e);  }  writer.writeEndElement();}  }
class C{  @Override protected Map<String,Object> retrieveParameters(WarpScriptStack stack) throws WarpScriptException {  Map<String,Object> params=new HashMap<String,Object>();  Object top=stack.pop();  if (!(top instanceof Map)) {    throw new WarpScriptException(getName() + " expects a map of parameters below input GTS");  }  String[] field_names_1={"PERIOD","PRECISION","ROBUSTNESS"};  String[] field_names_2={"BANDWIDTH","DEGREE","SPEED"};  String[] suffixes={"_S","_L","_T","_P"};  Map<String,Object> last_params=(Map<String,Object>)top;  for (  Map.Entry<String,Object> entry : last_params.entrySet()) {    String key=entry.getKey();    String body=key.substring(0,key.length() - 2);    String suffix=key.substring(key.length() - 2,key.length());    Object value=entry.getValue();    if (!(Arrays.asList(field_names_1).contains(key) || (Arrays.asList(field_names_2).contains(body)) && Arrays.asList(suffixes).contains(suffix) || Arrays.asList(field_names_2).contains(key))) {      throw new WarpScriptException(getName() + " does not expect argument " + key);    } else {      if (!(value instanceof Long)) {        throw new WarpScriptException(getName() + " expects argument " + key+ " to be of type LONG.");      } else {        if (null == params.get(key)) {          params.put(key,((Number)value).intValue());        }      }    }  }  for (int u=0; u < 3; u++) {    Object o;    if (null != (o=params.get(field_names_2[u]))) {      for (int v=0; v < 4; v++) {        String to_put=field_names_2[u] + suffixes[v];        if (null == params.get(to_put)) {          params.put(to_put,((Number)o).intValue());        }      }    }  }  return params;}  }
class C{  public boolean supportsCatalogsInTableDefinitions() throws SQLException {  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  Element lChild;  NodeList childNodes;  CDATASection cdataN;  String data;  doc=(Document)load("staff",true);  nameList=doc.getElementsByTagName("name");  lChild=(Element)nameList.item(1);  lChild.normalize();  childNodes=lChild.getChildNodes();  cdataN=(CDATASection)childNodes.item(1);  assertNotNull("firstCDATASection",cdataN);  data=cdataN.getData();  assertEquals("data1","This is a CDATASection with EntityReference number 2 &ent2;",data);  cdataN=(CDATASection)childNodes.item(3);  assertNotNull("secondCDATASection",cdataN);  data=cdataN.getData();  assertEquals("data3","This is an adjacent CDATASection with a reference to a tab &tab;",data);}  }
class C{  public static void write(OMText text,Link link,LinkProperties props) throws IOException {switch (text.getRenderType()) {case OMText.RENDERTYPE_LATLON:    write((float)text.getLat(),(float)text.getLon(),text.getData(),OMText.fontToXFont(text.getFont()),text.getJustify(),props,link.dos);  break;case OMText.RENDERTYPE_XY:write(text.getX(),text.getY(),text.getData(),OMText.fontToXFont(text.getFont()),text.getJustify(),props,link.dos);break;case OMText.RENDERTYPE_OFFSET:write((float)text.getLat(),(float)text.getLon(),text.getX(),text.getY(),text.getData(),OMText.fontToXFont(text.getFont()),text.getJustify(),props,link.dos);break;default :Debug.error("LinkText.write: text rendertype unknown.");}}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_name_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void expireLease(String leaseId) throws IllegalStateException {  assignableVMs.expireLease(leaseId);}  }
class C{  public Proxy removeProxy(String proxyName){  Proxy proxy=proxyMap.get(proxyName);  if (proxy != null) {    proxyMap.remove(proxyName);    proxy.onRemove();  }  return proxy;}  }
class C{  public static <T>String toString(Class<T> cls,T obj){  assert cls != null;  assert obj != null;  Queue<GridToStringThreadLocal> queue=threadCache.get();  assert queue != null;  GridToStringThreadLocal tmp=queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();  try {    return toStringImpl(cls,tmp.getStringBuilder(),obj,tmp.getAdditionalNames(),tmp.getAdditionalValues(),0);  }  finally {    queue.offer(tmp);  }}  }
class C{  public OperatorVersion(String versionString){  super(versionString);}  }
class C{  static boolean checkPreLongsFlagsCap(int preambleLongs,int flags,long memCapBytes){  boolean empty=(flags & EMPTY_FLAG_MASK) > 0;  int minPre=Family.QUANTILES.getMinPreLongs();  int maxPre=Family.QUANTILES.getMaxPreLongs();  boolean valid=((preambleLongs == minPre) && empty) || ((preambleLongs == maxPre) && !empty);  if (!valid) {    throw new SketchesArgumentException("Possible corruption: PreambleLongs inconsistent with empty state: " + preambleLongs);  }  checkFlags(flags);  if (!empty && (memCapBytes < (preambleLongs << 3))) {    throw new SketchesArgumentException("Possible corruption: Insufficient capacity for preamble: " + memCapBytes);  }  return empty;}  }
class C{  public boolean isNumber(){  return value instanceof Number;}  }
class C{  public ExceptionTable copy(ConstPool newCp,Map classnames){  ExceptionTable et=new ExceptionTable(newCp);  ConstPool srcCp=constPool;  int len=size();  for (int i=0; i < len; ++i) {    ExceptionTableEntry e=(ExceptionTableEntry)entries.get(i);    int type=srcCp.copy(e.catchType,newCp,classnames);    et.add(e.startPc,e.endPc,e.handlerPc,type);  }  return et;}  }
class C{  public MenuLockLayer(CloseMenuHandler closeMenuCallback){  this(closeMenuCallback,0);}  }
class C{  public void one() throws IOException {  write(1,1);}  }
class C{  private String generateScopeId(){  HttpSession session=request.getSession();  String scopeId=UUID.randomUUID().toString();  String sessionKey=SCOPE_ID + "-" + scopeId;synchronized (this) {    while (session.getAttribute(sessionKey) != null) {      scopeId=UUID.randomUUID().toString();      sessionKey=SCOPE_ID + "-" + scopeId;    }    session.setAttribute(sessionKey,new HashMap<>());    request.setAttribute(SCOPE_ID,scopeId);  }  return scopeId;}  }
class C{  private void attemptLogin(){  if (mAuthTask != null) {    return;  }  showProgress(true);  mAuthTask=new UserLoginTask(this,mNameView.getText().toString(),mPasswordView.getText().toString());  mAuthTask.execute((Void)null);}  }
class C{  private void doNickCompletion(EditText input){  String text=input.getText().toString();  if (text.length() <= 0) {    return;  }  String[] tokens=text.split("[\\s,.-]+");  if (tokens.length <= 0) {    return;  }  String word=tokens[tokens.length - 1].toLowerCase();  tokens[tokens.length - 1]=null;  int begin=input.getSelectionStart();  int end=input.getSelectionEnd();  int cursor=Math.min(begin,end);  int sel_end=Math.max(begin,end);  boolean in_selection=(cursor != sel_end);  if (in_selection) {    word=text.substring(cursor,sel_end);  } else {    while (true) {      cursor-=1;      if (cursor <= 0 || text.charAt(cursor) == ' ') {        break;      }    }    if (cursor < 0) {      cursor=0;    }    if (text.charAt(cursor) == ' ') {      cursor+=1;    }    sel_end=text.indexOf(' ',cursor);    if (sel_end == -1) {      sel_end=text.length();    }    word=text.substring(cursor,sel_end);  }  Conversation conversationForUserList=pagerAdapter.getItem(pager.getCurrentItem());  String[] users=null;  if (conversationForUserList.getType() == Conversation.TYPE_CHANNEL) {    users=binder.getService().getConnection(server.getId()).getUsersAsStringArray(conversationForUserList.getName());  }  if (users != null) {    List<Integer> result=new ArrayList<Integer>();    for (int i=0; i < users.length; i++) {      String nick=removeStatusChar(users[i].toLowerCase());      if (nick.startsWith(word.toLowerCase())) {        result.add(Integer.valueOf(i));      }    }    if (result.size() == 1) {      input.setSelection(cursor,sel_end);      insertNickCompletion(input,users[result.get(0).intValue()]);    } else     if (result.size() > 0) {      Intent intent=new Intent(this,UsersActivity.class);      String[] extra=new String[result.size()];      int i=0;      for (      Integer n : result) {        extra[i++]=users[n.intValue()];      }      input.setSelection(cursor,sel_end);      intent.putExtra(Extra.USERS,extra);      startActivityForResult(intent,REQUEST_CODE_NICK_COMPLETION);    }  }}  }
class C{  private static float constrain(float amount,float low,float high){  return amount < low ? low : (amount > high ? high : amount);}  }
class C{  public static JavacMessages instance(Context context){  JavacMessages instance=context.get(messagesKey);  if (instance == null)   instance=new JavacMessages(context);  return instance;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public String findDeviceType(){  return "Storage Management";}  }
class C{  public static JSONArray toJSONArray(JSONArray names,String string) throws JSONException {  return toJSONArray(names,new JSONTokener(string));}  }
class C{  private void zEventToggleTimeMenuButtonMousePressed(MouseEvent e){  togglePopup();}  }
class C{  public boolean isPersistItems(){  return parseBoolean(getFieldValue(ConfigureNodeFields.persist_items));}  }
class C{  public int drainPermits(){  return sync.drainPermits();}  }
class C{  private int fastMatch(String sha1){  Integer idx=_indexes.get(sha1);  if (idx == null)   return -1; else   return idx.intValue();}  }
class C{  public void unZipIt(String zipFileName,NotebookPanel notebookPanel,Document key) throws IOException {  ZipFile zipFile;  zipFile=new ZipFile(zipFileName);  Enumeration<? extends ZipEntry> zes=zipFile.entries();  ZipEntry ze=null;  List<String> studentDocNames=new ArrayList<>();  List<Document> docs=new ArrayList<>();  while (zes.hasMoreElements()) {    ze=zes.nextElement();    String fileName=ze.getName();    try {      InputStream inputStream=zipFile.getInputStream(ze);      if (inputStream.available() == 0) {        break;      }      studentDocNames.add(fileName);      docs.add(notebookPanel.openDoc(inputStream,fileName));    } catch (    IOException ex) {      ex.printStackTrace();    }  }  Document resultDoc=new Document("Student Summary");  resultDoc.addBlankPage();  List<List<MathObject>> incorrectWork=new ArrayList<>();  List<List<MathObject>> allStudentWork=new ArrayList<>();  List<List<String>> answers=getAnswers(key);  for (int i=0; i < docs.get(0).getPages().size(); i++) {    List<MathObject> allStudentWorkForOneProblem=new ArrayList<>();    List<MathObject> allIncorrectStudentWorkForOneProblem=new ArrayList<>();    for (    Document doc : docs) {      if (doc == null)       continue;      Page p=doc.getPage(i);      List<String> studentAnswers=getStudentAnswers(p);      boolean answerCorrect=false;      if (!answers.get(i).isEmpty() && studentAnswers.size() == answers.get(i).size() && studentAnswers.containsAll(answers.get(i))) {        answerCorrect=true;      }      Grouping group=new Grouping(p);      for (      MathObject mObj : p.getObjects()) {        group.addObject(mObj);      }      GridPoint gp=Document.getFirstWhiteSpaceOnPage(p);      int numPoints=3;      int scoreLabelWidth=40;      int scoreLabelHeight=20;      TextObject score=new TextObject(p,(int)gp.getx(),(int)gp.gety(),scoreLabelWidth,scoreLabelHeight,12,"Score");      AnswerBoxObject scoreInput=new AnswerBoxObject(p,(int)gp.getx() + scoreLabelWidth,(int)gp.gety(),scoreLabelWidth,scoreLabelHeight);      TextObject points=new TextObject(p,(int)gp.getx() + 2 * scoreLabelWidth + 10,(int)gp.gety(),scoreLabelWidth,scoreLabelHeight,12,"of " + numPoints);      try {        if (answerCorrect) {          scoreInput.setAttributeValue(AnswerBoxObject.STUDENT_ANSWER,numPoints + "");        }      } catch (      AttributeException e) {        e.printStackTrace();      }      TextObject feedback=new TextObject(p,(int)gp.getx(),(int)gp.gety() + scoreLabelHeight + 5,scoreLabelWidth * 2,scoreLabelHeight,12,"Feedback");      AnswerBoxObject feedbackInput=new AnswerBoxObject(p,(int)gp.getx(),(int)gp.gety() + 2 * (scoreLabelHeight + 5),scoreLabelWidth * 3,scoreLabelHeight * 3);      group.addObject(score);      group.addObject(scoreInput);      group.addObject(points);      group.addObject(feedback);      group.addObject(feedbackInput);      group.adjustSizeToFitChildren();      if (!answerCorrect) {        allIncorrectStudentWorkForOneProblem.add(group);      }      allStudentWorkForOneProblem.add(group);    }    incorrectWork.add(allIncorrectStudentWorkForOneProblem);    allStudentWork.add(allStudentWorkForOneProblem);  }  StringBuffer allAnswers=new StringBuffer();  for (  List<String> problemAnswers : answers) {    for (    String answer : problemAnswers) {      allAnswers.append(answer).append(",");    }    allAnswers.append("::");  }  int[] problemNumbers={5,7,9};  int problemNumber=0;  for (  List<MathObject> problems : incorrectWork) {    Document.layoutProblems(problems,"Problem " + problemNumber,resultDoc,false);    problemNumber++;  }  notebookPanel.addDoc(resultDoc);  notebookPanel.getCurrentDocViewer().gradePage=true;  notebookPanel.getCurrentDocViewer().studentFeedbackDocNames=studentDocNames;  notebookPanel.getCurrentDocViewer().allStudentWork=allStudentWork;  zipFile.close();}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String encodeBytes(byte[] bytesToEncode){  String retval=Base64.encodeBytes(bytesToEncode,Base64.DONT_BREAK_LINES);  return retval;}  }
class C{  EncryptedPrivateKeyInfo(AlgorithmId algid,byte[] encryptedData){  this.algid=algid;  this.encryptedData=encryptedData.clone();  this.encoded=null;}  }
class C{  public static boolean equals(String s1,String s2){  if (s1 == s2) {    return true;  }  if (s1 != null) {    if (s2 != null) {      return s1.equals(s2);    }  }  return false;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.INDEXED_ACCESS_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:    return isValidSimpleAssignmentTarget();}return super.eInvoke(operationID,arguments);}  }
class C{  protected void parse(DataInputStream stream) throws Exception {  value=stream.readLong();}  }
class C{  public static int countParameters(RVMMethod method){  int GPRs=0;  int FPRs=0;  int Spills=0;  int gp=FIRST_VOLATILE_GPR.value();  int fp=FIRST_VOLATILE_FPR.value();  if (!method.isStatic()) {    if (gp > LAST_VOLATILE_GPR.value()) {      Spills++;    } else {      GPRs++;      gp++;    }  }  for (  TypeReference t : method.getParameterTypes()) {    if (t.isLongType()) {      if (VM.BuildFor64Addr) {        if (gp > LAST_VOLATILE_GPR.value()) {          Spills++;        } else {          GPRs++;          gp++;        }      } else {        if (gp > LAST_VOLATILE_GPR.value()) {          Spills+=2;        } else {          GPRs++;          gp++;          if (gp > LAST_VOLATILE_GPR.value()) {            Spills++;          } else {            GPRs++;            gp++;          }        }      }    } else     if (t.isFloatType()) {      if (fp > LAST_VOLATILE_FPR.value()) {        Spills++;      } else {        FPRs++;        fp++;      }    } else     if (t.isDoubleType()) {      if (fp > LAST_VOLATILE_FPR.value()) {        Spills+=VM.BuildFor64Addr ? 1 : 2;      } else {        FPRs++;        fp++;      }    } else {      if (gp > LAST_VOLATILE_GPR.value()) {        Spills++;      } else {        GPRs++;        gp++;      }    }  }  if (VM.BuildFor32Addr) {    int frameSize=(Spills << LOG_BYTES_IN_STACKSLOT) + STACKFRAME_HEADER_SIZE;    frameSize=Memory.alignUp(frameSize,STACKFRAME_ALIGNMENT);    Spills=(frameSize - STACKFRAME_HEADER_SIZE) >> LOG_BYTES_IN_STACKSLOT;  }  return (Spills << (REFLECTION_FPRS_BITS + REFLECTION_GPRS_BITS)) | (FPRs << REFLECTION_GPRS_BITS) | GPRs;}  }
class C{  public int selectedLinkSize(){  return selectedLinkList.size();}  }
class C{  public void removeEndpoint(DistributedMember mbr,String reason){  removeEndpoint(mbr,reason,true);}  }
class C{  @Override public void before(final DerivationState state,final int level,int tailNodeIndex){  extract(state.edge.getRule(),state.parentNode.i);}  }
class C{  @Pure public Class<?>[] parseForParameterClasses(ClassLoader cl){  TypeReference[] typeRefs=this.parseForParameterTypes(cl);  Class<?>[] classes=new Class<?>[typeRefs.length];  for (int i=0; i < typeRefs.length; i++) {    TypeReference t=typeRefs[i];    classes[i]=t.resolve().getClassForType();  }  return classes;}  }
class C{  public void addRemoteCandidates(List<RemoteCandidate> candidates){synchronized (remoteCandidates) {    remoteCandidates.addAll(candidates);  }}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    if (!isOpen()) {      throw new IOException("InputStreamReader is closed");    }    char[] buf=new char[1];    return read(buf,0,1) != -1 ? buf[0] : -1;  }}  }
class C{  public void showErrorMessage(){  showErrorMessage(errorMessage);}  }
class C{  private boolean isNamedParam(String arg){  return arg.startsWith("--") && (arg.indexOf('=') > 2 && validFirstChar(arg.charAt(2)));}  }
class C{  public RemoteRepositoryManager(final String serviceURL,final HttpClient httpClient,final Executor executor){  this(serviceURL,false,httpClient,executor);}  }
class C{  public void initJniBackground(){}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void search(BasicBlock X,Stack<RegisterOperand>[] S){  if (DEBUG)   System.out.println("SEARCH " + X);  HashMap<Register,Register> pushedRegs=new HashMap<Register,Register>();  for (Enumeration<Instruction> ie=X.forwardInstrEnumerator(); ie.hasMoreElements(); ) {    Instruction A=ie.nextElement();    if (A.operator() != PHI) {      for (int u=A.getNumberOfDefs(); u < A.getNumberOfOperands(); u++) {        Operand op=A.getOperand(u);        if (op instanceof RegisterOperand) {          RegisterOperand rop=(RegisterOperand)op;          Register r1=rop.getRegister();          if (r1.isSSA())           continue;          if (r1.isPhysical())           continue;          RegisterOperand r2=S[r1.getNumber()].peek();          if (DEBUG)           System.out.println("REPLACE NORMAL USE " + r1 + " with "+ r2);          if (r2 != null) {            rop.setRegister(r2.getRegister());            DefUse.recordUse(rop);          }        }      }    }    for (int d=0; d < A.getNumberOfDefs(); d++) {      Operand op=A.getOperand(d);      if (op instanceof RegisterOperand) {        RegisterOperand rop=(RegisterOperand)op;        Register r1=rop.getRegister();        if (r1.isSSA())         continue;        if (r1.isPhysical())         continue;        Register r2=ir.regpool.getReg(r1);        if (DEBUG)         System.out.println("PUSH " + r2 + " FOR "+ r1+ " BECAUSE "+ A);        S[r1.getNumber()].push(new RegisterOperand(r2,rop.getType()));        rop.setRegister(r2);        pushedRegs.put(r2,r1);      }    }  }  if (DEBUG)   System.out.println("SEARCH (second loop) " + X);  for (Enumeration<BasicBlock> y=X.getOut(); y.hasMoreElements(); ) {    BasicBlock Y=y.nextElement();    if (DEBUG)     System.out.println(" Successor: " + Y);    int j=numPredProcessed[Y.getNumber()]++;    if (Y.isExit())     continue;    Instruction s=Y.firstRealInstruction();    if (s == null)     continue;    if (DEBUG)     System.out.println(" Predecessor: " + j);    while (s.operator() == PHI) {      Operand val=Phi.getValue(s,j);      if (val.isRegister()) {        Register r1=((RegisterOperand)Phi.getValue(s,j)).getRegister();        if (!r1.isSSA()) {          RegisterOperand r2=S[r1.getNumber()].peek();          if (r2 == null) {            Phi.setValue(s,j,new UnreachableOperand());          } else {            RegisterOperand rop=r2.copyRO();            Phi.setValue(s,j,rop);            DefUse.recordUse(rop);          }          Phi.setPred(s,j,new BasicBlockOperand(X));        }      }      s=s.nextInstructionInCodeOrder();    }  }  if (DEBUG)   System.out.println("SEARCH (third loop) " + X);  for (Enumeration<TreeNode> c=ir.HIRInfo.dominatorTree.getChildren(X); c.hasMoreElements(); ) {    DominatorTreeNode v=(DominatorTreeNode)c.nextElement();    search(v.getBlock(),S);  }  if (DEBUG)   System.out.println("SEARCH (fourth loop) " + X);  for (Enumeration<Instruction> a=X.forwardInstrEnumerator(); a.hasMoreElements(); ) {    Instruction A=a.nextElement();    for (int d=0; d < A.getNumberOfDefs(); d++) {      Operand newOp=A.getOperand(d);      if (newOp == null)       continue;      if (!newOp.isRegister())       continue;      Register newReg=newOp.asRegister().getRegister();      if (newReg.isSSA())       continue;      if (newReg.isPhysical())       continue;      Register r1=pushedRegs.get(newReg);      S[r1.getNumber()].pop();      if (DEBUG)       System.out.println("POP " + r1);    }  }  if (DEBUG)   System.out.println("FINISHED SEARCH " + X);}  }
class C{  protected void initializeWorld(){  this.world.setNarrowphaseDetector(new Sat());  List<Link> links=Geometry.createLinks(new Vector2[]{new Vector2(-6.0,0.5),new Vector2(0.0,0.0),new Vector2(2.0,0.0),new Vector2(4.0,0.2),new Vector2(4.5,0.3),new Vector2(6.0,-0.5)},false);  SimulationBody floor=new SimulationBody();  for (  Link link : links) {    floor.addFixture(link);  }  floor.setMass(MassType.INFINITE);  this.world.addBody(floor);  SimulationBody slider=new SimulationBody();  slider.addFixture(Geometry.createSquare(0.25));  slider.setMass(MassType.NORMAL);  slider.setLinearVelocity(6.2,0);  slider.translate(-5.5,1.0);  this.world.addBody(slider);}  }
class C{  public SharedPreferences remove(String key){  editor.remove(key);  return this;}  }
class C{  public void testBug66947() throws Exception {  Connection con=null;  try {    Properties props=new Properties();    props.setProperty("useServerPrepStmts","true");    props.setProperty("cachePrepStmts","true");    props.setProperty("prepStmtCacheSize","2");    con=getConnectionWithProps(props);    PreparedStatement ps1_1;    PreparedStatement ps1_2;    String query="Select 'a' from dual";    ps1_1=con.prepareStatement(query);    ps1_1.execute();    ps1_1.close();    ps1_2=con.prepareStatement(query);    assertSame("SSPS should be taken from cache but is not the same.",ps1_1,ps1_2);    ps1_2.execute();    ps1_2.close();    ps1_2.close();    ps1_1=con.prepareStatement(query);    assertNotSame("SSPS should not be taken from cache but is the same.",ps1_2,ps1_1);    ps1_1.execute();    ps1_1.close();    ps1_1.close();    PreparedStatement ps2_1;    PreparedStatement ps2_2;    PreparedStatement ps3_1;    PreparedStatement ps3_2;    ps1_1=con.prepareStatement("Select 'b' from dual");    ps1_1.execute();    ps1_1.close();    ps2_1=con.prepareStatement("Select 'c' from dual");    ps2_1.execute();    ps2_1.close();    ps3_1=con.prepareStatement("Select 'd' from dual");    ps3_1.execute();    ps3_1.close();    ps1_2=con.prepareStatement("Select 'b' from dual");    assertNotSame("SSPS should not be taken from cache but is the same.",ps1_1,ps1_2);    ps2_2=con.prepareStatement("Select 'c' from dual");    assertSame("SSPS should be taken from cache but is not the same.",ps2_1,ps2_2);    ps3_2=con.prepareStatement("Select 'd' from dual");    assertSame("SSPS should be taken from cache but is not the same.",ps3_1,ps3_2);  }  finally {    if (con != null) {      con.close();    }  }}  }
class C{  protected void checkDOMVersion(Hashtable h){  if (null == h)   h=new Hashtable();  final String DOM_LEVEL2_CLASS="org.w3c.dom.Document";  final String DOM_LEVEL2_METHOD="createElementNS";  final String DOM_LEVEL2WD_CLASS="org.w3c.dom.Node";  final String DOM_LEVEL2WD_METHOD="supported";  final String DOM_LEVEL2FD_CLASS="org.w3c.dom.Node";  final String DOM_LEVEL2FD_METHOD="isSupported";  final Class twoStringArgs[]={java.lang.String.class,java.lang.String.class};  try {    Class clazz=ObjectFactory.findProviderClass(DOM_LEVEL2_CLASS,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(DOM_LEVEL2_METHOD,twoStringArgs);    h.put(VERSION + "DOM","2.0");    try {      clazz=ObjectFactory.findProviderClass(DOM_LEVEL2WD_CLASS,ObjectFactory.findClassLoader(),true);      method=clazz.getMethod(DOM_LEVEL2WD_METHOD,twoStringArgs);      h.put(ERROR + VERSION + "DOM.draftlevel","2.0wd");      h.put(ERROR,ERROR_FOUND);    } catch (    Exception e2) {      try {        clazz=ObjectFactory.findProviderClass(DOM_LEVEL2FD_CLASS,ObjectFactory.findClassLoader(),true);        method=clazz.getMethod(DOM_LEVEL2FD_METHOD,twoStringArgs);        h.put(VERSION + "DOM.draftlevel","2.0fd");      } catch (      Exception e3) {        h.put(ERROR + VERSION + "DOM.draftlevel","2.0unknown");        h.put(ERROR,ERROR_FOUND);      }    }  } catch (  Exception e) {    h.put(ERROR + VERSION + "DOM","ERROR attempting to load DOM level 2 class: " + e.toString());    h.put(ERROR,ERROR_FOUND);  }}  }
class C{  public void handleTransitDriverAlights(PersonLeavesVehicleEvent event){  this.transitDriverAlightsE=event;}  }
class C{  private void attribClassBody(Env<AttrContext> env,ClassSymbol c){  JCClassDecl tree=(JCClassDecl)env.tree;  Assert.check(c == tree.sym);  attribStats(tree.typarams,env);  if (!c.isAnonymous()) {    chk.validate(tree.typarams,env);    chk.validate(tree.extending,env);    chk.validate(tree.implementing,env);  }  c.markAbstractIfNeeded(types);  if ((c.flags() & (ABSTRACT | INTERFACE)) == 0) {    if (!relax)     chk.checkAllDefined(tree.pos(),c);  }  if ((c.flags() & ANNOTATION) != 0) {    if (tree.implementing.nonEmpty())     log.error(tree.implementing.head.pos(),"cant.extend.intf.annotation");    if (tree.typarams.nonEmpty())     log.error(tree.typarams.head.pos(),"intf.annotation.cant.have.type.params");    Attribute.Compound repeatable=c.attribute(syms.repeatableType.tsym);    if (repeatable != null) {      DiagnosticPosition cbPos=getDiagnosticPosition(tree,repeatable.type);      Assert.checkNonNull(cbPos);      chk.validateRepeatable(c,repeatable,cbPos);    }  } else {    chk.checkCompatibleSupertypes(tree.pos(),c.type);    if (allowDefaultMethods) {      chk.checkDefaultMethodClashes(tree.pos(),c.type);    }  }  chk.checkClassBounds(tree.pos(),c.type);  tree.type=c.type;  for (List<JCTypeParameter> l=tree.typarams; l.nonEmpty(); l=l.tail) {    Assert.checkNonNull(env.info.scope.lookup(l.head.name).scope);  }  if (!sourceLanguage.isCeylon() && !c.type.allparams().isEmpty() && types.isSubtype(c.type,syms.throwableType))   log.error(tree.extending.pos(),"generic.throwable");  chk.checkImplementations(tree);  checkAutoCloseable(tree.pos(),env,c.type);  for (List<JCTree> l=tree.defs; l.nonEmpty(); l=l.tail) {    attribStat(l.head,env);    if (c.owner.kind != PCK && ((c.flags() & STATIC) == 0 || c.name == names.empty) && (TreeInfo.flags(l.head) & (STATIC | INTERFACE)) != 0) {      Symbol sym=null;      if (l.head.hasTag(VARDEF))       sym=((JCVariableDecl)l.head).sym;      if (sym == null || sym.kind != VAR || ((VarSymbol)sym).getConstValue() == null)       log.error(l.head.pos(),"icls.cant.have.static.decl",c);    }  }  chk.checkCyclicConstructors(tree);  chk.checkNonCyclicElements(tree);  if (env.info.lint.isEnabled(LintCategory.SERIAL) && isSerializable(c.type) && (c.flags() & Flags.ENUM) == 0 && checkForSerial(c)) {    checkSerialVersionUID(tree,c);  }  if (allowTypeAnnos) {    typeAnnotations.organizeTypeAnnotationsBodies(tree);    validateTypeAnnotations(tree,false);  }}  }
class C{  public final void draw(Object object,Graphics2D graphics,DrawInfo2D info){  double diamx=info.draw.width * getSize();  double diamy=info.draw.height * getSize();  graphics.setColor(getColor());  graphics.fillOval((int)(info.draw.x - diamx / 2),(int)(info.draw.y - diamy / 2),(int)(diamx),(int)(diamy));}  }
class C{  @Override public boolean supportsMultipleOpenResults(){  debugCodeCall("supportsMultipleOpenResults");  return true;}  }
class C{  @LargeTest public void testTransitionAlphaBasic() throws Exception {  final String videoItemFilename1=INPUT_FILE_PATH + "H264_BP_640x480_30fps_256kbps_1_17.mp4";  final String maskFilename=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  boolean flagForException=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename1,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem1.setExtractBoundaries(0,15000);  final MediaImageItem mediaImageItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m2",maskFilename,10000,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaImageItem.setDuration(15000);  mVideoEditor.addMediaItem(mediaVideoItem1);  mVideoEditor.addMediaItem(mediaImageItem);  final TransitionAlpha transition1And2=mVideoEditorHelper.createTAlpha("transition1And2",mediaVideoItem1,mediaImageItem,3000,Transition.BEHAVIOR_SPEED_UP,maskFilename,10,false);  mVideoEditor.addTransition(transition1And2);  assertTrue("Transition maskFile",transition1And2.getMaskFilename().equals(maskFilename));  assertEquals("Transition BlendingPercent",10,transition1And2.getBlendingPercent());  assertFalse("Transition Invert",transition1And2.isInvert());}  }
class C{  public SVGLinearGradientElementBridge(){}  }
class C{  public void done(){  m_initialized=false;  m_fieldsMap=null;}  }
class C{  public static String signatureAlgorithm(String algorithm){  int index=algorithm.indexOf('_');  if (index == -1) {    return algorithm;  }  return algorithm.substring(index + 1,algorithm.length());}  }
class C{  public Path[] generate(Path dbDir,Path segments,int numLists,long topN,long curTime,boolean filter,boolean force) throws IOException {  return generate(dbDir,segments,numLists,topN,curTime,filter,true,force,1);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static void println(float x){  out.println(x);}  }
class C{  public synchronized String engineGetCertificateAlias(Certificate cert){  token.ensureValid();  Enumeration<String> e=engineAliases();  while (e.hasMoreElements()) {    String alias=e.nextElement();    Certificate tokenCert=engineGetCertificate(alias);    if (tokenCert != null && tokenCert.equals(cert)) {      return alias;    }  }  return null;}  }
class C{  public AccessDescription(ASN1ObjectIdentifier oid,GeneralName location){  accessMethod=oid;  accessLocation=location;}  }
class C{  private static void escape(StringBuffer s,char c){  s.append('%');  s.append(Character.forDigit((c >> 4) & 0xF,16));  s.append(Character.forDigit(c & 0xF,16));}  }
class C{  public ToHitData(){  super();}  }
class C{  public void runFromConfig(ServerConfig config) throws IOException {  log.info("Starting server");  try {    System.setProperty("zookeeper.authProvider.1","org.apache.zookeeper.server.auth.SASLAuthenticationProvider");    FileTxnSnapLog ftxn=new FileTxnSnapLog(new File(config.getDataLogDir()),new File(config.getDataDir()));    zooKeeperServer=new ZooKeeperServer(ftxn,config.getTickTime(),config.getMinSessionTimeout(),config.getMaxSessionTimeout(),null,new TestZKDatabase(ftxn,limiter));    cnxnFactory=new TestServerCnxnFactory(limiter);    cnxnFactory.configure(config.getClientPortAddress(),config.getMaxClientCnxns());    cnxnFactory.startup(zooKeeperServer);    cnxnFactory.join();    zkServer.shutdown();    if (violationReportAction != LimitViolationAction.IGNORE) {      String limitViolations=limiter.reportLimitViolations();      if (!limitViolations.isEmpty()) {        log.warn("Watch limit violations: {}",limitViolations);        if (violationReportAction == LimitViolationAction.FAIL) {          throw new AssertionError("Parallel watch limits violated");        }      }    }  } catch (  InterruptedException e) {    log.warn("Server interrupted",e);  }}  }
class C{  BitMatrix buildFunctionPattern(){  int dimension=getDimensionForVersion();  BitMatrix bitMatrix=new BitMatrix(dimension);  bitMatrix.setRegion(0,0,9,9);  bitMatrix.setRegion(dimension - 8,0,8,9);  bitMatrix.setRegion(0,dimension - 8,9,8);  int max=alignmentPatternCenters.length;  for (int x=0; x < max; x++) {    int i=alignmentPatternCenters[x] - 2;    for (int y=0; y < max; y++) {      if ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0)) {        continue;      }      bitMatrix.setRegion(alignmentPatternCenters[y] - 2,i,5,5);    }  }  bitMatrix.setRegion(6,9,1,dimension - 17);  bitMatrix.setRegion(9,6,dimension - 17,1);  if (versionNumber > 6) {    bitMatrix.setRegion(dimension - 11,0,3,6);    bitMatrix.setRegion(0,dimension - 11,6,3);  }  return bitMatrix;}  }
class C{  public Matrix4x3f reflection(float nx,float ny,float nz,float px,float py,float pz){  float invLength=1.0f / (float)Math.sqrt(nx * nx + ny * ny + nz * nz);  float nnx=nx * invLength;  float nny=ny * invLength;  float nnz=nz * invLength;  return reflection(nnx,nny,nnz,-nnx * px - nny * py - nnz * pz);}  }
class C{  public void testRecognizeFullCone() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  Response testIResponse2=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  responseServer.addMessage(testIResponse1);  responseServer.addMessage(testIResponse2);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.FULL_CONE_NAT);  expectedReturn.setPublicAddress(mappedClientAddress);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  @Override public MarginalDistribution copy(){  return new MarginalDistribution(condDistrib.copy(),uncondDistrib.copy());}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public SummaryRanges(){  list=new LinkedList<>();}  }
class C{  public Element store(Object o){  Element conditionals=new Element("conditionals");  setStoreElementClass(conditionals);  ConditionalManager tm=(ConditionalManager)o;  if (tm != null) {    java.util.Iterator<String> iter=tm.getSystemNameList().iterator();    if (!iter.hasNext()) {      return null;    }    while (iter.hasNext()) {      String sname=iter.next();      if (sname == null) {        log.error("System name null during store");      }      log.debug("conditional system name is " + sname);      Conditional c=tm.getBySystemName(sname);      Element elem=new Element("conditional").setAttribute("systemName",sname);      elem.addContent(new Element("systemName").addContent(sname));      storeCommon(c,elem);      elem.setAttribute("antecedent",c.getAntecedentExpression());      elem.setAttribute("logicType",Integer.toString(c.getLogicType()));      if (c.getTriggerOnChange()) {        elem.setAttribute("triggerOnChange","yes");      } else {        elem.setAttribute("triggerOnChange","no");      }      List<ConditionalVariable> variableList=((jmri.implementation.DefaultConditional)c).getStateVariableList();      for (int k=0; k < variableList.size(); k++) {        ConditionalVariable variable=variableList.get(k);        Element vElem=new Element("conditionalStateVariable");        int oper=variable.getOpern();        if (oper == Conditional.OPERATOR_AND && variable.isNegated()) {          oper=Conditional.OPERATOR_AND_NOT;        } else         if (oper == Conditional.OPERATOR_NONE && variable.isNegated()) {          oper=Conditional.OPERATOR_NOT;        }        vElem.setAttribute("operator",Integer.toString(oper));        if (variable.isNegated()) {          vElem.setAttribute("negated","yes");        } else {          vElem.setAttribute("negated","no");        }        vElem.setAttribute("type",Integer.toString(variable.getType()));        vElem.setAttribute("systemName",variable.getName());        vElem.setAttribute("dataString",variable.getDataString());        vElem.setAttribute("num1",Integer.toString(variable.getNum1()));        vElem.setAttribute("num2",Integer.toString(variable.getNum2()));        if (variable.doTriggerActions()) {          vElem.setAttribute("triggersCalc","yes");        } else {          vElem.setAttribute("triggersCalc","no");        }        elem.addContent(vElem);      }      ArrayList<ConditionalAction> actionList=c.getCopyOfActions();      for (int k=0; k < actionList.size(); k++) {        ConditionalAction action=actionList.get(k);        Element aElem=new Element("conditionalAction");        aElem.setAttribute("option",Integer.toString(action.getOption()));        aElem.setAttribute("type",Integer.toString(action.getType()));        aElem.setAttribute("systemName",action.getDeviceName());        aElem.setAttribute("data",Integer.toString(action.getActionData()));        try {          Integer.parseInt(action.getActionString());          aElem.setAttribute("delay",action.getActionString());        } catch (        NumberFormatException nfe) {          aElem.setAttribute("delay","0");        }        aElem.setAttribute("string",action.getActionString());        elem.addContent(aElem);      }      conditionals.addContent(elem);    }  }  return (conditionals);}  }
class C{  void fireModifyListeners(){  for (  final ModifyListener listener : this.modifyListeners) {    final Event e=new Event();    e.widget=this;    final ModifyEvent modifyEvent=new ModifyEvent(e);    listener.modifyText(modifyEvent);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long q=((Number)stack.pop()).longValue();  Agent a=(Agent)stack.pop();  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr()))   Carny.getInstance().setStartPadding(a,q);  return null;}  }
class C{  public String toString(){  return typeString;}  }
class C{  @Override public void failure(int requestId,int errorCode,String message){}  }
class C{  public JForcePanel(ForceSimulator fsim){  this.fsim=fsim;  this.setBackground(Color.WHITE);  initUI();}  }
class C{  private void checkThinEnabledResult(VPlexVirtualVolumeInfo info,boolean thinEnabled,String taskId){  if (thinEnabled && (null != info) && !info.isThinEnabled()) {    _log.warn(String.format("Virtual Volume %s was created from a thin virtual pool, but it could not be created " + "as a thin virtual volume due to inadequate thin-capability of a child component. See controllersvc " + "and VPLEX API logs for further details. Task ID: %s",info.getName(),taskId));  }}  }
class C{  public ObjectName(String name) throws MalformedObjectNameException {  construct(name);}  }
class C{  protected void startSpin(){  if (!spinning) {    spinLimiter.release();    spinning=true;  }}  }
class C{  public XObject operate(XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(-right.num());}  }
class C{  public static void fadeOut(View v){  if (v == null)   return;  v.startAnimation(fadeOutAnimation(500,v));}  }
class C{  public boolean isDerivedFrom(String ns,String name,int method){  return false;}  }
class C{  public String fieldSeparatorTipText(){  return "The character to use as separator for the columns/fields (use '\\t' for TAB).";}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mFinished=false;  mDuration=duration;  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  mFinalX=startX + dx;  mFinalY=startY + dy;  mDeltaX=dx;  mDeltaY=dy;  mDurationReciprocal=1.0f / (float)mDuration;}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  public FolderTokenMultFld findByName(String fldName) throws Exception {  int i;  FolderTokenMultFld fld=null;  boolean find=false;  for (i=0; i < count(); i++) {    fld=get(i);    if (fld.getName().equals(fldName)) {      find=true;      break;    }  }  if (!find) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  return fld;}  }
class C{  private CopycatClient createClient(RecoveryStrategy strategy) throws Throwable {  CopycatClient client=CopycatClient.builder().withTransport(new LocalTransport(registry)).withConnectionStrategy(ConnectionStrategies.FIBONACCI_BACKOFF).withRecoveryStrategy(strategy).build();  client.serializer().disableWhitelist();  client.connect(members.stream().map(null).collect(Collectors.toList())).thenRun(null);  await(30000);  clients.add(client);  return client;}  }
class C{  public UnableToInterruptJobException(String msg){  super(msg);}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeInt(mImageSharing ? 1 : 0);  dest.writeInt(mVideoSharing ? 1 : 0);  dest.writeInt(mImSession ? 1 : 0);  dest.writeInt(mFileTransfer ? 1 : 0);  if (mExtensions != null) {    dest.writeInt(1);    List<String> exts=new ArrayList<String>(mExtensions);    dest.writeStringList(exts);  } else {    dest.writeInt(0);  }  dest.writeInt(mGeolocPush ? 1 : 0);  dest.writeInt(mAutomata ? 1 : 0);  dest.writeLong(mTimestamp);}  }
class C{  public float dot(Vector3 that){  return Vector3.dot(this,that);}  }
class C{  private void xPlacer(int start){  Node r;  Edge e;  if (m_groupNum > 0) {    m_groups[0].m_p.setCenter(0);    for (int noa=start; noa < m_groupNum; noa++) {      int nob, alter=0;      double c=m_groups[noa].m_gap;      r=m_groups[noa].m_p;      for (nob=0; (e=r.getChild(nob)) != null; nob++) {        if (e.getTarget().getParent(0) == e) {          e.getTarget().setCenter(nob * c);        } else {          alter++;        }      }      m_groups[noa].m_size=(nob - 1 - alter) * c;      xShift(noa);    }  }}  }
class C{  private void loadIncludedRoles(boolean reload){  loadChildRoles(reload);  loadSubstitutedRoles(reload);  if (this.m_parent == null) {    mergeAccesses(reload);  }}  }
class C{  public static ExecutorService newSingleThreadExecutor(boolean isDaemon){  return Executors.unconfigurableExecutorService(newFixedThreadPool(1,newNamedThreadFactory(isDaemon)));}  }
class C{  private void status(){  ps.println("# Status of this version:");  ps.println("#     OUTDATED: sorry, you have to redownload");  ps.println("#     UPDATE_NEEDED:   there is an update available");  ps.println("#     CURRENT:  good, we don't have to do anything at the moment");  writeKeysWithPrefix("version.","version.destination");}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  int index=getConstPool().copy(getConstantValue(),newCp,classnames);  return new ConstantAttribute(newCp,index);}  }
class C{  public static JSONArray toJSONArray(XMLTokener x) throws JSONException {  return (JSONArray)parse(x,true,null);}  }
class C{  public void draw(final Graphics g){  sprite.draw(g,x,y);}  }
class C{  public void loadFavoritesFromSettings(Settings settings){  List<List> entriesToLoad=settings.getList("favoriteEmotes");  favoritesNotFound.clear();  favorites.clear();  for (  List item : entriesToLoad) {    Favorite f=listToFavorite(item);    if (f != null) {      favoritesNotFound.put(f.code,f);    }  }  findFavorites();  loadedFavoritesFromSettings=true;}  }
class C{  private void runOnUiThread(Runnable runnable){  FragmentActivity fragmentActivity=getActivity();  if (fragmentActivity != null) {    fragmentActivity.runOnUiThread(runnable);  }}  }
class C{  public static void stopMethodTracing(){  if (isDebug) {    Debug.stopMethodTracing();  }}  }
class C{  public long memory(){  return buffer.elements().length;}  }
class C{  private void init(final AttributeSet attrs,final int defStyleAttr,final int defStyleRes){  final TypedArray attributes=getContext().obtainStyledAttributes(attrs,R.styleable.Dot,defStyleAttr,defStyleRes);  final int defaultActiveDiameterPx=DimensionHelper.dpToPx(getContext(),DEFAULT_ACTIVE_DIAMETER_DP);  final int defaultInactiveDiameterPx=DimensionHelper.dpToPx(getContext(),DEFAULT_INACTIVE_DIAMETER_DP);  inactiveDiameterPx=attributes.getDimensionPixelSize(R.styleable.Dot_inactiveDiameter,defaultInactiveDiameterPx);  activeDiameterPx=attributes.getDimensionPixelSize(R.styleable.Dot_activeDiameter,defaultActiveDiameterPx);  inactiveColor=attributes.getColor(R.styleable.Dot_inactiveColor,DEFAULT_INACTIVE_COLOR);  activeColor=attributes.getColor(R.styleable.Dot_activeColor,DEFAULT_ACTIVE_COLOR);  transitionDurationMs=attributes.getInt(R.styleable.Dot_transitionDuration,DEFAULT_TRANSITION_DURATION_MS);  state=attributes.getBoolean(R.styleable.Dot_initiallyActive,DEFAULT_INITIALLY_ACTIVE) ? State.ACTIVE : State.INACTIVE;  attributes.recycle();  reflectParametersInView();}  }
class C{  @Override public void doWork() throws OperatorException {  ExampleSet exampleSet=exampleSetInput.getData(ExampleSet.class);  if (exampleSet.getAttributes().getLabel() == null) {    throw new UserError(this,105,new Object[0]);  }  if (exampleSet.getAttributes().size() == 0) {    throw new UserError(this,106,new Object[0]);  }  CapabilityCheck check=new CapabilityCheck(this,Tools.booleanValue(ParameterService.getParameterValue(CapabilityProvider.PROPERTY_RAPIDMINER_GENERAL_CAPABILITIES_WARN),true));  check.checkLearnerCapabilities(this,exampleSet);  Model model=learn(exampleSet);  modelOutput.deliver(model);  exampleSetOutput.deliver(exampleSet);}  }
class C{  private void sendReplicasToPrimary(){  NodeProcess curPrimary=primary;  if (curPrimary != null) {    List<NodeProcess> replicas=new ArrayList<>();    for (    NodeProcess node : nodes) {      if (node != null && node.isPrimary == false) {        replicas.add(node);      }    }    message("top: send " + replicas.size() + " replicas to primary");    try (Connection c=new Connection(curPrimary.tcpPort)){      c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);      c.out.writeVInt(replicas.size());      for (      NodeProcess replica : replicas) {        c.out.writeVInt(replica.id);        c.out.writeVInt(replica.tcpPort);      }      c.flush();      c.in.readByte();    } catch (    Throwable t) {      message("top: ignore exc sending replicas to primary P" + curPrimary.id + " at tcpPort="+ curPrimary.tcpPort);      t.printStackTrace(System.out);    }  }}  }
class C{  public boolean tryAcquire(Object topicObject,long timeout,TimeUnit unit) throws InterruptedException {  throw new UnsupportedOperationException(LocalizedStrings.Collaboration_NOT_IMPLEMENTED.toLocalizedString());}  }
class C{  public String build(){  String url=DiscordEndpoints.AUTHORIZE + "?client_id=%s&scope=bot";  if (permissions != null)   url+="&permissions=" + Permissions.generatePermissionsNumber(permissions);  if (guild != null)   url+="&guild_id=" + guild.getID();  try {    return String.format(url,clientIDOverride == null ? client.getApplicationClientID() : clientIDOverride);  } catch (  DiscordException e) {    Discord4J.LOGGER.error(LogMarkers.UTIL,"Discord4J Internal Exception",e);  }  return null;}  }
class C{  public static void adjustColumnPreferredWidths(JTable table,int margin){  TableColumnModel columnModel=table.getColumnModel();  for (int col=0; col < table.getColumnCount(); col++) {    int maxwidth=0;    TableCellRenderer rend=columnModel.getColumn(col).getHeaderRenderer();    Object value=columnModel.getColumn(col).getHeaderValue();    if (rend == null) {      rend=table.getTableHeader().getDefaultRenderer();    }    Component comp=rend.getTableCellRendererComponent(table,value,false,false,-1,col);    maxwidth=Math.max(comp.getPreferredSize().width + 2 * margin,maxwidth);    for (int row=0; row < table.getRowCount(); row++) {      rend=table.getCellRenderer(row,col);      value=table.getValueAt(row,col);      comp=rend.getTableCellRendererComponent(table,value,false,false,row,col);      maxwidth=Math.max(comp.getPreferredSize().width + margin,maxwidth);    }    TableColumn column=columnModel.getColumn(col);    column.setPreferredWidth(maxwidth);  }}  }
class C{  protected Deployable modifyManifestForClasspathEntries(Deployable originalDeployable) throws Exception {  InstalledLocalContainer container=(InstalledLocalContainer)getContainer();  Set<String> classpath=new TreeSet<String>();  if (container.getExtraClasspath() != null && container.getExtraClasspath().length != 0) {    for (    String classpathElement : container.getExtraClasspath()) {      String moduleName=getFileHandler().getName(classpathElement);      moduleName=moduleName.substring(0,moduleName.lastIndexOf('.'));      moduleName=moduleName.replace('.','-');      classpath.add(moduleName);    }  }  if (container.getSharedClasspath() != null && container.getSharedClasspath().length != 0) {    for (    String classpathElement : container.getSharedClasspath()) {      String moduleName=getFileHandler().getName(classpathElement);      moduleName=moduleName.substring(0,moduleName.lastIndexOf('.'));      moduleName=moduleName.replace('.','-');      classpath.add(moduleName);    }  }  if (classpath.isEmpty()) {    return originalDeployable;  }  if (classpath.size() > 0 && originalDeployable.isExpanded()) {    getLogger().warn("The extra classpath and shared classpath options are not" + " supported with expanded deployables on " + container.getId(),this.getClass().getName());    return originalDeployable;  }  String outputFile=getFileHandler().append(getContainer().getConfiguration().getHome(),"tmp/cargo");  getFileHandler().mkdirs(outputFile);  outputFile=getFileHandler().append(outputFile,getDeployableName(originalDeployable));  byte[] buf=new byte[1024];  ZipInputStream zin=new ZipInputStream(new FileInputStream(originalDeployable.getFile()));  try {    ZipOutputStream out=new ZipOutputStream(new FileOutputStream(outputFile));    try {      ZipEntry entry=zin.getNextEntry();      while (entry != null) {        String name=entry.getName();        if (name.equalsIgnoreCase("META-INF/MANIFEST.MF")) {          Manifest manifest=new Manifest(zin);          String dependencies=manifest.getMainAttributes().getValue("Dependencies");          if (dependencies == null) {            dependencies="";          }          for (          String classpathEntry : classpath) {            if (!dependencies.contains(classpathEntry)) {              if (!dependencies.isEmpty()) {                dependencies+=", ";              }              dependencies+="org.codehaus.cargo.classpath." + classpathEntry;            }          }          manifest.getMainAttributes().putValue("Dependencies",dependencies);          out.putNextEntry(new ZipEntry(name));          manifest.write(out);          out.closeEntry();        } else {          out.putNextEntry(new ZipEntry(name));          int len;          while ((len=zin.read(buf)) > 0) {            out.write(buf,0,len);          }        }        entry=zin.getNextEntry();      }    }  finally {      out.close();    }  }  finally {    zin.close();  }  return originalDeployable.getClass().getConstructor(String.class).newInstance(outputFile);}  }
class C{  public void fireSynapseRemoved(final Synapse deleted){  for (  SynapseListener listener : synapseListeners) {    listener.synapseRemoved(new NetworkEvent<Synapse>(this,deleted));  }}  }
class C{  private static int cumProd(int[] a){  int res=1;  for (int i=0; i < a.length; i++) {    res=res * a[i];  }  return res;}  }
class C{  public static int compileShader(@ShaderType final int shaderType,final String shaderSource){  int shaderHandle=GLES20.glCreateShader(shaderType);  if (shaderHandle != 0) {    GLES20.glShaderSource(shaderHandle,shaderSource);    GLES20.glCompileShader(shaderHandle);    final int[] compilationStatus=new int[1];    GLES20.glGetShaderiv(shaderHandle,GLES20.GL_COMPILE_STATUS,compilationStatus,0);    if (compilationStatus[0] == 0) {      Timber.e("Error compiling shader %s",GLES20.glGetShaderInfoLog(shaderHandle));      GLES20.glDeleteShader(shaderHandle);      shaderHandle=0;    }  }  if (shaderHandle == 0) {    throw new RuntimeException("Error creating shader.");  }  return shaderHandle;}  }
class C{  @Override protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container){  dispatchThawSelfOnly(container);}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public static boolean isBase64(final String base64){  return isBase64(StringUtil.getBytesUTF8(base64));}  }
class C{  private void redrawTables(){  setRedraw(false);  redrawTable(itemsTable,false);  redrawTable(selectionTable,true);  setRedraw(true);  this.setBounds(getBounds());}  }
class C{  public static String toHex(byte[] data,int off,int end){  StringBuilder buf=new StringBuilder(data.length * 2);  if (end > data.length) {    end=data.length;  }  for (int i=off; i < end; i++) {    if (((int)data[i] & 0xff) < 0x10) {      buf.append("0");    }    buf.append(Long.toString((int)data[i] & 0xff,16).toUpperCase());    if (i < end - 1) {      buf.append(" ");    }  }  return buf.toString();}  }
class C{  public static boolean isValidName(String name){  if (name == null || name.length() == 0)   return false;  CharacterIterator iter=new StringCharacterIterator(name);  char c=iter.first();  if (!isValidNameStart(c))   return false;  while (c != CharacterIterator.DONE) {    if (!isValidName(c))     return false;    c=iter.next();  }  return true;}  }
class C{  public static void main(String[] argv){  try {    PvXMLHandler handler=new PvXMLHandler();    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser saxParser=factory.newSAXParser();    saxParser.parse(new FileInputStream(argv[0]),handler);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void actionPerformed(ActionEvent event){  if ("fileGameSave".equalsIgnoreCase(event.getActionCommand())) {    ignoreHotKeys=true;    JFileChooser fc=new JFileChooser("./savegames");    fc.setLocation(frame.getLocation().x + 150,frame.getLocation().y + 100);    fc.setDialogTitle(Messages.getString("ClientGUI.FileSaveDialog.title"));    int returnVal=fc.showSaveDialog(frame);    if ((returnVal != JFileChooser.APPROVE_OPTION) || (fc.getSelectedFile() == null)) {      return;    }    if (fc.getSelectedFile() != null) {      String file=fc.getSelectedFile().getName();      String path=fc.getSelectedFile().getParentFile().getPath();      path=path.replace(" ","|");      client.sendChat("/localsave " + file + " "+ path);    }    ignoreHotKeys=false;  }  if ("fileGameSaveServer".equalsIgnoreCase(event.getActionCommand())) {    ignoreHotKeys=true;    String filename=(String)JOptionPane.showInputDialog(frame,Messages.getString("ClientGUI.FileSaveServerDialog.message"),Messages.getString("ClientGUI.FileSaveServerDialog.title"),JOptionPane.QUESTION_MESSAGE,null,null,"savegame.sav");    if (filename != null) {      client.sendChat("/save " + filename);    }    ignoreHotKeys=false;  }  if ("helpAbout".equalsIgnoreCase(event.getActionCommand())) {    showAbout();  }  if ("helpSkinning".equalsIgnoreCase(event.getActionCommand())) {    showSkinningHowTo();  }  if ("helpContents".equalsIgnoreCase(event.getActionCommand())) {    showHelp();  }  if ("fileUnitsSave".equalsIgnoreCase(event.getActionCommand())) {    ignoreHotKeys=true;    doSaveUnit();    ignoreHotKeys=false;  }  if ("fileUnitsOpen".equalsIgnoreCase(event.getActionCommand())) {    ignoreHotKeys=true;    loadListFile();    ignoreHotKeys=false;  }  if ("fileUnitsClear".equalsIgnoreCase(event.getActionCommand())) {    deleteAllUnits(client);  }  if ("fileUnitsReinforce".equalsIgnoreCase(event.getActionCommand())) {    ignoreHotKeys=true;    loadListFile(client.getLocalPlayer(),true);    ignoreHotKeys=false;  }  if ("fileUnitsReinforceRAT".equalsIgnoreCase(event.getActionCommand())) {    ignoreHotKeys=true;    if (client.getLocalPlayer().getTeam() == IPlayer.TEAM_UNASSIGNED) {      String title=Messages.getString("ClientGUI.openUnitListFileDialog.noReinforceTitle");      String msg=Messages.getString("ClientGUI.openUnitListFileDialog.noReinforceMessage");      JOptionPane.showMessageDialog(frame,msg,title,JOptionPane.OK_OPTION,null);      return;    }    getRandomArmyDialog().setVisible(true);    ignoreHotKeys=false;  }  if ("viewClientSettings".equalsIgnoreCase(event.getActionCommand())) {    showSettings();  }  if ("viewGameOptions".equalsIgnoreCase(event.getActionCommand())) {    showOptions();  }  if ("viewPlayerSettings".equalsIgnoreCase(event.getActionCommand())) {    customizePlayer();  }  if ("viewPlayerList".equalsIgnoreCase(event.getActionCommand())) {    showPlayerList();  }  if ("viewRoundReport".equalsIgnoreCase(event.getActionCommand())) {    showRoundReport();  }  if ("fileBoardSave".equalsIgnoreCase(event.getActionCommand())) {    ignoreHotKeys=true;    boardSave();    ignoreHotKeys=false;  } else   if ("fileBoardSaveAs".equalsIgnoreCase(event.getActionCommand())) {    ignoreHotKeys=true;    boardSaveAs();    ignoreHotKeys=false;  } else   if ("fileBoardSaveAsImage".equalsIgnoreCase(event.getActionCommand())) {    ignoreHotKeys=true;    boardSaveAsImage();    ignoreHotKeys=false;  }  if ("replacePlayer".equalsIgnoreCase(event.getActionCommand())) {    replacePlayer();  }  if (event.getActionCommand().equals(VIEW_MEK_DISPLAY)) {    toggleDisplay();  } else   if (event.getActionCommand().equals(VIEW_MINI_MAP)) {    toggleMap();  } else   if (event.getActionCommand().equals(VIEW_UNIT_OVERVIEW)) {    toggleUnitOverview();  } else   if (event.getActionCommand().equals(VIEW_LOS_SETTING)) {    showLOSSettingDialog();  } else   if (event.getActionCommand().equals(VIEW_ZOOM_IN)) {    bv.zoomIn();  } else   if (event.getActionCommand().equals(VIEW_ZOOM_OUT)) {    bv.zoomOut();  } else   if (event.getActionCommand().equals(VIEW_TOGGLE_ISOMETRIC)) {    GUIPreferences.getInstance().setIsometricEnabled(bv.toggleIsometric());  } else   if (event.getActionCommand().equals(VIEW_TOGGLE_FOV_HIGHLIGHT)) {    GUIPreferences.getInstance().setFovHighlight(!GUIPreferences.getInstance().getFovHighlight());    bv.refreshDisplayables();    if (client.getGame().getPhase() == Phase.PHASE_MOVEMENT) {      bv.clearHexImageCache();    }  } else   if (event.getActionCommand().equals(VIEW_TOGGLE_FIELD_OF_FIRE)) {    GUIPreferences.getInstance().setShowFieldOfFire(!GUIPreferences.getInstance().getShowFieldOfFire());    bv.repaint();  } else   if (event.getActionCommand().equals(VIEW_TOGGLE_FOV_DARKEN)) {    GUIPreferences.getInstance().setFovDarken(!GUIPreferences.getInstance().getFovDarken());    bv.refreshDisplayables();    if (client.getGame().getPhase() == Phase.PHASE_MOVEMENT) {      bv.clearHexImageCache();    }  } else   if (event.getActionCommand().equals(VIEW_TOGGLE_FIRING_SOLUTIONS)) {    GUIPreferences.getInstance().setFiringSolutions(!GUIPreferences.getInstance().getFiringSolutions());    if (!GUIPreferences.getInstance().getFiringSolutions()) {      bv.clearFiringSolutionData();    } else {      if (curPanel instanceof FiringDisplay) {        ((FiringDisplay)curPanel).setFiringSolutions();      }    }    bv.refreshDisplayables();  } else   if (event.getActionCommand().equals(VIEW_MOVE_ENV)) {    if (curPanel instanceof MovementDisplay) {      GUIPreferences.getInstance().setMoveEnvelope(!GUIPreferences.getInstance().getMoveEnvelope());      ((MovementDisplay)curPanel).computeMovementEnvelope(mechD.getCurrentEntity());    }  } else   if (event.getActionCommand().equals(VIEW_MOVE_MOD_ENV)) {    if (curPanel instanceof MovementDisplay) {      ((MovementDisplay)curPanel).computeModifierEnvelope();    }  } else   if (event.getActionCommand().equals(VIEW_CHANGE_THEME)) {    bv.changeTheme();  } else   if (event.getActionCommand().equals(SAVE_WEAP_ORDER)) {    Entity ent=mechD.getCurrentEntity();    if (ent != null) {      WeaponOrderHandler.setWeaponOrder(ent.getChassis(),ent.getModel(),ent.getWeaponSortOrder(),ent.getCustomWeaponOrder());      getMenuBar().updateSaveWeaponOrderMenuItem();      client.sendEntityWeaponOrderUpdate(ent);    }  }}  }
class C{  protected Node newNode(){  return new SVGOMAltGlyphDefElement();}  }
class C{  private void persistAuditEntity(List<? extends TaggedLogAPIEntity> entityList){  try {    if (null != entityList && 0 != entityList.size()) {      CreateStatement createStatement=new CreateStatement(entityList,AUDIT_SERVICE_ENDPOINT);      createStatement.execute(DataStorageManager.newDataStorage("hbase"));    }  } catch (  IOException|IllegalDataStorageTypeException exception) {    LOG.error("exception in auditing storage event",exception.getMessage());  }}  }
class C{  public void addColumn(Object columnName){  addColumn(columnName,(Vector)null);}  }
class C{  public static MatrixBlock rexpand(MatrixBlock in,MatrixBlock ret,double max,boolean rows,boolean cast,boolean ignore) throws DMLRuntimeException {  int lmax=(int)UtilFunctions.toLong(max);  if (!ignore && in.getNonZeros() < in.getNumRows())   throw new DMLRuntimeException("Invalid input w/ zeros for rexpand ignore=false " + "(rlen=" + in.getNumRows() + ", nnz="+ in.getNonZeros()+ ").");  if (in.isEmptyBlock(false)) {    if (rows)     ret.reset(lmax,in.rlen,true); else     ret.reset(in.rlen,lmax,true);    return ret;  }  if (rows)   return rexpandRows(in,ret,lmax,cast,ignore); else   return rexpandColumns(in,ret,lmax,cast,ignore);}  }
class C{  public boolean hasCurrentURL(){  return currentIndex >= 0;}  }
class C{  public IvfWriter(OutputStream outputStream,int width,int height,int scale,int rate) throws IOException {  mOutputStream=outputStream;  mWidth=width;  mHeight=height;  mScale=scale;  mRate=rate;  mFrameCount=0;}  }
class C{  protected void waitForThreadOwnedOrderedConnectionState(DistributedMember member,Map connectionStates) throws InterruptedException {  if (Thread.interrupted())   throw new InterruptedException();  List r=null;synchronized (receivers) {    r=new ArrayList(receivers);  }  for (Iterator it=r.iterator(); it.hasNext(); ) {    Connection con=(Connection)it.next();    if (!con.stopped && !con.isClosing() && !con.getOriginatedHere()&& con.getPreserveOrder()&& member.equals(con.getRemoteAddress())) {      Long state=(Long)connectionStates.remove(Long.valueOf(con.getUniqueId()));      if (state != null) {        long count=state.longValue();        while (!con.stopped && !con.isClosing() && con.getMessagesReceived() < count) {          if (logger.isDebugEnabled()) {            logger.debug("Waiting for connection {}/{} currently={} need={}",con.getRemoteAddress(),con.getUniqueId(),con.getMessagesReceived(),count);          }          Thread.sleep(100);        }      }    }  }  if (connectionStates.size() > 0) {    if (logger.isDebugEnabled()) {      StringBuffer sb=new StringBuffer(1000);      sb.append("These connections from ");      sb.append(member);      sb.append("could not be located during waitForThreadOwnedOrderedConnectionState: ");      for (Iterator it=connectionStates.entrySet().iterator(); it.hasNext(); ) {        Map.Entry entry=(Map.Entry)it.next();        sb.append(entry.getKey()).append('(').append(entry.getValue()).append(')');        if (it.hasNext()) {          sb.append(',');        }      }      logger.debug(sb);    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.SINGLE_IS_A__EXTENDS_NAME_1:    setExtendsName_1(EXTENDS_NAME_1_EDEFAULT);  return;case UmplePackage.SINGLE_IS_A__ANONYMOUS_SINGLE_IS_A11:getAnonymous_singleIsA_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  public synchronized boolean isPressed(){  return this.pressed;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public StateData(Object parent,Object region,S state,boolean initial){  this(parent,region,state,null,null,null,initial);}  }
class C{  public void testBug3520() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS t");    this.stmt.executeUpdate("CREATE TABLE t (s1 int,primary key (s1))");    this.stmt.executeUpdate("INSERT INTO t VALUES (1)");    this.stmt.executeUpdate("INSERT INTO t VALUES (1)");  } catch (  SQLException sqlEx) {    System.out.println(sqlEx.getSQLState());  } finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS t");  }}  }
class C{  public static <T>String join(String glue,Collection<T> items){  final StringBuilder sb=new StringBuilder();  String join="";  for (  final T item : items) {    sb.append(join);    join=glue;    sb.append(item.toString());  }  return sb.toString();}  }
class C{  protected void beforeInsertDummies(int index,int length){  if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  if (length > 0) {    ensureCapacity(size + length);    System.arraycopy(elements,index,elements,index + length,size - index);    size+=length;  }}  }
class C{  public static Object selectMethod(MutableCallSite callSite,Class sender,String methodName,int callID,Boolean safeNavigation,Boolean thisCall,Boolean spreadCall,Object dummyReceiver,Object[] arguments) throws Throwable {  Selector selector=Selector.getSelector(callSite,sender,methodName,callID,safeNavigation,thisCall,spreadCall,arguments);  selector.setCallSiteTarget();  MethodHandle call=selector.handle.asSpreader(Object[].class,arguments.length);  call=call.asType(MethodType.methodType(Object.class,Object[].class));  return call.invokeExact(arguments);}  }
class C{  public void migrate(){  if (this.sharedPreferences.contains(PrefKeys.ScreenAlwaysOn.getKey())) {    String screenAlwaysOn=this.sharedPreferences.getString(PrefKeys.ScreenAlwaysOn.getKey(),null);    remove(PrefKeys.ScreenAlwaysOn);    set(PrefKeys.ScreenAlwaysOn,screenAlwaysOn != null && screenAlwaysOn.equals("true"));  }  if (this.sharedPreferences.contains(PrefKeys.AutoRefresh.getKey())) {    String autoRefresh=this.sharedPreferences.getString(PrefKeys.AutoRefresh.getKey(),null);    remove(PrefKeys.AutoRefresh);    set(PrefKeys.AutoRefresh,autoRefresh != null && autoRefresh.equals("true"));  }  if (this.sharedPreferences.contains(PrefKeys.GraphsZoom.getKey())) {    String graphsZoom=this.sharedPreferences.getString(PrefKeys.GraphsZoom.getKey(),null);    remove(PrefKeys.GraphsZoom);    set(PrefKeys.GraphsZoom,graphsZoom == null || graphsZoom.equals("true"));  }  if (this.sharedPreferences.contains(PrefKeys.HDGraphs.getKey())) {    String hdGraphs=this.sharedPreferences.getString(PrefKeys.HDGraphs.getKey(),null);    remove(PrefKeys.HDGraphs);    set(PrefKeys.HDGraphs,hdGraphs != null && hdGraphs.equals("true"));  }  if (this.sharedPreferences.contains(PrefKeys.DisableChromecast.getKey())) {    String disableChromecast=this.sharedPreferences.getString(PrefKeys.DisableChromecast.getKey(),null);    remove(PrefKeys.DisableChromecast);    set(PrefKeys.DisableChromecast,disableChromecast != null && disableChromecast.equals("true"));  }  if (this.sharedPreferences.contains(PrefKeys.DefaultActivity_GridId.getKey())) {    String activity_grid=this.sharedPreferences.getString(PrefKeys.DefaultActivity_GridId.getKey(),null);    remove(PrefKeys.DefaultActivity_GridId);    if (activity_grid != null && !activity_grid.equals(""))     set(PrefKeys.DefaultActivity_GridId,Integer.parseInt(activity_grid));  }  if (this.sharedPreferences.contains(PrefKeys.DefaultActivity_LabelId.getKey())) {    String activity_label=this.sharedPreferences.getString(PrefKeys.DefaultActivity_LabelId.getKey(),null);    remove(PrefKeys.DefaultActivity_LabelId);    if (activity_label != null && !activity_label.equals(""))     set(PrefKeys.DefaultActivity_LabelId,Integer.parseInt(activity_label));  }  if (this.sharedPreferences.contains(PrefKeys.I18NDialogShown.getKey())) {    String i18NDialogShown=getString(PrefKeys.I18NDialogShown);    remove(PrefKeys.I18NDialogShown);    if (i18NDialogShown != null && !i18NDialogShown.equals(""))     set(PrefKeys.I18NDialogShown,i18NDialogShown.equals("true"));  }  if (this.sharedPreferences.contains(PrefKeys.Notifs_Poll_Vibrate.getKey())) {    String vibrate=this.sharedPreferences.getString(PrefKeys.Notifs_Poll_Vibrate.getKey(),null);    remove(PrefKeys.Notifs_Poll_Vibrate);    set(PrefKeys.Notifs_Poll_Vibrate,vibrate == null || vibrate.equals("true"));  }  if (this.sharedPreferences.contains(PrefKeys.Notifs_Poll.getKey())) {    String notifications=this.sharedPreferences.getString(PrefKeys.Notifs_Poll.getKey(),null);    remove(PrefKeys.Notifs_Poll);    set(PrefKeys.Notifs_Poll,notifications != null && notifications.equals("true"));  }  if (this.sharedPreferences.contains(PrefKeys.Notifs_Poll_RefreshRate.getKey())) {    String refreshRate=this.sharedPreferences.getString(PrefKeys.Notifs_Poll_RefreshRate.getKey(),null);    remove(PrefKeys.Notifs_Poll_RefreshRate);    if (refreshRate != null && !refreshRate.equals(""))     set(PrefKeys.Notifs_Poll_RefreshRate,Integer.valueOf(refreshRate));  }  if (this.sharedPreferences.contains(PrefKeys.Notifs_Poll_WifiOnly.getKey())) {    String wifiOnly=this.sharedPreferences.getString(PrefKeys.Notifs_Poll_WifiOnly.getKey(),null);    remove(PrefKeys.Notifs_Poll_WifiOnly);    set(PrefKeys.Notifs_Poll_WifiOnly,wifiOnly != null && wifiOnly.equals("true"));  }  if (this.sharedPreferences.contains(PrefKeys.UserAgentChanged.getKey())) {    String userAgentChanged=this.sharedPreferences.getString(PrefKeys.UserAgentChanged.getKey(),null);    remove(PrefKeys.UserAgentChanged);    set(PrefKeys.UserAgentChanged,userAgentChanged != null && userAgentChanged.equals("true"));  }}  }
class C{  private void forceFlush(){  ((LocalRegion)region).getDiskRegion().flushForTesting();}  }
class C{  private String checkDependencies(ModuleDescriptor md,HashMap<String,ModuleDescriptor> modlist){  logger.debug("Checking dependencies of " + md.getId());  ModuleInterface[] requires=md.getRequires();  if (requires != null) {    for (    ModuleInterface req : requires) {      String res=checkOneDependency(md,req,modlist);      if (!res.isEmpty()) {        return res;      }    }  }  return "";}  }
class C{  public static boolean AM(int packedTime){  return packedTime < NOON;}  }
class C{  private void reset(){  mPixels=new byte[mDFTSize * mImageHeight];  mMemoryImageSource=new MemoryImageSource(mDFTSize,mImageHeight,mColorModel,mPixels,0,mDFTSize);  mMemoryImageSource.setAnimated(true);  mWaterfallImage=createImage(mMemoryImageSource);  repaint();}  }
class C{  private boolean checkForIncompleteMediaDatabase(String jpgFullFilePath,String why){  if (!MediaScanner.isNoMedia(jpgFullFilePath,MediaScanner.DEFAULT_SCAN_DEPTH)) {    File fileToLoad=(jpgFullFilePath != null) ? new File(jpgFullFilePath) : null;    if ((!this.mWaitingForMediaScannerResult) && (fileToLoad != null) && (fileToLoad.exists())&& (fileToLoad.canRead())) {      this.mWaitingForMediaScannerResult=true;      int numberOfNewItems=updateIncompleteMediaDatabase(mDebugPrefix,this,mDebugPrefix + "checkForIncompleteMediaDatabase-" + why,fileToLoad.getParentFile());      String message=getString(R.string.image_err_not_in_db_format,jpgFullFilePath,numberOfNewItems);      Toast.makeText(this,message,Toast.LENGTH_LONG).show();      return true;    }    this.mWaitingForMediaScannerResult=false;  }  return false;}  }
class C{  private void reloadKeysIfNeeded(){  long now=System.currentTimeMillis();  if (!_initialized || ((now - _lastUpdated.get()) / (1000 * 60 * 60) > _maxKeyStaleTimeInHrs)) {    try {      _log.info("Stale time reached, reloading keys");      loadKeys();      _log.info("Reloaded keys successfully");    } catch (    Exception e) {      _log.error("Could not reload the keys",e);    }  } else {    _log.debug("Reload not needed");  }  return;}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public void purgeDataRevision() throws LocalRepositoryException {  final String prefix="purgeDataRevision(): ";  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_PURGE_DATA_REVISION};  exec(prefix,cmd);  _log.info(prefix + " Success");}  }
class C{  private long map(long position,long len) throws RuntimeException {  int pagePosition=(int)(position % unsafe.pageSize());  long mapPosition=position - pagePosition;  long mapSize=len + pagePosition;  try {    Method method=FileChannelImpl.class.getDeclaredMethod("map0",int.class,long.class,long.class);    method.setAccessible(true);    long addr=(long)method.invoke(fileChannel_,1,mapPosition,mapSize);    return addr;  } catch (  Exception e) {    throw new RuntimeException(String.format("Encountered %s exception while mapping",e.getClass()));  }}  }
class C{  public int lastIndexOf(String subString,int start){  int count=length();  int subCount=subString.length();  if (subCount <= count && start >= 0) {    if (subCount > 0) {      if (start > count - subCount) {        start=count - subCount;      }      char[] target=subString.toCharArray();      int subOffset=0;      char firstChar=target[subOffset];      int end=subOffset + subCount;      while (true) {        int i=lastIndexOf(firstChar,start);        if (i == -1) {          return -1;        }        int o1=i, o2=subOffset;        while (++o2 < end && charAt(++o1) == target[o2]) {        }        if (o2 == end) {          return i;        }        start=i - 1;      }    }    return start < count ? start : count;  }  return -1;}  }
class C{  public void allowTypes(final Class<?>... types){  addPermission(new ExplicitTypePermission(types));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text terNode;  Text dayNode;  DocumentFragment docFrag;  Node retval;  Node firstChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  terNode=doc.createTextNode("ter");  dayNode=doc.createTextNode("day");  docFrag=doc.createDocumentFragment();  retval=docFrag.appendChild(terNode);  retval=docFrag.appendChild(dayNode);  firstChild=titleAttr.getFirstChild();  assertNotNull("attrChildNotNull",firstChild);  retval=titleAttr.replaceChild(docFrag,firstChild);  value=titleAttr.getValue();  assertEquals("attrValue","terday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","terday",value);  value=retval.getNodeValue();  assertEquals("retvalValue","Yes",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","ter",value);}  }
class C{  public Notify(IoBuffer data){  super(Type.STREAM_DATA);  this.data=data;}  }
class C{  public GoertzelFilter(int sampleRate,long targetFrequency,int blockSize,WindowType window){  mSampleRate=sampleRate;  mTargetFrequency=targetFrequency;  mBlockSize=blockSize;  mWindowCoefficients=Window.getWindow(window,blockSize);  init();}  }
class C{  @Override public String toString(){  if (isContinuous()) {    try {      return toContinuous().toString();    } catch (    RuntimeException e) {      log.fine("could not convert distribution to a continuous format: " + e);    }  }  return toDiscrete().toString();}  }
class C{  public static String implode(Object[] elements){  return implode(elements,", ");}  }
class C{  public void startElement(String arg0,String arg1,String arg2,Attributes arg3) throws SAXException {  if (m_state != null) {    m_state.resetState(getTransformer());  }  if (m_tracer != null)   super.fireStartElem(arg2);}  }
class C{  public void printLine() throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.printLine()");  writeLine();}  }
class C{  public KeyCrypterScrypt(ScryptParameters scryptParameters){  this.scryptParameters=checkNotNull(scryptParameters);  if (scryptParameters.getSalt() == null || scryptParameters.getSalt().toByteArray() == null || scryptParameters.getSalt().toByteArray().length == 0) {    log.warn("You are using a ScryptParameters with no salt. Your encryption may be vulnerable to a dictionary attack.");  }}  }
class C{  public final void listChannels(String parameters){  if (parameters == null) {    this.sendRawLine("LIST");  } else {    this.sendRawLine("LIST " + parameters);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.208 -0500",hash_original_method="BB45D33ED8970F46DE3174E9794A0506",hash_generated_method="16A2B4F8A647F49C8DEDFD1E178A7954") public void shutdownInput() throws IOException {  implCreateIfNeeded();  impl.shutdownInput();}  }
class C{  public static String toString(long[] v,int minw){  if (v == null) {    return "null";  }  int mag=magnitude(v);  mag=mag >= minw ? mag : minw;  if (mag == 0) {    return "0";  }  char[] digits=new char[mag];  int pos=mag - 1;  outer:   for (int w=0; w < v.length; w++) {    long f=1L;    for (int i=0; i < Long.SIZE; i++) {      digits[pos]=((v[w] & f) == 0) ? '0' : '1';      f<<=1;      --pos;      if (pos < 0) {        break outer;      }    }  }  for (; pos >= 0; --pos) {    digits[pos]='0';  }  return new String(digits);}  }
class C{  public IntroduceFactoryDescriptor(){  super(IJavaRefactorings.INTRODUCE_FACTORY);}  }
class C{  public void flush(){  if (this.size > 0) {    xList.setSize(this.size);    yList.setSize(this.size);    zList.setSize(this.size);    this.target.addAllOf(xList,yList,zList);    this.size=0;  }}  }
class C{  public void testAbnormalInvoke(){  testAbnormalInvoke(mainPool());}  }
class C{  public Instant start(){  return start;}  }
class C{  public void testLoadabilility(){  String serializableScope="target/classes/edu/cmu";  String currentDirectory="build/tetrad/serializable/model";  String archiveDirectory="archives";  TetradSerializableUtils utils=new TetradSerializableUtils(serializableScope,currentDirectory,archiveDirectory);  try {    utils.checkNestingOfFields();    utils.serializeCurrentDirectory();    utils.deserializeCurrentDirectory();    utils.deserializeArchivedVersions();  } catch (  RuntimeException e) {    System.out.println();    e.printStackTrace();    fail("TestSerialization.testLoadability() failed! Please fix " + "errors.");  }}  }
class C{  public String toString(){  return "[" + left + ","+ bottom+ " : "+ right+ ","+ top+ "]";}  }
class C{  public boolean addJournalStep(URI rpSystemId,List<VolumeDescriptor> volumeDescriptors,String taskId){  WorkflowStepCompleter.stepExecuting(taskId);  if (volumeDescriptors.isEmpty()) {    stepFailed(taskId,"addJournalStep");  }  ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,rpSystemId);  RecoverPointClient rp=RPHelper.getRecoverPointClient(rpSystem);  CGRequestParams cgParams=this.getCGRequestParams(volumeDescriptors,rpSystem);  updateCGParams(cgParams);  try {    rp.addJournalVolumesToCG(cgParams,volumeDescriptors.get(0).getCapabilitiesValues().getRPCopyType());    WorkflowStepCompleter.stepSucceded(taskId);  } catch (  Exception e) {    stepFailed(taskId,"addJournalStep");  }  return true;}  }
class C{  public java.util.Iterator<HDR> iterator(){  return this.hlist.listIterator();}  }
class C{  public static void closeCacheClientProxyAndVerifyStats(){  assertEquals("More than one BridgeServers found ",1,cache.getCacheServers().size());  CacheServerImpl bs=(CacheServerImpl)cache.getCacheServers().iterator().next();  assertNotNull(bs);  assertNotNull(bs.getAcceptor());  assertNotNull(bs.getAcceptor().getCacheClientNotifier());  Iterator proxies=bs.getAcceptor().getCacheClientNotifier().getClientProxies().iterator();  assertTrue("No proxy found",proxies.hasNext());  CacheClientProxy proxy=(CacheClientProxy)proxies.next();  Map dispatchedMsgMap=HARegionQueue.getDispatchedMessagesMapForTesting();  HARegionQueue rq=proxy.getHARegionQueue();  Object value=dispatchedMsgMap.get(rq.getRegion().getName());  proxy.close();  assertTrue("HARegionQueue stats were not closed on proxy.close()",rq.getStatistics().isClosed());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void compareMMMatrixWithJavaMatrix(String expectedFile,String actualDir,double epsilon){  try {    FileSystem fs=FileSystem.get(conf);    Path outDirectory=new Path(actualDir);    Path compareFile=new Path(expectedFile);    FSDataInputStream fsin=fs.open(compareFile);    BufferedReader compareIn=new BufferedReader(new InputStreamReader(fsin));    HashMap<CellIndex,Double> expectedValues=new HashMap<CellIndex,Double>();    String line=compareIn.readLine();    line=compareIn.readLine();    String[] expRcn=line.split(" ");    while ((line=compareIn.readLine()) != null) {      StringTokenizer st=new StringTokenizer(line," ");      int i=Integer.parseInt(st.nextToken());      int j=Integer.parseInt(st.nextToken());      double v=Double.parseDouble(st.nextToken());      expectedValues.put(new CellIndex(i,j),v);    }    compareIn.close();    HashMap<CellIndex,Double> actualValues=new HashMap<CellIndex,Double>();    FSDataInputStream fsout=fs.open(outDirectory);    BufferedReader outIn=new BufferedReader(new InputStreamReader(fsout));    line=outIn.readLine();    line=outIn.readLine();    String[] rcn=line.split(" ");    if (Integer.parseInt(expRcn[0]) != Integer.parseInt(rcn[0])) {      System.out.println(" Rows mismatch: expected " + Integer.parseInt(expRcn[0]) + ", actual "+ Integer.parseInt(rcn[0]));    } else     if (Integer.parseInt(expRcn[1]) != Integer.parseInt(rcn[1])) {      System.out.println(" Cols mismatch: expected " + Integer.parseInt(expRcn[1]) + ", actual "+ Integer.parseInt(rcn[1]));    } else     if (Integer.parseInt(expRcn[2]) != Integer.parseInt(rcn[2])) {      System.out.println(" Nnz mismatch: expected " + Integer.parseInt(expRcn[2]) + ", actual "+ Integer.parseInt(rcn[2]));    }    while ((line=outIn.readLine()) != null) {      StringTokenizer st=new StringTokenizer(line," ");      int i=Integer.parseInt(st.nextToken());      int j=Integer.parseInt(st.nextToken());      double v=Double.parseDouble(st.nextToken());      actualValues.put(new CellIndex(i,j),v);    }    int countErrors=0;    for (    CellIndex index : expectedValues.keySet()) {      Double expectedValue=expectedValues.get(index);      Double actualValue=actualValues.get(index);      if (expectedValue == null)       expectedValue=0.0;      if (actualValue == null)       actualValue=0.0;      if (!compareCellValue(expectedValue,actualValue,epsilon,false)) {        System.out.println(expectedFile + ": " + index+ " mismatch: expected "+ expectedValue+ ", actual "+ actualValue);        countErrors++;      }    }    assertTrue("for file " + actualDir + " "+ countErrors+ " values are not equal",countErrors == 0);  } catch (  IOException e) {    fail("unable to read file: " + e.getMessage());  }}  }
class C{  public StructSet(StructType structType){  this.contents=new ObjectOpenCustomHashSet(new ObjectArrayHashingStrategy());  if (structType == null) {    throw new IllegalArgumentException(LocalizedStrings.StructSet_STRUCTTYPE_MUST_NOT_BE_NULL.toLocalizedString());  }  this.structType=structType;}  }
class C{  public BundleException(String msg,int type,Throwable cause){  super(msg,cause);  this.type=type;}  }
class C{  private static void replaceInsn(BlockNode block,int i,InsnNode insn){  InsnNode prevInsn=block.getInstructions().get(i);  insn.copyAttributesFrom(prevInsn);  insn.setSourceLine(prevInsn.getSourceLine());  block.getInstructions().set(i,insn);}  }
class C{  private static boolean compareNumber(final String value,final int comparator,final Number attr){  if (attr instanceof Integer) {    final int intAttr=((Integer)attr).intValue();    final int intValue=Integer.parseInt(value);switch (comparator) {case GREATER:      return intAttr >= intValue;case LESS:    return intAttr <= intValue;default :  return intAttr == intValue;}} else if (attr instanceof Long) {final long longAttr=((Long)attr).longValue();final long longValue=Long.parseLong(value);switch (comparator) {case GREATER:return longAttr >= longValue;case LESS:return longAttr <= longValue;default :return longAttr == longValue;}} else if (attr instanceof Short) {final short shortAttr=((Short)attr).shortValue();final short shortValue=Short.parseShort(value);switch (comparator) {case GREATER:return shortAttr >= shortValue;case LESS:return shortAttr <= shortValue;default :return shortAttr == shortValue;}} else if (attr instanceof Double) {final double doubleAttr=((Double)attr).doubleValue();final double doubleValue=Double.parseDouble(value);switch (comparator) {case GREATER:return doubleAttr >= doubleValue;case LESS:return doubleAttr <= doubleValue;default :return doubleAttr == doubleValue;}} else if (attr instanceof Float) {final float floatAttr=((Float)attr).floatValue();final float floatValue=Float.parseFloat(value);switch (comparator) {case GREATER:return floatAttr >= floatValue;case LESS:return floatAttr <= floatValue;default :return floatAttr == floatValue;}} else if (attr instanceof Byte) {try {return compareTyped(Byte.decode(value),comparator,(Byte)attr);} catch (final Throwable t) {}}return compareReflective(value,comparator,attr);}  }
class C{  public static Iterable<File> applyCwd(File cwd,Iterable<File> files){  if (files != null) {    List<File> result=new ArrayList<File>();    for (    File f : files) {      result.add(applyCwd(cwd,f));    }    return result;  } else {    return null;  }}  }
class C{  public void fsyncSchedule(Result<Boolean> result){  fsyncImpl(result,FsyncType.SCHEDULE);}  }
class C{  public byte randomValueFromClosedInterval(byte min,byte max,MersenneTwisterFast random){  if (max - min < 0) {    byte l=0;    do     l=(byte)random.nextInt(); while (l < min || l > max);    return l;  } else   return (byte)(min + random.nextInt(max - min + 1));}  }
class C{  public static int hash(char value){  return (int)value;}  }
class C{  public static void currentTest(TestCase test){  currentTest=test;  ContractChecker.invalid.clear();}  }
class C{  public static Property parseAndWalkLaxToSimple(String property){  try {    return walk(parse(property),false);  } catch (  PropertyAccessException p) {    return new SimpleProperty(property);  }}  }
class C{  public static int round(double value){  int roundedValue=value > 0 ? (int)(value + 0.5) : -(int)(Math.abs(value) + 0.5);  return roundedValue;}  }
class C{  public PooledConnection acquire(Supplier<PooledConnection> supplier){  PooledConnection poll=queue.poll();  if (poll == null) {    poll=supplier.get();  }  acquiredConnections.add(poll);  if (isTerminating.get()) {    acquiredConnections.remove(poll);    poll.dispose();    throw new IllegalStateException("Pool has been closed, cannot acquire new values.");  }  return poll;}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  private <T extends DataObject>void cleanupFailure(List<TaskResourceRep> taskList,Collection<T> preparedObjects,String errorMsg,String taskId,ServiceCoded sc){  for (  TaskResourceRep taskResourceRep : taskList) {    taskResourceRep.setState(Operation.Status.error.name());    taskResourceRep.setMessage(errorMsg);    _dbClient.error(BlockSnapshotSession.class,taskResourceRep.getResource().getId(),taskId,sc);  }  if (!preparedObjects.isEmpty()) {    for (    DataObject object : preparedObjects) {      object.setInactive(true);    }    _dbClient.updateObject(preparedObjects);  }}  }
class C{  public boolean populateAnchoredChunks(){  return config.getBoolean(Key.POPULATE_ANCHORED_CHUNKS);}  }
class C{  public FileInputReader(File f) throws IOException {  if (Debug.debugging("binaryfile")) {    Debug.output("FileInputReader created from " + f.getAbsolutePath());  }  name=f.getName();  absolutePath=f.getAbsolutePath();  inputFile=init(f);}  }
class C{  public static boolean isInProcessMode(ProjectSystemId externalSystemId){  return Registry.is(externalSystemId.getId() + ExternalSystemConstants.USE_IN_PROCESS_COMMUNICATION_REGISTRY_KEY_SUFFIX,false);}  }
class C{  public void nodeLeft(GfManagerAgent source,GemFireVM vm){synchronized (this.membershipListenerLock) {    SystemMember member=AdminDistributedSystemImpl.this.removeSystemMember(vm.getId());    if (member == null) {      return;    }    SystemMembershipEvent event=new SystemMembershipEventImpl(vm.getId());    for (Iterator iter=this.membershipListeners.iterator(); iter.hasNext(); ) {      SystemMembershipListener listener=(SystemMembershipListener)iter.next();      listener.memberLeft(event);    }  }}  }
class C{  public String toString(){  return getDefaultValue().toString();}  }
class C{  public void ok(){  cancelClicked=false;  setVisible(false);}  }
class C{  @Override public Iterator iterator(){  return data.iterator();}  }
class C{  public T fetch(Object key){  return map(key).fetch(key);}  }
class C{  public void addCluster(URI id){  this.addedClusters.add(id);}  }
class C{  public FinalSolution(String solution){  super(solution);}  }
class C{  private void calculateExtensionPoints(Tuple<SignalPlan,DgSylviaSignalPlan> plans){  SignalPlan fixedTime=plans.getFirst();  DgSylviaSignalPlan sylvia=plans.getSecond();  int offset=0;  if (sylvia.getOffset() != null) {    offset=sylvia.getOffset();  }  int lastExtensionMoment=0;  for (  SignalGroupSettingsData settings : sylvia.getPlanData().getSignalGroupSettingsDataByGroupId().values()) {    Integer extensionMoment=(settings.getDropping() + offset) % sylvia.getCycleTime();    if (extensionMoment > lastExtensionMoment) {      lastExtensionMoment=extensionMoment;    }    DgExtensionPoint extPoint=null;    if (!this.extensionPointMap.containsKey(extensionMoment)) {      extPoint=new DgExtensionPoint(extensionMoment);      this.extensionPointMap.put(extensionMoment,extPoint);    }    extPoint=this.extensionPointMap.get(extensionMoment);    extPoint.addSignalGroupId(settings.getSignalGroupId());    SignalGroupSettingsData fixedTimeSettings=((DatabasedSignalPlan)fixedTime).getPlanData().getSignalGroupSettingsDataByGroupId().get(settings.getSignalGroupId());    int fixedTimeGreen=DgSignalsUtils.calculateGreenTimeSeconds(fixedTimeSettings,fixedTime.getCycleTime());    int maxGreen=(int)(fixedTimeGreen * this.sylviaConfig.getSignalGroupMaxGreenScale());    extPoint.setMaxGreenTime(settings.getSignalGroupId(),maxGreen);  }  if (this.sylviaConfig.isUseFixedTimeCycleAsMaximalExtension()) {    forcedExtensionPointMap.put(lastExtensionMoment,extensionPointMap.remove(lastExtensionMoment));  }}  }
class C{  protected EnumOption(OptionSet set,String name,String description,String[] values,String defaultValue){  super(set,ENUM_OPTION,name,description);  this.values=values;  this.value=this.defaultValue=findValue(defaultValue);}  }
class C{  public static void writeToFileReal_2D(String format,float[][] x,String filename){  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int i=0; i < x.length; i++) {      for (int j=0; j < x[0].length; j++) {        out.write(String.format(format,x[i][j]) + "\t");      }      out.newLine();    }    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public BST(E[] objects){  for (int i=0; i < objects.length; i++)   insert(objects[i]);}  }
class C{  public ExpansionModel(String name,Parameter N0Parameter,Parameter N1Parameter,Parameter growthRateParameter,Type units,boolean usingGrowthRate){  super(name);  expansion=new Expansion(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.N1Parameter=N1Parameter;  addVariable(N1Parameter);  N1Parameter.addBounds(new Parameter.DefaultBounds(1.0,0.0,1));  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.usingGrowthRate=usingGrowthRate;  setUnits(units);}  }
class C{  private void checkIsOpen() throws MqttPersistenceException {  if (clientDir == null) {    throw new MqttPersistenceException();  }}  }
class C{  public static void generate(){  v().runAlt();  if (Config.v().produceReports)   v().printReachableMethods();}  }
class C{  public RunningServiceInfo(Parcel in){  durationMillis=in.readLong();  serviceDetails=in.readString();}  }
class C{  public Builder heartbeatInterval(Duration heartbeatInterval){  this.heartbeatInterval=heartbeatInterval;  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader="";  int row, col;  double rowYCoord, value;  int progress=0;  double cellSizeX, cellSizeY;  int rows, topRow, bottomRow;  int cols;  int inputRow, inputCol;  double inputX, inputY;  double east;  double west;  double north;  double south;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part, numEdges;  int stCol, endCol;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime;  boolean foundIntersection;  ArrayList<Integer> edgeList=new ArrayList<>();  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  String[] inputFiles=inputFilesString.split(";");  int numFiles=inputFiles.length;  String clipFile=args[1];  boolean maintainInputDimensions=Boolean.parseBoolean(args[2]);  if (inputFilesString.isEmpty() || numFiles < 1) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    ShapeFile clip=new ShapeFile(clipFile);    BoundingBox clipBox=new BoundingBox();    clipBox.setMaxX(clip.getxMax());    clipBox.setMaxY(clip.getyMax());    clipBox.setMinX(clip.getxMin());    clipBox.setMinY(clip.getyMin());    if (clip.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input shapefile must be of a 'polygon' data type.");      return;    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : clip.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    for (int k=0; k < numFiles; k++) {      WhiteboxRaster input=new WhiteboxRaster(inputFiles[k],"r");      outputHeader=inputFiles[k].replace(".dep","_clipped.dep");      double noData=input.getNoDataValue();      DataType dataType=input.getDataType();      WhiteboxRaster output;      if (!maintainInputDimensions) {        cellSizeX=input.getCellSizeX();        cellSizeY=input.getCellSizeY();        north=clip.getyMax() + cellSizeY / 2.0;        if (input.getNorth() < north) {          north=input.getNorth();        }        south=clip.getyMin() - cellSizeY / 2.0;        if (input.getSouth() > south) {          south=input.getSouth();        }        east=clip.getxMax() + cellSizeX / 2.0;        if (input.getEast() < east) {          east=input.getEast();        }        west=clip.getxMin() - cellSizeX / 2.0;        if (input.getWest() > west) {          west=input.getWest();        }        rows=(int)(Math.ceil((north - south) / cellSizeY));        cols=(int)(Math.ceil((east - west) / cellSizeX));        east=west + cols * cellSizeX;        south=north - rows * cellSizeY;        output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,input.getDataScale(),dataType,noData,noData);      } else {        output=new WhiteboxRaster(outputHeader,"rw",inputFiles[k],dataType,noData);      }      output.setPreferredPalette(input.getPreferredPalette());      pq.clear();      RowPriorityGridCell cell;      int numRecords=clip.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=clip.getRecord(ri.recNumber - 1);        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          if (!partHoleData[part]) {            box=new BoundingBox();            startingPointInPart=partData[part];            if (part < numParts - 1) {              endingPointInPart=partData[part + 1];            } else {              endingPointInPart=numPoints;            }            for (i=startingPointInPart; i < endingPointInPart; i++) {              if (geometry[i][1] < box.getMinY()) {                box.setMinY(geometry[i][1]);              }              if (geometry[i][1] > box.getMaxY()) {                box.setMaxY(geometry[i][1]);              }            }            topRow=output.getRowFromYCoordinate(box.getMaxY());            bottomRow=output.getRowFromYCoordinate(box.getMinY());            for (row=topRow; row <= bottomRow; row++) {              edgeList.clear();              foundIntersection=false;              rowYCoord=output.getYCoordinateFromRow(row);              for (i=startingPointInPart; i < endingPointInPart - 1; i++) {                if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  if (y2 != y1) {                    x1=geometry[i][0];                    x2=geometry[i + 1][0];                    xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                    edgeList.add(new Integer(output.getColumnFromXCoordinate(xPrime)));                    foundIntersection=true;                  }                }              }              if (foundIntersection) {                numEdges=edgeList.size();                if (numEdges == 2) {                  stCol=Math.min(edgeList.get(0),edgeList.get(1));                  endCol=Math.max(edgeList.get(0),edgeList.get(1));                  for (col=stCol; col <= endCol; col++) {                    if (maintainInputDimensions) {                      value=input.getValue(row,col);                    } else {                      inputX=output.getXCoordinateFromColumn(col);                      inputCol=input.getColumnFromXCoordinate(inputX);                      inputY=output.getYCoordinateFromRow(row);                      inputRow=input.getRowFromYCoordinate(inputY);                      value=input.getValue(inputRow,inputCol);                    }                    pq.add(new RowPriorityGridCell(row,col,value));                  }                } else {                  Integer[] edgeArray=new Integer[numEdges];                  edgeList.toArray(edgeArray);                  Arrays.sort(edgeArray);                  boolean fillFlag=true;                  for (i=0; i < numEdges - 1; i++) {                    stCol=edgeArray[i];                    endCol=edgeArray[i + 1];                    if (fillFlag) {                      for (col=stCol; col <= endCol; col++) {                        if (maintainInputDimensions) {                          value=input.getValue(row,col);                        } else {                          inputX=output.getXCoordinateFromColumn(col);                          inputCol=input.getColumnFromXCoordinate(inputX);                          inputY=output.getYCoordinateFromRow(row);                          inputRow=input.getRowFromYCoordinate(inputY);                          value=input.getValue(inputRow,inputCol);                        }                        pq.add(new RowPriorityGridCell(row,col,value));                      }                    }                    fillFlag=!fillFlag;                  }                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            output.setValue(cell.row,cell.col,cell.z);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress(progress);        }      }      j=0;      numCellsToWrite=pq.size();      do {        cell=pq.poll();        output.setValue(cell.row,cell.col,cell.z);        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.flush();      output.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void removeEventListener3(IGroupFileTransferListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mGroupFileTransferBroadcaster.removeGroupFileTransferListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public final boolean waitForRead() throws IOException {  if (_readLength <= _readOffset) {    if (!readBuffer()) {      return false;    }  }  return true;}  }
class C{  public boolean hasBatchId(){  return hasExtension(BatchId.class);}  }
class C{  public void addImages(ImageInfo... images){  if (images == null) {    return;  }  List<ImageInfo> list=new ArrayList<ImageInfo>();  Collections.addAll(list,images);  this.setImages(list);}  }
class C{  private void readPageLayoutElement(IXMLElement elem,HashMap<String,Style> styles) throws IOException {}  }
class C{  public static <T>T withReader(Path self,String charset,@ClosureParams(value=SimpleType.class,options="java.io.Reader") Closure<T> closure) throws IOException {  return IOGroovyMethods.withReader(newReader(self,charset),closure);}  }
class C{  public void drawString(AttributedCharacterIterator iterator,int x,int y){  g.drawString(iterator,x,y);}  }
class C{  public void resetMetrics(){  getSpi().resetMetrics();}  }
class C{  public boolean isLeaveRepeated(){  Object oo=get_Value(COLUMNNAME_IsLeaveRepeated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addRosterItem(Item item){synchronized (rosterItems) {    rosterItems.add(item);  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isReadOnly(){  if (m_TableData == null) {    return true;  } else {    return ((DataSortedTableModel)m_TableData.getModel()).isReadOnly();  }}  }
class C{  public static Schema createSchema(final String[] resourceLocations) throws XMLException {  if (resourceLocations == null) {    throw new XMLException("Schema file locations not specified");  }  final SchemaFactory schemaFactory=SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI);  Schema schema=null;  final Source[] schemaSources=new Source[resourceLocations.length];  try {    String resourceLocation;    for (int i=0; i < resourceLocations.length; i++) {      resourceLocation=resourceLocations[i];      if (resourceLocation == null) {        throw new XMLException("Schema file location not specified");      }      final File file=new File(resourceLocation);      if (file.exists()) {        schemaSources[i]=new StreamSource(file);      } else {        final InputStream resourceAsStream=XMLSchemaUtils.class.getResourceAsStream(resourceLocation);        if (resourceAsStream == null) {          throw new XMLException("Cannot load the schema from file or classpath - fix the schema or amend the location: " + resourceLocation);        }        schemaSources[i]=new StreamSource(resourceAsStream);      }    }    schema=schemaFactory.newSchema(schemaSources);    return schema;  } catch (  final SAXException e) {    throw new XMLException("Cannot set the schema - fix the schema or the location",e);  }}  }
class C{  public HeaderCardBuilder scale(int newScale){  this.scale=newScale;  return this;}  }
class C{  private void activePendingMessages(){  MmsSystemEventReceiver.wakeUpService(this);}  }
class C{  public void testDefaults() throws Exception {  SweetSpotSimilarity sim=getSimilarity("text",SweetSpotSimilarity.class);  DefaultSimilarity d=new DefaultSimilarity();  for (int i=0; i <= 1000; i++) {    assertEquals("tf: i=" + i,d.tf(i),sim.tf(i),0.0F);  }  assertEquals("norm 1",1.00F,sim.computeLengthNorm(1),0.0F);  assertEquals("norm 4",0.50F,sim.computeLengthNorm(4),0.0F);  assertEquals("norm 16",0.25F,sim.computeLengthNorm(16),0.0F);}  }
class C{  public void open(final String filename) throws IOException {  open(new File(filename));}  }
class C{  public String toClock(){  StringBuilder s=new StringBuilder();  s.append(((this.weeks * 7 + this.days) * 24 + this.hours) + ":");  if (this.minutes < 10) {    s.append('0');  }  s.append(this.minutes + ":");  if (this.seconds < 10) {    s.append('0');  }  s.append(this.seconds + ".");  if (this.milliseconds < 100) {    s.append('0');  }  if (this.milliseconds < 10) {    s.append('0');  }  s.append(this.milliseconds);  return s.toString();}  }
class C{  public SparseArray(int initialCapacity){  initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new Object[initialCapacity];  mSize=0;}  }
class C{  public static String dumpAsString(Object obj,boolean verbose){  StringBuffer buf=new StringBuffer();  if (obj instanceof ASN1Primitive) {    _dumpAsString("",verbose,(ASN1Primitive)obj,buf);  } else   if (obj instanceof ASN1Encodable) {    _dumpAsString("",verbose,((ASN1Encodable)obj).toASN1Primitive(),buf);  } else {    return "unknown object type " + obj.toString();  }  return buf.toString();}  }
class C{  public void close(){}  }
class C{  public Type attribExpr(JCTree tree,Env<AttrContext> env){  return attribTree(tree,env,unknownExprInfo);}  }
class C{  public void copyAndAddExtension(String oid,boolean critical,X509Certificate cert) throws CertificateParsingException {  byte[] extValue=cert.getExtensionValue(oid);  if (extValue == null) {    throw new CertificateParsingException("extension " + oid + " not present");  }  try {    ASN1Encodable value=X509ExtensionUtil.fromExtensionValue(extValue);    this.addExtension(oid,critical,value);  } catch (  IOException e) {    throw new CertificateParsingException(e.toString());  }}  }
class C{  public TypeScriptIndenter(IDocument document,JavaHeuristicScanner scanner,ITypeScriptFile project){  Assert.isNotNull(document);  Assert.isNotNull(scanner);  fDocument=document;  fScanner=scanner;  fPrefs=new CorePrefs(project);}  }
class C{  private static InputNode read(EventReader source) throws Exception {  return new NodeReader(source).readRoot();}  }
class C{  private CDatabaseConnectionFunctions(){}  }
class C{  protected void sequence_ProjectDependencies(ISerializationContext context,ProjectDependencies semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  Attribute att=getInputFormat().attribute(m_AttIndex.getIndex());  ArrayList<String> newVals=new ArrayList<String>(att.numValues() - 1);  for (int i=0; i < att.numValues(); i++) {    boolean inMergeList=false;    if (att.value(i).equalsIgnoreCase(m_Label)) {      inMergeList=true;    } else {      inMergeList=m_MergeRange.isInRange(i);    }    if (!inMergeList) {      newVals.add(att.value(i));    }  }  newVals.add(m_Label);  Attribute temp=new Attribute(att.name(),newVals);  Instance newInstance=(Instance)instance.copy();  if (!newInstance.isMissing(m_AttIndex.getIndex())) {    String currValue=newInstance.stringValue(m_AttIndex.getIndex());    if (temp.indexOfValue(currValue) == -1) {      newInstance.setValue(m_AttIndex.getIndex(),temp.indexOfValue(m_Label));    } else {      newInstance.setValue(m_AttIndex.getIndex(),temp.indexOfValue(currValue));    }  }  push(newInstance);  return true;}  }
class C{  public GPerfThree(){  File file=new File(GPerfThree.class.getName() + ".wordList");  try {    wordlist=new String[MAX_HASH_VALUE + 1];    Scanner sc=new Scanner(file);    int idx=0;    while (sc.hasNext()) {      String s=sc.nextLine();      StringTokenizer st=new StringTokenizer(s,",",true);      while (st.hasMoreTokens()) {        String tok=st.nextToken();        if (tok.equals(",")) {          wordlist[idx++]=null;        } else {          wordlist[idx++]=tok;          if (st.hasMoreTokens()) {            st.nextToken();          }        }      }    }    sc.close();  } catch (  IOException ioe) {    System.err.println("Unable to access file containing words for hashtable:" + file);  }}  }
class C{  public CUDA_MEMCPY2D(){}  }
class C{  private void clearState(){  allocatedResources.clear();  requestsToCountMap.clear();  requestsQueue.clear();}  }
class C{  public final boolean supportExtension(String s){  return extensions.contains(s);}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  @Override public boolean isEnabled(){  return false;}  }
class C{  protected void parseMediaRule(){  CSSSACMediaList ml=parseMediaList();  try {    documentHandler.startMedia(ml);    if (current != LexicalUnits.LEFT_CURLY_BRACE) {      reportError("left.curly.brace");    } else {      nextIgnoreSpaces();      loop:       for (; ; ) {switch (current) {case LexicalUnits.EOF:          reportStyleDeclarationError(createCSSParseException("eof"));case LexicalUnits.RIGHT_CURLY_BRACE:        break loop;default :      parseRuleSet();  }}nextIgnoreSpaces();}}  finally {documentHandler.endMedia(ml);}}  }
class C{  public static final SnapshotException rethrow(Throwable e){  if (e instanceof RuntimeException) {    if (((RuntimeException)e).getCause() instanceof SnapshotException) {      return (SnapshotException)((RuntimeException)e).getCause();    }    throw (RuntimeException)e;  } else   if (e instanceof SnapshotException) {    return (SnapshotException)e;  } else {    return new SnapshotException(e);  }}  }
class C{  public void updateComponent(int fromRow,int toRow){  if (Executions.getCurrent() != null) {    fireEvent(ListDataEvent.CONTENTS_CHANGED,fromRow,toRow);  }}  }
class C{  protected void paintImage(Graphics g,int x,int y){  if (bgImage != null) {    do {      int rc=bgImage.validate(null);      if (rc == VolatileImage.IMAGE_RESTORED) {        renderImage(bgImage.getWidth(),bgImage.getHeight(),getScalingHint());      }      g.drawImage(bgImage,x,y,null);    } while (bgImage.contentsLost());  }}  }
class C{  public static void allocateNew(ValueVector v,int valueCount){  if (v instanceof FixedWidthVector) {    ((FixedWidthVector)v).allocateNew(valueCount);  } else {    v.allocateNew();  }}  }
class C{  public static String ensureNonTerminalBrackets(String nt){  if (isNonterminal(nt))   return nt; else   return "[" + nt + "]";}  }
class C{  public MethodLinks SAMPLE(MethodLinks x){  return x;}  }
class C{  protected final void appendBytes(final byte[] data){  for (  final byte element : data) {    byteData.add(element);  }}  }
class C{  private void calcYValueSum(){  mYValueSum=0;  for (int i=0; i < mDataSets.size(); i++) {    mYValueSum+=Math.abs(mDataSets.get(i).getYValueSum());  }}  }
class C{  private void configureAuth(ClientBuilder clientBuilder){  if (conf.client.authType == AuthenticationType.OAUTH) {    authToken=JerseyClientUtil.configureOAuth1(conf.client.oauth,clientBuilder);  } else   if (conf.client.authType != AuthenticationType.NONE) {    JerseyClientUtil.configurePasswordAuth(conf.client.authType,conf.client.basicAuth,clientBuilder);  }}  }
class C{  @Override protected void targetWindowClosingEvent(java.awt.event.WindowEvent e){  jmri.jmrit.catalog.ImageIndexEditor.checkImageIndex();  targetWindowClosing(true);}  }
class C{  public static void invokeIfExistsWithEnum(Object obj,String methodName,String enumClassName,String enumValueName){  try {    Class enumClass=Class.forName(enumClassName);    Object enumValue=invokeStatic("java.lang.Enum","valueOf",new Class[]{Class.class,String.class},new Object[]{enumClass,enumValueName});    invoke(obj,methodName,enumClass,enumValue);  } catch (  ClassNotFoundException e) {    e.printStackTrace();  }catch (  NoSuchMethodException e) {    e.printStackTrace();  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  createWebView();  createCameraView();  mMain=new SampleMain(this);  setMain(mMain,"gvr.xml");}  }
class C{  @Override public Handle stringLiteral(TerminalAST stringLiteralAST){  return tokenRef(stringLiteralAST);}  }
class C{  protected Size2D arrangeNN(BlockContainer container,Graphics2D g2){  double maxW=0.0;  double maxH=0.0;  List blocks=container.getBlocks();  Iterator iterator=blocks.iterator();  while (iterator.hasNext()) {    Block b=(Block)iterator.next();    if (b != null) {      Size2D s=b.arrange(g2,RectangleConstraint.NONE);      maxW=Math.max(maxW,s.width);      maxH=Math.max(maxH,s.height);    }  }  double width=this.columns * maxW;  double height=this.rows * maxH;  RectangleConstraint c=new RectangleConstraint(width,height);  return arrangeFF(container,g2,c);}  }
class C{  private ViewManager(final SQLProvider provider){  this.provider=provider;  this.provider.addListener(providerListener);}  }
class C{  public void addModel(NavigationModel other){  for (  Group group : other.getGroups()) {    addGroup(group);  }  for (  View view : other.getViews()) {    addView(view);  }}  }
class C{  public boolean isGenericURI(){  return (m_host != null);}  }
class C{  private void validAllParameters() throws SQLException {  setInputOutputParameterMap();  for (int index=0; index < params.size(); index++) {    if (!params.get(index).isInput) {      super.setParameter(index + 1,new NullParameter());    }  }  validParameters();}  }
class C{  public File monolingualCorpus(){  return monolingualCorpus;}  }
class C{  private void allocateFrameTextureData(int frameCount){  if (this.framesTextureData.size() <= frameCount) {    for (int i=this.framesTextureData.size(); i <= frameCount; i++) {      this.framesTextureData.add((int[][])null);    }  }}  }
class C{  public TypeVariable basicGetBoundTypeVariable(){  return boundTypeVariable;}  }
class C{  public static NbtInputStream fromCompressed(InputStream in,NbtLimiter limiter) throws IOException {  return new NbtInputStream(new DataInputStream(new BufferedInputStream(new GZIPInputStream(new NbtInputLimitedStream(in,limiter)))));}  }
class C{  public void checkConnection(){  List<Fragment> fragments=getFragmentManager().getFragments();  onAttachFragment(fragments.get(0) != null ? fragments.get(0) : fragments.get(1));  mPhoneConnectionUtil=new PhoneConnectionUtil(getContext());  if (mPhoneConnectionUtil.isNetworkAvailable()) {    addDebugText("Connection OK");    listener.onConnectionOk();  } else {    listener.onConnectionFailed();    setErrorMessage(getString(R.string.error_notConnected));  }  ;}  }
class C{  public static boolean isSystemApplication(PackageManager packageManager,String packageName){  if (packageManager == null || packageName == null || packageName.length() == 0) {    return false;  }  try {    ApplicationInfo app=packageManager.getApplicationInfo(packageName,0);    return (app != null && (app.flags & ApplicationInfo.FLAG_SYSTEM) > 0);  } catch (  NameNotFoundException e) {    e.printStackTrace();  }  return false;}  }
class C{  public Point2D randomPoint(){  IGeometric2D shape=Util.selectRandomlyFromList(shapes);  return shape.randomPoint();}  }
class C{  public boolean isMouseOver(){  return mouseOver;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FolderTokenFlds[");  buffer.append("m_relFlds = ").append(m_relFlds);  buffer.append(", m_multFlds = ").append(m_multFlds);  buffer.append(", m_extFlds = ").append(m_extFlds);  buffer.append("]");  return buffer.toString();}  }
class C{  public static Flag registerMinMapQFlag(final CFlags flags){  return flags.registerOptional(MIN_MAPQ_FLAG,Integer.class,"int",MAPQ_DESC).setCategory(SENSITIVITY_TUNING);}  }
class C{  public InvalidAttributesException(String explanation){  super(explanation);}  }
class C{  public ProtocolException(final int i){  this(false);}  }
class C{  public @Test final void testMergeGrantsWithNull(){  thrown.expect(IllegalArgumentException.class);  srv.mergeGrants(null,null);}  }
class C{  public FieldUpdater inline(Environment env,Context ctx){  if (base != null) {    if (field.isStatic()) {      base=base.inline(env,ctx);    } else {      base=base.inlineValue(env,ctx);    }  }  return this;}  }
class C{  public String minVariancePropTipText(){  return "The minimum proportion of the variance on all the data " + "that needs to be present at a node in order for splitting to " + "be performed in regression trees.";}  }
class C{  public void print(int i){  return;}  }
class C{  public void pushStylesheet(Stylesheet s){  if (m_stylesheets.size() == 0)   m_stylesheetRoot=(StylesheetRoot)s;  m_stylesheets.push(s);}  }
class C{  @Override public void mousePressed(MouseEvent event){  setToolTip(null);  log.debug("mousePressed at ({},{}) _dragging={}",event.getX(),event.getY(),_dragging);  boolean circuitBuilder=_circuitBuilder.saveSelectionGroup(_selectionGroup);  _anchorX=event.getX();  _anchorY=event.getY();  _lastX=_anchorX;  _lastY=_anchorY;  _currentSelection=getCurrentSelection(event);  if (!event.isPopupTrigger() && !event.isMetaDown() && !event.isAltDown()&& !circuitBuilder) {    _shapeDrawer.doMousePressed(event,_currentSelection);    if (_currentSelection != null) {      _currentSelection.doMousePressed(event);      if (isEditable()) {        if (!event.isControlDown() && (_selectionGroup != null && !_selectionGroup.contains(_currentSelection))) {          if (_pastePending) {            abortPasteItems();          }          deselectSelectionGroup();        }      }    } else {      _highlightcomponent=null;      if (_pastePending) {        abortPasteItems();      }      deselectSelectionGroup();    }  } else   if (_currentSelection == null || (_selectionGroup != null && !_selectionGroup.contains(_currentSelection))) {    deselectSelectionGroup();  }  _circuitBuilder.doMousePressed(event,_currentSelection);  _targetPanel.repaint();}  }
class C{  public MethodIdItem(CstBaseMethodRef method){  super(method);}  }
class C{  @Override public void close(){  CloseableReference.closeSafely(mBufRef);  mBufRef=null;  mCount=-1;  super.close();}  }
class C{  protected MouseInputAdapter createBorderListener(JInternalFrame w){  return new BorderListener1();}  }
class C{  @SafeVarargs @org.hamcrest.Factory public static <T>org.hamcrest.Matcher<Collection<T>> equivalentTo(final T... array){  return new IsEquivalent<>(array);}  }
class C{  public static boolean isValid(SharedReference<?> ref){  return ref != null && ref.isValid();}  }
class C{  private IType findFactoryClass(String fullyQualifiedTypeName) throws JavaModelException {  IType factoryType=getProject().findType(fullyQualifiedTypeName);  if (factoryType == null)   factoryType=findNonPrimaryType(fullyQualifiedTypeName,new NullProgressMonitor(),new RefactoringStatus());  return factoryType;}  }
class C{  public FamilyName(String value){  this();  setValue(value);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassSeparatorUI();}  }
class C{  protected Object[] determineTemplate(int run) throws Exception {  if (m_Instances == null) {    throw new Exception("No Instances set");  }  m_ResultProducer.setInstances(m_Instances);  m_Keys.clear();  m_Results.clear();  m_ResultProducer.doRunKeys(run);  checkForMultipleDifferences();  Object[] template=m_Keys.get(0).clone();  template[m_KeyIndex]=null;  checkForDuplicateKeys(template);  return template;}  }
class C{  public void printDebugInfo(){  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("isServer = " + isServer());    sipStack.getStackLogger().logDebug("localTag = " + getLocalTag());    sipStack.getStackLogger().logDebug("remoteTag = " + getRemoteTag());    sipStack.getStackLogger().logDebug("localSequenceNumer = " + getLocalSeqNumber());    sipStack.getStackLogger().logDebug("remoteSequenceNumer = " + getRemoteSeqNumber());    sipStack.getStackLogger().logDebug("ackLine:" + this.getRemoteTag() + " "+ ackLine);  }}  }
class C{  protected void calculateWidestRank(mxGraph graph,mxGraphHierarchyModel model){  double y=-interRankCellSpacing;  double lastRankMaxCellHeight=0.0;  rankWidths=new double[model.maxRank + 1];  rankY=new double[model.maxRank + 1];  for (int rankValue=model.maxRank; rankValue >= 0; rankValue--) {    double maxCellHeight=0.0;    mxGraphHierarchyRank rank=model.ranks.get(new Integer(rankValue));    double localX=initialX;    boolean boundsWarning=false;    Iterator<mxGraphAbstractHierarchyCell> iter=rank.iterator();    while (iter.hasNext()) {      mxGraphAbstractHierarchyCell cell=(mxGraphAbstractHierarchyCell)iter.next();      if (cell.isVertex()) {        mxGraphHierarchyNode node=(mxGraphHierarchyNode)cell;        mxRectangle bounds=layout.getVertexBounds(node.cell);        if (bounds != null) {          if (orientation == SwingConstants.NORTH || orientation == SwingConstants.SOUTH) {            cell.width=bounds.getWidth();            cell.height=bounds.getHeight();          } else {            cell.width=bounds.getHeight();            cell.height=bounds.getWidth();          }        } else {          boundsWarning=true;        }        maxCellHeight=Math.max(maxCellHeight,cell.height);      } else       if (cell.isEdge()) {        mxGraphHierarchyEdge edge=(mxGraphHierarchyEdge)cell;        int numEdges=1;        if (edge.edges != null) {          numEdges=edge.edges.size();        } else {          logger.info("edge.edges is null");        }        cell.width=(numEdges - 1) * parallelEdgeSpacing;      }      localX+=cell.width / 2.0;      cell.setX(rankValue,localX);      cell.setGeneralPurposeVariable(rankValue,(int)localX);      localX+=cell.width / 2.0;      localX+=intraCellSpacing;      if (localX > widestRankValue) {        widestRankValue=localX;        widestRank=rankValue;      }      rankWidths[rankValue]=localX;    }    if (boundsWarning == true) {      logger.info("At least one cell has no bounds");    }    rankY[rankValue]=y;    double distanceToNextRank=maxCellHeight / 2.0 + lastRankMaxCellHeight / 2.0 + interRankCellSpacing;    lastRankMaxCellHeight=maxCellHeight;    if (orientation == SwingConstants.NORTH || orientation == SwingConstants.WEST) {      y+=distanceToNextRank;    } else {      y-=distanceToNextRank;    }    iter=rank.iterator();    while (iter.hasNext()) {      mxGraphAbstractHierarchyCell cell=(mxGraphAbstractHierarchyCell)iter.next();      cell.setY(rankValue,y);    }  }}  }
class C{  protected State buildPatch(TaskState.TaskStage stage,@Nullable Throwable e){  State state=new State();  state.taskState=new TaskState();  state.taskState.stage=stage;  if (null != e) {    state.taskState.failure=Utils.toServiceErrorResponse(e);  }  return state;}  }
class C{  public void finalize(){  response.append("\r\n");}  }
class C{  BasicDocument(StyleSheet s,Font defaultFont,Color foreground){  super(s);  setPreservesUnknownTags(false);  setFontAndColor(defaultFont,foreground);}  }
class C{  public static boolean isCashBookAssignedValid(Properties ctx,int terminalId,int cashBookId,String trxName) throws OperationException {  boolean valid=false;  StringBuffer sqlStmt=new StringBuffer();  sqlStmt.append("SELECT COUNT(*) FROM U_POSTerminal ");  sqlStmt.append("WHERE AD_Client_ID=? AND U_POSTerminal_ID<>? AND C_CashBook_ID=? ");  sqlStmt.append("AND U_POSTerminal.IsActive='Y' ");  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sqlStmt.toString(),trxName);    pstmt.setInt(1,Env.getAD_Client_ID(ctx));    pstmt.setInt(2,terminalId);    pstmt.setInt(3,cashBookId);    rs=pstmt.executeQuery();    if (rs.next()) {      valid=(rs.getInt(1) == 0);    }  } catch (  Exception ex) {    throw new OperationException("Could not check validity of Cash Book",ex);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return valid;}  }
class C{  private void createDefaultColors(){  this.barTextColor=SWTGraphicUtil.getDefaultColor(this,57,98,149);  this.barInnerColor=SWTGraphicUtil.getDefaultColor(this,219,230,243);  this.barBorderColor=SWTGraphicUtil.getDefaultColor(this,101,148,207);  this.barGradientColorTopStart=SWTGraphicUtil.getDefaultColor(this,175,202,237);  this.barGradientColorTopEnd=SWTGraphicUtil.getDefaultColor(this,136,177,229);  this.barGradientColorMiddleStart=SWTGraphicUtil.getDefaultColor(this,112,161,223);}  }
class C{  private static String geoToGml(Polygon poly){  StringBuilder coordString=new StringBuilder();  for (  Coordinate coor : poly.getCoordinates()) {    coordString.append(" ").append(coor.x).append(" ").append(coor.y);  }  return "<gml:Polygon srsName=\"EPSG:4326\"  xmlns:gml='http://www.opengis.net/gml'>\r\n" + "<gml:exterior><gml:LinearRing>\r\n" + "<gml:posList srsDimension='2'>\r\n" + coordString + "</gml:posList>\r\n"+ "</gml:LinearRing></gml:exterior>\r\n</gml:Polygon>\r\n";}  }
class C{  private WildFlyLogUtils(){}  }
class C{  public static String format(int kind,String source,int indentationLevel,String lineSeparator){  Map<String,String> options=null;  return format(kind,source,indentationLevel,lineSeparator,options);}  }
class C{  public static void arrangeContentSpacing(Context context,Window window){  int minHeight=context.getResources().getDimensionPixelSize(R.dimen.gm__dialog_content_min_height);  View content=window.findViewById(NativeResources.getIdentifier("contentPanel"));  if (content != null) {    content.setMinimumHeight(minHeight);  }  View custom=window.findViewById(NativeResources.getIdentifier("customPanel"));  if (custom != null) {    int topPadding=context.getResources().getDimensionPixelSize(R.dimen.abc_dialog_padding_top_material);    int horizontalPadding=context.getResources().getDimensionPixelSize(R.dimen.gm__dialog_bottom_padding);    custom.setPadding(horizontalPadding,topPadding,horizontalPadding,custom.getPaddingLeft());    custom.setMinimumHeight(minHeight);  }  View title=window.findViewById(NativeResources.getIdentifier("title_template"));  if (title != null) {    int topPadding=context.getResources().getDimensionPixelSize(R.dimen.abc_dialog_padding_top_material);    title.setPadding(title.getPaddingLeft(),topPadding,title.getPaddingRight(),title.getPaddingLeft());    title.setMinimumHeight(0);  }  View message=window.findViewById(NativeResources.getIdentifier("message"));  if (message != null && message instanceof TextView) {    TypedArray attrs=context.getTheme().obtainStyledAttributes(new int[]{android.R.attr.textColorPrimary});    ColorStateList textColor=attrs.getColorStateList(0);    ((TextView)message).setTextColor(textColor);    attrs.recycle();    int textSize=context.getResources().getDimensionPixelSize(R.dimen.abc_text_size_subhead_material);    ((TextView)message).setTextSize(TypedValue.COMPLEX_UNIT_PX,textSize);    int paddingTop=context.getResources().getDimensionPixelSize(R.dimen.abc_dialog_padding_top_material);    ((TextView)message).setPadding(message.getPaddingLeft(),paddingTop,message.getPaddingRight(),message.getPaddingBottom());  }}  }
class C{  private void testStringMissingSortedLast(SortField.Type sortType) throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  Type type=sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",type));  writer.close();  IndexSearcher searcher=newSearcher(ir);  SortField sf=new SortField("value",sortType);  sf.setMissingValue(SortField.STRING_LAST);  Sort sort=new Sort(sf);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("bar",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("foo",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public final synchronized void removeAllElements(){  m_Size=0;  m_Head=null;  m_Tail=null;}  }
class C{  public boolean checkUidExists(String uid) throws DataAccessException {  return getDeviceInfo(uid) != null;}  }
class C{  public Vertex evaluateTHINK(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  List<Relationship> doEquations=expression.orderedRelationships(Primitive.DO);  Vertex result=network.createVertex(Primitive.NULL);  Vertex returnPrimitive=network.createVertex(Primitive.RETURN);  for (  Relationship doEquation : doEquations) {    result=evaluateExpression(doEquation.getTarget(),variables,network,startTime,maxTime,stack);    if (variables.containsKey(returnPrimitive)) {      variables.remove(returnPrimitive);      return result;    } else     if (result.is(Primitive.BREAK)) {      return result;    }  }  return returnPrimitive;}  }
class C{  public boolean isReverse(){  return true;}  }
class C{  public void storeLocal(final int local,final Type type){  setLocalType(local,type);  storeInsn(type,local);}  }
class C{  private static Set<String> executeQuery() throws Exception {  Connection conn=null;  Statement stmt=null;  ResultSet rs=null;  try {    conn=ds.getConnection();    stmt=conn.createStatement();    String sqlQuery=createSqlQuery();    rs=stmt.executeQuery(sqlQuery);    return read(rs);  }  finally {    closeResultSet(rs);    closeStatement(stmt);    closeConnection(conn);  }}  }
class C{  public double det(DoubleMatrix2D A){  return lu(A).det();}  }
class C{  public void emitDirect(int taskId,Collection<Tuple> anchors,List<Object> tuple){  emitDirect(taskId,Utils.DEFAULT_STREAM_ID,anchors,tuple);}  }
class C{  public Iterator<Integer> iterator(){  return new MyIterator();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:43.015 -0500",hash_original_method="B55CA2C4A856CEE2241376D780EDBADA",hash_generated_method="C086D21F3EF0B40AF956A73D35E8E28F") public boolean resetAndStart(){  try {    VMDebug.startInstructionCounting();    VMDebug.resetInstructionCount();  } catch (  UnsupportedOperationException uoe) {    return false;  }  return true;}  }
class C{  public synchronized Boolean stopInterviewRecording(){  try {    IConnection current=Red5.getConnectionLocal();    boolean found=false;    Long flvRecordingId=null;    Collection<Set<IConnection>> conCollection=current.getScope().getConnections();    for (    Set<IConnection> conset : conCollection) {      for (      IConnection conn : conset) {        if (conn != null) {          RoomClient rcl=this.clientListManager.getClientByStreamId(conn.getClient().getId());          if (rcl.getIsRecording() != null && rcl.getIsRecording()) {            rcl.setIsRecording(false);            flvRecordingId=rcl.getFlvRecordingId();            rcl.setFlvRecordingId(null);            this.clientListManager.updateClientByStreamId(conn.getClient().getId(),rcl);            found=true;          }        }      }    }    if (!found) {      return false;    }    RoomClient currentClient=this.clientListManager.getClientByStreamId(current.getClient().getId());    this.flvRecorderService.stopRecordAndSave(scope,currentClient,flvRecordingId);    Map<String,String> interviewStatus=new HashMap<String,String>();    interviewStatus.put("action","stop");    for (    Set<IConnection> conset : conCollection) {      for (      IConnection conn : conset) {        if (conn != null) {          ((IServiceCapableConnection)conn).invoke("interviewStatus",new Object[]{interviewStatus},this);          log.debug("sendMessageWithClientByPublicSID interviewStatus" + interviewStatus);        }      }    }    return true;  } catch (  Exception err) {    log.debug("[startInterviewRecording]",err);  }  return null;}  }
class C{  static void i2bBig(int[] in,int inOfs,byte[] out,int outOfs,int len){  if ((inOfs < 0) || ((in.length - inOfs) < len / 4) || (outOfs < 0)|| ((out.length - outOfs) < len)) {    throw new ArrayIndexOutOfBoundsException();  }  if (littleEndianUnaligned) {    outOfs+=byteArrayOfs;    len+=outOfs;    while (outOfs < len) {      unsafe.putInt(out,(long)outOfs,reverseBytes(in[inOfs++]));      outOfs+=4;    }  } else   if (bigEndian && ((outOfs & 3) == 0)) {    outOfs+=byteArrayOfs;    len+=outOfs;    while (outOfs < len) {      unsafe.putInt(out,(long)outOfs,in[inOfs++]);      outOfs+=4;    }  } else {    len+=outOfs;    while (outOfs < len) {      int i=in[inOfs++];      out[outOfs++]=(byte)(i >> 24);      out[outOfs++]=(byte)(i >> 16);      out[outOfs++]=(byte)(i >> 8);      out[outOfs++]=(byte)(i);    }  }}  }
class C{  protected ScrOfic executeCriteriaReturnScrOfic(Locale locale,StringBuffer query) throws HibernateException {  ScrOfic result=null;  List listado=null;  listado=executeCriteriaReturnScrOficList(locale,query);  Object scrOfic=DataAccessUtils.uniqueResult(listado);  if (scrOfic != null) {    result=new ScrOfic();    BeanUtils.copyProperties(scrOfic,result);  }  return result;}  }
class C{  public final boolean hasMessages(int what,Object object){  return mExec.hasMessages(what,object);}  }
class C{  private TBase<?,?> decodeToken(byte[] nolookupToken,TBase<?,?> thriftToken) throws QuasarTokenException {  try {    byte[] uncrypted=CryptoUtils.unwrap(tokenAESKey,nolookupToken);    if (uncrypted == null) {      throw new QuasarTokenInvalid("AES_INVALID","Invalid token.");    }    long tokenSIPHash=ByteBuffer.wrap(uncrypted,0,8).order(ByteOrder.BIG_ENDIAN).getLong();    checkTokenIntegrity(tokenSIPHash,uncrypted);    deserializeThriftToken(thriftToken,uncrypted);    return thriftToken;  } catch (  QuasarTokenException quasarExp) {    throw quasarExp;  }catch (  Exception exp) {    throw new QuasarTokenInvalid("Invalid token.");  }}  }
class C{  public void save(OutputStream stream) throws IOException {  OutputStreamWriter writer=new OutputStreamWriter(stream,Charsets.UTF_8);  CSVFormat format=CSVFormat.DEFAULT.withEscape('\\');  if (csvOptions.sSeparatedChar.length() == 1) {    format=format.withDelimiter(csvOptions.sSeparatedChar.charAt(0));  }  if (csvOptions.sSeparatedTextChar.length() == 1) {    format=format.withQuote(csvOptions.sSeparatedTextChar.charAt(0));  }  CSVPrinter csvPrinter=new CSVPrinter(writer,format);  writeTasks(csvPrinter);  if (myProject.getHumanResourceManager().getResources().size() > 0) {    csvPrinter.println();    csvPrinter.println();    writeResources(csvPrinter);  }  writer.flush();  writer.close();}  }
class C{  public void replaceFDViolatingTuplesWithMissing(){  for (  String premise : FDs.keySet()) {    ArrayList<Integer> attrIndexes=new ArrayList<Integer>();    attrIndexes.add(Integer.parseInt(premise));    for (    String RHS : FDs.get(premise)) {      attrIndexes.add(Integer.parseInt(RHS));    }    setMissingAtIndex(violated,Util.convertIntegers(attrIndexes));  }}  }
class C{  public NoClassDefFoundError(java.lang.String s){}  }
class C{  public OMGraphicList load(){  OMGraphicList graphicList=new OMGraphicList();  boolean err=false;  if (fileName != null) {    try {      OMGraphicList list=null;      URL url=PropUtils.getResourceOrFileOrURL(fileName);      if (url != null) {        if (fileName.endsWith(".shp")) {          list=EsriShapeExport.read(url,drawingAttributes,getCoordTransform());          dbfFactory=new DbfTableModelFactory();        } else {          ObjectInputStream ois=new ObjectInputStream(url.openStream());          list=(OMGraphicList)ois.readObject();          ois.close();        }      }      if (list != null) {        graphicList.addAll(list);        graphicList.setAttributes(list.getAttributes());      }    } catch (    FileNotFoundException e) {      if (DTL_DEBUG) {        e.printStackTrace();      }      err=true;    }catch (    StreamCorruptedException sce) {      sce.printStackTrace();      fireRequestMessage(i18n.get(DrawingToolLayer.class,"LOAD_ERROR","The file doesn't appear to be a valid map file"));      err=true;    }catch (    IOException e) {      if (DTL_DEBUG) {        e.printStackTrace();      }      err=true;    }catch (    ClassNotFoundException e) {      if (DTL_DEBUG) {        e.printStackTrace();      }      err=true;    }catch (    ClassCastException cce) {      if (DTL_DEBUG) {        cce.printStackTrace();      }      err=true;    }  }  if (err) {    fileName=null;  }  return graphicList;}  }
class C{  public static int arraySize(final int expected,final float f){  final long s=Math.max(2,nextPowerOfTwo((long)Math.ceil(expected / f)));  if (s > (1 << 30))   throw new IllegalArgumentException("Too large (" + expected + " expected elements with load factor "+ f+ ")");  return (int)s;}  }
class C{  public void collapseBuilding(Vector<Coords> coords){  Enumeration<Coords> loop=coords.elements();  while (loop.hasMoreElements()) {    final Coords other=loop.nextElement();    this.collapseBuilding(other);  }}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:02.424 -0500",hash_original_method="C3CB9524AE86EE634A43E203167EAA5A",hash_generated_method="B49E3D8116D56A750AEF2EA2BBA629A3") private SyncState(){}  }
class C{  public RandomColors(){  random=new Random();  colorCache=new LinkedHashMap<Integer,Color>();  colorVariance=new float[]{0.00f,1.00f,0.75f,0.25f,0.25f,0.75f};}  }
class C{  public byte[] extractData(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {  int bytesRead=0;  byte[] data=null;  LSBDataHeader header=null;  RandomLSBInputStream lsbIS=null;  try {    lsbIS=new RandomLSBInputStream(ImageUtil.byteArrayToImage(stegoData,stegoFileName),this.config);    header=lsbIS.getDataHeader();    data=new byte[header.getDataLength()];    bytesRead=lsbIS.read(data,0,data.length);    if (bytesRead != data.length) {      throw new OpenStegoException(null,LSBPlugin.NAMESPACE,LSBErrors.ERR_IMAGE_DATA_READ);    }    lsbIS.close();    return data;  } catch (  OpenStegoException osEx) {    throw osEx;  }catch (  Exception ex) {    throw new OpenStegoException(ex);  }}  }
class C{  public boolean isLineVisible(){  return this.lineVisible;}  }
class C{  public void connect(Context srcContext,Handler srcHandler,Class<?> klass){  connect(srcContext,srcHandler,klass.getPackage().getName(),klass.getName());}  }
class C{  public void read(){  File prefFile=new File(SystemProperties.getProperty("user.home"),PREF_FILE_NAME);  if (!prefFile.exists() || !prefFile.isFile()) {    return;  }  try {    read(new FileInputStream(prefFile));  } catch (  IOException e) {  }}  }
class C{  public boolean canInvoice(Timestamp xDate,BigDecimal orderAmt){  if (isAmount() && getAmt() != null && orderAmt != null && orderAmt.compareTo(getAmt()) >= 0)   return true;  if (INVOICEFREQUENCY_Daily.equals(getInvoiceFrequency()))   return true;  xDate=TimeUtil.getDay(xDate);  Calendar today=TimeUtil.getToday();  if (INVOICEFREQUENCY_Weekly.equals(getInvoiceFrequency())) {    Calendar cutoff=TimeUtil.getToday();    cutoff.set(Calendar.DAY_OF_WEEK,getCalendarDay(getInvoiceWeekDayCutoff()));    if (cutoff.after(today))     cutoff.add(Calendar.DAY_OF_YEAR,-7);    Timestamp cutoffDate=new Timestamp(cutoff.getTimeInMillis());    log.fine("canInvoice - Date=" + xDate + " > Cutoff="+ cutoffDate+ " - "+ xDate.after(cutoffDate));    if (xDate.after(cutoffDate))     return false;    Calendar invoice=TimeUtil.getToday();    invoice.set(Calendar.DAY_OF_WEEK,getCalendarDay(getInvoiceWeekDay()));    if (invoice.after(today))     invoice.add(Calendar.DAY_OF_YEAR,-7);    Timestamp invoiceDate=new Timestamp(invoice.getTimeInMillis());    log.fine("canInvoice - Date=" + xDate + " > Invoice="+ invoiceDate+ " - "+ xDate.after(invoiceDate));    if (xDate.after(invoiceDate))     return false;    return true;  }  if (INVOICEFREQUENCY_Monthly.equals(getInvoiceFrequency()) || INVOICEFREQUENCY_TwiceMonthly.equals(getInvoiceFrequency())) {    if (getInvoiceDayCutoff() > 0) {      Calendar cutoff=TimeUtil.getToday();      cutoff.set(Calendar.DAY_OF_MONTH,getInvoiceDayCutoff());      if (cutoff.after(today))       cutoff.add(Calendar.MONTH,-1);      Timestamp cutoffDate=new Timestamp(cutoff.getTimeInMillis());      log.fine("canInvoice - Date=" + xDate + " > Cutoff="+ cutoffDate+ " - "+ xDate.after(cutoffDate));      if (xDate.after(cutoffDate))       return false;    }    Calendar invoice=TimeUtil.getToday();    invoice.set(Calendar.DAY_OF_MONTH,getInvoiceDay());    if (invoice.after(today))     invoice.add(Calendar.MONTH,-1);    Timestamp invoiceDate=new Timestamp(invoice.getTimeInMillis());    log.fine("canInvoice - Date=" + xDate + " > Invoice="+ invoiceDate+ " - "+ xDate.after(invoiceDate));    if (xDate.after(invoiceDate))     return false;    return true;  }  if (INVOICEFREQUENCY_TwiceMonthly.equals(getInvoiceFrequency())) {    if (getInvoiceDayCutoff() > 0) {      Calendar cutoff=TimeUtil.getToday();      cutoff.set(Calendar.DAY_OF_MONTH,getInvoiceDayCutoff() + 15);      if (cutoff.after(today))       cutoff.add(Calendar.MONTH,-1);      Timestamp cutoffDate=new Timestamp(cutoff.getTimeInMillis());      if (xDate.after(cutoffDate))       return false;    }    Calendar invoice=TimeUtil.getToday();    invoice.set(Calendar.DAY_OF_MONTH,getInvoiceDay() + 15);    if (invoice.after(today))     invoice.add(Calendar.MONTH,-1);    Timestamp invoiceDate=new Timestamp(invoice.getTimeInMillis());    if (xDate.after(invoiceDate))     return false;    return true;  }  return false;}  }
class C{  private void manageRemoveRequest(Mail mail) throws MessagingException {  MailAddress senderMailAddress=mail.getSender();  String senderUser=senderMailAddress.getLocalPart().toLowerCase(Locale.US);  String senderHost=senderMailAddress.getDomain().toLowerCase(Locale.US);  senderUser=getPrimaryName(senderUser);  Connection conn=null;  PreparedStatement selectStmt=null;  PreparedStatement deleteStmt=null;  boolean dbUpdated=false;  StringWriter sout=new StringWriter();  PrintWriter out=new PrintWriter(sout,true);  try {    out.println("Answering on behalf of: " + whitelistManagerAddress);    out.println("Removing from the white list of " + (new MailAddress(senderUser,senderHost)) + " ...");    out.println();    MimeMessage message=mail.getMessage();    Object content=message.getContent();    if (message.getContentType().startsWith("text/plain") && content instanceof String) {      StringTokenizer st=new StringTokenizer((String)content," \t\n\r\f,;:<>");      while (st.hasMoreTokens()) {        ResultSet selectRS=null;        try {          MailAddress recipientMailAddress;          try {            recipientMailAddress=new MailAddress(st.nextToken());          } catch (          javax.mail.internet.ParseException pe) {            continue;          }          String recipientUser=recipientMailAddress.getLocalPart().toLowerCase(Locale.US);          String recipientHost=recipientMailAddress.getDomain().toLowerCase(Locale.US);          if (getMailetContext().isLocalServer(recipientHost)) {            continue;          }          if (conn == null) {            conn=datasource.getConnection();          }          if (selectStmt == null) {            selectStmt=conn.prepareStatement(selectByPK);          }          selectStmt.setString(1,senderUser);          selectStmt.setString(2,senderHost);          selectStmt.setString(3,recipientUser);          selectStmt.setString(4,recipientHost);          selectRS=selectStmt.executeQuery();          if (!selectRS.next()) {            out.println("Skipped: " + recipientMailAddress);            continue;          }          if (deleteStmt == null) {            deleteStmt=conn.prepareStatement(deleteByPK);          }          deleteStmt.setString(1,senderUser);          deleteStmt.setString(2,senderHost);          deleteStmt.setString(3,recipientUser);          deleteStmt.setString(4,recipientHost);          deleteStmt.executeUpdate();          dbUpdated=true;          out.println("Removed: " + recipientMailAddress);        }  finally {          theJDBCUtil.closeJDBCResultSet(selectRS);        }      }      if (dbUpdated) {        log("Removal request issued by " + senderMailAddress);      }      if (conn != null && dbUpdated && !conn.getAutoCommit()) {        conn.commit();        dbUpdated=false;      }    } else {      out.println("The message must be plain - no action");    }    out.println();    out.println("Finished");    sendReplyFromPostmaster(mail,sout.toString());  } catch (  SQLException sqle) {    out.println("Error accessing the database");    sendReplyFromPostmaster(mail,sout.toString());    throw new MessagingException("Error accessing the database",sqle);  }catch (  IOException ioe) {    out.println("Error getting message content");    sendReplyFromPostmaster(mail,sout.toString());    throw new MessagingException("Error getting message content",ioe);  } finally {    theJDBCUtil.closeJDBCStatement(selectStmt);    theJDBCUtil.closeJDBCStatement(deleteStmt);    try {      if (conn != null && dbUpdated && !conn.getAutoCommit()) {        conn.rollback();        dbUpdated=false;      }    } catch (    Exception e) {    }    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  public void startNewStream(Reader reader){  this.startNewStream(reader,false);}  }
class C{  public CSVReader(Reader reader,int line,CSVParser csvParser,boolean multiLine){  this(reader,line,csvParser);  this.multiLine=multiLine;}  }
class C{  public GridTuple3(@Nullable V1 val1,@Nullable V2 val2,@Nullable V3 val3){  this.val1=val1;  this.val2=val2;  this.val3=val3;}  }
class C{  public boolean hasPathSum(TreeNode root,int sum){  if (root == null)   return false;  sum-=root.val;  return root.left == null && root.right == null && sum == 0 || hasPathSum(root.left,sum) || hasPathSum(root.right,sum);}  }
class C{  static public void assertEquals(String message,double expected,double actual,double delta){  if (Double.compare(expected,actual) == 0) {    return;  }  if (!(Math.abs(expected - actual) <= delta)) {    failNotEquals(message,new Double(expected),new Double(actual));  }}  }
class C{  public static double[][] transpose(double[][] mat){  int m=mat.length;  int n=mat[0].length;  double[][] res=new double[n][];  for (int i=0; i < n; ++i) {    res[i]=new double[m];    for (int j=0; j < m; ++j) {      res[i][j]=mat[j][i];    }  }  return (res);}  }
class C{  private static void replaceCurrencyData(Pattern pattern,String ctry,String curdata){  if (ctry.length() != 2) {    info("currency.properties entry for " + ctry + " is ignored because of the invalid country code.",null);    return;  }  Matcher m=pattern.matcher(curdata);  if (!m.find() || (m.group(4) == null && countOccurrences(curdata,',') >= 3)) {    info("currency.properties entry for " + ctry + " ignored because the value format is not recognized.",null);    return;  }  try {    if (m.group(4) != null && !isPastCutoverDate(m.group(4))) {      info("currency.properties entry for " + ctry + " ignored since cutover date has not passed :"+ curdata,null);      return;    }  } catch (  ParseException ex) {    info("currency.properties entry for " + ctry + " ignored since exception encountered :"+ ex.getMessage(),null);    return;  }  String code=m.group(1);  int numeric=Integer.parseInt(m.group(2));  int entry=numeric << NUMERIC_CODE_SHIFT;  int fraction=Integer.parseInt(m.group(3));  if (fraction > SIMPLE_CASE_COUNTRY_MAX_DEFAULT_DIGITS) {    info("currency.properties entry for " + ctry + " ignored since the fraction is more than "+ SIMPLE_CASE_COUNTRY_MAX_DEFAULT_DIGITS+ ":"+ curdata,null);    return;  }  int index;  for (index=0; index < scOldCurrencies.length; index++) {    if (scOldCurrencies[index].equals(code)) {      break;    }  }  if (index == scOldCurrencies.length) {    entry|=(fraction << SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT) | (code.charAt(2) - 'A');  } else {    entry|=SPECIAL_CASE_COUNTRY_MASK | (index + SPECIAL_CASE_COUNTRY_INDEX_DELTA);  }  setMainTableEntry(ctry.charAt(0),ctry.charAt(1),entry);}  }
class C{  public static void transformDomDocument(Transformer transformer,Node node,OutputStream os) throws TransformerException {  DOMSource source=new DOMSource(node);  StreamResult result=new StreamResult(os);  transformer.transform(source,result);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"PARENT\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"UID\" TEXT,"+ "\"TOKEN\" TEXT,"+ "\"PHONE\" TEXT,"+ "\"ALIAS\" TEXT,"+ "\"SEX\" INTEGER,"+ "\"BIRTHDAY\" INTEGER,"+ "\"HEAD_THUMB\" TEXT);");}  }
class C{  public void addVolumesUsingREST(StorageSystem storage,URI exportMaskURI,VolumeURIHLU[] volumeURIHLUs,List<Initiator> initiatorList,TaskCompleter taskCompleter){  _log.info("{} addVolume START...",storage.getLabel());  try {    if (volumeURIHLUs != null && volumeURIHLUs.length > 0) {      ExportMask exportMask=_dbClient.queryObject(ExportMask.class,exportMaskURI);      final String storageIP=storage.getSmisProviderIP();      XIVRestClient restExportOpr=getRestClient(storage);      URI hostName=null;      Set<Initiator> exportMaskInits=ExportMaskUtils.getInitiatorsForExportMask(_dbClient,exportMask,null);      Iterator<Initiator> exportMaskInitsItr=exportMaskInits.iterator();      if (exportMaskInitsItr.hasNext()) {        hostName=exportMaskInitsItr.next().getHost();      }      final Host host=_dbClient.queryObject(Host.class,hostName);      String exportName=host.getLabel();      String clusterName=null;      final String exportType=ExportMaskUtils.getExportType(_dbClient,exportMask);      if (ExportGroup.ExportGroupType.Cluster.name().equals(exportType)) {        Cluster cluster=_dbClient.queryObject(Cluster.class,host.getCluster());        clusterName=cluster.getLabel();        exportName=clusterName;      }      List<BlockObject> userAddedVolumes=new ArrayList<BlockObject>();      for (      VolumeURIHLU volumeURIHLU : volumeURIHLUs) {        final BlockObject blockObject=getBlockObject(volumeURIHLU.getVolumeURI());        final String volumeHLU=volumeURIHLU.getHLU();        if (volumeHLU != null && !volumeHLU.equalsIgnoreCase(ExportGroup.LUN_UNASSIGNED_STR)) {          int hluDec=Integer.parseInt(volumeHLU,16);          if (hluDec > MAXIMUM_LUN) {            String errMsg=String.format(INVALID_LUN_ERROR_MSG,hluDec,MAXIMUM_LUN);            _log.error(errMsg);            throw new Exception(errMsg);          } else {            restExportOpr.exportVolume(storageIP,exportType,exportName,blockObject.getLabel(),String.valueOf(hluDec),isSnapshot(volumeURIHLU.getVolumeURI()));            userAddedVolumes.add(blockObject);          }        }      }      exportMask.addToUserCreatedVolumes(userAddedVolumes);      _dbClient.updateObject(exportMask);      taskCompleter.ready(_dbClient);    }  } catch (  Exception e) {    _log.error("Unexpected error: addVolume failed.",e);    ServiceError error=XIVRestException.exceptions.methodFailed("addVolume",e);    taskCompleter.error(_dbClient,error);  }  _log.info("{} addVolume END...",storage.getLabel());}  }
class C{  private float applyFriction(float velocity,float simulationRate){  if (isZero(velocity)) {    velocity=0.0f;  } else   if (velocity > 0) {    velocity=Math.max(0.0f,velocity - (FRICTION * simulationRate));  } else {    velocity=Math.min(0.0f,velocity + (FRICTION * simulationRate));  }  return velocity;}  }
class C{  public static Map<String,Object> flowModToStorageEntry(OFFlowMod fm,String sw,String name) throws Exception {  Map<String,Object> entry=new HashMap<String,Object>();  entry.put(StaticFlowEntryPusher.COLUMN_NAME,name);  entry.put(StaticFlowEntryPusher.COLUMN_SWITCH,sw);  entry.put(StaticFlowEntryPusher.COLUMN_ACTIVE,Boolean.toString(true));  entry.put(StaticFlowEntryPusher.COLUMN_PRIORITY,Integer.toString(fm.getPriority()));  entry.put(StaticFlowEntryPusher.COLUMN_IDLE_TIMEOUT,Integer.toString(fm.getIdleTimeout()));  entry.put(StaticFlowEntryPusher.COLUMN_HARD_TIMEOUT,Integer.toString(fm.getHardTimeout()));switch (fm.getVersion()) {case OF_10:    if (fm.getActions() != null) {      entry.put(StaticFlowEntryPusher.COLUMN_ACTIONS,ActionUtils.actionsToString(fm.getActions(),log));    }  break;case OF_11:case OF_12:case OF_13:case OF_14:default :if (fm.getTableId() != null) {  entry.put(StaticFlowEntryPusher.COLUMN_TABLE_ID,Short.toString(fm.getTableId().getValue()));}if (fm.getInstructions() != null) {List<OFInstruction> instructions=fm.getInstructions();for (OFInstruction inst : instructions) {switch (inst.getType()) {case GOTO_TABLE:    entry.put(StaticFlowEntryPusher.COLUMN_INSTR_GOTO_TABLE,InstructionUtils.gotoTableToString(((OFInstructionGotoTable)inst),log));  break;case WRITE_METADATA:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_METADATA,InstructionUtils.writeMetadataToString(((OFInstructionWriteMetadata)inst),log));break;case WRITE_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS,InstructionUtils.writeActionsToString(((OFInstructionWriteActions)inst),log));break;case APPLY_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS,InstructionUtils.applyActionsToString(((OFInstructionApplyActions)inst),log));break;case CLEAR_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_CLEAR_ACTIONS,InstructionUtils.clearActionsToString(((OFInstructionClearActions)inst),log));break;case METER:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_GOTO_METER,InstructionUtils.meterToString(((OFInstructionMeter)inst),log));break;case EXPERIMENTER:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_EXPERIMENTER,InstructionUtils.experimenterToString(((OFInstructionExperimenter)inst),log));break;default :log.error("Could not decode OF1.1+ instruction type {}",inst);}}}}Match match=fm.getMatch();Iterator<MatchField<?>> itr=match.getMatchFields().iterator();while (itr.hasNext()) {@SuppressWarnings("rawtypes") MatchField mf=itr.next();switch (mf.id) {case IN_PORT:entry.put(StaticFlowEntryPusher.COLUMN_IN_PORT,Integer.toString((match.get(MatchField.IN_PORT)).getPortNumber()));break;case ETH_SRC:entry.put(StaticFlowEntryPusher.COLUMN_DL_SRC,match.get(MatchField.ETH_SRC).toString());break;case ETH_DST:entry.put(StaticFlowEntryPusher.COLUMN_DL_DST,match.get(MatchField.ETH_DST).toString());break;case VLAN_VID:entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN,match.get(MatchField.VLAN_VID).getVlan());break;case VLAN_PCP:entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN_PCP,Byte.toString(match.get(MatchField.VLAN_PCP).getValue()));break;case ETH_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_DL_TYPE,match.get(MatchField.ETH_TYPE).getValue());break;case IP_ECN:entry.put(StaticFlowEntryPusher.COLUMN_NW_ECN,Byte.toString(match.get(MatchField.IP_ECN).getEcnValue()));break;case IP_DSCP:entry.put(StaticFlowEntryPusher.COLUMN_NW_DSCP,Byte.toString((byte)(match.get(MatchField.IP_DSCP).getDscpValue())));break;case IP_PROTO:entry.put(StaticFlowEntryPusher.COLUMN_NW_PROTO,Short.toString(match.get(MatchField.IP_PROTO).getIpProtocolNumber()));break;case IPV4_SRC:entry.put(StaticFlowEntryPusher.COLUMN_NW_SRC,match.get(MatchField.IPV4_SRC).toString());break;case IPV4_DST:entry.put(StaticFlowEntryPusher.COLUMN_NW_DST,match.get(MatchField.IPV4_DST).toString());break;case TCP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_TCP_SRC,match.get(MatchField.TCP_SRC).getPort());break;case UDP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_UDP_SRC,match.get(MatchField.UDP_SRC).getPort());break;case SCTP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_SCTP_SRC,match.get(MatchField.SCTP_SRC).getPort());break;case TCP_DST:entry.put(StaticFlowEntryPusher.COLUMN_TCP_DST,match.get(MatchField.TCP_DST).getPort());break;case UDP_DST:entry.put(StaticFlowEntryPusher.COLUMN_UDP_DST,match.get(MatchField.UDP_DST).getPort());break;case SCTP_DST:entry.put(StaticFlowEntryPusher.COLUMN_SCTP_DST,match.get(MatchField.SCTP_DST).getPort());break;case ICMPV4_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP_TYPE,match.get(MatchField.ICMPV4_TYPE).getType());break;case ICMPV4_CODE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP_CODE,match.get(MatchField.ICMPV4_CODE).getCode());break;case ARP_OP:entry.put(StaticFlowEntryPusher.COLUMN_ARP_OPCODE,match.get(MatchField.ARP_OP).getOpcode());break;case ARP_SHA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_SHA,match.get(MatchField.ARP_SHA).toString());break;case ARP_THA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_DHA,match.get(MatchField.ARP_THA).toString());break;case ARP_SPA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_SPA,match.get(MatchField.ARP_SPA).toString());break;case ARP_TPA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_DPA,match.get(MatchField.ARP_TPA).toString());break;case IPV6_SRC:entry.put(StaticFlowEntryPusher.COLUMN_NW6_SRC,match.get(MatchField.IPV6_SRC).toString());break;case IPV6_DST:entry.put(StaticFlowEntryPusher.COLUMN_NW6_DST,match.get(MatchField.IPV6_DST).toString());break;case IPV6_FLABEL:entry.put(StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL,match.get(MatchField.IPV6_FLABEL).toString());break;case ICMPV6_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE,String.valueOf(match.get(MatchField.ICMPV6_TYPE).getValue()));break;case ICMPV6_CODE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_CODE,match.get(MatchField.ICMPV6_CODE).getValue());break;case IPV6_ND_SLL:entry.put(StaticFlowEntryPusher.COLUMN_ND_SLL,match.get(MatchField.IPV6_ND_SLL).toString());break;case IPV6_ND_TLL:entry.put(StaticFlowEntryPusher.COLUMN_ND_TLL,match.get(MatchField.IPV6_ND_TLL).toString());break;case IPV6_ND_TARGET:entry.put(StaticFlowEntryPusher.COLUMN_ND_TARGET,match.get(MatchField.IPV6_ND_TARGET).toString());break;case MPLS_LABEL:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_LABEL,match.get(MatchField.MPLS_LABEL).getValue());break;case MPLS_TC:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_TC,match.get(MatchField.MPLS_TC).getValue());break;case MPLS_BOS:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_BOS,match.get(MatchField.MPLS_BOS).getValue());break;case METADATA:entry.put(StaticFlowEntryPusher.COLUMN_METADATA,match.get(MatchField.METADATA).getValue().getValue());break;case TUNNEL_ID:entry.put(StaticFlowEntryPusher.COLUMN_TUNNEL_ID,match.get(MatchField.TUNNEL_ID).getValue());break;default :log.error("Unhandled Match when parsing OFFlowMod: {}, {}",mf,mf.id);break;}}int result=StaticFlowEntryPusherResource.checkActions(entry);if (result == -1) throw new Exception("Invalid action/instructions");return entry;}  }
class C{  @Override public int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  public void intervalBegan(TimedElement e,Interval i){}  }
class C{  public void createPictScenario13() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-02 00:00:00"));  String supplierAdminId="Pict13Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict13SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_ASYNC_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ASYNC_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="Pict13Customer";  VOOrganization customer=orgSetup.registerCustomer("Pict13CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.createMarketingPermission(supplierAdmin.getKey(),supplier.getOrganizationId(),example2TechService);  VOServiceDetails unitServTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT13_UNIT_HOUR_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,example2TechService,supplierMarketplace);  VOServiceDetails serviceUnitDetails=serviceSetup.savePriceModelForCustomer(unitServTemplate,TestPriceModel.EXAMPLE_PICT13_UNIT_HOUR,customer);  VOServiceDetails freeTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT13_FREE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT13_UNIT_HOUR,example2TechService,supplierMarketplace);  VOServiceDetails serviceFreeDetails=serviceSetup.savePriceModelForCustomer(freeTemplate,TestPriceModel.FREE,customer);  unitServTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),unitServTemplate,freeTemplate);  serviceUnitDetails=serviceSetup.activateMarketableService(serviceUnitDetails);  serviceFreeDetails=serviceSetup.activateMarketableService(serviceFreeDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceUnitDetails,"ADMIN");  serviceUnitDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceUnitDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_13",serviceUnitDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-03 00:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-03 00:00:00"));  role=VOServiceFactory.getRole(serviceUnitDetails,"USER");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-10-04 10:10:00"),"MAX_FOLDER_NUMBER","5");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-04 10:20:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(1),VOServiceFactory.getRole(serviceUnitDetails,"ADMIN"),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-04 10:30:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(1),VOServiceFactory.getRole(serviceUnitDetails,"USER"),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-06 00:00:00"));  subDetails=subscrSetup.revokeUser(basicSetup.getSecondCustomerUser1(),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-07 02:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-07 02:10:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-07 02:20:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  role=VOServiceFactory.getRole(serviceUnitDetails,"USER");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-08 00:00:00"));  subDetails=subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),role,subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-12 00:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModelPeriodFee(subDetails.getPriceModel(),new BigDecimal("1.00"));  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),subDetails,newSubPriceModel,customer);  serviceFreeDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceFreeDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-29 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceFreeDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-30 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(supplierAdmin.getKey(),customerAdmin,upgradedSubDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-15 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceUnitDetails);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_13",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_13",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_13",customer);}  }
class C{  public static Record createRecord(ModelRecord modelRecord) throws DataFileException {  Record record=new Record(modelRecord);  return record;}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  public void init(int size,int certainty,SecureRandom random){  this.size=size;  this.certainty=certainty;  this.random=random;}  }
class C{  public CStepBlockHotkeyAction(final JFrame parent,final ZyGraph graph,final IFrontEndDebuggerProvider panel){  Preconditions.checkNotNull(panel,"IE01654: Panel argument can not be null");  m_debugPerspectiveModel=panel;  m_parent=parent;  m_graph=graph;}  }
class C{  public List<String> extraMinecraftArguments(){  return extraMinecraftArguments;}  }
class C{  protected void activateFrame(JInternalFrame f){  super.activateFrame(f);  setColors(f);}  }
class C{  public void saveCacheXmlForReconnect(boolean sharedConfigEnabled){  GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  if (cache != null) {    if (!Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "autoReconnect-useCacheXMLFile") && !sharedConfigEnabled) {      try {        logger.info("generating XML to rebuild the cache after reconnect completes");        StringPrintWriter pw=new StringPrintWriter();        CacheXmlGenerator.generate((Cache)cache,pw,true,false);        String cacheXML=pw.toString();        cache.getCacheConfig().setCacheXMLDescription(cacheXML);        logger.info("XML generation completed: {}",cacheXML);      } catch (      CancelException e) {        logger.info(LocalizedMessage.create(LocalizedStrings.GroupMembershipService_PROBLEM_GENERATING_CACHE_XML),e);      }    } else     if (sharedConfigEnabled && !cache.getCacheServers().isEmpty()) {      List<CacheServerCreation> list=new ArrayList<>(cache.getCacheServers().size());      for (      final Object o : cache.getCacheServers()) {        CacheServerImpl cs=(CacheServerImpl)o;        if (cs.isDefaultServer()) {          CacheServerCreation bsc=new CacheServerCreation(cache,cs);          list.add(bsc);        }      }      cache.getCacheConfig().setCacheServerCreation(list);      logger.info("CacheServer configuration saved");    }  }}  }
class C{  public void paint(Graphics g){  if (isOpaque()) {    Rectangle r=g.getClipBounds();    Color c=getBackground();    if (c == null)     c=Color.lightGray;    g.setColor(c);    if (r != null) {      g.fillRect(r.x,r.y,r.width,r.height);    } else {      g.fillRect(0,0,getWidth(),getHeight());    }  }  super.paint(g);}  }
class C{  protected void unlockCG(DbClient dbClient,ControllerLockingService locker) throws DeviceControllerException {  if (locker == null && lockedName != null) {    _logger.error(String.format("Completer is not freeing up lock: %s!  This error will lead to a stray lock in the system and must be addressed",lockedName));    throw DeviceControllerExceptions.recoverpoint.invalidUnlock(lockedName);  }  List<URI> volumeIds=new ArrayList<URI>();  for (  URI id : getIds()) {    if (URIUtil.isType(id,BlockSnapshot.class)) {      BlockSnapshot snapshot=dbClient.queryObject(BlockSnapshot.class,id);      volumeIds.add(snapshot.getParent().getURI());    } else     if (URIUtil.isType(id,BlockConsistencyGroup.class)) {      List<Volume> cgVolumes=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,Volume.class,getVolumesByConsistencyGroup(getId()));      if (cgVolumes != null && !cgVolumes.isEmpty()) {        volumeIds.add(cgVolumes.get(0).getId());      }    } else {      volumeIds.add(id);    }  }  if (locker != null && lockedName != null) {    for (    URI id : volumeIds) {      Volume volume=dbClient.queryObject(Volume.class,id);      if (volume != null) {        if (volume.getProtectionController() != null && volume.getProtectionSet() != null) {          ProtectionSystem rpSystem=dbClient.queryObject(ProtectionSystem.class,volume.getProtectionController());          if (rpSystem != null) {            if (locker.releasePersistentLock(lockedName,_opId)) {              _logger.info("Released lock: " + lockedName);              lockedName=null;              break;            } else {              _logger.info("Failed to release lock: " + lockedName);            }          }        }      }    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.IDENTIFIABLE_ELEMENT;}  }
class C{  public void testHeadDelimiter() throws Exception {  byte[] delim=array(F.t(wrap(2),8));  byte[] data=array(F.t(delim,1),F.t(wrap(1),8));  assertSplit(0,4,0,8,data,delim);  assertSplit(0,8,0,8,data,delim);  assertSplit(0,12,0,16,data,delim);  assertSplit(0,16,0,16,data,delim);  assertSplitNull(2,2,data,delim);  assertSplitNull(2,6,data,delim);  assertSplit(2,10,8,8,data,delim);  assertSplit(2,14,8,8,data,delim);  assertSplit(8,4,8,8,data,delim);  assertSplit(8,8,8,8,data,delim);  assertSplitNull(10,2,data,delim);  assertSplitNull(10,6,data,delim);}  }
class C{  public void clearList(){  this.myMaps.clear();}  }
class C{  @org.hamcrest.Factory public static <T>org.hamcrest.Matcher<Collection<T>> equivalentTo(final Collection<T> collection){  return new IsEquivalent<>(collection);}  }
class C{  private void grestore(){  int count=mGStateStack.size();  mGStateStack.remove(count - 1);  mPSStream.println(GRESTORE_STR);}  }
class C{  public VirtualFile resolve(SinglePathResolver resolver,String pathStr){  if (pathStr == null) {    return null;  }  VirtualFile virt=null;  if (resolver != null) {    virt=resolver.resolve(pathStr);  }  if (virt == null) {    virt=checkSinglePathResolvers(virt,pathStr);  }  return virt;}  }
class C{  Animator(Container parent,Collection<BoundData> bounds){  setBounds(bounds);  timer=new Timer(16,this);  this.parent=parent;}  }
class C{  private void createTriggerData(final boolean createTriggerProcessIds,final boolean assignTDToSecondSupplier,final TriggerType triggerType) throws Exception {  PlatformUser triggerUser=supplierUser;  Organization triggerOrg=supplier;  if (assignTDToSecondSupplier) {    triggerUser=supplier2User;    triggerOrg=supplier2;  }  TriggerDefinition td=TriggerDefinitions.createSuspendingTriggerDefinition(ds,triggerOrg,triggerType);  tp=TriggerProcesses.createPendingTriggerProcess(ds,triggerUser,td);  tp.addTriggerProcessParameter(TriggerProcessParameterName.USER,user);  triggerProcessData=new TriggerProcessMessageData(tp,new TriggerMessage());  if (createTriggerProcessIds) {    createTriggerIds(tp);  }}  }
class C{  @Override public String toString(){  return value != null ? String.format("Optional[%s]",value) : "Optional.empty";}  }
class C{  static public Timestamp addDays(Timestamp day,int offset){  if (day == null)   day=new Timestamp(System.currentTimeMillis());  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(day);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  if (offset != 0)   cal.add(Calendar.DAY_OF_YEAR,offset);  return new Timestamp(cal.getTimeInMillis());}  }
class C{  public NodeR(double result,int children){  super(children);  this.result=result;}  }
class C{  public static float intersectSegmentCircleDisplace(Vector2 start,Vector2 end,Vector2 point,float radius,Vector2 displacement){  float u=(point.x - start.x) * (end.x - start.x) + (point.y - start.y) * (end.y - start.y);  float d=start.dst(end);  u/=(d * d);  if (u < 0 || u > 1)   return Float.POSITIVE_INFINITY;  tmp.set(end.x,end.y,0).sub(start.x,start.y,0);  tmp2.set(start.x,start.y,0).add(tmp.mul(u));  d=tmp2.dst(point.x,point.y,0);  if (d < radius) {    displacement.set(point).sub(tmp2.x,tmp2.y).nor();    return d;  } else   return Float.POSITIVE_INFINITY;}  }
class C{  public synchronized void removeAllNotifications(){  TimerAlarmClock alarmClock;  for (  Object[] obj : timerTable.values()) {    alarmClock=(TimerAlarmClock)obj[ALARM_CLOCK_INDEX];    alarmClock.cancel();  }  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"removeAllNotifications","removing all timer notifications");  timerTable.clear();  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"removeAllNotifications","all timer notifications removed");  counterID=0;  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"removeAllNotifications","timer notification counter ID reset");}  }
class C{  private void startAuthentication(){  Preference.putString(context,Constants.DEVICE_TYPE,deviceType);  if (CommonUtils.isNetworkAvailable(context)) {    String clientId=Preference.getString(context,Constants.CLIENT_ID);    String clientSecret=Preference.getString(context,Constants.CLIENT_SECRET);    String clientName;    if (clientId == null || clientSecret == null) {      String clientCredentials=Preference.getString(context,getResources().getString(R.string.shared_pref_client_credentials));      if (clientCredentials != null) {        try {          JSONObject payload=new JSONObject(clientCredentials);          clientId=payload.getString(Constants.CLIENT_ID);          clientSecret=payload.getString(Constants.CLIENT_SECRET);          clientName=payload.getString(Constants.CLIENT_NAME);          if (clientName != null && !clientName.isEmpty()) {            Preference.putString(context,Constants.CLIENT_NAME,clientName);          }          if (clientId != null && !clientId.isEmpty() && clientSecret != null && !clientSecret.isEmpty()) {            initializeIDPLib(clientId,clientSecret);          }        } catch (        JSONException e) {          String msg="error occurred while parsing client credential payload";          Log.e(TAG,msg,e);          CommonDialogUtils.stopProgressDialog(progressDialog);          showInternalServerErrorMessage();        }      } else {        String msg="error occurred while retrieving client credentials";        Log.e(TAG,msg);        CommonDialogUtils.stopProgressDialog(progressDialog);        showInternalServerErrorMessage();      }    } else {      initializeIDPLib(clientId,clientSecret);    }  } else {    CommonDialogUtils.stopProgressDialog(progressDialog);    CommonDialogUtils.showNetworkUnavailableMessage(context);  }}  }
class C{  public tt addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static void dumpCurrentRow(ICursor cursor,StringBuilder builder){  dumpCurrentRow(cursor,20,builder);}  }
class C{  public CDefaultFieldDescription(final T value,final IHelpInformation help){  m_value=value;  m_help=help;}  }
class C{  public HCardParser(URL url) throws IOException {  this(Jsoup.parse(url,30000),url.toString());}  }
class C{  public String dumpWindow(){  StringBuffer sb=new StringBuffer(toString());  sb.append(": \r\n");  int cols=getCols();  int rows=getRows();  for (int y=0; y < cols; y++) {    sb.append(y % 10);  }  sb.append("\r\n");  for (int x=0; x < rows; x++) {    for (int y=0; y < cols; y++) {      if (buffer[x][y] > 0x19 && buffer[x][y] < 0x7F) {        sb.append(buffer[x][y]);      } else {        sb.append(".");      }    }    sb.append("\r\n");  }  for (int x=0; x < rows; x++) {    for (int y=0; y < cols; y++) {      sb.append(Long.toHexString(cellFormat[x][y]) + ", ");    }    sb.append("\r\n");  }  return sb.toString();}  }
class C{  public static int bitValue(int value,int bit){  return 1 & (value >> bit);}  }
class C{  StackMapTable(ConstPool cp,byte[] newInfo){  super(cp,tag,newInfo);}  }
class C{  public final static long bitMask(int startBit,int endBit){  return ((1L << (endBit - startBit + 1)) - 1) << startBit;}  }
class C{  protected int maskRequestCode(int requestCode){  if ((requestCode & 0xffff0000) != 0) {    throw new IllegalArgumentException("Can only use lower 16 bits for requestCode");  }  int fragmentIndex=getActivity().getSupportFragmentManager().getFragments().indexOf(this);  int maskedCode=requestCode + ((fragmentIndex + 1) << 16);  return maskedCode;}  }
class C{  public static BaseNavigationFragment newInstance(){  NavJDFragment fragment=new NavJDFragment();  return fragment;}  }
class C{  public void flyThrough(Path path,Dialog owner){  if (flyThroughDialog == null) {    flyThroughDialog=new FlyThroughDialog(owner,this);    flyThroughDialog.pack();    flyThroughDialog.setLocationRelativeTo(owner);  }  flyThroughDialog.setPath(path);  flyThroughDialog.setVisible(true);}  }
class C{  private String realKey(String key){  return key.contains("/") ? key.substring(key.lastIndexOf('/') + 1,key.length()) : key;}  }
class C{  public static int readSingleByte(InputStream in) throws IOException {  byte[] buffer=new byte[1];  int result=in.read(buffer,0,1);  return (result != -1) ? buffer[0] & 0xff : -1;}  }
class C{  public void perform() throws Exception {  if (requiresInstallation()) {    install();  } else {    for (    FailedPlugin f : Jenkins.getInstance().getPluginManager().getFailedPlugins()) {      if (f.name.equals(name)) {        throw new Error("Plugin " + name + " failed to start",f.cause);      }    }  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static ReplyProcessor21 send(Set recipients,DM dm,int prId,int bucketId,BucketProfile bp,boolean requireAck){  if (recipients.isEmpty()) {    return null;  }  ReplyProcessor21 rp=null;  int procId=0;  if (requireAck) {    rp=new ReplyProcessor21(dm,recipients);    procId=rp.getProcessorId();  }  BucketProfileUpdateMessage m=new BucketProfileUpdateMessage(recipients,prId,procId,bucketId,bp);  dm.putOutgoing(m);  return rp;}  }
class C{  private void createDistributedSubRegion(List vmList,boolean firstCreationFlag){  Iterator nodeIterator=vmList.iterator();  while (nodeIterator.hasNext()) {    VM vm=(VM)nodeIterator.next();    vm.invoke(createSubRegion(firstCreationFlag,DISTRIBUTED_REGION));  }}  }
class C{  public Task<BlockSnapshotRestRep> resynchronizeBlockSnapshot(URI snapshotId){  return postTask(getIdUrl() + "/resynchronize",snapshotId);}  }
class C{  public Map<GraphNode,? extends SuccessorEdges> computeSuccessorHierarchy(EdgeMatcher<String> relations){  SuccessorsMap builder=new SuccessorsMap();  for (  GraphEdge edge : getEdges()) {    if (relations.edgeForward(edge)) {      builder.addForwardEdge(edge);    } else     if (relations.edgeReverse(edge)) {      builder.addReverseEdge(edge);    }  }  return builder.getSuccessorMap();}  }
class C{  private void updateClasspath(File root) throws IOException {  addURL(root.toURI().toURL());  File dependencies=new File(root,"META-INF/bundled-dependencies");  if (!dependencies.isDirectory()) {    LOGGER.warn(narWorkingDirectory + " does not contain META-INF/bundled-dependencies!");  }  addURL(dependencies.toURI().toURL());  if (dependencies.isDirectory()) {    for (    File libJar : dependencies.listFiles(JAR_FILTER)) {      addURL(libJar.toURI().toURL());    }  }}  }
class C{  double evaluateInstanceLeaveOneOut(Instance instance,double[] instA) throws Exception {  DecisionTableHashKey thekey;  double[] tempDist;  double[] normDist;  thekey=new DecisionTableHashKey(instA);  if (m_classIsNominal) {    if ((tempDist=m_entries.get(thekey)) == null) {      throw new Error("This should never happen!");    } else {      normDist=new double[tempDist.length];      System.arraycopy(tempDist,0,normDist,0,tempDist.length);      normDist[(int)instance.classValue()]-=instance.weight();      boolean ok=false;      for (      double element : normDist) {        if (Utils.gr(element,1.0)) {          ok=true;          break;        }      }      m_classPriorCounts[(int)instance.classValue()]-=instance.weight();      double[] classPriors=m_classPriorCounts.clone();      Utils.normalize(classPriors);      if (!ok) {        normDist=classPriors;      }      m_classPriorCounts[(int)instance.classValue()]+=instance.weight();      Utils.normalize(normDist);      if (m_evaluationMeasure == EVAL_AUC) {        m_evaluation.evaluateModelOnceAndRecordPrediction(normDist,instance);      } else {        m_evaluation.evaluateModelOnce(normDist,instance);      }      return Utils.maxIndex(normDist);    }  } else {    if ((tempDist=m_entries.get(thekey)) != null) {      normDist=new double[tempDist.length];      System.arraycopy(tempDist,0,normDist,0,tempDist.length);      normDist[0]-=(instance.classValue() * instance.weight());      normDist[1]-=instance.weight();      if (Utils.eq(normDist[1],0.0)) {        double[] temp=new double[1];        temp[0]=m_majority;        m_evaluation.evaluateModelOnce(temp,instance);        return m_majority;      } else {        double[] temp=new double[1];        temp[0]=normDist[0] / normDist[1];        m_evaluation.evaluateModelOnce(temp,instance);        return temp[0];      }    } else {      throw new Error("This should never happen!");    }  }}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2) private void replaceView(){  if (mMeshImageView == null)   mMeshImageView=new MeshImageView(getContext());  mMeshImageView.setImageBitmap(mDrawingCache);  this.removeView(mContent);  addView(mMeshImageView);  mCoreCalc.setDirection(mDirection);  mMeshImageView.setMeshVerts(mCoreCalc.createOffsetVerts(1,getHeight() / 2));}  }
class C{  @Override public boolean equals(Object obj){  if ((obj == null) || !(obj.getClass().equals(this.getClass()))) {    return false;  }  KernelEvaluation cmp=(KernelEvaluation)obj;  if (m_NumEvals != cmp.m_NumEvals) {    return false;  }  if (m_NumCacheHits != cmp.m_NumCacheHits) {    return false;  }  if (m_Evaluations.length != cmp.m_Evaluations.length) {    return false;  }  for (int n=0; n < m_Evaluations.length; n++) {    for (int i=0; i < m_Evaluations[n].length; i++) {      if (Double.isNaN(m_Evaluations[n][i]) && Double.isNaN(cmp.m_Evaluations[n][i])) {        continue;      }      if (m_Evaluations[n][i] != cmp.m_Evaluations[n][i]) {        return false;      }    }  }  return true;}  }
class C{  public Object eval(CallStack callstack,Interpreter interpreter) throws EvalError {  if (paramTypes != null)   return paramTypes;  insureParsed();  Class[] paramTypes=new Class[numArgs];  for (int i=0; i < numArgs; i++) {    BSHFormalParameter param=(BSHFormalParameter)jjtGetChild(i);    paramTypes[i]=(Class)param.eval(callstack,interpreter);  }  this.paramTypes=paramTypes;  return paramTypes;}  }
class C{  public void clear(){  interactions.remove(new BasicDBObject());  relationTypes.remove(new BasicDBObject());}  }
class C{  private int clusterForFeature(Histogram f){  double distance=clusters[0].getDistance(f);  double tmp;  int result=0;  for (int i=1; i < clusters.length; i++) {    tmp=clusters[i].getDistance(f);    if (tmp < distance) {      distance=tmp;      result=i;    }  }  return result;}  }
class C{  public boolean isChanged(){  return isFlags(FLAG_IS_CHANGED);}  }
class C{  public void invalidate(){  valid=false;}  }
class C{  private void readParameterAnnotations(final MethodVisitor mv,final Context context,int v,final boolean visible){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(context.desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  char[] c=context.buffer;  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,c),visible);      v=readAnnotationValues(v + 2,c,true,av);    }  }}  }
class C{  public static void postRequest(Request req){  lazyInitialize();  requestQueue.enqueue(req);}  }
class C{  @Override public UsageLicense findUsageLicense(Subscription subscription,String userId){  Query query=dm.createNamedQuery("Subscription.findUsageLicense");  query.setParameter("userId",userId);  query.setParameter("subscriptionKey",Long.valueOf(subscription.getKey()));  @SuppressWarnings("unchecked") List<UsageLicense> result=query.getResultList();  return result.isEmpty() ? null : result.get(0);}  }
class C{  public static synchronized void initServiceInfo(Provider p){  for (  Provider.Service service : p.getServices()) {    String type=service.getType();    if (cachedSecureRandomService == null && type.equals("SecureRandom")) {      cachedSecureRandomService=service;    }    String key=type + "." + service.getAlgorithm().toUpperCase(Locale.US);    if (!services.containsKey(key)) {      services.put(key,service);    }    for (    String alias : Engine.door.getAliases(service)) {      key=type + "." + alias.toUpperCase(Locale.US);      if (!services.containsKey(key)) {        services.put(key,service);      }    }  }}  }
class C{  public AbstractIconRetriever(String retrieverPath){  if (retrieverPath == null || retrieverPath.length() == 0) {    String msg=Logging.getMessage("nullValue.PathIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.retrieverPath=retrieverPath;}  }
class C{  public SignedToken(final byte[] body,String signature){  _tokenBody=body;  _signature=signature;}  }
class C{  public static DbException convertIOException(IOException e,String message){  if (message == null) {    Throwable t=e.getCause();    if (t instanceof DbException) {      return (DbException)t;    }    return get(ErrorCode.IO_EXCEPTION_1,e,e.toString());  }  return get(ErrorCode.IO_EXCEPTION_2,e,e.toString(),message);}  }
class C{  static public boolean isAllDay(Timestamp start,Timestamp end){  GregorianCalendar calStart=new GregorianCalendar();  calStart.setTimeInMillis(start.getTime());  GregorianCalendar calEnd=new GregorianCalendar();  calEnd.setTimeInMillis(end.getTime());  if (calStart.get(Calendar.HOUR_OF_DAY) == calEnd.get(Calendar.HOUR_OF_DAY) && calStart.get(Calendar.MINUTE) == calEnd.get(Calendar.MINUTE) && calStart.get(Calendar.SECOND) == calEnd.get(Calendar.SECOND) && calStart.get(Calendar.MILLISECOND) == calEnd.get(Calendar.MILLISECOND) && calStart.get(Calendar.HOUR_OF_DAY) == 0 && calStart.get(Calendar.MINUTE) == 0 && calStart.get(Calendar.SECOND) == 0 && calStart.get(Calendar.MILLISECOND) == 0 && start.before(end))   return true;  return false;}  }
class C{  public void deleteAll(){  for (  String tempFile : New.arrayList(refMap.values())) {    deleteFile(null,tempFile);  }  deleteUnused();}  }
class C{  public Jerry siblings(){  List<Node> result=new NodeList(nodes.length);  for (  Node node : nodes) {    Node[] allElements=node.getParentNode().getChildElements();    for (    Node sibling : allElements) {      if (sibling != node) {        result.add(sibling);      }    }  }  return new Jerry(this,result);}  }
class C{  public LazyReact sync(){  return withAsync(false);}  }
class C{  public long localNodeOrder(){  assert ctx.discovery() != null;  return ctx.discovery().localNode().order();}  }
class C{  public Position(Position position){  this(position.position,position.line,position.column);}  }
class C{  public final boolean hasConflict(DocumentBuilderSetting other){  if (other == null) {    throw new NullPointerException("other");  }  if (other == this) {    return true;  }  return strategy.hasConflict(other.strategy);}  }
class C{  public String globalInfo(){  return "The NaiveBayes class generates a fixed Bayes network structure " + "with arrows from the class variable to each of the attribute " + "variables.";}  }
class C{  public TLongDoubleHashMap(int initialCapacity,float loadFactor,TLongHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public synchronized void removePeer(JsonRpcPeer peer){  if (mReceivingPeers.remove(peer) != null) {    mReceivingPeersSnapshot=null;    if (mListener != null) {      mListener.onPeerUnregistered(peer);    }  }}  }
class C{  public static HashMap<String,String> parseMap(String s){  HashMap<String,String> map=New.hashMap();  for (int i=0, size=s.length(); i < size; ) {    int startKey=i;    i=s.indexOf(':',i);    if (i < 0) {      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"Not a map: {0}",s);    }    String key=s.substring(startKey,i++);    StringBuilder buff=new StringBuilder();    while (i < size) {      char c=s.charAt(i++);      if (c == ',') {        break;      } else       if (c == '\"') {        while (i < size) {          c=s.charAt(i++);          if (c == '\\') {            if (i == size) {              throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"Not a map: {0}",s);            }            c=s.charAt(i++);          } else           if (c == '\"') {            break;          }          buff.append(c);        }      } else {        buff.append(c);      }    }    map.put(key,buff.toString());  }  return map;}  }
class C{  public static Use makeUse(BytecodeInstruction instruction){  if (!instruction.isUse())   throw new IllegalArgumentException("expect wrap of a use to create one");  if (!DefUsePool.isKnown(instruction))   throw new IllegalArgumentException("expect DefUsePool to know the given BytecodeInstruction: " + instruction.toString());  return new Use(instruction);}  }
class C{  private void correctNimbusDefaultProblems(JTextComponent editor){  Color c=editor.getCaretColor();  if (c == null) {    editor.setCaretColor(RTextArea.getDefaultCaretColor());  }  c=editor.getSelectionColor();  if (c == null) {    c=UIManager.getColor("nimbusSelectionBackground");    if (c == null) {      c=UIManager.getColor("textHighlight");      if (c == null) {        c=new ColorUIResource(Color.BLUE);      }    }    editor.setSelectionColor(c);  }  c=editor.getSelectedTextColor();  if (c == null) {    c=UIManager.getColor("nimbusSelectedText");    if (c == null) {      c=UIManager.getColor("textHighlightText");      if (c == null) {        c=new ColorUIResource(Color.WHITE);      }    }    editor.setSelectedTextColor(c);  }  c=editor.getDisabledTextColor();  if (c == null) {    c=UIManager.getColor("nimbusDisabledText");    if (c == null) {      c=UIManager.getColor("textInactiveText");      if (c == null) {        c=new ColorUIResource(Color.DARK_GRAY);      }    }    editor.setDisabledTextColor(c);  }  Border border=editor.getBorder();  if (border == null) {    editor.setBorder(new BasicBorders.MarginBorder());  }  Insets margin=editor.getMargin();  if (margin == null) {    editor.setMargin(new InsetsUIResource(2,2,2,2));  }}  }
class C{  public void dispose(){}  }
class C{  protected void sequence_IndexedAccessExpressionTail_MemberExpression(ISerializationContext context,IndexedAccessExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public boolean launch(PackingPlan packing){  LOG.log(Level.FINE,"Launching topology for local cluster {0}",LocalContext.cluster(config));  if (!setupWorkingDirectory()) {    LOG.severe("Failed to setup working directory");    return false;  }  String[] schedulerCmd=getSchedulerCommand();  Process p=startScheduler(schedulerCmd);  if (p == null) {    LOG.severe("Failed to start SchedulerMain using: " + Arrays.toString(schedulerCmd));    return false;  }  LOG.log(Level.FINE,String.format("To check the status and logs of the topology, use the working directory %s",LocalContext.workingDirectory(config)));  return true;}  }
class C{  public ClampMountMech(){  super();}  }
class C{  private static void primitiveToString(final Object obj,final StringBuilder sb,final Field field,final Class<?> fieldClass){  try {    if (fieldClass == Double.TYPE || fieldClass == Float.TYPE) {      final double dbl=field.getDouble(obj);      sb.append(Utils.realFormat(dbl,4));    } else     if (fieldClass == Long.TYPE || fieldClass == Integer.TYPE || fieldClass == Short.TYPE || fieldClass == Byte.TYPE) {      final long fInt=field.getLong(obj);      sb.append(fInt);    } else     if (fieldClass == Boolean.TYPE) {      final boolean bool=field.getBoolean(obj);      sb.append(bool);    } else     if (fieldClass == Character.TYPE) {      final char ch=field.getChar(obj);      sb.append("'").append(ch).append("'");    }  } catch (  final IllegalArgumentException|IllegalAccessException e) {  }}  }
class C{  public static org.oscm.internal.vo.VOServiceFeedback convertToUp(org.oscm.vo.VOServiceFeedback oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOServiceFeedback newVO=new org.oscm.internal.vo.VOServiceFeedback();  newVO.setReviews(convertToUpVOServiceReview(oldVO.getReviews()));  newVO.setAverageRating(oldVO.getAverageRating());  newVO.setAllowedToWriteReview(oldVO.isAllowedToWriteReview());  newVO.setServiceKey(oldVO.getServiceKey());  return newVO;}  }
class C{  @Override public void onServiceDisconnected(ComponentName name){  mIsBound=false;  if (mListener != null) {    mListener.onServiceDisconnected(this);  }  if (DEBUG)   Log.d(TAG,"Disconnected from provider " + name);}  }
class C{  BarcodeRow(int width){  this.row=new byte[width];  currentLocation=0;}  }
class C{  public CubicLineChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,float smoothness){  super(dataset,renderer);  firstMultiplier=smoothness;  secondMultiplier=1 - firstMultiplier;}  }
class C{  private boolean findProperty(){  String prop;  List lserver=new ArrayList(0);  List lsearch=new ArrayList(0);  StringTokenizer st;  prop=System.getProperty("dns.server");  if (prop != null) {    st=new StringTokenizer(prop,",");    while (st.hasMoreTokens())     addServer(st.nextToken(),lserver);  }  prop=System.getProperty("dns.search");  if (prop != null) {    st=new StringTokenizer(prop,",");    while (st.hasMoreTokens())     addSearch(st.nextToken(),lsearch);  }  configureFromLists(lserver,lsearch);  return (servers != null && searchlist != null);}  }
class C{  public void replace(String param,String value){  int[] range;  while ((range=findTemplate(param)) != null)   buff.replace(range[0],range[1],value);}  }
class C{  @Override public boolean isSatisfiedBy(Assignment input){  for (  Condition cond : subconditions) {    if (operator == BinaryOperator.AND && !cond.isSatisfiedBy(input)) {      return false;    } else     if (operator == BinaryOperator.OR && cond.isSatisfiedBy(input)) {      return true;    }  }  return (operator == BinaryOperator.AND);}  }
class C{  public void testFilteredClassifier(){  try {    Instances data=getFilteredClassifierData();    for (int i=0; i < data.numAttributes(); i++) {      if (data.classIndex() == i)       continue;      if (data.attribute(i).isNominal()) {        ((MergeInfrequentNominalValues)m_FilteredClassifier.getFilter()).setAttributeIndices("" + (i + 1));        break;      }    }  } catch (  Exception e) {    fail("Problem setting up test for FilteredClassifier: " + e.toString());  }  super.testFilteredClassifier();}  }
class C{  public int indexOf(final BreadcrumbItem item){  checkWidget();  return this.items.indexOf(item);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:30.423 -0500",hash_original_method="8EF9A1828892EFEBF4B93362A866125C",hash_generated_method="69E9D8B4009D997BC9EE261646EC81E4") public boolean onOptionsItemSelected(MenuItem item){  return false;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  return null;}  }
class C{  public String toString(){  String s="CertificatePolicySet:[\n" + ids.toString() + "]\n";  return (s);}  }
class C{  public GeoBoundingBoxQueryBuilder bottomRight(double lat,double lon){  box[BOTTOM]=lat;  box[RIGHT]=lon;  return this;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public void runProcess(){  try {    ProcessCtl.process(null,m_WindowNo,parameterPanel,m_pi,null);  }  finally {    dispose();    if (m_ASyncProcess != null) {      m_ASyncProcess.unlockUI(m_pi);    }    hideBusyDialog();  }}  }
class C{  private static void verify(String name,int type){  if ((type < HARD) || (type > WEAK)) {    throw new IllegalArgumentException(name + " must be HARD, SOFT, WEAK.");  }}  }
class C{  public boolean delete(){  return fileIO.delete(filePath,false);}  }
class C{  public SmsMmsMessage(Context _context,long _messageId,long _threadId,long _timestamp,String _messageBody,int _unreadCount,int _messageType){  context=_context;  messageId=_messageId;  threadId=_threadId;  timestamp=_timestamp;  messageBody=_messageBody;  unreadCount=_unreadCount;  messageType=_messageType;  fromAddress=SmsPopupUtils.getMmsAddress(context,messageId);  fromEmailGateway=false;  contactName=PhoneNumberUtils.formatNumber(fromAddress);  ContactIdentification contactIdentify=SmsPopupUtils.getPersonIdFromPhoneNumber(context,fromAddress);  if (contactIdentify == null) {    contactIdentify=SmsPopupUtils.getPersonIdFromEmail(context,fromAddress);    if (contactIdentify != null) {      fromEmailGateway=true;    }  }  if (contactIdentify != null) {    contactId=contactIdentify.contactId;    contactLookupKey=contactIdentify.contactLookup;    contactName=contactIdentify.contactName;  }}  }
class C{  public static void main(String[] args) throws SchemaException {  Header.printHeader(ExtractHourlyActivityDensitiesFromPlans.class.toString(),args);  String populationFile=args[0];  String areaShapefile=args[1];  String outputFile=args[2];  String outputShapefile=args[3];  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(sc).readFile(populationFile);  ShapeFileReader sfr=new ShapeFileReader();  sfr.readFileAndInitialize(areaShapefile);  Collection<SimpleFeature> features=sfr.getFeatureSet();  if (features.size() > 1) {    LOG.warn("Multiple features in given shapefile. Number of features: " + features.size());  }  MultiPolygon city=null;  Iterator<SimpleFeature> iterator=features.iterator();  SimpleFeature sf=iterator.next();  if (sf.getDefaultGeometry() instanceof MultiPolygon) {    LOG.info("Great! Geometry is MultiPolygon.");    city=(MultiPolygon)sf.getDefaultGeometry();  }  LOG.info("Building grid from shapefile...");  GeneralGrid grid=new GeneralGrid(WIDTH,GridType.HEX);  grid.generateGrid(city);  Collection<Point> cells=grid.getGrid().values();  map=new HashedMap<Point,int[]>(cells.size());  for (  Point p : cells) {    int[] array=new int[24];    map.put(p,array);  }  List<Double> listWidths=new ArrayList<Double>();  List<Double> listHeights=new ArrayList<Double>();  LOG.info("Processing selected plans...");  GeometryFactory gf=new GeometryFactory();  CoordinateTransformation ct=TransformationFactory.getCoordinateTransformation("WGS84_SA_Albers","WGS84");  Counter counter=new Counter("   person # ");  for (  Person person : sc.getPopulation().getPersons().values()) {    Plan plan=person.getSelectedPlan();    double startTime=Double.NEGATIVE_INFINITY;    for (    PlanElement pe : plan.getPlanElements()) {      if (pe instanceof Leg) {        Leg leg=(Leg)pe;        startTime=leg.getDepartureTime() + leg.getTravelTime();      } else       if (pe instanceof Activity) {        Activity act=(Activity)pe;        Coord c=act.getCoord();        Point p=gf.createPoint(new Coordinate(c.getX(),c.getY()));        if (grid.isInGrid(p)) {          Point centroid=grid.getGrid().getClosest(p.getX(),p.getY());          if (startTime > Double.NEGATIVE_INFINITY) {            int hour=getHour(startTime);            int oldValue=map.get(centroid)[hour];            map.get(centroid)[hour]=oldValue + 1;          }          double radius=WIDTH / 2.0;          double height=Math.sqrt(3) / 2.0 * radius;          Coord c1=new Coord(p.getX() - radius,p.getY());          Coord c2=new Coord(p.getX() + radius,p.getY());          Coord c3=new Coord(p.getX() - 0.5 * radius,p.getY() + height);          Coord c4=new Coord(p.getX() - 0.5 * radius,p.getY() - height);          Coord c1c=ct.transform(c1);          Coord c2c=ct.transform(c2);          Coord c3c=ct.transform(c3);          Coord c4c=ct.transform(c4);          double d1=CoordUtils.calcEuclideanDistance(c1c,c2c);          double d2=CoordUtils.calcEuclideanDistance(c3c,c4c);          listWidths.add(d1);          listHeights.add(d2);        }      }    }    counter.incCounter();  }  counter.printCounter();  LOG.info(String.format("SA-Albers: width %.2f; height %.2f; ratio %.4f",WIDTH,HEIGHT,HEIGHT / WIDTH));  double meanWidth=getMean(listWidths);  double meanHeight=getMean(listHeights);  LOG.info(String.format("WGS84: width %.10f; height %.10f; ratio %.4f",meanWidth,meanHeight,meanHeight / meanWidth));  LOG.info("Writing output to file...");  BufferedWriter bw=IOUtils.getBufferedWriter(outputFile);  try {    bw.write("x,y,lon,lat,lon1,lat1,lon2,lat2,lon3,lat3,lon4,lat4,lon5,lat5,lon6,lat6,h00,h01,h02,h03,h04,h05,h06,h07,h08,h09,h10,h11,h12,h13,h14,h15,h16,h17,h18,h19,h20,h21,h22,h23");    bw.newLine();    for (    Point p : map.keySet()) {      Coord c1=new Coord(p.getX(),p.getY());      Coord c2=ct.transform(c1);      bw.write(String.format("%.4f,%.4f,%.8f,%.8f",p.getX(),p.getY(),c2.getX(),c2.getY()));      Polygon poly=getPolygonWgs84(p);      Coordinate[] ca=poly.getCoordinates();      for (int i=0; i < 6; i++) {        Coordinate c=ca[i];        bw.write(String.format(",%.6f,%.6f",c.x,c.y));      }      for (int i=0; i < 24; i++) {        bw.write(",");        bw.write(String.valueOf(map.get(p)[i]));      }      bw.newLine();    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot write to " + outputFile);  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close " + outputFile);    }  }  SimpleFeatureCollection collection=createFeatureCollection();  try {    writeShapefile(outputShapefile,collection);  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot write shapefile.");  }  Header.printFooter();}  }
class C{  public ModifierValue onEnd(final ModifierValue value){  return this.onEnd.apply(value);}  }
class C{  private void init(DerValue encoding) throws Asn1Exception, IOException, KrbApErrException, RealmException {  DerValue der, subDer;  if (((encoding.getTag() & (byte)0x1F) != (byte)0x02) || (encoding.isApplication() != true) || (encoding.isConstructed() != true)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) != (byte)0x00) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  authenticator_vno=subDer.getData().getBigInteger().intValue();  if (authenticator_vno != 5) {    throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);  }  Realm crealm=Realm.parse(der.getData(),(byte)0x01,false);  cname=PrincipalName.parse(der.getData(),(byte)0x02,false,crealm);  cksum=Checksum.parse(der.getData(),(byte)0x03,true);  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) == 0x04) {    cusec=subDer.getData().getBigInteger().intValue();  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  ctime=KerberosTime.parse(der.getData(),(byte)0x05,false);  if (der.getData().available() > 0) {    subKey=EncryptionKey.parse(der.getData(),(byte)0x06,true);  } else {    subKey=null;    seqNumber=null;    authorizationData=null;  }  if (der.getData().available() > 0) {    if ((der.getData().peekByte() & 0x1F) == 0x07) {      subDer=der.getData().getDerValue();      if ((subDer.getTag() & (byte)0x1F) == (byte)0x07) {        seqNumber=new Integer(subDer.getData().getBigInteger().intValue());      }    }  } else {    seqNumber=null;    authorizationData=null;  }  if (der.getData().available() > 0) {    authorizationData=AuthorizationData.parse(der.getData(),(byte)0x08,true);  } else {    authorizationData=null;  }  if (der.getData().available() > 0) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  public static PackingPlan.ContainerPlan[] sortOnContainerId(Set<PackingPlan.ContainerPlan> containers){  ArrayList<Integer> containerIds=new ArrayList<>();  PackingPlan.ContainerPlan[] currentContainers=new PackingPlan.ContainerPlan[containers.size()];  for (  PackingPlan.ContainerPlan container : containers) {    containerIds.add(container.getId());  }  Collections.sort(containerIds);  for (  PackingPlan.ContainerPlan container : containers) {    int position=containerIds.indexOf(container.getId());    currentContainers[position]=container;  }  return currentContainers;}  }
class C{  public ImportInsertedListener(Element importElement){  this.importElement=importElement;}  }
class C{  public void addDependency(ClassDeclaration c){  throw new CompilerError("addDependency");}  }
class C{  public boolean isComposite(){  return true;}  }
class C{  public void handleSearchButton(int index,int editResId){  EditText locationEdit=(EditText)findViewById(editResId);  InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);  imm.hideSoftInputFromWindow(locationEdit.getWindowToken(),0);  String locationAddress=locationEdit.getText().toString();  if (locationAddress.equals("")) {    removePoint(index);    map.invalidate();    return;  }  Toast.makeText(this,"Searching:\n" + locationAddress,Toast.LENGTH_LONG).show();  AutoCompleteOnPreferences.storePreference(this,locationAddress,SHARED_PREFS_APPKEY,PREF_LOCATIONS_KEY);  new GeocodingTask().execute(locationAddress,index);}  }
class C{  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {  ZkCmdExecutor cmdExecutor=new ZkCmdExecutor(zkClient.getZkClientTimeout());  cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE,zkClient);  cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE,zkClient);  cmdExecutor.ensureExists(ZkStateReader.ALIASES,zkClient);  byte[] emptyJson="{}".getBytes(StandardCharsets.UTF_8);  cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE,emptyJson,CreateMode.PERSISTENT,zkClient);  cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH,emptyJson,CreateMode.PERSISTENT,zkClient);}  }
class C{  public static PackageElement parentPackage(final Elements e,final PackageElement elem){  String fqnstart=elem.getQualifiedName().toString();  String fqn=fqnstart;  if (fqn != null && !fqn.isEmpty() && fqn.contains(".")) {    fqn=fqn.substring(0,fqn.lastIndexOf('.'));    return e.getPackageElement(fqn);  }  return null;}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  @SuppressWarnings("unchecked") public <T extends Comparable<T>>T remove(IProperty<T> property){  return (T)this.propertiesMap.remove(property);}  }
class C{  public static Collection<CacheStoreSessionListener> startStoreSessionListeners(GridKernalContext ctx,Factory<CacheStoreSessionListener>[] factories) throws IgniteCheckedException {  if (factories == null)   return null;  Collection<CacheStoreSessionListener> lsnrs=new ArrayList<>(factories.length);  for (  Factory<CacheStoreSessionListener> factory : factories) {    CacheStoreSessionListener lsnr=factory.create();    if (lsnr != null) {      ctx.resource().injectGeneric(lsnr);      if (lsnr instanceof LifecycleAware)       ((LifecycleAware)lsnr).start();      lsnrs.add(lsnr);    }  }  return lsnrs;}  }
class C{  public static void populateField(ByteProvider byteProvider,Object object,String fieldName) throws IOException {  int byteArraySize=getFieldSizeInBytes(object,fieldName);  doPopulateField(byteArraySize,byteProvider,object,fieldName);}  }
class C{  public int numObjectsAtLocationOfObject(Object obj){  Object location=getObjectLocation(obj);  if (location == null)   return 0; else   return numObjectsAtLocation(location);}  }
class C{  public String debugTipText(){  return "Whether debug information is printed.";}  }
class C{  private void refreshProject(final List<EditorPartPresenter> openedEditors){  projectExplorer.reloadChildren();  for (  EditorPartPresenter partPresenter : openedEditors) {    final VirtualFile file=partPresenter.getEditorInput().getFile();    eventBus.fireEvent(new FileContentUpdateEvent(file.getPath()));  }}  }
class C{  public final DoubleGrid3D upperBound(double toNoMoreThanThisMuch){  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       if (fieldxy[z] > toNoMoreThanThisMuch)       fieldxy[z]=toNoMoreThanThisMuch;    }  }  return this;}  }
class C{  public PreparingThread(){  setName("inspectit-preparing-thread");  setDaemon(true);}  }
class C{  @HLEFunction(nid=0x092968F4,version=150) public int sceKernelCpuSuspendIntr(){  int returnValue;  if (Interrupts.isInterruptsEnabled()) {    returnValue=flagInterruptsEnabled;    Interrupts.disableInterrupts();  } else {    returnValue=flagInterruptsDisabled;  }  return returnValue;}  }
class C{  String stacktraceToString(Throwable e){  StringBuilder sb=new StringBuilder();  sb.append(e.getMessage());  for (  StackTraceElement frame : e.getStackTrace()) {    sb.append("\r\n");    sb.append(frame.toString());  }  return sb.toString();}  }
class C{  @Nullable public static PsiElement findWhiteSpaceNode(@NotNull PsiFile file,int offset){  return doFindWhiteSpaceNode(file,offset).first;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  super.execute(mapping,form,request,response);  InstructorEditForm frm=(InstructorEditForm)form;  ActionMessages errors=new ActionMessages();  String instructorId=request.getParameter("instructorId");  String op=frm.getOp();  if (instructorId == null || instructorId.trim() == "")   throw new Exception(MSG.exceptionInstructorInfoNotSupplied());  sessionContext.checkPermission(instructorId,"DepartmentalInstructor",Right.InstructorEdit);  frm.setInstructorId(instructorId);  if (op.equals(MSG.actionBackToDetail()) && instructorId != null && instructorId.trim() != "") {    response.sendRedirect(response.encodeURL("instructorDetail.do?instructorId=" + instructorId));    return null;  }  if (op.equals(MSG.actionLookupInstructor())) {    errors=frm.validate(mapping,request);    if (errors.size() == 0) {      findMatchingInstructor(frm,request);      if (frm.getMatchFound() == null || !frm.getMatchFound().booleanValue()) {        errors.add("lookup",new ActionMessage("errors.generic",MSG.errorNoMatchingRecordsFound()));      }    }    saveErrors(request,errors);    return mapping.findForward("showEdit");  }  if ((op.equals(MSG.actionUpdateInstructor()) || op.equals(MSG.actionNextInstructor()) || op.equals(MSG.actionPreviousInstructor())) && instructorId != null && instructorId.trim() != "") {    errors=frm.validate(mapping,request);    if (errors.size() == 0 && isDeptInstructorUnique(frm,request)) {      doUpdate(frm,request);      if (op.equals(MSG.actionNextInstructor())) {        response.sendRedirect(response.encodeURL("instructorInfoEdit.do?instructorId=" + frm.getNextId()));        return null;      }      if (op.equals(MSG.actionPreviousInstructor())) {        response.sendRedirect(response.encodeURL("instructorInfoEdit.do?instructorId=" + frm.getPreviousId()));        return null;      }      ActionRedirect redirect=new ActionRedirect(mapping.findForward("showDetail"));      redirect.addParameter("instructorId",frm.getInstructorId());      return redirect;    } else {      if (errors.size() == 0) {        errors.add("uniqueId",new ActionMessage("errors.generic",MSG.errorInstructorIdAlreadyExistsInList()));      }      saveErrors(request,errors);    }  }  if (op.equals(MSG.actionDeleteInstructor())) {    doDelete(request,frm);    return mapping.findForward("showList");  }  if (op.equals(MSG.actionSelectInstructor())) {    String select=frm.getSearchSelect();    if (select != null && select.trim().length() > 0) {      if (select.equalsIgnoreCase("i2a2")) {        fillI2A2Info(frm,request);      } else {        fillStaffInfo(frm,request);      }    }    return mapping.findForward("showEdit");  }  doLoad(request,frm);  BackTracker.markForBack(request,"instructorDetail.do?instructorId=" + frm.getInstructorId(),MSG.backInstructor(frm.getName() == null ? "null" : frm.getName().trim()),true,false);  return mapping.findForward("showEdit");}  }
class C{  private int convertMillisecondsToFrames(long milliseconds){  return (int)(milliseconds / dataLine.getFormat().getSampleRate());}  }
class C{  public void write(XMLWriteable obj){  try {    obj.writeXML(this);  } catch (  java.io.IOException e) {  }}  }
class C{  private void doList(String name,Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  baseRequest.setHandled(true);  String token=request.getParameter(Constants.HTTP_PARAM_TOKEN);  response.setStatus(HttpServletResponse.SC_OK);  response.setContentType("text/plain");  PrintWriter pw=response.getWriter();  Set<String> selectorsSet=this.selectors.get(name).get(token);  if (null == selectorsSet) {    throw new IOException("Unknown token.");  }  for (  String selector : selectorsSet) {    pw.print("SELECTOR ");    pw.println(selector);  }  pw.print("SUBSCRIPTIONS ");  pw.println(this.subscriptions.get(name).containsKey(token) ? this.subscriptions.get(name).get(token).size() : 0);}  }
class C{  public static Date parse(final String str,final String fmt){  String[] slist=null;  String[] flist=null;  int d=0, m=0, y=0;  slist=str.split("/");  flist=fmt.split("/");  Date date;  if (slist.length != flist.length) {    date=new Date();  } else {    for (int i=0; i < flist.length; i++) {      final String sub=flist[i];      if (sub.equalsIgnoreCase("dd")) {        d=Integer.parseInt(slist[i]);      } else       if (sub.equalsIgnoreCase("mm")) {        m=Integer.parseInt(slist[i]);      } else       if (sub.equalsIgnoreCase("yyyy")) {        y=Integer.parseInt(slist[i]);        if (y < 100) {          y+=2000;        }      }    }    date=new Date(d,m,y);  }  return date;}  }
class C{  EmulatedFieldsForLoading(ObjectStreamClass streamClass){  this.streamClass=streamClass;  emulatedFields=new EmulatedFields(streamClass.getLoadFields(),streamClass.fields());}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.TRACE_DIRECTIVE___TRACE_ITEM_1:    return ((InternalEList<?>)getTraceItem_1()).basicRemove(otherEnd,msgs);case UmplePackage.TRACE_DIRECTIVE___ANONYMOUS_TRACE_DIRECTIVE_11:  return ((InternalEList<?>)getAnonymous_traceDirective_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void transform(AffineTransform Tx){  mGraphics.transform(Tx);}  }
class C{  public synchronized void pin(){  if (strongRef == null) {    strongRef=get();    if (DGCImpl.dgcLog.isLoggable(Log.VERBOSE)) {      DGCImpl.dgcLog.log(Log.VERBOSE,"strongRef = " + strongRef);    }  }}  }
class C{  private void addRoute(RecordRouteList recordRouteList){  try {    if (this.isClientDialog()) {      this.routeList=new RouteList();      ListIterator li=recordRouteList.listIterator(recordRouteList.size());      boolean addRoute=true;      while (li.hasPrevious()) {        RecordRoute rr=(RecordRoute)li.previous();        if (addRoute) {          Route route=new Route();          AddressImpl address=((AddressImpl)((AddressImpl)rr.getAddress()).clone());          route.setAddress(address);          route.setParameters((NameValueList)rr.getParameters().clone());          this.routeList.add(route);        }      }    } else {      this.routeList=new RouteList();      ListIterator li=recordRouteList.listIterator();      boolean addRoute=true;      while (li.hasNext()) {        RecordRoute rr=(RecordRoute)li.next();        if (addRoute) {          Route route=new Route();          AddressImpl address=((AddressImpl)((AddressImpl)rr.getAddress()).clone());          route.setAddress(address);          route.setParameters((NameValueList)rr.getParameters().clone());          routeList.add(route);        }      }    }  }  finally {    if (sipStack.getStackLogger().isLoggingEnabled()) {      Iterator it=routeList.iterator();      while (it.hasNext()) {        SipURI sipUri=(SipURI)(((Route)it.next()).getAddress().getURI());        if (!sipUri.hasLrParam()) {          if (sipStack.isLoggingEnabled()) {            sipStack.getStackLogger().logWarning("NON LR route in Route set detected for dialog : " + this);            sipStack.getStackLogger().logStackTrace();          }        }      }    }  }}  }
class C{  public static void walk(Tree ast,EPLTreeWalkerListener listener,String expression,String eplStatementForErrorMsg){  try {    if (log.isDebugEnabled()) {      log.debug(".walk Walking AST using walker " + listener.getClass().getName());    }    ParseTreeWalker walker=new ParseTreeWalker();    walker.walk(listener,(ParseTree)ast);    listener.end();  } catch (  RuntimeException e) {    log.info("Error walking statement [" + expression + "]",e);    throw e;  }}  }
class C{  public ArithDecoder(Input in){  mIn=in;  for (int i=1; i <= CODE_VALUE_BITS; ++i) {    bufferBit();  }}  }
class C{  private synchronized String prepareChannel(String channel){  if (channel == null || channel.isEmpty()) {    return null;  }  if (channel.startsWith("#")) {    channel=channel.substring(1);    if (channel.isEmpty()) {      return null;    }  }  return channel;}  }
class C{  public ManageReferralControl(boolean criticality){  super(OID,criticality,null);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public BridgeContext createSubBridgeContext(SVGOMDocument newDoc){  BridgeContext subCtx;  CSSEngine eng=newDoc.getCSSEngine();  if (eng != null) {    subCtx=(BridgeContext)newDoc.getCSSEngine().getCSSContext();    return subCtx;  }  subCtx=createBridgeContext(newDoc);  subCtx.primaryContext=primaryContext != null ? primaryContext : this;  subCtx.primaryContext.childContexts.add(new WeakReference(subCtx));  subCtx.dynamicStatus=dynamicStatus;  subCtx.setGVTBuilder(getGVTBuilder());  subCtx.setTextPainter(getTextPainter());  subCtx.setDocument(newDoc);  subCtx.initializeDocument(newDoc);  if (isInteractive())   subCtx.addUIEventListeners(newDoc);  return subCtx;}  }
class C{  public void hide(Animation anim){  hide(true,anim);}  }
class C{  public static IProposalComputer newUrnTypesProposalComputer(ContentAssistRequest contentAssistRequest){  IDOMAttr attribute=XmlContentAssistUtilities.getAttribute(contentAssistRequest);  if (attribute == null) {    return null;  }  Element element=attribute.getOwnerElement();  String attrValue=XmlContentAssistUtilities.getAttributeValueUsingMatchString(contentAssistRequest);  if (!element.getLocalName().equals(UiBinderConstants.UI_BINDER_ELEMENT_NAME) || element.getParentNode().getNodeType() == Node.ELEMENT_NODE || !attribute.getNamespaceURI().equals(UiBinderConstants.XMLNS_NAMESPACE)) {    return null;  }  return new StaticTextProposalComputer(new String[]{UiBinderConstants.UI_BINDER_XML_NAMESPACE,UiBinderConstants.URN_IMPORT_NAMESPACE_BEGINNING},attrValue,XmlContentAssistUtilities.getAttributeValueOffset(contentAssistRequest),attrValue.length(),null);}  }
class C{  public boolean isBlock(){  return blockTag;}  }
class C{  public ByteBuffer putDouble(double value){  return putLong(Numbers.doubleToRawLongBits(value));}  }
class C{  protected void needAppData() throws IOException {  if (!handshake_started) {    startHandshake();  }  int type;  if (logger != null) {    logger.println("SSLSocket.needAppData..");  }  try {    while (appDataIS.available() == 0) {switch (type=recordProtocol.unwrap()) {case ContentType.HANDSHAKE:        if (!handshakeProtocol.getStatus().equals(SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING)) {          doHandshake();        }      break;case ContentType.ALERT:    processAlert();  if (socket_was_closed) {    return;  }break;case ContentType.APPLICATION_DATA:if (logger != null) {logger.println("SSLSocket.needAppData: got the data");}break;default :reportFatalAlert(AlertProtocol.UNEXPECTED_MESSAGE,new SSLException("Unexpected message of type " + type + " has been got"));}if (alertProtocol.hasAlert()) {output.write(alertProtocol.wrap());alertProtocol.setProcessed();}if (socket_was_closed) {appDataIS.setEnd();return;}}} catch (AlertException e) {reportFatalAlert(e.getDescriptionCode(),e.getReason());}catch (EndOfSourceException e) {appDataIS.setEnd();}if (logger != null) {logger.println("SSLSocket.needAppData: app data len: " + appDataIS.available());}}  }
class C{  @Override public boolean isRequestForOperationCancelSet(){  return requestForOperationCancel;}  }
class C{  private int calculateNewCapacity(){  int oldCapacity=queue.length;  int newCapacity=(oldCapacity < 64) ? (oldCapacity + 1) * 2 : IntMath.checkedMultiply(oldCapacity / 2,3);  return capAtMaximumSize(newCapacity,maximumSize);}  }
class C{  static void writeEpochSec(long epochSec,DataOutput out) throws IOException {  if (epochSec >= -4575744000L && epochSec < 10413792000L && epochSec % 900 == 0) {    int store=(int)((epochSec + 4575744000L) / 900);    out.writeByte((store >>> 16) & 255);    out.writeByte((store >>> 8) & 255);    out.writeByte(store & 255);  } else {    out.writeByte(255);    out.writeLong(epochSec);  }}  }
class C{  public synchronized long size(){  return size;}  }
class C{  @Override protected void createLabels(){  String text=this.getGraphicLabel();  this.addLabel(text);  this.addLabel(text);}  }
class C{  private void decodePass(WritableRaster imRas,int xOffset,int yOffset,int xStep,int yStep,int passWidth,int passHeight){  if ((passWidth == 0) || (passHeight == 0)) {    return;  }  int bytesPerRow=(inputBands * passWidth * bitDepth + 7) / 8;  int eltsPerRow=(bitDepth == 16) ? bytesPerRow / 2 : bytesPerRow;  byte[] curr=new byte[bytesPerRow];  byte[] prior=new byte[bytesPerRow];  WritableRaster passRow=createRaster(passWidth,1,inputBands,eltsPerRow,bitDepth);  DataBuffer dataBuffer=passRow.getDataBuffer();  int type=dataBuffer.getDataType();  byte[] byteData=null;  short[] shortData=null;  if (type == DataBuffer.TYPE_BYTE) {    byteData=((DataBufferByte)dataBuffer).getData();  } else {    shortData=((DataBufferUShort)dataBuffer).getData();  }  int srcY, dstY;  for (srcY=0, dstY=yOffset; srcY < passHeight; srcY++, dstY+=yStep) {    int filter=0;    try {      filter=dataStream.read();      dataStream.readFully(curr,0,bytesPerRow);    } catch (    Exception e) {      e.printStackTrace();    }switch (filter) {case PNG_FILTER_NONE:      break;case PNG_FILTER_SUB:    decodeSubFilter(curr,bytesPerRow,bytesPerPixel);  break;case PNG_FILTER_UP:decodeUpFilter(curr,prior,bytesPerRow);break;case PNG_FILTER_AVERAGE:decodeAverageFilter(curr,prior,bytesPerRow,bytesPerPixel);break;case PNG_FILTER_PAETH:decodePaethFilter(curr,prior,bytesPerRow,bytesPerPixel);break;default :String msg=PropertyUtil.getString("PNGImageDecoder16");throw new RuntimeException(msg);}if (bitDepth < 16) {System.arraycopy(curr,0,byteData,0,bytesPerRow);} else {int idx=0;for (int j=0; j < eltsPerRow; j++) {shortData[j]=(short)((curr[idx] << 8) | (curr[idx + 1] & 0xff));idx+=2;}}processPixels(postProcess,passRow,imRas,xOffset,xStep,dstY,passWidth);byte[] tmp=prior;prior=curr;curr=tmp;}}  }
class C{  @Override public void stopUpdates(boolean value){  this.stopUpdates=value;}  }
class C{  public static boolean hasDataType(DataType dataType,DataType[] dataTypes){  for (int i=0; i < dataTypes.length; i++) {    if (dataType.equals(dataTypes[i])) {      return true;    }  }  return false;}  }
class C{  public int put(Object key,int value){  int hash=key == null ? 0 : key.hashCode() & 0x7FFFFFFF;  int index=hash % table.length;  for (Entry e=table[index]; e != null; e=e.next) {    if (e.hash == hash && (e.key == null && key == null || e.key != null && e.key.equals(key))) {      int old=e.value;      e.value=value;      return old;    }  }  int len=table.length;  if (count++ >= (len - (len >> 2))) {    rehash();    index=hash % table.length;  }  table[index]=new Entry(hash,key,value,table[index]);  return 0;}  }
class C{  public static boolean[] toBooleanArray(byte[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  public static void loadModule(final JTree tree,final INaviModule module){  Preconditions.checkNotNull(tree,"IE01195: Tree argument can not be null");  Preconditions.checkNotNull(module,"IE01196: Module argument can not be null");  loadModuleThreaded(SwingUtilities.getWindowAncestor(tree),module,tree);}  }
class C{  public DependencyExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override public MatchStrength hasFormat(InputAccessor acc) throws IOException {  return hasJSONFormat(acc);}  }
class C{  final public Object invoke(Object obj){  if (obj instanceof ILookup) {    return ((ILookup)obj).valAt(this);  }  return RT.get(obj,this);}  }
class C{  public void createActions(){  backward.setAction(root.actions.backward);  backward.setText("");  forward.setAction(root.actions.forward);  forward.setText("");  reload.setAction(root.actions.reload);  reload.setText("");  goHome.setAction(root.actions.goHome);  goHome.setText("");  print_preview.setAction(root.actions.print_preview);  print_preview.setText("");  url.setAction(root.actions.load);  goToPage.setAction(root.actions.goToPage);  updateButtons();}  }
class C{  public void testUnspecifiedProperties() throws Exception {  ReplicateFilter rf=new ReplicateFilter();  rf.setTungstenSchema("tungsten_foo");  filterHelper.setFilter(rf);  verifyStmtAccept(filterHelper,0,null,"insert into bar(val) values(1)");  filterHelper.done();}  }
class C{  public static String gensalt(int log_rounds,SecureRandom random){  StringBuffer rs=new StringBuffer();  byte rnd[]=new byte[BCRYPT_SALT_LEN];  random.nextBytes(rnd);  rs.append("$2a$");  if (log_rounds < 10) {    rs.append("0");  }  if (log_rounds > 30) {    throw new IllegalArgumentException("log_rounds exceeds maximum (30)");  }  rs.append(Integer.toString(log_rounds));  rs.append("$");  rs.append(encode_base64(rnd,rnd.length));  return rs.toString();}  }
class C{  public static String convertByte2HexString(byte b){  char u8=convertByte2Uint8(b);  return Integer.toHexString(u8);}  }
class C{  public void addObservations(int states[][][],int destAgentRow,int destAgentColumn,int[][] sourcesAbsolute){  addObservations(states,destAgentRow,destAgentColumn,sourcesAbsolute,false);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.107 -0500",hash_original_method="A5A2E0E9AE6072C3F7FFFC3FCCD2C5BC",hash_generated_method="C8C62185C324BC1270BA5043B15CB6F0") public String toString(){  return Boolean.toString(get());}  }
class C{  public SecuredImpl(ArchiveBase<?> archive){  super(archive);  Node node=getArchive().as(JARArchive.class).get("WEB-INF/web.xml");  if (node == null) {    this.asset=new WebXmlAsset();    getArchive().as(JARArchive.class).add(this.asset);  } else {    NamedAsset asset=(NamedAsset)node.getAsset();    if (!(asset instanceof WebXmlAsset)) {      this.asset=new WebXmlAsset(asset.openStream());      getArchive().as(JARArchive.class).add(this.asset);    } else {      this.asset=(WebXmlAsset)asset;    }  }  getArchive().as(JARArchive.class).addModule("org.wildfly.swarm.keycloak","runtime");  getArchive().as(JARArchive.class).addAsServiceProvider("io.undertow.servlet.ServletExtension","org.wildfly.swarm.keycloak.runtime.SecurityContextServletExtension");  InputStream keycloakJson=Thread.currentThread().getContextClassLoader().getResourceAsStream("keycloak.json");  if (keycloakJson == null) {    String appArtifact=System.getProperty(BootstrapProperties.APP_ARTIFACT);    if (appArtifact != null) {      try (InputStream in=ClassLoader.getSystemClassLoader().getResourceAsStream("_bootstrap/" + appArtifact)){        ZipImporterImpl importer=new ZipImporterImpl(archive);        importer.importFrom(in);        Node jsonNode=archive.get("keycloak.json");        if (jsonNode == null) {          jsonNode=archive.get("WEB-INF/keycloak.json");        }        if (jsonNode != null && jsonNode.getAsset() != null) {          keycloakJson=jsonNode.getAsset().openStream();        }      } catch (      IOException e) {      }    }  }  this.asset.setContextParam("resteasy.scan","true");  this.asset.setLoginConfig("KEYCLOAK","ignored");  if (keycloakJson != null) {    getArchive().as(JARArchive.class).add(createAsset(keycloakJson),"WEB-INF/keycloak.json");  } else {  }}  }
class C{  public static Builder builder(){  return new Builder(new UnregisterRequest());}  }
class C{  public Entry(final String name){  this.id=null;  this.name=name;  this.size=-1;  this.error=null;}  }
class C{  private static boolean isClose(Token<HtmlTokenType> t){  return t.text.startsWith("</");}  }
class C{  public static QRCode encode(String content,ErrorCorrectionLevel ecLevel) throws WriterException {  return encode(content,ecLevel,null);}  }
class C{  public static Icon iconStream(String name){  return iconStream(name,".png");}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  protected void onLinkActivated(SelectEvent event,String url){  PickedObject pickedObject=event.getTopPickedObject();  String type=pickedObject.getStringValue(AVKey.MIME_TYPE);  String linkBase;  String linkRef;  int hashSign=url.indexOf("#");  if (hashSign != -1) {    linkBase=url.substring(0,hashSign);    linkRef=url.substring(hashSign);  } else {    linkBase=url;    linkRef=null;  }  KMLRoot targetDoc;  KMLRoot contextDoc=null;  KMLAbstractFeature kmlFeature;  boolean isKmlUrl=this.isKmlUrl(linkBase,type);  boolean foundLocalFeature=false;  kmlFeature=this.getContext(pickedObject);  if (kmlFeature != null)   contextDoc=kmlFeature.getRoot();  if (isKmlUrl) {    targetDoc=this.findOpenKmlDocument(linkBase);    if (targetDoc == null) {      if (this.isLinkActivationTrigger(event))       this.requestDocument(linkBase,contextDoc,linkRef);      event.consume();      return;    }  } else {    targetDoc=contextDoc;  }  if (linkRef != null) {    if (this.onFeatureLinkActivated(targetDoc,linkRef,event)) {      foundLocalFeature=true;      event.consume();    }  }  if (!isKmlUrl && !foundLocalFeature) {    String target=pickedObject.getStringValue(AVKey.TARGET);    if ("_blank".equalsIgnoreCase(target)) {      if (this.isLinkActivationTrigger(event))       this.openInNewBrowser(event,url);      event.consume();    }  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public TreeViewerColumn build(){  TreeViewerColumn viewerColumn=new TreeViewerColumn(builder.getViewer(),style);  TreeColumn column=viewerColumn.getColumn();  if (headerText != null) {    column.setText(headerText);  }  column.setMoveable(moveable);  column.setResizable(resizable);  if (cellLabelProvider != null) {    viewerColumn.setLabelProvider(cellLabelProvider);  } else {    if (propertyName == null) {      viewerColumn.setLabelProvider(new ColumnLabelProvider());    } else {      PropertyDescriptor descriptor=builder.getPropertyDescriptor(propertyName);      viewerColumn.setLabelProvider(new PropertyCellLabelProvider(descriptor,valueFormatter));    }  }  if (editingSupport != null) {    viewerColumn.setEditingSupport(editingSupport);  }  return viewerColumn;}  }
class C{  public ProcessOutput runProcess(int timeoutInMilliseconds,boolean destroyOnTimeout){  if (timeoutInMilliseconds <= 0) {    return runProcess();  } else {    startNotify();    if (waitFor(timeoutInMilliseconds)) {      myOutput.setExitCode(getProcess().exitValue());    } else {      if (destroyOnTimeout) {        destroyProcess();      }      myOutput.setTimeout();    }    return myOutput;  }}  }
class C{  public final boolean isDebugEnabled(){  return m_priority.isLowerOrEqual(Priority.DEBUG);}  }
class C{  public static final double[] timesMinusEquals(final double[] v1,final double s1,final double[] v2){  assert (v1.length == v2.length) : ERR_VEC_DIMENSIONS;  for (int i=0; i < v1.length; i++) {    v1[i]=v1[i] * s1 - v2[i];  }  return v1;}  }
class C{  public void dcIsTranspose(int genomeDc[][],MersenneTwisterFast srt){  try {    int index=srt.nextInt(genomeDc.length);    int gf[]=genomeDc[index];    int dcAreaLength=gf.length;    int gfStart=srt.nextInt(dcAreaLength);    int gfSize=srt.nextInt(dcAreaLength - gfStart) + 1;    index=srt.nextInt(genomeDc.length);    int gt[]=genomeDc[index];    int gtStart=srt.nextInt(dcAreaLength - gfSize + 1);    int temp[]=new int[gfSize];    int i;    for (i=0; i < gfSize; i++)     temp[i]=gf[gfStart + i];    for (i=dcAreaLength - gfSize - 1; i >= gtStart; i--)     gt[i + gfSize]=gt[i];    for (i=0; i < gfSize; i++)     gt[i + gtStart]=temp[i];  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private String prepareDeleteStatement(){  Collection<String> cols=persistenceSettings.getKeyPersistenceSettings().getTableColumns();  StringBuilder statement=new StringBuilder();  for (  String column : cols) {    if (statement.length() != 0)     statement.append(" and ");    statement.append("\"").append(column).append("\"=?");  }  statement.append(";");  return "delete from \"" + persistenceSettings.getKeyspace() + "\".\"%1$s\" where "+ statement;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public Matrix copy(){  Matrix X=new Matrix(rows,cols);  double[][] C=X.getArray();  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      C[i][j]=data[i][j];    }  }  return X;}  }
class C{  public String toString(){  return Double.toString(get());}  }
class C{  public void runManageProfileCommand(String... arguments){  runWebSphereCommand("manageprofiles",arguments);}  }
class C{  @CliAvailabilityIndicator({CREATE_PCJ_CMD,DELETE_PCJ_CMD,BATCH_UPDATE_PCJ_CMD}) public boolean arePCJCommandsAvailable(){  final ShellState shellState=state.getShellState();  if (shellState.getConnectionState() == ConnectionState.CONNECTED_TO_INSTANCE) {    final GetInstanceDetails getInstanceDetails=shellState.getConnectedCommands().get().getGetInstanceDetails();    final String ryaInstanceName=state.getShellState().getRyaInstanceName().get();    try {      final Optional<RyaDetails> instanceDetails=getInstanceDetails.getDetails(ryaInstanceName);      if (instanceDetails.isPresent()) {        return instanceDetails.get().getPCJIndexDetails().isEnabled();      }    } catch (    final RyaClientException e) {      return false;    }  }  return false;}  }
class C{  private String generateSVG(int width,int height){  Graphics2D g2=createSVGGraphics2D(width,height);  if (g2 == null) {    throw new IllegalStateException("JFreeSVG library is not present.");  }  g2.setRenderingHint(JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION,true);  String svg=null;  Rectangle2D drawArea=new Rectangle2D.Double(0,0,width,height);  this.chart.draw(g2,drawArea);  try {    Method m=g2.getClass().getMethod("getSVGElement");    svg=(String)m.invoke(g2);  } catch (  NoSuchMethodException e) {  }catch (  SecurityException e) {  }catch (  IllegalAccessException e) {  }catch (  IllegalArgumentException e) {  }catch (  InvocationTargetException e) {  }  return svg;}  }
class C{  void addFile(ZipOutputStream zos,File file) throws IOException {  String name=file.getPath();  boolean isDir=file.isDirectory();  if (isDir) {    name=name.endsWith(File.separator) ? name : (name + File.separator);  }  name=entryName(name);  if (name.equals("") || name.equals(".") || name.equals(zname)) {    return;  } else   if ((name.equals(MANIFEST_DIR) || name.equals(MANIFEST_NAME)) && !Mflag) {    if (vflag) {      output(formatMsg("out.ignore.entry",name));    }    return;  }  long size=isDir ? 0 : file.length();  if (vflag) {    out.print(formatMsg("out.adding",name));  }  ZipEntry e=new ZipEntry(name);  e.setTime(file.lastModified());  if (size == 0) {    e.setMethod(ZipEntry.STORED);    e.setSize(0);    e.setCrc(0);  } else   if (flag0) {    crc32File(e,file);  }  zos.putNextEntry(e);  if (!isDir) {    copy(file,zos);  }  zos.closeEntry();  if (vflag) {    size=e.getSize();    long csize=e.getCompressedSize();    out.print(formatMsg2("out.size",String.valueOf(size),String.valueOf(csize)));    if (e.getMethod() == ZipEntry.DEFLATED) {      long ratio=0;      if (size != 0) {        ratio=((size - csize) * 100) / size;      }      output(formatMsg("out.deflated",String.valueOf(ratio)));    } else {      output(getMsg("out.stored"));    }  }}  }
class C{  public Host(int id,RamProvisioner ramProvisioner,BwProvisioner bwProvisioner,long storage,List<? extends Pe> peList,VmScheduler vmScheduler){  setId(id);  setRamProvisioner(ramProvisioner);  setBwProvisioner(bwProvisioner);  setStorage(storage);  setVmScheduler(vmScheduler);  setPeList(peList);  setFailed(false);}  }
class C{  @Override public void drawString(AttributedCharacterIterator iterator,int x,int y){}  }
class C{  public String post(Context context,String url,HttpEntity entity,String contentType) throws HttpException {  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPost(url),entity),contentType,context);}  }
class C{  public MyStringBuilder2(){  s="";}  }
class C{  Point northEastToSouthWest(Point2D p,PositionableIcon l,int oldWidth,int oldHeight,double angle,boolean right,double fromPoint){  angle=angle - 180;  if (angle < 45) {    int tmpWidth=oldWidth;    int tmpHeight=oldHeight;    oldWidth=tmpHeight;    oldHeight=tmpWidth;  }  double ang=angle;  double oppAng=90 - ang;  angle=Math.toRadians(angle);  double oppAngRad=Math.toRadians(oppAng);  double iconAdj=Math.sin(angle) * oldHeight;  double iconAdjOpp=Math.sin(oppAngRad) * oldHeight;  double bpa=Math.sin(angle) * (offSetFromPoint + fromPoint);  double bpo=Math.sin(oppAngRad) * (offSetFromPoint + fromPoint);  double ta=Math.sin(angle) * offSetFromPoint;  double to=Math.sin(oppAngRad) * offSetFromPoint;  if (log.isDebugEnabled()) {    log.debug("north east to south west " + angle);    log.debug("oldWidth " + oldWidth + " oldHeight "+ oldHeight);    log.debug("newWidth " + l.maxWidth() + " newHeight "+ l.maxHeight());    log.debug("Icon adj: " + iconAdj + " opp adj: "+ iconAdjOpp);    log.debug("boundary point opp " + bpo);    log.debug("boundary point adj " + bpa);    log.debug("track opp " + to);    log.debug("track adj " + ta);  }  int xpos=0;  int ypos=0;  if (right) {    double x_dist_to_Icon=(iconAdjOpp) - (bpa - to);    double y_dist_to_Icon=ta + bpo + l.maxHeight();    log.debug("x dist " + x_dist_to_Icon + ", y dist "+ y_dist_to_Icon);    xpos=(int)(p.getX() - x_dist_to_Icon);    ypos=(int)(p.getY() - y_dist_to_Icon);  } else {    double y_dist_to_Icon=iconAdjOpp + (bpo - ta);    double x_dist_to_Icon=to + bpa;    log.debug("x dist " + x_dist_to_Icon + ", y dist "+ y_dist_to_Icon);    xpos=(int)(p.getX() + x_dist_to_Icon);    ypos=(int)(p.getY() - y_dist_to_Icon);  }  if (log.isDebugEnabled()) {    log.debug("xpos " + xpos);    log.debug("yPos " + ypos);  }  return new Point(xpos,ypos);}  }
class C{  public static Test suite(){  TestSuite suite=new EipTests("eip Tests");  return suite;}  }
class C{  @Override protected void buildRepresentation(IEntity entity){  final SpriteStore store=SpriteStore.get();  ZoneInfo info=ZoneInfo.get();  Sprite sprite=store.getModifiedSprite(translate(getClassResourcePath()),info.getZoneColor(),info.getColorMethod());  int width=(int)entity.getWidth();  int height=(int)entity.getHeight();  BufferedImage image=new BufferedImage(width * 32,height * 32,BufferedImage.TYPE_INT_ARGB);  Graphics2D graphics=image.createGraphics();  for (int ix=0; ix < width; ix++) {    for (int iy=0; iy < height; iy++) {      sprite.draw(graphics,ix * 32,iy * 32);    }  }  setSprite(new ImageSprite(image));}  }
class C{  final private String matchRuleDef2MatchRuleDesc(Attributes attrs) throws NamingException {  StringBuffer matchRuleDesc=new StringBuffer("( ");  Attribute attr=null;  int count=0;  attr=attrs.get(NUMERICOID_ID);  if (attr != null) {    matchRuleDesc.append(writeNumericOID(attr));    count++;  } else {    throw new ConfigurationException("Attribute type doesn't" + "have a numeric OID");  }  attr=attrs.get(NAME_ID);  if (attr != null) {    matchRuleDesc.append(writeQDescrs(attr));    count++;  }  attr=attrs.get(DESC_ID);  if (attr != null) {    matchRuleDesc.append(writeQDString(attr));    count++;  }  attr=attrs.get(OBSOLETE_ID);  if (attr != null) {    matchRuleDesc.append(writeBoolean(attr));    count++;  }  attr=attrs.get(SYNTAX_ID);  if (attr != null) {    matchRuleDesc.append(writeWOID(attr));    count++;  } else {    throw new ConfigurationException("Attribute type doesn't" + "have a syntax OID");  }  if (count < attrs.size()) {    String attrId=null;    for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMoreElements(); ) {      attr=ae.next();      attrId=attr.getID();      if (attrId.equals(NUMERICOID_ID) || attrId.equals(NAME_ID) || attrId.equals(SYNTAX_ID)|| attrId.equals(DESC_ID)|| attrId.equals(OBSOLETE_ID)) {        continue;      } else {        matchRuleDesc.append(writeQDStrings(attr));      }    }  }  matchRuleDesc.append(")");  return matchRuleDesc.toString();}  }
class C{  public InvalidPhraseException(){}  }
class C{  public ZDT4(int numberOfVariables){  super(numberOfVariables);}  }
class C{  public void testAddEqualScalePosPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=10;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="123121247898748373566323807282924555312937.1991359555";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.add(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  @SuppressWarnings({"rawtypes"}) public boolean checkSlotsAndSizes(@Nonnull IInventory inv,@Nonnull List filter,int[] from){  assert filter.size() == from.length;  for (int i=0; i < filter.size(); ++i) {    final Object filterObject=filter.get(i);    if (filterObject instanceof IMultiItemStacks) {      if (!checkSlotAndSize(inv,(IMultiItemStacks)filterObject,from[i]))       return false;    } else     if (filterObject instanceof ItemStack || filterObject == null) {      if (!checkSlotAndSize(inv,(ItemStack)filterObject,from[i]))       return false;    } else {      return false;    }  }  return true;}  }
class C{  @Override public void acceptResult(ResultProducer rp,Object[] key,Object[] result) throws Exception {  if (m_ResultProducer != rp) {    throw new Error("Unrecognized ResultProducer calling acceptResult!!");  }  if (result != null) {    putResultInTable(m_ResultsTableName,rp,key,result);  }}  }
class C{  @Override public void preparedStatement_clearParameters(FilterChain chain,PreparedStatementProxy statement) throws SQLException {  chain.preparedStatement_clearParameters(statement);}  }
class C{  public void saveSelectionPath(TreePath treePath){  TreePath[] treePaths=new TreePath[1];  treePaths[0]=treePath;  selectedPaths=treePaths;}  }
class C{  public void startCDATA() throws org.xml.sax.SAXException {  m_inCData=true;  append(m_doc.createCDATASection(""));}  }
class C{  public HiLowEmitter(String name){  super(name);}  }
class C{  protected void parseChangeRecord(InStream in,int flags,SWFVectors vectors,SWFShape shape,boolean hasAlpha,int[] numFillBits2,int[] numLineBits2) throws IOException {  int numFillBits[]=numFillBits2;  int numLineBits[]=numLineBits2;  boolean hasNewStyles=(flags & 0x10) != 0;  boolean hasLineStyle=(flags & 0x08) != 0;  boolean hasFillStyle1=(flags & 0x04) != 0;  boolean hasFillStyle0=(flags & 0x02) != 0;  boolean hasMoveTo=(flags & 0x01) != 0;  if (hasMoveTo) {    int moveBits=(int)in.readUBits(5);    int moveX=in.readSBits(moveBits);    int moveY=in.readSBits(moveBits);    vectors.move(moveX,moveY);  }  if (hasFillStyle0) {    int fillStyle0=(int)in.readUBits(numFillBits[0]);    if (shape != null) {      shape.setFillStyle0(fillStyle0);    }  }  if (hasFillStyle1) {    int fillStyle1=(int)in.readUBits(numFillBits[0]);    if (shape != null) {      shape.setFillStyle1(fillStyle1);    }  }  if (hasLineStyle) {    int lineStyle=(int)in.readUBits(numLineBits[0]);    if (shape != null) {      shape.setLineStyle(lineStyle);    }  }  if (hasNewStyles) {    parseStyles(in,shape,hasAlpha);    numFillBits[0]=(int)in.readUBits(4);    numLineBits[0]=(int)in.readUBits(4);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelementcasesensitive.class,args);}  }
class C{  @Override public double op(final double x){  QL.require(x >= 0.0 && x <= 1.0,"undefined outside interval [0,1]");  if (x == 1.0) {    return Constants.QL_MAX_REAL;  }  double sum=0.0;  int index=0;  while (x > sum) {    sum+=calcSummand(index);    index++;  }  return (index - 1);}  }
class C{  protected void readNetscapeExt(){  do {    readBlock();    if (block[0] == 1) {      int b1=((int)block[1]) & 0xff;      int b2=((int)block[2]) & 0xff;      loopCount=(b2 << 8) | b1;    }  } while ((blockSize > 0) && !err());}  }
class C{  private void deleteAll() throws Exception {  Iterator<String> it=getUsersRepository().list();  while (it.hasNext()) {    getUsersRepository().removeUser(it.next());  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void testIntsCompare(){  BytesRef left=new BytesRef(new byte[Integer.BYTES]);  BytesRef right=new BytesRef(new byte[Integer.BYTES]);  for (int i=0; i < 10000; i++) {    int leftValue=random().nextInt();    NumericUtils.intToSortableBytes(leftValue,left.bytes,left.offset);    int rightValue=random().nextInt();    NumericUtils.intToSortableBytes(rightValue,right.bytes,right.offset);    assertEquals(Integer.signum(Integer.compare(leftValue,rightValue)),Integer.signum(left.compareTo(right)));  }}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  @Override public void onMessageReceived(String from,Bundle data){  if (!data.isEmpty()) {    String senderId=getString(R.string.gcm_defaultSenderId);    if (senderId.length() == 0) {      Toast.makeText(this,"SenderID string needs to be set",Toast.LENGTH_LONG).show();    }    if ((senderId).equals(from)) {      try {        JSONObject jsonObject=new JSONObject(data.getString(EXTRA_DATA));        String weather=jsonObject.getString(EXTRA_WEATHER);        String location=jsonObject.getString(EXTRA_LOCATION);        String alert=String.format(getString(R.string.gcm_weather_alert),weather,location);        sendNotification(alert);      } catch (      JSONException e) {      }    }    Log.i(TAG,"Received: " + data.toString());  }}  }
class C{  public void removeTag(){  if (parameters != null)   parameters.delete(ParameterNames.TAG);}  }
class C{  public Bundler putShortArray(String key,short[] value){  bundle.putShortArray(key,value);  return this;}  }
class C{  @Deprecated public String GetInfoFromFile(){  FileInputStream in;  try {    File cacheRoot=new File(getSdcardPath(),packageName);    if (!cacheRoot.exists()) {      return null;    }    File cacheFile=new File(cacheRoot,"mobclick_agent_cached_" + packageName);    if (!cacheFile.exists()) {      return null;    }    in=new FileInputStream(cacheFile);    StringBuffer sb=new StringBuffer();    int i=0;    byte[] s=new byte[1024 * 4];    while ((i=in.read(s)) != -1) {      sb.append(new String(s,0,i));    }    return sb.toString();  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public void insert(Object element,int position){  if (getComparator() != null || hasFilters()) {    add(element);    return;  }  insertItem((ILabelProvider)getLabelProvider(),element,position);}  }
class C{  public NotificationChain basicSetValue(Expression newValue,NotificationChain msgs){  Expression oldValue=value;  value=newValue;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,StextPackage.EVENT_RAISING_EXPRESSION__VALUE,oldValue,newValue);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public synchronized void clearColumns(){  columns=new Column[0];}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord) {    MWarehouse wh=MWarehouse.get(getCtx(),getM_Warehouse_ID());    if (wh.getAD_Org_ID() != getAD_Org_ID()) {      log.saveError("WarehouseOrgConflict","");      return false;    }  }  if (getC_Order_ID() != 0 && getM_RMA_ID() != 0) {    log.saveError("OrderOrRMA","");    return false;  }  if (!getMovementType().contentEquals(MInOut.MOVEMENTTYPE_CustomerReturns) && isSOTrx() && getC_Order_ID() == 0 && getM_RMA_ID() == 0) {    log.saveError("FillMandatory",Msg.translate(getCtx(),"C_Order_ID"));    return false;  }  if (isSOTrx() && getM_RMA_ID() != 0) {    MRMA rma=new MRMA(getCtx(),getM_RMA_ID(),get_TrxName());    MDocType docType=MDocType.get(getCtx(),rma.getC_DocType_ID());    setC_DocType_ID(docType.getC_DocTypeShipment_ID());  }  return true;}  }
class C{  public synchronized void removeClass(CSSClass clss){  CSSClass existing=store.get(clss.getName());  if (existing == clss) {    store.remove(existing.getName());  }}  }
class C{  @Override public Element store(Object o){  ControlPanelEditor p=(ControlPanelEditor)o;  Element panel=new Element("paneleditor");  JFrame frame=p.getTargetFrame();  Dimension size=frame.getSize();  Point posn=frame.getLocation();  panel.setAttribute("class","jmri.jmrit.display.controlPanelEditor.configurexml.ControlPanelEditorXml");  panel.setAttribute("name","" + frame.getName());  panel.setAttribute("x","" + posn.x);  panel.setAttribute("y","" + posn.y);  panel.setAttribute("height","" + size.height);  panel.setAttribute("width","" + size.width);  panel.setAttribute("editable","" + (p.isEditable() ? "yes" : "no"));  panel.setAttribute("positionable","" + (p.allPositionable() ? "yes" : "no"));  panel.setAttribute("showtooltips","" + (p.showTooltip() ? "yes" : "no"));  panel.setAttribute("controlling","" + (p.allControlling() ? "yes" : "no"));  panel.setAttribute("hide",p.isVisible() ? "no" : "yes");  panel.setAttribute("panelmenu",p.isPanelMenuVisible() ? "yes" : "no");  panel.setAttribute("scrollable",p.getScrollable());  if (p.getBackgroundColor() != null) {    panel.setAttribute("redBackground","" + p.getBackgroundColor().getRed());    panel.setAttribute("greenBackground","" + p.getBackgroundColor().getGreen());    panel.setAttribute("blueBackground","" + p.getBackgroundColor().getBlue());  }  panel.setAttribute("state","" + p.getExtendedState());  panel.setAttribute("shapeSelect","" + (p.getShapeSelect() ? "yes" : "no"));  Element elem=new Element("icons");  HashMap<String,NamedIcon> map=p.getPortalIconMap();  elem.addContent(storeIcon("visible",map.get(PortalIcon.VISIBLE)));  elem.addContent(storeIcon("path_edit",map.get(PortalIcon.PATH)));  elem.addContent(storeIcon("hidden",map.get(PortalIcon.HIDDEN)));  elem.addContent(storeIcon("to_arrow",map.get(PortalIcon.TO_ARROW)));  elem.addContent(storeIcon("from_arrow",map.get(PortalIcon.FROM_ARROW)));  panel.addContent(elem);  List<Positionable> contents=p.getContents();  log.debug("N elements: {}",contents.size());  for (  Positionable sub : contents) {    if (sub != null && sub.storeItem()) {      try {        Element e=jmri.configurexml.ConfigXmlManager.elementFromObject(sub);        if (e != null) {          panel.addContent(e);        }      } catch (      Exception e) {        log.error("Error storing panel element: {}",e.getMessage(),e);      }    }  }  return panel;}  }
class C{  public String cID(){  return self.cID;}  }
class C{  public ConditionalTransferEntropyCalculatorDiscrete(int base,int history,int numOtherInfoContributors){  super(base);  k=history;  this.numOtherInfoContributors=numOtherInfoContributors;  base_power_k=MathsUtils.power(base,k);  base_power_num_others=MathsUtils.power(base,numOtherInfoContributors);  startObservationTime=Math.max(k,1);  if (k > Math.log(Integer.MAX_VALUE) / log_base) {    throw new RuntimeException("Base and history combination too large");  }  if (numOtherInfoContributors < 1) {    throw new RuntimeException("Number of other info contributors < 1 for CompleteTECalculator");  }  sourceDestPastOthersCount=new int[base][base][base_power_k][base_power_num_others];  sourcePastOthersCount=new int[base][base_power_k][base_power_num_others];  destPastOthersCount=new int[base][base_power_k][base_power_num_others];  pastOthersCount=new int[base_power_k][base_power_num_others];  maxShiftedValue=new int[base];  for (int v=0; v < base; v++) {    maxShiftedValue[v]=v * MathsUtils.power(base,k - 1);  }}  }
class C{  public String toString(){  return String.valueOf(get());}  }
class C{  @Override public int deleteCharacter(Uri uri,String selection,String[] selectionArgs){  selection=addSelectionArgs(selection,selectionArgs," OR ");  return mOpenHelper.getWritableDatabase().delete(CharacterContract.CharacterEntry.TABLE_NAME,addKeyIdCheckToWhereStatement(selection,ContentUris.parseId(uri)),selectionArgs);}  }
class C{  public CellBasedSpreadsheetPanel(SpreadsheetService service,URL cellFeedUrl){  this.service=service;  this.cellFeedUrl=cellFeedUrl;  model=new SpreadsheetTableModel();  initializeGui();}  }
class C{  public FlaggingNaivePopulationBuilder(){  this.useDottification=true;  this.useWordClasses=true;}  }
class C{  public static GTE gte(final BackendKey key){  return new GTE(key);}  }
class C{  public Float evaluate(float fraction,Number startValue,Number endValue){  float startFloat=startValue.floatValue();  return startFloat + fraction * (endValue.floatValue() - startFloat);}  }
class C{  public void localCopy(Local to,Local from){  int baseTo=types.size() * locals.indexOf(to);  int baseFrom=types.size() * locals.indexOf(from);  for (int i=0; i < types.size(); i++) {    if (get(i + baseFrom)) {      set(i + baseTo);    } else {      clear(i + baseTo);    }  }}  }
class C{  public ImportExceptionBean(ApplicationExceptionBean sup,String details){  super(sup);  setDetails(details);}  }
class C{  public static final synchronized void closeCache(){  if (cache == null) {    cache=GemFireCacheImpl.getInstance();  }  try {    if (cache != null) {      try {        if (!cache.isClosed()) {          if (cache instanceof GemFireCacheImpl) {            CacheTransactionManager txMgr=((GemFireCacheImpl)cache).getTxManager();            if (txMgr != null) {              if (txMgr.exists()) {                try {                  txMgr.rollback();                } catch (                Exception ignore) {                }              }            }          }          cache.close();        }      }  finally {        cache=null;      }    }  }  finally {    PoolManager.close(false);  }}  }
class C{  public String seedTipText(){  return "The random number seed to be used.";}  }
class C{  public void run(final ConnectorState fromState,final ConnectorState toState){  couchbaseReader.run(fromState,toState);}  }
class C{  @PreUpdate public void beforeUpdate(){  final String username=RequestContext.getUsername();  if (username == null) {    throw new IllegalArgumentException("Cannot update a TransactionalEntity without a username " + "in the RequestContext for this thread.");  }  setUpdatedBy(username);  setUpdatedAt(new DateTime());}  }
class C{  public ChainingTextWriter caretEncoding(boolean enable){  this.caretEncoding=enable;  return this;}  }
class C{  @Deprecated public Experiment(File file) throws IOException, XMLException {  super(file);}  }
class C{  public Maybe<Zipper<A>> maybeRemoveBefore(){  return Maybe.JustWhenTrue(!isStart(),null);}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  public boolean isExtensionCritical(){  return isCritical;}  }
class C{  V remove(int key,int hash,Object value){  lock();  try {    int c=count - 1;    HashEntry<V>[] tab=table;    int index=hash & (tab.length - 1);    HashEntry<V> first=tab[index];    HashEntry<V> e=first;    while (e != null && (e.hash != hash || key != e.key))     e=e.next;    V oldValue=null;    if (e != null) {      V v=e.value;      if (value == null || value.equals(v)) {        oldValue=v;        ++modCount;        HashEntry<V> newFirst=e.next;        for (HashEntry<V> p=first; p != e; p=p.next)         newFirst=new HashEntry<V>(p.key,p.hash,newFirst,p.value);        tab[index]=newFirst;        count=c;      }    }    return oldValue;  }  finally {    unlock();  }}  }
class C{  public void addCmrRepositoryChangeListener(CmrRepositoryChangeListener cmrRepositoryChangeListener){synchronized (cmrRepositoryChangeListeners) {    if (!cmrRepositoryChangeListeners.contains(cmrRepositoryChangeListener)) {      cmrRepositoryChangeListeners.add(cmrRepositoryChangeListener);    }  }}  }
class C{  public static void writeOutput(String outputMultimodalNetwork,String outputSchedule,String outputVehicles){  log.info("Writing multimodal Network to " + outputMultimodalNetwork + "...");  new NetworkWriter(network).write(outputMultimodalNetwork);  log.info("Writing multimodal Schedule to " + outputSchedule + "...");  new TransitScheduleWriter(schedule).writeFile(outputSchedule);  log.info("Writing vehicles to " + outputVehicles + "...");  new VehicleWriterV1(vehicles).writeFile(outputVehicles);  log.info("Writing of Network and Schedule done.");}  }
class C{  public static long parseDate(String dateString){  return HttpDateTime.parse(dateString);}  }
class C{  @Override public boolean hasEntity(){  return entityStream != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.688 -0500",hash_original_method="F883A5EB3B1E4D14BCFB97B586287C83",hash_generated_method="620C993562D5F298626C05BD131EE126") @Override public void processChallenge(final Header header) throws MalformedChallengeException {  super.processChallenge(header);  if (getParameter("realm") == null) {    throw new MalformedChallengeException("missing realm in challange");  }  if (getParameter("nonce") == null) {    throw new MalformedChallengeException("missing nonce in challange");  }  boolean unsupportedQop=false;  String qop=getParameter("qop");  if (qop != null) {    StringTokenizer tok=new StringTokenizer(qop,",");    while (tok.hasMoreTokens()) {      String variant=tok.nextToken().trim();      if (variant.equals("auth")) {        qopVariant=QOP_AUTH;        break;      } else       if (variant.equals("auth-int")) {        qopVariant=QOP_AUTH_INT;      } else {        unsupportedQop=true;      }    }  }  if (unsupportedQop && (qopVariant == QOP_MISSING)) {    throw new MalformedChallengeException("None of the qop methods is supported");  }  this.cnonce=null;  this.complete=true;}  }
class C{  public int readVariableLengthInt() throws IOException {  int c;  int value=readByte();  if ((value & 0x80) != 0) {    value&=0x7f;    do {      value=(value << 7) + ((c=readByte()) & 0x7f);    } while ((c & 0x80) != 0);  }  return value;}  }
