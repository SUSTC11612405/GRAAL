class C{  public void columnSelectionChanged(ListSelectionEvent e){  updateSelection();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.254 -0500",hash_original_method="1E0220698FB1311F0D8B9F18E7495908",hash_generated_method="45063F3EB3C0799C5F99D2526314B9C3") public void translate(int dx,int dy){  translate(dx,dy,null);}  }
class C{  static void initLog4J(String logFile){  if (log4JSetUp) {    log.debug("initLog4J already initialized!");    return;  }  SystemConsole.create();  log4JSetUp=true;  initializeJavaUtilLogging();  try {    if (new File(logFile).canRead()) {      configureLogging(logFile);    } else     if (new File(FileUtil.getPreferencesPath() + logFile).canRead()) {      configureLogging(FileUtil.getPreferencesPath() + logFile);    } else     if (new File(FileUtil.getProgramPath() + logFile).canRead()) {      configureLogging(FileUtil.getProgramPath() + logFile);    } else {      BasicConfigurator.configure();      org.apache.log4j.Logger.getRootLogger().setLevel(Level.WARN);    }  } catch (  java.lang.NoSuchMethodError e) {    log.error("Exception starting logging",e);  }catch (  IOException ex) {    BasicConfigurator.configure();    org.apache.log4j.Logger.getRootLogger().setLevel(Level.WARN);  }  Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler());}  }
class C{  public Vector2 rotate(double theta){  double cos=Math.cos(theta);  double sin=Math.sin(theta);  double x=this.x;  double y=this.y;  this.x=x * cos - y * sin;  this.y=x * sin + y * cos;  return this;}  }
class C{  protected double findSplitNominal(int index) throws Exception {  if (m_Instances.classAttribute().isNominal()) {    return findSplitNominalNominal(index);  } else {    return findSplitNominalNumeric(index);  }}  }
class C{  public void addListener(DNSListener listener,DNSQuestion question){  final long now=System.currentTimeMillis();  _listeners.add(listener);  if (question != null) {    for (    DNSEntry dnsEntry : this.getCache().getDNSEntryList(question.getName().toLowerCase())) {      if (question.answeredBy(dnsEntry) && !dnsEntry.isExpired(now)) {        listener.updateRecord(this.getCache(),now,dnsEntry);      }    }  }}  }
class C{  public String toString(){  return getStringValue();}  }
class C{  public void hideColumn(Object columnName){  if (columnName == null) {    return;  }  for (int i=0; i < columnModel.getColumnCount(); i++) {    TableColumn column=columnModel.getColumn(i);    if (columnName.equals(column.getHeaderValue())) {      hideColumn(column);      break;    }  }}  }
class C{  public void add(InputStream is) throws IOException {  add(is,true);}  }
class C{  public void clearUnused(ConfigImpl config){  SystemOut.printDate(config.getOutWriter(),"PagePool: " + size() + ">("+ maxSize+ ")");  if (size() > maxSize) {    Object[] keys=keys();    LongKeyList list=new LongKeyList();    for (int i=0; i < keys.length; i++) {      PageSource ps=getPageSource(keys[i],false);      long updateTime=ps.getLastAccessTime();      if (updateTime + timeout < System.currentTimeMillis()) {        long add=((ps.getAccessCount() - 1) * 10000);        if (add > timeout)         add=timeout;        list.add(updateTime + add,keys[i]);      }    }    while (size() > maxSize) {      Object key=list.shift();      if (key == null)       break;      remove(key);    }  }}  }
class C{  public Map<String,Object> makeValid(Map<String,? extends Object> source,String mode,boolean includeInternal,List<Object> errorMessages,TimeZone timeZone,Locale locale){  Map<String,Object> target=new HashMap<String,Object>();  if (source == null) {    return target;  }  if (!"IN".equals(mode) && !"OUT".equals(mode) && !"INOUT".equals(mode)) {    return target;  }  if (contextInfo.size() == 0) {    return target;  }  if (locale == null) {    if (source.containsKey("locale")) {      locale=(Locale)source.get("locale");    }    if (locale == null) {      locale=Locale.getDefault();    }  }  if (timeZone == null) {    if (source.containsKey("timeZone")) {      timeZone=(TimeZone)source.get("timeZone");    }    if (timeZone == null) {      timeZone=TimeZone.getDefault();    }  }  for (  ModelParam param : contextParamList) {    if (param.mode.equals("INOUT") || param.mode.equals(mode)) {      String key=param.name;      if (UtilValidate.isNotEmpty(param.stringMapPrefix) && !source.containsKey(key)) {        Map<String,Object> paramMap=this.makePrefixMap(source,param);        if (UtilValidate.isNotEmpty(paramMap)) {          target.put(key,paramMap);        }      } else       if (UtilValidate.isNotEmpty(param.stringListSuffix) && !source.containsKey(key)) {        List<Object> paramList=this.makeSuffixList(source,param);        if (UtilValidate.isNotEmpty(paramList)) {          target.put(key,paramList);        }      } else {        if (source.containsKey(key)) {          if ((param.internal && includeInternal) || (!param.internal)) {            Object value=source.get(key);            try {              value=ObjectType.simpleTypeConvert(value,param.type,null,timeZone,locale,false);            } catch (            GeneralException e) {              String errMsg="Type conversion of field [" + key + "] to type ["+ param.type+ "] failed for value \""+ value+ "\": "+ e.toString();              Debug.logWarning("[ModelService.makeValid] : " + errMsg,module);              if (errorMessages != null) {                errorMessages.add(errMsg);              }            }            target.put(key,value);          }        }      }    }  }  return target;}  }
class C{  public void zoomOrigin(int oldGridSize,int newGridSize){  log.trace("Zoom origin to: " + origin);  origin.setLocation(origin.x * newGridSize / oldGridSize,origin.y * newGridSize / oldGridSize);}  }
class C{  public boolean removeAll(Collection c){  throw new UnsupportedOperationException();}  }
class C{  protected TypeTypeRefImpl(){  super();}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tCenter (rather than standardize) the" + "\n\tdata and compute PCA using the covariance (rather" + "\n\t than the correlation) matrix.","C",0,"-C"));  newVector.addElement(new Option("\tRetain enough PC attributes to account " + "\n\tfor this proportion of variance in " + "the original data.\n"+ "\t(default = 0.95)","R",1,"-R"));  newVector.addElement(new Option("\tTransform through the PC space and " + "\n\tback to the original space.","O",0,"-O"));  newVector.addElement(new Option("\tMaximum number of attributes to include in " + "\n\ttransformed attribute names. (-1 = include all)","A",1,"-A"));  return newVector.elements();}  }
class C{  public boolean editParameters(final Class modelClass,Parameters params,Object[] parentModels){  if (parentModels == null) {    throw new NullPointerException("Parent models array is null.");  }  if (params == null) {    throw new NullPointerException("Parameters cannot be null.");  }  SessionNodeModelConfig modelConfig=this.config.getModelConfig(modelClass);  final ParameterEditor paramEditor=modelConfig.getParameterEditorInstance();  if (paramEditor == null) {    return true;  } else {    paramEditor.setParams(params);    paramEditor.setParentModels(parentModels);  }  if (paramEditor instanceof FinalizingParameterEditor && paramEditor instanceof JDialog) {    FinalizingParameterEditor e=(FinalizingParameterEditor)paramEditor;    e.setup();    return e.finalizeEdit();  }  paramEditor.setup();  JComponent editor=(JComponent)paramEditor;  SessionNodeWrapper nodeWrapper=(SessionNodeWrapper)getModelNode();  String buttonType=nodeWrapper.getButtonType();  editor.setName(buttonType + " Structure Editor");  Component centeringComp=SessionEditorNode.this;  int ret=JOptionPane.showOptionDialog(centeringComp,editor,editor.getName(),JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,null,null);  return ret == JOptionPane.OK_OPTION && (!(paramEditor instanceof FinalizingParameterEditor) || ((FinalizingParameterEditor)paramEditor).finalizeEdit());}  }
class C{  public static <T>Iterable<T> each(Iterable<T> self,@ClosureParams(FirstParam.FirstGenericType.class) Closure closure){  each(self.iterator(),closure);  return self;}  }
class C{  public static Statement createStatement(int resultSetType,int resultSetConcurrency,String trxName){  return ProxyFactory.newCStatement(resultSetType,resultSetConcurrency,trxName);}  }
class C{  protected XMLSignatureInput enginePerformTransform(XMLSignatureInput input,Transform transformObject) throws IOException, CanonicalizationException, TransformationException {  return enginePerformTransform(input,null,transformObject);}  }
class C{  protected void calculateBarsWidth(int nSets,float x0,float x1){  barWidth=((x1 - x0) - style.barSpacing / 2 - style.setSpacing * (nSets - 1)) / nSets;}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  mState=new AppOpsState(getActivity());  mPm=getActivity().getPackageManager();  mInflater=(LayoutInflater)getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);  mAppOps=(AppOpsManager)getActivity().getSystemService(Context.APP_OPS_SERVICE);  retrieveAppEntry();  setHasOptionsMenu(true);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_text_DateFormatSymbols(){  DateFormatSymbols symbols=new DateFormatSymbols(Locale.ENGLISH);  symbols.setEras(new String[]{"Before","After"});  SimpleDateFormat f2=new SimpleDateFormat("y'y'yy",symbols);  assertTrue("Wrong class",f2.getClass() == SimpleDateFormat.class);  assertEquals("Wrong pattern","y'y'yy",f2.toPattern());  assertTrue("Wrong symbols",f2.getDateFormatSymbols().equals(symbols));  assertTrue("Doesn't work",f2.format(new Date()).getClass() == String.class);  try {    new SimpleDateFormat(null,symbols);    fail("NullPointerException was not thrown.");  } catch (  NullPointerException npe) {  }  try {    new SimpleDateFormat("eee",symbols);    fail("IllegalArgumentException was not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  public void stop(){  if (!isRunning()) {    throw new IllegalStateException(LocalizedStrings.StopWatch_ATTEMPTED_TO_STOP_NONRUNNING_STOPWATCH.toLocalizedString());  }  this.stopTime=System.currentTimeMillis();}  }
class C{  public boolean exceededRateLimitation(){  return statusCode == 400 && getRateLimitStatus() != null || statusCode == ENHANCE_YOUR_CLAIM || statusCode == TOO_MANY_REQUESTS;}  }
class C{  protected void startup(final int transactionManagerCalls) throws Exception {  mockConfiguration(2);  mockStore();  final HGTransactionManager transactionManager=new HGTransactionManager(storage.getTransactionFactory());  EasyMock.expect(store.getTransactionManager()).andReturn(transactionManager).times(transactionManagerCalls);  replay();  storage.startup(store,configuration);}  }
class C{  public frame addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public synchronized AddressbookEntry remove(String name,Set<String> categoriesToRemove){  name=StringUtil.toLowerCase(name);  AddressbookEntry currentEntry=entries.get(name);  if (currentEntry != null) {    Set<String> currentCategories=currentEntry.getCategories();    for (    String category : categoriesToRemove) {      currentCategories.remove(category);    }    AddressbookEntry changedEntry=new AddressbookEntry(name,currentCategories);    entries.put(name,changedEntry);    if (!currentEntry.equalsFully(changedEntry)) {      saveOnChange();    }    return changedEntry;  }  return null;}  }
class C{  public void testBasicRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_de:[tone TO tp]","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=4]","//result/doc[2]/int[@name='id'][.=7]");}  }
class C{  public ISchedulingRule createRule(IResource resource){  if (resource.getType() == IResource.ROOT)   return root;  return factoryFor(resource).createRule(resource);}  }
class C{  public static BKTransmitException transmitException(int transmitResult){  return new BKTransmitException("Failed to write to bookkeeper; Error is (" + transmitResult + ") "+ BKException.getMessage(transmitResult),transmitResult);}  }
class C{  private void createQuadProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.fs",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.quadProgram=program;}  }
class C{  private void backupIcons(BackupDataOutput data) throws IOException {  final ContentResolver cr=mContext.getContentResolver();  final int dpi=mContext.getResources().getDisplayMetrics().densityDpi;  final UserHandleCompat myUserHandle=UserHandleCompat.myUserHandle();  int backupUpIconCount=0;  String where="(" + LauncherSettings.Favorites.ITEM_TYPE + "="+ LauncherSettings.Favorites.ITEM_TYPE_APPLICATION+ " OR "+ LauncherSettings.Favorites.ITEM_TYPE+ "="+ LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT+ ") AND "+ getUserSelectionArg();  Cursor cursor=cr.query(LauncherSettings.Favorites.CONTENT_URI,FAVORITE_PROJECTION,where,null,null);  try {    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final String intentDescription=cursor.getString(INTENT_INDEX);      try {        Intent intent=Intent.parseUri(intentDescription,0);        ComponentName cn=intent.getComponent();        Key key=null;        String backupKey=null;        if (cn != null) {          key=getKey(Key.ICON,cn.flattenToShortString());          backupKey=keyToBackupKey(key);        } else {          Log.w(TAG,"empty intent on application favorite: " + id);        }        if (mExistingKeys.contains(backupKey)) {          if (DEBUG)           Log.d(TAG,"already saved icon " + backupKey);          mKeys.add(key);        } else         if (backupKey != null) {          if (DEBUG)           Log.d(TAG,"I can count this high: " + backupUpIconCount);          if (backupUpIconCount < MAX_ICONS_PER_PASS) {            if (DEBUG)             Log.d(TAG,"saving icon " + backupKey);            Bitmap icon=mIconCache.getIcon(intent,myUserHandle);            if (icon != null && !mIconCache.isDefaultIcon(icon,myUserHandle)) {              writeRowToBackup(key,packIcon(dpi,icon),data);              mKeys.add(key);              backupUpIconCount++;            }          } else {            if (VERBOSE)             Log.v(TAG,"deferring icon backup " + backupKey);            dataChanged();          }        }      } catch (      URISyntaxException e) {        Log.e(TAG,"invalid URI on application favorite: " + id);      }catch (      IOException e) {        Log.e(TAG,"unable to save application icon for favorite: " + id);      }    }  }  finally {    cursor.close();  }}  }
class C{  public static boolean looksLikeAListStyleType(String val){  return LIST_TYPES.indexOf(val) >= 0;}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case SGraphPackage.PSEUDOSTATE:{      Pseudostate pseudostate=(Pseudostate)theEObject;      T result=casePseudostate(pseudostate);      if (result == null)       result=caseVertex(pseudostate);      if (result == null)       result=caseNamedElement(pseudostate);      if (result == null)       result=defaultCase(theEObject);      return result;    }case SGraphPackage.VERTEX:{    Vertex vertex=(Vertex)theEObject;    T result=caseVertex(vertex);    if (result == null)     result=caseNamedElement(vertex);    if (result == null)     result=defaultCase(theEObject);    return result;  }case SGraphPackage.REGION:{  Region region=(Region)theEObject;  T result=caseRegion(region);  if (result == null)   result=caseNamedElement(region);  if (result == null)   result=defaultCase(theEObject);  return result;}case SGraphPackage.TRANSITION:{Transition transition=(Transition)theEObject;T result=caseTransition(transition);if (result == null) result=caseSpecificationElement(transition);if (result == null) result=caseReaction(transition);if (result == null) result=caseDocumentedElement(transition);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.FINAL_STATE:{FinalState finalState=(FinalState)theEObject;T result=caseFinalState(finalState);if (result == null) result=caseRegularState(finalState);if (result == null) result=caseVertex(finalState);if (result == null) result=caseNamedElement(finalState);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.CHOICE:{Choice choice=(Choice)theEObject;T result=caseChoice(choice);if (result == null) result=casePseudostate(choice);if (result == null) result=caseVertex(choice);if (result == null) result=caseNamedElement(choice);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.STATECHART:{Statechart statechart=(Statechart)theEObject;T result=caseStatechart(statechart);if (result == null) result=caseSpecificationElement(statechart);if (result == null) result=caseReactiveElement(statechart);if (result == null) result=caseScopedElement(statechart);if (result == null) result=caseCompositeElement(statechart);if (result == null) result=caseNamedElement(statechart);if (result == null) result=caseDocumentedElement(statechart);if (result == null) result=caseDomainElement(statechart);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.ENTRY:{Entry entry=(Entry)theEObject;T result=caseEntry(entry);if (result == null) result=casePseudostate(entry);if (result == null) result=caseVertex(entry);if (result == null) result=caseNamedElement(entry);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.EXIT:{Exit exit=(Exit)theEObject;T result=caseExit(exit);if (result == null) result=casePseudostate(exit);if (result == null) result=caseVertex(exit);if (result == null) result=caseNamedElement(exit);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.REACTIVE_ELEMENT:{ReactiveElement reactiveElement=(ReactiveElement)theEObject;T result=caseReactiveElement(reactiveElement);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.REACTION:{Reaction reaction=(Reaction)theEObject;T result=caseReaction(reaction);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.TRIGGER:{Trigger trigger=(Trigger)theEObject;T result=caseTrigger(trigger);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.EFFECT:{Effect effect=(Effect)theEObject;T result=caseEffect(effect);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.REACTION_PROPERTY:{ReactionProperty reactionProperty=(ReactionProperty)theEObject;T result=caseReactionProperty(reactionProperty);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.SPECIFICATION_ELEMENT:{SpecificationElement specificationElement=(SpecificationElement)theEObject;T result=caseSpecificationElement(specificationElement);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.SCOPE:{Scope scope=(Scope)theEObject;T result=caseScope(scope);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.SCOPED_ELEMENT:{ScopedElement scopedElement=(ScopedElement)theEObject;T result=caseScopedElement(scopedElement);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.SYNCHRONIZATION:{Synchronization synchronization=(Synchronization)theEObject;T result=caseSynchronization(synchronization);if (result == null) result=casePseudostate(synchronization);if (result == null) result=caseVertex(synchronization);if (result == null) result=caseNamedElement(synchronization);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.STATE:{State state=(State)theEObject;T result=caseState(state);if (result == null) result=caseSpecificationElement(state);if (result == null) result=caseReactiveElement(state);if (result == null) result=caseScopedElement(state);if (result == null) result=caseRegularState(state);if (result == null) result=caseCompositeElement(state);if (result == null) result=caseDocumentedElement(state);if (result == null) result=caseVertex(state);if (result == null) result=caseNamedElement(state);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.REGULAR_STATE:{RegularState regularState=(RegularState)theEObject;T result=caseRegularState(regularState);if (result == null) result=caseVertex(regularState);if (result == null) result=caseNamedElement(regularState);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.COMPOSITE_ELEMENT:{CompositeElement compositeElement=(CompositeElement)theEObject;T result=caseCompositeElement(compositeElement);if (result == null) result=defaultCase(theEObject);return result;}case SGraphPackage.IMPORT_DECLARATION:{ImportDeclaration importDeclaration=(ImportDeclaration)theEObject;T result=caseImportDeclaration(importDeclaration);if (result == null) result=caseDeclaration(importDeclaration);if (result == null) result=caseTypedElement(importDeclaration);if (result == null) result=casePackageMember(importDeclaration);if (result == null) result=caseNamedElement(importDeclaration);if (result == null) result=caseAnnotatableElement(importDeclaration);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  static public QueryRoot optimizeQuery(final ASTContainer astContainer,final AST2BOpContext context,final QueryBindingSet globallyScopedBS,final Dataset dataset) throws QueryEvaluationException {  final AbstractTripleStore store=context.getAbstractTripleStore();  final DeferredResolutionResult resolved;  try {    resolved=ASTDeferredIVResolution.resolveQuery(store,astContainer,globallyScopedBS,dataset,context);  } catch (  MalformedQueryException e) {    throw new QueryEvaluationException(e.getMessage(),e);  }  if (resolved.dataset != null) {    astContainer.getOriginalAST().setDataset(new DatasetNode(resolved.dataset,false));  }  astContainer.clearOptimizedAST();  final IBindingSet[] globallyScopedBSAsList=toBindingSet(resolved.bindingSet);  AST2BOpUtility.convert(context,globallyScopedBSAsList);  final QueryRoot optimizedQuery=astContainer.getOptimizedAST();  return optimizedQuery;}  }
class C{  public static float asFloat(String str,float def){  try {    return Float.parseFloat(str);  } catch (  NumberFormatException e) {    return def;  }}  }
class C{  @Override public void process(K tuple){  double val=random.nextDouble();  if (val > samplingPercentage) {    return;  }  sample.emit(cloneKey(tuple));}  }
class C{  public void addIconst(int n){  if (n < 6 && -2 < n)   addOpcode(3 + n); else   if (n <= 127 && -128 <= n) {    addOpcode(16);    add(n);  } else   if (n <= 32767 && -32768 <= n) {    addOpcode(17);    add(n >> 8);    add(n);  } else   addLdc(constPool.addIntegerInfo(n));}  }
class C{  private static Object[] concatenate(Object[] a,Object[] b){  int aLen=a.length;  int bLen=b.length;  Object[] newArray=new Object[aLen + bLen];  System.arraycopy(a,0,newArray,0,aLen);  System.arraycopy(b,0,newArray,aLen,bLen);  return newArray;}  }
class C{  private static void readFully(InputStream is) throws IOException {  is.skip(is.available());  while (is.read() != -1) {  }}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  public DiffusionModel(Parameter diffusionRateParameter){  super(DIFFUSION_PROCESS);  this.diffusionRateParameter=diffusionRateParameter;  addVariable(diffusionRateParameter);  diffusionRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));}  }
class C{  public boolean isChanged(){  return m_Changed;}  }
class C{  public static long[] toPrimitive(Long[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_LONG_ARRAY;  }  final long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].longValue();  }  return result;}  }
class C{  public static CategoryLabelPositions replaceRightPosition(CategoryLabelPositions base,CategoryLabelPosition right){  ParamChecks.nullNotPermitted(base,"base");  ParamChecks.nullNotPermitted(right,"right");  return new CategoryLabelPositions(base.getLabelPosition(RectangleEdge.TOP),base.getLabelPosition(RectangleEdge.BOTTOM),base.getLabelPosition(RectangleEdge.LEFT),right);}  }
class C{  protected void fillContextHash(Context context,Hashtable objs){  Enumeration enm=objs.keys();  while (enm.hasMoreElements()) {    String key=enm.nextElement().toString();    context.put(key,objs.get(key));  }}  }
class C{  public static long readUint32BE(byte[] bytes,int offset){  return ((bytes[offset] & 0xffl) << 24) | ((bytes[offset + 1] & 0xffl) << 16) | ((bytes[offset + 2] & 0xffl) << 8)| (bytes[offset + 3] & 0xffl);}  }
class C{  static int[] calculateSerial(int[][] sizes,ResizeConstraint[] resConstr,Float[] defPushWeights,int startSizeType,int bounds){  float[] lengths=new float[sizes.length];  float usedLength=0.0f;  for (int i=0; i < sizes.length; i++) {    if (sizes[i] != null) {      float len=sizes[i][startSizeType] != NOT_SET ? sizes[i][startSizeType] : 0;      int newSizeBounded=getBrokenBoundary(len,sizes[i][MIN],sizes[i][MAX]);      if (newSizeBounded != NOT_SET)       len=newSizeBounded;      usedLength+=len;      lengths[i]=len;    }  }  int useLengthI=Math.round(usedLength);  if (useLengthI != bounds && resConstr != null) {    boolean isGrow=useLengthI < bounds;    TreeSet<Integer> prioList=new TreeSet<Integer>();    for (int i=0; i < sizes.length; i++) {      ResizeConstraint resC=(ResizeConstraint)getIndexSafe(resConstr,i);      if (resC != null)       prioList.add(isGrow ? resC.growPrio : resC.shrinkPrio);    }    Integer[] prioIntegers=prioList.toArray(new Integer[prioList.size()]);    for (int force=0; force <= ((isGrow && defPushWeights != null) ? 1 : 0); force++) {      for (int pr=prioIntegers.length - 1; pr >= 0; pr--) {        int curPrio=prioIntegers[pr];        float totWeight=0f;        Float[] resizeWeight=new Float[sizes.length];        for (int i=0; i < sizes.length; i++) {          if (sizes[i] == null)           continue;          ResizeConstraint resC=(ResizeConstraint)getIndexSafe(resConstr,i);          if (resC != null) {            int prio=isGrow ? resC.growPrio : resC.shrinkPrio;            if (curPrio == prio) {              if (isGrow) {                resizeWeight[i]=(force == 0 || resC.grow != null) ? resC.grow : (defPushWeights[i < defPushWeights.length ? i : defPushWeights.length - 1]);              } else {                resizeWeight[i]=resC.shrink;              }              if (resizeWeight[i] != null)               totWeight+=resizeWeight[i];            }          }        }        if (totWeight > 0f) {          boolean hit;          do {            float toChange=bounds - usedLength;            hit=false;            float changedWeight=0f;            for (int i=0; i < sizes.length && totWeight > 0.0001f; i++) {              Float weight=resizeWeight[i];              if (weight != null) {                float sizeDelta=toChange * weight / totWeight;                float newSize=lengths[i] + sizeDelta;                if (sizes[i] != null) {                  int newSizeBounded=getBrokenBoundary(newSize,sizes[i][MIN],sizes[i][MAX]);                  if (newSizeBounded != NOT_SET) {                    resizeWeight[i]=null;                    hit=true;                    changedWeight+=weight;                    newSize=newSizeBounded;                    sizeDelta=newSize - lengths[i];                  }                }                lengths[i]=newSize;                usedLength+=sizeDelta;              }            }            totWeight-=changedWeight;          } while (hit);        }      }    }  }  return roundSizes(lengths);}  }
class C{  public String toJSON() throws ScriptException {  return JsonWriter.indent("\t").string().value(full_config).done();}  }
class C{  public boolean isDeclared(String qName){  int idx=getIndex(qName);  if (idx < 0) {    throw new IllegalArgumentException("");  }  return ((mItems[(idx << 3) + 5]) != null);}  }
class C{  public AmqpSender createSender(Target target) throws Exception {  return createSender(target,getNextSenderId());}  }
class C{  private boolean checkEKU(X509Certificate cert,Set<String> exts,String expectedEKU) throws CertificateException {  List<String> eku=cert.getExtendedKeyUsage();  if (eku == null) {    return true;  }  return eku.contains(expectedEKU) || eku.contains(OID_EKU_ANY_USAGE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.659 -0500",hash_original_method="4F8238CAC8DB557039065AEC5DC20094",hash_generated_method="28013C17768ECE56E0D132D11166A41B") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("RetryAfterParser.parse");  RetryAfter retryAfter=new RetryAfter();  try {    headerName(TokenTypes.RETRY_AFTER);    String value=lexer.number();    try {      int ds=Integer.parseInt(value);      retryAfter.setRetryAfter(ds);    } catch (    NumberFormatException ex) {      throw createParseException(ex.getMessage());    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    if (lexer.lookAhead(0) == '(') {      String comment=this.lexer.comment();      retryAfter.setComment(comment);    }    this.lexer.SPorHT();    while (lexer.lookAhead(0) == ';') {      this.lexer.match(';');      this.lexer.SPorHT();      lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      value=token.getTokenValue();      if (value.equalsIgnoreCase("duration")) {        this.lexer.match('=');        this.lexer.SPorHT();        value=lexer.number();        try {          int duration=Integer.parseInt(value);          retryAfter.setDuration(duration);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }      } else {        this.lexer.SPorHT();        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        Token secondToken=lexer.getNextToken();        String secondValue=secondToken.getTokenValue();        retryAfter.setParameter(value,secondValue);      }      this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("RetryAfterParser.parse");  }  return retryAfter;}  }
class C{  public DBValidationException(String msg){  super(msg);}  }
class C{  public static NonNullRange reunion(NonNullRange first,NonNullRange second){  return new NonNullRange(Math.min(first.begin,second.begin),Math.max(first.end,second.end));}  }
class C{  public static XMLTreeLocation after(String name){  return new XMLTreeLocation(LocationType.AFTER,name);}  }
class C{  private GridClientAuthenticationRequest buildAuthRequest(){  GridClientAuthenticationRequest req=new GridClientAuthenticationRequest();  req.clientId(clientId);  req.credentials(credentials());  return req;}  }
class C{  public IdentityProviderResource provider(){  return providers;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  protected double inversePowerOf2Sum(){  return HllUtils.computeInvPow2Sum(numBuckets(),fields.getBucketIterator());}  }
class C{  public void addComment(CommentResource comment){  if (this.taskComments == null) {    this.taskComments=new ArrayList<>();  }  this.taskComments.add(comment);}  }
class C{  @Override public final void endElement(final String ns,final String lName,final String qName) throws SAXException {  String name=lName == null || lName.length() == 0 ? qName : lName;  Rule r=(Rule)RULES.match(match);  if (r != null) {    r.end(name);  }  int slash=match.lastIndexOf('/');  if (slash >= 0) {    match=match.substring(0,slash);  } else {    match="";  }}  }
class C{  public X509CRLImpl(CertificateList crl){  this.crl=crl;  this.tbsCertList=crl.getTbsCertList();  this.extensions=tbsCertList.getCrlExtensions();}  }
class C{  private List<String> toList(){  return Arrays.asList(values);}  }
class C{  public static boolean hasReferenceFile(SequencesReader sr){  return new File(sr.path(),REFERENCE_FILE).exists();}  }
class C{  public static <A>CompletableFutureTSeq<A> fromAnyM(final AnyMSeq<A> anyM){  return of(anyM.map(null));}  }
class C{  private void generate(PartitionAttributes pa) throws SAXException {  AttributesImpl atts=new AttributesImpl();  if (generateDefaults() || pa.getRedundantCopies() != 0)   atts.addAttribute("","",PARTITION_REDUNDANT_COPIES,"",String.valueOf(pa.getRedundantCopies()));  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_1) >= 0) {    if (generateDefaults() || pa.getLocalMaxMemory() != ((PartitionAttributesImpl)pa).getLocalMaxMemoryDefault())     atts.addAttribute("","",LOCAL_MAX_MEMORY,"",String.valueOf(pa.getLocalMaxMemory()));    if (generateDefaults() || pa.getTotalMaxMemory() != PartitionAttributesFactory.GLOBAL_MAX_MEMORY_DEFAULT)     atts.addAttribute("","",TOTAL_MAX_MEMORY,"",String.valueOf(pa.getTotalMaxMemory()));    if (generateDefaults() || pa.getTotalNumBuckets() != PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_DEFAULT)     atts.addAttribute("","",TOTAL_NUM_BUCKETS,"",String.valueOf(pa.getTotalNumBuckets()));  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_8) >= 0) {    if (pa.getColocatedWith() != null)     atts.addAttribute("","",PARTITION_COLOCATED_WITH,"",pa.getColocatedWith());  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_0) >= 0) {    if (generateDefaults() || pa.getRecoveryDelay() != PartitionAttributesFactory.RECOVERY_DELAY_DEFAULT)     atts.addAttribute("","",RECOVERY_DELAY,"",String.valueOf(pa.getRecoveryDelay()));    if (generateDefaults() || pa.getStartupRecoveryDelay() != PartitionAttributesFactory.STARTUP_RECOVERY_DELAY_DEFAULT)     atts.addAttribute("","",STARTUP_RECOVERY_DELAY,"",String.valueOf(pa.getStartupRecoveryDelay()));  }  if (!generateDefaults() && atts.getLength() == 0 && pa.getPartitionResolver() == null && pa.getPartitionListeners().length == 0 && (pa.getFixedPartitionAttributes() == null || pa.getFixedPartitionAttributes().isEmpty())) {    return;  }  handler.startElement("",PARTITION_ATTRIBUTES,PARTITION_ATTRIBUTES,atts);  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_8) >= 0) {    PartitionResolver rr=pa.getPartitionResolver();    if (rr != null) {      generate(PARTITION_RESOLVER,rr);    }  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_1) >= 0) {    PartitionListener[] listeners=pa.getPartitionListeners();    for (int i=0; i < listeners.length; i++) {      PartitionListener listener=listeners[i];      if (listener != null) {        generate(PARTITION_LISTENER,listener);      }    }  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {    List<FixedPartitionAttributes> staticAttrs=pa.getFixedPartitionAttributes();    if (staticAttrs != null) {      generateFixedPartitionAttributes(FIXED_PARTITION_ATTRIBUTES,staticAttrs);    }  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_1) < 0) {    Properties p=pa.getLocalProperties();    generate(p,LOCAL_PROPERTIES);    p=pa.getGlobalProperties();    generate(p,GLOBAL_PROPERTIES);  }  handler.endElement("",PARTITION_ATTRIBUTES,PARTITION_ATTRIBUTES);}  }
class C{  private void contentToText(Object element,int level,StringBuffer buf){  String indent=VAUtils.indent(level);  buf.append(indent);  String label=fLabelProvider.getText(element);  buf.append(label);  buf.append("\n");  if (getViewer().getExpandedState(element)) {    for (    Object child : fContentProvider.getSortedChildren(element)) {      contentToText(child,level + 1,buf);    }  }}  }
class C{  protected void paintData(Graphics2D g2,Variate.N xData,Variate.N yData){  g2.setPaint(linePaint);  g2.setStroke(lineStroke);  int n=xData.getCount();  for (int i=0; i < n; i++) {    GeneralPath path=new GeneralPath();    double x0=((Number)xData.get(i)).doubleValue();    double y0=((Number)yData.get(i)).doubleValue();    double e=((Number)errorData.get(i)).doubleValue() / 2;    float fx=(float)transformX(x0);    float fy=(float)transformY(y0);    if (!Double.isInfinite(fx) && !Double.isInfinite(fy) && !Double.isNaN(fx)&& !Double.isNaN(fy)) {      if (orientation == Orientation.HORIZONTAL) {        float fx1=(float)transformX(x0 - e);        float fx2=(float)transformX(x0 + e);        path.moveTo(fx,fy);        path.lineTo(fx1,fy);        path.moveTo(fx,fy);        path.lineTo(fx2,fy);      } else       if (orientation == Orientation.VERTICAL) {        float fy1=(float)transformY(y0 - e);        float fy2=(float)transformY(y0 + e);        path.moveTo(fx,fy);        path.lineTo(fx,fy1);        path.moveTo(fx,fy);        path.lineTo(fx,fy2);      }    }    g2.draw(path);  }}  }
class C{  public static String translate(String str){  if (str == null)   return "";  int index, last=0, endIndex;  StringBuilder sb=null;  String tagName;  while ((index=str.indexOf('<',last)) != -1) {    int len=str.length();    char c;    for (endIndex=index + 1; endIndex < len; endIndex++) {      c=str.charAt(endIndex);      if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z'))       break;    }    tagName=str.substring(index + 1,endIndex);    if (compareTagName(tagName)) {      if (sb == null) {        sb=new StringBuilder();        last=0;      }      sb.append(str.substring(last,index + 1));      sb.append("invalidTag");      last=endIndex;    } else     if (sb != null) {      sb.append(str.substring(last,index + 1));      last=index + 1;    } else     last=index + 1;  }  if (sb != null) {    if (last != str.length())     sb.append(str.substring(last));    return sb.toString();  }  return str;}  }
class C{  public void writeLink(URL url,String body) throws IOException {  startTag(A);  writeAttr(HREF,url.toString());  write(body);  endTag(A);}  }
class C{  public void cancelRowUpdates() throws SQLException {  checkState();  rs.cancelRowUpdates();  notifyRowChanged();}  }
class C{  protected void updateSelectionStatus(){  setSelected(isPopupMenuItemSelected());}  }
class C{  public GridLayout(int columns){  this(1,columns);}  }
class C{  public void test_addAllILjava_util_Collection(){  alist.addAll(50,alist);  assertEquals("Returned incorrect size after adding to existing list",200,alist.size());  for (int i=0; i < 50; i++)   assertTrue("Manipulated elements < index",alist.get(i) == objArray[i]);  for (int i=0; i >= 50 && (i < 150); i++)   assertTrue("Failed to ad elements properly",alist.get(i) == objArray[i - 50]);  for (int i=0; i >= 150 && (i < 200); i++)   assertTrue("Failed to ad elements properly",alist.get(i) == objArray[i - 100]);  ArrayList listWithNulls=new ArrayList();  listWithNulls.add(null);  listWithNulls.add(null);  listWithNulls.add("yoink");  listWithNulls.add("kazoo");  listWithNulls.add(null);  alist.addAll(100,listWithNulls);  assertTrue("Incorrect size: " + alist.size(),alist.size() == 205);  assertNull("Item at slot 100 should be null",alist.get(100));  assertNull("Item at slot 101 should be null",alist.get(101));  assertEquals("Item at slot 102 should be 'yoink'","yoink",alist.get(102));  assertEquals("Item at slot 103 should be 'kazoo'","kazoo",alist.get(103));  assertNull("Item at slot 104 should be null",alist.get(104));  alist.addAll(205,listWithNulls);  assertTrue("Incorrect size2: " + alist.size(),alist.size() == 210);  try {    alist.addAll(-1,listWithNulls);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    alist.addAll(alist.size() + 1,listWithNulls);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    alist.addAll(0,null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_RECORD_ENTITY_2__TRACE_RECORD_1:    return TRACE_RECORD_1_EDEFAULT == null ? trace_record_1 != null : !TRACE_RECORD_1_EDEFAULT.equals(trace_record_1);}return super.eIsSet(featureID);}  }
class C{  public boolean isTrayIcon(){switch (this) {case DEFAULT_ICON:case WARNING_ICON:case DANGER_ICON:    return true;default :  return false;}}  }
class C{  public void checkBatchMessagesAreNotPagedTwice(Queue queue) throws Exception {  LinkedListIterator<MessageReference> pageIterator=queue.totalIterator();  Set<String> messageOrderSet=new HashSet<>();  int duplicates=0;  while (pageIterator.hasNext()) {    MessageReference reference=pageIterator.next();    String id=reference.getMessage().getStringProperty("id");    if (!messageOrderSet.add(id)) {      duplicates++;    }  }  assertTrue(duplicates == 0);}  }
class C{  private void notifyRowUpdater() throws SQLException {  if (rowUpdater != null) {    rowUpdater.setRow(row);  }}  }
class C{  public void reduceSmokeLevel(){switch (smokeLevel) {case SMOKE_LIGHT:case SMOKE_LI_LIGHT:case SMOKE_CHAFF_LIGHT:    smokeLevel=SMOKE_NONE;  break;case SMOKE_HEAVY:smokeLevel=SMOKE_LIGHT;break;case SMOKE_LI_HEAVY:smokeLevel=SMOKE_LI_LIGHT;break;default :smokeLevel=SMOKE_NONE;}}  }
class C{  private void updateMode(){  outlineView.setVisibility(mode == Mode.OUTLINE ? VISIBLE : GONE);  cardView.setVisibility(mode == Mode.CARD ? VISIBLE : GONE);}  }
class C{  public boolean isStatic(){  return false;}  }
class C{  public boolean writeMap(String indexName,final Map<String,Object> jsonMap,String typeName,String id){  long start=System.currentTimeMillis();  Long version=(Long)jsonMap.remove("_version");  IndexResponse r=elasticsearchClient.prepareIndex(indexName,typeName,id).setSource(jsonMap).setVersion(version == null ? 1 : version.longValue()).setVersionType(version == null ? VersionType.FORCE : VersionType.EXTERNAL).execute().actionGet();  if (version != null)   jsonMap.put("_version",version);  boolean created=r.isCreated();  long duration=Math.max(1,System.currentTimeMillis() - start);  long regulator=0;  if (duration > throttling_time_threshold) {    regulator=(long)(throttling_factor * duration);    try {      Thread.sleep(regulator);    } catch (    InterruptedException e) {    }  }  Log.getLog().info("elastic write entry to index " + indexName + ": "+ (created ? "created" : "updated")+ ", "+ duration+ " ms"+ (regulator == 0 ? "" : ", throttled with " + regulator + " ms"));  return created;}  }
class C{  public static void assertEquals(String message,long expected,long actual){  Assert.assertEquals(message,expected,actual);}  }
class C{  public void swap(int i,int j){  if (i == j)   return;  int t=get(i);  set(i,get(j));  set(j,t);}  }
class C{  public static VatRate updateVatRate(VatRate domObj,VOVatRate vo) throws ValidationException, ConcurrentModificationException {  validate(vo);  verifyVersionAndKey(domObj,vo);  domObj.setRate(vo.getRate());  return domObj;}  }
class C{  public ObjectFactory(){}  }
class C{  @Override public PGPPublicKeyRing removeSignature(String id,PGPPublicKeyRing keyToRemoveFrom){  try {    return PGPEncryptionUtil.removeSignature(keyToRemoveFrom,id);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public float sum(){  float s=0.0f;  for (int i=0; i < length; i++) {    s+=get(i);  }  return s;}  }
class C{  private void checkCachedValues(){  if (isFlags(FLAG_CACHED_VALUES_CHECKED)) {    return;  }  if (logger.isTraceEnabled())   logger.trace("Check Cached data for " + getPath());  if (!isFlags(FLAG_EXISTS_CHECKED)) {    setFlags(super.exists(),FLAG_EXISTS);    setFlags(true,FLAG_EXISTS_CHECKED);    if (!isFlags(FLAG_EXISTS)) {      if (logger.isTraceEnabled())       logger.trace("File does not exist - reset to defaults");      resetCached();      return;    }  }  if (!isFlags(FLAG_LENGTH_CHECKED)) {    long l=super.length();    if (privateLength != l) {      if (logger.isTraceEnabled())       logger.trace("privateLength not matched - CRC needs recalculating");      clearCachedCrc();    }    privateLength=l;  }  if (!isFlags(FLAG_MODIFIED_CHECKED)) {    long d=super.lastModified();    if (privateLastModified != d) {      if (logger.isTraceEnabled())       logger.trace("date not matched - CRC needs recalculating");      clearCachedCrc();    }    privateLastModified=d;  }  if (!isFlags(FLAG_CRC_CALCED) && privateCrc != CRC_NOT_SET) {    if (logger.isTraceEnabled())     logger.trace("CRC assumed valid");    setFlags(true,FLAG_CRC_CALCED);  }  if (!isFlags(FLAG_IS_DIRECTORY_CHECKED)) {    setFlags(super.isDirectory(),FLAG_IS_DIRECTORY);  }  setFlags(true,FLAG_MODIFIED_CHECKED + FLAG_LENGTH_CHECKED + FLAG_IS_DIRECTORY_CHECKED+ FLAG_CACHED_VALUES_CHECKED);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:32.227 -0500",hash_original_method="114A3AA754115CB63309037B1A16C75C",hash_generated_method="782115CA1F540B7D7546684D76970302") private void dispose(){synchronized (InputContextCallback.class) {    if (sInstance == null) {      mTextAfterCursor=null;      mTextBeforeCursor=null;      mExtractedText=null;      sInstance=this;    }  }}  }
class C{  public boolean pathExists(String path) throws KeeperException, InterruptedException {  return zkClient.exists(path,true);}  }
class C{  private void createLayouts(int widthItems,int widthLabel){  if (itemsLayout == null || itemsLayout.getWidth() > widthItems) {    itemsLayout=new StaticLayout(buildText(isScrollingPerformed),itemsPaint,widthItems,widthLabel > 0 ? Layout.Alignment.ALIGN_OPPOSITE : Layout.Alignment.ALIGN_CENTER,1,ADDITIONAL_ITEM_HEIGHT,false);  } else {    itemsLayout.increaseWidthTo(widthItems);  }  if (!isScrollingPerformed && (valueLayout == null || valueLayout.getWidth() > widthItems)) {    String text=getAdapter() != null ? getAdapter().getItem(currentItem) : null;    valueLayout=new StaticLayout(text != null ? text : "",valuePaint,widthItems,widthLabel > 0 ? Layout.Alignment.ALIGN_OPPOSITE : Layout.Alignment.ALIGN_CENTER,1,ADDITIONAL_ITEM_HEIGHT,false);  } else   if (isScrollingPerformed) {    valueLayout=null;  } else {    valueLayout.increaseWidthTo(widthItems);  }  if (widthLabel > 0) {    if (labelLayout == null || labelLayout.getWidth() > widthLabel) {      labelLayout=new StaticLayout(label,valuePaint,widthLabel,Layout.Alignment.ALIGN_NORMAL,1,ADDITIONAL_ITEM_HEIGHT,false);    } else {      labelLayout.increaseWidthTo(widthLabel);    }  }}  }
class C{  private static Frame showInitialSplash(){  Frame splashFrame=null;  Image image=null;  URL imageURL=getChosenSplashURL();  if (imageURL != null) {    try {      image=ImageIO.read(imageURL);    } catch (    IOException e) {      e.printStackTrace();    }    if (image != null) {      splashFrame=AWTSplashWindow.splash(image);    }  }  return splashFrame;}  }
class C{  public final void requestConf(boolean value) throws GSSException {  if (state == STATE_NEW && isInitiator())   confState=value;}  }
class C{  public static void waitForSchemaZkVersionAgreement(String collection,String localCoreNodeName,int schemaZkVersion,ZkController zkController,int maxWaitSecs){  RTimer timer=new RTimer();  List<GetZkSchemaVersionCallable> concurrentTasks=new ArrayList<>();  for (  String coreUrl : getActiveReplicaCoreUrls(zkController,collection,localCoreNodeName))   concurrentTasks.add(new GetZkSchemaVersionCallable(coreUrl,schemaZkVersion));  if (concurrentTasks.isEmpty())   return;  log.info("Waiting up to " + maxWaitSecs + " secs for "+ concurrentTasks.size()+ " replicas to apply schema update version "+ schemaZkVersion+ " for collection "+ collection);  int poolSize=Math.min(concurrentTasks.size(),10);  ExecutorService parallelExecutor=ExecutorUtil.newMDCAwareFixedThreadPool(poolSize,new DefaultSolrThreadFactory("managedSchemaExecutor"));  try {    List<Future<Integer>> results=parallelExecutor.invokeAll(concurrentTasks,maxWaitSecs,TimeUnit.SECONDS);    List<String> failedList=null;    for (int f=0; f < results.size(); f++) {      int vers=-1;      Future<Integer> next=results.get(f);      if (next.isDone() && !next.isCancelled()) {        try {          vers=next.get();        } catch (        ExecutionException e) {        }      }      if (vers == -1) {        String coreUrl=concurrentTasks.get(f).coreUrl;        log.warn("Core " + coreUrl + " version mismatch! Expected "+ schemaZkVersion+ " but got "+ vers);        if (failedList == null)         failedList=new ArrayList<>();        failedList.add(coreUrl);      }    }    if (failedList != null)     throw new SolrException(ErrorCode.SERVER_ERROR,failedList.size() + " out of " + (concurrentTasks.size() + 1)+ " replicas failed to update their schema to version "+ schemaZkVersion+ " within "+ maxWaitSecs+ " seconds! Failed cores: "+ failedList);  } catch (  InterruptedException ie) {    log.warn("Core " + localCoreNodeName + " was interrupted waiting for schema version "+ schemaZkVersion+ " to propagate to "+ concurrentTasks.size()+ " replicas for collection "+ collection);    Thread.currentThread().interrupt();  } finally {    if (!parallelExecutor.isShutdown())     parallelExecutor.shutdown();  }  log.info("Took {}ms for {} replicas to apply schema update version {} for collection {}",timer.getTime(),concurrentTasks.size(),schemaZkVersion,collection);}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (methodParameters != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      size+=8 + ctanns.getSize();    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      size+=8 + ictanns.getSize();    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));      ctanns.put(out);    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));      ictanns.put(out);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (methodParameters != null) {    out.putShort(cw.newUTF8("MethodParameters"));    out.putInt(methodParameters.length + 1).putByte(methodParametersCount);    out.putByteArray(methodParameters.data,0,methodParameters.length);  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.OPERATION;}  }
class C{  @Before public void resetState(){  intervalAddedFlag=false;  intervalRemovedFlag=false;  contentsChangedFlag=false;  index0=-1;  index1=-1;}  }
class C{  @Override public boolean equals(Object obj){  return (obj instanceof LocalRMIServerSocketFactory);}  }
class C{  public void enable(){  setEnabled(true);}  }
class C{  public void configure(PluginContext context) throws ReplicatorException, InterruptedException {  runtime=(ReplicatorRuntime)context;}  }
class C{  public <T extends ServiceDocument>Iterable<T> documents(Class<T> type){  if (this.results == null || this.results.documents == null) {    return Collections.emptyList();  }  Stream<T> stream=this.results.documents.values().stream().map(null);  return null;}  }
class C{  public WriteCoilRequest(int ref,boolean b){  super();  setFunctionCode(Modbus.WRITE_COIL);  setDataLength(4);  setReference(ref);  setCoil(b);}  }
class C{  public static <T>Patch<T> diff(List<T> original,List<T> revised,Equalizer<T> equalizer){  if (equalizer != null) {    return DiffUtils.diff(original,revised,new MyersDiff<T>(equalizer));  }  return DiffUtils.diff(original,revised,new MyersDiff<T>());}  }
class C{  public static int floorLog(BigInteger a){  int result=-1;  BigInteger p=ONE;  while (p.compareTo(a) <= 0) {    result++;    p=p.shiftLeft(1);  }  return result;}  }
class C{  public boolean process(){  return this.process;}  }
class C{  public void checkDirectMessages(){  if (!getReplyToMessages()) {  }  try {    if (getConnection() == null) {      connect();    }    ResponseList<DirectMessage> messages=getConnection().getDirectMessages();    if (!messages.isEmpty()) {      Network memory=getBot().memory().newMemory();      Vertex twitter=memory.createVertex(getPrimitive());      Vertex vertex=twitter.getRelationship(Primitive.LASTDIRECTMESSAGE);      long lastMessage=0;      if (vertex != null) {        lastMessage=((Number)vertex.getData()).longValue();      }      long max=0;      for (      DirectMessage message : messages) {        if ((System.currentTimeMillis() - message.getCreatedAt().getTime()) > DAY) {          continue;        }        if (message.getCreatedAt().getTime() > lastMessage) {          if (message.getSenderId() != message.getRecipientId()) {            input(message);          }          if (message.getCreatedAt().getTime() > max) {            max=message.getCreatedAt().getTime();          }        }      }      if (max != 0) {        twitter.setRelationship(Primitive.LASTDIRECTMESSAGE,memory.createVertex(max));        memory.save();      }    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  public static Spline createMonotoneCubicSpline(float[] x,float[] y){  if (x == null || y == null || x.length != y.length || x.length < 2) {    throw new IllegalArgumentException("There must be at least two control " + "points and the arrays must be of equal length.");  }  final int n=x.length;  float[] d=new float[n - 1];  float[] m=new float[n];  for (int i=0; i < n - 1; i++) {    float h=x[i + 1] - x[i];    if (h <= 0f) {      throw new IllegalArgumentException("The control points must all " + "have strictly increasing X values.");    }    d[i]=(y[i + 1] - y[i]) / h;  }  m[0]=d[0];  for (int i=1; i < n - 1; i++) {    m[i]=(d[i - 1] + d[i]) * 0.5f;  }  m[n - 1]=d[n - 2];  for (int i=0; i < n - 1; i++) {    if (d[i] == 0f) {      m[i]=0f;      m[i + 1]=0f;    } else {      float a=m[i] / d[i];      float b=m[i + 1] / d[i];      if (a < 0f || b < 0f) {        throw new IllegalArgumentException("The control points must have " + "monotonic Y values.");      }      float h=FloatMath.hypot(a,b);      if (h > 9f) {        float t=3f / h;        m[i]=t * a * d[i];        m[i + 1]=t * b * d[i];      }    }  }  return new Spline(x,y,m);}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.THIS_TYPE_REF_NOMINAL;}  }
class C{  public BookManagerImpl(){  this.attachInterface(this,DESCRIPTOR);}  }
class C{  public LoggingFraction customFormatter(String name,String module,String className){  return customFormatter(name,module,className,null);}  }
class C{  public AWTTerminal(TerminalSize initialTerminalSize,TerminalEmulatorDeviceConfiguration deviceConfiguration,AWTTerminalFontConfiguration fontConfiguration,TerminalEmulatorColorConfiguration colorConfiguration,TerminalScrollController scrollController){  if (deviceConfiguration == null) {    deviceConfiguration=TerminalEmulatorDeviceConfiguration.getDefault();  }  if (fontConfiguration == null) {    fontConfiguration=SwingTerminalFontConfiguration.getDefault();  }  if (colorConfiguration == null) {    colorConfiguration=TerminalEmulatorColorConfiguration.getDefault();  }  terminalImplementation=new AWTTerminalImplementation(this,fontConfiguration,initialTerminalSize,deviceConfiguration,colorConfiguration,scrollController);}  }
class C{  protected boolean validate(final char[] component,final int soffset,int eoffset,final BitSet generous){  if (eoffset == -1) {    eoffset=component.length - 1;  }  for (int i=soffset; i <= eoffset; i++) {    if (!generous.get(component[i])) {      return false;    }  }  return true;}  }
class C{  public static void main(String[] args){  Properties options=StringUtils.argsToProperties(args,optionArgDefs());  if (options.containsKey("help") || args.length == 0) {    System.err.println(usage(GermanPostprocessor.class.getName()));    System.exit(-1);  }  int nThreads=PropertiesUtils.getInt(options,"nthreads",1);  GermanPreprocessor preProcessor=new GermanPreprocessor();  GermanPostprocessor postProcessor=new GermanPostprocessor(options);  CRFPostprocessor.setup(postProcessor,preProcessor,options);  CRFPostprocessor.execute(nThreads,preProcessor,postProcessor);}  }
class C{  public synchronized void showAllFrames(){  Object[] vals=(Object[])(frameList.toArray());  for (int x=0; x < vals.length; x++) {    ((JFrame)(vals[x])).toFront();    ((JFrame)(vals[x])).setVisible(true);  }  frameListDisplay.repaint();}  }
class C{  public static double max(double a,double b){  return 0.0d;}  }
class C{  @Override public void clearWarnings() throws SQLException {  try {    debugCodeCall("clearWarnings");    checkClosed();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected Generate_path_Impl(){  super();}  }
class C{  private ExifUtils(){}  }
class C{  public static void populateConnectionDefaults(final MqttConnectionDetails connection){  if (connection.getProtocol() == null) {    connection.setProtocol(ProtocolVersionEnum.MQTT_DEFAULT);  }  if (connection.isWebSocket() == null) {    connection.setWebSocket(false);  }  if (connection.getName() == null || connection.getName().isEmpty()) {    connection.setName(ConnectionUtils.composeConnectionName(connection.getClientID(),connection.getServerURI()));  }  if (connection.isCleanSession() == null) {    connection.setCleanSession(MqttConnectOptions.CLEAN_SESSION_DEFAULT);  }  if (connection.getConnectionTimeout() == null) {    connection.setConnectionTimeout(MqttConnectOptions.CONNECTION_TIMEOUT_DEFAULT);  }  if (connection.getKeepAliveInterval() == null) {    connection.setKeepAliveInterval(MqttConnectOptions.KEEP_ALIVE_INTERVAL_DEFAULT);  }}  }
class C{  protected Position(){}  }
class C{  boolean hasLeader(Person[] persons){  int n=persons.length;  int leader=0;  int cur=1;  while (cur < n) {    if (isFriend(persons[leader],persons[cur]))     leader=cur;    cur++;  }  for (int i=0; i < n; i++) {    if (i != leader && isFriend(persons[leader],persons[i])) {      return -1;    }  }  return leader;}  }
class C{  public float computeStatistics(Project project,ExpressionAST expr) throws ScopeException, ExecutionException {  DatasourceDefinition ds=getDatasourceDefinition(project);  IDatabaseStatistics stats=ds.getDBManager().getStatistics();  if (stats != null) {    ExtractColumns visitor=new ExtractColumns();    List<Column> columns=visitor.apply(expr);    return DatabaseServiceImpl.INSTANCE.getStatisticsMax(stats,columns);  } else {    return -1;  }}  }
class C{  public static void rmempty(IndexedMatrixValue data,IndexedMatrixValue offset,boolean rmRows,long len,long brlen,long bclen,ArrayList<IndexedMatrixValue> outList) throws DMLRuntimeException {  if (!(data.getValue() instanceof MatrixBlock && offset.getValue() instanceof MatrixBlock))   throw new DMLRuntimeException("Unsupported input data: expected " + MatrixBlock.class.getName() + " but got "+ data.getValue().getClass().getName()+ " and "+ offset.getValue().getClass().getName());  if (rmRows && data.getValue().getNumRows() != offset.getValue().getNumRows() || !rmRows && data.getValue().getNumColumns() != offset.getValue().getNumColumns()) {    throw new DMLRuntimeException("Dimension mismatch between input data and offsets: [" + data.getValue().getNumRows() + "x"+ data.getValue().getNumColumns()+ " vs "+ offset.getValue().getNumRows()+ "x"+ offset.getValue().getNumColumns());  }  HashMap<MatrixIndexes,IndexedMatrixValue> out=new HashMap<MatrixIndexes,IndexedMatrixValue>();  MatrixBlock linData=(MatrixBlock)data.getValue();  MatrixBlock linOffset=(MatrixBlock)offset.getValue();  MatrixIndexes tmpIx=new MatrixIndexes(-1,-1);  if (rmRows) {    long rlen=len;    long clen=linData.getNumColumns();    for (int i=0; i < linOffset.getNumRows(); i++) {      long rix=(long)linOffset.quickGetValue(i,0);      if (rix > 0) {        MatrixBlock src=(MatrixBlock)linData.sliceOperations(i,i,0,(int)(clen - 1),new MatrixBlock());        long brix=(rix - 1) / brlen + 1;        long lbrix=(rix - 1) % brlen;        tmpIx.setIndexes(brix,data.getIndexes().getColumnIndex());        if (!out.containsKey(tmpIx)) {          IndexedMatrixValue tmpIMV=new IndexedMatrixValue(new MatrixIndexes(),new MatrixBlock());          tmpIMV.getIndexes().setIndexes(tmpIx);          ((MatrixBlock)tmpIMV.getValue()).reset((int)Math.min(brlen,rlen - ((brix - 1) * brlen)),(int)clen);          out.put(tmpIMV.getIndexes(),tmpIMV);        }        ((MatrixBlock)out.get(tmpIx).getValue()).copy((int)lbrix,(int)lbrix,0,(int)clen - 1,src,false);      }    }  } else {    long rlen=linData.getNumRows();    long clen=len;    for (int i=0; i < linOffset.getNumColumns(); i++) {      long cix=(long)linOffset.quickGetValue(0,i);      if (cix > 0) {        MatrixBlock src=(MatrixBlock)linData.sliceOperations(0,(int)(rlen - 1),i,i,new MatrixBlock());        long bcix=(cix - 1) / bclen + 1;        long lbcix=(cix - 1) % bclen;        tmpIx.setIndexes(data.getIndexes().getRowIndex(),bcix);        if (!out.containsKey(tmpIx)) {          IndexedMatrixValue tmpIMV=new IndexedMatrixValue(new MatrixIndexes(),new MatrixBlock());          tmpIMV.getIndexes().setIndexes(tmpIx);          ((MatrixBlock)tmpIMV.getValue()).reset((int)rlen,(int)Math.min(bclen,clen - ((bcix - 1) * bclen)));          out.put(tmpIMV.getIndexes(),tmpIMV);        }        ((MatrixBlock)out.get(tmpIx).getValue()).copy(0,(int)rlen - 1,(int)lbcix,(int)lbcix,src,false);      }    }  }  for (  IndexedMatrixValue imv : out.values()) {    ((MatrixBlock)imv.getValue()).recomputeNonZeros();    outList.add(imv);  }}  }
class C{  private int addAttributes(){  int row=0;  PreparedStatement pstmt=null;  ResultSet rs=null;  String whereAttributeSet;  if (p_M_AttributeSet_ID > 0)   whereAttributeSet="AND M_Attribute_ID IN (SELECT M_Attribute_ID FROM M_AttributeUse WHERE M_AttributeSet_ID=" + p_M_AttributeSet_ID + ")"; else   whereAttributeSet="";  String sql=MRole.getDefault().addAccessSQL("SELECT M_Attribute_ID, Name, Description, AttributeValueType, IsInstanceAttribute " + "FROM M_Attribute " + "WHERE IsActive='Y' " + whereAttributeSet + " ORDER BY IsInstanceAttribute, Name","M_Attribute",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  boolean instanceLine=false;  boolean productLine=false;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next()) {      int attribute_ID=rs.getInt(1);      String name=rs.getString(2);      String description=rs.getString(3);      String attributeValueType=rs.getString(4);      boolean isInstanceAttribute="Y".equals(rs.getString(5));      if (!productLine && !isInstanceAttribute) {        CPanel group=new CPanel();        group.setBorder(new VLine(Msg.translate(Env.getCtx(),"IsProductAttribute")));        group.add(Box.createVerticalStrut(VLine.SPACE));        centerPanel.add(group,new ALayoutConstraint(row++,0));        productLine=true;      }      if (!instanceLine && isInstanceAttribute) {        CPanel group=new CPanel();        group.add(Box.createVerticalStrut(VLine.SPACE));        group.setBorder(new VLine(Msg.translate(Env.getCtx(),"IsInstanceAttribute")));        group.add(Box.createVerticalStrut(VLine.SPACE));        centerPanel.add(group,new ALayoutConstraint(row++,0));        instanceLine=true;      }      CLabel label=new CLabel(name);      if (description != null && description.length() > 0)       label.setToolTipText(description);      centerPanel.add(label,new ALayoutConstraint(row++,0));      Component field=null;      if (MAttribute.ATTRIBUTEVALUETYPE_List.equals(attributeValueType))       field=new VComboBox(getAttributeList(attribute_ID)); else       if (MAttribute.ATTRIBUTEVALUETYPE_Number.equals(attributeValueType))       field=new VNumber(name,false,false,true,DisplayType.Number,name); else       field=new VString(name,false,false,true,10,40,null,null);      label.setLabelFor(field);      centerPanel.add(field,null);      field.setName(String.valueOf(attribute_ID));      if (isInstanceAttribute)       m_instanceEditors.add(field); else       m_productEditors.add(field);      Component fieldTo=null;      if (MAttribute.ATTRIBUTEVALUETYPE_Number.equals(attributeValueType)) {        fieldTo=new VNumber(name,false,false,true,DisplayType.Number,name);        centerPanel.add(new CLabel("-"),null);        centerPanel.add(fieldTo,null);      }      if (isInstanceAttribute)       m_instanceEditorsTo.add(fieldTo); else       m_productEditorsTo.add(fieldTo);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (!instanceLine) {    boolean isGuarantee=true;    boolean isSerial=true;    boolean isLot=true;    if (p_M_AttributeSet_ID > 0) {      MAttributeSet as=new MAttributeSet(Env.getCtx(),p_M_AttributeSet_ID,null);      isGuarantee=as.isGuaranteeDate();      isSerial=as.isSerNo();      isLot=as.isLot();    }    if (isGuarantee || isSerial || isLot) {      CPanel group=new CPanel();      group.setBorder(new VLine(Msg.translate(Env.getCtx(),"IsInstanceAttribute")));      group.add(Box.createVerticalStrut(VLine.SPACE));      centerPanel.add(group,new ALayoutConstraint(row++,0));      instanceLine=true;    }  }  return row;}  }
class C{  public XObject execute(XPathContext xctxt,int contextNode,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  xctxt.pushNamespaceContext(namespaceContext);  xctxt.pushCurrentNodeAndExpression(contextNode,contextNode);  XObject xobj=null;  try {    xobj=m_mainExp.execute(xctxt);  } catch (  TransformerException te) {    te.setLocator(this.getLocator());    ErrorListener el=xctxt.getErrorListener();    if (null != el) {      el.error(te);    } else     throw te;  }catch (  Exception e) {    while (e instanceof org.apache.xml.utils.WrappedRuntimeException) {      e=((org.apache.xml.utils.WrappedRuntimeException)e).getException();    }    String msg=e.getMessage();    if (msg == null || msg.length() == 0) {      msg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XPATH_ERROR,null);    }    TransformerException te=new TransformerException(msg,getLocator(),e);    ErrorListener el=xctxt.getErrorListener();    if (null != el) {      el.fatalError(te);    } else     throw te;  } finally {    xctxt.popNamespaceContext();    xctxt.popCurrentNodeAndExpression();  }  return xobj;}  }
class C{  private void paramsTest(){  checkParams();  checkBuilder();  checkClasses();  final Map<String,Class<?>> fieldsParams=fieldsParams(mParams);  final Set<String> fieldParamsSet=fieldsParams.keySet();  final Map<String,Class<?>> fieldsBuilder=fieldsBuilder(mBuilder);  final Set<String> fieldBuilderSet=fieldsBuilder.keySet();  final Map<String,Class<?>> methodsParams=methodsParams();  final Set<String> methodSet=methodsParams.keySet();  methodsBuilder();  for (  final String fieldName : fieldParamsSet) {    final boolean containsMethod=methodSet.contains(fieldName);    error(containsMethod,"Params Field:" + fieldName + " does not have an associated method");    final boolean containsBuilderField=fieldBuilderSet.contains(fieldName);    error(containsBuilderField,"Params Field:" + fieldName + " does not have a corresponding field in Builder");    final Class<?> fieldClass=fieldsParams.get(fieldName);    if (containsMethod) {      final Class<?> methodReturnClass=methodsParams.get(fieldName);      error(fieldClass.equals(methodReturnClass),"Params: " + fieldName + " return type of method:"+ methodReturnClass.getCanonicalName()+ " does not equal type of field:"+ fieldClass.getCanonicalName());    }    if (containsBuilderField) {      if (!mExcludeTypeCheck.contains(fieldName)) {        final Class<?> fieldBuilderClass=fieldsBuilder.get(fieldName);        error(fieldClass.equals(fieldBuilderClass),"Both: " + fieldName + " type of params field:"+ fieldClass.getCanonicalName()+ " does not equal type of builder field:"+ fieldBuilderClass.getCanonicalName());      }    }  }  for (  final String fieldName : fieldBuilderSet) {    error(fieldParamsSet.contains(fieldName),"Builder Field:" + fieldName + " does not have a corresponding field in Params");  }  for (  final String methodName : methodSet) {    error(fieldParamsSet.contains(methodName),"Params Method:" + methodName + " does not have an associated variable");  }}  }
class C{  public static void main(String[] args){  try {    new Subscriber(args).run();  } catch (  IOException|TimeoutException e) {    log.error("Couldn't create Subscriber",e);    System.exit(-1);  }  System.exit(0);}  }
class C{  @Override public boolean domainMatch(final String host,final String domain){  if (host.equals(domain)) {    return true;  }  if (domain.equals("." + host)) {    return true;  }  if (domain.startsWith(".") && host.endsWith(domain)) {    return true;  }  return false;}  }
class C{  public Statement createStatement(){  StatementImpl statement=new StatementImpl();  return statement;}  }
class C{  public CStopTraceAction(final JFrame parent,final IFrontEndDebuggerProvider debugger){  m_parent=Preconditions.checkNotNull(parent,"IE00312: Parent argument can not be null");  m_debugger=Preconditions.checkNotNull(debugger,"IE01549: Debugger argument can not be null");  putValue(Action.NAME,"ST");  putValue(Action.SHORT_DESCRIPTION,"Stop Trace Mode");  putValue(Action.SMALL_ICON,new ImageIcon("data/recordstop_up.jpg"));}  }
class C{  @RequestMapping(value=STORAGE_UNIT_NOTIFICATIONS_URI_PREFIX + "/namespaces/{namespace}/notificationNames/{notificationName}",method=RequestMethod.PUT) @Secured(SecurityFunctions.FN_STORAGE_UNIT_NOTIFICATION_REGISTRATIONS_PUT) public StorageUnitNotificationRegistration updateStorageUnitNotificationRegistration(@PathVariable("namespace") String namespace,@PathVariable("notificationName") String notificationName,@RequestBody StorageUnitNotificationRegistrationUpdateRequest request){  return storageUnitNotificationRegistrationService.updateStorageUnitNotificationRegistration(new NotificationRegistrationKey(namespace,notificationName),request);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.client && !Sage.isTrueClient())   return makeNetworkedCall(stack); else   return Boolean.valueOf(SageTV.getSyncSystemClock());}  }
class C{  final boolean isVolatile(){  return Modifier.isVolatile(getModifiers());}  }
class C{  private static boolean isDigit(char p_char){  return p_char >= '0' && p_char <= '9';}  }
class C{  public int numberOfNodes(){  int numNodesInSubNodes=0;  for (int i=0; i < numParameters; i++)   numNodesInSubNodes+=parameters[i].numberOfNodes();  return 1 + numNodesInSubNodes;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.878 -0500",hash_original_method="621426751430068D32289E518662756C",hash_generated_method="46CFC49EE8BA41524B35A3152203501D") public RunningServiceInfo(){}  }
class C{  protected void checkMissing(Instances instances) throws Exception {  for (int i=0; i < instances.numInstances(); i++) {    Instance ins=instances.instance(i);    for (int j=0; j < ins.numValues(); j++) {      if (ins.index(j) != ins.classIndex())       if (ins.isMissingSparse(j)) {        throw new Exception("ERROR: KDTree can not deal with missing " + "values. Please run ReplaceMissingValues filter " + "on the dataset before passing it on to the KDTree.");      }    }  }}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  private void initComputeProgram(){  glUseProgram(computeProgram);  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);  workGroupSizeX=workGroupSize.get(0);  workGroupSizeY=workGroupSize.get(1);  eyeUniform=glGetUniformLocation(computeProgram,"eye");  ray00Uniform=glGetUniformLocation(computeProgram,"ray00");  ray10Uniform=glGetUniformLocation(computeProgram,"ray10");  ray01Uniform=glGetUniformLocation(computeProgram,"ray01");  ray11Uniform=glGetUniformLocation(computeProgram,"ray11");  sizeUniform=glGetUniformLocation(computeProgram,"size");  timeUniform=glGetUniformLocation(computeProgram,"time");  IntBuffer props=BufferUtils.createIntBuffer(1);  IntBuffer params=BufferUtils.createIntBuffer(1);  props.put(0,GL_BUFFER_BINDING);  int boxesResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"Boxes");  int outputImageResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"OutputImage");  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,boxesResourceIndex,props,null,params);  boxesSsboBinding=params.get(0);  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,outputImageResourceIndex,props,null,params);  outputImageBinding=params.get(0);  glUseProgram(0);}  }
class C{  private tr fillTable_Lookup_Headers(String columnName,int fieldRefId,tr line,String targetBase,boolean mandatory,boolean onlyValidated,boolean onlyActive,boolean temporary,boolean firstHeaderLine){  String sqlSelect=null;  input filter=null;  if (fieldRefId > 0)   sqlSelect="SELECT ColumnName, Name FROM AD_Column WHERE AD_Table_ID IN (SELECT AD_Table_ID FROM AD_Ref_Table WHERE AD_Reference_ID = " + fieldRefId + ") ORDER BY SEQNO"; else   sqlSelect="SELECT ColumnName, Name FROM AD_Column WHERE AD_Table_ID IN (SELECT AD_Table_ID FROM AD_Table WHERE TableName = '" + columnName.replace("_ID","") + "') ORDER BY SEQNO";  if (firstHeaderLine) {    line.addElement(new th());    m_HeaderSelect=new StringBuffer(columnName);    line.addElement(new th(columnName).setClass("table-filterable table-filtered table-sortable:default"));    m_colCount=1;  } else {    line.addElement(new th("Find"));    filter=new input(input.TYPE_TEXT,columnName + "filter","");    filter.setOnKeyUp("Table.filter(this,this)");    line.addElement(new th().addElement(filter));  }  try {    PreparedStatement pstmt=DB.prepareStatement(sqlSelect.toString(),null);    ResultSet rs=pstmt.executeQuery();    String col;    while (rs.next()) {      col=rs.getString(1);      if (col.equals("Value") || col.equals("DocumentNo") || col.equals("Name")|| col.equals("Description")) {        if (firstHeaderLine) {          line.addElement(new th(rs.getString(2)).setClass("table-filterable table-filtered table-sortable:default"));          m_HeaderSelect.append(",").append(col);          m_colCount++;        } else {          filter=new input(input.TYPE_TEXT,rs.getString(2) + "filter","");          filter.setOnKeyUp("Table.filter(this,this)");          line.addElement(new th().addElement(filter));        }      }    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sqlSelect.toString(),e);  }  return line;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public DateMidnight addWrapFieldToCopy(int value){  return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(),value));}  }
class C{  public void initializeDefinition(String leftArg,String rightArg,String returnType){  m_leftArg=leftArg;  m_rightArg=rightArg;  m_returnType=returnType;  s_logger.log(Level.FINEST,toString());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.012 -0400",hash_original_method="41E903B1D0BE5047F44C6158079A30F9",hash_generated_method="16FE8F360E82F90545C4D7C4342FF530") public final void warn(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {    log(SimpleLog.LOG_LEVEL_WARN,message,t);  }}  }
class C{  public void addPreloadEntry(GridCacheEntryInfo info){  if (preloadEntries == null)   preloadEntries=new ArrayList<>();  preloadEntries.add(info);}  }
class C{  private static int NewDoubleArray(JNIEnvironment env,int length){  if (traceJNI)   VM.sysWrite("JNI called: NewDoubleArray  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    double[] newArray=new double[length];    return env.pushJNIRef(newArray);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public WebSocket clearListeners(){  mListenerManager.clearListeners();  return this;}  }
class C{  @Override public void acceptDataSet(ThresholdDataEvent e){  if (!GraphicsEnvironment.isHeadless()) {    try {      setCurveData(e.getDataSet(),e.getClassAttribute());    } catch (    Exception ex) {      System.err.println("[CostBenefitAnalysis] Problem setting up visualization.");      ex.printStackTrace();    }  } else {    m_headlessEvents=new ArrayList<EventObject>();    m_headlessEvents.add(e);  }}  }
class C{  protected void close(){}  }
class C{  public QueryIndex(String field,boolean asc,String name){  this(field,QueryIndexType.SORTED,asc);  this.name=name;}  }
class C{  private void applyRotation(int position,float start,float end){  final float centerX=mContainer.getWidth() / 2.0f;  final float centerY=mContainer.getHeight() / 2.0f;  final AbRotate3dAnimation rotation=new AbRotate3dAnimation(start,end,centerX,centerY,310.0f,true);  rotation.setDuration(500);  rotation.setFillAfter(true);  rotation.setInterpolator(new AccelerateInterpolator());  rotation.setAnimationListener(new DisplayNextView(position));  mContainer.startAnimation(rotation);}  }
class C{  private ConnectivityGrid(int cellSize){  this.rows=worldSizeY / cellSize + 1;  this.cols=worldSizeX / cellSize + 1;  this.cells=new GridCell[rows + 2][cols + 2];  this.cellSize=cellSize;  for (int i=0; i < rows + 2; i++) {    for (int j=0; j < cols + 2; j++) {      this.cells[i][j]=new GridCell();    }  }  ginterfaces=new HashMap<NetworkInterface,GridCell>();}  }
class C{  public WikibasePoint southWest(){  return sw;}  }
class C{  public static String gsm8BitUnpackedToString(byte[] data,int offset,int length){  return gsm8BitUnpackedToString(data,offset,length,"");}  }
class C{  public AbstractAxisArrow(String sidc){  this(sidc,1);}  }
class C{  public void worldToLocal(Vector3 coord){  coord.setX(coord.getX() - tiePoint[0] - (physicalWidth / 2));  coord.setY(coord.getY() - tiePoint[1] + (physicalLength / 2));  coord.setZ(coord.getZ() - tiePoint[2]);}  }
class C{  @Override public boolean onLeftClickEntity(ItemStack itemStack,EntityPlayer player,Entity entity){  if (!player.worldObj.isRemote) {    if (this.getEnergy(itemStack) > ENERGY_PER_TICK) {      setTrackingEntity(itemStack,entity);      player.addChatMessage(new ChatComponentText(LangUtils.localize("message.tracker.nowtrack") + " " + entity.getCommandSenderName()));      return true;    } else {      player.addChatMessage(new ChatComponentText(LangUtils.localize("message.tracker.nopower")));    }  }  return false;}  }
class C{  public ParameterizedType createParameterizedType(){  ParameterizedTypeImpl parameterizedType=new ParameterizedTypeImpl();  return parameterizedType;}  }
class C{  public CF5(int numberOfVariables){  super(numberOfVariables,2,1);}  }
class C{  public static <T>FastFuture<T> fromCompletableFuture(final CompletableFuture<T> cf){  final FastFuture<T> f=new FastFuture<>();  cf.thenAccept(null);  cf.exceptionally(null);  return f;}  }
class C{  public static INaviView create(final INaviModule container,final ReilGraph graph){  Preconditions.checkNotNull(container,"IE01809: Container argument can not be null");  Preconditions.checkNotNull(graph,"IE01815: Graph argument can not be null");  final INaviView view=container.getContent().getViewContainer().createView("REIL View","");  final Map<ReilBlock,CCodeNode> nodeMap=new HashMap<ReilBlock,CCodeNode>();  for (  final ReilBlock block : graph) {    final List<INaviInstruction> instructions=new ArrayList<INaviInstruction>();    for (    final ReilInstruction reilInstruction : block) {      final List<COperandTree> operands=new ArrayList<COperandTree>();      if (reilInstruction.getFirstOperand().getType() == OperandType.EMPTY) {        operands.add(getEmptyOperand(container));      } else {        operands.add(convert(container,reilInstruction.getFirstOperand()));      }      if (reilInstruction.getSecondOperand().getType() == OperandType.EMPTY) {        operands.add(getEmptyOperand(container));      } else {        operands.add(convert(container,reilInstruction.getSecondOperand()));      }      if (reilInstruction.getThirdOperand().getType() == OperandType.EMPTY) {        operands.add(getEmptyOperand(container));      } else {        operands.add(convert(container,reilInstruction.getThirdOperand()));      }      final INaviInstruction convertedInstruction=container.createInstruction(reilInstruction.getAddress(),reilInstruction.getMnemonic(),operands,new byte[0],"REIL");      instructions.add(convertedInstruction);    }    final CCodeNode node=view.getContent().createCodeNode(null,instructions);    node.setColor(ConfigManager.instance().getColorSettings().getBasicBlocksColor());    nodeMap.put(block,node);  }  for (  final ReilEdge edge : graph.getEdges()) {    final CNaviViewEdge reilEdge=view.getContent().createEdge(nodeMap.get(edge.getSource()),nodeMap.get(edge.getTarget()),edge.getType());    EdgeInitializer.adjustColor(reilEdge);  }  return view;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:05.754 -0500",hash_original_method="367BB2C71096BB3ED82A8E67F24F8287",hash_generated_method="6490A68CD298D02C6E158AABC49A54BE") public static RenderScript create(Context ctx){  RenderScript rs=new RenderScript(ctx);  int sdkVersion=getTargetSdkVersion(ctx);  rs.mDev=rs.nDeviceCreate();  rs.mContext=rs.nContextCreate(rs.mDev,0,sdkVersion);  if (rs.mContext == 0) {    throw new RSDriverException("Failed to create RS context.");  }  rs.mMessageThread=new MessageThread(rs);  rs.mMessageThread.start();  return rs;}  }
class C{  private int rotateRight(int x,int y){  return (x >>> y) | (x << -y);}  }
class C{  private long readVarint64() throws TException {  int shift=0;  long result=0;  if (trans_.getBytesRemainingInBuffer() >= 10) {    byte[] buf=trans_.getBuffer();    int pos=trans_.getBufferPosition();    int off=0;    while (true) {      byte b=buf[pos + off];      result|=(long)(b & 0x7f) << shift;      if ((b & 0x80) != 0x80)       break;      shift+=7;      off++;    }    trans_.consumeBuffer(off + 1);  } else {    while (true) {      byte b=readByte();      result|=(long)(b & 0x7f) << shift;      if ((b & 0x80) != 0x80)       break;      shift+=7;    }  }  return result;}  }
class C{  private int scanForNextRef(int bitnum,int wordnum,int remaining,byte[] map){  int retbit, count=0;  while (bitnum > BITS_PER_MAP_ELEMENT) {    wordnum++;    bitnum-=BITS_PER_MAP_ELEMENT;    count+=BITS_PER_MAP_ELEMENT;  }  int remain=(BITS_PER_MAP_ELEMENT + 1) - bitnum;  if (remain >= remaining) {    retbit=scanByte(bitnum,wordnum,remaining,map);    if (retbit == 0)     return 0;    return (retbit + count);  }  int startbit=bitnum;  retbit=scanByte(startbit,wordnum,remain,map);  if (retbit != 0)   return (retbit + count);  startbit=1;  remaining-=remain;  count+=BITS_PER_MAP_ELEMENT;  while (remaining > BITS_PER_MAP_ELEMENT) {    wordnum++;    remaining-=BITS_PER_MAP_ELEMENT;    retbit=scanByte(startbit,wordnum,BITS_PER_MAP_ELEMENT,map);    if (retbit != 0)     return (retbit + count);    count+=BITS_PER_MAP_ELEMENT;  }  wordnum++;  retbit=scanByte(startbit,wordnum,remaining,map);  if (retbit != 0)   return (retbit + count);  return 0;}  }
class C{  public void put(String variable,Object value){  if (putInternal(variable,value)) {    PuzzleEventDispatcher.get().notify(this);  }}  }
class C{  private static JFreeChart createAreaChart(){  Number[][] data=new Integer[][]{{new Integer(-3),new Integer(-2)},{new Integer(-1),new Integer(1)},{new Integer(2),new Integer(3)}};  CategoryDataset dataset=DatasetUtilities.createCategoryDataset("S","C",data);  return ChartFactory.createAreaChart("Area Chart","Domain","Range",dataset,PlotOrientation.HORIZONTAL,true,true,true);}  }
class C{  private void breakBarrier(){  generation.broken=true;  count=parties;  trip.signalAll();}  }
class C{  public void receive(Message message){  if (message instanceof P25Message) {    updateNAC(((P25Message)message).getNAC());    if (message instanceof LDUMessage) {      processLDU((LDUMessage)message);    } else     if (message instanceof TSBKMessage) {      processTSBK((TSBKMessage)message);    } else     if (message instanceof TDULinkControlMessage) {      processTDULC((TDULinkControlMessage)message);    } else     if (message instanceof PDUMessage) {      processPDU((PDUMessage)message);    } else     if (message instanceof HDUMessage) {      processHDU((HDUMessage)message);    } else     if (message instanceof TDUMessage) {      processTDU((TDUMessage)message);    }  }}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  put(key,new Long(value));  return this;}  }
class C{  public CheckerMain(final File checkerJar,final List<String> args){  this.checkerJar=checkerJar;  final File searchPath=checkerJar.getParentFile();  this.checkerQualJar=new File(searchPath,"checker-qual.jar");  replaceShorthandProcessor(args);  argListFiles=collectArgFiles(args);  this.javacJar=extractFileArg(PluginUtil.JAVAC_PATH_OPT,new File(searchPath,"javac.jar"),args);  final String jdkJarName=PluginUtil.getJdkJarName();  this.jdkJar=extractFileArg(PluginUtil.JDK_PATH_OPT,new File(searchPath,jdkJarName),args);  this.compilationBootclasspath=createCompilationBootclasspath(args);  this.runtimeBootClasspath=createRuntimeBootclasspath(args);  this.jvmOpts=extractJvmOpts(args);  this.cpOpts=createCpOpts(args);  this.ppOpts=createPpOpts(args);  this.toolOpts=args;  assertValidState();}  }
class C{  public ObjectVector(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new Object[blocksize];}  }
class C{  public final void testIsSatisfiedSucceeds(){  RegexConstraint regexConstraint=new RegexConstraint(REGEX);  assertTrue(regexConstraint.isSatisfied("0123456789"));}  }
class C{  public Matrix3 multiplyByTileTransform(Sector src,Sector dst){  if (src == null || dst == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Sector","multiplyByNormalizedGeographicTransform","missingSector"));  }  double srcDeltaLat=src.deltaLatitude();  double srcDeltaLon=src.deltaLongitude();  double dstDeltaLat=dst.deltaLatitude();  double dstDeltaLon=dst.deltaLongitude();  double xs=srcDeltaLon / dstDeltaLon;  double ys=srcDeltaLat / dstDeltaLat;  double xt=(src.minLongitude - dst.minLongitude) / dstDeltaLon;  double yt=(src.minLatitude - dst.minLatitude) / dstDeltaLat;  double[] m=this.m;  m[2]+=(m[0] * xt) + (m[1] * yt);  m[5]+=(m[3] * xt) + (m[4] * yt);  m[8]+=(m[6] * xt) + (m[6] * yt);  m[0]*=xs;  m[1]*=ys;  m[3]*=xs;  m[4]*=ys;  m[6]*=xs;  m[7]*=ys;  return this;}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public SQLRecoverableException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  @Override public boolean isValid(){  return signatureValid;}  }
class C{  public boolean tieneDocumentosAsociados(int tipoObjeto,String id){  if (tipoObjeto == TipoObjeto.ELEMENTO_CF)   return docDocumentoCFDBEntity.countNumDocumentos(id) > 0; else   return docDocumentoDescrDBEntity.countNumDocumentos(id) > 0;}  }
class C{  public EdgeLayout(double gapH,double gapV){  super(gapH,gapV);}  }
class C{  public ZipOutputStream(File file) throws IOException {  super(null);  try {    raf=new RandomAccessFile(file,"rw");    raf.setLength(0);  } catch (  IOException e) {    if (raf != null) {      try {        raf.close();      } catch (      IOException inner) {      }      raf=null;    }    out=new FileOutputStream(file);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  NodeList elementList;  String attrName;  String attrValue;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:employee");  element=(Element)elementList.item(0);  assertNotNull("empEmployeeNotNull",element);  element.setAttributeNS("http://www.w3.org/DOM/Test/1","defaultAttr","default1");  element.setAttributeNS("http://www.w3.org/DOM/Test/2","defaultAttr","default2");  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Test/1","defaultAttr");  attrName=attribute.getNodeName();  attrValue=attribute.getNodeValue();  assertEquals("elementsetattributens03_attrName","defaultAttr",attrName);  assertEquals("elementsetattributens03_attrValue","default1",attrValue);}  }
class C{  public RandomMultiGraphNeighborsRequest(Long2DoubleMap leftSeedNodesWithWeight,int maxNumSamples,int maxResults){  this.leftSeedNodesWithWeight=leftSeedNodesWithWeight;  this.maxNumSamples=maxNumSamples;  this.maxNumResults=maxResults;}  }
class C{  public static Phrasal loadDecoder(String phrasalIniFile) throws IOException {  return loadDecoder(IOTools.readConfigFile(phrasalIniFile),null);}  }
class C{  protected double currentScoreFunction(){  double score=0.;  for (int i=0; i < this.values[this.currentVar1].length; i++) {    for (int j=0; j < this.values[this.currentVar2].length; j++) {      score-=this.currentCounts[this.currentVar1][this.currentVar2][i][j] * Math.log(this.currentPi[i][j]);    }  }  return score;}  }
class C{  public static void configureNetworkAdapter(VMwareClient vmw,VirtualMachineConfigSpec vmConfigSpec,VMPropertyHandler paramHandler,ManagedObjectReference vmwInstance) throws Exception {  logger.debug("");  VirtualMachineConfigInfo configInfo=(VirtualMachineConfigInfo)vmw.getServiceUtil().getDynamicProperty(vmwInstance,"config");  List<VirtualEthernetCard> vmNics=getNetworkAdapter(configInfo);  int numberOfNICs=Integer.parseInt(paramHandler.getServiceSetting(VMPropertyHandler.TS_NUMBER_OF_NICS));  if (numberOfNICs != vmNics.size()) {    throw new Exception("the number of NICs in virtual machine does not match the service parameter. VM: " + configInfo.getName() + " NICs: "+ vmNics.size()+ " "+ VMPropertyHandler.TS_NUMBER_OF_NICS+ ": "+ numberOfNICs);  }  for (int i=1; i <= numberOfNICs; i++) {    String newNetworkName=paramHandler.getNetworkAdapter(i);    VirtualEthernetCard vmNic=vmNics.get(i - 1);    String vmNetworkName=getNetworkName(vmw,vmwInstance,i);    if (newNetworkName != null && newNetworkName.length() > 0 && !newNetworkName.equals(vmNetworkName)) {      ManagedObjectReference newNetworkRef=getNetworkFromHost(vmw,vmwInstance,newNetworkName);      replaceNetworkAdapter(vmConfigSpec,vmNic,newNetworkRef,newNetworkName);    } else {      connectNIC(vmConfigSpec,vmNic,vmNetworkName);    }  }}  }
class C{  private CryptographicExchange createExchange(boolean asInitiator,InputStream inputStream,OutputStream outputStream,FriendStore friendStore,MessageStore messageStore){  CryptographicExchange exchange=new CryptographicExchange(inputStream,outputStream,asInitiator,friendStore,messageStore,callback);  return exchange;}  }
class C{  @Override public void init(Bundle savedInstanceState){  disableHeader();  enableFullscreen();  setPrimaryColors(getResources().getColor(R.color.normal_sliding_activity_primary),getResources().getColor(R.color.normal_sliding_activity_primary_dark));  setContent(R.layout.activity_content);  Intent intent=getIntent();  if (intent.getBooleanExtra(SampleActivity.ARG_USE_EXPANSION,false)) {    expandFromPoints(intent.getIntExtra(SampleActivity.ARG_EXPANSION_LEFT_OFFSET,0),intent.getIntExtra(SampleActivity.ARG_EXPANSION_TOP_OFFSET,0),intent.getIntExtra(SampleActivity.ARG_EXPANSION_VIEW_WIDTH,0),intent.getIntExtra(SampleActivity.ARG_EXPANSION_VIEW_HEIGHT,0));  }}  }
class C{  public OFNetmaskSetVendorData(){  super(BSN_SET_IP_MASK_ENTRY);}  }
class C{  @JsonProperty("sort") void sort(SortBuilder sortBuilder){  builder.sort(sortBuilder.fields);}  }
class C{  public UniAddress(Object addr){  if (addr == null) {    throw new IllegalArgumentException();  }  this.addr=addr;}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  if (qName.equals("node")) {    activeState="node";  } else   if (qName.equals("way")) {    activeState="way";  } else   if (activeState.equals("way") && qName.equals("tag")) {    String k=attributes.getValue("k");    String v=attributes.getValue("v");  } else   if (activeState.equals("node") && qName.equals("tag") && attributes.getValue("k").equals("name")) {  }}  }
class C{  public static boolean isSameDay(Date date1,Date date2){  if (date1 == null || date2 == null) {    throw new IllegalArgumentException("The dates must not be null");  }  Calendar cal1=Calendar.getInstance();  cal1.setTime(date1);  Calendar cal2=Calendar.getInstance();  cal2.setTime(date2);  return isSameDay(cal1,cal2);}  }
class C{  public void addActionListener(ActionListener listener){}  }
class C{  public E point(double longitude,double latitude){  return this.point(coordinate(longitude,latitude));}  }
class C{  public static void play(double[] input){  for (int i=0; i < input.length; i++) {    play(input[i]);  }}  }
class C{  public void testMoveRenameFileSourceMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  create(igfs,paths(DIR_NEW,SUBDIR_NEW),paths(FILE));  igfs.rename(FILE,FILE_NEW);  checkExist(igfs,DIR,SUBDIR);  checkExist(igfs,igfsSecondary,FILE_NEW);  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,boolean strictQuotes){  this(reader,separator,quotechar,CSVParser.DEFAULT_ESCAPE_CHARACTER,DEFAULT_SKIP_LINES,strictQuotes);}  }
class C{  public static TagParams create(@NotNull String image,@NotNull String repository){  return new TagParams().withImage(image).withRepository(repository);}  }
class C{  boolean containsKey(long key,int hash){  Entry<V> e=find(key,hash);  return e != null && e.value != null;}  }
class C{  public void generateDiff(){  Map<String,Pair<String,String>> elementChangedMap=new HashMap<String,Pair<String,String>>();  for (  Map.Entry<String,String> entry : newServiceCatalog.getElementMap().entrySet()) {    Pair<String,String> diff=compareXml(oldServiceCatalog.getElementMap().get(entry.getKey()),entry.getValue());    if (diff != null) {      elementChangedMap.put(entry.getKey(),diff);    }  }  Iterator<Map.Entry<ApiIdentifier,ApiDescriptor>> newApiMapIterator=newServiceCatalog.getApiMap().entrySet().iterator();  while (newApiMapIterator.hasNext()) {    Map.Entry<ApiIdentifier,ApiDescriptor> entry=newApiMapIterator.next();    ApiDescriptor oldApiResource=oldServiceCatalog.getApiMap().get(entry.getKey());    if (oldApiResource == null) {      continue;    }    Pair<String,String> paramDiff=compareParameter(oldApiResource.getParameters(),entry.getValue().getParameters());    Pair<String,String> requestDiff=elementChangedMap.get(entry.getValue().getRequestElement());    Pair<String,String> responseDiff=elementChangedMap.get(entry.getValue().getResponseElement());    if (paramDiff != null || requestDiff != null || responseDiff != null) {      apiChangedMap.put(entry.getKey(),new ApiDescriptorDiff(paramDiff,requestDiff,responseDiff));    }    newApiMapIterator.remove();    oldServiceCatalog.getApiMap().remove(entry.getKey());  }  oldServiceCatalog.update();  newServiceCatalog.update();}  }
class C{  @Override public void onHideGame(int internalGameId,boolean propagate,String title){  activity.finish();  if (propagate)   GiveawayListFragmentStack.onHideGame(internalGameId);}  }
class C{  private void vaciarInteresado(AsientoRegistralFormDTO asientoForm){  InteresadoFormDTO interesado=asientoForm.getInteresados().get(0);  interesado.setTipoDocumentoIdentificacionInteresado(null);  interesado.setDocumentoIdentificacionInteresado(null);  interesado.setRazonSocialInteresado(null);  interesado.setNombreInteresado(null);  interesado.setPrimerApellidoInteresado(null);  interesado.setSegundoApellidoInteresado(null);  interesado.setCodigoPaisInteresado(null);  interesado.setCodigoProvinciaInteresado(null);  interesado.setCodigoMunicipioInteresado(null);  interesado.setDireccionInteresado(null);  interesado.setCodigoPostalInteresado(null);  interesado.setCorreoElectronicoInteresado(null);  interesado.setTelefonoInteresado(null);  interesado.setDireccionElectronicaHabilitadaInteresado(null);  interesado.setCanalPreferenteComunicacionInteresado(null);}  }
class C{  public static ReilInstruction createSub(final Address address,final ReilOperand firstOperand,final ReilOperand secondOperand,final ReilOperand thirdOperand){  return new ReilInstruction(address,ReilMnemonics.SUB,firstOperand,secondOperand,thirdOperand);}  }
class C{  @Override public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  String path=origin.getPath();  if (path == null) {    throw new IllegalArgumentException("Path of origin host may not be null.");  }  if (cookie.getPath() == null) {    throw new MalformedCookieException("Invalid cookie state: " + "path attribute is null.");  }  if (path.trim().equals("")) {    path=PATH_DELIM;  }  if (!pathMatch(path,cookie.getPath())) {    throw new MalformedCookieException("Illegal path attribute \"" + cookie.getPath() + "\". Path of origin: \""+ path+ "\"");  }}  }
class C{  public String listQuestsStates(final Player player){  final StringBuilder sb=new StringBuilder();  sb.append("\r\n#'Open Quests': ");  for (  final IQuest quest : quests) {    if (quest.isStarted(player) && !quest.isCompleted(player)) {      sb.append("\r\n" + quest.getName() + " ("+ quest.getSlotName()+ "): "+ player.getQuest(quest.getSlotName()));    }  }  sb.append("\n#'Completed Quests': ");  for (  final IQuest quest : quests) {    if (quest.isCompleted(player)) {      sb.append("\r\n" + quest.getName() + " ("+ quest.getSlotName()+ "): "+ player.getQuest(quest.getSlotName()));    }  }  return sb.toString();}  }
class C{  public void warning(SAXParseException exception) throws SAXException {  PrintWriter pw=getErrorWriter();  printLocation(pw,exception);  pw.println("Parser warning: " + exception.getMessage());}  }
class C{  public void clear(){  cache.evictAll();}  }
class C{  public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){  if (sourceList == null || isEmpty(entryList)) {    return 0;  }  int sourceCount=sourceList.size();  for (  V entry : entryList) {    if (!sourceList.contains(entry)) {      sourceList.add(entry);    }  }  return sourceList.size() - sourceCount;}  }
class C{  public int read(byte[] buf,int off,int len) throws IOException {  if (off < 0 || len < 0 || off + len < 0 || off + len > buf.length)   throw new IndexOutOfBoundsException();  if (len == 0)   return 0;  if (in == null)   throw new XZIOException("Stream closed");  if (exception != null)   throw exception;  if (endReached)   return -1;  int size=0;  try {    while (len > 0) {      if (blockDecoder == null) {        try {          blockDecoder=new BlockInputStream(in,check,memoryLimit,-1,-1);        } catch (        IndexIndicatorException e) {          indexHash.validate(in);          validateStreamFooter();          endReached=true;          return size > 0 ? size : -1;        }      }      int ret=blockDecoder.read(buf,off,len);      if (ret > 0) {        size+=ret;        off+=ret;        len-=ret;      } else       if (ret == -1) {        indexHash.add(blockDecoder.getUnpaddedSize(),blockDecoder.getUncompressedSize());        blockDecoder=null;      }    }  } catch (  IOException e) {    exception=e;    if (size == 0)     throw e;  }  return size;}  }
class C{  protected Package definePackage(String packageName,Manifest manifest,URL url) throws IllegalArgumentException {  Attributes mainAttributes=manifest.getMainAttributes();  String dirName=packageName.replace('.','/') + "/";  Attributes packageAttributes=manifest.getAttributes(dirName);  boolean noEntry=false;  if (packageAttributes == null) {    noEntry=true;    packageAttributes=mainAttributes;  }  String specificationTitle=packageAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);  if (specificationTitle == null && !noEntry) {    specificationTitle=mainAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);  }  String specificationVersion=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);  if (specificationVersion == null && !noEntry) {    specificationVersion=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);  }  String specificationVendor=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);  if (specificationVendor == null && !noEntry) {    specificationVendor=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);  }  String implementationTitle=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);  if (implementationTitle == null && !noEntry) {    implementationTitle=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);  }  String implementationVersion=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);  if (implementationVersion == null && !noEntry) {    implementationVersion=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);  }  String implementationVendor=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);  if (implementationVendor == null && !noEntry) {    implementationVendor=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);  }  return definePackage(packageName,specificationTitle,specificationVersion,specificationVendor,implementationTitle,implementationVersion,implementationVendor,isSealed(manifest,dirName) ? url : null);}  }
class C{  public DirectoryScannerConfig putScan(DirectoryScannerConfig scan){  return this.directoryScanners.put(scan.getName(),scan);}  }
class C{  public static <K,V>ObjectObjectHashMap<K,V> newMap(){  return newMap(16);}  }
class C{  public void propertyChange(PropertyChangeEvent event){  if (event.getProperty().contains(COLOR_PREF_KEY_PREFIX) && event.getProperty().endsWith("A")) {    int colorNum=getNumFromMainColorPref(event.getProperty());    IPreferenceStore store=getPreferenceStore();    String partnerPrefName=getPartnerColorPrefName(colorNum);    String newValue=getPreferenceStore().getString(event.getProperty());    if (store.getDefaultString(partnerPrefName).equals(newValue)) {      store.setToDefault(partnerPrefName);    } else {      getPreferenceStore().setValue(partnerPrefName,newValue);    }  }  super.propertyChange(event);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.881 -0400",hash_original_method="ED7F8CC35E60516DF5221BEEDE06BA88",hash_generated_method="DAAF26093CE09E2EDB6820D67577A1F8") public static IOFileFilter sizeFileFilter(long threshold){  return new SizeFileFilter(threshold);}  }
class C{  OpenSSLSessionImpl(byte[] derData,String peerHost,int peerPort,X509Certificate[] peerCertificates,AbstractSessionContext sessionContext) throws IOException {  this(NativeCrypto.d2i_SSL_SESSION(derData),null,peerCertificates,peerHost,peerPort,sessionContext);  if (this.sslSessionNativePointer == 0) {    throw new IOException("Invalid session data");  }}  }
class C{  protected boolean appendFoundJars(Node container,Document factory,Vector v,String desc){  if ((null == v) || (v.size() < 1))   return false;  boolean errors=false;  for (int i=0; i < v.size(); i++) {    Hashtable subhash=(Hashtable)v.elementAt(i);    for (Enumeration keys=subhash.keys(); keys.hasMoreElements(); ) {      Object key=keys.nextElement();      try {        String keyStr=(String)key;        if (keyStr.startsWith(ERROR)) {          errors=true;        }        Element node=factory.createElement("foundJar");        node.setAttribute("name",keyStr.substring(0,keyStr.indexOf("-")));        node.setAttribute("desc",keyStr.substring(keyStr.indexOf("-") + 1));        node.appendChild(factory.createTextNode((String)subhash.get(keyStr)));        container.appendChild(node);      } catch (      Exception e) {        errors=true;        Element node=factory.createElement("foundJar");        node.appendChild(factory.createTextNode(ERROR + " Reading " + key+ " threw: "+ e.toString()));        container.appendChild(node);      }    }  }  return errors;}  }
class C{  public static BartenderSystem createAndAddSystem(BartenderBuilder builder){  BartenderSystemBare systemBartender=new BartenderSystemBare(builder);  SystemManager system=preCreate(BartenderSystem.class);  system.addSystem(BartenderSystem.class,systemBartender);  return systemBartender;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  java.io.File f=getFile(stack);  return IOUtils.writeStringToFile(f,s);}  }
class C{  public static int indexOf(long[] array,long value,int startIndex,int endIndex){  for (int i=startIndex; i < endIndex; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  public GDSException(int type,int intParam){  this.type=type;  this.intParam=intParam;  this.strParam=null;}  }
class C{  public boolean isColumnVisible(Object columnId){  return !_hiddenColumns.containsKey(columnId);}  }
class C{  public boolean isEmpty(){  return window.isEmpty();}  }
class C{  public int hollowOutRegion(final Region region,final int thickness,final Pattern pattern) throws MaxChangedBlocksException {  final Set<BlockVector> outside=new HashSet<BlockVector>();  final Vector min=region.getMinimumPoint();  final Vector max=region.getMaximumPoint();  final int minX=min.getBlockX();  final int minY=min.getBlockY();  final int minZ=min.getBlockZ();  final int maxX=max.getBlockX();  final int maxY=max.getBlockY();  final int maxZ=max.getBlockZ();  for (int x=minX; x <= maxX; ++x) {    for (int y=minY; y <= maxY; ++y) {      this.recurseHollow(region,new BlockVector(x,y,minZ),outside);      this.recurseHollow(region,new BlockVector(x,y,maxZ),outside);    }  }  for (int y=minY; y <= maxY; ++y) {    for (int z=minZ; z <= maxZ; ++z) {      this.recurseHollow(region,new BlockVector(minX,y,z),outside);      this.recurseHollow(region,new BlockVector(maxX,y,z),outside);    }  }  for (int z=minZ; z <= maxZ; ++z) {    for (int x=minX; x <= maxX; ++x) {      this.recurseHollow(region,new BlockVector(x,minY,z),outside);      this.recurseHollow(region,new BlockVector(x,maxY,z),outside);    }  }  for (int i=1; i < thickness; ++i) {    final Set<BlockVector> newOutside=new HashSet<BlockVector>();    outer:     for (    final BlockVector position : region) {      for (      final Vector recurseDirection : this.recurseDirections) {        final BlockVector neighbor=position.add(recurseDirection).toBlockVector();        if (outside.contains(neighbor)) {          newOutside.add(position);          continue outer;        }      }    }    outside.addAll(newOutside);  }  outer:   for (  final BlockVector position : region) {    for (    final Vector recurseDirection : this.recurseDirections) {      final BlockVector neighbor=position.add(recurseDirection).toBlockVector();      if (outside.contains(neighbor)) {        continue outer;      }    }    this.setBlockFast(position,pattern.next(position));  }  return changes;}  }
class C{  public static String[] fromList(String urlList) throws NamingException {  String[] urls=new String[(urlList.length() + 1) / 2];  int i=0;  StringTokenizer st=new StringTokenizer(urlList," ");  while (st.hasMoreTokens()) {    urls[i++]=st.nextToken();  }  String[] trimmed=new String[i];  System.arraycopy(urls,0,trimmed,0,i);  return trimmed;}  }
class C{  public GenerateSwitchyard(URI modelURI,File targetFolder,List<? extends Object> arguments) throws IOException {  initialize(modelURI,targetFolder,arguments);}  }
class C{  public boolean isUniversal(){  return ((tag & 0x0c0) == 0x000);}  }
class C{  public static String createCnonce(){  String cnonce;  MessageDigest md5Helper=createMessageDigest("MD5");  cnonce=Long.toString(System.currentTimeMillis());  cnonce=encode(md5Helper.digest(EncodingUtils.getAsciiBytes(cnonce)));  return cnonce;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Future<Long> markEndOfStream(){synchronized (this) {    try {      writeEndOfStreamMarker();    } catch (    IOException e) {      return Future.exception(e);    }    streamEnded=true;  }  return flushAndCommit();}  }
class C{  @BeforeClass public static void buildWorld() throws Exception {  new DatabaseFactory().initializeDatabase();  setupZone(ZONE_NAME);}  }
class C{  private ArrayList<BloomFilter<E>> sort(List<BloomFilter<E>> bf){  return sortIterative(bf);}  }
class C{  public ExceptionHit exceptionFatal(Boolean value){  setBoolean(EXCEPTION_FATAL,value);  return this;}  }
class C{  public void testMethodAnnotationInList() throws Exception {  ObjectMapper mapper=new ObjectMapper();  SimpleModule module=new SimpleModule("test",Version.unknownVersion());  module.addSerializer(String.class,new AnnotatedContextualSerializer());  mapper.registerModule(module);  ContextualListBean beans=new ContextualListBean("abc");  assertEquals("{\"beans\":[\"list->abc\"]}",mapper.writeValueAsString(beans));}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case KEY:return isSetKey();}throw new IllegalStateException();}  }
class C{  public NotFoundException(final String message){  super(message);}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  public final void reset(){  m_lastChunk=0;  m_firstFree=0;  FastStringBuffer innermost=this;  while (innermost.m_innerFSB != null) {    innermost=innermost.m_innerFSB;  }  m_chunkBits=innermost.m_chunkBits;  m_chunkSize=innermost.m_chunkSize;  m_chunkMask=innermost.m_chunkMask;  m_innerFSB=null;  m_array=new char[16][0];  m_array[0]=new char[m_chunkSize];}  }
class C{  @Override public RockerOutput render() throws RenderingException {  return doRender(null,null,null);}  }
class C{  public void extractAchievementsFromConfig(){  Set<String> configKeys=plugin.getConfig().getConfigurationSection("PlayedTime").getKeys(false);  achievementsCache=HashMultimap.create(configKeys.size(),1);  for (  String time : configKeys)   achievementsCache.put(Integer.valueOf(time),null);}  }
class C{  public DataPoint(double[] data){  this.data=data;}  }
class C{  public Key maxKey(){  if (n == 0)   throw new NoSuchElementException("Priority queue underflow");  return keys[pq[1]];}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.DATABASE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.442 -0500",hash_original_method="85D356AA3C69D35869973C25B38955EB",hash_generated_method="51159D6A6BCA645A9FECFE7044BCE2E6") public void bind(int index,float value){  mPreparedStatement.bindDouble(index,value);}  }
class C{  public ForumPostConfig createReply(ForumPostConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/create-reply",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    ForumPostConfig reply=new ForumPostConfig();    reply.parseXML(root);    return reply;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public void selectObject(MultiTouchObject multiTouchObject,PointInfo touchPoint){  currTouchPoint.set(touchPoint);  if (multiTouchObject != null) {    mImages.remove(multiTouchObject);    mImages.add(multiTouchObject);    if (listener != null) {      listener.onImageObjectSelected(multiTouchObject);    }  } else {    if (listener != null) {      listener.onImageObjectDropped();    }  }  invalidate();}  }
class C{  public void jobId(IgniteUuid jobId){  assert jobId != null;  this.jobId=jobId;}  }
class C{  public boolean contains(Key key){  if (key == null)   throw new NullPointerException("argument to contains() is null");  return get(key) != null;}  }
class C{  static public IBulkCursor asInterface(IBinder obj){  if (obj == null) {    return null;  }  IBulkCursor in=(IBulkCursor)obj.queryLocalInterface(descriptor);  if (in != null) {    return in;  }  return new BulkCursorProxy(obj);}  }
class C{  public BERSequence(ASN1Encodable[] array){  super(array);}  }
class C{  public void nameUser(final String name){  if (ENABLED) {    mMixpanelAPI.getPeople().set("$first_name",name);    mMixpanelAPI.getPeople().set("Name",name);  }}  }
class C{  public Response go() throws IOException {  StringBuilder sb=new StringBuilder();  sb.append(_method);  sb.append(" ").append(_url);  sb.append(" HTTP/1.1\r\n");  sb.append("Host: " + _host + "\r\n");  if (_type != null) {    sb.append("Content-Type: " + _type + "\r\n");  }  for (  Map.Entry<String,String> entry : _headers.entrySet()) {    sb.append(entry.getKey() + ": " + entry.getValue()+ "\r\n");  }  if (_body != null) {    sb.append("Content-Length: " + _body.length + "\r\n");  }  if (_cookies.size() > 0) {    sb.append("Cookie:");    for (    Map.Entry<String,String> entry : _cookies.entrySet()) {      sb.append(" " + entry.getKey() + "="+ entry.getValue());    }    sb.append("\r\n");  }  sb.append("\r\n");  return _tcp.request(sb.toString(),_body);}  }
class C{  private static void writeQueryIndex(BinaryRawWriter writer,QueryIndex index){  assert index != null;  writer.writeString(index.getName());  writeEnumByte(writer,index.getIndexType());  LinkedHashMap<String,Boolean> fields=index.getFields();  if (fields != null) {    writer.writeInt(fields.size());    for (    Map.Entry<String,Boolean> field : fields.entrySet()) {      writer.writeString(field.getKey());      writer.writeBoolean(!field.getValue());    }  } else   writer.writeInt(0);}  }
class C{  public void monitor(final JedisMonitor jedisMonitor){  client.monitor();  client.getStatusCodeReply();  jedisMonitor.proceed(client);}  }
class C{  public static void assertBillingEvents(ImmutableSet<BillingEvent> expected) throws Exception {  assertThat(FluentIterable.from(getBillingEvents()).transform(BILLING_EVENT_ID_STRIPPER)).containsExactlyElementsIn(FluentIterable.from(expected.asList()).transform(BILLING_EVENT_ID_STRIPPER));}  }
class C{  public static BufferedImage createTranslucentCompatibleImage(int width,int height){  return CONFIGURATION.createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  @Field(37) public __VARIANT_NAME_3_union uintVal(int uintVal){  this.io.setIntField(this,37,uintVal);  return this;}  }
class C{  private boolean scrollAndFocus(int direction,int left,int right){  boolean handled=true;  int width=getWidth();  int containerLeft=getScrollX();  int containerRight=containerLeft + width;  boolean goLeft=direction == View.FOCUS_LEFT;  View newFocused=findFocusableViewInBounds(goLeft,left,right);  if (newFocused == null) {    newFocused=this;  }  if (left >= containerLeft && right <= containerRight) {    handled=false;  } else {    int delta=goLeft ? (left - containerLeft) : (right - containerRight);    doScrollX(delta);  }  if (newFocused != findFocus())   newFocused.requestFocus(direction);  return handled;}  }
class C{  protected void init(int rows,int cols){  rowData.clear();  for (int i=0; i < rows; i++) {    rowData.add(createNewRow(new Double(0),cols));  }  fireTableStructureChanged();}  }
class C{  public CeylonRepoManagerBuilder cwd(String cwd){  if (cwd != null) {    this.cwd=new File(cwd);  } else {    this.cwd=null;  }  return this;}  }
class C{  public Double putMarginalUtilityOfDistance(Id personId,double val){  return this.effectiveMarginalUtilityOfDistance.put(personId,val);}  }
class C{  JsonNode toJson(){  if (jsonNode == null) {    jsonNode=generateJson();  }  return jsonNode;}  }
class C{  public String singular(final String word){  final WordEntry entry=words.get(trimWord(word));  if (entry != null) {    if (entry.isPlural()) {      return entry.getPlurSing();    } else {      return entry.getNormalized();    }  } else {    return Grammar.singular(word);  }}  }
class C{  @Override public WbXmlContent parse(WbXmlParser parser,byte[] data) throws IOException {  String value=new String(data,parser.getDocument().getCharset().getCharset());  WbXmlContent content=new WbXmlContent(value);  return content;}  }
class C{  public static MqttMessage copyMqttMessage(final MqttMessage message){  final MqttMessage copy=new MqttMessage();  copy.setPayload(message.getPayload());  copy.setQos(message.getQos());  copy.setRetained(message.isRetained());  return copy;}  }
class C{  public static Address max(){  return new Address(ArchitecturalWord.fromLong(0xFFFFFFFF));}  }
class C{  public void println(boolean x){  out.println(x);}  }
class C{  @Override public boolean isEmpty(){  return elementCount == 0;}  }
class C{  public DGenerateCsr(JFrame parent,String alias,PrivateKey privateKey,KeyPairType keyPairType,String path,Provider provider) throws CryptoException {  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.alias=alias;  this.privateKey=privateKey;  this.keyPairType=keyPairType;  this.path=path;  this.provider=provider;  setTitle(res.getString("DGenerateCsr.Title"));  initComponents();}  }
class C{  void forceIncrementItemsSeen(final long inc){  itemsSeen_+=inc;  if (itemsSeen_ > MAX_ITEMS_SEEN) {    throw new SketchesStateException("Sketch has exceeded capacity for total items seen. " + "Limit: " + MAX_ITEMS_SEEN + ", found: "+ itemsSeen_);  }}  }
class C{  public KeyImpl(byte[] keyBytes,int keyType){  this.keyBytes=keyBytes.clone();  this.keyType=keyType;}  }
class C{  @Nullable public GridCacheMvccCandidate recheck(){  reassign();  return anyOwner();}  }
class C{  @Override public void start(){  paused=false;}  }
class C{  public void dispose(){  mInput1=null;  mInput2=null;  mInput3=null;  super.dispose();}  }
class C{  private void acquireWakeLock(){  if (wakelock == null) {    PowerManager pm=(PowerManager)service.getSystemService(Service.POWER_SERVICE);    wakelock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,wakeLockTag);  }  wakelock.acquire();}  }
class C{  float distanceInfluenceForSnapDuration(float f){  f-=0.5f;  f*=SNAP_FACTOR * Math.PI / 2.0f;  return (float)Math.sin(f);}  }
class C{  private void testVariance(String testName,Sparsity sparsity,DataType dataType,ExecType platform){  RUNTIME_PLATFORM platformOld=rtplatform;switch (platform) {case MR:    rtplatform=RUNTIME_PLATFORM.HADOOP;  break;case SPARK:rtplatform=RUNTIME_PLATFORM.SPARK;break;default :rtplatform=RUNTIME_PLATFORM.SINGLE_NODE;break;}boolean sparkConfigOld=DMLScript.USE_LOCAL_SPARK_CONFIG;if (rtplatform == RUNTIME_PLATFORM.SPARK) DMLScript.USE_LOCAL_SPARK_CONFIG=true;try {getAndLoadTestConfiguration(testName);String HOME=SCRIPT_DIR + TEST_DIR;fullDMLScriptName=HOME + testName + ".dml";programArgs=new String[]{"-explain","-stats","-args",input(INPUT_NAME),output(OUTPUT_NAME)};fullRScriptName=HOME + testName + ".R";rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir();double sparsityVal;switch (sparsity) {case EMPTY:sparsityVal=0;break;case SPARSE:sparsityVal=sparsitySparse;break;case DENSE:default :sparsityVal=sparsityDense;}int r;int c;switch (dataType) {case ROWVECTOR:r=1;c=cols;break;case COLUMNVECTOR:r=rows;c=1;break;case MATRIX:default :r=rows;c=cols;}double[][] X=getRandomMatrix(r,c,-1,1,sparsityVal,7);writeInputMatrixWithMTD(INPUT_NAME,X,true);runTest(true,false,null,-1);runRScript(true);HashMap<CellIndex,Double> dmlfile=readDMLMatrixFromHDFS(OUTPUT_NAME);HashMap<CellIndex,Double> rfile=readRMatrixFromFS(OUTPUT_NAME);TestUtils.compareMatrices(dmlfile,rfile,eps,"Stat-DML","Stat-R");}  finally {rtplatform=platformOld;DMLScript.USE_LOCAL_SPARK_CONFIG=sparkConfigOld;}}  }
class C{  private void createDefaultMapping(){  map.put(ControllerButton.PS,new LinkedList<AssignableControl>());  map.get(ControllerButton.PS).add(new AssignableControl(ControllerButton.PS,AssignableControl.Command.RESET,0));  map.put(ControllerButton.START,new LinkedList<AssignableControl>());  map.get(ControllerButton.START).add(new AssignableControl(ControllerButton.START,AssignableControl.Command.TAKEOFF,0));  map.put(ControllerButton.SELECT,new LinkedList<AssignableControl>());  map.get(ControllerButton.SELECT).add(new AssignableControl(ControllerButton.SELECT,AssignableControl.Command.LAND,0));  map.put(ControllerButton.TRIANGLE,new LinkedList<AssignableControl>());  map.get(ControllerButton.TRIANGLE).add(new AssignableControl(ControllerButton.TRIANGLE,AssignableControl.Command.VIDEO_CYCLE,0));  map.put(ControllerButton.SQUARE,new LinkedList<AssignableControl>());  map.get(ControllerButton.SQUARE).add(new AssignableControl(ControllerButton.SQUARE,AssignableControl.Command.TAKE_SNAPSHOT,0));  map.put(ControllerButton.CIRCLE,new LinkedList<AssignableControl>());  map.get(ControllerButton.CIRCLE).add(new AssignableControl(ControllerButton.CIRCLE,AssignableControl.Command.RECORD_VIDEO,0));}  }
class C{  public BoxPlotSeriesAttributes(ChartGenerator generator,String name,int index,double[][] values,String[] labels,SeriesChangeListener stoppable){  super(generator,name,index,stoppable);  setValues(values);  setLabels(labels);  super.setSeriesName(name);}  }
class C{  public static double incompleteBetaFraction2(double a,double b,double x){  double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;  double k1, k2, k3, k4, k5, k6, k7, k8;  double r, t, ans, z, thresh;  int n;  k1=a;  k2=b - 1.0;  k3=a;  k4=a + 1.0;  k5=1.0;  k6=a + b;  k7=a + 1.0;  ;  k8=a + 2.0;  pkm2=0.0;  qkm2=1.0;  pkm1=1.0;  qkm1=1.0;  z=x / (1.0 - x);  ans=1.0;  r=1.0;  n=0;  thresh=3.0 * MACHEP;  do {    xk=-(z * k1 * k2) / (k3 * k4);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    xk=(z * k5 * k6) / (k7 * k8);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    if (qk != 0) {      r=pk / qk;    }    if (r != 0) {      t=Math.abs((ans - r) / r);      ans=r;    } else {      t=1.0;    }    if (t < thresh) {      return ans;    }    k1+=1.0;    k2-=1.0;    k3+=2.0;    k4+=2.0;    k5+=1.0;    k6+=1.0;    k7+=2.0;    k8+=2.0;    if ((Math.abs(qk) + Math.abs(pk)) > big) {      pkm2*=biginv;      pkm1*=biginv;      qkm2*=biginv;      qkm1*=biginv;    }    if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {      pkm2*=big;      pkm1*=big;      qkm2*=big;      qkm1*=big;    }  } while (++n < 300);  return ans;}  }
class C{  private boolean reachablePathFindOrient(Graph graph,Node a,Node b,Node c,LinkedList<Node> reachable){  Set<Node> cParents=new HashSet<>(graph.getParents(c));  Set<Node> visited=new HashSet<>();  visited.add(b);  visited.add(c);  while (reachable.size() > 0) {    Node x=reachable.removeFirst();    visited.add(x);    List<Node> pathExtensions=graph.getNodesInTo(x,Endpoint.ARROW);    pathExtensions.removeAll(visited);    for (    Node l : pathExtensions) {      if (!graph.isAdjacentTo(l,c)) {        doDdpOrientation(graph,l,a,b,c);        return true;      } else       if (cParents.contains(l)) {        if (graph.getEndpoint(x,l) == Endpoint.ARROW) {          reachable.add(l);        }      }    }  }  return false;}  }
class C{  @Override public double mean(){  return Double.NaN;}  }
class C{  public void connectionFailed(){  deallocate(true,false,true);}  }
class C{  List<Type> attribTypes(List<JCExpression> trees,Env<AttrContext> env){  List<Type> types=attribAnyTypes(trees,env);  return chk.checkRefTypes(trees,types);}  }
class C{  public static float intRoot(int base,int root){  float gNew=base / root;  float gOld=0;  int counter=0;  while (Math.abs(gOld - gNew) > 0.0001) {    float gPow=floatPow(gNew,root);    while (Float.isInfinite(gPow)) {      gNew=(gNew + gOld) / 2;      gPow=floatPow(gNew,root);    }    counter+=1;    gOld=gNew;    gNew=gOld - (gPow - base) / (root * floatPow(gOld,root - 1));  }  return gNew;}  }
class C{  private static void vecswap(int x[],int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  @Override public String graph() throws Exception {  return toXMLBIF03();}  }
class C{  public int next(){  if (_currentNode != DTM.NULL) {    for (int node=(NOTPROCESSED == _currentNode) ? _firstch(makeNodeIdentity(_startNode)) : _nextsib(_currentNode); node != END; node=_nextsib(node)) {      if (m_expandedNameTable.getNamespaceID(_exptype(node)) == _nsType) {        _currentNode=node;        return returnNode(node);      }    }  }  return END;}  }
class C{  private boolean disableDoubleBuffering(Component c){  if (!(c instanceof JComponent))   return false;  JComponent jc=(JComponent)c;  boolean wasBuffered=jc.isDoubleBuffered();  jc.setDoubleBuffered(false);  return wasBuffered;}  }
class C{  private Expression create(String path) throws Exception {  Type detail=new ClassType(type);  Expression expression=new PathParser(path,detail,format);  if (cache != null) {    cache.cache(path,expression);  }  return expression;}  }
class C{  private boolean checkClassNameUnique(PojoDescriptor pojo,String newVal,boolean key){  for (  PojoDescriptor otherPojo : pojos)   if (pojo != otherPojo) {    String otherKeyCls=otherPojo.keyClassName();    String otherValCls=otherPojo.valueClassName();    if (newVal.equals(otherKeyCls) || newVal.equals(otherValCls)) {      MessageBox.warningDialog(owner,(key ? "Key" : "Value") + " class name must be unique!");      return false;    }  }  return true;}  }
class C{  public boolean removeRootBlock(Block block,boolean cleanupStats){  boolean foundAndRemoved=mRootBlocks.remove(block);  if (foundAndRemoved && cleanupStats) {    mStats.cleanupStats(block);  }  return foundAndRemoved;}  }
class C{  @Override public boolean canHandle(URI uri){  return isDockerfileFile(uri);}  }
class C{  public Path copyResourceToSandbox(URL url,Path resourcePath) throws URISyntaxException {  File sandbox=new File(getStorageSandbox());  Path outputPath=sandbox.toPath().resolve(DEFAULT_RESOURCE_SANDBOX_DIR).resolve(resourcePath);  if (url.getProtocol().equals("file")) {    log(Level.FINE,"Using resource %s",url.getPath());    URI uri=url.toURI();    return Paths.get(uri);  }  try {    log(Level.FINE,"Copying resource %s to %s",url,outputPath);    Path parent=outputPath.getParent();    if (parent == null) {      throw new IOException("No parent for output path: " + outputPath);    }    Files.createDirectories(parent);    InputStream is=url.openStream();    Files.copy(is,outputPath,StandardCopyOption.REPLACE_EXISTING);  } catch (  IOException e) {    log(Level.WARNING,"Unable to copy resource %s to %s: %s",url,outputPath,e.toString());    return null;  }  return outputPath;}  }
class C{  public BigDecimal optBigDecimal(String key,BigDecimal defaultValue){  try {    return this.getBigDecimal(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static String amountInWords(final BigDecimal amount){  return NumberUtil.amountInWords(amount);}  }
class C{  public AbsoluteFileBackupHelper(Context context,String... files){  super(context);  mContext=context;  mFiles=files;}  }
class C{  public VerletPhysics2D(Vec2D gravity,int numIterations,float drag,float timeStep){  particles=new ArrayList<VerletParticle2D>();  springs=new ArrayList<VerletSpring2D>();  this.numIterations=numIterations;  this.timeStep=timeStep;  setDrag(drag);  if (gravity != null) {    addBehavior(new GravityBehavior2D(gravity));  }}  }
class C{  private void state4() throws IOException {  int[] archivedIds=readList(new File(filePrefix + "arc"));  updatePopulation(archivedIds);}  }
class C{  public static Animation outToRightAnimation(long duration,Interpolator interpolator){  Animation outtoRight=new TranslateAnimation(Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,+1.0f,Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,0.0f);  outtoRight.setDuration(duration);  outtoRight.setInterpolator(interpolator == null ? new AccelerateInterpolator() : interpolator);  return outtoRight;}  }
class C{  public static void computeStyleAndURIs(Element refElement,Element localRefElement,String uri){  int idx=uri.indexOf('#');  if (idx != -1)   uri=uri.substring(0,idx);  if (uri.length() != 0)   localRefElement.setAttributeNS(XML_NAMESPACE_URI,"base",uri);  CSSEngine engine=CSSUtilities.getCSSEngine(localRefElement);  CSSEngine refEngine=CSSUtilities.getCSSEngine(refElement);  engine.importCascadedStyleMaps(refElement,refEngine,localRefElement);}  }
class C{  public Observable<JSON> exerciseMovie(Observable<Movies> movies){  return movies.flatMap(null);}  }
class C{  public static String determineLineDelimiter(String text,String hint){  try {    int[] info=indexOf(DELIMITERS,text,0);    return DELIMITERS[info[1]];  } catch (  ArrayIndexOutOfBoundsException x) {  }  return hint;}  }
class C{  public ZDT3(){  this(30);}  }
class C{  @Override public boolean rowDeleted() throws SQLException {  try {    debugCodeCall("rowDeleted");    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static int lengthWithoutLinefeed(CharSequence line){  int length=line.length();  while (length > 0) {    char last=line.charAt(length - 1);    if (last != '\n' && last != '\r') {      break;    }    --length;  }  return length;}  }
class C{  private boolean lockOrder(Order order){  lock.lock();  try {    return activeOrders.add(order.getId());  }  finally {    lock.unlock();  }}  }
class C{  public void test1(){  final JPanel panel=new JPanel(new GridLayoutManager(2,2,new Insets(0,0,0,0),0,0));  final JLabel label1=new JLabel();  label1.setPreferredSize(new Dimension(15,20));  final JLabel label2=new JLabel();  label2.setPreferredSize(new Dimension(15,20));  final JTextArea textArea=new JTextArea();  textArea.setLineWrap(true);  panel.add(label1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(label2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(textArea,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0));  assertEquals(100,textArea.getPreferredSize().width);  final Dimension initialPreferredSize=panel.getPreferredSize();  assertEquals(new Dimension(100,20 + textArea.getPreferredSize().height),initialPreferredSize);  panel.setSize(initialPreferredSize);  panel.invalidate();  panel.doLayout();  assertEquals(initialPreferredSize,panel.getPreferredSize());}  }
class C{  public final List<String> executeStringListQuery(String sql) throws AdeException {  final List<String[]> temp=executeStringListQuery2d(sql);  final List<String> res=new ArrayList<String>(temp.size());  for (int i=0; i < temp.size(); ++i) {    final String[] row=temp.get(i);    if (row.length != 1) {      throw new AdeInternalException("Row " + (i + 1) + " of "+ sql+ " returned "+ row.length+ " strings instead of 1");    }    res.add(row[0]);  }  return res;}  }
class C{  private void cmdReload(CommandSender sender){  if (isPermissed(sender,"nametagedit.reload")) {    handler.reload();    NametagMessages.RELOADED_DATA.send(sender);  }}  }
class C{  public static short toShort(byte[] bytes,int index){  return (short)((bytes[index + 1] << 8) | (bytes[index] & 0xff));}  }
class C{  public final void printInfo(final String prefix){  System.out.println(prefix + "configuration of " + this.getClass().getName()+ ":");  System.out.println(prefix + "  MATSim network:");  System.out.println(prefix + "    ignoreFrcType8:              " + ignoreFrcType8);  System.out.println(prefix + "    ignoreFrcType7onewayN:       " + ignoreFrcType7onewayN);  System.out.println(prefix + "    maxFrcTypeForDoubleLaneLink: " + maxFrcTypeForDoubleLaneLink);  System.out.println(prefix + "    minSpeedForNormalCapacity:   " + minSpeedForNormalCapacity);  System.out.println(prefix + "  junction shape:");  System.out.println(prefix + "    jcShpFileName:      " + jcShpFileName);  System.out.println(prefix + "    NODE_ID_NAME:       " + NODE_ID_NAME);  System.out.println(prefix + "    NODE_FEATTYP_NAME:  " + NODE_FEATTYP_NAME);  System.out.println(prefix + "    NODE_JNCTTYP_NAME:  " + NODE_JNCTTYP_NAME);  System.out.println(prefix + "  network shape:");  System.out.println(prefix + "    nwShpFileName:      " + nwShpFileName);  System.out.println(prefix + "    LINK_ID_NAME:       " + LINK_ID_NAME);  System.out.println(prefix + "    LINK_FEATTYP_NAME:  " + LINK_FEATTYP_NAME);  System.out.println(prefix + "    LINK_FERRYTYP_NAME: " + LINK_FERRYTYP_NAME);  System.out.println(prefix + "    LINK_FJNCTID_NAME:  " + LINK_FJNCTID_NAME);  System.out.println(prefix + "    LINK_TJNCTID_NAME:  " + LINK_TJNCTID_NAME);  System.out.println(prefix + "    LINK_LENGTH_NAME:   " + LINK_LENGTH_NAME);  System.out.println(prefix + "    LINK_FRCTYP_NAME:   " + LINK_FRCTYP_NAME);  System.out.println(prefix + "    LINK_ONEWAY_NAME:   " + LINK_ONEWAY_NAME);  System.out.println(prefix + "    LINK_SPEED_NAME:    " + LINK_SPEED_NAME);  System.out.println(prefix + "    LINK_LANES_NAME:    " + LINK_LANES_NAME);  System.out.println(prefix + "done.");}  }
class C{  public boolean updateDownload(DownloadInfo di){  ContentValues cv=new ContentValues();  cv.put(DownloadColumns.INDEX,di.mIndex);  cv.put(DownloadColumns.FILENAME,di.mFileName);  cv.put(DownloadColumns.URI,di.mUri);  cv.put(DownloadColumns.ETAG,di.mETag);  cv.put(DownloadColumns.TOTALBYTES,di.mTotalBytes);  cv.put(DownloadColumns.CURRENTBYTES,di.mCurrentBytes);  cv.put(DownloadColumns.LASTMOD,di.mLastMod);  cv.put(DownloadColumns.STATUS,di.mStatus);  cv.put(DownloadColumns.CONTROL,di.mControl);  cv.put(DownloadColumns.NUM_FAILED,di.mNumFailed);  cv.put(DownloadColumns.RETRY_AFTER,di.mRetryAfter);  cv.put(DownloadColumns.REDIRECT_COUNT,di.mRedirectCount);  return updateDownload(di,cv);}  }
class C{  public Transaction fromWireDump(String dump) throws IOException {  WireFormat.Reader reader=new WireFormat.Reader(ByteUtils.fromHex(dump));  return fromWire(reader);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public MultiPageEditor(){  super();  ResourcesPlugin.getWorkspace().addResourceChangeListener(this);}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.296 -0400",hash_original_method="C8E3227EF2C47EB9F6C9D577624742C0",hash_generated_method="2E0E9BB3CA72F5B6E3CF252481EBC1CA") @Override public int read(byte[] bts) throws IOException {  int n=super.read(bts);  if (n != -1) {    branch.write(bts,0,n);  }  return n;}  }
class C{  @Override public boolean onPreferenceClick(Preference preference){  if (!isResumed()) {    return false;  }  if (preference == mSyncEncryption && mProfileSyncService.isSyncInitialized()) {    if (mProfileSyncService.isPassphraseRequiredForDecryption()) {      displayPassphraseDialog();    } else {      displayPassphraseTypeDialog();      return true;    }  } else   if (preference == mManageSyncData) {    openDashboardTabInNewActivityStack();    return true;  }  return false;}  }
class C{  void invalidateAll(){  if (groups != null) {    for (    InetAddress group : groups.keySet()) {      for (      MembershipKeyImpl key : groups.get(group)) {        key.invalidate();      }    }  }}  }
class C{  public int weight(){  ensureSingle();  return weight;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static String encode(final String unescaped,final BitSet allowed,final String charset) throws URIException {  final byte[] rawdata=URLCodec.encodeUrl(allowed,EncodingUtil.getBytes(unescaped,charset));  return EncodingUtil.getAsciiString(rawdata);}  }
class C{  public Long call() throws Exception {  final long begin=System.currentTimeMillis();  final long n;  if (changeLog == null) {    n=database.addStatements(statementStore,copyOnly,itr,null);  } else {    n=com.bigdata.rdf.changesets.StatementWriter.addStatements(database,statementStore,copyOnly,null,itr,changeLog);  }  nwritten.addAndGet(n);  return System.currentTimeMillis() - begin;}  }
class C{  public String numToSelectTipText(){  return "Specify the number of attributes to retain. The default value " + "(-1) indicates that all attributes are to be retained. Use either " + "this option or a threshold to reduce the attribute set.";}  }
class C{  boolean unmapAll(){  NaElement elem=new NaElement("lun-map-list-info");  elem.addNewChild("path",path);  NaElement result=null;  try {    result=server.invokeElem(elem).getChildByName("initiator-groups");  } catch (  Exception e) {    String msg="Failed unmapping all groups from LUN. Unable to retrieve list of maps for LUN path=" + path;    log.error(msg,e);    throw new NetAppException(msg,e);  }  boolean success=true;  for (  NaElement el : (List<NaElement>)result.getChildren()) {    String iGroup=el.getChildContent("initiator-group-name");    try {      unmapLun(iGroup);    } catch (    NetAppException e) {      success=false;    }  }  return success;}  }
class C{  public static void sendSubCmd(final PacketOutputStream writer,final ClientPrepareResult clientPrepareResult,ParameterHolder[] parameters) throws IOException {  writer.write(Packet.COM_QUERY);  if (clientPrepareResult.isRewriteType()) {    writer.write(clientPrepareResult.getQueryParts().get(0));    writer.write(clientPrepareResult.getQueryParts().get(1));    for (int i=0; i < clientPrepareResult.getParamCount(); i++) {      parameters[i].writeTo(writer);      writer.write(clientPrepareResult.getQueryParts().get(i + 2));    }    writer.write(clientPrepareResult.getQueryParts().get(clientPrepareResult.getParamCount() + 2));  } else {    writer.write(clientPrepareResult.getQueryParts().get(0));    for (int i=0; i < clientPrepareResult.getParamCount(); i++) {      parameters[i].writeTo(writer);      writer.write(clientPrepareResult.getQueryParts().get(i + 1));    }  }}  }
class C{  private static byte CallStaticByteMethod(JNIEnvironment env,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallStaticByteMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(methodID,TypeReference.Byte);    return Reflection.unwrapByte(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public synchronized boolean hasReached(String fileName,long offset){  if (curFile == null)   return false; else   if (curFile.getName().compareTo(fileName) < 0) {    return false;  } else   if (curFile.getName().compareTo(fileName) == 0) {    if (offset > curOffset)     return false; else     return true;  } else {    return true;  }}  }
class C{  static WebServerBuilder builder(){  return WebServerProvider.current().webBuilder();}  }
class C{  public static void startRun(){  pageNumber=0;  tocPageCount=0;}  }
class C{  private static void checkFunction(Method method){  final MethodType type;  try {    type=MethodHandles.publicLookup().unreflect(method).type();  } catch (  IllegalAccessException iae) {    throw new IllegalArgumentException(method + " is not accessible (declaring class or method not public).");  }  if (!Modifier.isStatic(method.getModifiers())) {    throw new IllegalArgumentException(method + " is not static.");  }  for (int arg=0, arity=type.parameterCount(); arg < arity; arg++) {    if (type.parameterType(arg) != double.class) {      throw new IllegalArgumentException(method + " must take only double parameters.");    }  }  if (type.returnType() != double.class) {    throw new IllegalArgumentException(method + " does not return a double.");  }}  }
class C{  public Transition firstTransition(final long firstMillis){  if (iInitialNameKey != null) {    return new Transition(firstMillis,iInitialNameKey,iStandardOffset + iInitialSaveMillis,iStandardOffset);  }  ArrayList<Rule> copy=new ArrayList<Rule>(iRules);  long millis=Long.MIN_VALUE;  int saveMillis=0;  Transition first=null;  Transition next;  while ((next=nextTransition(millis,saveMillis)) != null) {    millis=next.getMillis();    if (millis == firstMillis) {      first=new Transition(firstMillis,next);      break;    }    if (millis > firstMillis) {      if (first == null) {        for (        Rule rule : copy) {          if (rule.getSaveMillis() == 0) {            first=new Transition(firstMillis,rule,iStandardOffset);            break;          }        }      }      if (first == null) {        first=new Transition(firstMillis,next.getNameKey(),iStandardOffset,iStandardOffset);      }      break;    }    first=new Transition(firstMillis,next);    saveMillis=next.getSaveMillis();  }  iRules=copy;  return first;}  }
class C{  public static String[] wrapString(@Nonnull String str,int maxWidth,@Nullable String[] output){  if (output == null) {    output=new String[(int)((str.length() / maxWidth) * 1.5d + 1)];  }  int lineStart=0;  int arrayIndex=0;  int i;  for (i=0; i < str.length(); i++) {    char c=str.charAt(i);    if (c == '\n') {      output=addString(output,str.substring(lineStart,i),arrayIndex++);      lineStart=i + 1;    } else     if (i - lineStart == maxWidth) {      output=addString(output,str.substring(lineStart,i),arrayIndex++);      lineStart=i;    }  }  if (lineStart != i || i == 0) {    output=addString(output,str.substring(lineStart),arrayIndex++,output.length + 1);  }  if (arrayIndex < output.length) {    output[arrayIndex]=null;  }  return output;}  }
class C{  public boolean contains(Task b){  Collection<BoundedObject> queryResult=new ArrayList<BoundedObject>();  tasks.query(queryResult,b.getLon(),b.getLat());  Log.d(DEBUG_TAG,"candidates for contain " + queryResult.size());  for (  BoundedObject bo : queryResult) {    if (b instanceof Note && bo instanceof Note && b.getId() == ((Task)bo).getId()) {      return true;    } else     if (b instanceof OsmoseBug && bo instanceof OsmoseBug && b.getId() == ((Task)bo).getId()) {      return true;    }  }  return false;}  }
class C{  public void testBoundedDoubles(){  AtomicInteger fails=new AtomicInteger(0);  Random r=new Random();  long size=456;  for (double least=0.00011; least < 1.0e20; least*=9) {    for (double bound=least * 1.0011; bound < 1.0e20; bound*=17) {      final double lo=least, hi=bound;      r.doubles(size,lo,hi).forEach(null);    }  }  assertEquals(fails.get(),0);}  }
class C{  public static long timeFrom(final long time,final long duration,final CalendarUnit unit,final Occurrence occurrence){  final long durationInMillis=occurrence.getSign() * duration * unit.getMilliseconds();  final long newTime=time + durationInMillis;  return newTime;}  }
class C{  public boolean eventGeneratable(EventSetDescriptor esd){  String eventName=esd.getName();  return eventGeneratable(eventName);}  }
class C{  @SuppressWarnings("UnusedParameters") protected void validateHandler(Object handler,ServerWebExchange exchange) throws Exception {}  }
class C{  public void rebootNodeByNodeId(String nodeId){  UriBuilder builder=client.uriBuilder(CONTROL_REBOOT_NODE_URL);  addQueryParam(builder,NODE_ID_PARAM,nodeId);  client.postURI(String.class,builder.build());}  }
class C{  public Boolean isArpRedirectSettable(){  return arpRedirectSettable;}  }
class C{  public boolean isAvailable(){  if (!hasOption(Service.ServiceOption.INSTRUMENTATION)) {    return true;  }  if (this.stage != ProcessingStage.AVAILABLE && this.stage != ProcessingStage.PAUSED) {    return false;  }  ServiceStat st=this.getStat(STAT_NAME_AVAILABLE);  if (st != null && st.latestValue == STAT_VALUE_TRUE) {    return true;  }  return false;}  }
class C{  private String buildJavaScriptData(String event,String msg){  String b64EncodedMsg="Error!";  try {    if (msg != null) {      b64EncodedMsg=Base64.encodeBytes(msg.getBytes(UTF8_CHARSET));    }  } catch (  Exception e) {    e.printStackTrace();  }  String _d="javascript:WebSocket." + event + "("+ "{"+ "\"_target\":\""+ id+ "\","+ "\"_data\":'"+ b64EncodedMsg+ "'"+ "}"+ ")";  return _d;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private static ViewGroup findAncestorToTakeFocusInTouchMode(View focused){  ViewParent parent=focused.getParent();  while (parent instanceof ViewGroup) {    final ViewGroup vgParent=(ViewGroup)parent;    if (vgParent.getDescendantFocusability() == ViewGroup.FOCUS_AFTER_DESCENDANTS && vgParent.isFocusableInTouchMode()) {      return vgParent;    }    if (vgParent.isRootNamespace()) {      return null;    } else {      parent=vgParent.getParent();    }  }  return null;}  }
class C{  public synchronized Object remove(Object key){  CacheEntry tab[]=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  for (CacheEntry e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      if (prev != null) {        prev.next=e.next;      } else {        tab[index]=e.next;      }      count--;      return e.check();    }  }  return null;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void test_createSolutionSet_02() throws UpdateExecutionException, RepositoryException, MalformedQueryException {  if (!isSolutionSetUpdateEnabled()) {    return;  }  con.prepareUpdate(QueryLanguage.SPARQL,"create solutions %namedSet1").execute();  try {    con.prepareUpdate(QueryLanguage.SPARQL,"create solutions %namedSet1").execute();    fail("Excepting: " + UpdateExecutionException.class);  } catch (  UpdateExecutionException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }  con.prepareUpdate(QueryLanguage.SPARQL,"create silent solutions %namedSet1").execute();}  }
class C{  private void adjustChildrenPath(){  String childpath=path + name + "/";  for (  Resource child : children.values())   child.setPath(childpath);}  }
class C{  public static boolean isComplexType(Object object){  for (  Class<?> clazz : COMPLEX_DATA_TYPES) {    if (object.getClass().equals(clazz)) {      return true;    } else     if (clazz.isAssignableFrom(object.getClass())) {      return true;    }  }  return false;}  }
class C{  public static SimpleCheckoutStarter createWithCommandLineArgs(final List<String> args) throws RuntimeException {  if (args.size() < 1) {    throw new RuntimeException(TfPluginBundle.message(TfPluginBundle.STARTER_ERRORS_SIMPLECHECKOUT_INVALID_COMMAND_LINE_ARGS));  }  return createWithGitUrl(args.get(0),args.size() < 2 ? StringUtils.EMPTY : args.get(1));}  }
class C{  protected void fireRemoveUpdate(DocumentEvent chng){  Element lineMap=getDefaultRootElement();  int numLines=lineMap.getElementCount();  DocumentEvent.ElementChange change=chng.getChange(lineMap);  Element[] removed=change == null ? null : change.getChildrenRemoved();  if (removed != null && removed.length > 0) {    int line=change.getIndex();    int previousLine=line - 1;    int previousTokenType=(previousLine > -1 ? lastTokensOnLines.get(previousLine) : Token.NULL);    Element[] added=change.getChildrenAdded();    int numAdded=added == null ? 0 : added.length;    int endBefore=line + removed.length - numAdded;    lastTokensOnLines.removeRange(line,endBefore);    updateLastTokensBelow(line,numLines,previousTokenType);  } else {    int line=lineMap.getElementIndex(chng.getOffset());    if (line >= lastTokensOnLines.getSize())     return;    int previousLine=line - 1;    int previousTokenType=(previousLine > -1 ? lastTokensOnLines.get(previousLine) : Token.NULL);    updateLastTokensBelow(line,numLines,previousTokenType);  }  super.fireRemoveUpdate(chng);}  }
class C{  public INode copy(){  int[][] newBoard=new int[MaxR + 1][MaxC + 1];  for (int r=0; r <= MaxR; r++) {    for (int c=0; c <= MaxC; c++) {      newBoard[r][c]=board[r][c];    }  }  FifteenPuzzleNode node=new FifteenPuzzleNode(newBoard);  return node;}  }
class C{  public double[] computeLocalJointEntropyUsingPreviousObservations(double states1[][],double states2[][]){  return computeLocalJointEntropyUsingPreviousObservations(states1,states2,false);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public VOTechnicalService createTechnicalService(String tsXml) throws Exception {  serviceSetup.importTechnicalServices(tsXml);  technicalService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE_ID);  return technicalService;}  }
class C{  public boolean isAfterRange(final Range<T> otherRange){  if (otherRange == null) {    return false;  }  return isAfter(otherRange.maximum);}  }
class C{  public final void append(StringBuffer value){  if (value == null)   return;  int strlen=value.length();  if (0 == strlen)   return;  int copyfrom=0;  char[] chunk=m_array[m_lastChunk];  int available=m_chunkSize - m_firstFree;  while (strlen > 0) {    if (available > strlen)     available=strlen;    value.getChars(copyfrom,copyfrom + available,m_array[m_lastChunk],m_firstFree);    strlen-=available;    copyfrom+=available;    if (strlen > 0) {      int i=m_array.length;      if (m_lastChunk + 1 == i) {        char[][] newarray=new char[i + 16][];        System.arraycopy(m_array,0,newarray,0,i);        m_array=newarray;      }      chunk=m_array[++m_lastChunk];      if (chunk == null) {        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {          m_innerFSB=new FastStringBuffer(this);        }        chunk=m_array[m_lastChunk]=new char[m_chunkSize];      }      available=m_chunkSize;      m_firstFree=0;    }  }  m_firstFree+=available;}  }
class C{  @Provides @Singleton ChallengeDataSource provideChallengeDataSource(DaoSession session){  return new ChallengeDataSource(session);}  }
class C{  public <T extends Comparable<T>>AdvancedStateMap.Builder withPropertySuffix(IProperty<T> property,Function<T,String> nameMapper){  this.suffixProperties.put(property,nameMapper);  return this;}  }
class C{  private void sincronizarBase(){  listaLocal=ControleDAO.getBanco().getLocalDAO().listar();}  }
class C{  public void addToken(Segment segment,int start,int end,int tokenType,int startOffset){switch (tokenType) {case Token.IDENTIFIER:    int value=wordsToHighlight.get(segment,start,end);  if (value != -1)   tokenType=value;break;case Token.WHITESPACE:case Token.SEPARATOR:case Token.OPERATOR:case Token.ERROR_IDENTIFIER:case Token.ERROR_NUMBER_FORMAT:case Token.ERROR_STRING_DOUBLE:case Token.ERROR_CHAR:case Token.COMMENT_EOL:case Token.COMMENT_MULTILINE:case Token.LITERAL_BOOLEAN:case Token.LITERAL_NUMBER_DECIMAL_INT:case Token.LITERAL_NUMBER_FLOAT:case Token.LITERAL_NUMBER_HEXADECIMAL:case Token.LITERAL_STRING_DOUBLE_QUOTE:case Token.LITERAL_CHAR:break;default :new Exception("Unknown tokenType: '" + tokenType + "'").printStackTrace();tokenType=Token.IDENTIFIER;break;}super.addToken(segment,start,end,tokenType,startOffset);}  }
class C{  private int createFederation(final Properties properties,final boolean isTransient){  final int ndataServices;{    final String val=properties.getProperty(Options.NDATA_SERVICES,Options.DEFAULT_NDATA_SERVICES);    ndataServices=Integer.parseInt(val);    if (ndataServices <= 0) {      throw new IllegalArgumentException(Options.NDATA_SERVICES + "=" + val);    }  }{    final Properties p=new Properties(properties);    final UUID serviceUUID=UUID.randomUUID();    if (!isTransient) {      final File serviceDir=new File(dataDir,serviceUUID.toString());      serviceDir.mkdirs();      try {        new RandomAccessFile(new File(serviceDir,MDS),"rw").close();      } catch (      IOException e) {        throw new RuntimeException(e);      }      p.setProperty(MetadataService.Options.DATA_DIR,serviceDir.toString());    }    metadataService=new EmbeddedMetadataService(this,serviceUUID,p).start();  }{    dataService=new DataService[ndataServices];    for (int i=0; i < ndataServices; i++) {      final Properties p=new Properties(properties);      final UUID serviceUUID=UUID.randomUUID();      if (!isTransient) {        final File serviceDir=new File(dataDir,serviceUUID.toString());        serviceDir.mkdirs();        p.setProperty(DataService.Options.DATA_DIR,serviceDir.toString());      }      dataService[i]=new EmbeddedDataServiceImpl(serviceUUID,p).start();      dataServiceByUUID.put(serviceUUID,dataService[i]);    }  }  return ndataServices;}  }
class C{  private SystemEvent processListeners(Collection<SystemEventListener> listeners,SystemEvent event,Object source,EventInfo eventInfo){  if (listeners != null && !listeners.isEmpty()) {    ArrayList<SystemEventListener> list=new ArrayList<>(listeners);    for (    SystemEventListener curListener : list) {      if (curListener != null && curListener.isListenerForSource(source)) {        if (event == null) {          event=eventInfo.createSystemEvent(source);        }        assert event != null;        if (event.isAppropriateListener(curListener)) {          event.processListener(curListener);        }      }    }  }  return event;}  }
class C{  public <T extends DateOrTimeProperty>DateOrTimePropertyAsserter<T> dateProperty(Class<T> clazz){  return new DateOrTimePropertyAsserter<T>(vcard.getProperties(clazz),this);}  }
class C{  public boolean isLeapYear(int year){  if ((year & 3) != 0) {    return false;  }  if (year > gregorianCutoverYear) {    return (year % 100 != 0) || (year % 400 == 0);  }  if (year < gregorianCutoverYearJulian) {    return true;  }  boolean gregorian;  if (gregorianCutoverYear == gregorianCutoverYearJulian) {    BaseCalendar.Date d=getCalendarDate(gregorianCutoverDate);    gregorian=d.getMonth() < BaseCalendar.MARCH;  } else {    gregorian=year == gregorianCutoverYear;  }  return gregorian ? (year % 100 != 0) || (year % 400 == 0) : true;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tSpecifies percentage of instances to select. (default 50)\n","P",1,"-P <percentage>"));  newVector.addElement(new Option("\tSpecifies if inverse of selection is to be output.\n","V",0,"-V"));  return newVector.elements();}  }
class C{  public static int extractHighUnsignedNibble(int value){  return (value & 0xF0) >>> 4;}  }
class C{  public EmptyMessage(Type type){  super(type);}  }
class C{  @Override public void clean(){}  }
class C{  public void zoomOut(){  zoomOutAt(null);}  }
class C{  public PropertyNotFoundException(){  super();}  }
class C{  public AsyncResult AddNodesAsync(AddNodesRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public void addObserver(Observer observer){  if (observer == null) {    throw new NullPointerException();  }synchronized (this) {    if (!observers.contains(observer))     observers.add(observer);  }}  }
class C{  private float calculateHeight(float radius,float heightFactor,float x,float z){  float val=calculateRadiusPercent(radius,x,z);  return heightFactor * val;}  }
class C{  public PlanNode canMove(Loop loop,ColumnSource singleTable){  Set<TableSource> outerTables=null;  if (loop == null) {    if (singleTable == null)     outerTables=new HashSet<>();    loop=findLoop(outerTables);    if (loop == null)     return null;  }  if (loop.indexColumns != null) {    PlanNode loader=getSingleIndexLoader(loop,outerTables);    if (loader != null)     return loader;  }  Set<ColumnSource> allTables=dependencies.getReferencedTables();  if ((singleTable == null) && (outerTables != null)) {    allTables.removeAll(outerTables);    if (allTables.size() == 1)     singleTable=allTables.iterator().next();  }  if (singleTable != null) {    return loop.loaders.get(singleTable);  }  if ((loop.flattens != null) && !allTables.isEmpty()) {    flattens:     for (    PlanNode flatten : loop.flattens) {      Set<TableSource> tables=loop.flattened.get(flatten);      for (      ColumnSource table : allTables) {        if (!tables.contains(table))         continue flattens;      }      return flatten;    }  }  return null;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return MYINTS;case 2:  return HELLO;default :return null;}}  }
class C{  public static AccessibilityEvent obtain(AccessibilityEvent event){  AccessibilityEvent eventClone=AccessibilityEvent.obtain();  eventClone.init(event);  final int recordCount=event.mRecords.size();  for (int i=0; i < recordCount; i++) {    AccessibilityRecord record=event.mRecords.get(i);    AccessibilityRecord recordClone=AccessibilityRecord.obtain(record);    eventClone.mRecords.add(recordClone);  }  return eventClone;}  }
class C{  @Override public SearchRequest indices(String... indices){  if (indices == null) {    throw new IllegalArgumentException("indices must not be null");  } else {    for (int i=0; i < indices.length; i++) {      if (indices[i] == null) {        throw new IllegalArgumentException("indices[" + i + "] must not be null");      }    }  }  this.indices=indices;  return this;}  }
class C{  private List<Expression> parseSingleExpression() throws ParseException {  List<Expression> expressions=new LinkedList<>();  expressions.add(parseExpression());  return expressions;}  }
class C{  public String type(){  return typeName.normalized();}  }
class C{  public boolean isLessThanOrEqualTo(Decimal decimal){  assertDefined();  BigDecimal thisValue=notNull(this);  BigDecimal parameter=notNull(decimal);  return (thisValue.compareTo(parameter) <= 0);}  }
class C{  public void configureBaudRate(String rate){  log.debug("configureBaudRate: " + rate);  selectedSpeed=rate;  super.configureBaudRate(rate);}  }
class C{  public synchronized long timeSpentSyncing(){  if (!mLastWasSyncing)   return mTimeSpentSyncing;  final long now=SystemClock.elapsedRealtime();  return mTimeSpentSyncing + (now - mWhenSyncStarted);}  }
class C{  public BasicAnimator(){  interpolator=null;}  }
class C{  TemporalAccessor resolve(ResolverStyle resolverStyle,Set<TemporalField> resolverFields){  if (resolverFields != null) {    fieldValues.keySet().retainAll(resolverFields);  }  this.resolverStyle=resolverStyle;  resolveFields();  resolveTimeLenient();  crossCheck();  resolvePeriod();  resolveFractional();  resolveInstant();  return this;}  }
class C{  public static String stringFor(int n){switch (n) {case cudaFuncCachePreferNone:    return "cudaFuncCachePreferNone";case cudaFuncCachePreferShared:  return "cudaFuncCachePreferShared";case cudaFuncCachePreferL1:return "cudaFuncCachePreferL1";case cudaFuncCachePreferEqual:return "cudaFuncCachePreferEqual";}return "INVALID cudaFuncCache: " + n;}  }
class C{  public static JFreeChart createHighLowChart(String title,String timeAxisLabel,String valueAxisLabel,OHLCDataset dataset,boolean legend){  ValueAxis timeAxis=new DateAxis(timeAxisLabel);  NumberAxis valueAxis=new NumberAxis(valueAxisLabel);  HighLowRenderer renderer=new HighLowRenderer();  renderer.setBaseToolTipGenerator(new HighLowItemLabelGenerator());  XYPlot plot=new XYPlot(dataset,timeAxis,valueAxis,renderer);  JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);  currentTheme.apply(chart);  return chart;}  }
class C{  public boolean __ne__(final Object rhs){  return !getBigInteger(this).equals(getBigInteger(rhs));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void handleGetRequest(int type) throws IOException {  ServerOperation op=new ServerOperation(this,mInput,type,mMaxPacketLength,mListener);  try {    int response=validateResponseCode(mListener.onGet(op));    if (!op.isAborted) {      op.sendReply(response);    }  } catch (  Exception e) {    sendResponse(ResponseCodes.OBEX_HTTP_INTERNAL_ERROR,null);  }}  }
class C{  public RegionAccessException(String s,String regionFullPath,Set missingRoles,Throwable ex){  super(s,regionFullPath,ex);  this.missingRoles=missingRoles;  if (this.missingRoles == null) {    this.missingRoles=Collections.EMPTY_SET;  }}  }
class C{  public ColorList rotateRYB(float theta){  return rotateRYB(MathUtils.degrees(theta));}  }
class C{  public static <T>T min(T[] items){  return min((Iterable<T>)Arrays.asList(items));}  }
class C{  public void redoLastAction(){  try {    if (undoManager.canRedo())     undoManager.redo();  } catch (  CannotRedoException cre) {    cre.printStackTrace();  }}  }
class C{  public DERExternal(ASN1ObjectIdentifier directReference,ASN1Integer indirectReference,ASN1Primitive dataValueDescriptor,int encoding,ASN1Primitive externalData){  setDirectReference(directReference);  setIndirectReference(indirectReference);  setDataValueDescriptor(dataValueDescriptor);  setEncoding(encoding);  setExternalContent(externalData.toASN1Primitive());}  }
class C{  public boolean isBold(){  if (fontInfo != null)   return fontInfo.bold;  return false;}  }
class C{  public void reset() throws IOException {synchronized (lock) {    ensureOpen();    if (markedChar < 0)     throw new IOException((markedChar == INVALIDATED) ? "Mark invalid" : "Stream not marked");    nextChar=markedChar;    skipLF=markedSkipLF;  }}  }
class C{  public void put(E message) throws InterruptedException {  this.get(message).put(message);}  }
class C{  @Override public double valueToJava2D(double value,Rectangle2D area,RectangleEdge edge){  value=this.timeline.toTimelineValue((long)value);  DateRange range=(DateRange)getRange();  double axisMin=this.timeline.toTimelineValue(range.getLowerMillis());  double axisMax=this.timeline.toTimelineValue(range.getUpperMillis());  double result=0.0;  if (RectangleEdge.isTopOrBottom(edge)) {    double minX=area.getX();    double maxX=area.getMaxX();    if (isInverted()) {      result=maxX + ((value - axisMin) / (axisMax - axisMin)) * (minX - maxX);    } else {      result=minX + ((value - axisMin) / (axisMax - axisMin)) * (maxX - minX);    }  } else   if (RectangleEdge.isLeftOrRight(edge)) {    double minY=area.getMinY();    double maxY=area.getMaxY();    if (isInverted()) {      result=minY + (((value - axisMin) / (axisMax - axisMin)) * (maxY - minY));    } else {      result=maxY - (((value - axisMin) / (axisMax - axisMin)) * (maxY - minY));    }  }  return result;}  }
class C{  public String toString(){  String result;  long elapsed;  long hours;  long mins;  long secs;  long msecs;  result="";  elapsed=getStop() - getStart();switch (getOutputFormat()) {case FORMAT_HHMMSS:    hours=elapsed / (3600 * 1000);  elapsed=elapsed % (3600 * 1000);mins=elapsed / (60 * 1000);elapsed=elapsed % (60 * 1000);secs=elapsed / 1000;msecs=elapsed % 1000;if (hours > 0) result+="" + hours + ":";if (mins < 10) result+="0" + mins + ":"; else result+="" + mins + ":";if (secs < 10) result+="0" + secs + "."; else result+="" + secs + ".";result+=Utils.doubleToString((double)msecs / (double)1000,3).replaceAll(".*\\.","");break;case FORMAT_SECONDS:result=Utils.doubleToString((double)elapsed / (double)1000,3) + "s";break;case FORMAT_MILLISECONDS:result="" + elapsed + "ms";break;default :result="<unknown time format>";}return result;}  }
class C{  public static void create(Context context,int id,CharSequence title,CharSequence content,CharSequence ticker,int smallIcon,int largeIcon,boolean ongoing,boolean autoCancel,int visibility,PendingIntent pendingIntent){  create(context,id,title,content,ticker,smallIcon,largeIcon,0,ongoing,autoCancel,Notification.PRIORITY_DEFAULT,visibility,pendingIntent);}  }
class C{  public void save(){  getBot().log(this,"Saving",Bot.FINE,this);  getParent().merge(this);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattributens02.class,args);}  }
class C{  public InterceptedStream<T> close(String index){  InterceptedStream<T> stream=streams.remove(index);  if (stream == null)   return null;  close(stream.getStream());  return stream;}  }
class C{  public boolean illegalRoadblocking(LogicCircuit lc,GateLibrary gate_library){  if (_roadblocking_option == false) {    return false;  }  if (numberRoadblocking(lc,gate_library) > 0) {    return true;  } else {    return false;  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.ENUMERATOR__OWNING_ENUMERATION:    setOwningEnumeration((EnumerationType)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static void assertAccountNotification(final Notification notification,final Account expectedAccount){  final AccountNotification n=(AccountNotification)notification;  Assert.assertThat(n.getType(),IsEqual.equalTo(NotificationType.Account));  Assert.assertThat(n.getAccount(),IsEqual.equalTo(expectedAccount));}  }
class C{  public static byte[] base64StringToBase64Binary(final String base64String){  final byte[] decodedBase64=Base64.decodeBase64(base64String);  final byte[] encodeBase64=Base64.encodeBase64(decodedBase64);  return encodeBase64;}  }
class C{  public static boolean isNoCacheEqual(Constituent c,FeatureExtractor fex_1,FeatureExtractor fex_2) throws Exception {  Set<Feature> feats_1=fex_1.getFeatures(c);  Set<Feature> feats_2=fex_2.getFeatures(c);  return isNoCacheEqual(feats_1,feats_2);}  }
class C{  private void finalizeResponse(){  finalResponse=true;  operation.getHeadersFuture().release();  operation.getBodyFuture().release();  operation.getPushFuture().release();}  }
class C{  private static int med3(byte[] x,int a,int b,int c){  return (x[a] < x[b] ? (x[b] < x[c] ? b : x[a] < x[c] ? c : a) : (x[b] > x[c] ? b : x[a] > x[c] ? c : a));}  }
class C{  public void add(String field,boolean ascend){  String[] f=new String[m_fields.length + 1];  System.arraycopy(m_fields,0,f,0,m_fields.length);  f[m_fields.length]=field;  m_fields=f;  boolean[] b=new boolean[m_fields.length + 1];  System.arraycopy(m_ascend,0,b,0,m_ascend.length);  b[m_ascend.length]=ascend;  m_ascend=b;}  }
class C{  protected void firePropertyChange(final String propertyName,final Object oldVal,final Object newVal){  propertySupport.firePropertyChange(propertyName,oldVal,newVal);}  }
class C{  private boolean isFatalState(String sqlState){  if (sqlState == null || sqlState.length() < 2) {    return true;  }  for (  String FATAL_SQL_STATE_CLASS : FATAL_SQL_STATE_CLASSES) {    if (sqlState.startsWith(FATAL_SQL_STATE_CLASS)) {      return true;    }  }  return false;}  }
class C{  @Override protected void handleShellCloseEvent(){  super.handleShellCloseEvent();  setReturnCode(SWT.DEFAULT);}  }
class C{  private boolean itemIsObscuredByHeader(RecyclerView parent,View item,View header,int orientation){  RecyclerView.LayoutParams layoutParams=(RecyclerView.LayoutParams)item.getLayoutParams();  mDimensionCalculator.initMargins(mTempRect1,header);  int adapterPosition=parent.getChildAdapterPosition(item);  if (adapterPosition == RecyclerView.NO_POSITION || mHeaderProvider.getHeader(parent,adapterPosition) != header) {    return false;  }  if (orientation == LinearLayoutManager.VERTICAL) {    int itemTop=item.getTop() - layoutParams.topMargin;    int headerBottom=header.getBottom() + mTempRect1.bottom + mTempRect1.top;    if (itemTop > headerBottom) {      return false;    }  } else {    int itemLeft=item.getLeft() - layoutParams.leftMargin;    int headerRight=header.getRight() + mTempRect1.right + mTempRect1.left;    if (itemLeft > headerRight) {      return false;    }  }  return true;}  }
class C{  public Command showDialog(){  lastCommandPressed=null;  show();  return lastCommandPressed;}  }
class C{  public static void ensureNotSet(Configuration cfg,String attr,String msg) throws IgniteCheckedException {  if (cfg.get(attr) != null)   throw new IgniteCheckedException(attr + " is incompatible with " + msg+ " mode.");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public IllegalMonitorStateException(){  super();}  }
class C{  public void initialize(){  mCnxManager=(ConnectivityManager)mCtx.getSystemService(Context.CONNECTIVITY_SERVICE);  mNetwork=mRcsSettings.getNetworkAccess();  mOperator=mRcsSettings.getNetworkOperator();  mNetworkInterfaces[0]=new MobileNetworkInterface(mImsModule,mRcsSettings);  mNetworkInterfaces[1]=new WifiNetworkInterface(mImsModule,mRcsSettings);  mCurrentNetworkInterface=getMobileNetworkInterface();  loadUserProfile();}  }
class C{  public boolean satisfies(HyperGraph hg,HGHandle handle){  if (hg.isLoaded(handle)) {    Object atom=hg.get(handle);    if (!(atom instanceof HGLink))     return arity.get() == 0; else     return ((HGLink)atom).getArity() == arity.get();  } else {    HGPersistentHandle[] layout=hg.getStore().getLink(hg.getPersistentHandle(handle));    if (layout == null)     throw new HGException("Cound not find atom refered to by " + handle + " in HyperGraph store."); else     return layout.length == arity.get() + 2;  }}  }
class C{  private Clustering<Model> doRun(Relation<ParameterizationFunction> relation,FiniteProgress progress){  Clustering<Model> res=new Clustering<>("CASH clustering","cash-clustering");  final int dim=dimensionality(relation);  ObjectHeap<IntegerPriorityObject<CASHInterval>> heap=new ComparableMinHeap<>();  ModifiableDBIDs noiseIDs=DBIDUtil.newHashSet(relation.getDBIDs());  initHeap(heap,relation,dim,noiseIDs);  if (LOG.isDebugging()) {    StringBuilder msg=new StringBuilder();    msg.append("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");    msg.append("\nXXXX dim ").append(dim);    msg.append("\nXXXX database.size ").append(relation.size());    msg.append("\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");    LOG.debugFine(msg.toString());  } else   if (LOG.isVerbose()) {    StringBuilder msg=new StringBuilder();    msg.append("XXXX dim ").append(dim).append(" database.size ").append(relation.size());    LOG.verbose(msg.toString());  }  while (!heap.isEmpty()) {    CASHInterval interval=determineNextIntervalAtMaxLevel(heap);    if (LOG.isDebugging()) {      LOG.debugFine("next interval in dim " + dim + ": "+ interval);    } else     if (LOG.isVerbose()) {      LOG.verbose("next interval in dim " + dim + ": "+ interval);    }    if (interval == null) {      break;    }    ModifiableDBIDs clusterIDs=DBIDUtil.newHashSet();    if (dim > minDim + 1) {      ModifiableDBIDs ids;      double[][] basis_dim_minus_1;      if (adjust) {        ids=DBIDUtil.newHashSet();        basis_dim_minus_1=runDerivator(relation,dim,interval,ids);      } else {        ids=interval.getIDs();        basis_dim_minus_1=determineBasis(SpatialUtil.centroid(interval));      }      if (ids.size() != 0) {        MaterializedRelation<ParameterizationFunction> db=buildDB(dim,basis_dim_minus_1,ids,relation);        Clustering<Model> res_dim_minus_1=doRun(db,progress);        for (        Cluster<Model> cluster : res_dim_minus_1.getAllClusters()) {          res.addToplevelCluster(cluster);          noiseIDs.removeDBIDs(cluster.getIDs());          clusterIDs.addDBIDs(cluster.getIDs());          processedIDs.addDBIDs(cluster.getIDs());        }      }    } else {      LinearEquationSystem les=runDerivator(relation,dim - 1,interval.getIDs());      Cluster<Model> c=new Cluster<Model>(interval.getIDs(),new LinearEquationModel(les));      res.addToplevelCluster(c);      noiseIDs.removeDBIDs(interval.getIDs());      clusterIDs.addDBIDs(interval.getIDs());      processedIDs.addDBIDs(interval.getIDs());    }    ArrayList<IntegerPriorityObject<CASHInterval>> heapVector=new ArrayList<>(heap.size());    for (ObjectHeap.UnsortedIter<IntegerPriorityObject<CASHInterval>> iter=heap.unsortedIter(); iter.valid(); iter.advance()) {      heapVector.add(iter.get());    }    heap.clear();    for (    IntegerPriorityObject<CASHInterval> pair : heapVector) {      CASHInterval currentInterval=pair.getObject();      currentInterval.removeIDs(clusterIDs);      if (currentInterval.getIDs().size() >= minPts) {        heap.add(new IntegerPriorityObject<>(currentInterval.priority(),currentInterval));      }    }    if (progress != null) {      progress.setProcessed(processedIDs.size(),LOG);    }  }  if (!noiseIDs.isEmpty()) {    if (dim == noiseDim) {      Cluster<Model> c=new Cluster<Model>(noiseIDs,true,ClusterModel.CLUSTER);      res.addToplevelCluster(c);      processedIDs.addDBIDs(noiseIDs);    } else     if (noiseIDs.size() >= minPts) {      LinearEquationSystem les=runDerivator(fulldatabase,dim - 1,noiseIDs);      Cluster<Model> c=new Cluster<Model>(noiseIDs,true,new LinearEquationModel(les));      res.addToplevelCluster(c);      processedIDs.addDBIDs(noiseIDs);    }  }  if (LOG.isDebugging()) {    StringBuilder msg=new StringBuilder();    msg.append("noise fuer dim ").append(dim).append(": ").append(noiseIDs.size());    for (    Cluster<Model> c : res.getAllClusters()) {      if (c.getModel() instanceof LinearEquationModel) {        LinearEquationModel s=(LinearEquationModel)c.getModel();        msg.append("\n Cluster: Dim: " + s.getLes().subspacedim() + " size: "+ c.size());      } else {        msg.append("\n Cluster: " + c.getModel().getClass().getName() + " size: "+ c.size());      }    }    LOG.debugFine(msg.toString());  }  if (progress != null) {    progress.setProcessed(processedIDs.size(),LOG);  }  return res;}  }
class C{  public boolean isEngaged(final Player player){  return (player.hasQuest(QUEST_SLOT) && (player.getQuest(QUEST_SLOT).startsWith("engaged") || player.getQuest(QUEST_SLOT).startsWith("forging;")));}  }
class C{  public long continuousQueryFilterCreate(long memPtr){  enter();  try {    return PlatformCallbackUtils.continuousQueryFilterCreate(envPtr,memPtr);  }  finally {    leave();  }}  }
class C{  private void printVerbose(String message){  if (verbose) {    System.out.println(message);  }}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public LineString createLineString(CoordinateSequence coordinates){  return new LineString(coordinates,this);}  }
class C{  protected void waitForIslands(){  output.message("Waiting for islands:");synchronized (islands) {    Iterator keys=islands.iterator();    while (keys.hasNext())     output.message(((Address)keys.next()).name);    while (islands.size() > 0)     wait(5);  }}  }
class C{  public LocalDate parseLocalDate(String text){  return parseLocalDateTime(text).toLocalDate();}  }
class C{  public void insertFree(short card){  if (card > freeEncoding[3]) {    freeEncoding[0]=freeEncoding[1];    freeEncoding[1]=freeEncoding[2];    freeEncoding[2]=freeEncoding[3];    freeEncoding[3]=card;    return;  }  if (card > freeEncoding[2]) {    freeEncoding[0]=freeEncoding[1];    freeEncoding[1]=freeEncoding[2];    freeEncoding[2]=card;    return;  }  if (card > freeEncoding[1]) {    freeEncoding[0]=freeEncoding[1];    freeEncoding[1]=card;    return;  }  freeEncoding[0]=card;}  }
class C{  @Override public void configure(){  if (this.isAutoRange()) {    autoAdjustRange();  }}  }
class C{  private static ThrottlingPoint createPoint(String throttlingPointName){  Config config=ConfigFactory.load();  String throttlingPointType=config.getString(DEFAULT_THROTTLINGPOINT_PROPERTY_KEY);  String customConfigPath=ConfigUtil.joinPath(throttlingPointName);  if (config.getConfig(CUSTOM_THROTTLINGPOINT_KEY_PREFIX).hasPath(customConfigPath)) {    throttlingPointType=config.getConfig(CUSTOM_THROTTLINGPOINT_KEY_PREFIX).getString(customConfigPath);  }  ThrottlingPoint instance=getThrottlingPointInstance(throttlingPointType,throttlingPointName);  if (instance == null) {    throw new IllegalArgumentException("Invalid throttling point type for " + throttlingPointName + ": "+ throttlingPointType);  }  return instance;}  }
class C{  public FailureSequence(String filename){  In in=new In(filename);  opSequence=new ArrayDequeSolution<DequeOperation>();  while (!in.isEmpty()) {    String opRead=in.readString();    Matcher m=OP_PATTERN.matcher(opRead);    if (!m.find()) {      throw new RuntimeException("Invalid Operation: " + opRead);    }    try {      DequeOperation dequeOp;      String opName=m.group(1);      String opArg=m.group(2);      if (opArg.length() > 0) {        int argument=Integer.parseInt(m.group(2));        dequeOp=new DequeOperation(opName,argument);      } else {        dequeOp=new DequeOperation(opName);      }      addOperation(dequeOp);    } catch (    Exception e) {      throw new RuntimeException("Invalid Operation: " + opRead);    }  }}  }
class C{  public static <T>List<T> unique(List<T> lst){  return new ArrayList<>(new LinkedHashSet<>(lst));}  }
class C{  public org.apache.nutch.storage.ProtocolStatus.Builder clearCode(){  fieldSetFlags()[0]=false;  return this;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case KEY:return isSetKey();case VERSION:return isSetVersion();}throw new IllegalStateException();}  }
class C{  SpherePanel(String filename){  try {    URL url=getClass().getResource("images/" + filename);    sphereImage=ImageIO.read(url);  } catch (  Exception e) {    System.out.println("Problem loading image " + filename + ": "+ e);    return;  }  setPreferredSize(new Dimension(sphereImage.getWidth() + 2 * PADDING,PANEL_HEIGHT));  bouncer=PropertySetter.createAnimator(2000,this,"sphereY",0,(PANEL_HEIGHT - sphereImage.getHeight()),0);  bouncer.setAcceleration(.5f);  bouncer.setDeceleration(.5f);}  }
class C{  public static Boolean valueOf(final boolean b){  return b ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  private void rememberRegion(int offset,int length){  if (fStartOffset == -1)   fStartOffset=offset; else   if (offset < fStartOffset)   fStartOffset=offset;  int endOffset=offset + length;  if (fEndOffset == -1)   fEndOffset=endOffset; else   if (endOffset > fEndOffset)   fEndOffset=endOffset;}  }
class C{  public boolean equals(Object o){  throw new java.lang.UnsupportedOperationException("Method equals() not implemented.");}  }
class C{  public T caseModelReference(ModelReference object){  return null;}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    RelativeStrengthIndexItem dataItem=(RelativeStrengthIndexItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Value: "+ dataItem.getRelativeStrengthIndex());  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private AnnotationMirror createPartialRegexAnnotation(String partial){  AnnotationBuilder builder=new AnnotationBuilder(processingEnv,PartialRegex.class);  builder.setValue("value",partial);  return builder.build();}  }
class C{  public Task<R> firstTask(){  if (!tasks.isEmpty()) {    return tasks.get(0);  }  return null;}  }
class C{  public Anonymous_inlineStateMachine_1_ createAnonymous_inlineStateMachine_1_(){  Anonymous_inlineStateMachine_1_Impl anonymous_inlineStateMachine_1_=new Anonymous_inlineStateMachine_1_Impl();  return anonymous_inlineStateMachine_1_;}  }
class C{  static int newInsertPos(int oldPos,Insertion ins){  if (oldPos <= ins.pos) {    return oldPos;  }  if (oldPos < ins.pos + ins.oldLen) {    if (oldPos < ins.pos + ins.newLen) {      return oldPos;    } else {      return ins.pos + ins.newLen - ins.oldLen;    }  } else {    return oldPos + ins.newLen - ins.oldLen;  }}  }
class C{  public List<Object> extractRawValues(String path){  return XContentMapValues.extractRawValues(path,loadSourceIfNeeded());}  }
class C{  public void putNull(String key){  mValues.put(key,null);}  }
class C{  public StaticEndpointGroup(Endpoint... endpoints){  requireNonNull(endpoints,"endpoints");  this.endpoints=ImmutableList.copyOf(endpoints);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGraphPackage.CHOICE__KIND:    setKind(KIND_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.UNICODE_ESCAPE_SEQUENCE;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  return (stack.getUIMgr() == null) ? null : stack.getUIMgr().getModuleGroup().getWidgets(WidgetMeta.getTypeForName(s));}  }
class C{  public Proxy wrap(Object adaptee){  setAdaptee(adaptee);  return this;}  }
class C{  protected ShaderVar addUniform(IGlobalShaderVar var,int index){  return addUniform(var.getVarString() + Integer.toString(index),var.getDataType());}  }
class C{  @Override protected void before(ResolvedJavaMethod method){  method.reprofile();}  }
class C{  synchronized Plugin nextPlugin(){  if (!init) {    this.reset();  }  Plugin plugin=probeNextPlugin();  if (plugin == null) {    return null;  }  listPending.remove(plugin);  plugin.setTimeStarted();  listRunning.add(plugin);  return plugin;}  }
class C{  public List<Integer> emit(List<Object> tuple){  return emit(tuple,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:25.511 -0500",hash_original_method="E44EE0F95315B8E0B0AD825ED26FE77A",hash_generated_method="188CCFB5B246EE5D89A18D68BA88246D") public LogWriter(int priority,String tag){  mPriority=priority;  mTag=tag;  mBuffer=Log.LOG_ID_MAIN;}  }
class C{  public PassiveAggressive(int epochs,Mode mode){  this.epochs=epochs;  this.mode=mode;}  }
class C{  public static PsiFile addOrReplaceFile(PsiDirectory dir,PsiFile file){  final PsiFile existingFile=dir.findFile(file.getName());  if (existingFile != null) {    existingFile.delete();  }  return (PsiFile)dir.add(file);}  }
class C{  public static int month(){  int currentMonth=(int)((System.currentTimeMillis() % millisecondPerYear()) / millisecondsPerMonth());  return currentMonth + 1;}  }
class C{  public void newGame(){  if (!isConnected()) {    throw new IllegalStateException("Engine is not connected.");  }  if (LOG.isDebugEnabled()) {    LOG.debug("Entering newGame()");  }  if (isProcessingGo()) {    stop();  }  send("ucinewgame");}  }
class C{  public void testDeleteLockFile() throws IOException {  Directory dir=getDirectory(createTempDir());  try {    Lock lock=dir.obtainLock("test.lock");    lock.ensureValid();    try {      dir.deleteFile("test.lock");    } catch (    Exception e) {      IOUtils.closeWhileHandlingException(lock);      assumeNoException("test requires the ability to delete a locked file",e);    }    expectThrows(IOException.class,null);    IOUtils.closeWhileHandlingException(lock);  }  finally {    dir.close();  }}  }
class C{  public Boolean isSupportsHotPlugPCI(){  return supportsHotPlugPCI;}  }
class C{  public byte[] poll() throws KeeperException, InterruptedException {  TimerContext time=stats.time(dir + "_poll");  try {    return remove();  } catch (  NoSuchElementException e) {    return null;  } finally {    time.stop();  }}  }
class C{  public CompareToBuilder append(final short lhs,final short rhs){  if (comparison != 0) {    return this;  }  comparison=((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));  return this;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void testImportNoFile_kml(){  testImportNoFile(TrackFileFormat.KML);}  }
class C{  private void drawHighlights(Canvas c){  if (isEntireBlockHighlighted()) {    for (int i=0; i < mBlockBorderPatches.size(); ++i) {      mBlockBorderPatches.get(i).draw(c);    }  } else   if (mHighlightedConnection != null) {    if (mHighlightedConnection == mBlock.getOutputConnection()) {      assert mOutputConnectorHighlightPatch != null;      mOutputConnectorHighlightPatch.draw(c);    } else     if (mHighlightedConnection == mBlock.getPreviousConnection()) {      assert mPreviousConnectorHighlightPatch != null;      mPreviousConnectorHighlightPatch.draw(c);    } else     if (mHighlightedConnection == mBlock.getNextConnection()) {      assert (mNextConnectionHighlightPatch != null);      mNextConnectionHighlightPatch.draw(c);    } else {      final Input input=mHighlightedConnection.getInput();      for (int i=0; i < mInputViews.size(); ++i) {        if (mInputViews.get(i).getInput() == input) {          Drawable connectionHighlight=mInputConnectionHighlightPatches.get(i);          if (connectionHighlight != null) {            connectionHighlight.draw(c);          }          break;        }      }    }  }}  }
class C{  public static boolean nodesEqual(Node thisNode,Node otherNode){  if (thisNode == otherNode) {    return true;  }  if (thisNode.getNodeType() != otherNode.getNodeType()) {    return false;  }  return true;}  }
class C{  public static CharSequence time(Context context,EasyCursor c){  long now=System.currentTimeMillis();  long when=c.getLong(Reviews.WRITTEN_ON);  return now - when > MINUTE_IN_MILLIS ? DateUtils.getRelativeTimeSpanString(when,now,0,FORMAT_ABBREV_ALL) : context.getString(R.string.recent_time);}  }
class C{  public void back(){  back(null);}  }
class C{  public List<NamedRelatedResourceRep> listByDataCenter(URI dataCenterId){  return getList(PathConstants.HOST_BY_DATACENTER_URL,dataCenterId);}  }
class C{  public void save(File file,ExperimentFileHandler handler){  if (handler == null)   handler=m_FileChooser.getWriterForFile(file);  try {    log(null,"Saving experiment: " + file);    String msg=handler.write(m_Experiment,file);    if (msg == null) {      m_CurrentFile=file;      log(null,"Saved experiment successfully: " + file);      if (m_RecentFilesHandler != null)       m_RecentFilesHandler.addRecentItem(new RecentFilesHandlerWithCommandline.Setup(file,handler));    } else {      log(null,"Failed to save experiment to '" + file + "': "+ msg);    }  } catch (  Exception e) {    handleException(null,"Failed to save experiment to '" + file + "':",e);    JOptionPane.showMessageDialog(this,"Failed to save experiment to '" + file + "':\n"+ e,"Error saving",JOptionPane.ERROR_MESSAGE);  }  updateMenu();}  }
class C{  private static int findMnemonicIndex(String s){  for (int i=0; i < s.length() - 1; i++) {    if (s.charAt(i) == '&') {      if (s.charAt(i + 1) != '&') {        return i;      } else {        i++;      }    }  }  return -1;}  }
class C{  private void init(Context context,AttributeSet attrs){  if (attrs != null) {    TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.MetaballMenuImageView,0,0);    mnDefaultImage=a.getResourceId(R.styleable.MetaballMenuImageView_defaultImage,0);    mnSelectedImage=a.getResourceId(R.styleable.MetaballMenuImageView_selectedImage,0);    a.recycle();  }  if (mnDefaultImage != 0)   setImageResource(mnDefaultImage);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:15.046 -0500",hash_original_method="C0D74F5DDFD9A01C19E54F3379BA7652",hash_generated_method="618EE3A321C4FFDE67749913AA58ADE8") final public boolean isAdded(){  return 1 == (((mAdded) ? 1 : 0) + mActivity.getTaintInt());}  }
class C{  private Map<URI,Set<URI>> createVolumeToMasksMap(){  Map<URI,Set<URI>> volumeToMasks=new HashMap<>();  for (  URI maskURI : placementDescriptor.getMasks().keySet()) {    Map<URI,Volume> volumeMap=placementDescriptor.getPlacedVolumes(maskURI);    for (    URI volumeURI : volumeMap.keySet()) {      Set<URI> masks=volumeToMasks.get(volumeURI);      if (masks == null) {        masks=new HashSet<>();        volumeToMasks.put(volumeURI,masks);      }      masks.add(maskURI);    }  }  return volumeToMasks;}  }
class C{  private int createGLCategory(String Name,String CategoryType,boolean isDefault){  MGLCategory cat=new MGLCategory(Env.getCtx(),0,trxname);  cat.setName(Name);  cat.setCategoryType(CategoryType);  cat.setIsDefault(isDefault);  if (!cat.save()) {    log.log(Level.SEVERE,"GL Category NOT created - " + Name);    return 0;  }  return cat.getGL_Category_ID();}  }
class C{  public a removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  @Override public void mouseMoved(GlobalMouseEvent event){}  }
class C{  void paintHorScrollbar(Graphics g,Color colors[],boolean paintAll){  if (hsbSpace <= 0) {    return;  }  Graphics ng=g.create();  g.setColor(colors[BACKGROUND_COLOR]);  int w=width - vsbSpace - (2 * MARGIN);  g.fillRect(MARGIN,height - SCROLLBAR,w,SPACE);  g.fillRect(0,height - SCROLLBAR,MARGIN,SCROLLBAR);  g.fillRect(MARGIN + w,height - SCROLLBAR,MARGIN,SCROLLBAR);  try {    ng.translate(MARGIN,height - (SCROLLBAR - SPACE));    hsb.paint(ng,colors,paintAll);  }  finally {    ng.dispose();  }}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final Account account,final AddressEncoding encoding){  Address.writeTo(serializer,label,account.getAddress(),encoding);}  }
class C{  public MoveStaticMembersDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.MOVE_STATIC_MEMBERS,project,description,comment,arguments,flags);  fType=(IType)JavaRefactoringDescriptorUtil.getJavaElement(fArguments,ATTRIBUTE_INPUT,project);  fDelegate=JavaRefactoringDescriptorUtil.getBoolean(fArguments,ATTRIBUTE_DELEGATE,fDelegate);  fDeprecate=JavaRefactoringDescriptorUtil.getBoolean(fArguments,ATTRIBUTE_DEPRECATE,fDeprecate);  fMembers=(IMember[])JavaRefactoringDescriptorUtil.getJavaElementArray(fArguments,null,ATTRIBUTE_ELEMENT,1,project,IMember.class);}  }
class C{  public void addUniqueKeyConstraint(String name,String[] sourceFields){  UniqueKeyConstraint uniqueKey=new UniqueKeyConstraint(name,sourceFields);  addUniqueKeyConstraint(uniqueKey);}  }
class C{  public static String decodePathSegment(String pathSegment) throws UnsupportedEncodingException {  if (pathSegment != null) {    return URLDecoder.decode(pathSegment,"UTF-8");  } else {    return null;  }}  }
class C{  private TokenInfo parseVerifyToken(String json){  if (json == null) {    LOGGER.warning("Error parsing verify token result (null)");    return null;  }  try {    JSONParser parser=new JSONParser();    JSONObject root=(JSONObject)parser.parse(json);    JSONObject token=(JSONObject)root.get("token");    if (token == null) {      return null;    }    boolean valid=(Boolean)token.get("valid");    if (!valid) {      return new TokenInfo();    }    String username=(String)token.get("user_name");    JSONObject authorization=(JSONObject)token.get("authorization");    JSONArray scopes=(JSONArray)authorization.get("scopes");    boolean allowCommercials=scopes.contains("channel_commercial");    boolean allowEditor=scopes.contains("channel_editor");    boolean chatAccess=scopes.contains("chat_login");    boolean userAccess=scopes.contains("user_read");    boolean readSubscriptions=scopes.contains("channel_subscriptions");    boolean userEditFollows=scopes.contains("user_follows_edit");    return new TokenInfo(username,chatAccess,allowEditor,allowCommercials,userAccess,readSubscriptions,userEditFollows);  } catch (  ParseException e) {    return null;  }}  }
class C{  public void dup2(){  mv.visitInsn(Opcodes.DUP2);}  }
class C{  public void stop(){  if (session != null) {    CameraSession temp=session;    session=null;    engine.close(temp);  }}  }
class C{  public boolean canRedo(){  return m_undoIndex <= (size() - 1);}  }
class C{  public PasteSubsessionAction(){  super("Paste");}  }
class C{  public static void removeCachedTeXFormula(String f,int style,int type,int size,int inset,Color fgcolor) throws ParseException {  cache.remove(new CachedTeXFormula(f,style,type,size,inset,fgcolor));}  }
class C{  public SerializerRegistry registry(){  return registry;}  }
class C{  public <T extends DataObject>void updateAndReIndexInBatches(List<T> records,int partitionSize,DbClient dbClient,String type){  List<List<T>> volume_partitions=Lists.partition(records,partitionSize);  for (  List<T> partition : volume_partitions) {    try {      dbClient.updateObject(partition);      _log.info("{} {} Records updated and reindexed to DB",partition.size(),type);    } catch (    DatabaseException e) {      _log.error("Error updating {} records into the database:",type,e);    }  }}  }
class C{  public static BackgroundTask runBackgroundTask(TaskRunnable run){  BackgroundTask backgroundTask=sInstance.mBackgroundTaskWorkQueue.poll();  if (backgroundTask == null) {    backgroundTask=new BackgroundTask();  }  backgroundTask.initializeTask(run);  sInstance.mExecutingTaskWorkQueue.offer(backgroundTask);  sInstance.mTaskThreadPool.execute(run);  return backgroundTask;}  }
class C{  public GenericURI uriReference(boolean inBrackets) throws ParseException {  if (debug)   dbg_enter("uriReference");  GenericURI retval=null;  Token[] tokens=lexer.peekNextToken(2);  Token t1=(Token)tokens[0];  Token t2=(Token)tokens[1];  try {    if (t1.getTokenType() == TokenTypes.SIP || t1.getTokenType() == TokenTypes.SIPS) {      if (t2.getTokenType() == ':')       retval=sipURL(inBrackets); else       throw createParseException("Expecting \':\'");    } else     if (t1.getTokenType() == TokenTypes.TEL) {      if (t2.getTokenType() == ':') {        retval=telURL(inBrackets);      } else       throw createParseException("Expecting \':\'");    } else {      String urlString=uricString();      try {        retval=new GenericURI(urlString);      } catch (      ParseException ex) {        throw createParseException(ex.getMessage());      }    }  }  finally {    if (debug)     dbg_leave("uriReference");  }  return retval;}  }
class C{  public void testNoneNominal(){  performTest(false,false,false,false,false);}  }
class C{  protected TaskResourceRep doDiscoverVcenter(Vcenter vcenter){  ComputeSystemController controller=getController(ComputeSystemController.class,"vcenter");  DiscoveredObjectTaskScheduler scheduler=new DiscoveredObjectTaskScheduler(_dbClient,new DiscoverJobExec(controller));  String taskId=UUID.randomUUID().toString();  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);  tasks.add(new AsyncTask(Vcenter.class,vcenter.getId(),taskId));  TaskList taskList=scheduler.scheduleAsyncTasks(tasks);  TaskResourceRep taskResourceRep=taskList.getTaskList().iterator().next();  updateTaskTenant(taskResourceRep);  return taskResourceRep;}  }
class C{  private static Matrix rotationMatrix(Matrix pts1,Matrix pts2){  Matrix M=pts1.times(pts2.transpose());  Matrix Q=M.times(M.transpose());  Matrix V=Q.eig().getV();  double[] d=Q.eig().getRealEigenvalues();  Matrix A=new Matrix(3,3);  for (int i=0; i < 3; i++) {    A.set(i,i,1 / Math.sqrt(d[i]));  }  return M.transpose().times(V).times(A).times(V.transpose());}  }
class C{  @POST @Path("properties/reset/") @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response resetProps(PropertyList propertyList,@QueryParam("removeObsolete") String forceRemove) throws Exception {  Map<String,PropertyMetadata> metadata=PropertiesMetadata.getGlobalMetadata();  PropertyInfoRestRep targetPropInfo=getTargetPropsCommon();  PropertyInfoRestRep resetProps=getResetProps(propertyList,targetPropInfo.getAllProperties(),metadata);  List<String> obsoleteProps=isSet(forceRemove) ? getObsoleteProps(targetPropInfo.getAllProperties(),metadata) : null;  return updatePropertiesCommon(resetProps,obsoleteProps);}  }
class C{  private void updatePoints(final Player player){  final DeathmatchState deathmatchState=DeathmatchState.createFromQuestString(player.getQuest("deathmatch"));  DBCommandQueue.get().enqueue(new WriteHallOfFamePointsCommand(player.getName(),"D",deathmatchState.getPoints(),true));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.930 -0500",hash_original_method="AF7DAD1D714DF080FC565FAE96651A27",hash_generated_method="CDF7686F09824C4D3C14E96620EC69D0") void _processWont(int option) throws IOException {  if (debugoptions) {    System.err.println("RECEIVED WONT: " + TelnetOption.getOption(option));  }  if (__notifhand != null) {    __notifhand.receivedNegotiation(TelnetNotificationHandler.RECEIVED_WONT,option);  }  if (_doResponse[option] > 0) {    --_doResponse[option];    if (_doResponse[option] > 0 && _stateIsDont(option)) {      --_doResponse[option];    }  }  if (_doResponse[option] == 0 && _requestedDo(option)) {switch (option) {default :      break;  }  if ((_stateIsDo(option)) || (_requestedDo(option))) {    _sendDont(option);  }  _setWantDont(option);}_setDont(option);}  }
class C{  public static boolean isConnectedMobile(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);}  }
class C{  private void endFormals(){  if (hasFormals) {    hasFormals=false;    buf.append('>');  }}  }
class C{  public static TermQueryBuilder termQuery(String name,long value){  return new TermQueryBuilder(name,value);}  }
class C{  public void addSeedMaterial(byte[] seed){synchronized (this) {    windowCount=0;    generator.addSeedMaterial(seed);  }}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public int stepToNextScreenEvent() throws JavaRosaException {  try {    if (getEvent() != FormEntryController.EVENT_END_OF_FORM) {      int event;      group_skip:       do {        event=stepToNextEvent(FormController.STEP_OVER_GROUP);switch (event) {case FormEntryController.EVENT_QUESTION:case FormEntryController.EVENT_END_OF_FORM:          break group_skip;case FormEntryController.EVENT_PROMPT_NEW_REPEAT:        break group_skip;case FormEntryController.EVENT_GROUP:case FormEntryController.EVENT_REPEAT:      if (indexIsInFieldList() && getQuestionPrompts().length != 0) {        break group_skip;      }    break;case FormEntryController.EVENT_REPEAT_JUNCTURE:  Log.i(t,"repeat juncture: " + getFormIndex().getReference());break;default :Log.w(t,"JavaRosa added a new EVENT type and didn't tell us... shame on them.");break;}} while (event != FormEntryController.EVENT_END_OF_FORM);}return getEvent();} catch (RuntimeException e) {throw new JavaRosaException(e);}}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.376 -0500",hash_original_method="5B88EE78CFC8C735E181024E07BA80C7",hash_generated_method="208C9AE8277836D87A163F35AC278E5D") public static boolean stateSetMatches(int[] stateSpec,int[] stateSet){  if (stateSet == null) {    return (stateSpec == null || isWildCard(stateSpec));  }  int stateSpecSize=stateSpec.length;  int stateSetSize=stateSet.length;  for (int i=0; i < stateSpecSize; i++) {    int stateSpecState=stateSpec[i];    if (stateSpecState == 0) {      return true;    }    final boolean mustMatch;    if (stateSpecState > 0) {      mustMatch=true;    } else {      mustMatch=false;      stateSpecState=-stateSpecState;    }    boolean found=false;    for (int j=0; j < stateSetSize; j++) {      final int state=stateSet[j];      if (state == 0) {        if (mustMatch) {          return false;        } else {          break;        }      }      if (state == stateSpecState) {        if (mustMatch) {          found=true;          break;        } else {          return false;        }      }    }    if (mustMatch && !found) {      return false;    }  }  return true;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public boolean removeParameter(final String name){  return this.local.removeParameter(name);}  }
class C{  @Override public boolean isDataFlavorSupported(DataFlavor dataFlavor){  return (dataFlavor == DataFlavor.javaFileListFlavor) || (dataFlavor == DataFlavor.stringFlavor);}  }
class C{  @Override public void render(Entity entity,float p_78088_2_,float p_78088_3_,float p_78088_4_,float p_78088_5_,float p_78088_6_,float p_78088_7_){  this.setRotationAngles(p_78088_2_,p_78088_3_,p_78088_4_,p_78088_5_,p_78088_6_,p_78088_7_,entity);  this.treeHead.render(p_78088_7_);  this.treeBody.render(p_78088_7_);  this.treeLeftLeg.render(p_78088_7_);  this.treeRightLeg.render(p_78088_7_);  this.treeRightArm.render(p_78088_7_);  this.treeLeftArm.render(p_78088_7_);}  }
class C{  public String toStringEscaped(char[] enabledChars){  StringBuilder result=new StringBuilder();  for (int i=0; i < this.length(); i++) {    if (this.chars[i] == '\\') {      result.append('\\');    } else {      for (      char character : enabledChars) {        if (this.chars[i] == character && this.wasEscaped[i]) {          result.append('\\');          break;        }      }    }    result.append(this.chars[i]);  }  return result.toString();}  }
class C{  private void closePaths(){  for (int i=0; i < series.length; i++) {    int first=getFirstPopulatedChartDataIndex(i);    if (first != -1) {      int xCorner=getX(chartData.get(first)[0]);      int yCorner=topBorder + effectiveHeight;      ChartValueSeries chartValueSeries=series[i];      Path path=chartValueSeries.getPath();      path.lineTo(getX(chartData.get(chartData.size() - 1)[0]),yCorner);      path.lineTo(xCorner,yCorner);      path.lineTo(xCorner,getY(chartValueSeries,chartData.get(first)[i + 1]));    }  }}  }
class C{  @SuppressWarnings("rawtypes") @Override public <OutputT extends POutput,InputT extends PInput>OutputT apply(PTransform<InputT,OutputT> transform,InputT input){  if (transform instanceof GroupByKey) {    return (OutputT)((PCollection)input).apply(new GroupByKeyViaGroupByKeyOnly((GroupByKey)transform));  } else {    return super.apply(transform,input);  }}  }
class C{  public SheetEvent(JSheet source){  super(source);}  }
class C{  public static boolean isLocked(final File lockFile){  try (final FileLockHandle handle=new FileLockHandle(lockFile)){    return !handle.tryLock();  } catch (  final OverlappingFileLockException e) {    return true;  }catch (  final IOException e) {    return false;  }}  }
class C{  public final boolean a8Castle(){  return (castleMask & (1 << A8_CASTLE)) != 0;}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Entry processor example started.");    try (IgniteCache<Integer,Integer> cache=ignite.getOrCreateCache(CACHE_NAME)){      populateEntriesWithInvoke(cache);      incrementEntriesWithInvokeAll(cache);    }  finally {      ignite.destroyCache(CACHE_NAME);    }  } }  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  protected StatementImpl(){  super();}  }
class C{  @Override public void pause(boolean shouldBePaused){}  }
class C{  protected ManagedSystemMemberImpl(AdminDistributedSystemImpl system,GemFireVM vm) throws AdminException {  super(system,vm);  this.controller=system.getEntityController();}  }
class C{  private boolean checkForUpdate() throws SAXException, IOException, ParserConfigurationException {  plugin.getLogger().info("Checking for plugin update...");  URL filesFeed=new URL(BUKKIT_URL);  Document document=null;  boolean bukkit=true;  try (InputStream inputBukkit=filesFeed.openConnection().getInputStream()){    document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(inputBukkit);  } catch (  Exception eB) {    bukkit=false;    filesFeed=new URL(GITHUB_URL);    try (InputStream inputGithub=filesFeed.openConnection().getInputStream()){      document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(inputGithub);    }   }  if (bukkit) {    Node latestFile=document.getElementsByTagName("item").item(0);    NodeList children=latestFile.getChildNodes();    version=children.item(1).getTextContent().replaceAll("[a-zA-Z ]","");  } else {    version=document.getElementsByTagName("version").item(0).getTextContent();  }  if (version.equals(plugin.getDescription().getVersion()))   return false;  String[] pluginVersion=plugin.getDescription().getVersion().split("\\.");  String[] onlineVersion=version.split("\\.");  for (int i=0; i < Math.min(pluginVersion.length,onlineVersion.length); i++) {    if (Integer.parseInt(pluginVersion[i]) > Integer.parseInt(onlineVersion[i]))     return false; else     if (Integer.parseInt(pluginVersion[i]) < Integer.parseInt(onlineVersion[i])) {      logUpdate();      return true;    }  }  if (pluginVersion.length < onlineVersion.length) {    logUpdate();    return true;  }  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DLSequence(ASN1EncodableVector v){  super(v);}  }
class C{  private void serializeHeader(FontOutputStream fos,List<Header> tableHeaders) throws IOException {  fos.writeFixed(this.sfntVersion);  fos.writeUShort(tableHeaders.size());  int log2OfMaxPowerOf2=FontMath.log2(tableHeaders.size());  int searchRange=2 << (log2OfMaxPowerOf2 - 1 + 4);  fos.writeUShort(searchRange);  fos.writeUShort(log2OfMaxPowerOf2);  fos.writeUShort((tableHeaders.size() * 16) - searchRange);  List<Header> sortedHeaders=new ArrayList<Header>(tableHeaders);  Collections.sort(sortedHeaders,Header.COMPARATOR_BY_TAG);  for (  Header record : sortedHeaders) {    fos.writeULong(record.tag());    fos.writeULong(record.checksum());    fos.writeULong(record.offset());    fos.writeULong(record.length());  }}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  public synchronized Entry bot() throws IOException {  return po(this.stack.firstKey(),false);}  }
class C{  public E[] toArray(E[] a){  if (a.length != array.length()) {    throw new ElasticsearchGenerationException("AtomicArrays can only be copied to arrays of the same size");  }  for (int i=0; i < array.length(); i++) {    a[i]=array.get(i);  }  return a;}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  public boolean contains(Object x){  return elems.contains(x);}  }
class C{  void startAnimation(){  if (getVisibility() != VISIBLE) {    return;  }  if (mIndeterminateDrawable instanceof Animatable) {    mShouldStartAnimationDrawable=true;    mHasAnimation=false;  } else {    mHasAnimation=true;    if (mInterpolator == null) {      mInterpolator=new LinearInterpolator();    }    if (mTransformation == null) {      mTransformation=new Transformation();    } else {      mTransformation.clear();    }    if (mAnimation == null) {      mAnimation=new AlphaAnimation(0.0f,1.0f);    } else {      mAnimation.reset();    }    mAnimation.setRepeatMode(mBehavior);    mAnimation.setRepeatCount(Animation.INFINITE);    mAnimation.setDuration(mDuration);    mAnimation.setInterpolator(mInterpolator);    mAnimation.setStartTime(Animation.START_ON_FIRST_FRAME);  }  postInvalidate();}  }
class C{  public double projectionFactor(Coordinate p){  if (p.equals(p0))   return 0.0;  if (p.equals(p1))   return 1.0;  double dx=p1.x - p0.x;  double dy=p1.y - p0.y;  double len=dx * dx + dy * dy;  if (len <= 0.0)   return Double.NaN;  double r=((p.x - p0.x) * dx + (p.y - p0.y) * dy) / len;  return r;}  }
class C{  @Override public TermStepInfo execute(String[] params){  try {    TermStepInfo termStepInfo=new TermStepInfo();    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String subPid=commandLine.getOptionValue("sub-process-id");    LOGGER.debug("subPid is " + subPid);    termStepInfo.setSubProcessId(Integer.parseInt(subPid));    stepDAO.termStep(Integer.parseInt(subPid));    return termStepInfo;  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.STRING_LITERAL;}  }
class C{  private JMenuBar menuBar(){  JMenu edit=new JMenu("Edit");  JMenuItem copy=new JMenuItem(new CopySubgraphAction(this));  copy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,ActionEvent.CTRL_MASK));  edit.add(copy);  JMenuBar menuBar=new JMenuBar();  menuBar.add(edit);  return menuBar;}  }
class C{  public void testFieldZERO(){  String oneS="0";  double oneD=0.0;  assertEquals("incorrect string value",oneS,BigDecimal.ZERO.toString());  assertEquals("incorrect double value",oneD,BigDecimal.ZERO.doubleValue(),0);}  }
class C{  @Override public String toString(){  String type=null;  if (getOperatorDescription() != null) {    type=getOperatorClassName();  } else {    type=getClass().getName();  }  return (breakPoint[0] || breakPoint[1] ? "* " : "") + name + " ("+ type+ ")";}  }
class C{  public void primitivePaint(Graphics2D g2d){  if (source != null) {    source.paint(g2d);  }}  }
class C{  public static UpdateStatement orIgnore(CharSequence table){  return produce(table,"IGNORE");}  }
class C{  static boolean mayRequireResources(Field f){  assert f != null;  return f.getName().startsWith("this$") || f.getName().startsWith("val$") || Callable.class.isAssignableFrom(f.getType())|| Runnable.class.isAssignableFrom(f.getType())|| IgniteClosure.class.isAssignableFrom(f.getType());}  }
class C{  public String toString(){  return "MCurrency[" + getC_Currency_ID() + "-"+ getISO_Code()+ "-"+ getCurSymbol()+ ","+ getDescription()+ ",Precision="+ getStdPrecision()+ "/"+ getCostingPrecision();}  }
class C{  public void encode(String value,ByteBuffer buffer) throws BufferOverflowException {  if (value == null) {    buffer.put((byte)(0x80));    return;  }  int charCount=value.length();  if (charCount == 0) {    buffer.put((byte)(1 | 0x80));    return;  }  int position=buffer.position();  boolean ascii=true;  if (charCount > 1) {    for (int i=0; i < charCount; i++) {      int c=value.charAt(i);      if (c > 127) {        ascii=false;        break;      }      buffer.put((byte)c);    }  } else {    ascii=false;  }  if (ascii) {    position=buffer.position();    buffer.put(position - 1,(byte)(buffer.get(position - 1) | 0x80));  } else {    buffer.position(position);    writeLength(charCount + 1,buffer);    int charIndex=0;    for (; charIndex < charCount; charIndex++) {      int c=value.charAt(charIndex);      if (c > 127)       break;      buffer.put((byte)c);    }    writeUTF8String(value,charCount,charIndex,buffer);  }}  }
class C{  private Bytestream createStreamHostRequest(String proxy){  Bytestream request=new Bytestream();  request.setType(IQ.Type.GET);  request.setTo(proxy);  return request;}  }
class C{  public static boolean isVolumeRP(VolumeRestRep vol){  if (vol.getProtection() != null && vol.getProtection().getRpRep() != null) {    return true;  }  return false;}  }
class C{  protected void createVisibilityActions(){  Enumeration<TableColumn> columns=table.getColumnModel().getColumns();  while (columns.hasMoreElements()) {    TableColumn column=columns.nextElement();    if (column.getHeaderValue() != null) {      ColumnVisibilityAction action=createColumnVisibilityAction(column);      if (action != null) {        getColumnVisibilityActions().add(action);      }    }  }}  }
class C{  public String toString(){  return str();}  }
class C{  public MapObject(Object id,Drawable drawable,int x,int y,int pivotX,int pivotY,boolean isTouchable,boolean isScalable){  this.id=id;  this.drawable=drawable;  pos=new Point(x,y);  posScaled=new Point();  this.pivotPoint=new Point(pivotX,pivotY);  this.isTouchable=isTouchable;  this.isScalable=isScalable;  this.scale=1.0f;  this.touchRect=new Rect();}  }
class C{  public static void saveCredentialOrFinish(Activity activity,int requestCode,FlowParameters parameters,FirebaseUser firebaseUser,@Nullable String password,@Nullable String provider){  if (!parameters.smartLockEnabled) {    finishActivity(activity);    return;  }  if (!PlayServicesHelper.getInstance(activity).isPlayServicesAvailable()) {    finishActivity(activity);    return;  }  Intent saveCredentialIntent=SaveCredentialsActivity.createIntent(activity,parameters,firebaseUser,password,provider);  activity.startActivityForResult(saveCredentialIntent,requestCode);}  }
class C{  protected void openButton(){  DecoderFile decoderFile=DecoderIndexFile.instance().fileFromTitle((String)decoderBox.getSelectedItem());  if (log.isDebugEnabled()) {    log.debug("decoder file: " + decoderFile.getFilename());  }  RosterEntry re=new RosterEntry();  re.setDecoderFamily(decoderFile.getFamily());  re.setDecoderModel(decoderFile.getModel());  re.setId(Bundle.getMessage("LabelNewDecoder"));  Roster.getDefault().addEntry(re);  startProgrammer(decoderFile,re);}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  @RequestProcessing(value="/admin/tag/{tagId}",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void updateTag(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String tagId) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/tag.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  JSONObject tag=tagQueryService.getTag(tagId);  final String oldTitle=tag.optString(Tag.TAG_TITLE);  final Enumeration<String> parameterNames=request.getParameterNames();  while (parameterNames.hasMoreElements()) {    final String name=parameterNames.nextElement();    final String value=request.getParameter(name);    tag.put(name,value);  }  final String newTitle=tag.optString(Tag.TAG_TITLE);  if (oldTitle.equalsIgnoreCase(newTitle)) {    tagMgmtService.updateTag(tagId,tag);  }  tag=tagQueryService.getTag(tagId);  dataModel.put(Tag.TAG,tag);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  public V remove(Object key){  int hash=hash(key.hashCode());  Segment<K,V> s=segmentForHash(hash);  return s == null ? null : s.remove(key,hash,null);}  }
class C{  private void printConfig(){  if (!configShown && logger.isDebugEnabled()) {    configShown=true;    StringBuffer sb=new StringBuffer();    sb.append("SSL Configuration: \n");    sb.append("  ssl-enabled = " + this.sslConfig.isEnabled()).append("\n");    for (    String key : System.getProperties().stringPropertyNames()) {      if (key.startsWith("javax.net.ssl")) {        sb.append("  ").append(key).append(" = ").append(System.getProperty(key)).append("\n");      }    }    logger.debug(sb.toString());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Instant watermarkHold(){  long min=Long.MAX_VALUE;  for (  Instant hold : watermarkHolds.values()) {    min=Math.min(min,hold.getMillis());  }  return new Instant(min);}  }
class C{  @Override protected Variable selectUnassignedVariable(Assignment assignment,CSP csp){switch (selectionStrategy) {case MRV:    return applyMRVHeuristic(csp,assignment).get(0);case MRV_DEG:  List<Variable> vars=applyMRVHeuristic(csp,assignment);return applyDegreeHeuristic(vars,assignment,csp).get(0);default :for (Variable var : csp.getVariables()) {if (!(assignment.hasAssignmentFor(var))) return var;}}return null;}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TSETTER___GET_DECLARED_TYPE_REF:    return getDeclaredTypeRef();case TypesPackage.TSETTER___IS_READABLE:  return isReadable();case TypesPackage.TSETTER___IS_WRITEABLE:return isWriteable();case TypesPackage.TSETTER___GET_MEMBER_TYPE:return getMemberType();case TypesPackage.TSETTER___GET_MEMBER_AS_STRING:return getMemberAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public double[] computeLocal(int states[][],int sourceCol,int destCol){  initialise();  addObservations(states,sourceCol,destCol);  return computeLocalFromPreviousObservations(states,sourceCol,destCol);}  }
class C{  @Override protected void onPreExecute(){  recommendationsListLabel.setText(R.string.retrievingRecommendations);  PlaceDetailsActivity.this.setProgressBarIndeterminateVisibility(true);}  }
class C{  protected int parseInt(String value){  try {    return Integer.parseInt(value);  } catch (  NumberFormatException nfex) {    throw new CSSellyException(nfex);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public T caseAbstractMethodDeclaration_(AbstractMethodDeclaration_ object){  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String decodeString(String s){  int backSlashIdx=s.indexOf('\\');  if (backSlashIdx == -1) {    return s;  }  int startIdx=0;  int sLength=s.length();  StringBuilder sb=new StringBuilder(sLength);  while (backSlashIdx != -1) {    sb.append(s.substring(startIdx,backSlashIdx));    if (backSlashIdx + 1 >= sLength) {      throw new IllegalArgumentException("Unescaped backslash in: " + s);    }    char c=s.charAt(backSlashIdx + 1);    if (c == 't') {      sb.append('\t');      startIdx=backSlashIdx + 2;    } else     if (c == 'r') {      sb.append('\r');      startIdx=backSlashIdx + 2;    } else     if (c == 'n') {      sb.append('\n');      startIdx=backSlashIdx + 2;    } else     if (c == '"') {      sb.append('"');      startIdx=backSlashIdx + 2;    } else     if (c == '>') {      sb.append('>');      startIdx=backSlashIdx + 2;    } else     if (c == '\\') {      sb.append('\\');      startIdx=backSlashIdx + 2;    } else     if (c == 'u') {      if (backSlashIdx + 5 >= sLength) {        throw new IllegalArgumentException("Incomplete Unicode escape sequence in: " + s);      }      String xx=s.substring(backSlashIdx + 2,backSlashIdx + 6);      try {        c=(char)Integer.parseInt(xx,16);        sb.append(c);        startIdx=backSlashIdx + 6;      } catch (      NumberFormatException e) {        throw new IllegalArgumentException("Illegal Unicode escape sequence '\\u" + xx + "' in: "+ s);      }    } else     if (c == 'U') {      if (backSlashIdx + 9 >= sLength) {        throw new IllegalArgumentException("Incomplete Unicode escape sequence in: " + s);      }      String xx=s.substring(backSlashIdx + 2,backSlashIdx + 10);      try {        c=(char)Integer.parseInt(xx,16);        sb.append(c);        startIdx=backSlashIdx + 10;      } catch (      NumberFormatException e) {        throw new IllegalArgumentException("Illegal Unicode escape sequence '\\U" + xx + "' in: "+ s);      }    } else {      throw new IllegalArgumentException("Unescaped backslash in: " + s);    }    backSlashIdx=s.indexOf('\\',startIdx);  }  sb.append(s.substring(startIdx));  return sb.toString();}  }
class C{  private CellSignalStrengthLte(Parcel in){  mSignalStrength=in.readInt();  mRsrp=in.readInt();  mRsrq=in.readInt();  mRssnr=in.readInt();  mCqi=in.readInt();  mTimingAdvance=in.readInt();  if (DBG)   log("CellSignalStrengthLte(Parcel): " + toString());}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.OPERATION_SOURCE;}  }
class C{  void handleScrollEvent(final int x,final int y,final int modifierFlags,final double deltaX,final double deltaY,final int scrollPhase){  final int buttonNumber=CocoaConstants.kCGMouseButtonCenter;  int jmodifiers=NSEvent.nsToJavaMouseModifiers(buttonNumber,modifierFlags);  final boolean isShift=(jmodifiers & InputEvent.SHIFT_DOWN_MASK) != 0;  int roundDeltaX=deltaAccumulatorX.getRoundedDelta(deltaX,scrollPhase);  int roundDeltaY=deltaAccumulatorY.getRoundedDelta(deltaY,scrollPhase);  if (!isShift && (deltaY != 0.0 || roundDeltaY != 0)) {    dispatchScrollEvent(x,y,jmodifiers,roundDeltaY,deltaY);  }  final double delta=isShift && deltaY != 0.0 ? deltaY : deltaX;  final int roundDelta=isShift && roundDeltaY != 0 ? roundDeltaY : roundDeltaX;  if (delta != 0.0 || roundDelta != 0) {    jmodifiers|=InputEvent.SHIFT_DOWN_MASK;    dispatchScrollEvent(x,y,jmodifiers,roundDelta,delta);  }}  }
class C{  public Pair<String,String> objectToString(final long shopId,final String currency,final BigDecimal regularPrice){  return new Pair<String,String>("facet_price_" + shopId + "_"+ currency,moneyBridge.objectToString(regularPrice));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:55.024 -0500",hash_original_method="3EDC66A2B3D8F14E5C835683106EF1A9",hash_generated_method="8A1497FE1DF985F390DD86C438698A75") public static boolean hasPendingWork(){  return !sPendingWorkFinishers.isEmpty();}  }
class C{  public EpsilonBoxDominanceArchive(EpsilonBoxDominanceComparator comparator,Iterable<? extends Solution> iterable){  super(comparator,iterable);}  }
class C{  public ByteOrder order(){  return order;}  }
class C{  private static DefaultTestCase buildTestCase0() throws NoSuchMethodException, SecurityException, ClassNotFoundException {  TestCaseBuilder builder=new TestCaseBuilder();  VariableReference int0=builder.appendIntPrimitive(10);  VariableReference int1=builder.appendIntPrimitive(10);  VariableReference int2=builder.appendIntPrimitive(10);  Class<?> fooClass=TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(Properties.TARGET_CLASS);  Method barMethod=fooClass.getMethod("bar",int.class,int.class,int.class);  builder.appendMethod(null,barMethod,int0,int1,int2);  return builder.getDefaultTestCase();}  }
class C{  public void registerAnalyzed(String fqn){  getOrCreateEntry(fqn);}  }
class C{  @SuppressWarnings("unchecked") public boolean equals(Object other){  if (other == this)   return true;  if (other instanceof SIPHeaderList) {    SIPHeaderList<SIPHeader> that=(SIPHeaderList<SIPHeader>)other;    if (this.hlist == that.hlist)     return true; else     if (this.hlist == null)     return that.hlist == null || that.hlist.size() == 0;    return this.hlist.equals(that.hlist);  }  return false;}  }
class C{  public String generateAuthorizationHeader(String method,String requestUri,String body){  return "Authorization: ".concat(generateAuthorizationHeaderValue(method,requestUri,body));}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  public void addAuthorativeAnswer(DNSRecord rec) throws IOException {  MessageOutputStream record=new MessageOutputStream(512,this);  record.writeRecord(rec,0);  byte[] byteArray=record.toByteArray();  record.close();  if (byteArray.length < this.availableSpace()) {    _authoritativeAnswers.add(rec);    _authoritativeAnswersBytes.write(byteArray,0,byteArray.length);  } else {    throw new IOException("message full");  }}  }
class C{  public BlockFactory(String id,Supplier<Block> constructor,EventListener<BlockEvent.Register> postCreate){  super(id,constructor);  postCreate(postCreate);}  }
class C{  @Override public void beginTransaction(){  throw new UnsupportedOperationException("Transaction Unsupported.");}  }
class C{  protected Position_Impl(){  super();}  }
class C{  private void readObject(){}  }
class C{  @Override public void update(BasicCamera camera){}  }
class C{  protected double gain(double[][] dist,double priorVal){  return priorVal - ContingencyTables.entropyConditionedOnRows(dist);}  }
class C{  public void recordBounds(final PlanetModel planetModel,final LatLonBounds boundsInfo,final Membership... bounds){  final double A=this.x;  final double B=this.y;  final double C=this.z;  if (!boundsInfo.checkNoTopLatitudeBound() || !boundsInfo.checkNoBottomLatitudeBound()) {    if ((Math.abs(A) >= MINIMUM_RESOLUTION || Math.abs(B) >= MINIMUM_RESOLUTION)) {      final Plane verticalPlane=constructNormalizedZPlane(A,B);      final GeoPoint[] points=findIntersections(planetModel,verticalPlane,bounds,NO_BOUNDS);      for (      final GeoPoint point : points) {        addPoint(boundsInfo,bounds,point);      }    } else {      final GeoPoint[] points=findIntersections(planetModel,normalXPlane,NO_BOUNDS,NO_BOUNDS);      boundsInfo.addZValue(points[0]);    }  }  if (!boundsInfo.checkNoLongitudeBound()) {    double a;    double b;    double c;    if (Math.abs(C) < MINIMUM_RESOLUTION) {      if (Math.abs(D) >= MINIMUM_RESOLUTION) {        if (Math.abs(A) > Math.abs(B)) {          a=B * B * planetModel.inverseAbSquared + A * A * planetModel.inverseAbSquared;          b=2.0 * B * D* planetModel.inverseAbSquared;          c=D * D * planetModel.inverseAbSquared - A * A;          double sqrtClause=b * b - 4.0 * a * c;          if (Math.abs(sqrtClause) < MINIMUM_RESOLUTION_SQUARED) {            double y0=-b / (2.0 * a);            double x0=(-D - B * y0) / A;            double z0=0.0;            addPoint(boundsInfo,bounds,new GeoPoint(x0,y0,z0));          } else           if (sqrtClause > 0.0) {            double sqrtResult=Math.sqrt(sqrtClause);            double denom=1.0 / (2.0 * a);            double Hdenom=1.0 / A;            double y0a=(-b + sqrtResult) * denom;            double y0b=(-b - sqrtResult) * denom;            double x0a=(-D - B * y0a) * Hdenom;            double x0b=(-D - B * y0b) * Hdenom;            double z0a=0.0;            double z0b=0.0;            addPoint(boundsInfo,bounds,new GeoPoint(x0a,y0a,z0a));            addPoint(boundsInfo,bounds,new GeoPoint(x0b,y0b,z0b));          }        } else {          a=B * B * planetModel.inverseAbSquared + A * A * planetModel.inverseAbSquared;          b=2.0 * A * D* planetModel.inverseAbSquared;          c=D * D * planetModel.inverseAbSquared - B * B;          double sqrtClause=b * b - 4.0 * a * c;          if (Math.abs(sqrtClause) < MINIMUM_RESOLUTION_SQUARED) {            double x0=-b / (2.0 * a);            double y0=(-D - A * x0) / B;            double z0=0.0;            addPoint(boundsInfo,bounds,new GeoPoint(x0,y0,z0));          } else           if (sqrtClause > 0.0) {            double sqrtResult=Math.sqrt(sqrtClause);            double denom=1.0 / (2.0 * a);            double Idenom=1.0 / B;            double x0a=(-b + sqrtResult) * denom;            double x0b=(-b - sqrtResult) * denom;            double y0a=(-D - A * x0a) * Idenom;            double y0b=(-D - A * x0b) * Idenom;            double z0a=0.0;            double z0b=0.0;            addPoint(boundsInfo,bounds,new GeoPoint(x0a,y0a,z0a));            addPoint(boundsInfo,bounds,new GeoPoint(x0b,y0b,z0b));          }        }      }    } else {      double E=A * A * planetModel.inverseCSquared + C * C * planetModel.inverseAbSquared;      double F=B * B * planetModel.inverseCSquared + C * C * planetModel.inverseAbSquared;      double G=2.0 * A * B* planetModel.inverseCSquared;      double H=2.0 * A * D* planetModel.inverseCSquared;      double I=2.0 * B * D* planetModel.inverseCSquared;      double J=D * D * planetModel.inverseCSquared - C * C;      if (Math.abs(J) >= MINIMUM_RESOLUTION && J > 0.0) {        if (Math.abs(H) > Math.abs(I)) {          a=E * I * I - G * H * I + F * H * H;          b=4.0 * E * I* J - 2.0 * G * H* J;          c=4.0 * E * J* J - J * H * H;          double sqrtClause=b * b - 4.0 * a * c;          if (Math.abs(sqrtClause) < MINIMUM_RESOLUTION_CUBED) {            double y0=-b / (2.0 * a);            double x0=(-2.0 * J - I * y0) / H;            double z0=(-A * x0 - B * y0 - D) / C;            addPoint(boundsInfo,bounds,new GeoPoint(x0,y0,z0));          } else           if (sqrtClause > 0.0) {            double sqrtResult=Math.sqrt(sqrtClause);            double denom=1.0 / (2.0 * a);            double Hdenom=1.0 / H;            double Cdenom=1.0 / C;            double y0a=(-b + sqrtResult) * denom;            double y0b=(-b - sqrtResult) * denom;            double x0a=(-2.0 * J - I * y0a) * Hdenom;            double x0b=(-2.0 * J - I * y0b) * Hdenom;            double z0a=(-A * x0a - B * y0a - D) * Cdenom;            double z0b=(-A * x0b - B * y0b - D) * Cdenom;            addPoint(boundsInfo,bounds,new GeoPoint(x0a,y0a,z0a));            addPoint(boundsInfo,bounds,new GeoPoint(x0b,y0b,z0b));          }        } else {          a=E * I * I - G * H * I + F * H * H;          b=4.0 * F * H* J - 2.0 * G * I* J;          c=4.0 * F * J* J - J * I * I;          double sqrtClause=b * b - 4.0 * a * c;          if (Math.abs(sqrtClause) < MINIMUM_RESOLUTION_CUBED) {            double x0=-b / (2.0 * a);            double y0=(-2.0 * J - H * x0) / I;            double z0=(-A * x0 - B * y0 - D) / C;            addPoint(boundsInfo,bounds,new GeoPoint(x0,y0,z0));          } else           if (sqrtClause > 0.0) {            double sqrtResult=Math.sqrt(sqrtClause);            double denom=1.0 / (2.0 * a);            double Idenom=1.0 / I;            double Cdenom=1.0 / C;            double x0a=(-b + sqrtResult) * denom;            double x0b=(-b - sqrtResult) * denom;            double y0a=(-2.0 * J - H * x0a) * Idenom;            double y0b=(-2.0 * J - H * x0b) * Idenom;            double z0a=(-A * x0a - B * y0a - D) * Cdenom;            double z0b=(-A * x0b - B * y0b - D) * Cdenom;            addPoint(boundsInfo,bounds,new GeoPoint(x0a,y0a,z0a));            addPoint(boundsInfo,bounds,new GeoPoint(x0b,y0b,z0b));          }        }      }    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean handleMessage(Message m,Object object){  if (super.handleMessage(m,object))   return true;  if (m.getType().equals("test")) {    System.out.println("Received: " + object);    m.setReply("Fine thanks.");    return true;  }  return false;}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  public boolean isChanged(){  return m_changed;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_Start:    return stateVector[0] == State.main_region_Start;case main_region_A:  return stateVector[0] == State.main_region_A;case main_region_B:return stateVector[0] == State.main_region_B;default :return false;}}  }
class C{  private synchronized static Map<String,WeaponOrder> loadWeaponOrderFile() throws IOException {  Map<String,WeaponOrder> weapOrderMap=new HashMap<>();  String path=CUSTOM_WEAPON_ORDER_FILENAME;  File file=new File(Configuration.configDir(),path);  if (!file.exists() || !file.isFile()) {    System.err.println("WARN: Could not load custom weapon orders " + "from " + path);    return weapOrderMap;  }  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  StringBuilder log=new StringBuilder();  try {    DocumentBuilder builder=dbf.newDocumentBuilder();    log.append("Parsing ").append(path);    Document doc=builder.parse(file);    log.append("\n...Parsing finished.");    NodeList listOfEntries=doc.getElementsByTagName(UNIT);    int totalEntries=listOfEntries.getLength();    log.append("\n\tTotal number of custom weapon order entries: ").append(totalEntries);    for (int unitCount=0; unitCount < totalEntries; unitCount++) {      Element unitList=(Element)listOfEntries.item(unitCount);      Element unitIdElement=(Element)unitList.getElementsByTagName(ID).item(0);      if (unitIdElement == null) {        log.append("\n\tMissing <" + ID + "> element #").append(unitCount);        continue;      }      String unitId=unitIdElement.getTextContent();      Element orderTypeElement=(Element)unitList.getElementsByTagName(ORDER_TYPE).item(0);      if (orderTypeElement == null) {        log.append("\n\tMissing <" + ORDER_TYPE + "> element #").append(unitCount);        continue;      }      Element weaponListElement=(Element)unitList.getElementsByTagName(WEAPON_LIST).item(0);      if (weaponListElement == null) {        log.append("\n\tMissing <" + WEAPON_LIST + "> element #").append(unitCount);        continue;      }      Element orderListElement=(Element)unitList.getElementsByTagName(ORDER_LIST).item(0);      if (orderListElement == null) {        log.append("\n\tMissing <" + ORDER_LIST + "> element #").append(unitCount);        continue;      }      WeaponOrder weapOrder=new WeaponOrder();      weapOrder.orderType=WeaponSortOrder.valueOf(orderTypeElement.getTextContent());      if (weapOrder.orderType == WeaponSortOrder.CUSTOM) {        String weaponList[]=weaponListElement.getTextContent().split(",");        String orderList[]=orderListElement.getTextContent().split(",");        assert (weaponList.length == orderList.length);        for (int i=0; i < weaponList.length; i++) {          weapOrder.customWeaponOrderMap.put(Integer.parseInt(weaponList[i]),Integer.parseInt(orderList[i]));        }      }      weapOrderMap.put(unitId,weapOrder);    }    return weapOrderMap;  } catch (  Exception e) {    throw new IOException(e);  } finally {    System.out.println(log);  }}  }
class C{  public final void testGetPrivateExponent(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getPrivateExponent()));}  }
class C{  public Quarter(){  this(new Date());}  }
class C{  public TopDocs search(BufferedImage img,String indexPath) throws IOException {  ImageSearcher searcher=new GenericImageSearcher(numReferenceObjectsUsed,featureClass,featureFieldName);  ImageSearchHits hits=searcher.search(img,DirectoryReader.open(FSDirectory.open(new File(indexPath + "-ro"))));  StringBuilder sb=new StringBuilder(numReferenceObjectsUsed * 4);  for (int j=0; j < numReferenceObjectsUsed; j++) {    sb.append(hits.doc(j).getValues("ro-id")[0]);    sb.append(' ');  }  return scoreDocs(sb.toString(),DirectoryReader.open(FSDirectory.open(new File(indexPath))));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.CATCH_VARIABLE__BINDING_PATTERN:    return basicSetBindingPattern(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static SpannableString toSpannable(String text){  return toSpannable(new SpannableString(text));}  }
class C{  public static double[][] addVecToSet(double[][] vecSet,double[] addVec){  int m=Matrix.getNumOfRows(vecSet);  int n=Matrix.getNumOfColumns(vecSet);  double[][] res=Matrix.newMatrix(m,n);  for (int i=0; i < m; ++i) {    double add=addVec[i];    for (int j=0; j < n; ++j) {      res[i][j]=vecSet[i][j] + add;    }  }  return (res);}  }
class C{  public void testBoundedInts(){  AtomicInteger fails=new AtomicInteger(0);  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=12345L;  for (int least=-15485867; least < MAX_INT_BOUND; least+=524959) {    for (int bound=least + 2; bound > least && bound < MAX_INT_BOUND; bound+=67867967) {      final int lo=least, hi=bound;      r.ints(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(fails.get(),0);}  }
class C{  private void seek(long pos){  if (SysProperties.CHECK && pos % Constants.FILE_BLOCK_SIZE != 0) {    DbException.throwInternalError("unaligned seek " + fileName + " pos "+ pos);  }  try {    file.position(pos);  } catch (  IOException e) {    throw DbException.convertIOException(e,fileName);  }}  }
class C{  protected void fillAcctSchema(Listbox cb){  for (int i=0; i < ASchemas.length; i++) {    KeyNamePair key=new KeyNamePair(ASchemas[i].getC_AcctSchema_ID(),ASchemas[i].getName());    cb.appendItem(key.getName(),key);  }}  }
class C{  public void clearCounts(){  initCounts();}  }
class C{  public void paintPasswordFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String poll(long timeout) throws InterruptedException {  lastTimeMillis=System.currentTimeMillis();  String result="<delta/>";synchronized (this) {    if (buffer.length() == 0) {      wait(timeout);    }    if (buffer.length() > 0) {      result="<delta>" + buffer.toString() + "</delta>";      buffer=new StringBuffer();    }    notify();  }  return result;}  }
class C{  public void addFooter() throws IOException {  requestAndResponse.print("\n<script type=\"application/json\" class=\"metaDataDictJson\">\n{\n");  final StringBuilder result=new StringBuilder();  boolean addedAnyYet=false;  for (  final KeyAndValue keyAndValue : metaData) {    addedAnyYet=JsonBuilder.addPropertyToJsonString(result,keyAndValue.value,addedAnyYet,keyAndValue.key);  }  requestAndResponse.print(result.toString());  requestAndResponse.print("\n}\n</script>\n");  if (!getNoTitle()) {    requestAndResponse.print("<div class=\"dragNsPane\" onmousedown=\"paneResizeOnMouseDown(event);\"></div>" + "<div class=\"dragEwPane\" onmousedown=\"paneResizeOnMouseDown(event);\"><div class=\"dragDiagPane\"></div></div>");  }  requestAndResponse.print("</div></div></div></div>");  final boolean onlyContent=getNoHeader();  if (!onlyContent) {    if (!requestAndResponse.skipFooter) {      requestAndResponse.print("</div><div id=\"top\"></div><div id=\"bottom\"></div>");      requestAndResponse.print("<div id=\"overlay\"></div>\n");      stashRequestUser(requestAndResponse);      requestAndResponse.print("\n<script type=\"application/json\" id=\"optionsDictJson\">\n");      requestAndResponse.print(requestAndResponse.userOptions);      requestAndResponse.print("\n</script>\n");      requestAndResponse.print("\n<script type=\"application/json\" id=\"sessionDictJson\">{\n");      if (httpsProxiedPort != null) {        requestAndResponse.print("\"httpsPort\":" + httpsProxiedPort.intValue() + ",");      } else       if (httpsPort != null) {        requestAndResponse.print("\"httpsPort\":" + httpsPort.intValue() + ",");      }      requestAndResponse.print("\"isSignedIn\":" + isUserSignedIn(requestAndResponse));      requestAndResponse.print("\n}</script>\n");      final boolean isForPageRefresh=getIsForPageRefresh();      if (!isForPageRefresh) {        requestAndResponse.print("<script type=\"text/javascript\">\n" + "maybeCallFinish();\n" + "</script>\n");        requestAndResponse.print("</body>" + "</html>");      }    }  }}  }
class C{  public Expression parseExpression(String sql){  parameters=New.arrayList();  initialize(sql);  read();  return readExpression();}  }
class C{  public void execute() throws Exception {  DataSet data=this.dataSet;  Mimbuild2 mimbuild=new Mimbuild2();  mimbuild.setAlpha(getParams().getDouble("alpha",0.001));  mimbuild.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));  if (getParams().getBoolean("includeThreeClusters",true)) {    mimbuild.setMinClusterSize(3);  } else {    mimbuild.setMinClusterSize(4);  }  Clusters clusters=(Clusters)getParams().get("clusters",null);  List<List<Node>> partition=ClusterUtils.clustersToPartition(clusters,data.getVariables());  List<String> latentNames=new ArrayList<>();  for (int i=0; i < clusters.getNumClusters(); i++) {    latentNames.add(clusters.getClusterName(i));  }  CovarianceMatrix cov=new CovarianceMatrix(data);  Graph structureGraph=mimbuild.search(partition,latentNames,cov);  GraphUtils.circleLayout(structureGraph,200,200,150);  GraphUtils.fruchtermanReingoldLayout(structureGraph);  ICovarianceMatrix latentsCov=mimbuild.getLatentsCov();  TetradLogger.getInstance().log("details","Latent covs = \n" + latentsCov);  Graph fullGraph=mimbuild.getFullGraph();  GraphUtils.circleLayout(fullGraph,200,200,150);  GraphUtils.fruchtermanReingoldLayout(fullGraph);  setResultGraph(fullGraph);  setFullGraph(fullGraph);  setClusters(MimUtils.convertToClusters(structureGraph));  setClusters(ClusterUtils.partitionToClusters(mimbuild.getClustering()));  setStructureGraph(structureGraph);  getParams().set("latentVariableNames",new ArrayList<>(latentNames));  this.covMatrix=latentsCov;  double p=mimbuild.getpValue();  TetradLogger.getInstance().log("details","\nStructure graph = " + structureGraph);  TetradLogger.getInstance().log("details",getLatentClustersString(fullGraph).toString());  TetradLogger.getInstance().log("details","P = " + p);  if (getParams().getBoolean("showMaxP",false)) {    if (p > getParams().getDouble("maxP",1.0)) {      getParams().set("maxP",p);      getParams().set("maxStructureGraph",structureGraph);      getParams().set("maxClusters",getClusters());      getParams().set("maxFullGraph",fullGraph);      getParams().set("maxAlpha",getParams().getDouble("alpha",0.001));    }    setStructureGraph((Graph)getParams().get("maxStructureGraph",null));    setFullGraph((Graph)getParams().get("maxFullGraph",null));    if (getParams().get("maxClusters",null) != null) {      setClusters((Clusters)getParams().get("maxClusters",null));    }    setResultGraph((Graph)getParams().get("maxFullGraph",null));    TetradLogger.getInstance().log("maxmodel","\nMAX Graph = " + getParams().get("maxStructureGraph",null));    TetradLogger.getInstance().log("maxmodel",getLatentClustersString((Graph)getParams().get("maxFullGraph",null)).toString());    TetradLogger.getInstance().log("maxmodel","MAX P = " + getParams().getDouble("maxP",1.0));  }}  }
class C{  String encodedUsername(){  if (username.isEmpty())   return "";  int usernameStart=scheme.length() + 3;  int usernameEnd=delimiterOffset(url,usernameStart,url.length(),":@");  return url.substring(usernameStart,usernameEnd);}  }
class C{  public void runUsingBootstrapper(Project project) throws Exception {  runUsing(P2BootstrapInstallation.latest().outsideJvmRunner(project));}  }
class C{  public static void showErrorNotification(Project project,String text){  showNotification(project,MessageType.ERROR,text);}  }
class C{  public double unweightedMacroFmeasure(){  weka.experiment.Stats rr=new weka.experiment.Stats();  for (int c=0; c < m_NumClasses; c++) {    if (numTruePositives(c) + numFalseNegatives(c) > 0) {      rr.add(fMeasure(c));    }  }  rr.calculateDerived();  return rr.mean;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E elementAt(int location){  if (location < elementCount) {    return (E)elementData[location];  }  throw arrayIndexOutOfBoundsException(location,elementCount);}  }
class C{  public SystemPermission(Type type){  this.type=type;}  }
class C{  public IllformedLocaleException(String message,int errorIndex){  super(message + ((errorIndex < 0) ? "" : " [at index " + errorIndex + "]"));  _errIdx=errorIndex;}  }
class C{  public int numberOfItems(){  return m_items.size();}  }
class C{  private void processAllLuns(StorageSystem system,VNXeApiClient apiClient,DbClient dbClient,Map<URI,List<String>> hostToVolumesMap,Map<String,Set<URI>> volumeToHostsMap,Map<String,URI> volumeToPoolMap,Map<String,URI> hostIdToHostURIMap) throws Exception {  List<VNXeLun> luns=apiClient.getAllLuns();  if (luns != null && !luns.isEmpty()) {    Map<String,StoragePool> pools=getStoragePoolMap(system,dbClient);    for (    VNXeLun lun : luns) {      String nativeGuid=NativeGUIDGenerator.generateNativeGuidForVolumeOrBlockSnapShot(system.getNativeGuid(),lun.getId());      if (DiscoveryUtils.checkStorageVolumeExistsInDB(dbClient,nativeGuid) != null) {        logger.info("Skipping volume {} as it is already managed by ViPR",nativeGuid);        continue;      }      StoragePool pool=getStoragePoolOfUnManagedObject(lun.getPool().getId(),system,pools);      if (pool != null) {        Set<URI> hostURIs=getHostURIs(lun,apiClient,dbClient,hostIdToHostURIMap);        volumeToHostsMap.put(lun.getId(),hostURIs);        for (        URI hostURI : hostURIs) {          List<String> volumes=hostToVolumesMap.get(hostURI);          if (volumes == null) {            volumes=new ArrayList<String>();            hostToVolumesMap.put(hostURI,volumes);          }          volumes.add(lun.getId());        }        volumeToPoolMap.put(lun.getId(),pool.getId());      } else {        logger.error("Skipping volume {} as its storage pool doesn't exist in ViPR",lun.getId());      }    }  } else {    logger.info("No luns found on the system: {}",system.getId());  }}  }
class C{  public static final Uri buildFolderUri(long folderId){  return ContentUris.withAppendedId(CONTENT_URI_DEFAULT_FOLDER,folderId);}  }
class C{  public EspUpgradeApkResult upgrade(){  JSONObject apkInfo=getNewestApkInfo();  if (apkInfo == null) {    log.debug("getNewestApkInfo() is null");    return EspUpgradeApkResult.NOT_FOUND;  }  String version;  String apkName;  try {    version=apkInfo.getString(KEY_APK_VERSION);    JSONObject apkJSON=apkInfo.getJSONArray(KEY_APK_FILES).getJSONObject(0);    apkName=apkJSON.getString(KEY_APK_NAME);  } catch (  JSONException je) {    je.printStackTrace();    return EspUpgradeApkResult.NOT_FOUND;  }catch (  IndexOutOfBoundsException iobe) {    iobe.printStackTrace();    return EspUpgradeApkResult.NOT_FOUND;  }  if (!checkApkVersion(version)) {    return EspUpgradeApkResult.LOWER_VERSION;  }  if (downloadNewestApk(version,apkName)) {    return EspUpgradeApkResult.UPGRADE_COMPLETE;  } else {    return EspUpgradeApkResult.DOWNLOAD_FAILED;  }}  }
class C{  public void tabMoved(long time,int id,int oldIndex,int newIndex){  reorderTab(id,oldIndex,newIndex,false);  updateVisualTabOrdering();  mUpdateHost.requestUpdate();}  }
class C{  synchronized public Class toClass() throws ClassNotFoundException, UtilEvalError {  if (asClass != null)   return asClass;  reset();  if (evalName.equals("var"))   return asClass=null;  Class clas=namespace.getClass(evalName);  if (clas == null) {    Object obj=null;    try {      obj=toObject(null,null,true);    } catch (    UtilEvalError e) {    }    ;    if (obj instanceof ClassIdentifier)     clas=((ClassIdentifier)obj).getTargetClass();  }  if (clas == null)   throw new ClassNotFoundException("Class: " + value + " not found in namespace");  asClass=clas;  return asClass;}  }
class C{  protected static boolean hasValue(final String[] array){  if (array != null && array.length > 0) {    for (    final String element : array) {      if (hasValue(element)) {        return true;      }    }  }  return false;}  }
class C{  public KafkaEmbedded(int count,boolean controlledShutdown,String... topics){  this(count,controlledShutdown,2,topics);}  }
class C{  public boolean isEMailVerified(){  return getEMailVerifyDate() != null && getEMailVerify() != null && getEMailVerify().length() > 0;}  }
class C{  public static Id parse(final String str){  final Id r=new Id();  r.fromString(str);  return r;}  }
class C{  public void editElement(final Object element,final String columnPropertyName){  final int columnIndex=TableViewerUtils.columnPropertyNameToColumnIndex(columnPropertyName,true,viewer);  viewer.editElement(element,columnIndex);}  }
class C{  protected void findKNearestNeighbours(int K,int sampleIndex,KdTreeNode node,int level,PriorityQueue<NeighbourNodeData> currentKBest){  int currentDim=level % totalDimensions;  double[][] data=dimensionToArray[currentDim];  int actualDim=dimensionToArrayIndex[currentDim];  double distOnThisDim=data[sampleIndex][actualDim] - data[node.indexOfThisPoint][actualDim];  double absDistOnThisDim;  if (normTypeToUse == EuclideanUtils.NORM_MAX_NORM) {    absDistOnThisDim=(distOnThisDim > 0) ? distOnThisDim : -distOnThisDim;  } else {    absDistOnThisDim=distOnThisDim * distOnThisDim;  }  NeighbourNodeData furthestCached=currentKBest.peek();  if ((node.indexOfThisPoint != sampleIndex) && ((currentKBest.size() < K) || (absDistOnThisDim < furthestCached.distance))) {    double maxNorm=0;    double[] norms=new double[originalDataSets.length];    for (int v=0; v < originalDataSets.length; v++) {      if (currentKBest.size() < K) {        norms[v]=norm(originalDataSets[v][sampleIndex],originalDataSets[v][node.indexOfThisPoint],normTypeToUse);      } else {        norms[v]=normWithAbort(originalDataSets[v][sampleIndex],originalDataSets[v][node.indexOfThisPoint],furthestCached.distance,normTypeToUse);      }      if (norms[v] > maxNorm) {        maxNorm=norms[v];        if (Double.isInfinite(maxNorm)) {          break;        }      }    }    if ((currentKBest.size() < K) || (maxNorm < furthestCached.distance)) {      if (currentKBest.size() == K) {        currentKBest.poll();      }      currentKBest.add(new NeighbourNodeData(node.indexOfThisPoint,norms,maxNorm));    }  }  KdTreeNode closestSubTree=null;  KdTreeNode furthestSubTree=null;  if (distOnThisDim < 0) {    closestSubTree=node.leftTree;    furthestSubTree=node.rightTree;  } else {    closestSubTree=node.rightTree;    furthestSubTree=node.leftTree;  }  if (closestSubTree != null) {    findKNearestNeighbours(K,sampleIndex,closestSubTree,level + 1,currentKBest);  }  furthestCached=currentKBest.peek();  if ((currentKBest.size() < K) || (absDistOnThisDim < furthestCached.distance)) {    if (furthestSubTree != null) {      findKNearestNeighbours(K,sampleIndex,furthestSubTree,level + 1,currentKBest);    }  }}  }
class C{  protected Optional<ChannelInstance> find(final By by){switch (by.getType()) {case ID:    return findById((String)by.getQualifier());case NAME:  return findByName((String)by.getQualifier());case COMPOSITE:{  final By[] bys=(By[])by.getQualifier();  for (  final By oneBy : bys) {    final Optional<ChannelInstance> result=find(oneBy);    if (result.isPresent()) {      return result;    }  }  return Optional.empty();}default :throw new IllegalArgumentException(String.format("Unknown locator type: %s",by.getType()));}}  }
class C{  protected void writeToRowFromAggregate(AbstractRecord record,Object object,Object attributeValue,AbstractSession session,WriteType writeType) throws DescriptorException {  if (attributeValue == null) {    if (this.isNullAllowed) {      writeNullReferenceRow(record);    } else {      throw DescriptorException.nullForNonNullAggregate(object,this);    }  } else   if (!session.isClassReadOnly(attributeValue.getClass())) {    getObjectBuilder(attributeValue,session).buildRow(record,attributeValue,session,writeType);  }}  }
class C{  @Override public String toString(){  return mediaType;}  }
class C{  private void initialize(){  if (!cacheDir.exists()) {    cacheDir.mkdirs();  }  File[] files=cacheDir.listFiles();  if (files == null) {    return;  }  for (int i=0; i < files.length; i++) {    File file=files[i];    if (file.length() == 0) {      file.delete();    } else {      CacheSpan span=CacheSpan.createCacheEntry(file);      if (span == null) {        file.delete();      } else {        addSpan(span);      }    }  }}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  private static UriMatcher buildUriMatcher(){  final UriMatcher matcher=new UriMatcher(UriMatcher.NO_MATCH);  matcher.addURI(AcronymContract.CONTENT_AUTHORITY,AcronymContract.PATH_ACRONYM,ACRONYMS);  matcher.addURI(AcronymContract.CONTENT_AUTHORITY,AcronymContract.PATH_ACRONYM + "/#",ACRONYM);  return matcher;}  }
class C{  protected void doLogOobMessageInbound(Message message){  if (rpcLogger != null) {    rpcLogger.logOobMessage(serverInfo,clientInfo,message,System.currentTimeMillis());  }}  }
class C{  public static EvictionAction parseValue(int v){  if (v < 0 || v >= enumValueTable.length) {    return null;  } else {    return enumValueTable[v];  }}  }
class C{  public static ConcurrentModificationException newConcurrentModificationException(String message){  return new ConcurrentModificationException(formatMessage(0,message));}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  public boolean isClockwise(){  return clockwise;}  }
class C{  public CModuleViewGenerator(final SQLProvider provider,final INaviModule module){  m_provider=Preconditions.checkNotNull(provider,"IE00071: provider argument can not be null");  m_module=Preconditions.checkNotNull(module,"IE00072: module argument can not be null");}  }
class C{  public MonitorThread(String name){  super(name);}  }
class C{  public final boolean changeWeightOfStrategy(final GenericPlanStrategy<Plan,Person> strategy,final String subpopulation,final double newWeight){  return delegate.changeWeightOfStrategy(strategy,subpopulation,newWeight);}  }
class C{  public ChildTestIterator(DTMAxisTraverser traverser){  super(null);  m_traverser=traverser;}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in.length;  while (count > 0) {    if (in[count - 1] != 0) {      break;    }    count--;  }  return in.length - count;}  }
class C{  private void swap(int i,int j){  double tmp=_data[i];  _data[i]=_data[j];  _data[j]=tmp;}  }
class C{  public static void registerMimeType(String ext,String mimeType){  mimeTypeMapping.put(ext,mimeType);}  }
class C{  public void configureIndicator(int indicatorWidth,int indicatorHeight,int indicatorMargin){  configureIndicator(indicatorWidth,indicatorHeight,indicatorMargin,R.animator.scale_with_alpha,0,R.drawable.white_radius,R.drawable.white_radius);}  }
class C{  public GapContent(){  this(10);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public MP4Config(String path) throws IOException, FileNotFoundException {  StsdBox stsdBox;  mp4Parser=new MP4Parser(path);  try {    mp4Parser.parse();  } catch (  IOException ignore) {  }  stsdBox=mp4Parser.getStsdBox();  mPPS=stsdBox.getB64PPS();  mSPS=stsdBox.getB64SPS();  mProfilLevel=stsdBox.getProfileLevel();  mp4Parser.close();}  }
class C{  protected void clearEditInfo(){  m_editFlag=FolderEditFlag.NONE;}  }
class C{  public void downloadVideo(final View view,final int position){  downloadVideo(view,position,false);}  }
class C{  public void deleteExportRule(String ruleIndex,String policyName,String fsName){  NaElement ruleElem=null;  NaElement result=null;  try {    ruleElem=new NaElement("export-rule-destroy");    ruleElem.addNewChild("rule-index",ruleIndex);    ruleElem.addNewChild("policy-name",policyName);    result=server.invokeElem(ruleElem);  } catch (  IllegalArgumentException e) {    String msg="Failed to delete export rule index " + ruleIndex + " for file system: "+ fsName;    log.error(msg,e);    throw new NetAppCException(msg,e);  }catch (  Exception e) {    String msg="Failed to delete export rule index " + ruleIndex + " for file system: "+ fsName;    log.error(msg,e);    throw new NetAppCException(msg,e);  }}  }
class C{  public SQLiteDatabaseConfiguration(SQLiteDatabaseConfiguration other){  if (other == null) {    throw new IllegalArgumentException("other must not be null.");  }  this.path=other.path;  this.label=other.label;  updateParametersFrom(other);}  }
class C{  public boolean similar(Object other){  try {    if (!(other instanceof JSONObject)) {      return false;    }    Set<String> set=this.keySet();    if (!set.equals(((JSONObject)other).keySet())) {      return false;    }    Iterator<String> iterator=set.iterator();    while (iterator.hasNext()) {      String name=iterator.next();      Object valueThis=this.get(name);      Object valueOther=((JSONObject)other).get(name);      if (valueThis instanceof JSONObject) {        if (!((JSONObject)valueThis).similar(valueOther)) {          return false;        }      } else       if (valueThis instanceof JSONArray) {        if (!((JSONArray)valueThis).similar(valueOther)) {          return false;        }      } else       if (!valueThis.equals(valueOther)) {        return false;      }    }    return true;  } catch (  Throwable exception) {    return false;  }}  }
class C{  public void readFromParcel(Parcel in){  left=in.readInt();  top=in.readInt();  right=in.readInt();  bottom=in.readInt();}  }
class C{  public ColorPanel(){  initComponents();}  }
class C{  public void writeText(char text) throws IOException {  closeStartIfNecessary();  if (dontEscape) {    writer.write(text);  } else   if (isPartial || !writingCdata) {    charHolder[0]=text;    HtmlUtils.writeText(writer,escapeUnicode,escapeIso,buffer,charHolder);  } else {    assert writingCdata;    charHolder[0]=text;    writeEscaped(charHolder,0,1);  }}  }
class C{  public void recruitWalkOns(){  int needs=2 - teamQBs.size();  for (int i=0; i < needs; ++i) {    teamQBs.add(new PlayerQB(league.getRandName(),1,2,this));  }  needs=4 - teamRBs.size();  for (int i=0; i < needs; ++i) {    teamRBs.add(new PlayerRB(league.getRandName(),1,2,this));  }  needs=6 - teamWRs.size();  for (int i=0; i < needs; ++i) {    teamWRs.add(new PlayerWR(league.getRandName(),1,2,this));  }  needs=10 - teamOLs.size();  for (int i=0; i < needs; ++i) {    teamOLs.add(new PlayerOL(league.getRandName(),1,2,this));  }  needs=2 - teamKs.size();  for (int i=0; i < needs; ++i) {    teamKs.add(new PlayerK(league.getRandName(),1,2,this));  }  needs=2 - teamSs.size();  for (int i=0; i < needs; ++i) {    teamSs.add(new PlayerS(league.getRandName(),1,2,this));  }  needs=6 - teamCBs.size();  for (int i=0; i < needs; ++i) {    teamCBs.add(new PlayerCB(league.getRandName(),1,2,this));  }  needs=14 - teamF7s.size();  for (int i=0; i < needs; ++i) {    teamF7s.add(new PlayerF7(league.getRandName(),1,2,this));  }  sortPlayers();}  }
class C{  ValueNumberPair[] copyValueNumbers(){  if (isTOP()) {    throw new OptimizingCompilerException("Unexpected lattice operation");  }  if (size == 0)   return null;  ValueNumberPair[] result=new ValueNumberPair[size];  for (int i=0; i < size; i++) {    result[i]=new ValueNumberPair(numbers[i]);  }  return result;}  }
class C{  public static void colorPreLollipopHorizontalSeekBar(SeekBar seekBar){  if (seekBar != null && Build.VERSION.SDK_INT <= Build.VERSION_CODES.LOLLIPOP) {    colorPreLollipopHorizontalProgressBar(seekBar);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {      int color=seekBar.getResources().getColor(R.color.accent);      seekBar.getThumb().setColorFilter(color,PorterDuff.Mode.SRC_IN);      seekBar.getThumb().setColorFilter(color,PorterDuff.Mode.SRC_IN);    }  }}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  public final boolean canGetFloat(String field){  return m_table.canGetFloat(field);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.480 -0500",hash_original_method="3FDCC93D71F6B56C0FCF47E8C68EDFCE",hash_generated_method="5BAA87DD4184D44E415CEACD0690D8AC") protected final void addState(State state){  mSmHandler.addState(state,null);}  }
class C{  protected RelRoot convertQueryRecursive(SqlNode query,boolean top,RelDataType targetRowType){  final SqlKind kind=query.getKind();switch (kind) {case SELECT:    return RelRoot.of(convertSelect((SqlSelect)query,top),kind);case INSERT:  return RelRoot.of(convertInsert((SqlInsert)query),kind);case DELETE:return RelRoot.of(convertDelete((SqlDelete)query),kind);case UPDATE:return RelRoot.of(convertUpdate((SqlUpdate)query),kind);case MERGE:return RelRoot.of(convertMerge((SqlMerge)query),kind);case UNION:case INTERSECT:case EXCEPT:return RelRoot.of(convertSetOp((SqlCall)query),kind);case WITH:return convertWith((SqlWith)query,top);case VALUES:return RelRoot.of(convertValues((SqlCall)query,targetRowType),kind);default :throw Util.newInternal("not a query: " + query);}}  }
class C{  public void autoDelete(){  if (autoDeleteReference == null) {    autoDeleteReference=handler.getTempFileDeleter().addFile(name,this);  }}  }
class C{  public Object evaluate(Object data,ExecutionContext context){  Object value=null;  if (this.columnIndex > 0) {    value=((Object[])data)[this.columnIndex];  } else   if (this.columnIndex == 0) {    if (data instanceof Object[]) {      value=((Object[])data)[this.columnIndex];    } else {      value=data;    }  } else {    throw new IllegalStateException(" Order By Column attribute unmapped");  }  context.setCurrentProjectionField(value);  try {    return this.expr.evaluate(context);  } catch (  Exception e) {    throw new CacheException(e){    };  }}  }
class C{  public static void testReportNotEmpty(final Waiter waiter,final SpeedTestReport report,final long totalPacketSize,final boolean authorizeTemporaryEmpty,final boolean isRepeat){  waiter.assertTrue(report.getProgressPercent() > 0);  waiter.assertTrue(report.getReportTime() != 0);  waiter.assertTrue(report.getRequestNum() >= 0);  waiter.assertTrue(report.getStartTime() != 0);  if (!authorizeTemporaryEmpty) {    waiter.assertTrue(report.getTemporaryPacketSize() > 0);    waiter.assertTrue(report.getTransferRateBit().intValue() > 0);    waiter.assertTrue(report.getTransferRateOctet().intValue() > 0);  } else {    waiter.assertTrue(report.getTemporaryPacketSize() >= 0);    waiter.assertTrue(report.getTransferRateBit().intValue() >= 0);    waiter.assertTrue(report.getTransferRateOctet().intValue() >= 0);  }  if (!isRepeat) {    waiter.assertEquals(report.getTotalPacketSize(),totalPacketSize);  }  final float check=report.getTransferRateOctet().multiply(new BigDecimal("8")).floatValue();  waiter.assertTrue(((report.getTransferRateBit().floatValue() + 0.1) >= check) && ((report.getTransferRateBit().floatValue() - 0.1) <= check));}  }
class C{  public static String formatElapsed(Timestamp start,Timestamp end){  long startTime=0;  if (start == null)   startTime=System.currentTimeMillis(); else   startTime=start.getTime();  long endTime=0;  if (end == null)   endTime=System.currentTimeMillis(); else   endTime=end.getTime();  return formatElapsed(endTime - startTime);}  }
class C{  public final boolean hasDataScheme(String scheme){  return mDataSchemes != null && mDataSchemes.contains(scheme);}  }
class C{  void startShutdown(){  startShutdown(-1);}  }
class C{  public boolean isCritical(){  return criticality;}  }
class C{  public void mutate(){  Object[] result=new Object[mutations.size()];  try {    table.batch(mutations,result);    mutations.clear();  } catch (  InterruptedException|IOException e) {    LOG.warn("Error performing a mutation to HBase.",e);    throw new RuntimeException(e);  }}  }
class C{  public synchronized boolean isCompleted(){  return completed;}  }
class C{  public static String jvmFlags(MonitoredVm vm) throws MonitorException {  StringMonitor jvmFlags=(StringMonitor)vm.findByName("java.rt.vmFlags");  return (jvmFlags == null) ? "Unknown" : jvmFlags.stringValue();}  }
class C{  public void addAttributes(AttributeSet attr){  if (attr instanceof SmallAttributeSet) {    Object[] tbl=((SmallAttributeSet)attr).attributes;    int n=tbl.length;    for (int i=0; i < n; i+=2) {      addAttribute(tbl[i],tbl[i + 1]);    }  } else {    Enumeration names=attr.getAttributeNames();    while (names.hasMoreElements()) {      Object name=names.nextElement();      addAttribute(name,attr.getAttribute(name));    }  }}  }
class C{  public static Object readDeclaredStaticField(final Class<?> cls,final String fieldName,final boolean forceAccess) throws IllegalAccessException {  Field field=FieldUtils.getDeclaredField(cls,fieldName,forceAccess);  if (field == null) {    throw new IllegalArgumentException("Cannot locate declared field " + cls.getName() + "."+ fieldName);  }  return FieldUtils.readStaticField(field,false);}  }
class C{  protected Rectangle lineToRect(Shape a,int line){  Rectangle r=null;  updateMetrics();  if (metrics != null) {    Rectangle alloc=a.getBounds();    lineHeight=host != null ? host.getLineHeight() : lineHeight;    r=new Rectangle(alloc.x,alloc.y + line * lineHeight,alloc.width,lineHeight);  }  return r;}  }
class C{  public Clustering<MeanModel> run(Database database,Relation<V> relation){  final DistanceQuery<V> distq=database.getDistanceQuery(relation,getDistanceFunction());  final RangeQuery<V> rangeq=database.getRangeQuery(distq);  final NumberVector.Factory<V> factory=RelationUtil.getNumberVectorFactory(relation);  final int dim=RelationUtil.dimensionality(relation);  final double threshold=bandwidth * 1E-10;  ArrayList<Pair<V,ModifiableDBIDs>> clusters=new ArrayList<>();  ModifiableDBIDs noise=DBIDUtil.newArray();  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Mean-shift clustering",relation.size(),LOG) : null;  for (DBIDIter iter=relation.iterDBIDs(); iter.valid(); iter.advance()) {    V position=relation.get(iter);    iterations:     for (int j=1; j <= MAXITER; j++) {      V newvec=null;{        DoubleDBIDList neigh=rangeq.getRangeForObject(position,bandwidth);        boolean okay=(neigh.size() > 1) || (neigh.size() >= 1 && j > 1);        if (okay) {          Centroid newpos=new Centroid(dim);          for (DoubleDBIDListIter niter=neigh.iter(); niter.valid(); niter.advance()) {            final double weight=kernel.density(niter.doubleValue() / bandwidth);            newpos.put(relation.get(niter),weight);          }          newvec=factory.newNumberVector(newpos.getArrayRef());        }        if (!okay) {          noise.add(iter);          break iterations;        }      }      double bestd=Double.POSITIVE_INFINITY;      Pair<V,ModifiableDBIDs> bestp=null;      for (      Pair<V,ModifiableDBIDs> pair : clusters) {        final double merged=distq.distance(newvec,pair.first);        if (merged < bestd) {          bestd=merged;          bestp=pair;        }      }      double delta=distq.distance(position,newvec);      if (bestd < 10 * threshold || bestd * 2 < delta) {        bestp.second.add(iter);        break iterations;      }      if (j == MAXITER) {        LOG.warning("No convergence after " + MAXITER + " iterations. Distance: "+ delta);      }      if (Double.isNaN(delta)) {        LOG.warning("Encountered NaN distance. Invalid center vector? " + newvec.toString());        break iterations;      }      if (j == MAXITER || delta < threshold) {        if (LOG.isDebuggingFine()) {          LOG.debugFine("New cluster:" + newvec + " delta: "+ delta+ " threshold: "+ threshold+ " bestd: "+ bestd);        }        ArrayModifiableDBIDs cids=DBIDUtil.newArray();        cids.add(iter);        clusters.add(new Pair<V,ModifiableDBIDs>(newvec,cids));        break iterations;      }      position=newvec;    }    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  ArrayList<Cluster<MeanModel>> cs=new ArrayList<>(clusters.size());  for (  Pair<V,ModifiableDBIDs> pair : clusters) {    cs.add(new Cluster<>(pair.second,new MeanModel(pair.first.toArray())));  }  if (noise.size() > 0) {    cs.add(new Cluster<MeanModel>(noise,true));  }  Clustering<MeanModel> c=new Clustering<>("Mean-shift Clustering","mean-shift-clustering",cs);  return c;}  }
class C{  public Object visit(ASTFalse node,Object data){  return showNode(node,data);}  }
class C{  public static Flag registerMaxASUnmatedFlag(final CFlags flags,final char singleLetter){  if (singleLetter != NO_SINGLE_LETTER) {    return flags.registerOptional(singleLetter,MAX_AS_UNMATED_FLAG,IntegerOrPercentage.class,CommonFlags.INT,AS_UNMATED_DESC).setCategory(SENSITIVITY_TUNING);  } else {    return flags.registerOptional(MAX_AS_UNMATED_FLAG,IntegerOrPercentage.class,CommonFlags.INT,AS_UNMATED_DESC).setCategory(SENSITIVITY_TUNING);  }}  }
class C{  DSA(MessageDigest md){  super();  this.md=md;}  }
class C{  boolean validate(){  if (isValid) {    return true;  }  if (tileset == null || requireData) {    return false;  }  if (collision == null) {    return false;  }  if (!tileset.validate(zoneInfo.getZoneColor(),zoneInfo.getColorMethod())) {    return false;  }  for (  final LayerRenderer lr : layers.values()) {    lr.setTileset(tileset);  }  isValid=true;  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.465 -0500",hash_original_method="1041AA48D060026BCCD13967429C5BF3",hash_generated_method="879D5278FEB8342E2E5E9E41C9B65265") protected String paramNameOrValue() throws ParseException {  int startIdx=lexer.getPtr();  while (lexer.hasMoreChars()) {    char next=lexer.lookAhead(0);    boolean isValidChar=false;switch (next) {case '[':case ']':case '/':case ':':case '&':case '+':case '$':      isValidChar=true;  }  if (isValidChar || isUnreserved(next)) {    lexer.consume(1);  } else   if (isEscaped()) {    lexer.consume(3);  } else   break;}return lexer.getBuffer().substring(startIdx,lexer.getPtr());}  }
class C{  public void testPutIsGet(){  String[] name={"my name","your name"};  String[] description={"foo","bar"};  Object pageKey=new Integer(1);  assertFalse(helper.isNameUsed(name[0]));  assertFalse(helper.isNameUsed(name[1]));  assertNull(helper.getUsedHint(name[0]));  assertNull(helper.getUsedHint(name[1]));  helper.addName(name[0],pageKey,description[0]);  assertTrue(helper.isNameUsed(name[0]));  assertFalse(helper.isNameUsed(name[1]));  assertEquals(description[0],helper.getUsedHint(name[0]));  assertNull(helper.getUsedHint(name[1]));  helper.addName(name[1],pageKey,description[1]);  assertTrue(helper.isNameUsed(name[0]));  assertTrue(helper.isNameUsed(name[1]));  assertEquals(description[0],helper.getUsedHint(name[0]));  assertEquals(description[1],helper.getUsedHint(name[1]));}  }
class C{  @Override protected void optionValueChanged(final ValueChangeEvent event){  super.optionValueChanged(event);  if (updateTagStr.equals(event.getProperty().getValue())) {    assignOptiongroup.setEnabled(false);  } else {    assignOptiongroup.setEnabled(true);  }  assignOptiongroup.select(singleAssignStr);}  }
class C{  private boolean removeLinkFromStructure(Map<NodePortTuple,Set<Link>> s,Link l){  boolean result1=false, result2=false;  NodePortTuple n1=new NodePortTuple(l.getSrc(),l.getSrcPort());  NodePortTuple n2=new NodePortTuple(l.getDst(),l.getDstPort());  if (s.get(n1) != null) {    result1=s.get(n1).remove(l);    if (s.get(n1).isEmpty())     s.remove(n1);  }  if (s.get(n2) != null) {    result2=s.get(n2).remove(l);    if (s.get(n2).isEmpty())     s.remove(n2);  }  return result1 || result2;}  }
class C{  protected void dock(DockWrapper outter,DockWrapper inner){  dock(outter,inner,-1);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.ENUMERATOR__OWNING_ENUMERATION:    setOwningEnumeration((EnumerationType)null);  return;}super.eUnset(featureID);}  }
class C{  public void testArriveAndAwaitAdvance1(){  Phaser phaser=new Phaser();  try {    phaser.arriveAndAwaitAdvance();    shouldThrow();  } catch (  IllegalStateException success) {  }}  }
class C{  public Element removeChild(String name){  checkNotRemoved();  final Element child=getSingleChild(name);  if (child != null) {    child.remove();  }  return this;}  }
class C{  private double readNum(){  final byte[] stream_=this.stream;  int c=stream_[loc++];  boolean neg=c == '-';  boolean sawdot=c == '.';  double dotmult=sawdot ? 0.1 : 1;  double value=(c >= '0' && c <= '9') ? c - '0' : 0;  while (true) {    c=stream_[loc++];    if (c == '.') {      if (sawdot) {        loc--;        break;      }      sawdot=true;      dotmult=0.1;    } else     if (c >= '0' && c <= '9') {      int val=c - '0';      if (sawdot) {        value+=val * dotmult;        dotmult*=0.1;      } else {        value=value * 10 + val;      }    } else {      loc--;      break;    }  }  return neg ? -value : value;}  }
class C{  public AlgVector(Instance instance) throws Exception {  int len=instance.numAttributes();  for (int i=0; i < instance.numAttributes(); i++) {    if (!instance.attribute(i).isNumeric())     len--;  }  if (len > 0) {    m_Elements=new double[len];    int n=0;    for (int i=0; i < instance.numAttributes(); i++) {      if (!instance.attribute(i).isNumeric())       continue;      m_Elements[n]=instance.value(i);      n++;    }  } else {    throw new IllegalArgumentException("No numeric attributes in data!");  }}  }
class C{  private Node resolveExactMethod(CanonicalizerTool tool,ResolvedJavaType type){  ResolvedJavaMethod newMethod=type.resolveConcreteMethod(method,type);  if (newMethod == null) {    return ConstantNode.forConstant(stamp(),JavaConstant.NULL_POINTER,null);  } else {    return ConstantNode.forConstant(stamp(),newMethod.getEncoding(),tool.getMetaAccess());  }}  }
class C{  @Override public int hashCode(){  byte[] buf=_hash;  return ((buf[0] << 24) + (buf[1] << 16) + (buf[2] << 8)+ (buf[3]));}  }
class C{  public LineBorder(Color color){  this(color,1,false);}  }
class C{  BKLogHandler(ZKLogMetadata metadata,DistributedLogConfiguration conf,ZooKeeperClientBuilder zkcBuilder,BookKeeperClientBuilder bkcBuilder,LogSegmentMetadataStore metadataStore,OrderedScheduler scheduler,StatsLogger statsLogger,AlertStatsLogger alertStatsLogger,AsyncNotification notification,LogSegmentFilter filter,String lockClientId){  Preconditions.checkNotNull(zkcBuilder);  Preconditions.checkNotNull(bkcBuilder);  this.logMetadata=metadata;  this.conf=conf;  this.scheduler=scheduler;  this.statsLogger=statsLogger;  this.alertStatsLogger=alertStatsLogger;  this.notification=notification;  this.filter=filter;  this.logSegmentCache=new LogSegmentCache(metadata.getLogName());  firstNumEntriesPerReadLastRecordScan=conf.getFirstNumEntriesPerReadLastRecordScan();  maxNumEntriesPerReadLastRecordScan=conf.getMaxNumEntriesPerReadLastRecordScan();  this.zooKeeperClient=zkcBuilder.build();  LOG.debug("Using ZK Path {}",logMetadata.getLogRootPath());  this.bookKeeperClient=bkcBuilder.build();  this.metadataStore=metadataStore;  if (lockClientId.equals(DistributedLogConstants.UNKNOWN_CLIENT_ID)) {    this.lockClientId=getHostIpLockClientId();  } else {    this.lockClientId=lockClientId;  }  this.getChildrenWatcher=this.zooKeeperClient.getWatcherManager().registerChildWatcher(logMetadata.getLogSegmentsPath(),this);  this.metadataLatencyWarnThresholdMillis=conf.getMetadataLatencyWarnThresholdMillis();  StatsLogger segmentsLogger=statsLogger.scope("logsegments");  forceGetListStat=segmentsLogger.getOpStatsLogger("force_get_list");  getListStat=segmentsLogger.getOpStatsLogger("get_list");  getFilteredListStat=segmentsLogger.getOpStatsLogger("get_filtered_list");  getFullListStat=segmentsLogger.getOpStatsLogger("get_full_list");  getInprogressSegmentStat=segmentsLogger.getOpStatsLogger("get_inprogress_segment");  getCompletedSegmentStat=segmentsLogger.getOpStatsLogger("get_completed_segment");  negativeGetInprogressSegmentStat=segmentsLogger.getOpStatsLogger("negative_get_inprogress_segment");  negativeGetCompletedSegmentStat=segmentsLogger.getOpStatsLogger("negative_get_completed_segment");  recoverLastEntryStats=segmentsLogger.getOpStatsLogger("recover_last_entry");  recoverScannedEntriesStats=segmentsLogger.getOpStatsLogger("recover_scanned_entries");}  }
class C{  protected synchronized void releaseLock(){  colorChooserLock=false;}  }
class C{  public AuthorizationHeader createAuthorizationHeader(String scheme) throws ParseException {  if (scheme == null)   throw new NullPointerException("null arg scheme ");  Authorization auth=new Authorization();  auth.setScheme(scheme);  return auth;}  }
class C{  @NotNull public static TokenSet create(@NotNull IElementType... types){  if (types.length == 0)   return EMPTY;  short min=Short.MAX_VALUE;  short max=0;  for (  IElementType type : types) {    if (type != null) {      final short index=type.getIndex();      assert index >= 0 : "Unregistered elements are not allowed here: " + LogUtil.objectAndClass(type);      if (min > index)       min=index;      if (max < index)       max=index;    }  }  final short shift=(short)(min >> 6);  final TokenSet set=new TokenSet(shift,max);  for (  IElementType type : types) {    if (type != null) {      final short index=type.getIndex();      final int wordIndex=(index >> 6) - shift;      set.myWords[wordIndex]|=1L << index;    }  }  return set;}  }
class C{  public boolean isBroken(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return generation.broken;  }  finally {    lock.unlock();  }}  }
class C{  public void paint(Graphics g){  if (isVisible()) {    try {      JTextComponent c=getComponent();      Color fg=c.hasFocus() ? c.getCaretColor() : c.getDisabledTextColor();      TextUI mapper=c.getUI();      int dot=getDot();      Rectangle r=mapper.modelToView(c,dot);      int x0=r.x - IBeamOverhang;      int x1=r.x + IBeamOverhang;      int y0=r.y + 1;      int y1=r.y + r.height - 2;      g.setColor(fg);      g.drawLine(r.x,y0,r.x,y1);      g.drawLine(x0,y0,x1,y0);      g.drawLine(x0,y1,x1,y1);    } catch (    BadLocationException e) {    }  }}  }
class C{  public void monitorExit(){  mv.visitInsn(Opcodes.MONITOREXIT);}  }
class C{  public Transfer openNewConnection() throws IOException {  InetAddress address=socket.getInetAddress();  int port=socket.getPort();  Socket s2=NetUtils.createSocket(address,port,ssl);  Transfer trans=new Transfer(null);  trans.setSocket(s2);  trans.setSSL(ssl);  return trans;}  }
class C{  public String toString(){  if (array != null) {    return new String(array,offset,count);  }  return "";}  }
class C{  public static boolean updateTradeOrder(com.ib.client.Order ibOrder,com.ib.client.OrderState ibOrderState,TradeOrder order) throws ParseException {  boolean changed=false;  if (CoreUtils.nullSafeComparator(order.getOrderKey(),ibOrder.m_orderId) == 0) {    if (CoreUtils.nullSafeComparator(order.getStatus(),ibOrderState.m_status.toUpperCase()) != 0) {      order.setStatus(ibOrderState.m_status.toUpperCase());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getWarningMessage(),ibOrderState.m_warningText) != 0) {      order.setWarningMessage(ibOrderState.m_warningText);      changed=true;    }    Money comms=new Money(ibOrderState.m_commission);    if (CoreUtils.nullSafeComparator(comms,new Money(Double.MAX_VALUE)) != 0) {      if (CoreUtils.nullSafeComparator(order.getCommission(),comms.getBigDecimalValue()) != 0) {        order.setCommission(comms.getBigDecimalValue());        changed=true;      }    }    if (CoreUtils.nullSafeComparator(order.getClientId(),ibOrder.m_clientId) != 0) {      order.setClientId(ibOrder.m_clientId);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getAction(),ibOrder.m_action) != 0) {      order.setAction(ibOrder.m_action);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getQuantity(),ibOrder.m_totalQuantity) != 0) {      order.setQuantity(ibOrder.m_totalQuantity);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getOrderType(),ibOrder.m_orderType.replaceAll("\\s+","")) != 0) {      order.setOrderType(ibOrder.m_orderType.replaceAll("\\s+",""));      changed=true;    }    Money lmtPrice=new Money(ibOrder.m_lmtPrice);    if (CoreUtils.nullSafeComparator(lmtPrice,new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(order.getLimitPrice(),lmtPrice.getBigDecimalValue()) != 0) {      order.setLimitPrice(lmtPrice.getBigDecimalValue());      changed=true;    }    Money auxPrice=new Money(ibOrder.m_auxPrice);    if (CoreUtils.nullSafeComparator(auxPrice,new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(order.getAuxPrice(),auxPrice.getBigDecimalValue()) != 0) {      order.setAuxPrice(auxPrice.getBigDecimalValue());      changed=true;    }    Money trailStopPrice=new Money(ibOrder.m_trailStopPrice);    if (CoreUtils.nullSafeComparator(trailStopPrice,new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(order.getTrailStopPrice(),trailStopPrice.getBigDecimalValue()) != 0) {      order.setTrailStopPrice(trailStopPrice.getBigDecimalValue());      changed=true;    }    Money trailingPercent=new Money(ibOrder.m_trailingPercent);    if (CoreUtils.nullSafeComparator(trailingPercent,new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(order.getTrailingPercent(),trailingPercent.getBigDecimalValue()) != 0) {      order.setTrailingPercent(trailingPercent.getBigDecimalValue());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getTimeInForce(),ibOrder.m_tif) != 0) {      order.setTimeInForce(ibOrder.m_tif);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getOcaGroupName(),ibOrder.m_ocaGroup) != 0) {      order.setOcaGroupName(ibOrder.m_ocaGroup);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getOcaType(),ibOrder.m_ocaType) != 0) {      order.setOcaType(ibOrder.m_ocaType);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getOrderReference(),ibOrder.m_orderRef) != 0) {      order.setOrderReference(ibOrder.m_orderRef);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getAccountNumber(),ibOrder.m_account) != 0) {      order.setAccountNumber(ibOrder.m_account);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getFAGroup(),ibOrder.m_faGroup) != 0) {      order.setFAGroup(ibOrder.m_faGroup);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getFAMethod(),ibOrder.m_faMethod) != 0) {      order.setFAMethod(ibOrder.m_faMethod);      changed=true;    }    Money faPercent=new Money(ibOrder.m_faPercentage);    if (CoreUtils.nullSafeComparator(order.getFAPercent(),faPercent.getBigDecimalValue()) != 0) {      order.setFAPercent(faPercent.getBigDecimalValue());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getFAProfile(),ibOrder.m_faProfile) != 0) {      order.setFAProfile(ibOrder.m_faProfile);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getPermId(),ibOrder.m_permId) != 0) {      order.setPermId(ibOrder.m_permId);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getParentId(),ibOrder.m_parentId) != 0) {      order.setParentId(ibOrder.m_parentId);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getTransmit(),ibOrder.m_transmit) != 0) {      order.setTransmit(ibOrder.m_transmit);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getDisplayQuantity(),ibOrder.m_displaySize) != 0) {      order.setDisplayQuantity(ibOrder.m_displaySize);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getTriggerMethod(),ibOrder.m_triggerMethod) != 0) {      order.setTriggerMethod(ibOrder.m_triggerMethod);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getHidden(),ibOrder.m_hidden) != 0) {      order.setHidden(ibOrder.m_hidden);      changed=true;    }    if (null != ibOrder.m_goodAfterTime) {      ZonedDateTime goodAfterTime=TradingCalendar.getZonedDateTimeFromDateTimeString(ibOrder.m_goodAfterTime,"yyyyMMdd HH:mm:ss");      if (CoreUtils.nullSafeComparator(order.getGoodAfterTime(),goodAfterTime) != 0) {        order.setGoodAfterTime(goodAfterTime);        changed=true;      }    }    if (null != ibOrder.m_goodTillDate) {      ZonedDateTime goodTillDate=TradingCalendar.getZonedDateTimeFromDateTimeString(ibOrder.m_goodTillDate,"yyyyMMdd HH:mm:ss");      if (CoreUtils.nullSafeComparator(order.getGoodTillTime(),goodTillDate) != 0) {        order.setGoodTillTime(goodTillDate);        changed=true;      }    }    Integer overridePercentageConstraints=new Integer((ibOrder.m_overridePercentageConstraints ? 1 : 0));    if (CoreUtils.nullSafeComparator(order.getOverrideConstraints(),overridePercentageConstraints) != 0) {      order.setOverrideConstraints(overridePercentageConstraints);      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getAllOrNothing(),ibOrder.m_allOrNone) != 0) {      order.setAllOrNothing(ibOrder.m_allOrNone);      changed=true;    }    if (changed)     order.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());  }  return changed;}  }
class C{  public boolean loadDimensions(String filePath){  hasBeenInitiallized=true;  FileInputStream inStream;  NBTTagCompound nbt;  try {    File file=new File(net.minecraftforge.common.DimensionManager.getCurrentSaveRootDirectory(),filePath);    if (!file.exists()) {      new File(file.getAbsolutePath().substring(0,file.getAbsolutePath().length() - file.getName().length())).mkdirs();      file.createNewFile();      return false;    }    inStream=new FileInputStream(file);    nbt=CompressedStreamTools.readCompressed(inStream);    inStream.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();    return false;  }catch (  IOException e) {    e.printStackTrace();    return false;  }  NBTTagCompound solarSystem=nbt.getCompoundTag("starSystems");  if (solarSystem.hasNoTags())   return false;  NBTTagCompound stats=nbt.getCompoundTag("stat");  hasReachedMoon=stats.getBoolean("hasReachedMoon");  hasReachedWarp=stats.getBoolean("hasReachedWarp");  for (  Object key : solarSystem.func_150296_c()) {    NBTTagCompound solarNBT=solarSystem.getCompoundTag((String)key);    StellarBody star=new StellarBody();    star.readFromNBT(solarNBT);    starList.put(star.getId(),star);  }  nbt.setTag("starSystems",solarSystem);  nextSatelliteId=nbt.getLong("nextSatelliteId");  NBTTagCompound dimListNbt=nbt.getCompoundTag("dimList");  for (  Object key : dimListNbt.func_150296_c()) {    String keyString=(String)key;    if (keyString.equals("0")) {      overworldProperties.readFromNBT(dimListNbt.getCompoundTag(keyString));    } else {      DimensionProperties propeties=DimensionProperties.createFromNBT(Integer.parseInt(keyString),dimListNbt.getCompoundTag(keyString));      if (propeties != null) {        int keyInt=Integer.parseInt(keyString);        if (!net.minecraftforge.common.DimensionManager.isDimensionRegistered(keyInt) && propeties.isNativeDimension && !propeties.isGasGiant()) {          net.minecraftforge.common.DimensionManager.registerProviderType(keyInt,DimensionManager.planetWorldProvider,false);          net.minecraftforge.common.DimensionManager.registerDimension(keyInt,keyInt);        }        dimensionList.put(new Integer(keyInt),propeties);      } else {        Logger.getLogger("advancedRocketry").warning("Null Dimension Properties Recieved");      }    }  }  if (nbt.hasKey("spaceObjects")) {    NBTTagCompound nbtTag=nbt.getCompoundTag("spaceObjects");    SpaceObjectManager.getSpaceManager().readFromNBT(nbtTag);  }  prevBuild=nbt.getString("prevVersion");  nbt.setString("prevVersion",AdvancedRocketry.version);  return true;}  }
class C{  public synchronized void addNewFile(long seqno,String fileName){  logger.info("Adding new index entry for " + fileName + " starting at seqno "+ seqno);  index.add(new LogIndexEntry(seqno,Long.MAX_VALUE,fileName));  if (retentionMillis > 0) {    String activeFile=getFile(activeSeqno);    File[] purgeCandidates=FileCommands.filesOverRetentionAndInactive(logDir,filePrefix,2,activeFile);    File[] filesToPurge=FileCommands.filesOverModDate(purgeCandidates,new Interval(retentionMillis));    if (filesToPurge.length > 0) {      for (      File file : filesToPurge)       removeFile(file.getName());      FileCommands.deleteFiles(filesToPurge,false);    }  }}  }
class C{  public BikeCustomizedOsmNetworkReader(final Network network,final CoordinateTransformation transformation){  this(network,transformation,true);}  }
class C{  public SplittedExampleSet(ExampleSet exampleSet,double[] splitRatios,int samplingType,boolean useLocalRandomSeed,int seed,boolean autoSwitchToShuffled) throws UserError {  this(exampleSet,new Partition(splitRatios,exampleSet.size(),createPartitionBuilder(exampleSet,samplingType,useLocalRandomSeed,seed,autoSwitchToShuffled)));}  }
class C{  public byte[] compress(short[] unCompInput){  try {    return Snappy.compress(unCompInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());    return null;  }}  }
class C{  public void removeAttribute(GoogleBaseAttribute value){  attributes.remove(value);}  }
class C{  public void testPosPosFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-128,9,56,100,-2,-3,-3,-3,95,15,-9,39,58,-69,87,87,-17,-73};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  private BakedBezierInterpolator(){  super();}  }
class C{  public void throwException(Mark where,JasperException je) throws JasperException {  if (where == null) {    throw je;  }  String file=null;  if (jspcMode) {    try {      file=where.getURL().toString();    } catch (    MalformedURLException me) {      file=where.getFile();    }  } else {    file=where.getFile();  }  JasperException newEx=new JasperException(file + "(" + where.getLineNumber()+ ","+ where.getColumnNumber()+ ")"+ " "+ je.getMessage(),je.getCause());  newEx.setStackTrace(je.getStackTrace());  throw newEx;}  }
class C{  public T invalidate(String url){  File file=getCachedFile(url);  if (file != null)   file.delete();  return self();}  }
class C{  public final void removeStateListener(StateListener l){  listeners.remove(StateListener.class,l);}  }
class C{  public static void xml(String xml){  printer.xml(xml);}  }
class C{  public static boolean toBooleanValue(long l){  return l != 0;}  }
class C{  public static BigInteger decodeInteger(final byte[] pArray){  return new BigInteger(1,decodeBase64(pArray));}  }
class C{  public static StringSet convertUrisToStrings(List<URI> targetUris){  StringSet targetVolumeUris=new StringSet();  for (  URI uri : targetUris) {    targetVolumeUris.add(uri.toString());  }  return targetVolumeUris;}  }
class C{  public void typeInfo(int pos,byte tag){}  }
class C{  private void processInstruction(Instruction s){  if (s.isDynamicLinkingPoint()) {    processCall(s);  } else   if (Move.conforms(s)) {    processMove(s);  } else   if (s.operator() == PI) {    processPi(s);  } else   if (New.conforms(s)) {    processNew(s);  } else   if (NewArray.conforms(s)) {    processNewArray(s);  } else   if (Unary.conforms(s)) {    processUnary(s);  } else   if (GuardedUnary.conforms(s)) {    processGuardedUnary(s);  } else   if (NullCheck.conforms(s)) {    processNullCheck(s);  } else   if (ZeroCheck.conforms(s)) {    processZeroCheck(s);  } else   if (Binary.conforms(s)) {    processBinary(s);  } else   if (GuardedBinary.conforms(s)) {    processGuardedBinary(s);  } else   if (InlineGuard.conforms(s)) {    processInlineGuard(s);  } else   if (IfCmp.conforms(s)) {    processIfCmp(s);  } else   if (Call.conforms(s)) {    processCall(s);  } else   if (MonitorOp.conforms(s)) {    processCall(s);  } else   if (Prepare.conforms(s)) {    processCall(s);  } else   if (Attempt.conforms(s)) {    processCall(s);  } else   if (CacheOp.conforms(s)) {    processCall(s);  } else   if (ALoad.conforms(s)) {    processALoad(s);  } else   if (PutField.conforms(s)) {    processPutField(s);  } else   if (PutStatic.conforms(s)) {    processPutStatic(s);  } else   if (AStore.conforms(s)) {    processAStore(s);  } else   if (Phi.conforms(s)) {    processPhi(s);  } else   if (s.operator() == IR_PROLOGUE) {    processPrologue(s);  }}  }
class C{  public void updateCircle(float latPoint,float lonPoint,float radius,int units,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkCircle.write(latPoint,lonPoint,radius,units,-1,properties,link.dos);}  }
class C{  public IncreaseXPDependentOnLevelAction(final double xpDiff,final double karmabonus){  this.xpDiff=xpDiff;  this.karmabonus=karmabonus;}  }
class C{  public AttributeFilter(){  initComponents();}  }
class C{  private void createRaytracingTexture(){  this.raytraceTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,raytraceTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA32F,width,height);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  public ExecutionError(@Nullable String message,@Nullable Error cause){  super(message,cause);}  }
class C{  @Override public boolean canInvert(){  return true;}  }
class C{  public StackBlurFilter(int radius,int iterations){  if (radius < 1) {    radius=1;  }  if (iterations < 1) {    iterations=1;  }  this.radius=radius;  this.iterations=iterations;}  }
class C{  public void readData(DataInput input) throws IOException {  readReference=input.readUnsignedShort();  readCount=input.readUnsignedShort();  writeReference=input.readUnsignedShort();  writeCount=input.readUnsignedShort();  int byteCount=input.readUnsignedByte();  if (nonWordDataHandler == null) {    byte buffer[]=new byte[byteCount];    input.readFully(buffer,0,byteCount);    int offset=0;    registers=new Register[writeCount];    for (int register=0; register < writeCount; register++) {      registers[register]=new SimpleRegister(buffer[offset],buffer[offset + 1]);      offset+=2;    }  } else {    nonWordDataHandler.readData(input,writeReference,writeCount);  }}  }
class C{  public String lang(){  return lang;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:08.051 -0500",hash_original_method="DE679CD49EEE558B2CA2B7C9C9DE5810",hash_generated_method="F2295C7377E10FA5920FF277B65858FC") private void handleFormat(Format format,Object arg,int begin,List<FieldContainer> fields){  if (fields == null) {    return;  }  AttributedCharacterIterator iterator=format.formatToCharacterIterator(arg);  while (iterator.getIndex() != iterator.getEndIndex()) {    int start=iterator.getRunStart();    int end=iterator.getRunLimit();    Iterator<?> it=iterator.getAttributes().keySet().iterator();    while (it.hasNext()) {      AttributedCharacterIterator.Attribute attribute=(AttributedCharacterIterator.Attribute)it.next();      Object value=iterator.getAttribute(attribute);      fields.add(new FieldContainer(begin + start,begin + end,attribute,value));    }    iterator.setIndex(end);  }}  }
class C{  private void removeAllNodes(@Nullable Object key){  Iterators.clear(new ValueForKeyIterator(key));}  }
class C{  public static void main(String... args) throws Exception {  DeleteDbFiles.execute("~","test",true);  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:~/test");  Statement stat=conn.createStatement();  stat.execute("create table ToDateTest(id int primary key, " + "start_date datetime, end_date datetime)");  stat.execute("insert into ToDateTest values(1, " + "ADD_MONTHS(TO_DATE('2015-11-13', 'yyyy-MM-DD'), 1), " + "TO_DATE('2015-12-15', 'YYYY-MM-DD'))");  stat.execute("insert into ToDateTest values(1, " + "TO_DATE('2015-11-13', 'yyyy-MM-DD'), " + "TO_DATE('2015-12-15', 'YYYY-MM-DD'))");  stat.execute("insert into ToDateTest values(2, " + "TO_DATE('2015-12-12 00:00:00', 'yyyy-MM-DD HH24:MI:ss'), " + "TO_DATE('2015-12-16 15:00:00', 'YYYY-MM-DD HH24:MI:ss'))");  stat.execute("insert into ToDateTest values(3, " + "TO_DATE('2015-12-12 08:00 A.M.', 'yyyy-MM-DD HH:MI AM'), " + "TO_DATE('2015-12-17 08:00 P.M.', 'YYYY-MM-DD HH:MI AM'))");  stat.execute("insert into ToDateTest values(4, " + "TO_DATE(substr('2015-12-12 08:00 A.M.', 1, 10), 'yyyy-MM-DD'), " + "TO_DATE('2015-12-17 08:00 P.M.', 'YYYY-MM-DD HH:MI AM'))");  ResultSet rs=stat.executeQuery("select * from ToDateTest");  while (rs.next()) {    System.out.println("Start date: " + dateToString(rs.getTimestamp("start_date")));    System.out.println("End date: " + dateToString(rs.getTimestamp("end_date")));    System.out.println();  }  stat.close();  conn.close();}  }
class C{  boolean containsAttribute(String key){  return attributes.containsKey(key);}  }
class C{  public void clearModsAlreadyRequested(String channel){  if (channel == null) {    modsAlreadyRequested.clear();  } else {    modsAlreadyRequested.remove(channel);  }}  }
class C{  public void clear(){  modCount++;  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   tab[i]=null;  size=0;}  }
class C{  private TestRunStatus runRegressionTests(TestEnvironment environment,RandoopOptions options,ExpectedTests expectedRegression,RandoopRunStatus runStatus,String packageName){  TestRunStatus regressionRunDesc=null;switch (expectedRegression) {case SOME:    assertThat("...has regression tests",runStatus.regressionTestCount,is(greaterThan(0)));  String regressionBasename=options.getRegressionBasename();try {  regressionRunDesc=TestRunStatus.runTests(environment,packageName,regressionBasename);} catch (IOException e) {  fail("Exception collecting coverage from regression tests: " + e.getMessage());}if (regressionRunDesc.processStatus.exitStatus != 0) {for (String line : regressionRunDesc.processStatus.outputLines) {  System.err.println(line);}fail("JUnit should exit properly");}if (regressionRunDesc.testsSucceed != regressionRunDesc.testsRun) {for (String line : regressionRunDesc.processStatus.outputLines) {System.err.println(line);}fail("all regression tests should pass, but " + regressionRunDesc.testsFail + " failed");}break;case NONE:assertThat("...has no regression tests",runStatus.regressionTestCount,is(equalTo(0)));break;case DONT_CARE:break;}return regressionRunDesc;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,long[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  public void testFileDirectoryWithConfigOption() throws Exception {  Properties properties=loadProperties("test-file-configfile-directory/test-subfolder");  assertEquals("12345",properties.getProperty("cargo.servlet.port"));}  }
class C{  @Override public void stop(){  mIsRunning=false;  waitForPendingRenderTask();  mNativeInfoHandle.saveRemainder();}  }
class C{  protected SVGOMRectElement(){}  }
class C{  public static VirtualFileSystem createVirtualFileSystem() throws Exception {  File rootDirectory=java.nio.file.Files.createTempDirectory(null).toFile();  VirtualFileSystemProvider vfsProvider=new LocalVirtualFileSystemProvider(rootDirectory,null);  return vfsProvider.getVirtualFileSystem();}  }
class C{  public void cleanup(){  lock.lock();  try {    boolean dirty=false;    for (Iterator<Transaction> i=pending.values().iterator(); i.hasNext(); ) {      Transaction tx=i.next();      if (isTransactionRisky(tx,null) && !acceptRiskyTransactions) {        log.debug("Found risky transaction {} in wallet during cleanup.",tx.getHashAsString());        if (!tx.isAnyOutputSpent()) {          tx.disconnectInputs();          i.remove();          transactions.remove(tx.getHash());          dirty=true;          log.info("Removed transaction {} from pending pool during cleanup.",tx.getHashAsString());        } else {          log.info("Cannot remove transaction {} from pending pool during cleanup, as it's already spent partially.",tx.getHashAsString());        }      }    }    if (dirty) {      checkState(isConsistent());      saveLater();    }  }  finally {    lock.unlock();  }}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case CURSOR_ID:  return isSetCursorId();case VALUES:return isSetValues();}throw new IllegalStateException();}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public static boolean isTrue(boolean expression,String message){  if (!expression)   throw new AssertionFailedException("assertion failed: " + message);  return expression;}  }
class C{  @Override public HasChildQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public ResponseHeaders combine(ResponseHeaders network) throws IOException {  RawHeaders result=new RawHeaders();  result.setStatusLine(headers.getStatusLine());  for (int i=0; i < headers.length(); i++) {    String fieldName=headers.getFieldName(i);    String value=headers.getValue(i);    if ("Warning".equals(fieldName) && value.startsWith("1")) {      continue;    }    if (!isEndToEnd(fieldName) || network.headers.get(fieldName) == null) {      result.add(fieldName,value);    }  }  for (int i=0; i < network.headers.length(); i++) {    String fieldName=network.headers.getFieldName(i);    if (isEndToEnd(fieldName)) {      result.add(fieldName,network.headers.getValue(i));    }  }  return new ResponseHeaders(uri,result);}  }
class C{  public void update(NetworkInterface iface,ModuleCommunicationBus comBus){  double simTime=SimClock.getTime();  double delta=simTime - this.lastUpdate;  if (this.comBus == null) {    this.comBus=comBus;    this.comBus.addProperty(ENERGY_VALUE_ID,this.currentEnergy);    this.comBus.subscribe(ENERGY_VALUE_ID,this);  }  if (simTime > this.lastUpdate && iface.isTransferring()) {    reduceEnergy(delta * this.transmitEnergy);  }  this.lastUpdate=simTime;  if (iface.isScanning()) {    if (iface.getTransmitRange() > 0) {      if (delta < 1) {        reduceEnergy(this.scanEnergy * delta);      } else {        reduceEnergy(this.scanEnergy);      }    }  }}  }
class C{  public String typeAsString(){  String typeStr="?";switch (this.id) {case TAG_CHECKSUM:    typeStr=" (entry checksum)";  prchar=-1;break;case TAG_FILESIZE:typeStr=" (plog file size)";prchar=-1;break;case TAG_FILE_CHECKSUM:typeStr=" (plog file checksum)";prchar=-1;break;case TAG_FOOTER_START:typeStr=" (footer entry start)";prchar=-1;break;case TAG_FOOTER_COMMENT:typeStr=" (footer comment)";prchar=-1;break;case TAG_CHECKSUM_ALG:typeStr=" (checksum algorithm)";prchar=-1;break;case TAG_MINE_UUID:typeStr=" (mine UUID)";prchar=0;break;case TAG_PLOGSEQ:typeStr=" (plog sequence)";prchar=-1;break;case TAG_FEATURES_1:typeStr=" (plog features #1)";prchar=-1;break;case TAG_PLOGNAME:typeStr=" (plog name)";prchar=0;break;case TAG_PLOG_FILENAME:typeStr=" (plog file name)";prchar=0;break;case TAG_APPLY_NAME:typeStr=" (apply name)";prchar=0;break;case TAG_ROW_COUNT:typeStr=" (row count)";prchar=-1;break;case TAG_DBID:typeStr=" (DBID)";prchar=-1;break;case TAG_THREADSEQ:typeStr=" (thread and seq#)";prchar=-1;break;case TAG_LOWSCN:typeStr=" (first SCN)";prchar=-1;break;case TAG_HIGHSCN:typeStr=" (last SCN)";prchar=-1;break;case TAG_PREIMAGE:typeStr=" (column old value)";prchar=1;break;case TAG_POSTIMAGE:typeStr=" (column new value)";prchar=1;break;case TAG_KEYIMAGE:typeStr=" (column supplemental logging value)";prchar=1;break;case TAG_LOBDATA:typeStr=" (LOB data)";prchar=2;break;case TAG_COL_ID:typeStr=" (column id)";prchar=-1;break;case TAG_COL_NAME:typeStr=" (column name)";prchar=0;break;case TAG_COL_TYPE:typeStr=" (column type)";prchar=0;break;case TAG_OBJ_ID:typeStr=" (object id)";prchar=-1;break;case TAG_OBJ_NAME:typeStr=" (object name)";prchar=0;break;case TAG_OBJ_OWNER:typeStr=" (object owner)";prchar=0;break;case TAG_LCR_ID:typeStr=" (LCR sequence id)";prchar=0;break;case TAG_SAVEPOINT_ID:typeStr=" (savepoint id)";prchar=0;break;case TAG_RBA:typeStr=" (RBA)";prchar=0;break;case TAG_COLUMN_SIGNATURE_PRE:typeStr=" (column signature pre)";prchar=-1;break;case TAG_COLUMN_SIGNATURE_POST:typeStr=" (column signature post)";prchar=-1;break;case TAG_COLUMN_SIGNATURE_KEY:typeStr=" (column signature key)";prchar=-1;break;case TAG_LOBOFFSET:typeStr=" (LOB offset)";prchar=-1;break;case TAG_LOB_POSITION:typeStr=" (LOB position one/first/next/last)";prchar=-1;break;case TAG_LOBLEN:typeStr=" (LOB length)";prchar=-1;break;case TAG_LOBLOCATOR:typeStr=" (LOB locator)";prchar=-1;break;case TAG_XID:typeStr=" (transaction id)";prchar=0;break;case TAG_SCN:typeStr=" (SCN)";prchar=0;break;case TAG_DTIME:typeStr=" (datetime)";prchar=-1;break;case TAG_AUDIT_SID:typeStr=" (SID)";prchar=0;break;case TAG_AUDIT_SERIAL:typeStr=" (serial#)";prchar=0;break;case TAG_AUDIT_CUSER:typeStr=" (current user)";prchar=0;break;case TAG_AUDIT_LUSER:typeStr=" (logon user)";prchar=0;break;case TAG_AUDIT_CLIINFO:typeStr=" (client info)";prchar=0;break;case TAG_AUDIT_OSUSER:typeStr=" (OS user)";prchar=0;break;case TAG_AUDIT_MACHINE:typeStr=" (machine name)";prchar=0;break;case TAG_AUDIT_OSTERM:typeStr=" (OS terminal)";prchar=0;break;case TAG_AUDIT_OSPROC:typeStr=" (OS process id)";prchar=0;break;case TAG_AUDIT_OSPROG:typeStr=" (OS program name)";prchar=0;break;case TAG_XID_NAME:typeStr=" (transaction name)";prchar=0;break;case TAG_LOGON_SCHEMA:typeStr=" (logon schema)";prchar=0;break;case TAG_CURRENT_SCHEMA:typeStr=" (current schema)";prchar=0;break;case TAG_SQL_TEXT:typeStr=" (SQL text)";prchar=0;break;case TAG_DDL_SQLOP:typeStr=" (DDL operation)";prchar=-1;break;default :typeStr=" (???)";prchar=-1;break;}return typeStr;}  }
class C{  protected String readString(Reader reader){  if (reader == null) {    return null;  }  StringBuilder buffer=new StringBuilder();  try {    while (true) {      int c=reader.read();      if (c == -1) {        break;      }      buffer.append((char)c);    }    return buffer.toString();  } catch (  Exception e) {    assertTrue(false);    return null;  }}  }
class C{  private boolean isCharacterEscapeCharacter(char c){  return c == escape;}  }
class C{  private static void consumeAllInput(Process p) throws IOException {  InputStream in=null;  try {    in=new BufferedInputStream(p.getInputStream());    byte[] buf=new byte[1024];    while (in.read(buf,0,buf.length) >= 0)     ;  }  finally {    try {      if (in != null) {        in.close();      }    } catch (    IOException ignored) {    }  }}  }
class C{  public ARecord(Name name,int dclass,long ttl,InetAddress address){  super(name,Type.A,dclass,ttl);  if (Address.familyOf(address) != Address.IPv4)   throw new IllegalArgumentException("invalid IPv4 address");  addr=fromArray(address.getAddress());}  }
class C{  public static MultiKeyMap decorate(AbstractHashedMap map){  if (map == null) {    throw new IllegalArgumentException("Map must not be null");  }  if (map.size() > 0) {    throw new IllegalArgumentException("Map must be empty");  }  return new MultiKeyMap(map);}  }
class C{  public boolean match(ParameterizedType node,Object other){  if (!(other instanceof ParameterizedType)) {    return false;  }  ParameterizedType o=(ParameterizedType)other;  return safeSubtreeMatch(node.getType(),o.getType()) && safeSubtreeListMatch(node.typeArguments(),o.typeArguments());}  }
class C{  public String run(@Nonnull EnvVars launchEnv,@Nonnull String image,@CheckForNull String args,@CheckForNull String workdir,@Nonnull Map<String,String> volumes,@Nonnull Collection<String> volumesFromContainers,@Nonnull EnvVars containerEnv,@Nonnull String user,@Nonnull String entrypoint) throws IOException, InterruptedException {  ArgumentListBuilder argb=new ArgumentListBuilder();  argb.add("run","-t","-d","-u",user);  if (args != null) {    argb.addTokenized(args);  }  if (workdir != null) {    argb.add("-w",workdir);  }  for (  Map.Entry<String,String> volume : volumes.entrySet()) {    argb.add("-v",volume.getKey() + ":" + volume.getValue()+ ":rw");  }  for (  String containerId : volumesFromContainers) {    argb.add("--volumes-from",containerId);  }  for (  Map.Entry<String,String> variable : containerEnv.entrySet()) {    argb.add("-e");    argb.addMasked(variable.getKey() + "=" + variable.getValue());  }  argb.add("--entrypoint").add(entrypoint).add(image);  LaunchResult result=launch(launchEnv,false,null,argb);  if (result.getStatus() == 0) {    return result.getOut();  } else {    throw new IOException(String.format("Failed to run image '%s'. Error: %s",image,result.getErr()));  }}  }
class C{  private void updateBitmap(){  if (bitmapBuffer == null || haveBoundsChanged()) {    if (bitmapBuffer != null)     bitmapBuffer.recycle();    bitmapBuffer=Bitmap.createBitmap(getMeasuredWidth() > 0 ? getMeasuredWidth() : 1,getMeasuredHeight() > 0 ? getMeasuredHeight() : 1,Bitmap.Config.ARGB_8888);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.909 -0500",hash_original_method="DCB4E4732715D068A4BB6AF51135E41B",hash_generated_method="E7066A332B9B947C96E6CE4759DE1E6C") public void compactBuffer(){  if (offset != buffer.length) {    byte[] newBuffer=new byte[offset];    System.arraycopy(buffer,0,newBuffer,0,offset);    buffer=newBuffer;  }}  }
class C{  public List<byte[]> parse(byte[] bytes,int offset,int length){  List<byte[]> result=new ArrayList<>();  for (int i=offset; i < offset + length; i++) {    if (buffer.length == position) {      byte[] tmp=new byte[buffer.length * 2];      System.arraycopy(buffer,0,tmp,0,buffer.length);      buffer=tmp;    }    byte b=bytes[i];    buffer[position++]=b;    if (waitingForChecksum && (position - hashPosition) == 2) {      waitingForChecksum=false;      byte[] tmp=new byte[position];      System.arraycopy(buffer,0,tmp,0,position);      position=0;      result.add(tmp);    } else     if (b == '#') {      waitingForChecksum=true;      hashPosition=position;    }  }  return result;}  }
class C{  private Signature createSignature(String accession,String name,SignatureLibraryRelease release){  Model model=new Model(accession,name,null);  return new Signature(accession,name,null,null,null,release,Collections.singleton(model));}  }
class C{  public Builder permitAll(){  return disable(ALL_THREAD_DETECT_BITS);}  }
class C{  private StandardJavaTypeMapping(){  instanceNotAllowed(getClass());}  }
class C{  public void removeRealizingClass(ClassType type){  if (null == realizingClasses) {    return;  }  realizingClasses.remove(type);}  }
class C{  public static void main(String[] args) throws Exception {  new LaunchTool().start(args);}  }
class C{  public void checkAllReceivingAddressesAppearInWallet(Wallet wallet){  List<WalletAddressBookData> toRemove=new ArrayList<WalletAddressBookData>();  if (wallet != null) {    Iterator<WalletAddressBookData> iterator=receivingAddresses.iterator();    while (iterator.hasNext()) {      boolean addressMatchesKey=false;      WalletAddressBookData walletAddressBookData=iterator.next();      for (      ECKey key : wallet.getKeys()) {        if (walletAddressBookData.getAddress().equals(key.toAddress(MultiBit.getBitcoinController().getModel().getNetworkParameters()).toString())) {          addressMatchesKey=true;          break;        }      }      if (!addressMatchesKey) {        toRemove.add(walletAddressBookData);        log.debug("Removed receiving address " + walletAddressBookData.getAddress() + " because it did not match a key in the wallet '"+ wallet.getDescription()+ "'");      }    }    receivingAddresses.removeAll(toRemove);  }}  }
class C{  public boolean supportsConversion(Class<?> targetType,Object valueToConvert){  boolean rVal=false;  if ((valueToConvert instanceof Date) || ((valueToConvert instanceof JavaFormatForObject) && (((JavaFormatForObject)valueToConvert).getForObject() instanceof Date))) {    rVal=true;  }  return (rVal);}  }
class C{  public NoRouteToHostException(String msg){  super(msg);}  }
class C{  public void unmutePublishedMedia(String participantId) throws RoomException {  log.debug("Request [UNMUTE_PUBLISHED] muteType={} ({})",participantId);  Participant participant=getParticipant(participantId);  String name=participant.getName();  if (participant.isClosed()) {    throw new RoomException(Code.USER_CLOSED_ERROR_CODE,"Participant '" + name + "' has been closed");  }  if (!participant.isStreaming()) {    throw new RoomException(Code.USER_NOT_STREAMING_ERROR_CODE,"Participant '" + name + "' is not streaming media");  }  participant.unmutePublishedMedia();}  }
class C{  public void save(TemplatePersistenceData[] templates,Writer writer) throws IOException {  save(templates,new StreamResult(writer));}  }
class C{  default LazyFutureStream<T> toFutureStream(){  return new LazyReact().ofAsync(this);}  }
class C{  public BoundThisTypeRef createBoundThisTypeRef(){  BoundThisTypeRefImpl boundThisTypeRef=new BoundThisTypeRefImpl();  return boundThisTypeRef;}  }
class C{  @Unpreemptible("Don't allow preemption when we're not in a sane state. " + "Code can throw exceptions so not uninterruptible.") @Entrypoint public Object exitFromJNI(int offset){  RVMThread.leaveJNIFromCallIntoNative();  JNIRefsTop=0;  if (JNIRefsSavedFP > 0) {    JNIRefsTop=JNIRefsSavedFP - BYTES_IN_ADDRESS;    JNIRefsSavedFP=JNIRefs.get(JNIRefsSavedFP >> LOG_BYTES_IN_ADDRESS).toInt();  }  if (pendingException != null) {    throwPendingException();  }  Object result;  if (offset == 0) {    result=null;  } else   if (offset < 0) {    result=JNIGlobalRefTable.ref(offset);  } else {    result=Magic.addressAsObject(JNIRefs.get(offset >> LOG_BYTES_IN_ADDRESS));  }  return result;}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  handler.pushElemTemplateElement(elem);}  }
class C{  public void testWeightedOR() throws Exception {  Map<String,Float> weights=new LinkedHashMap<>();  weights.put("field0",5f);  weights.put("field1",10f);  BooleanQuery.Builder expected=new BooleanQuery.Builder();  BooleanQuery.Builder foo=new BooleanQuery.Builder();  Query field0=new TermQuery(new Term("field0","foo"));  field0=new BoostQuery(field0,5f);  foo.add(field0,Occur.SHOULD);  Query field1=new TermQuery(new Term("field1","foo"));  field1=new BoostQuery(field1,10f);  foo.add(field1,Occur.SHOULD);  expected.add(foo.build(),Occur.SHOULD);  BooleanQuery.Builder bar=new BooleanQuery.Builder();  field0=new TermQuery(new Term("field0","bar"));  field0=new BoostQuery(field0,5f);  bar.add(field0,Occur.SHOULD);  field1=new TermQuery(new Term("field1","bar"));  field1=new BoostQuery(field1,10f);  bar.add(field1,Occur.SHOULD);  expected.add(bar.build(),Occur.SHOULD);  Analyzer analyzer=new MockAnalyzer(random());  SimpleQueryParser parser=new SimpleQueryParser(analyzer,weights);  assertEquals(expected.build(),parser.parse("foo|bar"));}  }
class C{  protected MoreOp_Impl(){  super();}  }
class C{  public boolean askForResources(final ItemParserResult res,final EventRaiser npc,final Player player){  int amount=res.getAmount();  String productName=res.getChosenItemName();  if (getMaximalAmount(productName,player) < amount) {    npc.say("I can only " + getProductionActivity() + " "+ Grammar.quantityplnoun(amount,productName,"a")+ " if you bring me "+ getRequiredResourceNamesWithHashes(productName,amount)+ ".");    return false;  } else {    res.setAmount(amount);    npc.say("I need you to fetch me " + getRequiredResourceNamesWithHashes(productName,amount) + " for this job, which will take "+ TimeUtil.approxTimeUntil(getProductionTime(productName,amount))+ ". Do you have what I need?");    return true;  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public OMDistance(double[] llPoints,int units,int lType,Length distanceUnits){  this(llPoints,units,lType,-1,distanceUnits);}  }
class C{  public static BootstrapSession authorized(String endpoint,Identity clientIdentity){  return new BootstrapSession(endpoint,clientIdentity,true);}  }
class C{  public static double[] centroidLonLat(final Way way){  if (way == null) {    return null;  }  List<Node> vertices=way.getNodes();  if (way.isClosed()) {    double A=0;    double Y=0;    double X=0;    int vs=vertices.size();    for (int i=0; i < vs; i++) {      double x1=vertices.get(i).getLon() / 1E7D;      double y1=GeoMath.latE7ToMercator(vertices.get(i).getLat());      double x2=vertices.get((i + 1) % vs).getLon() / 1E7D;      double y2=GeoMath.latE7ToMercator(vertices.get((i + 1) % vs).getLat());      A=A + (x1 * y2 - x2 * y1);      X=X + (x1 + x2) * (x1 * y2 - x2 * y1);      Y=Y + (y1 + y2) * (x1 * y2 - x2 * y1);    }    Y=GeoMath.mercatorToLat(Y / (3 * A));    X=X / (3 * A);    double result[]={X,Y};    return result;  } else {    double L=0;    double Y=0;    double X=0;    int vs=vertices.size();    for (int i=0; i < (vs - 1); i++) {      double x1=vertices.get(i).getLon() / 1E7D;      double y1=GeoMath.latE7ToMercator(vertices.get(i).getLat());      double x2=vertices.get(i + 1).getLon() / 1E7D;      double y2=GeoMath.latE7ToMercator(vertices.get((i + 1)).getLat());      double len=Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));      L=L + len;      X=X + len * (x1 + x2) / 2;      Y=Y + len * (y1 + y2) / 2;    }    Y=GeoMath.mercatorToLat(Y / L);    X=X / L;    double result[]={X,Y};    return result;  }}  }
class C{  public static CharSequence partialEscape(CharSequence s){  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == '\\' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '/' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?') {      sb.append('\\');    }    sb.append(c);  }  return sb;}  }
class C{  protected int engineGenerateSecret(byte[] sharedSecret,int offset) throws IllegalStateException, ShortBufferException {  if (generateSecret == false) {    throw new IllegalStateException("Key agreement has not been completed yet");  }  if (sharedSecret == null) {    throw new ShortBufferException("No buffer provided for shared secret");  }  BigInteger modulus=init_p;  int expectedLen=(modulus.bitLength() + 7) >>> 3;  if ((sharedSecret.length - offset) < expectedLen) {    throw new ShortBufferException("Buffer too short for shared secret");  }  generateSecret=false;  byte[] secret=this.y.modPow(this.x,modulus).toByteArray();  if (secret.length == expectedLen) {    System.arraycopy(secret,0,sharedSecret,offset,secret.length);  } else {    if (secret.length < expectedLen) {      System.arraycopy(secret,0,sharedSecret,offset + (expectedLen - secret.length),secret.length);    } else {      if ((secret.length == (expectedLen + 1)) && secret[0] == 0) {        System.arraycopy(secret,1,sharedSecret,offset,expectedLen);      } else {        throw new ProviderException("Generated secret is out-of-range");      }    }  }  return expectedLen;}  }
class C{  public Vertex checkRelationTargetForAllWords(Collection<Relationship> words,Vertex source,Vertex type,Vertex target,Network network){  if (words != null && !target.instanceOf(Primitive.WORD)) {    Set<Vertex> processed=new HashSet<Vertex>();    processed.add(target);    for (    Relationship word : words) {      Collection<Relationship> otherMeanings=word.getTarget().getRelationships(Primitive.MEANING);      if (otherMeanings != null) {        for (        Relationship meaning : otherMeanings) {          if (!processed.contains(meaning.getTarget())) {            processed.add(meaning.getTarget());            if (source.hasOrInheritsRelationship(type,meaning.getTarget())) {              return network.createVertex(Primitive.TRUE);            } else             if (source.hasOrInheritsInverseRelationship(type,meaning.getTarget())) {              return network.createVertex(Primitive.FALSE);            }          }        }      }    }  }  return null;}  }
class C{  protected int createElementValue(String value,String name,boolean isExpenseType){  log.config(name);  MElementValue ev=new MElementValue(Env.getCtx(),value,name,null,isExpenseType ? MElementValue.ACCOUNTTYPE_Expense : MElementValue.ACCOUNTTYPE_Revenue,MElementValue.ACCOUNTSIGN_Natural,false,false,null);  ev.setAD_Org_ID(m_AD_Org_ID);  ev.setC_Element_ID(m_C_Element_ID);  if (!ev.save())   log.log(Level.WARNING,"C_ElementValue_ID not created");  return ev.getC_ElementValue_ID();}  }
class C{  public Iterator<String> keyIterator(){  return mAttributes.keySet().iterator();}  }
class C{  public boolean addSubRegion(RegionSubRegionSnapshot snap){  if (subRegionSnapshots.contains(snap)) {    return true;  }  if (subRegionSnapshots.add(snap)) {    snap.setParent(this);    return true;  }  return false;}  }
class C{  public static boolean startsWithIgnoreCase(String s,String start){  return s.length() >= start.length() && s.substring(0,start.length()).equalsIgnoreCase(start);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long code=getLong(stack);  stack.getUIMgrSafe().removeIRCodeForUE(code,stack.getUIMgrSafe().getUECodeForIRCode(code));  return null;}  }
class C{  @Override public synchronized boolean containsAll(Collection<?> collection){  return super.containsAll(collection);}  }
class C{  private void computeSummary(int[] constantPool){  int calleeSize=0;  if (isSynchronized()) {    summaryFlags|=HAS_SYNCH;    calleeSize+=2 * SYNCH_COST;  }  BytecodeStream bcodes=getBytecodes();  while (bcodes.hasMoreBytecodes()) {switch (bcodes.nextInstruction()) {case JBC_iaload:case JBC_laload:case JBC_faload:case JBC_daload:case JBC_aaload:case JBC_baload:case JBC_caload:case JBC_saload:      summaryFlags|=HAS_ARRAY_READ;    calleeSize+=ARRAY_LOAD_COST;  break;case JBC_iastore:case JBC_lastore:case JBC_fastore:case JBC_dastore:case JBC_bastore:case JBC_castore:case JBC_sastore:summaryFlags|=HAS_ARRAY_WRITE;calleeSize+=ARRAY_STORE_COST;break;case JBC_aastore:summaryFlags|=HAS_ARRAY_WRITE;calleeSize+=ARRAY_STORE_COST + STORE_CHECK_COST;break;case JBC_iadd:case JBC_fadd:case JBC_dadd:case JBC_isub:case JBC_fsub:case JBC_dsub:case JBC_imul:case JBC_fmul:case JBC_dmul:case JBC_idiv:case JBC_fdiv:case JBC_ddiv:case JBC_irem:case JBC_frem:case JBC_drem:case JBC_ineg:case JBC_fneg:case JBC_dneg:case JBC_ishl:case JBC_ishr:case JBC_lshr:case JBC_iushr:case JBC_iand:case JBC_ior:case JBC_ixor:case JBC_iinc:calleeSize+=SIMPLE_OPERATION_COST;break;case JBC_ladd:case JBC_lsub:case JBC_lmul:case JBC_ldiv:case JBC_lrem:case JBC_lneg:case JBC_lshl:case JBC_lushr:case JBC_land:case JBC_lor:case JBC_lxor:calleeSize+=LONG_OPERATION_COST;break;case JBC_int2byte:case JBC_int2char:case JBC_int2short:calleeSize+=SIMPLE_OPERATION_COST;break;case JBC_i2l:case JBC_l2i:calleeSize+=LONG_OPERATION_COST;break;case JBC_i2f:case JBC_i2d:case JBC_l2f:case JBC_l2d:case JBC_f2i:case JBC_f2l:case JBC_f2d:case JBC_d2i:case JBC_d2l:case JBC_d2f:calleeSize+=CALL_COST;break;case JBC_lcmp:case JBC_fcmpl:case JBC_fcmpg:case JBC_dcmpl:case JBC_dcmpg:calleeSize+=SIMPLE_OPERATION_COST;break;case JBC_ifeq:case JBC_ifne:case JBC_iflt:case JBC_ifge:case JBC_ifgt:case JBC_ifle:case JBC_if_icmpeq:case JBC_if_icmpne:case JBC_if_icmplt:case JBC_if_icmpge:case JBC_if_icmpgt:case JBC_if_icmple:case JBC_if_acmpeq:case JBC_if_acmpne:case JBC_ifnull:case JBC_ifnonnull:summaryFlags|=HAS_COND_BRANCH;if (bcodes.getBranchOffset() < 0) summaryFlags|=HAS_BACK_BRANCH;calleeSize+=SIMPLE_OPERATION_COST;continue;case JBC_goto:if (bcodes.getBranchOffset() < 0) summaryFlags|=HAS_BACK_BRANCH;calleeSize+=SIMPLE_OPERATION_COST;continue;case JBC_goto_w:if (bcodes.getWideBranchOffset() < 0) summaryFlags|=HAS_BACK_BRANCH;calleeSize+=SIMPLE_OPERATION_COST;continue;case JBC_jsr:case JBC_jsr_w:summaryFlags|=HAS_JSR;calleeSize+=JSR_COST;break;case JBC_tableswitch:case JBC_lookupswitch:summaryFlags|=HAS_SWITCH;calleeSize+=SWITCH_COST;break;case JBC_putstatic:case JBC_putfield:summaryFlags|=HAS_FIELD_WRITE;calleeSize+=SIMPLE_OPERATION_COST;break;case JBC_getstatic:summaryFlags|=HAS_FIELD_READ;FieldReference fldRef=bcodes.getFieldReference(constantPool);if (fldRef.getFieldContentsType().isPrimitiveType()) {RVMField fld=fldRef.peekResolvedField();if (fld == null || !fld.isFinal()) {calleeSize+=SIMPLE_OPERATION_COST;}} else {calleeSize+=SIMPLE_OPERATION_COST;}continue;case JBC_getfield:summaryFlags|=HAS_FIELD_READ;calleeSize+=SIMPLE_OPERATION_COST;break;case JBC_invokevirtual:case JBC_invokespecial:case JBC_invokestatic:MethodReference meth=bcodes.getMethodReference(constantPool);if (meth.getType().isMagicType()) {summaryFlags|=HAS_MAGIC;calleeSize+=MAGIC_COST;} else {summaryFlags|=HAS_INVOKE;calleeSize+=CALL_COST;}continue;case JBC_invokeinterface:summaryFlags|=HAS_INVOKE;calleeSize+=CALL_COST;break;case JBC_invokedynamic:if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);break;case JBC_new:case JBC_newarray:case JBC_anewarray:summaryFlags|=HAS_ALLOCATION;calleeSize+=ALLOCATION_COST;break;case JBC_arraylength:calleeSize+=SIMPLE_OPERATION_COST;break;case JBC_athrow:summaryFlags|=HAS_THROW;calleeSize+=THROW_COST;break;case JBC_checkcast:case JBC_instanceof:calleeSize+=CLASS_CHECK_COST;break;case JBC_monitorenter:case JBC_monitorexit:summaryFlags|=HAS_SYNCH;calleeSize+=SYNCH_COST;break;case JBC_multianewarray:summaryFlags|=HAS_ALLOCATION;calleeSize+=CALL_COST;break;}bcodes.skipInstruction();}if (calleeSize > Character.MAX_VALUE) {summarySize=Character.MAX_VALUE;} else {summarySize=(char)calleeSize;}}  }
class C{  public AddMediumDialog(Component parent){  super(JOptionPane.getFrameForComponent(parent),resources.getString("AddMediumDialog.title"));  setModal(true);  listeners.put("OKButtonAction",new OKButtonAction());  listeners.put("CancelButtonAction",new CancelButtonAction());  getContentPane().add(createContentPanel(),BorderLayout.CENTER);  getContentPane().add(createButtonsPanel(),BorderLayout.SOUTH);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:12.405 -0500",hash_original_method="23592451CB50AFA841274AC3732C91A0",hash_generated_method="CBC4E30F7778F15DECD755991AE421F6") public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  @Override protected void initData(){}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_graph=graph;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(TestSimpleOomage.class);}  }
class C{  public MultiErrorException check(String fieldName,boolean valid,String messageKey,Object... args){  if (!valid)   errors.add(new FieldError(fieldName,messageKey,LemonUtil.getMessage(messageKey,args)));  return this;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  static private String[] alphaMixedNumericSpecial(){  String[] step1=StringFunctions.combineStringArrays(StringFunctions.alphaMixed(),StringFunctions.numeric);  return StringFunctions.combineStringArrays(step1,StringFunctions.special);}  }
class C{  public static Document createXMLBook(boolean readOnly,int updatePer,int addPer,int updateProField,int updateRegisterDate,AxSf axsf,FieldFormat fieldformat,Integer bookID,int page,Locale locale,Map extendedValues,String origen,String destino,String additionalInfo,SessionInformation sessionInformation){  String data=axsf.getFormat().getData();  FormFormat formFormat=new FormFormat(data);  longFormatter=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(I18N_DATE_LONGFORMAT));  shortFormatter=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(I18N_DATE_SHORTFORMAT));  Document document=DocumentHelper.createDocument();  Element root=document.addElement(XML_FRMDATA_TEXT);  addParams(updatePer,addPer,additionalInfo,root);  if (formFormat.getDlgDef() != null && formFormat.getDlgDef().getPagedefs() != null && !formFormat.getDlgDef().getPagedefs().isEmpty()) {    TreeMap pages=formFormat.getDlgDef().getPagedefs();    FPageDef pageDef=(FPageDef)pages.get(new Integer(page));    TreeMap ctrls=pageDef.getCtrldefs();    FCtrlDef ctrlDef=null;    int width=XMLUtils.convertWidth(formFormat.getDlgDef().getR() - formFormat.getDlgDef().getL());    int height=XMLUtils.convertWidth(formFormat.getDlgDef().getB() - formFormat.getDlgDef().getT());    String title="";    try {      title=axsf.getLocaleAttributePage(locale,pageDef.getTitle());    } catch (    Exception e) {    }    addPageData("",formFormat.getDlgDef().getPagedefs().size(),page,width,height,root);    for (Iterator it=ctrls.values().iterator(); it.hasNext(); ) {      ctrlDef=(FCtrlDef)it.next();      if (ctrlDef.getName().startsWith(IDOC_EDIT)) {        createTypeEdit(readOnly,ctrlDef,axsf,fieldformat,root,locale,extendedValues,updateProField,updateRegisterDate,origen,destino,sessionInformation.getCaseSensitive());      } else       if (ctrlDef.getName().startsWith(IDOC_STATIC)) {        String text=ctrlDef.getText();        try {          text=axsf.getLocaleAttributeNameForm(locale,text);        } catch (        Exception e) {        }        addControlTypeStatic(ctrlDef.getClassId(),ctrlDef.getStyle(),ctrlDef.getFldId(),text,ctrlDef.getL(),ctrlDef.getT(),ctrlDef.getR(),ctrlDef.getB(),ctrlDef.getFontName(),ctrlDef.getFontSize(),ctrlDef.getFontEnh(),ctrlDef.getFontColor(),ctrlDef.getRole(),root);      } else       if (ctrlDef.getName().startsWith(IDOC_BUTTON)) {        String text=ctrlDef.getText();        try {          text=axsf.getLocaleAttributeNameForm(locale,text);        } catch (        Exception e) {        }        addControlTypeButton(ctrlDef.getClassId(),ctrlDef.getStyle(),ctrlDef.getFldId(),text,ctrlDef.getL(),ctrlDef.getT(),ctrlDef.getR(),ctrlDef.getB(),root);      }    }  }  return document;}  }
class C{  public static AnnotatedTypeMirror groundMissingHierarchies(final Entry<AnnotatedTypeMirror,Set<AnnotationMirror>> typeToHierarchies,final Map<AnnotationMirror,AnnotationMirror> lowerBoundAnnos){  final Set<AnnotationMirror> presentHierarchies=typeToHierarchies.getValue();  final Set<AnnotationMirror> missingAnnos=new LinkedHashSet<>();  for (  AnnotationMirror top : lowerBoundAnnos.keySet()) {    if (!presentHierarchies.contains(top)) {      missingAnnos.add(lowerBoundAnnos.get(top));    }  }  if (!missingAnnos.isEmpty()) {    AnnotatedTypeMirror copy=typeToHierarchies.getKey().deepCopy();    copy.replaceAnnotations(missingAnnos);    return copy;  }  return typeToHierarchies.getKey();}  }
class C{  public void resolve(Chain chain,int target){  boolean changed=false;  State newState=state;  for (; chain != null; chain=chain.next) {    Assert.check(state != chain.state && (target > chain.pc || state.stacksize == 0));    if (target >= cp) {      target=cp;    } else     if (get1(target) == goto_) {      if (fatcode)       target=target + get4(target + 1); else       target=target + get2(target + 1);    }    if (get1(chain.pc) == goto_ && chain.pc + 3 == target && target == cp && !fixedPc) {      if (varDebugInfo) {        adjustAliveRanges(cp,-3);      }      cp=cp - 3;      target=target - 3;      if (chain.next == null) {        alive=true;        break;      }    } else {      if (fatcode)       put4(chain.pc + 1,target - chain.pc); else       if (target - chain.pc < Short.MIN_VALUE || target - chain.pc > Short.MAX_VALUE)       fatcode=true; else       put2(chain.pc + 1,target - chain.pc);      Assert.check(!alive || chain.state.stacksize == newState.stacksize && chain.state.nlocks == newState.nlocks);    }    fixedPc=true;    if (cp == target) {      changed=true;      if (debugCode)       System.err.println("resolving chain state=" + chain.state);      if (alive) {        newState=chain.state.join(newState);      } else {        newState=chain.state;        alive=true;      }    }  }  Assert.check(!changed || state != newState);  if (state != newState) {    setDefined(newState.defined);    state=newState;    pendingStackMap=needStackMap;  }}  }
class C{  @Override protected void chunkDone(){  if (skipBytes && getChunkRaw().id.equals(PngChunkFDAT.ID)) {    if (seqNumExpected >= 0) {      int seqNum=PngHelperInternal.readInt4fromBytes(skippedBytes,0);      if (seqNum != seqNumExpected)       throw new PngjInputException("bad chunk sequence for fDAT chunk " + seqNum + " expected "+ seqNumExpected);    }  }}  }
class C{  public ExecutionRegion basicGetHistoryRegion(){  return historyRegion;}  }
class C{  void jbInit() throws Exception {  this.setLayout(mainLayout);  mainLayout.setHgap(5);  mainLayout.setVgap(5);  this.add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.addActionListener(this);  centerLayout.setHgap(5);  centerLayout.setVgap(5);  centerLayout.setColumns(5);  centerLayout.setRows(0);  CenterPanel.setLayout(centerLayout);  this.add(CenterPanel,BorderLayout.NORTH);  CenterPanel.add(clientLabel);  CenterPanel.add(clientPick);  CenterPanel.add(tableLabel);  CenterPanel.add(tablePick);  CenterPanel.add(dryRun);  this.add(treePane,BorderLayout.CENTER);}  }
class C{  public Account findAccountById(final Integer id) throws PersistentModelException {  Account instance=m_accountHome.findById(id);  if (null == instance)   throw new PersistentModelException("Account not found for id: " + id);  return instance;}  }
class C{  int free(int lastUsedPage){  store.free(getPos(),false);  int freed=1;  boolean notUsed=false;  for (int i=0; i < pageCount; i++) {    int page=pageIds[i];    if (notUsed) {      store.freeUnused(page);    } else {      store.free(page,false);    }    freed++;    if (page == lastUsedPage) {      notUsed=true;    }  }  return freed;}  }
class C{  public java.util.ArrayList<TreeNode<E>> path(E e){  java.util.ArrayList<TreeNode<E>> list=new java.util.ArrayList<>();  TreeNode<E> current=root;  while (current != null) {    list.add(current);    if (e.compareTo(current.element) < 0) {      current=current.left;    } else     if (e.compareTo(current.element) > 0) {      current=current.right;    } else     break;  }  return list;}  }
class C{  static int findDominantColorByHue(Bitmap bitmap,int samples){  final int height=bitmap.getHeight();  final int width=bitmap.getWidth();  int sampleStride=(int)Math.sqrt((height * width) / samples);  if (sampleStride < 1) {    sampleStride=1;  }  float[] hsv=new float[3];  float[] hueScoreHistogram=new float[360];  float highScore=-1;  int bestHue=-1;  for (int y=0; y < height; y+=sampleStride) {    for (int x=0; x < width; x+=sampleStride) {      int argb=bitmap.getPixel(x,y);      int alpha=0xFF & (argb >> 24);      if (alpha < 0x80) {        continue;      }      int rgb=argb | 0xFF000000;      Color.colorToHSV(rgb,hsv);      int hue=(int)hsv[0];      if (hue < 0 || hue >= hueScoreHistogram.length) {        continue;      }      float score=hsv[1] * hsv[2];      hueScoreHistogram[hue]+=score;      if (hueScoreHistogram[hue] > highScore) {        highScore=hueScoreHistogram[hue];        bestHue=hue;      }    }  }  SparseArray<Float> rgbScores=new SparseArray<Float>();  int bestColor=0xff000000;  highScore=-1;  for (int y=0; y < height; y+=sampleStride) {    for (int x=0; x < width; x+=sampleStride) {      int rgb=bitmap.getPixel(x,y) | 0xff000000;      Color.colorToHSV(rgb,hsv);      int hue=(int)hsv[0];      if (hue == bestHue) {        float s=hsv[1];        float v=hsv[2];        int bucket=(int)(s * 100) + (int)(v * 10000);        float score=s * v;        Float oldTotal=rgbScores.get(bucket);        float newTotal=oldTotal == null ? score : oldTotal + score;        rgbScores.put(bucket,newTotal);        if (newTotal > highScore) {          highScore=newTotal;          bestColor=rgb;        }      }    }  }  return bestColor;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public void undo() throws CannotUndoException {  if (!canUndo()) {    throw new CannotUndoException();  }  hasBeenDone=false;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public RangeTable(Schema schema,Expression min,Expression max,boolean noColumns){  super(schema,NAME);  Column[] cols=noColumns ? new Column[0] : new Column[]{new Column("X",Value.LONG)};  this.min=min;  this.max=max;  setColumns(cols);}  }
class C{  private boolean addLinkIfValid(AnchorElement link,AnchorElement baseAnchor){  PageInfoAndText pageInfoAndText=getPageInfoAndText(link,baseAnchor);  if (pageInfoAndText != null) {    mAdjacentNumbersGroups.addPageInfo(pageInfoAndText.mPageInfo);    return true;  }  mAdjacentNumbersGroups.addGroup();  return false;}  }
class C{  public static String typeToString(int type){  String s;switch (type) {case MatDataTypes.miUNKNOWN:    s="unknown";  break;case MatDataTypes.miINT8:s="int8";break;case MatDataTypes.miUINT8:s="uint8";break;case MatDataTypes.miINT16:s="int16";break;case MatDataTypes.miUINT16:s="uint16";break;case MatDataTypes.miINT32:s="int32";break;case MatDataTypes.miUINT32:s="uint32";break;case MatDataTypes.miSINGLE:s="single";break;case MatDataTypes.miDOUBLE:s="double";break;case MatDataTypes.miINT64:s="int64";break;case MatDataTypes.miUINT64:s="uint64";break;case MatDataTypes.miMATRIX:s="matrix";break;case MatDataTypes.miCOMPRESSED:s="compressed";break;case MatDataTypes.miUTF8:s="uft8";break;case MatDataTypes.miUTF16:s="utf16";break;case MatDataTypes.miUTF32:s="utf32";break;default :s="unknown";}return s;}  }
class C{  public StringLexerSource(String string,boolean ppvalid) throws IOException {  super(new StringReader(string),ppvalid);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected int directStep(RouteInfo plan,RouteInfo fact){  if (fact.getHopCount() > 1)   return UNREACHABLE;  if (!plan.getTargetHost().equals(fact.getTargetHost()))   return UNREACHABLE;  if (plan.isSecure() != fact.isSecure())   return UNREACHABLE;  if ((plan.getLocalAddress() != null) && !plan.getLocalAddress().equals(fact.getLocalAddress()))   return UNREACHABLE;  return COMPLETE;}  }
class C{  public GridNioSslFilter(SSLContext sslCtx,boolean directBuf,ByteOrder order,IgniteLogger log){  super("SSL filter");  this.log=log;  this.sslCtx=sslCtx;  this.directBuf=directBuf;  this.order=order;}  }
class C{  private static String readFile(String path){  BufferedReader br=null;  String content=null;  try {    br=new BufferedReader(new FileReader(path));    content=br.readLine();  } catch (  Exception e) {    log.warn("Ignoring failure during reading the file({})",path,e);  } finally {    try {      if (br != null) {        br.close();      }    } catch (    IOException ex) {      log.debug("Ignoring failure during closing the buffer reader",ex);    }  }  return content;}  }
class C{  protected TypeVariableSubstitutor createTypeVariableSubstitutor(){  return new TypeVariableSubstitutor();}  }
class C{  private boolean isKanjiIterationMark(char c){  if (normalizeKanji) {    return c == KANJI_ITERATION_MARK;  } else {    return false;  }}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  public static void write(String fileName,Table table,String missing) throws IOException {  try (CSVWriter writer=new CSVWriter(new FileWriter(fileName))){    String[] header=new String[table.columnCount()];    for (int c=0; c < table.columnCount(); c++) {      header[c]=table.column(c).name();    }    writer.writeNext(header);    for (int r=0; r < table.rowCount(); r++) {      String[] entries=new String[table.columnCount()];      for (int c=0; c < table.columnCount(); c++) {        table.get(c,r);        entries[c]=table.get(c,r);      }      writer.writeNext(entries);    }  } }  }
class C{  public boolean isActiveGraph(final IGraphPanel panel){  return m_tabbedPane.getSelectedComponent() == panel.getPanel();}  }
class C{  public int readInt(){  int x=0;  for (int i=0; i < 4; i++) {    char c=readChar();    x<<=8;    x|=c;  }  return x;}  }
class C{  protected void prepareForUIInstall(){  drawingCache=new Hashtable<TreePath,Boolean>(7);  leftToRight=BasicGraphicsUtils.isLeftToRight(tree);  stopEditingInCompleteEditing=true;  lastSelectedRow=-1;  leadRow=-1;  preferredSize=new Dimension();  largeModel=tree.isLargeModel();  if (getRowHeight() <= 0)   largeModel=false;  setModel(tree.getModel());}  }
class C{  public BluetoothPeerNetwork(){}  }
class C{  @Override public Property readProperty(final InputStream inputStream,final Function<Attachable<Property>,Property> propertyAttachMethod) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  public ConvertToCorrMatixAction(DataEditor editor){  super("Correlation Matrix");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  public void testJavadocWithoutStartingAsterisks() throws Exception {  String source="    /**\n" + "     Some text\n" + "more text\n"+ "\t and even more\n"+ "     \n"+ "     @throws Exception\n"+ "@deprecated"+ "     */\n"+ "public class Foo{}";  JavaSource javaSource=builder.addSource(new StringReader(source));  JavaClass javaClass=javaSource.getClasses().get(0);  assertEquals("Some text\nmore text\nand even more",javaClass.getComment());  assertEquals("throws",javaClass.getTags().get(0).getName());  assertEquals("Exception",javaClass.getTags().get(0).getValue());  assertEquals("deprecated",javaClass.getTags().get(1).getName());}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (estimatedBayesIm == null) {    throw new NullPointerException();  }  if (dataSet == null) {    throw new NullPointerException();  }}  }
class C{  public HolderInt(){}  }
class C{  private byte[] generateResponseAuth(String username,char[] passwd,byte[] cnonce,int nonceCount,byte[] authzidBytes) throws SaslException {  try {    byte[] responseValue=generateResponseValue("",digestUri,negotiatedQop,username,negotiatedRealm,passwd,nonce,cnonce,nonceCount,authzidBytes);    byte[] challenge=new byte[responseValue.length + 8];    System.arraycopy("rspauth=".getBytes(encoding),0,challenge,0,8);    System.arraycopy(responseValue,0,challenge,8,responseValue.length);    return challenge;  } catch (  NoSuchAlgorithmException e) {    throw new SaslException("DIGEST-MD5: problem generating response",e);  }catch (  IOException e) {    throw new SaslException("DIGEST-MD5: problem generating response",e);  }}  }
class C{  protected boolean useTeleportScroll(final Player player,final String targetZoneName,final int x,final int y,int timeInTurns){  final StendhalRPZone targetZone=SingletonRepository.getRPWorld().getZone(targetZoneName);  if (targetZone == null) {    logUnknownZone(targetZoneName);    return false;  } else {    createWarningBeforeRetransport(player,targetZoneName,timeInTurns);    createReTransportTimer(player,timeInTurns);    return teleportPlayer(player,x,y,targetZone);  }}  }
class C{  private Resource packIcon(int dpi,Bitmap icon){  Resource res=new Resource();  res.dpi=dpi;  ByteArrayOutputStream os=new ByteArrayOutputStream();  if (icon.compress(IMAGE_FORMAT,IMAGE_COMPRESSION_QUALITY,os)) {    res.data=os.toByteArray();  }  return res;}  }
class C{  public Integer waitForId(){  try {    waitForRepliesUninterruptibly();  } catch (  ReplyException e) {    logger.debug("{} waitBucketSizes ignoring exception {}",getClass().getName(),e.getMessage(),e);  }synchronized (this) {    return this.returnValue;  }}  }
class C{  protected AbstractNotificationHandler(){}  }
class C{  public boolean registerProducer(IProducer producer,Class<?> iface){  if (producer != null && iface != null && iface.isInterface()) {    Set<IProducer> producers=producerMap.get(iface);    if (producers == null) {      producers=new HashSet<IProducer>();      producerMap.put(iface,producers);    }    return producers.add(producer);  } else   return true;}  }
class C{  private String format(StellarFunctionInfo info){  StringBuffer ret=new StringBuffer();  ret.append(info.getName() + "\n");  ret.append(String.format("Description: %-60s\n\n",info.getDescription()));  if (info.getParams().length > 0) {    ret.append("Arguments:\n");    for (    String param : info.getParams()) {      ret.append(String.format("\t%-60s\n",param));    }    ret.append("\n");  }  ret.append(String.format("Returns: %-60s\n",info.getReturns()));  return ret.toString();}  }
class C{  private String generateStorageGroupName(StorageSystem storage,ExportMask mask,Collection<Initiator> initiators,StorageGroupPolicyLimitsParam storageGroupPolicyLimitsParam){  String storageGroupCustomTemplateName=CustomConfigConstants.VMAX_HOST_STORAGE_GROUP_MASK_NAME;  String exportType=ExportMaskUtils.getExportType(_dbClient,mask);  if (ExportGroupType.Cluster.name().equals(exportType)) {    storageGroupCustomTemplateName=CustomConfigConstants.VMAX_CLUSTER_STORAGE_GROUP_MASK_NAME;  }  DataSource sgDataSource=ExportMaskUtils.getExportDatasource(storage,new ArrayList<Initiator>(initiators),dataSourceFactory,storageGroupCustomTemplateName);  String policyName=storageGroupPolicyLimitsParam.getAutoTierPolicyName();  if (storage.checkIfVmax3()) {    policyName=policyName.replaceAll(Constants.SMIS_PLUS_REGEX,Constants.UNDERSCORE_DELIMITER);  }  policyName=_helper.isFastPolicy(policyName) ? policyName : StorageGroupPolicyLimitsParam.NON_FAST_POLICY;  String hostIOLimitBandwidth="";  String hostIOLimitIops="";  if (storageGroupPolicyLimitsParam.isHostIOLimitBandwidthSet()) {    hostIOLimitBandwidth=StorageGroupPolicyLimitsParam.BANDWIDTH + storageGroupPolicyLimitsParam.getHostIOLimitBandwidth();  }  if (storageGroupPolicyLimitsParam.isHostIOLimitIOPsSet()) {    hostIOLimitIops=StorageGroupPolicyLimitsParam.IOPS + storageGroupPolicyLimitsParam.getHostIOLimitIOPs();  }  sgDataSource.addProperty(CustomConfigConstants.AUTO_TIERING_POLICY_NAME,policyName);  sgDataSource.addProperty(CustomConfigConstants.HOST_IO_LIMIT_BANDWIDTH,hostIOLimitBandwidth);  sgDataSource.addProperty(CustomConfigConstants.HOST_IO_LIMIT_IOPS,hostIOLimitIops);  String baseStorageGroupName=customConfigHandler.getComputedCustomConfigValue(storageGroupCustomTemplateName,storage.getSystemType(),sgDataSource);  return _helper.generateGroupName(_helper.getExistingStorageGroupsFromArray(storage),baseStorageGroupName);}  }
class C{  public PlatformDotNetSessionData lock(UUID lockNodeId,long lockId,Timestamp lockTime){  assert !isLocked();  PlatformDotNetSessionData res=copyWithoutLockInfo();  res.lockId=lockId;  res.lockNodeId=lockNodeId;  res.lockTime=lockTime;  return res;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.267 -0400",hash_original_method="E5475A05CDD9177DE75AFB14EE0048FD",hash_generated_method="830D524B6766D1E16A0D086A85A876F1") private void clearIndexToFirst(){  for (; ; ) {    Index<K,V> q=head;    for (; ; ) {      Index<K,V> r=q.right;      if (r != null && r.indexesDeletedNode() && !q.unlink(r))       break;      if ((q=q.down) == null) {        if (head.right == null)         tryReduceLevel();        return;      }    }  }}  }
class C{  private WeatherUtils(){  throw new AssertionError();}  }
class C{  public static void main(String[] args) throws Exception {  new SobolAnalysis().start(args);}  }
class C{  public Note(Lifeline location,int number,String[] text,boolean consuming){  super(location.getDiagram(),location,location.getRightNeighbour(),text,Direction.RIGHT,0);  this.number=number;  this.consuming=consuming;  this.location=location;  padding=configuration().getNotePadding();  margin=configuration().getNoteMargin();  int totalTextHeight=textHeight();  setHeight(margin * 2 + padding + totalTextHeight);  setWidth(margin * 2 + padding * 2 + leftPadding() + rightPadding() + textWidth());  targets=new LinkedList<Point>();  targetId=0;  subId=-1;}  }
class C{  public SVGOMMultiImageElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public AttributeKey(String key,Class<T> clazz,@Nullable T defaultValue){  this(key,clazz,defaultValue,true);}  }
class C{  public static void main(String[] args) throws Exception {  processFile("TestCases.txt");  processFile("BMPTestCases.txt");  processFile("SupplementaryTestCases.txt");  bm();  slice();  escapes();  blankInput();  globalSubstitute();  stringbufferSubstitute();  substitutionBasher();  ceTest();  anchorTest();  matchesTest();  lookingAtTest();  patternMatchesTest();  lookbehindTest();  nullArgumentTest();  backRefTest();  groupCaptureTest();  caretTest();  charClassTest();  emptyPatternTest();  findIntTest();  group0Test();  longPatternTest();  octalTest();  ampersandTest();  negationTest();  splitTest();  appendTest();  caseFoldingTest();  commentsTest();  unixLinesTest();  replaceFirstTest();  gTest();  zTest();  serializeTest();  reluctantRepetitionTest();  multilineDollarTest();  dollarAtEndTest();  caretBetweenTerminatorsTest();  javaCharClassTest();  nonCaptureRepetitionTest();  notCapturedGroupCurlyMatchTest();  escapedSegmentTest();  literalPatternTest();  literalReplacementTest();  regionTest();  toStringTest();  negatedCharClassTest();  findFromTest();  boundsTest();  unicodeWordBoundsTest();  caretAtEndTest();  wordSearchTest();  hitEndTest();  toMatchResultTest();  surrogatesInClassTest();  removeQEQuotingTest();  namedGroupCaptureTest();  nonBmpClassComplementTest();  unicodePropertiesTest();  unicodeHexNotationTest();  unicodeClassesTest();  horizontalAndVerticalWSTest();  linebreakTest();  branchTest();  groupCurlyNotFoundSuppTest();  groupCurlyBackoffTest();  patternAsPredicate();  if (failure) {    throw new RuntimeException("RegExTest failed, 1st failure: " + firstFailure);  } else {    System.err.println("OKAY: All tests passed.");  }}  }
class C{  @Override public int lastIndexOf(Object elem){  if (!(elem instanceof CheckBoxListItem)) {    return super.lastIndexOf(new CheckBoxListItem(elem));  } else {    return super.lastIndexOf(elem);  }}  }
class C{  public Vector2i add(Vector2i v,Vector2i dest){  dest.x=x + v.x;  dest.y=y + v.y;  return dest;}  }
class C{  private void synchronizePrimaryKeys(){  resetDBObjects(DBObject_PrimaryKey.class);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"synchronizePrimaryKeys",new Object[]{m_objectTypes,m_direction});  m_counterUpd=new Integer(0);  m_totalUpd=new Integer(0);  m_counterDrp=new Integer(0);  String sourceVendor=m_source.getVendor();  String sourceCatalog=m_source.getCatalog();  String sourceSchema=m_source.getSchema();  String targetVendor=m_target.getVendor();  String targetCatalog=m_target.getCatalog();  String targetSchema=m_target.getSchema();  if (m_sourceMap != null) {    for (Iterator<String> pkIt=m_sourceMap.keySet().iterator(); pkIt.hasNext(); ) {      ArrayList<PreparedStatementWrapper> targetStmtUpdateFKs=null;      ArrayList<ArrayList<String>> targetFKColumns=null;      ArrayList<String> targetFKNames=null;      String pkKey=pkIt.next();      DBObject pk=m_sourceMap.get(pkKey);      DBObject_PrimaryKey_Table pkHeader=(DBObject_PrimaryKey_Table)pk.getHeaders().get(0);      String tableName=pkHeader.getTable();      String pkTableName=tableName.toUpperCase();      if (pkTableName.startsWith("AD_") && (!pkTableName.endsWith("_TRL")) && (!pkTableName.endsWith("LOG"))) {        for (Iterator<String> ndxIt=m_source.getIndexes().keySet().iterator(); ndxIt.hasNext(); ) {          String ndxKey=ndxIt.next();          DBObject ndx=m_source.getObjectByName(ndxKey,m_source.getIndexes());          DBObject_Index_Table ndxHeader=(DBObject_Index_Table)ndx.getHeaders().get(0);          String ndxTableName=ndxHeader.getTable().toUpperCase();          boolean ndxIsUnique=ndxHeader.isUnique();          if (ndxTableName.equals(pkTableName) && ndxIsUnique) {            DBObject table=m_source.getObjectByName(pkTableName,m_source.getTables());            HashMap<String,Integer> columnTypeMap=new HashMap<String,Integer>();            Vector<Integer> v=new Vector<Integer>(table.getContents().keySet());            java.util.Collections.sort(v);            for (Iterator<Integer> i=v.iterator(); i.hasNext(); ) {              Integer j=i.next();              DBObject_Table_Column col=(DBObject_Table_Column)table.getContents().get(j);              String columnName=col.getName();              int columnType=s_dbEngine.getDataTypeID(sourceVendor,col.getType());              columnTypeMap.put(columnName.toUpperCase(),columnType);            }            ArrayList<String> pkColumns=new ArrayList<String>();            ArrayList<Integer> pkTypes=new ArrayList<Integer>();            v=new Vector<Integer>(pk.getContents().keySet());            java.util.Collections.sort(v);            for (Iterator<Integer> i=v.iterator(); i.hasNext(); ) {              Integer j=i.next();              DBObject_PrimaryKey_Column col=(DBObject_PrimaryKey_Column)pk.getContents().get(j);              pkColumns.add(col.getColumn());              pkTypes.add(columnTypeMap.get(col.getColumn().toUpperCase()));            }            boolean isIndexValid=true;            ArrayList<String> ndxColumns=new ArrayList<String>();            ArrayList<Integer> ndxTypes=new ArrayList<Integer>();            v=new Vector<Integer>(ndx.getContents().keySet());            java.util.Collections.sort(v);            for (Iterator<Integer> i=v.iterator(); i.hasNext(); ) {              Integer j=i.next();              DBObject_Index_Column col=(DBObject_Index_Column)ndx.getContents().get(j);              String ndxColName=col.getColumn();              String ndxColNameUpper=ndxColName.toUpperCase();              Integer ndxColType=columnTypeMap.get(ndxColNameUpper);              if (ndxColType == null) {                if (ndxColNameUpper.startsWith("UPPER") || ndxColNameUpper.startsWith("LOWER")) {                  ndxColName=ndxColName.replaceAll(".*\\((.*?)\\).*","$1");                  ndxColNameUpper=ndxColName.toUpperCase();                  ndxColType=columnTypeMap.get(ndxColNameUpper);                }              }              if (ndxColType != null) {                ndxTypes.add(ndxColType);                ndxColumns.add(ndxColName);              } else {                isIndexValid=false;              }            }            if (isIndexValid) {              Savepoint sp=m_target.setSavepoint(tableName);              PreparedStatementWrapper sourceStmtFindPK=m_source.setPreparedStatement(s_dbEngine.sql_selectPreparedStatement(sourceVendor,sourceCatalog,sourceSchema,tableName,ndxColumns));              PreparedStatementWrapper targetStmtUpdatePK=m_target.setPreparedStatement(s_dbEngine.sql_updatePreparedStatement(targetVendor,targetCatalog,targetSchema,tableName,pkColumns,ndxColumns));              Statement targetStmt=m_target.setStatement();              ResultSet targetRs=m_target.executeQuery(targetStmt,s_dbEngine.sql_select(targetVendor,targetCatalog,targetSchema,tableName));              while (m_target.getResultSetNext(targetRs)) {                for (int i=0; i < ndxColumns.size(); i++) {                  String colName=ndxColumns.get(i);                  int colType=ndxTypes.get(i);                  int colIndex=i + 1;                  if (colType >= s_dbEngine.CLOB && colType <= s_dbEngine.NCLOB) {                    m_source.setPreparedStatementClob(sourceStmtFindPK,colIndex,m_target.getResultSetClob(targetRs,colName));                  } else                   if (colType >= s_dbEngine.BINTYPE_START && colType <= s_dbEngine.BINTYPE_END) {                    m_source.setPreparedStatementBytes(sourceStmtFindPK,colIndex,m_target.getResultSetBytes(targetRs,colName));                  } else {                    m_source.setPreparedStatementObject(sourceStmtFindPK,colIndex,m_target.getResultSetObject(targetRs,colName));                  }                }                ResultSet sourceRs=m_source.executeQuery(sourceStmtFindPK);                if (m_source.getResultSetNext(sourceRs)) {                  boolean pkmatch=true;                  for (Iterator<String> i=pkColumns.iterator(); i.hasNext(); ) {                    String columnName=i.next();                    if (!m_source.getResultSetString(sourceRs,columnName).equals(m_target.getResultSetString(targetRs,columnName)))                     pkmatch=false;                  }                  if (!pkmatch) {                    if (targetStmtUpdateFKs == null) {                      targetStmtUpdateFKs=new ArrayList<PreparedStatementWrapper>();                      targetFKColumns=new ArrayList<ArrayList<String>>();                      targetFKNames=new ArrayList<String>();                      if (m_source.getForeignKeys() != null) {                        for (Iterator<String> it=m_source.getForeignKeys().keySet().iterator(); it.hasNext(); ) {                          String key=it.next();                          DBObject obj=m_source.getForeignKeys().get(key);                          String fkName=obj.getName();                          DBObject_ForeignKey_Table objHeader=(DBObject_ForeignKey_Table)obj.getHeaders().get(0);                          DBObject localTable=m_source.getObjectByName(objHeader.getFTable(),m_source.getTables());                          DBObject foreignTable=m_source.getObjectByName(objHeader.getTable(),m_source.getTables());                          if (localTable.getName().equalsIgnoreCase(tableName)) {                            if (!localTable.getName().equalsIgnoreCase(foreignTable.getName())) {                              String fkForeignTableName=foreignTable.getName();                              ArrayList<String> fkForeignColumns=new ArrayList<String>();                              ArrayList<String> fkLocalColumns=new ArrayList<String>();                              for (Iterator<Integer> it2=obj.getContents().keySet().iterator(); it2.hasNext(); ) {                                Integer key2=it2.next();                                DBObject_ForeignKey_Column objContents=(DBObject_ForeignKey_Column)obj.getContents().get(key2);                                fkForeignColumns.add(objContents.getColumn());                                fkLocalColumns.add(objContents.getFColumn());                              }                              PreparedStatementWrapper targetStmtUpdateFK=m_target.setPreparedStatement(s_dbEngine.sqlAction_updateChildRecord(targetVendor,targetCatalog,targetSchema,fkForeignTableName,fkForeignColumns,tableName,fkLocalColumns,ndxColumns));                              targetStmtUpdateFKs.add(targetStmtUpdateFK);                              targetFKColumns.add(fkLocalColumns);                              targetFKNames.add(fkName);                            }                          }                        }                      }                    }                    for (int j=0; j < targetStmtUpdateFKs.size(); j++) {                      PreparedStatementWrapper targetStmtUpdateFK=targetStmtUpdateFKs.get(j);                      ArrayList<String> fkLocalColumns=targetFKColumns.get(j);                      for (int i=0; i < fkLocalColumns.size(); i++) {                        String colName=fkLocalColumns.get(i);                        int colType=pkTypes.get(i);                        int colIndex=i + 1;                        if (colType >= s_dbEngine.CLOB && colType <= s_dbEngine.NCLOB) {                          m_target.setPreparedStatementClob(targetStmtUpdateFK,colIndex,m_source.getResultSetClob(sourceRs,colName));                        } else                         if (colType >= s_dbEngine.BINTYPE_START && colType <= s_dbEngine.BINTYPE_END) {                          m_target.setPreparedStatementBytes(targetStmtUpdateFK,colIndex,m_source.getResultSetBytes(sourceRs,colName));                        } else {                          m_target.setPreparedStatementObject(targetStmtUpdateFK,colIndex,m_source.getResultSetObject(sourceRs,colName));                        }                      }                      for (int i=0; i < ndxColumns.size(); i++) {                        String colName=ndxColumns.get(i);                        int colType=ndxTypes.get(i);                        int colIndex=fkLocalColumns.size() + i + 1;                        if (colType >= s_dbEngine.CLOB && colType <= s_dbEngine.NCLOB) {                          m_target.setPreparedStatementClob(targetStmtUpdateFK,colIndex,m_source.getResultSetClob(sourceRs,colName));                        } else                         if (colType >= s_dbEngine.BINTYPE_START && colType <= s_dbEngine.BINTYPE_END) {                          m_target.setPreparedStatementBytes(targetStmtUpdateFK,colIndex,m_source.getResultSetBytes(sourceRs,colName));                        } else {                          m_target.setPreparedStatementObject(targetStmtUpdateFK,colIndex,m_source.getResultSetObject(sourceRs,colName));                        }                      }                      Integer sqlResult=m_target.executeUpdate(targetStmtUpdateFK,false);                      if (sqlResult != null) {                        logUpdateDetail(sqlResult,null);                      }                    }                    for (int i=0; i < pkColumns.size(); i++) {                      String colName=pkColumns.get(i);                      int colType=pkTypes.get(i);                      int colIndex=i + 1;                      if (colType >= s_dbEngine.CLOB && colType <= s_dbEngine.NCLOB) {                        m_target.setPreparedStatementClob(targetStmtUpdatePK,colIndex,m_source.getResultSetClob(sourceRs,colName));                      } else                       if (colType >= s_dbEngine.BINTYPE_START && colType <= s_dbEngine.BINTYPE_END) {                        m_target.setPreparedStatementBytes(targetStmtUpdatePK,colIndex,m_source.getResultSetBytes(sourceRs,colName));                      } else {                        m_target.setPreparedStatementObject(targetStmtUpdatePK,colIndex,m_source.getResultSetObject(sourceRs,colName));                      }                    }                    for (int i=0; i < ndxColumns.size(); i++) {                      String colName=ndxColumns.get(i);                      int colType=ndxTypes.get(i);                      int colIndex=pkColumns.size() + i + 1;                      if (colType >= s_dbEngine.CLOB && colType <= s_dbEngine.NCLOB) {                        m_target.setPreparedStatementClob(targetStmtUpdatePK,colIndex,m_source.getResultSetClob(sourceRs,colName));                      } else                       if (colType >= s_dbEngine.BINTYPE_START && colType <= s_dbEngine.BINTYPE_END) {                        m_target.setPreparedStatementBytes(targetStmtUpdatePK,colIndex,m_source.getResultSetBytes(sourceRs,colName));                      } else {                        m_target.setPreparedStatementObject(targetStmtUpdatePK,colIndex,m_source.getResultSetObject(sourceRs,colName));                      }                    }                    Integer sqlResult=m_target.executeUpdate(targetStmtUpdatePK,false);                    if (sqlResult != null) {                      logUpdateDetail(sqlResult,null);                      m_counterUpd=new Integer(m_counterUpd.intValue() + 1);                    }                    m_totalUpd=new Integer(m_totalUpd.intValue() + 1);                  }                  m_source.releaseResultSet(sourceRs);                }              }              m_source.releasePreparedStatement(sourceStmtFindPK);              m_target.releaseResultSet(targetRs);              m_target.releaseStatement(targetStmt);              m_target.releasePreparedStatement(targetStmtUpdatePK);              if (targetStmtUpdateFKs != null) {                for (Iterator<PreparedStatementWrapper> i=targetStmtUpdateFKs.iterator(); i.hasNext(); ) {                  m_target.releasePreparedStatement(i.next());                }                targetStmtUpdateFKs=null;                targetFKColumns=null;              }              m_target.releaseSavepoint(sp);            }          }        }      }    }    Savepoint sp=m_target.setSavepoint("deleteDuplicatePKs");    for (Iterator<String> pkIt=m_sourceMap.keySet().iterator(); pkIt.hasNext(); ) {      String pkKey=pkIt.next();      DBObject pk=m_sourceMap.get(pkKey);      DBObject_PrimaryKey_Table pkHeader=(DBObject_PrimaryKey_Table)pk.getHeaders().get(0);      String tableName=pkHeader.getTable();      String pkTableName=tableName.toUpperCase();      if (pkTableName.startsWith("AD_") && (!pkTableName.endsWith("_TRL")) && (!pkTableName.endsWith("LOG"))) {        ArrayList<String> pkColumns=new ArrayList<String>();        Vector<Integer> v=new Vector<Integer>(pk.getContents().keySet());        java.util.Collections.sort(v);        for (Iterator<Integer> i=v.iterator(); i.hasNext(); ) {          Integer j=i.next();          DBObject_PrimaryKey_Column col=(DBObject_PrimaryKey_Column)pk.getContents().get(j);          pkColumns.add(col.getColumn());        }        String sqlCommand=s_dbEngine.sqlAction_dropDuplicates(targetVendor,targetCatalog,targetSchema,tableName,pkColumns);        if (sqlCommand != null) {          Statement stmt=m_target.setStatement();          Integer sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);          if (sqlResult != null) {            logDropDetail(sqlResult,null);            m_counterDrp=new Integer(m_counterDrp.intValue() + 1);          }          m_target.releaseStatement(stmt);        }      }    }    m_target.releaseSavepoint(sp);  }  logResults();}  }
class C{  protected int[] fill(int[] array,int val){  for (int i=0; i < array.length; i++)   array[i]=val;  return array;}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public static boolean areEqual(Field destination,Field source){  return getGenericString(destination).equals(getGenericString(source));}  }
class C{  public void show(int state){  setVisibility(VISIBLE);  if (state == 0) {    pbLoading.setVisibility(GONE);    llRecordingStart.setVisibility(GONE);    ivRecordingCancel.setVisibility(VISIBLE);    tvNotify.setText(getResources().getString(R.string.recording_cancel));    tvNotify.setBackgroundResource(R.drawable.recording_text_bg);  } else   if (state == 1) {    pbLoading.setVisibility(GONE);    llRecordingStart.setVisibility(VISIBLE);    ivRecordingCancel.setVisibility(GONE);    tvNotify.setText(getResources().getString(R.string.recording_cancel_notice));    tvNotify.setBackgroundResource(R.drawable.transparent_bg);  } else {    pbLoading.setVisibility(VISIBLE);    llRecordingStart.setVisibility(GONE);    ivRecordingCancel.setVisibility(GONE);    tvNotify.setText(getResources().getString(R.string.recording_cancel_notice));    tvNotify.setBackgroundResource(R.drawable.transparent_bg);  }}  }
class C{  public void fadeInAllLayers(){  mTransitionState=TRANSITION_STARTING;  Arrays.fill(mIsLayerOn,true);  invalidateSelf();}  }
class C{  @Override public int samples(){  return sampleNumber_;}  }
class C{  public static int convertToColorInt(String argb) throws IllegalArgumentException {  if (!argb.startsWith("#")) {    argb="#" + argb;  }  return Color.parseColor(argb);}  }
class C{  public static boolean isNCName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME) != 0;}  }
class C{  public static String bytesToBase64(byte[] bytes){  if (bytes == null) {    return null;  }  return Base64.encodeToString(bytes,Base64.NO_WRAP);}  }
class C{  public void push(BoundaryPixel e,int greyValue){  if (!bitmask[greyValue]) {    bitmask[greyValue]=true;  }  stacks[greyValue].push(e);}  }
class C{  private boolean hasRemainingComments(){  return lastCommentIndex < comments.size() - 1;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void log(String message,Throwable exception){  myLogWriter.println(message);  exception.printStackTrace(myLogWriter);}  }
class C{  @Override public int size(){  return size;}  }
class C{  public UnrolledUnsafeCopierBuilder length(long length){  checkArgument(length >= 0);  this.length=length;  return this;}  }
class C{  @Override public void listChanged(ListEvent<E> listChanges){  doNotChangeDocument=true;  try {    super.listChanged(listChanges);  }  finally {    doNotChangeDocument=false;  }}  }
class C{  public T caseScopedElement(ScopedElement object){  return null;}  }
class C{  ServerContext reset(){  if (log != null) {    log.close();    storage.deleteLog(name);  }  if (snapshot != null) {    snapshot.close();    storage.deleteSnapshotStore(name);  }  log=storage.openLog(name);  snapshot=storage.openSnapshotStore(name);  StateMachine stateMachine=stateMachineFactory.get();  if (stateMachine instanceof Snapshottable) {    log.compactor().withDefaultCompactionMode(Compaction.Mode.SNAPSHOT);  } else {    log.compactor().withDefaultCompactionMode(Compaction.Mode.SEQUENTIAL);  }  this.stateMachine=new ServerStateMachine(stateMachine,this,stateContext);  return this;}  }
class C{  @Override public void onDestroyFloatView(View floatView){  ((ImageView)floatView).setImageDrawable(null);  mFloatBitmap.recycle();  mFloatBitmap=null;}  }
class C{  public static int binarySearch(int[] array,int startIndex,int endIndex,int value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  public void clear(int clearFlags){  if ((clearFlags & Port.CLEAR_SIMPLE_ERRORS) > 0) {    errorList.clear();  }  getInputPorts().clear(clearFlags);  getOutputPorts().clear(clearFlags);}  }
class C{  private void writeIndexTrailer(IndexOutput indexOut,long dirStart) throws IOException {  indexOut.writeLong(dirStart);}  }
class C{  public void parseUrl(String url) throws SQLException {  if (url.startsWith("jdbc:mysql:")) {    parseInternal(this,url,new Properties());    return;  }  String[] arr=new String[]{"jdbc:mysql:thin:","jdbc:mariadb:"};  for (  String prefix : arr) {    if (url.startsWith(prefix)) {      parseInternal(this,"jdbc:mysql:" + url.substring(prefix.length()),new Properties());      break;    }  }}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public final boolean isModified(boolean isEnable){  if (isStopped()) {    return true;  }  DependencyContainer dependencies=_dependencies;  if (dependencies == null) {    return true;  }  if (isEnable) {    boolean isModified=dependencies.isModified();    return isModified;  } else {    boolean isModified=isModified(getParent());    return isModified;  }}  }
class C{  public void discardUntil(long timeUs){  while (rollingBuffer.peekSample(sampleInfoHolder) && sampleInfoHolder.timeUs < timeUs) {    rollingBuffer.skipSample();    needKeyframe=true;  }  lastReadTimeUs=Long.MIN_VALUE;}  }
class C{  @MethodDesc(description="Return the status for all current replicators",usage="status()") public Map<String,String> status() throws Exception {  return getStatus();}  }
class C{  protected CCParticleSystem(String plistFile){}  }
class C{  @Override public void performBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState){  if (VERBOSE)   Log.v(TAG,"onBackup");  Journal in=readJournal(oldState);  if (!launcherIsReady()) {    dataChanged();    writeJournal(newState,in);    return;  }  Log.v(TAG,"lastBackupTime = " + in.t);  mKeys.clear();  applyJournal(in);  long newBackupTime=System.currentTimeMillis();  mBackupDataWasUpdated=false;  try {    backupFavorites(data);    backupScreens(data);    backupIcons(data);    backupWidgets(data);    HashSet<String> validKeys=new HashSet<String>();    for (    Key key : mKeys) {      validKeys.add(keyToBackupKey(key));    }    mExistingKeys.removeAll(validKeys);    for (    String deleted : mExistingKeys) {      if (VERBOSE)       Log.v(TAG,"dropping deleted item " + deleted);      data.writeEntityHeader(deleted,-1);      mBackupDataWasUpdated=true;    }    mExistingKeys.clear();    if (!mBackupDataWasUpdated) {      mBackupDataWasUpdated=false;    }    if (mBackupDataWasUpdated) {      mLastBackupRestoreTime=newBackupTime;      Journal state=getCurrentStateJournal();      writeRowToBackup(JOURNAL_KEY,state,data);    } else {      if (DEBUG)       Log.d(TAG,"Nothing was written during backup");    }  } catch (  IOException e) {    Log.e(TAG,"launcher backup has failed",e);  }  writeNewStateDescription(newState);}  }
class C{  public static void start(String[] args){  LOG.info("Starting Spring Application container");  SpringApplication springApplication=new SpringApplication(ODataServiceContainer.class);  springApplication.setBannerMode(OFF);  springApplication.run(args);  LOG.info("Spring application container started");}  }
class C{  public void dropItemInHand(boolean wholeStack){  ItemStack stack=getItemInHand();  if (stack == null || stack.getType() == Material.AIR || stack.getAmount() < 1) {    return;  }  ItemStack dropping=stack.clone();  if (!wholeStack) {    dropping.setAmount(1);  }  GlowItem dropped=drop(dropping);  if (dropped == null) {    return;  }  if (stack.getAmount() == 1 || wholeStack) {    setItemInHand(null);  } else {    ItemStack now=stack.clone();    now.setAmount(now.getAmount() - 1);    setItemInHand(now);  }}  }
class C{  public boolean hasNext(){  if (valuesIterator != null && valuesIterator.hasNext()) {    return true;  }  if (mapIterator == null) {    mapIterator=map.entrySet().iterator();  }  if (mapIterator.hasNext()) {    Map.Entry currentMapEntry=mapIterator.next();    currKey=currentMapEntry.getKey();    if (currKey != indexKey && (currKey == QueryService.UNDEFINED || currKey == IndexManager.NULL || keysToRemove != null && removeFromKeysToRemove(keysToRemove,currKey))) {      return hasNext();    }    Object values=currentMapEntry.getValue();    if (values instanceof Collection) {      this.valuesIterator=((Collection)values).iterator();    } else {      this.valuesIterator=null;      currValue=values;    }    return values != null && (values instanceof RegionEntry || this.valuesIterator.hasNext());  }  currKey=null;  return false;}  }
class C{  @Override public Long scard(final byte[] key){  checkIsInMultiOrPipeline();  client.scard(key);  return client.getIntegerReply();}  }
class C{  public static void wrapContentAgain(ViewGroup subTreeRoot){  wrapContentAgain(subTreeRoot,false,MeasureSpec.UNSPECIFIED,MeasureSpec.UNSPECIFIED);}  }
class C{  @Override public Object[] next(){  if (!hasNext()) {    throw new NoSuchElementException();  }  Object[] row=rows[counter];  counter++;  return row;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","hhuwtian");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  @Deprecated public boolean inside(int x,int y){  return contains((double)x,(double)y);}  }
class C{  public Surface saveTx(){  transformStack.add(lastTrans=lastTrans.copy());  return this;}  }
class C{  protected String escapeValue(Object value){  return String.valueOf(value);}  }
class C{  public final boolean isEmpty(){  for (  List<InternalAspect> aspects : this.aspects.values()) {    for (    InternalAspect aspect : aspects) {      if (aspect.amount > 0)       return true;    }  }  return false;}  }
class C{  public static double readDouble(final JSONObject jsonObject,final String key,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonObject.getDouble(key);  }  if (notNull && jsonObject.isNull(key)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_OBJECT,key));  }  double value=0.0;  if (!jsonObject.isNull(key)) {    value=jsonObject.getDouble(key);  }  return value;}  }
class C{  private void receiveHandshakeResponse(String key) throws IOException {  BufferedReader in=new BufferedReader(new InputStreamReader(input));  ArrayList responseLines=new ArrayList();  String line=in.readLine();  if (line == null) {    throw new IOException("WebSocket Response header: Invalid response from Server, It may not support WebSockets.");  }  while (!line.equals(EMPTY)) {    responseLines.add(line);    line=in.readLine();  }  Map headerMap=getHeaders(responseLines);  String connectionHeader=(String)headerMap.get(HTTP_HEADER_CONNECTION);  if (connectionHeader == null || connectionHeader.equalsIgnoreCase(HTTP_HEADER_CONNECTION_VALUE)) {    throw new IOException("WebSocket Response header: Incorrect connection header");  }  String upgradeHeader=(String)headerMap.get(HTTP_HEADER_UPGRADE);  if (!upgradeHeader.toLowerCase().contains(HTTP_HEADER_UPGRADE_WEBSOCKET)) {    throw new IOException("WebSocket Response header: Incorrect upgrade.");  }  String secWebsocketProtocolHeader=(String)headerMap.get(HTTP_HEADER_SEC_WEBSOCKET_PROTOCOL);  if (secWebsocketProtocolHeader == null) {    throw new IOException("WebSocket Response header: empty sec-websocket-protocol");  }  if (!headerMap.containsKey(HTTP_HEADER_SEC_WEBSOCKET_ACCEPT)) {    throw new IOException("WebSocket Response header: Missing Sec-WebSocket-Accept");  }  try {    verifyWebSocketKey(key,(String)headerMap.get(HTTP_HEADER_SEC_WEBSOCKET_ACCEPT));  } catch (  NoSuchAlgorithmException e) {    throw new IOException(e.getMessage());  }catch (  HandshakeFailedException e) {    throw new IOException("WebSocket Response header: Incorrect Sec-WebSocket-Key");  }}  }
class C{  public SizeLimitExceededException(String explanation){  super(explanation);}  }
class C{  @Override public Iterator<Map.Entry<K,WeakReference<V>>> entryIterator(){  return map.entrySet().iterator();}  }
class C{  public Matrix(double vals[],int m){  this.m=m;  n=(m != 0 ? vals.length / m : 0);  if (m * n != vals.length) {    throw new IllegalArgumentException("Array length must be a multiple of m.");  }  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=vals[i + j * m];    }  }}  }
class C{  @DSSink({DSSinkKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:38.176 -0500",hash_original_method="05810E0F51AA47EAC0C24CA3CBEDF0F7",hash_generated_method="7BC5647D4EF2E8DD9FF8E8D0590C562D") public void requestLoadAllAdnLike(int efid,int extensionEf,Message response){  ArrayList<Message> waiters;  ArrayList<AdnRecord> result;  if (efid == EF_PBR) {    result=mUsimPhoneBookManager.loadEfFilesFromUsim();  } else {    result=getRecordsIfLoaded(efid);  }  if (result != null) {    if (response != null) {      AsyncResult.forMessage(response).result=result;      response.sendToTarget();    }    return;  }  waiters=adnLikeWaiters.get(efid);  if (waiters != null) {    waiters.add(response);    return;  }  waiters=new ArrayList<Message>();  waiters.add(response);  adnLikeWaiters.put(efid,waiters);  if (extensionEf < 0) {    if (response != null) {      AsyncResult.forMessage(response).exception=new RuntimeException("EF is not known ADN-like EF:" + efid);      response.sendToTarget();    }    return;  }  new AdnRecordLoader(phone).loadAllFromEF(efid,extensionEf,obtainMessage(EVENT_LOAD_ALL_ADN_LIKE_DONE,efid,0));}  }
class C{  public boolean isConnected(){  return connected;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:57.402 -0500",hash_original_method="61D9EDAFD8C0E1537C8EF2C7E942A904",hash_generated_method="61D9EDAFD8C0E1537C8EF2C7E942A904") boolean isSignedJar(){  return certificates.size() > 0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public synchronized void centerViewPort(final float[] transformedPts,final View view){  Matrix save=new Matrix();  save.set(mMatrixTouch);  final float x=transformedPts[0] - offsetLeft();  final float y=transformedPts[1] - offsetTop();  save.postTranslate(-x,-y);  refresh(save,view,false);}  }
class C{  public void sendReadSlot(int slot){  LocoNetMessage m=new LocoNetMessage(4);  m.setOpCode(LnConstants.OPC_RQ_SL_DATA);  m.setElement(1,slot & 0x7F);  m.setElement(2,0);  tc.sendLocoNetMessage(m);}  }
class C{  public void registerConverter(final SingleValueConverter converter,final int priority){  if (converterRegistry != null) {    converterRegistry.registerConverter(new SingleValueConverterWrapper(converter),priority);  }}  }
class C{  public static <W>ArrayEncodedProbBackoffLm<W> readArrayEncodedLmFromArpa(final LmReader<ProbBackoffPair,ArpaLmReaderCallback<ProbBackoffPair>> lmFile,final boolean compress,final WordIndexer<W> wordIndexer,final ConfigOptions opts){  final boolean reverse=true;  final FirstPassCallback<ProbBackoffPair> valueAddingCallback=firstPassArpa(lmFile,reverse);  final LongArray[] numNgramsForEachWord=valueAddingCallback.getNumNgramsForEachWord();  return secondPassArrayEncoded(opts,lmFile,wordIndexer,valueAddingCallback,numNgramsForEachWord,reverse,compress);}  }
class C{  private void parseICSI(Node node){}  }
class C{  private static boolean meetsAllBounds(final double x,final double y,final double z,final Membership[] bounds){  for (  final Membership bound : bounds) {    if (!bound.isWithin(x,y,z))     return false;  }  return true;}  }
class C{  public String printGraph(){  String s=String.format("\n----- Logic Circuit #%d -----\n",_index);  for (int i=0; i < _Gates.size(); ++i) {    Gate gi=_Gates.get(i);    s+=String.format("%-12s",gi.Type);    s+=String.format("%-18s",BooleanLogic.logicString(gi.get_logics()));    s+=String.format("%-18s",gi.Name);    s+=String.format("%-3d",gi.Index);    String child_indx="(";    for (    Gate child : gi.getChildren()) {      child_indx+=child.Index + ",";    }    child_indx=child_indx.substring(0,child_indx.length() - 1);    if (gi.Type != GateType.INPUT)     child_indx+=")";    s+=String.format("%-12s",child_indx);    if (gi.get_scores().get_score() != -1.0000) {      s+=String.format("%6.2f",gi.get_scores().get_score());    }    if (gi.get_toxicity().size() > 0) {      s+="  tox:" + String.format("%-3.2f",Toxicity.mostToxicRow(gi));    }    s+="\n";  }  s+="\n";  return s;}  }
class C{  public DoubleVector(int len){  mValues=new double[len];}  }
class C{  public DirectionOfAttack(String sidc){  super(sidc);}  }
class C{  public String toString(){  return "HttpSendSocket[host=" + host + ",port="+ port+ ",url="+ url+ "]";}  }
class C{  public ConcurrentSkipListSet(SortedSet<E> s){  m=new ConcurrentSkipListMap<E,Object>(s.comparator());  addAll(s);}  }
class C{  public boolean isUsed(long pos,int length){  int start=getBlock(pos);  int blocks=getBlockCount(length);  for (int i=start; i < start + blocks; i++) {    if (!set.get(i)) {      return false;    }  }  return true;}  }
class C{  private double mdist(double[] a,double[] b){  return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);}  }
class C{  public void disconnect(){  LOG.entering(CLASS_NAME,"disconnect");  _getDelegate().disconnect();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (tracecase_name_1: ");  result.append(tracecase_name_1);  result.append(')');  return result.toString();}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.TAG;}  }
class C{  public void removeSeriesRenderer(SimpleSeriesRenderer renderer){  mRenderers.remove(renderer);}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public synchronized void listen(final Set<NotificationChannel> channelNames){  m_channels.addAll(channelNames);}  }
class C{  public static boolean isBOM(byte[] barr){  return barr.length >= 3 && barr[0] == 0xEF && barr[1] == 0xBB && barr[2] == 0xBF;}  }
class C{  public FXGMatrix(MatrixNode m){  this.a=m.a;  this.b=m.b;  this.c=m.c;  this.d=m.d;  this.tx=m.tx;  this.ty=m.ty;}  }
class C{  @SuppressWarnings("rawtypes") public ITxState0 deserialize(final ITuple tuple){  final byte[] val=tuple.getValueBuffer().array();  final long txId=KeyBuilder.decodeLong(val,0);  final long readsOnCommitTime=KeyBuilder.decodeLong(val,Bytes.SIZEOF_LONG);  return new MyTxState(txId,readsOnCommitTime);}  }
class C{  public static void checkLength(double[] M,int n){  if (M.length != n)   throwError("row have " + M.length + " elements instead of "+ n+ " elements expected.");}  }
class C{  public void pause(){  lastTime=-1L;}  }
class C{  void finalPass(boolean inlinedSomething){  BBSet.TreeEnumerator e=TreeEnumerator.enumFromRoot(root);  BasicBlock cop=gc.getPrologue();  BasicBlockLE curr=getEntry();  BasicBlockLE next=null;  top:   while (true) {    if (curr instanceof HandlerBlockLE) {      gc.markExceptionHandlersAsGenerated();      HandlerBlockLE hcurr=(HandlerBlockLE)curr;      if (DBG_FLATTEN) {        db("injecting handler entry block " + hcurr.entryBlock + " before "+ hcurr);      }      gc.getCfg().insertAfterInCodeOrder(cop,hcurr.entryBlock);      cop=hcurr.entryBlock;    }    if (DBG_FLATTEN)     db("flattening: " + curr + " ("+ curr.block+ ")");    curr.setInCodeOrder();    gc.getCfg().insertAfterInCodeOrder(cop,curr.block);    cop=curr.block;    if (DBG_FLATTEN) {      db("Current Code order for " + gc.getMethod() + "\n");      for (BasicBlock bb=gc.getPrologue(); bb != null; bb=(BasicBlock)bb.getNext()) {        VM.sysWrite(bb + "\n");      }    }    if (curr.handlers != null) {      int notGenerated=0;      for (      HandlerBlockLE handler : curr.handlers) {        if (!handler.isGenerated()) {          if (DBG_EX || DBG_FLATTEN) {            db("Will remove unreachable handler " + handler + " from "+ curr);          }          notGenerated++;        }      }      if (notGenerated > 0) {        if (notGenerated == curr.handlers.length) {          if (DBG_EX || DBG_FLATTEN) {            db("No (local) handlers were actually reachable for " + curr + "; setting to caller");          }          curr.block.setExceptionHandlers(curr.block.exceptionHandlers().getCaller());        } else {          ExceptionHandlerBasicBlock[] nlh=new ExceptionHandlerBasicBlock[curr.handlers.length - notGenerated];          for (int i=0, j=0; i < curr.handlers.length; i++) {            if (curr.handlers[i].isGenerated()) {              nlh[j++]=curr.handlers[i].entryBlock;            } else {              if (VM.VerifyAssertions) {                VM._assert(curr.handlers[i].entryBlock.hasZeroIn(),"Non-generated handler with CFG edges");              }            }          }          curr.block.setExceptionHandlers(new ExceptionHandlerBasicBlockBag(nlh,curr.block.exceptionHandlers().getCaller()));        }      }    }    if (curr.fallThrough != null && curr.fallThrough instanceof InliningBlockLE) {      InliningBlockLE icurr=(InliningBlockLE)curr.fallThrough;      BasicBlock forw=cop.nextBasicBlockInCodeOrder();      BasicBlock calleeEntry=icurr.gc.getCfg().firstInCodeOrder();      BasicBlock calleeExit=icurr.gc.getCfg().lastInCodeOrder();      gc.getCfg().breakCodeOrder(cop,forw);      gc.getCfg().linkInCodeOrder(cop,icurr.gc.getCfg().firstInCodeOrder());      gc.getCfg().linkInCodeOrder(icurr.gc.getCfg().lastInCodeOrder(),forw);      if (DBG_CFG || BC2IR.DBG_SELECTED) {        db("Added CFG edge from " + cop + " to "+ calleeEntry);      }      if (icurr.epilogueBBLE != null) {        if (DBG_FLATTEN) {          db("injected " + icurr + " between "+ curr+ " and "+ icurr.epilogueBBLE.fallThrough);        }        if (VM.VerifyAssertions) {          VM._assert(icurr.epilogueBBLE.block == icurr.gc.getCfg().lastInCodeOrder());        }        curr=icurr.epilogueBBLE;        cop=curr.block;      } else {        if (DBG_FLATTEN)         db("injected " + icurr + " after "+ curr);        curr=icurr;        cop=calleeExit;      }    }    next=curr.fallThrough;    if (DBG_FLATTEN && next == null) {      db(curr + " has no fallthrough case, getting next block");    }    if (next != null) {      if (DBG_CFG || BC2IR.DBG_SELECTED) {        db("Added CFG edge from " + curr.block + " to "+ next.block);      }      if (next.isInCodeOrder()) {        if (DBG_FLATTEN) {          db("fallthrough " + next + " is already flattened, adding goto");        }        curr.block.appendInstruction(next.block.makeGOTO());        next=null;      }    }    if (next == null) {      while (true) {        if (!e.hasMoreElements()) {          if (DBG_FLATTEN)           db("no more blocks! all done");          break top;        }        next=e.next();        if (DBG_FLATTEN)         db("looking at " + next);        if (!next.isGenerated()) {          if (DBG_FLATTEN)           db("block " + next + " was not generated");          continue;        }        if (!next.isInCodeOrder()) {          break;        }      }      if (DBG_FLATTEN)       db("found unflattened block: " + next);    }    curr=next;  }  boolean removedSomethingFromCodeOrdering=inlinedSomething;  if (gc.getEpilogue().hasZeroIn()) {    if (DBG_FLATTEN || DBG_CFG) {      db("Deleting unreachable epilogue " + gc.getEpilogue());    }    gc.getCfg().removeFromCodeOrder(gc.getEpilogue());    removedSomethingFromCodeOrdering=true;    gc.getEpilogue().remove();    gc.getEpilogue().deleteIn();    gc.getEpilogue().deleteOut();    if (VM.VerifyAssertions)     VM._assert(gc.getEpilogue().hasZeroOut());    gc.setEpilogue(null);  }  if (gc.getUnlockAndRethrow() != null && gc.getUnlockAndRethrow().hasZeroIn()) {    gc.getCfg().removeFromCFGAndCodeOrder(gc.getUnlockAndRethrow());    removedSomethingFromCodeOrdering=true;    gc.getEnclosingHandlers().remove(gc.getUnlockAndRethrow());  }  if (removedSomethingFromCodeOrdering) {    gc.getCfg().compactNodeNumbering();  }  if (DBG_FLATTEN) {    db("Current Code order for " + gc.getMethod() + "\n");    for (BasicBlock bb=gc.getPrologue(); bb != null; bb=(BasicBlock)bb.getNext()) {      bb.printExtended();    }  }  if (DBG_FLATTEN) {    db("Final CFG for " + gc.getMethod() + "\n");    gc.getCfg().printDepthFirst();  }}  }
class C{  private static final void waitForEditorToBeActive(IEditorPart internalFileEditor,IWorkbenchPage page){  long start=System.currentTimeMillis();  long end=start;  do {    end=System.currentTimeMillis();  } while (page.getActiveEditor() != internalFileEditor && (end - start) < 5000);  if (page.getActiveEditor() != internalFileEditor)   logger.warn("selected editor was not activated within timout");}  }
class C{  protected boolean beforeDelete(){  MAcctSchema[] ass=MAcctSchema.getClientAcctSchema(getCtx(),getAD_Client_ID());  for (int i=0; i < ass.length; i++) {    if (ass[i].getM_CostType_ID() == getM_CostType_ID()) {      log.saveError("CannotDelete",Msg.getElement(getCtx(),"C_AcctSchema_ID") + " - " + ass[i].getName());      return false;    }  }  return true;}  }
class C{  boolean checkElementOptions(GrammarASTWithOptions elem,GrammarAST ID,GrammarAST valueAST){  if (checkAssocElementOption && ID != null && "assoc".equals(ID.getText())) {    if (elem.getType() != ANTLRParser.ALT) {      Token optionID=ID.token;      String fileName=optionID.getInputStream().getSourceName();      g.tool.errMgr.grammarError(ErrorType.UNRECOGNIZED_ASSOC_OPTION,fileName,optionID,currentRuleName);    }  }  if (elem instanceof RuleRefAST) {    return checkRuleRefOptions((RuleRefAST)elem,ID,valueAST);  }  if (elem instanceof TerminalAST) {    return checkTokenOptions((TerminalAST)elem,ID,valueAST);  }  if (elem.getType() == ANTLRParser.ACTION) {    return false;  }  if (elem.getType() == ANTLRParser.SEMPRED) {    Token optionID=ID.token;    String fileName=optionID.getInputStream().getSourceName();    if (valueAST != null && !Grammar.semPredOptions.contains(optionID.getText())) {      g.tool.errMgr.grammarError(ErrorType.ILLEGAL_OPTION,fileName,optionID,optionID.getText());      return false;    }  }  return false;}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void collect(){  Phase.beginNewPhaseStack(Phase.scheduleComplex(global().collection));}  }
class C{  int postFiles(File[] files,OutputStream out,String type){  int filesPosted=0;  for (  File srcFile : files) {    try {      if (!srcFile.isFile() || srcFile.isHidden())       continue;      postFile(srcFile,out,type);      Thread.sleep(delay * 1000);      filesPosted++;    } catch (    InterruptedException e) {      throw new RuntimeException();    }  }  return filesPosted;}  }
class C{  public static void main(String[] args){  int count=0;  BigInteger n=new BigInteger(String.valueOf(Long.MAX_VALUE));  BigInteger five=new BigInteger("5");  BigInteger six=new BigInteger("6");  BigInteger zero=new BigInteger("0");  System.out.println("\nFirst ten numbers greater than Long.MAX_VALUE" + " that are divisible by 5 or 6:");  while (count < 10) {    n=n.add(new BigInteger("1"));    if ((n.remainder(five)).compareTo(zero) == 0 || (n.remainder(six)).compareTo(zero) == 0) {      System.out.println(n);      count++;    }  }}  }
class C{  public boolean bool(){  return true;}  }
class C{  private static DigicoreNetwork buildSmallNetwork(){  DigicoreNetwork dn=new DigicoreNetwork();  DigicoreActivity da1=new DigicoreActivity("test",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da1.setCoord(new Coord(0.0,0.0));  da1.setFacilityId(Id.create(1,ActivityFacility.class));  DigicoreActivity da2=new DigicoreActivity("test",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da2.setCoord(new Coord(0.0,1.0));  da2.setFacilityId(Id.create(2,ActivityFacility.class));  DigicoreActivity da3=new DigicoreActivity("test",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da3.setCoord(new Coord(1.0,1.0));  da3.setFacilityId(Id.create(3,ActivityFacility.class));  DigicoreActivity da4=new DigicoreActivity("test",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da4.setCoord(new Coord(1.0,0.0));  da4.setFacilityId(Id.create(4,ActivityFacility.class));  dn.addArc(da1,da2);  dn.addArc(da1,da3);  dn.addArc(da1,da3);  dn.addArc(da3,da1);  dn.addArc(da4,da1);  dn.addArc(da4,da1);  dn.addArc(da4,da1);  return dn;}  }
class C{  public IntStream dropWhile(IntPredicate predicate){  requireNonNull(predicate);  if (predicate.test(element)) {    return empty();  } else {    return this;  }}  }
class C{  public AtlasClient(UserGroupInformation ugi,String doAsUser,String... baseUrls){  initializeState(baseUrls,ugi,doAsUser);}  }
class C{  @Inline private static Address allocateSpace(Selected.Mutator mutator,int bytes,int align,int offset,int allocator,int site){  bytes=org.jikesrvm.runtime.Memory.alignUp(bytes,MIN_ALIGNMENT);  Address region;  region=mutator.alloc(bytes,align,offset,allocator,site);  if (CHECK_MEMORY_IS_ZEROED)   Memory.assertIsZeroed(region,bytes);  return region;}  }
class C{  public void onSort(MenuItem item){}  }
class C{  public void testRemoveElementAndAdd() throws InterruptedException {  LinkedBlockingQueue q=new LinkedBlockingQueue();  assertTrue(q.add(new Integer(1)));  assertTrue(q.add(new Integer(2)));  assertTrue(q.remove(new Integer(1)));  assertTrue(q.remove(new Integer(2)));  assertTrue(q.add(new Integer(3)));  assertTrue(q.take() != null);}  }
class C{  public GlyphLayout(AttributedCharacterIterator aci,int[] charMap,Point2D offset,FontRenderContext frc){  this.aci=aci;  this.offset=offset;  this.font=getFont();  this.charMap=charMap;  this.metrics=font.getLineMetrics(aci,aci.getBeginIndex(),aci.getEndIndex(),frc);  this.gv=null;  this.aci.first();  this.vertical=(aci.getAttribute(WRITING_MODE) == WRITING_MODE_TTB);  this.textPath=(TextPath)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.TEXTPATH);  AltGlyphHandler altGlyphHandler=(AltGlyphHandler)this.aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.ALT_GLYPH_HANDLER);  if (altGlyphHandler != null) {    this.gv=altGlyphHandler.createGlyphVector(frc,this.font.getSize(),this.aci);    if (this.gv != null) {      this.isAltGlyph=true;    }  }  if (this.gv == null) {    this.gv=font.createGlyphVector(frc,this.aci);  }}  }
class C{  @Override public int size(){  return contents.length;}  }
class C{  protected void scroll(){  Rectangle rect=EDITOR_PANE.getVisibleRect();  int x=rect.x;  int y=this.getVerticalScrollBar().getValue();  if ((y + rect.height) >= EDITOR_PANE.getHeight()) {    return;  } else {    y+=1;  }  Rectangle rectNew=new Rectangle(x,y,(x + rect.width),(y + rect.height));  EDITOR_PANE.scrollRectToVisible(rectNew);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYBarRenderer)) {    return false;  }  XYBarRenderer that=(XYBarRenderer)obj;  if (this.base != that.base) {    return false;  }  if (this.drawBarOutline != that.drawBarOutline) {    return false;  }  if (this.margin != that.margin) {    return false;  }  if (this.useYInterval != that.useYInterval) {    return false;  }  if (!ObjectUtilities.equal(this.gradientPaintTransformer,that.gradientPaintTransformer)) {    return false;  }  if (!ShapeUtilities.equal(this.legendBar,that.legendBar)) {    return false;  }  if (!ObjectUtilities.equal(this.positiveItemLabelPositionFallback,that.positiveItemLabelPositionFallback)) {    return false;  }  if (!ObjectUtilities.equal(this.negativeItemLabelPositionFallback,that.negativeItemLabelPositionFallback)) {    return false;  }  if (!this.barPainter.equals(that.barPainter)) {    return false;  }  if (this.shadowsVisible != that.shadowsVisible) {    return false;  }  if (this.shadowXOffset != that.shadowXOffset) {    return false;  }  if (this.shadowYOffset != that.shadowYOffset) {    return false;  }  if (this.barAlignmentFactor != that.barAlignmentFactor) {    return false;  }  return super.equals(obj);}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  public synchronized long fileCount(){  return fileCount;}  }
class C{  private GridKernalTestUtils(){}  }
class C{  final V doRemove(Object okey,Object value){  Comparable<? super K> key=comparable(okey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c < 0)       return null;      if (c > 0) {        b=n;        n=f;        continue;      }      if (value != null && !value.equals(v))       return null;      if (!n.casValue(v,null))       break;      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(key); else {        findPredecessor(key);        if (head.right == null)         tryReduceLevel();      }      return (V)v;    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final Object value,final Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (value == null) {    appendNullText(buffer,fieldName);  } else {    appendInternal(buffer,fieldName,value,isFullDetail(fullDetail));  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public AdapterPath append(@NonNull RecyclerView.Adapter adapter,@Nullable Object tag){  return append(new AdapterPathSegment(adapter,tag));}  }
class C{  protected void dataChanged(DataSource source,DataChangeEvent... events){  invalidateAxisExtrema();  autoscaleAxes();  layout();}  }
class C{  @Override public Loader<Cursor> onCreateLoader(int loaderID,Bundle bundle){switch (loaderID) {case ACTIVITY_ID:    mRequeryInstanceCount++;  mWaitingForMediaScannerResult=false;if (Global.debugEnabledSql) {  Log.i(Global.LOG_CONTEXT,mDebugPrefix + " onCreateLoader" + getDebugContext()+ " : query = "+ mGalleryContentQuery);}return FotoSql.createCursorLoader(getApplicationContext(),mGalleryContentQuery);default :return null;}}  }
class C{  private boolean epsilonEquals(Vector2 objA,Vector2 objB,float epsilon){  if (Math.abs(objB.x - objA.x) > epsilon)   return false;  if (Math.abs(objB.y - objA.y) > epsilon)   return false;  return true;}  }
class C{  public boolean isRunning(){  return mRunning.get();}  }
class C{  public void adjustCenter(double v){  m_center+=v;}  }
class C{  public CFMLTransformerException(SourceCode sc,Exception e){  this(sc,StringUtil.isEmpty(e.getMessage()) ? (Caster.toClassName(e)) : e.getMessage());}  }
class C{  public FeatureLabel makeToken(String str,int begin,int length){  FeatureLabel fl=new FeatureLabel();  fl.setWord(str);  fl.setCurrent(str);  fl.setBeginPosition(begin);  fl.setEndPosition(begin + length);  return fl;}  }
class C{  public Anonymous_constraint_1_ createAnonymous_constraint_1_(){  Anonymous_constraint_1_Impl anonymous_constraint_1_=new Anonymous_constraint_1_Impl();  return anonymous_constraint_1_;}  }
class C{  private String dataNull(String data){  if (data == null)   return ""; else   return data;}  }
class C{  public void addVetoableChangeListener(String name,VetoableChangeListener vcl){  vcSupport.addVetoableChangeListener(name,vcl);}  }
class C{  public void drawBackground(Graphics g){  g.fillRect(0,0,getWidth(),getHeight());}  }
class C{  public boolean isEmpty(){  if (lastBatch != null) {    if (!lastBatch.isEmpty()) {      return false;    }  }  return currentBatch.isEmpty();}  }
class C{  private static <T>void assertListsEqualInOrder(String message,String expectedLabel,List<T> expected,String actualLabel,List<T> actual){  int i=0;  for (; i < expected.size() && i < actual.size(); ++i) {    if (!Objects.equals(expected.get(i),actual.get(i))) {      Assert.fail(String.format("%s: %s and %s have %d items in common and then differ. " + "Item in %s (%d more): %s, item in %s (%d more): %s",message,expectedLabel,actualLabel,i,expectedLabel,expected.size() - i - 1,expected.get(i),actualLabel,actual.size() - i - 1,actual.get(i)));    }  }  if (i < expected.size()) {    Assert.fail(String.format("%s: %s has %d more items after matching all %d from %s. First 5: %s",message,expectedLabel,expected.size() - actual.size(),actual.size(),actualLabel,expected.subList(actual.size(),Math.min(expected.size(),actual.size() + 5))));  } else   if (i < actual.size()) {    Assert.fail(String.format("%s: %s has %d more items after matching all %d from %s. First 5: %s",message,actualLabel,actual.size() - expected.size(),expected.size(),expectedLabel,actual.subList(expected.size(),Math.min(actual.size(),expected.size() + 5))));  } else {  }}  }
class C{  public boolean isEmpty(){  Seg<K,V>[] segs=this.segs;  int[] mc=new int[segs.length];  int mcsum=0;  for (int i=0; i < segs.length; ++i) {    if (segs[i].cnt != 0)     return false; else     mcsum+=mc[i]=segs[i].modCnt;  }  if (mcsum != 0) {    for (int i=0; i < segs.length; ++i) {      if (segs[i].cnt != 0 || mc[i] != segs[i].modCnt)       return false;    }  }  return true;}  }
class C{  private boolean isClientAlive(Set<String> allClients,UIClient currClient){switch (currClient.getUIClientType()) {case UIClient.REMOTE_UI:    if (UIManager.getLocalUIByName(currClient.getLocalUIClientName()) == null) {      if (Sage.DBG)       System.out.println("Seeker is dropping RUI client from watch map because its connection is dead:" + currClient);      return false;    }  break;default :if (!allClients.contains(currClient.getUIClientHostname())) {  if (Sage.DBG)   System.out.println("Seeker is dropping client from watch map because its connection is dead:" + currClient);  return false;}break;}return true;}  }
class C{  public CRawModule(final int rawModuleId,final String name,final int functionCount,final boolean isComplete,final SQLProvider provider){  Preconditions.checkArgument(rawModuleId > 0,"IE00258: Module ID must be positive");  m_name=Preconditions.checkNotNull(name,"IE00259: Module Name can't be null");  m_provider=Preconditions.checkNotNull(provider,"IE00265: Invalid SQL provider");  m_id=rawModuleId;  m_functionCount=functionCount;  m_isComplete=isComplete;}  }
class C{  public static String quoteNameIfNecessary(String name){  int len=name.length();  for (int i=0; i < len; i++) {    char c=name.charAt(i);    if (!((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c == ' ')|| (c >= '0' && c <= '9'))) {      return '"' + quoteName(name) + '"';    }  }  return name;}  }
class C{  private static boolean useField(){  assert 0 < useFieldRandomizedFactor;  return 0 != TestUtil.nextInt(random(),0,useFieldRandomizedFactor);}  }
class C{  public List<String> findRedundantDeclarations(){  List<String> result=new ArrayList<String>();  for (  ThemeTreeNode node : rootNode.childMap.values()) {    findRedundantDeclarations(result,node);  }  Collections.sort(result);  return result;}  }
class C{  private static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  Exception e) {    throw new IllegalArgumentException(e);  }}  }
class C{  @Override protected final void onStop(){  super.onStop();  geoLocationHelper.stopRetrievingLocation();}  }
class C{  public static int[] append(int buffer[],int newElement){  int[] t=resize(buffer,buffer.length + 1);  t[buffer.length]=newElement;  return t;}  }
class C{  public void fillInNotifierBundle(Bundle m){  m.putInt("lac",mLac);  m.putInt("cid",mCid);  m.putInt("psc",mPsc);}  }
class C{  public StructBag(StructType structType,CachePerfStats stats){  super(new ObjectArrayHashingStrategy(),stats);  if (structType == null) {    throw new IllegalArgumentException(LocalizedStrings.StructBag_STRUCTTYPE_MUST_NOT_BE_NULL.toLocalizedString());  }  this.elementType=structType;}  }
class C{  @Override public void writePage(int pageID,P page){  try {    countWrite();    byte[] array=pageToByteArray(page);    long offset=((long)(header.getReservedPages() + pageID)) * (long)pageSize;    assert offset >= 0 : header.getReservedPages() + " " + pageID+ " "+ pageSize+ " "+ offset;    file.seek(offset);    file.write(array);    page.setDirty(false);  } catch (  IOException e) {    throw new RuntimeException("Error writing to page file.",e);  }}  }
class C{  private int substractSfWeights(Channel chan,int wtabIdx){  int[] weigthsTab=Atrac3plusData2.atrac3p_sf_weights[wtabIdx - 1];  for (int i=0; i < ctx.usedQuantUnits; i++) {    chan.quSfIdx[i]-=weigthsTab[i];    if (chan.quSfIdx[i] < 0 || chan.quSfIdx[i] > 63) {      log.error(String.format("SF index out of range pos=%d, val=%d",i,chan.quSfIdx[i]));      return AT3P_ERROR;    }  }  return 0;}  }
class C{  public AuthorityInformationAccess(ASN1ObjectIdentifier oid,GeneralName location){  this(new AccessDescription(oid,location));}  }
class C{  public String minBucketSizeTipText(){  return "The minimum bucket size used for discretizing numeric " + "attributes.";}  }
class C{  public final void removeAllElements(){  for (int i=0; i < m_firstFree; i++) {    m_map[i]=java.lang.Integer.MIN_VALUE;  }  m_firstFree=0;}  }
class C{  public AlreadySelectedException(OptionGroup group,Option option){  this("The option '" + option.getKey() + "' was specified but an option from this group "+ "has already been selected: '"+ group.getSelected()+ "'");  this.group=group;  this.option=option;}  }
class C{  public Deathdate(PartialDate partialDate){  super(partialDate);}  }
class C{  public CipherTextIvMac(String base64IvAndCiphertext){  String[] civArray=base64IvAndCiphertext.split(":");  if (civArray.length != 3) {    throw new IllegalArgumentException("Cannot parse iv:ciphertext:mac");  } else {    iv=Base64.decode(civArray[0],BASE64_FLAGS);    mac=Base64.decode(civArray[1],BASE64_FLAGS);    cipherText=Base64.decode(civArray[2],BASE64_FLAGS);  }}  }
class C{  public double filterFitness(double fitness){  return fitness;}  }
