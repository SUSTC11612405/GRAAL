class C{  public String amounts(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || !"I".equals(mTab.getValue("CashType")))   return "";  String total=Env.getContext(ctx,WindowNo,"InvTotalAmt");  if (total == null || total.length() == 0)   return "";  BigDecimal InvTotalAmt=new BigDecimal(total);  BigDecimal PayAmt=(BigDecimal)mTab.getValue("Amount");  BigDecimal DiscountAmt=(BigDecimal)mTab.getValue("DiscountAmt");  BigDecimal WriteOffAmt=(BigDecimal)mTab.getValue("WriteOffAmt");  String colName=mField.getColumnName();  log.fine(colName + " - Invoice=" + InvTotalAmt+ " - Amount="+ PayAmt+ ", Discount="+ DiscountAmt+ ", WriteOff="+ WriteOffAmt);  if (colName.equals("Amount")) {    WriteOffAmt=InvTotalAmt.subtract(PayAmt).subtract(DiscountAmt);    mTab.setValue("WriteOffAmt",WriteOffAmt);  } else {    PayAmt=InvTotalAmt.subtract(DiscountAmt).subtract(WriteOffAmt);    mTab.setValue("Amount",PayAmt);  }  return "";}  }
class C{  public void save() throws CouldntSaveDataException {  try {    trace.save();  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public WriteBuffer put(byte[] bytes){  ensureCapacity(bytes.length).put(bytes);  return this;}  }
class C{  public static DistributedLockService create(String serviceName,InternalDistributedSystem ds,boolean distributed,boolean destroyOnDisconnect,boolean automateFreeResources) throws IllegalArgumentException, IllegalStateException {synchronized (creationLock) {synchronized (services) {      ds.getCancelCriterion().checkCancelInProgress(null);      readyThreadGroup(ds);      if (services.get(serviceName) != null) {        throw new IllegalArgumentException(LocalizedStrings.DLockService_SERVICE_NAMED_0_ALREADY_CREATED.toLocalizedString(serviceName));      }      return DLockService.basicCreate(serviceName,ds,distributed,destroyOnDisconnect,automateFreeResources);    }  }}  }
class C{  protected byte[] wrap(byte content_type,byte[] fragment,int offset,int len){  if (logger != null) {    logger.println("SSLRecordProtocol.wrap: TLSPlaintext.fragment[" + len + "]:");    logger.print(fragment,offset,len);  }  if (len > MAX_DATA_LENGTH) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("The provided chunk of data is too big: " + len + " > MAX_DATA_LENGTH == "+ MAX_DATA_LENGTH));  }  byte[] ciphered_fragment=fragment;  if (activeWriteState != null) {    ciphered_fragment=activeWriteState.encrypt(content_type,fragment,offset,len);    if (ciphered_fragment.length > MAX_CIPHERED_DATA_LENGTH) {      throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("The ciphered data increased more than on 1024 bytes"));    }    if (logger != null) {      logger.println("SSLRecordProtocol.wrap: TLSCiphertext.fragment[" + ciphered_fragment.length + "]:");      logger.print(ciphered_fragment);    }  }  return packetize(content_type,version,ciphered_fragment);}  }
class C{  private static void createEdges(final INaviView target,final List<INaviEdge> edges,final Map<INaviViewNode,INaviViewNode> nodeMap){  for (  final INaviEdge edge : edges) {    final INaviViewNode sourceNode=nodeMap.get(edge.getSource());    final INaviViewNode targetNode=nodeMap.get(edge.getTarget());    final CNaviViewEdge newEdge=target.getContent().createEdge(sourceNode,targetNode,edge.getType());    newEdge.setColor(edge.getColor());    newEdge.setX1(edge.getX1());    newEdge.setY1(edge.getY1());    newEdge.setX2(edge.getX2());    newEdge.setY2(edge.getY2());    for (    final CBend bend : edge.getBends()) {      newEdge.addBend(bend.getX(),bend.getY());    }  }}  }
class C{  private static boolean needsParentheses(Expression expression,ASTNode parent,StructuralPropertyDescriptor locationInParent,ITypeBinding leftOperandType){  if (!expressionTypeNeedsParentheses(expression))   return false;  if (!locationNeedsParentheses(locationInParent)) {    return false;  }  if (parent instanceof Expression) {    Expression parentExpression=(Expression)parent;    if (expression instanceof PrefixExpression) {      return needsParenthesesForPrefixExpression(parentExpression,((PrefixExpression)expression).getOperator());    }    int expressionPrecedence=OperatorPrecedence.getExpressionPrecedence(expression);    int parentPrecedence=OperatorPrecedence.getExpressionPrecedence(parentExpression);    if (expressionPrecedence > parentPrecedence)     return false;    if (expressionPrecedence < parentPrecedence)     return true;    if (parentExpression instanceof InfixExpression) {      return needsParenthesesInInfixExpression(expression,(InfixExpression)parentExpression,locationInParent,leftOperandType);    }    if (parentExpression instanceof ConditionalExpression && locationInParent == ConditionalExpression.EXPRESSION_PROPERTY) {      return true;    }    return false;  }  return true;}  }
class C{  public JSONArray(Collection c){  super(c);}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_ATTRIBUTES_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}"+ "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}"+ "/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}"+ "/subPartition2Values/{subPartition2Value}/subPartition3Values/{subPartition3Value}"+ "/businessObjectDataVersions/{businessObjectDataVersion}/businessObjectDataAttributeNames/{businessObjectDataAttributeName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_ATTRIBUTES_DELETE) public BusinessObjectDataAttribute deleteBusinessObjectDataAttribute(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("subPartition2Value") String subPartition2Value,@PathVariable("subPartition3Value") String subPartition3Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@PathVariable("businessObjectDataAttributeName") String businessObjectDataAttributeName){  return businessObjectDataAttributeService.deleteBusinessObjectDataAttribute(new BusinessObjectDataAttributeKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value,subPartition2Value,subPartition3Value),businessObjectDataVersion,businessObjectDataAttributeName));}  }
class C{  private static BufferedImage makeSquare(BufferedImage input){  if (input.getHeight() == input.getWidth()) {    return input;  } else {    int max=Math.max(input.getHeight(),input.getWidth());    int dx=(max - input.getWidth()) / 2;    int dy=(max - input.getHeight()) / 2;    return createImg(max,max,input.getType(),null);  }}  }
class C{  public static VectorClock incrementT(long timestamp,VectorClock clock,int... nodes){  for (  int n : nodes)   clock=clock.incremented((short)n,timestamp);  return clock;}  }
class C{  public void addMethod(MethodType type){  addMethodNoBidirectionalUpdate(type);  type.setClassOrInterfaceTypeNoBidirectionalUpdate(this);}  }
class C{  public static <O>Iterator<O> materializedSort(Iterator<O> unsortedIterator,Comparator<O> comparator){  Set<O> materializedSet=new TreeSet<O>(comparator);  while (unsortedIterator.hasNext()) {    materializedSet.add(unsortedIterator.next());  }  return materializedSet.iterator();}  }
class C{  public Cuboid transform(Transformer transform){  Vector3D transMin=transform.apply(min);  Vector3D transMax=transform.apply(max);  return new Cuboid(Vector3DUtil.min(transMin,transMax),Vector3DUtil.max(transMax,transMin));}  }
class C{  private PropertyChangeListener createVSBPropertyChangeListener(){  return getHandler();}  }
class C{  public void union(E element1,E element2){  Set<E> set1=elementToSet.get(element1);  if (set1 == null) {    throw new IllegalArgumentException("element 1 is not associated with a disjoint set, call makeSet() first.");  }  Set<E> set2=elementToSet.get(element2);  if (set2 == null) {    throw new IllegalArgumentException("element 2 is not associated with a disjoint set, call makeSet() first.");  }  if (set1 != set2) {    if (set1.size() < set2.size()) {      set2.addAll(set1);      for (      E element : set1) {        disjointSets.remove(elementToSet.put(element,set2));      }    } else {      set1.addAll(set2);      for (      E element : set2) {        disjointSets.remove(elementToSet.put(element,set1));      }    }  }}  }
class C{  public BusinessObjectDataAttributeEntity createBusinessObjectDataAttributeEntity(BusinessObjectDataKey businessObjectDataKey,String businessObjectDataAttributeName,String businessObjectDataAttributeValue){  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDao.getBusinessObjectDataByAltKey(businessObjectDataKey);  if (businessObjectDataEntity == null) {    businessObjectDataEntity=businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(businessObjectDataKey,AbstractDaoTest.LATEST_VERSION_FLAG_SET,AbstractDaoTest.BDATA_STATUS);  }  return createBusinessObjectDataAttributeEntity(businessObjectDataEntity,businessObjectDataAttributeName,businessObjectDataAttributeValue);}  }
class C{  public static void adjustColumnPreferredWidths(JTable table){  adjustColumnPreferredWidths(table,0);}  }
class C{  private static String generateIA(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue,final String wBit,final IOperandTreeNode rootNodeOfRegisterList){  final String startAddress=environment.getNextVariableString();  final String tmpRegisterVal=environment.getNextVariableString();  final Integer numberOfSetBits=rootNodeOfRegisterList.getChildren().size();  long baseOffset=offset;  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue,dw,startAddress));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue,wd,String.valueOf(numberOfSetBits * 4),dw,tmpRegisterVal));  if (wBit.equals("2")) {    instructions.add(ReilHelpers.createStr(baseOffset++,dw,tmpRegisterVal,dw,registerNodeValue));  }  return startAddress;}  }
class C{  public UCrop withMaxResultSize(@IntRange(from=100) int width,@IntRange(from=100) int height){  mCropIntent.putExtra(EXTRA_MAX_SIZE_SET,true);  mCropIntent.putExtra(EXTRA_MAX_SIZE_X,width);  mCropIntent.putExtra(EXTRA_MAX_SIZE_Y,height);  return this;}  }
class C{  public ConnectTimeoutException(final String message){  super(message);}  }
class C{  public static ModelAction newInstance(ModelWidget modelWidget,Element actionElement){  if ("set".equals(actionElement.getNodeName())) {    return new SetField(modelWidget,actionElement);  } else   if ("property-map".equals(actionElement.getNodeName())) {    return new PropertyMap(modelWidget,actionElement);  } else   if ("property-to-field".equals(actionElement.getNodeName())) {    return new PropertyToField(modelWidget,actionElement);  } else   if ("script".equals(actionElement.getNodeName())) {    return new Script(modelWidget,actionElement);  } else   if ("service".equals(actionElement.getNodeName())) {    return new Service(modelWidget,actionElement);  } else   if ("entity-one".equals(actionElement.getNodeName())) {    return new EntityOne(modelWidget,actionElement);  } else   if ("entity-and".equals(actionElement.getNodeName())) {    return new EntityAnd(modelWidget,actionElement);  } else   if ("entity-condition".equals(actionElement.getNodeName())) {    return new EntityCondition(modelWidget,actionElement);  } else   if ("get-related-one".equals(actionElement.getNodeName())) {    return new GetRelatedOne(modelWidget,actionElement);  } else   if ("get-related".equals(actionElement.getNodeName())) {    return new GetRelated(modelWidget,actionElement);  } else {    throw new IllegalArgumentException("Action element not supported with name: " + actionElement.getNodeName());  }}  }
class C{  public final boolean containsInAny(Point point){  if (point == null) {    String msg=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().fine(msg);    throw new IllegalArgumentException(msg);  }  for (  PickPointFrustum frustum : this) {    if (frustum.contains(point)) {      return true;    }  }  return false;}  }
class C{  public TranslucentShapedFrameTest(){  try {    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  } catch (  Exception ex) {  }  initComponents();  checkEffects();  SwingUtilities.updateComponentTreeUI(this);}  }
class C{  public AdminClient(String serviceName,ShardManagerClient shardManagerClient,Config config,ConfigWriter configWriter,GondolaAdminClient gondolaAdminClient){  this.serviceName=serviceName;  this.shardManagerClient=shardManagerClient;  this.config=config;  this.configWriter=configWriter;  this.config.registerForUpdates(null);  this.gondolaAdminClient=gondolaAdminClient;}  }
class C{  @Override public ItemRecommendationResultSet recommend(String client,Long user,Set<Integer> dimensions,int maxRecsCount,RecommendationContext ctxt,List<Long> recentItemInteractions){  RecommendationContext.OptionsHolder options=ctxt.getOptsHolder();  MfUserClustersModelManager.MfUserModel model=modelManager.getClientStore(client,options);  if (model == null) {    if (logger.isDebugEnabled())     logger.debug("Failed to find ms cluster model for client " + client);    return new ItemRecommendationResultSet(Collections.<ItemRecommendationResultSet.ItemRecommendationResult>emptyList(),name);  }  Integer clusterIdx=model.userClusters.get(user);  if (clusterIdx == null) {    if (logger.isDebugEnabled())     logger.debug("No user cluster for user " + user);    return new ItemRecommendationResultSet(Collections.<ItemRecommendationResultSet.ItemRecommendationResult>emptyList(),name);  }  List<Recommendation> recsAll=model.recommendations.get(clusterIdx);  if (recsAll == null) {    logger.error("Failed to find recommendations for cluster id " + clusterIdx);    return new ItemRecommendationResultSet(Collections.<ItemRecommendationResultSet.ItemRecommendationResult>emptyList(),name);  }  Map<Long,Double> scores=new HashMap<>();  Set<Long> exclusions=Collections.emptySet();  if (ctxt.getMode() == RecommendationContext.MODE.EXCLUSION) {    exclusions=ctxt.getContextItems();  }  for (  Recommendation candidate : recsAll) {    if (!exclusions.contains(candidate.getContent())) {      scores.put(candidate.getContent(),candidate.getPrediction());      if (scores.size() >= maxRecsCount)       break;    }  }  Map<Long,Double> scaledScores=RecommendationUtils.rescaleScoresToOne(scores,maxRecsCount);  List<ItemRecommendationResultSet.ItemRecommendationResult> results=new ArrayList<>();  for (  Map.Entry<Long,Double> e : scaledScores.entrySet()) {    results.add(new ItemRecommendationResultSet.ItemRecommendationResult(e.getKey(),e.getValue().floatValue()));  }  return new ItemRecommendationResultSet(results,name);}  }
class C{  public JnaServiceConnection(FbClientLibrary clientLibrary,IServiceProperties connectionProperties) throws SQLException {  this(clientLibrary,connectionProperties,EncodingFactory.getPlatformDefault());}  }
class C{  public int isNullable(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].nullable;}  }
class C{  public void removeRepository(Repository repository){  repository.preRemove();  repository.removeRepositoryListener(repositoryListener);  repositories.remove(repository);  fireUpdate(null);}  }
class C{  @POST @Path("repository") @ZeppelinApi public Response addRepository(String message){  try {    Repository request=gson.fromJson(message,Repository.class);    interpreterFactory.addRepository(request.getId(),request.getUrl(),request.isSnapshot(),request.getAuthentication(),request.getProxy());    logger.info("New repository {} added",request.getId());  } catch (  Exception e) {    logger.error("Exception in InterpreterRestApi while adding repository ",e);    return new JsonResponse<>(Status.INTERNAL_SERVER_ERROR,e.getMessage(),ExceptionUtils.getStackTrace(e)).build();  }  return new JsonResponse(Status.CREATED).build();}  }
class C{  public table addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public void doPreExplode(){  super.doPreExplode();  worldObj.playSoundEffect(position.xPos,position.yPos,position.zPos,Reference.PREFIX + "antimatter",7F,(float)(worldObj.rand.nextFloat() * 0.1 + 0.9F));  doDamageEntities(getRadius(),Integer.MAX_VALUE);}  }
class C{  public static Class<?> wrapper(Class<?> type){  if (type == null) {    return null;  } else   if (type.isPrimitive()) {    if (boolean.class == type) {      return Boolean.class;    } else     if (int.class == type) {      return Integer.class;    } else     if (long.class == type) {      return Long.class;    } else     if (short.class == type) {      return Short.class;    } else     if (byte.class == type) {      return Byte.class;    } else     if (double.class == type) {      return Double.class;    } else     if (float.class == type) {      return Float.class;    } else     if (char.class == type) {      return Character.class;    } else     if (void.class == type) {      return Void.class;    }  }  return type;}  }
class C{  @Override public final void postSetUp() throws Exception {  IgnoredException.addIgnoredException("java.io.IOException");  final Host host=Host.getHost(0);  server=host.getVM(0);  client=host.getVM(2);  PORT=((Integer)server.invoke(null)).intValue();}  }
class C{  public void markDirty(long platformIdentId){  cleanPlatformIdents.remove(platformIdentId);}  }
class C{  private Shape decodeArrowPath(int width,int height){  return shapeGenerator.createArrowLeft(width * 0.2,height * 0.2,width * 0.6,height * 0.6);}  }
class C{  public Mailer(String from,String smtp){  this.smtp=smtp;  this.from=from;}  }
class C{  public synchronized void addIndex(PageIndex index){  metaObjects.put(index.getId(),index);}  }
class C{  private void decode(byte[] data,int width,int height){  Size size=activity.getCameraManager().getPreviewSize();  byte[] rotatedData=new byte[data.length];  for (int y=0; y < size.height; y++) {    for (int x=0; x < size.width; x++)     rotatedData[x * size.height + size.height - y - 1]=data[x + y * size.width];  }  int tmp=size.width;  size.width=size.height;  size.height=tmp;  Result rawResult=null;  PlanarYUVLuminanceSource source=buildLuminanceSource(rotatedData,size.width,size.height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    if (handler != null) {      Message message=Message.obtain(handler,Constants.DECODE_SUCCESSED,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,Constants.DECODE_FAILED);      message.sendToTarget();    }  }}  }
class C{  private Ref checker() throws PageException {  Ref ref=null;  if (cfml.isCurrentQuoter()) {    return string();  }  if (cfml.isCurrentDigit() || cfml.isCurrent('.')) {    return number();  }  if ((ref=dynamic()) != null) {    mode=DYNAMIC;    return ref;  }  if (!limited && (ref=sharp()) != null) {    mode=DYNAMIC;    return ref;  }  if ((ref=json(isJson ? JSON_ARRAY : LITERAL_ARRAY,'[',']')) != null) {    mode=DYNAMIC;    return ref;  }  if ((ref=json(isJson ? JSON_STRUCT : LITERAL_STRUCT,'{','}')) != null) {    mode=DYNAMIC;    return ref;  }  if (cfml.isAfterLast() && cfml.toString().trim().length() == 0)   return new LString("");  String str=cfml.toString();  int pos=cfml.getPos();  if (str.length() > 100) {    if (pos <= 10) {      str=str.substring(0,20) + " ...";    } else     if ((str.length() - pos) <= 10) {      str="... " + str.substring(str.length() - 20,str.length());    } else {      str="... " + str.substring(pos - 10,pos + 10) + " ...";    }  }  throw new InterpreterException("Syntax Error, Invalid Construct","at position " + (pos + 1) + " in ["+ str+ "]");}  }
class C{  public void waitFor(InterceptedStream<T> stream){  T underlyingStream=stream.getStream();synchronized (underlyingStream) {    while (streams.get(stream.getIndex()) == stream) {      try {        underlyingStream.wait(STREAM_WAIT_TIMEOUT);      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  private static int paramCount(String desc){  String baseTypes="BCDFIJSZ";  int count=0;  for (int i=0; i < desc.length(); i++) {    char c=desc.charAt(i);    if (baseTypes.indexOf(c) != -1) {      count++;    } else     if (c == 'L') {      count++;      i=desc.indexOf(';',i);    } else     if (c == ')') {      break;    }  }  return count;}  }
class C{  public Mx1Turnout(int number,Mx1TrafficController tc,String p){  super(p + "T" + number);  _number=number;  this.tc=tc;  this.prefix=p + "T";}  }
class C{  public final void testHashCode02(){  ECPoint p1=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.ONE);  ECPoint p2=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.valueOf(1L));  assertEquals(p1.hashCode(),p2.hashCode());}  }
class C{  public void testGetSpeed_float_int(){  float speed=0.001F;  int maxStepHi=127;  int maxStepLo=28;  AbstractThrottle instance=new AbstractThrottleImpl();  assertEquals("Idle",0,instance.intSpeed(0.0F,maxStepHi));  assertEquals("Idle",0,instance.intSpeed(0.0F,maxStepLo));  assertEquals("Emergency",1,instance.intSpeed(-1.0F,maxStepHi));  assertEquals("Emergency",1,instance.intSpeed(-1.0F,maxStepLo));  assertEquals("Emergency",1,instance.intSpeed(-0.001F,maxStepHi));  assertEquals("Emergency",1,instance.intSpeed(-0.001F,maxStepLo));  assertEquals("Full Speed",maxStepHi,instance.intSpeed(1.0F,maxStepHi));  assertEquals("Full Speed",maxStepLo,instance.intSpeed(1.0F,maxStepLo));  while (speed < 1.1F) {    int result=instance.intSpeed(speed,maxStepHi);    assertNotSame(speed + "(" + maxStepHi+ " steps) should not idle",0,result);    assertNotSame(speed + "(" + maxStepHi+ " steps) should not eStop",1,result);    assertTrue(speed + "(" + maxStepHi+ " steps) should not exceed "+ maxStepHi,result <= 127);    result=instance.intSpeed(speed,maxStepLo);    assertNotSame(speed + "(" + maxStepLo+ " steps) should not idle",0,result);    assertNotSame(speed + "(" + maxStepLo+ " steps) should not eStop",1,result);    assertTrue(speed + "(" + maxStepLo+ " steps) should not exceed "+ maxStepLo,result <= 127);    speed=speed + 0.001F;  }}  }
class C{  public static void enableHelpKey(Component component,String id){  if (component instanceof JComponent) {    JComponent jComponent=(JComponent)component;    if (componentsWithHelp == null) {      componentsWithHelp=new WeakHashMap<>();    }    componentsWithHelp.put(jComponent,id);  }  if (hb != null) {    hb.enableHelp(component,id,hs);  }}  }
class C{  public T caseFunctionblockModel(FunctionblockModel object){  return null;}  }
class C{  public static boolean isExtension(String filename,String[] extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.length == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.287 -0500",hash_original_method="B7A9F5DC521617567AEB2EDF2366DE24",hash_generated_method="0EFB6A67DF9CE37072D3FACBB70497CD") public ViaHeader createViaHeader(String host,int port,String transport,String branch) throws ParseException, InvalidArgumentException {  if (host == null || transport == null)   throw new NullPointerException("null arg");  Via via=new Via();  if (branch != null)   via.setBranch(branch);  if (host.indexOf(':') >= 0 && host.indexOf('[') < 0) {    if (stripAddressScopeZones) {      int zoneStart=host.indexOf('%');      if (zoneStart != -1)       host=host.substring(0,zoneStart);    }    host='[' + host + ']';  }  via.setHost(host);  via.setPort(port);  via.setTransport(transport);  return via;}  }
class C{  public Validate(final boolean skipInvalidElements){  super();  this.skipInvalidElements=skipInvalidElements;}  }
class C{  public static void add(Calendar c,int val,String unit){  Integer uu=CALENDAR_UNITS.get(unit);  if (null == uu) {    throw new IllegalArgumentException("Adding Unit not recognized: " + unit);  }  c.add(uu.intValue(),val);}  }
class C{  @Override public boolean add(Float value){  return _set.add(unwrap(value));}  }
class C{  public void activateNextFrame(){  switchFrame(true);}  }
class C{  BigDecimalPolynomial(BigDecimal[] coeffs){  this.coeffs=coeffs;}  }
class C{  public final boolean hasMessages(int what){  return mExec.hasMessages(what);}  }
class C{  public static <E extends Comparable<E>>boolean isBST(BinaryNode<E> node,List<BinaryNode<E>> list){  if (node == null)   return true;  boolean left=isBST(node.left,list);  if (list.size() > 0 && list.get(list.size() - 1).value.compareTo(node.value) > 0) {    return false;  }  list.add(node);  boolean right=isBST(node.right,list);  return left && right;}  }
class C{  public JSONObject(Map<?,?> map){  this.map=new HashMap<String,Object>();  if (map != null) {    for (    final Entry<?,?> e : map.entrySet()) {      final Object value=e.getValue();      if (value != null) {        this.map.put(String.valueOf(e.getKey()),wrap(value));      }    }  }}  }
class C{  private static AbstractMap.SimpleEntry<String,String> methodWithAbstractMapSimpleEntryResult(){  return new AbstractMap.SimpleEntry<>("valueA","valueB");}  }
class C{  public CompilationUnit(PackageFragment parent,JavaModelManager manager,String name,WorkingCopyOwner owner){  super(parent,manager);  this.name=name;  this.owner=owner;}  }
class C{  public static BigDecimal available(int p_C_Payment_ID) throws SQLException {  if (p_C_Payment_ID == 0)   return null;  int C_Currency_ID=0;  int C_ConversionType_ID=0;  BigDecimal PayAmt=null;  int C_Charge_ID=0;  String sql="SELECT C_Currency_ID, C_ConversionType_ID, PayAmt, C_Charge_ID " + "FROM C_Payment_v " + "WHERE C_Payment_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_C_Payment_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    C_Currency_ID=rs.getInt(1);    C_ConversionType_ID=rs.getInt(2);    PayAmt=rs.getBigDecimal(3);    C_Charge_ID=rs.getInt(4);  }  rs.close();  pstmt.close();  if (PayAmt == null)   return null;  if (C_Charge_ID != 0)   return Adempiere.ZERO;  BigDecimal allocatedAmt=getAllocatedAmt(p_C_Payment_ID,C_Currency_ID,C_ConversionType_ID);  BigDecimal available=PayAmt.subtract(allocatedAmt);  return Currency.round(available,C_Currency_ID,null);}  }
class C{  private void createKeyspace(KeyValuePersistenceSettings settings){  int attempt=0;  Throwable error=null;  String errorMsg="Failed to create Cassandra keyspace '" + settings.getKeyspace() + "'";  while (attempt < CQL_EXECUTION_ATTEMPTS_COUNT) {    try {      log.info("-----------------------------------------------------------------------");      log.info("Creating Cassandra keyspace '" + settings.getKeyspace() + "'");      log.info("-----------------------------------------------------------------------\n\n" + settings.getKeyspaceDDLStatement() + "\n");      log.info("-----------------------------------------------------------------------");      session().execute(settings.getKeyspaceDDLStatement());      log.info("Cassandra keyspace '" + settings.getKeyspace() + "' was successfully created");      return;    } catch (    AlreadyExistsException ignored) {      log.info("Cassandra keyspace '" + settings.getKeyspace() + "' already exist");      return;    }catch (    Throwable e) {      if (!CassandraHelper.isHostsAvailabilityError(e))       throw new IgniteException(errorMsg,e);      handleHostsAvailabilityError(e,attempt,errorMsg);      error=e;    }    attempt++;  }  throw new IgniteException(errorMsg,error);}  }
class C{  public static void onFooterDrawerItemClick(DrawerBuilder drawer,IDrawerItem drawerItem,View v,Boolean fireOnClick){  boolean checkable=!(drawerItem != null && drawerItem instanceof Selectable && !((Selectable)drawerItem).isSelectable());  if (checkable) {    drawer.resetStickyFooterSelection();    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {      v.setActivated(true);    }    v.setSelected(true);    drawer.getAdapter().handleSelection(null,-1);    drawer.mCurrentSelection=-1;    if (drawer.mStickyFooterView != null && drawer.mStickyFooterView instanceof LinearLayout) {      LinearLayout footer=(LinearLayout)drawer.mStickyFooterView;      for (int i=0; i < footer.getChildCount(); i++) {        if (footer.getChildAt(i) == v) {          drawer.mCurrentStickyFooterSelection=i;          break;        }      }    }  }  if (fireOnClick != null) {    boolean consumed=false;    if (fireOnClick && drawer.mOnDrawerItemClickListener != null) {      consumed=drawer.mOnDrawerItemClickListener.onItemClick(v,-1,drawerItem);    }    if (!consumed) {      drawer.closeDrawerDelayed();    }  }}  }
class C{  private void initPlaybackActions(boolean isPlaying){  mNotificationTemplate.setOnClickPendingIntent(R.id.notification_base_play,retrievePlaybackActions(1));  mNotificationTemplate.setOnClickPendingIntent(R.id.notification_base_next,retrievePlaybackActions(2));  mNotificationTemplate.setOnClickPendingIntent(R.id.notification_base_previous,retrievePlaybackActions(3));  mNotificationTemplate.setOnClickPendingIntent(R.id.notification_base_collapse,retrievePlaybackActions(4));  mNotificationTemplate.setImageViewResource(R.id.notification_base_play,isPlaying ? R.drawable.btn_notification_playback_pause : R.drawable.btn_notification_playback_play);}  }
class C{  public <T>JsonArray<T> createListDtoFromJson(InputStream json,Class<T> dtoInterface) throws IOException {  return createListDtoFromJson(new InputStreamReader(json),dtoInterface);}  }
class C{  private int printOnEDT(final Graphics graphics,final PageFormat pf,final int pageIndex) throws PrinterException {  assert SwingUtilities.isEventDispatchThread();  Border border=BorderFactory.createEmptyBorder();  if (headerFormat != null || footerFormat != null) {    Object[] formatArg=new Object[]{Integer.valueOf(pageIndex + 1)};    if (headerFormat != null) {      border=new TitledBorder(border,headerFormat.format(formatArg),TitledBorder.CENTER,TitledBorder.ABOVE_TOP,headerFont,printShell.getForeground());    }    if (footerFormat != null) {      border=new TitledBorder(border,footerFormat.format(formatArg),TitledBorder.CENTER,TitledBorder.BELOW_BOTTOM,footerFont,printShell.getForeground());    }  }  Insets borderInsets=border.getBorderInsets(printShell);  updatePagesMetrics(pageIndex,(int)Math.floor(pf.getImageableHeight()) - borderInsets.top - borderInsets.bottom);  if (pagesMetrics.size() <= pageIndex) {    return NO_SUCH_PAGE;  }  Graphics2D g2d=(Graphics2D)graphics.create();  g2d.translate(pf.getImageableX(),pf.getImageableY());  border.paintBorder(printShell,g2d,0,0,(int)Math.floor(pf.getImageableWidth()),(int)Math.floor(pf.getImageableHeight()));  g2d.translate(0,borderInsets.top);  Rectangle clip=new Rectangle(0,0,(int)pf.getWidth(),pagesMetrics.get(pageIndex).end - pagesMetrics.get(pageIndex).start + 1);  g2d.clip(clip);  int xStart=0;  if (ComponentOrientation.RIGHT_TO_LEFT == printShell.getComponentOrientation()) {    xStart=(int)pf.getImageableWidth() - printShell.getWidth();  }  g2d.translate(xStart,-pagesMetrics.get(pageIndex).start);  printShell.print(g2d);  g2d.dispose();  return Printable.PAGE_EXISTS;}  }
class C{  @Autowired public ShibbolethOAuth2RequestFactory(final ClientDetailsEntityService clientDetailsService){  super(clientDetailsService);}  }
class C{  public static List<String> headers(List<EvaluationStatistics> stats,boolean moveRunFold,boolean addClassifierRelation){  List<String> result;  result=keys(stats,true);  if (moveRunFold) {    if (result.contains(CrossValidation.KEY_FOLD)) {      result.remove(CrossValidation.KEY_FOLD);      result.add(0,CrossValidation.KEY_FOLD);    }    if (result.contains(RepeatedRuns.KEY_RUN)) {      result.remove(RepeatedRuns.KEY_RUN);      result.add(0,RepeatedRuns.KEY_RUN);    }  }  if (addClassifierRelation) {    result.add(0,EvaluationStatistics.KEY_RELATION);    result.add(0,EvaluationStatistics.KEY_CLASSIFIER);  }  return result;}  }
class C{  @Override public void close(){  length=-1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.319 -0500",hash_original_method="F3B35E0FD371515D334EC748B5846BB7",hash_generated_method="D0A1AEE213E7B9EB1FD1C4CEB0FEBDA6") @DSComment("Constructor") @DSSafe(DSCat.SAFE_OTHERS) public ToNetASCIIInputStream(InputStream input){  super(input);  __status=__NOTHING_SPECIAL;}  }
class C{  public ObjectMatrix2D make(int rows,int columns,Object initialValue){  if (initialValue == null)   return make(rows,columns);  return make(rows,columns).assign(initialValue);}  }
class C{  public static void gotoModule(final Window parent,final CDebugPerspectiveModel debugPerspectiveModel,final MemoryModule module){  Preconditions.checkNotNull(parent,"IE01462: Parent argument can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01463: Debug perspective model argument can not be null");  Preconditions.checkNotNull(module,"IE01464: Module argument can not be null");  final IDebugger debugger=debugPerspectiveModel.getCurrentSelectedDebugger();  if (debugger == null) {    return;  }  final MemoryMap memoryMap=debugger.getProcessManager().getMemoryMap();  final MemorySection section=ProcessHelpers.getSectionWith(memoryMap,module.getBaseAddress().getAddress());  if (section == null) {    final String message=String.format("E00046: " + "Could not display module '%s' in the memory view",module.getName());    final String description=String.format("The module '%s' could not be displayed in the memory view because " + "the offset %s is not currently known to BinNavi. " + "Try refreshing the memory map to fix this issue.",module.getName(),module.getBaseAddress());    NaviErrorDialog.show(parent,message,description);  } else {    CMemoryFunctions.gotoOffset(debugPerspectiveModel,module.getBaseAddress().getAddress(),true);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attreffectivevalue.class,args);}  }
class C{  public void addUpperLineSegments(List<ILineSegment> list){  upperSegments.concat(list);}  }
class C{  @Ignore("TODO: use Awaitility and reenable assertions") @Test public void testExceptionInThreads() throws InterruptedException {  DM dm=getSystem().getDistributionManager();  String p1="ItsOkayForMyClassNotToBeFound";  logger.info("<ExpectedException action=add>" + p1 + "</ExpectedException>");  DistributionMessage m=new ItsOkayForMyClassNotToBeFound();  dm.putOutgoing(m);  Thread.sleep(1 * 1000);  logger.info("<ExpectedException action=remove>" + p1 + "</ExpectedException>");}  }
class C{  public K minValue(){  if (refSet.isEmpty()) {    return null;  }  return refSet.firstKey();}  }
class C{  public Vec2 subtract(Vec2 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec2","subtract","missingVector"));  }  this.x-=vector.x;  this.y-=vector.y;  return this;}  }
class C{  public T caseFunctionBlockAttributeSource(FunctionBlockAttributeSource object){  return null;}  }
class C{  public synchronized void removeTaskFromInProgressMap(String jobId){  inprogressTaskMap.remove(jobId);}  }
class C{  public GetPlansSubset(Scenario sc,Collection<Id<Person>> ids,boolean selectedPlansOnly){  super(GetPlansSubset.class.getSimpleName());  this.ids=ids;  this.sc=sc;  this.selectedOnly=selectedPlansOnly;}  }
class C{  public LinkedHashSet(Collection<? extends E> c){  super(Math.max(2 * c.size(),11),.75f,true);  addAll(c);}  }
class C{  public synchronized void strategyStarted(String strategyClassName,Tradestrategy tradestrategy){synchronized (lockBackTestWorker) {    strategiesRunning.getAndIncrement();    lockBackTestWorker.notifyAll();  }}  }
class C{  public boolean isSetExecuteInterval(){  return EncodingUtils.testBit(issetBitfield,EXECUTEINTERVAL_ISSET_ID);}  }
class C{  private String convertLessThanOneThousand(int number){  String soFar;  if (number % 100 < 20) {    soFar=numNames[number % 100];    number/=100;  } else {    soFar=numNames[number % 10];    number/=10;    soFar=tensNames[number % 10] + " " + soFar;    number/=10;  }  soFar=hundredNames[number % 10] + " " + soFar;  number/=10;  return soFar;}  }
class C{  private void emitClear(String fieldName,StringBuilder builder){  builder.append("    public void ");  builder.append(getClearName(fieldName));  builder.append("() {\n      ");  builder.append(getEnsureName(fieldName));  builder.append("();\n      ");  builder.append(fieldName);  builder.append(".clear();\n");  builder.append("    }\n\n");}  }
class C{  public void addPrincipal(String user,char[] pass){  if (user.indexOf('@') < 0) {    user=user + "@" + realm;  }  passwords.put(user,pass);}  }
class C{  private static String renderDescriptor(FieldDescriptor descriptor,String indent){  String isOpt=descriptor.isOptional() ? "<optional>" : "<required>";  String isRep=descriptor.isRepeated() ? "<repeated>" : "<single>";  String fieldPrefix=indent + descriptor.getJsonName() + "["+ isOpt+ " "+ isRep+ "]";  if (descriptor.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {    return fieldPrefix + " {" + System.lineSeparator()+ renderDescriptor(descriptor.getMessageType(),indent + "  ")+ System.lineSeparator()+ indent+ "}";  } else   if (descriptor.getJavaType() == FieldDescriptor.JavaType.ENUM) {    return fieldPrefix + ": " + descriptor.getEnumType().getValues();  } else {    return fieldPrefix + ": " + descriptor.getJavaType();  }}  }
class C{  public boolean lessThan(DMatch it){  return distance < it.distance;}  }
class C{  @Override public boolean isInSameBroadcastDomain(DatapathId s1,OFPort p1,DatapathId s2,OFPort p2){  return isInSameBroadcastDomain(s1,p1,s2,p2,true);}  }
class C{  public QuestCheckingPortal(final String questslot){  this(questslot,"Why should i go down there?. It looks very dangerous.");}  }
class C{  @Override public void run(){  amIActive=true;  double x, y;  double z=0;  int a, intensity;  PointRecord point;  double[] entry;  int lowestPointIndex=-1;  double lowestPointZ=Double.POSITIVE_INFINITY;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFile=args[0];  String outputFile=args[1];  threshold=Double.parseDouble(args[2]);  searchDist=Double.parseDouble(args[3]);  if ((inputFile.length() <= 0 || outputFile.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (inputFile.endsWith(".las")) {      LASReader las=new LASReader(inputFile);      numPoints=(int)las.getNumPointRecords();      data=new LidarData[numPoints];      done=new BooleanBitArray1D(numPoints);      pointsTree=new KdTree.SqrEuclid<>(2,numPoints);      for (a=0; a < numPoints; a++) {        point=las.getPointRecord(a);        if (!point.isPointWithheld()) {          x=point.getX();          y=point.getY();          z=point.getZ();          intensity=point.getIntensity();          entry=new double[]{x,y};          pointsTree.addPoint(entry,a);          data[a]=new LidarData(x,y,z,intensity,a);          if (z < lowestPointZ) {            lowestPointZ=z;            lowestPointIndex=a;          }        }        progress=(int)(100f * (a + 1) / numPoints);        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Reading point data:",progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else     if (inputFile.endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputFile);      if (input.getShapeType().getDimension() != ShapeTypeDimension.Z) {        return;      }      MultiPointZ mpz=(MultiPointZ)(input.getRecord(0).getGeometry());      numPoints=mpz.getNumPoints();      data=new LidarData[numPoints];      done=new BooleanBitArray1D(numPoints);      double[][] points=mpz.getPoints();      double[] zArray=mpz.getzArray();      pointsTree=new KdTree.SqrEuclid<>(2,numPoints);      for (a=0; a < numPoints; a++) {        entry=new double[]{points[a][0],points[a][1]};        pointsTree.addPoint(entry,a);        data[a]=new LidarData(points[a][0],points[a][1],zArray[a],0,a);        if (zArray[a] < lowestPointZ) {          lowestPointZ=zArray[a];          lowestPointIndex=a;        }        progress=(int)(100f * (a + 1) / numPoints);        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Reading point data:",progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }    }    threshold=searchDist * Math.tan(Math.toRadians(65.0));    for (a=0; a < numPoints; a++) {      z=data[a].z;      entry=new double[]{data[a].x,data[a].y};      List<KdTree.Entry<Integer>> results=pointsTree.neighborsWithinRange(entry,searchDist);      double minSlope=z;      for (int i=0; i < results.size(); i++) {        int pointNum=results.get(i).value;        if (pointNum != a) {          if (data[pointNum].z < minSlope) {            minSlope=data[pointNum].z;          }        }      }      data[a].maxDownwardAngle=(z - minSlope);      if (data[a].maxDownwardAngle > threshold) {        data[a].w=0;      } else {        data[a].w=1 - data[a].maxDownwardAngle / threshold;      }      progress=(int)(100f * a / numPoints);      if (progress != oldProgress) {        oldProgress=progress;        updateProgress("Calculating elev. diff.:",progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    DBFField fields[]=new DBFField[5];    fields[0]=new DBFField();    fields[0].setName("Z");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(3);    fields[1]=new DBFField();    fields[1].setName("I");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(8);    fields[1].setDecimalCount(0);    fields[2]=new DBFField();    fields[2].setName("CLASS");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(8);    fields[2].setDecimalCount(0);    fields[3]=new DBFField();    fields[3].setName("MAXDNANGLE");    fields[3].setDataType(DBFField.DBFDataType.NUMERIC);    fields[3].setFieldLength(8);    fields[3].setDecimalCount(4);    fields[4]=new DBFField();    fields[4].setName("WEIGHT");    fields[4].setDataType(DBFField.DBFDataType.NUMERIC);    fields[4].setFieldLength(8);    fields[4].setDecimalCount(4);    File outFile=new File(outputFile);    if (outFile.exists()) {      outFile.delete();    }    ShapeFile output=new ShapeFile(outputFile,ShapeType.POINT,fields);    for (a=0; a < numPoints; a++) {      whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(data[a].x,data[a].y);      Object[] rowData=new Object[5];      rowData[0]=data[a].z;      rowData[1]=(double)data[a].intensity;      rowData[2]=(double)data[a].classValue;      rowData[3]=data[a].maxDownwardAngle;      rowData[4]=data[a].w;      output.addRecord(wbGeometry,rowData);      progress=(int)(100f * (a + 1) / numPoints);      if (progress != oldProgress) {        oldProgress=progress;        updateProgress("Outputting point data:",progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    output.write();    System.out.println("Done!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void sanityLinearScan(LinearScan scan){}  }
class C{  public boolean isFullRank(){  for (int j=0; j < n; j++) {    if (Rdiag[j] == 0) {      return false;    }  }  return true;}  }
class C{  protected boolean stringContainsLine(final String stringToSearch,final String stringPattern){  assert (stringToSearch != null);  assert (stringPattern != null);  Pattern pattern=Pattern.compile("^\\s*" + stringPattern + "\\s*$",Pattern.MULTILINE);  Matcher matcher=pattern.matcher(stringToSearch);  return matcher.find();}  }
class C{  public ComputeExecutionRejectedException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public static Map<String,ChannelAspectInformation> scanAspectInformations(final BundleContext context){  Collection<ServiceReference<ChannelAspectFactory>> refs;  try {    refs=context.getServiceReferences(ChannelAspectFactory.class,null);  } catch (  final InvalidSyntaxException e) {    return Collections.emptyMap();  }  if (refs == null) {    return Collections.emptyMap();  }  final Map<String,ChannelAspectInformation> result=new HashMap<>(refs.size());  for (  final ServiceReference<ChannelAspectFactory> ref : refs) {    final ChannelAspectInformation info=makeInformation(ref);    result.put(info.getFactoryId(),info);  }  return result;}  }
class C{  public E peek(){  return (status == DequeStatus.Empty) ? null : elements[front];}  }
class C{  public static boolean isSdAvailable(){  return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BEFileChooserUICross((JFileChooser)c);}  }
class C{  public static PageFragment newInstance(long pageId){  Bundle args=new Bundle();  args.putLong(PageFragment.PAGE_ID,pageId);  PageFragment fragment=new PageFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource,String subPattern) throws IOException {  File rootDir;  try {    rootDir=rootDirResource.getFile().getAbsoluteFile();  } catch (  IOException ex) {    if (logger.isWarnEnabled()) {      logger.warn("Cannot search for matching files underneath " + rootDirResource + " because it does not correspond to a directory in the file system",ex);    }    return Collections.emptySet();  }  return doFindMatchingFileSystemResources(rootDir,subPattern);}  }
class C{  public static boolean validateEmail(String value){  return pattern.matcher((String)value).matches();}  }
class C{  public TranscoderOutput(String uri){  this.uri=uri;}  }
class C{  protected boolean err(){  return status != STATUS_OK;}  }
class C{  protected void testSimpleValues(final String fieldname,final Class clazz,final Comparable... vals){  clearIndex();  assert 0 < vals.length;  Comparable min=vals[0];  Comparable max=vals[0];  final String type=clazz.getName();  final SolrInputDocument doc1=sdoc("id","1");  for (  Comparable v : vals) {    doc1.addField(fieldname,v);    if (0 < min.compareTo(v)) {      min=v;    }    if (0 > max.compareTo(v)) {      max=v;    }  }  assertU(adoc(doc1));  assertU(adoc(sdoc("id","2")));  assertU(commit());  assertQ(fieldname,req("q","id:1","fl","exists_val_min:exists(field(" + fieldname + ",min))","fl","exists_val_max:exists(field(" + fieldname + ",max))","fl","val_min:field(" + fieldname + ",min)","fl","val_max:field(" + fieldname + ",max)"),"//*[@numFound='1']","//bool[@name='exists_val_min']='true'","//bool[@name='exists_val_max']='true'","//" + type + "[@name='val_min']='"+ min+ "'","//" + type + "[@name='val_max']='"+ max+ "'");  assertQ(fieldname,req("q","id:2","fl","exists_val_min:exists(field(" + fieldname + ",min))","fl","exists_val_max:exists(field(" + fieldname + ",max))","fl","val_min:field(" + fieldname + ",min)","fl","val_max:field(" + fieldname + ",max)"),"//*[@numFound='1']","//bool[@name='exists_val_min']='false'","//bool[@name='exists_val_max']='false'","count(//" + type + "[@name='val_min'])=0","count(//" + type + "[@name='val_max'])=0");  for (  String dir : new String[]{"asc","desc"}) {    for (    String mm : new String[]{"min","max"}) {      for (      String func : new String[]{"field(" + fieldname + ","+ mm+ ")","def(field(" + fieldname + ","+ mm+ "),42)","sum(32,field(" + fieldname + ","+ mm+ "))"}) {        assertQ(fieldname,req("q","*:*","fl","id","sort",func + " " + dir),"//*[@numFound='2']","//float[@name='id']='1.0'","//float[@name='id']='2.0'");      }    }  }}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  if (log.isInfoEnabled()) {    log.info("|-Exception Sensor Data Access Service active...");  }}  }
class C{  @Singleton @Provides UI provideLocale(BaseApp baseApp){  return new UIDomain(baseApp);}  }
class C{  static boolean matchesToken(String value){  return TOKEN_REGEX.matcher(value).matches();}  }
class C{  private void loadBOM() throws Exception {  int count=0;  if (p_M_Product_ID == 0)   raiseError("Error: ","Product ID not found");  X_T_BOMLine tboml=new X_T_BOMLine(ctx,0,null);  tboml.setPP_Product_BOM_ID(0);  tboml.setPP_Product_BOMLine_ID(0);  tboml.setM_Product_ID(p_M_Product_ID);  tboml.setSel_Product_ID(p_M_Product_ID);  tboml.setImplosion(p_implosion);  tboml.setLevelNo(0);  tboml.setLevels("0");  tboml.setSeqNo(0);  tboml.setAD_PInstance_ID(AD_PInstance_ID);  tboml.save();  if (p_implosion) {    PreparedStatement stmt=null;    ResultSet rs=null;    String sql="SELECT PP_Product_BOMLine_ID FROM PP_Product_BOMLine " + "WHERE IsActive = 'Y' AND M_Product_ID = ? ";    try {      stmt=DB.prepareStatement(sql,get_TrxName());      stmt.setInt(1,p_M_Product_ID);      rs=stmt.executeQuery();      while (rs.next()) {        parentImplotion(rs.getInt(1));        ++count;      }      if (count == 0)       raiseError("Error: ","Product is not a component");    } catch (    SQLException e) {      log.log(Level.SEVERE,e.getLocalizedMessage() + sql,e);      throw new Exception("SQLException: " + e.getLocalizedMessage());    } finally {      DB.close(rs,stmt);      rs=null;      stmt=null;    }  } else {    PreparedStatement stmt=null;    ResultSet rs=null;    String sql="SELECT PP_Product_BOM_ID FROM PP_Product_BOM " + "WHERE IsActive = 'Y' AND M_Product_ID = ? ";    try {      stmt=DB.prepareStatement(sql,get_TrxName());      stmt.setInt(1,p_M_Product_ID);      rs=stmt.executeQuery();      while (rs.next()) {        parentExplotion(rs.getInt(1));        ++count;      }      if (count == 0)       raiseError("Error: ","Product is not a BOM");    } catch (    SQLException e) {      log.log(Level.SEVERE,e.getLocalizedMessage() + sql,e);      throw new Exception("SQLException: " + e.getLocalizedMessage());    } finally {      DB.close(rs,stmt);      rs=null;      stmt=null;    }  }}  }
class C{  public ValueChangeListenerTestImpl(){}  }
class C{  private double[] calcDeltaXY(int m){  double dE_dxm=0;  double dE_dym=0;  double d2E_d2xm=0;  double d2E_dxmdym=0;  double d2E_dymdxm=0;  double d2E_d2ym=0;  for (int i=0; i < vertices.length; i++) {    if (i != m) {      double dist=dm[m][i];      double l_mi=L * dist;      double k_mi=K / (dist * dist);      double dx=xydata[m].getX() - xydata[i].getX();      double dy=xydata[m].getY() - xydata[i].getY();      double d=Math.sqrt(dx * dx + dy * dy);      double ddd=d * d * d;      dE_dxm+=k_mi * (1 - l_mi / d) * dx;      dE_dym+=k_mi * (1 - l_mi / d) * dy;      d2E_d2xm+=k_mi * (1 - l_mi * dy * dy / ddd);      d2E_dxmdym+=k_mi * l_mi * dx* dy / ddd;      d2E_d2ym+=k_mi * (1 - l_mi * dx * dx / ddd);    }  }  d2E_dymdxm=d2E_dxmdym;  double denomi=d2E_d2xm * d2E_d2ym - d2E_dxmdym * d2E_dymdxm;  double deltaX=(d2E_dxmdym * dE_dym - d2E_d2ym * dE_dxm) / denomi;  double deltaY=(d2E_dymdxm * dE_dxm - d2E_d2xm * dE_dym) / denomi;  return new double[]{deltaX,deltaY};}  }
class C{  public final boolean isUnresolved(){  return holder.isUnresolved();}  }
class C{  @Override public String toString(){  StringBuffer retval=new StringBuffer(80);  retval.append(Integer.toHexString(hashCode()));  retval.append("[");  retval.append(sess.getCipherSuite());  retval.append(": ");  retval.append(super.toString());  retval.append("]");  return retval.toString();}  }
class C{  public void close() throws IOException {  if (open) {    if (INFO) {      log.info("Closing iterator.");    }    try {      sourceIterator.close();    }  finally {      open=false;    }  }}  }
class C{  public static OnSelectClause createOnSelect(String windowName,String asName){  return OnSelectClause.create(windowName,asName);}  }
class C{  public WrappedByteBuffer putBytes(byte[] b){  _autoExpand(b.length);  _buf.put(b);  return this;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEOFDone=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  zzFinalHighSurrogate=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;  if (zzBuffer.length > ZZ_BUFFERSIZE)   zzBuffer=new char[ZZ_BUFFERSIZE];}  }
class C{  static Object newInstance(String className,ClassLoader classLoader) throws ConfigurationError {  try {    Class spiClass;    if (classLoader == null) {      spiClass=Class.forName(className);    } else {      spiClass=classLoader.loadClass(className);    }    if (debug) {      debugPrintln("Loaded " + className + " from "+ which(spiClass));    }    return spiClass.newInstance();  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  protected boolean isMergeContiguousFragments(String fieldName,SolrParams params){  return params.getFieldBool(fieldName,HighlightParams.MERGE_CONTIGUOUS_FRAGMENTS,false);}  }
class C{  @Override protected void registerSelf(){}  }
class C{  public AdapterLayoutDelegate(ViewGroup viewGroup){  mViewGroup=viewGroup;}  }
class C{  public static GLUhalfEdge __gl_meshMakeEdge(GLUmesh mesh){  GLUvertex newVertex1=new GLUvertex();  GLUvertex newVertex2=new GLUvertex();  GLUface newFace=new GLUface();  GLUhalfEdge e;  e=MakeEdge(mesh.eHead);  if (e == null)   return null;  MakeVertex(newVertex1,e,mesh.vHead);  MakeVertex(newVertex2,e.Sym,mesh.vHead);  MakeFace(newFace,e,mesh.fHead);  return e;}  }
class C{  public List<Integer> emit(Tuple anchor,List<Object> tuple){  return emit(Utils.DEFAULT_STREAM_ID,anchor,tuple);}  }
class C{  public MethodInvokingStateMachineRuntimeProcessor(Object targetObject,Class<? extends Annotation> annotationType){  delegate=new StateMachineMethodInvokerHelper<T,S,E>(targetObject,annotationType);}  }
class C{  public void addAll(Iterable<? extends Number> values){  for (  Number value : values) {    add(value.doubleValue());  }}  }
class C{  @Override public NamedList<T> clone(){  ArrayList<Object> newList=new ArrayList<>(nvPairs.size());  newList.addAll(nvPairs);  return new NamedList<>(newList);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ReferencingElement_IM.class) {switch (derivedFeatureID) {case ImPackage.IDENTIFIER_REF_IM__REWIRED_TARGET:      return ImPackage.REFERENCING_ELEMENT_IM__REWIRED_TARGET;default :    return -1;}}if (baseClass == ReferencingElementExpression_IM.class) {switch (derivedFeatureID) {default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static String selectEntry(RepositoryLocation resolveRelativeTo,Component c){  return selectLocation(resolveRelativeTo,null,c,true,false,false,true);}  }
class C{  public void addSegment(short startCode,short endCode,short idDelta){  Segment s=new Segment(startCode,endCode,false);  segments.remove(s);  segments.put(s,new Integer(idDelta));}  }
class C{  public void slashStarComments(boolean flag){  slashStarCommentsP=flag;}  }
class C{  private static void calculateThresholdForBlock(byte[] luminances,int subWidth,int subHeight,int width,int height,int[][] blackPoints,BitMatrix matrix){  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int left=cap(x,2,subWidth - 3);      int top=cap(y,2,subHeight - 3);      int sum=0;      for (int z=-2; z <= 2; z++) {        int[] blackRow=blackPoints[top + z];        sum+=blackRow[left - 2] + blackRow[left - 1] + blackRow[left]+ blackRow[left + 1]+ blackRow[left + 2];      }      int average=sum / 25;      thresholdBlock(luminances,xoffset,yoffset,average,width,matrix);    }  }}  }
class C{  void decrementFilesOpenedForRead(){  filesOpenedForRead.decrement();}  }
class C{  private RelyingParty parseSPOrganization(Element entityEle) throws Exception {  RelyingParty rp=null;  NodeList nodes=entityEle.getElementsByTagNameNS(SAMLNames.NS_NAME_SAML_METADATA,SAMLNames.ORGANIZATION);  if (nodes.getLength() > 0) {    Element orgEle=(Element)nodes.item(0);    String orgName=orgEle.getElementsByTagNameNS(SAMLNames.NS_NAME_SAML_METADATA,"OrganizationName").item(0).getTextContent();    String orgURL=orgEle.getElementsByTagNameNS(SAMLNames.NS_NAME_SAML_METADATA,SAMLNames.ORGANIZATIONURL).item(0).getTextContent();    rp=new RelyingParty(orgName);    rp.setUrl(orgURL);  }  return rp;}  }
class C{  public <T extends Comparable<T>>Map<T,Double> recommendDocsUsingDocQuery(List<T> recentItems,QueryTransform<T> docTransform,int numResults,Set<T> exclusions,T minDoc,boolean ignorePerfectMatches){  Map<T,Double> scores=new HashMap<>();  for (  T recent : recentItems) {    ArrayList<SemVectorResult<T>> docResult=new ArrayList<>();    recommendDocsUsingDocQuery(recent,docResult,docTransform,numResults * 10,exclusions,minDoc);    for (    SemVectorResult<T> r : docResult) {      Double score=scores.get(r.result);      if (ignorePerfectMatches && r.score == 1.0)       logger.info("Ignoring perfect match between " + recent + " and "+ r.result+ " overlap "+ r.score); else {        if (score != null)         score=score + r.score; else         score=r.score;        scores.put(r.result,score);      }    }  }  return RecommendationUtils.rescaleScoresToOne(scores,numResults);}  }
class C{  public static StackMap make2(ClassPool classes,MethodInfo minfo) throws BadBytecode {  CodeAttribute ca=minfo.getCodeAttribute();  if (ca == null)   return null;  TypedBlock[] blocks;  try {    blocks=TypedBlock.makeBlocks(minfo,ca,true);  } catch (  BasicBlock.JsrBytecode e) {    return null;  }  if (blocks == null)   return null;  MapMaker mm=new MapMaker(classes,minfo,ca);  try {    mm.make(blocks,ca.getCode());  } catch (  BadBytecode bb) {    throw new BadBytecode(minfo,bb);  }  return mm.toStackMap2(minfo.getConstPool(),blocks);}  }
class C{  public void addFooterView(View v,Object data,boolean isSelectable){  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mFooterViewInfos.add(info);  if (mAdapter != null && mDataSetObserver != null) {    mDataSetObserver.onChanged();  }}  }
class C{  public static boolean isBigDecimal(CharSequence self){  try {    new BigDecimal(self.toString().trim());    return true;  } catch (  NumberFormatException nfe) {    return false;  }}  }
class C{  protected void commonSnapshotUpdate(BlockSnapshot snapShot,CIMInstance syncVolume,WBEMClient client,StorageSystem storage,String sourceElementId,String elementName,boolean createSession,DbClient dbClient){  try {    CIMProperty consumableBlocks=syncVolume.getProperty(SmisConstants.CP_CONSUMABLE_BLOCKS);    CIMProperty blockSize=syncVolume.getProperty(SmisConstants.CP_BLOCK_SIZE);    Long provisionedCapacity=Long.valueOf(consumableBlocks.getValue().toString()) * Long.valueOf(blockSize.getValue().toString());    snapShot.setProvisionedCapacity(provisionedCapacity);    CloseableIterator<CIMInstance> iterator=null;    iterator=client.referenceInstances(syncVolume.getObjectPath(),SmisConstants.CIM_ALLOCATED_FROM_STORAGEPOOL,null,false,SmisConstants.PS_SPACE_CONSUMED);    if (iterator.hasNext()) {      CIMInstance allocatedFromStoragePoolPath=iterator.next();      CIMProperty spaceConsumed=allocatedFromStoragePoolPath.getProperty(SmisConstants.CP_SPACE_CONSUMED);      if (null != spaceConsumed) {        snapShot.setAllocatedCapacity(Long.valueOf(spaceConsumed.getValue().toString()));      }    }    setSettingsInstance(storage,snapShot,sourceElementId,elementName,createSession,dbClient);  } catch (  Exception e) {    _log.error("Caught an exception while trying to update Capacity and SettingsInstance for Snapshots",e);  }}  }
class C{  public String nextCDATA() throws JSONException {  char c;  int i;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=next();    if (end()) {      throw syntaxError("Unclosed CDATA");    }    sb.append(c);    i=sb.length() - 3;    if (i >= 0 && sb.charAt(i) == ']' && sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {      sb.setLength(i);      return sb.toString();    }  }}  }
class C{  private void clearMem(){  memory.reset();  memInfo=new TreeMap<>();  nextReservableAddress=memAddressStart;  variables.clear();  constants.clear();}  }
class C{  public int size(){  return n;}  }
class C{  public String writeJsonApiDocument(JsonApiDocument jsonApiDocument) throws JsonProcessingException {  return mapper.writeValueAsString(jsonApiDocument);}  }
class C{  public ScalebarLayer(){  setPickEnabled(false);}  }
class C{  public MultiHostConnectionTest(String name){  super(name);}  }
class C{  @Override protected void onImageLaidOut(){  super.onImageLaidOut();  final Drawable drawable=getDrawable();  if (drawable == null) {    return;  }  float drawableWidth=drawable.getIntrinsicWidth();  float drawableHeight=drawable.getIntrinsicHeight();  if (mTargetAspectRatio == SOURCE_IMAGE_ASPECT_RATIO) {    mTargetAspectRatio=drawableWidth / drawableHeight;  }  int height=(int)(mThisWidth / mTargetAspectRatio);  if (height > mThisHeight) {    int width=(int)(mThisHeight * mTargetAspectRatio);    int halfDiff=(mThisWidth - width) / 2;    mCropRect.set(halfDiff,0,width + halfDiff,mThisHeight);  } else {    int halfDiff=(mThisHeight - height) / 2;    mCropRect.set(0,halfDiff,mThisWidth,height + halfDiff);  }  calculateImageScaleBounds(drawableWidth,drawableHeight);  setupInitialImagePosition(drawableWidth,drawableHeight);  if (mCropBoundsChangeListener != null) {    mCropBoundsChangeListener.onCropAspectRatioChanged(mTargetAspectRatio);  }  if (mTransformImageListener != null) {    mTransformImageListener.onScale(getCurrentScale());    mTransformImageListener.onRotate(getCurrentAngle());  }}  }
class C{  static void clearGatheredViolations(){  gatheredViolations.set(null);}  }
class C{  public void moveMeasureShape(Angle azimuth,Angle distance){  if (distance == null) {    String msg=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (azimuth == null) {    String msg=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (this.isRegularShape()) {    if (controlPoints.size() > 0) {      ControlPoint point=this.getControlPoint(CENTER);      point.setPosition(new Position(LatLon.greatCircleEndPosition(point.getPosition(),azimuth,distance),0));      moveControlPoint(point);    }  } else {    for (int i=0; i < positions.size(); i++) {      Position newPos=computeSurfacePosition(LatLon.greatCircleEndPosition(positions.get(i),azimuth,distance));      positions.set(i,newPos);      if (!this.measureShapeType.equals(SHAPE_POLYGON) || i < positions.size() - 1)       ((ControlPoint)controlPoints.get(i)).setPosition(new Position(newPos,0));    }    if (measureShapeType.equals(SHAPE_LINE) && positions.size() > 1)     shapeOrientation=LatLon.greatCircleAzimuth(positions.get(0),positions.get(1));    updateMeasureShape();  }}  }
class C{  public ALayoutConstraint createNext(){  return new ALayoutConstraint(m_row,m_col + 1);}  }
class C{  public Object readLengthList(AbstractHessianInput in,int length) throws IOException {  Object[] data=createArray(length);  in.addRef(data);  if (_componentType != null) {    for (int i=0; i < data.length; i++)     data[i]=in.readObject(_componentType);  } else {    for (int i=0; i < data.length; i++)     data[i]=in.readObject();  }  return data;}  }
class C{  public Collection<GridPortRecord> records(){synchronized (recs) {    return Collections.unmodifiableCollection(new ArrayList<>(recs));  }}  }
class C{  public int leader(){  return leader;}  }
class C{  public MemoryImageSource(int w,int h,ColorModel cm,int[] pix,int off,int scan,Hashtable<?,?> props){  initialize(w,h,cm,(Object)pix,off,scan,props);}  }
class C{  public final void readFully(byte[] b) throws java.io.IOException {  return;}  }
class C{  public Builder asyncExecutor(ExecutorService executor){  if (null == executor) {    throw new NullPointerException("executor is null");  }  mAsyncExecutor=executor;  return this;}  }
class C{  public boolean isUncheckedException(boolean includeSupertype){switch (this.id) {case TypeIds.T_JavaLangError:case TypeIds.T_JavaLangRuntimeException:    return true;case TypeIds.T_JavaLangThrowable:case TypeIds.T_JavaLangException:  return includeSupertype;}ReferenceBinding current=this;while ((current=current.superclass()) != null) {switch (current.id) {case TypeIds.T_JavaLangError:case TypeIds.T_JavaLangRuntimeException:  return true;case TypeIds.T_JavaLangThrowable:case TypeIds.T_JavaLangException:return false;}}return false;}  }
class C{  public static void unregisterLogListener(final Context context,final DfuLogListener listener){  if (mLogBroadcastReceiver != null) {    final boolean empty=mLogBroadcastReceiver.removeLogListener(listener);    if (empty) {      LocalBroadcastManager.getInstance(context).unregisterReceiver(mLogBroadcastReceiver);      mLogBroadcastReceiver=null;    }  }}  }
class C{  ItemInputStream(){  findSeparator();}  }
class C{  public void listenTo(Set<ComponentName> extensions){  mListenedExtensions=extensions;  List<ComponentName> extensionList=extensions == null ? null : new ArrayList<>(extensions);  try {    if (mService != null) {      mService.listenTo(extensionList,mCallback);    }  } catch (  RemoteException e) {  }}  }
class C{  public static String toVariableName(String str){  return toVariableName(str,true,false);}  }
class C{  public static Class<?> createCompositeInterface(Class<?>[] interfaces,ClassLoader classLoader){  Assert.notEmpty(interfaces,"Interfaces must not be empty");  Assert.notNull(classLoader,"ClassLoader must not be null");  return Proxy.getProxyClass(classLoader,interfaces);}  }
class C{  public static CaseWhenThenExpression caseWhenThen(){  return new CaseWhenThenExpression();}  }
class C{  private void checkPrinter(DateTimePrinter printer){  if (printer == null) {    throw new IllegalArgumentException("No printer supplied");  }}  }
class C{  protected void commit() throws Exception {  Trx trx=null;  if (trxName != null)   trx=Trx.get(trxName,false);  if (trx != null && trx.isActive()) {    try {      trx.commit(true);    }  finally {      trx.close();    }  }  trx=null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetdoctypenodtd.class,args);}  }
class C{  @Override public boolean isLookupFontSupported(){  return true;}  }
class C{  public synchronized void compact() throws Exception {  if (compactor != null) {    throw new IllegalStateException("There is pending compacting operation");  }  if (ActiveMQJournalLogger.LOGGER.isDebugEnabled()) {    ActiveMQJournalLogger.LOGGER.debug("JournalImpl::compact compacting journal " + (++compactCount));  }  compactorLock.writeLock().lock();  try {    ArrayList<JournalFile> dataFilesToProcess=new ArrayList<>(filesRepository.getDataFilesCount());    boolean previousReclaimValue=isAutoReclaim();    try {      ActiveMQJournalLogger.LOGGER.debug("Starting compacting operation on journal");      onCompactStart();      journalLock.writeLock().lock();      try {        if (state != JournalState.LOADED) {          return;        }        onCompactLockingTheJournal();        setAutoReclaim(false);        moveNextFile(false);        dataFilesToProcess.addAll(filesRepository.getDataFiles());        filesRepository.clearDataFiles();        if (dataFilesToProcess.size() == 0) {          logger.trace("Finishing compacting, nothing to process");          return;        }        compactor=new JournalCompactor(fileFactory,this,filesRepository,records.keySet(),dataFilesToProcess.get(0).getFileID());        for (        Map.Entry<Long,JournalTransaction> entry : transactions.entrySet()) {          compactor.addPendingTransaction(entry.getKey(),entry.getValue().getPositiveArray());          entry.getValue().setCompacting();        }        records.clear();      }  finally {        journalLock.writeLock().unlock();      }      Collections.sort(dataFilesToProcess,new JournalFileComparator());      for (      final JournalFile file : dataFilesToProcess) {        try {          JournalImpl.readJournalFile(fileFactory,file,compactor);        } catch (        Throwable e) {          ActiveMQJournalLogger.LOGGER.compactReadError(file);          throw new Exception("Error on reading compacting for " + file,e);        }      }      compactor.flush();      onCompactDone();      List<JournalFile> newDatafiles=null;      JournalCompactor localCompactor=compactor;      SequentialFile controlFile=createControlFile(dataFilesToProcess,compactor.getNewDataFiles(),null);      journalLock.writeLock().lock();      try {        compactor=null;        onCompactLockingTheJournal();        newDatafiles=localCompactor.getNewDataFiles();        for (        Map.Entry<Long,JournalRecord> newRecordEntry : localCompactor.getNewRecords().entrySet()) {          records.put(newRecordEntry.getKey(),newRecordEntry.getValue());        }        for (int i=newDatafiles.size() - 1; i >= 0; i--) {          JournalFile fileToAdd=newDatafiles.get(i);          if (logger.isTraceEnabled()) {            logger.trace("Adding file " + fileToAdd + " back as datafile");          }          filesRepository.addDataFileOnTop(fileToAdd);        }        if (logger.isTraceEnabled()) {          logger.trace("There are " + filesRepository.getDataFilesCount() + " datafiles Now");        }        for (        JournalTransaction newTransaction : localCompactor.getNewTransactions().values()) {          newTransaction.replaceRecordProvider(this);        }        localCompactor.replayPendingCommands();        for (        JournalTransaction newTransaction : localCompactor.getNewTransactions().values()) {          if (logger.isTraceEnabled()) {            logger.trace("Merging pending transaction " + newTransaction + " after compacting the journal");          }          JournalTransaction liveTransaction=transactions.get(newTransaction.getId());          if (liveTransaction != null) {            liveTransaction.merge(newTransaction);          } else {            ActiveMQJournalLogger.LOGGER.compactMergeError(newTransaction.getId());          }        }      }  finally {        journalLock.writeLock().unlock();      }      renameFiles(dataFilesToProcess,newDatafiles);      deleteControlFile(controlFile);      ActiveMQJournalLogger.LOGGER.debug("Finished compacting on journal");    }  finally {      if (compactor != null) {        try {          compactor.flush();        } catch (        Throwable ignored) {        }        compactor=null;      }      setAutoReclaim(previousReclaimValue);    }  }  finally {    compactorLock.writeLock().unlock();  }}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public void keyReleased(){}  }
class C{  private LocalVariableInfo doit(){  for (int label=method.getFirstLabel(); label >= 0; label=Bits.findFirst(workSet,0)) {    Bits.clear(workSet,label);    processBlock(label);  }  resultInfo.setImmutable();  return resultInfo;}  }
class C{  private String convertToAttributeName(String localName){  return localName.replace('_',' ');}  }
class C{  public synchronized void add(double x,double y,double value){  super.add(x,y);  mValue.add(value);  updateRange(value);}  }
class C{  private HashMap<BasicBlock,BasicBlock> createCloneLoop(AnnotatedLSTNode loop,HashMap<Register,Register> regMap,HashMap<Register,BasicBlock> regToBlockMap){  HashMap<BasicBlock,BasicBlock> originalToCloneBBMap=new HashMap<BasicBlock,BasicBlock>();  originalToCloneBBMap.put(loop.successor,loop.header);  BasicBlock new_pred=loop.header.createSubBlock(SYNTH_LOOP_VERSIONING_BCI,ir);  ir.cfg.linkInCodeOrder(ir.cfg.lastInCodeOrder(),new_pred);  originalToCloneBBMap.put(loop.predecessor,new_pred);  Enumeration<BasicBlock> blocks=loop.getBasicBlocks();  while (blocks.hasMoreElements()) {    BasicBlock block=blocks.nextElement();    block.killFallThrough();    BasicBlock copy=block.copyWithoutLinks(ir);    originalToCloneBBMap.put(block,copy);    ir.cfg.linkInCodeOrder(ir.cfg.lastInCodeOrder(),copy);    IREnumeration.AllInstructionsEnum instructions=new IREnumeration.AllInstructionsEnum(ir,copy);    while (instructions.hasMoreElements()) {      Instruction instruction=instructions.nextElement();      Enumeration<Operand> operands=instruction.getDefs();      while (operands.hasMoreElements()) {        Operand operand=operands.nextElement();        if (operand.isRegister()) {          Register register=operand.asRegister().getRegister();          if (regMap.containsKey(register)) {            instruction.replaceRegister(register,regMap.get(register));            regToBlockMap.put(regMap.get(register),copy);          }        }      }      operands=instruction.getUses();      while (operands.hasMoreElements()) {        Operand operand=operands.nextElement();        if (operand instanceof RegisterOperand) {          Register register=operand.asRegister().getRegister();          if (regMap.containsKey(register)) {            instruction.replaceRegister(register,regMap.get(register));          }        }      }    }  }  new_pred.redirectOuts(loop.header,originalToCloneBBMap.get(loop.header),ir);  blocks=loop.getBasicBlocks();  while (blocks.hasMoreElements()) {    BasicBlock block=blocks.nextElement();    BasicBlock copy=originalToCloneBBMap.get(block);    Enumeration<BasicBlock> outs=block.getOutNodes();    while (outs.hasMoreElements()) {      BasicBlock out=outs.nextElement();      if (originalToCloneBBMap.containsKey(out)) {        copy.redirectOuts(out,originalToCloneBBMap.get(out),ir);      }    }  }  blocks=loop.getBasicBlocks();  while (blocks.hasMoreElements()) {    BasicBlock block=blocks.nextElement();    BasicBlock copy=originalToCloneBBMap.get(block);    IREnumeration.AllInstructionsEnum instructions=new IREnumeration.AllInstructionsEnum(ir,copy);    while (instructions.hasMoreElements()) {      Instruction instruction=instructions.nextElement();      if (Phi.conforms(instruction)) {        for (int i=0; i < Phi.getNumberOfValues(instruction); i++) {          BasicBlock phi_predecessor=Phi.getPred(instruction,i).block;          if (originalToCloneBBMap.containsKey(phi_predecessor)) {            Phi.setPred(instruction,i,new BasicBlockOperand(originalToCloneBBMap.get(phi_predecessor)));          } else {            dumpIR(ir,"Error when optimising" + ir.getMethod());            throw new Error("There's > 1 route to this phi node " + instruction + " from outside the loop: "+ phi_predecessor);          }        }      }    }  }  return originalToCloneBBMap;}  }
class C{  private String eventName(HadoopTaskInfo info,String evtType){  return eventName(info.type().toString(),info.taskNumber(),evtType);}  }
class C{  private static double square(double value){  return value * value;}  }
class C{  void init(boolean decrypting,String algorithm,byte[] key,byte[] iv) throws InvalidKeyException {  if ((key == null) || (iv == null) || (iv.length != blockSize)) {    throw new InvalidKeyException("Internal error");  }  this.iv=iv;  reset();  embeddedCipher.init(false,algorithm,key);}  }
class C{  public void testActiveJoin() throws Throwable {  testServerJoin(Member.Type.ACTIVE);}  }
class C{  public static String string(int val){  return types.getText(val);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  Alert item=(Alert)obj;  if (risk != item.risk) {    return false;  }  if (confidence != item.confidence) {    return false;  }  if (pluginId != item.pluginId) {    return false;  }  if (!name.equals(item.name)) {    return false;  }  if (!method.equalsIgnoreCase(item.method)) {    return false;  }  if (!uri.equalsIgnoreCase(item.uri)) {    return false;  }  if (!param.equalsIgnoreCase(item.param)) {    return false;  }  if (!otherInfo.equalsIgnoreCase(item.otherInfo)) {    return false;  }  if (evidence == null) {    if (item.evidence != null) {      return false;    }  } else   if (!evidence.equals(item.evidence)) {    return false;  }  if (attack == null) {    if (item.attack != null) {      return false;    }  } else   if (!attack.equals(item.attack)) {    return false;  }  return true;}  }
class C{  protected static String toHitIsImpossible(IGame game,Entity ae,Targetable target){  String physicalImpossible=PhysicalAttackAction.toHitIsImpossible(game,ae,target);  String extendedBladeImpossible=null;  if ((ae instanceof Mech) && ((Mech)ae).hasExtendedRetractableBlade()) {    extendedBladeImpossible="Extended retractable blade";  }  if (physicalImpossible != null) {    return physicalImpossible;  }  if (ae.getGrappled() != Entity.NONE) {    return "Unit Grappled";  }  if (ae.isEvading()) {    return "attacker is evading.";  }  if (!game.getOptions().booleanOption("friendly_fire")) {    if ((target.getTargetType() == Targetable.TYPE_ENTITY) && ((((Entity)target).getOwnerId() == ae.getOwnerId()) || ((((Entity)target).getOwner().getTeam() != IPlayer.TEAM_NONE) && (ae.getOwner().getTeam() != IPlayer.TEAM_NONE) && (ae.getOwner().getTeam() == ((Entity)target).getOwner().getTeam())))) {      return "A friendly unit can never be the target of a direct attack.";    }  }  return extendedBladeImpossible;}  }
class C{  public Instruction createEventCounterInstruction(int counterNumber){  return createEventCounterInstruction(counterNumber,1.0);}  }
class C{  public boolean isBackbuttonOverridden(){  return webView.isButtonPlumbedToJs(KeyEvent.KEYCODE_BACK);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS06.class,args);}  }
class C{  public NbtTagEnd(){}  }
class C{  public SecretKey engineResolveSecretKey(Element element,String BaseURI,StorageResolver storage) throws KeyResolverException {  return null;}  }
class C{  public static ExecResult javaExec(Project project,Action<JavaExecSpec> spec) throws IOException {  if (OS.getNative().isWindows()) {    Box.Nullable<File> classpathJarBox=Box.Nullable.ofNull();    ExecResult execResult=project.javaexec(null);    Errors.suppress().run(null);    return execResult;  } else {    return project.javaexec(spec);  }}  }
class C{  public void onOrientationChanged(Orientation last,Orientation current){  orientation=current;}  }
class C{  public long[][] initializeHashFunctions(){  int numberOfHashFunctions;  int bigPrimeInt=(int)bigPrime;  numberOfHashFunctions=(int)Math.floor(Math.log(2) * bitSet.length() / expectedNumberOfObjects);  if (numberOfHashFunctions == 0)   numberOfHashFunctions=1;  long[][] hashFunctions=new long[numberOfHashFunctions][2];  for (  long[] h : hashFunctions) {    h[0]=(long)RANDOM.nextInt(bigPrimeInt) + 1;    h[1]=(long)RANDOM.nextInt(bigPrimeInt) + 1;  }  return hashFunctions;}  }
class C{  public void store(Word value){}  }
class C{  public void addObservations(int states[][],int j,int otherSourcesToDestOffsets[]){  addObservations(states,j,otherSourcesToDestOffsets,false);}  }
class C{  @Override public Void gather(IGASState<BFS.VS,BFS.ES,Void> state,Value u,Statement e){  throw new UnsupportedOperationException();}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  @Override public boolean execute(@NotNull PsiElement pe,@NotNull ResolveState state){  if (pe instanceof PsiVariable) {    final PsiVariable pvar=(PsiVariable)pe;    final String pvar_name=pvar.getName();    if (pvar_name.startsWith(myPrefix)) {      if (!myStaticSensitiveFlag || (!myStaticScopeFlag || pvar.hasModifierProperty(PsiModifier.STATIC))) {        myResultList.add(pvar);      }    }  }  return true;}  }
class C{  public style removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  private int handleG(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (charAt(value,index + 1) == 'H') {    index=handleGH(value,result,index);  } else   if (charAt(value,index + 1) == 'N') {    if (index == 1 && isVowel(charAt(value,0)) && !slavoGermanic) {      result.append("KN","N");    } else     if (!contains(value,index + 2,2,"EY") && charAt(value,index + 1) != 'Y' && !slavoGermanic) {      result.append("N","KN");    } else {      result.append("KN");    }    index=index + 2;  } else   if (contains(value,index + 1,2,"LI") && !slavoGermanic) {    result.append("KL","L");    index+=2;  } else   if (index == 0 && (charAt(value,index + 1) == 'Y' || contains(value,index + 1,2,ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {    result.append('K','J');    index+=2;  } else   if ((contains(value,index + 1,2,"ER") || charAt(value,index + 1) == 'Y') && !contains(value,0,6,"DANGER","RANGER","MANGER") && !contains(value,index - 1,1,"E","I")&& !contains(value,index - 1,3,"RGY","OGY")) {    result.append('K','J');    index+=2;  } else   if (contains(value,index + 1,1,"E","I","Y") || contains(value,index - 1,4,"AGGI","OGGI")) {    if ((contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) || contains(value,index + 1,2,"ET")) {      result.append('K');    } else     if (contains(value,index + 1,3,"IER")) {      result.append('J');    } else {      result.append('J','K');    }    index+=2;  } else   if (charAt(value,index + 1) == 'G') {    index+=2;    result.append('K');  } else {    index++;    result.append('K');  }  return index;}  }
class C{  protected HARegionQueue createHARegionQueue(String name) throws IOException, ClassNotFoundException, CacheException, InterruptedException {  HARegionQueue regionqueue=HARegionQueue.getHARegionQueueInstance(name,cache,HARegionQueue.BLOCKING_HA_QUEUE,false);  return regionqueue;}  }
class C{  protected void updateFunction(int fn,boolean state){switch (fn) {case 0:    this.f0=state;  break;case 1:this.f1=state;break;case 2:this.f2=state;break;case 3:this.f3=state;break;case 4:this.f4=state;break;case 5:this.f5=state;break;case 6:this.f6=state;break;case 7:this.f7=state;break;case 8:this.f8=state;break;case 9:this.f9=state;break;case 10:this.f10=state;break;case 11:this.f11=state;break;case 12:this.f12=state;break;case 13:this.f13=state;break;case 14:this.f14=state;break;case 15:this.f15=state;break;case 16:this.f16=state;break;case 17:this.f17=state;break;case 18:this.f18=state;break;case 19:this.f19=state;break;case 20:this.f20=state;break;case 21:this.f21=state;break;case 22:this.f22=state;break;case 23:this.f23=state;break;case 24:this.f24=state;break;case 25:this.f25=state;break;case 26:this.f26=state;break;case 27:this.f27=state;break;case 28:this.f28=state;break;}}  }
class C{  public static GetEventsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetEventsResponse object=new GetEventsResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"getEventsResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (GetEventsResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(StorageEvent.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(StorageEvent.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((StorageEvent[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(StorageEvent.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void createShip(int tag){  ships[tag]=new Ship(this,new MutableDouble2D(0,0),new Double2D(width / 2,height / 2),tag);}  }
class C{  protected void addExpressionPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Filter_expression_feature"),getString("_UI_PropertyDescriptor_description","_UI_Filter_expression_feature","_UI_Filter_type"),EipPackage.Literals.FILTER__EXPRESSION,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  protected List<File> listJars(File path){  File[] jars=path.listFiles(null);  if (jars == null) {    return Collections.emptyList();  } else {    return Arrays.<File>asList(jars);  }}  }
class C{  public final boolean postDelayed(Runnable r,long delayMillis){  return mExec.postDelayed(wrapRunnable(r),delayMillis);}  }
class C{  @Override public String useEqualFrequencyTipText(){  return "Always true.";}  }
class C{  private void sampleAllVertices(final QueryEngine queryEngine,final int limit){  final Map<Vertex,AtomicInteger> vertexLimit=new LinkedHashMap<Vertex,AtomicInteger>();  for (  Vertex v : V) {    vertexLimit.put(v,new AtomicInteger(limit));  }  sampleVertices(queryEngine,vertexLimit);}  }
class C{  private boolean isFullWidthArabicNumeral(char c){}  }
class C{  protected boolean isQuiet(){  return false;}  }
class C{  public void restoreSecondaryNamespace(){  this.secondaryNamespace=this.secondaryNamespaces.pop();}  }
class C{  @Override public void pause(){  Gdx.app.log(TAG,"Paused");}  }
class C{  public boolean isEqual(){  return equal;}  }
class C{  public void endDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.endDocument();  }}  }
class C{  public final static double radToDeg(double rad){  return Math.toDegrees(rad);}  }
class C{  public static String expand(String baseUrl,String uriTemplate,Object parameters,boolean addUnusedParamsAsQueryParams){  String pathUri;  if (uriTemplate.startsWith("/")) {    GenericUrl url=new GenericUrl(baseUrl);    url.setRawPath(null);    pathUri=url.build() + uriTemplate;  } else   if (uriTemplate.startsWith("http://") || uriTemplate.startsWith("https://")) {    pathUri=uriTemplate;  } else {    pathUri=baseUrl + uriTemplate;  }  return expand(pathUri,parameters,addUnusedParamsAsQueryParams);}  }
class C{  void calcVeeNodes(boolean[][] edges,boolean[][] arrows,SeparationSet[][] sepsets){  for (int iNode1=0; iNode1 < maxn(); iNode1++) {    for (int iNode2=0; iNode2 < maxn(); iNode2++) {      arrows[iNode1][iNode2]=false;    }  }  for (int iNode1=0; iNode1 < maxn() - 1; iNode1++) {    for (int iNode2=iNode1 + 1; iNode2 < maxn(); iNode2++) {      if (!edges[iNode1][iNode2]) {        for (int iNode3=0; iNode3 < maxn(); iNode3++) {          if ((iNode3 != iNode1 && iNode3 != iNode2 && edges[iNode1][iNode3] && edges[iNode2][iNode3]) & (!sepsets[iNode1][iNode2].contains(iNode3))) {            arrows[iNode1][iNode3]=true;            arrows[iNode2][iNode3]=true;          }        }      }    }  }}  }
class C{  public void interpretLine(String line){  String answerString="";  answerString=interpreter.execWithGroovyShell(line);  GlobalValues.userConsole.displayText(answerString);  updateHistoryWindow();  gExec.gui.WatchWorkspace.displayGroovySciBinding(gExec.gLab.gLab.variablesWorkSpacePanel);  gExec.gLab.gLab.outerPane.revalidate();}  }
class C{  public void testAckedMessageAreConsumed() throws JMSException {  connection.start();  Session session=connection.createSession(false,ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);  Queue queue=session.createQueue(getQueueName());  MessageProducer producer=session.createProducer(queue);  producer.send(session.createTextMessage("Hello"));  MessageConsumer consumer=session.createConsumer(queue);  Message msg=consumer.receive(1000);  assertNotNull(msg);  msg.acknowledge();  session.close();  session=connection.createSession(false,ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);  consumer=session.createConsumer(queue);  msg=consumer.receive(1000);  assertNull(msg);  session.close();}  }
class C{  public static CodedInputStream newInstance(final InputStream input){  return new CodedInputStream(input);}  }
class C{  public static boolean is50OrHigher(IJavaProject project){  return is50OrHigher(getSourceCompliance(project));}  }
class C{  public String onDemandDirectoryTipText(){  return "The directory to look in for cost files. This directory will be " + "searched for cost files when loading on demand.";}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static synchronized PeriodType forFields(DurationFieldType[] types){  if (types == null || types.length == 0) {    throw new IllegalArgumentException("Types array must not be null or empty");  }  for (int i=0; i < types.length; i++) {    if (types[i] == null) {      throw new IllegalArgumentException("Types array must not contain null");    }  }  Map<PeriodType,Object> cache=cTypes;  if (cache.isEmpty()) {    cache.put(standard(),standard());    cache.put(yearMonthDayTime(),yearMonthDayTime());    cache.put(yearMonthDay(),yearMonthDay());    cache.put(yearWeekDayTime(),yearWeekDayTime());    cache.put(yearWeekDay(),yearWeekDay());    cache.put(yearDayTime(),yearDayTime());    cache.put(yearDay(),yearDay());    cache.put(dayTime(),dayTime());    cache.put(time(),time());    cache.put(years(),years());    cache.put(months(),months());    cache.put(weeks(),weeks());    cache.put(days(),days());    cache.put(hours(),hours());    cache.put(minutes(),minutes());    cache.put(seconds(),seconds());    cache.put(millis(),millis());  }  PeriodType inPartType=new PeriodType(null,types,null);  Object cached=cache.get(inPartType);  if (cached instanceof PeriodType) {    return (PeriodType)cached;  }  if (cached != null) {    throw new IllegalArgumentException("PeriodType does not support fields: " + cached);  }  PeriodType type=standard();  List<DurationFieldType> list=new ArrayList<DurationFieldType>(Arrays.asList(types));  if (list.remove(DurationFieldType.years()) == false) {    type=type.withYearsRemoved();  }  if (list.remove(DurationFieldType.months()) == false) {    type=type.withMonthsRemoved();  }  if (list.remove(DurationFieldType.weeks()) == false) {    type=type.withWeeksRemoved();  }  if (list.remove(DurationFieldType.days()) == false) {    type=type.withDaysRemoved();  }  if (list.remove(DurationFieldType.hours()) == false) {    type=type.withHoursRemoved();  }  if (list.remove(DurationFieldType.minutes()) == false) {    type=type.withMinutesRemoved();  }  if (list.remove(DurationFieldType.seconds()) == false) {    type=type.withSecondsRemoved();  }  if (list.remove(DurationFieldType.millis()) == false) {    type=type.withMillisRemoved();  }  if (list.size() > 0) {    cache.put(inPartType,list);    throw new IllegalArgumentException("PeriodType does not support fields: " + list);  }  PeriodType checkPartType=new PeriodType(null,type.iTypes,null);  PeriodType checkedType=(PeriodType)cache.get(checkPartType);  if (checkedType != null) {    cache.put(checkPartType,checkedType);    return checkedType;  }  cache.put(checkPartType,type);  return type;}  }
class C{  private void sendAck(Request request,boolean throwIOExceptionAsSipException) throws SipException {  SIPRequest ackRequest=(SIPRequest)request;  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("sendAck" + this);  if (!ackRequest.getMethod().equals(Request.ACK))   throw new SipException("Bad request method -- should be ACK");  if (this.getState() == null || this.getState().getValue() == EARLY_STATE) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logError("Bad Dialog State for " + this + " dialogID = "+ this.getDialogId());    }    throw new SipException("Bad dialog state " + this.getState());  }  if (!this.getCallId().getCallId().equals(((SIPRequest)request).getCallId().getCallId())) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logError("CallID " + this.getCallId());      sipStack.getStackLogger().logError("RequestCallID = " + ackRequest.getCallId().getCallId());      sipStack.getStackLogger().logError("dialog =  " + this);    }    throw new SipException("Bad call ID in request");  }  try {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("setting from tag For outgoing ACK= " + this.getLocalTag());      sipStack.getStackLogger().logDebug("setting To tag for outgoing ACK = " + this.getRemoteTag());      sipStack.getStackLogger().logDebug("ack = " + ackRequest);    }    if (this.getLocalTag() != null)     ackRequest.getFrom().setTag(this.getLocalTag());    if (this.getRemoteTag() != null)     ackRequest.getTo().setTag(this.getRemoteTag());  } catch (  ParseException ex) {    throw new SipException(ex.getMessage());  }  Hop hop=sipStack.getNextHop(ackRequest);  if (hop == null)   throw new SipException("No route!");  try {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("hop = " + hop);    ListeningPointImpl lp=(ListeningPointImpl)this.sipProvider.getListeningPoint(hop.getTransport());    if (lp == null)     throw new SipException("No listening point for this provider registered at " + hop);    InetAddress inetAddress=InetAddress.getByName(hop.getHost());    MessageChannel messageChannel=lp.getMessageProcessor().createMessageChannel(inetAddress,hop.getPort());    boolean releaseAckSem=false;    long cseqNo=((SIPRequest)request).getCSeq().getSeqNumber();    if (!this.isAckSent(cseqNo)) {      releaseAckSem=true;    }    this.setLastAckSent(ackRequest);    messageChannel.sendMessage(ackRequest);    this.isAcknowledged=true;    this.highestSequenceNumberAcknowledged=Math.max(this.highestSequenceNumberAcknowledged,((SIPRequest)ackRequest).getCSeq().getSeqNumber());    if (releaseAckSem && this.isBackToBackUserAgent) {      this.releaseAckSem();    } else {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Not releasing ack sem for " + this + " isAckSent "+ releaseAckSem);      }    }  } catch (  IOException ex) {    if (throwIOExceptionAsSipException)     throw new SipException("Could not send ack",ex);    this.raiseIOException(hop.getHost(),hop.getPort(),hop.getTransport());  }catch (  SipException ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logException(ex);    throw ex;  }catch (  Exception ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logException(ex);    throw new SipException("Could not create message channel",ex);  }  if (this.dialogDeleteTask != null) {    this.dialogDeleteTask.cancel();    this.dialogDeleteTask=null;  }  this.ackSeen=true;}  }
class C{  @Override public LessonStep findByLessonAndId(Lesson lesson,Long lessonStepId){  LessonStep lessonStep=this.lessonStepRepository.findByLessonAndId(lesson,lessonStepId).orElseThrow(null);  return lessonStep;}  }
class C{  @DSComment("callback needs to be called") @DSSpec(DSCat.TO_MODEL) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:29.184 -0500",hash_original_method="C70A5270C6C8A079FCAADE9A65184BCF",hash_generated_method="A193FECA312B4466BB2570207EDE17A7") public void schedule(TimerTask task,long delay){  if (delay < 0) {    throw new IllegalArgumentException();  }  scheduleImpl(task,delay,-1,false);}  }
class C{  protected void initialize(LayerTreeModel model,Offset offset){  if (model == null)   model=this.createTreeModel();  this.setModel(model);  this.setLayout(this.createTreeLayout(offset));  this.expandPath(this.getModel().getRoot().getPath());}  }
class C{  private void resetJoinTimer(){  cancelJoinTimer();  joinTimeout=context.getThreadContext().schedule(context.getElectionTimeout().multipliedBy(2),null);}  }
class C{  public static Paint newBorderPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_LINE_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint borderPaint=new Paint();  borderPaint.setAntiAlias(true);  borderPaint.setColor(Color.parseColor(SEMI_TRANSPARENT));  borderPaint.setStrokeWidth(lineThicknessPx);  borderPaint.setStyle(Paint.Style.STROKE);  return borderPaint;}  }
class C{  public static void main(String[] argv){  runClassifier(new FilteredClassifier(),argv);}  }
class C{  protected void updateSolution(double[][] sol,double[] meta,int it){  final double mom=(it < momentumSwitch && initialMomentum < finalMomentum) ? initialMomentum : finalMomentum;  final int dim3=dim * 3;  for (int i=0, off=0; i < sol.length; i++, off+=dim3) {    final double[] sol_i=sol[i];    for (int k=0; k < dim; k++) {      final int gradk=off + k, movk=gradk + dim, gaink=movk + dim;      meta[gaink]=MathUtil.max(((meta[gradk] > 0) != (meta[movk] > 0)) ? (meta[gaink] + 0.2) : (meta[gaink] * 0.8),MIN_GAIN);      meta[movk]*=mom;      meta[movk]-=learningRate * meta[gradk] * meta[gaink];      sol_i[k]+=meta[movk];    }  }}  }
class C{  private void changeVisibilityOfPopupWindow(final boolean show){  if (show == isDropped()) {    return;  }  if (!show) {    this.popup.setVisible(false);    if (!isDisposed()) {      this.text.setFocus();    }    return;  }  if (getShell() != this.popup.getParent()) {    this.popup.dispose();    this.popup=null;    createPopup();  }  final Point arrowRect=this.arrow.toDisplay(this.arrow.getSize().x - 5,this.arrow.getSize().y + this.arrow.getBorderWidth() - 3);  int x=arrowRect.x;  int y=arrowRect.y;  final Rectangle displayRect=getMonitor().getClientArea();  final Rectangle parentRect=getDisplay().map(getParent(),null,getBounds());  this.popup.pack();  final int width=this.popup.getBounds().width;  final int maxHeight=(2 * displayRect.height / 3);  int height=this.popup.getBounds().height;  if (height > maxHeight) {    height=maxHeight;    this.popup.setSize(width,height);    this.scrolledComposite.setMinHeight(this.preferredHeightOfPopup);    this.popup.layout(true);  }  if (y + height > displayRect.y + displayRect.height) {    y=parentRect.y - height;    if (y < 0) {      height+=y;      y=parentRect.y - height + 5;      this.popup.setSize(width,height);      this.scrolledComposite.setMinHeight(this.preferredHeightOfPopup);      this.popup.layout(true);    }  }  if (x + width > displayRect.x + displayRect.width) {    x=displayRect.x + displayRect.width - width;  }  this.popup.setLocation(x,y);  this.popup.setVisible(true);  this.popup.setFocus();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.318 -0500",hash_original_method="B39D6D1260080244B44CBF7BC9D51D96",hash_generated_method="F9AB658D9C1B1CE59DBA818F156F2BB9") public void endDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.endDocument();  }}  }
class C{  private void initializeListeners(){  try {    codeNode.getParentFunction().addListener(functionUpdater);    codeNode.getParentFunction().getModule().addListener(moduleUpdater);  } catch (  final MaybeNullException exception) {  }  final HashMap<INaviInstruction,INaviFunction> referenceMap=CReferenceFinder.getCodeReferenceMap(codeNode);  for (  final INaviFunction functionReference : Sets.newHashSet(referenceMap.values())) {    functionReference.addListener(functionUpdater);  }  codeNode.addListener(codeNodeListener);  for (  final INaviInstruction instruction : codeNode.getInstructions()) {    instruction.addListener(instructionUpdater);    for (    final COperandTree tree : instruction.getOperands()) {      for (      final INaviOperandTreeNode currentNode : tree.getNodes()) {        currentNode.addListener(operandTreeUpdater);      }    }  }  final Iterator<CTag> it=codeNode.getTagsIterator();  while (it.hasNext()) {    it.next().addListener(tagUpdater);  }  for (  final IDebugger debugger : provider.getDebuggers()) {    debugger.getProcessManager().addListener(debuggerUpdater);  }  provider.addListener(debuggerProviderListener);  graph.getSettings().getDisplaySettings().addListener(settingsUpdater);  try {    codeNode.getParentFunction().getModule().getTypeManager().addListener(substitutionsUpdater);  } catch (  final MaybeNullException exception) {  }}  }
class C{  public static <K,V>LinkedHashMap<K,V> newLinkedHashMap(int size){  return new LinkedHashMap<K,V>(size);}  }
class C{  protected CountEmitter(String name){  super(name);}  }
class C{  protected String doIt() throws Exception {  log.info("doIt - AD_Client_ID=" + p_AD_Client_ID + ",AD_Org_ID="+ p_AD_Org_ID+ ",C_ConversionType_ID="+ p_C_ConversionType_ID+ ",ValidFrom="+ p_ValidFrom+ ",CreateReciprocalRate="+ p_CreateReciprocalRate);  StringBuffer sql=null;  int no=0;  String clientCheck=" AND AD_Client_ID=" + p_AD_Client_ID;  if (p_DeleteOldImported) {    sql=new StringBuffer("DELETE I_Conversion_Rate " + "WHERE I_IsImported='Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.fine("Delete Old Impored =" + no);  }  sql=new StringBuffer("UPDATE I_Conversion_Rate " + "SET AD_Client_ID = COALESCE (AD_Client_ID,").append(p_AD_Client_ID).append(")," + " AD_Org_ID = COALESCE (AD_Org_ID,").append(p_AD_Org_ID).append("),");  if (p_C_ConversionType_ID != 0)   sql.append(" C_ConversionType_ID = COALESCE (C_ConversionType_ID,").append(p_C_ConversionType_ID).append("),");  if (p_ValidFrom != null)   sql.append(" ValidFrom = COALESCE (ValidFrom,").append(DB.TO_DATE(p_ValidFrom)).append("),"); else   sql.append(" ValidFrom = COALESCE (ValidFrom,SysDate),");  sql.append(" CreateReciprocalRate = COALESCE (CreateReciprocalRate,'").append(p_CreateReciprocalRate ? "Y" : "N").append("')," + " IsActive = COALESCE (IsActive, 'Y')," + " Created = COALESCE (Created, SysDate),"+ " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = ").append(getAD_User_ID()).append("," + " I_ErrorMsg = ' '," + " Processed = 'N',"+ " I_IsImported = 'N' "+ "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Reset =" + no);  sql=new StringBuffer("UPDATE I_Conversion_Rate o " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Org, '" + "WHERE (AD_Org_ID IS NULL"+ " OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Org =" + no);  sql=new StringBuffer("UPDATE I_Conversion_Rate i " + "SET C_ConversionType_ID = (SELECT C_ConversionType_ID FROM C_ConversionType c" + " WHERE c.Value=i.ConversionTypeValue AND c.AD_Client_ID IN (0,i.AD_Client_ID) AND c.IsActive='Y') "+ "WHERE C_ConversionType_ID IS NULL AND ConversionTypeValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no > 0)   log.fine("Set ConversionType =" + no);  sql=new StringBuffer("UPDATE I_Conversion_Rate i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid ConversionType, ' " + "WHERE (C_ConversionType_ID IS NULL"+ " OR NOT EXISTS (SELECT * FROM C_ConversionType c "+ "WHERE i.C_ConversionType_ID=c.C_ConversionType_ID AND c.IsActive='Y'"+ " AND c.AD_Client_ID IN (0,i.AD_Client_ID)))"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid ConversionType =" + no);  sql=new StringBuffer("UPDATE I_Conversion_Rate i " + "SET C_Currency_ID = (SELECT C_Currency_ID FROM C_Currency c" + "	WHERE c.ISO_Code=i.ISO_Code AND c.AD_Client_ID IN (0,i.AD_Client_ID) AND c.IsActive='Y') "+ "WHERE C_Currency_ID IS NULL AND ISO_Code IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no > 0)   log.fine("Set Currency =" + no);  sql=new StringBuffer("UPDATE I_Conversion_Rate i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Currency, ' " + "WHERE (C_Currency_ID IS NULL"+ " OR NOT EXISTS (SELECT * FROM C_Currency c "+ "WHERE i.C_Currency_ID=c.C_Currency_ID AND c.IsActive='Y'"+ " AND c.AD_Client_ID IN (0,i.AD_Client_ID)))"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Currency =" + no);  sql=new StringBuffer("UPDATE I_Conversion_Rate i " + "SET C_Currency_ID_To = (SELECT C_Currency_ID FROM C_Currency c" + "	WHERE c.ISO_Code=i.ISO_Code_To AND c.AD_Client_ID IN (0,i.AD_Client_ID) AND c.IsActive='Y') "+ "WHERE C_Currency_ID_To IS NULL AND ISO_Code_To IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no > 0)   log.fine("Set Currency To =" + no);  sql=new StringBuffer("UPDATE I_Conversion_Rate i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Currency To, ' " + "WHERE (C_Currency_ID_To IS NULL"+ " OR NOT EXISTS (SELECT * FROM C_Currency c "+ "WHERE i.C_Currency_ID_To=c.C_Currency_ID AND c.IsActive='Y'"+ " AND c.AD_Client_ID IN (0,i.AD_Client_ID)))"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Currency To =" + no);  sql=new StringBuffer("UPDATE I_Conversion_Rate i " + "SET MultiplyRate = 1 / DivideRate " + "WHERE (MultiplyRate IS NULL OR MultiplyRate = 0) AND DivideRate IS NOT NULL AND DivideRate<>0"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no > 0)   log.fine("Set MultiplyRate =" + no);  sql=new StringBuffer("UPDATE I_Conversion_Rate i " + "SET DivideRate = 1 / MultiplyRate " + "WHERE (DivideRate IS NULL OR DivideRate = 0) AND MultiplyRate IS NOT NULL AND MultiplyRate<>0"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no > 0)   log.fine("Set DivideRate =" + no);  sql=new StringBuffer("UPDATE I_Conversion_Rate i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Rates, ' " + "WHERE (MultiplyRate IS NULL OR MultiplyRate = 0 OR DivideRate IS NULL OR DivideRate = 0)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Rates =" + no);  commitEx();  int noInsert=0;  sql=new StringBuffer("SELECT * FROM I_Conversion_Rate " + "WHERE I_IsImported='N'").append(clientCheck).append(" ORDER BY C_Currency_ID, C_Currency_ID_To, ValidFrom");  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      X_I_Conversion_Rate imp=new X_I_Conversion_Rate(getCtx(),rs,get_TrxName());      MConversionRate rate=new MConversionRate(imp,imp.getC_ConversionType_ID(),imp.getC_Currency_ID(),imp.getC_Currency_ID_To(),imp.getMultiplyRate(),imp.getValidFrom());      if (imp.getValidTo() != null)       rate.setValidTo(imp.getValidTo());      if (rate.save()) {        imp.setC_Conversion_Rate_ID(rate.getC_Conversion_Rate_ID());        imp.setI_IsImported(true);        imp.setProcessed(true);        imp.saveEx();        noInsert++;        if (imp.isCreateReciprocalRate()) {          rate=new MConversionRate(imp,imp.getC_ConversionType_ID(),imp.getC_Currency_ID_To(),imp.getC_Currency_ID(),imp.getDivideRate(),imp.getValidFrom());          if (imp.getValidTo() != null)           rate.setValidTo(imp.getValidTo());          if (rate.save())           noInsert++;        }      }    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql.toString(),e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  sql=new StringBuffer("UPDATE I_Conversion_Rate " + "SET I_IsImported='N', Updated=SysDate " + "WHERE I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),"@Errors@");  addLog(0,null,new BigDecimal(noInsert),"@C_Conversion_Rate_ID@: @Inserted@");  return "";}  }
class C{  public static double logGamma(double x) throws ArithmeticException {  double p, q, w, z;  double A[]={8.11614167470508450300E-4,-5.95061904284301438324E-4,7.93650340457716943945E-4,-2.77777777730099687205E-3,8.33333333333331927722E-2};  double B[]={-1.37825152569120859100E3,-3.88016315134637840924E4,-3.31612992738871184744E5,-1.16237097492762307383E6,-1.72173700820839662146E6,-8.53555664245765465627E5};  double C[]={-3.51815701436523470549E2,-1.70642106651881159223E4,-2.20528590553854454839E5,-1.13933444367982507207E6,-2.53252307177582951285E6,-2.01889141433532773231E6};  if (x < -34.0) {    q=-x;    w=logGamma(q);    p=Math.floor(q);    if (p == q)     throw new ArithmeticException("lgam: Overflow");    z=q - p;    if (z > 0.5) {      p+=1.0;      z=p - q;    }    z=q * Math.sin(Math.PI * z);    if (z == 0.0)     throw new ArithmeticException("lgamma: Overflow");    z=LOGPI - Math.log(z) - w;    return z;  }  if (x < 13.0) {    z=1.0;    while (x >= 3.0) {      x-=1.0;      z*=x;    }    while (x < 2.0) {      if (x == 0.0)       throw new ArithmeticException("lgamma: Overflow");      z/=x;      x+=1.0;    }    if (z < 0.0)     z=-z;    if (x == 2.0)     return Math.log(z);    x-=2.0;    p=x * Polynomial.polevl(x,B,5) / Polynomial.p1evl(x,C,6);    return (Math.log(z) + p);  }  if (x > 2.556348e305)   throw new ArithmeticException("lgamma: Overflow");  q=(x - 0.5) * Math.log(x) - x + 0.91893853320467274178;  if (x > 1.0e8)   return (q);  p=1.0 / (x * x);  if (x >= 1000.0)   q+=((7.9365079365079365079365e-4 * p - 2.7777777777777777777778e-3) * p + 0.0833333333333333333333) / x; else   q+=Polynomial.polevl(p,A,4) / x;  return q;}  }
class C{  public static String calcSHA1(String encodeValue){  if (encodeValue == null)   return null;  java.security.MessageDigest messageDigest;  try {    messageDigest=java.security.MessageDigest.getInstance("SHA");  } catch (  NoSuchAlgorithmException e) {    System.out.println("Unable to get SHA-1 message digest algorithm!");    return null;  }  messageDigest.reset();  messageDigest.update(encodeValue.getBytes(StandardCharsets.UTF_8));  byte shaBytes[]=messageDigest.digest();  StringBuilder returnValue=new StringBuilder(40);  for (int i=0; i < shaBytes.length; i++) {    if ((shaBytes[i] & 0xFF) <= 0x0F) {      returnValue.append('0');    }    returnValue.append(Integer.toHexString((shaBytes[i] & 0xFF)));  }  return returnValue.toString();}  }
class C{  public DefaultImportCustomizerProvider(final ImportCustomizerProvider baseCustomizer,final Set<String> extraImports,final Set<String> extraStaticImports){  this(extraImports,extraStaticImports);  this.extraImports.addAll(baseCustomizer.getExtraImports());  this.extraStaticImports.addAll(baseCustomizer.getExtraStaticImports());}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=enumToVector(super.listOptions());  result.addElement(new Option("\tThe number of attributes (default " + defaultNumAttributes() + ").","a",1,"-a <num>"));  result.addElement(new Option("\tThe number of classes (default " + defaultNumClasses() + ")","c",1,"-c <num>"));  result.addElement(new Option("\tmaximum size for rules (default " + defaultMaxRuleSize() + ") ","R",1,"-R <num>"));  result.addElement(new Option("\tminimum size for rules (default " + defaultMinRuleSize() + ") ","M",1,"-M <num>"));  result.addElement(new Option("\tnumber of irrelevant attributes (default " + defaultNumIrrelevant() + ")","I",1,"-I <num>"));  result.addElement(new Option("\tnumber of numeric attributes (default " + defaultNumNumeric() + ")","N",1,"-N"));  result.addElement(new Option("\tswitch on voting (default is no voting)","V",1,"-V"));  return result.elements();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Entity ce(){  return getClient().getGame().getEntity(cen);}  }
class C{  public RegisterSpec withType(TypeBearer newType){  return makeLocalOptional(reg,newType,local);}  }
class C{  public final AspectContainer clear(){  Set<IAspectType> types=this.getAvailableAspectTypes();  for (  IAspectType type : types)   this.clearAspects(type);  return this;}  }
class C{  public static int computeTagSize(final int fieldNumber){  return computeRawVarint32Size(WireFormat.makeTag(fieldNumber,0));}  }
class C{  public static boolean isWindows98(){  return win98;}  }
class C{  public String dc_title(){  return (this.titles == null || this.titles.size() == 0) ? "" : this.titles.iterator().next();}  }
class C{  public List<IvrZoneset> showIvrZonesets(boolean active) throws NetworkDeviceControllerException {  List<IvrZoneset> zonesets=new ArrayList<IvrZoneset>();  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN,SSHPrompt.MDS_CONFIG,SSHPrompt.MDS_CONFIG_IVR_ZONE,SSHPrompt.MDS_CONFIG_IVR_ZONESET};  StringBuilder buf=new StringBuilder();  String cmdKey=active ? "MDSDialog.ivr.show.zoneset.active.cmd" : "MDSDialog.ivr.show.zoneset.cmd";  sendWaitFor(MDSDialogProperties.getString(cmdKey),defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  String[] regex={MDSDialogProperties.getString("MDSDialog.ivr.showZoneset.zoneset.name.match"),MDSDialogProperties.getString("MDSDialog.ivr.showZoneset.zone.name.match"),MDSDialogProperties.getString("MDSDialog.ivr.showZoneset.zone.member.match")};  IvrZoneset zoneset=null;  IvrZone zone=null;  IvrZoneMember member=null;  String[] groups=new String[10];  for (  String line : lines) {    line=line.replace('*',' ');    int index=match(line,regex,groups);switch (index) {case 0:      zoneset=new IvrZoneset(groups[0]);    zonesets.add(zoneset);  zoneset.setActive(active);break;case 1:zone=new IvrZone(groups[0]);zone.setActive(active);zoneset.getZones().add(zone);break;case 2:member=new IvrZoneMember(groups[0] + groups[2],Integer.valueOf(groups[3]));zone.getMembers().add(member);break;}}return zonesets;}  }
class C{  public static List<Integer> createColors(Resources r,int[] colors){  List<Integer> result=new ArrayList<Integer>();  for (  int i : colors) {    result.add(r.getColor(i));  }  return result;}  }
class C{  public int size(){  return entries.size();}  }
class C{  private RedirectStream(InputStream inputStream,OutputStream outputStream){  super();  this.inputStream=inputStream;  this.outputStream=outputStream;}  }
class C{  private boolean evaluate(InvocationSequenceData invocSequence,ICachedDataService cachedDataService,int depth){  String[] strArray=getStringValueSource().getStringValues(invocSequence,cachedDataService);  if (ArrayUtils.isNotEmpty(strArray)) {    for (    String element : strArray) {      if ((null != element) && evaluateString(element)) {        return true;      }    }  }  if (isSearchNodeInTrace() && ((getMaxSearchDepth() < 0) || (depth < getMaxSearchDepth()))) {    for (    InvocationSequenceData childNode : invocSequence.getNestedSequences()) {      if (evaluate(childNode,cachedDataService,depth + 1)) {        return true;      }    }  }  return false;}  }
class C{  public static byte[] longToByteArray(final long src,final int srcPos,final byte[] dst,final int dstPos,final int nBytes){  if (0 == nBytes) {    return dst;  }  if ((nBytes - 1) * 8 + srcPos >= 64) {    throw new IllegalArgumentException("(nBytes-1)*8+srcPos is greather or equal to than 64");  }  int shift=0;  for (int i=0; i < nBytes; i++) {    shift=i * 8 + srcPos;    dst[dstPos + i]=(byte)(0xff & (src >> shift));  }  return dst;}  }
class C{  private boolean isLoggedIn(){  return !TextUtils.isEmpty(UserInfo.INSTANCE.getAuthToken());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.DATABASE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.440 -0500",hash_original_method="898F1EFFAEB546E6A9657A001F4AE1E8",hash_generated_method="F9C40C81C68344DF4C359DF8BF2FBEE9") public void bind(int index,double value){  mPreparedStatement.bindDouble(index,value);}  }
class C{  private File showSaveDialogSwing(final File file){  JFileChooser chooser=new JFileChooser();  setCurrentDirectory(chooser);  chooser.setAcceptAllFileFilterUsed(false);  Map<String,ExtensionFileFilter> filters=addExtensions(chooser);  if (file != null) {    chooser.setSelectedFile(file);    String extension=getExtension(file);    if (extension != null) {      chooser.setFileFilter(filters.get(extension));    }  }  int result=chooser.showDialog(chooser,"Save");  if (result != JFileChooser.APPROVE_OPTION) {    return null;  }  File tmpFile=addExtension(chooser.getSelectedFile(),chooser.getFileFilter());  if (tmpFile.exists() && !confirmOverwrite(tmpFile)) {    return null;  }  currentDirectory=chooser.getCurrentDirectory().getPath();  return tmpFile;}  }
class C{  public boolean proteinBoundsOverlap(StepInstance that){  return this.hasProteinBounds() && that.hasProteinBounds() && !((this.getBottomProtein() > that.getTopProtein()) || (that.getBottomProtein() > this.getTopProtein()));}  }
class C{  public static long passwordHash(String password){  final long DEFAULT_HASH=98234782;  byte[] byteHash=null;  String hexString=null;  if (password == null || password.equals("")) {    return DEFAULT_HASH;  }  try {    byteHash=MessageDigest.getInstance("MD5").digest(password.getBytes());    hexString=getHexString(byteHash);    hexString=hexString.substring(0,15);    return Long.parseLong(hexString,16);  } catch (  NoSuchAlgorithmException nsaEx) {    return DEFAULT_HASH;  }}  }
class C{  public static List<String> decodeRefinementValuePath(String valuePath){  List<String> rawvals=StrUtils.splitSmart(valuePath,",",true);  if (rawvals.isEmpty())   return rawvals;  List<String> out=new ArrayList<>(rawvals.size());  for (  String raw : rawvals) {    assert 0 < raw.length();    if ('^' == raw.charAt(0)) {      assert 1 == raw.length();      out.add(null);    } else {      assert '~' == raw.charAt(0);      out.add(raw.substring(1));    }  }  return out;}  }
class C{  public void addHandler(String columnName,SQLDataHandler handler){  if (m_overrides == null)   m_overrides=new HashMap(3);  m_overrides.put(columnName,handler);}  }
class C{  public CActionZoomOut(final ZyGraph graph){  super("Zoom Out");  m_graph=Preconditions.checkNotNull(graph,"IE02835: graph argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Zoom Out");  putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/reduce_up.jpg")));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.114 -0500",hash_original_method="988710BD2A10AD89943FF29F774B18B3",hash_generated_method="CA353D2A388EF4A594B5C454D32C0CAC") public void disableJitCompilation(){}  }
class C{  public Scheduler scheduler(){  return new GoroScheduler(goro,Goro.DEFAULT_QUEUE);}  }
class C{  static public void assertTrue(String message,boolean condition){  if (!condition)   fail(message);}  }
class C{  public int lastIndexOf(int ch){  return 0;}  }
class C{  public synchronized boolean isSorted(){  return m_Model.isSorted();}  }
class C{  public UnsupportedClassTypeException(){  super();}  }
class C{  public void shutdown(){  main=null;  generatedFiles=null;  super.shutdown();}  }
class C{  public static CRemoteSelectionDialog show(final JFrame parent,final IDebugger debugger,final RemoteFileSystem system,final ProcessList list){  final CRemoteSelectionDialog dlg=new CRemoteSelectionDialog(parent,debugger,system,list);  GuiHelper.centerChildToParent(parent,dlg,true);  dlg.setVisible(true);  return dlg;}  }
class C{  @DSComment("Data structure/no action") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:52.004 -0500",hash_original_method="F5E2B33BAA7F2110DB7AE2D50276D662",hash_generated_method="E07D899195A0F34DC826BBB3CFA25B61") public boolean isScrollable(){  return getBooleanProperty(PROPERTY_SCROLLABLE);}  }
class C{  public void addProjectRunners(@NotNull List<Environment> projectEnvironments){  DefaultActionGroup runnersList=(DefaultActionGroup)actionManager.getAction(RUNNER_LIST);  projectRunners.clear();  clearRunnerActions(runnersList);  projectActions.removeAll();  systemActions.removeAll();  for (  Environment environment : projectEnvironments) {    projectActions.add(configRunnerFactory.createElement(environment.getName(),resources.scopeProject(),dropDownHeaderWidget));  }  runnersList.addSeparator();  for (  Environment environment : systemRunners) {    systemActions.add(configRunnerFactory.createElement(environment.getName(),resources.scopeSystem(),dropDownHeaderWidget));  }  runnersList.addAll(projectActions);  runnersList.addSeparator();  runnersList.addAll(systemActions);  projectRunners.addAll(projectEnvironments);  selectDefaultRunner();}  }
class C{  public SignalServiceEnvelope(byte[] ciphertext,String signalingKey) throws InvalidVersionException, IOException {  if (ciphertext.length < VERSION_LENGTH || ciphertext[VERSION_OFFSET] != SUPPORTED_VERSION)   throw new InvalidVersionException("Unsupported version!");  SecretKeySpec cipherKey=getCipherKey(signalingKey);  SecretKeySpec macKey=getMacKey(signalingKey);  verifyMac(ciphertext,macKey);  this.envelope=Envelope.parseFrom(getPlaintext(ciphertext,cipherKey));}  }
class C{  private void handleResponse(int response,ResponseData rawData){  mPolicy.processServerResponse(response,rawData);  if (mPolicy.allowAccess()) {    mCallback.allow(response);  } else {    mCallback.dontAllow(response);  }}  }
class C{  private ScanCostReport estimateCost(final IScaleOutClientIndex ndx){  final String name=ndx.getIndexMetadata().getName();  final AbstractClient<?> client=ndx.getFederation().getClient();  final int maxParallel=client.getMaxParallelTasksPerRequest();  final IMetadataIndex mdi=ndx.getFederation().getMetadataIndex(name,timestamp);  if (mdi == null)   throw new NoSuchIndexException("name=" + name + "@"+ TimestampUtility.toString(timestamp));  final long partitionCount=mdi.rangeCount(fromKey,toKey);  if (partitionCount == 0) {    return new ScanCostReport(0L,partitionCount,100);  }  final long rangeCount=rangeCount(false);  if (partitionCount == 1) {    return (ScanCostReport)ndx.submit(fromKey == null ? BytesUtil.EMPTY : fromKey,new EstimateShardScanCost(rangeCount,fromKey,toKey));  }  final int njournals=1;  final int nsegments=2;  final long rangeCountOnJournal=rangeCount / (partitionCount * (njournals + nsegments));  final double costPerJournal=new BTreeCostModel(diskCostModel).rangeScan(rangeCountOnJournal,mdi.getIndexMetadata().getBranchingFactor(),5,70);  final double costPerSegment=diskCostModel.seekTime + Bytes.megabyte * 100;  final double costPerShard=costPerJournal + 2 * costPerSegment;  final double cost=costPerShard * partitionCount;  return new ScanCostReport(rangeCount,partitionCount,cost);}  }
class C{  public static double correlation(double[] x,double[] y){  return correlation(x,y,x.length);}  }
class C{  void testRange(final int range,final int next){  final byte[] tst=new byte[range];  final PseudoRandom psr=new PseudoRandom(range,next);  for (int i=0; i < range; i++) {    final int nxt=psr.next();    assertTrue(nxt <= range);    assertTrue(tst[nxt] == 0);    tst[nxt]=1;  }}  }
class C{  public final DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException, FormatException {  resultPointCallback=hints == null ? null : (ResultPointCallback)hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);  FinderPatternFinder finder=new FinderPatternFinder(image,resultPointCallback);  FinderPatternInfo info=finder.find(hints);  return processFinderPatternInfo(info);}  }
class C{  private void doSent(){  sent=System.currentTimeMillis();}  }
class C{  public void put(String key,String value){  Editor edit=context.getSharedPreferences(prefName,Context.MODE_PRIVATE).edit();  edit.putString(key,value).commit();}  }
class C{  public final double prob(int classIndex){  if (!Utils.eq(totaL,0)) {    return m_perClass[classIndex] / totaL;  } else {    return 0;  }}  }
class C{  public byte[] lpop(final byte[] key){  checkIsInMulti();  client.lpop(key);  return client.getBinaryBulkReply();}  }
class C{  public static Object makeBean(String classname){  try {    Class<?> clazz=Class.forName(classname);    return clazz.newInstance();  } catch (  Exception ex) {    throw new HGException("Could not construct a bean DataObject " + "from " + classname,ex);  }}  }
class C{  public IStatus run(IProgressMonitor monitor) throws InvocationTargetException {  ZipFile zipFile=null;  FileOutputStream fos=null;  BufferedOutputStream dest=null;  BufferedInputStream is=null;  jobStatus=Status.OK_STATUS;  try {    zipFile=new ZipFile(archive);    monitor.beginTask("Uncompressing " + archive.getName(),zipFile.size());    Enumeration<? extends ZipEntry> entries=zipFile.entries();    while (entries.hasMoreElements()) {      ZipEntry zipEntry=entries.nextElement();      String currentEntry=zipEntry.getName();      File destFile=new File(targetDir,currentEntry);      File destinationParent=destFile.getParentFile();      if (!zipEntry.isDirectory()) {        destinationParent.mkdirs();        is=new BufferedInputStream(zipFile.getInputStream(zipEntry));        int numBytesRead;        byte bytes[]=new byte[BUFSIZE];        fos=new FileOutputStream(destFile);        dest=new BufferedOutputStream(fos,BUFSIZE);        while ((numBytesRead=is.read(bytes,0,BUFSIZE)) != -1) {          dest.write(bytes,0,numBytesRead);        }        dest.flush();      } else {        destFile.mkdirs();      }      monitor.worked(1);      if (monitor.isCanceled()) {        jobStatus=Status.CANCEL_STATUS;        break;      }    }    if (!monitor.isCanceled()) {      jobStatus=Status.OK_STATUS;    }  } catch (  ZipException ze) {    String errormsg=errorMessage("It may be corrupted?");    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,errormsg);    CorePluginLog.logError(ze,errormsg);  }catch (  IOException ioe) {    String errormsg=errorMessage();    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,errormsg);    CorePluginLog.logError(ioe,errormsg);  } finally {    try {      if (zipFile != null) {        zipFile.close();      }      if (is != null) {        is.close();      }      if (dest != null) {        dest.close();      }    } catch (    IOException ioe) {      String errormsg=errorMessage();      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,errormsg);      CorePluginLog.logError(ioe,errormsg);    }  }  return jobStatus;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Attr districtNode;  String attrName;  Node setNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(1);  newAttribute=doc.createAttribute("district");  attributes=testAddress.getAttributes();  setNode=attributes.setNamedItem(newAttribute);  districtNode=(Attr)attributes.getNamedItem("district");  attrName=districtNode.getNodeName();  assertEquals("namednodemapSetNamedItemAssert","district",attrName);}  }
class C{  public static Kind group(){  return new Kind(GROUP);}  }
class C{  public double[] prob_z(double x_[]){  Matrix x=new Matrix(MatrixUtils.addBias(x_),1);  double z[]=MatrixUtils.sigma(x.times(W).getArray()[0]);  return MatrixUtils.removeBias(z);}  }
class C{  public void addException(ClassConstant type,int start,int end,int handler){  _exceptions.add(new ExceptionItem(type.getIndex(),start,end,handler));}  }
class C{  protected boolean addShortTermCredentialAttributes(Request request){  String shortTermCredentialUsername=harvester.getShortTermCredentialUsername();  if (shortTermCredentialUsername != null) {    request.putAttribute(AttributeFactory.createUsernameAttribute(shortTermCredentialUsername));    request.putAttribute(AttributeFactory.createMessageIntegrityAttribute(shortTermCredentialUsername));    return true;  } else   return false;}  }
class C{  public Token(int type,String text,int startLine,int startColumn){  this.type=type;  this.meaning=type;  this.text=text;  this.startLine=startLine;  this.startColumn=startColumn;}  }
class C{  public LinkedStack(){  first=null;  n=0;  assert check();}  }
class C{  public final boolean isDone(int loc){  Object elem=this.elems[loc];  if (elem == null) {    return false;  }  if (elem instanceof BTGraphNode) {    return ((BTGraphNode)elem).isDone();  }  return ((BTGraphNode[])elem)[0].isDone();}  }
class C{  public static boolean cs_entry(Scs T,int i,int j,float x){  if (!Scs_util.CS_TRIPLET(T) || i < 0 || j < 0)   return (false);  if (T.nz >= T.nzmax) {    Scs_util.cs_sprealloc(T,2 * (T.nzmax));  }  if (T.x != null)   T.x[T.nz]=x;  T.i[T.nz]=i;  T.p[T.nz++]=j;  T.m=Math.max(T.m,i + 1);  T.n=Math.max(T.n,j + 1);  return (true);}  }
class C{  public String toString(){  return String.format("attribute %s='%s'",name,value);}  }
class C{  public boolean isValueTypeDuration(){  return valueType == ParameterValueType.DURATION;}  }
class C{  private Emoticon parseEmoticon(JSONObject emote){  try {    String code=(String)emote.get("code");    int id=((Number)emote.get("id")).intValue();    String url=Emoticon.getTwitchEmoteUrlById(id,1);    Emoticon.Builder b=new Emoticon.Builder(Emoticon.Type.TWITCH,code,url);    if (emote.get("emoticon_set") != null) {      int emoteSet=((Number)emote.get("emoticon_set")).intValue();      b.setEmoteset(emoteSet);    }    b.setNumericId(id);    return b.build();  } catch (  NullPointerException|ClassCastException ex) {    return null;  }}  }
class C{  public void error(String message){  if (isErrorReportingEnabled()) {    myDelegate.error(message);  } else   if (log.isDebugEnabled()) {    log.debug("Supressed psi error: " + message);  }}  }
class C{  public boolean isRightRed(){  return (right == BeaconColor.RED_BRIGHT || right == BeaconColor.RED);}  }
class C{  public void assertChar(char expected) throws EOFException, FormatException {  char c=readChar();  if (c != expected) {    throw new InvalidCharException("AssertChar: expected " + expected + " got "+ c,c);  }}  }
class C{  public void computeMinMax(int samplesPerPixel,float missing){  minimum=new double[samplesPerPixel];  maximum=new double[samplesPerPixel];  Arrays.fill(minimum,Double.MAX_VALUE);  Arrays.fill(maximum,-Double.MAX_VALUE);  byte[] bArray=new byte[width * numBytes];  ByteBuffer bBuf=ByteBuffer.wrap(bArray);  bBuf.rewind();switch (dataType) {case Float:    for (int r=0; r < length; ++r) {      mmbBuf.get(r,bArray);      bBuf.rewind();      for (int c=0; c < width; ++c) {        float val=bBuf.getFloat();        for (int i=0; i < samplesPerPixel; ++i) {          if (!Float.isNaN(val) && (val != missing)) {            minimum[i]=Math.min(minimum[i],val);            maximum[i]=Math.max(maximum[i],val);          }        }      }      bBuf.rewind();    }  break;case Integer:for (int r=0; r < length; ++r) {  mmbBuf.get(r,bArray);  bBuf.rewind();  for (int c=0; c < width; ++c) {    int val=bBuf.getInt();    for (int i=0; i < samplesPerPixel; ++i) {      if (val != missing) {        minimum[i]=Math.min(minimum[i],val);        maximum[i]=Math.max(maximum[i],val);      }    }  }  bBuf.rewind();}break;case UnsignedInteger:for (int r=0; r < length; ++r) {mmbBuf.get(r,bArray);bBuf.rewind();for (int c=0; c < width; ++c) {long val=MathUtil.unsignedInt(bBuf.getInt());for (int i=0; i < samplesPerPixel; ++i) {  if (val != missing) {    minimum[i]=Math.min(minimum[i],val);    maximum[i]=Math.max(maximum[i],val);  }}}bBuf.rewind();}break;case Short:for (int r=0; r < length; ++r) {mmbBuf.get(r,bArray);bBuf.rewind();for (int c=0; c < width; ++c) {short val=bBuf.getShort();for (int i=0; i < samplesPerPixel; ++i) {if (val != missing) {minimum[i]=Math.min(minimum[i],val);maximum[i]=Math.max(maximum[i],val);}}}bBuf.rewind();}break;case UnsignedShort:for (int r=0; r < length; ++r) {mmbBuf.get(r,bArray);bBuf.rewind();for (int c=0; c < width; ++c) {int val=MathUtil.unsignedShort(bBuf.getShort());for (int i=0; i < samplesPerPixel; ++i) {if (val != missing) {minimum[i]=Math.min(minimum[i],val);maximum[i]=Math.max(maximum[i],val);}}}bBuf.rewind();}break;case Byte:for (int r=0; r < length; ++r) {mmbBuf.get(r,bArray);bBuf.rewind();for (int c=0; c < width; ++c) {byte val=bBuf.get();for (int i=0; i < samplesPerPixel; ++i) {if (val != missing) {minimum[i]=Math.min(minimum[i],val);maximum[i]=Math.max(maximum[i],val);}}}bBuf.rewind();}break;case UnsignedByte:for (int r=0; r < length; ++r) {mmbBuf.get(r,bArray);bBuf.rewind();for (int c=0; c < width; ++c) {int val=MathUtil.unsignedByte(bBuf.get());for (int i=0; i < samplesPerPixel; ++i) {if (val != missing) {minimum[i]=Math.min(minimum[i],val);maximum[i]=Math.max(maximum[i],val);}}}bBuf.rewind();}break;case Double:for (int r=0; r < length; ++r) {mmbBuf.get(r,bArray);bBuf.rewind();for (int c=0; c < width; ++c) {double val=bBuf.getDouble();for (int i=0; i < samplesPerPixel; ++i) {if (!Double.isNaN(val) && (val != missing)) {minimum[i]=Math.min(minimum[i],val);maximum[i]=Math.max(maximum[i],val);}}}bBuf.rewind();}break;case Long:for (int r=0; r < length; ++r) {mmbBuf.get(r,bArray);bBuf.rewind();for (int c=0; c < width; ++c) {long val=bBuf.getLong();for (int i=0; i < samplesPerPixel; ++i) {if (val != missing) {minimum[i]=Math.min(minimum[i],val);maximum[i]=Math.max(maximum[i],val);}}}bBuf.rewind();}break;case Unknown:break;}}  }
class C{  protected List<Position> computeBasePositions(DrawContext dc,Position position1,Position position2,Position orientationPos){  Globe globe=dc.getGlobe();  Vec4 pB=globe.computePointFromPosition(position1);  Vec4 pC=globe.computePointFromPosition(position2);  Vec4 vBC=pC.subtract3(pB);  double legLength=vBC.getLength3() * this.getLegLength();  Vec4 normal=globe.computeSurfaceNormalAtPoint(pB);  Vec4 perpendicular=vBC.cross3(normal);  Vec4 parallel=vBC.normalize3().multiply3(legLength);  Vec4 vOrientation=globe.computePointFromPosition(orientationPos).subtract3(pB);  double tripleProduct=perpendicular.dot3(vOrientation);  double sign=(tripleProduct > 0) ? -1 : 1;  perpendicular=perpendicular.normalize3().multiply3(legLength * sign);  Vec4 pA=pB.add3(perpendicular).subtract3(parallel);  normal=globe.computeSurfaceNormalAtPoint(pB);  perpendicular=vBC.cross3(normal);  perpendicular=perpendicular.normalize3().multiply3(legLength * sign);  Vec4 pD=pC.add3(perpendicular).add3(parallel);  return TacticalGraphicUtil.asPositionList(globe,pA,pB,pC,pD);}  }
class C{  public void testDistanceOnLink_longLink(){  Network network=NetworkUtils.createNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord((double)0,(double)0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord((double)1000,(double)1000));  final Node fromNode=node1;  final Node toNode=node2;  Link link1=NetworkUtils.createAndAddLink(network,Id.create("1",Link.class),fromNode,toNode,(double)2000,(double)10,(double)9999,(double)1);  SnapshotLinkWidthCalculator linkWidthCalculator=new SnapshotLinkWidthCalculator();  AgentSnapshotInfo posInfo=new AgentSnapshotInfoFactory(linkWidthCalculator).createAgentSnapshotInfo(Id.create(1,Person.class),link1,500,0);  assertEquals(260.60660171779824,posInfo.getEasting(),epsilon);  assertEquals(239.3933982822018,posInfo.getNorthing(),epsilon);}  }
class C{  public ListIterator<AbstractInsnNode> iterator(){  return iterator(0);}  }
class C{  public void zero_or_null(Type type){  if (TypeUtils.isPrimitive(type)) {switch (type.getSort()) {case Type.DOUBLE:      push(0d);    break;case Type.LONG:  push(0L);break;case Type.FLOAT:push(0f);break;case Type.VOID:aconst_null();default :push(0);}} else {aconst_null();}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:40.838 -0500",hash_original_method="33F180031B438855CD8341D942A736A2",hash_generated_method="1822A5BEC7AF261DE838CCCCFB295CA9") public synchronized final void incrementSecondaryProgressBy(int diff){  setSecondaryProgress(mSecondaryProgress + diff);}  }
class C{  public boolean isWorkbench(){  return m_workbenchTab;}  }
class C{  public void addMinMaxVectors(FlagConfig flagConfig,String columnName){  if (this.getType() != SupportedType.DOUBLE) {    throw new IllegalArgumentException("Min and max vectors only supported for type DOUBLE so far.");  }  long randomSeed=Bobcat.asLong(columnName);  Random random=new Random(randomSeed);  while (true) {    minBookendVector=VectorFactory.generateRandomVector(flagConfig.vectortype(),flagConfig.dimension(),flagConfig.seedlength(),random);    maxBookendVector=VectorFactory.generateRandomVector(flagConfig.vectortype(),flagConfig.dimension(),flagConfig.seedlength(),random);    if (minBookendVector.measureOverlap(maxBookendVector) < 0.1 || flagConfig.vectortype().equals(VectorType.BINARY) && minBookendVector.measureOverlap(maxBookendVector) < 0.01)     break;    VerbatimLogger.info("Bookend vectors too similar to each other ... repeating generation.\n");  }}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  public CompoundTerminationCondition(TerminationCondition... conditions){  super();  this.conditions=conditions;}  }
class C{  public void uninstallListeners(JSeparator c){  c.removePropertyChangeListener(this);}  }
class C{  public static Position of(long commitPosition,long preparePosition){  return new Position(commitPosition,preparePosition);}  }
class C{  public NetworkConfigurationDiscoveryProcess(StunStack stunStack,TransportAddress localAddress,TransportAddress serverAddress){  if (stunStack == null)   throw new NullPointerException("stunStack");  this.stunStack=stunStack;  this.localAddress=localAddress;  this.serverAddress=serverAddress;}  }
class C{  public static boolean isLocalHost(Object host){  if (host instanceof InetAddress) {    if (LOCALHOST.equals(host)) {      return true;    } else {      try {        Enumeration en=NetworkInterface.getNetworkInterfaces();        while (en.hasMoreElements()) {          NetworkInterface i=(NetworkInterface)en.nextElement();          for (Enumeration en2=i.getInetAddresses(); en2.hasMoreElements(); ) {            InetAddress addr=(InetAddress)en2.nextElement();            if (host.equals(addr)) {              return true;            }          }        }        return false;      } catch (      SocketException e) {        throw new GemFireIOException(LocalizedStrings.InetAddressUtil_UNABLE_TO_QUERY_NETWORK_INTERFACE.toLocalizedString(),e);      }    }  } else {    return isLocalHost(InetAddressUtil.toInetAddress(host.toString()));  }}  }
class C{  public void endFunctionExecution(long start,boolean haveResult){  long ts=DistributionStats.getStatTime();  this._stats.incInt(_functionExecutionsCompletedId,1);  this._stats.incInt(_functionExecutionsRunningId,-1);  long elapsed=ts - start;  this._stats.incLong(_functionExecutionsCompletedProcessingTimeId,elapsed);  if (haveResult) {    this._stats.incInt(_functionExecutionsHasResultRunningId,-1);    this._stats.incLong(_functionExecutionsHasResultCompletedProcessingTimeId,elapsed);  }  aggregateStats.endFunctionExecution(start,haveResult);}  }
class C{  public static ObjectAnimator ofFloat(Object target,String propertyName,float... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setFloatValues(values);  return anim;}  }
class C{  public DataSetBuilder<T> emit(T record,int times){  builder.emit(record,times);  return this;}  }
class C{  void onPageFinished(String url){  mInitialZoomOverview=false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(!((Agent)stack.pop()).testAgentFlag(Agent.DONT_AUTODELETE_FLAG));}  }
class C{  public DriverTask createVolumeSnapshot(List<VolumeSnapshot> snapshots,StorageCapabilities storageCapabilities){  DellSCDriverTask task=new DellSCDriverTask("createVolumeSnapshot");  StringBuilder errBuffer=new StringBuilder();  int createCount=0;  for (  VolumeSnapshot snapshot : snapshots) {    try {      StorageCenterAPI api=connectionManager.getConnection(snapshot.getStorageSystemId());      api.checkAndInitVolume(snapshot.getParentId());      ScReplay replay=api.createReplay(snapshot.getParentId());      util.getVolumeSnapshotFromReplay(replay,snapshot);      createCount++;    } catch (    DellSCDriverException|StorageCenterAPIException dex) {      String error=String.format("Error creating snapshot of volume %s: %s",snapshot.getParentId(),dex);      errBuffer.append(String.format("%s%n",error));    }  }  task.setMessage(errBuffer.toString());  if (createCount == snapshots.size()) {    task.setStatus(TaskStatus.READY);  } else   if (createCount == 0) {    task.setStatus(TaskStatus.FAILED);  } else {    task.setStatus(TaskStatus.PARTIALLY_FAILED);  }  return task;}  }
class C{  public static void createImageToStorage(String url,ActionListener callback,String cacheId,boolean keep){  Image im=cacheImage(cacheId,keep,null,null,null,defaultMaintainAspectRatio);  if (im != null) {    callback.actionPerformed(new NetworkEvent(null,im));    return;  }  ImageDownloadService i=new ImageDownloadService(url,callback);  i.cacheImages=true;  i.cacheId=cacheId;  i.setFailSilently(true);  NetworkManager.getInstance().addToQueue(i);}  }
class C{  public Image applyMask(Object mask){  int[] rgb=getRGB();  byte[] maskData=((IndexedImage)mask).getImageDataByte();  int mWidth=((IndexedImage)mask).getWidth();  int mHeight=((IndexedImage)mask).getHeight();  if (mWidth != getWidth() || mHeight != getHeight()) {    throw new IllegalArgumentException("Mask and image sizes don't match");  }  int mdlen=maskData.length;  for (int iter=0; iter < mdlen; iter++) {    int maskAlpha=maskData[iter] & 0xff;    maskAlpha=(maskAlpha << 24) & 0xff000000;    rgb[iter]=(rgb[iter] & 0xffffff) | maskAlpha;  }  return createImage(rgb,mWidth,mHeight);}  }
class C{  public void testGetCertificateCheckingLjava_X509Certificate() throws CertificateException {  X509CRLSelector selector=new X509CRLSelector();  CertificateFactory certFact=CertificateFactory.getInstance("X509");  X509Certificate cert=(X509Certificate)certFact.generateCertificate(new ByteArrayInputStream(TestUtils.getX509Certificate_v3()));  selector.setCertificateChecking(cert);  assertEquals(cert,selector.getCertificateChecking());  selector.setCertificateChecking(null);  assertNull(selector.getCertificateChecking());}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Long deploymentId,Principal principal){  RestWrapper restWrapper=null;  try {    processDeploymentQueueDAO.delete(deploymentId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with ID:" + deploymentId + " deleted from ProcessDeploymentQueue by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public ViewLabel(final Object value,final boolean isSelected,final int row,final int column,final Font font){  super.setText("### ");  m_column=column;  m_value=value;  if (font == null) {    normalFont=new Font(getFont().getFontName(),Font.PLAIN,12);    normalBoldFont=new Font(getFont().getFontName(),Font.BOLD,12);  } else {    normalFont=new Font(font.getName(),Font.PLAIN,font.getSize());    normalBoldFont=new Font(font.getName(),Font.BOLD,font.getSize());  }  m_view=table.getUnsortedView(row);  final GraphType graphType=m_view.getGraphType();  FunctionType functionType=FunctionType.NORMAL;  final INaviFunction function=container.getFunction(m_view);  if (function != null) {    functionType=function.getType();  }  setBackground(getBackgroundColor(table,isSelected,functionType,graphType));}  }
class C{  protected void createExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  AreasForm areasForm=(AreasForm)form;  String guid=areasForm.getGuid();  AreaVO areaVO=areasForm.populate(new AreaVO());  ActionErrors errors=comprobarDuplicados(descripcionService,request,null,areaVO,guid);  if (errors != null && !errors.isEmpty()) {    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("create-failed"));    return;  } else {    areaVO=descripcionService.createArea(areaVO);  }  goReturnPointExecuteLogic(mapping,form,request,response);}  }
class C{  private void layoutComponents(){  JPanel contentPane=(JPanel)getContentPane();  contentPane.setLayout(new BorderLayout());  contentPane.setBorder(new EmptyBorder(10,10,10,10));  contentPane.add("Center",createMainPanel());  contentPane.add("South",createButtonPanel());}  }
class C{  @SuppressWarnings("unchecked") @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (DEBUG)   println("onCreate() happening here: " + Thread.currentThread().getName());  Window window=getWindow();  window.setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN);  window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);  DisplayMetrics dm=new DisplayMetrics();  Display display=getWindowManager().getDefaultDisplay();  display.getMetrics(dm);  Point size=new Point();  display.getRealSize(size);  displayWidth=size.x;  displayHeight=size.y;  width=displayWidth;  height=displayHeight;  if (DEBUG)   println("display metrics: " + dm);  handleSettings();  int sw=sketchWidth();  int sh=sketchHeight();  String rendererName=sketchRenderer();  Class<?> rendererClass=null;  try {    rendererClass=Class.forName(rendererName);  } catch (  ClassNotFoundException exception) {    String message=String.format("Error: Could not resolve renderer class name: %s",rendererName);    throw new RuntimeException(message,exception);  }  if (rendererName.equals(JAVA2D)) {    cardboardView=new SketchSurfaceView(this,sw,sh,(Class<? extends PGraphicsAndroid2D>)rendererClass);  } else   if (PGraphicsOpenGL.class.isAssignableFrom(rendererClass)) {    cardboardView=new SketchSurfaceViewGL(this,sw,sh,(Class<? extends PGraphicsOpenGL>)rendererClass);  } else {    String message=String.format("Error: Unsupported renderer class: %s",rendererName);    throw new RuntimeException(message);  }  if (smooth == 0) {    g.noSmooth();  } else {    g.smooth(smooth);  }  window.setContentView(cardboardView);  finished=false;  looping=true;  redraw=true;  Context context=getApplicationContext();  sketchPath=context.getFilesDir().getAbsolutePath();}  }
class C{  public void commitChanges(){  mainEditor.commit();  if (smellPanel != null) {    smellPanel.commitChanges();  }}  }
class C{  public static <T>T withPrintWriter(Path self,String charset,@ClosureParams(value=SimpleType.class,options="java.io.PrintWriter") Closure<T> closure) throws IOException {  return IOGroovyMethods.withWriter(newPrintWriter(self,charset),closure);}  }
class C{  public void start(Resource xmlFile) throws PageException {  start(xmlFile,DEFAULT_SAX_PARSER);}  }
class C{  public static NodeResponse send(InternalDistributedMember recipient,PartitionedRegion r,int bucketId,boolean isRebalance,boolean replaceOfflineData,InternalDistributedMember moveSource,boolean forceCreation) throws ForceReattemptException {  Assert.assertTrue(recipient != null,"ManageBucketMessage NULL recipient");  NodeResponse p=new NodeResponse(r.getSystem(),recipient);  ManageBackupBucketMessage m=new ManageBackupBucketMessage(recipient,r.getPRId(),p,bucketId,isRebalance,replaceOfflineData,moveSource,forceCreation);  p.enableSevereAlertProcessing();  Set failures=r.getDistributionManager().putOutgoing(m);  if (failures != null && failures.size() > 0) {    throw new ForceReattemptException("Failed sending <" + m + ">");  }  return p;}  }
class C{  public TriGWriter(OutputStream out){  super(out);}  }
class C{  public String bodyToString(){  getEndOfBodyPosition();  int readerIndex1=this.buffer.readerIndex();  buffer.readerIndex(0);  byte[] buffer1=new byte[buffer.writerIndex()];  buffer.readBytes(buffer1);  buffer.readerIndex(readerIndex1);  byte[] buffer2=null;  if (bodyBuffer != null) {    int readerIndex2=this.bodyBuffer.readerIndex();    bodyBuffer.readerIndex(0);    buffer2=new byte[bodyBuffer.writerIndex() - bodyBuffer.readerIndex()];    bodyBuffer.readBytes(buffer2);    bodyBuffer.readerIndex(readerIndex2);    return "ServerMessage@" + Integer.toHexString(System.identityHashCode(this)) + "[writerIndex="+ buffer.writerIndex()+ ",capacity="+ buffer.capacity()+ ",bodyStart="+ getEndOfBodyPosition()+ " buffer="+ ByteUtil.bytesToHex(buffer1,1)+ ", bodyBuffer="+ ByteUtil.bytesToHex(buffer2,1);  } else {    return "ServerMessage@" + Integer.toHexString(System.identityHashCode(this)) + "[writerIndex="+ buffer.writerIndex()+ ",capacity="+ buffer.capacity()+ ",bodyStart="+ getEndOfBodyPosition()+ " buffer="+ ByteUtil.bytesToHex(buffer1,1);  }}  }
class C{  private Drawable tileifyIndeterminate(Drawable drawable){  if (drawable instanceof AnimationDrawable) {    AnimationDrawable background=(AnimationDrawable)drawable;    final int N=background.getNumberOfFrames();    AnimationDrawable newBg=new AnimationDrawable();    newBg.setOneShot(background.isOneShot());    for (int i=0; i < N; i++) {      Drawable frame=tileify(background.getFrame(i),true);      frame.setLevel(10000);      newBg.addFrame(frame,background.getDuration(i));    }    newBg.setLevel(10000);    drawable=newBg;  }  return drawable;}  }
class C{  public void buildGraphicsNode(BridgeContext ctx,Document doc,RootGraphicsNode node){  if (ctx.isDynamic()) {    ctx.bind(doc,node);  }}  }
class C{  public Element generateSingle(Element parent,ElementMetadata<?,?> parentMetadata,ElementMetadata<?,?> metadata){  Preconditions.checkState(path.selectsElement(),"An attribute path cannot be used to generate elements.");  Element element=getFinalElement(path,parent);  if (element == null) {    return null;  }  try {    ElementKey<?,?> realKey=mergeKeys(element.getElementKey(),metadata.getKey());    return Element.createElement(realKey,element);  } catch (  ContentCreationException e) {    throw new IllegalArgumentException("Invalid metadata",e);  }}  }
class C{  public DiscordWebsocketAdapter(URI serverURI,ImplDiscordAPI api,boolean reconnect){  this(serverURI,api,reconnect,null,-1);}  }
class C{  protected static QualifiedName append(QualifiedName prefix,String segment){  if (segment == null) {    return null;  }  if (prefix == null) {    return QualifiedName.create(segment);  }  return prefix.append(segment);}  }
class C{  boolean inOpenRange(K key,K least,K fence){  if (key == null)   throw new NullPointerException();  return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) <= 0));}  }
class C{  public static UnManagedConsistencyGroup checkUnManagedCGExistsInDB(DbClient dbClient,String nativeGuid){  UnManagedConsistencyGroup unmanagedCG=null;  URIQueryResultList unManagedCGList=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getCGInfoNativeIdConstraint(nativeGuid),unManagedCGList);  if (unManagedCGList.iterator().hasNext()) {    URI unManagedCGURI=unManagedCGList.iterator().next();    unmanagedCG=dbClient.queryObject(UnManagedConsistencyGroup.class,unManagedCGURI);  }  return unmanagedCG;}  }
class C{  public static <T>T createProxyWithFailover(Optional<SSLSocketFactory> sslSocketFactory,Collection<String> endpointUris,Class<T> type){  FailoverFeignTarget<T> failoverFeignTarget=new FailoverFeignTarget<>(endpointUris,type);  Client client=failoverFeignTarget.wrapClient(newOkHttpClient(sslSocketFactory));  return Feign.builder().contract(contract).encoder(encoder).decoder(decoder).client(client).retryer(failoverFeignTarget).target(failoverFeignTarget);}  }
class C{  protected int hash(Object object){  return (object == null) ? 0xbabe : object.hashCode();}  }
class C{  public static String generateParseIssuesMessage(String scriptString,List<ParseIssue> parseIssues){  if (scriptString == null) {    return "No script string available.";  }  if (parseIssues == null) {    return "No parse issues available.";  }  String[] scriptLines=scriptString.split("\\n");  StringBuilder sb=new StringBuilder();  sb.append("\n--------------------------------------------------------------");  if (parseIssues.size() == 1)   sb.append("\nThe following parse issue was encountered:\n"); else   sb.append("\nThe following " + parseIssues.size() + " parse issues were encountered:\n");  int count=1;  for (  ParseIssue parseIssue : parseIssues) {    if (parseIssues.size() > 1) {      sb.append("#");      sb.append(count++);      sb.append(" ");    }    int issueLineNum=parseIssue.getLine();    boolean displayScriptLine=false;    String scriptLine=null;    if ((issueLineNum > 0) && (issueLineNum <= scriptLines.length)) {      displayScriptLine=true;      scriptLine=scriptLines[issueLineNum - 1];    }    String name=parseIssue.getFileName();    if (name != null) {      sb.append(name);      sb.append(" ");    }    sb.append("[line ");    sb.append(issueLineNum);    sb.append(":");    sb.append(parseIssue.getCharPositionInLine());    sb.append("] [");    sb.append(parseIssue.getParseIssueType().getText());    sb.append("]");    if (displayScriptLine) {      sb.append(" -> ");      sb.append(scriptLine);    }    sb.append("\n   ");    sb.append(parseIssue.getMessage());    sb.append("\n");  }  sb.append("--------------------------------------------------------------");  return sb.toString();}  }
class C{  @Override public Matrix transpose(){  return transpose(Ret.NEW);}  }
class C{  public HttpRequest(String path,ParameterMap params){  String queryString=null;  if (path != null) {    this.path=path;  }  if (params != null) {    queryString=params.urlEncode();    this.path+="?" + queryString;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public double[] incomingInstanceToVectorFieldVals(double[] incoming) throws Exception {  double[] newInst=new double[m_vectorFields.size()];  for (int i=0; i < m_vectorFields.size(); i++) {    FieldRef fr=m_vectorFields.get(i);    newInst[i]=fr.getResult(incoming);  }  return newInst;}  }
class C{  public boolean isDebug(){  return isDebug;}  }
class C{  public void configure(){  SerialTrafficController.instance().connectPort(this);  jmri.InstanceManager.setTurnoutManager(jmri.jmrix.maple.SerialTurnoutManager.instance());  jmri.InstanceManager.setLightManager(jmri.jmrix.maple.SerialLightManager.instance());  SerialSensorManager s;  jmri.InstanceManager.setSensorManager(s=jmri.jmrix.maple.SerialSensorManager.instance());  SerialTrafficController.instance().setSensorManager(s);  jmri.jmrix.maple.ActiveFlag.setActive();}  }
class C{  public CActionDeleteEdge(final INaviView view,final INaviEdge edge){  super("Delete Edge");  m_view=Preconditions.checkNotNull(view,"IE00924: View argument can't be null");  m_edge=Preconditions.checkNotNull(edge,"IE00925: Edge argument can't be null");}  }
class C{  public int indexOfKey(Object key){  return key == null ? indexOfNull() : indexOf(key,key.hashCode());}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  public boolean isDynamic(){  return (type != null) && type.isDynamic();}  }
class C{  private void check(){  System.out.println("In check");  double newTemperature=read();  if (itsLastReading != newTemperature) {    itsLastReading=newTemperature;    setChanged();    notifyObservers(new Double(itsLastReading));  }}  }
class C{  public Vector scale(double alpha){  Vector c=new Vector(d);  for (int i=0; i < d; i++)   c.data[i]=alpha * data[i];  return c;}  }
class C{  private boolean isClosed(){  return buf == null;}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  private void handleMarker(Message m){  try {    final boolean isDebugEnabled=logger.isDebugEnabled();    if (isDebugEnabled) {      logger.debug("Received marker message of length ({} bytes)",m.getPayloadLength());    }    this.qManager.getState().processMarker();    if (isDebugEnabled) {      logger.debug("Processed marker message");    }  } catch (  Exception e) {    String message=LocalizedStrings.CacheClientUpdater_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_ATTEMPTING_TO_HANDLE_A_MARKER.toLocalizedString();    handleException(message,e);  }}  }
class C{  public void addLoadedClassCount(int loadedClassCount){  this.totalLoadedClassCount+=loadedClassCount;}  }
class C{  public static void writeStoredBits(Context context,int saltIndex,byte[] storedBits,int requestedSize){  writeStoredBits(context,saltIndex,storedBits,requestedSize,DEFAULT_SHARED_PREF_FILE);}  }
class C{  public String toString(){  final StringBuilder sb=new StringBuilder();  sb.append(op());  sb.append("(").append(left()).append(")");  return sb.toString();}  }
class C{  public MockWebServer server(){  return mockWebServer;}  }
class C{  IntEntry(int h,int k,VALUE v,IntEntry<VALUE> n){  value=v;  next=n;  key=k;  hash=h;}  }
class C{  public boolean offer(E e){  return addLastImpl(e);}  }
class C{  public GroovyClassLoader(ClassLoader loader){  this(loader,null);}  }
class C{  public Matrix(double[][] A){  m=A.length;  n=A[0].length;  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }  }  this.A=A;}  }
class C{  protected ScopedClassPool(ClassLoader cl,ClassPool src,ScopedClassPoolRepository repository){  this(cl,src,repository,false);}  }
class C{  @Override public int executeUpdate(String sql,int[] columnIndexes) throws SQLException {  try {    debugCode("executeUpdate(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean isDebug_1(){  return debug_1;}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public static MappedMemory allocate(File file,FileChannel.MapMode mode,long size){  if (size > MAX_SIZE)   throw new IllegalArgumentException("size cannot be greater than " + MAX_SIZE);  return new MappedMemoryAllocator(file,mode).allocate(size);}  }
class C{  public void testTimeEscapeSequence() throws Exception {  check("'13:15:08'","{t '13:15:08'}");  check("select '13:15:08'","select {t '13:15:08'}");  check("select '13:15:08' from table;","select {t '13:15:08'} from table;");}  }
class C{  public void drain() throws InterruptedException, ExecutionException, IOException {  getProbe().drain();}  }
class C{  public void dismiss(){  unregisterObserver();  if (mPopupWindow != null) {    mPopupWindow.dismiss();  }}  }
class C{  protected void onGotBackground(T t,View view,ViewHelper vp){  onGotTextViewBackground(t,(TextView)view,vp);}  }
class C{  public void init() throws ServletException {}  }
class C{  MessageOutputStream(int size,DNSOutgoing out){  this(size,out,0);}  }
class C{  public void remove(String key){  map.remove(key);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public OptionGroup(String name){  this(name,"");}  }
class C{  @Deprecated public ResultViewDialog(String i18nKey,JComponent results,Object... i18nArgs){  this(ApplicationFrame.getApplicationFrame(),i18nKey,results,i18nArgs);}  }
class C{  private void findDirectPaths(ProfileRequest request,ProfileOption option){  for (  LegMode mode : request.directModes) {    StreetRouter streetRouter=new StreetRouter(transportNetwork.streetLayer);    StreetPath streetPath;    streetRouter.profileRequest=request;    if (mode == LegMode.BICYCLE_RENT) {      if (!transportNetwork.streetLayer.bikeSharing) {        LOG.warn("Bike sharing trip requested but no bike sharing stations in the streetlayer");        continue;      }      streetRouter=findBikeRentalPath(request,streetRouter,true);      if (streetRouter != null) {        StreetRouter.State lastState=streetRouter.getState(request.toLat,request.toLon);        if (lastState != null) {          streetPath=new StreetPath(lastState,streetRouter,LegMode.BICYCLE_RENT,transportNetwork);        } else {          LOG.warn("MODE:{}, Edge near the destination coordinate wasn't found. Routing didn't start!",mode);          continue;        }      } else {        LOG.warn("Not found path from cycle to end");        continue;      }    } else {      streetRouter.streetMode=StreetMode.valueOf(mode.toString());      streetRouter.timeLimitSeconds=request.streetTime * 60;      if (streetRouter.setOrigin(request.fromLat,request.fromLon)) {        if (!streetRouter.setDestination(request.toLat,request.toLon)) {          LOG.warn("Direct mode {} destination wasn't found!",mode);          continue;        }        streetRouter.route();        StreetRouter.State lastState=streetRouter.getState(streetRouter.getDestinationSplit());        if (lastState == null) {          LOG.warn("Direct mode {} last state wasn't found",mode);          continue;        }        streetPath=new StreetPath(lastState,transportNetwork);      } else {        LOG.warn("Direct mode {} origin wasn't found!",mode);        continue;      }    }    StreetSegment streetSegment=new StreetSegment(streetPath,mode,transportNetwork.streetLayer);    option.addDirect(streetSegment,request.getFromTimeDateZD());  }}  }
class C{  protected SecureSAXParserFactory(SAXParserFactory factory) throws ParserConfigurationException, SAXException {  this.factory=factory;  factory.setValidating(false);  try {    factory.setXIncludeAware(false);  } catch (  UnsupportedOperationException e) {  }catch (  NoSuchMethodError e) {  }  try {    factory.setFeature("http://xml.org/sax/features/external-general-entities",false);  } catch (  IllegalArgumentException e) {  }catch (  SAXNotRecognizedException e) {  }  try {    factory.setFeature("http://xml.org/sax/features/external-parameter-entities",false);  } catch (  IllegalArgumentException e) {  }catch (  SAXNotRecognizedException e) {  }  try {    factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd",false);  } catch (  IllegalArgumentException e) {  }catch (  SAXNotRecognizedException e) {  }  try {    factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);  } catch (  IllegalArgumentException e) {  }catch (  SAXNotRecognizedException e) {  }}  }
class C{  public UserActiveException(String message,Object[] params){  super(message,params);}  }
class C{  public boolean onlyIfCached(){  return onlyIfCached;}  }
class C{  public PaletteSwatchesChooser(){}  }
class C{  public static List<String> generateXVals(int from,int to){  List<String> xvals=new ArrayList<String>();  for (int i=from; i < to; i++) {    xvals.add("" + i);  }  return xvals;}  }
class C{  public String asXmlId(){  return DatatypeConverter.printHexBinary(tokenDigest.getValue());}  }
class C{  public boolean isEmpty(){  return indexedEvents.isEmpty();}  }
class C{  @Inline protected void scanObject(ObjectReference object){  if (specializedScan >= 0) {    VM.scanning.specializedScanObject(specializedScan,this,object);  } else {    VM.scanning.scanObject(this,object);  }}  }
class C{  public PanningImageRenderPolicy(OMGraphicHandlerLayer layer){  super(layer);}  }
class C{  public void preVisit(ASTNode node){}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrclonenode1.class,args);}  }
class C{  public void loadOffsets(Context context){  String prefs=Utils.getString(PREF_OFFSETS,"",context);  if (prefs.length() < 1)   return;  Map<Integer,Long> offsets=new HashMap<>();  String[] sOffsets=prefs.split(",");  for (  String offset : sOffsets) {    String[] parts=offset.split(" ");    offsets.put(Utils.stringToInt(parts[0]),Utils.stringToLong(parts[1]));  }  _monitor.setOffsets(offsets);}  }
class C{  private static void parseTraf(ContainerAtom traf,SparseArray<TrackBundle> trackBundleArray,int flags,byte[] extendedTypeScratch) throws ParserException {  if (traf.getChildAtomOfTypeCount(Atom.TYPE_trun) != 1) {    throw new ParserException("Trun count in traf != 1 (unsupported).");  }  LeafAtom tfhd=traf.getLeafAtomOfType(Atom.TYPE_tfhd);  TrackBundle trackBundle=parseTfhd(tfhd.data,trackBundleArray,flags);  if (trackBundle == null) {    return;  }  TrackFragment fragment=trackBundle.fragment;  long decodeTime=fragment.nextFragmentDecodeTime;  trackBundle.reset();  LeafAtom tfdtAtom=traf.getLeafAtomOfType(Atom.TYPE_tfdt);  if (tfdtAtom != null && (flags & FLAG_WORKAROUND_IGNORE_TFDT_BOX) == 0) {    decodeTime=parseTfdt(traf.getLeafAtomOfType(Atom.TYPE_tfdt).data);  }  LeafAtom trun=traf.getLeafAtomOfType(Atom.TYPE_trun);  parseTrun(trackBundle,decodeTime,flags,trun.data);  LeafAtom saiz=traf.getLeafAtomOfType(Atom.TYPE_saiz);  if (saiz != null) {    TrackEncryptionBox trackEncryptionBox=trackBundle.track.sampleDescriptionEncryptionBoxes[fragment.header.sampleDescriptionIndex];    parseSaiz(trackEncryptionBox,saiz.data,fragment);  }  LeafAtom saio=traf.getLeafAtomOfType(Atom.TYPE_saio);  if (saio != null) {    parseSaio(saio.data,fragment);  }  LeafAtom senc=traf.getLeafAtomOfType(Atom.TYPE_senc);  if (senc != null) {    parseSenc(senc.data,fragment);  }  LeafAtom sbgp=traf.getLeafAtomOfType(Atom.TYPE_sbgp);  LeafAtom sgpd=traf.getLeafAtomOfType(Atom.TYPE_sgpd);  if (sbgp != null && sgpd != null) {    parseSgpd(sbgp.data,sgpd.data,fragment);  }  int childrenSize=traf.leafChildren.size();  for (int i=0; i < childrenSize; i++) {    LeafAtom atom=traf.leafChildren.get(i);    if (atom.type == Atom.TYPE_uuid) {      parseUuid(atom.data,fragment,extendedTypeScratch);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.589 -0500",hash_original_method="0E099EDE885EEFB21F71B8A7B980DD82",hash_generated_method="605D64B29EFC9BDFE12926D99E84F3C2") public ContentLanguageParser(String contentLanguage){  super(contentLanguage);}  }
class C{  public boolean add(T object,double value){  return add(tuple(object,value));}  }
class C{  void testCollisions(){  insertionSort(0);  insertionSort(1);}  }
class C{  protected E emitRawLine(String string){  stringBuilder.append(string);  return emitNewline();}  }
class C{  public HGHandle add(Object atom,HGHandle type){  return add(atom,type,0);}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent ae){  super.actionPerformed(ae);  if (Debug.debugging("daynight")) {    Debug.output(getName() + "| updating image via timer...");  }  doPrepare();}  }
class C{  public void changeDirectoryUp() throws IOException {  send("CDUP");  readCode(250);}  }
class C{  @Override public void prepare() throws IgniteCheckedException {  if (!state(PREPARING)) {    if (state() != PREPARING || !optimistic()) {      if (log.isDebugEnabled())       log.debug("Invalid transaction state for prepare: " + this);      return;    }  }  try {    cctx.tm().prepareTx(this);    if (pessimistic() || isSystemInvalidate())     state(PREPARED);  } catch (  IgniteCheckedException e) {    setRollbackOnly();    throw e;  }}  }
class C{  private JPanel createControlPanel(){  JPanel controlPanel=new JPanel();  controlPanel.setLayout(new BorderLayout());  Container zoomPanel=new Container();  zoomPanel.setLayout(new BorderLayout());  JButton plus=new JButton("+");  plus.addMouseListener(new CustomMouseListener(new ZoomAction(ZoomDirection.IN)));  zoomPanel.add(plus,BorderLayout.NORTH);  JButton minus=new JButton("-");  minus.addMouseListener(new CustomMouseListener(new ZoomAction(ZoomDirection.OUT)));  zoomPanel.add(minus,BorderLayout.SOUTH);  controlPanel.add(zoomPanel,BorderLayout.WEST);  controlPanel.add(new JSeparator(SwingConstants.VERTICAL),BorderLayout.CENTER);  Container translationPanel=new Container();  translationPanel.setLayout(new BorderLayout());  JButton up=new BasicArrowButton(SwingConstants.NORTH);  up.addMouseListener(new CustomMouseListener(new TranslationAction(TranslationDirection.NORTH)));  translationPanel.add(up,BorderLayout.NORTH);  JButton west=new BasicArrowButton(SwingConstants.WEST);  west.addMouseListener(new CustomMouseListener(new TranslationAction(TranslationDirection.WEST)));  translationPanel.add(west,BorderLayout.WEST);  translationPanel.add(new JLabel("        "),BorderLayout.CENTER);  JButton east=new BasicArrowButton(SwingConstants.EAST);  east.addMouseListener(new CustomMouseListener(new TranslationAction(TranslationDirection.EAST)));  translationPanel.add(east,BorderLayout.EAST);  JButton south=new BasicArrowButton(SwingConstants.SOUTH);  south.addMouseListener(new CustomMouseListener(new TranslationAction(TranslationDirection.SOUTH)));  translationPanel.add(south,BorderLayout.SOUTH);  controlPanel.add(translationPanel,BorderLayout.EAST);  controlPanel.setBorder(new CompoundBorder(BorderFactory.createTitledBorder("Controls"),BorderFactory.createEmptyBorder(5,5,10,20)));  return controlPanel;}  }
class C{  public void updateStartLocation(Point2D.Double p){}  }
class C{  public static String convertIdent(CSSName cssName,String ident){  if (ident.equals("inherit")) {    return ident;  }  String val=ident;  if (cssName == CSSName.FONT_SIZE) {    String size=(String)FONT_SIZES.get(ident);    val=(size == null ? ident : size);  } else   if (cssName == CSSName.FONT_WEIGHT) {    String size=(String)FONT_WEIGHTS.get(ident);    val=(size == null ? ident : size);  } else   if (cssName == CSSName.BACKGROUND_POSITION) {    String pos=(String)BACKGROUND_POSITIONS.get(ident);    val=(pos == null ? ident : pos);  } else   if (cssName == CSSName.BORDER_BOTTOM_WIDTH || cssName == CSSName.BORDER_LEFT_WIDTH || cssName == CSSName.BORDER_RIGHT_WIDTH || cssName == CSSName.BORDER_WIDTH_SHORTHAND || cssName == CSSName.BORDER_TOP_WIDTH) {    String size=(String)BORDER_WIDTHS.get(ident);    val=(size == null ? ident : size);  } else   if (cssName == CSSName.BORDER_BOTTOM_COLOR || cssName == CSSName.BORDER_LEFT_COLOR || cssName == CSSName.BORDER_RIGHT_COLOR || cssName == CSSName.BORDER_COLOR_SHORTHAND || cssName == CSSName.BORDER_TOP_COLOR || cssName == CSSName.BACKGROUND_COLOR || cssName == CSSName.COLOR || cssName == CSSName.OUTLINE_COLOR) {    val=getColorHex(ident);    if (val == null) {      String fallback=CSSName.initialValue(cssName);      if (fallback.startsWith("="))       fallback=CSSName.initialValue(CSSName.getByPropertyName(fallback.substring(1)));      val=getColorHex(fallback);    }  }  return val;}  }
class C{  private void applyBatch(Map<K,StatefulValue<K,V>> valMap,boolean initSes){  assert valMap.size() <= batchSize;  StoreOperation operation=null;  Map<K,Entry<? extends K,? extends V>> batch=U.newLinkedHashMap(valMap.size());  for (  Map.Entry<K,StatefulValue<K,V>> e : valMap.entrySet()) {    if (operation == null)     operation=e.getValue().operation();    assert operation == e.getValue().operation();    assert e.getValue().status() == ValueStatus.PENDING;    batch.put(e.getKey(),e.getValue().entry());  }  if (updateStore(operation,batch,initSes)) {    for (    Map.Entry<K,StatefulValue<K,V>> e : valMap.entrySet()) {      StatefulValue<K,V> val=e.getValue();      val.writeLock().lock();      try {        val.status(ValueStatus.FLUSHED);        StatefulValue<K,V> prev=writeCache.remove(e.getKey());        assert prev == val : "Map value for key " + e.getKey() + " was updated during flush";        val.signalFlushed();      }  finally {        val.writeLock().unlock();      }    }  } else {    for (    StatefulValue<K,V> val : valMap.values()) {      val.writeLock().lock();      try {        val.status(ValueStatus.RETRY);        retryEntriesCnt.incrementAndGet();        val.signalFlushed();      }  finally {        val.writeLock().unlock();      }    }  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public synchronized void reset(){  authTagHMac.reset();  atagList.clear();}  }
class C{  public static <K,V>Collector<Entry<K,V>,?,Map<K,V>> toMap(){  return Collectors.toMap(null,null);}  }
class C{  void drawScore(){  float cellHeight=ARENA_HEIGHT * SCORE_HEIGHT_PERC;  int score=mScore;  for (int i=0; i < NUM_SCORE_DIGITS; i++) {    int val=score % 10;    Rect boundsRect=mTextRes.getTextureRect(TextResources.DIGIT_START + val);    float ratio=cellHeight / boundsRect.height();    TexturedAlignedRect scoreCell=mScoreDigits[i];    scoreCell.setTextureCoords(boundsRect);    scoreCell.setScale(boundsRect.width() * ratio,cellHeight);    scoreCell.draw();    score/=10;  }}  }
class C{  public void skipWhitespace(){  while (Character.isWhitespace(ci.current())) {    ci.next();  }}  }
class C{  public void detachLocalMirrorFromDistributedVirtualVolume(String virtualVolumeName,String mirrorDeviceName,boolean discard) throws VPlexApiException {  s_logger.info("Request to detach mirror {} from a virtual volume {}",mirrorDeviceName,virtualVolumeName);  try {    VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();    VPlexVirtualVolumeInfo virtualVolumeInfo=findVirtualVolumeAndUpdateInfo(virtualVolumeName,discoveryMgr);    String sourceDeviceName=virtualVolumeInfo.getSupportingDevice();    VPlexDistributedDeviceInfo distributedDeviceInfo=discoveryMgr.findDistributedDevice(sourceDeviceName);    if (distributedDeviceInfo == null) {      throw VPlexApiException.exceptions.cantFindDistDevice(sourceDeviceName);    }    String sourceDevicePath=null;    String mirrorDevicePath=null;    List<VPlexDistributedDeviceComponentInfo> ddComponents=discoveryMgr.getDistributedDeviceComponents(distributedDeviceInfo);    for (    VPlexDistributedDeviceComponentInfo ddComponent : ddComponents) {      discoveryMgr.updateDistributedDeviceComponent(ddComponent);      List<VPlexLocalDeviceComponentInfo> localComponents=discoveryMgr.getLocalDeviceComponents(ddComponent);      for (      VPlexLocalDeviceComponentInfo localComponent : localComponents) {        if (localComponent.getName().equals(mirrorDeviceName)) {          sourceDevicePath=ddComponent.getPath();          mirrorDevicePath=localComponent.getPath();          break;        }      }      if (sourceDevicePath != null && mirrorDevicePath != null) {        break;      }    }    if (mirrorDevicePath == null) {      throw VPlexApiException.exceptions.cantFindMirror(mirrorDeviceName,virtualVolumeName);    }    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_DEVICE_DETACH_MIRROR);    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_D,sourceDevicePath);    argsMap.put(VPlexApiConstants.ARG_DASH_M,mirrorDevicePath);    if (discard) {      argsMap.put(VPlexApiConstants.ARG_DISCARD,"");    }    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Detach mirror for virtual volume POST data is {}",postDataObject.toString());    ClientResponse response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Detach mirror for virtual volume response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Detach mirror for virtual volume is completing asynchrounously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.detachMirrorFailureStatus(mirrorDeviceName,virtualVolumeName,String.valueOf(response.getStatus()),cause);      }    }    _vplexApiClient.deviceCollapse(sourceDevicePath,VPlexApiConstants.COLLAPSE_BY_PATH);  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedDetachingVPlexVolumeMirror(mirrorDeviceName,virtualVolumeName,e);  }}  }
class C{  public void addTargetRequests(List<String> requests,long priority){synchronized (targetRequests) {    for (    String s : requests) {      if (StringUtils.isBlank(s) || s.equals("#") || s.startsWith("javascript:")) {        continue;      }      s=UrlUtils.canonicalizeUrl(s,url.toString());      targetRequests.add(new Request(s).setPriority(priority));    }  }}  }
class C{  @Deprecated public static <E>Iterable<E> unmodifiableIterable(ImmutableCollection<E> iterable){  return checkNotNull(iterable);}  }
class C{  private int generatePermutationId(double[] data){  int permutationId=0;  for (int c=0; c < dimensions; c++) {    permutationId*=dimensions;    permutationId+=(int)data[c];  }  return permutationId;}  }
class C{  protected Frame<V> newFrame(final int nLocals,final int nStack){  return new Frame<V>(nLocals,nStack);}  }
class C{  public OperationPendingException(String message,OperationPendingExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  private Calendar inUTC(Calendar cal){  Calendar utc=Calendar.getInstance(TimeZone.getTimeZone("UTC"));  utc.setTimeInMillis(cal.getTimeInMillis());  return utc;}  }
class C{  void enterState() throws IOException {}  }
class C{  public DelegationSpec(boolean isDelegable,String delegateTo){  this.isDelegable=isDelegable;  this.delegateTo=delegateTo;  this.actAsToken=null;  assert invariantRespected();}  }
class C{  @Util public static boolean isClusterStable(){  if (Play.mode.isDev()) {    return true;  }  return StringUtils.equalsIgnoreCase("STABLE",getClusterInfo().getCurrentState());}  }
class C{  public void addExceptionMessage(ExceptionCode code,String message,NestingException nestingException){  m_exceptionMessages.addElement(new ExceptionMessage(code,message));  assimilateContext(nestingException);}  }
class C{  private void postinit(){  GUIMediator.instance().loadFinished();}  }
class C{  public DefaultRunOptions withMemorySize(int memorySize){  this.memorySize=memorySize;  return this;}  }
class C{  public static boolean withinSetter(Declaration decl){  return container(decl) instanceof Setter;}  }
class C{  public WritableRaster createCompatibleDestRaster(Raster src){  return src.createCompatibleWritableRaster();}  }
class C{  public boolean isSetPutResponse(){  return this.putResponse != null;}  }
class C{  public final ConfigGroup createModule(final String name){  if (this.modules.containsKey(name)) {    throw new IllegalArgumentException("Module " + name + " exists already.");  }  ConfigGroup m=new ConfigGroup(name);  this.modules.put(name,m);  return m;}  }
class C{  private void deleteAttachment(){  log.info("");  if (ADialog.ask(m_WindowNo,this,"AttachmentDelete?"))   m_attachment.delete(true);}  }
class C{  protected SparseVertex(){  edges=new ArrayList<SparseEdge>();  neighbours=new ArrayList<SparseVertex>();}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public PhotoFeed(){  super();  getCategories().add(PhotoData.PHOTO_CATEGORY);  this.delegate=new PhotoDataImpl(this);}  }
class C{  public CategoryCrosshairState(){  this.rowKey=null;  this.columnKey=null;}  }
class C{  public SmallPuzzle(int[] pre){  s=new int[2];  s[0]=pre[0];  s[1]=pre[1];}  }
class C{  void enableButtons(){  enableDataSourceButtons(true);}  }
class C{  private void handleHtmlShowDBBackups(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleShowDbBackups();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,true).setPaneId("backups");  pageWrapper.addHeader();  if (!isUserAnAdmin(requestAndResponse)) {    requestAndResponse.print(servletText.errorPageNotAllowed());  } else {    final File backupsDirectory=new File(dbLogic.getDbDirectory().getParent(),"backups");    requestAndResponse.print(servletText.fragmentShowingContentsOf() + " " + backupsDirectory.getAbsolutePath()+ "<br><br>");    boolean anyBackups=false;    final StringBuilder result=new StringBuilder();    result.append("<ol>");    try {      for (      final File file : backupsDirectory.listFiles()) {        anyBackups=true;        result.append("<li>");        result.append(" <a onclick=\"showPopupWithPage(event, '" + servletText.pageTitleRestoreBackupCommandDb() + "'); return false;\" class=\"cursorIsPointer\" title=\""+ servletText.linkShowRestoreDbBackupCmdTooltip()+ "\" href=\"/restoreBackupCommand/?name="+ file.getName()+ "\">");        result.append(file.getName());        result.append("</a></li>");      }    } catch (    final Exception e) {    }    result.append("</ol>");    if (!anyBackups) {      requestAndResponse.print(servletText.textNoDbBackupsHaveBeenCreated());    } else {      requestAndResponse.print(servletText.sentenceToRestoreDbCommand() + "<br>");      requestAndResponse.print(result.toString());    }  }  pageWrapper.addFooter();}  }
class C{  final boolean dontProcess(){  return this.dontProcess;}  }
class C{  synchronized void removeExtendedStyleAt(int index){  removeAttributeSetAt(extendedIndex + index);}  }
class C{  public void clear(){  HashIndexSetProperties metaData=hashIndexSetProperties;  metaData.size=0;  metaData.free=capacity();  metaData.removedTokens=0;  Object[] set=metaData.set;  for (int i=set.length; i-- > 0; ) {    set[i]=null;  }  hashIndexSetProperties=metaData;}  }
class C{  boolean verifyRecoveryPasswordToken(PlatformUser pUser,String[] decodedParam,String marketplaceId){  boolean isTokenCorrect=decodedParam[1].equals(Long.toString(pUser.getPasswordRecoveryStartDate()));  boolean isMarketplaceIdCorrect=false;  if (marketplaceId == null && decodedParam.length == 2) {    isMarketplaceIdCorrect=true;  } else   if (marketplaceId != null && decodedParam.length == 3) {    isMarketplaceIdCorrect=marketplaceId.equals(decodedParam[2]);  }  boolean isTokenExpired=PasswordRecoveryValidator.isExpired(pUser.getPasswordRecoveryStartDate());  return (isTokenCorrect && isMarketplaceIdCorrect && (!isTokenExpired));}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  String decompile(int indent,int flags){  StringBuffer sb=new StringBuffer();  boolean justbody=(0 != (flags & Decompiler.ONLY_BODY_FLAG));  if (!justbody) {    sb.append("function ");    sb.append(getFunctionName());    sb.append("() {\n\t");  }  sb.append("[native code, arity=");  sb.append(getArity());  sb.append("]\n");  if (!justbody) {    sb.append("}\n");  }  return sb.toString();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildZooArea(zone);}  }
class C{  @Check public void checkExtensionValidators(FModel model){  CheckMode mode=getCheckMode();  for (  IFrancaExternalValidator validator : ValidatorRegistry.getValidatorMap().get(mode)) {    validator.validateModel(model,getMessageAcceptor());  }}  }
class C{  Query makeEquals(Rectangle bbox){  Query qMinX=makeNumberTermQuery(field_minX,bbox.getMinX());  Query qMinY=makeNumberTermQuery(field_minY,bbox.getMinY());  Query qMaxX=makeNumberTermQuery(field_maxX,bbox.getMaxX());  Query qMaxY=makeNumberTermQuery(field_maxY,bbox.getMaxY());  return makeQuery(BooleanClause.Occur.MUST,qMinX,qMinY,qMaxX,qMaxY);}  }
class C{  public void closeRead(){}  }
class C{  public static void init(ActorSystem system) throws Exception {  log.trace("init()");  if (SignerClient.actorSystem == null) {    SignerClient.actorSystem=system;    requestProcessor=system.actorSelection(getSignerPath() + "/user/" + REQUEST_PROCESSOR);  }}  }
class C{  @SuppressWarnings({"MethodMayBeStatic"}) private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public DateColumn(int nrows){  this(Date.class,nrows,nrows,0L);}  }
class C{  public MoveConstrainedAction(DrawingEditor editor,TranslationDirection dir){  super(editor);  this.dir=dir;  updateEnabledState();}  }
class C{  public boolean contains(String aPattern){  if (TextUtils.isEmpty(aPattern)) {    return false;  }  boolean res=false;  if (!TextUtils.isEmpty(mLowerCaseDisplayName)) {    res=mLowerCaseDisplayName.contains(aPattern);  }  if (!res && !TextUtils.isEmpty(mLowerCaseMatrixId)) {    res=mLowerCaseMatrixId.contains(aPattern);  }  if (!res && (null != mContact)) {    res=mContact.contains(aPattern);  }  return res;}  }
class C{  private String convertToCurrent(String configString){  return configString.replaceAll("<headerType>0<","<headerType>gui<").replaceAll("<headerType>1<","<headerType>console<").replaceAll("jarArgs>","cmdLine>").replaceAll("<jarArgs[ ]*/>","<cmdLine/>").replaceAll("args>","opt>").replaceAll("<args[ ]*/>","<opt/>").replaceAll("<dontUsePrivateJres>false</dontUsePrivateJres>","<jdkPreference>" + Jre.JDK_PREFERENCE_PREFER_JRE + "</jdkPreference>").replaceAll("<dontUsePrivateJres>true</dontUsePrivateJres>","<jdkPreference>" + Jre.JDK_PREFERENCE_JRE_ONLY + "</jdkPreference>").replaceAll("<initialHeapSize>0</initialHeapSize>","").replaceAll("<maxHeapSize>0</maxHeapSize>","").replaceAll("<customProcName>.*</customProcName>","");}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public static IJavaModelStatus newMultiStatus(IJavaModelStatus[] children){  JavaModelStatus jms=new JavaModelStatus();  jms.children=children;  return jms;}  }
class C{  public NTPServerTimeProvider() throws UnknownHostException, SocketException {  this(DEFAULT_NTP_SERVERS);}  }
class C{  public IndexColumn(Column column){  this.column=column;  this.name=column.getName();  this.primaryKey=column.isPrimaryKey();}  }
class C{  private Node addWaiter(Node mode){  Node node=new Node(Thread.currentThread(),mode);  Node pred=tail;  if (pred != null) {    node.prev=pred;    if (compareAndSetTail(pred,node)) {      pred.next=node;      return node;    }  }  enq(node);  return node;}  }
class C{  private void compareGraphs(Set<Statement> queryResult,Set<Statement> expectedResult) throws Exception {  if (!Models.isomorphic(expectedResult,queryResult)) {    StringBuilder message=new StringBuilder(128);    message.append("\n============ ");    message.append(getName());    message.append(" =======================\n");    message.append("Expected result: \n");    for (    Statement st : expectedResult) {      message.append(st.toString());      message.append("\n");    }    message.append("=============");    StringUtil.appendN('=',getName().length(),message);    message.append("========================\n");    message.append("Query result: \n");    for (    Statement st : queryResult) {      message.append(st.toString());      message.append("\n");    }    message.append("=============");    StringUtil.appendN('=',getName().length(),message);    message.append("========================\n");    logger.error(message.toString());    fail(message.toString());  }}  }
class C{  @Override public void close(){}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static <T>T max(Collection<? extends T> coll,Comparator<? super T> comp){  if (comp == null)   return (T)max((Collection)coll);  Iterator<? extends T> i=coll.iterator();  T candidate=i.next();  while (i.hasNext()) {    T next=i.next();    if (comp.compare(next,candidate) > 0)     candidate=next;  }  return candidate;}  }
class C{  private void assign(Relation<V> database,List<ORCLUSCluster> clusters){  NumberVectorDistanceFunction<? super V> distFunc=SquaredEuclideanDistanceFunction.STATIC;  for (  ORCLUSCluster cluster : clusters) {    cluster.objectIDs.clear();  }  List<NumberVector> projectedCentroids=new ArrayList<>(clusters.size());  for (  ORCLUSCluster c : clusters) {    projectedCentroids.add(DoubleVector.wrap(project(c,c.centroid)));  }  for (DBIDIter it=database.iterDBIDs(); it.valid(); it.advance()) {    double[] o=database.get(it).toArray();    double minDist=Double.POSITIVE_INFINITY;    ORCLUSCluster minCluster=null;    for (int i=0; i < clusters.size(); i++) {      ORCLUSCluster c=clusters.get(i);      NumberVector o_proj=DoubleVector.wrap(project(c,o));      double dist=distFunc.distance(o_proj,projectedCentroids.get(i));      if (dist < minDist) {        minDist=dist;        minCluster=c;      }    }    minCluster.objectIDs.add(it);  }  for (  ORCLUSCluster cluster : clusters) {    if (cluster.objectIDs.size() > 0) {      cluster.centroid=Centroid.make(database,cluster.objectIDs).toArray();    }  }}  }
class C{  public final void yyreset(Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=zzPushbackPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;}  }
class C{  private void registerAttributes(Model model,Expression path) throws Exception {  String prefix=path.getPrefix();  String name=path.getFirst();  int index=path.getIndex();  if (path.isPath()) {    Model next=model.register(name,prefix,index);    Expression child=path.getPath(1);    if (next == null) {      throw new PathException("Element '%s' does not exist in %s",name,detail);    }    registerAttributes(next,child);  } else {    registerAttribute(model,path);  }}  }
class C{  protected AbstractMapEntry(T key,V value){  super();  this.key=key;  this.value=value;}  }
class C{  public OrderRestRep submit(URI tenantId,URI serviceId,Map<String,String> params){  OrderCreateParam input=new OrderCreateParam();  input.setCatalogService(serviceId);  input.setTenantId(tenantId);  List<Parameter> parameters=new ArrayList<Parameter>();  for (  Map.Entry<String,String> entry : params.entrySet()) {    parameters.add(new Parameter(entry.getKey(),entry.getValue(),entry.getValue()));  }  input.setParameters(parameters);  return submit(input);}  }
class C{  public SimpleDate(java.util.Date date,int type){  if (date == null) {    throw new IllegalArgumentException("date == null");  }  this.date=date;  this.type=type;}  }
class C{  public void addToRenderQueue(VisualItem item){  if (ritems.length == rsize) {    int capacity=(3 * ritems.length) / 2 + 1;    VisualItem[] q=new VisualItem[capacity];    int[] s=new int[capacity];    System.arraycopy(ritems,0,q,0,rsize);    System.arraycopy(rscores,0,s,0,rsize);    ritems=q;    rscores=s;  }  ritems[rsize]=item;  rscores[rsize++]=(sort != null ? sort.score(item) : 0);}  }
class C{  protected final void INT_2DOUBLE(Instruction s,RegisterOperand def,RegisterOperand left){  Register res=def.getRegister();  Register src=left.getRegister();  Register FP=regpool.getPhysicalRegisterSet().asPPC().getFP();  RegisterOperand temp=regpool.makeTempInt();  int p=burs.ir.stackManager.allocateSpaceForConversion();  EMIT(MIR_Unary.mutate(s,PPC_LDIS,temp,IC(0x4330)));  EMIT(MIR_Store.create(PPC_STW,I(temp.getRegister()),A(FP),IC(p),new TrueGuardOperand()));  Register t1=regpool.getInteger();  EMIT(MIR_Binary.create(PPC_XORIS,I(t1),I(src),IC(0x8000)));  EMIT(MIR_Store.create(PPC_STW,I(t1),A(FP),IC(p + 4),new TrueGuardOperand()));  EMIT(MIR_Load.create(PPC_LFD,D(res),A(FP),IC(p)));  Register tempF=regpool.getDouble();  emitLFtoc(PPC_LFD,tempF,Entrypoints.I2DconstantField);  EMIT(MIR_Binary.create(PPC_FSUB,D(res),D(res),D(tempF)));}  }
class C{  protected void addOperationNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ServiceInvocation_operationName_feature"),getString("_UI_PropertyDescriptor_description","_UI_ServiceInvocation_operationName_feature","_UI_ServiceInvocation_type"),EipPackage.Literals.SERVICE_INVOCATION__OPERATION_NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public boolean unregisterClient(UnregisterProfile profile,ServerConfig utils,Context context) throws AppCatalogException {  StringBuilder endPoint=new StringBuilder();  endPoint.append(utils.getAPIServerURL(context));  endPoint.append(Constants.DYNAMIC_CLIENT_REGISTER_ENDPOINT);  endPoint.append("?" + USER_ID + "="+ profile.getUserId());  endPoint.append("&" + CONSUMER_KEY + "="+ profile.getConsumerKey());  endPoint.append("&" + APPLICATION_NAME + "="+ profile.getApplicationName());  EndPointInfo endPointInfo=new EndPointInfo();  endPointInfo.setHttpMethod(org.wso2.emm.agent.proxy.utils.Constants.HTTP_METHODS.DELETE);  endPointInfo.setEndPoint(endPoint.toString());  sendRequest(endPointInfo,null,Constants.DYNAMIC_CLIENT_UNREGISTER_REQUEST_CODE);  return true;}  }
class C{  public ReflectiveOperationException(Throwable cause){  super(cause);}  }
class C{  @Override public boolean isValidCombination(int semesterMinutes,DatePattern datePattern,TimePattern timePattern){  if (datePattern == null)   return false;  if (timePattern.getType() != null && timePattern.getType() == TimePattern.sTypeExactTime)   return true;  if (datePattern.getType() != null && datePattern.getType() == DatePattern.sTypePatternSet) {    for (    DatePattern child : datePattern.findChildren())     if (isValidCombination(semesterMinutes,child,timePattern))     return true;    return false;  } else {    return semesterMinutes == datePattern.getEffectiveNumberOfWeeks() * timePattern.getNrMeetings() * timePattern.getMinPerMtg();  }}  }
class C{  private void extractReferenceFromConstantPool(byte[] contents,ClassFileReader reader) throws ClassFormatException {  int[] constantPoolOffsets=reader.getConstantPoolOffsets();  int constantPoolCount=constantPoolOffsets.length;  for (int i=1; i < constantPoolCount; i++) {    int tag=reader.u1At(constantPoolOffsets[i]);    char[] name=null;    char[] type=null;switch (tag) {case ClassFileConstants.FieldRefTag:      name=extractName(constantPoolOffsets,reader,i);    addFieldReference(name);  break;case ClassFileConstants.MethodRefTag:case ClassFileConstants.InterfaceMethodRefTag:name=extractName(constantPoolOffsets,reader,i);type=extractType(constantPoolOffsets,reader,i);if (CharOperation.equals(INIT,name)) {char[] className=extractClassName(constantPoolOffsets,reader,i);boolean localType=false;if (className != null) {for (int c=0, max=className.length; c < max; c++) {switch (className[c]) {case '/':    className[c]='.';  break;case '$':localType=true;break;}}}addConstructorReference(className,extractArgCount(type,localType ? className : null));} else {addMethodReference(name,extractArgCount(type,null));}break;case ClassFileConstants.ClassTag:name=extractClassReference(constantPoolOffsets,reader,i);if (name.length > 0 && name[0] == '[') break;name=replace('/','.',name);addTypeReference(name);char[][] qualification=CharOperation.splitOn('.',name);for (int j=0, length=qualification.length; j < length; j++) {addNameReference(qualification[j]);}break;}}}  }
class C{  private void statInit(){  lDocumentNo.setLabelFor(fDocumentNo);  fDocumentNo.setBackground(AdempierePLAF.getInfoBackground());  fDocumentNo.addActionListener(this);  lDescription.setLabelFor(fDescription);  fDescription.setBackground(AdempierePLAF.getInfoBackground());  fDescription.addActionListener(this);  lPOReference.setLabelFor(fPOReference);  fPOReference.setBackground(AdempierePLAF.getInfoBackground());  fPOReference.addActionListener(this);  fIsSOTrx.setSelected(!"N".equals(Env.getContext(Env.getCtx(),p_WindowNo,"IsSOTrx")));  fIsSOTrx.addActionListener(this);  fIsDelivered.setSelected(false);  fIsDelivered.addActionListener(this);  fBPartner_ID=new VLookup("C_BPartner_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MOrder.Table_Name,MOrder.COLUMNNAME_C_BPartner_ID),DisplayType.Search));  lBPartner_ID.setLabelFor(fBPartner_ID);  fBPartner_ID.setBackground(AdempierePLAF.getInfoBackground());  fBPartner_ID.addActionListener(this);  lDateFrom.setLabelFor(fDateFrom);  fDateFrom.setBackground(AdempierePLAF.getInfoBackground());  fDateFrom.setToolTipText(Msg.translate(Env.getCtx(),"DateFrom"));  fDateFrom.addActionListener(this);  lDateTo.setLabelFor(fDateTo);  fDateTo.setBackground(AdempierePLAF.getInfoBackground());  fDateTo.setToolTipText(Msg.translate(Env.getCtx(),"DateTo"));  fDateTo.addActionListener(this);  lAmtFrom.setLabelFor(fAmtFrom);  fAmtFrom.setBackground(AdempierePLAF.getInfoBackground());  fAmtFrom.setToolTipText(Msg.translate(Env.getCtx(),"AmtFrom"));  fAmtFrom.addActionListener(this);  fAmtFrom.setBorder(fDateFrom.getBorder());  lAmtTo.setLabelFor(fAmtTo);  fAmtTo.setBackground(AdempierePLAF.getInfoBackground());  fAmtTo.setToolTipText(Msg.translate(Env.getCtx(),"AmtTo"));  fAmtTo.addActionListener(this);  fAmtTo.setBorder(fDateFrom.getBorder());  CPanel amtPanel=new CPanel();  CPanel datePanel=new CPanel();  amtPanel.setLayout(new ALayout(0,0,true));  amtPanel.add(fAmtFrom,new ALayoutConstraint(0,0));  amtPanel.add(lAmtTo,null);  amtPanel.add(fAmtTo,null);  datePanel.setLayout(new ALayout(0,0,true));  datePanel.add(fDateFrom,new ALayoutConstraint(0,0));  datePanel.add(lDateTo,null);  datePanel.add(fDateTo,null);  p_criteriaGrid.add(lDocumentNo,new ALayoutConstraint(0,0));  p_criteriaGrid.add(fDocumentNo,null);  p_criteriaGrid.add(lDescription,null);  p_criteriaGrid.add(fDescription,null);  p_criteriaGrid.add(fIsSOTrx,new ALayoutConstraint(0,4));  p_criteriaGrid.add(lBPartner_ID,new ALayoutConstraint(1,0));  p_criteriaGrid.add(fBPartner_ID,null);  p_criteriaGrid.add(lDateFrom,null);  p_criteriaGrid.add(datePanel,null);  p_criteriaGrid.add(fIsDelivered,new ALayoutConstraint(1,4));  p_criteriaGrid.add(lPOReference,new ALayoutConstraint(2,0));  p_criteriaGrid.add(fPOReference,null);  p_criteriaGrid.add(lAmtFrom,null);  p_criteriaGrid.add(amtPanel,null);}  }
class C{  private void insertDummyContact(){  ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>(2);  ContentProviderOperation.Builder op=ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI).withValue(ContactsContract.RawContacts.ACCOUNT_TYPE,null).withValue(ContactsContract.RawContacts.ACCOUNT_NAME,null);  operations.add(op.build());  op=ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI).withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID,0).withValue(ContactsContract.Data.MIMETYPE,ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE).withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,DUMMY_CONTACT_NAME);  operations.add(op.build());  ContentResolver resolver=getActivity().getContentResolver();  try {    resolver.applyBatch(ContactsContract.AUTHORITY,operations);  } catch (  RemoteException e) {    Log.d(TAG,"Could not add a new contact: " + e.getMessage());  }catch (  OperationApplicationException e) {    Log.d(TAG,"Could not add a new contact: " + e.getMessage());  }}  }
class C{  public void build() throws PlayServiceNotAvailableException {  if (mContext == null) {    throw new RuntimeException("Context not set, please set context");  }  if (mSenderId == null && mSenderIdRes == null) {    throw new RuntimeException("Sender Id not set, please set the id");  } else {    mSenderId=(mSenderId != null) ? mSenderId : mContext.getString(mSenderIdRes);  }  EasyGcm.init(mContext,mSenderId,logEnable);}  }
class C{  public Geo normalize(Geo ret){  return this.scale(1.0 / this.length(),ret);}  }
class C{  public GPUImageBoxBlurFilter(){  this(1f);}  }
class C{  private static boolean isInVerticalTargetZone(float x,float y,float handleX,float handleYStart,float handleYEnd,float targetRadius){  if (Math.abs(x - handleX) <= targetRadius && y > handleYStart && y < handleYEnd) {    return true;  }  return false;}  }
class C{  public void drawString(String str,float x,float y){  mGraphics.drawString(str,x,y);}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.INT_LITERAL;}  }
class C{  private static void genNullCheck(Assembler asm,GPR objRefReg){  asm.baselineEmitLoadTIB(S0,T0);}  }
class C{  public void showZoomRectangle(double x,double y,double w,double h){  ChartViewerSkin skin=(ChartViewerSkin)getSkin();  skin.showZoomRectangle(x,y,w,h);}  }
class C{  public void testAuthenticationByProperty() throws Exception {  URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/authentication-war/test");  final String expected="Principal name [someone], Is user in \"cargo\" role [true]";  Map<String,String> requestProperties=new HashMap<String,String>();  requestProperties.put("Authorization","Basic " + new String(Base64.encodeBase64("someone:passw0rd".getBytes())));  PingUtils.assertPingTrue("Failed authentication",expected,url,requestProperties,logger);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void mouseEntered(MouseEvent event){}  }
class C{  public DateMidnight plus(long duration){  return withDurationAdded(duration,1);}  }
class C{  public <T>OverlayUI<T> overlayUI(Pane ui,T controller){  checkGuiThread();  OverlayUI<T> pair=new OverlayUI<T>(ui,controller);  try {    if (controller != null) {      controller.getClass().getField("overlayUI").set(controller,pair);    }  } catch (  IllegalAccessException|NoSuchFieldException ignored) {    ignored.printStackTrace();  }  pair.show();  return pair;}  }
class C{  protected boolean mustShowHorizontalScrollbar(Dimension contentSize){  return contentSize.width > this.contentBounds.width && this.innerBounds.height > this.titleBarHeight + this.scrollBarSize;}  }
class C{  public String toExternalForm(){  if (streamHandler == null) {    return "unknown protocol(" + protocol + ")://"+ host+ file;  }  return streamHandler.toExternalForm(this);}  }
class C{  protected void updateCloudletProcessing(){  if (CloudSim.clock() < 0.111 || CloudSim.clock() > getLastProcessTime() + CloudSim.getMinTimeBetweenEvents()) {    List<? extends Host> list=getVmAllocationPolicy().getHostList();    double smallerTime=Double.MAX_VALUE;    for (int i=0; i < list.size(); i++) {      Host host=list.get(i);      double time=host.updateVmsProcessing(CloudSim.clock());      if (time < smallerTime) {        smallerTime=time;      }    }    if (smallerTime < CloudSim.clock() + CloudSim.getMinTimeBetweenEvents() + 0.01) {      smallerTime=CloudSim.clock() + CloudSim.getMinTimeBetweenEvents() + 0.01;    }    if (smallerTime != Double.MAX_VALUE) {      schedule(getId(),(smallerTime - CloudSim.clock()),CloudSimTags.VM_DATACENTER_EVENT);    }    setLastProcessTime(CloudSim.clock());  }}  }
class C{  public String toString(String pattern,Locale locale){  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);}  }
class C{  protected static String makeOptionString(Kernel Kernel){  StringBuffer text;  text=new StringBuffer();  text.append("\nGeneral options:\n\n");  text.append("-t <training file>\n");  text.append("\tThe name of the training file.\n");  text.append("-c <class index>\n");  text.append("\tSets index of class attribute (default: last).\n");  if (Kernel instanceof OptionHandler) {    text.append("\nOptions specific to " + Kernel.getClass().getName().replaceAll(".*\\.","") + ":\n\n");    Enumeration<Option> enm=((OptionHandler)Kernel).listOptions();    while (enm.hasMoreElements()) {      Option option=enm.nextElement();      text.append(option.synopsis() + "\n");      text.append(option.description() + "\n");    }  }  return text.toString();}  }
class C{  private CTutorialLoader(){}  }
class C{  public T caseVariableBinding(VariableBinding object){  return null;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  public static Intent craftIntent(Context ctx,Bitmap hero,String artistRef,ProviderIdentifier provider,int color){  Intent intent=new Intent(ctx,ArtistActivity.class);  intent.putExtra(ArtistActivity.EXTRA_ARTIST,artistRef);  intent.putExtra(ArtistActivity.EXTRA_PROVIDER,provider);  intent.putExtra(ArtistActivity.EXTRA_BACKGROUND_COLOR,color);  Utils.queueBitmap(ArtistActivity.BITMAP_ARTIST_HERO,hero);  return intent;}  }
class C{  public static URL[] findResourceBases(String baseResource){  return findResourceBases(baseResource,Thread.currentThread().getContextClassLoader());}  }
class C{  public void forceClose() throws IOException {  in.close();}  }
class C{  public static double toDegrees(double radians){  return (radians * 180) / (Math.PI);}  }
class C{  public void periodicProcessing() throws PayloadException, NetworkException {  long timeout=mTimeout;  long inactivityPeriod=System.currentTimeMillis() - mActivityTimestamp;  long remainingPeriod=timeout - inactivityPeriod;  if (sLogger.isActivated()) {    sLogger.debug("Check inactivity period: inactivity=" + inactivityPeriod + ", remaining="+ remainingPeriod);  }  if (inactivityPeriod >= timeout) {    if (sLogger.isActivated()) {      sLogger.debug("No activity on the session during " + timeout + "ms: abort the session");    }    mSession.handleInactivityEvent();  } else {    startTimer(System.currentTimeMillis(),remainingPeriod);  }}  }
class C{  public void testEngineChanges(){  EngineTypes et=new EngineTypes();  et.addName("Diesel");  Location harvard=lmanager.newLocation("Harvard");  Track loc1trk1=harvard.addTrack("Harvard Yard 1",Track.YARD);  loc1trk1.setLength(1000);  Track loc1trk2=harvard.addTrack("Harvard Yard 2",Track.YARD);  loc1trk2.setLength(1000);  Location arlington=lmanager.newLocation("Arlington");  Track loc2trk1=arlington.addTrack("Arlington Siding",Track.YARD);  loc2trk1.setLength(1000);  Location boston=lmanager.newLocation("Boston");  Track loc3trk1=boston.addTrack("Boston Yard 1",Track.YARD);  loc3trk1.setLength(1000);  Track loc3trk2=boston.addTrack("Boston Yard 2",Track.YARD);  loc3trk2.setLength(1000);  Location chelmsford=lmanager.newLocation("Chelmsford");  Track loc4trk1=chelmsford.addTrack("Chelmsford Yard 1",Track.YARD);  loc4trk1.setLength(1000);  Track loc4trk2=chelmsford.addTrack("Chelmsford Yard 2",Track.YARD);  loc4trk2.setLength(1000);  Location westford=lmanager.newLocation("Westford");  Track loc5trk1=westford.addTrack("Westford Yard",Track.YARD);  loc5trk1.setLength(1000);  Consist con1=emanager.newConsist("C1");  Engine e1=emanager.newEngine("UP","1");  e1.setModel("GP30");  e1.setOwner("AT");  e1.setBuilt("1957");  e1.setConsist(con1);  e1.setMoves(5);  Engine e2=emanager.newEngine("SP","2");  e2.setModel("GP30");  e2.setOwner("AT");  e2.setBuilt("1957");  e2.setConsist(con1);  e2.setMoves(5);  Engine e3=emanager.newEngine("SP","3");  e3.setModel("GP40");  e3.setBuilt("1957");  Engine e4=emanager.newEngine("UP","10");  e4.setModel("GP40");  e4.setBuilt("1944");  e4.setMoves(20);  Engine e5=emanager.newEngine("SP","20");  e5.setModel("GP40");  e5.setBuilt("1944");  e5.setMoves(20);  Engine e6=emanager.newEngine("UP","100");  e6.setModel("GP40");  e6.setBuilt("1944");  e6.setMoves(2);  Engine e7=emanager.newEngine("SP","200");  e7.setModel("GP40");  e7.setBuilt("1944");  e7.setMoves(2);  Engine e8=emanager.newEngine("SP","300");  e8.setModel("GP40");  e8.setBuilt("1944");  e8.setMoves(20);  Engine e9=emanager.newEngine("SP","400");  e9.setModel("GP30");  e9.setBuilt("1944");  e9.setMoves(2);  Assert.assertEquals("Place e1",Track.OKAY,e1.setLocation(harvard,loc1trk1));  Assert.assertEquals("Place e2",Track.OKAY,e2.setLocation(harvard,loc1trk1));  Assert.assertEquals("Place e3",Track.OKAY,e3.setLocation(arlington,loc2trk1));  Assert.assertEquals("Place e4",Track.OKAY,e4.setLocation(arlington,loc2trk1));  Assert.assertEquals("Place e5",Track.OKAY,e5.setLocation(chelmsford,loc4trk1));  Assert.assertEquals("Place e6",Track.OKAY,e6.setLocation(chelmsford,loc4trk1));  Assert.assertEquals("Place e7",Track.OKAY,e7.setLocation(chelmsford,loc4trk1));  Assert.assertEquals("Place e8",Track.OKAY,e8.setLocation(chelmsford,loc4trk1));  Assert.assertEquals("Place e9",Track.OKAY,e9.setLocation(chelmsford,loc4trk1));  Route rte1=rmanager.newRoute("Route Harvard to Westford");  rte1.addLocation(harvard);  RouteLocation rlArlington=rte1.addLocation(arlington);  rte1.addLocation(boston);  RouteLocation rlChelmsford=rte1.addLocation(chelmsford);  rte1.addLocation(westford);  Train train1=tmanager.newTrain("TestEngineChanges");  train1.setRoute(rte1);  train1.setBuildConsistEnabled(true);  train1.setNumberEngines("2");  train1.setSecondLegOptions(Train.CHANGE_ENGINES);  train1.setSecondLegNumberEngines("1");  train1.setSecondLegStartLocation(rlArlington);  train1.setSecondLegEngineRoad("UP");  train1.setSecondLegEngineModel("GP40");  train1.setThirdLegOptions(Train.CHANGE_ENGINES);  train1.setThirdLegNumberEngines("3");  train1.setThirdLegStartLocation(rlChelmsford);  train1.setThirdLegEngineRoad("SP");  train1.setThirdLegEngineModel("GP40");  new TrainBuilder().build(train1);  Assert.assertEquals("Train should build",true,train1.isBuilt());  Assert.assertEquals("e1 assigned to train",arlington,e1.getDestination());  Assert.assertEquals("e2 assigned to train",arlington,e2.getDestination());  Assert.assertEquals("e3 not assigned to train due to road name",null,e3.getDestination());  Assert.assertEquals("e4 assigned to train",chelmsford,e4.getDestination());  Assert.assertEquals("e5 assigned to train",westford,e5.getDestination());  Assert.assertEquals("e6 not assigned to train due to road name",null,e6.getDestination());  Assert.assertEquals("e7 assigned to train",westford,e7.getDestination());  Assert.assertEquals("e8 assigned to train",westford,e8.getDestination());  Assert.assertEquals("e9 not assigned to train due to model type",null,e9.getDestination());  Assert.assertEquals("Place e4",Track.OKAY,e4.setLocation(null,null));  new TrainBuilder().build(train1);  Assert.assertEquals("Train should not build",false,train1.isBuilt());  Assert.assertEquals("Place e4",Track.OKAY,e4.setLocation(arlington,loc2trk1));  new TrainBuilder().build(train1);  Assert.assertEquals("Train should build",true,train1.isBuilt());  Assert.assertEquals("Place e8",Track.OKAY,e8.setLocation(null,null));  new TrainBuilder().build(train1);  Assert.assertEquals("Train should not build",false,train1.isBuilt());  Assert.assertEquals("Place e8",Track.OKAY,e8.setLocation(chelmsford,loc4trk1));  new TrainBuilder().build(train1);  Assert.assertEquals("Train should build",true,train1.isBuilt());}  }
class C{  private static void updatePortAssociations(Collection<StoragePort> ports,Map<NetworkLite,List<StoragePort>> networkPorts,DbClient dbClient) throws IOException {  updatePortToNetworkAssociation(networkPorts,dbClient);  StoragePoolAssociationHelper.updateVArrayRelations(ports,null,dbClient,null);}  }
class C{  protected void configureServiceInstance(AtomicReference<ServiceInstance<ZookeeperInstance>> serviceInstance,String appName,ApplicationContext context,AtomicInteger port,String host,UriSpec uriSpec){  try {    serviceInstance.set(ServiceInstance.<ZookeeperInstance>builder().name(appName).payload(new ZookeeperInstance(context.getId(),appName,this.properties.getMetadata())).port(port.get()).address(host).uriSpec(uriSpec).build());  } catch (  Exception e) {    ReflectionUtils.rethrowRuntimeException(e);  }}  }
class C{  private ByteString toByteString(){  return new ByteString(toByteArray());}  }
class C{  public T2 v2(){  return v2;}  }
class C{  @Override public String stringValue(final IScope scope) throws GamaRuntimeException {  return serialize(false);}  }
class C{  private AstNode propertyName(int atPos,String s,int memberTypeFlags) throws IOException {  int pos=atPos != -1 ? atPos : ts.tokenBeg, lineno=ts.lineno;  int colonPos=-1;  Name name=createNameNode(true,currentToken);  Name ns=null;  if (matchToken(Token.COLONCOLON)) {    ns=name;    colonPos=ts.tokenBeg;switch (nextToken()) {case Token.NAME:      name=createNameNode();    break;case Token.MUL:  saveNameTokenData(ts.tokenBeg,"*",ts.lineno);name=createNameNode(false,-1);break;case Token.LB:return xmlElemRef(atPos,ns,colonPos);default :reportError("msg.no.name.after.coloncolon");return makeErrorNode();}}if (ns == null && memberTypeFlags == 0 && atPos == -1) {return name;}XmlPropRef ref=new XmlPropRef(pos,getNodeEnd(name) - pos);ref.setAtPos(atPos);ref.setNamespace(ns);ref.setColonPos(colonPos);ref.setPropName(name);ref.setLineno(lineno);return ref;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="FE_FLOATING_POINT_EQUALITY",justification="font sizes are really quantized") public static synchronized void prepareFontLists(){  if (prepared) {    log.debug("Subsequent call - no need to prepare");    return;  }  log.debug("Prepare font lists...");  monospaced=new ArrayList<>();  proportional=new ArrayList<>();  character=new ArrayList<>();  symbol=new ArrayList<>();  all=new ArrayList<>();  FontRenderContext frc=new FontRenderContext(null,false,false);  for (  String s : GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()) {    all.add(s);    Font f=new Font(s,Font.PLAIN,12);    if (f.canDisplay('F') && f.canDisplay('b') && f.canDisplay('8')) {      character.add(s);      double w;      if (f.getStringBounds("I",frc).getWidth() == (w=f.getStringBounds("W",frc).getWidth()) && w == f.getStringBounds(" ",frc).getWidth()) {        monospaced.add(s);      } else {        proportional.add(s);      }    } else {      symbol.add(s);    }  }  log.debug("...font lists built");  prepared=true;}  }
class C{  static void removeLinks(final Network network){  if (linksToRemove == null)   return;  Iterator<Id<Link>> linkIterator=linksToRemove.iterator();  while (linkIterator.hasNext()) {    Id<Link> id=linkIterator.next();    network.removeLink(id);    log.info("Removed link " + id.toString() + " from network ...");  }}  }
class C{  public AndroidTamperingProtection build(){  AndroidTamperingProtection androidTamperingProtection=new AndroidTamperingProtection(this);  return androidTamperingProtection;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DefaultBoxAndWhiskerXYDataset)) {    return false;  }  DefaultBoxAndWhiskerXYDataset that=(DefaultBoxAndWhiskerXYDataset)obj;  if (!ObjectUtilities.equal(this.seriesKey,that.seriesKey)) {    return false;  }  if (!this.dates.equals(that.dates)) {    return false;  }  if (!this.items.equals(that.items)) {    return false;  }  return true;}  }
class C{  public void registerOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener){  sharedPreferences.registerOnSharedPreferenceChangeListener(listener);}  }
class C{  public static boolean contains(final double[] array,final double valueToFind,final double tolerance){  return ArrayUtils.indexOf(array,valueToFind,0,tolerance) != ArrayUtils.INDEX_NOT_FOUND;}  }
class C{  public SendablePhotoMessage build(){  return new SendablePhotoMessage(photo,caption,replyTo,replyMarkup,disableNotification);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.GATEWAY__TO_CHANNELS:    return ((InternalEList<?>)getToChannels()).basicRemove(otherEnd,msgs);case EipPackage.GATEWAY__FROM_CHANNELS:  return ((InternalEList<?>)getFromChannels()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  static void withRandom(long seed,Consumer<Random> cons){  Random random=new Random(seed);  withMessage("Using new Random(" + seed + ")",null);}  }
class C{  final void unsplice(Node pred,Node s){  s.forgetContents();  if (pred != null && pred != s && pred.next == s) {    Node n=s.next;    if (n == null || (n != s && pred.casNext(s,n) && pred.isMatched())) {      for (; ; ) {        Node h=head;        if (h == pred || h == s || h == null)         return;        if (!h.isMatched())         break;        Node hn=h.next;        if (hn == null)         return;        if (hn != h && casHead(h,hn))         h.forgetNext();      }      if (pred.next != pred && s.next != s) {        for (; ; ) {          int v=sweepVotes;          if (v < SWEEP_THRESHOLD) {            if (casSweepVotes(v,v + 1))             break;          } else           if (casSweepVotes(v,0)) {            sweep();            break;          }        }      }    }  }}  }
class C{  public T caseBinaryIntLiteral(BinaryIntLiteral object){  return null;}  }
class C{  public boolean isRolloverBorders(){  return rolloverBorders;}  }
class C{  public EstadoNotificacionBD(){}  }
class C{  public MoveDescriptor(){  super(IJavaRefactorings.MOVE);}  }
class C{  protected void storeState(){  if (storePartials) {    likelihoodCore.storeState();  }  super.storeState();}  }
class C{  public void addArc(float latPoint,float lonPoint,float radius,float s,float e,LinkProperties properties) throws IOException {  LinkArc.write(latPoint,lonPoint,radius,-1,-1,s,e,properties,link.dos);}  }
class C{  public int multipleFloatVectorCrossover(final int min,final int max,final int start,final int subpopulation,final Individual[] inds,final EvolutionState state,final int thread){  if (!(inds[0] instanceof FloatVectorIndividual))   state.output.fatal("Trying to produce float vector individuals when you can't!");  if (sources.length <= 2)   state.output.error("Only two parents specified!");  int n=typicalIndsProduced();  if (n < min)   n=min;  if (n > max)   n=max;  for (int i=0; i < parents.length; i++) {    sources[i].produce(1,1,i,subpopulation,parents,state,thread);    if (!(sources[i] instanceof BreedingPipeline))     parents[i]=(FloatVectorIndividual)(parents[i].clone());  }  VectorSpecies species=(VectorSpecies)inds[0].species;  for (int i=0; i < parents[0].genomeLength(); i++) {    if (state.random[thread].nextBoolean(species.crossoverProbability)) {      for (int j=parents.length - 1; j > 0; j--) {        int swapIndex=state.random[thread].nextInt(j);        float temp=((FloatVectorIndividual)parents[j]).genome[i];        ((FloatVectorIndividual)parents[j]).genome[i]=((FloatVectorIndividual)parents[swapIndex]).genome[i];        ((FloatVectorIndividual)parents[swapIndex]).genome[i]=temp;      }    }  }  for (int i=0, q=start; i < parents.length; i++, q++) {    parents[i].evaluated=false;    if (q < inds.length) {      inds[q]=(FloatVectorIndividual)parents[i];    }  }  return n;}  }
class C{  protected AbstractRed(CachableRed src,Rectangle bounds,ColorModel cm,SampleModel sm,int tileGridXOff,int tileGridYOff,Map props){  init(src,bounds,cm,sm,tileGridXOff,tileGridYOff,props);}  }
class C{  private int yearToEpochMonth(int year){  return (year * 12) - hijrahStartEpochMonth;}  }
class C{  public Element store(Object o){  ProgrammerConfigPane p=(ProgrammerConfigPane)o;  Element programmer=new Element("programmer");  if (p.getSelectedItem() != null) {    programmer.setAttribute("defaultFile",p.getSelectedItem());  }  programmer.setAttribute("verifyBeforeWrite","no");  if (!p.getShowEmptyTabs()) {    programmer.setAttribute("showEmptyPanes","no");  }  if (p.getShowCvNums()) {    programmer.setAttribute("showCvNumbers","yes");  }  programmer.setAttribute("class",this.getClass().getName());  return programmer;}  }
class C{  public DocumentAnalysisRequest addDocument(SolrInputDocument doc){  documents.add(doc);  return this;}  }
class C{  @Override public boolean parseLine(String line){  return parseLine(pattern,RFC3164_HEADER_TIMESTAMP_GROUP,RFC3164_HEADER_HOSTNAME_GROUP,0,0,MSG_GROUP,line);}  }
class C{  public Deathplace(String text){  super(text);}  }
class C{  protected void reflectionAppendArrayDetail(StringBuffer buffer,String fieldName,Object array){  buffer.append(arrayStart);  int length=Array.getLength(array);  for (int i=0; i < length; i++) {    Object item=Array.get(array,i);    if (i > 0) {      buffer.append(arraySeparator);    }    if (item == null) {      appendNullText(buffer,fieldName);    } else {      appendInternal(buffer,fieldName,item,arrayContentDetail);    }  }  buffer.append(arrayEnd);}  }
class C{  public static long sumToLong(int[] array){  long sum=0;  for (  int x : array) {    sum+=x;  }  return sum;}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length != 1) {    usage();    return;  }  try (BufferedReader reader=new BufferedReader(new FileReader(args[0]))){    reader.mark(READ_AHEAD_LIMIT);    collectInFourPasses(reader);    reader.reset();    collectInOnePass(reader);  } catch (  FileNotFoundException e) {    usage();    System.err.println(e);  }}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);}  }
class C{  protected boolean isInsertModeToggled(){  return fToggleEating;}  }
class C{  public int prestartAllCoreThreads(){  int n=0;  while (addWorker(null,true))   ++n;  return n;}  }
class C{  public void addOperator(Variation operator){  operators.add(operator);}  }
class C{  public Map<Integer,Double> compute(double... dataset){  return computeInPlace(dataset.clone());}  }
class C{  public void end(){  if (runningCCScene_ != null) {    runningCCScene_.onExit();    runningCCScene_.cleanup();    runningCCScene_=null;  }  nextCCScene_=null;  CCScenesStack_.clear();  CCTouchDispatcher.sharedDispatcher().removeAllDelegates();  CCSpriteFrameCache.purgeSharedSpriteFrameCache();  CCTextureCache.purgeSharedTextureCache();}  }
class C{  public WrapLayout(int align){  super(align);}  }
class C{  private void pull() throws IOException {  if (inFlight.size() >= MAX_IN_FLIGHT) {    return;  }  long requestTimeMsSinceEpoch=now();  long deadlineMsSinceEpoch=requestTimeMsSinceEpoch + ackTimeoutMs;  Collection<PubsubClient.IncomingMessage> receivedMessages=pubsubClient.pull(requestTimeMsSinceEpoch,outer.outer.subscription,PULL_BATCH_SIZE,true);  if (receivedMessages.isEmpty()) {    return;  }  lastReceivedMsSinceEpoch=requestTimeMsSinceEpoch;  for (  PubsubClient.IncomingMessage incomingMessage : receivedMessages) {    notYetRead.add(incomingMessage);    notYetReadBytes+=incomingMessage.elementBytes.length;    inFlight.put(incomingMessage.ackId,new InFlightState(requestTimeMsSinceEpoch,deadlineMsSinceEpoch));    numReceived++;    numReceivedRecently.add(requestTimeMsSinceEpoch,1L);    minReceivedTimestampMsSinceEpoch.add(requestTimeMsSinceEpoch,incomingMessage.timestampMsSinceEpoch);    maxReceivedTimestampMsSinceEpoch.add(requestTimeMsSinceEpoch,incomingMessage.timestampMsSinceEpoch);    minUnreadTimestampMsSinceEpoch.add(requestTimeMsSinceEpoch,incomingMessage.timestampMsSinceEpoch);  }}  }
class C{  protected void addEventListeners(Document doc){  AbstractNode n=(AbstractNode)doc;  XBLEventSupport es=(XBLEventSupport)n.initializeEventSupport();  mouseclickListener=new MouseClickTracker();  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"click",mouseclickListener,true);  mouseoverListener=new MouseOverTracker();  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseover",mouseoverListener,true);  mouseoutListener=new MouseOutTracker();  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseout",mouseoutListener,true);  domFocusInListener=new DOMFocusInTracker();  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusIn",domFocusInListener,true);  domFocusOutListener=new DOMFocusOutTracker();  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusOut",domFocusOutListener,true);}  }
class C{  public static ClassNode lowestUpperBound(ClassNode a,ClassNode b){  ClassNode lub=lowestUpperBound(a,b,null,null);  if (lub == null || !lub.isUsingGenerics())   return lub;  if (lub instanceof LowestUpperBoundClassNode) {    ClassNode superClass=lub.getSuperClass();    ClassNode psc=superClass.isUsingGenerics() ? parameterizeLowestUpperBound(superClass,a,b,lub) : superClass;    ClassNode[] interfaces=lub.getInterfaces();    ClassNode[] pinterfaces=new ClassNode[interfaces.length];    for (int i=0, interfacesLength=interfaces.length; i < interfacesLength; i++) {      final ClassNode icn=interfaces[i];      if (icn.isUsingGenerics()) {        pinterfaces[i]=parameterizeLowestUpperBound(icn,a,b,lub);      } else {        pinterfaces[i]=icn;      }    }    return new LowestUpperBoundClassNode(((LowestUpperBoundClassNode)lub).name,psc,pinterfaces);  } else {    return parameterizeLowestUpperBound(lub,a,b,lub);  }}  }
class C{  @After public void tearDown() throws Exception {}  }
class C{  public void createPictScenario08() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-30 10:00:00"));  String supplierAdminId="Pict08Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict08SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),2);  String customerAdminId="Pict08DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict08DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-06-30 00:00:00"),DateTimeHandling.calculateMillis("2013-08-30 00:00:00"));  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalService);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT_TEST_08",TestService.EXAMPLE2,TestPriceModel.FREE,technicalService,supplierMarketplace);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_08",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-10 00:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-11 02:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-12 02:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-13 00:00:00"));  subDetails=subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOServiceDetails proRataService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT08_RATA_WEEK_SERVICE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT08_RATA_WEEK,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceDetails,proRataService);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-14 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,proRataService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_08",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_08",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_08",customer);}  }
class C{  public static void writeHttpResponse(OutputStream out,String contentType,byte[] response) throws IOException {  OutputStreamWriter osw=new OutputStreamWriter(out);  writeHttpResponseHeader(osw,contentType,response.length);  osw.flush();  out.write(response,0,response.length);  osw.flush();}  }
class C{  public void testFollowerSetsTermOnVoteRequest() throws Throwable {  runOnServer(null);}  }
class C{  public double incrementCount(E key,double increment){  double newVal=getCount(key) + increment;  setCount(key,newVal);  dirty=true;  return newVal;}  }
class C{  public static double mean(){  return 1;}  }
class C{  public State_ createState_(){  State_Impl state_=new State_Impl();  return state_;}  }
class C{  public static boolean createFile(String fileName){  return FilePath.get(fileName).createFile();}  }
class C{  public static TypeReference newTypeReference(int sort){  return new TypeReference(sort << 24);}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  private void heapifyDown(int cur,Object val){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    int best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best < twoheap[right]) {      bestchild=right;      best=twoheap[right];    }    if (cur >= best) {      break;    }    twoheap[twopos]=best;    twovals[twopos]=twovals[bestchild];    twopos=bestchild;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  public void updateNull(String columnName) throws SQLException {  checkUpdatable();  getField(columnName).setNull();}  }
class C{  public void eigenvalueDecomposition(double[][] V,double[] d) throws Exception {  if (!this.isSymmetric()) {    throw new Exception("EigenvalueDecomposition: Matrix must be symmetric.");  }  weka.core.matrix.EigenvalueDecomposition eig=m_Matrix.eig();  weka.core.matrix.Matrix v=eig.getV();  double[] d2=eig.getRealEigenvalues();  int nr=numRows();  int nc=numColumns();  for (int i=0; i < nr; i++) {    for (int j=0; j < nc; j++) {      V[i][j]=v.get(i,j);    }  }  for (int i=0; i < d2.length; i++) {    d[i]=d2[i];  }}  }
class C{  private void assertSectionEquals(QueryResponse distrib,QueryResponse nonDistrib,String section){  assertEquals(section + " debug should be equal",distrib.getDebugMap().get(section),nonDistrib.getDebugMap().get(section));}  }
class C{  public Years dividedBy(int divisor){  if (divisor == 1) {    return this;  }  return Years.years(getValue() / divisor);}  }
class C{  public Date(int month,int day,int year){  if (!isValid(month,day,year))   throw new IllegalArgumentException("Invalid date");  this.month=month;  this.day=day;  this.year=year;}  }
class C{  public boolean projected(){  return _southWest.isProjected();}  }
class C{  public List<ShoppingCartItem> findAllCartItems(String productId,String groupNumber){  if (productId == null)   return this.items();  List<ShoppingCartItem> itemsToReturn=FastList.newInstance();  for (  ShoppingCartItem cartItem : cartLines) {    if (UtilValidate.isNotEmpty(groupNumber) && !cartItem.isInItemGroup(groupNumber)) {      continue;    }    if (productId.equals(cartItem.getProductId())) {      itemsToReturn.add(cartItem);    }  }  return itemsToReturn;}  }
class C{  public static Class<?> resolveClassName(String className,ClassLoader classLoader) throws IllegalArgumentException {  try {    return forName(className,classLoader);  } catch (  ClassNotFoundException ex) {    throw new IllegalArgumentException("Cannot find class [" + className + "]",ex);  }catch (  LinkageError ex) {    throw new IllegalArgumentException("Error loading class [" + className + "]: problem with class file or dependent class.",ex);  }}  }
class C{  private double distance(Instance first,Instance second){  double distance=0;  int firstI, secondI;  for (int p1=0, p2=0; p1 < first.numValues() || p2 < second.numValues(); ) {    if (p1 >= first.numValues()) {      firstI=m_trainInstances.numAttributes();    } else {      firstI=first.index(p1);    }    if (p2 >= second.numValues()) {      secondI=m_trainInstances.numAttributes();    } else {      secondI=second.index(p2);    }    if (firstI == m_trainInstances.classIndex()) {      p1++;      continue;    }    if (secondI == m_trainInstances.classIndex()) {      p2++;      continue;    }    double diff;    if (firstI == secondI) {      diff=difference(firstI,first.valueSparse(p1),second.valueSparse(p2));      p1++;      p2++;    } else     if (firstI > secondI) {      diff=difference(secondI,0,second.valueSparse(p2));      p2++;    } else {      diff=difference(firstI,first.valueSparse(p1),0);      p1++;    }    distance+=diff;  }  return distance;}  }
class C{  public boolean deleteFilesSafely(){  return Utils.deleteDirectorySafely(Paths.get(getPath()),getDataSource());}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3),entryOf(k4,v4),entryOf(k5,v5));}  }
class C{  public static boolean intersectRaySphere(Vector3fc origin,Vector3fc dir,Vector3fc center,float radiusSquared,Vector2f result){  return intersectRaySphere(origin.x(),origin.y(),origin.z(),dir.x(),dir.y(),dir.z(),center.x(),center.y(),center.z(),radiusSquared,result);}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {  if (dtdHandler != null) {    dtdHandler.notationDecl(name,publicId,systemId);  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  static void resizeIconDrawable(Drawable icon){  icon.setBounds(0,0,sIconWidth,sIconHeight);}  }
class C{  public void commentPrintLn(){  comment.append(NEWLINE);}  }
class C{  public void checkLogicalRouterPortExistence(String id,FutureCallback<Boolean> responseCallback) throws IOException {  checkExistenceAsync(LOGICAL_ROUTER_PORTS_BASE_PATH + "/" + id,responseCallback);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HideFile'";  db.execSQL(sql);}  }
class C{  public T caseIntLiteral(IntLiteral object){  return null;}  }
class C{  private void processFilesystemList(List<Object> filesystemList,Map<String,Object> keyMap) throws VNXFilePluginException {  String fsName=(String)keyMap.get(VNXFileConstants.FILESYSTEM_NAME);  String fsId=(String)keyMap.get(VNXFileConstants.FILESYSTEM_ID);  boolean foundId=false;  Iterator<Object> iterator=filesystemList.iterator();  if (iterator.hasNext()) {    Status status=(Status)iterator.next();    if (status.getMaxSeverity() == Severity.OK) {      while (iterator.hasNext()) {        FileSystem fileSystem=(FileSystem)iterator.next();        if (fileSystem.getName().equalsIgnoreCase(fsName) || fileSystem.getFileSystem().equals(fsId)) {          String id=fileSystem.getFileSystem();          _logger.info("Found matching file system: {}",id);          keyMap.put(VNXFileConstants.FILESYSTEM_ID,id);          keyMap.put(VNXFileConstants.FILESYSTEM,fileSystem);          keyMap.put(VNXFileConstants.IS_FILESYSTEM_AVAILABLE_ON_ARRAY,Boolean.TRUE);          foundId=true;          break;        }      }      if (!foundId) {        _logger.error("Did not find file system ID for {}",fsName);        keyMap.put(VNXFileConstants.IS_FILESYSTEM_AVAILABLE_ON_ARRAY,Boolean.FALSE);      }    } else {      throw new VNXFilePluginException("Fault response received from XMLAPI Server.",VNXFilePluginException.ERRORCODE_INVALID_RESPONSE);    }  }}  }
class C{  public MTreeNode findNode(int ID){  if (m_node_ID == ID)   return this;  if (ID == m_lastID && m_lastNode != null)   return m_lastNode;  Enumeration en=preorderEnumeration();  while (en.hasMoreElements()) {    MTreeNode nd=(MTreeNode)en.nextElement();    if (ID == nd.getNode_ID()) {      m_lastID=ID;      m_lastNode=nd;      return nd;    }  }  return null;}  }
class C{  public Environment createEnvironment(Environment environment) throws JAXBException, IOException {  environment.setId(getRandomUUIDString());  Set<String> profileIds=new HashSet<>();  for (  Profile profile : existingProfiles.values()) {    if (profile.isDefaultProfile()) {      profileIds.add(profile.getId());    }  }  environment.setProfileIds(profileIds);  environment.setCreatedDate(new Date());  existingEnvironments.put(environment.getId(),environment);  saveEnvironment(environment);  return environment;}  }
class C{  protected void processProperty(DatabaseMapping mapping,PropertyMetadata property){  if (property.shouldOverride(m_properties.get(property.getName()))) {    m_properties.put(property.getName(),property);    mapping.addUnconvertedProperty(property.getName(),property.getValue(),getJavaClassName(property.getValueType()));  }}  }
class C{  public static ICUVersionRecord newInstance(){  final ICUVersionRecord r=new ICUVersionRecord(VersionInfo.ICU_VERSION,VersionInfo.UCOL_RUNTIME_VERSION,VersionInfo.UCOL_BUILDER_VERSION,VersionInfo.UCOL_TAILORINGS_VERSION);  return r;}  }
class C{  public static CarbonDimension findDimension(List<CarbonDimension> dimensions,String carbonDim){  CarbonDimension findDim=null;  for (  CarbonDimension dimension : dimensions) {    if (dimension.getColName().equalsIgnoreCase(carbonDim)) {      findDim=dimension;      break;    }  }  return findDim;}  }
class C{  public boolean paintRable(Graphics2D g2d){  Composite c=g2d.getComposite();  if (!SVGComposite.OVER.equals(c))   return false;  ColorSpace g2dCS=GraphicsUtil.getDestinationColorSpace(g2d);  if ((g2dCS == null) || (g2dCS != ColorSpace.getInstance(ColorSpace.CS_sRGB))) {    return false;  }  GraphicsNode gn=getGraphicsNode();  if (getUsePrimitivePaint()) {    gn.primitivePaint(g2d);  } else {    gn.paint(g2d);  }  return true;}  }
class C{  public void put(int index,Scriptable start,Object value){}  }
class C{  public Plane(float width,float height,int segmentsW,int segmentsH,Axis upAxis,boolean createTextureCoordinates,boolean createVertexColorBuffer,int numTextureTiles,boolean createVBOs){  super();  mWidth=width;  mHeight=height;  mSegmentsW=segmentsW;  mSegmentsH=segmentsH;  mUpAxis=upAxis;  mCreateTextureCoords=createTextureCoordinates;  mCreateVertexColorBuffer=createVertexColorBuffer;  mNumTextureTiles=numTextureTiles;  init(createVBOs);}  }
class C{  @Override protected void forceDeleteAttributeAt(int position){  double[] newValues=new double[m_AttValues.length - 1];  System.arraycopy(m_AttValues,0,newValues,0,position);  if (position < m_AttValues.length - 1) {    System.arraycopy(m_AttValues,position + 1,newValues,position,m_AttValues.length - (position + 1));  }  m_AttValues=newValues;}  }
class C{  public static <K,V>List<KeyValue<K,V>> readKeyValues(String topic,Properties consumerConfig){  return readKeyValues(topic,consumerConfig,UNLIMITED_MESSAGES);}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x5BAA5439,version=150) public int sceGeEdramSetSize(int size){  return 0;}  }
class C{  public final void checkAssert(final QuadConsumer<P,P2,P3,T> property){  check(null);}  }
class C{  public ObjectMatrix2D viewSlice(int slice){  checkSlice(slice);  int viewRows=this.rows;  int viewColumns=this.columns;  int viewRowZero=rowZero;  int viewColumnZero=columnZero;  int viewOffset=this.offset + _sliceOffset(_sliceRank(slice));  int viewRowStride=this.rowStride;  int viewColumnStride=this.columnStride;  int[] viewRowOffsets=this.rowOffsets;  int[] viewColumnOffsets=this.columnOffsets;  return new SelectedSparseObjectMatrix2D(viewRows,viewColumns,this.elements,viewRowZero,viewColumnZero,viewRowStride,viewColumnStride,viewRowOffsets,viewColumnOffsets,viewOffset);}  }
class C{  @Override public PollResult startPoll(PollController conn){  if (!_lifecycle.isActive()) {    log.warning(this + " select disabled");    return PollResult.CLOSED;  }  SocketBar socket=conn.getSocket();  if (socket == null) {    log.warning(this + " socket empty for " + conn);    return PollResult.CLOSED;  }  SelectableChannel selChannel=socket.selectableChannel();  if (selChannel == null) {    log.warning(this + " no channel for " + socket);    return PollResult.CLOSED;  }  _connectionCount.incrementAndGet();  _activeCount.incrementAndGet();  _registerQueue.offer(conn);  return PollResult.START;}  }
class C{  public void enterVehicle(DistAnalysisAgent a){  this.passengers.add(a);  this.totalPassengers++;  this.route.countPassenger();}  }
class C{  public void compileUniverse(){  ((UniverseManager)universe).makeLive();}  }
class C{  public static boolean isUsingGenericsOrIsArrayUsingGenerics(ClassNode cn){  if (cn.isArray()) {    return isUsingGenericsOrIsArrayUsingGenerics(cn.getComponentType());  }  return (cn.isUsingGenerics() && cn.getGenericsTypes() != null);}  }
class C{  public void receivedSenderReport(RtcpSenderReportPacket srp){  lastSenderReport=(((srp.ntptimestampmsw << 32) | srp.ntptimestamplsw) & 0x0000ffffffff0000L) >>> 16;}  }
class C{  public CodeAttribute(ConstPool cp,int stack,int locals,byte[] code,ExceptionTable etable){  super(cp,tag);  maxStack=stack;  maxLocals=locals;  info=code;  exceptions=etable;  attributes=new ArrayList();}  }
class C{  protected void clearError(){synchronized (lock) {    ioError=false;  }}  }
class C{  protected final void quit(){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.quit();}  }
class C{  public static strictfp float pow2_strict(final float a){  return a * a;}  }
class C{  public static String toString(final Object object,final ToStringStyle style){  return toString(object,style,false,false,null);}  }
class C{  Lexer(Compiler compiler,PrefixResolver resolver,XPathParser xpathProcessor){  m_compiler=compiler;  m_namespaceContext=resolver;  m_processor=xpathProcessor;}  }
class C{  public synchronized VisualGraph addGraph(String group,Graph graph,Predicate filter,Schema nodeSchema,Schema edgeSchema){  checkGroupExists(group);  String ngroup=PrefuseLib.getGroupName(group,Graph.NODES);  String egroup=PrefuseLib.getGroupName(group,Graph.EDGES);  VisualTable nt, et;  nt=addTable(ngroup,graph.getNodeTable(),filter,nodeSchema);  et=addTable(egroup,graph.getEdgeTable(),filter,edgeSchema);  VisualGraph vg=new VisualGraph(nt,et,graph.isDirected(),graph.getNodeKeyField(),graph.getEdgeSourceField(),graph.getEdgeTargetField());  vg.setVisualization(this);  vg.setGroup(group);  addDataGroup(group,vg,graph);  TupleManager ntm=new TupleManager(nt,vg,TableNodeItem.class);  TupleManager etm=new TupleManager(et,vg,TableEdgeItem.class);  nt.setTupleManager(ntm);  et.setTupleManager(etm);  vg.setTupleManagers(ntm,etm);  return vg;}  }
class C{  public boolean willNotMoveInCurrentCollection(ObjectReference object){  if (!VM.activePlan.constraints().movesObjects())   return true;  if (Space.isInSpace(Plan.LOS,object))   return true;  if (Space.isInSpace(Plan.IMMORTAL,object))   return true;  if (Space.isInSpace(Plan.VM_SPACE,object))   return true;  if (Space.isInSpace(Plan.NON_MOVING,object))   return true;  if (Plan.USE_CODE_SPACE && Space.isInSpace(Plan.SMALL_CODE,object))   return true;  if (Plan.USE_CODE_SPACE && Space.isInSpace(Plan.LARGE_CODE,object))   return true;  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(false,"willNotMove not defined properly in subclass");  return false;}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public static long lastModifiedAsLong(String strTime) throws IOException {  final SimpleDateFormat simpleDateFormat=new SimpleDateFormat(TIME_PATTERN);  try {    long lastModified=simpleDateFormat.parse(strTime).getTime();    if (lastModified == 0) {      lastModified=System.currentTimeMillis();    }    return lastModified;  } catch (  ParseException e) {    throw new IOException("Failed to parse " + strTime,e);  }}  }
class C{  private static void copyReferenceFieldToBootImage(Address fieldLocation,Object referencedObject,Object parentObject,boolean objField,boolean root,String rvmFieldName,TypeReference rvmFieldType) throws IllegalAccessException {  if (referencedObject == null) {    bootImage.setNullAddressWord(fieldLocation,objField,root,true);  } else {    BootImageMap.Entry mapEntry=BootImageMap.findOrCreateEntry(referencedObject);    if (mapEntry.imageAddress.EQ(OBJECT_NOT_PRESENT)) {      if (rvmFieldName == null || !copyKnownInstanceField(parentObject,rvmFieldName,rvmFieldType,fieldLocation)) {        if (verbosity.isAtLeast(DETAILED))         traceContext.traceObjectNotInBootImage();        bootImage.setNullAddressWord(fieldLocation,objField,root,false);      }    } else     if (mapEntry.imageAddress.EQ(OBJECT_NOT_ALLOCATED)) {      Address imageAddress;      if (true) {        mapEntry.addLinkingAddress(fieldLocation,objField,root,rvmFieldName,rvmFieldType,parentObject);        if (!mapEntry.isPendingEntry()) {          mapEntry.setPendingEntry();          pendingEntries.add(mapEntry);        }        imageAddress=OBJECT_ALLOCATION_DEFERRED;        root=false;      } else {        mapEntry.imageAddress=copyToBootImage(referencedObject,false,Address.max(),parentObject,false,AlignmentEncoding.ALIGN_CODE_NONE);        imageAddress=mapEntry.imageAddress;      }      if (imageAddress.EQ(OBJECT_NOT_PRESENT)) {        if (verbosity.isAtLeast(DETAILED))         traceContext.traceObjectNotInBootImage();        if (!copyKnownInstanceField(parentObject,rvmFieldName,rvmFieldType,fieldLocation)) {          if (verbosity.isAtLeast(DETAILED))           traceContext.traceObjectNotInBootImage();          bootImage.setNullAddressWord(fieldLocation,objField,root,false);        }      } else {        bootImage.setAddressWord(fieldLocation,imageAddress.toWord(),objField,root);      }    } else {      bootImage.setAddressWord(fieldLocation,mapEntry.imageAddress.toWord(),objField,root);    }  }}  }
class C{  public AttributeConverter<?> removeAttributeConverter(final Class<?> clazz){  return this.converters.remove(clazz.getCanonicalName());}  }
class C{  @Override public void menuSelectionChanged(boolean isIncluded){  super.menuSelectionChanged(isIncluded);  ActionMenu.showDescriptionInStatusBar(isIncluded,this,myPresentation.getDescription());}  }
class C{  public boolean hasAntiAlias(){  return mBitmapState.mPaint.isAntiAlias();}  }
class C{  public void dismissNoBluetoothNotification(Context context){  if (MurmurService.CONSOLIDATE_ERRORS) {    ServiceWatchDog.getInstance().notifyHardwareStateChanged();    return;  }  int notificationId=R.string.notification_no_bluetooth_message;  NotificationManager mNotificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  mNotificationManager.cancel(notificationId);}  }
class C{  public static Number leftShift(Number self,Number operand){  return NumberMath.leftShift(self,operand);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof RC5ParameterSpec)) {    return false;  }  RC5ParameterSpec other=(RC5ParameterSpec)obj;  return ((version == other.version) && (rounds == other.rounds) && (wordSize == other.wordSize)&& java.util.Arrays.equals(iv,other.iv));}  }
class C{  @ObjectiveCName("sendPhotoWithPeer:withName:withW:withH:withThumb:withDescriptor:") public void sendPhoto(@NotNull Peer peer,@NotNull String fileName,int w,int h,@Nullable FastThumb fastThumb,@NotNull String descriptor){  modules.getMessagesModule().sendPhoto(peer,fileName,w,h,fastThumb,descriptor);}  }
class C{  public void loadDatasetJson(String jsonDataset){  Gson gson=new GsonBuilder().disableHtmlEscaping().create();  ;  this.dataset=gson.fromJson(jsonDataset,DataSet.class);  this.update();}  }
class C{  public boolean is7ZipEnabled(){  return enable7Zip;}  }
class C{  private TraceType(String description){  this.description=description;}  }
class C{  static boolean hasKeyword(ObjectIdentifier oid,int standard){  AVAKeyword ak=oidMap.get(oid);  if (ak == null) {    return false;  }  return ak.isCompliant(standard);}  }
class C{  public void add(Resource s,URI p,Value o,Resource c){  add(s,p,o,c,StatementEnum.Explicit);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private <T extends DataObject>void readXMLAndPersist(String fileName,DbCliOperation operation) throws Exception {  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=dbf.newDocumentBuilder();  Document doc=builder.parse(fileName);  Element root=doc.getDocumentElement();  Element dataObjectNode=(Element)root.getElementsByTagName("data_object_schema").item(0);  String cfName=dataObjectNode.getAttribute("name");  System.out.println("Column Family based on XML: " + cfName);  NodeList recordNodes=dataObjectNode.getElementsByTagName("record");  Class<T> clazz=_cfMap.get(cfName);  if (clazz == null) {    System.out.println("Unknown Column Family: " + cfName);    return;  }  BeanInfo bInfo;  try {    bInfo=Introspector.getBeanInfo(clazz);  } catch (  IntrospectionException ex) {    throw new RuntimeException("Unexpected exception getting bean info",ex);  }  PropertyDescriptor[] pds=bInfo.getPropertyDescriptors();  InputStream xmlIs=new FileInputStream(new File(fileName));  Document docForPosition=PositionalXMLReader.readXML(xmlIs);  xmlIs.close();  for (int i=0; i < recordNodes.getLength(); i++) {    Element record=(Element)recordNodes.item(i);    T object=null;    String idStr=null;    if (operation == DbCliOperation.LOAD) {      String recordId=record.getAttribute("id");      System.out.println(String.format("Object id:\t%s",recordId));      idStr=recordId;      object=queryObject(URI.create(recordId),clazz);    } else     if (operation == DbCliOperation.CREATE) {      URI id=URIUtil.createId(clazz);      object=clazz.newInstance();      object.setId(id);      System.out.println(String.format("Create new data object id:\t%s",object.getId()));      idStr=object.getId().toString();    }    HashMap<String,String> fieldValueMap=new HashMap<String,String>();    HashMap<String,Class> fieldTypeMap=new HashMap<String,Class>();    HashMap<String,String> fieldLocationMap=new HashMap<String,String>();    HashMap<String,Node> fieldNodeMap=new HashMap<String,Node>();    NodeList fields=record.getElementsByTagName("field");    for (int j=0; j < fields.getLength(); j++) {      Element field=(Element)fields.item(j);      if (DEBUG) {        System.out.println(field.getAttribute("name") + "\t" + field.getAttribute("type")+ "\t"+ field.getAttribute("value"));      }      fieldValueMap.put(field.getAttribute("name"),field.getAttribute("value"));      fieldTypeMap.put(field.getAttribute("name"),Class.forName(field.getAttribute("type")));      fieldLocationMap.put(field.getAttribute("name"),((Element)docForPosition.getElementsByTagName("record").item(i)).getElementsByTagName("field").item(j).getUserData("lineNumber").toString());      if (field.getElementsByTagName("wrapper").item(0) != null) {        fieldNodeMap.put(field.getAttribute("name"),field.getElementsByTagName("wrapper").item(0));      }    }    Iterator locationIt=fieldLocationMap.entrySet().iterator();    while (locationIt.hasNext()) {      Entry entry=(Entry)locationIt.next();      String key=(String)entry.getKey();      String value=(String)entry.getValue();      if (DEBUG) {        System.out.println("key:\t" + key + "\tvalue\t"+ value);      }    }    for (    PropertyDescriptor pd : pds) {      if (pd.getName().equals("class") || pd.getName().equals("id")) {        continue;      }      Name name=pd.getReadMethod().getAnnotation(Name.class);      if (name == null) {        log.info("Ignore data object fields without @Name annotation, fieldName={}.",pd.getName());        continue;      }      String objKey=name.value();      String fieldValue=fieldValueMap.get(objKey);      if (fieldValue == null) {        objKey=pd.getName();      }      fieldValue=fieldValueMap.get(objKey);      Class fieldClass=fieldTypeMap.get(objKey);      String fieldLocation=fieldLocationMap.get(objKey);      Node fieldNode=fieldNodeMap.get(objKey);      if (fieldValue != null) {        Class type=pd.getPropertyType();        if (DEBUG) {          System.out.print("\t" + objKey + " = "+ type);        }        try {          if (type == URI.class) {            pd.getWriteMethod().invoke(object,URI.create(fieldValue));          } else           if (type == NamedURI.class) {            pd.getWriteMethod().invoke(object,NamedURI.fromString(fieldValue));          } else           if (type == Date.class) {          } else           if (type == Calendar.class) {            Calendar calendar=FieldType.toCalendar(fieldValue);            if (!verifyField(calendar)) {              throw new Exception("field format exception");            }            pd.getWriteMethod().invoke(object,calendar);          } else           if (type == StringMap.class) {            StringMap newStringMap=FieldType.convertType(fieldNode,StringMapWrapper.class);            if (!verifyField(newStringMap)) {              throw new Exception("field format exception");            }            StringMap sMap=(StringMap)pd.getReadMethod().invoke(object);            if (sMap == null) {              sMap=new StringMap();            }            sMap.clear();            Set<String> keys=newStringMap.keySet();            for (            String key : keys) {              sMap.put(key,newStringMap.get(key));            }          } else           if (type == StringSet.class) {            StringSet stringSet=FieldType.convertType(fieldNode,StringSetWrapper.class);            if (!verifyField(stringSet)) {              throw new Exception("field format exception");            }            StringSet updateSet=(StringSet)pd.getReadMethod().invoke(object);            if (updateSet != null) {              updateSet.clear();              updateSet.addAll(stringSet);            } else {              pd.getWriteMethod().invoke(object,stringSet);            }          } else           if (type == OpStatusMap.class) {            OpStatusMap opStatusMap=FieldType.convertType(fieldNode,OpStatusMapWrapper.class);            if (!verifyField(opStatusMap)) {              throw new Exception("field format exception");            }          } else           if (type == StringSetMap.class) {            StringSetMap newSetMap=FieldType.convertType(fieldNode,StringSetMapWrapper.class);            if (!verifyField(newSetMap)) {              throw new Exception("field format exception");            }            StringSetMap sMap=(StringSetMap)pd.getReadMethod().invoke(object);            if (sMap == null) {              sMap=new StringSetMap();            }            Set<String> keys=sMap.keySet();            for (            String key : keys) {              sMap.remove(key);            }            keys=newSetMap.keySet();            for (            String key : keys) {              sMap.put(key,newSetMap.get(key));            }          } else           if (type == FSExportMap.class) {            FSExportMap fSExportMap=FieldType.convertType(fieldNode,FSExportMapWrapper.class);            if (!verifyField(fSExportMap)) {              throw new Exception("field format exception");            }            pd.getWriteMethod().invoke(object,fSExportMap);          } else           if (type == SMBShareMap.class) {            SMBShareMap sMBShareMap=FieldType.convertType(fieldNode,SMBShareMapWrapper.class);            if (!verifyField(sMBShareMap)) {              throw new Exception("field format exception");            }            pd.getWriteMethod().invoke(object,sMBShareMap);          } else           if (type == ScopedLabelSet.class) {            ScopedLabelSet scopedLabelSet=FieldType.convertType(fieldNode,ScopedLabelSetWrapper.class);            if (!verifyField(scopedLabelSet)) {              throw new Exception("field format exception");            }          } else           if (type == String.class) {            pd.getWriteMethod().invoke(object,fieldClass.cast(fieldValue));          } else           if (type.isEnum()) {            Object enumTypeObject=null;            try {              enumTypeObject=Enum.valueOf(type,fieldValue);            } catch (            Exception e) {              throw new Exception("field format exception");            }            pd.getWriteMethod().invoke(object,enumTypeObject);          } else           if (type == Integer.class) {            Integer intNum=FieldType.toInteger(fieldValue);            if (!verifyField(intNum)) {              throw new Exception("field format exception");            }            pd.getWriteMethod().invoke(object,intNum);          } else           if (type == Boolean.class) {            Boolean boolVal=FieldType.toBoolean(fieldValue);            if (!verifyField(boolVal)) {              throw new Exception("field format exception");            }            pd.getWriteMethod().invoke(object,boolVal);          } else           if (type == Long.class) {            Long longNum=FieldType.toLong(fieldValue);            if (!verifyField(longNum)) {              throw new Exception("field format exception");            }            pd.getWriteMethod().invoke(object,longNum);          } else           if (type == Double.class) {            Double doubleNum=FieldType.toDouble(fieldValue);            if (!verifyField(doubleNum)) {              throw new Exception("field format exception");            }            pd.getWriteMethod().invoke(object,doubleNum);          } else {            pd.getWriteMethod().invoke(object,fieldValue);          }        } catch (        Exception e) {          System.out.println(String.format("Exception in getting field:%s in xml file line:%s.",pd.getName(),fieldLocation));          log.error("Exception in getting field value in xml file line:{}.",fieldLocation,e);          throw new Exception(String.format("Exception in getting field value in line:%s.",fieldLocation));        }        if (DEBUG) {          Object fieldValue1=pd.getReadMethod().invoke(object);          System.out.println("write " + fieldValue1 + "\ttype: "+ type+ " success");        }      }    }    if (operation == DbCliOperation.CREATE) {      _dbClient.createObject(object);    } else     if (operation == DbCliOperation.LOAD) {      _dbClient.persistObject(object);    }    log.info(String.format("Successfully update Column family:%s, \tdata object id:%s \tinto Cassandra, based on xml file %s",cfName,idStr,fileName));  }}  }
class C{  private void computeThreshold(){  threshold=(int)(elementData.length * loadFactor);}  }
class C{  public ParcelFileDescriptor executeForBlobFileDescriptor(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return null;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    return mConnection.executeForBlobFileDescriptor(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  public BufferedImage JPEGToRGBImage(final byte[] data,final int w,final int h,final int pX,final int pY){  if (decodeParms != null && decodeParms.getInt(PdfDictionary.ColorTransform) == 1 && this.value != ColorSpaces.DeviceGray) {    return JPEGDecoder.JPEGToRGBImageFromLUV(data,pX,pY);  }  BufferedImage image;  try {    image=DefaultImageHelper.read(data);    if (image != null && !fasterPNG) {      if (value != ColorSpaces.DeviceGray) {        image=cleanupImage(image,pX,pY);      }      if (value != ColorSpaces.DeviceGray) {        image=ColorSpaceConvertor.convertToRGB(image);      }    }  } catch (  final Exception ee) {    image=null;    LogWriter.writeLog("Problem reading JPEG: " + ee);  }  if (image == null) {    image=JPEGDecoder.JPEGToRGBImageFromLUV(data,pX,pY);  }  return image;}  }
class C{  @Override public String toString(){  return getClassName() + "#" + getTestName();}  }
class C{  public static void w(String tag,String msg,Throwable tr){  println(WARN,tag,msg,tr);}  }
class C{  public ObjectLabel addLabelToObject(String targetID,String label) throws Exception {  InputStream responseStream=null;  ObjectLabel objectLabel=null;  Map<String,Object> attributeMap=new HashMap<String,Object>();  Add addOp=new Add(HDSConstants.OBJECTLABEL);  addOp.setOverwrite(Boolean.TRUE);  attributeMap.put(HDSConstants.ADD,addOp);  ObjectLabel objectLabelReq=new ObjectLabel(targetID,label);  attributeMap.put(HDSConstants.OBJECTLABEL,objectLabelReq);  String addLabelToObject=InputXMLGenerationClient.getInputXMLString(HDSConstants.ADD_LABEL_TO_OBJECT_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);  URI endpointURI=hdsApiClient.getBaseURI();  log.info("Add Label to Object payload :{}",addLabelToObject);  ClientResponse response=hdsApiClient.post(endpointURI,addLabelToObject);  if (HttpStatus.SC_OK == response.getStatus()) {    responseStream=response.getEntityInputStream();    JavaResult result=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);    verifyErrorPayload(result);    objectLabel=result.getBean(ObjectLabel.class);  } else {    log.error("Add label to Object failed with invalid response code {}",response.getStatus());    throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to Add Label to object due to invalid response %1$s from server",response.getStatus()));  }  return objectLabel;}  }
class C{  public Link(String text){  setDisplayText(text);}  }
class C{  public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize,ThreadFactory threadFactory){  return new ScheduledThreadPoolExecutor(corePoolSize,threadFactory);}  }
class C{  public void addInvokespecial(CtClass clazz,String name,CtClass returnType,CtClass[] paramTypes){  String desc=Descriptor.ofMethod(returnType,paramTypes);  addInvokespecial(clazz,name,desc);}  }
class C{  public static void fixTabKeys(final JComponent component){  final Set<AWTKeyStroke> forward=new HashSet<AWTKeyStroke>(component.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));  forward.add(KeyStroke.getKeyStroke("TAB"));  component.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,forward);  final Set<AWTKeyStroke> backward=new HashSet<AWTKeyStroke>(component.getFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS));  backward.add(KeyStroke.getKeyStroke("shift TAB"));  component.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,backward);}  }
class C{  public LuceneConditionBuilder defaultField(String defaultField){  this.defaultField=defaultField;  return this;}  }
class C{  public Phaser(){  this(null,0);}  }
class C{  public Block split(final Line line){  final Block block=new Block();  block.lines=this.lines;  block.lineTail=line;  this.lines=line.next;  line.next=null;  if (this.lines == null) {    this.lineTail=null;  } else {    this.lines.previous=null;  }  if (this.blocks == null) {    this.blocks=this.blockTail=block;  } else {    this.blockTail.next=block;    this.blockTail=block;  }  return block;}  }
class C{  public int lastIndexOf(String subString,int start){  int subCount=subString.length();  if (subCount <= count && start >= 0) {    if (subCount > 0) {      if (start > count - subCount) {        start=count - subCount;      }      char firstChar=subString.charAt(0);      while (true) {        int i=start;        boolean found=false;        for (; i >= 0; --i) {          if (value[i] == firstChar) {            found=true;            break;          }        }        if (!found) {          return -1;        }        int o1=i, o2=0;        while (++o2 < subCount && value[++o1] == subString.charAt(o2)) {        }        if (o2 == subCount) {          return i;        }        start=i - 1;      }    }    return start < count ? start : count;  }  return -1;}  }
class C{  public void reset(){  min=Double.POSITIVE_INFINITY;  max=Double.NEGATIVE_INFINITY;}  }
class C{  public int compareToIgnoreCase(XMLString xstr){  int len1=m_length;  int len2=xstr.length();  int n=Math.min(len1,len2);  FastStringBuffer fsb=fsb();  int i=m_start;  int j=0;  while (n-- != 0) {    char c1=Character.toLowerCase(fsb.charAt(i));    char c2=Character.toLowerCase(xstr.charAt(j));    if (c1 != c2) {      return c1 - c2;    }    i++;    j++;  }  return len1 - len2;}  }
class C{  public AtlasMessageComposer onActivityResult(Activity activity,int requestCode,int resultCode,Intent data){  for (  AttachmentSender sender : mAttachmentSenders) {    sender.onActivityResult(activity,requestCode,resultCode,data);  }  return this;}  }
class C{  public void addRequestHeader(String key,String value){  if (userHeaders == null) {    userHeaders=new Hashtable();  }  if (key.equalsIgnoreCase("content-type")) {    setContentType(value);  } else {    userHeaders.put(key,value);  }}  }
class C{  public void traverse(int pos) throws org.xml.sax.SAXException {  m_dtm=m_transformer.getXPathContext().getDTM(pos);  m_startNode=pos;  super.traverse(pos);}  }
class C{  public TreeMap<Float,List<List<Integer>>> packFirstFit(){  return packFirstFit(_items,_itemWeights);}  }
class C{  public NQueensBoard(int size,Config config){  this(size);  if (config == Config.QUEENS_IN_FIRST_ROW) {    for (int i=0; i < size; i++)     addQueenAt(new XYLocation(i,0));  } else   if (config == Config.QUEEN_IN_EVERY_COL) {    Random r=new Random();    for (int i=0; i < size; i++)     addQueenAt(new XYLocation(i,r.nextInt(size)));  }}  }
class C{  private void searchAndLoad(EntryEventImpl event,TXStateInterface txState,Object localValue) throws CacheLoaderException, TimeoutException {  RegionAttributes attrs=region.getAttributes();  Scope scope=attrs.getScope();  DataPolicy dataPolicy=attrs.getDataPolicy();  if (txState != null) {    TXEntryState tx=txState.txReadEntry(event.getKeyInfo(),region,false,true);    if (tx != null) {      if (tx.noValueInSystem()) {        load(event);        return;      }    }  }{    if (localValue == Token.INVALID || dataPolicy.withReplication()) {      load(event);      return;    }  }  Object obj=null;  if (!scope.isGlobal()) {    CacheLoader loader=((AbstractRegion)region).basicGetLoader();    if (loader != null) {      obj=doLocalLoad(loader,true);      Assert.assertTrue(obj != Token.INVALID && obj != Token.LOCAL_INVALID);      event.setNewValue(obj);      this.isSerialized=false;      this.result=obj;      return;    }    if (scope.isLocal()) {      return;    }  }  netSearchForBlob();  if (this.result != null) {    Assert.assertTrue(this.result != Token.INVALID && this.result != Token.LOCAL_INVALID);    if (this.isSerialized) {      event.setSerializedNewValue((byte[])this.result);    } else {      event.setNewValue(this.result);    }    event.setVersionTag(this.versionTag);    return;  }  load(event);}  }
class C{  public NSObject parse() throws ParseException {  index=0;  if (data.length >= 3 && (data[0] & 0xFF) == 0xEF && (data[1] & 0xFF) == 0xBB && (data[2] & 0xFF) == 0xBF)   skip(3);  skipWhitespacesAndComments();  expect(DICTIONARY_BEGIN_TOKEN,ARRAY_BEGIN_TOKEN,COMMENT_BEGIN_TOKEN);  try {    return parseObject();  } catch (  ArrayIndexOutOfBoundsException ex) {    throw new ParseException("Reached end of input unexpectedly.",index);  }}  }
class C{  public static void checkFieldValueFromEnum(final String value,final String fieldName,final EnumSet<?> expected){  for (  Enum<?> e : expected) {    if (e.name().equals(value)) {      return;    }  }  throw APIException.badRequests.invalidParameterValueWithExpected(fieldName,value,expected.toArray());}  }
class C{  public double norm(){  return Math.sqrt(x * x + y * y + z * z);}  }
class C{  public FaultyRequestContentType(){  requestFileName="getstate.query";  requestContentType="blah";}  }
class C{  public HostStorageDomain addWWNToHostStorageDomain(String systemId,String hsdId,List<String> wwnList,String model) throws Exception {  InputStream responseStream=null;  HostStorageDomain hsd=null;  try {    String addWWNToHSDQuery=constructWWNQuery(systemId,hsdId,wwnList,model);    log.info("Query to add FC initiators to HostStorageDomain: {}",addWWNToHSDQuery);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,addWWNToHSDQuery);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      verifyErrorPayload(javaResult);      hsd=javaResult.getBean(HostStorageDomain.class);      if (null == hsd) {        throw HDSException.exceptions.notAbleToAddInitiatorToHostStorageDomain("FC",hsdId,systemId);      }    } else {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Add initiator to HostStorageDomain failed due to invalid response %1$s from server",response.getStatus()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  return hsd;}  }
class C{  public void addResponseTrailer(String key,String val){  if (rsptrailers == null)   rsptrailers=new MessageHeader();  rsptrailers.add(key,val);}  }
class C{  public synchronized boolean useExtensionTreeRoot(){  if (pluginInitClassName == null) {    return true;  }  if (useExtensionTreeRoot == null) {    boolean oldValue=this.classLoader.isIgnoreDependencyClassloaders();    this.classLoader.setIgnoreDependencyClassloaders(false);    try {      Class<?> pluginInitator=Class.forName(pluginInitClassName,false,getClassLoader());      Method initGuiMethod=pluginInitator.getMethod("useExtensionTreeRoot",new Class[]{});      useExtensionTreeRoot=(Boolean)initGuiMethod.invoke(null,new Object[]{});    } catch (    Throwable e) {      useExtensionTreeRoot=Boolean.TRUE;    }    this.classLoader.setIgnoreDependencyClassloaders(oldValue);  }  return useExtensionTreeRoot.booleanValue();}  }
class C{  protected void onDestroy(){  isCreated=false;}  }
class C{  public static void initOut(final String outputDir){  initOut(outputDir,null);}  }
class C{  public void checkBounds(){  tfLowBound.setEnabled(tsClipping.isSelected());  tfUpBound.setEnabled(tsClipping.isSelected());}  }
class C{  private synchronized void waitForPendingWritingTasks(){  boolean logged=false;  while (true) {    long activeTasks=getQueuedTaskCount();    if (activeTasks > 0) {      if (log.isDebugEnabled() && !logged) {        log.info("Storage: " + storageData + " is waiting for finalization. Still "+ activeTasks+ " queued tasks need to be processed.");        logged=true;      }      try {        Thread.sleep(FINALIZATION_TASKS_SLEEP_TIME);      } catch (      InterruptedException e) {        Thread.interrupted();      }    } else {      break;    }  }}  }
class C{  public static boolean isInternalRequest(HttpServletRequest req){  return ((req != null) && req.getRequestURI().contains(INTERNAL_URI));}  }
class C{  public static int hash(int seed,Object aObject){  int result=seed;  if (aObject == null) {    result=hash(result,0);  } else   if (aObject.getClass().isArray() == false) {    result=hash(result,aObject.hashCode());  } else {    Object[] objects=(Object[])aObject;    for (    Object object : objects) {      result=hash(result,object);    }  }  return result;}  }
class C{  public String toPrettyPrintingJson() throws IOException {  return OBJECT_MAPPER.defaultPrettyPrintingWriter().writeValueAsString(this);}  }
class C{  @Override public boolean contains(final IScope scope,final Object o) throws GamaRuntimeException {  if (!(o instanceof IAgent)) {    return false;  }  for (  final IPopulationSet pop : populationSets) {    if (pop.contains(scope,o)) {      return true;    }  }  return false;}  }
class C{  public BytesOutputStream(int size){  super(size);  dataOutputStream=new DataOutputStream(this);}  }
class C{  public static short readShort(){  return scanner.nextShort();}  }
class C{  protected void addRecognizedParamsAndSetDefaults(XMLComponent component){  String[] recognizedFeatures=component.getRecognizedFeatures();  addRecognizedFeatures(recognizedFeatures);  String[] recognizedProperties=component.getRecognizedProperties();  addRecognizedProperties(recognizedProperties);  if (recognizedFeatures != null) {    for (int i=0; i < recognizedFeatures.length; ++i) {      String featureId=recognizedFeatures[i];      Boolean state=component.getFeatureDefault(featureId);      if (state != null) {        if (!fFeatures.containsKey(featureId)) {          fFeatures.put(featureId,state);          fConfigUpdated=true;        }      }    }  }  if (recognizedProperties != null) {    for (int i=0; i < recognizedProperties.length; ++i) {      String propertyId=recognizedProperties[i];      Object value=component.getPropertyDefault(propertyId);      if (value != null) {        if (!fProperties.containsKey(propertyId)) {          fProperties.put(propertyId,value);          fConfigUpdated=true;        }      }    }  }}  }
class C{  private void executeWithRetry(final HttpMethod method) throws IOException, HttpException {  int execCount=0;  try {    while (true) {      execCount++;      try {        if (LOG.isTraceEnabled()) {          LOG.trace("Attempt number " + execCount + " to process request");        }        if (this.conn.getParams().isStaleCheckingEnabled()) {          this.conn.closeIfStale();        }        if (!this.conn.isOpen()) {          this.conn.open();          boolean upgrade=isConnectionUpgrade(method);          if ((this.conn.isProxied() && (this.conn.isSecure() || upgrade)) && !(method instanceof ConnectMethod)) {            this.conn.setTunnelRequested(upgrade);            if (!executeConnect()) {              return;            }          }        }        applyConnectionParams(method);        method.execute(state,this.conn);        break;      } catch (      HttpException e) {        throw e;      }catch (      IOException e) {        LOG.debug("Closing the connection.");        this.conn.close();        if (method instanceof HttpMethodBase) {          MethodRetryHandler handler=((HttpMethodBase)method).getMethodRetryHandler();          if (handler != null) {            if (!handler.retryMethod(method,this.conn,new HttpRecoverableException(e.getMessage()),execCount,method.isRequestSent())) {              LOG.debug("Method retry handler returned false. " + "Automatic recovery will not be attempted");              throw e;            }          }        }        HttpMethodRetryHandler handler=(HttpMethodRetryHandler)method.getParams().getParameter(HttpMethodParams.RETRY_HANDLER);        if (handler == null) {          handler=new DefaultHttpMethodRetryHandler();        }        if (!handler.retryMethod(method,e,execCount)) {          LOG.debug("Method retry handler returned false. " + "Automatic recovery will not be attempted");          throw e;        }        if (LOG.isInfoEnabled()) {          LOG.info("I/O exception (" + e.getClass().getName() + ") caught when processing request: "+ e.getMessage());        }        if (LOG.isDebugEnabled()) {          LOG.debug(e.getMessage(),e);        }        LOG.info("Retrying request");      }    }  } catch (  IOException e) {    if (this.conn.isOpen()) {      LOG.debug("Closing the connection.");      this.conn.close();    }    releaseConnection=true;    throw e;  }catch (  RuntimeException e) {    if (this.conn.isOpen()) {      LOG.debug("Closing the connection.");      this.conn.close();    }    releaseConnection=true;    throw e;  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public static Class generateClassImpl(String name,Modifiers modifiers,Class[] interfaces,Class superClass,BSHBlock block,boolean isInterface,CallStack callstack,Interpreter interpreter) throws EvalError {  try {    Capabilities.setAccessibility(true);  } catch (  Capabilities.Unavailable e) {    throw new EvalError("Defining classes currently requires reflective Accessibility.",block,callstack);  }  NameSpace enclosingNameSpace=callstack.top();  String packageName=enclosingNameSpace.getPackage();  String className=enclosingNameSpace.isClass ? (enclosingNameSpace.getName() + "$" + name) : name;  String fqClassName=packageName == null ? className : packageName + "." + className;  String bshStaticFieldName=ClassGeneratorUtil.BSHSTATIC + className;  BshClassManager bcm=interpreter.getClassManager();  bcm.definingClass(fqClassName);  NameSpace classStaticNameSpace=new NameSpace(enclosingNameSpace,className);  classStaticNameSpace.isClass=true;  callstack.push(classStaticNameSpace);  block.evalBlock(callstack,interpreter,true,ClassNodeFilter.CLASSCLASSES);  Variable[] variables=getDeclaredVariables(block,callstack,interpreter,packageName);  DelayedEvalBshMethod[] methods=getDeclaredMethods(block,callstack,interpreter,packageName);  ClassGeneratorUtil classGenerator=new ClassGeneratorUtil(modifiers,className,packageName,superClass,interfaces,variables,methods,isInterface);  Class clas=bcm.getAssociatedClass(fqClassName);  if (clas == null) {    byte[] code=classGenerator.generateClass(Interpreter.getSaveClasses());    if (Interpreter.getSaveClasses())     saveClasses(className,code); else     clas=bcm.defineClass(fqClassName,code);  }  if (!Interpreter.getSaveClasses()) {    classGenerator.initStaticNameSpace(classStaticNameSpace,block);    enclosingNameSpace.importClass(fqClassName.replace('$','.'));    classStaticNameSpace.setClassStatic(clas);    block.evalBlock(callstack,interpreter,true,ClassNodeFilter.CLASSSTATIC);    if (!clas.isInterface())     installStaticBlock(clas,bshStaticFieldName,classStaticNameSpace,interpreter);  }  callstack.pop();  bcm.doneDefiningClass(fqClassName);  return clas;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY).setContentRequired(false);  builder.addAttribute(CODE).setRequired(true);  builder.addAttribute(CONTENT_TYPE);  builder.addAttribute(REASON).setRequired(true);}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || this.length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  public void writeKdeToFile(MyGrid grid,String outputFilename){  File outputFile=new File(outputFilename);  if (outputFile.exists()) {    log.error("The file " + outputFilename + " already exists!!");    throw new RuntimeException("Since the files are appended, please delete and start over.");  }  try {    BufferedWriter output=new BufferedWriter(new FileWriter(new File(outputFilename)));    try {      output.write("ID,XMIN,YMIN,XMAX,YMAX,ACTIVITY_COUNT");      output.newLine();      for (      MyGridCell cell : grid.getGrid().values()) {        output.write(String.valueOf(cell.getId()));        output.write(",");        output.write(String.valueOf(cell.getMinX()));        output.write(",");        output.write(String.valueOf(cell.getMinY()));        output.write(",");        output.write(String.valueOf(cell.getMaxX()));        output.write(",");        output.write(String.valueOf(cell.getMaxY()));        output.write(",");        output.write(String.valueOf(cell.getCount()));        output.newLine();      }      output.write("END");    }  finally {      output.close();    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void returnValue(){  mv.visitInsn(returnType.getOpcode(Opcodes.IRETURN));}  }
class C{  public surfaceReference(){}  }
class C{  protected void configureDatasource(LocalContainer container,String etcDir) throws IOException {  StringBuilder sb=new StringBuilder();  sb.append("<Call name=\"setAttribute\">\n");  sb.append("  <Arg>org.eclipse.jetty.webapp.configuration</Arg>\n");  sb.append("  <Arg>\n");  sb.append("    <Array type=\"java.lang.String\">\n");  sb.append("      <Item>org.eclipse.jetty.webapp.WebInfConfiguration</Item>\n");  sb.append("      <Item>org.eclipse.jetty.webapp.WebXmlConfiguration</Item>\n");  sb.append("      <Item>org.eclipse.jetty.webapp.MetaInfConfiguration</Item>\n");  sb.append("      <Item>org.eclipse.jetty.webapp.FragmentConfiguration</Item>\n");  sb.append("      <Item>org.eclipse.jetty.plus.webapp.EnvConfiguration</Item>\n");  sb.append("      <Item>org.eclipse.jetty.plus.webapp.PlusConfiguration</Item>\n");  sb.append("      <Item>org.eclipse.jetty.webapp.JettyWebXmlConfiguration</Item>\n");  sb.append("      <Item>org.eclipse.jetty.webapp.TagLibConfiguration</Item>\n");  sb.append("    </Array>\n");  sb.append("  </Arg>\n");  sb.append("</Call>\n");  createDatasourceDefinitions(sb,container);  Map<String,String> jettyXmlReplacements=new HashMap<String,String>();  jettyXmlReplacements.put("</Configure>",sb.toString() + "</Configure>");  getFileHandler().replaceInFile(getFileHandler().append(etcDir,"jetty.xml"),jettyXmlReplacements,"UTF-8");}  }
class C{  public void finish(){  if (iteration == -1) {    throw new RuntimeException("Please initialize me before the iteration starts.");  }  controlerListenerManager.fireControlerAfterMobsimEvent(iteration);  scoringFunctionsForPopulation.finishScoringFunctions();  newScoreAssigner.assignNewScores(this.iteration,scoringFunctionsForPopulation,population);  finished=true;}  }
class C{  public static void doMove(final Project project,PsiElement[] elements,PsiElement targetContainer,MoveCallback moveCallback){  if (elements.length == 0) {    return;  }  final PsiClass sourceClass;  final PsiElement first=elements[0];  if (first instanceof PsiMember && ((PsiMember)first).getContainingClass() != null) {    sourceClass=((PsiMember)first).getContainingClass();  } else {    return;  }  final Set<PsiMember> preselectMembers=new HashSet<PsiMember>();  for (  PsiElement element : elements) {    if (element instanceof PsiMember && !sourceClass.equals(((PsiMember)element).getContainingClass())) {      String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("members.to.be.moved.should.belong.to.the.same.class"));      CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.MOVE_MEMBERS,project);      return;    }    if (element instanceof PsiField) {      PsiField field=(PsiField)element;      if (!field.hasModifierProperty(PsiModifier.STATIC)) {        String fieldName=PsiFormatUtil.formatVariable(field,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_TYPE | PsiFormatUtil.TYPE_AFTER,PsiSubstitutor.EMPTY);        String message=RefactoringBundle.message("field.0.is.not.static",fieldName,REFACTORING_NAME);        CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.MOVE_MEMBERS,project);        return;      }      preselectMembers.add(field);    } else     if (element instanceof PsiMethod) {      PsiMethod method=(PsiMethod)element;      String methodName=PsiFormatUtil.formatMethod(method,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_TYPE);      if (method.isConstructor()) {        String message=RefactoringBundle.message("0.refactoring.cannot.be.applied.to.constructors",REFACTORING_NAME);        CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.MOVE_MEMBERS,project);        return;      }      if (!method.hasModifierProperty(PsiModifier.STATIC)) {        String message=RefactoringBundle.message("method.0.is.not.static",methodName,REFACTORING_NAME);        CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.MOVE_MEMBERS,project);        return;      }      preselectMembers.add(method);    } else     if (element instanceof PsiClass) {      PsiClass aClass=(PsiClass)element;      if (!aClass.hasModifierProperty(PsiModifier.STATIC)) {        String message=RefactoringBundle.message("inner.class.0.is.not.static",aClass.getQualifiedName(),REFACTORING_NAME);        CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.MOVE_MEMBERS,project);        return;      }      preselectMembers.add(aClass);    }  }  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,sourceClass))   return;  final PsiClass initialTargerClass=targetContainer instanceof PsiClass ? (PsiClass)targetContainer : null;  MoveMembersDialog dialog=new MoveMembersDialog(project,sourceClass,initialTargerClass,preselectMembers,moveCallback);  dialog.show();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.431 -0500",hash_original_method="8101285F3B7B971E35CF21374AE1FDC7",hash_generated_method="8BE70D42F84139EB093BCA64D8309885") static public void assertNull(String message,Object object){  assertTrue(message,object == null);}  }
class C{  @Override protected boolean isFeatureActive(KMLTraversalContext tc,DrawContext dc){  return this.getVisibility() == null || this.getVisibility();}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer a=new SoraniAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  public JsonParseException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static void main(String[] args){  SpringApplication.run(Application.class,args);}  }
class C{  public boolean isCutTimeOverlap(int startTimeSec,int endTimeSec){  TimeTree startTt=getEncompassigTimeTreeOrMinTimeTreeAfterTime(startTimeSec,false);  TimeTree endTt=getEncompassigTimeTreeOrMinTimeTreeAfterTime(endTimeSec,false);  if (startTt != endTt && (startTt == null || endTt == null || startTt.getMinTimeSecs() == endTt.getMinTimeSecs() || startTt.getMaxTimeSecs() == endTt.getMaxTimeSecs()))   return true;  if (startTt == null)   return false;  int startCutSec=startTt.calcTimeRangeCutStart();  if (startTimeSec < startCutSec) {    if (endTimeSec <= startCutSec)     return false;    return true;  }  int endCutSec=startTt.calcTimeRangeCutEnd();  if (startTimeSec < endCutSec)   return true;  return false;}  }
class C{  protected static BasePO updatePresentationObject(BasePO poToBeUpdated,DomainObject<?> template){  poToBeUpdated.setKey(template.getKey());  poToBeUpdated.setVersion(template.getVersion());  return poToBeUpdated;}  }
class C{  public int toDayOfWeek(){  return new YMD(julian).toDayOfWeek(this);}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("zero",null));}  }
class C{  @Override protected void applyModelViewMatrix(final Renderer renderer){  _matrixBuffer.rewind();  getModelViewMatrix().toDoubleBuffer(_matrixBuffer);  _matrixBuffer.rewind();  ((JoglRendererDouble)renderer).setModelViewMatrix(_matrixBuffer);}  }
class C{  static public boolean start(ASyncProcess parent,int WindowNo,ProcessInfo pi){  s_log.info("start - " + pi);  if (pi.getAD_Process_ID() == 110)   return startDocumentPrint(ReportEngine.ORDER,pi.getRecord_ID(),parent,WindowNo,!pi.isPrintPreview());  if (pi.getAD_Process_ID() == MProcess.getProcess_ID("Rpt PP_Order",null))   return startDocumentPrint(ReportEngine.MANUFACTURING_ORDER,pi.getRecord_ID(),parent,WindowNo,!pi.isPrintPreview());  if (pi.getAD_Process_ID() == MProcess.getProcess_ID("Rpt DD_Order",null))   return startDocumentPrint(ReportEngine.DISTRIBUTION_ORDER,pi.getRecord_ID(),parent,WindowNo,!pi.isPrintPreview()); else   if (pi.getAD_Process_ID() == 116)   return startDocumentPrint(ReportEngine.INVOICE,pi.getRecord_ID(),parent,WindowNo,!pi.isPrintPreview()); else   if (pi.getAD_Process_ID() == 117)   return startDocumentPrint(ReportEngine.SHIPMENT,pi.getRecord_ID(),parent,WindowNo,!pi.isPrintPreview()); else   if (pi.getAD_Process_ID() == 217)   return startDocumentPrint(ReportEngine.PROJECT,pi.getRecord_ID(),parent,WindowNo,!pi.isPrintPreview()); else   if (pi.getAD_Process_ID() == 276)   return startDocumentPrint(ReportEngine.RFQ,pi.getRecord_ID(),parent,WindowNo,!pi.isPrintPreview()); else   if (pi.getAD_Process_ID() == 313)   return startCheckPrint(pi.getRecord_ID(),!pi.isPrintPreview()); else   if (pi.getAD_Process_ID() == 159)   return startDocumentPrint(ReportEngine.DUNNING,pi.getRecord_ID(),parent,WindowNo,!pi.isPrintPreview()); else   if (pi.getAD_Process_ID() == 202 || pi.getAD_Process_ID() == 204)   return startFinReport(pi);  return startStandardReport(pi);}  }
class C{  public void addEntry(EntryEventImpl ev){  this.removeAllData[this.removeAllDataSize]=new RemoveAllEntryData(ev);  this.removeAllDataSize+=1;}  }
class C{  protected SpatialSampledVertexDecorator(V delegate){  super(delegate);}  }
class C{  public synchronized Future<ReplDBMSHeader> watchForProcessedHeartbeat(String name,boolean cancel) throws InterruptedException {  HeartbeatWatchPredicate predicate=new HeartbeatWatchPredicate(name);  if (cancel)   return processingWatches.watch(predicate,threadCount,cancelAction); else   return processingWatches.watch(predicate,threadCount);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:46.516 -0500",hash_original_method="ABA188D86B8DA63ED0FEF813BC6FEFB9",hash_generated_method="33D92E01EC6B9451C8CC684770178036") public SpellCheckerSession newSpellCheckerSession(Bundle bundle,Locale locale,SpellCheckerSessionListener listener,boolean referToSpellCheckerLanguageSettings){  if (listener == null) {    throw new NullPointerException();  }  if (!referToSpellCheckerLanguageSettings && locale == null) {    throw new IllegalArgumentException("Locale should not be null if you don't refer" + " settings.");  }  if (referToSpellCheckerLanguageSettings && !isSpellCheckerEnabled()) {    return null;  }  final SpellCheckerInfo sci;  try {    sci=sService.getCurrentSpellChecker(null);  } catch (  RemoteException e) {    return null;  }  if (sci == null) {    return null;  }  SpellCheckerSubtype subtypeInUse=null;  if (referToSpellCheckerLanguageSettings) {    subtypeInUse=getCurrentSpellCheckerSubtype(true);    if (subtypeInUse == null) {      return null;    }    if (locale != null) {      final String subtypeLocale=subtypeInUse.getLocale();      final String inputLocale=locale.toString();      if (subtypeLocale.length() < 2 || inputLocale.length() < 2 || !subtypeLocale.substring(0,2).equals(inputLocale.substring(0,2))) {        return null;      }    }  } else {    final String localeStr=locale.toString();    for (int i=0; i < sci.getSubtypeCount(); ++i) {      final SpellCheckerSubtype subtype=sci.getSubtypeAt(i);      final String tempSubtypeLocale=subtype.getLocale();      if (tempSubtypeLocale.equals(localeStr)) {        subtypeInUse=subtype;        break;      } else       if (localeStr.length() >= 2 && tempSubtypeLocale.length() >= 2 && localeStr.startsWith(tempSubtypeLocale)) {        subtypeInUse=subtype;      }    }  }  if (subtypeInUse == null) {    return null;  }  final SpellCheckerSession session=new SpellCheckerSession(sci,sService,listener);  try {    sService.getSpellCheckerService(sci.getId(),subtypeInUse.getLocale(),session.getTextServicesSessionListener(),session.getSpellCheckerSessionListener(),bundle);  } catch (  RemoteException e) {    return null;  }  return session;}  }
class C{  private void RangeCheck(int index){  if (index >= size)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);}  }
class C{  public void testConstructorZeroDecimalPlaces(){  mFReal=new FormatReal(2,0);  mStr=mFReal.format(mStrBuff,14.7).toString();  assertEquals("Should be equal","15.",mStr);}  }
class C{  public synchronized EmpiricalMeasurementDistribution computeSignificance(int numPermutationsToCheck) throws Exception {  RandomGenerator rg=new RandomGenerator();  int[][] newOrderings=rg.generateRandomPerturbations(continuousData.length,numPermutationsToCheck);  return computeSignificance(newOrderings);}  }
class C{  public DoubleArrayListParameter(OptionID optionID,ParameterConstraint<List<double[]>> constraint){  super(optionID);  addConstraint(constraint);}  }
class C{  @Override public String toString(){  final StringBuilder moduleString=new StringBuilder();  if (isLoaded()) {    boolean addComma=false;    for (    final Module module : getModules()) {      if (addComma) {        moduleString.append(", ");      }      addComma=true;      moduleString.append(module.getName());    }  } else {    moduleString.append(String.format("unloaded, %d modules",m_addressSpace.getModuleCount()));  }  return String.format("Address space %s [%s]",getName(),moduleString);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final Entry<K,V> pollLastEntry(){  throw new UnsupportedOperationException();}  }
class C{  public static void main(String[] args){  org.compiere.Adempiere.startupEnvironment(true);  Color[] colors=new Color[]{Color.black,Color.red,Color.green,Color.blue,Color.darkGray,Color.gray,Color.lightGray,Color.white,Color.cyan,Color.magenta,Color.orange,Color.pink,Color.yellow,SystemColor.textHighlight};  String[] names=new String[]{"Black","Red","Green","Blue","Gray dark","Gray","Gray light","White","Cyan","Magenta","Orange","Pink","Yellow","Blue dark"};  for (int i=0; i < colors.length; i++)   System.out.println(names[i] + " = " + colors[i]+ " RGB="+ colors[i].getRGB()+ " -> "+ new Color(colors[i].getRGB(),false)+ " -> "+ new Color(colors[i].getRGB(),true));  int[] IDs=PO.getAllIDs("AD_PrintColor",null,null);  for (int i=0; i < IDs.length; i++) {    MPrintColor pc=new MPrintColor(Env.getCtx(),IDs[i],null);    System.out.println(IDs[i] + ": " + pc+ " = "+ pc.getColor()+ ", RGB="+ pc.getColor().getRGB());  }}  }
class C{  public static void restoreBlockAt(final Location location){  if (!blocksToRestore.containsKey(location))   return;  Block b=location.getBlock();  String s=blocksToRestore.get(location);  Material m=Material.valueOf(s.split(",")[0]);  byte d=Byte.valueOf(s.split(",")[1]);  b.getLocation().getWorld().getPlayers().forEach(null);  blocksToRestore.remove(location);}  }
class C{  public boolean isOpen(){  return open;}  }
class C{  public boolean isStructureOnly(){  return m_structureOnly;}  }
class C{  protected static String filter(String message){  if (message == null)   return (null);  char content[]=new char[message.length()];  message.getChars(0,message.length(),content,0);  StringBuilder result=new StringBuilder(content.length + 50);  for (int i=0; i < content.length; i++) {switch (content[i]) {case '<':      result.append("&lt;");    break;case '>':  result.append("&gt;");break;case '&':result.append("&amp;");break;case '"':result.append("&quot;");break;default :result.append(content[i]);}}return (result.toString());}  }
class C{  private Geometry readGeometryTaggedText() throws IOException, ParseException {  String type=null;  try {    type=getNextWord();  } catch (  IOException e) {    return null;  }catch (  ParseException e) {    return null;  }  if (type.equalsIgnoreCase("POINT")) {    return readPointText();  } else   if (type.equalsIgnoreCase("LINESTRING")) {    return readLineStringText();  } else   if (type.equalsIgnoreCase("LINEARRING")) {    return readLinearRingText();  } else   if (type.equalsIgnoreCase("POLYGON")) {    return readPolygonText();  } else   if (type.equalsIgnoreCase("MULTIPOINT")) {    return readMultiPointText();  } else   if (type.equalsIgnoreCase("MULTILINESTRING")) {    return readMultiLineStringText();  } else   if (type.equalsIgnoreCase("MULTIPOLYGON")) {    return readMultiPolygonText();  } else   if (type.equalsIgnoreCase("GEOMETRYCOLLECTION")) {    return readGeometryCollectionText();  }  parseErrorWithLine("Unknown geometry type: " + type);  return null;}  }
class C{  @Override public synchronized Object clone() throws RuntimeOperationsException {  if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {    MODELMBEAN_LOGGER.logp(Level.FINEST,DescriptorSupport.class.getName(),"clone()","Entry");  }  return (new DescriptorSupport(this));}  }
class C{  public void testValidate01() throws InvalidAlgorithmParameterException, CertPathValidatorException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  MyCertPath mCP=new MyCertPath(new byte[0]);  CertPathParameters params=new PKIXParameters(TestUtils.getTrustAnchorSet());  CertPathValidator[] certPV=createCPVs();  assertNotNull("CertPathValidator objects were not created",certPV);  for (int i=0; i < certPV.length; i++) {    try {      certPV[i].validate(mCP,null);      fail("InvalidAlgorithmParameterException must be thrown");    } catch (    InvalidAlgorithmParameterException e) {    }    try {      certPV[i].validate(null,params);      fail("NullPointerException must be thrown");    } catch (    NullPointerException e) {    }  }}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case SGenPackage.GENERATOR_MODEL:    return createGeneratorModel();case SGenPackage.GENERATOR_CONFIGURATION:  return createGeneratorConfiguration();case SGenPackage.FEATURE_TYPE:return createFeatureType();case SGenPackage.FEATURE_PARAMETER:return createFeatureParameter();case SGenPackage.FEATURE_CONFIGURATION:return createFeatureConfiguration();case SGenPackage.GENERATOR_ENTRY:return createGeneratorEntry();case SGenPackage.FEATURE_PARAMETER_VALUE:return createFeatureParameterValue();case SGenPackage.FEATURE_TYPE_LIBRARY:return createFeatureTypeLibrary();case SGenPackage.BOOL_LITERAL:return createBoolLiteral();case SGenPackage.INT_LITERAL:return createIntLiteral();case SGenPackage.REAL_LITERAL:return createRealLiteral();case SGenPackage.STRING_LITERAL:return createStringLiteral();case SGenPackage.DEPRECATABLE_ELEMENT:return createDeprecatableElement();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public void markOwned(IgniteTxKey key){  lock();  try {    Deque<GridCacheMvccCandidate> deque=cands.get(key);    assert deque != null;    for (    GridCacheMvccCandidate cand : deque)     cand.setOwner();  }  finally {    unlock();  }}  }
class C{  public void continuousQueryFilterRelease(long filterPtr){  enter();  try {    PlatformCallbackUtils.continuousQueryFilterRelease(envPtr,filterPtr);  }  finally {    leave();  }}  }
class C{  private void populateNetworkMap(Set<URI> networks,Map<URI,NetworkLite> networkMap){  for (  URI networkURI : networks) {    NetworkLite lite=NetworkUtil.getNetworkLite(networkURI,_dbClient);    networkMap.put(networkURI,lite);  }}  }
class C{  public ResponseHeaders combine(ResponseHeaders network) throws IOException {  RawHeaders result=new RawHeaders();  result.setStatusLine(headers.getStatusLine());  for (int i=0; i < headers.length(); i++) {    String fieldName=headers.getFieldName(i);    String value=headers.getValue(i);    if ("Warning".equals(fieldName) && value.startsWith("1")) {      continue;    }    if (!isEndToEnd(fieldName) || network.headers.get(fieldName) == null) {      result.add(fieldName,value);    }  }  for (int i=0; i < network.headers.length(); i++) {    String fieldName=network.headers.getFieldName(i);    if (isEndToEnd(fieldName)) {      result.add(fieldName,network.headers.getValue(i));    }  }  return new ResponseHeaders(uri,result);}  }
class C{  public String formatString(final String strToFormat){  if (strToFormat != null) {    if (strToFormat.equalsIgnoreCase(""))     return " ";    final String valn1=strToFormat.replaceAll("\n"," ");    final String formtStr=valn1.replaceAll("\r"," ");    return formtStr.replaceAll("'","''");  } else   return " ";}  }
class C{  @Override public Set<K> keySet(){  Set<K> ks=keySet;  return (ks != null) ? ks : (keySet=new KeySet());}  }
class C{  private void log(String message,String level,String levelColor,PrintStream ps){  StringBuilder builder=new StringBuilder();  if (!level.equals("raw"))   builder.append(getPrefix(level,levelColor));  builder.append(message);  String ts=builder.toString();  ps.println(ts);  for (  LogHandler hand : handlers)   hand.onLog(level,message,ts,this);}  }
class C{  private boolean interested(CacheEntryEvent<? extends K,? extends V> event){  return filter == null ? true : filter.evaluate(event);}  }
class C{  public void populateHeader(final String targetName){  updateActionHistoryHeader(targetName);}  }
class C{  public static CCActionManager sharedManager(){  return _sharedManager;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:14.008 -0400",hash_original_method="1945ADB794EAD87742B5282BF8E2C1B9",hash_generated_method="2173CD235B6FA70D71088252B6164B07") public boolean nextContour(){  return native_nextContour(native_instance);}  }
class C{  public void changeUserPassword(String tenantName,String userName,char[] currentPassword,char[] newPassword) throws Exception {  getService().changeUserPassword(tenantName,userName,currentPassword,newPassword,this.getServiceContext());}  }
class C{  public void init(){  this.appSrcDir=new File(Config.v().APP_ROOT_DIR + File.separator + SRC_DIR);  this.appClassesDir=(Config.v().apk != null) ? new File(Config.v().apk) : new File(Config.v().APP_ROOT_DIR + File.separator + CLASSES_DIR);  logger.info("Setting application class directory to {}.",appClassesDir.toString());  if (!this.appClassesDir.exists()) {    logger.error("Project not configured properly. Directory does not exist: " + this.appClassesDir);    droidsafe.main.Main.exit(1);  }  this.appLibDir=new File(Config.v().APP_ROOT_DIR + File.separator + LIBS_DIR);  this.appGenDir=new File(Config.v().APP_ROOT_DIR + File.separator + GEN_DIR);  this.outputDir=new File(getOutputDir());  if (!outputDir.exists()) {    try {      outputDir.mkdirs();    } catch (    Exception e) {      logger.error("Cannot create output directory",e);      droidsafe.main.Main.exit(1);    }  }  setSrcClasses();  setLibClasses();  setGenClasses();  createJavaClassLoader();}  }
class C{  private void update(){  while (childIterator.hasNext()) {    UIComponent comp=(UIComponent)childIterator.next();    if (comp.isRendered()) {      child=comp;      hasNext=true;      return;    }  }  hasNext=false;  child=null;}  }
class C{  @Benchmark public long test4_UsingKeySetAndForEach() throws IOException {  long i=0;  for (  Integer key : map.keySet()) {    i+=key + map.get(key);  }  return i;}  }
class C{  public static Accounts run(AdSenseHost service,String adClientId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing publisher account for \"%s\"\n",adClientId);  System.out.println("=================================================================");  Accounts accounts=service.accounts().list(Arrays.asList(adClientId)).execute();  if ((accounts.getItems() != null) && !accounts.getItems().isEmpty()) {    for (    Account account : accounts.getItems()) {      System.out.printf("Account with ID \"%s\", name \"%s\" and status \"%s\" was found.\n",account.getId(),account.getName(),account.getStatus());    }  } else {    System.out.println("No accounts found.");  }  System.out.println();  return accounts;}  }
class C{  public RangeQueryBinding(TupleSet ts,String field,boolean forceOrdinal){  super(ts,field);  m_type=DataLib.inferType(ts,field);  m_ordinal=forceOrdinal;  m_lstnr=new Listener();  initPredicate();  initModel();}  }
class C{  public Query(String id,String type,Map<String,String> schemaKeys){  super(id,type);  setSchemaKeys(schemaKeys);}  }
class C{  public boolean update(int position,Object[] data){  if (position >= 0 && position < mRecords.size()) {    Record record=mRecords.get(position);    int count=Math.min(record.mFields.length,data.length);    System.arraycopy(data,0,record.mFields,0,count);    notifyObservers();    return true;  }  return false;}  }
class C{  public void close(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        if (!mDiskLruCache.isClosed()) {          mDiskLruCache.close();          mDiskLruCache=null;          if (BuildConfig.DEBUG) {            Log.d(TAG,"Disk cache closed");          }        }      } catch (      IOException e) {        Log.e(TAG,"close - " + e);      }    }  }}  }
class C{  public void testConnectionParams() throws Exception {  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:9998..10000").setSocketSendBufferSize(4 * 1024),true);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:9998..10000").setSocketReceiveBufferSize(4 * 1024),true);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:9998..10000").setSocketSendBufferSize(-64 * 1024),false);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:9998..10000").setSocketReceiveBufferSize(-64 * 1024),false);}  }
class C{  @Override public void close() throws IOException {  if (!closed) {    finish();    inf.end();    out.close();    closed=true;  }}  }
class C{  protected void paintDisabledText(JLabel l,Graphics g,String s,int textX,int textY){  int accChar=l.getDisplayedMnemonicIndex();  Color background=l.getBackground();  g.setColor(background.brighter());  SwingUtilities2.drawStringUnderlineCharAt(l,g,s,accChar,textX + 1,textY + 1);  g.setColor(background.darker());  SwingUtilities2.drawStringUnderlineCharAt(l,g,s,accChar,textX,textY);}  }
class C{  public TypeAttributeImpl(String type){  this.type=type;}  }
class C{  public synchronized StorageArray[] queryArrays(String[] arrayId) throws InvalidArgument, InvalidSession, StorageFault {  final String methodName="queryArrays(): ";  log.debug(methodName + "Entry");  List<StorageArray> storageArrayList=null;  StorageArray[] arrays=null;  if (!Util.isEmpty(arrayId)) {    log.debug(methodName + "input array ids: " + Arrays.asList(arrayId));  } else {    log.debug(methodName + "input array ids: " + arrayId);  }  try {    String sosArrayId=this.getArrayId();    if (!Util.isEmpty(arrayId)) {      storageArrayList=new ArrayList<StorageArray>();      for (      String inputArrayId : arrayId) {        if (!inputArrayId.startsWith(STORAGEARRAY_IDENTIFIER_PREFIX)) {          throw FaultUtil.InvalidArgument("Given array Id is invalid:[" + arrayId + "]");        }        if (sosArrayId.equals(inputArrayId)) {          StorageArray storageArray=this.getSOSStorageArray();          storageArray.setUniqueIdentifier(inputArrayId);          storageArrayList.add(storageArray);        }      }      return storageArrayList.toArray(new StorageArray[0]);    }    arrays=new StorageArray[1];    StorageArray array=this.getSOSStorageArray();    arrays[0]=array;  } catch (  StorageFault e) {    log.error("StorageFault occured",e);    throw e;  }catch (  InvalidArgument e) {    log.error(methodName + "InvalidArgument occured ",e);    throw e;  }  log.debug(methodName + "Exit returning arrays of size[" + arrays.length+ "]");  return arrays;}  }
class C{  public final AssertSubscriber<T> assertError(){  assertNotComplete();  int s=errors.size();  if (s == 0) {    throw new AssertionError("No error",null);  }  if (s > 1) {    throw new AssertionError("Multiple errors: " + s,null);  }  return this;}  }
class C{  public void fileNotFound(String fileNotFound){  System.out.println("File not found exception. The following file " + fileNotFound + " has not been found");}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public boolean isComplete(){synchronized (nodeStack) {    return nodeStack.isEmpty() && retainedNodes.isEmpty();  }}  }
class C{  public String consumeCssIdentifier(){  int start=pos;  while (!isEmpty() && (matchesWord() || matchesAny('-','_')))   pos++;  return queue.substring(start,pos);}  }
class C{  @SuppressWarnings("ResourceType") public void update(@Nullable String title,@Nullable String album,@Nullable String artist,@Nullable Bitmap mediaArtwork,@NonNull NotificationHelper.NotificationMediaState notificationMediaState){  MediaMetadataCompat.Builder metaDataBuilder=new MediaMetadataCompat.Builder();  metaDataBuilder.putString(MediaMetadataCompat.METADATA_KEY_TITLE,title);  metaDataBuilder.putString(MediaMetadataCompat.METADATA_KEY_ALBUM,album);  metaDataBuilder.putString(MediaMetadataCompat.METADATA_KEY_ARTIST,artist);  if (appIconBitmap != null) {    metaDataBuilder.putBitmap(MediaMetadataCompat.METADATA_KEY_DISPLAY_ICON,appIconBitmap);  }  if (mediaArtwork != null) {    metaDataBuilder.putBitmap(MediaMetadataCompat.METADATA_KEY_ALBUM_ART,mediaArtwork);  }  if (mediaSession != null) {    mediaSession.setMetadata(metaDataBuilder.build());  }  PlaybackStateCompat.Builder playbackStateBuilder=new PlaybackStateCompat.Builder();  playbackStateBuilder.setActions(getPlaybackOptions(notificationMediaState));  playbackStateBuilder.setState(getPlaybackState(notificationMediaState.isPlaying()),PlaybackStateCompat.PLAYBACK_POSITION_UNKNOWN,1.0f);  mediaSession.setPlaybackState(playbackStateBuilder.build());  Log.d(TAG,"update, controller is null ? " + (mediaSession.getController() == null ? "true" : "false"));  if (enabled && !mediaSession.isActive()) {    mediaSession.setActive(true);  }}  }
class C{  public StringBuilder deleteCharAt(int index){  deleteCharAt0(index);  return this;}  }
class C{  public AVTPartXPath(String val,org.apache.xml.utils.PrefixResolver nsNode,XPathParser xpathProcessor,XPathFactory factory,XPathContext liaison) throws javax.xml.transform.TransformerException {  m_xpath=new XPath(val,null,nsNode,XPath.SELECT,liaison.getErrorListener());}  }
class C{  private void checkPhrase(){  JOptionPane.showOptionDialog(null,"Heard utterance is greater than 10 chars! Not guaranteed to render correctly.","Warning",JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,null,null);}  }
class C{  public void addNick(String guildID,String nick){  if (nick == null) {    if (nicks.containsKey(guildID))     nicks.remove(guildID);  } else {    nicks.put(guildID,nick);  }}  }
class C{  public static Object clearRg(){  try {    Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);    assertNotNull(region);    region.clear();    return eventId;  } catch (  Exception e) {    fail("clear failed due to ",e);  }  return null;}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.392 -0500",hash_original_method="94ED81BC52F6E3EE358EE57713F40357",hash_generated_method="230AE6DD7E6E198D168305C6A355146F") public SipStatusLine createStatusLine(String statusLine) throws ParseException {  StatusLineParser statusLineParser=new StatusLineParser(statusLine);  return (SipStatusLine)statusLineParser.parse();}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  JavaTimeModule module=new JavaTimeModule();  module.addSerializer(OffsetDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(ZonedDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(LocalDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(Instant.class,JSR310DateTimeSerializer.INSTANCE);  module.addDeserializer(LocalDate.class,JSR310LocalDateDeserializer.INSTANCE);  mapper.registerModule(module);  return mapper.writeValueAsBytes(object);}  }
class C{  public T caseS_Return(S_Return object){  return null;}  }
class C{  private InvokerBytecodeGenerator(String className,String invokerName,MethodType invokerType){  this(null,invokerType.parameterCount(),className,invokerName,invokerType);  localTypes[localTypes.length - 1]=V_TYPE;  for (int i=0; i < localsMap.length; i++) {    localsMap[i]=invokerType.parameterSlotCount() - invokerType.parameterSlotDepth(i);    if (i < invokerType.parameterCount())     localTypes[i]=basicType(invokerType.parameterType(i));  }}  }
class C{  public HttpParams copy(){  HttpParams clone=this.local.copy();  return new DefaultedHttpParams(clone,this.defaults);}  }
class C{  public static void ConvertPlanCoordinates(){  LOG.info("Converting plans to EPSG:3857");  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(sc).readFile("/Volumes/Nifty/workspace/coct-data/matsim/20150930/output/ITERS/it.0/0.plans.xml.gz");  CoordinateTransformation ct=TransformationFactory.getCoordinateTransformation("WGS84_SA_Albers","EPSG:3857");  Scenario newSc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  PopulationFactory pf=sc.getPopulation().getFactory();  for (  Person person : sc.getPopulation().getPersons().values()) {    Person newPerson=pf.createPerson(person.getId());    Plan newPlan=pf.createPlan();    Plan plan=person.getSelectedPlan();    for (    PlanElement pe : plan.getPlanElements()) {      if (pe instanceof Activity) {        Activity act=(Activity)pe;        Activity newAct=pf.createActivityFromCoord(act.getType(),ct.transform(act.getCoord()));        if (act.getFacilityId() != null) {          newAct.setFacilityId(act.getFacilityId());        }        newPlan.addActivity(newAct);      } else       if (pe instanceof Leg) {        Leg leg=(Leg)pe;        Leg newLeg=pf.createLeg(leg.getMode());        newPlan.addLeg(newLeg);      } else {        throw new RuntimeException("What PlanElement is this: " + pe.getClass().toString());      }    }    newPerson.addPlan(newPlan);    newSc.getPopulation().addPerson(newPerson);  }  new PopulationWriter(newSc.getPopulation()).write("/Volumes/Nifty/workspace/coct-data/matsim/businessCases/facilityMove/plans.xml.gz");}  }
class C{  @Override public void onStart(){  super.onStart();  ButtonClickerObserver buttonClickerObserver=new ButtonClickerObserver(this);  PurchasingManager.registerObserver(buttonClickerObserver);}  }
class C{  public Vector3f normalize(){  float invLength=1.0f / length();  x*=invLength;  y*=invLength;  z*=invLength;  return this;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DatatypePackage.BOOLEAN_PROPERTY_ATTRIBUTE__TYPE:    setType((BooleanPropertyAttributeType)newValue);  return;case DatatypePackage.BOOLEAN_PROPERTY_ATTRIBUTE__VALUE:setValue((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testUnpackNothing() throws InvalidAdviceException {{    String bag="e";    Object[][] packedTuple={};    BaggageAPIForTest baggage=new BaggageAPIForTest().put(bag,packedTuple);    EmitAPIForTest results=new EmitAPIForTest();    Advice advice=AdviceTestUtils.newAdvice().observe().unpack(bag).emit("test1").build(baggage,results);    assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);    advice.advise();    results.check();    assertTrue("Expect 0 output tuples",results.emitted.size() == 0);  }{    String bag="bag1";    Object[][] packedTuple={};    BaggageAPIForTest baggage=new BaggageAPIForTest().put(bag,packedTuple);    EmitAPIForTest results=new EmitAPIForTest();    Advice advice=AdviceTestUtils.newAdvice().observe("oa","ob").unpack(bag,"pa","pb").emit("test1","oa","pb","pa","ob").build(baggage,results);    assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);    advice.advise("d8jdj2","ooowoowq");    results.check();    assertTrue("Expect 0 output tuples",results.emitted.size() == 0);  }}  }
class C{  public final void testNoWhitespaceWithContextAndResourceIdParameters(){  assertNotNull(Validators.noWhitespace(getContext(),android.R.string.cancel));}  }
class C{  SVG(Picture picture,RectF bounds){  this.picture=picture;  this.bounds=bounds;}  }
class C{  public static boolean hasMultipleVariants(TypeQualifierValue<?> tqv){  int count=0;  for (  TypeQualifierValue<?> t : instance.get().allKnownTypeQualifiers) {    if (t.typeQualifier.equals(tqv.typeQualifier)) {      count++;    }  }  return count > 1;}  }
class C{  private void removeDueToTypeChange(Type existingType,Events events){  existingType.removeReferences();  fireAndSave(new NodeEvent(existingType,NodeEventType.REMOVED,null),events);  log.warn("Type " + existingType + " removed from the class-cache as it changed the base type.");}  }
class C{  public void test_ticket_1202j() throws Exception {  new TestHelper("ticket-1202-group03-modified5","ticket-1202-group03-modified5.rq","ticket-1202-group03-modified5.ttl","ticket-1202-group03-modified5.srx").runTest();}  }
class C{  protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  try {    final PaypalRequest paypalRequest=new PaypalRequest(request.getRemoteAddr());    final PostMethod post=paypalRequest.buildPayRequest(request.getParameter("preapprovalKey"),request.getParameter("email"),request.getParameter("amount"));    setDefaultAttributes(request,paypalRequest,sendPaypalRequest(post));    request.getRequestDispatcher("/payResponse.jsp").forward(request,response);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected void readLSD(){  width=readShort();  height=readShort();  final int packed=read();  gctFlag=(packed & 0x80) != 0;  gctSize=2 << (packed & 7);  bgIndex=read();  pixelAspect=read();  try {    mainPixels=new byte[width * height];    mainScratch=new int[width * height];    copyScratch=new int[width * height];    previousImage=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_4444);    currentImage=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_4444);  } catch (  final OutOfMemoryError e) {    final int dimension=(width * height) / 2;    mainPixels=new byte[dimension];    mainScratch=new int[dimension];    copyScratch=new int[dimension];    previousImage=Bitmap.createBitmap(width / 2,height / 2,Bitmap.Config.ARGB_4444);    currentImage=Bitmap.createBitmap(width / 2,height / 2,Bitmap.Config.ARGB_4444);  }}  }
class C{  private void applyKitKatTranslucency(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    int topPadding=Common.getStatusBarHeight(mContext);    if (mDrawerParentLayout != null) {      mDrawerParentLayout.setPadding(0,(0 - topPadding),0,0);      mDrawerParentLayout.setClipToPadding(false);      int navigationBarHeight=Common.getNavigationBarHeight(mContext);      mGridView.setClipToPadding(false);      mGridView.setPadding(mGridView.getPaddingLeft(),mGridView.getPaddingTop(),mGridView.getPaddingRight(),mGridView.getPaddingBottom() + navigationBarHeight);    }  }}  }
class C{  public static void clearCell(final Cell<?> tableCell){  if (tableCell != null) {    tableCell.clearActor();    tableCell.reset();  }}  }
class C{  public Builder addIm(Im im){  if (im != null) {    this.ims.add(new Im.Builder(im).build());  }  return this;}  }
class C{  @Override public void registerOutParameter(int parameterIndex,int sqlType,String typeName) throws SQLException {  registerOutParameter(parameterIndex);}  }
class C{  @Override public void clearRecycle(){  _pool.clearRecycle();}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public void test_DELETE_accessPath_delete_o_URI() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,null,new URIImpl("http://xmlns.com/foaf/0.1/Person"));  assertEquals(3,mutationResult);}  }
class C{  public final static String formatNameValuePair(final NameValuePair nvp,final boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatNameValuePair(null,nvp,quote).toString();}  }
class C{  public PsiArrayType(@NotNull PsiType componentType){  this(componentType,PsiAnnotation.EMPTY_ARRAY);}  }
class C{  public SidedPlane(double pX,double pY,double pZ,Vector v,double D){  super(v,D);  sigNum=Math.signum(evaluate(pX,pY,pZ));  if (sigNum == 0.0)   throw new IllegalArgumentException("Cannot determine sidedness because check point is on plane.");}  }
class C{  int test(JCCompilationUnit tree){  sourcefile=tree.sourcefile;  found=new HashSet<Tree>();  scan(tree,null);  expect=new HashSet<Tree>();  reflectiveScan(tree);  if (found.equals(expect)) {    return found.size();  }  error(sourcefile.getName() + ": differences found");  if (found.size() != expect.size())   error("Size mismatch; found: " + found.size() + ", expected: "+ expect.size());  Set<Tree> missing=new HashSet<Tree>();  missing.addAll(expect);  missing.removeAll(found);  for (  Tree t : missing)   error(sourcefile,t,"missing");  Set<Tree> excess=new HashSet<Tree>();  excess.addAll(found);  excess.removeAll(expect);  for (  Tree t : excess)   error(sourcefile,t,"unexpected");  return 0;}  }
class C{  public static Animation fadeOutAnimation(long duration,long delay){  Animation fadeOut=new AlphaAnimation(1,0);  fadeOut.setInterpolator(new AccelerateInterpolator());  fadeOut.setStartOffset(delay);  fadeOut.setDuration(duration);  return fadeOut;}  }
class C{  public Collection engineGenerateCRLs(InputStream inStream) throws CRLException {  CRL crl;  List crls=new ArrayList();  while ((crl=engineGenerateCRL(inStream)) != null) {    crls.add(crl);  }  return crls;}  }
class C{  public static void close(Writer writer){  try {    if (writer != null) {      writer.close();    }  } catch (  IOException ioE) {  }}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public void testHotDeployEar(){  java.io.File earFile=new java.io.File("target/test-artifacts/simple-ear.ear");  EAR ear=(EAR)factory.createDeployable("jonas4x",earFile.getAbsolutePath(),DeployableType.EAR);  ear.setName("test");  setupAdminHotDeployment();  deployer.deploy(ear);  assertFalse(fileHandler.exists(deployer.getDeployableDir(ear) + "/simple-ear.ear"));  assertTrue(fileHandler.exists(deployer.getDeployableDir(ear) + "/test.ear"));}  }
class C{  static Object[] toArrayImpl(Collection<?> c){  return fillArray(c,new Object[c.size()]);}  }
class C{  public boolean hasChildren(){  checkChildren();  return children.length > 0;}  }
class C{  static int compareWithNullLast(final Comparable o1,final Comparable o2){  if (null == o1) {    if (null == o2) {      return 0;    }    return 1;  }  if (null == o2) {    return -1;  }  return o1.compareTo(o2);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @HLEFunction(nid=0x3278AB0C,version=150) public int sceNetAdhocGameModeCreateReplica(pspNetMacAddress macAddress,TPointer data,int size){  checkInitialized();  boolean found=false;  int result=0;  for (  GameModeArea gameModeArea : replicaGameModeAreas) {    if (isSameMacAddress(gameModeArea.macAddress.macAddress,macAddress.macAddress)) {      gameModeArea.addr=data.getAddress();      gameModeArea.size=size;      result=gameModeArea.id;      found=true;      break;    }  }  if (!found) {    GameModeArea gameModeArea=new GameModeArea(macAddress,data.getAddress(),size);    if (log.isDebugEnabled()) {      log.debug(String.format("Adding GameMode Replica %s",gameModeArea));    }    result=gameModeArea.id;    replicaGameModeAreas.add(gameModeArea);  }  startGameMode();  return result;}  }
class C{  public boolean hasLabel(){  return super.hasAttribute(LABEL);}  }
class C{  public void testFlipBitNegativeOutside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=150;  byte rBytes[]={-65,-1,-1,-1,-1,-1,-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static double rMSEfitness(boolean useTrainingData,GEPIndividual ind){  double rMSE=rMSErawFitness(useTrainingData,ind,0);  return (1000.0) / (1.0 + rMSE);}  }
class C{  public EventStoreBuilder executor(Executor executor){  this.settingsBuilder.executor(executor);  return this;}  }
class C{  private static double squash(double x){  return 1.0 / Math.log1p(x);}  }
class C{  public Object deserialize(String strWddx,boolean validate) throws ConverterException, IOException, FactoryConfigurationError {  try {    DOMParser parser=new DOMParser();    if (validate)     parser.setEntityResolver(new WDDXEntityResolver());    parser.parse(new InputSource(new StringReader(strWddx)));    Document doc=parser.getDocument();    NodeList docChldren=doc.getChildNodes();    Node wddxPacket=doc;    int len=docChldren.getLength();    for (int i=0; i < len; i++) {      Node node=docChldren.item(i);      if (node.getNodeName().equalsIgnoreCase("wddxPacket")) {        wddxPacket=node;        break;      }    }    NodeList nl=wddxPacket.getChildNodes();    int n=nl.getLength();    for (int i=0; i < n; i++) {      Node data=nl.item(i);      if (data.getNodeName().equals("data")) {        NodeList list=data.getChildNodes();        len=list.getLength();        for (int y=0; y < len; y++) {          Node node=list.item(y);          if (node instanceof Element)           return _deserialize((Element)node);        }      }    }    throw new IllegalArgumentException("Invalid WDDX Format: node 'data' not found in WDD packet");  } catch (  org.xml.sax.SAXException sxe) {    throw new IllegalArgumentException("XML Error: " + sxe.toString());  }}  }
class C{  @Override public void updateClob(String columnLabel,Clob x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateClob(" + quote(columnLabel) + ", x);");    }    checkClosed();    Value v;    if (x == null) {      v=ValueNull.INSTANCE;    } else {      v=conn.createClob(x.getCharacterStream(),-1);    }    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public MovieViewHolder onCreateViewHolder(ViewGroup parent,int viewType){  return new MovieViewHolder(mCursorAdapter.newView(mContext,mCursorAdapter.getCursor(),parent));}  }
class C{  public static char[] join(char[] arrayA,char... arrayB){  if ((arrayB == null) || (arrayB.length == 0)) {    return arrayA;  }  if ((arrayA == null) || (arrayA.length == 0)) {    return arrayB;  }  char[] array=new char[arrayA.length + arrayB.length];  System.arraycopy(arrayA,0,array,0,arrayA.length);  System.arraycopy(arrayB,0,array,arrayA.length,arrayB.length);  return array;}  }
class C{  public void testContainsClass() throws Exception {  JarArchive jar=new DefaultJarArchive(getResourcePath(PACKAGE_PATH + "containsclass.jar"));  assertTrue(jar.containsClass("test.Test"));}  }
class C{  public void write(byte[] b,int off,int n) throws IOException {  while (n > 0) {    int toCopy=Math.min(n,this.buff.length - this.len);    System.arraycopy(b,off,this.buff,this.len,toCopy);    this.len+=toCopy;    off+=toCopy;    n-=toCopy;    if (this.buff.length == this.len) {      this.out.write(this.buff,0,this.len);      this.len=0;    }  }}  }
class C{  private void addXmlReplacements(){  addXmlReplacement("conf/server.xml","//Server","port",GeneralPropertySet.RMI_PORT);  addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"port",ServletPropertySet.PORT);  addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"scheme",GeneralPropertySet.PROTOCOL);  addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"secure",TomcatPropertySet.HTTP_SECURE);  addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"emptySessionPath",TomcatPropertySet.CONNECTOR_EMPTY_SESSION_PATH);  addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"URIEncoding",TomcatPropertySet.URI_ENCODING);  addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"port",ServletPropertySet.PORT);  addXmlReplacement("conf/server.xml","//Server/Service/Connector[@protocol='AJP/1.3']","port",TomcatPropertySet.AJP_PORT,true);  addXmlReplacement("conf/server.xml","//Server/Service/Engine","defaultHost",GeneralPropertySet.HOSTNAME);  addXmlReplacement("conf/server.xml","//Server/Service/Engine/Host","name",GeneralPropertySet.HOSTNAME);  addXmlReplacement("conf/server.xml","//Server/Service/Engine/Host","appBase",TomcatPropertySet.WEBAPPS_DIRECTORY);}  }
class C{  public void copy(Hashtable props){  super.copy(props);  init(props);}  }
class C{  public ServerSetAnnouncer(URI uri,int servicePort,int statsPort,int shardId) throws UnknownHostException {  this.shardId=shardId;  this.localAddr=InetAddress.getLocalHost().getHostAddress();  this.serviceEndpoint=new InetSocketAddress(localAddr,servicePort);  InetSocketAddress statsEndpoint=new InetSocketAddress(localAddr,statsPort);  this.additionalEndpoints=new HashMap<String,InetSocketAddress>();  this.additionalEndpoints.put("aurora",statsEndpoint);  this.additionalEndpoints.put("stats",statsEndpoint);  this.additionalEndpoints.put("service",serviceEndpoint);  this.additionalEndpoints.put("thrift",serviceEndpoint);  this.zkServerSet=DLZkServerSet.of(uri,60000);}  }
class C{  public void describeService(final boolean describeStatistics,final boolean describeNamedGraphs){  g.add(aService,RDF.TYPE,SD.Service);  describeServiceEndpoints();  describeLanguages();  describeOtherFeatures();  describeInputFormats();  describeResultFormats();  describeEntailmentRegime();{    g.add(aService,SD.defaultDataset,aDefaultDataset);    g.add(aDefaultDataset,RDF.TYPE,SD.Dataset);    final VoID v=new VoID(g,tripleStore,serviceURI,aDefaultDataset);    v.describeDataSet(describeStatistics,describeNamedGraphs);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public UnexpectedContainerStatusEvent(Object source){  super(source);}  }
class C{  public static void materialize(Object obj){}  }
class C{  private void add(Geometry geom){  if (geom instanceof Polygon) {    addPolygon(geom);  } else   if (geom instanceof GeometryCollection) {    GeometryCollection gc=(GeometryCollection)geom;    for (int i=0; i < gc.getNumGeometries(); i++) {      add(gc.getGeometryN(i));    }  }}  }
class C{  public Matrix3d rotationYXZ(double angleY,double angleX,double angleZ){  double cosY=Math.cos(angleY);  double sinY=Math.sin(angleY);  double cosX=Math.cos(angleX);  double sinX=Math.sin(angleX);  double cosZ=Math.cos(angleZ);  double sinZ=Math.sin(angleZ);  double m_sinY=-sinY;  double m_sinX=-sinX;  double m_sinZ=-sinZ;  double nm00=cosY;  double nm02=m_sinY;  double nm20=sinY;  double nm22=cosY;  double nm10=nm20 * sinX;  double nm11=cosX;  double nm12=nm22 * sinX;  m20=nm20 * cosX;  m21=m_sinX;  m22=nm22 * cosX;  m00=nm00 * cosZ + nm10 * sinZ;  m01=nm11 * sinZ;  m02=nm02 * cosZ + nm12 * sinZ;  m10=nm00 * m_sinZ + nm10 * cosZ;  m11=nm11 * cosZ;  m12=nm02 * m_sinZ + nm12 * cosZ;  return this;}  }
class C{  public boolean isCsVideoSupported(){  return mCsVideo;}  }
class C{  protected boolean[] canHandleMissing(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing,int missingLevel){  if (missingLevel == 100) {    print("100% ");  }  print("missing");  if (predictorMissing) {    print(" predictor");    if (classMissing) {      print(" and");    }  }  if (classMissing) {    print(" class");  }  print(" values");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("missing");  accepts.add("value");  accepts.add("train");  int numTrain=getNumInstances(), numClasses=2;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  public static Vector3 cross(Vector3 a,Vector3 b){  return new Vector3(a.getY() * b.getZ() - a.getZ() * b.getY(),a.getZ() * b.getX() - a.getX() * b.getZ(),a.getX() * b.getY() - a.getY() * b.getX());}  }
class C{  public RefParam createRefParam(){  RefParamImpl refParam=new RefParamImpl();  return refParam;}  }
class C{  public IntsRef(int[] ints,int offset,int length){  this.ints=ints;  this.offset=offset;  this.length=length;  assert isValid();}  }
class C{  public long manhattanDistance(final MutableInt3D p){  return Math.abs((long)this.x - p.x) + Math.abs((long)this.y - p.y) + Math.abs((long)this.z - p.z);}  }
class C{  private void write(boolean writeHeader,boolean writeTrailer,IIOMetadata sm,IIOImage iioimage,ImageWriteParam p) throws IOException {  clearAbortRequest();  RenderedImage image=iioimage.getRenderedImage();  if (needToCreateIndex(image)) {    image=PaletteBuilder.createIndexedImage(image);    iioimage.setRenderedImage(image);  }  ColorModel colorModel=image.getColorModel();  SampleModel sampleModel=image.getSampleModel();  Rectangle sourceBounds=new Rectangle(image.getMinX(),image.getMinY(),image.getWidth(),image.getHeight());  Dimension destSize=new Dimension();  computeRegions(sourceBounds,destSize,p);  GIFWritableImageMetadata imageMetadata=null;  if (iioimage.getMetadata() != null) {    imageMetadata=new GIFWritableImageMetadata();    convertMetadata(IMAGE_METADATA_NAME,iioimage.getMetadata(),imageMetadata);    if (imageMetadata.localColorTable == null) {      imageMetadata.localColorTable=createColorTable(colorModel,sampleModel);      if (colorModel instanceof IndexColorModel) {        IndexColorModel icm=(IndexColorModel)colorModel;        int index=icm.getTransparentPixel();        imageMetadata.transparentColorFlag=(index != -1);        if (imageMetadata.transparentColorFlag) {          imageMetadata.transparentColorIndex=index;        }      }    }  }  byte[] globalColorTable=null;  if (writeHeader) {    if (sm == null) {      throw new IllegalArgumentException("Cannot write null header!");    }    GIFWritableStreamMetadata streamMetadata=(GIFWritableStreamMetadata)sm;    if (streamMetadata.version == null) {      streamMetadata.version="89a";    }    if (streamMetadata.logicalScreenWidth == GIFMetadata.UNDEFINED_INTEGER_VALUE) {      streamMetadata.logicalScreenWidth=destSize.width;    }    if (streamMetadata.logicalScreenHeight == GIFMetadata.UNDEFINED_INTEGER_VALUE) {      streamMetadata.logicalScreenHeight=destSize.height;    }    if (streamMetadata.colorResolution == GIFMetadata.UNDEFINED_INTEGER_VALUE) {      streamMetadata.colorResolution=colorModel != null ? colorModel.getComponentSize()[0] : sampleModel.getSampleSize()[0];    }    if (streamMetadata.globalColorTable == null) {      if (isWritingSequence && imageMetadata != null && imageMetadata.localColorTable != null) {        streamMetadata.globalColorTable=imageMetadata.localColorTable;      } else       if (imageMetadata == null || imageMetadata.localColorTable == null) {        streamMetadata.globalColorTable=createColorTable(colorModel,sampleModel);      }    }    globalColorTable=streamMetadata.globalColorTable;    int bitsPerPixel;    if (globalColorTable != null) {      bitsPerPixel=getNumBits(globalColorTable.length / 3);    } else     if (imageMetadata != null && imageMetadata.localColorTable != null) {      bitsPerPixel=getNumBits(imageMetadata.localColorTable.length / 3);    } else {      bitsPerPixel=sampleModel.getSampleSize(0);    }    writeHeader(streamMetadata,bitsPerPixel);  } else   if (isWritingSequence) {    globalColorTable=theStreamMetadata.globalColorTable;  } else {    throw new IllegalArgumentException("Must write header for single image!");  }  writeImage(iioimage.getRenderedImage(),imageMetadata,p,globalColorTable,sourceBounds,destSize);  if (writeTrailer) {    writeTrailer();  }}  }
class C{  public int nextInt(int n){  int res=(int)(randomLong() % n);  return (res < 0) ? -res : res;}  }
class C{  public Log createLog(String classLabel){  try {    return createLogFromClassName(classLabel);  } catch (  Exception e) {    Log log=new LocalLog(classLabel);    log.log(Level.WARNING,"Unable to call constructor with single String argument for class " + logClassName + ", so had to use local log: "+ e.getMessage());    return log;  }}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {  try {    issetBitfield=0;    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));  } catch (  org.apache.thrift.TException te) {    throw new java.io.IOException(te);  }}  }
class C{  public static final Parameter base(){  return new Parameter(P_SPATIAL);}  }
class C{  @Override public void putAll(Map<? extends V,? extends Float> map){  Iterator<? extends Entry<? extends V,? extends Float>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends V,? extends Float> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public InputStreamResource(InputStream inputStream){  this(inputStream,"resource loaded through InputStream");}  }
class C{  public double probabilityOf(T key){  Integer value=getCount(key);  if (0 == total || 0 == value.intValue()) {    return 0.0;  } else {    return value.doubleValue() / total;  }}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  public void readExif(byte[] jpeg) throws IOException {  readExif(new ByteArrayInputStream(jpeg));}  }
class C{  private void assertSize(int minlength) throws FormatException, EOFException {  try {    if (bytesinbuffer < minlength) {      if (curptr != 0) {        firstbyteoffset+=curptr;        System.arraycopy(buffer,curptr,buffer,0,bytesinbuffer);        curptr=0;      }      int err=super.read(buffer,bytesinbuffer,buffer.length - bytesinbuffer);      if (err == -1) {        if (available() <= 0) {          throw new EOFException("BinaryBufferedFile, no bytes at all, trying to read " + minlength);        } else {          throw new FormatException("BinaryBufferedFile: failed to read " + minlength + " bytes, with "+ bytesinbuffer+ " bytes in the buffer and "+ available()+ " bytes available, have read "+ curptr+ " bytes.");        }      }      bytesinbuffer+=err;      assertSize(minlength);    }  } catch (  EOFException e) {    throw e;  }catch (  IOException i) {    throw new FormatException("assertSize IOException: " + i.getMessage());  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapsetnameditemwithnewvalue.class,args);}  }
class C{  protected void useSslForceTls(String tls,String ciphers) throws Exception {  Assume.assumeTrue(haveSsl(sharedConnection));  Assume.assumeFalse(System.getProperty("java.version").contains("1.7."));  Properties info=new Properties();  info.setProperty("useSSL","true");  info.setProperty("trustServerCertificate","true");  info.setProperty("enabledSslProtocolSuites",tls);  if (ciphers != null)   info.setProperty("enabledSslCipherSuites",ciphers);  Connection connection=setConnection(info);  try {    connection.createStatement().execute("select 1");  }  finally {    connection.close();  }}  }
class C{  @Override public boolean equals(final Object other){  if (other == this) {    return true;  } else   if (other == null) {    return false;  } else   if (other.getClass() == Expression.class) {    final Expression o=(Expression)other;    if (matcher != null) {      if ((o.matcher == null) || !matcher.equals(o.matcher)) {        return false;      }    } else {      if (o.matcher != null) {        return false;      }    }    if (normalized.length() > 0) {      return normalized.equals(o.normalized);    } else {      return original.equals(o.original);    }  } else {    return false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:32.755 -0500",hash_original_method="8C4FBB07B0C99590FAA381B302C95C66",hash_generated_method="742DE2C5038A96164760FF4738F32B6E") public static Bitmap createImageThumbnail(String filePath,int kind){  boolean wantMini=(kind == Images.Thumbnails.MINI_KIND);  int targetSize=wantMini ? TARGET_SIZE_MINI_THUMBNAIL : TARGET_SIZE_MICRO_THUMBNAIL;  int maxPixels=wantMini ? MAX_NUM_PIXELS_THUMBNAIL : MAX_NUM_PIXELS_MICRO_THUMBNAIL;  SizedThumbnailBitmap sizedThumbnailBitmap=new SizedThumbnailBitmap();  Bitmap bitmap=null;  MediaFileType fileType=MediaFile.getFileType(filePath);  if (fileType != null && fileType.fileType == MediaFile.FILE_TYPE_JPEG) {    createThumbnailFromEXIF(filePath,targetSize,maxPixels,sizedThumbnailBitmap);    bitmap=sizedThumbnailBitmap.mBitmap;  }  if (bitmap == null) {    try {      FileDescriptor fd=new FileInputStream(filePath).getFD();      BitmapFactory.Options options=new BitmapFactory.Options();      options.inSampleSize=1;      options.inJustDecodeBounds=true;      BitmapFactory.decodeFileDescriptor(fd,null,options);      if (options.mCancel || options.outWidth == -1 || options.outHeight == -1) {        return null;      }      options.inSampleSize=computeSampleSize(options,targetSize,maxPixels);      options.inJustDecodeBounds=false;      options.inDither=false;      options.inPreferredConfig=Bitmap.Config.ARGB_8888;      bitmap=BitmapFactory.decodeFileDescriptor(fd,null,options);    } catch (    IOException ex) {      Log.e(TAG,"",ex);    }catch (    OutOfMemoryError oom) {      Log.e(TAG,"Unable to decode file " + filePath + ". OutOfMemoryError.",oom);    }  }  if (kind == Images.Thumbnails.MICRO_KIND) {    bitmap=extractThumbnail(bitmap,TARGET_SIZE_MICRO_THUMBNAIL,TARGET_SIZE_MICRO_THUMBNAIL,OPTIONS_RECYCLE_INPUT);  }  return bitmap;}  }
class C{  public Website site(){  return mSite;}  }
class C{  public static boolean onTheSameLine(double x0,double y0,double x1,double y1,double x2,double y2){  return pointPosition(x0,y0,x1,y1,x2,y2) == 0;}  }
class C{  static Task<Void> callbackOnMainThreadAsync(Task<Void> task,final ParseCallback1<ParseException> callback){  return callbackOnMainThreadAsync(task,callback,false);}  }
class C{  private static boolean isValueRequired(VOParameter parameter,ParameterDefinition paramDef){  if (parameter.isConfigurable()) {    return false;  }  return paramDef.isMandatory();}  }
class C{  public boolean refreshDomainData(AppContext userContext,String projectId,String domainId){  try {    Space space=getSpace(userContext,projectId,domainId);    String uuid=space.getTableUUID();    if (uuid != null) {      RedisCacheManager.getInstance().refresh(uuid);      RedisCacheManager.getInstance().refresh(space.getDomain().getId().toUUID());      DomainHierarchyManager.INSTANCE.invalidate(new DomainPK(projectId,domainId));      return true;    }  } catch (  ScopeException e) {  }catch (  InterruptedException e) {    e.printStackTrace();  }  return false;}  }
class C{  public static void init(Context context,boolean is_top){  cameraManager=new CameraManager(context,is_top);}  }
class C{  public <K,V>JavaPairRDD<T,V> joinGeodeRegion(String regionPath,Function<T,K> func,GeodeConnectionConf connConf){  GeodeJoinRDD<T,K,V> rdd=rddf.joinGeodeRegion(regionPath,func,connConf);  ClassTag<T> kt=fakeClassTag();  ClassTag<V> vt=fakeClassTag();  return new JavaPairRDD<>(rdd,kt,vt);}  }
class C{  private void handleReceivedPointerDown(int pointerIndex,MotionEvent event){  final int pointerId=event.getPointerId(pointerIndex);  final int pointerFlag=(1 << pointerId);  mLastReceivedUpPointerId=0;  mLastReceivedUpPointerDownTime=0;  mLastReceivedUpPointerActive=false;  mLastReceivedUpPointerDownX=0;  mLastReceivedUpPointerDownX=0;  mLastReceivedDownEdgeFlags=event.getEdgeFlags();  mReceivedPointersDown|=pointerFlag;  mReceivedPointerDownX[pointerId]=event.getX(pointerIndex);  mReceivedPointerDownY[pointerId]=event.getY(pointerIndex);  mReceivedPointerDownTime[pointerId]=event.getEventTime();  if (!mHasMovingActivePointer) {    mActivePointers=pointerFlag;    mPrimaryActivePointerId=pointerId;  } else {    mActivePointers|=pointerFlag;  }}  }
class C{  public void draw(float[] mvpMatrix,boolean changeColor){  if (mProgram != 0) {    GLES20.glUseProgram(mProgram);    mPositionHandle=GLES20.glGetAttribLocation(mProgram,"vPosition");    GLES20.glEnableVertexAttribArray(mPositionHandle);    mColor=GLES20.glGetAttribLocation(mProgram,"vColor");    GLES20.glEnableVertexAttribArray(mColor);    mMVPMatrixHandle=GLES20.glGetUniformLocation(mProgram,"uMVPMatrix");    checkGlError("glGetUniformLocation");    GLES20.glUniformMatrix4fv(mMVPMatrixHandle,1,false,mvpMatrix,0);    checkGlError("glUniformMatrix4fv");    GLES20.glVertexAttribPointer(mPositionHandle,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,VERTEX_STRIDE,mVertexBuffer);    if (changeColor) {      GLES20.glVertexAttribPointer(mColor,COORDS_PER_COLORS,GLES20.GL_FLOAT,false,COLORS_STRIDE,mColor2Buffer);    } else {      GLES20.glVertexAttribPointer(mColor,COORDS_PER_COLORS,GLES20.GL_FLOAT,false,COLORS_STRIDE,mColor1Buffer);    }    GLES20.glDrawElements(GLES20.GL_TRIANGLES,INDICES.length,GLES20.GL_UNSIGNED_SHORT,mIndexBuffer);    GLES20.glDisableVertexAttribArray(mPositionHandle);    GLES20.glDisableVertexAttribArray(mColor);  }}  }
class C{  public SortingParams by(final byte[] pattern){  params.add(BY.raw);  params.add(pattern);  return this;}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public CalculatorWrapper(DataWrapper data,Parameters params){  if (data == null) {    throw new NullPointerException("The given data must not be null");  }  if (params == null) {    throw new NullPointerException("The given parameters must not be null");  }  DataModelList list=new DataModelList();  DataModelList originals=data.getDataModelList();  for (  DataModel model : originals) {    DataSet copy=copy((DataSet)model);    List<String> equations=new ArrayList<>();    int size=((List<String>)params.get("equations",null)).size();    String[] displayEquations=((List<String>)params.get("equations",null)).toArray(new String[size]);    for (    String equation : displayEquations) {      if (equation.contains("$")) {        for (        Node node : copy.getVariables()) {          equations.add(equation.replace("$",node.getName()));        }      } else {        equations.add(equation);      }    }    if (!equations.isEmpty()) {      try {        Transformation.transform(copy,equations.toArray(new String[equations.size()]));      } catch (      ParseException e) {        throw new IllegalStateException("Was given unparsable expressions.");      }      list.add(copy);    } else {      list.add(copy);    }  }  setDataModel(list);  setSourceGraph(data.getSourceGraph());  LogDataUtils.logDataModelList("Result data from a calculator operation.",getDataModelList());}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public void testCopying2() throws Exception {  TungstenProperties props=makeProperties();  TungstenProperties props2=new TungstenProperties();  for (  String name : props.keyNames()) {    props2.setObject(name,props.getString(name));  }  assertEquals("Comparing properties from Map",props,props2);}  }
class C{  public final AspectContainer add(IAspectType type,int amount){  this.addAmount(type,amount,true);  return this;}  }
class C{  private void addAttributeStatements(AssertionType assertion){  AttributeStatementType attrStmt=_assertionFactory.createAttributeStatementType();  AttributeType attr=_assertionFactory.createAttributeType();  attr.setName(AttributeNames.HTTP_RSA_COM_SCHEMAS_ATTR_NAMES_2009_01_GROUP_IDENTITY.toString());  attr.getAttributeValue().addAll(serializeGroups(_spec.getGroupList()));  attr.setFriendlyName("Group");  attr.setNameFormat(ATTRIBUTE_FORMAT_URI);  attrStmt.getAttribute().add(attr);  assertion.getAuthnStatementOrAttributeStatement().add(attrStmt);}  }
class C{  public boolean isValidUse(AnnotatedPrimitiveType type,Tree tree){  return true;}  }
class C{  @Override public FileInfo execute(String[] params){  try {    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    int dsid=Integer.parseInt(commandLine.getOptionValue("destination-server-id"));    LOGGER.debug("destination-server-id is " + dsid);    Long sbid=Long.parseLong(commandLine.getOptionValue("source-batch-id"));    LOGGER.debug("source-batch-id is " + sbid);    Long dbid=Long.parseLong(commandLine.getOptionValue("destination-batch-id"));    LOGGER.debug("destination-batch-id is " + dbid);    String prefix=commandLine.getOptionValue("destination-path-prefix");    LOGGER.debug("destination-batch-id is " + prefix);    CopyFileInfo copyFileInfo=new CopyFileInfo();    copyFileInfo.setDestBatchId(dbid);    copyFileInfo.setDestPrefix(prefix);    copyFileInfo.setDestServerId(dsid);    copyFileInfo.setSourceBatchId(sbid);    return copyFileDAO.copyFile(copyFileInfo);  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public PowerContainerVm(final int id,final int userId,final double mips,final float ram,final long bw,final long size,final String vmm,final ContainerScheduler containerScheduler,final ContainerRamProvisioner containerRamProvisioner,final ContainerBwProvisioner containerBwProvisioner,List<? extends ContainerPe> peList,final double schedulingInterval){  super(id,userId,mips,ram,bw,size,vmm,containerScheduler,containerRamProvisioner,containerBwProvisioner,peList);  setSchedulingInterval(schedulingInterval);}  }
class C{  @SuppressWarnings("unchecked") void register(GlowEntity entity){  if (entity.id == 0) {    throw new IllegalStateException("Entity has not been assigned an id.");  }  entities.put(entity.id,entity);  ((Collection<GlowEntity>)getAll(entity.getClass())).add(entity);  ((GlowChunk)entity.location.getChunk()).getRawEntities().add(entity);}  }
class C{  @Override public void shutdown(ShutdownModeAmp mode){}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && success)   insert_Accounting("M_Warehouse_Acct","C_AcctSchema_Default",null);  return success;}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (propertyName.equals("text")) {    super.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  public <T>T fromXML(final String xml){  return fromXML(new StringReader(xml));}  }
class C{  public void deleteChar(AttributedCharacterIterator newParagraph,int deletePos){  measurer.deleteChar(newParagraph,deletePos);  limit=newParagraph.getEndIndex();  pos=start=newParagraph.getBeginIndex();  charIter.reset(measurer.getChars(),start);  breakIter.setText(charIter);}  }
class C{  public static Validator<CharSequence> emailAddress(@NonNull final Context context,@StringRes final int resourceId){  return new EmailAddressValidator(context,resourceId);}  }
class C{  private int assignComplexOrdinal(CarbonDimension parentDimension,int complexDimensionOrdianl){  for (int i=0; i < parentDimension.getNumberOfChild(); i++) {    CarbonDimension dimension=parentDimension.getListOfChildDimensions().get(i);    if (dimension.getNumberOfChild() > 0) {      dimension.setComplexTypeOridnal(++complexDimensionOrdianl);      complexDimensionOrdianl=assignComplexOrdinal(dimension,complexDimensionOrdianl);    } else {      parentDimension.getListOfChildDimensions().get(i).setComplexTypeOridnal(++complexDimensionOrdianl);    }  }  return complexDimensionOrdianl;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_METHOD_BODY_2__POSTCONDITION_1:    getPostcondition_1().clear();  return;}super.eUnset(featureID);}  }
class C{  private void initialize(){  this.setSize(417,276);  this.setTitle("Details for user \"" + data.getUsername() + "\"");  this.setContentPane(getJContentPane());}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  public void testAppendParentRoot() throws Exception {  if (appendSupported()) {    IgfsPath file=new IgfsPath("/" + FILE.name());    createFile(igfs,file,true,BLOCK_SIZE,chunk);    appendFile(igfs,file,chunk);    checkFile(igfs,igfsSecondary,file,chunk,chunk);  }}  }
class C{  private String generateQuery(){  final StringBuffer query=new StringBuffer(1024);  final String columnsToShow=" absEst.id, absEst.lat, absEst.lon, absEst.estimateNumber,absEst.name, coalesce(absEst.workValue,0), " + " (select sum(coalesce(ovr.amount,0)) from OverheadValue ovr where ovr.abstractEstimate=absEst)  , " + " (select wpd.worksPackage.wpNumber from WorksPackageDetails wpd where wpd.estimate=absEst and wpd.worksPackage.egwStatus.code not in ('" + WorksConstants.NEW + "','"+ WorksConstants.CANCELLED_STATUS+ "') ), "+ " (select to_char(offLineStatus.statusDate,'dd/MM/YYYY') from OfflineStatus offLineStatus where offLineStatus.objectId = ( select wpd.worksPackage.id from WorksPackageDetails wpd where wpd.estimate=absEst and wpd.worksPackage.egwStatus.code not in ('"+ WorksConstants.NEW+ "','"+ WorksConstants.CANCELLED_STATUS+ "')  )"+ " and offLineStatus.egwStatus.code='"+ WorksConstants.TENDER_DOCUMENT_RELEASED+ "' and objectType='WorksPackage' ), "+ " absEst.parentCategory.description, workSubType.description, projcode.id ";  final String columnsToShowWhenWOEIsJoined=" absEst.id, absEst.lat, absEst.lon, absEst.estimateNumber,absEst.name, coalesce(absEst.workValue,0)," + " (select sum(coalesce(ovr.amount,0)) from OverheadValue ovr where ovr.abstractEstimate=absEst)  ," + " (select wpd.worksPackage.wpNumber from WorksPackageDetails wpd where wpd.estimate=absEst  and wpd.worksPackage.egwStatus.code not in ('" + WorksConstants.NEW + "','"+ WorksConstants.CANCELLED_STATUS+ "') ), "+ " (select to_char(offLineStatus.statusDate,'dd/MM/YYYY') from OfflineStatus offLineStatus where offLineStatus.objectId = ( select wpd.worksPackage.id from WorksPackageDetails wpd where wpd.estimate=absEst and wpd.worksPackage.egwStatus.code not in ('"+ WorksConstants.NEW+ "','"+ WorksConstants.CANCELLED_STATUS+ "') )"+ " and offLineStatus.egwStatus.code='"+ WorksConstants.TENDER_DOCUMENT_RELEASED+ "' and objectType='WorksPackage' ), "+ " absEst.parentCategory.description, workSubType.description , projcode.id,  "+ " to_char(wo.workOrderDate,'dd/MM/YYYY'), wo.contractPeriod, wo.contractor.name, "+ " (select to_char(offLineStatus.statusDate,'dd/MM/YYYY') from OfflineStatus offLineStatus where offLineStatus.objectId= wo.id  "+ "    and offLineStatus.egwStatus.code='"+ WorksConstants.WO_STATUS_WOCOMMENCED+ "' and objectType='WorkOrder') ";  if (contractorId != null && contractorId != -1) {    query.append("select " + columnsToShowWhenWOEIsJoined + " from AbstractEstimate absEst left join absEst.category workSubType left join absEst.projectCode projcode , WorkOrder wo, WorkOrderEstimate woe ");    query.append(" where  absEst.id=woe.estimate.id and wo.id=woe.workOrder.id  and wo.contractor.id=" + contractorId);    query.append(" and absEst.parent is null ");  } else {    query.append("select " + columnsToShow + " from AbstractEstimate absEst left join absEst.category workSubType left join absEst.projectCode projcode ");    query.append(" where absEst.parent is null ");  }  query.append(" and absEst.lat is not null and absEst.lon is not null and absEst.egwStatus.code not in ('" + WorksConstants.NEW + "','"+ WorksConstants.CANCELLED_STATUS+ "') ");  if (zoneId != null && zoneId != -1)   query.append(" and absEst.ward.parent.id=" + zoneId);  if (wardId != null && wardId != -1)   query.append(" and absEst.ward.id=" + wardId);  if (category != null && category != -1)   query.append(" and absEst.category.id=" + category); else   if (parentCategory != null && parentCategory != -1)   query.append(" and absEst.parentCategory.id=" + parentCategory);  if (expenditureType != null && expenditureType != -1)   query.append(" and absEst.type.id=" + expenditureType);  if (StringUtils.isNotBlank(estimatenumber))   query.append(" and UPPER(absEst.estimateNumber) like '%" + estimatenumber.toUpperCase() + "%'");  query.append(" order by absEst.id ");  return query.toString();}  }
class C{  ByteToChar(){  _charBuffer=new StringBuilder();}  }
class C{  public static void writeConfigFile(OutputStream outputStream,File searchDir) throws SQLException, IOException {  List<Class<?>> classList=new ArrayList<Class<?>>();  findAnnotatedClasses(classList,searchDir,0);  writeConfigFile(outputStream,classList.toArray(new Class[classList.size()]));}  }
class C{  public boolean isSessionToken(String site,String token){  if (!site.contains(":")) {    site=site + (":80");  }  HttpSessionTokensSet siteTokens=sessionTokens.get(site);  if (siteTokens == null)   return false;  return siteTokens.isSessionToken(token);}  }
class C{  public void addScreenSize(){  try {    JFrame dummy=new JFrame();    try {      Insets insets=dummy.getToolkit().getScreenInsets(dummy.getGraphicsConfiguration());      Dimension screen=dummy.getToolkit().getScreenSize();      addString("Screen size h:" + screen.height + ", w:"+ screen.width+ " Inset t:"+ insets.top+ ", b:"+ insets.bottom+ "; l:"+ insets.left+ ", r:"+ insets.right);    } catch (    NoSuchMethodError ex) {      Dimension screen=dummy.getToolkit().getScreenSize();      addString("Screen size h:" + screen.height + ", w:"+ screen.width+ " (No Inset method available)");    }  } catch (  HeadlessException ex) {    addString("(Cannot sense screen size due to " + ex.toString() + ")");  }  try {    int dpi=Toolkit.getDefaultToolkit().getScreenResolution();    addString("Screen resolution: " + dpi);  } catch (  HeadlessException ex) {    addString("Screen resolution not available");  }  try {    GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();    addString("Environment max bounds: " + ge.getMaximumWindowBounds());    try {      GraphicsDevice[] gs=ge.getScreenDevices();      for (      GraphicsDevice gd : gs) {        GraphicsConfiguration[] gc=gd.getConfigurations();        for (int i=0; i < gc.length; i++) {          addString("bounds[" + i + "] = "+ gc[i].getBounds());        }        addString("Device: " + gd.getIDstring() + " bounds = "+ gd.getDefaultConfiguration().getBounds()+ " "+ gd.getDefaultConfiguration().toString());      }    } catch (    HeadlessException ex) {      addString("Exception getting device bounds " + ex.getMessage());    }  } catch (  HeadlessException ex) {    addString("Exception getting max window bounds " + ex.getMessage());  }  try {    Insets jmriInsets=JmriInsets.getInsets();    addString("JmriInsets t:" + jmriInsets.top + ", b:"+ jmriInsets.bottom+ "; l:"+ jmriInsets.left+ ", r:"+ jmriInsets.right);  } catch (  Throwable ex) {    addString("Exception getting JmriInsets" + ex.getMessage());  }}  }
class C{  private boolean invalidUserURL(final String userURL){  try {    new URL(userURL);  } catch (  final MalformedURLException e) {    return true;  }  return userURL.length() > MAX_USER_URL_LENGTH;}  }
class C{  public DisplayText(String text){  if (text.length() > DISPLAY_TEXT_MAXIMUM_SIZE) {    text=text.substring(0,DISPLAY_TEXT_MAXIMUM_SIZE);  }  contentType=CONTENT_TYPE_UTF8STRING;  contents=new DERUTF8String(text);}  }
class C{  public static <T extends Annotation>Iterable<Entry<T,String>> select(JCas aJCas,Class<T> aAnchor,String aPath) throws FeaturePathException {  return iterable(FeaturePathIterator.create(aJCas,aAnchor,aPath));}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  private byte[] encrypt(final byte[] bytes) throws IOException {  try {    return this.create(Cipher.ENCRYPT_MODE).doFinal(bytes);  } catch (  final BadPaddingException ex) {    throw new IOException(ex);  }catch (  final IllegalBlockSizeException ex) {    throw new IOException(ex);  }}  }
class C{  protected void populateResults(ScoreDoc[] results,int howMany){  for (int i=howMany - 1; i >= 0; i--) {    results[i]=pq.pop();  }}  }
class C{  @Override public void doTests(){  if (getClassifier() == null) {    println("\n=== No classifier set ===");    return;  }  println("\n=== Check on Classifier: " + getClassifier().getClass().getName() + " ===\n");  m_ClasspathProblems=false;  println("--> Checking for interfaces");  canTakeOptions();  boolean updateableClassifier=updateableClassifier()[0];  boolean weightedInstancesHandler=weightedInstancesHandler()[0];  boolean multiInstanceHandler=multiInstanceHandler()[0];  println("--> Classifier tests");  declaresSerialVersionUID();  testToString();  testsPerClassType(Attribute.NOMINAL,updateableClassifier,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.NUMERIC,updateableClassifier,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.DATE,updateableClassifier,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.STRING,updateableClassifier,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.RELATIONAL,updateableClassifier,weightedInstancesHandler,multiInstanceHandler);}  }
class C{  public ExceptionHandlerBasicBlock(int loc,InlineSequence position,TypeOperand type,ControlFlowGraph cfg){  super(loc,position,cfg);  exceptionTypes=new TypeOperand[1];  exceptionTypes[0]=type;  setExceptionHandlerBasicBlock();  liveSet=null;}  }
class C{  public static Canopy aggregateCanopies(List<Canopy> canopies,double aggregationT1,double aggregationT2,NormalizableDistance finalDistanceFunction,Filter missingValuesReplacer,int finalNumCanopies){  Instances collectedCanopies=new Instances(canopies.get(0).getCanopies(),0);  Instances finalCanopies=new Instances(collectedCanopies,0);  List<double[][]> finalCenters=new ArrayList<double[][]>();  List<double[]> finalMissingNumerics=new ArrayList<double[]>();  List<double[]> finalT2Densities=new ArrayList<double[]>();  List<Instance> finalCanopiesList=new ArrayList<Instance>();  List<double[][]> centersForEachCanopy=new ArrayList<double[][]>();  List<double[]> numMissingNumericsForEachCanopy=new ArrayList<double[]>();  for (  Canopy c : canopies) {    Instances tempC=c.getCanopies();    for (int i=0; i < tempC.numInstances(); i++) {      collectedCanopies.add(tempC.instance(i));      centersForEachCanopy.add(c.m_canopyCenters.get(i));      numMissingNumericsForEachCanopy.add(c.m_canopyNumMissingForNumerics.get(i));    }  }  for (int i=0; i < collectedCanopies.numInstances(); i++) {    boolean addPoint=true;    Instance candidate=collectedCanopies.instance(i);    double[][] candidateCenter=centersForEachCanopy.get(i);    double[] candidateMissingNumerics=numMissingNumericsForEachCanopy.get(i);    for (int j=0; j < finalCanopiesList.size(); j++) {      Instance fc=finalCanopiesList.get(j);      if (finalDistanceFunction.distance(candidate,fc) < aggregationT2) {        addPoint=false;        double[][] center=finalCenters.get(j);        double[] missingNumerics=finalMissingNumerics.get(j);        finalT2Densities.get(j)[0]+=candidate.weight();        for (int k=0; k < candidate.numAttributes(); k++) {          missingNumerics[k]+=candidateMissingNumerics[k];          for (int l=0; l < center[k].length; l++) {            center[k][l]+=candidateCenter[k][l];          }        }        break;      }    }    if (addPoint) {      finalCanopiesList.add(candidate);      finalCanopies.add(candidate);      finalCenters.add(candidateCenter);      finalMissingNumerics.add(candidateMissingNumerics);      double[] dens=new double[1];      dens[0]=candidate.weight();      finalT2Densities.add(dens);    }  }  Canopy finalC=new Canopy();  finalC.setCanopies(finalCanopies);  finalC.setMissingValuesReplacer(missingValuesReplacer);  finalC.m_distanceFunction=finalDistanceFunction;  finalC.m_canopyCenters=finalCenters;  finalC.m_canopyNumMissingForNumerics=finalMissingNumerics;  finalC.m_canopyT2Density=finalT2Densities;  finalC.m_t2=aggregationT2;  finalC.m_t1=aggregationT1;  try {    finalC.setNumClusters(finalNumCanopies);  } catch (  Exception e) {  }  finalC.updateFinished();  return finalC;}  }
class C{  public void zoomIn(){  final ScalingControl scaler=new CrossoverScalingControl();  scaler.scale(this,1.1f,getCenter());}  }
class C{  public void fAAccountsCompleted(){  DBTableLookupServiceProvider.clearLookup();}  }
class C{  public StopWordTokenizer(Tokenizer base,Collection<String> stopWords){  this.base=base;  this.stopWords=new HashSet<String>(stopWords);}  }
class C{  public String toValue(){  return toString(valueNode);}  }
class C{  @Override protected void doRandomMutation(int iChromIndex){  Chromosome c1=chromosomes[iChromIndex];  if (c1.genes.length < 1) {    return;  }  int r1=(c1.genes.length > 2) ? Compute.randomInt(c1.genes.length - 1) : 0;  CEntity target=null;  boolean done=false;  if ((r1 % 2) == 1) {    c1.genes[r1]--;    if ((c1.genes[r1] < 0) && (attack.size() > r1)) {      c1.genes[r1]=attack.get(r1).size() - 1;    } else {      c1.genes[r1]=0;    }    return;  }  for (int i=0; (i < (c1.genes.length - 1)) && !done; i++) {    int iGene=(i + r1) % (c1.genes.length - 1);    AttackOption a=attack.get(iGene).get(c1.genes[iGene]);    if (a.target != null) {      target=a.target;      done=true;    }  }  if (target == null) {    if ((attack.size() > r1) && (r1 > 1)) {      c1.genes[r1]=Compute.randomInt(attack.get(r1).size() - 1);    } else {      c1.genes[r1]=Compute.randomInt(attack.get(0).size() - 1);    }    AttackOption a=attack.get(r1).get(c1.genes[r1]);    if (a.target != null) {      c1.genes[c1.genes.length - 1]=a.target.enemy_num;    }  } else {    for (int i=0; (i < (c1.genes.length - 1)) && (i < attack.size()); i++) {      Object[] weapon=attack.get(i).toArray();      if (c1.genes[i] != (weapon.length - 1)) {        done=false;        for (int w=0; (w < (weapon.length - 1)) && !done; w++) {          AttackOption a=(AttackOption)weapon[w];          if (a.target.enemy_num == target.enemy_num) {            c1.genes[i]=w;            done=true;          }        }      }    }    (chromosomes[0]).genes[chromosomeDim - 1]=target.enemy_num;  }}  }
class C{  public void show(final Class<?> controller,final Runnable actionOnShow){  this.actionOnShow=actionOnShow;  show(controller);}  }
class C{  public boolean isCancelled(){  return mIsCancelled;}  }
class C{  @Override public void onOutputUpdate(Paragraph paragraph,InterpreterOutput out,String output){  Message msg=new Message(OP.PARAGRAPH_UPDATE_OUTPUT).put("noteId",paragraph.getNote().getId()).put("paragraphId",paragraph.getId()).put("data",output);  notebookServer.broadcast(paragraph.getNote().getId(),msg);}  }
class C{  @Override @SuppressWarnings("unchecked") public boolean checkCondition(final T element){  return m_expression.evaluate((Wrapper)m_wrapper.wrap(element));}  }
class C{  public void testNegativeRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_ar:[\u062F TO \u0698]","sort","id asc"),"//*[@numFound='0']");}  }
class C{  void appendChild(NewElement newElement,Element relatedToNew,Element parent){  final int level=level(parent) + 1;  final int lengthBefore=xml.length;  final int insertHere=lastIndexOf(xml,'>',parent.end.left) + 1;  xml=insertInto(xml,insertHere,'\n' + tabulate(newElement.asString(),level));  shiftSegments(insertHere,xml.length - lengthBefore);  applySegments(newElement,relatedToNew,insertHere - 1,level);  registerElement(relatedToNew);}  }
class C{  public void deleteStorage(StorageData storageData) throws BusinessException, IOException {  StorageData local=getLocalStorageDataObject(storageData);synchronized (local) {    if ((storageRecorder.isRecordingOn() || storageRecorder.isRecordingScheduled()) && Objects.equals(local,recorderStorageData)) {      throw new BusinessException("Delete the storage " + local + ".",StorageErrorCodeEnum.STORAGE_ALREADY_CLOSED);    }    if (local.isStorageOpened()) {      StorageWriter writer=openedStoragesMap.get(local);      if (writer != null) {        writer.cancel();      }      openedStoragesMap.remove(local);    }    deleteCompleteStorageDataFromDisk(local);    existingStoragesSet.remove(local);  }}  }
class C{  private void showAboutDialog(){  MaterialDialog aboutDialog=new MaterialDialog.Builder(this).title(R.string.about_title).positiveText(R.string.about_positive).content(Html.fromHtml(getResources().getString(R.string.about_message))).build();  aboutDialog.show();}  }
class C{  public static double newton(double[] coefs,double x0,int max,double eps){  if (coefs == null)   throw new IllegalArgumentException("coefficient list is null");  if (coefs.length <= 1)   throw new IllegalArgumentException("coefficients are too few to calculate");  eps=abs(eps);  double current=x0;  double last=current;  double sig=1;  int i=0;  while (abs(sig) > eps) {    i++;    if (i >= max) {      break;    }    current=last - f(coefs,last) / df(coefs,last);    sig=current - last;    last=current;  }  return current;}  }
class C{  private CGraphSearcher(){}  }
class C{  public boolean isAllowUnsafeSslRenegotiation(){  return allowUnsafeSslRenegotiation;}  }
class C{  public void putSparseParcelableArray(String key,SparseArray<? extends Parcelable> value){  unparcel();  mMap.put(key,value);  mFdsKnown=false;}  }
class C{  public int diff_levenshtein(LinkedList<Diff> diffs){  int levenshtein=0;  int insertions=0;  int deletions=0;  for (  Diff aDiff : diffs) {switch (aDiff.operation) {case INSERT:      insertions+=aDiff.text.length();    break;case DELETE:  deletions+=aDiff.text.length();break;case EQUAL:levenshtein+=Math.max(insertions,deletions);insertions=0;deletions=0;break;}}levenshtein+=Math.max(insertions,deletions);return levenshtein;}  }
class C{  public final void addElement(final GeneralPath value){  checkSize(current_item);  items[current_item]=value;  current_item++;}  }
class C{  private static IColumn<?> createColumnInstance(final Class<? extends IColumn<?>> columnClass){  try {    return columnClass.newInstance();  } catch (  final Exception e) {    Env.LOGGER.error("Failed to instantiate column: " + (columnClass == null ? "null" : columnClass.getName()));    return null;  }}  }
class C{  public int add(Coordinate coordinate){  queue.add(coordinate);  final int size=queue.size();  if (size == _maxBufferSize) {    queue.poll();  }  return size;}  }
class C{  public void onResume(){  barcodeView.resume();  beepManager.updatePrefs();  inactivityTimer.start();}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public OrganizationAuthorityException(){}  }
class C{  @Override public void onRefresh(){  if (PermissionUtils.hasPermission(getContext(),LOCATION_PERMISSION)) {    downloadGeocaches();  } else {    requestPermissions(new String[]{LOCATION_PERMISSION},LOCATION_REQUEST_CODE);  }}  }
class C{  @Inline @Entrypoint public static char charArrayRead(char[] ref,int index){  if (NEEDS_CHAR_GC_READ_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_CHAR);    return Selected.Mutator.get().charRead(array,array.toAddress().plus(offset),offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  protected String doIt() throws Exception {  log.info("C_DocTypeCounter_ID=" + p_C_DocTypeCounter_ID);  m_counter=new MDocTypeCounter(getCtx(),p_C_DocTypeCounter_ID,get_TrxName());  if (m_counter == null || m_counter.get_ID() == 0)   throw new IllegalArgumentException("Not found C_DocTypeCounter_ID=" + p_C_DocTypeCounter_ID);  String error=m_counter.validate();  m_counter.saveEx();  if (error != null)   throw new Exception(error);  return "OK";}  }
class C{  public void and(int size,Register dst,Register src1,Register src2){  super.and(size,dst,src1,src2,ShiftType.LSL,0);}  }
class C{  public String toString(){  return getClass().getSimpleName() + "[" + _pathname+ "]";}  }
class C{  protected BridgeContext(){}  }
class C{  protected void indent(int depth) throws IOException {  if (m_startNewLine)   outputLineSep();  if (m_indentAmount > 0)   printSpace(depth * m_indentAmount);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.HEX_INT_LITERAL;}  }
class C{  public void updateClob(int columnIndex,Reader reader) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  public void reset(){  for (int i=0; i < buffer.length; i++) {    buffer[i]=0;  }  position=0;}  }
class C{  @Override protected void postProcessChunk(ChunkReader chunkR){  super.postProcessChunk(chunkR);}  }
class C{  public static void main(String args[]){  System.out.println("test program for template printing");  if (args.length > 0) {    File file=new File(args[0]);    System.out.println("printing file: " + file.getName());    if (file.exists()) {      new Printer(file);    } else {      System.out.println("file " + file.getAbsolutePath() + " doesn't exist!");    }  } else {    System.out.println("usage: <filename>");  }}  }
class C{  @Override public void loadXML(Node stepnode,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleXMLException {  try {    schemaName=XMLHandler.getTagValue(stepnode,"schemaName");    tabelName=XMLHandler.getTagValue(stepnode,"TableName");    mdkeySize=XMLHandler.getTagValue(stepnode,"MDKeySize");    measureCount=XMLHandler.getTagValue(stepnode,"Measurecount");    heirAndKeySize=XMLHandler.getTagValue(stepnode,"HeirAndKeySize");    cubeName=XMLHandler.getTagValue(stepnode,"cubeName");    groupByEnabled=XMLHandler.getTagValue(stepnode,"isGroupByEnabled");    aggregatorClassString=XMLHandler.getTagValue(stepnode,"aggregatorClassString");    aggregatorString=XMLHandler.getTagValue(stepnode,"aggregatorString");    factDimLensString=XMLHandler.getTagValue(stepnode,"factDimLensString");    levelAnddataTypeString=XMLHandler.getTagValue(stepnode,"levelAnddataTypeString");    currentRestructNumber=Integer.parseInt(XMLHandler.getTagValue(stepnode,"currentRestructNumber"));    partitionID=XMLHandler.getTagValue(stepnode,"partitionID");    segmentId=XMLHandler.getTagValue(stepnode,"segmentId");    taskNo=XMLHandler.getTagValue(stepnode,"taskNo");  } catch (  Exception e) {    throw new KettleXMLException("Unable to read step info from XML node",e);  }}  }
class C{  public V value(){  return valueDonor.value();}  }
class C{  public Iterator<E> iterator(){  return m.navigableKeySet().iterator();}  }
class C{  @Override public void stop() throws RunnerException {  if (process == null) {    throw new IllegalStateException("Process is not started yet");  }  process.destroy();  gruntRunner.onStop(this,gruntRunnerConfiguration);}  }
class C{  public static void instrumentationEnd(){}  }
class C{  public void generateRss(XmlWriter w,String elementName) throws IOException {  String text=new String();  if (email != null) {    text+=email;  }  if (name != null) {    if (email != null) {      text+=" (";    }    text+=name;    if (email != null) {      text+=")";    }  }  w.simpleElement(Namespaces.rssNs,elementName,null,text);}  }
class C{  private void init(){  randomizerPanel.fillFieldValues(randomizer);  setLayout(new GridBagLayout());  Border colorBorder=BorderFactory.createLineBorder(Polarity.EXCITATORY.equals(polarity) ? Color.red : Color.blue);  this.setBorder(BorderFactory.createTitledBorder(colorBorder,polarity.title()));  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.NORTH;  gbc.fill=GridBagConstraints.NONE;  gbc.weighty=0.0;  gbc.gridx=0;  gbc.gridy=0;  Box topPanel=Box.createHorizontalBox();  if (RandBehavior.FORCE_ON != randomizerState && creationPanel) {    topPanel.add(new JLabel("Weight Randomizer"));    topPanel.add(Box.createHorizontalStrut(15));    topPanel.add(Box.createHorizontalGlue());    topPanel.add(enableStatusTriangle);    topPanel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));    this.add(topPanel,gbc);    gbc.gridy+=1;  }  randomizerPanel.setVisible(enableStatusTriangle.isDown() || RandBehavior.FORCE_ON == randomizerState);  this.add(randomizerPanel,gbc);  gbc.gridy+=1;  gbc.fill=GridBagConstraints.VERTICAL;  gbc.weighty=1.0;  this.add(new JPanel(),gbc);  gbc.fill=GridBagConstraints.NONE;  gbc.weighty=0.0;  gbc.gridy+=1;  if (!creationPanel) {    JPanel bottomPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT));    bottomPanel.add(applyButton);    bottomPanel.setPreferredSize(new Dimension(randomizerPanel.getPreferredSize().width,bottomPanel.getPreferredSize().height));    this.add(bottomPanel,gbc);  }}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case SGenPackage.PARAMETER_TYPES:    return createParameterTypesFromString(eDataType,initialValue);default :  throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public ExecutionTargetException(){  super();}  }
class C{  @Override public int showFeedback(String message){  host.showFeedback(message);  return -1;}  }
class C{  public static void warn(Object message){  RuntimeSingleton.warn(message);}  }
class C{  public static BigInteger toBigInteger(CharSequence self){  return new BigInteger(self.toString().trim());}  }
class C{  public void clearSharedVariables(){  sharedVariables.clear();  loadBuiltInSharedVariables();}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level2.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  @SuppressWarnings("unchecked") public <T extends WebMediumConfig>T updateIcon(String file,T config){  config.addCredentials(this);  String xml=POSTIMAGE(this.url + "/update-" + config.getType()+ "-icon",file,"image.jpg",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    config=(T)config.getClass().newInstance();    config.parseXML(root);    return config;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  @Transactional public void persist(Collection<RawProtein<T>> rawProteins,Map<String,Signature> modelIdToSignatureMap,Map<String,Protein> proteinIdToProteinMap){  for (  RawProtein<T> rawProtein : rawProteins) {    Protein protein=proteinIdToProteinMap.get(rawProtein.getProteinIdentifier());    if (protein == null) {      throw new IllegalStateException("Cannot store match to a protein that is not in database " + "[protein ID= " + rawProtein.getProteinIdentifier() + "]");    }    Collection<T> rawMatches=rawProtein.getMatches();    for (    T rawMatch : rawMatches) {      if (rawMatch == null)       continue;      Signature signature=modelIdToSignatureMap.get(rawMatch.getModelId());      LOGGER.debug("rpsBlast match model id:" + rawMatch.getModelId() + " signature: "+ signature);      LOGGER.debug("modelIdToSignatureMap: " + modelIdToSignatureMap);      if (rawMatch.getModelId().startsWith("cl")) {        LOGGER.debug("this is a superfamily match, ignore for now ...");        continue;      }      Set<RPSBlastMatch.RPSBlastLocation> locations=new HashSet<RPSBlastMatch.RPSBlastLocation>();      locations.add(new RPSBlastMatch.RPSBlastLocation(rawMatch.getLocationStart(),rawMatch.getLocationEnd(),rawMatch.getBitScore(),rawMatch.getEvalue()));      RPSBlastMatch match=new RPSBlastMatch(signature,locations);      LOGGER.debug("rpsBlast match: " + match);      protein.addMatch(match);      entityManager.persist(match);    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Double[] toDenseLocalFreqDoubleArray(Terms docTerms) throws IOException {  Double[] freqVector=null;  if (docTerms != null) {    freqVector=new Double[(int)docTerms.size()];    int i=0;    TermsEnum docTermsEnum=docTerms.iterator();    while (docTermsEnum.next() != null) {      long termFreqLocal=docTermsEnum.totalTermFreq();      freqVector[i]=Long.valueOf(termFreqLocal).doubleValue();      i++;    }  }  return freqVector;}  }
class C{  public void testHashCodeEqual(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  int bScale=-24;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  assertEquals("incorrect value",aNumber.hashCode(),bNumber.hashCode());}  }
class C{  public static void removeMimeType(String mimeType,int regLevel) throws RegisterFailedException {  if (isMimeTypeExist(mimeType,regLevel)) {    String mimeKey=getMimeTypeKey(mimeType,regLevel);    if (mimeKey != null) {      regDeleteKey(mimeKey,regLevel);    }  }}  }
class C{  public int maxParts(){  return maxParts;}  }
class C{  @Override public String fillSlots(Assignment fillers){  String filled=super.fillSlots(fillers);  if (filled.contains("{")) {    return filled;  }  if (isArithmeticExpression(filled)) {    try {      double result=new MathExpression(filled).evaluate();      return StringUtils.getShortForm(result);    } catch (    Exception e) {      log.warning("cannot evaluate " + filled);      return filled;    }  }  Value merge=ValueFactory.none();  for (  String split : filled.split("\\+")) {    String[] negation=split.split("\\-");    merge=merge.concatenate(ValueFactory.create(negation[0]));    for (int i=1; i < negation.length; i++) {      Collection<Value> values=merge.getSubValues();      values.remove(ValueFactory.create(negation[i]));      merge=ValueFactory.create(values);    }  }  return merge.toString();}  }
class C{  public final double doOperation() throws OperatorFailedException {  final double scale=(scaleFactor + (MathUtils.nextDouble() * ((1.0 / scaleFactor) - scaleFactor)));  int goingUp=0, goingDown=0;  if (upParameter != null) {    for (    Scalable up : upParameter) {      goingUp+=up.scale(scale,-1);    }  }  if (downParameter != null) {    for (    Scalable dn : downParameter) {      goingDown+=dn.scale(1.0 / scale,-1);    }  }  return (goingUp - goingDown - 2) * Math.log(scale);}  }
class C{  private void chooseURLUsername(){  String dbaseURL=((DatabaseResultListener)m_Exp.getResultListener()).getDatabaseURL();  String username=((DatabaseResultListener)m_Exp.getResultListener()).getUsername();  DatabaseConnectionDialog dbd=new DatabaseConnectionDialog(null,dbaseURL,username);  dbd.setVisible(true);  if (dbd.getReturnValue() == JOptionPane.CLOSED_OPTION) {    return;  }  ((DatabaseResultListener)m_Exp.getResultListener()).setUsername(dbd.getUsername());  ((DatabaseResultListener)m_Exp.getResultListener()).setPassword(dbd.getPassword());  ((DatabaseResultListener)m_Exp.getResultListener()).setDatabaseURL(dbd.getURL());  ((DatabaseResultListener)m_Exp.getResultListener()).setDebug(dbd.getDebug());  m_ResultsDestinationPathTField.setText(dbd.getURL());}  }
class C{  public boolean isActive(){  return _state.isActive();}  }
class C{  private static Location pcToLocation(ClassContext classContext,Method method,int pc) throws CFGBuilderException {  CFG cfg=classContext.getCFG(method);  for (Iterator<Location> i=cfg.locationIterator(); i.hasNext(); ) {    Location location=i.next();    if (location.getHandle().getPosition() == pc) {      return location;    }  }  return null;}  }
class C{  public String supplyData(){  try {    Thread.sleep(500);  } catch (  Exception e) {  }  return "data";}  }
class C{  @Override public final long ramBytesUsed(){  ensureOpen();  return sizeInBytes.get();}  }
class C{  protected static void appendCharType(StringBuilder sb){  sb.append("CHAR");}  }
class C{  private void bind(Object object,BinderCache cache){  for (  ObjectBinder binder : cache.getBinders()) {    binder.bind(object);  }}  }
class C{  private WorkingTree createWorkingTree(AccessibilityNodeInfoCompat rootNode,WorkingTree parent,NodeCachedBoundsCalculator boundsCalculator){  if (mNodeTreeMap.containsKey(rootNode)) {    LogUtils.log(OrderedTraversalController.class,Log.WARN,"creating node tree with looped nodes - break the loop edge");    return null;  }  WorkingTree tree=new WorkingTree(rootNode,parent);  mNodeTreeMap.put(rootNode,tree);  ReorderedChildrenIterator iterator=ReorderedChildrenIterator.createAscendingIterator(rootNode,boundsCalculator);  while (iterator != null && iterator.hasNext()) {    AccessibilityNodeInfoCompat child=iterator.next();    WorkingTree childSubTree=createWorkingTree(child,tree,boundsCalculator);    if (childSubTree != null) {      tree.addChild(childSubTree);    }  }  if (iterator != null) {    iterator.recycle();  }  return tree;}  }
class C{  private static OFActionSetDlDst decode_set_dst_mac(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+))").matcher(actionToDecode);  if (n.matches()) {    MacAddress macaddr=MacAddress.of(get_mac_addr(n,actionToDecode,log));    if (macaddr != null) {      OFActionSetDlDst.Builder ab=OFFactories.getFactory(version).actions().buildSetDlDst();      ab.setDlAddr(macaddr);      log.debug("action {}",ab.build());      return ab.build();    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  public QuarterDateFormat(TimeZone zone,String[] quarterSymbols,boolean quarterFirst){  ParamChecks.nullNotPermitted(zone,"zone");  this.calendar=new GregorianCalendar(zone);  this.quarters=quarterSymbols;  this.quarterFirst=quarterFirst;  this.numberFormat=NumberFormat.getNumberInstance();}  }
class C{  public String sqlMetadata_indexTables(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_indexTables(catalogName,schemaName);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case BasePackage.DOMAIN_ELEMENT__DOMAIN_ID:    return getDomainID();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void cleanup() throws IOException, JMException {  try {    ((NotificationEmitter)proxy).removeNotificationListener(listener,null,null);  }  finally {    ManagementFactory.getPlatformMBeanServer().unregisterMBean(ScanManager.SCAN_MANAGER_NAME);  }}  }
class C{  public static void CF8(double[] x,double[] f,double[] c,int nx){  int count1=0;  int count2=0;  int count3=0;  double sum1=0.0;  double sum2=0.0;  double sum3=0.0;  double yj;  double N=2.0;  double a=4.0;  for (int j=3; j <= nx; j++) {    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);    if (j % 3 == 1) {      sum1+=yj * yj;      count1++;    } else     if (j % 3 == 2) {      sum2+=yj * yj;      count2++;    } else {      sum3+=yj * yj;      count3++;    }  }  f[0]=Math.cos(0.5 * PI * x[0]) * Math.cos(0.5 * PI * x[1]) + 2.0 * sum1 / (double)count1;  f[1]=Math.cos(0.5 * PI * x[0]) * Math.sin(0.5 * PI * x[1]) + 2.0 * sum2 / (double)count2;  f[2]=Math.sin(0.5 * PI * x[0]) + 2.0 * sum3 / (double)count3;  c[0]=(f[0] * f[0] + f[1] * f[1]) / (1 - f[2] * f[2]) - a * Math.abs(Math.sin(N * PI * ((f[0] * f[0] - f[1] * f[1]) / (1 - f[2] * f[2]) + 1.0))) - 1.0;}  }
class C{  protected <T extends DataObjectRestRep>void addRetainedReplicas(URI sourceId,List<Task<T>> tasks){  if (!isRetentionRequired()) {    return;  }  if (tasks == null) {    return;  }  ScheduledEvent event=ExecutionUtils.currentContext().getScheduledEvent();  RetainedReplica retention=new RetainedReplica();  retention.setScheduledEventId(event.getId());  retention.setResourceId(sourceId);  StringSet retainedResource=new StringSet();  retention.setAssociatedReplicaIds(retainedResource);  for (  Task<? extends DataObjectRestRep> task : tasks) {    URI resourceId=task.getResourceId();    if (resourceId != null && !sourceId.equals(resourceId)) {      info("Add %s to retained replica",resourceId.toString());      retainedResource.add(resourceId.toString());    }    if (task.getAssociatedResources() != null && !task.getAssociatedResources().isEmpty()) {      for (      URI id : ResourceUtils.refIds(task.getAssociatedResources())) {        if (sourceId.equals(id)) {          continue;        }        info("Add %s to retained replica",id.toString());        retainedResource.add(id.toString());      }    }  }  modelClient.save(retention);}  }
class C{  public MapObject(Object id,Drawable drawable,Point position,Point pivotPoint,boolean isTouchable,boolean isScalable){  this(id,drawable,position.x,position.y,pivotPoint.x,pivotPoint.y,isTouchable,isScalable);}  }
class C{  public static boolean isRunningLinux(){  return System.getProperty("os.name").startsWith("Linux");}  }
class C{  public void configure(JobConf conf){  this.conf=conf;}  }
class C{  public String addPlot(double x[],double y[],String lineSpec,String legend){  if (m_chart != null) {    String seriesKey=getUniqueSeriesKey(m_dataset,legend);    m_dataset.addSeries(seriesKey,new double[][]{x,y});    int lastSeriesIndex=m_dataset.getSeriesCount() - 1;    LineAttrs lineAtrs=new LineAttrs(lineSpec);    setLineColor(lastSeriesIndex,lineAtrs.getColor());    setLineStyle(lastSeriesIndex,lineAtrs.getMarker(),1,lineAtrs.getStyle());    return seriesKey;  }  return jplot(x,y,lineSpec,legend)[0];}  }
class C{  public final void remove(){  remove(InternalThreadLocalMap.getIfSet());}  }
class C{  public int dot_pos(){  return _dot_pos;}  }
class C{  public boolean syncDisableNetwork(AsyncChannel channel,int netId){  Message resultMsg=channel.sendMessageSynchronously(WifiManager.DISABLE_NETWORK,netId);  boolean result=(resultMsg.arg1 != WifiManager.DISABLE_NETWORK_FAILED);  resultMsg.recycle();  return result;}  }
class C{  public static String toCommaSeparatedList(Object[] o,boolean escapeCommas,boolean escapeDoubleQuotes){  if (o == null) {    return "";  }  StringBuilder sb=new StringBuilder();  for (  Object obj : o) {    String objString=obj.toString();    objString=objString.replaceAll("\\\\","\\\\\\\\");    if (escapeCommas) {      objString=objString.replaceAll(",","\\\\,");    }    if (escapeDoubleQuotes) {      objString=objString.replaceAll("\"","\\\"");    }    sb.append(objString).append(",");  }  if (sb.length() > 1) {    sb.deleteCharAt(sb.length() - 1);  }  return sb.toString();}  }
class C{  public static String HasHave(final int quantity){  return makeUpperCaseWord(hashave(quantity));}  }
class C{  public PixelGrabber(Image img,int x,int y,int w,int h,int[] pix,int off,int scansize){  this(img.getSource(),x,y,w,h,pix,off,scansize);}  }
class C{  private MediaFileType parseImageType(){  String name=getFilename();  Matcher matcher=moviesetPattern.matcher(name);  if (matcher.matches()) {    return MediaFileType.GRAPHIC;  }  matcher=seasonPattern.matcher(name);  if (matcher.matches()) {    return MediaFileType.SEASON_POSTER;  }  matcher=posterPattern.matcher(name);  if (matcher.matches()) {    return MediaFileType.POSTER;  }  matcher=fanartPattern.matcher(name);  if (matcher.matches()) {    if (getPath().endsWith("extrafanart")) {      return MediaFileType.EXTRAFANART;    }    return MediaFileType.FANART;  }  matcher=bannerPattern.matcher(name);  if (matcher.matches()) {    return MediaFileType.BANNER;  }  matcher=thumbPattern.matcher(name);  if (matcher.matches()) {    if (getPath().endsWith("extrathumbs")) {      return MediaFileType.EXTRATHUMB;    }    return MediaFileType.THUMB;  }  matcher=clearartPattern.matcher(name);  if (matcher.matches()) {    return MediaFileType.CLEARART;  }  matcher=logoPattern.matcher(name);  if (matcher.matches()) {    return MediaFileType.LOGO;  }  matcher=clearlogoPattern.matcher(name);  if (matcher.matches()) {    return MediaFileType.CLEARLOGO;  }  matcher=discartPattern.matcher(name);  if (matcher.matches()) {    return MediaFileType.DISCART;  }  return MediaFileType.GRAPHIC;}  }
class C{  public Cache(){  pages=Collections.synchronizedMap(new HashMap<Integer,SoftReference>());}  }
class C{  public void mergeName(final Expression next,ExpressionType newType){  original=original + ' ' + next.getOriginal();  if (newType.isName()) {    setNormalized(original.toLowerCase());  } else {    setNormalized(normalized + ' ' + next.getNormalized());  }  setType(newType);  setAmount(mergeAmount(amount,next.amount));  breakFlag=next.getBreakFlag();}  }
class C{  public UpdateRequest upsert(byte[] source){  safeUpsertRequest().source(source);  return this;}  }
class C{  public void resetModelNames(Object pageKey){  if (pageKey != null) {    pageStorage.put(pageKey,new Hashtable());  }}  }
class C{  private void addBoard(){  board=new SokobanBoard(this);  board.setPosition(26,107);  zone.add(board);  board.loadLevel(0);}  }
class C{  public boolean containsRadians(double radiansLatitude,double radiansLongitude){  return radiansLatitude >= this.minLatitude.radians && radiansLatitude <= this.maxLatitude.radians && radiansLongitude >= this.minLongitude.radians && radiansLongitude <= this.maxLongitude.radians;}  }
class C{  private static Comparable normaliseStringType(final Comparable operand){  if (operand instanceof Character) {    return (int)(Character)operand;  }  if (operand instanceof String) {    final String string=(String)operand;    if (string.length() == 1) {      return (int)string.charAt(0);    }    return string;  }  return operand;}  }
class C{  public static Builder withData(Object data){  return builder().data(data);}  }
class C{  @Override public double angleToValue(double angle){  double range=this.upperBound - this.lowerBound;  double unit=range / this.extent;  return (angle - this.startAngle) * unit;}  }
class C{  public int compare(Quantity o1,Quantity o2){  int returnVal=CoreUtils.nullSafeComparator(o1.getBigIntegerValue(),o2.getBigIntegerValue());  if (m_ascending.equals(Boolean.FALSE)) {    returnVal=returnVal * -1;  }  return returnVal;}  }
class C{  @Override public boolean locatorsUpdateCopy(){  debugCodeCall("locatorsUpdateCopy");  return false;}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public static double min(double x,double y){  return (x < y) ? x : y;}  }
class C{  public double classifyInstance(Instance inst){  return m_intercept + m_slope * inst.value(m_attributeIndex);}  }
class C{  public static void testRandomConcurrentReadWriteThreads(EdgePool edgePool,int numReadersPerNode,int leftSize,int rightSize,double edgeProbability,Random random){  int maxWaitingTimeForThreads=20;  int numReaders=leftSize * numReadersPerNode;  CountDownLatch readersDoneLatch=new CountDownLatch(numReaders);  Set<Pair<Integer,Integer>> edges=Sets.newHashSetWithExpectedSize((int)(leftSize * rightSize * edgeProbability));  List<EdgePoolReader> readers=Lists.newArrayListWithCapacity(numReaders);  Int2ObjectMap<IntSet> leftSideGraph=new Int2ObjectOpenHashMap<IntSet>(leftSize);  int averageLeftDegree=(int)(rightSize * edgeProbability);  for (int i=0; i < leftSize; i++) {    IntSet nodeEdges=new IntOpenHashSet(averageLeftDegree);    for (int j=0; j < rightSize; j++) {      if (random.nextDouble() < edgeProbability) {        nodeEdges.add(j);        edges.add(Pair.of(i,j));      }    }    leftSideGraph.put(i,nodeEdges);  }  for (int i=0; i < leftSize; i++) {    for (int j=0; j < numReadersPerNode; j++) {      readers.add(new EdgePoolReader(edgePool,new CountDownLatch(0),readersDoneLatch,i,random.nextInt(maxWaitingTimeForThreads)));    }  }  List<WriterInfo> writerInfo=Lists.newArrayListWithCapacity(edges.size());  List<Pair<Integer,Integer>> edgesList=Lists.newArrayList(edges);  Collections.shuffle(edgesList);  CountDownLatch writerDoneLatch=new CountDownLatch(edgesList.size());  for (  Pair<Integer,Integer> edge : edgesList) {    writerInfo.add(new WriterInfo(edge.getLeft(),edge.getRight(),new CountDownLatch(0),writerDoneLatch));  }  ExecutorService executor=Executors.newFixedThreadPool(numReaders + 1);  List<Callable<Integer>> allThreads=Lists.newArrayListWithCapacity(numReaders + 1);  allThreads.add(Executors.callable(new EdgePoolWriter(edgePool,writerInfo),1));  for (int i=0; i < numReaders; i++) {    allThreads.add(Executors.callable(readers.get(i),1));  }  Collections.shuffle(allThreads,random);  try {    List<Future<Integer>> results=executor.invokeAll(allThreads,10,TimeUnit.SECONDS);    for (    Future<Integer> result : results) {      assertTrue(result.isDone());      assertEquals(1,result.get().intValue());    }  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for a thread was interrupted: ",e);  }catch (  ExecutionException e) {    throw new RuntimeException("Execution issue in an executor thread: ",e);  }  try {    readersDoneLatch.await();    writerDoneLatch.await();  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for last reader was interrupted: ",e);  }  for (  EdgePoolReader reader : readers) {    IntSet expectedEdges=leftSideGraph.get(reader.queryNode);    assertTrue(reader.getQueryNodeDegree() <= expectedEdges.size());    if (reader.getQueryNodeDegree() == 0) {      assertNull(reader.getQueryNodeEdges());    } else {      for (      int edge : reader.getQueryNodeEdges()) {        assertTrue(expectedEdges.contains(edge));      }    }  }}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){  if (mRemoveEnabled && mIsRemoving) {    mPositionX=position.x;  }}  }
class C{  private static void usageError(String errorMsg) throws AdeUsageException {  System.out.flush();  System.err.println("Usage:");  System.err.println("\tcontroldb create");  System.err.println("\tcontroldb delete");  System.err.println("\tcontroldb drop");  System.err.println("\tcontroldb query <sql>");  System.err.println("\tcontroldb dml <sql>");  System.err.println("");  System.err.flush();  throw new AdeUsageException(errorMsg);}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      if (out != null)       out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static HostInternetScsiHbaSendTarget createInternetScsiSendTarget(String address){  HostInternetScsiHbaSendTarget target=new HostInternetScsiHbaSendTarget();  if (StringUtils.contains(address,':')) {    target.setAddress(StringUtils.substringBefore(address,":"));    target.setPort(NumberUtils.toInt(StringUtils.substringAfter(address,":")));  } else {    target.setAddress(address);  }  return target;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:07.245 -0500",hash_original_method="4C7BE72C58D9A70D111AB53708810EA4",hash_generated_method="AF157A7772AD2D9C1E3D30BCBFFC6CCE") public LocalSocket accept() throws IOException {  LocalSocketImpl acceptedImpl=new LocalSocketImpl();  impl.accept(acceptedImpl);  return new LocalSocket(acceptedImpl);}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  m_qnameID=sroot.getComposeState().getQNameID(m_qname);  int parentToken=m_parentNode.getXSLToken();  if (parentToken == Constants.ELEMNAME_TEMPLATE || parentToken == Constants.EXSLT_ELEMNAME_FUNCTION)   ((ElemTemplate)m_parentNode).m_inArgsSize++;}  }
class C{  protected void closingOK(){  StringBuffer buff=new StringBuffer();  for (int i=0; i < m_listModel.size(); i++) {    SubstringReplacerRules.SubstringReplacerMatchRule mr=(SubstringReplacerRules.SubstringReplacerMatchRule)m_listModel.elementAt(i);    buff.append(mr.toStringInternal());    if (i < m_listModel.size() - 1) {      buff.append("@@match-replace@@");    }  }  m_replacer.setMatchReplaceDetails(buff.toString());  if (m_modifyL != null) {    m_modifyL.setModifiedStatus(SubstringReplacerCustomizer.this,true);  }}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new JSONArray().put(value));  } else   if (object instanceof JSONArray) {    this.put(key,((JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  public static void align(ByteBuffer blob){  blob.position(align(blob.position()));}  }
class C{  public void testXorMappedAddressXoring_v4(){  XorMappedAddressAttribute addressAttribute=new XorMappedAddressAttribute();  TransportAddress testAddress=new TransportAddress("130.79.95.53",12120,Transport.UDP);  addressAttribute.setAddress(testAddress);  TransportAddress xorredAddr=addressAttribute.applyXor(new byte[]{(byte)130,79,95,53,0,0,0,0,0,0,0,0,0,0,0,0,0});  assertTrue("Xorring the address with itself didn't return 00000...",Arrays.equals(xorredAddr.getAddressBytes(),new byte[]{0,0,0,0}));  assertTrue("Port was not xorred",testAddress.getPort() != xorredAddr.getPort());  addressAttribute.setAddress(testAddress);  xorredAddr=addressAttribute.applyXor(new byte[]{21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36});  xorredAddr=addressAttribute.applyXor(xorredAddr.getAddressBytes());  assertTrue("Xorring the original with the xor-ed didn't " + "return the code..",Arrays.equals(xorredAddr.getAddressBytes(),new byte[]{21,22,23,24}));  assertTrue("Port was not xorred",testAddress.getPort() != 0xFFFF);  addressAttribute.setAddress(testAddress);  xorredAddr=addressAttribute.applyXor(new byte[]{21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36});  addressAttribute.setAddress(xorredAddr);  xorredAddr=addressAttribute.applyXor(new byte[]{21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36});  assertEquals("Double xorring didn't give the original ...",testAddress,xorredAddr);}  }
class C{  public Component findByName(String name,Container rootComponent){  Component c=(Component)rootComponent.getClientProperty("%" + name + "%");  if (c == null) {    Container newRoot=getRootAncestor(rootComponent);    if (newRoot != null && rootComponent != newRoot) {      return findByName(name,newRoot);    }  }  return c;}  }
class C{  void connect() throws ConnectionFailedException, IOException {  try {    final JMXServiceURL jmxUrl=getJMXServiceURL();    this.jmxc=JMXConnectorFactory.connect(jmxUrl);    this.server=this.jmxc.getMBeanServerConnection();  } catch (  AttachNotSupportedException e) {    throw new ConnectionFailedException("Failed to connect to process '" + this.pid + "'",e);  }}  }
class C{  public void readRemainingPackets(){  if (getDataLength() != MAX_LENGTH) {    logger.error("readRemainingPackets() is only relevant for large packets!");    return;  }  ArrayList<MySQLPacket> nextPackets=new ArrayList<MySQLPacket>();  MySQLPacket nextPacket=readPacket(getInputStream());  while (nextPacket.getDataLength() == MAX_LENGTH) {    nextPackets.add(nextPacket);    nextPacket=readPacket(getInputStream());  }  nextPackets.add(nextPacket);  int newSize=getDataLength();  for (  MySQLPacket packet : nextPackets) {    newSize+=packet.getDataLength();  }  byte[] newBytes=new byte[newSize + HEADER_LENGTH];  System.arraycopy(byteBuffer,0,newBytes,0,getDataLength() + HEADER_LENGTH);  int cursor=getDataLength() + HEADER_LENGTH;  for (  MySQLPacket packet : nextPackets) {    System.arraycopy(packet.getByteBuffer(),HEADER_LENGTH,newBytes,cursor,packet.getDataLength());    cursor+=packet.getDataLength();  }  byteBuffer=newBytes;  dataLength=newSize;}  }
class C{  public Coordinate[][][] coordinates(){  int numEdges=shell.points.size() - 1;  for (int i=0; i < holes.size(); i++) {    numEdges+=holes.get(i).points.size() - 1;    validateHole(shell,this.holes.get(i));  }  Edge[] edges=new Edge[numEdges];  Edge[] holeComponents=new Edge[holes.size()];  int offset=createEdges(0,orientation,shell,null,edges,0);  for (int i=0; i < holes.size(); i++) {    int length=createEdges(i + 1,orientation,shell,this.holes.get(i),edges,offset);    holeComponents[i]=edges[offset];    offset+=length;  }  int numHoles=holeComponents.length;  numHoles=merge(edges,0,intersections(+DATELINE,edges),holeComponents,numHoles);  numHoles=merge(edges,0,intersections(-DATELINE,edges),holeComponents,numHoles);  return compose(edges,holeComponents,numHoles);}  }
class C{  public static FirewallRule jsonToFirewallRule(String fmJson){  FirewallRule rule=new FirewallRule();  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  try {    try {      jp=f.createJsonParser(fmJson);    } catch (    JsonParseException e) {      throw new IOException(e);    }    jp.nextToken();    if (jp.getCurrentToken() != JsonToken.START_OBJECT) {      throw new IOException("Expected START_OBJECT");    }    while (jp.nextToken() != JsonToken.END_OBJECT) {      if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {        throw new IOException("Expected FIELD_NAME");      }      String n=jp.getCurrentName();      jp.nextToken();      if (jp.getText().equals("")) {        continue;      }      if (n.equalsIgnoreCase("ruleid")) {        try {          rule.ruleid=Integer.parseInt(jp.getText());        } catch (        IllegalArgumentException e) {          log.error("Unable to parse rule ID: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("switchid")) {        rule.any_dpid=false;        try {          rule.dpid=DatapathId.of(jp.getText());        } catch (        NumberFormatException e) {          log.error("Unable to parse switch DPID: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("src-inport")) {        rule.any_in_port=false;        try {          rule.in_port=OFPort.of(Integer.parseInt(jp.getText()));        } catch (        NumberFormatException e) {          log.error("Unable to parse ingress port: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("src-mac")) {        if (!jp.getText().equalsIgnoreCase("ANY")) {          rule.any_dl_src=false;          try {            rule.dl_src=MacAddress.of(jp.getText());          } catch (          IllegalArgumentException e) {            log.error("Unable to parse source MAC: {}",jp.getText());          }        }      } else       if (n.equalsIgnoreCase("dst-mac")) {        if (!jp.getText().equalsIgnoreCase("ANY")) {          rule.any_dl_dst=false;          try {            rule.dl_dst=MacAddress.of(jp.getText());          } catch (          IllegalArgumentException e) {            log.error("Unable to parse destination MAC: {}",jp.getText());          }        }      } else       if (n.equalsIgnoreCase("dl-type")) {        if (jp.getText().equalsIgnoreCase("ARP")) {          rule.any_dl_type=false;          rule.dl_type=EthType.ARP;        } else         if (jp.getText().equalsIgnoreCase("IPv4")) {          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;        }      } else       if (n.equalsIgnoreCase("src-ip")) {        if (!jp.getText().equalsIgnoreCase("ANY")) {          rule.any_nw_src=false;          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;          try {            rule.nw_src_prefix_and_mask=IPv4AddressWithMask.of(jp.getText());          } catch (          IllegalArgumentException e) {            log.error("Unable to parse source IP: {}",jp.getText());          }        }      } else       if (n.equalsIgnoreCase("dst-ip")) {        if (!jp.getText().equalsIgnoreCase("ANY")) {          rule.any_nw_dst=false;          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;          try {            rule.nw_dst_prefix_and_mask=IPv4AddressWithMask.of(jp.getText());          } catch (          IllegalArgumentException e) {            log.error("Unable to parse destination IP: {}",jp.getText());          }        }      } else       if (n.equalsIgnoreCase("nw-proto")) {        if (jp.getText().equalsIgnoreCase("TCP")) {          rule.any_nw_proto=false;          rule.nw_proto=IpProtocol.TCP;          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;        } else         if (jp.getText().equalsIgnoreCase("UDP")) {          rule.any_nw_proto=false;          rule.nw_proto=IpProtocol.UDP;          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;        } else         if (jp.getText().equalsIgnoreCase("ICMP")) {          rule.any_nw_proto=false;          rule.nw_proto=IpProtocol.ICMP;          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;        }      } else       if (n.equalsIgnoreCase("tp-src")) {        rule.any_tp_src=false;        try {          rule.tp_src=TransportPort.of(Integer.parseInt(jp.getText()));        } catch (        IllegalArgumentException e) {          log.error("Unable to parse source transport port: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("tp-dst")) {        rule.any_tp_dst=false;        try {          rule.tp_dst=TransportPort.of(Integer.parseInt(jp.getText()));        } catch (        IllegalArgumentException e) {          log.error("Unable to parse destination transport port: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("priority")) {        try {          rule.priority=Integer.parseInt(jp.getText());        } catch (        IllegalArgumentException e) {          log.error("Unable to parse priority: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("action")) {        if (jp.getText().equalsIgnoreCase("allow") || jp.getText().equalsIgnoreCase("accept")) {          rule.action=FirewallRule.FirewallAction.ALLOW;        } else         if (jp.getText().equalsIgnoreCase("deny") || jp.getText().equalsIgnoreCase("drop")) {          rule.action=FirewallRule.FirewallAction.DROP;        }      }    }  } catch (  IOException e) {    log.error("Unable to parse JSON string: {}",e);  }  return rule;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattribute.class,args);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  set(s.readDouble());}  }
class C{  protected void bufferize(){  if (bufferSize >= buffer.length) {    char[] t=new char[buffer.length * 2];    System.arraycopy(buffer,0,t,0,bufferSize);    buffer=t;  }  buffer[bufferSize++]=(char)current;}  }
class C{  public Instances seperateViolatedInstances(){  System.out.println("\nSeperating violating tuples from dataset...");  Object[] keys=violatedTuplesMap.keySet().toArray();  Arrays.sort(keys,Collections.reverseOrder());  int count=0;  for (  Object k : keys) {    int index=(Integer)k;    i.delete(index);    count++;  }  if (violatedTuplesMap.keySet().size() >= 1) {    System.out.println("Removed: " + count);    System.out.println("Num Instances left: " + i.numInstances());  } else   System.out.println("Did not preform any removal. Violating tuples set is empty.");  return i;}  }
class C{  private boolean removeMapping(Object rowKey,Object columnKey,Object value){  if (containsMapping(rowKey,columnKey,value)) {    remove(rowKey,columnKey);    return true;  }  return false;}  }
class C{  public static byte[] encode(byte[] data){  return encode(data,0,data.length);}  }
class C{  private void stageCreditUpdate(CreditBalanceUpdate update,DateTime now){  System.out.printf("Creating balance update for credit %s/%d at %s:\n",update.registrarId,update.creditId,update.effectiveTime.toString());  Registrar registrar=checkNotNull(Registrar.loadByClientId(update.registrarId),"Registrar %s not found",update.registrarId);  RegistrarCredit credit=ofy().load().type(RegistrarCredit.class).parent(registrar).id(update.creditId).now();  checkNotNull(credit,"Registrar credit for %s with ID %s not found",update.registrarId,update.creditId.toString());  System.out.printf(" - Credit info: %s\n",credit.getSummary());  Optional<Money> oldBalance=BalanceMap.createForCredit(credit).getActiveBalanceBeforeTime(update.effectiveTime);  checkState(oldBalance.isPresent(),"No balance found before effective time");  Money actualOldBalance=oldBalance.get();  Money expectedOldBalance=Money.ofMinor(credit.getCurrency(),update.oldBalance);  checkState(actualOldBalance.equals(expectedOldBalance),"Real old balance does not match expected old balance (%s vs. %s)",actualOldBalance,expectedOldBalance);  Money newBalance=Money.ofMinor(credit.getCurrency(),update.newBalance);  System.out.printf(" - %s -> %s\n",actualOldBalance,newBalance);  RegistrarCreditBalance newCreditBalance=new RegistrarCreditBalance.Builder().setParent(credit).setEffectiveTime(update.effectiveTime).setWrittenTime(now).setAmount(newBalance).build();  stageEntityChange(null,newCreditBalance);}  }
class C{  private static String readSetting(final CConnection connection,final int containerId,final String key,final String column,final String table) throws CouldntLoadDataException {  try {    final PreparedStatement statement=connection.getConnection().prepareStatement("select value from " + table + " where name = ? and "+ column+ " = ?");    try {      statement.setString(1,key);      statement.setInt(2,containerId);      final ResultSet resultSet=statement.executeQuery();      try {        while (resultSet.next()) {          return PostgreSQLHelpers.readString(resultSet,"value");        }      }  finally {        resultSet.close();      }      return null;    }  finally {      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final Entry<K,V> pollFirstEntry(){  throw new UnsupportedOperationException();}  }
class C{  public static double tile2yMercator(int y,int z){  double n=Math.pow(2.0,z);  return DefaultEllipsoid.WGS84.getSemiMajorAxis() * Math.PI * (1 - (2 * y / n));}  }
class C{  public void test_ticket_1007_string1() throws Exception {  new TestHelper("ticket-1007-string1","ticket-1007-string1.rq","ticket-1007-custom.trig","ticket-1007-string.srx",false).runTest();}  }
class C{  private String entryPathsDiffer(List<VNXFileExport> exports){  HashSet<String> paths=new HashSet<>();  for (  VNXFileExport exp : exports) {    paths.add(exp.getMountPoint());  }  if (paths.size() == 1) {    return paths.iterator().next();  }  return null;}  }
class C{  public void onEnter(){  if (depEnabled && !locDepOwner && !ignoreOwnership.get()&& !cctx.kernalContext().job().internal()) {    ClassLoader ldr=Thread.currentThread().getContextClassLoader();    if (!U.p2pLoader(ldr))     locDepOwner=true;  }}  }
class C{  SchemaFuture installHandlers(XMLReader in,SchemaReceiverImpl sr){  Handler h=new Handler(sr);  in.setContentHandler(h);  return h;}  }
class C{  protected void loadChildren(){  loadedChildren=true;  createChildren(this,childValue);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  default Eval<T> toEvalLater(){  return Eval.later(this);}  }
class C{  public boolean inheritedParameters(){  return this.inheritedParameters;}  }
class C{  public void addTabsFocusListener(FocusListener listener){  if (focusListeners == null) {    focusListeners=new EventDispatcher();  }  focusListeners.addListener(listener);}  }
class C{  private AccessToken createSuperUserToken(Customer customer){  String userId=null;  for (  AccessRight r : customer.getAccessRights()) {    userId=r.getUserId();    if ((r.getRole() == Role.OWNER) && (userId != null)) {      break;    }  }  return this.createToken(customer.getOid(),null,userId,System.currentTimeMillis(),ServiceUtils.getInstance().getTokenExpirationPeriodMillis(),AccessToken.Type.NORMAL,null);}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final Intersection other=(Intersection)obj;  return other.getLocation().equals(getLocation());}  }
