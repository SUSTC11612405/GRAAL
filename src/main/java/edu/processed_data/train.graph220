class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public NATURAL_LEFT_OUTER_JOIN NATURAL_LEFT_OUTER_JOIN(String tableToJoin){  return new NATURAL_LEFT_OUTER_JOIN(this,tableToJoin);}  }
class C{  public AiringNode(BasicMediaSource inSource,BasicMediaNode parent,Airing air,boolean channelPrimary){  super(inSource,parent);  this.air=air;  this.channelPrimary=channelPrimary;}  }
class C{  @PostMapping(consumes="!multipart/form-data") public ResponseEntity<FileInfo> uploadFile(HttpServletRequest request,@RequestParam(required=false) String name){  try {    String contentLength=request.getHeader("Content-Length");    long size=0;    try {      size=Long.valueOf(contentLength);    } catch (    NumberFormatException ignored) {    }    FileDescriptor fd=createFileDescriptor(name,size);    ServletInputStream is=request.getInputStream();    uploadToMiddleware(is,fd);    saveFileDescriptor(fd);    return createFileInfoResponseEntity(request,fd);  } catch (  Exception e) {    log.error("File upload failed",e);    throw new RestAPIException("File upload failed","File upload failed",HttpStatus.INTERNAL_SERVER_ERROR);  }}  }
class C{  public void actionPerformed(ActionEvent e){  if (m_wf == null && e.getSource() != workflow)   return;  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  if (e.getSource() == bZoom)   zoom(); else   if (e.getSource() == bIgnore)   load(m_wf.getAD_Workflow_ID(),true); else   if (e.getSource() == workflow)   load(true); else   if (e.getSource() == bSaveLayout) {    if (m_wf.getAD_Client_ID() == AD_Client_ID)     m_wf.saveEx();    MWFNode[] nodes=m_wf.getNodes(false,AD_Client_ID);    for (int i=0; i < nodes.length; i++) {      if (nodes[i].getAD_Client_ID() == AD_Client_ID)       nodes[i].saveEx();    }  } else   if (e.getSource() == bResetLayout)   resetLayout(); else   if (e.getSource() == wfStart || m_activeNode == null)   start(m_wf.getAD_WF_Node_ID()); else   if (e.getSource() == wfBack)   start(m_wf.getPrevious(m_activeNode.getAD_WF_Node_ID(),AD_Client_ID)); else   if (e.getSource() == wfNext)   start(m_wf.getNext(m_activeNode.getAD_WF_Node_ID(),AD_Client_ID)); else   if (e.getSource() == wfEnd)   start(m_wf.getLast(m_activeNode.getAD_WF_Node_ID(),AD_Client_ID));  setCursor(Cursor.getDefaultCursor());}  }
class C{  private static void initAutomaticallyKeyedVault(Context context) throws GeneralSecurityException {  SharedPreferenceVault sharedPreferenceVault=SharedPreferenceVaultFactory.getAppKeyedCompatAes256Vault(context,AUTOMATICALLY_KEYED_PREF_FILE_NAME,AUTOMATICALLY_KEYED_KEY_FILE_NAME,AUTOMATICALLY_KEYED_KEY_ALIAS,AUTOMATICALLY_KEYED_KEY_INDEX,AUTOMATICALLY_KEYED_PRESHARED_SECRET);  SharedPreferenceVaultRegistry.getInstance().addVault(AUTOMATICALLY_KEYED_KEY_INDEX,AUTOMATICALLY_KEYED_PREF_FILE_NAME,AUTOMATICALLY_KEYED_KEY_ALIAS,sharedPreferenceVault);}  }
class C{  public int data(int index){  return this.data.readByte(index);}  }
class C{  public StandardizeTransform(DataSet dataset){  fit(dataset);}  }
class C{  public RxJava1ClientWebRequestBuilder cookie(HttpCookie cookie){  this.delegate.cookie(cookie);  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public synchronized Object co_entry_pause(int thisCoroutine) throws java.lang.NoSuchMethodException {  if (!m_activeIDs.get(thisCoroutine))   throw new java.lang.NoSuchMethodException();  while (m_nextCoroutine != thisCoroutine) {    try {      wait();    } catch (    java.lang.InterruptedException e) {    }  }  return m_yield;}  }
class C{  private static int countQuotes(String s,int i,int j){  int k=0;  for (int l=i; l < j; l++) {    if (s.charAt(l) == '"') {      k++;    }  }  return k;}  }
class C{  public BlockBagExtent(Extent extent,@Nonnull BlockBag blockBag){  this(extent,blockBag,false);}  }
class C{  public boolean isValidEntity(String name){  return name.matches("^[A-Za-z0-9:]+$");}  }
class C{  public void replace(final boolean geoRestoreFromScratch) throws IOException {  String backupName=backupArchive.getName().substring(0,backupArchive.getName().lastIndexOf('.'));  checkReinit(backupName,geoRestoreFromScratch);  final File tmpDir=new File(viprDataDir.getParentFile(),backupName);  log.debug("Temporary backup folder: {}",tmpDir.getAbsolutePath());  try {    ZipUtil.unpack(backupArchive,viprDataDir.getParentFile());    String backupType=backupName.split(BackupConstants.BACKUP_NAME_DELIMITER)[1];    if (BackupType.zk.name().equalsIgnoreCase(backupType)) {      replaceSiteIdFile(tmpDir);    }    if (onlyRestoreSiteId) {      return;    }    tmpDir.renameTo(viprDataDir);    chown(viprDataDir,BackupConstants.STORAGEOS_USER,BackupConstants.STORAGEOS_GROUP);  }  finally {    if (tmpDir.exists()) {      FileUtils.deleteQuietly(tmpDir);    }  }}  }
class C{  public final void testValidateSucceeds(){  NoWhitespaceValidator noWhitespaceValidator=new NoWhitespaceValidator("foo");  assertTrue(noWhitespaceValidator.validate("abcabc"));  assertTrue(noWhitespaceValidator.validate(""));}  }
class C{  public boolean isSetChallenge(){  return this.challenge != null;}  }
class C{  public boolean excluded(){  return excluded;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:40.043 -0500",hash_original_method="7187443C675B66DFB3EB6766D8B9C986",hash_generated_method="2D8D3DFF14460E3CCB73FB9EE0D4DACF") public static String networkNameToString(byte[] data,int offset,int length){  String ret;  if ((data[offset] & 0x80) != 0x80 || length < 1) {    return "";  }switch ((data[offset] >>> 4) & 0x7) {case 0:    int countSeptets;  int unusedBits=data[offset] & 7;countSeptets=(((length - 1) * 8) - unusedBits) / 7;ret=GsmAlphabet.gsm7BitPackedToString(data,offset + 1,countSeptets);break;case 1:try {ret=new String(data,offset + 1,length - 1,"utf-16");} catch (UnsupportedEncodingException ex) {ret="";Log.e(LOG_TAG,"implausible UnsupportedEncodingException",ex);}break;default :ret="";break;}if ((data[offset] & 0x40) != 0) {}return ret;}  }
class C{  @Bean public String activitiDbSchemaUpdateParam(){  return ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE;}  }
class C{  public int bytesToIntLittleEndian(byte[] bytes,int offset){  return ((bytes[offset++] & 0xff)) | ((bytes[offset++] & 0xff) << 8) | ((bytes[offset++] & 0xff) << 16)| ((bytes[offset] & 0xff)) << 24;}  }
class C{  public void commercialResult(String stream,String resultText,RequestResult result){  setCommercialResult(DateTime.currentTime() + " " + resultText);  lastCommercialRunAttempt=System.currentTimeMillis();  setLoadingCommercial(false);  if (result == TwitchApi.RequestResult.RUNNING_COMMERCIAL) {    lastCommercial.put(stream,System.currentTimeMillis());    if (stream != null && stream.equals(currentChannel)) {      lastCommercialRun=System.currentTimeMillis();    }  }}  }
class C{  public static final byte[] inflate(byte[] in) throws IOException {  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);  InflaterInputStream inStream=new InflaterInputStream(new ByteArrayInputStream(in));  byte[] buf=new byte[BUF_SIZE];  while (true) {    int size=inStream.read(buf);    if (size <= 0)     break;    outStream.write(buf,0,size);  }  outStream.close();  return outStream.toByteArray();}  }
class C{  private CIMInstance createStorageSetting(StorageSystem storage,CIMObjectPath poolPath) throws Exception {  CloseableIterator<CIMObjectPath> capabilities=null;  CloseableIterator<CIMObjectPath> poolSettings=null;  CIMInstance instance=null;  try {    capabilities=_helper.getAssociatorNames(storage,poolPath,null,SYMM_STORAGE_POOL_CAPABILITIES,null,null);    if (capabilities != null && capabilities.hasNext()) {      CIMObjectPath poolCapabilities=capabilities.next();      poolSettings=_helper.getAssociatorNames(storage,poolCapabilities,null,SYMM_STORAGE_POOL_SETTING,null,null);      CIMInstance foundVdevSettingForThisPool=null;      while (poolSettings != null && poolSettings.hasNext()) {        CIMInstance it=_helper.getInstance(storage,poolSettings.next(),false,false,PL_STORAGE_EXTENT_INITIAL_USAGE);        int storageExtentInitialUsage=Integer.valueOf(CIMPropertyFactory.getPropertyValue(it,CP_STORAGE_EXTENT_INITIAL_USAGE));        if (storageExtentInitialUsage == DELTA_REPLICA_TARGET_VALUE) {          foundVdevSettingForThisPool=it;          break;        }      }      if (foundVdevSettingForThisPool != null) {        instance=foundVdevSettingForThisPool;        _log.info(String.format("Found existing StorageSetting for VDEV %s",instance.toString()));      } else {        _log.info("Could not find existing StorageSetting for VDEV, going to create it and modify it...");        CIMArgument[] inArgs=_helper.getCreateDefaultStoragePoolSettingsArguments();        CIMArgument[] outArgs=new CIMArgument[5];        _helper.invokeMethod(storage,poolCapabilities,CREATE_SETTING,inArgs,outArgs);        CIMObjectPath newSetting=_cimPath.getCimObjectPathFromOutputArgs(outArgs,NEW_SETTING);        instance=_cimPath.getStoragePoolVdevSettings(newSetting);        _helper.modifyInstance(storage,instance,PL_STORAGE_EXTENT_INITIAL_USAGE);        CIMInstance newSettingInstance=_helper.getInstance(storage,newSetting,false,false,PL_ONLY_EMC_UNIQUE_ID);        String emcUniqueId=CIMPropertyFactory.getPropertyValue(newSettingInstance,CP_EMC_UNIQUE_ID);        _log.info(String.format("Created StorageSetting for VDEV %s (EMCUniqueID = %s)",instance.toString(),emcUniqueId));      }    } else {      String message=String.format("Could not find any %s instances for StoragePool %s. Will not be able to create a StorageSetting.",SYMM_STORAGE_POOL_CAPABILITIES,poolPath.toString());      _log.error(message);      throw DeviceControllerExceptions.smis.noStoragePoolInstances(message,null);    }  }  finally {    if (capabilities != null) {      capabilities.close();    }    if (poolSettings != null) {      poolSettings.close();    }  }  return instance;}  }
class C{  @Override public boolean animateToState(@SliderState int state){  sliderState=state;  return mPager.getAdapter().getCount() > 0 && super.animateToState(state);}  }
class C{  public IRegion[] computeProjectionRegions(IDocument document) throws BadLocationException {  int firstLine=document.getLineOfOffset(positionOfStatement.getOffset() + positionOfStatement.getLength()) + 1;  int lastLine=document.getLineOfOffset(positionOfProof.getOffset() + positionOfProof.getLength());  if (firstLine > lastLine) {    return null;  }  int firstLineOffset=document.getLineOffset(firstLine);  IRegion lastLineInfo=document.getLineInformation(lastLine);  IRegion toFold=alignRegion(new Region(firstLineOffset,lastLineInfo.getOffset() + lastLineInfo.getLength() - firstLineOffset),document);  length=toFold.getOffset() + toFold.getLength() - offset;  if (toFold != null) {    return new IRegion[]{toFold};  }  return null;}  }
class C{  public Plot area(String label,double[] x,double[] y){  return area(label,toList(x),toList(y));}  }
class C{  public TreeMap(Map m){  putAll(m);}  }
class C{  public <T extends Serializable>List<T> dequeueFromBuffer(String topic,JavaType type,int timeout,int limit){  List<T> result=new ArrayList<>();  long cutoff=System.currentTimeMillis() + timeout;  BlockingQueue<String> queue=_topics.get(topic).getMessages();  while (System.currentTimeMillis() < cutoff && (limit < 0 || result.size() < limit)) {    if (Thread.currentThread().isInterrupted()) {      break;    }    try {      String message=queue.poll(timeout,TimeUnit.MILLISECONDS);      if (message != null && !message.isEmpty()) {        T object=_mapper.readValue(message,type);        result.add(object);        if (result.size() % 1000 == 0) {          _logger.debug("Dequeued {} messages from local buffer.",result.size());        }      }    } catch (    InterruptedException e) {      _logger.warn("Interrupted while waiting for poll() to return a message.");      Thread.currentThread().interrupt();    }catch (    IOException e) {      _logger.warn("Exception while deserializing message to type: " + type + ". Skipping this message.",e);    }  }  return result;}  }
class C{  private void suspendChargeableActiveSubscriptions(Organization customer,PaymentType paymentType,long sellerKey){  List<PaymentInfo> paymentInfos=new ArrayList<PaymentInfo>();  for (  PaymentInfo pi : customer.getPaymentInfos()) {    if (pi.getPaymentType() == paymentType) {      paymentInfos.add(pi);    }  }  for (  PaymentInfo pi : paymentInfos) {    Set<Subscription> subscriptions=pi.getSubscriptions();    for (    Subscription subscription : subscriptions) {      if (isOwningSubscription(sellerKey,subscription)) {        addToSuspendedInTransactionList(subscription.getKey());        suspendChargeableActiveSubscription(subscription);      }    }  }}  }
class C{  public void remove() throws Exception {  writer.remove(this);}  }
class C{  public static Byte toByte(Object o,Byte defaultValue){  if (o instanceof Byte)   return (Byte)o;  if (defaultValue != null)   return new Byte(toByteValue(o,defaultValue.byteValue()));  byte res=toByteValue(o,Byte.MIN_VALUE);  if (res == Byte.MIN_VALUE)   return defaultValue;  return new Byte(res);}  }
class C{  public synchronized OMGraphicList prepare(){  return constructGraticuleLines();}  }
class C{  private List<InstrumentHeader> populateInstrumentHeaderForChequeDD(final List<InstrumentHeader> instrumentHeaderList,final List<InstrumentHeader> instrumentProxyList){  for (  final InstrumentHeader instrumentHeader : instrumentProxyList) {    if (getInstrumentType().equals(CollectionConstants.INSTRUMENTTYPE_CHEQUE))     instrumentHeader.setInstrumentType(financialsUtil.getInstrumentTypeByType(CollectionConstants.INSTRUMENTTYPE_CHEQUE)); else     if (getInstrumentType().equals(CollectionConstants.INSTRUMENTTYPE_DD))     instrumentHeader.setInstrumentType(financialsUtil.getInstrumentTypeByType(CollectionConstants.INSTRUMENTTYPE_DD));    if (instrumentHeader.getBankId() != null) {      final Bank bank=bankDAO.findById(instrumentHeader.getBankId().getId(),false);      instrumentHeader.setBankId(bank);    }    chequeInstrumenttotal=chequeInstrumenttotal.add(instrumentHeader.getInstrumentAmount());    instrumentHeader.setIsPayCheque(CollectionConstants.ZERO_INT);    instrumentHeaderList.add(instrumentHeader);  }  return instrumentHeaderList;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DatatypePackage.DICTIONARY_PROPERTY_TYPE__KEY_TYPE:    return keyType != null;case DatatypePackage.DICTIONARY_PROPERTY_TYPE__VALUE_TYPE:  return valueType != null;}return super.eIsSet(featureID);}  }
class C{  @Override public String queryToRetrieveData(){  String parameterizedQuery;  if (query.contains("%s")) {    parameterizedQuery=query.replace("%s",startRow + "");  } else {    parameterizedQuery=query;  }  return parameterizedQuery;}  }
class C{  public void testGetSigAlgOID(){  if (this.cert == null) {    return;  }  assertEquals("The name of OID of signature algorithm is not correct.",tbt_cert.getSigAlgOID(),cert.getSigAlgOID());}  }
class C{  public boolean isHierarchyBeingConnected(){  return (this.tagBits & TagBits.EndHierarchyCheck) == 0 && (this.tagBits & TagBits.BeginHierarchyCheck) != 0;}  }
class C{  public static Transaction createFakeTx(final NetworkParameters params){  return createFakeTxWithoutChangeAddress(params,Coin.COIN,new ECKey().toAddress(params));}  }
class C{  public void unload(){  GLES20.glDeleteShader(mVShaderHandle);  GLES20.glDeleteShader(mFShaderHandle);  GLES20.glDeleteProgram(mProgram);}  }
class C{  protected void init(Reader input){  setDone(false);  reader=new BufferedReader(input);}  }
class C{  protected void updateOntoFrom(){  String onto=GitUIUtil.getTextField(myOntoComboBox).getText();  String from=GitUIUtil.getTextField(myFromComboBox).getText();  myFromComboBox.removeAllItems();  myOntoComboBox.removeAllItems();  for (  GitBranch b : myLocalBranches) {    myFromComboBox.addItem(b);    myOntoComboBox.addItem(b);  }  if (myShowRemoteBranchesCheckBox.isSelected()) {    for (    GitBranch b : myRemoteBranches) {      myFromComboBox.addItem(b);      myOntoComboBox.addItem(b);    }  }  if (myShowTagsCheckBox.isSelected()) {    for (    GitTag t : myTags) {      myFromComboBox.addItem(t);      myOntoComboBox.addItem(t);    }  }  GitUIUtil.getTextField(myOntoComboBox).setText(onto);  GitUIUtil.getTextField(myFromComboBox).setText(from);}  }
class C{  public void addAllProjects(){  addAllProjects(Specs.satisfyAll());}  }
class C{  public KeyValueNode<String,Integer> findWord(String aWord){  aWord=aWord.toLowerCase();  KeyValueNode<String,Integer> parent=root;  int depth=1;  while (parent.hasChildren()) {    String w=aWord.substring(0,depth);    KeyValueNode<String,Integer> child=parent.getChild(w);    if (w.equals(aWord)) {      return child;    } else     if (child != null) {      parent=child;      depth++;    } else {      return null;    }  }  return null;}  }
class C{  public <T>StandardMBeanSupport(T resource,Class<T> mbeanInterfaceType) throws NotCompliantMBeanException {  super(resource,mbeanInterfaceType);}  }
class C{  public void constValueIndex(double value) throws IOException {  constValueIndex('D',pool.addDoubleInfo(value));}  }
class C{  public static ComputeService.ComputeState createAWSComputeHost(VerificationHost host,String resourcePoolLink,String accessKey,String secretKey,boolean isAwsClientMock,String awsMockEndpointReference,Set<String> tagLinks) throws Throwable {  AuthCredentialsServiceState auth=new AuthCredentialsServiceState();  auth.type=DEFAULT_AUTH_TYPE;  auth.privateKeyId=accessKey;  auth.privateKey=secretKey;  auth.documentSelfLink=UUID.randomUUID().toString();  TestUtils.doPost(host,auth,AuthCredentialsService.AuthCredentialsServiceState.class,UriUtils.buildUri(host,AuthCredentialsService.FACTORY_LINK));  String authLink=UriUtils.buildUriPath(AuthCredentialsService.FACTORY_LINK,auth.documentSelfLink);  ComputeDescriptionService.ComputeDescription awshostDescription=new ComputeDescriptionService.ComputeDescription();  awshostDescription.id=UUID.randomUUID().toString();  awshostDescription.name=aws;  awshostDescription.environmentName=aws;  awshostDescription.documentSelfLink=awshostDescription.id;  awshostDescription.supportedChildren=new ArrayList<String>();  awshostDescription.supportedChildren.add(ComputeType.VM_GUEST.name());  awshostDescription.instanceAdapterReference=UriUtils.buildUri(host,AWSUriPaths.AWS_INSTANCE_ADAPTER);  awshostDescription.enumerationAdapterReference=UriUtils.buildUri(host,AWSUriPaths.AWS_ENUMERATION_ADAPTER);  awshostDescription.statsAdapterReference=UriUtils.buildUri(host,AWSUriPaths.AWS_STATS_ADAPTER);  awshostDescription.zoneId=zoneId;  awshostDescription.regionId=zoneId;  awshostDescription.authCredentialsLink=authLink;  TestUtils.doPost(host,awshostDescription,ComputeDescriptionService.ComputeDescription.class,UriUtils.buildUri(host,ComputeDescriptionService.FACTORY_LINK));  ComputeService.ComputeState awsComputeHost=new ComputeService.ComputeState();  awsComputeHost.id=UUID.randomUUID().toString();  awsComputeHost.name=awshostDescription.name;  awsComputeHost.documentSelfLink=awsComputeHost.id;  awsComputeHost.descriptionLink=UriUtils.buildUriPath(ComputeDescriptionService.FACTORY_LINK,awshostDescription.id);  awsComputeHost.resourcePoolLink=resourcePoolLink;  awsComputeHost.tagLinks=tagLinks;  if (isAwsClientMock) {    awsComputeHost.adapterManagementReference=UriUtils.buildUri(awsMockEndpointReference);  } else {    awsComputeHost.adapterManagementReference=UriUtils.buildUri(awsEndpointReference);  }  ComputeService.ComputeState returnState=TestUtils.doPost(host,awsComputeHost,ComputeService.ComputeState.class,UriUtils.buildUri(host,ComputeService.FACTORY_LINK));  return returnState;}  }
class C{  public void testFailureWithSuccessThreshold(){  CircuitBreaker breaker=new CircuitBreaker().withSuccessThreshold(3);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordSuccess();  state.recordFailure();  assertTrue(breaker.isOpen());}  }
class C{  private long monthRange(){  ValueRange startRange=chrono.range(MONTH_OF_YEAR);  if (startRange.isFixed() && startRange.isIntValue()) {    return startRange.getMaximum() - startRange.getMinimum() + 1;  }  return -1;}  }
class C{  @Override public void readSettings(){  SharedPreferences sharedPreferences=this.getSharedPreferences(getString(R.string.sp_widget_week_setting),Context.MODE_PRIVATE);  setLocation(new Location(sharedPreferences.getString(getString(R.string.key_location),getString(R.string.local)),null));  Location location=DatabaseHelper.getInstance(this).searchLocation(getLocation());  if (location != null) {    setLocation(location);  }}  }
class C{  public static File createTempFile() throws IOException {  File file=File.createTempFile("test",null);  file.deleteOnExit();  return file;}  }
class C{  public static void print(int m,char guess){  System.out.print("\t" + guess);switch (m) {case 1:    System.out.println(" is already in the word");  break;case 2:System.out.println(" is not in the word");}}  }
class C{  protected boolean visibleInOverview(VisualizationTask task){  if (single) {    return task.visible && !task.hasAnyFlags(VisualizationTask.FLAG_NO_EMBED);  }  return task.visible && !task.hasAnyFlags(VisualizationTask.FLAG_NO_THUMBNAIL);}  }
class C{  public PlogReaderThread.IncludePlog parseIncludePlogLCR(PlogReaderThread parent){  String filename=null;  for (  PlogLCRTag tag : rawTags) {switch (tag.id) {case PlogLCRTag.TAG_PLOG_FILENAME:      filename=tag.valueString();    break;case PlogLCRTag.TAG_PLOGSEQ:case PlogLCRTag.TAG_RBA:case PlogLCRTag.TAG_APPLY_NAME:case PlogLCRTag.TAG_MINE_UUID:case PlogLCRTag.TAG_SCN:case PlogLCRTag.TAG_PLOGNAME:default :}}return parent.new IncludePlog(filename);}  }
class C{  public FlyToLookAtAnimator(Interpolator interpolator,OrbitView targetView,Position lookAtPosition,int altitudeMode,PositionAnimator eyePositionAnimator,DoubleAnimator elevationAnimator,AngleAnimator headingAnimator,AngleAnimator pitchAnimator,AngleAnimator rollAnimator){  super(interpolator,altitudeMode,eyePositionAnimator,elevationAnimator,headingAnimator,pitchAnimator,rollAnimator);  this.targetView=targetView;  this.altitudeMode=altitudeMode;  this.lookAtPosition=lookAtPosition;  this.eyePositionAnimator=eyePositionAnimator;  this.elevationAnimator=elevationAnimator;}  }
class C{  public void test_removeHandshakeCompletedListener() throws IOException {  SSLSocket ssl=getSSLSocket();  HandshakeCompletedListener ls=new HandshakeCL();  try {    ssl.removeHandshakeCompletedListener(null);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    ssl.removeHandshakeCompletedListener(ls);  } catch (  IllegalArgumentException expected) {  }  ssl.addHandshakeCompletedListener(ls);  ssl.removeHandshakeCompletedListener(ls);  ssl.close();}  }
class C{  @Override public void postEvent(final AWTEvent event){  LOGGER.trace("event posted: " + event);  if (event instanceof InvocationEvent) {synchronized (lock) {      if (paused) {        LOGGER.trace("event queued: " + event);        queue.add(new SynchronizingInvocationEvent((InvocationEvent)event,workspace,deQueueSignal));      } else {        LOGGER.trace("event passed: " + event);        super.postEvent(new SynchronizingInvocationEvent((InvocationEvent)event,workspace,CompletionSignal.IGNORE));      }    }  } else {    super.postEvent(event);  }}  }
class C{  public static Bitmap decodeFile(File f){  try {    BitmapFactory.Options options=new BitmapFactory.Options();    options.inJustDecodeBounds=true;    BitmapFactory.decodeStream(new FileInputStream(f),null,options);    int inSampleSize=computeSampleSize(options,-1,128 * 128);    options.inSampleSize=inSampleSize;    options.inJustDecodeBounds=false;    return BitmapFactory.decodeStream(new FileInputStream(f),null,options);  } catch (  Exception e) {  }  return null;}  }
class C{  public void testReceiveTwoThenCloseConnection() throws Exception {  Message[] outbound=new Message[]{session.createTextMessage("First Message"),session.createTextMessage("Second Message")};  beginTx();  while (consumer.receive(1000) != null) {  }  commitTx();  beginTx();  producer.send(outbound[0]);  producer.send(outbound[1]);  commitTx();  LOG.info("Sent 0: " + outbound[0]);  LOG.info("Sent 1: " + outbound[1]);  ArrayList<Message> messages=new ArrayList<>();  beginTx();  Message message=consumer.receive(2000);  assertEquals(outbound[0],message);  message=consumer.receive(2000);  assertNotNull(message);  assertEquals(outbound[1],message);  reconnect();  beginTx();  message=consumer.receive(2000);  assertNotNull("Should have re-received the first message again!",message);  messages.add(message);  assertEquals(outbound[0],message);  message=consumer.receive(5000);  assertNotNull("Should have re-received the second message again!",message);  messages.add(message);  assertEquals(outbound[1],message);  commitTx();  Message inbound[]=new Message[messages.size()];  messages.toArray(inbound);  assertTextMessagesEqual("Rollback did not work",outbound,inbound);}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 3 || lexState < 0)   throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrException.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  void assignLocalToLocal(Local right,Local left){  localsRemove(left);  localsPutAll(left,locals.get(right));  if (doCheck)   sanityCheck();}  }
class C{  public void readMultizoneShapefile(String shapefile,int idField) throws IOException {  File f=new File(shapefile);  if (!f.exists() || !f.canRead()) {    throw new IOException("Cannot read from " + shapefile);  }  LOG.info("Start reading shapefile " + shapefile);  this.zones=new ArrayList<MyZone>();  MultiPolygon mp=null;  GeometryFactory gf=new GeometryFactory();  ShapeFileReader sfr=new ShapeFileReader();  sfr.readFileAndInitialize(shapefile);  Collection<SimpleFeature> features=sfr.getFeatureSet();  for (  SimpleFeature feature : features) {    String name=null;    Object o=feature.getAttribute(idField);    name=o.toString();    Object shape=feature.getDefaultGeometry();    if (shape instanceof MultiPolygon) {      mp=(MultiPolygon)shape;      if (!mp.isSimple()) {        LOG.warn("This polygon is NOT simple: " + name);      }      Polygon polygonArray[]=new Polygon[mp.getNumGeometries()];      for (int j=0; j < mp.getNumGeometries(); j++) {        if (mp.getGeometryN(j) instanceof Polygon) {          polygonArray[j]=(Polygon)mp.getGeometryN(j);        } else {          LOG.warn("Subset of multipolygon is NOT a polygon.");        }      }      MyZone newZone=new MyZone(polygonArray,gf,Id.create(name,MyZone.class));      this.zones.add(newZone);    } else {      LOG.warn("This is not a multipolygon!");    }  }  LOG.info("Done reading shapefile.");}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator keys=this.keys();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length > 1) {    Message message=new Message(BaseHandler.mergeParams(params));    conversation.addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),conversation.getName());    service.sendBroadcast(intent);  } else {    throw new CommandException(service.getString(R.string.text_missing));  }}  }
class C{  private boolean isImportUsed(GrReferenceElement refElement,PsiElement resolved){  if (GroovyImportHelper.isImplicitlyImported(resolved,refElement.getReferenceName(),(GroovyFile)file)) {    final ClassResolverProcessor processor=new ClassResolverProcessor(refElement.getReferenceName(),refElement,ClassHint.RESOLVE_KINDS_CLASS);    GroovyImportHelper.processImports(ResolveState.initial(),null,refElement,processor,((GroovyFile)file).getImportStatements(),true);    if (!processor.hasCandidates()) {      return false;    }  }  return true;}  }
class C{  private void printData(){  char[] parts=new char[17];  int partsloc=0;  for (int i=0; i < data.length; i++) {    int d=((int)data[i]) & 0xff;    if (d == 0) {      parts[partsloc++]='.';    } else     if (d < 32 || d >= 127) {      parts[partsloc++]='?';    } else {      parts[partsloc++]=(char)d;    }    if (d < 16) {      System.out.print("0" + Integer.toHexString(d));    } else {      System.out.print(Integer.toHexString(d));    }    if ((i & 15) == 15) {      System.out.println("      " + new String(parts));      partsloc=0;    } else     if ((i & 7) == 7) {      System.out.print("  ");      parts[partsloc++]=' ';    } else     if ((i & 1) == 1) {      System.out.print(" ");    }  }  System.out.println();}  }
class C{  public boolean isArabicNumeral(char c){  return isHalfWidthArabicNumeral(c) || isFullWidthArabicNumeral(c);}  }
class C{  public static void toFile(InputStream input,File file) throws IOException {  OutputStream os=new FileOutputStream(file);  int bytesRead=0;  byte[] buffer=new byte[DEFAULT_BUFFER_SIZE];  while ((bytesRead=input.read(buffer,0,DEFAULT_BUFFER_SIZE)) != -1) {    os.write(buffer,0,bytesRead);  }  IOUtils.closeQuietly(os);  IOUtils.closeQuietly(input);}  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  RelativeStrengthIndexDataset clone=(RelativeStrengthIndexDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  protected String processSubstitution(String substitutionRule,String description,int startPos){  String replace;  String replaceWith;  int equalPos=substitutionRule.indexOf('=');  replace=substitutionRule.substring(0,equalPos);  replaceWith=substitutionRule.substring(equalPos + 1);  handleSpecialSubstitution(replace,replaceWith,startPos,description);  if (replaceWith.length() == 0) {    error("Nothing on right-hand side of =",startPos,description);  }  if (replace.length() == 0) {    error("Nothing on left-hand side of =",startPos,description);  }  if (replace.length() == 2 && replace.charAt(0) != '\\') {    error("Illegal left-hand side for =",startPos,description);  }  if (replace.length() >= 3 && replace.charAt(0) != '<' && replace.codePointBefore(equalPos) != '>') {    error("Illegal left-hand side for =",startPos,description);  }  if (!(replaceWith.charAt(0) == '[' && replaceWith.charAt(replaceWith.length() - 1) == ']') && !(replaceWith.charAt(0) == '(' && replaceWith.charAt(replaceWith.length() - 1) == ')')) {    error("Illegal right-hand side for =",startPos,description);  }  StringBuffer result=new StringBuffer();  result.append(description.substring(0,startPos));  int lastPos=startPos;  int pos=description.indexOf(replace,startPos);  while (pos != -1) {    result.append(description.substring(lastPos,pos));    result.append(replaceWith);    lastPos=pos + replace.length();    pos=description.indexOf(replace,lastPos);  }  result.append(description.substring(lastPos));  return result.toString();}  }
class C{  @Override public void addValues(final IScope scope,final IContainer values){  for (  final Object o : values.iterable(scope)) {    addValue(scope,(V)o);  }}  }
class C{  public Builder putArray(String setting,String... values){  remove(setting);  int counter=0;  while (true) {    String value=map.remove(setting + '.' + (counter++));    if (value == null) {      break;    }  }  for (int i=0; i < values.length; i++) {    put(setting + "." + i,values[i]);  }  return this;}  }
class C{  public String namespace(String name,boolean attribute){  int colon=name.indexOf(':');  if (colon == -1) {    return attribute ? "" : theSchema.getURI();  }  String prefix=name.substring(0,colon);  if (prefix.equals("xml")) {    return "http://www.w3.org/XML/1998/namespace";  } else {    return ("urn:x-prefix:" + prefix).intern();  }}  }
class C{  public static float readFloat(){  return Float.intBitsToFloat(readInt());}  }
class C{  public StaticInvokeExpr newStaticInvokeExpr(SootMethodRef method){  return new JStaticInvokeExpr(method,new ArrayList());}  }
class C{  public JpaFluentJdbcModule(FluentJdbcBuilder fluentJdbcBuilder,JpaConnectionExtractor jpaConnectionExtractor){  Preconditions.checkNotNull(fluentJdbcBuilder,"fluentJdbcBuilder");  Preconditions.checkNotNull(jpaConnectionExtractor,"jpaConnectionExtractor");  this.fluentJdbcBuilder=fluentJdbcBuilder;  this.jpaConnectionExtractor=jpaConnectionExtractor;}  }
class C{  public void antientropy(){  ArrayList<Node> candidates=new ArrayList<Node>();  for (  Node n : clusterConfig.getNodes())   if (rpcService.isConnected(n.getNodeId()))   candidates.add(n);  int numNodes=candidates.size();  if (numNodes == 0)   return;  Node[] nodes=candidates.toArray(new Node[numNodes]);  int rn=random.nextInt(numNodes);  antientropy(nodes[rn]);}  }
class C{  public static void printCoverage(String prefix,CoverageAttributeTable cat,String covname){  println(prefix,"Coverage Description: " + cat.getCoverageDescription(covname));  println(prefix,"Coverage Topology Level: " + cat.getCoverageTopologyLevel(covname));  CoverageTable ct=cat.getCoverageTable(covname);  print(prefix,"FeatureClassNames: ");  println();  Hashtable<String,CoverageTable.FeatureClassRec> info=ct.getFeatureTypeInfo();  for (  CoverageTable.FeatureClassRec fcr : info.values()) {    String tstring="[unknown] ";    if (fcr.type == CoverageTable.TEXT_FEATURETYPE) {      tstring="[text feature] ";    } else     if (fcr.type == CoverageTable.EDGE_FEATURETYPE) {      tstring="[edge feature] ";    } else     if (fcr.type == CoverageTable.AREA_FEATURETYPE) {      tstring="[area feature] ";    } else     if (fcr.type == CoverageTable.UPOINT_FEATURETYPE) {      FeatureClassInfo fci=ct.getFeatureClassInfo(fcr.feature_class);      if (fci == null) {        tstring="[point feature] ";      } else       if (fci.getFeatureType() == CoverageTable.EPOINT_FEATURETYPE) {        tstring="[entity point feature] ";      } else       if (fci.getFeatureType() == CoverageTable.CPOINT_FEATURETYPE) {        tstring="[connected point feature] ";      } else {        tstring="[point feature] ";      }    } else     if (fcr.type == CoverageTable.COMPLEX_FEATURETYPE) {      tstring="[complex feature] ";    }    println(prefix,fcr.feature_class + ": " + tstring+ fcr.description);  }}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  public static IRI parseURI(String nTriplesURI,ValueFactory valueFactory) throws IllegalArgumentException {  if (nTriplesURI.startsWith("<") && nTriplesURI.endsWith(">")) {    String uri=nTriplesURI.substring(1,nTriplesURI.length() - 1);    uri=unescapeString(uri);    return valueFactory.createIRI(uri);  } else {    throw new IllegalArgumentException("Not a legal N-Triples URI: " + nTriplesURI);  }}  }
class C{  public void teleport(GeocentricCoordinates target){  teleportingController.teleport(target);}  }
class C{  private void hideLyrics(){  TranslateAnimation slideDownAnimation=new TranslateAnimation(coverArt,400,new DecelerateInterpolator(2.0f),View.VISIBLE,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,-2.0f,Animation.RELATIVE_TO_SELF,0.0f);  slideDownAnimation.animate();}  }
class C{  public long readLong() throws IOException {  readFully(readBuffer,0,8);  return (((long)readBuffer[0] << 56) + ((long)(readBuffer[1] & 0xFF) << 48) + ((long)(readBuffer[2] & 0xFF) << 40)+ ((long)(readBuffer[3] & 0xFF) << 32)+ ((long)(readBuffer[4] & 0xFF) << 24)+ ((readBuffer[5] & 0xFF) << 16)+ ((readBuffer[6] & 0xFF) << 8)+ ((readBuffer[7] & 0xFF)));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.079 -0500",hash_original_method="E7C11CC1C20C82FA934F4E0A14372CFF",hash_generated_method="C18525F72545C4D0BED4CCF2CFBC6A7D") @DSSafe(DSCat.SAFE_OTHERS) public static String sha512Hex(byte[] data){  return Hex.encodeHexString(sha512(data));}  }
class C{  public static boolean initWeb(ServletConfig config){  if (s_initOK) {    log.info(config.getServletName());    return true;  }  Enumeration en=config.getInitParameterNames();  StringBuffer info=new StringBuffer("Servlet Init Parameter: ").append(config.getServletName());  while (en.hasMoreElements()) {    String name=en.nextElement().toString();    String value=config.getInitParameter(name);    System.setProperty(name,value);    info.append("\n").append(name).append("=").append(value);  }  boolean retValue=initWeb(config.getServletContext());  log.info(info.toString());  return retValue;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.258 -0500",hash_original_method="D7DB7FC66FA71E8C80EBAD3AE821E2C4",hash_generated_method="08D1602981A2361A8F6F6CAB7B54DF83") public void addPath(Path src,Matrix matrix){  if (!src.isSimplePath)   isSimplePath=false;  addTaint(src.getTaintInt() + matrix.getTaintInt());}  }
class C{  public static float min(float a,float b){  return a < b ? a : b;}  }
class C{  public static String nodeValue(Node node){  if (node == null)   return null;  StringBuilder valueBuffer=new StringBuilder();  do {    if (node.getNodeType() == Node.CDATA_SECTION_NODE || node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.COMMENT_NODE) {      valueBuffer.append(node.getNodeValue());    }  } while ((node=node.getNextSibling()) != null);  return valueBuffer.toString();}  }
class C{  public AgentConfigImpl(Properties props){  super(filterOutAgentProperties(appendOptionalPropertyFileProperties(props)),true);  this.url=getPropertyFileURL(retrievePropertyFile());  initialize(appendOptionalPropertyFileProperties(props));}  }
class C{  void onInsnAdded(SsaInsn insn){  onSourcesChanged(insn,null);  updateOneDefinition(insn,null);}  }
class C{  public VariableDefinitionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public final double SFMeanEntropyGain(){  return m_delegate.SFMeanEntropyGain();}  }
class C{  @Override public void writeFile(final String filename){  this.mainKml=kmlObjectFactory.createKmlType();  this.mainDoc=kmlObjectFactory.createDocumentType();  this.mainKml.setAbstractFeatureGroup(kmlObjectFactory.createDocument(mainDoc));  createStyles();  this.mainFolder=kmlObjectFactory.createFolderType();  this.mainFolder.setName("Comparison, Iteration " + this.iter);  this.mainDoc.getAbstractFeatureGroup().add(kmlObjectFactory.createFolder(this.mainFolder));  this.writer=new KMZWriter(filename);  try {    this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(createLegend()));  } catch (  IOException e) {    log.error("Cannot add legend to the KMZ file.",e);  }  try {    this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(MatsimKMLLogo.writeMatsimKMLLogo(writer)));  } catch (  IOException e) {    log.error("Cannot add logo to the KMZ file.",e);  }  try {    this.writer.addNonKMLFile(MatsimResource.getAsInputStream("icons/plus.png"),CROSSICON);    this.writer.addNonKMLFile(MatsimResource.getAsInputStream("icons/minus.png"),MINUSICON);  } catch (  IOException e) {    log.error("Could not copy copy plus-/minus-icons to the KMZ.",e);  }  FolderType simRealFolder=kmlObjectFactory.createFolderType();  simRealFolder.setName("XY Comparison Plots");  this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createFolder(simRealFolder));  ScreenOverlayType errorGraphBoard=createBiasErrorGraphBoard(filename);  errorGraphBoard.setVisibility(Boolean.TRUE);  this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(errorGraphBoard));  ScreenOverlayType errorGraphAlight=createBiasErrorGraphAlight(filename);  errorGraphAlight.setVisibility(Boolean.TRUE);  this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(errorGraphAlight));  this.createCountsLoadCurveGraphs();  for (int h=1; h < 25; h++) {    TimeSpanType timespan=kmlObjectFactory.createTimeSpanType();    timespan.setBegin("1999-01-01T" + Time.writeTime(((h - 1) * 3600)));    timespan.setEnd("1999-01-01T" + Time.writeTime((h * 3600)));    this.addCountsSimRealPerHourGraphs(simRealFolder,h,timespan);    FolderType subfolder=kmlObjectFactory.createFolderType();    subfolder.setName(createFolderName(h));    subfolder.setAbstractTimePrimitiveGroup(kmlObjectFactory.createTimeSpan(timespan));    this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createFolder(subfolder));    writeStopData(this.boardCountComparisonFilter.getCountsForHour(Integer.valueOf(h)),subfolder,"board");    writeStopData(this.alightCountComparisonFilter.getCountsForHour(Integer.valueOf(h)),subfolder,"alight");  }  finish();}  }
class C{  @CanIgnoreReturnValue public static <T>T readLines(URL url,Charset charset,LineProcessor<T> callback) throws IOException {  return asCharSource(url,charset).readLines(callback);}  }
class C{  public static void checkMap(Map<String,Object> map,Object... keysValues){  for (int i=0; i < keysValues.length; i+=2) {    Assert.assertEquals(keysValues[i + 1],map.get(keysValues[i]));  }}  }
class C{  public static StaticMethodExpression staticMethod(String className,String method,Object... parameters){  return new StaticMethodExpression(className,method,parameters);}  }
class C{  public static void addCSSClass(Element e,String cssclass){  String oldval=e.getAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE);  if (oldval == null || oldval.length() == 0) {    setAtt(e,SVGConstants.SVG_CLASS_ATTRIBUTE,cssclass);    return;  }  String[] classes=oldval.split(" ");  for (  String c : classes) {    if (c.equals(cssclass)) {      return;    }  }  setAtt(e,SVGConstants.SVG_CLASS_ATTRIBUTE,oldval + " " + cssclass);}  }
class C{  public Tier(TierList kn,int thisTier,String[] tierNames){  jsp=new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_NEVER,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);  this.knowList=kn;  num=thisTier;  this.tierNames=tierNames;  setLayout(new BoxLayout(this,BoxLayout.X_AXIS));  jsp.setViewportView(view);}  }
class C{  public static String endOfTheDayHTMLReport(Properties ctx,CloseTillBean bean){  double beginningBalance=(bean.getBeginningBalance() == null ? 0 : bean.getBeginningBalance().doubleValue());  double statementDifference=(bean.getNetCashTrx() == null ? 0 : bean.getNetCashTrx().doubleValue());  double transferAmount=(bean.getBalanceEntered() == null ? 0 : bean.getBalanceEntered().doubleValue());  double differenceAmount=(bean.getDifference() == null ? 0 : bean.getDifference().doubleValue());  double endingBalance=(bean.getEndingBalance() == null ? 0 : bean.getEndingBalance().doubleValue());  double tillCashTotal=(bean.getCashTotal() == null ? 0 : bean.getCashTotal().doubleValue());  double cashBeanCardTotal=(bean.getCardTotal() == null ? 0 : bean.getCardTotal().doubleValue());  double tillCardTotal=(bean.getCardTotal() == null ? 0 : bean.getCardTotal().doubleValue());  double cardDifference=(bean.getCardDifference() == null ? 0 : bean.getCardDifference().doubleValue());  double cashBeanChequeTotal=(bean.getChequeTotal() == null ? 0 : bean.getChequeTotal().doubleValue());  double tillChequeTotal=(bean.getChequeTotal() == null ? 0 : bean.getChequeTotal().doubleValue());  double chequeDifference=(bean.getChequeDifference() == null ? 0 : bean.getChequeDifference().doubleValue());  double grandTotal=(bean.getGrandTotal() == null ? 0 : bean.getGrandTotal().doubleValue());  SimpleDateFormat sdf=new SimpleDateFormat(TimestampConvertor.DEFAULT_DATE_PATTERN1);  Date today=new Date(System.currentTimeMillis());  StringBuffer reportData=new StringBuffer();  String title="<H2>End of the Day Report</H2>";  String subtitle="<H3>" + sdf.format(today) + "</H3>";  reportData.append(title);  reportData.append(subtitle);  reportData.append("<BR>");  int maxwidth=40;  int column1=20;  int column2=maxwidth - column1;  String format1="%1$-" + column1 + "s%2$"+ column2+ "s%n";  String format2="%1$-" + column1 + "s%2$"+ column2+ ".2f%n";  String tillNoTxt=String.format(format1,"Till No",bean.getTillName());  String beginningBalanceTxt=String.format(format2,"Beginning Balance",beginningBalance);  String netCashTrxTxt=String.format(format2,"Net Cash Trx",statementDifference);  String tillBalanceEnteredTxt=String.format(format2,"Till Balance Entered",transferAmount);  String differenceTxt=String.format(format2,"Difference",differenceAmount);  String endingBalanceTxt=String.format(format2,"Ending Balance",endingBalance);  String cashTotalTxt=String.format(format2,"Cash Total",tillCashTotal);  String cardTotalTxt=String.format(format2,"Card Total",tillCardTotal);  String chequeTotalTxt=String.format(format2,"Cheque Total",tillChequeTotal);  String grandTotalTxt=String.format(format2,"Grand Total",grandTotal);  String cardEnteredTxt=String.format(format2,"Card Amt Entered",cashBeanCardTotal);  String cardDifferenceTxt=String.format(format2,"Card Difference",cardDifference);  String chequeEnteredTxt=String.format(format2,"Cheque Amt Entered",cashBeanChequeTotal);  String chequeDifferenceTxt=String.format(format2,"Cheque Difference",chequeDifference);  reportData.append(tillNoTxt).append(beginningBalanceTxt).append(netCashTrxTxt).append(tillBalanceEnteredTxt).append(differenceTxt).append(endingBalanceTxt).append(cashTotalTxt).append(cardEnteredTxt).append(cardTotalTxt).append(cardDifferenceTxt).append(chequeEnteredTxt).append(chequeTotalTxt).append(chequeDifferenceTxt).append(grandTotalTxt).append("<BR>");  return reportData.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:21.444 -0500",hash_original_method="E28DA299470AFBBB55E3F0E22CB4A567",hash_generated_method="A036F6419751AB9510A8B349F63C59A9") public boolean beginBatchEdit(){  return false;}  }
class C{  public Builder addSignature(WebResource webResource){  long timestamp=System.currentTimeMillis();  return webResource.header(AbstractHMACAuthFilter.INTERNODE_HMAC,getSignature(webResource,timestamp,null)).header(AbstractHMACAuthFilter.INTERNODE_TIMESTAMP,timestamp);}  }
class C{  private ArrayList<Cluster> defineClusters(Random random) throws Exception {  if (m_Pattern == GRID) {    return defineClustersGRID(random);  } else {    return defineClustersRANDOM(random);  }}  }
class C{  public static boolean init() throws DokanNotInstalledException, DokanVersionException {  if (initStatus != null) {    return initStatus;  }  final OperatingSystem os=getOperatingSystem();  addPathToLibrary(os.getLibraryPath());  if (os.isWindows()) {    try {      if (Dokan.getVersion() == 600) {        logger.debug("Dokan : UserFSUtils : Starting with version = " + Dokan.getVersion() + " / Driver = "+ Dokan.getDriverVersion()+ ".");        initStatus=true;        return true;      }      logger.debug("Dokan : UserFSUtils : Invalid Dokan version: " + Dokan.getVersion());    } catch (    final Throwable e) {      logger.debug("Dokan : UserFSUtils : Error caught while initializing Dokan" + e.getMessage());      initStatus=false;      throw new DokanNotInstalledException();    }    initStatus=false;    throw new DokanVersionException();  }  initStatus=true;  return true;}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public void changeViewPosition(int incx,int incy){  Point viewp=_scr.getViewport().getViewPosition();  _scr.getViewport().setViewSize(getPreferredSize());  _scr.getViewport().setViewPosition(new Point(viewp.x + incx,viewp.y + incy));}  }
class C{  public static UTMCoord fromUTM(int zone,String hemisphere,double easting,double northing){  return fromUTM(zone,hemisphere,easting,northing,null);}  }
class C{  public ResizingArrayQueue(){  q=(Item[])new Object[2];  n=0;  first=0;  last=0;}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {}  }
class C{  public boolean isExpert(){  return expert;}  }
class C{  public NTRUSigningPrivateKeyParameters(InputStream is,NTRUSigningKeyGenerationParameters params) throws IOException {  super(true);  bases=new ArrayList<Basis>();  for (int i=0; i <= params.B; i++) {    add(new Basis(is,params,i != 0));  }  publicKey=new NTRUSigningPublicKeyParameters(is,params.getSigningParameters());}  }
class C{  public boolean isNew(){  boolean is;  if (m_editFlag == FolderEditFlag.NEW)   is=true; else   is=false;  return is;}  }
class C{  public static TimeValue timeOf(DateValue date){  return (date instanceof TimeValue) ? (TimeValue)date : MIDNIGHT;}  }
class C{  public static boolean isUpperCase(char ch){  return false;}  }
class C{  @Override public void draw(Canvas canvas,int x,int y,int width,int height,Paint paint){  paint.setAntiAlias(mRenderer.isAntialiasing());  paint.setStyle(Style.FILL);  paint.setTextSize(mRenderer.getLabelsTextSize());  int legendSize=getLegendSize(mRenderer,height / 5,0);  int left=x;  int top=y;  int right=x + width;  int sLength=mDataset.getItemCount();  String[] titles=new String[sLength];  for (int i=0; i < sLength; i++) {    titles[i]=mDataset.getCategory(i);  }  if (mRenderer.isFitLegend()) {    legendSize=drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,true);  }  int bottom=y + height - legendSize;  drawBackground(mRenderer,canvas,x,y,width,height,paint,false,DefaultRenderer.NO_COLOR);  int mRadius=Math.min(Math.abs(right - left),Math.abs(bottom - top));  int radius=(int)(mRadius * 0.35 * mRenderer.getScale());  if (mCenterX == NO_VALUE) {    mCenterX=(left + right) / 2;  }  if (mCenterY == NO_VALUE) {    mCenterY=(bottom + top) / 2;  }  float shortRadius=radius * 0.9f;  float longRadius=radius * 1.1f;  double min=mRenderer.getMinValue();  double max=mRenderer.getMaxValue();  double angleMin=mRenderer.getAngleMin();  double angleMax=mRenderer.getAngleMax();  if (!mRenderer.isMinValueSet() || !mRenderer.isMaxValueSet()) {    int count=mRenderer.getSeriesRendererCount();    for (int i=0; i < count; i++) {      double value=mDataset.getValue(i);      if (!mRenderer.isMinValueSet()) {        min=Math.min(min,value);      }      if (!mRenderer.isMaxValueSet()) {        max=Math.max(max,value);      }    }  }  if (min == max) {    min=min * 0.5;    max=max * 1.5;  }  paint.setColor(mRenderer.getLabelsColor());  double minorTicks=mRenderer.getMinorTicksSpacing();  double majorTicks=mRenderer.getMajorTicksSpacing();  if (minorTicks == MathHelper.NULL_VALUE) {    minorTicks=(max - min) / 30;  }  if (majorTicks == MathHelper.NULL_VALUE) {    majorTicks=(max - min) / 10;  }  drawTicks(canvas,min,max,angleMin,angleMax,mCenterX,mCenterY,longRadius,radius,minorTicks,paint,false);  drawTicks(canvas,min,max,angleMin,angleMax,mCenterX,mCenterY,longRadius,shortRadius,majorTicks,paint,true);  int count=mRenderer.getSeriesRendererCount();  for (int i=0; i < count; i++) {    double angle=getAngleForValue(mDataset.getValue(i),angleMin,angleMax,min,max);    paint.setColor(mRenderer.getSeriesRendererAt(i).getColor());    boolean type=mRenderer.getVisualTypeForIndex(i) == Type.ARROW;    drawNeedle(canvas,angle,mCenterX,mCenterY,shortRadius,type,paint);  }  drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,false);  drawTitle(canvas,x,y,width,paint);}  }
class C{  private void validateTextList(Class type) throws Exception {  Label label=root.getText();  if (label != null) {    if (label.isTextList()) {      Object key=label.getKey();      for (      Label element : elements) {        Object identity=element.getKey();        if (!identity.equals(key)) {          throw new TextException("Elements used with %s in %s",label,type);        }        Type dependent=element.getDependent();        Class actual=dependent.getType();        if (actual == String.class) {          throw new TextException("Illegal entry of %s with text annotations on %s in %s",actual,label,type);        }      }      if (root.isComposite()) {        throw new TextException("Paths used with %s in %s",label,type);      }    }  }}  }
class C{  public boolean isBackEnabled(){  if (browser == null || browser.isDisposed())   return false;  return browser.isBackEnabled();}  }
class C{  public void readClassFile(DependenciesListener builder,FileElement fileNode,InputStream content){  ClassDepLister cd=new ClassDepLister(builder,fileNode);  try {    ClassReader cr=new ClassReader(content);    cr.accept(cd,0);    analysisStats.incrClassesLoaded();    return;  } catch (  IOException ioErr) {    logger.warning("Unable to load class information for " + fileNode.getId());  }catch (  ArrayIndexOutOfBoundsException bndException) {    logger.info("Unreadable class file for " + fileNode.getId());  }  analysisStats.incrClassesFailed();}  }
class C{  public Boolean isIpfixEnabled(){  return ipfixEnabled;}  }
class C{  public void paintSeparatorBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public DD(){  init(0.0);}  }
class C{  public void addRequest(RecordRequest request){  if (request.getRequestSize() + getRequestSize() > 248) {    throw new IllegalArgumentException();  }  if (records == null) {    records=new RecordRequest[1];  } else {    RecordRequest old[]=records;    records=new RecordRequest[old.length + 1];    System.arraycopy(old,0,records,0,old.length);  }  records[records.length - 1]=request;  setDataLength(getRequestSize());}  }
class C{  @Override public void agg(double newVal){  aggVal+=newVal;  firstTime=false;}  }
class C{  public void animateLayoutFade(final int duration,int startingOpacity){  animateLayout(duration,false,startingOpacity,true);}  }
class C{  @Ignore("NaN behavior TBD") @Test public void testRhumbLocation_WithNaN() throws Exception {  Location begin1=Location.fromRadians(0.592539,-2.066470);  Location begin2=new Location(Double.NaN,Double.NaN);  final double distance=0.6296498957149533;  final double course=79.32398087460811;  Location end1=new Location();  Location end2=new Location();  Location end3=new Location();  begin1.rhumbLocation(Double.NaN,distance,end1);  begin1.rhumbLocation(course,Double.NaN,end2);  begin2.rhumbLocation(course,distance,end3);  assertTrue("expecting NaN latitude from NaN course",Double.isNaN(end1.latitude));  assertTrue("expecting NaN longitude from NaN course",Double.isNaN(end1.longitude));  assertTrue("expecting NaN latitude from NaN distance",Double.isNaN(end2.latitude));  assertTrue("expecting NaN longitude from NaN distance",Double.isNaN(end2.longitude));  assertTrue("expecting NaN latitude from NaN origin latitude",Double.isNaN(end3.latitude));  assertTrue("expecting NaN longitude from NaN origin latitude",Double.isNaN(end3.longitude));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.NAMED_IMPORT_SPECIFIER__IMPORTED_ELEMENT:    setImportedElement((TExportableElement)newValue);  return;case N4JSPackage.NAMED_IMPORT_SPECIFIER__IMPORTED_ELEMENT_AS_TEXT:setImportedElementAsText((String)newValue);return;case N4JSPackage.NAMED_IMPORT_SPECIFIER__ALIAS:setAlias((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord && getParent().isComplete()) {    log.saveError("ParentComplete",Msg.translate(getCtx(),"C_BankStatementLine"));    return false;  }  if (getChargeAmt().signum() != 0 && getC_Charge_ID() == 0) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"C_Charge_ID"));    return false;  }  if (getTrxAmt().signum() == 0 && getC_Payment_ID() > 0) {    setC_Payment_ID(I_ZERO);    setC_Invoice_ID(I_ZERO);  }  if (getLine() == 0) {    String sql="SELECT COALESCE(MAX(Line),0)+10 AS DefaultValue FROM C_BankStatementLine WHERE C_BankStatement_ID=?";    int ii=DB.getSQLValue(get_TrxName(),sql,getC_BankStatement_ID());    setLine(ii);  }  if (getC_Payment_ID() != 0 && getC_BPartner_ID() == 0) {    MPayment payment=new MPayment(getCtx(),getC_Payment_ID(),get_TrxName());    setC_BPartner_ID(payment.getC_BPartner_ID());    if (payment.getC_Invoice_ID() != 0)     setC_Invoice_ID(payment.getC_Invoice_ID());  }  if (getC_Invoice_ID() != 0 && getC_BPartner_ID() == 0) {    MInvoice invoice=new MInvoice(getCtx(),getC_Invoice_ID(),get_TrxName());    setC_BPartner_ID(invoice.getC_BPartner_ID());  }  BigDecimal amt=getStmtAmt();  amt=amt.subtract(getTrxAmt());  amt=amt.subtract(getInterestAmt());  if (amt.compareTo(getChargeAmt()) != 0)   setChargeAmt(amt);  return true;}  }
class C{  public static License read(final String license){  final String trimmedLicense=license.trim();  if (sLicenses.containsKey(trimmedLicense)) {    return sLicenses.get(trimmedLicense);  } else {    throw new IllegalStateException(String.format("no such license available: %s, did you forget to register it?",trimmedLicense));  }}  }
class C{  private ClusterNode addSpiDependency(GridTestNode node) throws Exception {  node.addAttribute(U.spiAttribute(getSpi(),IgniteNodeAttributes.ATTR_SPI_CLASS),JobStealingCollisionSpi.class.getName());  node.addAttribute(U.spiAttribute(getSpi(),IgniteNodeAttributes.ATTR_SPI_CLASS),JobStealingCollisionSpi.class.getName());  return node;}  }
class C{  public static Connection open(DbConnectionConfig dbConConfig) throws Exception {  String cntParam;  String url;  String user;  String pwd;  Connection jdbcConn=null;  cntParam=dbConConfig.getCntParam();  user=dbConConfig.getUser();  pwd=dbConConfig.getPwd();  if (dbConConfig.isCntByDriver()) {    url=dbConConfig.getUrl();    jdbcConn=open(cntParam,url,user,pwd);  } else {    if ((user == null) && (pwd == null))     jdbcConn=open(cntParam); else     jdbcConn=open(cntParam,user,pwd);  }  return jdbcConn;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) static <E>AutoSortedCollection<E> createAutoSortedCollection(Collection<? extends E> values,Comparator<E> comparator){  return createAutoSortedCollection(null,values,comparator);}  }
class C{  public void visitParameter(String name,int access){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    mv.visitParameter(name,access);  }}  }
class C{  public Vertex applySRAI(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network) throws Exception {  Vertex sentence=arguments.get(0).getTarget().applyQuotient(variables,network);  if (!sentence.instanceOf(Primitive.SENTENCE) && sentence.instanceOf(Primitive.FRAGMENT)) {    sentence.addRelationship(Primitive.INSTANTIATION,Primitive.SENTENCE);  }  Vertex input=variables.get(network.createVertex(Primitive.INPUT_VARIABLE));  input=input.copy();  input.setRelationship(Primitive.INPUT,sentence);  Vertex response=network.getBot().mind().getThought(Language.class).input(input,sentence,variables,network);  if (response == null) {    return network.createVertex(Primitive.NULL);  }  return response;}  }
class C{  @Override public void focusGained(FocusEvent event){}  }
class C{  public static IClasspathContainer newInstance(List<IClasspathEntry> classpathEntries){  return new DefaultGradleClasspathContainer(CONTAINER_PATH,classpathEntries);}  }
class C{  public Field[] createLocalDescriptorFields(List<? extends LocalFeature> listOfLocalFeatures,ExtractorItem extractorItem,LinkedList<Cluster[]> listOfCodebooks){  Field[] result=new Field[listOfCodebooks.size() * 2];  int count=0;  for (  Cluster[] codebook : listOfCodebooks) {    aggregator.createVectorRepresentation(listOfLocalFeatures,codebook);    result[count]=new StoredField(fieldNamesDictionary.get(extractorItem).get(codebook.length)[0],aggregator.getByteVectorRepresentation());    result[count + 1]=new TextField(fieldNamesDictionary.get(extractorItem).get(codebook.length)[1],aggregator.getStringVectorRepresentation(),Field.Store.YES);    count+=2;  }  return result;}  }
class C{  public Builder penaltyLog(){  return enable(PENALTY_LOG);}  }
class C{  protected Node deepCopyInto(Node n){  AbstractProcessingInstruction p;  p=(AbstractProcessingInstruction)super.deepCopyInto(n);  p.data=data;  return p;}  }
class C{  public Observable<Integer> exerciseReduce(Observable<Integer> nums){  return nums.reduce(null);}  }
class C{  public static EvolutionState initialize(ParameterDatabase parameters,int randomSeedOffset){  return initialize(parameters,randomSeedOffset,buildOutput());}  }
class C{  private ActionBarBackground fadeBackground(Drawable newDrawable){  fadeBackground(mOldBackground,newDrawable);  return this;}  }
class C{  private static void displayParamNameAndValue(String paramName,boolean paramValue){  System.out.println(String.format("%s:   %b",paramName,paramValue));}  }
class C{  protected EntryEventImpl(){  super();}  }
class C{  public void start(){  start=System.currentTimeMillis();}  }
class C{  public CSTNode add(CSTNode element){  return set(size(),element);}  }
class C{  public String serverId(){  return selfServer().getId();}  }
class C{  public DebugInputBitStream(final InputBitStream ibs){  this(ibs,System.err);}  }
class C{  public void addLight(LightSource light){  this.lightSources.add(light);}  }
class C{  @SuppressWarnings("resource") @Test public void testMutualDependency() throws Exception {  final IProject project=createJSProject("testMutualDependency");  IFolder folder=configureProjectWithXtext(project);  IFolder moduleFolder=createFolder(folder,TestFiles.mutualModuleFolder());  IFile brotherFile=createTestFile(moduleFolder,"Brother",TestFiles.classBrother());  IFile sisterFile=createTestFile(moduleFolder,"Sister",TestFiles.classSister());  IFile childFile=createTestFile(moduleFolder,"Child",TestFiles.classChild());  assertMarkers("brother file should have no errors",brotherFile,0);  assertMarkers("sister file should have no errors",sisterFile,0);  assertMarkers("child file should have no errors",childFile,0);  sisterFile.setContents(new StringInputStream(TestFiles.classSisterNew().toString()),true,true,monitor());  waitForAutoBuild();  assertMarkers("brother file should have errors as using old method of sister",brotherFile,2);  assertMarkers("new sister file should have errors as calling oldMethod via brother file",sisterFile,3);  sisterFile.setContents(new StringInputStream(TestFiles.classSister().toString()),true,true,monitor());  waitForAutoBuild();  assertMarkers("sister file should have no errors anymore",sisterFile,0);  assertMarkers("brother file should have no errors anymore",brotherFile,0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.253 -0400",hash_original_method="287F9DF1F3EC779A1B6621AC35B2F33A",hash_generated_method="AD969FA86394D581EAD76569C39BCB27") public Iterator<Object> iterator(){  return mRequestInformation.values().iterator();}  }
class C{  private boolean contains(String[] filterQueries,String identifier){  if (filterQueries == null) {    return false;  }  for (  String filterQuery : filterQueries) {    if (filterQuery.contains(identifier)) {      return true;    }  }  return false;}  }
class C{  public EchoReplyMessage(EchoReplyMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  public void addSetter(int i){  for (  ScatterPlotSetter setter : setterList) {    if (setter.getIndex() == i) {      return;    }  }  setterList.add(new ScatterPlotSetter(i));}  }
class C{  public void endFunctionExecution(long start,boolean haveResult){  long ts=DistributionStats.getStatTime();  this._stats.incInt(_functionExecutionsCompletedId,1);  this._stats.incInt(_functionExecutionsRunningId,-1);  long elapsed=ts - start;  this._stats.incLong(_functionExecutionsCompletedProcessingTimeId,elapsed);  if (haveResult) {    this._stats.incInt(_functionExecutionsHasResultRunningId,-1);    this._stats.incLong(_functionExecutionsHasResultCompletedProcessingTimeId,elapsed);  }}  }
class C{  public JpegSegmentReader(JpegSegmentData segmentData){  _file=null;  _data=null;  _stream=null;  _segmentData=segmentData;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:57.834 -0500",hash_original_method="979F8D0FD623C4002C8BD37290EA10AA",hash_generated_method="657D400E7F73A95B7A1DCD95F9ECED7D") public long computeDurationHint(){  long duration=0;  final int count=mAnimations.size();  final ArrayList<Animation> animations=mAnimations;  for (int i=count - 1; i >= 0; --i) {    final long d=animations.get(i).computeDurationHint();    if (d > duration)     duration=d;  }  return duration;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.080 -0500",hash_original_method="ACD44B1A55AB2BB7AB7058E66F36FB4A",hash_generated_method="6B7A5B5AAB4EAC371C836C89930F94EF") protected HttpResponse doReceiveResponse(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws HttpException, IOException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (conn == null) {    throw new IllegalArgumentException("HTTP connection may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  HttpResponse response=null;  int statuscode=0;  while (response == null || statuscode < HttpStatus.SC_OK) {    response=conn.receiveResponseHeader();    if (canResponseHaveBody(request,response)) {      conn.receiveResponseEntity(response);    }    statuscode=response.getStatusLine().getStatusCode();  }  return response;}  }
class C{  public ExecutableScript executable(CompiledScript compiledScript,Map<String,Object> vars){  return getScriptEngineServiceForLang(compiledScript.lang()).executable(compiledScript,vars);}  }
class C{  public void mouseReleased(MouseEvent e){  checkPopup(e);}  }
class C{  @Override public void dispose(){  super.dispose();  _pendingWorkers.clear();  _pendingWorkers=null;}  }
class C{  public static Type toValueType(Type type){  if (type == Types.BYTE)   return Types.BYTE_VALUE;  if (type == Types.BOOLEAN)   return Types.BOOLEAN_VALUE;  if (type == Types.CHARACTER)   return Types.CHAR;  if (type == Types.DOUBLE)   return Types.DOUBLE_VALUE;  if (type == Types.FLOAT)   return Types.FLOAT_VALUE;  if (type == Types.INTEGER)   return Types.INT_VALUE;  if (type == Types.LONG)   return Types.LONG_VALUE;  if (type == Types.SHORT)   return Types.SHORT_VALUE;  return type;}  }
class C{  int requestClearDFCs(){  return (writeTelegram(tgmEmpty,CMD_CLEAR_DFCs,null));}  }
class C{  static double decodeValueCeil(int x){  assert x < Integer.MAX_VALUE;  return Math.nextDown((x + 1) * DECODE);}  }
class C{  public boolean moveUp(HumanResource resource){  myResourceManager.up(resource);  ResourceNode rn=getNodeForResource(resource);  int index=TreeUtil.getPrevSibling(root,rn);  if (index == -1) {    return false;  }  removeNodeFromParent(rn);  insertNodeInto(rn,root,index);  return true;}  }
class C{  private UIUtil(){  throw new AssertionError();}  }
class C{  public void removeExcludedDay(java.util.Calendar day){  removeExcludedDay(day,false);}  }
class C{  public void printReport(File file) throws AdeException {  final PrintWriter out=FileUtils.openPrintWriterToFile(file,true);  printReport(out);  out.close();}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (obj instanceof IfdData) {    IfdData data=(IfdData)obj;    if (data.getId() == mIfdId && data.getTagCount() == getTagCount()) {      ExifTag[] tags=data.getAllTags();      for (      ExifTag tag : tags) {        if (ExifInterface.isOffsetTag(tag.getTagId())) {          continue;        }        ExifTag tag2=mExifTags.get(tag.getTagId());        if (!tag.equals(tag2)) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public static long parseTime(String time) throws java.text.ParseException {synchronized (PARSE_DATE) {    Date parsed=PARSE_DATE.parse(time);    return parsed.getTime();  }}  }
class C{  public void paintDesktopPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public SpecificLight(String systemName,SerialTrafficController tc,String userName){  super(systemName,tc,userName);  this.tc=tc;}  }
class C{  @Override public int read(long pos,byte[] buf,int offset,int length){  if (pos < 0) {    throw new IllegalArgumentException();  }  if (_length <= pos) {    return -1;  }  int bufOffset=(int)(_offset + pos);  int sublen=(int)Math.min(length,_length - pos);  System.arraycopy(_pageBuffer,bufOffset,buf,offset,sublen);  return sublen;}  }
class C{  private void step() throws IOException {  while (true) {    if (res == null) {      if (getResourceIterator().hasNext()) {        res=nextFile();        inFileCount=0;        try (InputStream is=CompressionUtils.getInputStream(res.getLocation(),res.getInputStream())){          model=ModelFactory.createOntologyModel();          RDFDataMgr.read(model,is,RDFLanguages.filenameToLang(CompressionUtils.stripCompressionExtension(res.getLocation())));        }         contextIterator=model.listStatements(null,RDF.type,model.createResource(NIF.TYPE_CONTEXT));      } else {        return;      }    }    if (contextIterator.hasNext()) {      return;    }    closeAll();  }}  }
class C{  public static void write(float lt,float ln,int offset_x1,int offset_y1,ImageIcon ii,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {  int image_width, image_height;  Image image;  image_width=ii.getIconWidth();  image_height=ii.getIconHeight();  image=ii.getImage();  LinkRaster.write(lt,ln,offset_x1,offset_y1,image,image_width,image_height,properties,dos);}  }
class C{  public static void main(String[] argv){  runFilter(new AttributeSelection(),argv);}  }
class C{  public CloseableImage decodeGif(EncodedImage encodedImage,ImageDecodeOptions options){  InputStream is=encodedImage.getInputStream();  if (is == null) {    return null;  }  try {    if (!options.forceStaticImage && mAnimatedImageFactory != null && GifFormatChecker.isAnimated(is)) {      return mAnimatedImageFactory.decodeGif(encodedImage,options,mBitmapConfig);    }    return decodeStaticImage(encodedImage,options);  }  finally {    Closeables.closeQuietly(is);  }}  }
class C{  public ExchangeRate(final Currency source,final Currency target,final double rate){  this.source_=(source);  this.target_=(target);  this.rate_=(rate);  this.type_=(Type.Direct);}  }
class C{  public void writeTo(final OutputStream out,MultipartEntity.CallBackInfo callBackInfo) throws IOException {  doWriteTo(this.mode,out,callBackInfo,true);}  }
class C{  public void testMoveFileWithRefs() throws Exception {  doMove(new String[]{"source2.bash","subdir/target.bash"},"source.bash","subdir");}  }
class C{  public static void removeRecursive(ResultHierarchy hierarchy,Result child){  for (Hierarchy.Iter<Result> iter=hierarchy.iterParents(child); iter.valid(); iter.advance()) {    hierarchy.remove(iter.get(),child);  }  for (Hierarchy.Iter<Result> iter=hierarchy.iterChildren(child); iter.valid(); iter.advance()) {    removeRecursive(hierarchy,iter.get());  }}  }
class C{  public ECParameterSpec(EllipticCurve curve,ECPoint g,BigInteger n,int h){  if (curve == null) {    throw new NullPointerException("curve is null");  }  if (g == null) {    throw new NullPointerException("g is null");  }  if (n == null) {    throw new NullPointerException("n is null");  }  if (n.signum() != 1) {    throw new IllegalArgumentException("n is not positive");  }  if (h <= 0) {    throw new IllegalArgumentException("h is not positive");  }  this.curve=curve;  this.g=g;  this.n=n;  this.h=h;}  }
class C{  public EObject basicGetAstElement(){  return astElement;}  }
class C{  private void writeUTF8(final OutputStream s,final int length) throws IOException {  final char[] a=array;  char c;  for (int i=0; i < length; i++) {    c=a[i];    if (c <= 127)     s.write(c); else     if (c >= 0x800) {      s.write((byte)(0xE0 | ((c >> 12) & 0x0F)));      s.write((byte)(0x80 | ((c >> 6) & 0x3F)));      s.write((byte)(0x80 | ((c >> 0) & 0x3F)));    } else {      s.write((byte)(0xC0 | ((c >> 6) & 0x1F)));      s.write((byte)(0x80 | ((c >> 0) & 0x3F)));    }  }}  }
class C{  public void addNodes(NodeList nodelist){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if (null != nodelist) {    int nChildren=nodelist.getLength();    for (int i=0; i < nChildren; i++) {      Node obj=nodelist.item(i);      if (null != obj) {        addElement(obj);      }    }  }}  }
class C{  protected void moveToBottom(ImageTile[] selectedTiles2){  OMGraphicList list=getList();  if (list != null && selectedTiles != null && selectedTiles.length > 0) {    for (int i=0; i < selectedTiles2.length; i++) {      ImageTile tile=selectedTiles2[i];      list.moveIndexedToBottom(list.indexOf(tile));    }    rebuildListModel();  }}  }
class C{  @Deprecated public void loadNetwork(){  String networkFileName=null;  if ((this.config.network() != null) && (this.config.network().getInputFile() != null)) {    networkFileName=this.config.network().getInputFile();    log.info("loading network from " + networkFileName);    Network network=(Network)this.scenario.getNetwork();    if (this.config.network().isTimeVariantNetwork()) {      log.info("use TimeVariantLinks in NetworkFactory.");      network.getFactory().setLinkFactory(new VariableIntervalTimeVariantLinkFactory());    }    new MatsimNetworkReader(this.scenario.getNetwork()).readFile(networkFileName);    if ((this.config.network().getChangeEventsInputFile() != null) && this.config.network().isTimeVariantNetwork()) {      log.info("loading network change events from " + this.config.network().getChangeEventsInputFileUrl(this.config.getContext()).getFile());      List<NetworkChangeEvent> changeEvents=new ArrayList<>();      NetworkChangeEventsParser parser=new NetworkChangeEventsParser(network,changeEvents);      parser.parse(this.config.network().getChangeEventsInputFileUrl(config.getContext()));      NetworkUtils.setNetworkChangeEvents(network,changeEvents);    }  }}  }
class C{  public Properties loadProps(String file){  java.io.File propsFile=new java.io.File(file);  Properties props=new Properties();  try {    java.io.InputStream propsStream=new java.io.FileInputStream(propsFile);    props.load(propsStream);  } catch (  java.io.FileNotFoundException e) {    System.err.println("ShapeSpecialist did not find properties file: \"" + file + "\"");    System.exit(1);  }catch (  java.io.IOException e) {    System.err.println("Caught IO Exception reading configuration file \"" + propsFile + "\"");    e.printStackTrace();    System.exit(1);  }  return props;}  }
class C{  public MethodType erasedType(){  return erasedType;}  }
class C{  public void addParts(List<MessagePart> messageParts){  this.parts.addAll(messageParts);}  }
class C{  public MySqlSystemVariables systemVariables(){  return ddlParser.systemVariables();}  }
class C{  public static boolean checkServerFee(long amountIs,long amountShouldBe){  long fee=amountShouldBe - amountIs;  long feeShouldBe=calculateServerFee(amountShouldBe);  return (fee <= feeShouldBe);}  }
class C{  public void visitFormalTypeParameter(String name){}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public void shiftRightThis(){  int i;  len-=1;  blocks=((len - 1) >>> 5) + 1;  for (i=0; i <= blocks - 2; i++) {    value[i]>>>=1;    value[i]|=value[i + 1] << 31;  }  value[blocks - 1]>>>=1;  if ((len & 0x1f) == 0) {    value[blocks - 1]|=value[blocks] << 31;  }}  }
class C{  public List<ExportGroupRestRep> findByHost(URI hostId,URI projectId,URI varrayId){  return search().byHost(hostId).filter(new ExportHostFilter(hostId,projectId,varrayId)).run();}  }
class C{  public AbstractDragController(AbsolutePanel boundaryPanel){  assert boundaryPanel != null : "Use 'RootPanel.get()' instead of 'null'.";  this.boundaryPanel=boundaryPanel;  context=new DragContext(this);  mouseDragHandler=new MouseDragHandler(context);}  }
class C{  private void handleActionFoo(String param1,String param2){  throw new UnsupportedOperationException("Not yet implemented");}  }
class C{  @Pure public static String JBC_name(int bc){  if (bc < 0 || bc >= _JBC_name.length) {    return "unknown bytecode";  } else {    return _JBC_name[bc];  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public ASTList tail(){  return right;}  }
class C{  public void fix(String name){  String name2=toJvmName(name);  super.put(name2,name2);}  }
class C{  public boolean isQuoteSelectedLines(){  return QUOTETYPE_QuoteSelectedLines.equals(getQuoteType());}  }
class C{  @Override public void end(){  this.cc.tessEnd();}  }
class C{  private static void runTests() throws Throwable {  final String sep=File.separator;  String testClassPath=System.getProperty("test.class.path","");  String testClasses=System.getProperty("test.classes","") + sep;  String jdkLib=System.getProperty("test.jdk",".") + sep + "lib"+ sep;  String classpath=testClassPath + File.pathSeparator + testClasses+ "SimpleProvider.jar"+ File.pathSeparator+ jdkLib+ "tools.jar";  String[] args={"-classpath",classpath,"ProviderTest$TestMain"};  OutputAnalyzer output=ProcessTools.executeTestJvm(args);  output.shouldHaveExitValue(0);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:22.715 -0500",hash_original_method="368F2FAFC4A206C09EED76798A5342BA",hash_generated_method="368F2FAFC4A206C09EED76798A5342BA") Node(E item){  UNSAFE.putObject(this,itemOffset,item);}  }
class C{  private void startJavaBasedTaskInstance(Injector injector){  Map<String,ServiceConfiguration> auxServicesConfigs=injector.getInstance(MyriadConfiguration.class).getServiceConfigurations();  if (auxServicesConfigs != null) {    MyriadOperations myriadOperations=injector.getInstance(MyriadOperations.class);    for (    Map.Entry<String,ServiceConfiguration> entry : auxServicesConfigs.entrySet()) {      try {        myriadOperations.flexUpAService(entry.getValue().getMaxInstances().or(1),entry.getKey());      } catch (      MyriadBadConfigurationException e) {        LOGGER.warn("Exception while trying to flexup service: {}",entry.getKey(),e);      }    }  }}  }
class C{  public boolean isSPD(){  return isspd;}  }
class C{  @Override public Generator<ICircle> construct(String[] args){  return new UniformGenerator(Double.valueOf(args[0]));}  }
class C{  @Override public boolean equals(final Object o){  if (this == o)   return true;  if (!(o instanceof PathIds)) {    return false;  }  return Arrays.equals(ids,((PathIds)o).ids);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.480 -0500",hash_original_method="458D6DD6719B8027CA3FE9134A58BF91",hash_generated_method="8DD64E9834DC70811B76533374F3E9D2") public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  private SequentialTransition animateMergedTile(Tile tile){  final ScaleTransition scale0=new ScaleTransition(Duration.millis(80),tile);  scale0.setToX(1.2);  scale0.setToY(1.2);  scale0.setInterpolator(Interpolator.EASE_IN);  final ScaleTransition scale1=new ScaleTransition(Duration.millis(80),tile);  scale1.setToX(1.0);  scale1.setToY(1.0);  scale1.setInterpolator(Interpolator.EASE_OUT);  return new SequentialTransition(scale0,scale1);}  }
class C{  protected static Set processCRLF(X509CRL crl,Object cert,X509Certificate defaultCRLSignCert,PublicKey defaultCRLSignKey,ExtendedPKIXParameters paramsPKIX,List certPathCerts) throws AnnotatedException {  X509CertStoreSelector selector=new X509CertStoreSelector();  try {    byte[] issuerPrincipal=CertPathValidatorUtilities.getIssuerPrincipal(crl).getEncoded();    selector.setSubject(issuerPrincipal);  } catch (  IOException e) {    throw new AnnotatedException("Subject criteria for certificate selector to find issuer certificate for CRL could not be set.",e);  }  Collection coll;  try {    coll=CertPathValidatorUtilities.findCertificates(selector,paramsPKIX.getStores());    coll.addAll(CertPathValidatorUtilities.findCertificates(selector,paramsPKIX.getAdditionalStores()));    coll.addAll(CertPathValidatorUtilities.findCertificates(selector,paramsPKIX.getCertStores()));  } catch (  AnnotatedException e) {    throw new AnnotatedException("Issuer certificate for CRL cannot be searched.",e);  }  coll.add(defaultCRLSignCert);  Iterator cert_it=coll.iterator();  List validCerts=new ArrayList();  List validKeys=new ArrayList();  while (cert_it.hasNext()) {    X509Certificate signingCert=(X509Certificate)cert_it.next();    if (signingCert.equals(defaultCRLSignCert)) {      validCerts.add(signingCert);      validKeys.add(defaultCRLSignKey);      continue;    }    try {      CertPathBuilder builder=CertPathBuilder.getInstance("PKIX",BouncyCastleProvider.PROVIDER_NAME);      selector=new X509CertStoreSelector();      selector.setCertificate(signingCert);      ExtendedPKIXParameters temp=(ExtendedPKIXParameters)paramsPKIX.clone();      temp.setTargetCertConstraints(selector);      ExtendedPKIXBuilderParameters params=(ExtendedPKIXBuilderParameters)ExtendedPKIXBuilderParameters.getInstance(temp);      if (certPathCerts.contains(signingCert)) {        params.setRevocationEnabled(false);      } else {        params.setRevocationEnabled(true);      }      List certs=builder.build(params).getCertPath().getCertificates();      validCerts.add(signingCert);      validKeys.add(CertPathValidatorUtilities.getNextWorkingKey(certs,0));    } catch (    CertPathBuilderException e) {      throw new AnnotatedException("Internal error.",e);    }catch (    CertPathValidatorException e) {      throw new AnnotatedException("Public key of issuer certificate of CRL could not be retrieved.",e);    }catch (    Exception e) {      throw new RuntimeException(e.getMessage());    }  }  Set checkKeys=new HashSet();  AnnotatedException lastException=null;  for (int i=0; i < validCerts.size(); i++) {    X509Certificate signCert=(X509Certificate)validCerts.get(i);    boolean[] keyusage=signCert.getKeyUsage();    if (keyusage != null && (keyusage.length < 7 || !keyusage[CRL_SIGN])) {      lastException=new AnnotatedException("Issuer certificate key usage extension does not permit CRL signing.");    } else {      checkKeys.add(validKeys.get(i));    }  }  if (checkKeys.isEmpty() && lastException == null) {    throw new AnnotatedException("Cannot find a valid issuer certificate.");  }  if (checkKeys.isEmpty() && lastException != null) {    throw lastException;  }  return checkKeys;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static KeyStore load(File keyStoreFile,Password password) throws CryptoException, FileNotFoundException {  KeyStoreType keyStoreType=null;  try {    keyStoreType=CryptoFileUtil.detectKeyStoreType(new FileInputStream(keyStoreFile));  } catch (  FileNotFoundException ex) {    throw ex;  }catch (  IOException ex) {    throw new CryptoException(res.getString("NoLoadKeyStore.exception.message"),ex);  }  if (keyStoreType == null) {    return null;  }  return load(keyStoreFile,password,keyStoreType);}  }
class C{  private RhinoScriptBuilder initScriptBuilder(){  try {    return RhinoScriptBuilder.newClientSideAwareChain().addJSON().evaluateChain(getScriptAsStream(),DEFAULT_JS);  } catch (  final Exception e) {    LOG.error("Processing error:" + e.getMessage(),e);    throw new WroRuntimeException("Processing error",e);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void cancel(){  cancelClicked=true;  setVisible(false);}  }
class C{  public void stop(){synchronized (updaterLock) {    updater.stop();  }  updateStopped();}  }
class C{  @Override public void close() throws IOException {  super.close();}  }
class C{  public boolean isOffsetParsed(){  return iOffsetParsed;}  }
class C{  public X86Disassembler(BinaryInputBuffer code){  this(code,new X86InstructionFactoryImpl());}  }
class C{  private static boolean addMetaAbcIfNeeded(@NotNull final PyClass aClass){  final PsiFile file=aClass.getContainingFile();  final PyType type=aClass.getMetaClassType(TypeEvalContext.userInitiated(aClass.getProject(),file));  if (type != null) {    return false;  }  final LanguageLevel languageLevel=LanguageLevel.forElement(aClass);  if (languageLevel.isPy3K()) {    PyClassRefactoringUtil.addSuperClassExpressions(aClass.getProject(),aClass,null,Collections.singletonList(Pair.create(PyNames.METACLASS,PyNames.ABC_META_CLASS)));  } else {    PyClassRefactoringUtil.addClassAttributeIfNotExist(aClass,PyNames.DUNDER_METACLASS,PyNames.ABC_META_CLASS);  }  return true;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public AbstractTool(){  editorProxy=new DrawingEditorProxy();  setInputMap(createInputMap());  setActionMap(createActionMap());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.CHOICE__KIND:    return getKind();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void removeSmaller(int value){  int targetPosition=Arrays.binarySearch(backingArray,0,numElements,value);  if (targetPosition < 0) {    targetPosition=-targetPosition - 1;  }  numElements-=targetPosition;  if (targetPosition != 0 && numElements > 0) {    System.arraycopy(backingArray,targetPosition,backingArray,0,numElements);  }}  }
class C{  public void invalidate(String key){  cache.invalidate(key);}  }
class C{  public static final Cache basicGetCache(){  return JUnit4CacheTestCase.basicGetCache();}  }
class C{  private void readKey(Configuration config){  String base64Encoded=config.getConfig(CONFIG_KIND);  SecretKey key=new SecretKeySpec(Base64.decodeBase64(base64Encoded.getBytes(UTF_8)),ALGO);  _key=key;}  }
class C{  private static boolean isEventNode(final INaviFunctionNode node,final TraceList eventList){  for (  final ITraceEvent traceEvent : eventList) {    if (traceEvent.getOffset().getModule() == node.getFunction().getModule() && node.getFunction().getAddress().equals(traceEvent.getOffset().getAddress().getAddress())) {      return true;    }  }  return false;}  }
class C{  public String toString(){  if (coordinates.length > 0) {    StringBuffer strBuf=new StringBuffer(17 * coordinates.length);    strBuf.append('(');    strBuf.append(coordinates[0]);    for (int i=1; i < coordinates.length; i++) {      strBuf.append(", ");      strBuf.append(coordinates[i]);    }    strBuf.append(')');    return strBuf.toString();  } else {    return "()";  }}  }
class C{  public void clearAction(){  actions.clear();}  }
class C{  public void offerBusyBox(Activity activity){  RootTools.log("Launching Market for BusyBox");  Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=stericson.busybox"));  activity.startActivity(i);}  }
class C{  @Override public void buildAssociations(Instances data) throws Exception {  if (m_Associator == null) {    throw new Exception("No base associator has been set!");  }  data=new Instances(data);  if (getClassIndex() == 0) {    data.setClassIndex(data.numAttributes() - 1);  } else {    data.setClassIndex(getClassIndex() - 1);  }  if (getClassIndex() != -1) {    data.deleteWithMissingClass();  }  m_Filter.setInputFormat(data);  data=Filter.useFilter(data,m_Filter);  getAssociator().getCapabilities().testWithFail(data);  m_FilteredInstances=data.stringFreeStructure();  m_Associator.buildAssociations(data);}  }
class C{  public final int intValue(){  return this.value;}  }
class C{  @Nonnull public BugInstance addClassAndMethod(PreorderVisitor visitor){  addClass(visitor);  XMethod m=visitor.getXMethod();  addMethod(visitor);  if (m.isSynthetic()) {    foundInSyntheticMethod();  }  return this;}  }
class C{  public void receiveMsrpSend(String txId,Hashtable<String,String> headers,int flag,byte[] data,long totalSize) throws PayloadException, NetworkException, ContactManagerException {  mIsEstablished=true;  if (sLogger.isActivated()) {    sLogger.debug("SEND request received (flag=" + flag + ", transaction="+ txId+ ", totalSize="+ totalSize+ ")");  }  String msgId=headers.get(MsrpConstants.HEADER_MESSAGE_ID);  boolean failureReportNeeded=true;  String failureHeader=headers.get(MsrpConstants.HEADER_FAILURE_REPORT);  if ((failureHeader != null) && failureHeader.equalsIgnoreCase("no")) {    failureReportNeeded=false;  }  if (failureReportNeeded) {    sendMsrpResponse(MsrpConstants.STATUS_200_OK,txId,headers);  }  if (data == null) {    if (sLogger.isActivated()) {      sLogger.debug("Empty chunk");    }    return;  }  mReceivedChunks.addChunk(data);  if (flag == MsrpConstants.FLAG_LAST_CHUNK) {    if (sLogger.isActivated()) {      sLogger.info("Transfer terminated");    }    byte[] dataContent=mReceivedChunks.getReceivedData();    mReceivedChunks.resetCache();    String contentTypeHeader=headers.get(MsrpConstants.HEADER_CONTENT_TYPE);    mMsrpEventListener.receiveMsrpData(msgId,dataContent,contentTypeHeader);    boolean successReportNeeded=false;    String reportHeader=headers.get(MsrpConstants.HEADER_SUCCESS_REPORT);    if ((reportHeader != null) && reportHeader.equalsIgnoreCase("yes")) {      successReportNeeded=true;    }    if (successReportNeeded) {      sendMsrpReportRequest(txId,headers,dataContent.length,totalSize);    }  } else   if (flag == MsrpConstants.FLAG_ABORT_CHUNK) {    if (sLogger.isActivated()) {      sLogger.info("Transfer aborted");    }    mMsrpEventListener.msrpTransferAborted();  } else   if (flag == MsrpConstants.FLAG_MORE_CHUNK) {    if (sLogger.isActivated()) {      sLogger.debug("Transfer in progress...");    }    byte[] dataContent=mReceivedChunks.getReceivedData();    boolean resetCache=mMsrpEventListener.msrpTransferProgress(mReceivedChunks.getCurrentSize(),totalSize,dataContent);    if (resetCache) {      mReceivedChunks.resetCache();    }  }}  }
class C{  protected MessageConsumer startupConsumer(Connection conn,boolean transInd,int ackMode) throws JMSException {  Session sess;  MessageConsumer consumer;  sess=conn.createSession(transInd,ackMode);  consumer=sess.createConsumer(queue);  return consumer;}  }
class C{  public Class<?> type(){  if (isClass) {    return (Class<?>)object;  } else {    return object.getClass();  }}  }
class C{  private JCExpression bridgeExpressionInvoke(JCExpression rcvr){  JCExpression qualifier=tree.sym.isStatic() ? make.Type(tree.sym.owner.type) : (rcvr != null) ? rcvr : tree.getQualifierExpression();  JCFieldAccess select=make.Select(qualifier,tree.sym.name);  select.sym=tree.sym;  select.type=tree.sym.erasure(types);  JCExpression apply=make.Apply(List.<JCExpression>nil(),select,convertArgs(tree.sym,args.toList(),tree.varargsElement)).setType(tree.sym.erasure(types).getReturnType());  apply=transTypes.coerce(apply,localContext.generatedRefSig().getReturnType());  setVarargsIfNeeded(apply,tree.varargsElement);  return apply;}  }
class C{  public static void alphaAnimator(@NonNull List<Animator> animators,@NonNull View view,@FloatRange(from=0.0,to=1.0) float alphaFrom){  ViewCompat.setAlpha(view,0);  animators.add(ObjectAnimator.ofFloat(view,"alpha",alphaFrom,1f));}  }
class C{  public boolean matchesWildNormalized(final Sentence sentence){  if (state == ConversationStates.ANY) {    for (    Expression triggerExpr : triggers) {      if (sentence.getTriggerExpression().matchesNormalized(triggerExpr)) {        return true;      }    }  }  return false;}  }
class C{  public static String buildSelectorFromElementsAndAttribute(Collection<String> elementNameList,@Nullable String attributeName,boolean notEmptyAttribute){  StringBuilder selector=new StringBuilder();  boolean isFirstElement=true;  for (  String elementName : elementNameList) {    if (!isFirstElement) {      selector.append(SPACE);      selector.append(COMMA);      selector.append(SPACE);    }    selector.append(elementName);    if (StringUtils.isNotBlank(attributeName)) {      selector.append(OPEN_BRACKET);      selector.append(attributeName);      selector.append(CLOSE_BRACKET);      if (notEmptyAttribute) {        selector.append(NOT_PREFIX);        selector.append(OPEN_BRACKET);        selector.append(attributeName);        selector.append(NOT_EMPTY_REGEXP);        selector.append(CLOSE_BRACKET);        selector.append(CLOSE_PARENTHESE);      }    }    isFirstElement=false;  }  return selector.toString();}  }
class C{  public Vertex parseExpressionByteCode(Vertex equation,BinaryData data,Network network) throws IOException {  return parseEquationByteCode(equation,data,network);}  }
class C{  private String readString(int offset,int maxLength){  int length=0;  while ((offset + length) < _data.length && _data[offset + length] != '\0' && length < maxLength)   length++;  return new String(_data,offset,length);}  }
class C{  @Override public Void visitArrayAccess(ArrayAccessTree node,Void p){  checkForNullability(node.getExpression(),ACCESSING_NULLABLE);  return super.visitArrayAccess(node,p);}  }
class C{  public boolean isBuffered(){  return buffered;}  }
class C{  private void importCFGNodes(RawControlFlowGraph cfg,Map<BytecodeInstruction,CCFGCodeNode> temp){  for (  BytecodeInstruction code : cfg.vertexSet()) {    CCFGCodeNode node;    if (code.isMethodCallOfField()) {      node=new CCFGFieldClassCallNode(code,code.getCalledMethodsClass(),code.getCalledMethodName(),code.getMethodCallDescriptor());    } else {      node=new CCFGCodeNode(code);    }    addVertex(node);    temp.put(code,node);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.777 -0500",hash_original_method="43C9D48E22A0172861A5C1A464B2052F",hash_generated_method="906E4C73DD296925B03F12293E1E5F56") @DSVerified @DSSpec(DSCat.PHONE_CALL) public void onError(SipAudioCall call,int errorCode,String errorMessage){}  }
class C{  private boolean hasBottomLeft(SentencePair sentencePair,int ei,int fj){  int i_p, j_p;  for (i_p=ei; i_p >= 0; --i_p) {    if (!sentencePair.isTargetUnaligned(i_p))     break;  }  final int srcLen=sentencePair.sourceLength();  for (j_p=fj; j_p < srcLen; ++j_p) {    if (!sentencePair.isSourceUnaligned(j_p))     break;  }  if (i_p < 0 && j_p == srcLen)   return false;  int[] a_i_p=e2f(sentencePair,i_p);  int[] a_j_p=f2e(sentencePair,j_p);  if (max(a_j_p) > ei || min(a_i_p) < fj)   return false;  int max_j=Math.max(j_p,max(a_i_p));  int min_i=Math.min(i_p,min(a_j_p));  while (min_i <= i_p || max_j >= j_p) {    for (; j_p <= max_j; ++j_p) {      if (sentencePair.isSourceUnaligned(j_p))       continue;      a_j_p=f2e(sentencePair,j_p);      if (max(a_j_p) > ei)       return false;      min_i=Math.min(min_i,min(a_j_p));    }    for (; i_p >= min_i; --i_p) {      if (sentencePair.isTargetUnaligned(i_p))       continue;      a_i_p=e2f(sentencePair,i_p);      if (min(a_i_p) < fj)       return false;      max_j=Math.max(max_j,max(a_i_p));    }  }  return true;}  }
class C{  public int readDigits(){  int value=0;  char c;  if (isValidIndex() && isDigit(c=str.charAt(pos))) {    value=ints[0][c - 48];    pos++;  } else   return -1;  while (isValidIndex() && isDigit(c=str.charAt(pos))) {    value*=10;    value+=ints[0][c - 48];    pos++;  }  return value;}  }
class C{  @Override protected void reset(){  super.reset();  m_StreamableChecked=false;}  }
class C{  public static void main(String[] args){  Header.printHeader(AttributeCoordReferenceConverter.class.toString(),args);  String input=args[0];  String output=args[1];  LOG.info("Converting household attributes to reference correct Coord class...");  BufferedReader br=IOUtils.getBufferedReader(input);  BufferedWriter bw=IOUtils.getBufferedWriter(output);  Counter counter=new Counter("  lines # ");  try {    String line=null;    while ((line=br.readLine()) != null) {      String newLine=line.replaceFirst(OLD,NEW);      bw.write(newLine);      bw.newLine();      counter.incCounter();    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot read/write when converting household attributes.");  } finally {    try {      br.close();      bw.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close reader/writer.");    }  }  counter.printCounter();  LOG.info("Done converting household attributes.");  Header.printFooter();}  }
class C{  public static Bundler of(Bundle b){  return new Bundler(b);}  }
class C{  public String pad(String value){  String integralPart=value;  String fractionalPart="";  if (value.contains(".")) {    int indexOfDecimalSeparator=value.indexOf('.');    integralPart=value.substring(0,indexOfDecimalSeparator);    fractionalPart=value.substring(indexOfDecimalSeparator);  }  if (integralPart.length() > (PAD_LENGTH + integralPart.indexOf('-'))) {    throw new IllegalArgumentException("The given value has more than " + (PAD_LENGTH - 1) + " digits.");  }  try {    integralPart=new BigInteger(integralPart).add(BIG_OFFSET).toString();  } catch (  NumberFormatException e) {    throw new IllegalArgumentException("Unable to parse a number from " + value);  }  integralPart=Strings.padStart(integralPart,PAD_LENGTH,'0');  return integralPart + fractionalPart;}  }
class C{  @Override protected void doAction(){  exitApplication();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (part: ");  result.append(part);  result.append(')');  return result.toString();}  }
class C{  private int capacity(int expectedMaxSize){  int minCapacity=(3 * expectedMaxSize) / 2;  int result;  if (minCapacity > MAXIMUM_CAPACITY || minCapacity < 0) {    result=MAXIMUM_CAPACITY;  } else {    result=MINIMUM_CAPACITY;    while (result < minCapacity)     result<<=1;  }  return result;}  }
class C{  @Override public void clear(){  super.clear();  while (queue.poll() != null) {  }}  }
class C{  @Override protected ShardsIterator shards(ClusterState clusterState,GetIndicesVersionRequest request,String[] concreteIndices){  return clusterState.routingTable().allShards(concreteIndices);}  }
class C{  private BlockSnapshotSession prepareSnapshotSession(BlockSnapshot snapshot){  s_logger.info("Prepare BlockSnapshotSession for snapshot {}",snapshot.getId());  BlockSnapshotSession snapshotSession=new BlockSnapshotSession();  URI snapSessionURI=URIUtil.createId(BlockSnapshotSession.class);  snapshotSession.setId(snapSessionURI);  snapshotSession.setSessionLabel(getSessionLabelFromSettingsInstance(snapshot));  URI cgURI=snapshot.getConsistencyGroup();  if (NullColumnValueGetter.isNullURI(cgURI)) {    snapshotSession.setParent(snapshot.getParent());    snapshotSession.setLabel(snapshot.getLabel());  } else {    snapshotSession.setConsistencyGroup(cgURI);    snapshotSession.setLabel(snapshot.getSnapsetLabel());    Volume parent=getDbClient().queryObject(Volume.class,snapshot.getParent());    if (parent != null) {      snapshotSession.setReplicationGroupInstance(parent.getReplicationGroupInstance());      snapshotSession.setSessionSetName(parent.getReplicationGroupInstance());    }  }  snapshotSession.setProject(snapshot.getProject());  snapshotSession.setStorageController(snapshot.getStorageController());  snapshotSession.setSessionInstance(snapshot.getSettingsInstance());  StringSet linkedTargets=new StringSet();  linkedTargets.add(snapshot.getId().toString());  snapshotSession.setLinkedTargets(linkedTargets);  return snapshotSession;}  }
class C{  public boolean isCompleted(){  return state == ParallelTaskState.COMPLETED_WITHOUT_ERROR || state == ParallelTaskState.COMPLETED_WITH_ERROR;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:46.800 -0500",hash_original_method="440496C0C039EAF57937C0E12546E16A",hash_generated_method="23DC341BBB50BCBF088F63F20F68D85D") public CharSequence loadLabel(PackageManager pm){  if (mLabel == 0 || pm == null)   return "";  return pm.getText(getPackageName(),mLabel,mService.serviceInfo.applicationInfo);}  }
class C{  public boolean isAsyncExecution(){  return asyncExecution;}  }
class C{  protected void sequence_NamespaceImportSpecifier(ISerializationContext context,NamespaceImportSpecifier semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void run(){  while (ReconnectionManager.this.isReconnectionAllowed()) {    int remainingSeconds=timeDelay();    while (ReconnectionManager.this.isReconnectionAllowed() && remainingSeconds > 0) {      try {        Thread.sleep(1000);        remainingSeconds--;        ReconnectionManager.this.notifyAttemptToReconnectIn(remainingSeconds);      } catch (      InterruptedException e1) {        e1.printStackTrace();        ReconnectionManager.this.notifyReconnectionFailed(e1);      }    }    try {      if (ReconnectionManager.this.isReconnectionAllowed()) {        connection.connect();      }    } catch (    XMPPException e) {      ReconnectionManager.this.notifyReconnectionFailed(e);    }  }}  }
class C{  @DoNotStrip @Override public void runOnQueue(Runnable runnable){  if (mIsFinished) {    FLog.w(ReactConstants.TAG,"Tried to enqueue runnable on already finished thread: '" + getName() + "... dropping Runnable.");  }  mHandler.post(runnable);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static ObjectInputStream newObjectInputStream(File file) throws IOException {  return new ObjectInputStream(new FileInputStream(file));}  }
class C{  public Boolean isCrlDistributionPointUsageEnabled(){  return crlDistributionPointUsageEnabled;}  }
class C{  private void startAuthenticationActivity(){  if (Constants.AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED == false) {    Intent intent=new Intent(ServerDetails.this,AuthenticationActivity.class);    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);    startActivity(intent);  }}  }
class C{  public static double clampAngle(double angle){  double newAngle=angle % 360;  if (newAngle < 0)   newAngle=360 + newAngle;  return newAngle;}  }
class C{  public void mount(String iso,String dir){  StringBuilder buf=new StringBuilder();  String command=String.format(ImageServerDialogProperties.getString("cmd.mount"),"'" + iso + "'",dir);  sendWaitFor(command,defaultTimeout,prompts,buf);  log.debug(buf.toString());}  }
class C{  static public BigDecimal convertProductTo(Properties ctx,int M_Product_ID,int C_UOM_To_ID,BigDecimal qtyPrice){  if (qtyPrice == null || qtyPrice.signum() == 0 || M_Product_ID == 0 || C_UOM_To_ID == 0)   return qtyPrice;  BigDecimal retValue=getProductRateTo(ctx,M_Product_ID,C_UOM_To_ID);  if (retValue != null) {    if (Env.ONE.compareTo(retValue) == 0)     return qtyPrice;    MUOM uom=MUOM.get(ctx,C_UOM_To_ID);    if (uom != null)     return uom.round(retValue.multiply(qtyPrice),true);    return retValue.multiply(qtyPrice);  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.052 -0500",hash_original_method="B2956F900AF52D9E41A7969852791670",hash_generated_method="B85A43553E3A2E354F79DAA8C0BBDF5A") public ElementType(String name,int model,int memberOf,int flags,Schema schema){  theName=name;  theModel=model;  theMemberOf=memberOf;  theFlags=flags;  theAtts=new AttributesImpl();  theSchema=schema;  theNamespace=namespace(name,false);  theLocalName=localName(name);}  }
class C{  public CampoTablaVO updateCampoTabla(CampoTablaVO campoTablaVO){  Locale locale=getServiceClient().getLocale();  iniciarTransaccion();  campoTablaVO=campoTablaDbEntity.updateCampoTabla(campoTablaVO);  AuditoriaDescripcion.auditaModificacionCampo(locale,this,campoTablaVO);  UsoObjetoVO usoObjetoVO=new UsoObjetoVO();  usoObjetoVO.setIdObj(campoTablaVO.getIdArea());  usoObjetoVO.setIdObjUsuario(campoTablaVO.getId());  usoObjetoVO.setTipoObj(TipoObjetoUsado.AREA);  usoObjetoVO.setTipoObjUsuario(TipoObjetoUsuario.CAMPO_TABLA);  UsoObjetoVO antiguoUsoObjetoVO=(UsoObjetoVO)usoObjetoDbEntity.getXIdObjUsuarioYTipoObj(usoObjetoVO.getIdObj(),usoObjetoVO.getTipoObj());  if (antiguoUsoObjetoVO == null) {    if (campoTablaVO.getIdArea() != null)     usoObjetoDbEntity.create(usoObjetoVO);  } else   if (campoTablaVO.getIdArea() != null)   usoObjetoDbEntity.update(usoObjetoVO); else   usoObjetoDbEntity.deleteByIdObjUsuario(campoTablaVO.getId());  List listaCamposDato=campoDatoDbEntity.getCamposDatoXIdTabla(campoTablaVO.getId());  if (!ListUtils.isEmpty(listaCamposDato)) {    if (campoTablaVO.getIdArea() != null) {      for (int i=0; i < listaCamposDato.size(); i++) {        CampoDatoVO campoDatoVO=(CampoDatoVO)listaCamposDato.get(i);        usoObjetoVO=new UsoObjetoVO();        usoObjetoVO.setIdObj(campoDatoVO.getIdArea());        usoObjetoVO.setIdObjUsuario(campoDatoVO.getId());        usoObjetoVO.setTipoObj(TipoObjetoUsado.AREA);        usoObjetoVO.setTipoObjUsuario(TipoObjetoUsuario.CAMPO_DATO);        antiguoUsoObjetoVO=usoObjetoDbEntity.getXIdObjUsuarioYTipoObj(usoObjetoVO.getIdObj(),usoObjetoVO.getTipoObj());        if (antiguoUsoObjetoVO == null) {          usoObjetoDbEntity.create(usoObjetoVO);        } else {          usoObjetoDbEntity.update(usoObjetoVO);        }      }    } else {      Vector vector=new Vector();      for (int i=0; i < listaCamposDato.size(); i++) {        CampoDatoVO campoDatoVO=(CampoDatoVO)listaCamposDato.get(i);        vector.add(campoDatoVO.getId());      }      usoObjetoDbEntity.deleteByIdObjUsuario(StringUtils.toString(vector.toArray()));    }  }  commit();  return campoTablaVO;}  }
class C{  public T caseTypeDefiningElement(TypeDefiningElement object){  return null;}  }
class C{  public String trainPercentTipText(){  return "Set the percentage of data to use for training.";}  }
class C{  protected Object clone(){  try {    AbstractHashedMap cloned=(AbstractHashedMap)super.clone();    cloned.data=new HashEntry[data.length];    cloned.entrySet=null;    cloned.keySet=null;    cloned.values=null;    cloned.modCount=0;    cloned.size=0;    cloned.init();    cloned.putAll(this);    return cloned;  } catch (  CloneNotSupportedException ex) {    return null;  }}  }
class C{  public final double dot(Double2D other){  return other.x * x + other.y * y;}  }
class C{  public List<RichTranslation<IString,String>> decode(InputStream inputStream,boolean outputToConsole) throws IOException {  logger.info("Entering main translation loop");  final MulticoreWrapper<DecoderInput,DecoderOutput> wrapper=new MulticoreWrapper<>(numThreads,new PhrasalProcessor(0));  final LineNumberReader reader=new LineNumberReader(new InputStreamReader(inputStream,IOTools.DEFAULT_ENCODING));  final List<RichTranslation<IString,String>> bestTranslationList=outputToConsole ? null : new ArrayList<>();  this.scorers.stream().forEach(null);  int ksrTyped=0;  int ksrTotal=0;  int wpaCorrect=0;  int wpaTotal=0;  boolean doEval=references != null && (ksr_nbest_size > 0 || wpa_nbest_size > 0 || oracle_nbest_size > 0);  final LineNumberReader refReader=doEval ? new LineNumberReader(new InputStreamReader(new FileInputStream(new File(references)),IOTools.DEFAULT_ENCODING)) : null;  final long startTime=TimingUtils.startTime();  int sourceInputId=0;  for (String line; (line=reader.readLine()) != null; ++sourceInputId) {    final Sequence<IString> source=preprocessor == null ? IStrings.tokenize(line) : preprocessor.process(line.trim());    if (source.size() > maxSentenceSize || source.size() < minSentenceSize) {      logger.warn("Skipping: {}",line);      logger.warn("Tokens: {} (min: {} max: {})",source.size(),minSentenceSize,maxSentenceSize);      continue;    }    final InputProperties inputProps=inputPropertiesList != null && sourceInputId < inputPropertiesList.size() ? inputPropertiesList.get(sourceInputId) : new InputProperties();    final List<Sequence<IString>> targets=forceDecodeReferences == null ? null : forceDecodeReferences.get(sourceInputId);    Sequence<IString> ref=null;    if (doEval) {      String refLine=refReader.readLine();      if (refLine == null) {        System.err.println("ERROR: reference file is too short");        System.exit(-1);      }      ref=IStrings.tokenize(refLine);    }    wrapper.put(new DecoderInput(source,sourceInputId,targets,inputProps,ksr_nbest_size,wpa_nbest_size,oracle_nbest_size,ref));    for (DecoderOutput result; (result=wrapper.poll()) != null; ) {      if (outputToConsole) {        processConsoleResult(result.translations,result.bestTranslation,result.sourceLength,result.sourceInputId);      } else {        final RichTranslation<IString,String> best=result.translations.size() > 0 ? result.translations.get(0) : null;        bestTranslationList.add(best);      }      ksrTyped+=result.ksrTyped;      ksrTotal+=result.ksrTotal;      wpaCorrect+=result.wpaCorrect;      wpaTotal+=result.wpaTotal;    }  }  wrapper.join();  while (wrapper.peek()) {    final DecoderOutput result=wrapper.poll();    if (outputToConsole) {      processConsoleResult(result.translations,result.bestTranslation,result.sourceLength,result.sourceInputId);    } else {      final RichTranslation<IString,String> best=result.translations.size() > 0 ? result.translations.get(0) : null;      bestTranslationList.add(best);    }    ksrTyped+=result.ksrTyped;    ksrTotal+=result.ksrTotal;    wpaCorrect+=result.wpaCorrect;    wpaTotal+=result.wpaTotal;  }  final double totalTime=TimingUtils.elapsedSeconds(startTime);  final double segmentsPerSec=sourceInputId / totalTime;  logger.info("Decoding at {} segments/sec (total: {} sec)",segmentsPerSec,totalTime);  reader.close();  if (refReader != null)   refReader.close();  if (ksrTotal > 0)   logger.info("KSR: {} / {} = {}",ksrTyped,ksrTotal,((double)ksrTyped) / ksrTotal);  if (wpaTotal > 0)   logger.info("Word prediction accuracy: {} / {} = {}",wpaCorrect,wpaTotal,((double)wpaCorrect) / wpaTotal);  return bestTranslationList;}  }
class C{  public int compareTo(Object o) throws ClassCastException {  ElemTemplateElement ro=(ElemTemplateElement)o;  int roPrecedence=ro.getStylesheetComposed().getImportCountComposed();  int myPrecedence=this.getStylesheetComposed().getImportCountComposed();  if (myPrecedence < roPrecedence)   return -1; else   if (myPrecedence > roPrecedence)   return 1; else   return this.getUid() - ro.getUid();}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);  ValidationUtils.validateTaskStage(currentState.taskState);  if (currentState.taskState.stage == TaskState.TaskStage.STARTED) {    checkState(null != currentState.taskState.subStage,"Sub-stage cannot be null in STARTED stage.");switch (currentState.taskState.subStage) {case UPLOAD_IMAGE:case ALLOCATE_RESOURCES:case CREATE_VMS:case CREATE_CONTAINERS:case WAIT_FOR_NODE_GROUP_CONVERGANCE:      break;default :    throw new IllegalStateException("Unknown task sub-stage: " + currentState.taskState.subStage.toString());}} else {checkState(null == currentState.taskState.subStage,"Sub-stage must be null in stages other than STARTED.");}}  }
class C{  public NotificationChain basicSetSuperType(ParameterizedTypeRef newSuperType,NotificationChain msgs){  ParameterizedTypeRef oldSuperType=superType;  superType=newSuperType;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.TOBJECT_PROTOTYPE__SUPER_TYPE,oldSuperType,newSuperType);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public synchronized void render(Graphics g){  if (renderText) {    super.render(g);  }}  }
class C{  void renderNormal(){  glUseProgram(normalProgram);  glUniformMatrix4fv(normalProgramVPUniform,false,camera.get(matrixBuffer));  glUniformMatrix4fv(normalProgramLVPUniform,false,light.get(matrixBuffer));  glUniformMatrix4fv(normalProgramBiasUniform,false,biasMatrix.get(matrixBuffer));  glUniform3f(normalProgramLightPosition,lightPosition.x,lightPosition.y,lightPosition.z);  glUniform3f(normalProgramLightLookAt,lightLookAt.x,lightLookAt.y,lightLookAt.z);  glViewport(0,0,width,height);  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);  glBindTexture(GL_TEXTURE_2D,depthTexture);  glDrawArrays(GL_TRIANGLES,0,6 * 6 * boxes.length);  glBindTexture(GL_TEXTURE_2D,0);  glUseProgram(0);}  }
class C{  private View createView(int event,boolean advancingPage,Preset preset){  FormController formController=Collect.getInstance().getFormController();switch (event) {case FormEntryController.EVENT_QUESTION:case FormEntryController.EVENT_GROUP:case FormEntryController.EVENT_REPEAT:    ODKView odkv=null;  FormEntryPrompt[] prompts=formController.getQuestionPrompts();FormEntryCaption[] groups=formController.getGroupsForCurrentIndex();odkv=new ODKView(this,prompts,groups,advancingPage,preset);if (preset != null && preset.targetGroup != null && preset.targetGroup.equals(groups[groups.length - 1].getLongText())) {mTargetView=odkv;}Log.i(TAG,"created view for group " + (groups.length > 0 ? groups[groups.length - 1].getLongText() : "[top]") + " "+ (prompts.length > 0 ? prompts[0].getQuestionText() : "[no question]"));for (QuestionWidget qw : odkv.getWidgets()) {if (!qw.getPrompt().isReadOnly()) {registerForContextMenu(qw);}}return odkv;default :return null;}}  }
class C{  public DateRangeMapper pattern(String pattern){  this.pattern=pattern;  return this;}  }
class C{  public void animateThenRemove(MarkerWithPosition marker,LatLng from,LatLng to){  lock.lock();  AnimationTask animationTask=new AnimationTask(marker,from,to);  animationTask.removeOnAnimationComplete(mClusterManager.getMarkerManager());  mAnimationTasks.add(animationTask);  lock.unlock();}  }
class C{  public Vector3D size(){  return max.subtract(min);}  }
class C{  private static <T extends BlockObject>FCZoneReference createFCZoneReference(ZoneInfo info,Initiator initiator,T volume,ExportGroup exportGroup){  FCZoneReference ref=new FCZoneReference();  ref.setPwwnKey(info.getZoneReferenceKey());  ref.setFabricId(info.getFabricId());  ref.setNetworkSystemUri(URI.create(info.getNetworkSystemId()));  ref.setVolumeUri(volume.getId());  ref.setGroupUri(exportGroup.getId());  ref.setZoneName(info.getZoneName());  ref.setId(URIUtil.createId(FCZoneReference.class));  ref.setLabel(FCZoneReference.makeLabel(ref.getPwwnKey(),volume.getId().toString()));  ref.setExistingZone(true);  return ref;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:07.810 -0500",hash_original_method="26A62B68A47AD8599D541EA0EB845FD0",hash_generated_method="4002D46B7AD683EE775D89C25FEC1BD4") protected int placeTo(ByteBuffer[] dsts,int offset,int length){  if (buffer == null) {    return 0;  }  int pos=0;  int len=buffer.length;  int rem;  for (int i=offset; i < offset + length; i++) {    rem=dsts[i].remaining();    if (len - pos < rem) {      dsts[i].put(buffer,pos,len - pos);      pos=len;      break;    }    dsts[i].put(buffer,pos,rem);    pos+=rem;  }  if (pos != len) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLException("The received application data could not be fully written" + "into the destination buffers"));  }  buffer=null;  return len;}  }
class C{  public static <T>Collection<T> synchronizedCollection(Collection<T> collection){  if (collection == null) {    throw new NullPointerException("collection == null");  }  return new SynchronizedCollection<T>(collection);}  }
class C{  public static void zoneChange(final Player player,final String sourceZone,final String destinationZone){  if (destinationZone.equals("-1_semos_catacombs_se")) {    process(player,ZoneEventType.VISIT_SUB1_SEMOS_CATACOMBS);  } else   if (destinationZone.equals("-2_semos_catacombs")) {    process(player,ZoneEventType.VISIT_SUB2_SEMOS_CATACOMBS);  } else   if (destinationZone.equals("1_kikareukin_cave")) {    process(player,ZoneEventType.VISIT_KIKAREUKIN_CAVE);  } else   if (destinationZone.equals("-7_kanmararn_prison")) {    process(player,ZoneEventType.VISIT_KANMARARN_PRISON);  } else   if (destinationZone.equals("-1_fado_great_cave_w2")) {    process(player,ZoneEventType.VISIT_IMPERIAL_CAVES);  } else   if (destinationZone.equals("-1_fado_great_cave_n_e2")) {    process(player,ZoneEventType.VISIT_MAGIC_CITY_N);  } else   if (destinationZone.equals("-1_fado_great_cave_e2")) {    process(player,ZoneEventType.VISIT_MAGIC_CITY);  } else   if (destinationZone.equals("-1_semos_caves")) {    process(player,ZoneEventType.VISIT_SEMOS_CAVES);  } else   if (destinationZone.equals("int_ados_castle_entrance")) {    process(player,ZoneEventType.VISIT_ADOS_CASTLE);  }}  }
class C{  @Override public synchronized String toString(){  if (elementCount == 0) {    return "[]";  }  int length=elementCount - 1;  StringBuilder buffer=new StringBuilder(elementCount * 16);  buffer.append('[');  for (int i=0; i < length; i++) {    if (elementData[i] == this) {      buffer.append("(this Collection)");    } else {      buffer.append(elementData[i]);    }    buffer.append(", ");  }  if (elementData[length] == this) {    buffer.append("(this Collection)");  } else {    buffer.append(elementData[length]);  }  buffer.append(']');  return buffer.toString();}  }
class C{  public static int nextID(int AD_Sequence_ID,String System) throws SQLException {  boolean isSystem=System != null && "Y".equals(System);  int retValue=-1;  StringBuffer sql=new StringBuffer("SELECT CurrentNext");  if (isSystem)   sql.append("Sys");  sql.append(",IncrementNo FROM AD_Sequence WHERE AD_Sequence_ID=?");  PreparedStatement pstmt=prepareStatement(sql.toString(),ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    retValue=rs.getInt(1);    int incrementNo=rs.getInt(2);    rs.updateInt(2,retValue + incrementNo);    pstmt.getConnection().commit();  }  rs.close();  pstmt.close();  return retValue;}  }
class C{  public boolean nextBoolean(double probability){  int y;  int z;  if (probability < 0.0 || probability > 1.0)   throw new IllegalArgumentException("probability must be between 0.0 and 1.0 inclusive.");  if (probability == 0.0)   return false; else   if (probability == 1.0)   return true;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (z >>> 1) ^ mag01[z & 0x1];    }    for (; kk < N - 1; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (z >>> 1) ^ mag01[z & 0x1];    }    z=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (z >>> 1) ^ mag01[z & 0x1];    mti=0;  }  z=mt[mti++];  z^=z >>> 11;  z^=(z << 7) & TEMPERING_MASK_B;  z^=(z << 15) & TEMPERING_MASK_C;  z^=(z >>> 18);  return ((((long)(y >>> 6)) << 27) + (z >>> 5)) / (double)(1L << 53) < probability;}  }
class C{  public SerializableAccountId(final Address address){  super(address);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Vec covarianceDiag(Vec means,DataSet dataset){  DenseVector diag=new DenseVector(dataset.getNumNumericalVars());  covarianceDiag(means,diag,dataset);  return diag;}  }
class C{  public int compareInts(int x,int y){  return (x < y) ? -1 : ((x == y) ? 0 : 1);}  }
class C{  public StateMachineEnsembleException(String message){  super(message);}  }
class C{  private static byte[] compress(byte[] d){  Deflater deflater=new Deflater();  deflater.setStrategy(Deflater.HUFFMAN_ONLY);  deflater.setInput(d);  deflater.finish();  ByteArrayOutputStream out2=new ByteArrayOutputStream(d.length);  byte[] buffer=new byte[1024];  while (!deflater.finished()) {    int count=deflater.deflate(buffer);    out2.write(buffer,0,count);  }  deflater.end();  return out2.toByteArray();}  }
class C{  @LogMessageDocs({@LogMessageDoc(level="WARN",message="Failed to cleanly shut down RPC server",explanation="Could not close all open sockets cleanly"),@LogMessageDoc(level="WARN",message="Interrupted while shutting down RPC server",explanation="Could not close all open sockets cleanly")}) public void shutdown(){  shutDown=true;  try {    if (!cg.close().await(5,TimeUnit.SECONDS)) {      logger.warn("Failed to cleanly shut down RPC server");      return;    }    if (clientBootstrap != null)     clientBootstrap.releaseExternalResources();    clientBootstrap=null;    if (serverBootstrap != null)     serverBootstrap.releaseExternalResources();    serverBootstrap=null;    if (pipelineFactory != null)     pipelineFactory.releaseExternalResources();    pipelineFactory=null;    if (bossExecutor != null)     bossExecutor.shutdown();    bossExecutor=null;    if (workerExecutor != null)     workerExecutor.shutdown();    workerExecutor=null;  } catch (  InterruptedException e) {    logger.warn("Interrupted while shutting down RPC server");  }  logger.debug("Internal floodlight RPC shut down");}  }
class C{  private boolean isExternalSupported(String extension){  return externalSupport.containsKey(extension);}  }
class C{  private void raster(){  glEnable(GL_DEPTH_TEST);  glUseProgram(rasterProgram);  glUniformMatrix4fv(viewMatrixUniform,false,viewMatrix.get(matrixBuffer));  glUniformMatrix4fv(projectionMatrixUniform,false,projMatrix.get(matrixBuffer));  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  glClear(GL_DEPTH_BUFFER_BIT);  glBindVertexArray(vaoScene);  glDrawArrays(GL_TRIANGLES,0,6 * 6 * boxes.length / 2);  glBindVertexArray(0);  glBindFramebuffer(GL_FRAMEBUFFER,0);  glUseProgram(0);}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MDunning[").append(get_ID()).append("-").append(getName());  sb.append("]");  return sb.toString();}  }
class C{  public static String generateClientId(){  return CLIENT_ID_PREFIX + System.nanoTime();}  }
class C{  public static void merge(ByteArrayOutputStream baos,byte[]... pcaps) throws IOException {  merge(baos,Arrays.asList(pcaps));}  }
class C{  public E pop(){  return super.get().removeLast();}  }
class C{  public boolean containsStorageSystem(String storageSystemGuid){  boolean contains=false;  for (  VPlexStorageSystemInfo storageSystemInfo : storageSystemInfoList) {    if (storageSystemInfo.matches(storageSystemGuid)) {      contains=true;      break;    }  }  return contains;}  }
class C{  @Override public void create(){  assertWritable();  final String name=getNamespace() + "." + NAME_SEARCH;  final IIndexManager indexManager=getIndexManager();  final Properties p=getProperties();  final IndexMetadata indexMetadata=new IndexMetadata(indexManager,p,name,UUID.randomUUID(),IndexTypeEnum.BTree);  final IKeyBuilderFactory keyBuilderFactory;{    final Properties tmp=new Properties(p);    tmp.setProperty(KeyBuilder.Options.STRENGTH,p.getProperty(Options.INDEXER_COLLATOR_STRENGTH,Options.DEFAULT_INDEXER_COLLATOR_STRENGTH));    keyBuilderFactory=new DefaultKeyBuilderFactory(tmp);  }  final boolean fieldsEnabled=Boolean.parseBoolean(p.getProperty(Options.FIELDS_ENABLED,Options.DEFAULT_FIELDS_ENABLED));  if (log.isInfoEnabled())   log.info(Options.FIELDS_ENABLED + "=" + fieldsEnabled);  indexMetadata.setTupleSerializer(new RDFFullTextIndexTupleSerializer(keyBuilderFactory,DefaultTupleSerializer.getDefaultLeafKeysCoder(),SimpleRabaCoder.INSTANCE,fieldsEnabled));  indexManager.registerIndex(indexMetadata);  if (log.isInfoEnabled())   log.info("Registered new text index: name=" + name);}  }
class C{  public Placeholder insertEmptyPlaceholder(String title,Size size,long timestamp){  Uri uri=Storage.addEmptyPlaceholder(size);  return new Placeholder(title,uri,timestamp);}  }
class C{  @Override public double valueToJava2D(double value,Rectangle2D dataArea,RectangleEdge edge){  Range range=getRange();  double vmin=range.getLowerBound();  double vmax=range.getUpperBound();  double vp=getCycleBound();  if ((value < vmin) || (value > vmax)) {    return Double.NaN;  }  double jmin=0.0;  double jmax=0.0;  if (RectangleEdge.isTopOrBottom(edge)) {    jmin=dataArea.getMinX();    jmax=dataArea.getMaxX();  } else   if (RectangleEdge.isLeftOrRight(edge)) {    jmax=dataArea.getMinY();    jmin=dataArea.getMaxY();  }  if (isInverted()) {    if (value == vp) {      return this.boundMappedToLastCycle ? jmin : jmax;    } else     if (value > vp) {      return jmax - (value - vp) * (jmax - jmin) / this.period;    } else {      return jmin + (vp - value) * (jmax - jmin) / this.period;    }  } else {    if (value == vp) {      return this.boundMappedToLastCycle ? jmax : jmin;    } else     if (value >= vp) {      return jmin + (value - vp) * (jmax - jmin) / this.period;    } else {      return jmax - (vp - value) * (jmax - jmin) / this.period;    }  }}  }
class C{  public static int ESOCKTNOSUPPORT(){  return Errno.ESOCKTNOSUPPORT.intValue();}  }
class C{  @Override public boolean isBusy(){  return false;}  }
class C{  public Panel(){  this(new FlowLayout());}  }
class C{  @Override public Object annotationButton(final FormObject form){  final int subtype=form.getParameterConstant(PdfDictionary.Subtype);  if (subtype == PdfDictionary.Popup) {    return createAnnotationPopup(form);  }  if (!form.isAppearanceUsed()) {switch (subtype) {case PdfDictionary.Text:      return createAnnotationText(form);case PdfDictionary.FreeText:    return createAnnotationFreeText(form);case PdfDictionary.Highlight:  return createAnntoationHighlight(form);case PdfDictionary.Underline:return createAnnotationUnderline(form);case PdfDictionary.Ink:return createAnnotationInk(form);case PdfDictionary.StrickOut:return createAnnotationStrikeOut(form);case PdfDictionary.Square:return createAnnotationSquare(form);case PdfDictionary.Caret:return createAnnotationCaret(form);case PdfDictionary.Line:return createAnnotationLine(form);case PdfDictionary.Polygon:return createAnnotationPoly(form);case PdfDictionary.PolyLine:return createAnnotationPoly(form);case PdfDictionary.Circle:return createAnnotationCircle(form);case PdfDictionary.Squiggly:return createAnnotationSquiggly(form);case PdfDictionary.FileAttachment:return createAnnotationFileAttachment(form);case PdfDictionary.Sound:return createAnnotationSound(form);}}return setupAnnotationButton(form);}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  private void addLocations(int points,long startTime,TripStatistics tripStatistics,int timeOffset,int locationOffset){  for (int i=0; i < points; i++) {    Location location=getLocation(i + locationOffset,(i + locationOffset) * .001,99999,startTime + (timeOffset + i) * TEN_SECONDS);    tripStatisticsUpdater.addLocation(location,PreferencesUtils.RECORDING_DISTANCE_INTERVAL_DEFAULT,true,ActivityType.WALKING,DEFAULT_WEIGHT);    tripStatistics=tripStatisticsUpdater.getTripStatistics();    assertTrue(tripStatistics.getMovingTime() <= tripStatistics.getTotalTime());    assertTrue(tripStatistics.getAverageSpeed() <= tripStatistics.getAverageMovingSpeed());    assertTrue(tripStatistics.getAverageMovingSpeed() <= tripStatistics.getMaxSpeed());    assertTrue(tripStatistics.getStopTime() >= tripStatistics.getStartTime());  }}  }
class C{  private void subscribe(){  if (mqttClient != null) {    try {      String[] topicArray={subscribeTopic};      int[] qosArray={subscribeQos};      mqttClient.subscribe(topicArray,qosArray);      out(getDate() + Messages.MqttClientView_38);      out(Messages.MqttClientView_39 + subscribeTopic + "\"\n"+ Messages.MqttClientView_41+ subscribeQos);    } catch (    MqttPersistenceException e) {      e.printStackTrace();    }catch (    NullPointerException e) {      e.printStackTrace();    }catch (    MqttException e) {      e.printStackTrace();    }  }}  }
class C{  public static boolean equals(CharSequence a,CharSequence b){  return (a == b) || (a != null && a.equals(b));}  }
class C{  public static String match(String path,String input,String expected) throws Exception {  return match(path,input,expected,DEFAULT_DELTA);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public void checkConfigurationMatchesDataSourceFixture(String configuration,DataSourceFixture dataSourceFixture){  String pathToDatabase="//" + NS_PREFIX + "database["+ NS_PREFIX+ "jndi-name='"+ dataSourceFixture.jndiLocation+ "']";  try {    XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.driverClass,pathToDatabase + "/" + NS_PREFIX+ "driver/"+ NS_PREFIX+ "type",configuration);    if (dataSourceFixture.url == null) {      XMLAssert.assertXpathNotExists(pathToDatabase + "/" + NS_PREFIX+ "driver/"+ NS_PREFIX+ "url",configuration);    } else {      XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.url,pathToDatabase + "/" + NS_PREFIX+ "driver/"+ NS_PREFIX+ "url",configuration);    }    XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.username,pathToDatabase + "/" + NS_PREFIX+ "driver/"+ NS_PREFIX+ "user",configuration);    XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.password,pathToDatabase + "/" + NS_PREFIX+ "driver/"+ NS_PREFIX+ "password",configuration);    Properties driverProperties=dataSourceFixture.buildDataSource().getConnectionProperties();    Iterator<Object> i=driverProperties.keySet().iterator();    while (i.hasNext()) {      String propertyName=i.next().toString();      XMLAssert.assertXpathEvaluatesTo(driverProperties.getProperty(propertyName),pathToDatabase + "/" + NS_PREFIX+ "driver/"+ NS_PREFIX+ ""+ propertyName,configuration);    }  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void actionPerformed(ActionEvent e){  panel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  Integer product=onlyProduct.getValue() != null ? (Integer)onlyProduct.getValue() : null;  Integer vendor=onlyVendor.getValue() != null ? (Integer)onlyVendor.getValue() : null;  Timestamp from=dateFrom.getValue() != null ? (Timestamp)dateFrom.getValue() : null;  Timestamp to=dateTo.getValue() != null ? (Timestamp)dateTo.getValue() : null;  if (e.getSource() == matchFrom) {    String selection=(String)matchFrom.getSelectedItem();    matchTo.setModel(new DefaultComboBoxModel(cmd_matchFrom(selection)));    xMatchedBorder.setTitle(selection);    xMatchedScrollPane.repaint();    xMatchedTable.setRowCount(0);    cmd_matchTo();  } else   if (e.getSource() == matchTo)   cmd_matchTo(); else   if (e.getSource() == bSearch) {    xMatchedTable=(MiniTable)cmd_search(xMatchedTable,matchFrom.getSelectedIndex(),(String)matchTo.getSelectedItem(),product,vendor,from,to,matchMode.getSelectedIndex() == MODE_MATCHED);    xMatched.setValue(Env.ZERO);    statusBar.setStatusLine(matchFrom.getSelectedItem().toString() + "# = " + xMatchedTable.getRowCount(),xMatchedTable.getRowCount() == 0);    statusBar.setStatusDB(0);  } else   if (e.getSource() == bProcess) {    cmd_process(xMatchedTable,xMatchedToTable,matchMode.getSelectedIndex(),matchFrom.getSelectedIndex(),matchTo.getSelectedItem(),m_xMatched);    xMatchedTable=(MiniTable)cmd_search(xMatchedTable,matchFrom.getSelectedIndex(),(String)matchTo.getSelectedItem(),product,vendor,from,to,matchMode.getSelectedIndex() == MODE_MATCHED);    xMatched.setValue(Env.ZERO);    statusBar.setStatusLine(matchFrom.getSelectedItem().toString() + "# = " + xMatchedTable.getRowCount(),xMatchedTable.getRowCount() == 0);    statusBar.setStatusDB(0);  } else   if (e.getSource() == sameBPartner || e.getSource() == sameProduct || e.getSource() == sameQty)   xMatchedTable=(MiniTable)cmd_search(xMatchedTable,matchFrom.getSelectedIndex(),(String)matchTo.getSelectedItem(),product,vendor,from,to,matchMode.getSelectedIndex() == MODE_MATCHED);  panel.setCursor(Cursor.getDefaultCursor());}  }
class C{  @Override protected void search(BayesNet bayesNet,Instances instances) throws Exception {  int k=m_nNrOfLookAheadSteps;  int l=m_nNrOfGoodOperations;  lookAheadInGoodDirectionsSearch(bayesNet,instances,k,l);}  }
class C{  public int completedOperations(){  return completedOperations;}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  JSONObject jo=ja.optJSONObject(0);  if (jo != null) {    JSONArray names=jo.names();    if (names != null) {      return rowToString(names) + toString(names,ja);    }  }  return null;}  }
class C{  void process_view(Layout layout,View view) throws Exception {  logger.info("  processing view {}.{}",layout.name,view.name);  String id=view.get_attr("id");  if (id == null) {    logger.info("No id for view {} ",view.name);  }  if ((view.on_click != null) && (layout.activities.isEmpty())) {    logger.info("Warning: on click handler {} in layout {} ignored, " + "{} is not inflated anywhere",view.on_click,layout.name,layout.name);    view.ignoreOnClick=true;  } else   if (view.on_click != null) {    for (    SootClass cn : layout.classes) {      logger.info("Found on_click entry point {}.{} for view {} " + "in layout {}, resource name {}",cn,view.on_click,view.name,layout.name,view.get_resource_name());      String signature="<" + cn + ": void "+ view.on_click+ "(android.view.View)>";      view.on_click=signature;      logger.debug("Replace onclick signature {} ",view.on_click);    }  }  if (view.children.size() == 1 && view.children.get(0).name.equals("requestFocus")) {    logger.info("Detected requestFocus for view {} ",view.name);    view.children.clear();  }  List<View> originalList=new LinkedList<View>();  for (  View child : view.children) {    originalList.add(child);  }  for (  View child : originalList) {    if (child.getAttributes().size() == 0) {      logger.warn("View {} has no attribute ",child.name);      AnalysisReport.v().addEntry("View layout with no children: " + child.name,AnalysisReport.Level.HIGH);      continue;    }    if (!view.children.contains(child))     continue;    if (child.name.equals("include") && child.attr_exists("layout")) {      String includeName=child.get_attr("layout");      includeName=includeName.replace("@layout/","");      logger.info("**include layout {} in {} ",includeName,layout.name);      if (viewgroupTable.containsKey(includeName)) {        View viewgroup=viewgroupTable.get(includeName);        logger.info("**** included layout is found ");        logger.info("{}",viewgroup);        view.children.remove(child);        for (        View newMember : viewgroup.children) {          view.children.add((View)newMember.clone());        }      }    }    process_view(layout,child);  }}  }
class C{  public void addToActionMap(JComponent component,String actionKey,int condition){  addToActionMap(condition,false,false,actionKey,component);}  }
class C{  public static void configureORCFileSet(String configuredSchema,FileSetProperties.Builder properties){  String lowerCaseSchema=configuredSchema.toLowerCase();  String hiveSchema=parseHiveSchema(lowerCaseSchema,configuredSchema);  hiveSchema=hiveSchema.substring(1,hiveSchema.length() - 1);  String orcSchema=parseOrcSchema(configuredSchema);  properties.setInputFormat(OrcInputFormat.class).setOutputFormat(OrcOutputFormat.class).setExploreInputFormat("org.apache.hadoop.hive.ql.io.orc.OrcInputFormat").setExploreOutputFormat("org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat").setSerDe("org.apache.hadoop.hive.ql.io.orc.OrcSerde").setExploreSchema(hiveSchema).setEnableExploreOnCreate(true).setInputProperty("orc.mapred.output.schema",orcSchema).setOutputProperty("orc.mapred.output.schema",orcSchema).build();}  }
class C{  public Base64OutputStream(OutputStream out,int flags){  this(out,flags,true);}  }
class C{  @Override public synchronized void println(){  print("\n");}  }
class C{  public void addRestrictionList(ArrayList<Node> list){  if (initialLists == null) {    initialLists=new ArrayList<ArrayList<Node>>();  }  if (list.size() < minSetSize) {    initialLists.add(0,list);    minSetSize=list.size();  } else {    initialLists.add(list);  }}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  public SelectItem(Object value,String label,String description,boolean disabled){  this(value,label,description,disabled,true,false);}  }
class C{  static void photo(long restaurantId,double lat,double lng) throws IOException {  String url=RestaurantPhotos.url(lat,lng,res().getDimensionPixelSize(R.dimen.restaurant_photo_width),res().getDimensionPixelSize(R.dimen.restaurant_photo_height));  photo(0,restaurantId,url);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String q=getString(stack);  ManualRecord mr=Wizard.getInstance().getManualRecord(getAir(stack));  if (mr != null && Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    mr.setRecordingQuality(q);    Scheduler.getInstance().kick(false);  }  return null;}  }
class C{  public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  Log.i(TAG,"Ready");}  }
class C{  @SuppressWarnings("serial") public void testComplexJoinGroup02(){  final JoinGroupNode jgn=(JoinGroupNode)new Helper(){{      tmp=joinGroupNode(statementPatternNode(varNode(y),constantNode(b),constantNode(c)),bind(varNode(y),varNode(x)),selectSubQuery(projection(bind(varNode(z),varNode(z))),where(statementPatternNode(varNode(z),constantNode(c),varNode(o)))));    }  }.getTmp();  final Set<IVariable<?>> requiredBound=new HashSet<IVariable<?>>(){{      add(Var.var("y"));    }  };  final Set<IVariable<?>> desiredBound=new HashSet<IVariable<?>>(){{      add(Var.var("y"));      add(Var.var("z"));    }  };  final StaticAnalysis sa=new StaticAnalysis(new QueryRoot(QueryType.SELECT),null);  assertEquals(requiredBound,jgn.getRequiredBound(sa));  assertEquals(desiredBound,jgn.getDesiredBound(sa));}  }
class C{  @RequestMapping(value="/jobs/signal",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_JOBS_SIGNAL_POST) public Job signalJob(@RequestBody JobSignalRequest request) throws Exception {  return jobService.signalJob(request);}  }
class C{  public String dumpAs(Object data,Tag rootTag,FlowStyle flowStyle){  FlowStyle oldStyle=representer.getDefaultFlowStyle();  if (flowStyle != null) {    representer.setDefaultFlowStyle(flowStyle);  }  List<Object> list=new ArrayList<Object>(1);  list.add(data);  StringWriter buffer=new StringWriter();  dumpAll(list.iterator(),buffer,rootTag);  representer.setDefaultFlowStyle(oldStyle);  return buffer.toString();}  }
class C{  public int addStringValue(String value){  if (!isString()) {    return -1;  }  Object store=value;  if (value.length() > STRING_COMPRESS_THRESHOLD) {    try {      store=new SerializedObject(value,true);    } catch (    Exception ex) {      System.err.println("Couldn't compress string attribute value -" + " storing uncompressed.");    }  }  Integer index=((NominalAttributeInfo)m_AttributeInfo).m_Hashtable.get(store);  if (index != null) {    return index.intValue();  } else {    int intIndex=((NominalAttributeInfo)m_AttributeInfo).m_Values.size();    ((NominalAttributeInfo)m_AttributeInfo).m_Values.add(store);    ((NominalAttributeInfo)m_AttributeInfo).m_Hashtable.put(store,new Integer(intIndex));    return intIndex;  }}  }
class C{  public void testRemoveAttribute(){  bindingRequest.removeAttribute(changeRequest.getAttributeType());  assertNull("An attribute was still in the request after being removed",bindingRequest.getAttribute(changeRequest.getAttributeType()));  int expectedReturn=0;  int actualReturn=bindingRequest.getAttributeCount();  assertEquals("Attribute count did not change after removing an attribute",expectedReturn,actualReturn);}  }
class C{  public static Directories createDirectories(){  return (Directories)(new DirectoriesImpl());}  }
class C{  @Override public void bind(SocketAddress addr) throws SocketException {  if (delegate == null)   super.bind(addr); else   delegate.bind(addr);}  }
class C{  public void addUpdate(String name,Object value){  updates.put(name,value);}  }
class C{  public Matrix4x3d scale(double x,double y,double z){  return scale(x,y,z,this);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  String pre=" ";  for (int i=0; i < r; i++) {    pre+=" ";  }  int idx=0;  int i=0;  while (idx < filled.length) {    sb.append(pre);    for (int j=0; j <= i; j++) {      if (filled[idx++]) {        sb.append('*');      } else {        sb.append('.');      }      sb.append(' ');    }    sb.append('\n');    i++;    if (pre.length() != 0) {      pre=pre.substring(1);    }  }  return sb.toString();}  }
class C{  static protected PipelineOp convertRTOJoinGraph(PipelineOp left,final JoinGroupNode joinGroup,final Set<IVariable<?>> doneSet,final AST2BOpContext ctx,final AtomicInteger start){  final Set<IVariable<?>> doneSetIn=Collections.unmodifiableSet(doneSet);  if (onlySimpleJoins && ctx.isQuads()) {    return left;  }  final int arity=joinGroup.arity();  final JoinGroupNode rtoJoinGroup=new JoinGroupNode();  rtoJoinGroup.setQueryHints(joinGroup.getQueryHints());  @SuppressWarnings("rawtypes") final LinkedList<Predicate> preds=new LinkedList<Predicate>();  final List<IConstraint> constraints=new LinkedList<IConstraint>();  int naccepted=0;{    final Set<IVariable<?>> doneSetTmp=new LinkedHashSet<IVariable<?>>(doneSet);    for (int i=start.get(); i < arity; i++) {      final IGroupMemberNode child=(IGroupMemberNode)joinGroup.get(i);      if (child instanceof StatementPatternNode) {        StatementPatternNode sp=(StatementPatternNode)child;        final boolean optional=sp.isOptional();        if (onlyRequiredJoins && optional) {          break;        }        final List<IConstraint> attachedConstraints=getJoinConstraints(sp);        @SuppressWarnings("rawtypes") final Map<IConstraint,Set<IVariable<IV>>> needsMaterialization=new LinkedHashMap<IConstraint,Set<IVariable<IV>>>();        getJoinConstraints(attachedConstraints,needsMaterialization);        if (onlySimpleJoins && !needsMaterialization.isEmpty()) {          break;        }        sp=(StatementPatternNode)sp.clone();        rtoJoinGroup.addChild(sp);        naccepted++;        final Predicate<?> pred=AST2BOpUtility.toPredicate(sp,ctx);        preds.add(pred);        sp.setProperty(Annotations.PREDICATE_ID,pred.getId());        if (attachedConstraints != null) {          constraints.addAll(attachedConstraints);        }      } else {        if (onlySPs)         break;        throw new UnsupportedOperationException();      }    }    if (naccepted < RTO_MIN_JOINS) {      return left;    }    doneSet.addAll(doneSetTmp);  }  final SampleType sampleType=joinGroup.getProperty(QueryHints.RTO_SAMPLE_TYPE,QueryHints.DEFAULT_RTO_SAMPLE_TYPE);  final int limit=joinGroup.getProperty(QueryHints.RTO_LIMIT,QueryHints.DEFAULT_RTO_LIMIT);  final int nedges=joinGroup.getProperty(QueryHints.RTO_NEDGES,QueryHints.DEFAULT_RTO_NEDGES);  left=new JoinGraph(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(BOp.Annotations.CONTROLLER,true),new NV(JoinGraph.Annotations.VERTICES,preds.toArray(new Predicate[preds.size()])),new NV(JoinGraph.Annotations.CONSTRAINTS,constraints.toArray(new IConstraint[constraints.size()])),new NV(JoinGraph.Annotations.JOIN_GROUP,rtoJoinGroup),new NV(JoinGraph.Annotations.LIMIT,limit),new NV(JoinGraph.Annotations.NEDGES,nedges),new NV(JoinGraph.Annotations.SAMPLE_TYPE,sampleType.name()),new NV(JoinGraph.Annotations.DONE_SET,doneSetIn),new NV(JoinGraph.Annotations.NT,new NT(ctx.getNamespace(),ctx.getTimestamp())));  start.addAndGet(naccepted);  return left;}  }
class C{  public boolean isSyncEvent(){  SyncEventProperty syncEvent=getExtension(SyncEventProperty.class);  return (syncEvent != null) && "true".equalsIgnoreCase(syncEvent.getValue());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:25.741 -0500",hash_original_method="4C39B7C855C3608586F188D73E5D3223",hash_generated_method="5FC83B1953E7A5C3D3F0561A084B9533") private void internalWrite(byte[] b,int off,int len,boolean finish) throws IOException {  coder.output=embiggen(coder.output,coder.maxOutputSize(len));  if (!coder.process(b,off,len,finish)) {    throw new Base64DataException("bad base-64");  }  out.write(coder.output,0,coder.op);}  }
class C{  protected final void _skipCR() throws IOException {  if (_inputPtr < _inputEnd || loadMore()) {    if (_inputBuffer[_inputPtr] == BYTE_LF) {      ++_inputPtr;    }  }  ++_currInputRow;  _currInputRowStart=_inputPtr;}  }
class C{  protected static String encodeAttributeValue(final String attributeValue){  if (attributeValue.contains("&") || attributeValue.contains("\"") || attributeValue.contains("<")|| attributeValue.contains(">")) {    return attributeValue.replace("&","&amp;").replace("\"","&quot;").replace("<","&lt;").replace(">","&gt;");  }  return attributeValue;}  }
class C{  private String property(String classId,String key,String instanceId){  return PREFIX_OVF_PROP + makePropertyKey(classId,key,instanceId);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.MAPPED_ELEMENT__SOURCE_ELEMENT:    setSourceElement((EObject)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected void deployDatasources(String deployDir) throws IOException {  for (  DataSource ds : getDataSources()) {    String sourceFile=RESOURCE_PATH + "jboss-ds/";    if (TransactionSupport.NO_TRANSACTION.equals(ds.getTransactionSupport())) {      sourceFile+="jboss-ds-no-transaction.xml";    } else     if (TransactionSupport.LOCAL_TRANSACTION.equals(ds.getTransactionSupport())) {      sourceFile+="jboss-ds-local-transaction.xml";    } else     if (TransactionSupport.XA_TRANSACTION.equals(ds.getTransactionSupport())) {      sourceFile+="jboss-ds-xa-transaction.xml";    } else {      throw new CargoException("Unknown transaction type " + ds.getTransactionSupport());    }    FilterChain filterChain=createFilterChain();    getAntUtils().addTokenToFilterChain(filterChain,"jndiName",ds.getJndiLocation());    getAntUtils().addTokenToFilterChain(filterChain,"url",ds.getUrl());    getAntUtils().addTokenToFilterChain(filterChain,"driverClass",ds.getDriverClass());    getAntUtils().addTokenToFilterChain(filterChain,"username",ds.getUsername());    getAntUtils().addTokenToFilterChain(filterChain,"password",ds.getPassword());    getResourceUtils().copyResource(sourceFile,new File(getFileHandler().append(deployDir,"cargo-" + ds.getId() + "-ds.xml")),filterChain,"UTF-8");  }}  }
class C{  public static boolean isHttp(Span span){  return span.getBinaryAnnotation(Constants.ZIPKIN_BIN_ANNOTATION_HTTP_URL) != null;}  }
class C{  public static Intent createAppShareIntent(Context context,String message,String appDownloadLink){  final String messageShare=context.getString(R.string.share_message_format,message,appDownloadLink);  return createShareIntent(context,messageShare);}  }
class C{  public static String explode(Collection<String> collection,String delimiter){  StringBuilder sb=new StringBuilder();  if (!collection.isEmpty()) {    Iterator<String> i=collection.iterator();    sb.append(i.next());    while (i.hasNext()) {      sb.append(delimiter);      sb.append(i.next());    }  }  return sb.toString();}  }
class C{  public TurnoutOperation makeCopy(String n){  return new NoFeedbackTurnoutOperation(n,interval,maxTries);}  }
class C{  @Override protected MBeanAttributeInfo[] createMBeanAttributeInfo(){  MBeanAttributeInfo[] attributesInfo=new MBeanAttributeInfo[MAX_ATTRIBUTES_COUNT];  attributesInfo[0]=new MBeanAttributeInfo("Version",String.class.getName(),"GemFire Enterprise Version",true,false,false);  attributesInfo[1]=new MBeanAttributeInfo("RefreshInterval",String.class.getName(),"The interval (in seconds) between auto-polling for updating member & statistics resources. If this is '-1', it means the this MBean has not yet been initialized. First call to getMembers operation will initialize this MBean.",true,false,false);  attributesInfo[2]=new MBeanAttributeInfo("Id",String.class.getName(),"Identifier of the GemFire Enterprise. If this is 'N/A', it means the this MBean has not yet been initialized. First call to getMembers operation will initialize this MBean.",true,false,false);  return attributesInfo;}  }
class C{  public Preference(String key,String value){  this.key=key;  this.value=value;}  }
class C{  @NonNull public static IconifyInitializer with(@NonNull IconFontDescriptor iconFontDescriptor){  return new IconifyInitializer(iconFontDescriptor);}  }
class C{  public static Funnel<Long> longFunnel(){  return LongFunnel.INSTANCE;}  }
class C{  public final static int logBase2(double number){  int log=0;  while (number > 1) {    number=Math.floor(number / 2);    ++log;  }  return log;}  }
class C{  public static List<CoreLabel> toCharacterSequence(Sequence<IString> tokenSequence){  List<CoreLabel> charSequence=new ArrayList<>(tokenSequence.size() * 7);  for (  IString token : tokenSequence) {    String tokenStr=token.toString();    if (charSequence.size() > 0) {      CoreLabel charLabel=new CoreLabel();      charLabel.set(CoreAnnotations.TextAnnotation.class,WHITESPACE);      charLabel.set(CoreAnnotations.CharAnnotation.class,WHITESPACE);      charLabel.set(CoreAnnotations.ParentAnnotation.class,WHITESPACE);      charLabel.set(CoreAnnotations.CharacterOffsetBeginAnnotation.class,-1);      charLabel.setIndex(charSequence.size());      charSequence.add(charLabel);    }    for (int j=0, size=tokenStr.length(); j < size; ++j) {      CoreLabel charLabel=new CoreLabel();      String ch=String.valueOf(tokenStr.charAt(j));      charLabel.set(CoreAnnotations.TextAnnotation.class,ch);      charLabel.set(CoreAnnotations.CharAnnotation.class,ch);      charLabel.set(CoreAnnotations.ParentAnnotation.class,tokenStr);      charLabel.set(CoreAnnotations.CharacterOffsetBeginAnnotation.class,j);      charLabel.setIndex(charSequence.size());      charSequence.add(charLabel);    }  }  return charSequence;}  }
class C{  public static double rem(double x,double y){  double tmp=x / y;  if (MathLib.abs(tmp) <= Long.MAX_VALUE)   return x - MathLib.round(tmp) * y; else   return NaN;}  }
class C{  public boolean isShutdown(){  return shutdown;}  }
class C{  public void deleteGroupUser(int groupId,int userId,String entidad) throws Exception {  boolean commit=false;  boolean inTrans=false;  if (_logger.isDebugEnabled())   _logger.debug("deleteGroupUser");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    dbConn.beginTransaction();    inTrans=true;    deleteBase(groupId,userId,entidad);    commit=true;  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    if (inTrans)     dbConn.endTransaction(commit);    dbConn.close();  }}  }
class C{  protected AbstractSiblingSelector(short type,Selector sel,SimpleSelector simple){  nodeType=type;  selector=sel;  simpleSelector=simple;}  }
class C{  synchronized public void addEdges(final Object blocked,final Object[] running) throws DeadlockException {  if (running == blocked) {    throw new IllegalArgumentException("transaction may not wait for self");  }  if (running == null) {    throw new IllegalArgumentException("running is null");  }  if (running.length == 0) {    return;  }  final int src=lookup(blocked,true);  final int[] dst=new int[running.length];  for (int i=0; i < running.length; i++) {    dst[i]=lookup(running[i],true);    if (dst[i] == src) {      throw new IllegalArgumentException("transaction may not wait for self");    }    if (W[src][dst[i]]) {      throw new IllegalStateException("edge exists");    }  }  if (DEBUG) {    log.debug(toString());  }  final int[] order=getOrder();  backup(order);  try {    for (int i=0; i < dst.length; i++) {      if (!updateClosure(src,dst[i],true)) {        log.warn("deadlock");        if (DEBUG) {          log.debug(toString());        }        restore(order);        throw new DeadlockException("deadlock");      }    }  } catch (  DeadlockException ex) {    throw ex;  }catch (  Throwable t) {    log.error(t);    restore(order);    throw new RuntimeException(t);  }  boolean reset=false;  for (int i=0; i < dst.length; i++) {    final int tgt=dst[i];    W[src][tgt]=true;    outbound[src]++;    inbound[tgt]++;    if (outbound[src] == 1 || inbound[tgt] == 1) {      reset=true;    }  }  if (reset) {    resetOrder();  }  if (DEBUG) {    log.debug(toString());  }}  }
class C{  private void updateNotificationLargeIcon(Bitmap bitmap){  builder.setLargeIcon(bitmap);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(1,builder.build());}  }
class C{  public int cleanupEvents(String last_id,Table table){  final String tableName=table.getName();  Cursor c=null;  int count=DB_UPDATE_ERROR;synchronized (mDb) {    try {      final SQLiteDatabase db=mDb.getWritableDatabase();      db.delete(tableName,"_id <= " + last_id,null);      c=db.rawQuery("SELECT COUNT(*) FROM " + tableName,null);      c.moveToFirst();      count=c.getInt(0);    } catch (    final SQLiteException e) {      Log.e(LOGTAG,"Could not clean sent records from " + tableName + ". Re-initializing database.",e);      initDB();    }catch (    final IllegalStateException e) {      Log.e(LOGTAG,"Could not clean sent records from " + tableName + ". Re-initializing database.",e);      initDB();    } finally {      if (c != null) {        c.close();      }      mDb.close();    }  }  return count;}  }
class C{  public void testIndexPositionAndLength(){  OffsetIndex index=new DelegatingOffsetIndex(HeapBuffer.allocate(1024 * 8));  index.index(1,0);  assertEquals(index.position(1),0);  assertEquals(index.position(10),-1);  index.index(10,1234);  assertEquals(index.position(10),1234);  index.index(11,1244);  assertEquals(index.position(11),1244);  index.index(12,3456);  index.index(13,4567);  assertEquals(index.position(12),3456);  assertEquals(index.position(13),4567);}  }
class C{  private final void onUpgradeDropTablesAndCreate(final SQLiteDatabase db){  db.execSQL(SiteTable.SQL_DROP);  db.execSQL(UserInfoTable.SQL_DROP);  db.execSQL(Featured_usersTable.SQL_DROP);  db.execSQL(Category_propertiesTable.SQL_DROP);  db.execSQL(CategoriesTable.SQL_DROP);  db.execSQL(TopicsTable.SQL_DROP);  db.execSQL(TopicsDetailsTable.SQL_DROP);  db.execSQL(TopicsParticipantsTable.SQL_DROP);  db.execSQL(Suggested_topicsTable.SQL_DROP);  db.execSQL(Category_group_permissionsTable.SQL_DROP);  db.execSQL(Topics_usersTable.SQL_DROP);  db.execSQL(Topics_propertiesTable.SQL_DROP);  db.execSQL(Topic_postersTable.SQL_DROP);  onCreate(db);}  }
class C{  public static void showHideViews(final SourceControlCapabilityFlags flags){  final IWorkbenchActivitySupport workbenchActivitySupport=PlatformUI.getWorkbench().getActivitySupport();  final IActivityManager activityManager=workbenchActivitySupport.getActivityManager();  final Set enabledActivityIds=new HashSet(activityManager.getEnabledActivityIds());  if (flags != null && flags.contains(SourceControlCapabilityFlags.GIT)) {    if (enabledActivityIds.remove("com.microsoft.tfs.git.hidden")) {      workbenchActivitySupport.setEnabledActivityIds(enabledActivityIds);    }  } else {    if (enabledActivityIds.add("com.microsoft.tfs.git.hidden")) {      workbenchActivitySupport.setEnabledActivityIds(enabledActivityIds);    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof GanttRenderer)) {    return false;  }  GanttRenderer that=(GanttRenderer)obj;  if (!PaintUtilities.equal(this.completePaint,that.completePaint)) {    return false;  }  if (!PaintUtilities.equal(this.incompletePaint,that.incompletePaint)) {    return false;  }  if (this.startPercent != that.startPercent) {    return false;  }  if (this.endPercent != that.endPercent) {    return false;  }  return super.equals(obj);}  }
class C{  protected void performChange(IDocument document) throws CoreException {  Change change=null;  try {    change=getChange();    if (change != null) {      change.initializeValidationData(new NullProgressMonitor());      RefactoringStatus valid=change.isValid(new NullProgressMonitor());      if (valid.hasFatalError()) {        IStatus status=new Status(IStatus.ERROR,JavaPlugin.getPluginId(),IStatus.ERROR,valid.getMessageMatchingSeverity(RefactoringStatus.FATAL),null);        throw new CoreException(status);      } else {        Change undoChange;        boolean successful=false;        try {          undoChange=change.perform(new NullProgressMonitor());          successful=true;        }  finally {        }        if (undoChange != null) {        }      }    }  }  finally {    if (change != null) {      change.dispose();    }  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="NO_NOTIFY_NOT_NOTIFYALL",justification="There should only ever be one thread waiting for this method.") public void programmingOpReply(int value,int status){  if (log.isDebugEnabled()) {    log.debug("Programming Operation reply recieved, value is " + value + " ,status is "+ status);  }  if (status == ProgListener.ProgrammerBusy) {synchronized (CurrentStatus) {      CurrentStatus.setText(rb.getString("LV102StatusBUSY"));      if (log.isDebugEnabled()) {        log.debug("Current Status: " + rb.getString("LV102StatusBUSY"));      }      CurrentStatus.notify();    }  } else   if (status == ProgListener.OK) {    if (CurrentStatus.getText().equals(rb.getString("LV102StatusProgMode"))) {synchronized (CurrentStatus) {        CurrentStatus.setText(rb.getString("LV102StatusReadyProg"));        if (log.isDebugEnabled()) {          log.debug("Current Status: " + rb.getString("LV102StatusReadyProg"));        }        CurrentStatus.notify();      }    } else {synchronized (CurrentStatus) {        CurrentStatus.setText(rb.getString("LV102StatusWritten"));        if (log.isDebugEnabled()) {          log.debug("Current Status: " + rb.getString("LV102StatusWritten"));        }        CurrentStatus.notify();      }    }  } else {synchronized (CurrentStatus) {      CurrentStatus.setText(rb.getString("LV102StatusUnknown"));      if (log.isDebugEnabled()) {        log.debug("Current Status: " + rb.getString("LV102StatusUnknown"));      }      CurrentStatus.notify();    }  }}  }
class C{  private void storePullRequestUpdatedWebhook(final PullRequestUpdatedWebhook pruWebhook) throws ServerException {  final Set<String> factoriesIDs=pruWebhook.getFactoriesIds();  String propertyValue=String.format("%s,%s,%s,%s,%s,%s,%s",PULL_REQUEST_UPDATED_WEBHOOK.toString(),pruWebhook.getHost(),pruWebhook.getAccount(),pruWebhook.getCollection(),pruWebhook.getApiVersion(),pruWebhook.getCredentials().first,pruWebhook.getCredentials().second);  if (factoriesIDs.size() > 0) {    final String concatedFactoriesIDs=String.join(";",factoriesIDs);    propertyValue=propertyValue + "," + concatedFactoriesIDs;  }  storeProperty(pruWebhook.getId(),propertyValue,VSTS_WEBHOOKS_PROPERTIES_FILENAME);}  }
class C{  private Object convertBoolean(Object srcObj,int srcType,int trgType) throws SQLException {  if (srcType == trgType) {    return srcObj;  }  if (isNumeric(trgType) == true || (isString(trgType) == false && isBoolean(trgType) == false)) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.dtypemismt").toString());  }  try {switch (trgType) {case java.sql.Types.BIT:      Integer i=Integer.valueOf(srcObj.toString().trim());    return i.equals(0) ? Boolean.valueOf(false) : Boolean.valueOf(true);case java.sql.Types.BOOLEAN:  return Boolean.valueOf(srcObj.toString().trim());default :throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.dtypemismt").toString() + trgType);}} catch (NumberFormatException ex) {throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.dtypemismt").toString() + trgType);}}  }
class C{  private ServerSocketChannelIterator(Collection<SelectionKey> selectedKeys){  iterator=selectedKeys.iterator();}  }
class C{  @Override public void requestLocationSuccess(String locationName){  weatherUtils.requestWeather(locationName,this);  getLocation().realLocation=locationName;  DatabaseHelper.getInstance(this).insertLocation(getLocation());}  }
class C{  public boolean hasChannels(){  return mTunerChannels.size() > 0;}  }
class C{  protected void updateView(Context context,T object){}  }
class C{  public boolean isContainedWithin(Interval other){  if (other == this)   return true;  if (other == null)   return false;  return this.getStart() >= other.getStart() && this.getEnd() <= other.getEnd();}  }
class C{  @Ignore @Test public void test_DRPERSISTENCE_PRPERSISTENCE_PGSPERSISTENCE_VALIDATEQUEUE_Restart_Validate_Receiver(){  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  String diskStore1=(String)vm4.invoke(null);  String diskStore2=(String)vm5.invoke(null);  String diskStore3=(String)vm6.invoke(null);  String diskStore4=(String)vm7.invoke(null);  LogWriterUtils.getLogWriter().info("The DS are: " + diskStore1 + ","+ diskStore2+ ","+ diskStore3+ ","+ diskStore4);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  vm4.invoke(null);  LogWriterUtils.getLogWriter().info("Completed puts in the region");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Killed all the senders.");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Created back the cache");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Created the senders back from the disk store.");  AsyncInvocation inv1=vm4.invokeAsync(null);  AsyncInvocation inv2=vm5.invokeAsync(null);  AsyncInvocation inv3=vm6.invokeAsync(null);  AsyncInvocation inv4=vm7.invokeAsync(null);  try {    inv1.join();    inv2.join();    inv3.join();    inv4.join();  } catch (  InterruptedException e) {    e.printStackTrace();    fail();  }  inv1=vm4.invokeAsync(null);  inv2=vm5.invokeAsync(null);  inv3=vm6.invokeAsync(null);  inv4=vm7.invokeAsync(null);  try {    inv1.join();    inv2.join();    inv3.join();    inv4.join();  } catch (  InterruptedException e) {    e.printStackTrace();    fail();  }  startSenderInVMsAsync("ln",vm4,vm5,vm6,vm7);  LogWriterUtils.getLogWriter().info("Waiting for senders running.");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("All the senders are now running...");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm4.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm2.invoke(null);  vm3.invoke(null);}  }
class C{  public FocusControl(int clicks,String act){  ccount=clicks;  activity=act;}  }
class C{  public static void main(String[] argv){  runFilter(new NominalToBinary(),argv);}  }
class C{  private void insertSnapshot(final CSelectionSnapshot snapshot){  final CSelectionHistoryTreeNode selection=new CSelectionHistoryTreeNode(snapshot,m_stateIndex);  for (  final NaviNode node : snapshot.getSelection()) {    selection.add(new CNodeNode(node));  }  m_stateIndex++;  m_model.insertNodeInto(selection,(CSelectionHistoryTreeNode)m_model.getRoot(),0);}  }
class C{  private void incRecursion(int amount){  if (amount < 0) {    Assert.assertTrue(this.recursion - amount >= 0,amount + " cannot be subtracted from recursion " + this.recursion);  }  this.recursion+=amount;}  }
class C{  @AroundInvoke public Object ensureLdapDisabledForServiceProvider(InvocationContext context) throws Exception {  Object result=null;  Object organizationProperties=null;  Object[] parameters=context.getParameters();  for (int i=0; i < parameters.length; i++) {    if (parameters[i] instanceof LdapProperties || parameters[i] instanceof Properties) {      organizationProperties=parameters[i];    }  }  if (configService.isServiceProvider() && organizationProperties != null) {    UnsupportedOperationException e=new UnsupportedOperationException("It is forbidden to perform this operation if a OSCM acts as a SAML service provider.");    Log4jLogger logger=LoggerFactory.getLogger(context.getTarget().getClass());    logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_OPERATION_FORBIDDEN_FOR_SAML_SP);    throw e;  }  result=context.proceed();  return result;}  }
class C{  public ArrayList<ChartSet> prepareAnimation(ChartView chartView,ArrayList<float[][]> start,ArrayList<float[][]> end){  final int nSets=start.size();  final int nEntries=start.get(0).length;  mChartView=chartView;  mCurrentDuration=new long[nEntries];  if (mOrder == null) {    mOrder=new int[nEntries];    for (int i=0; i < mOrder.length; i++)     mOrder[i]=i;  }  float noOverlapDuration=mGlobalDuration / nEntries;  mDuration=(int)(noOverlapDuration + (mGlobalDuration - noOverlapDuration) * mOverlapingFactor);  Path path;  mPathMeasures=new PathMeasure[nSets][nEntries];  for (int i=0; i < nSets; i++) {    for (int j=0; j < nEntries; j++) {      path=new Path();      path.moveTo(start.get(i)[j][0],start.get(i)[j][1]);      path.lineTo(end.get(i)[j][0],end.get(i)[j][1]);      mPathMeasures[i][j]=new PathMeasure(path,false);    }  }  mInitTime=new long[nEntries];  mGlobalInitTime=System.currentTimeMillis();  long noOverlapInitTime;  for (int i=0; i < nEntries; i++) {    noOverlapInitTime=mGlobalInitTime + (i * (mGlobalDuration / nEntries));    mInitTime[mOrder[i]]=(noOverlapInitTime - ((long)(mOverlapingFactor * (noOverlapInitTime - mGlobalInitTime))));  }  mPlaying=true;  return getUpdate(mChartView.getData());}  }
class C{  public static ProjectionInfo createDefault(int rasterWidth,int rasterLength,double pixelScale){  ProjectionInfo projInfo=new ProjectionInfo();  projInfo.projCode=GeoKey.Code_CT_Orthographic;  projInfo.coordTransformCode=GeoKey.Code_CT_Orthographic;  projInfo.tiePoint=new double[]{-pixelScale * rasterWidth / 2,pixelScale * rasterLength / 2,0};  projInfo.scale=new double[]{pixelScale,pixelScale,1};  projInfo.centerLat=0;  projInfo.centerLon=0;  projInfo.naturalOriginLon=0;  projInfo.naturalOriginLat=0;  projInfo.falseEasting=0;  projInfo.falseNorthing=0;  projInfo.globe="Earth";  projInfo.rasterWidth=rasterWidth;  projInfo.rasterLength=rasterLength;  projInfo.projected=true;  projInfo.projLinearUnits="meter";  return (projInfo);}  }
class C{  public static ScriptGroupStep createScriptGroupStep(int numLoops){  return ScriptGroupStep.builder().loop(numLoops).build();}  }
class C{  public void process(Collection<JCCompilationUnit> compilationUnits){  for (  JCCompilationUnit cu : compilationUnits) {    scan(cu);  }  pass++;  for (  JCCompilationUnit cu : compilationUnits) {    scan(cu);  }}  }
class C{  public void testProcessMsg2(){  byte[] pdu=createPDU(1);  int headerLen=pdu.length - (mGsmHeader.length + mUserDataHeader.length + mMessageBody.length);  int pduType=6;  int tranId=0;  String originalPackageName=mPackageName;  String originalClassName=mClassName;  try {    mClassName="com.android.smspush.unitTests.ReceiverService";    IWapPushManager iwapman=getInterface();    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,WapPushManagerParams.APP_TYPE_SERVICE,false,false);    assertTrue((iwapman.processMessage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),createIntent(pduType,tranId)) & WapPushManagerParams.MESSAGE_HANDLED) == WapPushManagerParams.MESSAGE_HANDLED);    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);  } catch (  RemoteException e) {    assertTrue(false);  }  mPackageName=originalPackageName;  mClassName=originalClassName;}  }
class C{  public DomainObjectException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean contains(E element){  for (int x=0; x < k; x++) {    final int hash=h.hash(element,x);    if (!bitset.get(hash))     return false;  }  return true;}  }
class C{  public boolean addFrame(BufferedImage im){  if ((im == null) || !started) {    return false;  }  boolean ok=true;  try {    if (!sizeSet) {      setSize(im.getWidth(),im.getHeight());    }    image=im;    getImagePixels();    analyzePixels();    if (firstFrame) {      writeLSD();      writePalette();      if (repeat >= 0) {        writeNetscapeExt();      }    }    writeGraphicCtrlExt();    writeImageDesc();    if (!firstFrame) {      writePalette();    }    writePixels();    firstFrame=false;  } catch (  IOException e) {    ok=false;  }  return ok;}  }
class C{  public static String repeatChar(char character,int repeatCount){  StringBuffer stringBuffer=new StringBuffer(repeatCount);  for (int i=1; i <= repeatCount; i++) {    stringBuffer.append(character);  }  return stringBuffer.toString();}  }
class C{  protected MappingNode representJavaBean(Set<Property> properties,Object javaBean){  List<NodeTuple> value=new ArrayList<NodeTuple>(properties.size());  Tag tag;  Tag customTag=classTags.get(javaBean.getClass());  tag=customTag != null ? customTag : new Tag(javaBean.getClass());  MappingNode node=new MappingNode(tag,value,null);  representedObjects.put(javaBean,node);  boolean bestStyle=true;  for (  Property property : properties) {    Object memberValue=property.get(javaBean);    Tag customPropertyTag=memberValue == null ? null : classTags.get(memberValue.getClass());    NodeTuple tuple=representJavaBeanProperty(javaBean,property,memberValue,customPropertyTag);    if (tuple == null) {      continue;    }    if (((ScalarNode)tuple.getKeyNode()).getStyle() != null) {      bestStyle=false;    }    Node nodeValue=tuple.getValueNode();    if (!(nodeValue instanceof ScalarNode && ((ScalarNode)nodeValue).getStyle() == null)) {      bestStyle=false;    }    value.add(tuple);  }  if (defaultFlowStyle != FlowStyle.AUTO) {    node.setFlowStyle(defaultFlowStyle.getStyleBoolean());  } else {    node.setFlowStyle(bestStyle);  }  return node;}  }
class C{  public static <T extends BlockObject>ExportMask createExportMask(UnManagedExportMask eligibleMask,UnManagedVolume unManagedVolume,ExportGroup exportGroup,T volume,DbClient dbClient,List<Host> hosts,Cluster cluster,String exportMaskLabel) throws Exception {  _logger.info("Creating ExportMask for unManaged Mask {}",eligibleMask.getMaskName());  List<URI> initiatorUris=new ArrayList<URI>(Collections2.transform(eligibleMask.getKnownInitiatorUris(),CommonTransformerFunctions.FCTN_STRING_TO_URI));  List<Initiator> allInitiators=dbClient.queryObject(Initiator.class,initiatorUris);  List<Initiator> userAddedInis=VolumeIngestionUtil.findUserAddedInisFromExistingIniListInMask(allInitiators,eligibleMask.getId(),dbClient);  List<URI> storagePortUris=new ArrayList<URI>(Collections2.transform(eligibleMask.getKnownStoragePortUris(),CommonTransformerFunctions.FCTN_STRING_TO_URI));  Map<String,Integer> wwnToHluMap=extractWwnToHluMap(eligibleMask,dbClient);  ExportMask exportMask=ExportMaskUtils.initializeExportMaskWithVolumes(eligibleMask.getStorageSystemUri(),exportGroup,eligibleMask.getMaskName(),exportMaskLabel,allInitiators,null,storagePortUris,eligibleMask.getZoningMap(),volume,eligibleMask.getUnmanagedInitiatorNetworkIds(),eligibleMask.getNativeId(),userAddedInis,dbClient,wwnToHluMap);  if (!volume.checkInternalFlags(Flag.PARTIALLY_INGESTED)) {    _logger.info("breaking relationship between UnManagedExportMask {} and UnManagedVolume {}",eligibleMask.getMaskName(),unManagedVolume.getLabel());    unManagedVolume.getUnmanagedExportMasks().remove(eligibleMask.getId().toString());    eligibleMask.getUnmanagedVolumeUris().remove(unManagedVolume.getId().toString());  }  updateExportGroup(exportGroup,volume,dbClient,allInitiators,hosts,cluster);  return exportMask;}  }
class C{  protected void paint3DRectLighting(Graphics2D g2,int x,int y,int width,int height){  g2.setColor(Color.white);  g2.drawLine(x + 1,y + 1,x + 1,y + height - 1);  g2.drawLine(x + 1,y + 1,x + width - 1,y + 1);  g2.setColor(Color.gray);  g2.drawLine(x + 1,y + height - 1,x + width - 1,y + height - 1);  g2.drawLine(x + width - 1,y + 1,x + width - 1,y + height - 1);  g2.setColor(Color.darkGray);  g2.drawLine(x,y + height,x + width,y + height);  g2.drawLine(x + width,y,x + width,y + height);}  }
class C{  public void buildPanel(){  GridBagLayout gridBagLayout=new GridBagLayout();  gridBagLayout.columnWidths=new int[]{10,100,10};  gridBagLayout.rowHeights=new int[]{20,0,0};  gridBagLayout.columnWeights=new double[]{0.0,1.0,0.0};  gridBagLayout.rowWeights=new double[]{0.0,1.0,Double.MIN_VALUE};  setLayout(gridBagLayout);  JScrollPane scrollPane=new JScrollPane();  GridBagConstraints gbc_scrollPane=new GridBagConstraints();  gbc_scrollPane.insets=new Insets(0,0,0,5);  gbc_scrollPane.fill=GridBagConstraints.BOTH;  gbc_scrollPane.gridx=1;  gbc_scrollPane.gridy=1;  add(scrollPane,gbc_scrollPane);  tipsTextPane=new JTextPane();  scrollPane.setViewportView(tipsTextPane);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:14.539 -0500",hash_original_method="F604FBBB689DE54F8A9C0A1F2713AB23",hash_generated_method="8F3E1B44078EF0F4429406371B786882") public boolean isBridge(){  int modifiers=getMethodModifiers(declaringClass,slot);  return 1 == ((modifiers & Modifier.BRIDGE) + 0);}  }
class C{  private static boolean isForbiddenNonDeterministicCall(Method m){  if (!Properties.REPLACE_CALLS)   return false;  Class<?> declaringClass=m.getDeclaringClass();  if (declaringClass.equals(Calendar.class)) {    if (m.getName().equals("getInstance"))     return true;  }  if (declaringClass.equals(Locale.class)) {    if (m.getName().equals("getDefault"))     return true;    if (m.getName().equals("getAvailableLocales"))     return true;  }  if (declaringClass.equals(MessageFormat.class)) {    if (m.getName().equals("getLocale"))     return true;  }  if (m.getDeclaringClass().equals(Date.class)) {    if (m.getName().equals("toLocaleString"))     return true;  }  if (m.getDeclaringClass().equals(ClassLoader.class)) {    String name=m.getName();    if (name.startsWith("getSystemResource"))     return true; else     if (name.startsWith("getResource"))     return true;  }  return false;}  }
class C{  public void initStructure() throws Exception {  int nAttribute=0;  for (int iOrder=1; iOrder < m_Instances.numAttributes(); iOrder++) {    if (nAttribute == m_Instances.classIndex()) {      nAttribute++;    }  }  m_ParentSets=new ParentSet[m_Instances.numAttributes()];  for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {    m_ParentSets[iAttribute]=new ParentSet(m_Instances.numAttributes());  }}  }
class C{  public static String unhtmlSingleQuotes(final String str){  return str.replaceAll("&rsquo;","\'");}  }
class C{  public boolean hasMoreDumps(){  nextDump=parseNext();  return (nextDump != null);}  }
class C{  public SeparateChainingHashST(){  this(INIT_CAPACITY);}  }
class C{  public static void write16bit(int value,byte[] code,int index){  code[index]=(byte)(value >>> 8);  code[index + 1]=(byte)value;}  }
class C{  public static long queryNumEntries(SQLiteDatabase db,String table){  return queryNumEntries(db,table,null,null);}  }
class C{  public static IJavaModelStatus validateClasspathEntry(IJavaProject project,IClasspathEntry entry,boolean checkSourceAttachment){  throw new UnsupportedOperationException();}  }
class C{  public void debugPrint(Writer out,boolean verbose){  PrintWriter pw=Writers.printWriterFor(out);  pw.println(getClass().getName() + " {");  pw.println("  accessFlags: " + Hex.u2(accessFlags));  pw.println("  superclass: " + superclass);  pw.println("  interfaces: " + ((interfaces == null) ? "<none>" : interfaces));  pw.println("  sourceFile: " + ((sourceFile == null) ? "<none>" : sourceFile.toQuoted()));  classData.debugPrint(out,verbose);  annotationsDirectory.debugPrint(pw);  pw.println("}");}  }
class C{  public int randomValueFromClosedInterval(int min,int max,MersenneTwisterFast random){  if (max - min < 0) {    int l=0;    do     l=random.nextInt(); while (l < min || l > max);    return l;  } else   return min + random.nextInt(max - min + 1);}  }
class C{  private static int convertSpanToSparseGrid(int curIx,int span,TreeSet<Integer> indexes){  int lastIx=curIx + span;  int retSpan=1;  for (  Integer ix : indexes) {    if (ix <= curIx)     continue;    if (ix >= lastIx)     break;    retSpan++;  }  return retSpan;}  }
class C{  protected void isAttributeWellFormed(Node node){  boolean isNameWF=false;  if ((fFeatures & NAMESPACES) != 0) {    isNameWF=isValidQName(node.getPrefix(),node.getLocalName(),fIsXMLVersion11);  } else {    isNameWF=isXMLName(node.getNodeName(),fIsXMLVersion11);  }  if (!isNameWF) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"Attr",node.getNodeName()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));    }  }  String value=node.getNodeValue();  if (value.indexOf('<') >= 0) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_LT_IN_ATTVAL,new Object[]{((Attr)node).getOwnerElement().getNodeName(),node.getNodeName()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_LT_IN_ATTVAL,null,null,null));    }  }  NodeList children=node.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node child=children.item(i);    if (child == null) {      continue;    }switch (child.getNodeType()) {case Node.TEXT_NODE:      isTextWellFormed((Text)child);    break;case Node.ENTITY_REFERENCE_NODE:  isEntityReferneceWellFormed((EntityReference)child);break;default :}}}  }
class C{  @Override public void addTableModelListener(TableModelListener l){  m_Listeners.add(l);}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply m){  ((SerialListener)client).reply((SerialReply)m);}  }
class C{  public static void dump_stack(){  p(stack_to_string(new Exception()));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node clonedNode;  String cloneName;  NodeList cloneChildren;  int length;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  clonedNode=employeeNode.cloneNode(false);  cloneName=clonedNode.getNodeName();  assertEqualsAutoCase("element","strong","p",cloneName);  cloneChildren=clonedNode.getChildNodes();  length=(int)cloneChildren.getLength();  assertEquals("length",0,length);}  }
class C{  public void resetTimer(int interval){  timerDelay=interval;  stopTimer();  timer=new Timer();  timer.scheduleAtFixedRate(new ManageGraphicsTask(SimpleAnimationLayer.this),0,timerDelay);  if (timerButton != null) {    timerButton.setSelected(true);  }}  }
class C{  protected static void generateDefaultConstructor(ClassWriter cw,String superName){  MethodVisitor mv=cw.visitMethod(ACC_PUBLIC,"<init>","()V",null,null);  mv.visitCode();  mv.visitVarInsn(ALOAD,0);  mv.visitMethodInsn(INVOKESPECIAL,superName,"<init>","()V",false);  mv.visitInsn(RETURN);  mv.visitMaxs(0,0);  mv.visitEnd();}  }
class C{  public MultiplicativeOperator createMultiplicativeOperatorFromString(EDataType eDataType,String initialValue){  MultiplicativeOperator result=MultiplicativeOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public void testDeployEJBJar(){  this.fileHandler.createFile("ram:///test.jar");  EJB ejb=(EJB)factory.createDeployable("jonas5x","ram:///test.jar",DeployableType.EJB);  deployer.deploy(ejb);  assertTrue(fileHandler.exists(deployer.getDeployableDir(ejb) + "/test.jar"));}  }
class C{  public void add(final AbstractInsnNode insn){  ++size;  if (last == null) {    first=insn;    last=insn;  } else {    last.next=insn;    insn.prev=last;  }  last=insn;  cache=null;  insn.index=0;}  }
class C{  public static void addToInvokeLater(final Runnable runnable){  final Application application=ApplicationManager.getApplication();  final boolean unitTestMode=application.isUnitTestMode();  if (unitTestMode) {    UIUtil.invokeLaterIfNeeded(runnable);  } else   if (application.isHeadlessEnvironment() || application.isDispatchThread()) {    runnable.run();  } else {    TRANSFER_TO_EDT_QUEUE.offer(runnable);  }}  }
class C{  public String fieldSeparatorTipText(){  return "The character to use as separator for the columns/fields (use '\\t' for TAB).";}  }
class C{  public VisualTable(Table parent,Visualization vis,String group){  this(parent,vis,group,null,VisualItem.SCHEMA);}  }
class C{  public VOPricedEvent(VOEventDefinition eventDefinition){  if (eventDefinition == null) {    throw new IllegalArgumentException("VOEventDefinition must not be null");  }  this.eventDefinition=eventDefinition;}  }
class C{  private void fillFieldValues(){  boolean found=false;  TextNode firstNode=selectionList.get(0);  String theTextType=firstNode.getTextObject().getFontName();  int theTextSize=firstNode.getTextObject().getFontSize();  int theTextStyle=0;  if (firstNode.getTextObject().isBold()) {    theTextStyle=Font.BOLD;  }  if (firstNode.getTextObject().isItalic()) {    theTextStyle+=Font.ITALIC;  }  jtfTest.setFont(new Font(textType,textStyle,textSize));  for (int i=0; i < fList.getModel().getSize(); i++) {    fList.setSelectedIndex(i);    if (theTextType.equalsIgnoreCase((String)fList.getSelectedValue())) {      found=true;      setScrollPos(jspFont,fList,i);      break;    }  }  if (!found) {    fList.clearSelection();  }  stList.setSelectedIndex(theTextStyle);  found=false;  for (int i=0; i < sizeList.getModel().getSize(); i++) {    sizeList.setSelectedIndex(i);    if (theTextSize == Integer.parseInt((String)sizeList.getSelectedValue())) {      found=true;      setScrollPos(jspSize,sizeList,i);      break;    }  }  if (!found) {    sizeList.clearSelection();  }}  }
class C{  static private boolean isSlashEscapedChar(String s,int pos){  int numSlashes=0;  while (pos > 0 && (s.charAt(pos - 1) == '\\')) {    pos--;    numSlashes++;  }  return numSlashes % 2 != 0;}  }
class C{  @Override public MultivariateDistribution queryProb(Query.ProbQuery query){  InferenceAlgorithm algo=selectBestAlgorithm(query);  return algo.queryProb(query);}  }
class C{  private boolean hasEntityMoved(Entity ent){  int newX=MathHelper.floor_double(ent.posX);  int newY=MathHelper.floor_double(ent.posY);  int newZ=MathHelper.floor_double(ent.posZ);  if (newX != x || newY != y || newZ != z) {    prevX=x;    prevY=y;    prevZ=z;    x=newX;    y=newY;    z=newZ;    return true;  }  return false;}  }
class C{  public void clear(){  if (clear) {    GdxMaps.clearAll(components);  }}  }
class C{  public Object next(){  if (currentWord == null) {    LinkedVector vector=(LinkedVector)super.next();    while (vector != null && vector.size() == 0)     vector=(LinkedVector)super.next();    if (vector == null)     return null;    Word w=(Word)vector.get(0);    Token t=currentWord=new Token(w,null,w.partOfSpeech);    t.partOfSpeech=null;    while (w.next != null) {      w=(Word)w.next;      t.next=new Token(w,t,w.partOfSpeech);      t.partOfSpeech=null;      t=(Token)t.next;    }  }  Token result=currentWord;  currentWord=(Token)currentWord.next;  return result;}  }
class C{  public static void s(final Activity activity,@Nullable final String msg){  showToast(activity,msg,Toast.LENGTH_SHORT);}  }
class C{  public static void copyFile(File srcFile,File dstFile,String... toReplace) throws IOException {  Preconditions.checkArgument(toReplace.length % 2 == 0);  Map<String,String> replaceMap=Maps.newHashMap();  for (int i=0; i < toReplace.length / 2; ++i) {    replaceMap.put(toReplace[2 * i],toReplace[2 * i + 1]);  }  String content=Joiner.on("\n").join(Files.readLines(srcFile,StandardCharsets.UTF_8));  for (  Entry<String,String> entry : replaceMap.entrySet()) {    content=content.replace(entry.getKey(),entry.getValue());  }  mkdirs(dstFile.getParentFile());  Files.write(content.getBytes(StandardCharsets.UTF_8),dstFile);}  }
class C{  public void resetZRotations(){  rotateAngleZ=initRotateAngleZ;}  }
class C{  void registerGoogModule(Node n,String file,String namespace){  if (fileToModule.containsKey(file)) {    compiler.report(JSError.make(n,GentsErrorManager.GENTS_MODULE_PASS_ERROR,String.format("goog.module files cannot contain other goog.module or goog.provides.")));    return;  }  FileModule module=new FileModule(file,true);  module.registerNamespaceToGlobalScope(namespace);}  }
class C{  public static void registerCapabilities(){  CapabilityPigSpawner.register();  CapabilityLastUseTime.register();  CapabilityMaxHealth.register();  CapabilityHiddenBlockRevealer.register();  CapabilityLock.register();}  }
class C{  public Sobol(){  super();}  }
class C{  public void clear(Color color){  offscreen.setColor(color);  offscreen.fillRect(0,0,width,height);  offscreen.setColor(penColor);  draw();}  }
class C{  public DoubleMatrix1D like(int size){  return new SparseDoubleMatrix1D(size);}  }
class C{  public int hashCode(){  return getClass().hashCode() + (context == null ? 0 : context.hashCode()) + (needClientAuth ? Boolean.TRUE.hashCode() : Boolean.FALSE.hashCode())+ (enabledCipherSuites == null ? 0 : enabledCipherSuitesList.hashCode())+ (enabledProtocols == null ? 0 : enabledProtocolsList.hashCode());}  }
class C{  public void saveHistory(String filename) throws Exception {  FileOutputStream fos=new FileOutputStream(filename);  ObjectOutputStream oos=new ObjectOutputStream(fos);  oos.writeObject(getHistory());  oos.close();}  }
class C{  public static void signedMul(final long offset,final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions,final OperandSize firstOperandSize,final String firstOperand,final OperandSize secondOperandSize,final String secondOperand,final OperandSize resultOperandSize,final String resultOperand){  final String xoredResult=environment.getNextVariableString();  final String multResult=environment.getNextVariableString();  final String toggleMask=environment.getNextVariableString();  final String xoredSigns=environment.getNextVariableString();  long baseOffset=offset;  final Pair<String,String> abs1=generateAbs(environment,baseOffset,firstOperand,firstOperandSize,instructions);  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  final Pair<String,String> abs2=generateAbs(environment,baseOffset,secondOperand,secondOperandSize,instructions);  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  final String firstAbs=abs1.second();  final String secondAbs=abs2.second();  instructions.add(ReilHelpers.createMul(baseOffset++,firstOperandSize,firstAbs,secondOperandSize,secondAbs,resultOperandSize,multResult));  instructions.add(ReilHelpers.createXor(baseOffset++,firstOperandSize,abs1.first(),secondOperandSize,abs2.first(),firstOperandSize,xoredSigns));  instructions.add(ReilHelpers.createSub(baseOffset++,firstOperandSize,"0",firstOperandSize,xoredSigns,resultOperandSize,toggleMask));  instructions.add(ReilHelpers.createXor(baseOffset++,resultOperandSize,toggleMask,resultOperandSize,multResult,resultOperandSize,xoredResult));  instructions.add(ReilHelpers.createAdd(baseOffset++,resultOperandSize,xoredResult,firstOperandSize,xoredSigns,resultOperandSize,resultOperand));}  }
class C{  public void addFormField(String fieldName,int width,Color color){  setForeground(color);  addFormField(fieldName,width);}  }
class C{  @Override public SSLEngineResult wrap(ByteBuffer[] srcs,int offset,int len,ByteBuffer dst) throws SSLException {  if (engine_was_shutteddown) {    return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,0);  }  if ((srcs == null) || (dst == null)) {    throw new IllegalStateException("Some of the input parameters are null");  }  if (dst.isReadOnly()) {    throw new ReadOnlyBufferException();  }  if (!handshake_started) {    beginHandshake();  }  SSLEngineResult.HandshakeStatus handshakeStatus=getHandshakeStatus();  if ((session == null || engine_was_closed) && (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_UNWRAP) || handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_TASK))) {    return new SSLEngineResult(getEngineStatus(),handshakeStatus,0,0);  }  int capacity=dst.remaining();  int produced=0;  if (alertProtocol.hasAlert()) {    if (capacity < recordProtocol.getRecordSize(2)) {      return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);    }    byte[] alert_data=alertProtocol.wrap();    dst.put(alert_data);    if (alertProtocol.isFatalAlert()) {      alertProtocol.setProcessed();      if (session != null) {        session.invalidate();      }      shutdown();      return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length);    } else {      alertProtocol.setProcessed();      if (close_notify_was_sent && close_notify_was_received) {        shutdown();        return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length);      }      return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,alert_data.length);    }  }  if (capacity < recordProtocol.getMinRecordSize()) {    if (logger != null) {      logger.println("Capacity of the destination(" + capacity + ") < MIN_PACKET_SIZE("+ recordProtocol.getMinRecordSize()+ ")");    }    return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);  }  try {    if (!handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_WRAP)) {      dataStream.setSourceBuffers(srcs,offset,len);      if ((capacity < SSLRecordProtocol.MAX_SSL_PACKET_SIZE) && (capacity < recordProtocol.getRecordSize(dataStream.available()))) {        if (logger != null) {          logger.println("The destination buffer(" + capacity + ") can not take the resulting packet("+ recordProtocol.getRecordSize(dataStream.available())+ ")");        }        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);      }      if (remaining_wrapped_data == null) {        remaining_wrapped_data=recordProtocol.wrap(ContentType.APPLICATION_DATA,dataStream);      }      if (capacity < remaining_wrapped_data.length) {        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,dataStream.consumed(),0);      } else {        dst.put(remaining_wrapped_data);        produced=remaining_wrapped_data.length;        remaining_wrapped_data=null;        return new SSLEngineResult(getEngineStatus(),handshakeStatus,dataStream.consumed(),produced);      }    } else {      if (remaining_hsh_data == null) {        remaining_hsh_data=handshakeProtocol.wrap();      }      if (capacity < remaining_hsh_data.length) {        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);      } else {        dst.put(remaining_hsh_data);        produced=remaining_hsh_data.length;        remaining_hsh_data=null;        handshakeStatus=handshakeProtocol.getStatus();        if (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.FINISHED)) {          session=recordProtocol.getSession();        }      }      return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,produced);    }  } catch (  AlertException e) {    alertProtocol.alert(AlertProtocol.FATAL,e.getDescriptionCode());    engine_was_closed=true;    if (session != null) {      session.invalidate();    }    throw e.getReason();  }}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  if (requestCode == REQUEST_CODE_AUTOCOMPLETE) {    if (resultCode == RESULT_OK) {      Place place=PlaceAutocomplete.getPlace(this,data);      Log.i(TAG,"Place Selected: " + place.getName());      mPlaceDetailsText.setText(formatPlaceDetails(getResources(),place.getName(),place.getId(),place.getAddress(),place.getPhoneNumber(),place.getWebsiteUri()));      CharSequence attributions=place.getAttributions();      if (!TextUtils.isEmpty(attributions)) {        mPlaceAttribution.setText(Html.fromHtml(attributions.toString()));      } else {        mPlaceAttribution.setText("");      }    } else     if (resultCode == PlaceAutocomplete.RESULT_ERROR) {      Status status=PlaceAutocomplete.getStatus(this,data);      Log.e(TAG,"Error: Status = " + status.toString());    } else     if (resultCode == RESULT_CANCELED) {    }  }}  }
class C{  private void loadStaticField(XField staticField,Instruction obj){  if (RLE_DEBUG) {    System.out.println("[loadStaticField for field " + staticField + " in instruction "+ handle);  }  ValueNumberFrame frame=getFrame();  AvailableLoad availableLoad=new AvailableLoad(staticField);  ValueNumber[] loadedValue=frame.getAvailableLoad(availableLoad);  if (loadedValue == null) {    int numWordsProduced=getNumWordsProduced(obj);    loadedValue=getOutputValues(EMPTY_INPUT_VALUE_LIST,numWordsProduced);    frame.addAvailableLoad(availableLoad,loadedValue);    if (RLE_DEBUG) {      System.out.println("[making load of " + staticField + " available]");    }  } else {    if (RLE_DEBUG) {      System.out.println("[found available load of " + staticField + "]");    }  }  if (VERIFY_INTEGRITY) {    checkConsumedAndProducedValues(obj,EMPTY_INPUT_VALUE_LIST,loadedValue);  }  pushOutputValues(loadedValue);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0) {            z1=1;          }          if (z2 != 0) {            z2=1;          }          if (z1 + z2 == 1) {            outputFile.setValue(row,col,1);          } else {            outputFile.setValue(row,col,0);          }        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SortableAndSearchableTable(TableModel dm,TableColumnModel cm,ListSelectionModel sm){  super(dm,cm,sm);}  }
class C{  final public void StopStatement() throws ParseException {  jj_consume_token(STOP_DIRECTIVE);}  }
class C{  public static boolean canCast(ITypeBinding castType,ITypeBinding bindingToCast){  String voidName=PrimitiveType.VOID.toString();  if (castType.isAnonymous() || castType.isNullType() || voidName.equals(castType.getName())) {    throw new IllegalArgumentException();  }  if (castType == bindingToCast) {    return true;  }  if (voidName.equals(bindingToCast.getName())) {    return false;  }  if (bindingToCast.isArray()) {    if (!castType.isArray()) {      return isArrayCompatible(castType);    }    int toCastDim=bindingToCast.getDimensions();    int castTypeDim=castType.getDimensions();    if (toCastDim == castTypeDim) {      bindingToCast=bindingToCast.getElementType();      castType=castType.getElementType();      if (castType.isPrimitive() && castType != bindingToCast) {        return false;      }    } else     if (toCastDim < castTypeDim) {      return isArrayCompatible(bindingToCast.getElementType());    } else {      return isArrayCompatible(castType.getElementType());    }  }  if (castType.isPrimitive()) {    if (!bindingToCast.isPrimitive()) {      return false;    }    String boolName=PrimitiveType.BOOLEAN.toString();    return (!boolName.equals(castType.getName()) && !boolName.equals(bindingToCast.getName()));  } else {    if (bindingToCast.isPrimitive()) {      return false;    }    if (castType.isArray()) {      return isArrayCompatible(bindingToCast);    }    if (castType.isInterface()) {      if ((bindingToCast.getModifiers() & Modifier.FINAL) != 0) {        return Bindings.isSuperType(castType,bindingToCast);      } else {        return true;      }    }    if (bindingToCast.isInterface()) {      if ((castType.getModifiers() & Modifier.FINAL) != 0) {        return Bindings.isSuperType(bindingToCast,castType);      } else {        return true;      }    }    if (isJavaLangObject(castType)) {      return true;    }    return Bindings.isSuperType(bindingToCast,castType) || Bindings.isSuperType(castType,bindingToCast);  }}  }
class C{  private String buildReference(final int code,final String colorCode){  return "OUTFIT:" + code + "@"+ colorCode;}  }
class C{  @SuppressWarnings({"unchecked"}) private int binarySearch(final T targetKey){  int l=0, u=num - 1;  while (l < u) {    final int m=(l + u) >>> 1;    if (targetKey.compareTo(keys[m]) <= 0)     u=m; else     l=m + 1;  }  return l;}  }
class C{  public boolean isAnyOriginSupported(){  ensureEnabled();  return anyOriginSupported;}  }
class C{  private static float TotalIndentWithSpace(Token[][] spec,Position pos){  int posOfFirstSpaceToLeft=0;  if (pos.item > 0) {    Token tokToLeft=spec[pos.line][pos.item - 1];    posOfFirstSpaceToLeft=tokToLeft.column + tokToLeft.getWidth();  }  float spaceToLeft=Parameters.LaTeXLeftSpace(pos.toToken(spec).column - posOfFirstSpaceToLeft - 1);  return spaceToLeft + TotalIndent(spec,pos);}  }
class C{  public boolean isExplicit(){  return isInstance() || isStatic();}  }
class C{  public static int EBADRQC(){  return 56;}  }
class C{  public static Request newPut(){  return new Request(Code.PUT);}  }
class C{  public StylesheetRoot(ErrorListener errorListener) throws TransformerConfigurationException {  super(null);  setStylesheetRoot(this);  try {    m_selectDefault=new XPath("node()",this,this,XPath.SELECT,errorListener);    initDefaultRule(errorListener);  } catch (  TransformerException se) {    throw new TransformerConfigurationException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_INIT_DEFAULT_TEMPLATES,null),se);  }}  }
class C{  public static ClassLoader bootCallerClassLoader(){  return BootstrapClassLoader.getBootstrapClassLoader();}  }
class C{  public void addMapComponent(Object mapComponent){  if (mapComponent != null) {    getMapHandler().add(mapComponent);  }}  }
class C{  public UsbAccessory(String manufacturer,String model,String description,String version,String uri,String serial){  mManufacturer=manufacturer;  mModel=model;  mDescription=description;  mVersion=version;  mUri=uri;  mSerial=serial;}  }
class C{  public Dimension2DDouble(){  this(0,0);}  }
class C{  protected static void deleteFiles(){  closeDiskStores();  for (int i=0; i < dirs.length; i++) {    System.out.println("trying to delete files in " + dirs[i].getAbsolutePath());    File[] files=dirs[i].listFiles();    for (int j=0; j < files.length; j++) {      System.out.println("deleting " + files[j]);      int cnt=0;      IOException ioe=null;      while (cnt < 3) {        try {          cnt++;          FileUtil.delete(files[j]);          break;        } catch (        IOException e) {          ioe=e;          try {            Thread.sleep(1000);          } catch (          Exception igore) {          }        }      }      if (cnt >= 3) {        throw new RuntimeException("Error deleting file " + files[j],ioe);      }    }  }}  }
class C{  public N4Modifier createN4ModifierFromString(EDataType eDataType,String initialValue){  N4Modifier result=N4Modifier.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  private void parseIPv4(String name) throws IOException {  int slashNdx=name.indexOf('/');  if (slashNdx == -1) {    address=InetAddress.getByName(name).getAddress();  } else {    address=new byte[8];    byte[] mask=InetAddress.getByName(name.substring(slashNdx + 1)).getAddress();    byte[] host=InetAddress.getByName(name.substring(0,slashNdx)).getAddress();    System.arraycopy(host,0,address,0,4);    System.arraycopy(mask,0,address,4,4);  }}  }
class C{  public CMac(BlockCipher cipher,int macSizeInBits){  if ((macSizeInBits % 8) != 0) {    throw new IllegalArgumentException("MAC size must be multiple of 8");  }  if (macSizeInBits > (cipher.getBlockSize() * 8)) {    throw new IllegalArgumentException("MAC size must be less or equal to " + (cipher.getBlockSize() * 8));  }  if (cipher.getBlockSize() != 8 && cipher.getBlockSize() != 16) {    throw new IllegalArgumentException("Block size must be either 64 or 128 bits");  }  this.cipher=new CBCBlockCipher(cipher);  this.macSize=macSizeInBits / 8;  mac=new byte[cipher.getBlockSize()];  buf=new byte[cipher.getBlockSize()];  ZEROES=new byte[cipher.getBlockSize()];  bufOff=0;}  }
class C{  public ContainerHostDynamicWorkload(int id,ContainerVmRamProvisioner ramProvisioner,ContainerVmBwProvisioner bwProvisioner,long storage,List<? extends ContainerVmPe> peList,ContainerVmScheduler vmScheduler){  super(id,ramProvisioner,bwProvisioner,storage,peList,vmScheduler);  setUtilizationMips(0);  setPreviousUtilizationMips(0);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.MINGUO_DATE_TYPE,this);}  }
class C{  public boolean equals(int i){  return i == 0;}  }
class C{  public void append(StringBuffer buffer,String fieldName,boolean value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public static void transform(File srcFile,File destFile,File stylesheetFile,String outputFormat) throws IOException, FOPException {  StreamSource src=new StreamSource(srcFile);  StreamSource stylesheet=stylesheetFile == null ? null : new StreamSource(stylesheetFile);  BufferedOutputStream dest=new BufferedOutputStream(new FileOutputStream(destFile));  Fop fop=createFopInstance(dest,outputFormat);  if (fop.getUserAgent().getBaseURL() == null) {    String baseURL=null;    try {      File parentFile=new File(srcFile.getAbsolutePath()).getParentFile();      baseURL=parentFile.toURI().toURL().toExternalForm();    } catch (    Exception e) {      baseURL="";    }    fop.getUserAgent().setBaseURL(baseURL);  }  transform(src,stylesheet,fop);  dest.close();}  }
class C{  public static boolean hasFOPInstalled(){  try {    Class<?> c1=Class.forName("org.apache.fop.svg.PDFTranscoder");    Class<?> c2=Class.forName("org.apache.fop.render.ps.PSTranscoder");    Class<?> c3=Class.forName("org.apache.fop.render.ps.EPSTranscoder");    return (c1 != null) && (c2 != null) && (c3 != null);  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  long d;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Long_info cu=(CONSTANT_Long_info)cp;  d=convert() - cu.convert();  return ((d > 0) ? 1 : ((d < 0) ? -1 : 0));}  }
class C{  @Override public String modelDescription(Locale locale){  ResourceBundle rb=getResourceBundle(locale);  return rb.getString("MODEL_DESCRIPTION_EXTENDED");}  }
class C{  public FullVisitContext(FacesContext facesContext){  this(facesContext,null);}  }
class C{  private void onPaint(final PaintEvent event){  final Rectangle rect=getClientArea();  if (rect.width == 0 || rect.height == 0) {    return;  }  final Image bufferImage=new Image(getDisplay(),Math.max(1,rect.width),Math.max(1,rect.height));  final GC gc=new GC(bufferImage);  gc.setForeground(getForeground());  gc.setBackground(getBackground());  gc.fillRectangle(rect);  final Point extent=getTotalSize(this.image.getBounds().width,this.image.getBounds().height);  final int xImage=(rect.width - this.image.getBounds().width) / 2;  final int yImage=(rect.height - extent.y) / 2;  gc.drawImage(this.image,xImage,yImage);  gc.setFont(this.font);  final int xText=(rect.width - this.textSize.x) / 2;  final int yText=yImage + this.image.getBounds().height + GAP - this.textSize.y / 2;  gc.drawString(this.text,xText,yText);  if (this.animationStep != 0) {    final float zoom=1f + this.animationStep * (Math.max(extent.x,extent.y) - Math.max(this.image.getBounds().width,this.image.getBounds().height)) / MAX_NUMBER_OF_STEPS / 100f;    final int newSizeX=(int)(this.image.getBounds().width * zoom);    final int newSizeY=(int)(this.image.getBounds().height * zoom);    gc.setAntialias(SWT.ON);    gc.setInterpolation(SWT.HIGH);    gc.setAlpha(255 - 255 / MAX_NUMBER_OF_STEPS * this.animationStep);    final Point extentZoomedImage=getTotalSize(newSizeX,newSizeY);    final int xZoomedImage=(rect.width - newSizeX) / 2;    final int yZoomedImage=(rect.height - extentZoomedImage.y) / 2;    gc.drawImage(this.image,0,0,this.image.getBounds().width,this.image.getBounds().height,xZoomedImage,yZoomedImage,(int)(this.image.getBounds().width * zoom),(int)(this.image.getBounds().height * zoom));  }  gc.dispose();  event.gc.drawImage(bufferImage,0,0);  bufferImage.dispose();}  }
class C{  protected void processCellAttributes(final ObjectMap<String,String> attributes,final ObjectSet<String> processedAttributes,final Table table,final Cell<?> cell){  final LmlSyntax syntax=getParser().getSyntax();  for (  final Entry<String,String> attribute : attributes) {    if (processedAttributes.contains(attribute.key)) {      continue;    }    final LmlAttribute<?> cellAttribute=syntax.getAttributeProcessor(table,attribute.key);    if (cellAttribute instanceof AbstractCellLmlAttribute) {      ((AbstractCellLmlAttribute)cellAttribute).process(getParser(),getParent(),table,cell,attribute.value);    } else {      if (!isInternalMacroAttribute(attribute.key)) {        getParser().throwErrorIfStrict(getTagName() + " macro can process only cell attributes. Found unknown or invalid attribute: " + attribute.key);      }    }  }}  }
class C{  public void removeSubscriptionFromStore(final String topic,final String clientId){  subscriptionsStore.removeSubscription(topic,clientId);  topics.remove(topic);}  }
class C{  public boolean isSubtract(){  return this.constructionElement.getAttributeNS(null,XPath2FilterContainer._ATT_FILTER).equals(XPath2FilterContainer._ATT_FILTER_VALUE_SUBTRACT);}  }
class C{  private boolean hasLogTypeFilters(){  return logDisabledTypesMask != 0;}  }
class C{  private void shouldWriteToFile(String report) throws IOException {  Scanner scanner=new Scanner(System.in);  System.out.println("\nIf you would like the results written to a file (recommended), type the full desired path (/Users/admin/Desktop), otherwise type 'n'");  String output_path=scanner.next();  if (output_path.equals("n")) {    System.out.println("\nThanks for using the Health Check Tool.");  } else {    SimpleDateFormat df=new SimpleDateFormat("dd.MM.yy");    Date dateobj=new Date();    try {      PrintWriter out=new PrintWriter(output_path + "/health_check_results_" + df.format(dateobj)+ ".txt");      out.println(report);      out.close();    } catch (    Exception e) {      System.out.println("\nUnable to write to file, trying again.");      shouldWriteToFile(report);    }    System.out.println("\nResults written to file.");  }}  }
class C{  public Version(String versionString){  versString=versionString;  parsed=false;  parse();}  }
class C{  private void mapPoints(float[] dst,int dstIndex,float[] src,int srcIndex,int pointCount){  final int count=pointCount * 2;  float[] tmpDest=dst;  boolean inPlace=dst == src;  if (inPlace) {    tmpDest=new float[dstIndex + count];  }  for (int i=0; i < count; i+=2) {    float x=mValues[0] * src[i + srcIndex] + mValues[1] * src[i + srcIndex + 1] + mValues[2];    float y=mValues[3] * src[i + srcIndex] + mValues[4] * src[i + srcIndex + 1] + mValues[5];    tmpDest[i + dstIndex]=x;    tmpDest[i + dstIndex + 1]=y;  }  if (inPlace) {    System.arraycopy(tmpDest,dstIndex,dst,dstIndex,count);  }}  }
class C{  public void registerRepository(String name,Class<? extends Repository> repositoryType,Class<? extends IndexShardRepository> shardRepositoryType){  repositoryTypes.registerExtension(name,repositoryType);  shardRepositoryTypes.registerExtension(name,shardRepositoryType);}  }
class C{  @Override public void run(){  run(startState(),endState());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Map<String,Object> processInputs(Map<String,Object> inputs,CWLPortProcessorCallback portProcessor) throws CWLPortProcessorException {  return processValues(inputs,job.getApp().getInputs(),CWLInputPort.class,portProcessor);}  }
class C{  public static PropertyValuesHolder ofInt(String propertyName,int... values){  return new IntPropertyValuesHolder(propertyName,values);}  }
class C{  public static void error(){  throw new AssertionError();}  }
class C{  public boolean mousePressed(MouseEvent e){  Debug.message("eomg","GraphicStateMachine|unselected state|mousePressed");  GrabPoint mp=graphic.getMovingPoint(e);  if (mp == null) {    if (graphic.isMouseEventTouching(e)) {      if (graphic.getCanGrabGraphic()) {        Debug.message("eomg","GraphicStateMachine|unselected state|mousePressed - graphic held");        graphic.getStateMachine().setEdit();        graphic.fireEvent(EOMGCursors.EDIT,"",EOMGEvent.EOMG_EDIT);        graphic.move(e);      } else {        graphic.getStateMachine().setSelected();        graphic.fireEvent(EOMGCursors.DEFAULT,"",EOMGEvent.EOMG_SELECTED);      }      graphic.redraw(e,true);    }  } else {    graphic.getStateMachine().setEdit();    graphic.fireEvent(EOMGCursors.EDIT,"",EOMGEvent.EOMG_EDIT);    graphic.redraw(e,true);  }  return getMapMouseListenerResponse();}  }
class C{  public PrintStream format(Locale l,String format,Object... args){  try {synchronized (this) {      ensureOpen();      if ((formatter == null) || (formatter.locale() != l))       formatter=new Formatter(this,l);      formatter.format(l,format,args);    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }  return this;}  }
class C{  public static void main(String[] args){  ScrollPaneDemo demo=new ScrollPaneDemo(null);  demo.mainImpl();}  }
class C{  public MethodInfo[] findMethods(String name){  return (isMissing ? null : getDetails().findMethods(name));}  }
class C{  public DragSortController(DragSortListView dslv,int dragHandleId,int dragInitMode,int removeMode){  super(dslv);  mDslv=dslv;  mDetector=new GestureDetector(dslv.getContext(),this);  mFlingRemoveDetector=new GestureDetector(dslv.getContext(),mFlingRemoveListener);  mFlingRemoveDetector.setIsLongpressEnabled(false);  mTouchSlop=ViewConfiguration.get(dslv.getContext()).getScaledTouchSlop();  mDragHandleId=dragHandleId;  setRemoveMode(removeMode);  setDragInitMode(dragInitMode);  mOrigFloatAlpha=dslv.getFloatAlpha();}  }
class C{  public boolean animateTo(int target,int rate){  if (mFirstTime) {    mFirstTime=false;    mProperty.setValue(mObject,target);    mCurrentValue=target;    return true;  }  if (!mAnimating || rate > mRate || (target <= mCurrentValue && mCurrentValue <= mTargetValue) || (mTargetValue <= mCurrentValue && mCurrentValue <= target)) {    mRate=rate;  }  final boolean changed=(mTargetValue != target);  mTargetValue=target;  if (!mAnimating && target != mCurrentValue) {    mAnimating=true;    mAnimatedValue=mCurrentValue;    mLastFrameTimeNanos=System.nanoTime();    postCallback();  }  return changed;}  }
class C{  public static <T>T notNull(final T argument,final String name){  if (argument == null) {    throw new IllegalArgumentException(name + " should not be null!");  }  return argument;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.517 -0400",hash_original_method="5163CA2ED3AD9C66F2BDAFB902590115",hash_generated_method="2176D445272406688DBDA5C0282AE3E2") public void clear(){  m.clear();}  }
class C{  @CloudUnitSecurable @ResponseBody @RequestMapping(value="/{applicationName}/container/{containerName}/env",method=RequestMethod.GET) public List<EnvUnit> displayEnv(@PathVariable String applicationName,@PathVariable String containerName) throws ServiceException, CheckException {  List<EnvUnit> envUnits=null;  try {    User user=this.authentificationUtils.getAuthentificatedUser();    String content=dockerService.execCommand(containerName,RemoteExecAction.GATHER_CU_ENV.getCommand() + " " + user.getLogin());    logger.debug(content);    envUnits=EnvUnitFactory.fromOutput(content);  } catch (  FatalDockerJSONException e) {    throw new ServiceException(applicationName + ", " + containerName,e);  }  return envUnits;}  }
class C{  public static <K,V,M extends Map<K,V>>M addAll(M m,Map.Entry<K,V>... entries){  for (  Map.Entry<K,V> e : entries)   m.put(e.getKey(),e.getValue());  return m;}  }
class C{  public Set<T> keySet(){  return map.keySet();}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    if (isClosed()) {      throw new IOException("Stream closed");    }    if (pos == count) {      return -1;    }    return buf[pos++];  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.513 -0400",hash_original_method="448F37F06446E11947B66F9E829FA97B",hash_generated_method="03E758798E9DAFE7951BC7E492BB9453") public ConcurrentSkipListSet(SortedSet<E> s){  m=new ConcurrentSkipListMap<E,Object>(s.comparator());  addAll(s);}  }
class C{  public PersonalityInsights(String username,String password){  this();  setUsernameAndPassword(username,password);}  }
class C{  public boolean syncRemoveNetwork(AsyncChannel channel,int networkId){  Message resultMsg=channel.sendMessageSynchronously(CMD_REMOVE_NETWORK,networkId);  boolean result=(resultMsg.arg1 != FAILURE);  resultMsg.recycle();  return result;}  }
class C{  public static RefactoringStatus createInfoStatus(String msg,RefactoringStatusContext context){  return createStatus(INFO,msg,context,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  public Lambda(Node node,String variableName,Class<?> variableType){  this(node,new String[]{variableName},new Class<?>[]{variableType});}  }
class C{  public CompositeResultData toSelectCommandResult(){  if (errorString != null) {    CompositeResultData data=ResultBuilder.createCompositeResultData();    SectionResultData section=data.addSection();    section.addData("Message",errorString);    section.addData(RESULT_FLAG,operationCompletedSuccessfully);    return data;  } else {    CompositeResultData data=ResultBuilder.createCompositeResultData();    SectionResultData section=data.addSection();    TabularResultData table=section.addTable();    section.addData(RESULT_FLAG,operationCompletedSuccessfully);    if (infoString != null) {      section.addData("Message",infoString);    }    if (inputQuery != null) {      if (this.limit != -1) {        section.addData("Limit",this.limit);      }      if (this.selectResult != null) {        section.addData(NUM_ROWS,this.selectResult.size());        if (this.queryTraceString != null)         section.addData("Query Trace",this.queryTraceString);        buildTable(table,0,selectResult.size());      }    }    return data;  }}  }
class C{  public RelativeLayoutStick isInRelative(){  return (RelativeLayoutStick)isInLayout(RelativeLayout.LayoutParams.class,true,0,0);}  }
class C{  public static double[] stdDevsOfRows(double[][] matrix,double[] means){  double[] stds=new double[matrix.length];  for (int r=0; r < matrix.length; r++) {    double sumSqs=0.0;    for (int c=0; c < matrix[r].length; c++) {      sumSqs+=(matrix[r][c] - means[r]) * (matrix[r][c] - means[r]);    }    stds[r]=sumSqs / (double)(matrix[r].length - 1);    stds[r]=Math.sqrt(stds[r]);  }  return stds;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:12.211 -0500",hash_original_method="7690A99261A8975258177F18AE9D9AC2",hash_generated_method="504645D7D0A5E34D407422596D5F7DD4") public UnknownServiceException(String detailMessage){  super(detailMessage);}  }
class C{  public DifferentialEvolutionSelection(){  super();}  }
class C{  public static void writeEdges(final SQLProvider provider,final List<INaviEdge> edges) throws SQLException {  Preconditions.checkNotNull(provider,"IE02253: Provider argument can not be null");  Preconditions.checkNotNull(edges,"IE02254: Edges argument can not be null");  for (  final INaviEdge edge : edges) {    Preconditions.checkArgument(edge.inSameDatabase(provider),"IE02255: Edge list contains an edge that is not part of this database");  }  if (edges.isEmpty()) {    return;  }  final CConnection connection=provider.getConnection();  fillEdgesTable(connection,edges);  fillEdgepathsTable(connection,edges);}  }
class C{  public synchronized void removeDataStatusListener(DataStatusListener l){  m_mTab.removeDataStatusListener(l);}  }
class C{  public void showLayerPalettes(){  for (  Component comp : getComponents()) {    Layer l=(Layer)comp;    if (l.autoPalette) {      l.showPalette();    }  }}  }
class C{  private void initComposite(){  if (showLabel) {    GridLayout gl=new GridLayout(2,false);    this.setLayout(gl);    new Label(this,SWT.NONE).setText("Enter date:");  } else {    GridLayout gl=new GridLayout(1,false);    this.setLayout(gl);  }  cDateTime=new CDateTime(this,CDT.BORDER | CDT.DROP_DOWN | CDT.TAB_FIELDS);  cDateTime.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  cDateTime.setSelection(new Date());}  }
class C{  String parseToken(boolean quoted) throws JasperException {  StringBuilder stringBuffer=new StringBuilder();  skipSpaces();  stringBuffer.setLength(0);  if (!hasMoreInput()) {    return "";  }  int ch=peekChar();  if (quoted) {    if (ch == '"' || ch == '\'') {      char endQuote=ch == '"' ? '"' : '\'';      ch=nextChar();      for (ch=nextChar(); ch != -1 && ch != endQuote; ch=nextChar()) {        if (ch == '\\')         ch=nextChar();        stringBuffer.append((char)ch);      }      if (ch == -1) {        err.jspError(mark(),"jsp.error.quotes.unterminated");      }    } else {      err.jspError(mark(),"jsp.error.attr.quoted");    }  } else {    if (!isDelimiter()) {      do {        ch=nextChar();        if (ch == '\\') {          if (peekChar() == '"' || peekChar() == '\'' || peekChar() == '>' || peekChar() == '%')           ch=nextChar();        }        stringBuffer.append((char)ch);      } while (!isDelimiter());    }  }  return stringBuffer.toString();}  }
class C{  @Override public Transaction makeTransaction(byte[] payloadBytes,int offset,int length,byte[] hash) throws ProtocolException {  Transaction tx=new Transaction(params,payloadBytes,offset,null,this,length);  if (hash != null)   tx.setHash(Sha256Hash.wrapReversed(hash));  return tx;}  }
class C{  public void reverseAllEntries() throws IOException, ServiceException {  ListQuery query=new ListQuery(listFeedUrl);  query.setReverse(true);  ListFeed feed=service.query(query,ListFeed.class);  for (  ListEntry entry : feed.getEntries()) {    printAndCacheEntry(entry);  }}  }
class C{  private static IgniteSet<String> initializeSet(Ignite ignite,String setName) throws IgniteException {  CollectionConfiguration setCfg=new CollectionConfiguration();  setCfg.setAtomicityMode(TRANSACTIONAL);  setCfg.setCacheMode(PARTITIONED);  IgniteSet<String> set=ignite.set(setName,setCfg);  for (int i=0; i < 10; i++)   set.add(Integer.toString(i));  System.out.println("Set size after initializing: " + set.size());  return set;}  }
class C{  private void cardCheck(String key) throws FitsException {  if (!this.iter.hasNext()) {    throw new FitsException("Header terminates before " + key);  }  HeaderCard card=this.iter.next();  if (!card.getKey().equals(key)) {    throw new FitsException("Key " + key + " not found where expected."+ "Found "+ card.getKey());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:39.982 -0500",hash_original_method="75C524432F954C01B0149630CE54DDB4",hash_generated_method="971A11FE9A821D05203024F158BC4E21") public Builder detectDiskReads(){  return enable(DETECT_DISK_READ);}  }
class C{  public static DigestCalculator createDigestCalculator(String algorithm) throws OperatorCreationException {  return createDigestCalculator(getAlgorithmIdentifier(algorithm));}  }
class C{  public static boolean testAabSphere(float minX,float minY,float minZ,float maxX,float maxY,float maxZ,float centerX,float centerY,float centerZ,float radiusSquared){  float radius2=radiusSquared;  if (centerX < minX) {    float d=(centerX - minX);    radius2-=d * d;  } else   if (centerX > maxX) {    float d=(centerX - maxX);    radius2-=d * d;  }  if (centerY < minY) {    float d=(centerY - minY);    radius2-=d * d;  } else   if (centerY > maxY) {    float d=(centerY - maxY);    radius2-=d * d;  }  if (centerZ < minZ) {    float d=(centerZ - minZ);    radius2-=d * d;  } else   if (centerZ > maxZ) {    float d=(centerZ - maxZ);    radius2-=d * d;  }  return radius2 >= 0.0f;}  }
class C{  public XMLWriter(OutputStream outputStream,String charEncoding) throws UnsupportedEncodingException {  _charEncoding=charEncoding;  _writer=new OutputStreamWriter(outputStream,_charEncoding);}  }
class C{  public static final double scalb(double x,int n){  int k, hx, lx;  hx=(int)(Double.doubleToLongBits(x) >>> HI_SHIFT);  lx=(int)(Double.doubleToLongBits(x) & LO_MASK);  k=(hx & 0x7ff00000) >> 20;  if (k == 0) {    if ((lx | (hx & 0x7fffffff)) == 0) {      return x;    }    x*=two54;    hx=(int)(Double.doubleToLongBits(x) >>> HI_SHIFT);    k=((hx & 0x7ff00000) >> 20) - 54;    if (n < -50000) {      return tiny * x;    }  }  if (k == 0x7ff) {    return x + x;  }  k=k + n;  if (k > 0x7fe) {    return huge * copySign(huge,x);  }  if (k > 0) {    x=Double.longBitsToDouble(((long)((int)(hx & 0x800fffff) | (k << 20)) << HI_SHIFT) | (Double.doubleToLongBits(x) & LO_MASK));    return x;  }  if (k <= -54) {    if (n > 50000) {      return huge * copySign(huge,x);    } else {      return tiny * copySign(tiny,x);    }  }  k+=54;  x=Double.longBitsToDouble(((long)((int)(hx & 0x800fffff) | (k << 20)) << HI_SHIFT) | (Double.doubleToLongBits(x) & LO_MASK));  return x * twom54;}  }
class C{  public boolean isRenderPercentageOnTop(){  return renderPercentageOnTop;}  }
class C{  protected static String dockerMachineCertsDirectoryPath(boolean isLinux,@NotNull Map<String,String> env){  if (isLinux) {    return null;  }  String certPath=env.get(DOCKER_CERT_PATH_PROPERTY);  if (certPath != null) {    if (new File(certPath).exists()) {      return certPath;    } else {      LOG.error(String.format("The directory provided by property %s doesn't exists. Returning default value",certPath));    }  }  return DEFAULT_DOCKER_MACHINE_CERTS_DIR;}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  try {    int n;    while ((n=inf.inflate(b,off,len)) == 0) {      if (inf.finished() || inf.needsDictionary()) {        reachEOF=true;        return -1;      }      if (inf.needsInput()) {        fill();      }    }    return n;  } catch (  DataFormatException e) {    String s=e.getMessage();    throw new ZipException(s != null ? s : "Invalid ZLIB data format");  }}  }
class C{  public boolean isFailure(final int exitValue){  if (this.exitValues == null) {    return false;  } else   if (this.exitValues.length == 0) {    return this.launcher.isFailure(exitValue);  } else {    for (int i=0; i < this.exitValues.length; i++) {      if (this.exitValues[i] == exitValue) {        return false;      }    }  }  return true;}  }
class C{  @Override public V put(final K k,final V v){  try {    final WeakReference<V> ref=newWeakRef(k,v,referenceQueue);    final WeakReference<V> oldRef=map.put(k,ref);    final V oldVal=oldRef == null ? null : oldRef.get();    if (queue != null) {synchronized (queue) {        if (queue.add(v) && DEBUG) {          log.debug("put: key=" + k + ", val="+ v);        }      }    }    didUpdate(k,ref,oldRef);    return oldVal;  }  finally {    removeClearedEntries();  }}  }
class C{  public static boolean isCastableToArray(Object o){  if (isArray(o))   return true; else   if (o instanceof Struct) {    Struct sct=(Struct)o;    Iterator<Key> it=sct.keyIterator();    while (it.hasNext()) {      if (!isInteger(it.next(),false))       return false;    }    return true;  }  return false;}  }
class C{  public void printGraphvizXferPNG(LogicCircuit lc,String outfile){  String gvText="#GRAPHVIZ_OUTPUT \n";  gvText+="digraph{ \n";  gvText+="rankdir=LR; \n";  gvText+="splines=ortho; \n";  for (int i=0; i < lc.get_output_gates().size(); ++i) {    gvText+=lc.get_output_gates().get(i).Name + "[shape=none,label=\"" + lc.get_output_gates().get(i).Name+ "\"]; \n";  }  for (int i=lc.get_Gates().size() - 1; i >= 0; --i) {    Gate g=lc.get_Gates().get(i);    if (g.Type == Gate.GateType.OUTPUT || g.Type == Gate.GateType.OUTPUT_OR) {      continue;    }    String shape=g.Name;    if (g.Type == Gate.GateType.INPUT) {      gvText+=g.Name + "[shape=none,label=\"" + shape+ "\"]; \n";    } else     if (g.Type == Gate.GateType.NOT || g.Type == Gate.GateType.NOR || g.Type == Gate.GateType.AND) {      String image_location="\"" + lc.get_assignment_name() + "_xfer_model_"+ g.Name+ ".png"+ "\"";      gvText+=g.Name + "[fixedsize=true,height=1.0,width=1.0,label=\"\",shape=none,image=" + image_location+ "]; \n";    } else {      String g_logics="\\n" + BooleanLogic.logicString(g.get_logics());      String labelscore="";      if (g.get_scores().get_score() != -1.0) {        labelscore="\\n" + String.format("%5.4f",g.get_scores().get_score());      }      gvText+=g.Name + "[shape=box,label=\"" + shape+ labelscore+ g_logics+ "\"]; \n";    }  }  for (int i=0; i < lc.get_Wires().size(); ++i) {    Wire w=lc.get_Wires().get(i);    String child=w.To.Name;    String parent=w.From.Name;    gvText+=child + " ->" + parent+ " ; \n";  }  gvText+="} \n";  Util.fileWriter(_output_directory + outfile,gvText,false);}  }
class C{  private String parseBytes(byte[] data){  int year=(((data[0] & 0x3F) << 6) + ((data[1] >> 2) & 0x3F));  int month=(((data[1] & 0x03) << 2) | ((data[2] >> 6) & 0x03));  int day=((data[2] >> 1) & 0x1F);  int hour=(((data[2] & 0x01) << 4) | ((data[3] >> 4) & 0x0F));  int min=(((data[3] & 0x0F) << 2) | ((data[4] >> 6) & 0x03));  int sec=(data[4] & 0x3F);  String timezone="";  char c=(char)data[5];  if (Character.isUpperCase(c)) {    timezone=new StringBuilder(c).toString();  }  String res=String.format("%04d%02d%02dT%02d%02d%02d%s",year,month,day,hour,min,sec,timezone);  return res;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  Diff other=(Diff)obj;  if (operation != other.operation) {    return false;  }  if (text == null) {    if (other.text != null) {      return false;    }  } else   if (!text.equals(other.text)) {    return false;  }  return true;}  }
class C{  public TradelogReport findByTradelogDetail(Portfolio portfolio,ZonedDateTime start,ZonedDateTime end,boolean filter,String symbol){  EntityManager entityManagerLocal=EntityManagerHelper.getLocalEntityManager();  try {    entityManagerLocal.getTransaction().begin();    Query queryDetail=entityManagerLocal.createNativeQuery(TradelogDetail.getSQLString(),"TradelogDetailMapping");    queryDetail.setParameter("idPortfolio",portfolio.getIdPortfolio());    queryDetail.setParameter("start",TradingCalendar.getFormattedDate(start,DATE_FORMAT));    queryDetail.setParameter("end",TradingCalendar.getFormattedDate(end,DATE_FORMAT));    queryDetail.setParameter("filter",filter);    queryDetail.setParameter("symbol",symbol);    TradelogReport tradelogReport=new TradelogReport();    for (    Object item : queryDetail.getResultList()) {      tradelogReport.add((TradelogDetail)item);    }    entityManagerLocal.getTransaction().commit();    return tradelogReport;  } catch (  Exception re) {    if ((entityManagerLocal.getTransaction() != null) && entityManagerLocal.getTransaction().isActive()) {      entityManagerLocal.getTransaction().rollback();    }    throw re;  } finally {    entityManagerLocal.close();  }}  }
class C{  private static int sumRowSumLtGeColSumGtLe(double value,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int ix=Arrays.binarySearch(bv,value);  int cnt=0;  if (ix >= 0) {    while (value == bv[ix++] && ix < bv.length)     ;    ix+=(value == bv[bv.length - 1]) ? 1 : 0;  }  cnt=bv.length - Math.abs(ix) + 1;  if (bOp.fn instanceof LessThanEquals || bOp.fn instanceof GreaterThanEquals)   cnt=bv.length - cnt;  return cnt;}  }
class C{  public void append(String str){  Document doc=getDocument();  if (doc != null) {    try {      doc.insertString(doc.getLength(),str,null);    } catch (    BadLocationException e) {    }  }}  }
class C{  private void validateAttributes(Class type) throws Exception {  Set<String> keys=attributes.keySet();  for (  String name : keys) {    Label label=attributes.get(name);    if (label == null) {      throw new AttributeException("Ordered attribute '%s' does not exist in %s",name,type);    }    if (expression != null) {      expression.getAttribute(name);    }  }}  }
class C{  private void intersectionMatrix(int[][] res,ArrayList<? extends DBIDs> partsx,ArrayList<? extends DBIDs> partsy,int gridsize){  for (int x=0; x < gridsize; x++) {    final DBIDs px=partsx.get(x);    final int[] rowx=res[x];    for (int y=0; y < gridsize; y++) {      rowx[y]=DBIDUtil.intersectionSize(px,partsy.get(y));    }  }}  }
class C{  public static final void writeMapXml(Map val,OutputStream out) throws XmlPullParserException, java.io.IOException {  XmlSerializer serializer=new FastXmlSerializer();  serializer.setOutput(out,"utf-8");  serializer.startDocument(null,true);  serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);  writeMapXml(val,null,serializer);  serializer.endDocument();}  }
class C{  private void addLinksFromPattern(Link linkWithPattern){  Pattern pattern=linkWithPattern.getPattern();  Matcher m=pattern.matcher(text);  while (m.find()) {    links.add(new Link(linkWithPattern).setText(m.group()));  }}  }
class C{  private void updateSensorNodes(){  sensorNodes.clear();  Collection<?> allNodes=getLayer().getAllNodes();  for (Iterator<?> i=allNodes.iterator(); i.hasNext(); ) {    PNode node=(PNode)i.next();    if (node instanceof SensorNode) {      SensorNode sensorNode=(SensorNode)node;      sensorNodes.put(sensorNode.getSensor(),sensorNode);    }  }}  }
class C{  boolean isPersisted(int id){  int bit=1 << id;  return (persisted & bit) != 0;}  }
class C{  public void handleNoSelection(){  LAUNCH_ACTION.setEnabled(false);  LAUNCH_OS_ACTION.setEnabled(false);  OPEN_IN_FOLDER_ACTION.setEnabled(false);  SEND_TO_FRIEND_ACTION.setEnabled(false);  CREATE_TORRENT_ACTION.setEnabled(false);  DELETE_ACTION.setEnabled(false);  SEND_TO_ITUNES_ACTION.setEnabled(false);}  }
class C{  public static void handleException(Exception ex,StackLogger stackLogger){  System.err.println("Unexpected internal error FIXME!! " + ex.getMessage());  stackLogger.logError("UNEXPECTED INTERNAL ERROR FIXME " + ex.getMessage());  ex.printStackTrace();  stackLogger.logException(ex);  throw new RuntimeException("Unexpected internal error FIXME!! " + ex.getMessage(),ex);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj.getClass().equals(this.getClass()))) {    return false;  }  OverwritableHistogramDataset that=(OverwritableHistogramDataset)obj;  if (!ObjectUtilities.equal(this.type,that.type)) {    return false;  }  if (!ObjectUtilities.equal(this.dataMap,that.dataMap)) {    return false;  }  return true;}  }
class C{  private boolean isSelectionSelected(Object source){  boolean retValue=false;  if (source instanceof JCheckBox)   retValue=((JCheckBox)source).isSelected(); else   if (source instanceof JRadioButton)   retValue=((JRadioButton)source).isSelected(); else   log.log(Level.SEVERE,"Not valid - " + source);  return retValue;}  }
class C{  public static int parseInt(String string,int radix) throws NumberFormatException {  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {    throw new NumberFormatException("Invalid radix: " + radix);  }  if (string == null) {    throw invalidInt(string);  }  int length=string.length(), i=0;  if (length == 0) {    throw invalidInt(string);  }  boolean negative=string.charAt(i) == '-';  if (negative && ++i == length) {    throw invalidInt(string);  }  return parse(string,i,radix,negative);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testDataIsFetchedFromLocal() throws Throwable {  ListView listView=alertDialog.getListView();  View child=listView.getChildAt(0);  clickAndValidate(child);}  }
class C{  public PartitionedRegionException(String msg){  super(msg);}  }
class C{  public static void writeFully(FileChannel file,long pos,ByteBuffer src){  try {    int off=0;    do {      int len=file.write(src,pos + off);      off+=len;    } while (src.remaining() > 0);  } catch (  IOException e) {    throw newIllegalStateException(ERROR_WRITING_FAILED,"Writing to {0} failed; length {1} at {2}",file,src.remaining(),pos,e);  }}  }
class C{  public long term(long index){  assertSegmentOpen();  checkRange(index);  long offset=relativeOffset(index);  return termIndex.lookup(offset);}  }
class C{  public void notifyValue(XScrollbar obj,int type,int value,boolean isAdjusting){  Scrollbar sb=(Scrollbar)target;  sb.setValue(value);  postEvent(new AdjustmentEvent(sb,AdjustmentEvent.ADJUSTMENT_VALUE_CHANGED,type,value,isAdjusting));}  }
class C{  public List<JCCase> translateCases(List<JCCase> trees){  for (List<JCCase> l=trees; l.nonEmpty(); l=l.tail)   l.head=translate(l.head);  return trees;}  }
class C{  private String commandString(){switch (this.command) {case Audio.CMD_INIT_FACTORY:    return "Initialise Factory (0x" + Integer.toHexString(this.command) + ")";case Audio.CMD_LOAD_SOUND:  return "Load Sound (0x" + Integer.toHexString(this.command) + ")";case Audio.CMD_BIND_BUFFER:return "Bind buffer (0x" + Integer.toHexString(this.command) + ")";case Audio.CMD_QUEUE_BUFFERS:return "Queue buffers (0x" + Integer.toHexString(this.command) + ")";case Audio.CMD_UNQUEUE_BUFFERS:return "Unqueue buffers (0x" + Integer.toHexString(this.command) + ")";case Audio.CMD_PLAY:return "Play (0x" + Integer.toHexString(this.command) + ")";case Audio.CMD_PAUSE:return "Pause (0x" + Integer.toHexString(this.command) + ")";case Audio.CMD_PLAY_TOGGLE:return "Play/Stop toggle (0x" + Integer.toHexString(this.command) + ")";case Audio.CMD_PAUSE_TOGGLE:return "Pause/Resume toggle (0x" + Integer.toHexString(this.command) + ")";case Audio.CMD_RESUME:return "Resume (0x" + Integer.toHexString(this.command) + ")";case Audio.CMD_STOP:return "Stop (0x" + Integer.toHexString(this.command) + ")";case Audio.CMD_REWIND:return "Rewind (0x" + Integer.toHexString(this.command) + ")";case Audio.CMD_FADE_IN:return "Fade-in (0x" + Integer.toHexString(this.command) + ")";case Audio.CMD_FADE_OUT:return "Fade-out (0x" + Integer.toHexString(this.command) + ")";default :return "Unknown (0x" + Integer.toHexString(this.command) + ")";}}  }
class C{  private static BigDecimal toBigDecimal(byte[] bytes,int offset,final int length){  if (bytes == null || length < SIZEOF_INT + 1 || (offset + length > bytes.length)) {    return null;  }  int scale=toInt(bytes,0);  byte[] tcBytes=new byte[length - SIZEOF_INT];  System.arraycopy(bytes,SIZEOF_INT,tcBytes,0,length - SIZEOF_INT);  return new BigDecimal(new BigInteger(tcBytes),scale);}  }
class C{  static synchronized Collator forScheme(final CollationSpecifier specifier){  RuleBasedCollator collator=(RuleBasedCollator)sourceMap.get(specifier.toString());  if (collator == null) {    collator=specifier.createCollator();    sourceMap.put(specifier.toString(),collator);  }  collator=collator.cloneAsThawed();  return collator;}  }
class C{  public Http(){  super(LOG);}  }
class C{  public LinkGraphicList(Link link,LinkOMGraphicList graphicList) throws IOException, EOFException {  this(link,graphicList,(Projection)null,(OMGridGenerator)null);}  }
class C{  public void disconnect() throws IOException {  __initDefaults();  super.disconnect();}  }
class C{  public BinaryDecoder(ByteBuffer buf){  setReadable(new ByteBufferReadable(buf));}  }
class C{  public NegativeRegionParser(@NonNull Match match,Element element) throws RegionException {  for (  Element subRegionElement : element.getChildren()) {    region=Cardinal.getModule(RegionModule.class).getRegion(match,subRegionElement);    if (region != null) {      break;    }  }  if (region == null) {    throw new MissingRegionPropertyException("No sub-region specified for negative region",element);  }}  }
class C{  public LauncherDiscoveryRequestBuilder configurationParameters(Map<String,String> configurationParameters){  Preconditions.notNull(configurationParameters,"configuration parameters map must not be null");  configurationParameters.forEach(null);  return this;}  }
class C{  public ShellFolder createShellFolder(File file) throws FileNotFoundException {  return new DefaultShellFolder(null,file);}  }
class C{  protected Object toType(Calendar value){  return value.getTime();}  }
class C{  public int executeUpdate() throws SQLException {  validAllParameters();  connection.lock.lock();  try {    super.executeInternal(0,hasOutParameters);    retrieveOutputResult();    return getUpdateCount();  }  finally {    connection.lock.unlock();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void prepare(String patternString){  this.patternString=patternString;  dbPattern=null;  dbMatcher=null;  tablePattern=null;  tableMatcher=null;  if (patternString == null || patternString.length() == 0)   return;  boolean haveSchemaPattern=false;  StringBuffer db=new StringBuffer("^(");  boolean haveTablePattern=false;  StringBuffer table=new StringBuffer("^(");  String[] filterArr=patternString.split(",");  for (int i=0; i < filterArr.length; i++) {    String filter=filterArr[i].trim();    if (filter.length() == 0)     continue;    boolean useSchemaPattern=false;    if (filter.contains(".")) {      filter=filter.replace(".","\\.");      if (haveTablePattern)       table.append("|"); else       haveTablePattern=true;    } else {      if (haveSchemaPattern)       db.append("|"); else       haveSchemaPattern=true;      useSchemaPattern=true;    }    filter=filter.replace("*",".*").replace("?",".");    if (useSchemaPattern) {      db.append(filter);    } else     table.append(filter);  }  String tableRegex=table.append(")$").toString();  String dbRegex=db.append(")$").toString();  if (haveSchemaPattern) {    dbPattern=Pattern.compile(dbRegex);    if (logger.isDebugEnabled())     logger.debug("Matching schemas using " + dbRegex);  }  if (haveTablePattern) {    tablePattern=Pattern.compile(tableRegex);    if (logger.isDebugEnabled())     logger.debug("Matching tables using " + tableRegex);  }}  }
class C{  public void push(Item item){  Node oldfirst=first;  first=new Node();  first.item=item;  first.next=oldfirst;  n++;  assert check();}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Candidate) {    Candidate other=(Candidate)obj;    if (hypotheses != other.hypotheses || phrases != other.phrases)     return false;    if (ranks.length != other.ranks.length)     return false;    for (int i=0; i < ranks.length; i++)     if (ranks[i] != other.ranks[i])     return false;    return true;  }  return false;}  }
class C{  public static void sleep(long ms){  try {    Thread.sleep(ms);  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  public Resources addResources(List<String> resources){  Resources prop=new Resources(resources);  addResources(prop);  return prop;}  }
class C{  private Map<String,Map<Integer,Integer>> mapPatchPositionsToLines(GHPullRequest pr) throws IOException {  Map<String,Map<Integer,Integer>> result=new HashMap<>();  for (  GHPullRequestFileDetail file : pr.listFiles()) {    Map<Integer,Integer> patchLocationMapping=new HashMap<>();    result.put(file.getFilename(),patchLocationMapping);    if (config.tryReportIssuesInline()) {      String patch=file.getPatch();      if (patch == null) {        continue;      }      processPatch(patchLocationMapping,patch);    }  }  return result;}  }
class C{  @Override public void acceptClassifier(IncrementalClassifierEvent e){  weka.classifiers.Classifier classifier=e.getClassifier();  Instance currentI=e.getCurrentInstance();  int status=e.getStatus();  int oldNumAtts=0;  if (status == IncrementalClassifierEvent.NEW_BATCH) {    oldNumAtts=e.getStructure().numAttributes();    m_throughput=new StreamThroughput(statusMessagePrefix());  } else {    if (currentI != null) {      oldNumAtts=currentI.dataset().numAttributes();    }  }  if (status == IncrementalClassifierEvent.NEW_BATCH) {    m_instanceEvent=new InstanceEvent(this,null,0);    Instances oldStructure=new Instances(e.getStructure(),0);    m_stringAttIndexes=new ArrayList<Integer>();    for (int i=0; i < e.getStructure().numAttributes(); i++) {      if (e.getStructure().attribute(i).isString()) {        m_stringAttIndexes.add(new Integer(i));      }    }    String relationNameModifier="_with predictions";    if (!m_appendProbabilities || oldStructure.classAttribute().isNumeric()) {      try {        m_format=makeDataSetClass(oldStructure,oldStructure,classifier,relationNameModifier);      } catch (      Exception ex) {        ex.printStackTrace();        return;      }    } else     if (m_appendProbabilities) {      try {        m_format=makeDataSetProbabilities(oldStructure,oldStructure,classifier,relationNameModifier);      } catch (      Exception ex) {        ex.printStackTrace();        return;      }    }    m_instanceEvent.setStructure(m_format);    notifyInstanceAvailable(m_instanceEvent);    return;  }  if (currentI != null) {    m_throughput.updateStart();    double[] instanceVals=new double[m_format.numAttributes()];    Instance newInst=null;    try {      for (int i=0; i < oldNumAtts; i++) {        instanceVals[i]=currentI.value(i);      }      if (!m_appendProbabilities || currentI.dataset().classAttribute().isNumeric()) {        double predClass=classifier.classifyInstance(currentI);        instanceVals[instanceVals.length - 1]=predClass;      } else       if (m_appendProbabilities) {        double[] preds=classifier.distributionForInstance(currentI);        for (int i=oldNumAtts; i < instanceVals.length; i++) {          instanceVals[i]=preds[i - oldNumAtts];        }      }    } catch (    Exception ex) {      ex.printStackTrace();      return;    } finally {      newInst=new DenseInstance(currentI.weight(),instanceVals);      newInst.setDataset(m_format);      if (m_stringAttIndexes != null) {        for (int i=0; i < m_stringAttIndexes.size(); i++) {          int index=m_stringAttIndexes.get(i);          m_format.attribute(m_stringAttIndexes.get(i)).setStringValue(currentI.stringValue(index));        }      }      m_instanceEvent.setInstance(newInst);      m_instanceEvent.setStatus(status);      m_throughput.updateEnd(m_logger);      notifyInstanceAvailable(m_instanceEvent);    }  } else {    m_instanceEvent.setInstance(null);    notifyInstanceAvailable(m_instanceEvent);  }  if (status == IncrementalClassifierEvent.BATCH_FINISHED || currentI == null) {    m_instanceEvent=null;    m_throughput.finished(m_logger);  }}  }
class C{  public static void showCode(Instruction inst,int startinst,cp_info constant_pool[]){  int i;  Instruction j=inst;  String pref;  i=startinst;  while (j != null) {    if (i > 999)     pref=""; else     if (i > 99)     pref=" "; else     if (i > 9)     pref="  "; else     pref="   ";    G.v().out.print(pref + i + ": ");    G.v().out.println(j.toString(constant_pool));    i=j.nextOffset(i);    j=j.next;  }}  }
class C{  private static void verifyCodewordCount(int[] codewords,int numECCodewords) throws FormatException {  if (codewords.length < 4) {    throw FormatException.getFormatInstance();  }  int numberOfCodewords=codewords[0];  if (numberOfCodewords > codewords.length) {    throw FormatException.getFormatInstance();  }  if (numberOfCodewords == 0) {    if (numECCodewords < codewords.length) {      codewords[0]=codewords.length - numECCodewords;    } else {      throw FormatException.getFormatInstance();    }  }}  }
class C{  public void onMapClose() throws IOException {}  }
class C{  public MLdapProcessor(Properties ctx,int AD_LdapProcessor_ID,String trxName){  super(ctx,AD_LdapProcessor_ID,trxName);}  }
class C{  public char readChar(){  scanner.useDelimiter(EMPTY_PATTERN);  String ch=scanner.next();  assert (ch.length() == 1) : "Internal (Std)In.readChar() error!" + " Please contact the authors.";  scanner.useDelimiter(WHITESPACE_PATTERN);  return ch.charAt(0);}  }
class C{  public void afterResponseRead(AbstractSerialConnection port,ModbusResponse res){}  }
class C{  public CategoryDataset createDataset1(){  DefaultCategoryDataset result=new DefaultCategoryDataset();  String series1="First";  String series2="Second";  String type1="Type 1";  String type2="Type 2";  String type3="Type 3";  String type4="Type 4";  String type5="Type 5";  String type6="Type 6";  String type7="Type 7";  String type8="Type 8";  result.addValue(1.0,series1,type1);  result.addValue(4.0,series1,type2);  result.addValue(3.0,series1,type3);  result.addValue(5.0,series1,type4);  result.addValue(5.0,series1,type5);  result.addValue(7.0,series1,type6);  result.addValue(7.0,series1,type7);  result.addValue(8.0,series1,type8);  result.addValue(5.0,series2,type1);  result.addValue(7.0,series2,type2);  result.addValue(6.0,series2,type3);  result.addValue(8.0,series2,type4);  result.addValue(4.0,series2,type5);  result.addValue(4.0,series2,type6);  result.addValue(2.0,series2,type7);  result.addValue(1.0,series2,type8);  return result;}  }
class C{  private void initColors(){  primary1=super.getPrimary1();  primary2=super.getPrimary2();  primary3=super.getPrimary3();  secondary1=super.getSecondary1();  secondary2=super.getSecondary2();  secondary3=super.getSecondary3();  black=super.getBlack();  white=super.getWhite();}  }
class C{  public boolean isInOrder(){  return inOrder;}  }
class C{  public AccountHeaderBuilder withAlternativeProfileHeaderSwitching(boolean alternativeProfileHeaderSwitching){  this.mAlternativeProfileHeaderSwitching=alternativeProfileHeaderSwitching;  return this;}  }
class C{  public void sort(int runColumn){  double[] runNums=new double[m_Dataset.size()];  for (int j=0; j < runNums.length; j++) {    runNums[j]=m_Dataset.get(j).value(runColumn);  }  int[] index=Utils.stableSort(runNums);  ArrayList<Instance> newDataset=new ArrayList<Instance>(runNums.length);  for (  int element : index) {    newDataset.add(m_Dataset.get(element));  }  m_Dataset=newDataset;}  }
class C{  public void onComplete(ResponseOnSingeRequest pingResponse){  cancelCancellable();  reply(pingResponse.getResponseBody(),pingResponse.isFailObtainResponse(),pingResponse.getErrorMessage(),null,pingResponse.getStatusCode(),pingResponse.getStatusCodeInt());}  }
class C{  public Task performStopOperation(String vmId) throws IOException {  String path=String.format("%s/%s/stop",getBasePath(),vmId);  HttpResponse httpResponse=this.restClient.perform(RestClient.Method.POST,path,null);  this.restClient.checkResponse(httpResponse,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(httpResponse);}  }
class C{  public static void trimEdgesAmongParentsOfChildren(Graph graph,Node target){  List<Node> children=graph.getNodesOutTo(target,Endpoint.ARROW);  Set<Node> parents=new HashSet<>();  for (  Node aChildren : children) {    parents.addAll(graph.getParents(aChildren));  }  parents.remove(target);  parents.removeAll(graph.getAdjacentNodes(target));  List<Node> parentsOfChildren=new ArrayList<>(parents);  if (parentsOfChildren.size() >= 2) {    ChoiceGenerator cg=new ChoiceGenerator(parentsOfChildren.size(),2);    int[] choice;    while ((choice=cg.next()) != null) {      Node v=parentsOfChildren.get(choice[0]);      Node w=parentsOfChildren.get(choice[1]);      Edge edge=graph.getEdge(v,w);      if (edge != null) {        graph.removeEdge(v,w);      }    }  }}  }
class C{  private void declareExtensions(){  new CollectionFeed().declareExtensions(extProfile);  new VolumeFeed().declareExtensions(extProfile);  BatchUtils.declareExtensions(extProfile);}  }
class C{  public RDFObject createObject(){  if (connection == null)   throw new IllegalStateException("No ObjectConnection");  BNode node=connection.getValueFactory().createBNode();  return createBean(node,resolver.resolveBlankEntity());}  }
class C{  private void initialiseTables() throws SQLException {  try (Statement st=sqlConnection.createStatement()){    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "achievements (playername char(36),achievement varchar(64),description varchar(128),date DATE,PRIMARY KEY (playername, achievement))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "breaks (playername char(36),blockid varchar(32),breaks INT,PRIMARY KEY(playername, blockid))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "places (playername char(36),blockid varchar(32),places INT,PRIMARY KEY(playername, blockid))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "kills (playername char(36),mobname varchar(32),kills INT,PRIMARY KEY (playername, mobname))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "crafts (playername char(36),item varchar(32),crafts INT,PRIMARY KEY (playername, item))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "deaths (playername char(36),deaths INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "arrows (playername char(36),arrows INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "snowballs (playername char(36),snowballs INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "eggs (playername char(36),eggs INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "fish (playername char(36),fish INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "itembreaks (playername char(36),itembreaks INT,"+ "PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "eatenitems (playername char(36),eatenitems INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "shears (playername char(36),shears INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "milks (playername char(36),milks INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "connections (playername char(36),connections INT,date varchar(10),PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "trades (playername char(36),trades INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "anvils (playername char(36),anvils INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "enchantments (playername char(36),enchantments INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "levels (playername char(36),levels INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "beds (playername char(36),beds INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "consumedpotions (playername char(36),consumedpotions INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "playedtime (playername char(36),playedtime BIGINT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "distancefoot (playername char(36),distancefoot INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "distancepig (playername char(36),distancepig INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "distancehorse (playername char(36),distancehorse INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "distanceminecart (playername char(36),distanceminecart INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "distanceboat (playername char(36),distanceboat INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "distancegliding (playername char(36),distancegliding INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "drops (playername char(36),drops INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "hoeplowing (playername char(36),hoeplowing INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "fertilising (playername char(36),fertilising INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "tames (playername char(36),tames INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "brewing (playername char(36),brewing INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "fireworks (playername char(36),fireworks INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "musicdiscs (playername char(36),musicdiscs INT,PRIMARY KEY (playername))");    st.addBatch("CREATE TABLE IF NOT EXISTS " + tablePrefix + "enderpearls (playername char(36),enderpearls INT,PRIMARY KEY (playername))");    st.executeBatch();  } }  }
class C{  public static short[] toShortArray(Byte[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].shortValue();  }  return result;}  }
class C{  public boolean isSetIntervalUnit(){  return this.intervalUnit != null;}  }
class C{  public DSAParameterGenerationParameters(int L,int N,int certainty,SecureRandom random,int usageIndex){  this.l=L;  this.n=N;  this.certainty=certainty;  this.usageIndex=usageIndex;  this.random=random;}  }
class C{  public static final void fillCircle(GL2 gl,Circle c){  double r=c.getRadius();  Vector2 ce=c.getCenter();  double cx=ce.x;  double cy=ce.y;  RenderUtilities.fillCircleFromCenter(gl,r,cx,cy);}  }
class C{  public void calculateChainSwingBuffer(float maxAngle,int bufferTime,float angleDecrement,float divisor,EntityLivingBase entity){  this.prevYawVariation=this.yawVariation;  if (entity.renderYawOffset != entity.prevRenderYawOffset && MathHelper.abs(this.yawVariation) < maxAngle) {    this.yawVariation+=(entity.prevRenderYawOffset - entity.renderYawOffset) / divisor;  }  if (this.yawVariation > 0.7F * angleDecrement) {    if (this.yawTimer > bufferTime) {      this.yawVariation-=angleDecrement;      if (MathHelper.abs(this.yawVariation) < angleDecrement) {        this.yawVariation=0.0F;        this.yawTimer=0;      }    } else {      this.yawTimer++;    }  } else   if (this.yawVariation < -0.7F * angleDecrement) {    if (this.yawTimer > bufferTime) {      this.yawVariation+=angleDecrement;      if (MathHelper.abs(this.yawVariation) < angleDecrement) {        this.yawVariation=0.0F;        this.yawTimer=0;      }    } else {      this.yawTimer++;    }  }}  }
class C{  public String toFKString(){  StringBuilder sb=new StringBuilder();  sb.append("Foreign Key from ");  String fromType="] (primary)";  String toType="] (secondary)";  if (!((IndexImpl)_fromIndex).getReference().isPrimaryTable()) {    fromType="] (secondary)";    toType="] (primary)";  }  sb.append(getFromTable().getName()).append("[");  sb.append(_fromCols.get(0).getName());  for (int i=1; i < _fromCols.size(); ++i) {    sb.append(",").append(_fromCols.get(i).getName());  }  sb.append(fromType);  sb.append(" to ").append(getToTable().getName()).append("[");  List<? extends Index.Column> toCols=_toCursor.getIndex().getColumns();  sb.append(toCols.get(0).getName());  for (int i=1; i < toCols.size(); ++i) {    sb.append(",").append(toCols.get(i).getName());  }  sb.append(toType).append(" (Db=").append(((DatabaseImpl)getFromTable().getDatabase()).getName()).append(")");  return sb.toString();}  }
class C{  public boolean isNotLoaded(){  return entityState == EntityState.NOTLOADED;}  }
class C{  @Bean public Docket swaggerSpringfoxDocket(){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).genericModelSubstitutes(ResponseEntity.class).forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class).directModelSubstitute(org.joda.time.LocalDate.class,String.class).directModelSubstitute(org.joda.time.LocalDateTime.class,Date.class).directModelSubstitute(org.joda.time.DateTime.class,Date.class).directModelSubstitute(java.time.LocalDate.class,String.class).directModelSubstitute(java.time.ZonedDateTime.class,Date.class).directModelSubstitute(java.time.LocalDateTime.class,Date.class).select().paths(regex(DEFAULT_INCLUDE_PATTERN)).build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return docket;}  }
class C{  private static String inferFindBugsHome(){  Pattern[] findbugsJarNames={Pattern.compile("findbugs\\.jar$")};  for (  Pattern jarNamePattern : findbugsJarNames) {    String findbugsJarCodeBase=ClassPathUtil.findCodeBaseInClassPath(jarNamePattern,SystemProperties.getProperty("java.class.path"));    if (findbugsJarCodeBase != null) {      File findbugsJar=new File(findbugsJarCodeBase);      File libDir=findbugsJar.getParentFile();      if ("lib".equals(libDir.getName())) {        String fbHome=libDir.getParent();        FindBugs.setHome(fbHome);        return fbHome;      }    }  }  String classFilePath=FindBugs.class.getName().replaceAll("\\.","/") + ".class";  URL resource=FindBugs.class.getClassLoader().getResource(classFilePath);  if (resource != null && "file".equals(resource.getProtocol())) {    try {      String classfile=URLDecoder.decode(resource.getPath(),Charset.defaultCharset().name());      Matcher m=Pattern.compile("(.*)/.*?/edu/umd.*").matcher(classfile);      if (m.matches()) {        String home=m.group(1);        if (new File(home + "/etc/findbugs.xml").exists()) {          FindBugs.setHome(home);          return home;        }      }    } catch (    UnsupportedEncodingException e) {    }  }  return null;}  }
class C{  protected boolean hasAttributeOverride(String loggingCtx){  if (loggingCtx.equals(MetadataLogger.MAP_KEY_COLUMN)) {    return getDescriptor().hasAttributeOverrideFor(KEY_DOT_NOTATION + getAttributeName());  } else   if (loggingCtx.equals(MetadataLogger.VALUE_COLUMN)) {    if (getDescriptor().hasAttributeOverrideFor(VALUE_DOT_NOTATION + getAttributeName())) {      return true;    }  }  return getDescriptor().hasAttributeOverrideFor(getAttributeName());}  }
class C{  @Override public boolean supportsMixedCaseIdentifiers(){  debugCodeCall("supportsMixedCaseIdentifiers");  return false;}  }
class C{  public boolean doCompile(){  BatchEnvironment env=getEnv();  env.flags|=flags;  env.majorVersion=45;  env.minorVersion=3;  String noMemoryErrorString=getText("rmic.no.memory");  String stackOverflowErrorString=getText("rmic.stack.overflow");  try {    for (int i=classes.size() - 1; i >= 0; i--) {      Identifier implClassName=Identifier.lookup(classes.elementAt(i));      implClassName=env.resolvePackageQualifiedName(implClassName);      implClassName=Names.mangleClass(implClassName);      ClassDeclaration decl=env.getClassDeclaration(implClassName);      try {        ClassDefinition def=decl.getClassDefinition(env);        for (int j=0; j < generators.size(); j++) {          Generator gen=generators.elementAt(j);          gen.generate(env,def,destDir);        }      } catch (      ClassNotFound ex) {        env.error(0,"rmic.class.not.found",implClassName);      }    }    if (!nocompile) {      compileAllClasses(env);    }  } catch (  OutOfMemoryError ee) {    env.output(noMemoryErrorString);    return false;  }catch (  StackOverflowError ee) {    env.output(stackOverflowErrorString);    return false;  }catch (  Error ee) {    if (env.nerrors == 0 || env.dump()) {      env.error(0,"fatal.error");      ee.printStackTrace(out instanceof PrintStream ? (PrintStream)out : new PrintStream(out,true));    }  }catch (  Exception ee) {    if (env.nerrors == 0 || env.dump()) {      env.error(0,"fatal.exception");      ee.printStackTrace(out instanceof PrintStream ? (PrintStream)out : new PrintStream(out,true));    }  }  env.flushErrors();  boolean status=true;  if (env.nerrors > 0) {    String msg="";    if (env.nerrors > 1) {      msg=getText("rmic.errors",env.nerrors);    } else {      msg=getText("rmic.1error");    }    if (env.nwarnings > 0) {      if (env.nwarnings > 1) {        msg+=", " + getText("rmic.warnings",env.nwarnings);      } else {        msg+=", " + getText("rmic.1warning");      }    }    output(msg);    status=false;  } else {    if (env.nwarnings > 0) {      if (env.nwarnings > 1) {        output(getText("rmic.warnings",env.nwarnings));      } else {        output(getText("rmic.1warning"));      }    }  }  if (!keepGenerated) {    env.deleteGeneratedFiles();  }  if (env.verbose()) {    tm=System.currentTimeMillis() - tm;    output(getText("rmic.done_in",Long.toString(tm)));  }  env.shutdown();  sourcePathArg=null;  sysClassPathArg=null;  extDirsArg=null;  classPathString=null;  destDir=null;  classes=null;  generatorArgs=null;  generators=null;  environmentClass=null;  program=null;  out=null;  return status;}  }
class C{  protected ITuple<E> consumeLookaheadTuple(){  assert current != -1;  lastKeyBuffer.reset().append(sourceTuple[current].getKey());  return super.consumeLookaheadTuple();}  }
class C{  public BlockStatement(Statement[] statements,VariableScope scope){  this.statements.addAll(Arrays.asList(statements));  this.scope=scope;}  }
class C{  String readMonth(String source,int ofs,String token,boolean adjacent){  if (token.length() < 3) {    if (adjacent) {      return readSubstring(source,ofs,ofs + token.length());    }    if (isNumeric(source.charAt(0))) {      return readNumber(source,ofs,token,adjacent);    }  }  int i=findEndText(source,ofs);  if (i == -1) {    i=source.length();  }  String fragment=readSubstring(source,ofs,i);  if (fragment == null) {    return null;  }  for (  String month : getDateFormatSymbols().getMonths()) {    if (fragment.equalsIgnoreCase(month)) {      return readSubstring(source,ofs,ofs + month.length());    }  }  for (  String month : getDateFormatSymbols().getShortMonths()) {    if (fragment.equalsIgnoreCase(month)) {      return readSubstring(source,ofs,ofs + month.length());    }  }  return null;}  }
class C{  public void send(final OscPacket thePacket,final NetAddress theNetAddress){  _myOscNetManager.send(thePacket,theNetAddress);}  }
class C{  public GridConcurrentWeakHashSet(){  store=new GridConcurrentHashSet<>();}  }
class C{  public SootField addRefTypeWithNewField(RefType type,InfoKind unmodeledFlowType,boolean deepClone){  SootClass clz=type.getSootClass();  clz=ClassCloner.getClonedClassFromClone(clz);  if (!clz.isConcrete()) {    clz=SootUtils.getCloseConcrete(clz);  }  if (clz == null) {    logger.warn("Cannot find any known implementors of {} when adding dummy object",type.getSootClass());    return null;  }  SootField field=new SootField(DUMMY_FIELD_PREFIX + type.toString().replace(".","_") + localID,type,Modifier.PUBLIC | Modifier.STATIC);  dummyClass.addField(field);  addRefTypeInternal(field,clz,unmodeledFlowType,deepClone);  return field;}  }
class C{  public synchronized void commit(){  if (null == this.committedOffsets || this.committedOffsets.length < this.counters.length) {    this.committedOffsets=new long[this.counters.length];  }  for (int i=0; i < this.committedOffsets.length; i++) {    this.committedOffsets[i]=null != this.counters[i] ? this.counters[i].get() : -1L;  }}  }
class C{  private static byte[] encode(int[] min,int[] max){  checkArgs(min,max);  byte[] b=new byte[BYTES * 2 * min.length];  verifyAndEncode(min,max,b);  return b;}  }
class C{  public DtsReader(TrackOutput output){  super(output);  headerScratchBytes=new ParsableByteArray(new byte[HEADER_SIZE]);  headerScratchBytes.data[0]=(byte)((SYNC_VALUE >> 24) & 0xFF);  headerScratchBytes.data[1]=(byte)((SYNC_VALUE >> 16) & 0xFF);  headerScratchBytes.data[2]=(byte)((SYNC_VALUE >> 8) & 0xFF);  headerScratchBytes.data[3]=(byte)(SYNC_VALUE & 0xFF);  state=STATE_FINDING_SYNC;}  }
class C{  public InsertContact tertiaryPhoneType(int tertiaryPhoneType){  mIntent.putExtra(Insert.TERTIARY_PHONE_TYPE,tertiaryPhoneType);  return this;}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  public boolean addConditional(String systemName,int order){  _conditionalSystemNames.add(systemName);  return (true);}  }
class C{  public void incrementRow(Value head,double prob){  addRow(head,table.getOrDefault(head,0.0) + prob);}  }
class C{  public JAXBReader(String contextPath){  super(contextPath);}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  public void onCallTerminated(){  mCall=null;  setVisibility(View.GONE);}  }
class C{  public static Observable<WatchEvent<?>> watchNonRecursive(final Path path) throws IOException {  final boolean recursive=false;  return new ObservableFactory(path,recursive).create();}  }
class C{  public boolean isALeaf(){  return (m_Left == null);}  }
class C{  public boolean isStatisticResource(){  return this.equals(STATISTIC_RESOURCE);}  }
class C{  public void whois(){  bot.sendIRC().whois(serverUser.getNick());}  }
class C{  public static final Criterion textContains(String value){  return new TextCriterion(value,Scope.TEXT);}  }
class C{  public static Map<String,Object> updateEmailAddress(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> newContext=UtilMisc.makeMapWritable(context);  newContext.put("infoString",newContext.get("emailAddress"));  newContext.remove("emailAddress");  return updateContactMech(ctx,newContext);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  int progress=0;  int a;  int filterSize=3;  double n;  double sum;  double average;  double sumOfTheSquares;  double stdDev;  double devMean;  int dX[];  int dY[];  int midPoint;  int numPixelsInFilter;  double[] filterShape;  boolean reflectAtBorders=true;  double centreValue=0;  double neighbourhoodDist=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  neighbourhoodDist=Double.parseDouble(args[2]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=reflectAtBorders;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    filterSize=(int)(neighbourhoodDist / ((DEM.getCellSizeX() + DEM.getCellSizeY()) / 2));    if (Math.floor(filterSize / 2d) == (filterSize / 2d)) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2);    double aSqr=midPoint * midPoint;    double bSqr=midPoint * midPoint;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        dX[a]=col - midPoint;        dY[a]=row - midPoint;        z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;        if (z > 1) {          filterShape[a]=0;        } else {          filterShape[a]=1;        }        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=DEM.getValue(row,col);        if (centreValue != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            if ((x != midPoint) && (y != midPoint)) {              z=DEM.getValue(y,x);              if (z != noData) {                n+=filterShape[a];                sum+=z * filterShape[a];                sumOfTheSquares+=(z * filterShape[a]) * z;              }            }          }          average=sum / n;          z=centreValue - average;          if (n > 2) {            stdDev=Math.sqrt((sumOfTheSquares / n) - (average * average));            devMean=z / stdDev;            output.setValue(row,col,devMean);          } else {            output.setValue(row,col,noData);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void removeCauseMethodName(String methodName){  if (StringUtils.isNotEmpty(methodName)) {    List list=getCauseMethodNameList();    if (list.remove(methodName)) {      CAUSE_METHOD_NAMES=toArray(list);    }  }}  }
class C{  public static void quickSort(byte[] a,int fromIndex,int toIndex,ByteComparator c){  rangeCheck(a.length,fromIndex,toIndex);  quickSort1(a,fromIndex,toIndex - fromIndex,c);}  }
class C{  protected ExtendedStateMachine_Impl(){  super();}  }
class C{  private IllegalArgumentException createInvalidValueException(){  return new IllegalArgumentException("Format of a coordinate is \"latitude longitude\", where latitude " + "and longitude are doubles, separated by a space.");}  }
class C{  public PickFrustumLayer(){}  }
class C{  public static int typeOrdinal(final byte versionByte){  return (versionByte & NIBBLE_MASK);}  }
class C{  public JavaField export(JavaClass cl,JavaClass target){  JavaField field=new JavaField();  field.setName(_name);  field.setDescriptor(_descriptor);  field.setAccessFlags(_accessFlags);  target.getConstantPool().addUTF8(_name);  target.getConstantPool().addUTF8(_descriptor);  for (int i=0; i < _attributes.size(); i++) {    Attribute attr=_attributes.get(i);    field.addAttribute(attr.export(cl,target));  }  return field;}  }
class C{  public FacesConfigRuleSet(boolean design,boolean generate,boolean runtime){  this.design=design;  this.generate=generate;  this.runtime=runtime;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.588 -0500",hash_original_method="0ED240205957B5EB6254FD7A63F6E825",hash_generated_method="8F4EA45266DAC1BF7A58EC1925D492DD") public static final Object readValueXml(XmlPullParser parser,String[] name) throws XmlPullParserException, java.io.IOException {  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      return readThisValueXml(parser,name);    } else     if (eventType == parser.END_TAG) {      throw new XmlPullParserException("Unexpected end tag at: " + parser.getName());    } else     if (eventType == parser.TEXT) {      throw new XmlPullParserException("Unexpected text: " + parser.getText());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Unexpected end of document");}  }
class C{  static private byte[] classNameToBytes(String cn){  return cn.getBytes();}  }
class C{  public static void dump(DocFlavor docFlavor,String outputMimeType){  System.out.println();  System.out.println("DocFlavor=" + docFlavor + ", Output="+ outputMimeType);  StreamPrintServiceFactory[] spsfactories=StreamPrintServiceFactory.lookupStreamPrintServiceFactories(docFlavor,outputMimeType);  for (int i=0; i < spsfactories.length; i++) {    System.out.println("- " + spsfactories[i]);    DocFlavor dfs[]=spsfactories[i].getSupportedDocFlavors();    for (int j=0; j < dfs.length; j++) {      System.out.println("   -> " + dfs[j]);    }  }}  }
class C{  public int parse(byte[] xml) throws Exception {  SAXParserFactory spf=SAXParserFactory.newInstance();  spf.setNamespaceAware(true);  SchemaFactory sf=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);  try (InputStream inputStream=ResourceLoader.getResourceAsStream(getClass(),getSchemaName())){    Schema schema=sf.newSchema(new StreamSource(inputStream));    spf.setSchema(schema);  }   SAXParser saxParser=spf.newSAXParser();  XMLReader reader=saxParser.getXMLReader();  reader.setFeature(Constants.XERCES_FEATURE_PREFIX + Constants.DISALLOW_DOCTYPE_DECL_FEATURE,true);  reader.setContentHandler(this);  reader.parse(new InputSource(new ByteArrayInputStream(xml)));  return 0;}  }
class C{  public int strStr(String source,String target){  if (source == null || target == null)   return -1;  int len1=source.length();  int len2=target.length();  if (len2 == 0)   return 0;  for (int i=0; i <= len1 - len2; i++) {    for (int j=0; j < len2; j++) {      if (source.charAt(i + j) != target.charAt(j))       break;      if (j == len2 - 1)       return i;    }  }  return -1;}  }
class C{  default <T>Proxy<T> proxy(Supplier<T> supplier){  return new SupplierProxy<>(supplier);}  }
class C{  public void add(IJavaElement element) throws JavaModelException {  IPath containerPath=null;  String containerPathToString=null;  PackageFragmentRoot root=null;  int includeMask=SOURCES | APPLICATION_LIBRARIES | SYSTEM_LIBRARIES;switch (element.getElementType()) {case IJavaElement.JAVA_MODEL:    break;case IJavaElement.JAVA_PROJECT:  add((JavaProject)element,null,includeMask,new HashSet(2),new HashSet(2),null);break;case IJavaElement.PACKAGE_FRAGMENT_ROOT:root=(PackageFragmentRoot)element;IPath rootPath=root.internalPath();containerPath=root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : rootPath;containerPathToString=containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();File rootResource=root.resource();String projectPath=root.getJavaProject().getPath().toString();if (rootResource != null) {String relativePath=Util.relativePath(new Path(rootResource.getAbsolutePath()),containerPath.segmentCount());add(projectPath,relativePath,containerPathToString,false,null);} else {add(projectPath,"",containerPathToString,false,null);}break;case IJavaElement.PACKAGE_FRAGMENT:root=(PackageFragmentRoot)element.getParent();projectPath=root.getJavaProject().getPath().toString();if (root.isArchive()) {String relativePath=org.eclipse.jdt.internal.core.util.Util.concatWith(((PackageFragment)element).names,'/');containerPath=root.getPath();containerPathToString=containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();add(projectPath,relativePath,containerPathToString,true,null);} else {File resource=((JavaElement)element).resource();if (resource != null) {containerPath=root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : root.internalPath();containerPathToString=containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();String relativePath=Util.relativePath(new Path(resource.getAbsolutePath()),containerPath.segmentCount());add(projectPath,relativePath,containerPathToString,true,null);}}break;default :if (element instanceof IMember) {if (this.elements == null) {this.elements=new ArrayList();}this.elements.add(element);}root=(PackageFragmentRoot)element.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);projectPath=root.getJavaProject().getPath().toString();String relativePath;if (root.getKind() == IPackageFragmentRoot.K_SOURCE) {containerPath=root.getParent().getPath();relativePath=Util.relativePath(getPath(element,false),1);} else {containerPath=root.internalPath();relativePath=getPath(element,true).toString();}containerPathToString=containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();add(projectPath,relativePath,containerPathToString,false,null);}if (root != null) addEnclosingProjectOrJar(root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : root.getPath());}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 rp){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"InvalidateReplyMessage process invoking reply processor with processorId: {}",this.processorId);  }  if (rp == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"InvalidateReplyMessage processor not found");    }    return;  }  if (rp instanceof InvalidateResponse) {    InvalidateResponse processor=(InvalidateResponse)rp;    processor.setResponse(this);  }  rp.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",rp,this);  }  dm.getStats().incReplyMessageTime(NanoTimer.getTime() - startTime);}  }
class C{  public void addParam(ModelParam param){  if (param != null) {    contextInfo.put(param.name,param);    contextParamList.add(param);  }}  }
class C{  public SaaSApplicationException(String message,Throwable cause,Object[] params){  super(message,cause);  init(params);}  }
class C{  @Override public void Bl(final Object e,final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.Bl()");  }  javascript.execute(formObj,PdfDictionary.Bl,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  EnumColourGroup(String name,Predicate<EnumDyeColor> colourFilter,int metaOffset){  this.name=name;  this.property=PropertyEnum.create("colour",EnumDyeColor.class,null);  this.metaOffset=metaOffset;  this.values=this.property.getAllowedValues();}  }
class C{  public static double fastDistance(Coordinate from,Coordinate to){  double dLat=FastMath.toRadians(to.y - from.y);  double dLon=FastMath.toRadians(to.x - from.x) * FastMath.cos(FastMath.toRadians((from.y + to.y) / 2));  return RADIUS_OF_EARTH_IN_M * FastMath.sqrt(dLat * dLat + dLon * dLon) * MAX_ERR_INV;}  }
class C{  public void disableDPM() throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  String path="/v1/system/disableDPM".replaceAll("\\{format\\}","json");  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  apiClient.invokeAPI(path,"POST",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,null);}  }
class C{  public void confirmByte(char lastByte){  pktStat=PacketStatus.COMPLEMENT;  writeChar((char)~lastByte,true);}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  public final void testGetModulus(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.valueOf(5L),BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getModulus()));}  }
class C{  private static void doSort(char[] a,int left,int right,char[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    while (k < right && a[k] == a[k + 1])     k++;    if (k == right)     break;    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        char t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    }    if (run[count] > left && a[run[count]] >= a[run[count] - 1]) {      count--;    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (count == 0) {    return;  } else   if (count == 1 && run[count] > right) {    return;  }  right++;  if (run[count] < right) {    run[++count]=right;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  char[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new char[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    char[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  private SymProp analyseMotif(Motif motif){  int nrMotifNodes=motif.getNrMotifNodes();  SymGraph sym=new SymGraph(motif);  SymProp sp=new SymProp(nrMotifNodes,smaller,larger);  orbits=new int[nrMotifNodes];  for (int i=0; i < orbits.length; i++) {    orbits[i]=-1;  }  mapNodes(sp,orbits,sym,true);  return sp;}  }
class C{  private static float[] RGBtoHSL(float[] rgb,float[] hsl){  if (hsl == null) {    hsl=new float[3];  }  float max=max(rgb[0],rgb[1],rgb[2]);  float min=min(rgb[0],rgb[1],rgb[2]);  float summa=max + min;  float saturation=max - min;  if (saturation > 0.0f) {    saturation/=(summa > 1.0f) ? 2.0f - summa : summa;  }  hsl[0]=getHue(rgb[0],rgb[1],rgb[2],max,min);  hsl[1]=saturation;  hsl[2]=summa / 2.0f;  return hsl;}  }
class C{  public XYDatasetTableModel(TableXYDataset dataset){  this();  this.model=dataset;  this.model.addChangeListener(this);}  }
class C{  public static Object execute(ExecutablePool pool,LocalRegion region,Object key,Object callbackArg,boolean prSingleHopEnabled,EntryEventImpl clientEvent){  ClientMetadataService cms=((GemFireCacheImpl)region.getCache()).getClientMetadataService();  GetOpImpl op=new GetOpImpl(region,key,callbackArg,prSingleHopEnabled,clientEvent);  if (logger.isDebugEnabled()) {    logger.debug("GetOp invoked for key {}",key);  }  if (prSingleHopEnabled) {    ServerLocation server=cms.getBucketServerLocation(region,Operation.GET,key,null,callbackArg);    if (server != null) {      try {        PoolImpl poolImpl=(PoolImpl)pool;        boolean onlyUseExistingCnx=((poolImpl.getMaxConnections() != -1 && poolImpl.getConnectionCount() >= poolImpl.getMaxConnections()) ? true : false);        op.setAllowDuplicateMetadataRefresh(!onlyUseExistingCnx);        return pool.executeOn(new ServerLocation(server.getHostName(),server.getPort()),op,true,onlyUseExistingCnx);      } catch (      AllConnectionsInUseException e) {      }catch (      ServerConnectivityException e) {        if (e instanceof ServerOperationException) {          throw e;        }        cms.removeBucketServerLocation(server);      }catch (      CacheLoaderException e) {        if (e.getCause() instanceof ServerConnectivityException)         cms.removeBucketServerLocation(server);      }    }  }  return pool.execute(op);}  }
class C{  public void clearIdleThreads(){  _launcher.resetThrottle();  int idleCount=_idleThreadRing.size();  ThreadAmp thread;  while (idleCount-- > 0 && (thread=_idleThreadRing.poll()) != null) {    thread.close();  }}  }
class C{  public boolean isSubscriptionSupported(){  return false;}  }
class C{  static private String determineMailHeaderEncodingCharset(String rawText){  if (rawText == null)   return null;  int iEncodingPrefix=rawText.indexOf("=?");  if (iEncodingPrefix == -1)   return null;  int iCharsetBegin=iEncodingPrefix + 2;  int iSecondQuestionMark=rawText.indexOf('?',iCharsetBegin);  if (iSecondQuestionMark == -1)   return null;  if (iSecondQuestionMark == iCharsetBegin)   return null;  int iThirdQuestionMark=rawText.indexOf('?',iSecondQuestionMark + 1);  if (iThirdQuestionMark == -1)   return null;  if (-1 == rawText.indexOf("?=",iThirdQuestionMark + 1))   return null;  return rawText.substring(iCharsetBegin,iSecondQuestionMark);}  }
class C{  public FasRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  protected void useConfiguration(Configuration config){  this.config=config;  initialize(true);}  }
class C{  private static String readString(String name) throws IOException {  System.out.print("Please enter " + name + ": ");  System.out.flush();  String result=IN.readLine();  return result.trim();}  }
class C{  public boolean isInCache(){  return isInCache;}  }
class C{  public Vertex evaluatePLUS(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,2,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex left=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex right=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  if ((left.getData() instanceof Number) && (right.getData() instanceof Number)) {    return new org.botlibre.tool.Math().instance.plus(expression,left,right);  }  if (left.getData() instanceof String) {    return network.createVertex(((String)left.getData()) + right.printString());  }  network.getBot().log(this,"Invalid numbers for operation",Level.WARNING,expression,left,right);  return network.createVertex(Primitive.NULL);}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  private void doDeletePolicyReferenceFromDB(FileShare fs){  _log.info("Removing policy reference for file system  " + fs.getName());  for (  String policy : fs.getFilePolicies()) {    SchedulePolicy fp=_dbClient.queryObject(SchedulePolicy.class,URI.create(policy));    StringSet fsURIs=fp.getAssignedResources();    fsURIs.remove(fs.getId().toString());    fp.setAssignedResources(fsURIs);    _dbClient.updateObject(fp);  }}  }
class C{  public void testLongsCount(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.longs(size).parallel().forEach(null);    assertEquals(size,counter.sum());    size+=524959;  }}  }
class C{  public EagerCompleteSweep(){  super(Options.set,"Eager Complete Sweep","Should we eagerly finish sweeping at the start of a collection",false);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public KerberosTime withMicroSeconds(int usec){  return new KerberosTime(kerberosTime - kerberosTime % 1000L + usec / 1000L,usec % 1000);}  }
class C{  public void restart(){  cancel();  Objects.requireNonNull(task,"Task must be specified either in constructor or by passing it to restart() method");  taskHandler=backgroundWorker.handle(task);  taskHandler.execute();}  }
class C{  protected void updateExpandedDescendants(TreePath path){  completeEditing();  if (treeState != null) {    treeState.setExpandedState(path,true);    Enumeration descendants=tree.getExpandedDescendants(path);    if (descendants != null) {      while (descendants.hasMoreElements()) {        path=(TreePath)descendants.nextElement();        treeState.setExpandedState(path,true);      }    }    updateLeadSelectionRow();    updateSize();  }}  }
class C{  void revokeRole(Role role){  if (grantedRoles == null) {    return;  }  Right right=grantedRoles.get(role);  if (right == null) {    return;  }  grantedRoles.remove(role);  if (grantedRoles.size() == 0) {    grantedRoles=null;  }}  }
class C{  public void pick(DrawContext dc,Point pickPoint,Matrix matrix){  if (dc == null) {    String msg=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.pickSupport.clearPickList();  try {    this.pickSupport.beginPicking(dc);    this.render(dc,matrix);  }  finally {    this.pickSupport.endPicking(dc);    this.pickSupport.resolvePick(dc,pickPoint,this.pickLayer);  }}  }
class C{  protected void print(String s){  if (!quiet) {    sysOut.print(s);  }}  }
class C{  public void updateAppWidgetSize(Bundle newOptions,int minWidth,int minHeight,int maxWidth,int maxHeight){  updateAppWidgetSize(newOptions,minWidth,minHeight,maxWidth,maxHeight,false);}  }
class C{  @Override public BufferedImage dataToRGB(byte[] data,final int width,final int height){  BufferedImage image;  try {    data=dataToRGBByteArray(data,width,height);    image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);    final Raster raster=ColorSpaceConvertor.createInterleavedRaster(data,width,height);    image.setData(raster);  } catch (  final Exception ee) {    image=null;    LogWriter.writeLog("Couldn't read JPEG, not even raster: " + ee);  }  return image;}  }
class C{  private static boolean isOrderList(CharSequence s,int next,boolean isNumber){  if (next + 1 > s.length()) {    return false;  }  char c=s.charAt(next);  if (isNumber) {    if (Character.isDigit(c)) {      return isOrderList(s,next + 1,true);    } else     if (c == '.') {      return true;    } else {      return false;    }  } else   if (c == ' ') {    return isOrderList(s,next + 1,false);  } else   if (Character.isDigit(c)) {    return isOrderList(s,next + 1,true);  } else {    return false;  }}  }
class C{  public long allocate(long size,boolean init) throws GridOffHeapOutOfMemoryException {  return allocate(size,init,false);}  }
class C{  private void registerAc(){  standbyReceiver=new BSt();  final IntentFilter filterOn=new IntentFilter(Intent.ACTION_SCREEN_ON);  final IntentFilter filterOff=new IntentFilter(Intent.ACTION_SCREEN_OFF);  Status.getAppContext().registerReceiver(standbyReceiver,filterOn);  Status.getAppContext().registerReceiver(standbyReceiver,filterOff);}  }
class C{  public SIRtree(int nodeCapacity){  super(nodeCapacity);}  }
class C{  public boolean downloadToStream(ImageTask imageTask,String urlString,OutputStream outputStream,ProgressUpdateHandler progressUpdateHandler){  disableConnectionReuseIfNecessary();  HttpURLConnection urlConnection=null;  BufferedOutputStream out=null;  BufferedInputStream in=null;  try {    final URL url=new URL(urlString);    urlConnection=(HttpURLConnection)url.openConnection();    urlConnection.setReadTimeout(0);    int len=urlConnection.getContentLength();    int total=0;    in=new BufferedInputStream(urlConnection.getInputStream(),IO_BUFFER_SIZE);    out=new BufferedOutputStream(outputStream,IO_BUFFER_SIZE);    int b;    while ((b=in.read()) != -1) {      total++;      out.write(b);      if (progressUpdateHandler != null) {        progressUpdateHandler.onProgressUpdate(total,len);      }    }    return true;  } catch (  final IOException e) {    CLog.e(LOG_TAG,"Error in downloadBitmap - " + e);  } finally {    if (urlConnection != null) {      urlConnection.disconnect();    }    try {      if (out != null) {        out.close();      }      if (in != null) {        in.close();      }    } catch (    final IOException e) {    }  }  return false;}  }
class C{  public static boolean isStatusError(int status){  return (status >= 400 && status < 600);}  }
class C{  @Override protected void onPreExecute(){  super.onPreExecute();  nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  Drawable icon=context.getResources().getDrawable(R.mipmap.ic_launcher);  builder=new NotificationCompat.Builder(context).setSmallIcon(android.R.drawable.stat_sys_download).setLargeIcon(((BitmapDrawable)icon).getBitmap()).setContentTitle(saveFilePath.getName()).setContentText(saveFilePath.getAbsolutePath()).setProgress(fileSize,0,false);  nm.notify(notifyId,builder.build());}  }
class C{  public Symbol newSymbol(String name,int id,Location left,Location right,Object value){  return new ComplexSymbol(name,id,left,right,value);}  }
class C{  private CertificateType(){}  }
class C{  public int hashCode(){  LatLonPoint llp=getLocation();  int hc1=Float.floatToIntBits(llp.getLatitude());  int hc2=Float.floatToIntBits(llp.getLongitude());  return hc1 ^ (hc2 << 5) ^ (hc2 >>> 27);}  }
class C{  public ScatterPlotDialog(final JFreeChart chart,final ScatterPlotModel model){  this.model=model;  theColor=model.getChartSeriesPaint();  LabelledItemPanel dialogPanel=new LabelledItemPanel();  autoRange.addActionListener(this);  autoRange.setActionCommand("AutoRange");  autoDomain.addActionListener(this);  autoDomain.setActionCommand("AutoDomain");  dialogPanel.addItem("Dot Size",dotSizeField);  dialogPanel.addItem("Maximum Domain",maxDomainField);  dialogPanel.addItem("Minimum Domain",minDomainField);  dialogPanel.addItem("Auto Domain",autoDomain);  dialogPanel.addItem("Maximum Range",maxRangeField);  dialogPanel.addItem("Minimum Range",minRangeField);  dialogPanel.addItem("Auto Range",autoRange);  dialogPanel.addItem("Show History",showHistory);  JButton colorButton=new JButton("Color");  colorButton.addActionListener(this);  colorButton.setActionCommand("ShowColorDialog");  String[] seriesLabel=new String[model.getChartSeriesPaint().size()];  for (int i=0; i < model.getChartSeriesPaint().size(); ++i) {    seriesLabel[i]=Integer.toString(i);  }  seriesColorSelector=new JComboBox(seriesLabel);  seriesColorSelector.addActionListener(this);  seriesColorSelector.setActionCommand("SeriesColorSelector");  colorIndicator.setSize(20,20);  JPanel colorPanel=new JPanel();  colorPanel.add(seriesColorSelector);  colorPanel.add(colorButton);  colorPanel.add(colorIndicator);  dialogPanel.addItem("Series Color:",colorPanel);  checkBoundaryFields();  fillFieldValues();  setContentPane(dialogPanel);  setResizable(false);}  }
class C{  public static int columnsNumber(int width,int plainSpaceSize){  int result=width / plainSpaceSize;  if (width % plainSpaceSize > 0) {    result++;  }  return result;}  }
class C{  public static boolean isDecString(final String string){  Preconditions.checkNotNull(string);  final CharMatcher cm=CharMatcher.inRange('0','9');  for (int i=0; i < string.length(); i++) {    if (!cm.apply(string.charAt(i))) {      return false;    }  }  return string.length() != 0;}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof LayerListener) {    logger.fine("LayerListener object is being removed");    removeLayerListener((LayerListener)someObj);  }  if (someObj instanceof LayerConfigurationListener) {    logger.fine("LayerConfigurationListener is being removed.");    removeLayerConfigurationListener((LayerConfigurationListener)someObj);  }  if (someObj instanceof Layer) {    removeLayer((Layer)someObj);  }  if (someObj instanceof PlugIn) {    PlugIn pi=(PlugIn)someObj;    Component comp=pi.getComponent();    if (comp instanceof Layer && hasLayer((Layer)comp)) {      removeLayer((Layer)comp);    }  }  if (someObj instanceof PropertyHandler && someObj == getPropertyHandler()) {    setPropertyHandler(null);  }}  }
class C{  public final void run(){  if (!Display.getInstance().isEdt()) {    throw new IllegalStateException("This method should not be invoked by external code!");  }  if (styleListenerArray) {    Object[] p=(Object[])iPendingEvent;    fireStyleChangeSync((StyleListener[])iPending,(String)p[0],(Style)p[1]);    return;  }  if (actionListenerArray) {    fireActionSync((ActionListener[])iPending,(ActionEvent)iPendingEvent);    return;  }  if (focusListenerArray) {    fireFocusSync((FocusListener[])iPending,(Component)iPendingEvent);    return;  }  if (dataChangeListenerArray) {    fireDataChangeSync((DataChangedListener[])iPending,((int[])iPendingEvent)[0],((int[])iPendingEvent)[1]);    return;  }  if (selectionListenerArray) {    fireSelectionSync((SelectionListener[])iPending,((int[])iPendingEvent)[0],((int[])iPendingEvent)[1]);    return;  }  if (scrollListenerArray) {    fireScrollSync((ScrollListener[])iPending,((int[])iPendingEvent)[0],((int[])iPendingEvent)[1],((int[])iPendingEvent)[2],((int[])iPendingEvent)[3]);    return;  }  if (bindTargetArray) {    Object[] a=(Object[])iPendingEvent;    fireBindTargetChangeSync((BindTarget[])iPending,(Component)a[0],(String)a[1],a[2],a[3]);    return;  }}  }
class C{  public static IntEuclidean calculate(int a,int b){  int x=0;  int lastx=1;  int y=1;  int lasty=0;  while (b != 0) {    int quotient=a / b;    int temp=a;    a=b;    b=temp % b;    temp=x;    x=lastx - quotient * x;    lastx=temp;    temp=y;    y=lasty - quotient * y;    lasty=temp;  }  IntEuclidean result=new IntEuclidean();  result.x=lastx;  result.y=lasty;  result.gcd=a;  return result;}  }
class C{  public Matrix3 mul(Matrix3 m){  float v00=val[0] * m.val[0] + val[3] * m.val[1] + val[6] * m.val[2];  float v01=val[0] * m.val[3] + val[3] * m.val[4] + val[6] * m.val[5];  float v02=val[0] * m.val[6] + val[3] * m.val[7] + val[6] * m.val[8];  float v10=val[1] * m.val[0] + val[4] * m.val[1] + val[7] * m.val[2];  float v11=val[1] * m.val[3] + val[4] * m.val[4] + val[7] * m.val[5];  float v12=val[1] * m.val[6] + val[4] * m.val[7] + val[7] * m.val[8];  float v20=val[2] * m.val[0] + val[5] * m.val[1] + val[8] * m.val[2];  float v21=val[2] * m.val[3] + val[5] * m.val[4] + val[8] * m.val[5];  float v22=val[2] * m.val[6] + val[5] * m.val[7] + val[8] * m.val[8];  val[0]=v00;  val[1]=v10;  val[2]=v20;  val[3]=v01;  val[4]=v11;  val[5]=v21;  val[6]=v02;  val[7]=v12;  val[8]=v22;  return this;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FolderTokenFlds[");  buffer.append("m_relFlds = ").append(m_relFlds);  buffer.append(", m_multFlds = ").append(m_multFlds);  buffer.append(", m_extFlds = ").append(m_extFlds);  buffer.append("]");  return buffer.toString();}  }
class C{  public static DateTimeFormatter hourMinuteSecond(){  return Constants.hms;}  }
class C{  public GeneratingClassLoader(){  super(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.001 -0500",hash_original_method="482E6E79DCAAF2107BA2BF4B499737C2",hash_generated_method="9D4B12A61BFB1D2AC131CA59E47BD88A") public void deleteParm(String name){  parameters.delete(name);}  }
class C{  @Override public void userSelectedMoveListMove(int halfMoveNumber){  board.getResultDecorator().setDecoration(null);  getCursor().setCursor(halfMoveNumber);  enableDisableNavButtons();  refresh();  addDecorationsForLastMoveListMove();}  }
class C{  static void compileArrayStoreBarrierInt(Assembler asm,BaselineCompilerImpl compiler){  arrayStoreBarrierHelper(asm,compiler,Entrypoints.intArrayWriteBarrierMethod);}  }
class C{  public boolean verify(X509Certificate cert,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CertificateExpiredException, CertificateNotYetValidException, CMSException {  return verify(cert,CMSUtils.getProvider(sigProvider));}  }
class C{  public PcPatternRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnamelength.class,args);}  }
class C{  public List thrownExceptions(){  return this.thrownExceptions;}  }
class C{  protected void writeBestAsXhXml(EvolutionState state){  Writer out=Misc.openOutputFile(cshFilePath + cshFileName);  IXholon sysXh;  String sysClassName;  Date dateOut=new Date();  try {    out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");    sysXh=((GPIndividual)best_of_run[0]).trees[0].getParentNode().getParentNode();    sysClassName=sysXh.getXhcName();    out.write("<!--\nBest of run for " + sysClassName + "\n"+ "raw fitness: "+ ((KozaFitness)best_of_run[0].fitness).rawFitness()+ " adjusted fitness: "+ ((KozaFitness)best_of_run[0].fitness).fitness()+ " hits: "+ ((KozaFitness)best_of_run[0].fitness).hits+ "\n"+ "size of best tree: "+ ((GPIndividual)best_of_run[0]).trees[0].treeSize()+ " starting at "+ ((GPIndividual)best_of_run[0]).trees[0].getName()+ "\n"+ dateOut+ " ("+ dateOut.getTime()+ ")\n"+ "-->\n");    out.write("<Population>\n");    out.write("\t<" + sysClassName + ">"+ " <!-- xholon instance "+ sysXh.getId()+ " -->\n");    out.write("\t\t<" + sysXh.getFirstChild().getXhcName() + ">\n");    sysXh.getFirstChild().getFirstChild().writeXml(3,out);    out.write("\t\t</" + sysXh.getFirstChild().getXhcName() + ">\n");    out.write("\t\t<" + sysXh.getFirstChild().getNextSibling().getXhcName() + ">\n");    ((GPIndividual)best_of_run[0]).trees[0].writeXml(3,out);    out.write("\t\t</" + sysXh.getFirstChild().getNextSibling().getXhcName() + ">\n");    out.write("\t</" + sysClassName + ">\n");    out.write("</Population>\n");  } catch (  IOException e) {    e.printStackTrace();  }  Misc.closeOutputFile(out);}  }
class C{  public static void migrateFrom6To7(SQLiteDatabase db){  String selectQuery="SELECT * FROM " + DatabaseHelper.TABLE_GRIDITEMRELATIONS;  Cursor c=db.rawQuery(selectQuery,null);  if (c.moveToFirst()) {    do {      try {        int gridItemid=c.getInt(c.getColumnIndex(DatabaseHelper.KEY_ID));        int pluginId=c.getInt(c.getColumnIndex(DatabaseHelper.KEY_GRIDITEMRELATIONS_PLUGIN));        String pluginpageUrlQuery="SELECT " + DatabaseHelper.KEY_MUNINPLUGINS_PLUGINPAGEURL + " FROM "+ DatabaseHelper.TABLE_MUNINPLUGINS+ " WHERE "+ DatabaseHelper.KEY_ID+ " = "+ pluginId;        Cursor c2=db.rawQuery(pluginpageUrlQuery,null);        if (c2.moveToFirst()) {          String pluginpageUrl=c2.getString(c2.getColumnIndex(DatabaseHelper.KEY_MUNINPLUGINS_PLUGINPAGEURL));          ContentValues values=new ContentValues();          values.put(DatabaseHelper.KEY_GRIDITEMRELATIONS_PLUGINPAGEURL,pluginpageUrl);          db.update(DatabaseHelper.TABLE_GRIDITEMRELATIONS,values,DatabaseHelper.KEY_ID + " = ?",new String[]{String.valueOf(gridItemid)});        }        c2.close();      } catch (      Exception ex) {        ex.printStackTrace();      }    } while (c.moveToNext());  }  c.close();}  }
class C{  public String sqlMetadata_operatorNames(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_operatorNames(catalogName,schemaName);}  }
class C{  public boolean isIndexed(){  return isIndexed != null && isIndexed;}  }
class C{  void recycle(){  if (null != mImageWeakRef) {    mImageWeakRef.clear();    mImageWeakRef=null;  }  mImageBuffer=null;  mDecodedImage=null;}  }
class C{  public static void assertNull(Object object){  assertTrue(object == null);}  }
class C{  public Result run(Database database,Relation<NumberVector> relation){  final int dim=RelationUtil.dimensionality(relation);  final DistanceQuery<NumberVector> distanceQuery=database.getDistanceQuery(relation,getDistanceFunction());  final KNNQuery<NumberVector> knnQuery=database.getKNNQuery(distanceQuery,k + 1);  final double[] min=new double[dim], extend=new double[dim];  initializeDataExtends(relation,dim,min,extend);  if (!LOG.isStatistics()) {    LOG.warning("This algorithm must be used with at least logging level " + Level.STATISTICS);  }  MeanVariance hmean=new MeanVariance(), umean=new MeanVariance(), wmean=new MeanVariance();  for (int j=0; j < this.rep; j++) {    double w=computeNNForRealData(knnQuery,relation,dim);    double u=computeNNForUniformData(knnQuery,min,extend);    double h=u / (u + w);    hmean.put(h);    umean.put(u);    wmean.put(w);  }  final String prefix=this.getClass().getName();  LOG.statistics(new LongStatistic(prefix + ".samplesize",sampleSize));  LOG.statistics(new LongStatistic(prefix + ".dim",dim));  LOG.statistics(new LongStatistic(prefix + ".hopkins.nearest-neighbor",k));  LOG.statistics(new DoubleStatistic(prefix + ".hopkins.h.mean",hmean.getMean()));  LOG.statistics(new DoubleStatistic(prefix + ".hopkins.u.mean",umean.getMean()));  LOG.statistics(new DoubleStatistic(prefix + ".hopkins.w.mean",wmean.getMean()));  if (rep > 1) {    LOG.statistics(new DoubleStatistic(prefix + ".hopkins.h.std",hmean.getSampleStddev()));    LOG.statistics(new DoubleStatistic(prefix + ".hopkins.u.std",umean.getSampleStddev()));    LOG.statistics(new DoubleStatistic(prefix + ".hopkins.w.std",wmean.getSampleStddev()));  }  double x=hmean.getMean();  double ix=BetaDistribution.regularizedIncBeta(x,sampleSize,sampleSize);  double p=(x > .5) ? (1. - ix) : ix;  LOG.statistics(new DoubleStatistic(prefix + ".hopkins.p",p));  return null;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:49.768 -0500",hash_original_method="C14D3E49998397C1BAE29B9693261AA4",hash_generated_method="91279E3A882CF9CD2214172B23D3D4B8") public CdmaSmsAddress(){}  }
class C{  public IssueMatcher message(String expectedMessage){  return message().equals(expectedMessage);}  }
class C{  static void errorMissingAttribute(String systemID,int lineNr,String elementName,String attributeName) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.MISSING_ATTRIBUTE,systemID,lineNr,elementName,attributeName,null,"Element " + elementName + " expects an attribute named "+ attributeName);}  }
class C{  public void permuteRows(){  List<Integer> permutation=new ArrayList<>();  for (int i=0; i < getNumRows(); i++) {    permutation.add(i);  }  Collections.shuffle(permutation);  TetradMatrix data2=tetradMatrix.like();  for (int i=0; i < getNumRows(); i++) {    for (int j=0; j < getNumColumns(); j++) {      data2.set(i,j,tetradMatrix.get(permutation.get(i),j));    }  }  this.tetradMatrix=data2;}  }
class C{  @Override public void write(ByteBuffer bb){  if (this.ignoreWrites)   return;  checkIfWritable();  int remaining=bb.remaining();  if (remaining == 0)   return;  if (this.doNotCopy && remaining > MIN_TO_COPY) {    moveBufferToChunks();    addToChunks(bb);  } else {    int remainingSpace=this.buffer.remaining();    if (remainingSpace < remaining) {      int oldLimit=bb.limit();      bb.limit(bb.position() + remainingSpace);      this.buffer.put(bb);      bb.limit(oldLimit);      ensureCapacity(bb.remaining());    }    this.buffer.put(bb);  }}  }
class C{  public FieldAttributeModel(String fieldName,Type type){  this.fieldName=fieldName;  this.type=type;  this.typeName=convertType(type);  if (typeName.startsWith("Array<") || typeName.startsWith("Map<")) {    this.needInitialize=true;  }  if (this.type instanceof ParameterizedType) {    ParameterizedType parameterizedType=(ParameterizedType)this.type;    Type rawType=parameterizedType.getRawType();    analyzeParametrizedType(parameterizedType,rawType);  } else   if (Primitives.isPrimitive(this.type) || Primitives.isWrapperType(this.type) || String.class.equals(this.type)) {    this.isPrimitive=true;  } else   if (this.type instanceof Class && ((Class)this.type).isAnnotationPresent(DTO.class)) {    this.isDto=true;    dtoImpl=this.type.getTypeName() + "Impl";  } else   if (this.type instanceof Class && ((Class)this.type).isEnum()) {    this.isEnum=true;  }}  }
class C{  public void testGetWebResourceDataService(){  System.out.println("getWebResourceDataService");  mockInitialisationCalls(true,null);  AuditCommandImpl instance=new TestAuditCommandImpl();  WebResourceDataService result=instance.getWebResourceDataService();  assertEquals(mockWebResourceDataService,result);  setVerifyMode();}  }
class C{  void startSimulation(){  removeAllInspectors(true);  simulation.state.setSeed(randomSeed);  simulation.start();}  }
class C{  public IconBorder(Icon icon,int top,int left,int bottom,int right){  this.icon=icon;  this.top=top;  this.left=left;  this.bottom=bottom;  this.right=right;}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public ReferenceOctetStreamData(InputStream octetStream){  if (octetStream == null) {    throw new NullPointerException("octetStream is null");  }  this.octetStream=octetStream;}  }
class C{  public void print(final Object value) throws IOException {  String strValue;  if (value == null) {    final String nullString=format.getNullString();    strValue=nullString == null ? Constants.EMPTY : nullString;  } else {    strValue=value.toString();  }  this.print(value,strValue,0,strValue.length());}  }
class C{  public T dirty(boolean dirty){  holder().dirty=dirty;  return (T)this;}  }
class C{  public static double quartile(double[] values,double lowerPercent){  if (values == null || values.length == 0) {    throw new IllegalArgumentException("The data array either is null or does not contain any data.");  }  double[] v=new double[values.length];  System.arraycopy(values,0,v,0,values.length);  Arrays.sort(v);  int n=(int)Math.round(v.length * lowerPercent / 100);  return v[n];}  }
class C{  public static ScheduledThreadPoolExecutor newScheduledThreadPoolExecutor(int corePoolSize){  return newScheduledThreadPoolExecutor(corePoolSize,newNamedThreadFactory(true),defaultHandler);}  }
class C{  public synchronized void update(int[] countBuffer,int numCounts){  for (int i=0; i < numCounts; i++) {    int cmid=countBuffer[i];    int index=findOrCreateHeapIdx(cmid);    counts[index]++;    heapifyUp(index);  }  totalCountsTaken+=numCounts;  if (DEBUG)   validityCheck();}  }
class C{  public boolean isRTLLocale(){  return "iw".equals(language) || "ar".equals(language);}  }
class C{  public DSETestCaseLocalSearch(){  this(null);}  }
class C{  private static ClassVisitor handleStaticReset(String className,ClassVisitor cv){  final CreateClassResetClassAdapter resetClassAdapter;  if (Properties.RESET_STATIC_FINAL_FIELDS) {    resetClassAdapter=new CreateClassResetClassAdapter(cv,className,true);  } else {    resetClassAdapter=new CreateClassResetClassAdapter(cv,className,false);  }  cv=resetClassAdapter;  EndOfClassInitializerVisitor exitClassInitAdapter=new EndOfClassInitializerVisitor(cv,className);  cv=exitClassInitAdapter;  return cv;}  }
class C{  public void removeSystemClassDesignation(SootClass clz){  allSystemClasses.remove(clz);}  }
class C{  private static void sqlQueryWithDistributedJoin(){  IgniteCache<AffinityKey<Long>,Person> cache=Ignition.ignite().cache(PERSON_CACHE);  String joinSql="from Person, \"" + ORG_CACHE + "\".Organization as org "+ "where Person.orgId = org.id "+ "and lower(org.name) = lower(?)";  SqlQuery qry=new SqlQuery<AffinityKey<Long>,Person>(Person.class,joinSql).setArgs("ApacheIgnite");  qry.setDistributedJoins(true);  print("Following people are 'ApacheIgnite' employees (distributed join): ",cache.query(qry).getAll());  qry.setArgs("Other");  print("Following people are 'Other' employees (distributed join): ",cache.query(qry).getAll());}  }
class C{  public static void processRemoveVariableInstruction(ExecutionContext ec,String varname) throws DMLRuntimeException {  Data input1_data=ec.removeVariable(varname);  if (input1_data == null)   throw new DMLRuntimeException("Unexpected error: could not find a data object for variable name:" + varname + ", while processing rmvar instruction.");  if (input1_data instanceof MatrixObject) {    ec.cleanupMatrixObject((MatrixObject)input1_data);  }}  }
class C{  private static Properties readProps(String fileName) throws PropertyLoadException {  InputStream stream=AwsConfigReader.class.getClassLoader().getResourceAsStream(fileName);  try {    properties.load(stream);  } catch (  IOException e) {    throw new PropertyLoadException("Cannot find the Aws Properties under resources/");  }  return properties;}  }
class C{  public FriendlySwitchCompat(Context context,AttributeSet attrs){  this(context,attrs,R.attr.switchStyle);}  }
class C{  public void rename(final Object oldKey,final Object newKey){  this.parameters.put(newKey,this.parameters.remove(oldKey));}  }
class C{  public int _offsetToX(int line,int offset){  TokenMarker tokenMarker=getTokenMarker();  FontMetrics fm=painter.getFontMetrics();  getLineText(line,lineSegment);  int segmentOffset=lineSegment.offset;  int x=horizontalOffset;  if (tokenMarker == null) {    lineSegment.count=offset;    return x + Utilities.getTabbedTextWidth(lineSegment,fm,x,painter,0);  } else {    Token tokens;    if (painter.currentLineIndex == line && painter.currentLineTokens != null) {      tokens=painter.currentLineTokens;    } else {      painter.currentLineIndex=line;      tokens=painter.currentLineTokens=tokenMarker.markTokens(lineSegment,line);    }    Toolkit toolkit=painter.getToolkit();    Font defaultFont=painter.getFont();    SyntaxStyle[] styles=painter.getStyles();    for (; ; ) {      byte id=tokens.id;      if (id == Token.END) {        return x;      }      if (id == Token.NULL) {        fm=painter.getFontMetrics();      } else {        fm=styles[id].getFontMetrics(defaultFont);      }      int length=tokens.length;      if (offset + segmentOffset < lineSegment.offset + length) {        lineSegment.count=offset - (lineSegment.offset - segmentOffset);        return x + Utilities.getTabbedTextWidth(lineSegment,fm,x,painter,0);      } else {        lineSegment.count=length;        x+=Utilities.getTabbedTextWidth(lineSegment,fm,x,painter,0);        lineSegment.offset+=length;      }      tokens=tokens.next;    }  }}  }
class C{  @RequestMapping(value="/jobs",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_JOBS_POST) public Job createJob(@RequestBody JobCreateRequest request) throws Exception {  return jobService.createAndStartJob(request);}  }
class C{  public static Injector createInjector(Iterable<? extends Module> modules){  return createInjector(Stage.DEVELOPMENT,modules);}  }
class C{  public synchronized Class loadClass(final String name,boolean resolve) throws ClassNotFoundException {  Class clazz=null;  clazz=findLoadedClass(name);  if (clazz != null) {    if (resolve)     resolveClass(clazz);    return (clazz);  }  if (securityManager != null) {    int dot=name.lastIndexOf('.');    if (dot >= 0) {      try {        if (!"org.apache.jasper.runtime".equalsIgnoreCase(name.substring(0,dot))) {          securityManager.checkPackageAccess(name.substring(0,dot));        }      } catch (      SecurityException se) {        String error="Security Violation, attempt to use " + "Restricted Class: " + name;        se.printStackTrace();        throw new ClassNotFoundException(error);      }    }  }  if (!name.startsWith(Constants.JSP_PACKAGE_NAME)) {    clazz=parent.loadClass(name);    if (resolve)     resolveClass(clazz);    return clazz;  }  return findClass(name);}  }
class C{  public TSNode(TSNode other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHost()) {    this.host=other.host;  }  this.port=other.port;  this.id=other.id;  this.vNodes=other.vNodes;  this.pingFrequency=other.pingFrequency;  if (other.isSetServiceName()) {    this.serviceName=other.serviceName;  }  if (other.isSetState()) {    this.state=other.state;  }  this.timestamp=other.timestamp;}  }
class C{  public void expectEmpty() throws ParseException {  if (!isEmpty()) {    throw new ParseException(new Message(MessageType.UNUSED_TOKENS,currentPosition(),MessagePart.Factory.valueOf(peek().text)));  }}  }
class C{  public void removeSpriteFrame(String name){  spriteFrames.remove(name);}  }
class C{  public static LatLong convertCoordingate(String degrees){  String[] lalo=new String[2];  if (degrees.contains(",")) {    lalo=degrees.split(",");  } else {    int n=degrees.indexOf("N");    int ns=degrees.indexOf("n");    int s=degrees.indexOf("S");    int ss=degrees.indexOf("s");    if (n > 0) {      lalo[0]=degrees.substring(0,n + 1);      lalo[1]=degrees.substring(n + 1);    } else     if (ns > 0) {      lalo[0]=degrees.substring(0,ns + 1);      lalo[1]=degrees.substring(ns + 1);    } else     if (s > 0) {      lalo[0]=degrees.substring(0,s + 1);      lalo[1]=degrees.substring(s + 1);    } else     if (ss > 0) {      lalo[0]=degrees.substring(0,ss + 1);      lalo[1]=degrees.substring(ss + 1);    }  }  double latitude=toDecimal(lalo[0]);  double logitude=toDecimal(lalo[1]);  System.out.println("La: " + latitude + "\nLo: "+ logitude);  if (String.valueOf(latitude).length() == 1 || String.valueOf(logitude).length() == 1) {    return null;  }  return new LatLong(latitude,logitude);}  }
class C{  protected void doStateLeaveHive(){  HiveEntrance entrance=hive.getEntrance();  if (entrance.isInSphere(this)) {    forward();    return;  }  if (hive.isInSphere(this)) {    headTo(hive.getEntrance());    forward();    return;  }  if (getFoodSource() != null) {    setColor(getFoodSource().getVisualizationObject().getColor());    repeatedDance=0;    setState(State.foraging);  }  if (getFoodSource() == null) {    setColor(Color.green);    setState(State.scouting);  }}  }
class C{  @Override public boolean performFinish(){  Filter filter=page.getFilter();  if (filter != null) {    view.addFilter(filter);    return true;  }  return false;}  }
class C{  public StringBuffer[] toSource(String className,Tree parent) throws Exception {  StringBuffer[] result=new StringBuffer[2];  double[] currentProbs;  if (m_ClassProbs == null) {    currentProbs=parent.m_ClassProbs;  } else {    currentProbs=m_ClassProbs;  }  long printID=nextID();  if (m_Attribute == -1) {    result[0]=new StringBuffer("	p = ");    if (m_Info.classAttribute().isNumeric()) {      result[0].append(currentProbs[0]);    } else {      result[0].append(Utils.maxIndex(currentProbs));    }    result[0].append(";\n");    result[1]=new StringBuffer("");  } else {    StringBuffer text=new StringBuffer("");    StringBuffer atEnd=new StringBuffer("");    text.append("  static double N").append(Integer.toHexString(this.hashCode()) + printID).append("(Object []i) {\n").append("    double p = Double.NaN;\n");    text.append("    /* " + m_Info.attribute(m_Attribute).name() + " */\n");    text.append("    if (" + this.sourceExpression(-1) + ") {\n").append("      p = ");    if (m_Info.classAttribute().isNumeric()) {      text.append(currentProbs[0] + ";\n");    } else {      text.append(Utils.maxIndex(currentProbs) + ";\n");    }    text.append("    } ");    for (int i=0; i < m_Successors.length; i++) {      text.append("else if (" + this.sourceExpression(i) + ") {\n");      if (m_Successors[i].m_Attribute == -1) {        double[] successorProbs=m_Successors[i].m_ClassProbs;        if (successorProbs == null) {          successorProbs=m_ClassProbs;        }        text.append("      p = ");        if (m_Info.classAttribute().isNumeric()) {          text.append(successorProbs[0] + ";\n");        } else {          text.append(Utils.maxIndex(successorProbs) + ";\n");        }      } else {        StringBuffer[] sub=m_Successors[i].toSource(className,this);        text.append("" + sub[0]);        atEnd.append("" + sub[1]);      }      text.append("    } ");      if (i == m_Successors.length - 1) {        text.append("\n");      }    }    text.append("    return p;\n  }\n");    result[0]=new StringBuffer("    p = " + className + ".N");    result[0].append(Integer.toHexString(this.hashCode()) + printID).append("(i);\n");    result[1]=text.append("" + atEnd);  }  return result;}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  private void insertIndex(Node<K,V> z,int level){  HeadIndex<K,V> h=head;  int max=h.level;  if (level <= max) {    Index<K,V> idx=null;    for (int i=1; i <= level; ++i)     idx=new Index<K,V>(z,idx,null);    addIndex(idx,h,level);  } else {    level=max + 1;    Index<K,V>[] idxs=(Index<K,V>[])new Index<?,?>[level + 1];    Index<K,V> idx=null;    for (int i=1; i <= level; ++i)     idxs[i]=idx=new Index<K,V>(z,idx,null);    HeadIndex<K,V> oldh;    int k;    for (; ; ) {      oldh=head;      int oldLevel=oldh.level;      if (level <= oldLevel) {        k=level;        break;      }      HeadIndex<K,V> newh=oldh;      Node<K,V> oldbase=oldh.node;      for (int j=oldLevel + 1; j <= level; ++j)       newh=new HeadIndex<K,V>(oldbase,newh,idxs[j],j);      if (casHead(oldh,newh)) {        k=oldLevel;        break;      }    }    addIndex(idxs[k],oldh,k);  }}  }
class C{  public FilteredAssociationRules(Filter filter,AssociationRules rules){  super(null);  m_filter=filter;  m_wrappedRules=rules;}  }
class C{  public boolean ready(){  return idx == vals.length;}  }
class C{  public boolean isCacheable(){  return true;}  }
class C{  public boolean hasUserDataCompression(){  return mMessage.getInt(DCOMP) > 0;}  }
class C{  public byte[] toByteArray(final ArrayOfItemsSerDe<T> serDe){  if (itemsSeen_ == 0) {    return toByteArray(serDe,null);  } else {    return toByteArray(serDe,data_[0].getClass());  }}  }
class C{  public static void checkState(boolean expression){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalStateException();  }}  }
class C{  protected void doWork(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  ContextoAplicacionVO contextoAplicacion=null;  try {    CurrentUserSessionContextUtil currentUserSessionContextUtil=new CurrentUserSessionContextUtil();    contextoAplicacion=currentUserSessionContextUtil.getContextoAplicacionActual(req);    CompulsaManager compulsaManager=(CompulsaManager)IsicresSpringAppContext.getApplicationContext().getBean("isicresCompulsaManager");    DocumentoCompulsarVO documentoCompulsar=new DocumentoCompulsarVO();    populateDocumentoCompulsarVO(req,documentoCompulsar);    ConfiguracionCompulsaVO configuracion=null;    populateConfiguracionCompulsaVO(req,configuracion);    compulsaManager.compulsar(documentoCompulsar,configuracion);  } catch (  Exception e) {    logger.fatal("Error compulsando ficheros",e);    ResponseUtils.generateJavaScriptCompulsa(resp.getWriter(),RBUtil.getInstance(contextoAplicacion.getUsuarioActual().getConfiguracionUsuario().getLocale()).getProperty(Keys.I18N_ISICRESSRV_ERR_COMPUL_UPLOAD_OBJ));  }}  }
class C{  public DefaultPassageFormatter(String preTag,String postTag,String ellipsis,boolean escape){  if (preTag == null || postTag == null || ellipsis == null) {    throw new NullPointerException();  }  this.preTag=preTag;  this.postTag=postTag;  this.ellipsis=ellipsis;  this.escape=escape;}  }
class C{  public ELContextImpl(ELResolver resolver){  this.resolver=resolver;}  }
class C{  public boolean contains(Key key){  if (key == null)   throw new NullPointerException("called contains() with null key");  return st.containsKey(key);}  }
class C{  public long size(){  return isNull() ? 0 : this.end - this.start + 1;}  }
class C{  private static String toJMapAccessor(SimplyAttribute attribute){  String get=attribute.getGet();  String set=attribute.getSet();  String name=attribute.getName();  return toJMapAccessor(get,set,name);}  }
class C{  public boolean isInScroll(){  return mInScroll;}  }
class C{  public List<JCExpression> Idents(List<JCVariableDecl> params){  ListBuffer<JCExpression> ids=new ListBuffer<JCExpression>();  for (List<JCVariableDecl> l=params; l.nonEmpty(); l=l.tail)   ids.append(Ident(l.head));  return ids.toList();}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.listenerList=new EventListenerList();}  }
class C{  public IndependenceTest indTestSubset(List vars){  return null;}  }
class C{  public Plot withPaint(Paint... paint){  if (chart.getPlot() instanceof XYPlot) {    XYPlot plot=chart.getXYPlot();    XYDataset dataset=plot.getDataset(currentDataset);    XYItemRenderer renderer=plot.getRenderer(currentDataset);    for (int i=0; i < dataset.getSeriesCount(); i++) {      Paint p=paint[i % paint.length];      paintHelper.set(dataset.getSeriesKey(i),p);      renderer.setSeriesPaint(i,p);      if (renderer instanceof XYLineAndShapeRenderer) {        ((XYLineAndShapeRenderer)renderer).setSeriesFillPaint(i,p);      }    }  } else   if (chart.getPlot() instanceof CategoryPlot) {    CategoryPlot plot=chart.getCategoryPlot();    CategoryDataset dataset=plot.getDataset();    CategoryItemRenderer renderer=plot.getRenderer();    for (int i=0; i < dataset.getRowCount(); i++) {      Paint p=paint[i % paint.length];      paintHelper.set(dataset.getRowKey(i),p);      renderer.setSeriesPaint(i,p);    }  }  return this;}  }
class C{  public Element store(Object o){  DccSignalMast p=(DccSignalMast)o;  Element e=new Element("dccsignalmast");  e.setAttribute("class",this.getClass().getName());  e.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,e);  Element unlit=new Element("unlit");  if (p.allowUnLit()) {    unlit.setAttribute("allowed","yes");    unlit.addContent(new Element("aspect").addContent(Integer.toString(p.getUnlitId())));  } else {    unlit.setAttribute("allowed","no");  }  e.addContent(unlit);  SignalAppearanceMap appMap=p.getAppearanceMap();  if (appMap != null) {    java.util.Enumeration<String> aspects=appMap.getAspects();    while (aspects.hasMoreElements()) {      String key=aspects.nextElement();      Element el=new Element("aspect");      el.setAttribute("defines",key);      el.addContent(new Element("number").addContent(Integer.toString(p.getOutputForAppearance(key))));      e.addContent(el);    }  }  List<String> disabledAspects=p.getDisabledAspects();  if (disabledAspects != null) {    Element el=new Element("disabledAspects");    for (    String aspect : disabledAspects) {      Element ele=new Element("disabledAspect");      ele.addContent(aspect);      el.addContent(ele);    }    if (disabledAspects.size() != 0) {      e.addContent(el);    }  }  return e;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.837 -0500",hash_original_method="C11819B67BF410300D59BD8104FE87A4",hash_generated_method="D3F6BF35A48C5972FADA3B21B628784E") private void interruptIdleWorkers(boolean onlyOne){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    for (    Worker w : workers) {      Thread t=w.thread;      if (!t.isInterrupted() && w.tryLock()) {        try {          t.interrupt();        } catch (        SecurityException ignore) {        } finally {          w.unlock();        }      }      if (onlyOne)       break;    }  }  finally {    mainLock.unlock();  }}  }
class C{  public String writeDataFile() throws DataFileException {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  writeDataFile(bos);  String outString=bos.toString();  try {    if (bos != null)     bos.close();  } catch (  IOException e) {    Debug.logWarning(e,module);  }  return outString;}  }
class C{  public void publicMethod(){}  }
class C{  public void applyCurrentEQSettings(){  if (!mApp.isServiceRunning())   return;  equalizer50HzListener.onProgressChanged(equalizer50HzSeekBar,equalizer50HzSeekBar.getProgress(),true);  equalizer130HzListener.onProgressChanged(equalizer130HzSeekBar,equalizer130HzSeekBar.getProgress(),true);  equalizer320HzListener.onProgressChanged(equalizer320HzSeekBar,equalizer320HzSeekBar.getProgress(),true);  equalizer800HzListener.onProgressChanged(equalizer800HzSeekBar,equalizer800HzSeekBar.getProgress(),true);  equalizer2kHzListener.onProgressChanged(equalizer2kHzSeekBar,equalizer2kHzSeekBar.getProgress(),true);  equalizer5kHzListener.onProgressChanged(equalizer5kHzSeekBar,equalizer5kHzSeekBar.getProgress(),true);  equalizer12_5kHzListener.onProgressChanged(equalizer12_5kHzSeekBar,equalizer12_5kHzSeekBar.getProgress(),true);  virtualizerListener.onProgressChanged(virtualizerSeekBar,virtualizerSeekBar.getProgress(),true);  bassBoostListener.onProgressChanged(bassBoostSeekBar,bassBoostSeekBar.getProgress(),true);  reverbListener.onItemSelected(reverbSpinner,null,reverbSpinner.getSelectedItemPosition(),0l);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public StdScheduler(QuartzScheduler sched){  this.sched=sched;}  }
class C{  private Map<URI,Volume> buildVolumeMap(StorageSystem vplexSystem,List<VolumeDescriptor> descriptors,VolumeDescriptor.Type type){  Map<URI,Volume> volumeMap=new HashMap<URI,Volume>();  if (type != null) {    descriptors=VolumeDescriptor.filterByType(descriptors,new VolumeDescriptor.Type[]{type},new VolumeDescriptor.Type[]{});  }  for (  VolumeDescriptor desc : descriptors) {    if (volumeMap.containsKey(desc.getVolumeURI()) == false) {      Volume volume=getDataObject(Volume.class,desc.getVolumeURI(),_dbClient);      if (vplexSystem == null) {        volumeMap.put(desc.getVolumeURI(),volume);      } else {        if (desc.getType().equals(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME) && volume.getStorageController().toString().equals(vplexSystem.getId().toString())) {          StringSet backingVolumes=volume.getAssociatedVolumes();          if (null == backingVolumes || backingVolumes.isEmpty()) {            _log.warn("VPLEX volume {} has no backend volumes.",volume.forDisplay());          } else {            for (            String backingVolumeId : backingVolumes) {              URI backingVolumeURI=URI.create(backingVolumeId);              Volume backingVolume=getDataObject(Volume.class,backingVolumeURI,_dbClient);              volumeMap.put(backingVolumeURI,backingVolume);            }          }        }      }    }  }  return volumeMap;}  }
class C{  public int size(){  return byName.size();}  }
class C{  private WebUser(Properties ctx,String email,String password){  m_ctx=ctx;  m_AD_Client_ID=Env.getAD_Client_ID(ctx);  load(email,password);}  }
class C{  public static String toString(int optionNumber){switch (optionNumber) {case RESERVED_0:case RESERVED_1:case RESERVED_2:case RESERVED_3:case RESERVED_4:    return Names.Reserved;case IF_MATCH:  return Names.If_Match;case URI_HOST:return Names.Uri_Host;case ETAG:return Names.ETag;case IF_NONE_MATCH:return Names.If_None_Match;case URI_PORT:return Names.Uri_Port;case LOCATION_PATH:return Names.Location_Path;case URI_PATH:return Names.Uri_Path;case CONTENT_FORMAT:return Names.Content_Format;case MAX_AGE:return Names.Max_Age;case URI_QUERY:return Names.Uri_Query;case ACCEPT:return Names.Accept;case LOCATION_QUERY:return Names.Location_Query;case PROXY_URI:return Names.Proxy_Uri;case PROXY_SCHEME:return Names.Proxy_Scheme;case OBSERVE:return Names.Observe;case BLOCK2:return Names.Block2;case BLOCK1:return Names.Block1;case SIZE2:return Names.Size2;case SIZE1:return Names.Size1;default :return String.format("Unknown (%d)",optionNumber);}}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  private boolean includePasswordDetails(String username){  if (getSecurityContext() == null) {    return false;  }  return getSecurityContext().isUserInRole(Role.ADMINISTRATOR.toString()) || getSecurityContext().getUserPrincipal().getName().equals(username);}  }
class C{  public boolean isVarArgs(){  return super.isVarArgs();}  }
class C{  public static Automaton makeEmptyString(){  Automaton a=new Automaton();  a.createState();  a.setAccept(0,true);  return a;}  }
class C{  public synchronized boolean request(){  if (mPrev != null)   return mPrev.request();  return generate();}  }
class C{  public void printStackTrace(java.io.PrintWriter s){  if (s == null) {    s=new java.io.PrintWriter(System.err,true);  }  try {    String locInfo=getLocationAsString();    if (null != locInfo) {      s.println(locInfo);    }    super.printStackTrace(s);  } catch (  Throwable e) {  }  boolean isJdk14OrHigher=false;  try {    Throwable.class.getMethod("getCause",(Class<?>)null);    isJdk14OrHigher=true;  } catch (  NoSuchMethodException nsme) {  }  if (!isJdk14OrHigher) {    Throwable exception=getException();    for (int i=0; (i < 10) && (null != exception); i++) {      s.println("---------");      try {        if (exception instanceof DTMException) {          String locInfo=((DTMException)exception).getLocationAsString();          if (null != locInfo) {            s.println(locInfo);          }        }        exception.printStackTrace(s);      } catch (      Throwable e) {        s.println("Could not print stack trace...");      }      try {        Method meth=((Object)exception).getClass().getMethod("getException",(Class<?>)null);        if (null != meth) {          Throwable prev=exception;          exception=(Throwable)meth.invoke(exception,(Class<?>)null);          if (prev == exception) {            break;          }        } else {          exception=null;        }      } catch (      InvocationTargetException ite) {        exception=null;      }catch (      IllegalAccessException iae) {        exception=null;      }catch (      NoSuchMethodException nsme) {        exception=null;      }    }  }}  }
class C{  private static ChooseConfig undefinedConfig(){  return null;}  }
class C{  public static boolean hasHoneycomb(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;}  }
class C{  public void hideSheet(){  hideSheet(null);}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  private Style parseStyleForASS(String[] line,String[] styleFormat,int index,boolean isASS,String warnings){  Style newStyle=new Style(Style.defaultID());  if (line.length != styleFormat.length) {    warnings+="incorrectly formated line at " + index + "\n\n";  } else {    for (int i=0; i < styleFormat.length; i++) {      if (styleFormat[i].trim().equalsIgnoreCase("Name")) {        newStyle.iD=line[i].trim();      } else       if (styleFormat[i].trim().equalsIgnoreCase("Fontname")) {        newStyle.font=line[i].trim();      } else       if (styleFormat[i].trim().equalsIgnoreCase("Fontsize")) {        newStyle.fontSize=line[i].trim();      } else       if (styleFormat[i].trim().equalsIgnoreCase("PrimaryColour")) {        String color=line[i].trim();        if (isASS) {          if (color.startsWith("&H"))           newStyle.color=Style.getRGBValue("&HAABBGGRR",color); else           newStyle.color=Style.getRGBValue("decimalCodedAABBGGRR",color);        } else {          if (color.startsWith("&H"))           newStyle.color=Style.getRGBValue("&HBBGGRR",color); else           newStyle.color=Style.getRGBValue("decimalCodedBBGGRR",color);        }      } else       if (styleFormat[i].trim().equalsIgnoreCase("BackColour")) {        String color=line[i].trim();        if (isASS) {          if (color.startsWith("&H"))           newStyle.backgroundColor=Style.getRGBValue("&HAABBGGRR",color); else           newStyle.backgroundColor=Style.getRGBValue("decimalCodedAABBGGRR",color);        } else {          if (color.startsWith("&H"))           newStyle.backgroundColor=Style.getRGBValue("&HBBGGRR",color); else           newStyle.backgroundColor=Style.getRGBValue("decimalCodedBBGGRR",color);        }      } else       if (styleFormat[i].trim().equalsIgnoreCase("Bold")) {        newStyle.bold=Boolean.parseBoolean(line[i].trim());      } else       if (styleFormat[i].trim().equalsIgnoreCase("Italic")) {        newStyle.italic=Boolean.parseBoolean(line[i].trim());      } else       if (styleFormat[i].trim().equalsIgnoreCase("Underline")) {        newStyle.underline=Boolean.parseBoolean(line[i].trim());      } else       if (styleFormat[i].trim().equalsIgnoreCase("Alignment")) {        int placement=Integer.parseInt(line[i].trim());        if (isASS) {switch (placement) {case 1:            newStyle.textAlign="bottom-left";          break;case 2:        newStyle.textAlign="bottom-center";      break;case 3:    newStyle.textAlign="bottom-right";  break;case 4:newStyle.textAlign="mid-left";break;case 5:newStyle.textAlign="mid-center";break;case 6:newStyle.textAlign="mid-right";break;case 7:newStyle.textAlign="top-left";break;case 8:newStyle.textAlign="top-center";break;case 9:newStyle.textAlign="top-right";break;default :warnings+="undefined alignment for style at line " + index + "\n\n";}} else {switch (placement) {case 9:newStyle.textAlign="bottom-left";break;case 10:newStyle.textAlign="bottom-center";break;case 11:newStyle.textAlign="bottom-right";break;case 1:newStyle.textAlign="mid-left";break;case 2:newStyle.textAlign="mid-center";break;case 3:newStyle.textAlign="mid-right";break;case 5:newStyle.textAlign="top-left";break;case 6:newStyle.textAlign="top-center";break;case 7:newStyle.textAlign="top-right";break;default :warnings+="undefined alignment for style at line " + index + "\n\n";}}}}}return newStyle;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("AcsAccessTokenUser[");  buffer.append(", m_id = ").append(m_id);  buffer.append(", m_profile = ").append(m_profile);  buffer.append(", m_genPerms = ").append(m_genPerms);  buffer.append("]");  return buffer.toString();}  }
class C{  public NumberTick(TickType tickType,double value,String label,TextAnchor textAnchor,TextAnchor rotationAnchor,double angle){  super(tickType,value,label,textAnchor,rotationAnchor,angle);  this.number=new Double(value);}  }
class C{  protected JsonDeserializer<Object> _findRootDeserializer(DeserializationConfig cfg,JavaType valueType) throws JsonMappingException {  JsonDeserializer<Object> deser=_rootDeserializers.get(valueType);  if (deser != null) {    return deser;  }  deser=_deserializerProvider.findTypedValueDeserializer(cfg,valueType,null);  if (deser == null) {    throw new JsonMappingException("Can not find a deserializer for type " + valueType);  }  _rootDeserializers.put(valueType,deser);  return deser;}  }
class C{  public IOException wrapIOException(IOException oldError){  IOException newError=new IOException("At " + this.elementName + " "+ this.lineNumber+ ": "+ oldError.getMessage());  newError.initCause(oldError);  return newError;}  }
class C{  public void testParameters() throws Exception {  Similarity sim=getSimilarity("text_params");  assertEquals(LMJelinekMercerSimilarity.class,sim.getClass());  LMJelinekMercerSimilarity lm=(LMJelinekMercerSimilarity)sim;  assertEquals(0.4f,lm.getLambda(),0.01f);}  }
class C{  public boolean isDefined(){  return isDefined;}  }
class C{  public static Test suite(){  return (new TestSuite(CompositeAttributeITCase.class));}  }
class C{  public Builder updateUserType(String userType){  this.userType=userType;  return this;}  }
class C{  static IndexOutOfBoundsException throwIndexOutOfBoundsException(int index,int size){  throw new IndexOutOfBoundsException("Invalid index " + index + ", size is "+ size);}  }
class C{  private int localizedWeekBasedYear(TemporalAccessor temporal){  int dow=localizedDayOfWeek(temporal);  int year=temporal.get(YEAR);  int doy=temporal.get(DAY_OF_YEAR);  int offset=startOfWeekOffset(doy,dow);  int week=computeWeek(offset,doy);  if (week == 0) {    return year - 1;  } else {    ValueRange dayRange=temporal.range(DAY_OF_YEAR);    int yearLen=(int)dayRange.getMaximum();    int newYearWeek=computeWeek(offset,yearLen + weekDef.getMinimalDaysInFirstWeek());    if (week >= newYearWeek) {      return year + 1;    }  }  return year;}  }
class C{  public static CIdbSelectionDialog show(final JFrame parent,final List<String> previousDirectories){  if (!checkExporterInstall(parent)) {    return null;  }  final CIdbSelectionDialog dialog=new CIdbSelectionDialog(parent,previousDirectories);  if (parent != null) {    GuiHelper.centerChildToParent(parent,dialog,true);  }  dialog.setVisible(true);  return dialog;}  }
class C{  @Override public ValueLobDb copyToResult(){  if (handler == null) {    return this;  }  LobStorageInterface s=handler.getLobStorage();  if (s.isReadOnly()) {    return this;  }  return s.copyLob(this,LobStorageFrontend.TABLE_RESULT,getPrecision());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.TYPE_CAST_EXPRESSION__OPERAND:    return operand != null;case ExpressionsPackage.TYPE_CAST_EXPRESSION__TYPE:  return type != null;}return super.eIsSet(featureID);}  }
class C{  public NodeContribution(Map d,Set l){  Map de=null;  Set na=null;  if (l == null)   na=Collections.EMPTY_SET; else   na=new HashSet(l);  if (d == null)   de=new Hashtable(); else   de=new Hashtable(d);  names=Collections.unmodifiableSet(na);  descr=Collections.unmodifiableMap(de);}  }
class C{  public void testBug44587() throws Exception {  Exception e=null;  String msg=SQLError.createLinkFailureMessageBasedOnHeuristics((MySQLConnection)this.conn,System.currentTimeMillis() - 1000,System.currentTimeMillis() - 2000,e);  assertTrue(containsMessage(msg,"CommunicationsException.ServerPacketTimingInfo"));}  }
class C{  public Tasks<FileShareRestRep> replicationInfo(URI id,FileReplicationParam param){  UriBuilder builder=client.uriBuilder(getIdUrl() + "/protection/continuous-copies/{mid}");  URI targetUri=builder.build(id);  return postTasks(param,targetUri.getPath());}  }
class C{  public Ed25519EncodedFieldElement encode(){  final Ed25519FieldElement g=this.modP();  final int[] gValues=g.getRaw();  final int h0=gValues[0];  final int h1=gValues[1];  final int h2=gValues[2];  final int h3=gValues[3];  final int h4=gValues[4];  final int h5=gValues[5];  final int h6=gValues[6];  final int h7=gValues[7];  final int h8=gValues[8];  final int h9=gValues[9];  final byte[] s=new byte[32];  s[0]=(byte)(h0);  s[1]=(byte)(h0 >> 8);  s[2]=(byte)(h0 >> 16);  s[3]=(byte)((h0 >> 24) | (h1 << 2));  s[4]=(byte)(h1 >> 6);  s[5]=(byte)(h1 >> 14);  s[6]=(byte)((h1 >> 22) | (h2 << 3));  s[7]=(byte)(h2 >> 5);  s[8]=(byte)(h2 >> 13);  s[9]=(byte)((h2 >> 21) | (h3 << 5));  s[10]=(byte)(h3 >> 3);  s[11]=(byte)(h3 >> 11);  s[12]=(byte)((h3 >> 19) | (h4 << 6));  s[13]=(byte)(h4 >> 2);  s[14]=(byte)(h4 >> 10);  s[15]=(byte)(h4 >> 18);  s[16]=(byte)(h5);  s[17]=(byte)(h5 >> 8);  s[18]=(byte)(h5 >> 16);  s[19]=(byte)((h5 >> 24) | (h6 << 1));  s[20]=(byte)(h6 >> 7);  s[21]=(byte)(h6 >> 15);  s[22]=(byte)((h6 >> 23) | (h7 << 3));  s[23]=(byte)(h7 >> 5);  s[24]=(byte)(h7 >> 13);  s[25]=(byte)((h7 >> 21) | (h8 << 4));  s[26]=(byte)(h8 >> 4);  s[27]=(byte)(h8 >> 12);  s[28]=(byte)((h8 >> 20) | (h9 << 6));  s[29]=(byte)(h9 >> 2);  s[30]=(byte)(h9 >> 10);  s[31]=(byte)(h9 >> 18);  return new Ed25519EncodedFieldElement(s);}  }
class C{  public void addLookup(String oldName,String newName){  lookups.put(oldName,newName);}  }
class C{  void assignResult(TaskAssignmentResult result){  final Map<String,Double> scalarRequests=result.getRequest().getScalarRequests();  if (scalarRequests != null && !scalarRequests.isEmpty()) {    for (    Map.Entry<String,Double> entry : scalarRequests.entrySet()) {      if (entry.getValue() == null)       continue;      Double u=currUsedScalars.get(entry.getKey());      if (u == null)       u=0.0;      currUsedScalars.put(entry.getKey(),u + entry.getValue());    }  }  currUsedCpus+=result.getRequest().getCPUs();  currUsedMemory+=result.getRequest().getMemory();  currUsedNetworkMbps+=result.getRequest().getNetworkMbps();  currUsedDisk+=result.getRequest().getDisk();  for (int p=0; p < result.getRequest().getPorts(); p++) {    result.addPort(currPortRanges.consumeNextPort());  }  for (  Map.Entry<String,PreferentialNamedConsumableResourceSet> entry : resourceSets.entrySet()) {    result.addResourceSet(entry.getValue().consume(result.getRequest()));  }  if (!taskTracker.addAssignedTask(result.getRequest(),this))   logger.error("Unexpected to re-add task to assigned state, id=" + result.getRequest().getId());  assignmentResults.put(result.getRequest(),result);}  }
class C{  public synchronized int read(){  return (pos < count) ? (buf[pos++] & 0xff) : -1;}  }
class C{  private Map<String,String> createParameterMap(String queryString){  Map<String,String> map=new HashMap<String,String>();  String[] pairs=queryString.split("&");  for (  String pair : pairs) {    if (pair.length() < 1) {      continue;    }    String[] tokens=pair.split("=",2);    for (int j=0; j < tokens.length; j++) {      try {        tokens[j]=URLDecoder.decode(tokens[j],UTF8_CHARSET);      } catch (      UnsupportedEncodingException e) {        throw new RuntimeException(UTF8_CHARSET + " is unsupported!",e);      }    }switch (tokens.length) {case 1:{        if (pair.charAt(0) == '=') {          map.put("",tokens[0]);        } else {          map.put(tokens[0],"");        }        break;      }case 2:{      map.put(tokens[0],tokens[1]);      break;    }default :{    break;  }}}return map;}  }
class C{  public static double normalInverse(double probability){  final double smallArgumentEnd=Math.exp(-2);  final double rootedPi=Math.sqrt(2.0 * Math.PI);  if (probability <= 0.0) {    throw new IllegalArgumentException();  }  if (probability >= 1.0) {    throw new IllegalArgumentException();  }  boolean wrappedArround=false;  if (probability > (1.0 - smallArgumentEnd)) {    probability=1.0 - probability;    wrappedArround=true;  }  if (probability > smallArgumentEnd) {    probability=probability - 0.5;    double squaredProbability=probability * probability;    double x=probability;    x+=probability * (squaredProbability * solvePolynomial(squaredProbability,DIVISOR_COEFFICIENTS_0) / solvePolynomial(squaredProbability,DIVIDER_COEFFICIENTS_0));    x=x * rootedPi;    return (x);  } else {    double x=Math.sqrt(-2.0 * Math.log(probability));    double inversedX=1.0 / x;    if (x < 8.0) {      x=(x - Math.log(x) / x) - inversedX * solvePolynomial(inversedX,DIVISOR_COEFFICIENTS_1) / solvePolynomial(inversedX,DIVIDER_COEFFICIENTS_1);    } else {      x=(x - Math.log(x) / x) - inversedX * solvePolynomial(inversedX,DIVISOR_COEFFICIENTS_3) / solvePolynomial(inversedX,DIVIDER_COEFFICIENTS_3);    }    if (!wrappedArround) {      x=-x;    }    return (x);  }}  }
class C{  public void addAll(View v){  try {    getOps().insert("Bilbo","Hobbit");    getOps().insert("Gandalf","Maia");    getOps().bulkInsert(new String[]{"Thorin","Kili","Fili","Balin","Dwalin","Oin","Gloin","Dori","Nori","Ori","Bifur","Bofur","Bombur"},"Dwarf");    getOps().insert("Smaug","Dragon");    getOps().insert("Beorn","Man");    getOps().insert("Master","Man");    mNecromancerUri=getOps().insert("Necromancer","Maia");    getOps().displayAll();  } catch (  RemoteException e) {    Log.d(TAG,"exception " + e);  }}  }
class C{  public static String restrictWidth(String text,int width){  return "<html><table width=\"" + width + "\"><tr><td>"+ text+ "</td></tr></table></html>";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:48.169 -0500",hash_original_method="5D57B7D8E86E542F53B3CEE7F8A3E576",hash_generated_method="27B1A977D227EF1ED2F59B8A0BA001BA") public static final void checkToken(String token) throws ParseException {  if (token == null || token.length() == 0) {    throw new ParseException("null or empty token",-1);  } else {    for (int i=0; i < token.length(); ++i) {      if (!LexerCore.isTokenChar(token.charAt(i))) {        throw new ParseException("Invalid character(s) in string (not allowed in 'token')",i);      }    }  }}  }
class C{  public static boolean canSustainPlant(IBlockAccess world,int x,int y,int z,ForgeDirection dir,IPlantable plant){  final Block soil=world.getBlock(x,y,z);  return canSustainPlantOn(world,x,y,z,dir,plant,soil);}  }
class C{  public Bindings addOptComponent(String property,Class<? extends IValidatable> clazz,JToggleButton c,boolean enabledByDefault){  Binding b=new OptComponentBinding(this,property,clazz,c,enabledByDefault);  if (_optComponents.containsKey(property)) {    throw new BindingException(Messages.getString("Bindings.duplicate.binding"));  }  _optComponents.put(property,b);  return this;}  }
class C{  public static RequestInfo unmarkSending(RequestInfo requestInfo){  RequestInfo result=getCopy(requestInfo);  result.sending=false;  return result;}  }
class C{  public void noop() throws IOException {  spdyWriter.noop();}  }
class C{  public Boolean isDisableFullMessage(){  return disableFullMessage;}  }
class C{  private void rehash(){  expungeStaleEntries();  if (size >= threshold - threshold / 4)   resize();}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(CachedRowsetTest.class);}  }
class C{  public OFVendorDataType(Instantiable<OFVendorData> instantiable){  this.instantiable=instantiable;}  }
class C{  public Week(){  this(new Date());}  }
class C{  public JCheckBoxMenuItem(Icon icon){  this(null,icon,false);}  }
class C{  public static GridDataFactory fillDefaults(){  return new GridDataFactory().fillDefaultsInternal();}  }
class C{  public Boolean isAutoConnectDevices(){  return autoConnectDevices;}  }
class C{  public void paintProgressBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public static byte[] copyToByteArray(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(BUFFER_SIZE);  copy(in,out);  return out.toByteArray();}  }
class C{  public Object eval(String statements) throws EvalError {  if (Interpreter.DEBUG)   debug("eval(String): " + statements);  return eval(statements,globalNameSpace);}  }
class C{  private static List<Challenge> parseChallenges(RawHeaders responseHeaders,String challengeHeader){  List<Challenge> result=new ArrayList<Challenge>();  for (int h=0; h < responseHeaders.length(); h++) {    if (!challengeHeader.equalsIgnoreCase(responseHeaders.getFieldName(h))) {      continue;    }    String value=responseHeaders.getValue(h);    int pos=0;    while (pos < value.length()) {      int tokenStart=pos;      pos=HeaderParser.skipUntil(value,pos," ");      String scheme=value.substring(tokenStart,pos).trim();      pos=HeaderParser.skipWhitespace(value,pos);      if (!value.regionMatches(true,pos,"realm=\"",0,"realm=\"".length())) {        break;      }      pos+="realm=\"".length();      int realmStart=pos;      pos=HeaderParser.skipUntil(value,pos,"\"");      String realm=value.substring(realmStart,pos);      pos++;      pos=HeaderParser.skipUntil(value,pos,",");      pos++;      pos=HeaderParser.skipWhitespace(value,pos);      result.add(new Challenge(scheme,realm));    }  }  return result;}  }
class C{  public void testSortsElementsByName() throws Exception {  XppDom dom1=XppFactory.buildDom("<dom><a/></dom>");  XppDom dom2=XppFactory.buildDom("<dom><b/></dom>");  assertEquals(-1,comparator.compare(dom1,dom2));  assertEquals("/dom/a[0]?",xpath.get());  assertEquals(1,comparator.compare(dom2,dom1));  assertEquals("/dom/b[0]?",xpath.get());}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  int i;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_MethodType_info cu=(CONSTANT_MethodType_info)cp;  i=constant_pool[descriptor_index].compareTo(constant_pool,cp_constant_pool[cu.descriptor_index],cp_constant_pool);  return i;}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public boolean isFlat(){  return TYPE_FLAT.equals(getType());}  }
class C{  @Override public void apply(World world,Entity entity,Random random,Object data){  for (  IEffect effect : effects) {    effect.apply(world,entity,random,data);  }}  }
class C{  public void testNegativeRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_ar:[\u062F TO \u0698]","sort","id asc"),"//*[@numFound='0']");}  }
class C{  public Matrix solve(Matrix B){  if (B.getRowDimension() != n) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!isspd) {    throw new RuntimeException("Matrix is not symmetric positive definite.");  }  double[][] X=B.getArrayCopy();  int nx=B.getColumnDimension();  for (int k=0; k < n; k++) {    for (int j=0; j < nx; j++) {      for (int i=0; i < k; i++) {        X[k][j]-=X[i][j] * L[k][i];      }      X[k][j]/=L[k][k];    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      for (int i=k + 1; i < n; i++) {        X[k][j]-=X[i][j] * L[i][k];      }      X[k][j]/=L[k][k];    }  }  return new Matrix(X,n,nx);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.305 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public final void headTo(IMovingAgent agent){  headTo(agent.getLocation());}  }
class C{  private void createFakeStructure(){  codeStructure=new FrCodeStructure(0);  Function sourceFunction=new Function(0,"main","comment",Function.Type.MAIN);  codeStructure.putFunction(0,sourceFunction);  for (int i=1; i <= 10; i++) {    int address=i * 10;    Function function=new Function(address,"Function" + i,"",Function.Type.STANDARD);    codeStructure.putFunction(address,function);    sourceFunction.getCalls().add(new Jump(0,address,null,false));    for (int j=1; i <= 10; i++) {      int address2=i * 10 + j;      Function function2=new Function(address2,"SubFunction" + j,"",Function.Type.STANDARD);      codeStructure.putFunction(address2,function2);      function.getCalls().add(new Jump(address,address2,null,false));    }  }}  }
class C{  public List<Envelope> extrusion(final Envelope env){  final List<Envelope> list=new ArrayList<>();  final double x1=getMinX();  final double x2=getMaxX();  final double y1=getMinY();  final double y2=getMaxY();  final double xx1=env.getMinX();  final double xx2=env.getMaxX();  final double yy1=env.getMinY();  final double yy2=env.getMaxY();  if (x2 >= x1 && yy1 >= y1) {    list.add(new Envelope(x1,x2,y1,yy1));  }  if (xx1 >= x1 && y2 >= yy1) {    list.add(new Envelope(x1,xx1,yy1,y2));  }  if (x2 >= xx1 && y2 >= yy2) {    list.add(new Envelope(xx1,x2,yy2,y2));  }  if (x2 >= xx2 && yy2 >= yy1) {    list.add(new Envelope(xx2,x2,yy1,yy2));  }  return list;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void clearGaussian(){  __haveNextNextGaussian=false;}  }
class C{  public KXml2DomDriver(){  super(new XmlFriendlyNameCoder());}  }
class C{  public void doTestEntityExpiration() throws Exception {  IDeviceListener mockListener=createMock(IDeviceListener.class);  expect(mockListener.getName()).andReturn("mockListener").anyTimes();  expect(mockListener.isCallbackOrderingPostreq((String)anyObject(),(String)anyObject())).andReturn(false).atLeastOnce();  expect(mockListener.isCallbackOrderingPrereq((String)anyObject(),(String)anyObject())).andReturn(false).atLeastOnce();  ITopologyService mockTopology=createMock(ITopologyService.class);  expect(mockTopology.isAttachmentPointPort(DatapathId.of(anyLong()),OFPort.of(anyShort()))).andReturn(true).anyTimes();  expect(mockTopology.isBroadcastDomainPort(DatapathId.of(1L),OFPort.of(1))).andReturn(false).anyTimes();  expect(mockTopology.isBroadcastDomainPort(DatapathId.of(5L),OFPort.of(1))).andReturn(false).anyTimes();  expect(mockTopology.getL2DomainId(DatapathId.of(1L))).andReturn(DatapathId.of(1L)).anyTimes();  expect(mockTopology.getL2DomainId(DatapathId.of(5L))).andReturn(DatapathId.of(5L)).anyTimes();  expect(mockTopology.isConsistent(DatapathId.of(1L),OFPort.of(1),DatapathId.of(5L),OFPort.of(1))).andReturn(false).anyTimes();  Date topologyUpdateTime=new Date();  expect(mockTopology.getLastUpdateTime()).andReturn(topologyUpdateTime).anyTimes();  replay(mockTopology);  deviceManager.topology=mockTopology;  Calendar c=Calendar.getInstance();  Entity entity1=new Entity(MacAddress.of(1L),null,IPv4Address.of(2),DatapathId.of(1L),OFPort.of(1),c.getTime());  c.add(Calendar.MILLISECOND,-DeviceManagerImpl.ENTITY_TIMEOUT - 1);  Entity entity2=new Entity(MacAddress.of(1L),null,IPv4Address.of(1),DatapathId.of(5L),OFPort.of(1),c.getTime());  deviceManager.learnDeviceByEntity(entity1);  IDevice d=deviceManager.learnDeviceByEntity(entity2);  assertArrayEquals(new IPv4Address[]{IPv4Address.of(1),IPv4Address.of(2)},d.getIPv4Addresses());  assertArrayEquals(new SwitchPort[]{new SwitchPort(DatapathId.of(1L),OFPort.of(1)),new SwitchPort(DatapathId.of(5L),OFPort.of(1))},d.getAttachmentPoints());  Iterator<? extends IDevice> diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,IPv4Address.of(1),null,null);  assertTrue(diter.hasNext());  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());  diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,IPv4Address.of(2),null,null);  assertTrue(diter.hasNext());  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());  replay(mockListener);  deviceManager.addListener(mockListener);  verify(mockListener);  reset(mockListener);  mockListener.deviceIPV4AddrChanged(isA(IDevice.class));  replay(mockListener);  deviceManager.entityCleanupTask.reschedule(0,null);  d=deviceManager.getDevice(d.getDeviceKey());  assertArrayEquals(new IPv4Address[]{IPv4Address.of(2)},d.getIPv4Addresses());  assertArrayEquals(new SwitchPort[]{new SwitchPort(DatapathId.of(1L),OFPort.of(1)),new SwitchPort(DatapathId.of(5L),OFPort.of(1))},d.getAttachmentPoints());  diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,IPv4Address.of(2),null,null);  assertTrue(diter.hasNext());  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());  diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,IPv4Address.of(1),null,null);  assertFalse(diter.hasNext());  d=deviceManager.findDevice(MacAddress.of(1L),null,null,null,null);  assertArrayEquals(new IPv4Address[]{IPv4Address.of(2)},d.getIPv4Addresses());  assertArrayEquals(new SwitchPort[]{new SwitchPort(DatapathId.of(1L),OFPort.of(1)),new SwitchPort(DatapathId.of(5L),OFPort.of(1))},d.getAttachmentPoints());  verify(mockListener);}  }
class C{  public BorderLayout(){}  }
class C{  public static String lower(String s){  return s.toLowerCase(Locale.ENGLISH);}  }
class C{  private Event produceFinalEvent(final ProfileRequestContext profileRequestContext,final HttpServletResponse response,final OIDCAuthorizationRequestContext authorizationRequest,final Pair<Events,? extends Object> pairEvent,final RequestContext springRequestContext,final ClientDetailsEntity client){  try {    if (pairEvent.getFirst() == null) {      log.error("Could not determine the final event based on authorization request");      return Events.BadRequest.event(this);    }switch (pairEvent.getFirst()) {case Failure:      log.error("Failed to process authorization request. Sending back response error");    response.sendError(HttpServletResponse.SC_FORBIDDEN,"Access Denied");  break;case Redirect:if (pairEvent.getSecond() != null) {  log.debug("Authorization request indicated a redirect event to {}",pairEvent.getSecond());  final OIDCResponse oidcResponse=new OIDCResponse();  oidcResponse.setAuthorizationRequest(authorizationRequest.getAuthorizationRequest());  oidcResponse.setRedirectUri(pairEvent.getSecond().toString());  oidcResponse.setClient(client);  OIDCUtils.putOIDCResponseIntoScope(oidcResponse,springRequestContext.getFlowScope());} else {  throw new OIDCException("No redirect url could be found based on the request");}break;case Success:log.debug("Success. Proceeding with building the authorization context based on the request");profileRequestContext.addSubcontext(authorizationRequest,true);break;default :log.debug("Proceeding to final event");}final Event ev=pairEvent.getFirst().event(this);log.debug("Returning final event {}",ev.getId());return ev;} catch (final Exception e) {log.error(e.getMessage(),e);throw new OIDCException(e);}}  }
class C{  public void taskSubjectId(UUID taskSubjId){  this.taskSubjId=taskSubjId;}  }
class C{  private HttpResponse sendHttpRequest(HttpRequest request,HttpAuthenticationAgent authenticationAgent) throws PayloadException, NetworkException {  SocketConnection conn=null;  InputStream is=null;  OutputStream os=null;  try {    URL url=new URL(xdmServerAddr.toString());    StringBuilder serviceRoot=new StringBuilder();    final String path=url.getPath();    if (!TextUtils.isEmpty(path)) {      serviceRoot.append(path);    }    conn=NetworkFactory.getFactory().createSocketClientConnection();    final String host=url.getHost();    int port=url.getPort();    if (port == -1) {      port=PROTOCOL_HTTPS.equals(url.getProtocol()) ? DEFAULT_HTTPS_PORT : DEFAULT_HTTP_PORT;    }    conn.open(host,port);    is=conn.getInputStream();    os=conn.getOutputStream();    String requestUri=serviceRoot.append(request.getUrl()).toString();    StringBuilder httpRequest=new StringBuilder(request.getMethod()).append(" ").append(requestUri).append(" HTTP/1.1").append(CRLF).append("Host: ").append(host).append(":").append(port).append(CRLF).append("User-Agent: ").append(TerminalInfo.getProductName()).append(" ").append(TerminalInfo.getProductVersion(mCtx)).append(CRLF);    if (authenticationAgent != null) {      String authorizationHeader=authenticationAgent.generateAuthorizationHeader(request.getMethod(),requestUri,request.getContent());      httpRequest.append(authorizationHeader).append(CRLF);    }    String cookie=request.getCookie();    if (cookie != null) {      httpRequest.append("Cookie: ").append(cookie).append(CRLF);    }    httpRequest.append("X-3GPP-Intended-Identity: \"").append(ImsModule.getImsUserProfile().getXdmServerLogin()).append("\"").append(CRLF);    Folder folder=documents.get(request.getAUID());    if ((folder != null) && (folder.getEntry() != null) && (folder.getEntry().getEtag() != null)) {      httpRequest.append("If-match: \"").append(folder.getEntry().getEtag()).append("\"").append(CRLF);    }    if (request.getContent() != null) {      httpRequest.append("Content-type: ").append(request.getContentType()).append(CRLF);      httpRequest.append("Content-Length:").append(request.getContentLength()).append(CRLF).append(CRLF);    } else {      httpRequest.append("Content-Length: 0").append(CRLF).append(CRLF);    }    os.write(httpRequest.toString().getBytes(UTF8));    os.flush();    if (request.getContent() != null) {      os.write(request.getContent().getBytes(UTF8));      os.flush();    }    if (sLogger.isActivated()) {      if (request.getContent() != null) {        sLogger.debug("Send HTTP request:\n" + httpRequest + request.getContent());      } else {        sLogger.debug("Send HTTP request:\n" + httpRequest);      }    }    StringBuffer respTrace=new StringBuffer();    HttpResponse response=new HttpResponse();    int ch=-1;    String line="";    while ((ch=is.read()) != -1) {      line+=(char)ch;      if (line.endsWith(CRLF)) {        if (line.equals(CRLF)) {          break;        }        if (sLogger.isActivated()) {          respTrace.append(line);        }        line=line.substring(0,line.length() - 2);        if (line.startsWith("HTTP/")) {          response.setStatusLine(line);        } else {          int index=line.indexOf(":");          String name=line.substring(0,index).trim().toLowerCase();          String value=line.substring(index + 1).trim();          response.addHeader(name,value);        }        line="";      }    }    int contentLength=-1;    try {      String value=response.getHeader("content-length");      contentLength=Integer.parseInt(value);    } catch (    NumberFormatException e) {      contentLength=-1;    }    if (contentLength > 0) {      byte[] content=new byte[contentLength];      int nb=-1;      int pos=0;      byte[] buffer=new byte[1024];      while ((nb=is.read(buffer)) != -1) {        System.arraycopy(buffer,0,content,pos,nb);        pos+=nb;        if (pos >= contentLength) {          break;        }      }      if (sLogger.isActivated()) {        respTrace.append(CRLF).append(new String(content,UTF8));      }      response.setContent(content);    }    if (sLogger.isActivated()) {      sLogger.debug("Receive HTTP response:\n" + respTrace.toString());    }    String etag=response.getHeader("etag");    if ((etag != null) && (folder != null) && (folder.getEntry() != null)) {      folder.getEntry().setEtag(etag);    }    return response;  } catch (  MalformedURLException e) {    throw new PayloadException(new StringBuilder("Failed to send http request, malformed uri: ").append(xdmServerAddr).toString(),e);  }catch (  IOException e) {    throw new NetworkException("Failed to send http request!",e);  } finally {    CloseableUtils.tryToClose(conn);    CloseableUtils.tryToClose(is);    CloseableUtils.tryToClose(os);  }}  }
class C{  public void randomizeTable(int nodeIndex){  for (int rowIndex=0; rowIndex < getNumRows(nodeIndex); rowIndex++) {    randomizeRow(nodeIndex,rowIndex);  }}  }
class C{  public static void validate(String xml) throws Exception {  validate(new StreamSource(new StringReader(xml)));}  }
class C{  private KeyStore createKeys(KeyStore keyStore,String keyAlgorithm,String publicAlias,String privateAlias,PrivateKeyEntry signer) throws Exception {  PrivateKey caKey;  X509Certificate caCert;  X509Certificate[] caCertChain;  if (signer == null) {    caKey=null;    caCert=null;    caCertChain=null;  } else {    caKey=signer.getPrivateKey();    caCert=(X509Certificate)signer.getCertificate();    caCertChain=(X509Certificate[])signer.getCertificateChain();  }  PrivateKey privateKey;  X509Certificate x509c;  if (publicAlias == null && privateAlias == null) {    privateKey=null;    x509c=null;  } else {    int keySize;    if (keyAlgorithm.equals("RSA")) {      keySize=1024;    } else     if (keyAlgorithm.equals("DSA")) {      keySize=512;    } else     if (keyAlgorithm.equals("EC")) {      keySize=256;    } else     if (keyAlgorithm.equals("EC_RSA")) {      keySize=256;      keyAlgorithm="EC";    } else {      throw new IllegalArgumentException("Unknown key algorithm " + keyAlgorithm);    }    KeyPairGenerator kpg=KeyPairGenerator.getInstance(keyAlgorithm);    kpg.initialize(keySize,new SecureRandom());    KeyPair kp=kpg.generateKeyPair();    privateKey=kp.getPrivate();    PublicKey publicKey=kp.getPublic();    X500Principal issuer=((caCert != null) ? caCert.getSubjectX500Principal() : subject);    PrivateKey signingKey=(caKey == null) ? privateKey : caKey;    x509c=createCertificate(publicKey,signingKey,subject,issuer,keyUsage,ca,extendedKeyUsages,criticalExtendedKeyUsages,subjectAltNames,permittedNameConstraints,excludedNameConstraints);  }  X509Certificate[] x509cc;  if (privateAlias == null) {    x509cc=null;  } else   if (caCertChain == null) {    x509cc=new X509Certificate[]{x509c};  } else {    x509cc=new X509Certificate[caCertChain.length + 1];    x509cc[0]=x509c;    System.arraycopy(caCertChain,0,x509cc,1,caCertChain.length);  }  if (privateAlias != null) {    keyStore.setKeyEntry(privateAlias,privateKey,keyPassword,x509cc);  }  if (publicAlias != null) {    keyStore.setCertificateEntry(publicAlias,x509c);  }  return keyStore;}  }
class C{  public ObjectStreamField(String name,Class<?> cl){  if (name == null) {    throw new NullPointerException("name == null");  } else   if (cl == null) {    throw new NullPointerException("cl == null");  }  this.name=name;  this.type=new WeakReference<Class<?>>(cl);}  }
class C{  protected static boolean convertOperator(Element filterElement,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_OPERATOR_ATTRIBUTE);  if (s.length() == 0) {    return false;  }  if (SVG_ERODE_VALUE.equals(s)) {    return false;  }  if (SVG_DILATE_VALUE.equals(s)) {    return true;  }  throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_OPERATOR_ATTRIBUTE,s});}  }
class C{  public static boolean checkMembersColocation(PartitionedRegion partitionedRegion,InternalDistributedMember member){  List<PartitionRegionConfig> colocatedRegions=new ArrayList<PartitionRegionConfig>();  List<PartitionRegionConfig> tempcolocatedRegions=new ArrayList<PartitionRegionConfig>();  Region prRoot=PartitionedRegionHelper.getPRRoot(partitionedRegion.getCache());  PartitionRegionConfig regionConfig=(PartitionRegionConfig)prRoot.get(partitionedRegion.getRegionIdentifier());  if (regionConfig == null) {    return false;  }  tempcolocatedRegions.add(regionConfig);  colocatedRegions.addAll(tempcolocatedRegions);  PartitionRegionConfig prConf=null;  do {    PartitionRegionConfig tempToBeColocatedWith=tempcolocatedRegions.remove(0);    for (Iterator itr=prRoot.keySet().iterator(); itr.hasNext(); ) {      String prName=(String)itr.next();      try {        prConf=(PartitionRegionConfig)prRoot.get(prName);      } catch (      EntryDestroyedException ede) {        continue;      }      if (prConf == null) {        continue;      }      if (prConf.getColocatedWith() != null) {        if (prConf.getColocatedWith().equals(tempToBeColocatedWith.getFullPath()) || ("/" + prConf.getColocatedWith()).equals(tempToBeColocatedWith.getFullPath())) {          colocatedRegions.add(prConf);          tempcolocatedRegions.add(prConf);        }      }    }  } while (!tempcolocatedRegions.isEmpty());  PartitionRegionConfig tempColocatedWith=regionConfig;  prConf=null;  while (true) {    String colocatedWithRegionName=tempColocatedWith.getColocatedWith();    if (colocatedWithRegionName == null)     break; else {      try {        prConf=(PartitionRegionConfig)prRoot.get(getRegionIdentifier(colocatedWithRegionName));      } catch (      EntryDestroyedException ede) {        throw ede;      }      if (prConf == null) {        break;      }      colocatedRegions.add(tempColocatedWith);      tempColocatedWith=prConf;    }  }  for (  PartitionRegionConfig config : colocatedRegions) {    if (config.isColocationComplete() && !config.containsMember(member)) {      return false;    }  }  if (hasOfflineColocatedChildRegions(partitionedRegion)) {    return false;  }  return true;}  }
class C{  private int arrayCmp(byte[] A,byte[] B){  if (A == B)   return 0;  if (A == null) {    return -1;  } else   if (B == null) {    return 1;  }  int len=Math.min(A.length,B.length);  for (int i=0; i < len; i++) {    byte a=A[i];    byte b=B[i];    int diff=a - b;    if (diff > 0)     return 1; else     if (diff < 0)     return -1;  }  if (A.length > B.length)   return 1; else   if (B.length > A.length)   return -1;  return 0;}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  mScroller.startScroll(startX,startY,dx,dy);}  }
class C{  void addPage(Page page,int weight){  Weight w=pages.get(page);  if (w == null) {    w=new Weight();    w.page=page;    pages.put(page,w);  }  w.value+=weight;  page.relations++;}  }
class C{  public CommandServiceException(String message){  super(message);}  }
class C{  public TunnelCloseEvent(UserContext context,Credentials credentials,GuacamoleTunnel tunnel){  this.context=context;  this.credentials=credentials;  this.tunnel=tunnel;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void addCollapsedNodes(){  List collapsedVertexIndexes=new ArrayList();  findCollapsesFromInsertedNodes(collapsedVertexIndexes);  findCollapsesFromExistingVertices(collapsedVertexIndexes);  for (Iterator it=collapsedVertexIndexes.iterator(); it.hasNext(); ) {    int vertexIndex=((Integer)it.next()).intValue();    add(edge.getCoordinate(vertexIndex),vertexIndex);  }}  }
class C{  private static void connectDistributedSystem(){  system=(new TXLockServiceDUnitTest()).getSystem();}  }
class C{  public void clear(){  modCount++;  for (int i=0; i < size; i++) {    elementData[i]=null;  }  size=0;}  }
class C{  public void addRawPart(byte[] newPart,boolean isObject){  this.messageModified=true;  Part part=partsList[this.currentPart];  part.setPartState(newPart,isObject);  this.currentPart++;}  }
class C{  public APIException(GuacamoleStatus status,String message){  this(status.getGuacamoleStatusCode(),message);}  }
class C{  public Boolean isExpanded(){  return expandedProperty().getValue();}  }
class C{  public T caseDebug_(Debug_ object){  return null;}  }
class C{  public PlatformCache withKeepBinary(){  if (keepBinary)   return this;  return copy(rawCache.withKeepBinary(),true);}  }
class C{  @Override protected String compute(String text,double index){  if (text == null || index >= text.length() || index < 0) {    return null;  }  return "" + text.charAt((int)index);}  }
class C{  @SmallTest public void testCreateSpeechRules_useRuleWithPropertyValuesFormatter() throws Exception {  final String strategy="<ss:rule>" + "  <ss:formatter>" + "    <ss:template>@string/template_long_clicked</ss:template>"+ "    <ss:property>packageName</ss:property>"+ "  </ss:formatter>"+ "</ss:rule>";  final AccessibilityEvent event=AccessibilityEvent.obtain();  event.setPackageName("foo.bar.baz");  final EventSpeechRuleProcessor processor=createProcessorWithStrategy(strategy,1);  final Utterance utterance=new Utterance();  final boolean processed=processor.processEvent(event,utterance);  assertTrue("The event must match the filter",processed);  assertFalse("An utterance must be produced",TextUtils.isEmpty(StringBuilderUtils.getAggregateText(utterance.getSpoken())));}  }
class C{  private static void SetBooleanArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: SetBooleanArrayRegion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    boolean[] destinationArray=(boolean[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > destinationArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(Magic.objectAsAddress(destinationArray).plus(startIndex),bufAddress,length);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.THIS_LITERAL__STRICT_MODE:    setStrictMode(STRICT_MODE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public final boolean sendEmptyMessageDelayed(int what,long delayMillis){  return mExec.sendEmptyMessageDelayed(what,delayMillis);}  }
class C{  public Split(final IPartitionMetadata pmd){  this(pmd,0,0);}  }
class C{  public static void deleteTag(final AbstractSQLProvider provider,final ITreeNode<CTag> tag) throws CouldntDeleteException {  checkArguments(provider,tag);  Preconditions.checkNotNull(tag.getParent(),"IE00558: Can not delete the root tag");  final CConnection connection=provider.getConnection();  try {    final ITreeNode<CTag> parent=tag.getParent();    final String parentId=parent.getObject().getId() == 0 ? "null" : String.valueOf(parent.getObject().getId());    final String query_1=String.format("UPDATE %s SET parent_id = %s WHERE parent_id = ?",CTableNames.TAGS_TABLE,parentId);    try (PreparedStatement statement_1=connection.getConnection().prepareStatement(query_1)){      statement_1.setInt(1,tag.getObject().getId());      statement_1.executeUpdate();    }     final String query_2=String.format("DELETE FROM %s WHERE id = ?",CTableNames.TAGS_TABLE);    try (PreparedStatement statement_2=connection.getConnection().prepareStatement(query_2)){      statement_2.setInt(1,tag.getObject().getId());      statement_2.executeUpdate();    }   } catch (  final SQLException e) {    throw new CouldntDeleteException(e);  }}  }
class C{  public double distance(final Int3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  setContentView(R.layout.mediaplayer_2);  mPreview=(SurfaceView)findViewById(R.id.surface);  holder=mPreview.getHolder();  holder.addCallback(this);  holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);  extras=getIntent().getExtras();}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public StateData(S state){  this(state,false);}  }
class C{  private OrganizedOperands oganizedOperandsSingleRangeJunctionCreation(int junctionType,CompiledValue[] operandsForCJ,ExecutionContext context){  LogWriter logger=CacheUtils.getCache().getLogger();  OrganizedOperands oo=null;  try {    CompiledJunction cj=new CompiledJunction(operandsForCJ,junctionType);    context.addDependencies(new CompiledID("dummy"),cj.computeDependencies(context));    cj.getPlanInfo(context);    oo=cj.testOrganizedOperands(context);    return oo;  } catch (  Exception e) {    logger.error(e);    fail(e.toString());  }  return oo;}  }
class C{  public final double splitEnt(Distribution bags){  double returnValue=0;  int i;  for (i=0; i < bags.numBags(); i++)   returnValue=returnValue + lnFunc(bags.perBag(i));  return (lnFunc(bags.total()) - returnValue) / ContingencyTables.log2;}  }
class C{  public static boolean isBinaryEeFile(File file){  if (!file.getName().endsWith(BINARY_EXT)) {    return false;  }  try {    BinaryEventsReader r=new BinaryEventsReader(file);    r.readEvents(1);    r.close();  } catch (  SimError e) {    return false;  }  return true;}  }
class C{  public void advertisePresence(String presence){  if (!latestAdvertisedPresence.equals(presence)) {    latestAdvertisedPresence=presence;    Log.d(LOG_TAG,"Advertising presence " + presence);    myUser.updatePresence(presence,null,null);  }}  }
class C{  public static void resetCalendar(){  CACHED_CALENDAR.remove();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case VERSIONS:    return isSetVersions();case TIMESTAMP:  return isSetTimestamp();}throw new IllegalStateException();}  }
class C{  private void resetLayout(){  mLayoutTabs=null;  mBaseTab=null;}  }
class C{  private void addPortMetric(Map<String,Object> context,PortStat stat){  Stat fePortStat=new Stat();  fePortStat.setServiceType(Constants._Block);  fePortStat.setTimeCollected(stat.sampleTime);  fePortStat.setTotalIOs(stat.iops);  fePortStat.setKbytesTransferred(stat.kbytes);  fePortStat.setNativeGuid(stat.port.getNativeGuid());  fePortStat.setResourceId(stat.port.getId());  @SuppressWarnings("unchecked") List<Stat> metrics=(List<Stat>)context.get(Constants._Stats);  metrics.add(fePortStat);}  }
class C{  public Path createSourcePath(){  if (sourcePath == null) {    sourcePath=new Path(getProject());  }  return sourcePath.createPath();}  }
class C{  public void pad(int n){  if (n > x.length) {    double[] tmp=new double[n];    pad(x,tmp);    x=tmp;  }}  }
class C{  public void updateCornerFrames(){  bottomDiagFrame=getPos().add(getTileFacing().getDirectionVec()).add(length[EnumFacing.WEST.ordinal()] * EnumFacing.WEST.getFrontOffsetX() + EnumFacing.WEST.getFrontOffsetX(),length[EnumFacing.DOWN.ordinal()] * EnumFacing.DOWN.getFrontOffsetY() + EnumFacing.DOWN.getFrontOffsetY(),length[EnumFacing.NORTH.ordinal()] * EnumFacing.NORTH.getFrontOffsetZ() + EnumFacing.NORTH.getFrontOffsetZ());  topDiagFrame=getPos().add(getTileFacing().getDirectionVec()).add(length[EnumFacing.EAST.ordinal()] * EnumFacing.EAST.getFrontOffsetX() + EnumFacing.EAST.getFrontOffsetX(),length[EnumFacing.UP.ordinal()] * EnumFacing.UP.getFrontOffsetY() + EnumFacing.UP.getFrontOffsetY(),length[EnumFacing.SOUTH.ordinal()] * EnumFacing.SOUTH.getFrontOffsetZ() + EnumFacing.SOUTH.getFrontOffsetZ());}  }
class C{  protected static Shape punch(Shape shape,List<DataPoint> dataPoints,List<Shape> punchShapes,double gap,boolean roundedGaps){  if (!MathUtils.isCalculatable(gap) || gap == 0.0) {    return shape;  }  Area punched=new Area(shape);  for (int pointIndex=0; pointIndex < dataPoints.size(); pointIndex++) {    DataPoint p=dataPoints.get(pointIndex);    punched=GeometryUtils.punch(punched,gap,roundedGaps,p.position.getPoint2D(),punchShapes.get(pointIndex));  }  return punched;}  }
class C{  @Override public String toString(){  return id + " " + type;}  }
class C{  public static void assertLabel(String name,String text){  if (verbose) {    log("assertLabel(" + name + ", "+ text+ ")");  }  Label l=(Label)findByName(name);  assertBool(l != null,"Null label" + text);  assertBool(text == l.getText() || text.equals(l.getText()),name + " != " + text);}  }
class C{  public static boolean verifyCsr(PKCS10CertificationRequest csr) throws CryptoException {  try {    PublicKey pubKey=new JcaPKCS10CertificationRequest(csr).getPublicKey();    ContentVerifierProvider contentVerifierProvider=new JcaContentVerifierProviderBuilder().setProvider("BC").build(pubKey);    return csr.isSignatureValid(contentVerifierProvider);  } catch (  InvalidKeyException e) {    throw new CryptoException(res.getString("NoVerifyPkcs10Csr.exception.message"),e);  }catch (  OperatorCreationException e) {    throw new CryptoException(res.getString("NoVerifyPkcs10Csr.exception.message"),e);  }catch (  NoSuchAlgorithmException e) {    throw new CryptoException(res.getString("NoVerifyPkcs10Csr.exception.message"),e);  }catch (  PKCSException e) {    throw new CryptoException(res.getString("NoVerifyPkcs10Csr.exception.message"),e);  }}  }
class C{  public static void showStartDialog(final JFrame parent){  final IFilledList<CTutorial> tutorials=CTutorialLoader.readTutorials(Constants.startPath + File.separator + "tutorials");  final CTutorialStartDialog dialog=new CTutorialStartDialog(parent,tutorials);  dialog.setVisible(true);  final CTutorial selectedTutorial=dialog.getSelectedTutorial();  if (selectedTutorial != null) {    CTutorialDialog.instance().start(selectedTutorial);  }}  }
class C{  public void evictIfExpired(String link,long expirationTime){  try {    URL url=WorldWind.getDataFileStore().requestFile(link,false);    if (url != null) {      File file=new File(url.toURI());      if (file.lastModified() < expirationTime)       WorldWind.getDataFileStore().removeFile(link);    }  } catch (  URISyntaxException e) {    String message=Logging.getMessage("generic.UnableToResolveReference",link);    Logging.logger().warning(message);  }}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer seriesRenderer,float yAxisValue,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  paint.setColor(seriesRenderer.getColor());  paint.setStyle(Style.FILL);  float halfDiffX=getHalfDiffX(points,length,seriesNr);  int start=0;  if (startIndex > 0) {    start=2;  }  for (int i=start; i < length; i+=4) {    if (points.size() > i + 3) {      float xMin=points.get(i);      float yMin=points.get(i + 1);      float xMax=points.get(i + 2);      float yMax=points.get(i + 3);      drawBar(canvas,xMin,yMin,xMax,yMax,halfDiffX,seriesNr,seriesIndex,paint);    }  }  paint.setColor(seriesRenderer.getColor());}  }
class C{  public SimpleStringProperty stepNumberProperty(){  return this.stepNumberProperty;}  }
class C{  public void addRow(Assignment head,double prob){  if (prob < 0.0f || prob > 1.02f) {    return;  }  headVars.addAll(head.getVariables());  table.put(head,prob);}  }
class C{  public static boolean cs_gaxpy(Dcs A,double[] x,double[] y){  int p, j, n, Ap[], Ai[];  double Ax[];  if (!Dcs_util.CS_CSC(A) || x == null || y == null)   return (false);  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  for (j=0; j < n; j++) {    for (p=Ap[j]; p < Ap[j + 1]; p++) {      y[Ai[p]]+=Ax[p] * x[j];    }  }  return (true);}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  protected final PointPair calculateEdge(DisplayNode comp,Point p){  Rectangle r=comp.getBounds();  Point p1=new Point((int)(r.x + r.width / 2.0),(int)(r.y + r.height / 2.0));  Point p2=new Point(p);  p2.translate(getLocation().x,getLocation().y);  Point p3=getBoundaryIntersection(comp,p1,p2);  return (p3 == null) ? null : new PointPair(p3,p2);}  }
class C{  public double mult(DoubleMatrix1D x,DoubleMatrix1D y){  return x.zDotProduct(y);}  }
class C{  public void sendPairingKey(String pairingKey){  for (  DeviceService service : services.values()) {    service.sendPairingKey(pairingKey);  }}  }
class C{  public void start(){  new Thread(this).start();}  }
class C{  public SerializerWriteComposed(){}  }
class C{  protected Literal parseQuotedLiteral() throws IOException, RDFParseException, RDFHandlerException {  String label=parseQuotedString();  int c=peekCodePoint();  if (c == '@') {    readCodePoint();    StringBuilder lang=getBuilder();    c=readCodePoint();    if (c == -1) {      throwEOFException();    }    boolean verifyLanguageTag=getParserConfig().get(BasicParserSettings.VERIFY_LANGUAGE_TAGS);    if (verifyLanguageTag && !TurtleUtil.isLanguageStartChar(c)) {      reportError("Expected a letter, found '" + new String(Character.toChars(c)) + "'",BasicParserSettings.VERIFY_LANGUAGE_TAGS);    }    appendCodepoint(lang,c);    c=readCodePoint();    while (!TurtleUtil.isWhitespace(c)) {      if (c == '.' || c == ';' || c == ',' || c == ')' || c == ']' || c == -1) {        break;      }      if (verifyLanguageTag && !TurtleUtil.isLanguageChar(c)) {        reportError("Illegal language tag char: '" + new String(Character.toChars(c)) + "'",BasicParserSettings.VERIFY_LANGUAGE_TAGS);      }      appendCodepoint(lang,c);      c=readCodePoint();    }    unread(c);    return createLiteral(label,lang.toString(),null,getLineNumber(),-1);  } else   if (c == '^') {    readCodePoint();    verifyCharacterOrFail(readCodePoint(),"^");    skipWSC();    Value datatype=parseValue();    if (datatype instanceof IRI) {      return createLiteral(label,null,(IRI)datatype,getLineNumber(),-1);    } else {      reportFatalError("Illegal datatype value: " + datatype);      return null;    }  } else {    return createLiteral(label,null,null,getLineNumber(),-1);  }}  }
class C{  private void onNoteMarkerClick(LocationMarkerView<Note> marker){  Bitmap bitmap=mapFragment.getBitmapHandler().getNoteBitmap(Note.computeState(marker.getRelatedObject(),true,false));  if (bitmap != null) {    marker.setIcon(IconFactory.getInstance(mapFragment.getActivity()).fromBitmap(bitmap));  }  mapFragment.switchMode(MapMode.DETAIL_NOTE);  mapFragment.changeMapPositionSmooth(marker.getPosition());  mapFragment.setMarkerSelectedId(-1L);}  }
class C{  private static void parseSaio(ParsableByteArray saio,TrackFragment out) throws ParserException {  saio.setPosition(Atom.HEADER_SIZE);  int fullAtom=saio.readInt();  int flags=Atom.parseFullAtomFlags(fullAtom);  if ((flags & 0x01) == 1) {    saio.skipBytes(8);  }  int entryCount=saio.readUnsignedIntToInt();  if (entryCount != 1) {    throw new ParserException("Unexpected saio entry count: " + entryCount);  }  int version=Atom.parseFullAtomVersion(fullAtom);  out.auxiliaryDataPosition+=version == 0 ? saio.readUnsignedInt() : saio.readUnsignedLongToLong();}  }
class C{  private static String checkProperty(String key,String defaultValue){  String result=null;  if (key.equals(P_WARNING) || key.equals(P_WARNING_de))   result=defaultValue; else   if (!isClient())   result=s_prop.getProperty(key,SecureInterface.CLEARVALUE_START + defaultValue + SecureInterface.CLEARVALUE_END); else   result=s_prop.getProperty(key,SecureEngine.encrypt(defaultValue));  s_prop.setProperty(key,result);  return result;}  }
class C{  private void reconcileTransportZones(NetworkSystem networkSystem,Map<String,Set<String>> routedEndpoints) throws ControllerException {  _log.info("reconcileTransportZones for networkSystem {}",networkSystem.getId());  ControllerServiceImpl.Lock lock=ControllerServiceImpl.Lock.getLock(ControllerServiceImpl.DISCOVERY_RECONCILE_TZ);  try {    _log.debug("Acquiring lock to reconcile transport zone for networkSystem {}",networkSystem.getId());    lock.acquire();    _log.info("Acquired lock to reconcile transport zone for networkSystem {}",networkSystem.getId());    Iterator<FCEndpoint> iNewEndPoints=getNetworkSystemEndPoints(networkSystem);    List<Network> oldTransportZones=getCurrentTransportZones();    _log.info("Found {} existing transport zones",oldTransportZones.size());    Map<String,String> fabricIdsMap=getDevice().getFabricIdsMap(networkSystem);    TransportZoneReconciler reconciler=new TransportZoneReconciler();    TransportZoneReconciler.Results results=reconciler.reconcile(networkSystem,iNewEndPoints,fabricIdsMap,oldTransportZones);    String networkSystemUri=networkSystem.getId().toString();    for (    Network tzone : results.getRemoved()) {      List<String> removedEps=removeNetworkSystemTransportZone(tzone,networkSystemUri);      _log.info("Removed network {} which removed discovered endpoints {}",tzone.getNativeGuid(),removedEps);    }    for (    Network tzone : results.getAdded()) {      handleEndpointsAdded(tzone,tzone.retrieveEndpoints());      saveTransportZone(tzone,true);    }    for (    Network tzone : results.getModified()) {      if (results.getRemovedEndPoints().get(tzone) != null) {        NetworkAssociationHelper.handleEndpointsRemoved(tzone,results.getRemovedEndPoints().get(tzone),dbClient,_coordinator);      }      if (results.getAddedEndPoints().get(tzone) != null) {        handleEndpointsAdded(tzone,results.getAddedEndPoints().get(tzone));      }      saveTransportZone(tzone,false);    }    updateRoutedNetworks(networkSystem,results.getAddedAndModified(),routedEndpoints);  } catch (  Exception ex) {    throw NetworkDeviceControllerException.exceptions.reconcileTransportZonesFailedExc(new Date().toString(),ex);  } finally {    try {      _log.debug("Releasing reconcile transport zone lock for networkSystem {}",networkSystem.getId());      lock.release();      _log.info("Released reconcile transport zone lock for networkSystem {}",networkSystem.getId());    } catch (    Exception e) {      _log.error("Failed to release  Lock while reconcile transport zone for network {} -->{}",networkSystem.getId(),e.getMessage());    }  }}  }
class C{  public ChunkSection snapshot(){  return new ChunkSection(types.clone(),skyLight.snapshot(),blockLight.snapshot());}  }
class C{  public static final String findSrlName(String stream,Race race){  for (  Entrant entrant : race.getEntrants()) {    if (stream.equalsIgnoreCase(entrant.twitch)) {      return entrant.name;    }  }  return null;}  }
class C{  public Document exportExternalIDPFederation(String tenantName,boolean exportExternalIDP) throws Exception {  Document doc=new SAMLExporter(this).exportCastleSPProfile(tenantName,exportExternalIDP);  return doc;}  }
class C{  public static void showDataflowGraph(final CGraphWindow parent,final IViewContainer container,final INaviView view){  try {    final INaviView dataflowView=CDataflowViewCreator.create(container,view);    CViewOpener.showView(parent,container,dataflowView,parent);  } catch (  final InternalTranslationException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00110: " + "Could not create dataflow graph";    final String innerDescription=CUtilityFunctions.createDescription(String.format("BinNavi could not create the data flow graph of view '%s'.",view.getName()),new String[]{"An error occurred in the REIL translator code."},new String[]{"This is an internal error which you can not fix yourself. " + "Please report the bug to the zynamics support team."});    NaviErrorDialog.show(parent,innerMessage,innerDescription);  }}  }
class C{  public static DateTimeFormatter yearMonthDay(){  return Constants.ymd;}  }
class C{  public void addRelationType(RelationType relationTypeObj) throws IllegalArgumentException, InvalidRelationTypeException {  if (relationTypeObj == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"addRelationType");  List<RoleInfo> roleInfoList=relationTypeObj.getRoleInfos();  if (roleInfoList == null) {    String excMsg="No role info provided.";    throw new InvalidRelationTypeException(excMsg);  }  RoleInfo[] roleInfoArray=new RoleInfo[roleInfoList.size()];  int i=0;  for (  RoleInfo currRoleInfo : roleInfoList) {    roleInfoArray[i]=currRoleInfo;    i++;  }  RelationTypeSupport.checkRoleInfos(roleInfoArray);  addRelationTypeInt(relationTypeObj);  RELATION_LOGGER.exiting(RelationService.class.getName(),"addRelationType");  return;}  }
class C{  public DataBounds calculateProjectedImageBounds(Projection p){  DataBounds db=null;  if (sourceImageBounds != null) {    int pw=p.getWidth();    int ph=p.getHeight();    Point2D min=sourceImageBounds.getMin();    Point2D max=sourceImageBounds.getMax();    double x1=Math.floor(min.getX());    double y1=Math.floor(min.getY());    double x2=Math.ceil(max.getX());    double y2=Math.ceil(max.getY());    double width=sourceImageBounds.getWidth();    double height=sourceImageBounds.getHeight();    LatLonPoint tmpG=new LatLonPoint.Double();    Point2D tmpP=new Point2D.Double();    db=new DataBounds();    db.setHardLimits(new DataBounds(0,0,pw,ph));    db.add(p.forward(geoTrans.inverse(x1,y1,tmpG),tmpP));    db.add(p.forward(geoTrans.inverse(x1,y2,tmpG),tmpP));    db.add(p.forward(geoTrans.inverse(x2,y1,tmpG),tmpP));    db.add(p.forward(geoTrans.inverse(x2,y2,tmpG),tmpP));    double numSplits=4;    double xSpacer=width / numSplits;    double ySpacer=height / numSplits;    for (int i=1; i < numSplits; i++) {      db.add(p.forward(geoTrans.inverse(Math.ceil(x1 + xSpacer * i),y1,tmpG),tmpP));      db.add(p.forward(geoTrans.inverse(x1,Math.ceil(y1 + ySpacer * i),tmpG),tmpP));      db.add(p.forward(geoTrans.inverse(Math.ceil(x1 + xSpacer * i),y2,tmpG),tmpP));      db.add(p.forward(geoTrans.inverse(x2,Math.ceil(y1 + ySpacer * i),tmpG),tmpP));    }    if (db.getWidth() <= 0 || db.getHeight() <= 0) {      logger.fine("dimensions of data bounds bad, returning null " + db);      return null;    }  }  return db;}  }
class C{  public long totalMemory(){  return memory();}  }
class C{  public final void mulTransposeBoth(Matrix3d m1,Matrix3d m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m10 * m2.m01 + m1.m20 * m2.m02;    this.m01=m1.m00 * m2.m10 + m1.m10 * m2.m11 + m1.m20 * m2.m12;    this.m02=m1.m00 * m2.m20 + m1.m10 * m2.m21 + m1.m20 * m2.m22;    this.m10=m1.m01 * m2.m00 + m1.m11 * m2.m01 + m1.m21 * m2.m02;    this.m11=m1.m01 * m2.m10 + m1.m11 * m2.m11 + m1.m21 * m2.m12;    this.m12=m1.m01 * m2.m20 + m1.m11 * m2.m21 + m1.m21 * m2.m22;    this.m20=m1.m02 * m2.m00 + m1.m12 * m2.m01 + m1.m22 * m2.m02;    this.m21=m1.m02 * m2.m10 + m1.m12 * m2.m11 + m1.m22 * m2.m12;    this.m22=m1.m02 * m2.m20 + m1.m12 * m2.m21 + m1.m22 * m2.m22;  } else {    double m00, m01, m02, m10, m11, m12, m20, m21, m22;    m00=m1.m00 * m2.m00 + m1.m10 * m2.m01 + m1.m20 * m2.m02;    m01=m1.m00 * m2.m10 + m1.m10 * m2.m11 + m1.m20 * m2.m12;    m02=m1.m00 * m2.m20 + m1.m10 * m2.m21 + m1.m20 * m2.m22;    m10=m1.m01 * m2.m00 + m1.m11 * m2.m01 + m1.m21 * m2.m02;    m11=m1.m01 * m2.m10 + m1.m11 * m2.m11 + m1.m21 * m2.m12;    m12=m1.m01 * m2.m20 + m1.m11 * m2.m21 + m1.m21 * m2.m22;    m20=m1.m02 * m2.m00 + m1.m12 * m2.m01 + m1.m22 * m2.m02;    m21=m1.m02 * m2.m10 + m1.m12 * m2.m11 + m1.m22 * m2.m12;    m22=m1.m02 * m2.m20 + m1.m12 * m2.m21 + m1.m22 * m2.m22;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m20=m20;    this.m21=m21;    this.m22=m22;  }}  }
class C{  public static String normalizeChar(String c){  Tuple2<String,List<String>> letterAndDiacritics=normalizeCharSeparateDiacritics(c);  return letterAndDiacritics._1 + StringHelper.join(letterAndDiacritics._2);}  }
class C{  public JVM(){  this(System.getProperty("java.version"));}  }
class C{  public FilePart(String key,File file,String type){  header=createHeader(key,file.getName(),type);  this.file=file;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public BufferCache(int size){  super(size);}  }
class C{  @Override protected Money handleTransactionThatIsPaymentInAdvanceOfInstallment(final LoanRepaymentScheduleInstallment currentInstallment,final List<LoanRepaymentScheduleInstallment> installments,final LoanTransaction loanTransaction,final LocalDate transactionDate,final Money paymentInAdvance,final List<LoanTransactionToRepaymentScheduleMapping> transactionMappings){  final MonetaryCurrency currency=paymentInAdvance.getCurrency();  Money transactionAmountRemaining=paymentInAdvance;  Money principalPortion=Money.zero(currency);  Money interestPortion=Money.zero(currency);  Money feeChargesPortion=Money.zero(currency);  Money penaltyChargesPortion=Money.zero(currency);  if (loanTransaction.isInterestWaiver()) {    interestPortion=currentInstallment.waiveInterestComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(interestPortion);    loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  } else   if (loanTransaction.isChargePayment()) {    if (loanTransaction.isPenaltyPayment()) {      penaltyChargesPortion=currentInstallment.payPenaltyChargesComponent(transactionDate,transactionAmountRemaining);      transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);    } else {      feeChargesPortion=currentInstallment.payFeeChargesComponent(transactionDate,transactionAmountRemaining);      transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);    }  } else {    if (currentInstallment.isPrincipalNotCompleted(currency)) {      principalPortion=currentInstallment.payPrincipalComponent(transactionDate,transactionAmountRemaining);      if (currentInstallment.isPrincipalCompleted(currency)) {        currentInstallment.waiveInterestComponent(transactionDate,currentInstallment.getInterestCharged(currency));      }      loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);      transactionAmountRemaining=transactionAmountRemaining.minus(principalPortion);    }    principalPortion=currentInstallment.payPrincipalComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(principalPortion);    interestPortion=currentInstallment.payInterestComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(interestPortion);    feeChargesPortion=currentInstallment.payFeeChargesComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);    penaltyChargesPortion=currentInstallment.payPenaltyChargesComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);  }  loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  if (principalPortion.plus(interestPortion).plus(feeChargesPortion).plus(penaltyChargesPortion).isGreaterThanZero()) {    transactionMappings.add(LoanTransactionToRepaymentScheduleMapping.createFrom(currentInstallment,principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion));  }  return transactionAmountRemaining;}  }
class C{  public ResourceFactory(String resourceId){  this.resourceId=Objects.requireNonNull(resourceId);}  }
class C{  private String multipleSelectorString(int currentNumber,int individualTotal,int totalNumber){  NumberSequencer tmpSequencer=new NumberSequencer(totalNumber);  tmpSequencer.setCurrentNumber(currentNumber);  StringBuilder selectorString=new StringBuilder();  for (int i=0; i < individualTotal; i++) {    selectorString.append(singleSelectorString(tmpSequencer.nextNumber()));    if (i > 0) {      selectorString.append(" OR ");    }  }  return selectorString.toString();}  }
class C{  public GPNode obtainERC(EvolutionState state,int genomeVal,int threadnum,GPNode node,HashMap ercMapsForFancyPrint){  ArrayList ERCList=(ArrayList)(ERCBank.get(Integer.valueOf(genomeVal)));  if (ERCList == null) {    ERCList=new ArrayList();    ERCBank.put(new Integer(genomeVal),ERCList);  }  GPNode dummy=null;  for (int i=0; i < ERCList.size(); i++) {    dummy=(GPNode)ERCList.get(i);    if (dummy.nodeEquivalentTo(node))     if (ercMapsForFancyPrint != null)     ercMapsForFancyPrint.put(new Integer(genomeVal),dummy);    return dummy.lightClone();  }  node=node.lightClone();  node.resetNode(state,threadnum);  ERCList.add(node);  if (ercMapsForFancyPrint != null)   ercMapsForFancyPrint.put(new Integer(genomeVal),node);  return node;}  }
class C{  public boolean existsPage(int pageID){  if (pageID < 0) {    return false;  }  Session session=this.__getHibernateSession();  session.beginTransaction();  List returnList=session.createNativeQuery("select p.id from PageMapLine as p where p.pageID = :pageId").setParameter("pageId",pageID,IntegerType.INSTANCE).list();  session.getTransaction().commit();  return returnList.size() != 0;}  }
class C{  public boolean isIncludeNullsProduct(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsProduct);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static public Var<?> var(){  return Var.var(UUID.randomUUID().toString());}  }
class C{  public Result testClassifier(Classifier h,Instances D_train,Instances D_test,int partition[][]) throws Exception {  trainClassifier(m_Classifier,D_train,partition);  Result result=Evaluation.testClassifier((ProblemTransformationMethod)h,D_test);  if (h instanceof MultiTargetClassifier || Evaluation.isMT(D_test)) {    result.setInfo("Type","MT");  } else   if (h instanceof ProblemTransformationMethod) {    result.setInfo("Threshold",MLEvalUtils.getThreshold(result.predictions,D_train,"PCut1"));    result.setInfo("Type","ML");  }  result.setValue("N_train",D_train.numInstances());  result.setValue("N_test",D_test.numInstances());  result.setValue("LCard_train",MLUtils.labelCardinality(D_train));  result.setValue("LCard_test",MLUtils.labelCardinality(D_test));  result.setInfo("Classifier_name",h.getClass().getName());  result.setInfo("Classifier_info",h.toString());  result.setInfo("Dataset_name",MLUtils.getDatasetName(D_test));  result.output=Result.getStats(result,"1");  return result;}  }
class C{  public ModuleFilter createModuleFilter(){  ModuleFilterImpl moduleFilter=new ModuleFilterImpl();  return moduleFilter;}  }
class C{  public UnsignedByte(byte b){  num=b;}  }
class C{  public Set<ShardId> lockedShards(){synchronized (shardLocks) {    ImmutableSet.Builder<ShardId> builder=ImmutableSet.builder();    return builder.addAll(shardLocks.keySet()).build();  }}  }
class C{  @Override public boolean initialImageInit(final LocalRegion r,final long lastModifiedTime,final Object newValue,final boolean create,final boolean wasRecovered,final boolean versionTagAccepted) throws RegionClearedException {synchronized (clearOccured) {    if (!clearOccured) {      invokeRemoteClearAndWait(otherVM,thisVM);      clearOccured=true;    }  }  try {    boolean result=super.initialImageInit(r,lastModifiedTime,newValue,create,wasRecovered,versionTagAccepted);  } catch (  RegionClearedException rce) {    throw rce;  }catch (  Exception ex) {    fail("Caught exception during initialImageInit: " + ex);  }  return true;}  }
class C{  public static boolean verifyExportGroupMatches(ExportGroup exportGroupToCheck,String exportGroupLabel,URI project,URI vArray,URI computeResource,String resourceType){  if (exportGroupToCheck != null) {    if (!exportGroupToCheck.getLabel().equals(exportGroupLabel)) {      _logger.info("export group label mismatch: {} and {}",exportGroupToCheck.getLabel(),exportGroupLabel);      return false;    }    if (!exportGroupToCheck.getProject().getURI().equals(project)) {      _logger.info("export group project mismatch: {} and {}",exportGroupToCheck.getProject().getURI(),project);      return false;    }    if (!exportGroupToCheck.getVirtualArray().equals(vArray)) {      _logger.info("export group varray mismatch: {} and {}",exportGroupToCheck.getLabel(),exportGroupLabel);      return false;    }    if (computeResource != null && resourceType != null) {      if (ExportGroup.ExportGroupType.Host.toString().equalsIgnoreCase(resourceType)) {        if (exportGroupToCheck.hasHost(computeResource) && !ExportGroup.ExportGroupType.Cluster.toString().equalsIgnoreCase(exportGroupToCheck.getType())) {          _logger.info("Export Groups {} matching Varray/Project/ComputeResource exists",exportGroupToCheck.getId());          return true;        }      } else       if (ExportGroup.ExportGroupType.Cluster.toString().equalsIgnoreCase(resourceType)) {        if (exportGroupToCheck.hasCluster(computeResource)) {          _logger.info("Export Groups {} matching Varray/Project/ComputeResource exists",exportGroupToCheck.getId());          return true;        }      } else {        return false;      }    }  }  return true;}  }
class C{  public synchronized void initStack(String localAddr,String proxyAddr,int proxyPort,String protocol,boolean tcpFallback) throws PayloadException {  closeStack();  mSipInterface=new SipInterface(localAddr,proxyAddr,proxyPort,protocol,tcpFallback,mRcsSettings);  mSipInterface.initialize();}  }
class C{  public int readBits(int n){  if (n == 0) {    return 0;  }  int returnValue=0;  while (n >= 8) {    int byteValue;    if (bitOffset != 0) {      byteValue=((data[byteOffset] & 0xFF) << bitOffset) | ((data[byteOffset + 1] & 0xFF) >>> (8 - bitOffset));    } else {      byteValue=data[byteOffset];    }    n-=8;    returnValue|=(byteValue & 0xFF) << n;    byteOffset++;  }  if (n > 0) {    int nextBit=bitOffset + n;    byte writeMask=(byte)(0xFF >> (8 - n));    if (nextBit > 8) {      returnValue|=((((data[byteOffset] & 0xFF) << (nextBit - 8) | ((data[byteOffset + 1] & 0xFF) >> (16 - nextBit))) & writeMask));      byteOffset++;    } else {      returnValue|=(((data[byteOffset] & 0xFF) >> (8 - nextBit)) & writeMask);      if (nextBit == 8) {        byteOffset++;      }    }    bitOffset=nextBit % 8;  }  assertValidOffset();  return returnValue;}  }
class C{  public void testNonexistingSeqno() throws Exception {  File logDir=prepareLogDir("testNonexistingSeqno");  DiskLog log=openLog(logDir,false);  writeEventsToLog(log,0,3);  LogConnection conn=log.connect(true);  for (int i=0; i < 3; i++) {    assertTrue(conn.seek(i));  }  assertTrue("can seek to end",conn.seek(3));  assertNull("cannot read past end",conn.next(false));  for (int i=4; i < 10; i++) {    assertTrue("seek past end",conn.seek(i));    assertNull("find non-existing event",conn.next(false));  }  conn.release();  log.release();}  }
class C{  @SuppressWarnings("unused") public void show(){  show(MIN_DELAY);}  }
class C{  private void startDocument(final boolean multiObjectMode) throws SAXException {  if (depth == 0) {    contentHandler.startDocument();    if (multiObjectMode) {      depth++;    }  }}  }
class C{  public synchronized void updateNString(String columnName,String x) throws SQLException {  updateNString(findColumn(columnName),x);}  }
class C{  public LocoNetMessage writeStatus(int status){  LocoNetMessage l=new LocoNetMessage(4);  l.setOpCode(LnConstants.OPC_SLOT_STAT1);  l.setElement(1,slot);  l.setElement(2,(stat & ~LnConstants.LOCOSTAT_MASK) | status);  return l;}  }
class C{  public ImageFormatter makeClone(){  return new SVGFormatter();}  }
class C{  public Long srem(final byte[] key,final byte[]... member){  checkIsInMulti();  client.srem(key,member);  return client.getIntegerReply();}  }
class C{  private void updateStyleImp(Map<String,Object> style){  if (style != null) {    if (style.containsKey(Constants.Name.LINES)) {      int lines=WXStyle.getLines(style);      if (lines > 0) {        mNumberOfLines=lines;      }    }    if (style.containsKey(Constants.Name.FONT_SIZE)) {      mFontSize=WXStyle.getFontSize(style);    }    if (style.containsKey(Constants.Name.FONT_WEIGHT)) {      mFontWeight=WXStyle.getFontWeight(style);    }    if (style.containsKey(Constants.Name.FONT_STYLE)) {      mFontStyle=WXStyle.getFontStyle(style);    }    if (style.containsKey(Constants.Name.COLOR)) {      mColor=WXResourceUtils.getColor(WXStyle.getTextColor(style));      mIsColorSet=mColor != Integer.MIN_VALUE;    }    if (style.containsKey(Constants.Name.TEXT_DECORATION)) {      mTextDecoration=WXStyle.getTextDecoration(style);    }    if (style.containsKey(Constants.Name.FONT_FAMILY)) {      mFontFamily=WXStyle.getFontFamily(style);    }    mAlignment=WXStyle.getTextAlignment(style);    textOverflow=WXStyle.getTextOverflow(style);    int lineHeight=WXStyle.getLineHeight(style);    if (lineHeight != UNSET) {      mLineHeight=lineHeight;    }  }}  }
class C{  public static ConfigurationHolder changeProfile(String profileName,boolean setDefault){  logger.trace("changeProfile to " + profileName);  String currentProfileName=getCurrentProfileName();  getDefaultConfiguration().setProperty(PROPERTY_NAME_CURRENTCONFIGURATION,profileName);  currentProfile=null;  getCurrentProfile();  if (setDefault)   getDefaultConfiguration().setProperty(PROPERTY_NAME_CURRENTCONFIGURATION,profileName);  return currentProfile;}  }
class C{  public String previous(){  int first=data.getFirst();  scroll(first - data.getRows());  return (null);}  }
class C{  public static Stats of(Iterator<? extends Number> values){  StatsAccumulator accumulator=new StatsAccumulator();  accumulator.addAll(values);  return accumulator.snapshot();}  }
class C{  public GridLog4jRollingFileAppender(Layout layout,String filename,boolean append) throws IOException {  super(layout,filename,append);  init();}  }
class C{  private Notification createNotification(Episode episode,MediaSession session,Bitmap channelArt){  if (episode == null) {    return null;  }  int state=podcastPlayerService.getPlaybackState();  Timber.d("Creating notification for state: %d",state);  boolean isPlaying=state == PlaybackState.STATE_PLAYING;  Notification.Builder builder=new Notification.Builder(podcastPlayerService).setShowWhen(false).setPriority(Notification.PRIORITY_DEFAULT).setLargeIcon(channelArt).setSmallIcon(R.drawable.ic_stat_playing).setContentTitle(episode.getTitle()).setContentText(episode.getChannelTitle()).setContentIntent(PendingIntentHelper.getOpenNowPlayingIntent(podcastPlayerService,episode)).setDeleteIntent(PendingIntentHelper.getStopServiceIntent(podcastPlayerService)).setVisibility(Notification.VISIBILITY_PUBLIC).setCategory(Notification.CATEGORY_TRANSPORT).addAction(R.drawable.ic_notification_action_rewind,"Skip Backward",PendingIntentHelper.getSeekBackwardIntent(podcastPlayerService)).addAction(PlaybackButtonHelper.getNotificationPlaybackButtonResId(state),isPlaying ? "Pause" : "Play",PendingIntentHelper.getPlayOrPauseIntent(podcastPlayerService,state)).addAction(R.drawable.ic_notification_action_forward,"Skip Ahead",PendingIntentHelper.getSeekForwardIntent(podcastPlayerService)).setStyle(new Notification.MediaStyle().setMediaSession(session.getSessionToken()).setShowActionsInCompactView(0,1,2)).setOngoing(isPlaying);  return builder.build();}  }
class C{  public static FromClause create(Stream stream,OuterJoinQualifier outerJoinQualifier,Stream streamSecond){  return new FromClause(stream,outerJoinQualifier,streamSecond);}  }
class C{  private void loadFile(){  log.info("");  JFileChooser chooser=new JFileChooser();  chooser.setDialogType(JFileChooser.OPEN_DIALOG);  chooser.setDialogTitle(Msg.getMsg(Env.getCtx(),"AttachmentNew"));  chooser.setMultiSelectionEnabled(true);  int returnVal=chooser.showOpenDialog(this);  if (returnVal != JFileChooser.APPROVE_OPTION)   return;  File[] files=chooser.getSelectedFiles();  for (  File file : files) {    int cnt=m_attachment.getEntryCount();    boolean add=true;    for (int i=0; i < cnt; i++) {      if (m_attachment.getEntryName(i).equals(file.getName())) {        if (m_attachment.updateEntry(i,file)) {          cbContent.setSelectedItem(file.getName());          m_change=true;        }        add=false;        break;      }    }    if (add) {      if (m_attachment.addEntry(file)) {        cbContent.addItem(file.getName());        cbContent.setSelectedIndex(cbContent.getItemCount() - 1);        m_change=true;      }    }  }}  }
class C{  public void removeAllStreamsFromOwner(SocketAddress addr){  logger.info("Remove streams mapping for host {}",addr);  Set<String> streamsForHost=address2Streams.get(addr);  if (null != streamsForHost) {synchronized (streamsForHost) {      for (      String s : streamsForHost) {        if (stream2Addresses.remove(s,addr)) {          logger.info("Removing mapping for stream : {} from host : {}",s,addr);          ownershipStatsLogger.onRemove(s);        }      }      address2Streams.remove(addr,streamsForHost);    }  }}  }
class C{  private void initHandler(ContentHandler ch) throws SAXException {  if (locator != null)   ch.setDocumentLocator(locator);  ch.startDocument();  for (PrefixMapping pm=prefixMapping; pm != null; pm=pm.parent)   ch.startPrefixMapping(pm.prefix,pm.uri);}  }
class C{  public void processEvent(SystemEvent event) throws AbortProcessingException {}  }
class C{  public static String translateProfanity(String text){  if ((text == null) || text.isEmpty()) {    return text;  }  String lowerText=text.toLowerCase();  String translation=text;  for (  String profanity : profanityMap.keySet()) {    if (lowerText.indexOf(profanity) != -1) {      StringWriter writer=new StringWriter();      TextStream stream=new TextStream(text);      while (!stream.atEnd()) {        writer.write(stream.nextWhitespace());        String word=stream.nextWord();        if (word != null) {          writer.write(mapProfanity(word));        }      }      return writer.toString();    }  }  return translation;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapgetnameditem.class,args);}  }
class C{  public boolean isInRange(Proto min,Proto max){  return isAfterOrAt(min) && isBefore(max);}  }
class C{  public void thankComment(final String commentId,final String senderId) throws ServiceException {  try {    final JSONObject comment=commentRepository.get(commentId);    if (null == comment) {      return;    }    if (Comment.COMMENT_STATUS_C_INVALID == comment.optInt(Comment.COMMENT_STATUS)) {      return;    }    final JSONObject sender=userRepository.get(senderId);    if (null == sender) {      return;    }    if (UserExt.USER_STATUS_C_VALID != sender.optInt(UserExt.USER_STATUS)) {      return;    }    final String receiverId=comment.optString(Comment.COMMENT_AUTHOR_ID);    final JSONObject receiver=userRepository.get(receiverId);    if (null == receiver) {      return;    }    if (UserExt.USER_STATUS_C_VALID != receiver.optInt(UserExt.USER_STATUS)) {      return;    }    if (receiverId.equals(senderId)) {      throw new ServiceException(langPropsService.get("thankSelfLabel"));    }    final int rewardPoint=Symphonys.getInt("pointThankComment");    if (rewardQueryService.isRewarded(senderId,commentId,Reward.TYPE_C_COMMENT)) {      return;    }    final String rewardId=Ids.genTimeMillisId();    final boolean succ=null != pointtransferMgmtService.transfer(senderId,receiverId,Pointtransfer.TRANSFER_TYPE_C_COMMENT_REWARD,rewardPoint,rewardId);    if (!succ) {      throw new ServiceException(langPropsService.get("transferFailLabel"));    }    final JSONObject reward=new JSONObject();    reward.put(Keys.OBJECT_ID,rewardId);    reward.put(Reward.SENDER_ID,senderId);    reward.put(Reward.DATA_ID,commentId);    reward.put(Reward.TYPE,Reward.TYPE_C_COMMENT);    rewardMgmtService.addReward(reward);    final JSONObject notification=new JSONObject();    notification.put(Notification.NOTIFICATION_USER_ID,receiverId);    notification.put(Notification.NOTIFICATION_DATA_ID,rewardId);    notificationMgmtService.addCommentThankNotification(notification);  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Thanks a comment[id=" + commentId + "] failed",e);    throw new ServiceException(e);  }}  }
class C{  @Override public void insertBaselineCounter(){}  }
class C{  protected void performBoostingInfCriterion() throws Exception {  double bestCriterion=Double.MAX_VALUE;  int bestIteration=0;  int noMin=0;  double criterionValue=Double.MAX_VALUE;  double[][] trainYs=getYs(m_train);  double[][] trainFs=getFs(m_numericData);  double[][] probs=getProbs(trainFs);  int iteration=0;  while (iteration < m_maxIterations) {    boolean foundAttribute=performIteration(iteration,trainYs,trainFs,probs,m_numericData);    if (foundAttribute) {      iteration++;      m_numRegressions=iteration;    } else {      break;    }    double numberOfAttributes=m_numParameters + iteration;    criterionValue=2.0 * negativeLogLikelihood(trainYs,probs) + 2.0 * numberOfAttributes;    if (noMin > m_heuristicStop) {      break;    }    if (criterionValue < bestCriterion) {      bestCriterion=criterionValue;      bestIteration=iteration;      noMin=0;    } else {      noMin++;    }  }  m_numRegressions=0;  m_regressions=initRegressions();  performBoosting(bestIteration);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__REFERENCE:    setReference((EObject)null);  return;case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__OPERATION_CALL:setOperationCall(OPERATION_CALL_EDEFAULT);return;case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARGS:getArgs().clear();return;case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARRAY_SELECTOR:getArraySelector().clear();return;case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARRAY_ACCESS:setArrayAccess(ARRAY_ACCESS_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private void onBluetoothActionStateChanged(Context context,Intent intent){  int currentState=intent.getIntExtra(BluetoothAdapter.EXTRA_STATE,DEFAULT_INT);  int previousState=intent.getIntExtra(BluetoothAdapter.EXTRA_PREVIOUS_STATE,DEFAULT_INT);  String currentStateString=getBTStateStringFromCode(currentState);  String previousStateString=getBTStateStringFromCode(previousState);  log.debug(String.format("BT state change. %s (%d) to %s (%d) ",previousStateString,previousState,currentStateString,currentState));switch (currentState) {case BluetoothAdapter.STATE_TURNING_OFF:case BluetoothAdapter.STATE_OFF:    showNoBluetoothNotification(context);  break;case BluetoothAdapter.STATE_TURNING_ON:case BluetoothAdapter.STATE_ON:dismissNoBluetoothNotification(context);break;}}  }
class C{  public void createCircle(Coordinate p){  Coordinate pt=new Coordinate(p.x + distance,p.y);  segList.addPt(pt);  addFillet(p,0.0,2.0 * Math.PI,-1,distance);  segList.closeRing();}  }
class C{  public String ruleString(XMLObject xo){  for (  XMLSyntaxRule rule : rules) {    if (!rule.isSatisfied(xo))     return rule.ruleString(xo);  }  return ruleString();}  }
class C{  public boolean isSignatureValid(){  return ECKey.verify(Sha256Hash.hashTwice(content),signature,params.getAlertSigningKey());}  }
class C{  public boolean confirmOverwrite(final File file){  String message="The file \"" + file.getName() + "\" already exists. Overwrite?";  Object[] options={"OK","Cancel"};  return JOptionPane.YES_OPTION == JOptionPane.showOptionDialog(null,message,"Warning",JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);}  }
class C{  public void checkToRestoreLastDataSelection(){  if (istRestoreWanted(PRESELECT.LAST_ITEMS)) {    int[] lastSelectedItems=toIntArray(prefs.getString(PRESELECT.LAST_ITEMS.toString(),""));    if (lastSelectedItems.length > 0) {      if (!selectDataItems(lastSelectedItems,true)) {        prefs.edit().remove(PRESELECT.LAST_ITEMS.toString()).apply();        log.warn(String.format("Invalid preselection: %s",Arrays.toString(lastSelectedItems)));      }    }  }  if (istRestoreWanted(PRESELECT.LAST_VIEW_MODE)) {    DATA_VIEW_MODE lastMode=DATA_VIEW_MODE.valueOf(prefs.getString(PRESELECT.LAST_VIEW_MODE.toString(),DATA_VIEW_MODE.LIST.toString()));    setDataViewMode(lastMode);  }}  }
class C{  public static double max(double x,double y){  return (x > y) ? x : y;}  }
class C{  private static void findAndClickMyLocation(Activity activity){  createTrackIfEmpty(1,false);  sendGps(30);  View myLocation=SOLO.getCurrentActivity().findViewById(R.id.map_my_location);  instrumentation.waitForIdleSync();  if (myLocation == null) {    ArrayList<ImageButton> aa=SOLO.getCurrentViews(ImageButton.class);    for (    ImageButton imageButton : aa) {      if (imageButton.getContentDescription() != null && imageButton.getContentDescription().equals(activity.getString(R.string.image_my_location))) {        myLocation=imageButton;        break;      }    }  }  SOLO.clickOnView(myLocation);}  }
class C{  final boolean isRunningOrShutdown2(boolean shutdownOK){  int rs=runStateOf(ctl.get());  return rs == RUNNING || (rs == SHUTDOWN && shutdownOK);}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked){  return encodeBase64(binaryData,isChunked,false);}  }
class C{  private HashMap<Concept,Map<Date,List<Obs>>> constructObsMap(List<Obs> observations,Date earliestDay){  HashMap<Concept,Map<Date,List<Obs>>> obsByConcept=new HashMap<>();  Calendar calendar=Calendar.getInstance();  calendar.setTime(earliestDay);  Date start=earliestDay;  calendar.add(Calendar.DATE,1);  Date end=calendar.getTime();  for (int i=observations.size() - 1; i >= 0; i--) {    Obs obs=observations.get(i);    Map<Date,List<Obs>> conceptObs=obsByConcept.get(obs.getConcept());    if (conceptObs == null) {      conceptObs=new HashMap<>();      obsByConcept.put(obs.getConcept(),conceptObs);    }    while (!obs.getObsDatetime().before(end)) {      start=end;      calendar.add(Calendar.DATE,1);      end=calendar.getTime();    }    List<Obs> obsSet=conceptObs.get(start);    if (obsSet == null) {      obsSet=new ArrayList<>();      conceptObs.put(start,obsSet);    }    obsSet.add(obs);  }  return obsByConcept;}  }
class C{  public final Vec2D signum(){  x=(x < 0 ? -1 : x == 0 ? 0 : 1);  y=(y < 0 ? -1 : y == 0 ? 0 : 1);  return this;}  }
class C{  public HighlightTextView(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.HighlightTextView);  mHighlightPosition=typedArray.getInt(R.styleable.HighlightTextView_highlight_position,mHighlightPosition);  mHighlightColor=typedArray.getColor(R.styleable.HighlightTextView_highlight_color,mHighlightColor);  mHighlightNum=typedArray.getInt(R.styleable.HighlightTextView_highlight_num,mHighlightNum);  typedArray.recycle();  init();}  }
class C{  public AbstractMRMessage createInitPacket(){  return null;}  }
class C{  private static String toHexString(byte b[]){  int pos=0;  char[] c=new char[b.length * 2];  for (int i=0; i < b.length; i++) {    c[pos++]=toHex[(b[i] >> 4) & 0x0F];    c[pos++]=toHex[b[i] & 0x0f];  }  return new String(c);}  }
class C{  public static BinaryClass load(Environment env,DataInputStream in) throws IOException {  return load(env,in,~(ATT_CODE | ATT_ALLCLASSES));}  }
class C{  public void initAll(){  Logging.logd("Initialization started.");  setContentView(R.layout.main_corn);  preInit();  init();  isInitialized=true;}  }
class C{  public static SpringConfig fromOrigamiTensionAndFriction(double qcTension,double qcFriction){  return new SpringConfig(OrigamiValueConverter.tensionFromOrigamiValue(qcTension),OrigamiValueConverter.frictionFromOrigamiValue(qcFriction));}  }
class C{  public static boolean isFulBlock(Block block){  int minX=(int)(block.getBlockBoundsMinX() * 100);  int minY=(int)(block.getBlockBoundsMinY() * 100);  int minZ=(int)(block.getBlockBoundsMinZ() * 100);  int maxX=(int)(block.getBlockBoundsMaxX() * 100);  int maxY=(int)(block.getBlockBoundsMaxY() * 100);  int maxZ=(int)(block.getBlockBoundsMaxZ() * 100);  return minX == 0 && minY == 0 && minZ == 0 && maxX == 100 && maxY == 100 && maxZ == 100;}  }
class C{  static public void assertEquals(String message,Object expected,Object actual){  if (expected == null && actual == null)   return;  if (expected != null && expected.equals(actual))   return;  failNotEquals(message,expected,actual);}  }
class C{  public static BitmapSampled cropBitmap(Context context,Uri loadedImageUri,float[] points,int degreesRotated,int orgWidth,int orgHeight,boolean fixAspectRatio,int aspectRatioX,int aspectRatioY,int reqWidth,int reqHeight){  int sampleMulti=1;  while (true) {    try {      return cropBitmap(context,loadedImageUri,points,degreesRotated,orgWidth,orgHeight,fixAspectRatio,aspectRatioX,aspectRatioY,reqWidth,reqHeight,sampleMulti);    } catch (    OutOfMemoryError e) {      sampleMulti*=2;      if (sampleMulti > 16) {        throw new RuntimeException("Failed to handle OOM by sampling (" + sampleMulti + "): "+ loadedImageUri+ "\r\n"+ e.getMessage(),e);      }    }  }}  }
class C{  public SetKeyPasswordAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("SetKeyPasswordAction.statusbar"));  putValue(NAME,res.getString("SetKeyPasswordAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("SetKeyPasswordAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("SetKeyPasswordAction.image")))));}  }
