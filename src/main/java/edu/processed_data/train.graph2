class C{  public void printMemory(){  m_readLock.lock();  for (  final MemoryChunk chunk : m_chunks) {    chunk.print();  }  m_readLock.unlock();}  }
class C{  public static ImageSource uri(String uri){  if (uri == null) {    throw new NullPointerException("Uri must not be null");  }  if (!uri.contains("://")) {    if (uri.startsWith("/")) {      uri=uri.substring(1);    }    uri=FILE_SCHEME + uri;  }  return new ImageSource(Uri.parse(uri));}  }
class C{  public GroupBuilder<T,UnionBuilder<T,E>> left(){  return new GroupBuilder<T,UnionBuilder<T,E>>(this);}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof Integer) {    this.put(key,((Integer)value).intValue() + 1);  } else   if (value instanceof Long) {    this.put(key,((Long)value).longValue() + 1);  } else   if (value instanceof Double) {    this.put(key,((Double)value).doubleValue() + 1);  } else   if (value instanceof Float) {    this.put(key,((Float)value).floatValue() + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  public static cuComplex cuCmplx(float r,float i){  cuComplex res=new cuComplex();  res.x=r;  res.y=i;  return res;}  }
class C{  public Observable<String> exerciseZip(Observable<String> a,Observable<String> b){  return Observable.zip(a,b,null);}  }
class C{  public int maximalSquare(char[][] matrix){  if (matrix == null) {    return 0;  }  int r=matrix.length;  int c=r == 0 ? 0 : matrix[0].length;  int[][] dp=new int[r + 1][c + 1];  int maxLen=0;  for (int i=1; i <= r; i++) {    for (int j=1; j <= c; j++) {      if (matrix[i - 1][j - 1] == '1') {        dp[i][j]=Math.min(Math.min(dp[i - 1][j],dp[i][j - 1]),dp[i - 1][j - 1]) + 1;        maxLen=Math.max(maxLen,dp[i][j]);      }    }  }  return maxLen * maxLen;}  }
class C{  public PermissionCollection newPermissionCollection(){  return new ExecOptionPermissionCollection();}  }
class C{  public void watchForAvailability(){  watch(true);}  }
class C{  private static String extractIdFromUrl(String url){  int lastSlash=url.lastIndexOf('/');  if (lastSlash == -1 || lastSlash == (url.length() - 1)) {    throw new IllegalArgumentException("Id is in a strange format. " + url);  }  String oid=url.substring(lastSlash + 1);  return oid;}  }
class C{  public static Mapper<String> singleString(){  return singleString;}  }
class C{  protected void applyStatus(IStatus status){  String msg=status.getMessage();  if (msg != null && msg.length() == 0) {    msg=null;  }switch (status.getSeverity()) {case IStatus.OK:    setMessage(msg,IMessageProvider.NONE);  setErrorMessage(null);break;case IStatus.WARNING:setMessage(msg,IMessageProvider.WARNING);setErrorMessage(null);break;case IStatus.INFO:setMessage(msg,IMessageProvider.INFORMATION);setErrorMessage(null);break;default :setMessage(null);setErrorMessage(msg);break;}}  }
class C{  public StrBuilder append(long value){  return append(String.valueOf(value));}  }
class C{  public StrBuilder appendln(final char ch){  return append(ch).appendNewLine();}  }
class C{  public void put(String key,Boolean value){  mValues.put(key,value);}  }
class C{  private Workflow.Method deleteStorageViewMethod(URI vplexURI,URI exportMaskURI){  return new Workflow.Method(DELETE_STORAGE_VIEW,vplexURI,exportMaskURI);}  }
class C{  public void addInternetScsiSendTargets(HostStorageSystem storageSystem,HostInternetScsiHba hba,String... addresses){  try {    storageSystem.addInternetScsiSendTargets(hba.getDevice(),createInternetScsiSendTargets(addresses));  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  NotFound e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  private void testBug71396MultiSettingsCheck(String connProps,int maxRows,int limitClause,int expRowCount) throws SQLException {  Connection testConn=getConnectionWithProps(connProps);  Statement testStmt=testConn.createStatement();  if (maxRows > 0) {    testStmt.setMaxRows(maxRows);  }  testStmt.execute("SELECT 1");  testBug71396StatementCheck(testStmt,String.format("SELECT * FROM testBug71396 LIMIT %d",limitClause),expRowCount);  testBug71396PrepStatementCheck(testConn,String.format("SELECT * FROM testBug71396 LIMIT %d",limitClause),expRowCount,maxRows);  testStmt.close();  testConn.close();}  }
class C{  private Base64(){}  }
class C{  public void dumpAll(Iterator<? extends Object> data,Writer output){  dumpAll(data,output,null);}  }
class C{  public void add(String documentId,HistoryEvent event){  if (historyLogger == null) {    LOGGER.error("Logging history event withouth an initialised logger");    return;  }switch (loggerLevel) {case "warn":    historyLogger.warn(DEFAULT_FORMAT,Instant.ofEpochMilli(event.getTimestamp()),documentId,event.getRecordable().getInternalId(),event.getReferrer(),event.getAction());  break;case "error":historyLogger.error(DEFAULT_FORMAT,Instant.ofEpochMilli(event.getTimestamp()),documentId,event.getRecordable().getInternalId(),event.getReferrer(),event.getAction());break;case "trace":historyLogger.trace(DEFAULT_FORMAT,Instant.ofEpochMilli(event.getTimestamp()),documentId,event.getRecordable().getInternalId(),event.getReferrer(),event.getAction());break;case "info":default :historyLogger.info(DEFAULT_FORMAT,Instant.ofEpochMilli(event.getTimestamp()),documentId,event.getRecordable().getInternalId(),event.getReferrer(),event.getAction());break;}}  }
class C{  public synchronized <T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {  try {    if ("java.sql.Connection".equals(iface.getName()) || "java.sql.Wrapper.class".equals(iface.getName())) {      return iface.cast(this);    }    if (unwrappedInterfaces == null) {      unwrappedInterfaces=new HashMap<Class<?>,Object>();    }    Object cachedUnwrapped=unwrappedInterfaces.get(iface);    if (cachedUnwrapped == null) {      cachedUnwrapped=Proxy.newProxyInstance(this.mc.getClass().getClassLoader(),new Class<?>[]{iface},new ConnectionErrorFiringInvocationHandler(this.mc));      unwrappedInterfaces.put(iface,cachedUnwrapped);    }    return iface.cast(cachedUnwrapped);  } catch (  ClassCastException cce) {    throw SQLError.createSQLException("Unable to unwrap to " + iface.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,this.exceptionInterceptor);  }}  }
class C{  public static void addOptionalFeatures(ImageRequestBuilder imageRequestBuilder,Config config){  if (config.usePostprocessor) {    final Postprocessor postprocessor;switch (config.postprocessorType) {case "use_slow_postprocessor":      postprocessor=DelayPostprocessor.getMediumPostprocessor();    break;case "use_fast_postprocessor":  postprocessor=DelayPostprocessor.getFastPostprocessor();break;default :postprocessor=DelayPostprocessor.getMediumPostprocessor();}imageRequestBuilder.setPostprocessor(postprocessor);}if (config.rotateUsingMetaData) {imageRequestBuilder.setRotationOptions(RotationOptions.autoRotateAtRenderTime());} else {imageRequestBuilder.setRotationOptions(RotationOptions.forceRotation(config.forcedRotationAngle));}}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  Node(K key,Object value,Node<K,V> next){  this.key=key;  this.value=value;  this.next=next;}  }
class C{  public static void run(AdSense adsense) throws Exception {  System.out.println("=================================================================");  System.out.println("Listing all dimensions for default account");  System.out.println("=================================================================");  Metadata dimensions=adsense.metadata().dimensions().list().execute();  if (dimensions.getItems() != null && !dimensions.getItems().isEmpty()) {    for (    ReportingMetadataEntry dimension : dimensions.getItems()) {      boolean firstProduct=true;      StringBuilder products=new StringBuilder();      for (      String product : dimension.getSupportedProducts()) {        if (!firstProduct) {          products.append(", ");        }        products.append(product);        firstProduct=false;      }      System.out.printf("Dimension id \"%s\" for product(s): [%s] was found.\n",dimension.getId(),products.toString());    }  } else {    System.out.println("No dimensions found.");  }  System.out.println();}  }
class C{  public void doTest(String filename,int dim,int iter) throws Exception {  System.out.println("Allocating arrays.");  double[] db=new double[dim];  float[] fl=new float[dim];  int[] in=new int[dim];  long[] ln=new long[dim];  short[] sh=new short[dim];  byte[] by=new byte[dim];  char[] ch=new char[dim];  boolean[] bl=new boolean[dim];  System.out.println("Initializing arrays -- may take a while");  int sign=1;  for (int i=0; i < dim; i+=1) {    double x=sign * Math.pow(10.,20 * Math.random() - 10);    db[i]=x;    fl[i]=(float)x;    if (Math.abs(x) < 1) {      x=1 / x;    }    in[i]=(int)x;    ln[i]=(long)x;    sh[i]=(short)x;    by[i]=(byte)x;    ch[i]=(char)x;    bl[i]=x > 0;    sign=-sign;  }  by[0]=Byte.MIN_VALUE;  by[1]=Byte.MAX_VALUE;  by[2]=0;  ch[0]=Character.MIN_VALUE;  ch[1]=Character.MAX_VALUE;  ch[2]=0;  sh[0]=Short.MAX_VALUE;  sh[1]=Short.MIN_VALUE;  sh[0]=0;  in[0]=Integer.MAX_VALUE;  in[1]=Integer.MIN_VALUE;  in[2]=0;  ln[0]=Long.MIN_VALUE;  ln[1]=Long.MAX_VALUE;  ln[2]=0;  fl[0]=Float.MIN_VALUE;  fl[1]=Float.MAX_VALUE;  fl[2]=Float.POSITIVE_INFINITY;  fl[3]=Float.NEGATIVE_INFINITY;  fl[4]=Float.NaN;  fl[5]=0;  db[0]=Double.MIN_VALUE;  db[1]=Double.MAX_VALUE;  db[2]=Double.POSITIVE_INFINITY;  db[3]=Double.NEGATIVE_INFINITY;  db[4]=Double.NaN;  db[5]=0;  double[] db2=new double[dim];  float[] fl2=new float[dim];  int[] in2=new int[dim];  long[] ln2=new long[dim];  short[] sh2=new short[dim];  byte[] by2=new byte[dim];  char[] ch2=new char[dim];  boolean[] bl2=new boolean[dim];  int[][][][] multi=new int[10][10][10][10];  int[][][][] multi2=new int[10][10][10][10];  for (int i=0; i < 10; i+=1) {    multi[i][i][i][i]=i;  }  standardFileTest(filename,iter,in,in2);  standardStreamTest(filename,iter,in,in2);  buffStreamSimpleTest(filename,iter,in,in2);  bufferedFileTest(filename,iter,db,db2,fl,fl2,ln,ln2,in,in2,sh,sh2,ch,ch2,by,by2,bl,bl2,multi,multi2);  bufferedStreamTest(filename,iter,db,db2,fl,fl2,ln,ln2,in,in2,sh,sh2,ch,ch2,by,by2,bl,bl2,multi,multi2);}  }
class C{  public void go(){synchronized (monitor) {    this.returnValue=GO;    monitor.notifyAll();  }}  }
class C{  protected void reset(){}  }
class C{  public UndeployDeployableScriptCommand(Configuration configuration,String resourcePath,Deployable deployable){  super(configuration,resourcePath);  this.deployable=deployable;}  }
class C{  PdfBoxRenderer(BaseDocument doc,UnicodeImplementation unicode,HttpStreamFactory httpStreamFactory,OutputStream os,FSUriResolver resolver,FSCache cache,SVGDrawer svgImpl,PageDimensions pageSize,float pdfVersion,String replacementText,boolean testMode){  _pdfDoc=new PDDocument();  _pdfDoc.setVersion(pdfVersion);  _svgImpl=svgImpl;  _dotsPerPoint=DEFAULT_DOTS_PER_POINT;  _testMode=testMode;  _outputDevice=new PdfBoxOutputDevice(DEFAULT_DOTS_PER_POINT,testMode);  _outputDevice.setWriter(_pdfDoc);  PdfBoxUserAgent userAgent=new PdfBoxUserAgent(_outputDevice);  if (httpStreamFactory != null) {    userAgent.setHttpStreamFactory(httpStreamFactory);  }  if (resolver != null) {    userAgent.setUriResolver(resolver);  }  if (cache != null) {    userAgent.setExternalCache(cache);  }  _sharedContext=new SharedContext();  _sharedContext.registerWithThread();  _sharedContext.setUserAgentCallback(userAgent);  _sharedContext.setCss(new StyleReference(userAgent));  userAgent.setSharedContext(_sharedContext);  _outputDevice.setSharedContext(_sharedContext);  PdfBoxFontResolver fontResolver=new PdfBoxFontResolver(_sharedContext,_pdfDoc);  _sharedContext.setFontResolver(fontResolver);  PdfBoxReplacedElementFactory replacedElementFactory=new PdfBoxReplacedElementFactory(_outputDevice,svgImpl);  _sharedContext.setReplacedElementFactory(replacedElementFactory);  _sharedContext.setTextRenderer(new PdfBoxTextRenderer());  _sharedContext.setDPI(DEFAULT_PDF_POINTS_PER_INCH * _dotsPerPoint);  _sharedContext.setDotsPerPixel(DEFAULT_DOTS_PER_PIXEL);  _sharedContext.setPrint(true);  _sharedContext.setInteractive(false);  this.getSharedContext().setDefaultPageSize(pageSize.w,pageSize.h,pageSize.isSizeInches);  if (replacementText != null) {    this.getSharedContext().setReplacementText(replacementText);  }  if (unicode.splitterFactory != null) {    this._splitterFactory=unicode.splitterFactory;  }  if (unicode.reorderer != null) {    this._reorderer=unicode.reorderer;    this._outputDevice.setBidiReorderer(_reorderer);  }  if (unicode.lineBreaker != null) {    _sharedContext.setLineBreaker(unicode.lineBreaker);  }  if (unicode.charBreaker != null) {    _sharedContext.setCharacterBreaker(unicode.charBreaker);  }  if (unicode.toLowerTransformer != null) {    _sharedContext.setUnicodeToLowerTransformer(unicode.toLowerTransformer);  }  if (unicode.toUpperTransformer != null) {    _sharedContext.setUnicodeToUpperTransformer(unicode.toUpperTransformer);  }  if (unicode.toTitleTransformer != null) {    _sharedContext.setUnicodeToTitleTransformer(unicode.toTitleTransformer);  }  this._defaultTextDirection=unicode.textDirection ? BidiSplitter.RTL : BidiSplitter.LTR;  if (doc.html != null) {    this.setDocumentFromStringP(doc.html,doc.baseUri);  } else   if (doc.document != null) {    this.setDocumentP(doc.document,doc.baseUri);  } else   if (doc.uri != null) {    this.setDocumentP(doc.uri);  } else   if (doc.file != null) {    try {      this.setDocumentP(doc.file);    } catch (    IOException e) {      XRLog.exception("Problem trying to read input XHTML file",e);      throw new RuntimeException("File IO problem",e);    }  }  this._os=os;}  }
class C{  public boolean isEsmeDeliveryAcknowledgement(){  return isEsmeDeliveryAcknowledgement(esmClass);}  }
class C{  public QueryException(String message,int errorCode,String sqlState,Throwable cause){  super(message,cause);  this.message=message;  this.errorCode=errorCode;  this.sqlState=sqlState;}  }
class C{  public static Class<?> mapSimpleType(RamlParamType param){switch (param) {case BOOLEAN:    return Boolean.class;case DATE:  return Date.class;case INTEGER:return Long.class;case NUMBER:return BigDecimal.class;case FILE:return MultipartFile.class;default :return String.class;}}  }
class C{  public void put(String key,boolean value){  super.put(key,Boolean.valueOf(value));}  }
class C{  public ExtensionInfo(String extensionKey,Attributes attr) throws NullPointerException {  String s;  if (extensionKey != null) {    s=extensionKey + "-";  } else {    s="";  }  String attrKey=s + Name.EXTENSION_NAME.toString();  name=attr.getValue(attrKey);  if (name != null)   name=name.trim();  attrKey=s + Name.SPECIFICATION_TITLE.toString();  title=attr.getValue(attrKey);  if (title != null)   title=title.trim();  attrKey=s + Name.SPECIFICATION_VERSION.toString();  specVersion=attr.getValue(attrKey);  if (specVersion != null)   specVersion=specVersion.trim();  attrKey=s + Name.SPECIFICATION_VENDOR.toString();  specVendor=attr.getValue(attrKey);  if (specVendor != null)   specVendor=specVendor.trim();  attrKey=s + Name.IMPLEMENTATION_VERSION.toString();  implementationVersion=attr.getValue(attrKey);  if (implementationVersion != null)   implementationVersion=implementationVersion.trim();  attrKey=s + Name.IMPLEMENTATION_VENDOR.toString();  vendor=attr.getValue(attrKey);  if (vendor != null)   vendor=vendor.trim();  attrKey=s + Name.IMPLEMENTATION_VENDOR_ID.toString();  vendorId=attr.getValue(attrKey);  if (vendorId != null)   vendorId=vendorId.trim();  attrKey=s + Name.IMPLEMENTATION_URL.toString();  url=attr.getValue(attrKey);  if (url != null)   url=url.trim();}  }
class C{  public void increaseNestingLevel(){  this.nestingLevel++;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void addPage(@NotNull WizardPage<T> page,int index,boolean replace){  if (index >= wizardPages.size()) {    addPage(page);    return;  }  if (replace) {    setPage(page,index);  } else {    List<WizardPage<T>> before=ListHelper.slice(wizardPages,0,index);    WizardPage<T> currentPage=wizardPages.get(index);    List<WizardPage<T>> after=ListHelper.slice(wizardPages,index + 1,wizardPages.size());    wizardPages.clear();    wizardPages.addAll(before);    addPage(page);    wizardPages.add(currentPage);    wizardPages.addAll(after);  }}  }
class C{  public DecoderResult decode(boolean[][] image) throws FormatException, ChecksumException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[j][i]) {        bits.set(j,i);      }    }  }  return decode(bits);}  }
class C{  public void paint(Graphics g,Shape allocation){  Rectangle a=(Rectangle)allocation;  painter.paint(g,a.x,a.y,a.width,a.height,this);  super.paint(g,a);}  }
class C{  void jbInit() throws Exception {  this.setLayout(borderLayout1);  jPanel1.setLayout(borderLayout6);  jPanel4.setLayout(gridLayout1);  jPanel2.setLayout(borderLayout3);  jPanel3.setLayout(borderLayout5);  jPanel4.setBackground(Color.orange);  jPanel2.setBackground(Color.red);  jPanel3.setBackground(Color.pink);  gridLayout1.setVgap(5);  jPanel17.setLayout(borderLayout9);  jPanel16.setLayout(borderLayout8);  jPanel10.setLayout(gridLayout5);  flowLayout5.setVgap(0);  jPanel7.setLayout(flowLayout5);  flowLayout4.setHgap(2);  flowLayout4.setAlignment(0);  flowLayout4.setVgap(0);  jPanel8.setLayout(flowLayout4);  jPanel9.setLayout(gridLayout9);  jPanel18.setLayout(flowLayout1);  jPanel.setLayout(gridLayout8);  flowLayout1.setVgap(2);  flowLayout1.setHgap(2);  flowLayout5.setAlignment(0);  flowLayout5.setHgap(1);  jPanel15.setLayout(borderLayout7);  gridLayout1.setHgap(2);  jPanel13.setLayout(gridLayout2);  jPanel5.setLayout(borderLayout2);  this.add(jPanel1,BorderLayout.CENTER);  jPanel1.add(jPanel2,BorderLayout.NORTH);  jPanel2.add(jPanel5,BorderLayout.NORTH);  jPanel5.add(jPanel16,BorderLayout.NORTH);  jPanel16.add(jPanel8,BorderLayout.EAST);  jPanel8.add(jPanel9,null);  jPanel9.add(jButtonHelp,null);  jPanel16.add(jPanel7,BorderLayout.WEST);  jPanel7.add(jPanel10,null);  jPanel10.add(jButtonNew,null);  jPanel10.add(jButtonOpen,null);  jPanel10.add(jButtonSaveAs,null);  jPanel10.add(jButtonSave,null);  jPanel10.add(jButtonPrint,null);  jPanel10.add(jButtonClose,null);  jPanel5.add(jPanel17,BorderLayout.SOUTH);  jPanel17.add(jPanel18,BorderLayout.WEST);  jPanel18.add(jPanel,null);  jPanel.add(jButtonCopy,null);  jPanel.add(jButtonCut,null);  jPanel.add(jButtonPaste,null);  jPanel1.add(jPanel3,BorderLayout.CENTER);  jPanel3.add(jPanel15,BorderLayout.CENTER);  jPanel15.add(jScrollPane1,BorderLayout.CENTER);  jScrollPane1.getViewport().add(jTextArea1,null);  jPanel1.add(jPanel4,BorderLayout.SOUTH);  jPanel4.add(jPanel13,null);  jPanel13.add(statusBar,null);  jTextArea1.setPreferredSize(new Dimension(200,100));}  }
class C{  @Override public void performRequest(String request){  if (request.compareTo("Show preview") == 0) {    showPreview();    return;  }  if (request.indexOf(":") < 0) {    return;  }  String tempI=request.substring(0,request.indexOf(':'));  int index=Integer.parseInt(tempI);  index--;  String req=request.substring(request.indexOf(')') + 1,request.length()).trim();  Object target=((BeanInstance)m_subFlow.elementAt(index)).getBean();  if (target instanceof Startable && req.equals(((Startable)target).getStartMessage())) {    try {      ((Startable)target).start();    } catch (    Exception ex) {      if (m_log != null) {        String compName=(target instanceof BeanCommon) ? ((BeanCommon)target).getCustomName() : "";        m_log.logMessage("Problem starting subcomponent " + compName);      }    }  } else {    ((UserRequestAcceptor)target).performRequest(req);  }}  }
class C{  private String addAliasToIdentifier(String where,String alias){  String sqlkey="AND,OR,FROM,WHERE,JOIN,BY,GROUP,IN,INTO,SELECT,NOT,SET,UPDATE,DELETE,HAVING,IS,NULL,EXISTS,BETWEEN,LIKE,INNER,OUTER";  StringTokenizer st=new StringTokenizer(where);  String result="";  String token="";  int o=-1;  while (true) {    token=st.nextToken();    String test=token.startsWith("(") ? token.substring(1) : token;    if (sqlkey.indexOf(test) == -1) {      token=token.trim();      if (o != -1)       result=result + " " + token; else {        result=result + " ";        StringBuffer t=new StringBuffer();        for (int i=0; i < token.length(); i++) {          char c=token.charAt(i);          if (isOperator(c)) {            if (t.length() > 0) {              if (c == '(')               result=result + t.toString(); else               if (isIdentifier(t.toString()) && t.toString().indexOf('.') == -1)               result=result + alias + "."+ t.toString(); else               result=result + t.toString();              t=new StringBuffer();            }            result=result + c;          } else {            t.append(c);          }        }        if (t.length() > 0) {          if ("SELECT".equalsIgnoreCase(t.toString().toUpperCase())) {            o=0;            result=result + t.toString();          } else           if (isIdentifier(t.toString()) && t.toString().indexOf('.') == -1)           result=result + alias + "."+ t.toString(); else           result=result + t.toString();        }      }      if (o != -1) {        for (int i=0; i < token.length(); i++) {          char c=token.charAt(i);          if (c == '(')           o++;          if (c == ')')           o--;        }      }    } else {      result=result + " " + token;      if ("SELECT".equalsIgnoreCase(test)) {        o=0;      }    }    if (!st.hasMoreElements())     break;  }  return result;}  }
class C{  public IntVector sortWithIndex(){  IntVector index=IntVector.seq(0,size() - 1);  sortWithIndex(0,size() - 1,index);  return index;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean isUnboundedMax(){  return unboundedMax;}  }
class C{  public static Description createTestDescription(Class<?> clazz,String name,Annotation... annotations){  return new Description(clazz,formatDisplayName(name,clazz.getName()),annotations);}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  protected void useClassAttributes(){  int[] indices;  StringBuilder range;  MekaClassAttributes catts;  String newName;  getOwner().addUndoPoint();  indices=m_PanelClassAttributes.getSelectedAttributes();  range=new StringBuilder();  for (  int index : indices) {    if (range.length() > 0)     range.append(",");    range.append((index + 1));  }  catts=new MekaClassAttributes();  newName=getData().relationName().replaceFirst(" -C [0-9]+"," -C " + indices.length);  try {    catts.setAttributeIndices(range.toString());    filterData(catts,newName);  } catch (  Exception e) {    System.err.println("Setting of class attributes failed:");    e.printStackTrace();    JOptionPane.showMessageDialog(PreprocessTab.this,"Setting of class attributes failed:\n" + e,"Error",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public CButton(String text){  this(text,null);}  }
class C{  @Override public Pane createRootPane(){  BorderPane root=new BorderPane();  StackPane envView=new StackPane();  envViewCtrl=new VacuumEnvironmentViewCtrl(envView);  Parameter[] params=createParameters();  SimulationPaneBuilder builder=new SimulationPaneBuilder();  builder.defineParameters(params);  builder.defineStateView(envView);  builder.defineInitMethod(null);  builder.defineSimMethod(null);  simPaneCtrl=builder.getResultFor(root);  return root;}  }
class C{  public T caseFieldAccessor(FieldAccessor object){  return null;}  }
class C{  public boolean wearsOutfitFromHere(final Player player){  final Outfit currentOutfit=player.getOutfit();  for (  final String outfitType : priceCalculator.dealtItems()) {    final List<Outfit> possibleOutfits=outfitTypes.get(outfitType);    for (    final Outfit possibleOutfit : possibleOutfits) {      if (possibleOutfit.isPartOf(currentOutfit)) {        return true;      }    }  }  return false;}  }
class C{  public void write(@Nullable String spaceName,SwapKey key,byte[] val,@Nullable ClassLoader ldr) throws IgniteCheckedException {  assert key != null;  assert val != null;  try {    getSpi().store(spaceName,key,val,context(ldr));  } catch (  IgniteSpiException e) {    throw new IgniteCheckedException("Failed to write to swap space [space=" + spaceName + ", key="+ key+ ", valLen="+ val.length+ ']',e);  }}  }
class C{  private void establecerElementosVista(HttpServletRequest request,GestionAuditoriaBI service,String module){  List modulos=(List)service.getModules();  request.setAttribute(AuditoriaConstants.LISTA_MODULOS_KEY,modulos);  List acciones=null;  if (module == null)   acciones=(List)service.getActions(ArchivoModules.NONE_MODULE); else   acciones=(List)service.getActions(Integer.parseInt(module));  request.setAttribute(AuditoriaConstants.LISTA_ACCIONES_KEY,acciones);  List listaGrupos=getGestionControlUsuarios(request).getGrupos();  listaGrupos.remove(new GrupoVO(CritUsuarioVO.GLOBAL_GROUP));  listaGrupos.remove(new GrupoVO(CritUsuarioVO.GLOBAL_GROUP_ADM));  request.setAttribute(AuditoriaConstants.LISTA_GRUPOS_KEY,listaGrupos);}  }
class C{  public MapBackedDirectory(){  this(Collections.<K,V>emptyMap());}  }
class C{  public static void createIndex(Connection conn,String schema,String table,String columnList) throws SQLException {  init(conn);  PreparedStatement prep=conn.prepareStatement("INSERT INTO " + SCHEMA + ".INDEXES(SCHEMA, TABLE, COLUMNS) VALUES(?, ?, ?)");  prep.setString(1,schema);  prep.setString(2,table);  prep.setString(3,columnList);  prep.execute();  createTrigger(conn,schema,table);  indexExistingRows(conn,schema,table);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:16.621 -0500",hash_original_method="6C96B3E47AB792BE3053A98B747C02B0",hash_generated_method="762C6F42E9E67BA3B76C7151964CBF27") public synchronized boolean hasCookies(boolean privateBrowsing){  if (!JniUtil.useChromiumHttpStack()) {    return hasCookies();  }  return nativeHasCookies(privateBrowsing);}  }
class C{  public StorageUnitAlternateKeyDto createStorageUnitKey(BusinessObjectDataKey businessObjectDataKey,String storageName){  StorageUnitAlternateKeyDto storageUnitKey=new StorageUnitAlternateKeyDto();  storageUnitKey.setNamespace(businessObjectDataKey.getNamespace());  storageUnitKey.setBusinessObjectDefinitionName(businessObjectDataKey.getBusinessObjectDefinitionName());  storageUnitKey.setBusinessObjectFormatUsage(businessObjectDataKey.getBusinessObjectFormatUsage());  storageUnitKey.setBusinessObjectFormatFileType(businessObjectDataKey.getBusinessObjectFormatFileType());  storageUnitKey.setBusinessObjectFormatVersion(businessObjectDataKey.getBusinessObjectFormatVersion());  storageUnitKey.setPartitionValue(businessObjectDataKey.getPartitionValue());  storageUnitKey.setSubPartitionValues(businessObjectDataKey.getSubPartitionValues());  storageUnitKey.setBusinessObjectDataVersion(businessObjectDataKey.getBusinessObjectDataVersion());  storageUnitKey.setStorageName(storageName);  return storageUnitKey;}  }
class C{  public static <L,R>MutablePair<L,R> of(final L left,final R right){  return new MutablePair<L,R>(left,right);}  }
class C{  static int bitLengthForInt(int n){  return 32 - Integer.numberOfLeadingZeros(n);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String distanceOutputHeader=null;  int i;  int progress;  int row, col;  double z=0;  double distConvFactor=1.0;  double gridRes=0;  double currentVal=0;  double currentMaxVal=0;  double maxValDist=0;  double maxDist=0;  double lineSlope=0;  boolean saveDistance=false;  double azimuth=0;  double deltaX=0;  double deltaY=0;  double x=0;  int x1=0;  int x2=0;  double y=0;  int y1=0;  int y2=0;  double z1=0;  double z2=0;  double dist=0;  double slope=0;  double yIntercept=0;  int xStep=0;  int yStep=0;  double noData=0;  boolean flag=false;  double aSmallValue=-9999999;  maxDist=Double.MAX_VALUE;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  azimuth=Double.parseDouble(args[2]);  if (azimuth > 360 || azimuth < 0) {    azimuth=0.1;  }  if (azimuth == 0) {    azimuth=0.1;  }  if (azimuth == 180) {    azimuth=179.9;  }  if (azimuth == 360) {    azimuth=359.9;  }  if (azimuth < 180) {    lineSlope=Math.tan(Math.toRadians(90 - azimuth));  } else {    lineSlope=Math.tan(Math.toRadians(270 - azimuth));  }  if (!args[3].toLowerCase().equals("not specified")) {    maxDist=Double.parseDouble(args[3]);  }  if (!args[4].toLowerCase().equals("not specified")) {    saveDistance=true;    distanceOutputHeader=args[4];  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.setForceAllDataInMemory(true);    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    if (DEM.getXYUnits().toLowerCase().contains("deg") || DEM.getProjection().toLowerCase().contains("geog")) {      double midLat=(DEM.getNorth() - DEM.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        distConvFactor=(113200 * Math.cos(Math.toRadians(midLat)));      }    }    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2 * distConvFactor;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    output.setForceAllDataInMemory(true);    WhiteboxRaster outputDist=null;    if (saveDistance) {      outputDist=new WhiteboxRaster(distanceOutputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);      outputDist.setPreferredPalette("blue_white_red.pal");      outputDist.setForceAllDataInMemory(true);    }    if (azimuth > 0 && azimuth <= 90) {      xStep=1;      yStep=1;    } else     if (azimuth <= 180) {      xStep=1;      yStep=-1;    } else     if (azimuth <= 270) {      xStep=-1;      yStep=-1;    } else {      xStep=-1;      yStep=1;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        currentVal=DEM.getValue(row,col);        if (currentVal != noData) {          yIntercept=-row - lineSlope * col;          currentMaxVal=aSmallValue;          maxValDist=aSmallValue;          x=col;          flag=true;          do {            x=x + xStep;            if (x < 0 || x >= cols) {              flag=false;              break;            }            y=(lineSlope * x + yIntercept) * -1;            if (y < 0 || y >= rows) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            y1=(int)(y);            y2=y1 + yStep * -1;            z1=DEM.getValue(y1,(int)x);            z2=DEM.getValue(y2,(int)x);            z=z1 + (y - y1) * (z2 - z1);            slope=(z - currentVal) / dist;            if (slope > currentMaxVal) {              currentMaxVal=slope;              maxValDist=dist;            } else             if (currentMaxVal < 0) {              maxValDist=dist;            }          } while (flag);          y=-row;          flag=true;          do {            y=y + yStep;            if (-y < 0 || -y >= rows) {              flag=false;              break;            }            x=(y - yIntercept) / lineSlope;            if (x < 0 || x >= cols) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(-y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            x1=(int)x;            x2=x1 + xStep;            if (x2 < 0 || x2 >= cols) {              flag=false;              break;            }            z1=DEM.getValue((int)-y,x1);            z2=DEM.getValue((int)y,x2);            z=z1 + (x - x1) * (z2 - z1);            slope=(z - currentVal) / dist;            if (slope > currentMaxVal) {              currentMaxVal=slope;              maxValDist=dist;            } else             if (currentMaxVal < 0) {              maxValDist=dist;            }          } while (flag);          z=Math.toDegrees(Math.atan(currentMaxVal));          if (z < -89) {            z=0;          }          if (currentMaxVal != aSmallValue) {            output.setValue(row,col,z);            if (saveDistance) {              if (z < 0) {                maxValDist=maxValDist * -1;              }              outputDist.setValue(row,col,maxValDist);            }          } else {            output.setValue(row,col,noData);            if (saveDistance) {              outputDist.setValue(row,col,noData);            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    if (saveDistance) {      outputDist.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.485 -0400",hash_original_method="B6CCE4550C29DDD6A02AB62B3A5D936A",hash_generated_method="979F94608D9916FD462CA7E4AAD1B55D") @Override public boolean accept(File file){  return file.canWrite();}  }
class C{  private Map<SoftwareVersion,URL> parseDirectory(URL url,String input) throws IOException, RemoteRepositoryException {  Map<SoftwareVersion,URL> versions=new HashMap<SoftwareVersion,URL>();  ParserCallback callback=new ParserCallback(url,versions);  new HTMLEditor().getParser().parse(new StringReader(input.toString()),callback,true);  return versions;}  }
class C{  public DouglasPeuckerSimplifier(Geometry inputGeom){  this.inputGeom=inputGeom;}  }
class C{  public void reserveStock(MDDOrderLine[] lines){  BigDecimal Volume=Env.ZERO;  BigDecimal Weight=Env.ZERO;  for (  MDDOrderLine line : lines) {    MLocator locator_from=MLocator.get(getCtx(),line.getM_Locator_ID());    MLocator locator_to=MLocator.get(getCtx(),line.getM_LocatorTo_ID());    BigDecimal reserved_ordered=line.getQtyOrdered().subtract(line.getQtyReserved()).subtract(line.getQtyDelivered());    if (reserved_ordered.signum() == 0) {      MProduct product=line.getProduct();      if (product != null) {        Volume=Volume.add(product.getVolume().multiply(line.getQtyOrdered()));        Weight=Weight.add(product.getWeight().multiply(line.getQtyOrdered()));      }      continue;    }    log.fine("Line=" + line.getLine() + " - Ordered="+ line.getQtyOrdered()+ ",Reserved="+ line.getQtyReserved()+ ",Delivered="+ line.getQtyDelivered());    MProduct product=line.getProduct();    if (product != null) {      if (product.isStocked()) {        if (!MStorage.add(getCtx(),locator_to.getM_Warehouse_ID(),locator_to.getM_Locator_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstance_ID(),line.getM_AttributeSetInstance_ID(),Env.ZERO,Env.ZERO,reserved_ordered,get_TrxName())) {          throw new AdempiereException();        }        if (!MStorage.add(getCtx(),locator_from.getM_Warehouse_ID(),locator_from.getM_Locator_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstanceTo_ID(),line.getM_AttributeSetInstance_ID(),Env.ZERO,reserved_ordered,Env.ZERO,get_TrxName())) {          throw new AdempiereException();        }      }      line.setQtyReserved(line.getQtyReserved().add(reserved_ordered));      line.saveEx();      Volume=Volume.add(product.getVolume().multiply(line.getQtyOrdered()));      Weight=Weight.add(product.getWeight().multiply(line.getQtyOrdered()));    }  }  setVolume(Volume);  setWeight(Weight);}  }
class C{  protected void addMapping(int hashIndex,int hashCode,K key,V value){  modCount++;  HashEntry<K,V> entry=createEntry(data[hashIndex],hashCode,key,value);  addEntry(entry,hashIndex);  size++;  checkCapacity();}  }
class C{  private Hop simplifyWeightedSquaredLoss(Hop parent,Hop hi,int pos) throws HopsException {  Hop hnew=null;  if (hi instanceof AggUnaryOp && ((AggUnaryOp)hi).getDirection() == Direction.RowCol && ((AggUnaryOp)hi).getOp() == AggOp.SUM && hi.getInput().get(0) instanceof BinaryOp && hi.getInput().get(0).getDim2() > 1) {    BinaryOp bop=(BinaryOp)hi.getInput().get(0);    boolean appliedPattern=false;    if (bop.getOp() == OpOp2.MULT && bop.getInput().get(1) instanceof BinaryOp && bop.getInput().get(0).getDataType() == DataType.MATRIX && HopRewriteUtils.isEqualSize(bop.getInput().get(0),bop.getInput().get(1)) && ((BinaryOp)bop.getInput().get(1)).getOp() == OpOp2.POW && bop.getInput().get(1).getInput().get(1) instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)bop.getInput().get(1).getInput().get(1)) == 2) {      Hop W=bop.getInput().get(0);      Hop tmp=bop.getInput().get(1).getInput().get(0);      if (tmp instanceof BinaryOp && ((BinaryOp)tmp).getOp() == OpOp2.MINUS && HopRewriteUtils.isEqualSize(tmp.getInput().get(0),tmp.getInput().get(1)) && tmp.getInput().get(0).getDataType() == DataType.MATRIX) {        int uvIndex=-1;        if (tmp.getInput().get(1) instanceof AggBinaryOp && HopRewriteUtils.isSingleBlock(tmp.getInput().get(1).getInput().get(0),true)) {          uvIndex=1;        } else         if (tmp.getInput().get(0) instanceof AggBinaryOp && HopRewriteUtils.isSingleBlock(tmp.getInput().get(0).getInput().get(0),true)) {          uvIndex=0;        }        if (uvIndex >= 0) {          Hop X=tmp.getInput().get((uvIndex == 0) ? 1 : 0);          Hop U=tmp.getInput().get(uvIndex).getInput().get(0);          Hop V=tmp.getInput().get(uvIndex).getInput().get(1);          if (!HopRewriteUtils.isTransposeOperation(V)) {            V=HopRewriteUtils.createTranspose(V);          } else {            V=V.getInput().get(0);          }          if (HopRewriteUtils.isNonZeroIndicator(W,X)) {            W=new LiteralOp(1);          }          hnew=new QuaternaryOp(hi.getName(),DataType.SCALAR,ValueType.DOUBLE,OpOp4.WSLOSS,X,U,V,W,true);          HopRewriteUtils.setOutputParametersForScalar(hnew);          appliedPattern=true;          LOG.debug("Applied simplifyWeightedSquaredLoss1" + uvIndex + " (line "+ hi.getBeginLine()+ ")");        }      }    }    if (!appliedPattern && bop.getOp() == OpOp2.POW && bop.getInput().get(1) instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)bop.getInput().get(1)) == 2 && bop.getInput().get(0) instanceof BinaryOp && bop.getInput().get(0).getDataType() == DataType.MATRIX && ((BinaryOp)bop.getInput().get(0)).getOp() == OpOp2.MINUS && HopRewriteUtils.isEqualSize(bop.getInput().get(0).getInput().get(0),bop.getInput().get(0).getInput().get(1)) && bop.getInput().get(0).getInput().get(0).getDataType() == DataType.MATRIX) {      Hop lleft=bop.getInput().get(0).getInput().get(0);      Hop lright=bop.getInput().get(0).getInput().get(1);      int wuvIndex=-1;      if (lright instanceof BinaryOp && lright.getInput().get(1) instanceof AggBinaryOp) {        wuvIndex=1;      } else       if (lleft instanceof BinaryOp && lleft.getInput().get(1) instanceof AggBinaryOp) {        wuvIndex=0;      }      if (wuvIndex >= 0) {        Hop X=bop.getInput().get(0).getInput().get((wuvIndex == 0) ? 1 : 0);        Hop tmp=bop.getInput().get(0).getInput().get(wuvIndex);        if (((BinaryOp)tmp).getOp() == OpOp2.MULT && tmp.getInput().get(0).getDataType() == DataType.MATRIX && HopRewriteUtils.isEqualSize(tmp.getInput().get(0),tmp.getInput().get(1)) && HopRewriteUtils.isSingleBlock(tmp.getInput().get(1).getInput().get(0),true)) {          Hop W=tmp.getInput().get(0);          Hop U=tmp.getInput().get(1).getInput().get(0);          Hop V=tmp.getInput().get(1).getInput().get(1);          if (!HopRewriteUtils.isTransposeOperation(V)) {            V=HopRewriteUtils.createTranspose(V);          } else {            V=V.getInput().get(0);          }          hnew=new QuaternaryOp(hi.getName(),DataType.SCALAR,ValueType.DOUBLE,OpOp4.WSLOSS,X,U,V,W,false);          HopRewriteUtils.setOutputParametersForScalar(hnew);          appliedPattern=true;          LOG.debug("Applied simplifyWeightedSquaredLoss2" + wuvIndex + " (line "+ hi.getBeginLine()+ ")");        }      }    }    if (!appliedPattern && bop.getOp() == OpOp2.POW && bop.getInput().get(1) instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)bop.getInput().get(1)) == 2 && bop.getInput().get(0) instanceof BinaryOp && bop.getInput().get(0).getDataType() == DataType.MATRIX && ((BinaryOp)bop.getInput().get(0)).getOp() == OpOp2.MINUS && HopRewriteUtils.isEqualSize(bop.getInput().get(0).getInput().get(0),bop.getInput().get(0).getInput().get(1)) && bop.getInput().get(0).getInput().get(0).getDataType() == DataType.MATRIX) {      Hop lleft=bop.getInput().get(0).getInput().get(0);      Hop lright=bop.getInput().get(0).getInput().get(1);      int uvIndex=-1;      if (lright instanceof AggBinaryOp && HopRewriteUtils.isSingleBlock(lright.getInput().get(0),true)) {        uvIndex=1;      } else       if (lleft instanceof AggBinaryOp && HopRewriteUtils.isSingleBlock(lleft.getInput().get(0),true)) {        uvIndex=0;      }      if (uvIndex >= 0) {        Hop X=bop.getInput().get(0).getInput().get((uvIndex == 0) ? 1 : 0);        Hop tmp=bop.getInput().get(0).getInput().get(uvIndex);        Hop W=new LiteralOp(1);        Hop U=tmp.getInput().get(0);        Hop V=tmp.getInput().get(1);        if (!HopRewriteUtils.isTransposeOperation(V)) {          V=HopRewriteUtils.createTranspose(V);        } else {          V=V.getInput().get(0);        }        hnew=new QuaternaryOp(hi.getName(),DataType.SCALAR,ValueType.DOUBLE,OpOp4.WSLOSS,X,U,V,W,false);        HopRewriteUtils.setOutputParametersForScalar(hnew);        appliedPattern=true;        LOG.debug("Applied simplifyWeightedSquaredLoss3" + uvIndex + " (line "+ hi.getBeginLine()+ ")");      }    }  }  if (hnew != null) {    HopRewriteUtils.removeChildReferenceByPos(parent,hi,pos);    HopRewriteUtils.addChildReference(parent,hnew,pos);    hi=hnew;  }  return hi;}  }
class C{  void listMetricDescriptors() throws IOException {  ListMetricDescriptorsResponse metricsResponse=this.monitoringService.projects().metricDescriptors().list(this.projectResource).execute();  this.outputStream.println("listMetricDescriptors response");  this.outputStream.println(metricsResponse.toPrettyString());}  }
class C{  public void cancel(){  isCanceled.set(true);}  }
class C{  public Map<String,String> systemInfo(){  HashMap<String,String> info=new HashMap<String,String>();  NaElement elem=new NaElement("system-get-node-info-iter");  NaElement attributesList=null;  try {    List outputElements=(List)server.getNaServer().invokeElem(elem).getChildByName("attributes-list").getChildren();    Iterator iter=outputElements.iterator();    while (iter.hasNext()) {      attributesList=(NaElement)iter.next();      for (      NaElement child : (List<NaElement>)attributesList.getChildren()) {        String name=child.getName();        info.put(name,child.getContent());      }    }    return info;  } catch (  Exception e) {    String msg="Failed to get array system info";    log.error(msg,e);    throw new NetAppCException(msg,e);  }}  }
class C{  public MajorityLabelsetTest(String name){  super(name);}  }
class C{  public void allocateLoadBalance(){  _loadBalanceAllocateCount.incrementAndGet();}  }
class C{  public static void main(String[] args){  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Binary objects cache put-get example started.");    CacheConfiguration<Integer,Organization> cfg=new CacheConfiguration<>();    cfg.setCacheMode(CacheMode.PARTITIONED);    cfg.setName(CACHE_NAME);    cfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);    try (IgniteCache<Integer,Organization> cache=ignite.getOrCreateCache(cfg)){      if (ignite.cluster().forDataNodes(cache.getName()).nodes().isEmpty()) {        System.out.println();        System.out.println(">>> This example requires remote cache node nodes to be started.");        System.out.println(">>> Please start at least 1 remote cache node.");        System.out.println(">>> Refer to example's javadoc for details on configuration.");        System.out.println();        return;      }      putGet(cache);      putGetBinary(cache);      putGetAll(cache);      putGetAllBinary(cache);      System.out.println();    }  finally {      ignite.destroyCache(CACHE_NAME);    }  } }  }
class C{  public Task(String description,Date start,Date end){  this(description,new SimpleTimePeriod(start,end));}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  public StateMachineSecurityInterceptor(){  this(null,null);}  }
class C{  public void testRandomSortsOnLargeIndex() throws Exception {  final Collection<String> allFieldNames=getAllSortFieldNames();  final int initialDocs=TestUtil.nextInt(random(),100,200);  final int totalDocs=atLeast(500);  for (int i=1; i <= initialDocs; i++) {    SolrInputDocument doc=buildRandomDocument(i);    assertU(adoc(doc));  }  assertU(commit());  for (  String f : allFieldNames) {    for (    String order : new String[]{" asc"," desc"}) {      String sort=f + order + ("id".equals(f) ? "" : ", id" + order);      String rows="" + TestUtil.nextInt(random(),13,50);      SentinelIntSet ids=assertFullWalkNoDups(totalDocs,params("q","*:*","fl","id","rows",rows,"sort",sort));      assertEquals(initialDocs,ids.size());    }  }  for (int i=initialDocs + 1; i <= totalDocs; i++) {    SolrInputDocument doc=buildRandomDocument(i);    assertU(adoc(doc));  }  assertU(commit());  final int numRandomSorts=atLeast(3);  for (int i=0; i < numRandomSorts; i++) {    final String sort=buildRandomSort(allFieldNames);    final String rows="" + TestUtil.nextInt(random(),63,113);    final String fl=random().nextBoolean() ? "id" : "id,score";    final boolean matchAll=random().nextBoolean();    final String q=matchAll ? "*:*" : buildRandomQuery();    SentinelIntSet ids=assertFullWalkNoDups(totalDocs,params("q",q,"fl",fl,"rows",rows,"sort",sort));    if (matchAll) {      assertEquals(totalDocs,ids.size());    }  }}  }
class C{  protected void reOrganizeFeatures(){  double[] f;  Cluster best;  double v, minDistance;  for (int k=0; k < features.size(); k++) {    f=features.get(k);    best=clusters[0];    minDistance=clusters[0].getDistance(f);    for (int i=1; i < clusters.length; i++) {      v=clusters[i].getDistance(f);      if (minDistance > v) {        best=clusters[i];        minDistance=v;      }    }    best.assignMember(f);  }}  }
class C{  public int subtreeDepth() throws UnsupportedOperationException {  int sum=1;  for (int i=name.indexOf('.'); i >= 0; i=name.indexOf('.',i + 1)) {    ++sum;  }  return sum;}  }
class C{  @Override public QParser createParser(String qstr,SolrParams localParams,SolrParams params,SolrQueryRequest req){  return new SimpleQParser(qstr,localParams,params,req);}  }
class C{  public VdcConfig toConfigParam(Properties vdcInfo){  log.info("copy {} to the sync config param",vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));  VdcConfig vdcConfig=new VdcConfig();  vdcConfig.setId(URIUtil.uri(vdcInfo.getProperty(GeoServiceJob.OPERATED_VDC_ID)));  vdcConfig.setShortId(vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));  vdcConfig.setSecretKey(vdcInfo.getProperty(GeoServiceJob.VDC_SECRETE_KEY));  String name=vdcInfo.getProperty(GeoServiceJob.VDC_NAME);  if ((name != null) && (!name.isEmpty())) {    vdcConfig.setName(name);  }  String description=vdcInfo.getProperty(GeoServiceJob.VDC_DESCRIPTION);  if ((description != null) && (!description.isEmpty())) {    vdcConfig.setDescription(description);  }  String endPnt=vdcInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT);  if (endPnt != null) {    vdcConfig.setApiEndpoint(endPnt);  }  vdcConfig.setGeoCommandEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));  vdcConfig.setGeoDataEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));  return vdcConfig;}  }
class C{  final public SyntaxTreeNode LetIn() throws ParseException {  SyntaxTreeNode zn[]=new SyntaxTreeNode[4];  SyntaxTreeNode tn;  Token t;  bpa("Case Other Arm");  t=jj_consume_token(LET);  zn[0]=new SyntaxTreeNode(mn,t);  zn[1]=LetDefinitions();  t=jj_consume_token(LETIN);  zn[2]=new SyntaxTreeNode(mn,t);  zn[3]=Expression();  epa();{    if (true)     return new SyntaxTreeNode(mn,N_LetIn,zn);  }  throw new Error("Missing return statement in function");}  }
class C{  public final String toString(byte[] buffer){  return toString(buffer,0,buffer.length);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new IllegalArgumentException();  }  return reference;}  }
class C{  public void add(final URI uri){  this.uris.add(uri);}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer processTemplateId,Principal principal){  RestWrapper restWrapper=null;  try {    processTemplateDAO.delete(processTemplateId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with ID:" + processTemplateId + " deleted from ProcessTemplate by User:"+ principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public AccountHeaderBuilder withOnlySmallProfileImagesVisible(boolean onlySmallProfileImagesVisible){  this.mOnlySmallProfileImagesVisible=onlySmallProfileImagesVisible;  return this;}  }
class C{  public static boolean isGreater(Date d1,Date d2){  if (d1 == null || d2 == null) {    return false;  }  return d1.compareTo(d2) > 0;}  }
class C{  private ReplaceTokens.Token createPortToken(){  String port=getPropertyValue(ServletPropertySet.PORT);  if (port == null) {    port=JRun4xPropertySet.DEFAULT_PORT;  }  ReplaceTokens.Token tokenPort=new ReplaceTokens.Token();  tokenPort.setKey(ServletPropertySet.PORT);  tokenPort.setValue(port);  return tokenPort;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String n=getString(stack);  String k=getString(stack);  String r=getString(stack);  if (!Sage.WINDOWS_OS)   return "";  return Sage.readStringValue(Sage.getHKEYForName(r),k,n);}  }
class C{  public AccountMetaData(final AccountStatus status,final AccountRemoteStatus remoteStatus,final List<AccountInfo> cosignatoryOf,final List<AccountInfo> cosignatories){  this.status=status;  this.remoteStatus=remoteStatus;  this.cosignatoryOf=cosignatoryOf;  this.cosignatories=cosignatories;}  }
class C{  public boolean initialise(ServletContext servletContext){  boolean ok=super.initialise(servletContext);  if (ok) {    String displayName=getDisplayName();    log.debug("loaded outbound rule " + displayName + " ("+ from+ ", "+ to+ ')');  } else {    log.debug("failed to load outbound rule");  }  if (errors.size() > 0) {    ok=false;  }  valid=ok;  return ok;}  }
class C{  public void doWindowOpen(Object parm){  if (parm instanceof String) {    jTextArea1.setText((String)parm);  }}  }
class C{  private boolean isExcluded(String[] cargoFiles,String filename){  if (cargoFiles == null) {    return false;  }  for (  String cargoFile : cargoFiles) {    if (cargoFile.equals(filename)) {      return true;    }  }  return false;}  }
class C{  public Builder<V> dimensions(int dimensions){  this.dimensions=dimensions;  return this;}  }
class C{  public String toString(){  return representation;}  }
class C{  public AbstractSailImplConfig(){}  }
class C{  @Override public String toString(){  return "[SSL: " + super.toString() + "]";}  }
class C{  protected void sequence_FunctionBody_FunctionExpression_FunctionHeader_FunctionImpl_StrictFormalParameters_TypeVariables(ISerializationContext context,FunctionExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public String clusterTypeTipText(){  return "The type of cluster to use.";}  }
class C{  public DefaultReadTrimmer(int windowSize,int qualityThreshold){  mWindowSize=windowSize;  mQualityThreshold=qualityThreshold;}  }
class C{  public Task<FileShareRestRep> updateExport(URI id,String protocol,String securityType,String permissions,String rootUserMapping,FileExportUpdateParam update){  return putTask(update,getExportsUrl() + "/{protocol},{securityType},{permissions},{rootUserMapping}",id,protocol,securityType,permissions,rootUserMapping);}  }
class C{  @Override public void send(Object message,boolean sent) throws RemotingException {  if (closed) {    throw new RemotingException(this.getLocalAddress(),null,"Failed to send message " + message + ", cause: The channel "+ this+ " is closed!");  }  if (message instanceof RpcInvocation) {    RpcInvocation inv=(RpcInvocation)message;    int id=SEQUENCE.incrementAndGet();    ChannelBuffer output=createRequestBuffer(id,inv);    channel.send(output,sent);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrparentnodenull.class,args);}  }
class C{  protected SVGOMMPathElement(){}  }
class C{  public final Vec3D reciprocal(){  x=1f / x;  y=1f / y;  z=1f / z;  return this;}  }
class C{  public AbstractKeyRangeIndexProcedure(){}  }
class C{  public TestRunner(){  this(System.out);}  }
class C{  public String patch_addPadding(LinkedList<Patch> patches){  short paddingLength=this.Patch_Margin;  String nullPadding="";  for (short x=1; x <= paddingLength; x++) {    nullPadding+=String.valueOf((char)x);  }  for (  Patch aPatch : patches) {    aPatch.start1+=paddingLength;    aPatch.start2+=paddingLength;  }  Patch patch=patches.getFirst();  LinkedList<Diff> diffs=patch.diffs;  if (diffs.isEmpty() || diffs.getFirst().operation != Operation.EQUAL) {    diffs.addFirst(new Diff(Operation.EQUAL,nullPadding));    patch.start1-=paddingLength;    patch.start2-=paddingLength;    patch.length1+=paddingLength;    patch.length2+=paddingLength;  } else   if (paddingLength > diffs.getFirst().text.length()) {    Diff firstDiff=diffs.getFirst();    int extraLength=paddingLength - firstDiff.text.length();    firstDiff.text=nullPadding.substring(firstDiff.text.length()) + firstDiff.text;    patch.start1-=extraLength;    patch.start2-=extraLength;    patch.length1+=extraLength;    patch.length2+=extraLength;  }  patch=patches.getLast();  diffs=patch.diffs;  if (diffs.isEmpty() || diffs.getLast().operation != Operation.EQUAL) {    diffs.addLast(new Diff(Operation.EQUAL,nullPadding));    patch.length1+=paddingLength;    patch.length2+=paddingLength;  } else   if (paddingLength > diffs.getLast().text.length()) {    Diff lastDiff=diffs.getLast();    int extraLength=paddingLength - lastDiff.text.length();    lastDiff.text+=nullPadding.substring(0,extraLength);    patch.length1+=extraLength;    patch.length2+=extraLength;  }  return nullPadding;}  }
class C{  private void updateChannels(){  channel.setEnabled(!rejoinOpenChannels.isEnabled() || !rejoinOpenChannels.isSelected());}  }
class C{  protected void startBridgeServer(int port) throws IOException {  startBridgeServer(port,-1);}  }
class C{  public GeneralRuntimeException(String msg){  super(msg);}  }
class C{  public JobDefinitionEntity createJobDefinitionEntity(NamespaceEntity namespaceEntity,String jobName,String description,String activitiId){  JobDefinitionEntity jobDefinitionEntity=new JobDefinitionEntity();  jobDefinitionEntity.setNamespace(namespaceEntity);  jobDefinitionEntity.setName(jobName);  jobDefinitionEntity.setDescription(description);  jobDefinitionEntity.setActivitiId(activitiId);  return jobDefinitionDao.saveAndRefresh(jobDefinitionEntity);}  }
class C{  public QuadEdge insertSite(Vertex v){  QuadEdge e=locate(v);  if ((v.equals(e.orig(),tolerance)) || (v.equals(e.dest(),tolerance))) {    return e;  }  QuadEdge base=makeEdge(e.orig(),v);  QuadEdge.splice(base,e);  QuadEdge startEdge=base;  do {    base=connect(e,base.sym());    e=base.oPrev();  } while (e.lNext() != startEdge);  return startEdge;}  }
class C{  public DHPrivateKeySpec(BigInteger x,BigInteger p,BigInteger g){  this.x=x;  this.p=p;  this.g=g;}  }
class C{  private boolean isMatEqual(Mat mat1,Mat mat2){  if (mat1.empty() && mat2.empty()) {    return true;  }  if (mat1.cols() != mat2.cols() || mat1.rows() != mat2.rows() || mat1.dims() != mat2.dims()) {    return false;  }  Mat diff=new Mat();  opencv_core.compare(mat1,mat2,diff,opencv_core.CMP_NE);  int nz=opencv_core.countNonZero(diff);  return nz == 0;}  }
class C{  protected NewTargetImpl(){  super();}  }
class C{  public double strikeSensitivity(){  final double temp=stdDev * strike;  final double DalphaDstrike=-dAlpha_dD1 / temp;  final double DbetaDstrike=-dBeta_dD2 / temp;  final double temp2=DalphaDstrike * forward + DbetaDstrike * x + beta * dx_dStrike;  return discount * temp2;}  }
class C{  public boolean hasChildren(){  return children.size() > 0;}  }
class C{  @Override public boolean ready() throws IOException {  ensureOpen();  return true;}  }
class C{  public String generateKey(){  if (invocationKey == null) {    StringBuffer sb=new StringBuffer();    sb.append(table.getSchema());    sb.append(".").append(table.getName());    sb.append(".").append(key.getName());    for (    Object v : values) {      sb.append("-").append(v.hashCode());    }    invocationKey=sb.toString();  }  return invocationKey;}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  @action(name="query",args={@arg(name=GamaMessageType.MESSAGE_STR,type=IType.MESSAGE,optional=false,doc=@doc("The message to be replied")),@arg(name=GamaMessage.CONTENTS,type=IType.LIST,optional=false,doc=@doc("The content of the replying message"))},doc=@doc("Replies a message with a 'query' performative message.")) public Object primQuery(final IScope scope) throws GamaRuntimeException {  final IList originals=getMessageArg(scope);  if (originals == null || originals.size() == 0) {    throw GamaRuntimeException.error("No message to reply",scope);  }  return replyMessage(scope,originals,QUERY,getContentArg(scope));}  }
class C{  protected String generateLockServiceDestroyedMessage(){  return LocalizedStrings.DLockService_0_HAS_BEEN_DESTROYED.toLocalizedString(this);}  }
class C{  protected void computeAverageLocalOfObservations(int[] sourceValues,int indexToModify){  if (indexToModify < sourceValues.length) {    for (int s=0; s < base; s++) {      sourceValues[indexToModify]=s;      computeAverageLocalOfObservations(sourceValues,indexToModify + 1);    }    return;  }  double logTerm, localValue, sepCont;  int jointSourcesVal, sourceVal;  jointSourcesVal=0;  for (int sIndex=0; sIndex < numSources; sIndex++) {    jointSourcesVal*=base;    jointSourcesVal+=sourceValues[sIndex];  }  double[] localActAndTes=new double[numSources + 1];  for (int pastVal=0; pastVal < base_power_k; pastVal++) {    for (int destVal=0; destVal < base; destVal++) {      if (sourcesNextPastCount[jointSourcesVal][destVal][pastVal] != 0) {        logTerm=((double)nextPastCount[destVal][pastVal]) / ((double)nextCount[destVal] * (double)pastCount[pastVal]);        logTerm*=(double)observations;        if (computeMultiInfoCoherence) {          localActAndTes[0]=Math.log(logTerm);        }        for (int sIndex=0; sIndex < numSources; sIndex++) {          sourceVal=sourceValues[sIndex];          localActAndTes[sIndex + 1]=((double)sourceNumValueNextPastCount[sIndex][sourceVal][destVal][pastVal] / (double)sourceNumValuePastCount[sIndex][sourceVal][pastVal]) / ((double)nextPastCount[destVal][pastVal] / (double)pastCount[pastVal]);          logTerm*=localActAndTes[sIndex + 1];          if (computeMultiInfoCoherence) {            localActAndTes[sIndex + 1]=Math.log(localActAndTes[sIndex + 1]);          }        }        if (computeMultiInfoCoherence) {          for (int i=0; i < sourcesNextPastCount[jointSourcesVal][destVal][pastVal]; i++) {            miCalc.addObservation(localActAndTes);          }        }        localValue=Math.log(logTerm) / log_2;        sepCont=(double)sourcesNextPastCount[jointSourcesVal][destVal][pastVal] / (double)observations * localValue;        average+=sepCont;        if (sepCont >= 0.0) {          avPositiveLocal+=sepCont;        } else {          avNegativeLocal+=sepCont;        }        if (localValue > max) {          max=localValue;        } else         if (localValue < min) {          min=localValue;        }        meanSqLocals+=sepCont * localValue;      }    }  }}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  void importRecursivelyFrom(Object fileSystemObject,int policy) throws CoreException {  if (monitor.isCanceled()) {    throw new OperationCanceledException();  }  if (!provider.isFolder(fileSystemObject)) {    importFile(fileSystemObject,policy);    return;  }  int childPolicy=importFolder(fileSystemObject,policy);  if (childPolicy != POLICY_SKIP_CHILDREN) {    Iterator children=provider.getChildren(fileSystemObject).iterator();    while (children.hasNext()) {      importRecursivelyFrom(children.next(),childPolicy);    }  }}  }
class C{  public double[] homogeneVector(double[] v){  assert (v.length == dim);  double[] dv=Arrays.copyOf(v,dim + 1);  dv[dim]=1.0;  return dv;}  }
class C{  public boolean isSpread(){  return spread;}  }
class C{  public LRS(int L,int R,RegressionDataSet rds,Regressor evaluater,int folds){  this(L,R,evaluater,folds);  search(rds,L,R,evaluater,folds);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private double calculateDistance(Example first,Example second){  double distance=0;  for (  Attribute attribute : first.getAttributes()) {    double diff=first.getValue(attribute) - second.getValue(attribute);    distance+=diff * diff;  }  return Math.sqrt(distance);}  }
class C{  protected boolean verifyAuthorizedInTenantOrg(URI tenantId){  StorageOSUser user=getUserFromContext();  if (tenantId.toString().equals(user.getTenantId()) || _permissionsHelper.userHasGivenRole(user,tenantId,Role.TENANT_ADMIN)) {    return true;  }  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void release(int id){  if (id < 0) {    throw new IllegalArgumentException(LocalizedStrings.UniqueIdGenerator_NEGATIVE_ID_0.toLocalizedString(Integer.valueOf(id)));  } else   if (id > this.MAX_ID) {    throw new IllegalArgumentException(LocalizedStrings.UniqueIdGenerator_ID_MAX_ID_0.toLocalizedString(Integer.valueOf(id)));  }synchronized (this) {    clearBit(id);  }}  }
class C{  String fullName(){  String parsable=name;  if (scope != null) {    parsable+="." + scope.getName();  }  return parsable;}  }
class C{  public static int flashTime(){  return info().flashTime;}  }
class C{  private double calcArea(double width,double height){  return Math.max(minSideLength,width) * Math.max(minSideLength,height);}  }
class C{  public FuzzyQuery(Term term,int maxEdits,int prefixLength,int maxExpansions,boolean transpositions){  super(term.field());  if (maxEdits < 0 || maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {    throw new IllegalArgumentException("maxEdits must be between 0 and " + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);  }  if (prefixLength < 0) {    throw new IllegalArgumentException("prefixLength cannot be negative.");  }  if (maxExpansions <= 0) {    throw new IllegalArgumentException("maxExpansions must be positive.");  }  this.term=term;  this.maxEdits=maxEdits;  this.prefixLength=prefixLength;  this.transpositions=transpositions;  this.maxExpansions=maxExpansions;  setRewriteMethod(new MultiTermQuery.TopTermsBlendedFreqScoringRewrite(maxExpansions));}  }
class C{  public void insertLeaf(int index,Object key,Object value){  int len=keys.length + 1;  Object[] newKeys=new Object[len];  DataUtils.copyWithGap(keys,newKeys,len - 1,index);  keys=newKeys;  Object[] newValues=new Object[len];  DataUtils.copyWithGap(values,newValues,len - 1,index);  values=newValues;  keys[index]=key;  values[index]=value;  totalCount++;  addMemory(map.getKeyType().getMemory(key) + map.getValueType().getMemory(value));}  }
class C{  public UpgradeProjectVisualPanel2(Project context){  this.context=context;  initComponents();}  }
class C{  public void init() throws MessagingException {  checkInitParameters(getAllowedInitParameters());  try {    initDebug();    if (isDebug()) {      log("Initializing");    }    initHost();    initPort();    initMaxPings();    initPingIntervalMilli();    initStreamBufferSize();    if (getMaxPings() > 0) {      ping();    }  } catch (  Exception e) {    log("Exception thrown",e);    throw new MessagingException("Exception thrown",e);  }}  }
class C{  public JPAUserFlag(String name){  super();  this.name=name;}  }
class C{  public Collection<?> toCollection(String column) throws SQLException {  return super.toCollection(column);}  }
class C{  public boolean isOverlap(Object objA,Object objB){  SpatialKey a=(SpatialKey)objA;  SpatialKey b=(SpatialKey)objB;  if (a.isNull() || b.isNull()) {    return false;  }  for (int i=0; i < dimensions; i++) {    if (a.max(i) < b.min(i) || a.min(i) > b.max(i)) {      return false;    }  }  return true;}  }
class C{  public static Object readObjectFromFile(String name) throws ClassNotFoundException, IOException {  byte[] data=readDataFromFile(name);  return deserialize(data);}  }
class C{  public void scanReset(){  currentFeatureIdx=0;}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  public boolean isEndPointDead(){  return this.endPointDied;}  }
class C{  private boolean canUseLookup(Raster src,Raster dst){  int datatype=src.getDataBuffer().getDataType();  if (datatype != DataBuffer.TYPE_BYTE && datatype != DataBuffer.TYPE_USHORT) {    return false;  }  SampleModel dstSM=dst.getSampleModel();  dstNbits=dstSM.getSampleSize(0);  if (!(dstNbits == 8 || dstNbits == 16)) {    return false;  }  for (int i=1; i < src.getNumBands(); i++) {    int bandSize=dstSM.getSampleSize(i);    if (bandSize != dstNbits) {      return false;    }  }  SampleModel srcSM=src.getSampleModel();  srcNbits=srcSM.getSampleSize(0);  if (srcNbits > 16) {    return false;  }  for (int i=1; i < src.getNumBands(); i++) {    int bandSize=srcSM.getSampleSize(i);    if (bandSize != srcNbits) {      return false;    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") TypeDeclaration loadObject(String name,Map<String,Object> m,Scope parent,List<TypeParameter> existing){  Value obj;  if (m.get(KEY_METATYPE) instanceof Value) {    obj=(Value)m.get(KEY_METATYPE);  } else {    obj=new Value();    m.put(KEY_METATYPE,obj);    obj.setName(name);    obj.setContainer(parent);    obj.setScope(parent);    obj.setUnit(u2);    com.redhat.ceylon.model.typechecker.model.Class type=new com.redhat.ceylon.model.typechecker.model.Class();    type.setName(name);    type.setAnonymous(true);    type.setUnit(u2);    type.setContainer(parent);    type.setScope(parent);    if (parent == this) {      u2.addDeclaration(obj);      u2.addDeclaration(type);    }    parent.addMember(obj);    obj.setType(type.getType());    setAnnotations(obj,(Integer)m.get(KEY_PACKED_ANNS),(Map<String,Object>)m.get(KEY_ANNOTATIONS));    setAnnotations(obj.getTypeDeclaration(),(Integer)m.remove(KEY_PACKED_ANNS),(Map<String,Object>)m.remove(KEY_ANNOTATIONS));    if (type.getExtendedType() == null) {      if (m.containsKey("super")) {        type.setExtendedType(getTypeFromJson((Map<String,Object>)m.remove("super"),parent instanceof Declaration ? (Declaration)parent : null,existing));      } else {        type.setExtendedType(getTypeFromJson(idobj,parent instanceof Declaration ? (Declaration)parent : null,existing));      }    }    if (m.containsKey(KEY_SATISFIES)) {      List<Map<String,Object>> stypes=(List<Map<String,Object>>)m.remove(KEY_SATISFIES);      type.setSatisfiedTypes(parseTypeList(stypes,existing));    }    if (m.containsKey(KEY_INTERFACES)) {      for (      Map.Entry<String,Map<String,Object>> inner : ((Map<String,Map<String,Object>>)m.remove(KEY_INTERFACES)).entrySet()) {        loadInterface(inner.getKey(),inner.getValue(),type,existing);      }    }    if (m.containsKey(KEY_CLASSES)) {      for (      Map.Entry<String,Map<String,Object>> inner : ((Map<String,Map<String,Object>>)m.remove(KEY_CLASSES)).entrySet()) {        loadClass(inner.getKey(),inner.getValue(),type,existing);      }    }    if (m.containsKey(KEY_OBJECTS)) {      for (      Map.Entry<String,Map<String,Object>> inner : ((Map<String,Map<String,Object>>)m.remove(KEY_OBJECTS)).entrySet()) {        loadObject(inner.getKey(),inner.getValue(),type,existing);      }    }    addAttributesAndMethods(m,type,existing);  }  return obj.getTypeDeclaration();}  }
class C{  @Override public boolean isCellEditable(EventObject anEvent){  if (anEvent instanceof MouseEvent) {    return ((MouseEvent)anEvent).getClickCount() >= clickCountToEdit;  }  return true;}  }
class C{  public static void debugLineContents(Element line){  Document doc=line.getDocument();  System.out.print("[");  for (int i=0; i < line.getElementCount(); i++) {    Element l=line.getElement(i);    try {      System.out.print("'" + doc.getText(l.getStartOffset(),l.getEndOffset() - l.getStartOffset()) + "'");    } catch (    BadLocationException ex) {      System.out.println("Bad location");    }  }  System.out.println("]");}  }
class C{  public void changePriority(T item,double priority){}  }
class C{  public PacketExtension parseExtension(XmlPullParser parser) throws Exception {  OfflineMessageInfo info=new OfflineMessageInfo();  boolean done=false;  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      if (parser.getName().equals("item"))       info.setNode(parser.getAttributeValue("","node"));    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("offline")) {        done=true;      }    }  }  return info;}  }
class C{  protected CharacterClassEscapeSequenceImpl(){  super();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int idx=getInt(stack);  MediaNode node=getMediaNode(stack);  if (node != null) {    DataObjectFilter[] filts=node.getFilters();    if (filts != null && idx >= 0 && idx < filts.length)     return filts[idx].getTechnique();  }  return null;}  }
class C{  private ArrayList<ArrayDBIDs> buildOneDimIndexes(Relation<? extends NumberVector> relation,DBIDs ids,DimensionSimilarityMatrix matrix){  final int dim=matrix.size();  ArrayList<ArrayDBIDs> subspaceIndex=new ArrayList<>(dim);  SortDBIDsBySingleDimension comp=new VectorUtil.SortDBIDsBySingleDimension(relation);  for (int i=0; i < dim; i++) {    ArrayModifiableDBIDs amDBIDs=DBIDUtil.newArray(ids);    comp.setDimension(matrix.dim(i));    amDBIDs.sort(comp);    subspaceIndex.add(amDBIDs);  }  return subspaceIndex;}  }
class C{  public Vertex parseFunction(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  Vertex function=parseElementName(Primitive.FUNCTION,stream,elements,debug,network);  stream.skipWhitespace();  ensureNext('{',stream);  function.addRelationship(Primitive.OPERATOR,new Primitive(function.getName()));  stream.skipWhitespace();  char peek=stream.peek();  int index=0;  while (peek != '}') {    stream.skipWhitespace();    Vertex element=parseElement(stream,elements,debug,network);    function.addRelationship(Primitive.DO,element,index);    String previous=stream.peekPreviousWord();    stream.skipWhitespace();    if (!"}".equals(previous)) {      ensureNext(';',',',stream);    }    stream.skipWhitespace();    peek=stream.peek();    index++;  }  ensureNext('}',stream);  return function;}  }
class C{  private LayerDefinition readLayer(final Node t) throws Exception {  final int layerWidth=getAttribute(t,"width",stendhalMap.getWidth());  final int layerHeight=getAttribute(t,"height",stendhalMap.getHeight());  final LayerDefinition layer=new LayerDefinition(layerWidth,layerHeight);  final int offsetX=getAttribute(t,"x",0);  final int offsetY=getAttribute(t,"y",0);  if ((offsetX != 0) || (offsetY != 0)) {    System.err.println("Severe error: maps has offset displacement");  }  layer.setName(getAttributeValue(t,"name"));  for (Node child=t.getFirstChild(); child != null; child=child.getNextSibling()) {    if ("data".equalsIgnoreCase(child.getNodeName())) {      final String encoding=getAttributeValue(child,"encoding");      if ((encoding != null) && "base64".equalsIgnoreCase(encoding)) {        final Node cdata=child.getFirstChild();        if (cdata != null) {          final char[] enc=cdata.getNodeValue().trim().toCharArray();          final byte[] dec=Base64.decode(enc);          final ByteArrayInputStream bais=new ByteArrayInputStream(dec);          InputStream is;          final String comp=getAttributeValue(child,"compression");          if ("gzip".equalsIgnoreCase(comp)) {            is=new GZIPInputStream(bais);          } else           if ("zlib".equalsIgnoreCase(comp)) {            is=new InflaterInputStream(bais);          } else {            is=bais;          }          final byte[] raw=layer.exposeRaw();          int offset=0;          while (offset != raw.length) {            offset+=is.read(raw,offset,raw.length - offset);          }          bais.close();        }      }    }  }  return layer;}  }
class C{  public AsyncResult QueryFirstAsync(RequestHeader RequestHeader,ViewDescription View,NodeTypeDescription[] NodeTypes,ContentFilter Filter,UnsignedInteger MaxDataSetsToReturn,UnsignedInteger MaxReferencesToReturn){  QueryFirstRequest req=new QueryFirstRequest(RequestHeader,View,NodeTypes,Filter,MaxDataSetsToReturn,MaxReferencesToReturn);  return channel.serviceRequestAsync(req);}  }
class C{  public boolean contains(PrintStream p){  return m_Streams.contains(p);}  }
class C{  private void resetLoggedInOutIndicators(){  getLoggedInIndicaterRegexField().setToolTipText(null);  getLoggedInIndicaterRegexField().setEnabled(true);  getLoggedOutIndicaterRegexField().setToolTipText(null);  getLoggedOutIndicaterRegexField().setEnabled(true);}  }
class C{  public Topology buildAppTopology(){  Topology t=tp.newTopology("mqttClientPublisher");  TStream<String> msgs=t.poll(new MsgSupplier(options.get(OPT_PUB_CNT)),1L,TimeUnit.SECONDS);  MqttConfig config=Runner.newConfig(options);  MqttStreams mqtt=new MqttStreams(t,null);  mqtt.publish(msgs,options.get(OPT_TOPIC),options.get(OPT_QOS),options.get(OPT_RETAIN));  return t;}  }
class C{  private String identifier() throws IOException {  _asExpected=true;  if (!isIdentifierStartChar()) {    _asExpected=false;    return null;  }  StringBuffer identifierValue=new StringBuffer();  while (!isAllRead() && isIdentifierChar()) {    saveCurrent();    identifierValue.append(_working[_pos]);    go();  }  while (identifierValue.length() > 0 && Utils.isIdentifierHelperChar(identifierValue.charAt(identifierValue.length() - 1))) {    identifierValue.deleteCharAt(identifierValue.length() - 1);  }  if (identifierValue.length() == 0) {    return null;  }  String id=identifierValue.toString();  int columnIndex=id.indexOf(':');  if (columnIndex >= 0) {    String prefix=id.substring(0,columnIndex);    String suffix=id.substring(columnIndex + 1);    int nextColumnIndex=suffix.indexOf(':');    if (nextColumnIndex >= 0) {      suffix=suffix.substring(0,nextColumnIndex);    }    if (props.isNamespacesAware()) {      id=prefix + ":" + suffix;      if (!"xmlns".equalsIgnoreCase(prefix)) {        _namespacePrefixes.add(prefix.toLowerCase());      }    } else {      id=suffix;    }  }  return id;}  }
class C{  protected void handleException(JMSException je){  if (endTime == 0) {    endTime=System.currentTimeMillis();  }  Exception le=je.getLinkedException();  Throwable t=je.getCause();  if (null == t && null != le && t != le) {    je.initCause(le);  }  handleException((Exception)je);}  }
class C{  public boolean isCloseOnCompletion(){  checkClosed();  return true;}  }
class C{  public InvalidParameterSpecException(){  super();}  }
class C{  ScheduledFutureTask(Runnable r,V result,long ns){  super(r,result);  this.time=ns;  this.period=0;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  public static CreateInstance parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreateInstance object=new CreateInstance();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"createInstance".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (CreateInstance)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","request").equals(reader.getName())) {      object.setRequest(org.oscm.xsd.InstanceRequest.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","requestingUser").equals(reader.getName())) {      object.setRequestingUser(org.oscm.xsd.User.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void testSimpleFunction() throws Exception {  check("test()","{fn test()}");  check("select test()","select {fn test()}");  check("select test() from table;","select {fn test()} from table;");  check("func(field1) func(field2)","{fn func(field1)} {fn func(field2)}");  check("select func(field1), func(field2)","select {fn func(field1)}, {fn func(field2)}");  check("select func(field1), func(field2) from table;","select {fn func(field1)}, {fn func(field2)} from table;");}  }
class C{  @NamespacePermission(fields="#request.namespace",permissions=NamespacePermissionEnum.WRITE) @Override public BusinessObjectFormat createBusinessObjectFormat(BusinessObjectFormatCreateRequest request){  validateBusinessObjectFormatCreateRequest(request);  BusinessObjectFormatKey businessObjectFormatKey=getBusinessObjectFormatKey(request);  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDaoHelper.getBusinessObjectDefinitionEntity(new BusinessObjectDefinitionKey(businessObjectFormatKey.getNamespace(),businessObjectFormatKey.getBusinessObjectDefinitionName()));  FileTypeEntity fileTypeEntity=fileTypeDaoHelper.getFileTypeEntity(request.getBusinessObjectFormatFileType());  BusinessObjectFormatEntity latestVersionBusinessObjectFormatEntity=businessObjectFormatDao.getBusinessObjectFormatByAltKey(businessObjectFormatKey);  if (latestVersionBusinessObjectFormatEntity != null) {    BusinessObjectFormat latestVersionBusinessObjectFormat=businessObjectFormatHelper.createBusinessObjectFormatFromEntity(latestVersionBusinessObjectFormatEntity);    if (latestVersionBusinessObjectFormat.getSchema() != null) {      validateNewSchemaIsAdditiveToOldSchema(request.getSchema(),latestVersionBusinessObjectFormat.getSchema());    }    latestVersionBusinessObjectFormatEntity.setLatestVersion(false);    businessObjectFormatDao.saveAndRefresh(latestVersionBusinessObjectFormatEntity);  }  Integer businessObjectFormatVersion=latestVersionBusinessObjectFormatEntity == null ? 0 : latestVersionBusinessObjectFormatEntity.getBusinessObjectFormatVersion() + 1;  BusinessObjectFormatEntity newBusinessObjectFormatEntity=createBusinessObjectFormatEntity(request,businessObjectDefinitionEntity,fileTypeEntity,businessObjectFormatVersion);  return businessObjectFormatHelper.createBusinessObjectFormatFromEntity(newBusinessObjectFormatEntity);}  }
class C{  public KafkaConfigState(ZookeeperConfiguration zkConfig){  this.configStore=new CuratorConfigStore<>(zkConfig.getFrameworkName(),zkConfig.getMesosZkUri());}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BEToolBarSeparatorUI();}  }
class C{  public static void generateSample(MatrixBlock out,long range,int size,boolean replace,long seed) throws DMLRuntimeException {  out.reset(size,1,false);  out.allocateDenseBlock();  seed=(seed == -1 ? System.nanoTime() : seed);  if (!replace) {    for (int i=1; i <= size; i++)     out.setValueDenseUnsafe(i - 1,0,i);    Random rand=new Random(seed);    for (int i=size + 1; i <= range; i++) {      if (rand.nextInt(i) < size)       out.setValueDenseUnsafe(rand.nextInt(size),0,i);    }    double tmp;    int idx;    for (int i=size - 1; i >= 1; i--) {      idx=rand.nextInt(i);      tmp=out.getValueDenseUnsafe(idx,0);      out.setValueDenseUnsafe(idx,0,out.getValueDenseUnsafe(i,0));      out.setValueDenseUnsafe(i,0,tmp);    }  } else {    Random r=new Random(seed);    for (int i=0; i < size; i++)     out.setValueDenseUnsafe(i,0,1 + nextLong(r,range));  }  out.recomputeNonZeros();  out.examSparsity();}  }
class C{  protected double defaultDistMult(){  return 4.0;}  }
class C{  public void registerActivityType(String type,Class<? extends Activity> activityClass){  registerActivityType(type,activityClass,new DefaultActivityFactory(activityClass));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String role=getString(stack);  Show s=getShow(stack);  return (s == null) ? Pooler.EMPTY_PERSON_ARRAY : s.getPeopleObjList(Show.getRoleForString(role));}  }
class C{  public ParseException(){  super();}  }
class C{  public String splitEvaluatorTipText(){  return "The evaluator to apply to the cross validation folds. " + "This may be a classifier, regression scheme etc.";}  }
class C{  public void testCanEscapeWindowsSlashes(){  assertEquals("c:\\\\test",PropertyUtils.escapeBackSlashesIfNotNull("c:\\test"));}  }
class C{  public void refresh(){  if (myColorsAware != null) {    myNormalAttributesCache.clear();    mySelectedAttributesCache.clear();  }}  }
class C{  protected void sendResponse(final PrintWriter writer,final String header,final String message,final String data){  try {    JSONObject json=new JSONObject();    json.put("header",header);    json.put("message",message);    if (StringUtils.isNotBlank(data)) {      json.put("data",data);    }    writer.write(json.toString());  } catch (  JSONException e) {    LOGGER.error("Could not write JSON",e);    if (StringUtils.isNotBlank(data)) {      writer.write(String.format("{\"header\" : \"%s\", \"message\" : \"%s\", \"data\" :  \"%s\"}",header,message,data));    } else {      writer.write(String.format("{\"header\" : \"%s\", \"message\" : \"%s\"}",header,message));    }  }}  }
class C{  public ObjectName metricName(String contextName) throws MalformedObjectNameException {  return new ObjectName("debezium.mysql:type=connector-metrics,context=" + contextName + ",server="+ serverName());}  }
class C{  public void stopObligation(int id){  if (proverProcess != null && !proverProcess.isTerminated()) {    try {      proverProcess.getStreamsProxy().write("stop " + id + "\n");    } catch (    IOException e) {      ProverUIActivator.getDefault().logError("Error sending signal to tlapm to stop obligation " + id,e);    }  }}  }
class C{  public ConnectException(){}  }
class C{  private void computeTabTiltHelper(long time,RectF stackRect){  final boolean portrait=mCurrentMode == Orientation.PORTRAIT;  final float parentWidth=stackRect.width();  final float parentHeight=stackRect.height();  final float overscrollPercent=computeOverscrollPercent();  if (mOverviewAnimationType == OverviewAnimationType.START_PINCH || mOverviewAnimationType == OverviewAnimationType.DISCARD || mOverviewAnimationType == OverviewAnimationType.FULL_ROLL || mOverviewAnimationType == OverviewAnimationType.TAB_FOCUSED || mOverviewAnimationType == OverviewAnimationType.UNDISCARD || mOverviewAnimationType == OverviewAnimationType.DISCARD_ALL) {  } else   if (mPinch0TabIndex >= 0 || overscrollPercent == 0.0f || mOverviewAnimationType == OverviewAnimationType.REACH_TOP) {    for (int i=0; i < mStackTabs.length; ++i) {      StackTab stackTab=mStackTabs[i];      LayoutTab layoutTab=stackTab.getLayoutTab();      layoutTab.setTiltX(0,0);      layoutTab.setTiltY(0,0);    }  } else   if (overscrollPercent < 0) {    if (mOverScrollCounter >= OVERSCROLL_FULL_ROLL_TRIGGER) {      startAnimation(time,OverviewAnimationType.FULL_ROLL);      mOverScrollCounter=0;      setScrollTarget(MathUtils.clamp(mScrollOffset,getMinScroll(false),getMaxScroll(false)),false);    } else {      float tilt=0;      if (overscrollPercent < -OVERSCROLL_TOP_SLIDE_PCTG) {        float scaledOverscroll=(overscrollPercent + OVERSCROLL_TOP_SLIDE_PCTG) / (1 - OVERSCROLL_TOP_SLIDE_PCTG);        tilt=mUnderScrollAngleInterpolator.getInterpolation(-scaledOverscroll) * -mMaxOverScrollAngle * BACKWARDS_TILT_SCALE;      }      float pivotOffset=0;      LayoutTab topTab=mStackTabs[mStackTabs.length - 1].getLayoutTab();      pivotOffset=portrait ? topTab.getScaledContentHeight() / 2 + topTab.getY() : topTab.getScaledContentWidth() / 2 + topTab.getX();      for (int i=0; i < mStackTabs.length; ++i) {        StackTab stackTab=mStackTabs[i];        LayoutTab layoutTab=stackTab.getLayoutTab();        if (portrait) {          layoutTab.setTiltX(tilt,pivotOffset - layoutTab.getY());        } else {          layoutTab.setTiltY(LocalizationUtils.isLayoutRtl() ? -tilt : tilt,pivotOffset - layoutTab.getX());        }      }    }  } else {    float tilt=mOverScrollAngleInterpolator.getInterpolation(overscrollPercent) * mMaxOverScrollAngle;    float offset=mOverscrollSlideInterpolator.getInterpolation(overscrollPercent) * mMaxOverScrollSlide;    for (int i=0; i < mStackTabs.length; ++i) {      StackTab stackTab=mStackTabs[i];      LayoutTab layoutTab=stackTab.getLayoutTab();      if (portrait) {        float adjust=MathUtils.clamp((layoutTab.getY() / parentHeight) + 0.50f,0,1);        layoutTab.setTiltX(tilt * adjust,layoutTab.getScaledContentHeight() / 3);        layoutTab.setY(layoutTab.getY() + offset);      } else       if (LocalizationUtils.isLayoutRtl()) {        float adjust=MathUtils.clamp(-(layoutTab.getX() / parentWidth) + 0.50f,0,1);        layoutTab.setTiltY(-tilt * adjust,layoutTab.getScaledContentWidth() * 2 / 3);        layoutTab.setX(layoutTab.getX() - offset);      } else {        float adjust=MathUtils.clamp((layoutTab.getX() / parentWidth) + 0.50f,0,1);        layoutTab.setTiltY(tilt * adjust,layoutTab.getScaledContentWidth() / 3);        layoutTab.setX(layoutTab.getX() + offset);      }    }  }}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  String idEntidad=(String)session.getAttribute(Misc.ENTIDAD_ID);  ListaExpedientesForm listaExpedienteForm=(ListaExpedientesForm)form;  try {    String cnif=request.getParameter(Misc.CNIF);    String numExpediente=request.getParameter(Misc.EXPEDIENTE);    String procedimiento=request.getParameter(Misc.PROCEDIMIENTO);    String numeroRegistroInicial=request.getParameter(Misc.NUMERO_REGISTRO_INICIAL);    String fechaRegistroInicialDesdeRequest=request.getParameter(Misc.FECHA_REGISTRO_INICIAL_DESDE);    String operadorFechaInicial=request.getParameter(Misc.OPERADOR_CONSULTA_FECHA_INICIAL);    String fechaRegistroInicialHastaRequest=request.getParameter(Misc.FECHA_REGISTRO_INICIAL_HASTA);    String fechaDesdeRequest=request.getParameter(Misc.FECHA_DESDE);    String operador=request.getParameter(Misc.OPERADOR_CONSULTA);    String fechaHastaRequest=request.getParameter(Misc.FECHA_HASTA);    String estado=request.getParameter(Misc.ESTADO);    String fechaParseadaDesde=null;    String fechaParseadaHasta=null;    String fechaRegistroInicialParseadaDesde=null;    String fechaRegistroInicialParseadaHasta=null;    try {      fechaParseadaDesde=parsearFecha(fechaDesdeRequest);      fechaParseadaHasta=parsearFecha(fechaHastaRequest);      fechaRegistroInicialParseadaDesde=parsearFecha(fechaRegistroInicialDesdeRequest);      fechaRegistroInicialParseadaHasta=parsearFecha(fechaRegistroInicialHastaRequest);    } catch (    Exception e) {      ActionMessages errors=new ActionMessages();      errors.add("error",new ActionMessage("formatoFechaIncorrecto"));      return mapping.findForward("Busqueda");    }    session.setAttribute(Misc.CNIF,cnif);    session.setAttribute(Misc.EXPEDIENTE,numExpediente);    session.setAttribute(Misc.PROCEDIMIENTO,procedimiento);    session.setAttribute(Misc.NUMERO_REGISTRO_INICIAL,numeroRegistroInicial);    session.setAttribute(Misc.FECHA_REGISTRO_INICIAL_DESDE,fechaRegistroInicialParseadaDesde);    session.setAttribute(Misc.FECHA_REGISTRO_INICIAL_DESDE_BUSQUEDA,fechaRegistroInicialDesdeRequest);    session.setAttribute(Misc.OPERADOR_CONSULTA_FECHA_INICIAL,operadorFechaInicial);    session.setAttribute(Misc.FECHA_REGISTRO_INICIAL_HASTA,fechaRegistroInicialParseadaHasta);    session.setAttribute(Misc.FECHA_REGISTRO_INICIAL_HASTA_BUSQUEDA,fechaRegistroInicialHastaRequest);    session.setAttribute(Misc.FECHA_DESDE,fechaParseadaDesde);    session.setAttribute(Misc.FECHA_DESDE_BUSQUEDA,fechaDesdeRequest);    session.setAttribute(Misc.OPERADOR_CONSULTA,operador);    session.setAttribute(Misc.FECHA_HASTA,fechaParseadaHasta);    session.setAttribute(Misc.FECHA_HASTA_BUSQUEDA,fechaHastaRequest);    session.setAttribute(Misc.ESTADO,estado);    Entidad entidad=Misc.obtenerEntidad(idEntidad);    ServicioConsultaExpedientes oServicio=LocalizadorServicios.getServicioConsultaExpedientes();    CriterioBusquedaExpedientes oCriterio=new CriterioBusquedaExpedientes();    oCriterio.setNIF(cnif);    oCriterio.setExpediente(numExpediente);    oCriterio.setNumeroRegistroInicial(numeroRegistroInicial);    oCriterio.setProcedimiento(procedimiento);    oCriterio.setFechaDesde(fechaParseadaDesde);    oCriterio.setFechaHasta(fechaParseadaHasta);    oCriterio.setOperadorConsulta(operador);    oCriterio.setFechaRegistroInicialDesde(fechaRegistroInicialParseadaDesde);    oCriterio.setFechaRegistroInicialHasta(fechaRegistroInicialParseadaHasta);    oCriterio.setOperadorConsultaFechaInicial(operadorFechaInicial);    oCriterio.setEstado(estado);    Expedientes nuevoExpedientes=new Expedientes();    Expedientes expedientes=oServicio.busquedaExpedientes(oCriterio,entidad);    for (int a=0; a < expedientes.count(); a++) {      Expediente expediente=(Expediente)expedientes.get(a);      if (expediente.getEstado().equals(Expediente.COD_ESTADO_EXPEDIENTE_FINALIZADO)) {        expediente.setEstado("cerrado");      } else {        expediente.setEstado("abierto");      }      String proc=expediente.getProcedimiento();      if (proc.length() > 60) {        proc=proc.substring(0,57) + "...";        expediente.setProcedimiento(proc);      }      boolean existeNotificacion=oServicio.existenNotificaciones(expediente.getNumero(),entidad);      if (existeNotificacion) {        expediente.setNotificacion("S");      } else {        expediente.setNotificacion("N");      }      boolean existeSubsanacion=oServicio.existenSubsanaciones(expediente.getNumero(),entidad);      if (existeSubsanacion) {        expediente.setAportacion("S");      } else {        expediente.setAportacion("N");      }      boolean existePago=oServicio.existenPagos(expediente.getNumero(),entidad);      if (existePago) {        expediente.setPagos("S");      } else {        expediente.setPagos("N");      }      nuevoExpedientes.add(expediente);    }    listaExpedienteForm.setExpedientes(nuevoExpedientes);    request.setAttribute("expedientes",nuevoExpedientes.getExpedientes());  } catch (  Exception ex) {    request.setAttribute(Misc.MENSAJE_ERROR,ex.getMessage());  }  return mapping.findForward("Success_Search");}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public byte[] internalArray(){  return data;}  }
class C{  protected Expression number(int opPos) throws TransformerException {  return compileUnary(new org.apache.xpath.operations.Number(),opPos);}  }
class C{  void transfer(IntEntry[] newTable){  IntEntry<VALUE>[] src=table;  int newCapacity=newTable.length;  for (int j=0; j < src.length; j++) {    IntEntry<VALUE> e=src[j];    if (e != null) {      src[j]=null;      do {        IntEntry<VALUE> next=e.next;        int i=indexFor(e.hash,newCapacity);        e.next=newTable[i];        newTable[i]=e;        e=next;      } while (e != null);    }  }}  }
class C{  protected void addPhraseFieldQueries(BooleanQuery.Builder query,List<Clause> clauses,ExtendedDismaxConfiguration config) throws SyntaxError {  List<FieldParams> allPhraseFields=config.getAllPhraseFields();  if (allPhraseFields.size() > 0) {    List<Clause> normalClauses=new ArrayList<>(clauses.size());    for (    Clause clause : clauses) {      if (clause.field != null || clause.isPhrase)       continue;      if (clause.isBareWord()) {        String s=clause.val;        if ("OR".equals(s) || "AND".equals(s) || "NOT".equals(s)|| "TO".equals(s))         continue;      }      normalClauses.add(clause);    }    Multimap<Integer,FieldParams> phraseFieldsByWordGram=Multimaps.index(allPhraseFields,WORD_GRAM_EXTRACTOR);    for (    Map.Entry<Integer,Collection<FieldParams>> phraseFieldsByWordGramEntry : phraseFieldsByWordGram.asMap().entrySet()) {      Multimap<Integer,FieldParams> phraseFieldsBySlop=Multimaps.index(phraseFieldsByWordGramEntry.getValue(),PHRASE_SLOP_EXTRACTOR);      for (      Map.Entry<Integer,Collection<FieldParams>> phraseFieldsBySlopEntry : phraseFieldsBySlop.asMap().entrySet()) {        addShingledPhraseQueries(query,normalClauses,phraseFieldsBySlopEntry.getValue(),phraseFieldsByWordGramEntry.getKey(),config.tiebreaker,phraseFieldsBySlopEntry.getKey());      }    }  }}  }
class C{  private void showResult(){  if (mLastDewarpedImg != null) {    mShownBitmap=mLastDewarpedImg.convertToBitmap();    mLastDewarpedImg=null;    mImageView.setImageBitmap(mShownBitmap);    mResultView.setVisibility(View.VISIBLE);    mHaveResult=false;    if (Build.VERSION.SDK_INT >= 23) {      if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {        mBtnSave.setVisibility(View.INVISIBLE);        requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},MY_STORAGE_REQUEST_CODE);      }    }  }}  }
class C{  public static boolean isValidMD5(String s){  return s.matches("[a-fA-F0-9]{32}");}  }
class C{  protected Map<String,String> loadSessionVariables(HttpServletRequest req) throws ServletException {  Map<String,String> datastoreMap=new HashMap<>();  String sessionId=getCookieValue(req,"bookshelfSessionId");  if (sessionId.equals("")) {    return datastoreMap;  }  Key key=keyFactory.newKey(sessionId);  Transaction transaction=datastore.newTransaction();  try {    Entity stateEntity=transaction.get(key);    StringBuilder logNames=new StringBuilder();    if (stateEntity != null) {      for (      String varName : stateEntity.names()) {        req.getSession().setAttribute(varName,stateEntity.getString(varName));        datastoreMap.put(varName,stateEntity.getString(varName));        logNames.append(varName + " ");      }    } else {    }  }  finally {    if (transaction.active()) {      transaction.rollback();    }  }  return datastoreMap;}  }
class C{  @Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){  mFastAdapter.onBindViewHolder(holder,position);}  }
class C{  public void clear(){  m.clear();}  }
class C{  public boolean hasMoreElements(){  if (m_mine.hasMoreElements()) {    return true;  }  if (m_next != null) {    return m_next.hasMoreElements();  }  return false;}  }
class C{  public void testVerifyCommitRecordIndex(){  final Properties properties=new Properties(getProperties());  properties.setProperty(AbstractTransactionService.Options.MIN_RELEASE_AGE,"400");  final Journal store=getJournal(properties);  try {    MemStrategy bs=(MemStrategy)store.getBufferStrategy();    for (int r=0; r < 10; r++) {      ArrayList<Long> addrs=new ArrayList<Long>();      for (int i=0; i < 100; i++) {        addrs.add(bs.write(randomData(45)));      }      store.commit();      for (      long addr : addrs) {        bs.delete(addr);      }      store.commit();    }    Thread.currentThread().sleep(400);    verifyCommitIndex(store,20);    store.close();  } catch (  InterruptedException e) {  } finally {    store.destroy();  }}  }
class C{  @Override public FlowHandler createFlowHandler(FacesContext context){  return new FlowHandlerImpl();}  }
class C{  private Operation createNotifyOp(String coordinator,String serviceLink,String header,Operation.CompletionHandler callback){  ConflictCheckRequest body=new ConflictCheckRequest();  body.serviceLink=serviceLink;  return Operation.createPatch(this,coordinator).addRequestHeader(Operation.TRANSACTION_HEADER,header).setBody(body).setReferer(getUri()).setCompletion(callback);}  }
class C{  public void testConstructorSignBytesNegative1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15};  int aSign=-1;  byte rBytes[]={-13,-57,-101,1,75,-90,-46,-92,-4,15};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public boolean isMotorEnabled(){  return joint.isMotorEnabled();}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  public DERUTCTime(Date time){  SimpleDateFormat dateF=new SimpleDateFormat("yyMMddHHmmss'Z'");  dateF.setTimeZone(new SimpleTimeZone(0,"Z"));  this.time=Strings.toByteArray(dateF.format(time));}  }
class C{  private void updateWidget(){  RemoteViews remoteViews=WidgetProvider.configureWidgetIntents(this,mCurrentEpisode);  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(this);  ComponentName thisWidget=new ComponentName(getApplicationContext(),WidgetProvider.class);  int playPauseResId=PlaybackButtonHelper.getWidgetPlaybackButtonResId(getPlaybackState());  int[] allWidgetIds=appWidgetManager.getAppWidgetIds(thisWidget);  if (allWidgetIds == null || allWidgetIds.length == 0) {    return;  }  if (mCurrentEpisode == null) {    remoteViews.setTextViewText(R.id.episode_title,"");    remoteViews.setTextViewText(R.id.channel_title,"");    remoteViews.setImageViewResource(R.id.play,playPauseResId);    remoteViews.setImageViewResource(R.id.channel_art,R.drawable.default_channel_art);  } else {    ImageLoadHelper.loadImageIntoWidget(this,mCurrentEpisode.getChannelArtworkUrl(),remoteViews,R.id.channel_art,allWidgetIds,new RoundedCornersTransformation(this));    remoteViews.setOnClickPendingIntent(R.id.play,PendingIntentHelper.getPlayOrPauseIntent(this,getPlaybackState()));    remoteViews.setTextViewText(R.id.episode_title,mCurrentEpisode.getTitle());    remoteViews.setTextViewText(R.id.channel_title,mCurrentEpisode.getChannelTitle());    remoteViews.setImageViewResource(R.id.play,playPauseResId);  }  for (  int widgetId : allWidgetIds) {    appWidgetManager.updateAppWidget(widgetId,remoteViews);  }}  }
class C{  private int trimToPowerOf2(int initialCapacity){  int capacity=1;  while (capacity < initialCapacity) {    capacity<<=1;  }  return capacity;}  }
class C{  protected Polygon createArrow(mxPoint p0,mxPoint pe){  double spacing=mxConstants.ARROW_SPACING * scale;  double width=mxConstants.ARROW_WIDTH * scale;  double arrow=mxConstants.ARROW_SIZE * scale;  double dx=pe.getX() - p0.getX();  double dy=pe.getY() - p0.getY();  double dist=Math.sqrt(dx * dx + dy * dy);  double length=dist - 2 * spacing - arrow;  double nx=dx / dist;  double ny=dy / dist;  double basex=length * nx;  double basey=length * ny;  double floorx=width * ny / 3;  double floory=-width * nx / 3;  double p0x=p0.getX() - floorx / 2 + spacing * nx;  double p0y=p0.getY() - floory / 2 + spacing * ny;  double p1x=p0x + floorx;  double p1y=p0y + floory;  double p2x=p1x + basex;  double p2y=p1y + basey;  double p3x=p2x + floorx;  double p3y=p2y + floory;  double p5x=p3x - 3 * floorx;  double p5y=p3y - 3 * floory;  Polygon poly=new Polygon();  poly.addPoint((int)Math.round(p0x),(int)Math.round(p0y));  poly.addPoint((int)Math.round(p1x),(int)Math.round(p1y));  poly.addPoint((int)Math.round(p2x),(int)Math.round(p2y));  poly.addPoint((int)Math.round(p3x),(int)Math.round(p3y));  poly.addPoint((int)Math.round(pe.getX() - spacing * nx),(int)Math.round(pe.getY() - spacing * ny));  poly.addPoint((int)Math.round(p5x),(int)Math.round(p5y));  poly.addPoint((int)Math.round(p5x + floorx),(int)Math.round(p5y + floory));  return poly;}  }
class C{  public EventType(){  id=String.valueOf(count++);}  }
class C{  public boolean startsWith(XMLString prefix){  return m_str.startsWith(prefix.toString());}  }
class C{  public IOUtils(){  super();}  }
class C{  @Override public void slaveLost(SchedulerDriver driver,Protos.SlaveID slaveId){  scheduler.expireAllLeasesByVMId(slaveId.getValue());}  }
class C{  @Override public void draw(Graphics2D g){  if (getOwner().isTransformable()) {    drawRectangle(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.MOVE_HANDLE_FILL_COLOR),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.MOVE_HANDLE_STROKE_COLOR));  } else {    drawRectangle(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_FILL_COLOR),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_STROKE_COLOR));  }}  }
class C{  @Override public void addExternalHandler(final Object newHandler,final int type){switch (type) {case Options.FormsActionHandler:    userActionHandler=(ActionHandler)newHandler;  break;case Options.CustomMouseHandler:JavaFXMouseListener.setCustomMouseFunctions((JavaFXMouseFunctionality)newHandler);break;case Options.ThumbnailHandler:pages.setThumbnailPanel((org.jpedal.display.GUIThumbnailPanel)newHandler);break;default :externalHandlers.addExternalHandler(newHandler,type);}}  }
class C{  public static void main(String[] args){  double[][] matrix1=getmatrix(1);  double[][] matrix2=getmatrix(2);  double[][] matrix3=multiplyMatrix(matrix1,matrix2);  print(matrix1,matrix2,matrix3);}  }
class C{  private void genTable(String tableName,String whereClause,boolean completeXML,Properties ctx,WebInfo wi){  String l_szTrxName=null;  StringBuffer tmpCode=new StringBuffer();  String dataTableName=tableName;  String l_whereClause=replaceSessionElements(wi,whereClause);  tmpCode.append("<" + tableName + ">\n");  if (whereClause.indexOf("AD_Reference") > -1) {    dataTableName="AD_Ref_List";  }  int[] l_nIDs=PO.getAllIDs(dataTableName,l_whereClause,l_szTrxName);  int[] l_nTableIDs=MTable.getAllIDs("AD_Table","TableName='" + dataTableName + "'",l_szTrxName);  if (l_nTableIDs.length > 0) {    MTable table=MTable.get(ctx,l_nTableIDs[0]);    PO l_Object=null;    if (completeXML) {      for (int i=0; i < l_nIDs.length; i++) {        l_Object=table.getPO(l_nIDs[i],l_szTrxName);        l_Object.get_xmlString(tmpCode);      }    } else {      String sql=MLookupFactory.getLookup_TableDirEmbed(Language.getLanguage("en"),dataTableName + "_ID",dataTableName);      sql=sql.concat(" AND " + l_whereClause);      PreparedStatement pstm=DB.prepareStatement(sql,l_szTrxName);      ResultSet rs=null;      try {        rs=pstm.executeQuery();      } catch (      Exception e) {      }      for (int i=0; i < l_nIDs.length; i++) {        l_Object=table.getPO(l_nIDs[i],l_szTrxName);        tmpCode.append("<" + dataTableName + " AD_Table_ID=\""+ table.get_ID()+ "\" Record_ID=\""+ l_Object.get_ID()+ "\">\n");        tmpCode.append("<" + dataTableName + "_ID>");        tmpCode.append(l_Object.get_ID());        tmpCode.append("</" + dataTableName + "_ID>\n");        if (dataTableName.equals("AD_Ref_List")) {          tmpCode.append("<Value>");          tmpCode.append("<![CDATA[" + l_Object.get_Value("Value") + "]]>\n");          tmpCode.append("</Value>\n");        }        if (dataTableName.equals("AD_User") || dataTableName.equals("C_Project")) {          tmpCode.append("<C_BPartner_ID>");          tmpCode.append(l_Object.get_Value("C_BPartner_ID"));          tmpCode.append("</C_BPartner_ID>\n");        }        tmpCode.append("<DisplayName>\n");        try {          if (rs.next()) {            tmpCode.append("<![CDATA[" + rs.getString(1) + "]]>\n");          }        } catch (        SQLException e) {          tmpCode.append("<![CDATA[" + e.getMessage() + "]]\n");        }        tmpCode.append("</DisplayName>\n");        tmpCode.append("</" + dataTableName + ">\n");      }      try {        rs.close();        pstm.close();      } catch (      Exception e) {      }    }  }  tmpCode.append("</" + tableName + ">\n");  xmlCode.append(tmpCode);}  }
class C{  @Inline public static boolean isZeroed(Address start,int bytes){  return isSet(start,bytes,false,0);}  }
class C{  public int kthSmallestB(TreeNode root,int k){  Deque<TreeNode> stack=new ArrayDeque<>();  int count=k;  while (!stack.isEmpty() || root != null) {    if (root != null) {      stack.push(root);      root=root.left;    } else {      root=stack.pop();      count--;      if (count == 0) {        return root.val;      }      root=root.right;    }  }  return -1;}  }
class C{  public static String toString(Calendar v){  if (v != null) {    return new SimpleDateFormat("EEE MM/dd/yyyy hh:mm:ss a").format(v.getTime());  }  return null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int a;  int i;  float progress;  int range;  boolean blnTextOutput=false;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnTextOutput=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    int minValue=(int)(image.getMinimumValue());    int maxValue=(int)(image.getMaximumValue());    range=maxValue - minValue;    double[] data;    double[][] totals=new double[4][range + 1];    double[] radius=new double[range + 1];    double[][] centroid=new double[2][range + 1];    double[] DFCSum=new double[range + 1];    long[][] minRowAndCol=new long[2][range + 1];    for (a=0; a <= range; a++) {      minRowAndCol[0][a]=Long.MAX_VALUE;      minRowAndCol[1][a]=Long.MAX_VALUE;    }    updateProgress("Finding patch min row and columns:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          if (row < minRowAndCol[0][a]) {            minRowAndCol[0][a]=row;          }          if (col < minRowAndCol[1][a]) {            minRowAndCol[1][a]=col;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Finding patch min row and columns:",(int)progress);    }    updateProgress("Loop 1 of 3:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          totals[0][a]+=(col - minRowAndCol[1][a]);          totals[1][a]+=(row - minRowAndCol[0][a]);          totals[2][a]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 3:",(int)progress);    }    for (a=0; a <= range; a++) {      if (totals[2][a] > 0) {        centroid[0][a]=totals[0][a] / totals[2][a] + minRowAndCol[1][a];        centroid[1][a]=totals[1][a] / totals[2][a] + minRowAndCol[0][a];        radius[a]=Math.sqrt((totals[2][a]) / Math.PI) - 0.5;      }    }    updateProgress("Loop 2 of 3:",0);    double d;    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          d=Math.sqrt(Math.pow((col - centroid[0][a]),2d) + Math.pow((row - centroid[1][a]),2));          DFCSum[a]+=(double)d;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 3:",(int)progress);    }    for (a=0; a <= range; a++) {      if (totals[2][a] > 0) {        DFCSum[a]=DFCSum[a] / totals[2][a];      }    }    updateProgress("Loop 3 of 3:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          output.setValue(row,col,DFCSum[a]);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 3 of 3:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    if (blnTextOutput) {      DecimalFormat df;      df=new DecimalFormat("0.0000");      String retstr="Radius of Gyration\nPatch ID\tValue";      for (a=0; a <= range; a++) {        if (DFCSum[a] > 0) {          retstr=retstr + "\n" + (a + minValue)+ "\t"+ df.format(DFCSum[a]);        }      }      returnData(retstr);    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String transformBackToOriginalTipText(){  return "Transform through the PC space and back to the original space. " + "If only the best n PCs are retained (by setting varianceCovered < 1) " + "then this option will give a dataset in the original space but with "+ "less attribute noise.";}  }
class C{  public StandardOutputPrinter(){  this(InternalLogWriter.ALL_LEVEL);}  }
class C{  @Override public JnaDatabase identify() throws SQLException {  return new JnaDatabase(this);}  }
class C{  private boolean isBigEndian(){  return getFormat().isBigEndian();}  }
class C{  public static void playAlbum(final Context context,final long albumId,int position){  final long[] albumList=getSongListForAlbum(context,albumId);  if (albumList != null) {    playAll(albumList,position,false);  }}  }
class C{  public String edgesToString(){  String result="";  for (Iterator<Edge<T>> it=edgesIterator(); it.hasNext(); ) {    Edge<T> edge=it.next();    result+="(" + edge.from.value + "->"+ edge.to.value+ ")";  }  return result;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public AffineTransform inverse(){  double det=this.determinant();  return new AffineTransform((m11 * m22 - m21 * m12) / det,(m21 * m01 - m01 * m22) / det,(m01 * m12 - m11 * m02) / det,(m01 * (m22 * m13 - m12 * m23) + m02 * (m11 * m23 - m21 * m13) - m03 * (m11 * m22 - m21 * m12)) / det,(m20 * m12 - m10 * m22) / det,(m00 * m22 - m20 * m02) / det,(m10 * m02 - m00 * m12) / det,(m00 * (m12 * m23 - m22 * m13) - m02 * (m10 * m23 - m20 * m13) + m03 * (m10 * m22 - m20 * m12)) / det,(m10 * m21 - m20 * m11) / det,(m20 * m01 - m00 * m21) / det,(m00 * m11 - m10 * m01) / det,(m00 * (m21 * m13 - m11 * m23) + m01 * (m10 * m23 - m20 * m13) - m03 * (m10 * m21 - m20 * m11)) / det);}  }
class C{  public Instrumenter attachAdaptiveTimeContinuationCollector(){  includeAdaptiveTimeContinuation=true;  return this;}  }
class C{  public void push(final int value){  if (value >= -1 && value <= 5) {    mv.visitInsn(Opcodes.ICONST_0 + value);  } else   if (value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) {    mv.visitIntInsn(Opcodes.BIPUSH,value);  } else   if (value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) {    mv.visitIntInsn(Opcodes.SIPUSH,value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  protected void handleENumValChildren(Element e,EnumVariableValue var){  List<Element> local=e.getChildren();  for (int k=0; k < local.size(); k++) {    Element el=local.get(k);    if (el.getName().equals("enumChoice")) {      Attribute valAttr=el.getAttribute("value");      if (valAttr == null) {        var.addItem(LocaleSelector.getAttribute(el,"choice"));      } else {        var.addItem(LocaleSelector.getAttribute(el,"choice"),Integer.parseInt(valAttr.getValue()));      }    } else     if (el.getName().equals("enumChoiceGroup")) {      var.startGroup(LocaleSelector.getAttribute(el,"name"));      handleENumValChildren(el,var);      var.endGroup();    }  }}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public void put(Object key,Object value){  if (hints != null) {    hints.put(key,value);  }}  }
class C{  public boolean contains(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x))     return true;    i=(i + 1) & mask;  }  return false;}  }
class C{  public void addCertificates(Store certStore) throws CMSException {  certs.addAll(CMSUtils.getCertificatesFromStore(certStore));}  }
class C{  public int compareTo(Boolean that){  return compare(value,that.value);}  }
class C{  public final AlertDialog initiateScan(int cameraId){  return initiateScan(ALL_CODE_TYPES,cameraId);}  }
class C{  public MutablePeriod(long startInstant,long endInstant,Chronology chrono){  super(startInstant,endInstant,null,chrono);}  }
class C{  public final RealMatrix procrustinate(RealMatrix X){  if (X.getRowDimension() != rowDimension) {    throw new IllegalArgumentException("X does not have the expected number of rows");  }  if (X.getColumnDimension() != columnDimension) {    throw new IllegalArgumentException("X does not have the expected number of columns");  }  RealMatrix tt=new Array2DRowRealMatrix(rowDimension,columnDimension);  for (int i=0; i < rowDimension; i++) {    tt.setRowMatrix(i,T.transpose());  }  return X.multiply(R).scalarMultiply(s).add(tt);}  }
class C{  public Instant withDurationAdded(long durationToAdd,int scalar){  if (durationToAdd == 0 || scalar == 0) {    return this;  }  long instant=getChronology().add(getMillis(),durationToAdd,scalar);  return withMillis(instant);}  }
class C{  public InspectableFileCachedInputStream(final int bufferSize) throws IOException {  this(bufferSize,null);}  }
class C{  public Builder addFormDataPart(String name,String value){  return addPart(Part.createFormData(name,value));}  }
class C{  public Object extractMin(){  int numElem=this.numElem;  Object[] objects=this.objects;  double[] keys=this.keys;  if (numElem == 0)   return null;  keys[1 - 1]=keys[numElem - 1];  keys[numElem - 1]=0;  Object result=objects[1 - 1];  objects[1 - 1]=objects[numElem - 1];  objects[numElem - 1]=null;  numElem--;  heapify(1,numElem);  this.numElem=numElem;  return result;}  }
class C{  public boolean isActive(){  return active;}  }
class C{  protected void processOtherEvent(SimEvent ev){  if (ev == null) {    Log.printConcatLine(getName(),".processOtherEvent(): Error - an event is null.");  }}  }
class C{  public DoubleConverter(final Object defaultValue){  super(true,defaultValue);}  }
class C{  public PdxFieldAlreadyExistsException(String message){  super(message);}  }
class C{  public void restart(BackgroundTask<T,V> task){  cancel();  this.task=task;  taskHandler=backgroundWorker.handle(task);  taskHandler.execute();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.UNIT_NAME__REF:    return ref != null;}return super.eIsSet(featureID);}  }
class C{  public boolean removeCheckedMessage(){  SQLiteDatabase db=getWritableDatabase();  if (db != null) {    db.execSQL("UPDATE " + TABLE + " SET "+ COL_DELETED+ "="+ TRUE+ " WHERE "+ COL_CHECKED+ "="+ TRUE+ ";");    return true;  }  log.debug("Message not added to store, database is null.");  return false;}  }
class C{  public boolean isEmpty(){  return count == 0;}  }
class C{  @Timed @ExceptionMetered @GET @Path("{name}/clients") @Produces(APPLICATION_JSON) public Set<Client> clientDetailForGroup(@Auth AutomationClient automationClient,@PathParam("name") String name){  Group group=groupDAO.getGroup(name).orElseThrow(null);  return aclDAO.getClientsFor(group);}  }
class C{  protected void paintDeterminate(Graphics g,JComponent c){  if (!(g instanceof Graphics2D)) {    return;  }  if (isUseParentPaint()) {    super.paintDeterminate(g,c);    return;  }  Insets b=progressBar.getInsets();  int barRectWidth=progressBar.getWidth() - (b.right + b.left);  int barRectHeight=progressBar.getHeight() - (b.top + b.bottom);  paintProgressBarBgImpl(progressBar.getOrientation() == JProgressBar.HORIZONTAL,g,b,barRectWidth,barRectHeight);  if (barRectWidth <= 0 || barRectHeight <= 0) {    return;  }  int amountFull=getAmountFull(b,barRectWidth,barRectHeight);  Graphics2D g2=(Graphics2D)g;  g2.setColor(progressBar.getForeground());  if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {    if (WinUtils.isLeftToRight(c)) {      paintProgressBarContentImpl(true,g,b.left,b.top,amountFull,barRectHeight,-1);    } else {      paintProgressBarContentImpl(true,g,barRectWidth + b.left,b.top,barRectWidth + b.left - amountFull,barRectHeight,-1);    }  } else {    paintProgressBarContentImpl(false,g,b.left,b.top + barRectHeight - amountFull,barRectWidth,amountFull,barRectHeight);  }  if (progressBar.isStringPainted()) {    paintString(g,b.left,b.top,barRectWidth,barRectHeight,amountFull,b);  }}  }
class C{  private void emitHeader(ArrayList<PositionList.Entry> sortedPositions,ArrayList<LocalList.Entry> methodArgs) throws IOException {  boolean annotate=(annotateTo != null) || (debugPrint != null);  int mark=output.getCursor();  if (sortedPositions.size() > 0) {    PositionList.Entry entry=sortedPositions.get(0);    line=entry.getPosition().getLine();  }  output.writeUleb128(line);  if (annotate) {    annotate(output.getCursor() - mark,"line_start: " + line);  }  int curParam=getParamBase();  StdTypeList paramTypes=desc.getParameterTypes();  int szParamTypes=paramTypes.size();  if (!isStatic) {    for (    LocalList.Entry arg : methodArgs) {      if (curParam == arg.getRegister()) {        lastEntryForReg[curParam]=arg;        break;      }    }    curParam++;  }  mark=output.getCursor();  output.writeUleb128(szParamTypes);  if (annotate) {    annotate(output.getCursor() - mark,String.format("parameters_size: %04x",szParamTypes));  }  for (int i=0; i < szParamTypes; i++) {    Type pt=paramTypes.get(i);    LocalList.Entry found=null;    mark=output.getCursor();    for (    LocalList.Entry arg : methodArgs) {      if (curParam == arg.getRegister()) {        found=arg;        if (arg.getSignature() != null) {          emitStringIndex(null);        } else {          emitStringIndex(arg.getName());        }        lastEntryForReg[curParam]=arg;        break;      }    }    if (found == null) {      emitStringIndex(null);    }    if (annotate) {      String parameterName=(found == null || found.getSignature() != null) ? "<unnamed>" : found.getName().toHuman();      annotate(output.getCursor() - mark,"parameter " + parameterName + " "+ RegisterSpec.PREFIX+ curParam);    }    curParam+=pt.getCategory();  }  for (  LocalList.Entry arg : lastEntryForReg) {    if (arg == null) {      continue;    }    CstString signature=arg.getSignature();    if (signature != null) {      emitLocalStartExtended(arg);    }  }}  }
class C{  @Timed @ExceptionMetered @DELETE @Path("{name}") public Response deleteClient(@Auth AutomationClient automationClient,@PathParam("name") String name){  Client client=clientDAO.getClient(name).orElseThrow(null);  clientDAO.deleteClient(client);  auditLog.recordEvent(new Event(Instant.now(),EventTag.CLIENT_DELETE,automationClient.getName(),client.getName()));  return Response.noContent().build();}  }
class C{  public static boolean equals(Object[] array1,Object[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    Object e1=array1[i], e2=array2[i];    if (!(e1 == null ? e2 == null : e1.equals(e2))) {      return false;    }  }  return true;}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data) throws IOException {  writeByteArrayToFile(file,data,false);}  }
class C{  public void processDialogTerminated(DialogTerminatedEvent dialogTerminatedEvent){  if (sLogger.isActivated()) {    sLogger.debug("Dialog terminated");  }}  }
class C{  public static String toString(DBIDs ids){  if (ids instanceof DBID) {    return DBIDFactory.FACTORY.toString((DBID)ids);  }  StringBuilder buf=new StringBuilder();  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    if (buf.length() > 0) {      buf.append(", ");    }    buf.append(DBIDFactory.FACTORY.toString(iter));  }  return buf.toString();}  }
class C{  public static void append(Path file,Reader reader,boolean writeBom) throws IOException {  appendBuffered(file,reader,Charset.defaultCharset().name(),writeBom);}  }
class C{  public void addIDCondition(String id){  _specificityB++;  addCondition(Condition.createIDCondition(id));}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  int num_classes=(int)(snumClasses);  double[] ranking=new double[num_classes];  SortPair[] sortedActivations=ARTActivateCategories(instance);  java.util.Arrays.sort(sortedActivations);  double s0=sortedActivations[0].getValue();  double diff_act=s0 - sortedActivations[numCategories - 2].getValue();  int largest_activ=1;  double activ_change=0;  for (int i=1; i < sortedActivations.length; i++) {    activ_change=(s0 - sortedActivations[i].getValue()) / s0;    if (activ_change > threshold * diff_act) {      break;    }    largest_activ=largest_activ + 1;  }  double[] best_matches=new double[largest_activ];  java.util.Arrays.fill(best_matches,1);  best_matches[0]=s0;  for (int i=1; i < largest_activ; i++) {    best_matches[i]=sortedActivations[i].getValue();  }  double sum_mat=sumArray(best_matches);  int currentCategory=0;  this.neuronsactivated=new int[largest_activ];  this.neuronsactivity=new double[largest_activ];  for (int i=0; i < largest_activ; i++) {    this.neuronsactivity[i]=best_matches[i];    best_matches[i]=best_matches[i] / sum_mat;    currentCategory=sortedActivations[i].getOriginalIndex();    this.neuronsactivated[i]=currentCategory;    int[] s1=weightsB[currentCategory].getKeys();    int sit=weightsB[currentCategory].size();    int j=0;    for (int jt=0; jt < sit; jt++) {      j=s1[jt];      ranking[j]=ranking[j] + best_matches[i] * (Double)weightsB[currentCategory].get(j);    }  }  this.nrinstclassified+=1;  if (m_userankstoclass) {    return ARAMm_Ranking2Class(ranking);  }  return ranking;}  }
class C{  private int validate(File file) throws IOException {  MatrixReader reader=null;  try {    reader=new MatrixReader(file);    int count=0;    while (reader.hasNext()) {      if (reader.next().length > index) {        count++;      } else {        break;      }    }    if (count % (2 * P + 2) != 0) {      System.err.println(file + " is incomplete");    }    return count / (2 * P + 2);  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public static void trace(String method,String fileName,Object o){  if (SysProperties.TRACE_IO) {    System.out.println("IOUtils." + method + " "+ fileName+ " "+ o);  }}  }
class C{  public BurlapRuntimeException(String message,Throwable rootCause){  super(message);  this.rootCause=rootCause;}  }
class C{  private int calculateOptimalCacheCharsThreshold(int numTermVectors,int numPostings){  if (numPostings == 0 && numTermVectors == 0) {    return 0;  } else   if (numTermVectors >= 2) {    return 0;  } else {    return getCacheFieldValCharsThreshold();  }}  }
class C{  public void create() throws IOException {  folder=createTemporaryFolderIn(parentFolder);}  }
class C{  private boolean updateAnchorFromChildren(RecyclerView.State state,AnchorInfo anchorInfo){  if (getChildCount() == 0) {    return false;  }  final View focused=getFocusedChild();  if (focused != null && anchorInfo.isViewValidAsAnchor(focused,state)) {    anchorInfo.assignFromViewAndKeepVisibleRect(focused);    return true;  }  View referenceChild=anchorInfo.mLayoutFromEnd ? findReferenceChildClosestToEnd(state) : findReferenceChildClosestToStart(state);  if (referenceChild != null) {    anchorInfo.assignFromView(referenceChild);    if (!state.isPreLayout() && supportsPredictiveItemAnimations()) {      final boolean notVisible=mOrientationHelper.getDecoratedStart(referenceChild) >= mOrientationHelper.getEndAfterPadding() || mOrientationHelper.getDecoratedEnd(referenceChild) < mOrientationHelper.getStartAfterPadding();      if (notVisible) {        anchorInfo.mCoordinate=anchorInfo.mLayoutFromEnd ? mOrientationHelper.getEndAfterPadding() : mOrientationHelper.getStartAfterPadding();      }    }    return true;  }  return false;}  }
class C{  @SuppressWarnings("rawtypes") public Iterator<T> preorder(){  if (root == null) {    return empty();  }  return new ValueExtractor<T>(new PreorderTraversal(root));}  }
class C{  public void update(final double key,final U value){  update(Util.doubleToLongArray(key),value);}  }
class C{  public void write(String text,int offset,int length){  buffer.append(text.substring(offset,offset + length));}  }
class C{  public boolean endpointIsDiscovered(String key){  String value=getEndpointsMap().get(key.toUpperCase());  if (value == null) {    return false;  }  return new Boolean(value);}  }
class C{  @Override public void executionUnitImported(final ExecutionUnit process,final Element element){  NodeList children=element.getChildNodes();  children=element.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node child=children.item(i);    if (child instanceof Element) {      Element backgroundElement=(Element)child;      if (XML_TAG_BACKGROUND.equals(backgroundElement.getTagName())) {        String xStr=backgroundElement.getAttribute(XML_ATTRIBUTE_X_POSITION);        String yStr=backgroundElement.getAttribute(XML_ATTRIBUTE_Y_POSITION);        String wStr=backgroundElement.getAttribute(XML_ATTRIBUTE_WIDTH);        String hStr=backgroundElement.getAttribute(XML_ATTRIBUTE_HEIGHT);        String imgLocStr=backgroundElement.getAttribute(XML_ATTRIBUTE_LOCATION);        try {          int xLoc=Integer.parseInt(xStr);          int yLoc=Integer.parseInt(yStr);          int wLoc=Integer.parseInt(wStr);          int hLoc=Integer.parseInt(hStr);          ProcessBackgroundImage bgImg=new ProcessBackgroundImage(xLoc,yLoc,wLoc,hLoc,imgLocStr,process);          setBackgroundImage(bgImg);        } catch (        NullPointerException|IllegalArgumentException e) {        }      }    }  }}  }
class C{  public boolean init(){  BufferedReader fin=null;  String modelFile=taggerOpt.modelDir + File.separator + taggerOpt.modelFile;  try {    fin=new BufferedReader(new InputStreamReader(new FileInputStream(modelFile),"UTF-8"));    taggerMaps.readCpMaps(fin);    System.gc();    taggerMaps.readLbMaps(fin);    System.gc();    taggerDict.readDict(fin);    System.gc();    taggerFGen.readFeatures(fin);    System.gc();    fin.close();  } catch (  IOException e) {    System.out.println("Couldn't open model file: " + modelFile);    System.out.println(e.toString());    return false;  }  if (lambda == null) {    int numFeatures=taggerFGen.numFeatures();    lambda=new double[numFeatures];    for (int i=0; i < numFeatures; i++) {      Feature f=(Feature)taggerFGen.features.get(i);      lambda[f.idx]=f.wgt;    }  }  if (taggerVtb != null) {    taggerVtb.init(this);  }  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override final public boolean isKeys(){  return true;}  }
class C{  public RuntimeMBeanException(java.lang.RuntimeException e){  super();  runtimeException=e;}  }
class C{  public static File convertToRelativePath(File absolute) throws Exception {  File result;  String fileStr;  result=null;  if (File.separator.equals("\\")) {    try {      fileStr=absolute.getPath();      fileStr=fileStr.substring(0,1).toLowerCase() + fileStr.substring(1);      result=createRelativePath(new File(fileStr));    } catch (    Exception e) {      result=createRelativePath(absolute);    }  } else {    result=createRelativePath(absolute);  }  return result;}  }
class C{  public void updateRecordSoft(int id) throws IOException {  if (!database.isOpen())   throw new IllegalStateException("don't access the table before opening the database");  if (hardWriteMode)   throw new IllegalStateException("soft write attempted during hard write mode");  if (id > lastTransactionInsertId)   throw new IllegalStateException("attempt to update a row past the last inserted row");  if (id >= committedNextRowId)   return;  if (softModeSavedRows.get(id,false))   return;  softModeSavedRows.put(id,true);synchronized (this) {    getRecord(tempRecordData,id);  }  Util.writeInt(rollBackOut,id);  rollBackOut.write(tempRecordData);}  }
class C{  private synchronized void reinitialize(){  if (plot == null) {    initializePlot();  } else {    final ActionEvent ev=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,OVERVIEW_REFRESHING);    for (    ActionListener actionListener : actionListeners) {      actionListener.actionPerformed(ev);    }  }  for (  Pair<Element,Visualization> pair : vistoelem.values()) {    SVGUtil.removeFromParent(pair.first);  }  plotmap=arrangeVisualizations(ratio,1.0);  recalcViewbox();  final int thumbsize=(int)Math.max(screenwidth / plotmap.getWidth(),screenheight / plotmap.getHeight());  LayerMap oldlayers=vistoelem;  vistoelem=new LayerMap();  SVGUtil.removeFromParent(plotlayer);  SVGUtil.removeFromParent(hoverlayer);  plotlayer=plot.svgElement(SVGConstants.SVG_G_TAG);  hoverlayer=plot.svgElement(SVGConstants.SVG_G_TAG);  hoverlayer.setAttribute(SVGPlot.NO_EXPORT_ATTRIBUTE,SVGPlot.NO_EXPORT_ATTRIBUTE);  for (  Entry<PlotItem,double[]> e : plotmap.entrySet()) {    final double basex=e.getValue()[0];    final double basey=e.getValue()[1];    for (Iterator<PlotItem> iter=e.getKey().itemIterator(); iter.hasNext(); ) {      PlotItem it=iter.next();      boolean hasDetails=false;      Element g=plot.svgElement(SVGConstants.SVG_G_TAG);      SVGUtil.setAtt(g,SVGConstants.SVG_TRANSFORM_ATTRIBUTE,"translate(" + (basex + it.x) + " "+ (basey + it.y)+ ")");      plotlayer.appendChild(g);      vistoelem.put(it,null,g,null);      for (      VisualizationTask task : it.tasks) {        if (!visibleInOverview(task)) {          continue;        }        hasDetails|=!task.hasAnyFlags(VisualizationTask.FLAG_NO_DETAIL);        Pair<Element,Visualization> pair=oldlayers.remove(it,task);        if (pair == null) {          pair=new Pair<>(null,null);          pair.first=plot.svgElement(SVGConstants.SVG_G_TAG);        }        if (pair.second == null) {          pair.second=embedOrThumbnail(thumbsize,it,task,pair.first);        }        g.appendChild(pair.first);        vistoelem.put(it,task,pair);      }      if (hasDetails && !single) {        Element hover=plot.svgRect(basex + it.x,basey + it.y,it.w,it.h);        SVGUtil.addCSSClass(hover,selcss.getName());        EventTarget targ=(EventTarget)hover;        targ.addEventListener(SVGConstants.SVG_MOUSEOVER_EVENT_TYPE,hoverer,false);        targ.addEventListener(SVGConstants.SVG_MOUSEOUT_EVENT_TYPE,hoverer,false);        targ.addEventListener(SVGConstants.SVG_CLICK_EVENT_TYPE,hoverer,false);        targ.addEventListener(SVGConstants.SVG_CLICK_EVENT_TYPE,new SelectPlotEvent(it),false);        hoverlayer.appendChild(hover);      }    }  }  for (  Pair<Element,Visualization> pair : oldlayers.values()) {    if (pair.second != null) {      pair.second.destroy();    }  }  plot.getRoot().appendChild(plotlayer);  plot.getRoot().appendChild(hoverlayer);  plot.updateStyleElement();  final ActionEvent ev=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,OVERVIEW_REFRESHED);  for (  ActionListener actionListener : actionListeners) {    actionListener.actionPerformed(ev);  }}  }
class C{  public final int actualNumClasses(int bagIndex){  int returnValue=0;  int i;  for (i=0; i < m_perClass.length; i++) {    if (Utils.gr(m_perClassPerBag[bagIndex][i],0)) {      returnValue++;    }  }  return returnValue;}  }
class C{  private int scanForEqualItem(final int pStart,final int pEnd,final int pGuess,final T pItem,final boolean pReturnSequenceEndIfNoEqualItemFound){  int i=pGuess - 1;  while ((i >= pStart) && (pItem.compareTo(this.mList.get(i)) == 0)) {    i--;  }  i++;  while (i < pEnd) {    final T item=this.mList.get(i);    if (i <= pGuess) {      if (pItem.equals(item)) {        return i;      }    } else {      if (pItem.compareTo(item) == 0) {        if (pItem.equals(item)) {          return i;        }      } else {        return ListUtils.encodeInsertionIndex(i);      }    }    i++;  }  if (pReturnSequenceEndIfNoEqualItemFound) {    return i;  } else {    return SortedList.INDEX_INVALID;  }}  }
class C{  private String[] parseCommand(String command){  if (command.startsWith("search")) {    return command.trim().split(" ",2);  } else   if (command.startsWith("create")) {    return command.trim().split(" ",3);  } else   if (command.startsWith("upload")) {    return command.trim().split(" ",3);  }  return command.trim().split(" ");}  }
class C{  public void addFrame(CCSpriteFrame frame){  frames_.add(frame);}  }
class C{  private void layoutFrame(){  frame.setTitle(Messages.getString("MegaMek.SkinEditor.label") + Messages.getString("ClientGUI.clientTitleSuffix"));  frame.getContentPane().setLayout(new BorderLayout());  frame.getContentPane().add(this,BorderLayout.CENTER);  frame.validate();}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Packet>void registerOutListener(final Class<T> type,Player player,Predicate<T> listener){  NetworkManagerWrapper wrapper=wrapNetworkManager(player);  wrapper.registerOutgoingListener(type,listener);}  }
class C{  public int maximumGap(int[] num){  if (num == null || num.length < 2)   return 0;  int n=num.length;  int min=num[0];  int max=num[0];  for (  int i : num) {    max=Math.max(max,i);    min=Math.min(min,i);  }  double dist=(double)(max - min) / (n - 1);  int[] uppers=new int[n - 1];  int[] lowers=new int[n - 1];  Arrays.fill(uppers,-1);  Arrays.fill(lowers,-1);  for (  int i : num) {    int idx=(i == max ? n - 2 : (int)((i - min) / dist));    if (lowers[idx] == -1 || i < lowers[idx])     lowers[idx]=i;    if (uppers[idx] == -1 || i > uppers[idx])     uppers[idx]=i;  }  int prevUpper=uppers[0];  int maxGap=uppers[0] - lowers[0];  for (int i=1; i < n - 1; i++) {    if (lowers[i] == -1)     continue;    maxGap=Math.max(maxGap,lowers[i] - prevUpper);    prevUpper=uppers[i];  }  return maxGap;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_ptr_webview);  mPullRefreshWebView=(PullToRefreshWebView)findViewById(R.id.pull_refresh_webview);  mWebView=mPullRefreshWebView.getRefreshableView();  mWebView.getSettings().setJavaScriptEnabled(true);  mWebView.setWebViewClient(new SampleWebViewClient());  mWebView.loadUrl("http://www.google.com");}  }
class C{  private void calculateItemFittingMetadata(int width){  int maxNumItemsPerRow=mMaxItemsPerRow;  int numItems=getChildCount();  for (int i=0; i < numItems; i++) {    LayoutParams lp=(LayoutParams)getChildAt(i).getLayoutParams();    lp.maxNumItemsOnRow=1;    for (int curNumItemsPerRow=maxNumItemsPerRow; curNumItemsPerRow > 0; curNumItemsPerRow--) {      if (lp.desiredWidth < width / curNumItemsPerRow) {        lp.maxNumItemsOnRow=curNumItemsPerRow;        break;      }    }  }}  }
class C{  public boolean releaseRow(int row){  if (row < 0) {    return false;  } else   if (m_openrows != null && m_openrows.containsKey(row)) {    return false;  } else   if (row == m_curid) {    --m_curid;  } else   if (row == m_firstid) {    ++m_firstid;  } else {    if (m_openrows == null)     m_openrows=new IntIntTreeMap(false);    m_openrows.put(row,row);  }  return true;}  }
class C{  protected void addReactionPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ReactionFired_reaction_feature"),getString("_UI_PropertyDescriptor_description","_UI_ReactionFired_reaction_feature","_UI_ReactionFired_type"),SexecPackage.Literals.REACTION_FIRED__REACTION,true,false,true,null,null,null));}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  int[] numbers=new int[5];  System.out.print("Enter five numbers: ");  for (int i=0; i < numbers.length; i++) {    numbers[i]=input.nextInt();  }  System.out.println("The greatest common divisor is " + gcd(numbers));}  }
class C{  public int addHistogramPlot(String name,Color color,double[] sample,int n){  return ((Plot2DCanvas)plotCanvas).addHistogramPlot(name,color,sample,n);}  }
class C{  public String go(){  StringWriter sw=new StringWriter();  try {    go(sw);  } catch (  IOException e) {    throw new RuntimeException(e);  }  return sw.toString();}  }
class C{  public static String normalizeUnsignedLong(String value){  return normalizeIntegerValue(value,"0","18446744073709551615");}  }
class C{  public ReceiveMessageResult receiveMessage(String queueUrl){  ReceiveMessageRequest receiveMessageRequest=new ReceiveMessageRequest(queueUrl);  return receiveMessage(receiveMessageRequest);}  }
class C{  public void finish() throws IOException {  if (done) {    return;  }  def.finish();  while (!def.finished()) {    int byteCount=def.deflate(buf);    out.write(buf,0,byteCount);  }  done=true;}  }
class C{  @Override protected MoveResult doTask() throws Exception {  e.start();  BuildResult historicalWritesBuildResult=null;  try {    if (resourceManager.isOverflowAllowed())     throw new IllegalStateException();    try {      final ILocalBTreeView src=getIndex(vmd.name);      historicalWritesBuildResult=resourceManager.buildIndexSegment(vmd.name,src,true,vmd.commitTime,null,null,e);      if (INFO)       log.info("Generated compact index segment from historical view: " + historicalWritesBuildResult);    }  finally {      clearRefs();    }    final MoveResult moveResult=doAtomicUpdate(resourceManager,vmd.name,historicalWritesBuildResult,targetDataServiceUUID,newPartitionId,e);    if (INFO)     log.info("Successfully moved index partition: " + summary);    return moveResult;  }  finally {    if (historicalWritesBuildResult != null) {      resourceManager.retentionSetRemove(historicalWritesBuildResult.segmentMetadata.getUUID());      resourceManager.deleteResource(historicalWritesBuildResult.segmentMetadata.getUUID(),false);    }    e.end();  }}  }
class C{  public void error(ServiceCoded sc){  if (sc != null) {    setServiceCode(sc.getServiceCode().getCode());    setMessage(sc.getMessage());  }  updateStatus(Status.error.name());  if (sc instanceof Exception) {    _log.info("Setting operation to error due to an exception {}",ExceptionUtils.getExceptionMessage((Exception)sc));    _log.info("Caused by: {} ",(Exception)sc);  }}  }
class C{  @Bean public ObjectMapper objectMapper(){  return new ObjectMapper();}  }
class C{  public static byte[] reverseBytes(byte[] bytes){  byte[] buf=new byte[bytes.length];  for (int i=0; i < bytes.length; i++)   buf[i]=bytes[bytes.length - 1 - i];  return buf;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  if (s == null)   return new Float(0);  String rating=s.getRating();  if (rating == null)   return new Float(0);  float f=0;  for (int i=0; i < rating.length(); i++) {    if (rating.charAt(i) == '*')     f=f + 1.0f; else     if (rating.charAt(i) == '+')     f=f + 0.5f;  }  return new Float(f);}  }
class C{  public XObject operate(XObject right) throws javax.xml.transform.TransformerException {  return (XString)right.xstr();}  }
class C{  protected void prepare(){  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=para.getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_C_Invoice_ID=getRecord_ID();}  }
class C{  @Deprecated public static File createTempDir() throws IOException {  return DefaultGroovyStaticMethods.createTempDir(null);}  }
class C{  protected void fireTradeOrderStatusChanged(TradeOrder tradeOrder){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == BrokerChangeListener.class) {      ((BrokerChangeListener)listeners[i + 1]).tradeOrderStatusChanged(tradeOrder);    }  }}  }
class C{  public ContentEncodingParser(String contentEncoding){  super(contentEncoding);}  }
class C{  public boolean isCreateField(){  return fCreateField;}  }
class C{  public static BigDecimal paidToDate(int p_C_Invoice_ID,int p_C_Currency_ID,int p_MultiplierAP,Timestamp DateAcct) throws SQLException {  if (p_C_Invoice_ID == 0 || p_C_Currency_ID == 0)   return null;  BigDecimal MultiplierAP=new BigDecimal((double)p_MultiplierAP);  if (p_MultiplierAP == 0)   MultiplierAP=Adempiere.ONE;  int C_ConversionType_ID=0;  BigDecimal paymentAmt=allocatedAmtToDate(p_C_Invoice_ID,p_C_Currency_ID,C_ConversionType_ID,MultiplierAP,DateAcct);  return Currency.round(paymentAmt,p_C_Currency_ID,null);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public ExtractConstantRefactoring(ICompilationUnit unit,int selectionStart,int selectionLength){  Assert.isTrue(selectionStart >= 0);  Assert.isTrue(selectionLength >= 0);  fSelectionStart=selectionStart;  fSelectionLength=selectionLength;  fCu=unit;  fCuRewrite=null;  fLinkedProposalModel=null;  fConstantName="";  fCheckResultForCompileProblems=true;}  }
class C{  public AuthenticationInfo(){  super(NAME);  parameters.setSeparator(COMMA);}  }
class C{  public AsyncResult CreateMonitoredItemsAsync(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,TimestampsToReturn TimestampsToReturn,MonitoredItemCreateRequest... ItemsToCreate){  CreateMonitoredItemsRequest req=new CreateMonitoredItemsRequest(RequestHeader,SubscriptionId,TimestampsToReturn,ItemsToCreate);  return channel.serviceRequestAsync(req);}  }
class C{  public LogbackFactoryAccessor(ClassLoader cl) throws ClassNotFoundException, IllegalAccessException, InvocationTargetException {  Class clazz=cl.loadClass("org.slf4j.impl.StaticLoggerBinder");  Method getSingleton=MethodUtils.getAccessibleMethod(clazz,"getSingleton",new Class[0]);  Object singleton=getSingleton.invoke(null);  Method getLoggerFactory=MethodUtils.getAccessibleMethod(clazz,"getLoggerFactory",new Class[0]);  Object loggerFactory=getLoggerFactory.invoke(singleton);  Class loggerFactoryClass=cl.loadClass("ch.qos.logback.classic.LoggerContext");  if (!loggerFactoryClass.isInstance(loggerFactory)) {    throw new RuntimeException("The singleton SLF4J binding was not Logback");  }  setTarget(loggerFactory);}  }
class C{  public long toLong(){  return m_value.longValue();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:28.581 -0500",hash_original_method="34D447B50A8BF0311FD91158BAB8271D",hash_generated_method="629A4461D3844C6A125DAA9A9D517CBA") public PeriodicSync(Account account,String authority,Bundle extras,long period){  this.account=account;  this.authority=authority;  this.extras=new Bundle(extras);  this.period=period;}  }
class C{  public boolean isPacked(){  String ext=getExtension().toLowerCase();  return (ext.equals("zip") || ext.equals("rar") || ext.equals("7z")|| ext.matches("r\\d+"));}  }
class C{  public QQPlotDisplayPanel(QQPlot qqPlot){  this.qqPlot=qqPlot;  if (qqPlot == null) {    throw new NullPointerException("Given q-q plot must be null");  }  this.addMouseMotionListener(new MouseMovementListener());  this.setToolTipText(" ");}  }
class C{  private static JFreeChart createLineChart3D(){  Number[][] data=new Integer[][]{{new Integer(-3),new Integer(-2)},{new Integer(-1),new Integer(1)},{new Integer(2),new Integer(3)}};  CategoryDataset dataset=DatasetUtilities.createCategoryDataset("S","C",data);  return ChartFactory.createLineChart3D("Line Chart","Domain","Range",dataset);}  }
class C{  public void complement(){  assert (opMode == Mode.POLAR_DENSE);  char t=(char)(CircleLookupTable.PHASE_RESOLUTION / 2);  for (int i=0; i < dimension; i++)   phaseAngles[i]+=t;}  }
class C{  public static JBBPOut BeginBin(final OutputStream out){  return new JBBPOut(out,DEFAULT_BYTE_ORDER,DEFAULT_BIT_ORDER);}  }
class C{  public static String unquoteIfJavaKeyword(String name){  String unquoted=unquote(name);  if (isJavaKeyword(unquoted))   return unquoted;  return name;}  }
class C{  public static void assertJPost(String request,String content,String... tests) throws Exception {  assertJPost(request,content,JSONTestUtil.DEFAULT_DELTA,tests);}  }
class C{  public FBXAException(String msg,int errorCode,Exception reason){  this(msg,errorCode);  this.reason=reason;  initCause(reason);}  }
class C{  public void clear() throws SchedulerException {  try {    getRemoteScheduler().clear();  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public void sendMessage(SIPMessage sipMessage) throws IOException {  long time=System.currentTimeMillis();  this.sendMessage(sipMessage,true);  if (this.sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_MESSAGES))   logMessage(sipMessage,peerAddress,peerPort,time);}  }
class C{  public static boolean validateCardNumber(String cardNumber) throws NumberFormatException {  int sum=0, digit, addend=0;  boolean doubled=false;  for (int i=cardNumber.length() - 1; i >= 0; i--) {    digit=Integer.parseInt(cardNumber.substring(i,i + 1));    if (doubled) {      addend=digit * 2;      if (addend > 9) {        addend-=9;      }    } else {      addend=digit;    }    sum+=addend;    doubled=!doubled;  }  return (sum % 10) == 0;}  }
class C{  private int addEntry(E entry){  entries[numEntries++]=entry;  return numEntries - 1;}  }
class C{  private static File createTempFileInSameDirectoryAs(File file) throws IOException {  File dir=file.getParentFile();  if (dir == null)   dir=new File(".");  return File.createTempFile("jartmp",null,dir);}  }
class C{  public void testGetLocalName() throws Throwable {  Document doc;  Element element;  Element qelement;  Attr attr;  Attr qattr;  String localElemName;  String localQElemName;  String localAttrName;  String localQAttrName;  doc=(Document)load("staff",builder);  element=doc.createElementNS("http://www.w3.org/DOM/Test/elem","elem");  qelement=doc.createElementNS("http://www.w3.org/DOM/Test/elem","qual:qelem");  attr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","attr");  qattr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","qual:qattr");  localElemName=element.getLocalName();  localQElemName=qelement.getLocalName();  localAttrName=attr.getLocalName();  localQAttrName=qattr.getLocalName();  assertEquals("nodegetlocalname03_localElemName","elem",localElemName);  assertEquals("nodegetlocalname03_localQElemName","qelem",localQElemName);  assertEquals("nodegetlocalname03_localAttrName","attr",localAttrName);  assertEquals("nodegetlocalname03_localQAttrName","qattr",localQAttrName);}  }
class C{  public int start_state(){  return 0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int size(){  return (tail - head) & (elements.length - 1);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodetextnodename.class,args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:54.299 -0400",hash_original_method="CCEBFF7F71B5744B0502DA0F73CE72D0",hash_generated_method="218E19485147294D1EFF0EB93065B0E0") public void addMimeType(String mimeType){  mMimeTypeList.add(mimeType);}  }
class C{  public static void main(final String[] args) throws IOException {  final File directory=new File(args[0]);  final SequencesReader sr=SequencesReaderFactory.createDefaultSequencesReader(directory);  final ReferenceGenome male=new ReferenceGenome(sr,Sex.MALE);  System.out.println("male");  System.out.println(male.toString());  System.out.println();  final ReferenceGenome female=new ReferenceGenome(sr,Sex.FEMALE);  System.out.println("female");  System.out.println(female.toString());  System.out.println();  final ReferenceGenome either=new ReferenceGenome(sr,Sex.EITHER);  System.out.println("either");  System.out.println(either.toString());  System.out.println();}  }
class C{  @NonNull public AuthorizationResponse build(){  return new AuthorizationResponse(mRequest,mState,mTokenType,mAuthorizationCode,mAccessToken,mAccessTokenExpirationTime,mIdToken,mScope,Collections.unmodifiableMap(mAdditionalParameters));}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public AffineTransformation reflect(double x,double y){  compose(reflectionInstance(x,y));  return this;}  }
class C{  public synchronized void reset(){  m_elapsed=0;}  }
class C{  public PtAccessibility(Scenario sc,List<Integer> distanceCluster,int quadrantSegments,SortedMap<String,List<String>> activityCluster,String targetCoordinateSystem,int gridSize){  super(PtAccessibility.class.getSimpleName());  this.scenario=sc;  this.quadrantSegments=quadrantSegments;  this.distanceCluster=createClusterCircles(distanceCluster,this.quadrantSegments);  this.activityCluster=activityCluster;  this.activityCluster.put("unknown",new ArrayList<String>());  this.targetCoordinateSystem=targetCoordinateSystem;  this.gridSize=gridSize;}  }
class C{  public List<String> header(String key){  return headers.get(key);}  }
class C{  public static Stats of(int... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public boolean[] doFrustumCheck(Vector3D[] frustumCorners,Vector3D frustumPos,double x,double y,double z){  Vector3D point=new Vector3D(x,y,z);  boolean c1=crossPlane(new Vector3D[]{frustumPos,frustumCorners[3],frustumCorners[0]},point);  boolean c2=crossPlane(new Vector3D[]{frustumPos,frustumCorners[0],frustumCorners[1]},point);  boolean c3=crossPlane(new Vector3D[]{frustumPos,frustumCorners[1],frustumCorners[2]},point);  boolean c4=crossPlane(new Vector3D[]{frustumPos,frustumCorners[2],frustumCorners[3]},point);  return new boolean[]{c1,c2,c3,c4};}  }
class C{  Attributes parseAttributes() throws JasperException {  AttributesImpl attrs=new AttributesImpl();  reader.skipSpaces();  while (parseAttribute(attrs))   reader.skipSpaces();  return attrs;}  }
class C{  public synchronized void sort(final Comparator<String[]> comparator){  Check.notNull(comparator,"comparator");  Collections.sort(rows,comparator);}  }
class C{  public final void printLongString(CharSequence text) throws IOException {  if (text == null) {    appendAscii("null.string");  } else {    appendAscii(TRIPLE_QUOTES);    printCodePoints(text,LONG_STRING_ESCAPE_CODES);    appendAscii(TRIPLE_QUOTES);  }}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  public WrongClassTypeException(String message){  super(message);}  }
class C{  public boolean isUnicast(){  return unicast;}  }
class C{  public void register(Kryo kryo){  kryo.register(IAgentStorageService.class);  kryo.register(IAgentService.class);  kryo.register(IKeepAliveService.class);  kryo.register(RegisterTCP.class);  kryo.register(RegisterUDP.class);  kryo.register(KeepAlive.class);  kryo.register(DiscoverHost.class);  kryo.register(Ping.class);  ObjectSpace.registerClasses(kryo);}  }
class C{  public static void startFinalizer(Class<?> finalizableReferenceClass,ReferenceQueue<Object> queue,PhantomReference<Object> frqReference){  if (!finalizableReferenceClass.getName().equals(FINALIZABLE_REFERENCE)) {    throw new IllegalArgumentException("Expected " + FINALIZABLE_REFERENCE + ".");  }  Finalizer finalizer=new Finalizer(finalizableReferenceClass,queue,frqReference);  Thread thread=new Thread(finalizer);  thread.setName(Finalizer.class.getName());  thread.setDaemon(true);  try {    if (inheritableThreadLocals != null) {      inheritableThreadLocals.set(thread,null);    }  } catch (  Throwable t) {    logger.log(Level.INFO,"Failed to clear thread local values inherited by reference finalizer thread.",t);  }  thread.start();}  }
class C{  public void testProcessString() throws ChessParseError {  Game game=new Game(null,new TimeControlData());  assertEquals(TextIO.startPosFEN,TextIO.toFEN(game.currPos()));  boolean res=game.processString("Nf3");  assertEquals(true,res);  assertEquals(1,game.currPos().halfMoveClock);  assertEquals(1,game.currPos().fullMoveCounter);  res=game.processString("d5");  assertEquals(true,res);  assertEquals(0,game.currPos().halfMoveClock);  assertEquals(2,game.currPos().fullMoveCounter);  game.undoMove();  assertEquals(1,game.currPos().halfMoveClock);  assertEquals(1,game.currPos().fullMoveCounter);  game.undoMove();  assertEquals(TextIO.startPosFEN,TextIO.toFEN(game.currPos()));  game.undoMove();  assertEquals(TextIO.startPosFEN,TextIO.toFEN(game.currPos()));  game.redoMove();  assertEquals(1,game.currPos().halfMoveClock);  assertEquals(1,game.currPos().fullMoveCounter);  game.redoMove();  assertEquals(0,game.currPos().halfMoveClock);  assertEquals(2,game.currPos().fullMoveCounter);  game.redoMove();  assertEquals(0,game.currPos().halfMoveClock);  assertEquals(2,game.currPos().fullMoveCounter);  game.newGame();  assertEquals(TextIO.startPosFEN,TextIO.toFEN(game.currPos()));  String fen="8/8/8/4k3/8/8/2p5/5K2 b - - 47 68";  Position pos=TextIO.readFEN(fen);  game.setPos(TextIO.readFEN(fen));  assertEquals(pos,game.currPos());  res=game.processString("junk");  assertEquals(false,res);  game.newGame();  res=game.processString("e7e5");  assertEquals(false,res);}  }
class C{  public Builder considerExifParams(boolean considerExifParams){  this.considerExifParams=considerExifParams;  return this;}  }
class C{  public static String encodeBase64URLSafeString(byte[] binaryData){  return org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(binaryData);}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  Env.setContext(Env.getCtx(),m_WindowNo,"IsSOTrx","Y");  try {    super.dynInit();    dynInit();    jbInit();    frame.getContentPane().add(mainPanel,BorderLayout.CENTER);    frame.setSize(1000,400);  } catch (  Exception ex) {    log.log(Level.SEVERE,"init",ex);  }}  }
class C{  public boolean absolute(int row) throws SQLException {  if (row == 0 || getType() == ResultSet.TYPE_FORWARD_ONLY) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.absolute").toString());  }  if (row > 0) {    if (row > numRows) {      afterLast();      return false;    } else {      if (absolutePos <= 0)       internalFirst();    }  } else {    if (cursorPos + row < 0) {      beforeFirst();      return false;    } else {      if (absolutePos >= 0)       internalLast();    }  }  while (absolutePos != row) {    if (absolutePos < row) {      if (!internalNext())       break;    } else {      if (!internalPrevious())       break;    }  }  notifyCursorMoved();  if (isAfterLast() || isBeforeFirst()) {    return false;  } else {    return true;  }}  }
class C{  protected void resetCutOffDay(long supplAdminKey) throws Exception {  resetCutOffDay(supplAdminKey,UserRoleType.SERVICE_MANAGER);}  }
class C{  public String toString(){  return imgInfo.toString() + " interlaced=" + interlaced;}  }
class C{  public void addRateLimit(RateLimitType type,long retryAfter){  addRateLimit(type,null,retryAfter);}  }
class C{  public static void reinitiate(){  CLIENT_INSTANCE=new FrequencyGrid();  SERVER_INSTANCE=new FrequencyGrid();}  }
class C{  @Override public void addValueAtIndex(final IScope scope,final Object index,final V value){  setValueAtIndex(scope,index,value);}  }
class C{  public Object pop(){  return stack.pop();}  }
class C{  protected void update(){  updateVisualizerMenus();  if (currentSubplot != null) {    showPlot(currentSubplot);  }  overview.lazyRefresh();}  }
class C{  protected void onFieldShort(final Object obj,final Field field,final Bin annotation,final boolean signed,final int value){}  }
class C{  public static Geo center(GeoArray poly,Geo ret){  Geo c=poly.get(0,new Geo());  int size=poly.getSize();  for (int i=1; i < size; i++) {    poly.get(i,ret);    c=c.add(ret,c);  }  return c.normalize(ret);}  }
class C{  private JMenu createViewMenu(){  JMenuItem menuItem;  JMenu menu;  menu=new JMenu(ResourceManager.translate("view.menu"));  menu.setMnemonic(KeyStroke.getKeyStroke(ResourceManager.translate("view.menu.mnem")).getKeyCode());  menu.getAccessibleContext().setAccessibleDescription(ResourceManager.translate("view.menu.description"));  add(menu);  expandAllMenuItem=new JMenuItem(ResourceManager.translate("view.expand"),KeyStroke.getKeyStroke(ResourceManager.translate("view.expand.mnem")).getKeyCode());  expandAllMenuItem.setIcon(TDA.createImageIcon("Expanded.png"));  expandAllMenuItem.setAccelerator(KeyStroke.getKeyStroke(ResourceManager.translate("view.expand.accel")));  expandAllMenuItem.getAccessibleContext().setAccessibleDescription(ResourceManager.translate("view.expand.description"));  expandAllMenuItem.addActionListener(listener);  expandAllMenuItem.setEnabled(false);  menu.add(expandAllMenuItem);  collapseAllMenuItem=new JMenuItem(ResourceManager.translate("view.collapse"),KeyStroke.getKeyStroke(ResourceManager.translate("view.collapse.mnem")).getKeyCode());  collapseAllMenuItem.setIcon(TDA.createImageIcon("Collapsed.png"));  collapseAllMenuItem.setAccelerator(KeyStroke.getKeyStroke(ResourceManager.translate("view.collapse.accel")));  collapseAllMenuItem.getAccessibleContext().setAccessibleDescription(ResourceManager.translate("view.collapse.description"));  collapseAllMenuItem.setEnabled(false);  collapseAllMenuItem.addActionListener(listener);  menu.add(collapseAllMenuItem);  menu.addSeparator();  menuItem=new JCheckBoxMenuItem(ResourceManager.translate("view.showtoolbar"),PrefManager.get().getShowToolbar());  menuItem.setMnemonic(KeyStroke.getKeyStroke(ResourceManager.translate("view.showtoolbar.mnem")).getKeyCode());  menuItem.addActionListener(listener);  menuItem.setIcon(TDA.createImageIcon("Empty.gif"));  menu.add(menuItem);  return (menu);}  }
class C{  public short wIndex(){  return this.controlSetup.getShort(4);}  }
class C{  public TransitionExpressionConfigAttribute(Expression authorizeExpression){  Assert.notNull(authorizeExpression,"Expression must be set");  this.authorizeExpression=authorizeExpression;}  }
class C{  @Override public Optional<ClientAppUserAccessToken> verifyAccessToken(@Nullable String rawAccessToken){  return ClientAppUserAccessToken.tryDecode(rawAccessToken,oauthSecret).filter(null);}  }
class C{  public void clearLoggersCache(){  loggers.clear();}  }
class C{  public void openChat() throws RcsGenericException {  try {    mGroupChatInf.openChat();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public void nodeRemoved(SessionEvent event){}  }
class C{  public ResponseFuture request(Object request) throws RemotingException {  return client.request(request);}  }
class C{  public static ScalarOperator parseScalarBinaryOperator(String opcode,boolean arg1IsScalar,double constant) throws DMLRuntimeException {  if (opcode.equalsIgnoreCase("+")) {    return new RightScalarOperator(Plus.getPlusFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("*")) {    return new RightScalarOperator(Multiply.getMultiplyFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("-")) {    if (arg1IsScalar)     return new LeftScalarOperator(Minus.getMinusFnObject(),constant); else     return new RightScalarOperator(Minus.getMinusFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("-nz")) {    return new RightScalarOperator(MinusNz.getMinusNzFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("/")) {    if (arg1IsScalar)     return new LeftScalarOperator(Divide.getDivideFnObject(),constant); else     return new RightScalarOperator(Divide.getDivideFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("%%")) {    if (arg1IsScalar)     return new LeftScalarOperator(Modulus.getFnObject(),constant); else     return new RightScalarOperator(Modulus.getFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("%/%")) {    if (arg1IsScalar)     return new LeftScalarOperator(IntegerDivide.getFnObject(),constant); else     return new RightScalarOperator(IntegerDivide.getFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("^")) {    if (arg1IsScalar)     return new LeftScalarOperator(Power.getPowerFnObject(),constant); else     return new RightScalarOperator(Power.getPowerFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("max")) {    return new RightScalarOperator(Builtin.getBuiltinFnObject("max"),constant);  } else   if (opcode.equalsIgnoreCase("min")) {    return new RightScalarOperator(Builtin.getBuiltinFnObject("min"),constant);  } else   if (opcode.equalsIgnoreCase("log") || opcode.equalsIgnoreCase("log_nz")) {    if (arg1IsScalar)     return new LeftScalarOperator(Builtin.getBuiltinFnObject(opcode),constant);    return new RightScalarOperator(Builtin.getBuiltinFnObject(opcode),constant);  } else   if (opcode.equalsIgnoreCase(">")) {    if (arg1IsScalar)     return new LeftScalarOperator(GreaterThan.getGreaterThanFnObject(),constant);    return new RightScalarOperator(GreaterThan.getGreaterThanFnObject(),constant);  } else   if (opcode.equalsIgnoreCase(">=")) {    if (arg1IsScalar)     return new LeftScalarOperator(GreaterThanEquals.getGreaterThanEqualsFnObject(),constant);    return new RightScalarOperator(GreaterThanEquals.getGreaterThanEqualsFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("<")) {    if (arg1IsScalar)     return new LeftScalarOperator(LessThan.getLessThanFnObject(),constant);    return new RightScalarOperator(LessThan.getLessThanFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("<=")) {    if (arg1IsScalar)     return new LeftScalarOperator(LessThanEquals.getLessThanEqualsFnObject(),constant);    return new RightScalarOperator(LessThanEquals.getLessThanEqualsFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("==")) {    if (arg1IsScalar)     return new LeftScalarOperator(Equals.getEqualsFnObject(),constant);    return new RightScalarOperator(Equals.getEqualsFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("!=")) {    if (arg1IsScalar)     return new LeftScalarOperator(NotEquals.getNotEqualsFnObject(),constant);    return new RightScalarOperator(NotEquals.getNotEqualsFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("*2")) {    return new RightScalarOperator(Multiply2.getMultiply2FnObject(),constant);  } else   if (opcode.equalsIgnoreCase("^2")) {    return new RightScalarOperator(Power2.getPower2FnObject(),constant);  } else   if (opcode.equalsIgnoreCase("1-*")) {    return new RightScalarOperator(Minus1Multiply.getMinus1MultiplyFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("s-r")) {    return new LeftScalarOperator(Minus.getMinusFnObject(),constant);  } else   if (opcode.equalsIgnoreCase("so")) {    return new LeftScalarOperator(Divide.getDivideFnObject(),constant);  }  throw new DMLRuntimeException("Unknown binary opcode " + opcode);}  }
class C{  protected String convertCharEntity(String charEntity){  try {    return HTMLUtils.convertCharEntity(charEntity,true,null);  } catch (  IllegalArgumentException iae) {    return super.convertCharEntity(charEntity);  }}  }
class C{  public boolean isShutdown() throws SchedulerException {  try {    return getRemoteScheduler().isShutdown();  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  protected void overrideStylePropertyRemoved(CSSStylableElement e,String name){  Iterator i=cssNavigableDocumentListeners.keySet().iterator();  while (i.hasNext()) {    CSSNavigableDocumentListener l=(CSSNavigableDocumentListener)i.next();    l.overrideStylePropertyRemoved(e,name);  }}  }
class C{  public static String generateNewDomainRoid(String tld){  return createDomainRoid(ObjectifyService.allocateId(),tld);}  }
class C{  public boolean contains(String unicode){  if (unicode.length() == 1) {    int unicodeVal=unicode.charAt(0);    return contains(unicodeVal);  }  return false;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshot-sessions") @CheckPermission(roles={Role.SYSTEM_ADMIN},acls={ACL.ANY}) public TaskList createConsistencyGroupSnapshotSession(@PathParam("id") URI consistencyGroupId,SnapshotSessionCreateParam param){  BlockConsistencyGroup cg=queryObject(BlockConsistencyGroup.class,consistencyGroupId,true);  validateVolumesInReplicationGroups(cg,param.getVolumes(),_dbClient);  return getSnapshotSessionManager().createSnapshotSession(cg,param,getFullCopyManager());}  }
class C{  protected DTEDFrameCacheHandler(){  this(null);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.416 -0400",hash_original_method="82AABA56BCAF4EA117FD967EA0C801E1",hash_generated_method="45823FC2302E3887DFCEFEED7BEB9398") public static int readSwappedUnsignedShort(InputStream input) throws IOException {  int value1=read(input);  int value2=read(input);  return (((value1 & 0xff) << 0) + ((value2 & 0xff) << 8));}  }
class C{  private void appendSequenceText(CoordinateSequence seq,int level,boolean doIndent,Writer writer) throws IOException {  if (seq.size() == 0) {    writer.write("EMPTY");  } else {    if (doIndent)     indent(level,writer);    writer.write("(");    for (int i=0; i < seq.size(); i++) {      if (i > 0) {        writer.write(", ");        if (coordsPerLine > 0 && i % coordsPerLine == 0) {          indent(level + 1,writer);        }      }      appendCoordinate(seq,i,writer);    }    writer.write(")");  }}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  @Override public void addText(String text){  current.appendChild(document.createTextNode(text));}  }
class C{  public boolean hasPositionExt(){  return hasExtension(GphotoPosition.class);}  }
class C{  public static XorRelayedAddressAttribute createXorRelayedAddressAttribute(TransportAddress address,byte[] tranID){  XorRelayedAddressAttribute attribute=new XorRelayedAddressAttribute();  attribute.setAddress(address,tranID);  return attribute;}  }
class C{  public static ProviderDownloadDialog newInstance(boolean dsp){  ProviderDownloadDialog fragment=new ProviderDownloadDialog();  Bundle bundle=new Bundle();  bundle.putBoolean(KEY_DSP,dsp);  fragment.setArguments(bundle);  return fragment;}  }
class C{  public static CassandraApplicationConfig parse(byte[] bytes) throws IOException {  return MAPPER.readValue(bytes,CassandraApplicationConfig.class);}  }
class C{  public void test_propertyCache(){  final Properties properties=getProperties();  final Journal store=new Journal(properties);  final String namespace="test";  try {{      final ByteBuffer b=ByteBuffer.allocate(4);      b.putInt(0);      b.flip();      store.write(b);      assertNotSame(0L,store.commit());    }{      assertNull(store.getResourceLocator().locate(namespace,ITx.UNISOLATED));      assertNull(store.getResourceLocator().locate(namespace,store.getLastCommitTime()));{        final long tx=store.newTx(ITx.READ_COMMITTED);        try {          assertNull(store.getResourceLocator().locate(namespace,store.getLastCommitTime()));        }  finally {          store.abort(tx);        }      }    }    MockRelation mockRelation=new MockRelation(store,namespace,ITx.UNISOLATED,properties);{      assertNull(store.getResourceLocator().locate(namespace,ITx.UNISOLATED));      assertNull(store.getResourceLocator().locate(namespace,store.getLastCommitTime()));{        final long tx=store.newTx(ITx.READ_COMMITTED);        try {          assertNull(store.getResourceLocator().locate(namespace,store.getLastCommitTime()));        }  finally {          store.abort(tx);        }      }    }    mockRelation.create();{      assertNotNull(store.getResourceLocator().locate(namespace,ITx.UNISOLATED));      assertTrue(store.getResourceLocator().locate(namespace,ITx.UNISOLATED) == mockRelation);      assertNull(store.getResourceLocator().locate(namespace,ITx.READ_COMMITTED));    }    final long priorCommitTime=store.getLastCommitTime();    final long lastCommitTime=store.commit();{      assertNotNull(store.getResourceLocator().locate(namespace,ITx.READ_COMMITTED));      assertTrue(((MockRelation)store.getResourceLocator().locate(namespace,ITx.READ_COMMITTED)) != mockRelation);    }    if (log.isInfoEnabled()) {      log.info("priorCommitTime=" + priorCommitTime);      log.info("lastCommitTime =" + lastCommitTime);    }    final long tx1=store.newTx(store.getLastCommitTime());    final long tx2=store.newTx(store.getLastCommitTime());    final long ts1=store.getLastCommitTime() - 1;    try {      assertTrue(tx1 != tx2);      assertTrue(ts1 != tx1);      assertTrue(ts1 != tx2);      assertTrue(ts1 > priorCommitTime);      final AbstractResource<?> view_un=(AbstractResource<?>)store.getResourceLocator().locate(namespace,ITx.UNISOLATED);      assertNotNull(view_un);      final AbstractResource<?> view_tx1=(AbstractResource<?>)store.getResourceLocator().locate(namespace,tx1);      assertNotNull(view_tx1);      final AbstractResource<?> view_tx2=(AbstractResource<?>)store.getResourceLocator().locate(namespace,tx2);      assertNotNull(view_tx2);      assertTrue(view_un != view_tx1);      assertTrue(view_un != view_tx2);      assertTrue(view_tx1 != view_tx2);      assertEquals(ITx.UNISOLATED,view_un.getTimestamp());      assertEquals(tx1,view_tx1.getTimestamp());      assertEquals(tx2,view_tx2.getTimestamp());      assertEquals(null,((MockRelation)view_un).getCommitTime());      assertEquals(Long.valueOf(lastCommitTime),((MockRelation)view_tx1).getCommitTime());      assertEquals(Long.valueOf(lastCommitTime),((MockRelation)view_tx2).getCommitTime());      final Properties p_un=view_un.getProperties();      final Properties p_tx1=view_tx1.getProperties();      final Properties p_tx2=view_tx2.getProperties();      assertTrue(p_un != p_tx1);      assertTrue(p_un != p_tx2);      assertTrue(p_tx1 != p_tx2);      final DefaultResourceLocator<?> locator=(DefaultResourceLocator<?>)store.getResourceLocator();      assertNull(locator.propertyCache.get(new NT(namespace,ITx.UNISOLATED)));      assertNull(locator.propertyCache.get(new NT(namespace,tx1)));      assertNull(locator.propertyCache.get(new NT(namespace,tx2)));      assertNull(locator.propertyCache.get(new NT(namespace,ts1)));      assertNotNull(locator.propertyCache.get(new NT(namespace,lastCommitTime)));      assertNull(locator.propertyCache.get(new NT(namespace,priorCommitTime)));    }  finally {      store.abort(tx1);      store.abort(tx2);    }  }  finally {    store.destroy();  }}  }
class C{  public static void clearCache(){  cache.clear();}  }
class C{  public Boolean isWantAssertionsSigned(){  return wantAssertionsSigned;}  }
class C{  public Map<String,Object> convertDataToObjects(Map<String,String> data){  Map<String,Object> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      results.put(key,data.get(key));    }  }  return results;}  }
class C{  @Override public void close(){  try {    super.close();    if (!emptyPages.isEmpty() && header instanceof TreeIndexHeader) {      ((TreeIndexHeader)header).writeEmptyPages(emptyPages,file);    }    ((TreeIndexHeader)header).setLargestPageID(nextPageID);    header.writeHeader(file);    file.close();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  public void endEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badString;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badString=child.substringData(-5,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public void stateChanged(ChangeEvent e){  int index=tabbedPane.getSelectedIndex();  genForm.setSelectionActive(index == 0);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MInterestArea[").append(get_ID()).append(" - ").append(getName()).append("]");  return sb.toString();}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersonsDbl,String accommodationMapId,String accommodationSpotId,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,reservStart,reservLength,reservPersonsDbl,accommodationMapId,accommodationSpotId,null,null,features,attributes,prodCatalogId,configWrapper,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,skipInventoryChecks,skipProductChecks));}  }
class C{  private JsonObject broadlinkExecuteCommand(JsonObject params){  if (mBlNetwork == null) {    Log.e(this.getClass().getSimpleName(),"mBlNetwork is uninitialized, check app permissions");    return null;  }  String responseString=mBlNetwork.requestDispatch(params.toString());  JsonObject responseJsonObject=new JsonParser().parse(responseString).getAsJsonObject();  Log.d(this.getClass().getSimpleName(),responseString);  return responseJsonObject;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  boolean containsNode(Node check){  if (this.nodes != null) {    return nodes.contains(check);  } else {    return false;  }}  }
class C{  public void skippedEntity(String name) throws SAXException {}  }
class C{  private ValueBuffer combineChunks(final LinkedList<ValueBuffer> coll){  final ValueBuffer b;  if (coll.size() == 1) {    b=coll.getFirst();  } else {    int nvalues=0;    for (    ValueBuffer t : coll)     nvalues+=t.nvalues;    final List<IMemoryManager> contexts=new LinkedList<IMemoryManager>();    final LinkedHashMap<byte[],Bucket> addrMap=new LinkedHashMap<byte[],Bucket>();    for (    ValueBuffer t : coll) {      contexts.addAll(t.contexts);      nvalues+=t.nvalues;      for (      Bucket bucket : t.addrMap.values()) {        final Bucket tmp=addrMap.get(bucket.key);        if (tmp == null) {          addrMap.put(bucket.key,bucket);        } else {          tmp.addrs.addAll(bucket.addrs);        }      }    }    b=new ValueBuffer(contexts,nvalues,addrMap);  }  return b;}  }
class C{  public void resetToCheckpoint(){  if (checkPoint != -1) {    current_item=checkPoint;  }  checkPoint=-1;}  }
class C{  void addParsedQuery(ParserRuleContext currentContext,Query<O> parsedQuery){  ParserRuleContext parentContext=getParentContextOfType(currentContext,getAndOrNotContextClasses());  Collection<Query<O>> childrenOfParent=this.childQueries.get(parentContext);  if (childrenOfParent == null) {    childrenOfParent=new ArrayList<Query<O>>();    this.childQueries.put(parentContext,childrenOfParent);  }  childrenOfParent.add(parsedQuery);  numQueriesParsed++;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:02.455 -0500",hash_original_method="A486C536CC2BBF7E5EE5092C736031C8",hash_generated_method="70FFFC2D075451B0F1CD7FCCB9EFC19E") private Combined(){}  }
class C{  public DeclutterMatrix(int width,int height,int x_pix_interval,int y_pix_interval){  this.width=width;  this.height=height;  if (x_pix_interval != 0) {    this.x_pix_interval=x_pix_interval;  } else {    x_pix_interval=1;  }  if (y_pix_interval != 0) {    this.y_pix_interval=y_pix_interval;  } else {    y_pix_interval=1;  }  this.matrix=null;  this.maxx=(this.width / this.x_pix_interval) - 1;  this.maxy=(this.height / this.y_pix_interval) - 1;  create();  Debug.message("declutter","Decluttering matrix created." + "  Width = " + width + " Height = "+ height);}  }
class C{  private DSSUtils(){}  }
class C{  public void testRead(){  int count=1024;  byte[] wData=getWData(count);  ByteFifoBuffer instance=new ByteFifoBuffer(count);  instance.write(wData,count);  byte[] readBuff=new byte[count];  int expResult=count;  int result=instance.read(readBuff,count);  assertEquals(expResult,result);  assertArrayEquals(wData,readBuff);}  }
class C{  public static int hashIntArray(int[] array){  int intHash=0;  for (int i=0; i < array.length && i < 4; i++) {    intHash+=array[i] << (8 * i);  }  return intHash & 0x7FFFFFFF;}  }
class C{  public RepositoryStateMachinePersist(StateMachineContextRepository<S,E,StateMachineContext<S,E>> repository){  this.repository=repository;}  }
class C{  public void addOffset(int off){  prep(SIZEOF_INT,0);  assert off <= offset();  off=offset() - off + SIZEOF_INT;  putInt(off);}  }
class C{  public MysqlPooledConnection(com.mysql.jdbc.Connection connection){  this.logicalHandle=null;  this.physicalConn=connection;  this.connectionEventListeners=new HashMap<ConnectionEventListener,ConnectionEventListener>();  this.exceptionInterceptor=this.physicalConn.getExceptionInterceptor();}  }
class C{  @Override public RabbitGroup makeNewGroup(String name){  return groupRepository.insert(new RabbitGroup(name));}  }
class C{  public boolean hasStatement(Resource subj,IRI pred,Value obj,Resource... contexts) throws RepositoryException {  if (isAllContext(contexts)) {    return super.hasStatement(subj,pred,obj,isIncludeInferred(),getReadContexts());  } else {    return super.hasStatement(subj,pred,obj,isIncludeInferred(),contexts);  }}  }
class C{  public ImageInfo withSize(int cols,int rows){  return new ImageInfo(cols > 0 ? cols : this.cols,rows > 0 ? rows : this.rows,this.bitDepth,this.alpha,this.greyscale,this.indexed);}  }
class C{  public CannotFindMethodException(SpecialInvokeExpr invoke,SootMethod method){  super(String.format("Cannot find or resolve %s in %s.",invoke,method));}  }
class C{  private ManagedObjectReference createVm() throws Exception {  ManagedObjectReference folder=getVmFolder();  ManagedObjectReference resourcePool=getResourcePoolForVm();  ManagedObjectReference datastore=getDatastore();  String datastoreName=this.get.entityProp(datastore,"name");  VirtualMachineConfigSpec spec=buildVirtualMachineConfigSpec(datastoreName);  populateCloudConfig(spec);  ManagedObjectReference vmTask=getVimPort().createVMTask(folder,spec,resourcePool,null);  TaskInfo info=waitTaskEnd(vmTask);  if (info.getState() == TaskInfoState.ERROR) {    MethodFault fault=info.getError().getFault();    if (fault instanceof FileAlreadyExists) {      return null;    } else {      return VimUtils.rethrow(info.getError());    }  }  return (ManagedObjectReference)info.getResult();}  }
class C{  protected void cleanup(){  ArrayList<Long> deleteList;  long valueReplace;synchronized (this) {    if (incrementRecords.size() <= FLUSH_COUNTER) {      return;    }    valueReplace=value.get();    deleteList=new ArrayList<>(incrementRecords);    incrementRecords.clear();  }  long newRecordID=-1;  long txCleanup=storage.generateID();  try {    for (    Long value1 : deleteList) {      storage.deleteIncrementRecord(txCleanup,value1);    }    if (recordID >= 0) {      storage.deletePageCounter(txCleanup,recordID);    }    newRecordID=storage.storePageCounter(txCleanup,subscriptionID,valueReplace);    if (logger.isTraceEnabled()) {      logger.trace("Replacing page-counter record = " + recordID + " by record = "+ newRecordID+ " on subscriptionID = "+ this.subscriptionID+ " for queue = "+ this.subscription.getQueue().getName());    }    storage.commit(txCleanup);  } catch (  Exception e) {    newRecordID=recordID;    ActiveMQServerLogger.LOGGER.problemCleaningPagesubscriptionCounter(e);    try {      storage.rollback(txCleanup);    } catch (    Exception ignored) {    }  } finally {    recordID=newRecordID;  }}  }
class C{  public void performCirculize(Way way){  if (way.getNodes().size() < 3)   return;  createCheckpoint(R.string.undo_action_circulize);  int[] center=centroid(map.getWidth(),map.getHeight(),viewBox,way);  getDelegator().circulizeWay(center,way);  map.invalidate();}  }
class C{  public static String executeCommand(List<String> cmdArray) throws IOException, InterruptedException {  ProcessBuilder builder=new ProcessBuilder(cmdArray);  builder.redirectErrorStream(true);  Process process=builder.start();  try (InputStream is=process.getInputStream();Scanner scanner=new Scanner(is).useDelimiter("$")){    String output=scanner.hasNext() ? scanner.next() : "";    process.waitFor();    int exitValue=process.exitValue();    if (exitValue != 0) {      throw new IllegalArgumentException(String.format("Command execution failed with status: %d\n%s",exitValue,output));    }    return output;  } }  }
class C{  public ExpressionException(ExpressionParsingException cause){  super(cause.getMessage(),cause);  if (cause.getErrorContext() != null) {    errorLine=cause.getErrorContext().getStart().getLine();  } else {    errorLine=-1;  }}  }
class C{  public static IntervalCategoryDataset createDataset(){  TaskSeries s1=new TaskSeries("Scheduled");  s1.add(new Task("Write Proposal",new SimpleTimePeriod(date(1,Calendar.APRIL,2001),date(5,Calendar.APRIL,2001))));  s1.add(new Task("Obtain Approval",new SimpleTimePeriod(date(9,Calendar.APRIL,2001),date(9,Calendar.APRIL,2001))));  s1.add(new Task("Requirements Analysis",new SimpleTimePeriod(date(10,Calendar.APRIL,2001),date(5,Calendar.MAY,2001))));  s1.add(new Task("Design Phase",new SimpleTimePeriod(date(6,Calendar.MAY,2001),date(30,Calendar.MAY,2001))));  s1.add(new Task("Design Signoff",new SimpleTimePeriod(date(2,Calendar.JUNE,2001),date(2,Calendar.JUNE,2001))));  s1.add(new Task("Alpha Implementation",new SimpleTimePeriod(date(3,Calendar.JUNE,2001),date(31,Calendar.JULY,2001))));  s1.add(new Task("Design Review",new SimpleTimePeriod(date(1,Calendar.AUGUST,2001),date(8,Calendar.AUGUST,2001))));  s1.add(new Task("Revised Design Signoff",new SimpleTimePeriod(date(10,Calendar.AUGUST,2001),date(10,Calendar.AUGUST,2001))));  s1.add(new Task("Beta Implementation",new SimpleTimePeriod(date(12,Calendar.AUGUST,2001),date(12,Calendar.SEPTEMBER,2001))));  s1.add(new Task("Testing",new SimpleTimePeriod(date(13,Calendar.SEPTEMBER,2001),date(31,Calendar.OCTOBER,2001))));  s1.add(new Task("Final Implementation",new SimpleTimePeriod(date(1,Calendar.NOVEMBER,2001),date(15,Calendar.NOVEMBER,2001))));  s1.add(new Task("Signoff",new SimpleTimePeriod(date(28,Calendar.NOVEMBER,2001),date(30,Calendar.NOVEMBER,2001))));  TaskSeries s2=new TaskSeries("Actual");  s2.add(new Task("Write Proposal",new SimpleTimePeriod(date(1,Calendar.APRIL,2001),date(5,Calendar.APRIL,2001))));  s2.add(new Task("Obtain Approval",new SimpleTimePeriod(date(9,Calendar.APRIL,2001),date(9,Calendar.APRIL,2001))));  s2.add(new Task("Requirements Analysis",new SimpleTimePeriod(date(10,Calendar.APRIL,2001),date(15,Calendar.MAY,2001))));  s2.add(new Task("Design Phase",new SimpleTimePeriod(date(15,Calendar.MAY,2001),date(17,Calendar.JUNE,2001))));  s2.add(new Task("Design Signoff",new SimpleTimePeriod(date(30,Calendar.JUNE,2001),date(30,Calendar.JUNE,2001))));  s2.add(new Task("Alpha Implementation",new SimpleTimePeriod(date(1,Calendar.JULY,2001),date(12,Calendar.SEPTEMBER,2001))));  s2.add(new Task("Design Review",new SimpleTimePeriod(date(12,Calendar.SEPTEMBER,2001),date(22,Calendar.SEPTEMBER,2001))));  s2.add(new Task("Revised Design Signoff",new SimpleTimePeriod(date(25,Calendar.SEPTEMBER,2001),date(27,Calendar.SEPTEMBER,2001))));  s2.add(new Task("Beta Implementation",new SimpleTimePeriod(date(27,Calendar.SEPTEMBER,2001),date(30,Calendar.OCTOBER,2001))));  s2.add(new Task("Testing",new SimpleTimePeriod(date(31,Calendar.OCTOBER,2001),date(17,Calendar.NOVEMBER,2001))));  s2.add(new Task("Final Implementation",new SimpleTimePeriod(date(18,Calendar.NOVEMBER,2001),date(5,Calendar.DECEMBER,2001))));  s2.add(new Task("Signoff",new SimpleTimePeriod(date(10,Calendar.DECEMBER,2001),date(11,Calendar.DECEMBER,2001))));  TaskSeriesCollection collection=new TaskSeriesCollection();  collection.add(s1);  collection.add(s2);  return collection;}  }
class C{  public Iterator<Bucket> buckets(){  return map.values().iterator();}  }
class C{  public JsonObjectRequest(String url,Listener<JSONObject> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  @Override public void render(final int text_fill_type,final Graphics2D g2,final float scaling,final boolean isFormGlyph){  if (cached_current_path != null) {    final GeneralPath[] paths=cached_current_path.get();    for (    final GeneralPath path : paths) {      if (path == null) {        break;      }      if ((text_fill_type == GraphicsState.FILL)) {        if (isStroked) {          final Paint fillPaint=g2.getPaint();          if (!(fillPaint instanceof PdfTexturePaint) && ((Color)strokePaint).getRGB() != ((Color)fillPaint).getRGB() && strokedPositions.containsKey(String.valueOf((int)g2.getTransform().getTranslateX()) + '-' + (int)g2.getTransform().getTranslateY())) {            g2.setPaint(strokePaint);            g2.draw(path);            g2.setPaint(fillPaint);          }        }        g2.fill(path);      }      if (text_fill_type == GraphicsState.STROKE) {        g2.draw(path);        strokePaint=g2.getPaint();        strokedPositions.put(String.valueOf((int)g2.getTransform().getTranslateX()) + '-' + (int)g2.getTransform().getTranslateY(),"x");      }    }  }}  }
class C{  public Bindings add(String property,JComboBox combo){  combo.addActionListener(this);  return add(new JComboBoxBinding(property,combo,0));}  }
class C{  public AsyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));}  }
class C{  protected void selectRenderables(DrawContext dc){  ArrayList<GraticuleTile> tileList=getVisibleTiles(dc);  if (tileList.size() > 0) {    for (    GraticuleTile gz : tileList) {      gz.selectRenderables(dc);    }  }}  }
class C{  public static Element addChildElementNSElement(Element element,String childElementName,Document document,String nameSpaceUrl){  Element newElement=document.createElementNS(nameSpaceUrl,childElementName);  element.appendChild(newElement);  return element;}  }
class C{  public DifferentialEvolution(double CR,double F){  this.CR=CR;  this.F=F;}  }
class C{  public static MethodIdentifier ofStatic(final String containingClass,final String methodName,final String returnType,final String... parameterTypes){  return of(containingClass,methodName,returnType,true,parameterTypes);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Deprecated public ServiceRequestBufferImp(){  super(SrbMetaData.SRB_VERSION_2);}  }
class C{  private static float[] rgbToHLS(int rgb,float[] hls){  float r=((rgb & 0xFF0000) >> 16) / 255.0f;  float g=((rgb & 0xFF00) >> 8) / 255.0f;  float b=(rgb & 0xFF) / 255.0f;  float max=Math.max(Math.max(r,g),b);  float min=Math.min(Math.min(r,g),b);  float l=(max + min) / 2.0f;  float s=0;  float h=0;  if (max != min) {    float delta=max - min;    s=(l <= .5f) ? (delta / (max + min)) : (delta / (2.0f - max - min));    if (r == max) {      h=(g - b) / delta;    } else     if (g == max) {      h=2.0f + (b - r) / delta;    } else {      h=4.0f + (r - g) / delta;    }    h*=60.0f;    if (h < 0) {      h+=360.0f;    }  }  if (hls == null) {    hls=new float[3];  }  hls[0]=h;  hls[1]=l;  hls[2]=s;  return hls;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String toString(){  return String.format("key '%s' for %s",name,owner);}  }
class C{  public static Calendar parse(String dateString,final int timezoneOffset) throws ParseException {  Calendar cal=Calendar.getInstance(UTCtimeZone);  if ("now".equals(dateString))   return cal;  if ("hour".equals(dateString)) {    cal.setTime(oneHourAgo());    return cal;  }  if ("day".equals(dateString)) {    cal.setTime(oneDayAgo());    return cal;  }  if ("week".equals(dateString)) {    cal.setTime(oneWeekAgo());    return cal;  }  dateString=dateString.replaceAll("_"," ");  int p=-1;  if ((p=dateString.indexOf(':')) > 0) {    if (dateString.indexOf(':',p + 1) > 0) synchronized (secondDateFormat) {      cal.setTime(secondDateFormat.parse(dateString));    } else synchronized (minuteDateFormat) {      cal.setTime(minuteDateFormat.parse(dateString));    }  } else synchronized (dayDateFormat) {    cal.setTime(dayDateFormat.parse(dateString));  }  cal.add(Calendar.MINUTE,timezoneOffset);  return cal;}  }
class C{  public boolean translateFile(String relFilepath){  assert loadedLng != null;  assert mainTransLists != null;  boolean result=false;  if (mainTransLists.containsKey(relFilepath)) {    Switchboard sb=Switchboard.getSwitchboard();    if (sb != null) {      final String htRootPath=sb.getConfig(SwitchboardConstants.HTROOT_PATH,SwitchboardConstants.HTROOT_PATH_DEFAULT);      final File sourceDir=new File(sb.getAppPath(),htRootPath);      final File destDir=new File(sb.getDataPath("locale.translated_html","DATA/LOCALE/htroot"),loadedLng);      final File sourceFile=new File(sourceDir,relFilepath);      final File destFile=new File(destDir,relFilepath);      result=translateFile(sourceFile,destFile,mainTransLists.get(relFilepath));    }  }  return result;}  }
class C{  public Polynomial(double[] a){  order=a.length - 1;  this.a=new double[a.length];  System.arraycopy(a,0,this.a,0,a.length);}  }
class C{  private double calculateLogLikelihood(){  double logL=0;  if (!isValidate(indexVariable.getValues())) {    return Double.NEGATIVE_INFINITY;  }  for (int i=0; i < trees.size(); i++) {    MaskableSpeciationModel model=speciationModels.get(i);    if (i > 0) {      SpeciationModel mask=speciationModels.get(indexVariable.getValue(i - 1));      if (model != mask) {        model.mask(mask);      } else {        model.unmask();      }    }    logL+=model.calculateTreeLogLikelihood(trees.get(i));  }  Double maxI=(double)(int)getMaxIndex(indexVariable.getValues());  maxIndexVariable.setValue(0,maxI);  return logL;}  }
class C{  private LinkTableConfiguration(Builder builder){  setColumnPathes(builder.getColumnPathes());  setLinkTypeIds(builder.getLinkTypeIds());  setScopeIds(builder.getScopeIds());}  }
class C{  public static CustomChannel run(AdSenseHost service,String adClientId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Adding custom channel to ad client %s\n",adClientId);  System.out.println("=================================================================");  CustomChannel newCustomChannel=new CustomChannel().setName("Sample Channel #" + AdSenseHostSample.getUniqueName());  CustomChannel customChannel=service.customchannels().insert(adClientId,newCustomChannel).execute();  System.out.printf("Custom channel with id \"%s\", code \"%s\" and name \"%s\" was created.\n",customChannel.getId(),customChannel.getCode(),customChannel.getName());  System.out.println();  return customChannel;}  }
class C{  public boolean hasAnyFlags(int bits){  return (flags & bits) != 0;}  }
class C{  boolean needsAltMetafactory(){  return tree.targets.length() > 1 || isSerializable() || bridges.length() > 1;}  }
class C{  @Override public void doInit() throws ResourceException {  super.doInit();  String resourceId=resolveResourceId(getRequest());  RestManager restManager=RestManager.getRestManager(SolrRequestInfo.getRequestInfo());  managedResource=restManager.getManagedResourceOrNull(resourceId);  if (managedResource == null) {    int lastSlashAt=resourceId.lastIndexOf('/');    if (lastSlashAt != -1) {      String parentResourceId=resourceId.substring(0,lastSlashAt);      log.info("Resource not found for {}, looking for parent: {}",resourceId,parentResourceId);      managedResource=restManager.getManagedResourceOrNull(parentResourceId);      if (managedResource != null) {        if (!(managedResource instanceof ManagedResource.ChildResourceSupport)) {          String errMsg=String.format(Locale.ROOT,"%s does not support child resources!",managedResource.getResourceId());          throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,errMsg);        }        childId=resourceId.substring(lastSlashAt + 1);        log.info("Found parent resource {} for child: {}",parentResourceId,childId);      }    }  }  if (managedResource == null) {    if (Method.PUT.equals(getMethod()) || Method.POST.equals(getMethod())) {      managedResource=restManager.endpoint;    } else {      throw new ResourceException(Status.CLIENT_ERROR_NOT_FOUND,"No REST managed resource registered for path " + resourceId);    }  }  log.info("Found ManagedResource [" + managedResource + "] for "+ resourceId);}  }
class C{  public void testSingleChar() throws Exception {  CharacterRunAutomaton single=new CharacterRunAutomaton(new RegExp(".").toAutomaton());  Analyzer a=new MockAnalyzer(random(),single,false);  assertAnalyzesTo(a,"foobar",new String[]{"f","o","o","b","a","r"},new int[]{0,1,2,3,4,5},new int[]{1,2,3,4,5,6});  checkRandomData(random(),a,100);}  }
class C{  public static void main(String[] argv){  ArgsBaratine args=new ArgsBaratine(argv);  args.doMain();}  }
class C{  protected int addHeaderToOutput(byte[] msg,AbstractMRMessage m){  return 0;}  }
class C{  @Override public void mouseDoubleClick(int x,int y,int mouseButton){  if (mouseButton != 1) {    return;  }  if ((tape != null) || (path != null)) {    return;  }  if ((lastSelection != null) && ((lastSelection instanceof Landmark) || (lastSelection instanceof Tool) || (lastSelection instanceof Waypoint))) {    MapElement mElement=(MapElement)lastSelection;    mElement.getState().openAnnotation();  }}  }
class C{  public MLOutput execute(String dmlScriptFilePath,boolean parsePyDML,String configFilePath) throws IOException, DMLException, ParseException {  return compileAndExecuteScript(dmlScriptFilePath,null,false,parsePyDML,configFilePath);}  }
class C{  @Override public void writeXML(@WillClose Writer out) throws IOException {  assert project != null;  bugsPopulated();  XMLOutput xmlOutput;  if (withMessages && cloud != null) {    cloud.bugsPopulated();    cloud.initiateCommunication();    cloud.waitUntilIssueDataDownloaded();    String token=SystemProperties.getProperty("findbugs.cloud.token");    if (token != null && token.trim().length() > 0) {      LOGGER.info("Cloud token specified - uploading new issues, if necessary...");      cloud.waitUntilNewIssuesUploaded();    }    xmlOutput=new OutputStreamXMLOutput(out,"http://findbugs.sourceforge.net/xsl/default.xsl");  } else {    xmlOutput=new OutputStreamXMLOutput(out);  }  writeXML(xmlOutput);}  }
class C{  public Pattern createPattern(){  PatternImpl pattern=new PatternImpl();  return pattern;}  }
class C{  public void clean(int size){  if (fifo.size() > size) {    while (size > 0) {      fifo.removeElementAt(0);      nbObjects--;      size--;    }  }}  }
class C{  public boolean needsUpgrading(final DatabaseVersion fromVersion){  return fromVersion.getString().equals("4.0.0") || fromVersion.getString().equals("5.0.0");}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.CAST_EXPRESSION__EXPRESSION:    return basicSetExpression(null,msgs);case N4JSPackage.CAST_EXPRESSION__TARGET_TYPE_REF:  return basicSetTargetTypeRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected ExifTag addTag(ExifTag tag,int ifdId){  if (tag != null && ExifTag.isValidIfd(ifdId)) {    IfdData ifdData=getOrCreateIfdData(ifdId);    return ifdData.setTag(tag);  }  return null;}  }
class C{  @Override public void removeListener(final IEventLayerListener e){}  }
class C{  public void pushOntoIntStack(Interpreter interpreter,int val){  interpreter.intStack().push(val);}  }
class C{  public UnsupportedClassVersionError(){  super();}  }
class C{  public SendableTextMessage.SendableTextMessageBuilder disableNotification(boolean disableNotification){  this.disableNotification=disableNotification;  return this;}  }
class C{  public boolean areEqual(final AnnotatedTypeMirror type1,final AnnotatedTypeMirror type2){  return AtmCombo.accept(type1,type2,new VisitHistory(),this);}  }
class C{  public void addProperty(String key,Object token){  deprecationCrutch.addProperty(key,token);  Object o=this.get(key);  if (o instanceof String) {    Vector v=new Vector(2);    v.addElement(o);    v.addElement(token);    put(key,v);  } else   if (o instanceof Vector) {    ((Vector)o).addElement(token);  } else {    if (token instanceof String && ((String)token).indexOf(PropertiesTokenizer.DELIMITER) > 0) {      PropertiesTokenizer tokenizer=new PropertiesTokenizer((String)token);      while (tokenizer.hasMoreTokens()) {        String value=tokenizer.nextToken();        addStringProperty(key,value);      }    } else {      if (!containsKey(key)) {        keysAsListed.add(key);      }      put(key,token);    }  }}  }
class C{  public static void printMagnitudes(){  printMagnitudes(System.out);}  }
class C{  public PrefixStringMatcher(String[] prefixes){  super();  for (int i=0; i < prefixes.length; i++)   addPatternForward(prefixes[i]);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getInlineAssociationEnd_();}  }
class C{  public boolean hasLocalInterestBeenComputed(){  return this.hasLocalInterestBeenComputed;}  }
class C{  public void testDeletePackage2(){  int originalAppIdValue=mAppIdValue;  int originalContentTypeValue=mContentTypeValue;  try {    IWapPushManager iwapman=getInterface();    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false);    assertFalse(iwapman.deletePackage(Integer.toString(mAppIdValue + 10),Integer.toString(mContentTypeValue),mPackageName,mClassName));    assertFalse(iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue + 20),mPackageName,mClassName));    assertFalse(iwapman.deletePackage(Integer.toString(mAppIdValue + 10),Integer.toString(mContentTypeValue + 20),mPackageName,mClassName));    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);  } catch (  RemoteException e) {    assertTrue(false);  }}  }
class C{  public void evaluate(EvolutionState state,Individual ind,int subpopulation,int threadnum){  if (ind.evaluated)   return;  VectorSpeciesCGP s=(VectorSpeciesCGP)ind.species;  VectorIndividualCGP ind2=(VectorIndividualCGP)ind;  float diff=0f;  Float[] inputs=new Float[2];  float fn=0f;  for (int i=0; i < testPoints.length; i++) {    inputs[0]=testPoints[i];    inputs[1]=1.0f;    Object[] outputs=Evaluator.evaluate(state,threadnum,inputs,ind2);    if (function == 1)     fn=function1(testPoints[i]); else     if (function == 2)     fn=function2(testPoints[i]); else     if (function == 3)     fn=function3(testPoints[i]);    diff+=Math.abs((Float)outputs[0] - fn);  }  ((FitnessCGP)ind.fitness).setFitness(state,diff,diff <= 0.01);  ind.evaluated=true;}  }
class C{  public ProcessingInstruction createProcessingInstruction(String target,String data) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public SegmentIntersectionDetector(LineIntersector li){  this.li=li;}  }
class C{  public static boolean isFileExist(String filePath){  if (Handler_String.isBlank(filePath)) {    return false;  }  File file=new File(filePath);  return (file.exists() && file.isFile());}  }
class C{  @Override public final void write(byte[] source,int offset,int len){  if (this.overflowBuf != null) {    this.overflowBuf.write(source,offset,len);    return;  }  while (len > 0) {    int remainingSpace=this.buffer.capacity() - this.buffer.position();    if (remainingSpace == 0) {      realFlush(false);      if (this.overflowBuf != null) {        this.overflowBuf.write(source,offset,len);        return;      }    } else {      int chunkSize=remainingSpace;      if (len < chunkSize) {        chunkSize=len;      }      this.buffer.put(source,offset,chunkSize);      offset+=chunkSize;      len-=chunkSize;    }  }}  }
class C{  public static void addView(Context context,View view){  addView(context,view,createDefaultLayoutParams());}  }
class C{  public Object generate(Element element,ElementMetadata<?,?> metadata){  Path bound=path.toAbsolute(metadata);  element=getFinalElement(bound,element);  if (element == null) {    return null;  }  if (bound.selectsAttribute()) {    return generateAttributeValue(element,bound.getSelectedElement(),bound.getSelectedAttributeKey(),bound.getSelectedAttribute());  } else {    return generateTextValue(element,bound.getSelectedElement());  }}  }
class C{  protected void fireAncestorMoved(JComponent source,int id,Container ancestor,Container ancestorParent){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == AncestorListener.class) {      AncestorEvent ancestorEvent=new AncestorEvent(source,id,ancestor,ancestorParent);      ((AncestorListener)listeners[i + 1]).ancestorMoved(ancestorEvent);    }  }}  }
class C{  @Override public Set<K> keySet(){  HashSet<K> set=new HashSet<K>();  for (  Segment<K,V> s : segments) {    set.addAll(s.keySet());  }  return set;}  }
class C{  public int tableLength(){  return ByteArray.readU16bit(info,0);}  }
class C{  public TetradMatrix pruneEdgesByResampling(TetradMatrix data){  TetradMatrix X=new TetradMatrix(data.transpose().toArray());  int npieces=10;  int cols=X.columns();  int rows=X.rows();  int piecesize=(int)Math.floor(cols / npieces);  List<TetradMatrix> bpieces=new ArrayList<>();  List<TetradVector> diststdpieces=new ArrayList<>();  List<TetradVector> cpieces=new ArrayList<>();  for (int p=0; p < npieces; p++) {    int p0=(p) * piecesize;    int p1=(p + 1) * piecesize - 1;    int[] range=range(p0,p1);    TetradMatrix Xp=X;    TetradVector Xpm=new TetradVector(rows);    for (int i=0; i < rows; i++) {      double sum=0.0;      for (int j=0; j < Xp.columns(); j++) {        sum+=Xp.get(i,j);      }      Xpm.set(i,sum / Xp.columns());    }    for (int i=0; i < rows; i++) {      for (int j=0; j < Xp.columns(); j++) {        Xp.set(i,j,Xp.get(i,j) - Xpm.get(i));      }    }    TetradMatrix Xpt=Xp.transpose();    TetradMatrix cov=Xp.times(Xpt);    for (int i=0; i < cov.rows(); i++) {      for (int j=0; j < cov.columns(); j++) {        cov.set(i,j,cov.get(i,j) / Xp.columns());      }    }    boolean posDef=LingUtils.isPositiveDefinite(cov);    if (!posDef) {      System.out.println("Covariance matrix is not positive definite.");    }    TetradMatrix sqrt=cov.sqrt();    ;    TetradMatrix I=TetradMatrix.identity(rows);    TetradMatrix AI=I.copy();    TetradMatrix invSqrt=sqrt.inverse();    QRDecomposition qr=new QRDecomposition(invSqrt.getRealMatrix());    RealMatrix r=qr.getR();    TetradVector newestdisturbancestd=new TetradVector(rows);    for (int t=0; t < rows; t++) {      newestdisturbancestd.set(t,1.0 / Math.abs(r.getEntry(t,t)));    }    for (int s=0; s < rows; s++) {      for (int t=0; t < min(s,cols); t++) {        r.setEntry(s,t,r.getEntry(s,t) / r.getEntry(s,s));      }    }    TetradMatrix bnewest=TetradMatrix.identity(rows);    bnewest=bnewest.minus(new TetradMatrix(r));    TetradVector cnewest=new TetradMatrix(r).times(Xpm);    bpieces.add(bnewest);    diststdpieces.add(newestdisturbancestd);    cpieces.add(cnewest);  }  TetradMatrix means=new TetradMatrix(rows,rows);  TetradMatrix stds=new TetradMatrix(rows,rows);  TetradMatrix BFinal=new TetradMatrix(rows,rows);  for (int i=0; i < rows; i++) {    for (int j=0; j < rows; j++) {      double sum=0.0;      for (int y=0; y < npieces; y++) {        sum+=bpieces.get(y).get(i,j);      }      double themean=sum / (npieces);      double sumVar=0.0;      for (int y=0; y < npieces; y++) {        sumVar+=Math.pow((bpieces.get(y).get(i,j)) - themean,2);      }      double thestd=Math.sqrt(sumVar / (npieces));      means.set(i,j,themean);      stds.set(i,j,thestd);      if (Math.abs(themean) < threshold * thestd) {        BFinal.set(i,j,0);      } else {        BFinal.set(i,j,themean);      }    }  }  return BFinal;}  }
class C{  private String createIndentation(int numChars){  StringBuilder sb=new StringBuilder();  for (int i=0; i < numChars; i++)   sb.append(" ");  return sb.toString();}  }
class C{  public void firePropertyChangedEvent(){  for (  WorldListener listener : listenerList) {    listener.propertyChanged();  }}  }
class C{  @Override protected void beforeShow(){  super.beforeShow();  m_Option=CANCEL_OPTION;}  }
class C{  protected void fireTreeNodesChanged(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeNodesChanged(e);    }  }}  }
class C{  String renameTypeDesc(String desc){  if (desc == null) {    return null;  }  return renameType(Type.getType(desc));}  }
class C{  public void addAlias(String field,float tiebreaker,Map<String,Float> fieldBoosts){  Alias a=new Alias();  a.tie=tiebreaker;  a.fields=fieldBoosts;  aliases.put(field,a);}  }
class C{  private void cloneReachableNonHiddenAncestorMethods(SootClass ancestor){  if (ClassCloner.isClonedClass(ancestor)) {    logger.error("Cloning method from clone: {}",ancestor);    droidsafe.main.Main.exit(1);  }  for (  SootMethod ancestorM : ancestor.getMethods()) {    if (ancestorM.isAbstract() || ancestorM.isPhantom() || !ancestorM.isConcrete()|| SootUtils.isRuntimeStubMethod(ancestorM))     continue;    if (ancestorM.isStatic())     continue;    if (!cloneAllMethods && !PTABridge.v().getReachableMethods().contains(ancestorM))     continue;    if (containsMethod(ancestorM.getSignature())) {      continue;    }    if (ancestorM.isFinal())     ancestorM.setModifiers(ancestorM.getModifiers() ^ Modifier.FINAL);    try {      cloneMethod(ancestorM,ancestorM.getName());    } catch (    Exception e) {    }  }}  }
class C{  public void writeExif(InputStream jpegStream,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegStream == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    doExifStreamIO(jpegStream,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  public boolean isPrimary(){  return primary;}  }
class C{  public boolean applyOptions() throws IOException {  URLHandlerSettings.IMAGE_VIEWER.setValue(_viewerField.getText());  return false;}  }
class C{  public void testAlgorithmParameterGenerator08(){  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  try {    AlgorithmParameterGenerator.getInstance(null,validProvider);    fail("NullPointerException or NoSuchAlgorithmException should be thrown");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(invalidValues[i],validProvider);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public static int[] reduce(int[] n1){  for (int i=0; i < n1.length; i++) {    if (n1[i] != 0) {      if (i == 0)       return copy(n1);      int[] newVal=new int[n1.length - i];      extract(newVal,0,n1,i,n1.length - i);      return newVal;    }  }  return new int[]{0};}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableSet<V> replaceValues(K key,Iterable<? extends V> values){  throw new UnsupportedOperationException();}  }
class C{  public static void deleteDirectory(final File directory){  final File[] filesInTestDir=directory.listFiles();  if (filesInTestDir != null) {    for (    final File eachFile : filesInTestDir) {      eachFile.delete();    }  }  directory.delete();}  }
class C{  public static int testIfRead5Snippet(int a){  if (a < 0) {    container.a=10;  }  return container.a;}  }
class C{  public void cancel(){  mTN.hide();  try {    getService().cancelToast(mContext.getPackageName(),mTN);  } catch (  RemoteException e) {  }}  }
class C{  public MatsimNetworkReader(Network network){  this(new IdentityTransformation(),network);}  }
class C{  boolean nextRow(){  currRowSeq++;  if (rows == 0 || currRowSubimg >= rows - 1) {    if (pass == 7) {      ended=true;      return false;    }    setPass(pass + 1);    if (rows == 0) {      currRowSeq--;      return nextRow();    }    setRow(0);  } else {    setRow(currRowSubimg + 1);  }  return true;}  }
class C{  public EmbeddedSingleNodeKafkaCluster(Properties brokerConfig){  this.brokerConfig=new Properties();  this.brokerConfig.putAll(brokerConfig);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter three sides of the triangle: ");  double side1=input.nextDouble();  double side2=input.nextDouble();  double side3=input.nextDouble();  System.out.print("Enter a color: ");  String color=input.next();  System.out.print("Is the triangle filled (true / false)? ");  boolean filled=input.nextBoolean();  Triangle triangle=new Triangle(side1,side2,side3,color,filled);  System.out.println(triangle);}  }
class C{  @Override public String toString(){  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append(String.format("%nLocalName : %s",this.getLocalName()));  stringBuilder.append(String.format("%nNamespaceURI : %s",this.getNamespaceURI()));  return stringBuilder.toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void Literal() throws javax.xml.transform.TransformerException {  int last=m_token.length() - 1;  char c0=m_tokenChar;  char cX=m_token.charAt(last);  if (((c0 == '\"') && (cX == '\"')) || ((c0 == '\'') && (cX == '\''))) {    int tokenQueuePos=m_queueMark - 1;    m_ops.m_tokenQueue.setElementAt(null,tokenQueuePos);    Object obj=new XString(m_token.substring(1,last));    m_ops.m_tokenQueue.setElementAt(obj,tokenQueuePos);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),tokenQueuePos);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    nextToken();  } else {    error(XPATHErrorResources.ER_PATTERN_LITERAL_NEEDS_BE_QUOTED,new Object[]{m_token});  }}  }
class C{  public void handleEvent(Event evt){  handleDOMSubtreeModifiedEvent((MutationEvent)evt);}  }
class C{  public title addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private List<Substitution<ReferenceType>> collectSubstitutions(List<TypeVariable> typeParameters,Substitution<ReferenceType> substitution){  List<TypeVariable> genericParameters=new ArrayList<>();  List<TypeVariable> nongenericParameters=new ArrayList<>();  List<TypeVariable> captureParameters=new ArrayList<>();  for (  TypeVariable variable : typeParameters) {    if (variable.hasGenericBound()) {      genericParameters.add(variable);    } else {      if (variable.isCaptureVariable()) {        captureParameters.add(variable);      } else {        nongenericParameters.add(variable);      }    }  }  List<Substitution<ReferenceType>> substitutionList=new ArrayList<>();  if (!genericParameters.isEmpty()) {    TypeCheck typeCheck=TypeCheck.forParameters(genericParameters);    if (!nongenericParameters.isEmpty()) {      List<List<ReferenceType>> nonGenCandidates=getCandidateTypeLists(nongenericParameters);      if (nonGenCandidates.isEmpty()) {        return new ArrayList<>();      }      ListEnumerator<ReferenceType> enumerator=new ListEnumerator<>(nonGenCandidates);      while (enumerator.hasNext()) {        Substitution<ReferenceType> initialSubstitution=substitution.extend(Substitution.forArgs(nongenericParameters,enumerator.next()));        List<TypeVariable> parameters=new ArrayList<>();        for (        TypeVariable variable : genericParameters) {          TypeVariable param=(TypeVariable)variable.apply(initialSubstitution);          parameters.add(param);        }        substitutionList.addAll(collectSubstitutions(parameters,initialSubstitution));      }    } else {      substitutionList=getInstantiations(genericParameters,substitution,typeCheck);    }    if (substitutionList.isEmpty()) {      return substitutionList;    }  } else   if (!nongenericParameters.isEmpty()) {    substitution=selectAndExtend(nongenericParameters,substitution);    if (substitution == null) {      return new ArrayList<>();    }    substitutionList.add(substitution);  }  if (!captureParameters.isEmpty()) {    List<Substitution<ReferenceType>> substList=new ArrayList<>();    if (substitutionList.isEmpty()) {      substList.add(selectAndExtend(captureParameters,substitution));    } else {      for (      Substitution<ReferenceType> s : substitutionList) {        substList.add(selectAndExtend(captureParameters,s));      }    }    substitutionList=substList;  }  return substitutionList;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Period plusDays(int days){  if (days == 0) {    return this;  }  int[] values=getValues();  getPeriodType().addIndexedField(this,PeriodType.DAY_INDEX,values,days);  return new Period(values,getPeriodType());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.354 -0500",hash_original_method="537B18CC29F2C70486994281CB29500B",hash_generated_method="6A482BE6A74E58339F6E34A315D068FB") public PathHeader createPathHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  Path path=new Path();  path.setAddress(address);  return path;}  }
class C{  public void test_INSERT_veryLargeLiteral() throws Exception {  final Graph g=new LinkedHashModel();  final URI s=new URIImpl("http://www.bigdata.com/");  final URI p=RDFS.LABEL;  final Literal o=getVeryLargeLiteral();  final Statement stmt=new StatementImpl(s,p,o);  g.add(stmt);  assertEquals(1L,doInsertByBody("POST",RDFFormat.RDFXML,g,null));  final Graph g2;{    final String queryStr="DESCRIBE <" + s.stringValue() + ">";    final GraphQuery query=cxn.prepareGraphQuery(QueryLanguage.SPARQL,queryStr);    g2=asGraph(query.evaluate());  }  assertEquals(1,g2.size());  assertTrue(g2.match(s,p,o).hasNext());}  }
class C{  public static void testFulkersonBFS(){  FlowNetworkArray network=new FlowNetworkArray(6,0,5,edges.iterator());  FordFulkerson ffa=new FordFulkerson(network,new BFS_SearchArray(network));  ffa.compute();  validate(network);}  }
class C{  public BaseAdapterHelper linkify(int viewId){  TextView view=retrieveView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.772 -0500",hash_original_method="D0F10B1E844DBE54E1C95079D90DDAB9",hash_generated_method="D470C4BE1EF8CCE32AD669400786EA9D") public Reader retrieveArticleBody(String articleId,ArticlePointer pointer) throws IOException {  return __retrieve(NNTPCommand.BODY,articleId,pointer);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.386 -0400",hash_original_method="F3793FD3E2505AD035424F13E8FC4E3E",hash_generated_method="A58E4C50621A1951F80865295014D02B") public String decode(String pString,String charset) throws DecoderException, UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(decode(pString.getBytes(StringEncodings.US_ASCII)),charset);}  }
class C{  public double norm2(){  return s[0];}  }
class C{  protected void testPut() throws Throwable {  Operation op=Operation.createPut(URI.create(echoServiceUri));  testEchoOperation(op);}  }
class C{  public static Number[] createNumberArray(double[] data){  Number[] result=new Number[data.length];  for (int i=0; i < data.length; i++) {    result[i]=new Double(data[i]);  }  return result;}  }
class C{  public boolean attempt(ObjectReference old,ObjectReference val,Offset offset){  return this.plus(offset).attempt(old,val);}  }
class C{  public GuildMemberUpdateHandler(ImplDiscordAPI api){  super(api,true,"GUILD_MEMBER_UPDATE");}  }
class C{  public static void makeAdvancedBoundingBlock(World world,int x,int y,int z,Coord4D orig){  world.setBlock(x,y,z,MekanismBlocks.BoundingBlock,1,0);  if (!world.isRemote) {    ((TileEntityAdvancedBoundingBlock)world.getTileEntity(x,y,z)).setMainLocation(orig.xCoord,orig.yCoord,orig.zCoord);  }}  }
class C{  private void synchronizeThreads(final TargetProcessThread oldThread,final TargetProcessThread newThread){  if (oldThread != null) {    oldThread.removeListener(m_internalThreadListener);  }  if (newThread == null) {    CDebuggerPainter.clearDebuggerHighlighting(m_graph);  } else {    newThread.addListener(m_internalThreadListener);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static byte[] decodeHex(final char[] data) throws IllegalArgumentException {  final int len=data.length;  if ((len & 0x01) != 0) {    throw new IllegalArgumentException("Odd number of characters.");  }  final byte[] out=new byte[len >> 1];  for (int i=0, j=0; j < len; i++) {    int f=toDigit(data[j],j) << 4;    j++;    f=f | toDigit(data[j],j);    j++;    out[i]=(byte)(f & 0xFF);  }  return out;}  }
class C{  public StorageUnitEntity createStorageUnitEntity(String storageName,String storagePlatform,BusinessObjectDataKey businessObjectDataKey,Boolean businessObjectDataLatestVersion,String businessObjectDataStatusCode,String storageUnitStatus,String storageDirectoryPath){  StorageEntity storageEntity=storageDao.getStorageByName(storageName);  if (storageEntity == null) {    storageEntity=storageDaoTestHelper.createStorageEntity(storageName,storagePlatform);  }  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDao.getBusinessObjectDataByAltKey(businessObjectDataKey);  if (businessObjectDataEntity == null) {    businessObjectDataEntity=businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(businessObjectDataKey,businessObjectDataLatestVersion,businessObjectDataStatusCode);  }  return createStorageUnitEntity(storageEntity,businessObjectDataEntity,storageUnitStatus,storageDirectoryPath);}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  handler.pushElemTemplateElement(elem);}  }
class C{  void createFbo(){  fbo=glGenFramebuffers();  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  glBindTexture(GL_TEXTURE_2D,depthTexture);  glDrawBuffer(GL_NONE);  glReadBuffer(GL_NONE);  glFramebufferTexture2D(GL_FRAMEBUFFER,GL_DEPTH_ATTACHMENT,GL_TEXTURE_2D,depthTexture,0);  int fboStatus=glCheckFramebufferStatus(GL_FRAMEBUFFER);  if (fboStatus != GL_FRAMEBUFFER_COMPLETE) {    throw new AssertionError("Could not create FBO: " + fboStatus);  }  glBindTexture(GL_TEXTURE_2D,0);  glBindFramebuffer(GL_FRAMEBUFFER,0);}  }
class C{  public NexradLayer(){  setName("Nexrad");}  }
class C{  @Deprecated protected void prioritizeCandidates(){synchronized (localCandidates) {    LocalCandidate[] candidates=new LocalCandidate[localCandidates.size()];    localCandidates.toArray(candidates);    for (    Candidate<?> cand : candidates) {      cand.computePriority();    }    Arrays.sort(candidates,candidatePrioritizer);    localCandidates.clear();    for (    LocalCandidate cand : candidates)     localCandidates.add(cand);  }}  }
class C{  public Pkcs12SignatureToken(String password,File pkcs12File){  this(password.toCharArray(),pkcs12File);}  }
class C{  private void addToFavorites(){  for (  String game : list.getSelectedValuesList()) {    favorites.add(game);  }  saveFavorites();  update();}  }
class C{  private void serverClientMessage() throws Exception {  Ignite ignite=grid(SERVER_NODE_IDX);  ClusterGroup grp=ignite.cluster().forClients();  assert grp.nodes().size() > 0;  registerListenerAndSendMessages(ignite,grp);}  }
class C{  public void snackBarDismiss(@StringRes int id){  snackBar.dismiss(id);}  }
class C{  public void aggregateTimerData(TimerData timerData){  super.aggregateInvocationAwareData(timerData);  this.setCount(this.getCount() + timerData.getCount());  this.setDuration(this.getDuration() + timerData.getDuration());  this.calculateMax(timerData.getMax());  this.calculateMin(timerData.getMin());  if (timerData.isCpuMetricDataAvailable()) {    this.setCpuDuration(this.getCpuDuration() + timerData.getCpuDuration());    this.calculateCpuMax(timerData.getCpuMax());    this.calculateCpuMin(timerData.getCpuMin());  }  if (timerData.isExclusiveTimeDataAvailable()) {    this.addExclusiveDuration(timerData.getExclusiveDuration());    this.setExclusiveCount(this.getExclusiveCount() + timerData.getExclusiveCount());    this.calculateExclusiveMax(timerData.getExclusiveMax());    this.calculateExclusiveMin(timerData.getExclusiveMin());  }  this.charting=this.charting | timerData.isCharting();}  }
class C{  public void prepareForSend(){  if (size() == 1) {    TextModel text=get(0).getText();    if (text != null) {      text.cloneText();    }  }}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public static byte[] hexStringToByteArray(String strA){  ByteArrayOutputStream result=new ByteArrayOutputStream();  byte sum=(byte)0x00;  boolean nextCharIsUpper=true;  for (int i=0; i < strA.length(); i++) {    char c=strA.charAt(i);switch (Character.toUpperCase(c)) {case '0':      if (nextCharIsUpper) {        sum=(byte)0x00;        nextCharIsUpper=false;      } else {        sum|=(byte)0x00;        result.write(sum);        nextCharIsUpper=true;      }    break;case '1':  if (nextCharIsUpper) {    sum=(byte)0x10;    nextCharIsUpper=false;  } else {    sum|=(byte)0x01;    result.write(sum);    nextCharIsUpper=true;  }break;case '2':if (nextCharIsUpper) {sum=(byte)0x20;nextCharIsUpper=false;} else {sum|=(byte)0x02;result.write(sum);nextCharIsUpper=true;}break;case '3':if (nextCharIsUpper) {sum=(byte)0x30;nextCharIsUpper=false;} else {sum|=(byte)0x03;result.write(sum);nextCharIsUpper=true;}break;case '4':if (nextCharIsUpper) {sum=(byte)0x40;nextCharIsUpper=false;} else {sum|=(byte)0x04;result.write(sum);nextCharIsUpper=true;}break;case '5':if (nextCharIsUpper) {sum=(byte)0x50;nextCharIsUpper=false;} else {sum|=(byte)0x05;result.write(sum);nextCharIsUpper=true;}break;case '6':if (nextCharIsUpper) {sum=(byte)0x60;nextCharIsUpper=false;} else {sum|=(byte)0x06;result.write(sum);nextCharIsUpper=true;}break;case '7':if (nextCharIsUpper) {sum=(byte)0x70;nextCharIsUpper=false;} else {sum|=(byte)0x07;result.write(sum);nextCharIsUpper=true;}break;case '8':if (nextCharIsUpper) {sum=(byte)0x80;nextCharIsUpper=false;} else {sum|=(byte)0x08;result.write(sum);nextCharIsUpper=true;}break;case '9':if (nextCharIsUpper) {sum=(byte)0x90;nextCharIsUpper=false;} else {sum|=(byte)0x09;result.write(sum);nextCharIsUpper=true;}break;case 'A':if (nextCharIsUpper) {sum=(byte)0xA0;nextCharIsUpper=false;} else {sum|=(byte)0x0A;result.write(sum);nextCharIsUpper=true;}break;case 'B':if (nextCharIsUpper) {sum=(byte)0xB0;nextCharIsUpper=false;} else {sum|=(byte)0x0B;result.write(sum);nextCharIsUpper=true;}break;case 'C':if (nextCharIsUpper) {sum=(byte)0xC0;nextCharIsUpper=false;} else {sum|=(byte)0x0C;result.write(sum);nextCharIsUpper=true;}break;case 'D':if (nextCharIsUpper) {sum=(byte)0xD0;nextCharIsUpper=false;} else {sum|=(byte)0x0D;result.write(sum);nextCharIsUpper=true;}break;case 'E':if (nextCharIsUpper) {sum=(byte)0xE0;nextCharIsUpper=false;} else {sum|=(byte)0x0E;result.write(sum);nextCharIsUpper=true;}break;case 'F':if (nextCharIsUpper) {sum=(byte)0xF0;nextCharIsUpper=false;} else {sum|=(byte)0x0F;result.write(sum);nextCharIsUpper=true;}break;default :break;}}if (!nextCharIsUpper) {throw new RuntimeException("The String did not contain an equal number of hex digits");}return result.toByteArray();}  }
class C{  boolean hasMoreReferralExceptions(){  if (debug)   System.out.println("LdapReferralException.hasMoreReferralExceptions");  return (nextReferralEx != null);}  }
class C{  private void saveDescendantState(UIComponent component,FacesContext context){  Map<String,SavedState> saved=(Map<String,SavedState>)getStateHelper().get(PropertyKeys.saved);  if (component instanceof EditableValueHolder) {    EditableValueHolder input=(EditableValueHolder)component;    SavedState state=null;    String clientId=component.getClientId(context);    if (saved == null) {      state=new SavedState();    }    if (state == null) {      state=saved.get(clientId);      if (state == null) {        state=new SavedState();      }    }    state.setValue(input.getLocalValue());    state.setValid(input.isValid());    state.setSubmittedValue(input.getSubmittedValue());    state.setLocalValueSet(input.isLocalValueSet());    if (state.hasDeltaState()) {      getStateHelper().put(PropertyKeys.saved,clientId,state);    } else     if (saved != null) {      getStateHelper().remove(PropertyKeys.saved,clientId);    }  } else   if (component instanceof UIForm) {    UIForm form=(UIForm)component;    String clientId=component.getClientId(context);    SavedState state=null;    if (saved == null) {      state=new SavedState();    }    if (state == null) {      state=saved.get(clientId);      if (state == null) {        state=new SavedState();      }    }    state.setSubmitted(form.isSubmitted());    if (state.hasDeltaState()) {      getStateHelper().put(PropertyKeys.saved,clientId,state);    } else     if (saved != null) {      getStateHelper().remove(PropertyKeys.saved,clientId);    }  }  if (component.getChildCount() > 0) {    for (    UIComponent uiComponent : component.getChildren()) {      saveDescendantState(uiComponent,context);    }  }  if (component.getFacetCount() > 0) {    for (    UIComponent facet : component.getFacets().values()) {      saveDescendantState(facet,context);    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Icon(String id,String sourcePath,SVGResource svgResource){  this.id=id;  this.sourcePath=sourcePath;  this.svgResource=svgResource;  this.imageResource=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.304 -0500",hash_original_method="B05B09390509B455A836B09E2A65E5D4",hash_generated_method="B303ADC082E4C769878DBBA7904F78F9") private Object awaitNanos(Node node,Slot slot,long nanos){  int spins=TIMED_SPINS;  long lastTime=0;  Thread w=null;  for (; ; ) {    Object v=node.get();    if (v != null)     return v;    long now=System.nanoTime();    if (w == null)     w=Thread.currentThread(); else     nanos-=now - lastTime;    lastTime=now;    if (nanos > 0) {      if (spins > 0)       --spins; else       if (node.waiter == null)       node.waiter=w; else       if (w.isInterrupted())       tryCancel(node,slot); else       LockSupport.parkNanos(node,nanos);    } else     if (tryCancel(node,slot) && !w.isInterrupted())     return scanOnTimeout(node);  }}  }
class C{  public RoutingInfo(Object o){  this.text=o.toString();}  }
class C{  public UITab(IBurpExtenderCallbacks callbacks){  this.callbacks=callbacks;  this.main=new UIMain(callbacks);  callbacks.customizeUiComponent(main);  callbacks.addSuiteTab(this);}  }
class C{  private void disposeOptionalControls(String groupId){  if (optionalControls.containsKey(groupId)) {    for (    Control c : optionalControls.get(groupId)) {      c.dispose();    }    optionalControls.remove(groupId);  }  mainComposite.layout(true,true);}  }
class C{  public void testBug7033() throws Exception {  if (!this.DISABLED_testBug7033) {    Connection big5Conn=null;    Statement big5Stmt=null;    PreparedStatement big5PrepStmt=null;    String testString="\u5957 \u9910";    try {      Properties props=new Properties();      props.setProperty("useUnicode","true");      props.setProperty("characterEncoding","Big5");      big5Conn=getConnectionWithProps(props);      big5Stmt=big5Conn.createStatement();      byte[] foobar=testString.getBytes("Big5");      System.out.println(Arrays.toString(foobar));      this.rs=big5Stmt.executeQuery("select 1 as '\u5957 \u9910'");      String retrString=this.rs.getMetaData().getColumnName(1);      assertTrue(testString.equals(retrString));      big5PrepStmt=big5Conn.prepareStatement("select 1 as '\u5957 \u9910'");      this.rs=big5PrepStmt.executeQuery();      retrString=this.rs.getMetaData().getColumnName(1);      assertTrue(testString.equals(retrString));    }  finally {      if (this.rs != null) {        this.rs.close();        this.rs=null;      }      if (big5Stmt != null) {        big5Stmt.close();      }      if (big5PrepStmt != null) {        big5PrepStmt.close();      }      if (big5Conn != null) {        big5Conn.close();      }    }  }}  }
class C{  public void saveQuery(final HTTPRepository repository,final String queryName,final String userName,final boolean shared,final QueryLanguage queryLanguage,final String queryText,final boolean infer,final int rowsPerPage) throws RDF4JException {  if (QueryLanguage.SPARQL != queryLanguage && QueryLanguage.SERQL != queryLanguage) {    throw new RepositoryException("May only save SPARQL or SeRQL queries, not" + queryLanguage.toString());  }  if (0 != rowsPerPage && 10 != rowsPerPage && 20 != rowsPerPage && 50 != rowsPerPage && 100 != rowsPerPage && 200 != rowsPerPage) {    throw new RepositoryException("Illegal value for rows per page: " + rowsPerPage);  }  this.checkQueryText(queryText);  final QueryStringBuilder save=new QueryStringBuilder(SAVE);  save.replaceURI(REPOSITORY,repository.getRepositoryURL());  save.replaceURI(QUERY,"urn:uuid:" + UUID.randomUUID());  save.replaceQuote(QUERY_NAME,queryName);  this.replaceUpdateFields(save,userName,shared,queryLanguage,queryText,infer,rowsPerPage);  updateQueryRepository(save.toString());}  }
class C{  public Cache(int pref_size,int size){  cache_size=size;  prefix_size=pref_size;  hashes=new long[cache_size];  hashes_idx=new long[cache_size];  encodings=new byte[cache_size][];  cache=new Object[cache_size];}  }
class C{  Block createNextBlock(@Nullable final Address to,final long version,@Nullable TransactionOutPoint prevOut,final long time,final byte[] pubKey,final Coin coinbaseValue,final int height){  Block b=new Block(params,version);  b.setDifficultyTarget(difficultyTarget);  b.addCoinbaseTransaction(pubKey,coinbaseValue,height);  if (to != null) {    Transaction t=new Transaction(params);    t.addOutput(new TransactionOutput(params,t,FIFTY_COINS,to));    TransactionInput input;    if (prevOut == null) {      input=new TransactionInput(params,t,Script.createInputScript(EMPTY_BYTES,EMPTY_BYTES));      byte[] counter=new byte[32];      counter[0]=(byte)txCounter;      counter[1]=(byte)(txCounter++ >> 8);      input.getOutpoint().setHash(Sha256Hash.wrap(counter));    } else {      input=new TransactionInput(params,t,Script.createInputScript(EMPTY_BYTES,EMPTY_BYTES),prevOut);    }    t.addInput(input);    b.addTransaction(t);  }  b.setPrevBlockHash(getHash());  if (getTimeSeconds() >= time)   b.setTime(getTimeSeconds() + 1); else   b.setTime(time);  b.solve();  try {    b.verifyHeader();  } catch (  VerificationException e) {    throw new RuntimeException(e);  }  if (b.getVersion() != version) {    throw new RuntimeException();  }  return b;}  }
class C{  public String stem(String word){  if (word.length() > 2) {    return recodeEnding(removeEnding(word.toLowerCase()));  } else {    return word.toLowerCase();  }}  }
class C{  @Override public <T>T[] toArray(T[] array){  return newArray(array);}  }
class C{  public AttributeList(final int size){  attributeList=new ArrayList<GetterSetter<E>>(size);  for (int i=0; i < size; i++) {    attributeList.add(i,new GetterSetter<E>());  }}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  int n=a.length;  sort(a);  for (int i=0; i < n; i++)   StdOut.println(a[i]);}  }
class C{  public static FetchVersionResponse send(InternalDistributedMember recipient,LocalRegion r,Object key) throws RemoteOperationException {  FetchVersionResponse response=new FetchVersionResponse(r.getSystem(),recipient);  RemoteFetchVersionMessage msg=new RemoteFetchVersionMessage(recipient,r.getFullPath(),response,key);  Set<?> failures=r.getDistributionManager().putOutgoing(msg);  if (failures != null && failures.size() > 0) {    throw new RemoteOperationException(LocalizedStrings.GetMessage_FAILED_SENDING_0.toLocalizedString(msg));  }  return response;}  }
class C{  public static void e(String message,Throwable cause){  Log.e(LOG_TAG,"[" + message + "]",cause);}  }
class C{  GridJettyRestHandler(GridRestProtocolHandler hnd,IgniteClosure<String,Boolean> authChecker,IgniteLogger log){  assert hnd != null;  assert log != null;  this.hnd=hnd;  this.log=log;  this.authChecker=authChecker;  this.jsonMapper=new GridJettyObjectMapper();  try {    initDefaultPage();    if (log.isDebugEnabled())     log.debug("Initialized default page.");  } catch (  IOException e) {    U.warn(log,"Failed to initialize default page: " + e.getMessage());  }  try {    initFavicon();    if (log.isDebugEnabled())     log.debug(favicon != null ? "Initialized favicon, size: " + favicon.length : "Favicon is null.");  } catch (  IOException e) {    U.warn(log,"Failed to initialize favicon: " + e.getMessage());  }}  }
class C{  public void prepareTaskWorkDir(File path) throws IgniteCheckedException {  try {    if (path.exists())     throw new IOException("Task local directory already exists: " + path);    if (!path.mkdir())     throw new IOException("Failed to create directory: " + path);    for (    File resource : rsrcSet) {      File symLink=new File(path,resource.getName());      try {        Files.createSymbolicLink(symLink.toPath(),resource.toPath());      } catch (      IOException e) {        String msg="Unable to create symlink \"" + symLink + "\" to \""+ resource+ "\".";        if (U.isWindows() && e instanceof FileSystemException)         msg+="\n\nAbility to create symbolic links is required!\n" + "On Windows platform you have to grant permission 'Create symbolic links'\n" + "to your user or run the Accelerator as Administrator.\n";        throw new IOException(msg,e);      }    }  } catch (  IOException e) {    throw new IgniteCheckedException("Unable to prepare local working directory for the task " + "[jobId=" + jobId + ", path="+ path+ ']',e);  }}  }
class C{  public static Map<Unit,Unit> mapTransportsToLoad(final Collection<Unit> units,final Collection<Unit> transports){  final List<Unit> canBeTransported=sortByTransportCostDescending(units);  final List<Unit> canTransport=sortByTransportCapacityDescendingThenMovesDescending(transports);  final Map<Unit,Unit> mapping=new HashMap<>();  final IntegerMap<Unit> addedLoad=new IntegerMap<>();  for (  final Unit unit : canBeTransported) {    final Optional<Unit> transport=loadUnitIntoFirstAvailableTransport(unit,canTransport,mapping,addedLoad);    if (transport.isPresent()) {      canTransport.remove(transport.get());      canTransport.add(transport.get());    }  }  return mapping;}  }
class C{  public long skipBytes(long n) throws IOException {  return checkInputFile().skipBytes((int)n);}  }
class C{  public static InputStream openStream(File file) throws FileNotFoundException, IOException {  return openStream(file.getAbsolutePath());}  }
class C{  private void revokeCameraPolicy(org.wso2.emm.agent.beans.Operation operation){  if (!operation.isEnabled()) {    devicePolicyManager.setCameraDisabled(deviceAdmin,false);  }}  }
class C{  public int tileYToY(int ty){  return ty * tileHeight + tileGridYOffset;}  }
class C{  public DataTable createPairwiseDataTable(boolean showSymetrical){  return new DataTablePairwiseMatrixExtractionAdapter(this,this.rowNames,this.columnNames,new String[]{firstAttributeName,secondAttributeName,name},showSymetrical);}  }
class C{  public boolean offerFirst(E e){  addFirst(e);  return true;}  }
class C{  @SuppressWarnings("unchecked") public void fillSettings(Properties mapping){  for (  String key : mapping.stringPropertyNames()) {    if (key.equalsIgnoreCase("horizon")) {      horizon=Integer.parseInt(mapping.getProperty(key));    } else     if (key.equalsIgnoreCase("discount")) {      discountFactor=Double.parseDouble(mapping.getProperty(key));    } else     if (key.equalsIgnoreCase("gui")) {      showGUI=Boolean.parseBoolean(mapping.getProperty(key));    } else     if (key.equalsIgnoreCase("user")) {      userInput=mapping.getProperty(key);    } else     if (key.equalsIgnoreCase("speech_user")) {      userSpeech=mapping.getProperty(key);    } else     if (key.equalsIgnoreCase("speech_system")) {      systemSpeech=mapping.getProperty(key);    } else     if (key.equalsIgnoreCase("floor")) {      floor=mapping.getProperty(key);    } else     if (key.equalsIgnoreCase("system")) {      systemOutput=mapping.getProperty(key);    } else     if (key.equalsIgnoreCase("monitor")) {      String[] split=mapping.getProperty(key).split(",");      for (int i=0; i < split.length; i++) {        if (split[i].trim().length() > 0) {          varsToMonitor.add(split[i].trim());        }      }    } else     if (key.equalsIgnoreCase("samples")) {      nbSamples=Integer.parseInt(mapping.getProperty(key));    } else     if (key.equalsIgnoreCase("timeout")) {      maxSamplingTime=Integer.parseInt(mapping.getProperty(key));    } else     if (key.equalsIgnoreCase("discretisation")) {      discretisationBuckets=Integer.parseInt(mapping.getProperty(key));    } else     if (key.equalsIgnoreCase("recording")) {      if (mapping.getProperty(key).trim().equalsIgnoreCase("last")) {        recording=Recording.LAST_INPUT;      } else       if (mapping.getProperty(key).trim().equalsIgnoreCase("all")) {        recording=Recording.ALL;      } else {        recording=Recording.NONE;      }    } else     if (key.equalsIgnoreCase("connect")) {      String[] splits=mapping.getProperty(key).split(",");      for (      String split : splits) {        if (split.contains(":")) {          String address=split.split(":")[0];          int port=Integer.parseInt(split.split(":")[1]);          remoteConnections.put(address,port);        } else {          log.warning("address of remote connection must contain port");        }      }    } else     if (key.equalsIgnoreCase("modules") || key.equalsIgnoreCase("module")) {      String[] split=mapping.getProperty(key).split(",");      for (int i=0; i < split.length; i++) {        if (split[i].trim().length() > 0) {          Class<?> clazz;          try {            clazz=Class.forName(split[i].trim());            for (int j=0; j < clazz.getInterfaces().length; j++) {              if (Module.class.isAssignableFrom(clazz.getInterfaces()[j]) && !modules.contains(clazz)) {                modules.add((Class<Module>)clazz);              }            }            if (!modules.contains(clazz)) {              log.warning("class " + split[i].trim() + " is not a module");              log.fine("interfaces " + Arrays.asList(clazz.getInterfaces()));            }          } catch (          ClassNotFoundException e) {            log.warning("class not found: " + split[i].trim());          }        }      }    } else {      params.put(key,mapping.getProperty(key));    }  }  explicitSettings.addAll(mapping.stringPropertyNames());}  }
class C{  public static BranchCoverageTestFitness createBranchCoverageTestFitness(ControlDependency cd){  return createBranchCoverageTestFitness(cd.getBranch(),cd.getBranchExpressionValue());}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  protected PropertyImpl(){  super();}  }
class C{  public TestResult start(String[] args) throws Exception {  String testCase="";  String method="";  boolean wait=false;  for (int i=0; i < args.length; i++) {    if (args[i].equals("-wait")) {      wait=true;    } else     if (args[i].equals("-c")) {      testCase=extractClassName(args[++i]);    } else     if (args[i].equals("-m")) {      String arg=args[++i];      int lastIndex=arg.lastIndexOf('.');      testCase=arg.substring(0,lastIndex);      method=arg.substring(lastIndex + 1);    } else     if (args[i].equals("-v")) {      System.err.println("JUnit " + Version.id() + " by Kent Beck and Erich Gamma");    } else {      testCase=args[i];    }  }  if (testCase.equals("")) {    throw new Exception("Usage: TestRunner [-wait] testCaseName, where name is the name of the TestCase class");  }  try {    if (!method.equals("")) {      return runSingleMethod(testCase,method,wait);    }    Test suite=getTest(testCase);    return doRun(suite,wait);  } catch (  Exception e) {    throw new Exception("Could not create and run test suite: " + e);  }}  }
class C{  public static int compareVersions(String version1,String version2,String split){  String[] components1=version1.split(split);  String[] components2=version2.split(split);  int length=Math.min(components1.length,components2.length);  for (int i=0; i < length; i++) {    int result=new Integer(components1[i]).compareTo(Integer.parseInt(components2[i]));    if (result != 0) {      return result;    }  }  return Integer.compare(components1.length,components2.length);}  }
class C{  public CourseComponent find(Filter<CourseComponent> matcher){  if (matcher.apply(this))   return this;  if (!isContainer())   return null;  CourseComponent found=null;  for (  CourseComponent c : children) {    found=c.find(matcher);    if (found != null)     return found;  }  return null;}  }
class C{  protected boolean isGzipCompression(){  return usegzip;}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof UnResolvedCallSite) {    UnResolvedCallSite cs=(UnResolvedCallSite)obj;    return methodRef.equals(cs.methodRef) && bcIndex == cs.bcIndex;  } else {    return false;  }}  }
class C{  @Override public String toString(){  return "cudaDeviceProp[" + createString(",") + "]";}  }
class C{  private void arrangeAgentDeparture(final MobsimAgent agent){  double now=this.getSimTimer().getTimeOfDay();  String mode=agent.getMode();  Id<Link> linkId=agent.getCurrentLinkId();  events.processEvent(new PersonDepartureEvent(now,agent.getId(),linkId,mode));  for (  DepartureHandler departureHandler : this.departureHandlers) {    if (departureHandler.handleDeparture(now,agent,linkId)) {      return;    }  }}  }
class C{  private void remove(){  before.after=after;  after.before=before;}  }
class C{  public void clearBookmarkedURLS(){  bookmarkedURLS.clear();}  }
class C{  public static DoubleMatrix[] jblas_fullSVD(double[][] A){  return org.jblas.Singular.fullSVD(new DoubleMatrix(A));}  }
class C{  private void leaveBusy(){  busyLock.readLock().unlock();}  }
class C{  private void isiDeleteFS(IsilonApi isi,FileDeviceInputOutput args) throws IsilonException {  isiDeleteExports(isi,args);  isiDeleteShares(isi,args);  if (args.getFsExtensions() != null && args.getFsExtensions().containsKey(QUOTA)) {    isi.deleteQuota(args.getFsExtensions().get(QUOTA));    args.getFsExtensions().remove(QUOTA);  }  isiDeleteSnapshots(isi,args);  isiDeleteQuotaDirs(isi,args);  isi.deleteDir(args.getFsMountPath(),true);  isiDeleteSnapshotSchedules(isi,args);}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    drawHorizontalItem(g2,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState,pass);  } else   if (orientation == PlotOrientation.VERTICAL) {    drawVerticalItem(g2,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState,pass);  }}  }
class C{  public boolean isMissingDataNotificationEnabled(){  return missingDataNotificationEnabled;}  }
class C{  public static TranBlob createBlob(InputStream stream) throws IOException {  return new TranBlob(new BlobImpl(stream,stream.available()),false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:13.678 -0400",hash_original_method="BC19E5D6974D4B9B20F25E42BD4200C9",hash_generated_method="862EAF4E6CE0FFE06A4D15D2B126DC2E") protected ForkJoinWorkerThread(ForkJoinPool pool){  super("aForkJoinWorkerThread");  this.pool=pool;  this.workQueue=pool.registerWorker(this);}  }
class C{  public static String convertISO8601DurationToNormalTime(String isoTime){  String formattedTime=new String();  if (isoTime.contains("H") && isoTime.contains("M") && isoTime.contains("S")) {    String hours=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('H'));    String minutes=isoTime.substring(isoTime.indexOf('H') + 1,isoTime.indexOf('M'));    String seconds=isoTime.substring(isoTime.indexOf('M') + 1,isoTime.indexOf('S'));    formattedTime=hours + ":" + formatTo2Digits(minutes)+ ":"+ formatTo2Digits(seconds);  } else   if (!isoTime.contains("H") && isoTime.contains("M") && isoTime.contains("S")) {    String minutes=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('M'));    String seconds=isoTime.substring(isoTime.indexOf('M') + 1,isoTime.indexOf('S'));    formattedTime=minutes + ":" + formatTo2Digits(seconds);  } else   if (isoTime.contains("H") && !isoTime.contains("M") && isoTime.contains("S")) {    String hours=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('H'));    String seconds=isoTime.substring(isoTime.indexOf('H') + 1,isoTime.indexOf('S'));    formattedTime=hours + ":00:" + formatTo2Digits(seconds);  } else   if (isoTime.contains("H") && isoTime.contains("M") && !isoTime.contains("S")) {    String hours=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('H'));    String minutes=isoTime.substring(isoTime.indexOf('H') + 1,isoTime.indexOf('M'));    formattedTime=hours + ":" + formatTo2Digits(minutes)+ ":00";  } else   if (!isoTime.contains("H") && !isoTime.contains("M") && isoTime.contains("S")) {    String seconds=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('S'));    formattedTime="0:" + formatTo2Digits(seconds);  } else   if (!isoTime.contains("H") && isoTime.contains("M") && !isoTime.contains("S")) {    String minutes=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('M'));    formattedTime=minutes + ":00";  } else   if (isoTime.contains("H") && !isoTime.contains("M") && !isoTime.contains("S")) {    String hours=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('H'));    formattedTime=hours + ":00:00";  }  return formattedTime;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void assertEqualsToString(String expected,TreeLayout<StringTreeNode> actual){  String actualString=toString(actual);  assertEquals(expected,actualString);}  }
class C{  @Override public ODataResponse readEntitySimpleProperty(GetSimplePropertyUriInfo uri_info,String content_type) throws ODataException {  Object value=readPropertyValue(uri_info);  EdmProperty target=uri_info.getPropertyPath().get(uri_info.getPropertyPath().size() - 1);  return EntityProvider.writeProperty(content_type,target,value);}  }
class C{  @Bean public CacheManager listAdministratorsCacheManager(){  CacheBuilder<Object,Object> cacheBuilder=CacheBuilder.newBuilder().expireAfterWrite(1,TimeUnit.MINUTES).maximumSize(1000);  GuavaCacheManager cacheManager=new GuavaCacheManager("listAdministrators");  cacheManager.setCacheBuilder(cacheBuilder);  return cacheManager;}  }
class C{  public void cacheUnit(UnitInterface unit){  allUnits.add(unit);}  }
class C{  public void cancel(){  mCancel=true;}  }
class C{  public String toCommaSeparatedString(){  String result="";  for (int i=0; i < contents.size(); i++) {    if (result.equals("")) {      result=contents.elementAt(i);    } else {      result=result + ", " + contents.elementAt(i);    }  }  return result;}  }
class C{  public void start() throws BaleenException {  if (!isRunning()) {    LOGGER.debug("Starting pipeline {}",name);    try {      if (engine.isProcessing()) {        LOGGER.info("Resuming pipeline {}",name);        engine.resume();      } else {        LOGGER.info("Beginning processing on pipeline {}",name);        engine.process();      }      metrics.getCounter("started").inc();    } catch (    ResourceInitializationException e) {      throw new BaleenException("Error starting pipeline",e);    }  } else {    LOGGER.debug("Pipeline {} is already running, and so cannot be started",name);  }}  }
class C{  public XACacheLoaderTxn(String str){  this.tableName=str;}  }
class C{  public static TestConfiguration buildDefaultConfiguration(String testSourcePath,Iterable<File> testSourceFiles,Iterable<String> processors,List<String> options,boolean shouldEmitDebugInfo){  String classPath=getDefaultClassPath();  File outputDir=getOutputDirFromProperty();  TestConfigurationBuilder builder=getDefaultConfigurationBuilder(testSourcePath,outputDir,classPath,testSourceFiles,processors,options,shouldEmitDebugInfo);  return builder.validateThenBuild(true);}  }
class C{  public RenderableLayer(){}  }
class C{  public static MethodScope make(Method m){  return new MethodScope(m);}  }
class C{  @Override public ResultSet executeQuery() throws SQLException {  try {    int id=getNextId(TraceObject.RESULT_SET);    if (isDebugEnabled()) {      debugCodeAssign("ResultSet",TraceObject.RESULT_SET,id,"executeQuery()");    }    batchIdentities=null;synchronized (session) {      checkClosed();      closeOldResultSet();      ResultInterface result;      boolean scrollable=resultSetType != ResultSet.TYPE_FORWARD_ONLY;      boolean updatable=resultSetConcurrency == ResultSet.CONCUR_UPDATABLE;      try {        setExecutingStatement(command);        result=command.executeQuery(maxRows,scrollable);      }  finally {        setExecutingStatement(null);      }      resultSet=new JdbcResultSet(conn,this,result,id,closedByResultSet,scrollable,updatable,cachedColumnLabelMap);    }    return resultSet;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void delete(Project project){  if (!security.hasRight(AccessRight.DELETE_PROJECT) && !security.isOwner(project)) {    messages.warn("You do not have permission to delete this project.");  } else {    try {      new ProjectDao().delete(project);      messages.info("Project " + project.getName() + " has been removed.");      projectEvent.fire(new ModifiedProjectMessage(project,this));    } catch (    Exception e) {    }  }}  }
class C{  public static void logResult(ResultObject resultObject){  logResult(resultObject,out);}  }
class C{  public void add(final Object eKey,final Object element){  if ((!_elements.containsKey(eKey)) && (getType() != TYPE_UNSYNCHRONIZED_MOV)) {    _elementOrder.add(eKey);  }  _elements.put(eKey,element);}  }
class C{  private boolean cleanupStaleProtectionSetVolumes(URI protectionSetURI){  ProtectionSet protectionSet=dbClient.queryObject(ProtectionSet.class,protectionSetURI);  boolean protectionSetRemoved=false;  if (protectionSet != null) {    StringSet protectionSetVolumes=protectionSet.getVolumes();    StringSet volumesToRemove=new StringSet();    if (protectionSetVolumes != null) {      Iterator<String> volumesItr=protectionSetVolumes.iterator();      while (volumesItr.hasNext()) {        String volumeUriStr=volumesItr.next();        Volume volume=dbClient.queryObject(Volume.class,URI.create(volumeUriStr));        if (volume == null) {          volumesToRemove.add(volumeUriStr);          log.info("Removing stale Volume {} referenced by ProtectionSet {}.",volumeUriStr,protectionSet.getId());        }      }      if (protectionSetVolumes.size() == volumesToRemove.size()) {        log.info("ProtectionSet {} has no volume references so it is being removed.",protectionSet.getId());        dbClient.markForDeletion(protectionSet);        protectionSetRemoved=true;      } else {        protectionSetVolumes.removeAll(volumesToRemove);        dbClient.persistObject(protectionSet);      }    }  }  return protectionSetRemoved;}  }
class C{  public void testDoubleSignedZero() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new DoubleDocValuesField("value",+0D));  doc.add(newStringField("value","+0",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoubleDocValuesField("value",-0D));  doc.add(newStringField("value","-0",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.DOUBLE));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  assertEquals("-0",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("+0",searcher.doc(td.scoreDocs[1].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public static void vibrate(Context context,int vibrateMilliSec){  Vibrator v=(Vibrator)context.getSystemService(Context.VIBRATOR_SERVICE);  v.vibrate(vibrateMilliSec);}  }
class C{  public static void main(String[] args) throws IOException {  Source source;  if (args.length == 0) {    source=Source.newBuilder(new InputStreamReader(System.in)).name("<stdin>").mimeType(SLLanguage.MIME_TYPE).build();  } else {    source=Source.newBuilder(new File(args[0])).build();  }  executeSource(source,System.in,System.out);}  }
class C{  public boolean isGroupChatAutoAccepted(){  return readBoolean(RcsSettingsData.AUTO_ACCEPT_GROUP_CHAT);}  }
class C{  public static double beta(double a,double b){  double try_x;  double try_y;  do {    try_x=Math.pow(raw(),1 / a);    try_y=Math.pow(raw(),1 / b);  } while ((try_x + try_y) > 1);  return try_x / (try_x + try_y);}  }
class C{  public String toEPL(EPStatementFormatter formatter){  StringWriter writer=new StringWriter();  toEPL(formatter,writer);  return writer.toString();}  }
class C{  public VerletParticle3D(ReadonlyVec3D v,float w){  this(v.x(),v.y(),v.z(),w);}  }
class C{  public AsyncHttpClient(int httpPort,int httpsPort){  this(false,httpPort,httpsPort);}  }
class C{  public static void komlToBinary(String koml,String binary) throws Exception {  Object o;  checkKOML();  o=KOML.read(koml);  if (o == null)   throw new Exception("Failed to deserialize object from XML file '" + koml + "'!");  writeBinary(binary,o);}  }
class C{  protected Location(LocationPK locationId){  Assert.notNull(locationId,"Creation of Location with locationId null");  this.locationId=locationId;}  }
class C{  @Override protected void onPause(){  super.onPause();  if (mPreview != null) {    mPreview.stop();  }}  }
class C{  protected void mergeFeatures(KMLAbstractContainer sourceContainer){  List<KMLAbstractFeature> featuresListCopy=new ArrayList<KMLAbstractFeature>(this.getFeatures().size());  Collections.copy(featuresListCopy,this.getFeatures());  for (  KMLAbstractFeature sourceFeature : sourceContainer.getFeatures()) {    String id=sourceFeature.getId();    if (!WWUtil.isEmpty(id)) {      for (      KMLAbstractFeature existingFeature : featuresListCopy) {        String currentId=existingFeature.getId();        if (!WWUtil.isEmpty(currentId) && currentId.equals(id))         this.getFeatures().remove(existingFeature);      }    }    this.getFeatures().add(sourceFeature);  }}  }
class C{  public ChooserIntentBuilder priority(String... packageNames){  mIntent.putExtra(BottomSheetChooserActivity.EXTRA_PRIORITY_PACKAGES,new ArrayList<>(Arrays.asList(packageNames)));  return this;}  }
class C{  public static _ItemType fromString(final String value) throws SOAPSerializationException {  return (_ItemType)Enumeration.fromString(value,_ItemType.VALUES_TO_INSTANCES);}  }
class C{  public void registerElementNode(double version,String uri,String localName,Class<? extends FXGNode> nodeClass){  scanner.registerElementNode(version,uri,localName,nodeClass);}  }
class C{  @SuppressWarnings("deprecation") private View makeAndAddView(int position,int childrenBottomOrTop,boolean flow,boolean selected){  View child;  int childrenLeft;  if (!mDataChanged) {    child=mRecycler.getActiveView(position);    if (child != null) {      if (ViewDebug.TRACE_RECYCLER) {        ViewDebug.trace(child,ViewDebug.RecyclerTraceType.RECYCLE_FROM_ACTIVE_HEAP,position,getChildCount());      }      childrenLeft=getItemLeft(position);      setupChild(child,position,childrenBottomOrTop,flow,childrenLeft,selected,true);      return child;    }  }  onItemAddedToList(position,flow);  childrenLeft=getItemLeft(position);  child=obtainView(position,mIsScrap);  setupChild(child,position,childrenBottomOrTop,flow,childrenLeft,selected,mIsScrap[0]);  return child;}  }
class C{  private byte[] generateNonce(){  byte[] nonce=new byte[32];  SecureRandom secureRandom=new SecureRandom();  secureRandom.nextBytes(nonce);  return nonce;}  }
class C{  public void withdraw(double amount){  if (amount < getBalance()) {    setBalance(getBalance() - amount);  } else   System.out.println("Error! Savings account overdrawn transtaction rejected");}  }
class C{  public static int orientationIndex(Coordinate p1,Coordinate p2,Coordinate q){  int index=orientationIndexFilter(p1,p2,q);  if (index <= 1)   return index;  DD dx1=DD.valueOf(p2.x).selfAdd(-p1.x);  DD dy1=DD.valueOf(p2.y).selfAdd(-p1.y);  DD dx2=DD.valueOf(q.x).selfAdd(-p2.x);  DD dy2=DD.valueOf(q.y).selfAdd(-p2.y);  return dx1.selfMultiply(dy2).selfSubtract(dy1.selfMultiply(dx2)).signum();}  }
class C{  public static byte[] accDecoderPktOpsMode(int addr,int active,int outputChannel,int cvNum,int data){  if (addr < 1 || addr > 511) {    log.error("invalid address " + addr);    throw new IllegalArgumentException();  }  if (active < 0 || active > 1) {    log.error("invalid active (C) bit " + addr);    return null;  }  if (outputChannel < 0 || outputChannel > 7) {    log.error("invalid output channel " + addr);    return null;  }  if (cvNum < 1 || cvNum > 1023) {    log.error("invalid CV number " + cvNum);    return null;  }  if (data < 0 || data > 255) {    log.error("invalid data " + data);    return null;  }  int lowAddr=addr & 0x3F;  int highAddr=((~addr) >> 6) & 0x07;  int lowCVnum=(cvNum - 1) & 0xFF;  int highCVnum=((cvNum - 1) >> 8) & 0x03;  byte[] retVal=new byte[6];  retVal[0]=(byte)(0x80 | lowAddr);  retVal[1]=(byte)(0x80 | (highAddr << 4) | (active << 3)| outputChannel & 0x07);  retVal[2]=(byte)(0xEC | highCVnum);  retVal[3]=(byte)(lowCVnum);  retVal[4]=(byte)(0xFF & data);  retVal[5]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]^ retVal[3]^ retVal[4]);  return retVal;}  }
class C{  static private byte[] toBytes(Vector octs){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  for (int i=0; i != octs.size(); i++) {    try {      DEROctetString o=(DEROctetString)octs.elementAt(i);      bOut.write(o.getOctets());    } catch (    ClassCastException e) {      throw new IllegalArgumentException(octs.elementAt(i).getClass().getName() + " found in input should only contain DEROctetString");    }catch (    IOException e) {      throw new IllegalArgumentException("exception converting octets " + e.toString());    }  }  return bOut.toByteArray();}  }
class C{  public static double computeArea(Point a,Point b){  if (a.getTimestamp() == b.getTimestamp()) {    return 0;  }  if (a.getTimestamp() > b.getTimestamp()) {    return computeArea(b,a);  }  final double x1=a.getTimestamp();  final double x2=b.getTimestamp();  final double y1=a.getValue();  final double y2=b.getValue();  if (sameSign(y1,y2)) {    final double area=areaPositivePoints(x1,Math.abs(y1),x2,Math.abs(y2));    return Math.copySign(area,y1);  } else {    final double interceptsX=computeInterceptsX(x1,x2,y1,y2);    final double area1=areaPositivePoints(x1,Math.abs(y1),interceptsX,0);    final double area2=areaPositivePoints(interceptsX,0,x2,Math.abs(y2));    return Math.copySign(area1,y1) + Math.copySign(area2,y2);  }}  }
class C{  public static CommitLogBucket loadBucket(Key<CommitLogBucket> bucketKey){  CommitLogBucket bucket=ofy().load().key(bucketKey).now();  return bucket == null ? new CommitLogBucket.Builder().setBucketNum(bucketKey.getId()).build() : bucket;}  }
class C{  private void selectAttributeSetInstance(){  int m_warehouse_id=getM_Warehouse_ID();  int m_product_id=getM_Product_ID();  if (m_product_id <= 0)   return;  MProduct product=MProduct.get(getCtx(),m_product_id);  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + " - " + wh.get_Translation(MWarehouse.COLUMNNAME_Name);  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);  if (pai.getM_AttributeSetInstance_ID() != -1) {    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));  } else {    fAttrSetInstance_ID.setValue(Integer.valueOf(0));  }}  }
class C{  public void reallocateMigratingInContainers(){  for (  Container container : getContainersMigratingIn()) {    if (!getContainerList().contains(container)) {      getContainerList().add(container);    }    if (!getContainerScheduler().getContainersMigratingIn().contains(container.getUid())) {      getContainerScheduler().getContainersMigratingIn().add(container.getUid());    }    getContainerRamProvisioner().allocateRamForContainer(container,container.getCurrentRequestedRam());    getContainerBwProvisioner().allocateBwForContainer(container,container.getCurrentRequestedBw());    getContainerScheduler().allocatePesForContainer(container,container.getCurrentRequestedMips());    setSize(getSize() - container.getSize());  }}  }
class C{  public Matrix(Matrix copy){  if (copy == null) {    return;  }  scaleX=copy.scaleX;  scaleY=copy.scaleY;  skew0=copy.skew0;  skew1=copy.skew1;  translateX=copy.translateX;  translateY=copy.translateY;}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel dataModel=getDataEditor().getSelectedDataModel();  DataSet dataSet=(DataSet)dataModel;  List<Node> variables=new LinkedList<>();  for (int j=0; j < dataSet.getNumColumns(); j++) {    variables.add(dataSet.getVariable(j));  }  DataSet newDataSet=new ColtDataSet(0,variables);  int newRow=-1;  ROWS:   for (int i=0; i < dataSet.getNumRows(); i++) {    for (int j=0; j < dataSet.getNumColumns(); j++) {      Node variable=dataSet.getVariable(j);      if (((Variable)variable).isMissingValue(dataSet.getObject(i,j))) {        continue ROWS;      }    }    newRow++;    for (int j=0; j < dataSet.getNumColumns(); j++) {      newDataSet.setObject(newRow,j,dataSet.getObject(i,j));    }  }  DataModelList list=new DataModelList();  list.add(newDataSet);  getDataEditor().reset(list);  getDataEditor().selectFirstTab();}  }
class C{  public final double rootRelativeSquaredError(){  if (m_NoPriors) {    return Double.NaN;  }  return 100.0 * rootMeanSquaredError() / rootMeanPriorSquaredError();}  }
class C{  public MatFileFilter(String[] names){  this();  for (  String name : names) {    addArrayName(name);  }}  }
class C{  public static void create(Context context,int id,CharSequence title,CharSequence content,int smallIcon,boolean ongoing,boolean autoCancel,PendingIntent pendingIntent){  create(context,id,title,content,null,smallIcon,smallIcon,ongoing,autoCancel,Notification.VISIBILITY_PUBLIC,pendingIntent);}  }
class C{  protected void clearEditInfo(){  m_editFlag=FolderEditFlag.NONE;}  }
class C{  public void move(java.awt.event.MouseEvent e){}  }
class C{  public void addProtocolLines(String scriptName,Reader reader,ProtocolInteractor session) throws Exception {  final BufferedReader bufferedReader;  if (reader instanceof BufferedReader) {    bufferedReader=(BufferedReader)reader;  } else {    bufferedReader=new BufferedReader(reader);  }  doAddProtocolLines(session,scriptName,bufferedReader);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private static void encodePatterns(IPath[] patterns,String tag,Map parameters){  if (patterns != null && patterns.length > 0) {    StringBuffer rule=new StringBuffer(10);    for (int i=0, max=patterns.length; i < max; i++) {      if (i > 0)       rule.append('|');      rule.append(patterns[i]);    }    parameters.put(tag,String.valueOf(rule));  }}  }
class C{  public synchronized AddressbookEntry remove(String name){  AddressbookEntry removedEntry=entries.remove(StringUtil.toLowerCase(name));  if (removedEntry != null) {    saveOnChange();  }  return removedEntry;}  }
class C{  public WrongExpectedVersionException(String message){  super(message);}  }
class C{  public Filter removeAttribute(String attribute){  try {    remove(attribute);  } catch (  NullPointerException exc) {  }  return (this);}  }
class C{  public static double entropyConditionedOnRows(double[][] train,double[][] test,double numClasses){  double returnValue=0, trainSumForRow, testSumForRow, testSum=0;  for (int i=0; i < test.length; i++) {    trainSumForRow=0;    testSumForRow=0;    for (int j=0; j < test[0].length; j++) {      returnValue-=test[i][j] * Math.log(train[i][j] + 1);      trainSumForRow+=train[i][j];      testSumForRow+=test[i][j];    }    testSum=testSumForRow;    returnValue+=testSumForRow * Math.log(trainSumForRow + numClasses);  }  return returnValue / (testSum * log2);}  }
class C{  public SAML2StatusCodeInvalidException(){}  }
class C{  public static FillMode parseFillMode(FXGNode node,String value,String name,FillMode defaultValue){  if (FXG_FILLMODE_CLIP_VALUE.equals(value)) {    return FillMode.CLIP;  } else   if (FXG_FILLMODE_REPEAT_VALUE.equals(value)) {    return FillMode.REPEAT;  } else   if (FXG_FILLMODE_SCALE_VALUE.equals(value)) {    return FillMode.SCALE;  } else {    if (((AbstractFXGNode)node).isVersionGreaterThanCompiler()) {      FXGLog.getLogger().log(FXGLogger.WARN,"DefaultAttributeValue",null,((AbstractFXGNode)node).getDocumentName(),node.getStartLine(),node.getStartColumn(),defaultValue,name);      return defaultValue;    } else {      throw new FXGException(node.getStartLine(),node.getStartColumn(),"UnknownFillMode",value);    }  }}  }
class C{  private StringPart createStringPart(final String name,final String value){  final StringPart stringPart=new StringPart(name,value);  stringPart.setTransferEncoding(null);  stringPart.setContentType(null);  return stringPart;}  }
class C{  protected void afterShow(){}  }
class C{  boolean ancestorIsOk(ElemTemplateElement child){  while (child.getParentElem() != null && !(child.getParentElem() instanceof ElemExsltFunction)) {    ElemTemplateElement parent=child.getParentElem();    if (parent instanceof ElemExsltFuncResult || parent instanceof ElemVariable || parent instanceof ElemParam|| parent instanceof ElemMessage)     return true;    child=parent;  }  return false;}  }
class C{  public static void removeJavaNoOpLogger(Collection<Handler> rmvHnds){  Logger log=Logger.getLogger("");  for (  Handler h : log.getHandlers())   log.removeHandler(h);  if (!F.isEmpty(rmvHnds)) {    for (    Handler h : rmvHnds)     log.addHandler(h);  }}  }
class C{  protected void validate() throws IllegalStateException {}  }
class C{  @Override public void beforeFileMovement(@NotNull VirtualFileMoveEvent event){  MasonSettings masonSettings=MasonSettings.getInstance(getProject());  List<VirtualFile> componentsRoots=masonSettings.getComponentsRootsVirtualFiles();  if (componentsRoots.isEmpty()) {    return;  }  VirtualFile movedFile=event.getFile();  Set<VirtualFile> rootsSet=new THashSet<VirtualFile>(componentsRoots);  if (movedFile.isDirectory()) {    if (VfsUtil.isUnder(movedFile,rootsSet) || containsAtLeastOneFile(movedFile,componentsRoots)) {      movedFile.putUserData(FORCE_REINDEX,true);    }  } else   if (movedFile.getFileType() instanceof MasonFileType) {    if (VfsUtil.isUnder(movedFile,rootsSet)) {      movedFile.putUserData(FORCE_REINDEX,true);    }  }}  }
class C{  public boolean isFirstRun(){  return mIsFirstRun;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("Differences:[ size: " + size());  sb.append(StringUtil.getNewlineStr());  if (size() > 0) {    for (int i=0; i < size(); i++) {      sb.append(get(i).toString());      sb.append(StringUtil.getNewlineStr());    }  } else {    sb.append("XML Nodes are identical, No differences found");  }  sb.append(StringUtil.getNewlineStr());  sb.append("]");  return sb.toString();}  }
class C{  private void checkSoftwareInterruptGeneration(){  if (((getStatusIM() & 0b11) == 1) && ((getCauseIP() & 0b11) == 1) & (isStatusIESet())) {    if (interruptController != null) {      interruptController.request(new TxInterruptRequest(Type.SOFTWARE_INTERRUPT));    }  }}  }
class C{  public void verifyNewVolumesCanBeCreatedInConsistencyGroup(BlockConsistencyGroup consistencyGroup,List<Volume> cgVolumes){  if (!canConsistencyGroupBeModified(consistencyGroup,cgVolumes)) {    throw APIException.badRequests.cantCreateNewVolumesInCGActiveFullCopies(consistencyGroup.getLabel());  }}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {default :    return new Token();}}  }
class C{  public static long allocatePool(){  long poolPtr=GridUnsafe.allocateMemory(POOL_HDR_LEN);  GridUnsafe.setMemory(poolPtr,POOL_HDR_LEN,(byte)0);  flags(poolPtr + POOL_HDR_OFF_MEM_1,FLAG_POOLED);  flags(poolPtr + POOL_HDR_OFF_MEM_2,FLAG_POOLED);  flags(poolPtr + POOL_HDR_OFF_MEM_3,FLAG_POOLED);  return poolPtr;}  }
class C{  private int hashUri(String path){  Pattern pattern=Pattern.compile("entries/([^/?]+)");  Matcher m=pattern.matcher(path);  return m.find() ? m.group(0).hashCode() : 0;}  }
class C{  public NecronomiconInfusionRitual(String unlocalizedName,int bookType,int dimension,float requiredEnergy,ItemStack item,Object sacrifice,Object... offerings){  this(unlocalizedName,bookType,dimension,requiredEnergy,false,item,sacrifice,offerings);}  }
class C{  public static DefaultListAdapter adapt(List list,RichObjectWrapper wrapper){  return list instanceof AbstractSequentialList ? new DefaultListAdapterWithCollectionSupport(list,wrapper) : new DefaultListAdapter(list,wrapper);}  }
class C{  private int[] multWithElement(int[] a,int element){  int degree=computeDegree(a);  if (degree == -1 || element == 0) {    return new int[1];  }  if (element == 1) {    return IntUtils.clone(a);  }  int[] result=new int[degree + 1];  for (int i=degree; i >= 0; i--) {    result[i]=field.mult(a[i],element);  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:23.611 -0400",hash_original_method="6B975B236D38733D8D97A87E4CBCD8AE",hash_generated_method="652F22B5F8BD6D8D5D9F214EE134C943") private void positionChildren(int menuWidth,int menuHeight){  if (mHorizontalDivider != null)   mHorizontalDividerRects.clear();  if (mVerticalDivider != null)   mVerticalDividerRects.clear();  final int numRows=mLayoutNumRows;  final int numRowsMinus1=numRows - 1;  final int numItemsForRow[]=mLayout;  int itemPos=0;  View child;  IconMenuView.LayoutParams childLayoutParams=null;  float itemLeft;  float itemTop=0;  float itemWidth;  final float itemHeight=(menuHeight - mHorizontalDividerHeight * (numRows - 1)) / (float)numRows;  for (int row=0; row < numRows; row++) {    itemLeft=0;    itemWidth=(menuWidth - mVerticalDividerWidth * (numItemsForRow[row] - 1)) / (float)numItemsForRow[row];    for (int itemPosOnRow=0; itemPosOnRow < numItemsForRow[row]; itemPosOnRow++) {      child=getChildAt(itemPos);      child.measure(MeasureSpec.makeMeasureSpec((int)itemWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)itemHeight,MeasureSpec.EXACTLY));      childLayoutParams=(IconMenuView.LayoutParams)child.getLayoutParams();      childLayoutParams.left=(int)itemLeft;      childLayoutParams.right=(int)(itemLeft + itemWidth);      childLayoutParams.top=(int)itemTop;      childLayoutParams.bottom=(int)(itemTop + itemHeight);      itemLeft+=itemWidth;      itemPos++;      if (mVerticalDivider != null) {        mVerticalDividerRects.add(new Rect((int)itemLeft,(int)itemTop,(int)(itemLeft + mVerticalDividerWidth),(int)(itemTop + itemHeight)));      }      itemLeft+=mVerticalDividerWidth;    }    if (childLayoutParams != null) {      childLayoutParams.right=menuWidth;    }    itemTop+=itemHeight;    if ((mHorizontalDivider != null) && (row < numRowsMinus1)) {      mHorizontalDividerRects.add(new Rect(0,(int)itemTop,menuWidth,(int)(itemTop + mHorizontalDividerHeight)));      itemTop+=mHorizontalDividerHeight;    }  }}  }
class C{  public String value(){  String value=this.config.value(this.cluster);  if (value.isEmpty()) {    value=this.cluster;  }  return value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:00.016 -0500",hash_original_method="DB6BBF789AE77B5AE6E5E06EC389C87F",hash_generated_method="0C5447B0DE727866D45AF7AE8D3E7ED1") public KeyUsage(byte[] encoding) throws IOException {  super(encoding);  this.keyUsage=(boolean[])ASN1.decode(encoding);}  }
class C{  public final void partChannel(String channel,String reason){  this.sendRawLine("PART " + channel + " :"+ reason);}  }
class C{  public void afterBean(final @Observes AfterBeanDiscovery afterBeanDiscovery,BeanManager beanManager){  afterBeanDiscovery.addBean(new ApplicationProducer());  afterBeanDiscovery.addBean(new ApplicationMapProducer());  afterBeanDiscovery.addBean(new CompositeComponentProducer());  afterBeanDiscovery.addBean(new ComponentProducer());  afterBeanDiscovery.addBean(new FlashProducer());  afterBeanDiscovery.addBean(new FlowMapProducer());  afterBeanDiscovery.addBean(new HeaderMapProducer());  afterBeanDiscovery.addBean(new HeaderValuesMapProducer());  afterBeanDiscovery.addBean(new InitParameterMapProducer());  afterBeanDiscovery.addBean(new RequestParameterMapProducer());  afterBeanDiscovery.addBean(new RequestParameterValuesMapProducer());  afterBeanDiscovery.addBean(new RequestProducer());  afterBeanDiscovery.addBean(new RequestMapProducer());  afterBeanDiscovery.addBean(new ResourceHandlerProducer());  afterBeanDiscovery.addBean(new ExternalContextProducer());  afterBeanDiscovery.addBean(new FacesContextProducer());  afterBeanDiscovery.addBean(new RequestCookieMapProducer());  afterBeanDiscovery.addBean(new SessionProducer());  afterBeanDiscovery.addBean(new SessionMapProducer());  afterBeanDiscovery.addBean(new ViewMapProducer());  afterBeanDiscovery.addBean(new ViewProducer());  afterBeanDiscovery.addBean(new DataModelClassesMapProducer());  for (  Type type : managedPropertyTargetTypes) {    afterBeanDiscovery.addBean(new ManagedPropertyProducer(type,beanManager));  }}  }
class C{  public boolean isExternal(){  return external;}  }
class C{  public static boolean isWifiEnabled(Context context){  WifiManager wifiManager=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);  return (wifiManager != null && wifiManager.isWifiEnabled());}  }
class C{  public boolean isStatic(){  unsupportedIn2();  return this.isStatic;}  }
class C{  public boolean isEnforcesTodaysHistoricFixings(){  return enforcesTodaysHistoricFixings;}  }
class C{  public ListEditor(Vector<String> model){  this.listeners=new Vector<ListDataListener>();  setLayout(new GridBagLayout());  editor=new LimeTextField("");  editor.setColumns(DEFAULT_COLUMNS);  editor.setPreferredSize(new Dimension(500,20));  editor.setMaximumSize(new Dimension(500,20));  GridBagConstraints gbc=new GridBagConstraints();  gbc.fill=GridBagConstraints.BOTH;  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.weightx=1;  add(editor,gbc);  Action addAction=new AddAction();  addButton=new JButton(addAction);  GUIUtils.bindKeyToAction(editor,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),addAction);  gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.insets=new Insets(0,ButtonRow.BUTTON_SEP,0,0);  add(addButton,gbc);  Action removeAction=new RemoveAction();  removeButton=new JButton(removeAction);  removeButton.setEnabled(false);  gbc.gridwidth=GridBagConstraints.REMAINDER;  add(removeButton,gbc);  list=new JList<Object>();  list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  list.addListSelectionListener(new ListListener());  GUIUtils.bindKeyToAction(list,KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),removeAction);  JScrollPane scrollPane=new JScrollPane(list,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);  setModel(model);  scrollPane.setPreferredSize(new Dimension(500,50));  scrollPane.setMaximumSize(new Dimension(500,50));  gbc=new GridBagConstraints();  gbc.insets=new Insets(ButtonRow.BUTTON_SEP,0,0,0);  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.fill=GridBagConstraints.BOTH;  gbc.weighty=1;  add(scrollPane,gbc);}  }
class C{  public void complainAboutUnknownAttributes(String elementXpath,String... knownAttributes){  SortedMap<String,SortedSet<String>> problems=new TreeMap<>();  NodeList nodeList=getNodeList(elementXpath,false);  for (int i=0; i < nodeList.getLength(); ++i) {    Element element=(Element)nodeList.item(i);    Set<String> unknownAttributes=getUnknownAttributes(element,knownAttributes);    if (null != unknownAttributes) {      String elementName=element.getNodeName();      SortedSet<String> allUnknownAttributes=problems.get(elementName);      if (null == allUnknownAttributes) {        allUnknownAttributes=new TreeSet<>();        problems.put(elementName,allUnknownAttributes);      }      allUnknownAttributes.addAll(unknownAttributes);    }  }  if (problems.size() > 0) {    StringBuilder message=new StringBuilder();    for (    Map.Entry<String,SortedSet<String>> entry : problems.entrySet()) {      if (message.length() > 0) {        message.append(", ");      }      message.append('<');      message.append(entry.getKey());      for (      String attributeName : entry.getValue()) {        message.append(' ');        message.append(attributeName);        message.append("=\"...\"");      }      message.append('>');    }    message.insert(0,"Unknown attribute(s) on element(s): ");    String msg=message.toString();    SolrException.log(log,msg);    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,msg);  }}  }
class C{  @Override public double variance(){  return Double.NaN;}  }
class C{  private static CInliningResult inlineFunctionSilently(final JFrame parent,final IViewContainer viewContainer,final ZyGraph graph,final INaviCodeNode node,final INaviInstruction instruction,final INaviFunction function){  final INaviFunction inlineFunction=prepareFunctionInlining(parent,node,instruction,function,viewContainer);  if (inlineFunction == null) {    return null;  } else   if (inlineFunction.getBasicBlockCount() == 0) {    return null;  } else {    try {      if (!inlineFunction.isLoaded()) {        inlineFunction.load();      }      return CInliningHelper.inlineCodeNode(graph.getRawView(),node,instruction,inlineFunction);    } catch (    final CouldntLoadDataException e) {      exceptionDialog(parent,inlineFunction,e);    }  }  return null;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  @Nullable static ValidationResult create(final CommandLineFile file){  final Command command=file.findRealCommand();  if (command == null) {    return null;  }  final ValidationResultImpl validationLayout=new ValidationResultImpl(command);  file.acceptChildren(validationLayout);  return validationLayout;}  }
class C{  public boolean isConsumesForecast(){  Object oo=get_Value(COLUMNNAME_IsConsumesForecast);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static SnmpEngineId createEngineId(InetAddress address,int port) throws IllegalArgumentException {  int suniana=42;  if (address == null)   throw new IllegalArgumentException("InetAddress is null.");  return createEngineId(address,port,suniana);}  }
class C{  private void recordStats(){  long finalizationPendingCount=memoryMXBean.getObjectPendingFinalizationCount();  MemoryUsage heap=memoryMXBean.getHeapMemoryUsage();  MemoryUsage nonHeap=memoryMXBean.getNonHeapMemoryUsage();  Map<String,Long> metrics=Maps.newHashMap();  metrics.put("pending-finalization-count",finalizationPendingCount);  recordMemoryUsage("heap.total",heap,metrics);  recordMemoryUsage("nonheap.total",nonHeap,metrics);  for (  GarbageCollectorMXBean gcMXBean : gcMXBeans) {    String gcName=gcMXBean.getName().replace(" ","_");    metrics.put("gc." + gcName + ".count",gcMXBean.getCollectionCount());    final long time=gcMXBean.getCollectionTime();    final long prevTime=gcTimes.get(gcMXBean).get();    final long runtime=time - prevTime;    metrics.put("gc." + gcName + ".time",time);    metrics.put("gc." + gcName + ".runtime",runtime);    if (runtime > 0) {      gcTimes.get(gcMXBean).set(time);    }  }  long loadedClassCount=classLoadingMXBean.getLoadedClassCount();  long totalLoadedClassCount=classLoadingMXBean.getTotalLoadedClassCount();  long unloadedClassCount=classLoadingMXBean.getUnloadedClassCount();  metrics.put("loaded-class-count",loadedClassCount);  metrics.put("total-loaded-class-count",totalLoadedClassCount);  metrics.put("unloaded-class-count",unloadedClassCount);  for (  MemoryPoolMXBean memoryPoolMXBean : memoryPoolMXBeans) {    String type=poolTypeToMetricName(memoryPoolMXBean.getType());    String name=poolNameToMetricName(memoryPoolMXBean.getName());    String prefix=type + '.' + name;    MemoryUsage usage=memoryPoolMXBean.getUsage();    recordMemoryUsage(prefix,usage,metrics);  }  recordGaugeValues(metrics);}  }
class C{  public int deleteByExample(UserExample example) throws SQLException {  int rows=sqlMapClient.delete("t_user.ibatorgenerated_deleteByExample",example);  return rows;}  }
class C{  public static void main(String[] args) throws Exception {  ICluster alice=Cluster.joinAwait(ImmutableMap.of("name","Alice"));  System.out.println(now() + " Alice join members: " + alice.members());  alice.listenMembership().subscribe(null);  ICluster bob=Cluster.joinAwait(ImmutableMap.of("name","Bob"),alice.address());  System.out.println(now() + " Bob join members: " + bob.members());  bob.listenMembership().subscribe(null);  ICluster carol=Cluster.joinAwait(ImmutableMap.of("name","Carol"),alice.address(),bob.address());  System.out.println(now() + " Carol join members: " + carol.members());  carol.listenMembership().subscribe(null);  Future<Void> shutdownFuture=bob.shutdown();  shutdownFuture.get();  long maxRemoveTimeout=MembershipConfig.DEFAULT_SUSPECT_TIMEOUT + 3 * FailureDetectorConfig.DEFAULT_PING_INTERVAL;  Thread.sleep(maxRemoveTimeout);}  }
class C{  public static String toBinaryString(byte[] input){  String result="";  int i;  for (i=0; i < input.length; i++) {    int e=input[i];    for (int ii=0; ii < 8; ii++) {      int b=(e >>> ii) & 1;      result+=b;    }    if (i != input.length - 1) {      result+=" ";    }  }  return result;}  }
class C{  public BranchLookup(PlanNode input,TableNode source,TableNode branch,List<TableSource> tables){  this(input,source,source,branch,tables);  assert (source == branch.getParent());}  }
class C{  public int optInt(String key){  return optInt(key,0);}  }
class C{  public String path(){  return this.uri.getPath();}  }
class C{  private byte[] generateRandomData(){  byte[] data=new byte[10 * Settings.BUFFER_SIZE + 271];  PRNG.getRandom().nextBytes(data);  return data;}  }
class C{  public String readUntil(char c){  int ix=data.indexOf(c,pos);  if (ix == -1)   throw new RuntimeException("readUntil did not find character '" + c + "'");  return readN(data.indexOf(c,pos) - pos);}  }
class C{  public final void expectAtLeastOneResult(ResultSet rs) throws AdeInternalException, SQLException {  if (!rs.next()) {    throw new AdeInternalException("Expecting at least one row from " + m_sql);  }}  }
class C{  public static boolean exists(final String file){  return exists(file,false);}  }
class C{  @Override public void write(String str){  write(str.toCharArray());}  }
class C{  private <T>IsilonList<T> list(URI url,String key,Class<T> c,String resumeToken) throws IsilonException {  ClientResponse resp=null;  try {    URI getUrl=url;    if (resumeToken != null && !resumeToken.isEmpty()) {      getUrl=getUrl.resolve("?resume=" + resumeToken);    }    resp=_client.get(getUrl);    JSONObject obj=resp.getEntity(JSONObject.class);    IsilonList<T> ret=new IsilonList<T>();    if (resp.getStatus() == 200) {      sLogger.debug("list {} : Output from Server: {} ",key,obj.get(key).toString());      JSONArray array=obj.getJSONArray(key);      for (int i=0; i < array.length(); i++) {        JSONObject exp=array.getJSONObject(i);        ret.add(new Gson().fromJson(SecurityUtils.sanitizeJsonString(exp.toString()),c));      }      if (obj.has("resume") && !obj.getString("resume").equals("null")) {        ret.setToken(obj.getString("resume"));      }    } else {      processErrorResponse("list",key,resp.getStatus(),obj);    }    return ret;  } catch (  IsilonException ie) {    throw ie;  }catch (  Exception e) {    String response=String.format("%1$s",(resp == null) ? "" : resp);    throw IsilonException.exceptions.listResourcesFailedOnIsilonArray(key,response,e);  } finally {    if (resp != null) {      resp.close();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.973 -0400",hash_original_method="85142D2E9E15EB93CC97B3004876EC03",hash_generated_method="57EBD7EEA30AC5594D23024CA2FA7FFF") public FileAlterationObserver(String directoryName){  this(new File(directoryName));}  }
class C{  protected final void EMIT_LongUnary(Instruction s,Operand result,Operand value1,boolean negOrNot){  Operand lhs, lowlhs;  boolean needsMove=!value1.similar(result);  if (result.isRegister()) {    Register lhsReg=result.asRegister().getRegister();    Register lowlhsReg=regpool.getSecondReg(lhsReg);    lowlhs=new RegisterOperand(lowlhsReg,TypeReference.Int);    lhs=new RegisterOperand(lhsReg,TypeReference.Int);  } else {    if (VM.VerifyAssertions)     opt_assert(result.isMemory());    lowlhs=setSize(result.asMemory(),DW);    lhs=lowlhs.copy();    lhs.asMemory().disp=lhs.asMemory().disp.plus(4);  }  if (needsMove) {    Operand rhs1, lowrhs1;    if (value1.isRegister()) {      Register rhs1Reg=value1.asRegister().getRegister();      Register lowrhs1Reg=regpool.getSecondReg(rhs1Reg);      lowrhs1=new RegisterOperand(lowrhs1Reg,TypeReference.Int);      rhs1=new RegisterOperand(rhs1Reg,TypeReference.Int);    } else {      if (VM.VerifyAssertions)       opt_assert(value1.isMemory());      lowrhs1=setSize(value1.asMemory(),DW);      rhs1=lowrhs1.copy();      rhs1.asMemory().disp=rhs1.asMemory().disp.plus(4);    }    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,lowlhs.copy(),lowrhs1)));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,lhs.copy(),rhs1)));  }  if (negOrNot) {    EMIT(CPOS(s,MIR_UnaryAcc.create(IA32_NEG,lowlhs)));    EMIT(CPOS(s,MIR_UnaryAcc.create(IA32_NOT,lhs)));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SBB,lhs.copy(),IC(-1))));  } else {    EMIT(CPOS(s,MIR_UnaryAcc.create(IA32_NOT,lowlhs)));    EMIT(CPOS(s,MIR_UnaryAcc.create(IA32_NOT,lhs)));  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String authenticate(String username,String password,String resource) throws XMPPException {  String selectedMechanism=null;  for (  String mechanism : mechanismsPreferences) {    if (implementedMechanisms.containsKey(mechanism) && serverMechanisms.contains(mechanism)) {      selectedMechanism=mechanism;      break;    }  }  if (selectedMechanism != null) {    try {      Class<? extends SASLMechanism> mechanismClass=implementedMechanisms.get(selectedMechanism);      Constructor<? extends SASLMechanism> constructor=mechanismClass.getConstructor(SASLAuthentication.class);      currentMechanism=constructor.newInstance(this);      currentMechanism.authenticate(username,connection.getServiceName(),password);synchronized (this) {        if (!saslNegotiated && !saslFailed) {          try {            wait(30000);          } catch (          InterruptedException e) {          }        }      }      if (saslFailed) {        if (errorCondition != null) {          throw new XMPPException("SASL authentication " + selectedMechanism + " failed: "+ errorCondition);        } else {          throw new XMPPException("SASL authentication failed using mechanism " + selectedMechanism);        }      }      if (saslNegotiated) {        return bindResourceAndEstablishSession(resource);      } else {        return new NonSASLAuthentication(connection).authenticate(username,password,resource);      }    } catch (    XMPPException e) {      throw e;    }catch (    Exception e) {      e.printStackTrace();      return new NonSASLAuthentication(connection).authenticate(username,password,resource);    }  } else {    return new NonSASLAuthentication(connection).authenticate(username,password,resource);  }}  }
class C{  public ScreenCapturePixelMatrixEditor(){  super();  initComponents();  layoutComponents();}  }
class C{  public void startAnimation(){  resetAnimation();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String hmac(String data,String key) throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException {  SecretKeySpec keySpec=new SecretKeySpec(key.getBytes("UTF-8"),"HmacSHA256");  Mac mac=Mac.getInstance("HmacSHA256");  mac.init(keySpec);  return Hash.toHexString(mac.doFinal(data.getBytes("UTF-8")));}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  public static final boolean exists(String code){  return mapping.containsKey(code.toLowerCase());}  }
class C{  public XMLElement(String fullName,String systemID,int lineNr){  this(fullName,null,systemID,lineNr);}  }
class C{  public boolean hasMatch(){  return _match != null;}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length == 2) {    service.getConnection(server.getId()).joinChannel(params[1]);  } else   if (params.length == 3) {    service.getConnection(server.getId()).joinChannel(params[1],params[2]);  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.backgroundPaint=SerialUtilities.readPaint(stream);}  }
class C{  BitMatrix buildFunctionPattern(){  int dimension=getDimensionForVersion();  BitMatrix bitMatrix=new BitMatrix(dimension);  bitMatrix.setRegion(0,0,9,9);  bitMatrix.setRegion(dimension - 8,0,8,9);  bitMatrix.setRegion(0,dimension - 8,9,8);  int max=alignmentPatternCenters.length;  for (int x=0; x < max; x++) {    int i=alignmentPatternCenters[x] - 2;    for (int y=0; y < max; y++) {      if ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0)) {        continue;      }      bitMatrix.setRegion(alignmentPatternCenters[y] - 2,i,5,5);    }  }  bitMatrix.setRegion(6,9,1,dimension - 17);  bitMatrix.setRegion(9,6,dimension - 17,1);  if (versionNumber > 6) {    bitMatrix.setRegion(dimension - 11,0,3,6);    bitMatrix.setRegion(0,dimension - 11,6,3);  }  return bitMatrix;}  }
class C{  public SnapshotsStatusRequestBuilder addSnapshots(String... snapshots){  request.snapshots(ObjectArrays.concat(request.snapshots(),snapshots,String.class));  return this;}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public static ComponentUI createUI(JComponent list){  return new PaletteListUI();}  }
class C{  public DbUtils() throws Exception {  super();}  }
class C{  default boolean matches(Repository repository,T entity){  return matches(entity);}  }
class C{  public MultiStep(Steppable step,int n,boolean countdown){  if (n < 0)   n=0;  this.n=n;  this.step=step;  this.countdown=countdown;  current=n;}  }
class C{  public void generateOptimizedNonBooleanEqual(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  Constant inline;  if ((inline=this.right.constant) != Constant.NotAConstant) {    if ((((this.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_int) && (inline.intValue() == 0)) {      this.left.generateCode(currentScope,valueRequired);      return;    }  }  if ((inline=this.left.constant) != Constant.NotAConstant) {    if ((((this.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_int) && (inline.intValue() == 0)) {      this.right.generateCode(currentScope,valueRequired);      return;    }  }  if (this.right instanceof NullLiteral) {    if (this.left instanceof NullLiteral) {      return;    } else     if (this.left instanceof NullLiteral) {      this.right.generateCode(currentScope,valueRequired);      return;    }    this.left.generateCode(currentScope,valueRequired);    this.right.generateCode(currentScope,valueRequired);  }}  }
class C{  private void addProducedBindings(final TermNode t,final Set<IVariable<?>> producedBindings){  if (t instanceof VarNode) {    producedBindings.add(((VarNode)t).getValueExpression());  } else   if (t instanceof ConstantNode) {    final ConstantNode cNode=(ConstantNode)t;    final Constant<?> c=(Constant<?>)cNode.getValueExpression();    final IVariable<?> var=c.getVar();    if (var != null) {      producedBindings.add(var);    }  }}  }
class C{  public boolean isSingleSided(){  return isSingleSided;}  }
class C{  public IdentityHashMap(Map<? extends K,? extends V> m){  this((int)((1 + m.size()) * 1.1));  putAll(m);}  }
class C{  public boolean isTwoDigitMode(){  return twoDigitMode;}  }
class C{  public void bitAnd() throws IOException {  print("bitAnd",null);}  }
class C{  public VerletParticle3D lock(){  isLocked=true;  return this;}  }
class C{  private boolean logIfDefined(Object objToLog){  if (objToLog != null && !(objToLog instanceof Undefined)) {    logger.info(Context.toString(objToLog));    return true;  } else   return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.STATEMENT__KEY:    return KEY_EDEFAULT == null ? key != null : !KEY_EDEFAULT.equals(key);case GamlPackage.STATEMENT__FIRST_FACET:  return FIRST_FACET_EDEFAULT == null ? firstFacet != null : !FIRST_FACET_EDEFAULT.equals(firstFacet);case GamlPackage.STATEMENT__EXPR:return expr != null;case GamlPackage.STATEMENT__FACETS:return facets != null && !facets.isEmpty();case GamlPackage.STATEMENT__BLOCK:return block != null;}return super.eIsSet(featureID);}  }
class C{  @Override public boolean supports(String view){  return getScriptEngine(view) != null;}  }
class C{  public static Vector<String> string2vector(final String string){  Vector<String> v;  if (string != null) {    v=new Vector<String>(Arrays.asList(CommonPattern.COMMA.split(string,0)));  } else {    v=new Vector<String>();  }  return v;}  }
class C{  public ProgressHelper(Executor executor){  super();  this.executor=executor;  statistics=new DescriptiveStatistics(25);  listeners=EventListenerSupport.create(ProgressListener.class);}  }
class C{  public boolean inMethod(){  return false;}  }
class C{  @Inject public ProjectSelectionDialog(N4JSProjectContentProvider n4jsProjectContentProvider){  super(UIUtils.getShell());  this.setContentProvider(n4jsProjectContentProvider);  this.setLabelProvider(new N4JSProjectLabelProvider());  this.setInput(ResourcesPlugin.getWorkspace().getRoot());  this.setHelpAvailable(false);}  }
class C{  void initToken(){  buffer=new StringBuilder();}  }
class C{  private static final String decode(Set<? extends Integer> src){  if (src == null || src.isEmpty())   return "";  StringBuilder buffer=new StringBuilder();  for (  Integer i : src) {    buffer.append(i.toString()).append(';');  }  if (buffer.length() > 0) {    buffer.setLength(buffer.length() - 1);  }  return buffer.toString();}  }
class C{  public void spritePause(boolean pause){  mSpriteSheet.setSpritePause(pause);}  }
class C{  public Point center(){  return rect.center;}  }
class C{  @DataProvider(name="classProvider") public Object[][] classprovider(){  return TESTING_CLASSES;}  }
class C{  private void stickyEventCommand(@NonNull MessageEvent messageEvent,@NonNull byte[] objectArray,@NonNull String className){  if (className.equals(String.class.getName())) {    String action=new String(objectArray);    Log.d(WearBusTools.BUSWEAR_TAG,"syncEvent action: " + action);    if (action.equals(WearBusTools.ACTION_STICKY_CLEAR_ALL)) {      removeAllStickyEventsLocal();    } else {      Class classTmp=getClassForName(className);      removeStickyEventLocal(classTmp);    }  } else {    if (messageEvent.getPath().startsWith(WearBusTools.PREFIX_CLASS)) {      Class classTmp=getClassForName(className);      removeStickyEventLocal(classTmp);    } else {      Object obj=WearBusTools.getSendSimpleObject(objectArray,className);      if (obj == null) {        obj=findParcel(objectArray,className);      }      if (obj != null) {        removeStickyEventLocal(obj);      }    }  }}  }
class C{  public ExtraProvider overrideImage(Uri image){  this.overriddenImage=image;  return this;}  }
class C{  @Override public Edge readEdge(final InputStream inputStream,final Function<Attachable<Edge>,Edge> edgeAttachMethod) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  private void checkState(State st,String msg){  if (state != st) {    throw new IllegalStateException(msg + " at " + st+ " state");  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void spaceVertical(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new spaceVerticalAction(nodes));  }  int nMinY=-1;  int nMaxY=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nY=getPositionY(nodes.get(iNode));    if (nY < nMinY || iNode == 0) {      nMinY=nY;    }    if (nY > nMaxY || iNode == 0) {      nMaxY=nY;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionY.set(nNode,(int)(nMinY + iNode * (nMaxY - nMinY) / (nodes.size() - 1.0)));  }}  }
class C{  public void onCancelRealtimeBars(Contract contract){  if (m_realTimeBarsRequests.containsKey(contract.getId())) {synchronized (m_realTimeBarsRequests) {      m_realTimeBarsRequests.remove(contract.getId());    }  }}  }
class C{  protected TEnumImpl(){  super();}  }
class C{  public static String parseCharset(Map<String,String> headers){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return HTTP.DEFAULT_CONTENT_CHARSET;}  }
class C{  public synchronized void clear(){  m_Results.clear();  m_Suffixes.clear();  m_Ordered.clear();}  }
class C{  protected byte[] computeSHAdigest(final byte[] value){  try {    return MessageDigest.getInstance("SHA").digest(value);  } catch (  Exception e) {    throw new UnsupportedOperationException(e.toString());  }}  }
class C{  public static Quantity toQuantity(final Supply supply,final int divisibility){  return new Quantity(supply.getRaw() * getMultipler(divisibility));}  }
class C{  public static int randGaussian(final int mean,final int sd){  return (int)(rand.nextGaussian() * sd + mean);}  }
class C{  public static long rotateLeft(long lng,int distance){  if (distance == 0) {    return lng;  }  return ((lng << distance) | (lng >>> (-distance)));}  }
class C{  public Picker quality(int minPixel,int maxPixel){  mSelectionSpec.setMinPixels(minPixel);  mSelectionSpec.setMaxPixels(maxPixel);  return this;}  }
class C{  ValueImpl readValue(){  byte typeKey=readByte();  return readUntaggedValue(typeKey);}  }
class C{  private void removeMapping(TreeStateNode node){  treePathMapping.remove(node.getTreePath());}  }
class C{  public Cookie(final String domain,final String name,final String value){  this(domain,name,value,null,null,false);}  }
class C{  public static Short valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseShort(string,radix));}  }
class C{  public synchronized UDAudio seekTo(Integer position){  if (position != null) {    final MediaPlayer player=getMediaPlayer();    if (player != null) {      try {        player.seekTo(position);      } catch (      Exception e) {        e.printStackTrace();      }    }  }  return this;}  }
class C{  public boolean toOutline(){  int corners=vertices.size();  int maxSegs=corners * 3;  List<Vec2D> newVerts=new ArrayList<Vec2D>(corners);  Vec2D[] segments=new Vec2D[maxSegs];  Vec2D[] segEnds=new Vec2D[maxSegs];  float[] segAngles=new float[maxSegs];  Vec2D start=vertices.get(0).copy();  float lastAngle=MathUtils.PI;  float a, b, c, d, e, f;  double angleDif, bestAngleDif;  int i, j=corners - 1, segs=0;  if (corners > maxSegs) {    return false;  }  for (i=0; i < corners; i++) {    Vec2D pi=vertices.get(i);    Vec2D pj=vertices.get(j);    if (!pi.equals(pj)) {      segments[segs]=pi;      segEnds[segs++]=pj;    }    j=i;    if (pi.y > start.y || (pi.y == start.y && pi.x < start.x)) {      start.set(pi);    }  }  if (segs == 0) {    return false;  }  for (i=0; i < segs - 1; i++) {    for (j=i + 1; j < segs; j++) {      Line2D li=new Line2D(segments[i],segEnds[i]);      Line2D lj=new Line2D(segments[j],segEnds[j]);      LineIntersection isec=li.intersectLine(lj);      if (isec.getType() == Type.INTERSECTING) {        Vec2D ipos=isec.getPos();        if (!ipos.equals(segments[i]) && !ipos.equals(segEnds[i])) {          if (segs == maxSegs) {            return false;          }          segments[segs]=segments[i].copy();          segEnds[segs++]=ipos.copy();          segments[i]=ipos.copy();        }        if (!ipos.equals(segments[j]) && !ipos.equals(segEnds[j])) {          if (segs == maxSegs) {            return false;          }          segments[segs]=segments[j].copy();          segEnds[segs++]=ipos.copy();          segments[j]=ipos.copy();        }      }    }  }  for (i=0; i < segs; i++) {    segAngles[i]=segEnds[i].sub(segments[i]).positiveHeading();  }  c=start.x;  d=start.y;  a=c - 1;  b=d;  e=0;  f=0;  newVerts.add(new Vec2D(c,d));  corners=1;  while (true) {    bestAngleDif=MathUtils.TWO_PI;    for (i=0; i < segs; i++) {      if (segments[i].x == c && segments[i].y == d && (segEnds[i].x != a || segEnds[i].y != b)) {        angleDif=lastAngle - segAngles[i];        while (angleDif >= MathUtils.TWO_PI) {          angleDif-=MathUtils.TWO_PI;        }        while (angleDif < 0) {          angleDif+=MathUtils.TWO_PI;        }        if (angleDif < bestAngleDif) {          bestAngleDif=angleDif;          e=segEnds[i].x;          f=segEnds[i].y;        }      }      if (segEnds[i].x == c && segEnds[i].y == d && (segments[i].x != a || segments[i].y != b)) {        angleDif=lastAngle - segAngles[i] + MathUtils.PI;        while (angleDif >= MathUtils.TWO_PI) {          angleDif-=MathUtils.TWO_PI;        }        while (angleDif < 0) {          angleDif+=MathUtils.TWO_PI;        }        if (angleDif < bestAngleDif) {          bestAngleDif=angleDif;          e=segments[i].x;          f=segments[i].y;        }      }    }    if (corners > 1 && c == newVerts.get(0).x && d == newVerts.get(0).y && e == newVerts.get(1).x && f == newVerts.get(1).y) {      corners--;      vertices=newVerts;      return true;    }    if (bestAngleDif == MathUtils.TWO_PI || corners == maxSegs) {      return false;    }    lastAngle-=bestAngleDif + MathUtils.PI;    newVerts.add(new Vec2D(e,f));    corners++;    a=c;    b=d;    c=e;    d=f;  }}  }
class C{  final String PrintVersion(String str){  StringBuffer buf=new StringBuffer(str.length());  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case '\"':      buf.append("\\\"");    break;case '\\':  buf.append("\\\\");break;case '\t':buf.append("\\t");break;case '\n':buf.append("\\n");break;case '\f':buf.append("\\f");break;case '\r':buf.append("\\r");break;default :buf.append(str.charAt(i));break;}};return buf.toString();}  }
class C{  public boolean isLeaf(){  if (below != null) {    return false;  }  if (above != null) {    return false;  }  return true;}  }
class C{  public OutputDistribution(String var){  this.baseVar=var.replace("'","");  this.primes=var.replace(baseVar,"");  inputRules=new ArrayList<AnchoredRule>();}  }
class C{  private static void processNotifications() throws Exception {  try (final Statement statement=Database.INSTANCE.getListenerConnection().createStatement();final ResultSet result_set=statement.executeQuery(Config.INSTANCE.sql.getProperty("sql.jpgagent.dummy"))){    Config.INSTANCE.logger.debug("Kill jobs begin.");    final PGConnection pg_connection=Database.INSTANCE.getListenerConnection().unwrap(PGConnection.class);    final PGNotification notifications[]=pg_connection.getNotifications();    if (null != notifications) {      for (      PGNotification notification : notifications) {        if (notification.getName().equals("jpgagent_kill_job")) {          int job_id=Integer.valueOf(notification.getParameter());          if (job_future_map.containsKey(job_id)) {            Config.INSTANCE.logger.info("Killing job_id: {}.",job_id);            job_future_map.get(job_id).cancel(true);          } else {            Config.INSTANCE.logger.info("Kill request for job_id: {} was submitted, but the job was not running.",job_id);          }        }      }    }  } }  }
class C{  public ZipShort(byte[] bytes,int offset){  value=(bytes[offset + 1] << 8) & 0xFF00;  value+=(bytes[offset] & 0xFF);}  }
class C{  public static <T>T createRetrofitService(final Class<T> clazz,final String endPoint){  final RestAdapter restAdapter=new RestAdapter.Builder().setEndpoint(endPoint).build();  T service=restAdapter.create(clazz);  return service;}  }
class C{  public final boolean matchAction(String action){  return hasAction(action);}  }
class C{  public static void renameFileReferencee(PsiElement element,String newPackageName){  if (element instanceof PerlNamespaceElement) {    PerlPsiUtil.renameElement(element,newPackageName);  }}  }
class C{  private BakedBezierInterpolator(){  super();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof RC5ParameterSpec)) {    return false;  }  RC5ParameterSpec ps=(RC5ParameterSpec)obj;  return (version == ps.version) && (rounds == ps.rounds) && (wordSize == ps.wordSize)&& (Arrays.equals(iv,ps.iv));}  }
class C{  public static boolean isSameAnno(FeatureStructure aFirstFS,FeatureStructure aSeconFS){  for (  Feature f : getAllFeatures(aFirstFS)) {    if (isBasicFeature(f)) {      continue;    }    if (!isLinkMode(aFirstFS,f)) {      try {        FeatureStructure attachFs1=aFirstFS.getFeatureValue(f);        FeatureStructure attachFs2=aSeconFS.getFeatureValue(f);        if (!isSameAnno(attachFs1,attachFs2)) {          return false;        }      } catch (      Exception e) {      }      if (getFeatureValue(aFirstFS,f) == null && getFeatureValue(aSeconFS,f) == null) {        continue;      }      if (getFeatureValue(aFirstFS,f) == null && getFeatureValue(aSeconFS,f) != null) {        return false;      }      if (getFeatureValue(aFirstFS,f) != null && getFeatureValue(aSeconFS,f) == null) {        return false;      }      if (!getFeatureValue(aFirstFS,f).equals(getFeatureValue(aSeconFS,f))) {        return false;      }    }  }  return true;}  }
class C{  ServerSessionContext registerIndexQuery(long index,Runnable query){  List<Runnable> queries=this.indexQueries.computeIfAbsent(index,null);  queries.add(query);  return this;}  }
class C{  public <T extends Number & Comparable>NumberRange by(T stepSize){  return new NumberRange(NumberRange.comparableNumber((Number)from),NumberRange.comparableNumber((Number)to),stepSize,inclusive);}  }
class C{  public X509Name(String dirName){  this(DefaultReverse,DefaultLookUp,dirName);}  }
class C{  public boolean isAllowedToDelete(PlatformUser user){  if (user.equals(getPlatformUser())) {    return true;  }  Organization org=getPlatformUser().getOrganization();  if (user.isOrganizationAdmin() && user.getOrganization().equals(org)) {    return true;  }  return false;}  }
class C{  public Rational(Rational R){  this.N=new Polynomial(R.N);  this.D=new Polynomial(R.D);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_BASE_TYPE:    setDelegationBaseType((SymbolTableEntryOriginal)null);  return;case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:setDelegationSuperClassSteps(DELEGATION_SUPER_CLASS_STEPS_EDEFAULT);return;case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_TARGET:setDelegationTarget((SymbolTableEntryOriginal)null);return;case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:setDelegationTargetIsAbstract(DELEGATION_TARGET_IS_ABSTRACT_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private List<BigtableSource> splitIntoBundlesBasedOnSamples(long desiredBundleSizeBytes,List<SampleRowKeysResponse> sampleRowKeys){  if (sampleRowKeys.isEmpty()) {    logger.info("Not splitting source {} because no sample row keys are available.",this);    return Collections.singletonList(this);  }  logger.info("About to split into bundles of size {} with sampleRowKeys length {} first element {}",desiredBundleSizeBytes,sampleRowKeys.size(),sampleRowKeys.get(0));  ByteKey lastEndKey=ByteKey.EMPTY;  long lastOffset=0;  ImmutableList.Builder<BigtableSource> splits=ImmutableList.builder();  for (  SampleRowKeysResponse response : sampleRowKeys) {    ByteKey responseEndKey=ByteKey.of(response.getRowKey());    long responseOffset=response.getOffsetBytes();    checkState(responseOffset >= lastOffset,"Expected response byte offset %s to come after the last offset %s",responseOffset,lastOffset);    if (!range.overlaps(ByteKeyRange.of(lastEndKey,responseEndKey))) {      lastOffset=responseOffset;      lastEndKey=responseEndKey;      continue;    }    ByteKey splitStartKey=lastEndKey;    if (splitStartKey.compareTo(range.getStartKey()) < 0) {      splitStartKey=range.getStartKey();    }    ByteKey splitEndKey=responseEndKey;    if (!range.containsKey(splitEndKey)) {      splitEndKey=range.getEndKey();    }    long sampleSizeBytes=responseOffset - lastOffset;    List<BigtableSource> subSplits=splitKeyRangeIntoBundleSizedSubranges(sampleSizeBytes,desiredBundleSizeBytes,ByteKeyRange.of(splitStartKey,splitEndKey));    splits.addAll(subSplits);    lastEndKey=responseEndKey;    lastOffset=responseOffset;  }  if (!lastEndKey.isEmpty() && (range.getEndKey().isEmpty() || lastEndKey.compareTo(range.getEndKey()) < 0)) {    splits.add(this.withStartKey(lastEndKey).withEndKey(range.getEndKey()));  }  List<BigtableSource> ret=splits.build();  logger.info("Generated {} splits. First split: {}",ret.size(),ret.get(0));  return ret;}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String elementId="---";  doc=(Document)load("staffNS",false);  element=doc.getElementById(elementId);  assertNull("documentgetelementbyid01",element);}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  int queue(byte[] buffer,int offset,int len,boolean bCtrl){  int available_space;  available_space=m_sbuf.getWriteRemaining();  if (len > available_space) {    assert !bCtrl;    len=available_space;  }  SSegment back=null;  if (!m_slist.isEmpty()) {    back=m_slist.get(m_slist.size() - 1);  }  if (back != null && (back.bCtrl == bCtrl) && (back.xmit == 0)) {    back.len+=len;  } else {    long snd_buffered;    snd_buffered=m_sbuf.getBuffered();    SSegment sseg=new SSegment(m_snd_una + snd_buffered,len,bCtrl);    if (logger.isLoggable(Level.FINEST)) {      logger.log(Level.FINEST,debugName + " enqueued send segment seq: " + sseg.seq+ " len: "+ sseg.len);    }    m_slist.add(sseg);  }  int written=m_sbuf.write(buffer,offset,len);  return written;}  }
class C{  private void populateMap(final AccessProfile accessProfile){  _logger.debug("Populating input attributes in the map.");  _keyMap.put(VNXFileConstants.DEVICETYPE,accessProfile.getSystemType());  _keyMap.put(VNXFileConstants.DBCLIENT,_dbClient);  _keyMap.put(VNXFileConstants.USERNAME,accessProfile.getUserName());  _keyMap.put(VNXFileConstants.USER_PASS_WORD,accessProfile.getPassword());  _keyMap.put(VNXFileConstants.URI,getServerUri(accessProfile));  _keyMap.put(VNXFileConstants.PORTNUMBER,accessProfile.getPortNumber());  _keyMap.put(Constants._Stats,new LinkedList<Stat>());  _keyMap.put(Constants.ACCESSPROFILE,accessProfile);  _keyMap.put(Constants._serialID,accessProfile.getserialID());  _keyMap.put(Constants._nativeGUIDs,Sets.newHashSet());  _keyMap.put(VNXFileConstants.AUTHURI,getLoginUri(accessProfile));  String globalCacheKey=accessProfile.getserialID() + Constants._minusDelimiter + Constants._File;  _keyMap.put(Constants._globalCacheKey,globalCacheKey);  _keyMap.put(Constants.PROPS,accessProfile.getProps());  if (executor != null) {    executor.setKeyMap(_keyMap);    _logger.debug("Map set on executor....");  }}  }
class C{  public static void dropTables(Connection conn){  try {    Statement stmt=conn.createStatement();    try {      stmt.execute("DROP TABLE Unpaidorder");    } catch (    SQLException ex) {    }    try {      stmt.execute("DROP TABLE Customer");    } catch (    SQLException ex) {    }    try {      stmt.execute("DROP TABLE Coffee");    } catch (    SQLException ex) {    }  } catch (  SQLException ex) {    System.out.println("ERROR: " + ex.getMessage());    ex.printStackTrace();  }}  }
class C{  protected int mapDragOperationFromModifiers(MouseEvent e){  int mods=e.getModifiersEx();  int btns=mods & ButtonMask;  if (!(btns == InputEvent.BUTTON1_DOWN_MASK || btns == InputEvent.BUTTON2_DOWN_MASK)) {    return DnDConstants.ACTION_NONE;  }  return SunDragSourceContextPeer.convertModifiersToDropAction(mods,getSourceActions());}  }
class C{  OutputStream saveUploadedFileDetails(final String name,final long size,final String mimeType,final SoftwareModule selectedSw){  File tempFile=null;  try {    tempFile=File.createTempFile("spUiArtifactUpload",null);    @SuppressWarnings("squid:S2095") final OutputStream out=new FileOutputStream(tempFile);    final String currentBaseSoftwareModuleKey=HawkbitCommonUtil.getFormattedNameVersion(selectedSw.getName(),selectedSw.getVersion());    final CustomFile customFile=new CustomFile(name,size,tempFile.getAbsolutePath(),selectedSw.getName(),selectedSw.getVersion(),mimeType);    artifactUploadState.getFileSelected().add(customFile);    processBtn.setEnabled(false);    if (!artifactUploadState.getBaseSwModuleList().keySet().contains(currentBaseSoftwareModuleKey)) {      artifactUploadState.getBaseSwModuleList().put(currentBaseSoftwareModuleKey,selectedSw);    }    return out;  } catch (  final FileNotFoundException e) {    LOG.error("Upload failed {}",e);    throw new ArtifactUploadFailedException(i18n.get("message.file.not.found"));  }catch (  final IOException e) {    LOG.error("Upload failed {}",e);    throw new ArtifactUploadFailedException(i18n.get("message.upload.failed"));  }}  }
class C{  public static void main(String[] args){  try {    Stemming.useStemmer(new IteratedLovinsStemmer(),args);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private StreamUtil(){  instanceNotAllowed(getClass());}  }
class C{  public static boolean isLocalAssetUri(Uri uri){  final String scheme=getSchemeOrNull(uri);  return LOCAL_ASSET_SCHEME.equals(scheme);}  }
class C{  private boolean checkForIndex(File aIndexFolder){  File[] files=aIndexFolder.listFiles();  if (files == null) {    return false;  }  boolean result=false;  for (  File file : files) {    if (file.isFile() && file.getName().startsWith("segments")) {      result=true;      break;    }  }  return result;}  }
class C{  public void unpair(BluetoothAdapter adapter,BluetoothDevice device){  int mask=PairReceiver.STATE_NONE_FLAG;  long start=-1;  String methodName=String.format("unpair(device=%s)",device);  if (!adapter.isEnabled()) {    fail(String.format("%s bluetooth not enabled",methodName));  }  PairReceiver receiver=getPairReceiver(device,0,null,mask);  int state=device.getBondState();switch (state) {case BluetoothDevice.BOND_NONE:    assertFalse(adapter.getBondedDevices().contains(device));  removeReceiver(receiver);return;case BluetoothDevice.BOND_BONDING:start=System.currentTimeMillis();assertTrue(device.removeBond());break;case BluetoothDevice.BOND_BONDED:assertTrue(adapter.getBondedDevices().contains(device));start=System.currentTimeMillis();assertTrue(device.removeBond());break;default :removeReceiver(receiver);fail(String.format("%s invalid state: state=%d",methodName,state));}long s=System.currentTimeMillis();while (System.currentTimeMillis() - s < PAIR_UNPAIR_TIMEOUT) {if (device.getBondState() == BluetoothDevice.BOND_NONE && (receiver.getFiredFlags() & mask) == mask) {assertFalse(adapter.getBondedDevices().contains(device));long finish=receiver.getCompletedTime();if (start != -1 && finish != -1) {writeOutput(String.format("%s completed in %d ms",methodName,(finish - start)));} else {writeOutput(String.format("%s completed",methodName));}removeReceiver(receiver);return;}}int firedFlags=receiver.getFiredFlags();removeReceiver(receiver);fail(String.format("%s timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",methodName,state,BluetoothDevice.BOND_BONDED,firedFlags,mask));}  }
class C{  public boolean isBannedMethod(SootMethod m){  return banned_methods.contains(m);}  }
class C{  public TextComponent(String text,BaseComponent... extras){  this.text=text;  this.setExtra(Arrays.asList(extras));}  }
class C{  public MemberCube(TClassifier tClassifier,MemberCollector memberCollector){  this.memberMatrixesByName=new HashMap<>();  addMembers(MemberMatrix.OWNED,tClassifier.getOwnedMembers());  if (tClassifier instanceof TClass) {    addMembers(MemberMatrix.INHERITED,memberCollector.inheritedMembers((TClass)tClassifier));  }  addMembers(MemberMatrix.IMPLEMENTED,memberCollector.membersOfImplementedInterfaces(tClassifier));}  }
class C{  private void addMembers(List<String> newMembers){  if (newMembers.isEmpty()) {    return;  }  int startIndex=-1;  int endIndex=-1;  for (  String name : newMembers) {    Member member=new Member(name);    member.setChangeListener(healthListener);    memberMap.put(name,member);    memberList.add(member);    int index=memberList.indexOf(member);    if (startIndex == -1) {      startIndex=index;      endIndex=index;    } else {      startIndex=Math.min(startIndex,index);      endIndex=Math.max(endIndex,index);    }  }  fireIntervalAdded(this,startIndex,endIndex);}  }
class C{  public static void init(){  init("es");}  }
class C{  public void delete(ScriptGroup group){  if (!currentTestPlan.getScriptGroups().remove(group)) {    messages.warn("Could not remove Script Group " + group.getName() + ".");  } else {    messages.info("Script Group " + group.getName() + " has been removed.");  }}  }
class C{  @Override public URI toPropertyURI(final String property){  return toURI(property);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) @Path("/{id}/restore") public TaskResourceRep restore(@PathParam("id") URI id,@QueryParam("syncDirection") String syncDirection){  ArgValidator.checkFieldUriType(id,BlockSnapshot.class,"id");  BlockSnapshot snapshot=(BlockSnapshot)queryResource(id);  if (syncDirection != null) {    validateSyncDirection(syncDirection);  }  Volume parentVolume=_permissionsHelper.getObjectById(snapshot.getParent(),Volume.class);  checkForPendingTasks(Arrays.asList(parentVolume.getTenant().getURI()),Arrays.asList(parentVolume));  StorageSystem storage=_permissionsHelper.getObjectById(parentVolume.getStorageController(),StorageSystem.class);  if (storage.checkIfVmax3()) {    if (snapshot.getSettingsInstance() == null) {      throw APIException.badRequests.snapshotNullSettingsInstance(snapshot.getLabel());    }  }  if (Type.openstack.name().equalsIgnoreCase(storage.getSystemType())) {    throw APIException.methodNotAllowed.notSupportedWithReason(String.format("Snapshot restore is not possible on third-party storage systems"));  }  BlockServiceApi blockServiceApiImpl=BlockService.getBlockServiceImpl(parentVolume,_dbClient);  blockServiceApiImpl.validateRestoreSnapshot(snapshot,parentVolume);  String taskId=UUID.randomUUID().toString();  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.RESTORE_VOLUME_SNAPSHOT);  _dbClient.createTaskOpStatus(BlockSnapshot.class,snapshot.getId(),taskId,op);  snapshot.getOpStatus().put(taskId,op);  blockServiceApiImpl.restoreSnapshot(snapshot,parentVolume,syncDirection,taskId);  auditOp(OperationTypeEnum.RESTORE_VOLUME_SNAPSHOT,true,AuditLogManager.AUDITOP_BEGIN,id.toString(),parentVolume.getId().toString(),snapshot.getStorageController().toString());  return toTask(snapshot,taskId,op);}  }
class C{  public void testMultivariateTEforCoupledDataFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4ColsPairedOneStepNoisyDependence-1.txt");  double[][] data=afr.getDouble2DMatrix();  double[] col0=MatrixUtils.selectColumn(data,0);  double[] col1=MatrixUtils.selectColumn(data,1);  double[] col2=MatrixUtils.selectColumn(data,2);  double[] col3=MatrixUtils.selectColumn(data,3);  col0=MatrixUtils.normaliseIntoNewArray(col0);  col1=MatrixUtils.normaliseIntoNewArray(col1);  col2=MatrixUtils.normaliseIntoNewArray(col2);  col3=MatrixUtils.normaliseIntoNewArray(col3);  int kNNs=4;  double expectedFromTRENTOOL0to2=0.1400645;  double expectedFromTRENTOOL2to0=-0.0181459;  double expectedFromTRENTOOL1to3=0.1639186;  double expectedFromTRENTOOL3to1=0.0036976;  TransferEntropyCalculatorKraskov teCalc=new TransferEntropyCalculatorKraskov();  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_K,Integer.toString(kNNs));  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_NORMALISE,"false");  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_ADD_NOISE,"0");  System.out.println("Kraskov Cond MI as TE - multivariate coupled data 1, k=2,l=2");  System.out.println("  (0->2)");  teCalc.initialise(2,1,2,1,1);  teCalc.setObservations(col0,col2);  double result=teCalc.computeAverageLocalOfObservations();  System.out.printf(" %.5f\n",result);  assertEquals(expectedFromTRENTOOL0to2,result,0.000001);  System.out.println("  (2->0):");  teCalc.initialise(2,1,2,1,1);  teCalc.setObservations(col2,col0);  result=teCalc.computeAverageLocalOfObservations();  System.out.printf(" %.5f\n",result);  assertEquals(expectedFromTRENTOOL2to0,result,0.000001);  System.out.println("  (1->3):");  teCalc.initialise(2,1,2,1,1);  teCalc.setObservations(col1,col3);  result=teCalc.computeAverageLocalOfObservations();  System.out.printf(" %.5f\n",result);  assertEquals(expectedFromTRENTOOL1to3,result,0.000001);  System.out.println("  (3->1):");  teCalc.initialise(2,1,2,1,1);  teCalc.setObservations(col3,col1);  result=teCalc.computeAverageLocalOfObservations();  System.out.printf(" %.5f\n",result);  assertEquals(expectedFromTRENTOOL3to1,result,0.000001);  double expectedFromTRENTOOL0to1_k1l1=0.0072169;  double expectedFromTRENTOOL1to2_k1l1=0.0011738;  System.out.println("  (0->1) but with k=1,l=1:");  teCalc.initialise(1,1,1,1,1);  teCalc.setObservations(col0,col1);  result=teCalc.computeAverageLocalOfObservations();  System.out.printf(" %.5f\n",result);  assertEquals(expectedFromTRENTOOL0to1_k1l1,result,0.000001);  System.out.println("  (1->2) but with k=1,l=1:");  teCalc.initialise(1,1,1,1,1);  teCalc.setObservations(col1,col2);  result=teCalc.computeAverageLocalOfObservations();  System.out.printf(" %.5f\n",result);  assertEquals(expectedFromTRENTOOL1to2_k1l1,result,0.000001);}  }
class C{  public Set<String> addContent(String variable,Value value){  if (!paused) {    curState.addToState(new Assignment(variable,value));    return update();  } else {    log.info("system is paused, ignoring " + variable + "="+ value);    return Collections.emptySet();  }}  }
class C{  public void testGetSpeed_one(){  testSpeed(1,1);}  }
class C{  public BasicCondition(String variable,String value,Relation relation){  this.variable=Template.create(variable);  this.templateValue=Template.create(value);  groundValue=(templateValue.isUnderspecified()) ? null : ValueFactory.create(value);  this.relation=relation;}  }
class C{  public String[] validBaudRates(){  return new String[]{"19,200 bps"};}  }
class C{  static double slowCos(final double x,final double result[]){  final double xs[]=new double[2];  final double ys[]=new double[2];  final double facts[]=new double[2];  final double as[]=new double[2];  split(x,xs);  ys[0]=ys[1]=0.0;  for (int i=FACT.length - 1; i >= 0; i--) {    splitMult(xs,ys,as);    ys[0]=as[0];    ys[1]=as[1];    if ((i & 1) != 0) {      continue;    }    split(FACT[i],as);    splitReciprocal(as,facts);    if ((i & 2) != 0) {      facts[0]=-facts[0];      facts[1]=-facts[1];    }    splitAdd(ys,facts,as);    ys[0]=as[0];    ys[1]=as[1];  }  if (result != null) {    result[0]=ys[0];    result[1]=ys[1];  }  return ys[0] + ys[1];}  }
class C{  public synchronized void add(double minValue,double maxValue){  super.add(minValue);  mMaxValues.add(maxValue);}  }
class C{  public NecronomiconSummonRitual(String unlocalizedName,int bookType,float requiredEnergy,Class<? extends EntityLivingBase> entity,Object... offerings){  this(unlocalizedName,bookType,-1,requiredEnergy,entity,offerings);}  }
class C{  public AssertionFailedException(Exception ex){  super(Messages.getString("AssertionFailedException.0") + ex.toString() + Messages.getString("AssertionFailedException.1"));}  }
class C{  @Override public void handlePatch(Operation op){  setOperationHandlerInvokeTimeStat(op);  if (!op.hasBody()) {    op.fail(new IllegalArgumentException("body is required"));    return;  }  EnumerationContext ctx=new EnumerationContext(op);  AdapterUtils.validateEnumRequest(ctx.enumRequest);  if (ctx.enumRequest.isMockRequest) {    op.complete();    AdapterUtils.sendPatchToEnumerationTask(this,ctx.enumRequest.taskReference);    return;  }  handleEnumerationRequest(ctx);}  }
class C{  public Polygon2D add(float x,float y){  return add(new Vec2D(x,y));}  }
class C{  public static void filledPolygon(double[] x,double[] y){  if (x == null)   throw new NullPointerException();  if (y == null)   throw new NullPointerException();  int n1=x.length;  int n2=y.length;  if (n1 != n2)   throw new IllegalArgumentException("arrays must be of the same length");  int n=n1;  GeneralPath path=new GeneralPath();  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));  for (int i=0; i < n; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));  path.closePath();  offscreen.fill(path);  draw();}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep createHost(HostCreateParam createParam,@QueryParam("validate_connection") @DefaultValue("false") final Boolean validateConnection){  URI tid=createParam.getTenant();  if ((tid == null) || tid.toString().isEmpty()) {    _log.error("The tenant id is missing");    throw APIException.badRequests.requiredParameterMissingOrEmpty("tenant");  }  TenantOrg tenant=_permissionsHelper.getObjectById(tid,TenantOrg.class);  ArgValidator.checkEntity(tenant,tid,isIdEmbeddedInURL(tid),true);  validateHostData(createParam,tid,null,validateConnection);  Host host=createNewHost(tenant,createParam);  host.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());  _dbClient.createObject(host);  auditOp(OperationTypeEnum.CREATE_HOST,true,null,host.auditParameters());  return doDiscoverHost(host);}  }
class C{  public boolean hasEdge(DigraphNode node){  return outNodes.contains(node);}  }
class C{  @Override @Deprecated public Condition duplicate(){  return this;}  }
class C{  public E elementAt(int index){  return delegate.elementAt(index);}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  @Deprecated public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (api >= Opcodes.ASM5) {    boolean itf=opcode == Opcodes.INVOKEINTERFACE;    visitMethodInsn(opcode,owner,name,desc,itf);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  @Override public void registerOutParameter(int parameterIndex,int sqlType,String typeName) throws SQLException {  registerOutParameter(parameterIndex);}  }
class C{  private final Throwable unwrapFutureThrowable(Future<?> ft){  if (ft.isDone() && !ft.isCancelled()) {    try {      ft.get();    } catch (    ExecutionException ee) {      return ee.getCause();    }catch (    InterruptedException ie) {      Thread.currentThread().interrupt();    }  }  return null;}  }
class C{  protected static boolean placeAnimalIntoWorld(final DomesticAnimal animal,final Player player){  final StendhalRPZone playerZone=player.getZone();  if (animal.has("zoneid") && animal.has("x") && animal.has("y")) {    final StendhalRPZone zone=SingletonRepository.getRPWorld().getZone(animal.get("zoneid"));    if (zone == playerZone) {      if (StendhalRPAction.placeat(zone,animal,animal.getX(),animal.getY())) {        return true;      }    }  }  return StendhalRPAction.placeat(playerZone,animal,player.getX(),player.getY());}  }
class C{  @Override public int K(final Object ex,final FormObject formObj,final int actionID){  if (showMethods) {    System.out.println("DefaultActionHandler.K()");  }  return javascript.execute(formObj,PdfDictionary.K,actionID,getKeyPressed(ex));}  }
class C{  protected FileMetadata buildFileMetadata(FileInfo fileInfo) throws IOException {  String filePathStr=fileInfo.getFilePath();  LOG.debug("file {}",filePathStr);  FileMetadata fileMetadata=new FileMetadata(filePathStr);  Path path=new Path(filePathStr);  fileMetadata.setFileName(path.getName());  FileStatus status=fs.getFileStatus(path);  fileMetadata.setDirectory(status.isDirectory());  fileMetadata.setFileLength(status.getLen());  if (!status.isDirectory()) {    int noOfBlocks=(int)((status.getLen() / blockSize) + (((status.getLen() % blockSize) == 0) ? 0 : 1));    if (fileMetadata.getDataOffset() >= status.getLen()) {      noOfBlocks=0;    }    fileMetadata.setNumberOfBlocks(noOfBlocks);    populateBlockIds(fileMetadata);  }  return fileMetadata;}  }
class C{  public Map<URI,List<URI>> addSourceVolumeFullCopies(){  List<URI> fullCopies=Lists.newArrayList();  Map<URI,List<URI>> fullCopiesMap=new HashMap<>();  for (  URI volumeId : uris(volumeIds)) {    List<URI> volumeFullCopies=getFullCopies(volumeId);    fullCopies.addAll(volumeFullCopies);    fullCopiesMap.put(volumeId,volumeFullCopies);  }  if (!fullCopies.isEmpty()) {    BlockStorageUtils.addVolumesToConsistencyGroup(consistencyGroup,fullCopies);  }  return fullCopiesMap;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName()).append("(id=").append(id).append(",records=").append(sizeRecords()).append(",bytes=").append(sizeBytes()).append(")");  return sb.toString();}  }
class C{  public boolean isAbstract(String className) throws IllegalArgumentException {  checkClass(className);  ClassNode node=getClassNode(className);  return (node.access & Opcodes.ACC_ABSTRACT) == Opcodes.ACC_ABSTRACT;}  }
class C{  @Override protected void reset(){  super.reset();  m_Initialized=false;}  }
class C{  @Override public Serializable saveState(){  final BaseDelegateState state=new BaseDelegateState();  state.m_startBaseStepsFinished=m_startBaseStepsFinished;  state.m_endBaseStepsFinished=m_endBaseStepsFinished;  return state;}  }
class C{  public void testRandomCompositeIds() throws Exception {  DocRouter router=DocRouter.getDocRouter(CompositeIdRouter.NAME);  DocCollection coll=createCollection(TestUtil.nextInt(random(),1,10),router);  StringBuilder idBuilder=new StringBuilder();  for (int i=0; i < 10000; ++i) {    idBuilder.setLength(0);    int numParts=TestUtil.nextInt(random(),1,30);    for (int part=0; part < numParts; ++part) {switch (random().nextInt(5)) {case 0:        idBuilder.append('!');      break;case 1:    idBuilder.append('/');  break;case 2:idBuilder.append(TestUtil.nextInt(random(),-100,1000));break;default :{int length=TestUtil.nextInt(random(),1,10);char[] str=new char[length];TestUtil.randomFixedLengthUnicodeString(random(),str,0,length);idBuilder.append(str);break;}}}String id=idBuilder.toString();try {Slice targetSlice=router.getTargetSlice(id,null,null,coll);assertNotNull(targetSlice);} catch (Exception e) {throw new Exception("Exception routing id '" + id + "'",e);}}}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  public void writeExternal(ObjectOutput out) throws IOException {  ref.write(out,true);}  }
class C{  @Override public Map<String,OperationDeclaration> operationsMap(){  return operationsMap;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  @Override public void emitTuple(HashMap<K,Integer> tuple){  least.emit(tuple);}  }
class C{  protected void initInfo(int record_id,String value){  label1.setText(Msg.translate(Env.getCtx(),m_queryColumns.get(0).toString()));  textField1.addActionListener(this);  if (m_queryColumns.size() > 1) {    label2.setText(Msg.translate(Env.getCtx(),m_queryColumns.get(1).toString()));    textField2.addActionListener(this);  } else {    label2.setVisible(false);    textField2.setVisible(false);  }  if (m_queryColumns.size() > 2) {    label3.setText(Msg.translate(Env.getCtx(),m_queryColumns.get(2).toString()));    textField3.addActionListener(this);  } else {    label3.setVisible(false);    textField3.setVisible(false);  }  if (m_queryColumns.size() > 3) {    label4.setText(Msg.translate(Env.getCtx(),m_queryColumns.get(3).toString()));    textField4.addActionListener(this);  } else {    label4.setVisible(false);    textField4.setVisible(false);  }  if (record_id != 0) {    fieldID=record_id;  } else {    if (value != null && value.length() > 0) {      textField1.setValue(value);    }  }  return;}  }
class C{  public static boolean hasPermission(@NonNull Context context,@NonNull String permission){  return ContextCompat.checkSelfPermission(context,permission) == PackageManager.PERMISSION_GRANTED;}  }
class C{  public Truncate(double min,double max){  super(Number.class,Number.class);  this.min=min;  this.max=max;}  }
class C{  public ForEachFaceletsITCase(String name){  super(name);}  }
class C{  public void testContinuousMode() throws Exception {  depMode=DeploymentMode.CONTINUOUS;  processTest(false);}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  int encrypt(byte[] plain,int plainOffset,int plainLen,byte[] cipher,int cipherOffset){  if ((plainLen % blockSize) != 0) {    throw new ProviderException("Internal error in input buffering");  }  int endIndex=plainOffset + plainLen;  for (; plainOffset < endIndex; plainOffset+=blockSize, cipherOffset+=blockSize) {    for (int i=0; i < blockSize; i++) {      k[i]=(byte)(plain[i + plainOffset] ^ r[i]);    }    embeddedCipher.encryptBlock(k,0,cipher,cipherOffset);    System.arraycopy(cipher,cipherOffset,r,0,blockSize);  }  return plainLen;}  }
class C{  public MentionDetector(JCas jCas,DependencyGraph dependencyGraph){  this.jCas=jCas;  this.dependencyGraph=dependencyGraph;}  }
class C{  public boolean isDelegationTargetIsAbstract(){  return delegationTargetIsAbstract;}  }
class C{  public Object clone() throws CloneNotSupportedException {  DefaultTreeSelectionModel clone=(DefaultTreeSelectionModel)super.clone();  clone.changeSupport=null;  if (selection != null) {    int selLength=selection.length;    clone.selection=new TreePath[selLength];    System.arraycopy(selection,0,clone.selection,0,selLength);  }  clone.listenerList=new EventListenerList();  clone.listSelectionModel=(DefaultListSelectionModel)listSelectionModel.clone();  clone.uniquePaths=new Hashtable<TreePath,Boolean>();  clone.lastPaths=new Hashtable<TreePath,Boolean>();  clone.tempPaths=new TreePath[1];  return clone;}  }
class C{  public ExponetialDecay(){  this(1e-4);}  }
class C{  String readCountryName(Element el) throws IOException {  NodeList list=el.getElementsByTagName("country");  if (list == null || list.getLength() == 0)   throw new IOException("Country name should be given");  return list.item(0).getNodeValue();}  }
class C{  public void processFinished() throws OperatorException {}  }
class C{  @Override protected Scalar parseScalar(Scalar s){  if (s.val.length < 1)   throw new IllegalArgumentException("Scalar must have 1 dimension.");  return new Scalar(s.val[0]);}  }
class C{  public void addCredentials(HomeserverConnectionConfig config){  if (null != config && config.getCredentials() != null) {    SharedPreferences prefs=mContext.getSharedPreferences(PREFS_LOGIN,Context.MODE_PRIVATE);    SharedPreferences.Editor editor=prefs.edit();    ArrayList<HomeserverConnectionConfig> configs=getCredentialsList();    configs.add(config);    ArrayList<JSONObject> serialized=new ArrayList<>(configs.size());    try {      for (      HomeserverConnectionConfig c : configs) {        serialized.add(c.toJson());      }    } catch (    JSONException e) {      throw new RuntimeException("Failed to serialize connection config");    }    String ser=new JSONArray(serialized).toString();    Log.d(LOG_TAG,"Storing " + serialized.size() + " credentials");    editor.putString(PREFS_KEY_CONNECTION_CONFIGS,ser);    editor.apply();  }}  }
class C{  @Override public int compareTo(@Nullable ObsValue other){  if (other == null)   return 1;  int result=0;  result=Integer.compare(getTypeOrdering(),other.getTypeOrdering());  if (result != 0)   return result;  if (uuid != null) {    result=Integer.compare(getUuidOrdering(),other.getUuidOrdering());    if (result != 0)     return result;    result=uuid.compareTo(other.uuid);  } else   if (number != null) {    result=Double.compare(number,other.number);  } else   if (text != null) {    result=text.compareTo(other.text);  } else   if (date != null) {    result=date.compareTo(other.date);  } else   if (instant != null) {    result=instant.compareTo(other.instant);  }  return result;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.PARAMETER_LIST___PARAMETER_1:    return ((InternalEList<?>)getParameter_1()).basicRemove(otherEnd,msgs);case UmplePackage.PARAMETER_LIST___ANONYMOUS_PARAMETER_LIST_11:  return ((InternalEList<?>)getAnonymous_parameterList_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @SuppressWarnings("unchecked") private Volume performRPVolumeIngestion(IngestionRequestContext parentRequestContext,RecoverPointVolumeIngestionContext rpVolumeContext,UnManagedVolume unManagedVolume,Volume volume){  _logger.info("starting RecoverPoint volume ingestion for UnManagedVolume {}",unManagedVolume.forDisplay());  if (null == volume) {    IngestStrategy ingestStrategy=ingestStrategyFactory.buildIngestStrategy(unManagedVolume,IngestStrategyFactory.DISREGARD_PROTECTION);    volume=(Volume)ingestStrategy.ingestBlockObjects(rpVolumeContext,VolumeIngestionUtil.getBlockObjectClass(unManagedVolume));    _logger.info("Ingestion ended for unmanagedvolume {}",unManagedVolume.getNativeGuid());    if (null == volume) {      throw IngestionException.exceptions.generalVolumeException(unManagedVolume.getLabel(),"check the logs for more details");    }  } else {    if (markUnManagedVolumeInactive(parentRequestContext,volume)) {      _logger.info("All the related replicas and parent of unManagedVolume {} have been ingested ",unManagedVolume.getNativeGuid());      unManagedVolume.setInactive(true);      parentRequestContext.getUnManagedVolumesToBeDeleted().add(unManagedVolume);    } else {      _logger.info("Not all the parent/replicas of unManagedVolume {} have been ingested , hence marking as internal",unManagedVolume.getNativeGuid());      volume.addInternalFlags(INTERNAL_VOLUME_FLAGS);    }  }  rpVolumeContext.setManagedBlockObject(volume);  if (null != _dbClient.queryObject(Volume.class,volume.getId())) {    rpVolumeContext.addDataObjectToUpdate(volume,unManagedVolume);  } else {    rpVolumeContext.addBlockObjectToCreate(volume);  }  return volume;}  }
class C{  public HDTVFilter(boolean matchPasses){  super(matchPasses);}  }
class C{  @Override public Toolbar build(){  ToolbarSearch toolbar=new ToolbarSearch(mContext);  toolbar.setData(mAutoCompletionEnabled,mAutoCompletionDynamic,mAutoCompletionSuggestions,mAutoCompletionMode,mThreshold,mOnSearchListener,mOnSearchDynamicListener);  return toolbar;}  }
class C{  public synchronized TCPConnection openConnection() throws IOException {  int id;  do {    lastID=(++lastID) & 0x7FFF;    id=lastID;    if (orig)     id|=0x8000;  } while (connectionTable.get(id) != null);  MultiplexConnectionInfo info=new MultiplexConnectionInfo(id);  info.in=new MultiplexInputStream(this,info,2048);  info.out=new MultiplexOutputStream(this,info,2048);synchronized (connectionTable) {    if (!alive)     throw new IOException("Multiplexer connection dead");    if (numConnections >= maxConnections)     throw new IOException("Cannot exceed " + maxConnections + " simultaneous multiplexed connections");    connectionTable.put(id,info);    ++numConnections;  }synchronized (dataOut) {    try {      dataOut.writeByte(OPEN);      dataOut.writeShort(id);      dataOut.flush();    } catch (    IOException e) {      multiplexLog.log(Log.BRIEF,"exception: ",e);      shutDown();      throw e;    }  }  return new TCPConnection(channel,info.in,info.out);}  }
class C{  public V remove(Object key){synchronized (this) {    Map<K,V> newMap=new HashMap<K,V>(internalMap);    V val=newMap.remove(key);    internalMap=newMap;    return val;  }}  }
class C{  public void defineLocal() throws IOException {  print("defineLocal",null);}  }
class C{  public void testIntbyInt2(){  byte aBytes[]={-1,-1,-1,-1};  byte bBytes[]={-1,-1,-1,-1};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-1,-1,-1,-2,0,0,0,1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private Object createRmiProxy(URI endpoint){  RmiProxyFactoryBean proxyFactory=new RmiProxyFactoryBean();  proxyFactory.setServiceInterface(_endpointInterface);  proxyFactory.setServiceUrl(endpoint.toString());  proxyFactory.setRefreshStubOnConnectFailure(true);  proxyFactory.setCacheStub(false);  proxyFactory.afterPropertiesSet();  Object rmiProxy=proxyFactory.getObject();  _proxyMap.putIfAbsent(endpoint,rmiProxy);  return rmiProxy;}  }
class C{  public TBGraph(final LiveExprNode tf){  this.tf=tf;  this.initCnt=0;  final TBPar initTerms=new TBPar(1);  initTerms.addElement(tf);  final TBParVec pars=initTerms.particleClosure();  for (int i=0; i < pars.size(); i++) {    final TBGraphNode gn=new TBGraphNode(pars.parAt(i));    this.addElement(gn);  }  this.setInitCnt(this.size());  for (int i=0; i < this.size(); i++) {    final TBGraphNode gnSrc=(TBGraphNode)this.elementAt(i);    final TBPar imps=gnSrc.getPar().impliedSuccessors();    final TBParVec succs=imps.particleClosure();    for (int j=0; j < succs.size(); j++) {      final TBPar par=succs.parAt(j);      final TBGraphNode gnDst=findOrCreateNode(par);      gnSrc.nexts.addElement(gnDst);    }  }  for (int i=0; i < this.size(); i++) {    this.getNode(i).setIndex(i);  }}  }
class C{  private UserTransaction startUserTransaction(){  if (wrapInUserTransaction == false) {    return null;  }  UserTransaction userTransaction=null;  try {    userTransaction=UserTransactionHelper.lookupUserTransaction();    userTransaction.begin();  } catch (  Throwable t) {    UserTransactionHelper.returnUserTransaction(userTransaction);    userTransaction=null;    getLog().error("Failed to start UserTransaction for plugin: " + getName(),t);  }  return userTransaction;}  }
class C{  public ClientBuilderForConnector forServer(String uri,@Nullable String version){  configBuilder.withDockerHost(URI.create(uri).toString()).withApiVersion(version);  return this;}  }
class C{  public static boolean invertM(float[] mInv,int mInvOffset,float[] m,int mOffset){  float src0=m[mOffset], src4=m[mOffset + 1], src8=m[mOffset + 2], src12=m[mOffset + 3], src1=m[mOffset + 4], src5=m[mOffset + 5], src9=m[mOffset + 6], src13=m[mOffset + 7], src2=m[mOffset + 8], src6=m[mOffset + 9], src10=m[mOffset + 10], src14=m[mOffset + 11], src3=m[mOffset + 12], src7=m[mOffset + 13], src11=m[mOffset + 14], src15=m[mOffset + 15];  float tmp0=src10 * src15, tmp1=src11 * src14, tmp2=src9 * src15, tmp3=src11 * src13, tmp4=src9 * src14, tmp5=src10 * src13, tmp6=src8 * src15, tmp7=src11 * src12, tmp8=src8 * src14, tmp9=src10 * src12, tmp10=src8 * src13, tmp11=src9 * src12;  float dst0=tmp0 * src5 + tmp3 * src6 + tmp4 * src7;  dst0-=tmp1 * src5 + tmp2 * src6 + tmp5 * src7;  float dst1=tmp1 * src4 + tmp6 * src6 + tmp9 * src7;  dst1-=tmp0 * src4 + tmp7 * src6 + tmp8 * src7;  float dst2=tmp2 * src4 + tmp7 * src5 + tmp10 * src7;  dst2-=tmp3 * src4 + tmp6 * src5 + tmp11 * src7;  float dst3=tmp5 * src4 + tmp8 * src5 + tmp11 * src6;  dst3-=tmp4 * src4 + tmp9 * src5 + tmp10 * src6;  float dst4=tmp1 * src1 + tmp2 * src2 + tmp5 * src3;  dst4-=tmp0 * src1 + tmp3 * src2 + tmp4 * src3;  float dst5=tmp0 * src0 + tmp7 * src2 + tmp8 * src3;  dst5-=tmp1 * src0 + tmp6 * src2 + tmp9 * src3;  float dst6=tmp3 * src0 + tmp6 * src1 + tmp11 * src3;  dst6-=tmp2 * src0 + tmp7 * src1 + tmp10 * src3;  float dst7=tmp4 * src0 + tmp9 * src1 + tmp10 * src2;  dst7-=tmp5 * src0 + tmp8 * src1 + tmp11 * src2;  tmp0=src2 * src7;  tmp1=src3 * src6;  tmp2=src1 * src7;  tmp3=src3 * src5;  tmp4=src1 * src6;  tmp5=src2 * src5;  tmp6=src0 * src7;  tmp7=src3 * src4;  tmp8=src0 * src6;  tmp9=src2 * src4;  tmp10=src0 * src5;  tmp11=src1 * src4;  float dst8=tmp0 * src13 + tmp3 * src14 + tmp4 * src15;  dst8-=tmp1 * src13 + tmp2 * src14 + tmp5 * src15;  float dst9=tmp1 * src12 + tmp6 * src14 + tmp9 * src15;  dst9-=tmp0 * src12 + tmp7 * src14 + tmp8 * src15;  float dst10=tmp2 * src12 + tmp7 * src13 + tmp10 * src15;  dst10-=tmp3 * src12 + tmp6 * src13 + tmp11 * src15;  float dst11=tmp5 * src12 + tmp8 * src13 + tmp11 * src14;  dst11-=tmp4 * src12 + tmp9 * src13 + tmp10 * src14;  float dst12=tmp2 * src10 + tmp5 * src11 + tmp1 * src9;  dst12-=tmp4 * src11 + tmp0 * src9 + tmp3 * src10;  float dst13=tmp8 * src11 + tmp0 * src8 + tmp7 * src10;  dst13-=tmp6 * src10 + tmp9 * src11 + tmp1 * src8;  float dst14=tmp6 * src9 + tmp11 * src11 + tmp3 * src8;  dst14-=tmp10 * src11 + tmp2 * src8 + tmp7 * src9;  float dst15=tmp10 * src10 + tmp4 * src8 + tmp9 * src9;  dst15-=tmp8 * src9 + tmp11 * src10 + tmp5 * src8;  float det=src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;  if (det == 0.0f) {  }  det=1.0f / det;  mInv[mInvOffset + 0]=dst0 * det;  mInv[mInvOffset + 1]=dst1 * det;  mInv[mInvOffset + 2]=dst2 * det;  mInv[mInvOffset + 3]=dst3 * det;  mInv[mInvOffset + 4]=dst4 * det;  mInv[mInvOffset + 5]=dst5 * det;  mInv[mInvOffset + 6]=dst6 * det;  mInv[mInvOffset + 7]=dst7 * det;  mInv[mInvOffset + 8]=dst8 * det;  mInv[mInvOffset + 9]=dst9 * det;  mInv[mInvOffset + 10]=dst10 * det;  mInv[mInvOffset + 11]=dst11 * det;  mInv[mInvOffset + 12]=dst12 * det;  mInv[mInvOffset + 13]=dst13 * det;  mInv[mInvOffset + 14]=dst14 * det;  mInv[mInvOffset + 15]=dst15 * det;  return true;}  }
class C{  public void addSuffix(String suffix,boolean selected){  if (suffixAction == null) {    suffixAction=new UpdateSuffixListAction(listModel);  }  final JCheckBox cb=(JCheckBox)suffixList.add(new JCheckBox(suffix));  cb.setOpaque(false);  checkboxes.addElement(cb);  cb.setSelected(selected);  cb.addActionListener(suffixAction);  if (selected) {    listModel.addSuffix(suffix);  }  cb.addFocusListener(listFocusListener);}  }
class C{  public boolean isAccessibilityEnabled(){  return isTouchExplorationEnabled() || containsGoogleAccessibilityService();}  }
class C{  public void removeCondition(AbstractCondition condition){  Node<AbstractCondition> node=getNode(condition);  if (node != null) {    if (node.getParent() == null) {      getRootNodes().remove(node);    } else {      node.getParent().getChildren().remove(node);    }  }}  }
class C{  public final void println(float f) throws IOException {  println(String.valueOf(f));}  }
class C{  public MergingLexer(final Lexer original,final MergeTuple... mergeTuples){  super(original);  this.mergeFunction=new LexerMergeFunction(mergeTuples);}  }
class C{  @SuppressWarnings("static-access") private void resetOptionAttemptTranslations(){  m_optionAttemptTranslations.setSelected(s_parameters.isAttemptTranslation());}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  final JComponent popup=(JComponent)c;  final Image hShadowBg=(Image)popup.getClientProperty(ShadowPopupFactory.PROP_HORIZONTAL_BACKGROUND);  if (hShadowBg != null) {    g.drawImage(hShadowBg,x,y + height - 5,c);  }  final Image vShadowBg=(Image)popup.getClientProperty(ShadowPopupFactory.PROP_VERTICAL_BACKGROUND);  if (vShadowBg != null) {    g.drawImage(vShadowBg,x + width - 5,y,c);  }  g.drawImage(SHADOW,x + 5,y + height - 5,x + 10,y + height,0,6,5,11,null,c);  g.drawImage(SHADOW,x + 10,y + height - 5,x + width - 5,y + height,5,6,6,11,null,c);  g.drawImage(SHADOW,x + width - 5,y + 5,x + width,y + 10,6,0,11,5,null,c);  g.drawImage(SHADOW,x + width - 5,y + 10,x + width,y + height - 5,6,5,11,6,null,c);  g.drawImage(SHADOW,x + width - 5,y + height - 5,x + width,y + height,6,6,11,11,null,c);}  }
class C{  public int calcHash(char[] buffer,int start,int len){  int hash=_hashSeed;  for (int i=0; i < len; ++i) {    hash=(hash * HASH_MULT) + (int)buffer[i];  }  return (hash == 0) ? 1 : hash;}  }
class C{  private void sendTrackBroadcast(int actionId,long trackId){  Intent intent=new Intent().setAction(getString(actionId)).putExtra(getString(R.string.track_id_broadcast_extra),trackId);  sendBroadcast(intent,getString(R.string.permission_notification_value));  if (PreferencesUtils.getBoolean(this,R.string.allow_access_key,PreferencesUtils.ALLOW_ACCESS_DEFAULT)) {    sendBroadcast(intent,getString(R.string.broadcast_notifications_permission));  }}  }
class C{  public static HappySQL mysql(String dbHost,String userName,String password,String dbName) throws ClassNotFoundException, SQLException {  return new HappyMySQL(dbHost,userName,password,dbName);}  }
class C{  public double logMarginalLikelihoodAICM(List<Double> v){  double sum=0;  final int size=v.size();  for (int i=0; i < size; i++)   sum+=v.get(i);  double mean=sum / (double)size;  double var=0;  for (int i=0; i < size; i++)   var+=(v.get(i) - mean) * (v.get(i) - mean);  var/=(double)size - 1;  return 2 * var - 2 * mean;}  }
class C{  public void addIdentity(DiscoverInfo.Identity identity){  identities.add(identity);  renewEntityCapsVersion();}  }
class C{  public static RegexMatcher buildRegexMatcher(Map<String,String> operatorProperties) throws PlanGenException, DataFlowException, IOException {  String regex=OperatorBuilderUtils.getRequiredProperty(REGEX,operatorProperties);  PlanGenUtils.planGenAssert(!regex.trim().isEmpty(),"regex is empty");  List<Attribute> attributeList=OperatorBuilderUtils.constructAttributeList(operatorProperties);  RegexPredicate regexPredicate=new RegexPredicate(regex,attributeList,DataConstants.getTrigramAnalyzer());  RegexMatcher regexMatcher=new RegexMatcher(regexPredicate);  Integer limitInt=OperatorBuilderUtils.findLimit(operatorProperties);  if (limitInt != null) {    regexMatcher.setLimit(limitInt);  }  Integer offsetInt=OperatorBuilderUtils.findOffset(operatorProperties);  if (offsetInt != null) {    regexMatcher.setOffset(offsetInt);  }  return regexMatcher;}  }
class C{  public Signature sign(final byte[] salt){  final Signer signer=new Signer(this.keyPair);  return signer.sign(this.getPayload(salt));}  }
class C{  public synchronized boolean isLockOwner(Connection conn,String lockName){  lockName=lockName.intern();  return getThreadLocks().contains(lockName);}  }
class C{  @Override public void finish() throws IOException {  if (out == null) {    throw new IOException("Stream is closed");  }  if (cDir == null) {    return;  }  if (entries.isEmpty()) {    throw new ZipException("No entries");  }  if (currentEntry != null) {    closeEntry();  }  int cdirSize=cDir.size();  writeLong(cDir,ENDSIG);  writeShort(cDir,0);  writeShort(cDir,0);  writeShort(cDir,entries.size());  writeShort(cDir,entries.size());  writeLong(cDir,cdirSize);  writeLong(cDir,offset);  writeShort(cDir,commentBytes.length);  if (commentBytes.length > 0) {    cDir.write(commentBytes);  }  cDir.writeTo(out);  cDir=null;}  }
class C{  public static RandomMixedRunner serializableInstance(){  return new RandomMixedRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public CubeDesc updateCubeDesc(CubeDesc desc) throws IOException {  if (desc.getUuid() == null || desc.getName() == null) {    throw new IllegalArgumentException();  }  String name=desc.getName();  if (!cubeDescMap.containsKey(name)) {    throw new IllegalArgumentException("CubeDesc '" + name + "' does not exist.");  }  try {    desc.init(config);  } catch (  Exception e) {    logger.warn("Broken cube desc " + desc,e);    desc.addError(e.getMessage());    return desc;  }  CubeMetadataValidator validator=new CubeMetadataValidator();  ValidateContext context=validator.validate(desc);  if (!context.ifPass()) {    return desc;  }  desc.setSignature(desc.calculateSignature());  String path=desc.getResourcePath();  getStore().putResource(path,desc,CUBE_DESC_SERIALIZER);  CubeDesc ndesc=loadCubeDesc(path,false);  cubeDescMap.put(ndesc.getName(),desc);  return ndesc;}  }
class C{  public static boolean isAppletAvailable(String applet){  return RootTools.isAppletAvailable(applet,"");}  }
class C{  public static String toShortString(ClusterNode n){  return "ClusterNode [id=" + n.id() + ", order="+ n.order()+ ", addr="+ n.addresses()+ ", daemon="+ n.isDaemon()+ ']';}  }
class C{  public ByteBuffer readBinary() throws IOException {  _messageReader.next();  return _messageReader.getBinary();}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,bytes.length);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void testBindPlacement03(){  new Helper(){{      given=select(varNode(x),where(stmtPatternWithVar("x1"),stmtPatternWithVarOptional("y1"),stmtPatternWithVar("y1"),stmtPatternWithVars("y1","z1"),assignmentWithVar("z1","y1")));      expected=select(varNode(x),where(stmtPatternWithVar("x1"),stmtPatternWithVarOptional("y1"),stmtPatternWithVar("y1"),assignmentWithVar("z1","y1"),stmtPatternWithVars("y1","z1")));    }  }.testWhileIgnoringExplainHints();}  }
class C{  public String urlTipText(){  return "The URL of the database";}  }
class C{  public final void writeLong(long v){  tempBuffer[0]=(byte)(v >>> 56);  tempBuffer[1]=(byte)(v >>> 48);  tempBuffer[2]=(byte)(v >>> 40);  tempBuffer[3]=(byte)(v >>> 32);  tempBuffer[4]=(byte)(v >>> 24);  tempBuffer[5]=(byte)(v >>> 16);  tempBuffer[6]=(byte)(v >>> 8);  tempBuffer[7]=(byte)(v >>> 0);  write(tempBuffer,0,8);}  }
class C{  public SunCertPathBuilderException(Throwable cause){  super(cause);}  }
class C{  public static boolean isValid(String wwnString){  if (wwnString.length() != 18) {    return false;  }  Pattern pattern=Pattern.compile("^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}");  Matcher matcher=pattern.matcher(wwnString);  boolean found=false;  while (matcher.find()) {    found=true;  }  return found;}  }
class C{  protected void addStatePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TraceStateExited_state_feature"),getString("_UI_PropertyDescriptor_description","_UI_TraceStateExited_state_feature","_UI_TraceStateExited_type"),SexecPackage.Literals.TRACE_STATE_EXITED__STATE,true,false,true,null,null,null));}  }
class C{  public static double rRSErawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double sumOfSquaredRelativeError=0.0;  double expectedResult;  double result;  double relativeError;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  double dvSumOfSquaredRelativeError=dv.getDependentVariableSumOfSquaredRelativeError(chromosomeNum);  for (int i=0; i < dvValues.length; i++) {    expectedResult=dvValues[i];    result=ind.eval(chromosomeNum,useTrainingData,i);    if (expectedResult == 0.0) {      expectedResult=RELATIVE_ERROR_ZERO_FACTOR;      result+=RELATIVE_ERROR_ZERO_FACTOR;      System.err.println("Warning: expected result (test value) is 0 in rRSE fitness calculation. Adjusting to avoid division by zero.");    }    relativeError=(result - expectedResult) / expectedResult;    sumOfSquaredRelativeError+=relativeError * relativeError;  }  if (dvSumOfSquaredRelativeError == 0.0) {    dvSumOfSquaredRelativeError=RELATIVE_ERROR_ZERO_FACTOR;    System.err.println("Warning: sum of squared relative error for dependent variable is 0 in rRSE fitness calculation. Adjusting to avoid division by zero.");  }  return (sumOfSquaredRelativeError / dvSumOfSquaredRelativeError);}  }
class C{  public static void clear(){  responseHeaderDB.clear();  try {    fileDB.clear();  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }  try {    fileDBunbuffered.clear();  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }}  }
class C{  @Override public void transmitPartialDiff(final Task<Diff> result){  writeOutput(result);}  }
class C{  public boolean useEnergy(double amount){  if (canUseEnergy(amount) && !FMLCommonHandler.instance().getEffectiveSide().isClient()) {    energyStored-=amount;    return true;  }  return false;}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodens04.class,args);}  }
class C{  public void createDefaultColumnsFromModel(){  DataLineModel<?,?> dlm=(DataLineModel<?,?>)dataModel;  if (dlm != null) {    TableColumnModel cm=getColumnModel();    while (cm.getColumnCount() > 0) {      cm.removeColumn(cm.getColumn(0));    }    for (int i=0; i < dlm.getColumnCount(); i++) {      TableColumn newColumn=dlm.getTableColumn(i);      if (newColumn != null) {        addColumn(newColumn);      }    }  }}  }
class C{  public static Map duplicateMap(Map map,boolean doKeysLower,boolean deepCopy) throws PageException {  if (doKeysLower) {    Map newMap;    try {      newMap=(Map)ClassUtil.loadInstance(map.getClass());    } catch (    ClassException e) {      newMap=new HashMap();    }    boolean inside=ThreadLocalDuplication.set(map,newMap);    try {      Iterator it=map.keySet().iterator();      while (it.hasNext()) {        Object key=it.next();        if (deepCopy)         newMap.put(StringUtil.toLowerCase(Caster.toString(key)),duplicate(map.get(key),deepCopy)); else         newMap.put(StringUtil.toLowerCase(Caster.toString(key)),map.get(key));      }    }  finally {      if (!inside)       ThreadLocalDuplication.reset();    }    return newMap;  }  return duplicateMap(map,deepCopy);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public synchronized void clearYTextLabels(int scale){  mYTextLabels.get(scale).clear();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.NEW_EXPRESSION__TYPE_ARGS:    getTypeArgs().clear();  getTypeArgs().addAll((Collection<? extends TypeRef>)newValue);return;case N4JSPackage.NEW_EXPRESSION__CALLEE:setCallee((Expression)newValue);return;case N4JSPackage.NEW_EXPRESSION__ARGUMENTS:getArguments().clear();getArguments().addAll((Collection<? extends Argument>)newValue);return;case N4JSPackage.NEW_EXPRESSION__WITH_ARGS:setWithArgs((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected void assertArrayEquals(Object[] expected,Object[] value){  String message="expected array: " + InvokerHelper.toString(expected) + " value array: "+ InvokerHelper.toString(value);  assertNotNull(message + ": expected should not be null",expected);  assertNotNull(message + ": value should not be null",value);  assertEquals(message,expected.length,value.length);  for (int i=0, size=expected.length; i < size; i++) {    assertEquals("value[" + i + "] when "+ message,expected[i],value[i]);  }}  }
class C{  private Finished(byte[] verifyData,InetSocketAddress peerAddress){  super(peerAddress);  this.verifyData=Arrays.copyOf(verifyData,verifyData.length);}  }
class C{  public boolean matchesThisPacket(DatapathId switchDpid,OFPort inPort,Ethernet packet,AllowDropPair adp){  IPacket pkt=packet.getPayload();  IPv4 pkt_ip=null;  TCP pkt_tcp=null;  UDP pkt_udp=null;  TransportPort pkt_tp_src=TransportPort.NONE;  TransportPort pkt_tp_dst=TransportPort.NONE;  if (any_dpid == false && !dpid.equals(switchDpid))   return false;  if (any_in_port == false && !in_port.equals(inPort))   return false;  if (action == FirewallRule.FirewallAction.DROP) {    if (!OFPort.ANY.equals(this.in_port)) {      adp.drop.setExact(MatchField.IN_PORT,this.in_port);    }  } else {    if (!OFPort.ANY.equals(this.in_port)) {      adp.allow.setExact(MatchField.IN_PORT,this.in_port);    }  }  if (any_dl_src == false && !dl_src.equals(packet.getSourceMACAddress()))   return false;  if (action == FirewallRule.FirewallAction.DROP) {    if (!MacAddress.NONE.equals(this.dl_src)) {      adp.drop.setExact(MatchField.ETH_SRC,this.dl_src);    }  } else {    if (!MacAddress.NONE.equals(this.dl_src)) {      adp.allow.setExact(MatchField.ETH_SRC,this.dl_src);    }  }  if (any_dl_dst == false && !dl_dst.equals(packet.getDestinationMACAddress()))   return false;  if (action == FirewallRule.FirewallAction.DROP) {    if (!MacAddress.NONE.equals(this.dl_dst)) {      adp.drop.setExact(MatchField.ETH_DST,this.dl_dst);    }  } else {    if (!MacAddress.NONE.equals(this.dl_dst)) {      adp.allow.setExact(MatchField.ETH_DST,this.dl_dst);    }  }  if (any_dl_type == false) {    if (dl_type.equals(EthType.ARP)) {      if (packet.getEtherType() != EthType.ARP)       return false; else {        if (action == FirewallRule.FirewallAction.DROP) {          if (!EthType.NONE.equals(this.dl_type)) {            adp.drop.setExact(MatchField.ETH_TYPE,this.dl_type);          }        } else {          if (!EthType.NONE.equals(this.dl_type)) {            adp.allow.setExact(MatchField.ETH_TYPE,this.dl_type);          }        }      }    } else     if (dl_type.equals(EthType.IPv4)) {      if (packet.getEtherType() != EthType.IPv4)       return false; else {        if (action == FirewallRule.FirewallAction.DROP) {          if (!IpProtocol.NONE.equals(this.nw_proto)) {            adp.drop.setExact(MatchField.IP_PROTO,this.nw_proto);          }        } else {          if (!IpProtocol.NONE.equals(this.nw_proto)) {            adp.allow.setExact(MatchField.IP_PROTO,this.nw_proto);          }        }        pkt_ip=(IPv4)pkt;        if (any_nw_src == false && !nw_src_prefix_and_mask.matches(pkt_ip.getSourceAddress()))         return false;        if (action == FirewallRule.FirewallAction.DROP) {          if (!IPv4AddressWithMask.NONE.equals(this.nw_src_prefix_and_mask)) {            adp.drop.setMasked(MatchField.IPV4_SRC,nw_src_prefix_and_mask);          }        } else {          if (!IPv4AddressWithMask.NONE.equals(this.nw_src_prefix_and_mask)) {            adp.allow.setMasked(MatchField.IPV4_SRC,nw_src_prefix_and_mask);          }        }        if (any_nw_dst == false && !nw_dst_prefix_and_mask.matches(pkt_ip.getDestinationAddress()))         return false;        if (action == FirewallRule.FirewallAction.DROP) {          if (!IPv4AddressWithMask.NONE.equals(this.nw_dst_prefix_and_mask)) {            adp.drop.setMasked(MatchField.IPV4_DST,nw_dst_prefix_and_mask);          }        } else {          if (!IPv4AddressWithMask.NONE.equals(this.nw_dst_prefix_and_mask)) {            adp.allow.setMasked(MatchField.IPV4_DST,nw_dst_prefix_and_mask);          }        }        if (any_nw_proto == false) {          if (nw_proto.equals(IpProtocol.TCP)) {            if (!pkt_ip.getProtocol().equals(IpProtocol.TCP)) {              return false;            } else {              pkt_tcp=(TCP)pkt_ip.getPayload();              pkt_tp_src=pkt_tcp.getSourcePort();              pkt_tp_dst=pkt_tcp.getDestinationPort();            }          } else           if (nw_proto.equals(IpProtocol.UDP)) {            if (!pkt_ip.getProtocol().equals(IpProtocol.UDP)) {              return false;            } else {              pkt_udp=(UDP)pkt_ip.getPayload();              pkt_tp_src=pkt_udp.getSourcePort();              pkt_tp_dst=pkt_udp.getDestinationPort();            }          } else           if (nw_proto.equals(IpProtocol.ICMP)) {            if (!pkt_ip.getProtocol().equals(IpProtocol.ICMP)) {              return false;            } else {            }          }          if (action == FirewallRule.FirewallAction.DROP) {            if (!IpProtocol.NONE.equals(this.nw_proto)) {              adp.drop.setExact(MatchField.IP_PROTO,this.nw_proto);            }          } else {            if (!IpProtocol.NONE.equals(this.nw_proto)) {              adp.allow.setExact(MatchField.IP_PROTO,this.nw_proto);            }          }          if (pkt_tcp != null || pkt_udp != null) {            if (tp_src.getPort() != 0 && tp_src.getPort() != pkt_tp_src.getPort()) {              return false;            }            if (action == FirewallRule.FirewallAction.DROP) {              if (pkt_tcp != null) {                if (!TransportPort.NONE.equals(this.tp_src)) {                  adp.drop.setExact(MatchField.TCP_SRC,this.tp_src);                }              } else {                if (!TransportPort.NONE.equals(this.tp_src)) {                  adp.drop.setExact(MatchField.UDP_SRC,this.tp_src);                }              }            } else {              if (pkt_tcp != null) {                if (!TransportPort.NONE.equals(this.tp_src)) {                  adp.allow.setExact(MatchField.TCP_SRC,this.tp_src);                }              } else {                if (!TransportPort.NONE.equals(this.tp_src)) {                  adp.allow.setExact(MatchField.UDP_SRC,this.tp_src);                }              }            }            if (tp_dst.getPort() != 0 && tp_dst.getPort() != pkt_tp_dst.getPort()) {              return false;            }            if (action == FirewallRule.FirewallAction.DROP) {              if (pkt_tcp != null) {                if (!TransportPort.NONE.equals(this.tp_dst)) {                  adp.drop.setExact(MatchField.TCP_DST,this.tp_dst);                }              } else {                if (!TransportPort.NONE.equals(this.tp_dst)) {                  adp.drop.setExact(MatchField.UDP_DST,this.tp_dst);                }              }            } else {              if (pkt_tcp != null) {                if (!TransportPort.NONE.equals(this.tp_dst)) {                  adp.allow.setExact(MatchField.TCP_DST,this.tp_dst);                }              } else {                if (!TransportPort.NONE.equals(this.tp_dst)) {                  adp.allow.setExact(MatchField.UDP_DST,this.tp_dst);                }              }            }          }        }      }    } else {      return false;    }  }  if (action == FirewallRule.FirewallAction.DROP) {    if (!EthType.NONE.equals(this.dl_type)) {      adp.drop.setExact(MatchField.ETH_TYPE,this.dl_type);    }  } else {    if (!EthType.NONE.equals(this.dl_type)) {      adp.allow.setExact(MatchField.ETH_TYPE,this.dl_type);    }  }  return true;}  }
class C{  public boolean isResizeInProgress(){  return resizeStarted;}  }
class C{  @Override public AsyncFuture<Void> transform(Void result) throws Exception {  return sink.stop();}  }
class C{  protected Boolean isMaxMessageSizeExceeded() throws MessagingException {  Boolean isMaxMessageSizeExceeded;  if (null == (isMaxMessageSizeExceeded=isMaxMessageSizeExceededBasic())) {    updateMaxMessageSizeExceeded();    return isMaxMessageSizeExceeded();  }  return isMaxMessageSizeExceeded;}  }
class C{  @Override public int size(){  return super.size() + ((this.buffer == null) ? 0 : this.buffer.size());}  }
class C{  @Override public int compareTo(BerkeleyLocation that){  if (this == that || this.equals(that))   return 0;  if (this.getStart() != null && that.getStart() != null) {    if (this.getStart() < that.getStart())     return -1;    if (this.getStart() > that.getStart())     return 1;  }  if (this.getEnd() != null && that.getEnd() != null) {    if (this.getEnd() < that.getEnd())     return -1;    if (this.getEnd() > that.getEnd())     return 1;  }  if (this.getEnvelopeStart() != null && that.getEnvelopeStart() != null) {    if (this.getEnvelopeStart() < that.getEnvelopeStart())     return -1;    if (this.getEnvelopeStart() > that.getEnvelopeStart())     return 1;  }  if (this.getEnvelopeEnd() != null && that.getEnvelopeEnd() != null) {    if (this.getEnvelopeEnd() < that.getEnvelopeEnd())     return -1;    if (this.getEnvelopeEnd() > that.getEnvelopeEnd())     return 1;  }  if (this.getHmmStart() != null && that.getHmmStart() != null) {    if (this.getHmmStart() < that.getHmmStart())     return -1;    if (this.getHmmStart() > that.getHmmStart())     return 1;  }  if (this.getHmmEnd() != null && that.getHmmEnd() != null) {    if (this.getHmmEnd() < that.getHmmEnd())     return -1;    if (this.getHmmEnd() > that.getHmmEnd())     return 1;  }  if (this.getScore() != null && that.getScore() != null) {    if (this.getScore() < that.getScore())     return -1;    if (this.getScore() > that.getScore())     return 1;  }  if (this.geteValue() != null && that.geteValue() != null) {    if (this.geteValue() < that.geteValue())     return -1;    if (this.geteValue() > that.geteValue())     return 1;  }  throw new IllegalStateException("Trying to compare a BerkeleyLocation that has no state.  This: " + this + "\n\nThat: "+ that);}  }
class C{  boolean isReadyForDisplay(){  if (mRootToken.waitingToShow && mService.mAppTransition.isTransitionSet()) {    return false;  }  return mHasSurface && mPolicyVisibility && !mDestroying&& ((!mAttachedHidden && mViewVisibility == View.VISIBLE && !mRootToken.hidden) || mWinAnimator.mAnimation != null || ((mAppToken != null) && (mAppToken.mAppAnimator.animation != null)));}  }
class C{  @Override public Document build(String uri) throws ParsingException, ValidityException, IOException {  return build(new InputSource(uri));}  }
class C{  private void publishDomain(String domainName,String requestingHostName){  DomainResource domain=loadByForeignKey(DomainResource.class,domainName,clock.nowUtc());  try {    Update update=new Update(toAbsoluteName(findTldFromName(domainName)));    update.delete(toAbsoluteName(domainName),Type.ANY);    if (domain != null) {      deleteSubordinateHostAddressSet(domain,requestingHostName,update);      if (domain.shouldPublishToDns()) {        addInBailiwickNameServerSet(domain,update);        update.add(makeNameServerSet(domain));        update.add(makeDelegationSignerSet(domain));      }    }    Message response=transport.send(update);    verify(response.getRcode() == Rcode.NOERROR,"DNS server failed domain update for '%s' rcode: %s",domainName,Rcode.string(response.getRcode()));  } catch (  IOException e) {    throw new RuntimeException("publishDomain failed: " + domainName,e);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.316 -0500",hash_original_method="165B5BC520C58D38E1ED3303B481AD06",hash_generated_method="31A30F6585BFDDD1EB1245A8A7351220") final boolean isOwnedBy(AbstractQueuedSynchronizer sync){  return sync == AbstractQueuedSynchronizer.this;}  }
class C{  public void clear(float r,float g,float b,float a,double depth){  if (this.geometryBuffer != null) {    this.geometryBuffer.bindFramebuffer(false);    GL11.glClearColor(r,g,b,a);    GL11.glClearDepth(depth);    GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);  }}  }
class C{  private String highlightField(Query query,String fieldName,String text) throws IOException, InvalidTokenOffsetsException {  TokenStream tokenStream=new MockAnalyzer(random(),MockTokenizer.SIMPLE,true,MockTokenFilter.ENGLISH_STOPSET).tokenStream(fieldName,text);  SimpleHTMLFormatter formatter=new SimpleHTMLFormatter();  MyQueryScorer scorer=new MyQueryScorer(query,fieldName,FIELD_NAME);  Highlighter highlighter=new Highlighter(formatter,scorer);  highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));  String rv=highlighter.getBestFragments(tokenStream,text,1,"(FIELD TEXT TRUNCATED)");  return rv.length() == 0 ? text : rv;}  }
class C{  public String toString(){  if (the_symbol() != null)   return super.toString() + the_symbol(); else   return super.toString() + "$$MISSING-SYMBOL$$";}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SRuntimePackage.EXECUTION_EVENT__RAISED:    return raised != RAISED_EDEFAULT;case SRuntimePackage.EXECUTION_EVENT__SCHEDULED:  return scheduled != SCHEDULED_EDEFAULT;case SRuntimePackage.EXECUTION_EVENT__DIRECTION:return direction != DIRECTION_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public boolean isEmpty(){  return remaining() == 0L;}  }
class C{  private List<?> checkValueAndIndex(CompositeData value){  checkValueType(value);  List<?> index=internalCalculateIndex(value);  if (dataMap.containsKey(index)) {    throw new KeyAlreadyExistsException("Argument value's index, calculated according to this TabularData " + "instance's tabularType, already refers to a value in this table.");  }  return index;}  }
class C{  public void test_max_uses_ORDER_BY_not_GT(){  final BigdataValueFactory f=BigdataValueFactoryImpl.getInstance(getName());  final IVariable<IV> org=Var.var("org");  final IVariable<IV> auth=Var.var("auth");  final IVariable<IV> book=Var.var("book");  final IVariable<IV> lprice=Var.var("lprice");  final IConstant<String> org1=new Constant<String>("org1");  final IConstant<String> org2=new Constant<String>("org2");  final IConstant<String> auth1=new Constant<String>("auth1");  final TermId tid1=new TermId<BigdataValue>(VTE.LITERAL,1);  tid1.setValue(f.createLiteral("auth2"));  final IConstant<IV> auth2=new Constant<IV>(tid1);  final IConstant<String> auth3=new Constant<String>("auth3");  final IConstant<String> book1=new Constant<String>("book1");  final IConstant<String> book2=new Constant<String>("book2");  final IConstant<String> book3=new Constant<String>("book3");  final IConstant<String> book4=new Constant<String>("book4");  final IConstant<XSDNumericIV<BigdataLiteral>> price5=new Constant<XSDNumericIV<BigdataLiteral>>(new XSDNumericIV<BigdataLiteral>(5));  final IConstant<XSDNumericIV<BigdataLiteral>> price7=new Constant<XSDNumericIV<BigdataLiteral>>(new XSDNumericIV<BigdataLiteral>(7));  final IConstant<XSDNumericIV<BigdataLiteral>> price9=new Constant<XSDNumericIV<BigdataLiteral>>(new XSDNumericIV<BigdataLiteral>(9));  final IBindingSet data[]=new IBindingSet[]{new ListBindingSet(new IVariable<?>[]{org,auth,book,lprice},new IConstant[]{org1,auth1,book1,price9}),new ListBindingSet(new IVariable<?>[]{org,auth,book,lprice},new IConstant[]{org1,auth1,book2,price5}),new ListBindingSet(new IVariable<?>[]{org,auth,book,lprice},new IConstant[]{org1,auth2,book3,auth2}),new ListBindingSet(new IVariable<?>[]{org,auth,book,lprice},new IConstant[]{org2,auth3,book4,price7})};  price9.get().setValue(f.createLiteral("9",XSD.INT));  price5.get().setValue(f.createLiteral("5",XSD.INT));  price7.get().setValue(f.createLiteral("7",XSD.INT));  final MAX op=new MAX(false,lprice);  assertFalse(op.isDistinct());  assertFalse(op.isWildcard());  op.reset();  for (  IBindingSet bs : data) {    op.get(bs);  }  assertEquals(price9.get(),op.done());}  }
class C{  protected void walk(Node rootNode,CssSelector cssSelector,List<Node> result){  CssSelector previousCssSelector=cssSelector.getPrevCssSelector();  Combinator combinator=previousCssSelector != null ? previousCssSelector.getCombinator() : Combinator.DESCENDANT;switch (combinator) {case DESCENDANT:    JoddArrayList<Node> nodes=new JoddArrayList<>();  int childCount=rootNode.getChildNodesCount();for (int i=0; i < childCount; i++) {  nodes.add(rootNode.getChild(i));}walkDescendantsIteratively(nodes,cssSelector,result);break;case CHILD:childCount=rootNode.getChildNodesCount();for (int i=0; i < childCount; i++) {Node node=rootNode.getChild(i);selectAndAdd(node,cssSelector,result);}break;case ADJACENT_SIBLING:Node node=rootNode.getNextSiblingElement();if (node != null) {selectAndAdd(node,cssSelector,result);}break;case GENERAL_SIBLING:node=rootNode;while (true) {node=node.getNextSiblingElement();if (node == null) {break;}selectAndAdd(node,cssSelector,result);}break;}}  }
class C{  public static String md5Hash(byte[] data) throws NoSuchAlgorithmException {  return md5Hash(data,data.length);}  }
class C{  @Override protected void createLabels(){  this.addLabel("(PDF)");}  }
class C{  public static <K,V,T>EntryProcessor<K,V,T> wrap(GridKernalContext ctx,@Nullable EntryProcessor<K,V,T> proc){  if (proc == null || proc instanceof EntryProcessorResourceInjectorProxy)   return proc;  GridResourceProcessor rsrcProcessor=ctx.resource();  return rsrcProcessor.isAnnotationsPresent(null,proc,GridResourceIoc.AnnotationSet.ENTRY_PROCESSOR) ? new EntryProcessorResourceInjectorProxy<>(proc) : proc;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:35.919 -0400",hash_original_method="048650AFF94B01A571A17F813CE8142B",hash_generated_method="570265486E6BAC8556276C3D4D46AB4B") public boolean dismissPopupMenus(){  boolean result=hideOverflowMenu();  result|=hideSubMenus();  return result;}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  public String replaceExactlyOnce(String original){  Matcher matcher=searchPattern.matcher(original);  if (!matcher.find()) {    String msg="Pattern not found!\nTemplate:" + source + "\nPattern:\n"+ searchPattern;    throw new IllegalStateException(msg);  }  StringBuffer sb=new StringBuffer();  matcher.appendReplacement(sb,replacement);  if (matcher.find()) {    String msg="Pattern found more than once!\nTemplate:" + source + "\nPattern:\n"+ searchPattern;    throw new IllegalStateException(msg);  }  matcher.appendTail(sb);  return sb.toString();}  }
class C{  private JPEGImageIO(){}  }
class C{  @Override final public boolean isSparql10(){  return false;}  }
class C{  public static boolean hasNoExplicitBound(final AnnotatedTypeMirror wildcard){  return ((Type.WildcardType)wildcard.getUnderlyingType()).isUnbound();}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY).setContentRequired(false);}  }
class C{  public BusinessObjectData createBusinessObjectDataFromEntity(BusinessObjectDataEntity businessObjectDataEntity){  return createBusinessObjectDataFromEntity(businessObjectDataEntity,false);}  }
class C{  public InvalidityDate(byte[] encoding) throws IOException {  super(encoding);  date=(Date)ASN1.decode(encoding);}  }
class C{  public NameAlreadyBoundException(){  super();}  }
class C{  public static void copyFromTo(final Plan in,Plan out){  out.getPlanElements().clear();  out.setScore(in.getScore());  out.setType(in.getType());  for (  PlanElement pe : in.getPlanElements()) {    if (pe instanceof Activity) {      out.getPlanElements().add(createActivity((Activity)pe));    } else     if (pe instanceof Leg) {      out.getPlanElements().add(createLeg((Leg)pe));    } else {      throw new IllegalArgumentException("unrecognized plan element type discovered");    }  }}  }
class C{  public boolean update(double value){  boolean changed=false;  if (value < min) {    min=value;    changed=true;  }  if (value > max) {    max=value;    changed=true;  }  return changed;}  }
class C{  private List<Entity> extractHashtagsWithIndices(final String text,final boolean checkUrlOverlap){  if (text == null || text.length() == 0)   return Collections.emptyList();  boolean found=false;  for (  final char c : text.toCharArray()) {    if (c == '#' || c == FULLWIDTH_NUMBER_SIGN) {      found=true;      break;    }  }  if (!found)   return Collections.emptyList();  final ArrayList<Entity> extracted=new ArrayList<Entity>();  final Matcher matcher=Regex.VALID_HASHTAG.matcher(text);  while (matcher.find()) {    final String after=text.substring(matcher.end());    if (!Regex.INVALID_HASHTAG_MATCH_END.matcher(after).find()) {      extracted.add(new Entity(matcher,Entity.Type.HASHTAG,Regex.VALID_HASHTAG_GROUP_TAG));    }  }  if (checkUrlOverlap) {    final List<Entity> urls=extractURLsWithIndices(text);    if (!urls.isEmpty()) {      extracted.addAll(urls);      removeOverlappingEntities(extracted);      final Iterator<Entity> it=extracted.iterator();      while (it.hasNext()) {        final Entity entity=it.next();        if (entity.getType() != Entity.Type.HASHTAG) {          it.remove();        }      }    }  }  return extracted;}  }
class C{  public final void init(byte[] params) throws IOException {  if (this.initialized)   throw new IOException("already initialized");  paramSpi.engineInit(params);  this.initialized=true;}  }
class C{  public boolean isSetHostname(){  return this.hostname != null;}  }
class C{  public void reply(SerialReply r){  InputBits.instance().markChanges(r);}  }
class C{  public boolean isSubtype(ObjectType type,ObjectType possibleSupertype) throws ClassNotFoundException {  if (DEBUG_QUERIES) {    System.out.println("isSubtype: check " + type + " subtype of "+ possibleSupertype);  }  if (type.equals(possibleSupertype)) {    if (DEBUG_QUERIES) {      System.out.println("  ==> yes, types are same");    }    return true;  }  ClassDescriptor typeClassDescriptor=DescriptorFactory.getClassDescriptor(type);  ClassDescriptor possibleSuperclassClassDescriptor=DescriptorFactory.getClassDescriptor(possibleSupertype);  return isSubtype(typeClassDescriptor,possibleSuperclassClassDescriptor);}  }
class C{  public void changeAbbrWinStreaks(String oldAbbr,String newAbbr){  if (longestWinStreak.getTeam().equals(oldAbbr)) {    longestWinStreak.changeAbbr(newAbbr);  }  if (yearStartLongestWinStreak.getTeam().equals(oldAbbr)) {    yearStartLongestWinStreak.changeAbbr(newAbbr);  }}  }
class C{  @POST @Path("setting") @ZeppelinApi public Response newSettings(String message){  try {    NewInterpreterSettingRequest request=gson.fromJson(message,NewInterpreterSettingRequest.class);    if (request == null) {      return new JsonResponse<>(Status.BAD_REQUEST).build();    }    Properties p=new Properties();    p.putAll(request.getProperties());    InterpreterSetting interpreterSetting=interpreterFactory.createNewSetting(request.getName(),request.getGroup(),request.getDependencies(),request.getOption(),p);    logger.info("new setting created with {}",interpreterSetting.getId());    return new JsonResponse<>(Status.CREATED,"",interpreterSetting).build();  } catch (  InterpreterException|IOException e) {    logger.error("Exception in InterpreterRestApi while creating ",e);    return new JsonResponse<>(Status.NOT_FOUND,e.getMessage(),ExceptionUtils.getStackTrace(e)).build();  }}  }
class C{  public int capacity(){  return data.length;}  }
class C{  public void clear(){  absoluteReadIndex=0;  relativeReadIndex=0;  relativeWriteIndex=0;  queueSize=0;}  }
class C{  @Override public void addComment(String comment){}  }
class C{  public WhitenedZCA(){  this(50);}  }
class C{  public static boolean startDocumentPrint(int type,int Record_ID,boolean IsDirectPrint){  return startDocumentPrint(type,Record_ID,null,-1,IsDirectPrint);}  }
class C{  public Vector<int[]> computeStartAndEndTimePairs(boolean[] sourceValid,boolean[] destValid,int k){  int startTime=0;  int endTime=0;  boolean lookingForStart=true;  Vector<int[]> startAndEndTimePairs=new Vector<int[]>();  for (int t=0; t < destValid.length; t++) {    if (lookingForStart) {      if (destValid[t]) {        if (t - startTime < k) {          continue;        } else {          if (sourceValid[t - 1]) {            endTime=t;            lookingForStart=false;            if (t == destValid.length - 1) {              int[] timePair=new int[2];              timePair[0]=startTime;              timePair[1]=endTime;              startAndEndTimePairs.add(timePair);            }          } else {            startTime++;          }        }      } else {        startTime=t + 1;      }    } else {      boolean terminateSequence=false;      if (destValid[t] && sourceValid[t - 1]) {        endTime=t;      } else {        terminateSequence=true;      }      if (t == destValid.length - 1) {        terminateSequence=true;      }      if (terminateSequence) {        int[] timePair=new int[2];        timePair[0]=startTime;        timePair[1]=endTime;        startAndEndTimePairs.add(timePair);        lookingForStart=true;        if (!destValid[t]) {          startTime=t + 1;        } else {          startTime=t - k + 1;        }      }    }  }  return startAndEndTimePairs;}  }
class C{  public void addHttpSessionToken(String site,String token){  if (!site.contains(":")) {    site=site + (":80");  }  HttpSessionTokensSet siteTokens=sessionTokens.get(site);  if (siteTokens == null) {    siteTokens=new HttpSessionTokensSet();    sessionTokens.put(site,siteTokens);  }  log.info("Added new session token for site '" + site + "': "+ token);  siteTokens.addToken(token);  unmarkRemovedDefaultSessionToken(site,token);}  }
class C{  private static String splitStringLeftParenthesis(String name){  String[] splitname=name.split("-");  if (splitname.length > 1 && splitname[1].startsWith("(")) {    return splitname[0].trim();  }  return name.trim();}  }
class C{  public float length(){  float x=this.m[0];  float y=this.m[1];  float z=this.m[2];  float result=(float)Math.sqrt(x * x + y * y + z * z);  return result;}  }
class C{  public void commit(){  info("COMMITting Solr index changes to " + solrUrl + "..");  doGet(appendParam(solrUrl.toString(),"commit=true"));}  }
class C{  private boolean casHead(HeadIndex<K,V> cmp,HeadIndex<K,V> val){  return UNSAFE.compareAndSwapObject(this,headOffset,cmp,val);}  }
class C{  public long nextSetBit(long index){  assert index >= 0 && index < numBits : "index=" + index + ", numBits="+ numBits;  int i=(int)(index >> 6);  long word=bits[i] >> index;  if (word != 0) {    return index + Long.numberOfTrailingZeros(word);  }  while (++i < numWords) {    word=bits[i];    if (word != 0) {      return (i << 6) + Long.numberOfTrailingZeros(word);    }  }  return -1;}  }
class C{  public static void mediumText(TextView textView){  highlightText(textView,R.string.wire__typeface__regular);}  }
class C{  @Override public void registerPersistentStore(String storeName,Scope scope) throws SyncException {  registerStore(storeName,scope);}  }
class C{  public SelectionOpacityIcon(DrawingEditor editor,AttributeKey<Double> opacityKey,AttributeKey<Color> fillColorKey,@Nullable AttributeKey<Color> strokeColorKey,URL imageLocation,Shape fillShape,Shape strokeShape){  super(imageLocation);  this.editor=editor;  this.opacityKey=opacityKey;  this.fillColorKey=fillColorKey;  this.strokeColorKey=strokeColorKey;  this.fillShape=fillShape;  this.strokeShape=strokeShape;}  }
class C{  private ConversionUtil(){}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  synchronized private void initView(final ILocalBTreeView view){  if (view == null) {    throw new AssertionError("View not found? " + this);  }  if (initView) {    return;  }{    long npartitions;    try {      final IMetadataIndex mdi=resourceManager.getFederation().getMetadataIndex(indexMetadata.getName(),commitTime);      if (mdi == null) {        log.warn("No metadata index: running in test harness?");        npartitions=1L;      } else {        npartitions=mdi.rangeCount();        if (npartitions == 0) {          log.error("No partitions? name=" + indexMetadata.getName());        }      }    } catch (    Throwable t) {      if (InnerCause.isInnerCause(t,InterruptedException.class)) {        throw new RuntimeException(t);      }      log.error("name=" + indexMetadata.getName(),t);      npartitions=-1L;    }    this.partitionCount=npartitions;  }{    final int accelerateSplitThreshold=resourceManager.accelerateSplitThreshold;    if (accelerateSplitThreshold == 0 || partitionCount > accelerateSplitThreshold) {      this.adjustedNominalShardSize=resourceManager.nominalShardSize;    } else {      final double d=(double)partitionCount / accelerateSplitThreshold;      this.adjustedNominalShardSize=(long)(resourceManager.nominalShardSize * d);      if (log.isInfoEnabled())       log.info("npartitions=" + partitionCount + ", discount="+ d+ ", threshold="+ accelerateSplitThreshold+ ", adjustedNominalShardSize="+ this.adjustedNominalShardSize+ ", nominalShardSize="+ resourceManager.nominalShardSize);    }  }  this.rangeCount=view.rangeCount();  this.percentOfSplit=super.sumSegBytes / (double)adjustedNominalShardSize;  this.tailSplit=this.percentOfSplit > resourceManager.percentOfSplitThreshold && super.percentTailSplits > resourceManager.tailSplitThreshold;  initView=true;}  }
class C{  int functionSub(int position){  return (position / (maxArity + 1)) * (maxArity + 1);}  }
class C{  public void signAssertion(Document document,String signAlgorithm,String digestAlgorithm,X509Certificate cert,PrivateKey key) throws CertificateException, FileNotFoundException, NoSuchAlgorithmException, InvalidKeySpecException, MarshalException, XMLSignatureException, IOException {  try {    if (Thread.currentThread().getContextClassLoader() == null) {      Thread.currentThread().setContextClassLoader(getClass().getClassLoader());    }    setIDAttribute(document);    XPath xpath=XPathFactory.newInstance().newXPath();    XPathExpression expr=xpath.compile("//*[local-name()='Assertion']/@ID");    NodeList nlURIs=(NodeList)expr.evaluate(document,XPathConstants.NODESET);    String[] sigIDs=new String[nlURIs.getLength()];    for (int i=0; i < nlURIs.getLength(); i++) {      sigIDs[i]=nlURIs.item(i).getNodeValue();    }    Init.init();    for (    String id : sigIDs) {      signElement(document,id,cert,key,signAlgorithm,digestAlgorithm);    }  } catch (  XPathExpressionException e) {    e.printStackTrace();  }}  }
class C{  public String modifyHeaderTipText(){  return "When selecting on nominal attributes, removes header references to " + "excluded values.";}  }
class C{  public AddItemToCollectionAction(final String quest,final String item,int quantity){  this.questname=checkNotNull(quest);  this.item=checkNotNull(item);  this.quantity=quantity;}  }
class C{  private String loadIsPossible(final StackType stackType){  if (this.noticeURL.isEmpty(stackType)) {    return "stack is empty";  }  if (this.workerQueue.remainingCapacity() == 0) {    return "too many workers active: " + this.workerQueue.size();  }  final String cautionCause=this.sb.onlineCaution();  if (cautionCause != null) {    return "online caution: " + cautionCause;  }  return null;}  }
class C{  public MBankStatementLoader(Properties ctx,int C_BankStatementLoader_ID,String trxName){  super(ctx,C_BankStatementLoader_ID,trxName);  init(null);}  }
class C{  public DateTime roundHalfEvenCopy(){  return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));}  }
class C{  public final void insert(Address addr1,Address addr2,Address addr3){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr1.isZero());  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr2.isZero());  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr3.isZero());  checkTailInsert(3);  uncheckedTailInsert(addr1);  uncheckedTailInsert(addr2);  uncheckedTailInsert(addr3);}  }
class C{  protected NativePointerObject(){  nativePointer=0;}  }
class C{  static boolean checkLiteral(IXMLReader reader,String literal) throws IOException, XMLParseException {  for (int i=0; i < literal.length(); i++) {    if (reader.read() != literal.charAt(i)) {      return false;    }  }  return true;}  }
class C{  public NetworkBuilder<N,E> expectedEdgeCount(int expectedEdgeCount){  checkArgument(expectedEdgeCount >= 0,"The expected number of edges can't be negative: %s",expectedEdgeCount);  this.expectedEdgeCount=Optional.of(expectedEdgeCount);  return this;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.621 -0500",hash_original_method="36E257E69C92FC5D45CD0DCB007DB07A",hash_generated_method="765263DBB9F52D22742C0677CC4C7BD4") public ListIterator<HDR> listIterator(){  return hlist.listIterator(0);}  }
class C{  private String computeOperationString(){  Type returnType=methodDoc.returnType();  String op=returnType.qualifiedTypeName() + " " + methodDoc.name()+ "(";  Parameter[] parameters=methodDoc.parameters();  for (int i=0; i < parameters.length; i++) {    if (i > 0) {      op+=", ";    }    op+=parameters[i].type().toString();  }  op+=")" + returnType.dimension();  return op;}  }
class C{  public boolean isMiniMapVisible(){  return miniMapVisible;}  }
class C{  private LoggingEventFieldResolver(){  super();  KEYWORD_LIST.add(LOGGER_FIELD);  KEYWORD_LIST.add(LEVEL_FIELD);  KEYWORD_LIST.add(CLASS_FIELD);  KEYWORD_LIST.add(FILE_FIELD);  KEYWORD_LIST.add(LINE_FIELD);  KEYWORD_LIST.add(METHOD_FIELD);  KEYWORD_LIST.add(MSG_FIELD);  KEYWORD_LIST.add(MESSAGE_FIELD);  KEYWORD_LIST.add(NDC_FIELD);  KEYWORD_LIST.add(EXCEPTION_FIELD);  KEYWORD_LIST.add(TIMESTAMP_FIELD);  KEYWORD_LIST.add(DATE_FIELD);  KEYWORD_LIST.add(THREAD_FIELD);  KEYWORD_LIST.add(PROP_FIELD);  KEYWORD_LIST.add(MARK_FIELD);  KEYWORD_LIST.add(NOTE_FIELD);}  }
class C{  protected boolean fullTopologicalPredicate(Geometry geom){  boolean result=prepPoly.getGeometry().covers(geom);  return result;}  }
class C{  public StandardPieToolTipGenerator(String labelFormat,Locale locale){  this(labelFormat,NumberFormat.getNumberInstance(locale),NumberFormat.getPercentInstance(locale));}  }
class C{  public void write(String key,Bitmap bitmap){  if (key == null || bitmap == null) {    return;  }synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      OutputStream out=null;      try {        DiskLruCache.Snapshot snapshot=mDiskLruCache.get(key);        if (snapshot == null) {          final DiskLruCache.Editor editor=mDiskLruCache.edit(key);          if (editor != null) {            out=editor.newOutputStream(DISK_CACHE_INDEX);            bitmap.compress(DEFAULT_COMPRESS_FORMAT,DEFAULT_COMPRESS_QUALITY,out);            editor.commit();            out.close();          }        }      } catch (      final IOException e) {        Log.e(TAG,"addBitmapToCache - " + e);      }catch (      Exception e) {        Log.e(TAG,"addBitmapToCache - " + e);      } finally {        try {          if (out != null) {            out.close();          }        } catch (        IOException e) {        }      }    }  }}  }
class C{  protected void parseTagContent(Element element,Reader is) throws IOException {  if ((HTMLComponent.SUPPORT_CSS) && (htmlC.loadCSS) && (((HTMLElement)element).getTagId() == HTMLElement.TAG_STYLE)) {    CSSElement addTo=CSSParser.getInstance().parseCSSSegment(is,null,htmlC,null);    htmlC.addToEmebeddedCSS(addTo);    return;  }  super.parseTagContent(element,is);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("M_PriceList_ID"))     p_M_PriceList_ID=para[i].getParameterAsInt(); else     if (name.equals("InvoiceDocumentNo"))     p_InvoiceDocumentNo=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_M_InOut_ID=getRecord_ID();}  }
class C{  public APIConnectionException(String message,Throwable e){  super(message,e);}  }
class C{  public JsonParser createJsonParser(String content) throws IOException, JsonParseException {  Reader r=new StringReader(content);  IOContext ctxt=_createContext(r,true);  if (_inputDecorator != null) {    r=_inputDecorator.decorate(ctxt,r);  }  return _createJsonParser(r,ctxt);}  }
class C{  public static void closeSession() throws HibernateException {  Session session=(Session)threadLocal.get();  threadLocal.set(null);  if (session != null) {    session.close();  }}  }
class C{  public void registerSingleBiome(BiomeGenBase biome){  registeredSingleBiome.add(biome);}  }
class C{  public OVector(int c){  vector=new Object[Math.max(defaultCapacity,c)];}  }
class C{  private void convertToRGB(float l,float a,float bstar){  if (l < 0) {    l=0;  } else   if (l > 100) {    l=100;  }  if (a < R[0]) {    a=R[0];  } else   if (a > R[1]) {    a=R[1];  }  if (bstar < R[2]) {    bstar=R[2];  } else   if (bstar > R[3]) {    bstar=R[3];  }  if ((lastL == l) && (lastA == a) && (lastBstar == bstar)) {  } else {    final int indexL=(int)l;    final int indexA=(int)(a - R[0]);    final int indexB=(int)(bstar - R[2]);    final Integer key=(indexL << 16) + (indexA << 8) + indexB;    final Integer value=cache.get(key);    if (value != null) {      final int raw=value;      r=((raw >> 16) & 255);      g=((raw >> 8) & 255);      b=((raw) & 255);    } else {      final double val1=(l + 16d) / 116d;      final double[] vals=new double[3];      vals[0]=val1 + (a / 500d);      vals[1]=val1;      vals[2]=val1 - (bstar / 200d);      float[] out=new float[3];      for (int j=0; j < 3; j++) {        if (vals[j] >= C3) {          out[j]=(float)(W[j] * vals[j] * vals[j]* vals[j]);        } else {          out[j]=(float)(W[j] * C1 * (vals[j] - C2));        }        if (out[j] < 0) {          out[j]=0;        }      }      out=cs.toRGB(out);      r=(int)(out[0] * 255);      g=(int)(out[1] * 255);      b=(int)(out[2] * 255);      if (r < 0) {        r=0;      }      if (g < 0) {        g=0;      }      if (b < 0) {        b=0;      }      if (r > 255) {        r=255;      }      if (g > 255) {        g=255;      }      if (b > 255) {        b=255;      }      final int raw=(r << 16) + (g << 8) + b;      cache.put(key,raw);    }    lastL=l;    lastA=a;    lastBstar=bstar;  }}  }
class C{  @DSSink({DSSinkKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.491 -0500",hash_original_method="F4F7246DD691380E13C09E794F3AA7A8",hash_generated_method="C92D4A1A16E4C726EA5C5C5E2F1389CD") public static String gsm8BitUnpackedToString(byte[] data,int offset,int length,String characterset){  boolean isMbcs=false;  Charset charset=null;  ByteBuffer mbcsBuffer=null;  if (!TextUtils.isEmpty(characterset) && !characterset.equalsIgnoreCase("us-ascii") && Charset.isSupported(characterset)) {    isMbcs=true;    charset=Charset.forName(characterset);    mbcsBuffer=ByteBuffer.allocate(2);  }  String languageTableToChar=sLanguageTables[0];  String shiftTableToChar=sLanguageShiftTables[0];  StringBuilder ret=new StringBuilder(length);  boolean prevWasEscape=false;  for (int i=offset; i < offset + length; i++) {    int c=data[i] & 0xff;    if (c == 0xff) {      break;    } else     if (c == GSM_EXTENDED_ESCAPE) {      if (prevWasEscape) {        ret.append(' ');        prevWasEscape=false;      } else {        prevWasEscape=true;      }    } else {      if (prevWasEscape) {        char shiftChar=shiftTableToChar.charAt(c);        if (shiftChar == ' ') {          ret.append(languageTableToChar.charAt(c));        } else {          ret.append(shiftChar);        }      } else {        if (!isMbcs || c < 0x80 || i + 1 >= offset + length) {          ret.append(languageTableToChar.charAt(c));        } else {          mbcsBuffer.clear();          mbcsBuffer.put(data,i++,2);          mbcsBuffer.flip();          ret.append(charset.decode(mbcsBuffer).toString());        }      }      prevWasEscape=false;    }  }  return ret.toString();}  }
class C{  public FeedFragment(){  setHasOptionsMenu(true);  setRetainInstance(true);}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>(1);  newVector.add("measureNumRules");  return newVector.elements();}  }
class C{  public GPathResult parse(final File file) throws IOException, SAXException {  final FileInputStream fis=new FileInputStream(file);  final InputSource input=new InputSource(fis);  input.setSystemId("file://" + file.getAbsolutePath());  try {    return parse(input);  }  finally {    fis.close();  }}  }
class C{  private static <Item extends Comparable>void partition(Queue<Item> unsorted,Item pivot,Queue<Item> less,Queue<Item> equal,Queue<Item> greater){}  }
class C{  public Boolean isTcpSegmentation(){  return tcpSegmentation;}  }
class C{  protected SVGOMMetadataElement(){}  }
class C{  public void scale(int factor){  if (m_icon != null) {    removeAll();    Image pic=m_icon.getImage();    int width=m_icon.getIconWidth();    int height=m_icon.getIconHeight();    int reduction=width / factor;    width-=reduction;    height-=reduction;    pic=pic.getScaledInstance(width,height,Image.SCALE_SMOOTH);    m_icon=new ImageIcon(pic);    m_visualLabel=new JLabel(m_icon);    add(m_visualLabel,BorderLayout.CENTER);    Dimension d=m_visualLabel.getPreferredSize();    Dimension d2=new Dimension((int)d.getWidth() + 10,(int)d.getHeight() + 10);    setMinimumSize(d2);    setPreferredSize(d2);    setMaximumSize(d2);  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public boolean contains(byte[] object){  for (int i=0; i < hashFuncs; i++) {    if (!Utils.checkBitLE(data,hash(i,object)))     return false;  }  return true;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"ALLOPERATORS\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"NAME\" TEXT NOT NULL ,"+ "\"THREAD\" TEXT NOT NULL ,"+ "\"DESC\" TEXT NOT NULL ,"+ "\"IMG\" TEXT NOT NULL ,"+ "\"URL\" TEXT NOT NULL ,"+ "\"OPERATORS_ID\" INTEGER,"+ "\"OUTER_ID\" INTEGER);");}  }
