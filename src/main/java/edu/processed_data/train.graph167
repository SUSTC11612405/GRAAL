class C{  protected void writeTile(ByteBuffer raster,int width,int height,String tilePath) throws IOException {  byte[] bbArray=new byte[raster.limit()];  raster.get(bbArray);  writeTile(tilePath,bbArray,width,height,layerType);}  }
class C{  public MappingModel basicGetMappingModel(){  return mappingModel;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void startResolvingCandidate(HostCandidate hostCand){  if (!hostCand.getTransportAddress().canReach(stunServer))   return;  HostCandidate cand=getHostCandidate(hostCand);  if (cand == null) {    logger.info("server/candidate address type mismatch," + " skipping candidate in this harvester");    return;  }  StunCandidateHarvest harvest=createHarvest(cand);  if (harvest == null) {    logger.warning("failed to create harvest");    return;  }synchronized (startedHarvests) {    startedHarvests.add(harvest);    boolean started=false;    try {      started=harvest.startResolvingCandidate();    } catch (    Exception ex) {      started=false;      if (logger.isLoggable(Level.INFO)) {        logger.log(Level.INFO,"Failed to start resolving host candidate " + hostCand,ex);      }    } finally {      if (!started) {        try {          startedHarvests.remove(harvest);          logger.warning("harvest did not start, removed: " + harvest);        }  finally {          try {            harvest.close();          } catch (          Exception ex) {          }        }      }    }  }}  }
class C{  public static void main(String[] args) throws AdeException {  final AdeExtRequestType requestType=AdeExtRequestType.TRAIN;  System.err.println("Running Ade: " + requestType);  final AdeExtMessageHandler messageHandler=new AdeExtMessageHandler();  final Train train=new Train();  try {    train.run(args);  } catch (  AdeUsageException e) {    messageHandler.handleUserException(e);  }catch (  AdeInternalException e) {    messageHandler.handleAdeInternalException(e);  }catch (  AdeException e) {    messageHandler.handleAdeException(e);  }catch (  Throwable e) {    messageHandler.handleUnexpectedException(e);  } finally {    train.quietCleanup();  }}  }
class C{  private void renderAxes(Camera camera){  glPushMatrix();  glLoadIdentity();  float rotX=camera.getRotation().x;  float rotY=camera.getRotation().y;  float rotZ=0;  glRotatef(rotX,1.0f,0.0f,0.0f);  glRotatef(rotY,0.0f,1.0f,0.0f);  glRotatef(rotZ,0.0f,0.0f,1.0f);  glLineWidth(2.0f);  glBegin(GL_LINES);  glColor3f(1.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(1.0f,0.0f,0.0f);  glColor3f(0.0f,1.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,1.0f,0.0f);  glColor3f(1.0f,1.0f,1.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,1.0f);  glEnd();  glPopMatrix();}  }
class C{  public Builder byMinute(Collection<Integer> minutes){  byMinute.addAll(minutes);  return this;}  }
class C{  public void print(int x){  m_Owner.append("" + x);}  }
class C{  public ModelConverter(ModelBase model,double scale,boolean renderDoubleFace,float rotationX,float rotationY,float rotationZ){  this(model,scale,renderDoubleFace,rotationX,rotationY,rotationZ,new Vec3UV(0,0,0));}  }
class C{  public int indexOf(Node elem,int index){  runTo(-1);  if (null == m_map)   return -1;  for (int i=index; i < m_firstFree; i++) {    Node node=m_map[i];    if ((null != node) && node.equals(elem))     return i;  }  return -1;}  }
class C{  public Triangle(){  ByteBuffer bb=ByteBuffer.allocateDirect(triangleCoords.length * 4);  bb.order(ByteOrder.nativeOrder());  vertexBuffer=bb.asFloatBuffer();  vertexBuffer.put(triangleCoords);  vertexBuffer.position(0);}  }
class C{  private static boolean portMatch(int port,int[] ports){  boolean portInList=false;  for (int i=0, len=ports.length; i < len; i++) {    if (port == ports[i]) {      portInList=true;      break;    }  }  return portInList;}  }
class C{  public void testUnsatisfiableMinusExplainHint02() throws Exception {  final ASTContainer container=new TestHelper("explainHints-unsatisfiableminus02","explainHints-unsatisfiableminus02.rq","explainHints.trig","explainHints-unsatisfiableminus02.srx").runTest();  final Iterator<BOp> explainHintAnnotatedBOps=ExplainHints.explainHintAnnotatedBOpIterator(container.getOptimizedAST());  assertFalse(explainHintAnnotatedBOps.hasNext());}  }
class C{  private void closeThriftWriter(){  if (null != dictionaryThriftWriter) {    dictionaryThriftWriter.close();  }}  }
class C{  public JDesktopIcon(JInternalFrame f){  setVisible(false);  setInternalFrame(f);  updateUI();}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public static String writeMetadataToString(OFInstructionWriteMetadata inst,Logger log){  if (inst.getMetadataMask().equals(U64.NO_MASK)) {    return inst.getMetadata().toString();  } else {    return inst.getMetadata().toString() + "/" + inst.getMetadataMask().toString();  }}  }
class C{  public boolean lastChunk(){  return lastChunk;}  }
class C{  protected void failedFilter(OMGraphic omg){  omg.setVisible(false);}  }
class C{  public static int binarySearch(double[] array,int startIndex,int endIndex,double value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  long longBits=Double.doubleToLongBits(value);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (lessThan(array[mid],value)) {      low=mid + 1;    } else     if (longBits == Double.doubleToLongBits(array[mid])) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (lessThan(value,array[mid]) ? 1 : 2);}  }
class C{  public void logException(){  Diagnostic.userLog(getCause() == null ? this : getCause());  Diagnostic.errorLogOnly(mErrorType,mErrorArguments);}  }
class C{  private void removeLocationAndTrackPropertyChange(){  for (  Location loc : locationManager.getList()) {    loc.removePropertyChangeListener(this);    for (    Track track : loc.getTrackList()) {      track.removePropertyChangeListener(this);      Schedule schedule=track.getSchedule();      if (schedule != null) {        schedule.removePropertyChangeListener(this);      }    }  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MInOutConfirm[");  sb.append(get_ID()).append("-").append(getSummary()).append("]");  return sb.toString();}  }
class C{  public BoolQueryBuilder should(QueryBuilder queryBuilder){  shouldClauses.add(queryBuilder);  return this;}  }
class C{  public DSystemInformation(JFrame parent){  super(parent,res.getString("DSystemInformation.Title"),ModalityType.DOCUMENT_MODAL);  initComponents();}  }
class C{  private void export_resolver_vis_map(){  if (writeConstituents) {    writeToFile("resolver_vis_map","c0","NULL","tiger","node","tree","constituents (tree)","1","NULL");  }  if (writeDependencies) {    writeToFile("resolver_vis_map","c0","NULL","dep","edge","arch_dependency","dependencies (arches)","2","NULL");  }}  }
class C{  public void bestState(long state,Model bestModel){  currentState=state;}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,Color bgcolor,ImageObserver observer){  if (img == null) {    return true;  }  boolean result;  if (needToCopyBgColorImage(img)) {    BufferedImage imageCopy=getBufferedImageCopy(img,bgcolor);    result=mGraphics.drawImage(imageCopy,dx1,dy1,dx2,dy2,sy1,sy1,sx2,sy2,null);  } else {    result=mGraphics.drawImage(img,dx1,dy1,dx2,dy2,sy1,sy1,sx2,sy2,bgcolor,observer);  }  return result;}  }
class C{  public List<String> splitStringWithDefaultDelimiterEscaped(String inputString){  String delimiter=configurationHelper.getProperty(ConfigurationValue.FIELD_DATA_DELIMITER);  String escapeChar=configurationHelper.getProperty(ConfigurationValue.FIELD_DATA_DELIMITER_ESCAPE_CHAR);  List<String> splitString=new ArrayList<>();  if (StringUtils.isNotBlank(inputString)) {    String regex="(?<!" + Pattern.quote(escapeChar) + ")"+ Pattern.quote(delimiter);    for (    String s : inputString.split(regex)) {      splitString.add(s.replace(escapeChar + delimiter,delimiter));    }  }  return splitString;}  }
class C{  public boolean isNodeSet(){  return ((inputOctetStreamProxy == null && inputNodeSet != null) || isNodeSet);}  }
class C{  public int YToTileY(int y){  return YToTileY(y,getTileGridYOffset(),getTileHeight());}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public noframes addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public _QueueStatus(){  super();}  }
class C{  public Utf8_Enumeration(byte b[]){  bytes=b;  curindex=(short)2;  length=(short)(((((bytes[0])) & 0xff) << 8) + (((bytes[1])) & 0xff) + 2);}  }
class C{  public void finish(){  finish(DEFAULT_MAX_DETERMINIZED_STATES);}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"QDSUB");  translateAll(environment,instruction,"QDSUB",instructions);}  }
class C{  @Inline @Entrypoint public static void byteArrayWrite(byte[] ref,int index,byte value){  if (NEEDS_BYTE_GC_WRITE_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index);    Selected.Mutator.get().byteWrite(array,array.toAddress().plus(offset),value,offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public SerializableList(final Collection<T> collection){  super(collection);}  }
class C{  public static final int floor(float x){  int y=(int)x;  if (x < 0 && x != y) {    y--;  }  return y;}  }
class C{  private void ExtractEither(AST.Either ast,String context,String cType){  for (int i=0; i < ast.ors.size(); i++) {    Vector orClause=(Vector)ast.ors.elementAt(i);    for (int j=0; j < orClause.size(); j++)     ExtractStmt((AST)orClause.elementAt(j),context,cType);  }  ;}  }
class C{  public String createTable(Table table){  StringBuilder ddl=new StringBuilder();  createTable(table,ddl,false,false);  return ddl.toString();}  }
class C{  @Override public List<ViewManager> createViewManagers(ReactApplicationContext reactContext){  return Arrays.<ViewManager>asList(new PPTGoogleMapManager());}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count.set(0);  last=head=new Node<E>(null);  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break;    add(item);  }}  }
class C{  public MiniBatchKMeans(DistanceMetric dm,int batchSize,int iterations,SeedSelection seedSelection){  setBatchSize(batchSize);  setIterations(iterations);  setDistanceMetric(dm);  setSeedSelection(seedSelection);}  }
class C{  public TypeComponent(){  this(new SObject());}  }
class C{  public void add(SoundCloudTrack track){  add(mSoundCloudPlaylist.getTracks().size(),track);}  }
class C{  @Override protected MemoryExampleTable joinData(ExampleSet es1,ExampleSet es2,List<AttributeSource> originalAttributeSources,List<Attribute> unionAttributeList) throws OperatorException {  MemoryExampleTable unionTable=new MemoryExampleTable(unionAttributeList);  Iterator<Example> reader=es1.iterator();  long total=(long)es1.size() * es2.size();  long progressCounter=0;  getProgress().setTotal(100);  while (reader.hasNext()) {    Example example1=reader.next();    Iterator<Example> reader2=es2.iterator();    while (reader2.hasNext()) {      Example example2=reader2.next();      double[] unionDataRow=new double[unionAttributeList.size()];      Iterator<AttributeSource> a=originalAttributeSources.iterator();      int index=0;      while (a.hasNext()) {        AttributeSource source=a.next();        if (source.getSource() == AttributeSource.FIRST_SOURCE) {          unionDataRow[index]=example1.getValue(source.getAttribute());        } else         if (source.getSource() == AttributeSource.SECOND_SOURCE) {          unionDataRow[index]=example2.getValue(source.getAttribute());        }        index++;      }      unionTable.addDataRow(new DoubleArrayDataRow(unionDataRow));      if (++progressCounter % 1000 == 0) {        getProgress().setCompleted((int)(100 * progressCounter / total));      }    }  }  return unionTable;}  }
class C{  @Override public void queueHeadInsert(String queueName,Address value){  if (Trace.isEnabled(Item.QUEUE)) {    Clock.stop();    Trace.trace(Item.QUEUE,"head insert %s to %s",value,queueName);    Clock.start();  }}  }
class C{  public static boolean isValid(final JCriteriumTree tree){  final JCriteriumTreeNode root=(JCriteriumTreeNode)tree.getModel().getRoot();  if (root.getChildCount() != 1) {    return false;  }  final Enumeration<?> enumeration=root.breadthFirstEnumeration();  while (enumeration.hasMoreElements()) {    final JCriteriumTreeNode node=(JCriteriumTreeNode)enumeration.nextElement();    final ICriterium type=node.getCriterium();    final int count=node.getChildCount();    if ((type instanceof CAndCriterium || type instanceof COrCriterium) && count < 2) {      return false;    } else     if (type instanceof CNotCriterium && count != 1) {      return false;    }  }  return true;}  }
class C{  public boolean hasTrail(){  return this.trail;}  }
class C{  public ObjectGraph buildGraphWithAditionalModules(List<Object> modules){  if (modules == null) {    throw new IllegalArgumentException("You can't plus a null module, review your getModules() implementation");  }  return objectGraph.plus(modules.toArray());}  }
class C{  public AccessibleStateSet(AccessibleState[] states){  if (states.length != 0) {    this.states=new Vector(states.length);    for (int i=0; i < states.length; i++) {      if (!this.states.contains(states[i])) {        this.states.addElement(states[i]);      }    }  }}  }
class C{  public ModelStore(){  this(new ModelStoreConfig());}  }
class C{  public CUipcMemHandle(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:51.008 -0500",hash_original_method="322A7AA8BD0B180616D94A352B3FE7FA",hash_generated_method="834B87B7CF6881F99D4FF70C311C1393") public String number() throws ParseException {  int startIdx=ptr;  try {    if (!isDigit(lookAhead(0))) {      throw new ParseException(buffer + ": Unexpected token at " + lookAhead(0),ptr);    }    consume(1);    while (true) {      char next=lookAhead(0);      if (isDigit(next)) {        consume(1);      } else       break;    }    return buffer.substring(startIdx,ptr);  } catch (  ParseException ex) {    return buffer.substring(startIdx,ptr);  }}  }
class C{  public boolean hasRole(Persistent<?> object,Role role){  return AccessRightsUtils.getInstance().hasRole(ctx,object,role);}  }
class C{  public final boolean post(@NonNull Runnable r){  return mExec.post(wrapRunnable(r));}  }
class C{  public ParsedTupleQuery(String sourceString,TupleExpr tupleExpr){  super(sourceString,tupleExpr);}  }
class C{  private void enqueue(Node<E> node){  last=last.next=node;}  }
class C{  public static boolean hasLevel(Level level){  for (  ExtLogRecord record : messages.values()) {    if (record.getLevel().equals(level)) {      return true;    }  }  return false;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void deleteMax(){  if (isEmpty())   throw new NoSuchElementException("Symbol table underflow error");  delete(max());}  }
class C{  private Cluster findCluster(List<Cluster> oldClusters,ClusterComputeResource vcCluster,URI vCenterDataCenterId){  Cluster targetCluster=findClusterByExternalId(oldClusters,vcCluster.getMOR().getVal());  info("find by vcenter cluster id %s",targetCluster == null ? "NULL" : targetCluster.getLabel());  if (targetCluster == null) {    targetCluster=findModelByLabel(oldClusters,vcCluster.getName());    info("find by name in dc %s",targetCluster == null ? "NULL" : targetCluster.getLabel());  }  if (targetCluster != null) {    oldClusters.remove(targetCluster);  }  if (targetCluster == null) {    targetCluster=getModelClient().clusters().findClusterByNameAndDatacenter(vCenterDataCenterId,vcCluster.getName(),true);    info("find by name in tenant %s",targetCluster == null ? "NULL" : targetCluster.getLabel());    if (targetCluster != null && !NullColumnValueGetter.isNullURI(targetCluster.getVcenterDataCenter())) {      info("found, but can't use it");      targetCluster=null;    }  }  if (targetCluster == null) {    targetCluster=findClusterHostUuid(vcCluster);    info("find by host uuid %s",targetCluster == null ? "NULL" : targetCluster.getLabel());    if (targetCluster != null && NullColumnValueGetter.isNotNullValue(targetCluster.getExternalId())) {      info("found, but can't use it, it is related to another cluster");      targetCluster=null;    }  }  return targetCluster;}  }
class C{  private void calculateLocalNorthAndUpInPhoneCoordsFromSensors(){  Vector3 magneticNorthPhone;  Vector3 magneticEastPhone;  if (useRotationVector) {    float[] rotationMatrix=new float[9];    SensorManager.getRotationMatrixFromVector(rotationMatrix,rotationVector);    magneticNorthPhone=new Vector3(rotationMatrix[3],rotationMatrix[4],rotationMatrix[5]);    upPhone=new Vector3(rotationMatrix[6],rotationMatrix[7],rotationMatrix[8]);    magneticEastPhone=new Vector3(rotationMatrix[0],rotationMatrix[1],rotationMatrix[2]);  } else {    Vector3 down=acceleration.copy();    down.normalize();    Vector3 magneticFieldToNorth=magneticField.copy();    magneticFieldToNorth.scale(-1);    magneticFieldToNorth.normalize();    magneticNorthPhone=addVectors(magneticFieldToNorth,scaleVector(down,-scalarProduct(magneticFieldToNorth,down)));    magneticNorthPhone.normalize();    upPhone=scaleVector(down,-1);    magneticEastPhone=vectorProduct(magneticNorthPhone,upPhone);  }  axesPhoneInverseMatrix=new Matrix33(magneticNorthPhone,upPhone,magneticEastPhone,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:51.013 -0500",hash_original_method="4FFD881D960C22E5DF32EAF983DA52C6",hash_generated_method="27E9EE37082F3A8B1EF43BCF171B0602") public void rewindInputPosition(int position){  this.ptr=position;}  }
class C{  @AssistedInject public ConnectionDirectoryResource(@Assisted UserContext userContext,@Assisted Directory<Connection> directory,DirectoryObjectTranslator<Connection,APIConnection> translator,DirectoryObjectResourceFactory<Connection,APIConnection> resourceFactory){  super(userContext,directory,translator,resourceFactory);}  }
class C{  public void debug(CharSequence message){  log(Level.FINE,message);}  }
class C{  public OrgName(String value){  this();  setValue(value);}  }
class C{  private static void copyClassAnnotations(final ClassNode cNode,final ClassNode helper){  List<AnnotationNode> annotations=cNode.getAnnotations();  for (  AnnotationNode annotation : annotations) {    if (!annotation.getClassNode().equals(Traits.TRAIT_CLASSNODE)) {      helper.addAnnotation(annotation);    }  }}  }
class C{  public static void main(String[] args){  Header.printHeader(MyCarrierPlanGenerator.class.toString(),args);  String networkFile=args[0];  Double depotLong=Double.parseDouble(args[1]);  Double depotLat=Double.parseDouble(args[2]);  String demandInputDir=args[3];  String initialPlanAlgorithm=args[4];  String changeEventsInputFile=args[5];  String vehicleTypesFile=args[6];  String carrierInput=args[7];  String outputDir=args[8];  Config config=ConfigUtils.createConfig();  config.controler().setOutputDirectory("./output/");  config.network().setInputFile(networkFile);  config.network().setTimeVariantNetwork(true);  Scenario scenario=ScenarioUtils.loadScenario(config);  Network network=scenario.getNetwork();  int speed=80;  depotCoord=new Coord(depotLong,depotLat);  depotLink=NetworkUtils.getNearestLink(((Network)scenario.getNetwork()),depotCoord).getId();  MyFileSampler mfs=new MyFileSampler(demandInputDir);  List<File> files=mfs.sampleFiles(Integer.MAX_VALUE,new MyFileFilter(".csv"));  for (  File demandInputFile : files) {    String filename=demandInputFile.getName().substring(0,demandInputFile.getName().indexOf("."));    MyCarrierPlanGenerator mcpg=new MyCarrierPlanGenerator();    Carriers carriers=new Carriers();    carriers.addCarrier(CarrierImpl.newInstance(Id.create("MyCarrier",Carrier.class)));    CarrierVehicleTypes carrierVehicleTypes=new CarrierVehicleTypes();    new CarrierVehicleTypeReader(carrierVehicleTypes).readFile(vehicleTypesFile);    new CarrierVehicleTypeLoader(carriers).loadVehicleTypes(carrierVehicleTypes);    Carrier carrier=carriers.getCarriers().get(Id.create("MyCarrier",Carrier.class));    MyCarrierCapabilityGenerator mccg=new MyCarrierCapabilityGenerator();    carrier.setCarrierCapabilities(mccg.createVehicles(carrierVehicleTypes,depotLink));    List<CarrierService> services=mcpg.parseDemand(demandInputFile.getAbsolutePath(),network,carrier);    carrier.getServices().addAll(services);    mcpg.createInitialPlans(carrier,network,initialPlanAlgorithm,carrierVehicleTypes);    carriers.getCarriers().put(Id.create("MyCarrier",Carrier.class),carrier);    CarrierPlanXmlWriterV2 planWriter=new CarrierPlanXmlWriterV2(carriers);    planWriter.write(outputDir + filename + "_"+ speed+ ".xml");  }  Header.printFooter();}  }
class C{  public BranchGroupPortrayal3D(BranchGroup scene,Appearance a){  this(scene,1.0f,a);}  }
class C{  void handleSubscriberException(Throwable e,SubscriberExceptionContext context){  checkNotNull(e);  checkNotNull(context);  try {    exceptionHandler.handleException(e,context);  } catch (  Throwable e2) {    logger.log(Level.SEVERE,String.format(Locale.ROOT,"Exception %s thrown while handling exception: %s",e2,e),e2);  }}  }
class C{  public final double calculateIntervalLikelihood(DemographicFunction demoFunction,double width,double timeOfPrevCoal,int lineageCount,int type){  double timeOfThisCoal=width + timeOfPrevCoal;  double intervalArea=demoFunction.getIntegral(timeOfPrevCoal,timeOfThisCoal);  double like=0;switch (type) {case COALESCENT:    like=-Math.log(demoFunction.getDemographic(timeOfThisCoal)) - (Binomial.choose2(lineageCount) * intervalArea);  break;case NEW_SAMPLE:like=-(Binomial.choose2(lineageCount) * intervalArea);break;}return like;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.413 -0500",hash_original_method="35CA8C822A17FE233ECB2E3810B4D5A5",hash_generated_method="24C57D0918286878DA98E99F52EEAD4C") public RAckParser(String rack){  super(rack);}  }
class C{  private void saveExperiment(){  int returnVal=m_FileChooser.showSaveDialog(this);  if (returnVal != JFileChooser.APPROVE_OPTION) {    return;  }  File expFile=m_FileChooser.getSelectedFile();  if (m_FileChooser.getFileFilter() == m_ExpFilter) {    if (!expFile.getName().toLowerCase().endsWith(Experiment.FILE_EXTENSION)) {      expFile=new File(expFile.getParent(),expFile.getName() + Experiment.FILE_EXTENSION);    }  } else   if (m_FileChooser.getFileFilter() == m_KOMLFilter) {    if (!expFile.getName().toLowerCase().endsWith(KOML.FILE_EXTENSION)) {      expFile=new File(expFile.getParent(),expFile.getName() + KOML.FILE_EXTENSION);    }  } else   if (m_FileChooser.getFileFilter() == m_XMLFilter) {    if (!expFile.getName().toLowerCase().endsWith(".xml")) {      expFile=new File(expFile.getParent(),expFile.getName() + ".xml");    }  }  try {    Experiment.write(expFile.getAbsolutePath(),m_Exp);    System.err.println("Saved experiment:\n" + m_Exp);  } catch (  Exception ex) {    ex.printStackTrace();    JOptionPane.showMessageDialog(this,"Couldn't save experiment file:\n" + expFile + "\nReason:\n"+ ex.getMessage(),"Save Experiment",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  @Override public int hashCode(){  return this.elem.hashCode();}  }
class C{  public AccessItem addExtra(String key,Object object){  if (extra == null) {    extra=new HashMap<>();  }  extra.put(key,object);  return this;}  }
class C{  public double untransform(double value){  return value;}  }
class C{  public boolean isImageSharingSupported(){  return readBoolean(RcsSettingsData.CAPABILITY_IMAGE_SHARING);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public byte[] decode(byte[] pArray){  return decodeBase64(pArray);}  }
class C{  protected Long wrap(long k){  return new Long(k);}  }
class C{  private void dialogChanged(){  errorMsg=validateInputs();  containingPage.setPageComplete(containingPage.isPageComplete());}  }
class C{  protected int seen(Date now,String opUrl,String nonce){  cleanupAged();  JdbcTemplate jdbcTemplate=getJdbcTemplate();  try {    jdbcTemplate.update(_insertSQL,new Object[]{opUrl,nonce,now});    return OK;  } catch (  DataIntegrityViolationException e) {    _log.warn("Nonce already seen. Possible replay attack!");  }catch (  Exception e) {    _log.error("Problem executing database method",e);  }  return SEEN;}  }
class C{  public ConcurrentUpdateSolrServer(String solrServerUrl,int queueSize,int threadCount){  this(solrServerUrl,null,queueSize,threadCount);  shutdownExecutor=true;}  }
class C{  private void sendRegistrationToServer(String token){}  }
class C{  @Override public void displayView(DisplayHint displayHint){  if (DisplayHint.WALLET_TRANSACTIONS_HAVE_CHANGED == displayHint) {    return;  }  walletFilenameLabel.setText(this.bitcoinController.getModel().getActiveWalletFilename());  walletDescriptionLabel.setText(this.bitcoinController.getModel().getActivePerWalletModelData().getWalletDescription());  walletBusyChange(this.bitcoinController.getModel().getActivePerWalletModelData().isBusy());}  }
class C{  private boolean isValidSelection(String selection){  return isValidSelection(selection,getBaseContentView());}  }
class C{  public void install(JFormattedTextField ftf){  super.install(ftf);  positionCursorAtInitialLocation();}  }
class C{  public Message with(Text text){  this.components.add(text);  return this;}  }
class C{  public boolean isNullNodeId(){  if (this.value == null)   return true;  if (this.namespaceIndex != 0)   return false;switch (this.type) {case Numeric:    return ((UnsignedInteger)this.value).intValue() == 0;case String:  return ((String)this.value).length() == 0;case Guid:return this.value.equals(NULL_GUID.value);case Opaque:return java.util.Arrays.equals((byte[])this.value,(byte[])NULL_OPAQUE.value);default :return false;}}  }
class C{  @Override public RegularTimePeriod previous(){  Quarter result;  if (this.quarter > FIRST_QUARTER) {    result=new Quarter(this.quarter - 1,this.year);  } else {    if (this.year > 1900) {      result=new Quarter(LAST_QUARTER,this.year - 1);    } else {      result=null;    }  }  return result;}  }
class C{  public long sigcatch(){  return Long.parseLong(fields[33]);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static ITable allocate(int size){  if (VM.VerifyAssertions && VM.runningVM)   VM._assert(VM.NOT_REACHED);  return new ITable(size);}  }
class C{  public Enumeration<Register> enumerateGPRParameters(int n){  if (VM.VerifyAssertions) {    VM._assert(n <= NUMBER_INT_PARAM);  }  return new PhysicalRegisterEnumeration(FIRST_INT_PARAM,FIRST_INT_PARAM + n - 1);}  }
class C{  public void sendReject(){  assert (origin == Origin.REMOTE);  request.setRejected(true);  EmptyMessage rst=EmptyMessage.newRST(request);  endpoint.sendEmptyMessage(this,rst);}  }
class C{  public boolean removeCurrentTab(boolean oneOpen){  if (getTabCount() == 0) {    return false;  }  if (oneOpen && getTabCount() == 1) {    return false;  }  int number=getSelectedIndex();  if (number != -1) {    remove(number);    return true;  }  return false;}  }
class C{  public OrganizationAuthoritiesException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static void removeSerializable(Context context,String filename){  try {    context.deleteFile(filename);  } catch (  Exception ex) {  }}  }
class C{  public void writeRoom(String number,String contact,XmppMsg message,int mode) throws Exception {  MultiUserChat muc;  muc=inviteRoom(number,contact,mode);  if (muc != null) {    try {      Message msg=new Message(muc.getRoom());      msg.setBody(message.generateFmtTxt());      if (mode == MODE_SHELL) {        XHTMLManager.addBody(msg,message.generateXHTMLText());      }      msg.setType(Message.Type.groupchat);      muc.sendMessage(msg);    } catch (    Exception e) {      muc.sendMessage(message.generateTxt());    }  }}  }
class C{  public boolean isConnected(){  return m_database.isConnected();}  }
class C{  public static String printReportMarkdown(SonarQubeIssuesReport report,String sonarQubeURL,int issueThreshold){  StringBuilder sb=new StringBuilder("## SonarQube analysis Overview");  sb.append(NEW_LINE);  if ((report.getIssues() == null) || (report.getIssues().isEmpty())) {    sb.append("### No new issues detected!");  } else {    if (report.countIssues() >= issueThreshold) {      sb.append("### Too many issues detected ");      sb.append("(").append(report.countIssues()).append("/").append(issueThreshold).append(")");      sb.append(": Issues cannot be displayed in Diff view.").append(NEW_LINE).append(NEW_LINE);    }    sb.append("| Total New Issues | ").append(report.countIssues()).append(" |").append(NEW_LINE);    sb.append("|-----------------|------|").append(NEW_LINE);    sb.append(printIssueNumberBySeverityMarkdown(report,Severity.BLOCKER));    sb.append(printIssueNumberBySeverityMarkdown(report,Severity.CRITICAL));    sb.append(printIssueNumberBySeverityMarkdown(report,Severity.MAJOR));    sb.append(printIssueNumberBySeverityMarkdown(report,Severity.MINOR));    sb.append(printIssueNumberBySeverityMarkdown(report,Severity.INFO));    sb.append(NEW_LINE).append(NEW_LINE);    sb.append("| Issues list |").append(NEW_LINE);    sb.append("|------------|").append(NEW_LINE);    sb.append(printIssueListBySeverityMarkdown(report,sonarQubeURL,Severity.BLOCKER));    sb.append(printIssueListBySeverityMarkdown(report,sonarQubeURL,Severity.CRITICAL));    sb.append(printIssueListBySeverityMarkdown(report,sonarQubeURL,Severity.MAJOR));    sb.append(printIssueListBySeverityMarkdown(report,sonarQubeURL,Severity.MINOR));    sb.append(printIssueListBySeverityMarkdown(report,sonarQubeURL,Severity.INFO));  }  return sb.toString();}  }
class C{  public static final double newtonMetersToFootPounds(double newtonMeters){  return newtonMeters * NEWTON_METER_TO_FOOT_POUND;}  }
class C{  private void sendPartiallyMinedBlockDeleteCommandToAllPlayers(PartiallyMinedBlock block){  MultiMine.instance().networkHelper.sendPacketToAllAroundPoint(new PartialBlockRemovalPacket(block.getPos()),new TargetPoint(block.getDimension(),block.getPos().getX(),block.getPos().getY(),block.getPos().getZ(),30D));}  }
class C{  protected void ltrSplit(ValueNode<DecompoundedWord> aParent,int aDepth){  if (aDepth > maxTreeDepth) {    return;  }  for (int i=0; i < aParent.getValue().getSplits().size(); i++) {    Fragment element=aParent.getValue().getSplits().get(i);    if (element.shouldSplitAgain()) {      List<DecompoundedWord> results=makeSplit(element.getWord());      for (      DecompoundedWord result : results) {        DecompoundedWord copy=aParent.getValue().createCopy();        if (result.getSplits().size() > 1) {          result.getSplits().get(1).setSplitAgain(true);          copy.replaceSplitElement(i,result);          ValueNode<DecompoundedWord> child=new ValueNode<DecompoundedWord>(copy);          aParent.addChild(child);          ltrSplit(child,aDepth + 1);        } else         if (result.getSplits().size() == 1 && !result.equals(aParent.getValue())) {          copy.replaceSplitElement(i,result);          ValueNode<DecompoundedWord> child=new ValueNode<DecompoundedWord>(copy);          aParent.addChild(child);        }      }    }  }}  }
class C{  public void closeEntry() throws IOException {  checkClosed();  if (currentEntry == null) {    return;  }  if (currentEntry instanceof java.util.jar.JarEntry) {    Attributes temp=((JarEntry)currentEntry).getAttributes();    if (temp != null && temp.containsKey("hidden")) {      return;    }  }  Exception failure=null;  try {    Streams.skipAll(this);  } catch (  Exception e) {    failure=e;  }  int inB, out;  if (currentEntry.compressionMethod == ZipEntry.DEFLATED) {    inB=inf.getTotalIn();    out=inf.getTotalOut();  } else {    inB=inRead;    out=inRead;  }  int diff=entryIn - inB;  if (diff != 0) {    ((PushbackInputStream)in).unread(buf,len - diff,diff);  }  try {    readAndVerifyDataDescriptor(inB,out);  } catch (  Exception e) {    if (failure == null) {      failure=e;    }  }  inf.reset();  lastRead=inRead=entryIn=len=0;  crc.reset();  currentEntry=null;  if (failure != null) {    if (failure instanceof IOException) {      throw (IOException)failure;    } else     if (failure instanceof RuntimeException) {      throw (RuntimeException)failure;    }    AssertionError error=new AssertionError();    error.initCause(failure);    throw error;  }}  }
class C{  public String writeFeed(List<?> entities,String contextUrl,Map<String,Object> meta) throws ODataRenderException {  this.contextURL=checkNotNull(contextUrl);  try {    return writeJson(entities,meta);  } catch (  IOException|IllegalAccessException|NoSuchFieldException|ODataEdmException|ODataRenderException e) {    LOG.error("Not possible to marshall feed stream JSON");    throw new ODataRenderException("Not possible to marshall feed stream JSON: ",e);  }}  }
class C{  public static double[][] one(int m,int n,double c){  return fill(m,n,c);}  }
class C{  public mxCodec(){  this(mxUtils.createDocument());}  }
class C{  public static <T>Stream<T> stream(Adapter<T> adapter){  return adapter.stream();}  }
class C{  public Array params(){  int size=0;  for (int i=0; i < arguments_.size(); i++) {    size+=arguments_.get(i).size();  }  final Array params=new Array(size);  int k=0;  for (int i=0; i < arguments_.size(); i++) {    for (int j=0; j < arguments_.get(i).size(); j++, k++) {      final double value=arguments_.get(i).params().get(j);      params.set(k,value);    }  }  return params;}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){  LOG.d(TAG,"Incoming Result. Request code = " + requestCode);  super.onActivityResult(requestCode,resultCode,intent);  cordovaInterface.onActivityResult(requestCode,resultCode,intent);}  }
class C{  @Override public void classLoaderDestroy(DynamicClassLoader loader){  close();}  }
class C{  public static void dismissKeyboard(Activity activity){  View view=activity.getCurrentFocus();  if (view != null) {    InputMethodManager inputManager=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);    inputManager.hideSoftInputFromWindow(view.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);  }}  }
class C{  public static boolean isLoggingBehaviorEnabled(LoggingBehavior behavior){synchronized (loggingBehaviors) {    return FacebookSdk.isDebugEnabled() && loggingBehaviors.contains(behavior);  }}  }
class C{  public DefaultHandlerDelegate(ManagedEntityConfigXmlParser handler){  this.handler=handler;}  }
class C{  protected int defineSymbol(Movie movie,SWFTagTypes timelineWriter,SWFTagTypes definitionWriter) throws IOException {  currx=0.0;  curry=0.0;  predefineImageFills(movie,timelineWriter,definitionWriter);  int id=getNextId(movie);  Rect outline=getRect();  SWFShape shape=hasAlpha ? definitionWriter.tagDefineShape3(id,outline) : definitionWriter.tagDefineShape2(id,outline);  writeShape(shape);  return id;}  }
class C{  public LinkedList<Diff> diff_main(String text1,String text2){  return diff_main(text1,text2,true);}  }
class C{  private void decryptLastByte(){  int largestPaddingMask=findMaskForLargestPadding();  int decryptedByte=largestPaddingMask ^ largestPaddingByte;  LOG.info("Found the last byte in our block: 0x" + String.format("%02X ",decryptedByte));  properties.setByte(blockSize - 1,(byte)decryptedByte);}  }
class C{  public static int IXOR(int a,int b){  int ret=0;  if (a > 0 && b <= 0) {    ret=a;  } else   if (b > 0 && a <= 0) {    ret=b;  } else {    ret=-Math.abs(a - b);  }  return ret;}  }
class C{  public void attachTo(RecyclerView recycler){  attachTo(recycler,false);}  }
class C{  private void write(ProfileMeasurement m,List<Object> groups){  byte[] rowKey=rowKeyBuilder.rowKey(m,groups);  ColumnList cols=columnBuilder.columns(m);  hbaseClient.addMutation(rowKey,cols,Durability.SKIP_WAL);  hbaseClient.mutate();}  }
class C{  protected String initCookieHeader(String cookie){  return cookie;}  }
class C{  private void parseOutputConfig(final Node node,final ConfigSettings config){  String name;  Long lValue;  Boolean bValue;  Node nnode;  NodeList list=node.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    nnode=list.item(i);    name=nnode.getNodeName().toUpperCase();    if (name.equals(KEY_OUTPUT_MODE)) {      OutputType oValue=OutputType.parse(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.MODE_OUTPUT,oValue);    } else     if (name.equals(KEY_PATH)) {      String path=nnode.getChildNodes().item(0).getNodeValue();      path=path.substring(1,path.length() - 1);      config.setConfigParameter(ConfigurationKeys.PATH_OUTPUT_SQL_FILES,path);    } else     if (name.equals(KEY_OUTPUT_DATAFILE)) {      bValue=Boolean.parseBoolean(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.MODE_DATAFILE_OUTPUT,bValue);    } else     if (name.equals(KEY_LIMIT_SQL_FILE_SIZE)) {      lValue=Long.parseLong(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.LIMIT_SQL_FILE_SIZE,lValue);    } else     if (name.equals(KEY_LIMIT_SQL_ARCHIVE_SIZE)) {      lValue=Long.parseLong(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.LIMIT_SQL_ARCHIVE_SIZE,lValue);    } else     if (name.equals(KEY_MODE_ZIP_COMPRESSION_ENABLED)) {      bValue=Boolean.parseBoolean(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.MODE_ZIP_COMPRESSION_ENABLED,bValue);    } else     if (name.equals(KEY_MODE_BINARY_OUTPUT_ENABLED)) {      bValue=Boolean.parseBoolean(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.MODE_BINARY_OUTPUT_ENABLED,bValue);    } else     if (name.equals(SUBSECTION_SQL)) {      parseSQLConfig(nnode,config);    }  }}  }
class C{  public void generateRandom(int n,Callback2d callback){  for (int y=0; y < n; y++) {    for (int x=0; x < n; x++) {      float sampleX=(rnd.nextFloat() / n + (float)x / n) * 2.0f - 1.0f;      float sampleY=(rnd.nextFloat() / n + (float)y / n) * 2.0f - 1.0f;      callback.onNewSample(sampleX,sampleY);    }  }}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public static int Show(Object msg,String title,int optionType){switch (optionType) {case YES_NO_OPTION:case YES_NO_CANCEL_OPTION:case OK_CANCEL_OPTION:    return SwingUtils.invokeAndWait(null);default :  SwingUtils.invokeAndWait(null);}return 0;}  }
class C{  public static void reset(){  version=null;  self=false;  Method=null;  preferred="";  Attachables.clear();}  }
class C{  private void update(){  for (int i=0; i < 9; i++) {    String val=currState.getValue(i % 3,i / 3);    if (val == TicTacToeState.EMPTY)     val="";    squareBtns[i].setText(val);  }  proposeBtn.setDisable(game.isTerminal(currState));  String statusText;  if (game.isTerminal(currState))   if (game.getUtility(currState,TicTacToeState.X) == 1)   statusText="X has won :-)"; else   if (game.getUtility(currState,TicTacToeState.O) == 1)   statusText="O has won :-)"; else   statusText="No winner..."; else   statusText="Next move: " + game.getPlayer(currState);  if (searchMetrics != null)   statusText+="    " + searchMetrics;  statusLabel.setText(statusText);}  }
class C{  public boolean shouldStripSourceNode(Node textNode) throws javax.xml.transform.TransformerException {  return false;}  }
class C{  static double evaluate(Problem problem,NondominatedPopulation approximationSet){  if (approximationSet.size() < 2) {    return 0.0;  }  double[] d=new double[approximationSet.size()];  for (int i=0; i < approximationSet.size(); i++) {    double min=Double.POSITIVE_INFINITY;    Solution solutionI=approximationSet.get(i);    if (solutionI.violatesConstraints()) {      continue;    }    for (int j=0; j < approximationSet.size(); j++) {      if (i != j) {        Solution solutionJ=approximationSet.get(j);        if (solutionJ.violatesConstraints()) {          continue;        }        min=Math.min(min,IndicatorUtils.manhattanDistance(problem,solutionI,solutionJ));      }    }    d[i]=min;  }  double dbar=StatUtils.sum(d) / approximationSet.size();  double sum=0.0;  for (int i=0; i < approximationSet.size(); i++) {    if (approximationSet.get(i).violatesConstraints()) {      continue;    }    sum+=Math.pow(d[i] - dbar,2.0);  }  return Math.sqrt(sum / (approximationSet.size() - 1));}  }
class C{  public void testUpdatePathMissingPartially() throws Exception {  if (!propertiesSupported())   return;  Map<String,String> propsSubDir=properties("subDirOwner","subDirGroup","0555");  Map<String,String> propsFile=properties("fileOwner","fileGroup","0666");  create(igfsSecondary,paths(DIR,SUBDIR),paths(FILE));  create(igfs,paths(DIR),null);  igfsSecondaryFileSystem.update(SUBDIR,propsSubDir);  igfs.update(FILE,propsFile);  checkExist(igfs,SUBDIR,FILE);  assertEquals(propsSubDir,igfsSecondary.properties(SUBDIR.toString()));  assertEquals(propsSubDir,igfs.info(SUBDIR).properties());  assertEquals(propsFile,igfsSecondary.properties(FILE.toString()));  assertEquals(propsFile,igfs.info(FILE).properties());}  }
class C{  public boolean isSelection(){  return (this == SELECTION);}  }
class C{  protected IdentifierRef_IM undefinedRef(){  return TranspilerBuilderBlocks._IdentRef(getSymbolTableEntryForMember(RuleEnvironmentExtensions.globalObjectType(state.G),"undefined",false,false,true));}  }
class C{  public static void normalizeFileBackup(String currentUserAccount) throws IOException {  normalizeFileBackup(new File(Environment.getDataDirectory().toString() + DATABASE_LOCATION),currentUserAccount);}  }
class C{  public void cancel(int id){  cancel(null,id);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getDeActivateFor_();}  }
class C{  public void addSpam(Reader stream) throws java.io.IOException {  addTokenOccurrences(stream,spamTokenCounts);  spamMessageCount++;}  }
class C{  public static boolean hasDeadStatesFromInitial(Automaton a){  BitSet reachableFromInitial=getLiveStatesFromInitial(a);  BitSet reachableFromAccept=getLiveStatesToAccept(a);  reachableFromInitial.andNot(reachableFromAccept);  return reachableFromInitial.isEmpty() == false;}  }
class C{  OFChannelHandler(@Nonnull IOFSwitchManager switchManager,@Nonnull INewOFConnectionListener newConnectionListener,@Nonnull ChannelPipeline pipeline,@Nonnull IDebugCounterService debugCounters,@Nonnull Timer timer){  Preconditions.checkNotNull(switchManager,"switchManager");  Preconditions.checkNotNull(newConnectionListener,"connectionOpenedListener");  Preconditions.checkNotNull(pipeline,"pipeline");  Preconditions.checkNotNull(timer,"timer");  Preconditions.checkNotNull(debugCounters,"debugCounters");  this.pipeline=pipeline;  this.debugCounters=debugCounters;  this.newConnectionListener=newConnectionListener;  this.counters=switchManager.getCounters();  this.state=new InitState();  this.timer=timer;  log.debug("constructor on OFChannelHandler {}",String.format("%08x",System.identityHashCode(this)));}  }
class C{  public BufferedOutputStream(OutputStream out,int size){  this(out,size,"unnamed");}  }
class C{  void startInsert(final int taskId,final Object tag,final Object cookie,final String table,final String nullColumnHack,final ContentValues values,final boolean autoNotify,final AsyncDbQueryCallback callback){  final QueryTask task=new QueryTask(Type.INSERT,taskId,tag,cookie,callback);  task.mTableName=table;  task.mNullColumnHack=nullColumnHack;  task.mValues=values;  task.mAutoNotify=autoNotify;  mTaskQueue.add(task);  new QueryAsyncTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR,task);}  }
class C{  public static String indent(String s){  return indent(s,4,true);}  }
class C{  public static HistoryEntity build(History h){  HistoryEntity entity=new HistoryEntity();  entity.location=h.location;  entity.date=h.date;  entity.maxiTemp=h.maxiTemp;  entity.miniTemp=h.miniTemp;  return entity;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatainsertdataend.class,args);}  }
class C{  private void discoverAll(AccessProfile accessProfile) throws BaseCollectionException {  boolean discoverySuccess=true;  StringBuffer errMsgBuilder=new StringBuffer();  URI storageSystemURI=null;  StorageSystem vplexStorageSystem=null;  String detailedStatusMessage="Unknown Status";  try {    s_logger.info("Access Profile Details :  IpAddress : {}, PortNumber : {}",accessProfile.getIpAddress(),accessProfile.getPortNumber());    storageSystemURI=accessProfile.getSystemId();    vplexStorageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemURI);    s_logger.info("Discover VPlex storage system {} at IP:{}, PORT:{}",new Object[]{storageSystemURI.toString(),accessProfile.getIpAddress(),accessProfile.getPortNumber()});    VPlexApiClient client=getVPlexAPIClient(accessProfile);    s_logger.debug("Got handle to VPlex API client");    StorageProvider activeProvider=_dbClient.queryObject(StorageProvider.class,vplexStorageSystem.getActiveProviderURI());    String serialNumber=getSystemSerialNumber(client,activeProvider,null);    if (!vplexStorageSystem.getSerialNumber().equals(serialNumber)) {      s_logger.error(String.format("The VPLEX serial number unexpectedly changed from %s to %s.",vplexStorageSystem.getSerialNumber(),serialNumber));      throw VPlexApiException.exceptions.vplexSerialNumberChanged(vplexStorageSystem.getSerialNumber(),serialNumber);    }    vplexStorageSystem.setFirmwareVersion(activeProvider.getVersionString());    vplexStorageSystem.setCompatibilityStatus(CompatibilityStatus.COMPATIBLE.toString());    try {      s_logger.info("Discovering cluster identification.");      discoverClusterIdentification(vplexStorageSystem,client);      _completer.statusPending(_dbClient,"Completed cluster identification discovery");    } catch (    VPlexCollectionException vce) {      discoverySuccess=false;      String errMsg=String.format("Failed cluster identification discovery for VPlex %s",storageSystemURI.toString());      s_logger.error(errMsg,vce);      if (errMsgBuilder.length() != 0) {        errMsgBuilder.append(", ");      }      errMsgBuilder.append(errMsg);    }    List<StoragePort> allPorts=new ArrayList<StoragePort>();    try {      s_logger.info("Discovering frontend and backend ports.");      discoverPorts(client,vplexStorageSystem,allPorts,null);      _dbClient.persistObject(vplexStorageSystem);      _completer.statusPending(_dbClient,"Completed port discovery");    } catch (    VPlexCollectionException vce) {      discoverySuccess=false;      String errMsg=String.format("Failed port discovery for VPlex %s",storageSystemURI.toString());      s_logger.error(errMsg,vce);      if (errMsgBuilder.length() != 0) {        errMsgBuilder.append(", ");      }      errMsgBuilder.append(errMsg);    }    try {      s_logger.info("Discovering connectivity.");      discoverConnectivity(vplexStorageSystem);      _dbClient.persistObject(vplexStorageSystem);      _completer.statusPending(_dbClient,"Completed connectivity verification");    } catch (    VPlexCollectionException vce) {      discoverySuccess=false;      String errMsg=String.format("Failed connectivity discovery for VPlex %s",storageSystemURI.toString());      s_logger.error(errMsg,vce);      if (errMsgBuilder.length() != 0) {        errMsgBuilder.append(", ");      }      errMsgBuilder.append(errMsg);    }    if (discoverySuccess) {      vplexStorageSystem.setReachableStatus(true);      _dbClient.persistObject(vplexStorageSystem);    } else {      vplexStorageSystem.setReachableStatus(false);      _dbClient.persistObject(vplexStorageSystem);      throw new Exception(errMsgBuilder.toString());    }    StoragePortAssociationHelper.runUpdatePortAssociationsProcess(allPorts,null,_dbClient,_coordinator,null);    client.clearCaches();    detailedStatusMessage=String.format("Discovery completed successfully for Storage System: %s",storageSystemURI.toString());  } catch (  Exception e) {    VPlexCollectionException vce=VPlexCollectionException.exceptions.failedDiscovery(storageSystemURI.toString(),e.getLocalizedMessage());    detailedStatusMessage=vce.getLocalizedMessage();    s_logger.error(detailedStatusMessage,e);    throw vce;  } finally {    if (vplexStorageSystem != null) {      try {        vplexStorageSystem.setLastDiscoveryStatusMessage(detailedStatusMessage);        _dbClient.persistObject(vplexStorageSystem);      } catch (      DatabaseException ex) {        s_logger.error("Error persisting last discovery status for storage system {}",vplexStorageSystem.getId(),ex);      }    }  }}  }
class C{  public static String joinParasWithEncodedValue(Map<String,String> parasMap){  StringBuilder paras=new StringBuilder("");  if (parasMap != null && parasMap.size() > 0) {    Iterator<Map.Entry<String,String>> ite=parasMap.entrySet().iterator();    try {      while (ite.hasNext()) {        Map.Entry<String,String> entry=(Map.Entry<String,String>)ite.next();        paras.append(entry.getKey()).append(EQUAL_SIGN).append(StringUtils.utf8Encode(entry.getValue()));        if (ite.hasNext()) {          paras.append(PARAMETERS_SEPARATOR);        }      }    } catch (    Exception e) {      e.printStackTrace();    }  }  return paras.toString();}  }
class C{  public File downloadConfigDir(SolrZkClient zkClient,String configName,File dir) throws IOException, InterruptedException, KeeperException {  Preconditions.checkArgument(dir.exists());  Preconditions.checkArgument(dir.isDirectory());  ZkConfigManager manager=new ZkConfigManager(zkClient);  manager.downloadConfigDir(configName,dir.toPath());  File confDir=new File(dir,"conf");  if (!confDir.isDirectory()) {    confDir=new File(Files.createTempDir().getAbsolutePath(),"conf");    confDir.getParentFile().deleteOnExit();    Files.move(dir,confDir);    dir=confDir.getParentFile();  }  verifyConfigDir(confDir);  return dir;}  }
class C{  private static void fillAdvancingFront(DTSweepContext tcx,AdvancingFrontNode n){  AdvancingFrontNode node;  double angle;  node=n.next;  while (node.hasNext()) {    if (isLargeHole(node)) {      break;    }    fill(tcx,node);    node=node.next;  }  node=n.prev;  while (node.hasPrevious()) {    if (isLargeHole(node)) {      break;    }    fill(tcx,node);    node=node.prev;  }  if (n.hasNext() && n.next.hasNext()) {    angle=basinAngle(n);    if (angle < PI_3div4) {      fillBasin(tcx,n);    }  }}  }
class C{  private void resetCounters(){  swapCnt.set(0);  unswapCnt.set(0);}  }
class C{  public void login(String loginTime,long userkey,String... roles){  BillingIntegrationTestBase.setDateFactoryInstance(loginTime);  container.login(userkey,roles);}  }
class C{  public static String color(String txt,Color color){  if (useColors()) {    String col=color.escape();    String res=Color.reset.escape();    if (col != null && !col.isEmpty() && res != null && !res.isEmpty()) {      txt=col + txt + res;    }  }  return txt;}  }
class C{  private void updateRegionCache(String bucketName) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException {  if (bucketName != null && S3_AMAZONAWS_COM.equals(this.baseUrl.host()) && this.accessKey != null && this.secretKey != null && !BucketRegionCache.INSTANCE.exists(bucketName)) {    Map<String,String> queryParamMap=new HashMap<>();    queryParamMap.put("location",null);    HttpResponse response=execute(Method.GET,US_EAST_1,bucketName,null,null,queryParamMap,null,null,0);    XmlPullParser xpp=xmlPullParserFactory.newPullParser();    String location=null;    xpp.setInput(response.body().charStream());    while (xpp.getEventType() != xpp.END_DOCUMENT) {      if (xpp.getEventType() == xpp.START_TAG && xpp.getName() == "LocationConstraint") {        xpp.next();        location=getText(xpp,location);        break;      }      xpp.next();    }    response.body().close();    String region;    if (location == null) {      region=US_EAST_1;    } else {      if ("EU".equals(location)) {        region="eu-west-1";      } else {        region=location;      }    }    BucketRegionCache.INSTANCE.add(bucketName,region);  }}  }
class C{  public boolean contains(T value){  return this.contains(value.getX(),value.getY(),value.getZ());}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getAlloperatorsDao() : null;}  }
class C{  public static MemberExistsResult fieldExists(String fieldName,EclipseNode node){  while (node != null && !(node.get() instanceof TypeDeclaration)) {    node=node.up();  }  if (node != null && node.get() instanceof TypeDeclaration) {    TypeDeclaration typeDecl=(TypeDeclaration)node.get();    if (typeDecl.fields != null)     for (    FieldDeclaration def : typeDecl.fields) {      char[] fName=def.name;      if (fName == null)       continue;      if (fieldName.equals(new String(fName))) {        return getGeneratedBy(def) == null ? MemberExistsResult.EXISTS_BY_USER : MemberExistsResult.EXISTS_BY_LOMBOK;      }    }  }  return MemberExistsResult.NOT_EXISTS;}  }
class C{  public Object clone() throws CloneNotSupportedException {  StrBuilder clone=(StrBuilder)super.clone();  clone.buffer=new char[buffer.length];  System.arraycopy(buffer,0,clone.buffer,0,buffer.length);  return clone;}  }
class C{  @SuppressWarnings({"unchecked"}) public static void defineClass(Context cx,Scriptable thisObj,Object[] args,Function funObj) throws IllegalAccessException, InstantiationException, InvocationTargetException {  Class<?> clazz=getClass(args);  if (!Scriptable.class.isAssignableFrom(clazz)) {    throw reportRuntimeError("msg.must.implement.Scriptable");  }  ScriptableObject.defineClass(thisObj,(Class<? extends Scriptable>)clazz);}  }
class C{  @Override public void close() throws IOException {  closed=true;  def.end();  in.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.268 -0500",hash_original_method="0A3E2C1E27BAEA738FDF96AD17500BEE",hash_generated_method="E5F5EBE98566555BF59936E8B0F473F8") public ConditionObject(){}  }
class C{  int[] splitLine(String line){  line=line.substring(line.indexOf("Turn duration overflow by"));  line=line.substring(line.indexOf(":") + 1).trim();  String[] tokens=line.split(" ");  int[] res=new int[tokens.length];  for (int i=0; i < tokens.length; i++) {    res[i]=Integer.parseInt(tokens[i]);  }  return res;}  }
class C{  public static void valueToDocument(Value value,Element element,Document document){  _valueToDocument(value,element,document);}  }
class C{  public static void waitForProcessOutput(Process self){  waitForProcessOutput(self,(OutputStream)null,(OutputStream)null);}  }
class C{  @Override public void updateString(int columnIndex,String x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateString(" + columnIndex + ", "+ quote(x)+ ");");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueString.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void appendToNalUnit(byte[] data,int offset,int limit){  if (!isFilling) {    return;  }  int readLength=limit - offset;  if (nalData.length < nalLength + readLength) {    nalData=Arrays.copyOf(nalData,(nalLength + readLength) * 2);  }  System.arraycopy(data,offset,nalData,nalLength,readLength);  nalLength+=readLength;}  }
class C{  private Uri insertLog(final Uri baseUri,final ContentValues values){  if (values.containsKey(Schema.COL_TIMESTAMP)) {    final long rowId=mDbHelper.getWritableDatabase().insert(Schema.TBL_LOGS,null,values);    if (rowId > 0) {      final Uri logUri=ContentUris.withAppendedId(baseUri,rowId);      getContext().getContentResolver().notifyChange(ContentProvider.CONTENT_URI_LOGFILE,null);      return logUri;    }  } else {    throw new IllegalArgumentException("mandatory column missing");  }  return null;}  }
class C{  protected ConnectionFactory createConnectionFactory(String uri,String name) throws Exception {  ConnectionFactoryParser parser=new ConnectionFactoryParser();  return parser.newObject(parser.expandURI(uri),name);}  }
class C{  public double toDouble(){  if (m_length == 0)   return Double.NaN;  int i;  char c;  String valueString=fsb().getString(m_start,m_length);  for (i=0; i < m_length; i++)   if (!XMLCharacterRecognizer.isWhiteSpace(valueString.charAt(i)))   break;  if (i == m_length)   return Double.NaN;  if (valueString.charAt(i) == '-')   i++;  for (; i < m_length; i++) {    c=valueString.charAt(i);    if (c != '.' && (c < '0' || c > '9'))     break;  }  for (; i < m_length; i++)   if (!XMLCharacterRecognizer.isWhiteSpace(valueString.charAt(i)))   break;  if (i != m_length)   return Double.NaN;  try {    return new Double(valueString).doubleValue();  } catch (  NumberFormatException nfe) {    return Double.NaN;  }}  }
class C{  @Override @SuppressWarnings("rawtypes") public void init(NamedList args){  try {    loadData();  } catch (  Exception e) {    throw new RuntimeException("Couldn't load profile data, will return empty languages always!",e);  }  if (args != null) {    Object o;    o=args.get("defaults");    if (o != null && o instanceof NamedList) {      defaults=SolrParams.toSolrParams((NamedList)o);    } else {      defaults=SolrParams.toSolrParams(args);    }    o=args.get("appends");    if (o != null && o instanceof NamedList) {      appends=SolrParams.toSolrParams((NamedList)o);    }    o=args.get("invariants");    if (o != null && o instanceof NamedList) {      invariants=SolrParams.toSolrParams((NamedList)o);    }  }}  }
class C{  public void textElement(String elName,int value) throws IOException {  textElement(elName,String.valueOf(value));}  }
class C{  public static boolean evaluateTrigger(Trigger trigger,Double actualValue){  requireArgument(trigger != null,"Trigger cannot be null.");  requireArgument(actualValue != null,"Trigger cannot be evaulated against null.");  Double lowThreshold, highThreshold;switch (trigger.type) {case GREATER_THAN:    return actualValue.compareTo(trigger.getThreshold()) > 0;case GREATER_THAN_OR_EQ:  return actualValue.compareTo(trigger.getThreshold()) >= 0;case LESS_THAN:return actualValue.compareTo(trigger.getThreshold()) < 0;case LESS_THAN_OR_EQ:return actualValue.compareTo(trigger.getThreshold()) <= 0;case EQUAL:return actualValue.compareTo(trigger.getThreshold()) == 0;case NOT_EQUAL:return actualValue.compareTo(trigger.getThreshold()) != 0;case BETWEEN:lowThreshold=Math.min(trigger.getThreshold(),trigger.getSecondaryThreshold());highThreshold=Math.max(trigger.getThreshold(),trigger.getSecondaryThreshold());return (actualValue.compareTo(lowThreshold) >= 0 && actualValue.compareTo(highThreshold) <= 0);case NOT_BETWEEN:lowThreshold=Math.min(trigger.getThreshold(),trigger.getSecondaryThreshold());highThreshold=Math.max(trigger.getThreshold(),trigger.getSecondaryThreshold());return (actualValue.compareTo(lowThreshold) < 0 || actualValue.compareTo(highThreshold) > 0);default :throw new SystemException("Unsupported trigger type " + trigger.type);}}  }
class C{  @SuppressWarnings("StringEquality") public static boolean isCurrentIgniteNameSet(@Nullable String name){  return name != LOC_IGNITE_NAME_EMPTY;}  }
class C{  public final int size(){  return _size;}  }
class C{  public void considerName(String className){  if (className == null) {    return;  }  className=internalToBinaryClassName(className);  try {    if (getClass().getClassLoader().loadClass(className) != null) {      return;    }  } catch (  ClassNotFoundException e) {  }  assert mCurrentDepSet != null;  if (mCurrentDepSet != null) {    mCurrentDepSet.add(className);  }}  }
class C{  public void select(Envelope searchEnv,MonotoneChainSelectAction mcs){  computeSelect(searchEnv,start,end,mcs);}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public void diff_cleanupSemantic(LinkedList<Diff> diffs){  if (diffs.isEmpty()) {    return;  }  boolean changes=false;  Stack<Diff> equalities=new Stack<Diff>();  String lastequality=null;  ListIterator<Diff> pointer=diffs.listIterator();  int length_insertions1=0;  int length_deletions1=0;  int length_insertions2=0;  int length_deletions2=0;  Diff thisDiff=pointer.next();  while (thisDiff != null) {    if (thisDiff.operation == Operation.EQUAL) {      equalities.push(thisDiff);      length_insertions1=length_insertions2;      length_deletions1=length_deletions2;      length_insertions2=0;      length_deletions2=0;      lastequality=thisDiff.text;    } else {      if (thisDiff.operation == Operation.INSERT) {        length_insertions2+=thisDiff.text.length();      } else {        length_deletions2+=thisDiff.text.length();      }      if (lastequality != null && (lastequality.length() <= Math.max(length_insertions1,length_deletions1)) && (lastequality.length() <= Math.max(length_insertions2,length_deletions2))) {        while (thisDiff != equalities.lastElement()) {          thisDiff=pointer.previous();        }        pointer.next();        pointer.set(new Diff(Operation.DELETE,lastequality));        pointer.add(new Diff(Operation.INSERT,lastequality));        equalities.pop();        if (!equalities.empty()) {          equalities.pop();        }        if (equalities.empty()) {          while (pointer.hasPrevious()) {            pointer.previous();          }        } else {          thisDiff=equalities.lastElement();          while (thisDiff != pointer.previous()) {          }        }        length_insertions1=0;        length_insertions2=0;        length_deletions1=0;        length_deletions2=0;        lastequality=null;        changes=true;      }    }    thisDiff=pointer.hasNext() ? pointer.next() : null;  }  if (changes) {    diff_cleanupMerge(diffs);  }  diff_cleanupSemanticLossless(diffs);  pointer=diffs.listIterator();  Diff prevDiff=null;  thisDiff=null;  if (pointer.hasNext()) {    prevDiff=pointer.next();    if (pointer.hasNext()) {      thisDiff=pointer.next();    }  }  while (thisDiff != null) {    if (prevDiff.operation == Operation.DELETE && thisDiff.operation == Operation.INSERT) {      String deletion=prevDiff.text;      String insertion=thisDiff.text;      int overlap_length1=this.diff_commonOverlap(deletion,insertion);      int overlap_length2=this.diff_commonOverlap(insertion,deletion);      if (overlap_length1 >= overlap_length2) {        if (overlap_length1 >= deletion.length() / 2.0 || overlap_length1 >= insertion.length() / 2.0) {          pointer.previous();          pointer.add(new Diff(Operation.EQUAL,insertion.substring(0,overlap_length1)));          prevDiff.text=deletion.substring(0,deletion.length() - overlap_length1);          thisDiff.text=insertion.substring(overlap_length1);        }      } else {        if (overlap_length2 >= deletion.length() / 2.0 || overlap_length2 >= insertion.length() / 2.0) {          pointer.previous();          pointer.add(new Diff(Operation.EQUAL,deletion.substring(0,overlap_length2)));          prevDiff.operation=Operation.INSERT;          prevDiff.text=insertion.substring(0,insertion.length() - overlap_length2);          thisDiff.operation=Operation.DELETE;          thisDiff.text=deletion.substring(overlap_length2);        }      }      thisDiff=pointer.hasNext() ? pointer.next() : null;    }    prevDiff=thisDiff;    thisDiff=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  private VplexMirror queryVplexMirror(URI id){  ArgValidator.checkUri(id);  VplexMirror mirror=_permissionsHelper.getObjectById(id,VplexMirror.class);  ArgValidator.checkEntityNotNull(mirror,id,isIdEmbeddedInURL(id));  return mirror;}  }
class C{  public boolean unlockIt(){  log.info("unlockIt - " + toString());  setProcessing(false);  return true;}  }
class C{  boolean isStaticReference(JCTree tree){  if (tree.hasTag(SELECT)) {    Symbol lsym=TreeInfo.symbol(((JCFieldAccess)tree).selected);    if (lsym == null || lsym.kind != TYP) {      return false;    }  }  return true;}  }
class C{  public void close() throws IOException {  manager.sendClose(info);}  }
class C{  public static void move(String url,String newDirPath,OnMoveDownloadFileListener onMoveDownloadFileListener){  getFileDownloadManager().move(url,newDirPath,onMoveDownloadFileListener);}  }
class C{  public void addPercentile(int percent,long value){  percentiles.put(percent,value);}  }
class C{  public void reload(String path) throws TomcatManagerException, IOException {  invoke("/reload?path=" + URLEncoder.encode(path,this.charset));}  }
class C{  public static int toChars(int[] src,int srcOff,int srcLen,char[] dest,int destOff){  if (srcLen < 0) {    throw new IllegalArgumentException("srcLen must be >= 0");  }  int written=0;  for (int i=0; i < srcLen; ++i) {    written+=Character.toChars(src[srcOff + i],dest,destOff + written);  }  return written;}  }
class C{  private SavedState(Parcel in){  super(in);  prevFirstVisiblePosition=in.readInt();  prevFirstVisibleChildHeight=in.readInt();  prevScrolledChildrenHeight=in.readInt();  prevScrollY=in.readInt();  scrollY=in.readInt();  childrenHeights=new SparseIntArray();  final int numOfChildren=in.readInt();  if (0 < numOfChildren) {    for (int i=0; i < numOfChildren; i++) {      final int key=in.readInt();      final int value=in.readInt();      childrenHeights.put(key,value);    }  }}  }
class C{  public UserDTO authenticate(LoginDTO loginDTO,HttpServletResponse response) throws HmacException {  UsernamePasswordAuthenticationToken authenticationToken=new UsernamePasswordAuthenticationToken(loginDTO.getLogin(),loginDTO.getPassword());  Authentication authentication=authenticationManager.authenticate(authenticationToken);  SecurityContextHolder.getContext().setAuthentication(authentication);  SecurityUser securityUser=(SecurityUser)userDetailsService.loadUserByUsername(loginDTO.getLogin());  List<String> authorities=new ArrayList<>();  for (  GrantedAuthority authority : securityUser.getAuthorities()) {    authorities.add(authority.getAuthority());  }  Map<String,String> customClaims=new HashMap<>();  customClaims.put(HmacSigner.ENCODING_CLAIM_PROPERTY,HmacUtils.HMAC_SHA_256);  String secret=HmacSigner.generateSecret();  HmacToken hmacToken=HmacSigner.getSignedToken(secret,String.valueOf(securityUser.getId()),HmacSecurityFilter.JWT_TTL,customClaims);  for (  UserDTO userDTO : MockUsers.getUsers()) {    if (userDTO.getId().equals(securityUser.getId())) {      userDTO.setSecretKey(secret);    }  }  response.setHeader(HmacUtils.X_TOKEN_ACCESS,hmacToken.getJwt());  response.setHeader(HmacUtils.X_SECRET,hmacToken.getSecret());  response.setHeader(HttpHeaders.WWW_AUTHENTICATE,HmacUtils.HMAC_SHA_256);  UserDTO userDTO=new UserDTO();  userDTO.setId(securityUser.getId());  userDTO.setLogin(securityUser.getUsername());  userDTO.setAuthorities(authorities);  userDTO.setProfile(securityUser.getProfile());  return userDTO;}  }
class C{  public boolean equivalent(Operation o){  return o.token == this.token && o.op == this.op;}  }
class C{  public void destroy(){  try {    stop();    ManagementFactory.getFactory().unregisterMBeanObject(JMX_NAME);    if (logger.isInfoEnabled())     logger.info(JMX_NAME + " desregistrado con \351xito.");  } catch (  Exception e) {    logger.error("Error al desregistrar: " + JMX_NAME,e);  }}  }
class C{  protected void bypassFinalStatistics(EvolutionState state,int result){  super.finalStatistics(state,result);}  }
class C{  @SuppressWarnings("unchecked") @protection static <E>List<E> dynamicallyCastList(List<?> list,Class<E> type){  return dynamicallyCastCollection(list,type,List.class);}  }
class C{  public mxPoint(double x,double y){  setX(x);  setY(y);}  }
class C{  public boolean isExperimental(){  BugPattern pattern=getBugPattern();  return pattern.isExperimental();}  }
class C{  @Procedure @PerformsWrites @Description("apoc.refactor.cloneNodesWithRelationships([node1,node2,...]) clone nodes with their labels, properties and relationships") public Stream<NodeRefactorResult> cloneNodesWithRelationships(@Name("nodes") List<Node> nodes){  return doCloneNodes(nodes,true);}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  @Override public void dispose(){  batch.dispose();  font.dispose();}  }
class C{  public static Map<String,Object> checkUpdatePrunRoutingTask(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productionRunId=(String)context.get("productionRunId");  String routingTaskId=(String)context.get("routingTaskId");  if (!UtilValidate.isEmpty(productionRunId) && !UtilValidate.isEmpty(routingTaskId)) {    ProductionRun productionRun=new ProductionRun(productionRunId,delegator,dispatcher);    if (productionRun.exist()) {      if (!"PRUN_CREATED".equals(productionRun.getGenericValue().getString("currentStatusId")) && !"PRUN_SCHEDULED".equals(productionRun.getGenericValue().getString("currentStatusId"))) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunPrinted",locale));      }      Timestamp estimatedStartDate=(Timestamp)context.get("estimatedStartDate");      Timestamp pRestimatedStartDate=productionRun.getEstimatedStartDate();      if (pRestimatedStartDate.after(estimatedStartDate)) {        try {          dispatcher.runSync("updateProductionRun",UtilMisc.toMap("productionRunId",productionRunId,"estimatedStartDate",estimatedStartDate,"userLogin",userLogin));        } catch (        GenericServiceException e) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingRoutingTaskStartDateBeforePRun",locale));        }      }      Long priority=(Long)context.get("priority");      List<GenericValue> pRRoutingTasks=productionRun.getProductionRunRoutingTasks();      boolean first=true;      for (Iterator<GenericValue> iter=pRRoutingTasks.iterator(); iter.hasNext(); ) {        GenericValue routingTask=iter.next();        if (priority.equals(routingTask.get("priority")) && !routingTaskId.equals(routingTask.get("workEffortId")))         return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingRoutingTaskSeqIdAlreadyExist",locale));        if (routingTaskId.equals(routingTask.get("workEffortId"))) {          routingTask.set("estimatedSetupMillis",((BigDecimal)context.get("estimatedSetupMillis")).doubleValue());          routingTask.set("estimatedMilliSeconds",((BigDecimal)context.get("estimatedMilliSeconds")).doubleValue());          if (first) {            if (!estimatedStartDate.equals(pRestimatedStartDate)) {              productionRun.setEstimatedStartDate(estimatedStartDate);            }          }          if (!priority.equals(routingTask.get("priority"))) {            routingTask.set("priority",priority);            if (!productionRun.store()) {              Debug.logError("productionRun.store(), in routingTask.priority update, fail for productionRunId =" + productionRunId,module);              return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));            }            productionRun.clearRoutingTasksList();          }        }        if (first)         first=false;      }      productionRun.setEstimatedCompletionDate(productionRun.recalculateEstimatedCompletionDate(priority,estimatedStartDate));      if (productionRun.store()) {        return ServiceUtil.returnSuccess();      } else {        Debug.logError("productionRun.store() fail for productionRunId =" + productionRunId,module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));      }    }    Debug.logError("no productionRun for productionRunId =" + productionRunId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));  }  Debug.logError("service updateProductionRun call with productionRunId empty",module);  return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));}  }
class C{  void commitIndex() throws SQLException {  try {    indexAccess.writer.commit();    indexAccess.searcher.close();    indexAccess.reader.close();    indexAccess.reader=IndexReader.open(indexAccess.writer,true);    indexAccess.searcher=new IndexSearcher(indexAccess.reader);  } catch (  IOException e) {    throw convertException(e);  }}  }
class C{  @Override public final void closeShape(){  shape_primitives.addElement(H);  shape_primitive_x.addElement(0);  shape_primitive_y.addElement(0);  shape_primitive_x2.addElement(0);  shape_primitive_y2.addElement(0);  shape_primitive_x3.addElement(0);  shape_primitive_y3.addElement(0);}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  protected void resetEditorFrom(CommonModel commonModel){  final AppEngineServerModel serverModel=(AppEngineServerModel)commonModel.getServerModel();  final Artifact artifact=serverModel.getArtifact();  myArtifactComboBox.setSelectedItem(artifact);  if (artifact == null && myArtifactComboBox.getItemCount() == 1) {    myArtifactComboBox.setSelectedIndex(0);    BuildArtifactsBeforeRunTaskProvider.setBuildArtifactBeforeRun(commonModel.getProject(),commonModel,(Artifact)myArtifactComboBox.getSelectedItem());  }  port.setText(intToString(serverModel.getPort()));  host.setText(serverModel.getHost());  adminHost.setText(serverModel.getAdminHost());  adminPort.setText(intToString(serverModel.getAdminPort()));  apiPort.setText(intToString(serverModel.getApiPort()));  applicationLogLevel.setSelectedItem(serverModel.getLogLevel());  cleadDatastoreCheckbox.setSelected(serverModel.getClearDatastore());}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.VARIABLE_STATEMENT__VAR_DECLS_OR_BINDINGS:    return ((InternalEList<?>)getVarDeclsOrBindings()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static void freeTempFile(int seq){synchronized (availableTempFileList) {    File tempFile=seq_to_tempfile_name.remove(seq);    if (tempFile != null) {      availableTempFileList.push(tempFile);    }  }}  }
class C{  public void execute(ActionReject anAction,Mail aMail,ActionContext context) throws MessagingException {  ActionUtils.detectAndHandleLocalLooping(aMail,context,"reject");  StringBuilder humanText=new StringBuilder(128);  humanText.append("This message was refused by the recipient's mail filtering program.");  humanText.append("\r\n");  humanText.append("The reason given was:");  humanText.append("\r\n");  humanText.append("\r\n");  humanText.append(anAction.getMessage());  String reporting_UA_name=null;  try {    reporting_UA_name=InetAddress.getLocalHost().getCanonicalHostName();  } catch (  UnknownHostException ex) {    reporting_UA_name="localhost";  }  String reporting_UA_product=context.getServerInfo();  String[] originalRecipients=aMail.getMessage().getHeader("Original-Recipient");  String original_recipient=null;  if (null != originalRecipients && originalRecipients.length > 0) {    original_recipient=originalRecipients[0];  }  MailAddress soleRecipient=ActionUtils.getSoleRecipient(aMail);  String final_recipient=soleRecipient.toString();  String original_message_id=aMail.getMessage().getMessageID();  DispositionModifier modifiers[]={new ModifierError()};  Disposition disposition=new Disposition(new ActionModeAutomatic(),new SendingModeAutomatic(),new TypeDeleted(),modifiers);  MimeMultipart multiPart=MDNFactory.create(humanText.toString(),reporting_UA_name,reporting_UA_product,original_recipient,final_recipient,original_message_id,disposition);  MimeMessage reply=(MimeMessage)aMail.getMessage().reply(false);  reply.setFrom(soleRecipient.toInternetAddress());  reply.setContent(multiPart);  reply.saveChanges();  Address[] recipientAddresses=reply.getAllRecipients();  if (null != recipientAddresses) {    Collection<MailAddress> recipients=new ArrayList<MailAddress>(recipientAddresses.length);    for (    Address recipientAddress : recipientAddresses) {      recipients.add(new MailAddress((InternetAddress)recipientAddress));    }    context.post(null,recipients,reply);  } else {    context.getLog().info("Unable to send reject MDN. Could not determine the recipient.");  }  aMail.setState(Mail.GHOST);}  }
class C{  public StubGenerator(){  proxyClasses=new Hashtable();}  }
class C{  @Override public void close() throws XMLStreamException {}  }
class C{  private void initResourcesIfNecessary(){  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(R.drawable.two_line);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }  setBackgroundResource(R.drawable.white);}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public static String constructRecodeMapEntry(String token,Long code){  return token + Lop.DATATYPE_PREFIX + code.toString();}  }
class C{  public PrintStream printStream(){  return mPrint;}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public String str(){  if (null == m_strCache)   m_strCache=new String((char[])m_obj,m_start,m_length);  return m_strCache;}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.ENTITY_MAPPING_RULE;}  }
class C{  public static boolean IsInstalled(Context ctx){  PackageManager pm=ctx.getPackageManager();  try {    pm.getPackageInfo("com.mariussoft.endlessjabber",PackageManager.GET_ACTIVITIES);    return true;  } catch (  NameNotFoundException e) {    return false;  }}  }
class C{  public static boolean isRPVPlexProtectHASide(VirtualPool vpool){  return (NullColumnValueGetter.isNotNullValue(vpool.getHaVarrayConnectedToRp()) && VirtualPool.HighAvailabilityType.vplex_distributed.name().equals(vpool.getHighAvailability()) && VirtualPool.vPoolSpecifiesRPVPlex(vpool)&& !VirtualPool.vPoolSpecifiesMetroPoint(vpool));}  }
class C{  private HeaderCard(String key,String value,String comment,boolean nullable,boolean isString) throws HeaderCardException {  this.isString=isString;  if (key == null && value != null) {    throw new HeaderCardException("Null keyword with non-null value");  } else   if (key != null && key.length() > HeaderCard.MAX_KEYWORD_LENGTH && (!FitsFactory.getUseHierarch() || !key.startsWith(HIERARCH_WITH_DOT))) {    throw new HeaderCardException("Keyword too long");  }  if (value != null) {    value=value.replaceAll(" *$","");    if (value.startsWith("'")) {      if (value.charAt(value.length() - 1) != '\'') {        throw new HeaderCardException("Missing end quote in string value");      }      value=value.substring(1,value.length() - 1).trim();    }    if (!FitsFactory.isLongStringsEnabled() && value.replace("'","''").length() > (this.isString ? HeaderCard.MAX_STRING_VALUE_LENGTH : HeaderCard.MAX_VALUE_LENGTH)) {      throw new HeaderCardException("Value too long");    }  }  this.key=key;  this.value=value;  this.comment=comment;  this.nullable=nullable;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LineNeedle)) {    return false;  }  return super.equals(obj);}  }
class C{  private List<String> sortKeysRecursion(TSTNode currentNode,int sortKeysNumReturnValues,List<String> sortKeysResult2){  if (currentNode == null) {    return sortKeysResult2;  }  List<String> sortKeysResult=sortKeysRecursion(currentNode.relatives[TSTNode.LOKID],sortKeysNumReturnValues,sortKeysResult2);  if (sortKeysNumReturnValues != -1 && sortKeysResult.size() >= sortKeysNumReturnValues) {    return sortKeysResult;  }  if (currentNode.data != null) {    sortKeysResult.add(getKey(currentNode));  }  sortKeysResult=sortKeysRecursion(currentNode.relatives[TSTNode.EQKID],sortKeysNumReturnValues,sortKeysResult);  return sortKeysRecursion(currentNode.relatives[TSTNode.HIKID],sortKeysNumReturnValues,sortKeysResult);}  }
class C{  int endRecovery(){  store.decRef();  int left=onGoingRecoveries.decrementAndGet();  assert onGoingRecoveries.get() >= 0 : "ongoingRecoveries must be >= 0 but was: " + onGoingRecoveries.get();  return left;}  }
class C{  public boolean isCondensed(){  return condensed;}  }
class C{  public void sync(MemBufferHolder<VolatileMemAllocator> mbuf){  m_vmasvc.sync(m_nid,getBufferAddress(mbuf),0L,true);}  }
class C{  private int findRangeAndAdjust(NormalSsaInsn insn){  RegisterSpecList sources=insn.getSources();  int szSources=sources.size();  int categoriesForIndex[]=new int[szSources];  int rangeLength=0;  for (int i=0; i < szSources; i++) {    int category=sources.get(i).getCategory();    categoriesForIndex[i]=category;    rangeLength+=categoriesForIndex[i];  }  int maxScore=Integer.MIN_VALUE;  int resultRangeStart=-1;  BitSet resultMovesRequired=null;  int rangeStartOffset=0;  for (int i=0; i < szSources; i++) {    int ssaCenterReg=sources.get(i).getReg();    if (i != 0) {      rangeStartOffset-=categoriesForIndex[i - 1];    }    if (!ssaRegsMapped.get(ssaCenterReg)) {      continue;    }    int rangeStart=mapper.oldToNew(ssaCenterReg) + rangeStartOffset;    if (rangeStart < 0 || spansParamRange(rangeStart,rangeLength)) {      continue;    }    BitSet curMovesRequired=new BitSet(szSources);    int fitWidth=fitPlanForRange(rangeStart,insn,categoriesForIndex,curMovesRequired);    if (fitWidth < 0) {      continue;    }    int score=fitWidth - curMovesRequired.cardinality();    if (score > maxScore) {      maxScore=score;      resultRangeStart=rangeStart;      resultMovesRequired=curMovesRequired;    }    if (fitWidth == rangeLength) {      break;    }  }  if (resultRangeStart == -1) {    resultMovesRequired=new BitSet(szSources);    resultRangeStart=findAnyFittingRange(insn,rangeLength,categoriesForIndex,resultMovesRequired);  }  for (int i=resultMovesRequired.nextSetBit(0); i >= 0; i=resultMovesRequired.nextSetBit(i + 1)) {    insn.changeOneSource(i,insertMoveBefore(insn,sources.get(i)));  }  return resultRangeStart;}  }
class C{  public void testURLSourcedLoader(){  Instances data;  if (!(getLoader() instanceof URLSourcedLoader)) {    return;  }  try {    m_Saver.setInstances(m_Instances);    m_Saver.setFile(new File(m_ExportFilename));    m_Saver.writeBatch();    ((URLSourcedLoader)m_Loader).setURL(new File(m_ExportFilename).toURI().toURL().toString());    data=m_Loader.getDataSet();    try {      if (m_Instances.classIndex() != data.classIndex()) {        data.setClassIndex(m_Instances.classIndex());      }      compareDatasets(m_Instances,data);    } catch (    Exception e) {      fail("URL load failed (datasets differ): " + e.toString());    }  } catch (  Exception e) {    e.printStackTrace();    fail("URL load failed: " + e.toString());  }}  }
class C{  public double calcScoreWithExtraParent(int nNode,int nCandidateParent) throws Exception {  ParentSet oParentSet=m_BayesNet.getParentSet(nNode);  Instances instances=m_BayesNet.m_Instances;  for (int iParent=0; iParent < oParentSet.getNrOfParents(); iParent++) {    if (oParentSet.getParent(iParent) == nCandidateParent) {      return -1e100;    }  }  oParentSet.addParent(nCandidateParent,instances);  double fAccuracy=calcScore(m_BayesNet);  oParentSet.deleteLastParent(instances);  return fAccuracy;}  }
class C{  public <X extends Throwable>int orElseThrow(Supplier<X> exceptionSupplier) throws X {  if (isPresent) {    return value;  } else {    throw exceptionSupplier.get();  }}  }
class C{  private static void threeValueLongCmp(Instruction s,IR ir){  if (VM.BuildFor32Addr) {    threeValueLongCmp_32(s,ir);  } else {    threeValueLongCmp_64(s,ir);  }}  }
class C{  private static InputStreamReader decompressWithBZip2(final String archivePath) throws ConfigurationException {  Bzip2Archiver archiver=new Bzip2Archiver();  InputStreamReader reader=null;  try {    reader=archiver.getDecompressionStream(archivePath,WIKIPEDIA_ENCODING);  } catch (  IOException e) {    e.printStackTrace();  }  return reader;}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length == 5) {    run(args[0],args[1],args[2],args[3],args[4]);  } else   if (args.length == 3) {    run(args[0],args[1],args[2],args[0],args[1]);  } else {    throw new IllegalArgumentException("Wrong number of input arguments.");  }}  }
class C{  public ViewPropertyAnimator rotation(float value){  animateProperty(ROTATION,value);  return this;}  }
class C{  void recordRemoval(HashMap m){}  }
class C{  public static void remap() throws Exception {  setFinalField(harvest,HFCrops.TURNIP.getCropStack(1));  setFinalField(onion,HFCrops.ONION.getCropStack(1));  setFinalField(spinach,HFCrops.SPINACH.getCropStack(1));  setFinalField(cooking,HFApi.cooking.getBestMeal("turnip_pickled"));}  }
class C{  public void testDynDoubleSortMissingLast() throws Exception {  checkSortMissingLast("dyn_doubledv_missinglast","-1.3","4.2");}  }
class C{  private RegistrationIdentifiers determineRegistrationIds(long triggerProcessKey) throws Exception {  ResourceHolder holder=getTriggerProcessParameters(triggerProcessKey);  ResultSet triggerProcessParameters=holder.getRs();  while (triggerProcessParameters.next()) {    String parameterName=triggerProcessParameters.getString("name");    if (TriggerProcessParameterName.USER.name().equals(parameterName)) {      VOUserDetails entry=getObjectFromXML(triggerProcessParameters,VOUserDetails.class);      holder.close();      return new RegistrationIdentifiers(entry.getUserId(),entry.getEMail());    }  }  throw new Exception("Migration failed, no product entry found for trigger process!");}  }
class C{  @Inject(method="doMove",at=@At("HEAD")) public void onDoMoveHead(World worldIn,BlockPos pos,EnumFacing direction,boolean extending,CallbackInfoReturnable<Boolean> ci){  if (!worldIn.isRemote && CauseTracker.ENABLED) {    final CauseTracker causeTracker=((IMixinWorldServer)worldIn).getCauseTracker();    final IBlockState currentState=worldIn.getBlockState(pos);    final SpongeBlockSnapshot snapshot=((IMixinWorldServer)worldIn).createSpongeBlockSnapshot(currentState,currentState,pos,0);    final IMixinChunk mixinChunk=(IMixinChunk)worldIn.getChunkFromBlockCoords(pos);    final PhaseContext phaseContext=PhaseContext.start().add(NamedCause.source(snapshot)).add(NamedCause.of(InternalNamedCauses.Piston.POSITION,pos)).add(NamedCause.of(InternalNamedCauses.Piston.DIRECTION,direction)).add(NamedCause.of(InternalNamedCauses.Piston.DUMMY_CALLBACK,new MutableWrapper<CallbackInfoReturnable<Boolean>>(null))).addCaptures();    mixinChunk.getBlockNotifier(pos).ifPresent(null);    mixinChunk.getBlockOwner(pos).ifPresent(null);    causeTracker.switchToPhase(BlockPhase.State.PISTON_MOVING,phaseContext.complete());  }}  }
class C{  public SidedPlane(Vector p,final PlanetModel planetModel,double sinLat){  super(planetModel,sinLat);  sigNum=Math.signum(evaluate(p));  if (sigNum == 0.0)   throw new IllegalArgumentException("Cannot determine sidedness because check point is on plane.");}  }
class C{  public RandomBallCoverOneShot(List<V> vecs,DistanceMetric dm){  this(vecs,dm,(int)Math.sqrt(vecs.size()));}  }
class C{  private void save(){  log.debug("save");  OperationsXml.save();  if (Setup.isCloseWindowOnSaveEnabled()) {    dispose();  }}  }
class C{  public OFRoleReplyVendorData(){  super(NXT_ROLE_REPLY);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:04.373 -0500",hash_original_method="8876B8D60330C38B32B3F1E3F7F33D8F",hash_generated_method="D68C6F9FA647A83C6A4D81A513346973") public X509CertImpl(Certificate certificate){  this.certificate=certificate;  this.tbsCert=certificate.getTbsCertificate();  this.extensions=tbsCert.getExtensions();}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.COMPOSED_TYPE_REF;}  }
class C{  private Color unwrap(Color c){  if (c instanceof UIResource) {    return new Color(c.getRGB());  }  return c;}  }
class C{  protected BasicPooledConnAdapter(ThreadSafeClientConnManager tsccm,AbstractPoolEntry entry){  super(tsccm,entry);  markReusable();}  }
class C{  public int add(DownloadRequest request){  request=checkNotNull(request,"request == null");  if (isDownloading(request.uri().toString())) {    return -1;  }  request.setContext(context);  request.setDownloader(downloader.copy());  return downloadRequestQueue.add(request) ? request.downloadId() : -1;}  }
class C{  private void fireEdit(ISelection selection){  formPage.getManagedForm().fireSelectionChanged(this,selection);  if (selection.isEmpty()) {    selectedAssignment=null;  } else {    selectedAssignment=(JmxBeanSensorAssignment)((StructuredSelection)selection).getFirstElement();  }  updateButtonsState(selection);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.EMBEDDED ? null : stack.getUIMgrSafe().getEmbeddedPanel();}  }
class C{  public static Query newQuery(String field,String query) throws ParseException {  return newQueryParser(field).parse(query);}  }
class C{  static public <T>void assertSameSolutionsAnyOrder(final String msg,final T[] expected,final Iterator<T> actual){  try {    final int nrange=expected.length;    final java.util.Map<T,AtomicInteger> range=new java.util.LinkedHashMap<T,AtomicInteger>();    for (int j=0; j < nrange; j++) {      AtomicInteger count=range.get(expected[j]);      if (count == null) {        count=new AtomicInteger();      }      range.put(expected[j],count);      count.incrementAndGet();    }    for (int j=0; j < nrange; j++) {      if (!actual.hasNext()) {        fail(msg + ": Iterator exhausted while expecting more object(s)" + ": index="+ j);      }      final T actualObject=actual.next();      if (log.isInfoEnabled())       log.info("visting: " + actualObject);      AtomicInteger counter=range.get(actualObject);      if (counter == null || counter.get() == 0) {        fail("Object not expected" + ": index=" + j + ", object="+ actualObject);      }      counter.decrementAndGet();    }    if (actual.hasNext()) {      final List<T> remaining=new LinkedList<T>();      while (actual.hasNext())       remaining.add(actual.next());      fail("Iterator will deliver too many objects: remaining=" + remaining);    }  }  finally {    if (actual instanceof ICloseableIterator<?>) {      ((ICloseableIterator<T>)actual).close();    }  }}  }
class C{  public GoldTextSimilarityScore_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  public AdditiveEpsilonIndicatorFitnessEvaluator(Problem problem){  super(problem);}  }
class C{  public boolean hasChildren(){  return (getChildCount() != 0);}  }
class C{  public static ResultSet select(Connection conn,String sql) throws SQLException {  Statement stat=conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);  return stat.executeQuery(sql);}  }
class C{  public static int EBUSY(){  return Errno.EBUSY.intValue();}  }
class C{  private static void assertStringNotNull(final String str){  JBBPUtils.assertNotNull(str,"String must not be null");}  }
class C{  public FgsMb(Score score){  if (verbose) {    out.println("GES constructor");  }  this.variables=score.getVariables();  setFgsScore(score);  this.graph=new EdgeListGraphSingleConnections(getVariables());}  }
class C{  public EventSetDescriptor(String eventSetName,Class<?> listenerType,MethodDescriptor listenerMethodDescriptors[],Method addListenerMethod,Method removeListenerMethod) throws IntrospectionException {  setName(eventSetName);  this.listenerMethodDescriptors=(listenerMethodDescriptors != null) ? listenerMethodDescriptors.clone() : null;  setAddListenerMethod(addListenerMethod);  setRemoveListenerMethod(removeListenerMethod);  setListenerType(listenerType);}  }
class C{  public TFloatFloatHashMapDecorator(TFloatFloatHashMap map){  super();  this._map=map;}  }
class C{  public void defineLandscapeSwap(String portraitPosition,String landscapePosition){  if (landscapeSwap == null) {    landscapeSwap=new HashMap<String,String>();  }  landscapeSwap.put(portraitPosition,landscapePosition);  landscapeSwap.put(landscapePosition,portraitPosition);}  }
class C{  public void testGetProperty(){  UnboundBean instance=new UnboundBeanImpl();  assertNull(instance.getProperty(NOT_A_PROPERTY));  assertEquals(OLD_VALUE,instance.getProperty(STRING_PROPERTY));  assertNull(instance.getProperty(MAPPED_STRING));}  }
class C{  private static String removeLineSeparator(String inputString){  inputString=inputString.replace("\n\r"," ");  inputString=inputString.replace(System.getProperty("line.separator")," ");  inputString=inputString.replace("\n"," ");  inputString=inputString.replace("\t"," ");  inputString=inputString.replace("\r"," ");  return inputString;}  }
class C{  public boolean isMappingLangToXmlLang(){  return mappingLangToXmlLang;}  }
class C{  private View fillFromMiddle(int childrenTop,int childrenBottom){  int height=childrenBottom - childrenTop;  int position=reconcileSelectedPosition();  View sel=makeAndAddView(position,childrenTop,true,mListPadding.left,true);  mFirstPosition=position;  int selHeight=sel.getMeasuredHeight();  if (selHeight <= height) {    sel.offsetTopAndBottom((height - selHeight) / 2);  }  fillAboveAndBelow(sel,position);  if (!mStackFromBottom) {    correctTooHigh(getChildCount());  } else {    correctTooLow(getChildCount());  }  return sel;}  }
class C{  public void testIncrementalLoader(){  Instance temp;  Instances data;  if (!(getLoader() instanceof IncrementalConverter)) {    return;  }  try {    m_Saver.setInstances(m_Instances);    m_Saver.setFile(new File(m_ExportFilename));    m_Saver.writeBatch();    ((AbstractFileLoader)m_Loader).setFile(new File(m_ExportFilename));    data=new Instances(m_Loader.getStructure());    do {      temp=m_Loader.getNextInstance(data);      if (temp != null) {        data.add(temp);      }    } while (temp != null);    try {      if (m_Instances.classIndex() != data.classIndex()) {        data.setClassIndex(m_Instances.classIndex());      }      compareDatasets(m_Instances,data);    } catch (    Exception e) {      fail("Incremental load failed (datasets differ): " + e.toString());    }  } catch (  Exception e) {    e.printStackTrace();    fail("Incremental load failed: " + e.toString());  }}  }
class C{  public PPlanRouter(final TripRouter routingHandler){  this(routingHandler,null);}  }
class C{  public Table findLocalTempTable(String name){  if (localTempTables == null) {    return null;  }  return localTempTables.get(name);}  }
class C{  public List<alloperators> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<alloperators> list=new ArrayList<alloperators>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  result.append(type.toString());  result.append('<');  result.append(name);  result.append(':');  if (fieldsData != null) {    result.append(fieldsData);  }  result.append('>');  return result.toString();}  }
class C{  void handleSubscriberException(Throwable e,SubscriberExceptionContext context){  checkNotNull(e);  checkNotNull(context);  try {    exceptionHandler.handleException(e,context);  } catch (  Throwable e2) {    logger.log(Level.SEVERE,String.format(Locale.ROOT,"Exception %s thrown while handling exception: %s",e2,e),e2);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.SHIFT_EXPRESSION__LEFT_OPERAND:    return leftOperand != null;case ExpressionsPackage.SHIFT_EXPRESSION__OPERATOR:  return operator != OPERATOR_EDEFAULT;case ExpressionsPackage.SHIFT_EXPRESSION__RIGHT_OPERAND:return rightOperand != null;}return super.eIsSet(featureID);}  }
class C{  public void newMethod() throws IOException {  print("newMethod",null);}  }
class C{  public void execute(@NotNull Collection<HgFile> hgFiles){  for (  Map.Entry<VirtualFile,List<String>> entry : HgUtil.getRelativePathsByRepository(hgFiles).entrySet()) {    List<String> filePaths=entry.getValue();    for (    List<String> chunkFiles : VcsFileUtil.chunkRelativePaths(filePaths)) {      List<String> parameters=new LinkedList<String>();      parameters.addAll(chunkFiles);      parameters.add(0,"--after");      new HgCommandExecutor(myProject).executeInCurrentThread(entry.getKey(),"remove",parameters);    }  }}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  private void updateIM(IntersectionMatrix im){  for (Iterator ei=isolatedEdges.iterator(); ei.hasNext(); ) {    Edge e=(Edge)ei.next();    e.updateIM(im);  }  for (Iterator ni=nodes.iterator(); ni.hasNext(); ) {    RelateNode node=(RelateNode)ni.next();    node.updateIM(im);    node.updateIMFromEdges(im);  }}  }
class C{  void forceStackTop(Type t){  if (!alive)   return;switch (t.getTag()) {case CLASS:case ARRAY:    int width=width(t);  Type old=stack[stacksize - width];Assert.check(types.isSubtype(types.erasure(old),types.erasure(t)));stack[stacksize - width]=t;break;default :}}  }
class C{  public static PropertyFilter valueOf(String filterString){  if (filterString == null || filterString.length() == 0 || ALL.equals(filterString=filterString.trim())) {    return ALL_FILTER;  } else   if (filterString.equalsIgnoreCase(NONE)) {    return NONE_FILTER;  }  return new PropertyFilter(filterString);}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(SERVER_ROOT + "/pages");}  }
class C{  public void onCandidate(long sessionId,int index,String id,String sdp){  send(new RTCCandidate(deviceId,sessionId,index,id,sdp));}  }
class C{  public static Scs cs_spalloc(int m,int n,int nzmax,boolean values,boolean triplet){  Scs A=new Scs();  A.m=m;  A.n=n;  A.nzmax=nzmax=Math.max(nzmax,1);  A.nz=triplet ? 0 : -1;  A.p=triplet ? new int[nzmax] : new int[n + 1];  A.i=new int[nzmax];  A.x=values ? new float[nzmax] : null;  return A;}  }
class C{  @Inline public final void insert(ObjectReference object){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!object.isNull());  checkTailInsert(1);  uncheckedTailInsert(object.toAddress());}  }
class C{  private void initialize(Coordinate p0,Coordinate p1,double distance){  pt[0].setCoordinate(p0);  pt[1].setCoordinate(p1);  this.distance=distance;  isNull=false;}  }
class C{  private TBSCertList(int version,AlgorithmIdentifier signature,Name issuer,Date thisUpdate,Date nextUpdate,List<RevokedCertificate> revokedCertificates,Extensions crlExtensions,byte[] encoding){  this.version=version;  this.signature=signature;  this.issuer=issuer;  this.thisUpdate=thisUpdate;  this.nextUpdate=nextUpdate;  this.revokedCertificates=revokedCertificates;  this.crlExtensions=crlExtensions;  this.encoding=encoding;}  }
class C{  @Override public void collectionProcessComplete() throws AnalysisEngineProcessException {  try {    TfidfUtils.writeDfModel(dfStore,outputPath);  } catch (  Exception e) {    throw new AnalysisEngineProcessException(e);  }}  }
class C{  public static boolean isUrlLocalFile(URL url){  return url.getProtocol().equals("file");}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  public static void i(String tag,String msg,Throwable tr){  println(INFO,tag,msg,tr);}  }
class C{  private Builder(){  this(DEFAULT);}  }
class C{  @Override public DriverTask exportVolumesToInitiators(List<Initiator> initiators,List<StorageVolume> volumes,Map<String,String> volumeToHLUMap,List<StoragePort> recommendedPorts,List<StoragePort> availablePorts,StorageCapabilities capabilities,MutableBoolean usedRecommendedPorts,List<StoragePort> selectedPorts){  return provisioningHelper.exportVolumesToInitiators(initiators,volumes,volumeToHLUMap,recommendedPorts,availablePorts,capabilities,usedRecommendedPorts,selectedPorts);}  }
class C{  public boolean isFull(){  if (maxSize > 0 && notifications.size() >= maxSize) {    return true;  }  return false;}  }
class C{  public View start(){  startAnim();  return mPopupView;}  }
class C{  public static Object assertThreadIdToSequenceIdMapHasEntryId(){  Map map=pool.getThreadIdToSequenceIdMap();  assertNotNull(map);  assertTrue(map.size() != 0);  Map.Entry entry=null;  for (Iterator threadIdToSequenceIdMapIterator=map.entrySet().iterator(); threadIdToSequenceIdMapIterator.hasNext(); ) {    entry=(Map.Entry)threadIdToSequenceIdMapIterator.next();  }  ThreadIdentifier tid=(ThreadIdentifier)entry.getKey();  SequenceIdAndExpirationObject seo=(SequenceIdAndExpirationObject)entry.getValue();  long sequenceId=seo.getSequenceId();  EventID evId=new EventID(tid.getMembershipID(),tid.getThreadID(),sequenceId);synchronized (map) {    map.clear();  }  return evId;}  }
class C{  public final Flux<T> awaitOnSubscribe(){  return onAssembly(new FluxAwaitOnSubscribe<>(this));}  }
class C{  public void clearContext(){  clearShopRelatedParameters();  customerEmail=null;  customerName=null;  customerShops=new ArrayList<String>(0);}  }
class C{  public static String renderLinks(CharSequence input,Iterable<LinkSpan> links,LinkRenderer linkRenderer){  StringBuilder sb=new StringBuilder(input.length() + 16);  int lastIndex=0;  for (  LinkSpan link : links) {    sb.append(input,lastIndex,link.getBeginIndex());    linkRenderer.render(link,input,sb);    lastIndex=link.getEndIndex();  }  if (lastIndex < input.length()) {    sb.append(input,lastIndex,input.length());  }  return sb.toString();}  }
class C{  void write(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {  if (num instanceof Integer) {    out.writeByte(CONSTANT_INTEGER);    out.writeInt(num.intValue());  } else   if (num instanceof Long) {    out.writeByte(CONSTANT_LONG);    out.writeLong(num.longValue());  } else   if (num instanceof Float) {    out.writeByte(CONSTANT_FLOAT);    out.writeFloat(num.floatValue());  } else   if (num instanceof Double) {    out.writeByte(CONSTANT_DOUBLE);    out.writeDouble(num.doubleValue());  }}  }
class C{  @Override public BaseContentEntry<?> computeNext(){  if (!currentItr.hasNext()) {    Pair<Iterator<BaseContentEntry<?>>,Integer> pair=getEntries(index,resultsPerRequest);    currentItr=pair.getFirst();    index+=pair.getSecond();    if (!currentItr.hasNext()) {      return endOfData();    }  }  return currentItr.next();}  }
class C{  public double[] keys(){  double[] keys=new double[size()];  double[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  private static String preParseCode(String script){  final String[] searchFor={"= (\"%.2f\",","this.ADBE"," getField(","\ngetField(","\rgetField(","(getField(","this.getField(","this.resetForm(","this.pageNum"," this.getOCGs(","\nthis.getOCGs(","\rthis.getOCGs("," getOCGs(","\ngetOCGs(","\rgetOCGs(",".state="};  final String[] replaceWith={"= util.z(\"%.2f\",","ADBE"," acro.getField(","\nacro.getField(","\racro.getField(","(acro.getField(","acro.getField(","acro.resetForm(","acro.pageNum"," layers.getOCGs(","\nlayers.getOCGs(","\rlayers.getOCGs("," layers.getOCGs(","\nlayers.getOCGs(","\rlayers.getOCGs(","\rlayers.getOCGs("};  for (int i=0; i < searchFor.length; i++) {    script=checkAndReplaceCode(searchFor[i],replaceWith[i],script);  }  final int indexs=script.indexOf("printf");  printf:   if (indexs != -1) {    final StringBuilder buf=new StringBuilder();    int indexStart=script.lastIndexOf(';',indexs);    final int indextmp=script.lastIndexOf('{',indexs);    if (indexStart == -1 || (indextmp != -1 && indextmp > indexStart)) {      indexStart=indextmp;    }    buf.append(script.substring(0,indexStart + 1));    int speech=script.indexOf('\"',indexs);    speech=script.indexOf('\"',speech + 1);    while (script.charAt(speech - 1) == '\\') {      speech=script.indexOf('\"',speech);    }    final int startArgs=script.indexOf(',',speech);    final int endArgs=script.indexOf(')',startArgs);    final String arguments=script.substring(startArgs + 1,endArgs);    if (arguments.equals("printfArgs")) {      break printf;    }    final StringTokenizer tok=new StringTokenizer(arguments,", ");    buf.append("var printfArgs=new Array();\n");    int i=0;    while (tok.hasMoreTokens()) {      buf.append("printfArgs[");      buf.append(i++);      buf.append("]=");      buf.append(tok.nextToken());      buf.append(";\n");    }    buf.append(script.substring(indexStart + 1,startArgs + 1));    buf.append("printfArgs");    buf.append(script.substring(endArgs));    script=buf.toString();  }  script=checkAndReplaceCode("event.value=AFMakeNumber(acro.getField(\"sum\").value)(8)","",script);  script=checkAndReplaceCode("calculate = false","calculate = 0",script);  script=checkAndReplaceCode("calculate = true","calculate = 1",script);  script=checkAndReplaceCode("calculate=false","calculate=0",script);  script=checkAndReplaceCode("calculate=true","calculate=1",script);  return script;}  }
class C{  public boolean add(CharSequence key,Object value){  trie.put(key,value);  return false;}  }
class C{  private static boolean isMatching(Throwable cause,Class<? extends Throwable> causeClass,final boolean isSubtypeOk){  return isSubtypeOk ? causeClass.isInstance(cause) : causeClass == cause.getClass();}  }
class C{  public IdUnreadArticleOmitter(Date lastUpdated){  this.lastUpdated=lastUpdated;}  }
class C{  public int size(){  return (impl.size());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.383 -0500",hash_original_method="FB7B04B697C4CD5C2E52C66D10F38E7C",hash_generated_method="B9BECCC653C69893690A16B8DB132B22") private static void dualPivotQuicksort(long[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  long ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    long t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    long t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    long t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    long t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    long t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    long t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    long t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    long t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    long t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  long pivot1=ae2;  a[e2]=a[left];  long pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  @Override public void loadProperties(final String props){  properties.loadProperties(props);}  }
class C{  public void animateThenRemove(MarkerWithPosition marker,LatLng from,LatLng to){  lock.lock();  AnimationTask animationTask=new AnimationTask(marker,from,to);  animationTask.removeOnAnimationComplete(mClusterManager.getMarkerManager());  mAnimationTasks.add(animationTask);  lock.unlock();}  }
class C{  public int size(){  return size;}  }
class C{  private Class invokeInterfaceHarness(Class specimen,Extends iface,AbstractMethod method,String... args){  Interface istub=new Interface(iface.getType().getName(),iface.getType().getAccessFlags(),iface.getType().getParameters(),null,Arrays.asList((Method)method));  Class cstub=new Class(specimen.getName());  String params=Arrays.asList(args).stream().collect(Collectors.joining(", ")).toString();  ConcreteMethod sm=new ConcreteMethod("int",SourceModel.stdMethodName,String.format("return ((%s)(new %s())).%s(%s);",iface.toString(),specimen.getName(),method.getName(),params),new AccessFlag("public"),new AccessFlag("static"));  sm.suppressWarnings();  Class ii=new Class("II_" + specimen.getName() + "_"+ iface.getType().getName(),sm);  ii.addCompilationDependency(istub);  ii.addCompilationDependency(cstub);  ii.addCompilationDependency(method);  return ii;}  }
class C{  private void loadExternalUnit(String annoName){  Class<? extends Annotation> annoClass=loader.loadExternalAnnotationClass(annoName);  addUnitToExternalQualMap(annoClass);}  }
class C{  public RenderContext(AffineTransform usr2dev){  this(usr2dev,null,null);}  }
class C{  final public int copyRest(final ByteArrayBuffer src){  final int n=src.remaining();  if (n > 0) {    put(src.buf,src.pos,n);  }  return n;}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  public String globalInfo(){  return "Generates the matrix output as HTML.";}  }
class C{  public int eval(INode state){  JumpingSolitaireState node=(JumpingSolitaireState)state;  int nf=0;  for (int i=0; i < node.filled.length; i++) {    if (node.filled[i])     nf++;  }  int ni=numIsolated(node);  int hn=nf - ni;  int gn=0;  DepthTransition t=(DepthTransition)state.storedData();  if (t != null) {    gn=t.depth;  }  return gn + hn;}  }
class C{  void pluginMessage(Throwable ex){  log.printLines(PrefixKind.JAVAC,"msg.plugin.uncaught.exception");  ex.printStackTrace(log.getWriter(WriterKind.NOTICE));}  }
class C{  public String buildUnionSubQuery(String typeDiscriminatorColumn,String[] unionColumns,Set<String> columnsPresentInTable,int computedColumnsOffset,String typeDiscriminatorValue,String selection,String groupBy,String having){  int unionColumnsCount=unionColumns.length;  String[] projectionIn=new String[unionColumnsCount];  for (int i=0; i < unionColumnsCount; i++) {    String unionColumn=unionColumns[i];    if (unionColumn.equals(typeDiscriminatorColumn)) {      projectionIn[i]="'" + typeDiscriminatorValue + "' AS "+ typeDiscriminatorColumn;    } else     if (i <= computedColumnsOffset || columnsPresentInTable.contains(unionColumn)) {      projectionIn[i]=unionColumn;    } else {      projectionIn[i]="NULL AS " + unionColumn;    }  }  return buildQuery(projectionIn,selection,groupBy,having,null,null);}  }
class C{  public static <T>void fill(List<? super T> list,T object){  ListIterator<? super T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(object);  }}  }
class C{  public void putUnknownHost(String hostname,String detailMessage){  cache.put(hostname,new AddressCacheEntry(detailMessage));}  }
class C{  public void testAddAndRemove(){  Audit audit=createMock(Audit.class);  AuditServiceThreadImpl instance=initialiseAuditServiceThread(audit);  AuditServiceThreadListener mockAuditServiceThreadListener=createMock(AuditServiceThreadListener.class);  instance.remove(mockAuditServiceThreadListener);  instance.add(mockAuditServiceThreadListener);  assertTrue(instance.getListeners().contains(mockAuditServiceThreadListener));  instance.remove(mockAuditServiceThreadListener);  assertTrue(instance.getListeners().isEmpty());}  }
class C{  public static String updateGeneric(HttpServletRequest request,HttpServletResponse response){  String entityName=request.getParameter("entityName");  Locale locale=UtilHttp.getLocale(request);  if (entityName == null || entityName.length() <= 0) {    String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.entity_name_not_specified",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("[GenericWebEvent.updateGeneric] The entityName was not specified, but is required.",module);    return "error";  }  Security security=(Security)request.getAttribute("security");  Delegator delegator=(Delegator)request.getAttribute("delegator");  if (security == null) {    String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.security_object_not_found",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("[updateGeneric] The security object was not found in the request, please check the control servlet init.",module);    return "error";  }  if (delegator == null) {    String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.delegator_object_not_found",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("[updateGeneric] The delegator object was not found in the request, please check the control servlet init.",module);    return "error";  }  ModelReader reader=delegator.getModelReader();  ModelEntity entity=null;  try {    entity=reader.getModelEntity(entityName);  } catch (  GenericEntityException e) {    Debug.logError(e,module);  }  String updateMode=request.getParameter("UPDATE_MODE");  if (updateMode == null || updateMode.length() <= 0) {    String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.update_mode_not_specified",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("[updateGeneric] Update Mode was not specified, but is required; entityName: " + entityName,module);    return "error";  }  if (!security.hasEntityPermission("ENTITY_DATA","_" + updateMode,request.getSession()) && !security.hasEntityPermission(entity.getPlainTableName(),"_" + updateMode,request.getSession())) {    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode,"entityName",entity.getEntityName(),"entityPlainTableName",entity.getPlainTableName());    String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.not_sufficient_permissions_01",messageMap,locale);    errMsg+=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.not_sufficient_permissions_02",messageMap,locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  GenericValue findByEntity=delegator.makeValue(entityName);  String errMsgPk="";  Iterator<ModelField> pksIter=entity.getPksIterator();  while (pksIter.hasNext()) {    String errMsg="";    ModelField field=pksIter.next();    ModelFieldType type=null;    try {      type=delegator.getEntityFieldType(entity,field.getType());    } catch (    GenericEntityException e) {      Debug.logWarning(e,module);      Map<String,String> messageMap=UtilMisc.toMap("fieldType",field.getType());      errMsg+=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.fatal_error_param",messageMap,locale) + ".";    }    String fval=request.getParameter(field.getName());    if (UtilValidate.isNotEmpty(fval)) {      try {        findByEntity.setString(field.getName(),fval);      } catch (      Exception e) {        Map<String,String> messageMap=UtilMisc.toMap("fval",fval);        errMsg=errMsg + "<li>" + field.getColName()+ UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.conversion_failed",messageMap,locale)+ type.getJavaType()+ ".";        Debug.logWarning("[updateGeneric] " + field.getColName() + " conversion failed: \""+ fval+ "\" is not a valid "+ type.getJavaType()+ "; entityName: "+ entityName,module);      }    }  }  if (errMsgPk.length() > 0) {    request.setAttribute("_ERROR_MESSAGE_",errMsgPk);    return "error";  }  if (updateMode.equals("DELETE")) {    try {      delegator.removeByPrimaryKey(findByEntity.getPrimaryKey());    } catch (    GenericEntityException e) {      String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.delete_failed",locale) + ": " + e.toString();      Debug.logWarning(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }    return "success";  }  String errMsgNonPk="";  Iterator<ModelField> nopksIter=entity.getNopksIterator();  while (nopksIter.hasNext()) {    ModelField field=nopksIter.next();    ModelFieldType type=null;    try {      type=delegator.getEntityFieldType(entity,field.getType());    } catch (    GenericEntityException e) {      Debug.logWarning(e,module);      Map<String,String> messageMap=UtilMisc.toMap("fieldType",field.getType());      errMsgNonPk+=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.fatal_error_param",messageMap,locale) + ".";    }    String fval=request.getParameter(field.getName());    if (UtilValidate.isNotEmpty(fval)) {      try {        findByEntity.setString(field.getName(),fval);      } catch (      Exception e) {        Map<String,String> messageMap=UtilMisc.toMap("fval",fval);        errMsgNonPk+=field.getColName() + UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.conversion_failed",messageMap,locale) + type.getJavaType()+ ".";        Debug.logWarning("[updateGeneric] " + field.getColName() + " conversion failed: \""+ fval+ "\" is not a valid "+ type.getJavaType()+ "; entityName: "+ entityName,module);      }    } else {      findByEntity.set(field.getName(),null);    }  }  if (errMsgNonPk.length() > 0) {    request.setAttribute("_ERROR_MESSAGE_",errMsgNonPk);    return "error";  }  if (updateMode.equals("CREATE")) {    GenericValue tempEntity=null;    try {      tempEntity=EntityQuery.use(delegator).from(findByEntity.getEntityName()).where(findByEntity.getPrimaryKey()).queryOne();    } catch (    GenericEntityException e) {      String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.create_failed_by_check",locale) + ": " + e.toString();      Debug.logWarning(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }    if (tempEntity != null) {      Map<String,String> messageMap=UtilMisc.toMap("primaryKey",findByEntity.getPrimaryKey().toString());      String errMsg="[updateGeneric] " + entity.getEntityName() + UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.already_exists_pk",messageMap,locale)+ ".";      Debug.logWarning(errMsg,module);    }  }  String errMsgParam="";  Iterator<ModelField> fieldIter=entity.getFieldsIterator();  while (fieldIter.hasNext()) {    ModelField field=fieldIter.next();    for (    String curValidate : field.getValidators()) {      Class<?>[] paramTypes=new Class[]{String.class};      Object[] params=new Object[]{findByEntity.get(field.getName()).toString()};      String className="org.ofbiz.base.util.UtilValidate";      String methodName=curValidate;      if (curValidate.indexOf('.') > 0) {        className=curValidate.substring(0,curValidate.lastIndexOf('.'));        methodName=curValidate.substring(curValidate.lastIndexOf('.') + 1);      }      Class<?> valClass;      try {        ClassLoader loader=Thread.currentThread().getContextClassLoader();        valClass=loader.loadClass(className);      } catch (      ClassNotFoundException cnfe) {        Debug.logError("[updateGeneric] Could not find validation class: " + className + "; ignoring.",module);        continue;      }      Method valMethod;      try {        valMethod=valClass.getMethod(methodName,paramTypes);      } catch (      NoSuchMethodException cnfe) {        Debug.logError("[updateGeneric] Could not find validation method: " + methodName + " of class "+ className+ "; ignoring.",module);        continue;      }      Boolean resultBool;      try {        resultBool=(Boolean)valMethod.invoke(null,params);      } catch (      Exception e) {        Debug.logError("[updateGeneric] Could not access validation method: " + methodName + " of class "+ className+ "; returning true.",module);        resultBool=Boolean.TRUE;      }      if (!resultBool.booleanValue()) {        Field msgField;        String message;        try {          msgField=valClass.getField(curValidate + "Msg");          message=(String)msgField.get(null);        } catch (        Exception e) {          Debug.logError("[updateGeneric] Could not find validation message field: " + curValidate + "Msg of class "+ className+ "; returning generic validation failure message.",module);          message=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.validation_failed",locale) + ".";        }        errMsgParam+=field.getColName() + " " + curValidate+ " "+ UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.failed",locale)+ ": "+ message;        Debug.logWarning("[updateGeneric] " + field.getColName() + " "+ curValidate+ " failed: "+ message,module);      }    }  }  if (errMsgParam.length() > 0) {    errMsgParam=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.following_error_occurred",locale) + errMsgParam;    request.setAttribute("_ERROR_MESSAGE_",errMsgParam);    return "error";  }  if (updateMode.equals("CREATE")) {    try {      delegator.create(findByEntity.getEntityName(),findByEntity.getAllFields());    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("entityName",entity.getEntityName());      String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.creation_param_failed",messageMap,locale) + ": " + findByEntity.toString()+ ": "+ e.toString();      Debug.logWarning(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }  } else   if (updateMode.equals("UPDATE")) {    GenericValue value=delegator.makeValue(findByEntity.getEntityName(),findByEntity.getAllFields());    try {      value.store();    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("entityName",entity.getEntityName());      String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.update_of_param_failed",messageMap,locale) + ": " + value.toString()+ ": "+ e.toString();      Debug.logWarning(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }  } else {    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode);    String errMsg=UtilProperties.getMessage(GenericWebEvent.err_resource,"genericWebEvent.update_of_param_failed",messageMap,locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("updateGeneric: Update Mode specified (" + updateMode + ") was not valid for entity: "+ findByEntity.toString(),module);    return "error";  }  return "success";}  }
class C{  public void resultChanged(ResultChangedEvent evt){  m_URL=evt.getURL();  m_User=evt.getUser();  m_Password=evt.getPassword();  m_Query=evt.getQuery();  m_LabelQuery.setText("Current query: " + m_Query);}  }
class C{  public String sqlAD_getCustomEntityTypes(String vendorName,String catalogName,String schemaName){  String tableName="AD_EntityType";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("EntityType");  ArrayList<String> aliasNames=new ArrayList<String>();  aliasNames.add("ENTITYTYPE");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add("EntityType NOT IN ('C', 'D')");  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  public boolean undo(INode state){  OnePuzzle op=(OnePuzzle)state;  op.s--;  return true;}  }
class C{  public static org.apache.nutch.storage.WebPage.Builder newBuilder(){  return new org.apache.nutch.storage.WebPage.Builder();}  }
class C{  public void map(Text key,CrawlDatum value,OutputCollector<FloatWritable,SelectorEntry> output,Reporter reporter) throws IOException {  Text url=key;  if (filter) {    try {      if (filters.filter(url.toString()) == null)       return;    } catch (    URLFilterException e) {      if (LOG.isWarnEnabled()) {        LOG.warn("Couldn't filter url: " + url + " ("+ e.getMessage()+ ")");      }    }  }  CrawlDatum crawlDatum=value;  if (!schedule.shouldFetch(url,crawlDatum,curTime)) {    LOG.debug("-shouldFetch rejected '" + url + "', fetchTime="+ crawlDatum.getFetchTime()+ ", curTime="+ curTime);    return;  }  LongWritable oldGenTime=(LongWritable)crawlDatum.getMetaData().get(Nutch.WRITABLE_GENERATE_TIME_KEY);  if (oldGenTime != null) {    if (oldGenTime.get() + genDelay > curTime)     return;  }  float sort=1.0f;  try {    sort=scfilters.generatorSortValue((Text)key,crawlDatum,sort);  } catch (  ScoringFilterException sfe) {    if (LOG.isWarnEnabled()) {      LOG.warn("Couldn't filter generatorSortValue for " + key + ": "+ sfe);    }  }  if (restrictStatus != null && !restrictStatus.equalsIgnoreCase(CrawlDatum.getStatusName(crawlDatum.getStatus())))   return;  if (scoreThreshold != Float.NaN && sort < scoreThreshold)   return;  if (intervalThreshold != -1 && crawlDatum.getFetchInterval() > intervalThreshold)   return;  sortValue.set(sort);  crawlDatum.getMetaData().put(Nutch.WRITABLE_GENERATE_TIME_KEY,genTime);  entry.datum=crawlDatum;  entry.url=(Text)key;  output.collect(sortValue,entry);}  }
class C{  @Path("tags") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public ListResponse listTags(final ListRequest request) throws ApiException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return subversionApi.listTags(request);}  }
class C{  public static IXMLParser createXMLParser(String className,IXMLBuilder builder) throws ClassNotFoundException, InstantiationException, IllegalAccessException {  Class cls=Class.forName(className);  IXMLParser parser=(IXMLParser)cls.newInstance();  parser.setBuilder(builder);  parser.setValidator(new NonValidator());  return parser;}  }
class C{  public static Volume checkManagedVolumeExistsInDBByWwn(DbClient dbClient,String wwn){  URIQueryResultList volumeList=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeWwnConstraint(wwn),volumeList);  if (volumeList.iterator().hasNext()) {    URI volumeURI=volumeList.iterator().next();    Volume volumeInfo=dbClient.queryObject(Volume.class,volumeURI);    if (!volumeInfo.getInactive()) {      return volumeInfo;    }  }  return null;}  }
class C{  protected final void deflate() throws IOException {  int len=def.deflate(buf,0,buf.length);  if (len > 0) {    writeOut(buf,0,len);    written+=len;  }}  }
class C{  public static <E>Set<E> newSetFromMap(Map<E,Boolean> map){  if (map.isEmpty()) {    return new SetFromMap<E>(map);  }  throw new IllegalArgumentException();}  }
class C{  public CompressionRegionConfigDUnitTest(){  super();}  }
class C{  public HindiAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  private long startWait(){  return System.nanoTime();}  }
class C{  protected final int isLeft(double[] a,double[] b,double[] o){  final double cross=getRX(a,o) * getRY(b,o) - getRY(a,o) * getRX(b,o);  if (cross == 0) {    final double dista=Math.abs(getRX(a,o)) + Math.abs(getRY(a,o));    final double distb=Math.abs(getRX(b,o)) + Math.abs(getRY(b,o));    return Double.compare(dista,distb);  }  return Double.compare(cross,0);}  }
class C{  @Override public boolean isApplicable(XStudent student){  return false;}  }
class C{  public static SimpleBigDecimal norm(final byte mu,SimpleBigDecimal u,SimpleBigDecimal v){  SimpleBigDecimal norm;  SimpleBigDecimal s1=u.multiply(u);  SimpleBigDecimal s2=u.multiply(v);  SimpleBigDecimal s3=v.multiply(v).shiftLeft(1);  if (mu == 1) {    norm=s1.add(s2).add(s3);  } else   if (mu == -1) {    norm=s1.subtract(s2).add(s3);  } else {    throw new IllegalArgumentException("mu must be 1 or -1");  }  return norm;}  }
class C{  void clearStatus(){  RapidMinerGUI.getMainFrame().getStatusBar().clearSpecialText();}  }
class C{  public String moreToString(){  StringBuilder sb=new StringBuilder("Last cert?  ");  sb.append((index == -1) ? "Yes" : "No");  sb.append("\n");  return sb.toString();}  }
class C{  private void valuesTester(final int treeSize,final Collection<String> values){  int counter=0;  for (  String value : values) {    counter++;  }  assertEquals(treeSize,counter);  assertEquals(treeSize,values.size());}  }
class C{  static int showConfirmDialog(String message,String title,int optionType,int messageType){  JOptionPane pane=new JOptionPane(new SelectableLabel(message),messageType,optionType);  JDialog dialog=pane.createDialog(title);  dialog.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);  setLocation(dialog);  dialog.setVisible(true);  dialog.dispose();  Object selectedValue=pane.getValue();  if (selectedValue == null) {    return JOptionPane.CLOSED_OPTION;  }  Object[] options=pane.getOptions();  if (options == null) {    if (selectedValue instanceof Integer) {      return (Integer)selectedValue;    }    return JOptionPane.CLOSED_OPTION;  }  for (int i=0; i < options.length; i++) {    if (options[i].equals(selectedValue)) {      return i;    }  }  return JOptionPane.CLOSED_OPTION;}  }
class C{  public MappedClass add(Conversion conversion){  this.xmlClass.conversions.add(conversion.toXStream());  return this;}  }
class C{  public MessageBuilder appendContent(String content,Styles... styles){  for (  Styles style : styles)   this.content+=style.getMarkdown();  this.content+=content;  ArrayUtils.reverse(styles);  for (  Styles style : styles)   this.content+=style.getReverseMarkdown();  return this;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @Override protected void initData(){}  }
class C{  public void disable() throws IOException {synchronized (optOutLock) {    if (!isOptOut()) {      configuration.set("opt-out",true);      configuration.save(configurationFile);    }    if (task != null) {      task.cancel();      task=null;    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  int i=0;  int rows, cols;  double imageTotal=0;  long imageN=0;  double imageAverage=0;  double imageTotalDeviation=0;  double crispness=0;  double z=0;  float progress=0;  int col, row;  int a;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    }  }  if (inputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          if (z < 0 || z > 1) {            showFeedback("This tool should only be used with " + "membership probability images containing " + "values that range from 0 to 1.");            break;          }          imageTotal+=z;          imageN++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating image average:",(int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          imageTotalDeviation+=(z - imageAverage) * (z - imageAverage);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating the image total squared deviation:",(int)progress);    }    image.close();    double denominator;    denominator=Math.pow(imageTotal * (1 - imageAverage),2) + Math.pow(imageAverage,2) * (imageN - imageTotal);    crispness=imageTotalDeviation / denominator;    DecimalFormat df;    df=new DecimalFormat("0.000");    String retstr="CRISPNESS INDEX";    retstr=retstr + "\nInput image:\t" + inputHeader;    retstr=retstr + "\nCrispness (C):\t" + df.format(crispness);    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @After public final void assertNoUnassertedLogEvents(){  if (loggedEvents.size() > 0) {    LoggingEvent event=loggedEvents.iterator().next();    String msg="Found untreated logged events. First one is:\n";    msg+=event.getRenderedMessage();    if (event.getThrowableInformation() != null) {      msg+="\n" + event.getThrowableInformation().getThrowable();    }    fail(msg);  }}  }
class C{  public InputStreamResource(InputStream inputStream,String description){  if (inputStream == null) {    throw new IllegalArgumentException("InputStream must not be null");  }  this.inputStream=inputStream;  this.description=(description != null ? description : "");}  }
class C{  void clear(){  mTopSection.clear();  mMiddleSection.clear();  mBottomSection.clear();}  }
class C{  private static void current(ClassLoader loader,InjectorImpl manager){  Objects.requireNonNull(manager);synchronized (loader) {    if (loader instanceof DynamicClassLoader) {      _localManager.set(manager,loader);    } else {      _loaderManagerMap.put(loader,new SoftReference<>(manager));    }  }}  }
class C{  private Coord sampleCoord(String zone,String activityType){  MyZone mz=null;  if (zone.equals("") || zone.equals(" ")) {  } else {    mz=zoneMap.get(zone);    if (mz == null) {      LOG.error("Cannot find zone " + zone + " in Map.");    }  }  if (mz != null) {    ObjectAttributes oa=mz.getObjectAttributes();    Object o=oa.getAttribute(mz.getId().toString(),activityType);    if (o == null) {      oa.putAttribute(mz.getId().toString(),activityType,1);    } else {      if (o instanceof Integer) {        int oldValue=(int)o;        oa.putAttribute(mz.getId().toString(),activityType,oldValue + 1);      } else {        LOG.error("The activity count for zone " + mz.getId().toString() + "'s activity type '"+ activityType+ " should of type Integer, but is "+ o.getClass().toString());      }    }  }  double x=0.0;  double y=0.0;  if (mz != null) {    Point p=mz.sampleRandomInteriorPoint();    x=p.getX();    y=p.getY();  } else {    numberOfUnknownActivityLocations++;  }  Coord c=CoordUtils.createCoord(x,y);  return c;}  }
class C{  public AttributedCharacterIterator cancelLatestCommittedText(Attribute[] attributes){  return getReq().cancelLatestCommittedText(attributes);}  }
class C{  public void addValue(String key,long val,String comment) throws HeaderCardException {  addHeaderCard(key,new HeaderCard(key,val,comment));}  }
class C{  public void testGetF2Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF2Momentary();  assertEquals(expResult,result);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public static void main(String[] args) throws IOException {  int runTime=Integer.parseInt(args[0]);  int repeat=Integer.parseInt(args[1]);  for (int i=10; i < repeat; i+=10) {    boolean enableOutput=true;    boolean outputToFile=true;    String inputFolder=ContainerOverbooking.class.getClassLoader().getResource("workload/planetlab").getPath();    String outputFolder="/Results";    String vmAllocationPolicy="MSThreshold-Under_0.80_0.70";    String containerSelectionPolicy="Cor";    String containerAllocationPolicy="MostFull";    String hostSelectionPolicy="FirstFit";    String vmSelectionPolicy="VmMaxC";    new RunnerInitiator(enableOutput,outputToFile,inputFolder,outputFolder,vmAllocationPolicy,containerAllocationPolicy,vmSelectionPolicy,containerSelectionPolicy,hostSelectionPolicy,i,Integer.toString(runTime),outputFolder);  }}  }
class C{  private void kickOffComputeStateCreation(AWSComputeServiceCreationContext context,AWSComputeStateCreationStage next){  if (context.enumerationOperations == null || context.enumerationOperations.size() == 0) {    logInfo("There are no compute states or networks to be created");    context.creationStage=next;    handleComputeStateCreateOrUpdate(context);    return;  }  OperationJoin.JoinedCompletionHandler joinCompletion=null;  OperationJoin joinOp=OperationJoin.create(context.enumerationOperations);  joinOp.setCompletion(joinCompletion);  joinOp.sendWith(getHost());}  }
class C{  @SuppressWarnings("null") private void assertServiceSet(List<VOServiceDetails> serviceSet,boolean[] isVisible,boolean[] onpExceptionExpected,long[] expectedServiceKey) throws Exception {  Assert.assertEquals(serviceSet.size(),isVisible.length);  Assert.assertEquals(serviceSet.size(),onpExceptionExpected.length);  Assert.assertEquals(serviceSet.size(),expectedServiceKey.length);  for (int i=0; i < isVisible.length; i++) {    try {      VOService product=sps.getServiceForMarketplace(Long.valueOf(serviceSet.get(i).getKey()),"FUJITSU","EN");      Assert.assertFalse("Operation not permitted exception expected for index " + i,onpExceptionExpected[i]);      Assert.assertEquals("service with index " + i + " should not have been returned",isVisible[i],product != null);      if (isVisible[i]) {        Assert.assertNotNull(product);        if (expectedServiceKey[i] < 0) {          Assert.assertEquals("Worng key for index " + i,serviceSet.get(i).getKey(),product.getKey());        } else {          Assert.assertEquals("Worng key for index " + i,expectedServiceKey[i],product.getKey());        }      }    } catch (    OperationNotPermittedException onp) {      if (!onpExceptionExpected[i]) {        Assert.fail("OperationNotPermittedException was not excpeted for index " + i);      }    }  }}  }
class C{  public void endTransaction(boolean success) throws HGTransactionException {  HGTransactionContext ctx=tcontext.get();  if (ctx == null)   throw new HGException("Attempt to end a transaction with no transaction context currently active."); else   ctx.endTransaction(success);}  }
class C{  @Override public void init(Bundle bundle){  Bundle extras=getIntent().getExtras();  if (extras != null) {    comingFromOverflow=extras.getBoolean(COMING_FROM_OVERFLOW);  }  addSlide(IntroSlide.newInstance(R.layout.fragment_welcome_intro));  addSlide(IntroSlide.newInstance(R.layout.fragment_cards_intro));  addSlide(IntroSlide.newInstance(R.layout.fragment_share_intro));  addSlide(IntroSlide.newInstance(R.layout.fragment_recharge_intro));  addSlide(IntroSlide.newInstance(R.layout.fragment_wifi_intro));  addSlide(IntroSlide.newInstance(R.layout.fragment_notification_intro));  addSlide(IntroSlide.newInstance(R.layout.fragment_thanks_intro));}  }
class C{  private void saveMatrix(){  int returnVal=m_fileChooser.showSaveDialog(this);  if (returnVal == JFileChooser.APPROVE_OPTION) {    File selectedFile=m_fileChooser.getSelectedFile();    if (!selectedFile.getName().toLowerCase().endsWith(CostMatrix.FILE_EXTENSION)) {      selectedFile=new File(selectedFile.getParent(),selectedFile.getName() + CostMatrix.FILE_EXTENSION);    }    Writer writer=null;    try {      writer=new BufferedWriter(new FileWriter(selectedFile));      m_matrix.write(writer);      writer.close();    } catch (    Exception ex) {      JOptionPane.showMessageDialog(this,"Error writing file '" + selectedFile.getName() + "':\n"+ ex.getMessage(),"Save failed",JOptionPane.ERROR_MESSAGE);      System.out.println(ex.getMessage());    }  }}  }
class C{  public static double[] pairwiseMultiply(double[] a,double[] b){  if (a.length != b.length) {    throw new RuntimeException();  }  double[] result=new double[a.length];  for (int i=0; i < result.length; i++) {    result[i]=a[i] * b[i];  }  return result;}  }
class C{  public static GenericValue findWebSite(Delegator delegator,String webSiteId){  return findWebSite(delegator,webSiteId,true);}  }
class C{  public DynamicTimeSeriesCollection(int nSeries,int nMoments){  this(nSeries,nMoments,new Millisecond(),TimeZone.getDefault());  this.newestAt=nMoments - 1;}  }
class C{  private int readAnnotationTarget(final Context context,int u){  int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:    target&=0xFFFF0000;  u+=2;break;case 0x13:case 0x14:case 0x15:target&=0xFF000000;u+=1;break;case 0x40:case 0x41:{target&=0xFF000000;int n=readUnsignedShort(u + 1);context.start=new Label[n];context.end=new Label[n];context.index=new int[n];u+=3;for (int i=0; i < n; ++i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);context.start[i]=readLabel(start,context.labels);context.end[i]=readLabel(start + length,context.labels);context.index[i]=readUnsignedShort(u + 4);u+=6;}break;}case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:target&=0xFF0000FF;u+=4;break;default :target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;u+=3;break;}int pathLength=readByte(u);context.typeRef=target;context.typePath=pathLength == 0 ? null : new TypePath(b,u);return u + 1 + 2 * pathLength;}  }
class C{  public SearchResultDataLine createDataLine(){  return new SearchResultDataLine(COLUMNS);}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("userroles") @Valid UserRoles userRoles,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.UserRoles jpaUserRoles=new com.wipro.ats.bdre.md.dao.jpa.UserRoles();    jpaUserRoles.setUserRoleId(userRoles.getUserRoleId());    jpaUserRoles.setRole(userRoles.getRole());    Users users=new Users();    users.setUsername(userRoles.getUsername());    jpaUserRoles.setUsers(users);    Integer userRolesId=userRolesDAO.insert(jpaUserRoles);    userRoles.setUserRoleId(userRolesId);    restWrapper=new RestWrapper(userRoles,RestWrapper.OK);    LOGGER.info("Record with ID:" + userRoles.getUserRoleId() + " inserted in UserRoles by User:"+ principal.getName()+ userRoles);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public java.lang.StringBuffer delete(int start,int end){  return null;}  }
class C{  public int inc(Object key){  int hash=key == null ? 0 : key.hashCode() & 0x7FFFFFFF;  int index=hash % table.length;  for (Entry e=table[index]; e != null; e=e.next) {    if (e.hash == hash && (e.key == null && key == null || e.key != null && e.key.equals(key))) {      return e.value++;    }  }  int len=table.length;  if (count++ >= (len - (len >> 2))) {    rehash();    index=hash % table.length;  }  table[index]=new Entry(hash,key,1,table[index]);  return 0;}  }
class C{  public ProgressBarRenderer(){  setUI(SkinProgressBarUI.createUI(this));  setStringPainted(true);}  }
class C{  public synchronized OffHeapCache<K,V> buildCache(int expirationTimeSlots){  checkMemoryManager();  return new OffHeapMapCacheImpl<K,V>(memoryManager,hashCapacity,keySerializer,valueSerializer,expirationTimeSlots);}  }
class C{  public boolean visit(ForStatement node){  return true;}  }
class C{  public void area(double value,Paint color,boolean stack){  SourcedPlotElement parent=stack ? findParent() : null;  plotElements.add(new ConstantArea(value,color,parent));}  }
class C{  @SuppressLint("DefaultLocale") public static boolean matchPinyinUnits(final List<PinyinUnit> pinyinUnits,final String baseData,String search,StringBuffer chineseKeyWord){  if ((null == pinyinUnits) || (null == search) || (null == chineseKeyWord)) {    return false;  }  StringBuffer matchSearch=new StringBuffer();  matchSearch.delete(0,matchSearch.length());  chineseKeyWord.delete(0,chineseKeyWord.length());  String searchLowerCase=search.toLowerCase();  int index=baseData.toLowerCase().indexOf(searchLowerCase);  if (index > -1) {    chineseKeyWord.append(baseData.substring(index,index + searchLowerCase.length()));    return true;  }  int pinyinUnitsLength=pinyinUnits.size();  StringBuffer searchBuffer=new StringBuffer();  for (int i=0; i < pinyinUnitsLength; i++) {    int j=0;    chineseKeyWord.delete(0,chineseKeyWord.length());    searchBuffer.delete(0,searchBuffer.length());    searchBuffer.append(searchLowerCase);    boolean found=findPinyinUnits(pinyinUnits,i,j,baseData,searchBuffer,chineseKeyWord);    if (true == found) {      return true;    }  }  return false;}  }
class C{  public int numCheckpoints(){  return checkpoints.size();}  }
class C{  public float curvePoint(float a,float b,float c,float d,float t){  return g.curvePoint(a,b,c,d,t);}  }
class C{  public static QueryArraysResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryArraysResponse object=new QueryArraysResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryArraysResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryArraysResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(StorageArray.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(StorageArray.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((StorageArray[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(StorageArray.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private static void dualPivotQuicksort(double[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  double ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    double t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    double t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    double t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    double t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    double t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    double t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    double t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    double t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    double t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  double pivot1=ae2;  a[e2]=a[left];  double pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public String showCard(int card,String playerInt,CardAnimator.ShowCardType type){  int player=0;  CardView c=GameTableViews.getCardView(top,this,card);  try {    player=Integer.parseInt(playerInt);  } catch (  NumberFormatException e) {    return "";  }  View anchor=deckStatus.getChildAt(player);  if (anchor != null) {    animator.init(anchor);    c.setOnTable(false);    animator.showCard(c,type);  }  return players.getItem(player).name + ": " + c.getCard().name;}  }
class C{  public void init(Environment env,Instances structure){  m_matchS=m_match;  m_replaceS=m_replace;  String attsToApplyToS=m_attsToApplyTo;  try {    m_matchS=env.substitute(m_matchS);    m_replaceS=env.substitute(m_replace);    attsToApplyToS=env.substitute(attsToApplyToS);  } catch (  Exception ex) {  }  if (m_regex) {    String match=m_matchS;    if (m_ignoreCase) {      match=match.toLowerCase();    }    m_regexPattern=Pattern.compile(match);  }  String tempRangeS=attsToApplyToS;  tempRangeS=tempRangeS.replace("/first","first").replace("/last","last");  Range tempR=new Range();  tempR.setRanges(attsToApplyToS);  try {    tempR.setUpper(structure.numAttributes() - 1);    m_selectedAtts=tempR.getSelection();  } catch (  IllegalArgumentException ex) {    m_selectedAtts=null;  }  if (m_selectedAtts == null) {    Set<Integer> indexes=new HashSet<Integer>();    String[] attParts=m_attsToApplyTo.split(",");    for (    String att : attParts) {      att=att.trim();      if (att.toLowerCase().equals("/first")) {        indexes.add(0);      } else       if (att.toLowerCase().equals("/last")) {        indexes.add((structure.numAttributes() - 1));      } else {        if (structure.attribute(att) != null) {          indexes.add(new Integer(structure.attribute(att).index()));        } else {          if (m_logger != null) {            String msg=m_statusMessagePrefix + "Can't find attribute '" + att+ "in the incoming instances - ignoring";            m_logger.logMessage(msg);          }        }      }    }    m_selectedAtts=new int[indexes.size()];    int c=0;    for (    Integer i : indexes) {      m_selectedAtts[c++]=i.intValue();    }  }  Set<Integer> indexes=new HashSet<Integer>();  for (  int m_selectedAtt : m_selectedAtts) {    if (structure.attribute(m_selectedAtt).isString()) {      indexes.add(m_selectedAtt);    } else {      if (m_logger != null) {        String msg=m_statusMessagePrefix + "Attribute '" + structure.attribute(m_selectedAtt).name()+ "is not a string attribute - "+ "ignoring";        m_logger.logMessage(msg);      }    }  }  m_selectedAtts=new int[indexes.size()];  int c=0;  for (  Integer i : indexes) {    m_selectedAtts[c++]=i.intValue();  }}  }
class C{  private void updateCallStackForCall(Stack<MethodCall> callStack,MethodCall call){  callStack.push(call);}  }
class C{  public long objectSize(){  return size;}  }
class C{  public static CssExtractor extract(IDocument document,int offset,int length,CSSModelLoader cssModelLoader){  try {    String cssBlock=document.get(offset,length);    return extract(cssBlock,cssModelLoader);  } catch (  BadLocationException e) {    return null;  }}  }
class C{  @Override protected void refreshVisuals(){  ERDEntityAttribute column=(ERDEntityAttribute)getModel();  getFigure().setText(column.getLabelText());}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public static boolean isValidAmbigPxPromotionStrict(String san){  if (san.length() == 4) {    return FILES.indexOf(san.charAt(0)) != -1 && FILES.indexOf(san.charAt(1)) != -1 && RANKS.indexOf(san.charAt(2)) != -1 && PROMOTIONS.indexOf(san.charAt(3)) != -1;  } else {    return false;  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static boolean isTypeString(final String str){  if (str.length() > 0) {    final char first=str.charAt(0);    if (Character.isUpperCase(first)) {      for (      final String ts : TYPESTRINGS) {        if (str.contains(ts)) {          return true;        }      }    }  }  return false;}  }
class C{  protected SizeRequirements baselineRequirements(int axis,SizeRequirements r){  SizeRequirements totalAscent=new SizeRequirements();  SizeRequirements totalDescent=new SizeRequirements();  if (r == null) {    r=new SizeRequirements();  }  r.alignment=0.5f;  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    float align=v.getAlignment(axis);    float span;    int ascent;    int descent;    span=v.getPreferredSpan(axis);    ascent=(int)(align * span);    descent=(int)(span - ascent);    totalAscent.preferred=Math.max(ascent,totalAscent.preferred);    totalDescent.preferred=Math.max(descent,totalDescent.preferred);    if (v.getResizeWeight(axis) > 0) {      span=v.getMinimumSpan(axis);      ascent=(int)(align * span);      descent=(int)(span - ascent);      totalAscent.minimum=Math.max(ascent,totalAscent.minimum);      totalDescent.minimum=Math.max(descent,totalDescent.minimum);      span=v.getMaximumSpan(axis);      ascent=(int)(align * span);      descent=(int)(span - ascent);      totalAscent.maximum=Math.max(ascent,totalAscent.maximum);      totalDescent.maximum=Math.max(descent,totalDescent.maximum);    } else {      totalAscent.minimum=Math.max(ascent,totalAscent.minimum);      totalDescent.minimum=Math.max(descent,totalDescent.minimum);      totalAscent.maximum=Math.max(ascent,totalAscent.maximum);      totalDescent.maximum=Math.max(descent,totalDescent.maximum);    }  }  r.preferred=(int)Math.min((long)totalAscent.preferred + (long)totalDescent.preferred,Integer.MAX_VALUE);  if (r.preferred > 0) {    r.alignment=(float)totalAscent.preferred / r.preferred;  }  if (r.alignment == 0.0f) {    r.minimum=totalDescent.minimum;    r.maximum=totalDescent.maximum;  } else   if (r.alignment == 1.0f) {    r.minimum=totalAscent.minimum;    r.maximum=totalAscent.maximum;  } else {    r.minimum=Math.round(Math.max(totalAscent.minimum / r.alignment,totalDescent.minimum / (1.0f - r.alignment)));    r.maximum=Math.round(Math.min(totalAscent.maximum / r.alignment,totalDescent.maximum / (1.0f - r.alignment)));  }  return r;}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  if (!super.equals(o)) {    return false;  }  final MTreeLeafEntry that=(MTreeLeafEntry)o;  return Math.abs(parentDistance - that.parentDistance) < Double.MIN_NORMAL;}  }
class C{  public void concat(DoubleLinkedList<E> list){  if (list == null) {    return;  }  if (head == null) {    head=list.first();    last=list.last();    return;  }  if (list.head == null) {    return;  }  DoubleNode<E> newTail=list.last();  list.head.prev=last;  last.next=list.head;  last=newTail;  size+=list.size;}  }
class C{  @Override protected void finished(Description description){  this.trState.testSiteAddress=this.reportTestCase.host.getPreferredAddress();  this.trState.endTimeMicros=Utils.getNowMicrosUtc();  this.trState.jvmStats=retrievePeriodicStats();  postResults();}  }
class C{  private static void stableStringSort(String[] arr,String[] src,String[] dst,int start,int end,int chId){  int length=end - start;  if (length < SIMPLE_LENGTH) {    if (src == arr) {      for (int i=start + 1; i < end; i++) {        String current=arr[i];        String prev=arr[i - 1];        if (current.compareTo(prev) < 0) {          int j=i;          do {            arr[j--]=prev;          } while (j > start && current.compareTo(prev=arr[j - 1]) < 0);          arr[j]=current;        }      }    } else {      int actualEnd=end - 1;      dst[start]=src[actualEnd--];      for (int i=start + 1; i < end; i++, actualEnd--) {        String current=src[actualEnd];        String prev;        int j=i;        while (j > start && current.compareTo(prev=dst[j - 1]) < 0) {          dst[j--]=prev;        }        dst[j]=current;      }    }    return;  }  int s;  int mid=start + length / 2;  int lo=start;  int hi=end - 1;  if (length > 40) {    s=length / 8;    lo=medChar(lo,lo + s,lo + s * 2,src,chId);    mid=medChar(mid - s,mid,mid + s,src,chId);    hi=medChar(hi,hi - s,hi - s * 2,src,chId);  }  mid=medChar(lo,mid,hi,src,chId);  int midVal=charAt(src[mid],chId);  int a, b, c;  a=b=start;  c=end - 1;  int cmp;  for (int i=start; i < end; i++) {    String el=src[i];    cmp=charAt(el,chId) - midVal;    if (cmp < 0) {      src[a]=el;      a++;    } else     if (cmp > 0) {      dst[c]=el;      c--;    } else {      dst[b]=el;      b++;    }  }  s=b - start;  if (s > 0) {    if (arr == src) {      System.arraycopy(dst,start,arr,a,s);    } else {      copySwap(dst,start,arr,a,s);    }    if (b >= end && midVal == -1) {      return;    }    stableStringSort(arr,arr,arr == dst ? src : dst,a,a + s,chId + 1);  }  s=a - start;  if (s > 0) {    stableStringSort(arr,src,dst,start,a,chId);  }  c++;  s=end - c;  if (s > 0) {    stableStringSort(arr,dst,src,c,end,chId);  }}  }
class C{  private static void mapArrayField(final Object mappingClassInstance,final Field mappingField,final JBBPAbstractArrayField<?> arrayField,final boolean invertBitOrder){  try {    if (arrayField instanceof JBBPFieldArrayUShort && mappingField.getType().getComponentType() == char.class) {      final short[] shortarray=(short[])arrayField.getValueArrayAsObject(invertBitOrder);      final char[] chararray=new char[shortarray.length];      for (int i=0; i < shortarray.length; i++) {        chararray[i]=(char)shortarray[i];      }      mappingField.set(mappingClassInstance,chararray);    } else {      mappingField.set(mappingClassInstance,arrayField.getValueArrayAsObject(invertBitOrder));    }  } catch (  IllegalAccessException ex) {    throw new JBBPMapperException("Can't get access to a mapping field",arrayField,mappingClassInstance.getClass(),mappingField,ex);  }catch (  IllegalArgumentException ex) {    throw new JBBPMapperException("Can't set argument to a mapping field",arrayField,mappingClassInstance.getClass(),mappingField,ex);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_2__INDEX_1:    return INDEX_1_EDEFAULT == null ? index_1 != null : !INDEX_1_EDEFAULT.equals(index_1);}return super.eIsSet(featureID);}  }
class C{  @Override public void visitJumpInsn(final int opcode,final Label lbl){  super.visitJumpInsn(opcode,lbl);  LabelNode ln=((JumpInsnNode)instructions.getLast()).label;  if (opcode == JSR && !subroutineHeads.containsKey(ln)) {    subroutineHeads.put(ln,new BitSet());  }}  }
class C{  @Override public BufferedImage JPEGToRGBImage(final byte[] data,final int ww,final int hh,final int pX,final int pY){  BufferedImage image=null;  Raster ras=JPEGDecoder.getRasterFromJPEG(data,"JPEG");  if (ras != null) {    ras=cleanupRaster(ras,pX,pY,componentCount);    final int w=ras.getWidth();    final int h=ras.getHeight();    final DataBufferByte rgb=(DataBufferByte)ras.getDataBuffer();    image=createImage(w,h,rgb.getData());  }  return image;}  }
class C{  @Override public boolean hasText(){  log.log(Level.FINE,"hasText()");  return event == CHARACTERS || event == ENTITY_REFERENCE;}  }
class C{  protected int makePolylinesConnected(DrawContext dc,ArrayList<Intersection> inter,int tolerance){  if (inter == null)   return 0;  Globe globe=dc.getGlobe();  Vec4 start, end, p;  Polyline line;  int tolerance2=tolerance * tolerance;  int count=0;  while (inter.size() > 0) {    ArrayList<Position> positions=new ArrayList<Position>();    start=inter.remove(0).getIntersectionPoint();    end=inter.remove(0).getIntersectionPoint();    positions.add(globe.computePositionFromPoint(start));    positions.add(globe.computePositionFromPoint(end));    for (int i=0; i < inter.size(); ) {      p=inter.get(i).getIntersectionPoint();      if (p.distanceToSquared3(start) < tolerance2) {        inter.remove(i);        start=inter.remove(i).getIntersectionPoint();        positions.add(0,globe.computePositionFromPoint(start));        i=0;        continue;      }      if (p.distanceToSquared3(end) < tolerance2) {        inter.remove(i);        end=inter.remove(i).getIntersectionPoint();        positions.add(globe.computePositionFromPoint(end));        i=0;        continue;      }      p=inter.get(i + 1).getIntersectionPoint();      if (p.distanceToSquared3(start) < tolerance2) {        inter.remove(i + 1);        start=inter.remove(i).getIntersectionPoint();        positions.add(0,globe.computePositionFromPoint(start));        i=0;        continue;      }      if (p.distanceToSquared3(end) < tolerance2) {        inter.remove(i + 1);        end=inter.remove(i).getIntersectionPoint();        positions.add(globe.computePositionFromPoint(end));        i=0;        continue;      }      i+=2;    }    line=new Polyline(positions);    line.setNumSubsegments(0);    line.setFollowTerrain(true);    line.setColor(this.getColor());    line.setLineWidth(this.getLineWidth());    this.getRenderables().add(line);    count++;  }  return count;}  }
class C{  public static void checkRange(final int value,final int minimum,final int maximum,final String name){  if (value < minimum || value > maximum) {    throw APIException.badRequests.parameterNotWithinRange(name,value,minimum,maximum,"");  }}  }
class C{  public static void d(String msg,Throwable thr){  if (DEBUG)   android.util.Log.d(TAG,buildMessage(msg),thr);}  }
class C{  public static double stdDev(double[][] matrix,double mean){  if (matrix.length == 0) {    return 0.0;  }  double sumSqs=0.0;  for (int m=0; m < matrix.length; m++) {    for (int c=0; c < matrix[m].length; c++) {      sumSqs+=(matrix[m][c] - mean) * (matrix[m][c] - mean);    }  }  double std=sumSqs / (double)((matrix.length * matrix[0].length) - 1);  std=Math.sqrt(std);  return std;}  }
class C{  private boolean isInTransaction(){  return transaction != null;}  }
class C{  public void init(Object o,int depth,int traversal){  m_queue.clear();  m_depth=depth;  if (traversal < 0 || traversal >= Constants.TRAVERSAL_COUNT)   throw new IllegalArgumentException("Unrecognized traversal type: " + traversal);  m_traversal=traversal;  m_includeNodes=(traversal == Constants.NODE_TRAVERSAL || traversal == Constants.NODE_AND_EDGE_TRAVERSAL);  m_includeEdges=(traversal == Constants.EDGE_TRAVERSAL || traversal == Constants.NODE_AND_EDGE_TRAVERSAL);  if (m_includeNodes) {    if (o instanceof Node) {      m_queue.add(o,0);    } else {      Iterator tuples=(Iterator)o;      while (tuples.hasNext())       m_queue.add(tuples.next(),0);    }  } else {    if (o instanceof Node) {      Node n=(Node)o;      m_queue.visit(n,0);      Iterator edges=getEdges(n);      while (edges.hasNext()) {        Edge e=(Edge)edges.next();        Node nn=e.getAdjacentNode(n);        m_queue.visit(nn,1);        if (m_queue.getDepth(e) < 0)         m_queue.add(e,1);      }    } else {      Iterator tuples=(Iterator)o;      while (tuples.hasNext()) {        Node n=(Node)tuples.next();        m_queue.visit(n,0);        Iterator edges=getEdges(n);        while (edges.hasNext()) {          Edge e=(Edge)edges.next();          Node nn=e.getAdjacentNode(n);          m_queue.visit(nn,1);          if (m_queue.getDepth(e) < 0)           m_queue.add(e,1);        }      }    }  }}  }
class C{  public static String formatAsUnit(long value,UnitSystem unitSystem,String unitPostfix,DecimalFormat format){  StringBuilder formatedSize=new StringBuilder(12);  if (value < unitSystem.kiloPrefix().value())   formatedSize.append(value).append(unitSystem.basePrefix().symbol()); else   if (value < unitSystem.megaPrefix().value())   formatedSize.append(formatToDigits(value,unitSystem.kiloPrefix().value(),format)).append(unitSystem.kiloPrefix().symbol()); else   if (value < unitSystem.gigaPrefix().value())   formatedSize.append(formatToDigits(value,unitSystem.megaPrefix().value(),format)).append(unitSystem.megaPrefix().symbol()); else   formatedSize.append(formatToDigits(value,unitSystem.gigaPrefix().value(),format)).append(unitSystem.gigaPrefix().symbol());  return formatedSize.append(unitPostfix).toString();}  }
class C{  public LinearBatch(LossFunc loss,double lambda0){  this(loss,lambda0,1e-3);}  }
class C{  public AttributeValueFilterSingleCondition(Attribute attribute,int comparisonType,String value){  this.attribute=attribute;  this.comparisonType=comparisonType;  setValue(value);}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.SequenceType.ResourceList buildResourceList(List<org.smpte_ra.schemas.st2067_2_2013.BaseResourceType> trackResourceList){  org.smpte_ra.schemas.st2067_2_2013.SequenceType.ResourceList resourceList=new org.smpte_ra.schemas.st2067_2_2013.SequenceType.ResourceList();  resourceList.getResource().addAll(trackResourceList);  return resourceList;}  }
class C{  public Cone(){  this.setUpGeometryCache();}  }
class C{  private Pair<DBIDVar,Double> singleIteration(Relation<V> relationx,Relation<? extends NumberVector> relationy){  final int dim=RelationUtil.dimensionality(relationx);  final int dimy=RelationUtil.dimensionality(relationy);  assert (dim == 2);  KNNQuery<V> knnQuery=QueryUtil.getKNNQuery(relationx,getDistanceFunction(),k + 1);  ArrayModifiableDBIDs ids=DBIDUtil.newArray(relationx.getDBIDs());  ids.sort();  double[][] X=new double[ids.size()][6];  double[][] F=new double[ids.size()][ids.size()];  double[][] Y=new double[ids.size()][dimy];{    int i=0;    for (DBIDIter id=ids.iter(); id.valid(); id.advance(), i++) {{        V vec=relationx.get(id);        double la=vec.doubleValue(0);        double lo=vec.doubleValue(1);        X[i][0]=1.0;        X[i][1]=la;        X[i][2]=lo;        X[i][3]=la * lo;        X[i][4]=la * la;        X[i][5]=lo * lo;      }{        final NumberVector vecy=relationy.get(id);        for (int d=0; d < dimy; d++) {          double idy=vecy.doubleValue(d);          Y[i][d]=idy;        }      }{        KNNList neighbors=knnQuery.getKNNForDBID(id,k + 1);        ModifiableDBIDs neighborhood=DBIDUtil.newArray(neighbors.size());        for (DBIDIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {          if (DBIDUtil.equal(id,neighbor)) {            continue;          }          neighborhood.add(neighbor);        }        F[i][i]=1.0;        final int nweight=-1 / neighborhood.size();        for (DBIDIter iter=neighborhood.iter(); iter.valid(); iter.advance()) {          int pos=ids.binarySearch(iter);          assert (pos >= 0);          F[pos][i]=nweight;        }      }    }  }  double[][] common=times(transposeTimesTranspose(X,F),F);  double[][] b=times(inverse(times(common,X)),times(common,Y));  double[][] sigmaMat=times(F,minusEquals(times(X,b),times(F,Y)));  final double sigma_sum_square=normF(sigmaMat) / (relationx.size() - 6 - 1);  final double norm=1 / Math.sqrt(sigma_sum_square);  double[][] E=timesEquals(times(F,minus(Y,times(X,b))),norm);  DBIDVar worstid=DBIDUtil.newVar();  double worstscore=Double.NEGATIVE_INFINITY;  int i=0;  for (DBIDIter id=ids.iter(); id.valid(); id.advance(), i++) {    double err=squareSum(getRow(E,i));    if (err > worstscore) {      worstscore=err;      worstid.set(id);    }  }  return new Pair<>(worstid,Math.sqrt(worstscore));}  }
class C{  public CallSpec<Void,HttpError> markMessageAsUnread(String conversationId,String messageId,String userId){  return Resource.<Void,HttpError>newDeleteSpec(api,"/v1/users/{user_id}/conversations/{conversation_id}/messages/{message_id}/read",false).pathParam("user_id",userId).pathParam("conversation_id",conversationId).pathParam("message_id",messageId).responseAs(Void.class).build();}  }
class C{  public String toString(){  return name;}  }
class C{  private void hotHit(){  boolean onBottom=(stackBottom() == this);  moveToStackTop();  if (onBottom) {    pruneStack();  }}  }
class C{  public boolean isFullBST(){  return size == Math.pow(2,height()) - 1 ? true : false;}  }
class C{  public static SelectClause createWildcard(StreamSelector streamSelector){  List<SelectClauseElement> selectList=new ArrayList<SelectClauseElement>();  selectList.add(new SelectClauseWildcard());  return new SelectClause(streamSelector,selectList);}  }
class C{  public LoggingFraction customFormatter(String name,String module,String className){  return customFormatter(name,module,className,null);}  }
class C{  public VisorExceptionWrapper(Throwable cause){  assert cause != null;  clsSimpleName=cause.getClass().getSimpleName();  clsName=cause.getClass().getName();  detailMsg=cause.getMessage();  StackTraceElement[] stackTrace=cause.getStackTrace();  if (stackTrace != null)   setStackTrace(stackTrace);  if (cause.getCause() != null)   initCause(new VisorExceptionWrapper(cause.getCause()));}  }
class C{  @Override public void process(K tuple){  tuple_count++;}  }
class C{  public void writeExif(InputStream jpegStream,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegStream == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    doExifStreamIO(jpegStream,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  public static Writable writeRead(Writable before,Configuration conf) throws Exception {  DataOutputBuffer dob=new DataOutputBuffer();  before.write(dob);  DataInputBuffer dib=new DataInputBuffer();  dib.reset(dob.getData(),dob.getLength());  Writable after=(Writable)before.getClass().newInstance();  if (conf != null) {    ((Configurable)after).setConf(conf);  }  after.readFields(dib);  return after;}  }
class C{  public static void registerMBean(Object mbean,Class<?> mbeanInterface,String mbeanName,boolean ignored){  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();  try {    if (logger.isDebugEnabled())     logger.debug("Registering mbean: " + mbean.getClass());    ObjectName name=generateMBeanObjectName(mbeanInterface.getName(),mbeanName);    if (mbs.isRegistered(name))     mbs.unregisterMBean(name);    mbs.registerMBean(mbean,name);  } catch (  Exception e) {    throw new ServerRuntimeException("Unable to register mbean: class=" + mbean.getClass() + " interface="+ mbeanInterface+ " name="+ mbeanName,e);  }}  }
class C{  @Override public String generateSectionLabel(PieDataset dataset,Comparable key){  return super.generateSectionLabel(dataset,key);}  }
class C{  public StringRequestEntity(final String content,final String contentType,final String charset) throws UnsupportedEncodingException {  super();  if (content == null) {    throw new IllegalArgumentException("The content cannot be null");  }  this.contentType=contentType;  this.charset=charset;  if (contentType != null) {    final HeaderElement[] values=HeaderElement.parseElements(contentType);    NameValuePair charsetPair=null;    for (int i=0; i < values.length; i++) {      if ((charsetPair=values[i].getParameterByName("charset")) != null) {        break;      }    }    if (charset == null && charsetPair != null) {      this.charset=charsetPair.getValue();    } else     if (charset != null && charsetPair == null) {      this.contentType=contentType + "; charset=" + charset;    }  }  if (this.charset != null) {    this.content=content.getBytes(this.charset);  } else {    this.content=content.getBytes();  }}  }
class C{  public SQLTransactionRollbackException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public void registerActivityType(String type,Class<? extends Activity> activityClass,ActivityFactory factory){  if (activityTypes.containsKey(type))   throw new IllegalArgumentException("Activity type '" + type + "' already registered.");  ActivityType activityType=new ActivityType(type,factory);  readTransitionMap(activityClass,activityType.getTransitionMap());  activityTypes.put(type,activityType);}  }
class C{  public static Days standardDaysIn(ReadablePeriod period){  int amount=BaseSingleFieldPeriod.standardPeriodIn(period,DateTimeConstants.MILLIS_PER_DAY);  return Days.days(amount);}  }
class C{  public void deleteVirtualVolume(List<VolumeInfo> nativeVolumeInfoList) throws VPlexApiException {  s_logger.info("Request for virtual volume deletion on VPlex at {}",_baseURI);  _virtualVolumeMgr.deleteVirtualVolume(nativeVolumeInfoList);}  }
class C{  public final void inverse(){  float norm;  norm=1.0f / (this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);  this.w*=norm;  this.x*=-norm;  this.y*=-norm;  this.z*=-norm;}  }
class C{  @Override public int hashCode(){  int hash=1;  hash=hash * 31 + this.localName.hashCode();  hash=hash * 31 + this.namespaceURI.hashCode();  return hash;}  }
class C{  public static String toString(MatrixBlock mb,boolean sparse,String separator,String lineseparator,int rowsToPrint,int colsToPrint,int decimal){  StringBuffer sb=new StringBuffer();  int rlen=mb.getNumRows();  int clen=mb.getNumColumns();  int rowLength=rlen;  int colLength=clen;  if (rowsToPrint >= 0)   rowLength=rowsToPrint < rlen ? rowsToPrint : rlen;  if (colsToPrint >= 0)   colLength=colsToPrint < clen ? colsToPrint : clen;  DecimalFormat df=new DecimalFormat();  df.setGroupingUsed(false);  if (decimal >= 0) {    df.setMinimumFractionDigits(decimal);  }  if (sparse) {    if (mb.isInSparseFormat()) {      Iterator<IJV> sbi=mb.getSparseBlockIterator();      while (sbi.hasNext()) {        IJV ijv=sbi.next();        int row=ijv.getI();        int col=ijv.getJ();        double value=ijv.getV();        if (row < rowLength && col < colLength) {          sb.append(row + 1).append(separator).append(col + 1).append(separator);          sb.append(df.format(value)).append(lineseparator);        }      }    } else {      for (int i=0; i < rowLength; i++) {        for (int j=0; j < colLength; j++) {          double value=mb.getValue(i,j);          if (value != 0.0) {            sb.append(i + 1).append(separator).append(j + 1).append(separator);            sb.append(df.format(value)).append(lineseparator);          }        }      }    }  } else {    for (int i=0; i < rowLength; i++) {      for (int j=0; j < colLength - 1; j++) {        double value=mb.quickGetValue(i,j);        sb.append(df.format(value));        sb.append(separator);      }      double value=mb.quickGetValue(i,colLength - 1);      sb.append(df.format(value));      sb.append(lineseparator);    }  }  return sb.toString();}  }
class C{  public SwapProvisioningRequestFactory(){}  }
class C{  public void localizedError2(int pos,Object msg){  localizedError2(getErrorOrigin(),pos,msg);}  }
class C{  protected AbstractMatrix2D vPart(int row,int column,int height,int width){  checkBox(row,column,height,width);  this.rowZero+=this.rowStride * row;  this.columnZero+=this.columnStride * column;  this.rows=height;  this.columns=width;  this.isNoView=false;  return this;}  }
class C{  private void createMultiMovieFromDir(Path dataSource,Path movieDir){  List<Path> allFiles=listFilesOnly(movieDir);  createMultiMovieFromDir(dataSource,movieDir,allFiles);}  }
class C{  public static String formatDecimal(final Double value){  final DecimalFormat formater=new DecimalFormat("###0.00");  final FieldPosition _fldPos=new FieldPosition(0);  final StringBuffer _adaptor=new StringBuffer();  formater.format(value,_adaptor,_fldPos);  return _adaptor.toString();}  }
class C{  private void removeEdge(final INaviEdge edge){  m_graphInternals.removeEdge(m_graph.getEdge(edge));  m_edgeDrawingSynchronizer.updateEdgeDrawingState();  m_graph.updateViews();}  }
class C{  protected <T>void runTasks(final List<AbstractTask<T>> tasks) throws InterruptedException {  if (log.isInfoEnabled())   log.info("begin : will run " + tasks.size() + " update tasks");  if (resourceManager.overflowTasksConcurrent == 1) {    runTasksInSingleThread(tasks);  } else {    runTasksConcurrent(tasks);  }  if (log.isInfoEnabled())   log.info("end");}  }
class C{  public String toString(int indentFactor) throws JSONException {  return toString(indentFactor,0);}  }
class C{  protected final static double parseDouble(String numStr) throws NumberFormatException {  if (NumberInput.NASTY_SMALL_DOUBLE.equals(numStr)) {    return Double.MIN_NORMAL;  }  return Double.parseDouble(numStr);}  }
class C{  public static PropertyValuesHolder ofFloat(String propertyName,float... values){  return new FloatPropertyValuesHolder(propertyName,values);}  }
class C{  public static Bitmap createVideoThumbnail(String filePath){  Bitmap bitmap=null;  return bitmap;}  }
class C{  public void initComponents(){  setTitle(Bundle.getMessage("WindowTitle"));  Container contentPane=getContentPane();  contentPane.setLayout(new BoxLayout(contentPane,BoxLayout.Y_AXIS));  contentPane.add(initAddressPanel());  assignmentPanel=new JPanel();  assignmentPanel.setLayout(new BoxLayout(assignmentPanel,BoxLayout.Y_AXIS));  assignmentListModel=new AssignmentTableModel();  assignmentTable=new JTable(assignmentListModel);  assignmentTable.setRowSelectionAllowed(false);  assignmentTable.setPreferredScrollableViewportSize(new java.awt.Dimension(300,350));  JScrollPane assignmentScrollPane=new JScrollPane(assignmentTable);  assignmentPanel.add(assignmentScrollPane,BorderLayout.CENTER);  contentPane.add(assignmentPanel);  contentPane.add(initNotesPanel());  contentPane.add(initButtonPanel());  pack();  xtc.getXBee().getNetwork().addDiscoveryListener(this);}  }
class C{  @Override public InputStream resourceStream(){  return ResourceFolderResource.class.getResourceAsStream(resourcePath);}  }
class C{  protected void fireStartElem(String elemName) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_STARTELEMENT,elemName,m_attributes);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.886 -0500",hash_original_method="B2E3A495C7EEB290E3194E45B33ED96D",hash_generated_method="B2E3A495C7EEB290E3194E45B33ED96D") BluetoothHeadset(Context context,ServiceListener l){  mContext=context;  mServiceListener=l;  mAdapter=BluetoothAdapter.getDefaultAdapter();  if (!context.bindService(new Intent(IBluetoothHeadset.class.getName()),mConnection,0)) {    Log.e(TAG,"Could not bind to Bluetooth Headset Service");  }}  }
class C{  public void tabClosingEffect(long time,int id){  if (mStackTabs == null)   return;  int newIndex=0;  boolean needAnimation=false;  for (int i=0; i < mStackTabs.length; ++i) {    if (mStackTabs[i].getId() == id) {      needAnimation|=!mStackTabs[i].isDying();      mStackTabs[i].setDying(true);    } else {      mStackTabs[i].setNewIndex(newIndex++);    }  }  if (needAnimation) {    mScrollOffsetForDyingTabs=mScrollOffset;    mSpacing=computeSpacing(newIndex);    startAnimation(time,OverviewAnimationType.DISCARD);  }  if (newIndex == 0) {    mIsDying=true;  }}  }
class C{  public static byte convertUint8toByte(char uint8){  if (uint8 > Byte.MAX_VALUE - Byte.MIN_VALUE) {    throw new RuntimeException("Out of Boundary");  }  return (byte)uint8;}  }
class C{  private static void extract(String s,int start,ExtractFloatResult result){  int currentIndex=start;  boolean foundSeparator=false;  result.mEndWithNegSign=false;  for (; currentIndex < s.length(); currentIndex++) {    char currentChar=s.charAt(currentIndex);switch (currentChar) {case ' ':case ',':      foundSeparator=true;    break;case '-':  if (currentIndex != start) {    foundSeparator=true;    result.mEndWithNegSign=true;  }break;}if (foundSeparator) {break;}}result.mEndPosition=currentIndex;}  }
class C{  public static void validateRegions(SequencesReader reader,ReferenceRegions regions) throws IOException {  final List<String> missingChromosomes=new ArrayList<>();  final Map<String,Long> nameMap=getSequenceNameMap(reader);  missingChromosomes.addAll(regions.sequenceNames().stream().filter(null).collect(Collectors.toList()));  if (missingChromosomes.size() > 0) {    throw new InvalidParamsException("The following sequences specified in the regions list are not present in the template: " + StringUtils.implode(missingChromosomes,", "));  }}  }
class C{  public ProgressOverlay(Context context,AttributeSet attrs){  super(context,attrs);  mProgressRenderer=new ProgressRenderer(context,this);}  }
class C{  private static void registerNatives(){  registerCommand(new CommandUSB());  registerCommand(new CommandThreadPool());  registerCommand(new CommandInvokeCrash());  registerCommand(new CommandList());  registerCommand(new CommandHelp());  registerCommand(new CommandExit());  registerCommand(new CommandProfiler());  registerCommand(new CommandReloadConfigs());  registerCommand(new CommandJScript());  registerCommand(new CommandEnvironment());}  }
class C{  private static byte[] unzipBytes(byte[] input) throws IOException {  ByteArrayInputStream bais=new ByteArrayInputStream(input);  ByteArrayOutputStream baos=new ByteArrayOutputStream(DFLT_BUFFER_SIZE);  try (ZipInputStream zis=new ZipInputStream(bais)){    zis.getNextEntry();    byte[] buf=new byte[DFLT_BUFFER_SIZE];    int len=zis.read(buf);    while (len > 0) {      baos.write(buf,0,len);      len=zis.read(buf);    }  }   return baos.toByteArray();}  }
class C{  public void doRedo(){  hexEditControl.redo();}  }
class C{  public XMLBuilder addContent(CharSequence textValue) throws java.io.IOException {  writer.write(textValue.toString());  return this;}  }
class C{  public void putStringNow(String key,String value){  if (key != null && value != null) {    mPreferences.edit().putString(key,value).commit();  }}  }
class C{  public void removeValue(Comparable key){  int index=getIndex(key);  if (index < 0) {    throw new UnknownKeyException("The key (" + key.toString() + ") is not recognised.");  }  removeValue(index);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final Entry<K,V> pollFirstEntry(){  throw new UnsupportedOperationException();}  }
class C{  private CloseAction(){  super("Close");}  }
class C{  @Override public void writeBinaryData(byte[] sBuf,int sOffset,int sLength){  byte[] tBuf=_buffer;  int tOffset=_offset;  int tLength=tBuf.length;  int end=sOffset + sLength;  while (sOffset < end) {    if (tLength - tOffset < 1) {      tOffset=flush(tOffset);    }    int sublen=Math.min(tLength - tOffset,end - sOffset);    System.arraycopy(sBuf,sOffset,tBuf,tOffset,sublen);    tOffset+=sublen;    sOffset+=sublen;  }  _offset=tOffset;}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public <T>T deserialize(String body,TypeRef returnType) throws ApiException {  JavaType javaType=mapper.constructType(returnType.getType());  try {    return mapper.readValue(body,javaType);  } catch (  IOException e) {    if (returnType.getType().equals(String.class))     return (T)body; else     throw new ApiException(500,e.getMessage(),null,body);  }}  }
class C{  public RegisterFailedException(){  super();}  }
class C{  public void removeExtra(String name){  if (extras != null) {    extras.remove(name);    if (extras.size() == 0) {      extras=null;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:46.261 -0500",hash_original_method="166F0C6BA2B53E84DB5B8B4516A0E908",hash_generated_method="A499CC215A2AD31EF71C24E8CF5996A6") public BasicHttpProcessor copy(){  BasicHttpProcessor clone=new BasicHttpProcessor();  copyInterceptors(clone);  return clone;}  }
class C{  @Override public void widgetSelected(final SelectionEvent e){  final TableItem item;  int nextIndex;  final int currentIndex=table.getSelectionIndex();  final int lastIndex=table.getItemCount();  if (table.getSelectionIndices().length == 0) {    nextIndex=lastIndex;    item=new TableItem(table,SWT.CENTER);    item.setText(0,String.valueOf(nextIndex));  } else {    nextIndex=currentIndex + 1;    item=new TableItem(table,SWT.CENTER,nextIndex);    item.setText(0,String.valueOf(nextIndex));  }  item.setBackground(0,gray);  table.deselect(currentIndex);  table.select(nextIndex);  refreshColumnIndex(nextIndex);}  }
class C{  @Nullable private byte[] statefulRead(ByteBuffer buf,ByteArrayOutputStream intBuf,int size) throws IOException {  if (intBuf.size() + buf.remaining() >= size) {    int off=0;    byte[] bytes=new byte[size];    if (intBuf.size() > 0) {      assert intBuf.size() < size;      byte[] tmpBytes=intBuf.toByteArray();      System.arraycopy(tmpBytes,0,bytes,0,tmpBytes.length);      off=intBuf.size();      intBuf.reset();    }    buf.get(bytes,off,size - off);    return bytes;  } else {    copyRemaining(buf,intBuf);    return null;  }}  }
class C{  public DimensionsRatioScorer(int maximumScore){  maxScore=maximumScore;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T readXML(String fileName){  XStream xstream=new XStream();  try {    Reader reader=new InputStreamReader(new FileInputStream(fileName),"utf-8");    BufferedReader in=new BufferedReader(reader);    return (T)xstream.fromXML(in);  } catch (  Exception e) {    logger.error("Error while reading file " + fileName + " , "+ e.getMessage(),e);    return null;  }}  }
class C{  @Override public int hashCode(){  int hashX=((Double)x).hashCode();  int hashY=((Double)y).hashCode();  return 31 * hashX + hashY;}  }
class C{  public void addPackage(Context context,String packageName,UserHandleCompat user){  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(context);  final List<LauncherActivityInfoCompat> matches=launcherApps.getActivityList(packageName,user);  for (  LauncherActivityInfoCompat info : matches) {    add(new AppInfo(context,info,user,mIconCache,null));  }}  }
class C{  @Override public void handlePatch(Operation patch){  ServiceUtils.logInfo(this,"Handling patch for service %s",getSelfLink());  State startState=getState(patch);  State patchState=patch.getBody(State.class);  validatePatchState(startState,patchState);  State currentState=applyPatch(startState,patchState);  validateState(currentState);  patch.complete();  try {    if (ControlFlags.isOperationProcessingDisabled(currentState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping patch handling (disabled)");    } else     if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {      processStartedState(currentState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  protected void requestJSON(PLFileDownloaderListener listener){  try {    if (mURL != null) {      if (this.isHTTPURL(mURL))       new PLHTTPFileDownloader(mURL,listener).downloadAsynchronously(); else       new PLLocalFileDownloader(mView.getActivity().getApplicationContext(),mURL,listener).downloadAsynchronously();    } else     if (mJSONData != null)     new Thread(new PLDataRunnable(listener,mURL,mJSONData,System.currentTimeMillis())).start(); else     listener.didErrorDownload(mURL,"JSON string is empty",-1,null);  } catch (  Throwable e) {    PLLog.error("PLJSONLoader::requestJSON",e);    listener.didErrorDownload(mURL,e.getMessage(),-1,null);  }}  }
class C{  public static byte[] decryptWithSession(Crypter crypter,byte[] ciphertext) throws KeyczarException {  byte[][] unpacked=org.keyczar.util.Util.lenPrefixUnpack(ciphertext);  SessionCrypter session=new SessionCrypter(crypter,unpacked[0]);  return session.decrypt(unpacked[1]);}  }
class C{  protected void check(ActionObject action){  getSecurityManager().check(action,getServiceClient());}  }
class C{  @SuppressWarnings("unchecked") private Object updateAllInternal(GridCacheOperation op,Collection<? extends K> keys,@Nullable Iterable<?> vals,@Nullable Object[] invokeArgs,@Nullable ExpiryPolicy expiryPlc,boolean retval,boolean rawRetval,CacheEntryPredicate filter,boolean writeThrough,boolean readThrough,boolean keepBinary) throws IgniteCheckedException {  if (keyCheck)   validateCacheKeys(keys);  if (op == DELETE)   ctx.checkSecurity(SecurityPermission.CACHE_REMOVE); else   ctx.checkSecurity(SecurityPermission.CACHE_PUT);  String taskName=ctx.kernalContext().job().currentTaskName();  GridCacheVersion ver=ctx.versions().next();  UUID subjId=ctx.subjectIdPerCall(null);  CacheEntryPredicate[] filters=CU.filterArray(filter);  if (writeThrough && keys.size() > 1) {    return updateWithBatch(op,keys,vals,invokeArgs,expiryPlc,ver,filters,keepBinary,subjId,taskName);  }  Iterator<?> valsIter=vals != null ? vals.iterator() : null;  IgniteBiTuple<Boolean,?> res=null;  CachePartialUpdateCheckedException err=null;  boolean intercept=ctx.config().getInterceptor() != null;  for (  K key : keys) {    if (key == null)     throw new NullPointerException("Null key.");    Object val=valsIter != null ? valsIter.next() : null;    if (val == null && op != DELETE)     throw new NullPointerException("Null value.");    KeyCacheObject cacheKey=ctx.toCacheKeyObject(key);    if (op == UPDATE)     val=ctx.toCacheObject(val); else     if (op == TRANSFORM)     ctx.kernalContext().resource().inject(val,GridResourceIoc.AnnotationSet.ENTRY_PROCESSOR,ctx.name());    while (true) {      GridCacheEntryEx entry=null;      try {        entry=entryEx(cacheKey);        GridTuple3<Boolean,Object,EntryProcessorResult<Object>> t=entry.innerUpdateLocal(ver,val == null ? DELETE : op,val,invokeArgs,writeThrough,readThrough,retval,keepBinary,expiryPlc,true,true,filters,intercept,subjId,taskName);        if (op == TRANSFORM) {          if (t.get3() != null) {            Map<K,EntryProcessorResult> computedMap;            if (res == null) {              computedMap=U.newHashMap(keys.size());              res=new IgniteBiTuple<>(true,computedMap);            } else             computedMap=(Map<K,EntryProcessorResult>)res.get2();            computedMap.put(key,t.get3());          }        } else         if (res == null)         res=new T2(t.get1(),t.get2());        break;      } catch (      GridCacheEntryRemovedException ignored) {        if (log.isDebugEnabled())         log.debug("Got removed entry while updating (will retry): " + key);        entry=null;      }catch (      IgniteCheckedException e) {        if (err == null)         err=partialUpdateException();        err.add(F.asList(key),e);        U.error(log,"Failed to update key : " + key,e);        break;      } finally {        if (entry != null)         ctx.evicts().touch(entry,ctx.affinity().affinityTopologyVersion());      }    }  }  if (err != null)   throw err;  Object ret=res == null ? null : rawRetval ? new GridCacheReturn(ctx,true,keepBinary,res.get2(),res.get1()) : (retval || op == TRANSFORM) ? res.get2() : res.get1();  if (op == TRANSFORM && ret == null)   ret=Collections.emptyMap();  return ret;}  }
class C{  public void mutate(EvolutionState state,int thread){  for (int x=0; x < rulesets.length; x++)   rulesets[x].mutate(state,thread);}  }
class C{  public static boolean isAssignableToOrFrom(Class<?> classToCheck,Class<?> anotherClass){  return classToCheck.isAssignableFrom(anotherClass) || anotherClass.isAssignableFrom(classToCheck);}  }
class C{  public synchronized int lastIndexOf(Object object,int location){  if (location < elementCount) {    if (object != null) {      for (int i=location; i >= 0; i--) {        if (object.equals(elementData[i])) {          return i;        }      }    } else {      for (int i=location; i >= 0; i--) {        if (elementData[i] == null) {          return i;        }      }    }    return -1;  }  throw arrayIndexOutOfBoundsException(location,elementCount);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static float ceil(float fValue){  return (float)Math.ceil(fValue);}  }
class C{  @Override public boolean supportsConvert(int fromType,int toType){  if (isDebugEnabled()) {    debugCode("supportsConvert(" + fromType + ", "+ fromType+ ");");  }  return true;}  }
class C{  @SuppressWarnings("rawtypes") public void testDoChangeSentMessage() throws Exception {  Destination destination=createDestination("test-" + ChangeSentMessageTest.class.getName());  Connection connection=createConnection();  connection.start();  Session consumerSession=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  MessageConsumer consumer=consumerSession.createConsumer(destination);  Session publisherSession=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  MessageProducer producer=publisherSession.createProducer(destination);  HashMap<String,Integer> map=new HashMap<>();  ObjectMessage message=publisherSession.createObjectMessage();  for (int i=0; i < COUNT; i++) {    map.put(VALUE_NAME,Integer.valueOf(i));    message.setObject(map);    producer.send(message);    assertTrue(message.getObject() == map);  }  for (int i=0; i < COUNT; i++) {    ObjectMessage msg=(ObjectMessage)consumer.receive();    HashMap receivedMap=(HashMap)msg.getObject();    Integer intValue=(Integer)receivedMap.get(VALUE_NAME);    assertTrue(intValue.intValue() == i);  }}  }
class C{  public static String dump(Map<?,?> map){  StringBuilder stringBuilder=new StringBuilder();  for (  Map.Entry<?,?> entry : map.entrySet()) {    stringBuilder.append(entry.getKey());    stringBuilder.append(" : ");    stringBuilder.append(entry.getValue());  }  return stringBuilder.toString();}  }
class C{  public boolean isInRange(int loc){  return loc >= getStart() && loc < getEnd();}  }
class C{  public static final void resizeButtons(final Button[] buttons){  Check.notNull(buttons,"buttons");  if (WindowSystemProperties.groupButtonsShareSize() == false) {    return;  }  final Point maxSize=ControlSize.maxSize(buttons);  for (int i=0; i < buttons.length; i++) {    ControlSize.setSizeHints(buttons[i],maxSize);  }}  }
class C{  protected double evaluationForSingleInstance(Classifier classifier,Instance instance,boolean storePredictions) throws Exception {  Instance classMissing=(Instance)instance.copy();  classMissing.setDataset(instance.dataset());  if (classifier instanceof weka.classifiers.misc.InputMappedClassifier) {    instance=(Instance)instance.copy();    instance=((weka.classifiers.misc.InputMappedClassifier)classifier).constructMappedInstance(instance);    int mappedClass=((weka.classifiers.misc.InputMappedClassifier)classifier).getMappedClassIndex();    classMissing.setMissing(mappedClass);  } else {    classMissing.setClassMissing();  }  double pred=evaluationForSingleInstance(classifier.distributionForInstance(classMissing),instance,storePredictions);  if (!m_ClassIsNominal) {    if (!instance.classIsMissing() && !Utils.isMissingValue(pred)) {      if (classifier instanceof IntervalEstimator) {        updateStatsForIntervalEstimator((IntervalEstimator)classifier,classMissing,instance.classValue());      } else {        m_CoverageStatisticsAvailable=false;      }      if (classifier instanceof ConditionalDensityEstimator) {        updateStatsForConditionalDensityEstimator((ConditionalDensityEstimator)classifier,classMissing,instance.classValue());      } else {        m_ComplexityStatisticsAvailable=false;      }    }  }  return pred;}  }
class C{  private void enableHttpResponseCache(final File cacheDir){  long httpCacheSize=10 * 1024 * 1024;  File httpCacheDir=new File(cacheDir,"http");  try {    HttpResponseCache.install(httpCacheDir,httpCacheSize);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void downResource(){  final DefaultMutableTreeTableNode[] selectedNodes=getSelectedNodes();  if (selectedNodes.length == 0) {    return;  }  DefaultMutableTreeTableNode selectedNode=selectedNodes[0];  TreeNode nextSibling=TreeUtil.getNextSibling(selectedNode);  if (nextSibling == null) {    return;  }  if (selectedNode instanceof ResourceNode) {    HumanResource people=(HumanResource)selectedNode.getUserObject();    myResourceTreeModel.moveDown(people);    getTreeSelectionModel().setSelectionPath(TreeUtil.createPath(selectedNode));  } else   if (selectedNode instanceof AssignmentNode) {    swapAssignents((AssignmentNode)selectedNode,(AssignmentNode)nextSibling);  }}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "DefaultAssociator.gif",BeanVisual.ICON_PATH + "DefaultAssociator_animated.gif");}  }
class C{  protected PalantirSqlException(SET_INITIAL_SQL_EXCEPTION i){  super(new SQLException());}  }
class C{  public static boolean copyFromIOS(String from,String to){  Process p=null;  boolean ret=false;  try {    if (findIOSFile(from) == null) {      System.out.println("MobileUtil.copyFromIOS: Source file " + from + " not found.");      return ret;    }    if (to.trim().compareTo("") == 0) {      System.out.println("MobileUtil.copyFromIOS: Dest " + to + " is not valid.");      return ret;    }    String[] cmdCopy={"scp","-P","2222","-r","root@localhost:" + from,to};    p=Runtime.getRuntime().exec(cmdCopy);    p.waitFor();    if (new File(to).exists()) {      ret=true;    }  } catch (  Exception e) {    e.printStackTrace();  }  return ret;}  }
class C{  public boolean isDistributed(){  return lockService.isDistributed();}  }
class C{  public CountingInputStream(InputStream in){  super(checkNotNull(in));}  }
class C{  protected <V>RunnableScheduledFuture<V> decorateTask(Runnable runnable,RunnableScheduledFuture<V> task){  return task;}  }
class C{  public static FormatterDetails createBasicFormatter(final String id,final String name,final String description,final ConversionMethod conversionMethod){  final FormatterDetails formatter=new FormatterDetails();  formatter.setID(id);  formatter.setName(name);  formatter.setDescription(description);  formatter.getFunction().add(createBasicFormatterFunction(conversionMethod));  return formatter;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String toString(){  return getName();}  }
class C{  protected int index(int rank){  return offset + offsets[zero + rank * stride];}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.STATE_SPECIFICATION;}  }
class C{  public static <T>List<String> toStringList(Sequence<T> sequence){  List<String> tokens=new ArrayList<>(sequence.size());  for (int i=0, sz=sequence.size(); i < sz; ++i)   tokens.add(sequence.get(i).toString());  return tokens;}  }
class C{  public void initiateAllControllers(){  for (  final ViewController controller : controllers.values()) {    initiateView(controller);  }  for (  final ViewDialogController controller : dialogControllers.values()) {    if (controller instanceof AnnotatedViewDialogController) {      final AnnotatedViewDialogController dialogController=(AnnotatedViewDialogController)controller;      if (!dialogController.isInitiated() && dialogController.isCachingInstance()) {        dialogController.prepareDialogInstance();      }    }  }}  }
class C{  boolean casNext(Node<K,V> cmp,Node<K,V> val){  return UNSAFE.compareAndSwapObject(this,nextOffset,cmp,val);}  }
class C{  public UngroupAction(DrawingEditor editor){  super(editor,new GroupFigure(),false);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  labels.configureAction(this,ID);  updateEnabledState();}  }
class C{  public static float min(float[] array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  } else   if (array.length == 0) {    throw new IllegalArgumentException("Array cannot be empty.");  }  float min=array[0];  for (int i=1; i < array.length; i++) {    if (Float.isNaN(array[i])) {      return Float.NaN;    }    if (array[i] < min) {      min=array[i];    }  }  return min;}  }
class C{  @Unpreemptible public final void concurrentCollect(){  VM.assertions.fail("concurrentCollect called on StopTheWorld collector");}  }
class C{  public MemberSelectTree buildIteratorMethodAccess(ExpressionTree iterableExpr){  DeclaredType exprType=(DeclaredType)TypesUtils.upperBound(InternalUtils.typeOf(iterableExpr));  assert exprType != null : "expression must be of declared type Iterable<>";  TypeElement exprElement=(TypeElement)exprType.asElement();  Symbol.MethodSymbol iteratorMethod=null;  for (  ExecutableElement method : ElementFilter.methodsIn(elements.getAllMembers(exprElement))) {    Name methodName=method.getSimpleName();    if (method.getParameters().size() == 0) {      if (methodName.contentEquals("iterator")) {        iteratorMethod=(Symbol.MethodSymbol)method;      }    }  }  assert iteratorMethod != null : "no iterator method declared for expression type";  Type.MethodType methodType=(Type.MethodType)iteratorMethod.asType();  Symbol.TypeSymbol methodClass=methodType.asElement();  DeclaredType iteratorType=(DeclaredType)methodType.getReturnType();  TypeMirror elementType;  if (iteratorType.getTypeArguments().size() > 0) {    elementType=iteratorType.getTypeArguments().get(0);    if (elementType instanceof Type.CapturedType) {      elementType=((Type.CapturedType)elementType).wildcard;    }    iteratorType=modelTypes.getDeclaredType((TypeElement)modelTypes.asElement(iteratorType),elementType);  }  Type.MethodType updatedMethodType=new Type.MethodType(com.sun.tools.javac.util.List.<Type>nil(),(Type)iteratorType,com.sun.tools.javac.util.List.<Type>nil(),methodClass);  JCTree.JCFieldAccess iteratorAccess=(JCTree.JCFieldAccess)maker.Select((JCTree.JCExpression)iterableExpr,iteratorMethod);  iteratorAccess.setType(updatedMethodType);  return iteratorAccess;}  }
class C{  @Override public A execute(PerceptStateReward<S> percept){  S sDelta=percept.state();  double rDelta=percept.reward();  if (!U.containsKey(sDelta)) {    U.put(sDelta,rDelta);  }  if (null != s) {    Ns.incrementFor(s);    double U_s=U.get(s);    U.put(s,U_s + alpha(Ns,s) * (r + gamma * U.get(sDelta) - U_s));  }  if (isTerminal(sDelta)) {    s=null;    a=null;    r=null;  } else {    s=sDelta;    a=pi.get(sDelta);    r=rDelta;  }  return a;}  }
class C{  public static void init(){}  }
class C{  @Override public Clustering<? extends Model> run(Database database){  Clustering<? extends Model> m=null;  try (InputStream in=FileUtil.tryGzipInput(new FileInputStream(file));TokenizedReader reader=CSVReaderFormat.DEFAULT_FORMAT.makeReader()){    Tokenizer tokenizer=reader.getTokenizer();    reader.reset(in);    TIntArrayList assignment=new TIntArrayList(database.getRelation(TypeUtil.DBID).size());    ArrayList<String> name=new ArrayList<>();    line:     while (reader.nextLineExceptComments()) {      for (; tokenizer.valid(); tokenizer.advance()) {        try {          assignment.add((int)tokenizer.getLongBase10());        } catch (        NumberFormatException e) {          name.add(tokenizer.getSubstring());        }      }      if (LOG.isDebuggingFinest()) {        LOG.debugFinest("Read " + assignment.size() + " assignments and "+ name.size()+ " labels.");      }      for (      Relation<?> r : database.getRelations()) {        if (r.size() == assignment.size()) {          attachToRelation(database,r,assignment,name);          assignment.clear();          name.clear();          continue line;        }      }      throw new AbortException("No relation found to match with clustering of size " + assignment.size());    }  } catch (  IOException e) {    throw new AbortException("Could not load outlier scores: " + e.getMessage() + " when loading "+ file,e);  }  return m;}  }
class C{  public void clear(){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.clear();    } else {      mObjects.clear();    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public HashCodeBuilder(final int initialOddNumber,final int multiplierOddNumber){  Validate.isTrue(initialOddNumber % 2 != 0,"HashCodeBuilder requires an odd initial value");  Validate.isTrue(multiplierOddNumber % 2 != 0,"HashCodeBuilder requires an odd multiplier");  iConstant=multiplierOddNumber;  iTotal=initialOddNumber;}  }
class C{  public String deleteUser(String id){  Key key=keyFactory.newKey(id);  datastore.delete(key);  return "ok";}  }
class C{  public static DecomposableMatchBuilder0<Boolean> caseBoolean(boolean b){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(eq(b));  return new DecomposableMatchBuilder0<>(matchers,new PrimitiveFieldExtractor<>(Boolean.class));}  }
class C{  public int decreaseWeight(){  return --weight;}  }
class C{  @Override protected void writeNdefFailed(Exception e){  toast(getString(R.string.ndefWriteFailed,e.toString()));}  }
class C{  public synchronized void roomLeaveByScope(RoomClient currentClient,IScope currentScope,boolean removeUserFromSessionList){  try {    log.debug("currentClient " + currentClient);    log.debug("currentScope " + currentScope);    Long room_id=currentClient.getRoom_id();    conferenceLogDao.addConferenceLog("roomLeave",currentClient.getUser_id(),currentClient.getStreamid(),room_id,currentClient.getUserip(),"",currentClient.getExternalUserId(),currentClient.getExternalUserType(),currentClient.getMail(),currentClient.getFirstname(),currentClient.getLastname());    if (room_id != null) {      this.whiteBoardService.removeUserFromAllLists(currentScope,currentClient);    }    log.debug("removing USername " + currentClient.getUsername() + " "+ currentClient.getConnectedSince()+ " streamid: "+ currentClient.getStreamid());    if (currentClient.getIsRecording()) {      log.debug("*** roomLeave Current Client is Recording - stop that");      this.flvRecorderService.stopRecordAndSave(currentScope,currentClient,null);      currentClient.setIsRecording(true);    }    log.debug("currentScope " + currentScope);    if (currentScope != null && currentScope.getConnections() != null) {      Collection<Set<IConnection>> conCollection=currentScope.getConnections();      for (      Set<IConnection> conset : conCollection) {        for (        IConnection cons : conset) {          if (cons != null) {            if (cons instanceof IServiceCapableConnection) {              log.debug("sending roomDisconnect to " + cons + " client id "+ cons.getClient().getId());              RoomClient rcl=this.clientListManager.getClientByStreamId(cons.getClient().getId());              if (rcl != null) {                if (!currentClient.getStreamid().equals(rcl.getStreamid())) {                  log.debug("###########[roomLeave]");                  if (rcl.getIsRecording()) {                    log.debug("*** roomLeave Any Client is Recording - stop that");                    this.flvRecorderService.stopRecordingShowForClient(cons,currentClient);                  }                  if (currentClient.getIsAVClient()) {                    continue;                  }                  if (rcl.getIsScreenClient() != null && rcl.getIsScreenClient()) {                    continue;                  } else                   if (rcl.getIsAVClient()) {                    continue;                  }                  ((IServiceCapableConnection)cons).invoke("roomDisconnect",new Object[]{currentClient},this);                  log.debug("sending roomDisconnect to " + cons);                }              } else {                log.debug("For this StreamId: " + cons.getClient().getId() + " There is no Client in the List anymore");              }            }          }        }      }    }    if (removeUserFromSessionList) {      this.clientListManager.removeClient(currentClient.getStreamid());    }  } catch (  Exception err) {    log.error("[roomLeaveByScope]",err);  }}  }
class C{  public static Date convertStringToDate(String strDate) throws ParseException {  Date aDate=null;  try {    if (log.isDebugEnabled()) {      log.debug("converting date with pattern: " + getDatePattern());    }    aDate=convertStringToDate(getDatePattern(),strDate);  } catch (  ParseException pe) {    log.error("Could not convert '" + strDate + "' to a date, throwing exception");    throw new ParseException(pe.getMessage(),pe.getErrorOffset());  }  return aDate;}  }
class C{  @Nullable public static Block loadOneBlockFromXml(InputStream is,BlockFactory blockFactory) throws BlocklyParserException {  List<Block> temp=loadFromXml(is,blockFactory,null);  if (temp.isEmpty()) {    return null;  }  return temp.get(0);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:00.610 -0500",hash_original_method="A74604AE646C671FE46897A241086F47",hash_generated_method="5056D2985CC88098CE33EFAAF49CE7F6") @Override public String toString(){  return "Action: " + this.action;}  }
class C{  public String subtreeRaisingTipText(){  return "Whether to consider the subtree raising operation when pruning.";}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public ToStringBuilder append(int value){  style.append(buffer,null,value);  return this;}  }
class C{  public Object parse(URL url){  return parseURL(url,null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected void onNfcStateChange(boolean enabled){  if (enabled) {    toast(getString(R.string.nfcAvailableEnabled));  } else {    toast(getString(R.string.nfcAvailableDisabled));  }}  }
class C{  private MediaProperties(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.632 -0400",hash_original_method="D8BC969A867ECF7BB5F00F6D0F678B06",hash_generated_method="16614BB96A796C74F5854FA518F9FE5B") public AgeFileFilter(Date cutoffDate){  this(cutoffDate,true);}  }
class C{  public Builder InlineOldCssClass(String cssClass){  InlineOldCssClass=cssClass;  return this;}  }
class C{  public E putIntArray(final String key,@Nullable final int[] value){  this.bundle.putIntArray(key,value);  return (E)this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.411 -0500",hash_original_method="B1E804E14AC6E4164C7C37AAC8BF3F20",hash_generated_method="F9C9BC9B0ECB43A3ED9EE4D6807AA2ED") static public void assertEquals(char expected,char actual){  assertEquals(null,expected,actual);}  }
class C{  public TestSubscriber(){  this(EmptySubscriber.INSTANCE,Long.MAX_VALUE);}  }
class C{  protected void removeVertex(ControlPointMarker vertexToRemove){}  }
class C{  private NameGenerator(){}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  KeyDeclaration kd=new KeyDeclaration(handler.getStylesheet(),handler.nextUid());  kd.setDOMBackPointer(handler.getOriginatingNode());  kd.setLocaterInfo(handler.getLocator());  setPropertiesFromAttributes(handler,rawName,attributes,kd);  handler.getStylesheet().setKey(kd);}  }
class C{  public static void polygon(double[] x,double[] y){  if (x == null)   throw new NullPointerException();  if (y == null)   throw new NullPointerException();  int n1=x.length;  int n2=y.length;  if (n1 != n2)   throw new IllegalArgumentException("arrays must be of the same length");  int n=n1;  GeneralPath path=new GeneralPath();  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));  for (int i=0; i < n; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));  path.closePath();  offscreen.draw(path);  draw();}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  put(key,new Double(value));  return this;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public SearchRequestBuilder internalBuilder(SearchSourceBuilder sourceBuilder){  this.sourceBuilder=sourceBuilder;  return this;}  }
class C{  public static XMLReader createXMLReader() throws SAXException {  return createXMLReader(false,false);}  }
class C{  public PowerContainerVmAllocationAbstract(List<? extends ContainerHost> list){  super(list);}  }
class C{  private JsonWriter newJsonWriter(Writer writer) throws IOException {  if (generateNonExecutableJson) {    writer.write(JSON_NON_EXECUTABLE_PREFIX);  }  JsonWriter jsonWriter=new JsonWriter(writer);  if (prettyPrinting) {    jsonWriter.setIndent("  ");  }  jsonWriter.setSerializeNulls(serializeNulls);  return jsonWriter;}  }
class C{  public static void run(AdSenseHost service,String adClientId,String customChannelId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Deleting custom channel %s\n",customChannelId);  System.out.println("=================================================================");  CustomChannel customChannel=service.customchannels().delete(adClientId,customChannelId).execute();  System.out.printf("Custom channel with ID \"%s\" was deleted.\n",customChannel.getId());  System.out.println();}  }
class C{  @Override public void restore(){  super.restore();  if (null != primaryName) {    primaryW=(InfantryWeapon)EquipmentType.get(primaryName);  }  if (null != secondName) {    secondW=(InfantryWeapon)EquipmentType.get(secondName);  }}  }
class C{  public static List<Size> stringToList(String encodedSizes){  String[] flatSizes=TextUtils.split(encodedSizes,LIST_DELIMITER);  ArrayList<Size> list=new ArrayList<>();  for (int i=0; i < flatSizes.length; i+=2) {    int width=Integer.parseInt(flatSizes[i]);    int height=Integer.parseInt(flatSizes[i + 1]);    list.add(new Size(width,height));  }  return list;}  }
class C{  public PlainMessage(final byte[] payload){  super(MessageTypes.PLAIN);  this.payload=payload;}  }
class C{  public JSearchPanel(SearchTupleSet search,String field){  this(search,field,false);}  }
class C{  protected void doStateTerminated(){  setColor(new Color(0xd0,0x00,0x00));  getSimulation().removeAgent(this);  System.err.println("Terminate called for Bee " + this);}  }
class C{  public final boolean canSeekBackwards(){  return false;}  }
class C{  @Inject public SshKeyManagerPresenter(SshKeyManagerView view,SshKeyService service,SshResources resources,AppContext appContext,SshLocalizationConstant constant,AsyncRequestLoader loader,UploadSshKeyPresenter uploadSshKeyPresenter,NotificationManager notificationManager,DtoUnmarshallerFactory dtoUnmarshallerFactory,DialogFactory dialogFactory){  super(constant.sshManagerTitle(),constant.sshManagerCategory(),resources.sshKeyManager());  this.view=view;  this.appContext=appContext;  this.dtoUnmarshallerFactory=dtoUnmarshallerFactory;  this.dialogFactory=dialogFactory;  this.view.setDelegate(this);  this.service=service;  this.constant=constant;  this.loader=loader;  this.uploadSshKeyPresenter=uploadSshKeyPresenter;  this.notificationManager=notificationManager;}  }
class C{  public ITagDefinition createTagDefinitionFromString(EDataType eDataType,String initialValue){  return (ITagDefinition)super.createFromString(eDataType,initialValue);}  }
class C{  protected void validateState(S state) throws Throwable {  ValidationUtils.validateState(state);  T taskState=ServiceDocumentUtils.getTaskState(state);  ValidationUtils.validateTaskStage(taskState);switch (taskState.stage) {case STARTED:    E subStage=ServiceDocumentUtils.getTaskStateSubStage(taskState);  checkState(subStage != null,"Invalid stage update. SubStage cannot be null");E[] validSubStages=ServiceDocumentUtils.getTaskStateSubStageEntries(taskSubStageType);if (!Arrays.asList(validSubStages).contains(subStage)) {checkState(false,"unsupported subStage: " + taskState.stage.toString());}break;case CREATED:case FAILED:case FINISHED:case CANCELLED:checkState(ServiceDocumentUtils.getTaskStateSubStage(taskState) == null,"Invalid stage update. SubStage must be null");break;default :checkState(false,"cannot process patches in state: " + taskState.stage.toString());}}  }
class C{  public static Dialog createDialog(int id,Context context,String title,CallbackBundle callback,String suffix,Map<String,Integer> images){  AlertDialog.Builder builder=new AlertDialog.Builder(context);  builder.setView(new FileSelectView(context,id,callback,suffix,images));  Dialog dialog=builder.create();  dialog.setTitle(title);  return dialog;}  }
class C{  public void rotate(float degrees){  manualDirectionController.rotate(degrees);}  }
class C{  private void addImpliedVersion(Version v){  if (!impliedVersions.contains(v)) {    impliedVersions.add(v);    for (    Version impliedVersion : v.getImpliedVersions()) {      addImpliedVersion(impliedVersion);    }  }}  }
class C{  @Override public void write(ByteCodeWriter out) throws IOException {  out.writeUTF8Const(getName());  TempOutputStream ts=new TempOutputStream();  ByteCodeWriter o2=new ByteCodeWriter(ts,out.getJavaClass());  o2.writeShort(_methods.size());  for (int i=0; i < _methods.size(); i++) {    BootstrapMethod method=_methods.get(i);    o2.writeShort(method.getMethodRef());    o2.writeShort(method.getArgumentSize());    for (    ConstantPoolEntry entry : method.getArguments()) {      o2.writeShort(entry.getIndex());    }  }  ts.close();  out.writeInt(ts.getLength());  TempBuffer ptr=ts.getHead();  for (; ptr != null; ptr=ptr.next()) {    out.write(ptr.buffer(),0,ptr.length());  }  ts.destroy();}  }
class C{  public static void putCharLE(long addr,char val){  if (UNALIGNED)   UNSAFE.putChar(addr,Character.reverseBytes(val)); else   putCharByByte(addr,val,false);}  }
class C{  private void checkEntry(long index,Entry entry,Segment segment,Segment compactSegment){  Compaction.Mode mode=entry.getCompactionMode();  if (mode == Compaction.Mode.DEFAULT) {    mode=defaultCompactionMode;  }switch (mode) {case SNAPSHOT:    if (index <= snapshotIndex && !segment.isLive(index)) {      compactEntry(index,segment,compactSegment);    } else {      transferEntry(index,entry,compactSegment);    }  break;case RELEASE:case QUORUM:if (!segment.isLive(index)) {  compactEntry(index,segment,compactSegment);} else {  transferEntry(index,entry,compactSegment);}break;case FULL:if (index <= compactIndex && !segment.isLive(index)) {compactEntry(index,segment,compactSegment);} else {transferEntry(index,entry,compactSegment);}break;case SEQUENTIAL:case EXPIRING:case TOMBSTONE:case UNKNOWN:transferEntry(index,entry,compactSegment);break;default :break;}}  }
class C{  public static boolean showEnhancedBookmarkIfEnabled(Activity activity){  if (!isEnhancedBookmarkEnabled()) {    return false;  }  if (DeviceFormFactor.isTablet(activity)) {    openBookmark(activity,UrlConstants.BOOKMARKS_URL);  } else {    activity.startActivity(new Intent(activity,EnhancedBookmarkActivity.class));  }  return true;}  }
class C{  public boolean isSubtrek(List<Node> trek,List<Node> subtrek){  int l=0;  for (int k=0; k < subtrek.size(); k++) {    while (!subtrek.get(k).equals(trek.get(l))) {      l++;      if (l >= trek.size()) {        return false;      }    }    if (l >= trek.size()) {      return false;    }    l++;  }  return true;}  }
class C{  private void collectWrapperClasses(ClassLoader cl,String pkg,File file) throws Exception {  for (  File f : file.listFiles()) {    if (f.isDirectory()) {      collectWrapperClasses(cl,pkg + f.getName() + ".",f);    } else {      addWrapperClassToWrapperClassesList(cl,pkg,f);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:50.023 -0500",hash_original_method="36B01295C5B2DBDA962DAB198BFBD1DB",hash_generated_method="E5BA0EAE21006208C176273F071C6E0E") public final static String formatHeader(final Header header,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.formatHeader(null,header).toString();}  }
class C{  public Pair<K,V> argMax(){  double maxCount=Double.NEGATIVE_INFINITY;  Pair<K,V> maxKey=null;  for (  Map.Entry<K,Counter<V>> entry : counterMap.entrySet()) {    Counter<V> counter=entry.getValue();    V localMax=counter.argMax();    if (counter.getCount(localMax) > maxCount || maxKey == null) {      maxKey=new Pair<K,V>(entry.getKey(),localMax);      maxCount=counter.getCount(localMax);    }  }  return maxKey;}  }
class C{  public long numRows() throws IOException, DMLException {  if (mc.rowsKnown()) {    return mc.getRows();  } else {    return (long)getScalarBuiltinFunctionResult("nrow");  }}  }
class C{  public Statement naturalJoin(Object table){  statement.append(" NATURAL JOIN ").append(table);  return this;}  }
class C{  public synchronized void co_exit(int thisCoroutine){  m_activeIDs.clear(thisCoroutine);  m_nextCoroutine=NOBODY;  notify();}  }
class C{  private Profile(){}  }
class C{  protected void stripUnlikelyCandidates(Document doc){  for (  Element child : doc.select("body").select("*")) {    String className=child.className().toLowerCase();    String id=child.id().toLowerCase();    if (NEGATIVE.matcher(className).find() || NEGATIVE.matcher(id).find()) {      child.remove();    }  }}  }
class C{  protected AbstractElement(){}  }
class C{  public InMemoryConnectionStore(final SessionCache sessionCache){  this(DEFAULT_CACHE_SIZE,DEFAULT_EXPIRATION_THRESHOLD,sessionCache);}  }
class C{  private void updateSequence(){  setLong(mBuffers[mBufferIn],++mSeq,2,4);}  }
class C{  public void updateSubTreeGreyness(TreePath path){}  }
class C{  public boolean rawSetBlock(final Vector position,final BaseBlock block){  this.changes++;  try {    return this.bypassHistory.setBlock(position,block);  } catch (  final WorldEditException e) {    throw new RuntimeException("Unexpected exception",e);  }}  }
class C{  @Override public String toJSONString(){  throw new RuntimeException("toJSONString not implemented");}  }
class C{  public boolean isSpecial(){  return special;}  }
class C{  public static void main(String[] args){  runFilter(new SortLabels(),args);}  }
class C{  public RegressionDataSet(List<DataPointPair<Double>> list){  this.numNumerVals=list.get(0).getDataPoint().numNumericalValues();  this.numericalVariableNames=new ArrayList<String>(getNumNumericalVars());  setUpGenericNumericNames();  this.categories=CategoricalData.copyOf(list.get(0).getDataPoint().getCategoricalData());  this.dataPoints=new ArrayList<DataPointPair<Double>>(list.size());  for (  DataPointPair<Double> dpp : list)   dataPoints.add(new DataPointPair<Double>(dpp.getDataPoint().clone(),dpp.getPair()));}  }
class C{  private boolean tryToMove(float deltaY){  if ((deltaY > 0 && mCurrentPos == 0)) {    if (DEBUG) {      Log.d(LOG_TAG,String.format("has reached the bottom"));    }    return false;  }  if ((deltaY < 0 && mCurrentPos == -mHeaderHeight)) {    if (DEBUG) {      Log.d(LOG_TAG,String.format("has reached the top"));    }    return false;  }  int to=mCurrentPos + (int)deltaY;  if (to < -mHeaderHeight) {    if (DEBUG) {      Log.d(LOG_TAG,String.format("over top"));    }    to=-mHeaderHeight;  }  if (to > 0) {    if (DEBUG) {      Log.d(LOG_TAG,String.format("over bottom"));    }    to=0;  }  return moveTo(to);}  }
class C{  public double findMinimum(UnivariateFunction f,int fracDigits){  double tol=Math.pow(10,-1 - fracDigits);  final double optx=optimize(f,tol);  return optx;}  }
class C{  public static long copyLarge(final InputStream input,final OutputStream output,final long inputOffset,final long length,final byte[] buffer) throws IOException {  if (inputOffset > 0) {    IOUtils.skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && IOUtils.EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  public RadialGradientPaint(float cx,float cy,float radius,float[] fractions,Color[] colors){  this(cx,cy,radius,cx,cy,fractions,colors);}  }
class C{  public void clear(){  map.clear();}  }
class C{  public Category_Relation idBetween(long idA,long idB){  return whereBetween(schema.id,idA,idB);}  }
class C{  private static void createAndShowGUI(){  JFrame frame=new JFrame("DialogDemo");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  DialogDemo newContentPane=new DialogDemo(frame);  newContentPane.setOpaque(true);  frame.setContentPane(newContentPane);  frame.pack();  frame.setVisible(true);}  }
class C{  public void consume(ParsableByteArray data,ExtractorOutput output){  data.readBytes(pesScratch.data,0,3);  pesScratch.setPosition(0);  parseHeader();  data.readBytes(pesScratch.data,0,extendedHeaderLength);  pesScratch.setPosition(0);  parseHeaderExtension();  pesPayloadReader.packetStarted(timeUs,true);  pesPayloadReader.consume(data);  pesPayloadReader.packetFinished();}  }
class C{  public FeatureVectorParser(String exampleFile,Feature[] lexicon){  this(exampleFile);  this.lexicon=lexicon;}  }
class C{  @Override public Type type(){  return Type.BOOLEAN;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getNotequalsOp_();}  }
class C{  public static String paramToQueryString(Map<String,String> params,String charset){  if (params == null || params.isEmpty()) {    return null;  }  StringBuilder paramString=new StringBuilder();  boolean first=true;  for (  Entry<String,String> p : params.entrySet()) {    String key=p.getKey();    String value=p.getValue();    if (!first) {      paramString.append("&");    }    paramString.append(urlEncode(key,charset));    if (value != null) {      paramString.append("=").append(urlEncode(value,charset));    }    first=false;  }  return paramString.toString();}  }
class C{  public void configureFillTheForm(@ConfigurationSource int source,@NonNull String configurationFilePath){  setConfigurationFinished(false);  numberOfProfiles=NO_PROFILES;  Bundle extras=new Bundle();  extras.putInt(INTENT_EXTRA_CONFIGURATION_FILE_SOURCE,source);  extras.putString(INTENT_EXTRA_CONFIGURATION_FILE_PATH,configurationFilePath);  sendBroadcast(INTENT_READ_CONFIGURATION_FILE,extras);}  }
class C{  public static SendRequest forTx(Transaction tx){  SendRequest req=new SendRequest();  req.tx=tx;  return req;}  }
class C{  @Override public void toData(DataOutput out) throws IOException {  out.writeByte(_operation.getEventCode());  int instantiatorCount=this.serializedInstantiators.length;  out.writeInt(instantiatorCount);  for (int i=0; i < instantiatorCount; i++) {    DataSerializer.writeByteArray(this.serializedInstantiators[i],out);  }  DataSerializer.writeObject(_membershipId,out);  DataSerializer.writeObject(_eventIdentifier,out);}  }
class C{  public static void openUrl(Context context,String url){  Intent intent=new Intent(Intent.ACTION_VIEW);  intent.setData(Uri.parse(url));  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public void onDreamingStarted(){  if (mDebug)   Slog.v(TAG,"onDreamingStarted()");}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  public Vector4i max(Vector4i v){  this.x=Math.max(x,v.x);  this.y=Math.max(y,v.y);  this.z=Math.max(z,v.z);  this.w=Math.min(w,v.w);  return this;}  }
class C{  public JSONObject optJSONObject(int index){  Object o=opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  put(key,new Integer(value));  return this;}  }
class C{  public void loadUrl(String url){  if (appView == null) {    init();  }  this.keepRunning=preferences.getBoolean("KeepRunning",true);  appView.loadUrlIntoView(url,true);}  }
class C{  public static void main(String[] args) throws Exception {  GUILauncher.launchApplication(ModelViewer.class,"Model viewer",true,args);}  }
class C{  public String toString(){  return "[" + prettyName + "] Symbol Set";}  }
class C{  public boolean isReadWrite(){  Object oo=get_Value(COLUMNNAME_IsReadWrite);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isOffHeap(){  return false;}  }
class C{  public void appendOpenParagraphTag(String style){  StringBuilder sb=new StringBuilder("<p");  if (style != null) {    sb.append(" style=\"");    sb.append(style);    sb.append("\"");  }  sb.append(">");  text.append(sb.toString());}  }
class C{  public static CProjectTreeNode<?> findNode(final JTree tree,final Object object){  final CProjectTreeNode<?> root=(CProjectTreeNode<?>)tree.getModel().getRoot();  final Enumeration<?> nodes=root.breadthFirstEnumeration();  while (nodes.hasMoreElements()) {    final CProjectTreeNode<?> node=(CProjectTreeNode<?>)nodes.nextElement();    if (node.getObject() == object) {      return node;    }  }  return null;}  }
class C{  private Dimension layoutSize(Container target,boolean preferred){synchronized (target.getTreeLock()) {    int targetWidth=target.getSize().width;    if (targetWidth == 0)     targetWidth=Integer.MAX_VALUE;    int hgap=getHgap();    int vgap=getVgap();    Insets insets=target.getInsets();    int horizontalInsetsAndGap=insets.left + insets.right + (hgap * 2);    int maxWidth=targetWidth - horizontalInsetsAndGap;    Dimension dim=new Dimension(0,0);    int rowWidth=0;    int rowHeight=0;    int nmembers=target.getComponentCount();    for (int i=0; i < nmembers; i++) {      Component m=target.getComponent(i);      if (m.isVisible()) {        Dimension d=preferred ? m.getPreferredSize() : m.getMinimumSize();        if (rowWidth + d.width > maxWidth) {          addRow(dim,rowWidth,rowHeight);          rowWidth=0;          rowHeight=0;        }        if (rowWidth != 0) {          rowWidth+=hgap;        }        rowWidth+=d.width;        rowHeight=Math.max(rowHeight,d.height);      }    }    addRow(dim,rowWidth,rowHeight);    dim.width+=horizontalInsetsAndGap;    dim.height+=insets.top + insets.bottom + vgap * 2;    Container scrollPane=SwingUtilities.getAncestorOfClass(JScrollPane.class,target);    if (scrollPane != null && target.isValid()) {      dim.width-=(hgap + 1);    }    return dim;  }}  }
class C{  public OFRoleReplyVendorData(int role){  super(NXT_ROLE_REPLY,role);}  }
class C{  @Deprecated @Override public void queueEvent(Runnable r){  super.queueEvent(r);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:37.297 -0500",hash_original_method="3680F869AEF91A8B3F794811BFCF54E6",hash_generated_method="130B732D567D20D7C7A1B763509FA203") @Override public URLConnection openConnection(URL url,Proxy proxy) throws IOException {  if (url == null) {    throw new IllegalArgumentException("url == null");  }  String host=url.getHost();  if (host == null || host.isEmpty() || host.equalsIgnoreCase("localhost")) {    return new FileURLConnection(url);  }  URL ftpURL=new URL("ftp",host,url.getFile());  return (proxy == null) ? ftpURL.openConnection() : ftpURL.openConnection(proxy);}  }
class C{  public URI startSubscriptionService(Operation subscribe,Consumer<Operation> notificationConsumer){  return startSubscriptionService(subscribe,notificationConsumer,ServiceSubscriber.create(false));}  }
class C{  public void testArtifactInstaller() throws Exception {  File target=new File("target");  assertTrue(target + " is not a directory",target.isDirectory());  boolean foundJettyBase=false;  boolean foundJettyDistribution=false;  for (  File contents : target.listFiles()) {    if (contents.isDirectory()) {      if (contents.getName().equals("jetty-base")) {        foundJettyBase=true;      } else       if (contents.getName().equals("cargo")) {        File installs=new File(contents,"installs");        assertTrue(installs + " is not a directory",installs.isDirectory());        for (        File jettyDistribution : installs.listFiles()) {          if (jettyDistribution.isDirectory() && jettyDistribution.getName().startsWith("jetty-distribution-")) {            foundJettyDistribution=true;          }        }      }    }  }  assertTrue(foundJettyBase);  assertTrue(foundJettyDistribution);}  }
class C{  public StoredField(String name,byte[] value){  super(name,value,TYPE);}  }
class C{  public boolean isModelValue(){  return modelValue;}  }
class C{  public AmqpReceiver createReceiver(String address,String selector) throws Exception {  return createReceiver(address,selector,false);}  }
class C{  public static Keymap fromKey(final String key){  if (key == null || key.isEmpty()) {    return null;  }  final Keymap searchResult=instances.get(key);  return searchResult;}  }
class C{  public boolean equals(Object o1){  try {    GVector v2=(GVector)o1;    if (length != v2.length) {      return false;    }    for (int i=0; i < length; i++) {      if (values[i] != v2.values[i]) {        return false;      }    }    return true;  } catch (  ClassCastException e) {    return false;  }catch (  NullPointerException e) {    return false;  }}  }
class C{  public APIUser(User user){  this.username=user.getIdentifier();  this.password=user.getPassword();  this.attributes=user.getAttributes();}  }
class C{  public int read() throws IOException {  int val;  if ((val=is.read()) < 0) {    return -1;  }  if (bo == 'b') {    val=(char)((val << 8) | (is.read() & 0xff));  } else {    val=(char)((is.read() << 8) | (val & 0xff));  }  return val;}  }
class C{  public GenericDOMImplementation(){}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> createSnapshot(URI consistencyGroupId,BlockConsistencyGroupSnapshotCreate input){  final String url=getIdUrl() + "/protection/snapshots";  return postTasks(input,url,consistencyGroupId);}  }
class C{  public void testManagedPropertyMixedVERegresssion() throws Exception {  Map<String,Object> requestMap=getFacesContext().getExternalContext().getRequestMap();  requestMap.put("val","String");  List<ManagedBeanInfo.ManagedProperty> properties=new ArrayList<ManagedBeanInfo.ManagedProperty>(1);  ManagedBeanInfo.ManagedProperty property=new ManagedBeanInfo.ManagedProperty("modelLabel",null,"#{'this'} is a String",null,null);  properties.add(property);  ManagedBeanInfo bean=new ManagedBeanInfo(beanName,beanName,"request",null,null,properties,null);  BeanManager beanManager=ApplicationAssociate.getCurrentInstance().getBeanManager();  beanManager.register(bean);  testBean=(TestBean)beanManager.create(beanName,getFacesContext());  assertTrue("this is a String","this is a String".equals(testBean.getModelLabel()));}  }
class C{  private void close0(){  if (ptr != 0) {    long ptr0=ptr;    ptr=0;    if (cursor != null)     cursor.close();    platformCtx.gateway().continuousQueryFilterRelease(ptr0);  }}  }
class C{  public void add(int i,byte[] buffer,int offset,int length){  if (_length + length > _capacity)   ensureCapacity(_length + length);  System.arraycopy(_buffer,i,_buffer,i + length,_length - i);  System.arraycopy(buffer,offset,_buffer,i,length);  _length+=length;}  }
class C{  @Override public void write(Integer value){  if (value == null) {    if (logSerialMessages)     System.out.println("TxSerialInterface.write(null)");  } else {    if (isEnSet() && isMod0RxeSet() && isMod1FdpxRxSet()) {      queueRxValue(value);    } else {      if (!isEnSet()) {        if (logSerialMessages)         System.out.println(getName() + " is disabled. Value 0x" + Format.asHex(value,2)+ " is ignored.");      } else       if (!isMod0RxeSet()) {        if (logSerialMessages)         System.out.println("RX is disabled on " + getName() + ". Value 0x"+ Format.asHex(value,2)+ " is ignored.");      } else {        if (logSerialMessages)         System.out.println("Duplex mode on " + getName() + " is "+ getMod1Fdpx()+ ". Value 0x"+ Format.asHex(value,2)+ " is ignored.");      }    }  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("LdapConnCfg[");  buffer.append("engine = ").append(m_engine);  buffer.append(", provider = ").append(m_provider);  buffer.append(", url = ").append(m_url);  buffer.append(", user = ").append(m_user);  buffer.append(", pwd = ").append(m_pwd);  buffer.append(", pool = ").append(m_pool);  buffer.append(", poolTimeOut = ").append(m_poolTO);  buffer.append("]");  return buffer.toString();}  }
class C{  private static img createWorkflowImage(String name,int activeNode,String js_command,boolean pressed){  StringBuffer imgName=new StringBuffer(name);  imgName.append("WF");  imgName.append(".gif");  img img=new img(WebEnv.getImageDirectory(imgName.toString()),name);  if (!(imgName.toString()).startsWith("Spacer") && !(imgName.toString()).startsWith("Arrow")) {    if (!pressed)     img.setID("imgButton"); else     img.setID("imgButtonPressed");  }  if (js_command != null && js_command.length() > 0 && activeNode != 0) {    String js_command_front="document." + FORM_NAME + "."+ J_Command+ ".value='"+ activeNode+ "'; ";    js_command_front=js_command_front + "document." + FORM_NAME+ ".submit();";    img.setOnClick(js_command_front + js_command);  }  return img;}  }
class C{  private void addAssertions(TestCase test,Set<Integer> killed){  addAssertions(test,killed,mutants);  filterRedundantNonnullAssertions(test);}  }
class C{  public LineAndShapeRenderer(boolean lines,boolean shapes){  super();  this.linesVisible=null;  this.seriesLinesVisible=new BooleanList();  this.baseLinesVisible=lines;  this.shapesVisible=null;  this.seriesShapesVisible=new BooleanList();  this.baseShapesVisible=shapes;  this.shapesFilled=null;  this.seriesShapesFilled=new BooleanList();  this.baseShapesFilled=true;  this.useFillPaint=false;  this.drawOutlines=true;  this.useOutlinePaint=false;  this.useSeriesOffset=false;  this.itemMargin=0.0;}  }
class C{  private void readEntryLine(final String key,final StringTokenizer tk,final WordEntry entry){  if (tk.hasMoreTokens()) {    entry.setType(new ExpressionType(tk.nextToken()));    if (tk.hasMoreTokens()) {      String s=tk.nextToken();      if (s.charAt(0) == '=') {        entry.setNormalized(trimWord(s.substring(1)));        if (tk.hasMoreTokens()) {          s=tk.nextToken();        } else {          s=null;        }      }      if (s != null) {        if (entry.isNumeral()) {          entry.setValue(Integer.valueOf(s));        } else {          entry.setPlurSing(s);        }      }    }    final String normalized=entry.getNormalized();    if (Character.isLowerCase(entry.getTypeString().charAt(0))) {      entry.setType(new ExpressionType(ExpressionType.OBJECT));      entry.setPlurSing(trimWord(entry.getTypeString()));    } else     if ((entry.getPlurSing() == null) && entry.isObject()) {      final String plural=Grammar.plural(normalized);      if (plural.indexOf(' ') == -1) {        entry.setPlurSing(plural);      }    } else     if (entry.getPlurSing() != null) {      if (!entry.isPronoun() && !entry.isObsessional() && !normalized.equals("is")) {        String plural=Grammar.plural(key);        if ((plural.indexOf(' ') == -1) && !plural.equals(entry.getPlurSing())) {          plural=Grammar.plural(normalized);          if ((plural.indexOf(' ') == -1) && !plural.equals(entry.getPlurSing())) {            logger.warn(String.format("suspicious plural: %s -> %s (%s?)",key,entry.getPlurSing(),plural));          }        }      }    }    while (tk.hasMoreTokens()) {      logger.warn("superfluous trailing word in words.txt: " + tk.nextToken());    }  }}  }
class C{  public void parse(final SetCookie cookie,String domain) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (domain == null) {    throw new MalformedCookieException("Missing value for domain attribute");  }  if (domain.trim().length() == 0) {    throw new MalformedCookieException("Blank value for domain attribute");  }  domain=domain.toLowerCase(Locale.ENGLISH);  if (!domain.startsWith(".")) {    domain='.' + domain;  }  cookie.setDomain(domain);}  }
class C{  public void clearCredentials(){  credMap.clear();}  }
class C{  public void schedule(TimerTask task,long delay){  if (delay < 0) {    throw new IllegalArgumentException("delay < 0: " + delay);  }  scheduleImpl(task,delay,-1,false);}  }
class C{  private int readVersion(final BluetoothGattCharacteristic characteristic) throws DeviceDisconnectedException, DfuException, UploadAbortedException {  if (!mConnected)   throw new DeviceDisconnectedException("Unable to read version number: device disconnected");  if (mAborted)   throw new UploadAbortedException();  if (characteristic == null)   return 0;  mReceivedData=null;  mError=0;  logi("Reading DFU version number...");  mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_VERBOSE,"Reading DFU version number...");  characteristic.setValue((byte[])null);  mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_DEBUG,"gatt.readCharacteristic(" + characteristic.getUuid() + ")");  mGatt.readCharacteristic(characteristic);  try {synchronized (mLock) {      while (((!mRequestCompleted || characteristic.getValue() == null) && mConnected && mError == 0 && !mAborted) || mPaused) {        mRequestCompleted=false;        mLock.wait();      }    }  } catch (  final InterruptedException e) {    loge("Sleeping interrupted",e);  }  if (mError != 0)   throw new DfuException("Unable to read version number",mError);  if (!mConnected)   throw new DeviceDisconnectedException("Unable to read version number: device disconnected");  return characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT16,0);}  }
class C{  public static CodedInputStream newInstance(final byte[] buf,final int off,final int len){  CodedInputStream result=new CodedInputStream(buf,off,len);  try {    result.pushLimit(len);  } catch (  InvalidProtocolBufferException ex) {    throw new IllegalArgumentException(ex);  }  return result;}  }
class C{  public void test1000Transactions() throws Exception {  this.takeMeasurements=false;  warmUp();  this.takeMeasurements=true;  doIterations(29);  reportResults("\n\nResults for instance # 1: ");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void writeIncremental(Instance inst) throws IOException {  int writeMode=getWriteMode();  Instances structure=getInstances();  PrintWriter outW=null;  if ((getRetrieval() == BATCH) || (getRetrieval() == NONE)) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  if (getWriter() != null) {    outW=new PrintWriter(getWriter());  }  if (writeMode == WAIT) {    if (structure == null) {      setWriteMode(CANCEL);      if (inst != null) {        System.err.println("Structure (Header Information) has to be set in advance");      }    } else {      setWriteMode(STRUCTURE_READY);    }    writeMode=getWriteMode();  }  if (writeMode == CANCEL) {    if (outW != null) {      outW.close();    }    cancel();  }  if (writeMode == STRUCTURE_READY) {    setWriteMode(WRITE);    writeMode=getWriteMode();  }  if (writeMode == WRITE) {    if (structure == null) {      throw new IOException("No instances information available.");    }    if (inst != null) {      if ((retrieveFile() == null) && (outW == null)) {        System.out.println(instanceToLibsvm(inst));      } else {        outW.println(instanceToLibsvm(inst));        m_incrementalCounter++;        if (m_incrementalCounter > 100) {          m_incrementalCounter=0;          outW.flush();        }      }    } else {      if (outW != null) {        outW.flush();        outW.close();      }      m_incrementalCounter=0;      resetStructure();      outW=null;      resetWriter();    }  }}  }
class C{  public IStateVector<GraphNode,LatticeElement> solve(){  final HashSet<GraphNode> nodesToUpdate=new LinkedHashSet<>(graph.getNodes());  while (!nodesToUpdate.isEmpty()) {    transformState(nodesToUpdate);  }  return state;}  }
class C{  public void testPoll(){  storedQueue.clear();  assertTrue(storedQueue.isEmpty());  populatedQueue(SIZE,storedQueue);  for (int i=SIZE - 1; i >= 0; i--) {    System.out.println("iteration " + i);    assertEquals(i,Integer.parseInt(storedQueue.poll()));  }  assertNull(storedQueue.poll());}  }
class C{  @Override protected void processComponentKeyEvent(final KeyEvent e){  if (e.getKeyCode() == KeyEvent.VK_SPACE || e.getKeyCode() == KeyEvent.VK_ENTER) {    e.consume();    notifyActionListeners();  }}  }
class C{  protected PairImpl(){  super();}  }
class C{  private void appendCoordinate(Coordinate coordinate,Writer writer) throws IOException {  writer.write(writeNumber(coordinate.x) + " " + writeNumber(coordinate.y));  if (outputDimension >= 3 && !Double.isNaN(coordinate.z)) {    writer.write(" ");    writer.write(writeNumber(coordinate.z));  }}  }
class C{  public Element makeXmlElement(Document document,String prefix){  Element element=null;  if (prefix == null)   prefix="";  if (document != null)   element=document.createElement(prefix + this.getEntityName());  if (element == null)   return null;  Iterator<ModelField> modelFields=this.getModelEntity().getFieldsIterator();  while (modelFields.hasNext()) {    ModelField modelField=modelFields.next();    String name=modelField.getName();    String value=this.getString(name);    if (value != null) {      if (value.indexOf('\n') >= 0 || value.indexOf('\r') >= 0) {        UtilXml.addChildElementCDATAValue(element,name,value,document);      } else {        element.setAttribute(name,value);      }    }  }  return element;}  }
class C{  public static PublicLandingpage toLandingpage(VOPublicLandingpage voObj) throws ValidationException {  final PublicLandingpage domObj=new PublicLandingpage();  validate(voObj);  copyAttributes(domObj,voObj);  return domObj;}  }
class C{  public static void invDecomposition(Image sumImg,Image coarseImg,Image horizontalImg,Image verticalImg,Image diagonalImg,FilterGH filterGH,int method){  Image tempImg=null;  Filter filterG=null;  Filter filterH=null;  if (filterGH.getType() == FilterGH.TYPE_ORTHOGONAL) {    filterG=filterGH.getG();    filterH=filterGH.getH();  } else {    filterG=filterGH.getGi();    filterH=filterGH.getHi();  }  tempImg=new Image(coarseImg.getWidth(),sumImg.getHeight());  convoluteRows(tempImg,coarseImg,filterH,method);  convoluteRows(tempImg,horizontalImg,filterG,method);  convoluteLines(sumImg,tempImg,filterH,method);  tempImg=new Image(verticalImg.getWidth(),sumImg.getHeight());  convoluteRows(tempImg,verticalImg,filterH,method);  convoluteRows(tempImg,diagonalImg,filterG,method);  convoluteLines(sumImg,tempImg,filterG,method);}  }
class C{  private void assertStartingValues(final VM vm){  assertEquals(0,getTotalCompressionTimeOnVm(vm,null));  assertEquals(0,getTotalCompressionTimeOnVm(vm,REGION_NAME));  assertEquals(0,getTotalCompressionTimeOnVm(vm,REGION_NAME_2));  assertEquals(0,getTotalDecompressionTimeOnVm(vm,null));  assertEquals(0,getTotalDecompressionTimeOnVm(vm,REGION_NAME));  assertEquals(0,getTotalDecompressionTimeOnVm(vm,REGION_NAME_2));  assertEquals(0,getTotalCompressionsOnVm(vm,null));  assertEquals(0,getTotalCompressionsOnVm(vm,REGION_NAME));  assertEquals(0,getTotalCompressionsOnVm(vm,REGION_NAME_2));  assertEquals(0,getTotalDecompressionsOnVm(vm,null));  assertEquals(0,getTotalDecompressionsOnVm(vm,REGION_NAME));  assertEquals(0,getTotalDecompressionsOnVm(vm,REGION_NAME_2));  assertEquals(0,getTotalPreCompressedBytesOnVm(vm,null));  assertEquals(0,getTotalPreCompressedBytesOnVm(vm,REGION_NAME));  assertEquals(0,getTotalPreCompressedBytesOnVm(vm,REGION_NAME_2));  assertEquals(0,getTotalPostCompressedBytesOnVm(vm,null));  assertEquals(0,getTotalPostCompressedBytesOnVm(vm,REGION_NAME));  assertEquals(0,getTotalPostCompressedBytesOnVm(vm,REGION_NAME_2));}  }
class C{  private double query(double quantile){  if (samples.isEmpty()) {    throw new IllegalStateException("no data in estimator");  }  int rankMin=0;  int desired=(int)(quantile * count);  ListIterator<SampleItem> it=samples.listIterator();  SampleItem next=it.next();  for (int i=1; i < samples.size(); i++) {    final SampleItem prev=next;    next=it.next();    rankMin+=prev.g;    if (rankMin + next.g + next.delta > desired + (allowableError(i) / 2)) {      return prev.value;    }  }  return samples.get(samples.size() - 1).value;}  }
class C{  public boolean isLifo(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_Lifo) && COSTELEMENTTYPE_Material.equals(getCostElementType());}  }
class C{  public void paintPanelBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void disconnect(){  Log.i("Device " + this.name + ": Disconnection request received.");  closeConnection();}  }
class C{  public ParallelClient(){  initialize();}  }
class C{  @Override public void onViewCreated(View view,Bundle savedInstanceState){  super.onViewCreated(view,savedInstanceState);  View parent=getView();  if (null == mParentLoadingView) {    while ((null != parent) && (null == mParentLoadingView)) {      mParentLoadingView=parent.findViewById(R.id.settings_loading_layout);      parent=(View)parent.getParent();    }  }  parent=getView();  if (null == mParentFragmentContainerView) {    while ((null != parent) && (null == mParentFragmentContainerView)) {      mParentFragmentContainerView=parent.findViewById(R.id.room_details_fragment_container);      parent=(View)parent.getParent();    }  }}  }
class C{  public static Properties loadFromResource(String resName){  return loadFromResource(PropertyUtil.class,resName);}  }
class C{  private BusinessObjectDefinitionEntity createBusinessObjectDefinitionEntity(BusinessObjectDefinitionCreateRequest request,NamespaceEntity namespaceEntity,DataProviderEntity dataProviderEntity){  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=new BusinessObjectDefinitionEntity();  businessObjectDefinitionEntity.setNamespace(namespaceEntity);  businessObjectDefinitionEntity.setName(request.getBusinessObjectDefinitionName());  businessObjectDefinitionEntity.setDescription(request.getDescription());  businessObjectDefinitionEntity.setDataProvider(dataProviderEntity);  businessObjectDefinitionEntity.setDisplayName(request.getDisplayName());  if (!CollectionUtils.isEmpty(request.getAttributes())) {    List<BusinessObjectDefinitionAttributeEntity> attributeEntities=new ArrayList<>();    businessObjectDefinitionEntity.setAttributes(attributeEntities);    for (    Attribute attribute : request.getAttributes()) {      BusinessObjectDefinitionAttributeEntity attributeEntity=new BusinessObjectDefinitionAttributeEntity();      attributeEntities.add(attributeEntity);      attributeEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);      attributeEntity.setName(attribute.getName());      attributeEntity.setValue(attribute.getValue());    }  }  return businessObjectDefinitionDao.saveAndRefresh(businessObjectDefinitionEntity);}  }
class C{  public boolean isMaxValueSet(){  return mMaxValue != -MathHelper.NULL_VALUE;}  }
class C{  public void addLayer(final LayerDefinition layer){  layer.setMap(this);  layers.add(layer);}  }
class C{  @Override public boolean isResetted(){  return (x == 0.0f && y == 0.0f && z == 0.0f);}  }
class C{  public String attributeSpecsTipText(){  return "Specifications of the new attributes to create";}  }
class C{  @Override public void init() throws ServletException {}  }
class C{  public static Map<String,Object> sendOrderChangeNotification(DispatchContext ctx,Map<String,? extends Object> context){  return sendOrderNotificationScreen(ctx,context,"PRDS_ODR_CHANGE");}  }
class C{  public String explain(){  StringBuilder r=new StringBuilder();  r.append(getName() + ":\n");  int i=0;  for (  BytecodeInstruction instruction : instructions) {    i++;    r.append("\t" + i + ")\t"+ instruction.toString()+ "\n");  }  return r.toString();}  }
class C{  protected static void addHost(Host host){  hosts.add(host);}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  if (field != null) {    return vset;  }  if (bind(env,ctx)) {    vset=get(env,ctx,vset);    ctx.field.getClassDefinition().addDependency(field.getClassDeclaration());    if (implementation != null)     vset=implementation.checkValue(env,ctx,vset,exp);  }  return vset;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public ImmutableListMultimap<K,V> build(){  return (ImmutableListMultimap<K,V>)super.build();}  }
class C{  public UserPresence(State state){  this.state=state;  this.lastSeen=0;}  }
class C{  public static <T>boolean removeIf(Iterable<T> iterable,Predicate<? super T> predicate){  if (iterable instanceof MutableCollection) {    return ((MutableCollection<T>)iterable).removeIf(predicate);  }  if (iterable instanceof ArrayList) {    return ArrayListIterate.removeIf((ArrayList<T>)iterable,predicate);  }  if (iterable instanceof List) {    return ListIterate.removeIf((List<T>)iterable,predicate);  }  if (iterable != null) {    return IterableIterate.removeIf(iterable,predicate);  }  throw new IllegalArgumentException("Cannot perform a remove on null");}  }
class C{  private static DimensionalNode generate(int d,int maxD,IMultiPoint points[],int left,int right){  if (right < left) {    return null;  }  if (right == left) {    return new SmallProblemsKDNode(d,points[left]);  }  int m=1 + (right - left) / 2;  Selection.select(points,m,left,right,comparators[d]);  SmallProblemsKDNode dm=new SmallProblemsKDNode(d,points[left + m - 1]);  if (++d > maxD) {    d=1;  }  dm.setBelow(generate(d,maxD,points,left,left + m - 2));  dm.setAbove(generate(d,maxD,points,left + m,right));  return dm;}  }
class C{  @SuppressWarnings("rawtypes") public static void createSourceDocumentContent(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();    String entryName=normalizeEntryName(entry);    if (entryName.startsWith(SOURCE)) {      String fileName=FilenameUtils.getName(entryName);      de.tudarmstadt.ukp.clarin.webanno.model.SourceDocument sourceDocument=aRepository.getSourceDocument(aProject,fileName);      File sourceFilePath=aRepository.getSourceDocumentFile(sourceDocument);      FileUtils.copyInputStreamToFile(zip.getInputStream(entry),sourceFilePath);      LOG.info("Imported source document content for source document [" + sourceDocument.getId() + "] in project ["+ aProject.getName()+ "] with id ["+ aProject.getId()+ "]");    }  }}  }
class C{  public static AlbumImpl createLocal(Context context,String name){  return new AlbumImpl(new ScreenshotDirectories(context),name,null);}  }
class C{  static private IV decodeInlineURI(final byte flags,final byte[] key,int o){  if (AbstractIV.isExtension(flags)) {    final IV namespaceIV=decodeFromOffset(key,o);    o+=namespaceIV.byteLength();    final AbstractLiteralIV<BigdataLiteral,?> localNameIV=(AbstractLiteralIV<BigdataLiteral,?>)decodeFromOffset(key,o);    final IV iv=new URIExtensionIV<BigdataURI>(localNameIV,namespaceIV);    return iv;  }  final DTE dte=AbstractIV.getDTE(flags);switch (dte) {case XSDByte:{      final byte x=key[o];      return new VocabURIByteIV<BigdataURI>(x);    }case XSDShort:{    final short x=KeyBuilder.decodeShort(key,o);    return new VocabURIShortIV<BigdataURI>(x);  }case XSDString:{  final StringBuilder sb=new StringBuilder();  final String str1;  final int nbytes;  try {    nbytes=IVUnicode.decode(new ByteArrayInputStream(key,o,key.length - o),sb);    str1=sb.toString();  } catch (  IOException e) {    throw new RuntimeException(e);  }  return new FullyInlineURIIV<BigdataURI>(new URIImpl(str1),1 + nbytes);}default :throw new UnsupportedOperationException("dte=" + dte);}}  }
class C{  protected boolean processExcludes(T value,boolean include){  if (excludesCount > 0) {    if (include) {      for (      Rule<R> rule : rules) {        if (rule.include) {          continue;        }        if (inExRuleMatcher.accept(value,rule.value,false)) {          include=false;          break;        }      }    }  }  return include;}  }
class C{  protected void addVisitedLocations(){  while (mDestinations.hasNext() && mDestinations.isInPast(SantaPreferences.getCurrentTime())) {    Destination destination=mDestinations.getCurrent();    mMapFragment.addLocation(destination);    mAdapter.addDestination(false,destination,false);    mDestinations.moveToNext();  }  mAdapter.notifyDataSetChanged();}  }
class C{  private void read(){  data.reset();  data.readByte();  data.readShortInt();  parent=data.readInt();  logKey=data.readInt();  nextTrunk=data.readInt();  pageCount=data.readShortInt();  pageIds=new int[pageCount];  for (int i=0; i < pageCount; i++) {    pageIds[i]=data.readInt();  }}  }
class C{  public MinimalAnalyzer(){  super(Lucene.version);}  }
class C{  public synchronized void reset(){  this.oldDataList.clear();  this.newDataList.clear();  this.lastNewData=null;  this.lastOldData=null;  isInvoked=false;}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.SYMBOL_TABLE_ENTRY_ORIGINAL;}  }
class C{  private void reconcileClusters(Datacenter source,VcenterDataCenter target,List<Cluster> oldClusters,List<Cluster> newClusters){  List<ClusterHolder> allClusters=new ArrayList<ClusterHolder>();  List<ClusterComputeResource> vcClusters=vcenterAPI.listClusters(source);  for (  ClusterComputeResource vcCluster : vcClusters) {    allClusters.add(new ClusterHolder(vcCluster,vcCluster.getHosts().length));  }  Collections.sort(allClusters);  for (  ClusterHolder clusterHolder : allClusters) {    ClusterComputeResource vcCluster=clusterHolder.cluster;    String vcenterClusterId=vcCluster.getMOR().getVal();    info("processing cluster %s %s",vcCluster.getName(),vcenterClusterId);    Cluster targetCluster=findCluster(oldClusters,vcCluster,target.getId());    if (targetCluster == null) {      info("creating new cluster %s",vcCluster.getName());      targetCluster=getOrCreateCluster(oldClusters,vcCluster.getName());    }    targetCluster.setLabel(vcCluster.getName());    targetCluster.setTenant(target.getTenant());    targetCluster.setVcenterDataCenter(target.getId());    targetCluster.setExternalId(vcenterClusterId);    save(targetCluster);    newClusters.add(targetCluster);  }}  }
class C{  public void addZoningMapEntry(String initiator,StringSet storagePorts){  if (this._zoningMap == null) {    this._zoningMap=new StringSetMap();  }  this._zoningMap.put(initiator,storagePorts);}  }
class C{  public static void renameDatasource(String sourcePath,String oldDsName,String newDsName) throws IOException {  RrdDb rrd=new RrdDb(sourcePath);  try {    if (rrd.containsDs(oldDsName)) {      Datasource datasource=rrd.getDatasource(oldDsName);      datasource.setDsName(newDsName);    } else {      throw new IllegalArgumentException("Could not find datasource [" + oldDsName + "] in file "+ sourcePath);    }  }  finally {    rrd.close();  }}  }
class C{  private void returnJson400(RequestAndResponse requestAndResponse,Errors errors) throws ServletException, IOException {  requestAndResponse.setResponseContentTypeJson();  requestAndResponse.response.setStatus(HttpServletResponse.SC_BAD_REQUEST);  requestAndResponse.print("{");  errorsToJson(errors,requestAndResponse.response.getWriter());  requestAndResponse.print("}");}  }
class C{  public String toTsv(){  StringBuilder stringBuilder=new StringBuilder();  for (  Command command : mCommands) {    stringBuilder.append(escape(command.getPattern().toString()));    stringBuilder.append('\t');    stringBuilder.append(escape(command.getReplacement()));    if (command.getId() != null) {      stringBuilder.append('\t');      stringBuilder.append(escape(command.getId()));    }    for (    String arg : command.getArgs()) {      stringBuilder.append('\t');      stringBuilder.append(escape(arg));    }    stringBuilder.append('\n');  }  return stringBuilder.toString();}  }
class C{  public Property monthOfYear(){  return new Property(this,getChronology().monthOfYear());}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.212 -0500",hash_original_method="F897D0FECB8A8CC74BFA504858C91B42",hash_generated_method="20D805C70E663C57C461557042E0E3B3") public MinExpiresHeader createMinExpiresHeader(int minExpires) throws InvalidArgumentException {  if (minExpires < 0)   throw new InvalidArgumentException("bad minExpires " + minExpires);  MinExpires min=new MinExpires();  min.setExpires(minExpires);  return min;}  }
class C{  public void insert(final AbstractInsnNode insn){  ++size;  if (first == null) {    first=insn;    last=insn;  } else {    first.prev=insn;    insn.next=first;  }  first=insn;  cache=null;  insn.index=0;}  }
class C{  public void readMap(File file,MapBuilder builder){  try {    parseMap(createFileStream(file),builder);  } catch (  FileNotFoundException e) {    LOG.warning("File " + file + " does not exist.");  }catch (  Exception e) {    LOG.warning("The map could not be read. " + e);  }}  }
class C{  private Object writeReplace(){  return new SerializationProxy(this);}  }
class C{  public <T>Class<? extends T> lookupAnalysisClass(String className,Class<T> expectedType) throws ClassNotFoundException {  if (className.contains(".")) {    try {      return Class.forName(className).asSubclass(expectedType);    } catch (    ClassNotFoundException e) {      try {        return Class.forName(LUCENE_ANALYSIS_PACKAGE_PREFIX + className).asSubclass(expectedType);      } catch (      ClassNotFoundException e1) {        throw new ClassNotFoundException("Can't find class '" + className + "' or '"+ LUCENE_ANALYSIS_PACKAGE_PREFIX+ className+ "'");      }    }  }  final String analysisComponentName=ANALYSIS_COMPONENT_SUFFIX_PATTERN.matcher(className).replaceFirst("");  if (CharFilterFactory.class.isAssignableFrom(expectedType)) {    return CharFilterFactory.lookupClass(analysisComponentName).asSubclass(expectedType);  } else   if (TokenizerFactory.class.isAssignableFrom(expectedType)) {    return TokenizerFactory.lookupClass(analysisComponentName).asSubclass(expectedType);  } else   if (TokenFilterFactory.class.isAssignableFrom(expectedType)) {    return TokenFilterFactory.lookupClass(analysisComponentName).asSubclass(expectedType);  }  throw new ClassNotFoundException("Can't find class '" + className + "'");}  }
class C{  private void addBox(Box box){  this.modelBoxList.add(box);  List<Box> boxList=this.modelRendererBoxMap.get(box.modelRenderer);  if (boxList == null) {    boxList=new ArrayList<Box>();    this.modelRendererBoxMap.put(box.modelRenderer,boxList);  }  boxList.add(box);}  }
class C{  private void produce() throws ParseException {  if (!pending.isEmpty()) {    return;  }  if (!splitter.hasNext()) {    return;  }  Token<CssTokenType> t=splitter.next();  pending.add(t);  if (t.type == CssTokenType.PUNCTUATION && splitter.hasNext()) {    if ("!".equals(t.text)) {      Token<CssTokenType> t2=splitter.next();      while (t2 != null && (t2.type == CssTokenType.SPACE || t2.type == CssTokenType.COMMENT)) {        pending.add(t2);        t2=splitter.hasNext() ? splitter.next() : null;      }      if (null != t2) {        pending.add(t2);        if (t2.type == CssTokenType.IDENT && Strings.eqIgnoreCase("important",decodeCssIdentifier(t2.text))) {          reduce(CssTokenType.DIRECTIVE);        }      }    } else     if ("-".equals(t.text)) {      Token<CssTokenType> t2=splitter.next();      if (null != t2) {        pending.add(t2);        if (t2.type == CssTokenType.IDENT) {          reduce(CssTokenType.IDENT);        }      }    }  }}  }
class C{  public String sql_insertPreparedStatement(String vendorName,String catalogName,String schemaName,String tableName,ArrayList<String> columnNames){  return sql_insert(vendorName,catalogName,schemaName,tableName,columnNames,null);}  }
class C{  public static RecordEventForSubscriptionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  RecordEventForSubscriptionE object=new RecordEventForSubscriptionE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","recordEventForSubscription").equals(reader.getName())) {          object.setRecordEventForSubscription(RecordEventForSubscription.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private void initClient() throws RemotingException {  if (client != null) {    return;  }  logger.info("Lazy connect to " + url);  connectLock.lock();  try {    if (client != null) {      return;    }    this.client=Exchangers.connect(url,requestHandler);  }  finally {    connectLock.unlock();  }}  }
class C{  public static BigInteger createRandomInRange(BigInteger min,BigInteger max,SecureRandom random){  int cmp=min.compareTo(max);  if (cmp >= 0) {    if (cmp > 0) {      throw new IllegalArgumentException("'min' may not be greater than 'max'");    }    return min;  }  if (min.bitLength() > max.bitLength() / 2) {    return createRandomInRange(ZERO,max.subtract(min),random).add(min);  }  for (int i=0; i < MAX_ITERATIONS; ++i) {    BigInteger x=new BigInteger(max.bitLength(),random);    if (x.compareTo(min) >= 0 && x.compareTo(max) <= 0) {      return x;    }  }  return new BigInteger(max.subtract(min).bitLength() - 1,random).add(min);}  }
class C{  @Override public void onCreate(SQLiteDatabase database){  String createArrivedTableStatement="CREATE TABLE " + ARRIVED_MESSAGE_TABLE_NAME + "("+ MqttServiceConstants.MESSAGE_ID+ " TEXT PRIMARY KEY, "+ MqttServiceConstants.CLIENT_HANDLE+ " TEXT, "+ MqttServiceConstants.DESTINATION_NAME+ " TEXT, "+ MqttServiceConstants.PAYLOAD+ " BLOB, "+ MqttServiceConstants.QOS+ " INTEGER, "+ MqttServiceConstants.RETAINED+ " TEXT, "+ MqttServiceConstants.DUPLICATE+ " TEXT, "+ MTIMESTAMP+ " INTEGER"+ ");";  traceHandler.traceDebug(TAG,"onCreate {" + createArrivedTableStatement + "}");  try {    database.execSQL(createArrivedTableStatement);    traceHandler.traceDebug(TAG,"created the table");  } catch (  SQLException e) {    traceHandler.traceException(TAG,"onCreate",e);    throw e;  }}  }
class C{  protected List<E> executeQuery(IIndexQuery indexQuery,Comparator<? super E> comparator,int limit,boolean useForkJoin){  return this.executeQuery(indexQuery,null,comparator,limit,useForkJoin);}  }
class C{  public static Script dmlFromUrl(URL scriptUrl){  return scriptFromUrl(scriptUrl,ScriptType.DML);}  }
class C{  String applyLineEndings(String unix,File file){  String ending=lineEndingPolicy.getEndingFor(file);  if (!ending.equals(LineEnding.UNIX.str())) {    return unix.replace(LineEnding.UNIX.str(),ending);  } else {    return unix;  }}  }
class C{  public static boolean isEmpty(final String value){  return EMPTY_STRING.equals(value);}  }
class C{  public final int length(){  return length;}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  public DoubleLinkedList<IMove> validMoves(FreeCellNode node){  DoubleLinkedList<IMove> list=new DoubleLinkedList<IMove>();  IMove move=null;  for (int i=3; i >= 0; i--) {    if (node.freeEncoding[i] > 0) {      move=new FreeToFoundationMove(node.freeEncoding[i]);      if (move.isValid(node)) {        list.insert(move);      }    }  }  for (int i=0; i < 8; i++) {    if (node.cols[i].num == 0)     continue;    move=new ColumnToFoundationMove(i);    if (move.isValid(node)) {      list.insert(move);    }  }  for (short c=0; c < 8; c++) {    for (short i=0; i < 4; i++) {      move=new FreeToColumnMove(c,node.freeEncoding[i]);      if (move.isValid(node)) {        list.insert(move);      }    }  }  for (short c=0; c < 8; c++) {    if (node.cols[c].num == 0)     continue;    int card=node.cols[c].cards[node.cols[c].num - 1];    int suit=((card - 1) % 4);    int rank=1 + ((card - 1) >> 2);    boolean isBlackCard=(suit == FreeCellNode.CLUBS || suit == FreeCellNode.SPADES);    for (int nc=1; nc <= node.cols[c].num; nc++) {      if (nc > 1) {        int nextCard=node.cols[c].cards[node.cols[c].num - nc];        int nextSuit=((nextCard - 1) % 4);        int nextRank=1 + ((nextCard - 1) >> 2);        boolean isNextBlackCard=(nextSuit == FreeCellNode.CLUBS || nextSuit == FreeCellNode.SPADES);        if (isNextBlackCard == isBlackCard) {          break;        }        if (nextRank != rank + 1) {          break;        }        isBlackCard=isNextBlackCard;        rank=nextRank;      }      boolean alreadyMovedToBlank=false;      for (int t=0; t < 8; t++) {        if (c == t)         continue;        if (node.cols[c].num == nc && node.cols[t].num == 0) {          continue;        }        move=new ColumnToColumnMove(c,t,nc);        if (move.isValid(node)) {          if (node.cols[t].num == 0 && alreadyMovedToBlank) {          } else {            list.insert(move);          }          if (node.cols[t].num == 0) {            alreadyMovedToBlank=true;          }        }      }    }  }  for (int i=0; i < 8; i++) {    if (node.cols[i].num == 0)     continue;    move=new ColumnToFreeMove(i);    if (move.isValid(node)) {      list.insert(move);    }  }  return list;}  }
class C{  public void testColdDeployExpandedWar(){  java.io.File warFile=new java.io.File("target/test-artifacts/simple-war");  WAR war=(WAR)factory.createDeployable("jonas4x",warFile.getAbsolutePath(),DeployableType.WAR);  war.setContext("testExpandedWarContext");  setupAdminColdDeployment();  deployer.deploy(war);  assertFalse(fileHandler.exists(deployer.getDeployableDir(war) + "/autoload/testExpandedWar"));  assertTrue(fileHandler.exists(deployer.getDeployableDir(war) + "/autoload/testExpandedWarContext"));}  }
class C{  public void keyPressed(KeyEvent e){synchronized (keyLock) {    keysDown.add(e.getKeyCode());  }}  }
class C{  public static Element firstChildElement(Element element){  if (element == null)   return null;  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE) {        Element childElement=(Element)node;        return childElement;      }    } while ((node=node.getNextSibling()) != null);  }  return null;}  }
class C{  public action_part action(){  return _action;}  }
class C{  public static void executeOn(Connection con,ExecutablePool pool,List events,int batchId,boolean isRetry){  AbstractOp op=null;  if (Version.GFE_651.compareTo(con.getWanSiteVersion()) >= 0) {    op=new GatewaySenderGFEBatchOpImpl(events,batchId,con.getDistributedSystemId(),isRetry);  } else {    op=new GatewaySenderGFEBatchOpImpl(events,batchId,con.getDistributedSystemId(),isRetry);  }  pool.executeOn(con,op,true);}  }
class C{  public int countTokens(){  int count=0;  boolean inToken=false;  for (int i=position, length=string.length(); i < length; i++) {    if (delimiters.indexOf(string.charAt(i),0) >= 0) {      if (returnDelimiters)       count++;      if (inToken) {        count++;        inToken=false;      }    } else {      inToken=true;    }  }  if (inToken)   count++;  return count;}  }
class C{  public DiscoverRequest(int objectId,int objectInstanceId,int resourceId){  this(new LwM2mPath(objectId,objectInstanceId,resourceId));}  }
class C{  public static void test_getResourceAsStream() throws IOException {  ClassLoader cl=TestMethods.class.getClassLoader();  InputStream in=cl.getResourceAsStream("test/Resource1.txt");  byte[] contents=readFully(in);  String s=new String(contents,"UTF-8");  assertSame("Muffins are tasty!\n",s.intern());}  }
class C{  public int peekChar() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int c=fCurrentEntity.ch[fCurrentEntity.position];  if (fCurrentEntity.isExternal()) {    return c != '\r' ? c : '\n';  } else {    return c;  }}  }
class C{  public static void viewPropertyStartCompat(ViewPropertyAnimator animator){  if (Build.VERSION.SDK_INT >= 14) {    animator.start();  }}  }
class C{  public MOEAD(Problem problem,int neighborhoodSize,WeightGenerator weightGenerator,Initialization initialization,Variation variation,double delta,double eta){  this(problem,neighborhoodSize,weightGenerator,initialization,variation,delta,eta,-1);}  }
class C{  @OnClick(R.id.search_button) void onSearchButtonClick(){  String query=searchEditText.getText().toString();  presenter.searchText(query);}  }
class C{  public SAXRecords process(double[] timeseries,int threadsNum,int slidingWindowSize,int paaSize,int alphabetSize,NumerosityReductionStrategy numRedStrategy,double normalizationThreshold) throws SAXException {  LOGGER.debug("Starting the parallel SAX");  NormalAlphabet na=new NormalAlphabet();  SAXProcessor sp=new SAXProcessor();  SAXRecords res=new SAXRecords(0);  executorService=Executors.newFixedThreadPool(threadsNum);  LOGGER.debug("Created thread pool of {} threads",threadsNum);  NumerosityReductionStrategy nrStrategy=NumerosityReductionStrategy.fromValue(numRedStrategy.index());  if (NumerosityReductionStrategy.MINDIST.equals(nrStrategy)) {    nrStrategy=NumerosityReductionStrategy.NONE;  }  ExecutorCompletionService<HashMap<Integer,char[]>> completionService=new ExecutorCompletionService<HashMap<Integer,char[]>>(executorService);  int totalTaskCounter=0;  final long tstamp=System.currentTimeMillis();  int evenIncrement=timeseries.length / threadsNum;  if (evenIncrement <= slidingWindowSize) {    LOGGER.warn("Unable to run with {} threads. Rolling back to single-threaded implementation.",threadsNum);    return sp.ts2saxViaWindow(timeseries,slidingWindowSize,paaSize,na.getCuts(alphabetSize),nrStrategy,normalizationThreshold);  }  int reminder=timeseries.length % threadsNum;  int firstChunkSize=evenIncrement + reminder;  LOGGER.debug("data size {}, evenIncrement {}, reminder {}, firstChunkSize {}",timeseries.length,evenIncrement,reminder,firstChunkSize);{    int firstChunkStart=0;    int firstChunkEnd=(firstChunkSize - 1) + slidingWindowSize;    final SAXWorker job0=new SAXWorker(tstamp + totalTaskCounter,timeseries,firstChunkStart,firstChunkEnd,slidingWindowSize,paaSize,alphabetSize,nrStrategy,normalizationThreshold);    completionService.submit(job0);    LOGGER.debug("submitted first chunk job {}",tstamp);    totalTaskCounter++;  }  while (totalTaskCounter < threadsNum - 1) {    int intermediateChunkStart=(firstChunkSize - 1) + (totalTaskCounter - 1) * evenIncrement + 1;    int intermediateChunkEnd=(firstChunkSize - 1) + (totalTaskCounter * evenIncrement) + slidingWindowSize;    final SAXWorker job=new SAXWorker(tstamp + totalTaskCounter,timeseries,intermediateChunkStart,intermediateChunkEnd,slidingWindowSize,paaSize,alphabetSize,nrStrategy,normalizationThreshold);    completionService.submit(job);    LOGGER.debug("submitted intermediate chunk job {}",(tstamp + totalTaskCounter));    totalTaskCounter++;  }{    int lastChunkStart=timeseries.length - evenIncrement;    int lastChunkEnd=timeseries.length;    final SAXWorker jobN=new SAXWorker(tstamp + totalTaskCounter,timeseries,lastChunkStart,lastChunkEnd,slidingWindowSize,paaSize,alphabetSize,nrStrategy,normalizationThreshold);    completionService.submit(jobN);    LOGGER.debug("submitted last chunk job {}",(tstamp + totalTaskCounter));    totalTaskCounter++;  }  executorService.shutdown();  int[] completedChunks=new int[threadsNum];  try {    while (totalTaskCounter > 0) {      if (Thread.currentThread().isInterrupted()) {        LOGGER.info("Parallel SAX being interrupted, returning NULL!");        return null;      }      Future<HashMap<Integer,char[]>> finished=completionService.poll(24,TimeUnit.HOURS);      if (null == finished) {        LOGGER.info("Breaking POLL loop after 24 HOURS of waiting...");        break;      } else {        HashMap<Integer,char[]> chunkRes=finished.get();        int idx=(int)(Long.parseLong(String.valueOf(chunkRes.get(-1))) - tstamp);        LOGGER.debug("job with stamp {} of chunk {} has finished",chunkRes.get(-1),idx);        LOGGER.debug("current completion status: {} completion flag: {}",Arrays.toString(completedChunks),COMPLETED_FLAG);        chunkRes.remove(-1);        if (0 == res.size() || nrStrategy.equals(NumerosityReductionStrategy.NONE)) {          res.addAll(chunkRes);          completedChunks[idx]=COMPLETED_FLAG;          if (nrStrategy.equals(NumerosityReductionStrategy.NONE)) {            LOGGER.debug("merged in as is because the NR strategy is NONE");          } else {            LOGGER.debug("merged in as is because the result id empty");          }        } else {          LOGGER.debug("processing chunk {}; res has results already...",idx);          if (0 == idx) {            completedChunks[0]=COMPLETED_FLAG;            if (completedChunks[1] == COMPLETED_FLAG) {              LOGGER.debug("this is the very first chunk, merging the tail only");              int chunkTailIndex=Collections.max(chunkRes.keySet());              String tailStr=String.valueOf(chunkRes.get(chunkTailIndex));              int resultHeadIndex=res.getMinIndex();              SAXRecord resultHead=res.getByIndex(resultHeadIndex);              String headStr=String.valueOf(resultHead.getPayload());              LOGGER.debug("first index in the res {} for {}, last index in head {} for {}",resultHeadIndex,headStr,chunkTailIndex,headStr);              if (nrStrategy.equals(NumerosityReductionStrategy.EXACT) && headStr.equalsIgnoreCase(tailStr)) {                LOGGER.debug("res head {} at {} is dropped in favor of head tail {} at {}",headStr,resultHeadIndex,tailStr,chunkTailIndex);                res.dropByIndex(resultHeadIndex);              }            } else {              LOGGER.debug("this is the very first chunk, but second is not yet in the results, merging all in");            }            res.addAll(chunkRes);          } else           if (threadsNum - 1 == idx) {            completedChunks[idx]=COMPLETED_FLAG;            if (completedChunks[idx - 1] == COMPLETED_FLAG) {              LOGGER.debug("this is the very last chunk, merging the head only");              int chunkHeadIndex=Collections.min(chunkRes.keySet());              String headStr=String.valueOf(chunkRes.get(chunkHeadIndex));              int resultTailIndex=res.getMaxIndex();              SAXRecord resTail=res.getByIndex(resultTailIndex);              String resStr=String.valueOf(resTail.getPayload());              LOGGER.debug("last index in the res {} for {}, first index in the tail {} for {}",resultTailIndex,resStr,chunkHeadIndex,headStr);              if (nrStrategy.equals(NumerosityReductionStrategy.EXACT) && resStr.equalsIgnoreCase(headStr)) {                LOGGER.debug("chunk head {} at {} is dropped in favor of res tail {} at {}",headStr,chunkHeadIndex,resStr,resultTailIndex);                chunkRes.remove(chunkHeadIndex);              }            } else {              LOGGER.debug("this is the very last chunk, but previous is not yet in the results, merging all in");            }            res.addAll(chunkRes);          } else {            completedChunks[idx]=COMPLETED_FLAG;            LOGGER.debug("processing chunk {}",idx);            if (completedChunks[idx - 1] == COMPLETED_FLAG) {              LOGGER.debug("previous chunk was completed, merging in");              int chunkHeadIndex=Collections.min(chunkRes.keySet());              String headStr=String.valueOf(chunkRes.get(chunkHeadIndex));              int tmpIdx=chunkHeadIndex;              while (null == res.getByIndex(tmpIdx)) {                tmpIdx--;              }              int resultTailIndex=tmpIdx;              SAXRecord resTail=res.getByIndex(resultTailIndex);              String resStr=String.valueOf(resTail.getPayload());              LOGGER.debug("last index in the res {} for {}, first index in the chunk {} for {}",resultTailIndex,resStr,chunkHeadIndex,headStr);              if (nrStrategy.equals(NumerosityReductionStrategy.EXACT) && resStr.equalsIgnoreCase(headStr)) {                LOGGER.debug("chunk head {} at {} is dropped in favor of res tail {} at {}",headStr,chunkHeadIndex,resStr,resultTailIndex);                chunkRes.remove(chunkHeadIndex);              }            }            if (completedChunks[idx + 1] == COMPLETED_FLAG) {              LOGGER.debug("next chunk was completed, merging the tail");              int chunkTailIdx=Collections.max(chunkRes.keySet());              String tailStr=String.valueOf(chunkRes.get(chunkTailIdx));              int tmpIdx=chunkTailIdx;              while (null == res.getByIndex(tmpIdx)) {                tmpIdx++;              }              int resultHeadIndex=tmpIdx;              SAXRecord resultHead=res.getByIndex(resultHeadIndex);              String headStr=String.valueOf(resultHead.getPayload());              LOGGER.debug("last index in the res {} for {}, first index in the chunk {} for {}",resultHeadIndex,headStr,chunkTailIdx,headStr);              if (nrStrategy.equals(NumerosityReductionStrategy.EXACT) && headStr.equalsIgnoreCase(tailStr)) {                LOGGER.debug("chunk head {} at {} is dropped in favor of res tail {} at {}",headStr,resultHeadIndex,tailStr,chunkTailIdx);                res.dropByIndex(resultHeadIndex);              }            }            res.addAll(chunkRes);          }        }      }      totalTaskCounter--;    }  } catch (  InterruptedException e) {    LOGGER.error("Error while waiting results.",e);    this.cancel();  }catch (  Exception e) {    LOGGER.error("Error while waiting results.",e);  } finally {    try {      if (!executorService.awaitTermination(1,TimeUnit.HOURS)) {        executorService.shutdownNow();        if (!executorService.awaitTermination(30,TimeUnit.MINUTES)) {          System.err.println("Pool did not terminate... FATAL ERROR");          throw new RuntimeException("Parallel SAX pool did not terminate... FATAL ERROR");        }      }    } catch (    InterruptedException ie) {      LOGGER.error("Error while waiting interrupting.",ie);      executorService.shutdownNow();      Thread.currentThread().interrupt();    }  }  if (NumerosityReductionStrategy.MINDIST.equals(numRedStrategy)) {    SAXRecords newRes=new SAXRecords();    ArrayList<Integer> keys=res.getAllIndices();    char[] oldStr=null;    for (    int i : keys) {      SAXRecord entry=res.getByIndex(i);      if (null != oldStr && sp.checkMinDistIsZero(entry.getPayload(),oldStr)) {        continue;      }      newRes.add(entry.getPayload(),i);      oldStr=entry.getPayload();    }    res=newRes;  }  return res;}  }
class C{  public ForceMergeRequest onlyExpungeDeletes(boolean onlyExpungeDeletes){  this.onlyExpungeDeletes=onlyExpungeDeletes;  return this;}  }
class C{  public boolean LT(Word w2){  return value.LT(w2.value);}  }
class C{  public void testLoggerWhenCallingGetContext(){  MockLogger logger=new MockLogger();  WAR war=new WAR("c:/test.war");  war.setLogger(logger);  war.getContext();  assertEquals(1,logger.severities.size());  assertEquals("debug",logger.severities.get(0));  assertEquals("Parsed web context = [test]",logger.messages.get(0));  assertEquals("org.codehaus.cargo.container.deployable.WAR",logger.categories.get(0));}  }
class C{  public H264Stream(int cameraId) throws IOException {  super(cameraId);  setVideoEncoder(MediaRecorder.VideoEncoder.H264);  mPacketizer=new H264Packetizer();}  }
class C{  @Override public Long llen(final String key){  checkIsInMultiOrPipeline();  client.llen(key);  return client.getIntegerReply();}  }
class C{  public IPv4AddressValidator(@NonNull final CharSequence errorMessage){  super(errorMessage,REGEX);}  }
class C{  public final double degreesPerPixel(){  double degPerPix=_fovY / _height;  return (degPerPix / magFactor[magIndex]);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.YIELD_EXPRESSION;}  }
class C{  public MavenDependency(Dependency annotation){  this.repoURL=annotation.mavenRepo();  this.groupID=annotation.groupId();  this.artifactID=annotation.artifactId();  this.version=annotation.version();  this.classifier=annotation.classifier();  this.ext=annotation.ext();}  }
class C{  @Override public int hotspotsLength(){  return mHotspots.size();}  }
class C{  public static Period parse(final String str){  TimeUnit units=null;  int index=-1;  if ((index=str.indexOf('d')) > 0 || (index=str.indexOf('D')) > 0) {    units=TimeUnit.Days;  } else   if ((index=str.indexOf('w')) > 0 || (index=str.indexOf('W')) > 0) {    units=TimeUnit.Weeks;  } else   if ((index=str.indexOf('m')) > 0 || (index=str.indexOf('M')) > 0) {    units=TimeUnit.Months;  } else   if ((index=str.indexOf('y')) > 0 || (index=str.indexOf('Y')) > 0) {    units=TimeUnit.Years;  }  QL.require(index != -1,"Invalid string passed to period parser");  final String intstr=str.substring(0,index).trim();  return new Period(Integer.parseInt(intstr),units);}  }
class C{  private static Document loadPrefsDoc(InputStream in) throws SAXException, IOException {  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  dbf.setIgnoringElementContentWhitespace(true);  dbf.setValidating(true);  dbf.setCoalescing(true);  dbf.setIgnoringComments(true);  try {    DocumentBuilder db=dbf.newDocumentBuilder();    db.setEntityResolver(new Resolver());    db.setErrorHandler(new EH());    return db.parse(new InputSource(in));  } catch (  ParserConfigurationException e) {    throw new AssertionError(e);  }}  }
class C{  public ElsaMaker singletons(Object... singletons){  this.singletons=singletons;  return this;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  SerializationHandler rhandler=transformer.getSerializationHandler();  try {    rhandler.startPrefixMapping(getPrefix(),getNamespace());    executeNSDecls(transformer);    rhandler.startElement(getNamespace(),getLocalName(),getRawName());  } catch (  SAXException se) {    throw new TransformerException(se);  }  TransformerException tException=null;  try {    super.execute(transformer);    if (null != m_avts) {      int nAttrs=m_avts.size();      for (int i=(nAttrs - 1); i >= 0; i--) {        AVT avt=(AVT)m_avts.get(i);        XPathContext xctxt=transformer.getXPathContext();        int sourceNode=xctxt.getCurrentNode();        String stringedValue=avt.evaluate(xctxt,sourceNode,this);        if (null != stringedValue) {          rhandler.addAttribute(avt.getURI(),avt.getName(),avt.getRawName(),"CDATA",stringedValue,false);        }      }    }    transformer.executeChildTemplates(this,true);  } catch (  TransformerException te) {    tException=te;  }catch (  SAXException se) {    tException=new TransformerException(se);  }  try {    rhandler.endElement(getNamespace(),getLocalName(),getRawName());  } catch (  SAXException se) {    if (tException != null)     throw tException; else     throw new TransformerException(se);  }  if (tException != null)   throw tException;  unexecuteNSDecls(transformer);  try {    rhandler.endPrefixMapping(getPrefix());  } catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  protected void runUpload(Integer numOfThreads,Boolean createNewVersion,Boolean force) throws Exception {  runUpload(numOfThreads,null,createNewVersion,force);}  }
class C{  @Override public MappedByteBuffer map(MapMode mode,long position,long size) throws IOException {  throw new IOException("Method is unsupported.");}  }
class C{  void m8(){  Iterable i=java.util.Collections.EMPTY_LIST;  empty2(i);}  }
class C{  public static void execute(ExecutablePool pool,String region,EventID eventId,Object callbackArg){  AbstractOp op=new ClearOpImpl(region,eventId,callbackArg);  pool.execute(op);}  }
class C{  public static void enrichLocation(JSONObject map){  String location=map.has("location") ? (String)map.get("location") : null;  if (location == null || location.length() == 0) {    String time_zone=map.has("time_zone") && map.get("time_zone") != JSONObject.NULL ? (String)map.get("time_zone") : null;    if (time_zone != null && time_zone.length() > 0) {      GeoMark loc=DAO.geoNames.analyse(time_zone,null,5,"");      if (loc != null && loc.getNames().contains(time_zone)) {        location=time_zone;        map.put("location",location);      }    }  }  if (location != null && location.length() > 0) {    String location_country=map.has("location_country") ? (String)map.get("location_country") : null;    String location_country_code=map.has("location_country_code") ? (String)map.get("location_country_code") : null;    Object location_point=map.has("location_point") ? map.get("location_point") : null;    Object location_mark=map.has("location") ? map.get("location") : null;    if (location_country == null || location_country.length() == 0 || location_country_code == null || location_country_code.length() == 0 || location_point == null || location_mark == null) {      String created_at=map.has("created_at") ? (String)map.get("created_at") : null;      int salt=created_at == null ? map.hashCode() : created_at.hashCode();      GeoMark loc=DAO.geoNames.analyse(location,null,5,Integer.toString(salt));      if (loc != null) {        String countryCode=loc.getISO3166cc();        if (countryCode != null && countryCode.length() > 0) {          String countryName=DAO.geoNames.getCountryName(countryCode);          map.put("location_country",countryName);          map.put("location_country_code",countryCode);        }        map.put("location_point",new double[]{loc.lon(),loc.lat()});        map.put("location_mark",new double[]{loc.mlon(),loc.mlat()});      } else {      }    }  }}  }
class C{  public SerialX10Light(String systemName,SerialTrafficController tc){  super(systemName,tc);  this.tc=tc;  maxDimStep=tc.getNumberOfIntensitySteps();}  }
class C{  protected Resource resolveRootDirResource(Resource original) throws IOException {  if (equinoxResolveMethod != null) {    URL url=original.getURL();    if (url.getProtocol().startsWith("bundle")) {      return new UrlResource((URL)ReflectionUtils.invokeMethod(equinoxResolveMethod,null,url));    }  }  return original;}  }
class C{  protected void sendEntriesToSwitch(DatapathId switchId){  IOFSwitch sw=switchService.getSwitch(switchId);  if (sw == null)   return;  String stringId=sw.getId().toString();  if ((entriesFromStorage != null) && (entriesFromStorage.containsKey(stringId))) {    Map<String,OFFlowMod> entries=entriesFromStorage.get(stringId);    List<String> sortedList=new ArrayList<String>(entries.keySet());    Collections.sort(sortedList,new FlowModSorter(stringId));    for (    String entryName : sortedList) {      OFFlowMod flowMod=entries.get(entryName);      if (flowMod != null) {        if (log.isDebugEnabled()) {          log.debug("Pushing static entry {} for {}",stringId,entryName);        }        writeFlowModToSwitch(sw,flowMod);      }    }  }}  }
class C{  static void sort(char[] a,int left,int right,char[] work,int workBase,int workLen){  if (right - left > COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR) {    int[] count=new int[NUM_CHAR_VALUES];    for (int i=left - 1; ++i <= right; count[a[i]]++)     ;    for (int i=NUM_CHAR_VALUES, k=right + 1; k > left; ) {      while (count[--i] == 0)       ;      char value=(char)i;      int s=count[i];      do {        a[--k]=value;      } while (--s > 0);    }  } else {    doSort(a,left,right,work,workBase,workLen);  }}  }
class C{  private void parseBombs(Element bombsTag,Entity entity){  if (!(entity instanceof Aero)) {    warning.append("Found a bomb but Entity is not a Fighter.\n");    return;  }  NodeList nl=bombsTag.getChildNodes();  for (int i=0; i < nl.getLength(); i++) {    Node currNode=nl.item(i);    if (currNode.getParentNode() != bombsTag) {      continue;    }    int nodeType=currNode.getNodeType();    if (nodeType == Node.ELEMENT_NODE) {      Element currEle=(Element)currNode;      String nodeName=currNode.getNodeName();      if (nodeName.equalsIgnoreCase(BOMB)) {        int[] bombChoices=((Aero)entity).getBombChoices();        String type=currEle.getAttribute(TYPE);        String load=currEle.getAttribute(LOAD);        if (type.length() > 0 && load.length() > 0) {          bombChoices[BombType.getBombTypeFromInternalName(type)]+=Integer.parseInt(load);          ((Aero)entity).setBombChoices(bombChoices);        }      }    } else {      continue;    }  }}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  selectionListeners.remove(listener);}  }
class C{  public static void main(String[] args) throws Exception {  Main main=new Main();  main.run();}  }
class C{  public boolean attemptAutoDiscover(){  try {    String current_path_full=new File(ConfigurationController.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath()).toString();    if (current_path_full.lastIndexOf("healthcheck.jar") == -1) {      System.out.println("Unable to auto discover healthcheck config.xml file. Prompting user.");      return false;    }    String base_path=current_path_full.substring(0,current_path_full.lastIndexOf("healthcheck.jar"));    String final_path=base_path + "config.xml";    if (canGetFile(final_path)) {      prefs.put("configurationPath",final_path);      return true;    } else {      System.out.println("Unable to auto discover healthcheck config.xml file. Prompting user.");      return false;    }  } catch (  Exception e) {    LOGGER.error("Exception during auto discovery",e);    return false;  }}  }
class C{  public static boolean connect(FileDescriptor fd,InetAddress inetAddress,int port) throws SocketException {  try {    return IoBridge.connect(fd,inetAddress,port,0);  } catch (  SocketTimeoutException ex) {    throw new AssertionError(ex);  }}  }
class C{  public static int bits2words(long numBits){  return (int)((numBits - 1) >> 6) + 1;}  }
class C{  public GeoDistanceBuilder geohash(String geohash){  if (this.point == null) {    this.point=new GeoPoint();  }  this.point.resetFromGeoHash(geohash);  return this;}  }
class C{  public final boolean levelCheck(int iter){  if (levelChecked >= iter) {    return true;  }  ;  levelChecked=iter;  boolean retVal=true;  for (int i=0; i < params.length; i++) {    if (params[i] != null) {      params[i].levelCheck(iter);    }    ;  }  ;  return this.body.levelCheck(iter) && retVal;}  }
class C{  public OctalIntLiteral createOctalIntLiteral(){  OctalIntLiteralImpl octalIntLiteral=new OctalIntLiteralImpl();  return octalIntLiteral;}  }
class C{  public void writePopulationAndAttributes(String inputFolder,String provinceName) throws IOException {  String path=inputFolder.endsWith("/") ? "" : "/";  File outputFolder=new File(inputFolder + path + provinceName+ path);  if (outputFolder.exists()) {    throw new IOException("The output folder already exists and will not be overwritten. First delete " + outputFolder.getAbsolutePath());  } else {    outputFolder.mkdirs();  }  writeHouseholds(outputFolder.getAbsolutePath());  writePopulation(outputFolder.getAbsolutePath());}  }
class C{  public void execute(File file,boolean recursive,String user,String password,boolean runQuiet) throws Exception {  String pathToJavaExe=getJavaExecutablePath();  this.quiet=runQuiet;  if (file.isDirectory() && recursive) {    for (    File f : file.listFiles()) {      execute(f,recursive,user,password,runQuiet);    }    return;  }  if (!file.getName().endsWith(Constants.SUFFIX_OLD_DATABASE_FILE)) {    return;  }  println("Migrating " + file.getName());  if (!OLD_H2_FILE.exists()) {    download(OLD_H2_FILE.getAbsolutePath(),DOWNLOAD_URL,CHECKSUM);  }  String url="jdbc:h2:" + file.getAbsolutePath();  url=url.substring(0,url.length() - Constants.SUFFIX_OLD_DATABASE_FILE.length());  exec(new String[]{pathToJavaExe,"-Xmx128m","-cp",OLD_H2_FILE.getAbsolutePath(),"org.h2.tools.Script","-script",TEMP_SCRIPT,"-url",url,"-user",user,"-password",password});  file.renameTo(new File(file.getAbsoluteFile() + ".backup"));  RunScript.execute(url,user,password,TEMP_SCRIPT,Constants.UTF8,true);  new File(TEMP_SCRIPT).delete();}  }
class C{  public static void println(Object self,PrintWriter out){  if (out == null) {    out=new PrintWriter(System.out);  }  out.println(InvokerHelper.toString(self));}  }
class C{  private synchronized void reset(){  guard();  try {    long lastTopVer=ctx.discovery().topologyVersion();    ClusterNode node=isOldest ? U.oldest(super.nodes(),null) : U.youngest(super.nodes(),null);    IgnitePredicate<ClusterNode> p=F.nodeForNodes(node);    state=new AgeClusterGroupState(node,p,lastTopVer);  }  finally {    unguard();  }}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  append(m_doc.createComment(new String(ch,start,length)));}  }
class C{  public QueryEngineHTTP createRemoteQueryExecution(Query query){  List<String> graphURIs=query.getGraphURIs();  return createRemoteQueryExecution(query,graphURIs);}  }
class C{  @Override public int size(){  return indexToSymbolMap.size();}  }
class C{  public boolean varIsDefined(String varName){  return varsDefined.contains(varName);}  }
class C{  public HTMLComponent(){  this(new DefaultDocumentRequestHandler());}  }
class C{  public static Point2D intersectParam(Point2D u0,Point2D v0,Point2D u1,Point2D v1){  double det=determinant2by2(v1,v0);  if (Double.isNaN(det) || det == 0) {    return null;  }  double x00=u0.getX();  double y00=u0.getY();  double x10=u1.getX();  double y10=u1.getY();  double x01=v0.getX();  double y01=v0.getY();  double x11=v1.getX();  double y11=v1.getY();  double s=(1 / det) * ((x00 - x10) * y01 - (y00 - y10) * x01);  double t=(1 / det) * -(-(x00 - x10) * y11 + (y00 - y10) * x11);  return new java.awt.geom.Point2D.Double(t,s);}  }
class C{  public void removeMovieSet(MovieSet movieSet){synchronized (root) {    MovieSetTreeNode node=(MovieSetTreeNode)nodeMap.get(movieSet);    int index=root.getIndex(node);    movieSet.removePropertyChangeListener(propertyChangeListener);    nodeMap.remove(movieSet);    for (    Movie movie : movieSet.getMovies()) {      nodeMap.remove(movie);      movie.removePropertyChangeListener(propertyChangeListener);    }    node.removeAllChildren();    node.removeFromParent();    TreeModelEvent event=new TreeModelEvent(this,root.getPath(),new int[]{index},new Object[]{node});    for (    TreeModelListener listener : listeners) {      listener.treeNodesRemoved(event);    }  }}  }
class C{  public static form createForm(String action){  form upload=new form(action,form.METHOD_POST,form.ENC_UPLOAD);  upload.addElement(new label("File").setFor("file"));  String textbtn="file";  String text="Browse";  input filebtn=new input(input.TYPE_FILE,textbtn,"  " + text);  filebtn.setSize(40);  filebtn.setID(text);  filebtn.setClass("filebtn");  upload.addElement(filebtn);  textbtn="upload";  text="Upload";  input submitbtn=new input(input.TYPE_SUBMIT,textbtn,"  " + text);  submitbtn.setID(text);  submitbtn.setClass("submitbtn");  upload.addElement(submitbtn);  return upload;}  }
class C{  public ServiceParameterException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @TargetApi(Build.VERSION_CODES.KITKAT) private static byte[] inflate(byte[] input,int start){  try {    try (InputStream inputStream=new ByteArrayInputStream(input,start,input.length - start)){      return ByteStreams.toByteArray(new InflaterInputStream(inputStream));    }   } catch (  IOException err) {    throw Throwables.propagate(err);  }}  }
class C{  public void initUIEventNS(String namespaceURIArg,String typeArg,boolean canBubbleArg,boolean cancelableArg,AbstractView viewArg,int detailArg){  initEventNS(namespaceURIArg,typeArg,canBubbleArg,cancelableArg);  this.view=viewArg;  this.detail=detailArg;}  }
class C{  public static LabelRef forSuccessor(final LIR lir,final AbstractBlockBase<?> block,final int suxIndex){  return new LabelRef(lir,block,suxIndex);}  }
class C{  public ExtractorException(Throwable t){  this(null,t,null);}  }
class C{  public int nodeHashCode(){  return (this.getClass().hashCode() + name.hashCode() + associatedTree);}  }
class C{  public Boolean isSmartCardAuthenticationEnabled(){  return smartCardAuthenticationEnabled;}  }
class C{  public XObject execute(XPathContext xctxt,int context) throws javax.xml.transform.TransformerException {  DTM dtm=xctxt.getDTM(context);  short nodeType=dtm.getNodeType(context);  if (m_whatToShow == DTMFilter.SHOW_ALL)   return m_score;  int nodeBit=(m_whatToShow & (0x00000001 << (nodeType - 1)));switch (nodeBit) {case DTMFilter.SHOW_DOCUMENT_FRAGMENT:case DTMFilter.SHOW_DOCUMENT:    return SCORE_OTHER;case DTMFilter.SHOW_COMMENT:  return m_score;case DTMFilter.SHOW_CDATA_SECTION:case DTMFilter.SHOW_TEXT:return m_score;case DTMFilter.SHOW_PROCESSING_INSTRUCTION:return subPartMatch(dtm.getNodeName(context),m_name) ? m_score : SCORE_NONE;case DTMFilter.SHOW_NAMESPACE:{String ns=dtm.getLocalName(context);return (subPartMatch(ns,m_name)) ? m_score : SCORE_NONE;}case DTMFilter.SHOW_ATTRIBUTE:case DTMFilter.SHOW_ELEMENT:{return (m_isTotallyWild || (subPartMatchNS(dtm.getNamespaceURI(context),m_namespace) && subPartMatch(dtm.getLocalName(context),m_name))) ? m_score : SCORE_NONE;}default :return SCORE_NONE;}}  }
class C{  public GraphType transpose(GraphType orig,GraphToolkit<GraphType,EdgeType,VertexType> toolkit){  GraphType trans=toolkit.createGraph();  for (Iterator<VertexType> i=orig.vertexIterator(); i.hasNext(); ) {    VertexType v=i.next();    VertexType dupVertex=toolkit.duplicateVertex(v);    dupVertex.setLabel(v.getLabel());    trans.addVertex(v);    m_origToTransposeMap.put(v,dupVertex);    m_transposeToOrigMap.put(dupVertex,v);  }  trans.setNumVertexLabels(orig.getNumVertexLabels());  for (Iterator<EdgeType> i=orig.edgeIterator(); i.hasNext(); ) {    EdgeType e=i.next();    VertexType transSource=m_origToTransposeMap.get(e.getTarget());    VertexType transTarget=m_origToTransposeMap.get(e.getSource());    EdgeType dupEdge=trans.createEdge(transSource,transTarget);    dupEdge.setLabel(e.getLabel());    toolkit.copyEdge(e,dupEdge);  }  trans.setNumEdgeLabels(orig.getNumEdgeLabels());  return trans;}  }
class C{  public int ignoredSize(){  return ignored.size();}  }
class C{  private static boolean lineCrossesSphere(double lon1,double lat1,double alt1,double lon2,double lat2,double alt2,double centerLon,double centerLat,double centerAlt,double radius){  double[] ecf1=XGeoProjectionUtils.llaToECF(lon1,lat1,alt1,null);  double[] ecf2=XGeoProjectionUtils.llaToECF(lon2,lat2,alt2,null);  double[] cntr=XGeoProjectionUtils.llaToECF(centerLon,centerLat,centerAlt,null);  final double dX=ecf2[0] - ecf1[0];  final double dY=ecf2[1] - ecf1[1];  final double dZ=ecf2[2] - ecf1[2];  final double fX=ecf1[0] - cntr[0];  final double fY=ecf1[1] - cntr[1];  final double fZ=ecf1[2] - cntr[2];  final double a=dX * dX + dY * dY + dZ * dZ;  final double b=2 * (fX * dX + fY * dY + fZ * dZ);  final double c=(fX * fX + fY * fY + fZ * fZ) - (radius * radius);  double discrim=(b * b) - (4 * a * c);  if (discrim < 0) {    return false;  }  discrim=StrictMath.sqrt(discrim);  final double a2=2 * a;  final double t1=(-b - discrim) / a2;  final double t2=(-b + discrim) / a2;  if ((t1 < 0 || t1 > 1)) {    return !(t2 < 0 || t2 > 1);  }  return true;}  }
class C{  public void closePopup(){  if (popup != null) {    popup.hide();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.INTERFACE_DEFINITION___NAME_1:    return getName_1();case UmplePackage.INTERFACE_DEFINITION___DEPEND_1:  return getDepend_1();case UmplePackage.INTERFACE_DEFINITION___INTERFACE_BODY_1:return getInterfaceBody_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected <T>List<T> createList(T[] elements){  if (elements != null) {    return Lists.newArrayList(elements);  } else {    return Lists.newArrayList();  }}  }
class C{  public TDoubleHashSet(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public boolean isRemovable(){  return mRemovable;}  }
class C{  public SQSTaskStatisticsStore(String queueName){  Region current=Regions.getCurrentRegion();  if (current != null) {    LOG.info("Assuming statistics queue is in region {}",current);    sqs.setEndpoint("sqs." + current.toString() + ".amazonaws.com");  }  try {    queueUrl=sqs.getQueueUrl(queueName).getQueueUrl();  } catch (  Exception e) {    LOG.error("Unable to initialize statistics store",e);  }  LOG.info("Sending statistics to SQS queue {}",queueName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:19.653 -0500",hash_original_method="2E387D6B5E2ABD0B7044442BD7493DDC",hash_generated_method="ADA45DDDF42A8F87AC7BE09AEC803F7A") @Override public final void normalize(){  Node next;  for (Node node=getFirstChild(); node != null; node=next) {    next=node.getNextSibling();    node.normalize();    if (node.getNodeType() == Node.TEXT_NODE) {      ((TextImpl)node).minimize();    }  }}  }
class C{  private Map<URI,Set<URI>> reverseDuples(Map<URI,Set<URI>> duples){  Map<URI,Set<URI>> reversed=new HashMap<URI,Set<URI>>();  for (  URI uri : duples.keySet()) {    for (    URI value : duples.get(uri)) {      if (!reversed.containsKey(value)) {        reversed.put(value,new HashSet<URI>());      }      reversed.get(value).add(uri);    }  }  return reversed;}  }
class C{  public void forwardEvent(EventType eventType,Object data){  dispatch(new AppEvent(eventType,data));}  }
class C{  public Boolean isAccessible(){  return accessible;}  }
class C{  public int[][] generateAllDistinctPerturbations(int n) throws Exception {  int numSets;  try {    numSets=MathsUtils.factorialCheckBounds(n);  } catch (  Exception e) {    throw new Exception("n! too large");  }  int[][] sets=new int[numSets][n];  int[] workingSet=new int[n];  Vector<Integer> availableChoices=new Vector<Integer>();  for (int i=0; i < n; i++) {    availableChoices.add(new Integer(i));  }  addToDistinctPerturbations(sets,n,0,workingSet,0,availableChoices);  return sets;}  }
class C{  @SuppressWarnings("nullness") @GwtIncompatible("java.io.ObjectOutputStream") public static <E extends Object>void writeMultiset(Multiset<E> multiset,ObjectOutputStream stream) throws IOException {  int entryCount=multiset.entrySet().size();  stream.writeInt(entryCount);  for (  Multiset.Entry<E> entry : multiset.entrySet()) {    stream.writeObject(entry.getElement());    stream.writeInt(entry.getCount());  }}  }
class C{  public BloomFilter2(){}  }
class C{  private static String[] toArray(List list){  return (String[])list.toArray(new String[list.size()]);}  }
class C{  @Override protected List<?> processEntities(String bodyText) throws ODataException {  throw new ODataNotImplementedException("Parsing the batch request for the entities is yet to be implemented.");}  }
class C{  @Override public String toString(){  return "None";}  }
class C{  public void addOption(T option,double weight){  if (weight < 0)   throw new IllegalArgumentException("Negative weight not allowed.");  options.add(option);  weights.add(weight);  weightSum+=weight;}  }
class C{  public static char[] join(char[]... arrays){  if (arrays.length == 0) {    return new char[0];  }  if (arrays.length == 1) {    return arrays[0];  }  int length=0;  for (  char[] array : arrays) {    length+=array.length;  }  char[] result=new char[length];  length=0;  for (  char[] array : arrays) {    System.arraycopy(array,0,result,length,array.length);    length+=array.length;  }  return result;}  }
class C{  public void close() throws IOException {  isClosed=true;  impl.close();}  }
class C{  @Inject DefaultSchedulingService(AlertService alertService,GlobalInterlockService globalInterlockService,UserService userService,ServiceManagementService serviceManagementRecordService,AuditService auditService,SystemConfiguration config){  super(config);  requireArgument(alertService != null,"Alert service cannot be null.");  requireArgument(globalInterlockService != null,"Global interlock service cannot be null.");  requireArgument(userService != null,"User service cannot be null.");  requireArgument(serviceManagementRecordService != null,"Service management record service cannot be null.");  requireArgument(auditService != null,"Audit service cannot be null.");  _alertService=alertService;  _globalInterlockService=globalInterlockService;  _userService=userService;  _serviceManagementRecordService=serviceManagementRecordService;  _auditService=auditService;}  }
class C{  public final int myGetId(){  return this.id;}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public static boolean isVnxVolume(Volume volume,DbClient dbClient){  StorageSystem storage=dbClient.queryObject(StorageSystem.class,volume.getStorageController());  return storage != null && storage.deviceIsType(Type.vnxblock);}  }
class C{  public static int compute1(int x){  int lo=16807 * (x & 0xFFFF);  int hi=16807 * (x >>> 16);  lo+=(hi & 0x7FFF) << 16;  if ((lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  lo+=hi >>> 15;  if (lo == 0 || (lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  return lo;}  }
class C{  public Record process(GenericData.Record record,String topic) throws Exception {  if (record != null && record.get("name") != null) {    final String name=record.get("name").toString();    if (name.equals(DALI_LIMITED_RETENTION_AUDITOR) || name.equals(DALI_AUTOPURGED_AUDITOR) || name.equals(DS_IGNORE_IDPC_AUDITOR)) {      Long timestamp=(Long)record.get("timestamp");      Map<String,String> metadata=StringUtil.convertObjectMapToStringMap(record.get("metadata"));      String hasError=metadata.get("HasError");      if (!hasError.equalsIgnoreCase("true")) {        String datasetPath=metadata.get("DatasetPath");        String datasetUrn=DATASET_URN_PREFIX + (datasetPath.startsWith("/") ? "" : "/") + datasetPath;        String ownerUrns=metadata.get("OwnerURNs");        DatasetInfoDao.updateKafkaDatasetOwner(datasetUrn,ownerUrns,DATASET_OWNER_SOURCE,timestamp);      }    }  }  return null;}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.FLOAT_LITERAL;}  }
class C{  public boolean equals(XObject obj2){  try {    if (XObject.CLASS_NODESET == obj2.getType()) {      return obj2.equals(this);    } else     if (XObject.CLASS_BOOLEAN == obj2.getType()) {      return bool() == obj2.bool();    } else     if (XObject.CLASS_NUMBER == obj2.getType()) {      return num() == obj2.num();    } else     if (XObject.CLASS_NODESET == obj2.getType()) {      return xstr().equals(obj2.xstr());    } else     if (XObject.CLASS_STRING == obj2.getType()) {      return xstr().equals(obj2.xstr());    } else     if (XObject.CLASS_RTREEFRAG == obj2.getType()) {      return xstr().equals(obj2.xstr());    } else {      return super.equals(obj2);    }  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }}  }
class C{  public void verContenidoCajaReencajadoExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  CotejoysignaturizacionForm frm=(CotejoysignaturizacionForm)form;  getInvocationStack(request).getLastClientInvocation().addParameters(frm.getMap());  IUnidadInstalacionVO uInstalacion=getGestionRelacionesEACRBI(request).getUIReencajadoById(frm.getIdCaja());  setInTemporalSession(request,TransferenciasConstants.UI_REENCAJADO_KEY,uInstalacion);  List udocs=getGestionRelacionesEACRBI(request).getUDocsByUIReencajado(frm.getIdCaja());  setInTemporalSession(request,TransferenciasConstants.LISTA_UDOCS_REENCAJADO_KEY,udocs);  setReturnActionFordward(request,mappings.findForward("contenido_caja_reencajado"));}  }
class C{  @Override public int runCommand(boolean mergeErrorIntoOutput,List<String> commands) throws IOException, InterruptedException {  setVerboseLog(CommandLineConversationMonitor.isVerboseLog());  setVerboseLogLevel(CommandLineConversationMonitor.getVerboseLogLevel());  ProcessBuilder pb=new ProcessBuilder(commands);  pb.redirectErrorStream(mergeErrorIntoOutput);  Map<String,String> retrievedEnvironment=pb.environment();  if (overrideAllEnvironment) {    retrievedEnvironment.clear();  }  if (environment != null) {    retrievedEnvironment.putAll(environment);  }  pb.directory(workingDirectory);  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Command Line: \n " + pb.command());  }  if (verboseLogLevel > 5) {    System.out.println(CommandLineConversationMonitor.getTimeNow() + " In CommandLineConversation: " + stepInstanceStepId);  }  Long getLockTime=System.currentTimeMillis();  Process process;  try {    if (CommandLineConversationMonitor.getBinaryRunDelay() > 0) {      CommandLineConversationMonitor.binaryRunLock.lock();      CommandLineConversationMonitor.simpleBinaryRunDelay(stepInstanceStepId);    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Start process in clc:  " + stepInstanceStepId);    }    Utilities.verboseLog(10,CommandLineConversationMonitor.getTimeNow() + " Start process in clc:  " + stepInstanceStepId);    process=pb.start();    Utilities.verboseLog(10,CommandLineConversationMonitor.getTimeNow() + " Process started in clc:  " + pb.command());  }  finally {    if (CommandLineConversationMonitor.getBinaryRunDelay() > 0) {      CommandLineConversationMonitor.binaryRunLock.unlock();    }  }  Long releaseLockTime=System.currentTimeMillis();  Long startuptime=System.currentTimeMillis() - releaseLockTime;  final StreamGobbler outputGobbler=new StreamGobbler(process.getInputStream(),outputFileHandle);  final StreamGobbler errorGobbler=new StreamGobbler(process.getErrorStream(),errorFileHandle);  errorGobbler.start();  outputGobbler.start();  Long startuptime2=System.currentTimeMillis() - releaseLockTime;  Long lockTime=releaseLockTime - getLockTime;  Long processCompleteStartUpTime=System.currentTimeMillis() - getLockTime;  if (verboseLogLevel > 5) {    System.out.println(CommandLineConversationMonitor.getTimeNow() + " Started process in clc:  " + stepInstanceStepId+ " startuptime:  "+ startuptime+ " ms"+ " startuptime2: "+ startuptime2+ " ms"+ " waiting and lock time : "+ processCompleteStartUpTime+ " ms"+ " locktime : "+ lockTime+ " ms");  }  if (commandInputStream != null) {    BufferedOutputStream bos=null;    try {      bos=new BufferedOutputStream(process.getOutputStream());      byte[] buf=new byte[BUFFER_SIZE];      int readLength;      while ((readLength=commandInputStream.read(buf)) > -1) {        bos.write(buf,0,readLength);      }    }  finally {      commandInputStream.close();      if (bos != null) {        bos.close();      }    }  }  exitStatus=process.waitFor();  while (outputGobbler.isStillRunning() || (!mergeErrorIntoOutput && errorGobbler.isStillRunning())) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("The command process " + commands + " is complete, however the output / error 'Gobblers' have not closed their streams yet.  Waiting...");    }    Thread.sleep(100);  }  if (exceptionThrownByGobbler != null) {    throw exceptionThrownByGobbler;  }  if (outputFileHandle == null) {    output=outputGobbler.getStreamContent();  }  if (mergeErrorIntoOutput || errorFileHandle != null) {    error=null;  } else {    error=errorGobbler.getStreamContent();  }  return exitStatus;}  }
class C{  private void writeAlignment(Alignment alignment,XMLWriter writer){  writer.writeText("");  writer.writeComment("The sequence alignment (each sequence refers to a taxon above).","ntax=" + alignment.getTaxonCount() + " nchar="+ alignment.getSiteCount());  if (options.samplePriorOnly) {    writer.writeComment("Null sequences generated in order to sample from the prior only.");  }  if (getAlignmentDataTypeDescription(alignment) != null) {    writer.writeOpenTag(AlignmentParser.ALIGNMENT,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,alignment.getId()),new Attribute.Default<String>(DataType.DATA_TYPE,getAlignmentDataTypeDescription(alignment))});  } else {    writer.writeOpenTag(AlignmentParser.ALIGNMENT,new Attribute.Default<String>(XMLParser.ID,alignment.getId()));    writer.writeIDref(DataType.DATA_TYPE,getAlignmentDataTypeIdref(alignment));  }  for (int i=0; i < alignment.getTaxonCount(); i++) {    Taxon taxon=alignment.getTaxon(i);    writer.writeOpenTag(SequenceParser.SEQUENCE);    writer.writeIDref(TaxonParser.TAXON,taxon.getId());    if (!options.samplePriorOnly) {      writer.writeText(alignment.getAlignedSequenceString(i));    } else {      writer.writeText(NULL_SEQUENCE);    }    writer.writeCloseTag(SequenceParser.SEQUENCE);  }  writer.writeCloseTag(AlignmentParser.ALIGNMENT);}  }
class C{  public static OfflinePageFreeUpSpaceDialog newInstance(OfflinePageBridge offlinePageBridge,OfflinePageFreeUpSpaceCallback callback){  assert offlinePageBridge != null;  OfflinePageFreeUpSpaceDialog dialog=new OfflinePageFreeUpSpaceDialog();  dialog.mOfflinePageBridge=offlinePageBridge;  dialog.mCallback=callback;  return dialog;}  }
class C{  private static void preloadClasses(){  LOGGER.info("Preloading classes ...");  StringIndexOutOfBoundsException.class.getClass();  LinkedBlockingQueue.class.getClass();  LOGGER.info("Preloading classes complete...");}  }
class C{  public void updatePlaylist(int oldPosition,int newPosition){  final ProviderIdentifier providerIdentifier=mPlaylist.getProvider();  try {    ProviderConnection connection=PluginsLookup.getDefault().getProvider(providerIdentifier);    if (connection != null) {      IMusicProvider binder=connection.getBinder();      if (binder != null) {        binder.onUserSwapPlaylistItem(oldPosition,newPosition,mPlaylist.getRef());      }    }  } catch (  RemoteException e) {    Log.e(TAG,"Error: " + e.getMessage());  }}  }
class C{  public static long abs(long a){  return (a ^ (a >> 63)) - (a >> 63);}  }
class C{  public int endPc(int nth){  ExceptionTableEntry e=(ExceptionTableEntry)entries.get(nth);  return e.endPc;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.286 -0500",hash_original_method="F3C86372B308CB7AC0FC99B1DB4B622C",hash_generated_method="683D8A9E5B30B40DB742F066FBD6598C") public static boolean isInfinite(float f){  return ((f) == 1);}  }
class C{  public static void addPollStatus(final Target target,final MgmtTarget targetRest){  final PollStatus pollStatus=target.getTargetInfo().getPollStatus();  if (pollStatus != null) {    final MgmtPollStatus pollStatusRest=new MgmtPollStatus();    pollStatusRest.setLastRequestAt(Date.from(pollStatus.getLastPollDate().atZone(ZoneId.systemDefault()).toInstant()).getTime());    pollStatusRest.setNextExpectedRequestAt(Date.from(pollStatus.getNextPollDate().atZone(ZoneId.systemDefault()).toInstant()).getTime());    pollStatusRest.setOverdue(pollStatus.isOverdue());    targetRest.setPollStatus(pollStatusRest);  }}  }
class C{  @Override public boolean onTouchEvent(MotionEvent ev){  return true;}  }
class C{  public boolean isSupported(String sql){  return true;}  }
class C{  public String toString(){  return "NotificationResult: earliest=" + getEarliestSequenceNumber() + "; next="+ getNextSequenceNumber()+ "; nnotifs="+ getTargetedNotifications().length;}  }
class C{  private synchronized void updateTimerTable(Integer notifID){  Object[] obj=timerTable.get(notifID);  Date date=(Date)obj[TIMER_DATE_INDEX];  Long period=(Long)obj[TIMER_PERIOD_INDEX];  Long nbOccurences=(Long)obj[TIMER_NB_OCCUR_INDEX];  Boolean fixedRate=(Boolean)obj[FIXED_RATE_INDEX];  TimerAlarmClock alarmClock=(TimerAlarmClock)obj[ALARM_CLOCK_INDEX];  if (period.longValue() != 0) {    if ((nbOccurences.longValue() == 0) || (nbOccurences.longValue() > 1)) {      date.setTime(date.getTime() + period.longValue());      obj[TIMER_NB_OCCUR_INDEX]=Long.valueOf(java.lang.Math.max(0L,(nbOccurences.longValue() - 1)));      nbOccurences=(Long)obj[TIMER_NB_OCCUR_INDEX];      if (isActive == true) {        if (fixedRate.booleanValue()) {          alarmClock=new TimerAlarmClock(this,date);          obj[ALARM_CLOCK_INDEX]=(Object)alarmClock;          timer.schedule(alarmClock,alarmClock.next);        } else {          alarmClock=new TimerAlarmClock(this,period.longValue());          obj[ALARM_CLOCK_INDEX]=(Object)alarmClock;          timer.schedule(alarmClock,alarmClock.timeout);        }      }      if (TIMER_LOGGER.isLoggable(Level.FINER)) {        TimerNotification notif=(TimerNotification)obj[TIMER_NOTIF_INDEX];        StringBuilder strb=new StringBuilder().append("update timer notification with:").append("\n\tNotification source = ").append(notif.getSource()).append("\n\tNotification type = ").append(notif.getType()).append("\n\tNotification ID = ").append(notifID).append("\n\tNotification date = ").append(date).append("\n\tNotification period = ").append(period).append("\n\tNotification nb of occurrences = ").append(nbOccurences).append("\n\tNotification executes at fixed rate = ").append(fixedRate);        TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"updateTimerTable",strb.toString());      }    } else {      if (alarmClock != null) {        alarmClock.cancel();      }      timerTable.remove(notifID);    }  } else {    if (alarmClock != null) {      alarmClock.cancel();    }    timerTable.remove(notifID);  }}  }
class C{  public synchronized boolean isModerator(){  return isModerator;}  }
class C{  public void selectRange(final CalendarDay firstDay,final CalendarDay lastDay){  clearSelection();  if (firstDay.isAfter(lastDay)) {    dispatchOnRangeSelected(lastDay,firstDay);  } else {    dispatchOnRangeSelected(firstDay,lastDay);  }}  }
class C{  private QueryWrapper processComparison(ComparisonExpression compareExp,QueryState state){  String field=getVariableName(compareExp.getLeft());  FieldAndType fat=getFieldAndType(field,state);  field=fat.getFieldName();  if (compareExp.getRight() instanceof QualifiedNameReference || compareExp.getRight() instanceof DereferenceExpression) {    state.addException("Matching two columns is not supported : " + compareExp);    return null;  }  Object value=getLiteralValue(compareExp.getRight(),state);  if (state.hasException())   return null;  QueryBuilder comparison=null;  String[] types=new String[state.getSources().size()];  for (int i=0; i < types.length; i++)   types[i]=state.getSources().get(i).getSource();  if (compareExp.getType() == ComparisonExpression.Type.EQUAL) {    if (field.equals(Heading.ID))     comparison=QueryBuilders.idsQuery(types).ids((String)value); else     if (field.equals(Heading.SEARCH))     comparison=QueryBuilders.queryStringQuery((String)value); else     if (value instanceof String)     comparison=queryForString(field,(String)value); else     comparison=QueryBuilders.termQuery(field,value);  } else   if (compareExp.getType() == ComparisonExpression.Type.GREATER_THAN_OR_EQUAL) {    comparison=QueryBuilders.rangeQuery(field).from(value);  } else   if (compareExp.getType() == ComparisonExpression.Type.LESS_THAN_OR_EQUAL) {    comparison=QueryBuilders.rangeQuery(field).to(value);  } else   if (compareExp.getType() == ComparisonExpression.Type.GREATER_THAN) {    comparison=QueryBuilders.rangeQuery(field).gt(value);  } else   if (compareExp.getType() == ComparisonExpression.Type.LESS_THAN) {    comparison=QueryBuilders.rangeQuery(field).lt(value);  } else   if (compareExp.getType() == ComparisonExpression.Type.NOT_EQUAL) {    if (field.equals(Heading.ID)) {      state.addException("Matching document _id using '<>' is not supported");      return null;    }    comparison=QueryBuilders.notQuery(QueryBuilders.termQuery(field,value));  }  ;  if (fat.getFieldType() == Types.REF)   return new QueryWrapper(comparison,field.split("\\.")[0]);  return new QueryWrapper(comparison);}  }
class C{  private long convertUPSToMGRS(String Hemisphere,Double Easting,Double Northing,long Precision){  double false_easting;  double false_northing;  double grid_easting;  double grid_northing;  int ltr2_low_value;  long[] letters=new long[MGRS_LETTERS];  double divisor;  int index;  long error_code=MGRS_NO_ERROR;  if (!AVKey.NORTH.equals(Hemisphere) && !AVKey.SOUTH.equals(Hemisphere))   error_code|=MGRS_HEMISPHERE_ERROR;  if ((Easting < MIN_EAST_NORTH) || (Easting > MAX_EAST_NORTH))   error_code|=MGRS_EASTING_ERROR;  if ((Northing < MIN_EAST_NORTH) || (Northing > MAX_EAST_NORTH))   error_code|=MGRS_NORTHING_ERROR;  if ((Precision < 0) || (Precision > MAX_PRECISION))   error_code|=MGRS_PRECISION_ERROR;  if (error_code == MGRS_NO_ERROR) {    divisor=Math.pow(10.0,(5 - Precision));    Easting=roundMGRS(Easting / divisor) * divisor;    Northing=roundMGRS(Northing / divisor) * divisor;    if (AVKey.NORTH.equals(Hemisphere)) {      if (Easting >= TWOMIL)       letters[0]=LETTER_Z; else       letters[0]=LETTER_Y;      index=(int)letters[0] - 22;      ltr2_low_value=(int)upsConstants[index][1];      false_easting=(double)upsConstants[index][4];      false_northing=(double)upsConstants[index][5];    } else {      if (Easting >= TWOMIL)       letters[0]=LETTER_B; else       letters[0]=LETTER_A;      ltr2_low_value=(int)upsConstants[(int)letters[0]][1];      false_easting=(double)upsConstants[(int)letters[0]][4];      false_northing=(double)upsConstants[(int)letters[0]][5];    }    grid_northing=Northing;    grid_northing=grid_northing - false_northing;    letters[2]=(int)(grid_northing / ONEHT);    if (letters[2] > LETTER_H)     letters[2]=letters[2] + 1;    if (letters[2] > LETTER_N)     letters[2]=letters[2] + 1;    grid_easting=Easting;    grid_easting=grid_easting - false_easting;    letters[1]=(int)ltr2_low_value + ((int)(grid_easting / ONEHT));    if (Easting < TWOMIL) {      if (letters[1] > LETTER_L)       letters[1]=letters[1] + 3;      if (letters[1] > LETTER_U)       letters[1]=letters[1] + 2;    } else {      if (letters[1] > LETTER_C)       letters[1]=letters[1] + 2;      if (letters[1] > LETTER_H)       letters[1]=letters[1] + 1;      if (letters[1] > LETTER_L)       letters[1]=letters[1] + 3;    }    makeMGRSString(0,letters,Easting,Northing,Precision);  }  return (error_code);}  }
class C{  default void classLoaderInit(DynamicClassLoader loader){}  }
class C{  @Override public synchronized boolean isEmpty(){  return elementCount == 0;}  }
class C{  public void incRefCount(){  refCount++;}  }
class C{  public static Character[] valuesOf(char[] array){  Character[] dest=new Character[array.length];  for (int i=0; i < array.length; i++) {    dest[i]=Character.valueOf(array[i]);  }  return dest;}  }
class C{  protected void processAssociationOverrides(List<AssociationOverrideMetadata> associationOverrides,EmbeddableMapping embeddableMapping,MetadataDescriptor embeddableDescriptor){  Map<String,AssociationOverrideMetadata> mergedAssociationOverrides=getAssociationOverrides(associationOverrides);  for (  String attributeName : mergedAssociationOverrides.keySet()) {    AssociationOverrideMetadata associationOverride=mergedAssociationOverrides.get(attributeName);    MappingAccessor mappingAccessor=embeddableDescriptor.getMappingAccessor(attributeName);    if (mappingAccessor == null) {      throw ValidationException.embeddableAssociationOverrideNotFound(embeddableDescriptor.getJavaClass(),attributeName,getJavaClass(),getAttributeName());    } else {      mappingAccessor.processAssociationOverride(associationOverride,embeddableMapping,getOwningDescriptor());    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Channel c=getChannel(stack);  return (c == null) ? "" : c.getLongName();}  }
class C{  public void comment(String comment) throws IOException {  _writeIndent();  _writeLn("<!-- " + comment + " -->");}  }
class C{  protected void initializeRTOEstimators(long measuredRTT,int estimatorType,RemoteEndpoint endpoint){  long newRTO=config.getInt(NetworkConfig.Keys.ACK_TIMEOUT);  endpoint.updateRTO(newRTO);}  }
class C{  public boolean isSpecificPermitted(String name){  return isPermitted(PermissionType.SPECIFIC,name);}  }
class C{  private void addSourceRtfToExport(Entry source,int index,StringBuilder result) throws IOException {  final String title=source.getNoteOrTitle("");  final String url=source.getSourceUrl();  result.append("Reference " + index + ": ");  appendRtfString(result,title);  result.append("\\par\n");  if (url != null && !url.isEmpty()) {    appendRtfString(result,url);    result.append("\\par\n");  }  result.append("\\par\n");}  }
class C{  public void testAppendRenameParentNoClose() throws Exception {  if (dual)   return;  if (appendSupported()) {    create(igfs,paths(DIR,SUBDIR),null);    createFile(igfs,FILE,false);    IgfsOutputStream os=null;    try {      os=igfs.append(FILE,false);      igfs.rename(SUBDIR,SUBDIR2);      os.close();    }  finally {      U.closeQuiet(os);    }  }}  }
class C{  public static int loadShader(final String vss,final String fss){  if (DEBUG)   Log.v(TAG,"loadShader:");  int vs=GLES20.glCreateShader(GLES20.GL_VERTEX_SHADER);  GLES20.glShaderSource(vs,vss);  GLES20.glCompileShader(vs);  final int[] compiled=new int[1];  GLES20.glGetShaderiv(vs,GLES20.GL_COMPILE_STATUS,compiled,0);  if (compiled[0] == 0) {    if (DEBUG)     Log.e(TAG,"Failed to compile vertex shader:" + GLES20.glGetShaderInfoLog(vs));    GLES20.glDeleteShader(vs);    vs=0;  }  int fs=GLES20.glCreateShader(GLES20.GL_FRAGMENT_SHADER);  GLES20.glShaderSource(fs,fss);  GLES20.glCompileShader(fs);  GLES20.glGetShaderiv(fs,GLES20.GL_COMPILE_STATUS,compiled,0);  if (compiled[0] == 0) {    if (DEBUG)     Log.w(TAG,"Failed to compile fragment shader:" + GLES20.glGetShaderInfoLog(fs));    GLES20.glDeleteShader(fs);    fs=0;  }  final int program=GLES20.glCreateProgram();  GLES20.glAttachShader(program,vs);  GLES20.glAttachShader(program,fs);  GLES20.glLinkProgram(program);  return program;}  }
class C{  public static <U extends Object,S extends Service<U>>boolean launchServiceByClass(Class<? extends S> c,U user,Frame owner){  boolean success=false;  S ret=null;  for (  Service<?> s : SERVICE_TO_USER_MAP.keySet()) {    if (c.isInstance(s)) {      s.pullToFront();      return true;    }  }  try {    ret=c.newInstance();    SERVICE_TO_USER_MAP.put(ret,user);    ret.setupGUI(owner);    ret.launch();    success=true;  } catch (  InstantiationException|IllegalAccessException e) {    LOG.severe("Problem creating a new service by class. " + e.getMessage());  }  return success;}  }
class C{  protected void initDelegatingFilterProxy(ServletContext servletContext){  DelegatingFilterProxy delegatingFilterProxy=new DelegatingFilterProxy();  FilterRegistration.Dynamic filterChainProxyFilterRegistration=servletContext.addFilter("filterChainProxy",delegatingFilterProxy);  filterChainProxyFilterRegistration.addMappingForUrlPatterns(null,true,"/*");}  }
class C{  public SAXParserMMImpl(SymbolTable symbolTable){  this(symbolTable,null);}  }
class C{  public boolean isDelayedCapture(){  Object oo=get_Value(COLUMNNAME_IsDelayedCapture);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.589 -0500",hash_original_method="BC23D2938EE88E31CA87024518493BE2",hash_generated_method="BC23D2938EE88E31CA87024518493BE2") void deleteCookies(String domain,String path,String name){  if (domain == null || !checkInitialized()) {    return;  }synchronized (mCookieLock) {    final String where="(" + COOKIES_DOMAIN_COL + " == ?) AND ("+ COOKIES_PATH_COL+ " == ?) AND ("+ COOKIES_NAME_COL+ " == ?)";    mDatabase.delete(mTableNames[TABLE_COOKIES_ID],where,new String[]{domain,path,name});  }}  }
class C{  public WETriangleMesh transform(Matrix4x4 mat){  return transform(mat,true);}  }
class C{  public IWampConnector connector(){  return connector;}  }
class C{  @Override public void onAction(String text,String extra,String source){  stopEditingUrl();  if (UrlInputView.TYPED.equals(source)) {    String url=null;    boolean wap2estore=BrowserConfig.getInstance(getContext()).hasFeature(BrowserConfig.Feature.WAP2ESTORE);    if ((wap2estore && isEstoreTypeUrl(text)) || isRtspTypeUrl(text) || isMakeCallTypeUrl(text)) {      url=text;    } else {      url=UrlUtils.smartUrlFilter(text,false);    }    Tab t=mBaseUi.getActiveTab();    if (url != null && t != null && url.startsWith("javascript:")) {      mUiController.loadUrl(t,url);      setDisplayTitle(null,text);      return;    }    if (url != null && t != null && wap2estore && isEstoreTypeUrl(url)) {      if (handleEstoreTypeUrl(url)) {        setDisplayTitle(null,text);        return;      }    }    if (url != null && t != null && isRtspTypeUrl(url)) {      if (handleRtspTypeUrl(url)) {        setDisplayTitle(null,text);        return;      }    }    if (url != null && t != null && isMakeCallTypeUrl(url)) {      if (handleMakeCallTypeUrl(url)) {        return;      }    }  }  Intent i=new Intent();  String action=Intent.ACTION_SEARCH;  i.setAction(action);  i.putExtra(SearchManager.QUERY,text);  if (extra != null) {    i.putExtra(SearchManager.EXTRA_DATA_KEY,extra);  }  if (source != null) {    Bundle appData=new Bundle();    appData.putString("source",source);    i.putExtra("source",appData);  }  mUiController.handleNewIntent(i);  setDisplayTitle(null,text);}  }
class C{  public SimpleEdgePortrayal2D(Paint fromPaint,Paint toPaint,Paint labelPaint){  this(fromPaint,toPaint,labelPaint,new Font("SansSerif",Font.PLAIN,12));}  }
class C{  protected List<Position> createBowTie(DrawContext dc,Position pos1,Position pos2){  Globe globe=dc.getGlobe();  Vec4 pt1=globe.computePointFromLocation(pos1);  Vec4 pt2=globe.computePointFromLocation(pos2);  Vec4 v12=pt2.subtract3(pt1);  double dist=pt1.subtract3(pt2).getLength3() * this.getBowTieWidth();  Vec4 normal=globe.computeSurfaceNormalAtPoint(pt1);  Vec4 perpendicular=v12.cross3(normal);  perpendicular=perpendicular.normalize3().multiply3(dist);  Vec4 ptA=pt1.add3(perpendicular);  Vec4 ptB=pt1.subtract3(perpendicular);  normal=globe.computeSurfaceNormalAtPoint(pt2);  perpendicular=v12.cross3(normal);  perpendicular=perpendicular.normalize3().multiply3(dist);  Vec4 ptC=pt2.add3(perpendicular);  Vec4 ptD=pt2.subtract3(perpendicular);  return TacticalGraphicUtil.asPositionList(globe,ptA,ptB,ptC,ptD,ptA);}  }
class C{  @Override public double[] distributionForInstance(BayesNet bayesNet,Instance instance) throws Exception {  Instances instances=bayesNet.m_Instances;  int nNumClasses=instances.numClasses();  double[] fProbs=new double[nNumClasses];  for (int iClass=0; iClass < nNumClasses; iClass++) {    fProbs[iClass]=1.0;  }  for (int iClass=0; iClass < nNumClasses; iClass++) {    double logfP=0;    for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {      double iCPT=0;      for (int iParent=0; iParent < bayesNet.getParentSet(iAttribute).getNrOfParents(); iParent++) {        int nParent=bayesNet.getParentSet(iAttribute).getParent(iParent);        if (nParent == instances.classIndex()) {          iCPT=iCPT * nNumClasses + iClass;        } else {          iCPT=iCPT * instances.attribute(nParent).numValues() + instance.value(nParent);        }      }      if (iAttribute == instances.classIndex()) {        logfP+=Math.log(bayesNet.m_Distributions[iAttribute][(int)iCPT].getProbability(iClass));      } else {        logfP+=instance.value(iAttribute) * Math.log(bayesNet.m_Distributions[iAttribute][(int)iCPT].getProbability(instance.value(1)));      }    }    fProbs[iClass]+=logfP;  }  double fMax=fProbs[0];  for (int iClass=0; iClass < nNumClasses; iClass++) {    if (fProbs[iClass] > fMax) {      fMax=fProbs[iClass];    }  }  for (int iClass=0; iClass < nNumClasses; iClass++) {    fProbs[iClass]=Math.exp(fProbs[iClass] - fMax);  }  Utils.normalize(fProbs);  return fProbs;}  }
class C{  public static TDoubleDoubleHashMap createHistogram(double[] values,Discretizer discretizer,boolean reweight){  double[] weights=new double[values.length];  Arrays.fill(weights,1.0);  return createHistogram(values,weights,discretizer,reweight);}  }
class C{  public void generate(CompilationUnit unit,SymbolTable symbolTable){  CompilationUnit ascUnit=(CompilationUnit)unit.getContext().getAttribute(DELEGATE_UNIT);  Logger original=ThreadLocalToolkit.getLogger();  DualModeLineNumberMap map=(DualModeLineNumberMap)unit.getContext().getAttribute(LINE_NUMBER_MAP);  if (map != null)   map.flushTemp();  Logger adapter=new MxmlLogAdapter(original,map);  ThreadLocalToolkit.setLogger(adapter);  delegateSubCompiler.generate(ascUnit,symbolTable);  if (ThreadLocalToolkit.errorCount() > 0) {    return;  }  Source.transferGeneratedSources(ascUnit,unit);  Source.transferBytecodes(ascUnit,unit);}  }
class C{  protected BasicPermission(PermissionLevel defaultLevel){  this.defaultLevel=defaultLevel;}  }
class C{  public T caseModifiableElement(ModifiableElement object){  return null;}  }
class C{  public DocTermOrds(LeafReader reader,Bits liveDocs,String field,BytesRef termPrefix) throws IOException {  this(reader,liveDocs,field,termPrefix,Integer.MAX_VALUE);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public void unread(byte[] b) throws IOException {  unread(b,0,b.length);}  }
class C{  public void store(short value){}  }
class C{  public void pushFilter(StreamFilter filter){  filter.init(_source);  _source=filter;}  }
class C{  public void testNegPosSameLength(){  String numA="-283746278342837476784564875684767";  String numB="293478573489347658763745839457637";  String res="-71412358434940908477702819237628";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public static LocalFileFilter from(SnapshotDirectory directory,boolean toCheckLastModifiedTimestamp,boolean isCombined){  return new LocalFileFilter(directory,toCheckLastModifiedTimestamp,isCombined);}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  FeatureBean fb=null;  try {    fb=(FeatureBean)digester.peek();  } catch (  Exception e) {    throw new IllegalStateException("No parent FeatureBean on object stack");  }  String lang=attributes.getValue("lang");  if (lang == null) {    lang=attributes.getValue("xml:lang");  }  if (lang == null) {    lang="";  }  DescriptionBean db=fb.getDescription(lang);  if (db == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[DescriptionRule]{" + digester.getMatch() + "} New ("+ lang+ ")");    }    Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);    db=(DescriptionBean)clazz.newInstance();    db.setLang(lang);    fb.addDescription(db);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[DescriptionRule]{" + digester.getMatch() + "} Old "+ lang+ ")");    }  }  digester.push(db);}  }
class C{  public static org.apache.nutch.storage.ProtocolStatus.Builder newBuilder(org.apache.nutch.storage.ProtocolStatus other){  return new org.apache.nutch.storage.ProtocolStatus.Builder(other);}  }
class C{  public TLongHash(int initialCapacity,float loadFactor,TLongHashingStrategy strategy){  super(initialCapacity,loadFactor);  _hashingStrategy=strategy;}  }
class C{  public WaitContainerParams withContainer(@NotNull String container){  requireNonNull(container);  this.container=container;  return this;}  }
class C{  public CascadedTable(Table parent,Predicate rowFilter){  this(parent,rowFilter,null);}  }
class C{  public static Date parseDate(final String str,final Locale locale,final String... parsePatterns) throws ParseException {  return parseDateWithLeniency(str,locale,parsePatterns,true);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean remove(Object object){  throw new UnsupportedOperationException();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public ActorContext(ActorScope scope){  this.actorScope=scope;}  }
class C{  protected void addULong(final int value){  addByte((byte)(value & 0xff));  addByte((byte)(value >> 8 & 0xff));  addByte((byte)(value >> 16 & 0xff));  addByte((byte)(value >> 24 & 0xff));}  }
class C{  @Deprecated public boolean isToolEffective(String type,int level){  String t=getHarvestTool();  return (t == null && type == null) || type.equals(t);}  }
class C{  public String generateAuthorizationHeaderValue(String method,String requestUri,String body){  if (!mIsDigestAuthentication) {    return "Basic ".concat(Base64.encodeBase64ToString((new StringBuilder(mServerLogin).append(':').append(mServerPwd).toString()).getBytes(UTF8)));  }  mDigest.updateNonceParameters();  StringBuilder authValue=new StringBuilder("Digest username=\"").append(mServerLogin).append("\"").append(",realm=\"").append(mDigest.getRealm()).append("\"").append(",nonce=\"").append(mDigest.getNonce()).append("\"").append(",uri=\"").append(requestUri).append("\"").append(",nc=").append(mDigest.buildNonceCounter()).append(",cnonce=\"").append(mDigest.getCnonce()).append("\"");  String opaque=mDigest.getOpaque();  if (opaque != null) {    authValue.append(",opaque=\"").append(opaque).append("\"");  }  String qop=mDigest.getQop();  if (qop != null && qop.startsWith("auth")) {    authValue.append(",qop=\"").append(qop).append("\"").append(",response=\"").append(mDigest.calculateResponse(mServerLogin,mServerPwd,method,requestUri,mDigest.buildNonceCounter(),body)).append("\"");  } else {    authValue.append(",response=\"").append(mDigest.calculateResponse(mServerLogin,mServerPwd,method,requestUri,mDigest.buildNonceCounter(),"")).append("\"");  }  return authValue.toString();}  }
class C{  public JsonBuilder(Object content,JsonGenerator generator){  this.content=content;  this.generator=generator;}  }
class C{  public void removeAt(int index){  if (mValues[index] != DELETED) {    mValues[index]=DELETED;    mGarbage=true;  }}  }
class C{  public Element store(Object o){  PositionableEllipse p=(PositionableEllipse)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("positionableEllipse");  storeCommonAttributes(p,element);  Element elem=new Element("size");  elem.setAttribute("width","" + p.getWidth());  elem.setAttribute("height","" + p.getHeight());  element.addContent(elem);  element.setAttribute("class","jmri.jmrit.display.controlPanelEditor.shape.configurexml.PositionableEllipseXml");  return element;}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || getClass() != o.getClass())   return false;  GetHeadersMessage other=(GetHeadersMessage)o;  return version == other.version && stopHash.equals(other.stopHash) && locator.size() == other.locator.size() && locator.containsAll(other.locator);}  }
class C{  public static int collectDefaults(){  int flags=0;  for (  Feature f : values()) {    if (f.enabledByDefault()) {      flags|=f.getMask();    }  }  return flags;}  }
class C{  public Vector3f lerp(Vector3fc other,float t){  return lerp(other,t,this);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void createHallOfFameSign(){  sign=new Sign();  sign.setPosition(69,106);  StendhalRPZone zone=SingletonRepository.getRPWorld().getZone("0_semos_mountain_n2");  zone.add(sign);  updateQuest();}  }
class C{  private static PipelineOp addSubgroup(PipelineOp left,final GraphPatternGroup<IGroupMemberNode> subgroup,final Set<IVariable<?>> doneSet,final AST2BOpContext ctx){  final boolean usePipelinedHashJoin=usePipelinedHashJoin(ctx,subgroup);  if (ctx.isCluster() && BOpUtility.visitAll((BOp)subgroup,NamedSubqueryInclude.class).hasNext()) {    left=new CopyOp(leftOrEmpty(left),NV.asMap(new NV[]{new NV(Predicate.Annotations.BOP_ID,ctx.nextId()),new NV(SliceOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER)}));  }  final boolean optional=subgroup.isOptional();  final boolean minus=subgroup instanceof JoinGroupNode && ((JoinGroupNode)subgroup).isMinus();  final JoinTypeEnum joinType=optional ? JoinTypeEnum.Optional : minus ? JoinTypeEnum.NotExists : JoinTypeEnum.Normal;  @SuppressWarnings("rawtypes") final Map<IConstraint,Set<IVariable<IV>>> needsMaterialization=new LinkedHashMap<IConstraint,Set<IVariable<IV>>>();  final IConstraint[] joinConstraints=getJoinConstraints(getJoinConstraints(subgroup),needsMaterialization);  if (!joinType.isNormal() && joinConstraints != null) {    throw new AssertionError("Non-required group has attached join filters: " + subgroup);  }  final String solutionSetName="--set-" + ctx.nextId();  @SuppressWarnings("rawtypes") final IVariable[] joinVars=subgroup.getJoinVars();  if (joinVars == null) {    throw new RuntimeException("Join variables not specified: " + subgroup);  }  final INamedSolutionSetRef namedSolutionSet=NamedSolutionSetRefUtility.newInstance(usePipelinedHashJoin ? null : ctx.queryId,solutionSetName,joinVars);  final IVariable<?>[] projectInVars=subgroup.getProjectInVars();  PipelineOp subqueryPlan=null;  if (usePipelinedHashJoin) {    subqueryPlan=convertJoinGroupOrUnion(null,subgroup,doneSet,ctx);    subqueryPlan=(PipelineOp)subqueryPlan.setProperty(BOp.Annotations.NAMESPACE,ctx.getNamespace());  }  left=addHashIndexOp(left,usePipelinedHashJoin,ctx,subgroup,joinType,joinVars,joinConstraints,projectInVars,namedSolutionSet,null,null,subqueryPlan);  if (!usePipelinedHashJoin) {    left=convertJoinGroupOrUnion(left,subgroup,doneSet,ctx);  }  final boolean lastPass=!joinType.isNormal();  final boolean release=lastPass && true;  final int maxParallel=lastPass ? 1 : ctx.maxParallelForSolutionSetHashJoin;  if (!usePipelinedHashJoin) {    if (ctx.nativeHashJoins) {      left=applyQueryHints(new HTreeSolutionSetHashJoinOp(new BOp[]{left},new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.MAX_PARALLEL,maxParallel),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(HTreeSolutionSetHashJoinOp.Annotations.CONSTRAINTS,joinConstraints),new NV(HTreeSolutionSetHashJoinOp.Annotations.RELEASE,release),new NV(HTreeSolutionSetHashJoinOp.Annotations.LAST_PASS,lastPass),new NV(HTreeSolutionSetHashJoinOp.Annotations.NAMED_SET_REF,namedSolutionSet)),subgroup,ctx);    } else {      left=applyQueryHints(new JVMSolutionSetHashJoinOp(new BOp[]{left},new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.MAX_PARALLEL,maxParallel),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(JVMSolutionSetHashJoinOp.Annotations.CONSTRAINTS,joinConstraints),new NV(JVMSolutionSetHashJoinOp.Annotations.RELEASE,release),new NV(JVMSolutionSetHashJoinOp.Annotations.LAST_PASS,lastPass),new NV(JVMSolutionSetHashJoinOp.Annotations.NAMED_SET_REF,namedSolutionSet)),subgroup,ctx);    }  }  if (ctx.nativeHashJoins) {    if (joinType.equals(JoinTypeEnum.Normal)) {      final Set<IVariable<?>> nonProjectInVariables=ctx.sa.getMaybeIncomingBindings(subgroup,new LinkedHashSet<IVariable<?>>());      for (int i=0; i < projectInVars.length; i++) {        nonProjectInVariables.remove(projectInVars[i]);      }      doneSet.removeAll(nonProjectInVariables);    } else {      doneSet.clear();    }  }  left=addMaterializationSteps3(left,doneSet,needsMaterialization,subgroup.getQueryHints(),ctx);  return left;}  }
class C{  public long run(String[] args) throws Exception {  int size=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  double[][] arrays=new double[ncycles][size];  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,arrays,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,arrays,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  public void rectValueToPixel(RectF r,float phaseY){  if (r.top > 0)   r.top*=phaseY; else   r.bottom*=phaseY;  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  boolean isFromLeft(){  return parent == null || parent.left == this;}  }
class C{  public void addAllOf(DoubleArrayList list){  int listSize=list.size();  if (this.size + listSize >= this.capacity)   flush();  this.target.addAllOf(list);}  }
class C{  public final boolean sendEmptyMessageDelayed(int what,long delayMillis){  return mExec.sendEmptyMessageDelayed(what,delayMillis);}  }
class C{  protected void collectSuperTypeNames(ReferenceBinding binding,char[][] path){  ReferenceBinding superclass=binding.superclass();  if (path != null && superclass != null) {    boolean samePackage=addIfSamePackage(superclass.compoundName,path);    if (!samePackage)     path=null;  }  if (superclass != null) {    addToResult(superclass.compoundName);    collectSuperTypeNames(superclass,path);  }  ReferenceBinding[] interfaces=binding.superInterfaces();  if (interfaces != null) {    for (int i=0; i < interfaces.length; i++) {      ReferenceBinding interfaceBinding=interfaces[i];      addToResult(interfaceBinding.compoundName);      collectSuperTypeNames(interfaceBinding,path);    }  }}  }
class C{  @Override public boolean usingProxy(){  LOG.trace("enter HttpURLConnection.usingProxy()");  throw new RuntimeException("Not implemented yet");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.073 -0500",hash_original_method="83559981E73A0A11E2E39D8FF1D4E53C",hash_generated_method="351C03041EC146E740980031705F280D") public void preProcess(final HttpRequest request,final HttpProcessor processor,final HttpContext context) throws HttpException, IOException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (processor == null) {    throw new IllegalArgumentException("HTTP processor may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  processor.process(request,context);}  }
class C{  public final int read() throws IOException {  if (_length <= _offset && !readBuffer())   return -1;  return _buffer[_offset++] & 0xff;}  }
class C{  protected RegexPrompt(Pattern pattern){  this.pattern=pattern;}  }
class C{  private void addToRenaming(Renaming renaming,HashSet<String> prevDeclared,ExprNode expr){  if (!(expr instanceof OpApplNode)) {    return;  }  HashSet<String> newDeclared=(HashSet<String>)prevDeclared.clone();  OpApplNode node=(OpApplNode)expr;  if (node.getUnbdedQuantSymbols() != null) {    for (int i=0; i < node.getUnbdedQuantSymbols().length; i++) {      FormalParamNode id=node.getUnbdedQuantSymbols()[i];      if (newDeclared.contains(getCurrentName(id,renaming))) {        String newname=getNewName(id,newDeclared,renaming);        newDeclared.add(newname);        addCurrentName(id,newname,renaming);      }    }  }  if (node.getBdedQuantSymbolLists() != null) {    for (int i=0; i < node.getBdedQuantSymbolLists().length; i++) {      addToRenaming(renaming,prevDeclared,node.getBdedQuantBounds()[i]);      FormalParamNode[] nodeList=node.getBdedQuantSymbolLists()[i];      for (int j=0; j < nodeList.length; j++) {        FormalParamNode id=nodeList[j];        if (newDeclared.contains(getCurrentName(id,renaming))) {          String newname=getNewName(id,newDeclared,renaming);          newDeclared.add(newname);          addCurrentName(id,newname,renaming);        }      }    }  }  for (int i=0; i < node.getArgs().length; i++) {    if (node.getArgs()[i] instanceof ExprNode) {      addToRenaming(renaming,newDeclared,(ExprNode)node.getArgs()[i]);    }  }}  }
class C{  public SolidMap(Iterable<Pair<K,V>> iterable){  LinkedHashMap<K,V> m=new LinkedHashMap<>();  for (  Pair<K,V> pair : iterable)   m.put(pair.first,pair.second);  this.map=Collections.unmodifiableMap(m);}  }
class C{  static ObjectName ensureMBeanIsRegistered(ManagedResource resource){  try {    ObjectName objName=ObjectName.getInstance(resource.getMBeanName());synchronized (MBeanUtil.class) {      if (mbeanServer != null && !mbeanServer.isRegistered(objName)) {        return createMBean(resource);      }    }    raiseOnFailure(mbeanServer.isRegistered(objName),LocalizedStrings.MBeanUtil_COULDNT_FIND_MBEAN_REGISTERED_WITH_OBJECTNAME_0.toLocalizedString(new Object[]{objName.toString()}));    return objName;  } catch (  java.lang.Exception e) {    throw new RuntimeAdminException(e);  }}  }
class C{  private BigInteger remainderKnuth(BigInteger val){  MutableBigInteger q=new MutableBigInteger(), a=new MutableBigInteger(this.mag), b=new MutableBigInteger(val.mag);  return a.divideKnuth(b,q).toBigInteger(this.signum);}  }
class C{  public void saveWeights(){  System.arraycopy(m_weights,0,m_bestWeights,0,m_weights.length);  for (int i=0; i < m_numInputs; i++) {    m_inputList[i].saveWeights();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static boolean isValidAdaptation(ElementKey<?,?> source,ElementKey<?,?> adaptor){  Class<?> sourceType=source.getElementType();  Class<?> adaptorType=adaptor.getElementType();  if (sourceType == adaptorType) {    return false;  }  return sourceType.isAssignableFrom(adaptorType);}  }
class C{  public VorbisBitArray(byte[] data,int limit){  this.data=data;  this.limit=limit * 8;}  }
class C{  private static Field findField(Object instance,String name) throws NoSuchFieldException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Field field=clazz.getDeclaredField(name);      if (!field.isAccessible()) {        field.setAccessible(true);      }      return field;    } catch (    NoSuchFieldException e) {    }  }  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());}  }
class C{  public void updateEmail(String email){  user.setEmail(email);  mvpView.updateUserInfoTextView(user.toString());}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap notations;  DocumentType docType;  Node retval;  Element elem;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    notations=docType.getNotations();    assertNotNull("notationsNotNull",notations);    elem=doc.createElementNS("http://www.w3.org/1999/xhtml","br");    try {      retval=notations.setNamedItemNS(elem);      fail("throw_HIER_OR_NO_MOD_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 3:        break;case 7:      break;default :    throw ex;}}}}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double maxProb=-1;  double currentProb;  int maxIndex=0;  int j;  for (j=0; j < instance.numClasses(); j++) {    currentProb=getProbs(j,instance,1);    if (Utils.gr(currentProb,maxProb)) {      maxIndex=j;      maxProb=currentProb;    }  }  if (Utils.eq(maxProb,0)) {    return -1.0;  } else {    return maxIndex;  }}  }
class C{  public static byte[] toByteArray(Boolean[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? (byte)1 : (byte)0;  }  return result;}  }
class C{  public boolean canReopenSource(){  return true;}  }
class C{  @AfterMethod(alwaysRun=true) public void recoveryScenario(ITestResult rs) throws Throwable {  gotoMyCoursesView();  if (rs.getStatus() == 2) {    Reporter.log("Failed Test: " + rs.getTestName());  }}  }
class C{  private Object arrayNewInstance(Class type,BSHArrayDimensions dimensionsNode,CallStack callstack) throws EvalError {  if (dimensionsNode.numUndefinedDims > 0) {    Object proto=Array.newInstance(type,new int[dimensionsNode.numUndefinedDims]);    type=proto.getClass();  }  try {    return Array.newInstance(type,dimensionsNode.definedDimensions);  } catch (  NegativeArraySizeException e1) {    throw new TargetError(e1,this,callstack);  }catch (  Exception e) {    throw new EvalError("Can't construct primitive array: " + e.getMessage(),this,callstack);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0) {            z1=1;          }          if (z2 != 0) {            z2=1;          }          if (z1 + z2 == 1) {            outputFile.setValue(row,col,1);          } else {            outputFile.setValue(row,col,0);          }        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean sameAs(Frame<ValueType> other){  if (isTop != other.isTop) {    return false;  }  if (isTop && other.isTop) {    return true;  }  if (isBottom != other.isBottom) {    return false;  }  if (isBottom && other.isBottom) {    return true;  }  if (getNumSlots() != other.getNumSlots()) {    return false;  }  for (int i=0; i < getNumSlots(); ++i) {    if (!getValue(i).equals(other.getValue(i))) {      return false;    }  }  return true;}  }
class C{  public void removeEventListener(IRcsServiceRegistrationListener listener){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.removeEventListener(listener);  }}  }
class C{  public MessageUpdateHandler(ImplDiscordAPI api){  super(api,true,"MESSAGE_UPDATE");}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("itlighttestdata.zip"),"itlight.txt");}  }
class C{  @Override protected void initListeners(){  this.startBT.setOnClickListener(this);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.233 -0500",hash_original_method="006AB7CB427D2D70245D98F537F7CF42",hash_generated_method="BFD824D09553C899DB5EF18CDC25D772") @Override public int hashCode(){  int result=effectiveKeyBits;  if (iv == null) {    return result;  }  for (  byte element : iv) {    result+=element;  }  return result;}  }
class C{  boolean findCellForSpanThatIntersectsIgnoring(int[] cellXY,int spanX,int spanY,int intersectX,int intersectY,View ignoreView,boolean occupied[][]){  markCellsAsUnoccupiedForView(ignoreView,occupied);  boolean foundCell=false;  while (true) {    int startX=0;    if (intersectX >= 0) {      startX=Math.max(startX,intersectX - (spanX - 1));    }    int endX=mCountX - (spanX - 1);    if (intersectX >= 0) {      endX=Math.min(endX,intersectX + (spanX - 1) + (spanX == 1 ? 1 : 0));    }    int startY=0;    if (intersectY >= 0) {      startY=Math.max(startY,intersectY - (spanY - 1));    }    int endY=mCountY - (spanY - 1);    if (intersectY >= 0) {      endY=Math.min(endY,intersectY + (spanY - 1) + (spanY == 1 ? 1 : 0));    }    for (int y=startY; y < endY && !foundCell; y++) {      inner:       for (int x=startX; x < endX; x++) {        for (int i=0; i < spanX; i++) {          for (int j=0; j < spanY; j++) {            if (occupied[x + i][y + j]) {              x+=i;              continue inner;            }          }        }        if (cellXY != null) {          cellXY[0]=x;          cellXY[1]=y;        }        foundCell=true;        break;      }    }    if (intersectX == -1 && intersectY == -1) {      break;    } else {      intersectX=-1;      intersectY=-1;      continue;    }  }  markCellsAsOccupiedForView(ignoreView,occupied);  return foundCell;}  }
class C{  public boolean isDisposesDialog(){  return disposesDialog;}  }
class C{  private void writeFinalResults(String outputDir,double totalTT,double[] avgRouteTTs,double[] avgRouteTolls,int[] routeUsers,int numberOfStuckedAgents){  PrintStream stream;  String filename=outputDir + "FinalResults.txt";  try {    stream=new PrintStream(new File(filename));  } catch (  FileNotFoundException e) {    e.printStackTrace();    return;  }  log.info("Total travel time: " + totalTT);  String header="total tt[s]";  StringBuffer resultLine=new StringBuffer();  resultLine.append(totalTT);  String latexFormat="" + (int)totalTT;  log.info("Route Users: (route: #users)");  for (int routeNr=0; routeNr < numberOfRoutes; routeNr++) {    log.info("\t" + routeNr + ": "+ routeUsers[routeNr]);    header+="\t#users " + routeNr;    resultLine.append("\t" + routeUsers[routeNr]);    latexFormat+=" & " + routeUsers[routeNr];  }  log.info("Average travel times: (route: avg tt)");  for (int routeNr=0; routeNr < numberOfRoutes; routeNr++) {    log.info("\t" + routeNr + ": "+ avgRouteTTs[routeNr]);    header+="\tavg tt[s] " + routeNr;    resultLine.append("\t" + avgRouteTTs[routeNr]);    latexFormat+=" & " + (Double.isNaN(avgRouteTTs[routeNr]) ? "-" : (int)avgRouteTTs[routeNr]);  }  log.info("Average tolls: (route: avg toll)");  for (int routeNr=0; routeNr < numberOfRoutes; routeNr++) {    log.info("\t" + routeNr + ": "+ avgRouteTolls[routeNr]);    header+="\tavg toll " + routeNr;    resultLine.append("\t" + avgRouteTolls[routeNr]);    latexFormat+=" & " + (Double.isNaN(avgRouteTolls[routeNr]) ? "-" : (int)avgRouteTolls[routeNr]);  }  log.info("Number of stucked agents: " + numberOfStuckedAgents);  header+="\t#stucked";  resultLine.append("\t" + numberOfStuckedAgents);  latexFormat+=" \\\\";  log.info("Latex format: " + latexFormat);  stream.println(header);  stream.println(resultLine.toString());  stream.close();  log.info("output written to " + filename);}  }
class C{  public static Hashtable<String,Boolean> parseDynamicArgs(String args){  Hashtable<String,Boolean> dynArgs=new Hashtable<String,Boolean>();  if (args != null) {    String lowerArgs=args.toLowerCase();    dynArgs.put(Edges,new Boolean(lowerArgs.indexOf(Edges) != -1));    dynArgs.put(Text,new Boolean(lowerArgs.indexOf(Text) != -1));    dynArgs.put(Area,new Boolean(lowerArgs.indexOf(Area) != -1));    dynArgs.put(EPoint,new Boolean(lowerArgs.indexOf(EPoint) != -1));    dynArgs.put(CPoint,new Boolean(lowerArgs.indexOf(CPoint) != -1));  }  return dynArgs;}  }
class C{  @Override protected void connectionWarn(){}  }
class C{  public void registerUploader(@NotNull String host,@NotNull SshKeyUploader sshKeyUploader){  sshKeyUploaders.put(host,sshKeyUploader);}  }
class C{  void enterState() throws IOException {}  }
class C{  public CircledPortrayal2D(SimplePortrayal2D child,Paint paint,boolean onlyCircleWhenSelected){  this(child,DEFAULT_OFFSET,DEFAULT_SCALE,paint,onlyCircleWhenSelected);}  }
class C{  public ColorMap(float[][][] definition,int steps){  if (definition == null || !check(definition)) {    System.err.println("ColorMap: Incorrect color map definition. " + "Using default map.");    definition=DEFAULT_MAP;  }  this.definition=definition;  if (steps < 1) {    steps=1;  }  this.data=new Color[steps];  computeSteps();}  }
class C{  public static boolean validateTypeSize(final Component parent,final JTextField size){  if (validateTypeSize(size)) {    return true;  } else {    CMessageBox.showWarning(parent,"Please enter a valid type size.");    return false;  }}  }
class C{  public void paintScrollBarTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public static byte[] decodeFromFile(String filename){  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      System.err.println("File is too big for this convenience method (" + file.length() + " bytes).");      return null;    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0)     length+=numBytes;    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    logger.error("Error decoding from file " + filename,e);  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  private void tryRippleExit(){  if (mRipple != null) {    if (mExitingRipples == null) {      mExitingRipples=new RippleForeground[MAX_RIPPLES];    }    mExitingRipples[mExitingRipplesCount++]=mRipple;    mRipple.exit();    mRipple=null;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public NaiveKMeans(DistanceMetric dm,SeedSelection seedSelection,Random rand){  super(dm,seedSelection,rand);}  }
class C{  @Override public BufferedImage JPEG2000ToRGBImage(final byte[] data,int w,int h,final int pX,final int pY,final int d) throws PdfException {  BufferedImage image=DefaultImageHelper.JPEG2000ToRGBImage(data,w,h,pX,pY);  if (image != null) {    return image;  } else {    return JPEG2000ToImage(data,pX,pY);  }}  }
class C{  public boolean isColorMaskGreenEnabled(){  return mColorMaskG;}  }
class C{  static void checkFamilyID(int familyID){  Family family=Family.idToFamily(familyID);  if (!family.equals(Family.QUANTILES)) {    throw new SketchesArgumentException("Possible corruption: Invalid Family: " + family.toString());  }}  }
class C{  private void showNotification(){  CharSequence text=getText(R.string.alarm_service_started);  Notification notification=new Notification(R.drawable.stat_sample,text,System.currentTimeMillis());  PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,AlarmService.class),0);  notification.setLatestEventInfo(this,getText(R.string.alarm_service_label),text,contentIntent);  mNM.notify(R.string.alarm_service_started,notification);}  }
class C{  public void animateText(){  animateText(3000);}  }
class C{  public void startDiscovery(String serviceType){  startDiscovery(serviceType,null);}  }
class C{  public void handleDecode(Result rawResult,Bitmap barcode){  inactivityTimer.onActivity();  lastResult=rawResult;  ResultHandler resultHandler=ResultHandlerFactory.makeResultHandler(this,rawResult);  boolean fromLiveScan=barcode != null;  if (fromLiveScan) {    historyManager.addHistoryItem(rawResult,resultHandler);    beepManager.playBeepSoundAndVibrate();    drawResultPoints(barcode,rawResult);  }switch (source) {case NATIVE_APP_INTENT:case PRODUCT_SEARCH_LINK:    handleDecodeExternally(rawResult,resultHandler,barcode);  break;case ZXING_LINK:if (returnUrlTemplate == null) {  handleDecodeInternally(rawResult,resultHandler,barcode);} else {  handleDecodeExternally(rawResult,resultHandler,barcode);}break;case NONE:SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);if (fromLiveScan && prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE,false)) {String message=getResources().getString(fakeR.getId("string","msg_bulk_mode_scanned")) + " (" + rawResult.getText()+ ')';Toast.makeText(this,message,Toast.LENGTH_SHORT).show();restartPreviewAfterDelay(BULK_MODE_SCAN_DELAY_MS);} else {handleDecodeInternally(rawResult,resultHandler,barcode);}break;}}  }
class C{  public void sendPushWhitelistTokenAsync(@NonNull Message message,@NonNull String[] whitelistTokens){  OtrChatManager cm=OtrChatManager.getInstance();  SessionID sId=cm.getSessionId(message.getFrom().getAddress(),mParticipant.getAddress().getAddress());  SessionStatus otrStatus=cm.getSessionStatus(sId);  message.setTo(new XmppAddress(sId.getRemoteUserId()));  if (otrStatus == SessionStatus.ENCRYPTED) {    boolean verified=cm.getKeyManager().isVerified(sId);    if (verified) {      message.setType(Imps.MessageType.OUTGOING_ENCRYPTED_VERIFIED);    } else {      message.setType(Imps.MessageType.OUTGOING_ENCRYPTED);    }    boolean canSend=cm.transformPushWhitelistTokenSending(message,whitelistTokens);    if (canSend)     mManager.sendMessageAsync(this,message);  }}  }
class C{  Mark skipUntilETag(String tag) throws JasperException {  Mark ret=skipUntil("</" + tag);  if (ret != null) {    skipSpaces();    if (nextChar() != '>')     ret=null;  }  return ret;}  }
class C{  public DiscoverItems discoverCommands(String jid) throws XMPPException {  return serviceDiscoveryManager.discoverItems(jid,discoNode);}  }
class C{  public boolean subscribe() throws Exception {  String[] topics=new String[1];  int[] qosarr=new int[1];  topics[0]=REQ_TOPIC;  qosarr[0]=1;  boolean ret=false;  try {synchronized (subLock) {      wmqttClient.subscribe(topics,qosarr);      subLockNotified=false;    }    ret=true;  } catch (  Exception e) {    ret=false;  }  return ret;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.332 -0500",hash_original_method="4DC3C0B5ECFA05562A9AFEF7B1CF9D45",hash_generated_method="FDFBFEB3E3EF5CD81ADCFCD518080293") public ByteArrayOutputStream(){  buf=new byte[32];}  }
class C{  public void toLanding(){synchronized (activities) {    for (int i=activities.size() - 1; i >= 0; i--) {      if (activities.get(i).isLanding()) {        return;      } else {        activities.get(i).finish();        activities.remove(i);      }    }  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  protected void sequence_LeftHandSideExpression_IndexedAccessExpression_1_2_1_0_ParameterizedCallExpression_1_2_0_0_ParameterizedPropertyAccessExpression_1_2_2_0_TaggedTemplateString_1_2_3_0_0(ISerializationContext context,TaggedTemplateString semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.TAGGED_TEMPLATE_STRING__TARGET) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.TAGGED_TEMPLATE_STRING__TARGET));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.TAGGED_TEMPLATE_STRING__TEMPLATE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.TAGGED_TEMPLATE_STRING__TEMPLATE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getLeftHandSideExpressionAccess().getTaggedTemplateStringTargetAction_1_2_3_0_0(),semanticObject.getTarget());  feeder.accept(grammarAccess.getLeftHandSideExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0(),semanticObject.getTemplate());  feeder.finish();}  }
class C{  public boolean fireEvent(EventType eventType){  return fireEvent(eventType,new BaseEvent(this));}  }
class C{  public boolean isVisible(){  return this.visible;}  }
class C{  public static void rateMyApp(Context context){  Uri uri=Uri.parse("market://details?id=" + context.getPackageName());  Intent goToMarket=new Intent(Intent.ACTION_VIEW,uri);  goToMarket.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_MULTIPLE_TASK);  try {    context.startActivity(goToMarket);  } catch (  ActivityNotFoundException e) {    Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse("http://play.google.com/store/apps/details?id=" + context.getPackageName()));    if (i.resolveActivity(context.getPackageManager()) != null) {      context.startActivity(i);    } else {      Toast.makeText(context,"Playstore Unavailable",Toast.LENGTH_SHORT).show();    }  }}  }
class C{  public void validateUpdateRequest(final JsonCommand jsonCommand){  final String jsonString=jsonCommand.json();  final JsonElement jsonElement=jsonCommand.parsedJson();  if (StringUtils.isBlank(jsonString)) {    throw new InvalidJsonException();  }  final Type typeToken=new TypeToken<Map<String,Object>>(){  }.getType();  this.fromJsonHelper.checkForUnsupportedParameters(typeToken,jsonString,ReportMailingJobConstants.UPDATE_REQUEST_PARAMETERS);  final List<ApiParameterError> dataValidationErrors=new ArrayList<>();  final DataValidatorBuilder dataValidatorBuilder=new DataValidatorBuilder(dataValidationErrors).resource(StringUtils.lowerCase(ReportMailingJobConstants.REPORT_MAILING_JOB_RESOURCE_NAME));  if (this.fromJsonHelper.parameterExists(ReportMailingJobConstants.NAME_PARAM_NAME,jsonElement)) {    final String name=this.fromJsonHelper.extractStringNamed(ReportMailingJobConstants.NAME_PARAM_NAME,jsonElement);    dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.NAME_PARAM_NAME).value(name).notBlank().notExceedingLengthOf(100);  }  if (this.fromJsonHelper.parameterExists(ReportMailingJobConstants.STRETCHY_REPORT_ID_PARAM_NAME,jsonElement)) {    final Integer stretchyReportId=this.fromJsonHelper.extractIntegerWithLocaleNamed(ReportMailingJobConstants.STRETCHY_REPORT_ID_PARAM_NAME,jsonElement);    dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.STRETCHY_REPORT_ID_PARAM_NAME).value(stretchyReportId).notNull().integerGreaterThanZero();  }  if (this.fromJsonHelper.parameterExists(ReportMailingJobConstants.EMAIL_RECIPIENTS_PARAM_NAME,jsonElement)) {    final String emailRecipients=this.fromJsonHelper.extractStringNamed(ReportMailingJobConstants.EMAIL_RECIPIENTS_PARAM_NAME,jsonElement);    dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.EMAIL_RECIPIENTS_PARAM_NAME).value(emailRecipients).notBlank();  }  if (this.fromJsonHelper.parameterExists(ReportMailingJobConstants.EMAIL_SUBJECT_PARAM_NAME,jsonElement)) {    final String emailSubject=this.fromJsonHelper.extractStringNamed(ReportMailingJobConstants.EMAIL_SUBJECT_PARAM_NAME,jsonElement);    dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.EMAIL_SUBJECT_PARAM_NAME).value(emailSubject).notBlank().notExceedingLengthOf(100);  }  if (this.fromJsonHelper.parameterExists(ReportMailingJobConstants.EMAIL_MESSAGE_PARAM_NAME,jsonElement)) {    final String emailMessage=this.fromJsonHelper.extractStringNamed(ReportMailingJobConstants.EMAIL_MESSAGE_PARAM_NAME,jsonElement);    dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.EMAIL_MESSAGE_PARAM_NAME).value(emailMessage).notBlank();  }  if (this.fromJsonHelper.parameterExists(ReportMailingJobConstants.IS_ACTIVE_PARAM_NAME,jsonElement)) {    final Boolean isActive=this.fromJsonHelper.extractBooleanNamed(ReportMailingJobConstants.IS_ACTIVE_PARAM_NAME,jsonElement);    dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.IS_ACTIVE_PARAM_NAME).value(isActive).notNull();  }  if (this.fromJsonHelper.parameterExists(ReportMailingJobConstants.EMAIL_ATTACHMENT_FILE_FORMAT_ID_PARAM_NAME,jsonElement)) {    final Integer emailAttachmentFileFormatId=this.fromJsonHelper.extractIntegerSansLocaleNamed(ReportMailingJobConstants.EMAIL_ATTACHMENT_FILE_FORMAT_ID_PARAM_NAME,jsonElement);    dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.EMAIL_ATTACHMENT_FILE_FORMAT_ID_PARAM_NAME).value(emailAttachmentFileFormatId).notNull();    if (emailAttachmentFileFormatId != null) {      dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.EMAIL_ATTACHMENT_FILE_FORMAT_ID_PARAM_NAME).value(emailAttachmentFileFormatId).isOneOfTheseValues(ReportMailingJobEmailAttachmentFileFormat.validIds());    }  }  if (this.fromJsonHelper.parameterExists(ReportMailingJobConstants.START_DATE_TIME_PARAM_NAME,jsonElement)) {    final String dateFormat=jsonCommand.dateFormat();    dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.DATE_FORMAT_PARAM_NAME).value(dateFormat).notBlank();    final String startDateTime=this.fromJsonHelper.extractStringNamed(ReportMailingJobConstants.START_DATE_TIME_PARAM_NAME,jsonElement);    dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.START_DATE_TIME_PARAM_NAME).value(startDateTime).notBlank();    if (StringUtils.isNotEmpty(dateFormat)) {      try {        final DateTimeFormatter dateTimeFormatter=DateTimeFormat.forPattern(dateFormat).withLocale(jsonCommand.extractLocale());        LocalDateTime.parse(startDateTime,dateTimeFormatter);      } catch (      IllegalArgumentException ex) {        dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.DATE_FORMAT_PARAM_NAME).value(dateFormat).failWithCode("invalid.date.format");      }    }  }  throwExceptionIfValidationWarningsExist(dataValidationErrors);}  }
class C{  public T height(int height,boolean dip){  size(false,height,dip);  return self();}  }
class C{  public ConnectException(String s){  super(s);}  }
class C{  @Override public double[] toArray(){  double[] data=new double[dimensionality];  for (int i=BitsUtil.nextSetBit(bits,0); i >= 0; i=BitsUtil.nextSetBit(bits,i + 1)) {    data[i]=1;  }  return data;}  }
class C{  @Override public void process(V tuple){  sums+=tuple.doubleValue();  counts++;}  }
class C{  public static GUIBatchLaconizer defaultApplicator(){  return new GUIBatchLaconizer().defaultSettings();}  }
class C{  private void updatePropertyChangeListener(IModelChangeSupport modelObject,TreeElement<?,?> newTreeElement){  modelObject.addPropertyChangeListener(newTreeElement);  newTreeElement.addPropertyChangeListener(this);  treeElementList.add(newTreeElement);  treeElementMap.put(modelObject,newTreeElement);}  }
class C{  public boolean hasAggregates(){  return hasExtension(Aggregates.class);}  }
class C{  protected Set<String> generateWidgetCreationForCellByTemplate(SourcePrinter out,C context,JSONObject child,JClassType dataObject,String bindingContextVariable,HasDataProviderDataBindingProcessor bindingProcessor){  child=ensureFirstChild(child,false,context.getWidgetId());  out.println("public " + IsWidget.class.getCanonicalName() + " createWidget("+ dataObject.getParameterizedQualifiedSourceName()+ " "+ bindingProcessor.getCollectionObjectReference()+ "){");  String childWidget=createChildWidget(out,child,WidgetConsumer.EMPTY_WIDGET_CONSUMER,bindingProcessor,context);  out.println("return " + childWidget + ";");  out.println("}");  return bindingProcessor.getConverterDeclarations();}  }
class C{  protected void log(String message){  if (verbose) {    indent(indentLevel + 1);    log.print(message);    log.flush();  }}  }
class C{  private void displace(final Player player,final StendhalRPZone zone,final int x,final int y,final PassiveEntity entity,final int quantity){  new GameEvent(player.getName(),"displace",entity.get("type")).raise();  final int oldX=entity.getX();  final int oldY=entity.getY();  if (entity instanceof Item) {    final Item item=(Item)entity;    StackableItem stackableItem=null;    if (item instanceof StackableItem) {      stackableItem=(StackableItem)item;    }    Item newItem;    if ((quantity > 0) && (stackableItem != null) && (quantity < stackableItem.getQuantity())) {      newItem=removeFromWorld(player,stackableItem,quantity);    } else {      item.onRemoveFromGround();      newItem=item;    }    newItem.setPosition(x,y);    if (newItem != item) {      zone.add(newItem);    }    newItem.notifyWorldAboutChanges();    newItem.onPutOnGround(player);    new ItemLogger().displace(player,newItem,zone,oldX,oldY,x,y);  } else {    entity.setPosition(x,y);    entity.notifyWorldAboutChanges();  }}  }
class C{  @Override public TreeMap<byte[],ReferenceContainer<ReferenceType>> searchConjunction(final HandleSet wordHashes,final HandleSet urlselection){  final TreeMap<byte[],ReferenceContainer<ReferenceType>> containers=new TreeMap<byte[],ReferenceContainer<ReferenceType>>(Base64Order.enhancedCoder);  byte[] singleHash;  ReferenceContainer<ReferenceType> singleContainer;  final Iterator<byte[]> i=wordHashes.iterator();  while (i.hasNext()) {    singleHash=i.next();    try {      singleContainer=get(singleHash,urlselection);    } catch (    final IOException e) {      ConcurrentLog.logException(e);      continue;    }    if ((singleContainer == null || singleContainer.isEmpty()))     return new TreeMap<byte[],ReferenceContainer<ReferenceType>>(Base64Order.enhancedCoder);    containers.put(singleHash,singleContainer);  }  return containers;}  }
class C{  public SimpleDateFormat(String pattern){  super();  this.pattern=pattern;}  }
class C{  public void check() throws MnemonicException {  if (mnemonicCode != null)   MnemonicCode.INSTANCE.check(mnemonicCode);}  }
class C{  public void tryToDeleteOneToOneFileTransfers(){  mImDeleteOperationHandler.post(new OneToOneFileTransferDeleteTask(mFileTransferService,this,mLocalContentResolver));}  }
class C{  protected final boolean hasListeners(){  return m_listeners != null && m_listeners.size() > 0;}  }
class C{  public static int divide(int dividend,int divisor){  return (int)(toLong(dividend) / toLong(divisor));}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  if (m_clusterer instanceof AdditionalMeasureProducer) {    Enumeration<String> en=((AdditionalMeasureProducer)m_clusterer).enumerateMeasures();    while (en.hasMoreElements()) {      String mname=en.nextElement();      newVector.addElement(mname);    }  }  return newVector.elements();}  }
class C{  public static Verb normalizeRegularVerb(final String word){  Verb verb=null;  if ((word.length() > 4) && (word.endsWith("ed") || word.endsWith("es"))) {    if (word.charAt(word.length() - 4) == word.charAt(word.length() - 3)) {      verb=new Verb(word.substring(0,word.length() - 3));    } else {      verb=new Verb(word.substring(0,word.length() - 2));    }    if (word.endsWith("ed")) {      verb.isPast=true;    }  } else   if (word.length() > 3 && word.endsWith("s") && !Grammar.isVowel(word.charAt(word.length() - 2))) {    verb=new Verb(word.substring(0,word.length() - 1));  } else   if (isGerund(word)) {    verb=new Verb(word.substring(0,word.length() - 3));    verb.isGerund=true;  }  return verb;}  }
class C{  protected final void readLayout(final Element element){  myLayoutManager=element.getAttributeValue("layout-manager");  if ("xy".equals(element.getName())) {    myLayoutSerializer=XYLayoutSerializer.INSTANCE;  } else   if ("grid".equals(element.getName())) {    createLayoutSerializer();  } else {    throw new UnexpectedFormElementException("unexpected element: " + element);  }  myLayoutSerializer.readLayout(element,this);}  }
class C{  private void addReachable(Node startNode){  Stack nodeStack=new Stack();  nodeStack.add(startNode);  while (!nodeStack.empty()) {    Node node=(Node)nodeStack.pop();    add(node,nodeStack);  }}  }
class C{  private void createClientCache(final Properties javaProps,final String authInit,final Properties[] authProps,final int ports[],final int numOfUsers,final String durableId,final boolean[] postAuthzAllowed){  createCacheClientForMultiUserMode(numOfUsers,authInit,authProps,javaProps,ports,0,false,durableId,NO_EXCEPTION);}  }
class C{  public Map<String,String> retrieveParameters(ModeledAuthenticatedUser user,String identifier){  Map<String,String> parameterMap=new HashMap<String,String>();  boolean canRetrieveParameters;  try {    canRetrieveParameters=hasObjectPermission(user,identifier,ObjectPermission.Type.UPDATE);  } catch (  GuacamoleException e) {    return parameterMap;  }  if (canRetrieveParameters) {    for (    ConnectionParameterModel parameter : parameterMapper.select(identifier))     parameterMap.put(parameter.getName(),parameter.getValue());  }  return parameterMap;}  }
class C{  public final AC grow(){  return grow(1f,curIx);}  }
class C{  public void addActionListener(ActionListener listener){}  }
class C{  private void createEntity(int cx,int cy,int cz,int type){  BlockType blockType=ItemTable.instance().getBlock(type);  if (blockType == null)   return;  try {    TileEntity entity=blockType.createTileEntity(this,cx,cy,cz);    if (entity == null)     return;    tileEntities.put(coordinateToIndex(cx,cz,cy),entity);  } catch (  Exception ex) {    GlowServer.logger.log(Level.SEVERE,"Unable to initialize tile entity for " + type,ex);  }}  }
class C{  private Wizard.MaintenanceType checkEpgDsMaintenanceType(Wizard.MaintenanceType reqMaintenanceType){  MaintenanceType newMaintenanceType=currDS.getRequiredMaintenanceType();switch (reqMaintenanceType) {case NONE:    reqMaintenanceType=newMaintenanceType;  break;case PATCH_EPG_HOLES:if (newMaintenanceType != MaintenanceType.FULL) {  reqMaintenanceType=newMaintenanceType;}break;case FULL:break;}return reqMaintenanceType;}  }
class C{  private int chooseSubNodeOrCurrNodeToAddTo(){  for (int i=NUM_NODES - 1; i >= 1; i--) {    if (getSubNodeFk(i) != Integer.MIN_VALUE) {      if (getSubNode(i).getTotalSubNodeCount() < getSubNode(i - 1).getTotalSubNodeCount())       return i; else {        if (getSubNode(i).getTotalSubNodeCount() < getSubNode(i - 1).getTotalSubNodeCount())         TAssert.fail("last node has more subnodes that previous node, last node: " + getSubNode(i) + ", previous node: "+ getSubNode(i - 1));        return i + 1;      }    }  }  return NUM_NODES;}  }
class C{  public double num(){  return m_val;}  }
class C{  public final boolean moveCursorToVisibleOffset(){  return getView().moveCursorToVisibleOffset();}  }
class C{  public E next() throws X {  if (isClosed()) {    throw new NoSuchElementException("The iteration has been closed.");  }  try {    return wrappedIter.next();  } catch (  NoSuchElementException e) {    close();    throw e;  }}  }
class C{  public static void e(String tag,String msg){  e(tag,msg,null);}  }
class C{  public synchronized void connect(){  if (!_zkConnection.isStarted()) {    _zkConnection.start();  }  if (StringUtils.isEmpty(siteId)) {    generateSiteId();  }}  }
class C{  public DefaultAttributeAction(DrawingEditor editor,AttributeKey key,@Nullable Icon icon){  this(editor,key,null,icon);}  }
class C{  public static boolean lesser(double x,double y){  return value(x - y) < 0;}  }
class C{  protected void onLinkAttached(final String connectionId,final String linkId,final String targetAddress){  replenishUpstreamSender(linkId,DEFAULT_CREDIT);}  }
class C{  private void createButtons(){  setupButton=createTitleButton();  setupButton.setAction(setupAction);  setupButton.setBorder(handyEmptyBorder);  setupButton.setIcon(UIManager.getIcon("Frame.setupIcon"));  setButtonIcon(setupButton,setupButton.getIcon());  setupButton.setContentAreaFilled(false);  closeButton=createTitleButton();  closeButton.setAction(closeAction);  closeButton.setText(null);  closeButton.putClientProperty("paintActive",Boolean.TRUE);  closeButton.setBorder(handyEmptyBorder);  closeButton.getAccessibleContext().setAccessibleName("Close");  closeButton.setIcon(UIManager.getIcon("Frame.closeIcon"));  closeButton.setRolloverIcon(UIManager.getIcon("Frame.closeIcon_rover"));  closeButton.setPressedIcon(UIManager.getIcon("Frame.closeIcon_pressed"));  closeButton.setContentAreaFilled(false);  closeButton.setToolTipText(UIManager.getString("BETitlePane.closeButtonToolTipext",getLocale()));  if (getWindowDecorationStyle() == JRootPane.FRAME) {    maximizeIcon=UIManager.getIcon("Frame.maximizeIcon");    maximizeIcon_rover=UIManager.getIcon("Frame.maximizeIcon_rover");    maximizeIcon_pressed=UIManager.getIcon("Frame.maximizeIcon_pressed");    minimizeIcon=UIManager.getIcon("Frame.minimizeIcon");    minimizeIcon_rover=UIManager.getIcon("Frame.minimizeIcon_rover");    minimizeIcon_pressed=UIManager.getIcon("Frame.minimizeIcon_pressed");    iconifyButton=createTitleButton();    iconifyButton.setAction(iconifyAction);    iconifyButton.setText(null);    iconifyButton.putClientProperty("paintActive",Boolean.TRUE);    iconifyButton.setBorder(handyEmptyBorder);    iconifyButton.getAccessibleContext().setAccessibleName("Iconify");    iconifyButton.setIcon(UIManager.getIcon("Frame.iconifyIcon"));    iconifyButton.setRolloverIcon(UIManager.getIcon("Frame.iconifyIcon_rover"));    iconifyButton.setPressedIcon(UIManager.getIcon("Frame.iconifyIcon_pressed"));    iconifyButton.setContentAreaFilled(false);    iconifyButton.setToolTipText(UIManager.getString("BETitlePane.iconifyButtonToolTipText",getLocale()));    toggleButton=createTitleButton();    toggleButton.setAction(restoreAction);    toggleButton.putClientProperty("paintActive",Boolean.TRUE);    toggleButton.setBorder(handyEmptyBorder);    toggleButton.getAccessibleContext().setAccessibleName("Maximize");    toggleButton.setIcon(maximizeIcon);    toggleButton.setRolloverIcon(maximizeIcon_rover);    toggleButton.setPressedIcon(maximizeIcon_pressed);    toggleButton.setContentAreaFilled(false);    toggleButton.setToolTipText(UIManager.getString("BETitlePane.toggleButtonToolTipText",getLocale()));  }}  }
class C{  public VertexBufferObject(boolean isStatic,int numVertices,VertexAttributes attributes){  this.isStatic=isStatic;  this.attributes=attributes;  buffer=BufferUtils.newFloatBuffer(this.attributes.vertexSize / 4 * numVertices);  buffer.flip();  bufferHandle=Gdx.gl20.glGenBuffer();  usage=isStatic ? GL20.GL_STATIC_DRAW : GL20.GL_DYNAMIC_DRAW;}  }
class C{  @SuppressWarnings({"unchecked"}) private Object result(Class<?> cls,Iterable taskRes){  assert taskRes != null;  Collection<Object> res=new LinkedList<>();  for (  Object element : taskRes) {    res.addAll(GridifyUtils.parameterToCollection(element));  }  return GridifyUtils.collectionToParameter(cls,res);}  }
class C{  public void paintCheckBoxBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static void reportError(String message,AST ast){  if (ast == null || ast.line == 0) {    reportError(message);  } else {    reportError(message + "\n    at " + ast.location());  }}  }
class C{  public void stopRefresh(String time){  if (mPullRefreshing == true) {    mPullRefreshing=false;    mHeaderTimeView.setText(time);    resetHeaderHeight();  }  mHeaderTimeView.setText(time);}  }
class C{  private void createImage(byte[] imageBytes){  View view=getView();  if (view == null) {    Log.v(TAG,"createImage: no view");    return;  }  this.imageBytes=imageBytes;  if (imageBytes != null) {    try {      createGif(view);      state=State.GIF;      return;    } catch (    GifIOException e) {    }catch (    IOException e) {      Log.w(TAG,"IOException while parsing GIF " + url,e);    }    createBitmap(view);    state=State.BITMAP;  } else {    showOpenInBrowserLink(view);    state=State.UNABLE_TO_LOAD;  }}  }
class C{  private void startSemosMineTowns(Player admin){  if (StendhalQuestSystem.get().getQuest(MineTownRevivalWeeks.QUEST_NAME) != null) {    admin.sendPrivateText("Mine Town Revival Weeks are already active.");    return;  }  StendhalQuestSystem.get().loadQuest(new MineTownRevivalWeeks());}  }
class C{  public static String readString(final ResultSet resultSet,final String columnName) throws SQLException {  return resultSet.getString(columnName);}  }
class C{  public void addEngineLocation(float x,float y,float z){  engineLoc.add(new Vector3F<Float>(x,y,z));}  }
class C{  public Pc(IndependenceTest independenceTest){  if (independenceTest == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;}  }
class C{  @Override public Socket createSocket(InetAddress address,int port,InetAddress clientAddress,int clientPort) throws IOException {  return new SSLSocketImpl(context,address,port,clientAddress,clientPort);}  }
class C{  protected void convertGroovy(AST node){  while (node != null) {    int type=node.getType();switch (type) {case PACKAGE_DEF:      packageDef(node);    break;case STATIC_IMPORT:case IMPORT:  importDef(node);break;case TRAIT_DEF:case CLASS_DEF:classDef(node);break;case INTERFACE_DEF:interfaceDef(node);break;case METHOD_DEF:methodDef(node);break;case ENUM_DEF:enumDef(node);break;case ANNOTATION_DEF:annotationDef(node);break;default :{Statement statement=statement(node);output.addStatement(statement);}}node=node.getNextSibling();}}  }
class C{  public void addValue(double s,double t,double r){  TreeMap<Double,Double> tMap=this.map.get(s);  if (tMap == null) {    tMap=new TreeMap<Double,Double>();    this.map.put(s,tMap);  }  tMap.put(t,r);  if (this.maxValue == null || r > this.maxValue)   this.maxValue=r;  if (this.minValue == null || r < this.minValue)   this.minValue=r;  if (this.maxS == null || s > this.maxS)   this.maxS=s;  if (this.minS == null || s < this.minS)   this.minS=s;  if (this.maxT == null || t > this.maxT)   this.maxT=t;  if (this.minT == null || t < this.minT)   this.minT=t;}  }
class C{  public TradeOrder findById(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    TradeOrder instance=entityManager.find(TradeOrder.class,id);    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) byte dirTypeBackward(){  lastChar=text.charAt(charIndex - 1);  if (Character.isLowSurrogate(lastChar)) {    int codePoint=Character.codePointBefore(text,charIndex);    charIndex-=Character.charCount(codePoint);    return Character.getDirectionality(codePoint);  }  charIndex--;  byte dirType=getCachedDirectionality(lastChar);  if (isHtml) {    if (lastChar == '>') {      dirType=skipTagBackward();    } else     if (lastChar == ';') {      dirType=skipEntityBackward();    }  }  return dirType;}  }
class C{  private void addRequestHeaders(InnerState innerState,HttpGet request){  if (innerState.mContinuingDownload) {    if (innerState.mHeaderETag != null) {      request.addHeader("If-Match",innerState.mHeaderETag);    }    request.addHeader("Range","bytes=" + innerState.mBytesSoFar + "-");  }}  }
class C{  public MessageStoreImpl(){  this(DEFAULT_MAX_CONCURRENT_REQUEST);}  }
class C{  public static String slurp(String fileName) throws FileNotFoundException {  return slurp(fileName,Charset.defaultCharset().name());}  }
class C{  public ColumnExpression(String field){  m_field=field;}  }
class C{  public void testEngineGenerateCertPathLJava_util_List02(){  CertificateFactorySpi certFactorySpi=new extCertificateFactorySpi();  List<Certificate> list=new ArrayList<Certificate>();  try {    certFactorySpi.engineGenerateCertPath(list);    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }}  }
class C{  private void matchJoinedFields(JoinInfo joinInfo,QueryBuilder<?,?> joinedQueryBuilder) throws SQLException {  for (  FieldType fieldType : tableInfo.getFieldTypes()) {    FieldType foreignIdField=fieldType.getForeignIdField();    if (fieldType.isForeign() && foreignIdField.equals(joinedQueryBuilder.tableInfo.getIdField())) {      joinInfo.localField=fieldType;      joinInfo.remoteField=foreignIdField;      return;    }  }  for (  FieldType fieldType : joinedQueryBuilder.tableInfo.getFieldTypes()) {    if (fieldType.isForeign() && fieldType.getForeignIdField().equals(idField)) {      joinInfo.localField=idField;      joinInfo.remoteField=fieldType;      return;    }  }  throw new SQLException("Could not find a foreign " + tableInfo.getDataClass() + " field in "+ joinedQueryBuilder.tableInfo.getDataClass()+ " or vice versa");}  }
class C{  public GCspyPort(){  super(Options.set,"GCSpy Port","Port number for GCSpy server to connect with visualiser",0);}  }
