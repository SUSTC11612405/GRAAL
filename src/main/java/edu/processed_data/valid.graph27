class C{  public static byte[] hexStringToByteArray(String hexString){  int read=hexString.length();  byte[] byteArray=new byte[read / 2];  for (int i=0, j=0; i < read; i++, j++) {    String part=hexString.substring(i,i + 2);    byteArray[j]=new Short(Integer.toString(Integer.parseInt(part,16))).byteValue();    i++;  }  return byteArray;}  }
class C{  public final float readFloat() throws IOException {  return Float.intBitsToFloat(readInt());}  }
class C{  public void close() throws IOException {  try {    if (bufferedBlockCipher != null) {      byte[] buf=new byte[bufferedBlockCipher.getOutputSize(0)];      int outLen=bufferedBlockCipher.doFinal(buf,0);      if (outLen != 0) {        out.write(buf,0,outLen);      }    }  } catch (  Exception e) {    throw new IOException("Error closing stream: " + e.toString());  }  flush();  super.close();}  }
class C{  public void removeStyle(String nm){  styles.removeAttribute(nm);}  }
class C{  public boolean preSendResponse(AuthnRequest authnRequest,String hostProviderID,String realm,HttpServletRequest request,HttpServletResponse response,Object session,String reqID,String relayState) throws SAML2Exception {  return false;}  }
class C{  public TransactionDoesNotExistException(String message,Throwable cause){  super(message,cause);}  }
class C{  public PrinterLocation(String location,Locale locale){  super(location,locale);}  }
class C{  public PipedWriter(){}  }
class C{  public void modify(SSOToken token,String dn,ModificationItem mods[]) throws SMSException, SSOException {  int retry=0;  ModifyRequest request=copyModItemsToModifyRequest(DN.valueOf(dn),mods);  while (retry <= connNumRetry) {    debug.message("SMSLdapObject.modify() retry: {}",retry);    try (Connection conn=getConnection(token.getPrincipal())){      conn.modify(request);      debug.message("SMSLdapObject.modify(): Successfully modified entry: {}",dn);      break;    } catch (    LdapException e) {      ResultCode errorCode=e.getResult().getResultCode();      if (!retryErrorCodes.contains(errorCode) || retry == connNumRetry) {        debug.error("SMSLdapObject.modify(): Error modifying: {} By Principal {}",dn,token.getPrincipal().getName(),e);        throw new SMSException(e,"sms-entry-cannot-modify");      }      retry++;      try {        Thread.sleep(connRetryInterval);      } catch (      InterruptedException ex) {      }    }  }}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  if (bean == null || attribute == null || value == null) {    throw new BuildException("Must specify 'bean', 'attribute' and 'value' attributes");  }  log("Setting attribute " + attribute + " in bean "+ bean+ " to "+ value);  try {    execute("/jmxproxy/?set=" + URLEncoder.encode(bean,getCharset()) + "&att="+ URLEncoder.encode(attribute,getCharset())+ "&val="+ URLEncoder.encode(value,getCharset()));  } catch (  UnsupportedEncodingException e) {    throw new BuildException("Invalid 'charset' attribute: " + getCharset());  }}  }
class C{  public void removeBackup(String backupID) throws ConfigException {  if (!backups.containsKey(backupID)) {    throw new ConfigException(ERR_BACKUPDIRECTORY_NO_SUCH_BACKUP.get(backupID,path));  }  for (  BackupInfo backup : backups.values()) {    if (backup.dependsOn(backupID)) {      throw new ConfigException(ERR_BACKUPDIRECTORY_UNRESOLVED_DEPENDENCY.get(backupID,path,backup.getBackupID()));    }  }  backups.remove(backupID);}  }
class C{  public final int length(){  return (m_lastChunk << m_chunkBits) + m_firstFree;}  }
class C{  public static Set<String> assertValidProtocols(Set<String> expected,String[] protocols){  assertNotNull(protocols);  assertTrue(protocols.length != 0);  Set remainingProtocols=new HashSet<String>(expected);  Set unknownProtocols=new HashSet<String>();  for (  String protocol : protocols) {    if (!remainingProtocols.remove(protocol)) {      unknownProtocols.add(protocol);    }  }  assertEquals("Unknown protocols",Collections.EMPTY_SET,unknownProtocols);  return remainingProtocols;}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level2.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public boolean isBlock(){  return blockTag;}  }
class C{  public int hashCode(){  if (myhash == -1) {    if (timestamp == null) {      myhash=signerCertPath.hashCode();    } else {      myhash=signerCertPath.hashCode() + timestamp.hashCode();    }  }  return myhash;}  }
class C{  @Override public Foo fetchByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByField2(field2,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public SocketTimeoutException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public int timePassed(){  final long time=AnimationUtils.currentAnimationTimeMillis();  final long startTime=Math.min(mScrollerX.mStartTime,mScrollerY.mStartTime);  return (int)(time - startTime);}  }
class C{  @SideOnly(Side.CLIENT) public static void addHolderInfo(ItemStack stack,List<String> tooltip){  if (isTeslaHolder(stack,EnumFacing.DOWN))   addHolderInfo(getTeslaHolder(stack,EnumFacing.DOWN),tooltip);}  }
class C{  CrestAuditor(Debug debug,AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory,Context context,Request request){  Reject.ifFalse(context.containsContext(AuditInfoContext.class),"CREST auditing expects the audit context");  component=context.asContext(AuditInfoContext.class).getComponent();  this.debug=debug;  this.auditEventPublisher=auditEventPublisher;  this.auditEventFactory=auditEventFactory;  this.context=context;  this.request=request;  this.startTime=context.asContext(RequestAuditContext.class).getRequestReceivedTime();  if (context.containsContext(RealmContext.class)) {    this.realm=context.asContext(RealmContext.class).getRealm().asPath();  } else {    this.realm=NO_REALM;  }}  }
class C{  public String toString(boolean detail){  if (!detail || this.linkResolvedObj == null)   return this.toString();  return this.toString() + "; Link Resolved Object: " + this.linkResolvedObj;}  }
class C{  public void paintSliderTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public void addActionListener(ActionListener l){  listenerList.add(ActionListener.class,l);}  }
class C{  public void configChanged(ConfigurationActionEvent e){  if (debug.messageEnabled()) {    debug.message("SAML2ConfigService: configChanged");  }  setValues();}  }
class C{  byte[] wrap(final byte[] clearBytes,final int offset,final int len) throws SaslException {  return saslServer.wrap(clearBytes,offset,len);}  }
class C{  public void fetchAddressButtonHandler(View view){  if (lostApiClient.isConnected() && lastLocation != null) {    startIntentService();  }  addressRequested=true;  updateUiWidgets();}  }
class C{  public Duration multipliedBy(long multiplicand){  if (multiplicand == 0) {    return ZERO;  }  if (multiplicand == 1) {    return this;  }  return create(toSeconds().multiply(BigDecimal.valueOf(multiplicand)));}  }
class C{  public static Bitmap resizeImageByHeight(Bitmap image){  if (image == null) {    throw new NullPointerException("Bitmap not set!");  }  int newWidth=(image.getWidth() * getMaxSizeInPixel()) / image.getHeight();  return Bitmap.createScaledBitmap(image,newWidth,getMaxSizeInPixel(),true);}  }
class C{  private boolean verifyDnsNamePatterns(String hostName,List<String> dnsNamePatterns,X500Principal principal,boolean failureIsCritical) throws CertificateException {  for (  String namePattern : dnsNamePatterns) {    if (hostNameMatchesPattern(hostName,namePattern)) {      return true;    }  }  if (failureIsCritical) {    throw new CertificateException(ERR_CERT_NO_MATCH_DNS.get(principal,hostName).toString());  }  return false;}  }
class C{  private boolean handleOverwrite(final File sourceFile,final File destFile) throws IOException {  return FileUtils.delete(destFile) && FileUtils.copyFromSourceToDestFile(sourceFile,destFile,false,configuration);}  }
class C{  @Override public Foo fetchByPrimaryKey(long fooId){  return fetchByPrimaryKey((Serializable)fooId);}  }
class C{  protected void installDefaults(){  super.installDefaults();  String prefix=getPropertyPrefix();  Character echoChar=(Character)UIManager.getDefaults().get(prefix + ".echoChar");  if (echoChar != null) {    LookAndFeel.installProperty(getComponent(),"echoChar",echoChar);  }}  }
class C{  public void paintScrollBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Override public void close(){}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.validation.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new BatikTestDocumentBuilderFactory(new DocumentBuilderSetting[0]);  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public DefaultComboBoxModel(){  objects=new Vector<E>();}  }
class C{  public String toString(){  return ("MSISDNPrincipal:  " + name);}  }
class C{  public boolean stopEditing(JTree tree){  if (editingComponent != null && cellEditor.stopCellEditing()) {    completeEditing(false,false,true);    return true;  }  return false;}  }
class C{  public static int[] transformIntArray(Integer[] source){  int[] destin=new int[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public static void removeAttributeDefaultValues(String serviceName,String schemaType,String attributeName,Set defaultValues,String subSchema) throws UpgradeException {  String classMethod="UpgradeUtils:removeAttributeDefaultValues : ";  try {    ServiceSchema ss=getServiceSchema(serviceName,subSchema,schemaType);    if (ss != null) {      AttributeSchema attrSchema=ss.getAttributeSchema(attributeName);      for (Iterator i=defaultValues.iterator(); i.hasNext(); ) {        String defaultValue=(String)i.next();        attrSchema.removeDefaultValue(defaultValue);      }    }  } catch (  SSOException ssoe) {    throw new UpgradeException("Invalid SSOToken");  }catch (  SMSException sme) {    throw new UpgradeException("Error removing attribute" + " default vals");  }catch (  Exception e) {    UpgradeUtils.debug.error(classMethod + "Error removing attribute default vals",e);    throw new UpgradeException("Error removing attribute" + " default values");  }}  }
class C{  public static <T>Promise<T,ResourceException> generateNotFoundException(Request request){  return new NotFoundException("Resource '" + request.getResourcePath() + "' not found").asPromise();}  }
class C{  public boolean contains(Object o){synchronized (children) {    return children.containsKey(o);  }}  }
class C{  public void apply(Animator animator,float currValue,float endValue,float velocity){  apply(animator,currValue,endValue,velocity,Math.abs(endValue - currValue));}  }
class C{  @Override public int hashCode(){  return (month << 6) + day;}  }
class C{  static int applyMaskPenaltyRule3(ByteMatrix matrix){  int numPenalties=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      byte[] arrayY=array[y];      if (x + 6 < width && arrayY[x] == 1 && arrayY[x + 1] == 0 && arrayY[x + 2] == 1 && arrayY[x + 3] == 1 && arrayY[x + 4] == 1 && arrayY[x + 5] == 0 && arrayY[x + 6] == 1 && (isWhiteHorizontal(arrayY,x - 4,x) || isWhiteHorizontal(arrayY,x + 7,x + 11))) {        numPenalties++;      }      if (y + 6 < height && array[y][x] == 1 && array[y + 1][x] == 0 && array[y + 2][x] == 1 && array[y + 3][x] == 1 && array[y + 4][x] == 1 && array[y + 5][x] == 0 && array[y + 6][x] == 1 && (isWhiteVertical(array,x,y - 4,y) || isWhiteVertical(array,x,y + 7,y + 11))) {        numPenalties++;      }    }  }  return numPenalties * N3;}  }
class C{  public void testMovePointRightNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=28;  int shift=-18;  int resScale=46;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.movePointRight(shift);  assertTrue("incorrect scale",bNumber.scale() == resScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(a));}  }
class C{  public void unassignService(String serviceName) throws SMSException {  removeServiceConfig(serviceName);}  }
class C{  public TransactionUnavailableException(String message){  super(message);}  }
class C{  public ECPoint(BigInteger affineX,BigInteger affineY){  this.affineX=affineX;  if (this.affineX == null) {    throw new NullPointerException("affineX == null");  }  this.affineY=affineY;  if (this.affineY == null) {    throw new NullPointerException("affineY == null");  }}  }
class C{  protected void processEvent(AWTEvent e){  if (e instanceof ItemEvent) {    processItemEvent((ItemEvent)e);    return;  } else   if (e instanceof ActionEvent) {    processActionEvent((ActionEvent)e);    return;  }  super.processEvent(e);}  }
class C{  public org.w3c.dom.Element signWithWSSX509TokenProfile(org.w3c.dom.Document doc,java.security.cert.Certificate cert,String algorithm,java.util.List ids) throws XMLSignatureException {  return sp.signWithWSSX509TokenProfile(doc,cert,algorithm,ids);}  }
class C{  private static DereferenceAliasesPolicy register(final int intValue,final String name){  final DereferenceAliasesPolicy t=new DereferenceAliasesPolicy(intValue,name);  ELEMENTS[intValue]=t;  return t;}  }
class C{  private void startStreamingQuote(String apiKey,String userId,String publicToken){  String URIstring=STREAMING_QUOTE_WS_URL_TEMPLATE + "api_key=" + apiKey+ "&user_id="+ userId+ "&public_token="+ publicToken;  DateFormat quoteTableDtFmt=new SimpleDateFormat("ddMMyyyy");  quoteTableDtFmt.setTimeZone(timeZone);  String date=quoteTableDtFmt.format(Calendar.getInstance(timeZone).getTime());  if (ZStreamingConfig.isStreamingQuoteStoringRequired() && (streamingQuoteStorage != null)) {    streamingQuoteStorage.initializeJDBCConn();    streamingQuoteStorage.createDaysStreamingQuoteTable(date);  }  List<String> instrumentList=getInstrumentTokensList();  websocketThread=new WebsocketThread(URIstring,instrumentList,streamingQuoteStorage);  streamingQuoteStarted=websocketThread.startWS();  if (streamingQuoteStarted) {    Thread t=new Thread(websocketThread);    t.start();  } else {    System.out.println("ZStreamingQuoteControl.startStreamingQuote(): ERROR: WebSocket Streaming Quote not started !!!");  }}  }
class C{  @Deprecated public ShapelessRecipe addIngredient(int count,Material ingredient,int rawdata){  Validate.isTrue(ingredients.size() + count <= 9,"Shapeless recipes cannot have more than 9 ingredients");  if (rawdata == -1) {    rawdata=Short.MAX_VALUE;  }  while (count-- > 0) {    ingredients.add(new ItemStack(ingredient,1,(short)rawdata));  }  return this;}  }
class C{  public String toString(){  return attr;}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  private void initMXBean(){  logger.info("Intializing Diagnostics MXBean.");  final MBeanServer server=ManagementFactory.getPlatformMBeanServer();  try {    mxbeanName=new ObjectName(DiagnosticsMXBean.class.getPackage() + ":type=" + DiagnosticsMXBean.class.getSimpleName());    final DiagnosticsMXBean mbean=new DiagnosticsMXBeanImpl(config,this);    server.registerMBean(mbean,mxbeanName);  } catch (  MalformedObjectNameException|InstanceAlreadyExistsException|MBeanRegistrationException|NotCompliantMBeanException e) {    logger.error("Unable to register DiagnosticsMBean",e);  }}  }
class C{  private void unlinkCancelledWaiters(){  Node t=firstWaiter;  Node trail=null;  while (t != null) {    Node next=t.nextWaiter;    if (t.waitStatus != Node.CONDITION) {      t.nextWaiter=null;      if (trail == null)       firstWaiter=next; else       trail.nextWaiter=next;      if (next == null)       lastWaiter=trail;    } else     trail=t;    t=next;  }}  }
class C{  public int next(){  int result=_currentNode;  if (_nodeType >= DTM.NTYPES) {    if (_nodeType != getExpandedTypeID(_currentNode)) {      result=END;    }  } else   if (_nodeType != NULL) {    if (_nodeType != getNodeType(_currentNode)) {      result=END;    }  }  _currentNode=END;  return returnNode(result);}  }
class C{  private void doTestSendAck(boolean sameBranch){  System.out.println("doTestSendAck " + sameBranch);  try {    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException e) {      throw new TckInternalError("Failed to register a SipListener with the RI.",e);    }    Response ok=null;    try {      ok=riMessageFactory.createResponse(Response.OK,riInvite);      ok.addHeader(createRiInviteRequest(null,null,null).getHeader(ContactHeader.NAME));      ToHeader okToHeader=(ToHeader)ok.getHeader(ToHeader.NAME);      okToHeader.setTag(riToTag);      ServerTransaction riST=riSipProvider.getNewServerTransaction(riInvite);      riST.getDialog();      riST.sendResponse(ok);    } catch (    Exception e) {      throw new TckInternalError("Failed to create and send an OK response",e);    }    waitForMessage();    ResponseEvent okRespEvt=eventCollector.extractCollectedResponseEvent();    if (okRespEvt == null || okRespEvt.getResponse() == null)     throw new TiUnexpectedError("The TI did not dispatch an OK response.");    String okBranch=((ViaHeader)okRespEvt.getResponse().getHeader(ViaHeader.NAME)).getBranch();    assertEquals(DialogState.CONFIRMED,dialog.getState());    try {      eventCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with the RI",ex);    }    Request ack=null;    try {      CSeqHeader cseq=(CSeqHeader)okRespEvt.getResponse().getHeader(CSeqHeader.NAME);      ack=dialog.createAck(cseq.getSeqNumber());      if (sameBranch) {        ViaHeader via=(ViaHeader)ack.getHeader("Via");        via.setBranch(((ViaHeader)riInvite.getHeader("Via")).getBranch());      }    } catch (    SipException ex) {      throw new TiUnexpectedError("Failed to create an ACK request.",ex);    }    try {      dialog.sendAck(ack);    } catch (    Throwable ex) {      ex.printStackTrace();      fail("SipException; Failed to send an ACK request using Dialog.sendAck()");    }    waitForMessage();    RequestEvent ackEvt=eventCollector.extractCollectedRequestEvent();    assertNotNull("No requestEvent sent by Dialog.sendAck() was received by the RI",ackEvt);    assertNotNull("The request sent by Dialog.sendAck() was not received by the RI",ackEvt.getRequest());    if (!sameBranch) {      String ackBranchId=((ViaHeader)ackEvt.getRequest().getHeader(ViaHeader.NAME)).getBranch();      super.assertNotSame("ACK branch ID must differ from INVITE OK branch ID",ackBranchId,okBranch);    }  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  private Expression next_exp(boolean expectingStartNode) throws SyntaxException {  nextNode(false);  return get_exp(expectingStartNode);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecommentnodename.class,args);}  }
class C{  private int readOneLine(InputStream is){  int read=0;  clearBuffer();  try {    log("Reading one line: started =" + readStarted + " avail="+ is.available());    StringBuilder log=new StringBuilder();    while ((!readStarted) || (is.available() > 0)) {      int data=is.read();      if (data == -1) {        log("EOF returned");        return -1;      }      buf[read]=(byte)data;      log.append((char)data);      readStarted=true;      if (buf[read++] == (byte)'\n') {        log(log.toString());        return read;      }    }  } catch (  IOException e) {    log("IOException from readOneLine");  }  return read;}  }
class C{  public final void testGetP(){  BigInteger p=BigInteger.valueOf(23L);  assertTrue(p.equals(new ECFieldFp(p).getP()));}  }
class C{  private static void warmUpPool(ODatabaseDocumentPool pool,String dbURL,String user,String password,int minSize){  logger.trace("Warming up pool up to minSize {}",Integer.valueOf(minSize));  List<ODatabaseDocumentTx> list=new ArrayList<ODatabaseDocumentTx>();  for (int count=0; count < minSize; count++) {    logger.trace("Warming up entry {}",Integer.valueOf(count));    try {      list.add(pool.acquire(dbURL,user,password));    } catch (    Exception ex) {      logger.warn("Issue in warming up db pool, entry {}",Integer.valueOf(count),ex);    }  }  for (  ODatabaseDocumentTx entry : list) {    try {      if (entry != null) {        entry.close();      }    } catch (    Exception ex) {      logger.warn("Issue in connection close during warming up db pool, entry {}",entry,ex);    }  }}  }
class C{  public void requestLastLoginTime(){  operations.add(PasswordPolicyStateOperationType.GET_LAST_LOGIN_TIME);}  }
class C{  public boolean remove(Object key){  try {    Object obj=hash.removeObject(key);    if (obj != null) {      notifyObservers();      return true;    }    return false;  } catch (  KeyNotFoundException k) {    k.printStackTrace();    return false;  }catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  public boolean matchesEntry(Entry entry) throws DirectoryException {  SearchScope scope=getScope();  if (scope == null) {    scope=SearchScope.BASE_OBJECT;  }  return entry.matchesBaseAndScope(getBaseDN(),scope) && getFilter().matchesEntry(entry);}  }
class C{  private ReplicationServer createReplicationServer(String testCase,int degradedStatusThreshold) throws Exception {  SortedSet<String> replServers=new TreeSet<>();  String dir="stateMachineTest" + RS1_ID + testCase+ "Db";  ReplServerFakeConfiguration conf=new ReplServerFakeConfiguration(rs1Port,dir,0,RS1_ID,0,100,replServers,1,1000,degradedStatusThreshold);  return new ReplicationServer(conf);}  }
class C{  public void registerKeyStroke(KeyStroke k,JComponent c){  Container topContainer=getTopAncestor(c);  if (topContainer == null) {    return;  }  Hashtable keyMap=containerMap.get(topContainer);  if (keyMap == null) {    keyMap=registerNewTopContainer(topContainer);  }  Object tmp=keyMap.get(k);  if (tmp == null) {    keyMap.put(k,c);  } else   if (tmp instanceof Vector) {    Vector v=(Vector)tmp;    if (!v.contains(c)) {      v.addElement(c);    }  } else   if (tmp instanceof JComponent) {    if (tmp != c) {      Vector<JComponent> v=new Vector<JComponent>();      v.addElement((JComponent)tmp);      v.addElement(c);      keyMap.put(k,v);    }  } else {    System.out.println("Unexpected condition in registerKeyStroke");    Thread.dumpStack();  }  componentKeyStrokeMap.put(new ComponentKeyStrokePair(c,k),topContainer);  if (topContainer instanceof EmbeddedFrame) {    ((EmbeddedFrame)topContainer).registerAccelerator(k);  }}  }
class C{  void processDragMouseMoved(DragSourceDragEvent dsde){  DragSourceMotionListener dsml=motionListener;  if (dsml != null) {    dsml.dragMouseMoved(dsde);  }}  }
class C{  public void reset() throws IOException {  stream.reset();  framePos=markpos;  pushBackLen=markPushBackLen;  if (pushBackLen > 0) {    if (pushBackBuffer == null) {      pushBackBuffer=new byte[frameSize - 1];    }    System.arraycopy(markPushBackBuffer,0,pushBackBuffer,0,pushBackLen);  }}  }
class C{  public ELParseException(){  super();}  }
class C{  public int write(ByteBuffer buf,NioChannel socket,long writeTimeout) throws IOException {  SelectionKey key=socket.getIOChannel().keyFor(socket.getPoller().getSelector());  if (key == null)   throw new IOException("Key no longer registered");  KeyReference reference=keyReferenceStack.pop();  if (reference == null) {    reference=new KeyReference();  }  NioSocketWrapper att=(NioSocketWrapper)key.attachment();  int written=0;  boolean timedout=false;  int keycount=1;  long time=System.currentTimeMillis();  try {    while ((!timedout) && buf.hasRemaining()) {      if (keycount > 0) {        int cnt=socket.write(buf);        if (cnt == -1)         throw new EOFException();        written+=cnt;        if (cnt > 0) {          time=System.currentTimeMillis();          continue;        }      }      try {        if (att.getWriteLatch() == null || att.getWriteLatch().getCount() == 0)         att.startWriteLatch(1);        poller.add(att,SelectionKey.OP_WRITE,reference);        if (writeTimeout < 0) {          att.awaitWriteLatch(Long.MAX_VALUE,TimeUnit.MILLISECONDS);        } else {          att.awaitWriteLatch(writeTimeout,TimeUnit.MILLISECONDS);        }      } catch (      InterruptedException ignore) {      }      if (att.getWriteLatch() != null && att.getWriteLatch().getCount() > 0) {        keycount=0;      } else {        keycount=1;        att.resetWriteLatch();      }      if (writeTimeout > 0 && (keycount == 0))       timedout=(System.currentTimeMillis() - time) >= writeTimeout;    }    if (timedout)     throw new SocketTimeoutException();  }  finally {    poller.remove(att,SelectionKey.OP_WRITE);    if (timedout && reference.key != null) {      poller.cancelKey(reference.key);    }    reference.key=null;    keyReferenceStack.push(reference);  }  return written;}  }
class C{  public String formatDateTime(final Date date,final String format){  final DateTime dateTime=new DateTime(date,chrono);  return format == null ? dateTime.toString() : dateTime.toString(format);}  }
class C{  void tokenize(String pat,Vector targetStrings) throws javax.xml.transform.TransformerException {  m_compiler.m_currentPattern=pat;  m_patternMapSize=0;  int initTokQueueSize=((pat.length() < OpMap.MAXTOKENQUEUESIZE) ? pat.length() : OpMap.MAXTOKENQUEUESIZE) * 5;  m_compiler.m_opMap=new OpMapVector(initTokQueueSize,OpMap.BLOCKTOKENQUEUESIZE * 5,OpMap.MAPINDEX_LENGTH);  int nChars=pat.length();  int startSubstring=-1;  int posOfNSSep=-1;  boolean isStartOfPat=true;  boolean isAttrName=false;  boolean isNum=false;  int nesting=0;  for (int i=0; i < nChars; i++) {    char c=pat.charAt(i);switch (c) {case '\"':{        if (startSubstring != -1) {          isNum=false;          isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);          isAttrName=false;          if (-1 != posOfNSSep) {            posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,i);          } else {            addToTokenQueue(pat.substring(startSubstring,i));          }        }        startSubstring=i;        for (i++; (i < nChars) && ((c=pat.charAt(i)) != '\"'); i++)         ;        if (c == '\"' && i < nChars) {          addToTokenQueue(pat.substring(startSubstring,i + 1));          startSubstring=-1;        } else {          m_processor.error(XPATHErrorResources.ER_EXPECTED_DOUBLE_QUOTE,null);        }      }    break;case '\'':  if (startSubstring != -1) {    isNum=false;    isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);    isAttrName=false;    if (-1 != posOfNSSep) {      posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,i);    } else {      addToTokenQueue(pat.substring(startSubstring,i));    }  }startSubstring=i;for (i++; (i < nChars) && ((c=pat.charAt(i)) != '\''); i++) ;if (c == '\'' && i < nChars) {addToTokenQueue(pat.substring(startSubstring,i + 1));startSubstring=-1;} else {m_processor.error(XPATHErrorResources.ER_EXPECTED_SINGLE_QUOTE,null);}break;case 0x0A:case 0x0D:case ' ':case '\t':if (startSubstring != -1) {isNum=false;isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);isAttrName=false;if (-1 != posOfNSSep) {posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,i);} else {addToTokenQueue(pat.substring(startSubstring,i));}startSubstring=-1;}break;case '@':isAttrName=true;case '-':if ('-' == c) {if (!(isNum || (startSubstring == -1))) {break;}isNum=false;}case '(':case '[':case ')':case ']':case '|':case '/':case '*':case '+':case '=':case ',':case '\\':case '^':case '!':case '$':case '<':case '>':if (startSubstring != -1) {isNum=false;isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);isAttrName=false;if (-1 != posOfNSSep) {posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,i);} else {addToTokenQueue(pat.substring(startSubstring,i));}startSubstring=-1;} else if (('/' == c) && isStartOfPat) {isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);} else if ('*' == c) {isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);isAttrName=false;}if (0 == nesting) {if ('|' == c) {if (null != targetStrings) {recordTokenString(targetStrings);}isStartOfPat=true;}}if ((')' == c) || (']' == c)) {nesting--;} else if (('(' == c) || ('[' == c)) {nesting++;}addToTokenQueue(pat.substring(i,i + 1));break;case ':':if (i > 0) {if (posOfNSSep == (i - 1)) {if (startSubstring != -1) {if (startSubstring < (i - 1)) addToTokenQueue(pat.substring(startSubstring,i - 1));}isNum=false;isAttrName=false;startSubstring=-1;posOfNSSep=-1;addToTokenQueue(pat.substring(i - 1,i + 1));break;} else {posOfNSSep=i;}}default :if (-1 == startSubstring) {startSubstring=i;isNum=Character.isDigit(c);} else if (isNum) {isNum=Character.isDigit(c);}}}if (startSubstring != -1) {isNum=false;isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);if ((-1 != posOfNSSep) || ((m_namespaceContext != null) && (m_namespaceContext.handlesNullPrefixes()))) {posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,nChars);} else {addToTokenQueue(pat.substring(startSubstring,nChars));}}if (0 == m_compiler.getTokenQueueSize()) {m_processor.error(XPATHErrorResources.ER_EMPTY_EXPRESSION,null);} else if (null != targetStrings) {recordTokenString(targetStrings);}m_processor.m_queueMark=0;}  }
class C{  public void save(java.io.ObjectOutputStream p_object_stream){  try {    p_object_stream.writeObject(filter_string.getText());  } catch (  java.io.IOException e) {    System.out.println("WindowObjectListWithFilter.save: save failed");  }  super.save(p_object_stream);}  }
class C{  public void write(int c) throws IOException {  out.write(c);}  }
class C{  public void abort() throws AuthLoginException {  authDebug.message("AuthContextLocal::abort()");  try {    amlc.abort();  } catch (  Exception e) {    if (authDebug.messageEnabled()) {      authDebug.message("Exception in AMLoginContext::abort() " + e.getMessage());    }    throw new AuthLoginException(amAuthContextLocal,"abortError",null,e);  }  loginStatus=AuthContext.Status.COMPLETED;}  }
class C{  @Override public void invalidateSession(){  session.invalidate();}  }
class C{  public static void checkVersionMismatch(final Connection connection) throws ConfigException {  final BuildVersion binaryVersion=BuildVersion.binaryVersion(connection);  final BuildVersion instanceVersion=BuildVersion.instanceVersion();  if (!binaryVersion.equals(instanceVersion)) {    throw new ConfigException(ERR_BUILDVERSION_MISMATCH.get(binaryVersion,instanceVersion));  }}  }
class C{  public Rectangle(float x,float y,float width,float height){  this.x=x;  this.y=y;  this.width=width;  this.height=height;}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs)   m_selectExpression.getExpression().callVisitors(m_selectExpression,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  private void alignBelowBaseline(GridBagConstraints cons,Rectangle r,int cellY,int cellHeight){  if (layoutInfo.hasBaseline(cons.tempY)) {    if (layoutInfo.hasConstantDescent(cons.tempY)) {      r.y=cellY + cellHeight - layoutInfo.maxDescent[cons.tempY];    } else {      r.y=cellY + layoutInfo.maxAscent[cons.tempY];    }    if (cons.isVerticallyResizable()) {      r.height=cellY + cellHeight - r.y - cons.insets.bottom;    }  } else {    centerVertically(cons,r,cellHeight);  }}  }
class C{  public void test_write$BII_6() throws Exception {  MessageDigest md=new MyMessageDigest1();  byte[] bytes=new byte[]{1,2};  DigestOutputStream dig=new DigestOutputStream(new ByteArrayOutputStream(),md);  try {    dig.write(null,-1,0);    fail("No expected IllegalArgumentException");  } catch (  IllegalArgumentException e) {  }  try {    dig.write(bytes,0,bytes.length + 1);    fail("No expected IllegalArgumentException");  } catch (  IllegalArgumentException e) {  }  try {    dig.write(bytes,-1,1);    fail("No expected IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    dig.write(bytes,0,-1);    fail("No expected IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  public Artifact createArtifact(String encodedArtifactValue) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ARTIFACT,encodedArtifactValue);  if (obj == null) {    return new ArtifactImpl(encodedArtifactValue);  } else {    return (Artifact)obj;  }}  }
class C{  private List<String> dumpResourceConfig(TypeChunk chunk,boolean showKeys){  Map<Integer,TypeChunk.Entry> entries=chunk.getEntries();  double density=1.0 * entries.size() / chunk.getTotalEntryCount();  int size=chunk.getOriginalChunkSize();  List<String> keyNames=new ArrayList<>();  if (showKeys) {    for (    TypeChunk.Entry entry : entries.values()) {      keyNames.add(entry.key());    }  }  String keys=Joiner.on(' ').join(keyNames);  return ImmutableList.<String>builder().add(chunk.getTypeName()).add(chunk.getConfiguration().toString()).add(String.valueOf(size)).add(String.valueOf(chunk.getTotalEntryCount() - entries.size())).add(String.valueOf(entries.size())).add(String.format("%.4f",density)).add(keys).addAll(getConfigurationParts(chunk.getConfiguration())).build();}  }
class C{  protected boolean testIfCondition(){  if (ifCondition == null || "".equals(ifCondition)) {    return true;  }  return getProperty(ifCondition) != null;}  }
class C{  public void testUserDataHandlerNotifiedOfShallowImports(){  RecordingHandler handler=new RecordingHandler();  name.setUserData("a","apple",handler);  name.setUserData("b","banana",handler);  standard.setUserData("c","cat",handler);  waffles.setUserData("d","dog",handler);  Document newDocument=builder.newDocument();  Element importedName=(Element)newDocument.importNode(name,false);  Attr importedStandard=importedName.getAttributeNode("a:standard");  Set<String> expected=new HashSet<String>();  expected.add(notification(NODE_IMPORTED,"a","apple",name,importedName));  expected.add(notification(NODE_IMPORTED,"b","banana",name,importedName));  expected.add(notification(NODE_IMPORTED,"c","cat",standard,importedStandard));  assertEquals(expected,handler.calls);}  }
class C{  public long roundTripTime(long timeout,TimeUnit unit) throws InterruptedException {  if (latch.await(timeout,unit)) {    return received - sent;  } else {    return -2;  }}  }
class C{  @AndroidOnly("The RI doesn't throw the IllegalStateException.") public void test_unwrap_05(){  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer bb=ByteBuffer.allocate(10);  SSLEngine sse=getEngine(host,port);  try {    sse.unwrap(bb,bbA,0,bbA.length);    fail("IllegalStateException wasn't thrown");  } catch (  IllegalStateException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalStateException");  }}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  ElemVariable v=(ElemVariable)handler.getElemTemplateElement();  handler.getStylesheet().appendChild(v);  handler.getStylesheet().setVariable(v);  super.endElement(handler,uri,localName,rawName);}  }
class C{  public SwallowedExceptionLogger(final Log log,final boolean logExpiredConnections){  this.log=log;  this.logExpiredConnections=logExpiredConnections;}  }
class C{  public void endContent(){}  }
class C{  public Builder subject(X500Principal subject){  this.subject=subject;  return this;}  }
class C{  public ArrayDeque(){  elements=new Object[16];}  }
class C{  public Index read(Identifier identifier){  return indexesRepo.read(identifier);}  }
class C{  public Event(String type){  this.type=type;}  }
class C{  public boolean verifyXMLSignature(org.w3c.dom.Element element) throws XMLSignatureException {  if (element == null) {    SAMLUtilsCommon.debug.error("signXML: element is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  return verifyXMLSignature(XMLUtils.print(element));}  }
class C{  public static Entry modifyEntry(final Entry entry,final Modification change) throws LdapException {  return modifyEntry(entry,change,null);}  }
class C{  @Override public CancelResult cancelOperation(int messageID,CancelRequest cancelRequest){  return new CancelResult(ResultCode.CANNOT_CANCEL,LocalizableMessage.raw("Jmx operations cannot be cancelled"));}  }
class C{  public void grantWritePermission(Collection attributeNames){  Iterator it=attributeNames.iterator();  if (it != null) {    while (it.hasNext()) {      String temp=(String)it.next();      writables.add(temp.toLowerCase());    }  }}  }
class C{  public void testSetBitPositiveInside3(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=45;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void addSubConfig(String subConfigName,String subConfigId,int priority,Map attrs) throws SMSException, SSOException {  validateServiceConfigImpl();  if (sc.isNewEntry()) {    scm.createOrganizationConfig(sc.getOrganizationName(),null);    checkAndCreateComponents(sc.getDN());  }  String subSchemaIdentifier=subConfigId == null ? subConfigName : subConfigId;  ServiceSchemaImpl nss=ss.getSubSchema(subSchemaIdentifier);  if (nss == null) {    String[] args={subSchemaIdentifier};    throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-invalid-add-sub-config-unknown-schema-name",args));  }  if (!nss.supportsMultipleConfigurations() && !getSubConfigNames().isEmpty()) {    String[] args={subConfigName};    throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-invalid-add-sub-config",args));  }  StringBuilder sb=new StringBuilder(8);  sb.append(priority);  CreateServiceConfig.createSubConfigEntry(token,("ou=" + subConfigName + ","+ sc.getDN()),nss,subConfigId,sb.toString(),SMSUtils.copyAttributes(attrs),sc.getOrganizationName());}  }
class C{  public static String encodeOffline(byte[] passwordBytes) throws DirectoryException {  byte[] saltBytes=new byte[NUM_SALT_BYTES];  int iterations=10000;  final ByteString password=ByteString.wrap(passwordBytes);  byte[] digestBytes=encodeWithRandomSalt(password,saltBytes,iterations);  byte[] hashPlusSalt=concatenateHashPlusSalt(saltBytes,digestBytes);  return '{' + STORAGE_SCHEME_NAME_PBKDF2 + '}'+ iterations+ ':'+ Base64.encode(hashPlusSalt);}  }
class C{  public byte[] signBuffer(java.lang.String data,java.lang.String certAlias,java.lang.String algorithm) throws FSSignatureException {  return sp.signBuffer(data,certAlias,algorithm);}  }
class C{  public RequestSecurityTokenResponse(Element root) throws WSFederationException {  String classMethod="RequestSecurityTokenResponse:" + "RequestSecurityTokenResponse(Element)";  if (root == null) {    if (debug.messageEnabled()) {      debug.message(classMethod + "null input.");    }    throw new WSFederationException(WSFederationUtils.bundle.getString("nullInput"));  }  String tag=null;  if (((tag=root.getLocalName()) == null) || (!tag.equals(WSFederationConstants.RSTR_TAG_NAME))) {    if (debug.messageEnabled()) {      debug.message(classMethod + "wrong input.");    }    throw new WSFederationException(WSFederationUtils.bundle.getString("wrongInput"));  }  if (debug.messageEnabled()) {    debug.message(classMethod + "found RequestSecurityTokenResponse.");  }  NodeList list=root.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    Node child=list.item(i);    String name=child.getLocalName();    if (debug.messageEnabled()) {      debug.message(classMethod + "examining:" + name);    }    if (name.equals(WSFederationConstants.APPLIESTO_TAG_NAME)) {      NodeList nodes=((Element)child).getElementsByTagNameNS(WSFederationConstants.WS_ADDRESSING_URI,WSFederationConstants.ADDRESS_TAG_NAME);      if (nodes == null || nodes.getLength() == 0) {        continue;      }      String appliesTo=nodes.item(0).getTextContent();      if (debug.messageEnabled()) {        debug.message(classMethod + "found AppliesTo:" + appliesTo);      }    } else     if (name.equals(WSFederationConstants.RST_TAG_NAME)) {      if (debug.messageEnabled()) {        debug.message(classMethod + "found RequestedSecurityToken");      }      token=RequestedSecurityTokenFactory.createToken(child);    }  }}  }
class C{  static public void addAuxiliaryLookAndFeel(LookAndFeel laf){  maybeInitialize();  if (!laf.isSupportedLookAndFeel()) {    return;  }  Vector<LookAndFeel> v=getLAFState().auxLookAndFeels;  if (v == null) {    v=new Vector<LookAndFeel>();  }  if (!v.contains(laf)) {    v.addElement(laf);    laf.initialize();    getLAFState().auxLookAndFeels=v;    if (getLAFState().multiLookAndFeel == null) {      getLAFState().multiLookAndFeel=getMultiLookAndFeel();    }  }}  }
class C{  public String verifyAndGetOrgDN(SSOToken token,String entryDN,String childDN) throws AMException {  try {    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,entryDN,childDN};    return ((String)client.send(client.encodeMessage("verifyAndGetOrgDN",objs),sessionCookies.getLBCookie(tokenID),null));  } catch (  AMRemoteException amrex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.verifyAndGetOrgDN: entryDN=" + entryDN + ";  AMRemoteException caught exception=",amrex);    }    throw convertException(amrex);  }catch (  RemoteException rex) {    getDebug().error("RemoteServicesImpl.verifyAndGetOrgDN: caught exception=",rex);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  SSOException ssoe) {    getDebug().error("RemoteServicesImpl.verifyAndGetOrgDN: caught " + "SSOException=",ssoe);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  Exception ex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.verifyAndGetOrgDN: entryDN=" + entryDN + ";  caught exception=",ex);    }    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  String s1=getTimeStampAsString();  String s2=getDelayAsString();  if (s1.equals("") && s2.equals(""))   return retval.append("");  if (!s1.equals(""))   retval.append(s1);  if (!s2.equals(""))   retval.append(" ").append(s2);  return retval;}  }
class C{  public boolean isAuthenticated(){  return isAuthenticated;}  }
class C{  public String debugDump(int indentation){  stringRepresentation="";  String indent=new Indentation(indentation).getIndentation();  String className=this.getClass().getName();  sprint(indent + className);  sprint(indent + "{");  for (Iterator<HDR> it=hlist.iterator(); it.hasNext(); ) {    HDR sipHeader=(HDR)it.next();    sprint(indent + sipHeader.debugDump());  }  sprint(indent + "}");  return stringRepresentation;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  if (size < 0)   throw new java.io.StreamCorruptedException("Illegal mappings count: " + size);  init(capacity(size));  for (int i=0; i < size; i++) {    @SuppressWarnings("unchecked") K key=(K)s.readObject();    @SuppressWarnings("unchecked") V value=(V)s.readObject();    putForCreate(key,value);  }}  }
class C{  public boolean entryExists(SSOToken token,String objName){  boolean exists=false;  if (objName == null || objName.length() == 0) {    throw new IllegalArgumentException("SMSEnhancedFlatFileObject.entryExists: " + "One or more arguments is null or empty.");  }  mRWLock.readRequest();  try {    exists=root.isExists(mRootDir,objName);  }  finally {    mRWLock.readDone();  }  return exists;}  }
class C{  public boolean reset(){  boolean wasReset=false;  if (super.reset()) {    wasReset=true;  }  return wasReset;}  }
class C{  public String marshal(String s){  return s;}  }
class C{  @Override public boolean isRequestedSessionIdFromCookie(){  return this._getHttpServletRequest().isRequestedSessionIdFromCookie();}  }
class C{  public IllegalThreadStateException(String s){  super(s);}  }
class C{  public Builder optionalAttributes(final Collection<String> attributeNamesOrOIDs){  this.optionalAttributes.addAll(attributeNamesOrOIDs);  return this;}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  public static RealAttributesOnlyRequestControl newControl(final boolean isCritical){  return isCritical ? CRITICAL_INSTANCE : NONCRITICAL_INSTANCE;}  }
class C{  public ProviderDoesNotExistException(String message){  super(message);}  }
class C{  private void checkColType(int SQLType) throws SQLException {  try {    Class<?> c=java.sql.Types.class;    Field[] publicFields=c.getFields();    int fieldValue=0;    for (int i=0; i < publicFields.length; i++) {      fieldValue=publicFields[i].getInt(c);      if (fieldValue == SQLType) {        return;      }    }  } catch (  Exception e) {    throw new SQLException(e.getMessage());  }  throw new SQLException("Invalid SQL type for column");}  }
class C{  private static Object createObjectFromFactories(Object obj,Name name,Context nameCtx,Hashtable<?,?> environment) throws Exception {  FactoryEnumeration factories=ResourceManager.getFactories(Context.OBJECT_FACTORIES,environment,nameCtx);  if (factories == null)   return null;  ObjectFactory factory;  Object answer=null;  while (answer == null && factories.hasMore()) {    factory=(ObjectFactory)factories.next();    answer=factory.getObjectInstance(obj,name,nameCtx,environment);  }  return answer;}  }
class C{  public boolean isWriteable(){  File file=new File(pathname);  if (!file.isAbsolute()) {    file=new File(System.getProperty(Globals.CATALINA_BASE_PROP),pathname);  }  File dir=file.getParentFile();  return dir.exists() && dir.isDirectory() && dir.canWrite();}  }
class C{  private LayoutManager createLayout(){  return new TitlePaneLayout();}  }
class C{  @Override public boolean isStretchWidth(){  return true;}  }
class C{  public static String[] split(final String value,final String regex){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return value.split(regex);}  }
class C{  public String toPhrase(){  return toLowerUnderscore().replace('_',' ');}  }
class C{  public void logError(String message,Exception ex){  Logger logger=this.getLogger();  logger.error(message,ex);}  }
class C{  public final static short secondaryOrder(int order){  order=order & RBCollationTables.SECONDARYORDERMASK;  return ((short)(order >> RBCollationTables.SECONDARYORDERSHIFT));}  }
class C{  public ValueMember(){}  }
class C{  public Name(String name){  if (name == null) {    throw new NullPointerException("name");  }  if (!isValid(name)) {    throw new IllegalArgumentException(name);  }  this.name=name.intern();}  }
class C{  public static String printUnsignedShort(int val){  if (theConverter == null)   initConverter();  return theConverter.printUnsignedShort(val);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.RSAKeyValueType createRSAKeyValueType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.RSAKeyValueTypeImpl();}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  this.forEncryption=forEncryption;  reset();  if (params instanceof ParametersWithRandom) {    ParametersWithRandom p=(ParametersWithRandom)params;    padding.init(p.getRandom());    cipher.init(forEncryption,p.getParameters());  } else {    padding.init(null);    cipher.init(forEncryption,params);  }}  }
class C{  private void resumeLogging(){  try {    mLogcatViewerService.resume();  } catch (  RemoteException e) {    Log.e(LOG_TAG,"Resuming logcat failed");  }}  }
class C{  private void notifyEntriesDeleted(Collection<BrowserNodeInfo> deletedNodes){  TreePath pathToSelect=null;  for (  BrowserNodeInfo nodeInfo : deletedNodes) {    TreePath parentPath=controller.notifyEntryDeleted(nodeInfo);    if (pathToSelect != null) {      if (parentPath.getPathCount() < pathToSelect.getPathCount()) {        pathToSelect=parentPath;      }    } else {      pathToSelect=parentPath;    }  }  if (pathToSelect != null) {    TreePath selectedPath=controller.getTree().getSelectionPath();    if (selectedPath == null) {      controller.getTree().setSelectionPath(pathToSelect);    } else     if (!selectedPath.equals(pathToSelect) && pathToSelect.getPathCount() < selectedPath.getPathCount()) {      controller.getTree().setSelectionPath(pathToSelect);    }  }}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public com.sun.identity.wsfederation.jaxb.wspolicy.OperatorContentType createOperatorContentType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wspolicy.impl.OperatorContentTypeImpl();}  }
class C{  private void cancelCurrentSound(Clip clip){  Clip lastClip=null;synchronized (audioLock) {    if (clip == null || clip == clipPlaying) {      lastClip=clipPlaying;      clipPlaying=null;    }  }  if (lastClip != null) {    lastClip.removeLineListener(this);    lastClip.close();  }}  }
class C{  public static Topic of(String identifier){  return new Topic(identifier);}  }
class C{  public Set searchAssignableDynamicGroups(String wildcard,int level,String groupSearchTemplate,Map avPairs) throws AMException, SSOException {  if (AMCompliance.isComplianceUserDeletionEnabled() && AMCompliance.isAncestorOrgDeleted(super.token,super.entryDN,AMObject.ORGANIZATION)) {    if (debug.warningEnabled()) {      debug.warning("AMOrganization.searchAssDynGroup: " + "ancestor org is deleted for: " + super.entryDN + " :returning empty set");    }    return Collections.EMPTY_SET;  }  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP,groupSearchTemplate),wildcard,avPairs,level);}  }
class C{  public void addEntry(java.security.Principal principal,Guid guid,AttrSet attrSet) throws UMSException {  String id=guid.getDn();  ResultCode errorCode;  try {    AddRequest request=LDAPRequests.newAddRequest(id);    for (    Attribute attribute : attrSet.toLDAPAttributeSet()) {      request.addAttribute(attribute);    }    int retry=0;    while (retry <= connNumRetry) {      if (debug.messageEnabled()) {        debug.message("DataLayer.addEntry retry: " + retry);      }      try (Connection conn=getConnection(principal)){        conn.add(request);        return;      } catch (      LdapException e) {        errorCode=e.getResult().getResultCode();        if (!retryErrorCodes.contains(errorCode) || retry == connNumRetry) {          throw e;        }        retry++;        try {          Thread.sleep(connRetryInterval);        } catch (        InterruptedException ex) {        }      }    }  } catch (  LdapException e) {    if (debug.warningEnabled()) {      debug.warning("Exception in DataLayer.addEntry for DN: " + id,e);    }    errorCode=e.getResult().getResultCode();    String[] args={id};    if (ResultCode.ENTRY_ALREADY_EXISTS.equals(errorCode)) {      throw new EntryAlreadyExistsException(i18n.getString(IUMSConstants.ENTRY_ALREADY_EXISTS,args),e);    } else     if (ResultCode.INSUFFICIENT_ACCESS_RIGHTS.equals(errorCode)) {      throw new AccessRightsException(i18n.getString(IUMSConstants.INSUFFICIENT_ACCESS_ADD,args),e);    } else {      throw new UMSException(i18n.getString(IUMSConstants.UNABLE_TO_ADD_ENTRY,args),e);    }  }}  }
class C{  public InvalidDescriptionException(final String message){  super(message);}  }
class C{  public ArrayList<ByteString> toASN1ArrayList(){  final ArrayList<ByteString> values=new ArrayList<>(0);  for (  CSN csn : serverIdToCSN.values()) {    values.add(ByteString.valueOfUtf8(csn.toString()));  }  return values;}  }
class C{  public AMEntryExistsException(String msg,String errorCode){  super(msg,errorCode);}  }
class C{  public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize,ThreadFactory threadFactory){  return new ScheduledThreadPoolExecutor(corePoolSize,threadFactory);}  }
class C{  protected void onRequestHandlerNotSpecified(RequestContext requestContext) throws ServletException {  ViewBeanManager viewBeanManager=requestContext.getViewBeanManager();  ViewBean targetView=viewBeanManager.getViewBean(AMInvalidURLViewBean.class);  targetView.forwardTo(requestContext);  throw new CompleteRequestException();}  }
class C{  public boolean hasDefaultSetting(String clientType){  return clientCapDataExtInstance.isClientPresent(clientType) && clientCapDataIntInstance.isClientPresent(clientType);}  }
class C{  public FSIDPAuthenticationContextInfo(String authenticationContext,String moduleIndicatorKey,String moduleIndicatorValue,int level) throws FSException {  setAuthenticationContext(authenticationContext);  setLevel(level);  setModuleIndicatorKey(moduleIndicatorKey);  setModuleIndicatorValue(moduleIndicatorValue);}  }
class C{  public boolean springBack(int startX,int startY,int minX,int maxX,int minY,int maxY){  mMode=FLING_MODE;  final boolean spingbackX=mScrollerX.springback(startX,minX,maxX);  final boolean spingbackY=mScrollerY.springback(startY,minY,maxY);  return spingbackX || spingbackY;}  }
class C{  private PlaDirection(long p_x,long p_y,boolean p_NaN){  dir_x=p_x;  dir_y=p_y;  is_vertical=dir_x == 0;  is_horizontal=dir_y == 0;  is_NaN=p_NaN;}  }
class C{  public void log(Level logLevel,String msg,Object param){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setParameters(new Object[]{param});  setResourceBundle(record);  log(record);}  }
class C{  public static int interfaceModifiers(){  return PUBLIC | PROTECTED | PRIVATE| ABSTRACT| STATIC| STRICT;}  }
class C{  private int serverSideAuthenticationUsageCount(String uuid) throws SSOException, SMSException {  return getUsageCount(getScriptedServiceBaseDN(),getServerSideScriptedAuthSearchString(uuid)) + getUsageCount(getDeviceIdMatchServiceBaseDN(),getServerSideScriptedAuthSearchString(uuid));}  }
class C{  private TagResult(boolean keepProcessingLine,boolean keepProcessingEntry,boolean keepProcessingParent,boolean keepProcessingTemplateFile){  this.keepProcessingLine=keepProcessingLine;  this.keepProcessingEntry=keepProcessingEntry;  this.keepProcessingParent=keepProcessingParent;  this.keepProcessingTemplateFile=keepProcessingTemplateFile;}  }
class C{  public DSAMEResBundleTag(){  super();}  }
class C{  private int matchString(String text,int start,int field,Map<String,Integer> data,CalendarBuilder calb){  if (data != null) {    if (data instanceof SortedMap) {      for (      String name : data.keySet()) {        if (text.regionMatches(true,start,name,0,name.length())) {          calb.set(field,data.get(name));          return start + name.length();        }      }      return -start;    }    String bestMatch=null;    for (    String name : data.keySet()) {      int length=name.length();      if (bestMatch == null || length > bestMatch.length()) {        if (text.regionMatches(true,start,name,0,length)) {          bestMatch=name;        }      }    }    if (bestMatch != null) {      calb.set(field,data.get(bestMatch));      return start + bestMatch.length();    }  }  return -start;}  }
class C{  public String toString(){  if (userObject == null) {    return "";  } else {    return userObject.toString();  }}  }
class C{  public static Pose toDepthCameraOpenGlPose(TangoPoseData devicePose,DeviceExtrinsics extrinsics){  Matrix4 startServiceTdevice=tangoPoseToMatrix(devicePose);  Matrix4 openglTDevice=OPENGL_T_TANGO_WORLD.clone().multiply(startServiceTdevice);  Matrix4 openglWorldTOpenglCamera=openglTDevice.multiply(extrinsics.getDeviceTDepthCamera());  return matrixToPose(openglWorldTOpenglCamera);}  }
class C{  public static void rebuildSessionFactory(){  try {    configuration.configure();    serviceRegistry=new ServiceRegistryBuilder().applySettings(configuration.getProperties()).buildServiceRegistry();    sessionFactory=configuration.buildSessionFactory(serviceRegistry);  } catch (  Exception e) {    System.err.println("%%%% Error Creating SessionFactory %%%%");    e.printStackTrace();  }}  }
class C{  @Override public void encodeBegin(final FacesContext context) throws IOException {  super.encodeBegin(context);}  }
class C{  @Override public void addAlias(String alias){  alias=alias.toLowerCase(Locale.ENGLISH);synchronized (aliasesLock) {    for (int i=0; i < aliases.length; i++) {      if (aliases[i].equals(alias))       return;    }    String newAliases[]=new String[aliases.length + 1];    for (int i=0; i < aliases.length; i++)     newAliases[i]=aliases[i];    newAliases[aliases.length]=alias;    aliases=newAliases;  }  fireContainerEvent(ADD_ALIAS_EVENT,alias);}  }
class C{  public void invalidPasswd(String username){  try {    if (DEBUG.messageEnabled()) {      DEBUG.message("AMAccountLockout::invalidPasswd: " + username);    }    if (!isAccountLockout.isLockoutEnabled()) {      DEBUG.message("Failure lockout mode disabled");    } else {      String userDN;      AMIdentity amIdentity=null;      if (isAccountLockout.getStoreInvalidAttemptsInDS() || !isAccountLockout.isMemoryLocking()) {        amIdentity=AuthD.getAuth().getIdentity(IdType.USER,username,loginState.getOrgDN());        userDN=normalizeDN(IdentityUtils.getDN(amIdentity));      } else {        userDN=normalizeDN(username);      }      if (acInfo == null) {        acInfo=isAccountLockout.getAcInfo(userDN,amIdentity);      }      warnUser=isAccountLockout.invalidPasswd(userDN,username,amIdentity,acInfo);    }  } catch (  Exception ex) {    if (DEBUG.messageEnabled()) {      DEBUG.message("invalidPasswd:Error : ",ex);    }  }}  }
class C{  private MotanErrorMsgConstant(){}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> patchInstance(final Context context,final String resourceId,final PatchRequest request){  if (!objectType.equals(IdentityRestUtils.USER_TYPE)) {    return new BadRequestException("Cannot patch object type " + objectType).asPromise();  }  RealmContext realmContext=context.asContext(RealmContext.class);  final String realm=realmContext.getRealm().asPath();  try {    if (!isAdmin(context)) {      return new ForbiddenException("Only admin can patch user values").asPromise();    }    SSOToken ssoToken=getSSOToken(RestUtils.getToken().getTokenID().toString());    IdentityServicesImpl identityServices=getIdentityServices();    IdentityDetails identityDetails=identityServices.read(resourceId,getIdentityServicesAttributes(realm,objectType),ssoToken);    Attribute[] existingAttributes=identityDetails.getAttributes();    Map<String,Set<String>> existingAttributeMap=attributesToMap(existingAttributes);    Map<String,Set<String>> newAttributeMap=new HashMap<>();    if (existingAttributeMap.containsKey(IdentityRestUtils.UNIVERSAL_ID)) {      Set<String> values=existingAttributeMap.get(IdentityRestUtils.UNIVERSAL_ID);      if (isNotEmpty(values) && !isUserActive(values.iterator().next())) {        return new ForbiddenException("User " + resourceId + " is not active: Request is forbidden").asPromise();      }    }    boolean updateNeeded=false;    for (    PatchOperation patchOperation : request.getPatchOperations()) {switch (patchOperation.getOperation()) {case PatchOperation.OPERATION_REPLACE:{          String name=getFieldName(patchOperation.getField());          if (!patchableAttributes.contains(name)) {            return new BadRequestException("For the object type " + IdentityRestUtils.USER_TYPE + ", field \""+ name+ "\" cannot be altered by PATCH").asPromise();          }          JsonValue value=patchOperation.getValue();          newAttributeMap.put(name,identityAttributeJsonToSet(value));          updateNeeded=true;          break;        }default :      return new BadRequestException("PATCH of " + IdentityRestUtils.USER_TYPE + " does not support operation "+ patchOperation.getOperation()).asPromise();  }}if (updateNeeded) {  identityDetails.setAttributes(mapToAttributes(newAttributeMap));  identityServices.update(identityDetails,ssoToken);  identityDetails=identityServices.read(resourceId,getIdentityServicesAttributes(realm,objectType),ssoToken);}return newResultPromise(newResourceResponse("result","1",identityDetailsToJsonValue(identityDetails)));} catch (final ObjectNotFound notFound) {logger.error("IdentityResourceV3.patchInstance cannot find resource " + resourceId,notFound);return new NotFoundException("Resource cannot be found.",notFound).asPromise();}catch (final TokenExpired tokenExpired) {logger.error("IdentityResourceV3.patchInstance, token expired",tokenExpired);return new PermanentException(401,"Unauthorized",null).asPromise();}catch (final AccessDenied accessDenied) {logger.error("IdentityResourceV3.patchInstance, access denied",accessDenied);return new ForbiddenException(accessDenied.getMessage(),accessDenied).asPromise();}catch (final GeneralFailure generalFailure) {logger.error("IdentityResourceV3.patchInstance, general failure " + generalFailure.getMessage());return new BadRequestException(generalFailure.getMessage(),generalFailure).asPromise();}catch (ForbiddenException fex) {logger.warning("IdentityResourceV3.patchInstance, insufficient privileges.",fex);return fex.asPromise();}catch (NotFoundException notFound) {logger.warning("IdentityResourceV3.patchInstance " + resourceId + " not found",notFound);return new NotFoundException("Resource " + resourceId + " cannot be found.",notFound).asPromise();}catch (ResourceException resourceException) {logger.warning("IdentityResourceV3.patchInstance caught ResourceException",resourceException);return resourceException.asPromise();}catch (Exception exception) {logger.error("IdentityResourceV3.patchInstance caught exception",exception);return new InternalServerErrorException(exception.getMessage(),exception).asPromise();}}  }
class C{  public void removePackage(String packageName,UserHandleCompat user){  final List<AppInfo> data=this.data;  for (int i=data.size() - 1; i >= 0; i--) {    AppInfo info=data.get(i);    final ComponentName component=info.intent.getComponent();    if (info.user.equals(user) && packageName.equals(component.getPackageName())) {      removed.add(info);      data.remove(i);    }  }}  }
class C{  public final int size(){  if (written < 0) {    written=Integer.MAX_VALUE;  }  return written;}  }
class C{  private void updateZValuesForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState){  int childCount=algorithmState.visibleChildren.size();  for (int i=0; i < childCount; i++) {    View child=algorithmState.visibleChildren.get(i);    StackScrollState.ViewState childViewState=resultState.getViewStateForView(child);    if (i < algorithmState.itemsInTopStack) {      float stackIndex=algorithmState.itemsInTopStack - i;      stackIndex=Math.min(stackIndex,MAX_ITEMS_IN_TOP_STACK + 2);      if (i == 0 && algorithmState.itemsInTopStack < 2.0f) {        stackIndex-=1.0f;        if (algorithmState.scrollY > mCollapsedSize) {          stackIndex=0.1f + stackIndex * 1.9f;        }      }      childViewState.zTranslation=mZBasicHeight + stackIndex * mZDistanceBetweenElements;    } else     if (i > (childCount - 1 - algorithmState.itemsInBottomStack)) {      float numItemsAbove=i - (childCount - 1 - algorithmState.itemsInBottomStack);      float translationZ=mZBasicHeight - numItemsAbove * mZDistanceBetweenElements;      childViewState.zTranslation=translationZ;    } else {      childViewState.zTranslation=mZBasicHeight;    }  }}  }
class C{  public UnsupportedHttpVersionException(final String message){  super(message);}  }
class C{  @Deprecated public static List<Player> matchPlayer(String name){  return server.matchPlayer(name);}  }
class C{  public XMLString concat(String str){  return new XMLStringDefault(m_str.concat(str));}  }
class C{  private static LDAPFilter createSubstringFilter(SubstringFilter sf) throws LDAPException, IOException {  List<Object> anyo=sf.getAny();  ArrayList<ByteString> subAnyElements=new ArrayList<>(anyo.size());  for (  Object o : anyo) {    subAnyElements.add(ByteStringUtility.convertValue(o));  }  if (sf.getInitial() == null && subAnyElements.isEmpty() && sf.getFinal() == null) {    LocalizableMessage message=ERR_LDAP_FILTER_DECODE_NULL.get();    throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);  }  return LDAPFilter.createSubstringFilter(sf.getName(),sf.getInitial() == null ? null : ByteStringUtility.convertValue(sf.getInitial()),subAnyElements,sf.getFinal() == null ? null : ByteStringUtility.convertValue(sf.getFinal()));}  }
class C{  public boolean hasSalary(){  return fieldSetFlags()[3];}  }
class C{  public void parse(InputSource input) throws IOException, SAXException {  if (parsing) {    throw new SAXException("Parser is already in use");  }  setupParser();  parsing=true;  try {    parser.parse(input);  }  finally {    parsing=false;  }  parsing=false;}  }
class C{  public void follow(String login,String access_token,Callback<ActionResponse> callback){  userApi=getRetrofitForSimpleJson().create(UserApi.class);  userApi.follow(login,access_token).enqueue(callback);}  }
class C{  public FairBlockingQueue(){  items=new LinkedList<>();  waiters=new LinkedList<>();}  }
class C{  static LDAPReader<ASN1BufferReader> createReader(DecodeOptions decodeOptions,int maxASN1ElementSize,MemoryManager<?> memoryManager){  ASN1BufferReader asn1Reader=new ASN1BufferReader(maxASN1ElementSize,memoryManager);  return LDAP.getReader(asn1Reader,decodeOptions);}  }
class C{  private static boolean arrayEquals(Object a1,Object a2){  int len;  if ((len=Array.getLength(a1)) != Array.getLength(a2))   return false;  for (int j=0; j < len; j++) {    Object i1=Array.get(a1,j);    Object i2=Array.get(a2,j);    if (i1 == null || i2 == null) {      if (i1 != i2)       return false;    } else     if (!i1.equals(i2)) {      return false;    }  }  return true;}  }
class C{  private void checkScrollableParameters(Rectangle visibleRect,int orientation){  if (visibleRect == null) {    throw new IllegalArgumentException("visibleRect must be non-null");  }switch (orientation) {case SwingConstants.VERTICAL:case SwingConstants.HORIZONTAL:    break;default :  throw new IllegalArgumentException("orientation must be one of: VERTICAL, HORIZONTAL");}}  }
class C{  public boolean write(String p_design_name,boolean p_compat_mode){  try {    write_dsn_scope(p_design_name,p_compat_mode);    output_file.close();    board_handling.userPrintln(classname + "write DONE");  } catch (  java.io.IOException exc) {    board_handling.userPrintln("unable to write dsn file",exc);    return false;  }  return true;}  }
class C{  public InvalidFrameIdentifierException(Throwable ex){  super(ex);}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  RestAssured.baseURI=BASE_URI;  RestAssured.port=PORT;  RestAssured.basePath="/databases";  logger.debug("Loading RestExpress Environment... ");  f=Fixtures.getInstance();  RestExpressManager.getManager().ensureRestExpressRunning();}  }
class C{  public static void access(Level level,String msgid,String data[],Object session){  access(level,msgid,data,session,null);}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterDelete(Context context,DeleteRequest request,RequestHandler next){  return next.handleDelete(context,request);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  attrList=docType.getAttributes();  assertNull("doctypeAttributesNull",attrList);}  }
class C{  private void validateResponseBody(TesterAjpMessage message,String expectedBody) throws Exception {  String body=extractResponseBody(message);  Assert.assertTrue(body.contains(expectedBody));}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public long length() throws SerialException {  isValid();  return len;}  }
class C{  private RunnableScheduledFuture<?> finishPoll(RunnableScheduledFuture<?> f){  int s=--size;  RunnableScheduledFuture<?> x=queue[s];  queue[s]=null;  if (s != 0)   siftDown(0,x);  setIndex(f,-1);  return f;}  }
class C{  public boolean isAuthenticated(){  return isAuthenticated;}  }
class C{  public static java.lang.String toString(int modifiers){  StringBuilder buf=new StringBuilder();  if (isPublic(modifiers)) {    buf.append("public ");  }  if (isProtected(modifiers)) {    buf.append("protected ");  }  if (isPrivate(modifiers)) {    buf.append("private ");  }  if (isAbstract(modifiers)) {    buf.append("abstract ");  }  if (isStatic(modifiers)) {    buf.append("static ");  }  if (isFinal(modifiers)) {    buf.append("final ");  }  if (isTransient(modifiers)) {    buf.append("transient ");  }  if (isVolatile(modifiers)) {    buf.append("volatile ");  }  if (isSynchronized(modifiers)) {    buf.append("synchronized ");  }  if (isNative(modifiers)) {    buf.append("native ");  }  if (isStrict(modifiers)) {    buf.append("strictfp ");  }  if (isInterface(modifiers)) {    buf.append("interface ");  }  if (buf.length() == 0) {    return "";  }  buf.setLength(buf.length() - 1);  return buf.toString();}  }
class C{  void backupStart(){  state.save();}  }
class C{  public DomainDBCursor(final DN baseDN,final ReplicationDomainDB domainDB,CursorOptions options){  this.baseDN=baseDN;  this.domainDB=domainDB;  this.options=options;}  }
class C{  public ActiveAuthenticationResult executeAA(byte[] challenge){  if (lds == null || service == null) {    verificationStatus.setAA(VerificationStatus.Verdict.FAILED,ReasonCode.UNKNOWN,null);    return null;  }  try {    DG15File dg15File=lds.getDG15File();    if (dg15File == null) {      verificationStatus.setAA(VerificationStatus.Verdict.FAILED,ReasonCode.READ_ERROR_DG15_FAILURE,null);      return null;    }    PublicKey pubKey=dg15File.getPublicKey();    String pubKeyAlgorithm=pubKey.getAlgorithm();    String digestAlgorithm="SHA1";    String signatureAlgorithm="SHA1WithRSA/ISO9796-2";    if ("EC".equals(pubKeyAlgorithm) || "ECDSA".equals(pubKeyAlgorithm)) {      DG14File dg14File=lds.getDG14File();      if (dg14File == null) {        verificationStatus.setAA(VerificationStatus.Verdict.FAILED,ReasonCode.READ_ERROR_DG14_FAILURE,null);        return null;      }      List<ActiveAuthenticationInfo> activeAuthenticationInfos=dg14File.getActiveAuthenticationInfos();      int activeAuthenticationInfoCount=(activeAuthenticationInfos == null ? 0 : activeAuthenticationInfos.size());      if (activeAuthenticationInfoCount < 1) {        verificationStatus.setAA(VerificationStatus.Verdict.FAILED,ReasonCode.READ_ERROR_DG14_FAILURE,null);        return null;      } else       if (activeAuthenticationInfoCount > 1) {        LOGGER.warning("Found " + activeAuthenticationInfoCount + " in EF.DG14, expected 1.");      }      ActiveAuthenticationInfo activeAuthenticationInfo=activeAuthenticationInfos.get(0);      String signatureAlgorithmOID=activeAuthenticationInfo.getSignatureAlgorithmOID();      signatureAlgorithm=ActiveAuthenticationInfo.lookupMnemonicByOID(signatureAlgorithmOID);      digestAlgorithm=Util.inferDigestAlgorithmFromSignatureAlgorithm(signatureAlgorithm);    }    byte[] response=service.doAA(pubKey,digestAlgorithm,signatureAlgorithm,challenge);    return new ActiveAuthenticationResult(pubKey,digestAlgorithm,signatureAlgorithm,challenge,response);  } catch (  CardServiceException cse) {    cse.printStackTrace();    verificationStatus.setAA(VerificationStatus.Verdict.FAILED,ReasonCode.UNEXPECTED_EXCEPTION_FAILURE,null);    return null;  }catch (  Exception e) {    LOGGER.severe("DEBUG: this exception wasn't caught in verification logic (< 0.4.8) -- MO 3. Type is " + e.getClass().getCanonicalName());    e.printStackTrace();    verificationStatus.setAA(VerificationStatus.Verdict.FAILED,ReasonCode.UNEXPECTED_EXCEPTION_FAILURE,null);    return null;  }}  }
class C{  private static void checkIfServerIsRunning(final UpgradeContext context) throws ClientException {  final String lockFile=LockFileManager.getServerLockFileName();  final StringBuilder failureReason=new StringBuilder();  try {    if (!LockFileManager.acquireExclusiveLock(lockFile,failureReason)) {      final LocalizableMessage message=ERR_UPGRADE_REQUIRES_SERVER_OFFLINE.get();      context.notify(message,NOTICE_CALLBACK);      throw new ClientException(ReturnCode.ERROR_UNEXPECTED,message);    }  }  finally {    LockFileManager.releaseLock(lockFile,failureReason);  }}  }
class C{  public static boolean findVacantCell(int[] vacant,int spanX,int spanY,int xCount,int yCount,boolean[][] occupied){  for (int y=0; (y + spanY) <= yCount; y++) {    for (int x=0; (x + spanX) <= xCount; x++) {      boolean available=!occupied[x][y];      out:       for (int i=x; i < x + spanX; i++) {        for (int j=y; j < y + spanY; j++) {          available=available && !occupied[i][j];          if (!available)           break out;        }      }      if (available) {        vacant[0]=x;        vacant[1]=y;        return true;      }    }  }  return false;}  }
class C{  private int handleL(String value,DoubleMetaphoneResult result,int index){  result.append('L');  if (charAt(value,index + 1) == 'L') {    if (conditionL0(value,index)) {      result.appendAlternate(' ');    }    index+=2;  } else {    index++;  }  return index;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element elementNode;  String elementValue;  doc=(Document)load("hc_staff",false);  elementNode=doc.getDocumentElement();  elementValue=elementNode.getNodeValue();  assertNull("elementNodeValue",elementValue);}  }
class C{  public void decompileFromArchive(String archivePath,String packege,String className){  start=System.currentTimeMillis();  File workingDir=new File(JavaDecompilerPlugin.getDefault().getPreferenceStore().getString(JavaDecompilerPlugin.TEMP_DIR) + "/" + System.currentTimeMillis());  try {    workingDir.mkdirs();    JarClassExtractor.extract(archivePath,packege,className,true,workingDir.getAbsolutePath());    decompile(workingDir.getAbsolutePath(),"",className);  } catch (  Exception e) {    JavaDecompilerPlugin.logError(e,e.getMessage());    return;  } finally {    deltree(workingDir);  }}  }
class C{  public Sapling(final Material type,TreeSpecies species,boolean isInstantGrowable){  super(type,species);  setIsInstantGrowable(isInstantGrowable);}  }
class C{  static SecurityContextMapper fromMessageInfo(MessageInfoContext messageInfo){  return new SecurityContextMapper(messageInfo);}  }
class C{  public static Assertion sendAssertionIDRequestURI(String assertionID,String samlAuthorityEntityID,String role,String realm) throws SAML2Exception {  StringBuffer locationSB=new StringBuffer();  getRoleDescriptorAndLocation(samlAuthorityEntityID,role,realm,SAML2Constants.URI,locationSB);  if (locationSB.indexOf("?") == -1) {    locationSB.append("?");  } else {    locationSB.append("&");  }  locationSB.append("ID=").append(assertionID);  String location=fillInBasicAuthInfo(locationSB.toString(),realm,samlAuthorityEntityID,role);  URL url=null;  try {    url=new URL(location);  } catch (  MalformedURLException me) {    throw new SAML2Exception(me.getMessage());  }  try {    HttpURLConnection conn=HttpURLConnectionManager.getConnection(url);    conn.setInstanceFollowRedirects(false);    conn.setUseCaches(false);    conn.setDoOutput(false);    conn.connect();    int respCode=conn.getResponseCode();    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AssertionIDRequestUtil.sendAssertionIDRequestURI: " + "Response code = " + respCode + ", Response message = "+ conn.getResponseMessage());    }    if (respCode != HttpURLConnection.HTTP_OK) {      return null;    }    String contentType=conn.getContentType();    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AssertionIDRequestUtil.sendAssertionIDRequestURI: " + "Content type = " + contentType);    }    if ((contentType == null) || (contentType.indexOf(MIME_TYPE_ASSERTION) == -1)) {      return null;    }    int contentLength=conn.getContentLength();    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AssertionIDRequestUtil.sendAssertionIDRequestURI: " + "Content length = " + contentLength);    }    BufferedInputStream bin=new BufferedInputStream(conn.getInputStream());    StringBuffer contentSB=new StringBuffer();    byte content[]=new byte[2048];    if (contentLength != -1) {      int read=0, totalRead=0;      int left;      while (totalRead < contentLength) {        left=contentLength - totalRead;        read=bin.read(content,0,left < content.length ? left : content.length);        if (read == -1) {          break;        } else {          if (read > 0) {            totalRead+=read;            contentSB.append(new String(content,0,read));          }        }      }    } else {      int numbytes;      int totalRead=0;      while (true) {        numbytes=bin.read(content);        if (numbytes == -1) {          break;        }        totalRead+=numbytes;        contentSB.append(new String(content,0,numbytes));      }    }    return AssertionFactory.getInstance().createAssertion(contentSB.toString());  } catch (  IOException ioex) {    SAML2Utils.debug.error("AssertionIDRequest.sendAssertionIDRequestURI:",ioex);    throw new SAML2Exception(ioex.getMessage());  }}  }
class C{  public void mouseDragged(MouseEvent e){}  }
class C{  public static void removeByField2(boolean field2){  getPersistence().removeByField2(field2);}  }
class C{  public static boolean isSupported(byte[] version){  if (version[0] != 3 || (version[1] != 0 && version[1] != 1)) {    return false;  }  return true;}  }
class C{  static Error uncaughtException(Throwable ex){  if (ex instanceof Error)   throw (Error)ex;  if (ex instanceof RuntimeException)   throw (RuntimeException)ex;  throw newInternalError("uncaught exception",ex);}  }
class C{  public static String removeFNC1(String code){  int len=code.length();  StringBuilder buf=new StringBuilder(len);  for (int k=0; k < len; ++k) {    char c=code.charAt(k);    if (c >= 32 && c <= 126)     buf.append(c);  }  return buf.toString();}  }
class C{  public CtsConnectionFailureRateImpl(SnmpMib myMib){  super(myMib);  this.monitoringStore=InjectorHolder.getInstance(CTSConnectionMonitoringStore.class);}  }
class C{  @Override public void onDismiss(PopupMenu menu){  Log.d(TAG,"popmenu dismiss listener:" + menu);  invalidateOptionsMenu();}  }
class C{  public boolean offerFirst(E e){  addFirst(e);  return true;}  }
class C{  public void onSwitcher(){  this.on=true;}  }
class C{  public static BigInteger sizeOfDirectoryAsBigInteger(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return BigInteger.ZERO;  }  BigInteger size=BigInteger.ZERO;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size=size.add(BigInteger.valueOf(sizeOf(file)));      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  private boolean hasNextPostponed(){  return !postponedRoutes.isEmpty();}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="blank";  String qualifiedName="emp:blank";  Document doc;  Attr newAttribute;  NodeList elementList;  Element testAddr;  Attr districtAttr;  String attrValue;  doc=(Document)load("staffNS",true);  newAttribute=doc.createAttributeNS(namespaceURI,qualifiedName);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  testAddr.setAttributeNS(namespaceURI,qualifiedName,"NewValue");  attrValue=testAddr.getAttributeNS(namespaceURI,localName);  assertEquals("throw_Equals","NewValue",attrValue);}  }
class C{  public void removeTreeExpansionListener(TreeExpansionListener tel){  listenerList.remove(TreeExpansionListener.class,tel);  if (uiTreeExpansionListener == tel) {    uiTreeExpansionListener=null;  }}  }
class C{  public void toLDIF(SearchResultEntryProtocolOp entry,StringBuilder buffer,int wrapColumn,boolean typesOnly){  String dnString=entry.getDN().toString();  int colsRemaining;  if (needsBase64Encoding(dnString)) {    dnString=Base64.encode(getBytes(dnString));    buffer.append("dn:: ");    colsRemaining=wrapColumn - 5;  } else {    buffer.append("dn: ");    colsRemaining=wrapColumn - 4;  }  int dnLength=dnString.length();  if (dnLength <= colsRemaining || colsRemaining <= 0) {    buffer.append(dnString);    buffer.append(EOL);  } else {    buffer.append(dnString,0,colsRemaining);    buffer.append(EOL);    int startPos=colsRemaining;    while (dnLength - startPos > wrapColumn - 1) {      buffer.append(" ");      buffer.append(dnString,startPos,startPos + wrapColumn - 1);      buffer.append(EOL);      startPos+=wrapColumn - 1;    }    if (startPos < dnLength) {      buffer.append(" ");      buffer.append(dnString.substring(startPos));      buffer.append(EOL);    }  }  LinkedList<LDAPAttribute> attributes=entry.getAttributes();  for (  LDAPAttribute a : attributes) {    String name=a.getAttributeType();    int nameLength=name.length();    if (typesOnly) {      buffer.append(name);      buffer.append(EOL);    } else {      for (      ByteString v : a.getValues()) {        String valueString;        if (needsBase64Encoding(v)) {          valueString=Base64.encode(v);          buffer.append(name);          buffer.append(":: ");          colsRemaining=wrapColumn - nameLength - 3;        } else {          valueString=v.toString();          buffer.append(name);          buffer.append(": ");          colsRemaining=wrapColumn - nameLength - 2;        }        int valueLength=valueString.length();        if (valueLength <= colsRemaining || colsRemaining <= 0) {          buffer.append(valueString);          buffer.append(EOL);        } else {          buffer.append(valueString,0,colsRemaining);          buffer.append(EOL);          int startPos=colsRemaining;          while (valueLength - startPos > wrapColumn - 1) {            buffer.append(" ");            buffer.append(valueString,startPos,startPos + wrapColumn - 1);            buffer.append(EOL);            startPos+=wrapColumn - 1;          }          if (startPos < valueLength) {            buffer.append(" ");            buffer.append(valueString.substring(startPos));            buffer.append(EOL);          }        }      }    }  }  buffer.append(EOL);}  }
class C{  public void testAddIssuerNameLjava_lang_String03(){  X509CRLSelector selector=new X509CRLSelector();  String iss1="O=First Org.";  String iss2="O=Second Org.";  TestCRL crl1=new TestCRL(new X500Principal(iss1));  TestCRL crl2=new TestCRL(new X500Principal(iss2));  try {    selector.addIssuerName(iss1);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  assertTrue("The CRL should match the selection criteria.",selector.match(crl1));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl2));  try {    selector.addIssuerName(iss2);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  assertTrue("The CRL should match the selection criteria.",selector.match(crl2));}  }
class C{  public void addLayoutComponent(String name,Component child){}  }
class C{  public KeyStore build(){  try {    KeyStore keyStore=provider != null ? KeyStore.getInstance(type.toString(),provider) : KeyStore.getInstance(type.toString());    keyStore.load(inputStream,password);    return keyStore;  } catch (  CertificateException|NoSuchAlgorithmException|IOException|KeyStoreException e) {    DEBUG.error("KeyStoreBuilder.build(): Error loading keystore",e);    throw new IllegalStateException("Unable to load keystore");  } finally {    if (password != null) {      Arrays.fill(password,'\0');    }    IOUtils.closeIfNotNull(inputStream);  }}  }
class C{  public CertificateParsingException(String message){  super(message);}  }
class C{  public boolean isUnsynchronization(){  return unsynchronization;}  }
class C{  public Tailer(File file,TailerListener listener,long delayMillis,boolean end,boolean reOpen){  this(file,listener,delayMillis,end,reOpen,DEFAULT_BUFSIZE);}  }
class C{  public SAML2ConfigBuilder customConditionsProviderClassName(String customConditionsProviderClassName){  this.customConditionsProviderClassName=customConditionsProviderClassName;  return this;}  }
class C{  protected boolean isIDPProxyEnabled(String requestID){  FSSessionManager sessionManager=FSSessionManager.getInstance(hostMetaAlias);  return (sessionManager.getProxySPDescriptor(requestID) != null);}  }
class C{  public FSSignatureException(Throwable rootCause,String s){  super(rootCause,s);}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (!(that instanceof EntryID)) {    return false;  }  return this.id == ((EntryID)that).id;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  support.addPropertyChangeListener(listener);}  }
class C{  public boolean isEquals(String partnerID){  return this.sessionPartner.equals(partnerID);}  }
class C{  public static SetPropSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> path,SingletonRelationDefinition<?,?> r) throws ArgumentException {  return new SetPropSubCommandHandler(parser,path.child(r),r);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.KeySharingType createKeySharingType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeySharingTypeImpl();}  }
class C{  public boolean isEditable(AMAuthenticationInstance instance){  return true;}  }
class C{  @NonNull public static Interpolator step(int first,int second){  return join(constant(first),constant(second));}  }
class C{  public MaterialBarcodeScannerBuilder withCenterTracker(int trackerResourceId,int detectedTrackerResourceId){  mScannerMode=MaterialBarcodeScanner.SCANNER_MODE_CENTER;  mTrackerResourceID=trackerResourceId;  mTrackerDetectedResourceID=detectedTrackerResourceId;  return this;}  }
class C{  public ConnPoolByRoute(final ClientConnectionOperator operator,final HttpParams params){  super();  if (operator == null) {    throw new IllegalArgumentException("Connection operator may not be null");  }  this.operator=operator;  freeConnections=createFreeConnQueue();  waitingThreads=createWaitingThreadQueue();  routeToPool=createRouteToPoolMap();  maxTotalConnections=ConnManagerParams.getMaxTotalConnections(params);  connPerRoute=ConnManagerParams.getMaxConnectionsPerRoute(params);}  }
class C{  protected boolean isJdk13LumberjackAvailable(){  return isLogLibraryAvailable("Jdk13Lumberjack","org.apache.commons.logging.impl.Jdk13LumberjackLogger");}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  if (getPrimaryModel() == null) {    throw new ModelControlException("Primary model is null");  }  if (callbacks != null) {    getPrimaryModel().setSize(callbacks.length);  } else {    getPrimaryModel().setSize(0);  }  super.beginDisplay(event);  resetTileIndex();}  }
class C{  public boolean hasRights(int rights){  return body.hasRights(rights);}  }
class C{  public CopyOnWriteArraySet(){  al=new CopyOnWriteArrayList<E>();}  }
class C{  public long executeForLastInsertedRowId(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return 0;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    return mConnection.executeForLastInsertedRowId(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  public void testRemainderKnuth1(){  byte aBytes[]={-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1};  byte bBytes[]={0,1,2,3,4,5,6,7,8,9,10};  int aSign=1;  int bSign=1;  byte rBytes[]={1,2,3,4,5,6,7,7,18,-89};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void testIssue492() throws Exception {  doTestIssue492(false);  doTestIssue492(true);}  }
class C{  @Override public void initializeForBranch(TemplateFile templateFile,Branch branch,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  if (arguments.length != 1) {    LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_COUNT.get(getName(),lineNumber,1,arguments.length);    throw new InitializationException(message);  }  text=arguments[0];}  }
class C{  public void cache(ResourceSaveIndexes indexes,Set<String> subjectIndexes,String dn){  if (subjectIndexes != null) {    cache(dn,subjectIndexes,subjectIndexCache);  }  cache(dn,indexes.getHostIndexes(),hostIndexCache);  cache(dn,indexes.getPathIndexes(),pathIndexCache);  cache(dn,indexes.getParentPathIndexes(),parentPathIndexCache);}  }
class C{  protected void writeBackup(SSOToken adminToken) throws UpgradeException {  FileOutputStream fout=null;  String baseDir=SystemProperties.get(SystemProperties.CONFIG_PATH);  String backupDir=baseDir + File.separator + "backups"+ File.separator;  File backupFile=new File(backupDir + "servicebackup." + createdDate);  File backupPasswdFile=new File(backupDir + "servicebackup.password." + createdDate);  String backupPassword=generateBackupPassword();  if (backupFile.exists()) {    debug.error("Upgrade cannot continue as backup file exists! " + backupFile.getName());    UpgradeProgress.reportEnd("upgrade.failed");    throw new UpgradeException("Upgrade cannot continue as backup file exists");  }  try {    fout=new FileOutputStream(backupFile);    ServiceManager sm=new ServiceManager(adminToken);    AMEncryption encryptObj=new JCEEncryption();    ((ConfigurableKey)encryptObj).setPassword(backupPassword);    String resultXML=sm.toXML(encryptObj);    resultXML+="<!-- " + Hash.hash(backupPassword) + " -->";    fout.write(resultXML.getBytes("UTF-8"));  } catch (  Exception ex) {    debug.error("Failed to write backup file: ",ex);    UpgradeProgress.reportEnd("upgrade.failed");    throw new UpgradeException("Failed to write backup file, check debug logs for more information.");  } finally {    if (fout != null) {      try {        fout.close();      } catch (      IOException ioe) {      }    }  }  if (backupPasswdFile.exists()) {    debug.error("Upgrade cannot continue as backup password file exists! " + backupPasswdFile.getName());    UpgradeProgress.reportEnd("upgrade.failed");    throw new UpgradeException("Upgrade cannot continue as backup password file exists");  }  PrintWriter out=null;  try {    out=new PrintWriter(new FileOutputStream(backupPasswdFile));    out.println(backupPassword);    out.flush();  } catch (  Exception ex) {    debug.error("Failed to write backup password file: ",ex);    UpgradeProgress.reportEnd("upgrade.failed");    throw new UpgradeException("Failed to write backup password file, check debug logs for more information.");  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  public boolean useSASLExternal(){  return saslExternal;}  }
class C{  public String canonicalize(String urlStr) throws E {  if (!ACCEPTABLE_URLS.matcher(urlStr).matches()) {    return super.canonicalize(urlStr);  }  int index=urlStr.indexOf("://");  String proto=urlStr.substring(0,index);  String resource=urlStr.substring(index + 3);  String hostAndPort=resource;  String urlPath="";  if (resource.startsWith(delimiter)) {    int len=resource.length();    char[] oldchars=resource.toCharArray();    char[] newchars=new char[len];    int j=0;    while (j < len && oldchars[j] == delimiter.charAt(0)) {      j++;    }    int i=0;    while (j < len) {      newchars[i++]=oldchars[j++];    }    resource=String.valueOf(newchars,0,i);  }  String hostName="";  String port="";  String query=null;  if (resource != null && resource.length() != 0) {    index=resource.indexOf('/');    if (index == -1) {      index=resource.indexOf('?');    }    if (index != -1) {      hostAndPort=resource.substring(0,index);      urlPath=resource.substring(index);    }    hostName=hostAndPort;    index=hostAndPort.indexOf(':');    if (index != -1) {      hostName=hostAndPort.substring(0,index);      port=hostAndPort.substring(index + 1);      validatePort(port);    }    index=urlPath.indexOf('?');    if (index != -1) {      query=urlPath.substring(index + 1);    }    if (port.length() == 0) {      if (proto.equals(DEFAULT_WEB_PROTOCOL)) {        port=DEFAULT_PORT;      } else       if (proto.equals(SECURE_WEB_PROTOCOL)) {        port=SECURE_PORT;      } else {        port=wildcard;      }    }  }  StringBuilder sb=new StringBuilder(100);  sb.append(proto);  sb.append("://");  sb.append(hostName);  if (hostName.length() != 0) {    sb.append(":");    sb.append(port);    if (hostName.equals(wildcard) && hostAndPort.equals(wildcard) && resource.equals(wildcard)) {      sb.append(wildcard);    }  }  if (debug.messageEnabled()) {    debug.message("URLResourceName: url query=" + query);  }  if (query != null) {    int indexQuery=urlPath.lastIndexOf(query);    String prefix=super.canonicalize(urlPath.substring(0,indexQuery - 1));    sb.append(prefix);    sb.append('?');    int indexAmp=query.indexOf(QUERY_PARAMETER_DELIMITER);    if (indexAmp != -1) {      String suffix=urlPath.substring(indexQuery + query.length());      ArrayList al=new ArrayList();      StringTokenizer st=new StringTokenizer(query,QUERY_PARAMETER_DELIMITER);      while (st.hasMoreTokens()) {        al.add(st.nextToken());      }      Collections.sort(al,comparator);      int size=al.size();      for (int i=0; i < size; i++) {        if (i < (size - 1)) {          sb.append((String)al.get(i)).append(QUERY_PARAMETER_DELIMITER);        } else {          sb.append((String)al.get(i));        }      }      sb.append(suffix);    } else {      sb.append(query);    }  } else {    sb.append(super.canonicalize(urlPath));  }  return sb.toString();}  }
class C{  public static boolean isEmpty(String str){  if (str == null || str.length() == 0 || str.equalsIgnoreCase("null") || str.isEmpty() || str.equals("")) {    return true;  } else {    return false;  }}  }
class C{  public void write(int b) throws IOException {  byte[] buf=new byte[1];  buf[0]=(byte)(b & 0xff);  write(buf,0,1);}  }
class C{  void pushSpaceHandling(boolean b) throws org.xml.sax.SAXParseException {  m_spacePreserveStack.push(b);}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof HOTPPrincipal)) {    return false;  }  HOTPPrincipal that=(HOTPPrincipal)o;  if (this.getName().equals(that.getName())) {    return true;  }  return false;}  }
class C{  public boolean isAllowNullable(){  return this.allowNullable;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrspecifiedvaluechanged.class,args);}  }
class C{  private void doPostAdd(PluginOperation addOperation,Entry entry){  if (hasGroupMembershipUpdateControl(addOperation)) {    return;  }  createAndRegisterGroup(entry);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.PPElement createPPElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.PPElementImpl();}  }
class C{  public void addSession(SingleSignOn sso,String ssoId,Session session){  SingleSignOnSessionKey key=new SingleSignOnSessionKey(session);  SingleSignOnSessionKey currentKey=sessionKeys.putIfAbsent(key,key);  if (currentKey == null) {    session.addSessionListener(sso.getSessionListener(ssoId));  }}  }
class C{  public Component componentForPoint(Component source,Point sourcePoint){  int screenX, screenY;  Point p=sourcePoint;  int i, c, j, d;  Component mc;  Rectangle r2;  int cWidth, cHeight;  MenuElement menuElement;  MenuElement subElements[];  Vector<MenuElement> tmp;  int selectionSize;  SwingUtilities.convertPointToScreen(p,source);  screenX=p.x;  screenY=p.y;  tmp=(Vector<MenuElement>)selection.clone();  selectionSize=tmp.size();  for (i=selectionSize - 1; i >= 0; i--) {    menuElement=(MenuElement)tmp.elementAt(i);    subElements=menuElement.getSubElements();    for (j=0, d=subElements.length; j < d; j++) {      if (subElements[j] == null)       continue;      mc=subElements[j].getComponent();      if (!mc.isShowing())       continue;      if (mc instanceof JComponent) {        cWidth=mc.getWidth();        cHeight=mc.getHeight();      } else {        r2=mc.getBounds();        cWidth=r2.width;        cHeight=r2.height;      }      p.x=screenX;      p.y=screenY;      SwingUtilities.convertPointFromScreen(p,mc);      if (p.x >= 0 && p.x < cWidth && p.y >= 0 && p.y < cHeight) {        return mc;      }    }  }  return null;}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  Insets nextInsets;  int px, py, pw, ph;  px=x;  py=y;  pw=width;  ph=height;  if (outsideBorder != null) {    outsideBorder.paintBorder(c,g,px,py,pw,ph);    nextInsets=outsideBorder.getBorderInsets(c);    px+=nextInsets.left;    py+=nextInsets.top;    pw=pw - nextInsets.right - nextInsets.left;    ph=ph - nextInsets.bottom - nextInsets.top;  }  if (insideBorder != null)   insideBorder.paintBorder(c,g,px,py,pw,ph);}  }
class C{  protected final MetadataDescriptor assertDescriptor(final String key){  return assertDescriptor(key,MetadataDescriptor.TYPE_STRING);}  }
class C{  public static boolean equal(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  public void windowOpened(WindowEvent e){}  }
class C{  public static void fill(boolean[] array,int start,int end,boolean value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public DynamicGroup(DN groupEntryDN,LinkedHashSet<LDAPURL> memberURLs){  super();  ifNull(groupEntryDN,memberURLs);  this.groupEntryDN=groupEntryDN;  this.memberURLs=memberURLs;}  }
class C{  public static Remote toStub(Remote obj) throws NoSuchObjectException {  if (proDelegate != null) {    return proDelegate.toStub(obj);  }  return null;}  }
class C{  private void init(ComponentContext context) throws ServletException, NamespaceException {  JsonValue config=enhancedConfig.getConfigurationAsJson(context);  if (!config.get(CONFIG_ENABLED).isNull() && Boolean.FALSE.equals(config.get(CONFIG_ENABLED).asBoolean())) {    logger.info("UI is disabled - not registering UI servlet");    return;  } else   if (config.get(CONFIG_CONTEXT_ROOT) == null || config.get(CONFIG_CONTEXT_ROOT).isNull()) {    logger.info("UI does not specify contextRoot - unable to register servlet");    return;  } else   if (config.get(CONFIG_DEFAULT_DIR) == null || config.get(CONFIG_DEFAULT_DIR).isNull()) {    logger.info("UI does not specify default directory - unable to register servlet");    return;  } else   if (config.get(CONFIG_EXTENSION_DIR) == null || config.get(CONFIG_EXTENSION_DIR).isNull()) {    logger.info("UI does not specify extension directory - unable to register servlet");    return;  }  defaultDir=config.get(CONFIG_DEFAULT_DIR).asString();  extensionDir=config.get(CONFIG_EXTENSION_DIR).asString();  contextRoot=prependSlash(config.get(CONFIG_CONTEXT_ROOT).asString());  Dictionary<String,Object> props=new Hashtable<>();  webContainer.registerServlet(contextRoot,this,props,webContainer.getDefaultSharedHttpContext());  logger.debug("Registered UI servlet at {}",contextRoot);}  }
class C{  public ConvolveOp(Kernel kernel){  this.kernel=kernel;  this.edgeHint=EDGE_ZERO_FILL;}  }
class C{  public void encode(int[] toEncode,int ecBytes){  if (ecBytes == 0) {    throw new IllegalArgumentException("No error correction bytes");  }  int dataBytes=toEncode.length - ecBytes;  if (dataBytes <= 0) {    throw new IllegalArgumentException("No data bytes provided");  }  GF256Poly generator=buildGenerator(ecBytes);  int[] infoCoefficients=new int[dataBytes];  System.arraycopy(toEncode,0,infoCoefficients,0,dataBytes);  GF256Poly info=new GF256Poly(field,infoCoefficients);  info=info.multiplyByMonomial(ecBytes,1);  GF256Poly remainder=info.divide(generator)[1];  int[] coefficients=remainder.getCoefficients();  int numZeroCoefficients=ecBytes - coefficients.length;  for (int i=0; i < numZeroCoefficients; i++) {    toEncode[dataBytes + i]=0;  }  System.arraycopy(coefficients,0,toEncode,dataBytes + numZeroCoefficients,coefficients.length);}  }
class C{  public void addConnection(boolean success){  if (success) {    connectionMonitor.add();  } else {    failureConnectionMonitor.add();  }}  }
class C{  public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){  if (sourceList == null || isEmpty(entryList)) {    return 0;  }  int sourceCount=sourceList.size();  for (  V entry : entryList) {    if (!sourceList.contains(entry)) {      sourceList.add(entry);    }  }  return sourceList.size() - sourceCount;}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  private static String decodeBase900toBase10(int[] codewords,int count) throws FormatException {  BigInteger result=BigInteger.ZERO;  for (int i=0; i < count; i++) {    result=result.add(EXP900[count - i - 1].multiply(BigInteger.valueOf(codewords[i])));  }  String resultString=result.toString();  if (resultString.charAt(0) != '1') {    throw FormatException.getFormatInstance();  }  return resultString.substring(1);}  }
class C{  protected synchronized void clearChanged(){  changed=false;}  }
class C{  public void updateSPEntityConfig(String realm,String entityName,Map attrValues) throws AMConsoleException {  String[] params={realm,entityName,"IDFF","SP-Extended Metadata"};  logEvent("ATTEMPT_MODIFY_ENTITY_DESCRIPTOR",params);  try {    IDFFMetaManager idffMetaMgr=getIDFFMetaManager();    EntityConfigElement entityConfig=idffMetaMgr.getEntityConfig(realm,entityName);    if (entityConfig == null) {      throw new AMConsoleException("invalid.entity.name");    }    SPDescriptorConfigElement spDecConfigElement=idffMetaMgr.getSPDescriptorConfig(realm,entityName);    if (spDecConfigElement == null) {      throw new AMConsoleException("invalid.config.element");    } else {      updateAttrInConfig(spDecConfigElement,attrValues,EntityModel.SERVICE_PROVIDER);      List supportedSSOProfileList=new ArrayList();      supportedSSOProfileList.add((String)AMAdminUtils.getValue((Set)attrValues.get(ATTR_SUPPORTED_SSO_PROFILE)));      int size=supportedSSOProfileList.size();      for (int i=0; i < size; i++) {        if (!supportedSSOProfileList.get(i).equals((String)AMAdminUtils.getValue((Set)attrValues.get(ATTR_SUPPORTED_SSO_PROFILE)))) {          supportedSSOProfileList.add(supportedSSOProfileList.get(i));        }      }      updateAttrInConfig(spDecConfigElement,ATTR_SUPPORTED_SSO_PROFILE,supportedSSOProfileList);    }    idffMetaMgr.setEntityConfig(realm,entityConfig);    logEvent("SUCCEED_MODIFY_ENTITY_DESCRIPTOR",params);  } catch (  IDFFMetaException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"IDFF","SP-Extended Metadata",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }catch (  JAXBException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"IDFF","IDP-Extended Metadata",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.EncryptKeyElement createEncryptKeyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.EncryptKeyElementImpl();}  }
class C{  public static boolean isFileTypeSupported(AudioFileFormat.Type fileType,AudioInputStream stream){  List providers=getAudioFileWriters();  for (int i=0; i < providers.size(); i++) {    AudioFileWriter writer=(AudioFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType,stream)) {      return true;    }  }  return false;}  }
class C{  public JSlider(){  this(HORIZONTAL,0,100,50);}  }
class C{  public void initializeReplication(ReplicationParameters parameters) throws EmbeddedDirectoryServerException {  Reject.checkNotNull(connectionParams);  int returnCode=ReplicationCliMain.mainCLI(parameters.toCommandLineArgumentsInitialize(configParams.getConfigurationFile(),connectionParams),!isRunning(),outStream,errStream);  if (returnCode != 0) {    throw new EmbeddedDirectoryServerException(ERR_EMBEDDED_SERVER_INITIALIZE_REPLICATION.get(configParams.getServerRootDirectory(),connectionParams.getAdminPort(),parameters.getHostNameDestination(),parameters.getAdminPortDestination(),returnCode));  }}  }
class C{  @Activate protected void activate(ComponentContext context) throws Exception {  JsonValue configuration=enhancedConfig.getConfigurationAsJson(context);  for (  JsonValue managedObjectConfig : configuration.get("objects").expect(List.class)) {    final ManagedObjectSet objectSet=new ManagedObjectSet(scriptRegistry,cryptoService,syncRoute,connectionFactory,managedObjectConfig);    if (managedRoutes.containsKey(objectSet.getName())) {      throw new ComponentException("Duplicate definition of managed object type: " + objectSet.getName());    }    managedRoutes.put(objectSet.getName(),managedRouter.addRoute(RoutingMode.STARTS_WITH,uriTemplate(objectSet.getTemplate()),new ManagedObjectSetRequestHandler(objectSet)));  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(16,8);  childData=child.getData();  assertEquals("characterdataDeleteDataMiddleAssert","1230 North Ave. Texas 98551",childData);}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  xstr().dispatchCharactersEvents(ch);}  }
class C{  public ConnectIOException(String s){  super(s);}  }
class C{  public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public void initializePluginConfigManager() throws ConfigException {  registeredPlugins.clear();  pluginRootConfig=serverContext.getRootConfig().getPluginRoot();  pluginRootConfig.addPluginAddListener(this);  pluginRootConfig.addPluginDeleteListener(this);}  }
class C{  public static void write_placement_scope(DsnWriteScopeParameter p_par,freert.library.LibPackage p_package) throws java.io.IOException {  Collection<BrdItem> board_items=p_par.board.get_items();  boolean component_found=false;  for (int i=1; i <= p_par.board.brd_components.count(); ++i) {    board.infos.BrdComponent curr_component=p_par.board.brd_components.get(i);    if (curr_component.get_package() == p_package) {      boolean undeleted_item_found=false;      Iterator<BrdItem> it=board_items.iterator();      while (it.hasNext()) {        BrdItem curr_item=it.next();        if (curr_item.get_component_no() == curr_component.id_no) {          undeleted_item_found=true;          break;        }      }      if (undeleted_item_found || !curr_component.is_placed()) {        if (!component_found) {          p_par.file.start_scope();          p_par.file.write("component ");          p_par.identifier_type.write(p_package.pkg_name,p_par.file);          component_found=true;        }        DsnKeywordComponent.write_scope(p_par,curr_component);      }    }  }  if (component_found) {    p_par.file.end_scope();  }}  }
class C{  public void paintToolBarContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public String join(String separator){  StringBuilder sb=new StringBuilder();  boolean isFirst=true;  for (  Object e : this) {    if (isFirst)     isFirst=false; else     sb.append(separator);    sb.append(e);  }  return sb.toString();}  }
class C{  public void testZeroNeg(){  String numA="0";  String numB="-27384627835298756289327365";  String res="-27384627835298756289327365";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public int hashCode(){  return attrType.hashCode();}  }
class C{  public CanvasTag(PdfMcr mcr){  this(mcr.getRole(),mcr.getMcid());}  }
class C{  public AMGroup createAssignableDynamicGroup(String name,Map attributes,Map serviceNameAndAttrs) throws AMException, SSOException {  return createGroup(name,attributes,serviceNameAndAttrs,AMObject.ASSIGNABLE_DYNAMIC_GROUP);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String interfaceName=getStringOptionValue(ARGUMENT_INTERFACE_NAME);  String pluginName=getStringOptionValue(ARGUMENT_PLUGIN_NAME);  ServiceManager sm=null;  try {    sm=new ServiceManager(adminSSOToken);  } catch (  SMSException smse) {    throw new CLIException(smse,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException ssoe) {    throw new CLIException(ssoe,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,interfaceName,pluginName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REMOVE_PLUGIN_SCHEMA",params);    sm.removePluginSchema(serviceName,interfaceName,pluginName);    String[] params2={serviceName,pluginName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REMOVE_PLUGIN_SCHEMA",params2);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("remove-plugin-schema-succeed"),(Object[])params));  } catch (  SSOException ssoe) {    String[] args={serviceName,pluginName,ssoe.getMessage()};    debugError("RemovePluginSchema.handleRequest",ssoe);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_PLUGIN_SCHEMA",args);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("remove-plugin-schema-failed"),(Object[])args));    throw new CLIException(ssoe,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException smse) {    String[] args={serviceName,pluginName,smse.getMessage()};    debugError("RemovePluginSchema.handleRequest",smse);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_PLUGIN_SCHEMA",args);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("remove-plugin-schema-failed"),(Object[])args));    throw new CLIException(smse,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(40,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public CellRenderer(Cell modelElement){  super(modelElement);  setProperty(Property.ROWSPAN,modelElement.getRowspan());  setProperty(Property.COLSPAN,modelElement.getColspan());}  }
class C{  public void write(byte[] b) throws IOException {  out.write(b);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  Attr newAttribute;  Attr newAttr1;  NodeList elementList;  String attrName;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=elementList.item(0);  attributes=element.getAttributes();  newAttr1=doc.createAttributeNS("http://www.w3.org/DOM/L1","streets");  newAttribute=((Element)element).setAttributeNodeNS(newAttr1);  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/DOM/L1","streets");  attrName=attribute.getNodeName();  assertEquals("namednodemapsetnameditemns01","streets",attrName);}  }
class C{  public void addPagedListResponseFactoryImports(ModelTypeTable typeTable){}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  private void parseVia(Via v) throws ParseException {  lexer.match(TokenTypes.ID);  Token protocolName=lexer.getNextToken();  this.lexer.SPorHT();  lexer.match('/');  this.lexer.SPorHT();  lexer.match(TokenTypes.ID);  this.lexer.SPorHT();  Token protocolVersion=lexer.getNextToken();  this.lexer.SPorHT();  lexer.match('/');  this.lexer.SPorHT();  lexer.match(TokenTypes.ID);  this.lexer.SPorHT();  Token transport=lexer.getNextToken();  this.lexer.SPorHT();  Protocol protocol=new Protocol();  protocol.setProtocolName(protocolName.getTokenValue());  protocol.setProtocolVersion(protocolVersion.getTokenValue());  protocol.setTransport(transport.getTokenValue());  v.setSentProtocol(protocol);  HostNameParser hnp=new HostNameParser(this.getLexer());  HostPort hostPort=hnp.hostPort(true);  v.setSentBy(hostPort);  this.lexer.SPorHT();  while (lexer.lookAhead(0) == ';') {    this.lexer.consume(1);    this.lexer.SPorHT();    NameValue nameValue=this.nameValue();    String name=nameValue.getName();    if (name.equals(Via.BRANCH)) {      String branchId=(String)nameValue.getValueAsObject();      if (branchId == null)       throw new ParseException("null branch Id",lexer.getPtr());    }    v.setParameter(nameValue);    this.lexer.SPorHT();  }  if (lexer.lookAhead(0) == '(') {    this.lexer.selectLexer("charLexer");    lexer.consume(1);    StringBuilder comment=new StringBuilder();    while (true) {      char ch=lexer.lookAhead(0);      if (ch == ')') {        lexer.consume(1);        break;      } else       if (ch == '\\') {        Token tok=lexer.getNextToken();        comment.append(tok.getTokenValue());        lexer.consume(1);        tok=lexer.getNextToken();        comment.append(tok.getTokenValue());        lexer.consume(1);      } else       if (ch == '\n') {        break;      } else {        comment.append(ch);        lexer.consume(1);      }    }    v.setComment(comment.toString());  }}  }
class C{  public void search(SearchOperation searchOperation){  SearchRequest request=Requests.newSearchRequest(searchOperation.getBaseDN(),searchOperation.getScope(),Filter.alwaysTrue(),"*","+");  LdapResultHandlerAdapter resultHandler=new LdapResultHandlerAdapter(searchOperation);  SearchResultHandler entryHandler=new SearchResultHandlerAdapter(searchOperation,resultHandler);  backend.handleSearch(UNCANCELLABLE_REQUEST_CONTEXT,request,null,entryHandler,resultHandler);}  }
class C{  public Object clone(){  Date d=null;  try {    d=(Date)super.clone();    if (cdate != null) {      d.cdate=(BaseCalendar.Date)cdate.clone();    }  } catch (  CloneNotSupportedException e) {  }  return d;}  }
class C{  private void emitBoxing(Wrapper wrapper){  String owner="java/lang/" + wrapper.wrapperType().getSimpleName();  String name="valueOf";  String desc="(" + wrapper.basicTypeChar() + ")L"+ owner+ ";";  mv.visitMethodInsn(Opcodes.INVOKESTATIC,owner,name,desc,false);}  }
class C{  public void testNegNegFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,127,-10,-57,-101,1,2,2,2,-96,-16,8,-40,-59,68,-88,-88,16,73};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public boolean equals(TextHitInfo hitInfo){  return hitInfo != null && charIndex == hitInfo.charIndex && isLeadingEdge == hitInfo.isLeadingEdge;}  }
class C{  public int length(){  return bytes.length;}  }
class C{  void updateInputMap(Keymap oldKm,Keymap newKm){  InputMap km=getInputMap(JComponent.WHEN_FOCUSED);  InputMap last=km;  while (km != null && !(km instanceof KeymapWrapper)) {    last=km;    km=km.getParent();  }  if (km != null) {    if (newKm == null) {      if (last != km) {        last.setParent(km.getParent());      } else {        last.setParent(null);      }    } else {      InputMap newKM=new KeymapWrapper(newKm);      last.setParent(newKM);      if (last != km) {        newKM.setParent(km.getParent());      }    }  } else   if (newKm != null) {    km=getInputMap(JComponent.WHEN_FOCUSED);    if (km != null) {      InputMap newKM=new KeymapWrapper(newKm);      newKM.setParent(km.getParent());      km.setParent(newKM);    }  }  ActionMap am=getActionMap();  ActionMap lastAM=am;  while (am != null && !(am instanceof KeymapActionMap)) {    lastAM=am;    am=am.getParent();  }  if (am != null) {    if (newKm == null) {      if (lastAM != am) {        lastAM.setParent(am.getParent());      } else {        lastAM.setParent(null);      }    } else {      ActionMap newAM=new KeymapActionMap(newKm);      lastAM.setParent(newAM);      if (lastAM != am) {        newAM.setParent(am.getParent());      }    }  } else   if (newKm != null) {    am=getActionMap();    if (am != null) {      ActionMap newAM=new KeymapActionMap(newKm);      newAM.setParent(am.getParent());      am.setParent(newAM);    }  }}  }
class C{  public void updateAgentConfigInheritance(String universalId,Map inherit) throws AMConsoleException {  try {    AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId);    AgentConfiguration.updateInheritance(amid,inherit);  } catch (  SMSException e) {    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    throw new AMConsoleException(getErrorString(e));  }catch (  IdRepoException e) {    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public SQLTransactionRollbackException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(100);  sb.append("\nService Instance: ").append(getName()).append("\n\tGroup: ").append(getGroup()).append("\n\tURI: ").append(getURI()).append("\n\tAttributes: ").append(getAttributes());  return (sb.toString());}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb11.TimeoutType createTimeoutType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.TimeoutTypeImpl();}  }
class C{  private int checkInterruptWhileWaiting(Node node){  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;}  }
class C{  public NumberFixedLength(String identifier,AbstractTagFrameBody frameBody,int size){  super(identifier,frameBody);  if (size < 0) {    throw new IllegalArgumentException("Length is less than zero: " + size);  }  this.size=size;}  }
class C{  public void resetRowSelection(){  listSelectionModel.clearSelection();  if (selection != null && rowMapper != null) {    int aRow;    int validCount=0;    int[] rows=rowMapper.getRowsForPaths(selection);    for (int counter=0, maxCounter=selection.length; counter < maxCounter; counter++) {      aRow=rows[counter];      if (aRow != -1) {        listSelectionModel.addSelectionInterval(aRow,aRow);      }    }    if (leadIndex != -1 && rows != null) {      leadRow=rows[leadIndex];    } else     if (leadPath != null) {      tempPaths[0]=leadPath;      rows=rowMapper.getRowsForPaths(tempPaths);      leadRow=(rows != null) ? rows[0] : -1;    } else {      leadRow=-1;    }    insureRowContinuity();  } else   leadRow=-1;}  }
class C{  public final void testGetPolicyTree01() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PolicyNode pn=TestUtils.getPolicyTree();  PKIXCertPathValidatorResult vr=new PKIXCertPathValidatorResult(ta,pn,testPublicKey);  assertSame(pn,vr.getPolicyTree());}  }
class C{  protected final void assertAttached(){  if (poolEntry == null) {    throw new IllegalStateException("Adapter is detached.");  }}  }
class C{  private static float roundToOneSignificantFigure(double num){  final float d=(float)Math.ceil((float)Math.log10(num < 0 ? -num : num));  final int power=1 - (int)d;  final float magnitude=(float)Math.pow(10,power);  final long shifted=Math.round(num * magnitude);  return shifted / magnitude;}  }
class C{  public boolean equals(Object rhs){  try {    return equals((ShapeGraphicAttribute)rhs);  } catch (  ClassCastException e) {    return false;  }}  }
class C{  public Status createStatus(String xml) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS,xml);  if (object == null) {    return new StatusImpl(xml);  } else {    return (Status)object;  }}  }
class C{  public static <T>ListIterator<T> emptyListIterator(){  return Collections.<T>emptyList().listIterator();}  }
class C{  private static int[] toIntArray(String str,boolean shouldThrow){  if (str == null) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("str == null");  }  int length=str.length();  if (length == 0) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  int count=1;  boolean wasDot=true;  char c;  for (int i=0; i < length; i++) {    c=str.charAt(i);    if (c == '.') {      if (wasDot) {        if (!shouldThrow) {          return null;        }        throw new IllegalArgumentException("Incorrect syntax");      }      wasDot=true;      count++;    } else     if (c >= '0' && c <= '9') {      wasDot=false;    } else {      if (!shouldThrow) {        return null;      }      throw new IllegalArgumentException("Incorrect syntax");    }  }  if (wasDot) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  if (count < 2) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  int[] oid=new int[count];  for (int i=0, j=0; i < length; i++) {    c=str.charAt(i);    if (c == '.') {      j++;    } else {      oid[j]=oid[j] * 10 + c - 48;    }  }  if (oid[0] > 2) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  } else   if (oid[0] != 2 && oid[1] > 39) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  return oid;}  }
class C{  public PdfCanvas showText(GlyphLine text){  return showText(text,new ActualTextIterator(text));}  }
class C{  public boolean isAccessibleRowSelected(int r){  if (validateIfNecessary()) {    if (r < 0 || r >= getAccessibleRowCount()) {      return false;    }    int nColumns=getAccessibleColumnCount();    TableCellElementInfo startCell=getCell(r,0);    if (startCell == null) {      return false;    }    int start=startCell.getElement().getStartOffset();    TableCellElementInfo endCell=getCell(r,nColumns - 1);    if (endCell == null) {      return false;    }    int end=endCell.getElement().getEndOffset();    return start >= editor.getSelectionStart() && end <= editor.getSelectionEnd();  }  return false;}  }
class C{  public void filter(File inputFile,PrintWriter o) throws IOException {  BufferedWriter bw=new BufferedWriter(o);  StringBuffer sb=(StringBuffer)fileMap.get(inputFile.toString());  if (sb == null) {    sb=loadFile(inputFile);  }  filter(sb,bw);  bw.flush();}  }
class C{  private void doBaseDN(DN baseDN,Set<DN> deleteDNset){  for (  DN deletedEntryDN : deleteDNset) {    searchBaseDN(baseDN,deletedEntryDN,null);  }}  }
class C{  public int hashCode(){  long bits=java.lang.Double.doubleToLongBits(getX());  bits+=java.lang.Double.doubleToLongBits(getY()) * 37;  bits+=java.lang.Double.doubleToLongBits(getWidth()) * 43;  bits+=java.lang.Double.doubleToLongBits(getHeight()) * 47;  return (((int)bits) ^ ((int)(bits >> 32)));}  }
class C{  public Location add(Vector vec){  this.x+=vec.getX();  this.y+=vec.getY();  this.z+=vec.getZ();  return this;}  }
class C{  protected boolean isSerializable(Object obj){  if (obj == null)   return false;  Class[] interfaces=obj.getClass().getInterfaces();  for (  Class anInterface : interfaces) {    if (anInterface.getName().equals(SERIALIZABLE_INT)) {      return true;    }  }  return false;}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public void testGetObject2() throws Exception {  try {    new SealedObject("secret string",new NullCipher()).getObject((Cipher)null);    fail("NullPointerException should be thrown in the case of " + "null cipher.");  } catch (  NullPointerException e) {  }  KeyGenerator kg=KeyGenerator.getInstance("DES");  Key key=kg.generateKey();  IvParameterSpec ips=new IvParameterSpec(new byte[]{1,2,3,4,5,6,7,8});  Cipher cipher=Cipher.getInstance("DES/CBC/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,key,ips);  String secret="secret string";  SealedObject so=new SealedObject(secret,cipher);  cipher.init(Cipher.DECRYPT_MODE,key,ips);  assertEquals("The returned object does not equals to the " + "original object.",secret,so.getObject(cipher));  try {    so.getObject((Cipher)null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public synchronized void cancel() throws IllegalStateException {  Bukkit.getScheduler().cancelTask(getTaskId());}  }
class C{  private void consumeAllMessages(ReplicationBroker broker){  final List<ReplicationMsg> msgs=new ArrayList<>();  try {    while (true) {      msgs.add(broker.receive());    }  } catch (  SocketTimeoutException expectedAtSomeStage) {  }  if (!msgs.isEmpty()) {    logger.error(LocalizableMessage.raw("Leftover messages from previous test runs " + msgs));  }}  }
class C{  public void notifyVerticalEdgeReached(int startY,int finalY,int overY){  mScrollerY.notifyEdgeReached(startY,finalY,overY);}  }
class C{  protected void fireMenuSelected(){  if (DEBUG) {    System.out.println("In JMenu.fireMenuSelected");  }  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuListener.class) {      if (listeners[i + 1] == null) {        throw new Error(getText() + " has a NULL Listener!! " + i);      } else {        if (menuEvent == null)         menuEvent=new MenuEvent(this);        ((MenuListener)listeners[i + 1]).menuSelected(menuEvent);      }    }  }}  }
class C{  public SessionException(Throwable t){  super(t);}  }
class C{  public static Border createEtchedBorder(){  return sharedEtchedBorder;}  }
class C{  public JTextArea(String text){  this(null,text,0,0);}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  @Override public void tellChangedSessionId(String newId,String oldId,boolean notifySessionListeners,boolean notifyContainerListeners){  Context context=manager.getContext();  if (notifyContainerListeners) {    context.fireContainerEvent(Context.CHANGE_SESSION_ID_EVENT,new String[]{oldId,newId});  }  if (notifySessionListeners) {    Object listeners[]=context.getApplicationEventListeners();    if (listeners != null && listeners.length > 0) {      HttpSessionEvent event=new HttpSessionEvent(getSession());      for (      Object listener : listeners) {        if (!(listener instanceof HttpSessionIdListener))         continue;        HttpSessionIdListener idListener=(HttpSessionIdListener)listener;        try {          idListener.sessionIdChanged(event,oldId);        } catch (        Throwable t) {          manager.getContext().getLogger().error(sm.getString("standardSession.sessionEvent"),t);        }      }    }  }}  }
class C{  private void typeCheck(K key){  Class<?> keyClass=key.getClass();  if (keyClass != keyType && keyClass.getSuperclass() != keyType)   throw new ClassCastException(keyClass + " != " + keyType);}  }
class C{  public void testPutWhenOffsetIsNonZero(){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(40);  byteBuffer.order(ByteOrder.nativeOrder());  IntBuffer intBuffer=byteBuffer.asIntBuffer();  int[] source={2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};  intBuffer.put(source,2,2);  intBuffer.put(source,4,2);  assertEquals(4,intBuffer.get(0));  assertEquals(5,intBuffer.get(1));  assertEquals(6,intBuffer.get(2));  assertEquals(7,intBuffer.get(3));}  }
class C{  public void testDivideBigDecimalScaleRoundingModeHALF_DOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=5;  String b="74723342238476237823787879183470";  int bScale=15;  int newScale=7;  RoundingMode rm=RoundingMode.HALF_DOWN;  String c="500002603731642864013619132621009722.1803810";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  public void error(Object message){}  }
class C{  public void close(){}  }
class C{  public AuthenticationEnforcer exceptDelete(){  exceptDelete=true;  return this;}  }
class C{  private static Expression makeBlock(final ExpressionList<? extends Expression> expressions){  return new SpilledExpressionBlock(expressions);}  }
class C{  public String createStandardManager(String parent) throws Exception {  StandardManager manager=new StandardManager();  ObjectName pname=new ObjectName(parent);  Container container=getParentContainerFromParent(pname);  if (container instanceof Context) {    ((Context)container).setManager(manager);  } else {    throw new Exception(sm.getString("mBeanFactory.managerContext"));  }  ObjectName oname=manager.getObjectName();  if (oname != null) {    return (oname.toString());  } else {    return null;  }}  }
class C{  public boolean hasAttribute(AttributeType attributeType){  if (branchDN.rdn().hasAttributeType(attributeType)) {    return true;  }  for (  TemplateLine l : extraLines) {    if (l.getAttributeType().equals(attributeType)) {      return true;    }  }  return false;}  }
class C{  public Vector normalize(){  double length=length();  x/=length;  y/=length;  z/=length;  return this;}  }
class C{  public void startStreaming(){synchronized (SyncOp) {    videoClient.startStreaming(dataCollecter);    rtmpSender.start(coreParameters.rtmpAddr);    audioClient.start(dataCollecter);    LogTools.d("RESClient,startStreaming()");  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorTransportProtocolType createAuthenticatorTransportProtocolType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorTransportProtocolTypeImpl();}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  HttpServletRequest hRequest=null;  HttpServletResponse hResponse=null;  if (request instanceof HttpServletRequest) {    hRequest=(HttpServletRequest)request;  }  if (response instanceof HttpServletResponse) {    hResponse=(HttpServletResponse)response;  }  doLog("START TIME        ",getTimestamp());  if (hRequest == null) {    doLog("        requestURI",NON_HTTP_REQ_MSG);    doLog("          authType",NON_HTTP_REQ_MSG);  } else {    doLog("        requestURI",hRequest.getRequestURI());    doLog("          authType",hRequest.getAuthType());  }  doLog(" characterEncoding",request.getCharacterEncoding());  doLog("     contentLength",Long.toString(request.getContentLengthLong()));  doLog("       contentType",request.getContentType());  if (hRequest == null) {    doLog("       contextPath",NON_HTTP_REQ_MSG);    doLog("            cookie",NON_HTTP_REQ_MSG);    doLog("            header",NON_HTTP_REQ_MSG);  } else {    doLog("       contextPath",hRequest.getContextPath());    Cookie cookies[]=hRequest.getCookies();    if (cookies != null) {      for (int i=0; i < cookies.length; i++) {        doLog("            cookie",cookies[i].getName() + "=" + cookies[i].getValue());      }    }    Enumeration<String> hnames=hRequest.getHeaderNames();    while (hnames.hasMoreElements()) {      String hname=hnames.nextElement();      Enumeration<String> hvalues=hRequest.getHeaders(hname);      while (hvalues.hasMoreElements()) {        String hvalue=hvalues.nextElement();        doLog("            header",hname + "=" + hvalue);      }    }  }  doLog("            locale",request.getLocale().toString());  if (hRequest == null) {    doLog("            method",NON_HTTP_REQ_MSG);  } else {    doLog("            method",hRequest.getMethod());  }  Enumeration<String> pnames=request.getParameterNames();  while (pnames.hasMoreElements()) {    String pname=pnames.nextElement();    String pvalues[]=request.getParameterValues(pname);    StringBuilder result=new StringBuilder(pname);    result.append('=');    for (int i=0; i < pvalues.length; i++) {      if (i > 0) {        result.append(", ");      }      result.append(pvalues[i]);    }    doLog("         parameter",result.toString());  }  if (hRequest == null) {    doLog("          pathInfo",NON_HTTP_REQ_MSG);  } else {    doLog("          pathInfo",hRequest.getPathInfo());  }  doLog("          protocol",request.getProtocol());  if (hRequest == null) {    doLog("       queryString",NON_HTTP_REQ_MSG);  } else {    doLog("       queryString",hRequest.getQueryString());  }  doLog("        remoteAddr",request.getRemoteAddr());  doLog("        remoteHost",request.getRemoteHost());  if (hRequest == null) {    doLog("        remoteUser",NON_HTTP_REQ_MSG);    doLog("requestedSessionId",NON_HTTP_REQ_MSG);  } else {    doLog("        remoteUser",hRequest.getRemoteUser());    doLog("requestedSessionId",hRequest.getRequestedSessionId());  }  doLog("            scheme",request.getScheme());  doLog("        serverName",request.getServerName());  doLog("        serverPort",Integer.toString(request.getServerPort()));  if (hRequest == null) {    doLog("       servletPath",NON_HTTP_REQ_MSG);  } else {    doLog("       servletPath",hRequest.getServletPath());  }  doLog("          isSecure",Boolean.valueOf(request.isSecure()).toString());  doLog("------------------","--------------------------------------------");  chain.doFilter(request,response);  doLog("------------------","--------------------------------------------");  if (hRequest == null) {    doLog("          authType",NON_HTTP_REQ_MSG);  } else {    doLog("          authType",hRequest.getAuthType());  }  doLog("       contentType",response.getContentType());  if (hResponse == null) {    doLog("            header",NON_HTTP_RES_MSG);  } else {    Iterable<String> rhnames=hResponse.getHeaderNames();    for (    String rhname : rhnames) {      Iterable<String> rhvalues=hResponse.getHeaders(rhname);      for (      String rhvalue : rhvalues) {        doLog("            header",rhname + "=" + rhvalue);      }    }  }  if (hRequest == null) {    doLog("        remoteUser",NON_HTTP_REQ_MSG);  } else {    doLog("        remoteUser",hRequest.getRemoteUser());  }  if (hResponse == null) {    doLog("        remoteUser",NON_HTTP_RES_MSG);  } else {    doLog("            status",Integer.toString(hResponse.getStatus()));  }  doLog("END TIME          ",getTimestamp());  doLog("==================","============================================");}  }
class C{  public DropTarget(Component c,int ops,DropTargetListener dtl) throws HeadlessException {  this(c,ops,dtl,true);}  }
class C{  public synchronized void flush(){  if (recCount <= 0) {    if (Debug.messageEnabled()) {      Debug.message("RemoteHandler.flush(): no records " + "in buffer to send");    }    return;  }  Vector responses=new Vector();  if (Debug.messageEnabled()) {    Debug.message("RemoteHandler.flush(): sending buffered records");  }  String thisAMException=null;  try {    Iterator sidIter=reqSetMap.keySet().iterator();    while (sidIter.hasNext()) {      String currentLoggedBySID=(String)sidIter.next();      URL logHostURL=getLogHostURL(currentLoggedBySID);      if (logHostURL == null) {        Debug.error("RemoteHandler.flush(): logHostURL is null");        this.recCount=0;        reqSetMap=new HashMap();        return;      }      RequestSet reqSet=(RequestSet)reqSetMap.get(currentLoggedBySID);      responses=PLLClient.send(logHostURL,reqSet);      Iterator respIter=responses.iterator();      while (respIter.hasNext()) {        Response resp=(Response)respIter.next();        String respContent=resp.getContent();        if (!respContent.equals("OK")) {          Debug.error("RemoteHandler.flush(): " + respContent + " on remote machine");          if (thisAMException == null) {            thisAMException="RemoteHandler.flush(): " + respContent + " on remote machine";          }        }      }    }  } catch (  Exception e) {    Debug.error("RemoteHandler.flush(): ",e);  }  this.recCount=0;  reqSetMap=new HashMap();  if (thisAMException != null) {    throw new AMLogException(thisAMException);  }}  }
class C{  protected SystemException(String reason,int minor,CompletionStatus completed){  super(reason);  this.minor=minor;  this.completed=completed;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns05.class,args);}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=73 * hash + this.dsId;  hash=73 * hash + this.rsId;  hash=73 * hash + (int)(this.generationId ^ (this.generationId >>> 32));  hash=73 * hash + (this.status != null ? this.status.hashCode() : 0);  hash=73 * hash + (this.assuredFlag ? 1 : 0);  hash=73 * hash + (this.assuredMode != null ? this.assuredMode.hashCode() : 0);  hash=73 * hash + this.safeDataLevel;  hash=73 * hash + (this.refUrls != null ? this.refUrls.hashCode() : 0);  hash=73 * hash + (this.eclIncludes != null ? eclIncludes.hashCode() : 0);  hash=73 * hash + (this.eclIncludesForDeletes != null ? eclIncludesForDeletes.hashCode() : 0);  hash=73 * hash + this.groupId;  hash=73 * hash + this.protocolVersion;  return hash;}  }
class C{  public EnumMap(EnumMap<K,? extends V> m){  keyType=m.keyType;  keyUniverse=m.keyUniverse;  vals=m.vals.clone();  size=m.size;}  }
class C{  private static String makeSwingPropertiesFilename(){  String sep=File.separator;  String javaHome=System.getProperty("java.home");  if (javaHome == null) {    javaHome="<java.home undefined>";  }  return javaHome + sep + "lib"+ sep+ "swing.properties";}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public boolean beginTabCommonDisplay(ChildDisplayEvent event){  return (tabModel.getNodeCount() > 1);}  }
class C{  private void updateNodeSizes(boolean updateAll){  int aY, counter, maxCounter;  TreeStateNode node;  updateNodeSizes=false;  for (aY=counter=0, maxCounter=visibleNodes.size(); counter < maxCounter; counter++) {    node=(TreeStateNode)visibleNodes.elementAt(counter);    node.setYOrigin(aY);    if (updateAll || !node.hasValidSize())     node.updatePreferredSize(counter);    aY+=node.getPreferredHeight();  }}  }
class C{  public void testReceive_UnconnectedClose() throws Exception {  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_NORMAL);  this.channel1.close();  assertFalse(this.channel1.isOpen());  try {    assertNull(this.channel1.receive(dst));    fail("Should throw a ClosedChannelException here.");  } catch (  ClosedChannelException e) {  }}  }
class C{  public long readLong(){  if (remaining() < 8) {    throw new IndexOutOfBoundsException();  }  long v=0;  for (int i=0; i < 8; i++) {    v<<=8;    v|=sequence.byteAt(pos++) & 0xFF;  }  return v;}  }
class C{  public void insertBefore(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=ifirst;  } else {    prev.next=ifirst;  }  location.prev=ilast;  ilast.next=location;  ifirst.prev=prev;  cache=null;  insns.removeAll(false);}  }
class C{  @Override public SecurityConstraint[] findConstraints(){  return (constraints);}  }
class C{  public StageFloorBase(String[] SVGData,Image... sprites){  super(SVGData,0,0,0,0,sprites);}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public void disconnect(DisconnectReason disconnectReason,boolean sendNotification,LocalizableMessage message){}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureType createSignatureType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureTypeImpl();}  }
class C{  public Set searchOrganizationNames(String tokenID,String dn,int numOfEntries,boolean sortResults,boolean ascendingOrder,String serviceName,String attrName,Set values) throws SMSException, SSOException {  initialize();  if (debug.messageEnabled()) {    debug.message("SMSJAXRPCObjectImpl::searchOrganizationNames dn: " + dn);  }  CachedSubEntries ce=CachedSubEntries.getInstance(getToken(tokenID),dn);  return (ce.searchOrgNames(getToken(tokenID),serviceName,attrName,values));}  }
class C{  public int signum(){  return this.signum;}  }
class C{  public void removeRelayState(String requestID){  relayStateMap.remove(requestID);}  }
class C{  public void paintToolBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  private TestUtils(){}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(PGTITLE,CCPageTitle.class);  registerChild(SEC_MH_COMMON,CCSecondaryMasthead.class);  registerChild(TF_DEVICE_NAME,CCTextField.class);  registerChild(TF_CLASSIFICATION,CCTextField.class);  registerChild(SINGLECHOICE_CLASSIFICATION,CCDropDownMenu.class);  registerChild(BTN_CLASSIFICATION,CCButton.class);  registerChild(PROPERTY_ATTRIBUTE,AMPropertySheet.class);  ptModel.registerChildren(this);  propertySheetModel.registerChildren(this);}  }
class C{  void appendTextChild(int m_char_current_start,int contentLength){  int w0=TEXT_NODE;  int w1=currentParent;  int w2=m_char_current_start;  int w3=contentLength;  int ourslot=appendNode(w0,w1,w2,w3);  previousSibling=ourslot;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Element element;  Attr attribute;  Attr attribute1;  Node newNode;  String attrName;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test","root");  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/L1","L1:att");  attributes=element.getAttributes();  newNode=attributes.setNamedItemNS(attribute1);  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/DOM/L1","att");  attrName=attribute.getNodeName();  assertEquals("namednodemapsetnameditemns02","L1:att",attrName);}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {  if (entityResolver != null) {    return entityResolver.resolveEntity(publicId,systemId);  } else {    return null;  }}  }
class C{  private int scale(SynthContext context,int size){  if (context == null || context.getComponent() == null) {    return size;  }  String scaleKey=(String)context.getComponent().getClientProperty("JComponent.sizeVariant");  if (scaleKey != null) {    if (NimbusStyle.LARGE_KEY.equals(scaleKey)) {      size*=NimbusStyle.LARGE_SCALE;    } else     if (NimbusStyle.SMALL_KEY.equals(scaleKey)) {      size*=NimbusStyle.SMALL_SCALE;    } else     if (NimbusStyle.MINI_KEY.equals(scaleKey)) {      size*=NimbusStyle.MINI_SCALE + 0.07;    }  }  return size;}  }
class C{  public static float[] copyOfRange(float[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  float[] copy=new float[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  private static void log(final Entry entry){  try {    writer.writeEntry(entry);    writer.flush();  } catch (  IOException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());  }}  }
class C{  public void run(){synchronized (thisTurn) {    if (!thisTurn.isEmpty()) {      for (Iterator iter=thisTurn.iterator(); iter.hasNext(); ) {        Object obj=iter.next();        doGroupAction(obj);        iter.remove();      }    }  }synchronized (nextTurn[containerNeeded - 1]) {    Set tempSet=thisTurn;    for (int i=0; i < containerNeeded + 1; i++) {      if (i == 0) {        thisTurn=nextTurn[0];      } else {        if (i == containerNeeded) {          nextTurn[containerNeeded - 1]=tempSet;        } else {          nextTurn[i - 1]=nextTurn[i];        }      }    }  }}  }
class C{  public String canonicalize(String str) throws EntitlementException {  return str.toLowerCase();}  }
class C{  private static void determineFirstDigit(StringBuilder resultString,int lgPatternFound) throws NotFoundException {  for (int d=0; d < 10; d++) {    if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {      resultString.insert(0,(char)('0' + d));      return;    }  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  private boolean containsSubstring(String password,int minSubstringLength,Attribute a){  final int passwordLength=password.length();  for (int i=0; i < passwordLength; i++) {    for (int j=i + minSubstringLength; j <= passwordLength; j++) {      Attribute substring=Attributes.create(a.getAttributeDescription().getAttributeType(),password.substring(i,j));      for (      ByteString val : a) {        if (substring.contains(val)) {          return true;        }      }    }  }  return false;}  }
class C{  private static List<ResultPoint[]> detect(boolean multiple,BitMatrix bitMatrix){  List<ResultPoint[]> barcodeCoordinates=new ArrayList<>();  int row=0;  int column=0;  boolean foundBarcodeInRow=false;  while (row < bitMatrix.getHeight()) {    ResultPoint[] vertices=findVertices(bitMatrix,row,column);    if (vertices[0] == null && vertices[3] == null) {      if (!foundBarcodeInRow) {        break;      }      foundBarcodeInRow=false;      column=0;      for (      ResultPoint[] barcodeCoordinate : barcodeCoordinates) {        if (barcodeCoordinate[1] != null) {          row=(int)Math.max(row,barcodeCoordinate[1].getY());        }        if (barcodeCoordinate[3] != null) {          row=Math.max(row,(int)barcodeCoordinate[3].getY());        }      }      row+=ROW_STEP;      continue;    }    foundBarcodeInRow=true;    barcodeCoordinates.add(vertices);    if (!multiple) {      break;    }    if (vertices[2] != null) {      column=(int)vertices[2].getX();      row=(int)vertices[2].getY();    } else {      column=(int)vertices[4].getX();      row=(int)vertices[4].getY();    }  }  return barcodeCoordinates;}  }
class C{  public void next(){  index++;}  }
class C{  public SessionDescription createSessionDescription(SessionDescription otherSessionDescription) throws SdpException {  return new SessionDescriptionImpl(otherSessionDescription);}  }
class C{  public void logBindResponse(BindOperation bindOperation){}  }
class C{  @Override public Foo create(long fooId){  Foo foo=new FooImpl();  foo.setNew(true);  foo.setPrimaryKey(fooId);  String uuid=PortalUUIDUtil.generate();  foo.setUuid(uuid);  foo.setCompanyId(companyProvider.getCompanyId());  return foo;}  }
class C{  public void paintLabelBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public TitledBorder(Border border,String title){  this(border,title,LEADING,DEFAULT_POSITION,null,null);}  }
class C{  public void pack(){  if (popup != null) {    Dimension pref=getPreferredSize();    if (pref == null || pref.width != getWidth() || pref.height != getHeight()) {      showPopup();    } else {      validate();    }  }}  }
class C{  public void replaceSelection(String content){  Document doc=getDocument();  if (doc != null) {    try {      boolean composedTextSaved=saveComposedText(caret.getDot());      int p0=Math.min(caret.getDot(),caret.getMark());      int p1=Math.max(caret.getDot(),caret.getMark());      if (doc instanceof AbstractDocument) {        ((AbstractDocument)doc).replace(p0,p1 - p0,content,null);      } else {        if (p0 != p1) {          doc.remove(p0,p1 - p0);        }        if (content != null && content.length() > 0) {          doc.insertString(p0,content,null);        }      }      if (composedTextSaved) {        restoreComposedText();      }    } catch (    BadLocationException e) {      UIManager.getLookAndFeel().provideErrorFeedback(JTextComponent.this);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String documentTypeName;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  documentTypeName=docType.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("doctypeNameSVG","svg",documentTypeName);  } else {    assertEquals("documentName","staff",documentTypeName);  }}  }
class C{  public DOMSource(Node node,String systemID){  setNode(node);  setSystemId(systemID);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.SNElement createSNElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.SNElementImpl();}  }
class C{  private final Bitmap parseBitmap(int resId){  return BitmapFactory.decodeResource(mContext.getResources(),resId);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.CNElement createCNElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.CNElementImpl();}  }
class C{  public void paintDesktopIconBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private void sendResponse(Object session,String idpEntityId,String spEntityId,String idpMetaAlias,String realm) throws WSFederationException, IOException {  String classMethod="IDPSSOFederate.sendResponse: ";  String acsURL=IDPSSOUtil.getACSurl(spEntityId,realm,wreply);  if ((acsURL == null) || (acsURL.trim().length() == 0)) {    debug.error(classMethod + "no ACS URL found.");    String[] data={realm,spEntityId,wreply};    LogUtil.error(Level.INFO,LogUtil.NO_ACS_URL,data,null);    throw new WSFederationException(WSFederationUtils.bundle.getString("unableTofindACSURL"));  }  final SPSSOConfigElement spConfig=WSFederationUtils.getMetaManager().getSPSSOConfig(realm,spEntityId);  if (spConfig == null) {    debug.error("Cannot find configuration for SP " + spEntityId);    throw new WSFederationException(WSFederationUtils.bundle.getString("unableToFindSPConfiguration"));  }  String authMethod;  try {    authMethod=WSFederationUtils.sessionProvider.getProperty(session,SessionProvider.AUTH_METHOD)[0];  } catch (  SessionException se) {    throw new WSFederationException(se);  }  String strWantAssertionSigned=WSFederationMetaUtils.getAttribute(spConfig,WSFederationConstants.WANT_ASSERTION_SIGNED);  boolean wantAssertionSigned=strWantAssertionSigned != null ? Boolean.parseBoolean(strWantAssertionSigned) : true;  FederationElement sp=WSFederationUtils.getMetaManager().getEntityDescriptor(realm,spEntityId);  String spTokenIssuerName=WSFederationUtils.getMetaManager().getTokenIssuerName(sp);  RequestSecurityTokenResponse rstr=new RequestSecurityTokenResponse(WSFederationUtils.createSAML11Token(realm,idpEntityId,spEntityId,session,spTokenIssuerName,authMethod,wantAssertionSigned),wtrealm);  if (rstr == null) {    debug.error(classMethod + "response is null");    String errorMsg=WSFederationUtils.bundle.getString("UnableToCreateAssertion");    return;  } else {    try {      String[] values={idpMetaAlias};      String[] spList=WSFederationUtils.sessionProvider.getProperty(session,WSFederationConstants.SESSION_SP_LIST);      ArrayList<String> newSpList=(spList != null) ? new ArrayList<String>(Arrays.asList(spList)) : new ArrayList<String>();      if (!newSpList.contains(spEntityId)) {        newSpList.add(spEntityId);        WSFederationUtils.sessionProvider.setProperty(session,WSFederationConstants.SESSION_SP_LIST,newSpList.toArray(new String[0]));      }    } catch (    SessionException e) {      debug.error(classMethod + "error setting idpMetaAlias into the session: ",e);    }    try {      postToTarget(rstr,acsURL);    } catch (    ServletException se) {      throw new WSFederationException(se);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodehaschildnodesfalse.class,args);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(10);  format((getYear() + 1900),4,sb);  sb.append('-');  format((getMonth() + 1),2,sb);  sb.append('-');  format(getDate(),2,sb);  return sb.toString();}  }
class C{  public void test_ConstructorILjava_lang_StringIIIIIIIIIII(){  assertNotNull(new SimpleTimeZone(TimeZone.LONG,"Europe/Paris",SimpleTimeZone.STANDARD_TIME,SimpleTimeZone.STANDARD_TIME,SimpleTimeZone.UTC_TIME,SimpleTimeZone.WALL_TIME,SimpleTimeZone.WALL_TIME,TimeZone.SHORT,SimpleTimeZone.STANDARD_TIME,TimeZone.LONG,SimpleTimeZone.UTC_TIME,SimpleTimeZone.STANDARD_TIME,TimeZone.LONG));  assertNotNull(new SimpleTimeZone(TimeZone.LONG,"Europe/Paris",SimpleTimeZone.STANDARD_TIME,SimpleTimeZone.STANDARD_TIME,SimpleTimeZone.UTC_TIME,SimpleTimeZone.WALL_TIME,Integer.MAX_VALUE,TimeZone.SHORT,SimpleTimeZone.STANDARD_TIME,TimeZone.LONG,SimpleTimeZone.UTC_TIME,Integer.MIN_VALUE,TimeZone.LONG));  try {    new SimpleTimeZone(1000,"TEST",12,1,Calendar.SUNDAY,0,Integer.MAX_VALUE,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0,Integer.MAX_VALUE,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,10,Calendar.SUNDAY,0,Integer.MAX_VALUE,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0,Integer.MAX_VALUE,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,1,10,0,Calendar.NOVEMBER,Integer.MAX_VALUE,-1,Calendar.SUNDAY,0,Integer.MAX_VALUE,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.DECEMBER,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,Integer.MAX_VALUE,-10,Calendar.SUNDAY,0,Integer.MAX_VALUE,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public final void run(Runnable task) throws InterruptedException {  IPSThread ipsThread;synchronized (idleThreadList) {    while (tail == -1) {      if ((debug != null) && (debug.warningEnabled())) {        debug.warning(Thread.currentThread().getName() + " waiting for an idle thread in " + toString());      }      idleThreadList.wait();    }    ipsThread=idleThreadList[tail--];  }  ipsThread.process(task);}  }
class C{  public static void addParams(final Map<String,String> params,final StringBuilder uri){  if (params == null || params.isEmpty())   return;  for (  Entry<String,String> param : params.entrySet())   addParam(param.getKey(),param.getValue(),uri);}  }
class C{  public BindOperation processSASLBind(ByteString rawBindDN,String saslMechanism,ByteString saslCredentials,List<Control> controls){  BindOperationBasis bindOperation=new BindOperationBasis(this,nextOperationID(),nextMessageID(),controls,PROTOCOL_VERSION,rawBindDN,saslMechanism,saslCredentials);  bindOperation.setInternalOperation(true);  bindOperation.run();  return bindOperation;}  }
class C{  @Override public final String toString(){  StringBuilder cab=new StringBuilder(50 + getHopCount() * 30);  cab.append("HttpRoute[");  if (this.localAddress != null) {    cab.append(this.localAddress);    cab.append("->");  }  cab.append('{');  if (this.tunnelled == TunnelType.TUNNELLED)   cab.append('t');  if (this.layered == LayerType.LAYERED)   cab.append('l');  if (this.secure)   cab.append('s');  cab.append("}->");  if (this.proxyChain != null) {    for (    HttpHost aProxyChain : this.proxyChain) {      cab.append(aProxyChain);      cab.append("->");    }  }  cab.append(this.targetHost);  cab.append(']');  return cab.toString();}  }
class C{  private boolean parseJspAttributeAndBody(Node parent,String tag,String bodyType) throws JasperException {  boolean result=false;  if (reader.matchesOptionalSpacesFollowedBy("<jsp:attribute")) {    parseNamedAttributes(parent);    result=true;  }  if (reader.matchesOptionalSpacesFollowedBy("<jsp:body")) {    parseJspBody(parent,bodyType);    reader.skipSpaces();    if (!reader.matchesETag(tag)) {      err.jspError(reader.mark(),"jsp.error.unterminated","&lt;" + tag);    }    result=true;  } else   if (result && !reader.matchesETag(tag)) {    err.jspError(reader.mark(),"jsp.error.jspbody.required","&lt;" + tag);  }  return result;}  }
class C{  private void parseMajorVersion(String majorVer) throws FSMsgException {  try {    majorVersion=Integer.parseInt(majorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationRequest(Element): " + "invalid MajorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSNameRegistrationRequest(Element): " + "MajorVersion of the RegisterNameIdentifierRequest" + "is too high.");      }      throw new FSMsgException("requestVersionTooHigh",null);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSNameRegistrationRequest(Element): " + "MajorVersion of the RegisterNameIdentifierRequest" + "is too low.");      }      throw new FSMsgException("requestVersionTooLow",null);    }  }}  }
class C{  public Hopper(BlockFace facingDirection){  this(facingDirection,DEFAULT_ACTIVE);}  }
class C{  public ModelMBeanAttributeInfo(String name,String type,String description,boolean isReadable,boolean isWritable,boolean isIs){  super(name,type,description,isReadable,isWritable,isIs);  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanAttributeInfo.class.getName(),"ModelMBeanAttributeInfo(" + "String,String,String,boolean,boolean,boolean)","Entry",name);  }  attrDescriptor=validDescriptor(null);}  }
class C{  public void addAttribute(String name,final String value){  if (m_elemContext.m_startTagOpen) {    final String patchedName=patchName(name);    final String localName=getLocalName(patchedName);    final String uri=getNamespaceURI(patchedName,false);    addAttributeAlways(uri,localName,patchedName,"CDATA",value,false);  }}  }
class C{  private void runSolveReferral() throws SearchAbandonException, LdapException {  int hopCount=0;  String[] referral=getNode().getReferral();  while (referral != null && hopCount < 10) {    readRemoteEntry(referral);    referral=BrowserController.getReferral(remoteEntry);    hopCount++;  }  if (referral != null) {    throwAbandonIfNeeded(newLdapException(CLIENT_SIDE_REFERRAL_LIMIT_EXCEEDED,AdminToolMessages.ERR_REFERRAL_LIMIT_EXCEEDED.get(hopCount)));  }}  }
class C{  public static void deleteDirectory(IProgressMonitor monitor,File directory,File base,int step) throws IOException {  if (!directory.exists()) {    return;  }  cleanDirectory(monitor,directory,base,step);  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  static int toCodePoint(char ch){  int codePoint=ch;  return codePoint;}  }
class C{  protected String paramString(){  String defaultIconString=((defaultIcon != null) && (defaultIcon != this) ? defaultIcon.toString() : "");  String pressedIconString=((pressedIcon != null) && (pressedIcon != this) ? pressedIcon.toString() : "");  String disabledIconString=((disabledIcon != null) && (disabledIcon != this) ? disabledIcon.toString() : "");  String selectedIconString=((selectedIcon != null) && (selectedIcon != this) ? selectedIcon.toString() : "");  String disabledSelectedIconString=((disabledSelectedIcon != null) && (disabledSelectedIcon != this) ? disabledSelectedIcon.toString() : "");  String rolloverIconString=((rolloverIcon != null) && (rolloverIcon != this) ? rolloverIcon.toString() : "");  String rolloverSelectedIconString=((rolloverSelectedIcon != null) && (rolloverSelectedIcon != this) ? rolloverSelectedIcon.toString() : "");  String paintBorderString=(paintBorder ? "true" : "false");  String paintFocusString=(paintFocus ? "true" : "false");  String rolloverEnabledString=(rolloverEnabled ? "true" : "false");  return super.paramString() + ",defaultIcon=" + defaultIconString+ ",disabledIcon="+ disabledIconString+ ",disabledSelectedIcon="+ disabledSelectedIconString+ ",margin="+ margin+ ",paintBorder="+ paintBorderString+ ",paintFocus="+ paintFocusString+ ",pressedIcon="+ pressedIconString+ ",rolloverEnabled="+ rolloverEnabledString+ ",rolloverIcon="+ rolloverIconString+ ",rolloverSelectedIcon="+ rolloverSelectedIconString+ ",selectedIcon="+ selectedIconString+ ",text="+ text;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptedKeyElement createEncryptedKeyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptedKeyElementImpl();}  }
class C{  public AttributeList(String name){  this.name=name;}  }
class C{  public void firePropertyChange(String propertyName,byte oldValue,byte newValue){}  }
class C{  protected void parseAttributes(NamedNodeMap attrs) throws SAML2Exception {  if (attrs == null) {    return;  }  try {    int length=attrs.getLength();    for (int i=0; i < length; i++) {      Attr attr=(Attr)attrs.item(i);      String attrName=attr.getName().trim();      String attrValue=attr.getValue().trim();      if (attrName.equals("Address")) {        address=attrValue;      } else       if (attrName.equals("InResponseTo")) {        inResponseTo=attrValue;      } else       if (attrName.equals("NotBefore")) {        notBefore=DateUtils.stringToDate(attrValue);      } else       if (attrName.equals("NotOnOrAfter")) {        notOnOrAfter=DateUtils.stringToDate(attrValue);      } else       if (attrName.equals("Recipient")) {        recipient=attrValue;      } else       if (attrName.equals("xsi:type")) {        contentType=attrValue;      } else {        continue;      }    }  } catch (  ParseException e) {    if (SAML2SDKUtils.debug.messageEnabled()) {      SAML2SDKUtils.debug.message("parseAttributes: " + e.toString());    }    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("wrongInput"));  }}  }
class C{  public void testConstructorSignBytesNegative2(){  byte aBytes[]={-12,56,100,-2,-76,89,45,91,3,-15};  int aSign=-1;  byte rBytes[]={-1,11,-57,-101,1,75,-90,-46,-92,-4,15};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  private static void createDatastoresReadOnlyPolicy(PolicyManager policyManager,String orgDN,String orgID){  String classMethod="UpgradeUtils:createDatastoresReadOnlyPolicy";  try {    String policyName=orgID + "^^" + DATA_STORE_READ_ONLY;    Policy realmPolicy=new Policy(policyName,null,false,true);    String serviceName=DELEGATION_SERVICE;    String resourceName="sms://*" + orgDN + "/"+ IDREPO_SERVICE;    Rule rule=getRule(serviceName,resourceName);    if (rule != null) {      realmPolicy.addRule(rule);    }    String policyAdminRoleUniversalID=getUniversalID(orgDN,ORG_POLICY_ADMIN_ROLE);    Subject subject=getSubject(policyManager,policyAdminRoleUniversalID);    if (subject != null) {      realmPolicy.addSubject(DELEGATION_SUBJECT,subject,false);    }    policyManager.addPolicy(realmPolicy);  } catch (  Exception e) {    debug.error(classMethod + "Error creating datastores readonly policy",e);  }}  }
class C{  public static Foo fetchByUuid_First(java.lang.String uuid,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_First(uuid,orderByComparator);}  }
class C{  @Inject public TokenInfoService(OAuth2ProviderSettingsFactory providerSettingsFactory,@Named(REALM_AGNOSTIC_HEADER) AccessTokenVerifier headerTokenVerifier,@Named(REALM_AGNOSTIC_QUERY_PARAM) AccessTokenVerifier queryTokenVerifier,ClientRegistrationStore clientRegistrationStore){  this.providerSettingsFactory=providerSettingsFactory;  this.headerTokenVerifier=headerTokenVerifier;  this.queryTokenVerifier=queryTokenVerifier;  this.clientRegistrationStore=clientRegistrationStore;}  }
class C{  public PlaSegmentInt sort_endpoints_in_x_y(){  boolean swap_endlines=start_point().compare_x_y(end_point()) > 0;  if (swap_endlines)   return new PlaSegmentInt(end,middle,start); else   return this;}  }
class C{  private NodeImpl shallowCopy(short operation,Node node){switch (node.getNodeType()) {case Node.ATTRIBUTE_NODE:    AttrImpl attr=(AttrImpl)node;  AttrImpl attrCopy;if (attr.namespaceAware) {  attrCopy=createAttributeNS(attr.getNamespaceURI(),attr.getLocalName());  attrCopy.setPrefix(attr.getPrefix());} else {  attrCopy=createAttribute(attr.getName());}attrCopy.setNodeValue(attr.getValue());return attrCopy;case Node.CDATA_SECTION_NODE:return createCDATASection(((CharacterData)node).getData());case Node.COMMENT_NODE:return createComment(((Comment)node).getData());case Node.DOCUMENT_FRAGMENT_NODE:return createDocumentFragment();case Node.DOCUMENT_NODE:case Node.DOCUMENT_TYPE_NODE:throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Cannot copy node of type " + node.getNodeType());case Node.ELEMENT_NODE:ElementImpl element=(ElementImpl)node;ElementImpl elementCopy;if (element.namespaceAware) {elementCopy=createElementNS(element.getNamespaceURI(),element.getLocalName());elementCopy.setPrefix(element.getPrefix());} else {elementCopy=createElement(element.getTagName());}NamedNodeMap attributes=element.getAttributes();for (int i=0; i < attributes.getLength(); i++) {AttrImpl elementAttr=(AttrImpl)attributes.item(i);AttrImpl elementAttrCopy=(AttrImpl)shallowCopy(operation,elementAttr);notifyUserDataHandlers(operation,elementAttr,elementAttrCopy);if (elementAttr.namespaceAware) {elementCopy.setAttributeNodeNS(elementAttrCopy);} else {elementCopy.setAttributeNode(elementAttrCopy);}}return elementCopy;case Node.ENTITY_NODE:case Node.NOTATION_NODE:throw new UnsupportedOperationException();case Node.ENTITY_REFERENCE_NODE:return createEntityReference(node.getNodeName());case Node.PROCESSING_INSTRUCTION_NODE:ProcessingInstruction pi=(ProcessingInstruction)node;return createProcessingInstruction(pi.getTarget(),pi.getData());case Node.TEXT_NODE:return createTextNode(((Text)node).getData());default :throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Unsupported node type " + node.getNodeType());}}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  Node entityNode;  String entityValue;  doc=(Document)load("staff",true);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entityNode=entities.getNamedItem("ent1");  assertNotNull("ent1NotNull",entityNode);  entityNode.setNodeValue("This should have no effect");  entityValue=entityNode.getNodeValue();  assertNull("nodeValueNull",entityValue);}  }
class C{  private void executePostProcessSPI(AMPostAuthProcessInterface postProcessInstance,PostProcessEvent type){  AuthUtils.resetPostProcessURLs(servletRequest);  if (requestMap.isEmpty() && (servletRequest != null)) {    @SuppressWarnings("unchecked") Map<String,String[]> map=servletRequest.getParameterMap();    for (    Map.Entry<String,String[]> e : map.entrySet()) {      requestMap.put(e.getKey(),e.getValue()[0]);    }  }  try {switch (type) {case SUCCESS:      final SSOToken ssoToken=getSSOToken();    postProcessInstance.onLoginSuccess(requestMap,servletRequest,servletResponse,ssoToken);  setSessionID(new SessionID(ssoToken.getTokenID().toString()));break;case FAILURE:postProcessInstance.onLoginFailure(requestMap,servletRequest,servletResponse);break;case LOGOUT:postProcessInstance.onLogout(servletRequest,servletResponse,getSSOToken());break;default :if (DEBUG.messageEnabled()) {DEBUG.message("executePostProcessSPI: invalid input type: " + type);}}} catch (AuthenticationException ae) {if (DEBUG.messageEnabled()) {DEBUG.message("Error ",ae);}}catch (Exception e) {if (DEBUG.messageEnabled()) {DEBUG.message("Error ",e);}}}  }
class C{  public WmfImageData(String fileName) throws MalformedURLException {  this(UrlUtil.toURL(fileName));}  }
class C{  public AttributeCertificateHolder(int digestedObjectType,String digestAlgorithm,String otherObjectTypeID,byte[] objectDigest){  holder=new Holder(new ObjectDigestInfo(digestedObjectType,new ASN1ObjectIdentifier(otherObjectTypeID),new AlgorithmIdentifier(digestAlgorithm),Arrays.clone(objectDigest)));}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {    char newBuffer[]=new char[zzBuffer.length * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;  }  int requested=zzBuffer.length - zzEndRead;  int numRead=zzReader.read(zzBuffer,zzEndRead,requested);  if (numRead == 0) {    throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");  }  if (numRead > 0) {    zzEndRead+=numRead;    if (numRead == requested) {      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {        --zzEndRead;        zzFinalHighSurrogate=1;      }    }    return false;  }  return true;}  }
class C{  SynchronizationProviderResult handleConflictResolution(PreOperationModifyDNOperation modifyDNOperation){  if (!modifyDNOperation.isSynchronizationOperation() && !brokerIsConnected()) {    LocalizableMessage msg=ERR_REPLICATION_COULD_NOT_CONNECT.get(getBaseDN());    return new SynchronizationProviderResult.StopProcessing(ResultCode.UNWILLING_TO_PERFORM,msg);  }  if (fractionalConfig.isFractional()) {    if (modifyDNOperation.isSynchronizationOperation()) {      fractionalFilterOperation(modifyDNOperation,true);    } else {      if (fractionalFilterOperation(modifyDNOperation,false)) {        LocalizableMessage msg=NOTE_ERR_FRACTIONAL_FORBIDDEN_OPERATION.get(getBaseDN(),modifyDNOperation);        return new SynchronizationProviderResult.StopProcessing(ResultCode.UNWILLING_TO_PERFORM,msg);      }    }  }  ModifyDnContext ctx=(ModifyDnContext)modifyDNOperation.getAttachment(SYNCHROCONTEXT);  if (ctx != null) {    final String modifiedEntryUUID=getEntryUUID(modifyDNOperation.getOriginalEntry());    if (!modifiedEntryUUID.equals(ctx.getEntryUUID())) {      return new SynchronizationProviderResult.StopProcessing(ResultCode.NO_SUCH_OBJECT,null);    }    if (modifyDNOperation.getNewSuperior() != null) {      String newParentId=findEntryUUID(modifyDNOperation.getNewSuperior());      if (newParentId != null && ctx.getNewSuperiorEntryUUID() != null && !newParentId.equals(ctx.getNewSuperiorEntryUUID())) {        return new SynchronizationProviderResult.StopProcessing(ResultCode.NO_SUCH_OBJECT,null);      }    }    EntryHistorical hist=EntryHistorical.newInstanceFromEntry(modifyDNOperation.getOriginalEntry());    if (hist.addedOrRenamedAfter(ctx.getCSN())) {      return new SynchronizationProviderResult.StopProcessing(ResultCode.NO_OPERATION,null);    }  } else {    CSN csn=generateCSN(modifyDNOperation);    String newParentId=null;    if (modifyDNOperation.getNewSuperior() != null) {      newParentId=findEntryUUID(modifyDNOperation.getNewSuperior());    }    Entry modifiedEntry=modifyDNOperation.getOriginalEntry();    String modifiedEntryUUID=getEntryUUID(modifiedEntry);    ctx=new ModifyDnContext(csn,modifiedEntryUUID,newParentId);    modifyDNOperation.setAttachment(SYNCHROCONTEXT,ctx);  }  return new SynchronizationProviderResult.ContinueProcessing();}  }
class C{  public SAML2ConfigBuilder encryptAssertion(boolean encryptAssertion){  this.encryptAssertion=encryptAssertion;  return this;}  }
class C{  public SystemLogHandler(PrintStream wrapped){  super(wrapped);  out=wrapped;}  }
class C{  public ParameterBlock(Vector<Object> sources){  setSources(sources);}  }
class C{  public FrameBodyTSRC(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void testGetNotAfter(){  if (this.cert == null) {    return;  }  assertEquals("The NotAfter date is not correct.",tbt_cert.getNotAfter(),cert.getNotAfter());}  }
class C{  public Set<String> toStringSet(){  final Set<String> result=new HashSet<>();  for (  CSN change : serverIdToCSN.values()) {    Date date=new Date(change.getTime());    result.add(change + " " + date+ " "+ change.getTime());  }  return result;}  }
class C{  public BaseViewHolder addOnLongClickListener(int viewId){  itemChildLongClickViewIds.add(viewId);  return this;}  }
class C{  public BOMInputStream(InputStream delegate,boolean include,ByteOrderMark... boms){  super(delegate);  if (boms == null || boms.length == 0) {    throw new IllegalArgumentException("No BOMs specified");  }  this.include=include;  Arrays.sort(boms,ByteOrderMarkLengthComparator);  this.boms=Arrays.asList(boms);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node childNode;  Node newChild;  Node lchild;  Node fchild;  String lchildName;  String fchildName;  Node appendedChild;  String initialName;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  childNode=elementList.item(1);  newChild=childNode.getFirstChild();  initialName=newChild.getNodeName();  appendedChild=childNode.appendChild(newChild);  fchild=childNode.getFirstChild();  fchildName=fchild.getNodeName();  lchild=childNode.getLastChild();  lchildName=lchild.getNodeName();  if (equals("employeeId",initialName)) {    assertEquals("assert1_nowhitespace","name",fchildName);    assertEquals("assert2_nowhitespace","employeeId",lchildName);  } else {    assertEquals("assert1","employeeId",fchildName);    assertEquals("assert2","#text",lchildName);  }}  }
class C{  public synchronized StringBuffer deleteCharAt(int location){  deleteCharAt0(location);  return this;}  }
class C{  public JobService activeCount(String type,Handler<AsyncResult<Long>> handler){  delegate.activeCount(type,handler);  return this;}  }
class C{  public SetupParameters jmxPort(int jmxPort){  this.jmxPort=jmxPort;  return this;}  }
class C{  private void readV1Tag(File file,RandomAccessFile newFile,int loadOptions) throws IOException {  if ((loadOptions & LOAD_IDV1TAG) != 0) {    logger.finer("Attempting to read id3v1tags");    try {      id3v1tag=new ID3v11Tag(newFile,file.getName());    } catch (    TagNotFoundException ex) {      logger.config("No ids3v11 tag found");    }    try {      if (id3v1tag == null) {        id3v1tag=new ID3v1Tag(newFile,file.getName());      }    } catch (    TagNotFoundException ex) {      logger.config("No id3v1 tag found");    }  }}  }
class C{  public SubjectLocality createSubjectLocality(org.w3c.dom.Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT_LOCALITY,elem);  if (obj == null) {    return new SubjectLocalityImpl(elem);  } else {    return (SubjectLocality)obj;  }}  }
class C{  private static void filterServersWithAllLocalDSChanges(RSEvaluations evals,ServerState localState,int localServerId){  final CSN localCSN=getCSN(localState,localServerId);  final LocalEvaluation mostUpToDateEval=new LocalEvaluation();  boolean foundRSMoreUpToDateThanLocalDS=false;  CSN latestRsCSN=null;  for (  Entry<Integer,ReplicationServerInfo> entry : evals.bestRSs.entrySet()) {    final Integer rsId=entry.getKey();    final ReplicationServerInfo rsInfo=entry.getValue();    final CSN rsCSN=getCSN(rsInfo.getServerState(),localServerId);    if (rsCSN.isOlderThan(localCSN)) {      mostUpToDateEval.reject(rsInfo,NOTE_RS_LATER_THAN_LOCAL_DS.get(rsId,rsCSN.toStringUI(),localServerId,localCSN.toStringUI()));    } else     if (rsCSN.equals(localCSN)) {      if (!foundRSMoreUpToDateThanLocalDS) {        mostUpToDateEval.accept(rsId,rsInfo);      } else {        mostUpToDateEval.reject(rsInfo,NOTE_RS_LATER_THAN_ANOTHER_RS_MORE_UP_TO_DATE_THAN_LOCAL_DS.get(rsId,rsCSN.toStringUI(),localServerId,localCSN.toStringUI()));      }    } else     if (rsCSN.isNewerThan(localCSN)) {      if (latestRsCSN == null) {        foundRSMoreUpToDateThanLocalDS=true;        rejectAllWithRSIsLaterThanBestRS(mostUpToDateEval,localServerId,localCSN);        latestRsCSN=rsCSN;      }      if (rsCSN.equals(latestRsCSN)) {        mostUpToDateEval.accept(rsId,rsInfo);      } else       if (rsCSN.isNewerThan(latestRsCSN)) {        rejectAllWithRSIsLaterThanBestRS(mostUpToDateEval,localServerId,localCSN);        mostUpToDateEval.accept(rsId,rsInfo);        latestRsCSN=rsCSN;      } else {        mostUpToDateEval.reject(rsInfo,NOTE_RS_LATER_THAN_ANOTHER_RS_MORE_UP_TO_DATE_THAN_LOCAL_DS.get(rsId,rsCSN.toStringUI(),localServerId,localCSN.toStringUI()));      }    }  }  evals.keepBest(mostUpToDateEval);}  }
class C{  public Object clone(){  LEAuthLevelCondition theClone=null;  try {    theClone=(LEAuthLevelCondition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }  }  return theClone;}  }
class C{  public BigInteger toBigInteger(){  return new BigInteger(1,places);}  }
class C{  private static void trace(String msg){  if (debug) {    System.err.println("###RowSets: " + msg);  }}  }
class C{  public AttrHistoricalMultiple(){  this.deleteTime=null;  this.lastUpdateTime=null;}  }
class C{  public PluginResult.PostOperation invokePostOperationModifyDNPlugins(PostOperationModifyDNOperation modifyDNOperation){  PluginResult.PostOperation result=null;  PluginResult.PostOperation finalResult=null;  ArrayList<DirectoryServerPlugin> skippedPlugins=skippedPreOperationPlugins.remove(modifyDNOperation);  for (  DirectoryServerPlugin p : postOperationModifyDNPlugins) {    if (isInternalOperation(modifyDNOperation,p) || isSkipped(skippedPlugins,p)) {      continue;    }    try {      result=p.doPostOperation(modifyDNOperation);    } catch (    Exception e) {      logException(modifyDNOperation,p,e,ERR_PLUGIN_POST_OPERATION_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(modifyDNOperation,p,ERR_PLUGIN_POST_OPERATION_PLUGIN_RETURNED_NULL);    } else     if (!result.continueProcessing()) {      finalResult=result;    }  }  if (result == null) {    finalResult=PluginResult.PostOperation.continueOperationProcessing();  } else   if (finalResult == null) {    finalResult=result;  }  return finalResult;}  }
class C{  public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {  if (SUPERCLASS_NAME.equals(name)) {    return null;  }  return super.loadClass(name,resolve);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String prefix;  String namespace;  String methName;  String fullName=m_arg0.execute(xctxt).str();  int indexOfNSSep=fullName.indexOf(':');  if (indexOfNSSep < 0) {    prefix="";    namespace=Constants.S_XSLNAMESPACEURL;    methName=fullName;  } else {    prefix=fullName.substring(0,indexOfNSSep);    namespace=xctxt.getNamespaceContext().getNamespaceForPrefix(prefix);    if (null == namespace)     return XBoolean.S_FALSE;    methName=fullName.substring(indexOfNSSep + 1);  }  if (namespace.equals(Constants.S_XSLNAMESPACEURL)) {    try {      if (null == m_functionTable)       m_functionTable=new FunctionTable();      return m_functionTable.functionAvailable(methName) ? XBoolean.S_TRUE : XBoolean.S_FALSE;    } catch (    Exception e) {      return XBoolean.S_FALSE;    }  } else {    ExtensionsProvider extProvider=(ExtensionsProvider)xctxt.getOwnerObject();    return extProvider.functionAvailable(namespace,methName) ? XBoolean.S_TRUE : XBoolean.S_FALSE;  }}  }
class C{  public static void writeSingleByte(OutputStream out,int b) throws IOException {  byte[] buffer=new byte[1];  buffer[0]=(byte)(b & 0xff);  out.write(buffer);}  }
class C{  public final void popCurrentNodeAndExpression(){  m_currentNodes.quickPop(1);  m_currentExpressionNodes.quickPop(1);}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,byte[] value){  if (extensions.containsKey(oid)) {    throw new IllegalArgumentException("extension " + oid + " already added");  }  extOrdering.addElement(oid);  extensions.put(oid,new X509Extension(critical,new DEROctetString(value)));}  }
class C{  public JMenu add(JMenu c){  super.add(c);  return c;}  }
class C{  public static String formatDateTimeString(Date date){  String timeStr=null;  if (date != null) {    SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_GMT_TIME);    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));    timeStr=dateFormat.format(date);  }  return timeStr;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetnextsibling.class,args);}  }
class C{  @Override public void run(){  while (exitWhenFinished == false || trackers.size() > 0) {    try {      Tracker tracker=(Tracker)q.remove();      trackers.remove(tracker);      if (!tracker.delete()) {        deleteFailures.add(tracker.getPath());      }      tracker.clear();    } catch (    InterruptedException e) {      continue;    }  }}  }
class C{  public void process(CommandManager mgr,SSOToken ssoToken) throws CLIException {  if (argv.length == 0) {    UsageFormatter.getInstance().format(mgr);  } else   if (argv.length == 1) {    process(mgr,argv[0],ssoToken);  } else {    process(mgr,argv,ssoToken);  }}  }
class C{  public LDAPAuthenticationHandler(LDAPReader reader,LDAPWriter writer,String hostName,AtomicInteger nextMessageID){  this.reader=reader;  this.writer=writer;  this.hostName=hostName;  this.nextMessageID=nextMessageID;  md5Digest=null;  secureRandom=null;  iPad=null;  oPad=null;}  }
class C{  public void installUI(JComponent c){  optionPane=(JOptionPane)c;  installDefaults();  optionPane.setLayout(createLayoutManager());  installComponents();  installListeners();  installKeyboardActions();}  }
class C{  public void reset(){  m_next=0;}  }
class C{  public void testFloatValueMinusZero(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E-400";  BigDecimal aNumber=new BigDecimal(a);  int minusZero=-2147483648;  float result=aNumber.floatValue();  assertTrue("incorrect value",Float.floatToIntBits(result) == minusZero);}  }
class C{  public void removeMenuDragMouseListener(MenuDragMouseListener l){  listenerList.remove(MenuDragMouseListener.class,l);}  }
class C{  public HttpUrl url(){  return url;}  }
class C{  public static boolean equals(short[] array1,short[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  private void allocateElements(int numElements){  int initialCapacity=MIN_INITIAL_CAPACITY;  if (numElements >= initialCapacity) {    initialCapacity=numElements;    initialCapacity|=(initialCapacity >>> 1);    initialCapacity|=(initialCapacity >>> 2);    initialCapacity|=(initialCapacity >>> 4);    initialCapacity|=(initialCapacity >>> 8);    initialCapacity|=(initialCapacity >>> 16);    initialCapacity++;    if (initialCapacity < 0)     initialCapacity>>>=1;  }  elements=new Object[initialCapacity];}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element entRefAddr;  Node entRefNode;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  entRefAddr=(Element)elementList.item(1);  entRefNode=entRefAddr.getFirstChild();  nodeType=(int)entRefNode.getNodeType();  if (equals(3,nodeType)) {    entRefNode=doc.createEntityReference("ent2");    assertNotNull("createdEntRefNotNull",entRefNode);    nodeType=(int)entRefNode.getNodeType();  }  assertEquals("entityNodeType",5,nodeType);}  }
class C{  public void allow(){  result=Result.ALLOWED;  message="";}  }
class C{  public boolean endsWith(String suffix){  return str().endsWith(suffix);}  }
class C{  protected void removeNextProtocolMessages(List<ProtocolMessage> protocolMessages,int fromIndex){  for (int i=protocolMessages.size() - 1; i >= fromIndex; i--) {    protocolMessages.remove(i);  }}  }
class C{  public FramedCompressionAttribute(int compression){  super(OctetUtils.toOctets(AttributeType.FRAMED_COMPRESSION,compression));  this.compression=compression;}  }
class C{  public FakeModdnOperation(CSN csn,Entry entry){  super(csn);  this.entry=entry;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  @Override public void close() throws IOException {  buf=null;  InputStream localIn=in;  in=null;  if (localIn != null) {    localIn.close();  }}  }
class C{  public static final <V>V fromJson(Reader reader,Class<V> type){  return GSON.fromJson(reader,type);}  }
class C{  public void cancel(){synchronized (queue) {    thread.newTasksMayBeScheduled=false;    queue.clear();    queue.notify();  }}  }
class C{  public void testCase3(){  byte aBytes[]={3,4,5,6,7,8,9};  byte bBytes[]={1,2,3,4,5,6,7};  byte rBytes[]={2,2,2,2,2,2,2};  int aSign=1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (!isClosed()) {      in.close();      buf=null;    }  }}  }
class C{  public static AccessToken createFromExistingAccessToken(String accessToken,Date expirationTime,Date lastRefreshTime,AccessTokenSource accessTokenSource,List<String> permissions){  if (expirationTime == null) {    expirationTime=DEFAULT_EXPIRATION_TIME;  }  if (lastRefreshTime == null) {    lastRefreshTime=DEFAULT_LAST_REFRESH_TIME;  }  if (accessTokenSource == null) {    accessTokenSource=DEFAULT_ACCESS_TOKEN_SOURCE;  }  return new AccessToken(accessToken,expirationTime,permissions,null,accessTokenSource,lastRefreshTime);}  }
class C{  public NamingContext(Hashtable<String,Object> env,String name){  this(env,name,new HashMap<String,NamingEntry>());}  }
class C{  public String toString(){  return schemaType.toString();}  }
class C{  @SuppressLint("ClickableViewAccessibility") @Override public boolean onTouchEvent(MotionEvent ev){  return true;}  }
class C{  public void updateIsSmallScreen(int panelHeight){  mIsSmallScreen=panelHeight < mCollapsedSize + mBottomStackSlowDownLength + mBottomStackPeekSize+ mMaxNotificationHeight;}  }
class C{  private void startMonitoringPublisher(){  long period=localReplicationServer.getMonitoringPublisherPeriod();  if (period > 0) {    final MonitoringPublisher thread=new MonitoringPublisher(this,period);    if (monitoringPublisher.compareAndSet(null,thread)) {      thread.start();    }  }}  }
class C{  private void wrap(StringBuilder buffer,LocalizableMessage text){  indentAndWrap(buffer,"",text);}  }
class C{  public boolean requiredResourceName(Policy policy,String realmName,String name){  getSvcTypeNameToActionsMap(policy,realmName);  return requiredResourceNameService.contains(name);}  }
class C{  private String quote(String s){  String str=null;  if (s == null) {    str="\"\"";  } else {    str="\"" + s + "\"";  }  return str;}  }
class C{  @Override public void put(String name,boolean value){  emulatedFields.put(name,value);}  }
class C{  public GZIPInputStream(InputStream in) throws IOException {  this(in,512);}  }
class C{  public void actionPerformed(ActionEvent evt){  String data=textField.getText();  if (data != null) {    data=URLEncoder.encode(data);  }  AttributeSet attr=getElement().getAttributes();  HTMLDocument hdoc=(HTMLDocument)getElement().getDocument();  String action=(String)attr.getAttribute(HTML.Attribute.ACTION);  if (action == null) {    action=hdoc.getBase().toString();  }  try {    URL url=new URL(action + "?" + data);    JEditorPane pane=(JEditorPane)getContainer();    pane.setPage(url);  } catch (  MalformedURLException e1) {  }catch (  IOException e2) {  }}  }
class C{  protected void close(){  if (conn == null) {    return;  }  try {    ps.close();  } catch (  Throwable f) {    ExceptionUtils.handleThrowable(f);  }  this.ps=null;  try {    conn.close();  } catch (  SQLException e) {    container.getLogger().error(sm.getString("jdbcAccessLogValve.close"),e);  } finally {    this.conn=null;  }}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.InteractionStatementType createInteractionStatementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.InteractionStatementTypeImpl();}  }
class C{  private String fixDesc(String type){  String returnDesc=null, typeNoArr=type.replace("[]","");  for (  String key : primitives.keySet()) {    if (type.replace("[]","").equals(key)) {      returnDesc=getArrStr(type) + primitives.get(key);    }  }  if (returnDesc == null) {    returnDesc="L" + typeNoArr.replace(".","/") + ";";  }  return getArrStr(type) + returnDesc;}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public boolean hasMoreRequirements(boolean noFilter){  authDebug.message("AuthContextLocal::hasMoreRequirements()");  if ((amlc.getStatus() == LoginStatus.AUTH_SUCCESS) || (amlc.getStatus() == LoginStatus.AUTH_FAILED)) {    return false;  } else {    informationRequired=amlc.getRequiredInfo();    return (getCallbacks(informationRequired,noFilter) != null);  }}  }
class C{  public RadiusConn(Set<RADIUSServer> primaries,Set<RADIUSServer> secondaries,String secret,int timeout,int healthCheckInterval) throws SocketException {  this(primaries,secondaries,secret,timeout,null,healthCheckInterval);}  }
class C{  public InputMismatchException(String s){  super(s);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodetextnodetype.class,args);}  }
class C{  public final int intValue(){  return value;}  }
class C{  public String toString(){  return ("OblixPrincipal:  " + name);}  }
class C{  public void testConstrCharIntIntMathContext(){  char value[]={'-','1','2','3','8','0','.','4','7','3','8','E','-','4','2','3'};  int offset=3;  int len=12;  int precision=4;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  BigDecimal result=new BigDecimal(value,offset,len,mc);  String res="3.805E-40";  int resScale=43;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());  try {    new BigDecimal(new char[]{},0,0,MathContext.DECIMAL32);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  public static void displayMissingMandatoryPropertyException(ConsoleApplication app,MissingMandatoryPropertiesException e){  LocalizableMessage ufn=e.getUserFriendlyName();  LocalizableMessage msg;  final boolean onePropertyMissing=e.getCauses().size() == 1;  if (e.isCreate()) {    msg=onePropertyMissing ? ERR_CREATE_HEADING_MMPE_SINGLE.get(ufn) : ERR_CREATE_HEADING_MMPE_PLURAL.get(ufn);  } else {    msg=onePropertyMissing ? ERR_MODIFY_HEADING_MMPE_SINGLE.get(ufn) : ERR_MODIFY_HEADING_MMPE_PLURAL.get(ufn);  }  app.errPrintln(msg);  app.errPrintln();  TableBuilder builder=new TableBuilder();  builder.addSortKey(0);  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_NAME.get());  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_SYNTAX.get());  PropertyDefinitionUsageBuilder b=new PropertyDefinitionUsageBuilder(true);  for (  PropertyException pe : e.getCauses()) {    PropertyDefinition<?> pd=pe.getPropertyDefinition();    builder.startRow();    builder.appendCell(pd.getName());    builder.appendCell(b.getUsage(pd));  }  TextTablePrinter printer=new TextTablePrinter(app.getErrorStream());  printer.setDisplayHeadings(true);  printer.setColumnWidth(1,0);  printer.setIndentWidth(4);  builder.print(printer);}  }
class C{  public INVALID_ACTIVITY(String detailMessage,int minorCode,CompletionStatus completionStatus){  super(detailMessage,minorCode,completionStatus);}  }
class C{  public static WhoAmIExtendedResult newWhoAmIExtendedResult(final ResultCode resultCode){  Reject.ifNull(resultCode);  return new WhoAmIExtendedResultImpl(ResultCode.SUCCESS);}  }
class C{  final long fullyRelease(Node node){  boolean failed=true;  try {    long savedState=getState();    if (release(savedState)) {      failed=false;      return savedState;    } else {      throw new IllegalMonitorStateException();    }  }  finally {    if (failed)     node.waitStatus=Node.CANCELLED;  }}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  public void start_logfile(File p_filename){  if (board_is_read_only) {    return;  }  actlog.start_write(p_filename);}  }
class C{  public static <K,V>Map<K,V> map(K key1,V value1,K key2,V value2,K key3,V value3,K key4,V value4){  return getInstance().mapInstance(key1,value1,key2,value2,key3,value3,key4,value4);}  }
class C{  public SmAuthenticationResult authenticate(String parameter,String secret,int challengeReason,SmAuthenticationContext context){  logw.println("RYA:authenticate() start reason=" + challengeReason);  if (null == context) {    logw.println("RYA:authenticate() 1111");    return new SmAuthenticationResult(SmAuthStatus.SMAUTH_NO_USER_CONTEXT,SmAuthenticationResult.REASON_NONE);  }  UserContext theUserContext=context.getUserContext();  UserCredentialsContext testUserCredentialsContext=context.getUserCredentialsContext();  String uid=null;  String cookie=null;  if (theUserContext != null) {    logw.println("UserContext is...");    logw.println("    isUC=" + theUserContext.isUserContext());    logw.println("    username=" + theUserContext.getUserName());    uid=theUserContext.getUserName();    logw.println("    userpath=" + theUserContext.getUserPath());    logw.println("    dirpath=" + theUserContext.getDirPath());    logw.println("    dirserver=" + theUserContext.getDirServer());    logw.println("    dirnamespace=" + theUserContext.getDirNameSpace());    logw.println("    sessionid=" + theUserContext.getSessionID());  }  if (null != testUserCredentialsContext) {    cookie=testUserCredentialsContext.getPassword();    logw.println("TestUserCredentialContext is...");    logw.println("    username=" + testUserCredentialsContext.getUserName());    logw.println("    passwd=" + testUserCredentialsContext.getPassword());    logw.println("    dirpath=" + testUserCredentialsContext.getDirPath());    logw.println("    dirserver=" + testUserCredentialsContext.getDirServer());    logw.println("    dirnamespace=" + testUserCredentialsContext.getDirNameSpace());  }  if ((null == theUserContext) || !theUserContext.isUserContext()) {    logw.println("RYA:authenticate() 222 usercontext=" + theUserContext);    if (uid.startsWith(FMPREFIX)) {      String fmuser=verifyFMToken(cookie);      if (fmuser != null) {        context.setUserText(fmuser);        return new SmAuthenticationResult(SmAuthStatus.SMAUTH_SUCCESS_USER_DN,SmAuthenticationResult.REASON_NONE);      }    }    return new SmAuthenticationResult(SmAuthStatus.SMAUTH_NO_USER_CONTEXT,SmAuthenticationResult.REASON_NONE);  }  UserCredentialsContext theUserCredentialsContext=context.getUserCredentialsContext();  if (null != theUserCredentialsContext) {    logw.println("UserCredentialContext is...");    uid=theUserCredentialsContext.getUserName();    logw.println("    username=" + theUserCredentialsContext.getUserName());    logw.println("    passwd=" + theUserCredentialsContext.getPassword());    logw.println("    dirpath=" + theUserCredentialsContext.getDirPath());    logw.println("    dirserver=" + theUserCredentialsContext.getDirServer());    logw.println("    dirnamespace=" + theUserCredentialsContext.getDirNameSpace());  }  if (null == theUserCredentialsContext) {    logw.println("RYA:authenticate() 333");    return new SmAuthenticationResult(SmAuthStatus.SMAUTH_REJECT,SmAuthenticationResult.REASON_NONE);  }  String thePassword=theUserCredentialsContext.getPassword();  if (thePassword.length() <= 0) {    logw.println("RYA:authenticate() 444");    return new SmAuthenticationResult(SmAuthStatus.SMAUTH_REJECT,SmAuthenticationResult.REASON_NONE);  }  try {    if (0 != Integer.parseInt(theUserContext.getProp("disabled"))) {      context.setUserText("User account is disabled.");      return new SmAuthenticationResult(SmAuthStatus.SMAUTH_REJECT,SmAuthenticationResult.REASON_USER_DISABLED);    }  } catch (  NumberFormatException exc) {  }  String authUserText;  if (!uid.startsWith(FMPREFIX)) {    try {      authUserText=theUserContext.authenticateUser(thePassword);      logw.println("RYA:authenticate() after calling authenticateUser " + "password=" + thePassword + " res="+ authUserText+ ":");      if (theUserContext != null) {        logw.println("AFTER UserContext is...");        logw.println("    isUC=" + theUserContext.isUserContext());        logw.println("    username=" + theUserContext.getUserName());        logw.println("    userpath=" + theUserContext.getUserPath());        logw.println("    dirpath=" + theUserContext.getDirPath());        logw.println("    dirserver=" + theUserContext.getDirServer());        logw.println("    dirnamespace=" + theUserContext.getDirNameSpace());        logw.println("    sessionid=" + theUserContext.getSessionID());      }    } catch (    Throwable exc) {      authUserText=null;    }  } else {    String fmuser=verifyFMToken(thePassword);    if (fmuser != null) {      authUserText="";      logw.println("RYA : FMToken is valid : not calling SM authenticate()");    } else {      authUserText=null;      logw.println("RYA : FMToken is invalid : REJECT");    }  }  if (null == authUserText) {    context.setErrorText("Unable to authenticate user " + theUserContext.getUserName());    return new SmAuthenticationResult(SmAuthStatus.SMAUTH_REJECT,SmAuthenticationResult.REASON_NONE);  }  String timeString=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM).format(org.forgerock.openam.utils.Time.newDate());  String theNameSpace=theUserContext.getDirNameSpace();  if ((theNameSpace != null) && theNameSpace.equals("ODBC:")) {    timeString="'" + timeString + "'";  }  if (0 != theUserContext.setProp("pin",timeString)) {    context.setUserText("Failed to set the time stamp for " + "user's profile attribute " + parameter);  }  if (parameter != null) {    try {      APIContext apiContext=context.getAPIContext();      AppSpecificContext appContext=apiContext.getAppSpecificContext();      appContext.setData(parameter.getBytes());    } catch (    NullPointerException exc) {      context.setUserText("Failed to modify application specific context");    }catch (    SmJavaApiException exc) {      context.setUserText("Failed to modify application specific context");    }  }  return new SmAuthenticationResult(SmAuthStatus.SMAUTH_ACCEPT,SmAuthenticationResult.REASON_NONE);}  }
class C{  public static final String makeJavaPackage(String path){  String classNameComponents[]=split(path,"/");  StringBuilder legalClassNames=new StringBuilder();  for (int i=0; i < classNameComponents.length; i++) {    legalClassNames.append(makeJavaIdentifier(classNameComponents[i]));    if (i < classNameComponents.length - 1) {      legalClassNames.append('.');    }  }  return legalClassNames.toString();}  }
class C{  public RegexFileFilter(Pattern pattern){  if (pattern == null) {    throw new IllegalArgumentException("Pattern is missing");  }  this.pattern=pattern;}  }
class C{  private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);}  }
class C{  public SipUri sipURL(boolean inBrackets) throws ParseException {  if (debug)   dbg_enter("sipURL");  SipUri retval=new SipUri();  Token nextToken=lexer.peekNextToken();  int sipOrSips=TokenTypes.SIP;  String scheme=TokenNames.SIP;  if (nextToken.getTokenType() == TokenTypes.SIPS) {    sipOrSips=TokenTypes.SIPS;    scheme=TokenNames.SIPS;  }  try {    lexer.match(sipOrSips);    lexer.match(':');    retval.setScheme(scheme);    int startOfUser=lexer.markInputPosition();    String userOrHost=user();    String passOrPort=null;    if (lexer.lookAhead() == ':') {      lexer.consume(1);      passOrPort=password();    }    if (lexer.lookAhead() == '@') {      lexer.consume(1);      retval.setUser(userOrHost);      if (passOrPort != null)       retval.setUserPassword(passOrPort);    } else {      lexer.rewindInputPosition(startOfUser);    }    HostNameParser hnp=new HostNameParser(this.getLexer());    HostPort hp=hnp.hostPort(false);    retval.setHostPort(hp);    lexer.selectLexer("charLexer");    while (lexer.hasMoreChars()) {      if (lexer.lookAhead(0) != ';' || !inBrackets)       break;      lexer.consume(1);      NameValue parms=uriParam();      if (parms != null)       retval.setUriParameter(parms);    }    if (lexer.hasMoreChars() && lexer.lookAhead(0) == '?') {      lexer.consume(1);      while (lexer.hasMoreChars()) {        NameValue parms=qheader();        retval.setQHeader(parms);        if (lexer.hasMoreChars() && lexer.lookAhead(0) != '&')         break; else         lexer.consume(1);      }    }    return retval;  }  finally {    if (debug)     dbg_leave("sipURL");  }}  }
class C{  protected boolean labelsHaveSameBaselines(){  if (!checkedLabelBaselines) {    checkedLabelBaselines=true;    Dictionary dictionary=slider.getLabelTable();    if (dictionary != null) {      sameLabelBaselines=true;      Enumeration elements=dictionary.elements();      int baseline=-1;      while (elements.hasMoreElements()) {        JComponent label=(JComponent)elements.nextElement();        Dimension pref=label.getPreferredSize();        int labelBaseline=label.getBaseline(pref.width,pref.height);        if (labelBaseline >= 0) {          if (baseline == -1) {            baseline=labelBaseline;          } else           if (baseline != labelBaseline) {            sameLabelBaselines=false;            break;          }        } else {          sameLabelBaselines=false;          break;        }      }    } else {      sameLabelBaselines=false;    }  }  return sameLabelBaselines;}  }
class C{  protected GitHubService verifyRepository(String user,String repository){  if (user == null)   throw new IllegalArgumentException("User cannot be null");  if (user.length() == 0)   throw new IllegalArgumentException("User cannot be empty");  if (repository == null)   throw new IllegalArgumentException("Repository cannot be null");  if (repository.length() == 0)   throw new IllegalArgumentException("Repository cannot be empty");  return this;}  }
class C{  public void display(SecurityOptions options) throws IllegalArgumentException {  if (options == null) {    throw new IllegalArgumentException("options parameter cannot be null.");  }  UIFactory.setTextStyle(cbEnableSSL,UIFactory.TextStyle.SECONDARY_FIELD_VALID);  UIFactory.setTextStyle(lKeystorePath,UIFactory.TextStyle.SECONDARY_FIELD_VALID);  UIFactory.setTextStyle(lKeystorePwd,UIFactory.TextStyle.SECONDARY_FIELD_VALID);  securityOptions=options;  updateContents();  isCanceled=true;  setVisible(true);}  }
class C{  @Override public int read() throws IOException {  int x=in.read();  if (x != -1) {    check.update(x);  }  return x;}  }
class C{  public void unassignServices(Set serviceNames) throws AMException, SSOException {  if ((serviceNames == null) || serviceNames.isEmpty()) {    return;  }  if (!((profileType == AMObject.ORGANIZATION) || (profileType == AMObject.USER) || (profileType == AMObject.STATIC_GROUP)|| (profileType == AMObject.DYNAMIC_GROUP)|| (profileType == AMObject.ORGANIZATIONAL_UNIT)|| (profileType == AMObject.ASSIGNABLE_DYNAMIC_GROUP)|| (profileType == AMObject.GROUP))) {    throw new UnsupportedOperationException();  }  Set assignedServices=getAssignedServices();  Iterator iter=serviceNames.iterator();  while (iter.hasNext()) {    String serviceName=(String)iter.next();    if (!assignedServices.contains(serviceName)) {      debug.error(AMSDKBundle.getString("126",locale));      throw new AMException(AMSDKBundle.getString("126",locale),"126");    }  }  Set removeOCs=AMServiceUtils.getServiceObjectClasses(token,serviceNames);  Set objectClasses=getAttribute("objectclass");  removeOCs=AMCommonUtils.updateAndGetRemovableOCs(objectClasses,removeOCs);  Set removeAttrs=new HashSet();  Iterator iter1=removeOCs.iterator();  while (iter1.hasNext()) {    String oc=(String)iter1.next();    Set attrs=dsServices.getAttributesForSchema(oc);    Iterator iter2=attrs.iterator();    while (iter2.hasNext()) {      String attrName=(String)iter2.next();      removeAttrs.add(attrName.toLowerCase());    }  }  Map avPair=getAttributes();  Iterator itr=avPair.keySet().iterator();  while (itr.hasNext()) {    String attrName=(String)itr.next();    if (removeAttrs.contains(attrName)) {      try {        Set tmpSet=new HashSet();        tmpSet.add(attrName);        removeAttributes(tmpSet);      } catch (      Exception ex) {        if (debug.messageEnabled()) {          debug.message("AMUserImpl.unassignServices()" + "Error occured while removing attribute: " + attrName);        }      }    }  }  setAttribute("objectclass",objectClasses);  store();}  }
class C{  public static <T>T deserialise(byte[] bytes,boolean compressed) throws IOException, ClassNotFoundException {  return deserialise(bytes,compressed,null);}  }
class C{  public void testDivideRoundHalfDownPos1(){  String a="92948782094488478231212478987482988798104576347813847567949855464535634534563456";  int aScale=-24;  String b="74723342238476237823754692930187879183479";  int bScale=13;  String c="1.2439055763572051712242335979928354832010167729111113605E+76";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  protected void initializeBeanContextResources(){}  }
class C{  public static void assertSupportedProtocols(Set<String> expected,String[] protocols){  Set<String> remainingProtocols=assertValidProtocols(expected,protocols);  assertEquals("Missing protocols",Collections.EMPTY_SET,remainingProtocols);  assertEquals(expected.size(),protocols.length);}  }
class C{  private Object writeReplace(){  return new SynchronizedList<E>(list);}  }
class C{  public ShapeTileBox surrounding_box(){  if (is_clear())   return null;  int llx=Integer.MAX_VALUE;  int lly=Integer.MAX_VALUE;  int urx=Integer.MIN_VALUE;  int ury=Integer.MIN_VALUE;  for (int layer_idx=0; layer_idx < layer_count; ++layer_idx) {    OctagonMutable curr=octa_arr[layer_idx];    llx=Math.min(llx,(int)Math.floor(curr.lx));    lly=Math.min(lly,(int)Math.floor(curr.ly));    urx=Math.max(urx,(int)Math.ceil(curr.rx));    ury=Math.max(ury,(int)Math.ceil(curr.uy));  }  if (llx > urx || lly > ury) {    return ShapeTileBox.EMPTY;  }  return new ShapeTileBox(llx,lly,urx,ury);}  }
class C{  public void removeContext(String contextName) throws Exception {  ObjectName oname=new ObjectName(contextName);  String domain=oname.getDomain();  StandardService service=(StandardService)getService(oname);  Engine engine=service.getContainer();  String name=oname.getKeyProperty("name");  name=name.substring(2);  int i=name.indexOf('/');  String hostName=name.substring(0,i);  String path=name.substring(i);  ObjectName deployer=new ObjectName(domain + ":type=Deployer,host=" + hostName);  String pathStr=getPathStr(path);  if (mserver.isRegistered(deployer)) {    mserver.invoke(deployer,"addServiced",new Object[]{pathStr},new String[]{"java.lang.String"});    mserver.invoke(deployer,"unmanageApp",new Object[]{pathStr},new String[]{"java.lang.String"});    mserver.invoke(deployer,"removeServiced",new Object[]{pathStr},new String[]{"java.lang.String"});  } else {    log.warn("Deployer not found for " + hostName);    Host host=(Host)engine.findChild(hostName);    Context context=(Context)host.findChild(pathStr);    host.removeChild(context);    if (context instanceof StandardContext)     try {      ((StandardContext)context).destroy();    } catch (    Exception e) {      log.warn("Error during context [" + context.getName() + "] destroy ",e);    }  }}  }
class C{  public StatefulRefreshToken(String id,String resourceOwnerId,String clientId,String redirectUri,Set<String> scope,long expiryTime,String tokenType,String tokenName,String grantType,String realm,String authModules,String acr,String auditId,String authGrantId,long authTime){  super(new HashMap<String,Object>());  setId(id);  setResourceOwnerId(resourceOwnerId);  setClientId(clientId);  setRedirectUri(redirectUri);  setScope(scope);  setExpiryTime(expiryTime);  setAuthGrantId(authGrantId);  setTokenType(tokenType);  setTokenName(tokenName);  setGrantType(grantType);  setAuthModules(authModules);  setAuthenticationContextClassReference(acr);  setRealm(realm);  setAuditTrackingId(auditId);  setAuthTime(authTime);}  }
class C{  private void createInitializeAllReplicationSubCommand() throws ArgumentException {  initializeAllReplicationSubCmd=new SubCommand(this,INITIALIZE_ALL_REPLICATION_SUBCMD_NAME,INFO_DESCRIPTION_SUBCMD_INITIALIZE_ALL_REPLICATION.get(INITIALIZE_REPLICATION_SUBCMD_NAME));  Argument[] argsToAdd={secureArgsList.getHostNameArg(),secureArgsList.getPortArg()};  for (  Argument arg : argsToAdd) {    initializeAllReplicationSubCmd.addArgument(arg);  }}  }
class C{  public void toSingleLineString(StringBuilder buffer){  buffer.append("Entry(dn=\"");  buffer.append(dn);  buffer.append("\",objectClasses={");  Utils.joinAsString(buffer,",",objectClasses.values());  buffer.append("},userAttrs={");  appendAttributes(buffer,userAttributes.values());  buffer.append("},operationalAttrs={");  appendAttributes(buffer,operationalAttributes.values());  buffer.append("})");}  }
class C{  public TreeSet(SortedSet<E> s){  this(s.comparator());  addAll(s);}  }
class C{  private void cloneOutlines(Set<PdfOutline> outlinesToCopy,PdfOutline newParent,PdfOutline oldParent,Map<PdfPage,PdfPage> page2page,PdfDocument toDocument){  if (null == oldParent) {    return;  }  Set<String> names=toDocument.getCatalog().getNameTree(PdfName.Dests).getNames().keySet();  Map<String,PdfObject> srcNamedDestinations=catalog.getNameTree(PdfName.Dests).getNames();  for (  PdfOutline outline : oldParent.getAllChildren()) {    if (outlinesToCopy.contains(outline)) {      PdfDestination dest=outline.getDestination();      if (dest instanceof PdfStringDestination) {        String name=((PdfString)dest.getPdfObject()).toUnicodeString();        if (!names.contains(name)) {          PdfArray array=new PdfArray();          array.addAll((PdfArray)srcNamedDestinations.get(name));          PdfObject pageObject=array.get(0);          if (!pageObject.isNumber()) {            PdfPage oldPage=catalog.getPageTree().getPage((PdfDictionary)pageObject);            PdfPage newPage=page2page.get(oldPage);            if (oldPage == null || newPage == null) {              dest=null;            } else {              array.set(0,newPage.getPdfObject());            }          }          if (dest != null) {            toDocument.addNamedDestination(name,array.makeIndirect(toDocument));          }        }      } else       if (dest instanceof PdfExplicitDestination) {        PdfArray destArray=new PdfArray();        destArray.addAll((PdfArray)dest.getPdfObject());        PdfObject pageObject=destArray.get(0);        if (!pageObject.isNumber()) {          PdfPage oldPage=catalog.getPageTree().getPage((PdfDictionary)pageObject);          PdfPage newPage=page2page.get(oldPage);          if (oldPage == null || newPage == null) {            dest=null;          } else {            destArray.set(0,newPage.getPdfObject());            dest=new PdfExplicitDestination(destArray);          }        }      }      PdfOutline child=newParent.addOutline(outline.getTitle());      if (dest != null) {        child.addDestination(dest);      }      cloneOutlines(outlinesToCopy,child,outline,page2page,toDocument);    }  }}  }
class C{  public static BigInteger toBigIntegerValue(Object decoded){  return new BigInteger((byte[])decoded);}  }
class C{  protected UpdateMsg(){  payload=null;}  }
class C{  public boolean hasChildrenCount(){  return fieldSetFlags()[4];}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);}  }
class C{  private static DeleteResponseProtocolOp readDeleteResponse(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  int resultCode;  try {    resultCode=(int)reader.readInteger();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_RESULT_CODE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  DN matchedDN;  try {    String dnString=reader.readOctetStringAsString();    if (dnString.length() == 0) {      matchedDN=null;    } else {      matchedDN=DN.valueOf(dnString);    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_MATCHED_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  LocalizableMessage errorMessage;  try {    errorMessage=LocalizableMessage.raw(reader.readOctetStringAsString());    if (errorMessage.length() == 0) {      errorMessage=null;    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_ERROR_MESSAGE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ArrayList<String> referralURLs=null;  try {    if (reader.hasNextElement()) {      reader.readStartSequence();      referralURLs=new ArrayList<>();      while (reader.hasNextElement()) {        referralURLs.add(reader.readOctetStringAsString());      }      reader.readEndSequence();    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_REFERRALS.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new DeleteResponseProtocolOp(resultCode,errorMessage,matchedDN,referralURLs);}  }
class C{  static byte[] decryptData(byte[] password,byte[] encryptedData){  try {    Cipher c=Cipher.getInstance(ENCRYPT_DATA_ALGORITHM);    c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_DATA);    return c.doFinal(encryptedData);  } catch (  Exception e) {    throw new IllegalStateException(ENCRYPT_DATA_ALGORITHM + " is not available",e);  }}  }
class C{  protected void writeEmbeddedTags(AttributeSet attr) throws IOException {  attr=convertToHTML(attr,oConvAttr);  Enumeration names=attr.getAttributeNames();  while (names.hasMoreElements()) {    Object name=names.nextElement();    if (name instanceof HTML.Tag) {      HTML.Tag tag=(HTML.Tag)name;      if (tag == HTML.Tag.FORM || tags.contains(tag)) {        continue;      }      write('<');      write(tag.toString());      Object o=attr.getAttribute(tag);      if (o != null && o instanceof AttributeSet) {        writeAttributes((AttributeSet)o);      }      write('>');      tags.addElement(tag);      tagValues.addElement(o);    }  }}  }
class C{  public static TangoPoseData planeFitToTangoWorldPose(double[] point,double[] normal,TangoPoseData tangoPose,DeviceExtrinsics extrinsics){  Matrix4 startServiceTdevice=tangoPoseToMatrix(tangoPose);  Vector3 depthUp=TANGO_WORLD_UP.clone();  startServiceTdevice.clone().multiply(extrinsics.getDeviceTDepthCamera()).inverse().rotateVector(depthUp);  Matrix4 depthTplane=matrixFromPointNormalUp(point,normal,depthUp);  Matrix4 tangoWorldTplane=startServiceTdevice.multiply(extrinsics.getDeviceTDepthCamera()).multiply(depthTplane);  return matrixToTangoPose(tangoWorldTplane);}  }
class C{  public synchronized void stop(){  doStop();}  }
class C{  public void returnValue(){  mv.visitInsn(returnType.getOpcode(Opcodes.IRETURN));}  }
class C{  public FieldFrameBodyUnsupported(byte[] value){  this.value=value;}  }
class C{  public void access(Level level,String messageId,String data[],Object session) throws LogException {  access(level,messageId,data,session,null);}  }
class C{  static final int advanceProbe(int probe){  probe^=probe << 13;  probe^=probe >>> 17;  probe^=probe << 5;  UNSAFE.putInt(Thread.currentThread(),PROBE,probe);  return probe;}  }
class C{  public static String serializeToString(XMPMetaImpl xmp,SerializeOptions options) throws XMPException {  options=options != null ? options : new SerializeOptions();  options.setEncodeUTF16BE(true);  ByteArrayOutputStream output=new ByteArrayOutputStream(2048);  serialize(xmp,output,options);  try {    return output.toString(options.getEncoding());  } catch (  UnsupportedEncodingException e) {    return output.toString();  }}  }
class C{  private void handleMonitoringSearchResult(SearchResultEntry sr) throws LdapException {  if (javaVersion == null) {    Attribute attr=sr.getAttribute("javaVersion");    javaVersion=attr != null ? attr.firstValueAsString() : null;  }  if (numberConnections == -1) {    Integer nb=sr.getAttribute("currentConnections").parse().asInteger();    if (nb != null) {      numberConnections=nb;    }  }  Attribute dnAttr=sr.getAttribute("domain-name");  Attribute replicaIdAttr=sr.getAttribute("server-id");  Attribute missingChanges=sr.getAttribute("missing-changes");  if (dnAttr != null && replicaIdAttr != null && missingChanges != null) {    DN dn=dnAttr.parse().asDN();    Integer replicaId=replicaIdAttr.parse().asInteger();    for (    BackendDescriptor backend : backends) {      for (      BaseDNDescriptor baseDN : backend.getBaseDns()) {        try {          if (baseDN.getDn().equals(dn) && Objects.equals(baseDN.getReplicaID(),replicaId)) {            try {              baseDN.setAgeOfOldestMissingChange(sr.getAttribute("approx-older-change-not-synchronized-millis").parse().asLong());            } catch (            NullPointerException|LocalizedIllegalArgumentException ignored) {            }            try {              baseDN.setMissingChanges(missingChanges.parse().asInteger());            } catch (            NullPointerException|LocalizedIllegalArgumentException ignored) {            }          }        } catch (        Throwable ignored) {        }      }    }  } else {    Attribute backendIdAttr=sr.getAttribute("ds-backend-id");    Attribute entryCount=sr.getAttribute("ds-backend-entry-count");    Set<String> baseDnEntries=asSetOfString(sr,"ds-base-dn-entry-count");    if (backendIdAttr != null && (entryCount != null || !baseDnEntries.isEmpty())) {      String backendID=backendIdAttr.firstValueAsString();      for (      BackendDescriptor backend : backends) {        if (backend.getBackendID().equalsIgnoreCase(backendID)) {          if (entryCount != null) {            backend.setEntries(entryCount.parse().asInteger());          }          for (          String s : baseDnEntries) {            int index=s.indexOf(" ");            if (index != -1) {              DN dn=DN.valueOf(s.substring(index + 1));              for (              BaseDNDescriptor baseDN : backend.getBaseDns()) {                if (dn.equals(baseDN.getDn())) {                  try {                    baseDN.setEntries(Integer.parseInt(s.substring(0,index)));                  } catch (                  Throwable t) {                  }                  break;                }              }            }          }        }      }    } else {      String cn=sr.getAttribute("cn").firstValueAsString();      String monitorBackendID=null;      BackendDescriptor.PluggableType pluggableType=BackendDescriptor.PluggableType.UNKNOWN;      if (cn != null && cn.endsWith(DATABASE_JE_MONITORING_ENTRY_SUFFIX)) {        pluggableType=BackendDescriptor.PluggableType.JE;        monitorBackendID=cn.substring(0,cn.length() - DATABASE_JE_MONITORING_ENTRY_SUFFIX.length());      }      if (cn != null && cn.endsWith(DATABASE_PDB_MONITORING_ENTRY_SUFFIX)) {        pluggableType=BackendDescriptor.PluggableType.PDB;        monitorBackendID=cn.substring(0,cn.length() - DATABASE_PDB_MONITORING_ENTRY_SUFFIX.length());      }      if (monitorBackendID != null) {        for (        BackendDescriptor backend : backends) {          if (backend.getBackendID().equalsIgnoreCase(monitorBackendID)) {            backend.setPluggableType(pluggableType);            backend.setMonitoringEntry(sr);          }        }      }    }    try {      if (rootMonitor == null && isRootMonitor(sr)) {        rootMonitor=sr;      } else       if (entryCaches == null && isEntryCaches(sr)) {        entryCaches=sr;      } else       if (workQueue == null && isWorkQueue(sr)) {        workQueue=sr;      } else       if (jvmMemoryUsage == null && isJvmMemoryUsage(sr)) {        jvmMemoryUsage=sr;      } else       if (systemInformation == null && isSystemInformation(sr)) {        systemInformation=sr;      } else       if (versionMonitor == null && isVersionMonitor(sr)) {        versionMonitor=sr;      } else       if (isConnectionHandler(sr)) {        String statistics=" Statistics";        String cn=sr.getAttribute("cn").firstValueAsString();        if (cn.endsWith(statistics)) {          String name=cn.substring(0,cn.length() - statistics.length());          hmConnectionHandlersMonitor.put(getKey(name),sr);        }      }    } catch (    OpenDsException ode) {      exceptions.add(ode);    }  }}  }
class C{  public AdvicesHandleableByAMResponse(Set advicesHandleableByAM){  this.advicesHandleableByAM=advicesHandleableByAM;}  }
class C{  private void doLogoutInitiation(HttpServletRequest request,HttpServletResponse response,ProviderDescriptorType hostedDescriptor,BaseConfigType hostedConfig,String realm,String hostedEntityId,String hostedRole,String metaAlias,Object ssoToken,String logoutDoneURL,String sourceCheck){  FSUtils.debug.message("FSProcessLogoutServlet::doLogoutInitiation");  FSServiceManager instSManager=FSServiceManager.getInstance();  String relayState=request.getParameter(IFSConstants.LOGOUT_RELAY_STATE);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSProcessLogoutServlet.doLogoutInit: relay=" + relayState);  }  if (instSManager != null) {    FSUtils.debug.message("FSServiceManager Instance not null");    FSPreLogoutHandler handlerObj=instSManager.getPreLogoutHandler();    if (handlerObj != null) {      handlerObj.setHostedDescriptor(hostedDescriptor);      handlerObj.setHostedDescriptorConfig(hostedConfig);      handlerObj.setRealm(realm);      handlerObj.setHostedEntityId(hostedEntityId);      handlerObj.setHostedProviderRole(hostedRole);      handlerObj.setMetaAlias(metaAlias);      handlerObj.setRelayState(relayState);      handlerObj.handleSingleLogout(request,response,ssoToken,sourceCheck);      return;    } else {      FSUtils.debug.error("FSPreLogoutHandler is null.Cannot continue logout");      String[] data={logoutDoneURL};      LogUtil.error(Level.INFO,LogUtil.LOGOUT_FAILED_INVALID_HANDLER,data,ssoToken);    }  } else {    FSUtils.debug.message("FSServiceManager Instance null. Cannot continue logout");  }  FSServiceUtils.returnLocallyAfterOperation(response,logoutDoneURL,false,IFSConstants.LOGOUT_SUCCESS,IFSConstants.LOGOUT_FAILURE);  return;}  }
class C{  @Override public ThaiBuddhistDate date(int prolepticYear,int month,int dayOfMonth){  return new ThaiBuddhistDate(LocalDate.of(prolepticYear - YEARS_DIFFERENCE,month,dayOfMonth));}  }
class C{  public static JsonPropertyMapper json(final String attribute){  return json(AttributeDescription.valueOf(attribute));}  }
class C{  private boolean compareStrings(String one,String two){  if (one == null && two == null) {    return true;  }  if (one == null || two == null) {    return false;  }  return one.equals(two);}  }
class C{  public JKDefaultTableModel(final Object[][] data,final Object[] columnNames){  setDataVector(data,columnNames);}  }
class C{  @NonNull public static Interpolator overshoot(int tension){  return new OvershootInterpolator(tension);}  }
class C{  private static byte[] byteCopy(byte[] source,int offset,int count,byte[] target){  for (int i=offset, j=0; i < offset + count; i++, j++) {    target[j]=source[i];  }  return target;}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("UnbindRequest()");}  }
class C{  public void schedule(TimerTask task,long delay,long period){  if (delay < 0)   throw new IllegalArgumentException("Negative delay.");  if (period <= 0)   throw new IllegalArgumentException("Non-positive period.");  sched(task,System.currentTimeMillis() + delay,-period);}  }
class C{  public final void testRSAPrivateKeySpec(){  KeySpec ks=new RSAPrivateKeySpec(BigInteger.valueOf(1234567890L),BigInteger.valueOf(3L));  assertTrue(ks instanceof RSAPrivateKeySpec);}  }
class C{  @Deprecated public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (api >= Opcodes.ASM5) {    boolean itf=opcode == Opcodes.INVOKEINTERFACE;    visitMethodInsn(opcode,owner,name,desc,itf);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  @Override public void run(){  if (logger.isTraceEnabled()) {    logger.trace(getMessage("Monitoring publisher starting."));  }  try {    while (!isShutdownInitiated()) {      final int senderId=domain.getLocalRSServerId();      final MonitorMsg monitorMsg=domain.createGlobalTopologyMonitorMsg(senderId,0);      for (      ServerHandler serverHandler : domain.getConnectedDSs().values()) {        if (isShutdownInitiated()) {          break;        }        try {          serverHandler.send(monitorMsg);        } catch (        IOException e) {        }      }synchronized (shutdownLock) {        if (!isShutdownInitiated()) {          shutdownLock.wait(period);        }      }    }  } catch (  InterruptedException e) {    logger.trace(getMessage("Monitoring publisher has been interrupted while sleeping."));  }  logger.trace(getMessage("Monitoring publisher is terminated."));}  }
class C{  protected synchronized void buildLostApiClient(){  lostApiClient=new LostApiClient.Builder(this).build();}  }
class C{  public XMLString toUpperCase(Locale locale){  return new XMLStringDefault(m_str.toUpperCase(locale));}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {  in.defaultReadObject();  if (outputStream == null) {    outputStream=new ByteArrayOutputStream().assignBytes(getDebugBytes());  }}  }
class C{  void read(SSOToken token) throws SSOException, SMSException {  if (backendProxyEnabled) {    if (isAllowed(token,normalizedDN,readActionSet)) {      if (adminSSOToken == null) {        adminSSOToken=(SSOToken)AccessController.doPrivileged(com.sun.identity.security.AdminTokenAction.getInstance());      }      token=adminSSOToken;    }  } else {    getDelegationPermission(token,normalizedDN,readActionSet);  }  attrSet=smsObject.read(token,dn);  if (attrSet == null) {    newEntry=true;  } else {    newEntry=false;  }}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  private TargAttrFilterList(int mask,LinkedHashMap<AttributeType,SearchFilter> attrFilterList){  this.mask=mask;  this.attrFilterList=attrFilterList;}  }
class C{  protected Rectangle applyBorderBox(Rectangle rect,Border[] borders,boolean reverse){  float topWidth=borders[0] != null ? borders[0].getWidth() : 0;  float rightWidth=borders[1] != null ? borders[1].getWidth() : 0;  float bottomWidth=borders[2] != null ? borders[2].getWidth() : 0;  float leftWidth=borders[3] != null ? borders[3].getWidth() : 0;  return rect.<Rectangle>applyMargins(topWidth,rightWidth,bottomWidth,leftWidth,reverse);}  }
class C{  protected void isAttributeWellFormed(Node node){  boolean isNameWF=false;  if ((fFeatures & NAMESPACES) != 0) {    isNameWF=isValidQName(node.getPrefix(),node.getLocalName(),fIsXMLVersion11);  } else {    isNameWF=isXMLName(node.getNodeName(),fIsXMLVersion11);  }  if (!isNameWF) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"Attr",node.getNodeName()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));    }  }  String value=node.getNodeValue();  if (value.indexOf('<') >= 0) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_LT_IN_ATTVAL,new Object[]{((Attr)node).getOwnerElement().getNodeName(),node.getNodeName()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_LT_IN_ATTVAL,null,null,null));    }  }  NodeList children=node.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node child=children.item(i);    if (child == null) {      continue;    }switch (child.getNodeType()) {case Node.TEXT_NODE:      isTextWellFormed((Text)child);    break;case Node.ENTITY_REFERENCE_NODE:  isEntityReferneceWellFormed((EntityReference)child);break;default :}}}  }
class C{  PlainSocketImpl(){  if (useDualStackImpl) {    impl=new DualStackPlainSocketImpl(exclusiveBind);  } else {    impl=new TwoStacksPlainSocketImpl(exclusiveBind);  }}  }
class C{  private static boolean isACSurlValidInMetadataSP(String acsURL,String spEntityID,String realm) throws SAML2Exception {  boolean isValidACSurl=false;  String classMethod="IDPSSOUtil.isACSurlValidInMetadataSP: ";  SPSSODescriptorElement spSSODescriptorElement=getSPSSODescriptor(realm,spEntityID,classMethod);  List acsList=spSSODescriptorElement.getAssertionConsumerService();  AssertionConsumerServiceElement acs=null;  for (int i=0; i < acsList.size(); i++) {    acs=(AssertionConsumerServiceElement)acsList.get(i);    String acsInMeta=acs.getLocation();    if (acsInMeta.equalsIgnoreCase(acsURL)) {      isValidACSurl=true;      SAML2Utils.debug.message(classMethod + " acsURL=" + acsURL+ "Found in the metadata");      break;    }  }  return isValidACSurl;}  }
class C{  public void restoreOldSession(){  InternalSession oldSession=getReferencedOldSession();  if (oldSession != null) {    DEBUG.message("Restoring old session");    setSession(oldSession);  }}  }
class C{  public void reset(){  super.reset();  if (null != m_firstWalker) {    m_lastUsedWalker=m_firstWalker;    m_firstWalker.setRoot(m_context);  }}  }
class C{  void remove(ThreadLocal<?> key){  cleanUp();  for (int index=key.hash & mask; ; index=next(index)) {    Object reference=table[index];    if (reference == key.reference) {      table[index]=TOMBSTONE;      table[index + 1]=null;      tombstones++;      size--;      return;    }    if (reference == null) {      return;    }  }}  }
class C{  public void ancestorMoved(HierarchyEvent e){  ((HierarchyBoundsListener)a).ancestorMoved(e);  ((HierarchyBoundsListener)b).ancestorMoved(e);}  }
class C{  @Override public ThaiBuddhistDate dateYearDay(Era era,int yearOfEra,int dayOfYear){  return dateYearDay(prolepticYear(era,yearOfEra),dayOfYear);}  }
class C{  public static PdfAction createHide(PdfAnnotation annotation,boolean hidden){  return new PdfAction().put(PdfName.S,PdfName.Hide).put(PdfName.T,annotation.getPdfObject()).put(PdfName.H,new PdfBoolean(hidden));}  }
class C{  public void insertUpdate(DocumentEvent e,Shape a,ViewFactory f){  updateChildren(e,a);  Rectangle alloc=((a != null) && isAllocationValid()) ? getInsideAllocation(a) : null;  int pos=e.getOffset();  View v=getViewAtPosition(pos,alloc);  if (v != null) {    v.insertUpdate(e,alloc,f);  }}  }
class C{  private static String makeAttrAddAciLdif(String attr,String dn,String... acis){  return _makeAddAciLdif(attr,dn,acis);}  }
class C{  @Override public void firePropertyChange(String propertyName,short oldValue,short newValue){}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String patternType=getStringOptionValue(IArgument.AGENT_TYPE);  String filter=getStringOptionValue(IArgument.FILTER);  if (patternType == null) {    patternType="";  }  if ((filter == null) || (filter.length() == 0)) {    filter="*";  }  String[] params={realm,patternType,filter};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_AGENT_GROUPS",params);  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    IdSearchResults isr=amir.searchIdentities(IdType.AGENTGROUP,filter,new IdSearchControl());    Set results=isr.getSearchResults();    if ((results != null) && !results.isEmpty()) {      for (Iterator i=results.iterator(); i.hasNext(); ) {        AMIdentity amid=(AMIdentity)i.next();        if (!matchType(amid,patternType)) {          i.remove();        }      }    }    if ((results != null) && !results.isEmpty()) {      for (Iterator i=results.iterator(); i.hasNext(); ) {        AMIdentity amid=(AMIdentity)i.next();        Object[] args={amid.getName(),amid.getUniversalId()};        outputWriter.printlnMessage(MessageFormat.format(getResourceString("format-search-agent-group-results"),args));      }    } else {      outputWriter.printlnMessage(getResourceString("search-agent-group-no-entries"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_LIST_AGENT_GROUPS",params);  } catch (  IdRepoException e) {    String[] args={realm,patternType,filter,e.getMessage()};    debugError("ListAgentGroups.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AGENT_GROUPS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,patternType,filter,e.getMessage()};    debugError("ListAgentGroups.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AGENT_GROUPS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public boolean ready() throws IOException {synchronized (lock) {    ensureOpen();    return (pos < buf.length) || super.ready();  }}  }
class C{  public void addAll(AccessibleState[] states){  if (states.length != 0) {    if (this.states == null) {      this.states=new Vector(states.length);    }    for (int i=0; i < states.length; i++) {      if (!this.states.contains(states[i])) {        this.states.addElement(states[i]);      }    }  }}  }
class C{  public void addPoint(int x,int y){  if (npoints >= xpoints.length || npoints >= ypoints.length) {    int newLength=npoints * 2;    if (newLength < MIN_LENGTH) {      newLength=MIN_LENGTH;    } else     if ((newLength & (newLength - 1)) != 0) {      newLength=Integer.highestOneBit(newLength);    }    xpoints=Arrays.copyOf(xpoints,newLength);    ypoints=Arrays.copyOf(ypoints,newLength);  }  xpoints[npoints]=x;  ypoints[npoints]=y;  npoints++;  if (bounds != null) {    updateBounds(x,y);  }}  }
class C{  private void removeDITStructureRule(String definition,SchemaBuilder newSchemaBuilder,List<Modification> modifications,int currentPosition,Set<String> modifiedSchemaFiles) throws DirectoryException {  Schema currentSchema=newSchemaBuilder.toSchema();  int ruleID=SchemaUtils.parseRuleID(definition);  if (!currentSchema.hasDITStructureRule(ruleID)) {    LocalizableMessage message=ERR_SCHEMA_MODIFY_REMOVE_NO_SUCH_DSR.get(ruleID);    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);  }  for (int i=currentPosition + 1; i < modifications.size(); i++) {    Modification m=modifications.get(i);    Attribute a=m.getAttribute();    if (m.getModificationType() != ModificationType.ADD || !a.getAttributeDescription().getAttributeType().equals(ditStructureRulesType)) {      continue;    }    for (    ByteString v : a) {      int id=SchemaUtils.parseRuleID(v.toString());      if (ruleID == id) {        return;      }    }  }  newSchemaBuilder.removeDITStructureRule(ruleID);  addElementIfNotNull(modifiedSchemaFiles,getElementSchemaFile(currentSchema.getDITStructureRule(ruleID)));}  }
class C{  private void assertFakeOperations(final DN dn1,Entry entry,Iterable<FakeOperation> ops,int assertCount) throws Exception {  int count=0;  for (  FakeOperation op : ops) {    count++;    if (op instanceof FakeAddOperation) {      FakeAddOperation addOp=(FakeAddOperation)op;      assertNotNull(addOp.getCSN());      AddMsg addmsg=addOp.generateMessage();      assertEquals(dn1,addmsg.getDN());      assertEquals(addmsg.getEntryUUID(),EntryHistorical.getEntryUUID(entry));      String parentId=LDAPReplicationDomain.findEntryUUID(dn1.parent());      assertEquals(addmsg.getParentEntryUUID(),parentId);      addmsg.createOperation(InternalClientConnection.getRootConnection());    } else {      assertTrue(count != 1,"FakeAddOperation was not correctly generated from historical information");    }  }  assertEquals(count,assertCount);}  }
class C{  public void removeUsers(Set users) throws AMException, SSOException {  SSOTokenManager.getInstance().validateToken(super.token);  dsServices.modifyMemberShip(super.token,users,super.entryDN,ROLE,REMOVE_MEMBER);}  }
class C{  @Override public ConnectionEntryWriter writeEntry(final Entry entry) throws LdapException {  Reject.ifNull(entry);  connection.add(entry);  return this;}  }
class C{  <T extends AbstractSyncAuditEventBuilder<T>>void logEntry(AbstractSyncAuditEventLogger<T> entry,ReconciliationContext reconContext) throws SynchronizationException {  final long startNanoTime=startNanoTime(reconContext);  try {    entry.log(connectionFactory);  } catch (  ResourceException e) {    throw new SynchronizationException(e);  } finally {    addDuration(reconContext,DurationMetric.auditLog,startNanoTime);  }}  }
class C{  public static ServerListPingEvent callServerListPingEvent(Server craftServer,InetAddress address,String motd,int numPlayers,int maxPlayers){  ServerListPingEvent event=new ServerListPingEvent(address,motd,numPlayers,maxPlayers);  craftServer.getPluginManager().callEvent(event);  return event;}  }
class C{  private StringBuffer format(double number,StringBuffer result,FieldDelegate delegate){  if (Double.isNaN(number) || (Double.isInfinite(number) && multiplier == 0)) {    int iFieldStart=result.length();    result.append(symbols.getNaN());    delegate.formatted(INTEGER_FIELD,Field.INTEGER,Field.INTEGER,iFieldStart,result.length(),result);    return result;  }  boolean isNegative=((number < 0.0) || (number == 0.0 && 1 / number < 0.0)) ^ (multiplier < 0);  if (multiplier != 1) {    number*=multiplier;  }  if (Double.isInfinite(number)) {    if (isNegative) {      append(result,negativePrefix,delegate,getNegativePrefixFieldPositions(),Field.SIGN);    } else {      append(result,positivePrefix,delegate,getPositivePrefixFieldPositions(),Field.SIGN);    }    int iFieldStart=result.length();    result.append(symbols.getInfinity());    delegate.formatted(INTEGER_FIELD,Field.INTEGER,Field.INTEGER,iFieldStart,result.length(),result);    if (isNegative) {      append(result,negativeSuffix,delegate,getNegativeSuffixFieldPositions(),Field.SIGN);    } else {      append(result,positiveSuffix,delegate,getPositiveSuffixFieldPositions(),Field.SIGN);    }    return result;  }  if (isNegative) {    number=-number;  }  assert (number >= 0 && !Double.isInfinite(number));synchronized (digitList) {    int maxIntDigits=super.getMaximumIntegerDigits();    int minIntDigits=super.getMinimumIntegerDigits();    int maxFraDigits=super.getMaximumFractionDigits();    int minFraDigits=super.getMinimumFractionDigits();    digitList.set(isNegative,number,useExponentialNotation ? maxIntDigits + maxFraDigits : maxFraDigits,!useExponentialNotation);    return subformat(result,delegate,isNegative,false,maxIntDigits,minIntDigits,maxFraDigits,minFraDigits);  }}  }
class C{  public InQueryExp(ValueExp v1,ValueExp items[]){  val=v1;  valueList=items;}  }
class C{  private void doSignalAll(Node first){  lastWaiter=firstWaiter=null;  do {    Node next=first.nextWaiter;    first.nextWaiter=null;    transferForSignal(first);    first=next;  } while (first != null);}  }
class C{  @Override public void body(String namespace,String name,String text) throws Exception {  String namespaceuri=null;  String localpart=text;  int colon=text.indexOf(':');  if (colon >= 0) {    String prefix=text.substring(0,colon);    namespaceuri=digester.findNamespaceURI(prefix);    localpart=text.substring(colon + 1);  }  ContextService contextService=(ContextService)digester.peek();  contextService.setServiceqnameLocalpart(localpart);  contextService.setServiceqnameNamespaceURI(namespaceuri);}  }
class C{  public static StreetViewFragment newInstance(@NonNull Detail detail,@NonNull Point revealCenter,int revealWidth){  StreetViewFragment fragment=new StreetViewFragment();  Bundle args=new Bundle();  args.putParcelable(IntentKeys.DETAIL,detail);  args.putParcelable(REVEAL_CENTER,revealCenter);  args.putInt(REVEAL_WIDTH,revealWidth);  fragment.setArguments(args);  return fragment;}  }
class C{  public ByteArrayBuilder appendStrings(Collection<String> col){  appendByte(col.size());  for (  String s : col) {    appendString(s);  }  return this;}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  public static Date parse(String dateStr){  try {    return mSimpleDateTimeFormat.parse(dateStr);  } catch (  ParseException e) {    e.printStackTrace();    throw new RuntimeException("date formatDateTime error");  }}  }
class C{  private boolean hasConfigChanged(JsonValue existingConfig,JsonValue newConfig){  return !existingConfig.isEqualTo(newConfig);}  }
class C{  public void test_UTCIIIIII(){  assertTrue("Returned incorrect UTC value for epoch",Date.UTC(70,0,1,0,0,0) == (long)0);  assertTrue("Returned incorrect UTC value for epoch +1yr",Date.UTC(71,0,1,0,0,0) == (long)365 * 24 * 60* 60* 1000);}  }
class C{  @Override public int countByUuid_C(String uuid,long companyId){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID_C;  Object[] finderArgs=new Object[]{uuid,companyId};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(3);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_C_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_C_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_C_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_C_COMPANYID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(companyId);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  @Override public OkHttpClient clone(){  return new OkHttpClient(this);}  }
class C{  public InvalidFormatException(Throwable t,String name,int type){  super(t);  fillInStackTrace();  this.name=name;  this.type=type;}  }
class C{  private ByteBuffer writeStringUTF16LEBOM(String next,int i,int noOfValues) throws CharacterCodingException {  CharsetEncoder encoder=Charset.forName(TextEncoding.CHARSET_UTF_16_LE_ENCODING_FORMAT).newEncoder();  encoder.onMalformedInput(CodingErrorAction.IGNORE);  encoder.onUnmappableCharacter(CodingErrorAction.IGNORE);  ByteBuffer bb=null;  if ((i + 1) == noOfValues) {    bb=encoder.encode(CharBuffer.wrap('\ufeff' + next));  } else {    if (isNullSeperateMultipleValues()) {      bb=encoder.encode(CharBuffer.wrap('\ufeff' + next + '\0'));    } else {      bb=encoder.encode(CharBuffer.wrap('\ufeff' + next));    }  }  bb.rewind();  return bb;}  }
class C{  public SimpleDateFormat(String pattern,DateFormatSymbols formatSymbols){  if (pattern == null || formatSymbols == null) {    throw new NullPointerException();  }  this.pattern=pattern;  this.formatData=(DateFormatSymbols)formatSymbols.clone();  this.locale=Locale.getDefault(Locale.Category.FORMAT);  initializeCalendar(this.locale);  initialize(this.locale);  useDateFormatSymbols=true;}  }
class C{  final boolean isMatched(){  Object x=item;  return (x == this) || ((x == null) == isData);}  }
class C{  public boolean is_layer_dependent(int p_i,int p_j){  int compare_value=clearance_rows[p_j].column[p_i].layer[0];  for (int l=1; l < layer_structure.size(); ++l) {    if (clearance_rows[p_j].column[p_i].layer[l] != compare_value) {      return true;    }  }  return false;}  }
class C{  public boolean isSipURI(){  return false;}  }
class C{  static ReplayPromise<Long> replayPromiseLong(final Duration timeout,final long time){  return new ReplayPromiseImpl<>(timeout,time);}  }
class C{  public void addBaseDN(DN baseDN){  if (!baseDNs.contains(baseDN)) {    baseDNs.add(baseDN);  }}  }
class C{  public void drawLine(SynthContext context,Object paintKey,Graphics g,int x1,int y1,int x2,int y2){  g.drawLine(x1,y1,x2,y2);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeelementnodevalue.class,args);}  }
class C{  static void checkConsentHeader(ConsentHeader consH,String messageID,boolean isServer) throws SOAPBindingException, SOAPFaultException {  if (consH == null) {    return;  }  try {    checkActorAndMustUnderstand(consH.getActor(),consH.getMustUnderstand(),messageID,isServer);  } catch (  SOAPFaultException sfe) {    sfe.getSOAPFaultMessage().getSOAPFault().getDetail().setConsentHeader(consH);    throw sfe;  }}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public void updateHeader(Header header){  if (header == null) {    return;  }  for (int i=0; i < this.headers.size(); i++) {    Header current=(Header)this.headers.get(i);    if (current.getName().equalsIgnoreCase(header.getName())) {      this.headers.set(i,header);      return;    }  }  this.headers.add(header);}  }
class C{  public void testCertStore08() throws InvalidAlgorithmParameterException, NoSuchProviderException {  if (!initParams()) {    return;  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertStore.getInstance(invalidValues[i],dParams,dName);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }  try {    CertStore.getInstance(null,dParams,dName);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when type is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }}  }
class C{  public boolean equals(Object that){  if (!this.getClass().equals(that.getClass()))   return false;  Class<?> myclass=this.getClass();  Class<?> hisclass=that.getClass();  while (true) {    Field[] fields=myclass.getDeclaredFields();    Field[] hisfields=hisclass.getDeclaredFields();    for (int i=0; i < fields.length; i++) {      Field f=fields[i];      Field g=hisfields[i];      int modifier=f.getModifiers();      if ((modifier & Modifier.PRIVATE) == Modifier.PRIVATE)       continue;      Class<?> fieldType=f.getType();      String fieldName=f.getName();      if (fieldName.compareTo("stringRepresentation") == 0) {        continue;      }      if (fieldName.compareTo("indentation") == 0) {        continue;      }      try {        if (fieldType.isPrimitive()) {          String fname=fieldType.toString();          if (fname.compareTo("int") == 0) {            if (f.getInt(this) != g.getInt(that))             return false;          } else           if (fname.compareTo("short") == 0) {            if (f.getShort(this) != g.getShort(that))             return false;          } else           if (fname.compareTo("char") == 0) {            if (f.getChar(this) != g.getChar(that))             return false;          } else           if (fname.compareTo("long") == 0) {            if (f.getLong(this) != g.getLong(that))             return false;          } else           if (fname.compareTo("boolean") == 0) {            if (f.getBoolean(this) != g.getBoolean(that))             return false;          } else           if (fname.compareTo("double") == 0) {            if (f.getDouble(this) != g.getDouble(that))             return false;          } else           if (fname.compareTo("float") == 0) {            if (f.getFloat(this) != g.getFloat(that))             return false;          }        } else         if (g.get(that) == f.get(this))         continue; else         if (f.get(this) == null && g.get(that) != null)         return false; else         if (g.get(that) == null && f.get(that) != null)         return false; else         if (!f.get(this).equals(g.get(that)))         return false;      } catch (      IllegalAccessException ex1) {        InternalErrorHandler.handleException(ex1);      }    }    if (myclass.equals(NetObject.class))     break; else {      myclass=myclass.getSuperclass();      hisclass=hisclass.getSuperclass();    }  }  return true;}  }
class C{  protected Request createRiRegisterRequest() throws TckInternalError {  try {    return createRequest(Request.REGISTER,riAddressFactory,riHeaderFactory,riMessageFactory,riSipProvider,tiSipProvider,null,null,null);  } catch (  Throwable exc) {    throw new TckInternalError("Failed to create an RI->TI register request",exc);  }}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Node newChild;  NodeList elementList;  Node elementNode;  Node appendedChild;  doc1=(Document)load("hc_staff",false);  doc2=(Document)load("hc_staff",true);  newChild=doc1.createElement("br");  elementList=doc2.getElementsByTagName("p");  elementNode=elementList.item(1);{    boolean success=false;    try {      appendedChild=elementNode.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public boolean is_area_obstacle(){  return is_obstacle;}  }
class C{  public int next(){  if (_currentNode == _startNodeID || _currentNode == DTM.NULL) {    return NULL;  } else {    final int node=_currentNode;    _currentNode=_nextsib(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS){  return toXMLString(includeNS,declareNS,false);}  }
class C{  @Override public int hashCode(){  return Arrays.hashCode(ipaddress);}  }
class C{  public void addUsers(Set users) throws AMException, SSOException {  SSOTokenManager.getInstance().validateToken(super.token);  dsServices.modifyMemberShip(super.token,users,super.entryDN,ASSIGNABLE_DYNAMIC_GROUP,ADD_MEMBER);}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void testConstrStringMathContext(){  String a="-238768787678287e214";  int precision=5;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="-23876";  int resScale=-224;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());  String biStr=new String("12345678901234567890123456789012345.0E+10");  String nbiStr=new String("-12345678901234567890123456789012345.E+10");  BigDecimal bd;  mc=new MathContext(31,RoundingMode.UP);  bd=new BigDecimal(biStr,mc);  assertEquals("incorrect value","1.234567890123456789012345678902E+44",bd.toString());  bd=new BigDecimal(nbiStr,mc);  assertEquals("incorrect value","-1.234567890123456789012345678902E+44",bd.toString());  mc=new MathContext(28,RoundingMode.DOWN);  bd=new BigDecimal(biStr,mc);  assertEquals("incorrect value","1.234567890123456789012345678E+44",bd.toString());  bd=new BigDecimal(nbiStr,mc);  assertEquals("incorrect value","-1.234567890123456789012345678E+44",bd.toString());  mc=new MathContext(33,RoundingMode.CEILING);  bd=new BigDecimal(biStr,mc);  assertEquals("incorrect value","1.23456789012345678901234567890124E+44",bd.toString());  bd=new BigDecimal(nbiStr,mc);  assertEquals("incorrect value","-1.23456789012345678901234567890123E+44",bd.toString());  mc=new MathContext(34,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(biStr,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(nbiStr,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  mc=new MathContext(7,RoundingMode.FLOOR);  bd=new BigDecimal("1000000.9",mc);  assertEquals("incorrect value","1000000",bd.toString());}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  public static void configurePaxWebProperties(){  System.setProperty("org.osgi.service.http.port",JettyPropertyUtil.getProperty("openidm.port.http",false));  System.setProperty("org.osgi.service.http.port.secure",JettyPropertyUtil.getProperty("openidm.port.https",false));  System.setProperty("org.ops4j.pax.web.ssl.keystore",JettyPropertyUtil.getProperty("openidm.keystore.location",false));  System.setProperty("org.ops4j.pax.web.ssl.keystore.type",JettyPropertyUtil.getProperty("openidm.keystore.type",false));  System.setProperty("org.ops4j.pax.web.ssl.password",JettyPropertyUtil.getProperty("openidm.keystore.password",true));  System.setProperty("org.ops4j.pax.web.ssl.keypassword",JettyPropertyUtil.getProperty("openidm.keystore.password",true));}  }
class C{  public NO_RESOURCES(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfDictionary copyTo(PdfDocument document,boolean allowDuplicating){  return (PdfDictionary)super.copyTo(document,allowDuplicating);}  }
class C{  @Override public void processSchemaChange(List<Modification> modifications){  if (!modifications.isEmpty()) {    LDAPReplicationDomain domain=findDomain(DirectoryServer.getSchemaDN(),null);    if (domain != null) {      domain.synchronizeSchemaModifications(modifications);    }  }}  }
class C{  public Dimension maximumLayoutSize(Container target){  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  public void paintTextPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public boolean isSecure(){  return true;}  }
class C{  private void initMethods(Class<?> realClass,Method methods[],Hashtable<String,Method> attMap,Hashtable<String,Method> getAttMap,Hashtable<String,Method> setAttMap,Hashtable<String,Method> invokeAttMap){  for (int j=0; j < methods.length; ++j) {    String name=methods[j].getName();    if (Modifier.isStatic(methods[j].getModifiers()))     continue;    if (!Modifier.isPublic(methods[j].getModifiers())) {      if (log.isDebugEnabled())       log.debug("Not public " + methods[j]);      continue;    }    if (methods[j].getDeclaringClass() == Object.class)     continue;    Class<?> params[]=methods[j].getParameterTypes();    if (name.startsWith("get") && params.length == 0) {      Class<?> ret=methods[j].getReturnType();      if (!supportedType(ret)) {        if (log.isDebugEnabled())         log.debug("Unsupported type " + methods[j]);        continue;      }      name=unCapitalize(name.substring(3));      getAttMap.put(name,methods[j]);      attMap.put(name,methods[j]);    } else     if (name.startsWith("is") && params.length == 0) {      Class<?> ret=methods[j].getReturnType();      if (Boolean.TYPE != ret) {        if (log.isDebugEnabled())         log.debug("Unsupported type " + methods[j] + " "+ ret);        continue;      }      name=unCapitalize(name.substring(2));      getAttMap.put(name,methods[j]);      attMap.put(name,methods[j]);    } else     if (name.startsWith("set") && params.length == 1) {      if (!supportedType(params[0])) {        if (log.isDebugEnabled())         log.debug("Unsupported type " + methods[j] + " "+ params[0]);        continue;      }      name=unCapitalize(name.substring(3));      setAttMap.put(name,methods[j]);      attMap.put(name,methods[j]);    } else {      if (params.length == 0) {        if (specialMethods.get(methods[j].getName()) != null)         continue;        invokeAttMap.put(name,methods[j]);      } else {        boolean supported=true;        for (int i=0; i < params.length; i++) {          if (!supportedType(params[i])) {            supported=false;            break;          }        }        if (supported)         invokeAttMap.put(name,methods[j]);      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattribute02.class,args);}  }
class C{  public void testSetScaleLess(){  String a="2.345726458768760000E+10";  int newScale=5;  BigDecimal aNumber=new BigDecimal(a);  BigDecimal bNumber=aNumber.setScale(newScale);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertEquals("incorrect value",0,bNumber.compareTo(aNumber));}  }
class C{  public static byte[] encodeString(String in,String charset){  byte[] rv=null;  try {    rv=in.getBytes(charset);  } catch (  Exception e) {    throw new RuntimeException(e);  }  return rv;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttribute;  NodeList elementList;  Element testEmployee;  Attr domesticAttr;  String attrValue;  doc=(Document)load("staff",true);  newAttribute=doc.createAttribute("district");  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(3);  domesticAttr=testEmployee.setAttributeNode(newAttribute);  attrValue=testEmployee.getAttribute("district");  assertEquals("elementGetElementEmptyAssert","",attrValue);}  }
class C{  public Set searchUsers(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,avPairs,level);}  }
class C{  public void testCheckValidity2() throws CertificateNotYetValidException, CertificateExpiredException {  if (this.cert == null) {    return;  }  Date[] date=new Date[8];  Calendar calendar=Calendar.getInstance();  for (int i=0; i < date.length; i++) {    calendar.set(i * 500,Calendar.JANUARY,1);    date[i]=calendar.getTime();  }  Date nb_date=tbt_cert.getNotBefore();  Date na_date=tbt_cert.getNotAfter();  for (int i=0; i < date.length; i++) {    try {      tbt_cert.checkValidity(date[i]);      assertFalse("CertificateExpiredException expected",date[i].compareTo(na_date) > 0);      assertFalse("CertificateNotYetValidException expected",date[i].compareTo(nb_date) < 0);    } catch (    CertificateExpiredException e) {      assertTrue("Unexpected CertificateExpiredException was thrown",date[i].compareTo(na_date) > 0);    }catch (    CertificateNotYetValidException e) {      assertTrue("Unexpected CertificateNotYetValidException " + "was thrown",date[i].compareTo(nb_date) < 0);    }  }  Calendar calendarNow=Calendar.getInstance();  try {    tbt_cert.checkValidity(calendarNow.getTime());  } catch (  CertificateExpiredException e) {  }  Calendar calendarPast=GregorianCalendar.getInstance();  calendarPast.clear();  try {    tbt_cert.checkValidity(calendarPast.getTime());  } catch (  CertificateNotYetValidException e) {  }}  }
class C{  @Parameters({"parent-realm","entity-type","entity-name","entity-creation-attributes"}) @Test(groups={"api"},expectedExceptions={IdRepoException.class}) public void createIdentityTwice(String parentRealm,String idType,String entityName,String createAttributes) throws IdRepoException, SSOException {  Object[] params={parentRealm,idType,entityName,createAttributes};  entering("createIdentityTwice",params);  try {    IdType type=IdUtils.getType(idType);    Map values=CollectionUtils.parseStringToMap(createAttributes);    createIdentity(parentRealm,type,entityName,values);  } catch (  SSOException e) {    log(Level.SEVERE,"createIdentityTwice",e.getMessage(),params);    e.printStackTrace();    throw e;  }  exiting("createIdentityTwice");}  }
class C{  public void addAttribute(AttributedCharacterIterator.Attribute attribute,Object value,int start,int end){  if (attribute == null) {    throw new NullPointerException("attribute == null");  }  if (start < 0 || end > text.length() || start >= end) {    throw new IllegalArgumentException();  }  if (value == null) {    return;  }  List<Range> ranges=attributeMap.get(attribute);  if (ranges == null) {    ranges=new ArrayList<Range>(1);    ranges.add(new Range(start,end,value));    attributeMap.put(attribute,ranges);    return;  }  ListIterator<Range> it=ranges.listIterator();  while (it.hasNext()) {    Range range=it.next();    if (end <= range.start) {      it.previous();      break;    } else     if (start < range.end || (start == range.end && value.equals(range.value))) {      Range r1=null, r3;      it.remove();      r1=new Range(range.start,start,range.value);      r3=new Range(end,range.end,range.value);      while (end > range.end && it.hasNext()) {        range=it.next();        if (end <= range.end) {          if (end > range.start || (end == range.start && value.equals(range.value))) {            it.remove();            r3=new Range(end,range.end,range.value);            break;          }        } else {          it.remove();        }      }      if (value.equals(r1.value)) {        if (value.equals(r3.value)) {          it.add(new Range(r1.start < start ? r1.start : start,r3.end > end ? r3.end : end,r1.value));        } else {          it.add(new Range(r1.start < start ? r1.start : start,end,r1.value));          if (r3.start < r3.end) {            it.add(r3);          }        }      } else {        if (value.equals(r3.value)) {          if (r1.start < r1.end) {            it.add(r1);          }          it.add(new Range(start,r3.end > end ? r3.end : end,r3.value));        } else {          if (r1.start < r1.end) {            it.add(r1);          }          it.add(new Range(start,end,value));          if (r3.start < r3.end) {            it.add(r3);          }        }      }      return;    }  }  it.add(new Range(start,end,value));}  }
class C{  @Override public void run(){  DirectoryServer.restart(CLASS_NAME,shutdownMessage);}  }
class C{  public XObject execute(XPathContext xctxt,boolean destructiveOK) throws javax.xml.transform.TransformerException {  org.apache.xml.utils.PrefixResolver xprefixResolver=xctxt.getNamespaceContext();  XObject result;  if (m_fixUpWasCalled) {    if (m_isGlobal)     result=xctxt.getVarStack().getGlobalVariable(xctxt,m_index,destructiveOK); else     result=xctxt.getVarStack().getLocalVariable(xctxt,m_index,destructiveOK);  } else {    result=xctxt.getVarStack().getVariableOrParam(xctxt,m_qname);  }  if (null == result) {    warn(xctxt,XPATHErrorResources.WG_ILLEGAL_VARIABLE_REFERENCE,new Object[]{m_qname.getLocalPart()});    result=new XNodeSet(xctxt.getDTMManager());  }  return result;}  }
class C{  static void checkSignedShort(final int value,final String msg){  if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed short): " + value);  }}  }
class C{  public ResponseHeaders combine(ResponseHeaders network) throws IOException {  RawHeaders result=new RawHeaders();  result.setStatusLine(headers.getStatusLine());  for (int i=0; i < headers.length(); i++) {    String fieldName=headers.getFieldName(i);    String value=headers.getValue(i);    if ("Warning".equals(fieldName) && value.startsWith("1")) {      continue;    }    if (!isEndToEnd(fieldName) || network.headers.get(fieldName) == null) {      result.add(fieldName,value);    }  }  for (int i=0; i < network.headers.length(); i++) {    String fieldName=network.headers.getFieldName(i);    if (isEndToEnd(fieldName)) {      result.add(fieldName,network.headers.getValue(i));    }  }  return new ResponseHeaders(uri,result);}  }
class C{  public static String downloadString(URL url){  return downloadString(url,null,DEFAULT_READ_TIMEOUT,DEFAULT_SOCKET_TIMEOUT,"utf-8");}  }
class C{  public boolean equals(Object obj){  if (obj instanceof ActivationDesc) {    ActivationDesc desc=(ActivationDesc)obj;    return ((groupID == null ? desc.groupID == null : groupID.equals(desc.groupID)) && (className == null ? desc.className == null : className.equals(desc.className)) && (location == null ? desc.location == null : location.equals(desc.location))&& (data == null ? desc.data == null : data.equals(desc.data))&& (restart == desc.restart));  } else {    return false;  }}  }
class C{  public void onRestoreInstanceState(@Nullable final Parcelable parcelable){  if (parcelable instanceof Bundle) {    Bundle bundle=(Bundle)parcelable;    mFirstAnimatedPosition=bundle.getInt(SAVEDINSTANCESTATE_FIRSTANIMATEDPOSITION);    mLastAnimatedPosition=bundle.getInt(SAVEDINSTANCESTATE_LASTANIMATEDPOSITION);    mShouldAnimate=bundle.getBoolean(SAVEDINSTANCESTATE_SHOULDANIMATE);  }}  }
class C{  public ListRenderer(com.itextpdf.layout.element.List modelElement){  super(modelElement);}  }
class C{  protected boolean isGlobal(){  return false;}  }
class C{  public GSERParser skipMSP() throws GSERException {  skip(GSER_MSP);  return this;}  }
class C{  public final void addElements(int value,int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  for (int i=0; i < numberOfElements; i++) {    m_map[m_firstFree]=value;    m_firstFree++;  }}  }
class C{  public void printError(String str){  buff.append(str).append("\n");}  }
class C{  private static void assertEcho(String result,String expected){  assertTrue(result.indexOf("<p>" + expected + "</p>") > 0);}  }
class C{  public IllegalChannelGroupException(){}  }
class C{  public Text replaceWholeText(String content) throws DOMException {  return null;}  }
class C{  public DocumentIdentifier(Object... components){  super(components);}  }
class C{  public RDN(AttributeTypeAndValue[] aAndVs){  this.values=new DERSet(aAndVs);}  }
class C{  @Override public TagResult generateValue(TemplateEntry templateEntry,TemplateValue templateValue){  DN parentDN=templateEntry.getParentDN();  if (parentDN == null || parentDN.isRootDN()) {    return TagResult.SUCCESS_RESULT;  }  templateValue.getValue().append(parentDN);  return TagResult.SUCCESS_RESULT;}  }
class C{  public void put(String key,Object ser){  put(key,ser,null);  put("","",new Base64Cipher());}  }
class C{  public Reference<? extends T> poll(){  if (head == null)   return null;synchronized (lock) {    return reallyPoll();  }}  }
class C{  public SaltedSHA512PasswordStorageSchemeTestCase(){  super("cn=Salted SHA-512,cn=Password Storage Schemes,cn=config");}  }
class C{  public OneTimeUse createOneTimeUse(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ONE_TIME_USE,elem);  if (obj == null) {    return new OneTimeUseImpl(elem);  } else {    return (OneTimeUse)obj;  }}  }
class C{  public static VorbisCommentTag createNewTag(){  VorbisCommentTag tag=new VorbisCommentTag();  tag.setVendor(DEFAULT_VENDOR);  return tag;}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder();  builder.append(getClass().getSimpleName());  builder.append('[');  builder.append(charsetName);  builder.append(": ");  for (int i=0; i < bytes.length; i++) {    if (i > 0) {      builder.append(",");    }    builder.append("0x");    builder.append(Integer.toHexString(0xFF & bytes[i]).toUpperCase());  }  builder.append(']');  return builder.toString();}  }
class C{  public void firePropertyChange(){  java.util.Vector<PropertyChangeListener> targets;synchronized (this) {    if (listeners == null) {      return;    }    targets=unsafeClone(listeners);  }  PropertyChangeEvent evt=new PropertyChangeEvent(source,null,null,null);  for (int i=0; i < targets.size(); i++) {    PropertyChangeListener target=targets.elementAt(i);    target.propertyChange(evt);  }}  }
class C{  @Override public void performBackendPostFinalizationProcessing(Backend<?> backend){  if (!DirectoryServer.getInstance().isShuttingDown()) {    clearBackend(backend.getBackendID());  }}  }
class C{  private void updateForeground(Color color){  StyledDocument doc=(StyledDocument)getComponent().getDocument();  Style style=doc.getStyle(StyleContext.DEFAULT_STYLE);  if (style == null) {    return;  }  if (color == null) {    style.removeAttribute(StyleConstants.Foreground);  } else {    StyleConstants.setForeground(style,color);  }}  }
class C{  public String debugDump(int indentation){  stringRepresentation="";  String indent=new Indentation(indentation).getIndentation();  ;  String className=this.getClass().getName();  sprint(indent + className);  sprint(indent + "{");  sprint(indent + sdpFields.debugDump(indentation));  sprint(indent + "}");  return stringRepresentation;}  }
class C{  protected void printResources(PrintWriter writer,String prefix,javax.naming.Context namingContext,String type,Class<?> clazz,StringManager smClient){  try {    NamingEnumeration<Binding> items=namingContext.listBindings("");    while (items.hasMore()) {      Binding item=items.next();      if (item.getObject() instanceof javax.naming.Context) {        printResources(writer,prefix + item.getName() + "/",(javax.naming.Context)item.getObject(),type,clazz,smClient);      } else {        if ((clazz != null) && (!(clazz.isInstance(item.getObject())))) {          continue;        }        writer.print(prefix + item.getName());        writer.print(':');        writer.print(item.getClassName());        writer.println();      }    }  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log("ManagerServlet.resources[" + type + "]",t);    writer.println(smClient.getString("managerServlet.exception",t.toString()));  }}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aCluster,StoreDescription parentDesc) throws Exception {  if (aCluster instanceof CatalinaCluster) {    CatalinaCluster cluster=(CatalinaCluster)aCluster;    if (cluster instanceof SimpleTcpCluster) {      SimpleTcpCluster tcpCluster=(SimpleTcpCluster)cluster;      ClusterManager manager=tcpCluster.getManagerTemplate();      if (manager != null) {        storeElement(aWriter,indent,manager);      }    }    Channel channel=cluster.getChannel();    if (channel != null) {      storeElement(aWriter,indent,channel);    }    ClusterDeployer deployer=cluster.getClusterDeployer();    if (deployer != null) {      storeElement(aWriter,indent,deployer);    }    Valve valves[]=cluster.getValves();    storeElementArray(aWriter,indent,valves);    if (aCluster instanceof SimpleTcpCluster) {      LifecycleListener listeners[]=((SimpleTcpCluster)cluster).findLifecycleListeners();      storeElementArray(aWriter,indent,listeners);      ClusterListener mlisteners[]=((SimpleTcpCluster)cluster).findClusterListeners();      List<ClusterListener> clusterListeners=new ArrayList<>();      for (      ClusterListener clusterListener : mlisteners) {        if (clusterListener != deployer) {          clusterListeners.add(clusterListener);        }      }      storeElementArray(aWriter,indent,clusterListeners.toArray());    }  }}  }
class C{  public boolean isPluginDeclared(String id){  if (pluginDcls.contains(id))   return true;  pluginDcls.add(id);  return false;}  }
class C{  public void unsetPermission(String name){  permissions.remove(name.toLowerCase(java.util.Locale.ENGLISH));  permissible.recalculatePermissions();}  }
class C{  public void replaceSubject(String subjectName,Subject subject) throws NameNotFoundException {  replaceSubject(subjectName,subject,false);}  }
class C{  String stripWhitespaces(String s){  return s.trim();}  }
class C{  protected long computeSVUID() throws IOException {  ByteArrayOutputStream bos;  DataOutputStream dos=null;  long svuid=0;  try {    bos=new ByteArrayOutputStream();    dos=new DataOutputStream(bos);    dos.writeUTF(name.replace('/','.'));    int access=this.access;    if ((access & Opcodes.ACC_INTERFACE) != 0) {      access=(svuidMethods.size() > 0) ? (access | Opcodes.ACC_ABSTRACT) : (access & ~Opcodes.ACC_ABSTRACT);    }    dos.writeInt(access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL | Opcodes.ACC_INTERFACE| Opcodes.ACC_ABSTRACT));    Arrays.sort(interfaces);    for (int i=0; i < interfaces.length; i++) {      dos.writeUTF(interfaces[i].replace('/','.'));    }    writeItems(svuidFields,dos,false);    if (hasStaticInitializer) {      dos.writeUTF("<clinit>");      dos.writeInt(Opcodes.ACC_STATIC);      dos.writeUTF("()V");    }    writeItems(svuidConstructors,dos,true);    writeItems(svuidMethods,dos,true);    dos.flush();    byte[] hashBytes=computeSHAdigest(bos.toByteArray());    for (int i=Math.min(hashBytes.length,8) - 1; i >= 0; i--) {      svuid=(svuid << 8) | (hashBytes[i] & 0xFF);    }  }  finally {    if (dos != null) {      dos.close();    }  }  return svuid;}  }
class C{  public boolean isSyncEnabled(){  return syncEnabled;}  }
class C{  private boolean loadSectionOrder(){  return loadSectionOrder(serviceName + FILENAME_SUFFIX);}  }
class C{  public FrameBodyTDRC(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);  findMatchingMaskAndExtractV3Values();}  }
class C{  private void startConversationsClient(){  if (mConversationsClient != null) {    return;  }  mConversationsClient=TwilioConversationsClient.create(mAccessManager,conversationsClientListener());  mConversationsClient.listen();}  }
class C{  protected static boolean isCallerValid(){  if (!checkCaller) {    return (true);  }  return (isCallerValid(CLASSNAME));}  }
class C{  public SQLSyntaxErrorException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  final void advance(){  if (next == null)   throw new NoSuchElementException();  lastReturned=next;  for (; ; ) {    next=next.next;    if (next == null)     break;    Object x=next.value;    if (x != null && x != next) {      nextValue=(V)x;      break;    }  }}  }
class C{  public final void testGetPrimeExponentQ(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.valueOf(5L),BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getPrimeExponentQ()));}  }
class C{  public <E extends Enum<E>>R visitEnum(EnumPropertyDefinition<E> pd,P p){  return visitUnknown(pd,p);}  }
class C{  public SubscriptionStateParser(String subscriptionState){  super(subscriptionState);}  }
class C{  static boolean testEqual(LDAPAttribute a1,LDAPAttribute a2){  return a1.getAttributeType().equals(a2.getAttributeType()) && a1.getValues().equals(a2.getValues());}  }
class C{  protected void selectPreviousPossibleValue(){  int si;  if (comboBox.isPopupVisible()) {    si=listBox.getSelectedIndex();  } else {    si=comboBox.getSelectedIndex();  }  if (si > 0) {    listBox.setSelectedIndex(si - 1);    listBox.ensureIndexIsVisible(si - 1);    if (!isTableCellEditor) {      if (!(UIManager.getBoolean("ComboBox.noActionOnKeyNavigation") && comboBox.isPopupVisible())) {        comboBox.setSelectedIndex(si - 1);      }    }    comboBox.repaint();  }}  }
class C{  public boolean addLogger(Logger logger){  final String name=logger.getName();  if (name == null) {    throw new NullPointerException();  }  drainLoggerRefQueueBounded();  LoggerContext cx=getUserContext();  if (cx.addLocalLogger(logger)) {    loadLoggerHandlers(logger,name,name + ".handlers");    return true;  } else {    return false;  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(super.toString());  sb.append("\n  Certificate Types Count: ").append(clientCertificateTypesCount.getValue());  sb.append("\n  Certificate Types: ");  for (int i=0; i < clientCertificateTypesCount.getValue(); i++) {    sb.append(ClientCertificateType.getClientCertificateType(clientCertificateTypes.getValue()[i])).append(", ");  }  sb.append("\n  Signature Hash Algorithms Length: ").append(signatureHashAlgorithmsLength.getValue());  sb.append("\n  Signature Hash Algorithms: ");  for (int i=0; i < signatureHashAlgorithmsLength.getValue(); i=i + 2) {    sb.append(HashAlgorithm.getHashAlgorithm(signatureHashAlgorithms.getValue()[i])).append("-");    sb.append(SignatureAlgorithm.getSignatureAlgorithm(signatureHashAlgorithms.getValue()[i + 1])).append(", ");  }  sb.append("\n  Distinguished Names Length: ").append(distinguishedNamesLength.getValue());  return sb.toString();}  }
class C{  public static String escapeQueryString(String unescString){  if (unescString == null) {    return null;  }  StringBuilder escStringBuilder=new StringBuilder();  String shellSpChars="&;`'\"|*?~<>^()[]{}$\\\n";  for (int index=0; index < unescString.length(); index++) {    char nextChar=unescString.charAt(index);    if (shellSpChars.indexOf(nextChar) != -1) {      escStringBuilder.append('\\');    }    escStringBuilder.append(nextChar);  }  return escStringBuilder.toString();}  }
class C{  public void addToListenersMap(String name,Object listener){synchronized (listenersMap) {    Set<Object> set=listenersMap.get(name);    if (set == null) {      listenersMap.put(name,CollectionUtils.asSet(listener));    } else {      set.add(listener);    }  }}  }
class C{  public NullLocationException(){  super();}  }
class C{  private boolean is(int flags){  return (m_flags & flags) != 0;}  }
class C{  public void addPeopleContainerRule(Guid guid,String filter) throws UMSException {  PCMappingTable mt=PCMappingTable.getPCMappingTable(this);  mt.addRule(guid,filter);}  }
class C{  public synchronized Object co_resume(Object arg_object,int thisCoroutine,int toCoroutine) throws java.lang.NoSuchMethodException {  if (!m_activeIDs.get(toCoroutine))   throw new java.lang.NoSuchMethodException(XMLMessages.createXMLMessage(XMLErrorResources.ER_COROUTINE_NOT_AVAIL,new Object[]{Integer.toString(toCoroutine)}));  m_yield=arg_object;  m_nextCoroutine=toCoroutine;  notify();  while (m_nextCoroutine != thisCoroutine || m_nextCoroutine == ANYBODY || m_nextCoroutine == NOBODY) {    try {      wait();    } catch (    java.lang.InterruptedException e) {    }  }  if (m_nextCoroutine == NOBODY) {    co_exit(thisCoroutine);    throw new java.lang.NoSuchMethodException(XMLMessages.createXMLMessage(XMLErrorResources.ER_COROUTINE_CO_EXIT,null));  }  return m_yield;}  }
class C{  private List<Runnable> drainQueue(){  BlockingQueue<Runnable> q=workQueue;  ArrayList<Runnable> taskList=new ArrayList<Runnable>();  q.drainTo(taskList);  if (!q.isEmpty()) {    for (    Runnable r : q.toArray(new Runnable[0])) {      if (q.remove(r))       taskList.add(r);    }  }  return taskList;}  }
class C{  public boolean isPopupVisible(JComboBox c){  return popup.isVisible();}  }
class C{  public static boolean isIDPProfileBindingSupported(String realm,String idpEntityID,String profile,String binding){  if ((saml2MetaManager == null) || (realm == null) || (idpEntityID == null)|| (profile == null)|| (binding == null)) {    return false;  }  try {    IDPSSODescriptorElement idpDescriptor=saml2MetaManager.getIDPSSODescriptor(realm,idpEntityID);    List services=null;    if (SAML2Constants.SSO_SERVICE.equals(profile)) {      services=idpDescriptor.getSingleSignOnService();    } else     if (SAML2Constants.NAMEID_MAPPING_SERVICE.equals(profile)) {      services=idpDescriptor.getNameIDMappingService();    } else     if (SAML2Constants.ASSERTION_ID_REQUEST_SERVICE.equals(profile)) {      services=saml2MetaManager.getAuthnAuthorityDescriptor(realm,idpEntityID).getAssertionIDRequestService();    } else     if (SAML2Constants.ARTIFACT_RESOLUTION_SERVICE.equals(profile)) {      services=idpDescriptor.getArtifactResolutionService();    } else     if (SAML2Constants.SLO_SERVICE.equals(profile)) {      services=idpDescriptor.getSingleLogoutService();    } else     if (SAML2Constants.MNI_SERVICE.equals(profile)) {      services=idpDescriptor.getManageNameIDService();    }    if ((services != null) && (!services.isEmpty())) {      Iterator iter=services.iterator();      while (iter.hasNext()) {        EndpointType endpoint=(EndpointType)iter.next();        if (binding.equals(endpoint.getBinding())) {          return true;        }      }    }  } catch (  SAML2MetaException me) {    debug.error("SAML2Utils.isIDPProfileBindingSupported:",me);  }  return false;}  }
class C{  @Override public int read() throws IOException {  if (closed) {    return -1;  } else   if (ioException != null) {    throw ioException;  }  if ((entryBytes == null || !entryBytes.hasRemaining()) && !getNextEntry()) {    closed=true;    return -1;  }  return 0xFF & entryBytes.get();}  }
class C{  protected AttrSet verifyAndGetAttributes(PersistentObject po,String[] attributeNames) throws AMException {  boolean found=false;  int i=0;  int numAttrs=attributeNames.length;  String fetchAttributes[]=new String[numAttrs + 1];  for (; i < numAttrs; i++) {    if (attributeNames[i].equalsIgnoreCase(USER_STATUS_ATTRIBUTE)) {      found=true;      break;    } else {      fetchAttributes[i]=attributeNames[i];    }  }  if (!found)   fetchAttributes[i]=USER_STATUS_ATTRIBUTE; else   fetchAttributes=attributeNames;  AttrSet retAttrSet;  try {    retAttrSet=po.getAttributes(fetchAttributes);  } catch (  UMSException ue) {    debug.error("Compliance.verifyAndGetAttributes(): ",ue);    throw new AMException(AMSDKBundle.getString("330"),"330");  }  verifyAttributes(retAttrSet);  if (!found) {    retAttrSet.remove(USER_STATUS_ATTRIBUTE);  }  return retAttrSet;}  }
class C{  private static void decodeBase256Segment(BitSource bits,StringBuilder result,Collection<byte[]> byteSegments) throws FormatException {  int codewordPosition=1 + bits.getByteOffset();  int d1=unrandomize255State(bits.readBits(8),codewordPosition++);  int count;  if (d1 == 0) {    count=bits.available() / 8;  } else   if (d1 < 250) {    count=d1;  } else {    count=250 * (d1 - 249) + unrandomize255State(bits.readBits(8),codewordPosition++);  }  if (count < 0) {    throw FormatException.getFormatInstance();  }  byte[] bytes=new byte[count];  for (int i=0; i < count; i++) {    if (bits.available() < 8) {      throw FormatException.getFormatInstance();    }    bytes[i]=(byte)unrandomize255State(bits.readBits(8),codewordPosition++);  }  byteSegments.add(bytes);  try {    result.append(new String(bytes,"ISO8859_1"));  } catch (  UnsupportedEncodingException uee) {    throw new IllegalStateException("Platform does not support required encoding: " + uee);  }}  }
class C{  public void init(Subject subject,Map sharedState,Map options){  System.out.println("LoginModuleSample initialization");}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeTruncatedLengthArrayAsEnumerated() throws Exception {  super.testDecodeTruncatedLengthArrayAsEnumerated();}  }
class C{  @Override protected Class<?> resolveClass(ObjectStreamClass objectStreamClass) throws IOException, ClassNotFoundException {  Class<?> clazz=Class.forName(objectStreamClass.getName(),false,classLoader);  if (clazz != null) {    return clazz;  } else {    return super.resolveClass(objectStreamClass);  }}  }
class C{  void logFailed(String str){  logFailed(str,"LOGIN_FAILED",true,null);}  }
class C{  public ConfigureSalesForceAppsCompleteViewBean(){  super("ConfigureSalesForceAppsComplete");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  private Boolean isIDPFinderForAllSPs(String realm,String idpEntityID) throws SAML2Exception {  String methodName="isIDPFinderForAllSPs";  Boolean isIdpFinderForAllSPsEnabled=false;  try {    String idpFinderForAllSPs=IDPSSOUtil.getAttributeValueFromIDPSSOConfig(realm,idpEntityID,SAML2Constants.ENABLE_PROXY_IDP_FINDER_FOR_ALL_SPS);    if (idpFinderForAllSPs != null && !idpFinderForAllSPs.isEmpty()) {      debugMessage(methodName,"idpFinderForAllSPs is: " + idpFinderForAllSPs);      isIdpFinderForAllSPsEnabled=idpFinderForAllSPs.equalsIgnoreCase("true");    } else     isIdpFinderForAllSPsEnabled=false;  } catch (  Exception ex) {    SAML2Utils.debug.error(methodName + "Unable to get IDP Proxy Finder.",ex);    throw new SAML2Exception(ex);  }  return isIdpFinderForAllSPsEnabled;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  @Fluent public <T>Job on(String event,Handler<Message<T>> handler){  logger.debug("[LOG] On: " + Kue.getCertainJobAddress(event,this));  eventBus.consumer(Kue.getCertainJobAddress(event,this),handler);  return this;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {}  }
class C{  public AddressingFeature(){  this(true,false,Responses.ALL);}  }
class C{  public InternalFrameEvent(JInternalFrame source,int id){  super(source,id);}  }
class C{  private void adjustFooterAndFixOccupiedArea(Rectangle layoutBox){  if (footerRenderer != null) {    footerRenderer.move(0,layoutBox.getHeight());    float footerHeight=footerRenderer.getOccupiedArea().getBBox().getHeight();    occupiedArea.getBBox().moveDown(footerHeight).increaseHeight(footerHeight);  }}  }
class C{  public void testCase4(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=-1;  byte rBytes[]={11,22,33,44,55,66,77,11,22,33};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  Source popImportSource(){  return (Source)m_importSourceStack.pop();}  }
class C{  static void sort(short[] a,int left,int right,short[] work,int workBase,int workLen){  if (right - left > COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR) {    int[] count=new int[NUM_SHORT_VALUES];    for (int i=left - 1; ++i <= right; count[a[i] - Short.MIN_VALUE]++)     ;    for (int i=NUM_SHORT_VALUES, k=right + 1; k > left; ) {      while (count[--i] == 0)       ;      short value=(short)(i + Short.MIN_VALUE);      int s=count[i];      do {        a[--k]=value;      } while (--s > 0);    }  } else {    doSort(a,left,right,work,workBase,workLen);  }}  }
class C{  protected ForkJoinWorkerThread(ForkJoinPool pool){  super("aForkJoinWorkerThread");  this.pool=pool;  this.workQueue=pool.registerWorker(this);}  }
class C{  static String normalizeDN(String orgName){  String orgAttr="";  StringBuilder buf=new StringBuilder(orgName.length());  if (debug.messageEnabled()) {    debug.message("DNMapper.normalizeDN():orgName " + orgName);  }  if (!realmEnabled) {    orgAttr=OrgConfigViaAMSDK.getNamingAttrForOrg();  }  String placeHold=(realmEnabled) ? SMSEntry.ORGANIZATION_RDN : orgAttr;  DN dn=DN.valueOf(orgName);  for (  RDN rdn : dn) {    if (orgName.toLowerCase().startsWith(SMSEntry.SUN_INTERNAL_REALM_PREFIX)) {      buf.append(SMSEntry.ORGANIZATION_RDN);    } else {      buf.append(placeHold);    }    buf.append(SMSEntry.EQUALS).append(rdnValue(rdn)).append(SMSEntry.COMMA);  }  debug.message("DNMapper.normalizeDN():finalorgdn {}",buf);  return buf.toString();}  }
class C{  public static HTMLRenderedFragment newInstance(String serialized){  HTMLRenderedFragment fragment=new HTMLRenderedFragment();  Bundle args=new Bundle();  args.putString(SERIALIZED,serialized);  fragment.setArguments(args);  return fragment;}  }
class C{  public void exec(List<String> args) throws Throwable {  exec(args.toArray(new String[args.size()]));}  }
class C{  public void test_readFully$BII() throws IOException {  byte[] buf=new byte[testLength];  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeBytes(testString);  raf.seek(0);  try {    raf.readFully(null);    fail("Test 1: NullPointerException expected.");  } catch (  NullPointerException e) {  }  raf.readFully(buf,5,testLength - 10);  for (int i=0; i < 5; i++) {    assertEquals("Test 2: Incorrect bytes read;",0,buf[i]);  }  assertEquals("Test 3: Incorrect bytes written or read;",testString.substring(0,testLength - 10),new String(buf,5,testLength - 10));  try {    raf.readFully(buf,3,testLength - 6);    fail("Test 4: EOFException expected.");  } catch (  EOFException e) {  }  try {    raf.readFully(buf,-1,1);    fail("Test 5: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    raf.readFully(buf,0,-1);    fail("Test 6: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    raf.readFully(buf,2,testLength);    fail("Test 7: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  raf.close();  try {    raf.readFully(buf);    fail("Test 8: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public static void removeAttributeSchema(ServiceSchema serviceSchema,String attributeName) throws UpgradeException {  String classMethod="UpgradeUtils:removeAttributeFromSchema: ";  if (debug.messageEnabled()) {    debug.message(classMethod + "Removing attributeschema : " + attributeName+ "from service :"+ serviceSchema.getName());  }  try {    serviceSchema.removeAttributeSchema(attributeName);  } catch (  SMSException sme) {    debug.error(classMethod + "Cannot remove attribute schema for " + serviceSchema.getName(),sme);    throw new UpgradeException(sme.getMessage());  }catch (  SSOException ssoe) {    debug.error(classMethod + "Invalid SSOToken : ",ssoe);    throw new UpgradeException(ssoe.getMessage());  }}  }
class C{  @Override public void onResume(){  mWebView.onResume();  super.onResume();}  }
class C{  public void replaceShutdownListener(ShutdownListener oldListener,ShutdownListener newListener,ShutdownPriority priority){  if (acquireValidLock()) {    try {      removeShutdownListener(oldListener);      if (priority == null) {        addShutdownListener(newListener);      } else {        addShutdownListener(newListener,priority);      }    }  finally {      releaseLockAndNotify();    }  } else {    throw new IllegalMonitorStateException("Failed to acquire lock replacing the ShutdownListener");  }}  }
class C{  public boolean isAttributeNameShown(){  return showAttributeName;}  }
class C{  public Iterator<E> iterator(){  return new Itr();}  }
class C{  public ServiceConfigurationError(String message){  super(message);}  }
class C{  public void addInternalRoutes(ResourceRouter internalRouter){}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  String appName=getStringOptionValue(PARAM_APPL_NAME);  String[] params={realm,appName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SHOW_APPLICATION",params);  try {    Application appl=applicationServiceFactory.create(getAdminSubject(),realm).getApplication(appName);    IOutput writer=getOutputWriter();    if (appl == null) {      Object[] param={appName};      writer.printlnMessage(MessageFormat.format(getResourceString("show-application-not-found"),param));    } else {      displayAttrs(writer,appl);    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_SHOW_APPLICATION",params);  } catch (  EntitlementException ex) {    String[] paramsEx={realm,appName,ex.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_SHOW_APPLICATION",paramsEx);    throw new CLIException(ex,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  public void schedule(TimerTask task,long delay){  if (delay < 0) {    throw new IllegalArgumentException("delay < 0: " + delay);  }  scheduleImpl(task,delay,-1,false);}  }
class C{  public double noise(double x,double y,double z,double frequency,double amplitude,boolean normalized){  double result=0;  double amp=1;  double freq=1;  double max=0;  x*=xScale;  y*=yScale;  z*=zScale;  for (  NoiseGenerator octave : octaves) {    result+=octave.noise(x * freq,y * freq,z * freq) * amp;    max+=amp;    freq*=frequency;    amp*=amplitude;  }  if (normalized) {    result/=max;  }  return result;}  }
class C{  @Override public boolean isOpen(){  return sc.isOpen();}  }
class C{  @JsonCreator public GroupSource(@JsonProperty("groupId") String groupId,@JsonProperty("userId") String userId){  this.groupId=groupId;  this.userId=userId;}  }
class C{  public boolean isClosed(){synchronized (closeLock) {    return closed;  }}  }
class C{  public MonitorMsg createGlobalTopologyMonitorMsg(int sender,int destination) throws InterruptedException {  return createGlobalTopologyMonitorMsg(sender,destination,domainMonitor.recomputeMonitorData());}  }
class C{  public ServiceInformationHolder(){  this(null);}  }
class C{  private void generateSerializationHostileMethods(){  MethodVisitor mv=cw.visitMethod(ACC_PRIVATE + ACC_FINAL,NAME_METHOD_WRITE_OBJECT,DESCR_METHOD_WRITE_OBJECT,null,SER_HOSTILE_EXCEPTIONS);  mv.visitCode();  mv.visitTypeInsn(NEW,NAME_NOT_SERIALIZABLE_EXCEPTION);  mv.visitInsn(DUP);  mv.visitLdcInsn("Non-serializable lambda");  mv.visitMethodInsn(INVOKESPECIAL,NAME_NOT_SERIALIZABLE_EXCEPTION,NAME_CTOR,DESCR_CTOR_NOT_SERIALIZABLE_EXCEPTION,false);  mv.visitInsn(ATHROW);  mv.visitMaxs(-1,-1);  mv.visitEnd();  mv=cw.visitMethod(ACC_PRIVATE + ACC_FINAL,NAME_METHOD_READ_OBJECT,DESCR_METHOD_READ_OBJECT,null,SER_HOSTILE_EXCEPTIONS);  mv.visitCode();  mv.visitTypeInsn(NEW,NAME_NOT_SERIALIZABLE_EXCEPTION);  mv.visitInsn(DUP);  mv.visitLdcInsn("Non-serializable lambda");  mv.visitMethodInsn(INVOKESPECIAL,NAME_NOT_SERIALIZABLE_EXCEPTION,NAME_CTOR,DESCR_CTOR_NOT_SERIALIZABLE_EXCEPTION,false);  mv.visitInsn(ATHROW);  mv.visitMaxs(-1,-1);  mv.visitEnd();}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  out.write(buf,0,count);}  }
class C{  public void step4() throws SyntaxException {  for (  STypeDef typeDef : types.values()) {    if (typeDef instanceof SAnnoDef) {      SAnnoDef annoDef=(SAnnoDef)typeDef;      Class<?> cls;      try {        cls=loadClass(annoDef.fullName());      } catch (      ClassNotFoundException e) {        throw new LtBug(e);      }      for (      SAnnoField f : annoDef.annoFields()) {        try {          Method annoM=cls.getDeclaredMethod(f.name());          try {            Object o=annoM.getDefaultValue();            if (null != o) {              Value value=parseValueFromObject(o);              f.setDefaultValue(value);            }          } catch (          TypeNotPresentException ignore) {          }        } catch (        NoSuchMethodException e) {          throw new LtBug(e);        }      }      parseAnnoValues(annoDef.annos());    }  }  List<STypeDef> typeDefList=new ArrayList<>(typeDefSet);  for (  STypeDef sTypeDef : typeDefList) {    if (sTypeDef instanceof SClassDef) {      SClassDef sClassDef=(SClassDef)sTypeDef;      ClassDef astClass=originalClasses.get(sClassDef.fullName());      ObjectDef astObject=originalObjects.get(sClassDef.fullName());      parseAnnoValues(sClassDef.annos());      SemanticScope scope=new SemanticScope(sTypeDef);      for (      SConstructorDef constructorToFillStatements : sClassDef.constructors()) {        if (!constructorToFillStatements.statements().isEmpty())         continue;        SemanticScope constructorScope=new SemanticScope(scope);        constructorScope.setThis(new Ins.This(sTypeDef));        for (        SParameter param : constructorToFillStatements.getParameters()) {          constructorScope.putLeftValue(param.name(),param);        }        if (defaultParamInvokable.containsKey(constructorToFillStatements)) {          fillDefaultParamMethod(constructorToFillStatements,constructorScope);        } else {          SClassDef parent=sClassDef.parent();          Ins.InvokeSpecial invokeConstructor=null;          AST.Invocation superWithInvocation=(astClass == null) ? astObject.superWithInvocation : astClass.superWithInvocation;          if (null == superWithInvocation) {            for (            SConstructorDef cons : parent.constructors()) {              if (cons.getParameters().size() == 0) {                invokeConstructor=new Ins.InvokeSpecial(new Ins.This(sClassDef),cons,sClassDef.line_col());                break;              }            }          } else {            for (            SConstructorDef cons : parent.constructors()) {              if (cons.getParameters().size() == superWithInvocation.args.size()) {                invokeConstructor=new Ins.InvokeSpecial(new Ins.This(sClassDef),cons,superWithInvocation.line_col());                List<SParameter> parameters=cons.getParameters();                List<Expression> args=superWithInvocation.args;                for (int i=0; i < parameters.size(); ++i) {                  Value v=parseValueFromExpression(args.get(i),parameters.get(i).type(),constructorScope);                  invokeConstructor.arguments().add(v);                }                break;              }            }          }          if (null == invokeConstructor) {            err.SyntaxException("no suitable super constructor to invoke in " + sClassDef,sClassDef.line_col());            return;          }          constructorToFillStatements.statements().add(invokeConstructor);          for (          SParameter param : constructorToFillStatements.getParameters()) {            SFieldDef f=null;            for (            SFieldDef field : sClassDef.fields()) {              if (field.name().equals(param.name())) {                f=field;                break;              }            }            if (f == null)             throw new LtBug("f should not be null");            Ins.PutField putField=new Ins.PutField(f,constructorScope.getThis(),new Ins.TLoad(param,constructorScope,LineCol.SYNTHETIC),LineCol.SYNTHETIC,err);            constructorToFillStatements.statements().add(putField);          }          constructorScope=new SemanticScope(scope);          constructorScope.setThis(new Ins.This(sTypeDef));          for (          SParameter param : constructorToFillStatements.getParameters()) {            constructorScope.putLeftValue(constructorScope.generateTempName(),param);          }          paramValueAvaliable(constructorToFillStatements.getParameters(),constructorToFillStatements.statements(),constructorScope,constructorToFillStatements.line_col());          List<Statement> statements=(astClass == null) ? astObject.statements : astClass.statements;          for (          Statement stmt : statements) {            parseStatement(stmt,VoidType.get(),constructorScope,constructorToFillStatements.statements(),constructorToFillStatements.exceptionTables(),null,null,true);          }        }      }      int methodSize=sClassDef.methods().size();      List<SMethodDef> methods=sClassDef.methods();      for (int i=0; i < methodSize; i++) {        SMethodDef method=methods.get(i);        parseAnnoValues(method.annos());        parseMethod(method,methodToStatements.get(method),scope);      }      if (sClassDef.classType() != SClassDef.FUN) {        List<Statement> statements=(astClass == null) ? astObject.statements : astClass.statements;        SemanticScope staticScope=new SemanticScope(scope);        if (sClassDef.classType() == SClassDef.OBJECT) {          SFieldDef singletonInstanceField=null;          for (          SFieldDef f : sClassDef.fields()) {            if (f.name().equals(CompileUtil.SingletonFieldName)) {              singletonInstanceField=f;              break;            }          }          if (singletonInstanceField == null)           throw new LtBug("object class should have field " + CompileUtil.SingletonFieldName);          Ins.New aNew=new Ins.New(sClassDef.constructors().get(0),LineCol.SYNTHETIC);          Ins.PutStatic ps=new Ins.PutStatic(singletonInstanceField,aNew,LineCol.SYNTHETIC,err);          sClassDef.staticStatements().add(ps);        }        for (        Statement statement : statements) {          if (statement instanceof AST.StaticScope) {            AST.StaticScope sta=(AST.StaticScope)statement;            for (            Statement stmt : sta.statements) {              parseStatement(stmt,VoidType.get(),staticScope,sClassDef.staticStatements(),sClassDef.staticExceptionTable(),null,null,true);            }          }        }      }    } else     if (sTypeDef instanceof SInterfaceDef) {      SInterfaceDef sInterfaceDef=(SInterfaceDef)sTypeDef;      InterfaceDef astInterface=originalInterfaces.get(sInterfaceDef.fullName());      parseAnnoValues(sInterfaceDef.annos());      SemanticScope scope=new SemanticScope(sInterfaceDef);      int methodSize=sInterfaceDef.methods().size();      List<SMethodDef> methods=sInterfaceDef.methods();      for (int i=0; i < methodSize; ++i) {        SMethodDef method=methods.get(i);        parseMethod(method,methodToStatements.get(method),scope);      }      SemanticScope staticScope=new SemanticScope(scope);      for (      Statement statement : astInterface.statements) {        parseStatement(statement,VoidType.get(),staticScope,sInterfaceDef.staticStatements(),sInterfaceDef.staticExceptionTable(),null,null,true);      }    } else     throw new LtBug("wrong STypeDefType " + sTypeDef.getClass());  }}  }
class C{  public boolean validateAttributes(Map attributeSet) throws SMSException {  SMSEntry.validateToken(ssm.getSSOToken());  return (ss.validateAttributes(ssm.getSSOToken(),attributeSet,false,null));}  }
class C{  public SolidLine(float lineWidth){  this.lineWidth=lineWidth;}  }
class C{  public NightModeHelper(Activity activity,int theme,int defaultUiMode){  init(activity,theme,defaultUiMode);}  }
class C{  public Builder structuralClassOID(String strucuralClassOID){  this.structuralClassOID=strucuralClassOID;  return this;}  }
class C{  public float nextTabStop(float x,int tabOffset){  if (getTabSet() == null && StyleConstants.getAlignment(getAttributes()) == StyleConstants.ALIGN_LEFT) {    return getPreTab(x,tabOffset);  }  return super.nextTabStop(x,tabOffset);}  }
class C{  private static void fillMethodCandidates(Class<?> c,Class<?> invoker,String method,Object[] args,List<Method> methodList,boolean onlyStatic){  for (  Method m : c.getDeclaredMethods()) {    if (!m.getName().equals(method))     continue;    if (m.getParameterCount() != args.length)     continue;    if (!LtRuntime.haveAccess(m.getModifiers(),c,invoker))     continue;    if (onlyStatic) {      if (!Modifier.isStatic(m.getModifiers()))       continue;    }    if (canBeCandidate(m.getParameterTypes(),args)) {      methodList.add(m);    }  }}  }
class C{  public void addReturnAttribute(CoreTokenField field){  Reject.ifNull(field);  returnFields.add(field);}  }
class C{  public static int write(Sequence in,int fileType,OutputStream out) throws IOException {  List providers=getMidiFileWriters();  int bytesWritten=-2;  for (int i=0; i < providers.size(); i++) {    MidiFileWriter writer=(MidiFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType,in)) {      bytesWritten=writer.write(in,fileType,out);      break;    }  }  if (bytesWritten == -2) {    throw new IllegalArgumentException("MIDI file type is not supported");  }  return bytesWritten;}  }
class C{  @Override public int read(byte[] buf) throws IOException {  return read(buf,0,buf.length);}  }
class C{  protected boolean isError(final int code){switch (code) {case HTTP_BAD_REQUEST:case HTTP_UNAUTHORIZED:case HTTP_FORBIDDEN:case HTTP_NOT_FOUND:case HTTP_CONFLICT:case HTTP_GONE:case HTTP_UNPROCESSABLE_ENTITY:case HTTP_INTERNAL_ERROR:    return true;default :  return false;}}  }
class C{  public static Map appendMapToMap(Map mapToAdd,Map toMap){  if ((mapToAdd != null) && (toMap != null)) {    Set keySet=mapToAdd.keySet();    Iterator keyIter=keySet.iterator();    while (keyIter.hasNext()) {      String key=(String)keyIter.next();      Set values=(Set)mapToAdd.get(key);      appendElementToMap(key,values,toMap);    }  }  return toMap;}  }
class C{  @Override public Promise<ActionResponse,ResourceException> filterAction(Context context,ActionRequest request,RequestHandler next){  final String resource=ServerContextUtils.getResourceId(request,context);  final String action=ServerContextUtils.getActionString(request);  logAccess(resource,action,context);  return next.handleAction(context,request);}  }
class C{  static ComputedDayOfField ofWeekBasedYearField(WeekFields weekDef){  return new ComputedDayOfField("WeekBasedYear",weekDef,IsoFields.WEEK_BASED_YEARS,FOREVER,ChronoField.YEAR.range());}  }
class C{  public void append(char[] ch,int offset,int length){  if (this.length + length > this.ch.length) {    char[] newch=new char[this.ch.length + length + DEFAULT_SIZE];    System.arraycopy(this.ch,0,newch,0,this.length);    this.ch=newch;  }  System.arraycopy(ch,offset,this.ch,this.length,length);  this.length+=length;}  }
class C{  private void addFocusListener(FocusListener focusListener,Container container){  for (int i=0; i < container.getComponentCount(); i++) {    Component comp=container.getComponent(i);    if (comp instanceof AbstractButton || comp instanceof JTextComponent || comp instanceof JList|| comp instanceof JComboBox|| comp instanceof JTable) {      comp.addFocusListener(focusListener);    } else     if (comp instanceof JPanel || comp instanceof JScrollPane || comp instanceof JViewport) {      addFocusListener(focusListener,(Container)comp);    }  }}  }
class C{  public AttributeModificationException(){  super();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String interfaceName=getStringOptionValue(ARGUMENT_INTERFACE_NAME);  String pluginName=getStringOptionValue(ARGUMENT_PLUGIN_NAME);  String i18nKey=getStringOptionValue(ARGUMENT_I18N_KEY);  String i18nName=getStringOptionValue(ARGUMENT_I18N_NAME);  String className=getStringOptionValue(ARGUMENT_CLASS_NAME);  ServiceManager sm=null;  try {    sm=new ServiceManager(adminSSOToken);  } catch (  SMSException smse) {    throw new CLIException(smse,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException ssoe) {    throw new CLIException(ssoe,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,interfaceName,pluginName,i18nKey,i18nName,className};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_PLUGIN_SCHEMA",params);    Document pluginDoc=createPluginSchemaXML(serviceName,interfaceName,pluginName,i18nKey,i18nName,className);    if (pluginDoc != null) {      sm.addPluginSchema(pluginDoc);      String[] params2={serviceName,pluginName};      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ADD_PLUGIN_SCHEMA",params2);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("add-plugin-schema-succeed"),(Object[])params));    } else {      String[] args={serviceName,pluginName,"Null XML Document"};      debugError("AddPluginSchema.handleRequest:: Null XML Document");      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_PLUGIN_SCHEMA",args);      throw new CLIException("Null XML Document",ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  } catch (  SSOException ssoe) {    String[] args={serviceName,pluginName,ssoe.getMessage()};    debugError("AddPluginSchema.handleRequest",ssoe);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_PLUGIN_SCHEMA",args);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("add-plugin-schema-failed"),(Object[])args));    throw new CLIException(ssoe,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException smse) {    String[] args={serviceName,pluginName,smse.getMessage()};    debugError("AddPluginSchema.handleRequest",smse);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_PLUGIN_SCHEMA",args);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("add-plugin-schema-failed"),(Object[])args));    throw new CLIException(smse,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static Map cloneMap(Map map){  Map clonedMap=null;  if (map != null) {    clonedMap=new HashMap();    Set keys=map.keySet();    Iterator keysIter=keys.iterator();    while (keysIter.hasNext()) {      Object key=keysIter.next();      Object value=map.get(key);      if (value instanceof Set) {        Set values=new HashSet();        values.addAll((Set)value);        clonedMap.put(key,values);      } else {        clonedMap.put(key,value);      }    }  }  return clonedMap;}  }
class C{  public synchronized String encodeMessage(String function,Object[] params){  int index=1;  StringBuilder sb=new StringBuilder(1000);  sb.append(ENVELOPE).append(HEADSTART).append(HEADEND).append(ENV_BODY);  sb.append("<ans1:").append(function).append(" xmlns:ans1=\"http://isp.com/wsdl\">");  for (int i=0; (params != null) && (i < params.length); i++) {    if (params[i] instanceof java.lang.String) {      sb.append(encodeString("String_" + index++,(String)params[i]));    } else     if (params[i] instanceof java.util.Set) {      sb.append(encodeSet("Set_" + index++,(Set)params[i]));    } else     if (params[i] instanceof java.util.Map) {      sb.append(encodeMap("Map_" + index++,(Map)params[i]));    } else     if (params[i] instanceof java.util.List) {      sb.append(encodeList("List_" + index++,(List)params[i]));    } else     if (params[i] instanceof Integer) {      sb.append(encodeInt("int_" + index++,(Integer)params[i]));    } else     if (params[i] instanceof Boolean) {      sb.append(encodeBoolean("boolean_" + index++,(Boolean)params[i]));    } else     if (params[i] == null) {      index++;    } else {      debug.error("SOAPClient: Unknown class: " + params.getClass().getName());    }  }  sb.append("</ans1:").append(function).append(">").append(SUFFIX);  return (sb.toString());}  }
class C{  public Leaves(TreeSpecies species){  this(DEFAULT_TYPE,species,DEFAULT_DECAYABLE);}  }
class C{  public NSObject put(String key,NSObject obj){  if (key == null)   return null;  if (obj == null)   return dict.get(key);  return dict.put(key,obj);}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#ignorableWhitespace: " + start + ", "+ length);  if (m_contentHandler != null) {    m_contentHandler.ignorableWhitespace(ch,start,length);  }}  }
class C{  public void resetNextEntryID(){  nextEntryID.set(1);}  }
class C{  public SignatureVisitor visitInterfaceBound(){  return this;}  }
class C{  private void doAcquireSharedInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public Collection<PdfObject> values(boolean asDirects){  if (asDirects) {    return values();  } else {    return map.values();  }}  }
class C{  private ModifyOperation addAttrEntry(DN dn,String attrName,Object... attrValStrings){  ModifyRequest modifyRequest=Requests.newModifyRequest(dn).addModification(ADD,attrName,attrValStrings);  return getRootConnection().processModify(modifyRequest);}  }
class C{  private void addFQDNDigestMD5() throws ConfigureDSException {  try {    updateConfigEntryWithAttribute(DN_DIGEST_MD5_SASL_MECHANISM,"ds-cfg-server-fqdn",CoreSchema.getDirectoryStringSyntax(),hostName.getValue());  } catch (  final Exception e) {    throw new ConfigureDSException(e,ERR_CONFIGDS_CANNOT_UPDATE_DIGEST_MD5_FQDN.get(e));  }}  }
class C{  public void test_getInstanceLjava_lang_String02(){  try {    TrustManagerFactory.getInstance(null);    fail();  } catch (  NoSuchAlgorithmException expected) {  }catch (  NullPointerException expected) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      TrustManagerFactory.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException was not thrown as expected for algorithm: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public void initialize(Map configParams) throws PolicyException {  if (configParams == null) {    throw (new PolicyException(ResBundleUtils.rbName,"ldapgroups_initialization_failed",null,null));  }  String configuredLdapServer=(String)configParams.get(PolicyConfig.LDAP_SERVER);  if (configuredLdapServer == null) {    debug.error("LDAPGroups.initialize(): failed to get LDAP " + "server name. If you enter more than one server name " + "in the policy config service's Primary LDAP Server "+ "field, please make sure the ldap server name is preceded "+ "with the local server name.");    throw (new PolicyException(ResBundleUtils.rbName,"invalid_ldap_server_host",null,null));  }  ldapServer=configuredLdapServer.toLowerCase();  localDS=PolicyUtils.isLocalDS(ldapServer);  aliasEnabled=Boolean.valueOf((String)configParams.get(PolicyConfig.USER_ALIAS_ENABLED)).booleanValue();  authid=(String)configParams.get(PolicyConfig.LDAP_BIND_DN);  authpw=(String)configParams.get(PolicyConfig.LDAP_BIND_PASSWORD);  if (authpw != null) {    authpw=PolicyUtils.decrypt(authpw);  }  baseDN=(String)configParams.get(PolicyConfig.LDAP_BASE_DN);  groupSearchFilter=(String)configParams.get(PolicyConfig.LDAP_GROUP_SEARCH_FILTER);  String scope=(String)configParams.get(PolicyConfig.LDAP_GROUP_SEARCH_SCOPE);  if (scope.equalsIgnoreCase(LDAP_SCOPE_BASE)) {    groupSearchScope=SearchScope.BASE_OBJECT;  } else   if (scope.equalsIgnoreCase(LDAP_SCOPE_ONE)) {    groupSearchScope=SearchScope.SINGLE_LEVEL;  } else {    groupSearchScope=SearchScope.WHOLE_SUBTREE;  }  groupRDNAttrName=(String)configParams.get(PolicyConfig.LDAP_GROUP_SEARCH_ATTRIBUTE);  userSearchFilter=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_FILTER);  scope=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_SCOPE);  userSearchScope=LDAPUtils.getSearchScope(scope,SearchScope.WHOLE_SUBTREE);  userRDNAttrName=(String)configParams.get(PolicyConfig.LDAP_USER_SEARCH_ATTRIBUTE);  try {    timeLimit=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_TIME_OUT));    maxResults=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_LIMIT));    minPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MIN_SIZE));    maxPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MAX_SIZE));  } catch (  NumberFormatException nfe) {    throw (new PolicyException(nfe));  }  String ssl=(String)configParams.get(PolicyConfig.LDAP_SSL_ENABLED);  if (ssl.equalsIgnoreCase("true")) {    sslEnabled=true;  } else {    sslEnabled=false;  }  Set orgNameSet=(Set)configParams.get(PolicyManager.ORGANIZATION_NAME);  if ((orgNameSet != null) && (!orgNameSet.isEmpty())) {    Iterator items=orgNameSet.iterator();    orgName=(String)items.next();  }  if (debug.messageEnabled()) {    debug.message("LDAPGroups.initialize(): getting params" + "\nldapServer: " + ldapServer + "\nauthid: "+ authid+ "\nbaseDN: "+ baseDN+ "\ngroupSearchFilter: "+ groupSearchFilter+ "\ngroupRDNAttrName: "+ groupRDNAttrName+ "\nuserSearchFilter: "+ userSearchFilter+ "\nuserRDNAttrName: "+ userRDNAttrName+ "\ntimeLimit: "+ timeLimit+ "\nmaxResults: "+ maxResults+ "\nminPoolSize: "+ minPoolSize+ "\nmaxPoolSize: "+ maxPoolSize+ "\nSSLEnabled: "+ sslEnabled+ "\nOrgName: "+ orgName);  }  Options options=Options.defaultOptions().set(REQUEST_TIMEOUT,new Duration((long)timeLimit,TimeUnit.SECONDS));  LDAPConnectionPools.initConnectionPool(ldapServer,authid,authpw,sslEnabled,minPoolSize,maxPoolSize,options);  connPool=LDAPConnectionPools.getConnectionPool(ldapServer);  initialized=true;}  }
class C{  public AESPasswordStorageSchemeTestCase(){  super("cn=AES,cn=Password Storage Schemes,cn=config");}  }
class C{  public boolean newline(){  return append("\n");}  }
class C{  public boolean isMarked(){  return pair.mark;}  }
class C{  private void resetToStream(){  this.m_cdataStartCalled=false;  this.m_disableOutputEscapingStates.clear();  this.m_escaping=true;  this.m_expandDTDEntities=true;  this.m_inDoctype=false;  this.m_ispreserve=false;  this.m_isprevtext=false;  this.m_isUTF8=false;  this.m_lineSep=s_systemLineSep;  this.m_lineSepLen=s_systemLineSep.length;  this.m_lineSepUse=true;  this.m_preserves.clear();  this.m_shouldFlush=true;  this.m_spaceBeforeClose=false;  this.m_startNewLine=false;  this.m_writer_set_by_user=false;}  }
class C{  public static Result newResult(final ResultCode resultCode){  Reject.ifNull(resultCode);  return new ResultImpl(resultCode);}  }
class C{  public int readCompactUnsignedInt(){  long l=readCompactUnsignedLong();  if (l > Integer.MAX_VALUE) {    throw new IllegalStateException(ERR_INVALID_COMPACTED_UNSIGNED_INT.get(Integer.MAX_VALUE,l).toString());  }  return (int)l;}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  if ((this.thickness > 0) && (g instanceof Graphics2D)) {    Graphics2D g2d=(Graphics2D)g;    Color oldColor=g2d.getColor();    g2d.setColor(this.lineColor);    Shape outer;    Shape inner;    int offs=this.thickness;    int size=offs + offs;    if (this.roundedCorners) {      float arc=.2f * offs;      outer=new RoundRectangle2D.Float(x,y,width,height,offs,offs);      inner=new RoundRectangle2D.Float(x + offs,y + offs,width - size,height - size,arc,arc);    } else {      outer=new Rectangle2D.Float(x,y,width,height);      inner=new Rectangle2D.Float(x + offs,y + offs,width - size,height - size);    }    Path2D path=new Path2D.Float(Path2D.WIND_EVEN_ODD);    path.append(outer,false);    path.append(inner,false);    g2d.fill(path);    g2d.setColor(oldColor);  }}  }
class C{  public JSONObject toJSONObject() throws JSONException {  JSONObject jo=new JSONObject();  jo.put("uuid",uuid);  jo.put("pSubjectName",pSubjectName);  if (exclusive) {    jo.put("exclusive",exclusive);  }  return jo;}  }
class C{  public boolean isWritable(String attributeName){  if (writables.contains(attributeName.toLowerCase()))   return true; else   return false;}  }
class C{  public OrderService retrieveOrdersForAccount(String accountId,Handler<AsyncResult<List<Order>>> resultHandler){  delegate.retrieveOrdersForAccount(accountId,resultHandler);  return this;}  }
class C{  public java.lang.String toString(){  String xml=this.toString(true,false);  return xml;}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public static Boolean isStreamingQuoteStoringRequired(){  return QUOTE_STREAMING_DB_STORE_REQD;}  }
class C{  public static boolean isAnonymous() throws IOException {  AnonymousFaceletsTag anonymousTag=new AnonymousFaceletsTag();  return anonymousTag.authorize();}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  public void hide(){  MenuSelectionManager manager=MenuSelectionManager.defaultManager();  MenuElement[] selection=manager.getSelectedPath();  for (int i=0; i < selection.length; i++) {    if (selection[i] == this) {      manager.clearSelectedPath();      break;    }  }  if (selection.length > 0) {    comboBox.repaint();  }}  }
class C{  private void populateOrgProfile() throws AuthException {  try {    inetDomainStatus=LazyConfig.AUTHD.getInetDomainStatus(getOrgDN());    if (!inetDomainStatus) {      logFailed(AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_ORG_INACTIVE,AuthUtils.ERROR_MESSAGE),"ORGINACTIVE");      auditor.auditLoginFailure(this,REALM_INACTIVE);      throw new AuthException(AMAuthErrorCode.AUTH_ORG_INACTIVE,null);    }    OrganizationConfigManager orgConfigMgr=LazyConfig.AUTHD.getOrgConfigManager(getOrgDN());    ServiceConfig svcConfig=orgConfigMgr.getServiceConfig(ISAuthConstants.AUTH_SERVICE_NAME);    Map<String,Set<String>> attrs=svcConfig.getAttributes();    stateless=CollectionHelper.getBooleanMapAttr(attrs,ISAuthConstants.AUTH_STATELESS_SESSIONS,false);    aliasAttrNames=attrs.get(ISAuthConstants.AUTH_ALIAS_ATTR);    identityTypes=attrs.get(ISAuthConstants.AUTH_ID_TYPE_ATTR);    userSessionMapping=attrs.get(ISAuthConstants.USER_SESSION_MAPPING);    userNamingAttr=CollectionHelper.getMapAttr(attrs,ISAuthConstants.AUTH_NAMING_ATTR,"uid");    defaultRoles=attrs.get(ISAuthConstants.AUTH_DEFAULT_ROLE);    String tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.DYNAMIC_PROFILE);    if (tmp.equalsIgnoreCase("true")) {      dynamicProfileCreation=true;    } else     if (tmp.equalsIgnoreCase("ignore")) {      ignoreUserProfile=true;    } else     if (tmp.equalsIgnoreCase("createAlias")) {      createWithAlias=true;      dynamicProfileCreation=true;    }    tmp=CollectionHelper.getMapAttr(attrs,Constants.ZERO_PAGE_LOGIN_ENABLED);    boolean zplEnabled=Boolean.valueOf(tmp);    Set<String> zplWhitelist=attrs.get(Constants.ZERO_PAGE_LOGIN_WHITELIST);    if (zplWhitelist == null) {      zplWhitelist=Collections.emptySet();    }    boolean allowZPLWithoutReferer=CollectionHelper.getBooleanMapAttr(attrs,Constants.ZERO_PAGE_LOGIN_ALLOW_MISSING_REFERER,true);    this.zeroPageLoginConfig=new ZeroPageLoginConfig(zplEnabled,zplWhitelist,allowZPLWithoutReferer);    AMAuthenticationManager authManager=new AMAuthenticationManager(LazyConfig.AUTHD.getSSOAuthSession(),getOrgDN());    domainAuthenticators=authManager.getAllowedModuleNames();    if (domainAuthenticators == null) {      domainAuthenticators=Collections.emptySet();    }    defaultAuthLevel=CollectionHelper.getMapAttr(attrs,ISAuthConstants.DEFAULT_AUTH_LEVEL,LazyConfig.AUTHD.defaultAuthLevel);    localeContext.setOrgLocale(getOrgDN());    Set<String> orgSuccessLoginURLSet=attrs.get(ISAuthConstants.LOGIN_SUCCESS_URL);    if (orgSuccessLoginURLSet == null) {      orgSuccessLoginURLSet=Collections.emptySet();    }    clientOrgSuccessLoginURL=getRedirectUrl(orgSuccessLoginURLSet);    defaultOrgSuccessLoginURL=tempDefaultURL;    Set<String> orgFailureLoginURLSet=attrs.get(ISAuthConstants.LOGIN_FAILURE_URL);    if (orgFailureLoginURLSet == null) {      orgFailureLoginURLSet=Collections.emptySet();    }    clientOrgFailureLoginURL=getRedirectUrl(orgFailureLoginURLSet);    defaultOrgFailureLoginURL=tempDefaultURL;    orgAuthConfig=CollectionHelper.getMapAttr(attrs,ISAuthConstants.AUTHCONFIG_ORG);    orgAdminAuthConfig=CollectionHelper.getMapAttr(attrs,ISAuthConstants.AUTHCONFIG_ADMIN);    orgPostLoginClassSet=attrs.get(ISAuthConstants.POST_LOGIN_PROCESS);    if (orgPostLoginClassSet == null) {      orgPostLoginClassSet=Collections.emptySet();    }    tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.MODULE_BASED_AUTH);    if (tmp != null) {      if (tmp.equalsIgnoreCase("false")) {        enableModuleBasedAuth=false;      }    }    tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.LOGIN_FAILURE_LOCKOUT);    if (tmp != null) {      if (tmp.equalsIgnoreCase("true")) {        setLoginFailureLockoutMode(true);      }    }    tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.LOGIN_FAILURE_STORE_IN_DS);    if (tmp != null) {      if (tmp.equalsIgnoreCase("false")) {        setLoginFailureLockoutStoreInDS(false);      }    }    tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.LOCKOUT_DURATION);    if (tmp != null) {      try {        setLoginFailureLockoutDuration(Long.parseLong(tmp));      } catch (      NumberFormatException e) {        DEBUG.error("auth-lockout-duration bad format.");      }      setLoginFailureLockoutDuration(getLoginFailureLockoutDuration() * 60 * 1000);    }    tmp=Misc.getMapAttr(attrs,ISAuthConstants.LOCKOUT_MULTIPLIER);    if (tmp != null) {      try {        setLoginFailureLockoutMultiplier(Integer.parseInt(tmp));      } catch (      NumberFormatException e) {        DEBUG.error("auth-lockout-multiplier bad format.");      }    }    tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.LOGIN_FAILURE_COUNT);    if (tmp != null) {      try {        setLoginFailureLockoutCount(Integer.parseInt(tmp));      } catch (      NumberFormatException e) {        DEBUG.error("auth-lockout-count bad format.");      }    }    tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.LOGIN_FAILURE_DURATION);    if (tmp != null) {      try {        setLoginFailureLockoutTime(Long.parseLong(tmp));      } catch (      NumberFormatException e) {        DEBUG.error("auth-login-failure-duration bad format.");      }      setLoginFailureLockoutTime(getLoginFailureLockoutTime() * 60 * 1000);    }    tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.LOCKOUT_WARN_USER);    if (tmp != null) {      try {        setLoginLockoutUserWarning(Integer.parseInt(tmp));      } catch (      NumberFormatException e) {        DEBUG.error("auth-lockout-warn-user bad format.");      }    }    setLoginLockoutNotification(CollectionHelper.getMapAttr(attrs,ISAuthConstants.LOCKOUT_EMAIL));    tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.USERNAME_GENERATOR);    if (tmp != null) {      setUserIDGeneratorEnabled(Boolean.valueOf(tmp));    }    tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.TWO_FACTOR_AUTH_MANDATORY);    if (tmp != null) {      setMandatory2FAValue(tmp);    }    setUserIDGeneratorClassName(CollectionHelper.getMapAttr(attrs,ISAuthConstants.USERNAME_GENERATOR_CLASS));    tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.LOCKOUT_ATTR_NAME);    setLoginLockoutAttrName(tmp);    tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.LOCKOUT_ATTR_VALUE);    setLoginLockoutAttrValue(tmp);    setInvalidAttemptsDataAttrName(CollectionHelper.getMapAttr(attrs,ISAuthConstants.INVALID_ATTEMPTS_DATA_ATTR_NAME));    if (DEBUG.messageEnabled()) {      DEBUG.message("Getting Org Profile: " + orgDN + "\nlocale->"+ localeContext.getLocale()+ "\ncharset->"+ localeContext.getMIMECharset()+ "\ndynamicProfileCreation->"+ dynamicProfileCreation+ "\ndefaultAuthLevel->"+ defaultAuthLevel+ "\norgSucessLoginURLSet->"+ orgSuccessLoginURLSet+ "\norgFailureLoginURLSet->"+ orgFailureLoginURLSet+ "\nclientSuccessLoginURL ->"+ clientOrgSuccessLoginURL+ "\ndefaultSuccessLoginURL ->"+ defaultOrgSuccessLoginURL+ "\norgPostLoginClassSet ->"+ orgPostLoginClassSet+ "\norgAuthConfig ->"+ orgAuthConfig+ "\norgAdminAuthConfig ->"+ orgAdminAuthConfig+ "\nclientFailureLoginURL ->"+ clientOrgFailureLoginURL+ "\ndefaultFailureLoginURL ->"+ defaultOrgFailureLoginURL+ "\nenableModuleBasedAuth ->"+ enableModuleBasedAuth+ "\nloginFailureLockoutMode->"+ isLoginFailureLockoutMode()+ "\nloginFailureLockoutStoreInDS->"+ isLoginFailureLockoutStoreInDS()+ "\nloginFailureLockoutCount->"+ getLoginFailureLockoutCount()+ "\nloginFailureLockoutTime->"+ getLoginFailureLockoutTime()+ "\nloginLockoutUserWarning->"+ getLoginLockoutUserWarning()+ "\nloginLockoutNotification->"+ getLoginLockoutNotification()+ "\ninvalidAttemptsDataAttrName->"+ getInvalidAttemptsDataAttrName()+ "\nzeroPageLoginConfig->"+ zeroPageLoginConfig+ "\nidentityTypes->"+ identityTypes+ "\naliasAttrNames ->"+ aliasAttrNames);    }  } catch (  AuthException ae) {    DEBUG.error("Error in populateOrgProfile",ae);    throw new AuthException(ae);  }catch (  Exception ex) {    DEBUG.error("Error in populateOrgProfile",ex);    throw new AuthException(AMAuthErrorCode.AUTH_ERROR,null);  }}  }
class C{  public StatusCodeImpl(){  isMutable=true;}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  public StandardSessionFacade(HttpSession session){  this.session=session;}  }
class C{  public Object clone(){  AuthenticateToServiceCondition theClone=null;  try {    theClone=(AuthenticateToServiceCondition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }    theClone.authenticateToService=authenticateToService;    theClone.realmEmpty=realmEmpty;  }  return theClone;}  }
class C{  private static int serviceState(PrintStream out,PrintStream err){  String serviceName=null;  String serverRoot=getServerRoot();  String[] cmd=new String[]{getBinaryFullPath(),"state",serverRoot,DEBUG_OPTION};  try {    int resultCode=-1;    Process process=new ProcessBuilder(cmd).start();    BufferedReader stdout=new BufferedReader(new InputStreamReader(process.getInputStream()));    boolean processDone=false;    String s;    while (!processDone) {      try {        resultCode=process.exitValue();        processDone=true;      } catch (      Throwable t) {      }      while ((s=stdout.readLine()) != null) {        if (s.trim().length() != 0) {          serviceName=s;        }      }    }switch (resultCode) {case 0:      printWrappedText(out,INFO_WINDOWS_SERVICE_ENABLED.get(serviceName));    return SERVICE_STATE_ENABLED;case 1:  printWrappedText(out,INFO_WINDOWS_SERVICE_DISABLED.get());return SERVICE_STATE_DISABLED;case 2:printWrappedText(err,ERR_WINDOWS_SERVICE_STATE_ERROR.get());return SERVICE_STATE_ERROR;default :printWrappedText(err,ERR_WINDOWS_SERVICE_STATE_ERROR.get());return SERVICE_STATE_ERROR;}} catch (Throwable t) {printWrappedText(err,ERR_WINDOWS_SERVICE_STATE_ERROR.get());printWrappedText(err,t.toString());return SERVICE_STATE_ERROR;}}  }
class C{  protected void isTextWellFormed(Text node){  Character invalidChar=isWFXMLChar(node.getData());  if (invalidChar != null) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_TEXT,new Object[]{Integer.toHexString(Character.getNumericValue(invalidChar.charValue()))});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));    }  }}  }
class C{  public ActionImpl(){}  }
class C{  void printHeaders(PrintStream ps) throws IOException {  if ((testNum < -1) || (testNum > Support_TestWebData.tests.length - 1)) {    return;  }  SimpleDateFormat df=new SimpleDateFormat("EE, dd MMM yyyy HH:mm:ss");  psPrint(ps,"Server: TestWebServer" + mPort);  psWriteEOL(ps);  psPrint(ps,"Date: " + df.format(new Date()));  psWriteEOL(ps);  psPrint(ps,"Connection: " + ((keepAlive) ? "Keep-Alive" : "Close"));  psWriteEOL(ps);  if (redirectCode == -1) {    if (testNum == -1) {      if (!Support_TestWebData.test0DataAvailable) {        log("testdata was not initilaized");        return;      }      if (chunked) {        psPrint(ps,"Transfer-Encoding: chunked");      } else {        psPrint(ps,"Content-length: " + Support_TestWebData.test0Data.length);      }      psWriteEOL(ps);      psPrint(ps,"Last Modified: " + (new Date(Support_TestWebData.test0Params.testLastModified)));      psWriteEOL(ps);      psPrint(ps,"Content-type: " + Support_TestWebData.test0Params.testType);      psWriteEOL(ps);      if (Support_TestWebData.testParams[testNum].testExp > 0) {        long exp;        exp=Support_TestWebData.testParams[testNum].testExp;        psPrint(ps,"expires: " + df.format(exp) + " GMT");        psWriteEOL(ps);      }    } else     if (!Support_TestWebData.testParams[testNum].testDir) {      if (chunked) {        psPrint(ps,"Transfer-Encoding: chunked");      } else {        psPrint(ps,"Content-length: " + Support_TestWebData.testParams[testNum].testLength);      }      psWriteEOL(ps);      psPrint(ps,"Last Modified: " + (new Date(Support_TestWebData.testParams[testNum].testLastModified)));      psWriteEOL(ps);      psPrint(ps,"Content-type: " + Support_TestWebData.testParams[testNum].testType);      psWriteEOL(ps);      if (Support_TestWebData.testParams[testNum].testExp > 0) {        long exp;        exp=Support_TestWebData.testParams[testNum].testExp;        psPrint(ps,"expires: " + df.format(exp) + " GMT");        psWriteEOL(ps);      }    } else {      psPrint(ps,"Content-type: text/html");      psWriteEOL(ps);    }  } else {    psPrint(ps,"Content-length: " + (Support_TestWebData.testServerResponse[Support_TestWebData.REDIRECT_301]).length());    psWriteEOL(ps);    psWriteEOL(ps);  }  log("Headers sent");}  }
class C{  private void deleteRecursively(File file) throws ApplicationException {  deleteRecursively(file,null);}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws SAXException {  String msg="";  if (!(handler.getElemTemplateElement() instanceof Stylesheet)) {    msg="func:function element must be top level.";    handler.error(msg,new SAXException(msg));  }  super.startElement(handler,uri,localName,rawName,attributes);  String val=attributes.getValue("name");  int indexOfColon=val.indexOf(":");  if (indexOfColon > 0) {  } else {    msg="func:function name must have namespace";    handler.error(msg,new SAXException(msg));  }}  }
class C{  public void copyTo(OutputStream outputStream) throws IOException {  outputStream.write(bytes,0,contentLength);}  }
class C{  public void paintMenuBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public double dot(Pnt p){  int len=dimCheck(p);  double sum=0;  for (int i=0; i < len; i++)   sum+=this.coordinates[i] * p.coordinates[i];  return sum;}  }
class C{  public Bounds(String reason){  super(reason);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void notationDecl(String name,String publicId,String systemId){}  }
class C{  public StringBuilder encodeMessage(StringBuilder retval){  if (requestLine != null) {    this.setRequestLineDefaults();    requestLine.encode(retval);    encodeSIPHeaders(retval);  } else   if (this.isNullRequest()) {    retval.append("\r\n\r\n");  } else   retval=encodeSIPHeaders(retval);  return retval;}  }
class C{  private void checkOpenAndCreate(boolean create) throws SocketException {  if (isClosed()) {    throw new SocketException("Socket is closed");  }  if (!create) {    if (!isConnected()) {      throw new SocketException("Socket is not connected");    }    return;  }  if (isCreated) {    return;  }synchronized (this) {    if (isCreated) {      return;    }    try {      impl.create(true);    } catch (    SocketException e) {      throw e;    }catch (    IOException e) {      throw new SocketException(e.toString());    }    isCreated=true;  }}  }
class C{  protected void disableOpenShiftFeatures(Controller controller){  this.processTemplatesLocally=true;  controller.setSupportOAuthClients(false);  controller.setProcessTemplatesLocally(true);}  }
class C{  public void dispatch(UnsolicitedNotificationListener listener){  listener.notificationReceived(this);}  }
class C{  boolean isUp(String serverId){  return isUp(servers,serverId);}  }
class C{  void dndDone(){  cancelDropTimer();  dropTimer=null;}  }
class C{  public PluginResult.PreParse invokePreParseAbandonPlugins(PreParseAbandonOperation abandonOperation){  PluginResult.PreParse result=null;  for (  DirectoryServerPlugin p : preParseAbandonPlugins) {    if (isInternalOperation(abandonOperation,p)) {      continue;    }    try {      result=p.doPreParse(abandonOperation);    } catch (    Exception e) {      return handlePreParseException(e,abandonOperation,p);    }    if (result == null) {      return handlePreParseResult(abandonOperation,p);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PreParse.continueOperationProcessing();  }  return result;}  }
class C{  public synchronized void removeConsumer(ImageConsumer ic){  ics.removeElement(ic);}  }
class C{  private void loadJwtSession(Request request){  Cookie cookie=findJwtSessionCookie(request);  if (cookie != null) {    try {      EncryptedThenSignedJwt jwt=factory.reconstruct(cookie.getValue(),EncryptedThenSignedJwt.class);      if (!jwt.verify(signingHandler)) {        dirty=true;        logger.warn("The session content will be discarded because OpenIG cannot verify " + "the JWT signature from Cookie '{}'.  The incoming session might " + "be forged or come from an older version of OpenIG.",cookieName);        return;      }      jwt.decrypt(pair.getPrivate());      JwtClaimsSet claimsSet=jwt.getClaimsSet();      for (      String key : claimsSet.keys()) {        super.put(key,claimsSet.getClaim(key));      }      Number expiryTime=(Number)get(IG_EXP_SESSION_KEY);      if (expiryTime != null) {        if (isExpired(expiryTime)) {          logger.debug("The JWT Session Cookie has expired");          clear();        }      } else {        put(IG_EXP_SESSION_KEY,getNewExpiryTime());      }    } catch (    JweDecryptionException e) {      dirty=true;      logger.warn("The JWT Session Cookie '{}' could not be decrypted. This " + "may be because temporary encryption keys have been used or if the " + "configured encryption keys have changed since the JWT Session Cookie "+ "was created",cookieName,e);    }catch (    Exception e) {      dirty=true;      logger.warn("Cannot rebuild JWT Session from Cookie '{}'",cookieName,e);    }  }}  }
class C{  public static void main(final String[] args){  System.err.println(NumbersToWords.convert(45233));}  }
class C{  public static boolean isShouldHideInput(View v,MotionEvent event){  if (v != null && (v instanceof EditText)) {    int[] l={0,0};    v.getLocationInWindow(l);    int left=l[0], top=l[1], bottom=top + v.getHeight(), right=left + v.getWidth();    return !(event.getX() > left && event.getX() < right && event.getY() > top && event.getY() < bottom);  }  return false;}  }
class C{  public ImmutableList<A> prepend(final A x){  return new ImmutableList<>(x,this);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.FNElement createFNElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.FNElementImpl();}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptionPropertyType createEncryptionPropertyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptionPropertyTypeImpl();}  }
class C{  private boolean conditionCH1(String value,int index){  return ((contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) || contains(value,index - 2,6,"ORCHES","ARCHIT","ORCHID") || contains(value,index + 2,1,"T","S")|| ((contains(value,index - 1,1,"A","O","U","E") || index == 0) && (contains(value,index + 2,1,L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));}  }
class C{  @Override public void update(){  if (spriteFrame == null)   return;  if (height > 0) {    spriteFrame.setFitHeight(height);    height-=heightDelta;    spriteFrame.setTranslateY(spriteFrame.getTranslateY() + heightDelta);switch (frameCounter++) {case 0:      spriteFrame.setImage(playerStates.get(1));    break;case 10:  spriteFrame.setImage(playerStates.get(2));break;case 20:spriteFrame.setImage(playerStates.get(3));break;case 30:spriteFrame.setImage(playerStates.get(4));frameCounter=-1;break;}} else {spriteFrame.setImage(null);spriteFrame=null;playerStates=null;spriteBounds=null;xPos=yPos=height=heightDelta=0;}}  }
class C{  public CloneNotSupportedException(){  super();}  }
class C{  static boolean ensureParentsExist(File f){  final File parent=f.getParentFile();  return parent.exists() || parent.mkdirs();}  }
class C{  public static boolean isCookieHttpOnly(){  return cookieHttpOnly;}  }
class C{  public void diff(Polynomial25519 other){  for (int i=0; i < 10; i++) {    c[i]-=other.c[i];  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String value;  doc=(Document)load("hc_staff",true);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(3);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("class");  streetAttr.setValue("Y&ent1;");  value=streetAttr.getValue();  assertEquals("value","Y&ent1;",value);  value=streetAttr.getNodeValue();  assertEquals("nodeValue","Y&ent1;",value);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.JAPANESE_DATE_TYPE,this);}  }
class C{  public V computeIfPresent(K key,BiFunction<? super K,? super V,? extends V> remappingFunction){  if (key == null || remappingFunction == null)   throw new NullPointerException();  Node<K,V> n;  Object v;  while ((n=findNode(key)) != null) {    if ((v=n.value) != null) {      @SuppressWarnings("unchecked") V vv=(V)v;      V r=remappingFunction.apply(key,vv);      if (r != null) {        if (n.casValue(vv,r))         return r;      } else       if (doRemove(key,vv) != null)       break;    }  }  return null;}  }
class C{  private static void stackTraceToString(StringBuilder buffer,Throwable t){  if (t == null) {    return;  }  buffer.append(t);  for (  StackTraceElement e : t.getStackTrace()) {    buffer.append(EOL);    buffer.append("  ");    buffer.append(e.getClassName());    buffer.append(".");    buffer.append(e.getMethodName());    buffer.append("(");    buffer.append(e.getFileName());    buffer.append(":");    buffer.append(e.getLineNumber());    buffer.append(")");  }  while (t.getCause() != null) {    t=t.getCause();    buffer.append(EOL);    buffer.append("Caused by ");    buffer.append(t);    for (    StackTraceElement e : t.getStackTrace()) {      buffer.append(EOL);      buffer.append("  ");      buffer.append(e.getClassName());      buffer.append(".");      buffer.append(e.getMethodName());      buffer.append("(");      buffer.append(e.getFileName());      buffer.append(":");      buffer.append(e.getLineNumber());      buffer.append(")");    }  }  buffer.append(EOL);}  }
class C{  @Override public int hashCode(){  return ((int)(seconds ^ (seconds >>> 32))) + (51 * nanos);}  }
class C{  public LogRetentionPolicyConfigManager(ServerContext serverContext){  this.serverContext=serverContext;}  }
class C{  public INV_IDENT(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public int nextInt(){  return nextInt(defaultRadix);}  }
class C{  public void testToBigIntegerPos1(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+21";  BigInteger bNumber=new BigInteger("123809648392384754573567356745735635678902957849027687");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  ProcessorCharacters charProcessor=(ProcessorCharacters)handler.getProcessorFor(null,"text()","text");  charProcessor.setXslTextElement((ElemText)elem);  ElemTemplateElement parent=handler.getElemTemplateElement();  parent.appendChild(elem);  elem.setDOMBackPointer(handler.getOriginatingNode());}  }
class C{  public Object clone(){  try {    DigitList other=(DigitList)super.clone();    char[] newDigits=new char[digits.length];    System.arraycopy(digits,0,newDigits,0,digits.length);    other.digits=newDigits;    other.tempBuffer=null;    return other;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public RemoteHttpServletResponse(HttpServletResponse response){  super(response);}  }
class C{  public EtchedBorder(Color highlight,Color shadow){  this(LOWERED,highlight,shadow);}  }
class C{  public PasswordModifyExtendedOperation(){  super(newHashSet(OID_LDAP_NOOP_OPENLDAP_ASSIGNED,OID_PASSWORD_POLICY_CONTROL));}  }
class C{  public boolean recalculate_length_violations(){  boolean result=false;  for (int i=0; i < net_incompletes.length; ++i) {    if (net_incompletes[i].calc_length_violation()) {      result=true;    }  }  return result;}  }
class C{  public Mp4TagReverseDnsField(Mp4BoxHeader parentHeader,ByteBuffer data) throws UnsupportedEncodingException {  super(parentHeader,data);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  try {    SerializationHandler rth=transformer.getResultTreeHandler();    if (m_disableOutputEscaping) {      rth.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");    }    rth.characters(m_ch,0,m_ch.length);    if (m_disableOutputEscaping) {      rth.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");    }  } catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  @Override public Script parse(GroovyCodeSource codeSource) throws CompilationFailedException {  Script s=super.parse(codeSource);  if (execution != null)   execution.loadedScripts.put(s.getClass().getName(),codeSource.getScriptText());  prepareScript(s);  return s;}  }
class C{  public void initializeProperties(String propertyName,String propertyValue){  Properties newProps=new Properties();  newProps.putAll(systemConfigProps);  newProps.put(propertyName,propertyValue);  systemConfigProps=newProps;}  }
class C{  @Override public AsyncContext startAsync() throws IllegalStateException {  return request.startAsync();}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return null;}  }
class C{  @Override public void add(Privilege privilege) throws EntitlementException {  super.add(privilege);  PolicyDataStore pdb=PolicyDataStore.getInstance();  String currentRealm=getRealm();  pdb.addPolicy(getAdminSubject(),currentRealm,privilege);  notifyPrivilegeChanged(currentRealm,null,privilege,PolicyEventType.CREATE);}  }
class C{  private static final boolean compareAndSetNext(Node node,Node expect,Node update){  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);}  }
class C{  public final void errPrint(final LocalizableMessage msg){  getErrStream().print(wrap(msg));}  }
class C{  @Override public boolean equals(Object obj){  return (obj instanceof MethodExpressionImpl && obj.hashCode() == this.hashCode());}  }
class C{  public boolean keepProcessingTemplateFile(){  return keepProcessingTemplateFile;}  }
class C{  private boolean areGroupAndGenerationIdOk(int fakeRsGid,long fakeRsGenId){  return fakeRsGid != -1 && fakeRsGenId != -1L && fakeRsGid == DEFAULT_GID && fakeRsGenId == DEFAULT_GENID;}  }
class C{  public int size(){  return al.size();}  }
class C{  public void popContext(){  contexts[contextPos].clear();  contextPos--;  if (contextPos < 0) {    throw new EmptyStackException();  }  currentContext=contexts[contextPos];}  }
class C{  public AuthorityKeyIdentifier(byte[] keyIdentifier){  this.keyidentifier=new DEROctetString(keyIdentifier);  this.certissuer=null;  this.certserno=null;}  }
class C{  void importMacKeyEntry(Entry entry) throws CryptoManagerException {  if (!entry.hasObjectClass(ocMacKey)) {    return;  }  try {    String keyID=entry.parseAttribute(ATTR_CRYPTO_KEY_ID).asString();    int keyLengthBits=entry.parseAttribute(ATTR_CRYPTO_KEY_LENGTH_BITS).asInteger();    String algorithm=entry.parseAttribute(ATTR_CRYPTO_MAC_ALGORITHM_NAME).asString();    String compromisedTime=entry.parseAttribute(ATTR_CRYPTO_KEY_COMPROMISED_TIME).asString();    boolean isCompromised=compromisedTime != null;    Set<String> symmetricKeys=entry.parseAttribute(ATTR_CRYPTO_SYMMETRIC_KEY).asSetOfString();    SecretKey secretKey=decodeSymmetricKeyAttribute(symmetricKeys);    if (secretKey != null) {      macCryptoManager.importMacKeyEntry(keyID,algorithm,secretKey,keyLengthBits,isCompromised);      return;    }    String symmetricKey=getSymmetricKey(symmetricKeys);    if (symmetricKey == null) {      throw new CryptoManagerException(ERR_CRYPTOMGR_IMPORT_KEY_ENTRY_FAILED_TO_DECODE.get(entry.getName()));    }    secretKey=decodeSymmetricKeyAttribute(symmetricKey);    macCryptoManager.importMacKeyEntry(keyID,algorithm,secretKey,keyLengthBits,isCompromised);    writeValueToEntry(entry,symmetricKey);  } catch (  CryptoManagerException e) {    throw e;  }catch (  Exception ex) {    logger.traceException(ex);    throw new CryptoManagerException(ERR_CRYPTOMGR_IMPORT_KEY_ENTRY_FAILED_OTHER.get(entry.getName(),ex.getMessage()),ex);  }}  }
class C{  private String findAlias(String varName){  if (aliases == null)   return varName;  String alias=aliases.get(varName);  if (alias == null) {    return varName;  }  return alias;}  }
class C{  public String toPattern(){  return pattern;}  }
class C{  private void scrollBack(int headerVisible,int footerVisible){synchronized (lockSpring) {    mIsScrollBack=true;    isSpringFirstValue=true;    mRecyclerView.stopScroll();    if (headerVisible > 0) {      startSpringScroll(headerVisible);    } else {      startSpringScroll(footerVisible);    }  }}  }
class C{  public void testNonRFC3261CanceledInvite(){  try {    Request invite=createRiInviteRequest(null,null,null);    ViaHeader topVia=(ViaHeader)invite.getHeader("Via");    topVia.setBranch("non-rfc3261");    SipEventCollector responseCollector=new SipEventCollector();    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    ClientTransaction riInviteCt;    try {      eventCollector.collectRequestEvent(tiSipProvider);      riInviteCt=riSipProvider.getNewClientTransaction(invite);      riInviteCt.sendRequest();    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    RequestEvent inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (inviteReceivedEvent == null || inviteReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The initial invite request was not received by the TI!");    ServerTransaction tran=null;    try {      tran=tiSipProvider.getNewServerTransaction(inviteReceivedEvent.getRequest());    } catch (    Exception ex) {      ex.printStackTrace();      fail(ex.getClass().getName() + "was thrown while trying to " + "create the server transaction");    }    assertNotNull("tiSipProvider.getNewServerTransaction() returned null",tran);    waitForMessage();    assertEquals(TransactionState.PROCEEDING,tran.getState());    ResponseEvent responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No TRYING response has been sent by the TI upon reception " + "of an INVITE request",responseEvent);    assertTrue("A response different from 100 was sent by the TI upon " + "reception of INVITE",Response.TRYING == responseEvent.getResponse().getStatusCode());    Response ringing=null;    try {      ringing=tiMessageFactory.createResponse(Response.RINGING,tran.getRequest());      ((ToHeader)ringing.getHeader(ToHeader.NAME)).setTag(Integer.toString(hashCode()));      addStatus(tran.getRequest(),ringing);      ringing.setHeader(createTiContact());    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a ringing " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      tran.sendResponse(ringing);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a RINGING response");    }    assertEquals("The Transaction did not remain PROCEEDING after transmitting a RINGING response",TransactionState.PROCEEDING,tran.getState());    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The RINGING response was not received by the RI",responseEvent);    assertTrue("A response different from RINGING was sent by the TI",Response.RINGING == responseEvent.getResponse().getStatusCode());    Request riCancel=riInviteCt.createCancel();    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(riCancel);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send CANCEL request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    RequestEvent cancelReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (cancelReceivedEvent == null || cancelReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The CANCEL request was not received by the TI!");    assertEquals(tran.getBranchId(),cancelReceivedEvent.getServerTransaction().getBranchId());    Response cancelOK;    try {      cancelOK=tiMessageFactory.createResponse(Response.OK,cancelReceivedEvent.getRequest());      addStatus(cancelReceivedEvent.getRequest(),cancelOK);    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a OK " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      cancelReceivedEvent.getServerTransaction().sendResponse(cancelOK);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a CANCEL OK response");    }    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The CANCEL OK response was not received by the RI",responseEvent);    assertTrue("A response different from OK was sent by the TI",Response.OK == responseEvent.getResponse().getStatusCode());    Response reqTerminated=null;    try {      reqTerminated=tiMessageFactory.createResponse(Response.REQUEST_TERMINATED,tran.getRequest());      addStatus(tran.getRequest(),reqTerminated);    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a req_terminated " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      tran.sendResponse(reqTerminated);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a REQUEST_TERMINATED response");    }    assertEquals("The Transaction did not remain COMPLETED after transmitting a REQUEST_TERMINATED response",TransactionState.COMPLETED,tran.getState());    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The REQUEST_TERMINATED response was not received by the RI",responseEvent);    assertTrue("A response different from REQUEST_TERMINATED was sent by the TI",Response.REQUEST_TERMINATED == responseEvent.getResponse().getStatusCode());    assertEquals("The ServerTransaction did not pas into the confirmed state" + "after receiving an ACK.",TransactionState.CONFIRMED,tran.getState());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.MetadataElement createMetadataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.MetadataElementImpl();}  }
class C{  public DottedLine(){}  }
class C{  public X509Certificate generate(PrivateKey key,SecureRandom random) throws CertificateEncodingException, IllegalStateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  TBSCertificate tbsCert=tbsGen.generateTBSCertificate();  byte[] signature;  try {    signature=X509Util.calculateSignature(sigOID,signatureAlgorithm,key,random,tbsCert);  } catch (  IOException e) {    throw new ExtCertificateEncodingException("exception encoding TBS cert",e);  }  return generateJcaObject(tbsCert,signature);}  }
class C{  public void testCase11(){  byte aBytes[]={0};  byte bBytes[]={15,48,-29,7,98,-1,39,-128};  int aSign=0;  int bSign=-1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public static void sendResponse(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String acsBinding,String spEntityID,String idpEntityID,String idpMetaAlias,String realm,String relayState,String acsURL,Response res,Object session) throws SAML2Exception {  String classMethod="IDPSSOUtil.sendResponse: ";  String nameIDString=SAML2Utils.getNameIDStringFromResponse(res);  Map props=new HashMap();  props.put(LogUtil.NAME_ID,nameIDString);  if (acsBinding.equals(SAML2Constants.HTTP_POST)) {    boolean signAssertion=true;    boolean signResponse=SAML2Utils.wantPOSTResponseSigned(realm,spEntityID,SAML2Constants.SP_ROLE);    if (signResponse) {      signAssertion=wantAssertionsSigned(spEntityID,realm);    }    signAndEncryptResponseComponents(realm,spEntityID,idpEntityID,res,signAssertion);    if (signResponse) {      signResponse(realm,idpEntityID,res);    }    String resMsg=res.toXMLString(true,true);    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message(classMethod + "SAML Response content :\n" + resMsg);    }    String encodedResMsg=SAML2Utils.encodeForPOST(resMsg);    String[] logdata1={spEntityID,idpMetaAlias,resMsg};    LogUtil.access(Level.INFO,LogUtil.POST_RESPONSE,logdata1,session,props);    try {      SAML2Utils.postToTarget(request,response,"SAMLResponse",encodedResMsg,"RelayState",relayState,acsURL);    } catch (    SAML2Exception saml2E) {      String[] data={acsURL};      LogUtil.error(Level.INFO,LogUtil.POST_TO_TARGET_FAILED,data,session,props);      throw saml2E;    }  } else   if (acsBinding.equals(SAML2Constants.HTTP_ARTIFACT)) {    IDPSSOUtil.sendResponseArtifact(request,response,idpEntityID,spEntityID,realm,acsURL,relayState,res,session,props);  } else   if (acsBinding.equals(SAML2Constants.PAOS)) {    signAndEncryptResponseComponents(realm,spEntityID,idpEntityID,res,true);    IDPSSOUtil.sendResponseECP(request,response,out,idpEntityID,realm,acsURL,res);  } else {    SAML2Utils.debug.error(classMethod + "unsupported return binding.");    throw new SAML2Exception(SAML2Utils.bundle.getString("UnSupportedReturnBinding"));  }}  }
class C{  public static void disableLogging(){  RESTMockServer.logger=new NOOpLogger();}  }
class C{  public Notification(String type,Object source,long sequenceNumber){  super(source);  this.source=source;  this.type=type;  this.sequenceNumber=sequenceNumber;  this.timeStamp=(new java.util.Date()).getTime();}  }
class C{  public void skippedEntity(String name) throws SAXException {  if (contentHandler != null) {    contentHandler.skippedEntity(name);  }}  }
class C{  public String[] poll() throws IOException {  final DatabaseEntry key=new DatabaseEntry();  final DatabaseEntry data=new DatabaseEntry();  final Cursor cursor=queueDatabase.openCursor(null,null);  try {    cursor.getFirst(key,data,LockMode.RMW);    if (data.getData() == null) {      return null;    }    final String res=new String(data.getData(),"UTF-8");    final String dn=new String(key.getData(),"UTF-8");    cursor.delete();    opsCounter++;    if (opsCounter >= cacheSize) {      queueDatabase.sync();      opsCounter=0;    }    return new String[]{dn,res};  }  finally {    cursor.close();  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("StandardEngine[");  sb.append(getName());  sb.append("]");  return (sb.toString());}  }
class C{  private boolean hasPermission(final AuthenticationInfo authInfo){  boolean ret=true;  Entry e=authzEntry;  if (e == null) {    try {      e=DirectoryServer.getEntry(DN.rootDN());    } catch (    final DirectoryException ex) {      return false;    }  }  if (!AccessControlConfigManager.getInstance().getAccessControlHandler().mayProxy(authInfo.getAuthenticationEntry(),e,bindOp)) {    setCallbackMsg(ERR_SASL_AUTHZID_INSUFFICIENT_ACCESS.get(authEntry.getName()));    ret=false;  }  return ret;}  }
class C{  public static SessionRequest parseXML(String xml){  SessionRequestParser parser=new SessionRequestParser(xml);  return parser.parseXML();}  }
class C{  public COMM_FAILURE(){  this("");}  }
class C{  public MutableCallSite(MethodHandle target){  super(target);}  }
class C{  protected static void assertion(boolean b,String msg){  if (!b) {    throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_ASSERT_REDUNDENT_EXPR_ELIMINATOR,new Object[]{msg}));  }}  }
class C{  @Override public void nullifyUsedVars(){  bundle=null;  sharedState=null;  options=null;  serviceStatus=null;  defaultRoles=null;  userID=null;  userName=null;  userAttrs=null;  regEx=null;  callbacks=null;}  }
class C{  public synchronized boolean removeElement(Object object){  int index;  if ((index=indexOf(object,0)) == -1) {    return false;  }  removeElementAt(index);  return true;}  }
class C{  public RedirectUriMismatchException(){  super(400,"redirect_uri_mismatch","The redirection URI provided does not match a pre-registered value.");}  }
class C{  public void testObsoleteDstZoneName() throws Exception {  SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm zzzz",Locale.US);  Date normal=format.parse("1970-01-01T00:00 EET");  Date dst=format.parse("1970-01-01T00:00 EEST");  assertEquals(60 * 60 * 1000,normal.getTime() - dst.getTime());}  }
class C{  public void insert_dyn_any(org.omg.DynamicAny.DynAny value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_dyn_any",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_dyn_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  String documentName;  doc=(Document)load("hc_staff",false);  documentName=doc.getNodeName();  assertEquals("documentNodeName","#document",documentName);}  }
class C{  public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  public RuleWithPrefixAddViewBean(){  super("RuleWithPrefixAdd",DEFAULT_DISPLAY_URL);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final AdaptivePrincipal other=(AdaptivePrincipal)obj;  if ((this.name == null) ? (other.name != null) : !this.name.equals(other.name)) {    return false;  }  return true;}  }
class C{  public String geNumericPlusAliasKey(){  return "N+";}  }
class C{  public PlusActionProvider(Context context){  super(context);  mContext=context;}  }
class C{  private LDAP(){}  }
class C{  public Canvas(PdfCanvas pdfCanvas,PdfDocument pdfDocument,Rectangle rootArea,boolean immediateFlush){  this(pdfCanvas,pdfDocument,rootArea);  this.immediateFlush=immediateFlush;}  }
class C{  protected String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  public synchronized boolean canRedo(){  if (inProgress) {    UndoableEdit edit=editToBeRedone();    return edit != null && edit.canRedo();  } else {    return super.canRedo();  }}  }
class C{  public <M extends Configuration>void registerDeleteListener(InstantiableRelationDefinition<?,M> d,ConfigurationDeleteListener<M> listener) throws ConfigException {  registerDeleteListener(d,new ServerManagedObjectDeleteListenerAdaptor<M>(listener));}  }
class C{  public static KeywordBindRule decode(String expression,EnumBindRuleType type) throws AciException {  String[] vals=expression.split("#");  if (vals.length != 2) {    LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_USERATTR_EXPRESSION.get(expression);    throw new AciException(message);  }  UserAttrType userAttrType=UserAttrType.getType(vals[1]);switch (userAttrType) {case GROUPDN:case USERDN:{      ParentInheritance parentInheritance=new ParentInheritance(vals[0],false);      return new UserAttr(userAttrType,type,parentInheritance);    }case ROLEDN:{    throw new AciException(WARN_ACI_SYNTAX_ROLEDN_NOT_SUPPORTED.get(expression));  }}return new UserAttr(vals[0],vals[1],userAttrType,type);}  }
class C{  public static String truncate(String str,int len){  if (str == null) {    return null;  }  if (len < 0) {    return null;  }  if (str.length() > len) {    return str.substring(0,len);  } else {    return str;  }}  }
class C{  public boolean isReturnAppSessionEnabled(){  return returnAppSession;}  }
class C{  private KeyManagers(){}  }
class C{  public String toString(){  if (exception != null) {    return exception.toString();  } else {    return super.toString();  }}  }
class C{  @SuppressWarnings("deprecation") public void show(){  Component component=getComponent();  if (component != null) {    component.show();  }}  }
class C{  public JspTagException(String msg){  super(msg);}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public synchronized ContextHolder createCachedContextHolder(){  updateCacheSize();  while (true) {    final String key=UUID.randomUUID().toString();    if (!cache.containsKey(key)) {      final ContextHolder holder=new ContextHolder(key);      cache.put(key,holder);      return holder;    }  }}  }
class C{  public RootDNConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  alternateBindDNs=new ConcurrentHashMap<>();  rootPrivilegeChangeListener=new RootPrivilegeChangeListener();}  }
class C{  @Override public String toString(){  return new StringBuilder().append(this.getClass().getName()).append(COLON).append(name).toString();}  }
class C{  public EnumMap(Class<K> keyType){  this.keyType=keyType;  keyUniverse=getKeyUniverse(keyType);  vals=new Object[keyUniverse.length];}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.SecurityElement createSecurityElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.SecurityElementImpl();}  }
class C{  public void removeEventListener(SIPDialogEventListener oldListener){  eventListeners.remove(oldListener);}  }
class C{  public static int findWordEnd(CharSequence line,int pos,String noWordSep){  return findWordEnd(line,pos,noWordSep,true,false,false);}  }
class C{  public void addTempo(final long timestamp,final int tempo){  removeTempo(timestamp);  final List<SynchronisedTempoCode> codes=(List<SynchronisedTempoCode>)getObjectValue(DataTypes.OBJ_SYNCHRONISED_TEMPO_LIST);  int insertIndex=0;  if (!codes.isEmpty() && codes.get(0).getTimestamp() <= timestamp) {    for (    final SynchronisedTempoCode code : codes) {      final long translatedTimestamp=code.getTimestamp();      if (timestamp < translatedTimestamp) {        break;      }      insertIndex++;    }  }  codes.add(insertIndex,new SynchronisedTempoCode(DataTypes.OBJ_SYNCHRONISED_TEMPO,this,tempo,timestamp));}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public Boolean isSSL(){  return isSSL;}  }
class C{  public static MetricsConfiguration create(Map<String,Object> options) throws ConfigurationException {  MetricsConfiguration conf=new MetricsConfiguration();  Yaml yaml=new Yaml();  String str=yaml.dumpAsMap(options);  conf.values=yaml.loadAs(str,MetricsConfiguration.Values.class);  return conf;}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  public static String quote(String s){  final StringBuilder buf=new StringBuilder("\"");  final int len=s.length();  for (int i=0; i < len; i++) {    char c=s.charAt(i);switch (c) {case '\n':      c='n';    buf.append('\\');  break;case '\\':case '\"':case '*':case '?':buf.append('\\');break;}buf.append(c);}buf.append('"');return buf.toString();}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterDelete(Context context,DeleteRequest request,RequestHandler next){  return next.handleDelete(context,request);}  }
class C{  protected FastDateFormat(final String pattern,final TimeZone timeZone,final Locale locale,final Date centuryStart){  printer=new FastDatePrinter(pattern,timeZone,locale);  parser=new FastDateParser(pattern,timeZone,locale,centuryStart);}  }
class C{  public static SearchRequest newSingleEntrySearchRequest(final DN dn,String... attributeDescriptions){  return Requests.newSingleEntrySearchRequest(dn,SearchScope.BASE_OBJECT,Filter.objectClassPresent(),attributeDescriptions).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  public FrameBodyTDOR(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public RecordedRequest takeRequest() throws InterruptedException {  return requestQueue.take();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnamevalue.class,args);}  }
class C{  public void compactBuffer(){  if (offset != buffer.length) {    byte[] newBuffer=new byte[offset];    System.arraycopy(buffer,0,newBuffer,0,offset);    buffer=newBuffer;  }}  }
class C{  public String objectTypeName(Field field){  return objectTypeName(field.getTypeUrl());}  }
class C{  public boolean hasBinaryAttributes(){  return true;}  }
class C{  private static int skipWhiteSpace(BitArray row) throws NotFoundException {  int width=row.getSize();  int endStart=row.getNextSet(0);  if (endStart == width) {    throw NotFoundException.getNotFoundInstance();  }  return endStart;}  }
class C{  public void firePropertyChange(String name,Object oldValue,Object newValue){  pcSupport.firePropertyChange(name,oldValue,newValue);}  }
class C{  @Override public int hashCode(){  return (int)entryID;}  }
class C{  private SearchResultEntry searchManuallyEntry(ConnectionWithControls conn,DN dn) throws LdapException {  SearchRequest request=newSearchRequest(dn,BASE_OBJECT,controller.getObjectSearchFilter(),controller.getAttrsForRedSearch()).setSizeLimit(controller.getMaxChildren());  SearchResultEntry sr=conn.searchSingleEntry(request);  sr.setName(dn);  return sr;}  }
class C{  private PdfString[] splitString(PdfString string){  List<PdfString> strings=new ArrayList<>();  String stringValue=string.getValue();  for (int i=0; i < stringValue.length(); i++) {    PdfString newString=new PdfString(stringValue.substring(i,i + 1),string.getEncoding());    String text=gs.getFont().decode(newString);    if (text.length() == 0 && i < stringValue.length() - 1) {      newString=new PdfString(stringValue.substring(i,i + 2),string.getEncoding());      i++;    }    strings.add(newString);  }  return strings.toArray(new PdfString[strings.size()]);}  }
class C{  public void pushWrapper(Wrapper wrapper){  profiles.addFirst(wrapper);}  }
class C{  public void testKeyPairGenerator01() throws NoSuchAlgorithmException {  try {    KeyPairGenerator.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException must be thrown  when algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyPairGenerator.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown when algorithm is not available: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public BrokenInputStream(IOException exception){  this.exception=exception;}  }
class C{  public String encode(){  return headerName + COLON + SP+ encodeBody(new StringBuilder()).toString()+ NEWLINE;}  }
class C{  private void resetGenId(ReplicationBroker rb,long newGenId){  ResetGenerationIdMsg resetMsg=new ResetGenerationIdMsg(newGenId);  rb.publish(resetMsg);}  }
class C{  PerThreadSAXParserProvider(SAXParserProvider delegate){  this(delegate,DEFAULT_CACHE_SIZE);}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfDictionary copyTo(PdfDocument document){  return (PdfDictionary)super.copyTo(document,true);}  }
class C{  private Object readResolve(){  return object;}  }
class C{  public OpenIDMSessionFactory(ScriptRegistry scriptRegistry){  this.scriptRegistry=scriptRegistry;}  }
class C{  public void updatePackage(Context context,String packageName,UserHandleCompat user){  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(context);  final List<LauncherActivityInfoCompat> matches=launcherApps.getActivityList(packageName,user);  if (matches.size() > 0) {    for (int i=data.size() - 1; i >= 0; i--) {      final AppInfo applicationInfo=data.get(i);      final ComponentName component=applicationInfo.intent.getComponent();      if (user.equals(applicationInfo.user) && packageName.equals(component.getPackageName())) {        if (!findActivity(matches,component)) {          removed.add(applicationInfo);          data.remove(i);        }      }    }    for (    final LauncherActivityInfoCompat info : matches) {      AppInfo applicationInfo=findApplicationInfoLocked(info.getComponentName().getPackageName(),user,info.getComponentName().getClassName());      if (applicationInfo == null) {        add(new AppInfo(context,info,user,mIconCache));      } else {        mIconCache.getTitleAndIcon(applicationInfo,info,true);        modified.add(applicationInfo);      }    }  } else {    for (int i=data.size() - 1; i >= 0; i--) {      final AppInfo applicationInfo=data.get(i);      final ComponentName component=applicationInfo.intent.getComponent();      if (user.equals(applicationInfo.user) && packageName.equals(component.getPackageName())) {        removed.add(applicationInfo);        mIconCache.remove(component,user);        data.remove(i);      }    }  }}  }
class C{  private boolean shouldLog(TraceSettings settings){  return settings.getLevel() != DISABLED;}  }
class C{  @Override public String toString(){  final StringBuilder b=new StringBuilder(this.getClass().getName());  b.append(":");  if (rmiServer != null) {    b.append(" rmiServer=").append(rmiServer.toString());  }  if (jmxServiceURL != null) {    if (rmiServer != null)     b.append(",");    b.append(" jmxServiceURL=").append(jmxServiceURL.toString());  }  return b.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference entRef;  Element entElement;  Node attrNode;  Text textNode;  Node removedNode;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  attrNode=entElement.getAttributeNode("domestic");  textNode=(Text)attrNode.getFirstChild();  assertNotNull("attrChildNotNull",textNode);{    boolean success=false;    try {      removedNode=attrNode.removeChild(textNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("setValue_throws_NO_MODIFICATION_ERR",success);  }}  }
class C{  public void paintTabbedPaneTabBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex){}  }
class C{  public Transformer newTransformer() throws TransformerConfigurationException {  return new TransformerIdentityImpl(m_isSecureProcessing);}  }
class C{  public static String globToRE(String glob){  if (glob.startsWith("(re)")) {    return glob.substring(4);  }  final Object NEG=new Object();  final Object GROUP=new Object();  Stack<Object> state=new Stack<Object>();  StringBuilder buf=new StringBuilder();  boolean backslash=false;  for (int i=0; i < glob.length(); i++) {    char c=glob.charAt(i);    if (backslash) {      buf.append('\\');      buf.append(c);      backslash=false;      continue;    }switch (c) {case '\\':      backslash=true;    break;case '?':  buf.append('.');break;case '.':case '+':case '(':case ')':buf.append('\\');buf.append(c);break;case '*':buf.append(".*");break;case '|':if (backslash) buf.append("\\|"); else buf.append('|');break;case '{':buf.append('(');if (i + 1 != glob.length() && glob.charAt(i + 1) == '!') {buf.append('?');state.push(NEG);} else state.push(GROUP);break;case ',':if (!state.isEmpty() && state.peek() == GROUP) buf.append('|'); else buf.append(',');break;case '}':if (!state.isEmpty()) {buf.append(')');if (state.pop() == NEG) buf.append(".*");} else buf.append('}');break;default :buf.append(c);}}return buf.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforenewchildexists.class,args);}  }
class C{  void prepareAttributeMap(Map<String,Set<String>> attributes,String serviceID){  attributes.put(SMSEntry.ATTR_SERVICE_ID,Collections.singleton(serviceID));  final Set<String> setObjectClass=new HashSet<String>();  setObjectClass.add(SMSEntry.OC_TOP);  setObjectClass.add(SMSEntry.OC_SERVICE_COMP);  attributes.put(SMSEntry.ATTR_OBJECTCLASS,setObjectClass);}  }
class C{  protected static boolean isRequired() throws AMException {  try {    if (AMCompliance.gsc == null) {      ServiceSchemaManager scm=new ServiceSchemaManager(ADMINISTRATION_SERVICE,(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance()));      AMCompliance.gsc=scm.getGlobalSchema();    }    Map attrMap=AMCompliance.gsc.getAttributeDefaults();    Set values=(Set)attrMap.get(DCT_ENABLED_ATTR);    boolean required=false;    if (values == null || values.isEmpty()) {      required=false;    } else {      String val=(String)values.iterator().next();      required=(val.equalsIgnoreCase("true"));    }    return required;  } catch (  SMSException ex) {    debug.error(AMSDKBundle.getString("354"),ex);    throw new AMException(AMSDKBundle.getString("354"),"354");  }catch (  SSOException ex) {    debug.error(AMSDKBundle.getString("345"),ex);    throw new AMException(AMSDKBundle.getString("354"),"354");  }}  }
class C{  public boolean startsWith(Name n){  if (n instanceof CompoundName) {    return (impl.startsWith(n.size(),n.getAll()));  } else {    return false;  }}  }
class C{  public void showStatus(String msg){  getAppletContext().showStatus(msg);}  }
class C{  public boolean isAnyPolicyInhibited(){  return anyPolicyInhibited;}  }
class C{  private void checkWhatHasBeenReceivedSafeData(int nSentUpdates,boolean otherFakeDS,long otherFakeDsGenId,long fakeRs1GenId,long fakeRs2GenId,long fakeRs3GenId,List<Integer> expectedServers){  final FakeReplicationDomain fakeRd1=fakeRDs[1];  final FakeReplicationDomain fakeRd2=fakeRDs[2];  fakeRd1.assertReceivedUpdates(0);  if (otherFakeDS) {    fakeRd2.assertReceivedUpdates(otherFakeDsGenId == DEFAULT_GENID ? nSentUpdates : 0);  }  if (nSentUpdates < 4) {    final int expectedNb=fakeRs1GenId == DEFAULT_GENID ? nSentUpdates : 0;    fakeRs1.assertReceivedAckedUpdates(expectedNb,expectedServers.contains(FRS1_ID));  }  if (nSentUpdates < 3) {    final int expectedNb=fakeRs2GenId == DEFAULT_GENID ? nSentUpdates : 0;    fakeRs2.assertReceivedAckedUpdates(expectedNb,expectedServers.contains(FRS2_ID));  }  if (nSentUpdates < 2) {    final int expectedNb=fakeRs3GenId == DEFAULT_GENID ? nSentUpdates : 0;    fakeRs3.assertReceivedAckedUpdates(expectedNb,expectedServers.contains(FRS3_ID));  }}  }
class C{  public SoftBevelBorder(int bevelType,Color highlight,Color shadow){  super(bevelType,highlight,shadow);}  }
class C{  public AMSearchResults searchAllRoles(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchAllRoles(wildcard,null,searchControl);}  }
class C{  public SAML2MetaException(Throwable t){  super(t);}  }
class C{  public static long findNumber(String str) throws TagException {  return findNumber(str,0);}  }
class C{  protected final void resolveClass(Class<?> clazz){}  }
class C{  public DTMConfigurationException(Throwable e){  super(e);}  }
class C{  public static WhereBuilder b(String columnName,String op,Object value){  WhereBuilder result=new WhereBuilder();  result.appendCondition(null,columnName,op,value);  return result;}  }
class C{  private void assertThatCursorCanBeFullyReadFromStart(DBCursor<Record<String,String>> cursor,int fromIndex,int endIndex) throws Exception {  assertThat(cursor.getRecord()).isNull();  assertThatCursorCanBeFullyRead(cursor,fromIndex,endIndex);}  }
class C{  private char insert(char p,char[] key,int start,char val){  int len=strlen(key,start);  if (p == 0) {    p=freenode++;    eq[p]=val;    length++;    hi[p]=0;    if (len > 0) {      sc[p]=0xFFFF;      lo[p]=(char)kv.alloc(len + 1);      strcpy(kv.getArray(),lo[p],key,start);    } else {      sc[p]=0;      lo[p]=0;    }    return p;  }  if (sc[p] == 0xFFFF) {    char pp=freenode++;    lo[pp]=lo[p];    eq[pp]=eq[p];    lo[p]=0;    if (len > 0) {      sc[p]=kv.get(lo[pp]);      eq[p]=pp;      lo[pp]++;      if (kv.get(lo[pp]) == 0) {        lo[pp]=0;        sc[pp]=0;        hi[pp]=0;      } else {        sc[pp]=0xFFFF;      }    } else {      sc[pp]=0xFFFF;      hi[p]=pp;      sc[p]=0;      eq[p]=val;      length++;      return p;    }  }  char s=key[start];  if (s < sc[p]) {    lo[p]=insert(lo[p],key,start,val);  } else   if (s == sc[p]) {    if (s != 0) {      eq[p]=insert(eq[p],key,start + 1,val);    } else {      eq[p]=val;    }  } else {    hi[p]=insert(hi[p],key,start,val);  }  return p;}  }
class C{  public void printStats(){  PolicyCache.printStats(policyStats);  PolicyEvaluator.printStats(policyStats);  SubjectEvaluationCache.printStats(policyStats);  PolicyRequestHandler.printStats(policyStats);}  }
class C{  @Override public void updateOperationErrMsgAndResCode(){  setResultCode(ResultCode.NO_SUCH_OBJECT);  appendErrorMessage(ERR_COMPARE_NO_SUCH_ENTRY.get(getEntryDN()));}  }
class C{  private void checkParameterType(Method method){  TypeVariable<Method> typeParameter=getTypeParameter(method);  assertLenghtOne(method.getGenericParameterTypes());  Type genericParameterType=method.getGenericParameterTypes()[0];  assertEquals(typeParameter,genericParameterType);  assertInstanceOf(TypeVariable.class,genericParameterType);  assertEquals(method,((TypeVariable<?>)genericParameterType).getGenericDeclaration());}  }
class C{  void add(UpdateMsg update){synchronized (msgQueue) {    if (msgQueue.isEmpty()) {      msgQueue.notify();    }    msgQueue.add(update);    while (isMsgQueueAboveThreshold()) {      following=false;      msgQueue.removeFirst();    }  }}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {  in.defaultReadObject();  reexport();}  }
class C{  public boolean isUserExists(String userDN) throws FSException {  try {    Object[] obj={userDN,metaAlias};    Boolean ret=(Boolean)stub.send("isUserExists",obj,null,null);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("AMC:isUserExists(" + userDN + ")"+ " returned "+ ret);    }    return ret.booleanValue();  } catch (  RemoteException re) {    if (FSUtils.debug.warningEnabled()) {      FSUtils.debug.warning("AMC:isUserExists: " + userDN,re);    }    throw (new FSException(re.getMessage()));  }catch (  FSRemoteException re) {    if (FSUtils.debug.warningEnabled()) {      FSUtils.debug.warning("AMC:isUserExists: " + userDN,re);    }    throw (new FSException(re.getMessage()));  }catch (  Exception re) {    if (FSUtils.debug.warningEnabled()) {      FSUtils.debug.warning("AMC:isUserExists: " + userDN,re);    }    throw (new FSException(re.getMessage()));  }}  }
class C{  public String toString(){  return exp + " like " + new StringValueExp(pattern);}  }
class C{  public CommandProxy(CustomCommandScope tgt,String function){  this.tgt=tgt;  this.function=function;}  }
class C{  public void removeListener(String listenerID) throws ConfigurationException {}  }
class C{  static boolean isSet(){  PolicyInfo pi=policy.get();  return pi.policy != null && pi.initialized == true;}  }
class C{  public void removeMessageDestinationRef(String name){  entries.remove(name);  MessageDestinationRef mdr=null;synchronized (mdrs) {    mdr=mdrs.remove(name);  }  if (mdr != null) {    support.firePropertyChange("messageDestinationRef",mdr,null);    mdr.setNamingResources(null);  }}  }
class C{  public CredentialHandlerRuleSet(){  this("");}  }
class C{  public boolean isOutboundOffhook(){  return (currentState == outboundOffHookState);}  }
class C{  public static SearchFilter createLessOrEqualFilter(AttributeType attributeType,ByteString assertionValue){  return new SearchFilter(FilterType.LESS_OR_EQUAL,null,null,attributeType,null,assertionValue,null,null,null,null,false);}  }
class C{  private static boolean skip_scope(GuiConfigScanner p_scanner){  int open_bracked_count=1;  while (open_bracked_count > 0) {    Object curr_token=null;    try {      curr_token=p_scanner.next_token();    } catch (    Exception e) {      System.out.println("GuiConfigFile.skip_scope: Error while scanning file");      System.out.println(e);      return false;    }    if (curr_token == null) {      return false;    }    if (curr_token == GuiConfigKeyword.OPEN_BRACKET) {      ++open_bracked_count;    } else     if (curr_token == GuiConfigKeyword.CLOSED_BRACKET) {      --open_bracked_count;    }  }  System.out.println("GuiConfigFile.skip_spope: unknown scope skipped");  return true;}  }
class C{  public void removeAttribute(Object key){  int n=keys.size();  for (int i=0; i < n; i++) {    if (keys.elementAt(i).equals(key)) {      keys.removeElementAt(i);      data.removeElementAt(i);      return;    }  }}  }
class C{  public static Map appendElementToMap(String key,Set values,Map toMap){  if ((key != null) && (values != null) && (!values.isEmpty())&& (toMap != null)) {    Set previousValues=(Set)toMap.get(key);    if ((previousValues != null) && (!previousValues.isEmpty())) {      previousValues.addAll(values);    } else {      toMap.put(key,values);    }  }  return toMap;}  }
class C{  public void submitRequiredInformation(Callback[] info){  authDebug.message("AuthContext::submitRequestedInformation()");  informationRequired=null;synchronized (loginThread) {    submittedInformation=info;    loginThread.notify();  }  authDebug.message("AuthContext::submitRequestedInformation" + "() sending notify to sleeping threads");}  }
class C{  private ResultCode(final int intValue,final LocalizableMessage name,final boolean exceptional,final Enum resultCodeEnum){  this.intValue=intValue;  this.name=name;  this.exceptional=exceptional;  this.resultCodeEnum=resultCodeEnum;}  }
class C{  protected void drawDimmedLayer(@NonNull Canvas canvas){  canvas.save();  if (mOvalDimmedLayer) {    canvas.clipPath(mCircularPath,Region.Op.DIFFERENCE);  } else {    canvas.clipRect(mCropViewRect,Region.Op.DIFFERENCE);  }  canvas.drawColor(mDimmedColor);  canvas.restore();  if (mOvalDimmedLayer) {    canvas.drawOval(mCropViewRect,mDimmedStrokePaint);  }}  }
class C{  private void nextGeneration(){  trip.signalAll();  count=parties;  generation=new Generation();}  }
class C{  public ClientConnectionMonitorProvider(){  this.handler=null;}  }
class C{  public SQLNonTransientException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public void visitBaseType(char descriptor){}  }
class C{  private void copyTagToPageScope(int scope){  Iterator<String> iter=null;switch (scope) {case VariableInfo.NESTED:    if (nestedVars != null) {      iter=nestedVars.iterator();    }  break;case VariableInfo.AT_BEGIN:if (atBeginVars != null) {  iter=atBeginVars.iterator();}break;case VariableInfo.AT_END:if (atEndVars != null) {iter=atEndVars.iterator();}break;}while ((iter != null) && iter.hasNext()) {String varName=iter.next();Object obj=getAttribute(varName);varName=findAlias(varName);if (obj != null) {invokingJspCtxt.setAttribute(varName,obj);} else {invokingJspCtxt.removeAttribute(varName,PAGE_SCOPE);}}}  }
class C{  public ObjectStreamField(String name,Class<?> type,boolean unshared){  if (name == null) {    throw new NullPointerException();  }  this.name=name;  this.type=type;  this.unshared=unshared;  signature=getClassSignature(type).intern();  field=null;}  }
class C{  @Override protected void tearDown() throws IOException {  zfile.close();  tempFileName=System.getProperty("java.io.tmpdir");  String separator=System.getProperty("file.separator");  if (tempFileName.charAt(tempFileName.length() - 1) == separator.charAt(0)) {    tempFileName=Support_PlatformFile.getNewPlatformFile(tempFileName,"gabba.zip");  } else {    tempFileName=Support_PlatformFile.getNewPlatformFile(tempFileName + separator,"gabba.zip");  }  File f=new File(tempFileName);  f.delete();}  }
class C{  public void testHashCodeUnequal(){  String a="8478231212478987482988429808779810457634781384756794987";  int aScale=41;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  int bScale=-24;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  assertTrue("incorrect value",aNumber.hashCode() != bNumber.hashCode());}  }
class C{  public static <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return getService().dynamicQuery(dynamicQuery);}  }
class C{  @Override public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){}  }
class C{  public static boolean isCurrentUserInRole(String authority){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(authority));    }  }  return false;}  }
class C{  private String replaceDNDelimiter(String nSuffix,String replaceWith){  return nSuffix.replaceAll(",",replaceWith).trim();}  }
class C{  void endOptional(){  this.optional--;}  }
class C{  public final void pushCurrentNodeAndExpression(int cn,int en){  m_currentNodes.push(cn);  m_currentExpressionNodes.push(cn);}  }
