class C{  public void copyFrom(LockSet other){  if (other.array.length != array.length) {    array=new int[other.array.length];  }  System.arraycopy(other.array,0,array,0,array.length);  this.defaultLockCount=other.defaultLockCount;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.596 -0500",hash_original_method="7F1A78AF2C66358AFEB07F450298B658",hash_generated_method="A9D55D095326FAFCC942AC8A70FD058E") public static int rgb(int red,int green,int blue){  return (0xFF << 24) | (red << 16) | (green << 8)| blue;}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new ConcurrentHashMap<String,Cookie>();  String storedCookieNames=cookiePrefs.getString(COOKIE_NAME_STORE,null);  if (storedCookieNames != null) {    String[] cookieNames=TextUtils.split(storedCookieNames,",");    for (    String name : cookieNames) {      String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);      if (encodedCookie != null) {        Cookie decodedCookie=decodeCookie(encodedCookie);        if (decodedCookie != null) {          cookies.put(name,decodedCookie);        }      }    }    clearExpired(new Date());  }}  }
class C{  public boolean matchesAllIssues(Collection<Issue> issues,List<String> messages){  Collection<Issue> issueCopy=new LinkedList<>(issues);  Collection<IssueMatcher> matcherCopy=new LinkedList<>(issueMatchers);  performMatching(issueCopy,matcherCopy,messages);  if (inverted) {    if (issueCopy.isEmpty()) {      explainIssues(issues,messages,inverted);      return false;    }  } else {    if (!issueCopy.isEmpty()) {      explainIssues(issueCopy,messages,inverted);      return false;    }  }  return true;}  }
class C{  public UpdaterEditingTableModel(Node node,BayesIm bayesIm,UpdatedBayesImWizard wizard){  if (node == null) {    throw new NullPointerException("Node must not be null.");  }  if (bayesIm == null) {    throw new NullPointerException("Bayes IM must not be null.");  }  if (wizard == null) {    throw new NullPointerException("Wizard must not be null.");  }  this.bayesIm=bayesIm;  this.nodeIndex=bayesIm.getNodeIndex(node);  this.wizard=wizard;}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String upslopeAreaCreekHeader=null;  String outputHeader=null;  int numRows;  int numCols;  double elevation, elevationNeighbour;  int x, y;  double slope, maxSlope;  int flowDir;  int i;  List<StreamFlow> streamFlowList=new ArrayList<>();  List<StreamFlow> copyStreamFlowList;  StreamFlow streamFlow2;  List<Double> upstreamValues=new ArrayList<>();  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      upslopeAreaCreekHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((demHeader == null) || (upslopeAreaCreekHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    upslopeAreaCreek=new WhiteboxRaster(upslopeAreaCreekHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    gridRes=dem.getCellSizeX();    medianUpstreamArea=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    medianUpstreamArea.setPreferredPalette("blueyellow.pal");    medianUpstreamArea.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    medianUpstreamArea.setZUnits("dimensionless");    tmpDirectUpstreamCreekCellCount=new WhiteboxRaster(outputHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    tmpDirectUpstreamCreekCellCount.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (upslopeAreaCreek.getValue(row,col) == upslopeAreaCreek.getNoDataValue()) {          medianUpstreamArea.setValue(row,col,upslopeAreaCreek.getNoDataValue());        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 3:",(int)progress);    }    updateProgress("Loop 2 of 3:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        maxSlope=Double.MIN_VALUE;        flowDir=-1;        if (upslopeAreaCreek.getValue(row,col) > 0) {          elevation=dem.getValue(row,col);          for (int c=0; c < 8; c++) {            x=col + xd[c];            y=row + yd[c];            elevationNeighbour=dem.getValue(y,x);            if (upslopeAreaCreek.getValue(y,x) > 0 && elevationNeighbour < elevation) {              slope=(elevation - elevationNeighbour) / dd[c];              if (slope > maxSlope) {                maxSlope=slope;                flowDir=c;              }            }          }          for (int c=0; c < 8; c++) {            if (c == flowDir) {              x=col + xd[c];              y=row + yd[c];              tmpDirectUpstreamCreekCellCount.incrementValue(y,x,1);              streamFlowList.add(new StreamFlow(col,row,x,y,elevation));            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 3:",(int)progress);    }    streamFlowList=OrderStreamFlowList(streamFlowList);    copyStreamFlowList=new ArrayList<>(streamFlowList.subList(0,streamFlowList.size()));    updateProgress("Loop 3 of 3:",0);    for (    StreamFlow streamFlow : streamFlowList) {      i=streamFlowList.indexOf(streamFlow);      if (medianUpstreamArea.getValue(streamFlow.GetToY(),streamFlow.GetToX()) == 0) {        upstreamValues=new ArrayList<>();        FilterStreamFlowList(copyStreamFlowList,streamFlow);        MakeUpstreamList(copyStreamFlowList,streamFlow.GetToX(),streamFlow.GetToY(),upstreamValues);        Collections.sort(upstreamValues);        medianUpstreamArea.setValue(streamFlow.GetToY(),streamFlow.GetToX(),GetMedian(upstreamValues));        streamFlow2=streamFlow;        while ((tmpDirectUpstreamCreekCellCount.getValue(streamFlow2.GetToY(),streamFlow2.GetToX()) == 1) & (upstreamValues.size() > 2)) {          upstreamValues.remove(upslopeAreaCreek.getValue(streamFlow2.GetToY(),streamFlow2.GetToX()));          medianUpstreamArea.setValue(streamFlow2.GetFromY(),streamFlow2.GetFromX(),GetMedian(upstreamValues));          x=streamFlow2.GetFromX();          y=streamFlow2.GetFromY();          for (          StreamFlow tempStreamFlow : copyStreamFlowList) {            if (tempStreamFlow.GetToX() == x && tempStreamFlow.GetToY() == y) {              streamFlow2=tempStreamFlow;              break;            }          }        }        if (tmpDirectUpstreamCreekCellCount.getValue(streamFlow2.GetFromY(),streamFlow2.GetFromX()) == 0) {          x=streamFlow2.GetFromX();          y=streamFlow2.GetFromY();          medianUpstreamArea.setValue(y,x,upslopeAreaCreek.getValue(y,x));        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * (i + 1) / streamFlowList.size());      updateProgress("Loop 3 of 3:",(int)progress);    }    medianUpstreamArea.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    medianUpstreamArea.addMetadataEntry("Created on " + new Date());    dem.close();    upslopeAreaCreek.close();    medianUpstreamArea.close();    tmpDirectUpstreamCreekCellCount.close();    returnData(outputHeader);  } catch (  Exception e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Boolean isRunSupported(){  return runSupported;}  }
class C{  public TermsByQueryRequest nowInMillis(long nowInMillis){  this.nowInMillis=nowInMillis;  return this;}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (!isFirstBatchDone()) {    createSubsample();  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  public boolean isFullBST(){  return size == Math.pow(2,height()) - 1 ? true : false;}  }
class C{  public static boolean isNullLiteral(JCTree tree){  return tree instanceof JCLiteral && ((JCLiteral)tree).getValue() == null;}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  ElemTemplateElement parent=handler.getElemTemplateElement();  if (null != parent) {    parent.appendChild(elem);    handler.pushElemTemplateElement(elem);  }}  }
class C{  public static void show(String message,MessageType messageType){  getDialogDisplayer().notify(new NotifyDescriptor.Message(message,messageType.getNotifyDescriptorType()));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected IterationStatementImpl(){  super();}  }
class C{  public InputHandler copy(){  return new DefaultInputHandler(this);}  }
class C{  protected Expression mod(int opPos) throws TransformerException {  return compileOperation(new Mod(),opPos);}  }
class C{  public HttpResponse HEADResponse(final MultiProtocolURL url,final boolean concurrent) throws IOException {  final HttpHead httpHead=new HttpHead(url.toNormalform(true));  setHost(url.getHost());  execute(httpHead,concurrent);  finish();  ConnectionInfo.removeConnection(httpHead.hashCode());  return this.httpResponse;}  }
class C{  public void reset(Reader in){  lexer.yyreset(in);  reset();}  }
class C{  private boolean isStartable(){  return (!isRunning() && this.starting.compareAndSet(false,true));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.585 -0500",hash_original_method="8096444783AE8C9AF2A604C00C6FDBC2",hash_generated_method="74A2E625227FCB4188BD13C3034E2AEB") public boolean pageScroll(int direction){  boolean down=direction == View.FOCUS_DOWN;  int height=getHeight();  if (down) {    mTempRect.top=getScrollY() + height;    int count=getChildCount();    if (count > 0) {      View view=getChildAt(count - 1);      if (mTempRect.top + height > view.getBottom()) {        mTempRect.top=view.getBottom() - height;      }    }  } else {    mTempRect.top=getScrollY() - height;    if (mTempRect.top < 0) {      mTempRect.top=0;    }  }  mTempRect.bottom=mTempRect.top + height;  return scrollAndFocus(direction,mTempRect.top,mTempRect.bottom);}  }
class C{  public final float elementAt(final int id){  if (id >= max_size) {    return 0f;  } else {    return items[id];  }}  }
class C{  static boolean isEmpty(Object value){  return (null == value) || (value.getClass().equals(Boolean.class) && !((Boolean)value)) || (value.getClass().equals(Integer.class) && (Integer)value == 0)|| (value.getClass().equals(Long.class) && (Long)value == 0)|| (Collection.class.isAssignableFrom(value.getClass()) && ((Collection)value).isEmpty())|| (Map.class.isAssignableFrom(value.getClass()) && ((Map)value).isEmpty())|| (value.getClass().equals(Byte.class) && (Byte)value == 0)|| (value.getClass().equals(Short.class) && (Short)value == 0)|| (value.getClass().equals(Double.class) && (Double)value == 0)|| (value.getClass().equals(Float.class) && (Float)value == 0);}  }
class C{  public void stopForeground(boolean removeNotification){  FileDownloadServiceProxy.getImpl().stopForeground(removeNotification);}  }
class C{  public DirectoryObjectResource(Directory<InternalType> directory,InternalType object,DirectoryObjectTranslator<InternalType,ExternalType> translator){  this.directory=directory;  this.object=object;  this.translator=translator;}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  if (DBG)   log("writeToParcel(Parcel, int): " + toString());  dest.writeInt(mMcc);  dest.writeInt(mMnc);  dest.writeInt(mLac);  dest.writeInt(mCid);  dest.writeInt(mPsc);}  }
class C{  private void layoutPatchesAndConnectors(){  mBlockPatches.clear();  mBlockBorderPatches.clear();  mFillRects.clear();  boolean isShadow=mBlock.isShadow();  int xFrom=mOutputConnectorMargin + mPatchManager.mBlockStartPadding;  int xTo=mOutputConnectorMargin;  int inlineRowIdx=0;  if (mBlock.getInputsInline()) {    xTo+=mInlineRowWidth.get(inlineRowIdx);  } else {    xTo+=mBlockContentWidth;  }  int yTop=0;  final NinePatchDrawable topStartDrawable=addTopLeftPatch(isShadow,xTo,yTop);  mInputConnectionHighlightPatches.clear();  mInputConnectionHighlightPatches.ensureCapacity(mInputCount);  for (int i=0; i < mInputCount; ++i) {    final InputView inputView=mInputViews.get(i);    final ViewPoint inputLayoutOrigin=mInputLayoutOrigins.get(i);    mInputConnectionHighlightPatches.add(null);    fillRectBySize(xFrom + inputLayoutOrigin.x,inputLayoutOrigin.y,inputView.getFieldLayoutWidth(),inputView.getRowHeight());switch (inputView.getInput().getType()) {default :case Input.TYPE_DUMMY:{        boolean isLastInput=(i + 1 == mInputCount);        boolean nextIsStatement=!isLastInput && mInputViews.get(i + 1).getInput().getType() == Input.TYPE_STATEMENT;        boolean isEndOfLine=!mBlock.getInputsInline() || isLastInput || nextIsStatement;        if (isEndOfLine) {          addDummyBoundaryPatch(isShadow,xTo,inputView,inputLayoutOrigin);        }        break;      }case Input.TYPE_VALUE:{      if (mBlock.getInputsInline()) {        addInlineValueInputPatch(isShadow,i,inlineRowIdx,xFrom,inputView,inputLayoutOrigin);      } else {        addExternalValueInputPatch(isShadow,i,xTo,inputView,inputLayoutOrigin);      }      break;    }case Input.TYPE_STATEMENT:{    int xToBottom=xTo;    if (mBlock.getInputsInline()) {      ++inlineRowIdx;      xToBottom=xFrom + mInlineRowWidth.get(inlineRowIdx) - mPatchManager.mBlockStartPadding;    }    addStatementInputPatches(isShadow,i,xFrom,xTo,xToBottom,inputView,inputLayoutOrigin);    xTo=xToBottom;    break;  }}}int bottomStartResourceId=isShadow ? R.drawable.bottom_start_default_shadow : R.drawable.bottom_start_default;int bottomStartBorderResourceId=R.drawable.bottom_start_default_border;if (mBlock.getNextConnection() != null) {mHelper.setPointMaybeFlip(mNextConnectorOffset,mOutputConnectorMargin,mNextBlockVerticalOffset);bottomStartResourceId=isShadow ? R.drawable.bottom_start_next_shadow : R.drawable.bottom_start_next;bottomStartBorderResourceId=R.drawable.bottom_start_next_border;} else if (mBlock.getOutputConnection() != null) {bottomStartResourceId=isShadow ? R.drawable.bottom_start_default_square_shadow : R.drawable.bottom_start_default_square;bottomStartBorderResourceId=R.drawable.bottom_start_square_border;}final NinePatchDrawable bottomStartDrawable=getColoredPatchDrawable(bottomStartResourceId);final NinePatchDrawable bottomStartBorderDrawable=mPatchManager.getPatchDrawable(bottomStartBorderResourceId);mHelper.setRtlAwareBounds(tempRect,mBlockViewSize.x,mOutputConnectorMargin,topStartDrawable.getIntrinsicHeight(),xTo,mBlockViewSize.y);bottomStartDrawable.setBounds(tempRect);bottomStartBorderDrawable.setBounds(tempRect);if (mBlock.getNextConnection() != null) {mNextConnectionHighlightPatch=mPatchManager.getPatchDrawable(R.drawable.bottom_start_next_connection);mNextConnectionHighlightPatch.setBounds(tempRect);}mBlockPatches.add(bottomStartDrawable);mBlockBorderPatches.add(bottomStartBorderDrawable);finishFillRect();}  }
class C{  public ASRPDirectory(String path){  dir=new File(path);  if (dir.exists()) {    try {      initialize(dir.getPath(),dir.getName(),"01");    } catch (    IOException ioe) {      Debug.error(ioe.getMessage());      ioe.printStackTrace();      return;    }  } else {    Debug.error("ASRPDirectory (" + path + ") doesn't exist");  }}  }
class C{  @Override public void onAnimationUpdate(ValueAnimator animation){  float fraction=animation.getAnimatedFraction();  PropertyBundle propertyBundle=mAnimatorMap.get(animation);  int propertyMask=propertyBundle.mPropertyMask;  if ((propertyMask & TRANSFORM_MASK) != 0) {    View v=mView.get();    if (v != null) {      v.invalidate();    }  }  ArrayList<NameValuesHolder> valueList=propertyBundle.mNameValuesHolder;  if (valueList != null) {    int count=valueList.size();    for (int i=0; i < count; ++i) {      NameValuesHolder values=valueList.get(i);      float value=values.mFromValue + fraction * values.mDeltaValue;      setValue(values.mNameConstant,value);    }  }  View v=mView.get();  if (v != null) {    v.invalidate();  }}  }
class C{  public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof UserPrincipal) {    return name.equals(((UserPrincipal)object).getName());  }  return false;}  }
class C{  protected void newAddChildTo(ModelRenderer child,ModelRenderer parent){  float distance=(float)Math.sqrt(Math.pow((child.rotationPointZ - parent.rotationPointZ),2) + Math.pow((child.rotationPointY - parent.rotationPointY),2));  float angle=(float)Math.atan2(child.rotationPointY - parent.rotationPointY,child.rotationPointZ - parent.rotationPointZ);  float newRotationPointZ=(float)(distance * (Math.cos(angle)));  float newRotationPointY=(float)(distance * (Math.sin(angle)));  parent.addChild(child);  child.rotateAngleX-=parent.rotateAngleX;  child.rotateAngleY-=parent.rotateAngleY;  child.rotateAngleZ-=parent.rotateAngleZ;}  }
class C{  public AllocationException(String message){  super(message);}  }
class C{  public Matrix dst2(boolean scale){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dst2(scale);  return new Matrix(dm.toArray());}  }
class C{  public static boolean removeAudio(Context ctx,Uri uri){  if (uri == null) {    throw new NullPointerException("Uri cannot be null");  }  return (ctx.getContentResolver().delete(uri,null,null) != 0);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("LookupDisplayColumn[");  sb.append("ColumnName=").append(ColumnName);  if (IsVirtual)   sb.append(",ColumnSQL=").append(ColumnSQL);  if (IsTranslated)   sb.append(",IsTranslated");  sb.append(",DisplayType=").append(DisplayType);  if (AD_Reference_ID != 0)   sb.append(",AD_Reference_ID=").append(AD_Reference_ID);  sb.append("]");  return sb.toString();}  }
class C{  public void onPlayerOpened(){  if (LogUtils.isActive) {    Log.d(LOGTAG,"onPlayerOpened");  }}  }
class C{  final public void startServer(int port) throws IOException {  serverSocket=new ServerSocket(port,50);  serverInstance=new Thread(this);  serverInstance.start();}  }
class C{  static void checkMap(Map<String,Class<?>> map){  if (map != null && map.size() > 0) {    throw DbException.getUnsupportedException("map.size > 0");  }}  }
class C{  public void tunnelProxy(HttpHost next,boolean secure,HttpParams params) throws IOException {  if (next == null) {    throw new IllegalArgumentException("Next proxy must not be null.");  }  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker == null) || !this.tracker.isConnected()) {    throw new IllegalStateException("Connection not open.");  }  this.connection.update(null,next,secure,params);  this.tracker.tunnelProxy(next,secure);}  }
class C{  public void decl(char[] buff,int offset,int length) throws SAXException {  String s=new String(buff,offset,length);  String name=null;  String systemid=null;  String publicid=null;  String[] v=split(s);  if (v.length > 0 && "DOCTYPE".equals(v[0])) {    if (theDoctypeIsPresent)     return;    theDoctypeIsPresent=true;    if (v.length > 1) {      name=v[1];      if (v.length > 3 && "SYSTEM".equals(v[2])) {        systemid=v[3];      } else       if (v.length > 3 && "PUBLIC".equals(v[2])) {        publicid=v[3];        if (v.length > 4) {          systemid=v[4];        } else {          systemid="";        }      }    }  }  publicid=trimquotes(publicid);  systemid=trimquotes(systemid);  if (name != null) {    publicid=cleanPublicid(publicid);    theLexicalHandler.startDTD(name,publicid,systemid);    theLexicalHandler.endDTD();    theDoctypeName=name;    theDoctypePublicId=publicid;    if (theScanner instanceof Locator) {      theDoctypeSystemId=((Locator)theScanner).getSystemId();      try {        theDoctypeSystemId=new URL(new URL(theDoctypeSystemId),systemid).toString();      } catch (      Exception e) {      }    }  }}  }
class C{  public static String deleteAny(String inString,String charsToDelete){  if (!hasLength(inString) || !hasLength(charsToDelete)) {    return inString;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < inString.length(); i++) {    char c=inString.charAt(i);    if (charsToDelete.indexOf(c) == -1) {      sb.append(c);    }  }  return sb.toString();}  }
class C{  private void removeLineSignals(){  scrollPaneExpression.getGutter().removeAllTrackingIcons();}  }
class C{  private void findViews(){  this.etUsername=null;  this.etPassword=null;  this.chkRemember=null;  this.btnLogin=null;}  }
class C{  public void execute(String url,ActionListener response){  impl.execute(url,response);}  }
class C{  public static void createTable(String tableName,String tableColumns) throws SQLException {  createTable(tableName,tableColumns,null);}  }
class C{  public void nbestToMosesStringBuilder(int id,StringBuilder sbuf,Pattern featurePattern,boolean bolt,boolean printHistory){  final String delim=CompiledPhraseTable.FIELD_DELIM;  sbuf.append(id);  sbuf.append(' ').append(delim).append(' ');  sbuf.append(this.translation);  sbuf.append(' ').append(delim);  DecimalFormat df=new DecimalFormat("0.####E0");  if (features != null) {    for (    FeatureValue<FV> fv : this.features) {      String featureName=(String)fv.name;      if (featurePattern == null || featurePattern.matcher(featureName).matches()) {        sbuf.append(' ').append(fv.name).append(": ").append((fv.value == (int)fv.value ? (int)fv.value : df.format(fv.value)));      }    }  }  sbuf.append(' ').append(delim).append(' ');  sbuf.append(df.format(this.score)).append(' ').append(delim);  if (!bolt) {    String alignmentString=alignmentString();    sbuf.append(" ").append(alignmentString);  } else {    sbuf.append(' ').append(this.source.toString());    sbuf.append(' ').append(delim).append(' ');    Stack<Featurizable<TK,FV>> featurizables=featurizables();    Featurizable<TK,FV> f=null;    while (!featurizables.isEmpty()) {      f=featurizables.pop();      sbuf.append(' ');      double parentScore=(f.prior == null ? 0 : f.prior.derivation.score);      sbuf.append("|").append(f.derivation.score - parentScore).append(" ");      sbuf.append(f.derivation.rule.sourceCoverage).append(" ");      sbuf.append(f.derivation.rule.abstractRule.target.toString());    }  }  if (printHistory) {    sbuf.append(' ').append(delim).append(' ');    String historyString=historyString();    sbuf.append(historyString);  }  sbuf.append(" ").append(delim).append(" ").append(this.featurizable.debugStates());}  }
class C{  public static <T>void addAll(final T[] src,final Collection<T> dst){  if (src != null)   java.util.Collections.addAll(dst,src);}  }
class C{  @Deprecated static double allValuesIDW(SpatialGrid sg,double xCoord,double yCoord,double exp){  double xDif=(xCoord - sg.getXmin()) % sg.getResolution();  double yDif=(yCoord - sg.getYmin()) % sg.getResolution();  if (xDif == 0 && yDif == 0) {    return sg.getValue(xCoord,yCoord);  }  double distanceSum=0;  double currentWeight=1;  double weightSum=0;  for (double y=sg.getYmin(); y <= sg.getYmax(); y+=sg.getResolution()) {    for (double x=sg.getXmin(); x <= sg.getXmax(); x+=sg.getResolution()) {      currentWeight=Math.pow(distance(x,y,xCoord,yCoord),exp);      distanceSum+=sg.getValue(x,y) / currentWeight;      weightSum+=1 / currentWeight;    }  }  return distanceSum / weightSum;}  }
class C{  public void disable(Capability c){  if (doNotCheckCapabilities()) {    return;  }  if (c == Capability.NOMINAL_ATTRIBUTES) {    disable(Capability.BINARY_ATTRIBUTES);  } else   if (c == Capability.BINARY_ATTRIBUTES) {    disable(Capability.UNARY_ATTRIBUTES);  } else   if (c == Capability.UNARY_ATTRIBUTES) {    disable(Capability.EMPTY_NOMINAL_ATTRIBUTES);  } else   if (c == Capability.NOMINAL_CLASS) {    disable(Capability.BINARY_CLASS);  } else   if (c == Capability.BINARY_CLASS) {    disable(Capability.UNARY_CLASS);  } else   if (c == Capability.UNARY_CLASS) {    disable(Capability.EMPTY_NOMINAL_CLASS);  }  m_Capabilities.remove(c);}  }
class C{  public TreeMap<K,V> delete(K key){  return new TreeMap<>(ord,root.delete(ord,key));}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  protected CCMenuItemImage(CCSprite normal,CCSprite selected,CCSprite disabled,CCNode t,String sel){  super(normal,selected,disabled,t,sel);}  }
class C{  boolean arrowScroll(int direction){  final int selectedPosition=mSelectedPosition;  final int numColumns=mNumColumns;  int startOfRowPos;  int endOfRowPos;  boolean moved=false;  if (!mStackFromBottom) {    startOfRowPos=(selectedPosition / numColumns) * numColumns;    endOfRowPos=Math.min(startOfRowPos + numColumns - 1,mItemCount - 1);  } else {    final int invertedSelection=mItemCount - 1 - selectedPosition;    endOfRowPos=mItemCount - 1 - (invertedSelection / numColumns) * numColumns;    startOfRowPos=Math.max(0,endOfRowPos - numColumns + 1);  }switch (direction) {case FOCUS_UP:    if (startOfRowPos > 0) {      mLayoutMode=LAYOUT_MOVE_SELECTION;      setSelectionInt(Math.max(0,selectedPosition - numColumns));      moved=true;    }  break;case FOCUS_DOWN:if (endOfRowPos < mItemCount - 1) {  mLayoutMode=LAYOUT_MOVE_SELECTION;  setSelectionInt(Math.min(selectedPosition + numColumns,mItemCount - 1));  moved=true;}break;case FOCUS_LEFT:if (selectedPosition > startOfRowPos) {mLayoutMode=LAYOUT_MOVE_SELECTION;setSelectionInt(Math.max(0,selectedPosition - 1));moved=true;}break;case FOCUS_RIGHT:if (selectedPosition < endOfRowPos) {mLayoutMode=LAYOUT_MOVE_SELECTION;setSelectionInt(Math.min(selectedPosition + 1,mItemCount - 1));moved=true;}break;}if (moved) {playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));invokeOnItemScrollListener();}if (moved) {awakenScrollBars();}return moved;}  }
class C{  protected void updateEditor(){  try {    m_Editor.setAsText(getText());  } catch (  IllegalArgumentException ex) {  }}  }
class C{  private void decrementPreparedOperations(){  preparedOperations--;}  }
class C{  protected static void registerLibrary(ILibraryManager externalLibraryManager,String dataverse,String libraryName) throws Exception {  ClassLoader classLoader=getLibraryClassLoader(dataverse,libraryName);  externalLibraryManager.registerLibraryClassLoader(dataverse,libraryName,classLoader);}  }
class C{  public void showInfo(Message message){  reset();  this.add(new JLabel(message.toString()));  setMessageInfo(message);  this.revalidate();}  }
class C{  public String email(){  return email;}  }
class C{  public static void putInt(ByteBuffer buffer,int val,int offset,ByteOrder order){  ByteOrder origOrder=buffer.order();  try {    buffer.order(order).putInt(offset,val);  }  finally {    buffer.order(origOrder);  }}  }
class C{  public boolean implies(Permission permission){  for (Enumeration elements=elements(); elements.hasMoreElements(); ) {    if (((Permission)elements.nextElement()).implies(permission)) {      return true;    }  }  return false;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  typeDefsEClass=createEClass(TYPE_DEFS);  createEReference(typeDefsEClass,TYPE_DEFS__TYPES);  tModuleEClass=createEClass(TMODULE);  createEAttribute(tModuleEClass,TMODULE__QUALIFIED_NAME);  createEAttribute(tModuleEClass,TMODULE__PROJECT_ID);  createEAttribute(tModuleEClass,TMODULE__VENDOR_ID);  createEAttribute(tModuleEClass,TMODULE__MODULE_LOADER);  createEAttribute(tModuleEClass,TMODULE__N4JSD_MODULE);  createEAttribute(tModuleEClass,TMODULE__STATIC_POLYFILL_MODULE);  createEAttribute(tModuleEClass,TMODULE__STATIC_POLYFILL_AWARE);  createEAttribute(tModuleEClass,TMODULE__MAIN_MODULE);  createEAttribute(tModuleEClass,TMODULE__PRE_LINKING_PHASE);  createEReference(tModuleEClass,TMODULE__TOP_LEVEL_TYPES);  createEReference(tModuleEClass,TMODULE__VARIABLES);  createEReference(tModuleEClass,TMODULE__INTERNAL_TYPES);  createEReference(tModuleEClass,TMODULE__EXPOSED_INTERNAL_TYPES);  createEAttribute(tModuleEClass,TMODULE__MODULE_SPECIFIER);  typableElementEClass=createEClass(TYPABLE_ELEMENT);  identifiableElementEClass=createEClass(IDENTIFIABLE_ELEMENT);  createEAttribute(identifiableElementEClass,IDENTIFIABLE_ELEMENT__NAME);  createEOperation(identifiableElementEClass,IDENTIFIABLE_ELEMENT___GET_CONTAINING_MODULE);  tExportableElementEClass=createEClass(TEXPORTABLE_ELEMENT);  createEAttribute(tExportableElementEClass,TEXPORTABLE_ELEMENT__EXPORTED_NAME);  createEOperation(tExportableElementEClass,TEXPORTABLE_ELEMENT___IS_EXPORTED);  tAnnotationEClass=createEClass(TANNOTATION);  createEAttribute(tAnnotationEClass,TANNOTATION__NAME);  createEReference(tAnnotationEClass,TANNOTATION__ARGS);  createEOperation(tAnnotationEClass,TANNOTATION___HAS_STRING_ARGUMENT__STRING);  createEOperation(tAnnotationEClass,TANNOTATION___GET_ANNOTATION_AS_STRING);  tAnnotationArgumentEClass=createEClass(TANNOTATION_ARGUMENT);  createEOperation(tAnnotationArgumentEClass,TANNOTATION_ARGUMENT___GET_ARG_AS_STRING);  tAnnotationStringArgumentEClass=createEClass(TANNOTATION_STRING_ARGUMENT);  createEAttribute(tAnnotationStringArgumentEClass,TANNOTATION_STRING_ARGUMENT__VALUE);  createEOperation(tAnnotationStringArgumentEClass,TANNOTATION_STRING_ARGUMENT___GET_ARG_AS_STRING);  tAnnotationTypeRefArgumentEClass=createEClass(TANNOTATION_TYPE_REF_ARGUMENT);  createEReference(tAnnotationTypeRefArgumentEClass,TANNOTATION_TYPE_REF_ARGUMENT__TYPE_REF);  createEOperation(tAnnotationTypeRefArgumentEClass,TANNOTATION_TYPE_REF_ARGUMENT___GET_ARG_AS_STRING);  tAnnotableElementEClass=createEClass(TANNOTABLE_ELEMENT);  createEReference(tAnnotableElementEClass,TANNOTABLE_ELEMENT__ANNOTATIONS);  typeVariableEClass=createEClass(TYPE_VARIABLE);  createEAttribute(typeVariableEClass,TYPE_VARIABLE__DECLARED_COVARIANT);  createEAttribute(typeVariableEClass,TYPE_VARIABLE__DECLARED_CONTRAVARIANT);  createEReference(typeVariableEClass,TYPE_VARIABLE__DECLARED_UPPER_BOUND);  createEOperation(typeVariableEClass,TYPE_VARIABLE___GET_VARIANCE);  createEOperation(typeVariableEClass,TYPE_VARIABLE___GET_TYPE_VARS);  createEOperation(typeVariableEClass,TYPE_VARIABLE___GET_TYPE_AS_STRING);  createEOperation(typeVariableEClass,TYPE_VARIABLE___GET_TYPE_VARIABLE_AS_STRING__TYPEREF);  inferenceVariableEClass=createEClass(INFERENCE_VARIABLE);  tFunctionEClass=createEClass(TFUNCTION);  createEAttribute(tFunctionEClass,TFUNCTION__EXTERNAL);  createEReference(tFunctionEClass,TFUNCTION__FPARS);  createEReference(tFunctionEClass,TFUNCTION__RETURN_TYPE_REF);  createEReference(tFunctionEClass,TFUNCTION__TYPE_VARS);  createEReference(tFunctionEClass,TFUNCTION__DECLARED_THIS_TYPE);  createEAttribute(tFunctionEClass,TFUNCTION__DECLARED_ASYNC);  createEAttribute(tFunctionEClass,TFUNCTION__CONSTRUCTOR);  createEOperation(tFunctionEClass,TFUNCTION___IS_CALLABLE_CONSTRUCTOR);  createEOperation(tFunctionEClass,TFUNCTION___GET_FPAR_FOR_ARG_IDX__INT);  createEOperation(tFunctionEClass,TFUNCTION___GET_FUNCTION_AS_STRING);  createEOperation(tFunctionEClass,TFUNCTION___IS_FINAL);  typeEClass=createEClass(TYPE);  createEOperation(typeEClass,TYPE___IS_PROVIDED_BY_RUNTIME);  createEOperation(typeEClass,TYPE___IS_POLYFILL);  createEOperation(typeEClass,TYPE___IS_STATIC_POLYFILL);  createEOperation(typeEClass,TYPE___IS_FINAL);  createEOperation(typeEClass,TYPE___IS_DYNAMIZABLE);  createEOperation(typeEClass,TYPE___IS_ARRAY_LIKE);  createEOperation(typeEClass,TYPE___GET_ELEMENT_TYPE);  createEOperation(typeEClass,TYPE___GET_TYPE_ACCESS_MODIFIER);  createEOperation(typeEClass,TYPE___IS_GENERIC);  createEOperation(typeEClass,TYPE___GET_TYPE_VARS);  createEOperation(typeEClass,TYPE___GET_VARIANCE_OF_TYPE_VAR__INT);  createEOperation(typeEClass,TYPE___GET_RAW_TYPE_AS_STRING);  createEOperation(typeEClass,TYPE___GET_TYPE_AS_STRING);  accessibleTypeElementEClass=createEClass(ACCESSIBLE_TYPE_ELEMENT);  createEAttribute(accessibleTypeElementEClass,ACCESSIBLE_TYPE_ELEMENT__DECLARED_TYPE_ACCESS_MODIFIER);  createEAttribute(accessibleTypeElementEClass,ACCESSIBLE_TYPE_ELEMENT__DECLARED_PROVIDED_BY_RUNTIME);  createEOperation(accessibleTypeElementEClass,ACCESSIBLE_TYPE_ELEMENT___IS_PROVIDED_BY_RUNTIME);  createEOperation(accessibleTypeElementEClass,ACCESSIBLE_TYPE_ELEMENT___GET_TYPE_ACCESS_MODIFIER);  createEOperation(accessibleTypeElementEClass,ACCESSIBLE_TYPE_ELEMENT___IS_EXPORTED);  declaredTypeWithAccessModifierEClass=createEClass(DECLARED_TYPE_WITH_ACCESS_MODIFIER);  containerTypeEClass=createEClass(CONTAINER_TYPE);  createEAttribute(containerTypeEClass,CONTAINER_TYPE__OWNED_MEMBERS_BY_NAME_AND_ACCESS);  createEReference(containerTypeEClass,CONTAINER_TYPE__OWNED_MEMBERS);  createEReference(containerTypeEClass,CONTAINER_TYPE__CALLABLE_CTOR);  createEReference(containerTypeEClass,CONTAINER_TYPE__TYPE_VARS);  createEOperation(containerTypeEClass,CONTAINER_TYPE___GET_OWNED_CTOR);  createEOperation(containerTypeEClass,CONTAINER_TYPE___FIND_OWNED_MEMBER__STRING);  createEOperation(containerTypeEClass,CONTAINER_TYPE___FIND_OWNED_MEMBER__STRING_BOOLEAN_BOOLEAN);  createEOperation(containerTypeEClass,CONTAINER_TYPE___GET_OR_CREATE_OWNED_MEMBERS_BY_NAME_AND_ACCESS);  virtualBaseTypeEClass=createEClass(VIRTUAL_BASE_TYPE);  createEReference(virtualBaseTypeEClass,VIRTUAL_BASE_TYPE__DECLARED_OWNED_MEMBERS);  moduleNamespaceVirtualTypeEClass=createEClass(MODULE_NAMESPACE_VIRTUAL_TYPE);  createEReference(moduleNamespaceVirtualTypeEClass,MODULE_NAMESPACE_VIRTUAL_TYPE__MODULE);  createEAttribute(moduleNamespaceVirtualTypeEClass,MODULE_NAMESPACE_VIRTUAL_TYPE__DECLARED_DYNAMIC);  createEOperation(moduleNamespaceVirtualTypeEClass,MODULE_NAMESPACE_VIRTUAL_TYPE___IS_PROVIDED_BY_RUNTIME);  primitiveTypeEClass=createEClass(PRIMITIVE_TYPE);  createEReference(primitiveTypeEClass,PRIMITIVE_TYPE__ASSIGNMENT_COMPATIBLE);  createEReference(primitiveTypeEClass,PRIMITIVE_TYPE__AUTOBOXED_TYPE);  builtInTypeEClass=createEClass(BUILT_IN_TYPE);  createEOperation(builtInTypeEClass,BUILT_IN_TYPE___GET_TYPE_VARS);  anyTypeEClass=createEClass(ANY_TYPE);  createEOperation(anyTypeEClass,ANY_TYPE___IS_FINAL);  undefinedTypeEClass=createEClass(UNDEFINED_TYPE);  nullTypeEClass=createEClass(NULL_TYPE);  voidTypeEClass=createEClass(VOID_TYPE);  tStructuralTypeEClass=createEClass(TSTRUCTURAL_TYPE);  createEOperation(tStructuralTypeEClass,TSTRUCTURAL_TYPE___IS_FINAL);  tClassifierEClass=createEClass(TCLASSIFIER);  createEAttribute(tClassifierEClass,TCLASSIFIER__DECLARED_COVARIANT_CONSTRUCTOR);  createEOperation(tClassifierEClass,TCLASSIFIER___IS_ABSTRACT);  createEOperation(tClassifierEClass,TCLASSIFIER___GET_SUPER_CLASSIFIERS);  createEOperation(tClassifierEClass,TCLASSIFIER___GET_SUPER_CLASSIFIER_REFS);  createEOperation(tClassifierEClass,TCLASSIFIER___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS);  createEOperation(tClassifierEClass,TCLASSIFIER___IS_FINAL);  tObjectPrototypeEClass=createEClass(TOBJECT_PROTOTYPE);  createEReference(tObjectPrototypeEClass,TOBJECT_PROTOTYPE__SUPER_TYPE);  createEAttribute(tObjectPrototypeEClass,TOBJECT_PROTOTYPE__DECLARED_FINAL);  createEOperation(tObjectPrototypeEClass,TOBJECT_PROTOTYPE___GET_OWNED_CTOR);  createEOperation(tObjectPrototypeEClass,TOBJECT_PROTOTYPE___IS_FINAL);  arrayLikeEClass=createEClass(ARRAY_LIKE);  createEReference(arrayLikeEClass,ARRAY_LIKE__DECLARED_ELEMENT_TYPE);  createEOperation(arrayLikeEClass,ARRAY_LIKE___GET_ELEMENT_TYPE);  tn4ClassifierEClass=createEClass(TN4_CLASSIFIER);  createEAttribute(tn4ClassifierEClass,TN4_CLASSIFIER__DYNAMIZABLE);  createEAttribute(tn4ClassifierEClass,TN4_CLASSIFIER__TYPING_STRATEGY);  tClassEClass=createEClass(TCLASS);  createEAttribute(tClassEClass,TCLASS__EXTERNAL);  createEAttribute(tClassEClass,TCLASS__DECLARED_ABSTRACT);  createEAttribute(tClassEClass,TCLASS__DECLARED_N4JS);  createEAttribute(tClassEClass,TCLASS__DECLARED_FINAL);  createEAttribute(tClassEClass,TCLASS__DECLARED_POLYFILL);  createEAttribute(tClassEClass,TCLASS__DECLARED_STATIC_POLYFILL);  createEAttribute(tClassEClass,TCLASS__OBSERVABLE);  createEReference(tClassEClass,TCLASS__SUPER_CLASS_REF);  createEReference(tClassEClass,TCLASS__IMPLEMENTED_INTERFACE_REFS);  createEOperation(tClassEClass,TCLASS___IS_ABSTRACT);  createEOperation(tClassEClass,TCLASS___GET_SUPER_CLASS);  createEOperation(tClassEClass,TCLASS___GET_SUPER_CLASSIFIER_REFS);  createEOperation(tClassEClass,TCLASS___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS);  createEOperation(tClassEClass,TCLASS___IS_POLYFILL);  createEOperation(tClassEClass,TCLASS___IS_STATIC_POLYFILL);  createEOperation(tClassEClass,TCLASS___IS_FINAL);  tInterfaceEClass=createEClass(TINTERFACE);  createEAttribute(tInterfaceEClass,TINTERFACE__EXTERNAL);  createEReference(tInterfaceEClass,TINTERFACE__SUPER_INTERFACE_REFS);  createEOperation(tInterfaceEClass,TINTERFACE___IS_ABSTRACT);  createEOperation(tInterfaceEClass,TINTERFACE___GET_SUPER_CLASSIFIER_REFS);  createEOperation(tInterfaceEClass,TINTERFACE___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS);  tMemberEClass=createEClass(TMEMBER);  createEAttribute(tMemberEClass,TMEMBER__DECLARED_FINAL);  createEAttribute(tMemberEClass,TMEMBER__DECLARED_STATIC);  createEAttribute(tMemberEClass,TMEMBER__DECLARED_OVERRIDE);  createEOperation(tMemberEClass,TMEMBER___GET_CONTAINING_TYPE);  createEOperation(tMemberEClass,TMEMBER___GET_MEMBER_ACCESS_MODIFIER);  createEOperation(tMemberEClass,TMEMBER___GET_MEMBER_TYPE);  createEOperation(tMemberEClass,TMEMBER___IS_FIELD);  createEOperation(tMemberEClass,TMEMBER___IS_GETTER);  createEOperation(tMemberEClass,TMEMBER___IS_SETTER);  createEOperation(tMemberEClass,TMEMBER___IS_ACCESSOR);  createEOperation(tMemberEClass,TMEMBER___IS_METHOD);  createEOperation(tMemberEClass,TMEMBER___IS_CONSTRUCTOR);  createEOperation(tMemberEClass,TMEMBER___IS_OPTIONAL);  createEOperation(tMemberEClass,TMEMBER___IS_ABSTRACT);  createEOperation(tMemberEClass,TMEMBER___IS_READABLE);  createEOperation(tMemberEClass,TMEMBER___IS_WRITEABLE);  createEOperation(tMemberEClass,TMEMBER___GET_MEMBER_AS_STRING);  createEOperation(tMemberEClass,TMEMBER___IS_FINAL);  createEOperation(tMemberEClass,TMEMBER___IS_STATIC);  createEOperation(tMemberEClass,TMEMBER___IS_POLYFILLED);  tMemberWithAccessModifierEClass=createEClass(TMEMBER_WITH_ACCESS_MODIFIER);  createEAttribute(tMemberWithAccessModifierEClass,TMEMBER_WITH_ACCESS_MODIFIER__HAS_NO_BODY);  createEAttribute(tMemberWithAccessModifierEClass,TMEMBER_WITH_ACCESS_MODIFIER__DECLARED_MEMBER_ACCESS_MODIFIER);  createEOperation(tMemberWithAccessModifierEClass,TMEMBER_WITH_ACCESS_MODIFIER___GET_MEMBER_ACCESS_MODIFIER);  tStructMemberEClass=createEClass(TSTRUCT_MEMBER);  createEReference(tStructMemberEClass,TSTRUCT_MEMBER__DEFINED_MEMBER);  createEOperation(tStructMemberEClass,TSTRUCT_MEMBER___GET_DEFAULT_MEMBER_ACCESS_MODIFIER);  createEOperation(tStructMemberEClass,TSTRUCT_MEMBER___IS_STATIC);  createEOperation(tStructMemberEClass,TSTRUCT_MEMBER___GET_MEMBER_ACCESS_MODIFIER);  tMethodEClass=createEClass(TMETHOD);  createEAttribute(tMethodEClass,TMETHOD__DECLARED_ABSTRACT);  createEAttribute(tMethodEClass,TMETHOD__LACKS_THIS_OR_SUPER_USAGE);  createEOperation(tMethodEClass,TMETHOD___IS_ABSTRACT);  createEOperation(tMethodEClass,TMETHOD___GET_MEMBER_TYPE);  createEOperation(tMethodEClass,TMETHOD___IS_CONSTRUCTOR);  createEOperation(tMethodEClass,TMETHOD___GET_FUNCTION_AS_STRING);  createEOperation(tMethodEClass,TMETHOD___GET_MEMBER_AS_STRING);  tStructMethodEClass=createEClass(TSTRUCT_METHOD);  tFormalParameterEClass=createEClass(TFORMAL_PARAMETER);  createEAttribute(tFormalParameterEClass,TFORMAL_PARAMETER__VARIADIC);  createEReference(tFormalParameterEClass,TFORMAL_PARAMETER__TYPE_REF);  createEOperation(tFormalParameterEClass,TFORMAL_PARAMETER___IS_OPTIONAL);  createEOperation(tFormalParameterEClass,TFORMAL_PARAMETER___IS_VARIADIC_OR_OPTIONAL);  createEOperation(tFormalParameterEClass,TFORMAL_PARAMETER___GET_FORMAL_PARAMETER_AS_STRING);  tAnonymousFormalParameterEClass=createEClass(TANONYMOUS_FORMAL_PARAMETER);  createEOperation(tAnonymousFormalParameterEClass,TANONYMOUS_FORMAL_PARAMETER___GET_NAME);  createEOperation(tAnonymousFormalParameterEClass,TANONYMOUS_FORMAL_PARAMETER___GET_DEFINED_NAME);  tFieldEClass=createEClass(TFIELD);  createEAttribute(tFieldEClass,TFIELD__CONST);  createEAttribute(tFieldEClass,TFIELD__HAS_EXPRESSION);  createEReference(tFieldEClass,TFIELD__TYPE_REF);  createEOperation(tFieldEClass,TFIELD___IS_OPTIONAL);  createEOperation(tFieldEClass,TFIELD___IS_STATIC);  createEOperation(tFieldEClass,TFIELD___IS_READABLE);  createEOperation(tFieldEClass,TFIELD___IS_WRITEABLE);  createEOperation(tFieldEClass,TFIELD___GET_MEMBER_TYPE);  createEOperation(tFieldEClass,TFIELD___GET_MEMBER_AS_STRING);  tStructFieldEClass=createEClass(TSTRUCT_FIELD);  fieldAccessorEClass=createEClass(FIELD_ACCESSOR);  createEAttribute(fieldAccessorEClass,FIELD_ACCESSOR__DECLARED_ABSTRACT);  createEReference(fieldAccessorEClass,FIELD_ACCESSOR__DECLARED_THIS_TYPE);  createEOperation(fieldAccessorEClass,FIELD_ACCESSOR___GET_DECLARED_TYPE_REF);  createEOperation(fieldAccessorEClass,FIELD_ACCESSOR___IS_ABSTRACT);  tGetterEClass=createEClass(TGETTER);  createEReference(tGetterEClass,TGETTER__DECLARED_TYPE_REF);  createEOperation(tGetterEClass,TGETTER___GET_MEMBER_TYPE);  createEOperation(tGetterEClass,TGETTER___GET_MEMBER_AS_STRING);  tStructGetterEClass=createEClass(TSTRUCT_GETTER);  tSetterEClass=createEClass(TSETTER);  createEReference(tSetterEClass,TSETTER__FPAR);  createEOperation(tSetterEClass,TSETTER___GET_DECLARED_TYPE_REF);  createEOperation(tSetterEClass,TSETTER___IS_READABLE);  createEOperation(tSetterEClass,TSETTER___IS_WRITEABLE);  createEOperation(tSetterEClass,TSETTER___GET_MEMBER_TYPE);  createEOperation(tSetterEClass,TSETTER___GET_MEMBER_AS_STRING);  tStructSetterEClass=createEClass(TSTRUCT_SETTER);  createEOperation(tStructSetterEClass,TSTRUCT_SETTER___IS_WRITEABLE);  tEnumEClass=createEClass(TENUM);  createEAttribute(tEnumEClass,TENUM__EXTERNAL);  createEReference(tEnumEClass,TENUM__LITERALS);  createEOperation(tEnumEClass,TENUM___GET_TYPE_VARS);  tEnumLiteralEClass=createEClass(TENUM_LITERAL);  createEAttribute(tEnumLiteralEClass,TENUM_LITERAL__VALUE);  syntaxRelatedTElementEClass=createEClass(SYNTAX_RELATED_TELEMENT);  createEReference(syntaxRelatedTElementEClass,SYNTAX_RELATED_TELEMENT__AST_ELEMENT);  tVariableEClass=createEClass(TVARIABLE);  createEReference(tVariableEClass,TVARIABLE__TYPE_REF);  createEAttribute(tVariableEClass,TVARIABLE__CONST);  createEAttribute(tVariableEClass,TVARIABLE__EXTERNAL);  createEOperation(tVariableEClass,TVARIABLE___GET_VARIABLE_AS_STRING);  nullModifierEEnum=createEEnum(NULL_MODIFIER);  undefModifierEEnum=createEEnum(UNDEF_MODIFIER);  typingStrategyEEnum=createEEnum(TYPING_STRATEGY);  typeAccessModifierEEnum=createEEnum(TYPE_ACCESS_MODIFIER);  memberAccessModifierEEnum=createEEnum(MEMBER_ACCESS_MODIFIER);  memberTypeEEnum=createEEnum(MEMBER_TYPE);  iterableOfTClassifierEDataType=createEDataType(ITERABLE_OF_TCLASSIFIER);  varianceEDataType=createEDataType(VARIANCE);  nameAndAccessEDataType=createEDataType(NAME_AND_ACCESS);  memberListEDataType=createEDataType(MEMBER_LIST);  tClassifierIterableEDataType=createEDataType(TCLASSIFIER_ITERABLE);}  }
class C{  public static final String extractIplIdentityHostFrimwareRev(LocoNetMessage m){  StringBuilder s=new StringBuilder();  s.append(Integer.toString((m.getElement(8) & 0x78) >> 3));  s.append(".");  s.append(Integer.toString((m.getElement(8) & 0x07)));  return s.toString();}  }
class C{  public ServiceTest(String caseName,Element mainElement){  super(caseName);  this.serviceName=mainElement.getAttribute("service-name");}  }
class C{  public boolean isDefault(){  return (is_default);}  }
class C{  public TableCategory(String name,int iconID,boolean filtering){  setName(name);  setFilterEnabled(filtering);  setIconID(iconID);}  }
class C{  @Override public boolean isEssential(){  return !LIGHT_ICON_SET.contains(icon);}  }
class C{  private void initCommandList(){  commandList.removeAllItems();  Command[] buttons=Command.values();  commandList.addItem("None");  for (int i=0; i < buttons.length; i++) {    Command button=buttons[i];    commandList.addItem(button.name());  }}  }
class C{  private void openDownloadsPage(Context context){  Intent pageView=new Intent(DownloadManager.ACTION_VIEW_DOWNLOADS);  pageView.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(pageView);}  }
class C{  public String toString(){  int selCount=getSelectionCount();  StringBuffer retBuffer=new StringBuffer();  int[] rows;  if (rowMapper != null)   rows=rowMapper.getRowsForPaths(selection); else   rows=null;  retBuffer.append(getClass().getName() + " " + hashCode()+ " [ ");  for (int counter=0; counter < selCount; counter++) {    if (rows != null)     retBuffer.append(selection[counter].toString() + "@" + Integer.toString(rows[counter])+ " "); else     retBuffer.append(selection[counter].toString() + " ");  }  retBuffer.append("]");  return retBuffer.toString();}  }
class C{  public @Test final void testCreationNegative3(){  thrown.expect(IllegalArgumentException.class);  new Email(null,"force something, still no mail check");}  }
class C{  public BugObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public MySQLOperationMatcher(){  prefixBuilder=new MySQLOperationStringBuilder(PREFIX_LENGTH);}  }
class C{  public void dumpConfig(){  Iterator<String> miter=getConfigMap().keySet().iterator();  System.out.println("---Dumping configFile '" + _filePath + "' without comments---");  System.out.println("---------------------------------------------");  while (miter.hasNext()) {    String key=miter.next();    System.out.println(key + _divider + getConfigMap().get(key));  }  System.out.println("---------------------------------------------");}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeInt(table.length);  s.writeInt(count);  for (int index=table.length - 1; index >= 0; index--) {    Entry entry=table[index];    while (entry != null) {      s.writeObject(entry.key);      s.writeObject(entry.value);      entry=entry.next;    }  }}  }
class C{  @Override public Descriptor clone(){  return this;}  }
class C{  @Override public V call(final Object arguments){  return loop(original.call(arguments));}  }
class C{  public void checkJarCertificates(File file) throws Exception {  JarFile jarFile=new JarFile(file);  JarEntry je=jarFile.getJarEntry("AndroidManifest.xml");  byte[] readBuffer=new byte[1024];  long t0=System.currentTimeMillis();  InputStream is=jarFile.getInputStream(je);  while (is.read(readBuffer,0,readBuffer.length) != -1) {  }  is.close();  Certificate[] certs=je != null ? je.getCertificates() : null;  long t1=System.currentTimeMillis();  System.out.println("loadCertificates() took " + (t1 - t0) + " ms");  if (certs == null) {    System.out.println("We have no certificates");  } else {    System.out.println("We have " + certs.length + " certificates");  }}  }
class C{  protected void inLocationSelectionCheckZonesAndTentsDisplayed(){  expectVisibleSoon(viewWithText("ALL PRESENT PATIENTS"));  expectVisible(viewWithText("Triage"));  expectVisible(viewWithText(LOCATION_NAME));  expectVisible(viewWithText("Discharged"));}  }
class C{  public int compareTo(Entry other){  if (address < other.address) {    return -1;  } else   if (address > other.address) {    return 1;  }  boolean thisIsStart=isStart();  boolean otherIsStart=other.isStart();  if (thisIsStart != otherIsStart) {    return thisIsStart ? 1 : -1;  }  return spec.compareTo(other.spec);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:45.281 -0500",hash_original_method="ED7115340A8A7EF690F3B814A164C906",hash_generated_method="D989FEEA6C655E7554E6D80F9E00F0E6") private static int compareStrings(String... values){  if ((values.length % 2) != 0) {    throw new IllegalArgumentException("you must specify an even number of values");  }  for (int index=0; index < values.length; index+=2) {    if (values[index] == null) {      if (values[index + 1] == null)       continue;      return -1;    }    if (values[index + 1] == null) {      return 1;    }    int comp=values[index].compareTo(values[index + 1]);    if (comp != 0) {      return (comp + values[0].length());    }  }  return 0;}  }
class C{  MenuItemImpl(MenuBuilder menu,int group,int id,int categoryOrder,int ordering,CharSequence title,int showAsAction){  mMenu=menu;  mId=id;  mGroup=group;  mCategoryOrder=categoryOrder;  mOrdering=ordering;  mTitle=title;  mShowAsAction=showAsAction;}  }
class C{  public void testGetDateAndTime(){  X509CRLSelector selector=new X509CRLSelector();  assertNull("Initially the dateAndTime criteria should be null.",selector.getDateAndTime());  Date date=new Date(200);  selector.setDateAndTime(date);  assertTrue("The result should be equal to specified.",date.equals(selector.getDateAndTime()));}  }
class C{  private static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  DecimalFormat dft=new DecimalFormat("###.##");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  public int v1(){  return v1;}  }
class C{  @Interruptible public static Address allocateArray(BootImageInterface bootImage,RVMArray array,int numElements,boolean needsIdentityHash,int identityHashValue,int align,int alignCode){  TIB tib=array.getTypeInformationBlock();  int size=array.getInstanceSize(numElements);  if (needsIdentityHash) {    if (ADDRESS_BASED_HASHING) {      size+=HASHCODE_BYTES;    } else {      throw new Error("Unsupported allocation");    }  }  int offset=getOffsetForAlignment(array,needsIdentityHash);  int padding=AlignmentEncoding.padding(alignCode);  Address ptr=bootImage.allocateDataStorage(size + padding,align,offset);  ptr=AlignmentEncoding.adjustRegion(alignCode,ptr);  Address ref=JavaHeader.initializeArrayHeader(bootImage,ptr,tib,size,numElements,needsIdentityHash,identityHashValue);  bootImage.setFullWord(ref.plus(getArrayLengthOffset()),numElements);  MemoryManager.initializeHeader(bootImage,ref,tib,size,false);  MiscHeader.initializeHeader(bootImage,ref,tib,size,false);  return ref;}  }
class C{  public Key max(){  if (isEmpty())   throw new NoSuchElementException("called max() with empty symbol table");  return st.lastKey();}  }
class C{  public static MailOperationException convertToApi(org.oscm.internal.types.exception.MailOperationException oldEx){  return convertExceptionToApi(oldEx,MailOperationException.class);}  }
class C{  public static void fill(Object[] array,Object value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  protected void saveBuffer(String name){  StringBuffer sb=m_History.getNamedBuffer(name);  if (sb != null) {    if (m_SaveOut.save(sb)) {      m_Log.logMessage("Save successful.");    }  }}  }
class C{  public void stopProcessing(){  interrupted=true;  outputStream.close();  inputStream.close();}  }
class C{  public void testSetF26(){  boolean f26=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF26(f26);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F21-F28 since no command station defined");}  }
class C{  private boolean validateFunctionArgumentTypes(final Processor<ElementComponentKey,? extends ConsumerFunctionContext<ElementComponentKey,? extends ConsumerFunction>> processor,final ViewElementDefinition viewElDef,final SchemaElementDefinition schemaElDef){  if (null != processor && null != processor.getFunctions()) {    for (    ConsumerFunctionContext<ElementComponentKey,? extends ConsumerFunction> context : processor.getFunctions()) {      if (null == context.getFunction()) {        LOGGER.error(processor.getClass().getSimpleName() + " contains a function context with a null function.");        return false;      }      if (!validateFunctionSelectionTypes(viewElDef,schemaElDef,context)) {        return false;      }      if (context instanceof ConsumerProducerFunctionContext && !validateFunctionProjectionTypes(viewElDef,schemaElDef,(ConsumerProducerFunctionContext<ElementComponentKey,? extends ConsumerFunction>)context)) {        return false;      }    }  }  return true;}  }
class C{  public int nextClearBit(int fromIndex){  int i=fromIndex >> ADDRESS_BITS;  int max=data.length;  for (; i < max; i++) {    if (data[i] == -1) {      continue;    }    int j=Math.max(fromIndex,i << ADDRESS_BITS);    for (int end=j + 64; j < end; j++) {      if (!get(j)) {        return j;      }    }  }  return max << ADDRESS_BITS;}  }
class C{  public static Array listToArrayRemoveEmpty(String list,char delimiter){  int len=list.length();  ArrayImpl array=new ArrayImpl();  if (len == 0)   return array;  int last=0;  for (int i=0; i < len; i++) {    if (list.charAt(i) == delimiter) {      if (last < i)       array._append(list.substring(last,i));      last=i + 1;    }  }  if (last < len)   array._append(list.substring(last));  return array;}  }
class C{  public static AffineTransformation rotationInstance(double theta,double x,double y){  return rotationInstance(Math.sin(theta),Math.cos(theta),x,y);}  }
class C{  public KeyValueTableView(ObservableList<Pair<K,V>> items,ObservableList<K> skipKeys){  this(items,skipKeys,null,null);}  }
class C{  @Override public Vertex parseExpressionForEvaluation(String code,Vertex speaker,Vertex target,boolean debug,Network network){  TextStream stream=new TextStream(code);  try {    Map<String,Map<String,Vertex>> elements=new HashMap<String,Map<String,Vertex>>();    elements.put(VARIABLE,new HashMap<String,Vertex>());    elements.get(VARIABLE).put("speaker",speaker);    elements.get(VARIABLE).put("target",target);    elements.put(EQUATION,new HashMap<String,Vertex>());    getComments(stream);    Vertex expression=network.createTemporyVertex();    expression.addRelationship(Primitive.INSTANTIATION,Primitive.EXPRESSION);    BinaryData byteCode=new BinaryData();    ByteArrayOutputStream byteStream=new ByteArrayOutputStream();    DataOutputStream dataStream=new DataOutputStream(byteStream);    dataStream.writeLong(network.createVertex(Primitive.EXPRESSION).getId());    dataStream.writeLong(network.createVertex(Primitive.DO).getId());    dataStream.writeLong(network.createVertex(Primitive.DO).getId());    stream.skipWhitespace();    parseElementByteCode(stream,dataStream,elements,debug,network);    stream.skipWhitespace();    while (stream.peek() == ';') {      stream.skip();      stream.skipWhitespace();      if (stream.atEnd()) {        break;      }      parseElementByteCode(stream,dataStream,elements,debug,network);      stream.skipWhitespace();    }    if (!stream.atEnd()) {      throw new SelfParseException("Unexpect element " + stream.peekWord(),stream);    }    dataStream.writeLong(0l);    dataStream.writeLong(0l);    dataStream.writeLong(0l);    byteCode.setBytes(byteStream.toByteArray());    expression.setData(byteCode);    network.getBot().log(this,"Compiled new expression for evaluation",Level.INFO,expression);    return expression;  } catch (  SelfParseException exception) {    throw exception;  }catch (  Exception exception) {    network.getBot().log(this,exception);    throw new SelfParseException("Parsing error occurred",stream,exception);  }}  }
class C{  public void itemStateChanged(ItemEvent e){  ((ItemListener)a).itemStateChanged(e);  ((ItemListener)b).itemStateChanged(e);}  }
class C{  public boolean nullable(){  return _nullable;}  }
class C{  public boolean performSave(GlowChunk chunk){  if (chunk.isLoaded()) {    try {      service.write(chunk);      return true;    } catch (    IOException ex) {      GlowServer.logger.log(Level.SEVERE,"Error while saving " + chunk,ex);      return false;    }  }  return false;}  }
class C{  private Socks4Message socksReadReply() throws IOException {  Socks4Message reply=new Socks4Message();  int bytesRead=0;  while (bytesRead < Socks4Message.REPLY_LENGTH) {    int count=getInputStream().read(reply.getBytes(),bytesRead,Socks4Message.REPLY_LENGTH - bytesRead);    if (count == -1) {      break;    }    bytesRead+=count;  }  if (Socks4Message.REPLY_LENGTH != bytesRead) {    throw new SocketException("Malformed reply from SOCKS server");  }  return reply;}  }
class C{  private boolean containsMethod(String signature){  String mName=SootUtils.grabName(signature);  String[] args=SootUtils.grabArgs(signature);  String rtype=SootUtils.grabReturnType(signature);  for (  SootMethod curr : methods) {    if (!curr.getName().equals(mName) || curr.getParameterCount() != args.length)     continue;    Type returnType=SootUtils.toSootType(rtype);    if (!SootUtils.isSubTypeOfIncluding(returnType,curr.getReturnType()))     continue;    boolean foundIncompArg=false;    for (int i=0; i < args.length; i++) {      if (!SootUtils.isSubTypeOfIncluding(SootUtils.toSootType(args[i]),curr.getParameterType(i))) {        foundIncompArg=true;        continue;      }    }    if (foundIncompArg)     continue;    return true;  }  return false;}  }
class C{  @Override public Enumeration<GraphNode> enumerateNodes(){  return new NodeEnumeration(_firstNode);}  }
class C{  public OnCycleEventItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static String encodeBase64ToString(byte[] data){  byte[] encoded=encodeBase64(data);  StringBuffer encodedBuff=new StringBuffer();  for (int i=0; i < encoded.length; i++) {    encodedBuff.append((char)encoded[i]);  }  return encodedBuff.toString();}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public boolean isBlank(){  return isBlank(0,length());}  }
class C{  @Override public void write(byte[] buf) throws IOException {  write(buf,0,buf.length);}  }
class C{  public RefUpdate.Result save(CommitBuilder cb) throws PGPException, IOException {  if (toAdd.isEmpty() && toRemove.isEmpty()) {    return RefUpdate.Result.NO_CHANGE;  }  if (reader == null) {    load();  }  if (notes == null) {    notes=NoteMap.newEmptyMap();  }  ObjectId newTip;  try (ObjectInserter ins=repo.newObjectInserter()){    for (    PGPPublicKeyRing keyRing : toAdd.values()) {      saveToNotes(ins,keyRing);    }    for (    Fingerprint fp : toRemove) {      deleteFromNotes(ins,fp);    }    cb.setTreeId(notes.writeTree(ins));    if (cb.getTreeId().equals(tip != null ? tip.getTree() : EMPTY_TREE)) {      return RefUpdate.Result.NO_CHANGE;    }    if (tip != null) {      cb.setParentId(tip);    }    if (cb.getMessage() == null) {      int n=toAdd.size() + toRemove.size();      cb.setMessage(String.format("Update %d public key%s",n,n != 1 ? "s" : ""));    }    newTip=ins.insert(cb);    ins.flush();  }   RefUpdate ru=repo.updateRef(PublicKeyStore.REFS_GPG_KEYS);  ru.setExpectedOldObjectId(tip);  ru.setNewObjectId(newTip);  ru.setRefLogIdent(cb.getCommitter());  ru.setRefLogMessage("Store public keys",true);  RefUpdate.Result result=ru.update();  reset();switch (result) {case FAST_FORWARD:case NEW:case NO_CHANGE:    toAdd.clear();  toRemove.clear();break;case FORCED:case IO_FAILURE:case LOCK_FAILURE:case NOT_ATTEMPTED:case REJECTED:case REJECTED_CURRENT_BRANCH:case RENAMED:default :break;}return result;}  }
class C{  public MetacatException(Response response,Throwable cause){  super(cause,response);}  }
class C{  public static int sumOfDoubleEvenPlace(long number){  int sum=0;  String num=number + "";  for (int i=getSize(number) - 2; i >= 0; i-=2) {    sum+=getDigit(Integer.parseInt(num.charAt(i) + "") * 2);  }  return sum;}  }
class C{  public boolean forEachEntry(TObjectDoubleProcedure<K> procedure){  K[] keys=(K[])_set;  double[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  protected void computeIM(IntersectionMatrix im){  im.setAtLeastIfValid(label.getLocation(0),label.getLocation(1),0);}  }
class C{  public int firstLine(){  return firstLine;}  }
class C{  public static void addMessageProperties(ClientMessage message,Map<String,Object> properties){  if (properties != null && properties.size() > 0) {    for (    Map.Entry<String,Object> property : properties.entrySet()) {      message.putObjectProperty(property.getKey(),property.getValue());    }  }}  }
class C{  public static void test1000Words() throws Exception {  DatabaseMemory.DATABASE_URL="jdbc:derby:top1000words;create=true";  DatabaseMemory.TEST=true;  DatabaseMemory.RECREATE_DATABASE=true;  Bot bot=Bot.createInstance();  bot.setDebugLevel(Level.OFF);  Sense sense=bot.awareness().getSense(Http.class.getName());  sense.input(new URL("http://en.wiktionary.org/wiki/Category:1000_English_basic_words"));  bot.shutdown();}  }
class C{  protected static Polygon makePoly(final PlanetModel pm,final GeoPoint pole,final boolean clockwiseDesired,final boolean createHoles){  final int pointCount=TestUtil.nextInt(random(),3,10);  final double[] angles=new double[pointCount];  final double[] arcDistance=new double[pointCount];  while (true) {    double accumulatedAngle=0.0;    for (int i=0; i < pointCount; i++) {      final int remainingEdgeCount=pointCount - i;      final double remainingAngle=2.0 * Math.PI - accumulatedAngle;      if (remainingEdgeCount == 1) {        angles[i]=remainingAngle;      } else {        double maximumAngle=remainingAngle - (remainingEdgeCount - 1) * MINIMUM_EDGE_ANGLE;        if (maximumAngle > Math.PI) {          maximumAngle=Math.PI;        }        final double minimumAngle=MINIMUM_EDGE_ANGLE;        final double angle=random().nextDouble() * (maximumAngle - minimumAngle) + minimumAngle;        angles[i]=angle;        accumulatedAngle+=angle;      }      arcDistance[i]=random().nextDouble() * (Math.PI * 0.5 - MINIMUM_ARC_ANGLE) + MINIMUM_ARC_ANGLE;    }    if (clockwiseDesired) {      for (int i=0; i < pointCount; i++) {        angles[i]=-angles[i];      }    }    final List<GeoPoint> polyPoints=convertToPoints(pm,pole,angles,arcDistance);    final int holeCount=createHoles ? TestUtil.nextInt(random(),0,2) : 0;    final List<Polygon> holeList=new ArrayList<>();    final Polygon[] holes=holeList.toArray(new Polygon[0]);    final double[] lats=new double[polyPoints.size() + 1];    final double[] lons=new double[polyPoints.size() + 1];    for (int i=0; i < polyPoints.size(); i++) {      lats[i]=polyPoints.get(i).getLatitude() * 180.0 / Math.PI;      lons[i]=polyPoints.get(i).getLongitude() * 180.0 / Math.PI;    }    lats[polyPoints.size()]=lats[0];    lons[polyPoints.size()]=lons[0];    return new Polygon(lats,lons,holes);  }}  }
class C{  public int cellToOffset(int row,int col){  return table.cellToOffset(row,col);}  }
class C{  public static boolean sslServerSocketSupportsSessionTickets(){  return false;}  }
class C{  public void collectiveUpdated(ContributionBox peer){  List peers=collective.getContributions();  for (int i=0; i < peers.size(); ++i) {    double[] contrib=(double[])((ContributionBox)peers.get(i)).contribution;    if (contrib[1] > currentValue) synchronized (this) {      currentSolution=contrib[0];      currentValue=contrib[1];    }  }  if (name.endsWith("root"))   try {    FileWriter fw=new FileWriter(conf.getProperty("hillclimber.outFile","hillclimber.out"),true);    for (int i=0; i < peers.size(); ++i) {      double[] contrib=(double[])((ContributionBox)peers.get(i)).contribution;      fw.write(contrib[0] + " " + contrib[1]+ "\n");    }    fw.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected synchronized QueueConnectionFactory lookupQueueConnectionFactoryFromJNDI(String uri) throws NamingException {  final InitialContext jndiContext=getInitialContext();  return (QueueConnectionFactory)jndiContext.lookup(uri);}  }
class C{  private X509Certificate parseHolderOfKeyConfirmation(SubjectType subject){  SubjectConfirmationDataType subjectConfirmationData=subject.getSubjectConfirmation().getSubjectConfirmationData();  if (!(subjectConfirmationData instanceof KeyInfoConfirmationDataType)) {    throw new WSFaultException(FaultKey.WSSE_UNSUPPORTED_SECURITY_TOKEN,"Unknow SubjectConfirmation type");  }  KeyInfoType keyInfo=getTheValue(subjectConfirmationData.getContent(),KeyInfoType.class,FaultKey.WSSE_INVALID_SECURITY_TOKEN,"Assetion KeyInfo not found/valid");  X509DataType x509Data=getTheValue(keyInfo.getContent(),X509DataType.class,FaultKey.WSSE_INVALID_SECURITY_TOKEN,"X509 data not found");  byte[] cert=getTheValue(x509Data.getX509IssuerSerialOrX509SKIOrX509SubjectName(),byte[].class,FaultKey.WSSE_INVALID_SECURITY_TOKEN,"Confirmation certificate not found");  return decodeCertificate(cert);}  }
class C{  public void init(FilterConfig filterConfig) throws ServletException {  this.filterConfig=filterConfig;  this.encoding=filterConfig.getInitParameter("encoding");  String value=filterConfig.getInitParameter("ignore");  if (value == null)   this.ignore=true; else   if (value.equalsIgnoreCase("true"))   this.ignore=true; else   if (value.equalsIgnoreCase("yes"))   this.ignore=true; else   this.ignore=false;}  }
class C{  public static void synchronizeTempDirVfs(VirtualFile tempDir){  tempDir.getChildren();  tempDir.refresh(false,true);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case OrientedPackage.COMPONENT__INPUT_COMPONET_REFS:    getInputComponetRefs().clear();  getInputComponetRefs().addAll((Collection<? extends Component>)newValue);return;case OrientedPackage.COMPONENT__OUTPUT_COMPONET_REFS:getOutputComponetRefs().clear();getOutputComponetRefs().addAll((Collection<? extends Component>)newValue);return;case OrientedPackage.COMPONENT__INPUT_PORT_REFS:getInputPortRefs().clear();getInputPortRefs().addAll((Collection<? extends Port>)newValue);return;case OrientedPackage.COMPONENT__OUTPUT_PORT_REFS:getOutputPortRefs().clear();getOutputPortRefs().addAll((Collection<? extends Port>)newValue);return;case OrientedPackage.COMPONENT__ID:setId((String)newValue);return;case OrientedPackage.COMPONENT__INPUT_CNT:setInputCnt((Integer)newValue);return;case OrientedPackage.COMPONENT__OUTPUT_CNT:setOutputCnt((Integer)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean interfaceOf(Object obj,String interfaceName) throws ClassNotFoundException {  Class<?> interfaceClass=loadClass(interfaceName);  return interfaceOf(obj,interfaceClass);}  }
class C{  public boolean isTotal(){  String pt=getPAPeriodType();  if (pt == null)   return false;  return PAPERIODTYPE_Total.equals(pt);}  }
class C{  @SuppressWarnings("unchecked") public void validateRemotes(CacheConfiguration rmtCfg,ClusterNode rmtNode) throws IgniteCheckedException {  for (  Map.Entry<CachePluginContext,CachePluginProvider> entry : providersMap.entrySet()) {    CachePluginContext cctx=entry.getKey();    CachePluginProvider provider=entry.getValue();    provider.validateRemote(cctx.igniteCacheConfiguration(),cctx.cacheConfiguration(),rmtCfg,rmtNode);  }}  }
class C{  public void appendCloseHeaderTag(int level){  if (level > 3 || level < 1) {    return;  }  StringBuilder sb=new StringBuilder("</h");  sb.append(level);  sb.append(">");  text.append(sb.toString());}  }
class C{  static public double perc(Number value,Number max){  ArgumentChecking.notNull(value,"value");  ArgumentChecking.notNull(max,"max");  return perc(value.doubleValue(),max.doubleValue());}  }
class C{  public void testBehaviours(final View v){  final Intent testActivity=new Intent(this,TestBehaviours.class);  startActivity(testActivity);}  }
class C{  @Override public Object onRetainNonConfigurationInstance(){  FormController formController=Collect.getInstance().getFormController();  if (mFormLoaderTask != null && mFormLoaderTask.getStatus() != AsyncTask.Status.FINISHED)   return mFormLoaderTask;  if (mSaveToDiskTask != null && mSaveToDiskTask.getStatus() != AsyncTask.Status.FINISHED)   return mSaveToDiskTask;  if (formController != null && formController.currentPromptIsQuestion()) {    saveAnswersForCurrentScreen(DO_NOT_EVALUATE_CONSTRAINTS);  }  return null;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  resetLock();  int len=s.readInt();  Object[] elements=new Object[len];  for (int i=0; i < len; i++)   elements[i]=s.readObject();  setArray(elements);}  }
class C{  public static byte[] readByteArray(final DataInput in) throws IOException {  int len=WritableUtils.readVInt(in);  if (len < 0) {    throw new NegativeArraySizeException(Integer.toString(len));  }  byte[] result=new byte[len];  in.readFully(result,0,len);  return result;}  }
class C{  private void processStart(final State current){  if (current.isSelfProgressionDisabled) {    ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    return;  }  try {    if (!isFinalStage(current)) {      if (current.nextPageLink == null) {        Operation queryEntityLocksPagination=Operation.createPost(UriUtils.buildUri(getHost(),ServiceUriPaths.CORE_LOCAL_QUERY_TASKS)).setBody(buildEntityLockQuery(current));        queryEntityLocksPagination.setCompletion((null)).sendWith(this);      }    }  } catch (  Throwable e) {    failTask(e);  }}  }
class C{  public static <T extends Comparable<?>>Range<T> greaterThan(T lowerEndpoint){  return Range.range(lowerEndpoint,BoundType.OPEN,null,BoundType.OPEN);}  }
class C{  public DebuggerEventSettingsStorage(final IDebugger debugger,final DebugTargetSettings debugTarget){  super(debugger,debugTarget);}  }
class C{  public HttpRequestCreateException(String error,Exception t){  super(error,t);}  }
class C{  public Jonas5xRuntimeConfigurationCapability(){  this.propertySupportMap.put(JonasPropertySet.JONAS_UNDEPLOY_IGNORE_VERSION,Boolean.TRUE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:36.246 -0500",hash_original_method="9B8C4723941705C4AF87CD12244595BD",hash_generated_method="DD7F4EF291BE4E4AF536E68B0F4C8912") public PKCS10CertificationRequest(String signatureAlgorithm,X509Name subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  String algorithmName=Strings.toUpperCase(signatureAlgorithm);  DERObjectIdentifier sigOID=(DERObjectIdentifier)algorithms.get(algorithmName);  if (sigOID == null) {    try {      sigOID=new DERObjectIdentifier(algorithmName);    } catch (    Exception e) {      throw new IllegalArgumentException("Unknown signature type requested");    }  }  if (subject == null) {    throw new IllegalArgumentException("subject must not be null");  }  if (key == null) {    throw new IllegalArgumentException("public key must not be null");  }  if (noParams.contains(sigOID)) {    this.sigAlgId=new AlgorithmIdentifier(sigOID);  } else   if (params.containsKey(algorithmName)) {    this.sigAlgId=new AlgorithmIdentifier(sigOID,(DEREncodable)params.get(algorithmName));  } else {    this.sigAlgId=new AlgorithmIdentifier(sigOID,DERNull.INSTANCE);  }  try {    ASN1Sequence seq=(ASN1Sequence)ASN1Object.fromByteArray(key.getEncoded());    this.reqInfo=new CertificationRequestInfo(subject,new SubjectPublicKeyInfo(seq),attributes);  } catch (  IOException e) {    throw new IllegalArgumentException("can't encode public key");  }  Signature sig;  if (provider == null) {    sig=Signature.getInstance(signatureAlgorithm);  } else {    sig=Signature.getInstance(signatureAlgorithm,provider);  }  sig.initSign(signingKey);  try {    sig.update(reqInfo.getEncoded(ASN1Encodable.DER));  } catch (  Exception e) {    throw new IllegalArgumentException("exception encoding TBS cert request - " + e);  }  this.sigBits=new DERBitString(sig.sign());}  }
class C{  public void share(String text,String image,String mimeType,Rectangle sourceRect){  impl.share(text,image,mimeType,sourceRect);}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  public ConnPoolByRoute(final ClientConnectionOperator operator,final HttpParams params){  super();  if (operator == null) {    throw new IllegalArgumentException("Connection operator may not be null");  }  this.operator=operator;  freeConnections=createFreeConnQueue();  waitingThreads=createWaitingThreadQueue();  routeToPool=createRouteToPoolMap();  maxTotalConnections=ConnManagerParams.getMaxTotalConnections(params);  connPerRoute=ConnManagerParams.getMaxConnectionsPerRoute(params);}  }
class C{  public static TaskContext currentFor(Thread thread){  final Deque<TaskContext> stack;synchronized (contextStacksMap) {    stack=contextStacksMap.get(thread);  }  return (stack != null) ? stack.peek() : null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributeNS02.class,args);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void considerPathXRegion(GeoPath path,GeoRegion region){  for (GeoPath.SegmentIterator pit=path.segmentIterator(); pit.hasNext(); ) {    GeoSegment seg=pit.nextSegment();    if (filter.preConsider(seg,region) && considerSegmentXRegion(seg,region)) {      collector.collect(seg,region);      return;    }  }}  }
class C{  @EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onBlockBreak(BlockBreakEvent event){  Player player=event.getPlayer();  Match match=Cardinal.getMatch(player);  List<Core> cores=getCores(match);  if (match == null || !match.hasPlayer(player) || cores.size() == 0) {    return;  }  Team team=(Team)match.getPlayingContainer(player);  Block block=event.getBlock();  cores.forEach(null);}  }
class C{  public String toString(){  return image;}  }
class C{  public byte[] toByteArray(){  byte[] u1Bytes=u1.toByteArray();  int u1Length=u1Bytes.length;  byte[] u2Bytes=u2.toByteArray();  int u2Length=u2Bytes.length;  byte[] eBytes=e.toByteArray();  int eLength=eBytes.length;  byte[] vBytes=v.toByteArray();  int vLength=vBytes.length;  int off=0;  byte[] result=new byte[u1Length + u2Length + eLength+ vLength+ 4 * 4];  Pack.intToBigEndian(u1Length,result,off);  off+=4;  System.arraycopy(u1Bytes,0,result,off,u1Length);  off+=u1Length;  Pack.intToBigEndian(u2Length,result,off);  off+=4;  System.arraycopy(u2Bytes,0,result,off,u2Length);  off+=u2Length;  Pack.intToBigEndian(eLength,result,off);  off+=4;  System.arraycopy(eBytes,0,result,off,eLength);  off+=eLength;  Pack.intToBigEndian(vLength,result,off);  off+=4;  System.arraycopy(vBytes,0,result,off,vLength);  off+=vLength;  return result;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(AVERAGE);  builder.addAttribute(MAX);  builder.addAttribute(MIN);  builder.addAttribute(NUM_RATERS);  builder.addAttribute(REL);  builder.addAttribute(VALUE);}  }
class C{  public static Distribution guessEta(DataSet d){  return new LogUniform(Math.pow(2,-3),Math.pow(2,3));}  }
class C{  @Override public boolean isReady(){  return photonControllerXenonHost.checkServiceAvailable(PlacementTaskService.FACTORY_LINK);}  }
class C{  public void clear(){  mSize=0;}  }
class C{  @Snoop @Produces @Dependent public SnoopServiceClient lookup(InjectionPoint ip){  final String applicationName=ip.getAnnotated().getAnnotation(Snoop.class).serviceName();  LOGGER.config(null);  String serviceUrl="http://" + readProperty("snoopService",snoopConfig);  LOGGER.config(null);  return new SnoopServiceClient.Builder(applicationName).serviceUrl(serviceUrl).build();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","jxgzy");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private static void logStackTrace(Throwable throwable){  AdminDistributedSystemImpl adminDS=AdminDistributedSystemImpl.getConnectedInstance();  logger.warn(throwable.getMessage(),throwable);}  }
class C{  public double distanceSq(final MutableInt3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  public void restartBackend(){  ghci.stopAsync();  ghci.awaitTerminated();  ghci=new GhciSession();  ghci.startAsync();}  }
class C{  public void testIntBooleanMap() throws Exception {  ObjectMapper mapper=new ObjectMapper();  String JSON="{ \"1\" : true, \"-1\" : false }";  Map<String,Integer> result=mapper.readValue(JSON,new TypeReference<HashMap<Integer,Boolean>>(){  });  assertNotNull(result);  assertEquals(HashMap.class,result.getClass());  assertEquals(2,result.size());  assertEquals(Boolean.TRUE,result.get(Integer.valueOf(1)));  assertEquals(Boolean.FALSE,result.get(Integer.valueOf(-1)));  assertNull(result.get("foobar"));  assertNull(result.get(0));}  }
class C{  public String readAll(){  if (!scanner.hasNextLine())   return "";  String result=scanner.useDelimiter(EVERYTHING_PATTERN).next();  scanner.useDelimiter(WHITESPACE_PATTERN);  return result;}  }
class C{  public final String doubleString(double value){  return generatorContext.doubleString(value);}  }
class C{  public static QueryTask.QuerySpecification buildChildServiceQuerySpec(final String selfLink,final Class childClass,final QueryTask.Query... additionalClauses){  checkArgument(childClass != null,"childClass cannot be null");  checkArgument(additionalClauses != null,"additionalClauses cannot be null");  QueryTask.Query parentLinkClause=new QueryTask.Query().setTermPropertyName(PARENT_LINK_FIELD_NAME).setTermMatchValue(selfLink);  QueryTask.QuerySpecification spec=buildQuerySpec(childClass,additionalClauses);  spec.query.addBooleanClause(parentLinkClause);  return spec;}  }
class C{  private final Object _deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {  if (jp.getCurrentToken() != JsonToken.START_OBJECT) {    throw ctxt.wrongTokenException(jp,JsonToken.START_OBJECT,"need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());  }  if (jp.nextToken() != JsonToken.FIELD_NAME) {    throw ctxt.wrongTokenException(jp,JsonToken.FIELD_NAME,"need JSON String that contains type id (for subtype of " + baseTypeName() + ")");  }  JsonDeserializer<Object> deser=_findDeserializer(ctxt,jp.getText());  jp.nextToken();  Object value=deser.deserialize(jp,ctxt);  if (jp.nextToken() != JsonToken.END_OBJECT) {    throw ctxt.wrongTokenException(jp,JsonToken.END_OBJECT,"expected closing END_OBJECT after type information and deserialized value");  }  return value;}  }
class C{  public static float readFloat(byte[] array,int offset){  return Float.intBitsToFloat(readInt(array,offset));}  }
class C{  public void removeEventListener(GeolocSharingListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    WeakReference<IGeolocSharingListener> weakRef=mGeolocSharingListeners.remove(listener);    if (weakRef == null) {      return;    }    IGeolocSharingListener rcsListener=weakRef.get();    if (rcsListener != null) {      mApi.removeEventListener2(rcsListener);    }  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  private boolean tableExists(){  Connection c=null;  Statement s=null;  boolean tableExists;  try {    c=getDataSource().getConnection();    s=c.createStatement();    s.executeQuery(sqlInitCheckExistence);    tableExists=true;  } catch (  SQLException e) {    tableExists=false;  } finally {    closeQuietly(c,s,null);  }  return tableExists;}  }
class C{  @NonNull public ActivityType stop(){  ActivityType stoppingForType=activityTypeStorage.get();  if (stoppingForType.isBreak()) {    pomodorosDoneStorage.set(pomodorosDoneStorage.get() + 1);    lastPomodoroStorage.set(DateTime.now());  }  activityTypeStorage.set(ActivityType.NONE);  isOngoingStorage.set(false);  return stoppingForType;}  }
class C{  private static void checkValidCursorTypeForScope(CursorType cursorType,Key<? extends ImmutableObject> scope){  checkArgument(cursorType.getScopeClass().equals(scope.equals(EntityGroupRoot.getCrossTldKey()) ? EntityGroupRoot.class : ofy().factory().getMetadata(scope).getEntityClass()),"Class required for cursor does not match scope class");}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public static UnsignedInteger parseUnsignedInteger(String s) throws NumberFormatException, IllegalArgumentException {  return valueOf(Long.parseLong(s));}  }
class C{  public Long resetUser(String email,String username,String appLink){  try {    log.debug("resetUser " + email);    if (email.length() > 0) {      Users us=usersDao.getUserByEmail(email);      if (us != null) {        this.sendHashByUser(us,appLink);        return new Long(-4);      } else {        return new Long(-9);      }    } else     if (username.length() > 0) {      Users us=usersDao.getUserByName(username);      if (us != null) {        this.sendHashByUser(us,appLink);        return new Long(-4);      } else {        return new Long(-3);      }    }  } catch (  Exception e) {    log.error("[resetUser]",e);    return new Long(-1);  }  return new Long(-2);}  }
class C{  synchronized void startRunning(){  if (!startDequeue()) {    startRunningImages();  }}  }
class C{  public Shape modelToView(int p0,Position.Bias b0,int p1,Position.Bias b1,Shape a) throws BadLocationException {  Shape s0=modelToView(p0,a,b0);  Shape s1;  if (p1 == getEndOffset()) {    try {      s1=modelToView(p1,a,b1);    } catch (    BadLocationException ble) {      s1=null;    }    if (s1 == null) {      Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();      s1=new Rectangle(alloc.x + alloc.width - 1,alloc.y,1,alloc.height);    }  } else {    s1=modelToView(p1,a,b1);  }  Rectangle r0=s0.getBounds();  Rectangle r1=(s1 instanceof Rectangle) ? (Rectangle)s1 : s1.getBounds();  if (r0.y != r1.y) {    Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();    r0.x=alloc.x;    r0.width=alloc.width;  }  r0.add(r1);  if (p1 > p0)   r0.width-=r1.width;  return r0;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public static boolean writeFile(File file,InputStream stream,boolean append){  OutputStream o=null;  try {    makeDirs(file.getAbsolutePath());    o=new FileOutputStream(file,append);    byte data[]=new byte[1024];    int length=-1;    while ((length=stream.read(data)) != -1) {      o.write(data,0,length);    }    o.flush();    return true;  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (o != null) {      try {        o.close();        stream.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public MyBreak(){}  }
class C{  public XNumber(double d){  super();  m_val=d;}  }
class C{  public static boolean isXML11ValidNCName(String ncName){  int length=ncName.length();  if (length == 0)   return false;  int i=1;  char ch=ncName.charAt(0);  if (!isXML11NCNameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=ncName.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCNameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=ncName.charAt(i);    if (!isXML11NCName(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=ncName.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCName(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  public final void close() throws IOException {  src.close();}  }
class C{  public long lookupId(BytesRef idBytes) throws IOException {  String field=schema.getUniqueKeyField().getName();  for (int i=0, c=leafContexts.size(); i < c; i++) {    final LeafReaderContext leaf=leafContexts.get(i);    final LeafReader reader=leaf.reader();    final Terms terms=reader.terms(field);    if (terms == null)     continue;    TermsEnum te=terms.iterator();    if (te.seekExact(idBytes)) {      PostingsEnum docs=te.postings(null,PostingsEnum.NONE);      docs=BitsFilteredPostingsEnum.wrap(docs,reader.getLiveDocs());      int id=docs.nextDoc();      if (id == DocIdSetIterator.NO_MORE_DOCS)       continue;      assert docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS;      return (((long)i) << 32) | id;    }  }  return -1;}  }
class C{  public boolean containsAny(Collection<?> collection){  for (  Object item : collection) {    if (this.contains(item)) {      return true;    }  }  return false;}  }
class C{  public static double[] sort(double[] values){  double[] sorted_values=new double[values.length];  System.arraycopy(values,0,sorted_values,0,values.length);  new Sorting(sorted_values,false);  return sorted_values;}  }
class C{  boolean alreadyAdded(Component comp){  Component components[]=getComponents();  for (int i=0; i < components.length; i++) {    Component c=components[i];    if (c instanceof DockWrapper) {      DockWrapper dw=(DockWrapper)c;      if (dw.getChildren().contains(comp)) {        return true;      }    }  }  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isPrimaryKey(){  return primaryKey;}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  drawDimmedLayer(canvas);  drawCropGrid(canvas);}  }
class C{  public boolean isHttpCaching(){  return this.httpCaching;}  }
class C{  public P12Reader(InputStream inputStream,String password) throws GeneralSecurityException, IOException {  this.password=password;  keyStore=KeyStore.getInstance(KEYSTORE_TYPE);  keyStore.load(inputStream,password.toCharArray());  Enumeration aliases=keyStore.aliases();  if (aliases.hasMoreElements())   alias=(String)aliases.nextElement();}  }
class C{  public boolean killedByStore(BitSet fact,int local){  return fact.get(local + killedByStoreOffset);}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  public void printStackTrace(java.io.PrintStream s){  printStackTrace(new java.io.PrintWriter(s));}  }
class C{  public static long asLong(String text){  int abc[]=computeBobcat(text);  String s=String.format("%16s%16s%16s",Integer.toBinaryString(abc[0]),Integer.toBinaryString(abc[1]),Integer.toBinaryString(abc[2])).replaceAll(" ","0");  return Long.parseLong(s,2);}  }
class C{  public TCacheJSR107MutableEntry(K key,V value,CacheLoader<K,V> loader){  super(key,value);  this.valueNew=value;  this.loader=loader;}  }
class C{  public Script out(String outputName){  outputVariables.add(outputName);  return this;}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public static List<String> filterTags(List<LanguageRange> priorityList,Collection<String> tags,FilteringMode mode){  return LocaleMatcher.filterTags(priorityList,tags,mode);}  }
class C{  public static String humanBytes(double bytes,boolean si){  int base=1024;  String[] pre=new String[]{"K","M","G","T","P","E"};  String post="B";  if (si) {    base=1000;    pre=new String[]{"k","M","G","T","P","E"};    post="iB";  }  if (bytes < (long)base) {    return String.format("%.2f B",bytes);  }  int exp=(int)(Math.log(bytes) / Math.log(base));  int index=exp - 1;  String units=pre[index] + post;  return String.format("%.2f %s",bytes / Math.pow((double)base,(double)exp),units);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public CommonTurnoutOperationConfig(TurnoutOperation op){  super(op);  myOp=(CommonTurnoutOperation)op;  maxTriesSpinner=new JSpinner();  intervalSpinner=new JSpinner();  Box vbox=Box.createVerticalBox();  Box hbox1=Box.createHorizontalBox();  Box hbox2=Box.createHorizontalBox();  vbox.add(hbox2);  vbox.add(hbox1);  vbox.add(Box.createVerticalGlue());  hbox1.add(new JLabel(Bundle.getMessage("Interval")));  hbox1.add(Box.createHorizontalGlue());  intervalSpinner.setMinimumSize(new Dimension(100,20));  intervalSpinner.setModel(new SpinnerNumberModel(myOp.getInterval(),CommonTurnoutOperation.minInterval,CommonTurnoutOperation.maxInterval,CommonTurnoutOperation.intervalStepSize));  hbox1.add(intervalSpinner);  hbox2.add(new JLabel(Bundle.getMessage("TimesToTry")));  hbox2.add(Box.createHorizontalGlue());  maxTriesSpinner.setMinimumSize(new Dimension(100,20));  maxTriesSpinner.setModel(new SpinnerNumberModel(myOp.getMaxTries(),CommonTurnoutOperation.minMaxTries,CommonTurnoutOperation.maxMaxTries,1));  hbox2.add(maxTriesSpinner);  Box hbox3=Box.createHorizontalBox();  hbox3.add(Box.createHorizontalStrut(150));  vbox.add(hbox3);  add(vbox);}  }
class C{  public static boolean validateBindAddress(String bindAddress){  if (bindAddress == null || bindAddress.length() == 0)   return true;  if (InetAddressUtil.validateHost(bindAddress) == null)   return false;  return true;}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public void attrAdded(Attr node,String newv){  if (!mutate) {    value=cssEngine.parsePropertyValue(SVGStylableElement.this,property,newv);  }}  }
class C{  public JsonNode put(String fieldName,JsonNode value){  if (value == null) {    value=nullNode();  }  return _put(fieldName,value);}  }
class C{  private boolean isHelping(){  return Boolean.TRUE.equals(getHelp());}  }
class C{  public UICatalogScreen(final boolean openAPP) throws Exception {  super(null,openAPP ? SeleniumTestsContextManager.getThreadContext().getApp() : null);}  }
class C{  public void indexIterator(FDBStore store,Session session,FDBStoreData storeData,boolean key,boolean startInclusive,boolean endInclusive,boolean reverse,FDBScanTransactionOptions transactionOptions){  KeySelector ksLeft, ksRight;  byte[] endKey=null;  if (storeData.endKey.getDepth() > 0) {    endKey=packedTuple(storeData.storageDescription,storeData.endKey,null,null);  } else {    assert storeData.endKey.getEncodedSize() == 0;  }  byte[] prefixBytes=prefixBytes(storeData);  if (!key) {    ksLeft=KeySelector.firstGreaterOrEqual(prefixBytes);    ksRight=KeySelector.firstGreaterOrEqual(ByteArrayUtil.strinc(prefixBytes));  } else   if (startInclusive) {    if (reverse) {      if (endKey != null) {        if (endInclusive) {          ksLeft=KeySelector.firstGreaterOrEqual(endKey);        } else {          ksLeft=KeySelector.firstGreaterOrEqual(ByteArrayUtil.strinc(endKey));        }      } else {        ksLeft=KeySelector.firstGreaterThan(prefixBytes);      }      ksRight=KeySelector.firstGreaterThan(packKey(storeData));    } else {      ksLeft=KeySelector.firstGreaterOrEqual(packKey(storeData));      if (endKey != null) {        if (endInclusive) {          ksRight=KeySelector.firstGreaterOrEqual(ByteArrayUtil.strinc(endKey));        } else {          ksRight=KeySelector.firstGreaterOrEqual(endKey);        }      } else {        ksRight=KeySelector.firstGreaterOrEqual(ByteArrayUtil.strinc(prefixBytes));      }    }  } else {    if (reverse) {      if (endKey != null) {        if (endInclusive) {          ksLeft=KeySelector.firstGreaterOrEqual(endKey);        } else {          ksLeft=KeySelector.firstGreaterOrEqual(ByteArrayUtil.strinc(endKey));        }      } else {        ksLeft=KeySelector.firstGreaterThan(prefixBytes);      }      ksRight=KeySelector.firstGreaterOrEqual(packKey(storeData));    } else {      ksLeft=KeySelector.firstGreaterThan(packKey(storeData));      if (endKey != null) {        if (endInclusive) {          ksRight=KeySelector.firstGreaterOrEqual(ByteArrayUtil.strinc(endKey));        } else {          ksRight=KeySelector.firstGreaterOrEqual(endKey);        }      } else {        ksRight=KeySelector.firstGreaterOrEqual(ByteArrayUtil.strinc(prefixBytes));      }    }  }  LOG.trace(" Reverse: " + reverse + ", startInclusive: {}, endInclusive: {}",startInclusive,endInclusive);  LOG.trace("generated KeySelectors: Left: {}, Right: {}",ksLeft,ksRight);  TransactionState txnState=store.getTransaction(session,storeData);  storeData.iterator=new FDBStoreDataKeyValueIterator(storeData,txnState.getRangeIterator(ksLeft,ksRight,Transaction.ROW_LIMIT_UNLIMITED,reverse,transactionOptions));}  }
class C{  public void attach(@NotNull Component childComponent,boolean allowOverride) throws MultiParentException, ProviderConflictException {  if (childComponent.parentComponent != null) {    String msg=String.format("The attaching component(%s) has a parent already. Remove its parent before attaching it",childComponent.name == null ? "unnamed" : childComponent.name);    throw new MultiParentException(msg);  }  Component root=getRootComponent();  if (childComponent.parentComponent == null) {  }  Set<String> addedKeys=new HashSet<>();  Iterator<Map.Entry<String,Component>> iterator=childComponent.componentLocator.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,Component> entry=iterator.next();    String key=entry.getKey();    if (root.componentLocator.containsKey(key)) {      if (!allowOverride) {        for (        String k : addedKeys) {          root.componentLocator.remove(k);        }        throw new ProviderConflictException(String.format("Type(%s) in the adding child component(%s) has been added " + "to rootComponent(%s) or its attached child components.",key,childComponent.getComponentId(),root.getComponentId()));      } else {        if (root.overriddenChain == null) {          root.overriddenChain=new HashMap<>();        }        List<Component> chain=root.overriddenChain.get(key);        if (chain == null) {          chain=new ArrayList<>();          root.overriddenChain.put(key,chain);        }        chain.add(childComponent);      }    }    root.componentLocator.put(key,entry.getValue());    iterator.remove();    addedKeys.add(key);  }  childComponent.parentComponent=this;  if (childrenComponents == null) {    childrenComponents=new ArrayList<>();  }  childrenComponents.add(childComponent);}  }
class C{  private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){  int fromX=(int)from.getX();  int fromY=(int)from.getY();  int toX=(int)to.getX();  int toY=(int)to.getY();  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx >> 1;  int ystep=fromY < toY ? 1 : -1;  int xstep=fromX < toX ? 1 : -1;  int transitions=0;  boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY);  for (int x=fromX, y=fromY; x != toX; x+=xstep) {    boolean isBlack=image.get(steep ? y : x,steep ? x : y);    if (isBlack != inBlack) {      transitions++;      inBlack=isBlack;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  return new ResultPointsAndTransitions(from,to,transitions);}  }
class C{  public static Matcher<Class> subclassesOf(final Class<?> superclass){  return new SubclassesOf(superclass);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;case DomPackage.LITERAL__NAME:setName(NAME_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public synchronized void start(){  if (mConnectThread != null) {    mConnectThread.cancel();    mConnectThread=null;  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  if (mAcceptThread == null) {    mAcceptThread=new AcceptThread();    mAcceptThread.start();  }  setState(State.STATE_LISTEN);}  }
class C{  public static void transferContent(final Player player){  final StendhalRPZone zone=player.getZone();  transferContent(player,zone.getContents());}  }
class C{  public boolean isShadowVisible(){  return this.shadowVisible;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public static void logFirstStateEntry(PanelState fromState,PanelState toState,StateChangeReason reason){  int code;switch (toState) {case CLOSED:    code=getStateChangeCode(fromState,reason,ENTER_CLOSED_STATE_CHANGE_CODES,ENTER_CLOSED_FROM_OTHER);  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchEnterClosed",code,ENTER_CLOSED_FROM_BOUNDARY);break;case PEEKED:code=getStateChangeCode(fromState,reason,ENTER_PEEKED_STATE_CHANGE_CODES,ENTER_PEEKED_FROM_OTHER);RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchEnterPeeked",code,ENTER_PEEKED_FROM_BOUNDARY);break;case EXPANDED:code=getStateChangeCode(fromState,reason,ENTER_EXPANDED_STATE_CHANGE_CODES,ENTER_EXPANDED_FROM_OTHER);RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchEnterExpanded",code,ENTER_EXPANDED_FROM_BOUNDARY);break;case MAXIMIZED:code=getStateChangeCode(fromState,reason,ENTER_MAXIMIZED_STATE_CHANGE_CODES,ENTER_MAXIMIZED_FROM_OTHER);RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchEnterMaximized",code,ENTER_MAXIMIZED_FROM_BOUNDARY);break;default :break;}}  }
class C{  public void queryServiceUris(String servicePath,Operation get){  ServiceDocumentQueryResult r=new ServiceDocumentQueryResult();  boolean doPrefixMatch=servicePath.endsWith(UriUtils.URI_WILDCARD_CHAR);  servicePath=servicePath.replace(UriUtils.URI_WILDCARD_CHAR,"");  for (  Service s : this.attachedServices.values()) {    if (s.getProcessingStage() != ProcessingStage.AVAILABLE) {      continue;    }    if (s.hasOption(ServiceOption.UTILITY)) {      continue;    }    String path=s.getSelfLink();    if (doPrefixMatch) {      if (!path.startsWith(servicePath)) {        continue;      }    } else {      if (!path.equals(servicePath)) {        continue;      }    }    r.documentLinks.add(path);  }  r.documentOwner=getId();  get.setBodyNoCloning(r).complete();}  }
class C{  public HeaderCardBuilder card(IFitsHeader newKey){  this.key=newKey;  this.card=this.header.findCard(this.key);  return this;}  }
class C{  public static void writeEmptyNBest(int sourceInputId,PrintStream nbestListWriter){  StringBuilder sb=new StringBuilder(50);  String nl=System.getProperty("line.separator");  sb.append(sourceInputId).append(" ").append(CompiledPhraseTable.FIELD_DELIM).append(" ");  sb.append(" ").append(CompiledPhraseTable.FIELD_DELIM).append(" ");  sb.append(" ").append(CompiledPhraseTable.FIELD_DELIM).append(" ");  sb.append(" 0.0000E0 ").append(CompiledPhraseTable.FIELD_DELIM).append(" ");  sb.append(" ");  sb.append(nl);  nbestListWriter.append(sb.toString());}  }
class C{  public void removeNotification(Object notification){  ((MutableComboBoxModel<Object>)model).removeElement(notification);}  }
class C{  public InvasionPhase(Map<String,Integer> timings){  super(timings);  minPhaseChangeTime=timings.get(INVASION_TIME_MIN);  maxPhaseChangeTime=timings.get(INVASION_TIME_MAX);  this.rats=TPPQuestHelperFunctions.getRats();  addConversations(TPPQuestHelperFunctions.getMainNPC());}  }
class C{  public static String makeUnifiedLineFeeds(String query){  if (query.indexOf('\r') == -1) {    return query;  }  StringBuilder result=new StringBuilder(query.length());  for (int i=0; i < query.length(); i++) {    char c=query.charAt(i);    if (c == '\r') {      continue;    }    result.append(c);  }  return result.toString();}  }
class C{  public double r(){  return Math.sqrt(x * x + y * y);}  }
class C{  private JComponent createHeader(){  JPanel panel=new JPanel();  panel.setBackground(DisplayNodeUtils.getNodeFillColor());  panel.setLayout(new BorderLayout());  String path=TetradLogger.getInstance().getLatestFilePath();  JLabel label=new JLabel(path == null ? "Logging to console (select Setup... from Logging menu)" : "  Logging to " + path);  label.setFont(label.getFont().deriveFont(Font.BOLD,12f));  label.setBackground(DisplayNodeUtils.getNodeFillColor());  label.setForeground(Color.WHITE);  label.setOpaque(false);  label.setBorder(new EmptyBorder(1,2,1,2));  Box b=Box.createHorizontalBox();  b.add(label);  b.add(Box.createHorizontalGlue());  panel.add(b,BorderLayout.CENTER);  return panel;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE:    setDefinedType((Type)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean isNumber(CharSequence self){  return isBigDecimal(self);}  }
class C{  public void addClassPath(String path){  String[] paths=path.split(File.pathSeparator);  for (  String cpPath : paths) {    if (cpPath.endsWith("*")) {      File dir=new File(cpPath.substring(0,cpPath.length() - 1));      File[] files=dir.listFiles();      if (files != null) {        for (        File file : files) {          if (file.isFile() && file.getName().endsWith(".jar"))           addFile(file);        }      }    } else {      addFile(new File(cpPath));    }  }}  }
class C{  public SAXNotSupportedException(String message){  super(message);}  }
class C{  public NPrism(int sides,double radius,double height){  this(sides,0,radius,height);}  }
class C{  public static void toast(String message,int displayTime,int severity,Throwable ex){  toast(GBApplication.getContext(),message,displayTime,severity,ex);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public void testGetBuffered(){  int len=1000;  ByteFifoBuffer instance=new ByteFifoBuffer(len);  int w_len=100;  byte[] w_data=getWData(w_len);  instance.write(w_data,w_len);  int expResult=w_len;  int result=instance.getBuffered();  assertEquals(expResult,result);  int consume=5;  expResult=w_len + consume;  instance.consumeWriteBuffer(consume);  result=instance.getBuffered();  assertEquals(expResult,result);}  }
class C{  public static void logReport(final SpeedTestSocket speedTestSocket,final Logger logger){  if (logger.isDebugEnabled()) {    SpeedTestReport report=null;    if (speedTestSocket.getSpeedTestMode() == SpeedTestMode.UPLOAD) {      report=speedTestSocket.getLiveUploadReport();      logger.debug("---------------current upload report--------------------");    } else     if (speedTestSocket.getSpeedTestMode() == SpeedTestMode.DOWNLOAD) {      report=speedTestSocket.getLiveDownloadReport();      logger.debug("---------------current download report--------------------");    }    if (report != null) {      logReport(report,logger);    }  }}  }
class C{  public NotificationEventTypeEntity createNotificationEventTypeEntity(String code){  NotificationEventTypeEntity notificationEventTypeEntity=new NotificationEventTypeEntity();  notificationEventTypeEntity.setCode(code);  notificationEventTypeEntity.setDescription(String.format("Description of \"%s\".",code));  return notificationEventTypeDao.saveAndRefresh(notificationEventTypeEntity);}  }
class C{  public boolean showGeolocationSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_GEOLOCATION;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public static String[] parseFlags(String[] args,BiConsumer<Character,String> consumer,Function<Character,Boolean> hasData){  FlagMappings mappings=mapFlags(args,hasData);  mappings.map.entrySet().stream().forEach(null);  return mappings.parsed;}  }
class C{  public static AuthenticatedDB newFromRequest(Manager manager,KeyFactory keyFactory,SignedRequest request) throws SQLException, MitroServletException {  if (request.identity == null) {    return null;  }  DBIdentity identity=DBIdentity.getIdentityForUserName(manager,request.identity);  if (identity == null) {    return null;  }  try {    PublicKeyInterface key=keyFactory.loadPublicKey(identity.getPublicKeyString());    if (!key.verify(request.request,request.signature)) {      throw new MitroServletException("failed to verify signature for identity " + identity.getName());    }  } catch (  CryptoError e) {    throw new MitroServletException("failed to load key for identity " + identity.getName(),e);  }  return new AuthenticatedDB(manager,identity);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.559 -0500",hash_original_method="864CC96C484326CBC4ECFC5A9B22196D",hash_generated_method="E516A32D078264CB25440C88185A5F22") public static byte[] decode(byte[] data){  int len=data.length / 4 * 3;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.decode(data,0,data.length,bOut);  } catch (  IOException e) {    throw new RuntimeException("exception decoding base64 string: " + e);  }  return bOut.toByteArray();}  }
class C{  public SavedStateScrolling(Parcelable superState){  this.superState=superState != EMPTY_STATE ? superState : null;}  }
class C{  void exportChildren(SnmpMibOid brother) throws IllegalAccessException {  if (brother == null)   return;  final long[] oid=new long[1];  for (int i=0; i < nbChildren; i++) {    final SnmpMibNode child=children.elementAt(i);    if (child == null)     continue;    oid[0]=varList[i];    brother.registerNode(oid,0,child);  }}  }
class C{  boolean matches(String schema,String table){  if (StringUtils.isNullOrEmpty(schema)) {    return this.table.equalsIgnoreCase(table);  } else   if (StringUtils.isNullOrEmpty(table)) {    return this.schema.equalsIgnoreCase(schema);  } else {    return this.schema.equalsIgnoreCase(schema) && this.table.equalsIgnoreCase(table);  }}  }
class C{  public static boolean isOlderThan(String otherVersion){  return toLong(getVersion()) < toLong(otherVersion);}  }
class C{  @DSComment("File Information") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.460 -0500",hash_original_method="80B9F14946D459E582021E9E2F6280AD",hash_generated_method="CF578D1B801A5F671FA69BBF6907AB62") public boolean canWrite(){  return true;}  }
class C{  public OverallResult(String category,double tpr,double fpr,int total,double score){  this.category=category;  this.truePositiveRate=tpr;  this.falsePositiveRate=fpr;  this.total=total;  this.score=score;}  }
class C{  private static void parseExpression(final Reader reader,final boolean writingString,final StringBuilder templateExpressions) throws IOException {  if (!writingString) {    templateExpressions.append("out << \"\"\"");  }  templateExpressions.append("${");  while (true) {    int c=reader.read();    if (c == -1)     break;    if (c == '%') {      c=reader.read();      if (c == '>')       break;      templateExpressions.append('%');    }    templateExpressions.append((char)c);  }  templateExpressions.append('}');}  }
class C{  public static void write(float lat_1,float lon_1,float lat_2,float lon_2,int lineType,int nsegs,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.LINE_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_LINE);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeByte(lineType);  dos.writeFloat(lat_1);  dos.writeFloat(lon_1);  dos.writeFloat(lat_2);  dos.writeFloat(lon_2);  dos.writeInt(nsegs);  properties.write(dos);}  }
class C{  public void beforeInsert(int index,double element){  if (size == index) {    add(element);    return;  }  if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  ensureCapacity(size + 1);  System.arraycopy(elements,index,elements,index + 1,size - index);  elements[index]=element;  size++;}  }
class C{  @HystrixCommand public void notifyBottlingService(Ingredients ingredients,String correlationId){  log.info("Calling bottling from maturing");  Span scope=this.tracer.createSpan("calling_bottling_from_maturing");  bottlingService.bottle(new Wort(getQuantity(ingredients)),correlationId,FEIGN.name());  tracer.close(scope);}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  public void testGetWebModuleUrisWithMultipleWebModules() throws Exception {  String xml="<application>" + "  <module>" + "    <web>"+ "      <web-uri>webmodule1.jar</web-uri>"+ "      <context-root>/webmodule1</context-root>"+ "    </web>"+ "  </module>"+ "  <module>"+ "    <web>"+ "      <web-uri>webmodule2.jar</web-uri>"+ "      <context-root>/webmodule2</context-root>"+ "    </web>"+ "  </module>"+ "  <module>"+ "    <web>"+ "      <web-uri>webmodule3.jar</web-uri>"+ "      <context-root>/webmodule3</context-root>"+ "    </web>"+ "  </module>"+ "</application>";  ApplicationXml applicationXml=ApplicationXmlIo.parseApplicationXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),null);  List<String> webUris=applicationXml.getWebModuleUris();  assertEquals(3,webUris.size());  assertEquals("webmodule1.jar",webUris.get(0));  assertEquals("webmodule2.jar",webUris.get(1));  assertEquals("webmodule3.jar",webUris.get(2));}  }
class C{  public void test_ticket_1202r() throws Exception {  new TestHelper("ticket-1202-additional6","ticket-1202-additional6.rq","ticket-1202-additional6.ttl","ticket-1202-additional6.srx").runTest();}  }
class C{  private int findLastVisibleItemPosition(){  return mLayoutManager.findLastVisibleItemPosition();}  }
class C{  public int dechargerSlotCount(){  return 0;}  }
class C{  public ElemForEach(){}  }
class C{  public void addHealthListener(HealthListener observer,GemFireHealthConfig cfg){synchronized (this.healthLock) {    this.healthListener=observer;    AddHealthListenerResponse response=(AddHealthListenerResponse)sendAndWait(AddHealthListenerRequest.create(cfg));    this.healthListenerId=response.getHealthListenerId();  }}  }
class C{  public static void doPuts(){  Region region1=cache.getRegion(Region.SEPARATOR + REGION_NAME);  for (int i=0; i < TOTAL_PUTS; i++) {    try {      region1.put("key-" + i,"val-" + i);    } catch (    Exception e) {      fail("Test failed due to unexpected exception during PUTs : " + e);    }  }}  }
class C{  public void stop(String handleId) throws DaemonException, IOException {  DaemonParameters parameters=new DaemonParameters();  parameters.setParameter("handleId",handleId);  invoke("stop",parameters);}  }
class C{  public ViewResult queryStore(ViewQuery viewQuery){  return dbConnector.queryView(viewQuery);}  }
class C{  public static float nextFloat(){  wasAccessed=true;  return (currentNumber++ % 10F) / 10F;}  }
class C{  protected void verifyFullCopySupportedForStoragePool(StoragePool storagePool){  URI storageSystemUri=storagePool.getStorageDevice();  StorageSystem storageSystem=(StorageSystem)_dbClient.queryObject(storageSystemUri);  if (!storageDriverManager.isDriverManaged(storageSystem.getSystemType())) {    StringSet copyTypes=storagePool.getSupportedCopyTypes();    if ((copyTypes == null) || (!copyTypes.contains(StoragePool.CopyTypes.UNSYNC_UNASSOC.name()))) {      throw APIException.badRequests.fullCopyNotSupportedOnArray(storagePool.getStorageDevice());    }  }}  }
class C{  public UserRoleAssignmentException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public CopyingRangeMarker(int offset,int length){  super(offset,length);}  }
class C{  public static Filter create(String eventTypeName,Expression filter){  return new Filter(eventTypeName,filter);}  }
class C{  public RegressorToClassifier(Regressor regressor){  this.regressor=regressor;}  }
class C{  public static int helper(TreeNode root,int x){  if (root.right == null && root.left == null)   return 10 * x + root.val;  int val=0;  if (root.left != null)   val+=helper(root.left,10 * x + root.val);  if (root.right != null)   val+=helper(root.right,10 * x + root.val);  return val;}  }
class C{  RuntimeIterator resolveImplicitOperationName(String name,int numArgs,boolean mustBeMethod) throws AmbiguousNameException {  RuntimeIterator oneUnknown=null;  List hits=new ArrayList(2);  boolean foundOneUnknown=false;  NEXT_SCOPE:   for (int i=scopes.size() - 1; i >= 0; i--) {    QScope scope=(QScope)scopes.get(i);    Iterator iter=scope.getIterators().iterator();    while (iter.hasNext()) {      RuntimeIterator itr=(RuntimeIterator)iter.next();      Assert.assertTrue(itr != null);      if (scope.getLimit() == itr) {        continue NEXT_SCOPE;      }      if (!TypeUtils.OBJECT_TYPE.equals(itr.getElementType()) && itr.containsProperty(name,numArgs,mustBeMethod)) {        hits.add(itr);      } else       if (TypeUtils.OBJECT_TYPE.equals(itr.getElementType())) {        if (foundOneUnknown) {          oneUnknown=null;        } else {          foundOneUnknown=true;          oneUnknown=itr;        }      }    }  }  if (hits.size() == 1)   return (RuntimeIterator)hits.get(0);  if (hits.size() > 1) {    if (mustBeMethod)     throw new AmbiguousNameException(LocalizedStrings.ExecutionContext_METHOD_NAMED_0_WITH_1_ARGUMENTS_IS_AMBIGUOUS_BECAUSE_IT_CAN_APPLY_TO_MORE_THAN_ONE_VARIABLE_IN_SCOPE.toLocalizedString(new Object[]{name,Integer.valueOf(numArgs)}));    throw new AmbiguousNameException(LocalizedStrings.ExecutionContext_ATTRIBUTE_NAMED_0_IS_AMBIGUOUS_BECAUSE_IT_CAN_APPLY_TO_MORE_THAN_ONE_VARIABLE_IN_SCOPE.toLocalizedString(name));  }  Assert.assertTrue(hits.isEmpty());  return oneUnknown;}  }
class C{  public void showProgress(){  hideRecycler();  if (mEmptyId != 0)   mEmpty.setVisibility(View.INVISIBLE);  mProgress.setVisibility(View.VISIBLE);}  }
class C{  public TiffHelper(final String file){  this.file=file;  pageCount=JDeliHelper.getTiffPageCount(file);}  }
class C{  public static <T>int createTable(ConnectionSource connectionSource,DatabaseTableConfig<T> tableConfig) throws SQLException {  return createTable(connectionSource,tableConfig,false);}  }
class C{  public static void main(String[] args){  OutputFormatDialog dialog;  dialog=new OutputFormatDialog(null);  if (dialog.showDialog() == APPROVE_OPTION) {    System.out.println("Accepted");  } else {    System.out.println("Aborted");  }}  }
class C{  protected Ref string() throws PageException {  char quoter=cfml.getCurrentLower();  LStringBuffer str=new LStringBuffer();  Ref value=null;  while (cfml.hasNext()) {    cfml.next();    if (!limited && cfml.isCurrent('#')) {      if (cfml.isNext('#')) {        cfml.next();        str.append('#');      } else {        cfml.next();        cfml.removeSpace();        if (!str.isEmpty() || value != null)         str.append(assignOp()); else         value=assignOp();        cfml.removeSpace();        if (!cfml.isCurrent('#'))         throw new InterpreterException("Invalid Syntax Closing [#] not found");      }    } else     if (cfml.isCurrent(quoter)) {      if (cfml.isNext(quoter)) {        cfml.next();        str.append(quoter);      } else {        break;      }    } else {      str.append(cfml.getCurrent());    }  }  if (!cfml.forwardIfCurrent(quoter))   throw new InterpreterException("Invalid String Literal Syntax Closing [" + quoter + "] not found");  cfml.removeSpace();  mode=STATIC;  if (value != null) {    if (str.isEmpty())     return value;    return new Concat(value,str);  }  return str;}  }
class C{  public InvalidDnDOperationException(String msg){  super(msg);}  }
class C{  private boolean isCancelled(){  return false;}  }
class C{  public static String up(final int n){  return ESC + "[" + n+ "A";}  }
class C{  @VisibleForTesting boolean createSnapshotSync(String namespace,String workspaceId,String envName){  try {    runtimes.beginSnapshotting(workspaceId);  } catch (  NotFoundException|ConflictException x) {    LOG.warn("Couldn't start snapshot creation of workspace '{}' due to error: '{}'",workspaceId,x.getMessage());    return false;  }  publishEvent(SNAPSHOT_CREATING,workspaceId);  final List<MachineImpl> machines;  try {    machines=runtimes.get(workspaceId).getRuntime().getMachines();  } catch (  Exception x) {    throw new IllegalStateException(x.getLocalizedMessage(),x);  }  LOG.info("Creating snapshot of workspace '{}', machines to snapshot: '{}'",workspaceId,machines.size());  final List<SnapshotImpl> newSnapshots=new ArrayList<>(machines.size());  Collections.sort(machines,comparing(null,null));  for (  MachineImpl machine : machines) {    try {      newSnapshots.add(runtimes.saveMachine(namespace,workspaceId,machine.getId()));    } catch (    Exception x) {      if (machine.getConfig().isDev()) {        runtimes.finishSnapshotting(workspaceId);        publishEvent(SNAPSHOT_CREATION_ERROR,workspaceId,x.getMessage());        return false;      }      LOG.warn(format("Couldn't create snapshot of machine '%s:%s:%s' in workspace '%s'",namespace,machine.getEnvName(),machine.getConfig().getName(),workspaceId));    }  }  try {    LOG.info("Saving new snapshots metadata, workspace id '{}'",workspaceId);    final List<SnapshotImpl> removed=snapshotDao.replaceSnapshots(workspaceId,envName,newSnapshots);    if (!removed.isEmpty()) {      LOG.info("Removing old snapshots, workspace id '{}', snapshots to remove '{}'",workspaceId,removed.size());      removeSnapshotsBinaries(removed);    }  } catch (  SnapshotException x) {    LOG.error(format("Couldn't remove existing snapshots metadata for workspace '%s'",workspaceId),x);    LOG.info("Removing newly created snapshots, workspace id '{}', snapshots to remove '{}'",workspaceId,newSnapshots.size());    removeSnapshotsBinaries(newSnapshots);    runtimes.finishSnapshotting(workspaceId);    publishEvent(SNAPSHOT_CREATION_ERROR,workspaceId,x.getMessage());    return false;  }  runtimes.finishSnapshotting(workspaceId);  publishEvent(SNAPSHOT_CREATED,workspaceId);  return true;}  }
class C{  public static void fill(List list,Object obj){  int size=list.size();  if (size < FILL_THRESHOLD || list instanceof RandomAccess) {    for (int i=0; i < size; i++)     list.set(i,obj);  } else {    ListIterator itr=list.listIterator();    for (int i=0; i < size; i++) {      itr.next();      itr.set(obj);    }  }}  }
class C{  public Skein224(){  super();}  }
class C{  public final synchronized void sendRawLineViaQueue(String line){  if (line == null) {    throw new NullPointerException("Cannot send null messages to server");  }  if (isConnected()) {    _outQueue.add(line);  }}  }
class C{  public int xyTo1D(int x,int y){  return (y - 1) * N + (x - 1);}  }
class C{  private static synchronized void initTrueRandom(long adjustedTimestamp){  _rand_m=971;  _rand_ia=11113;  _rand_ib=104322;  _rand_irand=4181;  int seed=(int)(adjustedTimestamp >>> 48) ^ (int)(adjustedTimestamp >>> 32) ^ (int)(adjustedTimestamp >>> 16)^ (int)(adjustedTimestamp & 0x000000000000FFFF);  _rand_irand=_rand_irand + seed + _osProcessId;}  }
class C{  static Properties internalGetProperties(){  return systemProperties;}  }
class C{  public void updateEllipse(float latPoint,float lonPoint,int offset_x1,int offset_y1,int w,int h,float rotateAngle,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkEllipse.write(latPoint,lonPoint,offset_x1,offset_y1,w,h,rotateAngle,properties,link.dos);}  }
class C{  public static float scale(int value){  return (float)((value & 0xFFF) - 2048) * SCALE_SIGNED_12_BIT_TO_FLOAT;}  }
class C{  protected Dimension calcPreferredSize(){  Style style=getStyle();  int prefW=0, prefH=0;  if (style.getBorder() != null) {    prefW=Math.max(style.getBorder().getMinimumWidth(),prefW);    prefH=Math.max(style.getBorder().getMinimumHeight(),prefH);  }  if (thumbImage != null) {    prefW=Math.max(thumbImage.getWidth(),prefW);    prefH=Math.max(thumbImage.getHeight(),prefH);  }  if (Display.getInstance().isTouchScreenDevice() && isEditable()) {    if (vertical) {      prefW=Math.max(prefW,Font.getDefaultFont().charWidth('X') * 2);      prefH=Math.max(prefH,Display.getInstance().getDisplayHeight() / 2);    } else {      prefW=Math.max(prefW,Display.getInstance().getDisplayWidth() / 2);      prefH=Math.max(prefH,Font.getDefaultFont().getHeight() * 2);    }  } else {    if (vertical) {      prefW=Math.max(prefW,Font.getDefaultFont().charWidth('X'));      prefH=Math.max(prefH,Display.getInstance().getDisplayHeight() / 2);    } else {      prefW=Math.max(prefW,Display.getInstance().getDisplayWidth() / 2);      prefH=Math.max(prefH,Font.getDefaultFont().getHeight());    }  }  if (prefH != 0) {    prefH+=(style.getPadding(false,Component.TOP) + style.getPadding(false,Component.BOTTOM));  }  if (prefW != 0) {    prefW+=(style.getPadding(isRTL(),Component.RIGHT) + style.getPadding(isRTL(),Component.LEFT));  }  return new Dimension(prefW,prefH);}  }
class C{  public static boolean match(String patternText,ParseTreeNode specimen,Map<String,ParseTreeNode> bindings){  Map<String,ParseTreeNode> tempBindings=getPatternNode(patternText).match(specimen);  if (tempBindings != null) {    bindings.putAll(tempBindings);    return true;  }  return false;}  }
class C{  protected void retrieveExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  CampoTablaVO campoTablaVO=(CampoTablaVO)request.getAttribute("campoTablaVO");  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  List listaCamposDato=descripcionService.getCamposDatoOrderByPosEnTbl(campoTablaVO.getId());  setInTemporalSession(request,ControlAccesoConstants.LISTA_CAMPOS_DATO,listaCamposDato);  CamposTablaForm camposTablaForm=(CamposTablaForm)form;  if (campoTablaVO.getIdArea() != null) {    AreaVO areaVO=descripcionService.getArea(campoTablaVO.getIdArea());    camposTablaForm.setArea(areaVO.getNombre());  }  camposTablaForm.set(campoTablaVO);  camposTablaForm.setNorma(descripcionService.getTipoNormaText(Integer.parseInt(camposTablaForm.getTipoNorma())));  setReturnActionFordward(request,mapping.findForward("retrieve"));}  }
class C{  public String convertTypeAccessModifierToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public static void main(String args[]){  ActorSystem actorSystem=ActorSystem.create("AkkaRemoteClient",ConfigFactory.load());  ActorRef client=actorSystem.actorOf(Props.create(ClientActor.class));  for (int i=0; i < TIMES; i++) {    client.tell("Start",ActorRef.noSender());  }  waitXSeconds(WAIT_SECONDS);  actorSystem.shutdown();}  }
class C{  public CimCompositeID(CIMObjectPath path){  _value=parsePath(path);}  }
class C{  public void registerCustomRenderer(RenderPaymentItemInterface renderer){  if (renderer == null) {    throw new InvalidParameterException("Error setting custom renderer, renderer may not be null");  }  this.renderer=renderer;}  }
class C{  static void fake_memset_127(double[] a){  double d=Double.longBitsToDouble(0x7f7f7f7f7f7f7f7fL);  for (int n=0; n < a.length; n++) {    a[n]=d;  }}  }
class C{  public CountRequest terminateAfter(int terminateAfterCount){  if (terminateAfterCount <= 0) {    throw new IllegalArgumentException("terminateAfter must be > 0");  }  this.terminateAfter=terminateAfterCount;  return this;}  }
class C{  @CanIgnoreReturnValue public Builder addEscape(char c,String replacement){  checkNotNull(replacement);  replacementMap.put(c,replacement);  return this;}  }
class C{  public static void mixin(MetaClass self,Class[] categoryClass){  mixin(self,Arrays.asList(categoryClass));}  }
class C{  public void moveViewTo(float xIndex,float yValue,AxisDependency axis){  float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();  Runnable job=new MoveViewJob(mViewPortHandler,xIndex,yValue + valsInView / 2f,getTransformer(axis),this);  if (mViewPortHandler.hasChartDimens()) {    post(job);  } else {    mJobs.add(job);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected boolean isAlwaysNonNull(Value v){  return false;}  }
class C{  public int copy(byte[] bytes,int at){  System.arraycopy(this.bytes,0,bytes,at,this.length);  return at + this.length;}  }
class C{  public void fadeInAllLayers(){  mTransitionState=TRANSITION_STARTING;  Arrays.fill(mIsLayerOn,true);  invalidateSelf();}  }
class C{  public void countSchemas(){  for (  String schemaName : dbMap.keySet()) {    String nextServiceName=schemaToServiceName(schemaName);    if (nextServiceName == null) {      singleDbName=schemaName;      normalDbCount++;      if (logger.isDebugEnabled())       logger.debug("Found local database: " + schemaName);    } else {      tungstenDbCount++;      singleDbName=schemaName;      service=nextServiceName;      if (logger.isDebugEnabled())       logger.debug("Found tungsten database: " + schemaName);    }  }  if (tungstenDbCount > 1) {    service=schemaToServiceName(lastDb);  }}  }
class C{  private void createBalancing(MAcctSchemaDefault asDefaultAccts,MJournal journal,BigDecimal drTotal,BigDecimal crTotal,int AD_Org_ID,int lineNo){  if (journal == null)   throw new IllegalArgumentException("Jornal is null");  if (drTotal.signum() != 0) {    MJournalLine line=new MJournalLine(journal);    line.setLine(lineNo + 1);    MAccount base=MAccount.get(getCtx(),asDefaultAccts.getUnrealizedGain_Acct());    MAccount acct=MAccount.get(getCtx(),asDefaultAccts.getAD_Client_ID(),AD_Org_ID,asDefaultAccts.getC_AcctSchema_ID(),base.getAccount_ID(),base.getC_SubAcct_ID(),base.getM_Product_ID(),base.getC_BPartner_ID(),base.getAD_OrgTrx_ID(),base.getC_LocFrom_ID(),base.getC_LocTo_ID(),base.getC_SalesRegion_ID(),base.getC_Project_ID(),base.getC_Campaign_ID(),base.getC_Activity_ID(),base.getUser1_ID(),base.getUser2_ID(),base.getUserElement1_ID(),base.getUserElement2_ID(),null);    line.setDescription(Msg.getElement(getCtx(),"UnrealizedGain_Acct"));    line.setC_ValidCombination_ID(acct.getC_ValidCombination_ID());    line.setAmtSourceCr(drTotal);    line.setAmtAcctCr(drTotal);    line.saveEx();  }  if (crTotal.signum() != 0) {    MJournalLine line=new MJournalLine(journal);    line.setLine(lineNo + 2);    MAccount base=MAccount.get(getCtx(),asDefaultAccts.getUnrealizedLoss_Acct());    MAccount acct=MAccount.get(getCtx(),asDefaultAccts.getAD_Client_ID(),AD_Org_ID,asDefaultAccts.getC_AcctSchema_ID(),base.getAccount_ID(),base.getC_SubAcct_ID(),base.getM_Product_ID(),base.getC_BPartner_ID(),base.getAD_OrgTrx_ID(),base.getC_LocFrom_ID(),base.getC_LocTo_ID(),base.getC_SalesRegion_ID(),base.getC_Project_ID(),base.getC_Campaign_ID(),base.getC_Activity_ID(),base.getUser1_ID(),base.getUser2_ID(),base.getUserElement1_ID(),base.getUserElement2_ID(),null);    line.setDescription(Msg.getElement(getCtx(),"UnrealizedLoss_Acct"));    line.setC_ValidCombination_ID(acct.getC_ValidCombination_ID());    line.setAmtSourceDr(crTotal);    line.setAmtAcctDr(crTotal);    line.saveEx();  }}  }
class C{  public void removeOneToOneFileTransfer(String fileTransferId){  if (sLogger.isActivated()) {    sLogger.debug("Remove a file transfer from the list (size=" + mOneToOneFileTransferCache.size() + ")");  }  mOneToOneFileTransferCache.remove(fileTransferId);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void reset(){  if (log.isInfoEnabled())   log.info("resource=" + getDocumentIdentifier());  bnodes.set(null);  values=null;  statements=null;  statementCount=0;}  }
class C{  public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){  Random random=new Random();  Cache.Entry entry=new Cache.Entry();  if (data != null) {    entry.data=data;  } else {    entry.data=new byte[random.nextInt(1024)];  }  entry.etag=String.valueOf(random.nextLong());  entry.serverDate=random.nextLong();  entry.ttl=isExpired ? 0 : Long.MAX_VALUE;  entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE;  return entry;}  }
class C{  public void addSpecMethod(SootMethod sm){  all_sys_methods.addMethod(sm);  spec_methods.addMethod(sm);  api_modeled_methods.addMethod(sm);}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(Application.class);  SimpleCommandLinePropertySource source=new SimpleCommandLinePropertySource(args);  addDefaultProfile(app,source);  Environment env=app.run(args).getEnvironment();  log.info("Access URLs:\n----------------------------------------------------------\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t" + "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));}  }
class C{  @Override public String toString(){  if (m_Handler != null)   return m_File.getAbsolutePath() + "\t" + Utils.toCommandLine(m_Handler); else   return m_File.getAbsolutePath() + "\t";}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS__ELEMENTS:    return ((InternalEList<?>)getElements()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Object visit(ASTStringLiteral node,Object data){  return showNode(node,data);}  }
class C{  public boolean isSourceUnit(){  return su != null;}  }
class C{  public static InputStream toInputStream(String input){  byte[] bytes=input.getBytes();  return new ByteArrayInputStream(bytes);}  }
class C{  public void appendOpenInlinedQuoteTag(String style){  StringBuilder sb=new StringBuilder("<q");  if (style != null) {    sb.append(" style=\"");    sb.append(style);    sb.append("\"");  }  sb.append(">");  text.append(sb.toString());}  }
class C{  public double specificity(int negatives){  return ((double)tn) / (negatives);}  }
class C{  public final void tunnelProxy(HttpHost proxy,boolean secure){  if (proxy == null) {    throw new IllegalArgumentException("Proxy host may not be null.");  }  if (!this.connected) {    throw new IllegalStateException("No tunnel unless connected.");  }  if (this.proxyChain == null) {    throw new IllegalStateException("No proxy tunnel without proxy.");  }  HttpHost[] proxies=new HttpHost[this.proxyChain.length + 1];  System.arraycopy(this.proxyChain,0,proxies,0,this.proxyChain.length);  proxies[proxies.length - 1]=proxy;  this.proxyChain=proxies;  this.secure=secure;}  }
class C{  static String encodeHighLevel(String msg,Compaction compaction) throws WriterException {  byte[] bytes=null;  StringBuilder sb=new StringBuilder(msg.length());  int len=msg.length();  int p=0;  int textSubMode=SUBMODE_ALPHA;  if (compaction == Compaction.TEXT) {    encodeText(msg,p,len,sb,textSubMode);  } else   if (compaction == Compaction.BYTE) {    bytes=getBytesForMessage(msg);    encodeBinary(bytes,p,bytes.length,BYTE_COMPACTION,sb);  } else   if (compaction == Compaction.NUMERIC) {    sb.append((char)LATCH_TO_NUMERIC);    encodeNumeric(msg,p,len,sb);  } else {    int encodingMode=TEXT_COMPACTION;    while (p < len) {      int n=determineConsecutiveDigitCount(msg,p);      if (n >= 13) {        sb.append((char)LATCH_TO_NUMERIC);        encodingMode=NUMERIC_COMPACTION;        textSubMode=SUBMODE_ALPHA;        encodeNumeric(msg,p,n,sb);        p+=n;      } else {        int t=determineConsecutiveTextCount(msg,p);        if (t >= 5 || n == len) {          if (encodingMode != TEXT_COMPACTION) {            sb.append((char)LATCH_TO_TEXT);            encodingMode=TEXT_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          textSubMode=encodeText(msg,p,t,sb,textSubMode);          p+=t;        } else {          if (bytes == null) {            bytes=getBytesForMessage(msg);          }          int b=determineConsecutiveBinaryCount(msg,bytes,p);          if (b == 0) {            b=1;          }          if (b == 1 && encodingMode == TEXT_COMPACTION) {            encodeBinary(bytes,p,1,TEXT_COMPACTION,sb);          } else {            encodeBinary(bytes,p,b,encodingMode,sb);            encodingMode=BYTE_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          p+=b;        }      }    }  }  return sb.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (stack.getUIComponent() != null)   stack.getUIComponent().setPrevTransitionListen();  if (uiComp != null && uiComp.getUIMgr().areEffectsEnabled()) {    ZDataTable tabParent=uiComp.getTableParent();    if (tabParent != null) {      return tabParent.isDoingPrevTransition() ? Boolean.TRUE : Boolean.FALSE;    }  }  return Boolean.FALSE;}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  @Provides public ServiceFactory serviceFactory() throws IOException {  ipServiceCallMock=mock(Call.class);  IpService ipServiceMock=mock(IpService.class);  when(ipServiceMock.getIp(anyString())).thenReturn(ipServiceCallMock);  ServiceFactory serviceFactoryMock=mock(ServiceFactory.class);  when(serviceFactoryMock.createService(IpService.class)).thenReturn(ipServiceMock);  return serviceFactoryMock;}  }
class C{  public MultipleObjectsBundle appendColumn(SimpleTypeInformation<?> type,List<?> data){  meta.add(type);  columns.add(data);  return this;}  }
class C{  private double paintBoxPlot(Graphics2D g2,Tree tree,NodeRef node,double x1,boolean fill){  double y;  double iy;  if (tree.isExternal(node)) {    if (rememberYPositions) {      String taxonId=tree.getNodeTaxon(node).getId();      Double pos=yPositionMap.get(taxonId);      if (pos != null) {        y=pos;      } else {        y=currentY;        currentY+=1.0;        yPositionMap.put(taxonId,y);      }    } else {      y=currentY;      currentY+=1.0;    }    iy=convertY(y);  } else {    double y0, y1;    NodeRef child=tree.getChild(node,0);    double length=tree.getNodeHeight(node) - tree.getNodeHeight(child);    y0=paintBoxPlot(g2,tree,child,x1 - length,fill);    y1=y0;    for (int i=1; i < tree.getChildCount(node); i++) {      child=tree.getChild(node,i);      length=tree.getNodeHeight(node) - tree.getNodeHeight(child);      y1=paintBoxPlot(g2,tree,child,x1 - length,fill);    }    y=(y1 + y0) / 2;    iy=convertY(y);  }  Double mean=(Double)tree.getNodeAttribute(node,"nodeHeight.mean");  if (mean != null) {    if (tree.isRoot(node)) {      System.out.println(mean.doubleValue());    }    Double hpdUpper=(Double)tree.getNodeAttribute(node,"nodeHeight.hpdUpper");    Double hpdLower=(Double)tree.getNodeAttribute(node,"nodeHeight.hpdLower");    double upperX=convertX(hpdUpper);    double lowerX=convertX(hpdLower);    g2.setStroke(lineStroke);    if (fill) {      g2.setColor(Color.white);      g2.fill(new Rectangle2D.Double(upperX,iy - boxPlotSize,lowerX - upperX,2 * boxPlotSize));    }    g2.setColor(Color.gray);    g2.draw(new Rectangle2D.Double(upperX,iy - boxPlotSize,lowerX - upperX,2 * boxPlotSize));  }  return y;}  }
class C{  public static GenericSqliteHelper open(String dbFile){  File fs=new File(dbFile);  return open(fs);}  }
class C{  public DocumentListEntry moveObjectToFolder(String resourceId,String folderId) throws IOException, MalformedURLException, ServiceException, DocumentListException {  if (resourceId == null || folderId == null) {    throw new DocumentListException("null passed in for required parameters");  }  DocumentListEntry doc=new DocumentListEntry();  doc.setId(buildUrl(URL_DEFAULT + URL_DOCLIST_FEED + "/"+ resourceId).toString());  URL url=buildUrl(URL_DEFAULT + URL_DOCLIST_FEED + "/"+ folderId+ URL_FOLDERS);  return service.insert(url,doc);}  }
class C{  protected boolean visitNode(ASTNode node){  return true;}  }
class C{  public RandomizedSet(){}  }
class C{  public boolean hasGeoPoint(){  return hasExtension(W3CPoint.class);}  }
class C{  public void paintScrollBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public IStarConstraint<ISPO> asBound(IBindingSet bindingSet){  final IVariableOrConstant<IV> p;{    if (this.p.isVar() && bindingSet.isBound((IVariable)this.p)) {      p=bindingSet.get((IVariable)this.p);    } else {      p=this.p;    }  }  final IVariableOrConstant<IV> o;{    if (this.o.isVar() && bindingSet.isBound((IVariable)this.o)) {      o=bindingSet.get((IVariable)this.o);    } else {      o=this.o;    }  }  return new SPOStarConstraint(p,o,optional);}  }
class C{  public Map<String,CRV> normalize(){  final TreeMap<Double,List<byte[]>> reorder=new TreeMap<Double,List<byte[]>>();  for (  Map.Entry<String,double[]> entry : this.crt.entrySet()) {    Double d=entry.getValue()[0];    List<byte[]> ds=reorder.get(d);    if (ds == null) {      ds=new ArrayList<byte[]>();      reorder.put(d,ds);    }    ds.add(ASCII.getBytes(entry.getKey()));  }  int nextcount=(this.cr_host_count + 1) / 2;  int nextcrn=0;  Map<String,CRV> r=new HashMap<String,CRV>();  while (reorder.size() > 0) {    int count=nextcount;    while (reorder.size() > 0 && count > 0) {      Map.Entry<Double,List<byte[]>> next=reorder.pollFirstEntry();      List<byte[]> ids=next.getValue();      count-=ids.size();      double cr=next.getKey();      for (      byte[] id : ids)       r.put(ASCII.String(id),new CRV(this.cr_host_count,cr,nextcrn));    }    nextcrn++;    nextcount=Math.max(1,(nextcount + count + 1) / 2);  }  int inc=11 - nextcrn;  for (  Map.Entry<String,CRV> entry : r.entrySet())   entry.getValue().crn+=inc;  return r;}  }
class C{  public static ContentAssistHistory load(Preferences preferences,String key){  String value=preferences.getString(key);  if (value != null && value.length() > 0) {    return new ReaderWriter().load(value);  }  return null;}  }
class C{  public void addDouble(double x){  prep(8,0);  putDouble(x);}  }
class C{  public static void main(String[] args){  try {    if (args.length == 0) {      throw new Exception("The first argument must be the class name" + " of a classifier");    }    String classifier=args[0];    args[0]="";    System.out.println(evaluateModel(classifier,args));  } catch (  Exception ex) {    ex.printStackTrace();    System.err.println(ex.getMessage());  }}  }
class C{  public static ValueNode nonNullReceiver(Invoke invoke){  MethodCallTargetNode callTarget=(MethodCallTargetNode)invoke.callTarget();  assert !callTarget.isStatic() : callTarget.targetMethod();  StructuredGraph graph=callTarget.graph();  ValueNode firstParam=callTarget.arguments().get(0);  if (firstParam.getStackKind() == JavaKind.Object) {    Stamp paramStamp=firstParam.stamp();    Stamp stamp=paramStamp.join(StampFactory.objectNonNull(TypeReference.create(graph.getAssumptions(),callTarget.targetMethod().getDeclaringClass())));    if (!StampTool.isPointerNonNull(firstParam)) {      LogicNode condition=graph.unique(IsNullNode.create(firstParam));      FixedGuardNode fixedGuard=graph.add(new FixedGuardNode(condition,NullCheckException,InvalidateReprofile,true));      PiNode nonNullReceiver=graph.unique(new PiNode(firstParam,stamp,fixedGuard));      graph.addBeforeFixed(invoke.asNode(),fixedGuard);      callTarget.replaceFirstInput(firstParam,nonNullReceiver);      return nonNullReceiver;    }    if (!stamp.equals(paramStamp)) {      PiNode cast=graph.unique(new PiNode(firstParam,stamp));      callTarget.replaceFirstInput(firstParam,cast);      return cast;    }  }  return firstParam;}  }
class C{  public static void shiftMappingVector(Vector mvec,int shift){  for (int i=0; i < mvec.size(); i++) {    Vector line=(Vector)mvec.elementAt(i);    for (int j=0; j < line.size(); j++) {      MappingObject mobj=(MappingObject)line.elementAt(j);      if (mobj.type == BEGIN_TLATOKEN) {        BeginTLAToken obj=(BeginTLAToken)mobj;        obj.setColumn(obj.getColumn() + shift);      } else       if (mobj.type == END_TLATOKEN) {        EndTLAToken obj=(EndTLAToken)mobj;        obj.setColumn(obj.getColumn() + shift);      } else       if (mobj.type == SOURCE_TOKEN) {        SourceToken obj=(SourceToken)mobj;        obj.setBeginColumn(obj.getBeginColumn() + shift);        obj.setEndColumn(obj.getEndColumn() + shift);      }    }  }}  }
class C{  public boolean readOptions(){  String filename=modelDir + File.separator + optionFile;  BufferedReader fin=null;  String line;  try {    fin=new BufferedReader(new FileReader(filename));    System.out.println("Reading options ...");    while ((line=fin.readLine()) != null) {      String trimLine=line.trim();      if (trimLine.startsWith("#")) {        continue;      }      StringTokenizer strTok=new StringTokenizer(line,"= \t\r\n");      int len=strTok.countTokens();      if (len != 2) {        continue;      }      String strOpt=strTok.nextToken();      String strVal=strTok.nextToken();      if (strOpt.compareToIgnoreCase("order") == 0) {        int numTemp=Integer.parseInt(strVal);        order=numTemp;      }    }    System.out.println("Reading options completed!");  } catch (  IOException e) {    System.out.println("Couldn't open and read option file: " + optionFile);    System.out.println(e.toString());    return false;  }  return true;}  }
class C{  public void writePathsToStream(final ObjectOutput os) throws IOException {  if ((cached_current_path != null)) {    final GeneralPath[] paths=cached_current_path.get();    int count=0;    for (int i=0; i < paths.length; i++) {      if (paths[i] == null) {        count=i;        break;      }    }    os.writeObject(count);    for (int i=0; i < count; i++) {      final PathIterator pathIterator=paths[i].getPathIterator(new AffineTransform());      PathSerializer.serializePath(os,pathIterator);    }  }}  }
class C{  public void endObject() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_END_OBJECT) {    stackSize--;    pathNames[stackSize]=null;    pathIndices[stackSize - 1]++;    peeked=PEEKED_NONE;  } else {    throw new IllegalStateException("Expected END_OBJECT but was " + peek() + locationString());  }}  }
class C{  public void addPoint(PointLayer point){  Image pointIcon=point.getIcon();  if (pointIcon == null) {    point.setIcon(icon);  }  if (!point.isProjected()) {    Coord c=getProjection().fromWGS84(point);    point.setLatitude(c.getLatitude());    point.setLongitude(c.getLongitude());    point.setProjected(true);  }  points.addElement(point);}  }
class C{  private String readNodeAddress(){  String addr="";  addr=(String)nodeAddrField.getSelectedItem();  if (addr == null || addr.equals("FF FE ") || addr.equals("FF FF ")) {    addr=(String)nodeAddr64Field.getSelectedItem();    if (addr == null)     throw new IllegalArgumentException("Invalid Address");  }  return (addr);}  }
class C{  @Override public DataRow next(){  if (eof == true) {    return null;  }  if (!lineRead) {    if (!hasNext()) {      return null;    }  }  String[] data=new String[attributes.length];  for (int i=0; i < attributes.length; i++) {    if (dataSourceIndex[i][1] == -1) {      data[i]=null;    } else {      data[i]=currentData[dataSourceIndex[i][0]][dataSourceIndex[i][1]];    }  }  DataRow dataRow=getFactory().create(data,attributes);  linesRead++;  lineRead=false;  return dataRow;}  }
class C{  private boolean checkTaskIsInterrupted(){  boolean interrupted=Thread.interrupted();  if (interrupted)   log(LOG_TASK_INTERRUPTED);  return interrupted;}  }
class C{  public final List<Token> tokenize(String[] source){  List<Token> tokens=new ArrayList<Token>();  for (  String string : source) {    DelphiLexer lexer=new DelphiLexer(new ANTLRStringStream(string));    Token token=lexer.nextToken();    token.setText(token.getText().toLowerCase());    while (token.getType() != Token.EOF) {      tokens.add(token);      token=lexer.nextToken();    }  }  tokens.add(Token.EOF_TOKEN);  return tokens;}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  this.parentDistance=in.readDouble();}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path("/metrics") @Description("Submits externally collected metric data.") public Map<String,Object> submitMetrics(@Context HttpServletRequest req,final List<MetricDto> metricDtos){  PrincipalUser remoteUser=getRemoteUser(req);  SystemAssert.requireArgument(metricDtos != null,"Cannot submit null timeseries metrics list.");  List<Metric> legalMetrics=new ArrayList<>();  List<MetricDto> illegalMetrics=new ArrayList<>();  List<String> errorMessages=new ArrayList<>();  for (  MetricDto metricDto : metricDtos) {    try {      Metric metric=new Metric(metricDto.getScope(),metricDto.getMetric());      copyProperties(metric,metricDto);      legalMetrics.add(metric);    } catch (    Exception e) {      illegalMetrics.add(metricDto);      errorMessages.add(e.getMessage());    }  }  _collectionService.submitMetrics(remoteUser,legalMetrics);  Map<String,Object> result=new HashMap<>();  result.put("Success",legalMetrics.size() + " metrics");  result.put("Error",illegalMetrics.size() + " metrics");  result.put("Error Messages",errorMessages);  return result;}  }
class C{  public static Position interpolateRhumb(double amount,Position value1,Position value2){  if (value1 == null || value2 == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  LatLon latLon=LatLon.interpolateRhumb(amount,value1,value2);  double elevation=WWMath.mix(amount,value1.getElevation(),value2.getElevation());  return new Position(latLon,elevation);}  }
class C{  public static String encode(byte[] data,int start,int length) throws ArrayIndexOutOfBoundsException {  StringWriter out=new StringWriter();  ByteArrayInputStream in=new ByteArrayInputStream(data,start,length);  try {    encode(in,out);    in.close();    out.flush();    out.close();  } catch (  IOException ioe) {    return ioe.toString();  }  return out.toString();}  }
class C{  protected String formatVersionedResource(final String hash,final String resourcePath){  return String.format("%s/%s",hash,resourcePath);}  }
class C{  public SWFVectors tagDefineFont(int id,int numGlyphs) throws IOException {  startTag(TAG_DEFINEFONT,id,true);  return new SWFShapeImpl(this,numGlyphs);}  }
class C{  public static String loadFileWithSubstitutions(Class<?> context,String filename,Map<String,String> substitutions){  String fileContents=readResourceUtf8(context,"testdata/" + filename);  for (  Entry<String,String> entry : nullToEmpty(substitutions).entrySet()) {    fileContents=fileContents.replaceAll("%" + entry.getKey() + "%",entry.getValue());  }  return fileContents;}  }
class C{  public File images(){  return imagesFile;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYLineAndShapeRenderer)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  XYLineAndShapeRenderer that=(XYLineAndShapeRenderer)obj;  if (!ObjectUtilities.equal(this.linesVisible,that.linesVisible)) {    return false;  }  if (!ObjectUtilities.equal(this.seriesLinesVisible,that.seriesLinesVisible)) {    return false;  }  if (this.baseLinesVisible != that.baseLinesVisible) {    return false;  }  if (!ShapeUtilities.equal(this.legendLine,that.legendLine)) {    return false;  }  if (!ObjectUtilities.equal(this.shapesVisible,that.shapesVisible)) {    return false;  }  if (!ObjectUtilities.equal(this.seriesShapesVisible,that.seriesShapesVisible)) {    return false;  }  if (this.baseShapesVisible != that.baseShapesVisible) {    return false;  }  if (!ObjectUtilities.equal(this.shapesFilled,that.shapesFilled)) {    return false;  }  if (!ObjectUtilities.equal(this.seriesShapesFilled,that.seriesShapesFilled)) {    return false;  }  if (this.baseShapesFilled != that.baseShapesFilled) {    return false;  }  if (this.drawOutlines != that.drawOutlines) {    return false;  }  if (this.useOutlinePaint != that.useOutlinePaint) {    return false;  }  if (this.useFillPaint != that.useFillPaint) {    return false;  }  if (this.drawSeriesLineAsPath != that.drawSeriesLineAsPath) {    return false;  }  return true;}  }
class C{  public ConstraintImplementation(final boolean result){  this.result=result;}  }
class C{  public boolean hasProperties(){  return hasRepeatingExtension(Property.class);}  }
class C{  public static _ServiceHostStatus fromString(final String value) throws SOAPSerializationException {  return (_ServiceHostStatus)Enumeration.fromString(value,_ServiceHostStatus.VALUES_TO_INSTANCES);}  }
class C{  JvmMemPoolTableCache(long validity){  this.validity=validity;}  }
class C{  synchronized void release(AllocationImpl allocation){  byte[][] buffers=allocation.getBuffers();  allocatedBufferCount-=buffers.length;  int newRecycledBufferCount=recycledBufferCount + buffers.length;  ensureRecycledBufferCapacity(newRecycledBufferCount);  System.arraycopy(buffers,0,recycledBuffers,recycledBufferCount,buffers.length);  recycledBufferCount=newRecycledBufferCount;}  }
class C{  public ProvisionNamespaceNotification(final Account owner,final NamespaceId namespaceId){  super(NotificationType.ProvisionNamespace);  this.owner=owner;  this.namespaceId=namespaceId;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public synchronized void clear(){  freeSpaceList.clear();  freeSpaceList.add(new BlockRange(firstFreeBlock,Integer.MAX_VALUE - firstFreeBlock));}  }
class C{  private boolean certifySolution(Graph G){  for (int v=0; v < V; v++) {    if (mate(v) == -1)     continue;    if (mate(mate(v)) != v)     return false;  }  int matchedVertices=0;  for (int v=0; v < V; v++) {    if (mate(v) != -1)     matchedVertices++;  }  if (2 * size() != matchedVertices)   return false;  int sizeOfMinVertexCover=0;  for (int v=0; v < V; v++)   if (inMinVertexCover(v))   sizeOfMinVertexCover++;  if (size() != sizeOfMinVertexCover)   return false;  boolean[] isMatched=new boolean[V];  for (int v=0; v < V; v++) {    int w=mate[v];    if (w == -1)     continue;    if (v == w)     return false;    if (v >= w)     continue;    if (isMatched[v] || isMatched[w])     return false;    isMatched[v]=true;    isMatched[w]=true;  }  for (int v=0; v < V; v++) {    if (mate(v) == -1)     continue;    boolean isEdge=false;    for (    int w : G.adj(v)) {      if (mate(v) == w)       isEdge=true;    }    if (!isEdge)     return false;  }  for (int v=0; v < V; v++)   for (  int w : G.adj(v))   if (!inMinVertexCover(v) && !inMinVertexCover(w))   return false;  return true;}  }
class C{  public List<KrigingPoint> RandomizePoints(List<KrigingPoint> pnts,int n){  Random rnd=new Random();  List<KrigingPoint> res=new ArrayList();  double drnd=0.0;  for (int i=0; i < n; i++) {    res.add(pnts.get(rnd.nextInt(pnts.size())));  }  return res;}  }
class C{  public static boolean equals(short[][] left,short[][] right){  if (left.length != right.length) {    return false;  }  boolean result=true;  for (int i=left.length - 1; i >= 0; i--) {    result&=equals(left[i],right[i]);  }  return result;}  }
class C{  public static IntList view(int[] array,int length){  if (length > array.length || length < 0)   throw new IllegalArgumentException("length must be non-negative and no more than the size of the array(" + array.length + "), not "+ length);  return new IntList(array,length);}  }
class C{  public T caseFunction(Function object){  return null;}  }
class C{  public static List<ComponentName> findServices(Context context,String permission){  PackageManager packageManager=context.getPackageManager();  String packageName=context.getPackageName();  Log.d(TAG,"Checking package: " + packageName);  PackageInfo servicesInfo;  try {    servicesInfo=packageManager.getPackageInfo(packageName,PackageManager.GET_SERVICES);  } catch (  PackageManager.NameNotFoundException e) {    throw new IllegalStateException("Could not get services for package " + packageName);  }  ArrayList<ComponentName> results=new ArrayList<>();  ServiceInfo[] services=servicesInfo.services;  if (services != null) {    for (    ServiceInfo service : services) {      if (permission.equals(service.permission)) {        ComponentName cn=new ComponentName(packageName,service.name);        results.add(cn);      }    }  }  return results;}  }
class C{  private void handleEditorBindingsReceived(JSONObject message){  if (SensorsDataAPI.ENABLE_LOG) {    Log.d(LOGTAG,String.format("Received event bindings from VTrack editor: %s",message.toString()));  }  final JSONArray eventBindings;  sendEventBindingResponse(true);  try {    final JSONObject payload=message.getJSONObject("payload");    eventBindings=payload.getJSONArray("events");  } catch (  final JSONException e) {    Log.e(LOGTAG,"Bad event bindings received",e);    return;  }  final int eventCount=eventBindings.length();  mEditorEventBindings.clear();  for (int i=0; i < eventCount; i++) {    try {      final JSONObject event=eventBindings.getJSONObject(i);      final String targetActivity=JSONUtils.optionalStringKey(event,"target_activity");      mEditorEventBindings.add(new Pair<String,JSONObject>(targetActivity,event));    } catch (    final JSONException e) {      Log.e(LOGTAG,"Bad event binding received from VTrack server in " + eventBindings.toString(),e);    }  }  applyVariantsAndEventBindings();}  }
class C{  private LivenessAnalyzer(SsaMethod ssaMeth,int reg,InterferenceGraph interference){  int blocksSz=ssaMeth.getBlocks().size();  this.ssaMeth=ssaMeth;  this.regV=reg;  visitedBlocks=new BitSet(blocksSz);  liveOutBlocks=new BitSet(blocksSz);  this.interference=interference;}  }
class C{  private static String avatar(String name){  int bgColor=name.hashCode() & 0xffffff;  int fgColor=(~bgColor) & 0xffffff;  return String.format(Locale.ROOT,"http://placehold.it/256x256/%06x/%06x?text=%s",bgColor,fgColor,name);}  }
class C{  public synchronized int addLog(File file,boolean postAnnouncements,boolean appendOnRestart,boolean gzip) throws IOException {  return addLog(file,V_VERBOSE,postAnnouncements,appendOnRestart,gzip);}  }
class C{  public void fireWebEvent(String type,ActionEvent ev){  EventDispatcher e=getEventDispatcher(type,false);  if (e != null) {    e.fireActionEvent(ev);  }}  }
class C{  public void clearEntityManagerFactoryCache(){  factoryCache.clear();}  }
class C{  public boolean isUnique_1(){  return unique_1;}  }
class C{  public boolean isBloomFilteringSupported(){  return clientVersion >= FilteredBlock.MIN_PROTOCOL_VERSION;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public boolean onLoadError(HlsChunk chunk,IOException e){  if ((chunk instanceof MediaPlaylistChunk) && (e instanceof InvalidResponseCodeException)) {    InvalidResponseCodeException responseCodeException=(InvalidResponseCodeException)e;    int responseCode=responseCodeException.responseCode;    if (responseCode == 404 || responseCode == 410) {      MediaPlaylistChunk playlistChunk=(MediaPlaylistChunk)chunk;      mediaPlaylistBlacklistFlags[playlistChunk.variantIndex]=true;      if (!allPlaylistsBlacklisted()) {        Log.w(TAG,"Blacklisted playlist (" + responseCode + "): "+ playlistChunk.dataSpec.uri);        return true;      } else {        Log.w(TAG,"Final playlist not blacklisted (" + responseCode + "): "+ playlistChunk.dataSpec.uri);        mediaPlaylistBlacklistFlags[playlistChunk.variantIndex]=false;        return false;      }    }  }  return false;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,false);}  }
class C{  public void test_initLjava_security_KeyStore_01() throws Exception {  KeyStore ksNull=null;  TrustManagerFactory[] trustMF=createTMFac();  assertNotNull("TrustManagerFactory objects were not created",trustMF);  try {    trustMF[0].init(ksNull);  } catch (  Exception ex) {    fail(ex + " unexpected exception was thrown for null parameter");  }}  }
class C{  public LensTranslatingGraphMousePlugin(int modifiers){  super(modifiers);}  }
class C{  float newInterval(Interval interval){  if (owner.hasPropagated) {    return Float.POSITIVE_INFINITY;  }  InstanceTime instance=new InstanceTime(this,(syncBegin ? interval.getBegin() : interval.getEnd()) + offset,true);  instances.put(interval,instance);  interval.addDependent(instance,syncBegin);  return owner.addInstanceTime(instance,isBegin);}  }
class C{  public boolean visitStylesheet(ElemTemplateElement elem){  return true;}  }
class C{  public boolean isBound(){  return isBound;}  }
class C{  static boolean handleFolderKeyEvent(View v,int keyCode,KeyEvent e){  ShortcutAndWidgetContainer parent=(ShortcutAndWidgetContainer)v.getParent();  final CellLayout layout=(CellLayout)parent.getParent();  final ScrollView scrollView=(ScrollView)layout.getParent();  final Folder folder=(Folder)scrollView.getParent();  View title=folder.mFolderName;  final int action=e.getAction();  final boolean handleKeyEvent=(action != KeyEvent.ACTION_UP);  boolean wasHandled=false;switch (keyCode) {case KeyEvent.KEYCODE_DPAD_LEFT:    if (handleKeyEvent) {      View newIcon=getIconInDirection(layout,parent,v,-1);      if (newIcon != null) {        newIcon.requestFocus();        v.playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);      }    }  wasHandled=true;break;case KeyEvent.KEYCODE_DPAD_RIGHT:if (handleKeyEvent) {View newIcon=getIconInDirection(layout,parent,v,1);if (newIcon != null) {  newIcon.requestFocus();} else {  title.requestFocus();}v.playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);}wasHandled=true;break;case KeyEvent.KEYCODE_DPAD_UP:if (handleKeyEvent) {View newIcon=getClosestIconOnLine(layout,parent,v,-1);if (newIcon != null) {newIcon.requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);}}wasHandled=true;break;case KeyEvent.KEYCODE_DPAD_DOWN:if (handleKeyEvent) {View newIcon=getClosestIconOnLine(layout,parent,v,1);if (newIcon != null) {newIcon.requestFocus();} else {title.requestFocus();}v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);}wasHandled=true;break;case KeyEvent.KEYCODE_MOVE_HOME:if (handleKeyEvent) {View newIcon=getIconInDirection(layout,parent,-1,1);if (newIcon != null) {newIcon.requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);}}wasHandled=true;break;case KeyEvent.KEYCODE_MOVE_END:if (handleKeyEvent) {View newIcon=getIconInDirection(layout,parent,parent.getChildCount(),-1);if (newIcon != null) {newIcon.requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);}}wasHandled=true;break;default :break;}return wasHandled;}  }
class C{  public String encryptPin(String pin){  Cipher mwkCipher=this.getCipher(this.getMwkKey(),Cipher.ENCRYPT_MODE);  byte[] pinBytes=pin.getBytes();  byte[] random=this.getRandomBytes(7);  byte[] checkSum=this.getPinCheckSum(pinBytes);  byte[] eanBlock=new byte[16];  int i;  for (i=0; i < random.length; i++) {    eanBlock[i]=random[i];  }  eanBlock[7]=checkSum[0];  for (i=0; i < pinBytes.length; i++) {    eanBlock[i + 8]=pinBytes[i];  }  String encryptedEanHex=null;  try {    byte[] encryptedEan=mwkCipher.doFinal(eanBlock);    encryptedEanHex=StringUtil.toHexString(encryptedEan);  } catch (  IllegalStateException e) {    Debug.logError(e,module);  }catch (  IllegalBlockSizeException e) {    Debug.logError(e,module);  }catch (  BadPaddingException e) {    Debug.logError(e,module);  }  if (debug) {    Debug.logInfo("encryptPin : " + pin + " / "+ encryptedEanHex,module);  }  return encryptedEanHex;}  }
class C{  @Around("execution(* org.yes.cart.service.domain.impl.ManagerServiceImpl.resetPassword(..))") public Object doResetPassword(final ProceedingJoinPoint pjp) throws Throwable {  final Manager manager=(Manager)pjp.getArgs()[0];  setNewPassword(manager);  return pjp.proceed();}  }
class C{  public static org.oscm.internal.vo.VOImageResource convertToUp(org.oscm.vo.VOImageResource oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOImageResource newVO=new org.oscm.internal.vo.VOImageResource();  newVO.setBuffer(oldVO.getBuffer());  newVO.setContentType(oldVO.getContentType());  newVO.setImageType(EnumConverter.convert(oldVO.getImageType(),org.oscm.internal.types.enumtypes.ImageType.class));  return newVO;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked","cast"}) public static Filter<Object,RAbstractVector> abstractVectorValue(){  Filter f=numericValue().or(stringValue()).or(complexValue()).or(rawValue()).or(instanceOf(RAbstractListVector.class));  return (Filter<Object,RAbstractVector>)f;}  }
class C{  public float distanceTo(AnimatableValue other){  AnimatableAngleValue o=(AnimatableAngleValue)other;  return Math.abs(rad(value,unit) - rad(o.value,o.unit));}  }
class C{  public GoogleRelayedCandidateSocket(GoogleRelayedCandidate relayedCandidate,GoogleTurnCandidateHarvest turnCandidateHarvest,String username) throws SocketException {  super();  this.relayedCandidate=relayedCandidate;  socketDelegate=new GoogleRelayedCandidateDelegate(turnCandidateHarvest,username);  logger.finest("Create new GoogleRelayedCandidateSocket");}  }
class C{  @Override public int size(){  return totalNumberOfRecords;}  }
class C{  public void commit() throws IOException {  if (!mIsUnderEdit) {    throw new IOException("CacheEntry has been closed.");  }  if (hasErrors) {    mDiskCache.delete(mKey);  } else {    File dirty=getTempFile();    if (dirty.exists()) {      File clean=getCacheFile();      dirty.renameTo(clean);      mOldSize=mSize;      mSize=clean.length();      mDiskCache.commitEdit(this);    } else {      abortEdit();    }  }  mIsUnderEdit=false;}  }
class C{  private static void generateEvents() throws Exception {  String regionName=Region.SEPARATOR + REGION_NAME;  Region region=cache.getRegion(regionName);  for (int i=0; i < TOTAL_PUTS; i++) {    region.put("key" + i,"val-" + i);  }  Thread.sleep(DISPATCHER_SLOWSTART_TIME + 1000);  for (int i=0; i < 25; i++) {    region.put(LAST_KEY,"LAST_VALUE");  }}  }
class C{  public static boolean isValidLatitude(double latitude){  return latitude <= MAX_LATITUDE && MIN_LATITUDE <= latitude;}  }
class C{  public static void shuffle(Object[] a,int lo,int hi){  if (lo < 0 || lo > hi || hi >= a.length) {    throw new IndexOutOfBoundsException("Illegal subarray range");  }  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    Object temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public KafkaServer(Supplier<String> zookeeperConnection){  this(zookeeperConnection,DEFAULT_BROKER_ID);}  }
class C{  E emitLastUpdated(DateTime timestamp){  stringBuilder.append(">>> Last update of WHOIS database: ").append(UtcDateTimeAdapter.getFormattedString(timestamp)).append(" <<<\r\n\r\n");  return thisCastToDerived();}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  private void drawX(Canvas canvas,Paint paint,float x,float y){  canvas.drawLine(x - size,y - size,x + size,y + size,paint);  canvas.drawLine(x + size,y - size,x - size,y + size,paint);}  }
class C{  public void toLine(int geomIndex){  if (elt[geomIndex].isArea())   elt[geomIndex]=new TopologyLocation(elt[geomIndex].location[0]);}  }
class C{  private Hop processBuiltinFunctionExpression(BuiltinFunctionExpression source,DataIdentifier target,HashMap<String,Hop> hops) throws ParseException, HopsException {  Hop expr=processExpression(source.getFirstExpr(),null,hops);  Hop expr2=null;  if (source.getSecondExpr() != null) {    expr2=processExpression(source.getSecondExpr(),null,hops);  }  Hop expr3=null;  if (source.getThirdExpr() != null) {    expr3=processExpression(source.getThirdExpr(),null,hops);  }  Hop currBuiltinOp=null;  if (target == null) {    target=createTarget(source);  }switch (source.getOpCode()) {case COLSUM:    currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.SUM,Direction.Col,expr);  break;case COLMAX:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MAX,Direction.Col,expr);break;case COLMIN:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MIN,Direction.Col,expr);break;case COLMEAN:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MEAN,Direction.Col,expr);break;case COLSD:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.VAR,Direction.Col,expr);currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.SQRT,currBuiltinOp);break;case COLVAR:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.VAR,Direction.Col,expr);break;case ROWSUM:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.SUM,Direction.Row,expr);break;case ROWMAX:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MAX,Direction.Row,expr);break;case ROWINDEXMAX:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MAXINDEX,Direction.Row,expr);break;case ROWINDEXMIN:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MININDEX,Direction.Row,expr);break;case ROWMIN:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MIN,Direction.Row,expr);break;case ROWMEAN:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MEAN,Direction.Row,expr);break;case ROWSD:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.VAR,Direction.Row,expr);currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.SQRT,currBuiltinOp);break;case ROWVAR:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.VAR,Direction.Row,expr);break;case NROW:long nRows=expr.getDim1();if (nRows == -1) {currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.NROW,expr);} else {currBuiltinOp=new LiteralOp(nRows);}break;case NCOL:long nCols=expr.getDim2();if (nCols == -1) {currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.NCOL,expr);} else {currBuiltinOp=new LiteralOp(nCols);}break;case LENGTH:long nRows2=expr.getDim1();long nCols2=expr.getDim2();if ((nCols2 == -1) || (nRows2 == -1)) {currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.LENGTH,expr);} else {long lval=(nCols2 * nRows2);currBuiltinOp=new LiteralOp(lval);}break;case SUM:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.SUM,Direction.RowCol,expr);break;case MEAN:if (expr2 == null) {currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MEAN,Direction.RowCol,expr);} else {Hop orderHop=new LiteralOp(0);currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp3.CENTRALMOMENT,expr,expr2,orderHop);}break;case SD:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.VAR,Direction.RowCol,expr);currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.SQRT,currBuiltinOp);break;case VAR:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.VAR,Direction.RowCol,expr);break;case MIN:if (expr2 == null) {currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MIN,Direction.RowCol,expr);} else {currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp2.MIN,expr,expr2);}break;case MAX:if (expr2 == null) {currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.MAX,Direction.RowCol,expr);} else {currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp2.MAX,expr,expr2);}break;case PPRED:String sop=((StringIdentifier)source.getThirdExpr()).getValue();sop=sop.replace("\"","");OpOp2 operation;if (sop.equalsIgnoreCase(">=")) operation=OpOp2.GREATEREQUAL; else if (sop.equalsIgnoreCase(">")) operation=OpOp2.GREATER; else if (sop.equalsIgnoreCase("<=")) operation=OpOp2.LESSEQUAL; else if (sop.equalsIgnoreCase("<")) operation=OpOp2.LESS; else if (sop.equalsIgnoreCase("==")) operation=OpOp2.EQUAL; else if (sop.equalsIgnoreCase("!=")) operation=OpOp2.NOTEQUAL; else {LOG.error(source.printErrorLocation() + "Unknown argument (" + sop+ ") for PPRED.");throw new ParseException(source.printErrorLocation() + "Unknown argument (" + sop+ ") for PPRED.");}currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),operation,expr,expr2);break;case PROD:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.PROD,Direction.RowCol,expr);break;case TRACE:currBuiltinOp=new AggUnaryOp(target.getName(),target.getDataType(),target.getValueType(),AggOp.TRACE,Direction.RowCol,expr);break;case TRANS:currBuiltinOp=new ReorgOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ReOrgOp.TRANSPOSE,expr);break;case REV:currBuiltinOp=new ReorgOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ReOrgOp.REV,expr);break;case CBIND:currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.CBIND,expr,expr2);break;case RBIND:currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.RBIND,expr,expr2);break;case DIAG:currBuiltinOp=new ReorgOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ReOrgOp.DIAG,expr);break;case TABLE:int numTableArgs=source._args.length;switch (numTableArgs) {case 2:case 4:Hop weightHop=new LiteralOp(1.0);weightHop.setDim1(0);weightHop.setDim2(0);weightHop.setNnz(-1);weightHop.setRowsInBlock(0);weightHop.setColsInBlock(0);if (numTableArgs == 2) currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp3.CTABLE,expr,expr2,weightHop); else {Hop outDim1=processExpression(source._args[2],null,hops);Hop outDim2=processExpression(source._args[3],null,hops);currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp3.CTABLE,expr,expr2,weightHop,outDim1,outDim2);}break;case 3:case 5:if (numTableArgs == 3) currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp3.CTABLE,expr,expr2,expr3); else {Hop outDim1=processExpression(source._args[3],null,hops);Hop outDim2=processExpression(source._args[4],null,hops);currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp3.CTABLE,expr,expr2,expr3,outDim1,outDim2);}break;default :throw new ParseException("Invalid number of arguments " + numTableArgs + " to table() function.");}break;case CAST_AS_SCALAR:currBuiltinOp=new UnaryOp(target.getName(),DataType.SCALAR,target.getValueType(),Hop.OpOp1.CAST_AS_SCALAR,expr);break;case CAST_AS_MATRIX:currBuiltinOp=new UnaryOp(target.getName(),DataType.MATRIX,target.getValueType(),Hop.OpOp1.CAST_AS_MATRIX,expr);break;case CAST_AS_FRAME:currBuiltinOp=new UnaryOp(target.getName(),DataType.FRAME,target.getValueType(),Hop.OpOp1.CAST_AS_FRAME,expr);break;case CAST_AS_DOUBLE:currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),ValueType.DOUBLE,Hop.OpOp1.CAST_AS_DOUBLE,expr);break;case CAST_AS_INT:currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),ValueType.INT,Hop.OpOp1.CAST_AS_INT,expr);break;case CAST_AS_BOOLEAN:currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),ValueType.BOOLEAN,Hop.OpOp1.CAST_AS_BOOLEAN,expr);break;case ABS:case SIN:case COS:case TAN:case ASIN:case ACOS:case ATAN:case SIGN:case SQRT:case EXP:case ROUND:case CEIL:case FLOOR:case CUMSUM:case CUMPROD:case CUMMIN:case CUMMAX:Hop.OpOp1 mathOp1;switch (source.getOpCode()) {case ABS:mathOp1=Hop.OpOp1.ABS;break;case SIN:mathOp1=Hop.OpOp1.SIN;break;case COS:mathOp1=Hop.OpOp1.COS;break;case TAN:mathOp1=Hop.OpOp1.TAN;break;case ASIN:mathOp1=Hop.OpOp1.ASIN;break;case ACOS:mathOp1=Hop.OpOp1.ACOS;break;case ATAN:mathOp1=Hop.OpOp1.ATAN;break;case SIGN:mathOp1=Hop.OpOp1.SIGN;break;case SQRT:mathOp1=Hop.OpOp1.SQRT;break;case EXP:mathOp1=Hop.OpOp1.EXP;break;case ROUND:mathOp1=Hop.OpOp1.ROUND;break;case CEIL:mathOp1=Hop.OpOp1.CEIL;break;case FLOOR:mathOp1=Hop.OpOp1.FLOOR;break;case CUMSUM:mathOp1=Hop.OpOp1.CUMSUM;break;case CUMPROD:mathOp1=Hop.OpOp1.CUMPROD;break;case CUMMIN:mathOp1=Hop.OpOp1.CUMMIN;break;case CUMMAX:mathOp1=Hop.OpOp1.CUMMAX;break;default :LOG.error(source.printErrorLocation() + "processBuiltinFunctionExpression():: Could not find Operation type for builtin function: " + source.getOpCode());throw new ParseException(source.printErrorLocation() + "processBuiltinFunctionExpression():: Could not find Operation type for builtin function: " + source.getOpCode());}currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),mathOp1,expr);break;case LOG:if (expr2 == null) {Hop.OpOp1 mathOp2;switch (source.getOpCode()) {case LOG:mathOp2=Hop.OpOp1.LOG;break;default :LOG.error(source.printErrorLocation() + "processBuiltinFunctionExpression():: Could not find Operation type for builtin function: " + source.getOpCode());throw new ParseException(source.printErrorLocation() + "processBuiltinFunctionExpression():: Could not find Operation type for builtin function: " + source.getOpCode());}currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),mathOp2,expr);} else {Hop.OpOp2 mathOp3;switch (source.getOpCode()) {case LOG:mathOp3=Hop.OpOp2.LOG;break;default :LOG.error(source.printErrorLocation() + "processBuiltinFunctionExpression():: Could not find Operation type for builtin function: " + source.getOpCode());throw new ParseException(source.printErrorLocation() + "processBuiltinFunctionExpression():: Could not find Operation type for builtin function: " + source.getOpCode());}currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),mathOp3,expr,expr2);}break;case MOMENT:if (expr3 == null) {currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.CENTRALMOMENT,expr,expr2);} else {currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp3.CENTRALMOMENT,expr,expr2,expr3);}break;case COV:if (expr3 == null) {currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.COVARIANCE,expr,expr2);} else {currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp3.COVARIANCE,expr,expr2,expr3);}break;case QUANTILE:if (expr3 == null) {currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.QUANTILE,expr,expr2);} else {currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp3.QUANTILE,expr,expr2,expr3);}break;case INTERQUANTILE:if (expr3 == null) {currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.INTERQUANTILE,expr,expr2);} else {currBuiltinOp=new TernaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp3.INTERQUANTILE,expr,expr2,expr3);}break;case IQM:if (expr2 == null) {currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.IQM,expr);} else {currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.IQM,expr,expr2);}break;case MEDIAN:if (expr2 == null) {currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.MEDIAN,expr);} else {currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.MEDIAN,expr,expr2);}break;case SEQ:HashMap<String,Hop> randParams=new HashMap<String,Hop>();randParams.put(Statement.SEQ_FROM,expr);randParams.put(Statement.SEQ_TO,expr2);randParams.put(Statement.SEQ_INCR,(expr3 != null) ? expr3 : new LiteralOp(1));currBuiltinOp=new DataGenOp(DataGenMethod.SEQ,target,randParams);break;case SAMPLE:{Expression[] in=source.getAllExpr();HashMap<String,Hop> tmpparams=new HashMap<String,Hop>();tmpparams.put(DataExpression.RAND_MAX,expr);tmpparams.put(DataExpression.RAND_ROWS,expr2);tmpparams.put(DataExpression.RAND_COLS,new LiteralOp(1));if (in.length == 4) {tmpparams.put(DataExpression.RAND_PDF,expr3);Hop seed=processExpression(in[3],null,hops);tmpparams.put(DataExpression.RAND_SEED,seed);} else if (in.length == 3) {if (expr3.getValueType() == ValueType.BOOLEAN) {tmpparams.put(DataExpression.RAND_PDF,expr3);tmpparams.put(DataExpression.RAND_SEED,new LiteralOp(DataGenOp.UNSPECIFIED_SEED));} else if (expr3.getValueType() == ValueType.INT) {tmpparams.put(DataExpression.RAND_PDF,new LiteralOp(false));tmpparams.put(DataExpression.RAND_SEED,expr3);} else throw new HopsException("Invalid input type " + expr3.getValueType() + " in sample().");} else if (in.length == 2) {tmpparams.put(DataExpression.RAND_PDF,new LiteralOp(false));tmpparams.put(DataExpression.RAND_SEED,new LiteralOp(DataGenOp.UNSPECIFIED_SEED));}currBuiltinOp=new DataGenOp(DataGenMethod.SAMPLE,target,tmpparams);break;}case SOLVE:currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp2.SOLVE,expr,expr2);break;case INVERSE:currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.INVERSE,expr);break;case CHOLESKY:currBuiltinOp=new UnaryOp(target.getName(),target.getDataType(),target.getValueType(),Hop.OpOp1.CHOLESKY,expr);break;case OUTER:if (!(expr3 instanceof LiteralOp)) throw new HopsException("Operator for outer builtin function must be a constant: " + expr3);OpOp2 op=Hop.getOpOp2ForOuterVectorOperation(((LiteralOp)expr3).getStringValue());if (op == null) throw new HopsException("Unsupported outer vector binary operation: " + ((LiteralOp)expr3).getStringValue());currBuiltinOp=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),op,expr,expr2);((BinaryOp)currBuiltinOp).setOuterVectorOperation(true);currBuiltinOp.refreshSizeInformation();break;case CONV2D:{Hop image=expr;ArrayList<Hop> inHops1=getALHopsForConvOp(image,source,1,hops);currBuiltinOp=new ConvolutionOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ConvOp.DIRECT_CONV2D,inHops1);setBlockSizeAndRefreshSizeInfo(image,currBuiltinOp);break;}case AVG_POOL:case MAX_POOL:{Hop image=expr;ArrayList<Hop> inHops1=getALHopsForPoolingForwardIM2COL(image,source,1,hops);if (source.getOpCode() == BuiltinFunctionOp.MAX_POOL) currBuiltinOp=new ConvolutionOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ConvOp.MAX_POOLING,inHops1); else throw new HopsException("Average pooling is not implemented");setBlockSizeAndRefreshSizeInfo(image,currBuiltinOp);break;}case MAX_POOL_BACKWARD:{Hop image=expr;ArrayList<Hop> inHops1=getALHopsForConvOpPoolingCOL2IM(image,source,1,hops);currBuiltinOp=new ConvolutionOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ConvOp.MAX_POOLING_BACKWARD,inHops1);setBlockSizeAndRefreshSizeInfo(image,currBuiltinOp);break;}case CONV2D_BACKWARD_FILTER:{Hop image=expr;ArrayList<Hop> inHops1=getALHopsForConvOp(image,source,1,hops);currBuiltinOp=new ConvolutionOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ConvOp.DIRECT_CONV2D_BACKWARD_FILTER,inHops1);setBlockSizeAndRefreshSizeInfo(image,currBuiltinOp);break;}case CONV2D_BACKWARD_DATA:{Hop image=expr;ArrayList<Hop> inHops1=getALHopsForConvOp(image,source,1,hops);currBuiltinOp=new ConvolutionOp(target.getName(),target.getDataType(),target.getValueType(),Hop.ConvOp.DIRECT_CONV2D_BACKWARD_DATA,inHops1);setBlockSizeAndRefreshSizeInfo(image,currBuiltinOp);break;}default :throw new ParseException("Unsupported builtin function type: " + source.getOpCode());}setIdentifierParams(currBuiltinOp,source.getOutput());currBuiltinOp.setAllPositions(source.getBeginLine(),source.getBeginColumn(),source.getEndLine(),source.getEndColumn());return currBuiltinOp;}  }
class C{  private void renameTrace(int index,String newName){  ArgumentChecking.withinBounds(index,0,gcTraceSet.size() - 1,"index");  ArgumentChecking.notNull(newName,"newName");  String traceName=gcTraceSet.findGCTrace(index).getName();  gcTraceSet.rename(traceName,newName);}  }
class C{  public void send(DatagramPacket p) throws IOException {synchronized (packetsToSend) {    if (closed) {      throw new IOException(GoogleRelayedCandidateDatagramSocket.class.getSimpleName() + " has been closed.");    } else {      packetsToSend.add(MultiplexingXXXSocketSupport.clone(p));      if (sendThread == null)       createSendThread(); else       packetsToSend.notifyAll();    }  }}  }
class C{  public static BigInteger toBigIntegerValue(Object decoded){  return new BigInteger((byte[])decoded);}  }
class C{  @Override public final String toString(){  StringBuilder builder=new StringBuilder();  builder.append("[ ");  for (  LongWritable v : this.vertices) {    builder.append(v.toString());    builder.append(" ");  }  builder.append(" | " + score + ", "+ innerScore+ ", "+ boundaryScore+ " ]");  return builder.toString();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override public void processSubToken(String subtok){  if (smap.isEmpty()) {    smap.put(subtok,vals);  } else {    vals.add(subtok);  }}  }
class C{  public void focusLost(FocusEvent evt){}  }
class C{  private Document fetchResult(URL cgiUrl){  try {    DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();    DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();    URLConnection URLconnection=cgiUrl.openConnection();    HttpURLConnection httpConnection=(HttpURLConnection)URLconnection;    int responseCode=httpConnection.getResponseCode();    if (responseCode == HttpURLConnection.HTTP_OK) {      InputStream inStream=httpConnection.getInputStream();      try {        Document doc=docBuilder.parse(inStream);        return doc;      } catch (      org.xml.sax.SAXException e) {        log.log(Level.SEVERE,"Fetch Result: " + e.getMessage());        e.printStackTrace();      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,"Fetch Result: " + e.getMessage());    e.printStackTrace();  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:37.887 -0400",hash_original_method="7E19F379205F7BA279747CDDB3E37EFA",hash_generated_method="7E19F379205F7BA279747CDDB3E37EFA") void handleCipher(ParsedDirective pd) throws SaslException {  String token;  TokenParser parser;  if (0 != m_cipherOptions)   throw new SaslException("Too many cipher directives.");  parser=new TokenParser(pd.getValue());  token=parser.parseToken();  for (token=parser.parseToken(); token != null; token=parser.parseToken()) {    if ("3des".equals(token))     m_cipherOptions|=CIPHER_3DES; else     if ("des".equals(token))     m_cipherOptions|=CIPHER_DES; else     if ("rc4-40".equals(token))     m_cipherOptions|=CIPHER_RC4_40; else     if ("rc4".equals(token))     m_cipherOptions|=CIPHER_RC4; else     if ("rc4-56".equals(token))     m_cipherOptions|=CIPHER_RC4_56; else     m_cipherOptions|=CIPHER_UNRECOGNIZED;  }  if (m_cipherOptions == 0)   m_cipherOptions=CIPHER_UNRECOGNIZED;}  }
class C{  public Task<ComputeImageRestRep> create(ComputeImageCreate input){  return postTask(input,baseUrl);}  }
class C{  public static XContentBuilder smileBuilder(OutputStream os) throws IOException {  return new XContentBuilder(SmileXContent.smileXContent,os);}  }
class C{  public void addRow() throws ParseException {  if (!arrayMode)   throw new ParseException("You can add a row only in array mode !");  ((ArrayOfAtoms)formula).addRow();}  }
class C{  public static void error(String s){  allPassed=false;  System.out.println("ERROR: " + s);}  }
class C{  public final int hashCode(){  return (int)m_char;}  }
class C{  public boolean isLogicalFunction(){  return true;}  }
class C{  public ImageLoadOption cacheEnable(boolean isCacheEnable){  this.isCacheEnable=isCacheEnable;  return this;}  }
class C{  public CInstructionGenerator(final IViewContainer container){  m_container=container;}  }
class C{  public static void main(String[] args) throws Exception {  new ResultFileSeedMerger().start(args);}  }
class C{  public void deleteSelectedEntry(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    String alias=kseFrame.getSelectedEntryAlias();    String message=MessageFormat.format(res.getString("DeleteKeyPairAction.ConfirmDelete.message"),alias);    int selected=JOptionPane.showConfirmDialog(frame,message,res.getString("DeleteKeyPairAction.DeleteEntry.Title"),JOptionPane.YES_NO_OPTION);    if (selected != JOptionPane.YES_OPTION) {      return;    }    keyStore.deleteEntry(alias);    newState.removeEntryPassword(alias);    currentState.append(newState);    kseFrame.updateControls(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public boolean accept(File dir,String name){  return name.endsWith(extension);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.SSPECIES__NAME:    setName((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  void usage(PrintStream out){  out.println("Usage:");  out.println("  java CheckAttributedTree options... files...");  out.println("");  out.println("where options include:");  out.println("-q        Quiet: don't report on inapplicable files");  out.println("-gui      Display returns in a GUI viewer");  out.println("-v        Verbose: report on files as they are being read");  out.println("-t tag    Limit checks to tree nodes with this tag");  out.println("          Can be repeated if desired");  out.println("-ef file  Exclude file or directory");  out.println("-et tag   Exclude tree nodes with given tag name");  out.println("");  out.println("files may be directories or files");  out.println("directories will be scanned recursively");  out.println("non java files, or java files which cannot be parsed, will be ignored");  out.println("");}  }
class C{  @Override public TPS apply(final IIndex ndx){  final long writeTime=TimestampChooser.chooseTimestamp(ndx,this.writeTime);  if (precondition != null) {    final TPS tps=atomicRead(ndx,schema,primaryKey,fromTime,toTime,writeTime,filter);    if (!precondition.accept(tps)) {      if (log.isInfoEnabled()) {        log.info("precondition failed: " + tps);      }      tps.setPreconditionOk(false);      return tps;    }  }  atomicWrite(ndx,schema,primaryKey,propertySet,writeTime);  try {    return atomicRead(ndx,schema,primaryKey,fromTime,toTime,writeTime,filter);  } catch (  Throwable t) {    if (!InnerCause.isInnerCause(t,InterruptedException.class)) {      log.error(t,t);    }    throw new RuntimeException(t);  }}  }
class C{  public void handleMaintenance(Operation maintOp){  performPendingRequestMaintenance();  checkAndScheduleSynchronization(this.cachedGroupState.membershipUpdateTimeMicros);  maintOp.complete();}  }
class C{  private void initializeLiveAttributes(){  href=createLiveAnimatedString(XLINK_NAMESPACE_URI,XLINK_HREF_ATTRIBUTE);}  }
class C{  protected void changeTheme(){  currentTheme=getNextTheme(currentTheme);  if (currentTheme != null) {    currentTheme.setLooping(false);    currentTheme.setOnCompletionListener(listener);    currentTheme.setVolume(musicVolume.getPercent());    currentTheme.play();  }}  }
class C{  protected GraphicsNodeInputEvent(GraphicsNode source,InputEvent evt,int lockState){  super(source,evt.getID());  this.when=evt.getWhen();  this.modifiers=evt.getModifiers();  this.lockState=lockState;}  }
class C{  public samp addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public MeasureItemHeightListener(final int heightDifference){  this(heightDifference,MeasureItemHeightListenerType.RELATIVE);}  }
class C{  public QKDialog addMenuItem(String title,long id){  mMenuItems.add(title);  mMenuItemIds.add(id);  return this;}  }
class C{  public GenericElement(String name,AbstractDocument owner) throws DOMException {  super(name,owner);  nodeName=name;}  }
class C{  public int compareTo(Object3D another){  if (mForcedDepth)   return -1;  if (mPosition.z < another.getZ())   return 1; else   if (mPosition.z > another.getZ())   return -1; else   return 0;}  }
class C{  public void clear(int maximumCapacity){  if (capacity <= maximumCapacity) {    clear();    return;  }  zeroValue=null;  hasZeroValue=false;  size=0;  resize(maximumCapacity);}  }
class C{  @Override protected void sendData(OutputStream out) throws IOException {  LOG.trace("enter sendData(OutputStream)");  out.write(getContent());}  }
class C{  public void testClientCloseWithTry() throws Exception {  String curVal=null;  for (int i=0; i < 3; i++) {    try (IgniteCache<String,String> cache2=grid(2).getOrCreateCache(getClientConfig())){      IgniteCache<String,String> cache0=grid(0).cache(CACHE_NAME_CLIENT);      IgniteCache<String,String> cache1=grid(1).cache(CACHE_NAME_CLIENT);      if (i == 0) {        assert cache0.get(KEY_VAL) == null;        assert cache1.get(KEY_VAL) == null;        assert cache2.get(KEY_VAL) == null;      } else {        assert cache0.get(KEY_VAL).equals(curVal);        assert cache1.get(KEY_VAL).equals(curVal);        assert cache2.get(KEY_VAL).equals(curVal);      }      curVal=KEY_VAL + curVal;      cache2.put(KEY_VAL,curVal);      assert cache0.get(KEY_VAL).equals(curVal);      assert cache1.get(KEY_VAL).equals(curVal);      assert cache2.get(KEY_VAL).equals(curVal);    }     awaitPartitionMapExchange();  }}  }
class C{  public CActionColorNodes(final CGraphPanel graphPanel){  super("Set Node Color");  m_graphPanel=Preconditions.checkNotNull(graphPanel,"IE02815: graphPanel argument can not be null");  putValue(Action.SMALL_ICON,new ImageIcon(CMain.class.getResource("data/nodecolor_up.jpg")));  putValue(Action.SHORT_DESCRIPTION,"Change the colors of the selected nodes");}  }
class C{  static String stripLeadingZeros(String s){  return s.replaceFirst("^0+","");}  }
class C{  public void sendStatus(Status status){  final boolean andReturn=!status.getCode().equals(StatusCodes.NS_DATA_START);  final Notify event;  if (andReturn) {    final PendingCall call=new PendingCall(null,"onStatus",new Object[]{status});    event=new Invoke();    if (status.getCode().equals(StatusCodes.NS_PLAY_START)) {    }    event.setInvokeId(1);    event.setCall(call);  } else {    final Call call=new Call(null,"onStatus",new Object[]{status});    event=new Notify();    event.setInvokeId(1);    event.setCall(call);  }  write(event,connection.getStreamIdForChannel(id));}  }
class C{  protected JTextPane newCodePane(){  JTextPane result;  SyntaxDocument doc;  Properties props;  try {    props=Utils.readProperties(PROPERTIES_FILE);  } catch (  Exception e) {    e.printStackTrace();    props=new Properties();  }  result=new JTextPane();  if (props.getProperty("Syntax","false").equals("true")) {    doc=new SyntaxDocument(props);    result.setDocument(doc);    result.setBackground(doc.getBackgroundColor());  } else {    result.setForeground(VisualizeUtils.processColour(props.getProperty("ForegroundColor","black"),Color.BLACK));    result.setBackground(VisualizeUtils.processColour(props.getProperty("BackgroundColor","white"),Color.WHITE));    result.setFont(new Font(props.getProperty("FontName","monospaced"),Font.PLAIN,Integer.parseInt(props.getProperty("FontSize","12"))));  }  return result;}  }
class C{  @Override public boolean isBusy(){  return false;}  }
class C{  public T caseReaction(Reaction object){  return null;}  }
class C{  public void send(Object message) throws RemotingException {  if (closed) {    throw new RemotingException(this.getLocalAddress(),null,"Failed to send message " + message + ", cause: The server "+ getLocalAddress()+ " is closed!");  }  server.send(message);}  }
class C{  @Override @CanIgnoreReturnValue public boolean add(E e){  checkNotNull(e);  if (maxSize == 0) {    return true;  }  if (size() == maxSize) {    delegate.remove();  }  delegate.add(e);  return true;}  }
class C{  public boolean isSend(){  return send;}  }
class C{  private void wildcard(XSWildcard wc,String extraAtts){  SchemaTreeNode newNode=new SchemaTreeNode(MessageFormat.format("Any ",new Object[]{extraAtts}),wc.getLocator());  currNode.add(newNode);}  }
class C{  private String deliverIt(int A_Asset_ID){  log.fine("A_Asset_ID=" + A_Asset_ID);  long start=System.currentTimeMillis();  MAsset asset=new MAsset(getCtx(),A_Asset_ID,get_TrxName());  if (asset.getAD_User_ID() == 0)   return "** No Asset User";  MUser user=new MUser(getCtx(),asset.getAD_User_ID(),get_TrxName());  if (user.getEMail() == null || user.getEMail().length() == 0)   return "** No Asset User Email";  if (asset.getProductR_MailText_ID() == 0)   return "** Product Mail Text";  if (m_MailText == null || m_MailText.getR_MailText_ID() != asset.getProductR_MailText_ID())   m_MailText=new MMailText(getCtx(),asset.getProductR_MailText_ID(),get_TrxName());  if (m_MailText.getMailHeader() == null || m_MailText.getMailHeader().length() == 0)   return "** No Subject";  EMail email=m_client.createEMail(user.getEMail(),null,null);  if (!email.isValid()) {    asset.setHelp(asset.getHelp() + " - Invalid EMail");    asset.setIsActive(false);    return "** Invalid EMail: " + user.getEMail();  }  if (m_client.isSmtpAuthorization())   email.createAuthenticator(m_client.getRequestUser(),m_client.getRequestUserPW());  m_MailText.setUser(user);  m_MailText.setPO(asset);  String message=m_MailText.getMailText(true);  if (m_MailText.isHtml() || m_AttachAsset)   email.setMessageHTML(m_MailText.getMailHeader(),message); else {    email.setSubject(m_MailText.getMailHeader());    email.setMessageText(message);  }  if (m_AttachAsset) {    MProductDownload[] pdls=asset.getProductDownloads();    if (pdls != null) {      for (int i=0; i < pdls.length; i++) {        URI url=pdls[i].getDownloadURL(m_client.getDocumentDir());        if (url != null)         email.addAttachment(url);      }    } else     log.warning("No DowloadURL for A_Asset_ID=" + A_Asset_ID);  }  String msg=email.send();  new MUserMail(m_MailText,asset.getAD_User_ID(),email).saveEx();  if (!EMail.SENT_OK.equals(msg))   return "** Not delivered: " + user.getEMail() + " - "+ msg;  MAssetDelivery ad=confirmDelivery(asset,email,user.getAD_User_ID());  ad.saveEx();  asset.saveEx();  log.fine((System.currentTimeMillis() - start) + " ms");  return user.getEMail() + " - " + asset.getProductVersionNo();}  }
class C{  public long size64(){  return n;}  }
class C{  protected void convertInstance(Instance instance) throws Exception {  Instance original, processed;  original=instance;  double[] instanceVals=new double[instance.numAttributes() + 1];  for (int j=0; j < instance.numAttributes(); j++) {    instanceVals[j]=original.value(j);  }  Instance filteredI=null;  if (m_removeAttributes != null) {    m_removeAttributes.input(instance);    filteredI=m_removeAttributes.output();  } else {    filteredI=instance;  }  try {    instanceVals[instance.numAttributes()]=m_ActualClusterer.clusterInstance(filteredI);  } catch (  Exception e) {    instanceVals[instance.numAttributes()]=Utils.missingValue();  }  if (original instanceof SparseInstance) {    processed=new SparseInstance(original.weight(),instanceVals);  } else {    processed=new DenseInstance(original.weight(),instanceVals);  }  processed.setDataset(instance.dataset());  copyValues(processed,false,instance.dataset(),getOutputFormat());  processed.setDataset(getOutputFormat());  push(processed);}  }
class C{  @Override protected void paintTabBackground(Graphics g,int tabPlacement,int tabIndex,int x,int y,int w,int h,boolean isSelected){  if (isSelected) {    if (tabPlacement == TOP) {      g.setColor(Color.white);      g.fillRoundRect(x,y,w,h + R + R,R,R);    }  } else {  }}  }
class C{  public void testZeroNeg(){  byte aBytes[]={0};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=0;  int bSign=-1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  protected void addToServerCommand(final List<String> commandLine,final Map<String,Object> options){  final ListWrapper<String> commandLineWrapper=new ListWrapper<String>(commandLine);  if (Boolean.TRUE.equals(options.get(REBALANCE))) {    commandLineWrapper.add("-rebalance");  }  commandLineWrapper.add((String)options.get(DISABLE_DEFAULT_SERVER));  commandLineWrapper.add((String)options.get(SERVER_PORT));  commandLineWrapper.add((String)options.get(SERVER_BIND_ADDRESS_NAME));  String criticalHeapThreshold=(String)options.get(CRITICAL_HEAP_PERCENTAGE);  if (criticalHeapThreshold != null) {    commandLineWrapper.add(criticalHeapThreshold);  }  String evictionHeapThreshold=(String)options.get(EVICTION_HEAP_PERCENTAGE);  if (evictionHeapThreshold != null) {    commandLineWrapper.add(evictionHeapThreshold);  }  String criticalOffHeapThreshold=(String)options.get(CRITICAL_OFF_HEAP_PERCENTAGE);  if (criticalOffHeapThreshold != null) {    commandLineWrapper.add(criticalOffHeapThreshold);  }  String evictionOffHeapThreshold=(String)options.get(EVICTION_OFF_HEAP_PERCENTAGE);  if (evictionOffHeapThreshold != null) {    commandLineWrapper.add(evictionOffHeapThreshold);  }  final Properties props=(Properties)options.get(PROPERTIES);  for (  final Object key : props.keySet()) {    commandLineWrapper.add(key + "=" + props.getProperty(key.toString()));  }  if (props.getProperty(LOG_FILE) == null && CacheServerLauncher.isLoggingToStdOut()) {    commandLineWrapper.add(LOG_FILE + "=" + defaultLogFileName);  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public boolean forEachKey(TFloatProcedure procedure){  return forEach(procedure);}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  public double jaccard(){  final double sum=pairconfuse[0] + pairconfuse[1] + pairconfuse[2];  return pairconfuse[0] / sum;}  }
class C{  public PlayerList(){  players=new ConcurrentHashMap<String,Player>();}  }
class C{  @Override public boolean isValidateRoot(){  return !(SwingUtilities.getUnwrappedParent(this) instanceof JViewport);}  }
class C{  public static int readInt(){  int x=0;  for (int i=0; i < 4; i++) {    char c=readChar();    x<<=8;    x|=c;  }  return x;}  }
class C{  private void checkValidAndEnableConfirmButton(){  setConfirmButtonEnabled(getNameTextField().getDocument().getLength() > 0);}  }
class C{  public boolean clear(){  try {    list.clear();    fireTableDataChanged();  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  public void updateState(){  if (MusicUtils.isPlaying()) {    setContentDescription(getResources().getString(R.string.accessibility_pause));    if (pauseDrawable == 0) {      setImageDrawable(mResources.getDrawable(PAUSE));    } else {      setImageResource(pauseDrawable);    }  } else {    setContentDescription(getResources().getString(R.string.accessibility_play));    if (playDrawable == 0) {      setImageDrawable(mResources.getDrawable(PLAY));    } else {      setImageResource(playDrawable);    }  }}  }
class C{  private void init(){  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);  mView=inflater.inflate(R.layout.image_frame_layout,this,true);  mImage=(ImageView)mView.findViewById(R.id.mImage);  this.setOnClickListener(this);}  }
class C{  public StandardURLTagFragmentGenerator(){  super();}  }
class C{  public boolean removeWatch(long varId,String memberName,int isolateId) throws NoResponseException, NotConnectedException {  memberName=getRawMemberName(varId,memberName,isolateId);  DMessage dm=DMessageCache.alloc(DMessage.getSizeofPtr() + DMessage.getStringLength(memberName) + 1);  dm.setType(DMessage.OutRemoveWatch2);  dm.putPtr(varId);  try {    dm.putString(memberName);  } catch (  UnsupportedEncodingException uee) {    dm.putByte((byte)'\0');  }  int timeout=getPreference(SessionManager.PREF_GETVAR_RESPONSE_TIMEOUT);  boolean result=simpleRequestResponseMessage(dm,DMessage.InWatch2,timeout);  return result;}  }
class C{  public boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(FILE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static Plan unmodifiablePlan(Plan plan){  return new UnmodifiablePlan(plan);}  }
class C{  public void update(String sData){  for (int nI=0; nI < sData.length(); nI++)   update((byte)(sData.charAt(nI) & 0x0ff));}  }
class C{  public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  if (ignore || (request.getCharacterEncoding() == null)) {    String encoding=selectEncoding(request);    if (encoding != null)     request.setCharacterEncoding(encoding);  }  chain.doFilter(request,response);}  }
class C{  public float filter(float sample){  load(sample);  float accumulator=0.0f;  for (int x=0; x < mBufferSize; x++) {    accumulator+=mCoefficients[x] * mBuffer[mIndexMap[mBufferPointer][x]];  }  return accumulator;}  }
class C{  public void testAbsPositive(){  byte aBytes[]={1,2,3,4,5,6,7};  int aSign=1;  byte rBytes[]={1,2,3,4,5,6,7};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.abs();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static boolean protectAgainstWrappingAttack(Node startNode,String value){  Node startParent=startNode.getParentNode();  Node processedNode=null;  Element foundElement=null;  String id=value.trim();  if (!id.isEmpty() && id.charAt(0) == '#') {    id=id.substring(1);  }  while (startNode != null) {    if (startNode.getNodeType() == Node.ELEMENT_NODE) {      Element se=(Element)startNode;      NamedNodeMap attributes=se.getAttributes();      if (attributes != null) {        for (int i=0; i < attributes.getLength(); i++) {          Attr attr=(Attr)attributes.item(i);          if (attr.isId() && id.equals(attr.getValue())) {            if (foundElement == null) {              foundElement=attr.getOwnerElement();            } else {              log.log(java.util.logging.Level.FINE,"Multiple elements with the same 'Id' attribute value!");              return false;            }          }        }      }    }    processedNode=startNode;    startNode=startNode.getFirstChild();    if (startNode == null) {      startNode=processedNode.getNextSibling();    }    while (startNode == null) {      processedNode=processedNode.getParentNode();      if (processedNode == startParent) {        return true;      }      startNode=processedNode.getNextSibling();    }  }  return true;}  }
class C{  public void updateClob(String columnLabel,Reader reader) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  private void subsample(HashMap<PhrasePair,PhrasePair> set,BiCorpus bc,int minLength,int maxLength,float targetFtoERatio){  for (  PhrasePair pp : bc) {    PhrasePair lowercase_pp=new PhrasePair(new BasicPhrase((byte)1,pp.getF().toString().toLowerCase()),new BasicPhrase((byte)1,pp.getE().toString().toLowerCase()),pp.getAlignment());{      int eLength=pp.getE().size();      if (eLength == 0 || eLength > MAX_SENTENCE_LENGTH)       continue;    }    int fLength=pp.getF().size();    if (fLength == 0 || fLength < minLength || fLength > maxLength || fLength > MAX_SENTENCE_LENGTH)     continue;    if (fLength > 10 && targetFtoERatio != 0.0f) {      float ratio=pp.ratioFtoE();      if (fLength >= MIN_RATIO_LENGTH && (ratio > 1.3f * targetFtoERatio || ratio * 1.3f < targetFtoERatio))       continue;    }    if (set.containsKey(lowercase_pp))     continue;    List<Phrase> ngrams=pp.getF().getSubPhrases(this.maxN);    boolean useSentence=false;    for (    Phrase ng : ngrams) {      Integer count=this.ngramCounts.get(ng);      if (count == null)       continue;      if (count < targetCount) {        useSentence=true;        count++;        this.ngramCounts.put(ng,count);      }    }    if (useSentence)     set.put(lowercase_pp,pp);  }}  }
class C{  public ContextStatementCollector(ValueFactory vf,Resource... contexts){  this(new ArrayList<Statement>(),vf,contexts);}  }
class C{  public MacroException(){}  }
class C{  private boolean looksLikeAnnotation(){  nextToken();  if (fToken == Symbols.TokenIDENT) {    nextToken();    while (fToken == Symbols.TokenOTHER) {      nextToken();      if (fToken != Symbols.TokenIDENT)       return false;      nextToken();    }    return fToken == Symbols.TokenAT;  }  return false;}  }
class C{  public void unlock(K key){  ReentrantLock lock=getLock(key);  if (!lock.isHeldByCurrentThread()) {    throw new IllegalStateException("Cannot release lock not held by current thread: " + key);  }  lock.unlock();}  }
class C{  @Override public ListClustersResult listEmrClusters(AmazonElasticMapReduceClient emrClient,ListClustersRequest listClustersRequest){  return emrClient.listClusters(listClustersRequest);}  }
class C{  public static byte[] generateMaskingKey(){  Random randomGenerator=new Random();  int a=randomGenerator.nextInt(255);  int b=randomGenerator.nextInt(255);  int c=randomGenerator.nextInt(255);  int d=randomGenerator.nextInt(255);  return new byte[]{(byte)a,(byte)b,(byte)c,(byte)d};}  }
class C{  private File findAbsolutePath(File fileToFind){  File foundFile=fileToFind;  try {    String clusterHome=ClusterConfiguration.getClusterHome();    if (fileToFind.getPath() == fileToFind.getName()) {      File candidateFile=new File(clusterHome + File.separator + "conf"+ File.separator+ fileToFind.getName());      if (candidateFile.isFile()) {        foundFile=candidateFile;        logger.debug(MessageFormat.format("File was specified with name only, and found in default location: {0}",foundFile.getAbsoluteFile()));      } else       throw new ConfigurationException(MessageFormat.format("File does not exist: {0}",candidateFile.getAbsolutePath()));    }  } catch (  ConfigurationException e) {    logger.debug(MessageFormat.format("Cannot find absolute path for file: {0} \n{1}",fileToFind.getName(),e.getMessage()));    return fileToFind;  }  return foundFile;}  }
class C{  public static long convertToLocal(java.util.Date x,Calendar target){  if (target == null) {    throw DbException.getInvalidValueException("calendar",null);  }  target=(Calendar)target.clone();  Calendar local=Calendar.getInstance();synchronized (local) {    local.setTime(x);    convertTime(local,target);  }  return target.getTime().getTime();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  boolean hasAttributes;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  hasAttributes=docType.hasAttributes();  assertFalse("nodehasattributes02",hasAttributes);}  }
class C{  @Override public boolean add(E o){  if (null == o) {    throw new NullPointerException();  }  if (offer(o)) {    return true;  }  throw new IllegalStateException();}  }
class C{  public String toSummaryString(boolean printComplexityStatistics){  return m_delegate.toSummaryString(printComplexityStatistics);}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  public void saveToGeode(String regionPath,GeodeConnectionConf connConf){  rddf.saveToGeode(regionPath,connConf,emptyStrStrMap());}  }
class C{  public TemplateMutationListener(Element imp){  importElement=imp;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  private void fireNewWorkspaceOpened(){  for (  WorkspaceListener listener : listeners) {    listener.newWorkspaceOpened();  }}  }
class C{  public boolean isBarEffectEnabled(){  return null == barEffectEnabled ? _barEffectEnabled : barEffectEnabled.get();}  }
class C{  protected static String repeat(String str,int cnt,String start,String sep,String end){  SB sb=new SB(str.length() * cnt + sep.length() * (cnt - 1) + start.length() + end.length());  sb.a(start);  for (int i=0; i < cnt; i++) {    if (i > 0)     sb.a(sep);    sb.a(str);  }  return sb.a(end).toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (other.getClass() != this.getClass())   return false;  Picture that=(Picture)other;  if (this.width() != that.width())   return false;  if (this.height() != that.height())   return false;  for (int col=0; col < width(); col++)   for (int row=0; row < height(); row++)   if (!this.get(col,row).equals(that.get(col,row)))   return false;  return true;}  }
class C{  public void languageNetwork(Network network){  Vertex sentence=network.createVertex(Primitive.SENTENCE);  Vertex language=network.createVertex(Primitive.LANGUAGE);  Vertex verb=network.createVertex(Primitive.VERB);  Vertex adjective=network.createVertex(Primitive.ADJECTIVE);  Vertex noun=network.createVertex(Primitive.NOUN);  Vertex punctuation=network.createVertex(Primitive.PUNCTUATION);  Vertex name=network.createVertex(Primitive.NAME);  Vertex meaning=network.createVertex(Primitive.MEANING);  Vertex question=network.createVertex(Primitive.QUESTION);  Vertex word=network.createVertex(Primitive.WORD);  meaning.addRelationship(Primitive.INSTANTIATION,Primitive.CONCEPT);  word.addRelationship(Primitive.SPECIALIZATION,Primitive.CONCEPT);  sentence.addRelationship(Primitive.SPECIALIZATION,Primitive.CONCEPT);  language.addRelationship(Primitive.SPECIALIZATION,Primitive.CONCEPT);  verb.addRelationship(Primitive.SPECIALIZATION,word);  adjective.addRelationship(Primitive.SPECIALIZATION,word);  noun.addRelationship(Primitive.SPECIALIZATION,word);  punctuation.addRelationship(Primitive.SPECIALIZATION,word);  name.addRelationship(Primitive.SPECIALIZATION,noun);  meaning.addRelationship(Primitive.INSTANTIATION,Primitive.CONCEPT);  question.addRelationship(Primitive.INSTANTIATION,Primitive.CONCEPT);  word.addRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION);  sentence.addRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION);  language.addRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION);  verb.addRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION);  adjective.addRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION);  noun.addRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION);  punctuation.addRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION);  name.addRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION);  Vertex input=network.createVertex(Primitive.INPUT_VARIABLE);  input.setName("input");  input.addRelationship(Primitive.INSTANTIATION,Primitive.VARIABLE);  Vertex speaker=network.createInstance(Primitive.VARIABLE);  speaker.setPinned(true);  speaker.setName(Primitive.SPEAKER.getIdentity());  input.addRelationship(Primitive.SPEAKER,speaker);  Vertex target=network.createInstance(Primitive.VARIABLE);  target.setPinned(true);  target.setName(Primitive.TARGET.getIdentity());  input.addRelationship(Primitive.TARGET,target);  Vertex inputSentence=network.createInstance(Primitive.VARIABLE);  inputSentence.setPinned(true);  inputSentence.addRelationship(Primitive.INSTANTIATION,Primitive.SENTENCE);  inputSentence.setName(Primitive.SENTENCE.getIdentity());  input.addRelationship(Primitive.INPUT,inputSentence);  Vertex conversation=network.createInstance(Primitive.VARIABLE);  conversation.setPinned(true);  conversation.setName(Primitive.CONVERSATION.getIdentity());  input.addRelationship(Primitive.CONVERSATION,conversation);}  }
class C{  protected Conversation<?> createNewConversation(Json msg){  return null;}  }
class C{  public boolean isChangeSID(){  return changeSID;}  }
class C{  public DERExternal(ASN1ObjectIdentifier directReference,ASN1Integer indirectReference,ASN1Primitive dataValueDescriptor,DERTaggedObject externalData){  this(directReference,indirectReference,dataValueDescriptor,externalData.getTagNo(),externalData.toASN1Primitive());}  }
class C{  public String toString(){  return "ATR: " + atr.length + " bytes";}  }
class C{  private void _add(String fieldName,IonValueLite child){  int size=get_child_count();  add(size,child);  if (_field_map != null) {    add_field(fieldName,child._elementid());  }}  }
class C{  public RandomAccessFile generateRandomFile(final int length) throws IOException {  mFile=File.createTempFile(SpeedTestConst.UPLOAD_TEMP_FILE_NAME,SpeedTestConst.UPLOAD_TEMP_FILE_EXTENSION);  final RandomAccessFile randomFile=new RandomAccessFile(mFile.getAbsolutePath(),"rw");  randomFile.setLength(length);  final int iter=length / SpeedTestConst.UPLOAD_FILE_WRITE_CHUNK;  final int remain=length % SpeedTestConst.UPLOAD_FILE_WRITE_CHUNK;  for (int i=0; i < iter; i++) {    final byte[] random=new byte[SpeedTestConst.UPLOAD_FILE_WRITE_CHUNK];    mRandom.nextBytes(random);    randomFile.write(random);  }  if (remain > 0) {    final byte[] random=new byte[remain];    mRandom.nextBytes(random);    randomFile.write(random);  }  return randomFile;}  }
class C{  public static String join(Iterable l,String glue){  StringBuffer sb=new StringBuffer();  boolean first=true;  for (  Object o : l) {    if (!first) {      sb.append(glue);    }    sb.append(o.toString());    first=false;  }  return sb.toString();}  }
class C{  public void removeDistinct(Value[] values){  if (!distinct) {    DbException.throwInternalError();  }  if (distinctRows != null) {    ValueArray array=ValueArray.get(values);    distinctRows.remove(array);    rowCount=distinctRows.size();  } else {    rowCount=external.removeRow(values);  }}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String sub=getString(stack);  String scat=getString(stack);  Agent a=(Agent)stack.pop();  int newMask=a.getAgentMask();  if (scat != null && scat.length() > 0)   newMask=newMask | Agent.CATEGORY_MASK; else   newMask=newMask & (~Agent.CATEGORY_MASK);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Agent noob=Carny.getInstance().updateFavorite(a,newMask,a.getTitle(),scat,sub,a.getPersonObj(),a.getRole(),a.getRated(),a.getYear(),a.getPR(),a.getNetwork(),a.getChannelName(),a.getSlotType(),a.getTimeslots(),a.getKeyword());    return (noob == a) ? Boolean.TRUE : Boolean.FALSE;  } else   return Boolean.FALSE;}  }
class C{  public static boolean checkNetworkConnectedToAtLeastOneNetwork(URI networkUri,Collection<URI> networkUris,DbClient dbClient){  if (NullColumnValueGetter.isNullURI(networkUri) == false) {    NetworkLite networkLite=NetworkUtil.getNetworkLite(networkUri,dbClient);    if (networkLite != null) {      return networkLite.connectedToAtLeastOneNetwork(networkUris);    }  }  return false;}  }
class C{  protected Object[] initializeRoots(){  IMarker taintMarker=(IMarker)fInput;  Object[] roots=NO_CHILDREN;  Map<String,Set<CallLocationModel>> filteredSourcesMap=TaintMarker.getFilteredTaintSourcesMap(taintMarker);  roots=new Object[filteredSourcesMap.size()];  int i=0;  for (  Entry<String,Set<CallLocationModel>> entry : filteredSourcesMap.entrySet()) {    String taintKinds=entry.getKey();    TreeElement<String,CallLocationModel> root=new TreeElement<String,CallLocationModel>(taintKinds,taintKinds,CallLocationModel.class);    for (    CallLocationModel source : entry.getValue()) {      TreeElement<CallLocationModel,Object> child=new TreeElement<CallLocationModel,Object>(source.toString(),source,Object.class);      root.addChild(child);    }    roots[i]=root;    i++;  }  return roots;}  }
class C{  public NSObject lastObject(){  return array[array.length - 1];}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  ProjectConnectionManagerResult connect(final IProject project,final boolean disconnectOtherServers){  Check.notNull(project,"project");  final ProjectManagerDataProvider dataProvider=ProjectManagerDataProviderFactory.getDataProvider();  if (project.isOpen() == false) {    return new ProjectConnectionManagerResult(new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,0,MessageFormat.format(Messages.getString("ProjectConnectionManager.ProjectNotOpenFormat"),project.getName()),null));  }  if (project.getLocation() == null) {    final String message=MessageFormat.format(Messages.getString("ProjectConnectionManager.ProjectDoesNotHaveLocalFileSystemMappingFormat"),project.getName());    return new ProjectConnectionManagerResult(new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,0,message,null));  }  WorkspaceInfo cachedWorkspace;  TFSRepository repository;synchronized (cachedWorkspaceLock) {    cachedWorkspace=getCachedWorkspace(project);    if (cachedWorkspace == null) {      if (emptyCachedWorkspaceFailures) {        log.error(MessageFormat.format("Project {0} was not found in workspace cache",project.getName()));        return new ProjectConnectionManagerResult(new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,0,MessageFormat.format(projectDoesNotHaveWorkingFolderMappingFormat,project.getName()),null));      }      log.warn(MessageFormat.format("Project {0} was not found in workspace cache",project.getName()));      repository=connectRepository(project);      if (repository == null) {        emptyCachedWorkspaceFailures=true;        return new ProjectConnectionManagerResult(new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,0,MessageFormat.format(projectDoesNotHaveWorkingFolderMappingFormat,project.getName()),null));      }      return new ProjectConnectionManagerResult(repository);    }  }  ProjectManagerRepositoryJob repositoryJob;  final WorkspaceKey workspaceKey=new WorkspaceKey(cachedWorkspace);synchronized (connectionLock) {    if ((repository=TFSEclipseClientPlugin.getDefault().getRepositoryManager().getRepository(cachedWorkspace)) != null) {      log.debug(MessageFormat.format("Project {0} can be connected to repository {1}",project.getName(),repository));      return new ProjectConnectionManagerResult(repository);    }    if ((repositoryJob=workspaceJobMap.get(workspaceKey)) == null) {      final URI connectionURI=cachedWorkspace.getServerURI();      TFSServer server;      if ((server=serverManager.getServer(connectionURI)) != null) {        log.debug(MessageFormat.format("Project {0} will be connected to server {1}",project.getName(),server));        if (repositoryManager.getDefaultRepository() != null && disconnectOtherServers == false) {          return new ProjectConnectionManagerResult(new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,0,MessageFormat.format(projectWillNotBeConnectedExistingConnectionExistsFormat,project.getName()),null));        }        repositoryJob=new ProjectManagerRepositoryJob(this,dataProvider,cachedWorkspace,server.getConnection());        repositoryJob.addJobChangeListener(repositoryJobChangeListener);        repositoryJob.schedule();        workspaceJobMap.put(workspaceKey,repositoryJob);      } else {        ProjectManagerConnectionJob connectionJob;        if ((connectionJob=serverConnectionJobMap.get(connectionURI)) == null) {synchronized (cachedWorkspaceLock) {            if (cachedWorkspaceFailures.contains(cachedWorkspace)) {              return new ProjectConnectionManagerResult(new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,0,MessageFormat.format(projectWillNotBeConnectedPreviousConnectionCancelledFormat,project.getName()),null));            }          }          if (serverManager.getDefaultServer() != null) {            log.debug(MessageFormat.format("Another connection already exists while connecting project {0}",project.getName()));            if (disconnectOtherServers == false) {              return new ProjectConnectionManagerResult(new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,0,MessageFormat.format(projectWillNotBeConnectedExistingConnectionExistsFormat,project.getName()),null));            }            final boolean retry=dataProvider.getConnectionConflictHandler().resolveServerConflict();            if (retry == false || serverManager.getDefaultServer() != null) {              log.debug(MessageFormat.format("Cancelled connection for project {0}, another connection already exists",project.getName()));              return new ProjectConnectionManagerResult(new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,0,MessageFormat.format(projectWillNotBeConnectedExistingConnectionExistsFormat,project.getName()),null));            }          }          connectionJob=new ProjectManagerCachedWorkspaceConnectionJob(this,dataProvider,connectionURI,cachedWorkspace);          connectionJob.addJobChangeListener(connectionJobChangeListener);          connectionJob.setSystem(true);          connectionJob.schedule();          serverConnectionJobMap.put(connectionURI,connectionJob);        }        log.debug(MessageFormat.format("Project {0} will be connected through connection job {1}",project.getName(),connectionJob));        repositoryJob=new ProjectManagerRepositoryJob(this,dataProvider,cachedWorkspace,connectionJob);        repositoryJob.addJobChangeListener(repositoryJobChangeListener);        repositoryJob.schedule();        log.debug(MessageFormat.format("Project {0} will be connected through repository realization job {1}",project.getName(),repositoryJob));        workspaceJobMap.put(workspaceKey,repositoryJob);      }    }  }  IStatus result;  try {    log.debug("Waiting for repository job to finish");    new ExtensionPointAsyncObjectWaiter().joinJob(repositoryJob);    result=repositoryJob.getResult();  } catch (  final InterruptedException e) {    result=new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,0,MessageFormat.format(Messages.getString("ProjectConnectionManager.CouldNotConnectToConnectionFormat"),getConnectionName(cachedWorkspace)),e);  }  if (result == null) {    result=new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,0,Messages.getString("ProjectConnectionManager.CouldNotExecuteProjectConnectionJobFormat"),null);  }  if (!result.isOK()) {    return new ProjectConnectionManagerResult(null,result);  }  repository=repositoryJob.getRepository();  return new ProjectConnectionManagerResult(repositoryJob.getRepository(),result);}  }
class C{  private void shrink(){  long maxMem=this.maxMemSize;  if (maxMem > 0) {    long startMemSize=memSize.longValue();    if (startMemSize >= maxMem)     for (long i=maxMem; i < startMemSize && memSize.longValue() > maxMem; ) {      int size=shrink0();      if (size == -1)       break;      i+=size;    }  }  int max=this.max;  if (max > 0) {    int startSize=queue.sizex();    if (startSize >= max + (maxMem > 0 ? 1 : this.batchSize))     for (int i=max; i < startSize && queue.sizex() > max; i++)     if (shrink0() == -1)     break;  }}  }
class C{  public BigDecimalsBuilder ofBytes(int maxNumberOfBytes){  return new BigDecimalsBuilder(maxNumberOfBytes);}  }
class C{  public List<ExpectedPartitionValueEntity> createExpectedPartitionValueEntities(String partitionKeyGroupName,List<String> expectedPartitionValues){  PartitionKeyGroupEntity partitionKeyGroupEntity=partitionKeyGroupDao.getPartitionKeyGroupByName(partitionKeyGroupName);  if (partitionKeyGroupEntity == null) {    partitionKeyGroupEntity=partitionKeyGroupDaoTestHelper.createPartitionKeyGroupEntity(partitionKeyGroupName);  }  List<ExpectedPartitionValueEntity> expectedPartitionValueEntities=new ArrayList<>();  for (  String expectedPartitionValue : expectedPartitionValues) {    ExpectedPartitionValueEntity expectedPartitionValueEntity=new ExpectedPartitionValueEntity();    expectedPartitionValueEntity.setPartitionKeyGroup(partitionKeyGroupEntity);    expectedPartitionValueEntity.setPartitionValue(expectedPartitionValue);    expectedPartitionValueEntities.add(expectedPartitionValueDao.saveAndRefresh(expectedPartitionValueEntity));  }  return expectedPartitionValueEntities;}  }
class C{  private void resetAlarm(long interval){  mAlarmManager.cancel(mPendingPollIntent);  long now=SystemClock.elapsedRealtime();  long next=now + interval;  mAlarmManager.set(AlarmManager.ELAPSED_REALTIME,next,mPendingPollIntent);}  }
class C{  public Boolean isNameAliasSettable(){  return nameAliasSettable;}  }
class C{  public static String stringFor(int n){switch (n) {case cudaSharedMemBankSizeDefault:    return "cudaSharedMemBankSizeDefault";case cudaSharedMemBankSizeFourByte:  return "cudaSharedMemBankSizeFourByte";case cudaSharedMemBankSizeEightByte:return "cudaSharedMemBankSizeEightByte";}return "INVALID cudaSharedMemConfig: " + n;}  }
class C{  public static void main(String[] args){  System.out.println(Math.random());}  }
class C{  int readCorner1(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public RoundChart(CategorySeries dataset,DefaultRenderer renderer){  mDataset=dataset;  mRenderer=renderer;}  }
class C{  public static AlertStreamEvent createAlertEvent(StreamEvent event,PolicyHandlerContext context,Map<String,StreamDefinition> sds){  PolicyDefinition policyDef=context.getPolicyDefinition();  AlertStreamEvent alertStreamEvent=new AlertStreamEvent();  alertStreamEvent.setTimestamp(event.getTimestamp());  alertStreamEvent.setData(event.getData());  alertStreamEvent.setStreamId(policyDef.getOutputStreams().get(0));  alertStreamEvent.setPolicyId(policyDef.getName());  if (context.getPolicyEvaluator() != null) {    alertStreamEvent.setCreatedBy(context.getPolicyEvaluator().getName());  }  alertStreamEvent.setCreatedTime(System.currentTimeMillis());  String is=policyDef.getInputStreams().get(0);  StreamDefinition sd=sds.get(is);  alertStreamEvent.setSchema(sd);  return alertStreamEvent;}  }
class C{  public CompanyApplicationObject(){  super();}  }
class C{  public void remove(String uri){  indexUriMap.removeWithRight(uri);}  }
class C{  public SnackbarWrapper appendMessage(CharSequence message){  messageView.append(message);  return this;}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  public static void flattenBooleanQuery(BooleanQuery.Builder to,BooleanQuery from){  flattenBooleanQuery(to,from,1f);}  }
class C{  public boolean isVirtualApp(){  return virtualApp;}  }
class C{  public final synchronized int numVariations(){  return game.numVariations();}  }
class C{  public void sendButton(String map_name,String button_name,boolean repeat,boolean down,boolean queue,short amount,byte axis) throws IOException {  PacketBUTTON p=new PacketBUTTON(map_name,button_name,repeat,down,queue,amount,axis);  p.send(hostAddress,hostPort);}  }
class C{  private void handleEditorClosed(){  if (SensorsDataAPI.ENABLE_LOG) {    Log.d(LOGTAG,"VTrack server connection closed.");  }  mSnapshot=null;  mEditorEventBindings.clear();  applyVariantsAndEventBindings();}  }
class C{  final Type capture(){  Type superclass=getClass().getGenericSuperclass();  checkArgument(superclass instanceof ParameterizedType,"%s isn't parameterized",superclass);  return ((ParameterizedType)superclass).getActualTypeArguments()[0];}  }
class C{  private static void closeQuietly(Closeable closeable){  try {    if (closeable != null) {      closeable.close();    }  } catch (  IOException e) {    Slog.w(LOG_TAG,e);  }}  }
class C{  public static String quickAddChosenVariant(HttpServletRequest request,HttpServletResponse response){  String errMsg="";  Delegator delegator=(Delegator)request.getAttribute("delegator");  String productId=request.getParameter("productId");  String variantProductId=request.getParameter("variantProductId");  String featureTypeSizeStr=request.getParameter("featureTypeSize");  if (UtilValidate.isEmpty(productId)) {    errMsg=UtilProperties.getMessage(resource,"variantevents.productId_required_but_missing",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  if (UtilValidate.isEmpty(variantProductId)) {    errMsg=UtilProperties.getMessage(resource,"variantevents.variantProductId_required_but_missing_enter_an_id",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  int featureTypeSize=0;  try {    featureTypeSize=Integer.parseInt(featureTypeSizeStr);  } catch (  NumberFormatException e) {    Map<String,String> messageMap=UtilMisc.toMap("featureTypeSizeStr",featureTypeSizeStr);    errMsg=UtilProperties.getMessage(resource,"variantevents.featureTypeSize_not_number",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  try {    boolean beganTransacton=TransactionUtil.begin();    try {      GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();      if (product == null) {        Map<String,String> messageMap=UtilMisc.toMap("productId",productId);        errMsg=UtilProperties.getMessage(resource,"variantevents.product_not_found_with_ID",messageMap,UtilHttp.getLocale(request));        TransactionUtil.rollback(beganTransacton,errMsg,null);        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      GenericValue variantProduct=EntityQuery.use(delegator).from("Product").where("productId",variantProductId).queryOne();      if (variantProduct == null) {        variantProduct=GenericValue.create(product);        variantProduct.set("productId",variantProductId);        variantProduct.set("isVirtual","N");        variantProduct.set("isVariant","Y");        variantProduct.set("primaryProductCategoryId",null);        variantProduct.create();      } else {        variantProduct.set("isVirtual","N");        variantProduct.set("isVariant","Y");        variantProduct.set("primaryProductCategoryId",null);        variantProduct.store();      }      GenericValue productAssoc=delegator.makeValue("ProductAssoc",UtilMisc.toMap("productId",productId,"productIdTo",variantProductId,"productAssocTypeId","PRODUCT_VARIANT","fromDate",UtilDateTime.nowTimestamp()));      productAssoc.create();      for (int i=0; i < featureTypeSize; i++) {        String productFeatureId=request.getParameter("feature_" + i);        if (productFeatureId == null) {          Map<String,String> messageMap=UtilMisc.toMap("i",Integer.toString(i));          errMsg=UtilProperties.getMessage(resource,"variantevents.productFeatureId_for_feature_type_number_not_found",messageMap,UtilHttp.getLocale(request));          TransactionUtil.rollback(beganTransacton,errMsg,null);          request.setAttribute("_ERROR_MESSAGE_",errMsg);          return "error";        }        GenericValue productFeature=EntityQuery.use(delegator).from("ProductFeature").where("productFeatureId",productFeatureId).queryOne();        GenericValue productFeatureAppl=delegator.makeValue("ProductFeatureAppl",UtilMisc.toMap("productId",variantProductId,"productFeatureId",productFeatureId,"productFeatureApplTypeId","STANDARD_FEATURE","fromDate",UtilDateTime.nowTimestamp()));        if (productFeature != null) {          productFeatureAppl.set("sequenceNum",productFeature.get("defaultSequenceNum"));        }        productFeatureAppl.create();      }      TransactionUtil.commit(beganTransacton);    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());      errMsg=UtilProperties.getMessage(resource,"variantevents.entity_error_quick_add_variant_data",messageMap,UtilHttp.getLocale(request));      TransactionUtil.rollback(beganTransacton,errMsg,null);      Debug.logError(e,"Entity error creating quick add variant data",module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }  } catch (  GenericTransactionException e) {    Debug.logError(e,"Transaction error creating quick add variant data",module);    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());    errMsg=UtilProperties.getMessage(resource,"variantevents.transaction_error_quick_add_variant_data",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  Map<String,String> messageMap=UtilMisc.toMap("variantProductId",variantProductId);  String sucMsg=UtilProperties.getMessage(resource,"variantevents.successfully_created_variant_product_with_id",messageMap,UtilHttp.getLocale(request));  request.setAttribute("_EVENT_MESSAGE_",sucMsg);  return "success";}  }
class C{  public double remove(int key){  double prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  private String createString(String f){  return "name=" + createString(name) + f+ "totalGlobalMem="+ totalGlobalMem+ f+ "sharedMemPerBlock="+ sharedMemPerBlock+ f+ "regsPerBlock="+ regsPerBlock+ f+ "warpSize="+ warpSize+ f+ "memPitch="+ memPitch+ f+ "maxThreadsPerBlock="+ maxThreadsPerBlock+ f+ "maxThreadsDim="+ Arrays.toString(maxThreadsDim)+ f+ "maxGridSize="+ Arrays.toString(maxGridSize)+ f+ "clockRate="+ clockRate+ f+ "totalConstMem="+ totalConstMem+ f+ "major="+ major+ f+ "minor="+ minor+ f+ "textureAlignment="+ textureAlignment+ f+ "texturePitchAlignment="+ texturePitchAlignment+ f+ "deviceOverlap="+ deviceOverlap+ f+ "multiProcessorCount="+ multiProcessorCount+ f+ "kernelExecTimeoutEnabled="+ kernelExecTimeoutEnabled+ f+ "integrated="+ integrated+ f+ "canMapHostMemory="+ canMapHostMemory+ f+ "computeMode="+ cudaComputeMode.stringFor(computeMode)+ f+ "maxTexture1D="+ maxTexture1D+ f+ "maxTexture1DMipmap="+ maxTexture1DMipmap+ f+ "maxTexture1DLinear="+ maxTexture1DLinear+ f+ "maxTexture2D="+ Arrays.toString(maxTexture2D)+ f+ "maxTexture2DMipmap="+ Arrays.toString(maxTexture2DMipmap)+ f+ "maxTexture2DLinear="+ Arrays.toString(maxTexture2DLinear)+ f+ "maxTexture2DGather="+ Arrays.toString(maxTexture2DGather)+ f+ "maxTexture3D="+ Arrays.toString(maxTexture3D)+ f+ "maxTexture3DAlt="+ Arrays.toString(maxTexture3DAlt)+ f+ "maxTextureCubemap="+ maxTextureCubemap+ f+ "maxTexture1DLayered="+ Arrays.toString(maxTexture1DLayered)+ f+ "maxTexture2DLayered="+ Arrays.toString(maxTexture2DLayered)+ f+ "maxTextureCubemapLayered="+ Arrays.toString(maxTextureCubemapLayered)+ f+ "maxSurface1D="+ maxSurface1D+ f+ "maxSurface2D="+ Arrays.toString(maxSurface2D)+ f+ "maxSurface3D="+ Arrays.toString(maxSurface3D)+ f+ "maxSurface1DLayered="+ Arrays.toString(maxSurface1DLayered)+ f+ "maxSurface2DLayered="+ Arrays.toString(maxSurface2DLayered)+ f+ "maxSurfaceCubemap="+ maxSurfaceCubemap+ f+ "maxSurfaceCubemapLayered="+ Arrays.toString(maxSurfaceCubemapLayered)+ f+ "surfaceAlignment="+ surfaceAlignment+ f+ "concurrentKernels="+ concurrentKernels+ f+ "ECCEnabled="+ ECCEnabled+ f+ "pciBusID="+ pciBusID+ f+ "pciDeviceID="+ pciDeviceID+ f+ "pciDomainID="+ pciDomainID+ f+ "tccDriver="+ tccDriver+ f+ "asyncEngineCount="+ asyncEngineCount+ f+ "unifiedAddressing="+ unifiedAddressing+ f+ "memoryClockRate="+ memoryClockRate+ f+ "memoryBusWidth="+ memoryBusWidth+ f+ "l2CacheSize="+ l2CacheSize+ f+ "maxThreadsPerMultiProcessor="+ maxThreadsPerMultiProcessor+ f+ "streamPrioritiesSupported="+ streamPrioritiesSupported+ f;}  }
class C{  protected void layoutMajorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  long preferred=0;  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    spans[i]=(int)v.getPreferredSpan(axis);    preferred+=spans[i];  }  long desiredAdjustment=targetSpan - preferred;  float adjustmentFactor=0.0f;  int[] diffs=null;  if (desiredAdjustment != 0) {    long totalSpan=0;    diffs=new int[n];    for (int i=0; i < n; i++) {      View v=getView(i);      int tmp;      if (desiredAdjustment < 0) {        tmp=(int)v.getMinimumSpan(axis);        diffs[i]=spans[i] - tmp;      } else {        tmp=(int)v.getMaximumSpan(axis);        diffs[i]=tmp - spans[i];      }      totalSpan+=tmp;    }    float maximumAdjustment=Math.abs(totalSpan - preferred);    adjustmentFactor=desiredAdjustment / maximumAdjustment;    adjustmentFactor=Math.min(adjustmentFactor,1.0f);    adjustmentFactor=Math.max(adjustmentFactor,-1.0f);  }  int totalOffset=0;  for (int i=0; i < n; i++) {    offsets[i]=totalOffset;    if (desiredAdjustment != 0) {      float adjF=adjustmentFactor * diffs[i];      spans[i]+=Math.round(adjF);    }    totalOffset=(int)Math.min((long)totalOffset + (long)spans[i],Integer.MAX_VALUE);  }}  }
class C{  protected boolean showOutlineView(){  return true;}  }
class C{  public void printExceptionNoMorphingPathNameDefined(){  System.out.println("Ok you forget to add meta data in your AndroidVector  file for us to know which paths to morphs to which paths. SO here are the rules:");  System.out.println(help_message3);  System.out.println(help_message3_1);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,Color bgcolor,ImageObserver observer){  if (img == null) {    return true;  }  addDrawingRect(x,y,width,height);  mPrintMetrics.drawImage(this,img);  return mGraphics.drawImage(img,x,y,width,height,bgcolor,observer);}  }
class C{  boolean isLastTextOrPasswordField(){  Element parent=getFormElement();  Element elem=getElement();  if (parent != null) {    ElementIterator it=new ElementIterator(parent);    Element next;    boolean found=false;    while ((next=it.next()) != null) {      if (next == elem) {        found=true;      } else       if (found && isControl(next)) {        AttributeSet elemAttr=next.getAttributes();        if (HTMLDocument.matchNameAttribute(elemAttr,HTML.Tag.INPUT)) {          String type=(String)elemAttr.getAttribute(HTML.Attribute.TYPE);          if ("text".equals(type) || "password".equals(type)) {            return false;          }        }      }    }  }  return true;}  }
class C{  @Override public boolean hasStableIds(){  return false;}  }
class C{  @Override public long skip(long n){  if (this.pos + n > this.count) {    n=this.count - this.pos;  }  if (n < 0) {    return 0;  }  this.pos+=n;  return n;}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in.length;  while (count > 0) {    if (in[count - 1] != 0) {      break;    }    count--;  }  return in.length - count;}  }
class C{  public synchronized void changeEndpoints(Endpoints endpoints){  context().getPreferences().putBytes("custom_endpoints",endpoints.toByteArray());  actorApi.changeEndpoints(endpoints);}  }
class C{  public FixImageIcon(final PdfObject formObject,final PdfObject imgObj,final int iconRot,final PdfObjectReader pdfObjectReader,final int type,final int offset){  super(iconRot);  this.formObject=formObject;  selObj=imgObj;  selected=-1;  currentpdffile=pdfObjectReader;  subtype=type;  offsetImage=offset;}  }
class C{  public StringScrambler2(final long[] obfuscated){  final int length=obfuscated.length;  final byte[] encoded=new byte[8 * (length - 1)];  final long seed=obfuscated[0];  final Random prng=new Random(seed);  for (int i=1; i < length; i++) {    final long key=prng.nextLong();    toBytes(obfuscated[i] ^ key,encoded,8 * (i - 1));  }  final String decoded;  try {    decoded=new String(encoded,UTF8);  } catch (  UnsupportedEncodingException ex) {    throw new AssertionError(ex);  }  final int i=decoded.indexOf(0);  s=i != -1 ? decoded.substring(0,i) : decoded;}  }
class C{  public static long te(String method){  long nanoTime=Debug.threadCpuTimeNanos() - tsTime;  LogUtil.d("[Debug-time]",method,nanoTime / 1000000,nanoTime);  return nanoTime;}  }
class C{  public boolean equals(Matrix3d m1){  try {    return (this.m00 == m1.m00 && this.m01 == m1.m01 && this.m02 == m1.m02 && this.m10 == m1.m10 && this.m11 == m1.m11 && this.m12 == m1.m12 && this.m20 == m1.m20 && this.m21 == m1.m21 && this.m22 == m1.m22);  } catch (  NullPointerException e2) {    return false;  }}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public static Response httpGet(String host,String path,int connectTimeout,Map<String,String> headers,Map<String,String> querys,List<String> signHeaderPrefixList,String appKey,String appSecret) throws Exception {  headers=initialBasicHeader(HttpMethod.GET,path,headers,querys,null,signHeaderPrefixList,appKey,appSecret);  HttpClient httpClient=wrapClient(host);  httpClient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,getTimeout(connectTimeout));  HttpGet get=new HttpGet(initUrl(host,path,querys));  for (  Map.Entry<String,String> e : headers.entrySet()) {    get.addHeader(e.getKey(),MessageDigestUtil.utf8ToIso88591(e.getValue()));  }  return convert(httpClient.execute(get));}  }
class C{  private static Locale createConstant(String lang,String country){  BaseLocale base=BaseLocale.createInstance(lang,country);  return getInstance(base,null);}  }
class C{  boolean popNamespace(String prefix){  if (prefix.startsWith(XML_PREFIX)) {    return false;  }  Stack stack;  if ((stack=getPrefixStack(prefix)) != null) {    stack.pop();    return true;  }  return false;}  }
class C{  public void incCqsCreated(){  this._stats.incLong(_numCqsCreatedId,1);}  }
class C{  @HLEFunction(nid=0xC9805775,version=150) public int sceKernelDeleteHeap(int heapId){  HeapInformation info=heaps.remove(heapId);  if (info == null) {    return -1;  }  info.free();  return 0;}  }
class C{  @SuppressWarnings("resource") private Result buildClusterState(String clusterDescription,int replicationFactor,int maxShardsPerNode,String... liveNodes){  Result result=new Result();  Map<String,Slice> slices=null;  Map<String,Replica> replicas=null;  Map<String,Object> collectionProps=new HashMap<>();  collectionProps.put(ZkStateReader.MAX_SHARDS_PER_NODE,Integer.toString(maxShardsPerNode));  collectionProps.put(ZkStateReader.REPLICATION_FACTOR,Integer.toString(replicationFactor));  Map<String,DocCollection> collectionStates=new HashMap<>();  DocCollection docCollection=null;  Slice slice=null;  int replicaCount=1;  Matcher m=BLUEPRINT.matcher(clusterDescription);  while (m.find()) {    Replica replica;switch (m.group(1)) {case "c":      slices=new HashMap<>();    docCollection=new DocCollection("collection" + (collectionStates.size() + 1),slices,collectionProps,null);  collectionStates.put(docCollection.getName(),docCollection);break;case "s":replicas=new HashMap<>();slice=new Slice("slice" + (slices.size() + 1),replicas,null);slices.put(slice.getName(),slice);break;case "r":Map<String,Object> replicaPropMap=new HashMap<>();String node;node=m.group(2);if (node == null || node.trim().length() == 0) {node="1";}Replica.State state=Replica.State.ACTIVE;String stateCode=m.group(3);if (stateCode != null) {switch (stateCode.charAt(0)) {case 'S':state=Replica.State.ACTIVE;break;case 'R':state=Replica.State.RECOVERING;break;case 'D':state=Replica.State.DOWN;break;case 'F':state=Replica.State.RECOVERY_FAILED;break;default :throw new IllegalArgumentException("Unexpected state for replica: " + stateCode);}}String nodeName="baseUrl" + node + "_";String replicaName="replica" + replicaCount++;if ("*".equals(m.group(4))) {replicaName+=" (bad)";}replicaPropMap.put(ZkStateReader.NODE_NAME_PROP,nodeName);replicaPropMap.put(ZkStateReader.BASE_URL_PROP,"http://baseUrl" + node);replicaPropMap.put(ZkStateReader.STATE_PROP,state.toString());replica=new Replica(replicaName,replicaPropMap);if ("*".equals(m.group(4))) {result.badReplica=new DownReplica();result.badReplica.replica=replica;result.badReplica.slice=slice;result.badReplica.collection=docCollection;}replicas.put(replica.getName(),replica);break;default :break;}}MockZkStateReader reader=new MockZkStateReader(null,collectionStates.keySet());ClusterState clusterState=new ClusterState(1,new HashSet<>(Arrays.asList(liveNodes)),collectionStates);reader=new MockZkStateReader(clusterState,collectionStates.keySet());String json;try {json=new String(Utils.toJSON(clusterState),"UTF-8");} catch (UnsupportedEncodingException e) {throw new RuntimeException("Unexpected");}System.err.println("build:" + buildNumber++);System.err.println(json);assert result.badReplica != null : "Is there no bad replica?";assert result.badReplica.slice != null : "Is there no bad replica?";result.reader=reader;results.add(result);return result;}  }
class C{  private Object maskNull(String cacheName){  return cacheName == null ? NULL_MASK : cacheName;}  }
class C{  public int fword(int index){  return this.data.readFWord(index);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof PrincipalEntry))   return false;  PrincipalEntry that=(PrincipalEntry)obj;  return (principalClass.equals(that.principalClass) && principalName.equals(that.principalName));}  }
class C{  @org.junit.Test public void verifyGetEmailResponse() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  String str=client.invokeAPI("/mockResponses/primitiveEmailResponse","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  assertEquals(str,quote(ExampleBuilder.SAMPLE_EMAIL_PROPERTY_VALUE));}  }
class C{  public DelaunayVertex extend(double... coords){  double[] result=new double[coordinates.length + coords.length];  System.arraycopy(coordinates,0,result,0,coordinates.length);  System.arraycopy(coords,0,result,coordinates.length,coords.length);  return new DelaunayVertex(result);}  }
class C{  private LogLevel log4jToGenericLogLevel(Level level){  LogLevel logLevel=LogLevel.ALL;  if (level.equals(Level.OFF)) {    logLevel=LogLevel.OFF;  } else   if (level.equals(Level.FATAL)) {    logLevel=LogLevel.FATAL;  } else   if (level.equals(Level.ERROR)) {    logLevel=LogLevel.ERROR;  } else   if (level.equals(Level.WARN)) {    logLevel=LogLevel.WARN;  } else   if (level.equals(Level.INFO)) {    logLevel=LogLevel.INFO;  } else   if (level.equals(Level.DEBUG)) {    logLevel=LogLevel.DEBUG;  } else   if (level.equals(Level.TRACE)) {    logLevel=LogLevel.TRACE;  } else   if (level.equals(Level.ALL)) {    logLevel=LogLevel.ALL;  } else {    LOGGER.warn("Unsupported log level encountered: " + level.toString() + ". Using ALL.");  }  return logLevel;}  }
class C{  @Override public void readExternal(ObjectInput is) throws IOException {  readFields(is);}  }
class C{  public static String convertMethodSignature(JavaClass javaClass,Method method){  return convertMethodSignature(javaClass.getClassName(),method.getName(),method.getSignature());}  }
class C{  public void testScaleZero(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=0;  int cScale=0;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertTrue("incorrect scale",aNumber.scale() == cScale);}  }
class C{  public String canonizeString(String file){  int i=0;  int lim=file.length();  while ((i=file.indexOf("/../")) >= 0) {    if ((lim=file.lastIndexOf('/',i - 1)) >= 0) {      file=file.substring(0,lim) + file.substring(i + 3);    } else {      file=file.substring(i + 3);    }  }  while ((i=file.indexOf("/./")) >= 0) {    file=file.substring(0,i) + file.substring(i + 2);  }  while (file.endsWith("/..")) {    i=file.indexOf("/..");    if ((lim=file.lastIndexOf('/',i - 1)) >= 0) {      file=file.substring(0,lim + 1);    } else {      file=file.substring(0,i);    }  }  if (file.endsWith("/."))   file=file.substring(0,file.length() - 1);  return file;}  }
class C{  protected void performGETRequest(final HttpServerRequest request,final CopyTask task){  HttpClientRequest selfRequest=selfClient.get(task.getSourceUri(),null);  selfRequest.headers().setAll(task.getHeaders());  selfRequest.setTimeout(DEFAULT_TIMEOUT);  selfRequest.end();}  }
class C{  @Override public Map<String,Set<URI>> findExportMasks(StorageSystem storage,List<String> initiatorNames,boolean mustHaveAllInitiators) throws DeviceControllerException {  long startTime=System.currentTimeMillis();  Map<String,Set<URI>> matchingMasks=new HashMap<String,Set<URI>>();  Map<URI,ExportMask> maskMap=new HashMap<>();  CloseableIterator<CIMInstance> maskInstanceItr=null;  try {    WBEMClient client=_helper.getConnection(storage).getCimClient();    HashMap<String,CIMObjectPath> initiatorPathsMap=_cimPath.getInitiatorToInitiatorPath(storage,initiatorNames);    List<String> maskNames=new ArrayList<String>();    Set<String> maskNamesFromArray=new HashSet<>();    for (    String initiatorName : initiatorPathsMap.keySet()) {      CIMObjectPath initiatorPath=initiatorPathsMap.get(initiatorName);      maskInstanceItr=_helper.getAssociatorInstances(storage,initiatorPath,null,SmisConstants.SYMM_LUN_MASKING_VIEW,null,null,SmisConstants.PS_LUN_MASKING_CNTRL_NAME_AND_ROLE);      while (maskInstanceItr.hasNext()) {        CIMInstance instance=maskInstanceItr.next();        String systemName=CIMPropertyFactory.getPropertyValue(instance,SmisConstants.CP_SYSTEM_NAME);        if (!systemName.contains(storage.getSerialNumber())) {          continue;        }        String name=CIMPropertyFactory.getPropertyValue(instance,SmisConstants.CP_ELEMENT_NAME);        CIMProperty<String> deviceIdProperty=(CIMProperty<String>)instance.getObjectPath().getKey(SmisConstants.CP_DEVICE_ID);        ExportMask exportMask=ExportMaskUtils.getExportMaskByName(_dbClient,storage.getId(),name);        boolean foundMaskInDb=(exportMask != null);        maskNamesFromArray.add(name);        if (!foundMaskInDb) {          exportMask=new ExportMask();          exportMask.setMaskName(name);          exportMask.setNativeId(deviceIdProperty.getValue());          exportMask.setStorageDevice(storage.getId());          exportMask.setId(URIUtil.createId(ExportMask.class));          exportMask.setCreatedBySystem(false);        }        if (!maskNames.contains(name)) {          List<String> initiatorPorts=_helper.getInitiatorsFromLunMaskingInstance(client,instance);          if (!CollectionUtils.isEmpty(exportMask.getExistingInitiators())) {            exportMask.getExistingInitiators().clear();          }          exportMask.addToExistingInitiatorsIfAbsent(initiatorPorts);          for (          String portName : initiatorPorts) {            Initiator existingInitiator=ExportUtils.getInitiator(Initiator.toPortNetworkId(portName),_dbClient);            if (existingInitiator != null && !ExportMaskUtils.checkIfDifferentResource(exportMask,existingInitiator)) {              exportMask.addInitiator(existingInitiator);              exportMask.addToUserCreatedInitiators(existingInitiator);              exportMask.removeFromExistingInitiators(existingInitiator);            }          }          Map<String,Integer> volumeWWNs=_helper.getVolumesFromLunMaskingInstance(client,instance);          if (!CollectionUtils.isEmpty(exportMask.getExistingVolumes())) {            exportMask.getExistingVolumes().clear();          }          exportMask.addToExistingVolumesIfAbsent(volumeWWNs);          if (volumeWWNs != null) {            for (            Entry<String,Integer> entry : volumeWWNs.entrySet()) {              String wwn=entry.getKey();              URIQueryResultList results=new URIQueryResultList();              _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeWwnConstraint(wwn.toUpperCase()),results);              if (results != null) {                Iterator<URI> resultsIter=results.iterator();                if (resultsIter.hasNext()) {                  Volume volume=_dbClient.queryObject(Volume.class,resultsIter.next());                  if (volume != null) {                    Integer hlu=volumeWWNs.get(wwn);                    if (hlu == null) {                      _log.warn(String.format("The HLU for %s could not be found from the provider. Setting this to -1 (Unknown).",wwn));                      hlu=-1;                    }                    exportMask.addVolume(volume.getId(),hlu);                    exportMask.removeFromExistingVolumes(volume);                  }                }              }            }          }          List<String> storagePorts=_helper.getStoragePortsFromLunMaskingInstance(client,instance);          List<String> storagePortURIs=ExportUtils.storagePortNamesToURIs(_dbClient,storagePorts);          exportMask.setStoragePorts(storagePortURIs);          maskNames.add(name);        }        maskMap.put(exportMask.getId(),exportMask);        if (foundMaskInDb) {          ExportMaskUtils.sanitizeExportMaskContainers(_dbClient,exportMask);          _dbClient.updateObject(exportMask);        } else {          _dbClient.createObject(exportMask);        }        Set<URI> maskURIs=matchingMasks.get(initiatorName);        if (maskURIs == null) {          maskURIs=new HashSet<>();          matchingMasks.put(initiatorName,maskURIs);        }        maskURIs.add(exportMask.getId());      }    }    Set<URI> masksNotContainingAllInitiators=new HashSet<>();    if (mustHaveAllInitiators) {      for (      URI exportMaskURI : maskMap.keySet()) {        ExportMask mask=maskMap.get(exportMaskURI);        if (!matchesSearchCriteria(mask,initiatorNames,true)) {          masksNotContainingAllInitiators.add(exportMaskURI);        }      }    }    Set<URI> masksWithReusableIGs=getMasksWhoseIGsCanBeReused(storage,maskMap,initiatorNames);    if (!masksNotContainingAllInitiators.isEmpty() || !masksWithReusableIGs.isEmpty()) {      _log.info("ExportMasks not containing all initiators requested: {}",masksNotContainingAllInitiators);      _log.info("ExportMasks whose IGs can be reused to create new masking view: {}",masksWithReusableIGs);      Iterator<Entry<String,Set<URI>>> matchingMapEntryIterator=matchingMasks.entrySet().iterator();      while (matchingMapEntryIterator.hasNext()) {        Entry<String,Set<URI>> matchingMapEntry=matchingMapEntryIterator.next();        Set<URI> maskURIs=matchingMapEntry.getValue();        maskURIs.removeAll(masksNotContainingAllInitiators);        maskURIs.removeAll(masksWithReusableIGs);        if (maskURIs.isEmpty()) {          matchingMapEntryIterator.remove();        }      }    }    StringBuilder builder=new StringBuilder();    for (    URI exportMaskURI : maskMap.keySet()) {      ExportMask exportMask=maskMap.get(exportMaskURI);      String qualifier=(masksNotContainingAllInitiators.contains(exportMaskURI)) ? ", but not containing all initiators we're looking for" : (masksWithReusableIGs.contains(exportMaskURI) ? ", but it's IGs can be reused to create new masking view" : SmisConstants.EMPTY_STRING);      builder.append(String.format("\nXM:%s is matching%s: ",exportMask.getMaskName(),qualifier)).append('\n').append(exportMask.toString());    }    ExportUtils.cleanStaleExportMasks(storage,maskNamesFromArray,initiatorNames,_dbClient);    _log.info(builder.toString());  } catch (  Exception e) {    String msg="Error when attempting to query LUN masking information: " + e.getMessage();    _log.error(MessageFormat.format("Encountered an SMIS error when attempting to query existing exports: {0}",msg),e);    throw SmisException.exceptions.queryExistingMasksFailure(msg,e);  } finally {    if (maskInstanceItr != null) {      maskInstanceItr.close();    }    long totalTime=System.currentTimeMillis() - startTime;    _log.info(String.format("findExportMasks took %f seconds",(double)totalTime / (double)1000));  }  return matchingMasks;}  }
class C{  public void removeDialog(final Class<?> dialogController){  destroyDialog(dialogController);  dialogControllers.remove(dialogController);}  }
class C{  public void afterIfPresent(T id){  after.add(id);}  }
class C{  public Matrix3f rotate(float ang,float x,float y,float z){  return rotate(ang,x,y,z,this);}  }
class C{  public boolean parseCDATA(){  return parseCDATA;}  }
class C{  private float calcRank(DecompoundedWord aSplit){  double total=0;  double count=0;  BigInteger unigramCount=getFinder().getUnigramCount();  if (aSplit.getSplits().size() == 1) {    Fragment w=aSplit.getSplits().get(0);    double p=freq(w).doubleValue() / unigramCount.doubleValue();    return (float)((-1) * p * Math.log(p));  }  for (int i=1; i < aSplit.getSplits().size(); i++) {    count++;    Fragment w1=aSplit.getSplits().get(i - 1);    Fragment w2=aSplit.getSplits().get(i);    BigInteger w1f=freq(w1);    if (w1f.equals(BigInteger.ZERO)) {      continue;    }    BigInteger w2f=freq(w2);    if (w2f.equals(BigInteger.ZERO)) {      continue;    }    double a=freq(w1,w2).multiply(unigramCount).doubleValue();    if (a == 0d) {      continue;    }    double b=w1f.multiply(w2f).doubleValue();    total+=Math.log(a / b);  }  return (float)(total / count);}  }
class C{  public void clearAllWatchers(){synchronized (watchers) {    watchers.clear();  }}  }
class C{  public void subscribeTo(final K key,final Subscriber<V> subscriber){  registered.get(key).stream().subscribe(subscriber);}  }
class C{  private boolean validateGroupNameField(){  return swingNameValueField.isValid();}  }
class C{  protected void unsubscribe(){  if (schedulerSubscription != null) {    schedulerSubscription.unsubscribe();    schedulerSubscription=null;  }}  }
class C{  public static void checkExpectedSchemaType(Map<String,Object> expected) throws Exception {  String typeName=(String)expected.get("name");  assertNotNull("expected contains no type: " + expected,typeName);  FieldTypeResponse rsp=new FieldType(typeName).process(CLOUD_CLIENT);  assertNotNull("FieldType Null Response: " + typeName,rsp);  assertEquals("FieldType Status: " + typeName + " => "+ rsp.toString(),0,rsp.getStatus());  assertEquals("FieldType: " + typeName,expected,rsp.getFieldType().getAttributes());}  }
class C{  public void touch(MetaImage mi){synchronized (this) {    miToCachedFile.get(mi);  }}  }
class C{  public NotificationChain basicSetCondition(Expression newCondition,NotificationChain msgs){  Expression oldCondition=condition;  condition=newCondition;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.CHECK__CONDITION,oldCondition,newCondition);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Rectangle2D findDataArea(Point2D point){  PlotRenderingInfo plotInfo=this.info.getPlotInfo();  Rectangle2D result;  if (plotInfo.getSubplotCount() == 0) {    result=plotInfo.getDataArea();  } else {    int subplotIndex=plotInfo.getSubplotIndex(point);    if (subplotIndex == -1) {      return null;    }    result=plotInfo.getSubplotInfo(subplotIndex).getDataArea();  }  return result;}  }
class C{  VPlexStorageViewInfo createStorageView(String viewName,List<PortInfo> targetPortInfo,List<PortInfo> initiatorPortInfo,Map<String,Integer> virtualVolumeMap) throws VPlexApiException {  s_logger.info("Request to create storage view with name {}",viewName);  List<VPlexTargetInfo> targetInfoList=new ArrayList<VPlexTargetInfo>();  VPlexClusterInfo clusterInfo=findTargets(targetPortInfo,targetInfoList,true);  if (targetInfoList.size() != targetPortInfo.size()) {    throw VPlexApiException.exceptions.failedToFindAllRequestedTargets();  }  s_logger.info("Found targets ports for storage view");  createStorageView(viewName,clusterInfo,targetInfoList);  s_logger.info("Storage view {} created",viewName);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexStorageViewInfo storageViewInfo=discoveryMgr.findStorageViewOnCluster(viewName,clusterInfo.getName(),false,true);  if (storageViewInfo == null) {    throw VPlexApiException.exceptions.couldNotFindStorageView(viewName);  }  s_logger.info("Found storage view");  if ((initiatorPortInfo != null) && !initiatorPortInfo.isEmpty()) {    s_logger.info("Adding initiators to new storage view");    List<VPlexInitiatorInfo> initiatorInfoList=findInitiators(clusterInfo,initiatorPortInfo);    if (initiatorInfoList.size() != initiatorPortInfo.size()) {      s_logger.info("Could not find all of the requested initiators on VPlex.");      initiatorInfoList=buildInitiatorInfoList(initiatorInfoList,initiatorPortInfo,clusterInfo);    }    registerInitiators(clusterInfo,initiatorInfoList);    s_logger.info("Registered initiators");    addStorageViewInitiators(storageViewInfo,initiatorInfoList);    s_logger.info("Initiators added to new storage view");  }  if ((virtualVolumeMap != null) && (virtualVolumeMap.size() != 0)) {    s_logger.info("Adding virtual volumes to new storage view");    addStorageViewVirtualVolumes(storageViewInfo,virtualVolumeMap);    s_logger.info("Virtual volumes added to new storage view");  }  s_logger.info("Storage view {} creation was successful",viewName);  return storageViewInfo;}  }
class C{  public void enumerate() throws IOException {  print("enumerate",null);}  }
class C{  public static boolean install(Context context,String filePath){  Intent i=new Intent(Intent.ACTION_VIEW);  File file=new File(filePath);  if (file == null || !file.exists() || !file.isFile() || file.length() <= 0) {    return false;  }  i.setDataAndType(Uri.parse("file://" + filePath),"application/vnd.android.package-archive");  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(i);  return true;}  }
class C{  public boolean isMultiMovieDir(){  return multiMovieDir;}  }
class C{  static void processEvent(AWTEvent theEvent){switch (theEvent.getID()) {case MouseEvent.MOUSE_MOVED:case MouseEvent.MOUSE_DRAGGED:case FocusEvent.FOCUS_GAINED:case WindowEvent.WINDOW_DEACTIVATED:    queueComponentEvent((ComponentEvent)theEvent);  break;case WindowEvent.WINDOW_ACTIVATED:if (theEvent instanceof ComponentEvent) {  ComponentEvent ce=(ComponentEvent)theEvent;  if (ce.getComponent() instanceof Window) {    EventQueueMonitor.addTopLevelWindow(ce.getComponent());    EventQueueMonitor.maybeNotifyAssistiveTechnologies();  } else {    EventQueueMonitor.maybeNotifyAssistiveTechnologies();    EventQueueMonitor.addTopLevelWindow(ce.getComponent());  }}queueComponentEvent((ComponentEvent)theEvent);break;case WindowEvent.WINDOW_OPENED:if (theEvent instanceof ComponentEvent) {ComponentEvent ce=(ComponentEvent)theEvent;if (ce.getComponent() instanceof Window) {EventQueueMonitor.addTopLevelWindow(ce.getComponent());EventQueueMonitor.maybeNotifyAssistiveTechnologies();} else {EventQueueMonitor.maybeNotifyAssistiveTechnologies();EventQueueMonitor.addTopLevelWindow(ce.getComponent());}}break;case WindowEvent.WINDOW_CLOSED:if (theEvent instanceof ComponentEvent) {ComponentEvent ce=(ComponentEvent)theEvent;EventQueueMonitor.removeTopLevelWindow((Window)(ce.getComponent()));}break;default :break;}}  }
class C{  private void onTrackPointEnd() throws SAXException {  if (content == null) {    return;  }  String parts[]=content.trim().split(" ");  if (parts.length != 2 && parts.length != 3) {    return;  }  longitude=parts[0];  latitude=parts[1];  altitude=parts.length == 3 ? parts[2] : null;  Location location=getTrackPoint();  if (location == null) {    return;  }  locationList.add(location);  time=null;}  }
class C{  private void loadMessagesClass(){  try {    Class.forName(FULL_MESSAGES_CLASS_NAME);  } catch (  ClassNotFoundException e) {    _log.warn("can't find Messages class",e);  }}  }
class C{  public ListQueryBinding(TupleSet ts,String field,boolean includeAllOption){  super(ts,field);  m_type=DataLib.inferType(ts,field);  m_lstnr=new Listener();  m_includeAll=includeAllOption;  initPredicate();  initModel();}  }
class C{  public void printStackTrace(java.io.PrintStream s){  if (s == null)   s=System.err;  try {    super.printStackTrace(s);  } catch (  Exception e) {  }  Throwable exception=m_exception;  for (int i=0; (i < 10) && (null != exception); i++) {    s.println("---------");    exception.printStackTrace(s);    if (exception instanceof TransformerException) {      TransformerException se=(TransformerException)exception;      Throwable prev=exception;      exception=se.getException();      if (prev == exception)       break;    } else {      exception=null;    }  }}  }
class C{  public long dirSize(File dir){  if (!dir.exists())   return 0;  long result=0;  File[] fileList=dir.listFiles();  for (int i=0; i < fileList.length; i++) {    if (fileList[i].isDirectory()) {      result+=dirSize(fileList[i]);    } else {      result+=fileList[i].length();    }  }  return result / (1024 * 1024);}  }
class C{  public List<Integer> rightSideView(TreeNode root){  if (root == null) {    return null;  }  List<Integer> res=new ArrayList<>();  Queue<TreeNode> queue=new ArrayDeque<>();  queue.offer(root);  while (!queue.isEmpty()) {    int size=queue.size();    for (int i=0; i < size; i++) {      TreeNode node=queue.poll();      if (node.left != null) {        queue.offer(node.left);      }      if (node.right != null) {        queue.offer(node.right);      }      if (i == size - 1) {        res.add(node.val);      }    }  }  return res;}  }
class C{  public CSVParser(char separator,char quotechar,char escape){  this(separator,quotechar,escape,DEFAULT_STRICT_QUOTES);}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  properties.setProperty("MapElement.Path.defaultColor",StringUtil.colorToString(defaultColor));  properties.setProperty("MapElement.Path.defaultSize",Float.toString(defaultSize));  properties.setProperty("MapElement.Path.defaultLineWidth",Float.toString(defaultLineWidth));  properties.setProperty("MapElement.Path.defaultBodyType",defaultBodyType.toString());  properties.setProperty("MapElement.Path.defaultLabelType",defaultLabelType.toString());  properties.setProperty("MapElement.Path.defaultWaypointsVisible",Boolean.toString(defaultWaypointsVisible));  properties.setProperty("MapElement.Path.defaultLabelVisible",Boolean.toString(defaultLabelVisible));}  }
class C{  public Task pushTask(String taskName,String descriptionFormat,Object... args){  clearOutput();  String description=String.format(descriptionFormat,args);  String indented=indent(description + "... ");  out.print(indented);  Task t=new Task(taskName,descriptionFormat,args);  stack.push(t);  currentOutput=t;  return t;}  }
class C{  private static String arrayToString(Object[] array){  StringBuilder result=new StringBuilder("[");  for (int index=0; index < array.length - 1; ++index) {    result.append(array[index]).append(",");  }  if (array.length > 0) {    result.append(array[array.length - 1]);  }  result.append("]");  return result.toString();}  }
class C{  private int markArticles(String idList,String mark,String state){  int ret=0;  if (!isDBAvailable())   return ret;  ContentValues cv=new ContentValues(1);  cv.put(mark,state);  SQLiteDatabase db=getOpenHelper().getWritableDatabase();  write.lock();  try {    db.beginTransaction();    ret=db.update(TABLE_ARTICLES,cv,"_id IN (" + idList + ") AND ? != ?",new String[]{mark,String.valueOf(state)});    db.setTransactionSuccessful();  }  finally {    try {      db.endTransaction();    }  finally {      write.unlock();    }  }  return ret;}  }
class C{  public PlatformMemory allocate(int cap){  long memPtr=allocatePooled(poolPtr,cap);  return memPtr != 0 ? get(memPtr) : new PlatformUnpooledMemory(allocateUnpooled(cap));}  }
class C{  public static byte[] publicKeyFromPrivate(BigInteger privKey,boolean compressed){  ECPoint point=publicPointFromPrivate(privKey);  return point.getEncoded(compressed);}  }
class C{  @LargeTest public void testFrameOverlayImageItem() throws Exception {  final String imageItemFilename1=INPUT_FILE_PATH + "IMG_640x480.jpg";  final String overlayFile1=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  final String overlayFile2=INPUT_FILE_PATH + "IMG_640x480_Overlay2.png";  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",imageItemFilename1,10000,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaImageItem1);  final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayFile1,640,480);  final OverlayFrame overlayFrame1=mVideoEditorHelper.createOverlay(mediaImageItem1,"overlayId1",mBitmap,5000,5000);  mediaImageItem1.addOverlay(overlayFrame1);  assertEquals("Overlay : Media Item",mediaImageItem1,overlayFrame1.getMediaItem());  assertTrue("Overlay Id",overlayFrame1.getId().equals("overlayId1"));  assertEquals("Overlay Bitmap",mBitmap,overlayFrame1.getBitmap());  assertEquals("Overlay Start Time",5000,overlayFrame1.getStartTime());  assertEquals("Overlay Duration",5000,overlayFrame1.getDuration());  Bitmap upddateBmp=mVideoEditorHelper.getBitmap(overlayFile2,640,480);  overlayFrame1.setBitmap(upddateBmp);  assertEquals("Overlay Update Bitmap",upddateBmp,overlayFrame1.getBitmap());  upddateBmp.recycle();}  }
class C{  protected Node newNode(){  return new GenericText();}  }
class C{  protected Object internalGetParent(Object element){  if (element instanceof IResource) {    IResource parent=((IResource)element).getParent();    IJavaElement jParent=JavaCore.create(parent);    if (jParent != null && jParent.exists())     return jParent;    return parent;  } else   if (element instanceof IJavaElement) {    IJavaElement parent=((IJavaElement)element).getParent();    if (element instanceof IPackageFragment) {      return skipProjectPackageFragmentRoot((IPackageFragmentRoot)parent);    }    return parent;  } else   if (element instanceof IJarEntryResource) {    return ((IJarEntryResource)element).getParent();  }  return null;}  }
class C{  public RatPoly antiDifferentiate(RatNum integrationConstant){  if (integrationConstant.isNaN() || this.isNaN()) {    return NAN;  }  RatPoly result=new RatPoly();  if (!integrationConstant.equals(ZERO)) {    result.terms.addElement(new RatTerm(integrationConstant,0));  }  for (int i=0, size=this.terms.size(); i < size; i++) {    sortedAdd(result.terms,new RatTerm(terms.get(i).coeff.div(new RatNum(terms.get(i).expt + 1)),this.terms.get(i).expt + 1));  }  return result;}  }
class C{  public ValueNode pop(JavaKind slotKind){  if (slotKind.needsTwoSlots()) {    ValueNode s=xpop();    assert s == TWO_SLOT_MARKER;  }  ValueNode x=xpop();  assert verifyKind(slotKind,x);  return x;}  }
class C{  public void forget(){  super.forget();  firstCapitalized.clear();  notFirstCapitalized.clear();}  }
class C{  @RequestMapping(value="/bloodPressures/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> delete(@PathVariable Long id){  log.debug("REST request to delete BloodPressure : {}",id);  bloodPressureRepository.delete(id);  bloodPressureSearchRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("bloodPressure",id.toString())).build();}  }
class C{  @Override public Resource createRelative(String relativePath){  String pathToUse=StringUtils.applyRelativePath(this.path,relativePath);  return new ClassPathResource(pathToUse,this.classLoader,this.clazz);}  }
class C{  @Override public V remove(Object key){  if (key == null) {    key=NULL_OBJECT;  }  boolean hashedOk;  int index, next, hash;  Object result, object;  index=next=findIndex(key,elementData);  if (elementData[index] != key) {    return null;  }  result=elementData[index + 1];  int length=elementData.length;  while (true) {    next=(next + 2) % length;    object=elementData[next];    if (object == null) {      break;    }    hash=getModuloHash(object,length);    hashedOk=hash > index;    if (next < index) {      hashedOk=hashedOk || (hash <= next);    } else {      hashedOk=hashedOk && (hash <= next);    }    if (!hashedOk) {      elementData[index]=object;      elementData[index + 1]=elementData[next + 1];      index=next;    }  }  size--;  modCount++;  elementData[index]=null;  elementData[index + 1]=null;  return massageValue(result);}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public void requestAll(){  request(Long.MAX_VALUE);}  }
class C{  public Bundler putShort(String key,short value){  bundle.putShort(key,value);  return this;}  }
class C{  private void loadNoxItem(int position){  if (!scroller.isScrollingFast()) {    noxItemCatalog.load(position,useCircularTransformation);  }}  }
class C{  public static final byte[] decode(Element element) throws Base64DecodingException {  Node sibling=element.getFirstChild();  StringBuffer sb=new StringBuffer();  while (sibling != null) {    if (sibling.getNodeType() == Node.TEXT_NODE) {      Text t=(Text)sibling;      sb.append(t.getData());    }    sibling=sibling.getNextSibling();  }  return decode(sb.toString());}  }
class C{  public static int[] toPrimitive(final Integer[] array,final int valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_INT_ARRAY;  }  final int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    Integer b=array[i];    result[i]=b == null ? valueForNull : b.intValue();  }  return result;}  }
class C{  protected void objectsRemoved(DBIDs ids){  final Logging log=getLogger();  StepProgress stepprog=log.isVerbose() ? new StepProgress(3) : null;  log.beginStep(stepprog,1,"New deletions ocurred, remove their materialized kNNs.");  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    storage.delete(iter);  }  log.beginStep(stepprog,2,"New deletions ocurred, update the affected kNNs.");  ArrayDBIDs rkNN_ids=updateKNNsAfterDeletion(ids);  log.beginStep(stepprog,3,"New deletions ocurred, inform listeners.");  fireKNNsRemoved(ids,rkNN_ids);  log.ensureCompleted(stepprog);}  }
class C{  public boolean canInvert(){  return true;}  }
class C{  @Override public void neighborChanged(IBlockState state,World worldIn,BlockPos pos,Block neighborBlock){  if (this.checkForDrop(worldIn,pos,state) && !func_181088_a(worldIn,pos,state.getValue(FACING).getOpposite())) {    this.dropBlockAsItem(worldIn,pos,state,0);    worldIn.setBlockToAir(pos);  }}  }
class C{  public byte[] toByteArray(){  byte b[]=new byte[12];  ByteBuffer bb=ByteBuffer.wrap(b);  bb.putInt(_time);  bb.putInt(_machine);  bb.putInt(_inc);  return b;}  }
class C{  public Bytes acquireBytesForRead(long position) throws IOException, IllegalStateException, IllegalArgumentException {  MappedBytesStore mbs=acquireByteStore(position);  Bytes bytes=mbs.bytesForRead();  bytes.readPositionUnlimited(position);  mbs.release();  return bytes;}  }
class C{  public static synchronized Image loadImage(String path){  Image image=null;  if (path != null) {    try {      File file=new File(path);      URL url=file.toURI().toURL();      image=loadImage(url);    } catch (    MalformedURLException e) {      log.severe("Path= " + path + " - "+ e.getMessage());    }  }  return image;}  }
class C{  protected AbstractElement(String prefix,AbstractDocument owner){  ownerDocument=owner;  setPrefix(prefix);  initializeAttributes();}  }
class C{  public boolean isIcq(){  return isProtocol(ICQ);}  }
class C{  public static void prune(TreeNodeVisitor root,PruningMethod method,List<DataPointPair<Integer>> testSet){  if (method == PruningMethod.NONE)   return; else   if (method == PruningMethod.REDUCED_ERROR)   pruneReduceError(null,-1,root,testSet); else   if (method == PruningMethod.ERROR_BASED)   pruneErrorBased(null,-1,root,testSet,0.25); else   throw new RuntimeException("BUG: please report");}  }
class C{  public static String unwrap(String fileName){  return FilePath.get(fileName).unwrap().toString();}  }
class C{  private void openInBrowserButtonInvoked(){  try {    final URI uri=URIUtils.newURI(browserHistory.getCurrentURL());    BrowserFacade.launchURL(uri,uri.getPath());  } catch (  final IllegalArgumentException e) {    final String messageFormat=Messages.getString("WebPageControl.ErrorDialogTextFormat");    final String message=MessageFormat.format(messageFormat,e.getMessage());    MessageDialog.openError(browser.getShell(),Messages.getString("WebPageControl.ErrorDialogTitle"),message);  }}  }
class C{  public static DoubleSpends createFakeDoubleSpendTxns(NetworkParameters params,Address to){  DoubleSpends doubleSpends=new DoubleSpends();  BigInteger value=Utils.toNanoCoins(1,0);  Address someBadGuy=new ECKey().toAddress(params);  doubleSpends.t1=new Transaction(params);  TransactionOutput o1=new TransactionOutput(params,doubleSpends.t1,value,to);  doubleSpends.t1.addOutput(o1);  doubleSpends.prevTx=new Transaction(params);  TransactionOutput prevOut=new TransactionOutput(params,doubleSpends.prevTx,value,someBadGuy);  doubleSpends.prevTx.addOutput(prevOut);  doubleSpends.t1.addInput(prevOut);  doubleSpends.t2=new Transaction(params);  doubleSpends.t2.addInput(prevOut);  TransactionOutput o2=new TransactionOutput(params,doubleSpends.t2,value,someBadGuy);  doubleSpends.t2.addOutput(o2);  try {    doubleSpends.t1=new Transaction(params,doubleSpends.t1.bitcoinSerialize());    doubleSpends.t2=new Transaction(params,doubleSpends.t2.bitcoinSerialize());  } catch (  ProtocolException e) {    throw new RuntimeException(e);  }  return doubleSpends;}  }
class C{  public Query(String id){  super(id);}  }
class C{  public boolean isRunning(){  return mRunning.get();}  }
class C{  public LongAdder8(){}  }
class C{  public boolean isSetValue(){  return this.value != null;}  }
class C{  public static Function<Integer> jsonArrayLength(Object json,String path){  return new JSONArgumentFunction<>("json_array_length",json,path);}  }
class C{  public void init(){  if (!_initialized) {    super.init();    add(initTablePanel(_model,_editor),0);    _buttonPosition=1;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void onScanStart(){}  }
class C{  private void addWithShift(StreamRecord<T> record,Long shift){  input.add(Pair.of(record,shift));}  }
class C{  public void showSettings(){  showSettings(null,null);}  }
class C{  public boolean isChartDrawn(){  return mDrawn;}  }
class C{  public IntervalXYItemLabelGenerator(String formatString,NumberFormat xFormat,DateFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  public InsertImageAction(){  super("Image");}  }
class C{  private static VelocityEngine newVeloictyEngine(){  ExtendedProperties prop=new ExtendedProperties();  prop.addProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS,SimpleLog4JLogSystem.class.getName());  prop.addProperty("runtime.log.logsystem.log4j.category","GenerateToString");  prop.addProperty(RuntimeConstants.RESOURCE_LOADER,"includes");  prop.addProperty("includes.resource.loader.class",VelocityIncludesClassLoader.class.getName());  VelocityEngine velocity=new VelocityEngine();  velocity.setExtendedProperties(prop);  velocity.init();  return velocity;}  }
class C{  public DisruptionSwarm(String unlocalizedName,DeityType deity,Class<? extends EntityLivingBase>... entities){  super(unlocalizedName,deity);  this.entities=entities;}  }
class C{  public static final boolean isWhitespace(char ch){  return ch == ' ' || ch == '\t';}  }
class C{  public Query appendIf(final String name,final Integer value) throws UnsupportedEncodingException {  if (value != null) {    append(name,value.toString());  }  return this;}  }
class C{  public boolean hasAttribute(AttributeKey<?> childKey){  return hasAttribute(childKey.getId());}  }
class C{  public LinkOMGraphicList(){  super(10);}  }
class C{  private boolean isOnBlockList(WebsitePreference website){  if (mCategory.showCookiesSites()) {    return website.site().getCookiePermission() == ContentSetting.BLOCK;  } else   if (mCategory.showCameraSites()) {    return website.site().getCameraPermission() == ContentSetting.BLOCK;  } else   if (mCategory.showFullscreenSites()) {    return website.site().getFullscreenPermission() == ContentSetting.ASK;  } else   if (mCategory.showGeolocationSites()) {    return website.site().getGeolocationPermission() == ContentSetting.BLOCK;  } else   if (mCategory.showJavaScriptSites()) {    return website.site().getJavaScriptPermission() == ContentSetting.BLOCK;  } else   if (mCategory.showMicrophoneSites()) {    return website.site().getMicrophonePermission() == ContentSetting.BLOCK;  } else   if (mCategory.showPopupSites()) {    return website.site().getPopupPermission() == ContentSetting.BLOCK;  } else   if (mCategory.showNotificationsSites()) {    return website.site().getPushNotificationPermission() == ContentSetting.BLOCK;  } else   if (mCategory.showProtectedMediaSites()) {    return website.site().getProtectedMediaIdentifierPermission() == ContentSetting.BLOCK;  }  return false;}  }
class C{  public void remove(int row){  DataChangeEvent[] events;synchronized (rows) {    Row r=new Row(this,row);    events=new DataChangeEvent[getColumnCount()];    for (int col=0; col < events.length; col++) {      events[col]=new DataChangeEvent(this,col,row,r.get(col),null);    }    rows.remove(row);  }  notifyDataRemoved(events);}  }
class C{  public boolean canTraverseOutsideSubtree(){  return super.canTraverseOutsideSubtree() ? true : m_arg1.canTraverseOutsideSubtree();}  }
class C{  protected ImplementationFactory(){}  }
class C{  protected void heapifyUp(int pos,E elem){  assert (pos < size && pos >= 0);  if (comparator != null) {    heapifyUpComparator(pos,elem);  } else {    heapifyUpComparable(pos,elem);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:38.957 -0500",hash_original_method="0FB069D8C375377E937B40F8D8C213ED",hash_generated_method="BAC494EA4140FA064A4C6448498E2454") public Switch(Context context,AttributeSet attrs){  this(context,attrs,com.android.internal.R.attr.switchStyle);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.385 -0500",hash_original_method="61A725C4B04EDED5F335FC945F33D736",hash_generated_method="28B8F969BFA6773BFE7CC57387648DD2") public static int toTitleCase(int codePoint){  return toTitleCaseImpl(codePoint);}  }
class C{  public void startActivities(Bundle options){  startActivities(options,new UserHandle(UserHandle.myUserId()));}  }
class C{  private static boolean checkName(EditableResources r,String name){  for (  String n : r.getResourceNames()) {    if (n.equals(name)) {      return true;    }  }  return false;}  }
class C{  public void add(Permission permission){synchronized (this) {    permsMap.put(permission,permission);  }}  }
class C{  protected void processCloudletStatus(SimEvent ev){  int cloudletId=0;  int userId=0;  int vmId=0;  int status=-1;  try {    int data[]=(int[])ev.getData();    cloudletId=data[0];    userId=data[1];    vmId=data[2];    status=getVmAllocationPolicy().getHost(vmId,userId).getVm(vmId,userId).getCloudletScheduler().getCloudletStatus(cloudletId);  } catch (  ClassCastException c) {    try {      Cloudlet cl=(Cloudlet)ev.getData();      cloudletId=cl.getCloudletId();      userId=cl.getUserId();      status=getVmAllocationPolicy().getHost(vmId,userId).getVm(vmId,userId).getCloudletScheduler().getCloudletStatus(cloudletId);    } catch (    Exception e) {      Log.printConcatLine(getName(),": Error in processing CloudSimTags.CLOUDLET_STATUS");      Log.printLine(e.getMessage());      return;    }  }catch (  Exception e) {    Log.printConcatLine(getName(),": Error in processing CloudSimTags.CLOUDLET_STATUS");    Log.printLine(e.getMessage());    return;  }  int[] array=new int[3];  array[0]=getId();  array[1]=cloudletId;  array[2]=status;  int tag=CloudSimTags.CLOUDLET_STATUS;  sendNow(userId,tag,array);}  }
class C{  public void handleElement(BridgeContext ctx,Element e){  UserAgent ua=ctx.getUserAgent();  ua.handleElement(e,Boolean.TRUE);  if (ctx.isDynamic()) {    SVGDescriptiveElementBridge b;    b=(SVGDescriptiveElementBridge)getInstance();    b.theElt=e;    b.parent=(Element)e.getParentNode();    b.theCtx=ctx;    ((SVGOMElement)e).setSVGContext(b);  }}  }
class C{  public boolean isLabelRendered(){  return !isInputRendered();}  }
class C{  public Object readObject(Class cl) throws IOException {  if (cl == null || cl == Object.class)   return readObject();  int tag=read();switch (tag) {case 'N':    return null;case 'M':{    String type=readType();    if ("".equals(type)) {      Deserializer reader;      reader=_serializerFactory.getDeserializer(cl);      return reader.readMap(this);    } else {      Deserializer reader;      reader=_serializerFactory.getObjectDeserializer(type);      return reader.readMap(this);    }  }case 'V':{  String type=readType();  int length=readLength();  Deserializer reader;  reader=_serializerFactory.getObjectDeserializer(type);  if (cl != reader.getType() && cl.isAssignableFrom(reader.getType()))   return reader.readList(this,length);  reader=_serializerFactory.getDeserializer(cl);  Object v=reader.readList(this,length);  return v;}case 'R':{int ref=parseInt();return _refs.get(ref);}case 'r':{String type=readType();String url=readString();return resolveRemote(type,url);}}_peek=tag;Object value=_serializerFactory.getDeserializer(cl).readObject(this);return value;}  }
class C{  public static LuaTable createMetatable(Class<? extends LibFunction> libClass){  LuaTable result=AppCache.getCache(CACHE_METATABLES).get(libClass);  if (result == null) {    LuaTable libTable=null;    if (LuaViewConfig.isUseNoReflection()) {      final List<String> methodNames=getMapperMethodNames(libClass);      libTable=LuaViewManager.bind(libClass,methodNames);    } else {      final List<Method> methods=getMapperMethods(libClass);      libTable=LuaViewManager.bindMethods(libClass,methods);    }    result=LuaValue.tableOf(new LuaValue[]{LuaValue.INDEX,libTable,LuaValue.NEWINDEX,new NewIndexFunction(libTable)});    AppCache.getCache(CACHE_METATABLES).put(libClass,result);  }  return result;}  }
class C{  public synchronized void rename(String name,AddressbookEntry entry){  entries.remove(StringUtil.toLowerCase(name));  set(entry);}  }
class C{  public int lastIndexOf(Object o){  int index=size;  for (Entry e=header.previous; e != header; e=e.previous) {    index--;    if (o == e.element) {      return index;    }  }  return -1;}  }
class C{  public void addCheckingPath(TreePath path){  getCheckingModel().addCheckingPath(path);}  }
class C{  public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  public synchronized void pvChanged(PvChangeEvent event){  Object key;  int rowId;  try {    if (event.isChildEvent()) {      key=String.valueOf(event.getValue());    } else {      key=event.getKey();    }    rowId=key != null ? Arrays.binarySearch(keys,key) : 0;switch (event.getType()) {case PvChangeEvent.PV_CONFIRMED:case PvChangeEvent.PV_MODIFIED:case PvChangeEvent.PV_MANUAL_MOD:      fireTableRowsUpdated(rowId,rowId);    break;case PvChangeEvent.PV_ADDED:  if (pv.size() == 1) {    setProcessVar(pv);  } else {    updateKeys(pv);    fireTableRowsInserted(rowId,rowId);  }break;case PvChangeEvent.PV_DELETED:updateKeys(pv);fireTableRowsDeleted(rowId,rowId);break;case PvChangeEvent.PV_CLEARED:if (keys.length > 0) {updateKeys(pv);}fireTableStructureChanged();break;}} catch (Exception ex) {ex.printStackTrace();}}  }
class C{  public MetadataHelper build(){  if (this.keyStore == null) {    this.keyStore=VecsKeyStore.getInstance();  }  StringBuilder sb=new StringBuilder();  sb.append("https://");  sb.append(this.domainControllerFQDN);  sb.append(":");  sb.append(String.valueOf(this.domainControllerPort));  sb.append("/openidconnect/");  sb.append(this.tenant);  sb.append("/.well-known/openid-configuration");  try {    this.metadataURI=URIUtils.parseURI(sb.toString());  } catch (  ParseException e) {    throw new IllegalArgumentException("Failed to build metadata endpoint URI: " + e.getMessage(),e);  }  return new MetadataHelper(this);}  }
class C{  public boolean meetsInput(ChemicalPairInput input){  return meets(input) || meets(input.swap());}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("kdf: 0x");  buffer.append(Functions.toFullHexString(kdf));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pOtherInfoLen: ");  buffer.append(pOtherInfo.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pOtherInfo: ");  buffer.append(Functions.toHexString(pOtherInfo));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPublicDataLen: ");  buffer.append(pPublicData.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPublicData: ");  buffer.append(Functions.toHexString(pPublicData));  return buffer.toString();}  }
class C{  public static short parseShort(String s){  s=trimPlusSign(s);  return Short.parseShort(s);}  }
class C{  protected void dockEast(DockWrapper wrapper,int idx){  dock(east,wrapper,idx);}  }
class C{  @Override @Interruptible public void finalizeStaticSpaceMap(){  Address startAddress=Space.getDiscontigStart();  int firstChunk=getChunkIndex(startAddress);  int lastChunk=getChunkIndex(Space.getDiscontigEnd());  int unavailStartChunk=lastChunk + 1;  int trailingChunks=VMLayoutConstants.MAX_CHUNKS - unavailStartChunk;  int pages=(1 + lastChunk - firstChunk) * VMLayoutConstants.PAGES_IN_CHUNK;  globalPageMap.resizeFreeList(pages,pages);  for (int pr=0; pr < sharedDiscontigFLCount; pr++)   sharedFLMap[pr].resizeFreeList(startAddress);  int allocedChunk=regionMap.alloc(firstChunk);  for (int chunkIndex=firstChunk; chunkIndex <= lastChunk; chunkIndex++)   allocedChunk=regionMap.alloc(1);  allocedChunk=regionMap.alloc(trailingChunks);  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(allocedChunk == unavailStartChunk);  int firstPage=0;  for (int chunkIndex=firstChunk; chunkIndex <= lastChunk; chunkIndex++) {    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(spaceMap[chunkIndex] == null);    totalAvailableDiscontiguousChunks++;    regionMap.free(chunkIndex);    globalPageMap.setUncoalescable(firstPage);    int allocedPages=globalPageMap.alloc(VMLayoutConstants.PAGES_IN_CHUNK);    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(allocedPages == firstPage);    firstPage+=VMLayoutConstants.PAGES_IN_CHUNK;  }  finalized=true;}  }
class C{  public static FXGMatrix convertToMatrix(double scaleX,double scaleY,double rotation,double tx,double ty){  FXGMatrix m=new FXGMatrix();  m.scale(scaleX,scaleY);  m.rotate(rotation);  m.translate(tx,ty);  return m;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ANNOTABLE_EXPRESSION__ANNOTATION_LIST:    return basicSetAnnotationList(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Inline @Override public final void shortWrite(ObjectReference objref,short value,Word offset,Word location,int mode){  Magic.setShortAtOffset(objref.toObject(),offset.toOffset(),value,location.toInt());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.820 -0500",hash_original_method="931F7A2FD2648B2A1C28EDF8D67E709D",hash_generated_method="118C5D145E944EE3252D65136444C4AC") public void endElement(String uri,String localName,String qName) throws SAXException {  if (documentHandler != null)   documentHandler.endElement(qName);}  }
class C{  public final void dispatchCharactersEvents(int nodeHandle,ContentHandler ch,boolean normalize) throws SAXException {  int identity=makeNodeIdentity(nodeHandle);  if (identity == DTM.NULL)   return;  int type=_type2(identity);  if (type == DTM.ELEMENT_NODE || type == DTM.DOCUMENT_NODE) {    int startNode=identity;    identity=_firstch2(identity);    if (DTM.NULL != identity) {      int offset=-1;      int length=0;      do {        type=_exptype2(identity);        if (type == DTM.TEXT_NODE || type == DTM.CDATA_SECTION_NODE) {          int dataIndex=m_dataOrQName.elementAt(identity);          if (dataIndex >= 0) {            if (-1 == offset) {              offset=dataIndex >>> TEXT_LENGTH_BITS;            }            length+=dataIndex & TEXT_LENGTH_MAX;          } else {            if (-1 == offset) {              offset=m_data.elementAt(-dataIndex);            }            length+=m_data.elementAt(-dataIndex + 1);          }        }        identity++;      } while (_parent2(identity) >= startNode);      if (length > 0) {        if (normalize)         m_chars.sendNormalizedSAXcharacters(ch,offset,length); else         m_chars.sendSAXcharacters(ch,offset,length);      }    }  } else   if (DTM.TEXT_NODE == type || DTM.CDATA_SECTION_NODE == type) {    int dataIndex=m_dataOrQName.elementAt(identity);    if (dataIndex >= 0) {      if (normalize)       m_chars.sendNormalizedSAXcharacters(ch,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX); else       m_chars.sendSAXcharacters(ch,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX);    } else {      if (normalize)       m_chars.sendNormalizedSAXcharacters(ch,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1)); else       m_chars.sendSAXcharacters(ch,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1));    }  } else {    int dataIndex=m_dataOrQName.elementAt(identity);    if (dataIndex < 0) {      dataIndex=-dataIndex;      dataIndex=m_data.elementAt(dataIndex + 1);    }    String str=(String)m_values.elementAt(dataIndex);    if (normalize)     FastStringBuffer.sendNormalizedSAXcharacters(str.toCharArray(),0,str.length(),ch); else     ch.characters(str.toCharArray(),0,str.length());  }}  }
class C{  public void run(){  try {    r.run();  } catch (  Throwable err) {    err.printStackTrace();    handleException(err);  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.errorIndicatorPaint,stream);  SerialUtilities.writeStroke(this.errorIndicatorStroke,stream);}  }
class C{  @Override public String toJSONString(){  throw new RuntimeException("toJSONString not implemented");}  }
class C{  private void sampleBranchColourings(DefaultTreeColouring colouring,Tree tree,NodeRef node,ColourChangeMatrix mm){  if (!tree.isRoot(node)) {    NodeRef parent=tree.getParent(node);    int parentColour=getColour(parent);    int childColour=getColour(node);    double parentHeight=tree.getNodeHeight(parent);    double childHeight=tree.getNodeHeight(node);    DefaultBranchColouring history=sampleConditionalBranchColouring(parentColour,parentHeight,childColour,childHeight,mm);    colouring.setBranchColouring(node,history);  }  for (int i=0; i < tree.getChildCount(node); i++) {    sampleBranchColourings(colouring,tree,tree.getChild(node,i),mm);  }}  }
class C{  public void writeArrayValueSeparator(JsonGenerator jg) throws IOException, JsonGenerationException {  jg.writeRaw(',');  _arrayIndenter.writeIndentation(jg,_nesting);}  }
class C{  void addPropertyValueAliases(String propertyAlias,String propertyValue,Set<String> propertyValueAliases){  String propertyName=getCanonicalPropertyName(propertyAlias);  propertyValue=normalize(propertyValue);  propertyValueAliases.add(propertyValue);  Map<String,Set<String>> propertyValue2Aliases=allPropertyValueAliases.get(propertyName);  if (null == propertyValue2Aliases) {    propertyValue2Aliases=new HashMap<String,Set<String>>();    allPropertyValueAliases.put(propertyName,propertyValue2Aliases);  }  propertyValue2Aliases.put(propertyValue,propertyValueAliases);  Map<String,String> aliasMap=propertyValueAlias2CanonicalValue.get(propertyName);  if (null == aliasMap) {    aliasMap=new HashMap<String,String>();    propertyValueAlias2CanonicalValue.put(propertyName,aliasMap);  }  for (  String propertyValueAlias : propertyValueAliases) {    propertyValueAlias=normalize(propertyValueAlias);    aliasMap.put(propertyValueAlias,propertyValue);  }}  }
class C{  @Override public void onCopySuggestion(String text){  mUrlInput.setText(text,true);}  }
class C{  @Override public void watch(@Service DatabaseWatch watch,String sql,Result<Cancel> result,Object... args){  _kraken.query(sql,result.then(null));}  }
class C{  @Override public boolean isEmpty(){  return map.isEmpty();}  }
class C{  public Builder put(String setting,double value){  put(setting,String.valueOf(value));  return this;}  }
class C{  private void checkDeleteable(){  boolean oldIsDeleteable=isDeleteable;  isDeleteable=isDeleteEnabled();  if (oldIsDeleteable != isDeleteable) {    fireEnablementChanged(DELETE);  }}  }
class C{  @After public void tearDown() throws Exception {  if (this.system != null) {    this.system.disconnect();  }  this.system=null;}  }
class C{  @Override public boolean insertsAreDetected(int type){  debugCodeCall("insertsAreDetected",type);  return false;}  }
class C{  private int remoteDeletePois(List<Poi> pois,String changeSetId){  int count=0;  for (  Poi poi : pois) {    if (remoteDeletePoi(poi,changeSetId)) {      count++;    }  }  return count;}  }
class C{  public static void dilute(final Scenario scenario,final Coord center,final double radius){  log.info("Start dilution with center " + center + " and radius "+ radius);  final Set<Id<Person>> personsToKeep=new HashSet<>();  fillSetWithIntersectingPersons(personsToKeep,scenario,center,radius);  fillSetWithAltersOfSet(personsToKeep,scenario);  final Collection<Id<Person>> pruned=prunePopulation(scenario,personsToKeep);  pruneSocialNetwork(pruned,scenario);  log.info("Finished dilution.");}  }
class C{  public void verify(PublicKey publicKey,int responseCode,String signedData,String signature){  String userId=null;  ResponseData data=null;  if (responseCode == LICENSED || responseCode == NOT_LICENSED || responseCode == LICENSED_OLD_KEY) {    try {      Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);      sig.initVerify(publicKey);      sig.update(signedData.getBytes());      if (!sig.verify(Base64.decode(signature))) {        Log.e(TAG,"Signature verification failed.");        handleInvalidResponse();        return;      }    } catch (    NoSuchAlgorithmException e) {      throw new RuntimeException(e);    }catch (    InvalidKeyException e) {      handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PUBLIC_KEY);      return;    }catch (    SignatureException e) {      throw new RuntimeException(e);    }catch (    Base64DecoderException e) {      Log.e(TAG,"Could not Base64-decode signature.");      handleInvalidResponse();      return;    }    try {      data=ResponseData.parse(signedData);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Could not parse response.");      handleInvalidResponse();      return;    }    if (data.responseCode != responseCode) {      Log.e(TAG,"Response codes don't match.");      handleInvalidResponse();      return;    }    if (data.nonce != mNonce) {      Log.e(TAG,"Nonce doesn't match.");      handleInvalidResponse();      return;    }    if (!data.packageName.equals(mPackageName)) {      Log.e(TAG,"Package name doesn't match.");      handleInvalidResponse();      return;    }    if (!data.versionCode.equals(mVersionCode)) {      Log.e(TAG,"Version codes don't match.");      handleInvalidResponse();      return;    }    userId=data.userId;    if (TextUtils.isEmpty(userId)) {      Log.e(TAG,"User identifier is empty.");      handleInvalidResponse();      return;    }  }switch (responseCode) {case LICENSED:case LICENSED_OLD_KEY:    int limiterResponse=mDeviceLimiter.isDeviceAllowed(userId);  handleResponse(limiterResponse,data);break;case NOT_LICENSED:handleResponse(Policy.NOT_LICENSED,data);break;case ERROR_CONTACTING_SERVER:Log.w(TAG,"Error contacting licensing server.");handleResponse(Policy.RETRY,data);break;case ERROR_SERVER_FAILURE:Log.w(TAG,"An error has occurred on the licensing server.");handleResponse(Policy.RETRY,data);break;case ERROR_OVER_QUOTA:Log.w(TAG,"Licensing server is refusing to talk to this device, over quota.");handleResponse(Policy.RETRY,data);break;case ERROR_INVALID_PACKAGE_NAME:handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PACKAGE_NAME);break;case ERROR_NON_MATCHING_UID:handleApplicationError(LicenseCheckerCallback.ERROR_NON_MATCHING_UID);break;case ERROR_NOT_MARKET_MANAGED:handleApplicationError(LicenseCheckerCallback.ERROR_NOT_MARKET_MANAGED);break;default :Log.e(TAG,"Unknown response code for license check.");handleInvalidResponse();}}  }
class C{  public static DoubleMatrix2D div(DoubleMatrix2D A,DoubleMatrix2D B){  return A.assign(B,F.div);}  }
class C{  public void testNegative(){  NumberFormat nf=new DecimalFormat("0");  RelativeDateFormat df1=new RelativeDateFormat();  df1.setSecondFormatter(nf);  assertEquals("-0h0m1s",df1.format(new Date(-1000L)));}  }
class C{  public List<List<String>> findLadders(String start,String end,Set<String> dict){  List<List<String>> res=new ArrayList<List<String>>();  Map<String,List<String>> map=new HashMap<String,List<String>>();  Map<String,Integer> dist=new HashMap<String,Integer>();  bfs(map,dist,start,end,dict);  dfs(res,new LinkedList<String>(),end,start,dist,map);  return res;}  }
class C{  public static String name(){  return "Name Not Set";}  }
class C{  private static void adjustPointersInDuplicatedCode(IR ir,HashMap<BasicBlock,BasicBlock> origToDupMap){  for (  BasicBlock dupBlock : origToDupMap.values()) {    for (Enumeration<BasicBlock> out=dupBlock.getNormalOut(); out.hasMoreElements(); ) {      BasicBlock origSucc=out.nextElement();      BasicBlock dupSucc=origToDupMap.get(origSucc);      if (dupSucc != null) {        dupBlock.redirectOuts(origSucc,dupSucc,ir);        if (DEBUG) {          VM.sysWrite("Source: " + dupBlock + "\n");          VM.sysWrite("============= FROM " + origSucc + " =============\n");          VM.sysWrite("============= TO " + dupSucc + "=============\n");        }      } else {        if (DEBUG) {          VM.sysWrite("Not adjusting pointer from " + dupBlock + " to "+ origSucc+ " because dupSucc is null\n");        }      }    }  }}  }
class C{  public String qty(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  int M_Product_ID=Env.getContextAsInt(ctx,WindowNo,"M_Product_ID");  if (steps)   log.warning("init - M_Product_ID=" + M_Product_ID + " - ");  BigDecimal QtyOrdered=Env.ZERO;  BigDecimal QtyEntered, PriceActual, PriceEntered;  if (M_Product_ID == 0) {    QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");    QtyOrdered=QtyEntered;    mTab.setValue("QtyOrdered",QtyOrdered);  } else   if (mField.getColumnName().equals("C_UOM_ID")) {    int C_UOM_To_ID=((Integer)value).intValue();    QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");    BigDecimal QtyEntered1=QtyEntered.setScale(MUOM.getPrecision(ctx,C_UOM_To_ID),BigDecimal.ROUND_HALF_UP);    if (QtyEntered.compareTo(QtyEntered1) != 0) {      log.fine("Corrected QtyEntered Scale UOM=" + C_UOM_To_ID + "; QtyEntered="+ QtyEntered+ "->"+ QtyEntered1);      QtyEntered=QtyEntered1;      mTab.setValue("QtyEntered",QtyEntered);    }    QtyOrdered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,QtyEntered);    if (QtyOrdered == null)     QtyOrdered=QtyEntered;    boolean conversion=QtyEntered.compareTo(QtyOrdered) != 0;    PriceActual=(BigDecimal)mTab.getValue("PriceActual");    PriceEntered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,PriceActual);    if (PriceEntered == null)     PriceEntered=PriceActual;    log.fine("UOM=" + C_UOM_To_ID + ", QtyEntered/PriceActual="+ QtyEntered+ "/"+ PriceActual+ " -> "+ conversion+ " QtyOrdered/PriceEntered="+ QtyOrdered+ "/"+ PriceEntered);    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("QtyOrdered",QtyOrdered);    mTab.setValue("PriceEntered",PriceEntered);  } else   if (mField.getColumnName().equals("QtyEntered")) {    int C_UOM_To_ID=Env.getContextAsInt(ctx,WindowNo,"C_UOM_ID");    QtyEntered=(BigDecimal)value;    BigDecimal QtyEntered1=QtyEntered.setScale(MUOM.getPrecision(ctx,C_UOM_To_ID),BigDecimal.ROUND_HALF_UP);    if (QtyEntered.compareTo(QtyEntered1) != 0) {      log.fine("Corrected QtyEntered Scale UOM=" + C_UOM_To_ID + "; QtyEntered="+ QtyEntered+ "->"+ QtyEntered1);      QtyEntered=QtyEntered1;      mTab.setValue("QtyEntered",QtyEntered);    }    QtyOrdered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,QtyEntered);    if (QtyOrdered == null)     QtyOrdered=QtyEntered;    boolean conversion=QtyEntered.compareTo(QtyOrdered) != 0;    log.fine("UOM=" + C_UOM_To_ID + ", QtyEntered="+ QtyEntered+ " -> "+ conversion+ " QtyOrdered="+ QtyOrdered);    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("QtyOrdered",QtyOrdered);  } else   if (mField.getColumnName().equals("QtyOrdered")) {    int C_UOM_To_ID=Env.getContextAsInt(ctx,WindowNo,"C_UOM_ID");    QtyOrdered=(BigDecimal)value;    int precision=MProduct.get(ctx,M_Product_ID).getUOMPrecision();    BigDecimal QtyOrdered1=QtyOrdered.setScale(precision,BigDecimal.ROUND_HALF_UP);    if (QtyOrdered.compareTo(QtyOrdered1) != 0) {      log.fine("Corrected QtyOrdered Scale " + QtyOrdered + "->"+ QtyOrdered1);      QtyOrdered=QtyOrdered1;      mTab.setValue("QtyOrdered",QtyOrdered);    }    QtyEntered=MUOMConversion.convertProductTo(ctx,M_Product_ID,C_UOM_To_ID,QtyOrdered);    if (QtyEntered == null)     QtyEntered=QtyOrdered;    boolean conversion=QtyOrdered.compareTo(QtyEntered) != 0;    log.fine("UOM=" + C_UOM_To_ID + ", QtyOrdered="+ QtyOrdered+ " -> "+ conversion+ " QtyEntered="+ QtyEntered);    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("QtyEntered",QtyEntered);  } else {    QtyOrdered=(BigDecimal)mTab.getValue("QtyOrdered");  }  if (M_Product_ID != 0 && Env.isSOTrx(ctx,WindowNo) && QtyOrdered.signum() > 0) {    MProduct product=MProduct.get(ctx,M_Product_ID);    if (product.isStocked()) {      int M_Warehouse_ID=Env.getContextAsInt(ctx,WindowNo,"M_Warehouse_ID");      int M_AttributeSetInstance_ID=Env.getContextAsInt(ctx,WindowNo,"M_AttributeSetInstance_ID");      BigDecimal available=MStorage.getQtyAvailable(M_Warehouse_ID,M_Product_ID,M_AttributeSetInstance_ID,null);      if (available == null)       available=Env.ZERO;      if (available.signum() == 0)       mTab.fireDataStatusEEvent("NoQtyAvailable","0",false); else       if (available.compareTo(QtyOrdered) < 0)       mTab.fireDataStatusEEvent("InsufficientQtyAvailable",available.toString(),false); else {        Integer C_OrderLine_ID=(Integer)mTab.getValue("C_OrderLine_ID");        if (C_OrderLine_ID == null)         C_OrderLine_ID=new Integer(0);        BigDecimal notReserved=MOrderLine.getNotReserved(ctx,M_Warehouse_ID,M_Product_ID,M_AttributeSetInstance_ID,C_OrderLine_ID.intValue());        if (notReserved == null)         notReserved=Env.ZERO;        BigDecimal total=available.subtract(notReserved);        if (total.compareTo(QtyOrdered) < 0) {          String info=Msg.parseTranslation(ctx,"@QtyAvailable@=" + available + "  -  @QtyNotReserved@="+ notReserved+ "  =  "+ total);          mTab.fireDataStatusEEvent("InsufficientQtyAvailable",info,false);        }      }    }  }  return "";}  }
class C{  protected void notifyIdle(long idlingTime){  if (idlingTime > 1000 && this.needToSave)   saveIndexes();}  }
class C{  public void overrideDuration(int duration){  overriddenDuration=duration;}  }
class C{  public static cuDoubleComplex cuCadd(cuDoubleComplex x,cuDoubleComplex y){  return cuCmplx(cuCreal(x) + cuCreal(y),cuCimag(x) + cuCimag(y));}  }
class C{  private void writeRow(List<String> row) throws IOException {  for (int i=0; i < row.size(); i++) {    if (i > 0)     writer.append(fieldSeparator);    String value=row.get(i);    if (value == null) {      if (this.nullPolicy == NullPolicy.emptyString)       writer.append(processString("")); else       if (nullPolicy == NullPolicy.skip)       writer.append(null); else       writer.append(nullValue);    } else     writer.append(row.get(i));  }  writer.append(recordSeparator);}  }
class C{  GridLuceneFile(GridLuceneDirectory dir){  this.dir=dir;  filesCnt.incrementAndGet();}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public ClassCastException(){}  }
class C{  public Object clone() throws CloneNotSupportedException {  BeanMap newMap=(BeanMap)super.clone();  if (bean == null) {    return newMap;  }  Object newBean=null;  Class<?> beanClass=bean.getClass();  try {    newBean=beanClass.newInstance();  } catch (  Exception e) {    throw new CloneNotSupportedException("Unable to instantiate the underlying bean \"" + beanClass.getName() + "\": "+ e);  }  try {    newMap.setBean(newBean);  } catch (  Exception exception) {    throw new CloneNotSupportedException("Unable to set bean in the cloned bean map: " + exception);  }  try {    Iterator<String> readableKeys=readMethods.keySet().iterator();    while (readableKeys.hasNext()) {      String key=readableKeys.next();      if (getWriteMethod(key) != null) {        newMap.put(key,get(key));      }    }  } catch (  Exception exception) {    throw new CloneNotSupportedException("Unable to copy bean values to cloned bean map: " + exception);  }  return newMap;}  }
class C{  @Override public void draw(GL2 gl){  super.fill(gl);}  }
class C{  public T caseEnumMappingModel(EnumMappingModel object){  return null;}  }
class C{  public static PartialDate parse(String string){  int t=string.indexOf('T');  String beforeT, afterT;  if (t < 0) {    beforeT=string;    afterT=null;  } else {    beforeT=string.substring(0,t);    afterT=(t < string.length() - 1) ? string.substring(t + 1) : null;  }  Builder builder=new Builder();  boolean success;  if (afterT == null) {    success=parseDate(beforeT,builder) || parseTime(beforeT,builder);  } else   if (beforeT.length() == 0) {    success=parseTime(afterT,builder);  } else {    success=parseDate(beforeT,builder) && parseTime(afterT,builder);  }  if (!success) {    throw Messages.INSTANCE.getIllegalArgumentException(36,string);  }  return builder.build();}  }
class C{  public XingApi addAuthErrorCallback(AuthErrorCallback errorCallback){  authErrorCallbacks.add(errorCallback);  return this;}  }
class C{  private List<VPlexInitiatorInfo> findInitiatorsOnCluster(String clusterName,List<PortInfo> initiatorPortInfo,List<PortInfo> unfoundInitiatorPortInfo) throws VPlexApiException {  List<VPlexInitiatorInfo> initiatorInfoList=new ArrayList<VPlexInitiatorInfo>();  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexInitiatorInfo> clusterInitiatorInfoList=discoveryMgr.getInitiatorInfoForCluster(clusterName);  for (  PortInfo portInfo : initiatorPortInfo) {    String portWWN=portInfo.getPortWWN();    for (    VPlexInitiatorInfo clusterInitiatorInfo : clusterInitiatorInfoList) {      if (portWWN.equals(clusterInitiatorInfo.getPortWwn())) {        initiatorInfoList.add(clusterInitiatorInfo);        if (unfoundInitiatorPortInfo != null) {          unfoundInitiatorPortInfo.remove(portInfo);        }        String portName=portInfo.getName();        if ((portName != null) && (portName.length() != 0)) {          clusterInitiatorInfo.setRegistrationName(portName);        } else {          clusterInitiatorInfo.setRegistrationName(VPlexApiConstants.REGISTERED_INITIATOR_PREFIX + clusterInitiatorInfo.getPortWwnRaw());        }        Initiator_Type initiatorType=Initiator_Type.valueOfType(portInfo.getType());        if (initiatorType == null) {          s_logger.info("Initiator port type {} not found, using default",portInfo.getType());          initiatorType=Initiator_Type.DEFAULT;        }        clusterInitiatorInfo.setInitiatorType(initiatorType);        break;      }    }  }  return initiatorInfoList;}  }
class C{  @Override public int position(){  return position;}  }
class C{  public int numCommonMantissaBits(DoubleBits db){  for (int i=0; i < 52; i++) {    int bitIndex=i + 12;    if (getBit(i) != db.getBit(i))     return i;  }  return 52;}  }
class C{  public ChartViewerSkin(ChartViewer control){  super(control);  getChildren().add(createNode(control));  this.zoomRectangle=new Rectangle(0,0,new Color(0,0,1,0.25));  this.zoomRectangle.setManaged(false);  this.zoomRectangle.setVisible(false);  getChildren().add(this.zoomRectangle);}  }
class C{  public void removeSound(String soundName){  if (manager.containSound(soundName)) {    musicList.remove(soundName);  }}  }
class C{  @Override public synchronized void reset() throws IOException {  in.reset();  pos=mark;}  }
class C{  public boolean chooseOpsOption(MenuItem item){switch (item.getItemId()) {case R.id.simpleImpl:    getOps().setContactsOpsImplType(ContactsOps.ContactsOpsImplType.SIMPLE);  Utils.showToast(this,"ContactsOpsImplSimple selected");break;case R.id.asyncImpl:getOps().setContactsOpsImplType(ContactsOps.ContactsOpsImplType.ASYNC);Utils.showToast(this,"ContactsOpsImplAsync selected");break;case R.id.loaderManagerImpl:getOps().setContactsOpsImplType(ContactsOps.ContactsOpsImplType.LOADER_MANAGER);Utils.showToast(this,"ContactsOpsImplLoaderManager selected");break;}getOps().onConfiguration(this,true);return true;}  }
class C{  @Override public void paintComponent(Graphics g){  super.paintComponent(g);  Graphics2D graphics=(Graphics2D)g;  graphics.setBackground(mColorSpectrumBackground);  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);  graphics.setRenderingHints(renderHints);  drawFrequencies(graphics);  drawCursor(graphics);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a, b, c: ");  Rational a=new Rational(input.nextLong(),1);  Rational b=new Rational(input.nextLong(),1);  Rational c=new Rational(input.nextLong(),1);  Rational h=new Rational(-b.getNumerator(),2 * a.getNumerator());  Rational k=(a.multiply(h.multiply(h)).add(b.multiply(h))).add(c);  System.out.println("h is " + h + " k is "+ k);}  }
class C{  protected synchronized void incrementFailed(int hostNum){  m_failedCount++;  m_remoteHostFailureCounts[hostNum]++;}  }
class C{  @Override protected void validate(){  failIf(value <= 0,"Can not have an empty nursery");}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static int partition(Object ar[],int left,int right,int pivotIndex,Comparator comparator){  Object pivot=ar[pivotIndex];  swap(ar,right,pivotIndex);  int store=left;  for (int idx=left; idx < right; idx++) {    if (comparator.compare(ar[idx],pivot) <= 0) {      swap(ar,idx,store);      store++;    }  }  swap(ar,right,store);  return store;}  }
class C{  public void putLong(String key,long value){  editor.putLong(key,value);  editor.commit();}  }
class C{  public static String multiply(CharSequence self,Number factor){  int size=factor.intValue();  if (size == 0)   return ""; else   if (size < 0) {    throw new IllegalArgumentException("multiply() should be called with a number of 0 or greater not: " + size);  }  StringBuilder answer=new StringBuilder(self);  for (int i=1; i < size; i++) {    answer.append(self);  }  return answer.toString();}  }
class C{  private static Result loginByFormRequest(){  Form<AuthInfo> authInfoForm=form(AuthInfo.class).bindFromRequest();  if (authInfoForm.hasErrors()) {    flash(Constants.WARNING,"user.login.required");    return badRequest(login.render("title.login",authInfoForm,null));  }  User sourceUser=User.findByLoginKey(authInfoForm.get().loginIdOrEmail);  if (isUseSignUpConfirm()) {    if (User.findByLoginId(sourceUser.loginId).state == UserState.LOCKED) {      flash(Constants.WARNING,"user.locked");      return redirect(getLoginFormURLWithRedirectURL());    }  }  if (User.findByLoginId(sourceUser.loginId).state == UserState.DELETED) {    flash(Constants.WARNING,"user.deleted");    return redirect(getLoginFormURLWithRedirectURL());  }  User authenticate=authenticateWithPlainPassword(sourceUser.loginId,authInfoForm.get().password);  if (!authenticate.isAnonymous()) {    addUserInfoToSession(authenticate);    if (authInfoForm.get().rememberMe) {      setupRememberMe(authenticate);    }    authenticate.lang=play.mvc.Http.Context.current().lang().code();    authenticate.update();    String redirectUrl=getRedirectURLFromParams();    if (StringUtils.isEmpty(redirectUrl)) {      return redirect(routes.Application.index());    } else {      return redirect(redirectUrl);    }  }  flash(Constants.WARNING,"user.login.invalid");  return redirect(routes.UserApp.loginForm());}  }
class C{  protected HashEntry<K,V> createEntry(final HashEntry<K,V> next,final int hashCode,final K key,final V value){  return new HashEntry<K,V>(next,hashCode,convertKey(key),value);}  }
class C{  private static String[] methodWithArrayResult(){  return new String[]{"valueA","valueB"};}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,R>QuintFunction<T3,T4,T5,T6,T7,R> partial7(final T1 t1,final T2 t2,final HeptFunction<T1,T2,T3,T4,T5,T6,T7,R> heptFunc){  return null;}  }
class C{  private static void showPreferenceWindow(final GUIFactory currentGUI){  properties=currentGUI.getProperties();  init(currentGUI);  loadSettings();  borderPane.setLeft(setupSideNavBar());  borderPane.setCenter(getGeneralContent());  borderPane.setBottom(setupBottomBar(currentGUI));  preferenceDialog=new FXDialog(null,Modality.APPLICATION_MODAL,borderPane,550,450);  preferenceDialog.setTitle(Messages.getMessage("PdfPreferences.windowTitle"));  preferenceDialog.show();}  }
class C{  public Element(ElKey key,List<Attribute> attrs,boolean empty,boolean optionalEndTag,boolean containsText,String domInterface){  assert key != null;  this.key_=key;  this.attrs_=Collections.unmodifiableList(Lists.newArrayList(attrs));  this.empty_=empty;  this.optionalEndTag_=optionalEndTag;  this.containsText_=containsText;  this.domInterface_=domInterface;}  }
class C{  public void internalAddButton(InlineMenuButton button){  row.buttons.add(button);}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  public void receiveErrorqueryCatalog(java.lang.Exception e){}  }
class C{  public void severe(String msg,Object... params){  log(Level.SEVERE,msg,params);}  }
class C{  private void cleanup(TestCase test){  Class<?> clazz=test.getClass();  while (clazz != TestCase.class) {    Field[] fields=clazz.getDeclaredFields();    for (int i=0; i < fields.length; i++) {      Field f=fields[i];      if (!f.getType().isPrimitive() && !Modifier.isStatic(f.getModifiers())) {        try {          f.setAccessible(true);          f.set(test,null);        } catch (        Exception ignored) {        }      }    }    clazz=clazz.getSuperclass();  }}  }
class C{  private HashMap<String,List<StoragePort>> discoverFcPorts(StorageSystem system,VNXeApiClient client,Map<String,URI> spIdMap) throws VNXeException {  HashMap<String,List<StoragePort>> storagePorts=new HashMap<String,List<StoragePort>>();  List<StoragePort> newStoragePorts=new ArrayList<StoragePort>();  List<StoragePort> existingStoragePorts=new ArrayList<StoragePort>();  _logger.info("Start FC storage port discovery for storage system {}",system.getId());  List<VNXeFCPort> ports=client.getAllFcPorts();  if (ports == null || ports.isEmpty()) {    _logger.info("No FC ports found for the system: {} ",system.getId());    storagePorts.put(NEW,newStoragePorts);    storagePorts.put(EXISTING,existingStoragePorts);    return storagePorts;  }  for (  VNXeFCPort fcPort : ports) {    StoragePort port=null;    VNXeBase spId=fcPort.getStorageProcessor();    if (spId == null) {      _logger.info("No storage processor info for the fcPort: {}",fcPort.getId());      continue;    }    String spIdStr=spId.getId();    URI haDomainUri=spIdMap.get(spIdStr);    if (haDomainUri == null) {      _logger.info("The sp {} has not been discovered.",spIdStr);      continue;    }    String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,fcPort.getWwn(),NativeGUIDGenerator.PORT);    URIQueryResultList results=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portNativeGuid),results);    Iterator<URI> it=results.iterator();    if (it.hasNext()) {      _logger.debug("cross verifying for duplicate port");      StoragePort tmpPort=_dbClient.queryObject(StoragePort.class,it.next());      _logger.info(String.format("Actual StorageDevice %s : PortGroup found for port %s - Actual PortGroup %s",system.getId(),tmpPort.getPortNetworkId(),tmpPort.getPortGroup()));      if (tmpPort.getStorageDevice().equals(system.getId()) && tmpPort.getPortGroup().equals(spIdStr)) {        port=tmpPort;        _logger.debug("found duplicate fc port {}",fcPort.getWwn());      }    }    if (port == null) {      port=new StoragePort();      port.setId(URIUtil.createId(StoragePort.class));      port.setLabel(portNativeGuid);      port.setTransportType("FC");      port.setNativeGuid(portNativeGuid);      port.setStorageDevice(system.getId());      port.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());      port.setPortName(fcPort.getId());      port.setPortNetworkId(fcPort.getPortWwn());      port.setPortGroup(spIdStr);      port.setStorageHADomain(haDomainUri);      _logger.info("Creating new storage port using NativeGuid : {}, WWN:",portNativeGuid,fcPort.getWwn());      newStoragePorts.add(port);    } else {      existingStoragePorts.add(port);    }    Health portHealth=fcPort.getHealth();    if (portHealth != null) {      int healthValue=portHealth.getValue();      if (healthValue == Health.HealthEnum.OK.getValue()) {        port.setOperationalStatus(StoragePort.OperationalStatus.OK.name());      } else {        port.setOperationalStatus(StoragePort.OperationalStatus.NOT_OK.name());      }    }    port.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());    port.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());  }  _logger.info("FC port discovery for storage system {} complete",system.getId());  storagePorts.put(NEW,newStoragePorts);  storagePorts.put(EXISTING,existingStoragePorts);  return storagePorts;}  }
class C{  public boolean isUsed(){  return used;}  }
class C{  public static Short valueOf(String string) throws NumberFormatException {  return valueOf(parseShort(string));}  }
class C{  public static void onPause(final Context context){  log.onPause(context);}  }
class C{  public void testToMonitorString(){  OlimexRfidProtocol instance=new OlimexRfidProtocol();  String expResult="Reply from Olimex reader. Tag read 020047C8C3";  assertEquals(expResult,instance.toMonitorString(msgStandalone));}  }
class C{  private boolean isGnome(){  String gdmSession=getSystemEnv("GDMSESSION");  if (gdmSession != null && gdmSession.toLowerCase().contains("gnome")) {    return true;  }  String desktopSession=getSystemEnv("DESKTOP_SESSION");  if (desktopSession != null && desktopSession.toLowerCase().contains("gnome")) {    return true;  }  String gnomeDesktopSessionId=getSystemEnv("GNOME_DESKTOP_SESSION_ID");  if (gnomeDesktopSessionId != null && gnomeDesktopSessionId.trim().length() > 0) {    return true;  }  return false;}  }
class C{  public void disconnectPort(AbstractPortController p){  istream=null;  ostream=null;  if (controller != p) {    log.warn("disconnectPort: disconnect called from non-connected SprogPortController");  }  controller=null;}  }
class C{  private FileChannel updateCache(String filePath){  FileChannel fileChannel=fileNameAndStreamCache.get(filePath);  try {    if (null == fileChannel) {      FileInputStream stream=new FileInputStream(filePath);      fileChannel=stream.getChannel();      fileNameAndStreamCache.put(filePath,fileChannel);    }  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return fileChannel;}  }
class C{  public HttpAuthenticationException(){  super();}  }
class C{  public boolean isNewerThan(Version version){  if (this.major > version.major) {    return true;  } else   if (this.major == version.major) {    return this.minor > version.minor || (this.minor == version.minor && this.patch > version.patch);  }  return false;}  }
class C{  public RosterEntry(Element e){  if (log.isDebugEnabled()) {    log.debug("ctor from element " + e);  }  Attribute a;  if ((a=e.getAttribute("id")) != null) {    _id=a.getValue();  } else {    log.warn("no id attribute in locomotive element when reading roster");  }  if ((a=e.getAttribute("fileName")) != null) {    _fileName=a.getValue();  }  if ((a=e.getAttribute("roadName")) != null) {    _roadName=a.getValue();  }  if ((a=e.getAttribute("roadNumber")) != null) {    _roadNumber=a.getValue();  }  if ((a=e.getAttribute("owner")) != null) {    _owner=a.getValue();  }  if ((a=e.getAttribute("mfg")) != null) {    _mfg=a.getValue();  }  if ((a=e.getAttribute("model")) != null) {    _model=a.getValue();  }  if ((a=e.getAttribute("dccAddress")) != null) {    _dccAddress=a.getValue();  }  if ((a=e.getAttribute("imageFilePath")) != null && !a.getValue().isEmpty()) {    try {      if (FileUtil.getFile(a.getValue()).isFile()) {        _imageFilePath=FileUtil.getAbsoluteFilename(a.getValue());      }    } catch (    FileNotFoundException ex) {      try {        if (FileUtil.getFile(FileUtil.getUserResourcePath() + a.getValue()).isFile()) {          _imageFilePath=FileUtil.getUserResourcePath() + a.getValue();        }      } catch (      FileNotFoundException ex1) {        _imageFilePath=null;      }    }  }  if ((a=e.getAttribute("iconFilePath")) != null && !a.getValue().isEmpty()) {    try {      if (FileUtil.getFile(a.getValue()).isFile()) {        _iconFilePath=FileUtil.getAbsoluteFilename(a.getValue());      }    } catch (    FileNotFoundException ex) {      try {        if (FileUtil.getFile(FileUtil.getUserResourcePath() + a.getValue()).isFile()) {          _iconFilePath=FileUtil.getUserResourcePath() + a.getValue();        }      } catch (      FileNotFoundException ex1) {        _iconFilePath=null;      }    }  }  if ((a=e.getAttribute("URL")) != null) {    _URL=a.getValue();  }  if ((a=e.getAttribute(RosterEntry.SHUNTING_FUNCTION)) != null) {    _isShuntingOn=a.getValue();  }  if ((a=e.getAttribute(RosterEntry.MAX_SPEED)) != null) {    _maxSpeedPCT=Integer.parseInt(a.getValue());  }  Element e3;  if ((e3=e.getChild("dateUpdated")) != null) {    _dateUpdated=e3.getText();  }  if ((e3=e.getChild("locoaddress")) != null) {    DccLocoAddress la=(DccLocoAddress)((new jmri.configurexml.LocoAddressXml()).getAddress(e3));    if (la != null) {      _dccAddress="" + la.getNumber();      _protocol=la.getProtocol();    } else {      _dccAddress="";      _protocol=LocoAddress.Protocol.DCC_SHORT;    }  } else {    jmri.ThrottleManager tf=jmri.InstanceManager.getNullableDefault(jmri.ThrottleManager.class);    int address;    try {      address=Integer.parseInt(_dccAddress);    } catch (    NumberFormatException e2) {      address=3;    }    if (tf != null && tf.canBeLongAddress(address) && !tf.canBeShortAddress(address)) {      _protocol=LocoAddress.Protocol.DCC_LONG;    } else     if (tf != null && !tf.canBeLongAddress(address) && tf.canBeShortAddress(address)) {      _protocol=LocoAddress.Protocol.DCC_SHORT;    } else {      warnShortLong(_id);      _protocol=LocoAddress.Protocol.DCC_SHORT;    }  }  if ((a=e.getAttribute("comment")) != null) {    _comment=a.getValue();  }  Element d=e.getChild("decoder");  if (d != null) {    if ((a=d.getAttribute("model")) != null) {      _decoderModel=a.getValue();    }    if ((a=d.getAttribute("family")) != null) {      _decoderFamily=a.getValue();    }    if ((a=d.getAttribute("comment")) != null) {      _decoderComment=a.getValue();    }  }  loadFunctions(e.getChild("functionlabels"),"RosterEntry");  loadAttributes(e.getChild("attributepairs"));  if (e.getChild(RosterEntry.SPEED_PROFILE) != null) {    _sp=new RosterSpeedProfile(this);    _sp.load(e.getChild(RosterEntry.SPEED_PROFILE));  }}  }
class C{  protected void releaseConnection(){  try {    managedConn.releaseConnection();  } catch (  IOException ignored) {    this.log.debug("IOException releasing connection",ignored);  }  managedConn=null;}  }
class C{  @Override public boolean supportsFullOuterJoins(){  debugCodeCall("supportsFullOuterJoins");  return false;}  }
class C{  public void execute(Runnable command){  final double currentWorkToIdleFactor=workToIdleFactor;  if (currentWorkToIdleFactor == 0.0) {    command.run();  } else {    final long startWorkNanos=clock.nanoTime();    command.run();    final long workNanos=clock.nanoTime() - startWorkNanos;    pendingNanos=Math.min(maxDelayNanos,Util.clampAdd(pendingNanos,(long)(workNanos * currentWorkToIdleFactor)));    if (pendingNanos > 0) {      try {        pendingNanos=clock.sleep(pendingNanos);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();      }    }  }}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public void endCDATA() throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endCDATA");  if (null != m_lexicalHandler) {    m_lexicalHandler.endCDATA();  }}  }
class C{  public void updateProgressBar(int percentage){  view.updateProgressBar(percentage);}  }
class C{  public SqlOperation(){  this(UNRECOGNIZED,UNRECOGNIZED,null,null,false);}  }
class C{  public static void putLongLE(byte[] arr,long off,long val){  if (UNALIGNED)   UNSAFE.putLong(arr,off,Long.reverseBytes(val)); else   putLongByByte(arr,off,val,false);}  }
class C{  public Boolean isReliableMemoryAware(){  return reliableMemoryAware;}  }
class C{  public static String toStringScope(int scope,String defaultValue){switch (scope) {case Scope.SCOPE_APPLICATION:    return "application";case Scope.SCOPE_ARGUMENTS:  return "arguments";case Scope.SCOPE_CALLER:return "caller";case Scope.SCOPE_CGI:return "cgi";case Scope.SCOPE_CLIENT:return "client";case Scope.SCOPE_COOKIE:return "cookie";case Scope.SCOPE_FORM:return "form";case Scope.SCOPE_VAR:case Scope.SCOPE_LOCAL:return "local";case Scope.SCOPE_REQUEST:return "request";case Scope.SCOPE_SERVER:return "server";case Scope.SCOPE_SESSION:return "session";case Scope.SCOPE_UNDEFINED:return "undefined";case Scope.SCOPE_URL:return "url";case Scope.SCOPE_VARIABLES:return "variables";case Scope.SCOPE_CLUSTER:return "cluster";}return defaultValue;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.727 -0500",hash_original_method="F1DF96C7A348307D7810D3F93EAE9BCB",hash_generated_method="13F97006567F796652FBF53C29F317AD") public final static String formatHeaderElement(final HeaderElement elem,boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatHeaderElement(null,elem,quote).toString();}  }
class C{  public void displaySemIm(SemIm semIm,int tabSelectionIndex,int matrixSelection){  if (semIm == null) {    throw new NullPointerException();  }  if (tabSelectionIndex < 0 || tabSelectionIndex >= 4) {    throw new IllegalArgumentException("Tab selection must be 0, 1, 2, or 3: " + tabSelectionIndex);  }  if (matrixSelection < 0 || matrixSelection >= 4) {    throw new IllegalArgumentException("Matrix selection must be 0, 1, 2, or 3: " + matrixSelection);  }  Graph oldGraph=getSemIm().getSemPm().getGraph();  GraphUtils.arrangeBySourceGraph(getSemIm().getSemPm().getGraph(),oldGraph);  this.matrixSelection=matrixSelection;  impliedMatricesPanel().setMatrixSelection(matrixSelection);  this.semImGraphicalEditor=null;  this.semImTabularEditor=null;  this.impliedMatricesPanel=null;  this.modelStatisticsPanel=null;  tabbedPane.removeAll();  tabbedPane.add(getGraphicalEditorTitle(),graphicalEditor());  tabbedPane.add(getTabularEditorTitle(),tabularEditor());  tabbedPane.add("Implied Matrices",impliedMatricesPanel());  tabbedPane.add("Model Statistics",modelStatisticsPanel());  tabbedPane.setSelectedIndex(tabSelectionIndex);  tabbedPane.validate();}  }
class C{  synchronized void unreferenced(long sequenceNum,VMID vmid,boolean strong){  SequenceEntry entry=sequenceTable.get(vmid);  if (entry == null || entry.sequenceNum > sequenceNum) {    return;  } else   if (strong) {    entry.retain(sequenceNum);  } else   if (entry.keep == false) {    sequenceTable.remove(vmid);  }  if (DGCImpl.dgcLog.isLoggable(Log.VERBOSE)) {    DGCImpl.dgcLog.log(Log.VERBOSE,"remove from dirty set: " + vmid);  }  refSetRemove(vmid);}  }
class C{  @Override public byte[] rowKey(ProfileMeasurement m,List<Object> groups){  return rowKey(m.getProfileName(),m.getEntity(),m.getPeriod(),groups);}  }
class C{  public static Weeks weeks(int weeks){switch (weeks) {case 0:    return ZERO;case 1:  return ONE;case 2:return TWO;case 3:return THREE;case Integer.MAX_VALUE:return MAX_VALUE;case Integer.MIN_VALUE:return MIN_VALUE;default :return new Weeks(weeks);}}  }
class C{  void addAll(IntSet is){  if (is.len == 0)   return;  int[] newv=new int[len + is.len];  int i=0, j=0, k=0;  while (i < len && j < is.len) {    if (v[i] < is.v[j])     newv[k++]=v[i++]; else     if (is.v[j] < v[i])     newv[k++]=is.v[j++]; else {      newv[k++]=v[i++];      j++;    }  }  while (i < len)   newv[k++]=v[i++];  while (j < is.len)   newv[k++]=is.v[j++];  v=newv;  len=k;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.332 -0400",hash_original_method="D194994672CF72D739AD2FC5B3B2AA56",hash_generated_method="D194994672CF72D739AD2FC5B3B2AA56") Tracker(String path,FileDeleteStrategy deleteStrategy,Object marker,ReferenceQueue<? super Object> queue){  super(marker,queue);  this.path=path;  this.deleteStrategy=deleteStrategy == null ? FileDeleteStrategy.NORMAL : deleteStrategy;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public LocalVarResolver(){  this("java.lang.Object");}  }
class C{  public static String describeConfProp(Configuration conf,String name){  String val=conf.get(name);  String[] srcs=conf.getPropertySources(name);  String source=srcs == null ? "unknown" : Arrays.toString(srcs);  return String.format("%s=%s; source: %s",name,val,source);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Node newNode;  String attrValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=elementList.item(2);  newAttribute=doc.createAttribute("class");  attributes=testAddress.getAttributes();  newNode=attributes.setNamedItem(newAttribute);  assertNotNull("previousAttrNotNull",newNode);  attrValue=newNode.getNodeValue();  assertEquals("previousAttrValue","No",attrValue);}  }
class C{  public static <I,A,OPEN,CLOSE>Parser<I,A> between(Parser<I,OPEN> open,Parser<I,CLOSE> close,Parser<I,A> p){  return then(open,bind(p,null));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public final void testSetHelperText(){  CharSequence helperText="helperText";  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.setHelperText(helperText);  assertEquals(helperText,abstractValidateableView.getHelperText());}  }
class C{  public int hash(String path){  return _hash.hash(path);}  }
class C{  private String formatLink(String[] parts){  String anchor, text;  if (parts.length < 2) {    anchor="";    text="Checker Framework";  } else {    anchor=parts[0];    text=parts[1];  }  return String.format("<A HREF=\"http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html%s\">%s</A>",anchor,text);}  }
class C{  protected void testMultipleSubscriptionsBase(int testMonth,int testDay,BigDecimal etalonPrice1,BigDecimal etalonPrice2,String overallcosts) throws Exception {  final long billingTime=getBillingTime(testYear,testMonth,testDay);  String id1=SUBSCRIPTION_ID;  String id2="sub2";  String id3="sub3";  creSub(P_1_ID,id1,getDate(testYear,testMonth,-2,20,0),null);  creSub(P_3_ID,id2,getDate(testYear,testMonth,-2,20,0),null);  updSub(id2,SubscriptionStatus.EXPIRED,getDate(testYear,testMonth,5,19,59));  updSub(id2,SubscriptionStatus.ACTIVE,getDate(testYear,testMonth,10,8,0));  creSub(P_4_ID,id3,getDate(testYear,testMonth,2,20,0),null);  updSub(id3,SubscriptionStatus.EXPIRED,getDate(testYear,testMonth,20,20,00));  delSub(id3,getDate(testYear,testMonth,26,20,00));  startBillingRun(billingTime);  Date periods[][];  periods=new Date[][]{{getStartDate(testYear,testMonth),getEndDate(testYear,testMonth)}};  verify(id1,periods,new BigDecimal(overallcosts),testMonth);  periods=new Date[][]{{getStartDate(testYear,testMonth),getDate(testYear,testMonth,5,19,59)},{getDate(testYear,testMonth,10,8,0),getEndDate(testYear,testMonth)}};  verify(id2,periods,etalonPrice1,testMonth);  periods=new Date[][]{{getDate(testYear,testMonth,2,20,0),getDate(testYear,testMonth,20,20,00)}};  verify(id3,periods,etalonPrice2,testMonth);}  }
class C{  @Override public void onAction(){  onAction(ActionType.LOOK);}  }
class C{  public void destroy(){  tailViewInstance.destroy();  rootViewInstance.destroy();}  }
class C{  public boolean isValid(){  if (ints == null) {    throw new IllegalStateException("ints is null");  }  if (length < 0) {    throw new IllegalStateException("length is negative: " + length);  }  if (length > ints.length) {    throw new IllegalStateException("length is out of bounds: " + length + ",ints.length="+ ints.length);  }  if (offset < 0) {    throw new IllegalStateException("offset is negative: " + offset);  }  if (offset > ints.length) {    throw new IllegalStateException("offset out of bounds: " + offset + ",ints.length="+ ints.length);  }  if (offset + length < 0) {    throw new IllegalStateException("offset+length is negative: offset=" + offset + ",length="+ length);  }  if (offset + length > ints.length) {    throw new IllegalStateException("offset+length out of bounds: offset=" + offset + ",length="+ length+ ",ints.length="+ ints.length);  }  return true;}  }
class C{  public static MockSolenoid instantaneousSolenoid(){  return new MockSolenoid(true);}  }
class C{  void writeEnd(){  bytePos=writeInt4(0,bytePos);  bytePos=writeString("IEND",bytePos);  crc.reset();  crc.update("IEND".getBytes());  crcValue=crc.getValue();  bytePos=writeInt4((int)crcValue,bytePos);}  }
class C{  static public void useXalanXPathSupport() throws Exception {  Class.forName("org.apache.xpath.XPath");  Class c=Class.forName("freemarker.ext.dom.XalanXPathSupport");synchronized (STATIC_LOCK) {    xpathSupportClass=c;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Using Xalan classes for XPath support");  }}  }
class C{  private boolean canCopySelection(){  Selection<?> selection=agent.getSelection();  if (selection == null || selection.isEmpty()) {    return false;  }  if (appContext.getCurrentProject() == null || appContext.getCurrentProject().getRootProject() == null) {    return false;  }  String projectPath=appContext.getCurrentProject().getRootProject().getPath();  for (  Object o : selection.getAllElements()) {    if (!(o instanceof ResourceBasedNode<?> && o instanceof HasStorablePath)) {      return false;    }    if (projectPath.equals(((HasStorablePath)o).getStorablePath())) {      return false;    }  }  return true;}  }
class C{  public void clearCache(){  cache.clear();}  }
class C{  public static boolean isSevereAlertProcessingForced(){  return ((Boolean)ForceSevereAlertProcessing.get()).booleanValue();}  }
class C{  public KMLIcon(String namespaceURI){  super(namespaceURI);}  }
class C{  public void removeBaudRateQueryCallback(OneSheeldBaudRateQueryCallback baudRateQueryCallback){  if (baudRateQueryCallback != null && baudRateQueryCallbacks.contains(baudRateQueryCallback))   baudRateQueryCallbacks.remove(baudRateQueryCallback);}  }
class C{  public double P_LogLikelihood(int y[],double p[]){  int L=y.length;  double l=0.0;  for (int j=0; j < L; j++) {    l+=Math.log(Math.pow(p[j],y[j]) * Math.pow(1. - p[j],1 - y[j]));  }  return l;}  }
class C{  public DefaultArchivoLogger(Class clase,DbDataSource ds){  this.clase=clase;  this.ds=ds;  this.eventos=new Stack();}  }
class C{  private void addReachable(final Value src,final Value tgt){  if (src == null)   throw new IllegalArgumentException();  if (tgt == null)   throw new IllegalArgumentException();  ConcurrentMap<Value,Value> tmp=reachable.get(src);  if (tmp == null) {    final ConcurrentMap<Value,Value> old=reachable.putIfAbsent(src,tmp=new ConcurrentHashMap<Value,Value>());    if (old != null) {      tmp=old;    }  }  tmp.putIfAbsent(tgt,tgt);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.316 -0500",hash_original_method="37B6C1FF254D8E50BAF9132487F1B989",hash_generated_method="3DE600CDC9146E206D3FBB07098CC288") public void startDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.startDocument();  }}  }
class C{  public int nextStep(RouteInfo plan,RouteInfo fact){  if (plan == null) {    throw new IllegalArgumentException("Planned route may not be null.");  }  int step=UNREACHABLE;  if ((fact == null) || (fact.getHopCount() < 1))   step=firstStep(plan); else   if (plan.getHopCount() > 1)   step=proxiedStep(plan,fact); else   step=directStep(plan,fact);  return step;}  }
class C{  static void blur(byte[] srcPixels,byte[] dstPixels,int width,int height,float[] kernel,int radius){  float p;  int cp;  for (int y=0; y < height; y++) {    int index=y;    int offset=y * width;    for (int x=0; x < width; x++) {      p=0.0f;      for (int i=-radius; i <= radius; i++) {        int subOffset=x + i;        if (subOffset < 0 || subOffset >= width) {          subOffset=(x + width) % width;        }        int pixel=srcPixels[offset + subOffset] & 0xFF;        float blurFactor=kernel[radius + i];        p+=blurFactor * pixel;      }      cp=(int)(p + 0.5f);      dstPixels[index]=(byte)(cp > 255 ? 255 : cp);      index+=height;    }  }}  }
class C{  public boolean forEachValue(TDoubleProcedure procedure){  byte[] states=_states;  double[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") private V report(int s) throws ExecutionException {  Object x=outcome;  if (s == NORMAL)   return (V)x;  if (s >= CANCELLED)   throw new CancellationException();  throw new ExecutionException((Throwable)x);}  }
class C{  public boolean isHIGHER_EQUAL(){  return value == HIGHER_EQUAL;}  }
class C{  public static RamlRoot loadRamlFromFile(String ramlFileUrl){  try {    return ramlModelFactory.createRamlRoot(ramlFileUrl);  } catch (  NullPointerException npe) {    logger.error("File not found at " + ramlFileUrl);    return null;  }}  }
class C{  public K auth(AccountHandle handle){  ah=handle;  return self();}  }
class C{  private synchronized void loadTypeScriptConsoleConnectors(){  if (typeScriptConsoleConnectors != null)   return;  Trace.trace(Trace.EXTENSION_POINT,"->- Loading .typeScriptConsoleConnectors extension point ->-");  IExtensionRegistry registry=Platform.getExtensionRegistry();  IConfigurationElement[] cf=registry.getConfigurationElementsFor(TypeScriptCorePlugin.PLUGIN_ID,EXTENSION_TYPESCRIPT_CONSOLE_CONNECTORS);  List<ITypeScriptConsoleConnector> list=new ArrayList<ITypeScriptConsoleConnector>(cf.length);  addTypeScriptConsoleConnectors(cf,list);  addRegistryListenerIfNeeded();  typeScriptConsoleConnectors=list;  Trace.trace(Trace.EXTENSION_POINT,"-<- Done loading .typeScriptConsoleConnectors extension point -<-");}  }
class C{  public void removeMetaData(String key) throws XMPPException {synchronized (this.metaData) {    List<String> oldVal=metaData.remove(key);    if (oldVal != null) {      setStatus(presenceMode,maxChats);    }  }}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("oc4j9x",J2EEContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("oc4j10x",J2EEContainerCapability.class);}  }
class C{  protected double calcScoreOfCounts(int[] nCounts,int nCardinality,int numValues,Instances instances){  double fLogScore=0.0;  for (int iParent=0; iParent < nCardinality; iParent++) {switch (m_nScoreType) {case (Scoreable.BAYES):{        double nSumOfCounts=0;        for (int iSymbol=0; iSymbol < numValues; iSymbol++) {          if (m_fAlpha + nCounts[iParent * numValues + iSymbol] != 0) {            fLogScore+=Statistics.lnGamma(m_fAlpha + nCounts[iParent * numValues + iSymbol]);            nSumOfCounts+=m_fAlpha + nCounts[iParent * numValues + iSymbol];          }        }        if (nSumOfCounts != 0) {          fLogScore-=Statistics.lnGamma(nSumOfCounts);        }        if (m_fAlpha != 0) {          fLogScore-=numValues * Statistics.lnGamma(m_fAlpha);          fLogScore+=Statistics.lnGamma(numValues * m_fAlpha);        }      }    break;case (Scoreable.BDeu):{    double nSumOfCounts=0;    for (int iSymbol=0; iSymbol < numValues; iSymbol++) {      if (m_fAlpha + nCounts[iParent * numValues + iSymbol] != 0) {        fLogScore+=Statistics.lnGamma(1.0 / (numValues * nCardinality) + nCounts[iParent * numValues + iSymbol]);        nSumOfCounts+=1.0 / (numValues * nCardinality) + nCounts[iParent * numValues + iSymbol];      }    }    fLogScore-=Statistics.lnGamma(nSumOfCounts);    fLogScore-=numValues * Statistics.lnGamma(1.0 / (numValues * nCardinality));    fLogScore+=Statistics.lnGamma(1.0 / nCardinality);  }break;case (Scoreable.MDL):case (Scoreable.AIC):case (Scoreable.ENTROPY):{double nSumOfCounts=0;for (int iSymbol=0; iSymbol < numValues; iSymbol++) {  nSumOfCounts+=nCounts[iParent * numValues + iSymbol];}for (int iSymbol=0; iSymbol < numValues; iSymbol++) {  if (nCounts[iParent * numValues + iSymbol] > 0) {    fLogScore+=nCounts[iParent * numValues + iSymbol] * Math.log(nCounts[iParent * numValues + iSymbol] / nSumOfCounts);  }}}break;default :{}}}switch (m_nScoreType) {case (Scoreable.MDL):{fLogScore-=0.5 * nCardinality * (numValues - 1)* Math.log(m_BayesNet.getNumInstances());}break;case (Scoreable.AIC):{fLogScore-=nCardinality * (numValues - 1);}break;}return fLogScore;}  }
class C{  public final void mul(GVector v1,GVector v2){  int i, j;  if (nRow < v1.size()) {    throw new MatrixSizeException();  }  if (nCol < v2.size()) {    throw new MatrixSizeException();  }  for (i=0; i < v1.size(); i++) {    for (j=0; j < v2.size(); j++) {      values[i][j]=v1.values[i] * v2.values[j];    }  }}  }
class C{  public void logOut(){  checkInitialized();  final SessionManager<TwitterSession> sessionManager=getSessionManager();  if (sessionManager != null) {    sessionManager.clearActiveSession();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.693 -0400",hash_original_method="26ECE614E5AA8C4631792CFFDE54B2CE",hash_generated_method="81BCD34C5C31D20605995E3F5153B845") public SuffixFileFilter(String suffix){  this(suffix,IOCase.SENSITIVE);}  }
class C{  public void loadDefaults(Object[] keysAndValues){  for (int i=keysAndValues.length - 2; i >= 0; i=i - 2) {    if (UIManager.getLookAndFeelDefaults().get(keysAndValues[i]) == null) {      UIManager.getLookAndFeelDefaults().put(keysAndValues[i],keysAndValues[i + 1]);    }  }}  }
class C{  public ScriptedProblem(Reader reader,String name) throws ScriptException {  super();  engine=newScriptEngine(name);  internalProblem=createInvocableInstance(reader);}  }
class C{  @Override public Population createInitialPopulation(ExampleSet es) throws UndefinedParameterError {  int direction=getParameterAsInt(PARAMETER_SELECTION_DIRECTION);  Population initP=new Population();  if (direction == FORWARD_SELECTION) {    for (int a=0; a < es.getAttributes().size(); a++) {      double[] weights=new double[es.getAttributes().size()];      weights[a]=1.0d;      initP.add(new Individual(weights));    }  } else {    double[] weights=new double[es.getAttributes().size()];    for (int a=0; a < es.getAttributes().size(); a++) {      weights[a]=1.0d;    }    initP.add(new Individual(weights));  }  return initP;}  }
class C{  public ExifTag buildTag(int tagId,Object val){  int ifdId=getTrueIfd(tagId);  return buildTag(tagId,ifdId,val);}  }
class C{  EnhancedForStatement(AST ast){  super(ast);  unsupportedIn2();}  }
class C{  public boolean isVswitchConfigSupported(){  return vswitchConfigSupported;}  }
class C{  public void writeExternal(ObjectOutput os) throws IOException {  write(os);}  }
class C{  public void addChild(SearchTree<VertexType> child){  m_childList.add(child);}  }
class C{  public void java_lang_ClassLoader_defineClass0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  public void shutDown(){  db.shutDown();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.622 -0500",hash_original_method="54E86A99E3577FA18F65ED6CED3821E9",hash_generated_method="B7119B834B06880890B6188EE22DD239") @Override public void writeToParcel(Parcel out,int flags){  out.writeInt(x);  out.writeInt(y);  out.writeInt(flags);}  }
class C{  public void pauseGame(){  board.pauseGame();}  }
class C{  public Builder addPlugin(CameraPlugin plugin){  plugin.validate(session);  session.plugins.add(plugin);  return (this);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  protected void importInteraction(boolean isWizardOfOz){  final JFileChooser fc=new JFileChooser(System.getProperty("user.dir"));  fc.setFileFilter(new FileNameExtensionFilter("XML file","xml"));  int returnVal=fc.showOpenDialog(frame);  if (returnVal == JFileChooser.APPROVE_OPTION) {    String interactionFile=fc.getSelectedFile().getAbsolutePath();    addComment("Importing interaction " + interactionFile);    try {      DialogueImporter importer=system.importDialogue(interactionFile);      importer.setWizardOfOzMode(isWizardOfOz);    } catch (    Exception f) {      log.warning("could not extract interaction: " + f);      addComment(f.toString());    }  }}  }
class C{  @Override public void updateChart(JFreeChart chart){  this.titleEditor.setTitleProperties(chart);  this.plotEditor.updatePlotProperties(chart.getPlot());  chart.setAntiAlias(getAntiAlias());  chart.setBackgroundPaint(getBackgroundPaint());}  }
class C{  public int addPadding(byte[] in,int inOff){  int added=(in.length - inOff);  while (inOff < in.length) {    in[inOff]=(byte)0;    inOff++;  }  return added;}  }
class C{  public void chainCanOptimize(boolean opt){  current.canOptimize=current.canOptimize || opt;}  }
class C{  public void test_stressBlobBlobHeaderBlobDataDeferredFrees(){  final Properties properties=new Properties(getProperties());  properties.setProperty(AbstractTransactionService.Options.MIN_RELEASE_AGE,"4000");  final int maxFixed=3;  properties.setProperty(RWStore.Options.ALLOCATION_SIZES,"1,2," + maxFixed);  final int maxAlloc=maxFixed * 64;  final int leafEntries=maxAlloc / 8;  final int headerEntries=maxAlloc / 4;  final int threshold=headerEntries * leafEntries;  final int nallocs=threshold << 3;  Journal store=(Journal)getStore(properties);  try {    RWStrategy bs=(RWStrategy)store.getBufferStrategy();    ArrayList<Long> addrs=new ArrayList<Long>();    for (int i=0; i < nallocs; i++) {      addrs.add(bs.write(randomData(1024)));    }    store.commit();    for (    long addr : addrs) {      bs.delete(addr);    }    for (int i=0; i < nallocs; i++) {      if (!bs.isCommitted(addrs.get(i))) {        fail("i=" + i + ", addr="+ addrs.get(i));      }    }    store.commit();    Thread.currentThread().sleep(6000);    final long addr2=bs.write(randomData(1024));    store.commit();    bs.delete(addr2);    store.commit();    for (int i=0; i < nallocs; i++) {      assertFalse(bs.isCommitted(addrs.get(i)));    }  } catch (  InterruptedException e) {  } finally {    store.destroy();  }}  }
class C{  public static void isTrue(boolean expression,String message){  if (!expression) {    throw new IllegalArgumentException(message);  }}  }
class C{  public static double mean(long... values){  MeanAccumulator accumulator=new MeanAccumulator();  for (  long value : values) {    accumulator.add(value);  }  return accumulator.mean();}  }
class C{  public void testGetVersionUnknown() throws Exception {  String xml="<!DOCTYPE web-app " + "PUBLIC '-//Sun Microsystems, Inc.//DTD Web Application 1.9//EN' " + "'http://java.sun.com/dtd/web-app_1_9.dtd'>"+ "<web-app></web-app>";  try {    WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());    Assert.fail("expected web.xml parsing exception but got: " + webXml);  } catch (  CargoException ce) {  }}  }
class C{  public void createTable(String table) throws DatabaseException {  String sql;  if (!target.tableExists(table)) {    sql=source.generateCreate(table);    target.execute(sql);  }}  }
class C{  private void clearHotspots(){  boolean needsDraw=false;  if (mRipple != null) {    needsDraw=false;    mRipple.cancel();    mRipple=null;  }  if (mBackground != null) {    needsDraw=mBackground.isHardwareAnimating();    mBackground.cancel();    mBackground=null;  }  needsDraw|=cancelExitingRipples();  mNeedsDraw=needsDraw;  invalidateSelf();}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public boolean contextSelect(D nodeData){  if (selectedNodes.isEmpty()) {    insertAndSelectNode(nodeData,0,true);    return true;  }  if (!hasSameParent(selectedNodes.get(0),nodeData) || selectedNodes.size() == 1) {    return selectSingleNode(nodeData);  }  if (!selectedNodes.contains(nodeData)) {    int insertionIndex=getInsertionIndex(nodeData);    insertAndSelectNode(nodeData,insertionIndex,true);    return true;  }  return false;}  }
class C{  protected int[] readColorTable(int ncolors){  int nbytes=3 * ncolors;  int[] tab=null;  byte[] c=new byte[nbytes];  int n=0;  try {    n=in.read(c);  } catch (  IOException e) {  }  if (n < nbytes) {    status=STATUS_FORMAT_ERROR;  } else {    tab=new int[256];    int i=0;    int j=0;    while (i < ncolors) {      int r=((int)c[j++]) & 0xff;      int g=((int)c[j++]) & 0xff;      int b=((int)c[j++]) & 0xff;      tab[i++]=0xff000000 | (r << 16) | (g << 8)| b;    }  }  return tab;}  }
class C{  private void applyTo(ClassVisitor v,Method m){  if (Log.isLoggingOn()) {    Log.logLine(String.format("Visiting method %s",m.toGenericString()));  }  v.visit(m);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void stepOutput(){  if (receiveQueue.isEmpty()) {    return;  }  for (  final Port port : Port.VALUES) {    final Pipe sendingPipe=getCasing().getSendingPipe(getFace(),port);    if (!sendingPipe.isWriting()) {      sendingPipe.beginWrite(receiveQueue.peekFirst());    }  }}  }
class C{  public In(URL url){  try {    URLConnection site=url.openConnection();    InputStream is=site.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    System.err.println("Could not open " + url);  }}  }
class C{  @Override public boolean hasNext(){  return spot.before(endFinal);}  }
class C{  public CharBuffer append(int i){  if (i == 0x80000000) {    return append("-2147483648");  }  int length=length();  ensureCapacity(length + 16);  char[] buffer=buffer();  if (i < 0) {    buffer[length++]='-';    i=-i;  } else   if (i == 0) {    buffer[length]='0';    length(length + 1);    return this;  }  int start=length;  while (i > 0) {    buffer[length++]=(char)((i % 10) + '0');    i/=10;  }  for (int j=(length - start) / 2; j > 0; j--) {    char temp=buffer[length - j];    buffer[length - j]=buffer[start + j - 1];    buffer[start + j - 1]=temp;  }  length(length);  return this;}  }
class C{  public static String hexToBin(String s){  return new BigInteger(s,16).toString(2);}  }
class C{  public FactoryDto build(String json) throws ApiException {  FactoryDto factory=DtoFactory.getInstance().createDtoFromJson(json,FactoryDto.class);  checkValid(factory);  return factory;}  }
class C{  public void horizontal(boolean setHorizontalOrientation){  if (manager != null) {    if (setHorizontalOrientation)     manager.setOrientation(LinearLayoutManager.HORIZONTAL);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Deprecated public boolean hasTextSegments(){  return getTextSegments().size() > 0;}  }
class C{  public void createTables(DatabaseSession session,JPAMSchemaManager schemaManager,boolean build,boolean check,boolean createSequenceTables,boolean createSequences){  buildConstraints(schemaManager,build);  String sequenceTableName=getSequenceTableName(session);  List<TableDefinition> missingTables=new ArrayList<>();  for (  TableDefinition tableDefinition : getTableDefinitions()) {    if (!tableDefinition.getName().equals(sequenceTableName)) {      missingTables.add(tableDefinition);      try {        String query=schemaManager.createObject(tableDefinition);        schemaManager.getDBMapping().putCreateQuery(tableDefinition.getName(),query);        session.getSessionLog().log(SessionLog.FINEST,SessionLog.DDL,"default_tables_created",tableDefinition.getFullName());      } catch (      DatabaseException ex) {        session.getSessionLog().log(SessionLog.FINEST,SessionLog.DDL,"default_tables_already_existed",tableDefinition.getFullName());        if (!shouldIgnoreDatabaseException()) {          throw ex;        }      }    }  }  createConstraints(missingTables,session,schemaManager,false);  schemaManager.createOrReplaceSequences(createSequenceTables,createSequences);  for (  TableDefinition table : missingTables) {    schemaManager.createMapping(table);  }  for (  TableDefinition table : missingTables) {    schemaManager.createReference(table);  }}  }
class C{  public MapIterator mapIterator(){  if (size == 0) {    return EmptyMapIterator.INSTANCE;  }  return new HashMapIterator(this);}  }
class C{  public void iterate(){  if (projectionMethod.isIterable()) {    ((IterableProjectionMethod)projectionMethod).iterate();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributens01.class,args);}  }
class C{  public void addGetstatic(CtClass c,String name,String type){  add(GETSTATIC);  int ci=constPool.addClassInfo(c);  addIndex(constPool.addFieldrefInfo(ci,name,type));  growStack(Descriptor.dataSize(type));}  }
class C{  public void quitarPermisosRol(String idRol,String[] permisoRol){  iniciarTransaccion();  permisoRolDBEntity.quitarPermisosRol(idRol,permisoRol);  commit();}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("deploystatus") @Valid DeployStatus deployStatus,BindingResult bindingResult,Principal principal){  LOGGER.debug("Entering into insert for deploy_status table");  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.DeployStatus jpaDeployStatus=new com.wipro.ats.bdre.md.dao.jpa.DeployStatus();    jpaDeployStatus.setDeployStatusId(deployStatus.getDeployStatusId().shortValue());    jpaDeployStatus.setDescription(deployStatus.getDescription());    Short deployStatusId=deployStatusDAO.insert(jpaDeployStatus);    deployStatus.setDeployStatusId(Integer.valueOf(deployStatusId));    LOGGER.debug("Deploy Status Id" + jpaDeployStatus.getDeployStatusId());    LOGGER.debug("Deploy Status Id" + deployStatus.getDeployStatusId());    LOGGER.debug("Exiting from insert for deploy_status table");    restWrapper=new RestWrapper(deployStatus,RestWrapper.OK);    LOGGER.info(RECORDWITHID + deployStatus.getDeployStatusId() + " inserted in DeployStatus by User:"+ principal.getName()+ deployStatus);  } catch (  Exception e) {    LOGGER.error(e);    return new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static Color showDialog(Component component,String title,Color startingColor){  Color initColor=startingColor != null ? startingColor : Color.white;  final JColorChooser jcc=new JColorChooser(initColor);  ColorTracker ok=new ColorTracker(jcc);  jcc.getSelectionModel().addChangeListener(ok);  JComponent previewPanel=ok.getTransparancyAdjustment(initColor.getAlpha());  previewPanel.setSize(previewPanel.getPreferredSize());  previewPanel.setBorder(BorderFactory.createEmptyBorder(0,0,1,0));  jcc.setPreviewPanel(previewPanel);  JDialog colorDialog=JColorChooser.createDialog(component,title,true,jcc,ok,null);  colorDialog.setVisible(true);  return ok.getColor();}  }
class C{  public Boolean isBootRetryOptionsSupported(){  return bootRetryOptionsSupported;}  }
class C{  public boolean isEmpty(int r,int c){  return (board[r][c] == EmptyMark);}  }
class C{  private static int shiftColorSpaceToSwing(final Color newCol){  final int r=(int)(newCol.getRed() * 255);  final int g=(int)(newCol.getGreen() * 255);  final int b=(int)(newCol.getBlue() * 255);  return (r << 16) + (g << 8) + b;}  }
class C{  public static Ed25519GroupElement doubleScalarMultiplyGroupElements(final Ed25519GroupElement g1,final Ed25519FieldElement f1,final Ed25519GroupElement g2,final Ed25519FieldElement f2){  final Ed25519GroupElement h1=scalarMultiplyGroupElement(g1,f1);  final Ed25519GroupElement h2=scalarMultiplyGroupElement(g2,f2);  return addGroupElements(h1,h2.negate());}  }
class C{  public SpiderRobotstxtParser(SpiderParam params){  super();  this.params=params;}  }
class C{  public NameTypeCP(String name,String sig){  uniq=("NT : @#$%" + name + "SD#$"+ sig).intern();  this.name=new AsciiCP(name);  this.sig=new AsciiCP(sig);}  }
class C{  public static DbException convertIOException(IOException e,String message){  if (message == null) {    Throwable t=e.getCause();    if (t instanceof DbException) {      return (DbException)t;    }    return get(ErrorCode.IO_EXCEPTION_1,e,e.toString());  }  return get(ErrorCode.IO_EXCEPTION_2,e,e.toString(),message);}  }
class C{  public static void main(String[] args){  showPanel(new GroovyPanel(),args);}  }
class C{  public JMenuBar(){  super();  setFocusTraversalKeysEnabled(false);  setSelectionModel(new DefaultSingleSelectionModel());  updateUI();}  }
class C{  public static void main(String[] args){  System.out.println();  for (int p=2; p < 1000; p++) {    if (isTwinprime(p))     System.out.println("(" + p + ", "+ (p + 2)+ ")");  }}  }
class C{  public void testOnTroubleshootingActionsChanged_checksServerHealthy(){  when(mTroubleshooter.isServerHealthy()).thenReturn(false);  mController.init();  mFakeEventBus.post(new TroubleshootingActionsChangedEvent(ImmutableSet.of(TroubleshootingAction.CHECK_PACKAGE_SERVER_CONFIGURATION),null));  verify(mMockUserManager,times(1)).loadKnownUsers();}  }
class C{  public void changeTheme(){  if (game == null)   return;  IBoard board=game.getBoard();  if (board.inSpace())   return;  Set<String> themes=tileManager.getThemes();  if (themes.remove(""))   themes.add("(No Theme)");  themes.add("(Original Theme)");  setShouldIgnoreKeys(true);  selectedTheme=(String)JOptionPane.showInputDialog(null,"Choose the desired theme:","Theme Selection",JOptionPane.PLAIN_MESSAGE,null,themes.toArray(),selectedTheme);  setShouldIgnoreKeys(false);  if (selectedTheme == null) {    return;  } else   if (selectedTheme.equals("(Original Theme)")) {    for (    Coords c : allBoardHexes()) {      IHex hex=board.getHex(c);      hex.resetTheme();      board.setHex(c,hex);    }  } else {    for (    Coords c : allBoardHexes()) {      IHex hex=board.getHex(c);      hex.setTheme(selectedTheme.equals("(No Theme)") ? "" : selectedTheme);      board.setHex(c,hex);    }  }}  }
class C{  public void translate(Vector2 tx){  this.translate(tx.x,tx.y);}  }
class C{  @Inline @Override public final void objectReferenceWrite(ObjectReference objref,ObjectReference value,Word offset,Word location,int mode){  Magic.setObjectAtOffset(objref.toObject(),offset.toOffset(),value.toObject(),location.toInt());}  }
class C{  public static boolean needsUID(Class<?> c){  boolean result;  if (isSerializable(c)) {    result=!hasUID(c);  } else {    result=false;  }  return result;}  }
class C{  public void writeBits(int bits,int numbits) throws IOException {  int numBytes=255;  do {    if ((this.indexIntoOutputStream == 254 && this.bitsLeft == 0) || this.indexIntoOutputStream > 254) {      this.output.write(numBytes);      this.output.write(this.buffer,0,numBytes);      this.buffer[0]=0;      this.indexIntoOutputStream=0;      this.bitsLeft=8;    }    if (numbits <= this.bitsLeft) {      this.buffer[this.indexIntoOutputStream]|=(bits & ((1 << numbits) - 1)) << (8 - this.bitsLeft);      this.bitsLeft-=numbits;      numbits=0;    } else {      this.buffer[this.indexIntoOutputStream]|=(bits & ((1 << this.bitsLeft) - 1)) << (8 - this.bitsLeft);      bits>>=this.bitsLeft;      numbits-=this.bitsLeft;      this.buffer[++this.indexIntoOutputStream]=0;      this.bitsLeft=8;    }  } while (numbits != 0);}  }
class C{  private void deleteImageFromImageServers(ComputeImage ci){  List<URI> ids=_dbClient.queryByType(ComputeImageServer.class,true);  for (  URI imageServerId : ids) {    ComputeImageServer imageServer=_dbClient.queryObject(ComputeImageServer.class,imageServerId);    if (imageServer.getFailedComputeImages() != null && imageServer.getFailedComputeImages().contains(ci.getId().toString())) {      imageServer.getFailedComputeImages().remove(ci.getId().toString());    } else     if (imageServer.getComputeImages() != null && imageServer.getComputeImages().contains(ci.getId().toString())) {      imageServer.getComputeImages().remove(ci.getId().toString());    }    _dbClient.updateObject(imageServer);  }}  }
class C{  @Override public void releaseConnection(HttpConnection conn){  LOG.trace("enter HttpConnectionManager.releaseConnection(HttpConnection)");  if (conn instanceof HttpConnectionAdapter) {    conn=((HttpConnectionAdapter)conn).getWrappedConnection();  } else {  }  SimpleHttpConnectionManager.finishLastResponse(conn);  connectionPool.freeConnection(conn);}  }
class C{  public static float convertDpToPixel(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * ((float)metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);  return px;}  }
class C{  public void deleteMarketableService(VOService service) throws Exception {  service=deactivateMarketableService(service);  srvProvService.deleteService(service);}  }
class C{  public static void validateEventsAtReceivingClientListener(String key){  EventID eventIdAtClient2=(EventID)assertThreadIdToSequenceIdMapHasEntryId();  if ((eventIdAtClient2.getThreadID() == eventIdForLastKey.getThreadID()) && (eventIdAtClient2.getSequenceID() == eventIdForLastKey.getSequenceID())) {synchronized (EventIdOptimizationDUnitTest.class) {      LogWriterUtils.getLogWriter().info("Notifying client2 to proceed for validation");      proceedForValidation=true;      EventIdOptimizationDUnitTest.class.notify();    }  } else {    boolean containsEventId=false;    for (int i=0; i < eventIds.length; i++) {      if ((eventIdAtClient2.getThreadID() == eventIds[i].getThreadID()) && (eventIdAtClient2.getSequenceID() == eventIds[i].getSequenceID())) {        containsEventId=true;        break;      }    }    if (!containsEventId) {      validationFailed=true;      failureMsg.append("key = ").append(key).append(" ; eventID = ").append(eventIdAtClient2).append(System.getProperty("line.separator"));    }  }}  }
class C{  private void updateMatchingMasksForHost(Set<String> matchedHostInitiators,ExportMask exportMask,Map<String,Set<URI>> matchingMasks){  if (null != matchedHostInitiators && !matchedHostInitiators.isEmpty()) {    for (    String initiatorName : matchedHostInitiators) {      Set<URI> maskURIs=matchingMasks.get(initiatorName);      if (maskURIs == null) {        maskURIs=new HashSet<URI>();        matchingMasks.put(initiatorName,maskURIs);      }      maskURIs.add(exportMask.getId());    }  }}  }
class C{  @Override protected AcceptStatus accept(final BytesRef term){  if (commonSuffixRef == null || StringHelper.endsWith(term,commonSuffixRef)) {    if (runAutomaton.run(term.bytes,term.offset,term.length))     return linear ? AcceptStatus.YES : AcceptStatus.YES_AND_SEEK; else     return (linear && term.compareTo(linearUpperBound) < 0) ? AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;  } else {    return (linear && term.compareTo(linearUpperBound) < 0) ? AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;  }}  }
class C{  Rule(String name){  this.name=name;  list=new ArrayList<RuleRec>();}  }
class C{  @SuppressWarnings("unchecked") public static void register(String algorithmURI,String implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException {  JavaUtils.checkRegisterPermission();  Class<? extends CanonicalizerSpi> registeredClass=canonicalizerHash.get(algorithmURI);  if (registeredClass != null) {    Object exArgs[]={algorithmURI,registeredClass};    throw new AlgorithmAlreadyRegisteredException("algorithm.alreadyRegistered",exArgs);  }  canonicalizerHash.put(algorithmURI,(Class<? extends CanonicalizerSpi>)Class.forName(implementingClass));}  }
class C{  public InlineQueryResultVenue.InlineQueryResultVenueBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  private void runHandshake() throws IOException {  logger.debug("~~ [OPENING SECURE CHANNEL]");  sslEngine.beginHandshake();  HandshakeStatus handshakeStatus=sslEngine.getHandshakeStatus();  while (handshakeStatus != FINISHED && handshakeStatus != NOT_HANDSHAKING) {switch (handshakeStatus) {case NEED_TASK:      handshakeStatus=runDelegatedTasks();    break;case NEED_UNWRAP:  handshakeStatus=unwrap(DUMMY_BUFFER);break;case NEED_WRAP:handshakeStatus=wrap(plainOut);break;}}}  }
class C{  void collect(AbstractReasoningTool tool,String name) throws IOException, InterruptedException {  if (runId == null) {    runId=tool.getJobID().toString();    totals.info.put(Stat.RUN,runId);  }  JobResult jobValues=new JobResult();  jobValues.info.put(Stat.TABLE,tableName);  jobValues.info.put(Stat.RUN,runId);  jobValues.info.put(Stat.ITERATION,String.valueOf(tool.getIteration()));  jobValues.info.put(Stat.JOB,name);  jobValues.stats.put(Stat.ELAPSED_TIME,tool.getElapsedTime());  for (  Stat key : taskCounters.keySet()) {    jobValues.stats.put(key,tool.getCounter(taskCounters.get(key)));  }  for (  Stat key : jobCounters.keySet()) {    jobValues.stats.put(key,tool.getCounter(jobCounters.get(key)));  }  jobValues.stats.put(Stat.TBOX_IN,tool.getNumSchemaInput());  jobValues.stats.put(Stat.ABOX_IN,tool.getNumInstanceInput());  jobValues.stats.put(Stat.INCONSISTENCIES_OUT,tool.getNumInconsistencies());  jobValues.stats.put(Stat.TRIPLES_OUT,tool.getNumSchemaTriples() + tool.getNumInstanceTriples());  jobValues.stats.put(Stat.FILE_BYTES_READ,tool.getCounter(FileSystemCounter.class.getName(),"FILE_BYTES_READ"));  jobValues.stats.put(Stat.FILE_BYTES_WRITTEN,tool.getCounter(FileSystemCounter.class.getName(),"FILE_BYTES_WRITTEN"));  jobValues.stats.put(Stat.HDFS_BYTES_READ,tool.getCounter(FileSystemCounter.class.getName(),"HDFS_BYTES_READ"));  jobValues.stats.put(Stat.HDFS_BYTES_WRITTEN,tool.getCounter(FileSystemCounter.class.getName(),"HDFS_BYTES_WRITTEN"));  jobResults.add(jobValues);  if (!jobTypeResults.containsKey(name)) {    JobResult typeResult=new JobResult();    typeResult.info.put(Stat.TABLE,tableName);    typeResult.info.put(Stat.RUN,runId);    typeResult.info.put(Stat.ITERATION,"total");    typeResult.info.put(Stat.JOB,name);    jobTypeResults.put(name,typeResult);  }  jobTypeResults.get(name).add(jobValues);  totals.add(jobValues);}  }
class C{  private static String header(final String user,final String pass){  final String auth=String.format("%s:%s",user,pass);  final String encoded=DatatypeConverter.printBase64Binary(auth.getBytes());  return String.format(PsBasicTest.AUTH_BASIC,encoded);}  }
class C{  public boolean checkAccess(AccessFlags flags){  boolean isPublic=flags.is(AccessFlags.ACC_PUBLIC);  boolean isProtected=flags.is(AccessFlags.ACC_PROTECTED);  boolean isPrivate=flags.is(AccessFlags.ACC_PRIVATE);  boolean isPackage=!(isPublic || isProtected || isPrivate);  if ((showAccess == AccessFlags.ACC_PUBLIC) && (isProtected || isPrivate || isPackage))   return false; else   if ((showAccess == AccessFlags.ACC_PROTECTED) && (isPrivate || isPackage))   return false; else   if ((showAccess == 0) && (isPrivate))   return false; else   return true;}  }
class C{  public static boolean isProtectedResource(final String uri){  return WroUtil.startsWithIgnoreCase(uri,PROTECTED_PREFIX);}  }
class C{  public void writeBinary(final PacketOutputStream writeBuffer){  calendar=Calendar.getInstance();  calendar.setTimeInMillis(date.getTime());  writeBuffer.writeDateLength(calendar);}  }
class C{  private void loadMachines(){  List<MachineEntity> machines=getMachines(appContext.getWorkspace());  if (!machines.isEmpty()) {    addMachineActions(machines);  }}  }
class C{  public void testNFA() throws IOException {  Automaton nfa=Operations.union(Automata.makeString("this"),Automata.makeString("three"));  assertAutomatonHits(2,nfa);}  }
class C{  public static boolean isHigh(int c){  return (MIN_HIGH <= c) && (c <= MAX_HIGH);}  }
class C{  public void generateCode(){  if (this.ignoreFurtherInvestigation) {    if (this.types != null) {      for (int i=0, count=this.types.length; i < count; i++) {        this.types[i].ignoreFurtherInvestigation=true;        this.types[i].generateCode(this.scope);      }    }    return;  }  try {    if (this.types != null) {      for (int i=0, count=this.types.length; i < count; i++)       this.types[i].generateCode(this.scope);    }  } catch (  AbortCompilationUnit e) {  }}  }
class C{  public final AC shrinkPrio(int p){  return shrinkPrio(p,curIx);}  }
class C{  public int hashCode(){  return "Buddhist".hashCode() * 11 + getZone().hashCode();}  }
class C{  public DatabaseBuilder putDatabaseProperty(String name,DataType type,Object value){  _dbProps=putProperty(_dbProps,name,type,value);  return this;}  }
class C{  public static void sendMessage(CommandSender sender,BaseComponent... components){  List<BaseComponent> toSend=Lists.newArrayList();  Locale locale=getLocale(sender);  for (  BaseComponent component : components) {    if (component instanceof LanguageComponent) {      toSend.addAll(Arrays.asList(((LanguageComponent)component).getComponents(locale)));    } else {      toSend.add(component);    }  }  sender.sendMessage(toSend.toArray(new BaseComponent[toSend.size()]));}  }
class C{  public ConfigExceptionLocation(String msg,Throwable cause){  super(msg,cause);}  }
class C{  private ByteBuffer decryptBuffer(ByteBuffer encrypted,byte[] decryptionKeyBytes) throws PDFParseException {  final Cipher cipher;  try {    cipher=createAndInitialiseContentCipher(encrypted,decryptionKeyBytes);  } catch (  GeneralSecurityException e) {    throw new PDFParseException("Unable to create cipher due to platform limitation: " + e.getMessage(),e);  }  try {    final java.nio.ByteBuffer decryptedBuf=java.nio.ByteBuffer.allocate(encrypted.remaining());    cipher.doFinal(encrypted.toNIO(),decryptedBuf);    decryptedBuf.flip();    return ByteBuffer.fromNIO(decryptedBuf);  } catch (  GeneralSecurityException e) {    throw new PDFParseException("Could not decrypt: " + e.getMessage(),e);  }}  }
class C{  public static void insertJetStreamConfiguration(BasicDBObject dbObject,MongoLogConnection mongoLogConnection){  JetStreamBeanConfigurationLogDo beanConfig=null;  DBCollection dbCol=mongoLogConnection.getDBCollection();  if (dbCol == null) {    throw new MongoConfigRuntimeException("jetstreamconfig collection is unknown");  }  WriteResult result=dbCol.insert(dbObject);  if (result.getError() != null) {    throw new MongoConfigRuntimeException(result.getError());  }}  }
class C{  public void installSecurityManager(){  Policy policy=Policy.getPolicy();  BatikSecurityManager securityManager=new BatikSecurityManager();  ClassLoader cl=appMainClass.getClassLoader();  String securityPolicyProperty=System.getProperty(PROPERTY_JAVA_SECURITY_POLICY);  if (securityPolicyProperty == null || securityPolicyProperty.equals("")) {    URL policyURL=getPolicyURL();    System.setProperty(PROPERTY_JAVA_SECURITY_POLICY,policyURL.toString());  }  URL mainClassURL=cl.getResource(appMainClassRelativeURL);  if (mainClassURL == null) {    throw new Error(appMainClassRelativeURL);  }  String expandedMainClassName=mainClassURL.toString();  if (expandedMainClassName.startsWith(JAR_PROTOCOL)) {    setJarBase(expandedMainClassName);  } else {    setDevBase(expandedMainClassName);  }  System.setSecurityManager(securityManager);  lastSecurityManagerInstalled=securityManager;  policy.refresh();  if (securityPolicyProperty == null || securityPolicyProperty.equals("")) {    System.setProperty(PROPERTY_JAVA_SECURITY_POLICY,"");  }}  }
class C{  public boolean isAutoStart(){  return autoStart;}  }
class C{  public void abort(){  this.aborted=true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, j, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  double bufferSize=0;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry geometriesToBuffer=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  bufferSize=Double.parseDouble(args[2]);  if (bufferSize < 0) {    showFeedback("The buffer size has not been set properly.");    return;  }  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numRecs=input.getNumberOfRecords();    oneHundredthTotal=numRecs / 100;    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYGON);    output.setProjectionStringFromOtherShapefile(input);    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    if (shapeType.getBaseType() == ShapeType.POLYGON) {      progress=0;      ArrayList<com.vividsolutions.jts.geom.Polygon> polygons=new ArrayList<>();      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            polygons.add((com.vividsolutions.jts.geom.Polygon)recJTSPoly[a]);          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      com.vividsolutions.jts.geom.Polygon[] polygonArray=new com.vividsolutions.jts.geom.Polygon[polygons.size()];      for (i=0; i < polygons.size(); i++) {        polygonArray[i]=polygons.get(i);      }      polygons.clear();      geometriesToBuffer=factory.createMultiPolygon(polygonArray);    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE) {      ArrayList<LineString> lineStringList=new ArrayList<>();      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            lineStringList.add((com.vividsolutions.jts.geom.LineString)recJTSPoly[a]);          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      com.vividsolutions.jts.geom.LineString[] lineStringArray=new com.vividsolutions.jts.geom.LineString[lineStringList.size()];      for (i=0; i < lineStringList.size(); i++) {        lineStringArray[i]=lineStringList.get(i);      }      lineStringList.clear();      geometriesToBuffer=factory.createMultiLineString(lineStringArray);    } else     if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      ArrayList<com.vividsolutions.jts.geom.Point> pointList=new ArrayList<>();      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      n=0;      progress=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            pointList.add((com.vividsolutions.jts.geom.Point)recJTSPoly[a]);          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      com.vividsolutions.jts.geom.Point[] pointArray=new com.vividsolutions.jts.geom.Point[pointList.size()];      for (i=0; i < pointList.size(); i++) {        pointArray[i]=pointList.get(i);      }      pointList.clear();      geometriesToBuffer=factory.createMultiPoint(pointArray);    }    updateProgress("Buffering data (progress will not be updated):",-1);    com.vividsolutions.jts.geom.Geometry buffer=geometriesToBuffer.buffer(bufferSize);    progress=0;    updateProgress("Creating new shapefile:",-1);    if (buffer instanceof com.vividsolutions.jts.geom.MultiPolygon) {      MultiPolygon mpBuffer=(MultiPolygon)buffer;      FID=0;      n=0;      for (int a=0; a < mpBuffer.getNumGeometries(); a++) {        com.vividsolutions.jts.geom.Geometry g=mpBuffer.getGeometryN(a);        if (g instanceof com.vividsolutions.jts.geom.Polygon) {          com.vividsolutions.jts.geom.Polygon bufferPoly=(com.vividsolutions.jts.geom.Polygon)g;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[bufferPoly.getNumInteriorRing() + 1];          Coordinate[] buffCoords=bufferPoly.getExteriorRing().getCoordinates();          if (!Topology.isLineClosed(buffCoords)) {            System.out.println("Exterior ring not closed.");          }          if (Topology.isClockwisePolygon(buffCoords)) {            for (i=0; i < buffCoords.length; i++) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          } else {            for (i=buffCoords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          }          for (int b=0; b < bufferPoly.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            buffCoords=bufferPoly.getInteriorRingN(b).getCoordinates();            if (!Topology.isLineClosed(buffCoords)) {              System.out.println("Interior ring not closed.");            }            if (Topology.isClockwisePolygon(buffCoords)) {              for (i=buffCoords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            } else {              for (i=0; i < buffCoords.length; i++) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbPoly);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);          if (cancelOp) {            cancelOperation();            return;          }          n++;          progress=(int)(n * 100.0 / mpBuffer.getNumGeometries());          updateProgress("Creating new shapefile:",progress);        } else {        }      }    } else     if (buffer instanceof com.vividsolutions.jts.geom.Polygon) {      com.vividsolutions.jts.geom.Polygon pBuffer=(com.vividsolutions.jts.geom.Polygon)buffer;      com.vividsolutions.jts.geom.Geometry g=pBuffer.getGeometryN(0);      if (g instanceof com.vividsolutions.jts.geom.Polygon) {        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts=new int[pBuffer.getNumInteriorRing() + 1];        Coordinate[] buffCoords=pBuffer.getExteriorRing().getCoordinates();        if (Topology.isClockwisePolygon(buffCoords)) {          for (i=0; i < buffCoords.length; i++) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        } else {          for (i=buffCoords.length - 1; i >= 0; i--) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        }        for (int b=0; b < pBuffer.getNumInteriorRing(); b++) {          parts[b + 1]=pnts.size();          buffCoords=pBuffer.getInteriorRingN(b).getCoordinates();          if (Topology.isClockwisePolygon(buffCoords)) {            for (i=buffCoords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          } else {            for (i=0; i < buffCoords.length; i++) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          }        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());        output.addRecord(wbPoly);        Object[] rowData=new Object[1];        rowData[0]=new Double(1);        writer.addRecord(rowData);      } else {      }    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String normalizeSystemName(String systemName){  if (!validSystemNameFormat(systemName,systemName.charAt(1),"A")) {    return "";  }  int num;  try {    num=Integer.valueOf(systemName.substring(2)).intValue();  } catch (  Exception e) {    log.error("illegal character in number field of system name: " + systemName);    return "";  }  String nName="";  nName=systemName.substring(0,2) + Integer.toString(num);  return nName;}  }
class C{  public RbrChangeList(RowChangeData rowChangeData){  this.rowChangeData=rowChangeData;}  }
class C{  public final static void initLogging(OutputDirectoryHierarchy outputDirectoryHierarchy){  if (collectLogMessagesAppender != null) {    Logger.getRootLogger().removeAppender(collectLogMessagesAppender);  }  try {    String outputFilename=outputDirectoryHierarchy.getOutputFilename(LOGFILE);    String warnLogfileName=outputDirectoryHierarchy.getOutputFilename(WARNLOGFILE);    initLogging(outputFilename,warnLogfileName);  } catch (  IOException e) {    log.error("Cannot create logfiles: " + e.getMessage());    e.printStackTrace();  }}  }
class C{  @SuppressWarnings({"MethodMayBeStatic"}) private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public Attribute attribute(int index){  return m_Attributes.get(index);}  }
class C{  public void markMessagesDelivered(DBTransaction transaction,String charname) throws SQLException {  try {    String query="UPDATE postman SET delivered = 1 WHERE target = '[charname]'";    Map<String,Object> params=new HashMap<String,Object>();    params.put("charname",charname);    logger.debug("markMessagesDelivered is using query: " + query);    transaction.execute(query,params);  } catch (  SQLException e) {    logger.error("Can't mark messages delivered for character \"" + charname + "\"",e);    throw e;  }}  }
class C{  public void synchronizedWithDatasource(){  assertIsMutable();  this.originalDbValues=Collections.unmodifiableMap(getAllFields());  this.clearChanged();}  }
class C{  public void autoRequestNews(boolean openIfUnread){  if (settings.getBoolean("newsAutoRequest")) {    getNews(openIfUnread);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.STATE_INTERNAL___COMMENT_1:    return comment_1 != null && !comment_1.isEmpty();case UmplePackage.STATE_INTERNAL___CHANGE_TYPE_1:  return CHANGE_TYPE_1_EDEFAULT == null ? changeType_1 != null : !CHANGE_TYPE_1_EDEFAULT.equals(changeType_1);case UmplePackage.STATE_INTERNAL___STATE_ENTITY_1:return stateEntity_1 != null && !stateEntity_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public ResultMatrixCSV(){  this(1,1);}  }
class C{  private static void analyze(Tree[] trees,int update){  TaxonList masterList=trees[0];  System.out.println("Calculating splits...");  SplitSystem[] splits=new SplitSystem[trees.length];  for (int i=0; i < splits.length; i++) {    splits[i]=SplitUtils.getSplits(masterList,trees[i]);  }  int maxOffset=MAX_OFFSET;  int samples=trees.length;  if ((samples / 3) < maxOffset) {    maxOffset=(samples / 3);  }  double[] meanDistances=new double[maxOffset];  System.out.println("Calculating mean distance per lag...");  for (int i=0; i < maxOffset; i++) {    meanDistances[i]=0;    for (int j=0; j < samples - i; j++) {      double distance=getRobinsonFouldsRescaledDistance(splits[i],trees[j]);      meanDistances[i]+=distance;    }    meanDistances[i]/=((double)samples - i);    System.out.println(meanDistances[i]);  }}  }
class C{  public boolean equals(Object obj){  try {    JulianDate d=(JulianDate)obj;    return (julian == d.julian);  } catch (  Exception ignore) {  }  return false;}  }
class C{  @Override public void flush() throws IOException {  if (rawOut instanceof DeflaterOutputStream)   rawOut.flush();}  }
class C{  SIPDialogErrorEvent(SIPDialog sourceDialog,int dialogErrorID){  super(sourceDialog);  errorID=dialogErrorID;}  }
class C{  private void evaluatePopup(MouseEvent e){  if (e.isPopupTrigger()) {    createOperatorPopupMenu().show(this,e.getX(),e.getY());  }}  }
class C{  public static void w(String tag,Throwable tr){  w(tag,null,tr);}  }
class C{  public void startGitkitActivity(){  Intent intent=new Intent(this,GitkitActivity.class);  startActivity(intent);}  }
class C{  public SimpleDoc(Object printData,DocFlavor flavor,DocAttributeSet attributes){  if (flavor == null || printData == null) {    throw new IllegalArgumentException("null argument(s)");  }  Class repClass=null;  try {    String className=flavor.getRepresentationClassName();    sun.reflect.misc.ReflectUtil.checkPackageAccess(className);    repClass=Class.forName(className,false,Thread.currentThread().getContextClassLoader());  } catch (  Throwable e) {    throw new IllegalArgumentException("unknown representation class");  }  if (!repClass.isInstance(printData)) {    throw new IllegalArgumentException("data is not of declared type");  }  this.flavor=flavor;  if (attributes != null) {    this.attributes=AttributeSetUtilities.unmodifiableView(attributes);  }  this.printData=printData;}  }
class C{  private static int rightIdx(int parentIdx){  return childIdx(parentIdx,1);}  }
class C{  private void restoreNonVolatiles(Instruction inst){  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  int nNonvolatileGPRS=ir.compiledMethod.getNumberOfNonvolatileGPRs();  int n=nNonvolatileGPRS - 1;  Register FP=phys.getFP();  if (VM.BuildFor32Addr && n > MULTIPLE_CUTOFF) {    Register nv=null;    for (Enumeration<Register> e=phys.enumerateNonvolatileGPRsBackwards(); e.hasMoreElements() && n >= 0; n--) {      nv=e.nextElement();    }    n++;    RegisterOperand range=I(nv);    int offset=getNonvolatileGPROffset(n);    inst.insertBefore(MIR_Load.create(PPC_LMW,range,A(FP),IC(offset)));  } else {    for (Enumeration<Register> e=phys.enumerateNonvolatileGPRsBackwards(); e.hasMoreElements() && n >= 0; n--) {      Register nv=e.nextElement();      int offset=getNonvolatileGPROffset(n);      inst.insertBefore(MIR_Load.create(PPC_LAddr,A(nv),A(FP),IC(offset)));    }  }  if (!ir.compiledMethod.isSaveVolatile()) {    int nNonvolatileFPRS=ir.compiledMethod.getNumberOfNonvolatileFPRs();    n=nNonvolatileFPRS - 1;    for (Enumeration<Register> e=phys.enumerateNonvolatileFPRsBackwards(); e.hasMoreElements() && n >= 0; n--) {      Register nv=e.nextElement();      int offset=getNonvolatileFPROffset(n);      inst.insertBefore(MIR_Load.create(PPC_LFD,D(nv),A(FP),IC(offset)));    }  }}  }
class C{  private Vector<Command> continueDragging(int diffx,int diffy,Point oldp,List<GridElement> elementsToMove){  boolean useSetLocation=elementsToMove.size() != 1;  Vector<Command> tmpVector=new Vector<Command>();  for (  Command command : FIRST_MOVE_COMMANDS) {    if (command instanceof Move) {      Move m=(Move)command;      tmpVector.add(new Move(resizeDirections,m.getEntity(),diffx,diffy,oldp,m.isShiftKeyDown(),FIRST_DRAG,useSetLocation,m.getStickables()));    } else     if (command instanceof OldMoveLinePoint) {      OldMoveLinePoint m=(OldMoveLinePoint)command;      tmpVector.add(new OldMoveLinePoint(m.getRelation(),m.getLinePointId(),diffx,diffy));    }  }  return tmpVector;}  }
class C{  public Matrix3(double m11,double m12,double m13,double m21,double m22,double m23,double m31,double m32,double m33){  this.m[0]=m11;  this.m[1]=m12;  this.m[2]=m13;  this.m[3]=m21;  this.m[4]=m22;  this.m[5]=m23;  this.m[6]=m31;  this.m[7]=m32;  this.m[8]=m33;}  }
class C{  public int process(Buffer input){  int codecNo=0;  return doProcess(codecNo,input);}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  public final void testGetEncryptedData02(){  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.algName0[i][0],EncryptedPrivateKeyInfoData.encryptedData);      assertTrue(Arrays.equals(EncryptedPrivateKeyInfoData.encryptedData,epki.getEncryptedData()));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  private void displayMessage(String message){  Toast toast=Toast.makeText(getBaseContext(),message,Toast.LENGTH_LONG);  toast.setGravity(Gravity.CENTER,0,0);  LinearLayout toastLayout=(LinearLayout)toast.getView();  TextView toastTV=(TextView)toastLayout.getChildAt(0);  if (toastTV != null) {    toastTV.setTextSize(20);    toastTV.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);  }  toast.show();}  }
class C{  public Session createNonXATopicSession(final boolean transacted,final int acknowledgeMode) throws JMSException {  checkClosed();  return createSessionInternal(false,transacted,acknowledgeMode,ActiveMQConnection.TYPE_TOPIC_CONNECTION);}  }
class C{  @ExceptionHandler(Exception.class) public ModelAndView handleAllException(Exception exception){  return new JsonError(exception).asModelAndView();}  }
class C{  private void addParametersForCategory(Marketplace marketplace,String categoryId,Query jpaQuery){  jpaQuery.setParameter("categoryId",categoryId);  jpaQuery.setParameter("marketplaceKey",Long.valueOf(marketplace.getKey()));}  }
class C{  private void handleShadowPRExistsScenario(Cache cache,PartitionedRegion prQ){  if (logger.isDebugEnabled()) {    logger.debug("{}: No need to create the region as the region has been retrieved: {}",this,prQ);  }  Set<BucketRegion> localBucketRegions=prQ.getDataStore().getAllLocalBucketRegions();  for (  BucketRegion bucketRegion : localBucketRegions) {    bucketRegion.clear();  }}  }
class C{  public void addShape(Shape shape){  for (int i=0; i < this.shapes.size(); i++) {    if (this.shapes.get(i).getId().equals(shape.getId())) {      this.shapes.set(i,shape);      return;    }  }  this.shapes.add(shape);}  }
class C{  synchronized void transactionTerminated(CompositeTransaction ct){  TransactionContextStateHandler nextState=state.transactionTerminated(ct);  setState(nextState);}  }
class C{  public void initialise(SignalMast destination){  if (disposing) {    return;  }  if (!destList.containsKey(destination)) {    return;  }  destList.get(destination).initialise();}  }
class C{  public static RequestHandler createRequestMethod(String method) throws MethodNotAllowedException {  if (!AllowedMethodHandler.methodAllowed(method)) {    throw new MethodNotAllowedException("The method " + method + " is not in the AllowedHeaderHandler's list of allowed methods.",AllowedMethodHandler.getAllowHeader());  }  RequestHandler handler=(RequestHandler)requestHandlers.get(method.toUpperCase());  if (handler == null) {    throw new MethodNotAllowedException("The method " + method + " was allowed by the AllowedMethodHandler, not by the factory.",handledMethods);  } else {    return handler;  }}  }
class C{  public ConcreteMethodDeclaration_ createConcreteMethodDeclaration_(){  ConcreteMethodDeclaration_Impl concreteMethodDeclaration_=new ConcreteMethodDeclaration_Impl();  return concreteMethodDeclaration_;}  }
class C{  public static float scalb(final float value,int scaleFactor){  final int MAX_SCALE=2 * MAX_FLOAT_EXPONENT + 23 + 1;  scaleFactor=Math.max(Math.min(scaleFactor,MAX_SCALE),-MAX_SCALE);  return (float)(value * twoPowNormal(scaleFactor));}  }
class C{  private static Map<String,String> loadResources() throws Exception {  Map<String,String> allnames=new HashMap<String,String>();  for (  String f : resources) {    String clazz=f.replace('/','.').substring(0,f.length() - 5);    Set<String> expected=loadClass(clazz);    Set<String> found=rewriteFile(f,"{\"");    if (!expected.equals(found)) {      throw new Exception("Expected and found do not match");    }    for (    String name : found) {      allnames.put(name,f);    }  }  return allnames;}  }
class C{  public Bundler putCharSequence(String key,CharSequence value){  bundle.putCharSequence(key,value);  return this;}  }
class C{  public static boolean isMulti(Property property,Resource type){  return isMulti(property.asNode(),type != null ? type.asNode() : null,property.getModel().getGraph());}  }
class C{  public Model take(){  while (!isEmpty()) {    Model model=remove(0);    if (!model.isEmpty()) {      return model;    }  }  return null;}  }
class C{  public void generateCucumberITFiles(final File outputDirectory,final Collection<File> featureFiles) throws MojoExecutionException {  final Parser<Feature> parser=new Parser<Feature>(new AstBuilder());  Feature feature=null;  for (  final File file : featureFiles) {    try {      feature=parser.parse(new FileReader(file),new TokenMatcher());    } catch (    final FileNotFoundException e) {      System.out.println(String.format("WARNING: Failed to parse '%s'...IGNORING",file.getName()));    }    if (shouldSkipFeature(feature)) {      continue;    }    for (    final ScenarioDefinition scenario : feature.getScenarioDefinitions()) {      outputFileName=classNamingScheme.generate(file.getName());      setFeatureFileLocation(file);      final File outputFile=new File(outputDirectory,outputFileName + ".java");      FileWriter w=null;      try {        w=new FileWriter(outputFile);        writeContentFromTemplate(w);      } catch (      final IOException e) {        throw new MojoExecutionException("Error creating file " + outputFile,e);      } finally {        if (w != null) {          try {            w.close();          } catch (          final IOException e) {            System.out.println("Failed to close file: " + outputFile);          }        }      }      fileCounter++;    }  }}  }
class C{  public Map<String,GarbageCollectorStats> garbageCollectors(){  final Map<String,GarbageCollectorStats> stats=new HashMap<String,GarbageCollectorStats>();  for (  GarbageCollectorMXBean gc : garbageCollectors) {    stats.put(gc.getName(),new GarbageCollectorStats(gc.getCollectionCount(),gc.getCollectionTime()));  }  return Collections.unmodifiableMap(stats);}  }
class C{  public static void add(List<String> options,String option,File value){  options.add("-" + option);  options.add("" + value);}  }
class C{  public CTaggedGraphNodesContainerNode(final ZyGraph graph,final CTagsTreeModel model,final ITreeNode<CTag> tag){  super(-tag.getObject().getId(),graph);  Preconditions.checkNotNull(graph,"IE01800: Graph can not be null.");  m_model=Preconditions.checkNotNull(model,"IE01801: Model can not be null.");  m_tag=Preconditions.checkNotNull(tag,"IE02327: Tag argument can not be null");  m_menuBuilder=new CTaggedNodesContainerNodeMenuBuilder(graph,m_tag);  createChildren();  graph.addListener(m_graphListener);  graph.getRawView().addListener(m_viewListener);}  }
class C{  public void register4(String name,Type arg1,Type arg2,Type arg3,Type arg4,InvocationPlugin plugin){  plugins.register(plugin,false,allowOverwrite,declaringType,name,arg1,arg2,arg3,arg4);}  }
class C{  public void applyRule(Rule r){  Set<Assignment> slots=getMatchingSlots(r.getInputVariables()).linearise();  for (  Assignment filledSlot : slots) {    AnchoredRule arule=new AnchoredRule(r,this,filledSlot);    if (arule.isRelevant()) {switch (r.getRuleType()) {case PROB:        addProbabilityRule(arule);      break;case UTIL:    addUtilityRule(arule);  break;}}}}  }
class C{  public static TableWrapLayout createSectionClientTableWrapLayout(boolean makeColumnsEqualWidth,int numColumns){  TableWrapLayout layout=new TableWrapLayout();  layout.topMargin=SECTION_CLIENT_MARGIN_TOP;  layout.bottomMargin=SECTION_CLIENT_MARGIN_BOTTOM;  layout.leftMargin=SECTION_CLIENT_MARGIN_LEFT;  layout.rightMargin=SECTION_CLIENT_MARGIN_RIGHT;  layout.horizontalSpacing=SECTION_CLIENT_HORIZONTAL_SPACING;  layout.verticalSpacing=SECTION_CLIENT_VERTICAL_SPACING;  layout.makeColumnsEqualWidth=makeColumnsEqualWidth;  layout.numColumns=numColumns;  return layout;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_POINTER_ATTRIBUTE_CONTEXT:    return "CU_POINTER_ATTRIBUTE_CONTEXT";case CU_POINTER_ATTRIBUTE_MEMORY_TYPE:  return "CU_POINTER_ATTRIBUTE_MEMORY_TYPE";case CU_POINTER_ATTRIBUTE_DEVICE_POINTER:return "CU_POINTER_ATTRIBUTE_DEVICE_POINTER";case CU_POINTER_ATTRIBUTE_HOST_POINTER:return "CU_POINTER_ATTRIBUTE_HOST_POINTER";case CU_POINTER_ATTRIBUTE_P2P_TOKENS:return "CU_POINTER_ATTRIBUTE_P2P_TOKENS";case CU_POINTER_ATTRIBUTE_SYNC_MEMOPS:return "CU_POINTER_ATTRIBUTE_SYNC_MEMOPS";case CU_POINTER_ATTRIBUTE_BUFFER_ID:return "CU_POINTER_ATTRIBUTE_BUFFER_ID";case CU_POINTER_ATTRIBUTE_IS_MANAGED:return "CU_POINTER_ATTRIBUTE_IS_MANAGED";}return "INVALID CUpointer_attribute: " + n;}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public StaticMap visible(GeoPoint... geoPoints){  visible.addAll(Arrays.asList(geoPoints));  return this;}  }
class C{  public boolean hasBillingEvent(){  return billingEventOneTime != null || billingEventRecurring != null;}  }
class C{  public static long copy(InputStream input,OutputStream output) throws IOException {  byte[] buffer=new byte[1 << 16];  return copy(input,output,buffer);}  }
class C{  public boolean timestampParsingStillNeeded(){  return shouldParseTimestamp && !timestampResolved;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetownerdocument.class,args);}  }
class C{  private void startAnimation(){  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();  mPendingAnimations.clear();  int propertyMask=0;  int propertyCount=nameValueList.size();  for (int i=0; i < propertyCount; ++i) {    NameValuesHolder nameValuesHolder=nameValueList.get(i);    propertyMask|=nameValuesHolder.mNameConstant;  }  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));  animator.addUpdateListener(mAnimatorEventListener);  animator.addListener(mAnimatorEventListener);  if (mStartDelaySet) {    animator.setStartDelay(mStartDelay);  }  if (mDurationSet) {    animator.setDuration(mDuration);  }  if (mInterpolatorSet) {    animator.setInterpolator(mInterpolator);  }  animator.start();}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.VARIABLE_BINDING;}  }
class C{  public long readLong() throws EOFException, FormatException {  return MoreMath.BuildLong(readBytes(8,false),MSBFirst);}  }
class C{  @Override public void renderAxisLabels(Canvas c){  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;  float[] positions=new float[mYAxis.mEntryCount * 2];  for (int i=0; i < positions.length; i+=2) {    positions[i + 1]=mYAxis.mEntries[i / 2];  }  mTrans.pointValuesToPixel(positions);  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  float xoffset=mYAxis.getXOffset();  float yoffset=Utils.calcTextHeight(mAxisLabelPaint,"A") / 2.5f;  AxisDependency dependency=mYAxis.getAxisDependency();  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();  float xPos=0f;  if (dependency == AxisDependency.LEFT) {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      mAxisLabelPaint.setTextAlign(Align.RIGHT);      xPos=mViewPortHandler.offsetLeft() - xoffset;    } else {      mAxisLabelPaint.setTextAlign(Align.LEFT);      xPos=mViewPortHandler.offsetLeft() + xoffset;    }  } else {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      mAxisLabelPaint.setTextAlign(Align.LEFT);      xPos=mViewPortHandler.contentRight() + xoffset;    } else {      mAxisLabelPaint.setTextAlign(Align.RIGHT);      xPos=mViewPortHandler.contentRight() - xoffset;    }  }  drawYLabels(c,xPos,positions,yoffset);}  }
class C{  public static Shape generatePolygon(int sides,int outsideRadius,int insideRadius,boolean normalize){  Shape shape=generatePolygon(sides,outsideRadius,insideRadius);  if (normalize) {    Rectangle2D bounds=shape.getBounds2D();    GeneralPath path=new GeneralPath(shape);    shape=path.createTransformedShape(AffineTransform.getTranslateInstance(-bounds.getX(),-bounds.getY()));  }  return shape;}  }
class C{  public static QueryDRSMigrationCapabilityForPerformanceResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryDRSMigrationCapabilityForPerformanceResponse object=new QueryDRSMigrationCapabilityForPerformanceResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryDRSMigrationCapabilityForPerformanceResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryDRSMigrationCapabilityForPerformanceResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public Depend(PathImpl source,long digest){  this(source,digest,true);}  }
class C{  public void loadWorkspaceContents(String xml) throws BlocklyParserException {  loadWorkspaceContents(new ByteArrayInputStream(xml.getBytes()));}  }
class C{  @Override public CompletableFuture<Boolean> noneMatch(final Predicate<? super T> predicate){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  public static String prettyPrintDips(int px,float scaleFactor){  String dip;  if (scaleFactor == 1f) {    dip=String.valueOf(px);  } else   if (scaleFactor == 2f) {    dip=String.valueOf(px / 2);    if (px % 2 == 1) {      dip+=ONE_HALF;    }  } else   if (scaleFactor == 3f) {    dip=String.valueOf(px / 3);    if (px % 3 == 1) {      dip+=ONE_THIRD;    } else     if (px % 3 == 2) {      dip+=TWO_THIRDS;    }  } else   if (scaleFactor == 4f) {    dip=String.valueOf(px / 4);    if (px % 4 == 1) {      dip+=ONE_FOURTH;    } else     if (px % 4 == 2) {      dip+=ONE_HALF;    } else     if (px % 4 == 3) {      dip+=THREE_FOURTHS;    }  } else {    dip=DECIMAL_FORMAT.format(px / scaleFactor);  }  return dip;}  }
class C{  public LocalResult(Session session,Expression[] expressions,int visibleColumnCount){  this.session=session;  if (session == null) {    this.maxMemoryRows=Integer.MAX_VALUE;  } else {    this.maxMemoryRows=session.getDatabase().getMaxMemoryRows();  }  rows=New.arrayList();  this.visibleColumnCount=visibleColumnCount;  rowId=-1;  this.expressions=expressions;}  }
class C{  public static ResponseCode valueOf(final int value){  int codeClass=getCodeClass(value);  int codeDetail=getCodeDetail(value);switch (codeClass) {case 2:    return valueOfSuccessCode(codeDetail);case 4:  return valueOfClientErrorCode(codeDetail);case 5:return valueOfServerErrorCode(codeDetail);default :throw new MessageFormatException(String.format("Not a CoAP response code: %s",formatCode(codeClass,codeDetail)));}}  }
class C{  protected void startTracking(){  mIsLive=true;  final long time=SantaPreferences.getCurrentTime();  if (time >= mFirstDeparture && time < mFinalArrival) {    startOnChristmas();  } else {    returnToStartupActivity();  }}  }
class C{  @Override public void leaveScope(final IScope scope){  scope.setTopology(previous.get());  previous.set(null);  super.leaveScope(scope);}  }
class C{  protected void clearParameters(){  fieldValue.setText("");  fieldName.setText("");  fieldUPC.setText("");  fieldSKU.setText("");  fWarehouse_ID.setValue(null);  fPriceList_ID.setValue(null);  fProductCategory_ID.setValue(null);  fVendor_ID.setValue(null);  fAS_ID.setValue(null);  fASI_ID.setValue(null);  checkOnlyStock.setValue(false);  checkAND.setSelected(true);}  }
class C{  public void DataIsFetchedFromUDP() throws Throwable {  ListView listView=alertDialog.getListView();  View child=listView.getChildAt(2);  clickAndValidate(child);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.522 -0500",hash_original_method="E21158B8192A6A62E47E5DB23E5C8298",hash_generated_method="C0B1919E289E1D1CD148CF74042E6B33") public LinearGradient(float x0,float y0,float x1,float y1,int colors[],float positions[],TileMode tile){  if (colors.length < 2) {    throw new IllegalArgumentException("needs >= 2 number of colors");  }  if (positions != null && colors.length != positions.length) {    throw new IllegalArgumentException("color and position arrays must be of equal length");  }  native_instance=nativeCreate1(x0,y0,x1,y1,colors,positions,tile.nativeInt);  native_shader=nativePostCreate1(native_instance,x0,y0,x1,y1,colors,positions,tile.nativeInt);}  }
class C{  public void bind(String address,ServiceRefAmp linkService){  _linkServiceMap.put(address,linkService);  _serviceCloseList.add(linkService);}  }
class C{  public static int hash(int aSeed,Object aObject){  int result=aSeed;  if (aObject == null) {    result=hash(result,0);  } else   if (!isArray(aObject)) {    result=hash(result,aObject.hashCode());  } else {    int length=Array.getLength(aObject);    for (int idx=0; idx < length; ++idx) {      Object item=Array.get(aObject,idx);      result=hash(result,item);    }  }  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS06.class,args);}  }
class C{  public static void addBundle(@NotNull PathsList classPath,@NotNull String bundlePath,@NotNull Class<?> contextClass){  String pathToUse=bundlePath.replace('.','/');  if (!pathToUse.endsWith(".properties")) {    pathToUse+=".properties";  }  if (!pathToUse.startsWith("/")) {    pathToUse='/' + pathToUse;  }  String root=PathManager.getResourceRoot(contextClass,pathToUse);  if (root != null) {    classPath.add(root);  }}  }
class C{  public ByteSizeValue translogBufferSize(){  return translogBuffer;}  }
class C{  public boolean hasSheep(){  if (rpObject == null) {    return false;  }  return rpObject.has("sheep");}  }
class C{  public static Future<Void> closeSequence(ExecutorService executorService,boolean ignoreCloseError,AsyncCloseable... closeables){  List<AsyncCloseable> closeableList=Lists.newArrayListWithExpectedSize(closeables.length);  for (  AsyncCloseable closeable : closeables) {    if (null == closeable) {      closeableList.add(AsyncCloseable.NULL);    } else {      closeableList.add(closeable);    }  }  return FutureUtils.processList(closeableList,ignoreCloseError ? AsyncCloseable.CLOSE_FUNC_IGNORE_ERRORS : AsyncCloseable.CLOSE_FUNC,executorService).map(VoidFunctions.LIST_TO_VOID_FUNC);}  }
class C{  public double distance3D(Coordinate c){  double dx=x - c.x;  double dy=y - c.y;  double dz=z - c.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  public SdfId(String value){  if (value.contains("-")) {    mHasUuid=true;    mSdfUuid=UUID.fromString(value);    mSdfId=0;  } else {    mHasUuid=false;    mSdfUuid=new UUID(0,0);    mSdfId=StringUtils.fromLongHexString(value);  }  mLongHash=Long.valueOf(mSdfId).hashCode();}  }
class C{  public static ClassScope make(Class<?> c){  return new ClassScope(c);}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {}  }
class C{  public void attributeAdded(HttpSessionBindingEvent event){  if (event.getName().equals(EVENT_KEY) && !isAnonymous()) {    SecurityContext securityContext=(SecurityContext)event.getValue();    if (securityContext.getAuthentication().getPrincipal() instanceof User) {      User user=(User)securityContext.getAuthentication().getPrincipal();      addUsername(user);    }  } else   if (event.getName().equals(AuthenticationProcessingFilter.SPRING_SECURITY_LAST_USERNAME_KEY)) {    String username=(String)event.getValue();    User user=new User(username);    addUsername(user);  }}  }
class C{  public double[] IHStoRGB(double[] ihs){  double[] ret=new double[3];  double i, h, s;  double r, g, b;  i=ihs[0];  h=ihs[1];  s=ihs[2];  if (h <= 1) {    r=i * (1 + 2 * s - 3 * s * h) / 3;    g=i * (1 - s + 3 * s * h) / 3;    b=i * (1 - s) / 3;  } else   if (h <= 2) {    r=i * (1 - s) / 3;    g=i * (1 + 2 * s - 3 * s * (h - 1)) / 3;    b=i * (1 - s + 3 * s * (h - 1)) / 3;  } else {    r=i * (1 - s + 3 * s * (h - 2)) / 3;    g=i * (1 - s) / 3;    b=i * (1 + 2 * s - 3 * s * (h - 2)) / 3;  }  ret[0]=r;  ret[1]=g;  ret[2]=b;  return ret;}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public boolean isRunning(){  return running;}  }
class C{  public static int findNextUnescaped(char charToFind,int startIdx,String s){  if (startIdx >= s.length())   return -1;  char[] charArray=s.toCharArray();  for (int i=startIdx; i < charArray.length; ++i) {    if (i > 0 && charArray[i - 1] == '\\')     continue;    if (charArray[i] == charToFind) {      return i;    }  }  return -1;}  }
class C{  public void writeNormals(boolean doWriteNormals){  this.doWriteNormals=doWriteNormals;}  }
class C{  private Expression compileUnary(UnaryOperation unary,int opPos) throws TransformerException {  int rightPos=getFirstChildPos(opPos);  unary.setRight(compile(rightPos));  return unary;}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent event){  this.lastEvent=event;}  }
class C{  public int increment(int offset){  CharSequence txt=getText();  int i;  if (txt != null) {    try {      i=Integer.parseInt(txt.toString());    } catch (    NumberFormatException e) {      i=0;    }  } else {    i=0;  }  i=i + offset;  setText(String.valueOf(i));  return i;}  }
class C{  private void executeIndexQuery(KeySelect keySelect) throws ReplicatorException {  Table table=keySelect.getTable();  Key key=keySelect.getKey();  if (logger.isDebugEnabled()) {    logger.debug("Executing prefetch query for key: " + key);  }  if (!slowQueryCache.shouldExecute(keySelect)) {    if (logger.isDebugEnabled()) {      logger.debug("Skipping slow query: keySelect=" + keySelect);    }    skippedSlowQueries++;    return;  }  String pstmtName=String.format("%s.%s.%s-statement",table.getSchema(),table.getName(),key.getName());  PreparedStatement pstmt=this.preparedStatementCache.retrieve(pstmtName);  if (pstmt == null) {    String query=keySelect.createPrefetchSelect();    if (logger.isDebugEnabled()) {      logger.debug("Generating prepared statement for index load: key=" + pstmtName + " query="+ query);    }    try {      pstmt=conn.getConnection().prepareStatement(query);    } catch (    SQLException e) {      throw new ApplierException("Unable to prepare statement: query=" + query,e);    }    preparedStatementCache.store(pstmtName,pstmt,query);  }  ResultSet rs=null;  try {    for (int i=1; i <= keySelect.size(); i++) {      pstmt.setObject(i,keySelect.getValue(i));    }    if (logger.isDebugEnabled()) {      StringBuffer sb=new StringBuffer();      sb.append("Executing index prefetch: key=").append(key);      sb.append(" values=[");      List<Column> columns=keySelect.getKey().getColumns();      for (int i=0; i < columns.size(); i++) {        if (i > 0)         sb.append(",");        sb.append(columns.get(i).getName());        sb.append("=");        sb.append(keySelect.getValue(i + 1));      }      sb.append("]");      logger.debug(sb.toString());    }    rs=pstmt.executeQuery();    prefetchedQueries++;    long rowCount=-1;    if (rs.next()) {      if (key.isPrimaryKey())       rowCount=1; else       rowCount=rs.getLong(1);    }    if (logger.isDebugEnabled()) {      logger.debug("Executed index prefetch: key=" + key + " rowCount="+ rowCount);    }    slowQueryCache.updateCache(keySelect,rowCount);  } catch (  SQLException e) {    throw new ApplierException("Unable to prefetch secondary index: " + key.toString(),e);  } finally {    if (rs != null)     closeResultSet(rs);  }}  }
class C{  public boolean isChecked(){  return isChecked;}  }
class C{  @Override public Drawable mutate(){  if (!mMutated && super.mutate() == this) {    mBitmapState=new BitmapState(mBitmapState);    mMutated=true;  }  return this;}  }
class C{  protected void collectRequiredProjects(IJavaProject proj,List<IJavaProject> res) throws JavaModelException {  if (!res.contains(proj)) {    res.add(proj);    IJavaModel model=proj.getJavaModel();    IClasspathEntry[] entries=proj.getRawClasspath();    for (int i=0; i < entries.length; i++) {      IClasspathEntry curr=entries[i];      if (curr.getEntryKind() == IClasspathEntry.CPE_PROJECT) {        IJavaProject ref=model.getJavaProject(curr.getPath().segment(0));        if (ref.exists()) {          collectRequiredProjects(ref,res);        }      }    }  }}  }
class C{  public float noise(float x,float y){  return noise(x,y,0f);}  }
class C{  public PdfSecurityException(final String message){  error_message=message;}  }
