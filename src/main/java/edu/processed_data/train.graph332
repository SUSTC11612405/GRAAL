class C{  public WumpusCave(int caveXDimension,int caveYDimension,Set<AgentPosition> allowedPositions){  if (caveXDimension < 1) {    throw new IllegalArgumentException("Cave must have x dimension >= 1");  }  if (caveYDimension < 1) {    throw new IllegalArgumentException("Case must have y dimension >= 1");  }  this.caveXDimension=caveXDimension;  this.caveYDimension=caveYDimension;  this.allowedPositions.addAll(allowedPositions);}  }
class C{  public void addStrategySettings(final StrategySettings stratSets){  addParameterSet(stratSets);}  }
class C{  public static void updateSystemConfiguration(Configuration config,DisplayMetrics metrics,CompatibilityInfo compat){  if (mSystem != null) {    mSystem.updateConfiguration(config,metrics,compat);  }}  }
class C{  public SizeRequirements(int min,int pref,int max,float a){  minimum=min;  preferred=pref;  maximum=max;  alignment=a > 1.0f ? 1.0f : a < 0.0f ? 0.0f : a;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private void onHotspotBoundsChanged(){  final int count=mExitingRipplesCount;  final Ripple[] ripples=mExitingRipples;  for (int i=0; i < count; i++) {    ripples[i].onHotspotBoundsChanged();  }  if (mRipple != null) {    mRipple.onHotspotBoundsChanged();  }  if (mBackground != null) {    mBackground.onHotspotBoundsChanged();  }}  }
class C{  public DatabaseException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public boolean isGOEEditor(){  return (m_Editor instanceof GenericObjectEditor);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static int readPackedInt(InputStream is,int numBytes,boolean isLittleEndian) throws IOException {  int value=0;  for (int i=0; i < numBytes; i++) {    int b=is.read();    if (b == -1) {      throw new IOException("no more bytes");    }    if (isLittleEndian) {      value|=(b & 0xFF) << (i * 8);    } else {      value=(value << 8) | (b & 0xFF);    }  }  return value;}  }
class C{  public static void main(String[] args){  try {    ApplicationSettings applicationSettings=ApplicationSettings.getInstance();    applicationSettings.clear();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void save(Writer out) throws IOException {  if (doctype != null) {    out.write("<!DOCTYPE ");    out.write(doctype);    out.write(">\n");  }  XMLWriter writer=new XMLWriter(out);  writer.write((XMLElement)document.getChildren().get(0));}  }
class C{  private void resetDoubleBufferPerWindow(){  if (bufferInfos != null) {    dispose(bufferInfos);    bufferInfos=null;    repaintManager.setPaintManager(null);  }}  }
class C{  @Override public boolean execute(String[] params,String remainder){  boolean doubleClick=Boolean.parseBoolean(WtWindowManager.getInstance().getProperty("ui.doubleclick","false"));  doubleClick=!doubleClick;  WtWindowManager.getInstance().setProperty("ui.doubleclick",Boolean.toString(doubleClick));  if (doubleClick) {    ClientSingletonRepository.getUserInterface().addEventLine(new StandardEventLine("Click mode is now set to double click."));  } else {    ClientSingletonRepository.getUserInterface().addEventLine(new StandardEventLine("Click mode is now set to single click."));  }  return true;}  }
class C{  private void fixbug(Element element){  String value=element.getAttribute(DOMConstants.ATTR_SHAPE_CLASS);  if ("org.xmind.topicShape.rectangle".equals(value)) {    element.setAttribute(DOMConstants.ATTR_SHAPE_CLASS,"org.xmind.topicShape.rect");  }  Iterator<Element> it=DOMUtils.childElementIter(element);  while (it.hasNext()) {    fixbug(it.next());  }}  }
class C{  public Address allocateScalar(RVMClass klass,boolean needsIdentityHash,int identityHashValue){  numObjects++;  BootImageWriter.logAllocation(klass,klass.getInstanceSize());  return ObjectModel.allocateScalar(this,klass,needsIdentityHash,identityHashValue);}  }
class C{  public static boolean testRaySphere(float originX,float originY,float originZ,float dirX,float dirY,float dirZ,float centerX,float centerY,float centerZ,float radiusSquared){  float Lx=centerX - originX;  float Ly=centerY - originY;  float Lz=centerZ - originZ;  float tca=Lx * dirX + Ly * dirY + Lz * dirZ;  float d2=Lx * Lx + Ly * Ly + Lz * Lz - tca * tca;  if (d2 > radiusSquared)   return false;  float thc=(float)Math.sqrt(radiusSquared - d2);  float t0=tca - thc;  float t1=tca + thc;  return t0 < t1 && t1 >= 0.0f;}  }
class C{  public boolean isManagedByCustodian(){  PrefServiceBridge prefs=PrefServiceBridge.getInstance();  if (showGeolocationSites()) {    return prefs.isAllowLocationManagedByCustodian();  }  if (showCameraSites()) {    return prefs.isCameraManagedByCustodian();  }  if (showMicrophoneSites()) {    return prefs.isMicManagedByCustodian();  }  return false;}  }
class C{  public boolean hasHref(){  return getHref() != null;}  }
class C{  public boolean evaluate(Node contextNode,Node xpathnode,String str,Node namespaceNode) throws TransformerException {  if (!str.equals(xpathStr) || xpathExpression == null) {    if (xpf == null) {      xpf=XPathFactory.newInstance();      try {        xpf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,Boolean.TRUE);      } catch (      XPathFactoryConfigurationException ex) {        throw new TransformerException("empty",ex);      }    }    XPath xpath=xpf.newXPath();    xpath.setNamespaceContext(new DOMNamespaceContext(namespaceNode));    xpathStr=str;    try {      xpathExpression=xpath.compile(xpathStr);    } catch (    XPathExpressionException ex) {      throw new TransformerException("empty",ex);    }  }  try {    Boolean result=(Boolean)xpathExpression.evaluate(contextNode,XPathConstants.BOOLEAN);    return result.booleanValue();  } catch (  XPathExpressionException ex) {    throw new TransformerException("empty",ex);  }}  }
class C{  public static String cleanupEscapedCharForXML(char escapedChar,String toClean){  if (toClean == null || toClean.indexOf(escapedChar) == -1 || toClean.indexOf('\\') == -1) {    return toClean;  }  StringBuilder buf=new StringBuilder(toClean.length());  char[] chars=toClean.toCharArray();  int i;  for (i=0; i < chars.length - 1; ++i) {    if (chars[i] != '\\' || chars[i + 1] != escapedChar) {      buf.append(chars[i]);    } else {      buf.append("&#x" + Integer.toString((chars[i + 1]),16) + ";");      i++;    }  }  if (i == chars.length - 1) {    buf.append(chars[chars.length - 1]);  }  return buf.toString();}  }
class C{  synchronized int allocate(GlowEntity entity){  if (entity.id != 0) {    throw new IllegalStateException("Entity already has an id assigned.");  }  int startedAt=lastId;  for (int id=lastId + 1; id != startedAt; ++id) {    if (id == -1 || id == 0)     continue;    if (usedIds.add(id)) {      entity.id=id;      lastId=id;      return id;    }  }  throw new IllegalStateException("No free entity ids");}  }
class C{  public static void checkMainThread(){  checkState(Thread.currentThread().equals(Looper.getMainLooper().getThread()),"Method cannot be called off the main application thread (on: %s)",Thread.currentThread().getName());}  }
class C{  public void reset(Reader in){  lexer.yyreset(in);  reset();}  }
class C{  @Override public void agg(Object newVal){  if (newVal instanceof byte[]) {    ByteBuffer buffer=ByteBuffer.wrap((byte[])newVal);    buffer.rewind();    while (buffer.hasRemaining()) {      byte[] valueByte=new byte[buffer.getInt()];      buffer.get(valueByte);      BigDecimal valueBigDecimal=DataTypeUtil.byteToBigDecimal(valueByte);      aggVal=aggVal.add(valueBigDecimal);      count+=buffer.getDouble();      firstTime=false;    }    return;  }  if (firstTime) {    aggVal=(BigDecimal)newVal;    firstTime=false;  } else {    aggVal=aggVal.add((BigDecimal)newVal);  }  count++;}  }
class C{  public void close(){  CloseableUtils.tryToClose(mRtpTransmitter);  CloseableUtils.tryToClose(mRtcpTransmitter);  CloseableUtils.tryToClose(mRtpReceiver);  CloseableUtils.tryToClose(mRtcpReceiver);  mRtpStreamListener=null;}  }
class C{  public boolean hasInfo(){  return fSeverity == FATAL || fSeverity == ERROR || fSeverity == WARNING || fSeverity == INFO;}  }
class C{  public SignalHeadTableAction(String s){  super(s);  if (jmri.InstanceManager.getNullableDefault(jmri.SignalHeadManager.class) == null) {    setEnabled(false);  }}  }
class C{  public void closeJDBCConnection(Connection conn){  try {    if (conn != null) {      conn.close();    }  } catch (  SQLException sqle) {    subclassLogWrapper("Unexpected exception while closing database connection.");  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @SuppressWarnings("rawtypes") public static void writeJSONString(Map map,Writer out) throws IOException {  if (map == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=map.entrySet().iterator();  out.write('{');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Map.Entry entry=(Map.Entry)iter.next();    out.write('\"');    out.write(escape(String.valueOf(entry.getKey())));    out.write('\"');    out.write(':');    JSONValue.writeJSONString(entry.getValue(),out);  }  out.write('}');}  }
class C{  public GeoSpatialTestVocabulary(){  super();}  }
class C{  public Enumeration enumerateAttributes(){  if (m_Dataset == null) {    throw new UnassignedDatasetException("Instance doesn't have access to a dataset!");  }  return m_Dataset.enumerateAttributes();}  }
class C{  public void moveToTop(Pinger pinger){  mPingers.remove(pinger);  mPingers.add(0,pinger);  notifyDataSetChanged();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  boolean convexHullAroundEachFeature=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  convexHullAroundEachFeature=Boolean.parseBoolean(args[2]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numRecs=input.getNumberOfRecords();    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYGON,fields);    output.setProjectionStringFromOtherShapefile(input);    if (convexHullAroundEachFeature && (shapeType.getBaseType() == ShapeType.POLYLINE || shapeType.getBaseType() == ShapeType.POLYGON)) {      FID=0;      n=0;      oneHundredthTotal=numRecs / 100;      progress=0;      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      n=0;      for (      ShapeFileRecord record : input.records) {        FID++;        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            com.vividsolutions.jts.geom.Geometry ch=recJTSPoly[a].convexHull();            if (ch instanceof com.vividsolutions.jts.geom.Polygon) {              com.vividsolutions.jts.geom.Polygon chPoly=(com.vividsolutions.jts.geom.Polygon)ch;              ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();              int[] parts=new int[chPoly.getNumInteriorRing() + 1];              Coordinate[] buffCoords=chPoly.getExteriorRing().getCoordinates();              for (i=0; i < buffCoords.length; i++) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }              for (int b=0; b < chPoly.getNumInteriorRing(); b++) {                parts[b + 1]=pnts.size();                buffCoords=chPoly.getInteriorRingN(b).getCoordinates();                for (i=buffCoords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));                }              }              PointsList pl=new PointsList(pnts);              whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());              Object[] rowData=new Object[1];              rowData[0]=new Double(FID);              output.addRecord(wbPoly,rowData);            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress(progress);        }      }    } else {      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      ArrayList<Coordinate> coordsList=new ArrayList<>();      n=0;      oneHundredthTotal=numRecs / 100;      progress=0;      FID=0;      for (      ShapeFileRecord record : input.records) {        FID++;        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (i=0; i < recJTSPoly.length; i++) {            Coordinate[] coords=recJTSPoly[i].getCoordinates();            for (int a=0; a < coords.length; a++) {              coordsList.add(coords[a]);            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      int numPoints=coordsList.size();      Coordinate[] coords=new Coordinate[numPoints];      for (i=0; i < numPoints; i++) {        coords[i]=coordsList.get(i);      }      GeometryFactory factory=new GeometryFactory();      com.vividsolutions.jts.geom.MultiPoint mp=factory.createMultiPoint(coords);      updateProgress("Calculating convex hull:",-1);      com.vividsolutions.jts.geom.Geometry ch=mp.convexHull();      if (ch instanceof com.vividsolutions.jts.geom.Polygon) {        com.vividsolutions.jts.geom.Polygon chPoly=(com.vividsolutions.jts.geom.Polygon)ch;        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts=new int[chPoly.getNumInteriorRing() + 1];        Coordinate[] buffCoords=chPoly.getExteriorRing().getCoordinates();        if (!Topology.isClockwisePolygon(buffCoords)) {          for (i=buffCoords.length - 1; i >= 0; i--) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        } else {          for (i=0; i < buffCoords.length; i++) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        }        for (int b=0; b < chPoly.getNumInteriorRing(); b++) {          parts[b + 1]=pnts.size();          buffCoords=chPoly.getInteriorRingN(b).getCoordinates();          if (Topology.isClockwisePolygon(buffCoords)) {            for (i=buffCoords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          } else {            for (i=0; i < buffCoords.length; i++) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          }        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());        Object[] rowData=new Object[1];        rowData[0]=new Double(FID);        output.addRecord(wbPoly,rowData);      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public QuestCompletedCondition(final String questname){  this.questname=checkNotNull(questname);}  }
class C{  byte dirTypeForward(){  lastChar=text.charAt(charIndex);  if (Character.isHighSurrogate(lastChar)) {    int codePoint=Character.codePointAt(text,charIndex);    charIndex+=Character.charCount(codePoint);    return Character.getDirectionality(codePoint);  }  charIndex++;  byte dirType=getCachedDirectionality(lastChar);  if (isHtml) {    if (lastChar == '<') {      dirType=skipTagForward();    } else     if (lastChar == '&') {      dirType=skipEntityForward();    }  }  return dirType;}  }
class C{  public void dispose(){  m_selectionHistory.removeHistoryListener(m_selectionHistoryListener);  m_graph.removeListener(m_graphSelectionListener);  m_tree.removeMouseListener(m_treeMouseListener);  m_tree.removeTreeSelectionListener(m_treeSelectionListener);  m_tree.setSelectionModel(new DefaultTreeSelectionModel());}  }
class C{  public SdfWriter(final File outputDir,final long sizeLimit,final PrereadType prereadType,final boolean hasQuality,boolean hasNames,boolean compressed,final SequenceType type){  super(prereadType,hasQuality,hasNames,compressed,type);  mOutputDir=outputDir;  FileUtils.ensureOutputDirectory(mOutputDir);  setSizeLimit(sizeLimit);  mMaxSuffixLength=0;  openSeqIndex();  if (mHasNames) {    openLabelIndex();    openLabelSuffixIndex();  }}  }
class C{  private static String toString(final Iterable<String> values){  final StringBuilder sb=new StringBuilder();  boolean first=true;  for (  String s : values) {    if (first) {      first=false;    } else {      sb.append(",");    }    sb.append(s);  }  final String s=sb.toString();  return s;}  }
class C{  public boolean removeParser(Parser parser){  removeParserNotices(parser);  boolean removed=parsers.remove(parser);  if (removed) {    textArea.fireParserNoticesChange();  }  return removed;}  }
class C{  public void advance(){  if (!isEmpty())   pos++;}  }
class C{  private static ResultPoint[] expandSquare(ResultPoint[] cornerPoints,float oldSide,float newSide){  float ratio=newSide / (2 * oldSide);  float dx=cornerPoints[0].getX() - cornerPoints[2].getX();  float dy=cornerPoints[0].getY() - cornerPoints[2].getY();  float centerx=(cornerPoints[0].getX() + cornerPoints[2].getX()) / 2.0f;  float centery=(cornerPoints[0].getY() + cornerPoints[2].getY()) / 2.0f;  ResultPoint result0=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);  ResultPoint result2=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);  dx=cornerPoints[1].getX() - cornerPoints[3].getX();  dy=cornerPoints[1].getY() - cornerPoints[3].getY();  centerx=(cornerPoints[1].getX() + cornerPoints[3].getX()) / 2.0f;  centery=(cornerPoints[1].getY() + cornerPoints[3].getY()) / 2.0f;  ResultPoint result1=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);  ResultPoint result3=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);  return new ResultPoint[]{result0,result1,result2,result3};}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public static Intent createAddToHomeIntent(String url,String title,Bitmap icon){  Intent shortcutIntent=createShortcutIntent(url);  return createAddToHomeIntent(url,title,icon,shortcutIntent);}  }
class C{  public boolean isSecure(){  return false;}  }
class C{  public void internalFrameClosing(InternalFrameEvent e){  if (e.getSource() == controlPanel) {    throttleWindow.getViewControlPanel().setSelected(false);    controlPanel.setVisible(false);  } else   if (e.getSource() == addressPanel) {    throttleWindow.getViewAddressPanel().setSelected(false);    addressPanel.setVisible(false);  } else   if (e.getSource() == functionPanel) {    throttleWindow.getViewFunctionPanel().setSelected(false);    functionPanel.setVisible(false);  } else {    try {      if ((e.getSource() instanceof JInternalFrame)) {        Component[] cmps=((JInternalFrame)e.getSource()).getContentPane().getComponents();        int i=0;        while ((i < cmps.length) && (!(cmps[i] instanceof Jynstrument))) {          i++;        }        if ((i < cmps.length) && (cmps[i] instanceof Jynstrument)) {          ((Jynstrument)cmps[i]).exit();        }      }    } catch (    Exception exc) {      if (log.isDebugEnabled()) {        log.debug("Got exception, can ignore :" + exc);      }    }  }}  }
class C{  public void insertSeparator(int index){  if (index < 0) {    throw new IllegalArgumentException("index less than zero.");  }  ensurePopupMenuCreated();  popupMenu.insert(new JPopupMenu.Separator(),index);}  }
class C{  public WriteStream(StreamImpl source){  init(source);}  }
class C{  public static CMSSignedData replaceSigners(CMSSignedData signedData,SignerInformationStore signerInformationStore){  CMSSignedData cms=new CMSSignedData(signedData);  cms.signerInfoStore=signerInformationStore;  ASN1EncodableVector digestAlgs=new ASN1EncodableVector();  ASN1EncodableVector vec=new ASN1EncodableVector();  Iterator it=signerInformationStore.getSigners().iterator();  while (it.hasNext()) {    SignerInformation signer=(SignerInformation)it.next();    digestAlgs.add(CMSSignedHelper.INSTANCE.fixAlgID(signer.getDigestAlgorithmID()));    vec.add(signer.toASN1Structure());  }  ASN1Set digests=new DERSet(digestAlgs);  ASN1Set signers=new DERSet(vec);  ASN1Sequence sD=(ASN1Sequence)signedData.signedData.toASN1Primitive();  vec=new ASN1EncodableVector();  vec.add(sD.getObjectAt(0));  vec.add(digests);  for (int i=2; i != sD.size() - 1; i++) {    vec.add(sD.getObjectAt(i));  }  vec.add(signers);  cms.signedData=SignedData.getInstance(new BERSequence(vec));  cms.contentInfo=new ContentInfo(cms.contentInfo.getContentType(),cms.signedData);  return cms;}  }
class C{  public ComboBox(Object... items){  this(new DefaultListModel(items));}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (baseFeatureID) {case RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER:    return RegularExpressionPackage.IDENTITY_ESCAPE_SEQUENCE__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public UpdateManagerEvent(Object source,BufferedImage bi,List das){  super(source);  this.image=bi;  this.dirtyAreas=das;  this.clearPaintingTransform=false;}  }
class C{  public Chunk handleChunk(Chunk request){  return null;}  }
class C{  public boolean hasNicknameExt(){  return hasExtension(GphotoNickname.class);}  }
class C{  public boolean addRow(TableEntry entry){  try {    int row=list.size();    list.add(entry);    fireTableRowsInserted(row,row);  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  @Override public String words(int numberOfWords){  if (numberOfWords < 1) {    throw new IllegalArgumentException(INVALID_ARGUMENT_ERROR_MSG);  }  List<String> loremWords=new ArrayList<>();  for (int i=0; i < numberOfWords; i++) {    loremWords.add(word());  }  return TextUtils.join(" ",loremWords);}  }
class C{  public void actionPerformed(ActionEvent e){  SessionEditor sessionEditor=this.desktop.getFrontmostSessionEditor();  SessionEditorWorkbench graph=sessionEditor.getSessionWorkbench();  int ret=JOptionPane.showConfirmDialog(JOptionUtils.centeringComp(),"Delete nodes?","Confirm",JOptionPane.OK_CANCEL_OPTION);  if (ret == JOptionPane.OK_OPTION) {    graph.deleteSelectedObjects();  }}  }
class C{  public long putWithOffset(final int[] ngram,final int startPos,final int endPos,final long contextOffset,final T val){  final int ngramOrder=endPos - startPos - 1;  final long key=combineToKey(ngram[endPos - 1],contextOffset);  final HashMap map=getHashMapForOrder(ngramOrder);  return putHelp(map,ngram,startPos,endPos,key,val,false);}  }
class C{  public static boolean isUnary(@Nullable String packageName,@NotNull String subName){  return false;}  }
class C{  public static TsGFciRunner serializableInstance(){  return new TsGFciRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public AnnotationTypeDeclaration newAnnotationTypeDeclaration(){  AnnotationTypeDeclaration result=new AnnotationTypeDeclaration(this);  return result;}  }
class C{  public BasicEntity(final String imageLocation,final OdorWorld world){  super(STATIC_IMAGE_DIR + imageLocation,world);}  }
class C{  public final void writeBoolean(boolean v) throws IOException {  write(v ? 1 : 0);}  }
class C{  public InMemoryConnectionStore(){  this(DEFAULT_CACHE_SIZE,DEFAULT_EXPIRATION_THRESHOLD);}  }
class C{  private int distance2(Point p0,Point p1){  int d0=Math.abs(p0.x - p1.x);  int d1=Math.abs(p0.y - p1.y);  return d0 * d0 + d1 * d1;}  }
class C{  private void initTestInputPanel(){  network=networkPanel.getNetwork();  ((NumericTable)table.getData()).setIterationMode(iterationMode);  JButton test=new JButton(testRowAction);  advance=new JButton(advanceRowAction);  JButton testTable=new JButton(testTableAction);  JCheckBox iterationCheckBox=new JCheckBox(iterationModeAction);  iterationCheckBox.setSelected(iterationMode);  toolbars.add(table.getToolbarEditRows());  JToolBar testToolBar=new JToolBar();  testToolBar.add(test);  testToolBar.add(advance);  testToolBar.add(testTable);  testToolBar.add(iterationCheckBox);  toolbars.add(testToolBar);}  }
class C{  public void undelete(){  isDeleted=false;}  }
class C{  public void addModel(ModelRenderer model,float x,float y,float z){  addModel(model,x,y,z,false);}  }
class C{  public static Intent buildFileProviderReadUriIntent(Context context,String pathName,String action,String type){  Uri uri=FileProvider.getUriForFile(context,getFileProviderAuthority(),new File(pathName));  Intent intent=new Intent().setAction(action).setDataAndType(uri,type);  grantUriPermissions(context,intent,Intent.FLAG_GRANT_READ_URI_PERMISSION);  return intent;}  }
class C{  public final void testGenerateSeedint03(){  byte[] myBytes1;  byte[] myBytes2;  for (int i=0; i < LENGTH; i+=INCR) {    int n=0;    myBytes1=sr.generateSeed(i);    myBytes2=sr.generateSeed(i);    for (int j=0; j < i; j++) {      if (myBytes1[j] == myBytes2[j]) {        n++;      }    }    assertFalse("unexpected: n*2 > i  :: i=" + i + " n="+ n,n * 2 > i);  }}  }
class C{  private org.carbondata.format.DataType fromWrapperToExternalDataType(DataType dataType){  if (null == dataType) {    return null;  }switch (dataType) {case STRING:    return org.carbondata.format.DataType.STRING;case INT:  return org.carbondata.format.DataType.INT;case LONG:return org.carbondata.format.DataType.LONG;case DOUBLE:return org.carbondata.format.DataType.DOUBLE;case DECIMAL:return org.carbondata.format.DataType.DECIMAL;case TIMESTAMP:return org.carbondata.format.DataType.TIMESTAMP;case ARRAY:return org.carbondata.format.DataType.ARRAY;case STRUCT:return org.carbondata.format.DataType.STRUCT;default :return org.carbondata.format.DataType.STRING;}}  }
class C{  public static int paintSyntaxLine(Segment line,Token tokens,SyntaxStyle[] styles,TabExpander expander,Graphics gfx,int x,int y){  Font defaultFont=gfx.getFont();  Color defaultColor=gfx.getColor();  int offset=0;  for (; ; ) {    byte id=tokens.id;    if (id == Token.END) {      break;    }    int length=tokens.length;    if (id == Token.NULL) {      if (!defaultColor.equals(gfx.getColor())) {        gfx.setColor(defaultColor);      }      if (!defaultFont.equals(gfx.getFont())) {        gfx.setFont(defaultFont);      }    } else {      styles[id].setGraphicsFlags(gfx,defaultFont);    }    line.count=length;    x=Utilities.drawTabbedText(line,x,y,gfx,expander,0);    line.offset+=length;    offset+=length;    tokens=tokens.next;  }  return x;}  }
class C{  public static ExampleSet createExampleSet(Object[][] data,int classColumn){  if (data.length == 0) {    throw new RuntimeException("ExampleSetFactory.createExampleSet(Object[][], int): data matrix is not allowed to be empty.");  }  Object[][] dataWithoutLabel=new Object[data.length][data[0].length - 1];  Object[] labels=new Object[data.length];  for (int e=0; e < data.length; e++) {    int counter=0;    for (int a=0; a < data[e].length; a++) {      if (a == classColumn) {        labels[e]=data[e][a];      } else {        dataWithoutLabel[e][counter++]=data[e][a];      }    }  }  return createExampleSet(dataWithoutLabel,labels);}  }
class C{  private CIMInstance findCascadingInitiatorGroup(StorageSystem storage,ExportMask mask,CIMObjectPath cigPath,List<CIMObjectPath> initiatorGroupPaths){  CloseableIterator<CIMInstance> cigInstances=null;  try {    _log.info(String.format("findCascadingInitiatorGroup - Trying to find cascading initiator group for mask: %s",mask.getMaskName()));    CIMInstance maskingViewInstance=this.maskingViewExists(storage,mask.getMaskName());    if (maskingViewInstance == null) {      _log.info(String.format("findCascadingInitiatorGroup - Could not find a masking view associated with export mask: %s",mask.getMaskName()));      return null;    }    _log.info(String.format("findCascadingInitiatorGroup - Trying to find initiator group with paths: %s",Joiner.on(',').join(initiatorGroupPaths)));    cigInstances=_helper.getAssociatorInstances(storage,maskingViewInstance.getObjectPath(),null,SmisConstants.SE_INITIATOR_MASKING_GROUP,null,null,SmisConstants.PS_ELEMENT_NAME);    if (!cigInstances.hasNext()) {      _log.info(String.format("findCascadingInitiatorGroup - There is no cascading initiator group associated with export mask: %s",mask.getMaskName()));      return null;    }    CIMInstance cigInstance=cigInstances.next();    if (_helper.isCascadedIG(storage,cigInstance.getObjectPath())) {      return cigInstance;    }    return null;  } catch (  Exception e) {    _log.error(String.format("removeInitiator failed - maskName: %s",mask.getMaskName()),e);    String opName=ResourceOperationTypeEnum.DELETE_EXPORT_INITIATOR.getName();    ServiceError serviceError=DeviceControllerException.errors.jobFailedOpMsg(opName,e.getMessage());  } finally {    if (cigInstances != null) {      cigInstances.close();    }  }  _log.info("findCascadingInitiatorGroup - Did not find enough child initiator groups to consider any existing cascading initiator group a proper fit");  return null;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS:    getAstStructuralMembers().clear();  getAstStructuralMembers().addAll((Collection<? extends TStructMember>)newValue);return;case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__STRUCTURAL_TYPE:setStructuralType((TStructuralType)newValue);return;case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS:getGenStructuralMembers().clear();getGenStructuralMembers().addAll((Collection<? extends TStructMember>)newValue);return;case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS:getPostponedSubstitutions().clear();getPostponedSubstitutions().addAll((Collection<? extends TypeVariableMapping>)newValue);return;case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__DEFINED_TYPING_STRATEGY:setDefinedTypingStrategy((TypingStrategy)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  static Method findMethod(Class<?> cls,String methodName,int argCount,Class args[]){  if (methodName == null) {    return null;  }  return internalFindMethod(cls,methodName,argCount,args);}  }
class C{  public static BufferedImage createPattern(String pattern){  return createPattern(pattern,defaultDimension,defaultScale,defaultLineColor,defaultBackColor);}  }
class C{  private void filterPages(){  while (pages.size() > 50) {    pages.remove(50);  }  for (int i=0; i < pages.size(); ++i) {    String page=pages.get(i);    if (page.length() > 256) {      pages.set(i,page.substring(0,256));    }  }}  }
class C{  protected boolean examineExample(int i2) throws Exception {  double y2, F2;  int i1=-1;  y2=m_class[i2];  if (m_I0.contains(i2)) {    F2=m_errors[i2];  } else {    F2=SVMOutput(i2,m_data.instance(i2)) + m_b - y2;    m_errors[i2]=F2;    if ((m_I1.contains(i2) || m_I2.contains(i2)) && (F2 < m_bUp)) {      m_bUp=F2;      m_iUp=i2;    } else     if ((m_I3.contains(i2) || m_I4.contains(i2)) && (F2 > m_bLow)) {      m_bLow=F2;      m_iLow=i2;    }  }  boolean optimal=true;  if (m_I0.contains(i2) || m_I1.contains(i2) || m_I2.contains(i2)) {    if (m_bLow - F2 > 2 * m_tol) {      optimal=false;      i1=m_iLow;    }  }  if (m_I0.contains(i2) || m_I3.contains(i2) || m_I4.contains(i2)) {    if (F2 - m_bUp > 2 * m_tol) {      optimal=false;      i1=m_iUp;    }  }  if (optimal) {    return false;  }  if (m_I0.contains(i2)) {    if (m_bLow - F2 > F2 - m_bUp) {      i1=m_iLow;    } else {      i1=m_iUp;    }  }  if (i1 == -1) {    throw new Exception("This should never happen!");  }  return takeStep(i1,i2,F2);}  }
class C{  public SuffixStringMatcher(Collection suffixes){  super();  Iterator iter=suffixes.iterator();  while (iter.hasNext())   addPatternBackward((String)iter.next());}  }
class C{  public Boolean isLogBeforeScripts(){  return logBeforeScripts;}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Border createRidgeBorder(int thickness){  return createCSSBorder(TYPE_RIDGE,thickness);}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/metrics/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
class C{  public void reloadListening(){  if (mJmdns != null) {    mJmdns.unregisterAllServices();    mMulticastLock.release();    mMulticastLock.acquire();    mJmdns.addServiceListener("_ipp3._tcp.local.",this);  }}  }
class C{  protected PortalSetupDescriptor read(final Element element,final int x,final int y,final Object identifier){  return new PortalSetupDescriptor(x,y,identifier);}  }
class C{  protected void clearCache(){  classMethodMaps.clear();  cachedClassNames=new HashSet();}  }
class C{  public static Builder builder(){  return new Builder(new ReconfigureRequest());}  }
class C{  public String refreshSaveSuccessMessage(){  if (onfe != null) {    addMessage(null,FacesMessage.SEVERITY_ERROR,onfe.getMessageKey(),onfe.getMessageParams());    onfe=null;  } else {    addMessage(null,FacesMessage.SEVERITY_INFO,INFO_UDADEFINITIONS_SAVED);  }  controller.setModel(null);  return OUTCOME_SUCCESS;}  }
class C{  public Record(int channelId){  super();  addParameterToRequest("channel",channelId);}  }
class C{  public void add(ResourceCollection rc){  classFiles.add(rc);}  }
class C{  static int deriveARGB(Color color1,Color color2,float midPoint){  int r=color1.getRed() + Math.round((color2.getRed() - color1.getRed()) * midPoint);  int g=color1.getGreen() + Math.round((color2.getGreen() - color1.getGreen()) * midPoint);  int b=color1.getBlue() + Math.round((color2.getBlue() - color1.getBlue()) * midPoint);  int a=color1.getAlpha() + Math.round((color2.getAlpha() - color1.getAlpha()) * midPoint);  return ((a & 0xFF) << 24) | ((r & 0xFF) << 16) | ((g & 0xFF) << 8)| (b & 0xFF);}  }
class C{  public void enqueue(int v){  if (size >= elements.length) {    int[] temp=new int[elements.length * 2];    System.arraycopy(elements,0,temp,0,elements.length);    elements=temp;  }  elements[size++]=v;}  }
class C{  private void invalidateSession() throws InvalidSession {  final String methodName="invalidateSession(): ";  log.trace(methodName + "Entry");  try {    String sessionId=_sslUtil.getCookie(SSLUtil.VASA_SESSIONID_STR);    log.debug(methodName + "Got existing session ID from cookie[" + sessionId+ "]");    if (sessionId != null) {      SessionContext.removeSession(sessionId);    }    log.trace(methodName + "Removed session ID [" + sessionId+ "] from session ID list");    _sslUtil.setCookie(SSLUtil.VASA_SESSIONID_STR,SessionContext.INVALID_SESSION_ID);    log.trace(methodName + "Set value of current session ID as invalid");    _vpInfo.setSessionId(SessionContext.INVALID_SESSION_ID);  } catch (  Exception e) {    log.error(methodName + "Could not find session context",e);    throw FaultUtil.InvalidSession("Could not find session context " + e);  }  log.trace(methodName + "Exit");}  }
class C{  public void closeJDBCResultSet(ResultSet aResultSet){  try {    if (aResultSet != null) {      aResultSet.close();    }  } catch (  SQLException sqle) {    subclassLogWrapper("Unexpected exception while closing database result set.");  }}  }
class C{  public static int countOfAbsoluteOthers(int[] others,int src,int dest,boolean removeDest){  int countOfOthers=0;  for (int index=0; index < others.length; index++) {    if ((others[index] != src) && ((others[index] != dest) || !removeDest)) {      countOfOthers++;    }  }  return countOfOthers;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (is_ValueChanged("DateFrom"))   setDateFrom(TimeUtil.getDay(getDateFrom()));  if (is_ValueChanged("DateTo"))   setDateTo(TimeUtil.getDay(getDateTo()));  return true;}  }
class C{  private void decorateFromFilePendingChanges(final IResource resource,final IDecoration decoration,final TFSRepository repository,final String resourcePath){  final PendingChange pendingChange=repository.getPendingChangeCache().getPendingChangeByLocalPath(resourcePath);  if (pendingChange == null || pendingChange.getChangeType() == null) {    return;  }  final ChangeType pendingChangeType=pendingChange.getChangeType();  if (pendingChangeType.contains(ChangeType.ADD)) {    decoration.addOverlay(imageHelper.getImageDescriptor(ADD_ICON));    decoration.addPrefix("+");  } else   if (pendingChangeType.contains(ChangeType.EDIT)) {    decoration.addOverlay(imageHelper.getImageDescriptor(EDIT_ICON));    decoration.addPrefix(">");  } else   if (pendingChangeType.contains(ChangeType.LOCK)) {    decoration.addOverlay(imageHelper.getImageDescriptor(LOCK_ICON));  } else   if (!pendingChangeType.isEmpty()) {    decoration.addOverlay(imageHelper.getImageDescriptor(CHANGE_ICON));  }}  }
class C{  @Override public boolean click(String obj,String corner) throws UiObjectNotFoundException {  return click(getUiObject(obj),corner);}  }
class C{  public ReadOnlyKeysRaba(final int fromIndex,final int toIndex,final int capacity,final byte[][] a){  super(fromIndex,toIndex,capacity,a);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:56.100 -0500",hash_original_method="3151080AB39B36B6870FE53962DD218F",hash_generated_method="51B002A79014304904E6D6D37A8D4547") private Locale(boolean unused,String lowerCaseLanguageCode,String upperCaseCountryCode){  this.languageCode=lowerCaseLanguageCode;  this.countryCode=upperCaseCountryCode;  this.variantCode="";}  }
class C{  private void checkEmptyIterator(Iterator i){  try {    i.next();    fail("Expected NoSuchElementException");  } catch (  NoSuchElementException e) {  }  assertFalse("iterator should be empty",i.hasNext());}  }
class C{  public Builder add(String fieldName,int[] values){  intent.putExtra(fieldName,values);  return this;}  }
class C{  private ProtectionSet updateProtectionSet(ProtectionSet protectionSet,CGRequestParams params) throws InternalException {  StringSet protectionSetVolumes=new StringSet();  _log.info(String.format("Updating protection set [%s]",protectionSet.getLabel()));  List<URI> volumesInCreateRequest=new ArrayList<URI>();  for (  CreateRSetParams rset : params.getRsets()) {    for (    CreateVolumeParams volume : rset.getVolumes()) {      volumesInCreateRequest.add(volume.getVolumeURI());    }  }  for (  CreateRSetParams rset : params.getRsets()) {    for (    CreateVolumeParams volume : rset.getVolumes()) {      if (protectionSet.getVolumes() != null && protectionSet.getVolumes().contains(volume.getVolumeURI().toString())) {        continue;      } else {        Volume vol=_dbClient.queryObject(Volume.class,volume.getVolumeURI());        if (protectionSet.getProject() == null) {          protectionSet.setProject(vol.getProject().getURI());        }        vol.setProtectionSet(new NamedURI(protectionSet.getId(),protectionSet.getLabel()));        if (vol.checkPersonality(Volume.PersonalityTypes.SOURCE.toString())) {          vol.setAccessState(Volume.VolumeAccessState.READWRITE.name());          vol.setLinkStatus(Volume.LinkStatus.IN_SYNC.name());          List<Volume> existingCgSourceVolumes=RPHelper.getCgSourceVolumes(vol.getConsistencyGroup(),_dbClient);          if (existingCgSourceVolumes != null) {            for (            Volume sourceVolume : existingCgSourceVolumes) {              if (!vol.getId().equals(sourceVolume.getId()) && !volumesInCreateRequest.contains(sourceVolume.getId())) {                _log.info(String.format("Updating source volume %s. Setting access state = %s, link status = %s.  Based on existing CG source volume %s.",vol.getId(),sourceVolume.getAccessState(),sourceVolume.getLinkStatus(),sourceVolume.getId()));                vol.setAccessState(sourceVolume.getAccessState());                vol.setLinkStatus(sourceVolume.getLinkStatus());                break;              }            }          }        } else         if (vol.checkPersonality(Volume.PersonalityTypes.TARGET.toString())) {          vol.setAccessState(Volume.VolumeAccessState.NOT_READY.name());          vol.setLinkStatus(Volume.LinkStatus.IN_SYNC.name());          List<Volume> existingCgTargets=RPHelper.getTargetVolumesForVarray(_dbClient,vol.getConsistencyGroup(),vol.getVirtualArray());          if (existingCgTargets != null && vol.getRpCopyName() != null) {            for (            Volume targetVolume : existingCgTargets) {              if (!vol.getId().equals(targetVolume.getId()) && !volumesInCreateRequest.contains(targetVolume.getId()) && vol.getRpCopyName().equalsIgnoreCase(targetVolume.getRpCopyName())) {                _log.info(String.format("Updating volume %s. Setting access state = %s, link status = %s.  Based on existing CG target volume %s.",vol.getId(),targetVolume.getAccessState(),targetVolume.getLinkStatus(),targetVolume.getId()));                vol.setAccessState(targetVolume.getAccessState());                vol.setLinkStatus(targetVolume.getLinkStatus());                break;              }            }          }        }        _dbClient.updateObject(vol);        protectionSetVolumes.add(vol.getId().toString());        _log.info(String.format("Adding volume [%s] to protection set [%s]",vol.getLabel(),protectionSet.getLabel()));      }    }  }  for (  CreateCopyParams copy : params.getCopies()) {    for (    CreateVolumeParams volume : copy.getJournals()) {      if (protectionSet.getVolumes() != null && protectionSet.getVolumes().contains(volume.getVolumeURI().toString())) {        continue;      } else {        Volume vol=_dbClient.queryObject(Volume.class,volume.getVolumeURI());        vol.setProtectionSet(new NamedURI(protectionSet.getId(),protectionSet.getLabel()));        vol.setAccessState(Volume.VolumeAccessState.NOT_READY.name());        _dbClient.updateObject(vol);        protectionSetVolumes.add(vol.getId().toString());        _log.info(String.format("Adding volume [%s] to protection set [%s]",vol.getLabel(),protectionSet.getLabel()));      }    }  }  if (protectionSet.getVolumes() == null) {    protectionSet.setVolumes(protectionSetVolumes);  } else {    protectionSet.getVolumes().addAll(protectionSetVolumes);  }  _dbClient.updateObject(protectionSet);  return protectionSet;}  }
class C{  public synchronized void save() throws IOException {  try (KeyTabOutputStream kos=new KeyTabOutputStream(new FileOutputStream(tabName))){    kos.writeVersion(kt_vno);    for (int i=0; i < entries.size(); i++) {      kos.writeEntry(entries.elementAt(i));    }  } }  }
class C{  public static void cleanupCollectionLevelSnapshots(SolrZkClient zkClient,String collectionName) throws InterruptedException, KeeperException {  String zkPath=getSnapshotMetaDataZkPath(collectionName,Optional.empty());  try {    Collection<String> snapshots=zkClient.getChildren(zkPath,null,true);    for (    String snapshot : snapshots) {      String path=getSnapshotMetaDataZkPath(collectionName,Optional.of(snapshot));      try {        zkClient.delete(path,-1,true);      } catch (      KeeperException ex) {        if (ex.code() != KeeperException.Code.NONODE) {          throw ex;        }      }    }    zkClient.delete(zkPath,-1,true);  } catch (  KeeperException ex) {    if (ex.code() != KeeperException.Code.NONODE) {      throw ex;    }  }}  }
class C{  public static void unmask(ByteBuffer buf,int mask){  byte b;  int remainder=buf.remaining() % 4;  int remaining=buf.remaining() - remainder;  int end=remaining + buf.position();  while (buf.position() < end) {    int plaintext=buf.getInt(buf.position()) ^ mask;    buf.putInt(plaintext);  }switch (remainder) {case 3:    b=(byte)(buf.get(buf.position()) ^ ((mask >> 24) & 0xff));  buf.put(b);b=(byte)(buf.get(buf.position()) ^ ((mask >> 16) & 0xff));buf.put(b);b=(byte)(buf.get(buf.position()) ^ ((mask >> 8) & 0xff));buf.put(b);break;case 2:b=(byte)(buf.get(buf.position()) ^ ((mask >> 24) & 0xff));buf.put(b);b=(byte)(buf.get(buf.position()) ^ ((mask >> 16) & 0xff));buf.put(b);break;case 1:b=(byte)(buf.get(buf.position()) ^ (mask >> 24));buf.put(b);break;case 0:default :break;}}  }
class C{  protected final JsonToken _handleUnexpectedValue(int c) throws IOException, JsonParseException {  if (c != INT_APOSTROPHE || !isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {    _reportUnexpectedChar(c,"expected a valid value (number, String, array, object, 'true', 'false' or 'null')");  }  int outPtr=0;  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();  final int[] codes=CharTypes.getInputCodeUtf8();  final byte[] inputBuffer=_inputBuffer;  main_loop:   while (true) {    ascii_loop:     while (true) {      if (_inputPtr >= _inputEnd) {        loadMoreGuaranteed();      }      if (outPtr >= outBuf.length) {        outBuf=_textBuffer.finishCurrentSegment();        outPtr=0;      }      int max=_inputEnd;{        int max2=_inputPtr + (outBuf.length - outPtr);        if (max2 < max) {          max=max2;        }      }      while (_inputPtr < max) {        c=(int)inputBuffer[_inputPtr++] & 0xFF;        if (c == INT_APOSTROPHE || codes[c] != 0) {          break ascii_loop;        }        outBuf[outPtr++]=(char)c;      }    }    if (c == INT_APOSTROPHE) {      break main_loop;    }switch (codes[c]) {case 1:      if (c != INT_QUOTE) {        c=_decodeEscaped();      }    break;case 2:  c=_decodeUtf8_2(c);break;case 3:if ((_inputEnd - _inputPtr) >= 2) {c=_decodeUtf8_3fast(c);} else {c=_decodeUtf8_3(c);}break;case 4:c=_decodeUtf8_4(c);outBuf[outPtr++]=(char)(0xD800 | (c >> 10));if (outPtr >= outBuf.length) {outBuf=_textBuffer.finishCurrentSegment();outPtr=0;}c=0xDC00 | (c & 0x3FF);break;default :if (c < INT_SPACE) {_throwUnquotedSpace(c,"string value");}_reportInvalidChar(c);}if (outPtr >= outBuf.length) {outBuf=_textBuffer.finishCurrentSegment();outPtr=0;}outBuf[outPtr++]=(char)c;}_textBuffer.setCurrentLength(outPtr);return JsonToken.VALUE_STRING;}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  public static double[] readDouble1D(){  int n=StdIn.readInt();  double[] a=new double[n];  for (int i=0; i < n; i++) {    a[i]=StdIn.readDouble();  }  return a;}  }
class C{  public void writeExif(Bitmap bmap,String exifOutFileName) throws FileNotFoundException, IOException {  if (bmap == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    bmap.compress(Bitmap.CompressFormat.JPEG,90,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  public LdapUserToken(Authentication auth,String defaultAuthority){  this(auth,new GrantedAuthorityImpl(defaultAuthority));}  }
class C{  public void testTitlePopulation(){  assert getActivity().getTitle().toString().matches("$Triage \\((No|[0-9]+) Patients\\)");}  }
class C{  public AssertingPointsFormat(){  this(TestUtil.getDefaultCodec().pointsFormat());}  }
class C{  public Move decideMove(IGameState gameState){  while (true) {    try {      Move m=readMove(gameState,logic);      if (m == null) {        return null;      }      if (m.isValid(gameState)) {        return m;      }    } catch (    Exception e) {      e.printStackTrace();    }    System.err.println("You entered invalid move. Try again.");  }}  }
class C{  public static final Handler newHandler(Context context){  return new Handler(context.getMainLooper());}  }
class C{  public void testDoCheckWithDefaultNotDetectionResultAndDetectionResultOverridenByConstructor(){  LOGGER.debug("doCheckWithDefaultNotDetectionResultAndDetectionResultOverridenByConstructor");  elements.add(element);  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("testNotIdentical");  mockTestSolutionHandler.addTestSolution(TestSolution.PASSED);  expectLastCall().once();  TextNotIdenticalToAttributeChecker instance=new TextNotIdenticalToAttributeChecker(mockTextElementBuilder,new TextAttributeOfElementBuilder(AttributeStore.ALT_ATTR),new ImmutablePair(TestSolution.NEED_MORE_INFO,DETECTION_MSG),new ImmutablePair(TestSolution.PASSED,""));  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);}  }
class C{  public static char[][] loadImage(File file) throws FileNotFoundException, RuntimeException {  ArrayList<String> rows=BooleanImageLoad.loadImage(file);  String s=rows.get(0);  char[][] img=new char[rows.size()][s.length()];  for (int i=0; i < rows.size(); i++) {    s=rows.get(i);    for (int j=0; j < s.length(); j++) {      img[i][j]=s.charAt(j);    }  }  return img;}  }
class C{  public boolean isShowGridY(){  return mShowGridY;}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.RUNTIME_PROJECT_DEPENDENCY;}  }
class C{  public Where<T,ID> like(String columnName,Object value) throws SQLException {  addClause(new SimpleComparison(columnName,findColumnFieldType(columnName),value,SimpleComparison.LIKE_OPERATION));  return this;}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_2__MORE_CODE_1:    getMoreCode_1().clear();  getMoreCode_1().addAll((Collection<? extends MoreCode_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private final MoveResourceInspectionResult inspectMove(final IResourceTree tree,final IResource source,final IResource target,final int updateFlags,final IProgressMonitor progressMonitor){  log.trace(MessageFormat.format("inspectMove: {0} to {1}",source.getFullPath(),target.getFullPath()));  progressMonitor.beginTask(MessageFormat.format(Messages.getString("TFSMoveDeleteHook.InspectingMoveFromSourceToTargetFormat"),source.getFullPath(),target.getFullPath()),15);  try {    final boolean sourceManaged=TeamUtils.isConfiguredWith(source,TFSRepositoryProvider.PROVIDER_ID);    final boolean targetManaged=TeamUtils.isConfiguredWith(target,TFSRepositoryProvider.PROVIDER_ID);    if (!sourceManaged && !targetManaged) {      log.warn(MessageFormat.format("inspecting resource move from {0} to {1}: neither managed by Team Foundation Server",source.getFullPath(),target.getFullPath()));      return new MoveResourceInspectionResult(ResourceInspectionStatus.DEFER);    } else     if (sourceManaged && !targetManaged) {      final ResourceInspectionResult sourceDetails=inspectResource(tree,source,true,true,DELETE_DENIED_CHANGE_TYPES,updateFlags,false,new SubProgressMonitor(progressMonitor,15));      if (!sourceDetails.getStatus().equals(ResourceInspectionStatus.CONTINUE)) {        return new MoveResourceInspectionResult(sourceDetails.getStatus());      }      final TFSRepository repository=sourceDetails.getRepository();      return new MoveResourceInspectionResult(repository,sourceDetails.isInServer(),sourceDetails.getPendingChanges(),false,null,MoveResourceOperation.DELETE_SOURCE);    } else     if (!sourceManaged && targetManaged) {      final ResourceInspectionResult targetDetails=inspectResource(tree,target,false,true,ADD_DENIED_CHANGE_TYPES,updateFlags,false,new SubProgressMonitor(progressMonitor,15));      if (!targetDetails.getStatus().equals(ResourceInspectionStatus.CONTINUE)) {        return new MoveResourceInspectionResult(targetDetails.getStatus());      }      final TFSRepository repository=targetDetails.getRepository();      return new MoveResourceInspectionResult(repository,false,null,targetDetails.isInServer(),targetDetails.getPendingChanges(),MoveResourceOperation.ADD_TARGET);    } else {      final ResourceInspectionResult sourceDetails=inspectResource(tree,source,true,false,MOVE_DENIED_CHANGE_TYPES,updateFlags,false,new SubProgressMonitor(progressMonitor,5));      final ResourceInspectionStatus sourceStatus=sourceDetails.getStatus();      final ResourceInspectionResult targetDetails=inspectResource(tree,target,false,false,MOVE_DENIED_CHANGE_TYPES,updateFlags,false,new SubProgressMonitor(progressMonitor,5));      final ResourceInspectionStatus targetStatus=targetDetails.getStatus();      if (sourceStatus == ResourceInspectionStatus.DEFER) {        log.debug(MessageFormat.format("Ignoring resource {0} (not in TFS)",source.getLocation().toOSString()));        return new MoveResourceInspectionResult(ResourceInspectionStatus.DEFER);      } else       if (targetStatus == ResourceInspectionStatus.DEFER) {        throw new RuntimeException(MessageFormat.format(Messages.getString("TFSMoveDeleteHook.TargetOfRenameIgnoredByTFSButSourceIsNotFormat"),target.getFullPath(),source.getFullPath()));      }      if (sourceDetails.isIgnored() && targetDetails.isIgnored()) {        log.debug(MessageFormat.format("Ignoring resource {0} because both source and target ignored",source.getLocation().toOSString()));        return new MoveResourceInspectionResult(ResourceInspectionStatus.DEFER);      }      if (!sourceDetails.getRepository().equals(targetDetails.getRepository())) {        throw new RuntimeException(Messages.getString("TFSMoveDeleteHook.SourceAndTargetAreInDifferentWorkspaces"));      }      final TFSRepository repository=sourceDetails.getRepository();      final String sourceServerPath=repository.getWorkspace().getMappedServerPath(source.getLocation().toOSString());      final String targetServerPath=repository.getWorkspace().getMappedServerPath(target.getLocation().toOSString());      if (sourceServerPath == null && targetServerPath == null) {        log.warn(MessageFormat.format("Renaming {0} to {1}, both in cloaked folders, ignoring",source.getFullPath(),target.getFullPath()));        return new MoveResourceInspectionResult(ResourceInspectionStatus.DEFER);      } else       if (sourceServerPath == null) {        throw new RuntimeException(MessageFormat.format(Messages.getString("TFSMoveDeleteHook.CannotRenameSourceToTargetBecauseSourceIsCloakedFormat"),source.getFullPath(),target.getFullPath()));      } else       if (targetServerPath == null) {        throw new RuntimeException(MessageFormat.format(Messages.getString("TFSMoveDeleteHook.CannotRenameSourceToTargetBecauseTargetIsCloakedFormat"),source.getFullPath(),target.getFullPath()));      }      progressMonitor.worked(5);      return new MoveResourceInspectionResult(repository,sourceDetails.isInServer(),sourceDetails.getPendingChanges(),targetDetails.isInServer(),targetDetails.getPendingChanges(),MoveResourceOperation.MOVE,sourceServerPath,targetServerPath);    }  }  finally {    progressMonitor.done();  }}  }
class C{  protected ObjectMatrix1D like1D(int size,int zero,int stride){  throw new InternalError();}  }
class C{  public static void write(String s,long l){  write(s);  write(l);}  }
class C{  public void testCipherSpi02() throws Exception {  Mock_CipherSpi cSpi=new Mock_CipherSpi();  try {    cSpi.engineGetKeySize(null);    fail("UnsupportedOperationException must be thrown");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  public static double normalizeMinusPiPiFast(double angle){  if ((angle >= -Math.PI) && (angle <= Math.PI)) {    return angle;  }  double angleMinusPiPiOrSo=remainderTwoPiFast(angle);  if (angleMinusPiPiOrSo < -Math.PI) {    return -Math.PI;  } else   if (angleMinusPiPiOrSo > Math.PI) {    return Math.PI;  } else {    return angleMinusPiPiOrSo;  }}  }
class C{  public BasicTiledImageLayerBulkDownloader(BasicTiledImageLayer layer,Sector sector,double resolution,FileStore fileStore,BulkRetrievalListener listener){  super(layer,sector,resolution,fileStore,listener);  this.layer=layer;  this.level=this.layer.computeLevelForResolution(sector,resolution);}  }
class C{  public void insert(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode next=location.next;  if (next == null) {    last=ilast;  } else {    next.prev=ilast;  }  location.next=ifirst;  ilast.next=next;  ifirst.prev=location;  cache=null;  insns.removeAll(false);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public void stopThread(){  this.stopUpdates=true;  try {    join();  } catch (  InterruptedException e) {    if (LOGGER.infoEnabled()) {      LOGGER.info("InterruptedException occured while stoping cluster thread : " + e.getMessage());    }  }}  }
class C{  public boolean isClosed(){  return isClosed;}  }
class C{  private void focusClosestNode(int x,int y){  DTNHost closest=w.getHosts().get(0);  double closestDist=Double.MAX_VALUE;  double dist;  Coord clickLoc=getWorldPosition(new Coord(x,y));  for (  DTNHost h : w.getHosts()) {    dist=h.getLocation().distance(clickLoc);    if (dist < closestDist) {      closest=h;      closestDist=dist;    }  }  gui.setFocus(closest);}  }
class C{  protected int consumed(){  return consumed;}  }
class C{  public static String parseRequestParameterAsString(HttpServletRequest request,String parameter){  String result=request.getParameter(parameter);  if (result != null) {    return result.trim();  } else {    return null;  }}  }
class C{  public LongBitSet(long numBits){  this.numBits=numBits;  bits=new long[bits2words(numBits)];  numWords=bits.length;}  }
class C{  public static void putInt(Context context,String key,int value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putInt(key,value);  editor.commit();}  }
class C{  private void printAnnotationFromEditor(final WorkflowAnnotation anno,final Graphics2D g2){  Graphics2D gPr=(Graphics2D)g2.create();  Rectangle2D loc=anno.getLocation();  gPr.translate(loc.getX(),loc.getY());  gPr.setClip(0,0,(int)loc.getWidth(),(int)loc.getHeight());  Dimension size=new Dimension((int)loc.getWidth(),(int)loc.getHeight());  pane.setSize(size);  pane.setText(AnnotationDrawUtils.createStyledCommentString(anno));  pane.setCaretPosition(0);  pane.paint(gPr);  gPr.dispose();}  }
class C{  @Override public String addStepsForCreateFileSystems(Workflow workflow,String waitFor,List<FileDescriptor> filesystems,String taskId) throws InternalException {  List<FileDescriptor> fileDescriptors=FileDescriptor.filterByType(filesystems,new FileDescriptor.Type[]{FileDescriptor.Type.FILE_MIRROR_SOURCE,FileDescriptor.Type.FILE_MIRROR_TARGET,FileDescriptor.Type.FILE_EXISTING_MIRROR_SOURCE},new FileDescriptor.Type[]{});  if (fileDescriptors.isEmpty()) {    log.info("No Create Mirror  Steps required");    return waitFor;  }  log.info("Adding Create Mirror steps for create fileshares");  waitFor=createElementReplicaSteps(workflow,waitFor,fileDescriptors);  return waitFor=CREATE_FILE_MIRRORS_STEP;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  @Override protected void onHandleIntent(Intent intent){  try {    GeofencingEvent geoFenceEvent=GeofencingEvent.fromIntent(intent);    if (geoFenceEvent.hasError()) {      int errorCode=geoFenceEvent.getErrorCode();      Log.e(TAG,"Location Services error: " + errorCode);    } else {      int transitionType=geoFenceEvent.getGeofenceTransition();      if (Geofence.GEOFENCE_TRANSITION_ENTER == transitionType) {        for (        Geofence geofence : geoFenceEvent.getTriggeringGeofences()) {          LocationInfo locationFound=mSharedPrefs.getLocation(Integer.valueOf(geofence.getRequestId()));          Log.d(TAG,"Triggered entering a geofence location: " + locationFound.getName());          String text=String.format(getString(R.string.geofence_location_entering),locationFound.getName());          NotificationUtil.sendSimpleNotification(text,getString(R.string.geofence_location_entering_text),this);          if (locationFound.getSwitchIdx() > 0) {            handleSwitch(locationFound.getSwitchIdx(),locationFound.getSwitchPassword(),true);          }        }      } else       if (Geofence.GEOFENCE_TRANSITION_EXIT == transitionType) {        for (        Geofence geofence : geoFenceEvent.getTriggeringGeofences()) {          LocationInfo locationFound=mSharedPrefs.getLocation(Integer.valueOf(geofence.getRequestId()));          Log.d(TAG,"Triggered leaving a geofence location: " + locationFound.getName());          String text=String.format(getString(R.string.geofence_location_leaving),locationFound.getName());          NotificationUtil.sendSimpleNotification(text,getString(R.string.geofence_location_leaving_text),this);          if (locationFound.getSwitchIdx() > 0)           handleSwitch(locationFound.getSwitchIdx(),locationFound.getSwitchPassword(),false);        }      }    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public NetMember newNetMember(String s,int p){  InetAddress inetAddr=null;  try {    inetAddr=SocketCreator.getLocalHost();  } catch (  UnknownHostException e2) {    throw new RuntimeException("Unable to create an identifier for testing for " + s,e2);  }  return newNetMember(inetAddr,p);}  }
class C{  public VideoStream(){  this(CameraInfo.CAMERA_FACING_BACK);}  }
class C{  protected void prepare(){  p_PackOut_ID=getRecord_ID();  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {  }}  }
class C{  public double latitude(){  return latitude;}  }
class C{  public NotificationChain basicSetPattern(Pattern newPattern,NotificationChain msgs){  Pattern oldPattern=pattern;  pattern=newPattern;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,RegularExpressionPackage.GROUP__PATTERN,oldPattern,newPattern);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void configs(SwtPlatform... platforms){  configs(Arrays.asList(platforms));}  }
class C{  public void parent(String name,String parentName){  ElementType child=getElementType(name);  ElementType parent=getElementType(parentName);  if (child == null) {    throw new Error("No child " + name + " for parent "+ parentName);  }  if (parent == null) {    throw new Error("No parent " + parentName + " for child "+ name);  }  child.setParent(parent);}  }
class C{  protected void fireMenuDragMouseExited(MenuDragMouseEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuDragMouseListener.class) {      ((MenuDragMouseListener)listeners[i + 1]).menuDragMouseExited(event);    }  }}  }
class C{  public void append(int i){  grow(ref.length + 1);  ref.ints[ref.length++]=i;}  }
class C{  public String outputString(Element element){  StringWriter out=new StringWriter();  try {    output(element,out);  } catch (  IOException e) {  }  return out.toString();}  }
class C{  public void mergeObjects(GenericObjectList mergeList){  if (mergeList == null)   return;  Iterator it1=this.listIterator();  Iterator it2=mergeList.listIterator();  while (it1.hasNext()) {    GenericObject outerObj=(GenericObject)it1.next();    while (it2.hasNext()) {      Object innerObj=it2.next();      outerObj.merge(innerObj);    }  }}  }
class C{  protected Type(int typeCode,String typeSig){  this.typeCode=typeCode;  this.typeSig=typeSig;  typeHash.put(typeSig,this);}  }
class C{  public QName(String qname,PrefixResolver resolver){  this(qname,resolver,false);}  }
class C{  private String toRequestURI(final String hostname){  return "http://" + hostname + ":"+ nextPort.getAndIncrement()+ BigdataStatics.getContextPath();}  }
class C{  public GridNioAsyncNotifyFilter(String gridName,Executor exec,IgniteLogger log){  super(GridNioAsyncNotifyFilter.class.getSimpleName());  this.gridName=gridName;  this.log=log;  workerPool=new GridWorkerPool(exec,log);}  }
class C{  public String propertyNamed(String propertyName){  return properties.get(propertyName);}  }
class C{  private void parseMongoUrl(){  if (mongoConfiguration == null) {    String db=null;    String port=null;    List<String> hosts=new ArrayList<String>();    try {      String[] urls=mongo_url.split(";");      int i=0;      for (      String url : urls) {        int index=url.indexOf("mongo://");        url=url.substring(index + "mongo://".length());        String[] hostAndDb=url.split("/");        String hostAndPort=hostAndDb[0];        db=hostAndDb[1];        String[] hostPort=hostAndPort.split(":");        String host=hostPort[0];        port=hostPort[1];        hosts.add(host);        if (db == null || port == null || hosts.isEmpty() || (port != null && port.isEmpty())) {          LOGGER.error("\n\n Fatal Error : Error in MONGO_HOME(" + urls[i] + ") Specification - parsed values of db ["+ db+ "] , port ["+ port+ "] , hosts ["+ hosts+ "]");        }        i++;      }    } catch (    Exception e) {      LOGGER.error("Fatal Error : MONGO_HOME value parsing errors and exception is : " + e.getMessage());    }    mongoConfiguration=new MongoConfiguration();    mongoConfiguration.setDb(db);    mongoConfiguration.setHosts(hosts);    mongoConfiguration.setPort(port);  }}  }
class C{  public ToolBarWestState(){  super("West");}  }
class C{  public final static initDataConsumer asynchronusInitializer(final String name,final int keylength,final ByteOrder objectOrder,final int idxbytes,final int expectedspace){  final initDataConsumer initializer=new initDataConsumer(new RowHandleMap(keylength,objectOrder,idxbytes,expectedspace,name));  final ExecutorService service=Executors.newSingleThreadExecutor();  initializer.setResult(service.submit(initializer));  service.shutdown();  return initializer;}  }
class C{  public void logToggle(){  if (gameScroller.getVisibility() != VISIBLE)   gameScroller.setVisibility(VISIBLE); else   gameScroller.setVisibility(GONE);}  }
class C{  public WifiDirectPeerNetwork(WifiP2pDevice wifiP2pDevice){  this.wifiP2pDevice=wifiP2pDevice;}  }
class C{  @Override public final void postSetUp() throws Exception {  disconnectAllFromDS();  Wait.pause(5000);  final Host host=Host.getHost(0);  vm0=host.getVM(0);  vm1=host.getVM(1);  PORT=((Integer)vm0.invoke(null)).intValue();  vm0.invoke(null);}  }
class C{  public static UIComponent findChild(UIComponent parent,String id){  int sz=parent.getChildCount();  if (sz > 0) {    UIComponent c=null;    List cl=parent.getChildren();    while (--sz >= 0) {      c=(UIComponent)cl.get(sz);      if (id.equals(c.getId())) {        return c;      }    }  }  return null;}  }
class C{  private void sendRegistration(LicenseInfoExt licenseInfo) throws Exception {  _log.info("SendEventScheduler::sendRegistration() for {}",licenseInfo.getLicenseType());  _callHomeEventsFacade.sendRegistrationEvent(licenseInfo,MediaType.APPLICATION_XML_TYPE);}  }
class C{  public void testNextDoubleBounded2(){  for (double least=0.0001; least < 1.0e20; least*=8) {    for (double bound=least * 1.001; bound < 1.0e20; bound*=16) {      double f=ThreadLocalRandom.current().nextDouble(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      double j;      while (i < NCALLS && (j=ThreadLocalRandom.current().nextDouble(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  private Base64(){}  }
class C{  public String toString(){  return this.mode == 'd' ? this.writer.toString() : null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @RequestMapping(value="/routes",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<List<RouteDTO>> activeRoutes(){  Map<String,String> routes=routeLocator.getRoutes();  List<RouteDTO> routeDTOs=new ArrayList<>();  routes.forEach(null);  return new ResponseEntity<>(routeDTOs,HttpStatus.OK);}  }
class C{  private void insertCrlInDb(String key,byte[] encoded) throws SQLException {  Connection c=null;  PreparedStatement s=null;  ResultSet rs=null;  try {    c=getDataSource().getConnection();    s=c.prepareStatement(sqlFindInsert);    s.setString(1,key);    s.setBytes(2,encoded);    s.executeUpdate();  }  finally {    closeQuietly(c,s,rs);  }}  }
class C{  public GzipAsynchInputStream(InputStream is) throws IOException {  super(GzipUtils.createGzipInputStream(is));}  }
class C{  protected void preAdd(Object o){}  }
class C{  public DeterministicKey deriveChild(List<ChildNumber> parentPath,boolean relative,boolean createParent,ChildNumber createChildNumber){  return deriveChild(get(parentPath,relative,createParent),createChildNumber);}  }
class C{  @Override public TopicConnection createTopicConnection(final String userName,final String password) throws JMSException {  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createTopicConnection(" + userName + ", ****)");  }  ActiveMQRASessionFactoryImpl s=new ActiveMQRASessionFactoryImpl(mcf,cm,getResourceAdapter().getTM(),ActiveMQRAConnectionFactory.TOPIC_CONNECTION);  s.setUserName(userName);  s.setPassword(password);  validateUser(s);  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("Created topic connection: " + s);  }  return s;}  }
class C{  private void closeCrawlerLogFiles(){  List<FileHandler> loggerHandlerList=new ArrayList<>();  for (  Handler handler : crawlJob.getJobLogger().getHandlers()) {    if (handler instanceof FileHandler) {      ((FileHandler)handler).close();      loggerHandlerList.add((FileHandler)handler);    }  }  for (  FileHandler fileHandler : loggerHandlerList) {    crawlJob.getJobLogger().removeHandler(fileHandler);  }}  }
class C{  public GenericExpandableListAdapter(Context context,T[] items,int expandedGroupLayout,int collapsedGroupLayout,String searchableProperty,String[] groupFrom,int[] groupTo,int childLayout,int lastChildLayout,String[] childFrom,int[] childTo,int indicatorId){  inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  this.allItems=items;  this.expandedGroupLayout=expandedGroupLayout;  this.collapsedGroupLayout=collapsedGroupLayout;  this.searchableProperty=searchableProperty;  this.groupFrom=groupFrom;  this.groupTo=groupTo;  this.childLayout=childLayout;  this.lastChildLayout=lastChildLayout;  this.childFrom=childFrom;  this.childTo=childTo;  this.indicatorId=indicatorId;  filteredItems=Arrays.asList(items);}  }
class C{  public boolean isPayToScriptHash(){  byte[] program=getProgram();  return program.length == 23 && (program[0] & 0xff) == OP_HASH160 && (program[1] & 0xff) == 0x14 && (program[22] & 0xff) == OP_EQUAL;}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.num(xctxt) * m_right.num(xctxt));}  }
class C{  public boolean equals(StrBuilder other){  if (this == other) {    return true;  }  if (this.size != other.size) {    return false;  }  char thisBuf[]=this.buffer;  char otherBuf[]=other.buffer;  for (int i=size - 1; i >= 0; i--) {    if (thisBuf[i] != otherBuf[i]) {      return false;    }  }  return true;}  }
class C{  BigInteger retrieve(BigInteger initValue,int certainty,java.util.Random random){  int offset=1;  for (int i=0; i < bits.length; i++) {    long nextLong=~bits[i];    for (int j=0; j < 64; j++) {      if ((nextLong & 1) == 1) {        BigInteger candidate=initValue.add(BigInteger.valueOf(offset));        if (candidate.primeToCertainty(certainty,random))         return candidate;      }      nextLong>>>=1;      offset+=2;    }  }  return null;}  }
class C{  public ObjectReference toObjectReference(){  return null;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.common_ui);  mCardboardView=(CardboardView)findViewById(R.id.cardboard_view);  mCardboardView.setRenderer(this);  setCardboardView(mCardboardView);  playMusic();}  }
class C{  public void subscribeToAsyncBrokerService() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setDateFactory("2013-01-02 20:00:00");  VOServiceDetails supplService=createPublishActivateAsyncService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"supplSrvForBroker");  VendorData brokerData=setupNewBroker("2013-01-03 08:10:00");  setCutOffDay(brokerData.getAdminKey(),1);  CustomerData brokerCustomerData=registerCustomer(brokerData,"brokerCustomer");  setDateFactory("2013-07-10 20:00:00");  VOServiceDetails brokerService=grantResalePermission(supplierData,supplService,brokerData);  brokerService=publishActivateService(brokerData,brokerService);  VOSubscriptionDetails subDetails=subscribe(brokerCustomerData.getAdminUser(),"brokerSubscr",brokerService,"2013-08-01 12:00:00","ADMIN");  completeAsyncSubscription(basicSetup.getSupplierAdminKey(),brokerCustomerData.getAdminUser(),subDetails,"2013-08-18 00:00:00");  resetCutOffDay(supplierData.getAdminKey());}  }
class C{  public void copyEntity(Entity source){  List<String> emptyList=Collections.emptyList();  copyEntity(source,emptyList);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeaderRed=null;  String inputHeaderGreen=null;  String inputHeaderBlue=null;  String outputHeader=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeaderBlue=args[0];  inputHeaderGreen=args[1];  inputHeaderRed=args[2];  outputHeader=args[3];  if ((inputHeaderRed == null) || (inputHeaderGreen == null) || (inputHeaderBlue == null)|| (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal;    double redRange, greenRange, blueRange;    double redMin, greenMin, blueMin;    int r, g, b;    double z;    float progress=0;    if (inputHeaderRed.toLowerCase().contains("not specified")) {      inputHeaderRed=inputHeaderGreen;      inputHeaderGreen=inputHeaderBlue;    }    WhiteboxRasterInfo red=new WhiteboxRasterInfo(inputHeaderRed);    int rows=red.getNumberRows();    int cols=red.getNumberColumns();    WhiteboxRasterInfo green=new WhiteboxRasterInfo(inputHeaderGreen);    if ((green.getNumberRows() != rows) || (green.getNumberColumns() != cols)) {      showFeedback("All input images must have the same dimensions.");      return;    }    double noData=red.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeaderRed,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("rgb.pal");    outputFile.setDataScale(WhiteboxRaster.DataScale.RGB);    if (!inputHeaderGreen.equals(inputHeaderBlue)) {      WhiteboxRasterInfo blue=new WhiteboxRasterInfo(inputHeaderBlue);      if ((blue.getNumberRows() != rows) || (blue.getNumberColumns() != cols)) {        showFeedback("All input images must have the same dimensions.");        return;      }      redMin=red.getDisplayMinimum();      greenMin=green.getDisplayMinimum();      blueMin=blue.getDisplayMinimum();      redRange=red.getDisplayMaximum() - redMin;      greenRange=green.getDisplayMaximum() - greenMin;      blueRange=blue.getDisplayMaximum() - blueMin;      double[] dataRed, dataGreen, dataBlue;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        dataBlue=blue.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataBlue[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      red.close();      green.close();      blue.close();    } else {      redMin=red.getDisplayMinimum();      greenMin=green.getDisplayMinimum();      blueMin=greenMin;      redRange=red.getDisplayMaximum() - redMin;      greenRange=green.getDisplayMaximum() - greenMin;      blueRange=greenRange;      double[] dataRed, dataGreen;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataGreen[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      red.close();      green.close();    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DTMAxisIterator cloneIterator(){  try {    final DTMAxisIteratorBase clone=(DTMAxisIteratorBase)super.clone();    clone._isRestartable=false;    return clone;  } catch (  CloneNotSupportedException e) {    throw new org.apache.xml.utils.WrappedRuntimeException(e);  }}  }
class C{  protected void process(String paragraph){  if (paragraph.trim().length() == 0)   return;  Matcher m=wordMatcher.matcher(paragraph);  LinkedList<Word> w=new LinkedList<>();  while (m.find())   w.add(new Word(m.group(),m.start(),m.end() - 1));  Word[] words=w.toArray(new Word[w.size()]);  int sentenceStart=words[0].start;  boolean dumpTrailingWords=true;  boolean allLowerCase=true;{    boolean insideTag=false;    char[] chars=paragraph.toCharArray();    for (int i=0; i < paragraph.length() && allLowerCase; ++i) {      if (insideTag)       insideTag=chars[i] != '>'; else {        if (chars[i] == '<')         insideTag=paragraph.indexOf('>',i) != -1; else         allLowerCase=!Character.isUpperCase(chars[i]);      }    }  }  for (int i=0; i < words.length; ++i) {    int punctuationIndex=words[i].form.lastIndexOf('.');    int index=words[i].form.lastIndexOf('?');    if (index > punctuationIndex)     punctuationIndex=index;    index=words[i].form.lastIndexOf('!');    if (index > punctuationIndex)     punctuationIndex=index;    if (punctuationIndex != -1) {      Word next1=(i + 1 < words.length) ? words[i + 1] : null;      Word next2=(i + 2 < words.length) ? words[i + 2] : null;      int length=words[i].form.length();      if (allLowerCase)       index=words[i].form.indexOf('.');      if (allLowerCase && length > 5 && (index == -1 || index == punctuationIndex) && !lowerCaseLetter.matcher(words[i].form.substring(punctuationIndex)).find() || boundary(punctuationIndex,words[i],next1,next2)) {        sentences.add(new Sentence(paragraph.substring(sentenceStart,words[i].end + 1),currentOffset + sentenceStart,currentOffset + words[i].end));        if (i + 1 < words.length)         sentenceStart=words[i + 1].start; else         dumpTrailingWords=false;      }    }  }  if (dumpTrailingWords)   sentences.add(new Sentence(paragraph.substring(sentenceStart,words[words.length - 1].end + 1),currentOffset + sentenceStart,currentOffset + words[words.length - 1].end));}  }
class C{  public void templateChanged(ValueChangeEvent event){  final long selectedServiceKey=((Long)event.getNewValue()).longValue();  if (selectedServiceKey != model.getSelectedTemplateKey()) {    model.setSelectedTemplateKey(selectedServiceKey);  }}  }
class C{  public BaseTestCase(String name){  super(name);  this.myInstanceNumber=instanceCount++;  String newDbUrl=System.getProperty("com.mysql.jdbc.testsuite.url");  if ((newDbUrl != null) && (newDbUrl.trim().length() != 0)) {    dbUrl=newDbUrl;  } else {    String defaultDbUrl=System.getProperty("com.mysql.jdbc.testsuite.url.default");    if ((defaultDbUrl != null) && (defaultDbUrl.trim().length() != 0)) {      dbUrl=defaultDbUrl;    }  }  String defaultSha256Url=System.getProperty("com.mysql.jdbc.testsuite.url.sha256default");  if ((defaultSha256Url != null) && (defaultSha256Url.trim().length() != 0)) {    sha256Url=defaultSha256Url;  }  String newDriver=System.getProperty("com.mysql.jdbc.testsuite.driver");  if ((newDriver != null) && (newDriver.trim().length() != 0)) {    this.dbClass=newDriver;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isRunning(){  stateLock.readLock().lock();  try {    return running;  }  finally {    stateLock.readLock().unlock();  }}  }
class C{  public static LuaTable bindMethods(Class<? extends LibFunction> factory,Method[] methods){  if (methods != null) {    return bindMethods(factory,Arrays.asList(methods));  }  return new LuaTable();}  }
class C{  private void drawRectangle(final Graphics2D g2d,final Color fillColor,final Color outLineColor,final int width,final int height){  g2d.setColor(outLineColor);  g2d.fillRect(BUBBLE_OFFSET,0,width,height);  g2d.setColor(fillColor);  g2d.fillRect(BUBBLE_OFFSET + 1,1,width - 2,height - 2);}  }
class C{  public void test_ConstructorLjava_io_InputStreamLjava_security_MessageDigest(){  DigestInputStream dis=new DigestInputStream(inStream,digest);  assertNotNull("Constructor returned null instance",dis);}  }
class C{  public void process(Set<MultiKey<EventBean>> newEvents,Set<MultiKey<EventBean>> oldEvents,ExprEvaluatorContext exprEvaluatorContext){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".process Received update, " + "  newData.length==" + ((newEvents == null) ? 0 : newEvents.size()) + "  oldData.length=="+ ((oldEvents == null) ? 0 : oldEvents.size()));  }  if (!super.checkAfterCondition(newEvents,parent.getStatementContext())) {    return;  }  if (!witnessedFirst) {    addToChangeSet(joinEventsSet,newEvents,oldEvents);    boolean isGenerateSynthetic=parent.getStatementResultService().isMakeSynthetic();    UniformPair<EventBean[]> newOldEvents=resultSetProcessor.processOutputLimitedJoin(joinEventsSet,isGenerateSynthetic,OutputLimitLimitType.FIRST);    joinEventsSet.clear();    if (!hasRelevantResults(newOldEvents)) {      return;    }    witnessedFirst=true;    if (parent.isDistinct()) {      newOldEvents.setFirst(EventBeanUtility.getDistinctByProp(newOldEvents.getFirst(),parent.getEventBeanReader()));      newOldEvents.setSecond(EventBeanUtility.getDistinctByProp(newOldEvents.getSecond(),parent.getEventBeanReader()));    }    boolean isGenerateNatural=parent.getStatementResultService().isMakeNatural();    if ((!isGenerateSynthetic) && (!isGenerateNatural)) {      if (AuditPath.isAuditEnabled) {        OutputStrategyUtil.indicateEarlyReturn(parent.getStatementContext(),newOldEvents);      }      return;    }    output(true,newOldEvents);  } else {    addToChangeSet(joinEventsSet,newEvents,oldEvents);    resultSetProcessor.processOutputLimitedJoin(joinEventsSet,false,OutputLimitLimitType.FIRST);    joinEventsSet.clear();  }  int newEventsSize=0;  if (newEvents != null) {    newEventsSize=newEvents.size();  }  int oldEventsSize=0;  if (oldEvents != null) {    oldEventsSize=oldEvents.size();  }  outputCondition.updateOutputCondition(newEventsSize,oldEventsSize);}  }
class C{  public void executionStarted(SessionEvent event){}  }
class C{  public final int compareTo(Object o){  if (!(o instanceof Range)) {    throw new IllegalArgumentException("argument must be Range");  }  Range e=(Range)o;  return start < e.start ? -1 : (start + extent > e.start + e.extent) ? 1 : 0;}  }
class C{  public Vec3D(ReadonlyVec3D v){  this.x=v.x();  this.y=v.y();  this.z=v.z();}  }
class C{  protected JMenuBar createMenuBar(){  menuBar=new SystemMenuBar();  menuBar.setFocusable(false);  menuBar.setBorderPainted(true);  menuBar.add(createMenu());  return menuBar;}  }
class C{  public static String dateToString(Date date){  String dateString=new String();  try {    if (date == null) {      return "";    } else {      dateString=new SimpleDateFormat("yyyy/MM/dd hh:mm:ss").format(date);    }  } catch (  Exception e) {    LOGGER.error("dateConverter(): " + e.getMessage());    throw new MetadataException(e);  }  return dateString;}  }
class C{  public int addBlocks(String json_string) throws IOException {  final InputStream blockIs=new ByteArrayInputStream(json_string.getBytes());  return loadBlocks(blockIs);}  }
class C{  public void test_ticket_1202i() throws Exception {  new TestHelper("ticket-1202-group03-modified4","ticket-1202-group03-modified4.rq","ticket-1202-group03-modified4.ttl","ticket-1202-group03-modified4.srx").runTest();}  }
class C{  public boolean hasForward(){  return Display.impl.browserHasForward(internal);}  }
class C{  void incrementVersion(Iterable<O> objectsToExcludeFromNextVersion){  Version previousVersion=this.currentVersion;  this.currentVersion=new Version(objectsToExcludeFromNextVersion);  previousVersion.lock.writeLock().lock();}  }
class C{  protected TimmyTable(String filename,int recordSize,TimmyDatabase d) throws SyncFailedException, IOException {  this.filename=filename;  this.database=d;  reopenRaf(recordSize);}  }
class C{  private AnnotationMirror createAnnotation(String name,Set<?> values){  if (values.size() > 0 && values.size() <= MAX_VALUES) {    AnnotationBuilder builder=new AnnotationBuilder(processingEnv,name);    List<Object> valuesList=new ArrayList<Object>(values);    builder.setValue("value",valuesList);    return builder.build();  } else {    return UNKNOWNVAL;  }}  }
class C{  public int findFirstVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),false,true);  return child == null ? NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public void clearSpectrum(){  mDisplayFFTBins=null;  repaint();}  }
class C{  public PCAResult processQueryResult(DoubleDBIDList results,Relation<? extends NumberVector> database){  return processCovarMatrix(covarianceMatrixBuilder.processQueryResults(results,database));}  }
class C{  private void writeToken(AuthProvider auth){  AccessGrant accessGrant=auth.getAccessGrant();  String key=accessGrant.getKey();  String secret=accessGrant.getSecret();  String providerid=accessGrant.getProviderId();  Map<String,Object> attributes=accessGrant.getAttributes();  Editor edit=PreferenceManager.getDefaultSharedPreferences(getContext()).edit();  edit.putString(mProviderName.toString() + " key",key);  edit.putString(mProviderName.toString() + " secret",secret);  edit.putString(mProviderName.toString() + " providerid",providerid);  if (attributes != null) {    for (    Map.Entry entry : attributes.entrySet()) {      System.out.println(entry.getKey() + ", " + entry.getValue());    }    for (    String s : attributes.keySet()) {      edit.putString(mProviderName.toString() + "attribute " + s,String.valueOf(attributes.get(s)));    }  }  edit.apply();}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected String doIt() throws Exception {  log.info("M_InOut_ID=" + p_M_InOut_ID + ", M_PriceList_ID="+ p_M_PriceList_ID+ ", InvoiceDocumentNo="+ p_InvoiceDocumentNo);  if (p_M_InOut_ID == 0)   throw new IllegalArgumentException("No Shipment");  MInOut ship=new MInOut(getCtx(),p_M_InOut_ID,get_TrxName());  if (ship.get_ID() == 0)   throw new IllegalArgumentException("Shipment not found");  if (!MInOut.DOCSTATUS_Completed.equals(ship.getDocStatus()))   throw new IllegalArgumentException("Shipment not completed");  MInvoice invoice=new MInvoice(ship,null);  if (p_M_PriceList_ID != 0 && ship.getM_RMA_ID() == 0)   invoice.setM_PriceList_ID(p_M_PriceList_ID);  if (p_InvoiceDocumentNo != null && p_InvoiceDocumentNo.length() > 0)   invoice.setDocumentNo(p_InvoiceDocumentNo);  if (!invoice.save())   throw new IllegalArgumentException("Cannot save Invoice");  MInOutLine[] shipLines=ship.getLines(false);  for (int i=0; i < shipLines.length; i++) {    MInOutLine sLine=shipLines[i];    MInvoiceLine line=new MInvoiceLine(invoice);    line.setShipLine(sLine);    if (sLine.sameOrderLineUOM())     line.setQtyEntered(sLine.getQtyEntered()); else     line.setQtyEntered(sLine.getMovementQty());    line.setQtyInvoiced(sLine.getMovementQty());    if (!line.save())     throw new IllegalArgumentException("Cannot save Invoice Line");  }  return invoice.getDocumentNo();}  }
class C{  @Override public void onLoggedIn(final Player player){  readMessages(player);}  }
class C{  public void cancelAllUpdateRepositoriesJobs(){  for (  UpdateRepositoryJob updateRepositoryJob : repositoryUpdateJobMap.values()) {    while (!updateRepositoryJob.cancel()) {      try {        updateRepositoryJob.join();      } catch (      InterruptedException e) {        break;      }    }  }}  }
class C{  public DeviceUniqueIndex(EnumSet<DeviceField> keyFields){  super(keyFields);  index=new ConcurrentHashMap<IndexedEntity,Long>();}  }
class C{  public FirstLightProcessor(ICubicWorld world){  this.cache=world.getCubeCache();}  }
class C{  public void addLogPos(int logId,int pos){  if (firstUncommittedLog == Session.LOG_WRITTEN) {    firstUncommittedLog=logId;    firstUncommittedPos=pos;  }}  }
class C{  @Override public Command watch(HostChangeMonitor<ServiceInstance> monitor) throws MonitorException {synchronized (watchers) {    watchers.add(monitor);  }  if (resolutionPending.compareAndSet(false,false)) {    monitor.onChange(hostSet);  }  return Commands.NOOP;}  }
class C{  public PairwiseMatrix2DataTableRowIterator(NumericalMatrix matrix,boolean showSymetrically){  this.showSymetrically=showSymetrically;  this.matrix=matrix;  this.firstAttribute=0;  if (matrix.isSymmetrical()) {    this.secondAttribute=1;  } else {    this.secondAttribute=0;  }}  }
class C{  public boolean batchFinished(){  if (getInputFormat() == null)   throw new IllegalStateException("No input instance format defined");  if (m_Means == null) {    Instances input=getInputFormat();    m_Means=new double[input.numAttributes()];    for (int i=0; i < input.numAttributes(); i++) {      if (input.attribute(i).isNumeric() && (input.classIndex() != i)) {        m_Means[i]=input.meanOrMode(i);      }    }    for (int i=0; i < input.numInstances(); i++)     convertInstance(input.instance(i));  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  public SnapshotsStatusRequest snapshots(String[] snapshots){  this.snapshots=snapshots;  return this;}  }
class C{  public void testZeroLengthMiddleFile() throws Exception {  File logDir=prepareLogDir("testZeroLengthMiddleFile");  DiskLog log=new DiskLog();  log.setLogDir(logDir.getAbsolutePath());  log.setReadOnly(false);  log.setLogFileSize(3000);  log.prepare();  writeEventsToLog(log,200);  log.release();  String[] logFileNames=log.getLogFileNames();  int fileCount=logFileNames.length;  int middleFileIndex=fileCount / 2;  assertTrue("More than two logs generated",fileCount > 2);  assertTrue("Middle > 0",middleFileIndex > 0);  String middleLogName=logFileNames[middleFileIndex];  File middleLog=new File(logDir,middleLogName);  assertTrue("middleLog is non-zero length: " + middleLog.toString(),middleLog.length() > 0);  truncate(middleLog);  assertEquals("lastLog is zero length: " + middleLog.toString(),0,middleLog.length());  DiskLog log2=new DiskLog();  log2.setLogDir(logDir.getAbsolutePath());  log2.setReadOnly(false);  log2.setLogRotateMillis(2000);  try {    log2.prepare();    throw new Exception("Able to open log with zero-length file in middle: " + middleLog.getAbsolutePath());  } catch (  LogConsistencyException e) {    logger.info("Got expected exception: " + e.getMessage());  }  log2.release();}  }
class C{  private void send100Trying(SipRequest request) throws NetworkException, PayloadException {  mImsModule.getCurrentNetworkInterface().getSipManager().sendSipResponse(SipMessageFactory.createResponse(request,null,Response.TRYING));}  }
class C{  public CronThreadPoolExecutor(int corePoolSize,RejectedExecutionHandler handler){  super(corePoolSize,handler);  this.cronJobWatchDogs=new ArrayList<>();  this.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);}  }
class C{  public void open(File file,AbstractFileLoader loader){  Instances data;  try {    log(null,"Loading: " + file);    loader.setFile(file);    data=loader.getDataSet();    MLUtils.fixRelationName(data);    log(null,"Loaded successfully: " + file);  } catch (  Exception e) {    handleException(null,"Failed to load data from '" + file + "':",e);    JOptionPane.showMessageDialog(this,"Failed to load dataset from '" + file + "':\n"+ e,"Error loading",JOptionPane.ERROR_MESSAGE);    return;  }  try {    addUndoPoint();    MLUtils.prepareData(data);    m_CurrentFile=file;    notifyTabsDataChanged(null,data);    m_RecentFilesHandler.addRecentItem(new RecentFilesHandlerWithCommandline.Setup(file,loader));  } catch (  Exception e) {    handleException(null,"Failed to prepare data from '" + file + "':",e);    JOptionPane.showMessageDialog(this,"Failed to load prepare data from '" + file + "':\n"+ e,"Error loading",JOptionPane.ERROR_MESSAGE);    return;  }  updateMenu();}  }
class C{  public A last(){  A last=null;  List<A> t=this;  while (t.tail != null) {    last=t.head;    t=t.tail;  }  return last;}  }
class C{  public boolean isSetGetResponse(){  return this.getResponse != null;}  }
class C{  public cudaExtent(long width,long height,long depth){  this.width=width;  this.height=height;  this.depth=depth;}  }
class C{  public TestCaseClassLoader(){  this(System.getProperty("java.class.path"));}  }
class C{  @Override public void startCounting(ExampleSet exampleSet,boolean useExampleWeights) throws OperatorException {  super.startCounting(exampleSet,useExampleWeights);  this.rocData.add(rocDataGenerator.createROCData(exampleSet,useExampleWeights,method));  this.auc=rocDataGenerator.calculateAUC(this.rocData.getLast());  this.positiveClass=exampleSet.getAttributes().getPredictedLabel().getMapping().getPositiveString();}  }
class C{  public DefaultModel(ExampleSet exampleSet,double value){  this(exampleSet,value,null);}  }
class C{  private void determineLowerAndUpperHull(double[] x,double[] y){  StringBuilder msg=new StringBuilder();  lowerHull[0]=0;  l=1;  upperHull[0]=0;  u=1;  for (int i=1; i < x.length; i++) {    lowerHull[l]=i;    while (l >= 2 && (y[lowerHull[l]] - y[lowerHull[l - 1]]) / (x[lowerHull[l]] - x[lowerHull[l - 1]]) <= (y[lowerHull[l - 1]] - y[lowerHull[l - 2]]) / (x[lowerHull[l - 1]] - x[lowerHull[l - 2]])) {      lowerHull[l - 1]=lowerHull[l];      this.l--;    }    this.l++;    upperHull[u]=i;    while (u >= 2 && (y[upperHull[u]] - y[upperHull[u - 1]]) / (x[upperHull[u]] - x[upperHull[u - 1]]) >= (y[upperHull[u - 1]] - y[upperHull[u - 2]]) / (x[upperHull[u - 1]] - x[upperHull[u - 2]])) {      upperHull[u - 1]=upperHull[u];      u--;    }    u++;  }  msg.append("lower and upper hull\n");  for (int i=0; i < i; i++) {    msg.append("  uhull ").append(i).append('=').append(upperHull[i]).append(" y=").append(y[upperHull[i]]).append('\n');    msg.append("  lhull ").append(i).append('=').append(lowerHull[i]).append(" y=").append(y[lowerHull[i]]).append('\n');  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof MonthDay) {    MonthDay other=(MonthDay)obj;    return month == other.month && day == other.day;  }  return false;}  }
class C{  public ProducerWorker(String topic,String message){  this._topic=topic;  this._message=message;}  }
class C{  public void walkToLastStep(){synchronized (m_mutex) {    m_targetStep=LAST_STEP;  }  goToTarget();}  }
class C{  public void addColumn(RColumn rc){  m_data.cols.add(rc);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected int bytesPerAtom(){  return (3);}  }
class C{  @Override @CanIgnoreReturnValue public int read(byte[] bytes,int off,int len) throws IOException {  int numOfBytesRead=in.read(bytes,off,len);  if (numOfBytesRead != -1) {    hasher.putBytes(bytes,off,numOfBytesRead);  }  return numOfBytesRead;}  }
class C{  public void testCargo() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/cargocpc/index.html");  final String expected="Cargo Ping Component used to verify if the container is started.";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public static char[] createMethodSignature(char[][] parameterTypes,char[] returnType){  int parameterTypesLength=parameterTypes.length;  int parameterLength=0;  for (int i=0; i < parameterTypesLength; i++) {    parameterLength+=parameterTypes[i].length;  }  int returnTypeLength=returnType.length;  char[] result=new char[1 + parameterLength + 1+ returnTypeLength];  result[0]=C_PARAM_START;  int index=1;  for (int i=0; i < parameterTypesLength; i++) {    char[] parameterType=parameterTypes[i];    int length=parameterType.length;    System.arraycopy(parameterType,0,result,index,length);    index+=length;  }  result[index]=C_PARAM_END;  System.arraycopy(returnType,0,result,index + 1,returnTypeLength);  return result;}  }
class C{  void zApplyDisplaySpinnerButtons(){  if (parent == null) {    return;  }  parent.getComponentDecreaseSpinnerButton().setEnabled(displaySpinnerButtons);  parent.getComponentDecreaseSpinnerButton().setVisible(displaySpinnerButtons);  parent.getComponentIncreaseSpinnerButton().setEnabled(displaySpinnerButtons);  parent.getComponentIncreaseSpinnerButton().setVisible(displaySpinnerButtons);}  }
class C{  @Check public void checkN4TypeDeclaration(N4TypeDeclaration n4TypeDeclaration){  if (isNotChecked(n4TypeDeclaration)) {    return;  }  if (Character.isUpperCase(n4TypeDeclaration.getName().charAt(0))) {    return;  }  if (holdsTypeNameNotIndistinguishable(n4TypeDeclaration,"getter/setter",GETTER_SETTER) && holdsTypeNameNotIndistinguishable(n4TypeDeclaration,"access modifier",ACCESS_MODIFIERS) && holdsTypeNameNotIndistinguishable(n4TypeDeclaration,"boolean literal",BOOLEAN_LITERALS)&& holdsTypeNameNotIndistinguishable(n4TypeDeclaration,"base type",BASE_TYPES)&& holdsTypeNameNotIndistinguishable(n4TypeDeclaration,"keyword",languageHelper.getECMAKeywords())&& holdsDoesNotStartWithLowerCaseLetter(n4TypeDeclaration)) {  }}  }
class C{  protected void eliminarProductor(HttpServletRequest request,InfoProductorSerie infoProductorSerie){  logger.debug("inicio eliminarProductor");  if (infoProductorSerie != null) {    logger.debug("productor: " + infoProductorSerie.getDebug());    if (infoProductorSerie.isNuevo() && infoProductorSerie.isSinGuardar()) {      logger.debug("productorSerie es nuevo o est? sin guardar");      removeProductor(request,infoProductorSerie.getGuid());    } else {      infoProductorSerie.setMarcas(FondosConstants.MARCA_ELIMINADO);      if (infoProductorSerie instanceof InfoOrganoProductorSerie) {        InfoOrganoProductorSerie infoOrganoProductorSerie=(InfoOrganoProductorSerie)infoProductorSerie;        infoOrganoProductorSerie.setSustituidoVigente(null);        infoOrganoProductorSerie.setSustituyeAHistorico(null);      }    }  }}  }
class C{  public void clearStackChangedListeners(){  listeners.clear();}  }
class C{  void forceStackTop(Type t){  if (!alive)   return;switch (t.getTag()) {case CLASS:case ARRAY:    int width=width(t);  Type old=stack[stacksize - width];Assert.check(types.isSubtype(types.erasure(old),types.erasure(t)));stack[stacksize - width]=t;break;default :}}  }
class C{  public static Map<String,SectionEntry> mappingCourseHierarchyFrom(CourseComponent courseComponent){  Map<String,SectionEntry> map=new HashMap<>();  for (  IBlock block : courseComponent.getChildren()) {    CourseComponent chapter=(CourseComponent)block;    SectionEntry entry=new SectionEntry();    entry.chapter=chapter.getDisplayName();    entry.isChapter=true;    entry.section_url=chapter.getBlockUrl();    map.put(entry.chapter,entry);    for (    IBlock subBlock : chapter.getChildren()) {      CourseComponent section=(CourseComponent)subBlock;      entry.sections.put(section.getDisplayName(),(ArrayList)CourseManager.mappingAllVideoResponseModelFrom(section,null));    }  }  return map;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.091 -0500",hash_original_method="4DB46F10EA63A90C886405E235BD3A38",hash_generated_method="2B3A74E2B01B4E6563CA5D1C66179B8D") public void goBackOrForward(int steps){  mLoadInitFromJava=true;  nativeGoBackOrForward(steps);  mLoadInitFromJava=false;}  }
class C{  public void attach(Component comp){  if (comp != owner) {    components.add(comp);  }}  }
class C{  public T caseIntersectionTypeExpression(IntersectionTypeExpression object){  return null;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static void register(){  Util.register("CachedData",CachedData.class);}  }
class C{  public void initUI(){  JPanel mainPanel=new JPanel();  mainPanel.setOpaque(false);  setLayout(new BorderLayout());  add(mainPanel,BorderLayout.CENTER);  mainPanel.setLayout(new GridBagLayout());  String[] keys=new String[]{"sendBitcoinPanel.addressLabel","sendBitcoinPanel.labelLabel","sendBitcoinPanel.amountLabel","showPreferencesPanel.feeLabel.text","showExportPrivateKeysPanel.walletPasswordPrompt"};  int stentWidth=MultiBitTitledPanel.calculateStentWidthForKeys(controller.getLocaliser(),keys,mainPanel) + ExportPrivateKeysPanel.STENT_DELTA;  sendAddress=this.bitcoinController.getModel().getActiveWalletPreference(BitcoinModel.SEND_ADDRESS);  sendLabel=this.bitcoinController.getModel().getActiveWalletPreference(BitcoinModel.SEND_LABEL);  String sendAmount=this.bitcoinController.getModel().getActiveWalletPreference(BitcoinModel.SEND_AMOUNT) + " " + controller.getLocaliser().getString("sendBitcoinPanel.amountUnitLabel");  String sendAmountLocalised=CurrencyConverter.INSTANCE.prettyPrint(sendAmount);  String fee="0";  if (sendRequest != null) {    fee=Utils.bitcoinValueToPlainString(sendRequest.fee);  }  String sendFeeLocalised=CurrencyConverter.INSTANCE.prettyPrint(fee);  GridBagConstraints constraints=new GridBagConstraints();  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=0;  constraints.gridy=0;  constraints.weightx=0.3;  constraints.weighty=0.1;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(MultiBitTitledPanel.createStent(STENT_WIDTH),constraints);  ImageIcon bigIcon=ImageLoader.createImageIcon(ImageLoader.MULTIBIT_128_ICON_FILE);  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=1;  constraints.gridy=2;  constraints.weightx=0.5;  constraints.weighty=0.2;  constraints.gridwidth=1;  constraints.gridheight=5;  constraints.anchor=GridBagConstraints.CENTER;  JLabel bigIconLabel=new JLabel(bigIcon);  mainPanel.add(bigIconLabel,constraints);  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=2;  constraints.gridy=0;  constraints.weightx=0.3;  constraints.weighty=0.1;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(MultiBitTitledPanel.createStent(STENT_WIDTH,STENT_WIDTH),constraints);  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=7;  constraints.gridy=1;  constraints.weightx=0.3;  constraints.weighty=0.1;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(MultiBitTitledPanel.createStent(STENT_WIDTH),constraints);  explainLabel=new MultiBitLabel("");  explainLabel.setText(controller.getLocaliser().getString("sendBitcoinConfirmView.message"));  constraints.fill=GridBagConstraints.NONE;  constraints.gridx=3;  constraints.gridy=1;  constraints.weightx=0.8;  constraints.weighty=0.4;  constraints.gridwidth=5;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(explainLabel,constraints);  mainPanel.add(MultiBitTitledPanel.createStent(explainLabel.getPreferredSize().width,explainLabel.getPreferredSize().height),constraints);  JPanel detailPanel=new JPanel(new GridBagLayout());  detailPanel.setBackground(ColorAndFontConstants.VERY_LIGHT_BACKGROUND_COLOR);  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=3;  constraints.gridy=2;  constraints.weightx=0.6;  constraints.weighty=0.8;  constraints.gridwidth=3;  constraints.gridheight=5;  constraints.anchor=GridBagConstraints.CENTER;  mainPanel.add(detailPanel,constraints);  GridBagConstraints constraints2=new GridBagConstraints();  constraints2.fill=GridBagConstraints.HORIZONTAL;  constraints2.gridx=0;  constraints2.gridy=0;  constraints2.weightx=0.3;  constraints2.weighty=0.05;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_START;  detailPanel.add(MultiBitTitledPanel.createStent(stentWidth),constraints2);  constraints2.fill=GridBagConstraints.HORIZONTAL;  constraints2.gridx=1;  constraints2.gridy=0;  constraints2.weightx=0.05;  constraints2.weighty=0.05;  constraints2.gridwidth=1;  constraints2.gridheight=1;  constraints2.anchor=GridBagConstraints.CENTER;  detailPanel.add(MultiBitTitledPanel.createStent(MultiBitTitledPanel.SEPARATION_BETWEEN_NAME_VALUE_PAIRS),constraints2);  JLabel forcer1=new JLabel();  forcer1.setOpaque(false);  constraints2.fill=GridBagConstraints.HORIZONTAL;  constraints2.gridx=2;  constraints2.gridy=0;  constraints2.weightx=10;  constraints2.weighty=0.05;  constraints2.gridwidth=1;  constraints2.gridheight=1;  constraints2.anchor=GridBagConstraints.LINE_END;  detailPanel.add(forcer1,constraints2);  MultiBitLabel sendAddressLabel=new MultiBitLabel("");  sendAddressLabel.setText(controller.getLocaliser().getString("sendBitcoinPanel.addressLabel"));  constraints2.fill=GridBagConstraints.NONE;  constraints2.gridx=0;  constraints2.gridy=1;  constraints2.weightx=0.3;  constraints2.weighty=0.1;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_END;  detailPanel.add(sendAddressLabel,constraints2);  sendAddressText=new MultiBitLabel("");  sendAddressText.setText(sendAddress);  constraints2.fill=GridBagConstraints.NONE;  constraints2.gridx=2;  constraints2.gridy=1;  constraints2.weightx=0.3;  constraints2.weighty=0.1;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_START;  detailPanel.add(sendAddressText,constraints2);  MultiBitLabel sendLabelLabel=new MultiBitLabel("");  sendLabelLabel.setText(controller.getLocaliser().getString("sendBitcoinPanel.labelLabel"));  constraints2.fill=GridBagConstraints.NONE;  constraints2.gridx=0;  constraints2.gridy=2;  constraints2.weightx=0.3;  constraints2.weighty=0.1;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_END;  detailPanel.add(sendLabelLabel,constraints2);  sendLabelText=new MultiBitLabel("");  sendLabelText.setText(sendLabel);  constraints2.fill=GridBagConstraints.NONE;  constraints2.gridx=2;  constraints2.gridy=2;  constraints2.weightx=0.3;  constraints2.weighty=0.1;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_START;  detailPanel.add(sendLabelText,constraints2);  MultiBitLabel sendAmountLabel=new MultiBitLabel("");  sendAmountLabel.setText(controller.getLocaliser().getString("sendBitcoinPanel.amountLabel"));  constraints2.fill=GridBagConstraints.NONE;  constraints2.gridx=0;  constraints2.gridy=3;  constraints2.weightx=0.3;  constraints2.weighty=0.1;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_END;  detailPanel.add(sendAmountLabel,constraints2);  sendAmountText=new MultiBitLabel("");  sendAmountText.setText(sendAmountLocalised);  constraints2.fill=GridBagConstraints.NONE;  constraints2.gridx=2;  constraints2.gridy=3;  constraints2.weightx=0.3;  constraints2.weighty=0.1;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_START;  detailPanel.add(sendAmountText,constraints2);  MultiBitLabel sendFeeLabel=new MultiBitLabel("");  sendFeeLabel.setText(controller.getLocaliser().getString("showPreferencesPanel.feeLabel.text"));  constraints2.fill=GridBagConstraints.NONE;  constraints2.gridx=0;  constraints2.gridy=4;  constraints2.weightx=0.3;  constraints2.weighty=0.1;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_END;  detailPanel.add(sendFeeLabel,constraints2);  sendFeeText=new MultiBitLabel("");  sendFeeText.setText(sendFeeLocalised);  constraints2.fill=GridBagConstraints.NONE;  constraints2.gridx=2;  constraints2.gridy=4;  constraints2.weightx=0.3;  constraints2.weighty=0.1;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_START;  detailPanel.add(sendFeeText,constraints2);  constraints2.fill=GridBagConstraints.HORIZONTAL;  constraints2.gridx=0;  constraints2.gridy=5;  constraints2.weightx=0.3;  constraints2.weighty=0.05;  constraints2.gridwidth=1;  constraints2.anchor=GridBagConstraints.LINE_START;  detailPanel.add(MultiBitTitledPanel.createStent(stentWidth),constraints2);  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.gridx=3;  constraints.gridy=7;  constraints.weightx=0.3;  constraints.weighty=0.3;  constraints.gridheight=1;  constraints.gridwidth=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(MultiBitTitledPanel.createStent(stentWidth),constraints);  walletPasswordPromptLabel=new MultiBitLabel(controller.getLocaliser().getString("showExportPrivateKeysPanel.walletPasswordPrompt"));  constraints.fill=GridBagConstraints.NONE;  constraints.gridx=3;  constraints.gridy=8;  constraints.weightx=0.3;  constraints.weighty=0.1;  constraints.gridheight=1;  constraints.gridwidth=1;  constraints.anchor=GridBagConstraints.LINE_END;  mainPanel.add(walletPasswordPromptLabel,constraints);  mainPanel.add(MultiBitTitledPanel.createStent(walletPasswordPromptLabel.getPreferredSize().width,walletPasswordPromptLabel.getPreferredSize().height),constraints);  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.gridx=4;  constraints.gridy=7;  constraints.weightx=0.05;  constraints.weighty=0.1;  constraints.gridwidth=1;  constraints.anchor=GridBagConstraints.CENTER;  mainPanel.add(MultiBitTitledPanel.createStent(MultiBitTitledPanel.SEPARATION_BETWEEN_NAME_VALUE_PAIRS),constraints);  JLabel forcer2=new JLabel();  forcer2.setOpaque(false);  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=5;  constraints.gridy=7;  constraints.weightx=10;  constraints.weighty=0.05;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_END;  mainPanel.add(forcer2,constraints);  JPanel filler4=new JPanel();  filler4.setOpaque(false);  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=3;  constraints.gridy=7;  constraints.weightx=0.3;  constraints.weighty=0.01;  constraints.gridheight=1;  constraints.gridwidth=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(filler4,constraints);  walletPasswordField=new JPasswordField(24);  walletPasswordField.setMinimumSize(new Dimension(200,20));  constraints.fill=GridBagConstraints.NONE;  constraints.gridx=5;  constraints.gridy=8;  constraints.weightx=0.3;  constraints.weighty=0.1;  constraints.gridheight=1;  constraints.gridwidth=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(walletPasswordField,constraints);  mainPanel.add(MultiBitTitledPanel.createStent(200,20),constraints);  JPanel filler5=new JPanel();  filler4.setOpaque(false);  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=3;  constraints.gridy=9;  constraints.weightx=0.3;  constraints.weighty=0.01;  constraints.gridheight=1;  constraints.gridwidth=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(filler5,constraints);  if (this.bitcoinController.getModel().getActiveWallet() != null) {    if (this.bitcoinController.getModel().getActiveWallet().getEncryptionType() == EncryptionType.ENCRYPTED_SCRYPT_AES) {      walletPasswordField.setEnabled(true);      walletPasswordPromptLabel.setEnabled(true);    } else {      walletPasswordField.setEnabled(false);      walletPasswordPromptLabel.setEnabled(false);    }  }  JPanel buttonPanel=new JPanel();  buttonPanel.setOpaque(false);  constraints.fill=GridBagConstraints.NONE;  constraints.gridx=3;  constraints.gridy=10;  constraints.weightx=0.8;  constraints.weighty=0.1;  constraints.gridwidth=4;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_END;  mainPanel.add(buttonPanel,constraints);  CancelBackToParentAction cancelAction=new CancelBackToParentAction(controller,ImageLoader.createImageIcon(ImageLoader.CROSS_ICON_FILE),sendBitcoinConfirmDialog);  cancelButton=new MultiBitButton(cancelAction,controller);  buttonPanel.add(cancelButton);  sendBitcoinNowAction=new SendBitcoinNowAction(mainFrame,this.bitcoinController,this,walletPasswordField,ImageLoader.createImageIcon(ImageLoader.SEND_BITCOIN_ICON_FILE),sendRequest);  sendButton=new MultiBitButton(sendBitcoinNowAction,controller);  buttonPanel.add(sendButton);  confirmText1=new MultiBitLabel("");  confirmText1.setText(" ");  constraints.fill=GridBagConstraints.NONE;  constraints.gridx=1;  constraints.gridy=11;  constraints.weightx=0.8;  constraints.weighty=0.15;  constraints.gridwidth=6;  constraints.anchor=GridBagConstraints.LINE_END;  mainPanel.add(confirmText1,constraints);  JLabel filler3=new JLabel();  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.gridx=7;  constraints.gridy=11;  constraints.weightx=0.05;  constraints.weighty=0.1;  constraints.gridwidth=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(filler3,constraints);  confirmText2=new MultiBitLabel(" ");  constraints.fill=GridBagConstraints.NONE;  constraints.gridx=1;  constraints.gridy=12;  constraints.weightx=0.8;  constraints.weighty=0.15;  constraints.gridwidth=6;  constraints.anchor=GridBagConstraints.LINE_END;  mainPanel.add(confirmText2,constraints);  JLabel filler6=new JLabel();  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.gridx=7;  constraints.gridy=12;  constraints.weightx=0.05;  constraints.weighty=0.1;  constraints.gridwidth=1;  constraints.anchor=GridBagConstraints.LINE_START;  mainPanel.add(filler6,constraints);  enableSendAccordingToNumberOfConnectedPeersAndWalletBusy();}  }
class C{  public void addSingleObservation(double[] source,double[] destination,double[] destinationPast) throws Exception {  int thisSourceDimensions=source.length;  int thisDestDimensions=destination.length;  int thisDestPastDimensions=destinationPast.length;  if ((thisDestDimensions != destDimensions) || (thisSourceDimensions != sourceDimensions) || (thisDestPastDimensions != destPastDimensions)) {    throw new Exception("Cannot add observsations for source, destination and destPast variables " + " of " + thisSourceDimensions + " and "+ thisDestDimensions+ " and "+ thisDestPastDimensions+ " dimensions respectively for TE calculator set up for "+ sourceDimensions+ ", "+ destDimensions+ " and "+ destPastDimensions+ " source, destination and destPast dimensions respectively");  }  if (vectorOfJointDestinationPastObservations == null) {    throw new RuntimeException("User did not call startAddObservations before addObservations");  }  double[][] sourceContainer=new double[1][];  double[][] destContainer=new double[1][];  double[][] destPastContainer=new double[1][];  sourceContainer[0]=source;  destContainer[0]=destination;  destPastContainer[0]=destinationPast;  vectorOfJointDestinationPastObservations.add(destPastContainer);  super.addObservations(sourceContainer,destContainer);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  int row, col;  double z;  float progress=0;  int m, n;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  if ((inputHeader1 == null) || (inputHeader2 == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRasterInfo image1=new WhiteboxRasterInfo(inputHeader1);    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    WhiteboxRasterInfo image2=new WhiteboxRasterInfo(inputHeader2);    if (image2.getNumberRows() != rows || image2.getNumberColumns() != cols) {      showFeedback("The input images must have the same number of rows and columns");      return;    }    double noData2=image2.getNoDataValue();    int image1Min=(int)image1.getMinimumValue();    int image2Min=(int)image2.getMinimumValue();    int image1Max=(int)image1.getMaximumValue();    int image2Max=(int)image2.getMaximumValue();    int image1Range=image1Max - image1Min + 1;    int image2Range=image2Max - image2Min + 1;    int[][] featureSpace=new int[image1Range][image2Range];    double data1[]=null;    double data2[]=null;    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        if (data1[col] != noData1 && data2[col] != noData2) {          m=(int)(data1[col] - image1Min);          n=(int)(data2[col] - image2Min);          featureSpace[m][n]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    Plot plot=new Plot(featureSpace,image1.getShortHeaderFile(),image2.getShortHeaderFile(),image1Min,image1Max,image2Min,image2Max,myHost.getDefaultFont());    image1.close();    image2.close();    returnData(plot);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public StringBuffer insert(int index,long l){  return insert(index,Long.toString(l));}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public static double blackFormulaImpliedStdDev(final PlainVanillaPayoff payoff,@Real final double strike,@Real final double forward,@Real final double blackPrice,@DiscountFactor final double discount,@Real final double guess){  return blackFormulaImpliedStdDev(payoff,strike,forward,blackPrice,discount,guess,1.0e-6,0.0);}  }
class C{  int conditionCount(){  return conditions.size();}  }
class C{  public static List<ScriptStep> applyFilters(Collection<ScriptFilter> filters,List<ScriptStep> steps){  Script script=new Script();  script.setScriptSteps(steps);  applyFiltersToScript(filters,script);  return script.getScriptSteps();}  }
class C{  public void add(Object elem,Comparable key){  int numElem=this.numElem;  Object[] objects=this.objects;  Comparable[] keys=this.keys;  numElem++;  if ((numElem - 1) >= objects.length) {    Object[] temp=new Object[objects.length * 2 + 1];    System.arraycopy(objects,0,temp,0,objects.length);    objects=temp;    Comparable[] temptemp=new Comparable[keys.length * 2 + 1];    System.arraycopy(keys,0,temptemp,0,keys.length);    keys=temptemp;    this.objects=objects;    this.keys=keys;  }  int i=numElem;  if (i > 1) {    while (i > 1 && key.compareTo(keys[i / 2 - 1]) < 0) {      objects[i - 1]=objects[i / 2 - 1];      keys[i - 1]=keys[i / 2 - 1];      i=i / 2;    }  }  keys[i - 1]=key;  objects[i - 1]=elem;  this.numElem=numElem;}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction where=new RPAction();  where.put("type","where");  where.put("target",StringHelper.unquote(remainder));  ClientSingletonRepository.getClientFramework().send(where);  return true;}  }
class C{  public boolean matchesClassName(String className){  return clazz == null || clazz.matcher(className).matches();}  }
class C{  public NoHttpResponseException(final String message,final Throwable cause){  super(message);  ExceptionUtil.initCause(this,cause);}  }
class C{  public XmlTransformer(){  m_transformer=null;  m_source=null;}  }
class C{  public long delete(final IChunkedOrderedIterator<E> itr){  long n=0;  final IIndex ndx=getIndex(primaryKeyOrder);  while (itr.hasNext()) {    final E e=itr.next();    if (ndx.remove(e.name) != null) {      n++;    }  }  return n;}  }
class C{  @SuppressWarnings("unchecked") public ContextPanelUsersSelectComboBox(int contextId){  super();  loadUsersManagementExtension();  UsersTableModel usersTableModel=usersExtension.getUIConfiguredUsersModel(contextId);  this.setModel(new UsersListModel(usersTableModel));  this.setRenderer(new UserListCellRenderer());}  }
class C{  protected int unwrapValue(Object value){  return ((Integer)value).intValue();}  }
class C{  private void jumpToPrevTarget(){  Entity targ=getPrevTarget();  if (targ == null) {    return;  }  clientgui.bv.centerOnHex(targ.getPosition());  clientgui.getBoardView().select(targ.getPosition());  target(targ);}  }
class C{  public static final double previousDouble(double value){  if (value == Double.NEGATIVE_INFINITY) {    return value;  }  long bits;  if (value == 0) {    bits=0x8000000000000000L;  } else {    bits=Double.doubleToLongBits(value);  }  return Double.longBitsToDouble(value <= 0 ? bits + 1 : bits - 1);}  }
class C{  final public ColorModel coerceData(WritableRaster raster,boolean isAlphaPremultiplied){  if (!supportsAlpha || this.isAlphaPremultiplied() == isAlphaPremultiplied) {    return this;  }  int w=raster.getWidth();  int h=raster.getHeight();  int aIdx=numColorComponents;  float normAlpha;  float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));  int rminX=raster.getMinX();  int rY=raster.getMinY();  int rX;  int pixel[]=null;  int zpixel[]=null;  if (isAlphaPremultiplied) {switch (transferType) {case DataBuffer.TYPE_BYTE:{        for (int y=0; y < h; y++, rY++) {          rX=rminX;          for (int x=0; x < w; x++, rX++) {            pixel=raster.getPixel(rX,rY,pixel);            normAlpha=pixel[aIdx] * alphaScale;            if (normAlpha != 0.f) {              for (int c=0; c < aIdx; c++) {                pixel[c]=(int)(pixel[c] * normAlpha + 0.5f);              }              raster.setPixel(rX,rY,pixel);            } else {              if (zpixel == null) {                zpixel=new int[numComponents];                java.util.Arrays.fill(zpixel,0);              }              raster.setPixel(rX,rY,zpixel);            }          }        }      }    break;case DataBuffer.TYPE_USHORT:{    for (int y=0; y < h; y++, rY++) {      rX=rminX;      for (int x=0; x < w; x++, rX++) {        pixel=raster.getPixel(rX,rY,pixel);        normAlpha=pixel[aIdx] * alphaScale;        if (normAlpha != 0.f) {          for (int c=0; c < aIdx; c++) {            pixel[c]=(int)(pixel[c] * normAlpha + 0.5f);          }          raster.setPixel(rX,rY,pixel);        } else {          if (zpixel == null) {            zpixel=new int[numComponents];            java.util.Arrays.fill(zpixel,0);          }          raster.setPixel(rX,rY,zpixel);        }      }    }  }break;case DataBuffer.TYPE_INT:{for (int y=0; y < h; y++, rY++) {  rX=rminX;  for (int x=0; x < w; x++, rX++) {    pixel=raster.getPixel(rX,rY,pixel);    normAlpha=pixel[aIdx] * alphaScale;    if (normAlpha != 0.f) {      for (int c=0; c < aIdx; c++) {        pixel[c]=(int)(pixel[c] * normAlpha + 0.5f);      }      raster.setPixel(rX,rY,pixel);    } else {      if (zpixel == null) {        zpixel=new int[numComponents];        java.util.Arrays.fill(zpixel,0);      }      raster.setPixel(rX,rY,zpixel);    }  }}}break;default :throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);}} else {switch (transferType) {case DataBuffer.TYPE_BYTE:{for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=raster.getPixel(rX,rY,pixel);normAlpha=pixel[aIdx] * alphaScale;if (normAlpha != 0.0f) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {  pixel[c]=(int)(pixel[c] * invAlpha + 0.5f);}raster.setPixel(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_USHORT:{for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=raster.getPixel(rX,rY,pixel);normAlpha=pixel[aIdx] * alphaScale;if (normAlpha != 0) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]=(int)(pixel[c] * invAlpha + 0.5f);}raster.setPixel(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_INT:{for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=raster.getPixel(rX,rY,pixel);normAlpha=pixel[aIdx] * alphaScale;if (normAlpha != 0) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]=(int)(pixel[c] * invAlpha + 0.5f);}raster.setPixel(rX,rY,pixel);}}}}break;default :throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);}}return new DirectColorModel(colorSpace,pixel_bits,maskArray[0],maskArray[1],maskArray[2],maskArray[3],isAlphaPremultiplied,transferType);}  }
class C{  public void flushBufferBeforeTerminating(){  mySplitter.flush();  if (myPendingLineBreakFlag) {    fireOnUncapturedLineBreak();  }}  }
class C{  public static ObjectQueryResult<Task> findTenantTasks(DbClient dbClient,URI tenantId){  ContainmentConstraint constraint=ContainmentConstraint.Factory.getTenantOrgTaskConstraint(tenantId);  ObjectQueryResult<Task> queryResult=new ObjectQueryResult(dbClient,constraint);  queryResult.executeQuery();  return queryResult;}  }
class C{  public String toString(){  return new String(b,0,i_end);}  }
class C{  public static TransactionSignature dummy(){  BigInteger val=ECKey.HALF_CURVE_ORDER;  return new TransactionSignature(val,val);}  }
class C{  public void handleEvent(Event event){  InfoFlowDetailsViewPart.openView(method);  ValueViewPart.openView(method);  PointsToViewPart.openView(method);}  }
class C{  public static <T,R>Function<T,R> memoizeFunction(final Function<T,R> fn,final Cacheable<R> cache){  return null;}  }
class C{  private Conversion(){}  }
class C{  protected UriLocatorFactory newUriLocatorFactory(){  return new DefaultUriLocatorFactory();}  }
class C{  public static String formatSize(final long l){  if (l >= 1000000000000L)   return format(l / 1000000000000.0) + "T";  if (l >= 1000000000L)   return format(l / 1000000000.0) + "G";  if (l >= 1000000L)   return format(l / 1000000.0) + "M";  if (l >= 1000L)   return format(l / 1000.0) + "K";  return Long.toString(l);}  }
class C{  @Override public int compareTo(IPoint p){  double fp=FloatingPoint.value(getX() - p.getX());  if (fp < 0) {    return -1;  }  if (fp > 0) {    return +1;  }  fp=FloatingPoint.value(getY() - p.getY());  if (fp < 0) {    return -1;  }  if (fp > 0) {    return +1;  }  return 0;}  }
class C{  public static boolean isSnapshotFile(String name,File file){  Assert.notNull(name,"name");  Assert.notNull(file,"file");  String fileName=file.getName();  if (fileName.lastIndexOf(EXTENSION_SEPARATOR) == -1 || fileName.lastIndexOf(PART_SEPARATOR) == -1 || fileName.lastIndexOf(EXTENSION_SEPARATOR) < fileName.lastIndexOf(PART_SEPARATOR) || !fileName.endsWith(EXTENSION))   return false;  for (int i=fileName.lastIndexOf(PART_SEPARATOR) + 1; i < fileName.lastIndexOf(EXTENSION_SEPARATOR); i++) {    if (!Character.isDigit(fileName.charAt(i))) {      return false;    }  }  if (fileName.lastIndexOf(PART_SEPARATOR,fileName.lastIndexOf(PART_SEPARATOR) - 1) == -1)   return false;  for (int i=fileName.lastIndexOf(PART_SEPARATOR,fileName.lastIndexOf(PART_SEPARATOR) - 1) + 1; i < fileName.lastIndexOf(PART_SEPARATOR); i++) {    if (!Character.isDigit(fileName.charAt(i))) {      return false;    }  }  return fileName.substring(0,fileName.lastIndexOf(PART_SEPARATOR,fileName.lastIndexOf(PART_SEPARATOR) - 1)).equals(name);}  }
class C{  public static Process execute(final String self,final List envp,final File dir) throws IOException {  return execute(self,stringify(envp),dir);}  }
class C{  public boolean hasSubregion(){  return super.hasElement(Subregion.KEY);}  }
class C{  public void close(ResultSet rs){  if (rs != null) {    try {      rs.close();    } catch (    SQLException e) {    }  }}  }
class C{  public static Span enterCriticalSpan(String name){  if (IS_USER_BUILD) {    return NO_OP_SPAN;  }  if (name == null || name.isEmpty()) {    throw new IllegalArgumentException("name must be non-null and non-empty");  }  ThreadSpanState state=sThisThreadSpanState.get();  Span span=null;synchronized (state) {    if (state.mFreeListHead != null) {      span=state.mFreeListHead;      state.mFreeListHead=span.mNext;      state.mFreeListSize--;    } else {      span=new Span(state);    }    span.mName=name;    span.mCreateMillis=SystemClock.uptimeMillis();    span.mNext=state.mActiveHead;    span.mPrev=null;    state.mActiveHead=span;    state.mActiveSize++;    if (span.mNext != null) {      span.mNext.mPrev=span;    }    if (LOG_V)     Log.d(TAG,"Span enter=" + name + "; size="+ state.mActiveSize);  }  return span;}  }
class C{  public boolean isRefSetEmpty(){  assert Thread.holdsLock(EndpointEntry.this);  return refSet.size() == 0;}  }
class C{  @Override public void updateClob(String columnLabel,Clob x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateClob(" + quote(columnLabel) + ", x);");    }    checkClosed();    Value v;    if (x == null) {      v=ValueNull.INSTANCE;    } else {      v=conn.createClob(x.getCharacterStream(),-1);    }    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected InputStream openStream(String uri){  java.io.InputStream is=null;  try {    URL urlObj=new URL(uri);    if (urlObj.getProtocol().equalsIgnoreCase("http") || urlObj.getProtocol().equalsIgnoreCase("https")) {      return _streamFactory.getUrl(uri).getStream();    } else {      try {        is=new URL(uri).openStream();      } catch (      java.net.MalformedURLException e) {        XRLog.exception("bad URL given: " + uri,e);      }catch (      java.io.FileNotFoundException e) {        XRLog.exception("item at URI " + uri + " not found");      }catch (      java.io.IOException e) {        XRLog.exception("IO problem for " + uri,e);      }    }  } catch (  MalformedURLException e2) {    XRLog.exception("bad URL given: " + uri,e2);  }  return is;}  }
class C{  public void alert(String message){  if (userAgent != null) {    userAgent.showAlert(message);  }}  }
class C{  @ApiOperation(value="Request an initial load for the specified node for the specified engine") @RequestMapping(value="/engine/{engine}/requestinitialload",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postRequestInitialLoad(@PathVariable("engine") String engineName,@RequestParam(value="nodeId") String nodeId){  ISymmetricEngine engine=getSymmetricEngine(engineName);  INodeService nodeService=engine.getNodeService();  nodeService.setInitialLoadEnabled(nodeId,true,false,-1,"restapi");}  }
class C{  public GT_Recipe addFakeRecipe(boolean aCheckForCollisions,GT_Recipe aRecipe){  return addRecipe(aRecipe,aCheckForCollisions,true,false);}  }
class C{  private URL buildUrl(String domain,String path,Map<String,String> parameters) throws MalformedURLException, DocumentListException {  if (path == null) {    throw new DocumentListException("null path");  }  StringBuffer url=new StringBuffer();  url.append("https://" + domain + URL_FEED+ path);  if (parameters != null && parameters.size() > 0) {    Set<Map.Entry<String,String>> params=parameters.entrySet();    Iterator<Map.Entry<String,String>> itr=params.iterator();    url.append("?");    while (itr.hasNext()) {      Map.Entry<String,String> entry=itr.next();      url.append(entry.getKey() + "=" + entry.getValue());      if (itr.hasNext()) {        url.append("&");      }    }  }  return new URL(url.toString());}  }
class C{  @SuppressWarnings({"unchecked"}) protected final <T extends Map<E,Object>>T map(){  return (T)map;}  }
class C{  public void dumpToLog(boolean isFromStart){  if (mDisabled)   return;  Log.i(mTag,mLabel + ": begin");  final long first=mSplits.get(0);  long now=first;  for (int i=1; i < mSplits.size(); i++) {    now=mSplits.get(i);    final String splitLabel=mSplitLabels.get(i);    final long prev=mSplits.get(i - 1);    if (isFromStart) {      Log.i(mTag,mLabel + ":      " + (now - first)+ " ms, "+ splitLabel);    } else {      Log.i(mTag,mLabel + ":      " + (now - prev)+ " ms, "+ splitLabel);    }  }  Log.i(mTag,mLabel + ": end, " + (now - first)+ " ms");}  }
class C{  private void loadAnimations(){  mAnimationTimerAlpha=new AlphaAnimation(0.0f,1.0f);  mAnimationTimerAlpha.setDuration(1000);  mAnimationTimerAlpha.setRepeatMode(Animation.REVERSE);  mAnimationTimerAlpha.setRepeatCount(Animation.INFINITE);  mAnimationPlayAgainBackground=AnimationUtils.loadAnimation(getActivity(),R.anim.play_again_bkgrd_anim);  mAnimationPlayAgainBackground.setFillAfter(true);  mAnimationPlayAgainBackground.setAnimationListener(this);  mAnimationCardCover=AnimationUtils.loadAnimation(getActivity(),R.anim.card_answer_flash);  mAnimationCardCover.setFillAfter(true);  mAnimationPlayAgainMain=AnimationUtils.loadAnimation(getActivity(),R.anim.play_again_main_anim);  mAnimationPlayAgainMain.setFillAfter(true);  mAnimationPlayAgainMain.setAnimationListener(this);  mAnimationSetSnowman=new AnimationSet(true);  mAnimationSnowman=new TranslateAnimation(150,0,150,0);  mAnimationSnowman.setDuration(1000);  mAnimationSetSnowman.addAnimation(mAnimationSnowman);  mAnimationSnowmanBack=new TranslateAnimation(0,150,0,150);  mAnimationSnowmanBack.setDuration(1000);  mAnimationSnowmanBack.setStartOffset(1500);  mAnimationSnowmanBack.setAnimationListener(this);  mAnimationSetSnowman.addAnimation(mAnimationSnowmanBack);  mAnimationSetSnowman.setAnimationListener(this);  mAnimationRightPaneSlideOut=AnimationUtils.loadAnimation(getActivity(),android.R.anim.slide_out_right);  mAnimationRightPaneSlideOut.setFillAfter(true);  mAnimationLeftPaneSlideOut=AnimationUtils.loadAnimation(getActivity(),R.anim.left_pane_slide_out);  mAnimationLeftPaneSlideOut.setFillAfter(true);  mAnimationLeftPaneSlideIn=AnimationUtils.loadAnimation(getActivity(),android.R.anim.slide_in_left);  mAnimationLeftPaneSlideIn.setFillAfter(true);  mAnimationRightPaneSlideIn=AnimationUtils.loadAnimation(getActivity(),R.anim.right_pane_slide_in);  mAnimationRightPaneSlideIn.setFillAfter(true);  mAnimationScaleLevelDown=AnimationUtils.loadAnimation(getActivity(),R.anim.scale_level_anim_down);  mAnimationScaleLevelDown.setAnimationListener(this);  mAnimationLevelFadeOut=AnimationUtils.loadAnimation(getActivity(),R.anim.level_fade_out_anim);  mAnimationLevelFadeOut.setAnimationListener(this);  mAnimationLevelScaleUp=AnimationUtils.loadAnimation(getActivity(),R.anim.scale_up_level_anim);  mAnimationLevelScaleUp.setAnimationListener(this);  mAnimationRightPaneSlideOut.setAnimationListener(this);  mAnimationLeftPaneSlideOut.setAnimationListener(this);}  }
class C{  @Override public boolean supportsGroupByUnrelated(){  debugCodeCall("supportsGroupByUnrelated");  return true;}  }
class C{  public double smog(List<String> words,int nrofSentences){  words=filterWords(words);  int nrofBigwords=this.getNrofBigwords(words);  return smog(nrofBigwords,nrofSentences);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"scasw");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a scasw instruction (invalid number of operands)");  }  new ScasGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.WORD,instructions);}  }
class C{  private long parseKml(ZipInputStream zipInputStream) throws IOException {  ByteArrayInputStream byteArrayInputStream=null;  try {    KmlFileTrackImporter kmlFileTrackImporter=new KmlFileTrackImporter(context,importTrackId);    byteArrayInputStream=new ByteArrayInputStream(getKml(zipInputStream));    return kmlFileTrackImporter.importFile(byteArrayInputStream);  }  finally {    if (byteArrayInputStream != null) {      byteArrayInputStream.close();    }  }}  }
class C{  public boolean add(final long[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  private void usage(String message){  StringBuilder sb=new StringBuilder();  sb.append(message);  sb.append(System.getProperty("line.separator"));  sb.append(System.getProperty("line.separator"));  sb.append("java -cp wbxml-jaxb-X.X.X.jar ");  sb.append(this.getClass().getName());  sb.append(" [-j --jaxb] [-d --definition <NAME>] {infile} {outfile}");  sb.append(System.getProperty("line.separator"));  sb.append("       -j --jaxb: Use JAXB instead instead default DOM");  sb.append(System.getProperty("line.separator"));  sb.append("      -e --event: Use XMLEventWriter instead of the default XMLStreamWriter");  sb.append(System.getProperty("line.separator"));  sb.append("                  In order to use JAXB the classes should be generated from the DTD (xjc)");  sb.append(System.getProperty("line.separator"));  sb.append(" -d --definition: Force definition instead deriving from WBXML. Current definitions:");  sb.append(System.getProperty("line.separator"));  for (  WbXmlDefinition d : WbXmlInitialization.getDefinitions()) {    sb.append(String.format("                  %s",d.getName()));    sb.append(System.getProperty("line.separator"));  }  sb.append("          infile: input WBXML file (\"-\" means standard input)");  sb.append(System.getProperty("line.separator"));  sb.append("         outfile: output XML file (\"-\" means sntandard output)");  sb.append(System.getProperty("line.separator"));  throw new IllegalArgumentException(sb.toString());}  }
class C{  private String readName() throws IOException, XmlPullParserException {  if (position >= limit && !fillBuffer(1)) {    checkRelaxed("name expected");    return "";  }  int start=position;  StringBuilder result=null;  char c=buffer[position];  if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == ':' || c >= '\u00c0' || relaxed) {    position++;  } else {    checkRelaxed("name expected");    return "";  }  while (true) {    if (position >= limit) {      if (result == null) {        result=new StringBuilder();      }      result.append(buffer,start,position - start);      if (!fillBuffer(1)) {        return result.toString();      }      start=position;    }    c=buffer[position];    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| c == '_' || c == '-' || c == ':' || c == '.' || c >= '\u00b7') {      position++;      continue;    }    if (result == null) {      return stringPool.get(buffer,start,position - start);    } else {      result.append(buffer,start,position - start);      return result.toString();    }  }}  }
class C{  private void enableFieldBasedOnUpdateMethod(){  if (updateMethod.getSelectedItem() == CompetitiveGroup.UpdateMethod.ALVAREZ_SQUIRE) {    tfSynpaseDecayPercent.setEnabled(true);  } else   if (updateMethod.getSelectedItem() == CompetitiveGroup.UpdateMethod.RUMM_ZIPSER) {    tfSynpaseDecayPercent.setEnabled(false);  }}  }
class C{  public static boolean isData(Object o){  return ArrayFuncs.computeLSize(o) > 0;}  }
class C{  private boolean timedOut(long startWait){  return (System.nanoTime() - startWait) > timeout;}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  @Override public void changeSize(int newRows,int newCols){  if (newRows <= 0)   throw new ArithmeticException("Matrix must have a positive number of rows");  if (newCols <= 0)   throw new ArithmeticException("Matrix must have a positive number of columns");  int underNewRows=Math.max(newRows + firstRow,baseMatrix.rows());  int underNewCols=Math.max(newCols + firstColumn,baseMatrix.cols());  baseMatrix.changeSize(underNewRows,underNewCols);  if (newRows > rows())   new SubMatrix(baseMatrix,toRow,firstColumn,firstRow + newRows,firstColumn + newCols).zeroOut();  if (newCols > cols())   new SubMatrix(baseMatrix,firstRow,toCol,firstRow + newRows,firstColumn + newCols).zeroOut();  toRow=firstRow + newRows;  toCol=firstColumn + newCols;}  }
class C{  public CheckboxTableViewer buildCheckable(){  if (!checkable) {    throw new IllegalStateException("The table viewer is not a CheckboxTableViewer!");  }  return (CheckboxTableViewer)viewer;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public double linearDistance(Location location){  if (location == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","linearDistance","missingLocation"));  }  double lat1=Math.toRadians(this.latitude);  double lon1=Math.toRadians(this.longitude);  double lat2=Math.toRadians(location.latitude);  double lon2=Math.toRadians(location.longitude);  if (lat1 == lat2 && lon1 == lon2) {    return 0;  }  double dLat=lat2 - lat1;  double dLon=lon2 - lon1;  if (Math.abs(dLon) > Math.PI) {    dLon=dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  }  double distanceRadians=Math.sqrt(dLat * dLat + dLon * dLon);  return Double.isNaN(distanceRadians) ? 0 : distanceRadians;}  }
class C{  public void addItem(String s){  if (_nstored == 0) {    addItem(s,0);  } else {    addItem(s,_valueArray[_nstored - 1] + 1);  }}  }
class C{  public void query(Collection<BoundedObject> results){  BoundingBox box;  try {    box=new BoundingBox(-BoundingBox.MAX_LON_E7,-BoundingBox.MAX_LAT_E7,BoundingBox.MAX_LON_E7,BoundingBox.MAX_LAT_E7);    query(results,box,root);  } catch (  OsmException e) {    Log.d(DEBUG_TAG,"new BoundingBox caused " + e);  }}  }
class C{  public String address(){  return _address;}  }
class C{  public void addFragment(RootFragment from,RootFragment to,Bundle bundle,@StackMode int stackMode){  if (stackMode != KEEP_CURRENT) {    currentMode=stackMode;  }  if (bundle != null) {    to.setArguments(bundle);  }switch (currentMode) {case SINGLE_TOP:    if (!stack.putSingleTop(to)) {      addFragment(from,to);    }  break;case SINGLE_TASK:if (!stack.putSingleTask(to)) {  addFragment(from,to);}break;case SINGLE_INSTANCE:stack.putSingleInstance(to);addFragment(from,to);break;default :stack.putStandard(to);addFragment(from,to);break;}}  }
class C{  public MessageSigner(String keyPath) throws Exception {  byte[] keyData=cleanseKeyData(readData(keyPath));  PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(keyData);  KeyFactory kf=KeyFactory.getInstance("RSA");  PrivateKey key=kf.generatePrivate(keySpec);  sig=Signature.getInstance("SHA1withRSA");  sig.initSign(key);}  }
class C{  public ByteArrayList(int capacity){  _data=new byte[capacity];  _pos=0;}  }
class C{  public CubePortrayal3D(Color color){  this(color,1f);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.i(TAG,"Restoring selections in onCreate: " + "position: " + savedInstanceState.getInt(SELECTED_LIST_POSITION,0) + "class: "+ savedInstanceState.getString(SELECTED_APP_CLASS));    currentPosition=savedInstanceState.getInt(SELECTED_LIST_POSITION,0);    currentSelection=savedInstanceState.getString(SELECTED_APP_CLASS);    enableMouseEvents=savedInstanceState.getBoolean(ENABLE_MOUSE_EVENTS,true);    enableJoystickEvents=savedInstanceState.getBoolean(ENABLE_JOYSTICK_EVENTS,false);  }  setContentView(R.layout.test_chooser_layout);  btnOK=(Button)findViewById(R.id.btnOK);  btnCancel=(Button)findViewById(R.id.btnCancel);  listClasses=(ListView)findViewById(R.id.listClasses);  editFilterText=(EditText)findViewById(R.id.txtFilter);  rootPackage="jme3test";  exclusions.add("$");  exclusions.add("TestChooser");  exclusions.add("awt");  Log.i(TAG,"Composing Test list...");  ApplicationInfo ai=this.getApplicationInfo();  String classPath=ai.sourceDir;  DexFile dex=null;  Enumeration<String> apkClassNames=null;  try {    dex=new DexFile(classPath);    apkClassNames=dex.entries();    while (apkClassNames.hasMoreElements()) {      String className=apkClassNames.nextElement();      if (checkClassName(className) && checkClassType(className)) {        classNames.add(className);      }    }  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      dex.close();    } catch (    IOException e) {      e.printStackTrace();    }  }  arrayAdapter=new CustomArrayAdapter(this,R.layout.test_chooser_row,classNames);  Log.i(TAG,"Setting Adapter Background Resource IDs");  arrayAdapter.setSelectedBackgroundResource(R.drawable.selected);  arrayAdapter.setNonSelectedBackgroundResource(R.drawable.nonselected);  Log.i(TAG,"Setting ListView Adapter");  listClasses.setAdapter(arrayAdapter);  setSelection(currentPosition);  listClasses.setOnItemClickListener(this);  btnOK.setOnClickListener(this);  btnCancel.setOnClickListener(this);  editFilterText.addTextChangedListener(this);}  }
class C{  long[] machar(){  long ibeta, it, irnd, machep, negep;  double beta, betain, betah, a, b, ZERO, ONE, TWO, temp, tempa, temp1;  long i, itemp;  ONE=(double)1;  TWO=ONE + ONE;  ZERO=ONE - ONE;  a=ONE;  temp1=ONE;  while (temp1 - ONE == ZERO) {    a=a + a;    temp=a + ONE;    temp1=temp - a;  }  b=ONE;  itemp=0;  while (itemp == 0) {    b=b + b;    temp=a + b;    itemp=(long)(temp - a);  }  ibeta=itemp;  beta=(double)ibeta;  it=0;  b=ONE;  temp1=ONE;  while (temp1 - ONE == ZERO) {    it=it + 1;    b=b * beta;    temp=b + ONE;    temp1=temp - b;  }  irnd=0;  betah=beta / TWO;  temp=a + betah;  if (temp - a != ZERO)   irnd=1;  tempa=a + beta;  temp=tempa + betah;  if ((irnd == 0) && (temp - tempa != ZERO))   irnd=2;  negep=it + 3;  betain=ONE / beta;  a=ONE;  for (i=0; i < negep; i++)   a=a * betain;  b=a;  temp=ONE - a;  while (temp - ONE == ZERO) {    a=a * beta;    negep=negep - 1;    temp=ONE - a;  }  negep=-(negep);  machep=-(it) - 3;  a=b;  temp=ONE + a;  while (temp - ONE == ZERO) {    a=a * beta;    machep=machep + 1;    temp=ONE + a;  }  eps=a;  return new long[]{ibeta,it,irnd,machep,negep};}  }
class C{  public WriterGuacamoleWriter(Writer output){  this.output=output;}  }
class C{  protected CharArrayBuffer initBuffer(CharArrayBuffer buffer){  if (buffer != null) {    buffer.clear();  } else {    buffer=new CharArrayBuffer(64);  }  return buffer;}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new SwedishAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.648 -0500",hash_original_method="96CF2F98DDD4CA038A3AFDF5A5247694",hash_generated_method="9B75AEEDBF87C758BEEF2F33C2660F13") public void startRetransmitTimer(SIPServerTransaction sipServerTx,Response response){  if (sipServerTx.getRequest().getMethod().equals(Request.INVITE) && response.getStatusCode() / 100 == 2) {    this.startTimer(sipServerTx);  }}  }
class C{  public static Array listToArrayTrim(String list,String delimiter){  if (delimiter.length() == 1)   return listToArrayTrim(list,delimiter.charAt(0));  if (list.length() == 0)   return new ArrayImpl();  char[] del=delimiter.toCharArray();  char c;  outer:   while (list.length() > 0) {    c=list.charAt(0);    for (int i=0; i < del.length; i++) {      if (c == del[i]) {        list=list.substring(1);        continue outer;      }    }    break;  }  int len;  outer:   while (list.length() > 0) {    c=list.charAt(list.length() - 1);    for (int i=0; i < del.length; i++) {      if (c == del[i]) {        len=list.length();        list=list.substring(0,len - 1 < 0 ? 0 : len - 1);        continue outer;      }    }    break;  }  return listToArray(list,delimiter);}  }
class C{  public void writeIntArray(int[] array,boolean append){  if (file.exists()) {    System.out.println("Warning : the file " + file.getName() + " already exists !");  }  FileOutputStream fos=null;  try {    fos=new FileOutputStream(file,append);  } catch (  FileNotFoundException ex) {    throw new IllegalArgumentException(ex.toString());  }  BufferedOutputStream bos=new BufferedOutputStream(fos);  BinaryOutputStream bs=new BinaryOutputStream(bos,bigEndian);  bs.writeIntArray(array,append);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public int size(){  return size;}  }
class C{  protected void initGUI(){  getContentPane().setLayout(new BorderLayout());  m_TextInfo=new JTextArea();  m_TextInfo.setEditable(false);  m_TextInfo.setFont(new Font("Monospaced",Font.PLAIN,12));  getContentPane().add(new JScrollPane(m_TextInfo),BorderLayout.CENTER);  pack();  setSize(320,400);}  }
class C{  public double[] unhomogeneVector(double[] v){  assert (v.length == dim + 1);  double[] dv=new double[dim];  double scale=v[dim];  assert (Math.abs(scale) > 0.0);  for (int i=0; i < dim; i++) {    dv[i]=v[i] / scale;  }  return dv;}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case FunctionblockPackage.FUNCTIONBLOCK_MODEL:{      FunctionblockModel functionblockModel=(FunctionblockModel)theEObject;      T result=caseFunctionblockModel(functionblockModel);      if (result == null)       result=caseModel(functionblockModel);      if (result == null)       result=defaultCase(theEObject);      return result;    }case FunctionblockPackage.FUNCTION_BLOCK:{    FunctionBlock functionBlock=(FunctionBlock)theEObject;    T result=caseFunctionBlock(functionBlock);    if (result == null)     result=defaultCase(theEObject);    return result;  }case FunctionblockPackage.CONFIGURATION:{  Configuration configuration=(Configuration)theEObject;  T result=caseConfiguration(configuration);  if (result == null)   result=defaultCase(theEObject);  return result;}case FunctionblockPackage.STATUS:{Status status=(Status)theEObject;T result=caseStatus(status);if (result == null) result=defaultCase(theEObject);return result;}case FunctionblockPackage.FAULT:{Fault fault=(Fault)theEObject;T result=caseFault(fault);if (result == null) result=defaultCase(theEObject);return result;}case FunctionblockPackage.OPERATION:{Operation operation=(Operation)theEObject;T result=caseOperation(operation);if (result == null) result=defaultCase(theEObject);return result;}case FunctionblockPackage.RETURN_TYPE:{ReturnType returnType=(ReturnType)theEObject;T result=caseReturnType(returnType);if (result == null) result=defaultCase(theEObject);return result;}case FunctionblockPackage.RETURN_OBJECT_TYPE:{ReturnObjectType returnObjectType=(ReturnObjectType)theEObject;T result=caseReturnObjectType(returnObjectType);if (result == null) result=caseReturnType(returnObjectType);if (result == null) result=defaultCase(theEObject);return result;}case FunctionblockPackage.RETURN_PRIMITIVE_TYPE:{ReturnPrimitiveType returnPrimitiveType=(ReturnPrimitiveType)theEObject;T result=caseReturnPrimitiveType(returnPrimitiveType);if (result == null) result=caseReturnType(returnPrimitiveType);if (result == null) result=defaultCase(theEObject);return result;}case FunctionblockPackage.PRIMITIVE_PARAM:{PrimitiveParam primitiveParam=(PrimitiveParam)theEObject;T result=casePrimitiveParam(primitiveParam);if (result == null) result=caseParam(primitiveParam);if (result == null) result=defaultCase(theEObject);return result;}case FunctionblockPackage.REF_PARAM:{RefParam refParam=(RefParam)theEObject;T result=caseRefParam(refParam);if (result == null) result=caseParam(refParam);if (result == null) result=defaultCase(theEObject);return result;}case FunctionblockPackage.PARAM:{Param param=(Param)theEObject;T result=caseParam(param);if (result == null) result=defaultCase(theEObject);return result;}case FunctionblockPackage.EVENT:{Event event=(Event)theEObject;T result=caseEvent(event);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public static void assertMosaicSupplyChangeNotification(final Notification notification,final Account expectedSupplier,final MosaicId expectedMosaicId,final Supply expectedSupplyChange,final MosaicSupplyType expectedSupplyType){  final MosaicSupplyChangeNotification n=(MosaicSupplyChangeNotification)notification;  Assert.assertThat(n.getType(),IsEqual.equalTo(NotificationType.MosaicSupplyChange));  Assert.assertThat(n.getSupplier(),IsEqual.equalTo(expectedSupplier));  Assert.assertThat(n.getMosaicId(),IsEqual.equalTo(expectedMosaicId));  Assert.assertThat(n.getDelta(),IsEqual.equalTo(expectedSupplyChange));  Assert.assertThat(n.getSupplyType(),IsEqual.equalTo(expectedSupplyType));}  }
class C{  static private String to64(long v,int size){  final StringBuffer result=new StringBuffer();  while (--size >= 0) {    result.append(itoa64.charAt((int)(v & 0x3f)));    v>>>=6;  }  return result.toString();}  }
class C{  public boolean isRunning(InternalManagedEntity entity){  final String command=arrangeRemoteCommand(entity,entity.getIsRunningCommand());  String output=execute(command,entity);  if (output == null || (output.indexOf("stop") != -1) || (output.indexOf("killed") != -1) || (output.indexOf("starting") != -1)) {    return false;  } else   if (output.indexOf("running") != -1) {    return true;  } else {    throw new IllegalStateException(LocalizedStrings.ManagedEntityController_COULD_NOT_DETERMINE_IF_MANAGED_ENTITY_WAS_RUNNING_0.toLocalizedString(output));  }}  }
class C{  public Stacks(Sentence sentence,List<FeatureFunction> featureFunctions,Grammar[] grammars,JoshuaConfiguration config){  this.sentence=sentence;  this.featureFunctions=featureFunctions;  this.config=config;  int num_phrase_tables=0;  for (  Grammar grammar : grammars)   if (grammar instanceof PhraseTable)   ++num_phrase_tables;  PhraseTable[] phraseTables=new PhraseTable[num_phrase_tables + 2];  for (int i=0, j=0; i < grammars.length; i++)   if (grammars[i] instanceof PhraseTable)   phraseTables[j++]=(PhraseTable)grammars[i];  phraseTables[phraseTables.length - 2]=new PhraseTable(UNKNOWN_OWNER,config);  phraseTables[phraseTables.length - 2].addRule(Hypothesis.END_RULE);  phraseTables[phraseTables.length - 1]=new PhraseTable("oov",config);  AbstractGrammar.addOOVRules(phraseTables[phraseTables.length - 1],sentence.getLattice(),featureFunctions,config.true_oovs_only);  this.chart=new PhraseChart(phraseTables,featureFunctions,sentence,config.num_translation_options);}  }
class C{  public void access(){  lastAccessedTime=System.currentTimeMillis();}  }
class C{  public static void assertAllCountersZero(){  assertEquals(counterCreate1,0);  assertEquals(counterUpdate1,0);  assertEquals(counterCreate2,0);  assertEquals(counterUpdate2,0);}  }
class C{  public static JsonObject encodeIdToJson(final Object id){  final JsonObject json=new JsonObject();  if (id instanceof String) {    json.put("type","string");    json.put("id",id);  } else   if (id instanceof UnsignedLong) {    json.put("type","ulong");    json.put("id",id.toString());  } else   if (id instanceof UUID) {    json.put("type","uuid");    json.put("id",id.toString());  } else   if (id instanceof Binary) {    json.put("type","binary");    final Binary binary=(Binary)id;    json.put("id",Base64.getEncoder().encodeToString(binary.getArray()));  } else {    throw new IllegalArgumentException("type " + id.getClass().getName() + " is not supported");  }  return json;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size());  int mask=elements.length - 1;  for (int i=head; i != tail; i=(i + 1) & mask)   s.writeObject(elements[i]);}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (cv != null) {    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public String Table_Period(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value,Object oldValue){  Integer A_Depreciation_Table_Header_ID=(Integer)value;  try {    if (A_Depreciation_Table_Header_ID != null) {      String SQL="SELECT A_Term " + "FROM A_Depreciation_Table_Header " + "WHERE A_Depreciation_Table_Header_ID='" + A_Depreciation_Table_Header_ID + "'";      PreparedStatement pstmt=DB.prepareStatement(SQL,null);      ResultSet rs=pstmt.executeQuery();      if (rs.next()) {        Env.setContext(ctx,WindowNo,"A_DEPRECIATION_MANUAL_PERIOD",rs.getString("A_Term"));        mTab.setValue("A_DEPRECIATION_MANUAL_PERIOD",rs.getString("A_Term"));      }      rs.close();      pstmt.close();    }  } catch (  SQLException e) {    log.info("PeriodType " + e);    return e.getLocalizedMessage();  }  return "";}  }
class C{  public void emitDirect(int taskId,String streamId,List<Object> tuple,Object messageId){  delegate.emitDirect(taskId,streamId,tuple,messageId);}  }
class C{  protected void recordSelected(int key){  if (m_C_Invoice_ID != key) {    refresh();  }  p_detailTaskPane.setCollapsed(false);  return;}  }
class C{  public BufferedRandomAccessFile(final File file,final String mode) throws IOException {  this(file,mode,DEFAULT_BUFFER_SIZE);}  }
class C{  @Override public void updateAsciiStream(String columnLabel,InputStream x,int length) throws SQLException {  updateAsciiStream(columnLabel,x,(long)length);}  }
class C{  public void load(){  JsonObject json=readConfig();  if (json == null) {    Log.error("Could NOT read either remote and local configuration files. Entering virtual mode.");    ClientProxy.VIRTUAL=true;    return;  }  String id;  if (OS.isWindows())   id="win"; else   if (OS.isMacintosh())   id="mac"; else   if (OS.isLinux())   id="linux"; else {    Log.error("Your OS isn't supported by MCEF. Entering virtual mode.");    ClientProxy.VIRTUAL=true;    return;  }  String arch=System.getProperty("sun.arch.data.model");  if (!arch.equals("32") && !arch.equals("64")) {    Log.error("Your CPU arch isn't supported by MCEF. Entering virtual mode.");    ClientProxy.VIRTUAL=true;    return;  }  PLATFORM=id + arch;  Log.info("Detected platform: %s",PLATFORM);  JsonElement ver=json.get(MCEF.VERSION);  if (ver == null || !ver.isJsonObject()) {    Log.error("Config file does NOT contain the latest MCEF version (wtf??). Entering virtual mode.");    ClientProxy.VIRTUAL=true;    return;  }  JsonObject vData=ver.getAsJsonObject();  JsonElement cat=vData.get("platforms");  if (cat == null || !cat.isJsonObject()) {    Log.error("Config file is missing \"platforms\" object. Entering virtual mode.");    ClientProxy.VIRTUAL=true;    return;  }  JsonObject catObj=cat.getAsJsonObject();  JsonElement res=catObj.get(PLATFORM);  if (res == null || !res.isJsonObject()) {    Log.error("Your platform isn't supported by MCEF yet. Entering virtual mode.");    ClientProxy.VIRTUAL=true;    return;  }  resources.clear();  addResources(res.getAsJsonObject(),PLATFORM);  res=catObj.get("shared");  if (res != null && res.isJsonObject())   addResources(res.getAsJsonObject(),"shared");  JsonElement ext=vData.get("extract");  if (ext != null && ext.isJsonArray()) {    JsonArray ray=ext.getAsJsonArray();    for (    JsonElement e : ray) {      if (e != null && e.isJsonPrimitive())       extract.add(e.getAsString());    }  }  JsonElement mcVersions=json.get("latestVersions");  if (mcVersions != null && mcVersions.isJsonObject()) {    JsonElement cVer=mcVersions.getAsJsonObject().get(Minecraft.getMinecraft().getVersion());    if (cVer != null && cVer.isJsonPrimitive())     version=cVer.getAsString();  }}  }
class C{  public ConvolveOp(Kernel kernel){  this.kernel=kernel;  this.edgeHint=EDGE_ZERO_FILL;}  }
class C{  public List<EntityAuditEvent> listEvents(String entityId,String startKey,short n) throws AtlasException {  LOG.info("Listing events for entity id {}, starting timestamp {}, #records {}",entityId,startKey,n);  Table table=null;  ResultScanner scanner=null;  try {    table=connection.getTable(tableName);    Scan scan=new Scan().setReversed(true).setFilter(new PageFilter(n)).setStopRow(Bytes.toBytes(entityId)).setCaching(n).setSmall(true);    if (StringUtils.isEmpty(startKey)) {      byte[] entityBytes=getKey(entityId,Long.MAX_VALUE);      scan=scan.setStartRow(entityBytes);    } else {      scan=scan.setStartRow(Bytes.toBytes(startKey));    }    scanner=table.getScanner(scan);    Result result;    List<EntityAuditEvent> events=new ArrayList<>();    while ((result=scanner.next()) != null && events.size() < n) {      EntityAuditEvent event=fromKey(result.getRow());      if (!event.getEntityId().equals(entityId)) {        continue;      }      event.setUser(getResultString(result,COLUMN_USER));      event.setAction(EntityAuditEvent.EntityAuditAction.valueOf(getResultString(result,COLUMN_ACTION)));      event.setDetails(getResultString(result,COLUMN_DETAIL));      if (persistEntityDefinition) {        String colDef=getResultString(result,COLUMN_DEFINITION);        if (colDef != null) {          event.setEntityDefinition(colDef);        }      }      events.add(event);    }    LOG.info("Got events for entity id {}, starting timestamp {}, #records {}",entityId,startKey,events.size());    return events;  } catch (  IOException e) {    throw new AtlasException(e);  } finally {    close(scanner);    close(table);  }}  }
class C{  final public void yyreset(java.io.Reader reader) throws java.io.IOException {  yyclose();  yy_reader=reader;  yy_atBOL=true;  yy_atEOF=false;  yy_endRead=yy_startRead=0;  yy_currentPos=yy_markedPos=yy_pushbackPos=0;  yyline=yychar=yycolumn=0;  yy_lexical_state=YYINITIAL;}  }
class C{  @Override public void onSignedOut(){  startActivity(SignInActivity.getStartIntent(this,true));}  }
class C{  private static void recDrawSides(SVGPlot plot,Element group,String cls,double minx,double miny,List<double[]> r_edges,int off,long[] b){  StringBuilder pbuf=new StringBuilder();  for (int i=0; i < r_edges.size() - 1; i++) {    if (BitsUtil.get(b,i)) {      continue;    }    double[] deltai=r_edges.get(i);    final double xi=minx + deltai[0];    if (!isFinite(xi)) {      continue;    }    final double yi=miny + deltai[1];    if (!isFinite(yi)) {      continue;    }    for (int j=i + 1; j < r_edges.size(); j++) {      if (BitsUtil.get(b,j)) {        continue;      }      double[] deltaj=r_edges.get(j);      final double dxj=deltaj[0];      if (!isFinite(xi)) {        continue;      }      final double dyj=deltaj[1];      if (!isFinite(dxj)) {        continue;      }      pbuf.delete(0,pbuf.length());      pbuf.append(SVGUtil.fmt(minx)).append(',');      pbuf.append(SVGUtil.fmt(miny)).append(' ');      pbuf.append(SVGUtil.fmt(xi)).append(',');      pbuf.append(SVGUtil.fmt(yi)).append(' ');      pbuf.append(SVGUtil.fmt(xi + dxj)).append(',');      pbuf.append(SVGUtil.fmt(yi + dyj)).append(' ');      pbuf.append(SVGUtil.fmt(minx + dxj)).append(',');      pbuf.append(SVGUtil.fmt(miny + dyj));      Element poly=plot.svgElement(SVGConstants.SVG_POLYGON_TAG);      SVGUtil.setAtt(poly,SVGConstants.SVG_POINTS_ATTRIBUTE,pbuf.toString());      SVGUtil.setCSSClass(poly,cls);      group.appendChild(poly);    }    BitsUtil.setI(b,i);    recDrawSides(plot,group,cls,xi,yi,r_edges,i + 1,b);    BitsUtil.clearI(b,i);  }}  }
class C{  public MappedBusMessage readMessage(MappedBusMessage message){  if (!typeRead) {    readType();  }  typeRead=false;  message.read(mem,limit);  limit+=recordSize;  return message;}  }
class C{  public static ObjectAnimator ofPropertyValuesHolder(Object target,PropertyValuesHolder... values){  ObjectAnimator anim=new ObjectAnimator();  anim.mTarget=target;  anim.setValues(values);  return anim;}  }
class C{  @Override public boolean hasNext(){  return (m_Current < m_Datasets.size());}  }
class C{  public boolean hasValue(){  return mValue != null;}  }
class C{  public void quit(){  if (stopper != null)   stopper.stop();  stopper=null;  stopMovie();}  }
class C{  static public FunctionNode subtract(final ValueExpressionNode t1,final ValueExpressionNode t2){  return new FunctionNode(FunctionRegistry.SUBTRACT,null,new ValueExpressionNode[]{t1,t2});}  }
class C{  public synchronized void reportLastObsoletePlog(int newObsolete) throws ReplicatorException {  String command=vmrrControlScript + " command PROCESS DISCONNECTED_APPLY SET_OBSOLETE " + this.replicateApplyName+ " "+ newObsolete;  logger.info("Signaling last obsolete plog file: " + command);  execAndReturnStdout(command,false);}  }
class C{  public byte[] decrypt(byte[] bytesToDecode,CharSequence password) throws KeyCrypterException {  try {    byte[] salt=new byte[SALT_LENGTH];    System.arraycopy(bytesToDecode,0,salt,0,SALT_LENGTH);    byte[] cipherBytes=new byte[bytesToDecode.length - SALT_LENGTH];    System.arraycopy(bytesToDecode,SALT_LENGTH,cipherBytes,0,bytesToDecode.length - SALT_LENGTH);    ParametersWithIV key=(ParametersWithIV)getAESPasswordKey(password,salt);    BufferedBlockCipher cipher=new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine()));    cipher.init(false,key);    byte[] decryptedBytes=new byte[cipher.getOutputSize(cipherBytes.length)];    final int processLength=cipher.processBytes(cipherBytes,0,cipherBytes.length,decryptedBytes,0);    final int doFinalLength=cipher.doFinal(decryptedBytes,processLength);    return Arrays.copyOf(decryptedBytes,processLength + doFinalLength);  } catch (  Exception e) {    throw new KeyCrypterException("Could not decrypt input string",e);  }}  }
class C{  protected SVGOMHKernElement(){}  }
class C{  @Override protected final void quietCleanup(){  if (m_adeExt != null) {    m_adeExt.quietCleanup();    m_adeExt=null;  }  super.quietCleanup();}  }
class C{  public synchronized void rewind(long rewindTime){  rewindTo(currentTrackTime - rewindTime);}  }
class C{  public DictionaryMatcherSourceOperator(DictionaryPredicate predicate,IDataStore dataStore){  this.resultCursor=-1;  this.limit=Integer.MAX_VALUE;  this.offset=0;  this.predicate=predicate;  this.dataStore=dataStore;}  }
class C{  public static FirstEverProjectionExpression firstEver(Expression expression){  return new FirstEverProjectionExpression(expression,false);}  }
class C{  public boolean isNotifyOnMergeFailure(){  return notifyOnMergeFailure;}  }
class C{  public static Document createEmptyDocument(){  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder builder=factory.newDocumentBuilder();    return builder.newDocument();  } catch (  Exception ex) {    throw new RuntimeException("Creating a new DOM document failed: " + ex.toString());  }}  }
class C{  void clear(){  oldNewMap.clear();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean vPoolSpecifiesMirrors(final VirtualPool virtualPool,DbClient dbClient){  if (virtualPool.getHighAvailability() != null && virtualPool.getHighAvailability().equals(VirtualPool.HighAvailabilityType.vplex_distributed.name())) {    boolean supportsMirror=false;    if (virtualPool.getMaxNativeContinuousCopies() == null) {      supportsMirror=false;    } else {      supportsMirror=virtualPool.getMaxNativeContinuousCopies() != VirtualPool.MAX_DISABLED && virtualPool.getMirrorVirtualPool() != null;    }    if (supportsMirror) {      return supportsMirror;    } else {      VirtualPool haVpool=getHAVPool(virtualPool,dbClient);      if (haVpool == null) {        supportsMirror=false;      } else {        supportsMirror=haVpool.getMaxNativeContinuousCopies() != VirtualPool.MAX_DISABLED && haVpool.getMirrorVirtualPool() != null;      }    }    return supportsMirror;  }  if (virtualPool.getMaxNativeContinuousCopies() == null) {    return false;  }  return virtualPool.getMaxNativeContinuousCopies() != MAX_DISABLED;}  }
class C{  public Builder withPriority(String priority){  this.priority=priority;  return this;}  }
class C{  public boolean isVerifierEnabled(){  return verifierEnabled;}  }
class C{  @Override public void refresh(){  apf.refresh();}  }
class C{  public void addTarget(final LogTarget target){  if (null == m_targets) {    m_targets=new LogTarget[]{target};  } else {    final LogTarget oldTargets[]=m_targets;    m_targets=new LogTarget[oldTargets.length + 1];    System.arraycopy(oldTargets,0,m_targets,0,oldTargets.length);    m_targets[m_targets.length - 1]=target;  }}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  @AntDoc("A module to test") public void addConfiguredModule(Module module){  this.moduleSet.addConfiguredModule(module);}  }
class C{  public StrBuilder appendln(final long value){  return append(value).appendNewLine();}  }
class C{  public boolean isDefaultMode(){  return isDefaultMode(esmClass);}  }
class C{  private void shutdown(){  if (nbestListWriter != null) {    logger.info("Closing n-best writer");    nbestListWriter.close();  }  if (alignmentWriter != null) {    logger.info("Closing alignment writer");    alignmentWriter.close();  }}  }
class C{  @Override public void addWithPackedColor(final ITextureRegion pTextureRegion,final float pX1,final float pY1,final float pX2,final float pY2,final float pX3,final float pY3,final float pX4,final float pY4,final float pColorABGRPackedInt){  final FloatBuffer bufferData=this.getFloatBuffer();  final int bufferDataOffset=this.mBufferDataOffset;  final float x1=pX1;  final float y1=pY1;  final float x2=pX2;  final float y2=pY2;  final float x3=pX3;  final float y3=pY3;  final float x4=pX4;  final float y4=pY4;  final float u=pTextureRegion.getU();  final float v=pTextureRegion.getV();  final float u2=pTextureRegion.getU2();  final float v2=pTextureRegion.getV2();  if (pTextureRegion.isRotated()) {    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x1);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y1);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u2);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x2);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y2);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u2);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x3);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y3);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v2);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x3);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y3);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v2);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x2);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y2);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u2);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x4);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y4);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u2);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v2);  } else {    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x1);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y1);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v2);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x2);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y2);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x3);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y3);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u2);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v2);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x3);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y3);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u2);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v2);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x2);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y2);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x4);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y4);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u2);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v);  }  this.mBufferDataOffset+=SpriteBatch.SPRITE_SIZE;}  }
class C{  @Override protected IgniteInternalFuture currentFuture() throws IgniteCheckedException {  return ((IgniteFutureImpl)cache.future()).internalFuture();}  }
class C{  public Builder withTerm(long term){  request.term=Assert.arg(term,term > 0,"term must be positive");  return this;}  }
class C{  public boolean isGuardAnti(){  return (flags & GUARD_ANTI) != 0;}  }
class C{  public Path makeAbsolute(){  if (isAbsolute()) {    return this;  }  Path result=new Path(device,segments,separators | HAS_LEADING);  if (result.segmentCount() > 0) {    String first=result.segment(0);    assert first != null;    if (first.equals("..") || first.equals(".")) {      result.canonicalize();    }  }  return result;}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public void reset(){  hashMap=new ReversePurgeItemHashMap<T>(1 << LG_MIN_MAP_SIZE);  this.curMapCap=hashMap.getCapacity();  this.offset=0;  this.streamLength=0;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=new OpenCameraManager().build().open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  public QueryResponseWriter registerResponseWriter(String name,QueryResponseWriter responseWriter){  return responseWriters.put(name,responseWriter);}  }
class C{  private void putBytesNegativeToIntegers(byte[] byteValues){  int bytesLen=byteValues.length;  int highBytes=bytesLen & 3;  numberLength=(bytesLen >> 2) + ((highBytes == 0) ? 0 : 1);  digits=new int[numberLength];  int i=0;  digits[numberLength - 1]=-1;  while (bytesLen > highBytes) {    digits[i]=(byteValues[--bytesLen] & 0xFF) | (byteValues[--bytesLen] & 0xFF) << 8 | (byteValues[--bytesLen] & 0xFF) << 16 | (byteValues[--bytesLen] & 0xFF) << 24;    if (digits[i] != 0) {      digits[i]=-digits[i];      firstNonzeroDigit=i;      i++;      while (bytesLen > highBytes) {        digits[i]=(byteValues[--bytesLen] & 0xFF) | (byteValues[--bytesLen] & 0xFF) << 8 | (byteValues[--bytesLen] & 0xFF) << 16 | (byteValues[--bytesLen] & 0xFF) << 24;        digits[i]=~digits[i];        i++;      }      break;    }    i++;  }  if (highBytes != 0) {    if (firstNonzeroDigit != -2) {      for (int j=0; j < bytesLen; j++) {        digits[i]=(digits[i] << 8) | (byteValues[j] & 0xFF);      }      digits[i]=~digits[i];    } else {      for (int j=0; j < bytesLen; j++) {        digits[i]=(digits[i] << 8) | (byteValues[j] & 0xFF);      }      digits[i]=-digits[i];    }  }}  }
class C{  public boolean match(PrincipalName pname){  boolean matched=true;  if ((this.nameRealm != null) && (pname.nameRealm != null)) {    if (!(this.nameRealm.toString().equalsIgnoreCase(pname.nameRealm.toString()))) {      matched=false;    }  }  if (this.nameStrings.length != pname.nameStrings.length) {    matched=false;  } else {    for (int i=0; i < this.nameStrings.length; i++) {      if (!(this.nameStrings[i].equalsIgnoreCase(pname.nameStrings[i]))) {        matched=false;      }    }  }  return matched;}  }
class C{  public static String readString(ByteBuffer buffer,int strLen){  StringBuilder sb=new StringBuilder(strLen);  for (int i=0; i < strLen; i++) {    sb.append(buffer.getChar());  }  return sb.toString();}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  public KeyedPortal(final String key,final int quantity){  this(key,quantity,null);}  }
class C{  @SuppressWarnings("unchecked") public SophisticatedLexicon(short[] numSubStates,int smoothingCutoff,double[] smoothParam,Smoother smoother,double threshold){  this.numSubStates=numSubStates;  this.smoothingCutoff=smoothingCutoff;  this.smooth=smoothParam;  this.smoother=smoother;  wordToTagCounters=new HashMap[numSubStates.length];  unseenWordToTagCounters=new HashMap[numSubStates.length];  tagCounter=new double[numSubStates.length][];  unseenTagCounter=new double[numSubStates.length][];  typeTagCounter=new double[numSubStates.length][];  simpleTagCounter=new double[numSubStates.length];  for (int i=0; i < numSubStates.length; i++) {    tagCounter[i]=new double[numSubStates[i]];    unseenTagCounter[i]=new double[numSubStates[i]];    typeTagCounter[i]=new double[numSubStates[i]];  }  this.threshold=threshold;  this.wordNumberer=Numberer.getGlobalNumberer("words");  if (!(Corpus.myTreebank == Corpus.TreeBankType.WSJ || Corpus.myTreebank == Corpus.TreeBankType.BROWN || Corpus.myTreebank == Corpus.TreeBankType.SINGLEFILE))   unknownLevel=4;}  }
class C{  protected void doNewState(int oldState,int newState){  SerialNode mNode=SerialAddress.getNodeFromSystemName(getSystemName());  if (mNode != null) {    if (newState == ON) {      sendMessage(true);    } else     if (newState == OFF) {      sendMessage(false);    } else {      log.warn("illegal state requested for Light: " + getSystemName());    }  }}  }
class C{  public void performStagger(){  final double GAP=0.1;  final ZoomCommand command=new ZoomCommand("Stagger Axes",null,yAxisList);  final int N=yAxisList.size();  for (int i=0; i < N; ++i) {    final Axis yaxis=yAxisList.get(i);    if (yaxis.isAutoScale())     continue;    final Range axis_range=yaxis.getTraceDataRange();    if (axis_range == null)     continue;    double low=axis_range.getLower();    double high=axis_range.getUpper();    if (low == high) {      final double half=Math.abs(low / 2);      low-=half;      high+=half;    }    if (yaxis.isLogScaleEnabled()) {      low=Log10.log10(low);      high=Log10.log10(high);    }    double span=high - low;    low-=GAP * span;    high+=GAP * span;    span=high - low;    low-=(N - i - 1) * span;    high+=i * span;    if (yaxis.isLogScaleEnabled()) {      low=Log10.pow10(low);      high=Log10.pow10(high);    }    if (low < high && !Double.isInfinite(low) && !Double.isInfinite(high))     yaxis.setRange(low,high);  }  command.saveState();  operationsManager.addCommand(command);}  }
class C{  void replaceMask(Image img){  if (parent == null) {    return;  }  BufferedImage bi=null;  if (img != null && iconWidth != 0 && iconHeight != 0) {    bi=new BufferedImage(iconWidth,iconHeight,BufferedImage.TYPE_INT_ARGB);    Graphics g=bi.getGraphics();    try {      g.drawImage(img,0,0,iconWidth,iconHeight,null);    }  finally {      g.dispose();    }  }  XToolkit.awtLock();  try {    if (iconMask != 0) {      XlibWrapper.XFreePixmap(XToolkit.getDisplay(),iconMask);      iconMask=0;      log.finest("Freed previous mask");    }    if (bi == null || iconWidth == 0 || iconHeight == 0) {      return;    }    AwtGraphicsConfigData adata=parent.getGraphicsConfigurationData();    awtImageData awtImage=adata.get_awtImage(0);    XVisualInfo visInfo=adata.get_awt_visInfo();    ColorModel cm=bi.getColorModel();    DataBuffer srcBuf=bi.getRaster().getDataBuffer();    int sidx=0;    int bpl=(iconWidth + 7) >> 3;    byte[] destBuf=new byte[bpl * iconHeight];    int didx=0;    for (int i=0; i < iconHeight; i++) {      int dbit=0;      int cv=0;      for (int j=0; j < iconWidth; j++) {        if (cm.getAlpha(srcBuf.getElem(sidx)) != 0) {          cv=cv + (1 << dbit);        }        dbit++;        if (dbit == 8) {          destBuf[didx]=(byte)cv;          cv=0;          dbit=0;          didx++;        }        sidx++;      }    }    iconMask=XlibWrapper.XCreateBitmapFromData(XToolkit.getDisplay(),XlibWrapper.RootWindow(XToolkit.getDisplay(),visInfo.get_screen()),Native.toData(destBuf),iconWidth,iconHeight);  }  finally {    XToolkit.awtUnlock();  }}  }
class C{  protected K sanitizeKey(K key){  return key;}  }
class C{  public static boolean showDocument(URL url){  if (showDocumentViaDesktop(url)) {    return true;  }  if (showDocumentViaExec(url)) {    return true;  }  if (JavaWebStart.showViaWebStart(url)) {    return true;  }  return false;}  }
class C{  public boolean isModified(){  boolean isModified=_classLoader.isModified();  if (isModified)   _classLoader.logModified(log);  return isModified;}  }
class C{  public SaaSSystemException(){}  }
class C{  public static void assumeFalse(BooleanSupplier assumptionSupplier,String message) throws TestAbortedException {  assumeFalse(assumptionSupplier,null);}  }
class C{  protected DoubleMatrix2D like2D(int rows,int columns,int rowZero,int columnZero,int rowStride,int columnStride){  return new SparseDoubleMatrix2D(rows,columns,this.elements,rowZero,columnZero,rowStride,columnStride);}  }
class C{  public CSelectSubtreeNodesAction(final ZyGraph graph,final ITreeNode<CTag> tag){  super("Select Subtree Nodes");  m_graph=Preconditions.checkNotNull(graph,"IE02315: Graph argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE02316: Tag can't be null");}  }
class C{  private WildFlyUserUtils(){}  }
class C{  @SuppressWarnings("unchecked") protected List<N> computeOrder(DirectedGraph<N> g){  stmtToColor=new IdentityHashMap<Object,Object>((3 * g.size()) / 2);  indexStack=new int[g.size()];  stmtStack=(N[])new Object[g.size()];  order=new LinkedList<N>();  graph=g;{    Iterator<N> stmtIt=g.iterator();    while (stmtIt.hasNext()) {      N s=stmtIt.next();      if (stmtToColor.get(s) == null)       visitNode(s);    }  }  indexStack=null;  stmtStack=null;  stmtToColor=null;  return order;}  }
class C{  private static void appendInt(StringBuilder sb,int num,int numDigits){  if (num < 0) {    sb.append('-');    num=-num;  }  char[] digits=new char[numDigits];  for (int digit=numDigits - 1; digit >= 0; --digit) {    digits[digit]=(char)('0' + num % 10);    num/=10;  }  sb.append(digits);}  }
class C{  public DockerRuleBuilder waitForPort(String portToWaitOn){  return waitForPort(portToWaitOn,10000);}  }
class C{  public boolean rollbackMirrorFileShareStep(URI systemURI,List<URI> sourceURIs,List<URI> targetURIs,String opId){  log.info("START rollback Mirror links");  TaskCompleter completer=null;  try {    WorkflowStepCompleter.stepExecuting(opId);    StorageSystem system=getStorageSystem(systemURI);    completer=new FileMirrorRollbackCompleter(sourceURIs,opId);    getRemoteMirrorDevice(system).doRollbackMirrorLink(system,sourceURIs,targetURIs,completer,opId);  } catch (  Exception e) {    log.error("Ignoring exception while rolling back Mirror sources: {}",sourceURIs,e);    if (null != completer) {      completer.ready(dbClient);    }    WorkflowStepCompleter.stepSucceded(opId);    return false;  }  return true;}  }
class C{  public static byte[] sintTo2Bytes(int value){  return new byte[]{uintToByte(value & 0xff),uintToByte(value >> 8)};}  }
class C{  public static void clearDirectory(String directory){  try {    FileSystem fs=FileSystem.get(conf);    FileStatus[] directoryContent=fs.listStatus(new Path(directory));    for (    FileStatus content : directoryContent) {      fs.delete(content.getPath(),true);    }  } catch (  IOException e) {  }}  }
class C{  public synchronized void put(THLEvent thlEvent) throws InterruptedException {  if (cacheSize > 0) {    while (cache.size() >= cacheSize) {      THLEvent old=fifo.remove();      cache.remove(old.getSeqno());    }    if (thlEvent.getFragno() == 0 && thlEvent.getLastFrag()) {      fifo.put(thlEvent);      cache.put(thlEvent.getSeqno(),thlEvent);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private LocalDateTime parseDate(String dateStr,boolean tryAgain){  LocalDateTime date=LocalDateTime.now(ZoneId.of("GMT"));  if (mDateTimeFormatter == null) {    initFormatter(dateStr);  }  if (mDateTimeFormatter != null) {    try {      date=LocalDateTime.parse(dateStr,mDateTimeFormatter);    } catch (    DateTimeParseException e) {      Timber.d(String.format("ParseException parsing date: %s",dateStr));      if (tryAgain) {        Timber.d("ParseException encountered, re-initializing the date parser");        mDateTimeFormatter=null;        parseDate(dateStr,false);      }    }  }  return date;}  }
class C{  public static void endSection(){  if (ExoPlayerLibraryInfo.TRACE_ENABLED && Util.SDK_INT >= 18) {    endSectionV18();  }}  }
class C{  @Override public String toObject(IndexableField f){  return toExternal(f);}  }
class C{  static boolean isObviouslyDistinct(final boolean quads,final List<StatementPatternNode> templates,final GraphPatternGroup<?> whereClause){  if (templates.isEmpty()) {    return true;  }  if (templates.size() != 1 || whereClause.size() != 1) {    return false;  }  if (!(whereClause.get(0) instanceof StatementPatternNode)) {    return false;  }  final StatementPatternNode sp1=templates.get(0);  final StatementPatternNode sp2=(StatementPatternNode)whereClause.get(0);  final Set<IVariable<?>> vars1=StaticAnalysis.getSPOVariables(sp1);  final Set<IVariable<?>> vars2=StaticAnalysis.getSPOVariables(sp2);  if (!vars1.equals(vars2)) {    return false;  }  if (quads && sp2.c() == null && sp2.getScope() == Scope.NAMED_CONTEXTS) {    return false;  }  return true;}  }
class C{  @Override public final void resetAnalysisGroup(String source,int analysisGroup) throws AdeException {  final ConnectionWrapper cw=new ConnectionWrapper(AdeInternal.getDefaultConnection());  try {    cw.startTransaction();    TableGeneralUtils.executeDml("update " + SQL.SOURCES + " set ANALYSIS_GROUP="+ analysisGroup+ " where SOURCE_ID='"+ source+ "'");    final String groupName=GroupRead.getAnalysisGroupName(analysisGroup);    m_src2AnalysisGrpMap.put(source,groupName);    cw.endTransaction();    cw.close();    return;  } catch (  SQLException e) {    cw.failed(e);  } finally {    cw.quietCleanup();  }}  }
class C{  public void paint(final Graphics g){  g.drawImage(image,0,0,this);synchronized (this) {    if (!paintCalled) {      paintCalled=true;      notifyAll();    }  }}  }
class C{  public static void release(){  cThreadLocal.set(null);}  }
class C{  public void push(double value) throws IOException {  pushValues.add(new Double(value));  if (flashVersion < 5) {    flushPushValues();  }}  }
class C{  public boolean checkBigDecimalValue(final BigDecimal obj1,final BigDecimal obj2){  if (obj1 == null)   return true;  if (obj2 == null)   return true;  if (obj1.compareTo(obj2) == -1)   return false;  if (obj1.compareTo(obj2) == 0)   return false;  return true;}  }
class C{  @Override public boolean addOperation(final IResource resource,final GetOperation operation){  Check.notNull(resource,"resource");  Check.notNull(operation,"operation");  final GetOperation oldGetOperation=getOperation(resource);  if (oldGetOperation == null) {    return super.addOperation(resource,operation);  }  if (oldGetOperation.equals(operation)) {    return false;  }  if (operation.getCurrentLocalItem() != null && oldGetOperation.getCurrentLocalItem() != null && operation.getCurrentLocalItem().equals(oldGetOperation.getCurrentLocalItem())) {    if (oldGetOperation.getTargetLocalItem() != null) {      return false;    }    return super.addOperation(resource,operation);  }  return super.addOperation(resource,operation);}  }
class C{  public Query resultType(final String resultType){  setResultType(resultType);  return this;}  }
class C{  public void softAdd(Matcher child){  super.addChild(child);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.473 -0400",hash_original_method="ED214FC677587573A3092F09EFB22E36",hash_generated_method="0D0CAC1B1294F15D0FA32D5EBAF4A2F1") private static boolean contains(String value,int start,int length,String criteria1,String criteria2){  return contains(value,start,length,new String[]{criteria1,criteria2});}  }
class C{  public Exchange before(Exchange exchange) throws Exception {  return exchange;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN}) public CatalogCategoryRestRep updateCatalogCategory(@PathParam("id") URI id,CatalogCategoryUpdateParam catalogCategoryUpdate){  CatalogCategory catalogCategory=getCatalogCategoryById(id,true);  StorageOSUser user=getUserFromContext();  verifyAuthorizedInTenantOrg(uri(catalogCategory.getTenant()),user);  URI parentCategoryId=getTargetParentCategoryId(catalogCategory,catalogCategoryUpdate);  validateCatalogCategoryParam(parentCategoryId,catalogCategoryUpdate,catalogCategory);  CatalogCategory parentCatalogCategory=parentCategoryId != null ? queryResource(parentCategoryId) : null;  updateCatalogCategoryObject(parentCatalogCategory,catalogCategory,catalogCategoryUpdate);  catalogCategoryManager.updateCatalogCategory(catalogCategory);  auditOpSuccess(OperationTypeEnum.UPDATE_CATALOG_CATEGORY,catalogCategory.auditParameters());  catalogCategory=catalogCategoryManager.getCatalogCategoryById(catalogCategory.getId());  return map(catalogCategory);}  }
class C{  private void rProbeAndAddHopsToCandidateSet(Hop hop,HashSet<Hop> probeSet,HashSet<Pair<Hop,Hop>> candSet){  if (hop.getVisited() == VisitStatus.DONE)   return;  if (hop.getInput() != null)   for (  Hop c : hop.getInput()) {    if (!probeSet.contains(c))     rProbeAndAddHopsToCandidateSet(c,probeSet,candSet); else {      candSet.add(new Pair<Hop,Hop>(hop,c));    }  }  hop.setVisited(VisitStatus.DONE);}  }
class C{  private Status(){}  }
class C{  public AuthorityKeyIdentifier(GeneralNames name,BigInteger serialNumber){  this.keyidentifier=null;  this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());  this.certserno=new ASN1Integer(serialNumber);}  }
class C{  public boolean isShowDetail(){  return (Boolean)getStateHelper().eval(PropertyKeys.showDetail,false);}  }
class C{  public static void runImplicitUnManagedObjectsMatcher(DbClient dbClient){  List<URI> vpoolURIs=dbClient.queryByType(VirtualPool.class,true);  List<VirtualPool> vpoolList=dbClient.queryObject(VirtualPool.class,vpoolURIs);  Set<URI> srdfEnabledTargetVPools=SRDFUtils.fetchSRDFTargetVirtualPools(dbClient);  Set<URI> rpEnabledTargetVPools=RPHelper.fetchRPTargetVirtualPools(dbClient);  for (  VirtualPool vpool : vpoolList) {    matchVirtualPoolsWithUnManagedVolumes(vpool,srdfEnabledTargetVPools,rpEnabledTargetVPools,dbClient,false);  }}  }
class C{  public static void addPatientNode(Element formNode,Element modelNode,Element bodyNode,String name,String type,String label,String hint,boolean required,boolean readonly,String controlType,String[] items,String[] itemValues,boolean visible,String nodeset){  Element element=formNode.createElement(null,null);  element.setName(name);  formNode.addChild(Element.ELEMENT,element);  element=modelNode.createElement(NAMESPACE_XFORMS,null);  element.setName(NODE_BIND);  element.setAttribute(null,ATTRIBUTE_ID,name);  element.setAttribute(null,ATTRIBUTE_NODESET,nodeset);  element.setAttribute(null,ATTRIBUTE_TYPE,type);  if (readonly)   element.setAttribute(null,ATTRIBUTE_READONLY,XPATH_VALUE_TRUE);  if (required)   element.setAttribute(null,ATTRIBUTE_REQUIRED,XPATH_VALUE_TRUE);  if (!visible)   element.setAttribute(null,ATTRIBUTE_VISIBLE,XPATH_VALUE_FALSE);  modelNode.addChild(Element.ELEMENT,element);  element=bodyNode.createElement(NAMESPACE_XFORMS,null);  element.setName(controlType);  element.setAttribute(null,ATTRIBUTE_BIND,name);  bodyNode.addChild(Element.ELEMENT,element);  Element child=element.createElement(NAMESPACE_XFORMS,null);  child.setName(NODE_LABEL);  child.addChild(Element.TEXT,label);  element.addChild(Element.ELEMENT,child);  child=element.createElement(NAMESPACE_XFORMS,null);  child.setName(NODE_HINT);  child.addChild(Element.TEXT,hint);  element.addChild(Element.ELEMENT,child);  if (items != null) {    for (int i=0; i < items.length; i++) {      child=element.createElement(NAMESPACE_XFORMS,null);      child.setName(NODE_ITEM);      element.addChild(Element.ELEMENT,child);      Element elem=element.createElement(NAMESPACE_XFORMS,null);      elem.setName(NODE_LABEL);      elem.addChild(Element.TEXT,items[i]);      child.addChild(Element.ELEMENT,elem);      elem=element.createElement(NAMESPACE_XFORMS,null);      elem.setName(NODE_VALUE);      elem.addChild(Element.TEXT,itemValues[i]);      child.addChild(Element.ELEMENT,elem);    }  }}  }
class C{  private static void populateProviders(Element controlNode,Element formNode,Element modelNode,Element groupNode){  try {    if (XformsUtil.isOnePointNineAndAbove()) {      XformBuilderUtil.populateProviders(controlNode);      return;    }    List<User> providers=Context.getUserService().getUsersByRole(new Role("Provider"));    for (    User provider : providers) {      Integer personId=XformsUtil.getPersonId(provider);      Element itemNode=controlNode.createElement(NAMESPACE_XFORMS,null);      itemNode.setName(NODE_ITEM);      Element node=itemNode.createElement(NAMESPACE_XFORMS,null);      node.setName(NODE_LABEL);      node.addChild(Element.TEXT,getProviderName(provider,personId));      itemNode.addChild(Element.ELEMENT,node);      node=itemNode.createElement(NAMESPACE_XFORMS,null);      node.setName(NODE_VALUE);      node.addChild(Element.TEXT,personId.toString());      itemNode.addChild(Element.ELEMENT,node);      controlNode.addChild(Element.ELEMENT,itemNode);    }  } catch (  Exception ex) {    log.error("Failed to populate providers into the xform",ex);  }}  }
class C{  public void clear(String className){  branchMap.remove(className);  branchlessMethods.remove(className);}  }
class C{  public Frustum(){}  }
class C{  public MetricQueryTimestamp(MetricQuery metricQuery,Long originalStartTimestamp,Long orignalEndTimestamp,Long modifiedStartTimestamp,Long modifiedEndTimestamp){  this.metricQuery=metricQuery;  this.originalStartTimestamp=originalStartTimestamp;  this.orignalEndTimestamp=orignalEndTimestamp;  this.modifiedStartTimestamp=modifiedStartTimestamp;  this.modifiedEndTimestamp=modifiedEndTimestamp;}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final DTEDFrameSubframeInfo newInfo=(DTEDFrameSubframeInfo)obj;  boolean result=true;  return viewType != newInfo.viewType && bandHeight != newInfo.bandHeight && dtedLevel != newInfo.dtedLevel && slopeAdjust != newInfo.slopeAdjust && xPixInterval != newInfo.xPixInterval && yPixInterval != newInfo.yPixInterval && newInfo.subx == subx && newInfo.suby == suby;}  }
class C{  @Override public int hashCode(){  return value;}  }
class C{  public long create(Challenge challenge){  return mDaoSession.getChallengeDao().insert(challenge);}  }
class C{  public static void addRow(final Transaction tx,final String row,final Column col,final String val){  checkNotNull(tx);  tx.set(row,col,val);}  }
class C{  public void buildClassifier(Instances insts){  double[] means=computeMeans(insts);  double[] slopes=new double[insts.numAttributes()];  double[] sumWeightedDiffsSquared=new double[insts.numAttributes()];  int classIndex=insts.classIndex();  for (int j=0; j < insts.numInstances(); j++) {    Instance inst=insts.instance(j);    double yDiff=inst.value(classIndex) - means[classIndex];    double weightedYDiff=inst.weight() * yDiff;    for (int i=0; i < insts.numAttributes(); i++) {      double diff=inst.value(i) - means[i];      double weightedDiff=inst.weight() * diff;      slopes[i]+=weightedYDiff * diff;      sumWeightedDiffsSquared[i]+=weightedDiff * diff;    }  }  double minSSE=Double.MAX_VALUE;  m_attributeIndex=-1;  for (int i=0; i < insts.numAttributes(); i++) {    if ((i == classIndex) || (sumWeightedDiffsSquared[i] == 0)) {      continue;    }    double numerator=slopes[i];    slopes[i]/=sumWeightedDiffsSquared[i];    double intercept=means[classIndex] - slopes[i] * means[i];    double sse=sumWeightedDiffsSquared[classIndex] - slopes[i] * numerator;    if (sse < minSSE) {      minSSE=sse;      m_attributeIndex=i;      m_slope=slopes[i];      m_intercept=intercept;    }  }}  }
class C{  public static PropertyValuesHolder ofInt(Property<?,Integer> property,int... values){  return new IntPropertyValuesHolder(property,values);}  }
class C{  static public TRModel2D estimateModel(List<PointMatch> candidates,Collection<PointMatch> inliers,int iterations,float epsilon,float min_inlier_ratio){  inliers.clear();  if (candidates.size() < MIN_SET_SIZE) {    System.err.println(candidates.size() + " correspondence candidates are not enough to estimate a model, at least " + TRModel2D.MIN_SET_SIZE+ " required.");    return null;  }  TRModel2D model=new TRModel2D();  int i=0;  while (i < iterations) {    PointMatch[] min_matches=new PointMatch[MIN_SET_SIZE];    int[] keys=new int[MIN_SET_SIZE];    for (int j=0; j < MIN_SET_SIZE; ++j) {      int key;      boolean in_set=false;      do {        key=(int)(rnd.nextDouble() * candidates.size());        in_set=false;        for (int k=0; k < j; ++k) {          if (key == keys[k]) {            in_set=true;            break;          }        }      } while (in_set);      keys[j]=key;      min_matches[j]=candidates.get(key);    }    TRModel2D m=new TRModel2D();    final ArrayList<PointMatch> temp_inliers=new ArrayList<PointMatch>();    m.fit(min_matches);    int num_inliers=0;    boolean is_good=m.test(candidates,temp_inliers,epsilon,min_inlier_ratio);    while (is_good && num_inliers < temp_inliers.size()) {      num_inliers=temp_inliers.size();      m.minimize(temp_inliers);      is_good=m.test(candidates,temp_inliers,epsilon,min_inlier_ratio);    }    if (is_good && m.betterThan(model) && temp_inliers.size() >= 3 * MIN_SET_SIZE) {      model=m.clone();      inliers.clear();      inliers.addAll(temp_inliers);    }    ++i;  }  if (inliers.size() == 0)   return null;  return model;}  }
class C{  public float valueFloat(int index) throws Exception {  if (m_type == ArrayType.STRING) {    throw new Exception("[Array] Array does not contain numbers!");  }  return Float.parseFloat(value(index));}  }
class C{  public static void dumpLastAndStop(int n){  ConcurrentLinkedQueue<Item> q=que.getAndSet(null);  if (q == null)   return;  int size=q.size();  while (size-- > n)   q.poll();  dump(q);}  }
class C{  public void testXYScatterChartDemo() throws IOException {  String imageFilename=getOutputDirectory() + "xyscatterchart.png";  Demo demo=new Demo();  demo.createXYScatterChart(imageFilename);  File imagefile=new File(imageFilename);  assertTrue(imagefile.exists());  BufferedImage image=ImageIO.read(imagefile);  assertEquals(800,image.getWidth(null));  assertEquals(600,image.getHeight(null));}  }
class C{  private CarbonDictionarySortModel[] prepareDictionarySortModels(List<String> distinctValues,Dictionary dictionary,DataType dataType){  CarbonDictionarySortModel[] dictionarySortModels=null;  int surrogate=1;  if (null != dictionary) {    DictionaryChunksWrapper dictionaryChunksWrapper=dictionary.getDictionaryChunks();    dictionarySortModels=new CarbonDictionarySortModel[dictionaryChunksWrapper.getSize() + distinctValues.size()];    while (dictionaryChunksWrapper.hasNext()) {      dictionarySortModels[surrogate - 1]=createDictionarySortModel(surrogate,dataType,dictionaryChunksWrapper.next());      surrogate++;    }  } else {    dictionarySortModels=new CarbonDictionarySortModel[distinctValues.size()];  }  Iterator<String> distinctValue=distinctValues.iterator();  while (distinctValue.hasNext()) {    dictionarySortModels[surrogate - 1]=createDictionarySortModel(surrogate,dataType,distinctValue.next().getBytes());    surrogate++;  }  return dictionarySortModels;}  }
class C{  @POST @Path("/{id}/deactivate") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep deleteComputeSystem(@PathParam("id") URI id) throws DatabaseException {  ComputeSystem cs=queryObject(ComputeSystem.class,id,true);  ArgValidator.checkEntity(cs,id,isIdEmbeddedInURL(id));  if (!RegistrationStatus.UNREGISTERED.toString().equals(cs.getRegistrationStatus())) {    throw APIException.badRequests.invalidParameterCannotDeactivateRegisteredComputeSystem(cs.getId());  }  List<String> provHosts=getProvisionedBlades(cs);  if (!provHosts.isEmpty()) {    throw APIException.badRequests.unableToDeactivateProvisionedComputeSystem(cs.getLabel(),org.springframework.util.StringUtils.collectionToCommaDelimitedString(provHosts));  }  ComputeController controller=getController(ComputeController.class,cs.getSystemType());  controller.clearDeviceSession(cs.getId());  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(ComputeSystem.class,cs.getId(),taskId,ResourceOperationTypeEnum.DELETE_COMPUTE_SYSTEM);  PurgeRunnable.executePurging(_dbClient,_dbPurger,_asynchJobService.getExecutorService(),cs,0,taskId,60);  recordAndAudit(cs,OperationTypeEnum.DELETE_COMPUTE_SYSTEM,true,AuditLogManager.AUDITOP_BEGIN);  return toTask(cs,taskId,op);}  }
class C{  public ReflectiveOperationException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected void init(DistributedRegion r){  QueuedRegionData qrd=new QueuedRegionData();synchronized (this.regionMap) {    Object old=this.regionMap.put(r,qrd);    if (old != null) {      throw new IllegalStateException(LocalizedStrings.ReliableMessageQueueFactoryImpl_UNEXPECTED_QUEUEDREGIONDATA_0_FOR_REGION_1.toLocalizedString(new Object[]{old,r}));    }  }}  }
class C{  public StoryObject(boolean deleted){  this.deleted=deleted;}  }
class C{  private static void log(final RqFallback req) throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  final Throwable error=req.throwable();  final PrintStream stream=new Utf8PrintStream(baos,false);  try {    error.printStackTrace(stream);  }  finally {    stream.close();  }  Logger.getLogger(FbLog4j.class).error(String.format("%s %s failed with %s: %s",new RqMethod.Base(req).method(),new RqHref.Base(req).href(),req.code(),baos.toString("UTF-8")));}  }
class C{  public static void registerInfuseObject(ItemStack itemStack,InfuseObject infuseObject){  if (getObject(itemStack) != null) {    return;  }  infuseObjects.put(itemStack,infuseObject);}  }
class C{  public static void assertMacApp(File file){  if (OS.getNative().isMac()) {    Preconditions.checkArgument(file.getName().endsWith(".app"),"Mac installations must end in .app");  }}  }
class C{  private View inflatePlaceholderView(@Nullable ViewGroup parent){  LayoutInflater layoutInflater=LayoutInflater.from(context);  return layoutInflater.inflate(style == Style.GRID ? R.layout.grid_placeholder : R.layout.list_placeholder,parent,false);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public PublicKey engineLookupAndResolvePublicKey(Element element,String BaseURI,StorageResolver storage) throws KeyResolverException {  X509Certificate cert=this.engineLookupResolveX509Certificate(element,BaseURI,storage);  if (cert != null) {    return cert.getPublicKey();  }  return null;}  }
class C{  public static String rightPad(String s,int length){  StringBuffer sb=new StringBuffer(s);  for (int i=length - s.length(); i > 0; i--)   sb.append(" ");  return sb.toString();}  }
class C{  private static void throwBounds(){  throw new IndexOutOfBoundsException("attempt to write past the end");}  }
class C{  public void addToTemplateContext(String name,Object value){  if (templateContext == null) {    templateContext=FastMap.newInstance();  }  templateContext.put(name,value);}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public void editar(Setor setor){  try {    String sql="UPDATE  tb_setor SET nome=?, descricao=?, fk_orgao =? WHERE id_setor=? ";    stm=conector.prepareStatement(sql);    stm.setString(1,setor.getNome());    stm.setString(2,setor.getDescricao());    stm.setInt(3,setor.getOrganizacao().getId());    stm.setInt(4,setor.getId());    stm.executeUpdate();    stm.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao atualizar setor na base de dados! \n" + ex);  }}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  public static Credentials lookupSystemCredentials(String credentialsId){  return firstOrNull(lookupCredentials(Credentials.class,Jenkins.getActiveInstance(),ACL.SYSTEM,Collections.<DomainRequirement>emptyList()),withId(credentialsId));}  }
class C{  public void process(String argv[]){  boolean verbose=false;  int timeout=10;  String method=null;  String host=null;  String log4j=null;  int argc=0;  while (argc < argv.length) {    String nextArg=argv[argc];    argc++;    if ("-timeout".equals(nextArg)) {      timeout=getIntArg(argv,argc++);    } else     if ("-method".equals(nextArg)) {      method=getStringArg(argv,argc++);    } else     if ("-verbose".equals(nextArg)) {      verbose=true;    } else     if ("-log4j".equals(nextArg)) {      log4j=getStringArg(argv,argc++);    } else     if ("-help".equals(nextArg)) {      usage();      return;    } else {      if (host == null)       host=nextArg; else {        String msg="Unrecognized option: " + nextArg;        exitWithFailure(msg);      }    }  }  if (log4j == null) {    Logger rootLogger=Logger.getRootLogger();    if (!rootLogger.getAllAppenders().hasMoreElements()) {      rootLogger.setLevel(Level.WARN);      rootLogger.addAppender(new ConsoleAppender(new PatternLayout("%-5p [%t]: %m%n")));    }  } else {    PropertyConfigurator.configure(log4j);  }  if (host == null) {    String msg="Missing host name";    exitWithFailure(msg);  }  try {    HostAddressService service=new HostAddressService(true);    service.setTimeout(timeout * 1000);    HostAddress address=HostAddressService.getByName(host);    List<String> methodNames;    if (method == null)     methodNames=service.getEnabledMethodNames(); else {      methodNames=new ArrayList<String>(1);      methodNames.add(method);    }    try {      for (      String methodName : methodNames) {        PingResponse response=service.isReachableByMethod(methodName,address);        if (response.isReachable()) {          println("(" + methodName + ") Host is reachable: "+ address.getHostAddress());          return;        } else {          println("(" + methodName + ") No response: "+ address.getHostAddress());        }      }    } catch (    HostException e) {      println("Ping error: " + e.getMessage());      if (verbose)       e.printStackTrace();    }  } catch (  HostException e) {    println("Ping configuration error: " + e.getMessage());    if (verbose)     e.printStackTrace();  }catch (  UnknownHostException e) {    println("Unknown host: " + host);    if (verbose)     e.printStackTrace();  }  exitWithNotFound();}  }
class C{  public static Tier newInstance(String value){  final Tier returnInstance=new Tier();  returnInstance.setDisplayName(value);  return returnInstance;}  }
class C{  public void add(Row r){  list.add(r);  memory+=r.getMemory() + Constants.MEMORY_POINTER;  if (maxMemory > 0 && memory > maxMemory) {    writeAllRows();  }  size++;}  }
class C{  public LogConnection connect(boolean readonly) throws ReplicatorException {  return diskLog.connect(readonly);}  }
class C{  public boolean isTickerEnabled(){  return tickerEnabled;}  }
class C{  public static void main(String[] args){  log.info("=========================================================================");  log.info("Calculating the average speeds for zones in " + province);  log.info("=========================================================================");  String shapefile=root + "ShapeFiles/" + province+ "/"+ province+ "GAP_UTM35S.shp";  MyGapReader mgr=new MyGapReader(province,shapefile);  String networkFile=root + "Commercial/Input/network" + province+ ".xml";  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network nl=scenario.getNetwork();  MatsimNetworkReader nr=new MatsimNetworkReader(scenario.getNetwork());  nr.readFile(networkFile);  log.info("Building a (Hash)Map of the mesozones associated with each link, this may take a while.");  int linkCounter=0;  int linkMultiplier=1;  int linksFound=0;  int linksNotFound=0;  Map<Id<Link>,SAZone> zoneTree=new HashMap<Id<Link>,SAZone>();  Map<Id<Link>,? extends Link> map=nl.getLinks();  for (  Id<Link> key : map.keySet()) {    Link link=map.get(key);    Coordinate fromPoint=new Coordinate(link.getFromNode().getCoord().getX(),link.getFromNode().getCoord().getY());    Coordinate toPoint=new Coordinate(link.getToNode().getCoord().getX(),link.getToNode().getCoord().getY());    LineSegment ls=new LineSegment(fromPoint,toPoint);    Coordinate c=ls.pointAlong(0.5);    Point midPoint=gf.createPoint(c);    Collection<SAZone> zoneList=mgr.getGapQuadTree().getDisk(midPoint.getX(),midPoint.getY(),distanceThreshold);    boolean foundZone=false;    for (    SAZone zone : zoneList) {      if (zone.contains(midPoint)) {        foundZone=true;        zoneTree.put(key,zone);      }    }    if (foundZone) {      linksFound++;    } else {      linksNotFound++;    }    linkCounter++;    if (linkCounter == linkMultiplier) {      log.info("   Links completed... " + linkCounter);      linkMultiplier*=2;    }  }  log.info("   Links completed... " + linkCounter + " (resolved: "+ linksFound+ "; unresolved: "+ linksNotFound+ ").");  Map<Integer,Double[]> statsMap=new HashMap<Integer,Double[]>();  for (  SAZone zone : mgr.getAllZones()) {    Double[] speedList=new Double[zone.getTimeBins()];    for (int i=0; i < zone.getTimeBins(); i++) {      speedList[i]=0.0;    }    statsMap.put(Integer.parseInt(zone.getName()),speedList);  }  if (simulated) {    for (    String run : runs) {      log.info("==============================  Start processing Run" + run + "  ==============================");      String folderName=root + "Commercial/Output/Run" + run;      File theFolder=new File(folderName);      File[] files=theFolder.listFiles();      File inputFolder=null;      for (      File file : files) {        if (file.getName().startsWith("it.100")) {          inputFolder=file;        }      }      if (inputFolder == null) {        log.warn("Could not find the events file for Run" + run + "!");      } else {        EventsManager events=EventsUtils.createEventsManager();        MyPrivateVehicleSpeedAnalyser handler=new MyPrivateVehicleSpeedAnalyser(zoneTree,nl,lowerId,upperId,numberOfHourBins);        events.addHandler(handler);        MatsimEventsReader mer=new MatsimEventsReader(events);        log.info("Reading events, this may take a while.");        mer.readFile(inputFolder.getAbsolutePath() + "/100.events.txt.gz");        handler.doAnalysis();        for (        SAZone zone : mgr.getAllZones()) {          zone.calculateAverageSpeed();          Integer statsKey=Integer.parseInt(zone.getName());          Double[] statsList=statsMap.get(statsKey);          for (int i=0; i < statsList.length; i++) {            statsList[i]+=zone.getSpeedDetail()[i];          }          zone.clearSAZone();        }      }    }  } else {    log.info("==============================  Processing private-only events file  ==============================");    String fileName=root + "Commercial/Input/PrivateOnlyEvents.txt.gz";    EventsManager events=EventsUtils.createEventsManager();    MyPrivateVehicleSpeedAnalyser handler=new MyPrivateVehicleSpeedAnalyser(zoneTree,nl,lowerId,upperId,numberOfHourBins);    events.addHandler(handler);    MatsimEventsReader mer=new MatsimEventsReader(events);    log.info("Reading events, this may take a while.");    mer.readFile(fileName);    handler.doAnalysis();    for (    SAZone zone : mgr.getAllZones()) {      zone.calculateAverageSpeed();      Integer statsKey=Integer.parseInt(zone.getName());      Double[] statsList=statsMap.get(statsKey);      for (int i=0; i < statsList.length; i++) {        statsList[i]+=zone.getSpeedDetail()[i];      }      zone.clearSAZone();    }  }  log.info("Writing the statistics to file.");  DateString ds=new DateString();  double divider;  String outputFile;  if (simulated) {    divider=runs.length;    outputFile=root + "Commercial/PostProcess/AveragePrivateVehicleSpeed-" + ds.toString()+ ".txt";  } else {    divider=1;    outputFile=root + "Commercial/PostProcess/OriginalPrivateVehicleSpeed-" + ds.toString()+ ".txt";  }  try {    BufferedWriter output=new BufferedWriter(new FileWriter(new File(outputFile)));    try {      output.write("Name");      output.write(delimiter);      for (int i=0; i < numberOfHourBins - 1; i++) {        output.write("H");        output.write(String.valueOf(i));        output.write(delimiter);      }      output.write("H");      output.write(String.valueOf(numberOfHourBins - 1));      output.newLine();      for (      SAZone zone : mgr.getAllZones()) {        Integer key=Integer.parseInt(zone.getName());        output.write(String.valueOf(key));        output.write(delimiter);        Double[] stats=statsMap.get(key);        for (int i=0; i < stats.length - 1; i++) {          output.write(String.valueOf(stats[i] / divider));          output.write(delimiter);        }        output.write(String.valueOf(stats[stats.length - 1] / divider));        output.newLine();      }    }  finally {      output.close();    }  } catch (  IOException e) {    e.printStackTrace();  }  log.info("Process completed!");}  }
class C{  public int numAlphaLevels(){  return impl.numAlphaLevels();}  }
class C{  private void openAnalyticsActivity(){  Intent intent=new Intent(activity,Analytics.class);  activity.startActivity(intent);}  }
class C{  public String encode(String pString){  return soundex(pString);}  }
class C{  @Override public synchronized void updatePoint(Map<String,String> key,Point d){  batch[index]=d.getValue();  index++;  count++;  if (index == batch.length) {    compact();  }}  }
class C{  public CacheObject load(String key,double lat,double lon,int level){  if (frameCache != null) {    DTEDFrame frame=frameCache.get(lat,lon,level);    if (frame != null) {      OMGrid omgrid=frame.getOMGrid();      omgrid.setGenerator(getGenerator());      return new DTEDCacheObject(key,omgrid);    }  }  return null;}  }
class C{  public WebSocketFactory(Handler h,WebView appView){  this.appView=appView;  this.handler=h;}  }
class C{  public CSVParser(char separator,char quotechar){  this(separator,quotechar,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  @SuppressWarnings("unchecked") public static <T extends View>T findViewById(View parentView,int id){  T view=null;  View genericView=parentView.findViewById(id);  try {    view=(T)(genericView);  } catch (  Exception ex) {    String message="Can't cast view (" + id + ") to a "+ view.getClass()+ ".  Is actually a "+ genericView.getClass()+ ".";    Log.e("PercolateAndroidUtils",message);    throw new ClassCastException(message);  }  return view;}  }
class C{  public URI(URI p_other){  initialize(p_other);}  }
class C{  public static boolean makeDirs(String filePath){  String folderName=getFolderName(filePath);  if (TextUtils.isEmpty(folderName)) {    return false;  }  File folder=new File(folderName);  return (folder.exists() && folder.isDirectory()) ? true : folder.mkdirs();}  }
class C{  public String save() throws Exception {  return SUCCESS;}  }
class C{  public static List<RawTypeMember> loadRawTypeMembers(final Connection connection,final INaviModule module) throws CouldntLoadDataException {  Preconditions.checkNotNull(connection,"Error: connection argument can not be null");  Preconditions.checkNotNull(module,"Error: module argument can not be null");  final List<RawTypeMember> rawMembers=new ArrayList<RawTypeMember>();  final String query=" SELECT * FROM load_type_members(?) ";  try {    final PreparedStatement statement=connection.prepareStatement(query);    statement.setInt(1,module.getConfiguration().getId());    final ResultSet results=statement.executeQuery();    try {      while (results.next()) {        final Integer parentId=results.getInt("parent_id");        if (results.wasNull()) {          continue;        }        Integer argument=results.getInt("argument");        if (results.wasNull()) {          argument=null;        }        Integer offset=results.getInt("offset");        if (results.wasNull()) {          offset=null;        }        Integer numberOfElements=results.getInt("number_of_elements");        if (results.wasNull()) {          numberOfElements=null;        }        rawMembers.add(new RawTypeMember(results.getInt("id"),results.getString("name"),results.getInt("base_type"),parentId,offset,argument,numberOfElements));      }    }  finally {      results.close();      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }  return rawMembers;}  }
class C{  public Builder precision(String precision){  return precision(DistanceUnit.parse(precision,DistanceUnit.METERS,DistanceUnit.METERS));}  }
class C{  protected BackupUploadTask(final Protos.TaskInfo info){  super(info);}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source){  if (StringUtils.isEmpty(source)) {    return null;  }  try {    JSONObject jsonObject=new JSONObject(source);    return parseKeyAndValueToMap(jsonObject);  } catch (  JSONException e) {    if (isPrintException) {      e.printStackTrace();    }    return null;  }}  }
class C{  public MediaType withoutParameters(){  return parameters.isEmpty() ? this : create(type,subtype);}  }
class C{  public VariableAttributes clone(){  VariableAttributes result=new VariableAttributes();  result.SpecifiedAttributes=SpecifiedAttributes;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  result.Value=Value;  result.DataType=DataType;  result.ValueRank=ValueRank;  result.ArrayDimensions=ArrayDimensions == null ? null : ArrayDimensions.clone();  result.AccessLevel=AccessLevel;  result.UserAccessLevel=UserAccessLevel;  result.MinimumSamplingInterval=MinimumSamplingInterval;  result.Historizing=Historizing;  return result;}  }
class C{  public SimpleLog(String filename,boolean append){  super();  m_Filename=filename;  Debug.writeToFile(m_Filename,"--> Log started",append);}  }
class C{  @Override public void unregisterContentObserver(ContentObserver observer){}  }
class C{  public boolean relative(int rows) throws GenericEntityException {  if (closed)   throw new GenericResultSetClosedException("This EntityListIterator has been closed, this operation cannot be performed");  try {    return resultSet.relative(rows);  } catch (  SQLException e) {    if (!closed) {      this.close();      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GenericEntityException("Error going to the relative index " + rows,e);  }}  }
class C{  @Override public void autoAdjustRange(){  Plot plot=getPlot();  if (plot == null) {    return;  }  if (plot instanceof ValueAxisPlot) {    ValueAxisPlot vap=(ValueAxisPlot)plot;    double lower;    Range r=vap.getDataRange(this);    if (r == null) {      r=getDefaultAutoRange();      lower=r.getLowerBound();    } else {      lower=r.getLowerBound();      if (this.strictValuesFlag && !this.allowNegativesFlag && lower <= 0.0) {        throw new RuntimeException("Values less than or equal to " + "zero not allowed with logarithmic axis");      }    }    final double lowerMargin;    if (lower > 0.0 && (lowerMargin=getLowerMargin()) > 0.0) {      final double logLower=(Math.log(lower) / LOG10_VALUE);      double logAbs;      if ((logAbs=Math.abs(logLower)) < 1.0) {        logAbs=1.0;      }      lower=Math.pow(10,(logLower - (logAbs * lowerMargin)));    }    if (this.autoRangeNextLogFlag) {      lower=computeLogFloor(lower);    }    if (!this.allowNegativesFlag && lower >= 0.0 && lower < SMALL_LOG_VALUE) {      lower=r.getLowerBound();    }    double upper=r.getUpperBound();    final double upperMargin;    if (upper > 0.0 && (upperMargin=getUpperMargin()) > 0.0) {      final double logUpper=(Math.log(upper) / LOG10_VALUE);      double logAbs;      if ((logAbs=Math.abs(logUpper)) < 1.0) {        logAbs=1.0;      }      upper=Math.pow(10,(logUpper + (logAbs * upperMargin)));    }    if (!this.allowNegativesFlag && upper < 1.0 && upper > 0.0 && lower > 0.0) {      double expVal=Math.log(upper) / LOG10_VALUE;      expVal=Math.ceil(-expVal + 0.001);      expVal=Math.pow(10,expVal);      upper=(expVal > 0.0) ? Math.ceil(upper * expVal) / expVal : Math.ceil(upper);    } else {      upper=(this.autoRangeNextLogFlag) ? computeLogCeil(upper) : Math.ceil(upper);    }    double minRange=getAutoRangeMinimumSize();    if (upper - lower < minRange) {      upper=(upper + lower + minRange) / 2;      lower=(upper + lower - minRange) / 2;      if (upper - lower < minRange) {        double absUpper=Math.abs(upper);        double adjVal=(absUpper > SMALL_LOG_VALUE) ? absUpper / 100.0 : 0.01;        upper=(upper + lower + adjVal) / 2;        lower=(upper + lower - adjVal) / 2;      }    }    setRange(new Range(lower,upper),false,false);    setupSmallLogFlag();  }}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public static Stats of(long... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  public SourceModel sourceForLocation(Location loc){  return sourceForClass(loc.declaringType());}  }
class C{  public TokenizerToken(){  type=Tokenizer.TT_ERROR;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void print(boolean bool){  print(String.valueOf(bool));}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  public static String convertByte2HexString(byte b){  char u8=convertByte2Uint8(b);  return Integer.toHexString(u8);}  }
class C{  public final CC width(String size){  hor.setSize(ConstraintParser.parseBoundSize(size,false,true));  return this;}  }
class C{  protected DeserializableList(final Deserializer deserializer,final ObjectDeserializer<T> elementDeserializer,final String label){  this.list=deserializer.readObjectArray(label,elementDeserializer);  this.label=label;}  }
class C{  public TaskData createPartialTaskData(TaskRepository repository,ReviewResult review){  TaskData taskData=new TaskData(getAttributeMapper(repository),repository.getConnectorKind(),repository.getRepositoryUrl(),review.getHash());  schema.initialize(taskData);  taskData.setPartial(true);  populateTaskData(taskData,review,repository);  return taskData;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public boolean loadHistory(String id){  String prev=myHelper.getContent();  boolean result=myHelper.loadHistory(id,myConsole.getVirtualFile());  String userValue=myHelper.getContent();  if (prev != userValue && userValue != null) {    setConsoleText(userValue,false,false);  }  return result;}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL.charAt(zzCurrentPosL++); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL.charAt(zzCurrentPosL++);          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 74:{        setParamExpansionWord(false);        setParamExpansionHash(false);        setParamExpansionOther(false);        backToPreviousState();        return RIGHT_CURLY;      }case 168:    break;case 113:{    return ARITH_ASS_MOD;  }case 169:break;case 90:{if (isBash4()) {  return REDIRECT_AMP_GREATER;} else {  yypushback(1);  return AMP;}}case 170:break;case 39:{return ARITH_PLUS;}case 171:break;case 65:{return PARAM_EXPANSION_OP_STAR;}case 172:break;case 97:{if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState();goToState(S_ARITH);return EXPR_ARITH;}case 173:break;case 51:{backToPreviousState();return RIGHT_PAREN;}case 174:break;case 133:{if (heredocState().isNextMarker(yytext())) {boolean ignoreTabs=heredocState().isIgnoringTabs();heredocState().popMarker(yytext());popStates(S_HEREDOC);return ignoreTabs ? HEREDOC_MARKER_IGNORING_TABS_END : HEREDOC_MARKER_END;}return yystate() == S_HEREDOC && heredocState().isExpectingEvaluatingHeredoc() && !"$".equals(yytext().toString()) ? VARIABLE : HEREDOC_LINE;}case 175:break;case 79:{return HEREDOC_LINE;}case 176:break;case 157:{return THEN_KEYWORD;}case 177:break;case 36:{return ARITH_MOD;}case 178:break;case 8:{stringParsingState().enterString();goToState(S_STRINGMODE);return STRING_BEGIN;}case 179:break;case 14:{return SEMI;}case 180:break;case 114:{return ARITH_MINUS_MINUS;}case 181:break;case 77:{if (heredocState().isNextMarker(yytext())) {boolean ignoreTabs=heredocState().isIgnoringTabs();heredocState().popMarker(yytext());popStates(S_HEREDOC);return ignoreTabs ? HEREDOC_MARKER_IGNORING_TABS_END : HEREDOC_MARKER_END;}return HEREDOC_LINE;}case 182:break;case 151:zzMarkedPos=zzStartRead + 1;{backToPreviousState();goToState(S_ASSIGNMENT_LIST);return RIGHT_SQUARE;}case 183:break;case 57:{if (yystate() == S_BACKQUOTE) {backToPreviousState();} else {goToState(S_BACKQUOTE);}return BACKQUOTE;}case 184:break;case 117:{return ARITH_ASS_PLUS;}case 185:break;case 13:{if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState();goToState(S_ARITH_SQUARE_MODE);return EXPR_ARITH_SQUARE;}case 186:break;case 87:yypushback(1);{return ASSIGNMENT_WORD;}case 187:break;case 134:yypushback(2);{return ASSIGNMENT_WORD;}case 188:break;case 66:{return PARAM_EXPANSION_OP_COLON;}case 189:break;case 19:{if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState();stringParsingState().enterSubshell();goToState(S_SUBSHELL);return LEFT_PAREN;}case 190:break;case 58:{setParamExpansionHash(isParamExpansionWord() && true);return PARAM_EXPANSION_OP_HASH;}case 191:break;case 102:{return REDIRECT_LESS_GREATER;}case 192:break;case 155:{return TIME_KEYWORD;}case 193:break;case 21:{return LESS_THAN;}case 194:break;case 154:{int zzFState=17;int zzFPos=zzStartRead;if (zzFin.length <= zzBufferL.length()) {zzFin=new boolean[zzBufferL.length() + 1];}boolean zzFinL[]=zzFin;while (zzFState != -1 && zzFPos < zzMarkedPos) {if ((zzAttrL[zzFState] & 1) == 1) {zzFinL[zzFPos]=true;}zzInput=zzBufferL.charAt(zzFPos++);zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];}if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) {zzFinL[zzFPos]=true;}zzFState=18;zzFPos=zzMarkedPos;while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {zzInput=zzBufferL.charAt(--zzFPos);zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];};zzMarkedPos=zzFPos;}{goToState(S_ARRAY);return ASSIGNMENT_WORD;}case 195:break;case 109:yypushback(1);{goToState(S_ARRAY);return ASSIGNMENT_WORD;}case 196:break;case 128:{return PARAM_EXPANSION_OP_COLON_QMARK;}case 197:break;case 54:{goToState(S_ARITH_ARRAY_MODE);return LEFT_SQUARE;}case 198:break;case 167:{return FUNCTION_KEYWORD;}case 199:break;case 46:{return ARITH_GT;}case 200:break;case 159:{return ELSE_KEYWORD;}case 201:break;case 4:{return BACKSLASH;}case 202:break;case 163:{backToPreviousState();yypushback(yylength());}case 203:break;case 64:{setParamExpansionOther(true);return PARAM_EXPANSION_OP_DOT;}case 204:break;case 162:{backToPreviousState();return ESAC_KEYWORD;}case 205:break;case 103:{goToState(S_HEREDOC_MARKER);return HEREDOC_MARKER_TAG;}case 206:break;case 63:{setParamExpansionOther(true);return PARAM_EXPANSION_OP_QMARK;}case 207:break;case 91:{return ADD_EQ;}case 208:break;case 38:{return ARITH_BITWISE_XOR;}case 209:break;case 83:{return VARIABLE;}case 210:break;case 108:zzMarkedPos=zzStartRead + 1;{if (yystate() == S_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return HEREDOC_LINE;goToState(S_DOLLAR_PREFIXED);return DOLLAR;}case 211:break;case 126:{goToState(S_CASE_PATTERN);return CASE_END;}case 212:break;case 105:{return COND_OP_REGEX;}case 213:break;case 88:{return FILEDESCRIPTOR;}case 214:break;case 68:{return PARAM_EXPANSION_OP_MINUS;}case 215:break;case 27:{return LEFT_PAREN;}case 216:break;case 106:{return COND_OP_EQ_EQ;}case 217:break;case 59:{return PARAM_EXPANSION_OP_EXCL;}case 218:break;case 112:{return ARITH_ASS_MUL;}case 219:break;case 124:{return ARITH_SHIFT_LEFT;}case 220:break;case 164:{return UNTIL_KEYWORD;}case 221:break;case 33:{return ARITH_MULT;}case 222:break;case 142:zzMarkedPos=zzStartRead + 2;{return REDIRECT_GREATER_AMP;}case 223:break;case 147:zzMarkedPos=zzStartRead + 2;{yypushback(1);return ARITH_MINUS;}case 224:break;case 62:{return PARAM_EXPANSION_OP_AT;}case 225:break;case 80:{if (heredocState().isNextMarker(yytext())) {boolean ignoreTabs=heredocState().isIgnoringTabs();heredocState().popMarker(yytext());popStates(S_HEREDOC);return ignoreTabs ? HEREDOC_MARKER_IGNORING_TABS_END : HEREDOC_MARKER_END;}return HEREDOC_LINE;}case 226:break;case 140:{return LET_KEYWORD;}case 227:break;case 76:{return LINE_FEED;}case 228:break;case 138:{yypushback(1);goToState(S_TEST);setEmptyConditionalCommand(true);return EXPR_CONDITIONAL;}case 229:break;case 2:{if ((yystate() == S_PARAM_EXPANSION || yystate() == S_SUBSHELL || yystate() == S_ARITH || yystate() == S_ARITH_SQUARE_MODE) && isInState(S_HEREDOC)) {backToPreviousState();return LINE_FEED;}if (!heredocState().isEmpty()) {goToState(S_HEREDOC);return LINE_FEED;}return LINE_FEED;}case 230:break;case 98:{return DO_KEYWORD;}case 231:break;case 56:{if (!stringParsingState().isInSubstring() && stringParsingState().isSubstringAllowed()) {stringParsingState().enterString();goToState(S_STRINGMODE);return STRING_BEGIN;}stringParsingState().leaveString();backToPreviousState();return STRING_END;}case 232:break;case 111:{return ARITH_EXPONENT;}case 233:break;case 121:{return ARITH_GE;}case 234:break;case 71:{if (!isParamExpansionOther() && (!isParamExpansionWord() || !isParamExpansionHash())) {goToState(S_ARITH_ARRAY_MODE);}return LEFT_SQUARE;}case 235:break;case 6:{return BANG_TOKEN;}case 236:break;case 127:{if (!isInCaseBody()) {setInCaseBody(true);goToState(S_CASE_PATTERN);};return IN_KEYWORD;}case 237:break;case 5:{return COMMENT;}case 238:break;case 101:{return SHIFT_RIGHT;}case 239:break;case 24:{return COND_OP_NOT;}case 240:break;case 78:{if (!heredocState().isEmpty()) {return HEREDOC_LINE;}return LINE_FEED;}case 241:break;case 153:yypushback(3);{goToState(S_ASSIGNMENT_LIST);return ASSIGNMENT_WORD;}case 242:break;case 135:yypushback(2);{goToState(S_ASSIGNMENT_LIST);return ASSIGNMENT_WORD;}case 243:break;case 120:{return ARITH_EQ;}case 244:break;case 100:{return REDIRECT_GREATER_BAR;}case 245:break;case 165:{return WHILE_KEYWORD;}case 246:break;case 42:{return LEFT_SQUARE;}case 247:break;case 132:zzMarkedPos=zzStartRead + 1;{return LEFT_SQUARE;}case 248:break;case 67:{setParamExpansionOther(true);return PARAM_EXPANSION_OP_PERCENT;}case 249:break;case 146:{backToPreviousState();return _BRACKET_KEYWORD;}case 250:break;case 145:{return REDIRECT_LESS_LESS_LESS;}case 251:break;case 72:{return PARAM_EXPANSION_OP_EQ;}case 252:break;case 34:{return ARITH_COLON;}case 253:break;case 158:{return ELIF_KEYWORD;}case 254:break;case 115:{return ARITH_ASS_MINUS;}case 255:break;case 139:{if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState();yypushback(2);goToState(S_SUBSHELL);return LEFT_PAREN;}case 256:break;case 17:{return PIPE;}case 257:break;case 141:{return FOR_KEYWORD;}case 258:break;case 53:{backToPreviousState();goToState(S_ARITH_ARRAY_MODE);return LEFT_SQUARE;}case 259:break;case 166:{return SELECT_KEYWORD;}case 260:break;case 104:{backToPreviousState();setEmptyConditionalCommand(false);return _EXPR_CONDITIONAL;}case 261:break;case 41:{return ARITH_BITWISE_NEGATE;}case 262:break;case 122:{return ARITH_SHIFT_RIGHT;}case 263:break;case 160:{setInCaseBody(false);goToState(S_CASE);return CASE_KEYWORD;}case 264:break;case 7:{return DOLLAR;}case 265:break;case 3:{return WHITESPACE;}case 266:break;case 144:{goToState(S_HEREDOC_MARKER_IGNORE_TABS);return HEREDOC_MARKER_TAG;}case 267:break;case 28:{return ARITH_BASE_CHAR;}case 268:break;case 29:{return ARITH_NEGATE;}case 269:break;case 82:{return SHEBANG;}case 270:break;case 60:{setParamExpansionWord(true);return WORD;}case 271:break;case 85:{if (yystate() == S_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return HEREDOC_LINE;goToState(S_PARAM_EXPANSION);yypushback(1);return DOLLAR;}case 272:break;case 47:{return ARITH_LT;}case 273:break;case 73:{setParamExpansionWord(false);setParamExpansionHash(false);setParamExpansionOther(false);return LEFT_CURLY;}case 274:break;case 110:{return ARITH_ASS_DIV;}case 275:break;case 94:{return OR_OR;}case 276:break;case 49:{backToPreviousState();return _EXPR_ARITH_SQUARE;}case 277:break;case 143:zzMarkedPos=zzStartRead + 2;{return REDIRECT_LESS_AMP;}case 278:break;case 95:{return IN_KEYWORD;}case 279:break;case 26:{return COND_OP;}case 280:break;case 31:{return ARITH_DIV;}case 281:break;case 25:{if (isEmptyConditionalCommand()) {setEmptyConditionalCommand(false);backToPreviousState();return _EXPR_CONDITIONAL;} else {setEmptyConditionalCommand(false);return WORD;}}case 282:break;case 93:{if (isBash4()) {return PIPE_AMP;} else {yypushback(1);return PIPE;}}case 283:break;case 50:{backToPreviousState();return RIGHT_SQUARE;}case 284:break;case 11:{return AT;}case 285:break;case 161:{return DONE_KEYWORD;}case 286:break;case 20:{return GREATER_THAN;}case 287:break;case 75:{heredocState().pushMarker(yytext(),yystate() == S_HEREDOC_MARKER_IGNORE_TABS);backToPreviousState();return HEREDOC_MARKER_START;}case 288:break;case 45:{incOpenParenthesisCount();return LEFT_PAREN;}case 289:break;case 15:{return RIGHT_PAREN;}case 290:break;case 81:{}case 291:break;case 61:{setParamExpansionOther(true);return PARAM_EXPANSION_OP_SLASH;}case 292:break;case 84:{yypushback(1);goToState(S_ARITH_SQUARE_MODE);return DOLLAR;}case 293:break;case 37:{return ARITH_MINUS;}case 294:break;case 12:{return AMP;}case 295:break;case 116:{return ARITH_PLUS_PLUS;}case 296:break;case 137:{goToState(S_TEST_COMMAND);return BRACKET_KEYWORD;}case 297:break;case 148:{return ARITH_HEX_NUMBER;}case 298:break;case 86:{return STRING2;}case 299:break;case 107:{return ARITH_NE;}case 300:break;case 43:{return RIGHT_SQUARE;}case 301:break;case 149:{return ARITH_ASS_SHIFT_RIGHT;}case 302:break;case 16:{if (yystate() == S_BACKQUOTE) backToPreviousState(); else goToState(S_BACKQUOTE);return BACKQUOTE;}case 303:break;case 55:{return STRING_DATA;}case 304:break;case 150:{return ARITH_ASS_SHIFT_LEFT;}case 305:break;case 123:{return ARITH_LE;}case 306:break;case 70:{return PARAM_EXPANSION_OP_PLUS;}case 307:break;case 96:{return IF_KEYWORD;}case 308:break;case 152:{goToState(S_CASE_PATTERN);if (!isBash4()) {yypushback(1);}return CASE_END;}case 309:break;case 1:{return BAD_CHARACTER;}case 310:break;case 30:{return ARITH_NUMBER;}case 311:break;case 156:{return TRAP_KEYWORD;}case 312:break;case 130:{return PARAM_EXPANSION_OP_COLON_PLUS;}case 313:break;case 118:{return ARITH_OCTAL_NUMBER;}case 314:break;case 52:{backToPreviousState();if (stringParsingState().isInSubshell()) stringParsingState().leaveSubshell();return RIGHT_PAREN;}case 315:break;case 92:{goToState(S_TEST);setEmptyConditionalCommand(false);return EXPR_CONDITIONAL;}case 316:break;case 40:{return COMMA;}case 317:break;case 48:{return EXPR_ARITH_SQUARE;}case 318:break;case 35:{return ARITH_BITWISE_AND;}case 319:break;case 22:{return LEFT_CURLY;}case 320:break;case 44:{decOpenParenthesisCount();return RIGHT_PAREN;}case 321:break;case 18:{return EQ;}case 322:break;case 23:{if (yystate() == S_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return HEREDOC_LINE;return RIGHT_CURLY;}case 323:break;case 129:{return PARAM_EXPANSION_OP_COLON_MINUS;}case 324:break;case 131:{return PARAM_EXPANSION_OP_COLON_EQ;}case 325:break;case 119:{if (openParenthesisCount() > 0) {decOpenParenthesisCount();yypushback(1);return RIGHT_PAREN;} else {backToPreviousState();return _EXPR_ARITH;}}case 326:break;case 9:{return INTEGER_LITERAL;}case 327:break;case 69:{setParamExpansionOther(true);return PARAM_EXPANSION_OP_UNKNOWN;}case 328:break;case 99:{return FI_KEYWORD;}case 329:break;case 10:{return WORD;}case 330:break;case 125:{goToState(S_CASE_PATTERN);if (isBash4()) {return CASE_END;} else {yypushback(1);return SEMI;}}case 331:break;case 89:{return AND_AND;}case 332:break;case 32:{return ARITH_QMARK;}case 333:break;case 136:{if (isBash4()) {return REDIRECT_AMP_GREATER_GREATER;} else {yypushback(2);return AMP;}}case 334:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public Element store(Object o){  Element blocks=new Element("oblocks");  blocks.setAttribute("class","jmri.jmrit.logix.configurexml.OBlockManagerXml");  OBlockManager manager=(OBlockManager)o;  Iterator<String> iter=manager.getSystemNameList().iterator();  while (iter.hasNext()) {    String sname=iter.next();    OBlock block=manager.getBySystemName(sname);    String uname=block.getUserName();    if (log.isDebugEnabled()) {      log.debug("OBlock: sysName= " + sname + ", userName= "+ uname);    }    Element elem=new Element("oblock");    elem.setAttribute("systemName",sname);    if (uname != null && uname.length() > 0) {      elem.setAttribute("userName",uname);      elem.addContent(new Element("userName").addContent(uname));    }    String comment=block.getComment();    if (comment != null) {      Element c=new Element("comment");      c.addContent(comment);      elem.addContent(c);    }    elem.setAttribute("length","" + block.getLengthMm());    elem.setAttribute("units",block.isMetric() ? "true" : "false");    elem.setAttribute("curve","" + block.getCurvature());    if (block.getNamedSensor() != null) {      Element se=new Element("sensor");      se.setAttribute("systemName",block.getNamedSensor().getName());      elem.addContent(se);    }    if (block.getNamedErrorSensor() != null) {      Element se=new Element("errorSensor");      se.setAttribute("systemName",block.getNamedErrorSensor().getName());      elem.addContent(se);    }    if (block.getReporter() != null) {      Element se=new Element("reporter");      se.setAttribute("systemName",block.getReporter().getSystemName());      se.setAttribute("reportCurrent",block.isReportingCurrent() ? "true" : "false");      elem.addContent(se);    }    elem.setAttribute("permissive",block.getPermissiveWorking() ? "true" : "false");    elem.setAttribute("speedNotch",block.getBlockSpeed());    List<Path> paths=block.getPaths();    for (int j=0; j < paths.size(); j++) {      elem.addContent(storePath((OPath)paths.get(j)));    }    List<Portal> portals=block.getPortals();    for (int i=0; i < portals.size(); i++) {      elem.addContent(storePortal(portals.get(i)));    }    blocks.addContent(elem);  }  return blocks;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static void sort(List list){  Object[] a=list.toArray();  Arrays.sort(a);  ListIterator i=list.listIterator();  for (int j=0; j < a.length; j++) {    i.next();    i.set(a[j]);  }}  }
class C{  public final void popQuick(){  m_firstFree--;  m_map[m_firstFree]=null;}  }
class C{  public void stopSampling(){  if (mSamplingCounter.decrementAndGet() == 0) {    mHandler.stopSamplingThread();    addFinalSample();  }}  }
class C{  private List tetradBasedPurify(List partition){  boolean eliminated[]=new boolean[numVars];  for (int i=0; i < numVars; i++) {    eliminated[i]=false;  }  printlnMessage("TETRAD-BASED PURIFY:");  printlnMessage("Finding Unidimensional Measurement Models");  printlnMessage();  printlnMessage("Initially Specified Measurement Model");  printlnMessage();  printClustering(partition);  printlnMessage();  printlnMessage("INTRA-CONSTRUCT PHASE.");  printlnMessage("----------------------");  printlnMessage();  int count=0;  for (Iterator it=partition.iterator(); it.hasNext(); ) {    intraConstructPhase2((int[])it.next(),eliminated,"T" + (++count));  }  printlnMessage();  printlnMessage("CROSS-CONSTRUCT PHASE.");  printlnMessage("----------------------");  printlnMessage();  crossConstructPhase2(partition,eliminated);  printlnMessage();  printlnMessage("------------------------------------------------------");  printlnMessage("Output Measurement Model");  List output=buildSolution(partition,eliminated);  printClustering(output);  return output;}  }
class C{  public boolean containsValue(Object value){  return (root == null ? false : (value == null ? valueSearchNull(root) : valueSearchNonNull(root,value)));}  }
class C{  public void saveSettings(){  if (!dirty) {    return;  }  JAXBContext context;  Writer w=null;  try {    context=JAXBContext.newInstance(Settings.class);    Marshaller m=context.createMarshaller();    m.setProperty("jaxb.encoding","UTF-8");    m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);    w=new StringWriter();    m.marshal(this,w);    StringBuilder sb=new StringBuilder(w.toString());    w.close();    if (SystemUtils.IS_OS_WINDOWS) {      sb=new StringBuilder(sb.toString().replaceAll("(?<!\r)\n","\r\n"));    }    w=new FileWriter(new File(settingsFolder,CONFIG_FILE));    String xml=sb.toString();    IOUtils.write(xml,w);  } catch (  Exception e) {    LOGGER.error("saveSettings",e);    MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,"tmm.settings","message.config.savesettingserror"));  } finally {    try {      w.close();    } catch (    Exception e) {      LOGGER.error("saveSettings",e);      MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,"tmm.settings","message.config.savesettingserror"));    }  }  setProxy();  clearDirty();}  }
class C{  public static CommandLineResult executeCommandLine(@Nullable final Map<String,String> env,final String cmd,@Nullable final String[] args,@Nullable final String[] redactedArgs,final long timeout,@Nullable final File workingDirectory) throws IOException {  return executeCommandLine(env,cmd,args,null,timeout,workingDirectory,null);}  }
class C{  @Override void paintPeer(final Graphics g){  if (!disposed) {    Dimension size=getPeerSize();    g.setColor(getPeerBackground());    g.fillRect(0,0,size.width,size.height);    paintBorder(g,borderInsets.left,borderInsets.top,size.width - (borderInsets.left + borderInsets.right),size.height - (borderInsets.top + borderInsets.bottom));    FontMetrics fm=g.getFontMetrics();    Rectangle textRect, iconRect, viewRect;    textRect=new Rectangle();    viewRect=new Rectangle();    iconRect=new Rectangle();    viewRect.width=size.width - (contentAreaInsets.left + contentAreaInsets.right);    viewRect.height=size.height - (contentAreaInsets.top + contentAreaInsets.bottom);    viewRect.x=contentAreaInsets.left;    viewRect.y=contentAreaInsets.top;    String llabel=(label != null) ? label : "";    String text=SwingUtilities.layoutCompoundLabel(fm,llabel,null,SwingConstants.CENTER,SwingConstants.CENTER,SwingConstants.CENTER,SwingConstants.CENTER,viewRect,iconRect,textRect,0);    Font f=getPeerFont();    g.setFont(f);    if (pressed && armed) {      paintButtonPressed(g,target);    }    paintText(g,target,textRect,text);    if (hasFocus()) {      paintFocus(g,focusInsets.left,focusInsets.top,size.width - (focusInsets.left + focusInsets.right) - 1,size.height - (focusInsets.top + focusInsets.bottom) - 1);    }  }  flush();}  }
class C{  public static int hash(int seed,int[] intArray){  if (intArray == null) {    return 0;  }  for (  int anInt : intArray) {    seed=hash(seed,anInt);  }  return seed;}  }
class C{  public void writeCredentials(DataOutputStream dos,DataInputStream dis,Properties p_credentials,boolean isNotification,DistributedMember member,HeapDataOutputStream heapdos) throws IOException, GemFireSecurityException {  if (p_credentials == null) {    heapdos.writeByte(CREDENTIALS_NONE);    heapdos.flush();    dos.write(heapdos.toByteArray());    dos.flush();    return;  }  if (dhSKAlgo == null || dhSKAlgo.length() == 0) {    heapdos.writeByte(CREDENTIALS_NORMAL);    DataSerializer.writeProperties(p_credentials,heapdos);    heapdos.flush();    dos.write(heapdos.toByteArray());    dos.flush();    return;  }  try {    InternalLogWriter securityLogWriter=(InternalLogWriter)this.system.getSecurityLogWriter();    securityLogWriter.fine("HandShake: using Diffie-Hellman key exchange with algo " + dhSKAlgo);    boolean requireAuthentication=(certificateFilePath != null && certificateFilePath.length() > 0);    if (requireAuthentication) {      securityLogWriter.fine("HandShake: server authentication using digital " + "signature required");    }    heapdos.writeByte(CREDENTIALS_DHENCRYPT);    heapdos.writeBoolean(requireAuthentication);    DataSerializer.writeString(dhSKAlgo,heapdos);    byte[] keyBytes=dhPublicKey.getEncoded();    DataSerializer.writeByteArray(keyBytes,heapdos);    byte[] clientChallenge=null;    if (requireAuthentication) {      clientChallenge=new byte[64];      random.nextBytes(clientChallenge);      DataSerializer.writeByteArray(clientChallenge,heapdos);    }    heapdos.flush();    dos.write(heapdos.toByteArray());    dos.flush();    byte acceptanceCode=dis.readByte();    if (acceptanceCode != REPLY_OK && acceptanceCode != REPLY_AUTH_NOT_REQUIRED) {      dis.readByte();      dis.readInt();      if (!isNotification) {        DataSerializer.readByteArray(dis);      }      readMessage(dis,dos,acceptanceCode,member);    } else     if (acceptanceCode == REPLY_OK) {      keyBytes=DataSerializer.readByteArray(dis);      if (requireAuthentication) {        String subject=DataSerializer.readString(dis);        byte[] signatureBytes=DataSerializer.readByteArray(dis);        if (!certificateMap.containsKey(subject)) {          throw new AuthenticationFailedException(LocalizedStrings.HandShake_HANDSHAKE_FAILED_TO_FIND_PUBLIC_KEY_FOR_SERVER_WITH_SUBJECT_0.toLocalizedString(subject));        }        X509Certificate cert=(X509Certificate)certificateMap.get(subject);        Signature sig=Signature.getInstance(cert.getSigAlgName());        sig.initVerify(cert);        sig.update(clientChallenge);        if (!sig.verify(signatureBytes)) {          throw new AuthenticationFailedException("Mismatch in client " + "challenge bytes. Malicious server?");        }        securityLogWriter.fine("HandShake: Successfully verified the " + "digital signature from server");      }      byte[] challenge=DataSerializer.readByteArray(dis);      X509EncodedKeySpec x509KeySpec=new X509EncodedKeySpec(keyBytes);      KeyFactory keyFact=KeyFactory.getInstance("DH");      this.clientPublicKey=keyFact.generatePublic(x509KeySpec);      HeapDataOutputStream hdos=new HeapDataOutputStream(Version.CURRENT);      try {        DataSerializer.writeProperties(p_credentials,hdos);        DataSerializer.writeByteArray(challenge,hdos);        byte[] encBytes=encryptBytes(hdos.toByteArray(),getEncryptCipher(dhSKAlgo,this.clientPublicKey));        DataSerializer.writeByteArray(encBytes,dos);      }  finally {        hdos.close();      }    }  } catch (  IOException ex) {    throw ex;  }catch (  GemFireSecurityException ex) {    throw ex;  }catch (  Exception ex) {    throw new AuthenticationFailedException("HandShake failed in Diffie-Hellman key exchange",ex);  }  dos.flush();}  }
class C{  public void tearDown(){  client=null;  domainURL=null;  cmanager=null;}  }
class C{  protected static Placemark createAutomobilePlacemark(Position position,String name,String automotiveType){  if (!automotiveIconMap.containsKey(automotiveType)) {    throw new IllegalArgumentException(automotiveType + " is not valid.");  }  Placemark placemark=Placemark.createWithImage(position,ImageSource.fromResource(automotiveIconMap.get(automotiveType)));  placemark.getAttributes().setImageOffset(Offset.bottomCenter()).setImageScale(NORMAL_IMAGE_SCALE);  placemark.setHighlightAttributes(new PlacemarkAttributes(placemark.getAttributes()).setImageScale(HIGHLIGHTED_IMAGE_SCALE).setImageColor(new Color(android.graphics.Color.YELLOW)));  placemark.setDisplayName(name);  placemark.putUserProperty(AUTOMOTIVE_TYPE,automotiveType);  placemark.putUserProperty(SELECTABLE,null);  placemark.putUserProperty(EDITABLE,null);  placemark.putUserProperty(MOVABLE,null);  return placemark;}  }
class C{  public static Position convertWGS84toNad27(Position pos){  if (pos == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double dx_wgs84_to_nad27=8.0;  double dy_wgs84_to_nad27=-160;  double dz_wgs84_to_nad27=-176;  return DatumTransformation.threeParamMolodenski(pos,new Earth(),CLARKE1866_GLOBE,dx_wgs84_to_nad27,dy_wgs84_to_nad27,dz_wgs84_to_nad27);}  }
class C{  public String next() throws java.io.IOException {  int yy_input;  int yy_action;  int yy_currentPos_l;  int yy_markedPos_l;  int yy_endRead_l=yy_endRead;  char[] yy_buffer_l=yy_buffer;  char[] yycmap_l=yycmap;  int[] yytrans_l=yytrans;  int[] yy_rowMap_l=yy_rowMap;  int[] yy_attr_l=YY_ATTRIBUTE;  int yy_pushbackPos_l=yy_pushbackPos=-1;  boolean yy_was_pushback;  while (true) {    yy_markedPos_l=yy_markedPos;    yy_action=-1;    yy_currentPos_l=yy_currentPos=yy_startRead=yy_markedPos_l;    yy_state=yy_lexical_state;    yy_was_pushback=false;    yy_forAction: {      while (true) {        if (yy_currentPos_l < yy_endRead_l)         yy_input=yy_buffer_l[yy_currentPos_l++]; else         if (yy_atEOF) {          yy_input=YYEOF;          break yy_forAction;        } else {          yy_currentPos=yy_currentPos_l;          yy_markedPos=yy_markedPos_l;          yy_pushbackPos=yy_pushbackPos_l;          boolean eof=yy_refill();          yy_currentPos_l=yy_currentPos;          yy_markedPos_l=yy_markedPos;          yy_buffer_l=yy_buffer;          yy_endRead_l=yy_endRead;          yy_pushbackPos_l=yy_pushbackPos;          if (eof) {            yy_input=YYEOF;            break yy_forAction;          } else {            yy_input=yy_buffer_l[yy_currentPos_l++];          }        }        int yy_next=yytrans_l[yy_rowMap_l[yy_state] + yycmap_l[yy_input]];        if (yy_next == -1)         break yy_forAction;        yy_state=yy_next;        int yy_attributes=yy_attr_l[yy_state];        if ((yy_attributes & 2) == 2)         yy_pushbackPos_l=yy_currentPos_l;        if ((yy_attributes & 1) == 1) {          yy_was_pushback=(yy_attributes & 4) == 4;          yy_action=yy_state;          yy_markedPos_l=yy_currentPos_l;          if ((yy_attributes & 8) == 8)           break yy_forAction;        }      }    }    yy_markedPos=yy_markedPos_l;    if (yy_was_pushback)     yy_markedPos=yy_pushbackPos_l;switch (yy_action < 0 ? yy_action : YY_ACTION[yy_action]) {case 10:{        return closedblquote;      }case 18:    break;case 9:{    return closeparen;  }case 19:break;case 4:{return yytext();}case 20:break;case 13:{return opendblquote;}case 21:break;case 14:{return (delimit(yytext(),'/'));}case 22:break;case 5:{}case 23:break;case 17:{String fred=yytext();yypushback(1);return fred;}case 24:break;case 11:{return openbrace;}case 25:break;case 3:{return yytext();}case 26:break;case 7:{if (yylength() >= 3 && yylength() <= 4) {return ptbmdash;} else {return yytext();}}case 27:break;case 8:{return openparen;}case 28:break;case 2:{}case 29:break;case 15:{return ptbmdash;}case 30:break;case 1:{return (delimit(yytext(),'*'));}case 31:break;case 6:{return (cr);}case 32:break;case 12:{return closebrace;}case 33:break;case 16:{yypushback(1);return yytext();}case 34:break;default :if (yy_input == YYEOF && yy_startRead == yy_currentPos) {yy_atEOF=true;{return null;}} else {yy_ScanError(YY_NO_MATCH);}}}}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public MultiInputStream(Iterator<? extends ByteSource> it) throws IOException {  this.it=checkNotNull(it);  advance();}  }
class C{  public void dirtifyUnit(int id){  final String METHOD_NAME="dirtifyUnit(int)";  getOwner().methodBegin(getClass(),METHOD_NAME);  GAME_LOCK.lock();  try {    if (getGame().getEntity(id) == null) {      getPathEnumerator().getLastKnownLocations().remove(id);      getPathEnumerator().getUnitMovableAreas().remove(id);      getPathEnumerator().getUnitPaths().remove(id);      getPathEnumerator().getUnitPotentialLocations().remove(id);      return;    }    if (!(getGame().getEntity(id) instanceof Aero)) {      TreeSet<Integer> toDirty=new TreeSet<>(getPathEnumerator().getEntitiesWithLocation(getGame().getEntity(id).getPosition(),true));      if (getPathEnumerator().getLastKnownLocations().containsKey(id)) {        if ((getGame().getEntity(id) != null) && getGame().getEntity(id).isSelectableThisTurn()) {          toDirty.addAll(getPathEnumerator().getEntitiesWithLocation(getPathEnumerator().getLastKnownLocations().get(id).getCoords(),true));        }      }      List<Integer> toRemove=new ArrayList<>();      for (      Integer index : toDirty) {        if ((getGame().getEntity(index) == null) || (!getGame().getEntity(index).isSelectableThisTurn()) && (getGame().getPhase() == IGame.Phase.PHASE_MOVEMENT)) {          toRemove.add(index);        }      }      for (      Integer i : toRemove) {        toDirty.remove(i);      }      if (toDirty.size() != 0) {        String msg="The following units have become dirty";        if (getGame().getEntity(id) != null) {          msg+=" as a result of a nearby move of " + getGame().getEntity(id).getDisplayName();        }        Iterator<Integer> dirtyIterator=toDirty.descendingIterator();        while (dirtyIterator.hasNext()) {          Integer i=dirtyIterator.next();          Entity e=getGame().getEntity(i);          if (e != null)           msg+="\n  " + e.getDisplayName();        }        getOwner().log(getClass(),METHOD_NAME,msg);      }      getDirtyUnits().addAll(toDirty);    }    Entity entity=getGame().getEntity(id);    if ((entity != null) && (entity.isSelectableThisTurn()) || (getGame().getPhase() != IGame.Phase.PHASE_MOVEMENT)) {      getDirtyUnits().add(id);    } else     if (entity != null) {      getPathEnumerator().getLastKnownLocations().put(id,CoordFacingCombo.createCoordFacingCombo(entity));    }  }  finally {    GAME_LOCK.unlock();    getOwner().methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  static protected Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String) {      return object;    }    if (object instanceof Collection) {      return new JSONArray((Collection)object);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      return new JSONObject((Map)object);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  private void removeListeners(){  for (  final IDebugger debugger : m_debuggerProvider) {    debugger.getBookmarkManager().removeListener(m_listener);  }  m_debuggerProvider.removeListener(m_debuggerListener);}  }
class C{  @Override public boolean test(T value){  return contains(value);}  }
class C{  final int nonfairTryAcquireShared(int acquires){  for (; ; ) {    if (broken)     return 1;    int available=getState();    int remaining=available - acquires;    if (remaining < 0 || compareAndSetGlobalState(available,remaining,false)) {      return remaining;    }  }}  }
class C{  public void execute(String[] rawArgs,boolean mergeArgsWithDefaultOptions) throws IOException, InterruptedException {  this.initMameProcess(rawArgs,true,mergeArgsWithDefaultOptions).waitFor();}  }
class C{  public static int toIntValue(Object decoded){  return new BigInteger((byte[])decoded).intValue();}  }
class C{  public boolean isQueryValid(){  if (!Ruqus.knowsOfClass(queryClass) || !Ruqus.isClassQueryable(queryClass))   return false;  for (  String sortField : sortFields)   if (!Ruqus.classHasField(queryClass.getSimpleName(),sortField))   return false;  for (  Condition condition : conditions)   if (!condition.isValid())   return false;  return true;}  }
class C{  boolean shouldUpdateSelectedStateFromAction(){  return true;}  }
class C{  public void commitChanges(){  QuickConnectionManager connector=panel.getQuickConnector();  connector.setCurrentConnector((ConnectNeurons)cbConnectionType.getSelectedItem());  connectorPanels[0].commitChanges();  connectorPanels[1].commitChanges();  connectorPanels[2].commitChanges();  ratioPanel.commitChanges();  connector.setExcitatoryRatio(ratioPanel.getPercentExcitatory());  connector.setExRandomizer(ratioPanel.getExRandomizer());  connector.setInRandomizer(ratioPanel.getInRandomizer());  connector.setUseExcitatoryRandomization(ratioPanel.exRandomizerEnabled());  connector.setUseInhibitoryRandomization(ratioPanel.inRandomizerEnabled());}  }
class C{  public PaymentDataException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @Override public void deregisterHtmlFilterEventListener(final ScraperListener listener){  if (listener != null) {    if (listener instanceof ContentScraperListener) {      this.htmlFilterEventListeners.remove(ContentScraperListener.class,(ContentScraperListener)listener);    } else {      this.htmlFilterEventListeners.remove(ScraperListener.class,listener);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void addCSSNavigableDocumentListener(CSSNavigableDocumentListener l){  if (cssNavigableDocumentListeners.containsKey(l)) {    return;  }  DOMNodeInsertedListenerWrapper nodeInserted=new DOMNodeInsertedListenerWrapper(l);  DOMNodeRemovedListenerWrapper nodeRemoved=new DOMNodeRemovedListenerWrapper(l);  DOMSubtreeModifiedListenerWrapper subtreeModified=new DOMSubtreeModifiedListenerWrapper(l);  DOMCharacterDataModifiedListenerWrapper cdataModified=new DOMCharacterDataModifiedListenerWrapper(l);  DOMAttrModifiedListenerWrapper attrModified=new DOMAttrModifiedListenerWrapper(l);  cssNavigableDocumentListeners.put(l,new EventListener[]{nodeInserted,nodeRemoved,subtreeModified,cdataModified,attrModified});  XBLEventSupport es=(XBLEventSupport)initializeEventSupport();  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",nodeInserted,false);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",nodeRemoved,false);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",subtreeModified,false);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMCharacterDataModified",cdataModified,false);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",attrModified,false);}  }
class C{  public static com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder newBuilder(com.ebay.jetstream.event.processor.hdfs.TestRecord other){  return new com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder(other);}  }
class C{  public boolean intersects(int x,int y,int width,int height){  int tw=size.getWidth();  int th=size.getHeight();  return intersects(this.x,this.y,tw,th,x,y,width,height);}  }
class C{  public int read(char cbuf[],int off,int len) throws IOException {  return in.read(cbuf,off,len);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.105 -0500",hash_original_method="6F3414BDFDCAE5A0099FF42DC9162024",hash_generated_method="DFDC102C305D9CC41E0023B499A34D2A") public void generateMipmaps(){  mRS.nAllocationGenerateMipmaps(getID());}  }
class C{  @Nullable private Collection<UUID> igfsAffinityNodesForSplit(HadoopInputSplit split) throws IgniteCheckedException {  if (split instanceof HadoopFileBlock) {    HadoopFileBlock split0=(HadoopFileBlock)split;    if (IgniteFileSystem.IGFS_SCHEME.equalsIgnoreCase(split0.file().getScheme())) {      HadoopIgfsEndpoint endpoint=new HadoopIgfsEndpoint(split0.file().getAuthority());      IgfsEx igfs=null;      if (F.eq(ignite.name(),endpoint.grid()))       igfs=(IgfsEx)((IgniteEx)ignite).igfsx(endpoint.igfs());      if (igfs != null && !igfs.isProxy(split0.file())) {        IgfsPath path=new IgfsPath(split0.file());        if (igfs.exists(path)) {          Collection<IgfsBlockLocation> blocks;          try {            blocks=igfs.affinity(path,split0.start(),split0.length());          } catch (          IgniteException e) {            throw new IgniteCheckedException("Failed to get IGFS file block affinity [path=" + path + ", start="+ split0.start()+ ", len="+ split0.length()+ ']',e);          }          assert blocks != null;          if (blocks.size() == 1)           return blocks.iterator().next().nodeIds(); else {            Map<UUID,Long> idToLen=new HashMap<>();            for (            IgfsBlockLocation block : blocks) {              for (              UUID id : block.nodeIds()) {                Long len=idToLen.get(id);                idToLen.put(id,len == null ? block.length() : block.length() + len);              }            }            Map<NodeIdAndLength,UUID> res=new TreeMap<>();            for (            Map.Entry<UUID,Long> idToLenEntry : idToLen.entrySet()) {              UUID id=idToLenEntry.getKey();              res.put(new NodeIdAndLength(id,idToLenEntry.getValue()),id);            }            return new LinkedHashSet<>(res.values());          }        }      }    }  }  return null;}  }
class C{  public ButtonClickerObserver(final ButtonClickerActivity buttonClickerActivity){  super(buttonClickerActivity);  this.baseActivity=buttonClickerActivity;}  }
class C{  public static boolean globalLightsOff(){  return instance.globalLightsOff;}  }
class C{  protected boolean isAllocationValid(){  return (majorAllocValid && minorAllocValid);}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  public AnimatableMotionPointValue(AnimationTarget target,float x,float y,float angle){  super(target);  this.x=x;  this.y=y;  this.angle=angle;}  }
class C{  public void addLast(E u){  innerChain.addLast(u);}  }
class C{  public final int size(){  return Iterables.size(iterable);}  }
class C{  public boolean isWorking(){synchronized (LAYERWORKER_LOCK) {    return (layerWorker != null);  }}  }
class C{  public BerDecoder(byte buf[],int offset,int bufsize){  this.buf=buf;  this.bufsize=bufsize;  this.origOffset=offset;  reset();}  }
class C{  public String saveUpgradeOptions() throws SaaSApplicationException {  if (selectedService == null) {    return OUTCOME_ERROR;  }  if (logger.isDebugLoggingEnabled()) {  }  List<VOService> compatibleServices=new ArrayList<VOService>();  if (getPossibleCompatibleServices() != null) {    for (    Service service : getPossibleCompatibleServices()) {      if (service.isSelected()) {        compatibleServices.add(service.getVO());      }    }  }  getProvisioningService().setCompatibleServices(selectedService.getVoServiceDetails(),compatibleServices);  possibleCompatibleServices=null;  setSelectedServiceKey(getSelectedServiceKey());  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_SERVICE_UPGRADEOPTIONS_SAVED,selectedService.getServiceId());  if (logger.isDebugLoggingEnabled()) {  }  return OUTCOME_SUCCESS;}  }
class C{  public FileListParameter(OptionID optionID,FilesType filesType){  super(optionID);  this.filesType=filesType;}  }
class C{  @SuppressWarnings("static-access") public static void createCommonOptions(Options options){  Option optHelp=OptionBuilder.withArgName("help").withDescription("Print usage information").hasArg(false).isRequired(false).create(HELP);  options.addOption(optHelp);  Option optVerbose=OptionBuilder.withArgName("verbose").withDescription("Activate verbose mode").hasArg(false).isRequired(false).create(VERBOSE);  options.addOption(optVerbose);}  }
class C{  public void removeAllLayers(){  this.getRoot().removeAllChildren();}  }
class C{  public static List<String> formatDateList(List<Date> dateList){  List<String> newList=new ArrayList<String>();  for (  Date date : dateList)   newList.add(formatDate(date));  return newList;}  }
class C{  public int consumed(EvolutionState state,GEIndividual ind,int threadnum){  GPIndividual newind=((GPIndividual)(gpspecies.i_prototype)).lightClone();  return makeTrees(state,ind,newind.trees,threadnum,null);}  }
class C{  public Class<? extends TargetURIKey> bindTargetURIKey(){  return BuiltinSchemeAwareTargetURIKey.class;}  }
class C{  public void removeBytes(int offs,int len){  table.removeBytes(offs,len);  table.changeSelectionByOffset(offs,false);}  }
class C{  @CheckReturnValue public <T>Subject3<A,B,T> asWithPrecursor(BiFunction<A,B,T> mapping,Function<T,String> typeToString){  final Generator<Tuple3<A,B,T>> g=null;  final Shrink<Tuple3<A,B,T>> s=null;  final AsString<Tuple3<A,B,T>> desc=null;  final Source<Tuple3<A,B,T>> gen=Source.of(g).withShrinker(s).describedAs(desc);  return new PrecursorTheoryBuilder2<A,B,T>(this.state,gen,this.assumptions);}  }
class C{  public void shutdown(){  if (isShutdown.compareAndSet(false,true)) {    executorService.shutdown();    if (autoScaler != null)     autoScaler.shutdown();  }}  }
class C{  public static void showKeyboard(Activity activity,EditText editText){  InputMethodManager inputMethodManager=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  if (editText.requestFocus()) {    inputMethodManager.showSoftInput(editText,InputMethodManager.SHOW_IMPLICIT);  }}  }
class C{  public ContactsListAdapter(Context context,int layoutResourceId){  super(context,layoutResourceId);  mContext=context;  mLayoutResourceId=layoutResourceId;  mLayoutInflater=LayoutInflater.from(mContext);  setNotifyOnChange(false);}  }
class C{  void grantResalePermissions(List<POResalePermissionDetails> permissionsToGrant) throws ValidationException, ObjectNotFoundException, OperationNotPermittedException, NonUniqueBusinessKeyException, ServiceOperationException, ConcurrentModificationException, OrganizationAuthorityException, ServiceStateException {  ArgumentValidator.notNull("permissionsToGrant",permissionsToGrant);  for (  POResalePermissionDetails resalePerm : permissionsToGrant) {    ArgumentValidator.notNull("service",resalePerm.getService());    ArgumentValidator.notNull("grantor",resalePerm.getGrantor());    ArgumentValidator.notNull("grantee",resalePerm.getGrantee());    String templateId=resalePerm.getService().getServiceId();    String grantorId=resalePerm.getGrantor().getOrganizationId();    String granteeId=resalePerm.getGrantee().getOrganizationId();    OfferingType resaleType=resalePerm.getOfferingType();    partnerSrvProv.grantResalePermission(templateId,grantorId,granteeId,resaleType);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public TaskResourceRep addInitiator(URI initiatorId,URI eventId){  Initiator initiator=_dbClient.queryObject(Initiator.class,initiatorId);  Host host=_dbClient.queryObject(Host.class,initiator.getHost());  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Initiator.class,initiatorId,taskId,ResourceOperationTypeEnum.ADD_HOST_INITIATOR);  if (ComputeSystemHelper.isHostInUse(_dbClient,host.getId())) {    computeController.addInitiatorsToExport(eventId,initiator.getHost(),Arrays.asList(initiator.getId()),taskId);  } else {    _dbClient.ready(Initiator.class,initiator.getId(),taskId);  }  return toTask(initiator,taskId,op);}  }
class C{  protected JSONNode(String name,Object value,NodeType type){  super();  m_Name=name;  m_Value=value;  m_NodeType=type;}  }
class C{  private int findClient(String client){  if (m_clients == null)   m_clients=MClient.getAll(getCtx());  for (int i=0; i < m_clients.length; i++) {    if ((client.equalsIgnoreCase(m_clients[i].getValue())))     return m_clients[i].getAD_Client_ID();  }  return 0;}  }
class C{  private static Member.Visibility parseMemberVisibility(String str){switch (str) {case "pub":    return Member.Visibility.PUBLIC;case "pub@":  return Member.Visibility.PUBLIC_INTERNAL;case "prot":return Member.Visibility.PROTECTED;case "prot@":return Member.Visibility.PROTECTED_INTERNAL;case "proj":return Member.Visibility.PROJECT;case "priv":return Member.Visibility.PRIVATE;default :throw new IllegalArgumentException("Unexpected member visibility: '" + str + "'");}}  }
class C{  public boolean hasNext(){  if (!haveShowHasNextWarning) {    Exception whereAreWe=new Exception();    Debug.logWarning(whereAreWe,"For performance reasons do not use the EntityListIterator.hasNext() method, just call next() until it returns null; see JavaDoc comments in the EntityListIterator class for details and an example",module);    haveShowHasNextWarning=true;  }  try {    if (resultSet.isLast() || resultSet.isAfterLast()) {      return false;    } else {      if (!haveMadeValue && !resultSet.isBeforeFirst() && !resultSet.isFirst()) {        return false;      } else {        return true;      }    }  } catch (  SQLException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error while checking to see if this is the last result",e);  }}  }
class C{  public AbstractTransferable(DataFlavor[] flavors){  this.flavors=flavors.clone();}  }
class C{  public static String removeCloneSuffix(String str){  return CloneInheritedMethods.removeMethodCloneSuffix(ClassCloner.removeClassCloneSuffix(str));}  }
class C{  public void testKeyPairGenerator08() throws IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  try {    KeyPairGenerator.getInstance(null,validProvider);    fail("NullPointerException or NoSuchAlgorithmException must be thrown  when algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyPairGenerator.getInstance(invalidValues[i],validProvider);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(algs[i]).concat(" provider: ").concat(validProviderName).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  static void unzipFile(File zipFile,File targetDirectory) throws IOException {  checkNotNull(zipFile);  checkNotNull(targetDirectory);  checkArgument(targetDirectory.isDirectory(),"%s is not a valid directory",targetDirectory.getAbsolutePath());  final ZipFile zipFileObj=new ZipFile(zipFile);  try {    for (    ZipEntry entry : entries(zipFileObj)) {      checkName(entry.getName());      File targetFile=new File(targetDirectory,entry.getName());      if (entry.isDirectory()) {        if (!targetFile.isDirectory() && !targetFile.mkdirs()) {          throw new IOException("Failed to create directory: " + targetFile.getAbsolutePath());        }      } else {        File parentFile=targetFile.getParentFile();        if (!parentFile.isDirectory()) {          if (!parentFile.mkdirs()) {            throw new IOException("Failed to create directory: " + parentFile.getAbsolutePath());          }        }        asByteSource(zipFileObj,entry).copyTo(Files.asByteSink(targetFile));      }    }  }  finally {    zipFileObj.close();  }}  }
class C{  public static void configureTor(boolean enabled){  useTor=enabled;  if (useTor) {    NetCipher.useTor();  } else {    NetCipher.setProxy(null);  }}  }
class C{  public static Sector[] splitBoundingSectors(Globe globe,LatLon center,double radius){  if (globe == null) {    String message=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (center == null) {    String message=Logging.getMessage("nullValue.CenterIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (radius < 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius < 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double halfDeltaLatRadians=radius / globe.getRadiusAt(center);  double minLat=center.getLatitude().radians - halfDeltaLatRadians;  double maxLat=center.getLatitude().radians + halfDeltaLatRadians;  double minLon;  double maxLon;  if (minLat >= Angle.NEG90.radians && maxLat <= Angle.POS90.radians) {    double az;    if (Math.abs(Angle.POS90.radians - halfDeltaLatRadians) > 0.001)     az=Math.acos(Math.tan(halfDeltaLatRadians) * Math.tan(center.latitude.radians)); else     az=Angle.POS90.radians;    LatLon east=LatLon.greatCircleEndPosition(center,az,halfDeltaLatRadians);    LatLon west=LatLon.greatCircleEndPosition(center,-az,halfDeltaLatRadians);    minLon=Math.min(east.longitude.radians,west.longitude.radians);    maxLon=Math.max(east.longitude.radians,west.longitude.radians);  } else {    minLon=Angle.NEG180.radians;    maxLon=Angle.POS180.radians;  }  LatLon ll=new LatLon(Angle.fromRadiansLatitude(minLat),Angle.normalizedLongitude(Angle.fromRadians(minLon)));  LatLon ur=new LatLon(Angle.fromRadiansLatitude(maxLat),Angle.normalizedLongitude(Angle.fromRadians(maxLon)));  Iterable<? extends LatLon> locations=java.util.Arrays.asList(ll,ur);  if (LatLon.locationsCrossDateLine(locations)) {    return splitBoundingSectors(locations);  } else {    Sector s=boundingSector(locations);    return (s != null && !s.equals(Sector.EMPTY_SECTOR)) ? new Sector[]{s} : null;  }}  }
class C{  public boolean isMultiValueConstraint(Class<? extends Annotation> annotationType){  boolean isMultiValueConstraint=false;  final Method method=run(GetMethod.action(annotationType,"value"));  if (method != null) {    Class<?> returnType=method.getReturnType();    if (returnType.isArray() && returnType.getComponentType().isAnnotation()) {      @SuppressWarnings("unchecked") Class<? extends Annotation> componentType=(Class<? extends Annotation>)returnType.getComponentType();      if (isConstraintAnnotation(componentType) || isBuiltinConstraint(componentType)) {        isMultiValueConstraint=true;      } else {        isMultiValueConstraint=false;      }    }  }  return isMultiValueConstraint;}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  ReverseAxesWalker(LocPathIterator locPathIterator,int axis){  super(locPathIterator,axis);}  }
class C{  public void checkLogicalSwitchPortExistence(String id,FutureCallback<Boolean> responseCallback) throws IOException {  checkExistenceAsync(LOGICAL_PORTS_BASE_PATH + "/" + id,responseCallback);}  }
class C{  public List<String> indicesCreated(){  if (previousState == null) {    return Arrays.asList(state.metaData().indices().keys().toArray(String.class));  }  if (!metaDataChanged()) {    return Collections.emptyList();  }  List<String> created=null;  for (  ObjectCursor<String> cursor : state.metaData().indices().keys()) {    String index=cursor.value;    if (!previousState.metaData().hasIndex(index)) {      if (created == null) {        created=new ArrayList<>();      }      created.add(index);    }  }  return created == null ? Collections.<String>emptyList() : created;}  }
class C{  public boolean isLast() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    return this.rowData.isLast();  }}  }
class C{  @Inject public StatusCommandPresenter(GitServiceClient service,AppContext appContext,GitOutputConsoleFactory gitOutputConsoleFactory,ProcessesPanelPresenter processesPanelPresenter,GitLocalizationConstant constant,NotificationManager notificationManager){  this.service=service;  this.appContext=appContext;  this.gitOutputConsoleFactory=gitOutputConsoleFactory;  this.consolesPanelPresenter=processesPanelPresenter;  this.constant=constant;  this.notificationManager=notificationManager;}  }
class C{  private void showPopupMenu(final MouseEvent event){  final JCriteriumTreeNode selectedNode=(JCriteriumTreeNode)TreeHelpers.getNodeAt(this,event.getX(),event.getY());  if (selectedNode != null) {    final JPopupMenu menu=selectedNode.getPopupMenu();    if (menu != null) {      menu.show(this,event.getX(),event.getY());    }  }}  }
class C{  public void close() throws XMLStreamException {  if (_writer != null) {    _writer.close();  }  _writer=null;  _currentEle=null;  _state=0;}  }
class C{  final public char[] toCharArray(){  return CharArrays.copy(array,0,length());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.633 -0500",hash_original_method="F23607C60777A1A36911A6FE06B11E71",hash_generated_method="4341A3BA405D3D7EA980906662C2F7D0") public void removeParameters(){  this.uriParms=new NameValueList();}  }
class C{  public AuthRequest authenticate(List discoveries,String returnToUrl) throws ConsumerException, MessageException {  return authenticate(discoveries,returnToUrl,returnToUrl);}  }
class C{  public TimedCounter(long interval,long accuracy){  this.interval=interval;  this.accuracy=accuracy;}  }
class C{  public T caseN4SetterDeclaration(N4SetterDeclaration object){  return null;}  }
class C{  @Deprecated @Override public boolean commit() throws InstantiationError {  if (mEditor != null) {    return mEditor.commit();  }  throw new InstantiationError("\n ======================================== \nError : " + "Do not call " + tag + "'s `commit()`."+ "\n This method is not supported directly."+ " \n ======================================== \n");}  }
class C{  public void endSession(){  if (fSession != null && fSessionArguments != null)   addArguments(fSession,fSessionArguments);  fSessionArguments=null;  fSession=null;}  }
class C{  public Cave(){  super();}  }
class C{  public static Connection open(DbConnectionConfig dbConConfig) throws Exception {  String cntParam;  String url;  String user;  String pwd;  Connection jdbcConn=null;  cntParam=dbConConfig.getCntParam();  user=dbConConfig.getUser();  pwd=dbConConfig.getPwd();  if (dbConConfig.isCntByDriver()) {    url=dbConConfig.getUrl();    jdbcConn=open(cntParam,url,user,pwd);  } else {    if ((user == null) && (pwd == null))     jdbcConn=open(cntParam); else     jdbcConn=open(cntParam,user,pwd);  }  return jdbcConn;}  }
class C{  public static Object executeOnPrimary(ExecutablePool pool,EventID event,Object callbackArg){  AbstractOp op=new GetEventValueOpImpl(event,callbackArg);  return pool.executeOnPrimary(op);}  }
class C{  public void reset(){  mRotationAngle=0;  mIsScheduled=false;  unscheduleSelf(this);  invalidateSelf();}  }
class C{  public LegendItem(String label){  this(label,Color.black);}  }
class C{  public static void showViewDescriptionDialog(final JFrame parent,final INaviView view){  final CViewCommentDialog dlg=new CViewCommentDialog(parent,"Change view description",view.getName(),view.getConfiguration().getDescription());  dlg.setVisible(true);  if (!dlg.wasCancelled()) {    try {      view.getConfiguration().setName(dlg.getName());      view.getConfiguration().setDescription(dlg.getComment());    } catch (    final Exception e) {      CUtilityFunctions.logException(e);      final String innerMessage="E00114: " + "View description could not be changed";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The view description of view '%s' could not be changed.",view.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The view was not updated and the new view description is lost."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return (mf == null) ? null : mf.getFiles();}  }
class C{  public SearchBuilder<T> by(String name,Object value){  parameters.put(name,value);  return this;}  }
class C{  public Wine runForeground(File executableToRun) throws CancelException {  runForeground(executableToRun,(List<String>)null,null);  return this;}  }
class C{  protected void execute(Runnable evt){  executor.execute(evt);}  }
class C{  public boolean isBelow(IMultiPoint pt){  return pt.getCoordinate(dimension) < coord;}  }
class C{  @Override public String toString(){  return getRoadName() + " " + getNumber();}  }
class C{  public void test_setLjava_lang_ObjectLjava_lang_Object() throws Exception {  TestField x=new TestField();  Field f=null;  double val=0.0;  try {    f=x.getClass().getDeclaredField("doubleField");    f.set(x,new Double(1.0));    val=f.getDouble(x);  } catch (  Exception e) {    fail("Exception during set test : " + e.getMessage());  }  assertEquals("Returned incorrect double field value",1.0,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.set(x,new Double(1.0));    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("doubleFField");    assertFalse(f.isAccessible());    f.set(x,new Double(1.0));    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.set(null,true);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("doubleSField");  f.set(null,new Double(1.0));  val=f.getDouble(x);  assertEquals("Returned incorrect double field value",1.0,val);}  }
class C{  public Coord4D(int x,int y,int z){  xCoord=x;  yCoord=y;  zCoord=z;  dimensionId=0;}  }
class C{  public BytesToNameCanonicalizer makeChild(boolean canonicalize,boolean intern){  return new BytesToNameCanonicalizer(this,intern,_hashSeed,_tableInfo.get());}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "DiamondPlain.gif",BeanVisual.ICON_PATH + "DiamondPlain.gif");}  }
class C{  Batch newBatch(){  return new Batch();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:11.080 -0500",hash_original_method="7F8D11AAE20352F3BAFC0BB3AC43F85C",hash_generated_method="317EE1C1B4352942DA2FC5B4F9A3F5B3") public void rexec(String username,String password,String command) throws IOException {  rexec(username,password,command,false);}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  public boolean isProtected(){  return Modifier.isProtected(flags);}  }
class C{  public List<Provider> providers(){  return userList;}  }
class C{  private void computeLowerAndUpperBoundingBoxIfNotSet(){  if (lowerBoundingBox != null && upperBoundingBox != null) {    return;  }  final int numDimensions=datatypeConfig.getNumDimensions();  final List<GeoSpatialDatatypeFieldConfiguration> fields=datatypeConfig.getFields();  int latIdx=-1;  int lonIdx=-1;  for (int i=0; i < numDimensions; i++) {    final GeoSpatialDatatypeFieldConfiguration field=fields.get(i);switch (field.getServiceMapping()) {case LATITUDE:{        if (latIdx != -1)         throw new AssertionError("Multiple latitude mappings for datatype in query.");        latIdx=i;        break;      }case LONGITUDE:{      if (lonIdx != -1)       throw new AssertionError("Multiple longitude mappings for datatype in query..");      lonIdx=i;      break;    }default :  break;}}if (latIdx != -1 && lonIdx != -1) {switch (searchFunction) {case IN_CIRCLE:{  final CoordinateDD centerPointDD=spatialCircleCenter.asCoordinateDD();  lowerBoundingBox=CoordinateUtility.boundingBoxSouthWest(centerPointDD,spatialCircleRadius,spatialUnit);  upperBoundingBox=CoordinateUtility.boundingBoxNorthEast(centerPointDD,spatialCircleRadius,spatialUnit);  break;}case IN_RECTANGLE:{lowerBoundingBox=spatialRectangleSouthWest.asCoordinateDD();upperBoundingBox=spatialRectangleNorthEast.asCoordinateDD();break;}default :throw new IllegalArgumentException("Search function (geo:search) must be defined.");}}}  }
class C{  public void testPutFieldLength(){  byte[] expectedResult1={1,0,0,1,1};  byte[] expectedResult2={3,0,0,1,-4,57,48};  byte[] expectedResult3={4,0,0,1,-3,78,97,-68};  byte[] expectedResult4={9,0,0,1,-2,-46,2,-106,73,0,0,0,0};  MySQLPacket array=new MySQLPacket(16,(byte)1);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try {    array.putFieldLength(1L);    array.write(output);    compareBytes(expectedResult1,output.toByteArray());    array.reset();    output.reset();    array.putFieldLength(12345L);    array.write(output);    compareBytes(expectedResult2,output.toByteArray());    array.reset();    output.reset();    array.putFieldLength(12345678L);    array.write(output);    compareBytes(expectedResult3,output.toByteArray());    array.reset();    output.reset();    array.putFieldLength(1234567890L);    array.write(output);    compareBytes(expectedResult4,output.toByteArray());  } catch (  IOException e) {    fail("This should not happen!");  }}  }
class C{  public static int toScreenPixels(Resources res,float sp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,sp,res.getDisplayMetrics());}  }
class C{  public DateTime withYearOfEra(int yearOfEra){  return withMillis(getChronology().yearOfEra().set(getMillis(),yearOfEra));}  }
class C{  public <T>JsonArray<T> createListDtoFromJson(String json,Class<T> dtoInterface){  final DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);  final List<JsonElement> list=gson.fromJson(json,listTypeCache.get(JsonElement.class));  final List<T> result=new ArrayList<>(list.size());  for (  JsonElement e : list) {    result.add(dtoProvider.fromJson(e));  }  return new JsonArrayImpl<>(result);}  }
class C{  public void exportToCSV(final File theFile){  FileOutputStream f=null;  try {    f=new FileOutputStream(theFile);  } catch (  Exception e) {    System.err.println("Could not open file stream: " + e.toString());  }  if (f == null) {    return;  }  CSVPrinter thePrinter=new CSVPrinter(f);  thePrinter.println(this.getDoubleStrings());  thePrinter.println();}  }
class C{  public LineConnectionFigure(){}  }
class C{  protected Reader stream2reader(InputStream stream,StringBuffer charsRead) throws IOException {  PushbackInputStream pbstream=new PushbackInputStream(stream);  int b=pbstream.read();switch (b) {case 0x00:case 0xFE:case 0xFF:    pbstream.unread(b);  return new InputStreamReader(pbstream,"UTF-16");case 0xEF:for (int i=0; i < 2; i++) {  pbstream.read();}return new InputStreamReader(pbstream,"UTF-8");case 0x3C:b=pbstream.read();charsRead.append('<');while ((b > 0) && (b != 0x3E)) {charsRead.append((char)b);b=pbstream.read();}if (b > 0) {charsRead.append((char)b);}String encoding=this.getEncoding(charsRead.toString());if (encoding == null) {return new InputStreamReader(pbstream,"UTF-8");}charsRead.setLength(0);try {return new InputStreamReader(pbstream,encoding);} catch (UnsupportedEncodingException e) {return new InputStreamReader(pbstream,"UTF-8");}default :charsRead.append((char)b);return new InputStreamReader(pbstream,"UTF-8");}}  }
class C{  static BOSHMessageEvent createResponseReceivedEvent(final BOSHClient source,final AbstractBody body){  return new BOSHMessageEvent(source,body);}  }
class C{  private void license(File file) throws IOException {  String fileName=file.getAbsolutePath();  boolean isJava=fileName.endsWith(".java");  boolean isJSP=fileName.endsWith(".jsp");  boolean other=!(isJava || isJSP);  BufferedReader in=new BufferedReader(new FileReader(file));  File tmpFile=new File(fileName + ".tmp");  BufferedWriter out=new BufferedWriter(new FileWriter(tmpFile,false));  out.write(COPYRIGHT);  boolean found=false;  String line=null;  int lineNo=0;  while ((line=in.readLine()) != null) {    lineNo++;    if (!found) {      if (line.startsWith("package ") && isJava)       found=true;    }    if (found) {      out.write(line);      out.newLine();    }  }  in.close();  out.close();  if (found) {    File oldFile=new File(fileName + ".old");    if (file.renameTo(oldFile)) {      if (tmpFile.renameTo(new File(fileName))) {        if (oldFile.delete()) {        } else         System.err.println(" - Old File not deleted - " + fileName);      } else       System.err.println(" - New File not renamed - " + fileName);    } else     System.err.println(" - Old File not renamed - " + fileName);  } else {    System.err.println(" - No Copyright - " + fileName);    if (!tmpFile.delete())     System.err.println(" - Temp file not deleted - " + tmpFile.getAbsolutePath());  }}  }
class C{  protected void rehash(final int newN){  final char key[]=this.key;  final char value[]=this.value;  final int mask=newN - 1;  final char newKey[]=new char[newN + 1];  final char newValue[]=new char[newN + 1];  int i=n, pos;  for (int j=realSize(); j-- != 0; ) {    while (((key[--i]) == ((char)0)))     ;    if (!((newKey[pos=(HashCommon.mix((key[i]))) & mask]) == ((char)0)))     while (!((newKey[pos=(pos + 1) & mask]) == ((char)0)))     ;    newKey[pos]=key[i];    newValue[pos]=value[i];  }  newValue[newN]=value[n];  n=newN;  this.mask=mask;  maxFill=maxFill(n,f);  this.key=newKey;  this.value=newValue;}  }
class C{  public static Integer findLimit(Map<String,String> operatorProperties) throws PlanGenException {  String limitStr=getOptionalProperty(LIMIT,operatorProperties);  if (limitStr == null) {    return null;  }  Integer limit=Integer.parseInt(limitStr);  if (limit < 0) {    throw new PlanGenException("Limit must be equal to or greater than 0");  }  return limit;}  }
class C{  @Override protected void wrapUp() throws Exception {  m_error=null;  super.wrapUp();}  }
class C{  private synchronized void kickstartHandshake() throws IOException {switch (connectionState) {case cs_HANDSHAKE:    break;case cs_DATA:  if (!secureRenegotiation && !Handshaker.allowUnsafeRenegotiation) {    throw new SSLHandshakeException("Insecure renegotiation is not allowed");  }if (!secureRenegotiation) {  if (debug != null && Debug.isOn("handshake")) {    System.out.println("Warning: Using insecure renegotiation");  }}initHandshaker();break;case cs_RENEGOTIATE:return;case cs_START:throw new SocketException("handshaking attempted on unconnected socket");default :throw new SocketException("connection is closed");}if (!handshaker.activated()) {if (connectionState == cs_RENEGOTIATE) {handshaker.activate(protocolVersion);} else {handshaker.activate(null);}if (handshaker instanceof ClientHandshaker) {handshaker.kickstart();} else {if (connectionState == cs_HANDSHAKE) {} else {handshaker.kickstart();handshaker.handshakeHash.reset();}}}}  }
class C{  @Override public void handleMouseReleased(ChartCanvas canvas,MouseEvent e){}  }
class C{  public static CancelStatListenerResponse create(DistributionManager dm,InternalDistributedMember recipient,int listenerId){  CancelStatListenerResponse m=new CancelStatListenerResponse();  m.setRecipient(recipient);  GemFireStatSampler sampler=null;  sampler=dm.getSystem().getStatSampler();  if (sampler != null) {    sampler.removeListener(listenerId);  }  return m;}  }
class C{  public void output(List list,OutputStream out) throws IOException {  Writer writer=makeWriter(out);  output(list,writer);}  }
class C{  public void removeHandler(String path){  getDispatchHandler().removeHandler(path);}  }
class C{  public InvalidCipherTextException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static void genLibraryContent(final ProjectEx project,final GenerationOptions genOptions,final Library library,final File baseDir,final CompositeGenerator libraryPath){  genLibraryContent(genOptions,library,OrderRootType.CLASSES,baseDir,libraryPath);}  }
class C{  @Override public ImmutableListMultimap<K,V> build(){  return (ImmutableListMultimap<K,V>)super.build();}  }
class C{  public Set<String> names(){  TreeSet<String> result=new TreeSet<>(String.CASE_INSENSITIVE_ORDER);  for (int i=0, size=size(); i < size; i++) {    result.add(name(i));  }  return Collections.unmodifiableSet(result);}  }
class C{  public boolean loadConfiguration(final String configurationFile){  try {    final InputStream is=FileUtils.loadFileByName(configurationFile);    configuration=(MqttSpyDaemonConfiguration)parser.loadFromInputStream(is);    populateDefaults();    return true;  } catch (  XMLException e) {    logger.error("Cannot process the configuration from input stream",e);  }catch (  IOException e) {    logger.error("Cannot read the configuration from input stream",e);  }  return false;}  }
class C{  Date toDate(Calendar calendar){  return calendar.getTime();}  }
class C{  public TlsRsaPremasterSecretParameterSpec(int clientVersion,int serverVersion){  this.clientVersion=checkVersion(clientVersion);  this.serverVersion=checkVersion(serverVersion);  this.encodedSecret=null;}  }
class C{  protected void onDeleteComplete(int token,Object cookie,int result){}  }
class C{  @Override public ChatEvent parse(String text){  ChatEvent result=null;  if (text.startsWith(BEGINING_MESSAGE) || text.startsWith(BEGINING_MESSAGE,1)) {    RaptorStringTokenizer tok=new RaptorStringTokenizer(text," \n:",true);    tok.nextToken();    tok.nextToken();    String userName=tok.nextToken();    if (userName != null) {      result=new ChatEvent(userName,ChatType.JOURNAL,text);    }  }  return result;}  }
class C{  public void initialize(Context ctx){  mContext=ctx;  mBuckets=new ArrayList<>();  readBucketsFromPrefs();  mHandler=new Handler();  mActiveBucketRefHistory=new ArrayList<>();}  }
class C{  public void close(){  zipFileHolder.close();}  }
class C{  public static int gradientRatio(double ratio){  return (int)StrictMath.rint(ratio * 255);}  }
class C{  public void testStringValReverseSorted() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new SortedDocValuesField("value",new BytesRef("bar")));  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new SortedDocValuesField("value",new BytesRef("foo")));  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.STRING_VAL,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  assertEquals("foo",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("bar",searcher.doc(td.scoreDocs[1].doc).get("value"));  ir.close();  dir.close();}  }
class C{  protected void listExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de listExecuteLogic");  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  List camposDato=descripcionService.getCamposDatoSinTabla();  request.setAttribute(ControlAccesoConstants.LISTA_CAMPOS,camposDato);  ClientInvocation invocation=saveCurrentInvocation(KeysClientsInvocations.CAMPOS_DATO_LISTADO,request);  invocation.setAsReturnPoint(true);  setReturnActionFordward(request,mapping.findForward("list"));}  }
class C{  public void toEpl(StringWriter writer){  writer.write(parameterName);  writer.write(": ");  renderValue(writer,parameterValue);}  }
class C{  private Workflow.Method createWaitOnRebuildMethod(URI vplexURI,URI vplexVolumeURI){  return new Workflow.Method(WAIT_ON_REBUILD_METHOD_NAME,vplexURI,vplexVolumeURI);}  }
class C{  public static RemoveFileDialogFragment newInstance(OCFile file){  RemoveFileDialogFragment frag=new RemoveFileDialogFragment();  Bundle args=new Bundle();  int messageStringId=R.string.confirmation_remove_alert;  int posBtn=R.string.confirmation_remove_remote;  int negBtn=-1;  if (file.isFolder()) {    messageStringId=R.string.confirmation_remove_folder_alert;    posBtn=R.string.confirmation_remove_remote_and_local;    negBtn=R.string.confirmation_remove_local;  } else   if (file.isDown()) {    posBtn=R.string.confirmation_remove_remote_and_local;    negBtn=R.string.confirmation_remove_local;  }  args.putInt(ARG_CONF_RESOURCE_ID,messageStringId);  args.putStringArray(ARG_CONF_ARGUMENTS,new String[]{file.getFileName()});  args.putInt(ARG_POSITIVE_BTN_RES,posBtn);  args.putInt(ARG_NEUTRAL_BTN_RES,R.string.common_no);  args.putInt(ARG_NEGATIVE_BTN_RES,negBtn);  args.putParcelable(ARG_TARGET_FILE,file);  frag.setArguments(args);  return frag;}  }
class C{  public static <A>ObservableTValue<A> fromAnyM(final AnyMValue<A> anyM){  return of(anyM.map(null));}  }
class C{  public Vector3f fma(float a,Vector3fc b){  x+=a * b.x();  y+=a * b.y();  z+=a * b.z();  return this;}  }
class C{  public VNXeCommandJob restoreLunSnap(String snapId){  _logger.info("restoring lun snap:",snapId);  LunSnapRequests req=new LunSnapRequests(_khClient);  return req.restoreLunSnap(snapId,null);}  }
class C{  public AlchemyVision(){  super();}  }
class C{  public void executeAnalysis(final DashboardAnalysis analysis,QueryWriter writer,boolean lazy) throws ComputingException, InterruptedException {  final AnalysisCompute compute=new AnalysisCompute(analysis.getUniverse());  compute.executeAnalysis(analysis,writer,lazy);}  }
class C{  public static void run(AdSenseHost adsensehost,String adClientId,long maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all URL channels for ad client %s\n",adClientId);  System.out.println("=================================================================");  String pageToken=null;  do {    UrlChannels urlChannels=adsensehost.urlchannels().list(adClientId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if ((urlChannels.getItems() != null) && !urlChannels.getItems().isEmpty()) {      for (      UrlChannel channel : urlChannels.getItems()) {        System.out.printf("URL channel with ID \"%s\" and URL pattern \"%s\" was found.\n",channel.getId(),channel.getUrlPattern());      }    } else {      System.out.println("No URL channels found.");    }    pageToken=urlChannels.getNextPageToken();  } while (pageToken != null);  System.out.println();}  }
class C{  protected void appendPayload(String payload){  byte[] payloadarr=payload.getBytes();  int oldpayloadsize=this.payload.length;  byte[] oldpayload=this.payload;  this.payload=new byte[oldpayloadsize + payloadarr.length + 1];  System.arraycopy(oldpayload,0,this.payload,0,oldpayloadsize);  System.arraycopy(payloadarr,0,this.payload,oldpayloadsize,payloadarr.length);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(shortSummary());  if (this.keepTaskList) {    for (    TaskInfo task : taskInfo()) {      sb.append("; [").append(task.getTaskName()).append("] took ").append(task.getTime());      long percent=Math.round((100.0f * task.getTime().millis()) / totalTime().millis());      sb.append(" = ").append(percent).append("%");    }  } else {    sb.append("; no task info kept");  }  return sb.toString();}  }
class C{  public static UserEntry searchLocalUserByScreenName(final String screen_name){  try {    return users.read(screen_name);  } catch (  IOException e) {    Log.getLog().warn(e);    return null;  }}  }
class C{  @DSComment("normal android callback") @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:25.576 -0500",hash_original_method="30915DC6B0C7508CE694D92B8515D200",hash_generated_method="4BBF0EB04B922814511B8C574D43549F") protected View onCreateDialogView(){  if (mDialogLayoutResId == 0) {    return null;  }  LayoutInflater inflater=LayoutInflater.from(mBuilder.getContext());  return inflater.inflate(mDialogLayoutResId,null);}  }
class C{  public boolean hasValidState(){  return (validState != null);}  }
class C{  @Nullable public View popWithAnimation(AnimatorFactory animatorFactory){  checkNotNull(animatorFactory,"animatorFactory == null");  if (!shouldPop())   return null;  stack.pop();  setBelowViewVisibility(View.VISIBLE);  View popped=peek();  startAnimation(animatorFactory,popped,popAnimationListener);  return popped;}  }
class C{  private List<String> extractIntervalRange(FacetMemberInterval interval){  List<String> range=new ArrayList<>();  range.add(interval.getLowerBound());  range.add(interval.getUpperBound());  return range;}  }
class C{  public short acceptNode(int n){  try {    if (getPredicateCount() > 0) {      countProximityPosition(0);      if (!executePredicates(n,m_lpi.getXPathContext()))       return DTMIterator.FILTER_SKIP;    }    return DTMIterator.FILTER_ACCEPT;  } catch (  javax.xml.transform.TransformerException se) {    throw new RuntimeException(se.getMessage());  }}  }
class C{  public String diff_toDelta(LinkedList<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {switch (aDiff.operation) {case INSERT:      try {        text.append("+").append(URLEncoder.encode(aDiff.text,"UTF-8").replace('+',' ')).append("\t");      } catch (      UnsupportedEncodingException e) {        throw new Error("This system does not support UTF-8.",e);      }    break;case DELETE:  text.append("-").append(aDiff.text.length()).append("\t");break;case EQUAL:text.append("=").append(aDiff.text.length()).append("\t");break;}}String delta=text.toString();if (delta.length() != 0) {delta=delta.substring(0,delta.length() - 1);delta=unescapeForEncodeUriCompatability(delta);}return delta;}  }
class C{  private void stopHttpAdaptor(){  if (!this.agentConfig.isHttpEnabled())   return;  try {    this.httpAdaptor.stop();  } catch (  Exception e) {    logger.warn(e.getMessage(),e);  }  try {    MBeanUtil.unregisterMBean(getHttpAdaptorName());    MBeanUtil.unregisterMBean(getXsltProcessorName());  } catch (  MalformedObjectNameException e) {    logger.warn(e.getMessage(),e);  }}  }
class C{  public MultiplicationExpression(final List<MemoryExpressionElement> children){  this.children=children;}  }
class C{  public synchronized void removeYTextLabel(double y,int scale){  mYTextLabels.get(scale).remove(y);}  }
class C{  public Vertex parseCase(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  stream.skipWhitespace();  Vertex equation=network.createInstance(Primitive.CASE);  Vertex variable=parseElement(stream,elements,debug,network);  equation.addRelationship(Primitive.CASE,variable);  String next=stream.nextWord().toLowerCase();  if (next.equals(AS)) {    Vertex as=parseElement(stream,elements,debug,network);    equation.addRelationship(Primitive.AS,as);    next=stream.nextWord().toLowerCase();  }  if (next.equals(TOPIC)) {    Vertex topic=parseElement(stream,elements,debug,network);    equation.addRelationship(Primitive.TOPIC,topic);    next=stream.nextWord().toLowerCase();  }  if (next.equals(THAT)) {    Vertex template=parseElement(stream,elements,debug,network);    equation.addRelationship(Primitive.THAT,template);    next=stream.nextWord().toLowerCase();  }  if (next.equals(GOTO)) {    List<Vertex> thens=new ArrayList<Vertex>();    stream.skipWhitespace();    boolean parseGoto=true;    while (parseGoto) {      thens.add(parseElement(stream,elements,debug,network));      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        parseGoto=false;      }    }    for (    Vertex then : thens) {      equation.addRelationship(Primitive.GOTO,then);    }  } else   if (next.equals(TEMPLATE) || next.equals(ANSWER)) {    Vertex template=parseElement(stream,elements,debug,network);    equation.addRelationship(Primitive.TEMPLATE,template);  } else   if (next.equals(RETURN)) {    equation.addRelationship(Primitive.GOTO,Primitive.RETURN);  } else {    stream.setPosition(stream.getPosition() - next.length());    throw new SelfParseException("expected one of GOTO, TEMPLATE, ANSWER, RETURN, THAT, TOPIC, found: " + next,stream);  }  next=stream.peekWord().toLowerCase();  if (next.equals(FOR)) {    stream.nextWord();    ensureNext(EACH,stream);    equation.addRelationship(Primitive.FOR,parseElement(stream,elements,debug,network));    ensureNext(OF,stream);    equation.addRelationship(Primitive.FOR,parseElement(stream,elements,debug,network));  }  ensureNext(';',stream);  return equation;}  }
class C{  public InteractionTab(DialogueSystem system){  this.system=system;  setLayout(new BorderLayout());  lines=new JTextPane();  lines.setSize(30,50);  lines.setContentType("text/html");  lines.setMargin(new Insets(5,5,5,5));  lines.setEditable(false);  JScrollPane utterancesScrollPane=new JScrollPane(lines);  DefaultCaret caret=(DefaultCaret)lines.getCaret();  caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);  inputContainer=new Container();  inputContainer.setLayout(new BorderLayout());  inputField=new JTextField(60);  inputContainer.add(new JLabel("Input: "),BorderLayout.WEST);  inputContainer.add(inputField,BorderLayout.CENTER);  final JButton helpButton=new JButton("");  helpButton.putClientProperty("JButton.buttonType","help");  final BalloonTip tip=new BalloonTip(helpButton,TIP_TEXT);  tip.setVisible(false);  helpButton.addActionListener(null);  helpButton.setFocusable(false);  inputContainer.add(helpButton,BorderLayout.EAST);  add(inputContainer,BorderLayout.SOUTH);  add(utterancesScrollPane,BorderLayout.CENTER);  inputField.addActionListener(null);  kit=new HTMLEditorKit();  doc=new HTMLDocument();  lines.setEditorKit(kit);  lines.setDocument(doc);  refresh();  if (system.getModule(GUIFrame.class).isSpeechEnabled) {    enableSpeech(true);  }}  }
class C{  @Nullable public static boolean[] readBooleanArray(DataInput in) throws IOException {  int len=in.readInt();  if (len == -1)   return null;  boolean[] res=new boolean[len];  for (int i=0; i < len; i++)   res[i]=in.readBoolean();  return res;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public TextureSquare(GL10 gl,Bitmap textureBitmap){  ByteBuffer vbb=ByteBuffer.allocateDirect(squareCoords.length * 4);  vbb.order(ByteOrder.nativeOrder());  vertexBuffer=vbb.asFloatBuffer();  vertexBuffer.put(squareCoords);  vertexBuffer.position(0);  ByteBuffer tbb=ByteBuffer.allocateDirect(textureCoords.length * 4);  tbb.order(ByteOrder.nativeOrder());  textureBuffer=tbb.asFloatBuffer();  textureBuffer.put(textureCoords);  textureBuffer.position(0);  ByteBuffer dlb=ByteBuffer.allocateDirect(drawOrder.length * 2);  dlb.order(ByteOrder.nativeOrder());  drawListBuffer=dlb.asShortBuffer();  drawListBuffer.put(drawOrder);  drawListBuffer.position(0);  textures=new int[1];  gl.glGenTextures(1,textures,0);  gl.glBindTexture(GL10.GL_TEXTURE_2D,textures[0]);  GLUtils.texImage2D(GL10.GL_TEXTURE_2D,0,textureBitmap,0);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MIN_FILTER,GL10.GL_NEAREST);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MAG_FILTER,GL10.GL_NEAREST);  gl.glBindTexture(GL10.GL_TEXTURE_2D,0);}  }
class C{  public Style(Color fg,Color bg,Font font,boolean underline){  foreground=fg;  background=bg;  this.font=font;  this.underline=underline;  this.fontMetrics=font == null ? null : new JPanel().getFontMetrics(font);}  }
class C{  public EnvironmentSettingsEditor(){  super(false);  field().set(new EnvironmentSettings());  field().addListener(null);}  }
class C{  public Closure<V> memoizeAtLeast(final int protectedCacheSize){  if (protectedCacheSize < 0)   throw new IllegalArgumentException("A non-negative number is required as the protectedCacheSize parameter for memoizeAtLeast.");  return Memoize.buildSoftReferenceMemoizeFunction(protectedCacheSize,new UnlimitedConcurrentCache(),this);}  }
class C{  public static Struct toFunctionValues(Object[] args) throws ExpressionException {  return toFunctionValues(args,0,args.length);}  }
class C{  public void insert(User record) throws SQLException {  sqlMapClient.insert("t_user.ibatorgenerated_insert",record);}  }
class C{  private static String mineErrorMessage(String errorPage){  final int bodystart1=errorPage.indexOf("<body");  final int bodystart2=errorPage.indexOf('>',bodystart1);  errorPage=errorPage.substring(bodystart2 + 1,errorPage.indexOf("</body>",bodystart2));  for (  final String token : new String[]{"\n","\r","<h1>","</h1>","<h2>","</h2>","<h3>","</h3>"})   errorPage=errorPage.replace(token,"");  return errorPage;}  }
class C{  @Override public String nextString(){  _laststring=_values.elementAt(_gen.nextInt());  return _laststring;}  }
class C{  public DLockRemoteToken queryLock(final Object name){  try {    DLockQueryReplyMessage queryReply=null;    while (queryReply == null || queryReply.repliedNotGrantor()) {      checkDestroyed();      LockGrantorId theLockGrantorId=getLockGrantorId();      try {        queryReply=DLockQueryProcessor.query(theLockGrantorId.getLockGrantorMember(),this.serviceName,name,false,this.dm);      } catch (      LockGrantorDestroyedException e) {      } finally {        if (queryReply != null && queryReply.repliedNotGrantor()) {          notLockGrantorId(theLockGrantorId,0,TimeUnit.MILLISECONDS);        }      }    }    return DLockRemoteToken.create(name,queryReply.getLesseeThread(),queryReply.getLeaseId(),queryReply.getLeaseExpireTime());  }  finally {  }}  }
class C{  @Override public void configureZone(StendhalRPZone zone,Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static void log(@Nullable IgniteLogger log,String msg){  log0(log,U.currentTimeMillis()," " + msg);}  }
class C{  public static KeyListener remove(KeyListener l,KeyListener oldl){  return (KeyListener)removeInternal(l,oldl);}  }
class C{  public BigInteger toBigInteger(){  byte[] magnitude=new byte[nWords * 4 + 1];  for (int i=0; i < nWords; i++) {    int w=data[i];    magnitude[magnitude.length - 4 * i - 1]=(byte)w;    magnitude[magnitude.length - 4 * i - 2]=(byte)(w >> 8);    magnitude[magnitude.length - 4 * i - 3]=(byte)(w >> 16);    magnitude[magnitude.length - 4 * i - 4]=(byte)(w >> 24);  }  return new BigInteger(magnitude).shiftLeft(offset * 32);}  }
class C{  private void validateMessage(String expectedType,String type,long returnCode,String service,String payload) throws ReplicatorException {  if (!type.equals(expectedType)) {    throw new ReplicatorException("Server should have returned message of type \"" + Protocol.TYPE_FILTERED + "\", but returned \""+ type+ "\" instead");  } else   if (returnCode != 0) {    throw new ReplicatorException("Server returned a non-zero code (" + returnCode + "), payload: "+ payload);  } else   if (!service.equals(messageGenerator.getService())) {    throw new ReplicatorException("Server returned unexpected service name in the message: received \"" + service + "\", but expected \""+ messageGenerator.getService()+ "\"");  }}  }
class C{  public static void checkFieldNotEmpty(final Map<?,?> value,final String fieldName){  checkField(value != null && !value.isEmpty(),fieldName);}  }
class C{  public void testCase21(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=-1;  int bSign=1;  byte rBytes[][]={{-5,94,-115,-74,-85,84},{-13,20,-74,-57,-27}};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result[]=aNumber.divideAndRemainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result[0].toByteArray();  for (int i=0; i < resBytes.length; i++) {    if (resBytes[i] != rBytes[0][i]) {      fail("Incorrect quotation");    }  }  assertEquals(-1,result[0].signum());  resBytes=result[1].toByteArray();  for (int i=0; i < resBytes.length; i++) {    if (resBytes[i] != rBytes[1][i]) {      fail("Incorrect remainder");    }    assertEquals(-1,result[1].signum());  }}  }
class C{  public void constValueIndex(long value) throws IOException {  constValueIndex('J',pool.addLongInfo(value));}  }
class C{  public static void checkDuplicateRequest(RedisClient redisClient,String uri,Buffer buffer,String ttl,Handler<Boolean> callback){  Integer timeToLive=parseTimeToLive(ttl);  String redisKey=getRedisKey(uri,HashCodeGenerator.createHashCode(uri,buffer.toString()));  handleStorage(redisClient,redisKey,timeToLive,callback);}  }
class C{  @Override public void updateRow() throws SQLException {  try {    debugCodeCall("updateRow");    checkUpdatable();    if (insertRow != null) {      throw DbException.get(ErrorCode.NOT_ON_UPDATABLE_ROW);    }    checkOnValidRow();    if (updateRow != null) {      UpdatableRow row=getUpdatableRow();      Value[] current=new Value[columnCount];      for (int i=0; i < updateRow.length; i++) {        current[i]=get(i + 1);      }      row.updateRow(current,updateRow);      for (int i=0; i < updateRow.length; i++) {        if (updateRow[i] == null) {          updateRow[i]=current[i];        }      }      Value[] patch=row.readRow(updateRow);      patchCurrentRow(patch);      updateRow=null;    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void deleteHost(){  try {    sService.deleteHost(mHostId,mContext.getUserId());  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }}  }
class C{  public static ResultSet query(Connection conn,String sql,int fetchSize,int queryTimeout) throws SQLException {  conn.setAutoCommit(false);  Statement stmt=conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);  stmt.setFetchSize(fetchSize);  stmt.setQueryTimeout(queryTimeout);  return query(stmt,sql);}  }
class C{  void completeTradeInternally(){  trade.completeTradeInternally();}  }
class C{  private void step_4(){  npc.add(ConversationStates.ATTENDING,ConversationPhrases.ABORT_MESSAGES,new OrCondition(new QuestNotStartedCondition(QUEST_SLOT),new QuestCompletedCondition(QUEST_SLOT)),ConversationStates.ATTENDING,"I'm afraid I didn't send you on a #quest yet.",null);  npc.add(ConversationStates.ATTENDING,ConversationPhrases.ABORT_MESSAGES,new NotCondition(new TimePassedCondition(QUEST_SLOT,1,expireDelay)),ConversationStates.ATTENDING,"It hasn't been long since you've started your quest, I won't let you give up so soon.",null);  npc.add(ConversationStates.ATTENDING,ConversationPhrases.ABORT_MESSAGES,new TimePassedCondition(QUEST_SLOT,1,expireDelay),ConversationStates.ATTENDING,null,new DailyQuestAction());}  }
class C{  public AnimationBuilder property(String propertyName,float... values){  for (  View view : views) {    this.animatorList.add(ObjectAnimator.ofFloat(view,propertyName,getValues(values)));  }  return this;}  }
class C{  public void logException(Throwable err){  Log.e(err);}  }
class C{  public FastAdapterDialog<Item> withOnClickListener(FastAdapter.OnClickListener<Item> onClickListener){  this.mFastItemAdapter.withOnClickListener(onClickListener);  return this;}  }
class C{  @Override public void resetOptions(){  super.resetOptions();  setFileExtension(SVMLightLoader.FILE_EXTENSION);}  }
class C{  public void execute(){  Object model=getDataModel();  if (model == null && getSourceGraph() != null) {    model=getSourceGraph();  }  if (model == null) {    throw new RuntimeException("Data source is unspecified. You may need to double click all your data boxes, \n" + "then click Save, and then right click on them and select Propagate Downstream. \n" + "The issue is that we use a seed to simulate from IM's, so your data is not saved to \n"+ "file when you save the session. It can, however, be recreated from the saved seed.");  }  Parameters params=getParams();  double penaltyDiscount=params.getDouble("penaltyDiscount",4);  if (model instanceof Graph) {    GraphScore gesScore=new GraphScore((Graph)model);    IndependenceTest test=new IndTestDSep((Graph)model);    gfci=new TsGFci(test,gesScore);    gfci.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));    gfci.setVerbose(true);  } else {    if (model instanceof DataSet) {      DataSet dataSet=(DataSet)model;      if (dataSet.isContinuous()) {        SemBicScore gesScore=new SemBicScore(new CovarianceMatrixOnTheFly((DataSet)model));        gesScore.setPenaltyDiscount(penaltyDiscount);        System.out.println("Score done");        IndependenceTest test=new IndTestDSep((Graph)model);        gfci=new TsGFci(test,gesScore);        gfci.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));      } else {        throw new IllegalStateException("Data set must either be continuous or discrete.");      }    } else     if (model instanceof ICovarianceMatrix) {      SemBicScore gesScore=new SemBicScore((ICovarianceMatrix)model);      gesScore.setPenaltyDiscount(penaltyDiscount);      gesScore.setPenaltyDiscount(penaltyDiscount);      IndependenceTest test=new IndTestDSep((Graph)model);      gfci=new TsGFci(test,gesScore);      gfci.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));    } else     if (model instanceof DataModelList) {      DataModelList list=(DataModelList)model;      for (      DataModel dataModel : list) {        if (!(dataModel instanceof DataSet || dataModel instanceof ICovarianceMatrix)) {          throw new IllegalArgumentException("Need a combination of all continuous data sets or " + "covariance matrices, or else all discrete data sets, or else a single initialGraph.");        }      }      if (list.size() != 1) {        throw new IllegalArgumentException("FGS takes exactly one data set, covariance matrix, or initialGraph " + "as input. For multiple data sets as input, use IMaGES.");      }      if (allContinuous(list)) {        double penalty=params.getDouble("penaltyDiscount",4);        SemBicScoreImages fgsScore=new SemBicScoreImages(list);        fgsScore.setPenaltyDiscount(penalty);        IndependenceTest test=new IndTestDSep((Graph)model);        gfci=new TsGFci(test,fgsScore);        gfci.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));      } else {        throw new IllegalArgumentException("Data must be either all discrete or all continuous.");      }    } else {      System.out.println("No viable input.");    }  }  gfci.setVerbose(true);  gfci.setFaithfulnessAssumed(params.getBoolean("faithfulnessAssumed",true));  Graph graph=gfci.search();  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (((IKnowledge)getParams().get("knowledge",new Knowledge2())).isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,(IKnowledge)getParams().get("knowledge",new Knowledge2()));  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(graph);}  }
class C{  public void registerTemplate(String className,Class template){  templates.put(className,new InjectionTemplate(template.getName()));}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  public String printISO8601(){  StringBuilder sb=new StringBuilder();  if (_year > 0) {    sb.append((_year / 1000) % 10);    sb.append((_year / 100) % 10);    sb.append((_year / 10) % 10);    sb.append(_year % 10);    sb.append('-');    sb.append(((_month + 1) / 10) % 10);    sb.append((_month + 1) % 10);    sb.append('-');    sb.append(((_dayOfMonth + 1) / 10) % 10);    sb.append((_dayOfMonth + 1) % 10);  }  long time=_timeOfDay / 1000;  long ms=_timeOfDay % 1000;  sb.append('T');  sb.append((time / 36000) % 10);  sb.append((time / 3600) % 10);  sb.append(':');  sb.append((time / 600) % 6);  sb.append((time / 60) % 10);  sb.append(':');  sb.append((time / 10) % 6);  sb.append((time / 1) % 10);  if (ms != 0) {    sb.append('.');    sb.append((ms / 100) % 10);    sb.append((ms / 10) % 10);    sb.append(ms % 10);  }  if (_zoneName == null) {    sb.append("Z");    return sb.toString();  }  long offset=_zoneOffset;  if (offset < 0) {    sb.append("-");    offset=-offset;  } else   sb.append("+");  sb.append((offset / 36000000) % 10);  sb.append((offset / 3600000) % 10);  sb.append(':');  sb.append((offset / 600000) % 6);  sb.append((offset / 60000) % 10);  return sb.toString();}  }
class C{  @Override public synchronized boolean containsKey(final byte[] key){  final blobItem bi=keeperOf(key);  return bi != null;}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now \"resumed\")");}  }
class C{  public void testBug69506() throws Exception {  MysqlXADataSource dataSource=new MysqlXADataSource();  dataSource.setUrl(dbUrl);  XAConnection testXAConn1=dataSource.getXAConnection();  XAConnection testXAConn2=dataSource.getXAConnection();  Xid duplicateXID=new MysqlXid("1".getBytes(),"1".getBytes(),1);  testXAConn1.getXAResource().start(duplicateXID,0);  try {    testXAConn2.getXAResource().start(duplicateXID,0);    fail("XAException was expected.");  } catch (  XAException e) {    assertEquals("Wrong error code retured for duplicated XID.",XAException.XAER_DUPID,e.errorCode);  }}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  float halfShapeWidth=SHAPE_WIDTH / 2;  canvas.drawRect(x,y - halfShapeWidth,x + SHAPE_WIDTH,y + halfShapeWidth,paint);}  }
class C{  public ProtocolException(String message){  super(message);}  }
class C{  public Iterator<BasicBlock> blockIterator(){  return vertexIterator();}  }
class C{  public String toString(){  return uri.toString();}  }
class C{  @Override public boolean isAuthorizationStale(String header){  return false;}  }
class C{  public static int sizeofVarInt(int val){  assert val >= 0;  if (val < (1 << 7)) {    return 1;  } else   if (val < (1 << 14)) {    return 2;  } else   if (val < (1 << 21)) {    return 3;  } else   if (val < (1 << 28)) {    return 4;  }  return 5;}  }
class C{  public CostEstimate repeat(long count){  return new CostEstimate(rowCount * count,cost * count);}  }
class C{  public static boolean occlusionTest(IMultipart part,Predicate<IMultipart> ignored,IMultipart... others){  for (  IMultipart other : others)   if ((ignored == null || !ignored.apply(other)) && !occlusionTest(part,other))   return false;  return true;}  }
class C{  protected void handleRequestActionStatus(SolrQueryRequest req,SolrQueryResponse rsp){  SolrParams params=req.getParams();  String requestId=params.get(CoreAdminParams.REQUESTID);  log.info("Checking request status for : " + requestId);  if (mapContainsTask(RUNNING,requestId)) {    rsp.add(RESPONSE_STATUS,RUNNING);  } else   if (mapContainsTask(COMPLETED,requestId)) {    rsp.add(RESPONSE_STATUS,COMPLETED);    rsp.add(RESPONSE,getMap(COMPLETED).get(requestId).getRspObject());  } else   if (mapContainsTask(FAILED,requestId)) {    rsp.add(RESPONSE_STATUS,FAILED);    rsp.add(RESPONSE,getMap(FAILED).get(requestId).getRspObject());  } else {    rsp.add(RESPONSE_STATUS,"notfound");    rsp.add(RESPONSE_MESSAGE,"No task found in running, completed or failed tasks");  }}  }
class C{  public static void main(final String... args) throws IOException {  new FtCli(new TkFixed("works fine!"),args).start(Exit.NEVER);}  }
class C{  protected void errorMessage(String msg) throws IOException {  String str=msg + ", read " + m_Tokenizer.toString();  if (m_Lines > 0) {    int line=Integer.parseInt(str.replaceAll(".* line ",""));    str=str.replaceAll(" line .*"," line " + (m_Lines + line - 1));  }  throw new IOException(str);}  }
class C{  public static List<String> activeTranslations(){  Switchboard sb=Switchboard.getSwitchboard();  File localePath;  if (sb != null)   localePath=sb.getDataPath("locale.translated_html","DATA/LOCALE/htroot"); else   localePath=new File("DATA/LOCALE/htroot");  List<String> dirlist=new ArrayList<String>();  File[] list=localePath.listFiles();  for (  File f : list) {    if (f.isDirectory())     dirlist.add(f.getName());  }  return dirlist;}  }
class C{  static String[] appendToStringArray(String[] array,String str){  String[] result=new String[array.length];  for (int i=0; i < result.length; i++) {    result[i]=array[i];  }  result[result.length - 1]=array[result.length - 1] + str;  return result;}  }
class C{  public static Properties loadFromResource(Class clazz,String resName){  URL resUrl=clazz.getResource(resName);  if (resUrl == null) {    log.debug("resource not available! resName: " + resName);    return null;  }  InputStream fis=null;  try {    fis=resUrl.openStream();    Properties props=new Properties();    props.load(fis);    return props;  } catch (  Exception e) {    if (log.isDebugEnabled()) {      log.error("erron on load resource, url:[" + resUrl + "], msg:"+ e);    }  } finally {    CloseUtil.close(fis);  }  return null;}  }
class C{  public InlineQueryResultArticle.InlineQueryResultArticleBuilder hideUrl(boolean hideUrl){  this.hide_url=hideUrl;  return this;}  }
class C{  public void visitLetExpr(LetExpr that){  for (  JCStatement stmt : that.stats) {    if (!(stmt instanceof JCVariableDecl)) {      continue;    }    JCVariableDecl varDecl=(JCVariableDecl)stmt;    visitVarDef(varDecl);    if (env.info.staticLevel > 0) {      varDecl.sym.flags_field|=Flags.STATIC;    }  }}  }
class C{  private static void assertElementsEqual(final HLL hllA,final HLL hllB){  final BitVector bitVectorA=hllA.probabilisticStorage;  final BitVector bitVectorB=hllB.probabilisticStorage;  final LongIterator iterA=bitVectorA.registerIterator();  final LongIterator iterB=bitVectorB.registerIterator();  for (; iterA.hasNext() && iterB.hasNext(); ) {    assertEquals(iterA.next(),iterB.next());  }  assertFalse(iterA.hasNext());  assertFalse(iterB.hasNext());}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 3) {    System.out.println("Usage: Java Exercise_12_16 dir oldString newString");    System.exit(1);  }  File dir=new File(args[0]);  if (!dir.isDirectory()) {    System.out.println("Directory " + args[0] + " does not exist");    System.exit(2);  }  File[] files=dir.listFiles();  for (  File e : files) {    replaceText(e,args);  }}  }
class C{  public void validate(){  int newSize=0;  DoubleNode<E> p=head;  DoubleNode<E> check=head;  while (p != null) {    p=p.next;    newSize++;    if (check != null) {      check=check.next;      if (check != null) {        check=check.next;      }    }    if (check != null && check == p) {      throw new IllegalStateException("Double Linked List has circular reference.");    }  }  size=newSize;}  }
class C{  @SuppressWarnings("unchecked") private static <T extends HasJavadoc<?>>void createJavadoc(T model){  final Javadoc doc=requireNonNull(model).getJavadoc().orElse(Javadoc.of(DEFAULT_TEXT));  model.set(doc);  if (model instanceof HasGenerics) {    ((HasGenerics<?>)model).getGenerics().forEach(null);  }  if (model instanceof ClassOrInterface) {    doc.add(AUTHOR.setValue(DEFAULT_NAME));  } else {    if (model instanceof HasFields) {      ((HasFields<?>)model).getFields().forEach(null);    }  }  if (model instanceof Method) {    if (((Method)model).getType() != void.class) {      addTag(doc,RETURN);    }  }  if (model instanceof HasConstructors) {    ((HasConstructors<?>)model).getConstructors().forEach(null);  }  if (model instanceof HasMethods) {    ((HasMethods<?>)model).getMethods().forEach(null);  }  if (model instanceof HasClasses) {    ((HasClasses<?>)model).getClasses().forEach(null);  }}  }
class C{  public static <E>WorkQueueProcessor<E> share(String name,int bufferSize){  return share(name,bufferSize,null,true);}  }
class C{  public static void info(String message){  info(InformationType.INFO_USER,message);}  }
class C{  public static String fromIPv4AddressCollection(Collection<Integer> ipAddresses){  if (ipAddresses == null)   return "null";  StringBuffer sb=new StringBuffer();  sb.append("[");  for (  Integer ip : ipAddresses) {    sb.append(fromIPv4Address(ip));    sb.append(",");  }  sb.replace(sb.length() - 1,sb.length(),"]");  return sb.toString();}  }
class C{  public static void init(){}  }
class C{  public Object clone() throws CloneNotSupportedException {  if (this instanceof Cloneable) {    return super.clone();  } else {    throw new CloneNotSupportedException();  }}  }
class C{  @POST @Path("/{id}/deactivate") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response deleteComputeImageServer(@PathParam("id") URI id){  log.info("Delete computeImageServer id {} ",id);  ArgValidator.checkFieldUriType(id,ComputeImageServer.class,"id");  ComputeImageServer imageServer=_dbClient.queryObject(ComputeImageServer.class,id);  ArgValidator.checkEntityNotNull(imageServer,id,isIdEmbeddedInURL(id));  checkActiveJobsForImageServer(id);  List<URI> imageServerURIList=_dbClient.queryByType(ComputeImageServer.class,true);  ArrayList<URI> tempList=Lists.newArrayList(imageServerURIList.iterator());  if (tempList.size() > 1) {    removeImageServerFromComputeSystem(id);  } else   if (tempList.size() == 1) {    boolean hasValidImages=false;    List<URI> imageURIList=_dbClient.queryByType(ComputeImage.class,true);    Iterator<ComputeImage> imageItr=_dbClient.queryIterativeObjects(ComputeImage.class,imageURIList);    while (imageItr.hasNext()) {      ComputeImage computeImage=(ComputeImage)imageItr.next();      if (ComputeImageStatus.AVAILABLE.name().equals(computeImage.getComputeImageStatus())) {        hasValidImages=true;        break;      }    }    if (hasValidImages) {      throw APIException.badRequests.cannotDeleteImageServer();    } else {      removeImageServerFromComputeSystem(id);    }  }  _dbClient.markForDeletion(imageServer);  auditOp(OperationTypeEnum.DELETE_COMPUTE_IMAGESERVER,true,null,imageServer.getId().toString(),imageServer.getImageServerIp(),imageServer.getImageServerUser());  return Response.ok().build();}  }
class C{  public void applyDueChart(){  PieChart chart=(PieChart)mItemView.findViewById(R.id.statisticsChart);  mStatisticsLogic.fillChart(chart,StatisticType.TYPE_DUE);}  }
class C{  public static void sort(int[] a){  doSort(a,0,a.length - 1);}  }
class C{  public ByteSendPacket send(byte[] bytes,SendListener listener){  if (bytes == null)   throw new NullPointerException("Send bytes can't be null.");  ByteSendPacket entity=new ByteSendPacket(bytes,listener);  send(entity);  return entity;}  }
class C{  public static String xmlStartDoc(){  return "<?xml version=\"1.0\"?>\n";}  }
class C{  public ToStringBuilder append(short[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public int hashCode(){  if (myhash == -1) {    myhash=17;    if (name != null) {      myhash=37 * myhash + name.hashCode();    }    if (minimum != MIN_DEFAULT) {      myhash=37 * myhash + minimum;    }    if (maximum != -1) {      myhash=37 * myhash + maximum;    }  }  return myhash;}  }
class C{  public void initialise(int k,double epsilon) throws Exception {  this.epsilon=epsilon;  super.initialise(k);}  }
class C{  public Transaction(long transactionId,UserCredentials userCredentials,TransactionManager transactionManager){  checkArgument(!isNegative(transactionId),"transactionId should not be negative.");  this.transactionId=transactionId;  this.userCredentials=userCredentials;  this.transactionManager=transactionManager;}  }
class C{  public void removed(java.awt.Container container){  PlugIn pi=getPlugIn();  if (pi != null) {    pi.removed();  }}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  private void verifyPoolNoInUseInVarrays(StoragePool storagePool){  _log.debug("Checking virtual array changes allowed for pool {}.",storagePool.getNativeGuid());  List<Volume> volumes=CustomQueryUtility.queryActiveResourcesByRelation(_dbClient,storagePool.getId(),Volume.class,"pool");  for (  Volume volume : volumes) {    if (!storagePool.getTaggedVirtualArrays().contains(volume.getVirtualArray().toString())) {      _log.debug("The pool is in use by volume {} in varray {} which will no longer in the pool's tagged varray",volume.getLabel(),volume.getVirtualArray().toString());      throw APIException.badRequests.cannotChangePoolVarraysVolumeExists(storagePool.getNativeGuid(),volume.getVirtualArray().toString(),volume.getLabel());    }  }}  }
class C{  public ScaleCasioPD1(String sPortPrinter){  m_sPortScale=sPortPrinter;  m_out=null;  m_in=null;  m_iStatusScale=SCALE_READY;  m_dWeightBuffer=0.0;  m_dWeightDecimals=1.0;}  }
class C{  public DoubleMapperBuilder boost(Float boost){  this.boost=boost;  return this;}  }
class C{  protected OMNode createNextOMElement(){  OMNode newElement=null;  if (elementLevel == 3 && customBuilderForPayload != null) {    OMNode parent=lastNode;    if (parent != null && parent.isComplete()) {      parent=(OMNode)lastNode.getParent();    }    if (parent instanceof SOAPBody) {      newElement=createWithCustomBuilder(customBuilderForPayload,soapFactory);    }  }  if (newElement == null && customBuilders != null && elementLevel <= maxDepthForCustomBuilders) {    String namespace=parser.getNamespaceURI();    String localPart=parser.getLocalName();    CustomBuilder customBuilder=getCustomBuilder(namespace,localPart);    if (customBuilder != null) {      newElement=createWithCustomBuilder(customBuilder,soapFactory);    }  }  if (newElement == null) {    newElement=createOMElement();  } else {    elementLevel--;  }  return newElement;}  }
class C{  private void createMapping(final List<MapObjectType> mapObjectTypeList){  for (  final EntityType entityType : exportedEntityTypes) {    if (entityType != null) {      final MapObjectType mapObjectType=new MapObjectType();      mapObjectType.setIntId(entityType.getId());      mapObjectType.setExtId(entityType.getId());      final List<MapAttributeType> mapAttributeTypes=mapObjectType.getMapAttributeType();      for (      final PropertyType propertyType : entityType.getAllPropertyTypes()) {        final MapAttributeType mapAttributeType=new MapAttributeType();        mapAttributeType.setExtId(propertyType.getId());        mapAttributeType.setIntId(propertyType.getId());        mapAttributeTypes.add(mapAttributeType);      }      mapObjectTypeList.add(mapObjectType);    }  }  for (  final String typeId : exportedTypes) {    final MapObjectType mapObjectType=new MapObjectType();    mapObjectType.setIntId(typeId);    mapObjectType.setExtId(typeId);    mapObjectTypeList.add(mapObjectType);  }}  }
class C{  private static void oddParity(byte[] bytes){  for (int i=0; i < bytes.length; i++) {    byte b=bytes[i];    boolean needsParity=(((b >>> 7) ^ (b >>> 6) ^ (b >>> 5)^ (b >>> 4)^ (b >>> 3)^ (b >>> 2)^ (b >>> 1)) & 0x01) == 0;    if (needsParity) {      bytes[i]|=(byte)0x01;    } else {      bytes[i]&=(byte)0xfe;    }  }}  }
class C{  public Cell processCellLine(Cell current,ArrayList v) throws NumberFormatException {  if (v == null)   return current;  if (v.size() == 0)   return current;  String title=(String)v.get(0);  if (title.equals("Cell")) {    current=fetchCell((String)v.get(2));    if (num_processed_cells % 100 == 0)     System.out.println((num_processed_cells + 1) + ": " + current.official_name);    num_processed_cells++;  } else   if (current == null)   return current; else {    if (title.equals("Parent")) {      current.parent=fetchCell((String)v.get(1));      if (current.parent.num_children >= 2) {        Cell tmp[]=new Cell[current.parent.num_children + 1];        System.arraycopy(current.parent.daughters,0,tmp,0,current.parent.num_children);        current.parent.daughters=tmp;        System.out.print(current.parent.official_name + " has more than 2 children: ");        for (int zz=0; zz < current.parent.num_children; zz++)         System.out.print(current.parent.daughters[zz].official_name + ", ");        System.out.println("and " + current.official_name);      }      current.parent.daughters[current.parent.num_children++]=current;    } else     if (title.equals("Daughter")) {    } else     if (title.equals("Lineage_name")) {      current.lineage_name=(String)v.get(1);    } else     if (title.equals("Embryo_division_time")) {      current.embryo_division_time=Double.valueOf((String)v.get(1)).doubleValue();    } else     if (title.equals("Reconstruction")) {      if (v.get(2).equals("Birth")) {        current.time_born=Double.valueOf((String)v.get(3)).doubleValue();      } else       if (v.get(2).equals("Timepoint")) {        current.pushLocation(Double.valueOf((String)v.get(5)).doubleValue(),Double.valueOf((String)v.get(6)).doubleValue(),Double.valueOf((String)v.get(7)).doubleValue(),Double.valueOf((String)v.get(3)).doubleValue());      }    } else     if (title.equals("Neurodata")) {      if (v.get(3).equals("N2U")) {        if (v.get(2).equals("Send") || v.get(2).equals("Send_joint")) {          Synapse s=new Synapse();          Cell to=fetchCell((String)v.get(1));          s.to=to;          s.from=current;          s.type=Synapse.type_chemical;          s.number=Integer.valueOf((String)v.get(4)).intValue();          current.synapses.add(s);          to.synapses.add(s);        } else         if (v.get(2).equals("Gap_junction")) {          Synapse s=new Synapse();          Cell to=fetchCell((String)v.get(1));          s.to=to;          s.from=current;          s.type=Synapse.type_gap;          s.number=Integer.valueOf((String)v.get(4)).intValue();          current.synapses.add(s);          to.synapses.add(s);        }      }    } else     if (title.equals("Equivalence_origin")) {      Cell equiv=fetchCell((String)v.get(1));      current.equivalence_origin[current.num_equivalence_origin++]=equiv;      equiv.equivalence_fate[equiv.num_equivalence_fate++]=current;    } else     if (title.equals("Equivalence_fate")) {    } else     if (title.equals("Cell_group")) {      current.cellGroup=fetchGroup((String)v.get(1));    } else     if (title.equals("Expr_pattern")) {      current.expressionPattern=fetchPattern((String)v.get(1));    } else     if (title.equals("Fate")) {      current.fate=fetchFate((String)v.get(1));    } else     if (title.equals("Remark")) {      if (current.remark.equals(""))       current.remark=(String)(v.get(1)); else       current.remark=current.remark + "; " + (String)(v.get(1));    } else {    }  }  return current;}  }
class C{  private static boolean isStranded(final Synapse synapse,final ArrayList<?> allItems){  ArrayList<Neuron> check=new ArrayList<Neuron>();  for (  Object object : allItems) {    if (object instanceof Neuron) {      check.add((Neuron)object);    } else     if (object instanceof Network) {      check.addAll(((Network)object).getFlatNeuronList());    }  }  if (check.contains(synapse.getSource()) && (check.contains(synapse.getTarget()))) {    return false;  }  return true;}  }
class C{  public static void main(String[] args) throws Throwable {  NotYetValidCertTest test=new NotYetValidCertTest();  test.start();}  }
class C{  private boolean checkValid(final Set<RelationConstraint> rcs,final Relation relation){  return rcs.stream().anyMatch(null);}  }
class C{  public void markFailed(){  failedMarks.incrementAndGet();}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.147 -0500",hash_original_method="8363F88EAB5D9C5F21C7C4CB08C10AC9",hash_generated_method="5719BE7E38A277181F3B9B0DE10DC1C5") private TimSort(T[] a,Comparator<? super T> c){  this.a=a;  this.c=c;  int len=a.length;  @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public Map<String,String> retrieveOAuthParams(){  String consumer=sharedPreferences.getString(application.getString(R.string.shared_prefs_consumer),null);  String consumerSecret=sharedPreferences.getString(application.getString(R.string.shared_prefs_consumer_secret),null);  String token=sharedPreferences.getString(application.getString(R.string.shared_prefs_token),null);  String token_secret=sharedPreferences.getString(application.getString(R.string.shared_prefs_token_secret),null);  if (consumer != null && consumerSecret != null && token != null && token_secret != null) {    return new MapParams<String,String>().put(AuthenticationRequestInterceptor.CONSUMER_PARAM,consumer).put(AuthenticationRequestInterceptor.CONSUMER_SECRET_PARAM,consumerSecret).put(AuthenticationRequestInterceptor.TOKEN_PARAM,token).put(AuthenticationRequestInterceptor.TOKEN_SECRET_PARAM,token_secret).toMap();  }  return null;}  }
class C{  @Override public void buildClassifier(Instances insts) throws Exception {  if (!m_checksTurnedOff) {    getCapabilities().testWithFail(insts);    insts=new Instances(insts);    insts.deleteWithMissingClass();    m_Missing=new ReplaceMissingValues();    m_Missing.setInputFormat(insts);    insts=Filter.useFilter(insts,m_Missing);  } else {    m_Missing=null;  }  if (getCapabilities().handles(Capability.NUMERIC_ATTRIBUTES)) {    boolean onlyNumeric=true;    if (!m_checksTurnedOff) {      for (int i=0; i < insts.numAttributes(); i++) {        if (i != insts.classIndex()) {          if (!insts.attribute(i).isNumeric()) {            onlyNumeric=false;            break;          }        }      }    }    if (!onlyNumeric) {      m_NominalToBinary=new NominalToBinary();      m_NominalToBinary.setInputFormat(insts);      insts=Filter.useFilter(insts,m_NominalToBinary);    } else {      m_NominalToBinary=null;    }  } else {    m_NominalToBinary=null;  }  if (m_filterType == FILTER_STANDARDIZE) {    m_Filter=new Standardize();    ((Standardize)m_Filter).setIgnoreClass(true);    m_Filter.setInputFormat(insts);    insts=Filter.useFilter(insts,m_Filter);  } else   if (m_filterType == FILTER_NORMALIZE) {    m_Filter=new Normalize();    ((Normalize)m_Filter).setIgnoreClass(true);    m_Filter.setInputFormat(insts);    insts=Filter.useFilter(insts,m_Filter);  } else {    m_Filter=null;  }  m_NumTrain=insts.numInstances();  if (m_Filter != null) {    Instance witness=(Instance)insts.instance(0).copy();    witness.setValue(insts.classIndex(),0);    m_Filter.input(witness);    m_Filter.batchFinished();    Instance res=m_Filter.output();    m_Blin=res.value(insts.classIndex());    witness.setValue(insts.classIndex(),1);    m_Filter.input(witness);    m_Filter.batchFinished();    res=m_Filter.output();    m_Alin=res.value(insts.classIndex()) - m_Blin;  } else {    m_Alin=1.0;    m_Blin=0.0;  }  try {    CachedKernel cachedKernel=(CachedKernel)m_kernel;    cachedKernel.setCacheSize(0);  } catch (  Exception e) {  }  m_kernel.buildKernel(insts);  double sum=0.0;  for (int i=0; i < insts.numInstances(); i++) {    sum+=insts.instance(i).classValue();  }  m_avg_target=sum / insts.numInstances();  m_deltaSquared=m_delta * m_delta;  int n=insts.numInstances();  m_L=new double[n][];  double kv=0;  for (int i=0; i < n; i++) {    m_L[i]=new double[i + 1];    for (int j=0; j < i; j++) {      kv=m_kernel.eval(i,j,insts.instance(i));      m_L[i][j]=kv;    }    kv=m_kernel.eval(i,i,insts.instance(i));    m_L[i][i]=kv + m_deltaSquared;  }  if (m_kernel instanceof CachedKernel) {    m_kernel=Kernel.makeCopy(m_kernel);    ((CachedKernel)m_kernel).setCacheSize(-1);    m_kernel.buildKernel(insts);  }  double[] tmprow=new double[n];  double tmp2=0, tmp=0;  for (int i=0; i < n; i++) {    tmp=-m_L[i][i];    m_L[i][i]=1.0 / tmp;    for (int j=0; j < n; j++) {      if (j != i) {        if (j < i) {          tmprow[j]=m_L[i][j];          m_L[i][j]/=tmp;          tmp2=m_L[i][j];          m_L[j][j]+=tmp2 * tmp2 * tmp;        } else         if (j > i) {          tmprow[j]=m_L[j][i];          m_L[j][i]/=tmp;          tmp2=m_L[j][i];          m_L[j][j]+=tmp2 * tmp2 * tmp;        }      }    }    for (int j=0; j < n; j++) {      if (j != i) {        if (i < j) {          for (int k=0; k < i; k++) {            m_L[j][k]+=tmprow[j] * m_L[i][k];          }        } else {          for (int k=0; k < j; k++) {            m_L[j][k]+=tmprow[j] * m_L[i][k];          }        }        for (int k=i + 1; k < j; k++) {          m_L[j][k]+=tmprow[j] * m_L[k][i];        }      }    }  }  m_t=new Matrix(insts.numInstances(),1);  double[] tt=new double[n];  for (int i=0; i < n; i++) {    tt[i]=insts.instance(i).classValue() - m_avg_target;  }  for (int i=0; i < n; i++) {    double s=0;    for (int k=0; k < i; k++) {      s-=m_L[i][k] * tt[k];    }    for (int k=i; k < n; k++) {      s-=m_L[k][i] * tt[k];    }    m_t.set(i,0,s);  }}  }
class C{  public XAtomList subset(int mask,Map<Integer,XAtom> mapping){  XAtomList res=new XAtomList();  Iterator<Integer> iter=mapping.keySet().iterator();  while (iter.hasNext()) {    Integer bits=iter.next();    if ((mask & bits.intValue()) == bits.intValue()) {      XAtom atom=mapping.get(bits);      if (contains(atom)) {        res.add(atom);      }    }  }  return res;}  }
class C{  public AtomicReferenceArray(E[] array){  this.array=Arrays.copyOf(array,array.length,Object[].class);}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public ObjectAlreadyExistsException(String msg){  super(msg);}  }
class C{  public XMLSignature(Document doc,String baseURI,String signatureMethodURI) throws XMLSecurityException {  this(doc,baseURI,signatureMethodURI,0,Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS);}  }
class C{  public FDBAdapterException(FDBException ex){  this(ErrorCode.FDB_ERROR,ex);}  }
class C{  public Main(OutputStream out,String program){  this.out=out instanceof PrintStream ? (PrintStream)out : new PrintStream(out);  this.program=program;}  }
class C{  boolean isScratch(Register r,int n){  ArrayList<Interval> v=map.get(r);  if (v == null)   return false;  for (  final Interval interval : v) {    if (interval.contains(n))     return true;  }  return false;}  }
class C{  public static float roundToNextSignificant(double number){  final float d=(float)Math.ceil((float)Math.log10(number < 0 ? -number : number));  final int pw=1 - (int)d;  final float magnitude=(float)Math.pow(10,pw);  final long shifted=Math.round(number * magnitude);  return shifted / magnitude;}  }
class C{  private void writeAttr(String name,String val) throws IOException {  writeAttr(name,val,true);}  }
class C{  public Container removeChild(@NonNull DisplayObject displayObject){  displayObject.disable();  mDisplayList.remove(displayObject);  return this;}  }
class C{  public static boolean isValid(@Nullable EncodedImage encodedImage){  return encodedImage != null && encodedImage.isValid();}  }
class C{  private void initialisePxDimensions(){  unselectedDiameterPx=DimensionHelper.dpToPx(TestDotIndicator.this,UNSELECTED_DIAMETER_DP);  selectedDiameterPx=DimensionHelper.dpToPx(TestDotIndicator.this,SELECTED_DIAMETER_DP);  spacingPx=DimensionHelper.dpToPx(TestDotIndicator.this,SPACING_BETWEEN_DOTS_DP);}  }
class C{  public void mean2(){  if (someField == 0) {    targetField=1;  } else {    if (someOtherField % 13 == 0) {      targetField=2;    } else {      if (yetAnotherField != someField + someOtherField) {        targetField=3;      }    }  }  if (targetField == 0) {    someField=3;  }}  }
class C{  public ObjectFactory(){}  }
class C{  @Override void animateValue(float fraction){  super.animateValue(fraction);  int numValues=mValues.length;  for (int i=0; i < numValues; ++i) {    mValues[i].setAnimatedValue(mTarget);  }}  }
class C{  protected XMouseDragGestureRecognizer(DragSource ds,Component c,int act){  this(ds,c,act,null);}  }
class C{  public void clear(){  queue.clear(true);  map.clear();  removeClearedEntries();}  }
class C{  public void addUserDefinedField(UserDefinedField userDefinedField){  getUserDefinedFields().add(userDefinedField);}  }
class C{  public final LC maxWidth(String width){  setWidth(LayoutUtil.derive(getWidth(),null,null,ConstraintParser.parseUnitValue(width,true)));  return this;}  }
class C{  public boolean isMoveAction(ActionType at){  return ((at == ActionType.MOVE) || (at == ActionType.REPLICATE) || (at == ActionType.ATTACK));}  }
class C{  public void countStaticInitializer(ClassSymbol clazz){  staticInitializerCounts.put(clazz,(staticInitializerCounts.containsKey(clazz) ? staticInitializerCounts.get(clazz) : 0) + 1);}  }
class C{  @Override public void restoreGroupSnapshots(StorageSystem storage,URI volume,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    BlockSnapshot snapshotObj=_dbClient.queryObject(BlockSnapshot.class,snapshot);    String snapshotGroupName=snapshotObj.getReplicationGroupInstance();    CIMObjectPath groupSynchronized=_cimPath.getGroupSynchronizedPath(storage,snapshotGroupName);    if (groupSynchronized != null) {      _helper.callModifyReplica(storage,_helper.getRestoreFromSnapshotInputArguments(groupSynchronized));      taskCompleter.ready(_dbClient);    } else {      _log.error("No GroupSynchronized object found for " + snapshotGroupName);      ServiceError error=DeviceControllerErrors.smis.methodFailed("restoreGroupSnapshots","No GroupSynchronized object found");      taskCompleter.error(_dbClient,error);    }  } catch (  Exception e) {    String message=String.format("Generic exception when trying to restoring snapshots from consistency group on array %s",storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("restoreGroupSnapshots",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  protected void putChar(char ch,boolean scan){  sbuf=ArrayUtils.ensureCapacity(sbuf,sp);  sbuf[sp++]=ch;  if (scan)   scanChar();}  }
class C{  public static void main(String[] args){  runCheck(new CheckClassifier(),args);}  }
class C{  private void addSeed(SiteNode node){  try {    if (!node.isRoot() && node.getHistoryReference() != null) {      HttpMessage msg=node.getHistoryReference().getHttpMessage();      if (!msg.getResponseHeader().isImage()) {        spider.addSeed(msg);      }    }  } catch (  Exception e) {    log.error("Error while adding seed for Spider scan: " + e.getMessage(),e);  }}  }
class C{  private void validateName(@Nullable String name) throws IgniteSpiException {  if (name == null)   return;  if (name.isEmpty())   throw new IgniteSpiException("Space name cannot be empty: " + name); else   if (DFLT_SPACE_NAME.equalsIgnoreCase(name))   throw new IgniteSpiException("Space name is reserved for default space: " + name); else   if (name.contains("/") || name.contains("\\"))   throw new IgniteSpiException("Space name contains invalid characters: " + name);}  }
class C{  static String mkUri(String scheme,String authority){  return scheme + "://" + authority+ "/";}  }
class C{  public MutableInt(){}  }
class C{  public List<GroupbyKeyValue> groupbyKeyValues(){  List<GroupbyKeyValue> results=new ArrayList<GroupbyKeyValue>();  for (  Map.Entry<GroupbyKey,List<Function>> entry : this.group2FunctionMap.entrySet()) {    GroupbyValue value=new GroupbyValue();    for (    Function f : entry.getValue()) {      value.add(new DoubleWritable(f.result()));      value.addMeta(f.count());    }    results.add(new GroupbyKeyValue(entry.getKey(),value));  }  return results;}  }
class C{  private boolean regionsSatisfiesPreconditions(Region[] regions,int maxLength){  int regionsLength=regions == null ? 0 : regions.length;  if (regionsLength == 0) {    return false;  }  Region first=regions[0];  if (first.getOffset() < 0 || first.getLength() < 0 || first.getOffset() + first.getLength() > maxLength) {    return false;  }  int lastOffset=first.getOffset() + first.getLength() - 1;  for (int i=1; i < regionsLength; i++) {    Region current=regions[i];    if (lastOffset > current.getOffset()) {      return false;    }    if (current.getOffset() < 0 || current.getLength() < 0 || current.getOffset() + current.getLength() > maxLength) {      return false;    }    lastOffset=current.getOffset() + current.getLength() - 1;  }  return true;}  }
class C{  public long processedSize(){  return processedSize;}  }
class C{  public boolean isExtensionAuthorized(String ext){  if (!mRcsSettings.isExtensionsAllowed()) {    if (sLogger.isActivated()) {      sLogger.debug("Extensions are not allowed");    }    return false;  }  if (mRcsSettings.isExtensionAuthorized(ext)) {    if (sLogger.isActivated()) {      sLogger.debug("No control on extension ".concat(ext));    }    return true;  } else {    if (sLogger.isActivated()) {      sLogger.debug("Extension " + ext + " is not allowed");    }    return false;  }}  }
class C{  private UniqueString correctedStepNum(Token t){  String str=t.image;  if (str.substring(1,2).equals("*") || str.substring(1,2).equals("+")) {    int level=getProofLevel();    if ((level < 0) && (proofDepth > 0)) {      level=proofLevelStack[proofDepth - 1];    }    str="<" + level + str.substring(2);  } else {    str="<" + levelOfProofStepLexeme(t) + str.substring(str.indexOf('>'));  }  ;  return UniqueString.uniqueStringOf(str);}  }
class C{  private void openTestAction(String className) throws ClassNotFoundException, InstantiationException, IllegalAccessException {  String name=className.substring(className.lastIndexOf(".") + 1);  int option=JOptionPane.showConfirmDialog(this,Messages.getString("dialog.test.open.warning.text"),MessageFormat.format(Messages.getString("dialog.test.open.warning.title"),name),JOptionPane.YES_NO_CANCEL_OPTION);  if (option == JOptionPane.YES_OPTION) {    Class<?> clazz=Class.forName(className);    CompiledSimulation simulation=(CompiledSimulation)clazz.newInstance();synchronized (Simulation.LOCK) {      this.simulation=simulation;      this.pnlSimulation.setSimulation(this.simulation);      this.pnlContacts.setContactCounter(this.simulation.getContactCounter());    }    this.clearAllSnapshots();    this.setTitle(this.getWindowTitle() + " - " + name);    this.setCompiledSimulation(true);  }}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if ("graph".equals(e.getPropertyName())) {    selectArrowTools();  }}  }
class C{  public static final WritableFontData createWritableFontData(int length){  ByteArray<?> ba=null;  if (length > 0) {    ba=new MemoryByteArray(length);    ba.setFilledLength(length);  } else {    ba=new GrowableMemoryByteArray();  }  WritableFontData wfd=new WritableFontData(ba);  return wfd;}  }
class C{  private void revive(){  isDead=false;  if (!getEntityWorld().isRemote) {    TickHandlerInfraredPacket.INSTANCE.watchPacket(this);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:29.917 -0500",hash_original_method="56F7B4D0824C7980B3CF91C05C1DA172",hash_generated_method="FD8F5FB3995F1C5733A5EBC7107F06D5") protected V create(K key){  return null;}  }
class C{  void selectType(Environment env,Context ctx,int tm){  Type t;  if ((tm & TM_ERROR) != 0) {    return;  } else   if ((tm & (TM_CLASS | TM_ARRAY | TM_NULL)) != 0) {    try {      if (env.explicitCast(left.type,right.type) || env.explicitCast(right.type,left.type)) {        return;      }      env.error(where,"incompatible.type",left.type,left.type,right.type);    } catch (    ClassNotFound e) {      env.error(where,"class.not.found",e.name,opNames[op]);    }    return;  } else   if ((tm & TM_DOUBLE) != 0) {    t=Type.tDouble;  } else   if ((tm & TM_FLOAT) != 0) {    t=Type.tFloat;  } else   if ((tm & TM_LONG) != 0) {    t=Type.tLong;  } else   if ((tm & TM_BOOLEAN) != 0) {    t=Type.tBoolean;  } else {    t=Type.tInt;  }  left=convert(env,ctx,t,left);  right=convert(env,ctx,t,right);}  }
class C{  private Connection openDbConnection() throws Exception {  if (ctx == null) {    ctx=new InitialContext();  }  if (dataSource == null) {    dataSource=(DataSource)ctx.lookup(dataSourceName);  }  return dataSource.getConnection();}  }
class C{  public final void testGetEncodedString() throws CertificateEncodingException {  CertPath cp1=new MyCertPath(testEncoding);  cp1.getEncoded("MyEncoding");}  }
class C{  private boolean isDuplicateArgument(Coindexation indexation){  final Coindexation argument=indexation.getRight();  while (indexation.getLeft() != null) {    indexation=indexation.getLeft();    Coindexation otherArgument=indexation.getRight();    if (otherArgument != null && indexation.getLeftMost().getID().equals(otherArgument.getLeftMost().getID())) {      while (otherArgument.getLeft() != null) {        if (argument.getID().equals(otherArgument.getRight().getID())) {          return true;        }        otherArgument=otherArgument.getLeft();      }    }  }  return false;}  }
class C{  public long startcode(){  return Long.parseLong(fields[25]);}  }
class C{  public CPassword(int columns){  super(columns);  init();}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  public VisualRecognitionOptions build(){  Validator.isTrue((url != null) || (imagesFile != null),"url or imagesFile should be specified");  return new VisualRecognitionOptions(this);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  AttachPlaceholderAction(ModeUsage modeUsage){  super(modeUsage);}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public EmbeddedActiveMQResource(Configuration configuration){  this.configuration=configuration;  init();}  }
class C{  public static String cleanFileName(String s){  return s.replaceAll("[^a-zA-Z0-9\\._]+","_");}  }
class C{  public ObjectAnimator addAnimTo(long duration,long delay,String property,float toValue,boolean replace){  if (replace)   removeAnimationFor(property);  ObjectAnimator anim=ObjectAnimator.ofFloat(this,property,toValue);  anim.setDuration(duration);  anim.setStartDelay(delay);  anim.setInterpolator(EASE_OUT_INTERPOLATOR);  this.addAnimation(anim,replace);  if (DBG)   Log.v(TAG,"animationCount = " + mAnimators.size());  return anim;}  }
class C{  public static void printUnknownFieldValue(final int tag,final Object value,final Appendable output) throws IOException {  printUnknownFieldValue(tag,value,new TextGenerator(output));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 15:08:59.219 -0400",hash_original_method="874731EDFCED1A8665C096D10E95F40B",hash_generated_method="1ED29EB5723546E5CBA8D93FCE8A8CF0") @Override public void startPlaying(){  if (mController != null) {    mController.startPlaying();  }  mCallbacks.onStart();  pushControllerState();  reportPlayingChanged();}  }
class C{  protected void handleTouchEvent(MotionEvent ev,int downX,int downY,int lastY){  ViewConfiguration config=ViewConfiguration.get(recyclerView.getContext());  int action=ev.getAction();  int y=(int)ev.getY();switch (action) {case MotionEvent.ACTION_DOWN:    if (isNearThumb(downX,downY)) {      touchOffset=downY - thumbOffset.y;    }  break;case MotionEvent.ACTION_MOVE:ignoreDragGesture|=Math.abs(y - downY) > config.getScaledPagingTouchSlop();if (!isDragging && !ignoreDragGesture && isNearThumb(downX,lastY)&& Math.abs(y - downY) > config.getScaledTouchSlop()) {recyclerView.getParent().requestDisallowInterceptTouchEvent(true);isDragging=true;if (canThumbDetach) {  isThumbDetached=true;}touchOffset+=(lastY - downY);fastScrollPopup.animateVisibility(true);animateScrollbar(true);}if (isDragging) {int top=recyclerView.getBackgroundPadding().top;int bottom=recyclerView.getHeight() - recyclerView.getBackgroundPadding().bottom - thumbHeight;float boundedY=(float)Math.max(top,Math.min(bottom,y - touchOffset));String sectionName=recyclerView.scrollToPositionAtProgress((boundedY - top) / (bottom - top));fastScrollPopup.setSectionName(sectionName);fastScrollPopup.animateVisibility(!sectionName.isEmpty());recyclerView.invalidate(fastScrollPopup.updateFastScrollerBounds(recyclerView,lastY));lastTouchY=boundedY;}break;case MotionEvent.ACTION_UP:case MotionEvent.ACTION_CANCEL:touchOffset=0;lastTouchY=0;ignoreDragGesture=false;if (isDragging) {isDragging=false;fastScrollPopup.animateVisibility(false);recyclerView.hideScrollBar();}break;}}  }
class C{  private static boolean isInCornerTargetZone(float x,float y,float handleX,float handleY,float targetRadius){  if (Math.abs(x - handleX) <= targetRadius && Math.abs(y - handleY) <= targetRadius) {    return true;  }  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", namespace: ");  result.append(namespace);  result.append(", version: ");  result.append(version);  result.append(", description: ");  result.append(description);  result.append(", displayname: ");  result.append(displayname);  result.append(", category: ");  result.append(category);  result.append(", targetPlatform: ");  result.append(targetPlatform);  result.append(')');  return result.toString();}  }
class C{  private Language extractLangWithHighestProbability(ArrayList<Language> languages){  double bestRelevancy=-1;  Language langWinner=null;  for (  Language lang : languages) {    if (lang.prob > bestRelevancy) {      bestRelevancy=lang.prob;      langWinner=lang;    }  }  return langWinner;}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public void randomize(Random random){  for (int j=numInstances() - 1; j > 0; j--) {    swap(j,random.nextInt(j + 1));  }}  }
class C{  private void addVar(final TermNode t,final Set<IVariable<?>> producedBindings,final boolean addAnonymous){  if (t instanceof VarNode) {    if (addAnonymous || !((VarNode)t).isAnonymous()) {      producedBindings.add(((VarNode)t).getValueExpression());    }  } else   if (t instanceof ConstantNode) {    final ConstantNode cNode=(ConstantNode)t;    final Constant<?> c=(Constant<?>)cNode.getValueExpression();    final IVariable<?> var=c.getVar();    if (var != null) {      producedBindings.add(var);    }  }}  }
class C{  public static void printNode(Node node,OutputStream out) throws IOException {  printNode(node,new StreamResult(out));  out.write('\n');  out.flush();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (documentation: ");  result.append(documentation);  result.append(')');  return result.toString();}  }
class C{  protected void instantiateExtensions() throws ReplicatorException {  List<String> extensionNames=properties.getStringList(ReplicatorConf.EXTENSIONS);  for (  String extensionName : extensionNames) {    ReplicatorPlugin extension=loadAndConfigurePlugin(ReplicatorConf.EXTENSION_ROOT,extensionName);    configurePlugin(extension,this);    extensions.put(extensionName,extension);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean isPAL;  Sage.putInt("mmc/video_format_code",(isPAL="PAL".equalsIgnoreCase(getString(stack))) ? 8 : 1);  if (Sage.EMBEDDED)   Sage.put("TV_STANDARD",isPAL ? "PAL" : "NTSC");  return null;}  }
class C{  protected static boolean isValidClassname(String classname){  return (classname.indexOf("$") == -1);}  }
class C{  public jMatrix plus(jMatrix B){  checkMatrixDimensions(B);  jMatrix X=new jMatrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] + B.A[i][j];    }  }  return X;}  }
class C{  static Field of(String name,Type type){  return new FieldImpl(name,type);}  }
class C{  public static byte combine2bytesToOne(byte high,byte low){  if (high < 0 || high > 0xf || low < 0 || low > 0xf) {    throw new RuntimeException("Out of Boundary");  }  return (byte)(high << 4 | low);}  }
class C{  public boolean hasDescription(){  return hasExtension(Description.class);}  }
class C{  public static void main4(String[] args) throws Exception {  DistributedSystem system=DistributedSystem.connect(new java.util.Properties());  Cache cache=CacheFactory.create(system);  AttributesFactory factory=new AttributesFactory();  factory.setEvictionAttributes(EvictionAttributes.createLRUMemoryAttributes(2,(ObjectSizer)null,EvictionAction.OVERFLOW_TO_DISK));  LocalRegion region=(LocalRegion)cache.createRegion("TestDiskRegion",factory.create());  for (int i=0; i < 100000; i++) {    System.out.println(i);    region.put(String.valueOf(i),String.valueOf(i).getBytes());  }}  }
class C{  public DeterministicKey(DeterministicKey keyToClone,DeterministicKey newParent){  super(keyToClone.priv,keyToClone.pub.get());  this.parent=newParent;  this.childNumberPath=keyToClone.childNumberPath;  this.chainCode=keyToClone.chainCode;  this.encryptedPrivateKey=keyToClone.encryptedPrivateKey;  this.depth=this.childNumberPath.size();  this.parentFingerprint=this.parent.getFingerprint();}  }
class C{  private void activateContext(){  IContextService contextService=getSite().getService(IContextService.class);  contextService.activateContext(VIEW_CONTEXT_ID);}  }
class C{  public boolean maxValue(int val,int maxVal){  return GenericValidator.maxValue(val,maxVal);}  }
class C{  public boolean increment(long key){  return adjustValue(key,1);}  }
class C{  public void save() throws IOException {  try {    Process.checkIfSavable(this);  } catch (  Exception e) {    throw new IOException(e.getMessage());  }  if (processLocation != null) {    this.isProcessConverted=false;    processLocation.store(this,null);  } else {    throw new IOException("No process location is specified.");  }}  }
class C{  private MigrationInfoHelper(){}  }
class C{  public void add(long delay,T value){  Node<T> newNode=new Node<T>(value,delay);  Node<T> prev=null;  Node<T> next=head;  while (next != null && next.delay <= newNode.delay) {    newNode.delay-=next.delay;    prev=next;    next=next.next;  }  if (prev == null) {    head=newNode;  } else {    prev.next=newNode;  }  if (next != null) {    next.delay-=newNode.delay;    newNode.next=next;  }  size++;}  }
class C{  public static List<Apn> query(Context context){  String[] simCodes=getSimOperatorCodes(context);  String[] networkCodes=getNetworkOperatorCodes(context);  Set<Apn> resultSet=new HashSet<>();  resultSet.addAll(query(context,simCodes[0],simCodes[1]));  resultSet.addAll(query(context,networkCodes[0],networkCodes[1]));  List<Apn> result=new ArrayList<>(resultSet.size());  result.addAll(resultSet);  return result;}  }
class C{  public HessianMethodSerializationException(String message,Throwable cause){  super(message,cause);}  }
class C{  private boolean fileProcessed(String fileName){  if (processedJobFileNames.contains(fileName)) {    return true;  }  return false;}  }
class C{  public static void forceReset(){  startTime=0;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length < 1) {    System.out.println("usage: java PostLogProfilerProcessor <log-file>");    System.exit(1);  }  new PostLogProfilerProcessor(args[0],System.out);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  this.servletContext=config.getServletContext();  String value=config.getInitParameter("verbose");  if (value != null) {    this.verbose=Boolean.valueOf(value);  }  value=config.getInitParameter("encoding");  if (value != null) {    this.encoding=value;  }  if (verbose) {    log("Parsing init parameters...");  }  String regex=config.getInitParameter(INIT_PARAM_RESOURCE_NAME_REGEX);  if (regex != null) {    String replacement=config.getInitParameter("resource.name.replacement");    if (replacement == null) {      Exception npex=new NullPointerException("resource.name.replacement");      String message="Init-param 'resource.name.replacement' not specified!";      log(message,npex);      throw new ServletException(message,npex);    } else     if ("EMPTY_STRING".equals(replacement)) {      replacement="";    }    int flags=0;    String flagsStr=config.getInitParameter(INIT_PARAM_RESOURCE_NAME_REGEX_FLAGS);    if (flagsStr != null && flagsStr.length() > 0) {      flags=Integer.decode(flagsStr.trim());    }    resourceNamePattern=Pattern.compile(regex,flags);    this.resourceNameReplacement=replacement;    String all=config.getInitParameter("resource.name.replace.all");    if (all != null) {      this.resourceNameReplaceAll=Boolean.valueOf(all.trim());    }  }  value=config.getInitParameter("logGROOVY861");  if (value != null) {    this.logGROOVY861=Boolean.valueOf(value);  }  if (verbose) {    log("(Abstract) init done. Listing some parameter name/value pairs:");    log("verbose = " + verbose);    log("reflection = " + reflection);    log("logGROOVY861 = " + logGROOVY861);    log(INIT_PARAM_RESOURCE_NAME_REGEX + " = " + resourceNamePattern);    log("resource.name.replacement = " + resourceNameReplacement);  }}  }
class C{  public Object next() throws IOException {  if (prevPos <= 0)   return null;  long endOfThisRecord=prevPos;  int thisLength=nextLength;  long recordStart=prevPos - thisLength;  prevPos=recordStart - 4;  if (prevPos <= 0)   return null;  long bufferPos=fis.getBufferPos();  if (prevPos >= bufferPos) {  } else {    long seekPos=endOfThisRecord - fis.getBufferSize();    seekPos=Math.min(seekPos,prevPos);    seekPos=Math.max(seekPos,0);    fis.seek(seekPos);    fis.peek();  }  fis.seek(prevPos);  nextLength=fis.readInt();  Object o=codec.readVal(fis);  return o;}  }
class C{  public PKCS5S1ParametersGenerator(Digest digest){  this.digest=digest;}  }
class C{  @Override public final int dump(final File file) throws IOException {  final File tmp=new File(file.getParentFile(),file.getName() + ".prt");  final Iterator<Row.Entry> i=this.index.rows(true,null);  OutputStream os;  try {    os=new BufferedOutputStream(new FileOutputStream(tmp),4 * 1024 * 1024);  } catch (  final OutOfMemoryError e) {    os=new FileOutputStream(tmp);  }  if (file.getName().endsWith(".gz"))   os=new GZIPOutputStream(os,65536){{      def.setLevel(Deflater.BEST_COMPRESSION);    }  };  int c=0;  while (i.hasNext()) {    os.write(i.next().bytes());    c++;  }  os.flush();  os.close();  tmp.renameTo(file);  assert file.exists() : file.toString();  assert !tmp.exists() : tmp.toString();  return c;}  }
class C{  public static int intersectLineSegmentAab(Vector3fc p0,Vector3fc p1,Vector3fc min,Vector3fc max,Vector2f result){  return intersectLineSegmentAab(p0.x(),p0.y(),p0.z(),p1.x(),p1.y(),p1.z(),min.x(),min.y(),min.z(),max.x(),max.y(),max.z(),result);}  }
class C{  public static List<Double> vectorToList(Vector vec){  return Arrays.asList(vec.getX(),vec.getY(),vec.getZ());}  }
class C{  public void replaceGetterByInheretedGetter_caseIncompletAPI(TGetter inhGetter){  if (this.getter == null) {    throw new IllegalStateException();  }  if (this.inheritedGetter != null) {    throw new IllegalStateException();  }  if (inhGetter == null) {    throw new IllegalStateException();  }  this.getter=null;  this.inheritedGetter=inhGetter;}  }
class C{  void testHeaderPlusData() throws IOException {  for (  byte[] b : extra) {    ZipEntry ze=getEntry();    byte[] data=new byte[b.length + 4];    set16(data,0,TEST_HEADER);    set16(data,2,b.length);    for (int i=0; i < b.length; i++) {      data[i + 4]=b[i];    }    ze.setExtra(data);    zos.putNextEntry(ze);  }  zos.close();  ZipInputStream zis=getInputStream();  ZipEntry ze=zis.getNextEntry();  checkEntry(ze,0,extra[0].length);  ze=zis.getNextEntry();  checkEntry(ze,1,extra[1].length);}  }
class C{  public static void registerDeploymentManager(GridDeploymentManager mgr){  assert mgr != null;  GridProtocolHandler.mgr=mgr;}  }
class C{  public static void putFloat(final String key,final float value){  final Editor editor=getOptimusPref().edit();  editor.putFloat(key,value).apply();}  }
class C{  public static Number asin(Number a){  return Math.asin(a.doubleValue());}  }
class C{  public void log(Level level,String msg,Throwable thrown){  if (isLoggable(level)) {    delegate.log(level,msg,thrown);  }}  }
class C{  @Deprecated private void launchAnimBackupOld(){  if (!backupRoundTripFirstLaunched) {    currentBackupDrawable.stop();    if (backupRoundTrip.getLevel() == 1) {      backupRoundTrip.setLevel(0);    } else {      backupRoundTrip.setLevel(1);    }  } else {    backupRoundTripFirstLaunched=false;  }  currentBackupDrawable=(AnimatedVectorDrawable)backupRoundTrip.getCurrent();  currentBackupDrawable.start();}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public CheckerFrameworkPerFileTest(File testFile,Class<? extends AbstractProcessor> checker,String testDir,String... checkerOptions){  this.testFile=testFile;  this.checkerName=checker.getName();  this.testDir="tests" + File.separator + testDir;  this.checkerOptions=Arrays.asList(checkerOptions);}  }
class C{  private void splitHostNameAndMeta(){  String[] hostnamemetaFlags=hostnameAndMeta.split(":",2);  if (hostnamemetaFlags.length >= 1) {    this.hostnameAndMeta=hostnamemetaFlags[0];    int firstEnd=hostnameAndMeta.indexOf(',');    if (firstEnd > 0) {      hostname=hostnameAndMeta.substring(0,firstEnd);      String attrStr=hostnameAndMeta.substring(firstEnd);      String[] fields=attrStr.split(",");      for (      String field : fields) {        if (field.startsWith("S=")) {          sizeString="," + field;        }      }    } else {      sizeString=null;      hostname=this.hostnameAndMeta;    }  }  if (hostnamemetaFlags.length >= 2) {    this.flagsString=":" + hostnamemetaFlags[1];  }  if (isMessageNameStrictParse()) {    if (sizeString == null) {      throw new IllegalArgumentException("No message size found in message name: " + fullName);    }    if (flagsString == null) {      throw new IllegalArgumentException("No flags found in message name: " + fullName);    }  }}  }
class C{  public BackchainOwlSameAsPropertiesPIterator(IChunkedOrderedIterator<ISPO> src,IV p,AbstractTripleStore db,final IV sameAs){  super(src,db,sameAs);}  }
class C{  public static int executeCommand(String command,Logger logger){  return executeCommand(command,null,null,logger);}  }
class C{  private void decodeParms(String parms,Properties p) throws InterruptedException {  if (parms == null)   return;  StringTokenizer st=new StringTokenizer(parms,"&");  while (st.hasMoreTokens()) {    String e=st.nextToken();    int sep=e.indexOf('=');    if (sep >= 0)     p.put(decodePercent(e.substring(0,sep)).trim(),decodePercent(e.substring(sep + 1)));  }}  }
class C{  public static MaterialIconSlide newInstance(String imageDrawable,String title,String content,int titleTextColor,int contentTextColor){  MaterialIconSlide materialSlide=new MaterialIconSlide();  Bundle args=new Bundle();  args.putString(ARG_DRAWABLE,imageDrawable);  args.putString(ARG_TITLE,title);  args.putString(ARG_CONTENT,content);  args.putInt(ARG_TITLE_TEXT_COLOR,titleTextColor);  args.putInt(ARG_CONTENT_TEXT_COLOR,contentTextColor);  materialSlide.setArguments(args);  return materialSlide;}  }
class C{  public void fill(final double value){  if (data instanceof NumericTable) {    ((NumericTable)data).fill(getSelectedLogicalCellIndices(),value);  }}  }
class C{  public void addCube(Cube cube){  this.cubeMap.put(cube);}  }
class C{  public TObjectHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  _hashingStrategy=this;}  }
class C{  public static Rectangle nextBox(){  return nextBoxInternal(nextLatitude(),nextLatitude(),nextLongitude(),nextLongitude(),true);}  }
class C{  void checkTag(String tag,String... values){  int idx=mailContentReceived.indexOf(tag);  if (idx < 0)   fail(mailContentReceived + " " + " does not contain required tag"+ tag+ ".");  String line=mailContentReceived.substring(idx);  if (line.indexOf('\n') > 0) {    line=line.substring(0,line.indexOf('\n'));  }  for (  String value : values) {    assertTrue(line + " " + " does not contain required value "+ value+ ".",line.contains(value));  }}  }
class C{  @Override public String toString(){  Color src=UIManager.getColor(uiDefaultParentName);  String s="DerivedColor(color=" + getRed() + ","+ getGreen()+ ","+ getBlue()+ " parent="+ uiDefaultParentName+ " offsets="+ getHueOffset()+ ","+ getSaturationOffset()+ ","+ getBrightnessOffset()+ ","+ getAlphaOffset();  return src == null ? s : s + " pColor=" + src.getRed()+ ","+ src.getGreen()+ ","+ src.getBlue();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.821 -0400",hash_original_method="4719DD4974D08080A970216FF9540658",hash_generated_method="7D94F55CE412414050F7792B57136DF3") public SizeFileFilter(long size){  this(size,true);}  }
class C{  public static ProcessBuilder inheritNodeJsPathEnvVariableUtils(ProcessBuilder pb){  if (null != pb) {    final String nodeJsPath=System.getenv(NODEJS_PATH_ENV);    if (null == nodeJsPath || 0 == nodeJsPath.trim().length()) {      info("No " + NODEJS_PATH_ENV + " environment variable was specified. Nothing to merge.");    } else {      if (!pb.environment().containsKey(NODEJS_PATH_ENV)) {        info("Setting " + NODEJS_PATH_ENV + " environment variable to process builder.");        pb.environment().put(NODEJS_PATH_ENV,nodeJsPath);      } else {        info("Process builder already has " + NODEJS_PATH_ENV + " environment variable with value: "+ pb.environment().get(NODEJS_PATH_ENV)+ ". Nothing to do.");      }    }  }  return pb;}  }
class C{  MVMap<Object,Integer> openTempMap(String mapName){  MVMap.Builder<Object,Integer> mapBuilder=new MVMap.Builder<Object,Integer>().keyType(dataType);  return store.openMap(mapName,mapBuilder);}  }
class C{  public void preclose(){  preclosed=true;}  }
class C{  public boolean isAddOnRunningIssues(){  return addOnRunningIssues;}  }
class C{  public static String padOrTrim(Object obj,int totalChars){  return padOrTrim(obj.toString(),totalChars);}  }
class C{  protected void growUp(World world,BlockPos pos){  world.setBlockState(pos.up(),this.getDefaultState());}  }
class C{  @SuppressWarnings("unchecked") public CModuleFilterCreator(){  super(Lists.newArrayList(new CViewGenerator(),new CNameDescriptionGenerator<CModuleWrapper>()));}  }
class C{  public OptionsCache(){  cacheList=new ArrayList<>();  cacheList.add(new StaticCache(GenInputsAbstract.class));  cacheList.add(new StaticCache(ReflectionExecutor.class));  cacheList.add(new StaticCache(AbstractGenerator.class));}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tThe number of folds to use for the cross-validation.\n" + "\t(default 10)","X",1,"-X <number of folds>"));  newVector.addElement(new Option("Save raw split evaluator output.","D",0,"-D"));  newVector.addElement(new Option("\tThe filename where raw output will be stored.\n" + "\tIf a directory name is specified then then individual\n" + "\toutputs will be gzipped, otherwise all output will be\n"+ "\tzipped to the named file. Use in conjuction with -D."+ "\t(default splitEvalutorOut.zip)","O",1,"-O <file/directory name/path>"));  newVector.addElement(new Option("\tThe full class name of a SplitEvaluator.\n" + "\teg: weka.experiment.ClassifierSplitEvaluator","W",1,"-W <class name>"));  if ((m_SplitEvaluator != null) && (m_SplitEvaluator instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to split evaluator " + m_SplitEvaluator.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_SplitEvaluator).listOptions()));  }  return newVector.elements();}  }
class C{  public static Bitmap extractThumbnail(Bitmap source,int width,int height){  return extractThumbnail(source,width,height,OPTIONS_NONE);}  }
class C{  public static boolean isXML11Name(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME) != 0) || (c >= 0x10000 && c < 0xF0000);}  }
class C{  public static JmrixConfigPane createNewPanel(){  int lastIndex=-1;  ConnectionConfig[] connections=InstanceManager.getDefault(ConnectionConfigManager.class).getConnections();  if (connections.length != 0) {    lastIndex=connections.length;  }  for (  int key : configPaneTable.keySet()) {    if (key > lastIndex) {      lastIndex=key;    }  }  lastIndex++;  return createPanel(lastIndex);}  }
class C{  public Object load(InputStream io){  return loadFromReader(new StreamReader(new UnicodeReader(io)),Object.class);}  }
class C{  public SQLCommentAutoIndentStrategy(String partitioning){  this.partitioning=partitioning;}  }
class C{  @DELETE @Path("/{id}") public Response cancelOrder(@PathParam("id") int orderId){  producer.sendBody("direct:cancelOrder",orderId);  return Response.ok().build();}  }
class C{  public Object readObject(AbstractHessianInput in,Object[] fields) throws IOException {  throw new UnsupportedOperationException(toString());}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.731 -0400",hash_original_method="5C49B996D079DB6527DA00AF822DC40F",hash_generated_method="5624A64A7FDD26CB713D3EDF643DAEE8") @Override public boolean accept(File file){  if (file.isDirectory()) {    File[] files=file.listFiles();    return files == null || files.length == 0;  } else {    return file.length() == 0;  }}  }
class C{  public void sendUnloadStranded(int[] entityIds){  Object[] data=new Object[1];  data[0]=entityIds;  send(new Packet(Packet.COMMAND_UNLOAD_STRANDED,data));}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static <T extends Annotation>T unproxy(T annotation){  Function unproxyFunction=getUnproxyFunction(annotation.annotationType());  return (T)unproxyFunction.apply(annotation);}  }
class C{  final public static int normalize_value(int val){  val%=60;  if (val < 0) {    val+=60;  }  return val;}  }
class C{  private void logFormat(String action,DateFormat format){}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,long[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.THIS_LITERAL__STRICT_MODE:    return strictMode != STRICT_MODE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  protected static void recursiveInspectVariables(RowRegexExprNode parent,boolean isMultiple,Set<String> variablesSingle,Set<String> variablesMultiple){  if (parent instanceof RowRegexExprNodeNested) {    RowRegexExprNodeNested nested=(RowRegexExprNodeNested)parent;    for (    RowRegexExprNode child : parent.getChildNodes()) {      recursiveInspectVariables(child,nested.getType().isMultipleMatches() || isMultiple,variablesSingle,variablesMultiple);    }  } else   if (parent instanceof RowRegexExprNodeAlteration) {    for (    RowRegexExprNode childAlteration : parent.getChildNodes()) {      LinkedHashSet<String> singles=new LinkedHashSet<String>();      LinkedHashSet<String> multiples=new LinkedHashSet<String>();      recursiveInspectVariables(childAlteration,isMultiple,singles,multiples);      variablesMultiple.addAll(multiples);      variablesSingle.addAll(singles);    }    variablesSingle.removeAll(variablesMultiple);  } else   if (parent instanceof RowRegexExprNodeAtom) {    RowRegexExprNodeAtom atom=(RowRegexExprNodeAtom)parent;    String name=atom.getTag();    if (variablesMultiple.contains(name)) {      return;    }    if (variablesSingle.contains(name)) {      variablesSingle.remove(name);      variablesMultiple.add(name);      return;    }    if (atom.getType().isMultipleMatches()) {      variablesMultiple.add(name);      return;    }    if (isMultiple) {      variablesMultiple.add(name);    } else {      variablesSingle.add(name);    }  } else {    for (    RowRegexExprNode child : parent.getChildNodes()) {      recursiveInspectVariables(child,isMultiple,variablesSingle,variablesMultiple);    }  }}  }
class C{  public static Discount updateDiscount(VODiscount voObj,Discount domObj) throws ValidationException, ConcurrentModificationException {  if (domObj.getKey() != 0) {    verifyVersionAndKey(domObj,voObj);  }  validate(voObj);  copyToDomainAttributes(domObj,voObj);  return domObj;}  }
class C{  public FastAdapterDialog<Item> withOnPreClickListener(FastAdapter.OnClickListener<Item> onPreClickListener){  this.mFastItemAdapter.withOnPreClickListener(onPreClickListener);  return this;}  }
class C{  public String readLine() throws IOException {  if (finished)   throw new DccException(DccException.Reason.ChatNotConnected,user,"Chat has already finished");  String line=bufferedReader.readLine();  log.info(INPUT_CHAT_MARKER,"<<<" + line);  return line;}  }
class C{  public OrganizationAuthorityException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  protected void checkExist(IgfsImpl igfs,IgfsSecondaryFileSystemTestAdapter igfsSecondary,IgfsPath... paths) throws Exception {  checkExist(igfs,paths);  if (dual)   checkExist(igfsSecondary,paths);}  }
class C{  void doCommands(PrintStream out) throws Exception {  if (storetype == null) {    storetype=KeyStore.getDefaultType();  }  storetype=KeyStoreUtil.niceStoreTypeName(storetype);  if (srcstoretype == null) {    srcstoretype=KeyStore.getDefaultType();  }  srcstoretype=KeyStoreUtil.niceStoreTypeName(srcstoretype);  if (P11KEYSTORE.equalsIgnoreCase(storetype) || KeyStoreUtil.isWindowsKeyStore(storetype)) {    token=true;    if (ksfname == null) {      ksfname=NONE;    }  }  if (NONE.equals(ksfname)) {    nullStream=true;  }  if (token && !nullStream) {    System.err.println(MessageFormat.format(rb.getString(".keystore.must.be.NONE.if.storetype.is.{0}"),storetype));    System.err.println();    tinyHelp();  }  if (token && (command == KEYPASSWD || command == STOREPASSWD)) {    throw new UnsupportedOperationException(MessageFormat.format(rb.getString(".storepasswd.and.keypasswd.commands.not.supported.if.storetype.is.{0}"),storetype));  }  if (P12KEYSTORE.equalsIgnoreCase(storetype) && command == KEYPASSWD) {    throw new UnsupportedOperationException(rb.getString(".keypasswd.commands.not.supported.if.storetype.is.PKCS12"));  }  if (token && (keyPass != null || newPass != null || destKeyPass != null)) {    throw new IllegalArgumentException(MessageFormat.format(rb.getString(".keypass.and.new.can.not.be.specified.if.storetype.is.{0}"),storetype));  }  if (protectedPath) {    if (storePass != null || keyPass != null || newPass != null || destKeyPass != null) {      throw new IllegalArgumentException(rb.getString("if.protected.is.specified.then.storepass.keypass.and.new.must.not.be.specified"));    }  }  if (srcprotectedPath) {    if (srcstorePass != null || srckeyPass != null) {      throw new IllegalArgumentException(rb.getString("if.srcprotected.is.specified.then.srcstorepass.and.srckeypass.must.not.be.specified"));    }  }  if (KeyStoreUtil.isWindowsKeyStore(storetype)) {    if (storePass != null || keyPass != null || newPass != null || destKeyPass != null) {      throw new IllegalArgumentException(rb.getString("if.keystore.is.not.password.protected.then.storepass.keypass.and.new.must.not.be.specified"));    }  }  if (KeyStoreUtil.isWindowsKeyStore(srcstoretype)) {    if (srcstorePass != null || srckeyPass != null) {      throw new IllegalArgumentException(rb.getString("if.source.keystore.is.not.password.protected.then.srcstorepass.and.srckeypass.must.not.be.specified"));    }  }  if (validity <= (long)0) {    throw new Exception(rb.getString("Validity.must.be.greater.than.zero"));  }  if (providers != null) {    ClassLoader cl=null;    if (pathlist != null) {      String path=null;      path=PathList.appendPath(path,System.getProperty("java.class.path"));      path=PathList.appendPath(path,System.getProperty("env.class.path"));      path=PathList.appendPath(path,pathlist);      URL[] urls=PathList.pathToURLs(path);      cl=new URLClassLoader(urls);    } else {      cl=ClassLoader.getSystemClassLoader();    }    for (    Pair<String,String> provider : providers) {      String provName=provider.fst;      Class<?> provClass;      if (cl != null) {        provClass=cl.loadClass(provName);      } else {        provClass=Class.forName(provName);      }      String provArg=provider.snd;      Object obj;      if (provArg == null) {        obj=provClass.newInstance();      } else {        Constructor<?> c=provClass.getConstructor(PARAM_STRING);        obj=c.newInstance(provArg);      }      if (!(obj instanceof Provider)) {        MessageFormat form=new MessageFormat(rb.getString("provName.not.a.provider"));        Object[] source={provName};        throw new Exception(form.format(source));      }      Security.addProvider((Provider)obj);    }  }  if (command == LIST && verbose && rfc) {    System.err.println(rb.getString("Must.not.specify.both.v.and.rfc.with.list.command"));    tinyHelp();  }  if (command == GENKEYPAIR && keyPass != null && keyPass.length < 6) {    throw new Exception(rb.getString("Key.password.must.be.at.least.6.characters"));  }  if (newPass != null && newPass.length < 6) {    throw new Exception(rb.getString("New.password.must.be.at.least.6.characters"));  }  if (destKeyPass != null && destKeyPass.length < 6) {    throw new Exception(rb.getString("New.password.must.be.at.least.6.characters"));  }  if (isKeyStoreRelated(command)) {    if (ksfname == null) {      ksfname=System.getProperty("user.home") + File.separator + ".keystore";    }    if (!nullStream) {      try {        ksfile=new File(ksfname);        if (ksfile.exists() && ksfile.length() == 0) {          throw new Exception(rb.getString("Keystore.file.exists.but.is.empty.") + ksfname);        }        ksStream=new FileInputStream(ksfile);      } catch (      FileNotFoundException e) {        if (command != GENKEYPAIR && command != GENSECKEY && command != IDENTITYDB && command != IMPORTCERT && command != IMPORTPASS && command != IMPORTKEYSTORE && command != PRINTCRL) {          throw new Exception(rb.getString("Keystore.file.does.not.exist.") + ksfname);        }      }    }  }  if ((command == KEYCLONE || command == CHANGEALIAS) && dest == null) {    dest=getAlias("destination");    if ("".equals(dest)) {      throw new Exception(rb.getString("Must.specify.destination.alias"));    }  }  if (command == DELETE && alias == null) {    alias=getAlias(null);    if ("".equals(alias)) {      throw new Exception(rb.getString("Must.specify.alias"));    }  }  if (providerName == null) {    keyStore=KeyStore.getInstance(storetype);  } else {    keyStore=KeyStore.getInstance(storetype,providerName);  }  if (!nullStream) {    keyStore.load(ksStream,storePass);    if (ksStream != null) {      ksStream.close();    }  }  if (nullStream && storePass != null) {    keyStore.load(null,storePass);  } else   if (!nullStream && storePass != null) {    if (ksStream == null && storePass.length < 6) {      throw new Exception(rb.getString("Keystore.password.must.be.at.least.6.characters"));    }  } else   if (storePass == null) {    if (!protectedPath && !KeyStoreUtil.isWindowsKeyStore(storetype) && (command == CERTREQ || command == DELETE || command == GENKEYPAIR || command == GENSECKEY || command == IMPORTCERT || command == IMPORTPASS || command == IMPORTKEYSTORE || command == KEYCLONE || command == CHANGEALIAS || command == SELFCERT || command == STOREPASSWD || command == KEYPASSWD || command == IDENTITYDB)) {      int count=0;      do {        if (command == IMPORTKEYSTORE) {          System.err.print(rb.getString("Enter.destination.keystore.password."));        } else {          System.err.print(rb.getString("Enter.keystore.password."));        }        System.err.flush();        storePass=Password.readPassword(System.in);        passwords.add(storePass);        if (!nullStream && (storePass == null || storePass.length < 6)) {          System.err.println(rb.getString("Keystore.password.is.too.short.must.be.at.least.6.characters"));          storePass=null;        }        if (storePass != null && !nullStream && ksStream == null) {          System.err.print(rb.getString("Re.enter.new.password."));          char[] storePassAgain=Password.readPassword(System.in);          passwords.add(storePassAgain);          if (!Arrays.equals(storePass,storePassAgain)) {            System.err.println(rb.getString("They.don.t.match.Try.again"));            storePass=null;          }        }        count++;      } while ((storePass == null) && count < 3);      if (storePass == null) {        System.err.println(rb.getString("Too.many.failures.try.later"));        return;      }    } else     if (!protectedPath && !KeyStoreUtil.isWindowsKeyStore(storetype) && isKeyStoreRelated(command)) {      if (command != PRINTCRL) {        System.err.print(rb.getString("Enter.keystore.password."));        System.err.flush();        storePass=Password.readPassword(System.in);        passwords.add(storePass);      }    }    if (nullStream) {      keyStore.load(null,storePass);    } else     if (ksStream != null) {      ksStream=new FileInputStream(ksfile);      keyStore.load(ksStream,storePass);      ksStream.close();    }  }  if (storePass != null && P12KEYSTORE.equalsIgnoreCase(storetype)) {    MessageFormat form=new MessageFormat(rb.getString("Warning.Different.store.and.key.passwords.not.supported.for.PKCS12.KeyStores.Ignoring.user.specified.command.value."));    if (keyPass != null && !Arrays.equals(storePass,keyPass)) {      Object[] source={"-keypass"};      System.err.println(form.format(source));      keyPass=storePass;    }    if (newPass != null && !Arrays.equals(storePass,newPass)) {      Object[] source={"-new"};      System.err.println(form.format(source));      newPass=storePass;    }    if (destKeyPass != null && !Arrays.equals(storePass,destKeyPass)) {      Object[] source={"-destkeypass"};      System.err.println(form.format(source));      destKeyPass=storePass;    }  }  if (command == PRINTCERT || command == IMPORTCERT || command == IDENTITYDB || command == PRINTCRL) {    cf=CertificateFactory.getInstance("X509");  }  if (trustcacerts) {    caks=KeyStoreUtil.getCacertsKeyStore();  }  if (command == CERTREQ) {    if (filename != null) {      try (PrintStream ps=new PrintStream(new FileOutputStream(filename))){        doCertReq(alias,sigAlgName,ps);      }     } else {      doCertReq(alias,sigAlgName,out);    }    if (verbose && filename != null) {      MessageFormat form=new MessageFormat(rb.getString("Certification.request.stored.in.file.filename."));      Object[] source={filename};      System.err.println(form.format(source));      System.err.println(rb.getString("Submit.this.to.your.CA"));    }  } else   if (command == DELETE) {    doDeleteEntry(alias);    kssave=true;  } else   if (command == EXPORTCERT) {    if (filename != null) {      try (PrintStream ps=new PrintStream(new FileOutputStream(filename))){        doExportCert(alias,ps);      }     } else {      doExportCert(alias,out);    }    if (filename != null) {      MessageFormat form=new MessageFormat(rb.getString("Certificate.stored.in.file.filename."));      Object[] source={filename};      System.err.println(form.format(source));    }  } else   if (command == GENKEYPAIR) {    if (keyAlgName == null) {      keyAlgName="DSA";    }    doGenKeyPair(alias,dname,keyAlgName,keysize,sigAlgName);    kssave=true;  } else   if (command == GENSECKEY) {    if (keyAlgName == null) {      keyAlgName="DES";    }    doGenSecretKey(alias,keyAlgName,keysize);    kssave=true;  } else   if (command == IMPORTPASS) {    if (keyAlgName == null) {      keyAlgName="PBE";    }    doGenSecretKey(alias,keyAlgName,keysize);    kssave=true;  } else   if (command == IDENTITYDB) {    if (filename != null) {      try (InputStream inStream=new FileInputStream(filename)){        doImportIdentityDatabase(inStream);      }     } else {      doImportIdentityDatabase(System.in);    }  } else   if (command == IMPORTCERT) {    InputStream inStream=System.in;    if (filename != null) {      inStream=new FileInputStream(filename);    }    String importAlias=(alias != null) ? alias : keyAlias;    try {      if (keyStore.entryInstanceOf(importAlias,KeyStore.PrivateKeyEntry.class)) {        kssave=installReply(importAlias,inStream);        if (kssave) {          System.err.println(rb.getString("Certificate.reply.was.installed.in.keystore"));        } else {          System.err.println(rb.getString("Certificate.reply.was.not.installed.in.keystore"));        }      } else       if (!keyStore.containsAlias(importAlias) || keyStore.entryInstanceOf(importAlias,KeyStore.TrustedCertificateEntry.class)) {        kssave=addTrustedCert(importAlias,inStream);        if (kssave) {          System.err.println(rb.getString("Certificate.was.added.to.keystore"));        } else {          System.err.println(rb.getString("Certificate.was.not.added.to.keystore"));        }      }    }  finally {      if (inStream != System.in) {        inStream.close();      }    }  } else   if (command == IMPORTKEYSTORE) {    doImportKeyStore();    kssave=true;  } else   if (command == KEYCLONE) {    keyPassNew=newPass;    if (alias == null) {      alias=keyAlias;    }    if (keyStore.containsAlias(alias) == false) {      MessageFormat form=new MessageFormat(rb.getString("Alias.alias.does.not.exist"));      Object[] source={alias};      throw new Exception(form.format(source));    }    if (!keyStore.entryInstanceOf(alias,KeyStore.PrivateKeyEntry.class)) {      MessageFormat form=new MessageFormat(rb.getString("Alias.alias.references.an.entry.type.that.is.not.a.private.key.entry.The.keyclone.command.only.supports.cloning.of.private.key"));      Object[] source={alias};      throw new Exception(form.format(source));    }    doCloneEntry(alias,dest,true);    kssave=true;  } else   if (command == CHANGEALIAS) {    if (alias == null) {      alias=keyAlias;    }    doCloneEntry(alias,dest,false);    if (keyStore.containsAlias(alias)) {      doDeleteEntry(alias);    }    kssave=true;  } else   if (command == KEYPASSWD) {    keyPassNew=newPass;    doChangeKeyPasswd(alias);    kssave=true;  } else   if (command == LIST) {    if (alias != null) {      doPrintEntry(alias,out,true);    } else {      doPrintEntries(out);    }  } else   if (command == PRINTCERT) {    doPrintCert(out);  } else   if (command == SELFCERT) {    doSelfCert(alias,dname,sigAlgName);    kssave=true;  } else   if (command == STOREPASSWD) {    storePassNew=newPass;    if (storePassNew == null) {      storePassNew=getNewPasswd("keystore password",storePass);    }    kssave=true;  } else   if (command == GENCERT) {    if (alias == null) {      alias=keyAlias;    }    InputStream inStream=System.in;    if (infilename != null) {      inStream=new FileInputStream(infilename);    }    PrintStream ps=null;    if (outfilename != null) {      ps=new PrintStream(new FileOutputStream(outfilename));      out=ps;    }    try {      doGenCert(alias,sigAlgName,inStream,out);    }  finally {      if (inStream != System.in) {        inStream.close();      }      if (ps != null) {        ps.close();      }    }  } else   if (command == GENCRL) {    if (alias == null) {      alias=keyAlias;    }    if (filename != null) {      try (PrintStream ps=new PrintStream(new FileOutputStream(filename))){        doGenCRL(ps);      }     } else {      doGenCRL(out);    }  } else   if (command == PRINTCERTREQ) {    if (filename != null) {      try (InputStream inStream=new FileInputStream(filename)){        doPrintCertReq(inStream,out);      }     } else {      doPrintCertReq(System.in,out);    }  } else   if (command == PRINTCRL) {    doPrintCRL(filename,out);  }  if (kssave) {    if (verbose) {      MessageFormat form=new MessageFormat(rb.getString(".Storing.ksfname."));      Object[] source={nullStream ? "keystore" : ksfname};      System.err.println(form.format(source));    }    if (token) {      keyStore.store(null,null);    } else {      char[] pass=(storePassNew != null) ? storePassNew : storePass;      if (nullStream) {        keyStore.store(null,pass);      } else {        ByteArrayOutputStream bout=new ByteArrayOutputStream();        keyStore.store(bout,pass);        try (FileOutputStream fout=new FileOutputStream(ksfname)){          fout.write(bout.toByteArray());        }       }    }  }}  }
class C{  public CCrossReference(final INaviFunction sourceFunction,final INaviFunction targetFunction){  m_sourceFunction=sourceFunction;  m_targetFunction=targetFunction;}  }
class C{  public KeyczarPBEReader(KeyczarReader reader,String passphrase){  this.reader=reader;  this.passphrase=passphrase;}  }
class C{  public RepositoryConfig(String id){  this();  setID(id);}  }
class C{  private List<StoragePort> allocatePortsFromNetwork(URI storageURI,NetworkLite network,URI varrayURI,int numPaths,Map<StoragePort,Long> portUsageMap,StoragePortsAllocator allocator,Set<StoragePort> previouslyAllocatedPorts,boolean allowFewerPorts) throws PlacementException {  List<StoragePort> sports=new ArrayList<StoragePort>();  if (network.getTransportType().equals(StorageProtocol.Transport.FC.name()) || network.getTransportType().equals(StorageProtocol.Transport.IP.name())) {    List<StoragePort> portList=allocator.selectStoragePorts(_dbClient,portUsageMap,network,varrayURI,numPaths,previouslyAllocatedPorts,allowFewerPorts);    for (    StoragePort port : portList) {      if (!sports.contains(port)) {        sports.add(port);      }    }  } else {    List<StoragePort> spList=new ArrayList<StoragePort>();    spList.addAll(portUsageMap.keySet());    StoragePort storagePort=selectStoragePort(spList);    if (!sports.contains(storagePort)) {      sports.add(storagePort);    }  }  return sports;}  }
class C{  public static String makeUserFullName(String firstName,String lastName){  if (TextUtils.isEmpty(firstName)) {    return "";  }  final StringBuilder builder=new StringBuilder(firstName);  if (!TextUtils.isEmpty(lastName)) {    builder.append(" ").append(lastName);  }  return builder.toString();}  }
class C{  public AppUser(String id,String name,String password,String card,String role,Icon icon){  m_sId=id;  m_sName=name;  m_sPassword=password;  m_sCard=card;  m_sRole=role;  m_Icon=icon;  m_apermissions=null;}  }
class C{  public void testLeduc_1() throws ParseException {  checkIntersection("LINESTRING (305690.0434123494 254176.46578338774, 305601.9999843455 254243.19999846347)","LINESTRING (305689.6153764265 254177.33102743194, 305692.4999844298 254171.4999983967)",1,"POINT (305690.0434123494 254176.46578338774)",0);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.580 -0500",hash_original_method="99EDC8CF58ACEFC383E40E1B1F253896",hash_generated_method="3661B9E6F99225CA9976B419D6E2DE03") @Override public void mark(int readlimit){}  }
class C{  public void addAll(double... values){  for (  double value : values) {    add(value);  }}  }
class C{  private boolean intercepts(String msg,String inter){  int i=msg.indexOf(inter);  if (i == -1)   return false;  if (msg.lastIndexOf("com.limegroup.gnutella",i) != -1 && msg.lastIndexOf("org.limewire",i) != -1)   return false;  i+=inter.length();  if (i >= msg.length())   return false;  if (msg.indexOf("com.limegroup.gnutella",i) != -1 && msg.lastIndexOf("org.limewire",i) != -1)   return false;  return true;}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof Integer) {    this.put(key,(Integer)value + 1);  } else   if (value instanceof Long) {    this.put(key,(Long)value + 1);  } else   if (value instanceof Double) {    this.put(key,(Double)value + 1);  } else   if (value instanceof Float) {    this.put(key,(Float)value + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  @SuppressWarnings("unchecked") private void initializeTargetMethods() throws RuntimeException, ClassNotFoundException {  logger.info("Analyzing target class");  Class<?> targetClass=Properties.getTargetClassAndDontInitialise();  TestCluster cluster=TestCluster.getInstance();  Set<Class<?>> targetClasses=new LinkedHashSet<Class<?>>();  if (targetClass == null) {    throw new RuntimeException("Failed to load " + Properties.TARGET_CLASS);  }  targetClasses.add(targetClass);  addDeclaredClasses(targetClasses,targetClass);  if (Modifier.isAbstract(targetClass.getModifiers())) {    logger.info("SUT is an abstract class");    Set<Class<?>> subclasses=ConcreteClassAnalyzer.getInstance().getConcreteClasses(targetClass,inheritanceTree);    logger.info("Found " + subclasses.size() + " concrete subclasses");    targetClasses.addAll(subclasses);  }  Set<Class<?>> tmp_targetClasses=new LinkedHashSet<Class<?>>(targetClasses);  for (  Class<?> _targetClass : tmp_targetClasses) {    ClassNode targetClassNode=DependencyAnalysis.getClassNode(_targetClass.getName());    Queue<InnerClassNode> innerClasses=new LinkedList<InnerClassNode>();    innerClasses.addAll(targetClassNode.innerClasses);    while (!innerClasses.isEmpty()) {      InnerClassNode icn=innerClasses.poll();      try {        logger.debug("Loading inner class: " + icn.innerName + ", "+ icn.name+ ","+ icn.outerName);        String innerClassName=ResourceList.getClassNameFromResourcePath(icn.name);        Class<?> innerClass=TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(innerClassName);        if (!targetClasses.contains(innerClass) && !innerClassName.contains("Map$Entry")) {          logger.info("Adding inner class " + innerClassName);          targetClasses.add(innerClass);          ClassNode innerClassNode=DependencyAnalysis.getClassNode(innerClassName);          innerClasses.addAll(innerClassNode.innerClasses);        }      } catch (      Throwable t) {        logger.error("Problem for " + Properties.TARGET_CLASS + ". Error loading inner class: "+ icn.innerName+ ", "+ icn.name+ ","+ icn.outerName+ ": "+ t);      }    }  }  for (  Class<?> clazz : targetClasses) {    logger.info("Current SUT class: " + clazz);    if (!TestUsageChecker.canUse(clazz)) {      logger.info("Cannot access SUT class: " + clazz);      continue;    }    for (    Constructor<?> constructor : TestClusterUtils.getConstructors(clazz)) {      logger.info("Checking target constructor " + constructor);      String name="<init>" + org.objectweb.asm.Type.getConstructorDescriptor(constructor);      if (Properties.TT) {        String orig=name;        name=BooleanTestabilityTransformation.getOriginalNameDesc(clazz.getName(),"<init>",org.objectweb.asm.Type.getConstructorDescriptor(constructor));        if (!orig.equals(name))         logger.info("TT name: " + orig + " -> "+ name);      }      if (TestUsageChecker.canUse(constructor)) {        GenericConstructor genericConstructor=new GenericConstructor(constructor,clazz);        if (constructor.getDeclaringClass().equals(clazz))         cluster.addTestCall(genericConstructor);        cluster.addGenerator(new GenericClass(clazz),genericConstructor);        addDependencies(genericConstructor,1);        logger.debug("Keeping track of " + constructor.getDeclaringClass().getName() + "."+ constructor.getName()+ org.objectweb.asm.Type.getConstructorDescriptor(constructor));      } else {        logger.debug("Constructor cannot be used: " + constructor);      }    }    for (    Method method : TestClusterUtils.getMethods(clazz)) {      logger.info("Checking target method " + method);      String name=method.getName() + org.objectweb.asm.Type.getMethodDescriptor(method);      if (Properties.TT) {        String orig=name;        name=BooleanTestabilityTransformation.getOriginalNameDesc(clazz.getName(),method.getName(),org.objectweb.asm.Type.getMethodDescriptor(method));        if (!orig.equals(name))         logger.info("TT name: " + orig + " -> "+ name);      }      if (TestUsageChecker.canUse(method,clazz)) {        logger.debug("Adding method " + clazz.getName() + "."+ method.getName()+ org.objectweb.asm.Type.getMethodDescriptor(method));        GenericMethod genericMethod=new GenericMethod(method,clazz);        if (method.getDeclaringClass().equals(clazz))         cluster.addTestCall(genericMethod);        if (!CheapPurityAnalyzer.getInstance().isPure(method)) {          cluster.addModifier(new GenericClass(clazz),genericMethod);        }        addDependencies(genericMethod,1);        GenericClass retClass=new GenericClass(method.getReturnType());        if (!retClass.isPrimitive() && !retClass.isVoid() && !retClass.isObject())         cluster.addGenerator(retClass,genericMethod);      } else {        logger.debug("Method cannot be used: " + method);        if (Properties.P_REFLECTION_ON_PRIVATE > 0 && method.getDeclaringClass().equals(clazz)) {          GenericMethod genericMethod=new GenericMethod(method,clazz);          addDependencies(genericMethod,1);        }      }    }    for (    Field field : TestClusterUtils.getFields(clazz)) {      logger.info("Checking target field " + field);      if (TestUsageChecker.canUse(field,clazz)) {        GenericField genericField=new GenericField(field,clazz);        addDependencies(genericField,1);        cluster.addGenerator(new GenericClass(field.getGenericType()),genericField);        logger.debug("Adding field " + field);        final boolean isFinalField=isFinalField(field);        if (!isFinalField) {          logger.debug("Is not final");          if (field.getDeclaringClass().equals(clazz))           cluster.addTestCall(new GenericField(field,clazz));          cluster.addModifier(new GenericClass(clazz),genericField);        } else {          logger.debug("Is final");          if (Modifier.isStatic(field.getModifiers()) && !field.getType().isPrimitive()) {            logger.debug("Is static non-primitive");            try {              Object o=field.get(null);              if (o == null) {                logger.info("Field is not yet initialized: " + field);              } else {                Class<?> actualClass=o.getClass();                logger.debug("Actual class is " + actualClass);                if (!actualClass.isAssignableFrom(genericField.getRawGeneratedType()) && genericField.getRawGeneratedType().isAssignableFrom(actualClass)) {                  GenericField superClassField=new GenericField(field,clazz);                  cluster.addGenerator(new GenericClass(actualClass),superClassField);                }              }            } catch (            IllegalAccessException e) {              logger.error(e.getMessage());            }          }        }      } else {        logger.debug("Can't use field " + field);      }    }    analyzedClasses.add(clazz);    cluster.getAnalyzedClasses().add(clazz);  }  if (Properties.INSTRUMENT_PARENT) {    for (    String superClass : inheritanceTree.getSuperclasses(Properties.TARGET_CLASS)) {      try {        Class<?> superClazz=TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(superClass);        dependencies.add(new DependencyPair(0,superClazz));      } catch (      ClassNotFoundException e) {        logger.error("Problem for " + Properties.TARGET_CLASS + ". Class not found: "+ superClass,e);      }    }  }  if (Properties.HANDLE_STATIC_FIELDS) {    GetStaticGraph getStaticGraph=GetStaticGraphGenerator.generate(Properties.TARGET_CLASS);    Map<String,Set<String>> staticFields=getStaticGraph.getStaticFields();    for (    String className : staticFields.keySet()) {      logger.info("Adding static fields to cluster for class " + className);      Class<?> clazz;      try {        clazz=TestClusterUtils.getClass(className);      } catch (      ExceptionInInitializerError ex) {        logger.debug("Class class init caused exception " + className);        continue;      }      if (clazz == null) {        logger.debug("Class not found " + className);        continue;      }      if (!TestUsageChecker.canUse(clazz))       continue;      Set<String> fields=staticFields.get(className);      for (      Field field : TestClusterUtils.getFields(clazz)) {        if (!TestUsageChecker.canUse(field,clazz))         continue;        if (fields.contains(field.getName())) {          if (!isFinalField(field)) {            logger.debug("Is not final");            cluster.addTestCall(new GenericField(field,clazz));          }        }      }    }    PutStaticMethodCollector collector=new PutStaticMethodCollector(Properties.TARGET_CLASS,staticFields);    Set<MethodIdentifier> methodIdentifiers=collector.collectMethods();    for (    MethodIdentifier methodId : methodIdentifiers) {      Class<?> clazz=TestClusterUtils.getClass(methodId.getClassName());      if (clazz == null)       continue;      if (!TestUsageChecker.canUse(clazz))       continue;      Method method=TestClusterUtils.getMethod(clazz,methodId.getMethodName(),methodId.getDesc());      if (method == null)       continue;      GenericMethod genericMethod=new GenericMethod(method,clazz);      cluster.addTestCall(genericMethod);    }  }  logger.info("Finished analyzing target class");}  }
class C{  public VNXeCommandJob createLunSnap(LunSnapCreateParam param) throws VNXeException {  return postRequestAsync(param);}  }
class C{  public NotificationChain basicSetBindingPattern(BindingPattern newBindingPattern,NotificationChain msgs){  BindingPattern oldBindingPattern=bindingPattern;  bindingPattern=newBindingPattern;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FORMAL_PARAMETER__BINDING_PATTERN,oldBindingPattern,newBindingPattern);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected void revalidate(){  valid=true;}  }
class C{  private void validateMetroPoint(VirtualPool virtualPool){  if (virtualPool.getMetroPoint() != null && virtualPool.getMetroPoint()) {    String highAvailability=virtualPool.getHighAvailability();    if (highAvailability == null || !VirtualPool.HighAvailabilityType.vplex_distributed.name().equals(highAvailability) || !VirtualPool.vPoolSpecifiesProtection(virtualPool)) {      throw APIException.badRequests.metroPointConfigurationNotSupported();    }  }}  }
class C{  public static void toggleCaseSensitiveSearch(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01756: Graph argument can not be null");  graph.getSettings().getSearchSettings().setSearchCaseSensitive(!graph.getSettings().getSearchSettings().getSearchCaseSensitive());}  }
class C{  public void restoreFinished(int error){}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public final void testGetTrustAnchor() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PKIXCertPathValidatorResult vr=new PKIXCertPathValidatorResult(ta,null,testPublicKey);  assertSame(ta,vr.getTrustAnchor());}  }
class C{  public static String formatDateTime(final Date date){  Preconditions.checkNotNull(date,"Error: Date argument can't be null.");  return DateFormat.getDateTimeInstance().format(date);}  }
class C{  public void bindTree(Tree tree){  if (this.tree != null) {    handlerRegistration.removeHandler();  }  this.tree=tree;  if (tree != null) {    if (handlerRegistration == null) {      handlerRegistration=new GroupingHandlerRegistration();    }    handlerRegistration.add(addBeforeLoadHandler(cTreeNodeLoaderHandler));    handlerRegistration.add(addLoadHandler(cTreeNodeLoaderHandler));    handlerRegistration.add(addLoadExceptionHandler(cTreeNodeLoaderHandler));  }}  }
class C{  @Override protected void onStop(){  super.onStop();  mStopped=true;  mHandler.sendEmptyMessage(MSG_REALLY_STOPPED);  mFragments.dispatchStop();}  }
class C{  public void readTurns(final int[] columnsIndices,final BufferedReader reader) throws IOException {  String line=reader.readLine();  while (line != null && line.length() > 0) {    line=reader.readLine();  }}  }
class C{  public void createUnderlying(){  if (options != null) {    options.createUnderlying();    if (Platform.isFxApplicationThread()) {      line=new com.lynden.gmapsfx.shapes.Polyline(options.convert());    }  }}  }
class C{  public boolean isSetServiceName(){  return this.serviceName != null;}  }
class C{  public void selectAll(){  m_text.selectAll();}  }
class C{  public void incCancels(){  int pc=pendingCancels.incrementAndGet();  if (pc > MAX_PENDING_CANCELS) {    pc=pendingCancels.getAndSet(0);    if (pc > MAX_PENDING_CANCELS) {      this.timer.timerPurge();    } else {      pendingCancels.addAndGet(pc);    }  }}  }
class C{  protected LibraryInfo generateLibraryInfo(File javaHome,File javaExecutable){  LibraryInfo info=null;  IPath classesZip=new Path(javaHome.getAbsolutePath()).append(LIB).append("classes.zip");  if (classesZip.toFile().exists()) {    return new LibraryInfo("1.1.x",new String[]{classesZip.toOSString()},new String[0],new String[0]);  }  if (info == null) {    Launching.log(NLS.bind("Failed to retrieve default libraries for {0}",new String[]{javaHome.getAbsolutePath()}));  }  return info;}  }
class C{  protected void elementChanged(Openable element){  close(element);}  }
class C{  public Vector3f mulTranspose(Matrix3fc mat){  return mul(mat,this);}  }
class C{  public boolean needSave(boolean onlyRealChange){  return needSave(m_rowChanged,onlyRealChange);}  }
class C{  public static boolean isBoolean(IVariableBinding field){  return field.getType().getBinaryName().equals(Signature.SIG_BOOLEAN);}  }
class C{  private void sendActionDownAndUp(MotionEvent prototype,int policyFlags){  final int pointerId=prototype.getPointerId(prototype.getActionIndex());  final int pointerIdBits=(1 << pointerId);  sendMotionEvent(prototype,MotionEvent.ACTION_DOWN,pointerIdBits,policyFlags);  sendMotionEvent(prototype,MotionEvent.ACTION_UP,pointerIdBits,policyFlags);}  }
class C{  @Override public void process(V tuple){  if (values.containsKey(tuple)) {    Integer count=values.remove(tuple);    values.put(tuple,count + 1);  } else {    values.put(tuple,1);  }}  }
class C{  public Model validateNodeAgainstShape(Dataset dataset,URI shapesGraphURI,Node focusNode,Node shape,Resource minSeverity,Predicate<SHConstraint> constraintFilter,Function<RDFNode,String> labelFunction,ProgressMonitor monitor){  Model results=JenaUtil.createMemoryModel();  Model oldResults=getCurrentResultsModel();  setCurrentResultsModel(results);  addResourceViolations(dataset,shapesGraphURI,focusNode,shape,SHACLUtil.getAllConstraintProperties(true),minSeverity,constraintFilter,results,labelFunction,monitor);  setCurrentResultsModel(oldResults);  return results;}  }
class C{  public boolean equals(java.lang.Object ts){  if (ts instanceof Timestamp) {    return this.equals((Timestamp)ts);  } else {    return false;  }}  }
class C{  public static GeoTimeSerie compensateResets(GeoTimeSerie gts,boolean resethigher){  GeoTimeSerie filled=gts.clone();  TYPE type=gts.getType();  if (TYPE.LONG != type && TYPE.DOUBLE != type) {    return filled;  }  sort(filled);  long lastl=TYPE.LONG == type ? filled.longValues[0] : 0L;  long offsetl=0L;  double lastd=TYPE.DOUBLE == type ? filled.doubleValues[0] : 0.0D;  double offsetd=0.0D;  for (int i=1; i < filled.values; i++) {    if (TYPE.LONG == type) {      long value=filled.longValues[i];      if (!resethigher) {        if (value < lastl) {          offsetl+=lastl;        }        lastl=value;      } else {        if (value > lastl) {          offsetl+=lastl;        }        lastl=value;      }      filled.longValues[i]=value + offsetl;    } else {      double value=filled.doubleValues[i];      if (!resethigher) {        if (value < lastd) {          offsetd+=lastd;        }        lastd=value;      } else {        if (value > lastd) {          offsetd+=lastd;        }        lastd=value;      }      filled.doubleValues[i]=value + offsetd;    }  }  return filled;}  }
class C{  public boolean isNoGrid(){  return noGrid;}  }
class C{  public boolean write(byte[] buf1,int off1,int len1,byte[] buf2,int off2,int len2,boolean isEnd) throws IOException {  if (len1 == 0) {    write(buf2,off2,len2,isEnd);    return true;  } else   return false;}  }
class C{  public static void pushTx(String tx,String apiCode) throws APIException, IOException {  Map<String,String> params=new HashMap<String,String>();  params.put("tx",tx);  if (apiCode != null) {    params.put("api_code",apiCode);  }  HttpClient.getInstance().post("pushtx",params);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.333 -0500",hash_original_method="4BD897B5832A55E4A60E9B49C4611708",hash_generated_method="A56AA34F6163DB735767BAFF47EB85B0") public PAssociatedURIHeader createPAssociatedURIHeader(Address assocURI){  if (assocURI == null)   throw new NullPointerException("null associatedURI!");  PAssociatedURI associatedURI=new PAssociatedURI();  associatedURI.setAddress(assocURI);  return associatedURI;}  }
class C{  @Override public void run(){  if (DEBUG)   Log.d(TAG,"Camera thread start");  Looper.prepare();synchronized (mReadyFence) {    mHandler=new CameraHandler(this);    mIsRunning=true;    mReadyFence.notify();  }  Looper.loop();  if (DEBUG)   Log.d(TAG,"Camera thread finish");synchronized (mReadyFence) {    mHandler=null;    mIsRunning=false;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (!Sage.EMBEDDED && stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    return Boolean.valueOf(((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).canCacheAuthentication());  }  return Boolean.FALSE;}  }
class C{  public boolean addService(Class serviceClass,BeanContextServiceProvider bcsp){  return addService(serviceClass,bcsp,true);}  }
class C{  public static MockSwitch notTriggeredSwitch(){  MockSwitch s=new MockSwitch();  s.setNotTriggered();  return s;}  }
class C{  @Deprecated public Boolean isHod(final Long assignId){  final List<HeadOfDepartments> hodList=employeeDepartmentRepository.getAllHodDepartments(assignId);  return !hodList.isEmpty();}  }
class C{  public void testRedeploySharedMode() throws Exception {  depMode=DeploymentMode.SHARED;  processTest(true,false);}  }
class C{  public QueryBuilder<T,R> addOrder(Ordering... orders){  return addOrder(Arrays.asList(orders));}  }
class C{  public static void error(ErrorMessages message,String data){  errors++;  err(NL + "Error: " + ErrorMessages.get(message,data));}  }
class C{  public String toString(){  return "move " + FreeCellNode.out(card) + " from column "+ nth+ " to foundation.";}  }
class C{  @Override protected void initListeners(){}  }
class C{  @Override public Iterator<Node<Value>> iterator(){  return nodes.iterator();}  }
class C{  @Override public boolean onMyLocationButtonClick(){  WritableMap event=Arguments.createMap();  event.putString("event","didTapMyLocationButtonForMapView");  reactContext.getJSModule(RCTEventEmitter.class).receiveEvent(mapView.getId(),"topChange",event);  return false;}  }
class C{  public static Map createConcurrentMap(int size){  Map map=null;  try {    Class cls=Class.forName("java.util.concurrent.ConcurrentHashMap");    Class constructorArgs[]=new Class[]{Integer.TYPE};    Constructor ct=cls.getConstructor(constructorArgs);    Object[] params=new Object[]{new Integer(size)};    map=(Map)ct.newInstance(params);  } catch (  Exception e) {    map=Collections.synchronizedMap(new HashMap(size));  }  return map;}  }
class C{  private List<KV<ByteString,ByteString>> generateTableData(int numRows){  List<KV<ByteString,ByteString>> testData=new ArrayList<>(numRows);  for (int i=0; i < numRows; ++i) {    ByteString key=ByteString.copyFromUtf8(String.format("key%09d",i));    ByteString value=ByteString.copyFromUtf8(String.format("value%09d",i));    testData.add(KV.of(key,value));  }  return testData;}  }
class C{  protected IBuffer openBuffer(IProgressMonitor pm,Object info) throws JavaModelException {  IType outerMostEnclosingType=getOuterMostEnclosingType();  IBuffer buffer=getBufferManager().getBuffer(outerMostEnclosingType.getClassFile());  if (buffer == null) {    SourceMapper mapper=getSourceMapper();    IBinaryType typeInfo=info instanceof IBinaryType ? (IBinaryType)info : null;    if (mapper != null) {      buffer=mapSource(mapper,typeInfo,outerMostEnclosingType.getClassFile());    }  }  return buffer;}  }
class C{  @Override public synchronized void disconnectionNotification(String eventName,Object source){  List<Object> listenees=m_listenees.get(eventName);  if (listenees != null) {    listenees.remove(source);    if (listenees.size() == 0) {      m_listenees.remove(eventName);    }  }  if (eventName.compareTo("instance") == 0) {    stop();  }}  }
class C{  public GraphIOException(){  super();}  }
class C{  public Object visit(ASTMethod node,Object data){  return showNode(node,data);}  }
class C{  public void mark(int limit){}  }
class C{  protected void emit_ObjectLiteral_CommaKeyword_2_2_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public boolean isSetId(){  return EncodingUtils.testBit(issetBitfield,ID_ISSET_ID);}  }
class C{  public void testTruncate() throws Exception {  SchemaChangeFilter scf=new SchemaChangeFilter();  filterHelper.setFilter(scf);  ReplDBMSEvent e=filter(filterHelper,0,"foo","truncate bar.foo");  assertEventPropertyNull(e,"schema_change");  assertEventProperty(e,"truncate");  assertStatementProperty(e,ReplOptionParams.OPERATION_NAME);  assertStatementProperty(e,ReplOptionParams.SCHEMA_NAME);  assertStatementProperty(e,ReplOptionParams.TABLE_NAME);  filterHelper.done();}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("roundrect iterator out of bounds");  }  double ctrls[]=ctrlpts[index];  int nc=0;  for (int i=0; i < ctrls.length; i+=4) {    coords[nc++]=(float)(x + ctrls[i + 0] * w + ctrls[i + 1] * aw);    coords[nc++]=(float)(y + ctrls[i + 2] * h + ctrls[i + 3] * ah);  }  if (affine != null) {    affine.transform(coords,0,coords,0,nc / 2);  }  return types[index];}  }
class C{  public void assignExportPolicyToVolume(String fsName,String policyName,String exportPath){  try {    NaElement result=null;    NaElement volumeElem=new NaElement("volume-modify-iter");    NaElement volumeIdAttrs=new NaElement("volume-id-attributes");    volumeIdAttrs.addNewChild("name",fsName);    NaElement query=new NaElement("query");    NaElement volumeAttr=new NaElement("volume-attributes");    volumeAttr.addChildElem(volumeIdAttrs);    query.addChildElem(volumeAttr);    volumeElem.addChildElem(query);    NaElement attrs=new NaElement("attributes");    NaElement volumeAttrs=new NaElement("volume-attributes");    NaElement volumeExportAttrs=new NaElement("volume-export-attributes");    volumeExportAttrs.addNewChild("policy",fsName);    volumeAttrs.addChildElem(volumeExportAttrs);    attrs.addChildElem(volumeAttrs);    volumeElem.addChildElem(attrs);    volumeElem.addNewChild("return-failure-list",String.valueOf(true));    result=server.invokeElem(volumeElem);    log.info("Failure list size " + result.getChildByName("failure-list").getChildren().size());    if (!result.getChildByName("failure-list").getChildren().isEmpty()) {      log.error("Failed to modify Export Policy of File System : " + fsName);    }  } catch (  IllegalArgumentException e) {    deleteExportPolicy(policyName,fsName);    String msg="Failed to modify volume on path: " + (mountPath != null ? mountPath : exportPath);    log.error(msg,e);    throw new NetAppCException(msg,e);  }catch (  Exception e) {    deleteExportPolicy(policyName,fsName);    String msg="Failed to modify volume on path: " + (mountPath != null ? mountPath : exportPath);    log.error(msg,e);    throw new NetAppCException(msg,e);  }}  }
class C{  private void expand(StringBuilder sb,int index,int length){  StringBuilder replacement=new StringBuilder("(");  for (int i=0; i < length; i++) {    replacement.append("?");    if (i + 1 < length) {      replacement.append(", ");    }  }  replacement.append(")");  sb.replace(index,index + 1,replacement.toString());}  }
class C{  private void runCommercial(int length){  saveSettings();  if (useCommercialDelay.isSelected()) {    scheduleCommercial(length);  } else {    runCommercialNow(length);  }}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public static void download(long globalId){  User user=new User();  user.globalId=globalId;  List<Review> reviews=Server.reviews(user);  if (reviews != null) {    int size=reviews.size();    for (int i=0; i < size; i++) {      add(reviews.get(i));    }  }}  }
class C{  void sqsubAction(NodeRepresentation nodeRep){  int idx=nodeRep.getParentIndex();  Vector<NodeRepresentation> parentVec=nodeRep.parentVector;  if (parentVec == this.assumeReps) {    this.chosenSplit=idx;  }  Decomposition decomp=nodeRep.decomposition;  hasChanged=true;  if (decomp.definedOp != null) {    goalDefinitions.add(decomp.definedOp);  }  nodeRep.nodeType=NodeRepresentation.OR_DECOMP;  nodeRep.nodeSubtype=NodeRepresentation.OTHER_TYPE;  nodeRep.children=new Vector<Vector<NodeRepresentation>>();  for (int i=0; i < decomp.children.size(); i++) {    Vector<NodeRepresentation> repVec=new Vector<NodeRepresentation>();    nodeRep.children.add(repVec);    NodeRepresentation rep=decompositionChildToNodeRep(nodeRep,i,repVec,nodeRep);    if (i == 1) {      rep.nodeType=NodeRepresentation.OTHER_NODE;      rep.nodeSubtype=NodeRepresentation.OTHER_TYPE;      rep.nodeText=prependToStringArray(rep.nodeText,"UNCHANGED ");    }    repVec.add(rep);  }  raiseWindow();}  }
class C{  public boolean hasPrimary(){  return getPrimary() != null;}  }
class C{  public boolean isRaised3DText(){  return ((textDecoration & TEXT_DECORATION_3D) != 0);}  }
class C{  @Override public void onServerStart(){  if (!_isClusterStarted) {    return;  }  for (  TableKraken table : getTables()) {    table.start();  }}  }
class C{  public void testGetBeaHome(){  this.container.setBeaHome(BEA_HOME);  assertEquals(BEA_HOME,this.container.getBeaHome());}  }
class C{  public Period(ICalDate startDate,Duration duration){  this.startDate=startDate;  this.duration=duration;  endDate=null;}  }
class C{  public int costTo(Constellation other){  return CONSTELLATION_COSTS[getTransmittedValue()][other.getTransmittedValue()];}  }
class C{  public static final long encodeCeil(double latitude,double longitude){  checkLatitude(latitude);  checkLongitude(longitude);  final int latEnc=encodeLatitudeCeil(latitude) ^ 0x80000000;  final int lonEnc=encodeLongitudeCeil(longitude) ^ 0x80000000;  return BitUtil.interleave(lonEnc,latEnc);}  }
class C{  public static int copy(InputStream in,OutputStream out) throws IOException {  assert in != null;  assert out != null;  byte[] buf=new byte[BUF_SIZE];  int cnt=0;  for (int n; (n=in.read(buf)) > 0; ) {    out.write(buf,0,n);    cnt+=n;  }  return cnt;}  }
class C{  public final double sin(){  return Math.sin(this.radians);}  }
class C{  public void deleteActiveLinks(){  if (selectedLinkList.isEmpty())   return;  for (  Link link : selectedLinkList) {    pairNodeNode p=deleteLink(link);    diffManager.saveState(diffManager.cloneLink(link),DifferenceManager.type.DELETE,p.node1,p.node2,null,null,null,null,null,null);    activeLink=null;  }  selectedLinkList.clear();  controls.updateButtons();  activeLink=null;  repaint();}  }
class C{  @SuppressWarnings("unchecked") public Response onCommand(POP3Session session,Request request){  POP3Response response=null;  String parameters=request.getArgument();  if (session.getHandlerState() == POP3Session.TRANSACTION) {    List<MessageMetaData> uidList=(List<MessageMetaData>)session.getAttachment(POP3Session.UID_LIST,State.Transaction);    List<String> deletedUidList=(List<String>)session.getAttachment(POP3Session.DELETED_UID_LIST,State.Transaction);    try {      String identifier=session.getUserMailbox().getIdentifier();      if (parameters == null) {        response=new POP3Response(POP3Response.OK_RESPONSE,"unique-id listing follows");        for (int i=0; i < uidList.size(); i++) {          MessageMetaData metadata=uidList.get(i);          if (deletedUidList.contains(metadata.getUid()) == false) {            StringBuilder responseBuffer=new StringBuilder().append(i + 1).append(" ").append(metadata.getUid(identifier));            response.appendLine(responseBuffer.toString());          }        }        response.appendLine(".");      } else {        int num=0;        try {          num=Integer.parseInt(parameters);          MessageMetaData metadata=MessageMetaDataUtils.getMetaData(session,num);          if (metadata == null) {            StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") does not exist.");            return new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());          }          if (deletedUidList.contains(metadata.getUid()) == false) {            StringBuilder responseBuffer=new StringBuilder(64).append(num).append(" ").append(metadata.getUid(identifier));            response=new POP3Response(POP3Response.OK_RESPONSE,responseBuffer.toString());          } else {            StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") already deleted.");            response=new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());          }        } catch (        IndexOutOfBoundsException npe) {          StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") does not exist.");          response=new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());        }catch (        NumberFormatException nfe) {          StringBuilder responseBuffer=new StringBuilder(64).append(parameters).append(" is not a valid number");          response=new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());        }      }    } catch (    IOException e) {      return POP3Response.ERR;    }  } else {    return POP3Response.ERR;  }  return response;}  }
class C{  public void testConstructorSignBytesPositive1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15};  int aSign=1;  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  @SuppressWarnings("unchecked") @Override protected void fillBuffer(){  int oldP=p;  int index=tokens.size();  Token t=tokenSource.nextToken();  while (t != null && t.getType() != CharStream.EOF) {    int type=t.getType();    if (type == InternalN4JSLexer.Solidus || type == InternalN4JSLexer.SolidusEqualsSign || type == InternalN4JSLexer.RightCurlyBracket) {      t.setTokenIndex(index);      tokens.add(t);      index++;      break;    }    boolean discard=false;    if (channelOverrideMap != null) {      Integer channelI=(Integer)channelOverrideMap.get(Integer.valueOf(type));      if (channelI != null) {        t.setChannel(channelI.intValue());      }    }    if (discardSet != null && discardSet.contains(Integer.valueOf(type))) {      discard=true;    } else     if (discardOffChannelTokens && t.getChannel() != this.channel) {      discard=true;    }    if (!discard) {      t.setTokenIndex(index);      tokens.add(t);      index++;    }    t=tokenSource.nextToken();  }  p=oldP == -1 ? 0 : oldP;  p=skipOffTokenChannels(p);}  }
class C{  public static Object invokeMethod(Object instance,String className,PackageType packageType,String methodName,Object... arguments) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException {  return invokeMethod(instance,packageType.getClass(className),methodName,arguments);}  }
class C{  public void addToRoomPrefs(String roomPref,String level){  this.roomPrefs.add(roomPref);  this.roomPrefLevels.add(level);}  }
class C{  public static <T>T[] array(T... elements){  return elements;}  }
class C{  @Override public boolean isBusy(){  if (m_executorPool == null || (m_executorPool.getQueue().size() == 0 && m_executorPool.getActiveCount() == 0) && m_state == IDLE) {    return false;  }  return true;}  }
class C{  public int score(){  return score;}  }
class C{  public void testDoCheckWithNullTextToCheck(){  LOGGER.debug("doCheckWithNullTextToCheck");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);  expectLastCall().once();  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn(null);  TextEndsWithChecker instance=new TextEndsWithChecker(mockTextElementBuilder,EXTENSION_NOM_NAME,DETECTION_MSG);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);}  }
class C{  public static ContentValues[] values(long restaurantId,Place place){  List<String> days=place.getFormattedOpeningHours();  if (!days.isEmpty()) {    ContentValues[] vals=new ContentValues[days.size()];    for (int i=0, length=vals.length; i < length; i++) {      ContentValues val=new ContentValues(3);      val.put(RESTAURANT_ID,restaurantId);      val.put(DAY,i);      val.put(HOURS,days.get(i));      vals[i]=val;    }    return vals;  }  return null;}  }
class C{  @Override public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  final Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(CategoryAnchor.START)) {    return CategoryAnchor.START;  } else   if (this.equals(CategoryAnchor.MIDDLE)) {    return CategoryAnchor.MIDDLE;  } else   if (this.equals(CategoryAnchor.END)) {    return CategoryAnchor.END;  }  return null;}  }
