class C{  public void startProcessing(){  if (sLogger.isActivated()) {    sLogger.debug("Start media processor");  }  interrupted=false;  start();}  }
class C{  public boolean hasFullMessage(){  return fullMessage;}  }
class C{  public void startTraceSession(String traceSessionName,String configuration) throws SQLException {  if (configuration == null || configuration.equals("")) {    throw new SQLException("No configuration provided");  }  if (traceSessionName == null) {    traceSessionName="";  }synchronized (this) {    OutputStream currentLogger=getLogger();    if (currentLogger instanceof TraceStream) {      currentLogger=((TraceStream)currentLogger).unwrap();    }    setLogger(new TraceStream(currentLogger,traceSessionName));    FbService service=attachServiceManager();    ServiceRequestBuffer traceSPB=getTraceSPB(service,isc_action_svc_trace_start,traceSessionName,configuration);    Thread t=new Thread(new TraceTask(service,traceSPB));    t.start();  }}  }
class C{  @Deprecated public static <A>List<A> fill(int len,A init){  List<A> l=nil();  for (int i=0; i < len; i++)   l=new List<A>(init,l);  return l;}  }
class C{  public void move(float x,float y){  mStartingX=x;  mStartingY=y;  clampStartingPosition();}  }
class C{  private DatabaseHelper(Context c){  helper=new DaoMaster.DevOpenHelper(c,DATABASE_NAME);  LOCAL=c.getString(R.string.local);}  }
class C{  public static long readVarLong(ByteBuffer buff){  long x=buff.get();  if (x >= 0) {    return x;  }  x&=0x7f;  for (int s=7; s < 64; s+=7) {    long b=buff.get();    x|=(b & 0x7f) << s;    if (b >= 0) {      break;    }  }  return x;}  }
class C{  protected boolean isBackflush(){  super.setIsBackflush(pickcombo.getValue().equals(1));  return super.isBackflush();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_complexAttribute_2_();}  }
class C{  public boolean isDescending(){  return descending;}  }
class C{  public NamingEnumeration listBindings(Name name) throws NamingException {  checkIsDestroyed();  Name parsedName=getParsedName(name);  if (parsedName.size() == 0) {    Vector bindings=new Vector();    Iterator iterat=ctxMaps.keySet().iterator();    while (iterat.hasNext()) {      String bindingName=(String)iterat.next();      bindings.addElement(new Binding(bindingName,ctxMaps.get(bindingName)));    }    return new NamingEnumerationImpl(bindings);  } else {    Object subContext=ctxMaps.get(parsedName.get(0));    if (subContext instanceof Context) {      Name nextLayer=nameParser.parse("");      if (parsedName.size() > 1) {        nextLayer=parsedName.getSuffix(1);      }      return ((Context)subContext).list(nextLayer);    }    if (subContext == null && !ctxMaps.containsKey(parsedName.get(0))) {      throw new NameNotFoundException(LocalizedStrings.ContextImpl_NAME_0_NOT_FOUND.toLocalizedString(name));    } else {      throw new NotContextException(LocalizedStrings.ContextImpl_EXPECTED_CONTEXT_BUT_FOUND_0.toLocalizedString(subContext));    }  }}  }
class C{  public LSH(){}  }
class C{  public MoreGuards_ createMoreGuards_(){  MoreGuards_Impl moreGuards_=new MoreGuards_Impl();  return moreGuards_;}  }
class C{  public String name(){  return event;}  }
class C{  public static LinkedList<diff_match_patch.Diff> splitDiffsOnNewline(LinkedList<diff_match_patch.Diff> diffs){  LinkedList<diff_match_patch.Diff> newDiffs=new LinkedList<diff_match_patch.Diff>();  String[] parts;  int lengthMinusOne;  for (  diff_match_patch.Diff diff : diffs) {    parts=diff.text.split("\n",-1);    if (parts.length == 1) {      newDiffs.add(diff);      continue;    }    lengthMinusOne=parts.length - 1;    for (int i=0; i < lengthMinusOne; i++) {      newDiffs.add(new diff_match_patch.Diff(diff.operation,parts[i] + "\n"));    }    if (!parts[lengthMinusOne].isEmpty()) {      newDiffs.add(new diff_match_patch.Diff(diff.operation,parts[lengthMinusOne]));    }  }  return newDiffs;}  }
class C{  public Header(){  super();}  }
class C{  @Override void updateForDecoderMfgID(String pMfg,int pMfgID,int pModelID){  String msg="Found mfg " + pMfgID + " ("+ pMfg+ ") version "+ pModelID+ "; no such decoder defined";  log.warn(msg);  _statusLabel.setText(msg);  updateMfgListContents(pMfg);  updateMfgListWithoutTrigger(pMfg);  listDecodersFromMfg(pMfgID,pMfg);}  }
class C{  public boolean isNone(){  for (  int id : clusterIds) {    if (id != UNCLUSTERED) {      return false;    }  }  return true;}  }
class C{  private void warnIfNonManagedSchemaExists(){  if (!resourceName.equals(managedSchemaResourceName)) {    boolean exists=false;    SolrResourceLoader loader=config.getResourceLoader();    if (loader instanceof ZkSolrResourceLoader) {      ZkSolrResourceLoader zkLoader=(ZkSolrResourceLoader)loader;      String nonManagedSchemaPath=zkLoader.getConfigSetZkPath() + "/" + resourceName;      try {        exists=zkLoader.getZkController().pathExists(nonManagedSchemaPath);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        log.warn("",e);      }catch (      KeeperException e) {        log.warn("Error checking for the existence of the non-managed schema " + resourceName,e);      }    } else {      InputStream nonManagedSchemaInputStream=null;      try {        nonManagedSchemaInputStream=loader.openSchema(resourceName);        if (null != nonManagedSchemaInputStream) {          exists=true;        }      } catch (      IOException e) {      } finally {        IOUtils.closeQuietly(nonManagedSchemaInputStream);      }    }    if (exists) {      log.warn("The schema has been upgraded to managed, but the non-managed schema " + resourceName + " is still loadable.  PLEASE REMOVE THIS FILE.");    }  }}  }
class C{  protected GraphicsNode instantiateGraphicsNode(){  return null;}  }
class C{  public void paintFormattedTextFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static void main(java.lang.String[] args){  ServiceDialogTest pd=new ServiceDialogTest();  PrintService services[]=new PrintService[3];  services[1]=PrintServiceLookup.lookupDefaultPrintService();  FileOutputStream fos=null;  File f=null;  String mType="application/postscript";  DocFlavor flavor=DocFlavor.INPUT_STREAM.JPEG;  try {    f=new File("streamexample.ps");    fos=new FileOutputStream(f);    StreamPrintServiceFactory[] factories=StreamPrintServiceFactory.lookupStreamPrintServiceFactories(flavor,mType);    if (factories.length > 0) {      services[0]=factories[0].getPrintService(fos);    } else {      throw new RuntimeException("No StreamPrintService available which would support " + flavor);    }    services[2]=new TestPrintService("Test Printer");    HashPrintRequestAttributeSet prSet=new HashPrintRequestAttributeSet();    prSet.add(new Destination(new File("./dest.prn").toURI()));    PrintService selService=ServiceUI.printDialog(null,200,200,services,services[0],flavor,prSet);    Attribute attr[]=prSet.toArray();    for (int x=0; x < attr.length; x++) {      System.out.println(attr[x]);    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Vertex applyALL(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex result=null;  Vertex relationship=arguments.get(0).getTarget().applyQuotient(variables,network);  Vertex source=arguments.get(1).getTarget().applyQuotient(variables,network);  if (arguments.size() > 2) {    Vertex associate=arguments.get(2).getTarget().applyQuotient(variables,network);    Vertex associateRelationship=arguments.get(3).getTarget().applyQuotient(variables,network);    result=source.mostConsciousWithAssoiate(relationship,associate,associateRelationship);  } else {    List<Relationship> values=source.orderedRelationships(relationship);    if (values == null) {      Collection<Relationship> words=relationship.getRelationships(Primitive.WORD);      Set<Vertex> processed=new HashSet<Vertex>();      processed.add(relationship);      for (      Relationship word : words) {        Collection<Relationship> otherMeanings=word.getTarget().getRelationships(Primitive.MEANING);        if (otherMeanings != null) {          for (          Relationship meaning : otherMeanings) {            if (!processed.contains(meaning.getTarget())) {              processed.add(meaning.getTarget());              values=source.orderedRelationships(meaning.getTarget());              if (values != null) {                break;              }            }          }        }      }    }    if (values == null) {      result=network.createVertex(Primitive.NULL);    } else {      result=network.createInstance(Primitive.LIST);      int index=0;      for (      Relationship value : values) {        if (value.getCorrectness() > 0) {          if (index > 12) {            break;          }          result.addRelationship(Primitive.SEQUENCE,value.getTarget(),index);          index++;        }      }    }  }  if (result == null) {    result=network.createVertex(Primitive.NULL);  }  return result;}  }
class C{  public School endDate(SafeCalendar endDate){  this.endDate=endDate;  return this;}  }
class C{  public void open() throws IOException, UnsupportedAudioFileException {  if (mInputStream == null) {    mInputStream=AudioSystem.getAudioInputStream(mFile);  } else {    throw new IOException("Can't open wave source - is already opened");  }  AudioFormat format=mInputStream.getFormat();  mBytesPerFrame=format.getFrameSize();  if (format.getChannels() != 2 || format.getSampleSizeInBits() != 16) {    throw new IOException("Unsupported Wave Format - EXPECTED: 2 " + "channels 16-bit samples FOUND: " + mInputStream.getFormat().getChannels() + " channels "+ mInputStream.getFormat().getSampleSizeInBits()+ "-bit samples");  }  broadcast(0);}  }
class C{  public boolean isPrimaryForDurableClient(String durableClientId){  RemoteApplicationVM vm=(RemoteApplicationVM)this.getGemFireVM();  boolean isPrimary=false;  if (vm != null) {    isPrimary=vm.isPrimaryForDurableClient(durableClientId);  }  return isPrimary;}  }
class C{  public void rename(String newName){  this.name=newName;}  }
class C{  public final void clear(){  m_index=-1;}  }
class C{  private void validateText(Class type) throws Exception {  if (text != null) {    if (!elements.isEmpty()) {      throw new TextException("Text annotation %s used with elements in %s",text,type);    }    if (isComposite()) {      throw new TextException("Text annotation %s can not be used with paths in %s",text,type);    }  }}  }
class C{  public static String quoteJavaStringArray(String[] array){  if (array == null) {    return "null";  }  StatementBuilder buff=new StatementBuilder("new String[]{");  for (  String a : array) {    buff.appendExceptFirst(", ");    buff.append(quoteJavaString(a));  }  return buff.append('}').toString();}  }
class C{  @Override public void init(FilterConfig config) throws ServletException {  try {    expiry=Math.min(Math.max(MIN_EXPIRY,Long.parseLong(config.getInitParameter(CACHE_CONTROL))),MAX_EXPIRY);  } catch (  NumberFormatException nfe) {    LOGGER.warn("Failed to parse " + CACHE_CONTROL + " value.",nfe);    expiry=null;  }}  }
class C{  public static void validateOid(int[] oid){  if (oid == null) {    throw new NullPointerException("oid == null");  }  if (oid.length < 2) {    throw new IllegalArgumentException("OID MUST have at least 2 subidentifiers");  }  if (oid[0] > 2) {    throw new IllegalArgumentException("Valid values for first subidentifier are 0, 1 and 2");  } else   if (oid[0] != 2 && oid[1] > 39) {    throw new IllegalArgumentException("If the first subidentifier has 0 or 1 value the second subidentifier value MUST be less than 40");  }}  }
class C{  protected BusinessObjectData executeInitiateRestoreAfterStepImpl(BusinessObjectDataRestoreDto businessObjectDataRestoreDto){  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataRestoreDto.getBusinessObjectDataKey());  if (businessObjectDataRestoreDto.getException() != null) {    StorageUnitEntity originStorageUnitEntity=storageUnitDaoHelper.getStorageUnitEntity(businessObjectDataRestoreDto.getOriginStorageName(),businessObjectDataEntity);    StorageUnitStatusEntity newStorageUnitStatusEntity=storageUnitStatusDaoHelper.getStorageUnitStatusEntity(StorageUnitStatusEntity.DISABLED);    String oldStorageUnitStatus=originStorageUnitEntity.getStatus().getCode();    storageUnitDaoHelper.updateStorageUnitStatus(originStorageUnitEntity,newStorageUnitStatusEntity,StorageUnitStatusEntity.DISABLED);    businessObjectDataRestoreDto.setNewOriginStorageUnitStatus(newStorageUnitStatusEntity.getCode());    businessObjectDataRestoreDto.setOldOriginStorageUnitStatus(oldStorageUnitStatus);  }  BusinessObjectData businessObjectData=businessObjectDataHelper.createBusinessObjectDataFromEntity(businessObjectDataEntity);  return businessObjectData;}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatusUsers createUsers(String instanceId,ProvisioningSettings settings,List<ServiceUser> users) throws APPlatformException {  return null;}  }
class C{  default ExtendedTraversable<ReactiveSeq<T>> permutations(){  return stream().permutations();}  }
class C{  public static boolean validLocalAddress(String bindAddress){  InetAddress addr=null;  try {    addr=InetAddress.getByName(bindAddress);  } catch (  UnknownHostException ex) {    return false;  }  try {    Enumeration en=NetworkInterface.getNetworkInterfaces();    while (en.hasMoreElements()) {      NetworkInterface ni=(NetworkInterface)en.nextElement();      Enumeration en2=ni.getInetAddresses();      while (en2.hasMoreElements()) {        InetAddress check=(InetAddress)en2.nextElement();        if (check.equals(addr)) {          return true;        }      }    }  } catch (  SocketException sex) {    return true;  }  return false;}  }
class C{  public void addAll(T... items){  Collections.addAll(mItems,items);  notifyDataSetChanged();}  }
class C{  public IllegalBlockSizeException(String msg){  super(msg);}  }
class C{  public boolean isStaticPolyfillAware(){  return staticPolyfillAware;}  }
class C{  public AttributeType(WorkspaceComponent parent,String typeName,Class<?> dataType,boolean visible){  this(parent,typeName,null,dataType,visible);}  }
class C{  private void printvln(String msg){  if (verbose)   println(msg);}  }
class C{  public CredentialsNotAvailableException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  @Override public Instance generateExample() throws Exception {  Instance result;  int centroid;  double[] atts;  double magnitude;  double desiredMag;  double scale;  int i;  double label;  Random rand;  result=null;  rand=getRandom();  if (m_DatasetFormat == null) {    throw new Exception("Dataset format not defined.");  }  centroid=chooseRandomIndexBasedOnProportions(m_centroidWeights,rand);  label=m_centroidClasses[centroid];  atts=new double[getNumAttributes() + 1];  for (i=0; i < getNumAttributes(); i++) {    atts[i]=(rand.nextDouble() * 2.0) - 1.0;  }  atts[atts.length - 1]=label;  magnitude=0.0;  for (i=0; i < getNumAttributes(); i++) {    magnitude+=atts[i] * atts[i];  }  magnitude=Math.sqrt(magnitude);  desiredMag=rand.nextGaussian() * m_centroidStdDevs[centroid];  scale=desiredMag / magnitude;  for (i=0; i < getNumAttributes(); i++) {    atts[i]*=scale;    atts[i]+=m_centroids[centroid][i];    result=new DenseInstance(1.0,atts);  }  result.setDataset(m_DatasetFormat);  return result;}  }
class C{  public TestJFrame(){  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setBounds(100,100,800,600);  contentPane=new JPanel();  contentPane.setBorder(new EmptyBorder(5,5,5,5));  setContentPane(contentPane);  contentPane.setLayout(null);  BochsSegmentRegister bochsSegmentRegister=new BochsSegmentRegister();  bochsSegmentRegister.setBounds(66,89,134,28);  contentPane.add(bochsSegmentRegister);  JCheckBox btnNewButton=new JCheckBox("New button");  btnNewButton.setBounds(58,46,117,29);  contentPane.add(btnNewButton);  SegmentRegister segmentRegister=SegmentRegisterFactory.createSegmentRegister();  segmentRegister.setBounds(66,200,172,34);  contentPane.add(segmentRegister);}  }
class C{  public SyntaxScheme(boolean useDefaults){  styles=new Style[Token.NUM_TOKEN_TYPES];  if (useDefaults) {    restoreDefaults(null);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  double value;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  polyOrder=Integer.parseInt(args[2]);  if (polyOrder < 0) {    polyOrder=0;  }  if (polyOrder > 10) {    polyOrder=10;  }  if ((inputHeader.isEmpty()) || (outputHeader.isEmpty())) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    int totalNumCells=rows * cols;    double[] x=new double[totalNumCells];    double[] y=new double[totalNumCells];    double[] z=new double[totalNumCells];    double[] data;    int cellNum=0;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          x[cellNum]=image.getXCoordinateFromColumn(col);          y[cellNum]=image.getYCoordinateFromRow(row);          z[cellNum]=data[col];          cellNum++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    String inputHeaderShort=image.getShortHeaderFile();    image.close();    double rsquare=calculateEquation(x,y,z);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        value=getForwardCoordinates(output.getXCoordinateFromColumn(col),output.getYCoordinateFromRow(row));        output.setValue(row,col,value);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);    StringBuilder sb=new StringBuilder();    sb.append("TREND SURFACE ANALYSIS OUTPUT\n\n");    sb.append("Input File:\t").append(inputHeaderShort).append("\n");    sb.append("Polynomial Order:\t").append(polyOrder).append("\n\n");    sb.append("Coefficent #\t").append("Value\n");    for (int a=0; a < regressCoefficents.length; a++) {      sb.append((a + 1)).append("\t").append(regressCoefficents[a]).append("\n");    }    sb.append("\nR-square:\t").append(rsquare);    returnData(sb.toString());  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Pos3D(Entity entity){  this(entity.posX,entity.posY,entity.posZ);}  }
class C{  public UnknownObjectException(String s){  super(s);}  }
class C{  public Range(final IV from,final IV to){  if (!from.isNumeric())   throw new IllegalArgumentException("not numeric: " + from);  if (!to.isNumeric())   throw new IllegalArgumentException("not numeric: " + to);  this.from=from;  this.to=to;}  }
class C{  public static VirtualPool querySnapshotSessionSourceVPool(BlockObject sourceObj,DbClient dbClient){  URI sourceURI=sourceObj.getId();  URI vpoolURI=null;  if (URIUtil.isType(sourceURI,Volume.class)) {    vpoolURI=((Volume)sourceObj).getVirtualPool();  } else   if (URIUtil.isType(sourceURI,BlockSnapshot.class)) {    URI parentURI=((BlockSnapshot)sourceObj).getParent().getURI();    URIQueryResultList results=new URIQueryResultList();    dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeByAssociatedVolumesConstraint(parentURI.toString()),results);    Iterator<URI> resultsIter=results.iterator();    if (resultsIter.hasNext()) {      parentURI=resultsIter.next();    }    Volume parentVolume=dbClient.queryObject(Volume.class,parentURI);    vpoolURI=parentVolume.getVirtualPool();  }  if (vpoolURI == null) {    throw APIException.badRequests.invalidSnapshotSessionSource(sourceURI.toString());  }  VirtualPool vpool=dbClient.queryObject(VirtualPool.class,vpoolURI);  return vpool;}  }
class C{  public void addPlotConfigChangeEvent(PlotConfiguration newSource,PlotConfigurationChangeEvent changeEvent){  if (type != PlotConfigurationChangeType.META_CHANGE) {    throw new IllegalArgumentException("Wrong type. Only META_CHANGE is allowed!");  }  source=newSource;  plotConfigChangeEvents.add(changeEvent);}  }
class C{  public Element store(Object o){  Element element=new Element("perform");  CreateButtonModel g=(CreateButtonModel)o;  element.setAttribute("name",g.getClassName());  element.setAttribute("type","Button");  element.setAttribute("class",this.getClass().getName());  Element property=new Element("property");  property.setAttribute("name","systemPrefix");  property.setAttribute("value",g.getSystemPrefix());  element.addContent(property);  return element;}  }
class C{  public static DAOIndicatorSeries newInstance(String displayName){  final DAOIndicatorSeries returnInstance=new DAOIndicatorSeries();  returnInstance.setDisplayName(displayName);  return returnInstance;}  }
class C{  public FreeCellNode next(){  String line=sc.nextLine();  StringTokenizer st=new StringTokenizer(line,"., ");  int val=Integer.valueOf(st.nextToken());  if (val != deal) {    throw new NoSuchElementException("Deal number (" + deal + ") seems missing from input file for DealIterator.");  }  int[] deals=new int[52];  int idx=0;  while (st.hasMoreTokens()) {    deals[idx++]=Integer.valueOf(st.nextToken());  }  deal++;  return Deal.initialize(deals);}  }
class C{  public static ConnectionManager createInstance(Context context,RcsServiceControl rcsServiceControl,RcsServiceName... services){  Set<RcsServiceName> managedServices=new HashSet<>();  Collections.addAll(managedServices,services);  return createInstance(context,rcsServiceControl,managedServices);}  }
class C{  private void loadCountriesFile(){  ShapeAttributes commonAttrs=new ShapeAttributes();  commonAttrs.getInteriorColor().set(1.0f,1.0f,0.0f,0.5f);  commonAttrs.getOutlineColor().set(0.0f,0.0f,0.0f,1.0f);  commonAttrs.setOutlineWidth(3);  ShapeAttributes highlightAttrs=new ShapeAttributes();  highlightAttrs.getInteriorColor().set(1.0f,1.0f,1.0f,0.5f);  highlightAttrs.getOutlineColor().set(1.0f,1.0f,1.0f,1.0f);  highlightAttrs.setOutlineWidth(5);  BufferedReader reader=null;  try {    InputStream in=getResources().openRawResource(R.raw.world_political_boundaries);    reader=new BufferedReader(new InputStreamReader(in));    String line=reader.readLine();    List<String> headers=Arrays.asList(line.split(","));    final int GEOMETRY=headers.indexOf("WKT");    final int NAME=headers.indexOf("COUNTRY_NA");    final String WKT_START="\"POLYGON (";    final String WKT_END=")\"";    while ((line=reader.readLine()) != null) {      int featureBegin=line.indexOf(WKT_START) + WKT_START.length();      int featureEnd=line.indexOf(WKT_END,featureBegin) + WKT_END.length();      String feature=line.substring(featureBegin,featureEnd);      String attributes=line.substring(featureEnd + 1);      String[] fields=attributes.split(",");      Polygon polygon=new Polygon();      polygon.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);      polygon.setPathType(WorldWind.LINEAR);      polygon.setFollowTerrain(true);      polygon.setDisplayName(fields[1]);      polygon.setAttributes(new ShapeAttributes(commonAttrs));      polygon.getAttributes().setInteriorColor(new Color(random.nextFloat(),random.nextFloat(),random.nextFloat(),0.3f));      polygon.setHighlightAttributes(highlightAttrs);      int polyStart=feature.indexOf("(");      while (polyStart >= 0) {        int polyEnd=feature.indexOf(")",polyStart);        String poly=feature.substring(polyStart + 1,polyEnd);        List<Position> positions=new ArrayList<>();        String[] tuples=poly.split(",");        for (int i=0; i < tuples.length; i++) {          String[] xy=tuples[i].split(" ");          positions.add(Position.fromDegrees(Double.parseDouble(xy[1]),Double.parseDouble(xy[0]),0));        }        polygon.addBoundary(positions);        polyStart=feature.indexOf("(",polyEnd);      }      publishProgress(polygon);      this.numCountriesCreated++;    }  } catch (  IOException e) {    Logger.log(Logger.ERROR,"Exception attempting to read/parse world_highways file.");  } finally {    WWUtil.closeSilently(reader);  }}  }
class C{  @Timed @ExceptionMetered @GET @Path("{name}/groups") @Produces(APPLICATION_JSON) public Iterable<String> clientGroupsListing(@Auth AutomationClient automationClient,@PathParam("name") String name){  Client client=clientDAO.getClient(name).orElseThrow(null);  return aclDAO.getGroupsFor(client).stream().map(null).collect(toSet());}  }
class C{  static void testEvents(Path dir) throws IOException {  System.out.println("-- Standard Events --");  FileSystem fs=FileSystems.getDefault();  Path name=fs.getPath("foo");  try (WatchService watcher=fs.newWatchService()){    System.out.format("register %s for ENTRY_CREATE\n",dir);    WatchKey myKey=dir.register(watcher,new WatchEvent.Kind<?>[]{ENTRY_CREATE});    checkKey(myKey,dir);    Path file=dir.resolve("foo");    System.out.format("create %s\n",file);    Files.createFile(file);    takeExpectedKey(watcher,myKey);    checkExpectedEvent(myKey.pollEvents(),StandardWatchEventKinds.ENTRY_CREATE,name);    System.out.println("reset key");    if (!myKey.reset())     throw new RuntimeException("key has been cancalled");    System.out.println("OKAY");    System.out.format("register %s for ENTRY_DELETE\n",dir);    WatchKey deleteKey=dir.register(watcher,new WatchEvent.Kind<?>[]{ENTRY_DELETE});    if (deleteKey != myKey)     throw new RuntimeException("register did not return existing key");    checkKey(deleteKey,dir);    System.out.format("delete %s\n",file);    Files.delete(file);    takeExpectedKey(watcher,myKey);    checkExpectedEvent(myKey.pollEvents(),StandardWatchEventKinds.ENTRY_DELETE,name);    System.out.println("reset key");    if (!myKey.reset())     throw new RuntimeException("key has been cancalled");    System.out.println("OKAY");    Files.createFile(file);    System.out.format("register %s for ENTRY_MODIFY\n",dir);    WatchKey newKey=dir.register(watcher,new WatchEvent.Kind<?>[]{ENTRY_MODIFY});    if (newKey != myKey)     throw new RuntimeException("register did not return existing key");    checkKey(newKey,dir);    System.out.format("update: %s\n",file);    try (OutputStream out=Files.newOutputStream(file,StandardOpenOption.APPEND)){      out.write("I am a small file".getBytes("UTF-8"));    }     takeExpectedKey(watcher,myKey);    checkExpectedEvent(myKey.pollEvents(),StandardWatchEventKinds.ENTRY_MODIFY,name);    System.out.println("OKAY");    Files.delete(file);  } }  }
class C{  public Matrix4 offsetProjectionDepth(double depthOffset){  this.m[10]*=1 + depthOffset;  return this;}  }
class C{  private void makeCreditBalanceView() throws Exception {  handleTableCreation("credit balance data view",bigquery().query(CREDIT_BALANCE_DATA_SQL.put("SOURCE_DATASET",sourceDatasetId).put("DEST_DATASET",bigquery().getDatasetId()).build(),bigquery().buildDestinationTable("CreditBalanceData").description("Synthetic view of registrar credit balance information.").type(TableType.VIEW).build()));}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public TerminalPosition withRelativeColumn(int delta){  if (delta == 0) {    return this;  }  return withColumn(column + delta);}  }
class C{  private void initializeContent(){  initializeRatioSlider();  initializeChangeListeners();}  }
class C{  private void forwardContent(MessageType messageType,InputStream content){  for (  String ip : system.getSettings().remoteConnections.keySet()) {    int port=system.getSettings().remoteConnections.get(ip);    sendContent(messageType,content,ip,port);  }}  }
class C{  protected DateTimeConverter makeConverter(Object defaultValue){  return new DateConverter(defaultValue);}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  if (m_executorPool != null && (m_executorPool.getQueue().size() > 0 || m_executorPool.getActiveCount() > 0)) {    newVector.addElement("Stop");  }  return newVector.elements();}  }
class C{  public static void main(String[] args){  try {    String rootDirPath=".";    if (args.length == 1) {      if (args[0].startsWith(GeneratorUtils.ROOT_DIR_PARAMETER)) {        rootDirPath=args[0].substring(GeneratorUtils.ROOT_DIR_PARAMETER.length());      } else {        System.err.print("Wrong usage. There is only one allowed argument : " + GeneratorUtils.ROOT_DIR_PARAMETER);        System.exit(1);      }    }    File rootFolder=new File(rootDirPath);    System.out.println(" ------------------------------------------------------------------------ ");    System.out.println(String.format("Searching for GinModules in %s",rootFolder.getAbsolutePath()));    System.out.println(" ------------------------------------------------------------------------ ");    findGinModules(rootFolder);    generateExtensionManager(rootFolder);  } catch (  IOException e) {    System.err.println(e.getMessage());    System.exit(1);  }}  }
class C{  public void addElementController(ModelPrinter p){  mController.addElement(p);}  }
class C{  public ToStringBuilder append(final Object[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  protected static double computeChiSquared(int[] counts,final int size){  final double expect=size / (double)counts.length;  double chisq=0.;  for (int i=0; i < counts.length; i++) {    double v=Math.max(counts[i] - expect,expect - counts[i]) - .5;    chisq+=v > 0 ? (v * v) / expect : 0.;  }  return chisq;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.989 -0500",hash_original_method="4F0FF8B26009CA9D26EE500AEFE507EC",hash_generated_method="B50BC50C1E5B53A05883DBE2DB4550DB") public final MotionEvent split(int idBits){  MotionEvent ev=obtain();synchronized (gSharedTempLock) {    final int oldPointerCount=nativeGetPointerCount(mNativePtr);    ensureSharedTempPointerCapacity(oldPointerCount);    final PointerProperties[] pp=gSharedTempPointerProperties;    final PointerCoords[] pc=gSharedTempPointerCoords;    final int[] map=gSharedTempPointerIndexMap;    final int oldAction=nativeGetAction(mNativePtr);    final int oldActionMasked=oldAction & ACTION_MASK;    final int oldActionPointerIndex=(oldAction & ACTION_POINTER_INDEX_MASK) >> ACTION_POINTER_INDEX_SHIFT;    int newActionPointerIndex=-1;    int newPointerCount=0;    int newIdBits=0;    for (int i=0; i < oldPointerCount; i++) {      nativeGetPointerProperties(mNativePtr,i,pp[newPointerCount]);      final int idBit=1 << pp[newPointerCount].id;      if ((idBit & idBits) != 0) {        if (i == oldActionPointerIndex) {          newActionPointerIndex=newPointerCount;        }        map[newPointerCount]=i;        newPointerCount+=1;        newIdBits|=idBit;      }    }    if (newPointerCount == 0) {      throw new IllegalArgumentException("idBits did not match any ids in the event");    }    final int newAction;    if (oldActionMasked == ACTION_POINTER_DOWN || oldActionMasked == ACTION_POINTER_UP) {      if (newActionPointerIndex < 0) {        newAction=ACTION_MOVE;      } else       if (newPointerCount == 1) {        newAction=oldActionMasked == ACTION_POINTER_DOWN ? ACTION_DOWN : ACTION_UP;      } else {        newAction=oldActionMasked | (newActionPointerIndex << ACTION_POINTER_INDEX_SHIFT);      }    } else {      newAction=oldAction;    }    final int historySize=nativeGetHistorySize(mNativePtr);    for (int h=0; h <= historySize; h++) {      final int historyPos=h == historySize ? HISTORY_CURRENT : h;      for (int i=0; i < newPointerCount; i++) {        nativeGetPointerCoords(mNativePtr,map[i],historyPos,pc[i]);      }      final long eventTimeNanos=nativeGetEventTimeNanos(mNativePtr,historyPos);      if (h == 0) {        ev.mNativePtr=nativeInitialize(ev.mNativePtr,nativeGetDeviceId(mNativePtr),nativeGetSource(mNativePtr),newAction,nativeGetFlags(mNativePtr),nativeGetEdgeFlags(mNativePtr),nativeGetMetaState(mNativePtr),nativeGetButtonState(mNativePtr),nativeGetXOffset(mNativePtr),nativeGetYOffset(mNativePtr),nativeGetXPrecision(mNativePtr),nativeGetYPrecision(mNativePtr),nativeGetDownTimeNanos(mNativePtr),eventTimeNanos,newPointerCount,pp,pc);      } else {        nativeAddBatch(ev.mNativePtr,eventTimeNanos,pc,0);      }    }    return ev;  }}  }
class C{  public T caretDecoding(boolean enable){  caretDecoding=enable;  return this_;}  }
class C{  public static boolean isConnectedMobile(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.167 -0500",hash_original_method="D1B05D947AED4866E4130EF727A894C9",hash_generated_method="7AA746A32F115FA8E51ACF0B69B1B25D") private PhoneLookup(){}  }
class C{  void nodeInsert(char opcode,int opdata,int insertAt){  ensure(RE.nodeSize);  System.arraycopy(instruction,insertAt,instruction,insertAt + RE.nodeSize,lenInstruction - insertAt);  instruction[insertAt]=opcode;  instruction[insertAt + RE.offsetOpdata]=(char)opdata;  instruction[insertAt + RE.offsetNext]=0;  lenInstruction+=RE.nodeSize;}  }
class C{  public double predict(U u,IdPref<I> pref){  return predict(user2uidx(u),uPrefFun.apply(pref));}  }
class C{  public Vector2 round(){  return new Vector2(Math.round(x),Math.round(z));}  }
class C{  public String lset(final byte[] key,final long index,final byte[] value){  checkIsInMulti();  client.lset(key,index,value);  return client.getStatusCodeReply();}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public void associateWorkItem(final WorkItem workItem){  associateWorkItems(new WorkItem[]{workItem});}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public Address serverAddress(){  return serverAddress;}  }
class C{  public static String plus(StringBuffer left,String value){  return left + value;}  }
class C{  public void seal(){  sealed=true;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.TESTED_PROJECT__VERSION_CONSTRAINT:    return getVersionConstraint();case N4mfPackage.TESTED_PROJECT__DECLARED_SCOPE:  return getDeclaredScope();}return super.eGet(featureID,resolve,coreType);}  }
class C{  final public boolean prepare(final long txId){  final Tx localState=getLocalTransactionManager().getTx(txId);  if (localState == null)   throw new TransactionNotFoundException(txId);  if (localState.isReadOnly()) {    return true;  }  try {    final AbstractTask<Boolean> task=new ValidateWriteSetTask(concurrencyManager,getLocalTransactionManager(),localState);    final boolean ok=concurrencyManager.submit(task).get();    return ok;  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  public void resolveTree(){  for (int i=0; i < getInternalNodeCount(); i++) {    FlexibleNode node=((FlexibleNode)getInternalNode(i));    if (node.getChildCount() > 2) {      resolveNode(node);    }  }  adoptNodes(root,null);  fireTreeChanged();}  }
class C{  public static String generateCustomName(){  Random random=new Random();  StringBuilder sb=new StringBuilder();  sb.append(PropertyConverter.getCurrentTimeSeconds());  sb.append('_');  int i=random.nextInt(99999);  if (i < 10) {    sb.append("0000");  } else   if (i < 100) {    sb.append("000");  } else   if (i < 1000) {    sb.append("00");  } else   if (i < 10000) {    sb.append('0');  }  sb.append(i);  return sb.toString();}  }
class C{  public ModifiableDBIDs determineIDs(DBIDs superSetIDs,HyperBoundingBox interval,double d_min,double d_max){  StringBuilder msg=LOG.isDebugging() ? new StringBuilder() : null;  if (msg != null) {    msg.append("interval ").append(interval);  }  ModifiableDBIDs childIDs=DBIDUtil.newHashSet(superSetIDs.size());  Map<DBID,Double> minima=f_minima.get(interval);  Map<DBID,Double> maxima=f_maxima.get(interval);  if (minima == null || maxima == null) {    minima=new HashMap<>();    f_minima.put(interval,minima);    maxima=new HashMap<>();    f_maxima.put(interval,maxima);  }  for (DBIDIter iter=superSetIDs.iter(); iter.valid(); iter.advance()) {    DBID id=DBIDUtil.deref(iter);    Double f_min=minima.get(id);    Double f_max=maxima.get(id);    if (f_min == null) {      ParameterizationFunction f=database.get(id);      HyperBoundingBox minMax=f.determineAlphaMinMax(interval);      f_min=f.function(SpatialUtil.getMin(minMax));      f_max=f.function(SpatialUtil.getMax(minMax));      minima.put(id,f_min);      maxima.put(id,f_max);    }    if (msg != null) {      msg.append("\n\nf_min ").append(f_min);      msg.append("\nf_max ").append(f_max);      msg.append("\nd_min ").append(d_min);      msg.append("\nd_max ").append(d_max);    }    if (f_min - f_max > ParameterizationFunction.DELTA) {      throw new IllegalArgumentException("Houston, we have a problem: f_min > f_max! " + "\nf_min[" + FormatUtil.format(SpatialUtil.centroid(interval)) + "] = "+ f_min+ "\nf_max["+ FormatUtil.format(SpatialUtil.centroid(interval))+ "] = "+ f_max+ "\nf "+ database.get(id));    }    if (f_min <= d_max && f_max >= d_min) {      childIDs.add(id);      if (msg != null) {        msg.append("\nid ").append(id).append(" appended");      }    } else {      if (msg != null) {        msg.append("\nid ").append(id).append(" NOT appended");      }    }  }  if (msg != null) {    msg.append("\nchildIds ").append(childIDs.size());    LOG.debugFine(msg.toString());  }  if (childIDs.size() < minPts) {    return null;  } else {    return childIDs;  }}  }
class C{  public static void saveBrokerPort(Context context,String port){  SharedPreferences.Editor editor=getSharedPreferences(context).edit();  editor.putString(KEY_BROKER_PORT,port);  editor.commit();}  }
class C{  public static void handleWorldChange(WorldClient world){  if (ModConfigs.disabled)   return;  if (world == null)   return;  int dimid=world.provider.dimensionId;  if (!proxyworlds.containsKey(dimid))   return;  proxyworlds.put(dimid,world);  Collection<WorldView> worldviews=worldviewsets.get(dimid);  for (  WorldView view : worldviews) {    view.replaceWorldObject(world);  }}  }
class C{  public static <T>Middleware<SyncHandler<T>,AsyncHandler<Response<ByteString>>> htmlSerializeSync(final String templateName){  Middleware<SyncHandler<T>,AsyncHandler<T>> syncToAsync=null;  return syncToAsync.and(htmlSerialize(templateName));}  }
class C{  public final int readLine(char[] buf,int length,boolean isChop) throws IOException {  byte[] readBuffer=_readBuffer;  int offset=0;  while (true) {    int readOffset=_readOffset;    int sublen=Math.min(length,_readLength - readOffset);    for (; sublen > 0; sublen--) {      int ch=readBuffer[readOffset++] & 0xff;      if (ch != '\n') {      } else       if (isChop) {        _readOffset=readOffset;        if (offset > 0 && buf[offset - 1] == '\r')         return offset - 1; else         return offset;      } else {        buf[offset++]=(char)ch;        _readOffset=readOffset;        return offset + 1;      }      buf[offset++]=(char)ch;    }    _readOffset=readOffset;    if (readOffset <= _readLength) {      if (!readBuffer()) {        return offset;      }    }    if (length <= offset)     return length + 1;  }}  }
class C{  void releaseCompositionArea(){synchronized (compositionAreaLock) {    if (compositionAreaOwner == this) {      compositionAreaOwner=null;      if (compositionArea != null) {        compositionArea.setHandlerInfo(null,null);        compositionArea.setText(null,null);      }    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ADDITIVE_EXPRESSION__LHS:    setLhs((Expression)newValue);  return;case N4JSPackage.ADDITIVE_EXPRESSION__OP:setOp((AdditiveOperator)newValue);return;case N4JSPackage.ADDITIVE_EXPRESSION__RHS:setRhs((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Nullable private ConcurrentMap<SwapKey,SwapValue> partition(int part,boolean create){  ConcurrentMap<SwapKey,SwapValue> map=parts.get(part);  if (map == null && create) {    ConcurrentMap<SwapKey,SwapValue> old=parts.putIfAbsent(part,map=new ConcurrentHashMap<>());    if (old != null)     map=old;  }  return map;}  }
class C{  private void parseAppAuthent(Node node){  String authType=null;  String realm=null;  String userName=null;  String userPwd=null;  if (node == null) {    return;  }  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (authType == null) {        if ((authType=getValueByParamName("AuthType",childnode,TYPE_TXT)) != null) {          if (authType.equals("EarlyIMS")) {            mRcsSettings.setImsAuthenticationProcedureForMobile(AuthenticationProcedure.GIBA);          } else {            mRcsSettings.setImsAuthenticationProcedureForMobile(AuthenticationProcedure.DIGEST);          }          continue;        }      }      if (realm == null) {        if ((realm=getValueByParamName("Realm",childnode,TYPE_TXT)) != null) {          mRcsSettings.setUserProfileImsRealm("".equals(realm) ? null : realm);          continue;        }      }      if (userName == null) {        if ((userName=getValueByParamName("UserName",childnode,TYPE_TXT)) != null) {          mRcsSettings.setUserProfileImsPrivateId("".equals(userName) ? null : userName);          continue;        }      }      if (userPwd == null) {        if ((userPwd=getValueByParamName("UserPwd",childnode,TYPE_TXT)) != null) {          mRcsSettings.setUserProfileImsPassword("".equals(userPwd) ? null : userPwd);        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ScannerException(String context,Mark contextMark,String problem,Mark problemMark){  this(context,contextMark,problem,problemMark,null);}  }
class C{  void clearFileList(){  artifactUploadState.getFileSelected().forEach(null);  artifactUploadState.getFileSelected().clear();  artifactUploadState.getBaseSwModuleList().clear();  processBtn.setCaption(SPUILabelDefinitions.PROCESS);  processBtn.setEnabled(false);  artifactUploadState.getNumberOfFilesActuallyUpload().set(0);  artifactUploadState.getNumberOfFileUploadsExpected().set(0);  artifactUploadState.getNumberOfFileUploadsFailed().set(0);  duplicateFileNamesList.clear();}  }
class C{  public void appendCloseOrderedListTag(){  text.append("</ol>");}  }
class C{  @Deprecated public static String makeWhereStringFromFields(List<ModelField> modelFields,Map<String,Object> fields,String operator,List<EntityConditionParam> entityConditionParams){  return makeWhereStringFromFields(new StringBuilder(),modelFields,fields,operator,entityConditionParams).toString();}  }
class C{  private Object writeReplace(){  return new SynchronizedList<E>(list);}  }
class C{  private void extractCarrotAttributes(SolrParams solrParams,Map<String,Object> attributes){  for (Iterator<String> paramNames=solrParams.getParameterNamesIterator(); paramNames.hasNext(); ) {    String paramName=paramNames.next();    if (!CarrotParams.CARROT_PARAM_NAMES.contains(paramName)) {      attributes.put(paramName,solrParams.get(paramName));    }  }}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  private boolean isSystemTable(String tableName){  boolean result=false;  for (  String systemTable : SYSTEM_TABLES) {    if (systemTable.equals(tableName)) {      result=true;      break;    }  }  return result;}  }
class C{  static String fieldFromVisibleField(String realmClass,String visibleFieldName){  ensureInit();  String key=realmClass + KEY_SEP + visibleFieldName;  if (INSTANCE.flatVisFieldToFlatField.containsKey(key))   return stripKey(INSTANCE.flatVisFieldToFlatField.get(key));  ClassData classData=getClassData();  FieldData fieldData=classData.getFieldData(realmClass);  String[] parts=VIS_SEP_PATTERN.split(visibleFieldName);  StringBuilder builder=new StringBuilder();  for (int i=0; i < parts.length; i++) {    String realFieldName=fieldData.getFieldNames().get(fieldData.getVisibleNames().indexOf(parts[i]));    builder.append(realFieldName);    if (i < parts.length - 1) {      builder.append(FLAT_SEP);      if (fieldData.isRealmListType(realFieldName)) {        fieldData=classData.getFieldData(fieldData.realmListType(realFieldName));      } else {        fieldData=classData.getFieldData((Class<? extends RealmModel>)fieldData.fieldType(realFieldName));      }    }  }  String value=builder.toString();  INSTANCE.flatVisFieldToFlatField.put(key,realmClass + KEY_SEP + value);  return value;}  }
class C{  @Override public String nextElement(){  int beginpos, endpos;  beginpos=m_CurrentPos;  while ((beginpos < m_Str.length) && ((m_Str[beginpos] < 'a') && (m_Str[beginpos] > 'z')) && ((m_Str[beginpos] < 'A') && (m_Str[beginpos] > 'Z'))) {    beginpos++;  }  m_CurrentPos=endpos=beginpos;  if (beginpos >= m_Str.length) {    throw new NoSuchElementException("No more tokens present");  }  while ((endpos < m_Str.length) && (((m_Str[endpos] >= 'a') && (m_Str[endpos] <= 'z')) || ((m_Str[endpos] >= 'A') && (m_Str[endpos] <= 'Z')))) {    endpos++;  }  String s=new String(m_Str,beginpos,endpos - m_CurrentPos);  m_CurrentPos=endpos;  return s;}  }
class C{  public JRangeSlider(int minimum,int maximum,int lowValue,int highValue,int orientation){  this(new DefaultBoundedRangeModel(lowValue,highValue - lowValue,minimum,maximum),orientation,LEFTRIGHT_TOPBOTTOM);}  }
class C{  public static GVTFontFamily resolve(String familyName){  familyName=familyName.toLowerCase();  GVTFontFamily resolvedFF=(GVTFontFamily)resolvedFontFamilies.get(familyName);  if (resolvedFF == null) {    String awtFamilyName=(String)fonts.get(familyName);    if (awtFamilyName != null) {      resolvedFF=new AWTFontFamily(awtFamilyName);    }    resolvedFontFamilies.put(familyName,resolvedFF);  }  return resolvedFF;}  }
class C{  protected void fireChangeEvent(){  Iterator iter=m_listeners.iterator();  ChangeEvent evt=new ChangeEvent(this);  while (iter.hasNext()) {    ChangeListener cl=(ChangeListener)iter.next();    cl.stateChanged(evt);  }}  }
class C{  private int lastIndexOfAnyOf(final char[] c,final int n,final int from,final int bloomFilter){  if (n == 0)   return -1;  final char[] a=array;  int i=length(), k;  if (from < i)   i=from + 1;  while (i-- > 0) {    if ((bloomFilter & (1 << (a[i] & 0x1F))) != 0) {      k=n;      while (k-- != 0)       if (a[i] == c[k])       return i;    }  }  return -1;}  }
class C{  final int estimateLag(){  int n;  return (ctl == DISABLED) ? -1 : ((n=tail - head) > 0) ? n : 0;}  }
class C{  public void configure(TypedProperties config){  this.config=config;  port=config.getInt("server.port",port);  setMaxReceivePacketSize(config.getInt("udp.packetsize",receivePacketSize));  numClients=config.getInt("server.numclients",numClients);  frameRate=config.getInt("server.framerate",frameRate);  frameDuration=1000 / frameRate;  connectionTimeOut=config.getInt("udp.ttl",connectionTimeOut);  UDPConnection.setTTL(connectionTimeOut);  receiveTimeOut=config.getInt("udp.receivetimeout",receiveTimeOut);  if (logger != null) {    logger.info("configured server... port:" + port + " clients:"+ numClients+ " fps:"+ frameRate+ " ttl:"+ connectionTimeOut+ " rto:"+ receiveTimeOut);  }  setState(ServerState.WAITING_FOR_CLIENTS);}  }
class C{  public DateTimeComponents(int year,int month,int date,int hour,int minute,int second,boolean utc){  this(year,month,date,hour,minute,second,utc,true);}  }
class C{  private void checkConnection(Context context){  final ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  final NetworkInfo networkInfo=cm.getActiveNetworkInfo();  if (networkInfo == null || !networkInfo.isConnectedOrConnecting()) {    Log.e(TAG,"checkConnection - no connection found");  }}  }
class C{  public static boolean equipWithItem(final Player player,final String clazz,final String info){  ItemTestHelper.generateRPClasses();  final Item item=SingletonRepository.getEntityManager().getItem(clazz);  item.setInfoString(info);  return player.equipToInventoryOnly(item);}  }
class C{  public void querySortedKeys(String type,int index,boolean ascending,int page,int limit,int visibilityScope,CloudResponse<String[]> response){  try {    queryImpl(type,null,0,page,limit,visibilityScope,1,index,ascending,false,true,response);  } catch (  CloudException e) {    response.onError(e);  }}  }
class C{  public static void e(Throwable t){  instance.logThrowable(t);}  }
class C{  public static void checkKeyStorePasswords(String keystoreLocation,KEYSTORE_TYPE keystoreType,String password,String aliasToFind,String keyPassword) throws ConfigurationException, GeneralSecurityException, IOException {  String ksLocation;  if (keystoreLocation != null && !keystoreLocation.isEmpty()) {    ksLocation=keystoreLocation;  } else   if (SecurityHelper.getKeyStoreLocation() != null && !SecurityHelper.getKeyStoreLocation().isEmpty()) {    ksLocation=SecurityHelper.getKeyStoreLocation();  } else {    throw new ConfigurationException("KeyStore location is not given.");  }  if (keystoreType == null) {    throw new ConfigurationException("Invalid KeyStore type : " + keystoreType);  }  FileInputStream fis=new FileInputStream(ksLocation);  String alg=KeyManagerFactory.getDefaultAlgorithm();  KeyManagerFactory kmFact=KeyManagerFactory.getInstance(alg);  char[] charPassword=password.toCharArray();  KeyStore ks=KeyStore.getInstance(keystoreType.name());  ks.load(fis,charPassword);  fis.close();  List<String> listKeysWithWrongPassword=new ArrayList<String>();  boolean aliasToFindIsFound=false;  Enumeration<String> enumeration=ks.aliases();  while (enumeration.hasMoreElements()) {    String alias=(String)enumeration.nextElement();    if (aliasToFind != null && alias.equalsIgnoreCase(aliasToFind))     aliasToFindIsFound=true;    try {      logger.debug(MessageFormat.format("Trying alias:{0}",alias));      Key key=ks.getKey(alias,keyPassword.toCharArray());    } catch (    Exception e) {      if (aliasToFind != null && alias.equalsIgnoreCase(aliasToFind))       listKeysWithWrongPassword.add(alias); else       if (aliasToFind == null)       listKeysWithWrongPassword.add(alias);    }  }  if (aliasToFind != null && !aliasToFindIsFound)   throw new ConfigurationException(MessageFormat.format("Keystore does not contain alias={0}",aliasToFind));  if (!listKeysWithWrongPassword.isEmpty()) {    String strListKeysWithWrongPassword=StringUtils.join(listKeysWithWrongPassword,",");    throw new UnrecoverableKeyException(MessageFormat.format("Incorrect password for following keys:{0}",strListKeysWithWrongPassword));  }}  }
class C{  @HttpUrl(value="^/clientinfo/(*)/$",weight=2) public void addClientFilterFirst(int clientId,FilterChain chain) throws SQLException {}  }
class C{  public ShoppingCartStateServiceImpl(final GenericDAO<ShoppingCartState,Long> shoppingCartStateDao){  super(shoppingCartStateDao);  this.shoppingCartStateDao=shoppingCartStateDao;}  }
class C{  SearchRow readRow(Data data,int offset,boolean onlyPosition,boolean needData){synchronized (data) {    data.setPos(offset);    long key=data.readVarLong();    if (onlyPosition) {      if (needData) {        return tableData.getRow(null,key);      }      SearchRow row=table.getTemplateSimpleRow(true);      row.setKey(key);      return row;    }    SearchRow row=table.getTemplateSimpleRow(columns.length == 1);    row.setKey(key);    for (    Column col : columns) {      int idx=col.getColumnId();      row.setValue(idx,data.readValue());    }    return row;  }}  }
class C{  public void onOptionsMenuCreated(Menu menu){  for (int i=0; i < menu.size(); i++) {    Drawable drawable=menu.getItem(i).getIcon();    if (drawable == null) {      continue;    }    drawable=DrawableCompat.wrap(drawable);    DrawableCompat.setTint(drawable,mTextColorPrimary);  }}  }
class C{  public final boolean equals(char[] cb,int offset,int length){  if (length != _length)   return false;  int selfOffset=_offset;  char[] buffer=_buffer;  for (int i=_length - 1; i >= 0; i--)   if (buffer[selfOffset + i] != cb[i + offset])   return false;  return true;}  }
class C{  public boolean isVirtual(){  return this == VIRTUAL;}  }
class C{  protected AbstractElementNS(String nsURI,String qname,AbstractDocument owner) throws DOMException {  super(qname,owner);  if (nsURI != null && nsURI.length() == 0) {    nsURI=null;  }  namespaceURI=nsURI;  String prefix=DOMUtilities.getPrefix(qname);  if (prefix != null) {    if (nsURI == null || ("xml".equals(prefix) && !XMLSupport.XML_NAMESPACE_URI.equals(nsURI))) {      throw createDOMException(DOMException.NAMESPACE_ERR,"namespace.uri",new Object[]{new Integer(getNodeType()),getNodeName(),nsURI});    }  }}  }
class C{  public XMLDocument(InputStream stream) throws Exception {  this();  read(stream);}  }
class C{  public int hashCode(){  return value;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,int value){  buffer.append(value);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep deleteStoragePort(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,StoragePort.class,"id");  StoragePort port=queryResource(id);  if (!RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(port.getRegistrationStatus()) || DiscoveryStatus.VISIBLE.name().equalsIgnoreCase(port.getDiscoveryStatus())) {    throw APIException.badRequests.cannotDeactivateStoragePort();  }  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(StoragePool.class,id,taskId,ResourceOperationTypeEnum.DELETE_STORAGE_PORT);  PurgeRunnable.executePurging(_dbClient,_dbPurger,_asynchJobService.getExecutorService(),port,_retry_attempts,taskId,60);  return toTask(port,taskId,op);}  }
class C{  public String globalInfo(){  return "Wrapper classifier that addresses incompatible training and test " + "data by building a mapping between the training data that " + "a classifier has been built with and the incoming test instances' "+ "structure. Model attributes that are not found in the incoming "+ "instances receive missing values, so do incoming nominal attribute "+ "values that the classifier has not seen before. A new classifier "+ "can be trained or an existing one loaded from a file.";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:50.817 -0500",hash_original_method="9500C77C5C6AE8093B22F8C92F23F797",hash_generated_method="1E8C4A2053650C39451358B0C7AC5086") public static void initCause(Throwable throwable,Throwable cause){  if (INIT_CAUSE_METHOD != null) {    try {      INIT_CAUSE_METHOD.invoke(throwable,new Object[]{cause});    } catch (    Exception e) {    }  }}  }
class C{  public boolean reverseAccrualIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  boolean retValue=reverseIt();  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  setDocAction(DOCACTION_None);  return retValue;}  }
class C{  public Matrix4f m31(float m31){  this.m31=m31;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE);  return this;}  }
class C{  protected void addRestriction(Restriction r){  m_list.add(r);}  }
class C{  private EGLSurface createOffscreenSurface(final int width,final int height){  if (DEBUG)   Log.v(TAG,"createOffscreenSurface:");  final int[] surfaceAttribs={EGL14.EGL_WIDTH,width,EGL14.EGL_HEIGHT,height,EGL14.EGL_NONE};  EGLSurface result=null;  try {    result=EGL14.eglCreatePbufferSurface(mEglDisplay,mEglConfig,surfaceAttribs,0);    checkEglError("eglCreatePbufferSurface");    if (result == null) {      throw new RuntimeException("surface was null");    }  } catch (  final IllegalArgumentException e) {    Log.e(TAG,"createOffscreenSurface",e);  }catch (  final RuntimeException e) {    Log.e(TAG,"createOffscreenSurface",e);  }  return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.171 -0500",hash_original_method="97921B5E4166F5AC1B7B582C04340D66",hash_generated_method="3E5590DAB928E12BB7FB6F548EF87AAE") private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  private void updateBfsPath(Result<Void> result){  _bfsPath.list(result.then(null));}  }
class C{  private GridResourceTestUtils(){}  }
class C{  protected void checkAndLoadDictionaryData(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier,DictionaryInfo dictionaryInfo,String lruCacheKey,boolean loadSortIndex) throws CarbonUtilException {  try {    CarbonFile carbonFile=getDictionaryMetaCarbonFile(dictionaryColumnUniqueIdentifier);    boolean dictionaryMetaFileModified=isDictionaryMetaFileModified(carbonFile,dictionaryInfo.getFileTimeStamp(),dictionaryInfo.getDictionaryMetaFileLength());    if (dictionaryMetaFileModified) {synchronized (dictionaryInfo) {        carbonFile=getDictionaryMetaCarbonFile(dictionaryColumnUniqueIdentifier);        dictionaryMetaFileModified=isDictionaryMetaFileModified(carbonFile,dictionaryInfo.getFileTimeStamp(),dictionaryInfo.getDictionaryMetaFileLength());        if (dictionaryMetaFileModified) {          CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunk=readLastChunkFromDictionaryMetadataFile(dictionaryColumnUniqueIdentifier);          long requiredSize=carbonDictionaryColumnMetaChunk.getEnd_offset() - dictionaryInfo.getMemorySize();          if (requiredSize > 0) {            boolean columnAddedToLRUCache=carbonLRUCache.put(lruCacheKey,dictionaryInfo,requiredSize);            if (columnAddedToLRUCache) {              loadDictionaryData(dictionaryInfo,dictionaryColumnUniqueIdentifier,dictionaryInfo.getMemorySize(),carbonDictionaryColumnMetaChunk.getEnd_offset(),loadSortIndex);              dictionaryInfo.setOffsetTillFileIsRead(carbonDictionaryColumnMetaChunk.getEnd_offset());              dictionaryInfo.setFileTimeStamp(carbonFile.getLastModifiedTime());              dictionaryInfo.setDictionaryMetaFileLength(carbonFile.getSize());            } else {              throw new CarbonUtilException("Cannot load dictionary into memory. Not enough memory available");            }          }        }      }    }    incrementDictionaryAccessCount(dictionaryInfo);  } catch (  IOException e) {    throw new CarbonUtilException(e.getMessage());  }}  }
class C{  public void addCurrencyUnit(final String currencyCode){  final Element currencyUnitElement=this.root.addElement("unit");  currencyUnitElement.addAttribute("id",UNITID_CUR);  final Element measure=currencyUnitElement.addElement("measure");  measure.addText("iso4217:" + currencyCode);}  }
class C{  public boolean isDefSiteStructuralTyping(){  Type _declaredType=this.getDeclaredType();  if ((_declaredType instanceof TN4Classifier)) {    Type _declaredType_1=this.getDeclaredType();    TypingStrategy _typingStrategy=((TN4Classifier)_declaredType_1).getTypingStrategy();    return (_typingStrategy == TypingStrategy.STRUCTURAL);  }  Type _declaredType_2=this.getDeclaredType();  if ((_declaredType_2 instanceof TStructuralType)) {    return true;  }  return false;}  }
class C{  public String toString(){  return Float.toString(getValue());}  }
class C{  public Rule(String pattern,Object tokenType,String nextState){  this.pattern=Pattern.compile(pattern);  this.tokenType=tokenType;  this.nextState=nextState;}  }
class C{  public void test_ConstructorILjava_lang_StringIIIIIIIIIII(){  assertNotNull(new SimpleTimeZone(TimeZone.LONG,"Europe/Paris",SimpleTimeZone.STANDARD_TIME,SimpleTimeZone.STANDARD_TIME,SimpleTimeZone.UTC_TIME,SimpleTimeZone.WALL_TIME,SimpleTimeZone.WALL_TIME,TimeZone.SHORT,SimpleTimeZone.STANDARD_TIME,TimeZone.LONG,SimpleTimeZone.UTC_TIME,SimpleTimeZone.STANDARD_TIME,TimeZone.LONG));  assertNotNull(new SimpleTimeZone(TimeZone.LONG,"Europe/Paris",SimpleTimeZone.STANDARD_TIME,SimpleTimeZone.STANDARD_TIME,SimpleTimeZone.UTC_TIME,SimpleTimeZone.WALL_TIME,Integer.MAX_VALUE,TimeZone.SHORT,SimpleTimeZone.STANDARD_TIME,TimeZone.LONG,SimpleTimeZone.UTC_TIME,Integer.MIN_VALUE,TimeZone.LONG));  try {    new SimpleTimeZone(1000,"TEST",12,1,Calendar.SUNDAY,0,Integer.MAX_VALUE,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0,Integer.MAX_VALUE,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,10,Calendar.SUNDAY,0,Integer.MAX_VALUE,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0,Integer.MAX_VALUE,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,1,10,0,Calendar.NOVEMBER,Integer.MAX_VALUE,-1,Calendar.SUNDAY,0,Integer.MAX_VALUE,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.DECEMBER,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,Integer.MAX_VALUE,-10,Calendar.SUNDAY,0,Integer.MAX_VALUE,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:52.973 -0500",hash_original_method="D912FCB1DFFBD3EFF004E65AAFF52944",hash_generated_method="F42B96F37F56F4E03EF2CE6A5F457A69") public boolean deleteMessageFromIcc(int messageIndex){  boolean success=false;  byte[] pdu=new byte[IccConstants.SMS_RECORD_LENGTH - 1];  Arrays.fill(pdu,(byte)0xff);  try {    ISms iccISms=ISms.Stub.asInterface(ServiceManager.getService("isms"));    if (iccISms != null) {      success=iccISms.updateMessageOnIccEf(messageIndex,STATUS_ON_ICC_FREE,pdu);    }  } catch (  RemoteException ex) {  }  return success;}  }
class C{  public AggregateableEvaluation(Instances data) throws Exception {  super(data);  m_delegate=new weka.classifiers.evaluation.AggregateableEvaluation(data);}  }
class C{  @Override public int compare(final WritableComparable wc1,final WritableComparable wc2){  final GroupedRow gk1=(GroupedRow)wc1;  final GroupedRow gk2=(GroupedRow)wc2;  return gk1.group.compareTo(gk2.group);}  }
class C{  public static void release(final ICompilationUnit unit) throws CoreException {  Assert.isNotNull(unit);  final IResource resource=unit.getResource();  if (resource != null && resource.getType() == IResource.FILE)   FileBuffers.getTextFileBufferManager().disconnect(resource.getFullPath(),LocationKind.IFILE,new NullProgressMonitor());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.654 -0500",hash_original_method="1F0CD4338AAE9E719690DF5E0BB493ED",hash_generated_method="0BBF3A00BAFAA580DEB88F08EE34F6F5") private boolean maybeMigrateSettingsForRenamedAuthorities(){  boolean writeNeeded=false;  ArrayList<AuthorityInfo> authoritiesToRemove=new ArrayList<AuthorityInfo>();  final int N=mAuthorities.size();  for (int i=0; i < N; i++) {    AuthorityInfo authority=mAuthorities.valueAt(i);    final String newAuthorityName=sAuthorityRenames.get(authority.authority);    if (newAuthorityName == null) {      continue;    }    authoritiesToRemove.add(authority);    if (!authority.enabled) {      continue;    }    if (getAuthorityLocked(authority.account,newAuthorityName,"cleanup") != null) {      continue;    }    AuthorityInfo newAuthority=getOrCreateAuthorityLocked(authority.account,newAuthorityName,-1,false);    newAuthority.enabled=true;    writeNeeded=true;  }  for (  AuthorityInfo authorityInfo : authoritiesToRemove) {    removeAuthorityLocked(authorityInfo.account,authorityInfo.authority,false);    writeNeeded=true;  }  return writeNeeded;}  }
class C{  @Override public void flatMap(java.util.List<Object> input,Collector<Tuple2<String,AlertAPIEntity>> outputCollector){  if (input.size() != 3)   throw new IllegalStateException("AlertExecutor always consumes exactly 3 fields: key, stream name and value(SortedMap)");  if (LOG.isDebugEnabled())   LOG.debug("Msg is coming " + input.get(2));  if (LOG.isDebugEnabled())   LOG.debug("Current policyEvaluators: " + policyEvaluators.keySet().toString());  updateCounter(EAGLE_EVENT_COUNT,baseDimensions);  try {synchronized (this.policyEvaluators) {      for (      Entry<String,PolicyEvaluator> entry : policyEvaluators.entrySet()) {        String policyId=entry.getKey();        PolicyEvaluator evaluator=entry.getValue();        updateCounter(getMetricKey(EAGLE_POLICY_EVAL_COUNT,policyId),getDimensions(policyId));        try {          EagleAlertContext siddhiAlertContext=new EagleAlertContext();          siddhiAlertContext.alertExecutor=this;          siddhiAlertContext.policyId=policyId;          siddhiAlertContext.evaluator=evaluator;          siddhiAlertContext.outputCollector=outputCollector;          evaluator.evaluate(new ValuesArray(siddhiAlertContext,input.get(1),input.get(2)));        } catch (        Exception ex) {          LOG.error("Got an exception, but continue to run " + input.get(2).toString(),ex);          updateCounter(getMetricKey(EAGLE_POLICY_EVAL_FAIL_COUNT,policyId),getDimensions(policyId));        }      }    }  } catch (  Exception ex) {    LOG.error(alertExecutorId + ", partition " + partitionSeq+ ", error fetching alerts, but continue to run",ex);    updateCounter(EAGLE_ALERT_FAIL_COUNT,baseDimensions);  }}  }
class C{  @Deprecated public UpdateRequest script(String script,@Nullable String scriptLang,ScriptService.ScriptType scriptType,@Nullable Map<String,Object> scriptParams){  this.script=new Script(script,scriptType,scriptLang,scriptParams);  return this;}  }
class C{  private void refreshTradingdays(final Tradingdays tradingdays){  if (!tradingdays.getTradingdays().isEmpty()) {    for (    Tradingday tradingday : tradingdays.getTradingdays()) {      tradingdayPanel.doRefresh(tradingday);    }    tradingdayPanel.doRefreshTradingdayTable(tradingdays.getTradingdays().get(tradingdays.getTradingdays().size() - 1));  }  if (m_brokerModel.isConnected()) {    getMenu().setEnabledBrokerData(true);    getMenu().setEnabledRunStrategy(true);    getMenu().setEnabledConnect(false);  } else {    getMenu().setEnabledTestStrategy(true);    getMenu().setEnabledConnect(true);    tradingdayPanel.cleanStrategyWorker();  }  getMenu().setEnabledSearchDeleteRefreshSave(true);}  }
class C{  public boolean isEagerSwipeMode(){  return eagerSwipeMode;}  }
class C{  private void revertValueClassNames(Collection<PojoDescriptor> selPojos){  for (  PojoDescriptor pojo : selPojos)   pojo.revertValueClassName();}  }
class C{  public LongArraySpliterator(long[] array,int origin,int fence,int additionalCharacteristics){  this.array=array;  this.index=origin;  this.fence=fence;  this.characteristics=additionalCharacteristics | Spliterator.SIZED | Spliterator.SUBSIZED;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public static void main(String[] args){  Process p;  try {    ProcessBuilder pb=new ProcessBuilder("cat","/dev/random");    p=pb.start();  } catch (  IOException ioe) {    System.err.println("cmd failed: " + ioe.getMessage());    p=null;  }  try {    testDexClassLoader();  }  finally {    if (p != null)     p.destroy();    try {      Thread.sleep(500);    } catch (    Exception ex) {    }  }  System.out.println("done");}  }
class C{  @Override public int hashCode(){  int result=17;  final int mult=37;  result=mult * result + (this.type == null ? 0 : this.type.hashCode());  result=mult * result + (this.msg == null ? 0 : this.msg.hashCode());  return result;}  }
class C{  public StoreFixedFieldOp(AST source,Register object,int index,String fieldName,Register val,Type fieldType){  super(source,"storeFixedField",object,val);  this.fieldType=fieldType;  this.index=index;  this.fieldName=fieldName;  assert fieldType == Type.OBJECT || fieldType == Type.INT;}  }
class C{  protected LogicalAndExpressionImpl(){  super();}  }
class C{  private WebResource createWebResource(){  WebResource webResource;  if (isPage) {    webResource=getWebResourceDataService().createPage(scenarioName);  } else {    webResource=getWebResourceDataService().createSite(scenarioName);  }  webResource.setAudit(getAudit());  getWebResourceDataService().saveOrUpdate(webResource);  getAudit().setSubject(webResource);  return webResource;}  }
class C{  public ExecutionEnvironmentDescriptor(ResourceSet resourceSet,ClassLoader classLoader){  this.resourceSet=resourceSet;  this.classLoader=classLoader;}  }
class C{  private int matchString(String text,int start,int field,String[] data,CalendarBuilder calb){  int i=0;  int count=data.length;  if (field == Calendar.DAY_OF_WEEK) {    i=1;  }  int bestMatchLength=0, bestMatch=-1;  for (; i < count; ++i) {    int length=data[i].length();    if (length > bestMatchLength && text.regionMatches(true,start,data[i],0,length)) {      bestMatch=i;      bestMatchLength=length;    }  }  if (bestMatch >= 0) {    calb.set(field,bestMatch);    return start + bestMatchLength;  }  return -start;}  }
class C{  public boolean toThunderState(){  return to;}  }
class C{  public StreamScope(Consumer<T> streamScope){  super(streamScope);}  }
class C{  public Phaser(){  this(null,0);}  }
class C{  public Vector decode(final URL url) throws IOException {  LineNumberReader reader;  if (owner != null) {    reader=new LineNumberReader(new InputStreamReader(new ProgressMonitorInputStream(owner,"Loading " + url,url.openStream())));  } else {    reader=new LineNumberReader(new InputStreamReader(url.openStream()));  }  Vector v=new Vector();  String line;  Vector events;  try {    while ((line=reader.readLine()) != null) {      StringBuilder buffer=new StringBuilder(line);      for (int i=0; i < 1000; i++) {        buffer.append(reader.readLine()).append("\n");      }      events=decodeEvents(buffer.toString());      if (events != null) {        v.addAll(events);      }    }  }  finally {    partialEvent=null;    try {      if (reader != null) {        reader.close();      }    } catch (    Exception e) {      e.printStackTrace();    }  }  return v;}  }
class C{  public String toHttpString(){  StringBuilder sb=new StringBuilder();  sb.append(getHttpVerb()).append(' ').append(getHttpURI()).append(' ').append(getHttpVersion()).append(HttpProxyConstants.CRLF);  boolean hostHeaderFound=false;  if (getHeaders() != null) {    for (    Map.Entry<String,List<String>> header : getHeaders().entrySet()) {      if (!hostHeaderFound) {        hostHeaderFound=header.getKey().equalsIgnoreCase("host");      }      for (      String value : header.getValue()) {        sb.append(header.getKey()).append(": ").append(value).append(HttpProxyConstants.CRLF);      }    }    if (!hostHeaderFound && getHttpVersion() == HttpProxyConstants.HTTP_1_1) {      sb.append("Host: ").append(getHost()).append(HttpProxyConstants.CRLF);    }  }  sb.append(HttpProxyConstants.CRLF);  return sb.toString();}  }
class C{  public int previous(){  return this.icuIterator.previous();}  }
class C{  protected void addCounters(BasicCounters<MutableLong> target,BasicCounters<MutableLong> source){  for (  Enum<BlockWriter.Counters> key : BlockWriter.Counters.values()) {    MutableLong tcounter=target.getCounter(key);    if (tcounter == null) {      tcounter=new MutableLong();      target.setCounter(key,tcounter);    }    MutableLong scounter=source.getCounter(key);    if (scounter != null) {      tcounter.add(scounter.longValue());    }  }}  }
class C{  public PrivateKey engineLookupAndResolvePrivateKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Can I resolve " + element.getTagName() + "?");  }  if (XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_X509DATA)) {    PrivateKey privKey=resolveX509Data(element,baseURI);    if (privKey != null) {      return privKey;    }  } else   if (XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_KEYNAME)) {    log.log(java.util.logging.Level.FINE,"Can I resolve KeyName?");    String keyName=element.getFirstChild().getNodeValue();    try {      Key key=keyStore.getKey(keyName,password);      if (key instanceof PrivateKey) {        return (PrivateKey)key;      }    } catch (    Exception e) {      log.log(java.util.logging.Level.FINE,"Cannot recover the key",e);    }  }  log.log(java.util.logging.Level.FINE,"I can't");  return null;}  }
class C{  public String customPropsFileTipText(){  return "The custom properties that the user can use to override the default ones.";}  }
class C{  public void updateProgress(int current){  int percentage=(int)((((double)current) / ((double)this.totalCount)) * 100);  int dotsAdd=percentage - this.dotsPrinted;  for (int i=1; i <= dotsAdd; i++) {    System.out.print(progressCharacter);  }  this.dotsPrinted+=dotsAdd;}  }
class C{  protected Projection initProjection(Properties props){  loadProjections(props);  Projection proj=new ProjectionFactory().getDefaultProjectionFromEnvironment(Environment.getInstance());  if (Debug.debugging("imageserver")) {    Debug.output("MRH starting with default projection = " + proj);  }  return proj;}  }
class C{  public void addInvokespecial(CtClass clazz,String name,CtClass returnType,CtClass[] paramTypes){  String desc=Descriptor.ofMethod(returnType,paramTypes);  addInvokespecial(clazz,name,desc);}  }
class C{  public AddressLookup(){}  }
class C{  @Override public String toString(){  StringBuffer buf=new StringBuffer();  boolean first=true;  for (  FilterPredClause clause : clauses) {    if (first)     first=false; else {      buf.append(' ');      buf.append(boolOp);      buf.append(' ');    }    buf.append(clause);  }  return buf.toString();}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  public html addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  protected void formBandejaExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ClientInvocation invocation=saveCurrentInvocation(KeysClientsInvocations.HOME_CONSULTAS,request);  invocation.setAsReturnPoint(true);  AppUser userVO=getAppUser(request);  ServiceRepository services=getServiceRepository(request);  GestionSistemaBI sistemaBI=services.lookupGestionSistemaBI();  BandejaActividadesVO actividadesUsuario=sistemaBI.getActividadesUsuario(userVO);  request.setAttribute(Constants.BANDEJA_KEY,actividadesUsuario);  removeInTemporalSession(request,DescripcionConstants.LISTA_IDS_ELEMENTOS_CF);  removeInTemporalSession(request,Constants.LAST_ORDER);  removeInTemporalSession(request,Constants.LAST_ORDER_DIRECTION);  removeInTemporalSession(request,Constants.PAGE_NUMBER);  BusquedaElementosForm busquedaElementosForm=(BusquedaElementosForm)form;  Busqueda busqueda=getCfgBusquedaBandejaSimple(request);  setInTemporalSession(request,FondosConstants.CFG_BUSQUEDA_KEY,busqueda);  BusquedasHelper.loadListasBusqueda(busqueda,busquedaElementosForm,request,null);  setReturnActionFordward(request,mapping.findForward("load_bandeja"));}  }
class C{  public ExponentialDistr(long seed,double mean){  this(mean);  numGen.reseedRandomGenerator(seed);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_arg0.execute(xctxt).bool() ? XBoolean.S_FALSE : XBoolean.S_TRUE;}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final Object value){  buffer.append(value);}  }
class C{  public StructTypeImpl(String[] fieldNames){  this(fieldNames,null);}  }
class C{  private static boolean extractDir(Context c,String rootAsset,String path){  AssetManager assetManager=c.getAssets();  try {    String[] assets=assetManager.list(rootAsset + path);    if (assets.length == 0) {      if (!extractFile(c,rootAsset,path))       return false;    } else {      String fullPath=PrefStore.getEnvDir(c) + path;      File dir=new File(fullPath);      if (!dir.exists())       dir.mkdir();      for (      String asset : assets) {        if (!extractDir(c,rootAsset,path + "/" + asset))         return false;      }    }  } catch (  IOException e) {    e.printStackTrace();    return false;  }  return true;}  }
class C{  public boolean isManualRedirect(){  return manualRedirect;}  }
class C{  public void put(String key,ImageDescriptor descriptor){  Entry entry=getEntry(key);  if (entry == null) {    entry=new Entry();    getTable().put(key,entry);  }  if (entry.image != null) {    throw new IllegalArgumentException("ImageRegistry key already in use: " + key);  }  entry.descriptor=descriptor;}  }
class C{  private static byte[] encodeCeil(double latitude,double longitude){  byte[] bytes=new byte[2 * Integer.BYTES];  NumericUtils.intToSortableBytes(encodeLatitudeCeil(latitude),bytes,0);  NumericUtils.intToSortableBytes(encodeLongitudeCeil(longitude),bytes,Integer.BYTES);  return bytes;}  }
class C{  public QuadEdge locate(Coordinate p0,Coordinate p1){  QuadEdge e=locator.locate(new Vertex(p0));  if (e == null)   return null;  QuadEdge base=e;  if (e.dest().getCoordinate().equals2D(p0))   base=e.sym();  QuadEdge locEdge=base;  do {    if (locEdge.dest().getCoordinate().equals2D(p1))     return locEdge;    locEdge=locEdge.oNext();  } while (locEdge != base);  return null;}  }
class C{  public static boolean parseBool(String s){  if (s != null) {    if (s.startsWith("true") || s.startsWith("on") || s.startsWith("yes")) {      return true;    }    if (s.startsWith("false") || s.startsWith("off") || s.equals("no")) {      return false;    }  }  throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"invalid boolean value: " + s);}  }
class C{  public void reset(){  for (int i=0; i < buf.length; i++) {    buf[i]=0;  }  bufOff=0;  cipher.reset();}  }
class C{  private void fail(String prefix,String message,Iterable<? extends Throwable> errors){  AssertionError ae=new AssertionError(prefix + message);  CompositeException ce=new CompositeException();  for (  Throwable e : errors) {    if (e == null) {      ce.addSuppressed(new NullPointerException("Throwable was null!"));    } else {      ce.addSuppressed(e);    }  }  ae.initCause(ce);  isPassing=false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static final GeoTimeSerie bucketize(GeoTimeSerie gts,long bucketspan,int bucketcount,long lastbucket,WarpScriptBucketizerFunction aggregator,long maxbuckets) throws WarpScriptException {  long lasttick=GTSHelper.lasttick(gts);  long firsttick=GTSHelper.firsttick(gts);  boolean zeroLastBucket=0 == lastbucket;  boolean zeroBucketcount=0 == bucketcount;  if (0 == lastbucket) {    lastbucket=lasttick;  }  if (0 == bucketspan && 0 != bucketcount) {    if (lastbucket >= firsttick) {      long delta=lastbucket - firsttick + 1;      bucketspan=delta / bucketcount;      if (0 == bucketspan || (delta % bucketspan) != 0) {        bucketspan++;      }    }  } else   if (0 == bucketspan && 0 == bucketcount) {    throw new WarpScriptException("One of bucketspan or bucketcount must be different from zero.");  }  if (0 == bucketcount) {    if (lastbucket >= firsttick) {      long delta=lastbucket - firsttick;      if (delta < bucketspan) {        bucketcount=1;      } else {        bucketcount=1 + (int)(delta / bucketspan);      }    }  }  if (zeroLastBucket && zeroBucketcount) {    if (0 != lastbucket % bucketspan) {      lastbucket=lastbucket - (lastbucket % bucketspan) + bucketspan;      if (lastbucket - bucketcount * bucketspan >= firsttick) {        bucketcount++;      }    }  }  if (bucketcount < 0 || bucketcount > maxbuckets) {    throw new WarpScriptException("Bucket count (" + bucketcount + ") would exceed maximum value of "+ maxbuckets);  }  if (0 == bucketspan) {    throw new WarpScriptException("Undefined bucket span, check your GTS timestamps.");  }  int hint=Math.min(gts.values,(int)((lasttick - firsttick) / bucketspan));  GeoTimeSerie bucketized=new GeoTimeSerie(lastbucket,bucketcount,bucketspan,hint);  bucketized.setName(gts.getName());  Map<String,String> labels=gts.getLabels();  bucketized.setLabels(labels);  GeoTimeSerie subgts=null;  for (int i=0; i < bucketcount; i++) {    long bucketend=lastbucket - i * bucketspan;    subgts=subSerie(gts,bucketend - bucketspan + 1,bucketend,false,false,subgts);    if (0 == subgts.values) {      continue;    }    Object[] parms=new Object[8];    int idx=0;    parms[idx++]=bucketend;    parms[idx]=new String[1];    ((String[])parms[idx++])[0]=bucketized.getName();    parms[idx]=new Map[1];    ((Map[])parms[idx++])[0]=labels;    parms[idx++]=Arrays.copyOf(subgts.ticks,subgts.values);    if (null != subgts.locations) {      parms[idx++]=Arrays.copyOf(subgts.locations,subgts.values);    } else {      parms[idx++]=new long[subgts.values];      Arrays.fill((long[])parms[idx - 1],GeoTimeSerie.NO_LOCATION);    }    if (null != subgts.elevations) {      parms[idx++]=Arrays.copyOf(subgts.elevations,subgts.values);    } else {      parms[idx++]=new long[subgts.values];      Arrays.fill((long[])parms[idx - 1],GeoTimeSerie.NO_ELEVATION);    }    parms[idx++]=new Object[subgts.values];    parms[idx++]=new long[]{0,-bucketspan,bucketend - bucketspan,bucketend};    for (int j=0; j < subgts.values; j++) {      ((Object[])parms[6])[j]=valueAtIndex(subgts,j);    }    Object[] aggregated=(Object[])aggregator.apply(parms);    if (null != aggregated[3]) {      setValue(bucketized,bucketend,(long)aggregated[1],(long)aggregated[2],aggregated[3],false);    }  }  GTSHelper.shrink(bucketized);  return bucketized;}  }
class C{  public void clearIOS(){  clearInputs();  clearOutputs();  clearSymbolTable();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void run(){  try {    if (index == 0) {      sendMessageToUI(" ",true);      sendMessageToUI("Starting Historic log request...",false);    }    if (wThread.retries >= MedtronicConstants.NUMBER_OF_RETRIES) {      mHandler3.removeCallbacks(wThread);synchronized (reader.sendingCommandLock) {        reader.sendingCommand=false;      }synchronized (reader.waitingCommandLock) {        reader.waitingCommand=false;        reader.lastCommandSend=null;      }synchronized (reader.processingCommandLock) {        reader.processingCommand=false;      }      sendMessageToUI("Timeout expired executing command list",false);synchronized (reader.processingCommandLock) {        reader.processingCommand=false;      }synchronized (reader.waitingCommandLock) {        reader.waitingCommand=false;        reader.lastCommandSend=null;      }      return;    }synchronized (reader.processingCommandLock) {      if (!reader.processingCommand)       return;    }    log.debug("HistoricGetter index + commandList " + index + " "+ commandList.length);    if (index >= commandList.length) {      log.debug("HG firstReadPage");      if (firstReadPage) {        log.debug("HG firstReadPage TRUE");        firstReadPage=false;        commandList=Arrays.copyOf(commandList,commandList.length + 1);        commandList[commandList.length - 1]=MedtronicConstants.MEDTRONIC_READ_PAGE_COMMAND;        wThread.isRequest=false;        byte[] lastHistoricPage=HexDump.toByteArray(historicPageIndex - shift);        log.debug("LastPAGE " + HexDump.toHexString(lastHistoricPage) + " size "+ lastHistoricPage.length);        wThread.postCommandBytes=new byte[64];        Arrays.fill(wThread.postCommandBytes,(byte)0x00);        wThread.postCommandBytes[0]=0x04;        wThread.postCommandBytes[1]=lastHistoricPage[0];        wThread.postCommandBytes[2]=lastHistoricPage[1];        wThread.postCommandBytes[3]=lastHistoricPage[2];        wThread.postCommandBytes[4]=lastHistoricPage[3];        isWaitingNextLine=true;synchronized (reader.waitingCommandLock) {          reader.waitingCommand=true;          reader.lastCommandSend=null;        }        byte command=commandList[index];        wThread.retries=-1;        wThread.command=command;        wThread.instance=this;        mHandler3.post(wThread);        index++;        return;      }synchronized (reader.processingCommandLock) {        reader.processingCommand=false;      }synchronized (reader.waitingCommandLock) {        reader.waitingCommand=false;        reader.lastCommandSend=null;      }      return;    }    byte command=commandList[index];    if (withoutConfirmation <= 0 || command == MedtronicConstants.MEDTRONIC_INIT) {synchronized (reader.waitingCommandLock) {        reader.waitingCommand=true;        reader.lastCommandSend=null;      }    } else {synchronized (reader.waitingCommandLock) {        reader.waitingCommand=false;        reader.lastCommandSend=null;      }    }    if (command == MedtronicConstants.MEDTRONIC_INIT) {      init();      return;    }    wThread.retries=-1;    wThread.command=command;    wThread.instance=this;    mHandler3.post(wThread);    index++;  } catch (  Exception e) {    StringBuffer sb1=new StringBuffer("");    sb1.append("EXCEPTION!!!!!! " + e.getMessage() + " "+ e.getCause());    for (    StackTraceElement st : e.getStackTrace()) {      sb1.append(st.toString());    }    sendMessageToUI(sb1.toString(),false);  }}  }
class C{  public void interpolate(double[] block,double[] interpolatedBlock){  Sequence.stretch(block,rate,buffer);  overlapAdd.filter(buffer,0,interpolatedBlock,0);}  }
class C{  public boolean isFocusable(){  return super.isFocusable() && isCollapsable();}  }
class C{  public LinkedList<Patch> patch_deepCopy(LinkedList<Patch> patches){  LinkedList<Patch> patchesCopy=new LinkedList<Patch>();  for (  Patch aPatch : patches) {    Patch patchCopy=new Patch();    for (    Diff aDiff : aPatch.diffs) {      Diff diffCopy=new Diff(aDiff.operation,aDiff.text);      patchCopy.diffs.add(diffCopy);    }    patchCopy.start1=aPatch.start1;    patchCopy.start2=aPatch.start2;    patchCopy.length1=aPatch.length1;    patchCopy.length2=aPatch.length2;    patchesCopy.add(patchCopy);  }  return patchesCopy;}  }
class C{  private void notifyMonthChanged(){  mGridViewAdapter.setDatas(getGvDataByYearAndMonth());  mGridViewAdapter.notifyDataSetChanged();}  }
class C{  protected void reply(RequestContext context,String key,String message){  try {    HttpServletRequest request=context.getRequest();    String filename=request.getRemoteAddr();    end(filename,key,message);  } catch (  Exception e) {  }}  }
class C{  public boolean isHiddenFromSelectors(){  return false;}  }
class C{  @Override public String toString(){  final StringBuilder blockString=new StringBuilder();  for (  final Instruction instruction : m_instructions) {    blockString.append(instruction.toString());    blockString.append('\n');  }  return blockString.toString();}  }
class C{  protected boolean isMatch(String resultsDir,String compareDir,String baseFileName,String resultExt,String compareExt) throws Exception {  String result=StringUtils.fileContentsToString(getFileName(resultsDir,baseFileName,resultExt));  String compare=StringUtils.fileContentsToString(getFileName(compareDir,baseFileName,compareExt));  return normalizeNewlines(result).equals(normalizeNewlines(compare));}  }
class C{  public void breadthFirst(Closure c){  Map<String,Object> options=new ListHashMap<String,Object>();  options.put("preorder",true);  breadthFirst(options,c);}  }
class C{  private static List<Pair<INaviModule,MemoryModule>> collectWronglyPlacedModules(final IDebugger debugger,final IViewContainer viewContainer,final List<MemoryModule> memoryModules){  final List<Pair<INaviModule,MemoryModule>> wronglyPlacedModules=new ArrayList<Pair<INaviModule,MemoryModule>>();  final List<INaviModule> modules=viewContainer.getModules();  for (  final INaviModule module : modules) {    for (    final MemoryModule memoryModule : memoryModules) {      if (module.getConfiguration().getName().equalsIgnoreCase(memoryModule.getName())) {        final RelocatedAddress assumedAddress=debugger.fileToMemory(module,new UnrelocatedAddress(module.getConfiguration().getFileBase()));        final IAddress memoryAddress=memoryModule.getBaseAddress().getAddress();        if (!assumedAddress.getAddress().equals(memoryAddress)) {          wronglyPlacedModules.add(new Pair<INaviModule,MemoryModule>(module,memoryModule));        }      }    }  }  return wronglyPlacedModules;}  }
class C{  private Request createRequest(long started){  int id=getRequestId();  Request request=data.build();  request.id=id;  request.started=started;  boolean loggingEnabled=picasso.loggingEnabled;  if (loggingEnabled) {    log(OWNER_MAIN,VERB_CREATED,request.plainId(),request.toString());  }  Request transformed=picasso.transformRequest(request);  if (transformed != request) {    transformed.id=id;    transformed.started=started;    if (loggingEnabled) {      log(OWNER_MAIN,VERB_CHANGED,transformed.logId(),"into " + transformed);    }  }  return transformed;}  }
class C{  public static boolean useDoublesAsDef(Operand u,Instruction s){  for (Enumeration<Operand> d=s.getDefs(); d.hasMoreElements(); ) {    Operand def=d.nextElement();    if (def != null) {      if (def == u)       return true;    }  }  return false;}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("oc4j9x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Oc4j9xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("oc4j10x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Oc4j10xExistingLocalConfiguration.class);}  }
class C{  private static void regSetValueEx(String subKey,String valueName,String value,int regLevel) throws RegisterFailedException {  if (!isSubKeyExist(subKey,regLevel)) {    regCreateKeyEx(subKey,regLevel);  }  int hKey=getHKeyByLevel(regLevel);  if (WinRegistryWrapper.WinRegSetValueEx(hKey,subKey,valueName,value) != ERROR_SUCCESS) {    throw new RegisterFailedException("Value:" + " valueName" + " setting error");  }}  }
class C{  private void checkQopSupport(byte[] qopInChallenge,byte[] ciphersInChallenge) throws IOException {  String qopOptions;  if (qopInChallenge == null) {    qopOptions="auth";  } else {    qopOptions=new String(qopInChallenge,encoding);  }  String[] serverQopTokens=new String[3];  byte[] serverQop=parseQop(qopOptions,serverQopTokens,true);  byte serverAllQop=combineMasks(serverQop);switch (findPreferredMask(serverAllQop,qop)) {case 0:    throw new SaslException("DIGEST-MD5: No common protection " + "layer between client and server");case NO_PROTECTION:  negotiatedQop="auth";break;case INTEGRITY_ONLY_PROTECTION:negotiatedQop="auth-int";integrity=true;rawSendSize=sendMaxBufSize - 16;break;case PRIVACY_PROTECTION:negotiatedQop="auth-conf";privacy=integrity=true;rawSendSize=sendMaxBufSize - 26;checkStrengthSupport(ciphersInChallenge);break;}if (logger.isLoggable(Level.FINE)) {logger.log(Level.FINE,"DIGEST61:Raw send size: {0}",new Integer(rawSendSize));}}  }
class C{  public boolean isMosaicLevyPresent(){  return null != this.getMosaicLevy();}  }
class C{  public void save() throws ParseException {  ParseTaskUtils.wait(saveInBackground());}  }
class C{  public void showAndWait(){  if (!isTrayShowing()) {    stage.show();    animator.playShowAnimation();    onShown();  }}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(FooApp.class);  SimpleCommandLinePropertySource source=new SimpleCommandLinePropertySource(args);  addDefaultProfile(app,source);  Environment env=app.run(args).getEnvironment();  log.info("\n----------------------------------------------------------\n\t" + "Application '{}' is running! Access URLs:\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t"+ "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("spring.application.name"),env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));  String configServerStatus=env.getProperty("configserver.status");  log.info("\n----------------------------------------------------------\n\t" + "Config Server: \t{}\n----------------------------------------------------------",configServerStatus == null ? "Not found or not setup for this application" : configServerStatus);}  }
class C{  public int supportedSpeedModes(){  return (DccThrottle.SpeedStepMode128 | DccThrottle.SpeedStepMode28);}  }
class C{  public RelativeLocator(double relativeX,double relativeY){  this(relativeX,relativeY,false);}  }
class C{  public boolean isValue(){  return value;}  }
class C{  public void write(byte[] buf,int off,int len) throws IOException {  if (off < 0 || len < 0 || off + len < 0 || off + len > buf.length)   throw new IndexOutOfBoundsException();  if (exception != null)   throw exception;  if (finished)   throw new XZIOException("Stream finished or closed");  try {    if (blockEncoder == null)     blockEncoder=new BlockOutputStream(out,filters,check);    blockEncoder.write(buf,off,len);  } catch (  IOException e) {    exception=e;    throw e;  }}  }
class C{  public static void unescapeJavaScript(Writer out,String str) throws IOException {  unescapeJava(out,str);}  }
class C{  public boolean visit(BooleanLiteral node){  return true;}  }
class C{  public void addCompilerAdapter(CompilerAdapter adapter){  if (adapter == null)   throw new IllegalArgumentException("Null adapter");  adapters.add(0,adapter);}  }
class C{  synchronized static public void forceLoad(){  if (loaded)   return;  log.warn("Running.");  if (log.isInfoEnabled()) {    for (    RDFFormat f : RDFFormat.values()) {      log.info("RDFFormat: before: " + f);    }    for (    RDFParserFactory f : RDFParserRegistry.getInstance().getAll()) {      log.info("RDFParserFactory: before: " + f);    }    for (    RDFWriterFactory f : RDFWriterRegistry.getInstance().getAll()) {      log.info("RDFWriterFactory: before: " + f);    }    for (    TupleQueryResultWriterFactory f : TupleQueryResultWriterRegistry.getInstance().getAll()) {      log.info("TupleQueryResultWriterFactory: before: " + f);    }  }  RDFFormat.register(TURTLE_RDR);  RDFFormat.register(NTRIPLES_RDR);  RDFFormat.register(JSON_RDR);{    final RDFParserRegistry r=RDFParserRegistry.getInstance();    r.add((RDFParserFactory)getInstanceForClass(NTRIPLES_PARSER_FACTORY));    assert r.has(((RDFParserFactory)getInstanceForClass(NTRIPLES_PARSER_FACTORY)).getRDFFormat());    r.add((RDFParserFactory)getInstanceForClass(TURTLE_PARSER_FACTORY));    assert r.has(((RDFParserFactory)getInstanceForClass(TURTLE_PARSER_FACTORY)).getRDFFormat());    r.add((RDFParserFactory)getInstanceForClass(JSON_CONSTRUCT_PARSER_FACTORY));  }{    final TupleQueryResultWriterRegistry r=TupleQueryResultWriterRegistry.getInstance();    r.add((TupleQueryResultWriterFactory)getInstanceForClass(JSON_WRITER_FACTORY));  }{    final TupleQueryResultParserRegistry r=TupleQueryResultParserRegistry.getInstance();    r.add((TupleQueryResultParserFactory)getInstanceForClass(JSON_RESULT_PARSER_FACTORY));  }{    final RDFWriterRegistry r=RDFWriterRegistry.getInstance();    r.add((RDFWriterFactory)getInstanceForClass(TURTLE_WRITER_FACTORY));    r.add((RDFWriterFactory)getInstanceForClass(JSON_CONSTRUCT_WRITER_FACTORY));  }  if (log.isInfoEnabled()) {    for (    RDFFormat f : RDFFormat.values()) {      log.info("RDFFormat: after: " + f);    }    for (    RDFParserFactory f : RDFParserRegistry.getInstance().getAll()) {      log.info("RDFParserFactory: after: " + f);    }    for (    RDFWriterFactory f : RDFWriterRegistry.getInstance().getAll()) {      log.info("RDFWriterFactory: after: " + f);    }    for (    TupleQueryResultWriterFactory f : TupleQueryResultWriterRegistry.getInstance().getAll()) {      log.info("TupleQueryResultWriterFactory: after: " + f);    }  }  loaded=true;}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public void initialize(ServletContext sc){  if (!hasBeenInitialized(sc)) {    initializedContexts.add(sc);    initializeConfigProcessers(sc);    ExecutorService executor=null;    try {      WebConfiguration webConfig=WebConfiguration.getInstance(sc);      boolean validating=webConfig.isOptionEnabled(ValidateFacesConfigFiles);      if (useThreads(sc)) {        executor=createExecutorService();      }      DocumentInfo[] facesDocuments=getConfigDocuments(sc,getFacesConfigResourceProviders(),executor,validating);      FacesConfigInfo lastFacesConfigInfo=new FacesConfigInfo(facesDocuments[facesDocuments.length - 1]);      facesDocuments=sortDocuments(facesDocuments,lastFacesConfigInfo);      InitFacesContext context=(InitFacesContext)FacesContext.getCurrentInstance();      InjectionProvider containerConnector=InjectionProviderFactory.createInstance(context.getExternalContext());      context.getAttributes().put(INJECTION_PROVIDER_KEY,containerConnector);      boolean isFaceletsDisabled;      if (lastFacesConfigInfo.isWebInfFacesConfig()) {        isFaceletsDisabled=isFaceletsDisabled(webConfig,lastFacesConfigInfo);      } else {        isFaceletsDisabled=webConfig.isOptionEnabled(DisableFaceletJSFViewHandler) || webConfig.isOptionEnabled(DisableFaceletJSFViewHandlerDeprecated);      }      if (!lastFacesConfigInfo.isWebInfFacesConfig() || !lastFacesConfigInfo.isMetadataComplete()) {        ProvideMetadataToAnnotationScanTask taskMetadata=new ProvideMetadataToAnnotationScanTask(facesDocuments,containerConnector);        Future<Map<Class<? extends Annotation>,Set<Class<?>>>> annotationScan;        if (executor != null) {          annotationScan=executor.submit(new AnnotationScanTask(sc,context,taskMetadata));          pushTaskToContext(sc,annotationScan);        } else {          annotationScan=new FutureTask<>(new AnnotationScanTask(sc,context,taskMetadata));          ((FutureTask)annotationScan).run();        }        pushTaskToContext(sc,annotationScan);      }      if (containerConnector instanceof HighAvailabilityEnabler) {        ((HighAvailabilityEnabler)containerConnector).enableHighAvailability(sc);      }      ServiceLoader<ApplicationConfigurationPopulator> populators=ServiceLoader.load(ApplicationConfigurationPopulator.class);      Document newDoc;      DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();      dbf.setNamespaceAware(true);      DocumentBuilder builder=dbf.newDocumentBuilder();      DOMImplementation domImpl=builder.getDOMImplementation();      List<DocumentInfo> programmaticDocuments=new ArrayList<>();      DocumentInfo newDocInfo;      for (      ApplicationConfigurationPopulator pop : populators) {        newDoc=domImpl.createDocument(RIConstants.JAVAEE_XMLNS,"faces-config",null);        Attr versionAttribute=newDoc.createAttribute("version");        versionAttribute.setValue("2.2");        newDoc.getDocumentElement().getAttributes().setNamedItem(versionAttribute);        try {          pop.populateApplicationConfiguration(newDoc);          newDocInfo=new DocumentInfo(newDoc,null);          programmaticDocuments.add(newDocInfo);        } catch (        Throwable e) {          if (LOGGER.isLoggable(Level.INFO)) {            LOGGER.log(Level.INFO,"{0} thrown when invoking {1}.populateApplicationConfigurationResources: {2}",new String[]{e.getClass().getName(),pop.getClass().getName(),e.getMessage()});          }        }      }      if (!programmaticDocuments.isEmpty()) {        DocumentInfo[] newDocumentInfo=new DocumentInfo[facesDocuments.length + programmaticDocuments.size()];        System.arraycopy(facesDocuments,0,newDocumentInfo,0,facesDocuments.length);        int i=facesDocuments.length;        for (        DocumentInfo cur : programmaticDocuments) {          newDocumentInfo[i]=cur;        }        facesDocuments=newDocumentInfo;      }      FACES_CONFIG_PROCESSOR_CHAIN.process(sc,facesDocuments);      if (!isFaceletsDisabled) {        FACELET_TAGLIB_CONFIG_PROCESSOR_CHAIN.process(sc,getConfigDocuments(sc,getFaceletConfigResourceProviders(),executor,validating));      }    } catch (    Exception e) {      releaseFactories();      Throwable t=e;      if (!(e instanceof ConfigurationException)) {        t=new ConfigurationException("CONFIGURATION FAILED! " + t.getMessage(),t);      }      throw (ConfigurationException)t;    } finally {      if (executor != null) {        executor.shutdown();      }      sc.removeAttribute(ANNOTATIONS_SCAN_TASK_KEY);    }  }  DbfFactory.removeSchemaMap(sc);}  }
class C{  protected void assertSubsetOf(Query q1,Query q2,Query filter) throws Exception {  QueryUtils.check(q1);  QueryUtils.check(q2);  if (filter != null) {    q1=new BooleanQuery.Builder().add(q1,Occur.MUST).add(filter,Occur.FILTER).build();    q2=new BooleanQuery.Builder().add(q2,Occur.MUST).add(filter,Occur.FILTER).build();  }  for (  Sort sort : new Sort[]{Sort.INDEXORDER,Sort.RELEVANCE}) {    TopDocs td1=s1.search(q1,reader.maxDoc(),sort);    TopDocs td2=s2.search(q2,reader.maxDoc(),sort);    assertTrue("too many hits: " + td1.totalHits + " > "+ td2.totalHits,td1.totalHits <= td2.totalHits);    BitSet bitset=new BitSet();    for (int i=0; i < td2.scoreDocs.length; i++) {      bitset.set(td2.scoreDocs[i].doc);    }    for (int i=0; i < td1.scoreDocs.length; i++) {      assertTrue(bitset.get(td1.scoreDocs[i].doc));    }  }}  }
class C{  public Node pop(){  if (head == null)   return null;  Node nde=head;  remove(nde);  return nde;}  }
class C{  void showNothingToRefactor(){  CommonRefactoringUtil.showErrorHint(myProject,myEditor,PyBundle.message("refactoring.pull.up.error.cannot.perform.refactoring.no.base.classes",myClassUnderRefactoring.getName()),RefactoringBundle.message("pull.members.up.title"),"members.pull.up");}  }
class C{  public void addStreamOpenLocation(Location streamOpenLocation,Stream stream){  if (FindOpenStream.DEBUG) {    System.out.println("Stream open location at " + streamOpenLocation);  }  streamOpenLocationMap.put(streamOpenLocation,stream);  if (stream.isUninteresting()) {    uninterestingStreamEscapeSet.add(stream);  }}  }
class C{  public static Name fromAddress(byte[] addr){  if (addr.length != 4 && addr.length != 16)   throw new IllegalArgumentException("array must contain " + "4 or 16 elements");  StringBuffer sb=new StringBuffer();  if (addr.length == 4) {    for (int i=addr.length - 1; i >= 0; i--) {      sb.append(addr[i] & 0xFF);      if (i > 0)       sb.append(".");    }  } else {    int[] nibbles=new int[2];    for (int i=addr.length - 1; i >= 0; i--) {      nibbles[0]=(addr[i] & 0xFF) >> 4;      nibbles[1]=(addr[i] & 0xFF) & 0xF;      for (int j=nibbles.length - 1; j >= 0; j--) {        sb.append(Integer.toHexString(nibbles[j]));        if (i > 0 || j > 0)         sb.append(".");      }    }  }  try {    if (addr.length == 4)     return Name.fromString(sb.toString(),inaddr4); else     return Name.fromString(sb.toString(),inaddr6);  } catch (  TextParseException e) {    throw new IllegalStateException("name cannot be invalid");  }}  }
class C{  public static OutputLimitClause create(double frequency){  return new OutputLimitClause(OutputLimitSelector.DEFAULT,frequency);}  }
class C{  public ClassCastException(@Nullable String s){  super(s);}  }
class C{  private void receiveServerMessage() throws IOException {  mRemoteServerMessage=lengthValueRead(in,ServerMessage.class);  if (mRemoteServerMessage == null) {    setExchangeStatus(Status.ERROR);    setErrorMessage("Remote server message was not received.");    throw new IOException("Remote server message was not received.");  }}  }
class C{  public RxMDConfiguration build(){  return new RxMDConfiguration(defaultImageSize,blockQuotesColor,header1RelativeSize,header2RelativeSize,header3RelativeSize,header4RelativeSize,header5RelativeSize,header6RelativeSize,horizontalRulesColor,inlineCodeBgColor,codeBgColor,todoColor,todoDoneColor,unOrderListColor,linkColor,isLinkUnderline,rxMDImageLoader,mOnLinkClickCallback,isDebug);}  }
class C{  private static String deCamelCaseify(String identifier){  StringBuffer out=new StringBuffer();  for (int i=0; i < identifier.length(); i++) {    char currentChar=identifier.charAt(i);    if (i == 0) {      out.append(Character.toLowerCase(currentChar));    } else     if (Character.isUpperCase(currentChar)) {      out.append('_').append(Character.toLowerCase(currentChar));    } else {      out.append(currentChar);    }  }  return out.toString();}  }
class C{  @ToString public String toString(){  return "P" + String.valueOf(getValue()) + "M";}  }
class C{  public boolean isPostConstructCalled(){  return this.postConstructCalled;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.788 -0400",hash_original_method="BE89D05483B96102E41C8C8949DB36D5",hash_generated_method="B0BB02FF3FEB7B2727B34AB74C49FCE6") private void onInputDevicePropertyChanged(String path,String[] propValues){  String address=mBluetoothService.getAddressFromObjectPath(path);  if (address == null) {    Log.e(TAG,"onInputDevicePropertyChanged: Address of the remote device is null");    return;  }  log("Input Device : Name of Property is: " + propValues[0]);  boolean state=false;  if (propValues[1].equals("true")) {    state=true;  }  mBluetoothService.handleInputDevicePropertyChange(address,state);}  }
class C{  public ServicesStillPublishedException(String message,Reason reason,Object[] organizationIds){  super(message,organizationIds);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public Vcfas(Graph graph,IndependenceTest test){  this.graph=graph;  this.test=test;}  }
class C{  public Collection values(){  return nodeMap.values();}  }
class C{  public TaggedInputSplit(InputSplit inputSplit,Configuration conf,Class<? extends InputFormat> inputFormatClass,Class<? extends Mapper> mapperClass){  this.inputSplitClass=inputSplit.getClass();  this.inputSplit=inputSplit;  this.conf=conf;  this.inputFormatClass=inputFormatClass;  this.mapperClass=mapperClass;}  }
class C{  public boolean allocatePesForContainerVm(ContainerVm containerVm,List<Double> mipsShare){  return getContainerVmScheduler().allocatePesForVm(containerVm,mipsShare);}  }
class C{  protected AttributesImpl addNamespaceAttribute(AttributesImpl attrs,Namespace namespace){  if (declareNamespaceAttributes) {    if (attrs == null) {      attrs=new AttributesImpl();    }    String prefix=namespace.getPrefix();    String qualifiedName="xmlns";    if ((prefix != null) && (prefix.length() > 0)) {      qualifiedName="xmlns:" + prefix;    }    String uri="";    String localName=prefix;    String type="CDATA";    String value=namespace.getURI();    attrs.addAttribute(uri,localName,qualifiedName,type,value);  }  return attrs;}  }
class C{  SourceClass findLookupContext(){  for (MemberDefinition f=getFirstMember(); f != null; f=f.getNextMember()) {    if (f.isInnerClass()) {      SourceClass ic=(SourceClass)f.getInnerClass();      if (!ic.isInterface()) {        return ic;      }    }  }  for (MemberDefinition f=getFirstMember(); f != null; f=f.getNextMember()) {    if (f.isInnerClass()) {      SourceClass lc=((SourceClass)f.getInnerClass()).findLookupContext();      if (lc != null) {        return lc;      }    }  }  return null;}  }
class C{  private void closeListener(GridMessageListener lsnr){  if (lsnr instanceof GridUserMessageListener) {    GridUserMessageListener userLsnr=(GridUserMessageListener)lsnr;    if (userLsnr.predLsnr instanceof PlatformMessageFilter)     ((PlatformMessageFilter)userLsnr.predLsnr).onClose();  }}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  @Override protected void initData(){  ((TextView)this.findViewById(R.id.save_tv)).setText(OBJECT_IMAGE_URL);}  }
class C{  public static boolean hasMatchingAncestor(AccessibilityNodeInfoCompat node,NodeFilter filter){  if (node == null) {    return false;  }  final AccessibilityNodeInfoCompat result=getMatchingAncestor(node,filter);  if (result == null) {    return false;  }  result.recycle();  return true;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  private void addRouteCandidate(List<RouteCandidate> routeCandidates,RouteCandidate routeCandidate){  double actualScore=routeCandidate.getScore(points);  if (routeCandidates.isEmpty() || actualScore < routeCandidates.get(0).getScore(points)) {    this.setChanged();    this.notifyObservers();  }  if ((routeCandidates.isEmpty() || !isRepeated(routeCandidates,routeCandidate)) && isValid(routeCandidate)) {    if (routeCandidates.size() == MAX_NUMBER_OF_CANDIDATES)     routeCandidates.remove(routeCandidates.size() - 1);    boolean added=false;    for (int i=0; !added && i < routeCandidates.size(); i++)     if (routeCandidates.get(i).getScore(points) > actualScore) {      routeCandidates.add(i,routeCandidate);      added=true;    }    if (!added)     routeCandidates.add(routeCandidate);  }}  }
class C{  public static void writeRouteStops2Shape(String fileName,Map<Id,TransitStopFacility> stops,Collection<Id> stops2write){  initPointFeatureType("TransitRouteStops",null);  write(createStopFeatures(stops,stops2write),fileName);}  }
class C{  public void appendToContentBuffer(String append){  if (contentBuffer == null) {    contentBuffer=new StringBuffer(append);  } else {    contentBuffer.append("\n");    contentBuffer.append(append);  }}  }
class C{  @Override protected void free(byte[] value){  Preconditions.checkNotNull(value);}  }
class C{  public java.lang.StringBuffer append(char[] str,int offset,int len){  internal.append(str,offset,len);  return this;}  }
class C{  public static Map<String,Object> entitySortTest(DispatchContext dctx,Map<String,?> context){  Delegator delegator=dctx.getDelegator();  Set<ModelEntity> set=new TreeSet<ModelEntity>();  set.add(delegator.getModelEntity("Person"));  set.add(delegator.getModelEntity("PartyRole"));  set.add(delegator.getModelEntity("Party"));  set.add(delegator.getModelEntity("ContactMech"));  set.add(delegator.getModelEntity("PartyContactMech"));  set.add(delegator.getModelEntity("OrderHeader"));  set.add(delegator.getModelEntity("OrderItem"));  set.add(delegator.getModelEntity("OrderContactMech"));  set.add(delegator.getModelEntity("OrderRole"));  set.add(delegator.getModelEntity("Product"));  set.add(delegator.getModelEntity("RoleType"));  for (  ModelEntity modelEntity : set) {    Debug.logInfo(modelEntity.getEntityName(),module);  }  return ServiceUtil.returnSuccess();}  }
class C{  protected void completeEditing(){  if (tree.getInvokesStopCellEditing() && stopEditingInCompleteEditing && editingComponent != null) {    cellEditor.stopCellEditing();  }  completeEditing(false,true,false);}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  public long sub(final Date another){  return serialNumber - another.serialNumber;}  }
class C{  public static int unwrap(final CharListIterator i,final char array[]){  int j=array.length, offset=0;  while (j-- != 0 && i.hasNext())   array[offset++]=i.nextChar();  return array.length - j - 1;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN}) public CatalogServiceRestRep updateCatalogService(@PathParam("id") URI id,CatalogServiceUpdateParam param){  CatalogService catalogService=getCatalogServiceById(id,true);  List<CatalogServiceField> catalogServiceFields=catalogServiceManager.getCatalogServiceFields(id);  StorageOSUser user=getUserFromContext();  CatalogCategory parentCatalogCategory=catalogCategoryManager.getCatalogCategoryById(param.getCatalogCategory());  verifyAuthorizedInTenantOrg(uri(parentCatalogCategory.getTenant()),user);  validateParam(param,catalogService);  updateObject(catalogService,param,parentCatalogCategory);  List<CatalogServiceField> updatedCatalogServiceFields=updateObjectList(catalogService,catalogServiceFields,param.getCatalogServiceFields());  catalogServiceManager.updateCatalogService(catalogService,updatedCatalogServiceFields);  auditOpSuccess(OperationTypeEnum.UPDATE_CATALOG_SERVICE,catalogService.auditParameters());  catalogService=catalogServiceManager.getCatalogServiceById(catalogService.getId());  catalogServiceFields=catalogServiceManager.getCatalogServiceFields(catalogService.getId());  ServiceDescriptor serviceDescriptor=getServiceDescriptor(catalogService);  return map(catalogService,serviceDescriptor,catalogServiceFields);}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  private void acceptReceived(Epoch epoch,ConsensusMessage msg){  int cid=epoch.getConsensus().getId();  Logger.println("(Acceptor.acceptReceived) ACCEPT from " + msg.getSender() + " for consensus "+ cid);  epoch.setAccept(msg.getSender(),msg.getValue());  epoch.addToProof(msg);  computeAccept(cid,epoch,msg.getValue());}  }
class C{  @LargeTest public void testAudioTrackGetSetVolume() throws Exception {  final String audioFileName=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";  boolean flagForException=false;  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack",audioFileName);  audioTrack.setVolume(0);  assertEquals("Audio Volume",0,audioTrack.getVolume());  assertFalse("Audio Track UnMute",audioTrack.isMuted());  audioTrack.setVolume(45);  assertEquals("Audio Volume",45,audioTrack.getVolume());  assertFalse("Audio Track UnMute",audioTrack.isMuted());  try {    audioTrack.setVolume(-1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Volume = -1",flagForException);  assertEquals("Audio Volume",45,audioTrack.getVolume());  flagForException=false;  try {    audioTrack.setVolume(101);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Volume = 101",flagForException);  flagForException=false;  try {    audioTrack.setVolume(1000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Volume = 10000",flagForException);  assertEquals("Audio Volume",45,audioTrack.getVolume());}  }
class C{  public void waitUntilFree(){  while (isBusy()) {    sendEmptyMessage(BLANK);    lock.lock();    try {      if (isBusy()) {        busyCondition.await();      }    } catch (    InterruptedException e) {      throw new RuntimeException(e);    } finally {      lock.unlock();    }  }}  }
class C{  @Inject public HbaseSchemaService(SystemConfiguration config){  super(config);  _config=config;}  }
class C{  public static boolean testType(PsiElement element,IElementType type){  return element.getNode() != null && element.getNode().getElementType() == type;}  }
class C{  public boolean isMarketDataRunning(Tradestrategy tradestrategy){  if (m_marketDataRequests.containsKey(tradestrategy.getContract().getId())) {    Contract contract=m_marketDataRequests.get(tradestrategy.getContract().getId());    for (    Tradestrategy item : contract.getTradestrategies()) {      if (item.equals(tradestrategy)) {        return true;      }    }  }  return false;}  }
class C{  public BusinessObjectDefinitionEntity createBusinessObjectDefinitionEntity(String namespaceCode,String businessObjectDefinitionName,String dataProviderName,String businessObjectDefinitionDescription){  return createBusinessObjectDefinitionEntity(namespaceCode,businessObjectDefinitionName,dataProviderName,businessObjectDefinitionDescription,null);}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImported;  Element element;  Attr attr;  Node importedAttr;  String nodeName;  int nodeType;  String nodeValue;  NodeList addresses;  Node attrsParent;  doc=(Document)load("staffNS",true);  docImported=(Document)load("staff",true);  addresses=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)addresses.item(1);  attr=element.getAttributeNodeNS("http://www.nist.gov","zone");  importedAttr=docImported.importNode(attr,false);  nodeName=importedAttr.getNodeName();  nodeType=(int)importedAttr.getNodeType();  nodeValue=importedAttr.getNodeValue();  attrsParent=importedAttr.getParentNode();  assertNull("documentimportnode02_parentNull",attrsParent);  assertEquals("documentimportnode02_nodeName","emp:zone",nodeName);  assertEquals("documentimportnode02_nodeType",2,nodeType);  assertEquals("documentimportnode02_nodeValue","CANADA",nodeValue);}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public void addParts(List<MessagePart> partList){  this.parts.addAll(partList);}  }
class C{  public void reset(){  System.arraycopy(IV,0,cbcV,0,IV.length);  Arrays.fill(cbcNextV,(byte)0);  cipher.reset();}  }
class C{  void emitPropertyValuesArray(PrintWriter writer){  writer.append("  public static final String[] propertyValues").append("\n    = { ");  int item=0;  for (  String propValue : propertyValueIntervals.keySet()) {    if (++item == PROPERTY_VALUES_PER_LINE) {      writer.append(",\n        ");      item=1;    } else     if (item > 1) {      writer.append(", ");    }    writer.append("\"").append(propValue).append("\"");  }  writer.append(" };\n");}  }
class C{  public boolean isFunctionColumn(String columnName,char function){  if (columnName == null || m_functions.size() == 0)   return false;  String key=columnName + DELIMITER + function;  for (int i=0; i < m_functions.size(); i++) {    String f=(String)m_functions.get(i);    if (f.equals(key))     return true;  }  return false;}  }
class C{  private static Throwable reconstitute(Throwable t){  Throwable result=null;  try (ByteArrayOutputStream bout=new ByteArrayOutputStream();ObjectOutputStream out=new ObjectOutputStream(bout)){    out.writeObject(t);    out.flush();    try (ByteArrayInputStream bin=new ByteArrayInputStream(bout.toByteArray());ObjectInputStream in=new ObjectInputStream(bin)){      result=(Throwable)in.readObject();    }   } catch (  IOException|ClassNotFoundException e) {    throw new RuntimeException(e);  }  return result;}  }
class C{  public LengthConstraint(int length){  this(length,null);}  }
class C{  @Override public void configure(){  RfidTrafficController control;  RfidProtocol protocol;  String opt1=getOptionState(option1Name);switch (opt1) {case "Generic Stand-alone":    log.debug("Create Generic Standalone SpecificTrafficController");  control=new StandaloneTrafficController(this.getSystemConnectionMemo());this.getSystemConnectionMemo().configureManagers(new StandaloneSensorManager(control,this.getSystemPrefix()),new StandaloneReporterManager(control,this.getSystemPrefix()));break;case "MERG Concentrator":log.debug("Create MERG Concentrator SpecificTrafficController");control=new ConcentratorTrafficController(this.getSystemConnectionMemo(),getOptionState(option2Name));this.getSystemConnectionMemo().configureManagers(new ConcentratorSensorManager(control,this.getSystemPrefix()),new ConcentratorReporterManager(control,this.getSystemPrefix()));break;default :log.warn("adapter option " + opt1 + " defaults to Generic Stand-alone");control=new StandaloneTrafficController(this.getSystemConnectionMemo());this.getSystemConnectionMemo().configureManagers(new StandaloneSensorManager(control,this.getSystemPrefix()),new StandaloneReporterManager(control,this.getSystemPrefix()));break;}String opt3=getOptionState(option3Name);if (opt1.equals("MERG Concentrator")) {log.info("set protocol to CORE-ID");String opt2=getOptionState(option2Name);switch (opt2) {case "A-H":log.info("set concentrator range to 'A-H' at position 1");protocol=new CoreIdRfidProtocol('A','H',1);break;case "I-P":log.info("set concentrator range to 'I-P' at position 1");protocol=new CoreIdRfidProtocol('I','P',1);break;default :log.warn("concentrator range '{}' not supported - default to no concentrator",opt2);protocol=new CoreIdRfidProtocol();break;}} else {switch (opt3) {case "CORE-ID":log.info("set protocol to CORE-ID");protocol=new CoreIdRfidProtocol();break;case "Olimex":log.info("set protocol to Olimex");protocol=new OlimexRfidProtocol();break;case "Parallax":log.info("set protocol to Parallax");protocol=new ParallaxRfidProtocol();break;case "SeeedStudio":log.info("set protocol to SeeedStudio");protocol=new SeeedStudioRfidProtocol();break;default :log.warn("protocol option " + opt3 + " defaults to CORE-ID");protocol=new CoreIdRfidProtocol();break;}}this.getSystemConnectionMemo().setProtocol(protocol);this.getSystemConnectionMemo().setRfidTrafficController(control);control.setAdapterMemo(this.getSystemConnectionMemo());control.connectPort(this);control.sendInitString();}  }
class C{  static void go(int shortFall) throws Exception {  Reader r=new BufferedReader(new Source(shortFall),10);  char[] cbuf=new char[8];  int n1=r.read(cbuf);  int n2=r.read(cbuf);  System.err.println("Shortfall " + shortFall + ": Read "+ n1+ ", then "+ n2+ " chars");  if (n1 != cbuf.length)   throw new Exception("First read returned " + n1);  if (n2 != cbuf.length)   throw new Exception("Second read returned " + n2);}  }
class C{  private void initQuadProgram(){  glUseProgram(quadProgram);  int texUniform=glGetUniformLocation(quadProgram,"tex");  glUniform1i(texUniform,0);  glUseProgram(0);}  }
class C{  static TBigInteger finalSubtraction(int res[],TBigInteger modulus){  int modulusLen=modulus.numberLength;  boolean doSub=res[modulusLen] != 0;  if (!doSub) {    int modulusDigits[]=modulus.digits;    doSub=true;    for (int i=modulusLen - 1; i >= 0; i--) {      if (res[i] != modulusDigits[i]) {        doSub=(res[i] != 0) && ((res[i] & 0xFFFFFFFFL) > (modulusDigits[i] & 0xFFFFFFFFL));        break;      }    }  }  TBigInteger result=new TBigInteger(1,modulusLen + 1,res);  if (doSub) {    TElementary.inplaceSubtract(result,modulus);  }  result.cutOffLeadingZeroes();  return result;}  }
class C{  public void valueChanged(ListSelectionEvent e){  int oldLeadSelectionIndex=leadSelectionIndex;  leadSelectionIndex=JList.this.getLeadSelectionIndex();  if (oldLeadSelectionIndex != leadSelectionIndex) {    Accessible oldLS, newLS;    oldLS=(oldLeadSelectionIndex >= 0) ? getAccessibleChild(oldLeadSelectionIndex) : null;    newLS=(leadSelectionIndex >= 0) ? getAccessibleChild(leadSelectionIndex) : null;    firePropertyChange(AccessibleContext.ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY,oldLS,newLS);  }  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));  firePropertyChange(AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));  AccessibleStateSet s=getAccessibleStateSet();  ListSelectionModel lsm=JList.this.getSelectionModel();  if (lsm.getSelectionMode() != ListSelectionModel.SINGLE_SELECTION) {    if (!s.contains(AccessibleState.MULTISELECTABLE)) {      s.add(AccessibleState.MULTISELECTABLE);      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.MULTISELECTABLE);    }  } else {    if (s.contains(AccessibleState.MULTISELECTABLE)) {      s.remove(AccessibleState.MULTISELECTABLE);      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.MULTISELECTABLE,null);    }  }}  }
class C{  private void configureProjectTree(){  bind(TreeStructureProviderRegistry.class).to(TreeStructureProviderRegistryImpl.class).in(Singleton.class);  install(new GinFactoryModuleBuilder().build(org.eclipse.che.ide.api.project.tree.generic.NodeFactory.class));}  }
class C{  protected void notifyListeners(){  LauncherBackupAgentHelper.dataChanged(getContext());  if (mListener != null) {    mListener.onLauncherProviderChange();  }}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public Entry(final byte[] k,final byte[] b){  this.h=NaturalOrder.decodeLong(k);  this.b=b;}  }
class C{  private static void assertChangeEvents(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){  String inputDesc=String.format("earlyEvents=%s, lateEvents=%s, " + "anytimeEvents=%s, actualEvents=%s",earlyEvents,lateEvents,anytimeEvents,actualEvents);  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);  for (  PortChangeEvent ev : early) {    assertFalse("Test setup error. Early and late overlap",late.contains(ev));    assertFalse("Test setup error. Early and anytime overlap",any.contains(ev));  }  for (  PortChangeEvent ev : late) {    assertFalse("Test setup error. Late and early overlap",early.contains(ev));    assertFalse("Test setup error. Late and any overlap",any.contains(ev));  }  for (  PortChangeEvent ev : any) {    assertFalse("Test setup error. Anytime and early overlap",early.contains(ev));    assertFalse("Test setup error. Anytime and late overlap",late.contains(ev));  }  for (  PortChangeEvent a : actualEvents) {    if (early.remove(a)) {      continue;    }    if (any.remove(a)) {      continue;    }    if (late.remove(a)) {      if (!early.isEmpty()) {        fail(a + " is in late list, but haven't seen all required " + "early events. "+ inputDesc);      } else {        continue;      }    }    fail(a + " was not expected. " + inputDesc);  }  if (!early.isEmpty())   fail("Elements left in early: " + early + ". "+ inputDesc);  if (!late.isEmpty())   fail("Elements left in late: " + late + ". "+ inputDesc);  if (!any.isEmpty())   fail("Elements left in any: " + any + ". "+ inputDesc);}  }
class C{  public ServicePriceModelTable(){  super(SERVICE_PM_TABLE_FILE_NAME);}  }
class C{  public void testSendFunctionGroup2(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.sendFunctionGroup2();  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup2 needs to be implemented if invoked");}  }
class C{  public static boolean deviceSupportsCompression(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public ThumbnailParameter(double widthScalingFactor,double heightScalingFactor,Region sourceRegion,boolean keepAspectRatio,String outputFormat,String outputFormatType,float outputQuality,int imageType,List<ImageFilter> filters,ResizerFactory resizerFactory,boolean fitWithinDimensions,boolean useExifOrientation){  this(null,widthScalingFactor,heightScalingFactor,sourceRegion,keepAspectRatio,outputFormat,outputFormatType,outputQuality,imageType,filters,resizerFactory,fitWithinDimensions,useExifOrientation);  validateScalingFactor();}  }
class C{  private static String unquoteIfNeeded(String part){  if (part.length() > 1 && part.charAt(0) == '"' && part.charAt(part.length() - 1) == '"') {    part=part.substring(1,part.length() - 1);  }  return part.trim();}  }
class C{  public DelegatingDatagramSocket(DatagramSocket delegate,SocketAddress address) throws SocketException {  super((SocketAddress)null);  if (delegate != null) {    this.delegate=delegate;  } else {    if (delegateFactory != null) {      this.delegate=delegateFactory.createUnboundDatagramSocket();    } else {      this.delegate=null;      initReceiveBufferSize();    }    bind(address);  }}  }
class C{  public static final int BuildInteger(byte bytevec[],int offset,boolean MSBFirst){  if (MSBFirst)   return BuildIntegerBE(bytevec,offset); else   return BuildIntegerLE(bytevec,offset);}  }
class C{  FBCachedFetcher(List<RowValue> rows,FBObjectListener.FetcherListener fetcherListener,RowDescriptor rowDescriptor,GDSHelper gdsHelper,boolean retrieveBlobs) throws SQLException {  assert retrieveBlobs && rowDescriptor != null && gdsHelper != null || !retrieveBlobs : "Need non-null rowDescriptor and gdsHelper for retrieving blobs";  this.rows=new ArrayList<>(rows);  this.fetcherListener=fetcherListener;  forwardOnly=false;  if (retrieveBlobs) {    final boolean[] isBlob=new boolean[rowDescriptor.getCount()];    final boolean hasBlobs=determineBlobs(rowDescriptor,isBlob);    if (hasBlobs) {      for (      RowValue row : rows) {        cacheBlobsInRow(gdsHelper,rowDescriptor,isBlob,row);      }    }  }}  }
class C{  public final boolean within(Element element,boolean toElement){  if (Element.is(element)) {    EventTarget target=toElement ? getRelatedEventTarget() : getEventTarget();    if (Element.is(target)) {      return element.isOrHasChild((Element)target.cast());    }  }  return false;}  }
class C{  public void spaceHorizontal(){  if (getSelectedNeurons().size() <= 1) {    return;  }  ArrayList<Neuron> sortedNeurons=getSelectedModelNeurons();  Collections.sort(sortedNeurons,new NeuronComparator(NeuronComparator.Type.COMPARE_X));  double min=sortedNeurons.get(0).getX();  double max=(sortedNeurons.get(sortedNeurons.size() - 1)).getX();  double space=(max - min) / (sortedNeurons.size() - 1);  int i=0;  for (  Neuron neuron : sortedNeurons) {    neuron.setX(min + space * i);    i++;  }  repaint();}  }
class C{  public static int classModifiers(){  return PUBLIC | PROTECTED | PRIVATE| ABSTRACT| STATIC| FINAL| STRICT;}  }
class C{  private static void convertEdges(final INaviView view,final INaviView prunedView,final Map<INaviViewNode,INaviViewNode> nodeMap){  final Set<Pair<INaviViewNode,INaviViewNode>> createdEdges=new HashSet<Pair<INaviViewNode,INaviViewNode>>();  for (  final INaviEdge edge : view.getGraph().getEdges()) {    final Set<EdgeResult> sources=getSources(edge,nodeMap,new HashSet<INaviEdge>());    final Set<EdgeResult> targets=getTargets(edge,nodeMap,new HashSet<INaviEdge>());    for (    final EdgeResult source : sources) {      for (      final EdgeResult target : targets) {        final Pair<INaviViewNode,INaviViewNode> edgePair=new Pair<INaviViewNode,INaviViewNode>(source.m_node,target.m_node);        if (createdEdges.contains(edgePair)) {          continue;        }        prunedView.getContent().createEdge(source.m_node,target.m_node,source.m_type);        createdEdges.add(edgePair);      }    }  }}  }
class C{  public static void writeMediumInt(ByteBuffer out,int value){  out.put((byte)((value >>> 16) & 0xff));  out.put((byte)((value >>> 8) & 0xff));  out.put((byte)(value & 0xff));}  }
class C{  public static UiObjectMatcher withResourceId(String id){  return withResourceId(id,null);}  }
class C{  public static byte[] hexToBytes(String hex){  if (hex.indexOf(' ') >= 0)   hex=hex.replace(" ","");  if ((hex.length() & 0x01) == 1 || !hex.matches("[\\da-f]*"))   return null;  final byte[] bytes=new byte[hex.length() / 2];  for (int i=bytes.length - 1; i >= 0; i--) {    final char upp=hex.charAt(i * 2);    final char low=hex.charAt(i * 2 + 1);    bytes[i]=(byte)(((upp - (upp < 'a' ? '0' : 'a' - 10)) << 4) | (low - (low < 'a' ? '0' : 'a' - 10)));  }  return bytes;}  }
class C{  public StateMachineConfigurationBuilder(ObjectPostProcessor<Object> objectPostProcessor,boolean allowConfigurersOfSameType){  super(objectPostProcessor,allowConfigurersOfSameType);}  }
class C{  @SuppressWarnings("resource") private Result buildClusterState(String clusterDescription,int replicationFactor,int maxShardsPerNode,String... liveNodes){  Result result=new Result();  Map<String,Slice> slices=null;  Map<String,Replica> replicas=null;  Map<String,Object> collectionProps=new HashMap<>();  collectionProps.put(ZkStateReader.MAX_SHARDS_PER_NODE,Integer.toString(maxShardsPerNode));  collectionProps.put(ZkStateReader.REPLICATION_FACTOR,Integer.toString(replicationFactor));  Map<String,DocCollection> collectionStates=new HashMap<>();  DocCollection docCollection=null;  Slice slice=null;  int replicaCount=1;  Matcher m=BLUEPRINT.matcher(clusterDescription);  while (m.find()) {    Replica replica;switch (m.group(1)) {case "c":      slices=new HashMap<>();    docCollection=new DocCollection("collection" + (collectionStates.size() + 1),slices,collectionProps,null);  collectionStates.put(docCollection.getName(),docCollection);break;case "s":replicas=new HashMap<>();slice=new Slice("slice" + (slices.size() + 1),replicas,null);slices.put(slice.getName(),slice);break;case "r":Map<String,Object> replicaPropMap=new HashMap<>();String node;node=m.group(2);if (node == null || node.trim().length() == 0) {node="1";}String state=ZkStateReader.ACTIVE;String stateCode=m.group(3);if (stateCode != null) {switch (stateCode.charAt(0)) {case 'S':state=ZkStateReader.ACTIVE;break;case 'R':state=ZkStateReader.RECOVERING;break;case 'D':state=ZkStateReader.DOWN;break;case 'F':state=ZkStateReader.RECOVERY_FAILED;break;default :throw new IllegalArgumentException("Unexpected state for replica: " + stateCode);}}String nodeName="baseUrl" + node + "_";String replicaName="replica" + replicaCount++;if ("*".equals(m.group(4))) {replicaName+=" (bad)";}replicaPropMap.put(ZkStateReader.NODE_NAME_PROP,nodeName);replicaPropMap.put(ZkStateReader.BASE_URL_PROP,"http://baseUrl" + node);replicaPropMap.put(ZkStateReader.STATE_PROP,state);replica=new Replica(replicaName,replicaPropMap);if ("*".equals(m.group(4))) {result.badReplica=new DownReplica();result.badReplica.replica=replica;result.badReplica.slice=slice;result.badReplica.collection=docCollection;}replicas.put(replica.getName(),replica);break;default :break;}}MockZkStateReader reader=new MockZkStateReader(null,collectionStates.keySet());ClusterState clusterState=new ClusterState(1,new HashSet<String>(Arrays.asList(liveNodes)),collectionStates);reader=new MockZkStateReader(clusterState,collectionStates.keySet());String json;try {json=new String(ZkStateReader.toJSON(clusterState),"UTF-8");} catch (UnsupportedEncodingException e) {throw new RuntimeException("Unexpected");}System.err.println("build:" + buildNumber++);System.err.println(json);assert result.badReplica != null : "Is there no bad replica?";assert result.badReplica.slice != null : "Is there no bad replica?";result.reader=reader;results.add(result);return result;}  }
class C{  private void refreshMuteMicButton(){  AudioManager audioManager=(AudioManager)VectorCallViewActivity.this.getSystemService(Context.AUDIO_SERVICE);  mMuteMicImageView.setVisibility(View.VISIBLE);  boolean isMuted=audioManager.isMicrophoneMute();  Log.d(LOG_TAG,"## refreshMuteMicButton(): isMuted=" + isMuted);  int iconId=isMuted ? R.drawable.ic_material_mic_off_pink_red : R.drawable.ic_material_mic_off_grey;  mMuteMicImageView.setImageResource(iconId);}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();  sb.append("p2pToken=" + p2pToken + f);  sb.append("vaSpaceToken=" + vaSpaceToken + f);  return sb.toString();}  }
class C{  @SuppressWarnings("deprecation") public static void writeBinaryTestMatrixBlocks(String file,double[][] matrix,int rowsInBlock,int colsInBlock,boolean sparseFormat){  try {    SequenceFile.Writer writer=new SequenceFile.Writer(FileSystem.get(conf),conf,new Path(file),MatrixIndexes.class,MatrixBlock.class);    MatrixIndexes index=new MatrixIndexes();    MatrixBlock value=new MatrixBlock();    for (int i=0; i < matrix.length; i+=rowsInBlock) {      int rows=Math.min(rowsInBlock,(matrix.length - i));      for (int j=0; j < matrix[i].length; j+=colsInBlock) {        int cols=Math.min(colsInBlock,(matrix[i].length - j));        index.setIndexes(((i / rowsInBlock) + 1),((j / colsInBlock) + 1));        value=new MatrixBlock(rows,cols,sparseFormat);        for (int k=0; k < rows; k++) {          for (int l=0; l < cols; l++) {            value.setValue(k,l,matrix[i + k][j + l]);          }        }        writer.append(index,value);      }    }    writer.close();  } catch (  IOException e) {    e.printStackTrace();    fail("unable to write test matrix: " + e.getMessage());  }}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.internal_load_so_button:    this.onDoBlur();  break;}}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    Random generator=new Random(987654);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          dist=diagGridRes;          maxSlope=-99999999;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData) {switch (i) {case 1:                slope=z - z2;              break;case 3:            slope=z - z2;          break;case 5:        slope=z - z2;      break;case 7:    slope=z - z2;  break;default :slope=1 / (2 - generator.nextDouble()) * (z - z2);}if (slope > maxSlope) {maxSlope=slope;flowDir=1 << i;}}if (dist == gridRes) {dist=diagGridRes;} else {dist=gridRes;}}if (maxSlope > 0) {output.setValue(row,col,flowDir);} else {output.setValue(row,col,0);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());DEM.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  protected boolean hasReceivedMessage(){  return messages.isEmpty();}  }
class C{  private static BitMatrix bitMatrixFromEncoder(PDF417 encoder,String contents,int width,int height) throws WriterException {  int errorCorrectionLevel=2;  encoder.generateBarcodeLogic(contents,errorCorrectionLevel);  int lineThickness=2;  int aspectRatio=4;  byte[][] originalScale=encoder.getBarcodeMatrix().getScaledMatrix(lineThickness,aspectRatio * lineThickness);  boolean rotated=false;  if ((height > width) ^ (originalScale[0].length < originalScale.length)) {    originalScale=rotateArray(originalScale);    rotated=true;  }  int scaleX=width / originalScale[0].length;  int scaleY=height / originalScale.length;  int scale;  if (scaleX < scaleY) {    scale=scaleX;  } else {    scale=scaleY;  }  if (scale > 1) {    byte[][] scaledMatrix=encoder.getBarcodeMatrix().getScaledMatrix(scale * lineThickness,scale * aspectRatio * lineThickness);    if (rotated) {      scaledMatrix=rotateArray(scaledMatrix);    }    return bitMatrixFrombitArray(scaledMatrix);  }  return bitMatrixFrombitArray(originalScale);}  }
class C{  public boolean isShapeVisible(){  return this.shapeVisible;}  }
class C{  public static boolean sendHttpPostRequest(HttpURLConnection connection,String contentType,byte[] data){  try {    connection.setRequestMethod("POST");  } catch (  ProtocolException e) {    LOG.log(Level.SEVERE,"Failed to set post request: ",e);    return false;  }  if (data.length > 0) {    connection.setRequestProperty(CONTENT_TYPE,contentType);    connection.setRequestProperty(CONTENT_LENGTH,Integer.toString(data.length));    connection.setUseCaches(false);    connection.setDoOutput(true);    OutputStream os=null;    try {      os=connection.getOutputStream();      os.write(data);      os.flush();    } catch (    IOException e) {      LOG.log(Level.SEVERE,"Failed to send request: ",e);      return false;    } finally {      try {        if (os != null) {          os.close();        }      } catch (      IOException e) {        LOG.log(Level.SEVERE,"Failed to close OutputStream: ",e);        return false;      }    }  }  return true;}  }
class C{  @Override public boolean hasInconsistencies(){  return types.hasInconsistencies() || !inconsistencies.isEmpty();}  }
class C{  @SuppressWarnings("ConstantConditions") private void switchHandlerErrorFlag(boolean flag) throws Exception {  IgfsProcessorAdapter igfsProc=((IgniteKernal)grid(0)).context().igfs();  Map<String,IgfsContext> igfsMap=getField(igfsProc,"igfsCache");  IgfsServerManager srvMgr=F.first(igfsMap.values()).server();  Collection<IgfsServer> srvrs=getField(srvMgr,"srvrs");  IgfsServerHandler igfsHnd=getField(F.first(srvrs),"hnd");  Field field=igfsHnd.getClass().getDeclaredField("errWrite");  field.setAccessible(true);  field.set(null,flag);}  }
class C{  public Vector3f addLocal(float addX,float addY,float addZ){  x+=addX;  y+=addY;  z+=addZ;  return this;}  }
class C{  public MassnahmenUmsetzung createMassnahmenUmsetzung(BausteinUmsetzung bu,Massnahme mn,String language){  MassnahmenUmsetzung mu=new MassnahmenUmsetzung(bu);  copyValues(mn,mu,language);  bu.addChild(mu);  return mu;}  }
class C{  private int[] fullyLoadFileToArray(File file,int startIndex) throws IOException {  IntBuffer buffer=associateMemoryMappedFile(file).asIntBuffer();  int size=(int)(file.length() - (4 * startIndex)) / 4;  int[] result=new int[size];  buffer.position(startIndex);  buffer.get(result,0,size);  return result;}  }
class C{  public static boolean containsAllUuids(ParcelUuid[] uuidA,ParcelUuid[] uuidB){  if (uuidA == null && uuidB == null)   return true;  if (uuidA == null) {    return uuidB.length == 0 ? true : false;  }  if (uuidB == null)   return true;  HashSet<ParcelUuid> uuidSet=new HashSet<ParcelUuid>(Arrays.asList(uuidA));  for (  ParcelUuid uuid : uuidB) {    if (!uuidSet.contains(uuid))     return false;  }  return true;}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  private static void vecswap(double[] x,int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  public CellIndex(int row,int col){  this.row=row;  this.col=col;}  }
class C{  public Object remove(int key){  Entry[] table=this.table;  int bucket=Math.abs(key) % table.length;  for (Entry e=table[bucket], prev=null; e != null; prev=e, e=e.next) {    if (key == e.key) {      if (prev != null)       prev.next=e.next; else       table[bucket]=e.next;      count--;      Object oldValue=e.value;      e.value=null;      return oldValue;    }  }  return null;}  }
class C{  public static void showToast(Context context,String message){  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  public void initialise(double epsilon) throws Exception {  this.kernelWidth=epsilon;  initialise(1,1);}  }
class C{  public SimpleIoProcessorPool(Class<? extends IoProcessor<S>> processorType,int size){  this(processorType,null,size,null);}  }
class C{  protected void writeTimeout(StreamOutput out) throws IOException {  timeout.writeTo(out);}  }
class C{  public static void main(String[] args){  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  sc.getConfig().transit().setUseTransit(true);  sc.getConfig().scenario().setUseVehicles(true);  new MatsimNetworkReader(sc.getNetwork()).readFile(DIR + "multimodalnetwork.xml");  new TransitScheduleReader(sc).readFile(DIR + "transitschedule.xml");  new VehicleReaderV1(((MutableScenario)sc).getTransitVehicles()).readFile(DIR + "transitVehicles.xml");  List<Id<Link>> links=new ArrayList<Id<Link>>(){    /** 
 */
    private static final long serialVersionUID=1L;{      add(Id.create("1112",Link.class));      add(Id.create("1213",Link.class));      add(Id.create("1323",Link.class));      add(Id.create("2324",Link.class));      add(Id.create("2434",Link.class));      add(Id.create("3444",Link.class));      add(Id.create("4434",Link.class));      add(Id.create("3424",Link.class));      add(Id.create("2423",Link.class));      add(Id.create("2313",Link.class));      add(Id.create("1312",Link.class));      add(Id.create("1211",Link.class));    }  };  TransitSchedule schedule=sc.getTransitSchedule();  TransitScheduleFactory fac=schedule.getFactory();  Link l;  TransitStopFacility f;  List<TransitRouteStop> stops=new ArrayList<TransitRouteStop>();  NetworkRoute nRoute=new LinkNetworkRouteImpl(links.get(0),links.get(0));  nRoute.setLinkIds(nRoute.getStartLinkId(),links.subList(1,links.size()),nRoute.getEndLinkId());  Double delay=0.;  for (  Id<Link> linkId : links) {    l=sc.getNetwork().getLinks().get(linkId);    f=fac.createTransitStopFacility(Id.create(linkId,TransitStopFacility.class),l.getToNode().getCoord(),false);    f.setLinkId(linkId);    schedule.addStopFacility(f);    delay+=l.getLength() / (l.getFreespeed() * 0.8);    stops.add(fac.createTransitRouteStop(f,delay,delay + 10));  }  TransitLine line=fac.createTransitLine(Id.create("busline",TransitLine.class));  TransitRoute route=fac.createTransitRoute(Id.create("busroute",TransitRoute.class),nRoute,stops,"bus");  Departure d;  Vehicle v;  VehiclesFactory vFac=((MutableScenario)sc).getTransitVehicles().getFactory();  VehicleType type=vFac.createVehicleType(Id.create("bus",VehicleType.class));  ((MutableScenario)sc).getTransitVehicles().addVehicleType(type);  VehicleCapacity vCap=vFac.createVehicleCapacity();  vCap.setSeats(100);  type.setCapacity(vCap);  for (int i=0; i < 86400; i+=600) {    d=fac.createDeparture(Id.create(i,Departure.class),i);    v=vFac.createVehicle(Id.create(i,Vehicle.class),type);    ((MutableScenario)sc).getTransitVehicles().addVehicle(v);    d.setVehicleId(v.getId());    route.addDeparture(d);  }  line.addRoute(route);  schedule.addTransitLine(line);  new TransitScheduleWriter(schedule).writeFileV1(DIR + "scheduleWithBus.xml.gz");  new VehicleWriterV1(((MutableScenario)sc).getTransitVehicles()).writeFile(DIR + "vehiclesWithBus.xml.gz");  Config c=ConfigUtils.loadConfig(DIR + "config.xml");  c.transit().setTransitScheduleFile(DIR + "scheduleWithBus.xml.gz");  c.transit().setVehiclesFile(DIR + "vehiclesWithBus.xml.gz");  c.network().setInputFile(DIR + "multimodalnetwork.xml");  c.plans().setInputFile(DIR + "population.xml");  c.controler().setOutputDirectory("../../org.matsim/output/pt-tutorial/");  c.controler().setLastIteration(10);  c.controler().setWriteEventsInterval(10);  c.controler().setWritePlansInterval(10);  c.strategy().setFractionOfIterationsToDisableInnovation(0.8);  c.strategy().addParam("Module_3","TimeAllocationMutator");  c.strategy().addParam("Module_4","TripSubtourModeChoice");  String[] modes=((SubtourModeChoiceConfigGroup)c.getModule(SubtourModeChoiceConfigGroup.GROUP_NAME)).getModes();  String[] modes2=new String[modes.length + 1];  for (int i=0; i < modes.length; i++) {    modes2[i]=modes[i];  }  modes2[modes.length]=TransportMode.ride;  ((SubtourModeChoiceConfigGroup)c.getModule(SubtourModeChoiceConfigGroup.GROUP_NAME)).setModes(modes2);  new ConfigWriter(c).write(DIR + "configExtended.xml");}  }
class C{  protected void bajarCampoExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  CamposTablaForm camposTablaForm=(CamposTablaForm)form;  String[] camposABorrar=camposTablaForm.getCamposABorrar();  if (camposABorrar != null && camposABorrar.length > 0) {    ServiceRepository services=getServiceRepository(request);    GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();    List list=new ArrayList();    List listaCheckBox=descripcionService.getCamposDatoOrderByPosEnTbl(camposTablaForm.getId());    int posUltimoElemento=0;    if (listaCheckBox != null && listaCheckBox.size() > 0) {      CampoDatoVO campoDatoVO=(CampoDatoVO)listaCheckBox.get(listaCheckBox.size() - 1);      posUltimoElemento=campoDatoVO.getPosEnTbl();    }    int pos=camposABorrar.length;    int posPosteriorAlUltimo=0;    for (int i=camposABorrar.length - 1; i >= 0; i--) {      String id=camposABorrar[i];      CampoDatoVO campoDatoVO=descripcionService.getCampoDato(id);      if (i == camposABorrar.length - 1 && campoDatoVO.getPosEnTbl() == posUltimoElemento) {        ActionErrors errors=new ActionErrors();        errors.add(ErrorKeys.ERROR_MOVER_ULTIMO,new ActionError(ErrorKeys.ERROR_MOVER_ULTIMO));        ErrorsTag.saveErrors(request,errors);        setReturnActionFordward(request,mapping.findForward("bajarCampo"));        return;      } else       if (pos == camposABorrar.length && posPosteriorAlUltimo == 0) {        pos=campoDatoVO.getPosEnTbl();        posPosteriorAlUltimo=pos + 1;        campoDatoVO.setPosEnTbl(campoDatoVO.getPosEnTbl() + 1);        list.add(campoDatoVO);      } else       if (campoDatoVO.getPosEnTbl() == pos - 1) {        campoDatoVO.setPosEnTbl(campoDatoVO.getPosEnTbl() + 1);        list.add(campoDatoVO);        pos--;      } else {        ActionErrors errors=new ActionErrors();        errors.add(ErrorKeys.ERROR_POSICIONES_NO_CONSECUTIVAS,new ActionError(ErrorKeys.ERROR_POSICIONES_NO_CONSECUTIVAS));        ErrorsTag.saveErrors(request,errors);        setReturnActionFordward(request,mapping.findForward("bajarCampo"));        return;      }    }    CampoDatoVO campoDatoVO=descripcionService.getCampoDatoByPosEnTbl(camposTablaForm.getId(),posPosteriorAlUltimo);    campoDatoVO.setPosEnTbl(pos);    descripcionService.updateCampoDato(campoDatoVO);    if (list != null && list.size() > 0) {      for (int i=0; i < list.size(); i++) {        campoDatoVO=(CampoDatoVO)list.get(i);        descripcionService.updateCampoDato(campoDatoVO);      }    }    List listaCamposDato=descripcionService.getCamposDatoOrderByPosEnTbl(camposTablaForm.getId());    setInTemporalSession(request,ControlAccesoConstants.LISTA_CAMPOS_DATO,listaCamposDato);  }  setReturnActionFordward(request,mapping.findForward("bajarCampo"));}  }
class C{  public void testSynonyms() throws Exception {  Query expected=new SynonymQuery(new Term(FIELD,"dogs"),new Term(FIELD,"dog"));  QueryParser qp=new QueryParser(FIELD,new MockSynonymAnalyzer());  assertEquals(expected,qp.parse("dogs"));  assertEquals(expected,qp.parse("\"dogs\""));  qp.setDefaultOperator(Operator.AND);  assertEquals(expected,qp.parse("dogs"));  assertEquals(expected,qp.parse("\"dogs\""));  expected=new BoostQuery(expected,2f);  assertEquals(expected,qp.parse("dogs^2"));  assertEquals(expected,qp.parse("\"dogs\"^2"));}  }
class C{  public CTagUpdater(final Graph2D graph){  m_graph=graph;}  }
class C{  @SuppressWarnings("unchecked") public T withMembers(Collection<Member> members){  response.members=Assert.notNull(members,"members");  return (T)this;}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  private static String stripLn(String string){  for (int i=0; i < SEPARATORS.length; i++) {    string=string.replace(SEPARATORS[i],SPACE);  }  return string;}  }
class C{  public static byte[] clone(byte[] array){  if (array == null) {    return null;  }  byte[] result=new byte[array.length];  System.arraycopy(array,0,result,0,array.length);  return result;}  }
class C{  public boolean isBound(){  return has("bound");}  }
class C{  public String epochsTipText(){  return "The number of epochs to perform (batch learning). " + "The total number of iterations is epochs * num" + " instances.";}  }
class C{  public void markInvalid(){  getElement().removeAttribute("success");  getElement().setAttribute("error","");}  }
class C{  public boolean hasInvalidArguments(){  return !this.invalidArguments.isEmpty();}  }
class C{  void onUp(){  if (mFlingRunnable.mRotator.isFinished()) {    scrollIntoSlots();  }  dispatchUnpress();}  }
class C{  public int span(){  return sourceNodes.size();}  }
class C{  @Override public void selectionChanged(SelectionChangedEvent e){  if (e.getSelectionProvider() == fTreeViewer) {    ISelection selection=e.getSelection();    if (selection instanceof IStructuredSelection && ((IStructuredSelection)selection).size() == 1) {      Object selectedNode=((IStructuredSelection)selection).getFirstElement();      if (selectedNode instanceof TreeElement<?,?>) {        TreeElement<?,?> treeElement=(TreeElement<?,?>)selectedNode;        IProject project=fCallHierarchy.getProject();        if (fCallHierarchy instanceof CalleeHierarchy && treeElement.getParent() == null) {          JsonElement root=(JsonElement)treeElement.getData();          String sig=Utils.getSignature(root);          SecuritySpecModel spec=DroidsafePluginUtilities.getSecuritySpec(project,false,false);          Map<String,SourceLocationTag> methodLocMap=spec.getSourceMethodLocationMap();          SourceLocationTag methodLoc=methodLocMap.get("<" + sig + ">");          if (methodLoc != null) {            DroidsafePluginUtilities.revealInEditor(project,methodLoc,false);          } else {            revealSelectionInEditor(selection,false);          }        } else {          revealSelectionInEditor(selection,false);        }        Set<MethodModel> methods=getMethodModels(treeElement);        MethodModel method=(methods.isEmpty()) ? null : methods.iterator().next();        InfoFlowDetailsViewPart.openView(method);        ValueViewPart.openView(method);        PointsToViewPart.openView(method);      }    }    fTreeViewer.getControl().setFocus();  }}  }
class C{  public static final void saveLastRmqId(ContentResolver resolver,long rmqId){  ContentValues values=new ContentValues();  values.put(_ID,1);  values.put(RMQ_ID,rmqId);  resolver.insert(CONTENT_URI,values);}  }
class C{  DashboardService(ArgusHttpClient client){  super(client);}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  public void allowAutoMaticSignalMastGeneration(boolean allow,SignalMast destination){  if (!destList.containsKey(destination)) {    return;  }  destList.get(destination).allowAutoSignalMastGen(allow);}  }
class C{  protected void doPick(DrawContext dc,PickSupport pickSupport,OrderedLabel olbl){  GL2 gl=dc.getGL().getGL2();  Angle heading=olbl.rotation;  double headingDegrees;  if (heading != null)   headingDegrees=heading.degrees; else   headingDegrees=0;  int x=olbl.screenPoint.x;  int y=olbl.screenPoint.y;  boolean matrixPushed=false;  try {    if (headingDegrees != 0) {      gl.glPushMatrix();      matrixPushed=true;      gl.glTranslated(x,y,0);      gl.glRotated(headingDegrees,0,0,1);      gl.glTranslated(-x,-y,0);    }    for (int i=0; i < this.lines.length; i++) {      Rectangle2D bounds=this.lineBounds[i];      double width=bounds.getWidth();      double height=bounds.getHeight();      x=olbl.screenPoint.x;      if (this.textAlign.equals(AVKey.CENTER))       x=x - (int)(width / 2.0); else       if (this.textAlign.equals(AVKey.RIGHT))       x=x - (int)width;      y-=this.lineHeight;      Color color=dc.getUniquePickColor();      int colorCode=color.getRGB();      PickedObject po=new PickedObject(colorCode,this.getPickedObject(),this.position,false);      pickSupport.addPickableObject(po);      gl.glColor3ub((byte)color.getRed(),(byte)color.getGreen(),(byte)color.getBlue());      try {        gl.glBegin(GL2.GL_POLYGON);        gl.glVertex3d(x,y,0);        gl.glVertex3d(x + width - 1,y,0);        gl.glVertex3d(x + width - 1,y + height - 1,0);        gl.glVertex3d(x,y + height - 1,0);        gl.glVertex3d(x,y,0);      }  finally {        gl.glEnd();      }      y-=this.lineSpacing;    }  }  finally {    if (matrixPushed) {      gl.glPopMatrix();    }  }}  }
class C{  public boolean isDiscoveryResolve(){  return discoveryResolve;}  }
class C{  public static MatrixBlock rmempty(MatrixBlock in,MatrixBlock ret,boolean rows) throws DMLRuntimeException {  return rmempty(in,ret,rows,null);}  }
class C{  public boolean isSelected(){  return mbSelected;}  }
class C{  @Override public void generate(final ITranslationEnvironment environment,final long baseOffset,final OperandSize operandSize,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  long offset=baseOffset;  final int previousInstructions=(int)(baseOffset % 0x100);  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(operandSize);  final String ediChange=String.valueOf(operandSize.getByteSize());  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  if (operandSize == archSize) {    instructions.add(ReilHelpers.createLdm(offset++,archSize,"esi",archSize,"eax"));  } else {    final String tempLoad=environment.getNextVariableString();    final String maskedEax=environment.getNextVariableString();    final String mask=String.valueOf(TranslationHelpers.getAllButMask(archSize,operandSize));    instructions.add(ReilHelpers.createLdm(offset++,archSize,"esi",operandSize,tempLoad));    instructions.add(ReilHelpers.createAnd(offset++,archSize,"eax",archSize,mask,archSize,maskedEax));    instructions.add(ReilHelpers.createOr(offset++,operandSize,tempLoad,archSize,maskedEax,archSize,"eax"));  }  final String tempEsi1=environment.getNextVariableString();  final String tempEsi2=environment.getNextVariableString();  final int linesBefore=instructions.size();  final String jmpGoal=String.format("%d.%d",ReilHelpers.toNativeAddress(new CAddress(baseOffset)).toLong(),previousInstructions + linesBefore + 4);  instructions.add(ReilHelpers.createJcc(offset++,OperandSize.BYTE,Helpers.DIRECTION_FLAG,OperandSize.ADDRESS,jmpGoal));  instructions.add(ReilHelpers.createAdd(offset++,archSize,"esi",archSize,ediChange,resultSize,tempEsi1));  instructions.add(ReilHelpers.createAnd(offset++,resultSize,tempEsi1,archSize,truncateMask,archSize,"esi"));  final String jmpGoal2=String.format("%d.%d",ReilHelpers.toNativeAddress(new CAddress(baseOffset)).toLong(),previousInstructions + linesBefore + 6);  instructions.add(ReilHelpers.createJcc(offset++,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoal2));  instructions.add(ReilHelpers.createSub(offset++,archSize,"esi",archSize,ediChange,resultSize,tempEsi2));  instructions.add(ReilHelpers.createAnd(offset++,resultSize,tempEsi2,archSize,truncateMask,archSize,"esi"));  instructions.add(ReilHelpers.createNop(offset));}  }
class C{  public static boolean isStatic(int mod){  return (mod & STATIC) != 0;}  }
class C{  protected boolean oneSameNetwork(MacAddress m1,MacAddress m2){  String net1=macToGuid.get(m1);  String net2=macToGuid.get(m2);  if (net1 == null)   return false;  if (net2 == null)   return false;  return net1.equals(net2);}  }
class C{  public PadRed(CachableRed src,Rectangle bounds,PadMode padMode,RenderingHints hints){  super(src,bounds,src.getColorModel(),fixSampleModel(src,bounds),bounds.x,bounds.y,null);  this.padMode=padMode;  if (DEBUG) {    System.out.println("Src: " + src + " Bounds: "+ bounds+ " Off: "+ src.getTileGridXOffset()+ ", "+ src.getTileGridYOffset());  }  this.hints=hints;}  }
class C{  SetupWindow(final SetupManager manager,final String key,final String labelKey){  this(manager,key,labelKey,null);}  }
class C{  private void generateOutcomesText(Writer writer,Set<SingleOutcome> singleOutcomes,List<String> labelsList) throws Exception {  writer.append(generateHeader(labelsList));  for (  SingleOutcome outcome : singleOutcomes) {    writer.append("\n");    writer.append(outcome.getId());    writer.append("=");    double[] predictions=outcome.getPrediction();    for (int i=0; i < predictions.length; i++) {      double value=predictions[i];      String formattedStringValue=getFormattedStringValue(value);      writer.append(formattedStringValue);      if (i < predictions.length - 1) {        writer.append(WEIGHTING_SEPARATOR_CHAR);      }    }    writer.append(SEPARATOR_CHAR);    double[] goldstandards=outcome.getGoldstandard();    for (int i=0; i < goldstandards.length; i++) {      double value=goldstandards[i];      String formattedStringValue=getFormattedStringValue(value);      writer.append(formattedStringValue);      if (i < predictions.length - 1) {        writer.append(WEIGHTING_SEPARATOR_CHAR);      }    }    writer.append(SEPARATOR_CHAR);    writer.append("" + outcome.getBipartitionThreshold());  }}  }
class C{  public void apply(Object object){  if (object instanceof Sortable) {    Sortable sortable=(Sortable)object;    sortable.sort(this);  }}  }
class C{  public void updateInt(int columnIndex,int x) throws SQLException {  throw new NotUpdatable();}  }
class C{  public static boolean isXMLElement(Object o){  return o instanceof Element;}  }
class C{  public void putLatestEncounter(Encounter encounter){  SharedPreferences.Editor editor=mPref.edit();  editor.putString(PREF_KEY_LATEST_CHECK_IN,mGson.toJson(encounter.checkIn));  editor.putString(PREF_KEY_LATEST_ENCOUNTER_CHECK_IN_ID,encounter.checkIn.id);  editor.putString(PREF_KEY_LATEST_ENCOUNTER_BEACON,mGson.toJson(encounter.beacon));  editor.putLong(PREF_KEY_LATEST_ENCOUNTER_DATE,encounter.encounterDate.getTime());  editor.apply();}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < length()) {    this.myArrayList.set(index,value);  } else {    while (index != length()) {      put(JSONObject.NULL);    }    put(value);  }  return this;}  }
class C{  protected void runFullImport(String dataConfig,Map<String,String> extraParams) throws Exception {  HashMap<String,String> params=new HashMap<>();  params.put("command","full-import");  params.put("debug","on");  params.put("dataConfig",dataConfig);  params.put("clean","true");  params.put("commit","true");  params.putAll(extraParams);  NamedList l=new NamedList();  for (  Map.Entry<String,String> e : params.entrySet()) {    l.add(e.getKey(),e.getValue());  }  LocalSolrQueryRequest request=new LocalSolrQueryRequest(h.getCore(),l);  h.query("/dataimport",request);}  }
class C{  public void saveStaticAspects(NBTTagCompound nbt){  NBTTagList entryList=new NBTTagList();  for (  Entry<AspectItem,List<Aspect>> entry : this.matchedAspects.entrySet()) {    AspectItem itemEntry=entry.getKey();    List<Aspect> itemAspects=entry.getValue();    NBTTagCompound entryCompound=new NBTTagCompound();    itemEntry.writeToNBT(entryCompound);    NBTTagList aspectList=new NBTTagList();    for (    Aspect aspect : itemAspects) {      aspectList.appendTag(aspect.writeToNBT(new NBTTagCompound()));    }    entryCompound.setTag("aspects",aspectList);    entryList.appendTag(entryCompound);  }  nbt.setTag("entries",entryList);}  }
class C{  public static double I(double P[][],int j,int k){  double I=0.0;  double p_x=P[j][j];  double p_y=P[k][k];  double p_xy=P[j][k];  I+=p_xy * Math.log(p_xy / (p_x * p_y));  I+=(1. - p_xy) * Math.log((1. - p_xy) / ((1. - p_x) * (1. - p_y)));  return I;}  }
class C{  public void mouseExited(MouseEvent e){  if (!events.isEmpty()) {    int dragAction=mapDragOperationFromModifiers(e);    if (dragAction == DnDConstants.ACTION_NONE) {      events.clear();    }  }}  }
class C{  public synchronized void onSocketReaderCreated(){  sockReadersCreated++;}  }
class C{  public static boolean equals(double[][] ma,double[][] mb){  if (ma.length != mb.length)   return false;  for (int i=0; i < ma.length; i++) {    double[] _ma=ma[i];    double[] _mb=mb[i];    if (!Arrays.equals(_ma,_mb))     return false;  }  return true;}  }
class C{  public void addExceptionsFromMember(InternalDistributedMember member,Set exceptions){  for (Iterator iter=exceptions.iterator(); iter.hasNext(); ) {    Exception ex=(Exception)iter.next();    if (ex instanceof CancelException) {      cacheExceptions.add(member);    } else     if (ex instanceof RegionDestroyedException) {      String r=((RegionDestroyedException)ex).getRegionFullPath();      Set<InternalDistributedMember> members=regionExceptions.get(r);      if (members == null) {        members=new HashSet();        regionExceptions.put(r,members);      }      members.add(member);    } else {      List el=(List)this.fatalExceptions.get(member);      if (el == null) {        el=new ArrayList(2);        this.fatalExceptions.put(member,el);      }      el.add(ex);    }  }}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public RequestCreator rotate(float degrees,float pivotX,float pivotY){  data.rotate(degrees,pivotX,pivotY);  return this;}  }
class C{  public static ThreadFormatter createThreadFormatter(){  return new DefaultThreadFormatter();}  }
class C{  public void addArc(float latPoint,float lonPoint,float radius,int units,float s,float e,LinkProperties properties) throws IOException {  LinkArc.write(latPoint,lonPoint,radius,units,-1,s,e,properties,link.dos);}  }
class C{  public DoubleLazyValue(DoubleSupplier supplier){  Validate.notNull(supplier,"supplier can't be null!");  this.supplier=supplier;}  }
class C{  public SimpleBrandOwner(String brandOwner){  this.brandOwner=brandOwner;  brandOwnerLower=brandOwner.toLowerCase();  brandOwnerAlphaNumeric=brandOwnerLower.replaceAll("[^A-Za-z0-9 ]","");}  }
class C{  public static int size(byte[] array){  return Array.getLength(array);}  }
class C{  protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){  updateGrid();  calculateColumnRequirements(axis);  if (r == null) {    r=new SizeRequirements();  }  long min=0;  long pref=0;  int n=columnRequirements.length;  for (int i=0; i < n; i++) {    SizeRequirements req=columnRequirements[i];    min+=req.minimum;    pref+=req.preferred;  }  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;  min+=adjust;  pref+=adjust;  r.minimum=(int)min;  r.preferred=(int)pref;  r.maximum=(int)pref;  AttributeSet attr=getAttributes();  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);  if (BlockView.spanSetFromAttributes(axis,r,cssWidth,null)) {    if (r.minimum < (int)min) {      r.maximum=r.minimum=r.preferred=(int)min;    }  }  totalColumnRequirements.minimum=r.minimum;  totalColumnRequirements.preferred=r.preferred;  totalColumnRequirements.maximum=r.maximum;  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);  if (o != null) {    String ta=o.toString();    if (ta.equals("left")) {      r.alignment=0;    } else     if (ta.equals("center")) {      r.alignment=0.5f;    } else     if (ta.equals("right")) {      r.alignment=1;    } else {      r.alignment=0;    }  } else {    r.alignment=0;  }  return r;}  }
class C{  @Override public void write(Buffer buffer,boolean isEnd) throws IOException {  if (_s == null) {    buffer.free();    return;  }  try {    _needsFlush=true;    if (buffer.isDirect()) {      _totalWriteBytes+=buffer.length();      _s.write(buffer.direct());      return;    }    _totalWriteBytes+=buffer.length();    while (buffer.length() > 0) {      _writeBuffer.clear();      buffer.read(_writeBuffer);      _writeBuffer.flip();      _s.write(_writeBuffer);    }  } catch (  IOException e) {    IOException exn=ClientDisconnectException.create(this + ":" + e,e);    try {      close();    } catch (    IOException e1) {    }    throw exn;  } finally {    buffer.free();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:34.797 -0500",hash_original_method="A9E3FC2EB163E786A448AD9CCAE84A6D",hash_generated_method="C54848E78054E85DFE1AED8613ED028C") public void bindWapPushManager(){  if (mWapPushMan != null)   return;  final ServiceConnection wapPushConnection=this;  mOwner.bindService(new Intent(IWapPushManager.class.getName()),wapPushConnection,Context.BIND_AUTO_CREATE);}  }
class C{  private int countWordsBetween(PatternExtract p,final List<WordToken> words){  int begin=p.getStart();  int end=p.getEnd();  int startWord=-1;  int endWord=-1;  int i=0;  for (  final WordToken w : words) {    if (w.getBegin() >= begin && startWord == -1) {      startWord=i;    }    if (w.getBegin() >= end && endWord == -1) {      endWord=i - 1;    }    i++;  }  if (startWord == -1 || endWord == -1) {    return -1;  }  return endWord - startWord;}  }
class C{  public AddAttributeDialog(java.awt.Frame parent,boolean modal,Diagram diagram,Point clickPosition){  super(parent,modal);  initComponents();  DefaultComboBoxModel model=new DefaultComboBoxModel();  for (  VertexBuffer.Type attr : VertexBuffer.Type.values()) {    model.addElement("in" + attr.name());  }  this.diagram=diagram;  this.clickPosition=clickPosition;  nameField.setModel(model);  updateType();}  }
class C{  public void onCallEnd(){  if (isAppInBackground() && mIsCallingInBackground) {    Log.d(LOG_TAG,"onCallEnd : Suspend the events thread because the call was ended whereas the application was in background");    suspendApp();  }  mIsCallingInBackground=false;}  }
class C{  public boolean isSetSrcDb(){  return this.srcDb != null;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 5:{        addNullToken();        return firstToken;      }case 22:    break;case 13:{    addToken(Token.LITERAL_CHAR);  }case 23:break;case 17:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 24:break;case 16:{start=zzMarkedPos - 2;yybegin(MLC);}case 25:break;case 7:{addToken(Token.WHITESPACE);}case 26:break;case 18:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 27:break;case 11:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 28:break;case 12:{addToken(Token.RESERVED_WORD);}case 29:break;case 3:{addToken(Token.SEPARATOR);}case 30:break;case 19:{addToken(Token.LITERAL_BACKQUOTE);}case 31:break;case 1:{addToken(Token.IDENTIFIER);}case 32:break;case 10:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 33:break;case 15:{start=zzMarkedPos - 2;yybegin(EOL_COMMENT);}case 34:break;case 4:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 35:break;case 6:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 36:break;case 14:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 37:break;case 21:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 38:break;case 20:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 39:break;case 2:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 40:break;case 8:{}case 41:break;case 9:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 42:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 174:break;case YYINITIAL:{addNullToken();return firstToken;}case 175:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 176:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public boolean hasInitials(){  return hasExtension(Initials.class);}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  private ScenarioResult createExtensionScenario(){switch (specification.getSupplierType()) {case CLASS:{      Class supplier=new Class("S").setVisibility(specification.getSupplierVisibility());switch (specification.getClientType()) {case CLASS:        return new ScenarioResult(supplier,new Class("C").setSuperClass(supplier));case ABSTRACT_CLASS:      return new ScenarioResult(supplier,new Class("C").setSuperClass(supplier).makeAbstract());case INTERFACE:case DEFAULT_INTERFACE:    throw new IllegalArgumentException("Invalid Scenario: An interface cannot extend a class");}break;}case ABSTRACT_CLASS:{Class supplier=new Class("S").setVisibility(specification.getSupplierVisibility()).makeAbstract();switch (specification.getClientType()) {case CLASS:return new ScenarioResult(supplier,new Class("C").setSuperClass(supplier));case ABSTRACT_CLASS:return new ScenarioResult(supplier,new Class("C").setSuperClass(supplier).makeAbstract());case INTERFACE:case DEFAULT_INTERFACE:throw new IllegalArgumentException("Invalid Scenario: An interface cannot extend a class");}break;}case INTERFACE:case DEFAULT_INTERFACE:{Interface supplier=new Interface("S").setVisibility(specification.getSupplierVisibility());switch (specification.getClientType()) {case CLASS:case ABSTRACT_CLASS:throw new IllegalArgumentException("Invalid Scenario: A class cannot extend an interface");case INTERFACE:case DEFAULT_INTERFACE:return new ScenarioResult(supplier,new Interface("C").addSuperInterface(supplier));}break;}}throw new IllegalArgumentException("Unexpected supplier type: " + specification.getSupplierType());}  }
class C{  public void enableLayers(boolean enable){  layerEffects.layersEnabled=enable & !noLayersSelected;  layersEnabled=enable;}  }
class C{  public void unload(String name){  unload(name,false,false,false);}  }
class C{  static void init(File cwd) throws Exception {  File prop=new File(cwd.getAbsolutePath() + File.separator + "gradle.properties");  if (!prop.exists()) {    throw new Exception("can't find gradle.properties");  }  Properties p=new Properties();  p.load(new FileInputStream(prop));  prop=new File(cwd.getAbsolutePath() + File.separator + "local.properties");  if (prop.exists()) {    p.load(new FileInputStream(prop));  }  if (p.containsKey("GPG_PATH"))   gpg=p.getProperty("GPG_PATH");  version=p.getProperty("pom.version");  gradleProperties=p;}  }
class C{  public void update(final Sketch<S> sketchIn){  if (sketchIn == null || sketchIn.isEmpty())   return;  if (sketchIn.theta_ < theta_)   theta_=sketchIn.theta_;  final SketchIterator<S> it=sketchIn.iterator();  while (it.next())   sketch_.merge(it.getKey(),it.getSummary());}  }
class C{  public long maxAge(){  ensureEnabled();  return maxAge;}  }
class C{  public static String slurpURL(String path) throws Exception {  return slurpURL(new URL(path));}  }
class C{  @Override public JavaType narrowContentsBy(Class<?> contentClass){  if (contentClass == _componentType.getRawClass()) {    return this;  }  return construct(_componentType.narrowBy(contentClass),_valueHandler,_typeHandler);}  }
class C{  protected SVGOMMarkerElement(){}  }
class C{  public Executor(){  super();  isCanceled=new AtomicBoolean();  progress=new ProgressHelper(this);  properties=new TypedProperties();  numberOfThreads=1;  terminationConditions=new ArrayList<TerminationCondition>();}  }
class C{  @Override public XContentBuilder toXContent(XContentBuilder builder,Params params) throws IOException {  builder.field(Fields.NAME,snapshot);  builder.field(Fields.INDEX_VERSION,indexVersion);  builder.field(Fields.START_TIME,startTime);  builder.field(Fields.TIME,time);  builder.field(Fields.NUMBER_OF_FILES,numberOfFiles);  builder.field(Fields.TOTAL_SIZE,totalSize);  builder.startArray(Fields.FILES);  for (  FileInfo fileInfo : indexFiles) {    FileInfo.toXContent(fileInfo,builder,params);  }  builder.endArray();  return builder;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.396 -0500",hash_original_method="8084AF2768C65A12352E4FA34C16662E",hash_generated_method="C3F50F19E1593A2AFAFF7BEFBFAD1479") static Method findPrivateMethod(Class<?> cl,String methodName,Class<?>[] param){  try {    Method method=cl.getDeclaredMethod(methodName,param);    if (Modifier.isPrivate(method.getModifiers()) && method.getReturnType() == void.class) {      method.setAccessible(true);      return method;    }  } catch (  NoSuchMethodException nsm) {  }  return null;}  }
class C{  @SuppressWarnings("unchecked") public <T extends Entry<T>>T acquire(Class<T> type,long index){  ReferencePool<T> pool=(ReferencePool<T>)pools.get(type);  if (pool == null) {    try {      Constructor<T> c=type.getConstructor(ReferenceManager.class);      c.setAccessible(true);      pool=new ReferencePool<>(null);    } catch (    NoSuchMethodException e) {      throw new SerializationException("failed to instantiate reference: must provide a single argument constructor",e);    }    pools.put(type,pool);  }  T entry=pool.acquire();  entry.reset().setIndex(index);  return entry;}  }
class C{  public FlyweightComment(String text){  this.text=text;}  }
class C{  public void pushOntoFloatStack(Interpreter interpreter,float val){  interpreter.floatStack().push(val);}  }
class C{  @Override public void rollBackCreateFileShares(URI systemURI,List<URI> fileURIs,String opId){  try {    WorkflowStepCompleter.stepExecuting(opId);    for (    URI fileshareId : fileURIs) {      FileShare fileShare=_dbClient.queryObject(FileShare.class,fileshareId);      this.delete(systemURI,fileShare.getPool(),fileShare.getId(),false,FileControllerConstants.DeleteTypeEnum.FULL.toString(),opId);    }    WorkflowStepCompleter.stepSucceded(opId);  } catch (  Exception e) {    ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);    WorkflowStepCompleter.stepFailed(opId,serviceError);  }}  }
class C{  public double evaluateModelOnce(Classifier classifier,Instance instance) throws Exception {  return m_delegate.evaluateModelOnce(classifier,instance);}  }
class C{  private void createAllTables(SQLiteDatabase db,boolean ifNotExists){  CacheDao.createTable(db,ifNotExists);}  }
class C{  private Map<String,Object> extractDocumentsFromQuery(Operation queryResponse){  if (!queryResponse.hasBody()) {    logger.info("Got host query response without a body");    return null;  }  QueryTask taskState=queryResponse.getBody(QueryTask.class);  if (taskState == null) {    logger.warn("Got empty host query response");    return null;  }  ServiceDocumentQueryResult queryResult=taskState.results;  if (queryResult == null) {    logger.warn("Got host query response with empty result");    return null;  }  Map<String,Object> documents=queryResult.documents;  if (documents == null) {    logger.warn("Got host query response with empty documents");    return null;  }  return documents;}  }
class C{  private void loadData(Timestamp startTS){  m_calendar=java.util.Calendar.getInstance(Language.getLoginLanguage().getLocale());  if (startTS == null)   m_calendar.setTimeInMillis(System.currentTimeMillis()); else   m_calendar.setTime(startTS);  if (m_displayType == DisplayType.Time)   m_calendar.set(1970,1,1);  m_firstDay=m_calendar.getFirstDayOfWeek();  Locale loc=Language.getLoginLanguage().getLocale();  SimpleDateFormat formatDate=(SimpleDateFormat)DateFormat.getDateInstance(DateFormat.LONG,loc);  SimpleDateFormat formatTime=(SimpleDateFormat)DateFormat.getTimeInstance(DateFormat.SHORT,loc);  m_hasAM_PM=formatTime.toPattern().indexOf('a') != -1;  if (m_hasAM_PM)   cbPM.setText(formatTime.getDateFormatSymbols().getAmPmStrings()[1]); else   cbPM.setVisible(false);  m_currentYear=m_calendar.get(java.util.Calendar.YEAR);  cYear.setEditor(new JSpinner.NumberEditor(cYear,"0000"));  cYear.setValue(new Integer(m_currentYear));  String[] months=formatDate.getDateFormatSymbols().getMonths();  for (int i=0; i < months.length; i++) {    KeyNamePair p=new KeyNamePair(i + 1,months[i]);    if (!months[i].equals(""))     cMonth.addItem(p);  }  m_currentMonth=m_calendar.get(java.util.Calendar.MONTH) + 1;  cMonth.setSelectedIndex(m_currentMonth - 1);  String[] days=formatDate.getDateFormatSymbols().getShortWeekdays();  for (int i=m_firstDay; i < 7 + m_firstDay; i++) {    int index=i > 7 ? i - 7 : i;    dayPanel.add(createWeekday(days[index]),null);  }  m_days=new CButton[6 * 7];  m_currentDay=m_calendar.get(java.util.Calendar.DATE);  for (int i=0; i < 6; i++)   for (int j=0; j < 7; j++) {    int index=i * 7 + j;    m_days[index]=createDay();    dayPanel.add(m_days[index],null);  }  m_days[m_days.length - 1].setBackground(Color.green);  m_days[m_days.length - 1].setText("*");  m_days[m_days.length - 1].setToolTipText(Msg.getMsg(Env.getCtx(),"Today"));  m_days[m_days.length - 2].setBackground(Color.red);  m_days[m_days.length - 2].setText("x");  m_days[m_days.length - 2].setToolTipText(Msg.getMsg(Env.getCtx(),"Cancel"));  m_days[m_days.length - 3].setBackground(Color.yellow);  m_days[m_days.length - 3].setText(Msg.getMsg(Env.getCtx(),"Key_Clear"));  m_days[m_days.length - 3].setToolTipText(Msg.getMsg(Env.getCtx(),"Clear"));  m_current24Hour=m_calendar.get(java.util.Calendar.HOUR_OF_DAY);  m_currentMinute=m_calendar.get(java.util.Calendar.MINUTE);  timePanel.setVisible(m_displayType == DisplayType.DateTime || m_displayType == DisplayType.Time);  monthPanel.setVisible(m_displayType != DisplayType.Time);  dayPanel.setVisible(m_displayType != DisplayType.Time);  m_setting=false;  setCalendar();  userTime=false;}  }
class C{  private static boolean copyKnownInstanceField(Object jdkObject,String rvmFieldName,TypeReference rvmFieldType,Address rvmFieldAddress) throws IllegalAccessException {  if (jdkObject instanceof java.lang.Class) {    Object value=null;    String fieldName=null;    boolean fieldIsFinal=false;    if (rvmFieldName.equals("type")) {      if (jdkObject == java.lang.Boolean.TYPE) {        value=RVMType.BooleanType;      } else       if (jdkObject == java.lang.Byte.TYPE) {        value=RVMType.ByteType;      } else       if (jdkObject == java.lang.Character.TYPE) {        value=RVMType.CharType;      } else       if (jdkObject == java.lang.Double.TYPE) {        value=RVMType.DoubleType;      } else       if (jdkObject == java.lang.Float.TYPE) {        value=RVMType.FloatType;      } else       if (jdkObject == java.lang.Integer.TYPE) {        value=RVMType.IntType;      } else       if (jdkObject == java.lang.Long.TYPE) {        value=RVMType.LongType;      } else       if (jdkObject == java.lang.Short.TYPE) {        value=RVMType.ShortType;      } else       if (jdkObject == java.lang.Void.TYPE) {        value=RVMType.VoidType;      } else {        value=TypeReference.findOrCreate((Class<?>)jdkObject).peekType();        if (value == null) {          fail("Failed to populate Class.type for " + jdkObject);        }      }      fieldName="type";      fieldIsFinal=true;    }    if ((fieldName != null) && (value != null)) {      if (verbosity.isAtLeast(DETAILED))       traceContext.push(value.getClass().getName(),"java.lang.Class",fieldName);      Address imageAddress=BootImageMap.findOrCreateEntry(value).imageAddress;      if (imageAddress.EQ(OBJECT_NOT_PRESENT)) {        if (verbosity.isAtLeast(DETAILED))         traceContext.traceObjectNotInBootImage();        bootImage.setNullAddressWord(rvmFieldAddress,true,true,false);      } else       if (imageAddress.EQ(OBJECT_NOT_ALLOCATED)) {        imageAddress=copyToBootImage(value,false,Address.max(),jdkObject,false,AlignmentEncoding.ALIGN_CODE_NONE);        if (verbosity.isAtLeast(ADDRESSES))         traceContext.traceObjectFoundThroughKnown();        bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),true,!fieldIsFinal);      } else {        if (verbosity.isAtLeast(ADDRESSES))         traceContext.traceObjectFoundThroughKnown();        bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),true,!fieldIsFinal);      }      if (verbosity.isAtLeast(DETAILED))       traceContext.pop();      return true;    } else {      return false;    }  } else   if ((jdkObject instanceof java.lang.String) && (rvmFieldName.equals("count")) && (rvmFieldType.isIntType())) {    bootImage.setFullWord(rvmFieldAddress,((java.lang.String)jdkObject).length());    return true;  }  if (classLibrary == "harmony") {    if ((jdkObject instanceof java.lang.String) && (rvmFieldName.equals("hashCode")) && (rvmFieldType.isIntType())) {      bootImage.setFullWord(rvmFieldAddress,jdkObject.hashCode());      return true;    } else     if (jdkObject instanceof java.util.Locale) {      String fieldName;      Object value;      if (rvmFieldName.equals("countryCode")) {        value=((java.util.Locale)jdkObject).getCountry();        fieldName="countryCode";      } else       if (rvmFieldName.equals("languageCode")) {        value=((java.util.Locale)jdkObject).getLanguage();        fieldName="languageCode";      } else       if (rvmFieldName.equals("variantCode")) {        value=((java.util.Locale)jdkObject).getVariant();        fieldName="languageCode";      } else {        return false;      }      if (verbosity.isAtLeast(DETAILED))       traceContext.push(value.getClass().getName(),"java.util.Locale",fieldName);      Address imageAddress=BootImageMap.findOrCreateEntry(value).imageAddress;      if (imageAddress.EQ(OBJECT_NOT_PRESENT)) {        if (verbosity.isAtLeast(DETAILED))         traceContext.traceObjectNotInBootImage();        throw new Error("Failed to populate " + fieldName + " in Locale");      } else       if (imageAddress.EQ(OBJECT_NOT_ALLOCATED)) {        imageAddress=copyToBootImage(value,false,Address.max(),jdkObject,false,AlignmentEncoding.ALIGN_CODE_NONE);        if (verbosity.isAtLeast(ADDRESSES))         traceContext.traceObjectFoundThroughKnown();        bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),true,false);      } else {        if (verbosity.isAtLeast(ADDRESSES))         traceContext.traceObjectFoundThroughKnown();        bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),true,false);      }      if (verbosity.isAtLeast(DETAILED))       traceContext.pop();      return true;    } else     if ((jdkObject instanceof java.util.WeakHashMap) && (rvmFieldName.equals("referenceQueue"))) {      Object value=new java.lang.ref.ReferenceQueue();      if (verbosity.isAtLeast(DETAILED))       traceContext.push(value.getClass().getName(),"java.util.WeakHashMap","referenceQueue");      Address imageAddress=BootImageMap.findOrCreateEntry(value).imageAddress;      if (imageAddress.EQ(OBJECT_NOT_PRESENT)) {        if (verbosity.isAtLeast(DETAILED))         traceContext.traceObjectNotInBootImage();        throw new Error("Failed to populate referenceQueue in WeakHashMap");      } else       if (imageAddress.EQ(OBJECT_NOT_ALLOCATED)) {        imageAddress=copyToBootImage(value,false,Address.max(),jdkObject,false,AlignmentEncoding.ALIGN_CODE_NONE);        if (verbosity.isAtLeast(ADDRESSES))         traceContext.traceObjectFoundThroughKnown();        bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),true,false);      } else {        if (verbosity.isAtLeast(ADDRESSES))         traceContext.traceObjectFoundThroughKnown();        bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),true,false);      }      if (verbosity.isAtLeast(DETAILED))       traceContext.pop();      return true;    } else     if (jdkObject instanceof java.lang.ref.ReferenceQueue) {      if (rvmFieldName.equals("firstReference")) {        return false;      } else {        throw new Error("Unknown field " + rvmFieldName + " in java.lang.ref.ReferenceQueue");      }    } else     if (jdkObject instanceof java.lang.reflect.Constructor) {      Constructor<?> cons=(Constructor<?>)jdkObject;      if (rvmFieldName.equals("vmConstructor")) {        String typeName="L" + cons.getDeclaringClass().getName().replace('.','/') + ";";        RVMType type=TypeReference.findOrCreate(typeName).peekType();        if (type == null) {          throw new Error("Failed to find type for Constructor.constructor: " + cons + " "+ typeName);        }        final RVMClass klass=type.asClass();        Class<?>[] consParams=cons.getParameterTypes();        RVMMethod constructor=null;        loop_over_all_constructors:         for (        RVMMethod vmCons : klass.getConstructorMethods()) {          TypeReference[] vmConsParams=vmCons.getParameterTypes();          if (vmConsParams.length == consParams.length) {            for (int j=0; j < vmConsParams.length; j++) {              if (!consParams[j].equals(vmConsParams[j].resolve().getClassForType())) {                continue loop_over_all_constructors;              }            }            constructor=vmCons;            break;          }        }        if (constructor == null) {          throw new Error("Failed to populate Constructor.cons for " + cons);        }        if (verbosity.isAtLeast(DETAILED))         traceContext.push("vmConstructor","java.lang.Constructor","cons");        Address imageAddress=BootImageMap.findOrCreateEntry(constructor).imageAddress;        if (imageAddress.EQ(OBJECT_NOT_PRESENT)) {          if (verbosity.isAtLeast(DETAILED))           traceContext.traceObjectNotInBootImage();          bootImage.setNullAddressWord(rvmFieldAddress,true,false,false);        } else         if (imageAddress.EQ(OBJECT_NOT_ALLOCATED)) {          imageAddress=copyToBootImage(constructor,false,Address.max(),jdkObject,false,AlignmentEncoding.ALIGN_CODE_NONE);          if (verbosity.isAtLeast(ADDRESSES))           traceContext.traceObjectFoundThroughKnown();          bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),true,false);        } else {          if (verbosity.isAtLeast(ADDRESSES))           traceContext.traceObjectFoundThroughKnown();          bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),true,false);        }        if (verbosity.isAtLeast(DETAILED))         traceContext.pop();        return true;      } else       if (rvmFieldName.equals("isAccessible")) {        bootImage.setByte(rvmFieldAddress,cons.isAccessible() ? 1 : 0);        return true;      } else       if (rvmFieldName.equals("invoker")) {        bootImage.setNullAddressWord(rvmFieldAddress,true,false,false);        return true;      } else {        throw new Error("Unknown field " + rvmFieldName + " in java.lang.reflect.Constructor");      }    } else {      return false;    }  } else   if (classLibrary == "classpath") {    if ((jdkObject instanceof java.lang.String) && (rvmFieldName.equals("cachedHashCode")) && (rvmFieldType.isIntType())) {      bootImage.setFullWord(rvmFieldAddress,jdkObject.hashCode());      return true;    } else     if (jdkObject instanceof java.lang.reflect.Constructor) {      Constructor<?> cons=(Constructor<?>)jdkObject;      if (rvmFieldName.equals("cons")) {        String typeName="L" + cons.getDeclaringClass().getName().replace('.','/') + ";";        RVMType type=TypeReference.findOrCreate(typeName).peekType();        if (type == null) {          throw new Error("Failed to find type for Constructor.constructor: " + cons + " "+ typeName);        }        final RVMClass klass=type.asClass();        Class<?>[] consParams=cons.getParameterTypes();        RVMMethod constructor=null;        loop_over_all_constructors:         for (        RVMMethod vmCons : klass.getConstructorMethods()) {          TypeReference[] vmConsParams=vmCons.getParameterTypes();          if (vmConsParams.length == consParams.length) {            for (int j=0; j < vmConsParams.length; j++) {              if (!consParams[j].equals(vmConsParams[j].resolve().getClassForType())) {                continue loop_over_all_constructors;              }            }            constructor=vmCons;            break;          }        }        if (constructor == null) {          throw new Error("Failed to populate Constructor.cons for " + cons);        }        if (verbosity.isAtLeast(DETAILED))         traceContext.push("VMConstructor","java.lang.Constructor","cons");        Object vmcons=java.lang.reflect.JikesRVMSupport.createVMConstructor(constructor);        Address imageAddress=BootImageMap.findOrCreateEntry(vmcons).imageAddress;        if (imageAddress.EQ(OBJECT_NOT_PRESENT)) {          if (verbosity.isAtLeast(DETAILED))           traceContext.traceObjectNotInBootImage();          bootImage.setNullAddressWord(rvmFieldAddress,true,false,false);        } else         if (imageAddress.EQ(OBJECT_NOT_ALLOCATED)) {          imageAddress=copyToBootImage(vmcons,false,Address.max(),jdkObject,false,AlignmentEncoding.ALIGN_CODE_NONE);          if (verbosity.isAtLeast(ADDRESSES))           traceContext.traceObjectFoundThroughKnown();          bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),true,false);        } else {          if (verbosity.isAtLeast(ADDRESSES))           traceContext.traceObjectFoundThroughKnown();          bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),true,false);        }        if (verbosity.isAtLeast(DETAILED))         traceContext.pop();        return true;      } else       if (rvmFieldName.equals("flag")) {        bootImage.setByte(rvmFieldAddress,cons.isAccessible() ? 1 : 0);        return true;      } else {        return false;      }    } else     if (jdkObject instanceof java.lang.ref.ReferenceQueue) {      if (rvmFieldName.equals("lock")) {        VM.sysWriteln("writing the lock field.");        Object value=new org.jikesrvm.scheduler.LightMonitor();        if (verbosity.isAtLeast(DETAILED))         traceContext.push(value.getClass().getName(),"java.lang.ref.ReferenceQueue","lock");        Address imageAddress=BootImageMap.findOrCreateEntry(value).imageAddress;        if (imageAddress.EQ(OBJECT_NOT_PRESENT)) {          if (verbosity.isAtLeast(DETAILED))           traceContext.traceObjectNotInBootImage();          throw new Error("Failed to populate lock in ReferenceQueue");        } else         if (imageAddress.EQ(OBJECT_NOT_ALLOCATED)) {          imageAddress=copyToBootImage(value,false,Address.max(),jdkObject,false,AlignmentEncoding.ALIGN_CODE_NONE);          if (verbosity.isAtLeast(ADDRESSES))           traceContext.traceObjectFoundThroughKnown();          bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),true,false);        } else {          if (verbosity.isAtLeast(ADDRESSES))           traceContext.traceObjectFoundThroughKnown();          bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),true,false);        }        if (verbosity.isAtLeast(DETAILED))         traceContext.pop();        return true;      } else       if (rvmFieldName.equals("first")) {        return false;      } else {        throw new Error("Unknown field " + rvmFieldName + " in java.lang.ref.ReferenceQueue");      }    } else     if (jdkObject instanceof java.util.BitSet) {      BitSet bs=(BitSet)jdkObject;      if (rvmFieldName.equals("bits")) {        int max=0;        for (int i=bs.nextSetBit(0); i >= 0; i=bs.nextSetBit(i + 1)) {          max=i;        }        long[] bits=new long[(max + 63) / 64];        for (int i=bs.nextSetBit(0); i >= 0; i=bs.nextSetBit(i + 1)) {          bits[i / 64]|=1L << (i & 63);        }        if (verbosity.isAtLeast(DETAILED))         traceContext.push("[J","java.util.BitSet","bits");        Address imageAddress=BootImageMap.findOrCreateEntry(bits).imageAddress;        if (imageAddress.EQ(OBJECT_NOT_PRESENT)) {          if (verbosity.isAtLeast(DETAILED))           traceContext.traceObjectNotInBootImage();          bootImage.setNullAddressWord(rvmFieldAddress,true,false);        } else         if (imageAddress.EQ(OBJECT_NOT_ALLOCATED)) {          imageAddress=copyToBootImage(bits,false,Address.max(),jdkObject,false,AlignmentEncoding.ALIGN_CODE_NONE);          if (verbosity.isAtLeast(ADDRESSES))           traceContext.traceObjectFoundThroughKnown();          bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),false,false);        } else {          if (verbosity.isAtLeast(ADDRESSES))           traceContext.traceObjectFoundThroughKnown();          bootImage.setAddressWord(rvmFieldAddress,imageAddress.toWord(),false,false);        }        if (verbosity.isAtLeast(DETAILED))         traceContext.pop();        return true;      } else {        return false;      }    } else {      return false;    }  } else {    throw new Error("Unknown class library: \"" + classLibrary + "\"");  }}  }
class C{  public boolean isLimitEnabled(){  return this.limitEnabled;}  }
class C{  StringVector processPREFIX_LIST(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nStrings=tokenizer.countTokens();  StringVector strings=new StringVector(nStrings);  for (int i=0; i < nStrings; i++) {    String prefix=tokenizer.nextToken();    String url=handler.getNamespaceForPrefix(prefix);    if (prefix.equals(Constants.ATTRVAL_DEFAULT_PREFIX) || url != null)     strings.addElement(prefix); else     throw new org.xml.sax.SAXException(XSLMessages.createMessage(XSLTErrorResources.ER_CANT_RESOLVE_NSPREFIX,new Object[]{prefix}));  }  return strings;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.921 -0500",hash_original_method="107BE4D9D2AC7B45B56F8331D6FF6E98",hash_generated_method="78A65A6D3B3DFC71A2A8B778EAFA4C4B") public ViewPropertyAnimator rotationXBy(float value){  animatePropertyBy(ROTATION_X,value);  return this;}  }
class C{  public void addRange(double minValue,double maxValue){  if (!Double.isNaN(maxValue) && maxValue > maxData) {    maxData=maxValue;  }  if (!Double.isNaN(minValue) && minValue < minData) {    minData=minValue;  }  isCalibrated=false;}  }
class C{  public void deploy(int id,Coords c,int nFacing,int elevation){  this.deploy(id,c,nFacing,elevation,new Vector<Entity>(),false);}  }
class C{  public void trimToSize(){  int oldCapacity=capacity;  if (size < oldCapacity) {    BitVector vector=toBitVector();    vector.setSize(size);    this.bits=vector.elements();    this.capacity=size;  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMTextPathElement(prefix,(AbstractDocument)doc);}  }
class C{  public Operation poll(){  Operation op=this.store.poll();  if (op == null) {    return null;  }  this.elementCount--;  if (this.elementCount < 0) {    throw new IllegalStateException("elementCount is negative");  }  return op;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (curNumberOfParameters == 1) {    Channel c=getChannel(stack);    if (c == null)     return null;    Object rv=EPG.getInstance().getLogoPath(c);    return (rv instanceof String) ? rv : null;  } else {    boolean fallback=evalBool(stack.pop());    int index=getInt(stack);    String imageType=getString(stack);    Channel c=getChannel(stack);    if (c == null)     return null;    int imageTypeNum=0;    if ("Small".equalsIgnoreCase(imageType))     imageTypeNum=Channel.LOGO_SMALL; else     if ("Med".equalsIgnoreCase(imageType) || "Medium".equalsIgnoreCase(imageType))     imageTypeNum=Channel.LOGO_MED; else     if ("Large".equalsIgnoreCase(imageType))     imageTypeNum=Channel.LOGO_LARGE;    if (imageTypeNum == 0)     return null;    if (!fallback) {      if (c.getLogoCount(imageTypeNum) <= index)       return null;      return c.getLogoUrl(index,imageTypeNum);    }    Object rv=EPG.getInstance().getLogoPath(c);    if (rv instanceof String)     return rv;    int logoCount=c.getLogoCount(imageTypeNum);    if (logoCount > index)     return c.getLogoUrl(index,imageTypeNum);    if (logoCount > 0)     return c.getLogoUrl(0,imageTypeNum);    return null;  }}  }
class C{  protected void initCDATA(){}  }
class C{  public ParetoConstraintComparator(){  super();}  }
class C{  private Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.put1(LONG).put8(value);    result=new Item(index,key);    put(result);    index+=2;  }  return result;}  }
class C{  public boolean contains(Object o){  return map.containsKey(o);}  }
class C{  public void startDocument() throws SAXException {  m_endDocumentOccured=false;  m_prefixMappings=new java.util.Vector();  m_contextIndexes=new IntStack();  m_parents=new IntStack();  m_currentDocumentNode=m_size;  super.startDocument();}  }
class C{  private static Integer parseInt(final String value){  try {    return Integer.parseInt(value);  } catch (  NumberFormatException e) {    return null;  }}  }
class C{  public Duration(ReadableInstant start,ReadableInstant end){  super(start,end);}  }
class C{  public boolean isInserting(){  return m_inserting;}  }
class C{  public GenericRequestBuilder<Uri,?,?,GlideDrawable> loadMediaStoreThumb(Uri uri,Key key){  Size size=clampSize(MEDIASTORE_THUMB_SIZE,MAXIMUM_SMOOTH_PIXELS,getMaxImageDisplaySize());  return mTinyImageBuilder.clone().load(uri).signature(key).override(size.width(),size.height());}  }
class C{  public void resetWriter(){  super.resetWriter();  m_objectstream=null;}  }
class C{  public Boolean html(){  return isHtml;}  }
class C{  public byte[] generateSignature() throws CryptoException {  int digSize=digest.getDigestSize();  byte[] m2Hash=new byte[digSize];  digest.doFinal(m2Hash,0);  byte[] C=new byte[8];  LtoOSP(messageLength * 8,C);  digest.update(C,0,C.length);  digest.update(mBuf,0,messageLength);  digest.update(m2Hash,0,m2Hash.length);  byte[] salt;  if (standardSalt != null) {    salt=standardSalt;  } else {    salt=new byte[saltLength];    random.nextBytes(salt);  }  digest.update(salt,0,salt.length);  byte[] hash=new byte[digest.getDigestSize()];  digest.doFinal(hash,0);  int tLength=2;  if (trailer == TRAILER_IMPLICIT) {    tLength=1;  }  int off=block.length - messageLength - salt.length- hLen- tLength- 1;  block[off]=0x01;  System.arraycopy(mBuf,0,block,off + 1,messageLength);  System.arraycopy(salt,0,block,off + 1 + messageLength,salt.length);  byte[] dbMask=maskGeneratorFunction1(hash,0,hash.length,block.length - hLen - tLength);  for (int i=0; i != dbMask.length; i++) {    block[i]^=dbMask[i];  }  System.arraycopy(hash,0,block,block.length - hLen - tLength,hLen);  if (trailer == TRAILER_IMPLICIT) {    block[block.length - 1]=(byte)TRAILER_IMPLICIT;  } else {    block[block.length - 2]=(byte)(trailer >>> 8);    block[block.length - 1]=(byte)trailer;  }  block[0]&=0x7f;  byte[] b=cipher.processBlock(block,0,block.length);  clearBlock(mBuf);  clearBlock(block);  messageLength=0;  return b;}  }
class C{  public static <O,A>ReflectiveAttribute<O,A> forField(Class<O> objectType,Class<A> fieldType,String fieldName){  return new ReflectiveAttribute<O,A>(objectType,fieldType,fieldName);}  }
class C{  public GuacamoleClientTimeoutException(Throwable cause){  super(cause);}  }
class C{  public void testMethodAnnotations() throws Exception {  ObjectMapper mapper=new ObjectMapper();  SimpleModule module=new SimpleModule("test",Version.unknownVersion());  module.addSerializer(String.class,new AnnotatedContextualSerializer());  mapper.registerModule(module);  assertEquals("{\"value\":\"see:foobar\"}",mapper.writeValueAsString(new ContextualBean("foobar")));}  }
class C{  public static String removeColors(String line){  int length=line.length();  StringBuilder buffer=new StringBuilder();  int i=0;  while (i < length) {    char ch=line.charAt(i);    if (ch == '\u0003') {      i++;      if (i < length) {        ch=line.charAt(i);        if (Character.isDigit(ch)) {          i++;          if (i < length) {            ch=line.charAt(i);            if (Character.isDigit(ch))             i++;          }          if (i < length) {            ch=line.charAt(i);            if (ch == ',') {              i++;              if (i < length) {                ch=line.charAt(i);                if (Character.isDigit(ch)) {                  i++;                  if (i < length) {                    ch=line.charAt(i);                    if (Character.isDigit(ch))                     i++;                  }                } else                 i--;              } else               i--;            }          }        }      }    } else     if (ch == '\u000f')     i++; else {      buffer.append(ch);      i++;    }  }  return buffer.toString();}  }
class C{  @Override public String toString(){  return "string \"" + value + "\"";}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public SqlTimestampConverter(final Object defaultValue){  super(defaultValue);}  }
class C{  @Override public void keyTyped(char par1,int par2){  super.keyTyped(par1,par2);  this.textFieldSafetyZone.textboxKeyTyped(par1,par2);  this.textFieldAlarmRange.textboxKeyTyped(par1,par2);  this.textFieldFrequency.textboxKeyTyped(par1,par2);  try {    int newSafetyRadius=Math.min(TileRadarStation.MAX_DETECTION_RANGE,Math.max(0,Integer.parseInt(this.textFieldSafetyZone.getText())));    this.tileEntity.safetyRange=newSafetyRadius;    ArrayList data=new ArrayList();    data.add(2);    data.add(tileEntity.safetyRange);    Mekanism.packetHandler.sendToServer(new TileEntityMessage(Coord4D.get(tileEntity),data));  } catch (  NumberFormatException e) {  }  try {    int newAlarmRadius=Math.min(TileRadarStation.MAX_DETECTION_RANGE,Math.max(0,Integer.parseInt(this.textFieldAlarmRange.getText())));    this.tileEntity.alarmRange=newAlarmRadius;    ArrayList data=new ArrayList();    data.add(3);    data.add(tileEntity.alarmRange);    Mekanism.packetHandler.sendToServer(new TileEntityMessage(Coord4D.get(tileEntity),data));  } catch (  NumberFormatException e) {  }  try {    this.tileEntity.setFrequency(Integer.parseInt(this.textFieldFrequency.getText()));    ArrayList data=new ArrayList();    data.add(4);    data.add(tileEntity.getFrequency());    Mekanism.packetHandler.sendToServer(new TileEntityMessage(Coord4D.get(tileEntity),data));  } catch (  NumberFormatException e) {  }}  }
class C{  public DiscoverItems discoverItems(String entityID,String node) throws XMPPException {  Connection connection=ServiceDiscoveryManager.this.connection.get();  if (connection == null)   throw new XMPPException("Connection instance already gc'ed");  DiscoverItems disco=new DiscoverItems();  disco.setType(IQ.Type.GET);  disco.setTo(entityID);  disco.setNode(node);  PacketCollector collector=connection.createPacketCollector(new PacketIDFilter(disco.getPacketID()));  connection.sendPacket(disco);  IQ result=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (result == null) {    throw new XMPPException("No response from the server.");  }  if (result.getType() == IQ.Type.ERROR) {    throw new XMPPException(result.getError());  }  return (DiscoverItems)result;}  }
class C{  public static final void discardEntityBytes(HttpResponse response){  HttpEntity entity=response.getEntity();  if (entity != null) {    try {      InputStream is=response.getEntity().getContent();      final long count=1024L;      while (is.skip(count) == count)       ;      is.close();    } catch (    IOException e) {      e.printStackTrace();    }catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public static String sanitizeStrings(String str){  char[] c=getChars(str);  int idx=0;  String newstr=str;  StringBuilder sb=null;  boolean instring=false;  char stringsep='\0';  int lastidx=0;  while (idx < c.length) {    if (instring && stringsep == c[idx]) {      instring=false;      stringsep='\0';    } else     if (!instring) {      if ('\'' == c[idx]) {        instring=true;        stringsep='\'';      } else       if ('\"' == c[idx]) {        instring=true;        stringsep='\"';      }    }    if (instring) {      if (' ' == c[idx]) {        if (null == sb) {          sb=new StringBuilder();        }        sb.append(c,lastidx,idx - lastidx);        sb.append("%20");        lastidx=idx + 1;      }    }    idx++;  }  if (null != sb) {    if (lastidx < c.length) {      sb.append(c,lastidx,c.length - lastidx);    }    newstr=sb.toString();  }  return newstr;}  }
class C{  public int dispatchWapPdu(byte[] pdu,IWapPushManager wapPushMan){  if (false)   Log.d(LOG_TAG,"Rx: " + IccUtils.bytesToHexString(pdu));  int index=0;  int transactionId=pdu[index++] & 0xFF;  int pduType=pdu[index++] & 0xFF;  int headerLength=0;  if ((pduType != WspTypeDecoder.PDU_TYPE_PUSH) && (pduType != WspTypeDecoder.PDU_TYPE_CONFIRMED_PUSH)) {    if (false)     Log.w(LOG_TAG,"Received non-PUSH WAP PDU. Type = " + pduType);    return Intents.RESULT_SMS_HANDLED;  }  WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);  if (pduDecoder.decodeUintvarInteger(index) == false) {    if (false)     Log.w(LOG_TAG,"Received PDU. Header Length error.");    return Intents.RESULT_SMS_GENERIC_ERROR;  }  headerLength=(int)pduDecoder.getValue32();  index+=pduDecoder.getDecodedDataLength();  int headerStartIndex=index;  if (pduDecoder.decodeContentType(index) == false) {    if (false)     Log.w(LOG_TAG,"Received PDU. Header Content-Type error.");    return Intents.RESULT_SMS_GENERIC_ERROR;  }  String mimeType=pduDecoder.getValueString();  long binaryContentType=pduDecoder.getValue32();  index+=pduDecoder.getDecodedDataLength();  byte[] header=new byte[headerLength];  System.arraycopy(pdu,headerStartIndex,header,0,header.length);  byte[] intentData;  if (mimeType != null && mimeType.equals(WspTypeDecoder.CONTENT_TYPE_B_PUSH_CO)) {    intentData=pdu;  } else {    int dataIndex=headerStartIndex + headerLength;    intentData=new byte[pdu.length - dataIndex];    System.arraycopy(pdu,dataIndex,intentData,0,intentData.length);  }  if (pduDecoder.seekXWapApplicationId(index,index + headerLength - 1)) {    index=(int)pduDecoder.getValue32();    pduDecoder.decodeXWapApplicationId(index);    String wapAppId=pduDecoder.getValueString();    if (wapAppId == null) {      wapAppId=Integer.toString((int)pduDecoder.getValue32());    }    String contentType=((mimeType == null) ? Long.toString(binaryContentType) : mimeType);    if (false)     Log.v(LOG_TAG,"appid found: " + wapAppId + ":"+ contentType);    try {      boolean processFurther=true;      if (wapPushMan == null) {        if (false)         Log.w(LOG_TAG,"wap push manager not found!");      } else {        Intent intent=new Intent();        intent.putExtra("transactionId",transactionId);        intent.putExtra("pduType",pduType);        intent.putExtra("header",header);        intent.putExtra("data",intentData);        intent.putExtra("contentTypeParameters",pduDecoder.getContentParameters());        int procRet=wapPushMan.processMessage(wapAppId,contentType,intent);        if (false)         Log.v(LOG_TAG,"procRet:" + procRet);        if ((procRet & WapPushManagerParams.MESSAGE_HANDLED) > 0 && (procRet & WapPushManagerParams.FURTHER_PROCESSING) == 0) {          processFurther=false;        }      }      if (!processFurther) {        return Intents.RESULT_SMS_HANDLED;      }    } catch (    RemoteException e) {      if (false)       Log.w(LOG_TAG,"remote func failed...");    }  }  if (false)   Log.v(LOG_TAG,"fall back to existing handler");  return Activity.RESULT_OK;}  }
class C{  public void removeSteppables(Steppable[] steppables){  toBeRemoved.addAll(steppables);}  }
class C{  public Status createStatus(){  Status s=new Status();  statuses.add(s);  return s;}  }
class C{  public void decode(int[] received,int twoS) throws ReedSolomonException {  GenericGFPoly poly=new GenericGFPoly(field,received);  int[] syndromeCoefficients=new int[twoS];  boolean dataMatrix=field.equals(GenericGF.DATA_MATRIX_FIELD_256);  boolean noError=true;  for (int i=0; i < twoS; i++) {    int eval=poly.evaluateAt(field.exp(dataMatrix ? i + 1 : i));    syndromeCoefficients[syndromeCoefficients.length - 1 - i]=eval;    if (eval != 0) {      noError=false;    }  }  if (noError) {    return;  }  GenericGFPoly syndrome=new GenericGFPoly(field,syndromeCoefficients);  GenericGFPoly[] sigmaOmega=runEuclideanAlgorithm(field.buildMonomial(twoS,1),syndrome,twoS);  GenericGFPoly sigma=sigmaOmega[0];  GenericGFPoly omega=sigmaOmega[1];  int[] errorLocations=findErrorLocations(sigma);  int[] errorMagnitudes=findErrorMagnitudes(omega,errorLocations,dataMatrix);  for (int i=0; i < errorLocations.length; i++) {    int position=received.length - 1 - field.log(errorLocations[i]);    if (position < 0) {      throw new ReedSolomonException("Bad error location");    }    received[position]=GenericGF.addOrSubtract(received[position],errorMagnitudes[i]);  }}  }
class C{  private Vector<Vector<Object>> queryProduct(){  String sql="SELECT p.Name,l.PriceActual,l.PriceList,l.QtyInvoiced," + "i.DateInvoiced,dt.PrintName || ' ' || i.DocumentNo As DocumentNo," + "o.Name, "+ "NULL, i.M_PriceList_ID "+ "FROM C_Invoice i"+ " INNER JOIN C_InvoiceLine l ON (i.C_Invoice_ID=l.C_Invoice_ID)"+ " INNER JOIN C_DocType dt ON (i.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN AD_Org o ON (i.AD_Org_ID=o.AD_Org_ID)"+ " INNER JOIN M_Product p  ON (l.M_Product_ID=p.M_Product_ID) "+ "WHERE i.C_BPartner_ID=? "+ "ORDER BY i.DateInvoiced DESC";  Vector<Vector<Object>> data=fillTable(sql,m_C_BPartner_ID);  sql="SELECT Name from C_BPartner WHERE C_BPartner_ID=?";  fillLabel(sql,m_C_BPartner_ID);  return data;}  }
class C{  public AbstractGraphMousePlugin(int modifiers){  this.modifiers=modifiers;}  }
class C{  public static String escapeMetaDataPattern(String pattern){  if (pattern == null || pattern.length() == 0) {    return pattern;  }  return replaceAll(pattern,"\\","\\\\");}  }
class C{  public void finishAllActivity(){  for (int i=0, size=activityStack.size(); i < size; i++) {    if (null != activityStack.get(i)) {      activityStack.get(i).finish();    }  }  activityStack.clear();}  }
class C{  public Dimension preferredLayoutSize(Container parent){  if (m_size == null)   layoutContainer(parent);  return m_size;}  }
class C{  public void stopFlyThrough(){  flyThroughTimer.stop();  flyIndex=0;  Dert.getWorldView().getScenePanel().enableFrameGrab(null);  SceneFramework.getInstance().suspend(false);}  }
class C{  protected <E>void closeHashValue(Iterator<E> iter){}  }
class C{  public boolean isScan(){  return scan;}  }
class C{  public boolean isEmpty(){  return _n == 0;}  }
class C{  @LargeTest public void testThumbnailForMPEG4NTSC() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_720x480_30fps_280kbps_AACLC_48kHz_96kbps_s_0_21.mp4";  final int atTime=0;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=mediaVideoItem.getWidth() / 2;  final int outHeight=mediaVideoItem.getHeight() / 2;  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  public void attributeAdded(String key,String value,String systemId,int lineNr) throws Exception {  this.delegate.attributeAdded(key,value,systemId,lineNr);}  }
class C{  public boolean isParseXmlTags(){  return parseXmlTags;}  }
class C{  @Override public void receive(AliasEvent event){  Alias alias=event.getAlias();switch (event.getEvent()) {case ADD:    if (alias.getList() != null && getName().equalsIgnoreCase(alias.getList())) {      addAlias(alias);    }  break;case CHANGE:if (alias.getList() != null && getName().equalsIgnoreCase(alias.getList())) {  addAlias(alias);}break;case DELETE:if (alias.getList() != null && getName().equalsIgnoreCase(alias.getList())) {removeAlias(alias);}break;default :break;}}  }
class C{  protected BlazeGraphAtom(final String id){  this.id=id;}  }
class C{  private void displayAllStringDefinedInStringXml(){}  }
class C{  public void sendToAll(IMessage message){  netHandler.sendToAll(message);}  }
class C{  public static SectionContainer eliminateEmptyStructures(SectionContainer sc){  for (int i=sc.nrOfSubSections() - 1; i >= 0; i--) {    Section ss=sc.getSubSection(i);    if (ss.getClass() == SectionContainer.class) {      SectionContainer sci=(SectionContainer)ss;      eliminateEmptyStructures(sci);    } else     if (ss.getClass() == SectionContent.class)     eliminateEmptyStructures((SectionContent)ss);    if (ss.empty())     sc.removeSection(ss);  }  if (sc.nrOfSubSections() == 1 && sc.getSubSection(0).getClass() == SectionContainer.class) {    SectionContainer sc0=(SectionContainer)sc.getSubSection(0);    if (sc0.getTitleElement() == null) {      sc.removeSection(sc0);      for (int i=0; i < sc0.nrOfSubSections(); i++)       sc.addSection(sc0.getSubSection(i));    }  }  return sc;}  }
class C{  public Ed25519EncodedFieldElement modQ(){  long s0=0x1FFFFF & threeBytesToLong(this.values,0);  long s1=0x1FFFFF & (fourBytesToLong(this.values,2) >> 5);  long s2=0x1FFFFF & (threeBytesToLong(this.values,5) >> 2);  long s3=0x1FFFFF & (fourBytesToLong(this.values,7) >> 7);  long s4=0x1FFFFF & (fourBytesToLong(this.values,10) >> 4);  long s5=0x1FFFFF & (threeBytesToLong(this.values,13) >> 1);  long s6=0x1FFFFF & (fourBytesToLong(this.values,15) >> 6);  long s7=0x1FFFFF & (threeBytesToLong(this.values,18) >> 3);  long s8=0x1FFFFF & threeBytesToLong(this.values,21);  long s9=0x1FFFFF & (fourBytesToLong(this.values,23) >> 5);  long s10=0x1FFFFF & (threeBytesToLong(this.values,26) >> 2);  long s11=0x1FFFFF & (fourBytesToLong(this.values,28) >> 7);  long s12=0x1FFFFF & (fourBytesToLong(this.values,31) >> 4);  long s13=0x1FFFFF & (threeBytesToLong(this.values,34) >> 1);  long s14=0x1FFFFF & (fourBytesToLong(this.values,36) >> 6);  long s15=0x1FFFFF & (threeBytesToLong(this.values,39) >> 3);  long s16=0x1FFFFF & threeBytesToLong(this.values,42);  long s17=0x1FFFFF & (fourBytesToLong(this.values,44) >> 5);  final long s18=0x1FFFFF & (threeBytesToLong(this.values,47) >> 2);  final long s19=0x1FFFFF & (fourBytesToLong(this.values,49) >> 7);  final long s20=0x1FFFFF & (fourBytesToLong(this.values,52) >> 4);  final long s21=0x1FFFFF & (threeBytesToLong(this.values,55) >> 1);  final long s22=0x1FFFFF & (fourBytesToLong(this.values,57) >> 6);  final long s23=(fourBytesToLong(this.values,60) >> 3);  long carry0;  long carry1;  long carry2;  long carry3;  long carry4;  long carry5;  long carry6;  long carry7;  long carry8;  long carry9;  long carry10;  long carry11;  final long carry12;  final long carry13;  final long carry14;  final long carry15;  final long carry16;  s11+=s23 * 666643;  s12+=s23 * 470296;  s13+=s23 * 654183;  s14-=s23 * 997805;  s15+=s23 * 136657;  s16-=s23 * 683901;  s10+=s22 * 666643;  s11+=s22 * 470296;  s12+=s22 * 654183;  s13-=s22 * 997805;  s14+=s22 * 136657;  s15-=s22 * 683901;  s9+=s21 * 666643;  s10+=s21 * 470296;  s11+=s21 * 654183;  s12-=s21 * 997805;  s13+=s21 * 136657;  s14-=s21 * 683901;  s8+=s20 * 666643;  s9+=s20 * 470296;  s10+=s20 * 654183;  s11-=s20 * 997805;  s12+=s20 * 136657;  s13-=s20 * 683901;  s7+=s19 * 666643;  s8+=s19 * 470296;  s9+=s19 * 654183;  s10-=s19 * 997805;  s11+=s19 * 136657;  s12-=s19 * 683901;  s6+=s18 * 666643;  s7+=s18 * 470296;  s8+=s18 * 654183;  s9-=s18 * 997805;  s10+=s18 * 136657;  s11-=s18 * 683901;  carry6=(s6 + (1 << 20)) >> 21;  s7+=carry6;  s6-=carry6 << 21;  carry8=(s8 + (1 << 20)) >> 21;  s9+=carry8;  s8-=carry8 << 21;  carry10=(s10 + (1 << 20)) >> 21;  s11+=carry10;  s10-=carry10 << 21;  carry12=(s12 + (1 << 20)) >> 21;  s13+=carry12;  s12-=carry12 << 21;  carry14=(s14 + (1 << 20)) >> 21;  s15+=carry14;  s14-=carry14 << 21;  carry16=(s16 + (1 << 20)) >> 21;  s17+=carry16;  s16-=carry16 << 21;  carry7=(s7 + (1 << 20)) >> 21;  s8+=carry7;  s7-=carry7 << 21;  carry9=(s9 + (1 << 20)) >> 21;  s10+=carry9;  s9-=carry9 << 21;  carry11=(s11 + (1 << 20)) >> 21;  s12+=carry11;  s11-=carry11 << 21;  carry13=(s13 + (1 << 20)) >> 21;  s14+=carry13;  s13-=carry13 << 21;  carry15=(s15 + (1 << 20)) >> 21;  s16+=carry15;  s15-=carry15 << 21;  s5+=s17 * 666643;  s6+=s17 * 470296;  s7+=s17 * 654183;  s8-=s17 * 997805;  s9+=s17 * 136657;  s10-=s17 * 683901;  s4+=s16 * 666643;  s5+=s16 * 470296;  s6+=s16 * 654183;  s7-=s16 * 997805;  s8+=s16 * 136657;  s9-=s16 * 683901;  s3+=s15 * 666643;  s4+=s15 * 470296;  s5+=s15 * 654183;  s6-=s15 * 997805;  s7+=s15 * 136657;  s8-=s15 * 683901;  s2+=s14 * 666643;  s3+=s14 * 470296;  s4+=s14 * 654183;  s5-=s14 * 997805;  s6+=s14 * 136657;  s7-=s14 * 683901;  s1+=s13 * 666643;  s2+=s13 * 470296;  s3+=s13 * 654183;  s4-=s13 * 997805;  s5+=s13 * 136657;  s6-=s13 * 683901;  s0+=s12 * 666643;  s1+=s12 * 470296;  s2+=s12 * 654183;  s3-=s12 * 997805;  s4+=s12 * 136657;  s5-=s12 * 683901;  s12=0;  carry0=(s0 + (1 << 20)) >> 21;  s1+=carry0;  s0-=carry0 << 21;  carry2=(s2 + (1 << 20)) >> 21;  s3+=carry2;  s2-=carry2 << 21;  carry4=(s4 + (1 << 20)) >> 21;  s5+=carry4;  s4-=carry4 << 21;  carry6=(s6 + (1 << 20)) >> 21;  s7+=carry6;  s6-=carry6 << 21;  carry8=(s8 + (1 << 20)) >> 21;  s9+=carry8;  s8-=carry8 << 21;  carry10=(s10 + (1 << 20)) >> 21;  s11+=carry10;  s10-=carry10 << 21;  carry1=(s1 + (1 << 20)) >> 21;  s2+=carry1;  s1-=carry1 << 21;  carry3=(s3 + (1 << 20)) >> 21;  s4+=carry3;  s3-=carry3 << 21;  carry5=(s5 + (1 << 20)) >> 21;  s6+=carry5;  s5-=carry5 << 21;  carry7=(s7 + (1 << 20)) >> 21;  s8+=carry7;  s7-=carry7 << 21;  carry9=(s9 + (1 << 20)) >> 21;  s10+=carry9;  s9-=carry9 << 21;  carry11=(s11 + (1 << 20)) >> 21;  s12+=carry11;  s11-=carry11 << 21;  s0+=s12 * 666643;  s1+=s12 * 470296;  s2+=s12 * 654183;  s3-=s12 * 997805;  s4+=s12 * 136657;  s5-=s12 * 683901;  s12=0;  carry0=s0 >> 21;  s1+=carry0;  s0-=carry0 << 21;  carry1=s1 >> 21;  s2+=carry1;  s1-=carry1 << 21;  carry2=s2 >> 21;  s3+=carry2;  s2-=carry2 << 21;  carry3=s3 >> 21;  s4+=carry3;  s3-=carry3 << 21;  carry4=s4 >> 21;  s5+=carry4;  s4-=carry4 << 21;  carry5=s5 >> 21;  s6+=carry5;  s5-=carry5 << 21;  carry6=s6 >> 21;  s7+=carry6;  s6-=carry6 << 21;  carry7=s7 >> 21;  s8+=carry7;  s7-=carry7 << 21;  carry8=s8 >> 21;  s9+=carry8;  s8-=carry8 << 21;  carry9=s9 >> 21;  s10+=carry9;  s9-=carry9 << 21;  carry10=s10 >> 21;  s11+=carry10;  s10-=carry10 << 21;  carry11=s11 >> 21;  s12+=carry11;  s11-=carry11 << 21;  s0+=s12 * 666643;  s1+=s12 * 470296;  s2+=s12 * 654183;  s3-=s12 * 997805;  s4+=s12 * 136657;  s5-=s12 * 683901;  carry0=s0 >> 21;  s1+=carry0;  s0-=carry0 << 21;  carry1=s1 >> 21;  s2+=carry1;  s1-=carry1 << 21;  carry2=s2 >> 21;  s3+=carry2;  s2-=carry2 << 21;  carry3=s3 >> 21;  s4+=carry3;  s3-=carry3 << 21;  carry4=s4 >> 21;  s5+=carry4;  s4-=carry4 << 21;  carry5=s5 >> 21;  s6+=carry5;  s5-=carry5 << 21;  carry6=s6 >> 21;  s7+=carry6;  s6-=carry6 << 21;  carry7=s7 >> 21;  s8+=carry7;  s7-=carry7 << 21;  carry8=s8 >> 21;  s9+=carry8;  s8-=carry8 << 21;  carry9=s9 >> 21;  s10+=carry9;  s9-=carry9 << 21;  carry10=s10 >> 21;  s11+=carry10;  s10-=carry10 << 21;  final byte[] result=new byte[32];  result[0]=(byte)(s0);  result[1]=(byte)(s0 >> 8);  result[2]=(byte)((s0 >> 16) | (s1 << 5));  result[3]=(byte)(s1 >> 3);  result[4]=(byte)(s1 >> 11);  result[5]=(byte)((s1 >> 19) | (s2 << 2));  result[6]=(byte)(s2 >> 6);  result[7]=(byte)((s2 >> 14) | (s3 << 7));  result[8]=(byte)(s3 >> 1);  result[9]=(byte)(s3 >> 9);  result[10]=(byte)((s3 >> 17) | (s4 << 4));  result[11]=(byte)(s4 >> 4);  result[12]=(byte)(s4 >> 12);  result[13]=(byte)((s4 >> 20) | (s5 << 1));  result[14]=(byte)(s5 >> 7);  result[15]=(byte)((s5 >> 15) | (s6 << 6));  result[16]=(byte)(s6 >> 2);  result[17]=(byte)(s6 >> 10);  result[18]=(byte)((s6 >> 18) | (s7 << 3));  result[19]=(byte)(s7 >> 5);  result[20]=(byte)(s7 >> 13);  result[21]=(byte)(s8);  result[22]=(byte)(s8 >> 8);  result[23]=(byte)((s8 >> 16) | (s9 << 5));  result[24]=(byte)(s9 >> 3);  result[25]=(byte)(s9 >> 11);  result[26]=(byte)((s9 >> 19) | (s10 << 2));  result[27]=(byte)(s10 >> 6);  result[28]=(byte)((s10 >> 14) | (s11 << 7));  result[29]=(byte)(s11 >> 1);  result[30]=(byte)(s11 >> 9);  result[31]=(byte)(s11 >> 17);  return new Ed25519EncodedFieldElement(result);}  }
class C{  public static void rollTillWinOrLose(int point){  int result;  do {    result=rollTwoDice();  } while (result != point && result != 7);  if (result == 7)   printResult(0); else   printResult(1);}  }
class C{  public OperationList(ImportDeclaration... imports){  this.imports=new ArrayList(Arrays.asList(imports));  this.imports.addAll(Arrays.asList(new ImportDeclaration(new NameExpr("com.google.common.eventbus.EventBus"),false,false),new ImportDeclaration(new NameExpr("edu.wpi.grip.core.events.OperationAddedEvent"),false,false)));  this.operations=new ArrayList<>();}  }
class C{  public synchronized void causeExit(BACKUP_ACTIVATION explicitSignal){  removeListener();  this.signal=explicitSignal;  latch.countDown();}  }
class C{  public void addBaseTimelineExclusions(long fromBaseDomainValue,long toBaseDomainValue){  Segment baseSegment=this.baseTimeline.getSegment(fromBaseDomainValue);  while (baseSegment.getSegmentStart() <= toBaseDomainValue && !baseSegment.inExcludeSegments()) {    baseSegment.inc();  }  while (baseSegment.getSegmentStart() <= toBaseDomainValue) {    long baseExclusionRangeEnd=baseSegment.getSegmentStart() + this.baseTimeline.getSegmentsExcluded() * this.baseTimeline.getSegmentSize() - 1;    Segment segment=getSegment(baseSegment.getSegmentStart());    while (segment.getSegmentStart() <= baseExclusionRangeEnd) {      if (segment.inIncludeSegments()) {        long fromDomainValue=segment.getSegmentStart();        long toDomainValue;        do {          toDomainValue=segment.getSegmentEnd();          segment.inc();        } while (segment.inIncludeSegments());        addException(new BaseTimelineSegmentRange(fromDomainValue,toDomainValue));      } else {        segment.inc();      }    }    baseSegment.inc(this.baseTimeline.getGroupSegmentCount());  }}  }
class C{  public ProcessorDecorator(final Object processor){  super(transform(processor));}  }
class C{  public String toString(){  return " cxform(+rgba,*rgba)=(" + addRed + ","+ addGreen+ ","+ addBlue+ ","+ addAlpha+ ","+ multRed+ ","+ multGreen+ ","+ multBlue+ ","+ multAlpha+ ")";}  }
class C{  private ConfigurationDefaultsFactory(){}  }
class C{  public void execute(ExecutionContext ec) throws DMLRuntimeException {  ArrayList<Instruction> tmp=_inst;  try {    if (DMLScript.isActiveAM())     DMLAppMasterUtils.setupProgramBlockRemoteMaxMemory(this);    long t0=DMLScript.STATISTICS ? System.nanoTime() : 0;    if (ConfigurationManager.isDynamicRecompilation() && _sb != null && _sb.requiresRecompilation()) {      tmp=Recompiler.recompileHopsDag(_sb,_sb.get_hops(),ec.getVariables(),null,false,_tid);      if (MLContextProxy.isActive())       tmp=MLContextProxy.performCleanupAfterRecompilation(tmp);    }    if (DMLScript.STATISTICS) {      long t1=System.nanoTime();      Statistics.incrementHOPRecompileTime(t1 - t0);      if (tmp != _inst)       Statistics.incrementHOPRecompileSB();    }  } catch (  Exception ex) {    throw new DMLRuntimeException("Unable to recompile program block.",ex);  }  executeInstructions(tmp,ec);}  }
class C{  public void beforeBean(@Observes BeforeBeanDiscovery beforeBeanDiscovery,BeanManager beanManager){  beforeBeanDiscovery.addAnnotatedType(beanManager.createAnnotatedType(WebsocketUserManager.class),null);  beforeBeanDiscovery.addAnnotatedType(beanManager.createAnnotatedType(WebsocketSessionManager.class),null);  beforeBeanDiscovery.addAnnotatedType(beanManager.createAnnotatedType(WebsocketChannelManager.class),null);  beforeBeanDiscovery.addAnnotatedType(beanManager.createAnnotatedType(WebsocketChannelManager.ViewScope.class),null);  beforeBeanDiscovery.addAnnotatedType(beanManager.createAnnotatedType(InjectionPointGenerator.class),null);  beforeBeanDiscovery.addAnnotatedType(beanManager.createAnnotatedType(WebsocketPushContextProducer.class),null);}  }
class C{  @Override public void close(){  for (int i=0; i < dictionaries.length; i++) {    CarbonUtil.clearDictionaryCache(dictionaries[i]);  }}  }
class C{  public DataSourceScriptCommand(Configuration configuration,String resourcePath,DataSource dataSource){  super(configuration,resourcePath);  this.ds=dataSource;}  }
class C{  public void loadLocal(final int local,final Type type){  setLocalType(local,type);  loadInsn(type,local);}  }
class C{  public boolean sampleNextElement(){  if (skip > 0) {    skip--;    return false;  }  if (nextTriggerPos == UNDEFINED) {    if (weight == 1)     nextTriggerPos=0; else     nextTriggerPos=generator.nextIntFromTo(0,weight - 1);    nextSkip=weight - 1 - nextTriggerPos;  }  if (nextTriggerPos > 0) {    nextTriggerPos--;    return false;  }  nextTriggerPos=UNDEFINED;  skip=nextSkip;  return true;}  }
class C{  public boolean isInvokeInterface(){  return Call.getMethod(call).isInterface();}  }
class C{  public static void sort(String[] a,int w){  int n=a.length;  int R=256;  String[] aux=new String[n];  for (int d=w - 1; d >= 0; d--) {    int[] count=new int[R + 1];    for (int i=0; i < n; i++)     count[a[i].charAt(d) + 1]++;    for (int r=0; r < R; r++)     count[r + 1]+=count[r];    for (int i=0; i < n; i++)     aux[count[a[i].charAt(d)]++]=a[i];    for (int i=0; i < n; i++)     a[i]=aux[i];  }}  }
class C{  @Override public String toString(){  return "Version{" + configuration.getVersion() + "}"+ " Connected{"+ isConnected()+ "}"+ " Server{"+ getServerHostname()+ "}"+ " Port{"+ getServerPort()+ "}";}  }
class C{  public static boolean isNetworkAvailable(NetType netType){  ConnectivityManager connectivity=(ConnectivityManager)NoHttp.getContext().getSystemService(Context.CONNECTIVITY_SERVICE);  Class<?> connectivityManagerClass=connectivity.getClass();  if (Build.VERSION.SDK_INT >= AndroidVersion.LOLLIPOP) {    try {      Method getAllNetworksMethod=connectivityManagerClass.getMethod("getAllNetworks");      getAllNetworksMethod.setAccessible(true);      Object[] networkArray=(Object[])getAllNetworksMethod.invoke(connectivity);      for (      Object network : networkArray) {        Method getNetworkInfoMethod=connectivityManagerClass.getMethod("getNetworkInfo",Class.forName("android.net.Network"));        getNetworkInfoMethod.setAccessible(true);        NetworkInfo networkInfo=(NetworkInfo)getNetworkInfoMethod.invoke(connectivity,network);        if (isConnected(netType,networkInfo))         return true;      }    } catch (    Throwable e) {    }  } else {    try {      Method getAllNetworkInfoMethod=connectivityManagerClass.getMethod("getAllNetworkInfo");      getAllNetworkInfoMethod.setAccessible(true);      Object[] networkInfoArray=(Object[])getAllNetworkInfoMethod.invoke(connectivity);      for (      Object object : networkInfoArray) {        if (isConnected(netType,(NetworkInfo)object))         return true;      }    } catch (    Throwable e) {    }  }  return false;}  }
class C{  private void tuneSplitter(){  NodeList<Node> nodes=splitLayoutPanel.getElement().getChildNodes();  for (int i=0; i < nodes.getLength(); i++) {    Node node=nodes.getItem(i);    if (node.hasChildNodes()) {      com.google.gwt.dom.client.Element el=node.getFirstChild().cast();      if ("gwt-SplitLayoutPanel-HDragger".equals(el.getClassName())) {        tuneSplitter(el);        return;      }    }  }}  }
class C{  public boolean add(String srcFilename,int srcLine,int dstLine){  return add(srcFilename,srcLine,dstLine,false);}  }
class C{  public int size(){  return set.size();}  }
class C{  public void destroySelf(){  if (mPager == null || mPager.getAdapter() == null) {    return;  }  InfinitePagerAdapter wrapper=(InfinitePagerAdapter)mPager.getAdapter();  PagerAdapter adapter=wrapper.getRealAdapter();  if (adapter != null) {    adapter.unregisterDataSetObserver(dataChangeObserver);  }  removeAllViews();  ShapeDrawable shapeDrawable;}  }
class C{  public boolean isDashedLineEnabled(){  return mDashPathEffect == null ? false : true;}  }
class C{  public static String[] mergeStringArrays(String[] array1,String[] array2){  if (ObjectUtils.isEmpty(array1)) {    return array2;  }  if (ObjectUtils.isEmpty(array2)) {    return array1;  }  List<String> result=new ArrayList<String>();  result.addAll(Arrays.asList(array1));  for (  String str : array2) {    if (!result.contains(str)) {      result.add(str);    }  }  return toStringArray(result);}  }
class C{  private Frame padFrameBottom(Frame originalFrame,int newHeight){  Frame.Metadata metadata=originalFrame.getMetadata();  int width=metadata.getWidth();  int height=metadata.getHeight();  Log.i(TAG,"Padded image from: " + width + "x"+ height+ " to "+ width+ "x"+ newHeight);  ByteBuffer origBuffer=originalFrame.getGrayscaleImageData();  int origOffset=origBuffer.arrayOffset();  byte[] origBytes=origBuffer.array();  ByteBuffer paddedBuffer=ByteBuffer.allocateDirect(width * newHeight);  int paddedOffset=paddedBuffer.arrayOffset();  byte[] paddedBytes=paddedBuffer.array();  Arrays.fill(paddedBytes,(byte)0);  for (int y=0; y < height; ++y) {    int origStride=origOffset + y * width;    int paddedStride=paddedOffset + y * width;    System.arraycopy(origBytes,origStride,paddedBytes,paddedStride,width);  }  return new Frame.Builder().setImageData(paddedBuffer,width,newHeight,ImageFormat.NV21).setId(metadata.getId()).setRotation(metadata.getRotation()).setTimestampMillis(metadata.getTimestampMillis()).build();}  }
class C{  private boolean handleVirtualKeys(int keyCode,KeyEvent event,boolean down){  InputDevice inputDevice=event.getDevice();  if (inputDevice != null && inputDevice.getKeyboardType() == InputDevice.KEYBOARD_TYPE_ALPHABETIC) {    return false;  } else   if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN) {    mVirtualControlKeyDown=down;    return true;  } else   if (keyCode == KeyEvent.KEYCODE_VOLUME_UP) {    mVirtualFnKeyDown=down;    return true;  }  return false;}  }
class C{  public h2 removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public int[] toIntegerArray(){  int[] values=new int[mSize];  for (int i=nextSetBit(0); i >= 0 && i < mSize; i=nextSetBit(i + 1)) {    values[i]=1;  }  return values;}  }
class C{  public static int nextString(String s,String needle,int startIndex){  int next;  char[] n=needle.toCharArray();  mainloop:   do {    next=nextChar(s,n[0],startIndex);    for (int i=1; i < n.length; i++) {      if (nextChar(s,n[i],next + i) != (next + i)) {        startIndex=next + i;        continue mainloop;      }    }    return next;  } while (next >= 0);  return next;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static void actionDelete(PageContext pc,Resource dir,boolean forceDelete,String serverPassword) throws PageException {  SecurityManager securityManager=pc.getConfig().getSecurityManager();  securityManager.checkFileLocation(pc.getConfig(),dir,serverPassword);  if (!dir.exists()) {    if (dir.isDirectory())     throw new ApplicationException("directory [" + dir.toString() + "] doesn't exist"); else     if (dir.isFile())     throw new ApplicationException("file [" + dir.toString() + "] doesn't exist and isn't a directory");  }  if (dir.isFile())   throw new ApplicationException("can't delete [" + dir.toString() + "], it isn't a directory it is a file");  try {    dir.remove(forceDelete);  } catch (  IOException e) {    throw Caster.toPageException(e);  }}  }
class C{  public static Command createCommandWithoutLogging(String command,NodeConfig node) throws AgentException {  return SimpleCommand.createCommand(command,node.getHost(),node.getPort(),node.getUser(),node.getPrivateKeyFile(),false);}  }
class C{  public boolean isInstanceAttribute(){  Object oo=get_Value(COLUMNNAME_IsInstanceAttribute);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean checkInRange(String flagName,int lowValue,boolean lowInclusive,int highValue,boolean highInclusive){  if (isSet(flagName)) {    final int value=(Integer)getValue(flagName);    if ((value < lowValue) || (value <= lowValue && !lowInclusive) || (value > highValue)|| (value >= highValue && !highInclusive)) {      final String range=(lowInclusive ? "[" : "(") + lowValue + ", "+ highValue+ (highInclusive ? "]" : ")");      setParseMessage("The value for " + LONG_FLAG_PREFIX + flagName+ " must be in the range "+ range);      return false;    }  }  return true;}  }
class C{  public void addTag(Tag t){  if (mTagList == emptyList)   mTagList=new ArrayList<Tag>(1);  mTagList.add(t);}  }
class C{  protected JTextField createEditorComponent(){  JTextField editor=new BorderlessTextField("",9);  editor.setBorder(null);  return editor;}  }
class C{  public void read(Reader in,Document doc,int pos) throws IOException, BadLocationException {  if (doc instanceof StyledDocument) {    RTFReader rdr=new RTFReader((StyledDocument)doc);    rdr.readFromReader(in);    rdr.close();  } else {    super.read(in,doc,pos);  }}  }
class C{  private String crc(InputStream input){  if (input == null)   throw new IllegalArgumentException("input cannot be null.");  CRC32 crc=new CRC32();  byte[] buffer=new byte[4096];  try {    while (true) {      int length=input.read(buffer);      if (length == -1)       break;      crc.update(buffer,0,length);    }  } catch (  Exception ex) {    try {      input.close();    } catch (    Exception ignored) {    }  }  return Long.toString(crc.getValue());}  }
class C{  public Tasks<VolumeRestRep> pauseContinuousCopies(URI id,CopiesParam input){  TaskList tasks=client.post(TaskList.class,input,getContinuousCopiesUrl() + "/pause",id);  return new Tasks<VolumeRestRep>(client,tasks.getTaskList(),BlockMirrorRestRep.class);}  }
class C{  private double norm(double x,int i){  if (Double.isNaN(m_minArray[i]) || Utils.eq(m_maxArray[i],m_minArray[i])) {    return 0;  } else {    return (x - m_minArray[i]) / (m_maxArray[i] - m_minArray[i]);  }}  }
class C{  private void openChannel(byte channel){  short deviceNumber=(short)PreferencesUtils.getInt(context,channelConfig[channel].getDeviceIdKey(),WILDCARD);  channelConfig[channel].setDeviceNumber(deviceNumber);  channelConfig[channel].setChannelState(ChannelStates.PENDING_OPEN);  setupAntChannel(ANT_NETWORK,channel);}  }
class C{  public final Observable<String> plot(){  return mPlotSubject.asObservable();}  }
class C{  public static byte parseByte(java.lang.String s) throws java.lang.NumberFormatException {  return 0;}  }
class C{  private float rotateAnchor(float u,float v){switch (mRotation) {case 0:    return u;case 1:  return 1 - v;case 2:return 1 - u;case 3:return v;default :}throw new IllegalStateException();}  }
class C{  public static Instances removeLabels(Instances D,int L) throws Exception {  Remove remove=new Remove();  remove.setAttributeIndices("1-" + L);  remove.setInputFormat(D);  return Filter.useFilter(D,remove);}  }
class C{  public final void unpackResult(String file,String reason){  if (reason.equals("Timed out") || reason.equals("Missing Results")) {    if (file.indexOf(testsLocation) != -1) {      file=file.substring(file.indexOf(testsLocation) + testsLocation.length() + 1);      file=file.replace('\\','/');    } else     if (file.indexOf(testsLocation2) != -1) {      file=file.substring(file.indexOf(testsLocation2) + testsLocation2.length() + 1);      file=file.replace('\\','/');    }  } else   if (file.indexOf(File.separator) != -1) {    file=file.substring(file.lastIndexOf(File.separator) + 1);  }  if (lastTestCaseStart != null && lastTestCaseStart.indexOf("$") != -1) {    file=lastTestCaseStart.substring(0,lastTestCaseStart.indexOf("$"));    lastTestCaseStart=lastTestCaseStart.substring(lastTestCaseStart.indexOf("$") + 1);  }  TestResult tr=new TestResult(file,lastTestCaseStart,reason,(System.currentTimeMillis() - timeout),TestResult.FAIL);  System.out.println("unpacked result: " + tr);  if (run_id != -1 && doTheInsert) {  } else   if (!doTheInsert) {    storeResultLocally(tr);  }}  }
class C{  public boolean isExternal(){  return external;}  }
class C{  public void endGetAll(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(getAllInProgressId,-1);  int endGetAllId;  if (timedOut) {    endGetAllId=getAllTimedOutId;  } else   if (failed) {    endGetAllId=getAllFailedId;  } else {    endGetAllId=getAllId;  }  this.stats.incInt(endGetAllId,1);  this.stats.incLong(getAllDurationId,duration);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void destroy(){  destroyReaderModeControl();  mParentView=null;}  }
class C{  public Object connect(String user,String pass) throws LoginException {  return "";}  }
class C{  public void addRecurrenceException(RecurrenceException exception){  getRecurrenceException().add(exception);}  }
class C{  public void remove_apps(@NonNull List<InstalledApp> to_remove){  ListIterator<InstalledApp> it=_installed_apps.listIterator(_installed_apps.size());  while (it.hasPrevious()) {    InstalledApp current=it.previous();    if (!to_remove.contains(current)) {      continue;    }    notifyItemRemoved(_installed_apps.indexOf(current));    it.remove();  }}  }
class C{  public double scannumber(){  int i=m_offset, j=m_offset + m_length;  while (i < j && m_bytes[i] == ' ')   ++i;  while (i < j && m_bytes[j - 1] == ' ')   --j;  if (i >= j)   return Double.NaN;  if (m_bytes[i] == '0' && i + 1 < j && (m_bytes[i + 1] == 'x' || m_bytes[i + 1] == 'X'))   return scanlong(16,i + 2,j);  double l=scanlong(10,i,j);  return Double.isNaN(l) ? scandouble(i,j) : l;}  }
class C{  public static RecurrenceIterable createRecurrenceIterable(Recurrence recurrence,ICalDate start,TimeZone timezone){  DateValue startValue=convert(start,timezone);  return RecurrenceIteratorFactory.createRecurrenceIterable(recurrence,startValue,timezone);}  }
class C{  public IPreparedTupleQuery prepareTupleQuery(final String query,final UUID uuid) throws Exception {  return new TupleQuery(mgr.newQueryConnectOptions(sparqlEndpointURL,uuid,tx),uuid,query);}  }
class C{  public static int compareRegion(byte[] array1,int startIdx1,byte[] array2,int startIdx2,int length){  int result=0;  for (int i=0; result == 0 && i < length; i++) {    result=(array1[startIdx1 + i] & 0xff) - (array2[startIdx2 + i] & 0xff);  }  return result;}  }
class C{  public void createSubUsageScenario10_changeServiceIdAndUnitAfterBP() throws Exception {  VendorData supplierData=setupNewSupplier("2012-11-01 08:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customerData=registerCustomer(supplierData);  VOServiceDetails serviceDetails=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,"SCENARIO10_PERUNIT_WEEK_SERVICE");  UserGroup unit1=createUnitAndAssignVisibleService(customerData,"Unit1","Unit1 reference",serviceDetails,supplierData.getMarketplace(0));  UserGroup unit2=createUnitAndAssignVisibleService(customerData,"Unit2","Unit2 reference",serviceDetails,supplierData.getMarketplace(0));  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.3));  VOSubscriptionDetails subDetails=subscribeWithAssignToUnit(customerData.getAdminUser(),"SCENARIO10_PERUNIT_WEEK_CHSRVAFBP",unit1.getKey(),serviceDetails,DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.3),"ADMIN");  VOServiceDetails upgradeService=createAndRegisterCompatibleService(supplierData,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES,serviceDetails,"SCENARIO10_PERUNIT_WEEK_UPGRADE_SERVICE");  VOSubscriptionDetails upgradedSubDetails=upgrade(customerData.getAdminUser(),subDetails,upgradeService,DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.3));  serviceDetails=updateServiceId(supplierData,serviceDetails,"SCENARIO10_PERUNIT_WEEK_NEW_SERVICE","2013-01-03 00:00:00");  upgradedSubDetails=changeSubscriptionUnit(customerData.getAdminKey(),upgradedSubDetails,unit2.getKey(),"2013-01-03 00:00:00");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("SCENARIO10_PERUNIT_WEEK_CHSRVAFBP",new TestData(supplierData));}  }
class C{  public void incProb(int cat,double prob){  if (cat > probabilities.length)   throw new IndexOutOfBoundsException("There are only " + probabilities.length + " posibilties, "+ cat+ " is invalid"); else   if (prob < 0 || Double.isInfinite(prob) || Double.isNaN(prob))   throw new ArithmeticException("Only zero and positive values are valid, not " + prob);  probabilities[cat]+=prob;}  }
class C{  public static void testWritable(Writable before) throws Exception {  testWritable(before,null);}  }
class C{  public DocumentoBean(){}  }
class C{  private void clearAttacks(){  if (ce() == null) {    return;  }  Enumeration<AbstractEntityAction> i=attacks.elements();  while (i.hasMoreElements()) {    Object o=i.nextElement();    if (o instanceof WeaponAttackAction) {      WeaponAttackAction waa=(WeaponAttackAction)o;      ce().getEquipment(waa.getWeaponId()).setUsedThisRound(false);    }  }  attacks.removeAllElements();  getClient().getGame().removeActionsFor(cen);  ce().setSecondaryFacing(ce().getFacing());  ce().setArmsFlipped(false);  cen=Entity.NONE;}  }
class C{  @LayoutlibDelegate static float ceil(float value){  return (float)Math.ceil(value);}  }
class C{  public void insertBefore(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=ifirst;  } else {    prev.next=ifirst;  }  location.prev=ilast;  ilast.next=location;  ifirst.prev=prev;  cache=null;  insns.removeAll(false);}  }
class C{  static void poolSize(int size){  if (size > 0) {    outPool=new LinkedBlockingQueue<>(size);    inPool=new LinkedBlockingQueue<>(size);    for (int i=0; i < size; i++) {      outPool.offer(createOut());      inPool.offer(createIn());    }  } else {    outPool=null;    inPool=null;  }}  }
class C{  public static final String toBinaryString(int l,int L){  String sb=new String(Integer.toBinaryString(l));  while (sb.length() < L) {    sb="0" + sb;  }  return sb;}  }
class C{  public ALogin(Frame parent){  super(parent,"Login",true);  log.finer("");  setDefaultCloseOperation(DISPOSE_ON_CLOSE);  m_WindowNo=Env.createWindowNo(null);  res=ResourceBundle.getBundle(RESOURCE);  try {    jbInit();  } catch (  Exception e) {    log.severe(e.toString());  }  this.getRootPane().setDefaultButton(confirmPanel.getOKButton());  parent.setIconImage(Adempiere.getImage16());}  }
class C{  @SuppressWarnings("unchecked") public <T extends AbstractEffectList>T concat(@Nonnull List<IEffect> otherEffects){  effects.addAll(otherEffects);  return (T)this;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static void deleteFilesIfExist(Path... files) throws IOException {  deleteFilesIfExist(Arrays.asList(files));}  }
class C{  public static double mean(long[] values){  double total=0.0;  for (int i=0; i < values.length; i++)   total+=values[i];  return total / values.length;}  }
class C{  private void removeObservedFile(String localPath){  File file=new File(localPath);  String parentPath=file.getParent();  FolderObserver observer=mFolderObserversMap.get(parentPath);  if (observer != null) {    observer.stopWatching(file.getName());    if (observer.isEmpty()) {      mFolderObserversMap.remove(parentPath);      Log_OC.d(TAG,"Observer removed for parent folder " + parentPath + "/");    }  } else {    Log_OC.d(TAG,"No observer to remove for path " + localPath);  }}  }
class C{  private int map(int x,int inMin,int inMax,int outMin,int outMax){  return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;}  }
class C{  public boolean isStartEager(){  return isStartEager;}  }
class C{  public static boolean installPackageFromRepository(String packageName,String version,PrintStream... progress) throws Exception {  useCacheOrOnlineRepository();  Package toLoad=getRepositoryPackageInfo(packageName);  boolean isAnUpgrade=toLoad.isInstalled();  Object specialInstallMessage=toLoad.getPackageMetaDataElement("MessageToDisplayOnInstallation");  if (specialInstallMessage != null && specialInstallMessage.toString().length() > 0) {    String siM=specialInstallMessage.toString();    try {      siM=Environment.getSystemWide().substitute(siM);    } catch (    Exception ex) {    }    String message="**** Special installation message ****\n" + siM + "\n**** Special installation message ****";    for (    PrintStream p : progress) {      p.println(message);    }  }  PACKAGE_MANAGER.installPackageFromRepository(packageName,version,progress);  File packageDir=new File(PACKAGE_MANAGER.getPackageHome().toString() + File.separator + packageName);  boolean loadIt=checkForMissingClasses(toLoad,progress);  if (loadIt && !isAnUpgrade) {    File packageRoot=new File(PACKAGE_MANAGER.getPackageHome() + File.separator + packageName);    loadIt=checkForMissingFiles(toLoad,packageRoot,progress);    if (loadIt) {      loadPackageDirectory(packageDir,false,null,false);    }  }  return isAnUpgrade;}  }
class C{  public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  public java.nio.ByteBuffer compressImageDXT1(java.awt.image.BufferedImage image,DXTCompressionAttributes attributes){  if (image == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!WWMath.isPowerOfTwo(image.getWidth()) || !WWMath.isPowerOfTwo(image.getHeight())) {    String message=Logging.getMessage("generic.InvalidImageSize",image.getWidth(),image.getHeight());    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (attributes == null) {    String message=Logging.getMessage("nullValue.AttributesIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  DXT1Compressor compressor=new DXT1Compressor();  return this.doCompressImage(compressor,image,attributes);}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  result.append("[");  for (int i=0; i < size; ++i) {    result.append(vector[i]);    if (i + 1 < size)     result.append(", ");  }  result.append("]");  return result.toString();}  }
class C{  public CompletableFuture<Object> eval(final String script,final String language,final Bindings boundVars){  return eval(script,language,boundVars,null,null);}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public KMLAbstractSubStyle mergeSubStyle(KMLAbstractSubStyle subStyle){  if (subStyle == null) {    String message=Logging.getMessage("nullValue.SymbolIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!this.hasFields())   return subStyle;  Class subStyleClass=subStyle.getClass();  for (  Map.Entry<String,Object> field : this.getFields().getEntries()) {    if (field.getValue() != null && field.getValue().getClass().equals(subStyleClass)) {      this.overrideFields(subStyle,(KMLAbstractSubStyle)field.getValue());    }  }  return subStyle;}  }
class C{  public void connectPan(BluetoothAdapter adapter,BluetoothDevice device){  connectPanOrIncomingPanConnection(adapter,device,true);}  }
class C{  public Rectangle(Rect rect){  setRect(rect);}  }
class C{  public GridConcurrentHashSet(Collection<E> c){  super(new ConcurrentHashMap8<E,E>(c.size()));  addAll(c);}  }
class C{  public DViewSecretKey(JDialog parent,String title,Dialog.ModalityType modality,SecretKey secretKey) throws CryptoException {  super(parent,title,modality);  this.secretKey=secretKey;  initComponents();}  }
class C{  public static boolean testAabPlane(Vector3fc min,Vector3fc max,float a,float b,float c,float d){  return testAabPlane(min.x(),min.y(),min.z(),max.x(),max.y(),max.z(),a,b,c,d);}  }
class C{  public void addActionListener(ActionListener act){  listener=act;}  }
class C{  public InputStream serverStream(){  return mServerStream;}  }
class C{  private static int compareUlpDifference(double expected,double computed,double threshold){  if (!Double.isFinite(expected)) {    if (Double.compare(expected,computed) == 0)     return 0; else {      System.err.printf("Unexpected sum, %g rather than %g.%n",computed,expected);      return 1;    }  }  double ulpDifference=Math.abs(expected - computed) / Math.ulp(expected);  if (ulpDifference > threshold) {    System.err.printf("Numerical summation error too large, %g ulps rather than %g.%n",ulpDifference,threshold);    return 1;  } else   return 0;}  }
class C{  public boolean hasClearableItems(){  for (  Entry e : mEntries) {    if (e.expanded != null) {      if (e.notification.isClearable()) {        return true;      }    }  }  return false;}  }
class C{  @SuppressWarnings("nls") public static XmlRpcStruct parseFile(final BufferedReader input) throws IOException, InvalidPostFormatException {  final XmlRpcStruct p=new XmlRpcStruct();  String line;  String prevKey=null;  String prevValue=null;  Pattern keyPattern;  keyPattern=Pattern.compile("^[\\d\\w_]+:",Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);  while ((line=input.readLine()) != null) {    if (!"".equals(line) && !line.startsWith("#")) {      final Matcher m=keyPattern.matcher(line);      if (m.find()) {        if (prevKey != null) {          FileParser.putVal(p,prevKey,prevValue);        }        final String[] vals=line.split(":",2);        prevKey=vals[0];        prevValue=vals[1];      } else {        if (prevValue != null) {          prevValue+=line;        } else {          throw new InvalidPostFormatException();        }      }    }  }  if (prevKey != null) {    FileParser.putVal(p,prevKey,prevValue);  }  return p;}  }
class C{  public static void ignorePackages(String[] ignoredPackages){  String[] testPackages=new String[DEFAULT_PACKAGES.length - ignoredPackages.length];  int k=0;  outer:   for (int i=0; i < DEFAULT_PACKAGES.length; i++) {    for (int j=0; j < ignoredPackages.length; j++) {      if (DEFAULT_PACKAGES[i].equals(ignoredPackages[j])) {        continue outer;      }    }    testPackages[k]=DEFAULT_PACKAGES[i];    k++;  }  packages=testPackages;}  }
class C{  public void unsetMatchColumn(String columnName) throws SQLException {  columnName=columnName.trim();  if (!((strMatchColumns.get(0)).equals(columnName))) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.unsetmatch").toString());  } else   if (iMatchColumns.get(0) > 0) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.unsetmatch2").toString());  } else {    strMatchColumns.set(0,null);  }}  }
class C{  void fireFocusGained(){  fireFocusGained(this);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:44.581 -0500",hash_original_method="76E8736EFBBC9BF69FA0C2D7E3BBC6EF",hash_generated_method="763070220CDD6AAECE1612E041381A7A") private URIUtils(){}  }
class C{  public void recordUpdatedCompilationRates(byte compiler,RVMMethod method,int BCLength,int totalBCLength,int MCLength,int totalMCLength,double compTime,double totalCompTime,double totalLogOfRates,int totalLogValueMethods,int totalMethods){  if (Controller.options.LOGGING_LEVEL >= 3) {synchronized (log) {      boolean backBranch=false;      if (method instanceof NormalMethod) {        backBranch=((NormalMethod)method).hasBackwardsBranch();      }      log.println(getTime() + "  Updated compilation rates for " + RuntimeCompiler.getCompilerName(compiler)+ "compiler");      log.println("\tmethod compiled: " + method);      log.println("\tbyte code length: " + BCLength + ", Total: "+ totalBCLength);      log.println("\tmachine code length: " + MCLength + ", Total: "+ totalMCLength);      log.println("\tbackwards branch: " + (backBranch ? "yes" : "no"));      log.println("\tcompilation time: " + compTime + ", Total: "+ totalCompTime);      log.println("\tRate for this method: " + BCLength / compTime + ", Total of Logs: " + totalLogOfRates);      log.println("\tTotal Methods: " + totalMethods);      log.println("\tNew Rate: " + Math.exp(totalLogOfRates / totalLogValueMethods));    }  }}  }
class C{  @Override public void addAll(EntityCollection collection){  this.entities.addAll(collection.getEntities());}  }
class C{  @Override protected void tearDown() throws Exception {  super.tearDown();}  }
class C{  protected void addTimeEventPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ScheduleTimeEvent_timeEvent_feature"),getString("_UI_PropertyDescriptor_description","_UI_ScheduleTimeEvent_timeEvent_feature","_UI_ScheduleTimeEvent_type"),SexecPackage.Literals.SCHEDULE_TIME_EVENT__TIME_EVENT,true,false,true,null,null,null));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void initialize(){  GridBagConstraints gridBagConstraints2=new GridBagConstraints();  java.awt.GridBagConstraints gridBagConstraints1=new GridBagConstraints();  java.awt.GridBagConstraints gridBagConstraints11=new GridBagConstraints();  this.setLayout(new GridBagLayout());  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(375,204);  }  this.setPreferredSize(new Dimension(375,204));  this.setName("categoryPanel");  gridBagConstraints11.weightx=1.0;  gridBagConstraints11.weighty=1.0;  gridBagConstraints11.fill=java.awt.GridBagConstraints.BOTH;  gridBagConstraints11.gridx=0;  gridBagConstraints11.gridy=2;  gridBagConstraints11.insets=new java.awt.Insets(0,0,0,0);  gridBagConstraints11.anchor=java.awt.GridBagConstraints.NORTHWEST;  gridBagConstraints11.gridwidth=2;  gridBagConstraints1.anchor=java.awt.GridBagConstraints.NORTHWEST;  gridBagConstraints1.gridx=0;  gridBagConstraints1.gridy=1;  gridBagConstraints1.insets=new java.awt.Insets(2,2,2,2);  gridBagConstraints2.gridx=1;  gridBagConstraints2.insets=new java.awt.Insets(2,2,2,2);  gridBagConstraints2.gridy=1;  gridBagConstraints2.anchor=java.awt.GridBagConstraints.NORTHWEST;  this.add(new JLabel(Constant.messages.getString("filter.warning")),LayoutHelper.getGBC(0,0,2,1.0));  this.add(getBtnEnableAll(),gridBagConstraints1);  this.add(getBtnDisableAll(),gridBagConstraints2);  this.add(getJScrollPane(),gridBagConstraints11);}  }
class C{  public static IVariableBinding findFieldInHierarchy(ITypeBinding type,String fieldName){  IVariableBinding field=findFieldInType(type,fieldName);  if (field != null)   return field;  ITypeBinding superClass=type.getSuperclass();  if (superClass != null) {    field=findFieldInHierarchy(superClass,fieldName);    if (field != null)     return field;  }  ITypeBinding[] interfaces=type.getInterfaces();  for (int i=0; i < interfaces.length; i++) {    field=findFieldInHierarchy(interfaces[i],fieldName);    if (field != null)     return field;  }  return null;}  }
class C{  public byte[] decryptViaKek(byte[] content){  return cryptoViaKek(content,Cipher.DECRYPT_MODE);}  }
class C{  public Credential authorize() throws IOException {  HttpServletRequest request=ElementsThreadLocals.getHttpServletRequest();  Subject subject=SecurityUtils.getSubject();  Object principal=subject.getPrincipal();  String userId;  if (principal == null) {    throw new IllegalStateException("User is not logged in, can not determine the user id");  } else {    userId=OgnlUtils.convertValueToString(ShiroUtils.getUserId(subject));  }  return authorize(request,userId);}  }
class C{  protected void computeSubdivisions(DrawContext dc,ShapeData shapeData){  int minDivisions=0;  int maxDivisions=6;  if (shapeData.getExtent() != null) {    for (int divisions=minDivisions; divisions <= maxDivisions; divisions++) {      this.subdivisions=divisions;      if (this.sufficientDetail(dc,divisions,shapeData))       break;    }  }}  }
class C{  public SymbolTableEntryInternal steFor___proto__(){  return getSymbolTableEntryInternal("__proto__",true);}  }
class C{  public boolean restoreActivity(Activity activity){  try {    Message msg=Message.obtain();    msg.what=PermissiveHandler.RESTORE_ACTIVITY;    msg.obj=activity;    messenger.send(msg);    return true;  } catch (  Exception e) {    if (DEBUG) {      Log.w(TAG,e);    }    return false;  }}  }
class C{  public void markCall(){  super.get().increase();}  }
class C{  public float[] toNativeArray(int offset,int len){  float[] rv=new float[len];  toNativeArray(rv,offset,len);  return rv;}  }
class C{  public StrBuilder append(final int value){  return append(String.valueOf(value));}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.OBJECT_BINDING_PATTERN;}  }
class C{  public void triggerCycle(){  lock.lock();  triggerCount++;  contextsParked=0;  lock.broadcast();  lock.unlock();}  }
class C{  private void fetchFileList(long gen) throws IOException {  ModifiableSolrParams params=new ModifiableSolrParams();  params.set(COMMAND,CMD_GET_FILE_LIST);  params.set(GENERATION,String.valueOf(gen));  params.set(CommonParams.WT,"javabin");  params.set(CommonParams.QT,"/replication");  QueryRequest req=new QueryRequest(params);  HttpSolrServer server=new HttpSolrServer(masterUrl,myHttpClient);  try {    server.setSoTimeout(60000);    server.setConnectionTimeout(15000);    NamedList response=server.request(req);    List<Map<String,Object>> files=(List<Map<String,Object>>)response.get(CMD_GET_FILE_LIST);    if (files != null)     filesToDownload=Collections.synchronizedList(files); else {      filesToDownload=Collections.emptyList();      LOG.error("No files to download for index generation: " + gen);    }    files=(List<Map<String,Object>>)response.get(CONF_FILES);    if (files != null)     confFilesToDownload=Collections.synchronizedList(files);  } catch (  SolrServerException e) {    throw new IOException(e);  } finally {    server.shutdown();  }}  }
class C{  protected void handleMultiClick(MouseEvent evt){  if (DEBUG) {    System.out.println("DelegationSelectionTool.handleMultiClick " + evt);  }  DrawingView v=getView();  Point pos=new Point(evt.getX(),evt.getY());  Handle handle=v.findHandle(pos);  if (handle == null) {    v.setHandleDetailLevel(v.getHandleDetailLevel() + 1);  }}  }
class C{  public void reset(){  for (int i=0; i < size; i++) {    u[i]=uOld[i]=v[i]=vOld[i]=0.0f;    d[i]=dOld[i]=curl[i]=0.0f;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.MODULE_FILTER_SPECIFIER__MODULE_SPECIFIER_WITH_WILDCARD:    setModuleSpecifierWithWildcard(MODULE_SPECIFIER_WITH_WILDCARD_EDEFAULT);  return;case N4mfPackage.MODULE_FILTER_SPECIFIER__SOURCE_PATH:setSourcePath(SOURCE_PATH_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public JCExpression coerce(Env<AttrContext> env,JCExpression tree,Type target){  Env<AttrContext> prevEnv=this.env;  try {    this.env=env;    return coerce(tree,target);  }  finally {    this.env=prevEnv;  }}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String cReferencia=(String)request.getParameter(REFEENCIA_KEY);  String cDocumentoPago=null;  Liquidacion oLiquidacion=null;  try {    oLiquidacion=PagoElectronicoManagerHelper.obtenerDatosLiquidacion(request,cReferencia);    String cXMLDatos=PagoElectronicoManagerHelper.obtenerDocumentoPago(request,cReferencia);    cDocumentoPago=FormCreator.crearConsultaPago(oLiquidacion.getTasa(),cXMLDatos,request);  } catch (  Exception e) {    logger.error(e.getMessage(),e);    request.setAttribute(ERROR_KEY,e.getMessage());    return mapping.findForward(ERROR_FORWARD);  }  request.setAttribute(DOC_PAGO_KEY,cDocumentoPago);  request.setAttribute(REFEENCIA_KEY,cReferencia);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  public void clearBreakpointsPassive(final BreakpointType type){  Preconditions.checkNotNull(type,"IE01011: Type argument can not be null");  NaviLogger.info("Clearing all breakpoints of type '%s' passively",type);switch (type) {case REGULAR:    throw new IllegalStateException("IE01018: Regular breakpoints can not be cleared passively");case ECHO:  echoBreakpointStorage.clear();return;case STEP:stepBreakpointStorage.clear();return;default :throw new IllegalStateException(String.format("IE01017: Invalid breakpoint type '%s'",type));}}  }
class C{  public Integer extractIntegerSansLocaleNamed(final String parameterName,final JsonElement element,final Set<String> parametersPassedInRequest){  Integer intValue=null;  if (element.isJsonObject()) {    final JsonObject object=element.getAsJsonObject();    if (object.has(parameterName) && object.get(parameterName).isJsonPrimitive()) {      parametersPassedInRequest.add(parameterName);      final JsonPrimitive primitive=object.get(parameterName).getAsJsonPrimitive();      final String stringValue=primitive.getAsString();      if (StringUtils.isNotBlank(stringValue)) {        intValue=convertToIntegerSanLocale(stringValue,parameterName);      }    }  }  return intValue;}  }
class C{  public void skipChildren(){  int childLen=(currentChildren != null) ? currentChildren.getLength() : 0;  for (int i=0; i < childLen; i++) {    Node child=nodes.peek();    if (child.equals(currentChildren.item(i))) {      nodes.pop();    }  }}  }
class C{  public static void runExperiment(MultiLabelClassifier h,String options[]) throws Exception {  if (Utils.getOptionPos('h',options) >= 0) {    System.out.println("\nHelp requested");    Evaluation.printOptions(h.listOptions());    return;  }  h.setOptions(options);  if (h.getDebug())   System.out.println("Loading and preparing dataset ...");  Instances D_train=loadDataset(options);  Instances D_full=D_train;  MLUtils.prepareData(D_train);  if (Utils.getOptionPos('C',options) >= 0) {    int L=Integer.parseInt(Utils.getOption('C',options));    D_train.setClassIndex(L);  }  int L=D_train.classIndex();  if (L <= 0) {    throw new Exception("[Error] Number of labels not specified.\n\tYou must set the number of labels with the -C option, either inside the @relation tag of the Instances file, or on the command line.");  }  int seed=(Utils.getOptionPos('s',options) >= 0) ? Integer.parseInt(Utils.getOption('s',options)) : 0;  if (Utils.getFlag('R',options)) {    D_train.randomize(new Random(seed));  }  boolean Threaded=false;  if (Utils.getOptionPos("Thr",options) >= 0) {    Threaded=Utils.getFlag("Thr",options);  }  String voption="1";  if (Utils.getOptionPos("verbosity",options) >= 0) {    voption=Utils.getOption("verbosity",options);  }  String dname=null;  if (Utils.getOptionPos('d',options) >= 0) {    dname=Utils.getOption('d',options);  }  String lname=null;  Instances dataHeader=null;  if (Utils.getOptionPos('l',options) >= 0) {    lname=Utils.getOption('l',options);    Object[] data=SerializationHelper.readAll(lname);    h=(MultiLabelClassifier)data[0];    if (data.length > 1)     dataHeader=(Instances)data[1];  }  try {    Result r=null;    String top="PCut1";    if (Utils.getOptionPos("threshold",options) >= 0)     top=Utils.getOption("threshold",options);    String predictions=Utils.getOption("predictions",options);    boolean doEval=!Utils.getFlag("no-eval",options);    if (Utils.getOptionPos('x',options) >= 0) {      if (!predictions.isEmpty())       System.err.println("Predictions cannot be saved when using cross-validation!");      int numFolds=MLUtils.getIntegerOption(Utils.getOption('x',options),10);      Utils.checkForRemainingOptions(options);      r=Evaluation.cvModel(h,D_train,numFolds,top,voption);      System.out.println(r.toString());    } else {      Instances D_test=null;      if (Utils.getOptionPos('T',options) >= 0) {        try {          D_test=loadDataset(options,'T');          MLUtils.prepareData(D_test);        } catch (        Exception e) {          throw new Exception("[Error] Failed to Load Test Instances from file.",e);        }      } else {        int N_T=(int)(D_train.numInstances() * 0.60);        if (Utils.getOptionPos("split-percentage",options) >= 0) {          double percentTrain=Double.parseDouble(Utils.getOption("split-percentage",options));          N_T=(int)Math.round((D_train.numInstances() * (percentTrain / 100.0)));        } else         if (Utils.getOptionPos("split-number",options) >= 0) {          N_T=Integer.parseInt(Utils.getOption("split-number",options));        }        int N_t=D_train.numInstances() - N_T;        D_test=new Instances(D_train,N_T,N_t);        D_train=new Instances(D_train,0,N_T);      }      if (Utils.getFlag('i',options)) {        Instances temp=D_test;        D_test=D_train;        D_train=temp;      }      Utils.checkForRemainingOptions(options);      if (h.getDebug())       System.out.println(":- Dataset -: " + MLUtils.getDatasetName(D_train) + "\tL="+ L+ "\tD(t:T)=("+ D_train.numInstances()+ ":"+ D_test.numInstances()+ ")\tLC(t:T)="+ Utils.roundDouble(MLUtils.labelCardinality(D_train,L),2)+ ":"+ Utils.roundDouble(MLUtils.labelCardinality(D_test,L),2)+ ")");      if (lname != null) {        if (doEval) {          r=testClassifier(h,D_test);          String t=top;          if (top.startsWith("PCut")) {            t=MLEvalUtils.getThreshold(r.predictions,D_train,top);          }          r=evaluateModel(h,D_test,t,voption);        }      } else {        if (D_train.numInstances() > 0 && D_test.numInstances() > 0) {          if (doEval) {            if (Threaded) {              r=evaluateModelM(h,D_train,D_test,top,voption);            } else {              r=evaluateModel(h,D_train,D_test,top,voption);            }          } else {            h.buildClassifier(D_train);          }        } else {          h.buildClassifier(D_full);        }      }      if (D_train.numInstances() > 0 && D_test.numInstances() > 0 && r != null) {        System.out.println(r.toString());      }      if (!predictions.isEmpty()) {        Instances predicted=new Instances(D_test,0);        for (int i=0; i < D_test.numInstances(); i++) {          double pred[]=h.distributionForInstance(D_test.instance(i));          if (h instanceof MultiTargetClassifier)           pred=Arrays.copyOf(pred,D_test.classIndex());          Instance predInst=(Instance)D_test.instance(i).copy();          for (int j=0; j < pred.length; j++)           predInst.setValue(j,pred[j]);          predicted.add(predInst);        }        AbstractFileSaver saver=ConverterUtils.getSaverForFile(predictions);        if (saver == null) {          System.err.println("Failed to determine saver for '" + predictions + "', using "+ ArffSaver.class.getName());          saver=new ArffSaver();        }        saver.setFile(new File(predictions));        saver.setInstances(predicted);        saver.writeBatch();        System.out.println("Predictions saved to: " + predictions);      }    }    if (dname != null) {      dataHeader=new Instances(D_train,0);      SerializationHelper.writeAll(dname,new Object[]{h,dataHeader});    }  } catch (  Exception e) {    e.printStackTrace();    Evaluation.printOptions(h.listOptions());    System.exit(1);  }  System.exit(0);}  }
class C{  public void filter(int kind,float param){  loadPixels();switch (kind) {case BLUR:    if (format == ALPHA)     blurAlpha(param); else     if (format == ARGB)     blurARGB(param); else     blurRGB(param);  break;case GRAY:throw new RuntimeException("Use filter(GRAY) instead of " + "filter(GRAY, param)");case INVERT:throw new RuntimeException("Use filter(INVERT) instead of " + "filter(INVERT, param)");case OPAQUE:throw new RuntimeException("Use filter(OPAQUE) instead of " + "filter(OPAQUE, param)");case POSTERIZE:int levels=(int)param;if ((levels < 2) || (levels > 255)) {throw new RuntimeException("Levels must be between 2 and 255 for " + "filter(POSTERIZE, levels)");}int levels1=levels - 1;for (int i=0; i < pixels.length; i++) {int rlevel=(pixels[i] >> 16) & 0xff;int glevel=(pixels[i] >> 8) & 0xff;int blevel=pixels[i] & 0xff;rlevel=(((rlevel * levels) >> 8) * 255) / levels1;glevel=(((glevel * levels) >> 8) * 255) / levels1;blevel=(((blevel * levels) >> 8) * 255) / levels1;pixels[i]=((0xff000000 & pixels[i]) | (rlevel << 16) | (glevel << 8)| blevel);}break;case THRESHOLD:int thresh=(int)(param * 255);for (int i=0; i < pixels.length; i++) {int max=Math.max((pixels[i] & RED_MASK) >> 16,Math.max((pixels[i] & GREEN_MASK) >> 8,(pixels[i] & BLUE_MASK)));pixels[i]=(pixels[i] & ALPHA_MASK) | ((max < thresh) ? 0x000000 : 0xffffff);}break;case ERODE:throw new RuntimeException("Use filter(ERODE) instead of " + "filter(ERODE, param)");case DILATE:throw new RuntimeException("Use filter(DILATE) instead of " + "filter(DILATE, param)");}updatePixels();}  }
class C{  private boolean yy_refill() throws java.io.IOException {  if (yy_startRead > 0) {    System.arraycopy(yy_buffer,yy_startRead,yy_buffer,0,yy_endRead - yy_startRead);    yy_endRead-=yy_startRead;    yy_currentPos-=yy_startRead;    yy_markedPos-=yy_startRead;    yy_pushbackPos-=yy_startRead;    yy_startRead=0;  }  if (yy_currentPos >= yy_buffer.length) {    char newBuffer[]=new char[yy_currentPos * 2];    System.arraycopy(yy_buffer,0,newBuffer,0,yy_buffer.length);    yy_buffer=newBuffer;  }  int numRead=yy_reader.read(yy_buffer,yy_endRead,yy_buffer.length - yy_endRead);  if (numRead < 0) {    return true;  } else {    yy_endRead+=numRead;    return false;  }}  }
class C{  protected Object[] massageArgs(Object args){  Object[] r;  if (args instanceof Object[])   r=(Object[])args; else   r=new Object[]{args};  for (int i=0; i < r.length; i++) {    if (r[i] instanceof GString)     r[i]=r[i].toString();  }  return r;}  }
class C{  public void reset(){  camerasSupervisor.reset();  if (changedRowColor) {    config.setShotTimerRowColor(null);    changedRowColor=false;  }  if (config.getExercise().isPresent())   config.getExercise().get().reset(cameraViews.getTargets());}  }
class C{  public int size(){  return values.size();}  }
class C{  public static void fillMatrix_1D(int N,float[] m){  Random r=new Random(2);  for (int i=0; i < N; i++) {    m[i]=r.nextFloat();  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  private void createRasterFrameBufferObject(){  this.fbo=glGenFramebuffers();  this.depthBuffer=glGenRenderbuffers();  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  IntBuffer renderBuffers=BufferUtils.createIntBuffer(2).put(GL_COLOR_ATTACHMENT0).put(GL_COLOR_ATTACHMENT1);  renderBuffers.flip();  glDrawBuffers(renderBuffers);  glBindRenderbuffer(GL_RENDERBUFFER,depthBuffer);  glRenderbufferStorage(GL_RENDERBUFFER,GL_DEPTH_COMPONENT,width,height);  glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_TEXTURE_2D,positionTexture,0);  glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT1,GL_TEXTURE_2D,normalTexture,0);  glFramebufferRenderbuffer(GL_FRAMEBUFFER,GL_DEPTH_ATTACHMENT,GL_RENDERBUFFER,depthBuffer);  int fboStatus=glCheckFramebufferStatus(GL_FRAMEBUFFER);  if (fboStatus != GL_FRAMEBUFFER_COMPLETE) {    throw new AssertionError("Could not create FBO: " + fboStatus);  }  glBindFramebuffer(GL_FRAMEBUFFER,0);  glBindRenderbuffer(GL_RENDERBUFFER,0);}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  public static void applyPluginArguments(List<String> args,Config.Builder configBuilder){  Map<String,PluginArgument> pluginArguments=configBuilder.fetchPluginArguments();  Iterator<String> iter=args.iterator();  while (iter.hasNext()) {    String arg=iter.next();    if (!arg.startsWith("-rvm") && arg.startsWith("-")) {      String argName=arg.substring(1);      if (argName.contains("=")) {        argName=argName.substring(0,argName.indexOf('='));      }      PluginArgument pluginArg=pluginArguments.get(argName);      if (pluginArg != null) {        if (configBuilder != null) {          configBuilder.addPluginArgument(arg.substring(1));          iter.remove();        }      }    }  }}  }
class C{  public void readListEnd() throws IOException {  int code=read();  if (code != 'z')   throw error("expected end of list ('z') at " + codeName(code));}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  public Identifier removeAmbigPrefix(){  if (hasAmbigPrefix()) {    return Identifier.lookup(name.substring(ambigPrefix.length()));  } else {    return this;  }}  }
class C{  public void loadConfig(final String path){  config.loadConfig(path);  applyConfig();}  }
class C{  public AuditLogTooManyRowsException(String message){  super(message);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.124 -0500",hash_original_method="C91BF707E87558E2399AB2AABB697A59",hash_generated_method="46294595859D7DA9E01CD79B48D0F31D") public static void sort(byte[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public ClassFormatError(String s){  super(s);}  }
class C{  public ZFastTrieDistributorMonotoneMinimalPerfectHashFunction<T> build() throws IOException {  if (built)   throw new IllegalStateException("This builder has been already used");  built=true;  return new ZFastTrieDistributorMonotoneMinimalPerfectHashFunction<T>(keys,transform,-1,signatureWidth,tempDir);}  }
class C{  public ViewAnimator repeatCount(@IntRange(from=-1) int repeatCount){  this.repeatCount=repeatCount;  return this;}  }
class C{  private void systemExitAssist(int return_value){  System.exit(return_value);}  }
class C{  public static final byte composeConversationAbort(byte esmClass){  return composeMessageType(esmClass,SMPPConstant.ESMCLS_CONV_ABORT);}  }
class C{  protected final void firePropertyChange(PropertyChangeEvent evt){  pcs.firePropertyChange(evt);}  }
class C{  public AttributeModificationException(String explanation){  super(explanation);}  }
class C{  public void close() throws IOException {  if (mInputStream != null) {    mInputStream.close();  } else {    throw new IOException("Can't close wave source - was not opened");  }  mInputStream=null;}  }
class C{  protected void createClassProxy(Class<?> clazz){  try {    ProxyCodeGenerator.getClassProxy(clazz);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.313 -0500",hash_original_method="23256B84FD63DB25D1FF9FA99CF29C9A",hash_generated_method="0A0CCB5473488EC37FD52A018021376A") private void signalNotFull(){}  }
class C{  public static boolean addSmeltingAndAlloySmeltingRecipe(ItemStack aInput,ItemStack aOutput,boolean hidden){  if (aInput == null || aOutput == null)   return false;  boolean temp=false;  if (aInput.stackSize == 1 && addSmeltingRecipe(aInput,aOutput))   temp=true;  if (RA.addAlloySmelterRecipe(aInput,OrePrefixes.ingot.contains(aOutput) ? ItemList.Shape_Mold_Ingot.get(0) : OrePrefixes.block.contains(aOutput) ? ItemList.Shape_Mold_Block.get(0) : OrePrefixes.nugget.contains(aOutput) ? ItemList.Shape_Mold_Nugget.get(0) : null,aOutput,130,3,hidden))   temp=true;  if (addInductionSmelterRecipe(aInput,null,aOutput,null,aOutput.stackSize * 1600,0))   temp=true;  return temp;}  }
class C{  void unlink(Node<E> p,Node<E> trail){  p.setValue(null);  trail.next=p.next;  if (last == p)   last=trail;  if (count.getAndDecrement() == capacity)   notFull.signal();}  }
class C{  public void testCommandSequence() throws Throwable {  callerContext.execute(null);  await();  ServerSessionContext session=state.getStateMachine().executor().context().sessions().getSession(1);  assertNotNull(session);  assertEquals(session.id(),1);  assertEquals(session.getTimestamp(),timestamp);  assertEquals(session.getCommandSequence(),0);  callerContext.execute(null);  await();  assertEquals(session.getCommandSequence(),1);  assertEquals(session.getTimestamp(),timestamp + 100);  callerContext.execute(null);  callerContext.execute(null);  await(1000,2);  assertEquals(session.getCommandSequence(),3);  assertEquals(session.getTimestamp(),timestamp + 300);}  }
class C{  public InputStream openInputStream() throws IOException {  StreamSource indirectSource=_indirectSource;  if (indirectSource != null) {    return indirectSource.openInputStream();  }  TempOutputStream out=_out;  if (out != null) {    return out.openInputStreamNoFree();  }  throw new IOException(L.l("{0}: no input stream is available",this));}  }
class C{  public void _testUpperAndBlobParam() throws Exception {  Connection connection=getConnectionViaDriverManager();  connection.setAutoCommit(false);  try {    Statement stmt=connection.createStatement();    try {      stmt.execute("INSERT INTO ClassMap(oid, classname) VALUES (1, 'test')");    }  finally {      stmt.close();    }    connection.commit();    PreparedStatement ps=connection.prepareStatement("SELECT oid FROM ClassMap WHERE UPPER(classname) LIKE ?");    try {      ps.setString(1,"TEST");      ResultSet rs=ps.executeQuery();      assertTrue("Should find at least one row.",rs.next());      assertTrue("OID value should be correct.","1".equals(rs.getString(1)));      assertTrue("Only one row should be selected",!rs.next());    }  finally {      ps.close();    }  }  finally {    connection.close();  }}  }
class C{  public String[] showInfo(){  String[] ret=new String[tags.size() + 1];  ret[0]="Geotiff file= " + filename;  for (int i=0; i < tags.size(); i++) {    IFDEntry ifd=tags.get(i);    ret[i + 1]=ifd.toString();  }  return ret;}  }
class C{  public void pixellate(FontRenderContext renderFRC,Point2D loc,Point pxResult){  if (renderFRC == null) {    renderFRC=frc;  }  AffineTransform at=renderFRC.getTransform();  at.transform(loc,loc);  pxResult.x=(int)loc.getX();  pxResult.y=(int)loc.getY();  loc.setLocation(pxResult.x,pxResult.y);  try {    at.inverseTransform(loc,loc);  } catch (  NoninvertibleTransformException e) {    throw new IllegalArgumentException("must be able to invert frc transform");  }}  }
class C{  public static Partition normalizeNames(Partition partition){  partition.setDbName(partition.getDbName().toLowerCase());  partition.setTableName(partition.getTableName().toLowerCase());  return partition;}  }
class C{  public void callback(HttpStreamHandler httpStreamHandler){  this.httpStreamHandler=httpStreamHandler;}  }
class C{  protected Object invokeMethod(Object object,String name,Object param,Object defaultValue){  try {    if (param == null) {      return MethodUtils.invokeMethod(object,name,new Object[0]);    }    return MethodUtils.invokeMethod(object,name,param);  } catch (  NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {    logger.error("",e);  }  return defaultValue;}  }
class C{  public boolean initiateRollback(Workflow workflow) throws WorkflowException {  Map<String,StepStatus> statusMap=workflow.getAllStepStatus();  for (  StepStatus status : statusMap.values()) {    if (false == status.isTerminalState()) {      throw new WorkflowException("Step: " + status.stepId + " is not in a terminal state: "+ status.state);    }  }  boolean norollback=false;  for (  Step step : workflow.getStepMap().values()) {    if (step.status.state == StepState.SUSPENDED_NO_ERROR) {      step.status.state=StepState.CANCELLED;      step.status.message="Step cancelled because rollback was initiated";      step.status.serviceCode=ServiceCode.WORKFLOW_STEP_CANCELLED;      persistWorkflowStep(workflow,step);      continue;    }    if (step.status.state != StepState.CANCELLED && step.rollbackMethod == null) {      _log.error(String.format("Cannot rollback step %s because it does not have a rollback method",step.stepId));      norollback=true;    }  }  if (norollback) {    return false;  }  _log.info("Generating rollback steps for workflow: " + workflow.getWorkflowURI());  if (workflow._rollbackHandler != null) {    workflow._rollbackHandler.initiatingRollback(workflow,workflow._rollbackHandlerArgs);  }  Map<String,Step> rollbackStepMap=new HashMap<String,Step>();  Map<String,Set<String>> rollbackStepGroupMap=new HashMap<String,Set<String>>();  Map<String,List<String>> dependenceMap=new HashMap<String,List<String>>();  for (  Step step : workflow.getStepMap().values()) {    if (step.status.state == StepState.CANCELLED) {      continue;    }    if (step.waitFor != null) {      if (dependenceMap.get(step.waitFor) == null) {        dependenceMap.put(step.waitFor,new ArrayList<String>());      }      dependenceMap.get(step.waitFor).add(step.stepId);    }    Step rb=step.generateRollbackStep();    rollbackStepMap.put(step.stepId,rb);  }  for (  Step executeStep : workflow.getStepMap().values()) {    if (executeStep.status.state == StepState.CANCELLED) {      continue;    }    Step rollbackStep=rollbackStepMap.get(executeStep.stepId);    String stepGroupKey="_rollback_" + rollbackStep.stepId;    rollbackStepGroupMap.put(stepGroupKey,new HashSet<String>());    List<String> dependentList=dependenceMap.get(executeStep.stepId);    if (dependentList != null) {      for (      String dependentId : dependentList) {        Step dependentRollbackStep=rollbackStepMap.get(dependentId);        if (dependentRollbackStep == null) {          continue;        }        rollbackStepGroupMap.get(stepGroupKey).add(dependentRollbackStep.stepId);      }    }    dependentList=dependenceMap.get(executeStep.stepGroup);    if (dependentList != null) {      for (      String dependentId : dependentList) {        Step dependentRollbackStep=rollbackStepMap.get(dependentId);        if (dependentRollbackStep == null) {          continue;        }        rollbackStepGroupMap.get(stepGroupKey).add(dependentRollbackStep.stepId);      }    }    if (false == rollbackStepGroupMap.get(stepGroupKey).isEmpty()) {      rollbackStep.waitFor=stepGroupKey;    }  }  for (  Step step : rollbackStepMap.values()) {    _log.info(String.format("Adding rollback node %s (%s) waitFor: %s",step.stepId,step.description,step.waitFor));  }  for (  String key : rollbackStepGroupMap.keySet()) {    _log.info(String.format("Adding group %s members %s",key,rollbackStepGroupMap.get(key)));  }  for (  Step rollbackStep : rollbackStepMap.values()) {    StepStatus status=new StepStatus();    status.stepId=rollbackStep.stepId;    status.state=StepState.CREATED;    status.description=rollbackStep.description;    rollbackStep.status=status;    workflow.getStepMap().put(rollbackStep.stepId,rollbackStep);    workflow.getStepStatusMap().put(rollbackStep.stepId,status);  }  workflow.getStepGroupMap().putAll(rollbackStepGroupMap);  workflow.setRollbackState(true);  workflow.setWorkflowState(WorkflowState.ROLLING_BACK);  persistWorkflow(workflow);  logWorkflow(workflow,true);  for (  Step step : rollbackStepMap.values()) {    queueWorkflowStep(workflow,step);  }  return true;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 2:{        addToken(Token.IDENTIFIER);      }case 58:    break;case 25:{    yybegin(INTAG_SCRIPT);    addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);  }case 59:break;case 54:{addToken(Token.LITERAL_BOOLEAN);}case 60:break;case 44:{addToken(Token.ERROR_CHAR);}case 61:break;case 41:{addToken(Token.ERROR_NUMBER_FORMAT);}case 62:break;case 23:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE_SCRIPT);}case 63:break;case 34:{int count=yylength();addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);zzMarkedPos-=(count - 1);yybegin(INTAG_CHECK_TAG_NAME);}case 64:break;case 14:{yybegin(YYINITIAL);addToken(Token.MARKUP_TAG_DELIMITER);}case 65:break;case 9:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 66:break;case 45:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 67:break;case 33:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JS_MLC);return firstToken;}case 68:break;case 55:{addToken(Token.FUNCTION);}case 69:break;case 39:{addToken(Token.COMMENT_EOL);addEndToken(INTERNAL_IN_JS);return firstToken;}case 70:break;case 28:{addEndToken(INTERNAL_IN_JS);return firstToken;}case 71:break;case 35:{start=zzMarkedPos - 2;yybegin(DTD);}case 72:break;case 57:{yybegin(YYINITIAL);addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - 7,zzMarkedPos - 2,Token.MARKUP_TAG_NAME);addToken(zzMarkedPos - 1,zzMarkedPos - 1,Token.MARKUP_TAG_DELIMITER);}case 73:break;case 30:{addToken(Token.ERROR_CHAR);addEndToken(INTERNAL_IN_JS);return firstToken;}case 74:break;case 18:{yypushback(1);yybegin(INTAG);}case 75:break;case 27:{addToken(Token.ERROR_IDENTIFIER);}case 76:break;case 40:{start=zzMarkedPos - 2;yybegin(JS_MLC);}case 77:break;case 21:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 78:break;case 4:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(INTAG);}case 79:break;case 10:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.VARIABLE);}case 80:break;case 47:{yybegin(JAVASCRIPT);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 81:break;case 37:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.PREPROCESSOR);}case 82:break;case 50:{addToken(Token.LITERAL_CHAR);}case 83:break;case 36:{start=zzMarkedPos - 2;yybegin(PI);}case 84:break;case 16:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE);}case 85:break;case 43:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 86:break;case 17:{yypushback(yylength());yybegin(INTAG);}case 87:break;case 24:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE_SCRIPT);}case 88:break;case 5:{addToken(Token.WHITESPACE);}case 89:break;case 6:{addToken(Token.DATA_TYPE);}case 90:break;case 19:{addToken(Token.MARKUP_TAG_NAME);}case 91:break;case 29:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 92:break;case 15:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE);}case 93:break;case 11:{addToken(Token.MARKUP_TAG_ATTRIBUTE);}case 94:break;case 20:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 95:break;case 26:{yybegin(INTAG_SCRIPT);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 96:break;case 51:{start=zzMarkedPos - 4;yybegin(COMMENT);}case 97:break;case 46:{addToken(Token.RESERVED_WORD);}case 98:break;case 56:{addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - 6,zzMarkedPos - 1,Token.MARKUP_TAG_NAME);start=zzMarkedPos;yybegin(INTAG_SCRIPT);}case 99:break;case 49:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.COMMENT_MULTILINE);}case 100:break;case 48:{int count=yylength();addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);zzMarkedPos-=(count - 2);yybegin(INTAG_CHECK_TAG_NAME);}case 101:break;case 32:{addToken(Token.SEPARATOR);}case 102:break;case 31:{addToken(Token.ERROR_STRING_DOUBLE);addEndToken(INTERNAL_IN_JS);return firstToken;}case 103:break;case 3:{addNullToken();return firstToken;}case 104:break;case 22:{yybegin(JAVASCRIPT);addToken(Token.MARKUP_TAG_DELIMITER);}case 105:break;case 38:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(YYINITIAL);}case 106:break;case 7:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 107:break;case 12:{addToken(Token.OPERATOR);}case 108:break;case 42:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 109:break;case 13:{addToken(Token.MARKUP_TAG_DELIMITER);}case 110:break;case 52:{addToken(Token.COMMENT_MULTILINE);}case 111:break;case 8:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 112:break;case 53:{addToken(Token.ERROR_STRING_DOUBLE);}case 113:break;case 1:{}case 114:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case INTAG_CHECK_TAG_NAME:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 567:break;case JS_MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JS_MLC);return firstToken;}case 568:break;case INTAG_SCRIPT:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG_SCRIPT);return firstToken;}case 569:break;case INATTR_DOUBLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT);return firstToken;}case 570:break;case INATTR_SINGLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT);return firstToken;}case 571:break;case DTD:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 572:break;case INATTR_SINGLE:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 573:break;case INATTR_DOUBLE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 574:break;case YYINITIAL:{addNullToken();return firstToken;}case 575:break;case INTAG:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 576:break;case COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 577:break;case JAVASCRIPT:{addEndToken(INTERNAL_IN_JS);return firstToken;}case 578:break;case PI:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 579:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private BasicBlock generateNullCheckBranchBlocks(AnnotatedLSTNode loop,ArrayList<Instruction> checksToEliminate,HashMap<Register,Register> optimalRegMap,BasicBlock block,BasicBlock unoptimizedLoopEntry){  HashMap<Register,Operand> refToGuardMap=new HashMap<Register,Operand>();  for (  Instruction instr : checksToEliminate) {    if (NullCheck.conforms(instr)) {      Instruction branch;      Operand ref=AnnotatedLSTNode.follow(NullCheck.getRef(instr));      RegisterOperand guardResult=NullCheck.getGuardResult(instr).copyRO();      guardResult.setRegister(optimalRegMap.get(guardResult.getRegister()));      if (ref.isRegister() && refToGuardMap.containsKey(ref.asRegister().getRegister())) {        branch=Move.create(GUARD_MOVE,guardResult,refToGuardMap.get(ref.asRegister().getRegister()).copy());        branch.setBytecodeIndex(SYNTH_LOOP_VERSIONING_BCI);        block.appendInstruction(branch);      } else {        RegisterOperand guard=nullCheckPerformedInLoopPredecessors(loop.header,instr);        if (guard != null) {          branch=Move.create(GUARD_MOVE,guardResult,guard.copyRO());          branch.setBytecodeIndex(SYNTH_LOOP_VERSIONING_BCI);          block.appendInstruction(branch);        } else {          branch=IfCmp.create(REF_IFCMP,guardResult,ref.copy(),new NullConstantOperand(),ConditionOperand.EQUAL(),unoptimizedLoopEntry.makeJumpTarget(),BranchProfileOperand.unlikely());          if (ref.isRegister()) {            refToGuardMap.put(ref.asRegister().getRegister(),guardResult);          }          branch.setBytecodeIndex(SYNTH_LOOP_VERSIONING_BCI);          block.appendInstruction(branch);          block.insertOut(unoptimizedLoopEntry);          BasicBlock new_block=block.createSubBlock(SYNTH_LOOP_VERSIONING_BCI,ir);          BasicBlock temp=(BasicBlock)block.next;          ir.cfg.breakCodeOrder(block,temp);          ir.cfg.linkInCodeOrder(block,new_block);          ir.cfg.linkInCodeOrder(new_block,temp);          block.insertOut(new_block);          block=new_block;        }      }    }  }  return block;}  }
class C{  public NotificationChain basicSetBlock(Block newBlock,NotificationChain msgs){  Block oldBlock=block;  block=newBlock;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.FACET__BLOCK,oldBlock,newBlock);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public final void deleteWithMissingClass(){  if (m_ClassIndex < 0) {    throw new UnassignedClassException("Class index is negative (not set)!");  }  deleteWithMissing(m_ClassIndex);}  }
class C{  public boolean isLeaf(){  return leaf;}  }
class C{  public RCMDoubleMatrix2D(int rows,int columns){  super(null);  setUp(rows,columns);  indexes=new IntArrayList[rows];  values=new DoubleArrayList[rows];}  }
class C{  public static String infoText(boolean showAll){  return "Type space to " + (showAll ? "hide" : "show") + " instantiated definitions";}  }
class C{  @Override protected void onPostExecute(Boolean result){  mCurrentDialog.dismiss();  mCurrentDialog=null;  if (result) {    Intent data=new Intent();    data.putExtra(EXTRA_CHOSEN_FILES,mFileListFragment.getCheckedFilePaths());    setResult(RESULT_OK,data);    finish();  } else {    String[] args={getString(R.string.app_name)};    ConfirmationDialogFragment dialog=ConfirmationDialogFragment.newInstance(R.string.upload_query_move_foreign_files,args,R.string.common_yes,-1,R.string.common_no);    dialog.setOnConfirmationListener(UploadFilesActivity.this);    dialog.show(getSupportFragmentManager(),QUERY_TO_MOVE_DIALOG_TAG);  }}  }
class C{  public static void closeWhileHandlingException(Closeable... objects){  closeWhileHandlingException(Arrays.asList(objects));}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="Pago";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addFragment(super.toString());  bdr.addSimpleElement("Entidad_Emisora_ID",entidadEmisoraId);  bdr.addSimpleElement("Autoliquidacion_ID",autoliquidacionId);  bdr.addSimpleElement("Importe",importe);  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  static void closeReader(BufferedReader in,File inputFile){  try {    in.close();  } catch (  Exception e) {    System.err.println("Can't close input file '" + inputFile + "': "+ e);    System.exit(1);  }}  }
class C{  public static BETextFieldUI createUI(JComponent c){  addOtherListener(c);  return new BETextFieldUI();}  }
class C{  public WeakIdentityHashMap(){  this.loadFactor=DEFAULT_LOAD_FACTOR;  threshold=(DEFAULT_INITIAL_CAPACITY);  @SuppressWarnings("unchecked") Entry<K,V>[] tmp=new Entry[DEFAULT_INITIAL_CAPACITY];  table=tmp;}  }
class C{  public int hashCode(){  return (int)value;}  }
class C{  public double entropyGain() throws Exception {  int numSubsets;  if (m_attribute.isNominal()) {    numSubsets=m_attribute.numValues();  } else {    numSubsets=2;  }  double[][][] splitDataZs=new double[numSubsets][][];  double[][][] splitDataWs=new double[numSubsets][][];  int[] subsetSize=new int[numSubsets];  for (int i=0; i < m_numInstances; i++) {    int subset=whichSubset(m_data.instance(i));    if (subset < 0)     throw new Exception("ResidualSplit: no support for splits on missing values");    subsetSize[subset]++;  }  for (int i=0; i < numSubsets; i++) {    splitDataZs[i]=new double[subsetSize[i]][];    splitDataWs[i]=new double[subsetSize[i]][];  }  int[] subsetCount=new int[numSubsets];  for (int i=0; i < m_numInstances; i++) {    int subset=whichSubset(m_data.instance(i));    splitDataZs[subset][subsetCount[subset]]=m_dataZs[i];    splitDataWs[subset][subsetCount[subset]]=m_dataWs[i];    subsetCount[subset]++;  }  double entropyOrig=entropy(m_dataZs,m_dataWs);  double entropySplit=0.0;  for (int i=0; i < numSubsets; i++) {    entropySplit+=entropy(splitDataZs[i],splitDataWs[i]);  }  return entropyOrig - entropySplit;}  }
class C{  public static Dialog createSimpleOkDialog(Context context,String title,String message){  return createSimpleOkDialog(context,title,message,null);}  }
class C{  public void clearPlayers(){  onlinePlayers=new PlayerList();}  }
class C{  public void addVideoFileTypes(String type){  if (!type.startsWith(".")) {    type="." + type;  }  if (!videoFileTypes.contains(type)) {    videoFileTypes.add(type);    firePropertyChange(VIDEO_FILE_TYPE,null,videoFileTypes);  }}  }
class C{  public Instances trainCV(int numFolds,int numFold){  int numInstForFold, first, offset;  Instances train;  if (numFolds < 2) {    throw new IllegalArgumentException("Number of folds must be at least 2!");  }  if (numFolds > numInstances()) {    throw new IllegalArgumentException("Can't have more folds than instances!");  }  numInstForFold=numInstances() / numFolds;  if (numFold < numInstances() % numFolds) {    numInstForFold++;    offset=numFold;  } else {    offset=numInstances() % numFolds;  }  train=new Instances(this,numInstances() - numInstForFold);  first=numFold * (numInstances() / numFolds) + offset;  copyInstances(0,train,first);  copyInstances(first + numInstForFold,train,numInstances() - first - numInstForFold);  return train;}  }
class C{  private void registerMethod(Class<?> type,Method method){  Class<?> returnType=method.getReturnType();  if (returnType == void.class || returnType == Void.class) {    registerVoidMethod(type,method);  } else {    registerValueMethod(type,method);  }}  }
class C{  private boolean storeTweetUni(String tweetString,String senti,String tweetID) throws UnsupportedEncodingException {  Tweet tweet=new Tweet(tweetString,senti,tweetID);  if (this.tweetList.add(tweet)) {    return true;  } else {    return false;  }}  }
class C{  public ConfigureStringList_NB(){  initComponents();  this.validator=new DefaultValidator();  jButtonStateController=new JButtonStateController(addBtn);  Document document=addTextField.getDocument();  document.addDocumentListener(jButtonStateController);}  }
class C{  public void connect(File file) throws IOException, InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException {  FileInputStream in=new FileInputStream(file);  Properties properties=new Properties();  properties.load(in);  Class.forName(properties.getProperty("driver")).newInstance();  connection=DriverManager.getConnection(properties.getProperty("url"),properties.getProperty("userName"),properties.getProperty("password"));}  }
class C{  public Object read(Reader reader) throws Exception {  return fromXML(m_Document.read(reader));}  }
class C{  public void addUserComments(String comments){  _userComments=comments;}  }
class C{  public static void main(String[] args){  JobClient client=new JobClient();  JobConf conf=new JobConf(LineIndexer.class);  conf.setJobName("LineIndexer");  conf.setOutputKeyClass(Text.class);  conf.setOutputValueClass(Text.class);  FileInputFormat.addInputPath(conf,new Path("input"));  FileOutputFormat.setOutputPath(conf,new Path("output"));  conf.setMapperClass(LineIndexMapper.class);  conf.setReducerClass(LineIndexReducer.class);  client.setConf(conf);  try {    JobClient.runJob(conf);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void testGetTo(){  assertEquals("wrong 'to' value",TO,range.getTo());}  }
class C{  public WishartDistribution(double df,double[][] scaleMatrix){  this.df=df;  this.scaleMatrix=scaleMatrix;  this.dim=scaleMatrix.length;  SinvMat=new Matrix(scaleMatrix).inverse();  double[][] tmp=SinvMat.toComponents();  Sinv=new double[dim * dim];  for (int i=0; i < dim; i++) {    System.arraycopy(tmp[i],0,Sinv,i * dim,dim);  }  computeNormalizationConstant();}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  private int threshold(){  return (int)(table.length * DEFAULT_LOAD_FACTOR);}  }
class C{  public boolean close(boolean done){  try {    if (binFile != null) {      binFile.close();      binFile=null;    }    return true;  } catch (  IOException e) {    Debug.error("DTEDFrame close(): File IO Error!\n" + e.toString());    return false;  }}  }
class C{  public static long tryParseDate(long time,String date,DateFormat format){  if (TextUtils.isEmpty(date)) {    time=UNKNOWN_DATE;  } else {    if (time == UNPARSED_DATE) {      try {        time=format.parse(date).getTime();      } catch (      ParseException e) {        time=UNKNOWN_DATE;      }    }  }  return time;}  }
class C{  public static String formatDate(Date date){  DateFormat dateFormat=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.MEDIUM);  if (dateFormat instanceof SimpleDateFormat) {    SimpleDateFormat sdf=(SimpleDateFormat)dateFormat;    sdf.applyPattern(sdf.toPattern().replaceAll("y+","yyyy").concat(" z"));  }  return dateFormat.format(date);}  }
class C{  private void writeCreateRequest(final int type,final int size) throws DeviceDisconnectedException, DfuException, UploadAbortedException, RemoteDfuException, UnknownResponseException {  if (!mConnected)   throw new DeviceDisconnectedException("Unable to create object: device disconnected");  final byte[] data=(type == OBJECT_COMMAND) ? OP_CODE_CREATE_COMMAND : OP_CODE_CREATE_DATA;  setObjectSize(data,size);  writeOpCode(mControlPointCharacteristic,data);  final byte[] response=readNotificationResponse();  final int status=getStatusCode(response,OP_CODE_CREATE_KEY);  if (status != DFU_STATUS_SUCCESS)   throw new RemoteDfuException("Creating Command object failed",status);}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  private static Tuple2<String,Integer> readNormalizeCharAt(String line,int offset){  Tuple3<String,List<String>,Integer> result=readLetterAndNormalDiacriticsAt(line,offset);  String c=result._1 + StringHelper.join(result._2);  int length=result._3;  return Tuple2(c,length);}  }
class C{  private void updateStyle(JTabbedPane c){  SeaGlassContext context=getContext(c,ENABLED);  SynthStyle oldStyle=style;  style=SeaGlassLookAndFeel.updateStyle(context,this);  tabPlacement=tabPane.getTabPlacement();  orientation=ControlOrientation.getOrientation(tabPlacement == LEFT || tabPlacement == RIGHT ? VERTICAL : HORIZONTAL);  closeButtonArmedIndex=-1;  Object o=c.getClientProperty("JTabbedPane.closeButton");  if (o != null && "left".equals(o)) {    tabCloseButtonPlacement=LEFT;  } else   if (o != null && "right".equals(o)) {    tabCloseButtonPlacement=RIGHT;  } else {    tabCloseButtonPlacement=CENTER;  }  closeButtonSize=style.getInt(context,"closeButtonSize",6);  closeButtonInsets=(Insets)style.get(context,"closeButtonInsets");  if (closeButtonInsets == null) {    closeButtonInsets=new Insets(2,2,2,2);  }  o=c.getClientProperty("JTabbedPane.closeListener");  if (o != null && o instanceof SeaGlassTabCloseListener) {    if (tabCloseListener == null) {      tabCloseListener=(SeaGlassTabCloseListener)o;    }  }  if (style != oldStyle) {    tabRunOverlay=0;    textIconGap=style.getInt(context,"TabbedPane.textIconGap",0);    selectedTabPadInsets=(Insets)style.get(context,"TabbedPane.selectedTabPadInsets");    if (selectedTabPadInsets == null) {      selectedTabPadInsets=new Insets(0,0,0,0);    }    if (oldStyle != null) {      uninstallKeyboardActions();      installKeyboardActions();    }  }  context.dispose();  if (tabContext != null) {    tabContext.dispose();  }  tabContext=getContext(c,Region.TABBED_PANE_TAB,ENABLED);  this.tabStyle=SeaGlassLookAndFeel.updateStyle(tabContext,this);  tabInsets=tabStyle.getInsets(tabContext,null);  if (tabCloseContext != null) {    tabCloseContext.dispose();  }  tabCloseContext=getContext(c,SeaGlassRegion.TABBED_PANE_TAB_CLOSE_BUTTON,ENABLED);  this.tabCloseStyle=SeaGlassLookAndFeel.updateStyle(tabCloseContext,this);  if (tabAreaContext != null) {    tabAreaContext.dispose();  }  tabAreaContext=getContext(c,Region.TABBED_PANE_TAB_AREA,ENABLED);  this.tabAreaStyle=SeaGlassLookAndFeel.updateStyle(tabAreaContext,this);  tabAreaInsets=tabAreaStyle.getInsets(tabAreaContext,null);  if (tabContentContext != null) {    tabContentContext.dispose();  }  tabContentContext=getContext(c,Region.TABBED_PANE_CONTENT,ENABLED);  this.tabContentStyle=SeaGlassLookAndFeel.updateStyle(tabContentContext,this);  contentBorderInsets=tabContentStyle.getInsets(tabContentContext,null);}  }
class C{  public static boolean isPreference(String where,String key){  SharedPreferences prefs=mContext.getSharedPreferences(where,Context.MODE_PRIVATE);  if (prefs.contains(key))   return true;  return false;}  }
class C{  public FontSizeAction(String nm,int size){  super(nm);  this.size=size;}  }
class C{  public int nextInt(){  return (int)generateZeta(ro,pk,randomGenerator);}  }
class C{  public static java.awt.Font toAwtFont(final Device device,final Font font){  final FontData fontData=font.getFontData()[0];  return toAwtFont(device,fontData,true);}  }
class C{  public CRLReasonCodeExtension(int reason) throws IOException {  this(false,reason);}  }
class C{  @DSSink({DSSinkKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:38.172 -0500",hash_original_method="71F49E0E0C93DA66D27CAD14CA0014CE",hash_generated_method="B3A9CD05CC2F14B6D5F7C24F5DF8CD8A") public void updateAdnBySearch(int efid,AdnRecord oldAdn,AdnRecord newAdn,String pin2,Message response){  int extensionEF;  extensionEF=extensionEfForEf(efid);  if (extensionEF < 0) {    sendErrorResponse(response,"EF is not known ADN-like EF:" + efid);    return;  }  ArrayList<AdnRecord> oldAdnList;  if (efid == EF_PBR) {    oldAdnList=mUsimPhoneBookManager.loadEfFilesFromUsim();  } else {    oldAdnList=getRecordsIfLoaded(efid);  }  if (oldAdnList == null) {    sendErrorResponse(response,"Adn list not exist for EF:" + efid);    return;  }  int index=-1;  int count=1;  for (Iterator<AdnRecord> it=oldAdnList.iterator(); it.hasNext(); ) {    if (oldAdn.isEqual(it.next())) {      index=count;      break;    }    count++;  }  if (index == -1) {    sendErrorResponse(response,"Adn record don't exist for " + oldAdn);    return;  }  if (efid == EF_PBR) {    AdnRecord foundAdn=oldAdnList.get(index - 1);    efid=foundAdn.efid;    extensionEF=foundAdn.extRecord;    index=foundAdn.recordNumber;    newAdn.efid=efid;    newAdn.extRecord=extensionEF;    newAdn.recordNumber=index;  }  Message pendingResponse=userWriteResponse.get(efid);  if (pendingResponse != null) {    sendErrorResponse(response,"Have pending update for EF:" + efid);    return;  }  userWriteResponse.put(efid,response);  new AdnRecordLoader(phone).updateEF(newAdn,efid,extensionEF,index,pin2,obtainMessage(EVENT_UPDATE_ADN_DONE,efid,index,newAdn));}  }
class C{  @SuppressWarnings({"cast","unchecked"}) private boolean buildSearchIndexForPlaces(){  Index index=PlacesHelper.getIndex();  removeAllDocumentsFromIndex();  List<Place> places=ofy().load().type(Place.class).list();  try {    for (    Place place : places) {      Document placeAsDocument=PlacesHelper.buildDocument(place.getPlaceId(),place.getName(),place.getAddress(),place.getLocation());      try {        index.put(placeAsDocument);      } catch (      PutException e) {        if (StatusCode.TRANSIENT_ERROR.equals(e.getOperationResult().getCode())) {          return false;        }      }    }  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  public CoapResponse put(String payload,int format){  return synchronous(format(newPut().setURI(uri).setPayload(payload),format));}  }
class C{  void extras(){}  }
class C{  protected boolean isRenderNullValues(){  return true;}  }
class C{  public DatasetContainer(DataSet dataset){  this(dataset,false,0);}  }
class C{  static String toHumanString(Value value){  return toHumanString(value == null ? null : value.get());}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  public Mention(PhraseChunk annotation){  this(annotation,MentionType.NP);}  }
class C{  public PackingPlan repack(PackingPlan currentPackingPlan,Map<String,Integer> componentChanges){  Map<Integer,List<InstanceId>> ffdAllocation=getFFDAllocation(currentPackingPlan,componentChanges);  Map<String,Long> ramMap=TopologyUtils.getComponentRamMapConfig(topology);  Set<PackingPlan.ContainerPlan> containerPlans=PackingUtils.buildContainerPlans(ffdAllocation,ramMap,defaultInstanceResources,paddingPercentage);  return new PackingPlan(topology.getId(),containerPlans);}  }
class C{  public void popLimit(final int oldLimit){  currentLimit=oldLimit;  recomputeBufferSizeAfterLimit();}  }
class C{  final boolean cannotPrecede(boolean haveData){  boolean d=isData;  Object x;  return d != haveData && (x=item) != this && (x != null) == d;}  }
class C{  @Override public void closeHelper(){  if (iapHelper != null) {    iapHelper.closeHelper();  }}  }
class C{  public String[] readAllStrings(){  String[] tokens=WHITESPACE_PATTERN.split(readAll());  if (tokens.length == 0 || tokens[0].length() > 0)   return tokens;  String[] decapitokens=new String[tokens.length - 1];  for (int i=0; i < tokens.length - 1; i++)   decapitokens[i]=tokens[i + 1];  return decapitokens;}  }
class C{  public String toString(){  return getStateAsXml();}  }
class C{  public void addListener(final IBreakpointManagerListener listener){  listeners.addListener(listener);}  }
class C{  public boolean isEmpty(){  processQueue();  return hash.isEmpty();}  }
class C{  public Integer size(String queue_name){  Integer queue_size=null;  if (has_queue(queue_name)) {    LinkedList queue=queue_map.get(queue_name);    queue_size=queue.size();  }  return queue_size;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.196 -0500",hash_original_method="ADA47703EEBAAF081A921E3B439FC136",hash_generated_method="A5B59A910014976676BF2030660D4E57") public Region(Region region){}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  public static PathPoint curveTo(float c0X,float c0Y,float c1X,float c1Y,float x,float y){  return new PathPoint(c0X,c0Y,c1X,c1Y,x,y);}  }
class C{  @DottedClassName @SuppressFBWarnings("TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK") public static String toDottedClassName(@SlashedClassName(when=When.UNKNOWN) String className){  if (className.indexOf('/') >= 0) {    return DescriptorFactory.canonicalizeString(className.replace('/','.'));  }  return className;}  }
class C{  public boolean isOptionChecked(int index){  if (index >= checkboxPanel.getComponents().length) {    return false;  }  JCheckBox checkbox=(JCheckBox)checkboxPanel.getComponent(index);  if (checkbox.isSelected()) {    return true;  } else {    return false;  }}  }
class C{  protected int read(SpeechRecord recorder,byte[] buffer){  int len=buffer.length;  int numOfBytes=recorder.read(buffer,0,len);  int status=getStatus(numOfBytes,len);  if (status == 0) {    System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes);    mRecordedLength+=len;  }  return status;}  }
class C{  public void doneButtonActionPerformed(){  if (editMode) {    editMode=false;    curNode=null;    addButton.setVisible(true);    editButton.setVisible(true);    deleteButton.setVisible(true);    doneButton.setVisible(true);    updateButton.setVisible(false);    cancelButton.setVisible(false);    nodeAddrField.setVisible(true);    nodeAddrStatic.setVisible(false);  }  if (changedNode) {    javax.swing.JOptionPane.showMessageDialog(this,rb.getString("Reminder1") + "\n" + rb.getString("Reminder2"),rb.getString("ReminderTitle"),javax.swing.JOptionPane.INFORMATION_MESSAGE);  }  setVisible(false);  dispose();}  }
class C{  protected Expression lte(int opPos) throws TransformerException {  return compileOperation(new Lte(),opPos);}  }
class C{  public void deleteMin(){  if (isEmpty())   throw new NoSuchElementException("called deleteMin() with empty symbol table");  root=deleteMin(root);  assert check();}  }
class C{  private void writeName(String uri,String localName,String qName,boolean isElement) throws SAXException {  String prefix=doPrefix(uri,qName,isElement);  if (prefix != null && !"".equals(prefix)) {    write(prefix);    write(':');  }  if (localName != null && !"".equals(localName)) {    write(localName);  } else {    int i=qName.indexOf(':');    write(qName.substring(i + 1,qName.length()));  }}  }
class C{  public String addSession(Connection conn) throws SQLException {  WebSession session=createNewSession("local");  session.setShutdownServerOnDisconnect();  session.setConnection(conn);  session.put("url",conn.getMetaData().getURL());  String s=(String)session.get("sessionId");  return url + "/frame.jsp?jsessionid=" + s;}  }
class C{  public void testResourceAddition(){  int numResources=100;  AbsentResourceList list=new AbsentResourceList(numResources,2);  this.addResources(list,numResources);  this.testResourcesAbsent(list,numResources);}  }
class C{  public Vset check(Environment env,Context ctx,Vset vset) throws ClassNotFound {  return vset;}  }
class C{  public String nameTipText(){  return "Set the name of the new attribute.";}  }
class C{  void initComponentImpl(){  if (!initialized) {    initialized=true;    UIManager manager=getUIManager();    Style stl=getStyle();    lockStyleImages(stl);    manager.getLookAndFeel().bind(this);    checkAnimation();    if (isRTL() && isScrollableX()) {      setScrollX(getScrollDimension().getWidth() - getWidth());    }    initComponent();  }}  }
class C{  public static SourceLineAnnotation forEntireMethod(JavaClass javaClass,@CheckForNull Method method){  String sourceFile=javaClass.getSourceFileName();  if (method == null) {    return createUnknown(javaClass.getClassName(),sourceFile);  }  Code code=method.getCode();  LineNumberTable lineNumberTable=method.getLineNumberTable();  if (code == null || lineNumberTable == null) {    return createUnknown(javaClass.getClassName(),sourceFile);  }  return forEntireMethod(javaClass.getClassName(),sourceFile,lineNumberTable,code.getLength());}  }
class C{  public static void createWorkerDialog(final Task<?> readAndProcess){  final Alert dialog=new Alert(AlertType.INFORMATION);  dialog.setTitle(readAndProcess.getTitle());  dialog.setHeaderText(null);  final ButtonType bgButtonType=new ButtonType("Run in background",ButtonData.APPLY);  dialog.getButtonTypes().setAll(ButtonType.CANCEL,bgButtonType);  final Label progressMessage=new Label();  progressMessage.textProperty().bind(readAndProcess.messageProperty());  dialog.setResultConverter(null);  final WorkerProgressPane content=new WorkerProgressPane(dialog);  content.setMaxWidth(Double.MAX_VALUE);  VBox vbox=new VBox(10,progressMessage,content);  vbox.setMaxWidth(Double.MAX_VALUE);  vbox.setPrefSize(400,80);  dialog.getDialogPane().setContent(vbox);  content.setWorker(readAndProcess);}  }
class C{  public boolean isWriteable(){  return false;}  }
class C{  public InputStream createInInputStream(InputStream is){  return new InstrumentedInputStream(collector(),Direction.In,is);}  }
class C{  public static void touch(File file) throws IOException {  checkNotNull(file);  if (!file.createNewFile() && !file.setLastModified(System.currentTimeMillis())) {    throw new IOException("Unable to update modification time of " + file);  }}  }
class C{  public int missingNumber3(int[] nums){  int xor=0;  for (int i=0; i < nums.length; i++) {    xor=xor ^ nums[i] ^ (i + 1);  }  return xor;}  }
class C{  public void notifyListeners(MarkerChangeEvent event){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MarkerChangeListener.class) {      ((MarkerChangeListener)listeners[i + 1]).markerChanged(event);    }  }}  }
class C{  protected void auditDisasterRecoveryOps(OperationTypeEnum auditType,String operationalStatus,String operationStage,Object... descparams){  auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,operationStage,descparams);}  }
class C{  private void scheduleKeepAlive(){  if (keepAlive != null)   keepAlive.cancel();  keepAlive=context.schedule(interval,null);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static Map<String,Object> removeRoleType(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=new HashMap<String,Object>();  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  String partyId=(String)context.get("partyId");  String roleTypeId=(String)context.get("roleTypeId");  GenericValue testValue=null;  try {    testValue=EntityQuery.use(delegator).from("OrderRole").where("orderId",orderId,"partyId",partyId,"roleTypeId",roleTypeId).queryOne();  } catch (  GenericEntityException e) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not add role to order (" + e.getMessage() + ").");    return result;  }  if (testValue == null) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    return result;  }  try {    GenericValue value=EntityQuery.use(delegator).from("OrderRole").where("orderId",orderId,"partyId",partyId,"roleTypeId",roleTypeId).queryOne();    value.remove();  } catch (  GenericEntityException e) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not remove role from order (" + e.getMessage() + ").");    return result;  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public static boolean conditionalRead(PsiBuilder builder,IElementType token){  if (builder.getTokenType() == token) {    builder.advanceLexer();    return true;  }  return false;}  }
class C{  public static ImageSource bitmap(Bitmap bitmap){  if (bitmap == null) {    throw new NullPointerException("Bitmap must not be null");  }  return new ImageSource(bitmap);}  }
class C{  protected void configAlpha(Parameterization config){  final DoubleParameter param=new DoubleParameter(ALPHA_ID,0.5);  if (config.grab(param)) {    alpha=param.getValue();  }}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  protected String readDelimiter(boolean returnString) throws IOException, ArrayIndexOutOfBoundsException {  String ret=END_TOTAL;  char END_TOTAL_CHAR=END_TOTAL.charAt(0);  char END_SECTION_CHAR=END_SECTION.charAt(0);  char c=(char)dis.readByte();  if (c == END_TOTAL_CHAR) {    Debug.message("link","Link|readDelimiter: Found END_TOTAL");    return END_TOTAL;  } else   if (c == END_SECTION_CHAR) {    Debug.message("link","Link|readDelimiter: Found END_SECTION");    return END_SECTION;  } else   if (c != '<') {    if (Debug.debugging("link")) {      System.out.println("Link|readDelimiter: unexpected protocol data read '" + c + "'");    }    throw new IOException("readDelimiter: unexpected protocol data read.");  }  int charCount=0;  charArray[charCount++]=c;  c=(char)dis.readByte();  while (c != '>' && charCount < MAX_HEADER_LENGTH - 1) {    charArray[charCount++]=c;    c=(char)dis.readByte();  }  if (c != '>') {    throw new IOException("readDelimiter: header is too long.");  }  charArray[charCount++]=c;  if (returnString) {    ret=new String(charArray,0,charCount).intern();  } else {    ret="";  }  return ret;}  }
class C{  DocumentInfo(String url,int type){  setUrl(url);  expectedContentType=type;}  }
class C{  public Define(String functionName,Class<?> returnType){  this(functionName,returnType,new String[0],new Class<?>[0]);}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public void reverse(int from,int to){  if (from == to) {    return;  }  if (from > to) {    throw new IllegalArgumentException("from cannot be greater than to");  }  for (int i=from, j=to - 1; i < j; i++, j--) {    swap(i,j);  }}  }
class C{  @Override protected Object doTask() throws Exception {  final MetadataIndex ndx;  try {    ndx=(MetadataIndex)getIndex(getOnlyResource());  } catch (  ClassCastException ex) {    throw new UnsupportedOperationException("Not a scale-out index?",ex);  }  final String name=ndx.getScaleOutIndexMetadata().getName();  if (log.isInfoEnabled())   log.info("Will drop index partitions for " + name);  final ITupleIterator itr=ndx.rangeIterator(null,null,0,IRangeQuery.VALS,null);  int ndropped=0;  while (itr.hasNext()) {    final ITuple tuple=itr.next();    final PartitionLocator pmd=(PartitionLocator)SerializerUtil.deserialize(tuple.getValue());{      final int partitionId=pmd.getPartitionId();      final UUID serviceUUID=pmd.getDataServiceUUID();      final IDataService dataService=fed.getDataService(serviceUUID);      if (log.isInfoEnabled())       log.info("Dropping index partition: partitionId=" + partitionId + ", dataService="+ dataService);      dataService.dropIndex(DataService.getIndexPartitionName(name,partitionId));    }    ndropped++;  }  if (log.isInfoEnabled())   log.info("Dropped " + ndropped + " index partitions for "+ name);  getJournal().dropIndex(getOnlyResource());  return ndropped;}  }
class C{  public static boolean areConditionsMet(final List<ICondition> rulesToTest,final HashMap<ICondition,Boolean> testedConditions,final String conditionType){  boolean met=false;  if (conditionType.equals("AND")) {    for (    final ICondition c : rulesToTest) {      met=testedConditions.get(c);      if (!met) {        break;      }    }  } else   if (conditionType.equals("OR")) {    for (    final ICondition c : rulesToTest) {      met=testedConditions.get(c);      if (met) {        break;      }    }  } else {    final String[] nums=conditionType.split("-");    if (nums.length == 1) {      final int start=Integer.parseInt(nums[0]);      int count=0;      for (      final ICondition c : rulesToTest) {        met=testedConditions.get(c);        if (met) {          count++;        }      }      met=(count == start);    } else     if (nums.length == 2) {      final int start=Integer.parseInt(nums[0]);      final int end=Integer.parseInt(nums[1]);      int count=0;      for (      final ICondition c : rulesToTest) {        met=testedConditions.get(c);        if (met) {          count++;        }      }      met=(count >= start && count <= end);    }  }  return met;}  }
class C{  static public Database createDatabase(String url,String user,String password,boolean privileged) throws SQLException {  return createDatabase(url,user,password,privileged,null);}  }
class C{  public void upDateCounter(Instance instance){  if (containedBy(instance)) {    m_counter++;  }}  }
class C{  public void skip(){  client.put(String.class,SETUP_SKIP_URL);}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public static boolean isReadOverrideException(Throwable t){  if (isShardNotAvailableException(t)) {    return false;  }  return true;}  }
class C{  PollTcpManagerBase pollManager(){  return _pollManager;}  }
class C{  public static int compute2(int x){  int loops=(x >>> 4) & 7;  while (loops-- > 0) {    x=(x * 2147483647) % 16807;  }  return x;}  }
class C{  public void append(int id){  grow(length);  blockIdList[length]=id;  ++length;  invalidate();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public UpnpDevice(){}  }
class C{  public static String convertToHexString(byte[] bytes){  int size=bytes.length;  StringBuffer buffer=new StringBuffer(size * 2);  for (int i=0; i < size; i++) {    int x=bytes[i];    if (x < 0)     x+=256;    String tmp=Integer.toHexString(x);    if (tmp.length() == 1)     buffer.append("0");    buffer.append(tmp);  }  return buffer.toString();}  }
class C{  private static void add(Map<String,List<Object>> map,String key,Object value){  List<Object> values=map.get(key);  if (values == null) {    map.put(key,values=new ArrayList<Object>(2));  }  values.add(value);}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  public ProtocolCodecException(){}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static void validate(File file) throws IOException {  validate(file,computeDigest(file));}  }
class C{  public boolean isReadWrite(){  return super.isEditable();}  }
class C{  public long nowInMillis(){  return nowInMillis;}  }
class C{  private void process(final int session){  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getActivity());  final boolean anonymousUpload=PreferenceManager.getDefaultSharedPreferences(getActivity()).getBoolean(Preferences.KEY_ANONYMOUS_UPLOAD,false);  String user=null;  String password=null;  if (!anonymousUpload) {    user=PreferenceManager.getDefaultSharedPreferences(getActivity()).getString(Preferences.KEY_CREDENTIALS_USER,null);    password=PreferenceManager.getDefaultSharedPreferences(getActivity()).getString(Preferences.KEY_CREDENTIALS_PASSWORD,null);  }  final String targetPath=getActivity().getExternalFilesDir(null).getAbsolutePath() + File.separator;  final boolean skipUpload=PreferenceManager.getDefaultSharedPreferences(getActivity()).getBoolean(Preferences.KEY_SKIP_UPLOAD,Preferences.VAL_SKIP_UPLOAD);  final boolean skipDelete=PreferenceManager.getDefaultSharedPreferences(getActivity()).getBoolean(Preferences.KEY_KEEP_XML,Preferences.VAL_KEEP_XML);  final boolean anonymiseSsid=prefs.getBoolean(Preferences.KEY_ANONYMISE_SSID,Preferences.VAL_ANONYMISE_SSID);  final boolean saveGpx=prefs.getBoolean(Preferences.KEY_SAVE_GPX,Preferences.VAL_SAVE_GPX);  mExportDataTask=new ExportSessionTask(getActivity(),this,session,targetPath,user,password,anonymousUpload);  mExportDataTask.setExportCells(true);  mExportDataTask.setExportWifis(true);  mExportDataTask.setAnonymiseSsid(anonymiseSsid);  mExportDataTask.setSaveGpx(saveGpx);  mExportDataTask.setUpdateWifiCatalog(false);  mExportDataTask.setSkipUpload(skipUpload);  mExportDataTask.setKeepXml(skipDelete);  mExportDataTask.execute((Void[])null);}  }
class C{  public ScopedClassPool create(ClassLoader cl,ClassPool src,ScopedClassPoolRepository repository){  return new ScopedClassPool(cl,src,repository,false);}  }
class C{  public void emitDirect(int taskId,List<Object> tuple){  emitDirect(taskId,Utils.DEFAULT_STREAM_ID,tuple);}  }
class C{  protected String identifier(AST node){  assertNodeType(IDENT,node);  return node.getText();}  }
class C{  public Bitmap toBitmap(){  if (size == -1) {    this.actionBarSize();  }  final Bitmap bitmap=Bitmap.createBitmap(this.getIntrinsicWidth(),this.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);  this.setStyle(Paint.Style.FILL);  final Canvas canvas=new Canvas(bitmap);  this.setBounds(0,0,canvas.getWidth(),canvas.getHeight());  this.draw(canvas);  return bitmap;}  }
class C{  public static <E extends Comparable<E>>void recursiveQuickSort(InplaceList<E> array,int startIdx,int endIdx){  int idx=partition(array,startIdx,endIdx);  if (startIdx < idx - 1) {    recursiveQuickSort(array,startIdx,idx - 1);  }  if (endIdx > idx) {    recursiveQuickSort(array,idx,endIdx);  }}  }
class C{  public PTMatsimState(final Population population,final Vector vectorRepresentation,final Scenario scenario,final PTSchedule ptscehedule){  super(population,vectorRepresentation);  this.scenario=scenario;  ScenarioHelper helper=new ScenarioHelper();  this.schedule=helper.deepCopyTransitSchedule(ptscehedule.getPreSchedule());  this.vehicles=helper.deepCopyVehicles(ptscehedule.getPreVehicles());}  }
class C{  private void handleMulti(@NonNull String[] permissionNames){  List<String> permissions=declinedPermissionsAsList(context,permissionNames);  if (permissions.isEmpty()) {    permissionCallback.onPermissionGranted(permissionNames);    return;  }  boolean hasAlertWindowPermission=permissions.contains(Manifest.permission.SYSTEM_ALERT_WINDOW);  if (hasAlertWindowPermission) {    int index=permissions.indexOf(Manifest.permission.SYSTEM_ALERT_WINDOW);    permissions.remove(index);  }  ActivityCompat.requestPermissions(context,permissions.toArray(new String[permissions.size()]),REQUEST_PERMISSIONS);}  }
class C{  public CertificateToken generateTspCertificate(final SignatureAlgorithm algorithm,KeyPair keyPair,X500Name issuer,X500Name subject,final Date notBefore,final Date notAfter) throws CertIOException, OperatorCreationException, CertificateException, IOException {  final SubjectPublicKeyInfo keyInfo=SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded());  final X509v3CertificateBuilder certBuilder=new X509v3CertificateBuilder(issuer,new BigInteger("" + new Random().nextInt(10) + System.currentTimeMillis()),notBefore,notAfter,subject,keyInfo);  certBuilder.addExtension(Extension.extendedKeyUsage,true,new ExtendedKeyUsage(KeyPurposeId.id_kp_timeStamping));  final ContentSigner signer=new JcaContentSignerBuilder(algorithm.getJCEId()).setProvider(BouncyCastleProvider.PROVIDER_NAME).build(keyPair.getPrivate());  final X509CertificateHolder holder=certBuilder.build(signer);  final X509Certificate cert=(X509Certificate)CertificateFactory.getInstance("X509").generateCertificate(new ByteArrayInputStream(holder.getEncoded()));  return new CertificateToken(cert);}  }
class C{  public boolean isHttpEnabled(){  ProxyPreference preference=getProxyDao().get(ProxyKey.HTTP_ENABLED);  if ((preference == null) || StringUtils.isEmpty(preference.getValue())) {    return false;  } else {    return Boolean.valueOf(preference.getValue()).booleanValue();  }}  }
class C{  private int updateWorkingSet(StructuredInstanceWithAlphas[] alphaInsList,WeightVector wv,AbstractInferenceSolver infSolver,SLParameters parameters) throws Exception {  int numNewStructures=0;  for (int i=0; i < alphaInsList.length; i++) {    float score=alphaInsList[i].updateRepresentationCollection(wv,infSolver,parameters);    alphaInsList[i].solveSubProblemAndUpdateW(null,wv);    if (score > parameters.STOP_CONDITION)     numNewStructures+=1;  }  return numNewStructures;}  }
class C{  private void disconnect() throws MqttException {  if (sampleClientSub != null) {    Disconnector disc=sampleClientSub.new Disconnector();    disc.doDisconnect();    sampleClientSub=null;  }}  }
class C{  private List<VOServiceActivation> createServiceActivations(VOTechnicalService techProduct,VOMarketplace marketplace,int count) throws Exception {  List<VOServiceActivation> list=new ArrayList<VOServiceActivation>();  String marketplaceId="null";  if (marketplace != null) {    marketplaceId=marketplace.getMarketplaceId();  }  for (int i=0; i < count; i++) {    VOServiceDetails product=createProduct(techProduct,"product_" + marketplaceId + "_"+ techProduct.getTechnicalServiceId()+ "_"+ i,svcProv);    VOCatalogEntry entry=new VOCatalogEntry();    entry.setMarketplace(marketplace);    List<VOCatalogEntry> entries=new ArrayList<VOCatalogEntry>();    entries.add(entry);    product=mpProv.publishService(product,entries);    VOPriceModel priceModel1=createPriceModel();    product=svcProv.savePriceModel(product,priceModel1);    VOServiceActivation activation=new VOServiceActivation();    activation.setActive(false);    activation.setService(product);    activation.setCatalogEntries(entries);    list.add(activation);  }  return list;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Type.class) {switch (baseOperationID) {case TypesPackage.TYPE___IS_PROVIDED_BY_RUNTIME:      return TypesPackage.TN4_CLASSIFIER___IS_PROVIDED_BY_RUNTIME;case TypesPackage.TYPE___GET_TYPE_ACCESS_MODIFIER:    return TypesPackage.TN4_CLASSIFIER___GET_TYPE_ACCESS_MODIFIER;default :  return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == AccessibleTypeElement.class) {switch (baseOperationID) {case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___IS_PROVIDED_BY_RUNTIME:return TypesPackage.TN4_CLASSIFIER___IS_PROVIDED_BY_RUNTIME;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___GET_TYPE_ACCESS_MODIFIER:return TypesPackage.TN4_CLASSIFIER___GET_TYPE_ACCESS_MODIFIER;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___IS_EXPORTED:return TypesPackage.TN4_CLASSIFIER___IS_EXPORTED;default :return -1;}}if (baseClass == DeclaredTypeWithAccessModifier.class) {switch (baseOperationID) {default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public static Network readNetwork(String path2Network){  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new MatsimNetworkReader(scenario.getNetwork()).readFile(path2Network);  return scenario.getNetwork();}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  int avail=buf.length - pos;  if (avail > 0) {    if (len < avail) {      avail=len;    }    System.arraycopy(buf,pos,b,off,avail);    pos+=avail;    off+=avail;    len-=avail;  }  if (len > 0) {    len=super.read(b,off,len);    if (len == -1) {      return avail == 0 ? -1 : avail;    }    return avail + len;  }  return avail;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasAuthConfig[");  buffer.append(", m_maxNumTries = ").append(m_maxNumTries);  buffer.append(", m_userSearchByDn = ").append(m_userSearchByDn);  buffer.append(", m_userAttrName = ").append(m_userAttrName);  buffer.append(", m_userStart = ").append(m_userStart);  buffer.append(", m_userScope = ").append(m_userScope);  buffer.append(", m_groupStart = ").append(m_groupStart);  buffer.append(", m_groupScope = ").append(m_groupScope);  buffer.append("]");  return buffer.toString();}  }
class C{  public Uri buildRequestUri(int track,int chunkIndex){  Assertions.checkState(tracks != null);  Assertions.checkState(chunkStartTimes != null);  Assertions.checkState(chunkIndex < chunkStartTimes.size());  String chunkUrl=chunkTemplate.replace(URL_PLACEHOLDER_BITRATE,Integer.toString(tracks[track].format.bitrate)).replace(URL_PLACEHOLDER_START_TIME,chunkStartTimes.get(chunkIndex).toString());  return UriUtil.resolveToUri(baseUri,chunkUrl);}  }
class C{  public void reportGpsGeofenceTransition(int geofenceId,int flags,double latitude,double longitude,double altitude,float speed,float bearing,float accuracy,long timestamp,int transition,long transitionTimestamp){  if (DEBUG)   Log.d(TAG,"GeofenceTransition: Flags: " + flags + " Lat: "+ latitude+ " Long: "+ longitude+ " Altitude: "+ altitude+ " Speed: "+ speed+ " Bearing: "+ bearing+ " Accuracy: "+ accuracy+ " Timestamp: "+ timestamp+ " Transition: "+ transition+ " TransitionTimestamp: "+ transitionTimestamp);  Location location=getLocation(flags,latitude,longitude,altitude,speed,bearing,accuracy,timestamp);  GeofenceTransition t=new GeofenceTransition(geofenceId,transition,timestamp,location);  acquireWakeLock();  Message m=mGeofenceHandler.obtainMessage(GEOFENCE_TRANSITION_CALLBACK,t);  mGeofenceHandler.sendMessage(m);}  }
class C{  public Problem(String subject){  super();  this.subject=subject;}  }
class C{  @Override protected void finalize() throws Throwable {  sender=null;  super.finalize();}  }
class C{  public boolean isSitting(){  return isSitting;}  }
class C{  private GridUriDeploymentFileProcessor(){}  }
class C{  public ClassPath(String pathstr){  init(pathstr);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.047 -0500",hash_original_method="E8BFBC0989CB1303890EF6ABB82F2DCB",hash_generated_method="1D544F275B4EBCF75E4514D548A5000B") private void clearNativeLoader(){  sNativeLoaderCount-=1;  mNativeLoader=0;  mSetNativeResponse=false;}  }
class C{  public static void point(double x,double y){  double xs=scaleX(x);  double ys=scaleY(y);  double r=penRadius;  float scaledPenRadius=(float)(r * DEFAULT_SIZE);  if (scaledPenRadius <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - scaledPenRadius / 2,ys - scaledPenRadius / 2,scaledPenRadius,scaledPenRadius));  draw();}  }
class C{  public boolean testIntersect(Rect r){  int l=list.size();  for (int i=0; i < l; i++) {    if (list.get(i).get().intersects(r.left,r.top,r.right,r.bottom))     return true;  }  return false;}  }
class C{  public void defineLocalValue() throws IOException {  writeCode(DEFINE_LOCAL_VAL);}  }
class C{  public static double computeSBBTripPrice(final SBBClass klasse,final boolean halbTax,final Trip trip){  return computeSBBTripPrice(klasse,halbTax,RecordFillerUtils.getDistance(trip));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.GEN_EXPR___NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.GEN_EXPR___ANONYMOUS_GEN_EXPR_11:  return anonymous_genExpr_1_1 != null && !anonymous_genExpr_1_1.isEmpty();case UmplePackage.GEN_EXPR___EQUALITY_OP_1:return equalityOp_1 != null && !equalityOp_1.isEmpty();case UmplePackage.GEN_EXPR___NAME_2:return NAME_2_EDEFAULT == null ? name_2 != null : !NAME_2_EDEFAULT.equals(name_2);case UmplePackage.GEN_EXPR___ANONYMOUS_GEN_EXPR_21:return anonymous_genExpr_2_1 != null && !anonymous_genExpr_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public SAXException(String message){  super(message);  this.exception=null;}  }
class C{  protected synchronized void push(final Entry e) throws IOException, SpaceExceededException {  this.stack.insert(NaturalOrder.encodeLong(e.h,8),e.b);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  initOutfits();  buildBoutiqueArea(zone);}  }
class C{  public IndexRequest.OpType opType(){  return this.opType;}  }
class C{  public void checkParameters() throws SQLException {  for (  FBProcedureParam param : inputParams) {    if (param == null) {      continue;    }    if (!param.isValueSet()) {      if (param.isParam() && outputParams.size() > 0 && outputParams.get(param.getPosition()) == null)       throw new FBSQLException("Value of parameter " + param.getIndex() + " not set and "+ "it was not registered as output parameter.",SQLStateConstants.SQL_STATE_WRONG_PARAM_NUM);    }  }}  }
class C{  public static int startsWith(String[] searchStrings,String text){  int index=-1;  for (int i=0; i < searchStrings.length; i++) {    if (text.startsWith(searchStrings[i])) {      if (index == -1 || searchStrings[i].length() > searchStrings[index].length())       index=i;    }  }  return index;}  }
class C{  @Override public Vertex parseTemplate(Vertex formula,TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  String name="Template(";  stream.skipWhitespace();  ensureNext('"',stream);  int position=stream.getPosition();  String text=stream.nextStringDoubleQuotes();  Map<String,Vertex> cache=elements.get(FORMULA);  if (formula == null && cache != null) {    formula=cache.get(text);    if (formula != null) {      return formula;    }  }  try {    TextStream formulaStream=new TextStream(text);    if (formula == null) {      formula=network.createInstance(Primitive.FORMULA);    }    if (cache != null) {      cache.put(text,formula);    }    String token=formulaStream.nextWord();    char peek=formulaStream.peek();    int index=0;    Vertex space=network.createVertex(Primitive.SPACE);    formula.addRelationship(Primitive.TYPE,space);    while ((token != null) && ((!token.equals("\\") || (peek == '"')))) {      Vertex word=null;      if (token.equals("\\") && (peek == '"')) {        token=formulaStream.nextWord();      } else       if (token.endsWith("\\") && (peek == '"')) {        token=token.substring(0,token.length() - 1);      }      if (token.equals("{")) {        try {          ByteArrayOutputStream byteStream=new ByteArrayOutputStream();          ByteArrayOutputStream byteStream2=null;          DataOutputStream dataStream=new DataOutputStream(byteStream);          word=parseElementByteCode(formulaStream,dataStream,elements,true,debug,network);          boolean bytecode=false;          if (word == null) {            bytecode=true;          }          formulaStream.skipWhitespace();          if (formulaStream.peek() == ';') {            bytecode=true;            byteStream2=new ByteArrayOutputStream();            DataOutputStream dataStream2=new DataOutputStream(byteStream2);            dataStream2.writeLong(network.createVertex(Primitive.EXPRESSION).getId());            dataStream2.writeLong(network.createVertex(Primitive.DO).getId());            dataStream2.writeLong(network.createVertex(Primitive.DO).getId());            dataStream2.write(byteStream.toByteArray());            while (formulaStream.peek() == ';') {              formulaStream.skip();              formulaStream.skipWhitespace();              if (formulaStream.peek() == '}') {                break;              }              parseElementByteCode(formulaStream,dataStream2,elements,true,debug,network);              formulaStream.skipWhitespace();            }            dataStream2.writeLong(0l);            dataStream2.writeLong(0l);            dataStream2.writeLong(0l);          }          if (bytecode) {            word=network.createVertex();            word.addRelationship(Primitive.INSTANTIATION,Primitive.EXPRESSION);            BinaryData byteCode=new BinaryData();            if (byteStream2 == null) {              dataStream.writeLong(0l);              byteCode.setBytes(byteStream.toByteArray());            } else {              byteCode.setBytes(byteStream2.toByteArray());            }            word.setData(byteCode);            network.addVertex(word);          }        } catch (        IOException exception) {          throw new SelfParseException("IO Error",stream,exception);        }        ensureNext('}',formulaStream);      } else {        word=network.createWord(token);      }      formula.addRelationship(Primitive.WORD,word,index);      if (formulaStream.skipWhitespace()) {        index++;        formula.addRelationship(Primitive.WORD,space,index);      }      token=formulaStream.nextWord();      peek=formulaStream.peek();      index++;    }  } catch (  SelfParseException exception) {    int newPosition=stream.getPosition();    stream.setPosition(position);    int column=exception.getColumnNumber();    exception.initFromStream(stream);    exception.setColumnNumber(position + column);    stream.setPosition(newPosition);    throw exception;  }  formula.setName(name + "\"" + text+ "\")");  return formula;}  }
class C{  public final void pruneEmptyDirectories() throws IOException {  while (directoriesToScan.size() > 0) {    final DirectoryObject directoryObject=(DirectoryObject)directoriesToScan.remove(0);    pruneEmptyDirectory(directoryObject);  }}  }
class C{  public SpeedTableVarValue(String name,String comment,String cvName,boolean readOnly,boolean infoOnly,boolean writeOnly,boolean opsOnly,String cvNum,String mask,int minVal,int maxVal,HashMap<String,CvValue> v,JLabel status,String stdname,int entries,boolean mfxFlag){  super(name,comment,cvName,readOnly,infoOnly,writeOnly,opsOnly,cvNum,mask,v,status,stdname);  nValues=entries;  _min=minVal;  _max=maxVal;  _range=maxVal - minVal;  mfx=mfxFlag;  numCvs=nValues;  cvList=new String[numCvs];  models=new BoundedRangeModel[nValues];  for (int i=0; i < nValues; i++) {    cvList[i]=Integer.toString(Integer.parseInt(getCvNum()) + i);    DefaultBoundedRangeModel j=new DefaultBoundedRangeModel(_range * i / (nValues - 1) + _min,0,_min,_max);    models[i]=j;    CvValue c=_cvMap.get(cvList[i]);    c.setValue(_range * i / (nValues - 1) + _min);    c.addPropertyChangeListener(this);    c.setState(CvValue.FROMFILE);  }  _defaultColor=(new JSlider()).getBackground();}  }
class C{  public MicroservicesRunner addInterceptor(Interceptor... interceptor){  checkState();  msRegistry.addInterceptor(interceptor);  return this;}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in.length;  while (count > 0) {    if (in[count - 1] != 0) {      break;    }    count--;  }  return in.length - count;}  }
class C{  public static Throwable checkInterrupted(Throwable e){  if (e instanceof InterruptedException)   Thread.interrupted();  return e;}  }
class C{  public SimpleSelectZero(final BitVector bitVector){  this.bitVector=bitVector;  this.bits=bitVector.bits();  final long length=bitVector.length();  numWords=(int)((length + 63) / 64);  long d=0;  for (int i=numWords; i-- != 0; )   d+=Long.bitCount(~bits[i]);  onesPerInventory=1 << (log2OnesPerInventory=Fast.mostSignificantBit(length == 0 ? 1 : (int)((d * MAX_ONES_PER_INVENTORY + length - 1) / length)));  onesPerInventoryMask=onesPerInventory - 1;  final int inventorySize=(int)((d + onesPerInventory - 1) / onesPerInventory);  inventory=new long[inventorySize + 1];  d=0;  for (int i=0; i < numWords; i++)   for (int j=0; j < 64; j++) {    if (i * 64L + j >= length)     break;    if ((~bits[i] & 1L << j) != 0) {      if ((d & onesPerInventoryMask) == 0)       inventory[(int)(d >>> log2OnesPerInventory)]=i * 64L + j;      d++;    }  }  numOnes=d;  inventory[inventorySize]=length;  log2LongwordsPerSubinventory=Math.min(MAX_LOG2_LONGWORDS_PER_SUBINVENTORY,Math.max(0,log2OnesPerInventory - 2));  log2OnesPerSub64=Math.max(0,log2OnesPerInventory - log2LongwordsPerSubinventory);  log2OnesPerSub16=Math.max(0,log2OnesPerSub64 - 2);  onesPerSub64=(1 << log2OnesPerSub64);  onesPerSub16=(1 << log2OnesPerSub16);  onesPerSub16Mask=onesPerSub16 - 1;  if (onesPerInventory > 1) {    d=0;    int ones;    long diff16=0, start=0, span=0;    int spilled=0, inventoryIndex=0;    for (int i=0; i < numWords; i++)     for (int j=0; j < 64; j++) {      if (i * 64L + j >= length)       break;      if ((~bits[i] & 1L << j) != 0) {        if ((d & onesPerInventoryMask) == 0) {          inventoryIndex=(int)(d >>> log2OnesPerInventory);          start=inventory[inventoryIndex];          span=inventory[inventoryIndex + 1] - start;          ones=(int)Math.min(numOnes - d,onesPerInventory);          diff16+=Math.max(4,(ones + onesPerSub16 - 1) >>> log2OnesPerSub16);          if (span >= MAX_SPAN && onesPerSub64 > 1)           spilled+=ones;        }        d++;      }    }    final int subinventorySize=(int)((diff16 + 3) / 4);    final int exactSpillSize=spilled;    subinventory=new long[subinventorySize];    exactSpill=new long[exactSpillSize];    subinventory16=LongArrayBitVector.wrap(subinventory).asLongBigList(Short.SIZE);    int offset=0;    spilled=0;    d=0;    for (int i=0; i < numWords; i++)     for (int j=0; j < 64; j++) {      if (i * 64L + j >= length)       break;      if ((~bits[i] & 1L << j) != 0) {        if ((d & onesPerInventoryMask) == 0) {          inventoryIndex=(int)(d >>> log2OnesPerInventory);          start=inventory[inventoryIndex];          span=inventory[inventoryIndex + 1] - start;          offset=0;        }        if (span < MAX_SPAN) {          if (ASSERTS)           assert i * 64L + j - start <= MAX_SPAN;          if ((d & onesPerSub16Mask) == 0) {            subinventory16.set((inventoryIndex << log2LongwordsPerSubinventory + 2) + offset++,i * 64L + j - start);          }        } else {          if (onesPerSub64 == 1) {            subinventory[(inventoryIndex << log2LongwordsPerSubinventory) + offset++]=i * 64L + j;          } else {            if ((d & onesPerInventoryMask) == 0) {              inventory[inventoryIndex]|=1L << 63;              subinventory[inventoryIndex << log2LongwordsPerSubinventory]=spilled;            }            exactSpill[spilled++]=i * 64L + j;          }        }        d++;      }    }  } else {    subinventory=exactSpill=LongArrays.EMPTY_ARRAY;    subinventory16=null;  }}  }
class C{  public DebugErrorHandler(Object replacement){  super(replacement);}  }
class C{  public static void addOrUpdateKeywordSet(List<KeywordSet> keywords,String keyword,String thesaurus){  if (!Strings.isNullOrEmpty(keyword) && !Strings.isNullOrEmpty(thesaurus)) {    String capped=StringUtils.capitalize(keyword.toLowerCase());    boolean found=false;    for (    KeywordSet ks : keywords) {      String keywordThesaurus=ks.getKeywordThesaurus();      if (!Strings.isNullOrEmpty(keywordThesaurus) && keywordThesaurus.equalsIgnoreCase(thesaurus)) {        String keywordString=ks.getKeywordsString();        if (Strings.isNullOrEmpty(keywordString)) {          ks.setKeywordsString(capped);        }        found=true;        break;      }    }    if (!found) {      KeywordSet ks=new KeywordSet();      ks.setKeywordThesaurus(thesaurus);      ks.setKeywordsString(capped);      keywords.add(ks);    }  }}  }
class C{  public RequestParams(Object... keysAndValues){  int len=keysAndValues.length;  if (len % 2 != 0)   throw new IllegalArgumentException("Supplied arguments must be even");  for (int i=0; i < len; i+=2) {    String key=String.valueOf(keysAndValues[i]);    String val=String.valueOf(keysAndValues[i + 1]);    put(key,val);  }}  }
class C{  private String prepareConnectString(List<ZooKeeperNode> zknodes){  StringBuffer buf=new StringBuffer();  int count=1;  for (  ZooKeeperNode node : zknodes) {    buf.append(node.getHostname());    buf.append(":");    buf.append(node.getPort());    if (count != zknodes.size()) {      buf.append(",");    }    count++;  }  return buf.toString();}  }
class C{  public boolean isReportingProcess(){  return m_reportingProcess;}  }
class C{  public ClassInstanceCreation newClassInstanceCreation(){  ClassInstanceCreation result=new ClassInstanceCreation(this);  return result;}  }
class C{  static void scheduleUpdateCheckTask(int secondsAfter,boolean force){  scheduleUpdateCheckTask(secondsAfter,null,force);}  }
class C{  protected PrivateKey engineGeneratePrivate(KeySpec keySpec) throws InvalidKeySpecException {  try {    if (keySpec instanceof DSAPrivateKeySpec) {      DSAPrivateKeySpec dsaPrivKeySpec=(DSAPrivateKeySpec)keySpec;      return new DSAPrivateKey(dsaPrivKeySpec.getX(),dsaPrivKeySpec.getP(),dsaPrivKeySpec.getQ(),dsaPrivKeySpec.getG());    } else     if (keySpec instanceof PKCS8EncodedKeySpec) {      return new DSAPrivateKey(((PKCS8EncodedKeySpec)keySpec).getEncoded());    } else {      throw new InvalidKeySpecException("Inappropriate key specification");    }  } catch (  InvalidKeyException e) {    throw new InvalidKeySpecException("Inappropriate key specification: " + e.getMessage());  }}  }
class C{  protected Object[] computePathLength(DrawContext dc){  Iterator<? extends Position> iterator=this.path.getPositions().iterator();  Globe globe=dc.getGlobe();  Vec4 pt1, pt2;  Position startPosition=iterator.next();  Position endPosition=startPosition;  double pathLength=0;  pt1=globe.computePointFromLocation(startPosition);  while (iterator.hasNext()) {    endPosition=iterator.next();    pt2=globe.computePointFromLocation(endPosition);    pathLength+=pt2.distanceTo2(pt1);    pt1=pt2;  }  return new Object[]{startPosition,endPosition,pathLength};}  }
class C{  public ModelBuilder subject(String prefixedNameOrIri){  return subject(mapToIRI(prefixedNameOrIri));}  }
class C{  public AncestorEvent(JComponent source,int id,Container ancestor,Container ancestorParent){  super(source,id);  this.ancestor=ancestor;  this.ancestorParent=ancestorParent;}  }
class C{  public boolean isAllUnclamped(){  boolean ret=true;  for (  Neuron n : getNeuronList()) {    if (n.isClamped()) {      ret=false;    }  }  return ret;}  }
class C{  public static Sphere createBoundingSphere(BufferWrapper buffer){  if (buffer == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (buffer.getBackingBuffer().position() > buffer.getBackingBuffer().limit() - 3) {    String message=Logging.getMessage("Geom.Sphere.NoPointsSpecified");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Vec4[] extrema=Vec4.computeExtrema(buffer);  Vec4 center=new Vec4((extrema[0].x + extrema[1].x) / 2.0,(extrema[0].y + extrema[1].y) / 2.0,(extrema[0].z + extrema[1].z) / 2.0);  double radius=extrema[0].distanceTo3(extrema[1]) / 2.0;  return new Sphere(center,radius);}  }
class C{  private static void parse(InputStream in,Encoding encoding,ContentHandler contentHandler) throws IOException, SAXException {  try {    XMLReader reader=new ExpatReader();    reader.setContentHandler(contentHandler);    InputSource source=new InputSource(in);    source.setEncoding(encoding.expatName);    reader.parse(source);  } catch (  IOException e) {    throw new AssertionError(e);  }}  }
class C{  protected void internalTransform(Body body,String phaseName,Map options){  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "]     Unrolling Loop Conditions...");  visitingSuccs=new HashSet<Block>();  visitedBlocks=new HashSet<Block>();  this.body=body;  this.maxSize=PhaseOptions.getInt(options,"maxSize");  BlockGraph bg=new BriefBlockGraph(body);  Iterator headIter=bg.getHeads().iterator();  while (headIter.hasNext())   unrollConditions((Block)headIter.next());  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "]     Unrolling Loop Conditions done.");}  }
class C{  public static int findStartTrimWhitespace(CharSequence s){  return findStartTrimWhitespace(s,0);}  }
class C{  void updateServer(ServerHeartbeat server,UpdateServerHeartbeat update){  if (server.isSelf()) {    return;  }  String externalId=update.getExternalId();  updateExternal(server,externalId);  server.setSeedIndex(update.getSeedIndex());  if (server.onHeartbeatUpdate(update)) {    if (server.isUp()) {      onServerStart(server);    } else {      onServerStop(server);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.682 -0400",hash_original_method="898ED87B3E2D635579A550CF0CA7DA33",hash_generated_method="CB065DAF4E5CD1B91067DE099E902E01") @Override public boolean ready() throws IOException {  try {    return in.ready();  } catch (  IOException e) {    handleIOException(e);    return false;  }}  }
class C{  TBigInteger(int sign,int value){  this.sign=sign;  numberLength=1;  digits=new int[]{value};}  }
class C{  @Override public int hashCode(){  return value;}  }
class C{  public final String join(@Nullable Object first,@Nullable Object second,Object... rest){  return join(iterable(first,second,rest));}  }
class C{  public void updateBackgroundAsync(String url){  mBackgroundUrl=url;  if (null != mBackgroundTimer) {    mBackgroundTimer.cancel();  }  mBackgroundTimer=new Timer();  mBackgroundTimer.schedule(new UpdateBackgroundTask(),BACKGROUND_UPDATE_DELAY);}  }
class C{  public static int byteArrayToInt(final byte[] buffer,final int offset){  if (Cfg.DEBUG) {    Check.requires(buffer.length >= offset + 4,"short buffer");  }  try {    final DataBuffer databuffer=new DataBuffer(buffer,offset,buffer.length - offset);    final int value=databuffer.readInt();    return value;  } catch (  final IOException ex) {    if (Cfg.EXCEPTION) {      Check.log(ex);    }    if (Cfg.DEBUG) {      Check.log(TAG + " Error: " + ex.toString());    }  }  return 0;}  }
class C{  public static void check(boolean cond){  if (!cond)   error();}  }
class C{  @Override public void updateNCharacterStream(String columnLabel,Reader x) throws SQLException {  updateNCharacterStream(columnLabel,x,-1);}  }
class C{  public SQLWarning(Throwable cause){  super(cause);  DriverManager.println("SQLWarning");}  }
class C{  public static String format(double[][] d){  return d == null ? "null" : (d.length == 0) ? "[]" : formatTo(new StringBuilder().append("[\n"),d," [","]\n",", ",NF2).append(']').toString();}  }
class C{  public static final void drawCircleFromTopLeft(GL2 gl,double sx,double sy,double w,double h,boolean points,boolean line){  double r=Math.min(w,h) * 0.5;  RenderUtilities.drawCircleFromCenter(gl,r,sx + r,sy - r,points,line);}  }
class C{  public static ObjectAnimator ofInt(Object target,String propertyName,int... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setIntValues(values);  return anim;}  }
class C{  public static NbtInputStream from(File in,NbtLimiter limiter) throws IOException {  return from(new FileInputStream(in),limiter);}  }
class C{  @Provides Application provideApplication(){  return this.application;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public int hashCode(){  return uri.hashCode();}  }
class C{  public boolean isComplete(){  return title != null && description != null && mainIngredient.size() > 0 && cuisine.size() > 0;}  }
class C{  public int hashCode(){  long bits0=java.lang.Double.doubleToLongBits(p0.x);  bits0^=java.lang.Double.doubleToLongBits(p0.y) * 31;  int hash0=(((int)bits0) ^ ((int)(bits0 >> 32)));  long bits1=java.lang.Double.doubleToLongBits(p1.x);  bits1^=java.lang.Double.doubleToLongBits(p1.y) * 31;  int hash1=(((int)bits1) ^ ((int)(bits1 >> 32)));  return hash0 ^ hash1;}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new HashMap<String,ConcurrentHashMap<String,HttpCookie>>();  Map<String,?> prefsMap=cookiePrefs.getAll();  for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {    if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {      String[] cookieNames=TextUtils.split((String)entry.getValue(),",");      for (      String name : cookieNames) {        String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);        if (encodedCookie != null) {          HttpCookie decodedCookie=decodeCookie(encodedCookie);          if (decodedCookie != null) {            if (!cookies.containsKey(entry.getKey()))             cookies.put(entry.getKey(),new ConcurrentHashMap<String,HttpCookie>());            cookies.get(entry.getKey()).put(name,decodedCookie);          }        }      }    }  }}  }
class C{  public int findFirstCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),true,false);  return child == null ? NO_POSITION : recyclerView.getChildPosition(child);}  }
class C{  public void addIndex(IndexDefinition index){  getIndexes().add(index);}  }
class C{  public Builder withKeyStoreKeyPassword(String keyStoreKeyPassword){  properties.setProperty(NettyOptions.SSL_KEY_STORE_KEY_PASSWORD,Assert.notNull(keyStoreKeyPassword,"trustStorePassword"));  return this;}  }
class C{  public static byte[] convertArray(short[] in){  byte[] out=new byte[in.length];  for (int i=0; i < in.length; i++) {    out[i]=(byte)in[i];  }  return out;}  }
class C{  public static String quote(String name){  if (isEmpty(name) || isQuoted(name)) {    return name;  } else   if (name.startsWith("\"") && name.endsWith("\"")) {    name=name.substring(1,name.length() - 1);  }  return new StringBuilder(name.length() + 2).append('`').append(name).append('`').toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:37.300 -0500",hash_original_method="F97A1055288731314CAAC8F3AEEE2191",hash_generated_method="C12CAABAF7BDF9DF44CAFF756EE456D1") @Override protected void parseURL(URL url,String spec,int start,int end){  if (end < start) {    return;  }  String parseString="";  if (start < end) {    parseString=spec.substring(start,end).replace('\\','/');  }  super.parseURL(url,parseString,0,parseString.length());}  }
class C{  public Iterator<byte[]> keys() throws IOException {  return this.table.keys(true,false);}  }
class C{  private CTutorialDialog(){  super((Window)null,"BinNavi Tutorial");  CIconInitializer.initializeWindowIcons(this);  setLayout(new BorderLayout());  m_topicLabel.setBorder(new EmptyBorder(5,5,5,5));  m_descriptionField.setContentType("text/html");  m_descriptionField.setEditable(false);  m_descriptionField.setBorder(new TitledBorder(""));  final JPanel topPanel=new JPanel();  topPanel.add(m_topicLabel);  add(m_topicLabel,BorderLayout.NORTH);  add(new JScrollPane(m_descriptionField));  final JPanel bottomPanel=new JPanel(new BorderLayout());  final JButton cancelButton=new JButton(new QuitAction());  final JPanel leftPanel=new JPanel(new BorderLayout());  m_warningLabel.setEditable(false);  m_warningLabel.setForeground(Color.RED);  m_warningLabel.setBorder(new EmptyBorder(0,5,0,0));  leftPanel.add(cancelButton,BorderLayout.WEST);  leftPanel.add(m_warningLabel);  final JPanel buttonsPanel=new JPanel(new GridLayout(0,2));  buttonsPanel.add(m_skipButton);  buttonsPanel.add(m_nextButton);  bottomPanel.add(leftPanel,BorderLayout.WEST);  bottomPanel.add(buttonsPanel,BorderLayout.EAST);  add(bottomPanel,BorderLayout.SOUTH);  setSize(550,300);  GuiHelper.centerOnScreen(this);  setLocation(getLocation().x + 200,getLocation().y - 200);  setAlwaysOnTop(true);  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);  addWindowListener(new InternalWindowListener());}  }
class C{  public void hideIntentReviewImageView(){  if (mIntentReviewImageView != null) {    mIntentReviewImageView.setVisibility(View.INVISIBLE);  }}  }
class C{  public HD_Address addressAt(int idx){  return new HD_Address(MainNetParams.get(),aKey,idx);}  }
class C{  public static boolean contentEquals(File file1,File file2) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.length() != file2.length()) {    return false;  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  InputStream input1=null;  InputStream input2=null;  try {    input1=new FileInputStream(file1);    input2=new FileInputStream(file2);    return IOUtils.contentEquals(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  private void checkCGForSnapshots(BlockConsistencyGroup consistencyGroup){  final URIQueryResultList cgSnapshotsResults=new URIQueryResultList();  _dbClient.queryByConstraint(getBlockSnapshotByConsistencyGroup(consistencyGroup.getId()),cgSnapshotsResults);  Iterator<BlockSnapshot> blockSnapshotIterator=_dbClient.queryIterativeObjects(BlockSnapshot.class,cgSnapshotsResults);  while (blockSnapshotIterator.hasNext()) {    BlockSnapshot next=blockSnapshotIterator.next();    if (!next.getTechnologyType().equalsIgnoreCase(TechnologyType.RP.name())) {      throw APIException.badRequests.cannotCreateVolumeAsConsistencyGroupHasSnapshots(consistencyGroup.getLabel(),consistencyGroup.getId());    }  }}  }
class C{  public static Coord4D read(NBTTagCompound tag){  return new Coord4D(tag.getInteger("x"),tag.getInteger("y"),tag.getInteger("z"),tag.getInteger("id"));}  }
class C{  public AffineTransformation(){  setToIdentity();}  }
class C{  private void allNamespaces(Element ele){  NamedNodeMap attributes=ele.getAttributes();  for (int i=0; i < attributes.getLength(); ++i) {    Attr attribute=(Attr)attributes.item(i);    if (attribute.getPrefix() != null && attribute.getNamespaceURI() != null) {      String prefix=attribute.getPrefix();      String uri=attribute.getNamespaceURI();      prefixUriMap.put(prefix,uri);      if (!uriPrefixMap.containsKey(uri)) {        uriPrefixMap.put(uri,new TreeSet<String>());      }      uriPrefixMap.get(uri).add(prefix);    }  }  String prefix=ele.getPrefix();  String uri=ele.getNamespaceURI();  if (prefix != null && uri != null) {    prefixUriMap.put(prefix,uri);    if (!uriPrefixMap.containsKey(uri)) {      uriPrefixMap.put(uri,new TreeSet<String>());    }    uriPrefixMap.get(uri).add(prefix);  }  NodeList children=ele.getChildNodes();  for (int i=0; i < children.getLength(); ++i) {    if (children.item(i).getNodeType() == Node.ELEMENT_NODE) {      allNamespaces((Element)children.item(i));    }  }}  }
class C{  public static String escape(String pattern){  return regexpEscape.replace(pattern,"\\$&");}  }
class C{  private Label walk(EnumMap<Node,Label> tree,Node node){  do {    if (tree.get(node) != Label.UNKNOWN)     return tree.get(node);  } while ((node=node.getParent()) != null);  LOG.warn("Node label is unknown!!");  return Label.UNKNOWN;}  }
class C{  public CellEditors(int size){  cellEditors=new ArrayList<List<TableCellEditor>>(size);  for (int i=0; i < size; i++) {    cellEditors.add(new ArrayList<TableCellEditor>());  }}  }
class C{  public void reset(){  isFilling=false;  isCompleted=false;}  }
class C{  public void parseHouseholdMap(String filename){  LOG.info("Parsing households from " + filename);  Counter counter=new Counter("  household # ");  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=null;    while ((line=br.readLine()) != null) {      String serial=line.substring(0,9);      String size=line.substring(9,12);      String type=line.substring(12,14);      String population=line.substring(39,40);      String income=line.substring(40,42);      householdMap.put(Id.create(serial,Household.class),size + "," + this.getDwellingType(type)+ ","+ this.getPopulation(population)+ ","+ this.getIncome(income));      counter.incCounter();    }  } catch (  IOException e) {    throw new RuntimeException("Could not read from BufferedReader " + filename);  } finally {    try {      br.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedReader " + filename);    }  }  counter.printCounter();  LOG.info("Done parsing households (" + householdMap.size() + ").");}  }
class C{  public ClasspathResourceLoader(Class<?> clazz){  this(clazz,clazz.getClassLoader());}  }
class C{  public void testTestUtf() throws ServletException, IOException {  if ("orion2.0.5".equals(getContainerId()))   return;  String encodedStr=URLEncoder.encode("m\u0101ori","UTF8");  GetMethod method=new GetMethod(getBaseUrl() + "/utf/" + encodedStr+ "/");  method.setRequestHeader("Accept-Encoding","utf8");  method.setFollowRedirects(false);  client.executeMethod(method);  assertNotNull("no location header",method.getResponseHeader("Location"));  assertEquals(getBaseUrl() + "/utf-redir/done/" + encodedStr+ "/",method.getResponseHeader("Location").getValue());}  }
class C{  public static Reflect on(String name) throws ReflectException {  return on(forName(name));}  }
class C{  public PanTool(){  this(CursorTool.ANY_BUTTON);}  }
class C{  public boolean isOnFriday(){  Object oo=get_Value(COLUMNNAME_OnFriday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @PUT @Path("/{id}/acl") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.SYSTEM_ADMIN}) public TaskResourceRep updateAclAssignments(@PathParam("id") URI id,ACLAssignmentChanges changes){  Vcenter vcenter=queryObject(Vcenter.class,id,true);  ArgValidator.checkEntity(vcenter,id,isIdEmbeddedInURL(id));  validateAclAssignments(changes);  checkVcenterUsage(vcenter,changes);  validateVcenterLastDiscoveryJobStatus(vcenter);  _permissionsHelper.updateACLs(vcenter,changes,new PermissionsHelper.UsageACLFilter(_permissionsHelper));  verifyVcenterCascadeTenancy(vcenter);  _dbClient.updateAndReindexObject(vcenter);  auditOp(OperationTypeEnum.UPDATE_VCENTER,true,null,vcenter.getId().toString(),vcenter.getLabel(),changes);  return doDiscoverVcenter(queryObject(Vcenter.class,vcenter.getId(),true));}  }
class C{  public double norm2(DoubleMatrix2D A){  return svd(A).norm2();}  }
class C{  public ZyNormalNodeRealizer(final ZyLabelContent content){  Preconditions.checkNotNull(content,"Error: Node content can't be null.");  m_content=content;  setShapeType(ShapeNodeRealizer.ROUND_RECT);  setLineType(LineType.LINE_2);  setDropShadowOffsetX(SHADOW_SIZE);  setDropShadowOffsetY(SHADOW_SIZE);  setDropShadowColor(SHADOW_COLOR);  final Rectangle2D bounds=getNodeContent().getBounds();  setSize(bounds.getWidth(),bounds.getHeight());}  }
class C{  private String createData(String path,byte[] data,CreateMode mode) throws KeeperException, InterruptedException {  for (; ; ) {    try {      return zookeeper.create(path,data,acl,mode,true);    } catch (    KeeperException.NoNodeException e) {      try {        zookeeper.create(dir,new byte[0],acl,CreateMode.PERSISTENT,true);      } catch (      KeeperException.NodeExistsException ne) {      }    }  }}  }
class C{  public static List<Family> orderFamiliesAndSetMates(Set<Family> families) throws PedigreeException {  final MultiMap<String,Family> parents=new MultiMap<>(true);  final HashMap<String,Integer> parentPairCounts=new LinkedHashMap<>();  final HashMap<String,Family> parentPairToFamily=new HashMap<>();  for (  Family f : families) {    parents.put(f.getMother(),f);    parents.put(f.getFather(),f);    final String lookupName=f.getFather() + " " + f.getMother();    parentPairCounts.put(lookupName,0);    parentPairToFamily.put(lookupName,f);  }  for (  Family genCurrent : families) {    for (    String genCurrentChild : genCurrent.getChildren()) {      final Collection<Family> genNextFamilies=parents.get(genCurrentChild);      if (genNextFamilies != null) {        for (        Family genNextFamily : genNextFamilies) {          final String lookupName=genNextFamily.getFather() + " " + genNextFamily.getMother();          parentPairToFamily.put(lookupName,genNextFamily);          int count=parentPairCounts.get(lookupName);          count++;          parentPairCounts.put(lookupName,count);        }      }    }  }  final ArrayDeque<Family> zeroAncestors=new ArrayDeque<>();  final Iterator<Map.Entry<String,Integer>> it=parentPairCounts.entrySet().iterator();  while (it.hasNext()) {    final Map.Entry<String,Integer> me=it.next();    if (me.getValue() == 0) {      zeroAncestors.add(parentPairToFamily.get(me.getKey()));      it.remove();    }  }  final ArrayList<Family> ret=new ArrayList<>();  while (!zeroAncestors.isEmpty()) {    final Family n=zeroAncestors.removeFirst();    ret.add(n);    for (    String child : n.getChildren()) {      final Collection<Family> genNextFamilies=parents.get(child);      if (genNextFamilies != null) {        for (        Family genNextFamily : genNextFamilies) {          final String lookupName=genNextFamily.getFather() + " " + genNextFamily.getMother();          int count=parentPairCounts.get(lookupName);          count--;          if (count == 0) {            zeroAncestors.add(genNextFamily);            parentPairCounts.remove(lookupName);          } else {            parentPairCounts.put(lookupName,count);          }        }      }    }  }  if (parentPairCounts.size() > 0) {    throw new PedigreeException("Cycles in pedigree detected, check pedigree structure");  }  for (  Family f : families) {    f.setFatherDistinctMates(parents.get(f.getFather()).size());    f.setMotherDistinctMates(parents.get(f.getMother()).size());  }  for (  Map.Entry<String,Collection<Family>> entry : parents.entrySet()) {    final Collection<Family> fams=entry.getValue();    int id=0;    Boolean father=null;    for (    Family f : fams) {      if (father == null) {        father=f.getFather().equals(entry.getKey());      }      if (father) {        f.setFatherFamilyId(id++);      } else {        f.setMotherFamilyId(id++);      }    }  }  return ret;}  }
class C{  private void parseGeneralFields(JsonObject jObject,FilterType filterType){  if (jObject.has(TAG_ID))   filterType.setId(jObject.get(TAG_ID).getAsLong());  if (jObject.has(TAG_NAME))   filterType.setName(jObject.get(TAG_NAME).getAsString());  if (jObject.has(TAG_LABEL))   filterType.setLabel(jObject.get(TAG_LABEL).getAsString());}  }
class C{  protected void init(){  id=UUID.randomUUID().getMostSignificantBits();}  }
class C{  public void testAuditCrashed(){}  }
class C{  public int bulbSwitch(int n){  return (int)Math.sqrt(n);}  }
class C{  public void close(){  LOGGER.info("Close interpreter group " + getId());  List<Interpreter> intpToClose=new LinkedList<Interpreter>();  for (  List<Interpreter> intpGroupForNote : this.values()) {    intpToClose.addAll(intpGroupForNote);  }  close(intpToClose);}  }
class C{  public static String withFirst(String input,Function<Character,String> callback){  if (input == null) {    return null;  } else   if (input.length() == 0) {    return "";  } else {    return String.join("",callback.apply(input.charAt(0)),input.subSequence(1,input.length()));  }}  }
class C{  protected void addSystemMenuItems(JMenu systemMenu){}  }
class C{  public int size(){  return matrix.size();}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public boolean isDirty(){  return panelChanged;}  }
class C{  boolean isLocaleAvailable(Locale locale){  try {    Locale[] locales=descriptor.getAvailableLocales();    for (int i=0; i < locales.length; i++) {      if (locales[i].equals(locale)) {        return true;      }    }  } catch (  AWTException e) {  }  return false;}  }
class C{  public boolean isUserElement1Dim(){  Object oo=get_Value(COLUMNNAME_IsUserElement1Dim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override protected MkTabEntry createRootEntry(){  return new MkTabDirectoryEntry(null,0.,0,0.,initKnnDistanceList());}  }
class C{  public JCApplet createApplet(){  JCApplet applet=new JCApplet();  raw_applets.add(applet);  return applet;}  }
class C{  public PersistenceException(String message){  super(message);}  }
class C{  @Override protected void transformColumns(ArrayList<ColumnSpec> columns,ArrayList<ArrayList<ColumnVal>> columnValues,HashMap<Integer,String[]> setDefinitions,String typeCaption) throws ReplicatorException {  for (int c=0; c < columns.size(); c++) {    ColumnSpec colSpec=columns.get(c);    if (setDefinitions.containsKey(colSpec.getIndex())) {      if (logger.isDebugEnabled())       logger.debug("Transforming " + typeCaption + "("+ colSpec.getIndex()+ ")");      if (colSpec.getType() == java.sql.Types.INTEGER || colSpec.getType() == java.sql.Types.NULL) {        colSpec.setType(java.sql.Types.VARCHAR);        for (int row=0; row < columnValues.size(); row++) {          ColumnVal colValue=columnValues.get(row).get(c);          if (colValue.getValue() != null) {            long currentValue=(Long)colValue.getValue();            String setDefs[]=setDefinitions.get(colSpec.getIndex());            String newValue=null;            if (currentValue == 0) {              newValue="";            } else {              newValue=binarySetMapToString(setDefs,currentValue);            }            colValue.setValue(newValue);            if (logger.isDebugEnabled())             logger.debug("Col " + colSpec.getIndex() + " Row "+ row+ ": "+ currentValue+ " -> "+ newValue);          } else {            if (logger.isDebugEnabled())             logger.debug("Col " + colSpec.getIndex() + " Row "+ row+ ": null");          }        }      } else       if (colSpec.getType() == java.sql.Types.VARCHAR)       logger.warn("Column type is already VARCHAR! Assuming it is because this event was already transformed by this filter. Ignoring this column"); else       logger.error("Unexpected column type (" + colSpec.getType() + ") in supposedly SET column! Ignoring this column");    }  }}  }
class C{  private static IMethod computePairedMethod(TypeContainer typeContainer,IMethod method) throws RemoteServiceException, JavaModelException {  String[] paramTypeNames=null;  if (typeContainer.isSync()) {    paramTypeNames=RemoteServiceUtilities.computeAsyncParameterTypes(method);  } else {    paramTypeNames=RemoteServiceUtilities.computeSyncParameterTypes(method);  }  String[] paramTypeSigs=new String[paramTypeNames.length];  for (int i=0; i < paramTypeNames.length; i++) {    paramTypeSigs[i]=Signature.createTypeSignature(paramTypeNames[i],true);  }  IType pairedType=typeContainer.getPairedType();  return JavaModelSearch.findMethodInHierarchy(pairedType.newSupertypeHierarchy(new NullProgressMonitor()),pairedType,method.getElementName(),paramTypeSigs);}  }
class C{  public boolean isTimeAllowed(LocalTime time){  if (time == null) {    return allowEmptyTimes;  }  return (!(InternalUtilities.isTimeVetoed(vetoPolicy,time)));}  }
class C{  public void startAsServer(final Oid mech) throws Exception {  startAsServer(null,mech,false);}  }
class C{  protected static String capitalize(String name){  return (Character.toUpperCase(name.charAt(0)) + name.substring(1));}  }
class C{  public static void removeFromPlaylist(final Context context,final long id,final long playlistId,boolean showNotification){  if (context == null) {    return;  }  final Uri uri=MediaStore.Audio.Playlists.Members.getContentUri("external",playlistId);  final ContentResolver resolver=context.getContentResolver();  resolver.delete(uri,Playlists.Members.AUDIO_ID + " = ? ",new String[]{Long.toString(id)});  if (showNotification) {    try {      final String message=context.getResources().getQuantityString(R.plurals.NNNtracksfromplaylist,1,1);      AppMsg.makeText(context,message,AppMsg.STYLE_CONFIRM).show();    } catch (    Throwable t) {    }  }}  }
class C{  public static void testTypeSafety(Variation variation){  Solution[] parents=new Solution[variation.getArity()];  for (int i=0; i < variation.getArity(); i++) {    Solution solution=new Solution(2,0);    solution.setVariable(0,new NewVariable());    solution.setVariable(1,new NewVariable());    parents[i]=solution;  }  variation.evolve(parents);}  }
class C{  public CachingMetadataReaderFactory(ClassLoader classLoader){  super(classLoader);}  }
class C{  public PacketWrapper create(int packetID){  return new PacketWrapper(packetID,null,user());}  }
class C{  public Hypercube(double lows[],double highs[]){  dimension=lows.length;  if (lows.length != highs.length) {    throw new IllegalArgumentException("lows and highs arrays do not contain the same number of dimensions.");  }  if (dimension < 2) {    throw new IllegalArgumentException("Hypercube can only be created with dimensions of 2 and higher.");  }  this.lows=new double[dimension];  this.highs=new double[dimension];  for (int i=0; i < dimension; i++) {    this.lows[i]=lows[i];    this.highs[i]=highs[i];  }}  }
class C{  public static boolean reflectionEquals(Object lhs,Object rhs,String[] excludeFields){  return reflectionEquals(lhs,rhs,false,null,excludeFields);}  }
class C{  public void onCreate(Bundle savedInstanceState,Class<OpsType> opsType,Interface instance){  super.onCreate(savedInstanceState);  try {    handleConfiguration(opsType,instance);  } catch (  InstantiationException|IllegalAccessException e) {    Log.d(TAG,"handleConfiguration " + e);    throw new RuntimeException(e);  }}  }
class C{  public PKCS7(DerInputStream derin) throws ParsingException {  parse(derin);}  }
class C{  public Builder date(Integer date){  if (date != null && (date < 1 || date > 31)) {    throw Messages.INSTANCE.getIllegalArgumentException(37,"Date",1,31);  }  components[DATE]=date;  return this;}  }
class C{  public static String toString(String s1,int width1,String spacer,String s2,int width2){  int len1=s1.length();  int len2=s2.length();  StringWriter sw=new StringWriter((len1 + len2) * 3);  TwoColumnOutput twoOut=new TwoColumnOutput(sw,width1,width2,spacer);  try {    twoOut.getLeft().write(s1);    twoOut.getRight().write(s2);  } catch (  IOException ex) {    throw new RuntimeException("shouldn't happen",ex);  }  twoOut.flush();  return sw.toString();}  }
class C{  private HashEntry<K,V> scanAndLockForPut(K key,int hash,V value){  HashEntry<K,V> first=entryForHash(this,hash);  HashEntry<K,V> e=first;  HashEntry<K,V> node=null;  int retries=-1;  while (!tryLock()) {    HashEntry<K,V> f;    if (retries < 0) {      if (e == null) {        if (node == null)         node=new HashEntry<K,V>(hash,key,value,null);        retries=0;      } else       if (key.equals(e.key))       retries=0; else       e=e.next;    } else     if (++retries > MAX_SCAN_RETRIES) {      lock();      break;    } else     if ((retries & 1) == 0 && (f=entryForHash(this,hash)) != first) {      e=first=f;      retries=-1;    }  }  return node;}  }
class C{  private static long mix64(long z){  z=(z ^ (z >>> 30)) * 0xbf58476d1ce4e5b9L;  z=(z ^ (z >>> 27)) * 0x94d049bb133111ebL;  return z ^ (z >>> 31);}  }
class C{  public static final Criterion internalDateBefore(Date date,DateResolution res){  return new InternalDateCriterion(new DateOperator(DateComparator.BEFORE,date,res));}  }
class C{  public boolean isUuid(){  return uuid;}  }
class C{  protected void validate_return(StorageFileSystem[] param){}  }
class C{  public boolean addNode(Node node){  if (node == null) {    throw new NullPointerException();  }  if (!(getNode(node.getName()) == null)) {    return false;  }  if (nodes.contains(node)) {    return false;  }  List<Node> _nodes=new ArrayList<>();  nodes.add(node);  namesHash.put(node.getName(),node);  reconstituteGraphMatrix(_nodes,nodes);  initHashes();  return true;}  }
class C{  public static QueryAssociatedLunsForPortResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryAssociatedLunsForPortResponse object=new QueryAssociatedLunsForPortResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryAssociatedLunsForPortResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryAssociatedLunsForPortResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(VasaAssociationObject.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(VasaAssociationObject.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((VasaAssociationObject[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(VasaAssociationObject.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public void shutdown(){  getBot().log(this,"Shutdown",Bot.FINE);  setIsEnabled(false);}  }
class C{  public ICUNormalizer2Filter(TokenStream input){  this(input,Normalizer2.getInstance(null,"nfkc_cf",Normalizer2.Mode.COMPOSE));}  }
class C{  private void addComponents(Row row){  if (mainPanel.getRows() != null)   mainPanel.getRows().appendChild(row); else   mainPanel.newRows().appendChild(row);}  }
class C{  public boolean status(){  return true;}  }
class C{  public void removePackage(String packageName,UserHandleCompat user){  final List<AppInfo> data=this.data;  for (int i=data.size() - 1; i >= 0; i--) {    AppInfo info=data.get(i);    final ComponentName component=info.intent.getComponent();    if (info.user.equals(user) && packageName.equals(component.getPackageName())) {      removed.add(info);      data.remove(i);    }  }}  }
class C{  @SuppressWarnings("unused") private Hop removeUnecessaryPPred(Hop parent,Hop hi,int pos) throws HopsException {  if (hi instanceof BinaryOp) {    BinaryOp bop=(BinaryOp)hi;    Hop left=bop.getInput().get(0);    Hop right=bop.getInput().get(1);    Hop datagen=null;    if (left == right && bop.getOp() == OpOp2.EQUAL || bop.getOp() == OpOp2.GREATEREQUAL || bop.getOp() == OpOp2.LESSEQUAL)     datagen=HopRewriteUtils.createDataGenOp(left,1);    if (left == right && bop.getOp() == OpOp2.NOTEQUAL || bop.getOp() == OpOp2.GREATER || bop.getOp() == OpOp2.LESS)     datagen=HopRewriteUtils.createDataGenOp(left,0);    if (datagen != null) {      HopRewriteUtils.removeChildReference(parent,hi);      HopRewriteUtils.addChildReference(parent,datagen,pos);      hi=datagen;    }  }  return hi;}  }
class C{  private void putAndInvalidate(){  region.put(new Integer(1),new Integer(1));  try {    region.invalidate(new Integer(1));  } catch (  Exception e) {    logWriter.error("Exception occurred",e);    throw new AssertionError(" failed to invalidate Integer",e);  }}  }
class C{  public JPanel generateContentPanelEnv(String title,String[][] env_info,String[][] vpp_accounts,Object[][] ldap_accounts,String help_title,String help_link,String icon){  JPanel panelContent=new JPanel(new BorderLayout());  JPanel header=new JPanel();  ImageIcon icon_image=generateIcon(icon);  header.add(new JLabel(title,icon_image,JLabel.CENTER)).setForeground(Color.WHITE);  header.setBackground(Color.decode("#5C6B84"));  panelContent.setBorder(BorderFactory.createLineBorder(Color.BLACK));  JPanel container=new JPanel();  container.setLayout(new BoxLayout(container,BoxLayout.Y_AXIS));  if (!(help_title.equals("") && help_link.equals(""))) {    container.add(new URLLabel(help_title,help_link));    container.add(new JLabel("   "));  }  JPanel data1=new JPanel();  JPanel data2=new JPanel();  JPanel data3=new JPanel();  JScrollPane scroll1=new JScrollPane(data1);  JScrollPane scroll2=new JScrollPane(data1);  JScrollPane scroll3=new JScrollPane(data1);  JTable env_info_table=generateTable("Object,Data",env_info);  data1.add(env_info_table);  scroll1.setViewportView(env_info_table);  container.add(scroll1);  if (vpp_accounts.length > 0) {    JTable vpp_account_table=generateTable("VPP Account Account Name,Expires",vpp_accounts);    data2.add(vpp_account_table);    scroll2.setViewportView(vpp_account_table);    container.add(scroll2);  }  if (ldap_accounts.length > 0) {    JTable ldap_account_table=generateTable("LDAP ServerName,Type,Address",ldap_accounts);    data3.add(ldap_account_table);    scroll3.setViewportView(ldap_account_table);    container.add(scroll3);  }  container.setBackground(Color.decode("#FFFFFF"));  panelContent.add(header,BorderLayout.NORTH);  panelContent.add(container,BorderLayout.CENTER);  return panelContent;}  }
class C{  public GenericAttr(String name,String file) throws IOException, jasError {  FileInputStream inp;  try {    inp=new FileInputStream(file);  } catch (  FileNotFoundException e) {    throw new jasError("Generic atribute file " + file + " not found");  }  data=new byte[inp.available()];  inp.read(data);  inp.close();  attr_name=new AsciiCP(name);}  }
class C{  public static EspUpgradeApkResult upgradeApk(ProgressUpdateListener listener){  return UpgradeAdministrator.getInstance().upgradeApk(listener);}  }
class C{  public TFloatLongHashMap(){}  }
class C{  public synchronized void waitForNotification() throws InterruptedException {  while (!notified)   wait();}  }
class C{  public Enumeration elements(){  return perms.elements();}  }
class C{  private void addIdAndJndiLocationAttributes(){  buffer.append("    name='").append(ds.getId()).append("' \n");  buffer.append("    location='").append(ds.getJndiLocation()).append("' \n");}  }
class C{  @SuppressWarnings("unchecked") protected ConnectionFigure createFigure(){  ConnectionFigure f=(ConnectionFigure)prototype.clone();  getEditor().applyDefaultAttributesTo(f);  if (prototypeAttributes != null) {    for (    Map.Entry<AttributeKey,Object> entry : prototypeAttributes.entrySet()) {      f.set(entry.getKey(),entry.getValue());    }  }  return f;}  }
class C{  private boolean isError(IProblem problem,Type type){  return true;}  }
class C{  public static String allowEmpty(final String s){  return s == null ? "" : s;}  }
class C{  public void updateUserActivity(){  Set<Player> thisRun;synchronized (setLock) {    thisRun=Sets.newHashSet(staged);    staged.clear();  }  Instant now=Instant.now();  thisRun.stream().filter(null).forEach(null);}  }
class C{  public String taskName(){  return taskName;}  }
class C{  @Override public Object mergeTuples(Object tuple1,Object tuple2){  Object o;  try {    o=outputClass.newInstance();    for (    Map.Entry<PojoUtils.Getter,PojoUtils.Setter> g : inputFieldObjects[0].fieldMap.entrySet()) {      g.getValue().set(o,g.getKey().get(tuple1));    }    for (    Map.Entry<PojoUtils.Getter,PojoUtils.Setter> g : inputFieldObjects[1].fieldMap.entrySet()) {      g.getValue().set(o,g.getKey().get(tuple2));    }  } catch (  InstantiationException|IllegalAccessException e) {    throw new RuntimeException(e);  }  return o;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region1_A:    return stateVector[0] == State.main_region1_A;case integer_region_B:  return stateVector[1] == State.integer_region_B;case integer_region_C:return stateVector[1] == State.integer_region_C;case integer_region_D:return stateVector[1] == State.integer_region_D;case boolean_region_B:return stateVector[2] == State.boolean_region_B;case boolean_region_C:return stateVector[2] == State.boolean_region_C;case boolean_region_D:return stateVector[2] == State.boolean_region_D;case real_region_B:return stateVector[3] == State.real_region_B;case real_region_C:return stateVector[3] == State.real_region_C;case real_region_D:return stateVector[3] == State.real_region_D;case string_region_B:return stateVector[4] == State.string_region_B;case string_region_C:return stateVector[4] == State.string_region_C;case string_region_D:return stateVector[4] == State.string_region_D;default :return false;}}  }
class C{  public DispatchingEventReplayer<T> inDescendingOrder(){  return new DispatchingEventReplayer<>(causalOrderComparator,dispatcher,eventReplayer.inDescendingOrder());}  }
class C{  private Query createQuery(PriorityQueue<ScoreTerm> q){  BooleanQuery query=new BooleanQuery();  addToQuery(q,query);  return query;}  }
class C{  public Matrix4d rotateX(double ang){  return rotateX(ang,this);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected Node newNode(){  return new SVGOMFEComponentTransferElement();}  }
class C{  boolean isNotTabu(Operation oOperation){  return true;}  }
class C{  public List<Coord> readCoords(String shapefile){  List<Coord> list=new ArrayList<Coord>();  ShapeFileReader sfr=new ShapeFileReader();  Collection<SimpleFeature> features=sfr.readFileAndInitialize(shapefile);  for (  SimpleFeature feature : features) {    Geometry geo=(Geometry)feature.getDefaultGeometry();    if (geo instanceof Point) {      Point ps=(Point)geo;      list.add(new Coord(ps.getX(),ps.getY()));    } else {      throw new RuntimeException("The shapefile does not contain Point(s)!");    }  }  return list;}  }
class C{  public int read(byte[] bytes,int off,int len) throws IOException {  if (!buf.hasRemaining()) {    return -1;  }  len=Math.min(len,buf.remaining());  buf.get(bytes,off,len);  return len;}  }
class C{  public DialLayerChangeEvent(DialLayer layer){  super(layer);  this.layer=layer;}  }
class C{  public List<? extends LeagueRound> rounds(){  return service.query(AutoValueClasses.LEAGUE_ROUND);}  }
class C{  protected boolean applyFilter(Node node,int nodeType){  if (fFilter != null && (fWhatToShowFilter & nodeType) != 0) {    short code=fFilter.acceptNode(node);switch (code) {case NodeFilter.FILTER_REJECT:case NodeFilter.FILTER_SKIP:      return false;default :  }}return true;}  }
class C{  @Override public int length(){  return 0;}  }
class C{  public boolean interactionNode(){  return false;}  }
class C{  public static int translateStatusCode(int statusCode,MultiMap headers){  String translatedStatus=null;  if (statusCode > 200) {    translatedStatus=headers.get("x-translate-status-" + statusCode);    if (translatedStatus == null) {      translatedStatus=headers.get("x-translate-status-" + (statusCode / 100) + "xx");    }  }  if (translatedStatus != null) {    try {      return Integer.parseInt(translatedStatus);    } catch (    NumberFormatException e) {    }  }  return statusCode;}  }
class C{  public synchronized void waitPlay(){  while (state.get() == PlayerStates.READY_TO_PLAY) {    try {      wait();    } catch (    InterruptedException e) {      e.printStackTrace();    }  }}  }
class C{  public static EnumSet<FacetRangeInclude> parseParam(final String[] param){  if (null == param || 0 == param.length)   return EnumSet.of(LOWER);  final EnumSet<FacetRangeInclude> include=EnumSet.noneOf(FacetRangeInclude.class);  for (  final String o : param) {    include.add(FacetRangeInclude.get(o));  }  if (include.contains(FacetRangeInclude.ALL))   return EnumSet.allOf(FacetRangeInclude.class);  return include;}  }
class C{  @RequestMapping(value="/bars",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Bar> createBar(@RequestBody Bar bar) throws URISyntaxException {  log.debug("REST request to save Bar : {}",bar);  if (bar.getId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("bar","idexists","A new bar cannot already have an ID")).body(null);  }  Bar result=barRepository.save(bar);  return ResponseEntity.created(new URI("/api/bars/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("bar",result.getId().toString())).body(result);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getMnemonic().startsWith("UHASX")) {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UHASX");    translateAll(environment,instruction,"UHASX",instructions);  } else {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UHADDSUBX");    translateAll(environment,instruction,"UHADDSUBX",instructions);  }}  }
class C{  final public void disable_tracing(){}  }
class C{  public void onPause(){  broadcastManager.unregisterReceiver(receiver);  if (callback != null) {    Session session=Session.getActiveSession();    if (session != null) {      session.removeCallback(callback);    }  }}  }
class C{  private static double calculateThroughput(TableDescription tableDescription,double throughputRatio,boolean read){  if (read) {    return tableDescription.getProvisionedThroughput().getReadCapacityUnits() * throughputRatio;  }  return tableDescription.getProvisionedThroughput().getWriteCapacityUnits() * throughputRatio;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Widget w=getWidget(stack);  return (w != null) ? w.containers() : null;}  }
class C{  protected BinaryImpl(){  super();}  }
class C{  public InlineQueryResultCachedPhotoBuilder photoFileId(String photoFileId){  this.photo_file_id=photoFileId;  return this;}  }
class C{  public int drawSpline(final Pattern pattern,final List<Vector> nodevectors,final double tension,final double bias,final double continuity,final double quality,final double radius,final boolean filled) throws MaxChangedBlocksException {  Set<Vector> vset=new HashSet<Vector>();  final List<Node> nodes=new ArrayList<Node>(nodevectors.size());  final KochanekBartelsInterpolation interpol=new KochanekBartelsInterpolation();  for (  final Vector nodevector : nodevectors) {    final Node n=new Node(nodevector);    n.setTension(tension);    n.setBias(bias);    n.setContinuity(continuity);    nodes.add(n);  }  interpol.setNodes(nodes);  final double splinelength=interpol.arcLength(0,1);  for (double loop=0; loop <= 1; loop+=1D / splinelength / quality) {    final Vector tipv=interpol.getPosition(loop);    final int tipx=(int)Math.round(tipv.getX());    final int tipy=(int)Math.round(tipv.getY());    final int tipz=(int)Math.round(tipv.getZ());    if (radius == 0) {      setBlock(tipx,tipy,tipz,pattern.next(tipx,tipy,tipz));    } else {      vset.add(new Vector(tipx,tipy,tipz));    }  }  if (radius != 0) {    vset=this.getBallooned(vset,radius);    if (!filled) {      vset=this.getHollowed(vset);    }    return this.setBlocks(vset,pattern);  }  return changes;}  }
class C{  protected void parsea() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float rx=parseFloat();skipCommaSpaces();float ry=parseFloat();skipCommaSpaces();float ax=parseFloat();skipCommaSpaces();boolean laf;switch (current) {default :reportUnexpected(current);return;case '0':laf=false;break;case '1':laf=true;break;}current=reader.read();skipCommaSpaces();boolean sf;switch (current) {default :reportUnexpected(current);return;case '0':sf=false;break;case '1':sf=true;break;}current=reader.read();skipCommaSpaces();float x=parseFloat();skipCommaSpaces();float y=parseFloat();pathHandler.arcRel(rx,ry,ax,laf,sf,x,y);expectNumber=skipCommaSpaces2();}}  }
class C{  public synchronized void interfaceUpdate(DispatchContext dctx) throws GenericServiceException {  if (!inheritedParameters) {    if (this.engineName.equals("group") && implServices.size() == 0) {      GroupModel group=internalGroup;      if (group == null) {        group=ServiceGroupReader.getGroupModel(this.location);      }      if (group != null) {        for (        GroupServiceModel sm : group.getServices()) {          implServices.add(new ModelServiceIface(sm.getName(),sm.isOptional()));          if (Debug.verboseOn())           Debug.logVerbose("Adding service [" + sm.getName() + "] as interface of: ["+ this.name+ "]",module);        }      }    }    if (UtilValidate.isNotEmpty(implServices) && dctx != null) {      for (      ModelServiceIface iface : implServices) {        String serviceName=iface.getService();        boolean optional=iface.isOptional();        ModelService model=dctx.getModelService(serviceName);        if (model != null) {          for (          ModelParam newParam : model.contextParamList) {            ModelParam existingParam=this.contextInfo.get(newParam.name);            if (existingParam != null) {              if (!"INOUT".equals(existingParam.mode) && !existingParam.mode.equals(newParam.mode)) {                existingParam.mode="INOUT";                if (existingParam.optional || newParam.optional) {                  existingParam.optional=true;                }              }            } else {              ModelParam newParamClone=new ModelParam(newParam);              if (optional) {                newParamClone.optional=true;              }              this.addParam(newParamClone);            }          }        } else {          Debug.logWarning("Inherited model [" + serviceName + "] not found for ["+ this.name+ "]",module);        }      }    }    if (UtilValidate.isNotEmpty(overrideParameters)) {      for (      ModelParam overrideParam : overrideParameters) {        ModelParam existingParam=contextInfo.get(overrideParam.name);        contextParamList.remove(existingParam);        if (existingParam != null) {          if (UtilValidate.isNotEmpty(overrideParam.type)) {            existingParam.type=overrideParam.type;          }          if (UtilValidate.isNotEmpty(overrideParam.mode)) {            existingParam.mode=overrideParam.mode;          }          if (UtilValidate.isNotEmpty(overrideParam.entityName)) {            existingParam.entityName=overrideParam.entityName;          }          if (UtilValidate.isNotEmpty(overrideParam.fieldName)) {            existingParam.fieldName=overrideParam.fieldName;          }          if (UtilValidate.isNotEmpty(overrideParam.formLabel)) {            existingParam.formLabel=overrideParam.formLabel;          }          if (overrideParam.getDefaultValue() != null) {            existingParam.copyDefaultValue(overrideParam);          }          if (overrideParam.overrideFormDisplay) {            existingParam.formDisplay=overrideParam.formDisplay;          }          if (overrideParam.overrideOptional) {            existingParam.optional=overrideParam.optional;          }          addParam(existingParam);        } else {          Debug.logWarning("Override param found but no parameter existing; ignoring: " + overrideParam.name,module);        }      }    }    this.inheritedParameters=true;  }}  }
class C{  public YamlConfiguration(){}  }
class C{  public static void createUploadDir(Server server,String uploadDir) throws DockerJSONException {  File uploadFolder=new File(uploadDir + "/uploadDir_" + server.getContainerID());  if (!uploadFolder.exists()) {    uploadFolder.mkdir();  }}  }
class C{  public boolean outputTypeSet(int num){  return (m_outputTypes.isInRange(num));}  }
class C{  public boolean initializing(){  return state == ShardRoutingState.INITIALIZING;}  }
class C{  protected static void createFile(IgfsEx igfs,IgfsPath file,boolean overwrite,@Nullable byte[]... chunks) throws IOException {  OutputStream os=null;  try {    os=igfs.create(file,overwrite);    writeFileChunks(os,chunks);  }  finally {    U.closeQuiet(os);    awaitFileClose(igfs,file);  }}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap notations;  DocumentType docType;  Node retval;  Element elem;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    notations=docType.getNotations();    assertNotNull("notationsNotNull",notations);    elem=doc.createElement("br");    try {      retval=notations.setNamedItem(elem);      fail("throw_HIER_OR_NO_MOD_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 3:        break;case 7:      break;default :    throw ex;}}}}  }
class C{  @SuppressWarnings("unchecked") @Override public int compare(E e1,E e2){  Comparable<? super E> ce1=(Comparable<? super E>)e1;  int ret=ce1.compareTo(e2);  if (!ascending) {    ret=0 - ret;  }  return ret;}  }
class C{  public long start_data(){  return Long.parseLong(fields[44]);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData && z1 != 0) {          outputFile.setValue(row,col,1 / z1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public JButton(String text,Icon icon){  setModel(new DefaultButtonModel());  init(text,icon);}  }
class C{  @Override public void update(final int delta){  super.update(delta);  if (!textIndicators.isEmpty()) {    final Iterator<TextIndicator> iter=textIndicators.iterator();    boolean changed=false;    while (iter.hasNext()) {      final TextIndicator textIndicator=iter.next();      if (textIndicator.addAge(delta) > 2000L) {        iter.remove();        changed=true;      }    }    if (changed) {      fireChange(PROP_TEXT_INDICATORS);    }  }}  }
class C{  public static void verifySenderPausedState(String senderId){  Set<GatewaySender> senders=cache.getGatewaySenders();  GatewaySender sender=null;  for (  GatewaySender s : senders) {    if (s.getId().equals(senderId)) {      sender=s;      break;    }  }  assertTrue(sender.isPaused());}  }
class C{  public Complex over(double a){  return divide(this,a);}  }
class C{  public static final Map<String,List<String>> buildSchemaLocationMap(final String schemaLocation){  return buildSchemaLocationMap(new HashMap<String,List<String>>(),schemaLocation);}  }
class C{  private static X509Certificate[] createCertChain(byte[][] certificatesBytes) throws IOException {  if (certificatesBytes == null) {    return null;  }  X509Certificate[] certificates=new X509Certificate[certificatesBytes.length];  for (int i=0; i < certificatesBytes.length; i++) {    certificates[i]=OpenSSLX509Certificate.fromX509Der(certificatesBytes[i]);  }  return certificates;}  }
class C{  public void displayMemoryUsage(){  final long startUpTime=System.currentTimeMillis();  if (verbose) {    try {      if (runId != null) {        Utilities.runBjobs(runId);      }      while (System.currentTimeMillis() - startUpTime > maximumLifeMillis) {        System.out.println(Utilities.getTimeNow() + " ----------------------------------------------");        statsUtil.displayRunningJobs();        if (runId != null) {          Utilities.runBjobs(runId);        }        statsUtil.displayMemInfo();        statsUtil.displayRunningJobs();        if (runId != null) {          Utilities.runBjobs(runId);        }        Thread.sleep(timeDelay * 1000);      }    } catch (    Exception ex) {      LOGGER.warn(" Problems parsing bjobs command ...: " + ex);    }  }}  }
class C{  public SearchQueryHQL(final String searchQuery,final String countQuery,final List<Object> params){  this.searchQuery=searchQuery;  this.countQuery=countQuery;  if (params != null) {    this.params=params.toArray();  }}  }
class C{  public String unsubscribe() throws SaaSApplicationException {  if (model.getSubscription() == null || model.getSubscription().getSubscriptionId() == null) {    ui.getRequest().setAttribute(Constants.REQ_ATTR_ERROR_KEY,BaseBean.ERROR_SUBSCRIPTION_NOT_SET);    return null;  }  if (subscriptionsHelper.validateSubscriptionStatus(model.getSubscription(),getSubscriptionDetailsService())) {    ui.handleError(null,ERROR_SUBSCRIPTION_NOT_ACCESSIBLE,model.getSubscription().getSubscriptionId());    return OUTCOME_SUBSCRIPTION_NOT_AVAILABLE;  }  try {    getSessionService().deleteServiceSessionsForSubscription(model.getSubscription().getKey());    boolean rc=getSubscriptionService().unsubscribeFromService(model.getSubscription().getSubscriptionId());    if (rc) {      sessionBean.setSelectedSubscriptionId(null);      ui.handle(INFO_SUBSCRIPTION_DELETED,model.getSubscription().getSubscriptionId());    } else {      ui.handleProgress();      disableTabsForWaitingApproval(true);      return OUTCOME_SUBSCRIPTION_NEED_APPROVAL;    }  } catch (  ObjectNotFoundException e) {    if (e.getDomainObjectClassEnum().equals(ClassEnum.SUBSCRIPTION)) {      throw new ConcurrentModificationException();    } else {      throw e;    }  }  menuBean.resetMenuVisibility();  model.setSubscription(null);  model.resetUsageLicenseMap();  if (ui.getRequest().getServletPath().startsWith(Marketplace.MARKETPLACE_ROOT)) {    return OUTCOME_SERVICE_UNSUBSCRIBE;  }  return OUTCOME_SUCCESS;}  }
class C{  public PriorityQueue(int initialCapacity,Comparator<? super E> comparator){  if (initialCapacity < 1) {    throw new IllegalArgumentException("initialCapacity < 1: " + initialCapacity);  }  elements=newElementArray(initialCapacity);  this.comparator=comparator;}  }
class C{  public static boolean isFinal(int mod){  return (mod & FINAL) != 0;}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_STATUS_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}"+ "/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}"+ "/partitionValues/{partitionValue}/businessObjectDataVersions/{businessObjectDataVersion}",method=RequestMethod.PUT) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_STATUS_PUT) public BusinessObjectDataStatusUpdateResponse updateBusinessObjectDataStatus(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@RequestBody BusinessObjectDataStatusUpdateRequest request){  BusinessObjectDataStatusUpdateResponse businessObjectDataStatusUpdateResponse=businessObjectDataStatusService.updateBusinessObjectDataStatus(new BusinessObjectDataKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,new ArrayList<String>(),businessObjectDataVersion),request);  notificationEventService.processBusinessObjectDataNotificationEventAsync(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG,businessObjectDataStatusUpdateResponse.getBusinessObjectDataKey(),businessObjectDataStatusUpdateResponse.getStatus(),businessObjectDataStatusUpdateResponse.getPreviousStatus());  return businessObjectDataStatusUpdateResponse;}  }
class C{  public T nonInteractionHit(String value){  setString(NON_INTERACTION_HIT,value);  return (T)this;}  }
class C{  public double nonSmoothValue(DoubleMatrix1D parIn){  MGMParams par=new MGMParams(parIn,p,lsum);  DoubleMatrix2D weightMat=alg.multOuter(weights,weights,null);  DoubleMatrix2D betaWeight=weightMat.viewPart(0,0,p,p);  DoubleMatrix2D absBeta=par.beta.copy().assign(Functions.abs);  double betaNorms=absBeta.assign(betaWeight,Functions.mult).zSum();  double thetaNorms=0;  for (int i=0; i < p; i++) {    for (int j=0; j < lcumsum.length - 1; j++) {      DoubleMatrix1D tempVec=par.theta.viewColumn(i).viewPart(lcumsum[j],l[j]);      thetaNorms+=weightMat.get(i,p + j) * Math.sqrt(alg.norm2(tempVec));    }  }  double phiNorms=0;  for (int i=0; i < lcumsum.length - 1; i++) {    for (int j=i + 1; j < lcumsum.length - 1; j++) {      DoubleMatrix2D tempMat=par.phi.viewPart(lcumsum[i],lcumsum[j],l[i],l[j]);      phiNorms+=weightMat.get(p + i,p + j) * alg.normF(tempMat);    }  }  return lambda.get(0) * betaNorms + lambda.get(1) * thetaNorms + lambda.get(2) * phiNorms;}  }
class C{  public static void info(int WindowNo,Container c,String AD_Message){  info(WindowNo,c,AD_Message,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.008 -0500",hash_original_method="CC3C835C7DC734EC9385EF1867371AFC",hash_generated_method="8B39CF26E6726B55D58D9E9B5459D2BB") public static void close(FileDescriptor fd) throws IOException {}  }
class C{  public BinomialMinPQ(){  comp=new MyComparator();}  }
class C{  public void reportDeferredDiagnostic(){  if (deferredDiagnosticKind != null) {    if (deferredDiagnosticArg == null)     logMandatoryNote(deferredDiagnosticSource,deferredDiagnosticKind.getKey(prefix)); else     logMandatoryNote(deferredDiagnosticSource,deferredDiagnosticKind.getKey(prefix),deferredDiagnosticArg);    if (!verbose)     logMandatoryNote(deferredDiagnosticSource,prefix + ".recompile");  }}  }
class C{  public static String encodeURL(String uri){  CharBuffer cb=CharBuffer.allocate();  for (int i=0; i < uri.length(); i++) {    char ch=uri.charAt(i);switch (ch) {case '<':case '>':case ' ':case '%':case '\'':case '\"':      cb.append('%');    cb.append(encodeHex(ch >> 4));  cb.append(encodeHex(ch));break;default :cb.append(ch);}}return cb.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:58.284 -0400",hash_original_method="7522AD53308CD10F1544E38D1EB762CF",hash_generated_method="CE79928AEF3A763B2BF787801BBC2702") public void cancel(){  final int state=getInfo().getState();  if (state == PrintJobInfo.STATE_QUEUED || state == PrintJobInfo.STATE_STARTED || state == PrintJobInfo.STATE_BLOCKED || state == PrintJobInfo.STATE_FAILED) {    mPrintManager.cancelPrintJob(mCachedInfo.getId());  }}  }
class C{  final int parseIPAddress(String ipAddressStr){  int result=0;  if (ipAddressStr == null) {    throw new IllegalArgumentException();  }  try {    String tmp=ipAddressStr;    int offset=0;    for (int i=0; i < 3; i++) {      int index=tmp.indexOf('.');      if (index != -1) {        String numberStr=tmp.substring(0,index);        int number=Integer.parseInt(numberStr);        if ((number < 0) || (number > 255)) {          throw new IllegalArgumentException("Invalid IP Address [" + ipAddressStr + "]");        }        result+=number << offset;        offset+=8;        tmp=tmp.substring(index + 1);      } else {        throw new IllegalArgumentException("Invalid IP Address [" + ipAddressStr + "]");      }    }    if (tmp.length() > 0) {      int number=Integer.parseInt(tmp);      if ((number < 0) || (number > 255)) {        throw new IllegalArgumentException("Invalid IP Address [" + ipAddressStr + "]");      }      result+=number << offset;      ipAddress=result;    } else {      throw new IllegalArgumentException("Invalid IP Address [" + ipAddressStr + "]");    }  } catch (  NoSuchElementException ex) {    throw new IllegalArgumentException("Invalid IP Address [" + ipAddressStr + "]",ex);  }catch (  NumberFormatException ex) {    throw new IllegalArgumentException("Invalid IP Address [" + ipAddressStr + "]",ex);  }  return result;}  }
class C{  private static SocketImpl createSocketImpl(){  try {    return socketImplCtor.newInstance();  } catch (  InstantiationException x) {    throw new AssertionError(x);  }catch (  IllegalAccessException x) {    throw new AssertionError(x);  }catch (  InvocationTargetException x) {    throw new AssertionError(x);  }}  }
class C{  public static int intersectSweptSphereTriangle(double centerX,double centerY,double centerZ,double radius,double velX,double velY,double velZ,double v0X,double v0Y,double v0Z,double v1X,double v1Y,double v1Z,double v2X,double v2Y,double v2Z,double epsilon,double maxT,Vector4d pointAndTime){  double v10X=v1X - v0X;  double v10Y=v1Y - v0Y;  double v10Z=v1Z - v0Z;  double v20X=v2X - v0X;  double v20Y=v2Y - v0Y;  double v20Z=v2Z - v0Z;  double a=v10Y * v20Z - v20Y * v10Z;  double b=v10Z * v20X - v20Z * v10X;  double c=v10X * v20Y - v20X * v10Y;  double d=-(a * v0X + b * v0Y + c * v0Z);  double invLen=1.0 / Math.sqrt(a * a + b * b + c * c);  double signedDist=(a * centerX + b * centerY + c * centerZ + d) * invLen;  double dot=(a * velX + b * velY + c * velZ) * invLen;  if (dot < epsilon && dot > -epsilon)   return -1;  double pt0=(radius - signedDist) / dot;  if (pt0 > maxT)   return -1;  double pt1=(-radius - signedDist) / dot;  double p0X=centerX - radius * a * invLen + velX * pt0;  double p0Y=centerY - radius * b * invLen + velY * pt0;  double p0Z=centerZ - radius * c * invLen + velZ * pt0;  boolean insideTriangle=testPointInTriangle(p0X,p0Y,p0Z,v0X,v0Y,v0Z,v1X,v1Y,v1Z,v2X,v2Y,v2Z);  if (insideTriangle) {    pointAndTime.x=p0X;    pointAndTime.y=p0Y;    pointAndTime.z=p0Z;    pointAndTime.w=pt0;    return POINT_ON_TRIANGLE_FACE;  }  int isect=-1;  double t0=maxT;  double A=velX * velX + velY * velY + velZ * velZ;  double radius2=radius * radius;  double centerV0X=centerX - v0X;  double centerV0Y=centerY - v0Y;  double centerV0Z=centerZ - v0Z;  double B0=2.0 * (velX * centerV0X + velY * centerV0Y + velZ * centerV0Z);  double C0=centerV0X * centerV0X + centerV0Y * centerV0Y + centerV0Z * centerV0Z - radius2;  double root0=computeLowestRoot(A,B0,C0,t0);  if (root0 < t0) {    pointAndTime.x=v0X;    pointAndTime.y=v0Y;    pointAndTime.z=v0Z;    pointAndTime.w=root0;    t0=root0;    isect=POINT_ON_TRIANGLE_VERTEX;  }  double centerV1X=centerX - v1X;  double centerV1Y=centerY - v1Y;  double centerV1Z=centerZ - v1Z;  double centerV1Len=centerV1X * centerV1X + centerV1Y * centerV1Y + centerV1Z * centerV1Z;  double B1=2.0 * (velX * centerV1X + velY * centerV1Y + velZ * centerV1Z);  double C1=centerV1Len - radius2;  double root1=computeLowestRoot(A,B1,C1,t0);  if (root1 < t0) {    pointAndTime.x=v1X;    pointAndTime.y=v1Y;    pointAndTime.z=v1Z;    pointAndTime.w=root1;    t0=root1;    isect=POINT_ON_TRIANGLE_VERTEX;  }  double centerV2X=centerX - v2X;  double centerV2Y=centerY - v2Y;  double centerV2Z=centerZ - v2Z;  double B2=2.0 * (velX * centerV2X + velY * centerV2Y + velZ * centerV2Z);  double C2=centerV2X * centerV2X + centerV2Y * centerV2Y + centerV2Z * centerV2Z - radius2;  double root2=computeLowestRoot(A,B2,C2,t0);  if (root2 < t0) {    pointAndTime.x=v2X;    pointAndTime.y=v2Y;    pointAndTime.z=v2Z;    pointAndTime.w=root2;    t0=root2;    isect=POINT_ON_TRIANGLE_VERTEX;  }  double velLen=velX * velX + velY * velY + velZ * velZ;  double len10=v10X * v10X + v10Y * v10Y + v10Z * v10Z;  double baseTo0Len=centerV0X * centerV0X + centerV0Y * centerV0Y + centerV0Z * centerV0Z;  double v10Vel=(v10X * velX + v10Y * velY + v10Z * velZ);  double A10=len10 * -velLen + v10Vel * v10Vel;  double v10BaseTo0=v10X * -centerV0X + v10Y * -centerV0Y + v10Z * -centerV0Z;  double velBaseTo0=velX * -centerV0X + velY * -centerV0Y + velZ * -centerV0Z;  double B10=len10 * 2 * velBaseTo0 - 2 * v10Vel * v10BaseTo0;  double C10=len10 * (radius2 - baseTo0Len) + v10BaseTo0 * v10BaseTo0;  double root10=computeLowestRoot(A10,B10,C10,t0);  double f10=(v10Vel * root10 - v10BaseTo0) / len10;  if (f10 >= 0.0 && f10 <= 1.0 && root10 < t0) {    pointAndTime.x=v0X + f10 * v10X;    pointAndTime.y=v0Y + f10 * v10Y;    pointAndTime.z=v0Z + f10 * v10Z;    pointAndTime.w=root10;    t0=root10;    isect=POINT_ON_TRIANGLE_EDGE;  }  double len20=v20X * v20X + v20Y * v20Y + v20Z * v20Z;  double v20Vel=(v20X * velX + v20Y * velY + v20Z * velZ);  double A20=len20 * -velLen + v20Vel * v20Vel;  double v20BaseTo0=v20X * -centerV0X + v20Y * -centerV0Y + v20Z * -centerV0Z;  double B20=len20 * 2 * velBaseTo0 - 2 * v20Vel * v20BaseTo0;  double C20=len20 * (radius2 - baseTo0Len) + v20BaseTo0 * v20BaseTo0;  double root20=computeLowestRoot(A20,B20,C20,t0);  double f20=(v20Vel * root20 - v20BaseTo0) / len20;  if (f20 >= 0.0 && f20 <= 1.0 && root20 < pt1) {    pointAndTime.x=v0X + f20 * v20X;    pointAndTime.y=v0Y + f20 * v20Y;    pointAndTime.z=v0Z + f20 * v20Z;    pointAndTime.w=root20;    t0=root20;    isect=POINT_ON_TRIANGLE_EDGE;  }  double v21X=v2X - v1X;  double v21Y=v2Y - v1Y;  double v21Z=v2Z - v1Z;  double len21=v21X * v21X + v21Y * v21Y + v21Z * v21Z;  double baseTo1Len=centerV1Len;  double v21Vel=(v21X * velX + v21Y * velY + v21Z * velZ);  double A21=len21 * -velLen + v21Vel * v21Vel;  double v21BaseTo1=v21X * -centerV1X + v21Y * -centerV1Y + v21Z * -centerV1Z;  double velBaseTo1=velX * -centerV1X + velY * -centerV1Y + velZ * -centerV1Z;  double B21=len21 * 2 * velBaseTo1 - 2 * v21Vel * v21BaseTo1;  double C21=len21 * (radius2 - baseTo1Len) + v21BaseTo1 * v21BaseTo1;  double root21=computeLowestRoot(A21,B21,C21,t0);  double f21=(v21Vel * root21 - v21BaseTo1) / len21;  if (f21 >= 0.0 && f21 <= 1.0 && root21 < t0) {    pointAndTime.x=v1X + f21 * v21X;    pointAndTime.y=v1Y + f21 * v21Y;    pointAndTime.z=v1Z + f21 * v21Z;    pointAndTime.w=root21;    t0=root21;    isect=POINT_ON_TRIANGLE_EDGE;  }  return isect;}  }
class C{  public String globalInfo(){  return "Display static images";}  }
class C{  public URI resolve(URI uri){  if (isOpaque() || uri.isAbsolute()) {    return uri;  }  String thatPath=uri.getPath();  String thatQuery=uri.getQuery();  String thatAuthority=uri.getAuthority();  String thatFragment=uri.getFragment();  try {    if (thatFragment != null && (uri.getScheme() == null && thatPath == null && thatQuery == null && thatAuthority == null)) {      return new URI(getScheme(),getAuthority(),getPath(),getQuery(),thatFragment);    }    if (thatAuthority != null) {      return new URI(getScheme(),thatAuthority,thatPath,thatQuery,thatFragment);    }    if (thatPath != null && thatPath.charAt(0) == PATH_SEPARATOR) {      return new URI(getScheme(),getAuthority(),thatPath,thatQuery,thatFragment);    }    String thisPath=getPath();    if (thisPath != null) {      int index=thisPath.lastIndexOf(PATH_SEPARATOR);      if (index != -1) {        thisPath=thisPath.substring(index);      }    }    thisPath+=PATH_SEPARATOR + thatPath;    return new URI(getScheme(),getAuthority(),thisPath,thatQuery,thatFragment).normalize();  } catch (  URISyntaxException use) {    throw new IllegalArgumentException(use.getMessage());  }}  }
class C{  public final void testRemoveHelperTextColorIdsFromCollection(){  Collection<Integer> helperTextColors=new LinkedList<>();  helperTextColors.add(android.R.color.black);  helperTextColors.add(android.R.color.darker_gray);  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTextColorIds(helperTextColors);  passwordEditText.addAllHelperTextColorIds(android.R.color.white);  passwordEditText.removeAllHelperTextColorIds(helperTextColors);  passwordEditText.removeAllHelperTextColorIds(helperTextColors);  Collection<Integer> helperTextColors2=passwordEditText.getHelperTextColors();  assertEquals(1,helperTextColors2.size());  assertEquals(getContext().getResources().getColor(android.R.color.white),(int)passwordEditText.getHelperTextColors().iterator().next());}  }
class C{  public VNXeCommandJob createShareForSnapshot(NfsShareCreateForSnapParam createParam){  return postRequestAsync(createParam);}  }
class C{  public com.linkedin.camus.example.records.DummyLog.Builder clearLogTime(){  fieldSetFlags()[1]=false;  return this;}  }
class C{  public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  public boolean isSetResponse(){  return this.response != null;}  }
class C{  private ByteBuffer decode() throws PDFParseException {  buf.rewind();  ByteArrayOutputStream baos=new ByteArrayOutputStream();  while (true) {    int first=readHexDigit();    int second=readHexDigit();    if (first == -1) {      break;    } else     if (second == -1) {      baos.write((byte)(first << 4));      break;    } else {      baos.write((byte)((first << 4) + second));    }  }  return ByteBuffer.wrap(baos.toByteArray());}  }
class C{  public static int pointerSizeBytes(){  return SmHelper.pointerSizeBytes();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_ENTITY___TRACE_OPTIONS_1:    return getTraceOptions_1();case UmplePackage.TRACE_ENTITY___TRACE_ENTITY_1:  return getTrace_entity_1();case UmplePackage.TRACE_ENTITY___ANONYMOUS_TRACE_ENTITY_11:return getAnonymous_traceEntity_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static Bitmap doBlur(Bitmap sentBitmap,int radius,boolean canReuseInBitmap){  Bitmap bitmap;  if (canReuseInBitmap) {    bitmap=sentBitmap;  } else {    bitmap=sentBitmap.copy(sentBitmap.getConfig(),true);  }  if (radius < 1) {    return (null);  }  int w=bitmap.getWidth();  int h=bitmap.getHeight();  int[] pix=new int[w * h];  bitmap.getPixels(pix,0,w,0,0,w,h);  int wm=w - 1;  int hm=h - 1;  int wh=w * h;  int div=radius + radius + 1;  int r[]=new int[wh];  int g[]=new int[wh];  int b[]=new int[wh];  int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;  int vmin[]=new int[Math.max(w,h)];  int divsum=(div + 1) >> 1;  divsum*=divsum;  int dv[]=new int[256 * divsum];  for (i=0; i < 256 * divsum; i++) {    dv[i]=(i / divsum);  }  yw=yi=0;  int[][] stack=new int[div][3];  int stackpointer;  int stackstart;  int[] sir;  int rbs;  int r1=radius + 1;  int routsum, goutsum, boutsum;  int rinsum, ginsum, binsum;  for (y=0; y < h; y++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    for (i=-radius; i <= radius; i++) {      p=pix[yi + Math.min(wm,Math.max(i,0))];      sir=stack[i + radius];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rbs=r1 - Math.abs(i);      rsum+=sir[0] * rbs;      gsum+=sir[1] * rbs;      bsum+=sir[2] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }    }    stackpointer=radius;    for (x=0; x < w; x++) {      r[yi]=dv[rsum];      g[yi]=dv[gsum];      b[yi]=dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (y == 0) {        vmin[x]=Math.min(x + radius + 1,wm);      }      p=pix[yw + vmin[x]];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[(stackpointer) % div];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi++;    }    yw+=w;  }  for (x=0; x < w; x++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    yp=-radius * w;    for (i=-radius; i <= radius; i++) {      yi=Math.max(0,yp) + x;      sir=stack[i + radius];      sir[0]=r[yi];      sir[1]=g[yi];      sir[2]=b[yi];      rbs=r1 - Math.abs(i);      rsum+=r[yi] * rbs;      gsum+=g[yi] * rbs;      bsum+=b[yi] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }      if (i < hm) {        yp+=w;      }    }    yi=x;    stackpointer=radius;    for (y=0; y < h; y++) {      pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (x == 0) {        vmin[y]=Math.min(y + r1,hm) * w;      }      p=x + vmin[y];      sir[0]=r[p];      sir[1]=g[p];      sir[2]=b[p];      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[stackpointer];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi+=w;    }  }  bitmap.setPixels(pix,0,w,0,0,w,h);  return (bitmap);}  }
class C{  public void removeCompressedThumbnail(){  mData.setCompressedThumbnail(null);}  }
class C{  @Override public ContextedException addContextValue(final String label,final Object value){  exceptionContext.addContextValue(label,value);  return this;}  }
class C{  public static String leftPad(String s,int minLength,String filling){  int ln=s.length();  if (minLength <= ln) {    return s;  }  StringBuilder res=new StringBuilder(minLength);  int dif=minLength - ln;  int fln=filling.length();  if (fln == 0) {    throw new IllegalArgumentException("The \"filling\" argument can't be 0 length string.");  }  int cnt=dif / fln;  for (int i=0; i < cnt; i++) {    res.append(filling);  }  cnt=dif % fln;  for (int i=0; i < cnt; i++) {    res.append(filling.charAt(i));  }  res.append(s);  return res.toString();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public char charAt(int index){  return m_str.charAt(index);}  }
class C{  private boolean hasMinimumRegistryInfo(Resource resource){  if (missingMetadata) {    return false;  }  return resource.isPublished();}  }
class C{  public static final Criterion sizeGreaterThan(long value){  return new SizeCriterion(new NumericOperator(value,NumericComparator.GREATER_THAN));}  }
class C{  protected void registerBuildingAttributes(){  addBuildingAttributeProcessor(new SkinLmlAttribute(),"skin");  addBuildingAttributeProcessor(new StyleLmlAttribute(),"style","class");  addBuildingAttributeProcessor(new OnResultInitialLmlAttribute(),"result","onResult");  addBuildingAttributeProcessor(new ToButtonTableLmlAttribute(),"toButtonTable");  addBuildingAttributeProcessor(new ToDialogTableLmlAttribute(),"toDialogTable");  addBuildingAttributeProcessor(new ToTitleTableLmlAttribute(),"toTitleTable");  addBuildingAttributeProcessor(new TextLmlAttribute(),"text","value");  addBuildingAttributeProcessor(new HorizontalLmlAttribute(),"horizontal");  addBuildingAttributeProcessor(new VerticalLmlAttribute(),"vertical");  addBuildingAttributeProcessor(new RangeInitialValueLmlAttribute(),"value");  addBuildingAttributeProcessor(new RangeMaxValueLmlAttribute(),"max");  addBuildingAttributeProcessor(new RangeMinValueLmlAttribute(),"min");  addBuildingAttributeProcessor(new RangeStepSizeLmlAttribute(),"stepSize","step");  addBuildingAttributeProcessor(new TooltipManagerLmlAttribute(),"tooltipManager");}  }
class C{  public void parse(String systemId) throws SAXException, IOException {  parse(new InputSource(systemId));}  }
class C{  public String kernelTipText(){  return "The kernel to use.";}  }
class C{  public void invoke(long window,int button,int action,int mods){}  }
class C{  @Nullable public GridCloseableIterator<Map.Entry<byte[],byte[]>> rawIterator(@Nullable String spaceName,int part) throws IgniteCheckedException {  try {    IgniteSpiCloseableIterator<Map.Entry<byte[],byte[]>> it=getSpi().rawIterator(spaceName,part);    return it == null ? new GridEmptyCloseableIterator<Map.Entry<byte[],byte[]>>() : new GridSpiCloseableIteratorWrapper<>(it);  } catch (  IgniteSpiException e) {    throw new IgniteCheckedException("Failed to get iterator over swap space [space=" + spaceName + ']',e);  }}  }
class C{  private byte skipTagBackward(){  int initialCharIndex=charIndex;  while (charIndex > 0) {    lastChar=text.charAt(--charIndex);    if (lastChar == '<') {      return Character.DIRECTIONALITY_WHITESPACE;    }    if (lastChar == '>') {      break;    }    if (lastChar == '"' || lastChar == '\'') {      char quote=lastChar;      while (charIndex > 0 && (lastChar=text.charAt(--charIndex)) != quote) {      }    }  }  charIndex=initialCharIndex;  lastChar='>';  return Character.DIRECTIONALITY_OTHER_NEUTRALS;}  }
class C{  private static KeePassFile createEmptyDatabase() throws Exception {  InputStream inputStream=SimpleDatabase.class.getClassLoader().getResourceAsStream("base.kdbx.xml");  return getSerializer().read(KeePassFile.class,inputStream);}  }
class C{  public String toString(String snippet){  final StringBuilder core=corePropList();  if (core == null)   return null;  core.ensureCapacity(core.length() + snippet.length() * 2);  core.insert(0,'{');  core.append(",snippet=").append(crypt.simpleEncode(snippet));  core.append('}');  return core.toString();}  }
class C{  public String signMessage(String message) throws IllegalStateException {  Validate.notNull(getSignAlgorithm(),"Signature Algorithm");  Validate.notNull(getPrivateKey(),"PrivateKey for signing");  Validate.notEmpty(message,"message string");  log.debug("Signing  message " + message + ", sigAlg "+ getSignAlgorithm());  try {    SignatureAlgorithm algo=SignatureAlgorithm.getSignatureAlgorithmForURI(getSignAlgorithm());    Signature sig=Signature.getInstance(algo.getAlgorithmName());    sig.initSign(this.privateKey);    byte[] messageBytes=message.getBytes("UTF-8");    sig.update(messageBytes);    byte[] sigBytes=sig.sign();    String signature=SharedUtils.encodeBytes(sigBytes);    log.debug("signature: " + signature);    return signature;  } catch (  Exception e) {    log.error("Failed to sign the message: exception cause",e);    throw new IllegalStateException(e);  }}  }
class C{  public final int size(){  return mCount.size();}  }
class C{  protected final void assertionError(String message,Throwable cause){  StringBuilder b=new StringBuilder();  if (cdl.getCount() != 0) {    b.append("(active) ");  }  b.append(message);  List<Throwable> err=errors;  if (!err.isEmpty()) {    b.append(" (+ ").append(err.size()).append(" errors)");  }  AssertionError e=new AssertionError(b.toString(),cause);  for (  Throwable t : err) {    e.addSuppressed(t);  }  throw e;}  }
