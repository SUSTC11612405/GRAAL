class C{  public boolean isClassContinue(){  return mCode >= 100 && mCode < 200;}  }
class C{  public void removeChangeListener(ChangeListener listener){  listenerList.remove(ChangeListener.class,listener);}  }
class C{  public FeatureQuery(URL feedUrl){  super(feedUrl);}  }
class C{  @Nullable public ClusterHealthStatus clusterStatus(){  return clusterStatus;}  }
class C{  boolean persistValue(int id){  int bit=1 << id;  return (persistValue & bit) != 0;}  }
class C{  @Override public boolean applicable(Example e){  boolean success=true;  for (int i=0; i < literals.length; i++) {    int exampleValue=(int)e.getValue(literals[i].getAttribute());    int ruleValue=literals[i].getValue();    if (exampleValue != ruleValue) {      success=false;      break;    }  }  return success;}  }
class C{  public final boolean isTransferable() throws GSSException {  return false;}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public JmDNSImpl(InetAddress address,String name) throws IOException {  super();  if (logger.isLoggable(Level.FINER)) {    logger.finer("JmDNS instance created");  }  _cache=new DNSCache(100);  _listeners=Collections.synchronizedList(new ArrayList<DNSListener>());  _serviceListeners=new ConcurrentHashMap<String,List<ServiceListenerStatus>>();  _typeListeners=Collections.synchronizedSet(new HashSet<ServiceTypeListenerStatus>());  _serviceCollectors=new ConcurrentHashMap<String,ServiceCollector>();  _services=new ConcurrentHashMap<String,ServiceInfo>(20);  _serviceTypes=new ConcurrentHashMap<String,ServiceTypeEntry>(20);  _localHost=HostInfo.newHostInfo(address,this,name);  _name=(name != null ? name : _localHost.getName());  this.openMulticastSocket(this.getLocalHost());  this.start(this.getServices().values());  this.startReaper();}  }
class C{  public SortContainer(Comparable<?> value,int index){  super();  m_Value=value;  m_Index=index;}  }
class C{  public synchronized boolean isStopped(){  if (_currentSpeed > 0.01f) {    return false;  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrreplacedatacountnegative.class,args);}  }
class C{  private void loadDefault(String TableName,String ColumnName){  if (TableName.startsWith("AD_Window") || TableName.startsWith("AD_PrintFormat") || TableName.startsWith("AD_Workflow"))   return;  String value=null;  String sql="SELECT " + ColumnName + " FROM "+ TableName+ " WHERE IsDefault='Y' AND IsActive='Y' ORDER BY AD_Client_ID DESC, AD_Org_ID DESC";  sql=MRole.getDefault(m_ctx,false).addAccessSQL(sql,TableName,MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    if (rs.next())     value=rs.getString(1);    rs.close();    pstmt.close();    pstmt=null;  } catch (  SQLException e) {    log.log(Level.SEVERE,TableName + " (" + sql+ ")",e);    return;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (value != null && value.length() != 0) {    if (TableName.equals("C_DocType"))     Env.setContext(m_ctx,"#C_DocTypeTarget_ID",value); else     Env.setContext(m_ctx,"#" + ColumnName,value);  }}  }
class C{  public TaskBuilder safe(){  this.safeMode=true;  return this;}  }
class C{  private void installListeners(){  if (window != null) {    windowListener=createWindowListener();    window.addWindowListener(windowListener);    propertyChangeListener=createWindowPropertyChangeListener();    window.addPropertyChangeListener(propertyChangeListener);  }}  }
class C{  private void assertPivot(String field,Object value,int count,PivotField actual){  assertEquals("FIELD: " + actual.toString(),field,actual.getField());  assertEquals("VALUE: " + actual.toString(),value,actual.getValue());  assertEquals("COUNT: " + actual.toString(),count,actual.getCount());}  }
class C{  @Override public String serialize(final boolean includingBuiltIn){  return toString();}  }
class C{  public void apply(@NotNull PsiFile file,AnnotationResultType annotationResult,@NotNull AnnotationHolder holder){}  }
class C{  public void forwardOption(Parameter<?> param){  if (param.isDefined()) {    addParameter(param.getOptionID(),param.getValue());  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public void run(){  if (this.running.compareAndSet(false,true)) {    try {      if (establishConnectionToPrimary()) {        if (isInitialSyncExpected()) {          recordCurrentOplogPosition();          if (!performInitialSync()) {            return;          }        }        readOplog();      }    }  finally {      this.running.set(false);    }  }}  }
class C{  private void handleEvent(final AWTEvent event){  final MouseEvent kevent=(MouseEvent)event;  if (kevent.getID() == MouseEvent.MOUSE_CLICKED && SwingUtilities.isLeftMouseButton(kevent)) {    final Window window=SwingUtilities.getWindowAncestor(kevent.getComponent());    if (m_activeWindow == window) {      final JFrame frame=(JFrame)window;      frame.getGlassPane().setVisible(false);      final Component component=GuiHelper.findComponentAt(frame,kevent.getLocationOnScreen());      frame.getGlassPane().setVisible(true);      if (component instanceof IHelpProvider) {        final IHelpProvider helpProvider=(IHelpProvider)component;        final IHelpInformation help=helpProvider.getHelpInformation();        m_helpDialog.setInformation(help);        m_helpDialog.setLocation(getDialogLocation(kevent));        m_helpDialog.setVisible(true);      }    }  } else   if (kevent.getID() == MouseEvent.MOUSE_CLICKED && SwingUtilities.isRightMouseButton(kevent)) {    final Window window=SwingUtilities.getWindowAncestor(kevent.getComponent());    if (m_activeWindow == window) {      ((JFrame)window).getGlassPane().setVisible(false);      ((JFrame)window).getGlassPane().removeMouseListener(m_listener);      window.setCursor(Cursor.getDefaultCursor());      m_activeWindow=null;    }  }}  }
class C{  public SelectorGenerator(View view){  this.mView=view;  this.evaluator=new ArgbEvaluator();  this.isLongClickable=false;  this.isClickable=true;}  }
class C{  public void dumpIndex() throws IOException {  boolean atEOF=false;  byte ixRecord[]=new byte[SHAPE_INDEX_RECORD_LENGTH];  int recNum=0;  shx.seek(100);  while (!atEOF) {    int result=shx.read(ixRecord,0,SHAPE_INDEX_RECORD_LENGTH);    if (result == -1) {      atEOF=true;      Debug.output("Processed " + recNum + " records");    } else {      recNum++;      int offset=readBEInt(ixRecord,0);      int length=readBEInt(ixRecord,4);      Debug.output("Record " + recNum + ": "+ offset+ ", "+ length);    }  }}  }
class C{  public boolean looksLikeNumberComing(){  if (n >= s.length())   return false;  return Character.isDigit(s.charAt(n));}  }
class C{  public static boolean isDateInRange(final Date dateToCheck,final Date startDate,final Date endDate){  return !((startDate != null && dateToCheck.before(startDate)) || (endDate != null && dateToCheck.after(endDate)));}  }
class C{  private Collator createFromLocale(String localeID){  return Collator.getInstance(new ULocale(localeID));}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.messenger_service_binding);  Button button=(Button)findViewById(R.id.bind);  button.setOnClickListener(mBindListener);  button=(Button)findViewById(R.id.unbind);  button.setOnClickListener(mUnbindListener);  mCallbackText=(TextView)findViewById(R.id.callback);  mCallbackText.setText("Not attached.");}  }
class C{  public Quaterniond rotationTo(double fromDirX,double fromDirY,double fromDirZ,double toDirX,double toDirY,double toDirZ){  x=fromDirY * toDirZ - fromDirZ * toDirY;  y=fromDirZ * toDirX - fromDirX * toDirZ;  z=fromDirX * toDirY - fromDirY * toDirX;  w=Math.sqrt((fromDirX * fromDirX + fromDirY * fromDirY + fromDirZ * fromDirZ) * (toDirX * toDirX + toDirY * toDirY + toDirZ * toDirZ)) + (fromDirX * toDirX + fromDirY * toDirY + fromDirZ * toDirZ);  double invNorm=1.0 / Math.sqrt(x * x + y * y + z * z + w * w);  if (Double.isInfinite(invNorm)) {    x=toDirY;    y=-toDirX;    z=0.0;    w=0.0;    invNorm=(float)(1.0 / Math.sqrt(x * x + y * y));    if (Double.isInfinite(invNorm)) {      x=0.0;      y=toDirZ;      z=-toDirY;      w=0.0;      invNorm=(float)(1.0 / Math.sqrt(y * y + z * z));    }  }  x*=invNorm;  y*=invNorm;  z*=invNorm;  w*=invNorm;  return this;}  }
class C{  protected final void emitLowLevel(){  preAllocationStage();  allocationStage();  postAllocationStage();}  }
class C{  public static int directBlowInfantryDamage(double damage,int mos,int damageType,boolean isNonInfantryAgainstMechanized,boolean isAttackThruBuilding,int attackerId,Vector<Report> vReport){  int origDamageType=damageType;  damageType+=mos;  double origDamage=damage;switch (damageType) {case WeaponType.WEAPON_DIRECT_FIRE:    damage/=10;  break;case WeaponType.WEAPON_CLUSTER_BALLISTIC:damage/=10;damage++;break;case WeaponType.WEAPON_PULSE:damage/=10;damage+=2;break;case WeaponType.WEAPON_CLUSTER_MISSILE:damage/=5;break;case WeaponType.WEAPON_CLUSTER_MISSILE_1D6:damage/=5;damage+=Compute.d6();break;case WeaponType.WEAPON_CLUSTER_MISSILE_2D6:damage/=5;damage+=Compute.d6(2);break;case WeaponType.WEAPON_CLUSTER_MISSILE_3D6:damage/=5;damage+=Compute.d6(3);break;case WeaponType.WEAPON_BURST_HALFD6:damage=Compute.d6() / 2.0;if (isAttackThruBuilding) {damage*=0.5;}break;case WeaponType.WEAPON_BURST_1D6:damage=Compute.d6();if (isAttackThruBuilding) {damage*=0.5;}break;case WeaponType.WEAPON_BURST_2D6:damage=Compute.d6(2);if (isAttackThruBuilding) {damage*=0.5;}break;case WeaponType.WEAPON_BURST_3D6:damage=Compute.d6(3);if (isAttackThruBuilding) {damage*=0.5;}break;case WeaponType.WEAPON_BURST_4D6:damage=Compute.d6(4);if (isAttackThruBuilding) {damage*=0.5;}break;case WeaponType.WEAPON_BURST_5D6:damage=Compute.d6(5);if (isAttackThruBuilding) {damage*=0.5;}break;case WeaponType.WEAPON_BURST_6D6:damage=Compute.d6(6);if (isAttackThruBuilding) {damage*=0.5;}break;case WeaponType.WEAPON_BURST_7D6:damage=Compute.d6(7);if (isAttackThruBuilding) {damage*=0.5;}break;}damage=Math.ceil(damage);if (isNonInfantryAgainstMechanized) {if (damageType < WeaponType.WEAPON_BURST_HALFD6) {damage*=2;} else {damage/=2;}}if (vReport != null) {Report r=new Report();r.subject=attackerId;r.indent(2);r.add(getDamageTypeString(origDamageType));if (origDamageType != damageType) {if (isAttackThruBuilding) {r.messageId=9973;} else {r.messageId=9972;}r.add(getDamageTypeString(damageType));} else if (isAttackThruBuilding) {r.messageId=9971;} else {r.messageId=9970;}r.add((int)origDamage);r.add((int)damage);vReport.addElement(r);}return (int)damage;}  }
class C{  public NetworkAddressFactoryImpl() throws InitializationException {  this(DEFAULT_TCP_HTTP_LISTEN_PORT);}  }
class C{  public VerificationParams(Uri verificationURI,Uri originatingURI,Uri referrer,int originatingUid,ManifestDigest manifestDigest){  mVerificationURI=verificationURI;  mOriginatingURI=originatingURI;  mReferrer=referrer;  mOriginatingUid=originatingUid;  mManifestDigest=manifestDigest;  mInstallerUid=NO_UID;}  }
class C{  public void encrypt(long[] buffer){  int nLen=buffer.length;  for (int nI=0; nI < nLen; nI++) {    buffer[nI]=encryptBlock(buffer[nI]);  }  ;}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  protected void serializeComment(Comment node) throws SAXException {  if ((fFeatures & COMMENTS) != 0) {    String data=node.getData();    if ((fFeatures & WELLFORMED) != 0) {      isCommentWellFormed(data);    }    if (fLexicalHandler != null) {      if (!applyFilter(node,NodeFilter.SHOW_COMMENT)) {        return;      }      fLexicalHandler.comment(data.toCharArray(),0,data.length());    }  }}  }
class C{  public static boolean isInteger(String s){  try {    Integer.parseInt(s);  } catch (  NumberFormatException|NullPointerException e) {    return false;  }  return true;}  }
class C{  public Anonymous_derivedAttribute_3_ createAnonymous_derivedAttribute_3_(){  Anonymous_derivedAttribute_3_Impl anonymous_derivedAttribute_3_=new Anonymous_derivedAttribute_3_Impl();  return anonymous_derivedAttribute_3_;}  }
class C{  private static boolean useField(){  return 0 != TestUtil.nextInt(random(),0,30);}  }
class C{  private WindowListener createWindowListener(){  return new WindowHandler();}  }
class C{  protected int[] generateWorkingKey(boolean encrypting,byte[] key){  int[] newKey=new int[32];  boolean[] pc1m=new boolean[56], pcr=new boolean[56];  for (int j=0; j < 56; j++) {    int l=pc1[j];    pc1m[j]=((key[l >>> 3] & bytebit[l & 07]) != 0);  }  for (int i=0; i < 16; i++) {    int l, m, n;    if (encrypting) {      m=i << 1;    } else {      m=(15 - i) << 1;    }    n=m + 1;    newKey[m]=newKey[n]=0;    for (int j=0; j < 28; j++) {      l=j + totrot[i];      if (l < 28) {        pcr[j]=pc1m[l];      } else {        pcr[j]=pc1m[l - 28];      }    }    for (int j=28; j < 56; j++) {      l=j + totrot[i];      if (l < 56) {        pcr[j]=pc1m[l];      } else {        pcr[j]=pc1m[l - 28];      }    }    for (int j=0; j < 24; j++) {      if (pcr[pc2[j]]) {        newKey[m]|=bigbyte[j];      }      if (pcr[pc2[j + 24]]) {        newKey[n]|=bigbyte[j];      }    }  }  for (int i=0; i != 32; i+=2) {    int i1, i2;    i1=newKey[i];    i2=newKey[i + 1];    newKey[i]=((i1 & 0x00fc0000) << 6) | ((i1 & 0x00000fc0) << 10) | ((i2 & 0x00fc0000) >>> 10)| ((i2 & 0x00000fc0) >>> 6);    newKey[i + 1]=((i1 & 0x0003f000) << 12) | ((i1 & 0x0000003f) << 16) | ((i2 & 0x0003f000) >>> 4)| (i2 & 0x0000003f);  }  return newKey;}  }
class C{  public final void test() throws Exception {  System.out.println("ArgumentFeatures Feature Extractor");  String[] viewsToAdd={ViewNames.POS,ViewNames.LEMMA,ViewNames.SHALLOW_PARSE,ViewNames.PARSE_GOLD,ViewNames.SRL_VERB,ViewNames.PARSE_STANFORD,ViewNames.NER_CONLL};  TextAnnotation ta=DummyTextAnnotationGenerator.generateAnnotatedTextAnnotation(viewsToAdd,true,3);  int i=0;  ta.addView(ClauseViewGenerator.STANFORD);  ta.addView(PseudoParse.STANFORD);  System.out.println("This textannotation annotates the text: \n" + ta.getText());  View SRL_VERB=ta.getView("SRL_VERB");  List<Constituent> testlist=SRL_VERB.getConstituentsCoveringSpan(10,13);  testlist.addAll(SRL_VERB.getConstituentsCoveringSpan(26,27));  FeatureManifest featureManifest;  FeatureExtractor fex;  String fileName=Constant.prefix + "/Verb/Classifier/arg-features.fex";  featureManifest=new FeatureManifest(new FileInputStream(fileName));  FeatureManifest.setFeatureExtractor("hyphen-argument-feature",FeatureGenerators.hyphenTagFeature);  FeatureManifest.setTransformer("parse-left-sibling",FeatureGenerators.getParseLeftSibling(ViewNames.PARSE_STANFORD));  FeatureManifest.setTransformer("parse-right-sibling",FeatureGenerators.getParseRightSibling(ViewNames.PARSE_STANFORD));  FeatureManifest.setFeatureExtractor("pp-features",FeatureGenerators.ppFeatures(ViewNames.PARSE_STANFORD));  FeatureManifest.setFeatureExtractor("projected-path",new ProjectedPath(ViewNames.PARSE_STANFORD));  featureManifest.useCompressedName();  featureManifest.setVariable("*default-parser*",ViewNames.PARSE_STANFORD);  fex=featureManifest.createFex();  SrlVerbArgumentFeatures af=new SrlVerbArgumentFeatures();  for (  Constituent test : testlist) {    assertTrue(SRLFeaturesComparator.isEqual(test,fex,af));  }}  }
class C{  public Element writeFont(Element parent,Object o,String name) throws Exception {  Element node;  Font font;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  font=(Font)o;  node=addElement(parent,name,font.getClass().getName(),false);  invokeWriteToXML(node,font.getName(),VAL_NAME);  writeIntToXML(node,font.getStyle(),VAL_STYLE);  writeIntToXML(node,font.getSize(),VAL_SIZE);  return node;}  }
class C{  private static int howManyRestarted(boolean[] startedObjects,int retries){  int succeeded=0;  int restarted=0;  int atry=0;  while ((restarted < HOW_MANY) && (atry < retries)) {    restarted=0;    for (int j=0; j < HOW_MANY; j++) {synchronized (lock) {        if (startedObjects[j]) {          restarted++;        }      }    }    System.err.println("not all objects restarted, retrying...");    try {      Thread.sleep(10000);    } catch (    InterruptedException ie) {    }    atry++;  }  return restarted;}  }
class C{  @Override public void onTurnReached(final int currentTurn){  finish(reset,finishPlayer);}  }
class C{  boolean existsCatalogEntryForMarketplace(Product product,String marketplaceId){  ArgumentValidator.notEmptyString("marketplaceId",marketplaceId);  return getCatalogEntryForMarketplace(product,marketplaceId) != null ? true : false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Deprecated public boolean isVideoSharingSupported(){  return mVideoSharing;}  }
class C{  public IConnection createClientConnection(String host,int port,int id){  return new DataStreamConnection(host,port,id);}  }
class C{  public static final <Type>NegateConstraint<Type> create(@NonNull final Constraint<Type> constraint){  return new NegateConstraint<>(constraint);}  }
class C{  public LabelledItem(String labelText,JComponent component){  Box itemBox=Box.createHorizontalBox();  itemBox.setAlignmentX(Box.LEFT_ALIGNMENT);  JLabel label=new JLabel(labelText);  label.setPreferredSize(new Dimension(100,10));  itemBox.add(label);  itemBox.add(Box.createHorizontalStrut(10));  itemBox.add(Box.createHorizontalGlue());  itemBox.add(component);  add(itemBox);}  }
class C{  @Nullable public IgniteUuid sessionId(){  return sesId;}  }
class C{  public MaterialFilter(DataLogicSales dlSales){  initComponents();  m_sentprods=dlSales.getProductList();  m_ProdsModel=new ComboBoxValModel();  m_jCboName.setModel(new ListQBFModelNumber());  m_jCboPriceBuy.setModel(new ListQBFModelNumber());}  }
class C{  private Thread fullGetFirstQueuedThread(){  Node h, s;  Thread st;  if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;  Node t=tail;  Thread firstThread=null;  while (t != null && t != head) {    Thread tt=t.thread;    if (tt != null)     firstThread=tt;    t=t.prev;  }  return firstThread;}  }
class C{  private void populateWorkItemTypes(){  workItemTypeCombo.removeAll();  workItemTypeCombo.add(Messages.getString("WorkItemPickerDialog.AllWorkItemTypesChoice"));  workItemTypeCombo.select(0);  final Project selectedProject=getSelectedProject();  if (selectedProject != null) {    workItemTypes=getFilteredWorkItemTypes(selectedProject.getWorkItemTypes().getTypes());  } else {    workItemTypes=getFilteredWorkItemTypes(getAllProjectWorkItemTypes());  }  workItemTypeFilterWhereClause=null;  if (haveFilters && workItemTypes != null && workItemTypes.length > 0) {    workItemTypeFilterWhereClause=makeWorkItemTypeFilterWhereClause(workItemTypes);  }  if (workItemTypes != null) {    for (int i=0; i < workItemTypes.length; i++) {      workItemTypeCombo.add(workItemTypes[i].getName());    }  }  ComboHelper.setVisibleItemCount(workItemTypeCombo);}  }
class C{  public SortedNumericDocValuesField(String name,long value){  super(name,TYPE);  fieldsData=Long.valueOf(value);}  }
class C{  public BitmapSize scale(float scale){  return new BitmapSize((int)(width * scale),(int)(height * scale));}  }
class C{  private void drawRegisters(final Graphics g){  final int PADDING_TOP=m_font.getSize() + 5;  int y=PADDING_TOP;  final int lineHeight=m_font.getSize();  int registerCounter=0;  for (  final RegisterInformationInternal register : m_registerModel.getRegisterInformation()) {    if (isEnabled()) {      g.setColor(register.isModified() || (registerCounter == m_editedRegister) ? m_modifiedColor : m_textColor);    } else {      g.setColor(m_disabledColor);    }    g.drawString(register.getRegisterName(),m_paddingLeft,y);    final BigInteger value=(registerCounter == m_editedRegister ? m_editValue : register.getValue()).and(register.getRegisterSize() == 8 ? BigInteger.valueOf(9223372036854775807L) : BigInteger.valueOf(4294967295L));    final String valueString;    if (register.getRegisterSize() != 0) {      final String formatMask="%0" + (2 * register.getRegisterSize()) + "X";      valueString=String.format(formatMask,value);    } else {      valueString=String.valueOf(value.and(BigInteger.ONE));    }    g.drawString(valueString,10 + 5 + (m_charWidth * m_longestRegisterName),y);    ++registerCounter;    y+=lineHeight;  }}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStore keyStore=currentState.getKeyStore();    PrivateKey privateKey=(PrivateKey)keyStore.getKey(alias,password.toCharArray());    X509Certificate[] certs=X509CertUtil.orderX509CertChain(X509CertUtil.convertCertificates(keyStore.getCertificateChain(alias)));    if (!privateKey.getAlgorithm().equals(KeyPairType.RSA.jce())) {      JOptionPane.showMessageDialog(frame,res.getString("SignMidletAction.ReqRsaKeyPairMidletSigning.message"),res.getString("SignMidletAction.SignMidlet.Title"),JOptionPane.WARNING_MESSAGE);      return;    }    DSignMidlet dSignMidlet=new DSignMidlet(frame);    dSignMidlet.setLocationRelativeTo(frame);    dSignMidlet.setVisible(true);    File inputJadFile=dSignMidlet.getInputJad();    File outputJadFile=dSignMidlet.getOutputJad();    File jarFile=dSignMidlet.getJar();    if (inputJadFile == null) {      return;    }    if (inputJadFile.equals(outputJadFile)) {      MidletSigner.sign(inputJadFile,jarFile,(RSAPrivateKey)privateKey,certs,1);    } else {      MidletSigner.sign(inputJadFile,outputJadFile,jarFile,(RSAPrivateKey)privateKey,certs,1);    }    JOptionPane.showMessageDialog(frame,res.getString("SignMidletAction.SignMidletSuccessful.message"),res.getString("SignMidletAction.SignMidlet.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public void registerExtension(ExtensionNamespaceSupport extNsSpt){  String namespace=extNsSpt.getNamespace();  if (namespaceIndex(namespace,m_extensions) == -1) {    m_extensions.add(extNsSpt);    if (m_unregisteredExtensions.contains(namespace))     m_unregisteredExtensions.remove(namespace);  }}  }
class C{  public void testConstructorStringRadix36(){  String value="skdjgocvhdjfkl20jndjkf347ejg457";  int radix=36;  byte rBytes[]={0,-12,-116,112,-105,12,-36,66,108,66,-20,-37,-15,108,-7,52,-99,-109,-8,-45,-5};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public static String serializeExpression(Node s){  if (s instanceof ASTTerm) {    ASTTerm a=(ASTTerm)s;    return (a.isNotFlag() ? "!" : "") + " " + a.getTerm();  }  String prefix="";  String suffix="";  String join=" ";  if (s instanceof ASTExpression) {    ASTExpression a=(ASTExpression)s;    prefix=(a.isNotFlag() ? "!" : "") + "(";    suffix=")";    join=" " + a.getType() + " ";  }  List<String> children=new ArrayList<String>();  for (int i=0; i < s.jjtGetNumChildren(); i++) {    children.add(serializeExpression(s.jjtGetChild(i)));  }  return prefix + StringUtils.join(children,join) + suffix;}  }
class C{  public static boolean gcInProgress(){  return Plan.gcInProgress();}  }
class C{  public void cancelRowUpdates() throws SQLException {  throw new NotUpdatable();}  }
class C{  public static SQLException toSQLException(Exception e){  if (e instanceof SQLException) {    return (SQLException)e;  }  return convert(e).getSQLException();}  }
class C{  public void addMovementListener(final MovementListener listener){  movementListeners.add(listener);}  }
class C{  public LoadRiskAnalyses(Integer parentDbId,boolean useParent){  this.parentDbId=parentDbId;  this.useParentId=useParent;}  }
class C{  private void init(Context context){  this.context=context;}  }
class C{  public void clearExif(){  mData=new ExifData(DEFAULT_BYTE_ORDER);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.TIME_EVENT_SPEC__TYPE:    return type != TYPE_EDEFAULT;case StextPackage.TIME_EVENT_SPEC__VALUE:  return value != null;case StextPackage.TIME_EVENT_SPEC__UNIT:return unit != UNIT_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public boolean isDrawLeader(){  return drawLeader;}  }
class C{  public boolean verifySignature(byte[] message,byte[] signature){  short[] sigInt=new short[signature.length];  short tmp;  for (int i=0; i < signature.length; i++) {    tmp=(short)signature[i];    tmp&=(short)0xff;    sigInt[i]=tmp;  }  short[] msgHashVal=makeMessageRepresentative(message);  short[] verificationResult=verifySignatureIntern(sigInt);  boolean verified=true;  if (msgHashVal.length != verificationResult.length) {    return false;  }  for (int i=0; i < msgHashVal.length; i++) {    verified=verified && msgHashVal[i] == verificationResult[i];  }  return verified;}  }
class C{  public void execute() throws SQLException {  execute(null);}  }
class C{  public N4MFUiModule(AbstractUIPlugin plugin){  super(plugin);}  }
class C{  private void navigateToRoot(){  getFragmentManager().beginTransaction().replace(R.id.fragment,ItemFragment.newInstance("root")).addToBackStack(null).commit();}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  if (DEBUG)   System.out.println("startPrefixMapping: prefix: " + prefix + ", uri: "+ uri);  if (null == prefix)   prefix="";  m_prefixMappings.addElement(prefix);  m_prefixMappings.addElement(uri);}  }
class C{  private static void decodeEdifactSegment(BitSource bits,StringBuilder result){  do {    if (bits.available() <= 16) {      return;    }    for (int i=0; i < 4; i++) {      int edifactValue=bits.readBits(6);      if (edifactValue == 0x1F) {        int bitsLeft=8 - bits.getBitOffset();        if (bitsLeft != 8) {          bits.readBits(bitsLeft);        }        return;      }      if ((edifactValue & 0x20) == 0) {        edifactValue|=0x40;      }      result.append((char)edifactValue);    }  } while (bits.available() > 0);}  }
class C{  public ModuleTraceProvider(final INaviModule module){  this.module=Preconditions.checkNotNull(module,"IE00772: Module argument can not be null");}  }
class C{  private void storeHelper(AvExCache cache,Instruction inst){  LocationOperand loc=LocationCarrier.getLocation(inst);  if (loc.mayBeVolatile())   return;  AvailableExpression ae=cache.find(inst);  if (ae == null) {    cache.insert(inst);  }}  }
class C{  public boolean hasThree(){  return points.size() > 2;}  }
class C{  void instantPreInit(XCreateWindowParams params){  state_lock=new StateLock();}  }
class C{  boolean isMulticastSocket(){  return false;}  }
class C{  public Interaction_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_value=jcas.getRequiredFeatureDE(casType,"value","uima.cas.String",featOkTst);  casFeatCode_value=(null == casFeat_value) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_value).getCode();  casFeat_relationshipType=jcas.getRequiredFeatureDE(casType,"relationshipType","uima.cas.String",featOkTst);  casFeatCode_relationshipType=(null == casFeat_relationshipType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_relationshipType).getCode();  casFeat_relationSubType=jcas.getRequiredFeatureDE(casType,"relationSubType","uima.cas.String",featOkTst);  casFeatCode_relationSubType=(null == casFeat_relationSubType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_relationSubType).getCode();}  }
class C{  private String string(long val){  return val != -1 ? String.valueOf(val) : "";}  }
class C{  public RuleSplitNode(){  this(null,new double[0]);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void organizeDistribution(final float[] probabilities,final boolean allowAllZeros){  double sum=0.0;  if (probabilities.length == 0)   throw new ArithmeticException("Distribution has no elements");  for (int x=0; x < probabilities.length; x++) {    if (probabilities[x] < 0.0)     throw new ArithmeticException("Distribution has negative probabilities");    sum+=probabilities[x];  }  if (sum == 0.0)   if (!allowAllZeros)   throw new ArithmeticException("Distribution has all zero probabilities"); else {    for (int x=0; x < probabilities.length; x++)     probabilities[x]=1.0f;    sum=probabilities.length;  }  for (int x=0; x < probabilities.length; x++)   probabilities[x]/=sum;  sum=0.0;  for (int x=0; x < probabilities.length; x++) {    sum+=probabilities[x];    probabilities[x]=(float)sum;  }  int x;  for (x=probabilities.length - 1; x > 0; x--)   if (probabilities[x] == probabilities[x - 1])   probabilities[x]=1.0f; else   break;  probabilities[x]=1.0f;}  }
class C{  public void run(){  try {    r.run();  } catch (  Throwable err) {    err.printStackTrace();    handleException(err);  }}  }
class C{  private boolean isOuterGState(){  return mGStateStack.size() == 1;}  }
class C{  int compareVersion(String version1,String version2){  if (version1 == null && version2 == null)   return 0;  if (version1 == null || version2 == null)   return version1 == null ? -1 : 1;  String[] list1=version1.split("\\.");  String[] list2=version2.split("\\.");  int i=0;  while (i < list1.length || i < list2.length) {    int a=i < list1.length ? Integer.valueOf(list1[i]) : 0;    int b=i < list2.length ? Integer.valueOf(list2[i]) : 0;    if (a < b)     return -1; else     if (a > b)     return 1;    i++;  }  return 0;}  }
class C{  public void willBeDisplayed(){  if (fragmentContainer != null) {    Animation fadeIn=AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in);    fragmentContainer.startAnimation(fadeIn);  }}  }
class C{  private int computeVisualLength(CharSequence indent){  final int tabSize=fPrefs.prefTabSize;  int length=0;  for (int i=0; i < indent.length(); i++) {    char ch=indent.charAt(i);switch (ch) {case '\t':      if (tabSize > 0) {        int reminder=length % tabSize;        length+=tabSize - reminder;      }    break;case ' ':  length++;break;}}return length;}  }
class C{  private void restoreDescendantState(){  FacesContext context=getFacesContext();  if (getChildCount() > 0) {    for (    UIComponent kid : getChildren()) {      if (kid instanceof UIColumn) {        restoreDescendantState(kid,context);      }    }  }}  }
class C{  public void removeColumnModelListener(TableColumnModelListener x){  listenerList.remove(TableColumnModelListener.class,x);}  }
class C{  public SmbFile[] listFiles(SmbFilenameFilter filter) throws SmbException {  return listFiles("*",ATTR_DIRECTORY | ATTR_HIDDEN | ATTR_SYSTEM,filter,null);}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("process") @Valid Process process,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    processDAO.securityCheck(process.getParentProcessId(),principal.getName(),WRITE);    com.wipro.ats.bdre.md.dao.jpa.Process updateDaoProcess=processDAO.get(process.getProcessId());    com.wipro.ats.bdre.md.dao.jpa.ProcessType daoProcessType=processTypeDAO.get(process.getProcessTypeId());    updateDaoProcess.setProcessType(daoProcessType);    if (process.getWorkflowId() != null) {      WorkflowType daoWorkflowType=new WorkflowType();      daoWorkflowType.setWorkflowId(process.getWorkflowId());      updateDaoProcess.setWorkflowType(daoWorkflowType);    }    BusDomain daoBusDomain=new BusDomain();    daoBusDomain.setBusDomainId(process.getBusDomainId());    updateDaoProcess.setBusDomain(daoBusDomain);    if (process.getProcessTemplateId() != null) {      ProcessTemplate daoProcessTemplate=new ProcessTemplate();      daoProcessTemplate.setProcessTemplateId(process.getProcessTemplateId());      updateDaoProcess.setProcessTemplate(daoProcessTemplate);    }    if (process.getParentProcessId() != null) {      com.wipro.ats.bdre.md.dao.jpa.Process parentProcess=processDAO.get(process.getParentProcessId());      updateDaoProcess.setProcess(parentProcess);    }    updateDaoProcess.setDescription(process.getDescription());    updateDaoProcess.setAddTs(DateConverter.stringToDate(process.getTableAddTS()));    updateDaoProcess.setProcessName(process.getProcessName());    if (process.getCanRecover() == null)     updateDaoProcess.setCanRecover(true); else     updateDaoProcess.setCanRecover(process.getCanRecover());    updateDaoProcess.setEnqueuingProcessId(process.getEnqProcessId());    if (process.getBatchPattern() != null) {      if (process.getBatchPattern().isEmpty()) {        updateDaoProcess.setBatchCutPattern(null);      }      updateDaoProcess.setBatchCutPattern(process.getBatchPattern());    }    updateDaoProcess.setNextProcessId(process.getNextProcessIds());    if (process.getDeleteFlag() == null)     updateDaoProcess.setDeleteFlag(false); else     updateDaoProcess.setDeleteFlag(process.getDeleteFlag());    updateDaoProcess.setEditTs(DateConverter.stringToDate(process.getTableEditTS()));    updateDaoProcess=processDAO.update(updateDaoProcess);    process.setTableAddTS(DateConverter.dateToString(updateDaoProcess.getAddTs()));    process.setTableEditTS(DateConverter.dateToString(updateDaoProcess.getEditTs()));    restWrapper=new RestWrapper(process,RestWrapper.OK);    LOGGER.info("Record with  ID:" + process.getProcessId() + " updated in Process by User:"+ principal.getName()+ process);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject m_selected;  m_selected=((Expression)m_obj).execute(xctxt);  m_selected.allowDetachToRelease(m_allowRelease);  if (m_selected.getType() == CLASS_STRING)   return m_selected; else   return new XString(m_selected.str());}  }
class C{  public boolean next(Text key,BytesWritable value) throws IOException {  try {    long startRead=in.getPos();    byte[] magicBuffer=null;    while (true) {      if (startRead >= splitEnd) {        return false;      }      boolean foundStart=false;      while (!foundStart) {        startRead=in.getPos();        magicBuffer=new byte[1024];        int read=in.read(magicBuffer);        if (read < 0) {          break;        }        for (int i=0; i < read - 1; i++) {          byte[] testMagic=new byte[2];          System.arraycopy(magicBuffer,i,testMagic,0,2);          if (isMagic(testMagic)) {            startRead+=i;            foundStart=true;            break;          }        }      }      in.seek(startRead);      ByteArrayOutputStream baos=null;      int totalRead=0;      try {        byte[] buffer=new byte[4096];        GZIPInputStream zin=new GZIPInputStream(in);        int gzipRead=-1;        baos=new ByteArrayOutputStream();        while ((gzipRead=zin.read(buffer,0,buffer.length)) != -1) {          baos.write(buffer,0,gzipRead);          totalRead+=gzipRead;        }      } catch (      Exception e) {        System.out.println("Ignoring position: " + (startRead));        if (startRead + 1 < fileLen) {          in.seek(startRead + 1);        }        continue;      }      byte[] content=baos.toByteArray();      int eol=0;      for (int i=0; i < content.length; i++) {        if (i > 0 && content[i] == '\n') {          eol=i;          break;        }      }      String header=new String(content,0,eol).trim();      byte[] raw=new byte[(content.length - eol) - 1];      System.arraycopy(content,eol + 1,raw,0,raw.length);      Text keyText=(Text)key;      keyText.set(header);      BytesWritable valueBytes=(BytesWritable)value;      valueBytes.set(raw,0,raw.length);      if (startRead + 1 < fileLen) {        in.seek(startRead + 1);      }      return true;    }  } catch (  Exception e) {    LOG.equals(StringUtils.stringifyException(e));  }  return false;}  }
class C{  public Map<String,String> deformatNVP(final String pPayload){  Map<String,String> nvp=new HashMap<String,String>();  StringTokenizer stTok=new StringTokenizer(pPayload,AND);  while (stTok.hasMoreTokens()) {    StringTokenizer stInternalTokenizer=new StringTokenizer(stTok.nextToken(),EQ);    if (stInternalTokenizer.countTokens() == 2) {      try {        String key=URLDecoder.decode(stInternalTokenizer.nextToken(),"UTF-8");        String value=URLDecoder.decode(stInternalTokenizer.nextToken(),"UTF-8");        nvp.put(key.toUpperCase(),value);      } catch (      UnsupportedEncodingException e) {        ShopCodeContext.getLog(this).error("Unable to decode NVP payload " + pPayload,e);      }    }  }  return nvp;}  }
class C{  protected void displayImageFromDrawable(String imageUri,ImageView imageView){  String drawableIdString=Scheme.DRAWABLE.crop(imageUri);  int resID=context.getResources().getIdentifier(drawableIdString,"drawable",context.getPackageName());  if (imageView != null) {    imageView.setImageResource(resID);  }  return;}  }
class C{  public TypeScriptIndenter(IDocument document,JavaHeuristicScanner scanner){  this(document,scanner,null);}  }
class C{  public static boolean stacksMatch(ItemStack stack,String s){  if (stack == null)   return false;  boolean contains=false;  for (  String wc : WILDCARD_STRINGS) {    if (s.endsWith(wc)) {      contains=true;      s=s.substring(0,s.length() - wc.length());    } else     if (s.startsWith(wc)) {      contains=true;      s=s.substring(wc.length());    }    if (contains)     break;  }  String name=stripControlCodes(stack.getDisplayName().toLowerCase().trim());  return equalOrContain(name,s,contains) || equalOrContain(name + "s",s,contains) || equalOrContain(name + "es",s,contains)|| name.endsWith("y") && equalOrContain(name.substring(0,name.length() - 1) + "ies",s,contains);}  }
class C{  public T caseParameterizedPropertyAccessExpression(ParameterizedPropertyAccessExpression object){  return null;}  }
class C{  public void mapDatasetToAxes(int index,List axisIndices){  if (index < 0) {    throw new IllegalArgumentException("Requires 'index' >= 0.");  }  checkAxisIndices(axisIndices);  Integer key=new Integer(index);  this.datasetToAxesMap.put(key,new ArrayList(axisIndices));  datasetChanged(new DatasetChangeEvent(this,getDataset(index)));}  }
class C{  public Slic3rMasterPanel(){  initComponents();}  }
class C{  @Override public boolean supportsLimitedOuterJoins(){  debugCodeCall("supportsLimitedOuterJoins");  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String pn=getString(stack);  Widget w=getWidget(stack);  return ((w != null) && w.hasProperty(WidgetMeta.getPropForName(pn))) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public void phaseIID(final int lindex,final int levels[][]){  float colBC[];  colBC=calcColBC(lindex,levels);  for (int i=0; i < colBC.length - 1; i++) {    if (colBC[i] == colBC[i + 1]) {      int tempLevels[][]=new int[levels.length][];      copy2DArray(levels,tempLevels);      int node1=levels[lindex + 1][i];      int node2=levels[lindex + 1][i + 1];      levels[lindex + 1][i + 1]=node1;      levels[lindex + 1][i]=node2;      for (int k=lindex + 1; k < levels.length - 1; k++) {        phaseID(k,levels);      }      if (crossings(levels) <= crossings(tempLevels)) {        copy2DArray(levels,tempLevels);      } else {        copy2DArray(tempLevels,levels);        levels[lindex + 1][i + 1]=node1;        levels[lindex + 1][i]=node2;      }      for (int k=levels.length - 2; k >= 0; k--) {        phaseIU(k,levels);      }      if (crossings(tempLevels) < crossings(levels)) {        copy2DArray(tempLevels,levels);      }    }  }}  }
class C{  static ComputedDayOfField ofWeekOfWeekBasedYearField(WeekFields weekDef){  return new ComputedDayOfField("WeekOfWeekBasedYear",weekDef,WEEKS,IsoFields.WEEK_BASED_YEARS,WEEK_OF_WEEK_BASED_YEAR_RANGE);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public void registerSensor(Sensor s,int i){  sensorArray[i]=s;}  }
class C{  public static int correctFacing(int facing){  while (facing < 0) {    facing+=6;  }  if (facing > 5) {    facing=facing % 6;  }  return facing;}  }
class C{  public void dumpZones(DBTransaction transaction) throws SQLException {  long start=System.currentTimeMillis();  transaction.execute("DELETE FROM zoneinfo",null);  PreparedStatement stmt=transaction.prepareStatement("INSERT INTO zoneinfo " + "(name, level, iterior, x, y, height, width, accessable, readableName, description, colorMethod, color, blendMethod, dangerLevel, weather)" + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);",null);  for (  IRPZone zone : StendhalRPWorld.get()) {    dumpZone(stmt,(StendhalRPZone)zone);  }  stmt.executeBatch();  logger.debug("Completed dumping of zones in " + (System.currentTimeMillis() - start) + " milliseconds.");}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=zzPushbackPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  public void startUpload(String key,File file) throws AmazonClientException, AmazonServiceException {  super.startUpload(awsS3BucketName,key,file);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY:    setBody((Block)null);  return;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK:set_lok((LocalArgumentsVariable)null);return;}super.eUnset(featureID);}  }
class C{  @EventHandler public void onModuleLoad(MatchModuleLoadCompleteEvent event){  loadFilters(event.getMatch(),IdModule.get().getList(event.getMatch(),Filter.class));}  }
class C{  public static void divCol(Matrix A,int j,int start,int to,Vec c){  for (int i=start; i < to; i++)   A.set(i,j,A.get(i,j) / c.get(i));}  }
class C{  public void addParticipant(EventWho participant){  getParticipants().add(participant);}  }
class C{  public boolean removeMiddleOfLastThree(){  if (!hasThree())   return false;  int pos=points.size();  points.remove(pos - 2);  return true;}  }
class C{  public void testBug11614() throws Exception {  if (versionMeetsMinimum(4,1)) {    createTable("testBug11614","(`id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT, `text` TEXT NOT NULL," + "PRIMARY KEY(`id`)) CHARACTER SET utf8 COLLATE utf8_general_ci");    Properties props=new Properties();    props.setProperty("characterEncoding","utf8");    Connection utf8Conn=null;    try {      utf8Conn=getConnectionWithProps(props);      utf8Conn.createStatement().executeUpdate("INSERT INTO testBug11614  (`id`,`text`) values (1,'')");      this.rs=utf8Conn.createStatement().executeQuery("SELECT `text` FROM testBug11614 WHERE id=1");      assertTrue(this.rs.next());      Clob c=this.rs.getClob(1);      c.truncate(0);      int blockSize=8192;      int sizeToTest=blockSize + 100;      StringBuilder blockBuf=new StringBuilder(sizeToTest);      for (int i=0; i < sizeToTest; i++) {        blockBuf.append('\u00f6');      }      String valueToTest=blockBuf.toString();      c.setString(1,valueToTest);      this.pstmt=utf8Conn.prepareStatement("UPDATE testBug11614 SET `text` = ? WHERE id=1");      this.pstmt.setClob(1,c);      this.pstmt.executeUpdate();      this.pstmt.close();      String fromDatabase=getSingleIndexedValueWithQuery(utf8Conn,1,"SELECT `text` FROM testBug11614").toString();      assertEquals(valueToTest,fromDatabase);    }  finally {      if (utf8Conn != null) {        utf8Conn.close();      }    }  }}  }
class C{  public boolean isEditable(boolean checkContext){  if (isVirtualColumn())   return false;  if (m_vo.ColumnName.equals("Posted") || (m_vo.ColumnName.equals("Record_ID") && m_vo.displayType == DisplayType.Button))   return true;  if (m_vo.IsAlwaysUpdateable)   return true;  if (m_vo.tabReadOnly || m_vo.IsReadOnly) {    log.finest(m_vo.ColumnName + " NO - TabRO=" + m_vo.tabReadOnly+ ", FieldRO="+ m_vo.IsReadOnly);    return false;  }  if (!m_vo.IsUpdateable && !m_inserting) {    log.finest(m_vo.ColumnName + " NO - FieldUpdateable=" + m_vo.IsUpdateable);    return false;  }  if (m_vo.ColumnName.equals(Env.getContext(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,GridTab.CTX_LinkColumnName))) {    log.finest(m_vo.ColumnName + " NO - LinkColumn");    return false;  }  if (checkContext) {    int AD_Client_ID=Env.getContextAsInt(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,"AD_Client_ID");    int AD_Org_ID=Env.getContextAsInt(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,"AD_Org_ID");    String keyColumn=Env.getContext(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,GridTab.CTX_KeyColumnName);    if ("EntityType".equals(keyColumn))     keyColumn="AD_EntityType_ID";    if (!keyColumn.endsWith("_ID"))     keyColumn+="_ID";    int Record_ID=Env.getContextAsInt(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,keyColumn);    int AD_Table_ID=m_vo.AD_Table_ID;    if (!MRole.getDefault(m_vo.ctx,false).canUpdate(AD_Client_ID,AD_Org_ID,AD_Table_ID,Record_ID,false))     return false;    if (!MRole.getDefault(m_vo.ctx,false).isColumnAccess(AD_Table_ID,m_vo.AD_Column_ID,false))     return false;  }  if (checkContext && m_vo.ReadOnlyLogic.length() > 0) {    boolean retValue=!Evaluator.evaluateLogic(this,m_vo.ReadOnlyLogic);    log.finest(m_vo.ColumnName + " R/O(" + m_vo.ReadOnlyLogic+ ") => R/W-"+ retValue);    if (!retValue)     return false;  }  if (checkContext && "Y".equals(Env.getContext(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,"IsActive")) && (m_vo.ColumnName.equals("Processing") || m_vo.ColumnName.equals("PaymentRule") || m_vo.ColumnName.equals("DocAction")|| m_vo.ColumnName.equals("GenerateTo")))   return true;  if (checkContext && ("Y".equals(get_ValueAsString("Processed")) || "Y".equals(get_ValueAsString("Processing"))))   return false;  if (m_vo.ColumnName.equals("IsActive"))   return true;  if (checkContext && !Env.getContext(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,"IsActive").equals("Y"))   return false;  return isDisplayed(checkContext);}  }
class C{  protected ArithCoder(){}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  public void add(Class<?> c,Method method){  if (method != null) {    m_Methods.put(c,method);  }}  }
class C{  public static DoubleBuffer createShapeBuffer(String shape,double width,double height,int cornerRadius,DoubleBuffer buffer){  if (shape.equals(AVKey.SHAPE_RECTANGLE))   return createRoundedRectangleBuffer(width,height,cornerRadius,buffer); else   if (shape.equals(AVKey.SHAPE_ELLIPSE))   return createEllipseBuffer(width,height,circleSteps,buffer); else   if (shape.equals(AVKey.SHAPE_NONE))   return null; else   return createRoundedRectangleBuffer(width,height,cornerRadius,buffer);}  }
class C{  public CSVWriter(Writer writer){  this(writer,DEFAULT_SEPARATOR);}  }
class C{  public void postPaint(Display d,Graphics2D g){}  }
class C{  protected static ShorthandManager[] mergeArrays(ShorthandManager[] a1,ShorthandManager[] a2){  ShorthandManager[] result=new ShorthandManager[a1.length + a2.length];  System.arraycopy(a1,0,result,0,a1.length);  System.arraycopy(a2,0,result,a1.length,a2.length);  return result;}  }
class C{  final public MutableString substring(final int start,final int end){  if (end > length())   throw new StringIndexOutOfBoundsException(end);  return new MutableString(array,start,end - start);}  }
class C{  @Override public String toString(){  return (asc ? "ASC" : "DESC") + "(" + expr+ ")";}  }
class C{  public HeapLRUCapacityController(EvictionAction evictionAction,Region region){  super(evictionAction,region);}  }
class C{  public void testResourcesAvailable(){  new HungarianAnalyzer().close();}  }
class C{  protected MultipleDownloadsCompletedReceiver registerNewMultipleDownloadsReceiver(){  MultipleDownloadsCompletedReceiver receiver=new MultipleDownloadsCompletedReceiver();  mContext.registerReceiver(receiver,new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));  return receiver;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.797 -0500",hash_original_method="9614A7277DEC14D06C0E4E046469A079",hash_generated_method="29CD0897EECAA79CFC9E02A109F73666") public final boolean isLayered(){  return layered;}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public synchronized void info(String sourceClass,String sourceMethod,String msg){  LogRecord record=new LogRecord(Level.INFO,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  log(record);}  }
class C{  public SwitchButton(final Composite parent,final int style,final String trueText,final String falseText,final String text){  this(parent,style);  this.textForSelect=trueText;  this.textForUnselect=falseText;  this.text=text;}  }
class C{  protected Object handlePolymorphic(JsonParser jp,DeserializationContext ctxt,Object bean,TokenBuffer unknownTokens) throws IOException, JsonProcessingException {  JsonDeserializer<Object> subDeser=_findSubclassDeserializer(ctxt,bean,unknownTokens);  if (subDeser != null) {    if (unknownTokens != null) {      unknownTokens.writeEndObject();      JsonParser p2=unknownTokens.asParser();      p2.nextToken();      bean=subDeser.deserialize(p2,ctxt,bean);    }    if (jp != null) {      bean=subDeser.deserialize(jp,ctxt,bean);    }    return bean;  }  if (unknownTokens != null) {    bean=handleUnknownProperties(ctxt,bean,unknownTokens);  }  if (jp != null) {    bean=deserialize(jp,ctxt,bean);  }  return bean;}  }
class C{  public EncoderTestSuiteBuilder valid(String chars){  for (int i=0, n=chars.length(); i < n; ++i) {    char ch=chars.charAt(i);    _valid.set(ch);    _invalid.clear(ch);    _encoded.clear(ch);  }  return this;}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);}  }
class C{  public static Animation outToLeftAnimation(long duration,Interpolator interpolator){  Animation outtoLeft=new TranslateAnimation(Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,-1.0f,Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,0.0f);  outtoLeft.setDuration(duration);  outtoLeft.setInterpolator(interpolator == null ? new AccelerateInterpolator() : interpolator);  return outtoLeft;}  }
class C{  public void sendNotification() throws Exception {  if (pendingIntent == null && notificationHandler == null) {    throw new RuntimeException("Either pendingIntent or handler class requires.");  }  Action action=buildWearableAction();  Notification notification=notificationBuilder.extend(new WearableExtender().addAction(action)).build();  if (ApplozicClient.getInstance(mContext).isNotificationSmallIconHidden() && Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    int smallIconViewId=mContext.getResources().getIdentifier("right_icon","id",android.R.class.getPackage().getName());    if (smallIconViewId != 0) {      if (notification.contentIntent != null) {        notification.contentView.setViewVisibility(smallIconViewId,View.INVISIBLE);      }      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {        if (notification.headsUpContentView != null) {          notification.headsUpContentView.setViewVisibility(smallIconViewId,View.INVISIBLE);        }        if (notification.bigContentView != null) {          notification.bigContentView.setViewVisibility(smallIconViewId,View.INVISIBLE);        }      }    }  }  NotificationManagerCompat notificationManager=NotificationManagerCompat.from(mContext);  notificationManager.notify(notificationId,notification);}  }
class C{  private void startNotificationService(){  Intent intent=new Intent(getActivity(),NotificationService.class);  getActivity().startService(intent);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static ScopedCache with(Scope scope){  return new ScopedCache(scope);}  }
class C{  public PolicyMappingsExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.PolicyMappings_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding for " + "PolicyMappingsExtension.");  }  maps=new ArrayList<CertificatePolicyMap>();  while (val.data.available() != 0) {    DerValue seq=val.data.getDerValue();    CertificatePolicyMap map=new CertificatePolicyMap(seq);    maps.add(map);  }}  }
class C{  protected void assertEquals(double expected,double actual){  if (expected != actual) {    if (Double.isNaN(expected) && Double.isNaN(actual)) {    } else {      fail("Expected: " + expected + " actual: "+ actual);    }  }}  }
class C{  public DeflaterOutputStream(OutputStream out,Deflater def,int size,boolean syncFlush){  super(out);  if (out == null || def == null) {    throw new NullPointerException();  } else   if (size <= 0) {    throw new IllegalArgumentException("buffer size <= 0");  }  this.def=def;  this.buf=new byte[size];  this.syncFlush=syncFlush;}  }
class C{  protected RemoteCacheCallback(String desc){  this.desc=desc;}  }
class C{  private Set<RuntimeEnvironment> findCompatibleRuntimeEnvironments(final URI uri){  final Optional<? extends IN4JSProject> project=this.in4jsCore.findProject(uri);  if (project.isPresent() == false) {    LOGGER.debug("Cannot obtain " + IN4JSProject.class.getName() + " for "+ uri.toFileString());    LOGGER.error("Cannot resolve runner as no project corresponding to the selection found.");    return Collections.emptySet();  }  return hRuntimeEnvironments.findCompatibleRuntimeEnvironments(project.get());}  }
class C{  public boolean left(){  if (mColumn == 0) {    mRow--;    mColumn=6;  } else {    mColumn--;  }  if (isWithinCurrentMonth(mRow,mColumn)) {    return false;  }  previousMonth();  int lastDay=getNumberOfDaysInMonth();  mRow=getRowOf(lastDay);  mColumn=getColumnOf(lastDay);  return true;}  }
class C{  public DoubleVector square(){  DoubleVector v=new DoubleVector(size());  for (int i=0; i < size(); i++) {    v.V[i]=V[i] * V[i];  }  return v;}  }
class C{  public static boolean isReservedField(String key){  if (key == null) {    return true;  } else {    for (    ReservedField field : ReservedField.values()) {      if (field.getKey().equals(key)) {        return true;      }    }  }  return false;}  }
class C{  public boolean isSetErrorCode(){  return EncodingUtils.testBit(__isset_bitfield,__ERRORCODE_ISSET_ID);}  }
class C{  public NotificationChain basicSetRightOperand(Expression newRightOperand,NotificationChain msgs){  Expression oldRightOperand=rightOperand;  rightOperand=newRightOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__RIGHT_OPERAND,oldRightOperand,newRightOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static ReasonCode valueOf(int value){  ReasonCode entry=mValueToEnum.get(value);  if (entry != null) {    return entry;  }  throw new IllegalArgumentException("No enum const class " + ReasonCode.class.getName() + ""+ value+ "!");}  }
class C{  public byte[] readByteArray(){  try {    DataInput dis;    if (bigEndian) {      dis=new DataInputStream(stream);    } else {      dis=new LEDataInputStream(stream);    }    Vector<Byte> bytesV=new Vector<Byte>();    try {      while (true) {        byte b=dis.readByte();        bytesV.add(new Byte(b));      }    } catch (    EOFException eof) {      stream.close();    }    byte[] bytes=new byte[bytesV.size()];    for (int i=0; i < bytes.length; i++) {      bytes[i]=((Byte)bytesV.get(i)).byteValue();    }    return bytes;  } catch (  IOException e) {    throw new IllegalArgumentException("InputStream is unreadable : " + e.toString());  }}  }
class C{  @SuppressWarnings("unchecked") protected boolean addTelegramListener(TelegramListener newListener){  return (TelegramListeners.add(newListener));}  }
class C{  private void enforceRemovedRule(int ruleId){  Set<String> flowEntryName=ruleId2FlowName.get(ruleId);  Iterator<String> iter=flowEntryName.iterator();  while (iter.hasNext()) {    String name=iter.next();    removeFlow(name);    logger.info("ACL flow " + name + " removed.");  }}  }
class C{  @SuppressWarnings("unused") public static void blackhole(long value){}  }
class C{  public SQLDataException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  @Override public void roll(int field,int value){  if (value == 0) {    return;  }  if (field < 0 || field >= ZONE_OFFSET) {    throw new IllegalArgumentException();  }  complete();  int days, day, mod, maxWeeks, newWeek;  int max=-1;switch (field) {case YEAR:    max=maximums[field];  break;case WEEK_OF_YEAR:days=daysInYear(fields[YEAR]);day=DAY_OF_YEAR;mod=mod7(fields[DAY_OF_WEEK] - fields[day] - (getFirstDayOfWeek() - 1));maxWeeks=(days - 1 + mod) / 7 + 1;newWeek=mod(fields[field] - 1 + value,maxWeeks) + 1;if (newWeek == maxWeeks) {int addDays=(newWeek - fields[field]) * 7;if (fields[day] > addDays && fields[day] + addDays > days) {set(field,1);} else {set(field,newWeek - 1);}} else if (newWeek == 1) {int week=(fields[day] - ((fields[day] - 1) / 7 * 7) - 1 + mod) / 7 + 1;if (week > 1) {set(field,1);} else {set(field,newWeek);}} else {set(field,newWeek);}break;case WEEK_OF_MONTH:days=daysInMonth();day=DATE;mod=mod7(fields[DAY_OF_WEEK] - fields[day] - (getFirstDayOfWeek() - 1));maxWeeks=(days - 1 + mod) / 7 + 1;newWeek=mod(fields[field] - 1 + value,maxWeeks) + 1;if (newWeek == maxWeeks) {if (fields[day] + (newWeek - fields[field]) * 7 > days) {set(day,days);} else {set(field,newWeek);}} else if (newWeek == 1) {int week=(fields[day] - ((fields[day] - 1) / 7 * 7) - 1 + mod) / 7 + 1;if (week > 1) {set(day,1);} else {set(field,newWeek);}} else {set(field,newWeek);}break;case DATE:max=daysInMonth();break;case DAY_OF_YEAR:max=daysInYear(fields[YEAR]);break;case DAY_OF_WEEK:max=maximums[field];lastDateFieldSet=WEEK_OF_MONTH;break;case DAY_OF_WEEK_IN_MONTH:max=(fields[DATE] + ((daysInMonth() - fields[DATE]) / 7 * 7) - 1) / 7 + 1;break;case ERA:case MONTH:case AM_PM:case HOUR:case HOUR_OF_DAY:case MINUTE:case SECOND:case MILLISECOND:set(field,mod(fields[field] + value,maximums[field] + 1));if (field == MONTH && fields[DATE] > daysInMonth()) {set(DATE,daysInMonth());} else if (field == AM_PM) {lastTimeFieldSet=HOUR;}break;}if (max != -1) {set(field,mod(fields[field] - 1 + value,max) + 1);}complete();}  }
class C{  public void add(char[] w,int wLen){  if (i + wLen >= b.length) {    char[] new_b=new char[i + wLen + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  for (int c=0; c < wLen; c++)   b[i++]=w[c];}  }
class C{  private FacetSelection computeFacetSelection(Space space,FacetSelection selection){  try {    DashboardSelection ds=EngineUtils.getInstance().applyFacetSelection(userContext,space.getUniverse(),Collections.singletonList(space.getDomain()),selection);    List<Facet> result=new ArrayList<>();    result.addAll(ComputingService.INSTANCE.glitterFacets(space.getUniverse(),space.getDomain(),ds));    FacetSelection facetSelectionResult=new FacetSelection();    facetSelectionResult.setFacets(result);    if (ds.hasCompareToSelection()) {      DashboardSelection compareDS=new DashboardSelection();      Domain domain=ds.getCompareToSelection().getDomain();      compareDS.add(ds.getCompareToSelection());      ArrayList<Facet> facets=new ArrayList<>();      for (      Axis filter : ds.getCompareToSelection().getFilters()) {        facets.add(ComputingService.INSTANCE.glitterFacet(space.getUniverse(),domain,compareDS,filter,null,0,100,null));      }      facetSelectionResult.setCompareTo(facets);    }    return facetSelectionResult;  } catch (  TimeoutException|ScopeException|ComputingException|InterruptedException e1) {    return selection;  }}  }
class C{  @Override public boolean isBackEventConsumed(){  callbacks.onSaveStep(StepCallbacks.ACTION_PREV,getStep(),stepBody.getStepResult(false));  return false;}  }
class C{  public void removeListener(INotifyChangedListener notifyChangedListener){  changeNotifier.removeListener(notifyChangedListener);}  }
class C{  @SuppressWarnings("unchecked") public static <A>List<A> nil(){  return (List<A>)EMPTY_LIST;}  }
class C{  Node(T t,String id,double x,double y,double w,double h,double minW,double maxW,double minH,double maxH,double hWeight,double vWeight){  super(t,id);  this.type=ElementType.NODE;  r.x=x;  r.y=y;  r.width=w;  r.height=h;  this.minWidth=minW;  this.maxWidth=maxW;  this.minHeight=minH;  this.maxHeight=maxH;  this.horizontalWeight=hWeight;  this.verticalWeight=vWeight;}  }
class C{  public void addStringPattern(String pattern,AnnotationMirror theQual){  boolean res=qualHierarchy.updateMappingToMutableSet(stringPatterns,Pattern.compile(pattern),theQual);  if (!res) {    ErrorReporter.errorAbort("PropagationTreeAnnotator: invalid update of stringPatterns " + stringPatterns + " at "+ pattern+ " with "+ theQual);  }}  }
class C{  public boolean isBuildEnabled(){  return _build;}  }
class C{  public static double determinant2by2(Point2D v0,Point2D v1){  return (v0.getX() * v1.getY() - v1.getX() * v0.getY());}  }
class C{  public static LoggerSettings logToCollection(String logName,Collection<LoggingEvent> collection){  Logger logger=LogManager.getLogger(logName);  LoggerSettings loggerSettings=new LoggerSettings(logger);  logger.removeAllAppenders();  logger.setAdditivity(false);  CollectionAppender listAppender=new CollectionAppender(collection);  logger.addAppender(listAppender);  return loggerSettings;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x110000];  int i=0;  int j=0;  while (i < 128) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void determineBounds(){  double value;  m_minX=m_plots.get(0).m_minX;  m_maxX=m_plots.get(0).m_maxX;  m_minY=m_plots.get(0).m_minY;  m_maxY=m_plots.get(0).m_maxY;  m_minC=m_plots.get(0).m_minC;  m_maxC=m_plots.get(0).m_maxC;  for (int i=1; i < m_plots.size(); i++) {    value=m_plots.get(i).m_minX;    if (value < m_minX) {      m_minX=value;    }    value=m_plots.get(i).m_maxX;    if (value > m_maxX) {      m_maxX=value;    }    value=m_plots.get(i).m_minY;    if (value < m_minY) {      m_minY=value;    }    value=m_plots.get(i).m_maxY;    if (value > m_maxY) {      m_maxY=value;    }    value=m_plots.get(i).m_minC;    if (value < m_minC) {      m_minC=value;    }    value=m_plots.get(i).m_maxC;    if (value > m_maxC) {      m_maxC=value;    }  }  fillLookup();  this.repaint();}  }
class C{  private void handleCancelAction(TriggerProcess process) throws IOException, WSDLException, ParserConfigurationException {  INotificationServiceAdapter serviceClient=getServiceClient(process.getTriggerDefinition());  serviceClient.onCancelAction(process.getKey());}  }
class C{  @Override public void displayAcceptedOffer(Offer offer){  this.acceptedOffers.add(offer);  if (offer.getType() == PlanConstants.TEXT) {    textAdapter.setCardOffer(offer);  }}  }
class C{  public boolean isDirect(){  return (X_C_Order.PAYMENTRULE_DirectDeposit.equals(getPaymentRule()) || X_C_Order.PAYMENTRULE_DirectDebit.equals(getPaymentRule()));}  }
class C{  public RenderStringBasic(Formats[] fmts,int[] aiIndex){  m_aFormats=fmts;  m_aiIndex=aiIndex;}  }
class C{  public ReplicationJob createJobForCopyPartition(long auditLogId,long auditLogEntryCreateTime,NamedPartition namedPartition) throws StateUpdateException {  String partitionName=namedPartition.getName();  List<String> partitionNames=new ArrayList<>();  partitionNames.add(partitionName);  ReplicationOperation replicationOperation=ReplicationOperation.COPY_PARTITION;  Map<String,String> extras=new HashMap<>();  extras.put(PersistedJobInfo.AUDIT_LOG_ID_EXTRAS_KEY,Long.toString(auditLogId));  extras.put(PersistedJobInfo.AUDIT_LOG_ENTRY_CREATE_TIME_KEY,Long.toString(auditLogEntryCreateTime));  Partition partition=namedPartition.getPartition();  HiveObjectSpec spec=new HiveObjectSpec(namedPartition);  PersistedJobInfo persistedJobInfo=jobInfoStore.resilientCreate(replicationOperation,ReplicationStatus.PENDING,ReplicationUtils.getLocation(partition),srcCluster.getName(),spec,partitionNames,ReplicationUtils.getTldt(partition),Optional.empty(),Optional.empty(),extras);  ReplicationTask replicationTask=new CopyPartitionTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,spec,ReplicationUtils.getLocation(partition),Optional.<Path>empty(),directoryCopier,true);  return new ReplicationJob(conf,replicationTask,onStateChangeHandler,persistedJobInfo);}  }
class C{  protected static ExifParser parse(InputStream inputStream,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,OPTION_IFD_0 | OPTION_IFD_1 | OPTION_IFD_EXIF| OPTION_IFD_GPS| OPTION_IFD_INTEROPERABILITY| OPTION_THUMBNAIL,iRef);}  }
class C{  public static Number abs(Number a){  if (isFloatingPoint(a)) {    return Math.abs(a.doubleValue());  } else {    return Math.abs(a.longValue());  }}  }
class C{  public synchronized void keyRelease(int keycode){  checkKeycodeArgument(keycode);  peer.keyRelease(keycode);  afterEvent();}  }
class C{  public boolean contains(Geometry g){  return baseGeom.contains(g);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:52.559 -0400",hash_original_method="715CB29FF3CEE320E11EC1BD997C9D63",hash_generated_method="BF2ED6D8AA7E3F26499C1DEA76CA3447") @Override public boolean hasStableIds(){  return false;}  }
class C{  public List<Activity> extractActivities(File file){  int boinkPoints=0;  List<GPSPoint> vehicleLog=readGpsPoints(file);  List<Activity> result=processVehicleLog(vehicleLog);  totalBoinkPoints+=boinkPoints;  return result;}  }
class C{  private List<JdbcStatement> createDefaultQueryJdbcStatements(){  List<JdbcStatement> jdbcStatements=new ArrayList<>();{    JdbcStatement jdbcStatement=new JdbcStatement();    jdbcStatement.setType(JdbcStatementType.QUERY);    jdbcStatement.setSql(MockJdbcOperations.CASE_1_SQL);    jdbcStatements.add(jdbcStatement);  }  return jdbcStatements;}  }
class C{  private void startProcessing(){  long currentTime=System.currentTimeMillis();  if (UAC_ROLE.equals(mRefresher)) {    startTimer(currentTime,mExpirePeriod,0.5);  } else {    startTimer(currentTime,mExpirePeriod);  }}  }
class C{  public static long freeMemory(){  return 0L;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  protected void determineNumberOfClusters(){  if (!m_numberOfClustersDetermined && (m_cobwebTree != null)) {    int[] numClusts=new int[1];    numClusts[0]=0;    try {      m_cobwebTree.assignClusterNums(numClusts);    } catch (    Exception e) {      e.printStackTrace();      numClusts[0]=0;    }    m_numberOfClusters=numClusts[0];    m_numberOfClustersDetermined=true;  }}  }
class C{  public boolean decodeIntegerValue(int startIndex){  if (decodeShortInteger(startIndex) == true) {    return true;  }  return decodeLongInteger(startIndex);}  }
class C{  public IssueMatcher endsWith(URI expectedSuffix){  return addPropertyMatcher(URIPropertyMatcher.Mode.EndsWith,expectedSuffix);}  }
class C{  public Yaml(Representer representer){  this(new Constructor(),representer);}  }
class C{  public static int utf8Length(String string){  CharacterIterator iter=new StringCharacterIterator(string);  char ch=iter.first();  int size=0;  while (ch != CharacterIterator.DONE) {    if ((ch >= 0xD800) && (ch < 0xDC00)) {      char trail=iter.next();      if ((trail > 0xDBFF) && (trail < 0xE000)) {        size+=4;      } else {        size+=3;        iter.previous();      }    } else     if (ch < 0x80) {      size++;    } else     if (ch < 0x800) {      size+=2;    } else {      size+=3;    }    ch=iter.next();  }  return size;}  }
class C{  @SmallTest public void testChangeCursorNull(){  SimpleCursorAdapter ca=new SimpleCursorAdapter(mContext,mLayout,mCursor2x2,mFrom,mTo);  assertEquals(2,ca.getCount());  ca.changeCursor(null);  assertEquals(0,ca.getCount());}  }
class C{  public int indexOf(Node elem){  runTo(-1);  if (null == m_map)   return -1;  for (int i=0; i < m_firstFree; i++) {    Node node=m_map[i];    if ((null != node) && node.equals(elem))     return i;  }  return -1;}  }
class C{  public LowerCaseTokenizer(){}  }
class C{  public EpsilonBoxDominanceArchive(double epsilon,Iterable<? extends Solution> iterable){  super(new EpsilonBoxDominanceComparator(epsilon),iterable);}  }
class C{  public JCalModule(){  super(MODULE_NAME,MODULE_VERSION);  setScribeIndex(new ScribeIndex());  addSerializer(serializer);  addDeserializer(ICalendar.class,deserializer);}  }
class C{  public boolean isSelectable(OMGraphic omg){  DrawingTool dt=getDrawingTool();  return (dt != null && dt.canEdit(omg.getClass()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:29.137 -0500",hash_original_method="9EB36950261646858CECEB28CEC974AC",hash_generated_method="1FD39668FB440D378C7EC134EA86D3F8") public CharSequence loadAuthor(PackageManager pm) throws NotFoundException {  if (mAuthorResource <= 0)   throw new NotFoundException();  String packageName=mService.resolvePackageName;  ApplicationInfo applicationInfo=null;  if (packageName == null) {    packageName=mService.serviceInfo.packageName;    applicationInfo=mService.serviceInfo.applicationInfo;  }  return pm.getText(packageName,mAuthorResource,applicationInfo);}  }
class C{  private static boolean CallNonvirtualBooleanMethod(JNIEnvironment env,int objJREF,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualBooleanMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Boolean,true);    return Reflection.unwrapBoolean(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return false;  }}  }
class C{  private void encryptBlock(int[] value){  int left=value[0];  int right=value[1];  left^=p[0];  right^=F(left) ^ p[1];  left^=F(right) ^ p[2];  right^=F(left) ^ p[3];  left^=F(right) ^ p[4];  right^=F(left) ^ p[5];  left^=F(right) ^ p[6];  right^=F(left) ^ p[7];  left^=F(right) ^ p[8];  right^=F(left) ^ p[9];  left^=F(right) ^ p[10];  right^=F(left) ^ p[11];  left^=F(right) ^ p[12];  right^=F(left) ^ p[13];  left^=F(right) ^ p[14];  right^=F(left) ^ p[15];  left^=F(right) ^ p[16];  right^=p[17];  value[0]=right;  value[1]=left;}  }
class C{  public static void checkState(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  protected void turnoutPushbuttonLockout(boolean pushButtonLockout){  if (log.isDebugEnabled()) {    log.debug("Send command to " + (pushButtonLockout ? "Lock" : "Unlock") + " Pushbutton "+ prefix+ _number);  }  byte[] bl=PushbuttonPacket.pushbuttonPkt(prefix,_number,pushButtonLockout);  NceMessage m=NceMessage.sendPacketMessage(tc,bl);  tc.sendNceMessage(m,null);}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  public final boolean isLoadFinished(){  return dataSourceStream.isLoadFinished();}  }
class C{  private void writeMetadata(HashMap<String,Long> map,String outputDir,int colID,FileSystem fs,TfUtils agents,boolean fromCP) throws IOException {  MVImputeAgent mvagent=agents.getMVImputeAgent();  String mode=null;  Long count=null;  int rcdIndex=0, modeIndex=0;  long maxCount=Long.MIN_VALUE;  boolean isRecoded=(isApplicable(colID) != -1);  boolean isModeImputed=(mvagent.getMethod(colID) == MVMethod.GLOBAL_MODE);  Path pt=new Path(outputDir + "/Recode/" + agents.getName(colID)+ TfUtils.TXMTD_RCD_MAP_SUFFIX);  BufferedWriter br=null;  if (isRecoded)   br=new BufferedWriter(new OutputStreamWriter(fs.create(pt,true)));  if (agents.getNAStrings() != null)   for (  String naword : agents.getNAStrings())   map.remove(naword);  if (fromCP)   map=handleMVConstant(colID,agents,map);  if (map.size() == 0)   throw new RuntimeException("Can not proceed since \"" + agents.getName(colID) + "\" (id="+ colID+ ") contains only the missing values, and not a single valid value -- set imputation method to \"constant\".");  List<String> newNames=new ArrayList<String>(map.keySet());  Collections.sort(newNames);  for (  String w : newNames) {    count=map.get(w);    ++rcdIndex;    if (br != null)     br.write(UtilFunctions.quote(w) + TfUtils.TXMTD_SEP + rcdIndex+ TfUtils.TXMTD_SEP+ count+ "\n");    if (maxCount < count) {      maxCount=count;      mode=w;      modeIndex=rcdIndex;    }    map.put(w,(long)rcdIndex);  }  if (br != null)   br.close();  if (mode == null) {    mode="";    maxCount=0;  }  if (isRecoded) {    pt=new Path(outputDir + "/Recode/" + agents.getName(colID)+ TfUtils.MODE_FILE_SUFFIX);    br=new BufferedWriter(new OutputStreamWriter(fs.create(pt,true)));    br.write(UtilFunctions.quote(mode) + "," + modeIndex+ ","+ maxCount);    br.close();    pt=new Path(outputDir + "/Recode/" + agents.getName(colID)+ TfUtils.TXMTD_RCD_DISTINCT_SUFFIX);    br=new BufferedWriter(new OutputStreamWriter(fs.create(pt,true)));    br.write("" + map.size());    br.close();  }  if (isModeImputed) {    pt=new Path(outputDir + "/Impute/" + agents.getName(colID)+ TfUtils.TXMTD_MV_FILE_SUFFIX);    br=new BufferedWriter(new OutputStreamWriter(fs.create(pt,true)));    br.write(colID + "," + UtilFunctions.quote(mode));    br.close();  }}  }
class C{  public void add(Integer id,String method){  Log.debug(getClass(),"Binding ID: ",id," to method: ",method);  requests.put(id,method);}  }
class C{  public XhtmlDocument appendHead(String value){  head.addElement(value);  return (this);}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  private void meekR1Locally(Node a,Graph graph,IKnowledge knowledge){  List<Node> adjacentNodes=graph.getAdjacentNodes(a);  visitedNodes.add(a);  if (adjacentNodes.size() < 2) {    return;  }  ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);  int[] combination;  while ((combination=cg.next()) != null) {    Node b=adjacentNodes.get(combination[0]);    Node c=adjacentNodes.get(combination[1]);    if (graph.isAdjacentTo(b,c)) {      continue;    }    if (graph.isDirectedFromTo(b,a) && graph.isUndirectedFromTo(a,c)) {      if (!isUnshieldedNoncollider(b,a,c,graph)) {        continue;      }      if (isArrowpointAllowed(a,c,knowledge,graph) && !createsCycle(a,c,graph)) {        Edge after=direct(a,c,graph);        Node x=after.getNode1();        Node y=after.getNode2();        rule1Queue.add(y);        rule2Queue.add(y);        rule3Queue.add(x);        if (useRule4) {          rule4Queue.add(x);        }        TetradLogger.getInstance().log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Meek R1 triangle (" + b + "-->"+ a+ "---"+ c+ ")",graph.getEdge(a,c)));      }    } else     if (graph.isDirectedFromTo(c,a) && graph.isUndirectedFromTo(a,b)) {      if (!isUnshieldedNoncollider(b,a,c,graph)) {        continue;      }      if (isArrowpointAllowed(a,b,knowledge,graph) && !createsCycle(a,b,graph)) {        Edge after=direct(a,b,graph);        Node x=after.getNode1();        Node y=after.getNode2();        rule1Queue.add(y);        rule2Queue.add(y);        rule3Queue.add(x);        if (useRule4) {          rule4Queue.add(x);        }        TetradLogger.getInstance().log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Meek R1 (" + c + "-->"+ a+ "---"+ b+ ")",graph.getEdge(a,b)));      }    }  }}  }
class C{  public static int dip2px(Context context,float dipValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dipValue * scale + 0.5f);}  }
class C{  public boolean addNode(N node,int replicas){  if (node == null)   return false;  long seed=affSeed.hashCode() * 31 + hash(node);  rw.writeLock().lock();  try {    if (!nodes.add(node))     return false;    int hash=hash(seed);    SortedSet<N> set=circle.get(hash);    if (set == null)     circle.put(hash,set=new TreeSet<>(nodesComp));    set.add(node);    for (int i=1; i <= replicas; i++) {      seed=seed * affSeed.hashCode() + i;      hash=hash(seed);      set=circle.get(hash);      if (set == null)       circle.put(hash,set=new TreeSet<>(nodesComp));      set.add(node);    }    return true;  }  finally {    rw.writeLock().unlock();  }}  }
class C{  public void componentShown(ComponentEvent e){  if (logger.isLoggable(Level.FINE)) {    logger.fine("layer pane for " + layer.getName() + " receiving componentShown event");  }  Component comp=e.getComponent();  if (comp == null) {  } else   if (comp == layer) {    if (isLayerOn() != true) {      setLayerOn(true);      if (logger.isLoggable(Level.FINE)) {        logger.fine("layer " + layer.getName() + " is now visible.");      }    }  } else   if (comp == layer.getPalette()) {    setPaletteOn(true);  }}  }
class C{  public Vector3f mult(Vector3f vec,Vector3f product){  if (null == product) {    product=new Vector3f();  }  float x=vec.x;  float y=vec.y;  float z=vec.z;  product.x=m00 * x + m01 * y + m02 * z;  product.y=m10 * x + m11 * y + m12 * z;  product.z=m20 * x + m21 * y + m22 * z;  return product;}  }
class C{  private void start() throws IgniteCheckedException {  boolean success=false;  try {    endpoint=IpcEndpointFactory.connectEndpoint(endpointAddr,new GridLoggerProxy(new HadoopIgfsJclLogger(log),null,null,""));    out=new IgfsDataOutputStream(new BufferedOutputStream(endpoint.outputStream()));    reader=new ReaderThread();    reader.setDaemon(true);    reader.start();    success=true;  } catch (  IgniteCheckedException e) {    IpcOutOfSystemResourcesException resEx=e.getCause(IpcOutOfSystemResourcesException.class);    if (resEx != null)     throw new IgniteCheckedException(IpcSharedMemoryServerEndpoint.OUT_OF_RESOURCES_MSG,resEx);    throw e;  } finally {    if (!success)     stop();  }}  }
class C{  private int handleS(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (contains(value,index - 1,3,"ISL","YSL")) {    index++;  } else   if (index == 0 && contains(value,index,5,"SUGAR")) {    result.append('X','S');    index++;  } else   if (contains(value,index,2,"SH")) {    if (contains(value,index + 1,4,"HEIM","HOEK","HOLM","HOLZ")) {      result.append('S');    } else {      result.append('X');    }    index+=2;  } else   if (contains(value,index,3,"SIO","SIA") || contains(value,index,4,"SIAN")) {    if (slavoGermanic) {      result.append('S');    } else {      result.append('S','X');    }    index+=3;  } else   if ((index == 0 && contains(value,index + 1,1,"M","N","L","W")) || contains(value,index + 1,1,"Z")) {    result.append('S','X');    index=contains(value,index + 1,1,"Z") ? index + 2 : index + 1;  } else   if (contains(value,index,2,"SC")) {    index=handleSC(value,result,index);  } else {    if (index == value.length() - 1 && contains(value,index - 2,2,"AI","OI")) {      result.appendAlternate('S');    } else {      result.append('S');    }    index=contains(value,index + 1,1,"S","Z") ? index + 2 : index + 1;  }  return index;}  }
class C{  public Element generateXML(Document doc){  Element root=doc.createElement("settings");  Properties mapping=getFullMapping();  for (  String otherParam : mapping.stringPropertyNames()) {    Element otherParamE=doc.createElement(otherParam);    otherParamE.setTextContent("" + mapping.get(otherParam));    root.appendChild(otherParamE);  }  return root;}  }
class C{  public SkeinEngine(int blockSizeBits,int outputSizeBits){  if (outputSizeBits % 8 != 0) {    throw new IllegalArgumentException("Output size must be a multiple of 8 bits. :" + outputSizeBits);  }  this.outputSizeBytes=outputSizeBits / 8;  this.threefish=new ThreefishEngine(blockSizeBits);  this.ubi=new UBI(threefish.getBlockSize());}  }
class C{  public byte[] decode(byte[] ascii){  return fromAscii(ascii);}  }
class C{  public void removeDisconnectedSubgraphs(int minSubgraphSize){  LOG.info("Removing subgraphs with fewer than {} vertices",minSubgraphSize);  boolean edgeListsBuilt=incomingEdges != null;  if (!edgeListsBuilt) {    buildEdgeLists();  }  TIntSet verticesExplored=new TIntHashSet();  int nSearches=0;  int nSubgraphsRemoved=0;  int nSubgraphsRetained=0;  final Edge edge=edgeStore.getCursor();  for (int vertex=0; vertex < vertexStore.getVertexCount(); vertex++) {    if (verticesExplored.contains(vertex)) {      continue;    }    StreetRouter r=new StreetRouter(this);    r.streetMode=StreetMode.WALK;    r.setOrigin(vertex);    r.distanceLimitMeters=0;    r.route();    TIntIntMap reachedVertices=r.getReachedVertices();    nSearches++;    if (nSearches % 10000 == 0) {      LOG.info("Searched from vertex number {}, {} total searches performed.",vertex,nSearches);    }    verticesExplored.addAll(reachedVertices.keySet());    if (reachedVertices.size() >= minSubgraphSize) {      nSubgraphsRetained++;      continue;    }    reachedVertices.put(vertex,0);    reachedVertices.forEachKey(null);    nSubgraphsRemoved++;  }  LOG.info("Retained {} large disconnected subgraphs.",nSubgraphsRetained);  if (nSubgraphsRemoved > 0) {    LOG.info("Removed {} small disconnected subgraphs.",nSubgraphsRemoved);  } else {    LOG.info("Found no subgraphs to remove, congratulations for having clean OSM data.");  }}  }
class C{  private void launchAnimVectorList(){  if (!animatedVectorFirstLaunched) {    if (animatedVectorList.getLevel() < animatedVectorListMaxLevel) {      animatedVectorList.setLevel(animatedVectorList.getLevel() + 1);      currentAnimatedVectorFromList=(AnimatedVectorDrawable)animatedVectorList.getCurrent();    } else {      animatedVectorList.setLevel(0);      currentAnimatedVectorFromList=(AnimatedVectorDrawable)animatedVectorList.getCurrent();    }  } else {    animatedVectorFirstLaunched=false;  }  currentAnimatedVectorFromList.start();  uiHandler.postDelayed(uiRunnable,300 + 3000);}  }
class C{  @Override protected void onDetachedFromWindow(){  final ViewParent parent=getParent();  if (mOnOffsetChangedListener != null && parent instanceof AppBarLayout) {    ((AppBarLayout)parent).removeOnOffsetChangedListener(mOnOffsetChangedListener);  }  super.onDetachedFromWindow();}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  public Long subtract(final NetworkTimeStamp other){  return this.getRaw() - other.getRaw();}  }
class C{  @Override public boolean supportsSchemasInTableDefinitions(){  debugCodeCall("supportsSchemasInTableDefinitions");  return true;}  }
class C{  public final F f(){  return f;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=scanManager.getCropRect();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public void testDefault(){  performTest(getFilter());}  }
class C{  public AttributeDefinitionBuilder initialValue(JCTree.JCExpression initialValue){  this.variableInit=initialValue;  return this;}  }
class C{  private void createRaytracingTexture(){  this.raytraceTexture=glCreateTextures(GL_TEXTURE_2D);  glTextureStorage2D(this.raytraceTexture,1,GL_RGBA32F,width,height);}  }
class C{  @Override protected void doPost(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final String contentType=req.getContentType();  if (log.isInfoEnabled())   log.info("Request body: " + contentType);  final String mimeType=new MiniMime(contentType).getMimeType().toLowerCase();  if (!mimeTypes.contains(mimeType)) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,"Content-Type not recognized as graph data: " + contentType);    return;  }  try {    submitApiTask(new BlueprintsPostTask(req,resp,getNamespace(req),ITx.UNISOLATED)).get();  } catch (  Throwable t) {    BigdataRDFServlet.launderThrowable(t,resp,"");  }}  }
class C{  private boolean existsHook(GHOrganization org,String url) throws IOException {  for (  GHHook hook : org.getHooks()) {    if (hook.getConfig().get("url").equals(url)) {      return true;    }  }  return false;}  }
class C{  @SuppressWarnings("unchecked") private static <T,U>T[] arrayCopyOf(U[] original,int newLength,Class<? extends T[]> newType){  T[] copy=((Object)newType == (Object)Object[].class) ? (T[])new Object[newLength] : (T[])Array.newInstance(newType.getComponentType(),newLength);  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  void sizePosition(){  JPanel posPanel=new JPanel();  JPanel xyPanel=new JPanel();  xyPanel.setLayout(new BoxLayout(xyPanel,BoxLayout.Y_AXIS));  JPanel xPanel=new JPanel();  JLabel txt=new JLabel(" X: ");  xPositionTextSpin=getSpinner(xPos,"x position");  xPositionTextSpin.addChangeListener(SpinnerChangeListener);  xPanel.add(txt);  xPanel.add(xPositionTextSpin);  JPanel yPanel=new JPanel();  txt=new JLabel(" Y: ");  yPositionTextSpin=getSpinner(yPos,"y position");  yPositionTextSpin.addChangeListener(SpinnerChangeListener);  yPanel.add(txt);  yPanel.add(yPositionTextSpin);  xyPanel.add(xPanel);  xyPanel.add(yPanel);  JPanel sizePanel=new JPanel();  sizePanel.setLayout(new BoxLayout(sizePanel,BoxLayout.Y_AXIS));  JPanel widthPanel=new JPanel();  widthSizeTextSpin=getSpinner(fixedWidth,Bundle.getMessage("width"));  widthSizeTextSpin.addChangeListener(SpinnerChangeListener);  txt=new JLabel(Bundle.getMessage("width") + ": ");  widthPanel.add(txt);  widthPanel.add(widthSizeTextSpin);  JPanel heightPanel=new JPanel();  heightSizeTextSpin=getSpinner(fixedHeight,Bundle.getMessage("height"));  heightSizeTextSpin.addChangeListener(SpinnerChangeListener);  txt=new JLabel(Bundle.getMessage("height") + ": ");  heightPanel.add(txt);  heightPanel.add(heightSizeTextSpin);  sizePanel.add(widthPanel);  sizePanel.add(heightPanel);  posPanel.add(xyPanel);  posPanel.add(sizePanel);  posPanel.setLayout(new BoxLayout(posPanel,BoxLayout.Y_AXIS));  propertiesPanel.addTab(Bundle.getMessage("SizeTabTitle"),null,posPanel,Bundle.getMessage("SizeTabTooltip"));}  }
class C{  public static boolean isApplicationIsComposingType(String mime){  return mime != null && mime.toLowerCase().startsWith(IsComposingInfo.MIME_TYPE);}  }
class C{  public static double sumOfPowers(DoubleArrayList data,int k){  return sumOfPowerDeviations(data,k,0);}  }
class C{  protected void parseMetaData(InStream in) throws IOException {  String xmlMetaData=in.readString();  tagtypes.tagMetaData(xmlMetaData);}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void addErrorMessage(String errorKey){  addMessage(null,FacesMessage.SEVERITY_ERROR,errorKey);  setShowError(true);}  }
class C{  public HistoryEntryItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private static float[] createPlane(float[] p0,float[] p1,float[] p2){  float[] a={p1[0] - p0[0],p1[1] - p0[1],p1[2] - p0[2]};  float[] b={p2[0] - p0[0],p2[1] - p0[1],p2[2] - p0[2]};  float[] n=new float[3];  n[0]=a[1] * b[2] - a[2] * b[1];  n[1]=a[2] * b[0] - a[0] * b[2];  n[2]=a[0] * b[1] - a[1] * b[0];  float l=(float)Math.sqrt(n[0] * n[0] + n[1] * n[1] + n[2] * n[2]);  n[0]/=l;  n[1]/=l;  n[2]/=l;  float d=p0[0] * n[0] + p0[1] * n[1] + p0[2] * n[2];  return (new float[]{n[0],n[1],n[2],d});}  }
class C{  public static boolean checkSecurityInfo(String endpoint,Identity clientIdentity,SecurityInfo securityInfo){  if (clientIdentity.isSecure()) {    if (securityInfo == null) {      LOG.warn("Client '{}' without security info try to connect through the secure endpoint",endpoint);      return false;    } else     if (clientIdentity.isPSK()) {      return checkPskIdentity(endpoint,clientIdentity,securityInfo);    } else     if (clientIdentity.isRPK()) {      return checkRpkIdentity(endpoint,clientIdentity,securityInfo);    } else     if (clientIdentity.isX509()) {      return checkX509Identity(endpoint,clientIdentity,securityInfo);    } else {      LOG.warn("Unable to authenticate client '{}': unknown authentication mode",endpoint);      return false;    }  } else {    if (securityInfo != null) {      LOG.warn("Client '{}' must connect using DTLS",endpoint);      return false;    }  }  return true;}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  @Override public void updateObject(String columnLabel,Object x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateObject(" + quote(columnLabel) + ", x);");    }    update(columnLabel,convertToUnknownValue(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public String toString(){  return new String(b,0,i_end);}  }
class C{  public Matrix4d add(Matrix4dc other){  return add(other,this);}  }
class C{  protected void revalidate(){  if (valid) {    return;  }  valid=true;  missing=false;  malformed=false;  String s=getValueAsString();  if (s == null) {    missing=true;    return;  }  try {    ListBuilder builder=new ListBuilder();    doParse(s,builder);    if (builder.getList() != null) {      clear(itemList);    }    itemList=builder.getList();  } catch (  ParseException e) {    itemList=new ArrayList(1);    malformed=true;  }}  }
class C{  public static KeyStore loadKeyStore(String keystoreType,@Nullable String keystorePassword,InputStream is) throws KeyStoreException {  try {    KeyStore keystore=KeyStore.getInstance(keystoreType);    keystore.load(is,keystorePassword != null ? keystorePassword.toCharArray() : null);    return keystore;  } catch (  IOException x) {    throw new KeyStoreException(x);  }catch (  GeneralSecurityException x) {    throw new KeyStoreException(x);  } finally {    try {      is.close();    } catch (    IOException x) {    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.018 -0500",hash_original_method="9CCD20C4D5BE58E51524A629AA69C9DE",hash_generated_method="3C668B4D56050A6BE5D8C9DE29FE2933") public void requestTransitionStart(LayoutTransition transition){  if (mPendingTransitions == null || !mPendingTransitions.contains(transition)) {    if (mPendingTransitions == null) {      mPendingTransitions=new ArrayList<LayoutTransition>();    }    mPendingTransitions.add(transition);  }}  }
class C{  protected boolean filterHeader(int index){  return (this.headerName == null) || this.headerName.equalsIgnoreCase(this.allHeaders[index].getName());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isPubid(int c){  return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0;}  }
class C{  private void preInsert(MkMaxEntry q,MkMaxEntry nodeEntry,KNNHeap knns_q){  if (LOG.isDebugging()) {    LOG.debugFine("preInsert " + q + " - "+ nodeEntry+ "\n");  }  double knnDist_q=knns_q.getKNNDistance();  MkMaxTreeNode<O> node=getNode(nodeEntry);  double knnDist_node=0.;  if (node.isLeaf()) {    for (int i=0; i < node.getNumEntries(); i++) {      MkMaxEntry p=node.getEntry(i);      double dist_pq=distance(p.getRoutingObjectID(),q.getRoutingObjectID());      if (dist_pq <= knnDist_q) {        knns_q.insert(dist_pq,p.getRoutingObjectID());        if (knns_q.size() >= getKmax()) {          knnDist_q=knns_q.getKNNDistance();          q.setKnnDistance(knnDist_q);        }      }      if (dist_pq <= p.getKnnDistance()) {        KNNList knns_p=knnq.getKNNForDBID(p.getRoutingObjectID(),getKmax() - 1);        if (knns_p.size() + 1 < getKmax()) {          p.setKnnDistance(Double.NaN);        } else {          double knnDist_p=Math.max(dist_pq,knns_p.getKNNDistance());          p.setKnnDistance(knnDist_p);        }      }      knnDist_node=Math.max(knnDist_node,p.getKnnDistance());    }  } else {    List<DoubleIntPair> entries=getSortedEntries(node,q.getRoutingObjectID());    for (    DoubleIntPair distEntry : entries) {      MkMaxEntry dirEntry=node.getEntry(distEntry.second);      double entry_knnDist=dirEntry.getKnnDistance();      if (distEntry.second < entry_knnDist || distEntry.second < knnDist_q) {        preInsert(q,dirEntry,knns_q);        knnDist_q=knns_q.getKNNDistance();      }      knnDist_node=Math.max(knnDist_node,dirEntry.getKnnDistance());    }  }  if (LOG.isDebugging()) {    LOG.debugFine(nodeEntry + "set knn dist " + knnDist_node);  }  nodeEntry.setKnnDistance(knnDist_node);}  }
class C{  public boolean isConnected(){  return mConnection != null;}  }
class C{  public static <T1,T2,T3,R>Function3<T1,T2,T3,R> memoizeTriFunction(Function3<T1,T2,T3,R> fn){  val memoise2=memoizeFunction(null);  return null;}  }
class C{  @Override public void update(){  if (!this.worldObj.isRemote) {    boolean wasBurning=this.isBurning();    ItemStack input=this.getStackInSlot(0);    ItemStack fuel=this.getStackInSlot(1);    ItemStack output=this.getStackInSlot(4);    DistilleryRecipes.RecipeHandler recipe=DistilleryRecipes.getRecipe(input);    if (recipe != null) {      if ((fuel != null || this.currentBurnStack != null || this.currentBurn > 0)) {        if (currentBurn <= 0 && !this.isTankFull()) {          this.decrStackSize(1,1);          this.currentBurn=this.maxBurnTime=TileEntityFurnace.getItemBurnTime(fuel);        } else {          this.currentBurn--;        }      }      if (!this.isCooking() && input != null && isBurning()) {        if (this.tank.getFluidAmount() + recipe.outputFluid.amount <= this.tank.getCapacity()) {          this.decrStackSize(0,1);          this.currentCookTime=this.maxCookTime=recipe.burnTime;          this.currentBurnStack=recipe.outputStack.copy();        }      } else {        if (this.currentCookTime == 1 && this.isBurning()) {          if (output == null) {            if (this.currentBurnStack != null)             this.setInventorySlotContents(4,this.currentBurnStack.copy());            if (recipe.outputFluid != null) {              this.tank.fill(recipe.outputFluid.copy(),true);            }            this.currentBurnStack=null;            this.currentCookTime--;            dropXP(getWorld(),getPos(),recipe.outputExp);          } else           if (output.isItemEqual(this.currentBurnStack)) {            if (output.copy().stackSize + this.currentBurnStack.copy().stackSize <= this.getInventoryStackLimit()) {              this.incrStackSize(4,this.currentBurnStack.copy().stackSize);              this.currentBurnStack=null;              this.currentCookTime--;              if (recipe.outputFluid != null) {                this.tank.fill(recipe.outputFluid.copy(),true);              }              dropXP(getWorld(),getPos(),recipe.outputExp);            }          }          this.markDirty();        } else         if (this.isBurning()) {          this.currentCookTime--;        } else {          this.currentCookTime++;        }      }    } else {      if (this.currentBurn > 0) {        this.currentBurn--;      }    }    ItemStack fillingInput=getStackInSlot(2);    ItemStack currentFillingOutputSlot=getStackInSlot(3);    if (currentFillingOutputSlot == null || (ItemStack.areItemStacksEqual(fillingInput,currentFillingOutputSlot) && fillingInput.stackSize + currentFillingOutputSlot.stackSize <= getInventoryStackLimit())) {      Pair<ItemStack,FluidStack> outputFilling=DistilleryRecipes.getFillingOutput(fillingInput,this.tank.getFluid());      if (outputFilling != null) {        if ((ItemStack.areItemStacksEqual(currentFillingOutputSlot,outputFilling.getKey()) || currentFillingOutputSlot == null) && (FluidStack.areFluidStackTagsEqual(this.tank.getFluid(),outputFilling.getValue()))) {          setInventorySlotContents(3,Util.decreaseItemStack(currentFillingOutputSlot,outputFilling.getKey()));        }      }    }    if (wasBurning != this.isBurning()) {      setState(this.isBurning(),BlockDistillery.ACTIVE,getWorld(),getPos());    }    if (this.maxBurnTime != this.lastMaxBurnTime || this.maxCookTime != this.lastMaxCookTime || this.currentCookTime != this.lastCurrentCookTime || this.currentBurn != this.lastCurrentBurn) {      this.lastCurrentBurn=this.currentBurn;      this.lastMaxBurnTime=this.maxBurnTime;      this.lastMaxCookTime=this.maxCookTime;      this.lastCurrentCookTime=this.currentCookTime;      this.syncToClient();    }  }}  }
class C{  public static ActiveMQBuffer wrappedBuffer(final ByteBuffer underlying){  ActiveMQBuffer buff=new ChannelBufferWrapper(Unpooled.wrappedBuffer(underlying));  buff.clear();  return buff;}  }
class C{  @Override public void peg(Calendar calendar){  this.firstMillisecond=getFirstMillisecond(calendar);  this.lastMillisecond=getLastMillisecond(calendar);}  }
class C{  private void processComponentJar(URL jarFileURL,WorkList workList,List<String> implicitClasspath){  if (DEBUG) {    System.out.println("Processing " + jarFileURL.toString());  }  if (!jarFileURL.toString().endsWith(".zip") && !jarFileURL.toString().endsWith(".jar")) {    return;  }  try {    URL manifestURL=new URL("jar:" + jarFileURL.toString() + "!/META-INF/MANIFEST.MF");    InputStream in=null;    try {      in=manifestURL.openStream();      Manifest manifest=new Manifest(in);      Attributes mainAttrs=manifest.getMainAttributes();      String classPath=mainAttrs.getValue("Class-Path");      if (classPath != null) {        String[] fileList=classPath.split("\\s+");        for (        String jarFile : fileList) {          URL referencedURL=workList.createRelativeURL(jarFileURL,jarFile);          if (workList.add(new WorkListItem(referencedURL))) {            implicitClasspath.add(referencedURL.toString());            if (DEBUG) {              System.out.println("Implicit jar: " + referencedURL.toString());            }          }        }      }    }  finally {      if (in != null) {        in.close();      }    }  } catch (  IOException ignore) {  }}  }
class C{  private static int select(double[] array,int[] index,int left,int right,int k){  if (left == right) {    return left;  } else {    int middle=partition(array,index,left,right);    if ((middle - left + 1) >= k) {      return select(array,index,left,middle,k);    } else {      return select(array,index,middle + 1,right,k - (middle - left + 1));    }  }}  }
class C{  public String toString(){  int[][] pageRanges=getPageRanges();  String prStr="[";  boolean first=true;  for (int i=0; i < pageRanges.length; i++) {    if (first) {      first=false;    } else {      prStr+=",";    }    prStr+=pageRanges[i][0] + ":" + pageRanges[i][1];  }  prStr+="]";  return "copies=" + getCopies() + ",defaultSelection="+ getDefaultSelection()+ ",destination="+ getDestination()+ ",dialog="+ getDialog()+ ",fileName="+ getFileName()+ ",fromPage="+ getFromPage()+ ",maxPage="+ getMaxPage()+ ",minPage="+ getMinPage()+ ",multiple-document-handling="+ getMultipleDocumentHandling()+ ",page-ranges="+ prStr+ ",printer="+ getPrinter()+ ",sides="+ getSides()+ ",toPage="+ getToPage();}  }
class C{  protected void addOutput(DalvInsn insn){  output.add(insn);}  }
class C{  public static SitesEntry verifySite(WebmasterToolsService myService,String siteUrl) throws IOException, ServiceException {  VerificationMethod method=new VerificationMethod();  method.setMethodType(VerificationMethod.MethodType.HTMLPAGE);  method.setInUse(true);  SitesEntry entry=new SitesEntry();  entry.addVerificationMethod(method);  String siteId=URLEncoder.encode(siteUrl,"UTF-8");  System.out.println("Now verifying site: " + siteUrl);  URL updateUrl=new URL(getSitesFeedUrl() + siteId);  return myService.update(updateUrl,entry);}  }
class C{  private static void checkPurchase(Map.Entry<Integer,FactPurchase> entry,int id,int productId,int storeId){  FactPurchase purchase=entry.getValue();  assertEquals("Id",id,entry.getKey().intValue());  assertEquals("Id",id,purchase.getId());  assertEquals("ProductId",productId,purchase.getProductId());  assertEquals("StoreId",storeId,purchase.getStoreId());}  }
class C{  public static void appendPath(StringBuffer sb,Resource path){  if (path.isURIResource()) {    sb.append(FmtUtils.stringForNode(path.asNode(),path.getModel()));  } else {    appendPathBlankNode(sb,path,SEQUENCE_PATH_SEPARATOR);  }}  }
class C{  public Rational over(Polynomial B){  return new Rational(this,B);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:29.537 -0500",hash_original_method="8566D0E7C4974CA9CB93E779F651E45B",hash_generated_method="0636FABA3318CBEDB289BB9DD6803AAE") public void unregisterReceiver(BroadcastReceiver receiver){synchronized (mReceivers) {    ArrayList<IntentFilter> filters=mReceivers.remove(receiver);    if (filters == null) {      return;    }    for (int i=0; i < filters.size(); i++) {      IntentFilter filter=filters.get(i);      for (int j=0; j < filter.countActions(); j++) {        String action=filter.getAction(j);        ArrayList<ReceiverRecord> receivers=mActions.get(action);        if (receivers != null) {          for (int k=0; k < receivers.size(); k++) {            if (receivers.get(k).receiver == receiver) {              receivers.remove(k);              k--;            }          }          if (receivers.size() <= 0) {            mActions.remove(action);          }        }      }    }  }}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  public void notifyCatalogAclChange(){  ConfigurationImpl configImpl=new ConfigurationImpl();  configImpl.setKind(Constants.CATALOG_CONFIG);  configImpl.setId(Constants.CATALOG_ACL_CHANGE);  String time=String.valueOf(System.currentTimeMillis());  configImpl.setConfig(configKey,time);  try {    log.debug("catalog acl change time: " + time);    _coordinator.persistServiceConfiguration(configImpl);  } catch (  Exception e) {    log.warn(String.format("updating zk node /config/%s/%s failed, portalsvc cache will not clear immediately, but will reload 10 minutes later",Constants.CATALOG_CONFIG,Constants.CATALOG_ACL_CHANGE));  }}  }
class C{  static Object generateAttributeValue(Element element,ElementMetadata<?,?> metadata,AttributeKey<?> attKey,AttributeMetadata<?> attMeta){  if (metadata != null && attMeta != null) {    return attMeta.generateValue(element,metadata);  }  return element.getAttributeValue(attKey);}  }
class C{  public void waitForAll(){  while (!futuresStack.isEmpty()) {    if (futuresStack.peek().isDone()) {      futuresStack.pop();    } else {      ThreadUtil.sleep(5);    }  }}  }
class C{  public Matrix4 rotate(final Vector3 v1,final Vector3 v2){  return rotate(quat.setFromCross(v1,v2));}  }
class C{  private MatchingDocs createSample(MatchingDocs docs){  int maxdoc=docs.context.reader().maxDoc();  FixedBitSet sampleDocs=new FixedBitSet(maxdoc);  int binSize=(int)(1.0 / samplingRate);  try {    int counter=0;    int limit, randomIndex;    if (leftoverBin != NOT_CALCULATED) {      limit=leftoverBin;      randomIndex=leftoverIndex;    } else {      limit=binSize;      randomIndex=random.nextInt(binSize);    }    final DocIdSetIterator it=docs.bits.iterator();    for (int doc=it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc=it.nextDoc()) {      if (counter == randomIndex) {        sampleDocs.set(doc);      }      counter++;      if (counter >= limit) {        counter=0;        limit=binSize;        randomIndex=random.nextInt(binSize);      }    }    if (counter == 0) {      leftoverBin=leftoverIndex=NOT_CALCULATED;    } else {      leftoverBin=limit - counter;      if (randomIndex > counter) {        leftoverIndex=randomIndex - counter;      } else       if (randomIndex < counter) {        leftoverIndex=NOT_CALCULATED;      }    }    return new MatchingDocs(docs.context,new BitDocIdSet(sampleDocs),docs.totalHits,null);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_CM_CStage_ID=getRecord_ID();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void onCloseMenu(){  selectedMenuBarItem.setNormalState();  selectedMenuBarItem=null;  lockLayer=null;}  }
class C{  private synchronized void garbageCollectPeer(Peer peer){  log.debug("Garbage collected peer " + peer);  mCurrentPeers.remove(peer);}  }
class C{  protected static <T,V extends T>void addItems(Collection<V> collection,T[] elements,Class<V> c){  if (elements != null) {    for (    T element : elements) {      if (c.isInstance(element)) {        collection.add((V)element);      }    }  }}  }
class C{  private void adjustPadding(int visibleCount){  ViewGroup viewParent=(ViewGroup)mParent.findViewById(R.id.mid_nav_buttons);  int totalViews=viewParent.getChildCount();  for (int v=0; v < totalViews; v++) {    View currentKey=viewParent.getChildAt(v);    if (!(currentKey instanceof KeyButtonView)) {      continue;    }    View nextPadding=viewParent.getChildAt(v + 1);    if (nextPadding == null) {      continue;    }    View nextKey=viewParent.getChildAt(v + 2);    ButtonInfo nextInfo=nextKey == null ? null : (ButtonInfo)nextKey.getTag();    ButtonInfo currentInfo=(ButtonInfo)currentKey.getTag();    if (nextInfo != null && currentInfo != null && currentInfo != NavigationButtons.EMPTY) {      if (nextInfo != NavigationButtons.EMPTY || visibleCount > 1) {        nextPadding.setVisibility(View.VISIBLE);      } else {        nextPadding.setVisibility(View.GONE);      }      visibleCount--;    } else {      nextPadding.setVisibility(View.GONE);    }  }}  }
class C{  private void initRange(){  mMinX=MathHelper.NULL_VALUE;  mMaxX=-MathHelper.NULL_VALUE;  mMinY=MathHelper.NULL_VALUE;  mMaxY=-MathHelper.NULL_VALUE;  int length=getItemCount();  for (int k=0; k < length; k++) {    double x=getX(k);    double y=getY(k);    updateRange(x,y);  }}  }
class C{  public static TestRunnerConfig initialize(Properties properties){  Preconditions.checkNotNull(properties);  TestRunnerConfig result=new TestRunnerConfig();  if (properties.get(PropertiesModule.CAPABILITIES) != null) {    result.capabilities=new CapabilitiesConverter().convert((String)properties.get(PropertiesModule.CAPABILITIES));  }  if (properties.get(PropertiesModule.SAUCE) != null) {    result.sauce=Boolean.valueOf((String)properties.get(PropertiesModule.SAUCE));  }  ARGUMENTS=result;  return ARGUMENTS;}  }
class C{  public void resetMonitorStates(){  circuitBreakers.values().forEach(null);}  }
class C{  public static void declareFeedExtensions(ExtensionProfile extProfile){  extProfile.declare(BaseFeed.class,BatchOperation.getDefaultDescription());}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case TypeRefsPackage.UNION_TYPE_EXPRESSION:    return createUnionTypeExpression();case TypeRefsPackage.INTERSECTION_TYPE_EXPRESSION:  return createIntersectionTypeExpression();case TypeRefsPackage.THIS_TYPE_REF:return createThisTypeRef();case TypeRefsPackage.THIS_TYPE_REF_NOMINAL:return createThisTypeRefNominal();case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL:return createThisTypeRefStructural();case TypeRefsPackage.BOUND_THIS_TYPE_REF:return createBoundThisTypeRef();case TypeRefsPackage.PARAMETERIZED_TYPE_REF:return createParameterizedTypeRef();case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL:return createParameterizedTypeRefStructural();case TypeRefsPackage.EXISTENTIAL_TYPE_REF:return createExistentialTypeRef();case TypeRefsPackage.UNKNOWN_TYPE_REF:return createUnknownTypeRef();case TypeRefsPackage.TYPE_TYPE_REF:return createTypeTypeRef();case TypeRefsPackage.WILDCARD:return createWildcard();case TypeRefsPackage.FUNCTION_TYPE_REF:return createFunctionTypeRef();case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION:return createFunctionTypeExpression();case TypeRefsPackage.DEFERRED_TYPE_REF:return createDeferredTypeRef();case TypeRefsPackage.TYPE_VARIABLE_MAPPING:return createTypeVariableMapping();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public long signal(){  return Long.parseLong(fields[30]);}  }
class C{  private void waitForFlush() throws IgniteInterruptedCheckedException {  U.await(flushCond);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double minStreamLength=0;  boolean blnRemoveStream=false;  int stopRow, stopCol;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      minStreamLength=Double.parseDouble(args[i]);    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    double gridResX=streams.getCellSizeX();    double gridResY=streams.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double maxLinkID=streams.getMaximumValue();    minStreamLength=minStreamLength / ((gridResX + gridResY) / 2);    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        output.setValue(row,col,streams.getValue(row,col));      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    byte numNeighbouringStreamCells=0;    double linkLength=0;    int x2, y2;    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            linkLength=0;            blnRemoveStream=false;            x=col;            y=row;            stopRow=-1;            stopCol=-1;            flag=true;            do {              numNeighbouringStreamCells=0;              for (c=0; c < 8; c++) {                x2=x + dX[c];                y2=y + dY[c];                if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[c]) {                  numNeighbouringStreamCells++;                }              }              if (numNeighbouringStreamCells > 1) {                if (linkLength < minStreamLength) {                  stopRow=y;                  stopCol=x;                  blnRemoveStream=true;                }                flag=false;                break;              }              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                linkLength+=gridLengths[c];                if (linkLength > minStreamLength) {                  flag=false;                } else {                  x+=dX[c];                  y+=dY[c];                  if (streams.getValue(y,x) <= 0) {                    flag=false;                  }                }              } else {                flag=false;              }            } while (flag);            if (blnRemoveStream) {              x=col;              y=row;              flag=true;              do {                if (x == stopCol && y == stopRow) {                  flag=false;                  break;                }                output.setValue(y,x,noData);                flowDir=pntr.getValue(y,x);                if (flowDir > 0) {                  c=(int)(Math.log(flowDir) / LnOf2);                  x+=dX[c];                  y+=dY[c];                  if (streams.getValue(y,x) <= 0) {                    flag=false;                  }                } else {                  flag=false;                }              } while (flag);            }          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addVolumeToConsistencyGroup(String instanceId,String cgID) throws StorageCenterAPIException {  RestResult rr=restClient.get(String.format("StorageCenter/ScVolumeConfiguration/%s",instanceId));  if (!checkResults(rr)) {    throw new StorageCenterAPIException(String.format("Error getting volume configuration: %s",rr.getErrorMsg()));  }  ScVolumeConfiguration volConfig=gson.fromJson(rr.getResult(),ScVolumeConfiguration.class);  List<String> profiles=new ArrayList<>();  for (  ScObject profile : volConfig.replayProfileList) {    if (!cgID.equals(profile.instanceId)) {      profiles.add(profile.instanceId);    }  }  profiles.add(cgID);  Parameters params=new Parameters();  params.add("ReplayProfileList",profiles.toArray(new String[0]));  rr=restClient.put(String.format("StorageCenter/ScVolumeConfiguration/%s",instanceId),params.toJson());  if (!checkResults(rr)) {    throw new StorageCenterAPIException(String.format("Error updating volume replay profile membership: %s",rr.getErrorMsg()));  }}  }
class C{  public static void parseTemplate(Element modelElement,Element formNode,Element formChild,Hashtable bindings,Element bodyNode,Hashtable<String,String> problemList,Hashtable<String,String> problemListItems,int level){  level++;  int numOfEntries=formChild.getChildCount();  for (int i=0; i < numOfEntries; i++) {    if (formChild.isText(i))     continue;    Element child=formChild.getElement(i);    if (child.getAttributeValue(null,ATTRIBUTE_OPENMRS_DATATYPE) == null && child.getAttributeValue(null,ATTRIBUTE_OPENMRS_CONCEPT) != null)     continue;    String name=child.getName();    if (name.equals("patient_relationship")) {      RelationshipBuilder.build(modelElement,bodyNode,child);      continue;    }    if ((child.getAttributeValue(null,ATTRIBUTE_OPENMRS_CONCEPT) != null && level > 1) || (child.getAttributeValue(null,ATTRIBUTE_OPENMRS_ATTRIBUTE) != null && child.getAttributeValue(null,ATTRIBUTE_OPENMRS_TABLE) != null)) {      if (!name.equalsIgnoreCase(NODE_PROBLEM_LIST)) {        Element bindNode=createBindNode(modelElement,child,bindings,problemList,problemListItems);        if (isMultSelectNode(child))         addMultipleSelectXformValueNode(child);        if (isTableFieldNode(child)) {          setTableFieldDataType(name,bindNode);          setTableFieldBindingAttributes(name,bindNode);          setTableFieldDefaultValue(name,formNode);          if ("identifier".equalsIgnoreCase(child.getAttributeValue(null,ATTRIBUTE_OPENMRS_ATTRIBUTE)) && "patient_identifier".equalsIgnoreCase(child.getAttributeValue(null,ATTRIBUTE_OPENMRS_TABLE))) {            bindNode.setAttribute(null,ATTRIBUTE_PRELOAD,PRELOAD_PATIENT);            bindNode.setAttribute(null,ATTRIBUTE_PRELOAD_PARAMS,"patientIdentifier");          }        }      }    }    if (isTableFieldNode(child)) {      Element controlNode=buildTableFieldUIControlNode(child,bodyNode);      if (name.equalsIgnoreCase(NODE_ENCOUNTER_LOCATION_ID) && CONTROL_SELECT1.equals(controlNode.getName()))       populateLocations(controlNode); else       if (name.equalsIgnoreCase(NODE_ENCOUNTER_PROVIDER_ID)) {        populateProviders(controlNode,formNode,modelElement,bodyNode);        if (XformsUtil.isOnePointNineAndAbove()) {          ((Element)child).setAttribute(null,XformBuilder.ATTRIBUTE_PROVIDER_ID_TYPE,XformBuilder.VALUE_PROVIDER_ID_TYPE_PROV_ID);        }      } else       if (name.equalsIgnoreCase(NODE_ENCOUNTER_ENCOUNTER_DATETIME))       setNodeValue(child,"'today()'");    }    parseTemplate(modelElement,formNode,child,bindings,bodyNode,problemList,problemListItems,level);  }}  }
class C{  private TypeUtils.Pair<String,String> validateDatasetNameExists(String datasetName) throws AtlasException {  Iterator<AtlasVertex> results=graph.query().has("Referenceable.qualifiedName",datasetName).has(Constants.STATE_PROPERTY_KEY,Id.EntityState.ACTIVE.name()).has(Constants.SUPER_TYPES_PROPERTY_KEY,AtlasClient.DATA_SET_SUPER_TYPE).vertices().iterator();  while (results.hasNext()) {    AtlasVertex vertex=results.next();    return TypeUtils.Pair.of(GraphHelper.getTypeName(vertex),GraphHelper.getIdFromVertex(vertex));  }  throw new EntityNotFoundException("Dataset with name = " + datasetName + " does not exist");}  }
class C{  public void union(Node a,Node b){  Node set1=find(a);  Node set2=find(b);  if (set1 != set2) {    if (set1.getSize() < set2.getSize()) {      set2.setParent(set1);      set1.setSize(set1.getSize() + set2.getSize());    } else {      set1.setParent(set2);      set2.setSize(set1.getSize() + set2.getSize());    }  }}  }
class C{  public static void showTransfersOnDownloadStart(Context context){  if (ConfigurationManager.instance().showTransfersOnDownloadStart() && context != null) {    Intent i=new Intent(context,MainActivity.class);    i.setAction(Constants.ACTION_SHOW_TRANSFERS);    i.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);    context.startActivity(i);  }}  }
class C{  public Vector2(float x,float y){  this.x=x;  this.z=y;}  }
class C{  public static double cosAngle(NumberVector v1,NumberVector v2){  return v1 instanceof SparseNumberVector ? v2 instanceof SparseNumberVector ? angleSparse((SparseNumberVector)v1,(SparseNumberVector)v2) : angleSparseDense((SparseNumberVector)v1,v2) : v2 instanceof SparseNumberVector ? angleSparseDense((SparseNumberVector)v2,v1) : angleDense(v1,v2);}  }
class C{  @GwtIncompatible public static <T>T[] concat(T[] first,T[] second,Class<T> type){  T[] result=newArray(type,first.length + second.length);  System.arraycopy(first,0,result,0,first.length);  System.arraycopy(second,0,result,first.length,second.length);  return result;}  }
class C{  public void removeListener(final IGraphBuilderListener listener){  m_listeners.removeListener(listener);}  }
class C{  private void loadAuthenticationErrorActivity(){  Intent intent=new Intent(getActivity(),AuthenticationErrorActivity.class);  intent.putExtra(getContext().getResources().getString(R.string.intent_extra_from_activity),RegistrationActivity.class.getSimpleName());  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  getActivity().startActivity(intent);}  }
class C{  public MarketService level(int level){  this.level=level;  return this;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case KEY:return isSetKey();case VERSIONED_VALUE:return isSetVersionedValue();case VALUE:return isSetValue();}throw new IllegalStateException();}  }
class C{  private synchronized void installOrRemoveRSAProvider() throws Exception {  try {    Collection<String> allTenantNames=this.getAllTenants();    assert (allTenantNames != null && allTenantNames.size() > 0);    boolean serverNeedSecurID=false;    for (    String tenantName : allTenantNames) {      AuthnPolicy authnPolicy=this.findTenant(tenantName).getAuthnPolicy();      if (authnPolicy == null) {        continue;      }      if (authnPolicy.IsRsaSecureIDAuthnEnabled()) {        serverNeedSecurID=true;        break;      }    }  } catch (  Exception e) {    logger.error("Failed in trying to add or removing TLRSAJsafeProvider provider.");    throw e;  }}  }
class C{  public static double estimatePI(double n){  double pi=0;  for (double i=1; i <= n; i++) {    pi+=Math.pow(-1,i + 1) / (2 * i - 1);  }  pi*=4;  return pi;}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public boolean checkApply(JCMethodInvocation invocation,MethodSymbol methSym){  if (!JSweetConfig.isJDKReplacementMode() && !translator.getContext().options.isJDKAllowed()) {    if (methSym.owner.toString().startsWith("java.")) {      if (invocation.meth instanceof JCFieldAccess && "super".equals(((JCFieldAccess)invocation.meth).selected.toString())) {        translator.report(invocation,JSweetProblem.JDK_METHOD,methSym);        return false;      }      if (translator.getContext().strictMode || AUTHORIZED_OBJECT_METHODS.contains(methSym.name.toString())) {        return true;      }      if (methSym.owner.toString().equals(String.class.getName()) && AUTHORIZED_STRING_METHODS.contains(methSym.toString())) {        return true;      }      translator.report(invocation,JSweetProblem.JDK_METHOD,methSym);      return false;    }  }  return true;}  }
class C{  private boolean readHeader() throws IOException {  if (consecutiveLineBreaks > 1) {    consecutiveLineBreaks=0;    return false;  }  readName();  consecutiveLineBreaks=0;  readValue();  return consecutiveLineBreaks > 0;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void shutdownActive(ExitCode exitCode,String msg){  shutdownActive(ShutdownModeAmp.GRACEFUL,exitCode,msg,null);}  }
class C{  public static void link(Supplier<?> supplier,String name,boolean isRestricted){  ScriptLibrary library=new ScriptLibrary(name,isRestricted,null);  Script.LIBS.put(name,library);}  }
class C{  protected CVoucherHeader createVoucher(final ReceiptHeader receiptHeader){  final HashMap<String,Object> headerdetails=new HashMap<String,Object>(0);  final List<HashMap<String,Object>> accountCodeList=new ArrayList<HashMap<String,Object>>(0);  final List<HashMap<String,Object>> subledgerList=new ArrayList<HashMap<String,Object>>(0);  String fundCode=null, fundsourceCode=null, departmentCode=null;  Boolean isVoucherApproved=Boolean.FALSE;  if (receiptHeader.getService().getIsVoucherApproved() != null)   isVoucherApproved=receiptHeader.getService().getIsVoucherApproved();  final ReceiptMisc receiptMisc=receiptHeader.getReceiptMisc();  if (receiptMisc.getFund() != null)   fundCode=receiptMisc.getFund().getCode();  if (receiptMisc.getFundsource() != null)   fundsourceCode=receiptMisc.getFundsource().getCode();  if (receiptMisc.getDepartment() != null)   departmentCode=receiptMisc.getDepartment().getCode();  for (  final InstrumentHeader instrumentHeader : receiptHeader.getReceiptInstrument())   if (instrumentHeader.getInstrumentType().getType().equals(CollectionConstants.INSTRUMENTTYPE_CASH) || instrumentHeader.getInstrumentType().getType().equals(CollectionConstants.INSTRUMENTTYPE_CHEQUE) || instrumentHeader.getInstrumentType().getType().equals(CollectionConstants.INSTRUMENTTYPE_DD)|| instrumentHeader.getInstrumentType().getType().equals(CollectionConstants.INSTRUMENTTYPE_ONLINE)) {    headerdetails.put(VoucherConstant.VOUCHERNAME,CollectionConstants.FINANCIAL_RECEIPTS_VOUCHERNAME);    headerdetails.put(VoucherConstant.VOUCHERTYPE,CollectionConstants.FINANCIAL_RECEIPTS_VOUCHERTYPE);  } else   if (instrumentHeader.getInstrumentType().getType().equals(CollectionConstants.INSTRUMENTTYPE_BANK)) {    headerdetails.put(VoucherConstant.VOUCHERNAME,CollectionConstants.FINANCIAL_CONTRATVOUCHER_VOUCHERNAME);    headerdetails.put(VoucherConstant.VOUCHERTYPE,CollectionConstants.FINANCIAL_CONTRAVOUCHER_VOUCHERTYPE);  }  headerdetails.put(VoucherConstant.DESCRIPTION,CollectionConstants.FINANCIAL_VOUCHERDESCRIPTION);  final SimpleDateFormat format=new SimpleDateFormat("dd/MM/yyyy");  try {    String dateString="";    if (receiptHeader.getVoucherDate() == null) {      dateString=format.format(new Date());      headerdetails.put(VoucherConstant.VOUCHERDATE,format.parse(dateString));    } else {      dateString=format.format(receiptHeader.getVoucherDate());      headerdetails.put(VoucherConstant.VOUCHERDATE,format.parse(dateString));    }  } catch (  final ParseException e) {    LOGGER.error("Exception while voucher date",e);    throw new ApplicationRuntimeException(e.getMessage());  }  if (receiptHeader.getVoucherNum() != null && !receiptHeader.getVoucherNum().equals(""))   headerdetails.put(VoucherConstant.VOUCHERNUMBER,receiptHeader.getVoucherNum());  headerdetails.put(VoucherConstant.FUNDCODE,fundCode);  headerdetails.put(VoucherConstant.DEPARTMENTCODE,departmentCode);  headerdetails.put(VoucherConstant.FUNDSOURCECODE,fundsourceCode);  headerdetails.put(VoucherConstant.MODULEID,CollectionConstants.COLLECTIONS_EG_MODULES_ID);  headerdetails.put(VoucherConstant.SOURCEPATH,CollectionConstants.RECEIPT_VIEW_SOURCEPATH + receiptHeader.getId());  Set<ReceiptDetail> receiptDetailSet=new LinkedHashSet<ReceiptDetail>(0);  if (receiptHeader.getReceipttype() == 'B')   receiptDetailSet=aggregateDuplicateReceiptDetailObject(new ArrayList<ReceiptDetail>(receiptHeader.getReceiptDetails())); else   receiptDetailSet=receiptHeader.getReceiptDetails();  for (  final ReceiptDetail receiptDetail : receiptDetailSet)   if (receiptDetail.getCramount().compareTo(BigDecimal.ZERO) != 0 || receiptDetail.getDramount().compareTo(BigDecimal.ZERO) != 0) {    final HashMap<String,Object> accountcodedetailsHashMap=new HashMap<String,Object>(0);    accountcodedetailsHashMap.put(VoucherConstant.GLCODE,receiptDetail.getAccounthead().getGlcode());    accountcodedetailsHashMap.put(VoucherConstant.DEBITAMOUNT,receiptDetail.getDramount().compareTo(BigDecimal.ZERO) == 0 ? 0 : receiptDetail.getDramount());    accountcodedetailsHashMap.put(VoucherConstant.CREDITAMOUNT,receiptDetail.getCramount().compareTo(BigDecimal.ZERO) == 0 ? 0 : receiptDetail.getCramount());    if (receiptDetail.getFunction() != null)     accountcodedetailsHashMap.put(VoucherConstant.FUNCTIONCODE,receiptDetail.getFunction().getCode());    accountCodeList.add(accountcodedetailsHashMap);    for (    final AccountPayeeDetail accpayeeDetail : receiptDetail.getAccountPayeeDetails())     if (accpayeeDetail.getAmount().compareTo(BigDecimal.ZERO) != 0) {      final HashMap<String,Object> subledgerdetailsHashMap=new HashMap<String,Object>(0);      subledgerdetailsHashMap.put(VoucherConstant.GLCODE,accpayeeDetail.getReceiptDetail().getAccounthead().getGlcode());      subledgerdetailsHashMap.put(VoucherConstant.DETAILTYPEID,accpayeeDetail.getAccountDetailType().getId());      subledgerdetailsHashMap.put(VoucherConstant.DETAILKEYID,accpayeeDetail.getAccountDetailKey().getDetailkey());      if (accpayeeDetail.getReceiptDetail().getCramount().compareTo(BigDecimal.ZERO) != 0)       subledgerdetailsHashMap.put(VoucherConstant.CREDITAMOUNT,accpayeeDetail.getAmount().compareTo(BigDecimal.ZERO) == 0 ? 0 : accpayeeDetail.getAmount()); else       if (accpayeeDetail.getReceiptDetail().getDramount().compareTo(BigDecimal.ZERO) != 0)       subledgerdetailsHashMap.put(VoucherConstant.DEBITAMOUNT,accpayeeDetail.getAmount().compareTo(BigDecimal.ZERO) == 0 ? 0 : accpayeeDetail.getAmount());      subledgerList.add(subledgerdetailsHashMap);    }  }  return financialsUtil.createVoucher(headerdetails,accountCodeList,subledgerList,isVoucherApproved);}  }
class C{  public int receive(byte[] buffer,int offset,int count,int timeout){  checkArrayBounds(buffer,offset,count);  if (count == 0) {    return 0;  }  byte[] data=buffer;  if (offset > 0) {    data=new byte[count];  }  IntOut bytesReceivedOut=new IntOut();  try {    IDevice.checkResult(LibIMobileDevice.idevice_connection_receive_timeout(getRef(),data,count,bytesReceivedOut,timeout));    int bytesRead=bytesReceivedOut.getValue();    if (bytesRead > 0 && data != buffer) {      System.arraycopy(data,0,buffer,offset,bytesRead);    }    return bytesRead;  }  finally {    bytesReceivedOut.delete();  }}  }
class C{  public void testValuesIterator(){  final double minX=200000.0;  final double maxX=400000.0;  final double minY=500000.0;  final double maxY=700000.0;  final long nOfEntries=25000;  Random r=new Random(4711);  double deltaX=maxX - minX;  double deltaY=maxY - minY;  log.info("build quadtree, adding " + nOfEntries + " entries...");  QuadTree<Long> qt=new QuadTree<Long>(minX,minY,maxX,maxY);  for (long i=0; i < nOfEntries; i++) {    double x=r.nextDouble() * deltaX + minX;    double y=r.nextDouble() * deltaY + minY;    qt.put(x,y,Long.valueOf(i));  }  log.info("start iterator");  int i=0;  Gbl.startMeasurement();  for (  Long l : qt.values()) {    i++;  }  Gbl.printElapsedTime();  log.info("iterator ended.");  assertEquals(nOfEntries,i);}  }
class C{  protected boolean[] updateableClusterer(){  boolean[] result=new boolean[2];  print("updateable clusterer...");  if (m_Clusterer instanceof UpdateableClusterer) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  public static CacheSpan createCacheEntry(File file){  Matcher matcher=cacheFilePattern.matcher(file.getName());  if (!matcher.matches()) {    return null;  }  return CacheSpan.createCacheEntry(matcher.group(1),Long.parseLong(matcher.group(2)),Long.parseLong(matcher.group(3)),file);}  }
class C{  private static void checkNonDebugLabel(final Label label){  Field f=getLabelStatusField();  int status=0;  try {    status=f == null ? 0 : ((Integer)f.get(label)).intValue();  } catch (  IllegalAccessException e) {    throw new Error("Internal error");  }  if ((status & 0x01) != 0) {    throw new IllegalArgumentException("Labels used for debug info cannot be reused for control flow");  }}  }
class C{  public void testThreeNodeEvents() throws Throwable {  testEvents(3);}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent event){  if (this.domainAxis != null) {    this.domainAxis.configure();  }  if (this.rangeAxis != null) {    this.rangeAxis.configure();  }  if (this.colorBar != null) {    this.colorBar.configure(this);  }  super.datasetChanged(event);}  }
class C{  public boolean isDateValid(Timestamp date){  if (date == null)   return false;  if (getValidFrom() != null && date.before(getValidFrom()))   return false;  if (getValidTo() != null && date.after(getValidTo()))   return false;  return true;}  }
class C{  public static Charset toCharset(String charset){  return charset == null ? Charset.defaultCharset() : Charset.forName(charset);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  @Override public void restoreSnapshot(BlockSnapshot snapshot,Volume parentVolume,String syncDirection,String taskId){  _log.info(String.format("Request to restore RP volume %s from snapshot %s.",parentVolume.getId().toString(),snapshot.getId().toString()));  super.restoreSnapshot(snapshot,parentVolume,syncDirection,taskId);}  }
class C{  public boolean equals(final StrBuilder other){  if (this == other) {    return true;  }  if (this.size != other.size) {    return false;  }  final char thisBuf[]=this.buffer;  final char otherBuf[]=other.buffer;  for (int i=size - 1; i >= 0; i--) {    if (thisBuf[i] != otherBuf[i]) {      return false;    }  }  return true;}  }
class C{  public synchronized void onDestroy(){  cleanupService();  mHandler.getLooper().quit();}  }
class C{  protected int read(SpeechRecord recorder,byte[] buffer){  int len=buffer.length;  int numOfBytes=recorder.read(buffer,0,len);  int status=getStatus(numOfBytes,len);  if (status == 0 && numOfBytes >= 0) {    System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes);    mRecordedLength+=len;  }  return status;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static DateValue[] removeDuplicates(DateValue[] dates){  int k=0;  for (int i=1; i < dates.length; ++i) {    if (!dates[i].equals(dates[k])) {      dates[++k]=dates[i];    }  }  if (++k < dates.length) {    DateValue[] uniqueDates=new DateValue[k];    System.arraycopy(dates,0,uniqueDates,0,k);    return uniqueDates;  }  return dates;}  }
class C{  public static CIMObjectPath createTargetDeviceGroup(StorageSystem storage,String sourceGroupName,List<String> deviceIds,TaskCompleter taskCompleter,DbClient dbClient,SmisCommandHelper helper,CIMObjectPathFactory cimPath,SYNC_TYPE syncType) throws DeviceControllerException {  try {    CIMObjectPath replicationSvc=cimPath.getControllerReplicationSvcPath(storage);    CIMArgument[] outArgs=new CIMArgument[5];    CIMObjectPath[] volumePaths=cimPath.getVolumePaths(storage,deviceIds.toArray(new String[deviceIds.size()]));    CIMArgument[] inArgs=null;    if (syncType == SYNC_TYPE.SNAPSHOT) {      inArgs=helper.getCreateReplicationGroupCreateInputArguments(storage,null,volumePaths);    } else {      inArgs=helper.getCreateReplicationGroupWithMembersInputArguments(storage,null,volumePaths);    }    helper.invokeMethod(storage,replicationSvc,CREATE_GROUP,inArgs,outArgs);    CIMObjectPath path=cimPath.getCimObjectPathFromOutputArgs(outArgs,CP_REPLICATION_GROUP);    return path;  } catch (  Exception e) {    taskCompleter.error(dbClient,SmisException.errors.methodFailed(CREATE_GROUP,e.getMessage()));    throw new SmisException("Error when creating target device group",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.479 -0500",hash_original_method="030EEF9CE7E1904041534ED4E8E41515",hash_generated_method="34F509E9B318B1DBF822D35AD23B374F") public void printDebugInfo(){  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("isServer = " + isServer());    sipStack.getStackLogger().logDebug("localTag = " + getLocalTag());    sipStack.getStackLogger().logDebug("remoteTag = " + getRemoteTag());    sipStack.getStackLogger().logDebug("localSequenceNumer = " + getLocalSeqNumber());    sipStack.getStackLogger().logDebug("remoteSequenceNumer = " + getRemoteSeqNumber());    sipStack.getStackLogger().logDebug("ackLine:" + this.getRemoteTag() + " "+ ackLine);  }}  }
class C{  protected void initializeReferenceSetBounds(){  if (referenceSet == null) {    return;  }  double domainMin=Double.POSITIVE_INFINITY;  double domainMax=Double.NEGATIVE_INFINITY;  double rangeMin=Double.POSITIVE_INFINITY;  double rangeMax=Double.NEGATIVE_INFINITY;  for (  Solution solution : referenceSet) {    domainMin=Math.min(domainMin,getValue(solution,0));    domainMax=Math.max(domainMax,getValue(solution,0));    rangeMin=Math.min(rangeMin,getValue(solution,1));    rangeMax=Math.max(rangeMax,getValue(solution,1));  }  domainMax+=(domainMax - domainMin);  rangeMax+=(rangeMax - rangeMin);  referenceDomainBounds=new Range(domainMin,domainMax);  referenceRangeBounds=new Range(rangeMin,rangeMax);}  }
class C{  public static String toBinaryString(short s){  return toBinaryString(toByteArray(s));}  }
class C{  @Inline static void compilePutfieldBarrierWordImm(Assembler asm,Offset fieldOffset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,fieldOffset,locationMetadata,Entrypoints.wordFieldWriteBarrierMethod);}  }
class C{  public Executor usingAlgorithmFactory(AlgorithmFactory algorithmFactory){  this.algorithmFactory=algorithmFactory;  return this;}  }
class C{  private static X509Certificate resolveCertificate(Element e,String baseURI,StorageResolver storage) throws KeyResolverException {  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Now we have a {" + e.getNamespaceURI() + "}"+ e.getLocalName()+ " Element");  }  if (e != null) {    return KeyResolver.getX509Certificate(e,baseURI,storage);  }  return null;}  }
class C{  private static boolean isHexDigit(char c){  return (c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F');}  }
class C{  public byte toImaginary(){  return _imag;}  }
class C{  private void createCache(Properties props) throws Exception {  DistributedSystem ds=getSystem(props);  cache=CacheFactory.create(ds);  assertNotNull(cache);}  }
class C{  public void addListener(final IBookmarkListener listener){  m_listeners.addListener(listener);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ITERATION_STATEMENT__STATEMENT:    return statement != null;case N4JSPackage.ITERATION_STATEMENT__EXPRESSION:  return expression != null;}return super.eIsSet(featureID);}  }
class C{  public EncoderException(String pMessage){  super(pMessage);}  }
class C{  private boolean initializeDB(){  dbURI=prefs.getString("MongoDB URI",null);  collectionName=prefs.getString("Collection Name","entries");  dsCollectionName=prefs.getString("DeviceStatus Collection Name","devicestatus");  gdCollectionName=prefs.getString("gcdCollectionName",null);  devicesCollectionName="devices";  db=null;  if (dbURI != null) {    log.debug("URI != null");    try {      if (!prefs.getBoolean("isMongoRest",false)) {        MongoClientURI uri=new MongoClientURI(dbURI.trim());        Builder b=MongoClientOptions.builder();        b.heartbeatConnectTimeout(150000);        b.heartbeatFrequency(120000);        b.heartbeatSocketTimeout(150000);        b.maxWaitTime(150000);        b.connectTimeout(150000);        boolean bAchieved=false;        String user="";        String password="";        String source="";        String host="";        String port="";        int iPort=-1;        if (dbURI.length() > 0) {          String[] splitted=dbURI.split(":");          if (splitted.length >= 4) {            user=splitted[1].substring(2);            if (splitted[2].indexOf("@") < 0)             bAchieved=false; else {              password=splitted[2].substring(0,splitted[2].indexOf("@"));              host=splitted[2].substring(splitted[2].indexOf("@") + 1,splitted[2].length());              if (splitted[3].indexOf("/") < 0)               bAchieved=false; else {                port=splitted[3].substring(0,splitted[3].indexOf("/"));                source=splitted[3].substring(splitted[3].indexOf("/") + 1,splitted[3].length());                try {                  iPort=Integer.parseInt(port);                } catch (                Exception ne) {                  iPort=-1;                }                if (iPort > -1)                 bAchieved=true;              }            }          }        }        log.debug("Uri TO CHANGE user " + user + " host "+ source+ " password "+ password);        if (bAchieved) {          MongoCredential mc=MongoCredential.createMongoCRCredential(user,source,password.toCharArray());          ServerAddress sa=new ServerAddress(host,iPort);          List<MongoCredential> lcredential=new ArrayList<MongoCredential>();          lcredential.add(mc);          if (sa != null && sa.getHost() != null && sa.getHost().indexOf("localhost") < 0) {            client=new MongoClient(sa,lcredential,b.build());          }        }        db=client.getDatabase(uri.getDatabase());        dexcomData=null;        glucomData=null;        deviceData=db.getCollection(devicesCollectionName);        if (deviceData == null) {          db.createCollection("device",null);          deviceData=db.getCollection("device");        }        if (collectionName != null)         dexcomData=db.getCollection(collectionName.trim());        if (gdCollectionName != null)         glucomData=db.getCollection(gdCollectionName.trim());        dsCollection=db.getCollection(dsCollectionName);        if (dsCollection == null) {          db.createCollection("devicestatus",null);          dsCollection=db.getCollection("devicestatus");        }      }    } catch (    Exception e) {      log.error("EXCEPTION INIT",e);      return false;    }    return true;  }  return false;}  }
class C{  public static void convolveV(Kernel kernel,int[] inPixels,int[] outPixels,int width,int height,boolean alpha,int edgeAction){  int index=0;  float[] matrix=kernel.getKernelData(null);  int rows=kernel.getHeight();  int rows2=rows / 2;  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      float r=0, g=0, b=0, a=0;      for (int row=-rows2; row <= rows2; row++) {        int iy=y + row;        int ioffset;        if (iy < 0) {          if (edgeAction == CLAMP_EDGES)           ioffset=0; else           if (edgeAction == WRAP_EDGES)           ioffset=((y + height) % height) * width; else           ioffset=iy * width;        } else         if (iy >= height) {          if (edgeAction == CLAMP_EDGES)           ioffset=(height - 1) * width; else           if (edgeAction == WRAP_EDGES)           ioffset=((y + height) % height) * width; else           ioffset=iy * width;        } else         ioffset=iy * width;        float f=matrix[row + rows2];        if (f != 0) {          int rgb=inPixels[ioffset + x];          a+=f * ((rgb >> 24) & 0xff);          r+=f * ((rgb >> 16) & 0xff);          g+=f * ((rgb >> 8) & 0xff);          b+=f * (rgb & 0xff);        }      }      int ia=alpha ? PixelUtils.clamp((int)(a + 0.5)) : 0xff;      int ir=PixelUtils.clamp((int)(r + 0.5));      int ig=PixelUtils.clamp((int)(g + 0.5));      int ib=PixelUtils.clamp((int)(b + 0.5));      outPixels[index++]=(ia << 24) | (ir << 16) | (ig << 8)| ib;    }  }}  }
class C{  public static float approximateLength(float controlPoints[][]){  float length=0;  for (int i=0; i < controlPoints.length - 1; i++) {    float xDif=controlPoints[i + 1][0] - controlPoints[i][0];    float yDif=controlPoints[i + 1][1] - controlPoints[i][1];    float zDif=controlPoints[i + 1][2] - controlPoints[i][2];    length+=Math.sqrt(xDif * xDif + yDif * yDif + zDif * zDif);  }  return length;}  }
class C{  public static void copy(String in,Charset charset,OutputStream out) throws IOException {  Assert.notNull(in,"No input String specified");  Assert.notNull(charset,"No charset specified");  Assert.notNull(out,"No OutputStream specified");  Writer writer=new OutputStreamWriter(out,charset);  writer.write(in);  writer.flush();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment documentFragmentNode;  int nodeType;  doc=(Document)load("hc_staff",true);  documentFragmentNode=doc.createDocumentFragment();  nodeType=(int)documentFragmentNode.getNodeType();  assertEquals("nodeDocumentFragmentNodeTypeAssert1",11,nodeType);}  }
class C{  public static Matcher findNextCueHeader(ParsableByteArray input){  String line;  while ((line=input.readLine()) != null) {    if (COMMENT.matcher(line).matches()) {      while ((line=input.readLine()) != null && !line.isEmpty()) {      }    } else {      Matcher cueHeaderMatcher=WebvttCueParser.CUE_HEADER_PATTERN.matcher(line);      if (cueHeaderMatcher.matches()) {        return cueHeaderMatcher;      }    }  }  return null;}  }
class C{  static void appendModeInfo(Mode mode,BitArray bits){  bits.appendBits(mode.getBits(),4);}  }
class C{  public void scrollToReference(String reference){  Document d=getDocument();  if (d instanceof HTMLDocument) {    HTMLDocument doc=(HTMLDocument)d;    HTMLDocument.Iterator iter=doc.getIterator(HTML.Tag.A);    for (; iter.isValid(); iter.next()) {      AttributeSet a=iter.getAttributes();      String nm=(String)a.getAttribute(HTML.Attribute.NAME);      if ((nm != null) && nm.equals(reference)) {        try {          int pos=iter.getStartOffset();          Rectangle r=modelToView(pos);          if (r != null) {            Rectangle vis=getVisibleRect();            r.height=vis.height;            scrollRectToVisible(r);            setCaretPosition(pos);          }        } catch (        BadLocationException ble) {          UIManager.getLookAndFeel().provideErrorFeedback(JEditorPane.this);        }      }    }  }}  }
class C{  public boolean status(){  return true;}  }
class C{  public void removeElement(String ref){  if (TextUtils.isEmpty(ref)) {    return;  }  Message msg=Message.obtain();  WXDomTask task=new WXDomTask();  task.instanceId=mWXSDKInstance.getInstanceId();  task.args=new ArrayList<>();  task.args.add(ref);  msg.what=WXDomHandler.MsgType.WX_DOM_REMOVE_DOM;  msg.obj=task;  WXSDKManager.getInstance().getWXDomManager().sendMessage(msg);}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public TreeBuilder(){  this(false,false);}  }
class C{  private void processField(Field field,ModelImpl model) throws MojoExecutionException {  log.debug("Processing field \"" + field.getName() + "\".");  if (!Modifier.isStatic(field.getModifiers())) {    Property property;    Class<?> fieldClass=field.getType();    if (Collection.class.isAssignableFrom(fieldClass)) {      property=new ArrayProperty(getPropertyFromType(FieldUtils.getCollectionType(field)));    } else {      property=getPropertyFromType(fieldClass);    }    XmlElement xmlElement=field.getAnnotation(XmlElement.class);    if (xmlElement != null) {      property.setRequired(xmlElement.required());    }    if (xsdParser != null) {      property.setDescription(xsdParser.getAnnotation(model.getName(),field.getName()));    }    model.property(field.getName(),property);  }}  }
class C{  private void computeChecksum(){synchronized (this.checksumLock) {    if (this.checksumSet) {      return;    }    long sum=0;    if (this.checksumRange == null) {      sum=computeCheckSum(0,this.length());    } else {      for (int lowBoundIndex=0; lowBoundIndex < this.checksumRange.length; lowBoundIndex+=2) {        int lowBound=this.checksumRange[lowBoundIndex];        int highBound=(lowBoundIndex == this.checksumRange.length - 1) ? this.length() : this.checksumRange[lowBoundIndex + 1];        sum+=computeCheckSum(lowBound,highBound);      }    }    this.checksum=sum & 0xffffffffL;    this.checksumSet=true;  }}  }
class C{  public static Object convertTo(JdbcConnection conn,Value v,Class<?> paramClass){  if (paramClass == Blob.class) {    return new JdbcBlob(conn,v,0);  } else   if (paramClass == Clob.class) {    return new JdbcClob(conn,v,0);  }  if (v.getType() == Value.JAVA_OBJECT) {    Object o=SysProperties.serializeJavaObject ? JdbcUtils.deserialize(v.getBytes(),conn.getSession().getDataHandler()) : v.getObject();    if (paramClass.isAssignableFrom(o.getClass())) {      return o;    }  }  throw DbException.getUnsupportedException("converting to class " + paramClass.getName());}  }
class C{  public void process(Clustering<?> result1,Clustering<?> result2){  final List<? extends Cluster<?>> cs1=result1.getAllClusters();  final List<? extends Cluster<?>> cs2=result2.getAllClusters();  size1=cs1.size();  size2=cs2.size();  contingency=new int[size1 + 2][size2 + 2];  noise1=BitsUtil.zero(size1);  noise2=BitsUtil.zero(size2);{    final Iterator<? extends Cluster<?>> it2=cs2.iterator();    for (int i2=0; it2.hasNext(); i2++) {      final Cluster<?> c2=it2.next();      if (c2.isNoise()) {        BitsUtil.setI(noise2,i2);      }      contingency[size1 + 1][i2]=c2.size();      contingency[size1 + 1][size2]+=c2.size();    }  }  final Iterator<? extends Cluster<?>> it1=cs1.iterator();  for (int i1=0; it1.hasNext(); i1++) {    final Cluster<?> c1=it1.next();    if (c1.isNoise()) {      BitsUtil.setI(noise1,i1);    }    final DBIDs ids=DBIDUtil.ensureSet(c1.getIDs());    contingency[i1][size2 + 1]=c1.size();    contingency[size1][size2 + 1]+=c1.size();    final Iterator<? extends Cluster<?>> it2=cs2.iterator();    for (int i2=0; it2.hasNext(); i2++) {      final Cluster<?> c2=it2.next();      int count=DBIDUtil.intersectionSize(ids,c2.getIDs());      contingency[i1][i2]=count;      contingency[i1][size2]+=count;      contingency[size1][i2]+=count;      contingency[size1][size2]+=count;    }  }}  }
class C{  public byte[] lookupPixel(byte[] src,byte[] dst){  if (dst == null) {    dst=new byte[src.length];  }  if (numComponents == 1) {    for (int i=0; i < src.length; i++) {      int s=(src[i] & 0xff) - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=data[0][s];    }  } else {    for (int i=0; i < src.length; i++) {      int s=(src[i] & 0xff) - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=data[i][s];    }  }  return dst;}  }
class C{  public static void makeFiles(ArrayList<File> d) throws FileNotFoundException {  for (int i=0; i < d.size(); i++) {    makeFiles(3,d.get(i),"TestJavafile",".java");    makeFiles(2,d.get(i),"TestTextfile",".txt");    makeFiles(2,d.get(i),"TestDatfile",".dat");  }}  }
class C{  public static void unsetIsSlowStart(){  CacheClientProxy.isSlowStartForTesting=false;}  }
class C{  private void verifyXmlForUserAndPwd(String xmlString) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  Document document=builder.parse(new InputSource(new StringReader(xmlString)));  assertEquals(1,document.getChildNodes().getLength());  Element root=document.getDocumentElement();  assertEquals("tns:TechnicalServices",root.getNodeName());  List<?> productNodes=XMLConverter.getNodeList(root.getChildNodes(),"tns:TechnicalService");  assertEquals(1,productNodes.size());  Element e=(Element)productNodes.get(0);  assertEquals(PROVISIONING_USER_NAME,e.getAttribute("provisioningUsername"));  assertEquals(PROVISIONING_PASSWORD,e.getAttribute("provisioningPassword"));}  }
class C{  private void stopService(){  this.stopSelf();}  }
class C{  public String randomAlphaMixedNumeric(int length){  return randomString(alphaMixedNumeric(),length);}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on (or its inverse)." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  public LinearConversion(int factor,int divider,int offset,int offsetPhys,String units,PvLimits limits){  this(factor,divider,offset,offsetPhys,units);  this.limits=limits;}  }
class C{  @HLEFunction(nid=0x2A2A1E07,version=150) public int sceNetAdhocMatchingInit(int memsize){  if (isInitialized) {    return SceKernelErrors.ERROR_NET_ADHOC_MATCHING_ALREADY_INITIALIZED;  }  isInitialized=true;  return 0;}  }
class C{  public static boolean isOfElementType(@Nullable ASTNode node,@NotNull IElementType et){  return node != null && node.getElementType() == et;}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Enum<T>>T convert(Enum<?> value,Class<T> targetClass){  if (value == null) {    return null;  }  T result;  try {    result=Enum.valueOf(targetClass,value.name());  } catch (  IllegalArgumentException e) {    result=null;    if (MAPPING.containsKey(value)) {      result=(T)MAPPING.get(value);    }  }  return result;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  MProduct prod=getProduct();  if (prod.setExpenseType(this))   prod.save(get_TrxName());  return success;}  }
class C{  public static SettingsProvidersFragment newInstance(){  return new SettingsProvidersFragment();}  }
class C{  public static <T,V extends Comparable<? super V>,L extends List<T>>L sortThisBy(L list,Function<? super T,? extends V> function){  return Iterate.sortThis(list,Comparators.byFunction(function));}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private NetworkManagementService(Context context){  mContext=context;  if ("simulator".equals(SystemProperties.get("ro.product.device"))) {    return;  }  mConnector=new NativeDaemonConnector(new NetdCallbackReceiver(),"netd",10,NETD_TAG,160);  mThread=new Thread(mConnector,NETD_TAG);  Watchdog.getInstance().addMonitor(this);}  }
class C{  protected void draw(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  OGLStackHandler oglStack=new OGLStackHandler();  try {    oglStack.pushAttrib(gl,GL2.GL_COLOR_BUFFER_BIT | GL2.GL_CURRENT_BIT | GL2.GL_LINE_BIT| GL2.GL_POLYGON_BIT);    gl.glLineWidth(1f);    OGLUtil.applyColor(gl,this.getLineColor(),this.getOpacity(),false);    gl.glPolygonMode(GL2.GL_FRONT,GL2.GL_LINE);    try {      gl.glBegin(GL2.GL_QUADS);      this.drawQuad(dc,this.bounds);      this.drawQuad(dc,this.scrollDownControlBounds);      this.drawQuad(dc,this.scrollUpControlBounds);    }  finally {      gl.glEnd();    }    gl.glPolygonMode(GL2.GL_FRONT_AND_BACK,GL2.GL_FILL);    String gradientDirection;    if (AVKey.VERTICAL.equals(this.getOrientation()))     gradientDirection=AVKey.HORIZONTAL; else     gradientDirection=AVKey.VERTICAL;    TreeUtil.drawRectWithGradient(gl,this.scrollKnobBounds,this.knobColor2,this.knobColor1,this.getOpacity(),gradientDirection);    OGLUtil.applyColor(gl,this.getLineColor(),this.getOpacity(),false);    gl.glBegin(GL2.GL_LINE_LOOP);    this.drawQuad(dc,this.scrollKnobBounds);    gl.glEnd();    gl.glPolygonMode(GL2.GL_FRONT_AND_BACK,GL2.GL_FILL);    if (AVKey.VERTICAL.equals(this.getOrientation())) {      this.drawTriangle(dc,90,this.scrollUpControlBounds,arrowInsets);      this.drawTriangle(dc,-90,this.scrollDownControlBounds,arrowInsets);    } else {      this.drawTriangle(dc,180,this.scrollUpControlBounds,arrowInsets);      this.drawTriangle(dc,0,this.scrollDownControlBounds,arrowInsets);    }  }  finally {    oglStack.pop(gl);  }}  }
class C{  public TypeParameterDeclarationMatch(IJavaElement element,int accuracy,int offset,int length,SearchParticipant participant,IResource resource){  super(element,accuracy,offset,length,participant,resource);}  }
class C{  private void openDownloadsPage(Context context){  Intent pageView=new Intent(DownloadManager.ACTION_VIEW_DOWNLOADS);  pageView.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(pageView);}  }
class C{  public final boolean loadReference(SharedStorageReference reference){  if (!this.loadedReferences.contains(reference)) {    return this.loadedReferences.add(reference);  }  return false;}  }
class C{  public Week(Date time,TimeZone zone){  this(time,zone,Locale.getDefault());}  }
class C{  @SuppressWarnings("unchecked") public static String stripEnhancerClass(String className){  int enhancedIndex=className.indexOf("$$EnhancerByCGLIB");  if (enhancedIndex != -1) {    return className.substring(0,enhancedIndex);  } else {    return className;  }}  }
class C{  @Deprecated public BeanProperty property(final Class<?> cls,final String name){  BeanProperty beanProperty=null;  final PropertyDescriptor descriptor=buildMap(cls).get(name);  if (descriptor == null) {    throw new MissingFieldException(cls.getName(),name);  }  if (descriptor.getReadMethod() != null && descriptor.getWriteMethod() != null) {    beanProperty=new BeanProperty(cls,descriptor.getName(),descriptor.getPropertyType());  }  return beanProperty;}  }
class C{  public <R>FutureW<R> flatMapCf(final Function<? super T,? extends CompletionStage<? extends R>> mapper){  return FutureW.<R>of(future.<R>thenCompose(null));}  }
class C{  private void deleteUser(VOUser voUser){  identityServiceClient.deleteUser(voUser);  printAllUsersForOrganization();}  }
class C{  public void zoomOut(int x,int y){  double rangeX=Math.abs(pageBox.getMaxX() - pageBox.getMinX());  double rangeY=Math.abs(pageBox.getMaxY() - pageBox.getMinY());  pageBox.setMinX(x - (rangeX * 1.15) / 2.0);  pageBox.setMinY(y - (rangeY * 1.15) / 2.0);  pageBox.setMaxX(x + (rangeX * 1.15) / 2.0);  pageBox.setMaxY(y + (rangeY * 1.15) / 2.0);}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  void listTimeseries() throws IOException {  ListTimeSeriesResponse timeSeriesList=this.monitoringService.projects().timeSeries().list(this.projectResource).setFilter("metric.type=\"" + METRIC + "\"").setPageSize(3).setIntervalStartTime(getStartTime()).setIntervalEndTime(getEndTime()).execute();  this.outputStream.println("listTimeseries response");  this.outputStream.println(timeSeriesList.toPrettyString());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public PChargingFunctionAddressesHeader createPChargingFunctionAddressesHeader(){  PChargingFunctionAddresses cfa=new PChargingFunctionAddresses();  return cfa;}  }
class C{  public boolean isDeleteable(){  Object oo=get_Value(COLUMNNAME_IsDeleteable);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  checkLabel(env,ctx);  try {    vset=reach(env,vset);    Hashtable newexp=new Hashtable();    CheckContext newctx=new CheckContext(ctx,this);    Vset vs=body.check(env,newctx,vset.copy(),newexp);    Vset cvs=Vset.firstDAandSecondDU(vset,vs.copy().join(newctx.vsTryExit));    for (int i=0; i < args.length; i++) {      vs=vs.join(args[i].check(env,newctx,cvs.copy(),exp));    }    for (int i=1; i < args.length; i++) {      CatchStatement cs=(CatchStatement)args[i];      if (cs.field == null) {        continue;      }      Type type=cs.field.getType();      ClassDefinition def=env.getClassDefinition(type);      for (int j=0; j < i; j++) {        CatchStatement cs2=(CatchStatement)args[j];        if (cs2.field == null) {          continue;        }        Type t=cs2.field.getType();        ClassDeclaration c=env.getClassDeclaration(t);        if (def.subClassOf(env,c)) {          env.error(args[i].where,"catch.not.reached");          break;        }      }    }    ClassDeclaration ignore1=env.getClassDeclaration(idJavaLangError);    ClassDeclaration ignore2=env.getClassDeclaration(idJavaLangRuntimeException);    for (int i=0; i < args.length; i++) {      CatchStatement cs=(CatchStatement)args[i];      if (cs.field == null) {        continue;      }      Type type=cs.field.getType();      if (!type.isType(TC_CLASS)) {        continue;      }      ClassDefinition def=env.getClassDefinition(type);      if (def.subClassOf(env,ignore1) || def.superClassOf(env,ignore1) || def.subClassOf(env,ignore2)|| def.superClassOf(env,ignore2)) {        continue;      }      boolean ok=false;      for (Enumeration e=newexp.keys(); e.hasMoreElements(); ) {        ClassDeclaration c=(ClassDeclaration)e.nextElement();        if (def.superClassOf(env,c) || def.subClassOf(env,c)) {          ok=true;          break;        }      }      if (!ok && arrayCloneWhere != 0 && def.getName().toString().equals("java.lang.CloneNotSupportedException")) {        env.error(arrayCloneWhere,"warn.array.clone.supported",def.getName());      }      if (!ok) {        env.error(cs.where,"catch.not.thrown",def.getName());      }    }    for (Enumeration e=newexp.keys(); e.hasMoreElements(); ) {      ClassDeclaration c=(ClassDeclaration)e.nextElement();      ClassDefinition def=c.getClassDefinition(env);      boolean add=true;      for (int i=0; i < args.length; i++) {        CatchStatement cs=(CatchStatement)args[i];        if (cs.field == null) {          continue;        }        Type type=cs.field.getType();        if (type.isType(TC_ERROR))         continue;        if (def.subClassOf(env,env.getClassDeclaration(type))) {          add=false;          break;        }      }      if (add) {        exp.put(c,newexp.get(c));      }    }    return ctx.removeAdditionalVars(vs.join(newctx.vsBreak));  } catch (  ClassNotFound e) {    env.error(where,"class.not.found",e.name,opNames[op]);    return vset;  }}  }
class C{  public int hashCode(){  return (9 * colorModel.hashCode()) + (14 * sampleModel.hashCode());}  }
class C{  @NonNull public static Date convertToGmt(Date date){  try {    return DATE_COMPLETE_LOCAL.parse(DATE_COMPLETE_UTC.format(date));  } catch (  ParseException e) {    throw new RuntimeException(e);  }}  }
class C{  public static Map<String,Object> createEmailAddressVerification(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  String emailAddress=(String)context.get("emailAddress");  String verifyHash=null;  String expireTime=EntityUtilProperties.getPropertyValue("security","email_verification.expire.hours",delegator);  Integer expTime=Integer.valueOf(expireTime);  Calendar calendar=Calendar.getInstance();  calendar.add(Calendar.HOUR,expTime.intValue());  Date date=calendar.getTime();  Timestamp expireDate=UtilDateTime.toTimestamp(date);  SecureRandom secureRandom=new SecureRandom();synchronized (ContactMechServices.class) {    while (true) {      Long random=secureRandom.nextLong();      verifyHash=HashCrypt.digestHash("MD5",Long.toString(random).getBytes());      List<GenericValue> emailAddVerifications=null;      try {        emailAddVerifications=EntityQuery.use(delegator).from("EmailAddressVerification").where("verifyHash",verifyHash).queryList();      } catch (      GenericEntityException e) {        Debug.logError(e.getMessage(),module);        return ServiceUtil.returnError(e.getMessage());      }      if (UtilValidate.isEmpty(emailAddVerifications)) {        GenericValue emailAddressVerification=delegator.makeValue("EmailAddressVerification");        emailAddressVerification.set("emailAddress",emailAddress);        emailAddressVerification.set("verifyHash",verifyHash);        emailAddressVerification.set("expireDate",expireDate);        try {          delegator.create(emailAddressVerification);        } catch (        GenericEntityException e) {          Debug.logError(e.getMessage(),module);          return ServiceUtil.returnError(e.getMessage());        }        break;      }    }  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("verifyHash",verifyHash);  return result;}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public void testPrepStmtSetObjectAndNewUnsupportedTypes() throws Exception {  checkUnsupportedTypesBehavior(this.conn.prepareStatement("SELECT ?"));}  }
class C{  private void drawBackground(final Graphics g){  g.setColor(m_bgColorOffset);  g.fillRect(-m_firstColumn * m_charWidth,0,m_offsetViewWidth,getHeight());  g.setColor(m_bgColorHex);  g.fillRect((-m_firstColumn * m_charWidth) + m_offsetViewWidth,0,m_hexViewWidth,getHeight());  g.setColor(m_bgColorAscii);  g.fillRect((-m_firstColumn * m_charWidth) + m_hexViewWidth + m_offsetViewWidth,0,((m_firstColumn * m_charWidth) + getWidth()) - (m_hexViewWidth + m_offsetViewWidth) - m_scrollbar.getWidth(),getHeight() - m_horizontalScrollbar.getHeight());  g.setColor(Color.BLACK);  g.drawLine((-m_firstColumn * m_charWidth) + m_offsetViewWidth,0,(-m_firstColumn * m_charWidth) + m_offsetViewWidth,getHeight());  g.drawLine((-m_firstColumn * m_charWidth) + m_offsetViewWidth + m_hexViewWidth,0,(-m_firstColumn * m_charWidth) + m_offsetViewWidth + m_hexViewWidth,getHeight());}  }
class C{  public <D,E extends Element>ElementMetadata<D,E> bind(ElementKey<?,?> parent,ElementKey<D,E> child,MetadataContext context){  ElementMetadataRegistry childRegistry=getElement(child);  return (childRegistry == null) ? null : childRegistry.bind(parent,child,context);}  }
class C{  public boolean hasNonNullKeys(){  for (  DeviceField f : keyFields) {switch (f) {case MAC:      return true;case IPV4:    if (entity.ipv4Address != null)     return true;  break;case SWITCH:if (entity.switchDPID != null) return true;break;case PORT:if (entity.switchPort != null) return true;break;case VLAN:if (entity.vlan != null) return true;break;}}return false;}  }
class C{  public void reset(){  taxonList=null;  taxonSets.clear();  taxonSetsMono.clear();  taxonSetsIncludeStem.clear();  taxonSetsTreeModel.clear();  datesUnits=DateUnitsType.YEARS;  datesDirection=DateUnitsType.FORWARDS;  maximumTipHeight=0.0;  translation=0;  dataPartitions.clear();  traits.clear();  partitionClockTreeLinks.clear();  userTrees.clear();  unlinkPartitionRates=true;  units=Units.Type.SUBSTITUTIONS;  optimizationTransform=OperatorSchedule.OptimizationTransform.DEFAULT;  chainLength=10000000;  logEvery=1000;  echoEvery=1000;  burnIn=100000;  fileName=null;  autoOptimize=true;  performTraceAnalysis=false;  generateCSV=true;  samplePriorOnly=false;  fileNameStem=MCMCPanel.DEFAULT_FILE_NAME_STEM;  logFileName=null;  allowOverwriteLog=false;  treeFileName.clear();  substTreeLog=false;  substTreeFileName.clear();  operatorAnalysis=false;  operatorAnalysisFileName=null;  siteModelOptions=new SiteModelOptions(this);  clockModelOptions=new ClockModelOptions(this);  treeModelOptions=new TreeModelOptions(this);  useStarBEAST=false;  speciesSets.clear();  speciesSetsMono.clear();  starBEASTOptions=new STARBEASTOptions(this);  microsatelliteOptions=new MicrosatelliteOptions(this);  parameters.clear();  operators.clear();  statistics.clear();  shareMicroSat=true;  clearDataPartitionCaches();}  }
class C{  public int copyTasksFrom(MProjectPhase fromPhase){  if (fromPhase == null)   return 0;  int count=0, countLine=0;  MProjectTask[] myTasks=getTasks();  MProjectTask[] fromTasks=fromPhase.getTasks();  for (int i=0; i < fromTasks.length; i++) {    int C_Task_ID=fromTasks[i].getC_Task_ID();    boolean exists=false;    if (C_Task_ID == 0)     exists=false; else {      for (int ii=0; ii < myTasks.length; ii++) {        if (myTasks[ii].getC_Task_ID() == C_Task_ID) {          exists=true;          break;        }      }    }    if (exists)     log.info("Task already exists here, ignored - " + fromTasks[i]); else {      MProjectTask toTask=new MProjectTask(getCtx(),0,get_TrxName());      PO.copyValues(fromTasks[i],toTask,getAD_Client_ID(),getAD_Org_ID());      toTask.setC_ProjectPhase_ID(getC_ProjectPhase_ID());      if (toTask.save()) {        count++;        countLine+=toTask.copyLinesFrom(fromTasks[i]);      }    }  }  if (fromTasks.length != count)   log.warning("Count difference - ProjectPhase=" + fromTasks.length + " <> Saved="+ count);  return count + countLine;}  }
class C{  public static boolean isEachColumnSum1(double[][] m){  for (int col=0; col < m.length; col++) {    double sum=0;    for (int row=0; row < m.length; row++) {      sum+=m[row][col];    }    if (sum != 1)     return false;  }  return true;}  }
class C{  public static void main(String[] args){  TestAbsLinkPath tester=new TestAbsLinkPath();  run(tester,ARGS1,NO_TEST,NO_TEST);  run(tester,ARGS2,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public void reward(final String articleId,final String senderId) throws ServiceException {  try {    final JSONObject article=articleRepository.get(articleId);    if (null == article) {      return;    }    if (Article.ARTICLE_STATUS_C_INVALID == article.optInt(Article.ARTICLE_STATUS)) {      return;    }    final JSONObject sender=userRepository.get(senderId);    if (null == sender) {      return;    }    if (UserExt.USER_STATUS_C_VALID != sender.optInt(UserExt.USER_STATUS)) {      return;    }    final String receiverId=article.optString(Article.ARTICLE_AUTHOR_ID);    final JSONObject receiver=userRepository.get(receiverId);    if (null == receiver) {      return;    }    if (UserExt.USER_STATUS_C_VALID != receiver.optInt(UserExt.USER_STATUS)) {      return;    }    if (receiverId.equals(senderId)) {      return;    }    final int rewardPoint=article.optInt(Article.ARTICLE_REWARD_POINT);    if (rewardPoint < 1) {      return;    }    if (rewardQueryService.isRewarded(senderId,articleId,Reward.TYPE_C_ARTICLE)) {      return;    }    final String rewardId=Ids.genTimeMillisId();    final boolean succ=null != pointtransferMgmtService.transfer(senderId,receiverId,Pointtransfer.TRANSFER_TYPE_C_ARTICLE_REWARD,rewardPoint,rewardId);    if (!succ) {      throw new ServiceException();    }    final JSONObject reward=new JSONObject();    reward.put(Keys.OBJECT_ID,rewardId);    reward.put(Reward.SENDER_ID,senderId);    reward.put(Reward.DATA_ID,articleId);    reward.put(Reward.TYPE,Reward.TYPE_C_ARTICLE);    rewardMgmtService.addReward(reward);    final JSONObject notification=new JSONObject();    notification.put(Notification.NOTIFICATION_USER_ID,receiverId);    notification.put(Notification.NOTIFICATION_DATA_ID,rewardId);    notificationMgmtService.addArticleRewardNotification(notification);  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Rewards an article[id=" + articleId + "] failed",e);    throw new ServiceException(e);  }}  }
class C{  protected boolean canAnimateType(int type){  return type == SVGTypes.TYPE_TRANSFORM_LIST;}  }
class C{  public static void main(String[] args){  SegmentTree st=null;  String cmd="cmp";  while (true) {    String[] line=StdIn.readLine().split(" ");    if (line[0].equals("exit"))     break;    int arg1=0, arg2=0, arg3=0;    if (line.length > 1) {      arg1=Integer.parseInt(line[1]);    }    if (line.length > 2) {      arg2=Integer.parseInt(line[2]);    }    if (line.length > 3) {      arg3=Integer.parseInt(line[3]);    }    if ((!line[0].equals("set") && !line[0].equals("init")) && st == null) {      StdOut.println("Segment Tree not initialized");      continue;    }    int array[];    if (line[0].equals("set")) {      array=new int[line.length - 1];      for (int i=0; i < line.length - 1; i++) {        array[i]=Integer.parseInt(line[i + 1]);      }      st=new SegmentTree(array);    } else     if (line[0].equals("init")) {      array=new int[arg1];      Arrays.fill(array,arg2);      st=new SegmentTree(array);      for (int i=0; i < st.size(); i++) {        StdOut.print(st.rsq(i,i) + " ");      }      StdOut.println();    } else     if (line[0].equals("up")) {      st.update(arg1,arg2,arg3);      for (int i=0; i < st.size(); i++) {        StdOut.print(st.rsq(i,i) + " ");      }      StdOut.println();    } else     if (line[0].equals("rsq")) {      StdOut.printf("Sum from %d to %d = %d%n",arg1,arg2,st.rsq(arg1,arg2));    } else     if (line[0].equals("rmq")) {      StdOut.printf("Min from %d to %d = %d%n",arg1,arg2,st.rMinQ(arg1,arg2));    } else {      StdOut.println("Invalid command");    }  }  StdOut.close();}  }
class C{  protected void init(){  if (processor.getUriFilter() != null && !processor.getUriFilter().trim().isEmpty()) {    uriFilter=Pattern.compile(processor.getUriFilter()).asPredicate();  }  if (processor.getFaultFilter() != null && !processor.getFaultFilter().trim().isEmpty()) {    faultFilter=Pattern.compile(processor.getFaultFilter()).asPredicate();  }  try {    if (processor.getPredicate() != null) {      predicateHandler=ExpressionHandlerFactory.getHandler(processor.getPredicate());      predicateHandler.init(getProcessor(),null,true);      usesHeaders=predicateHandler.isUsesHeaders();      usesContent=predicateHandler.isUsesContent();    }  } catch (  Throwable t) {    if (log.isLoggable(Level.FINE)) {      log.log(Level.FINE,"Failed to initialise processor predicate '" + processor.getPredicate() + "'",t);    }    ProcessorIssue pi=new ProcessorIssue();    pi.setProcessor(processor.getDescription());    pi.setSeverity(Severity.Error);    pi.setDescription(t.getMessage());    if (issues == null) {      issues=new ArrayList<Issue>();    }    issues.add(pi);  }  for (int i=0; i < processor.getActions().size(); i++) {    ProcessorActionWrapper paw=new ProcessorActionWrapper(processor,processor.getActions().get(i));    if (!usesHeaders) {      usesHeaders=paw.isUsesHeaders();    }    if (!usesContent) {      usesContent=paw.isUsesContent();    }    actions.add(paw);  }}  }
class C{  @Field(24) public Pointer<CY> pcyVal(){  return this.io.getPointerField(this,24);}  }
class C{  public CentroidDissimilarity(DistanceMetric dm){  super(dm);}  }
class C{  @Override public boolean equals(Object otherObj){  if (otherObj instanceof P2Model) {    return content.equals(((P2Model)otherObj).content);  } else {    return false;  }}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  private void trace(){  glUseProgram(photonTraceProgram);  long thisTime=System.nanoTime();  float elapsedSeconds=(thisTime - firstTime) / 1E9f;  glUniform1f(timeUniform,elapsedSeconds);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,ssbo);  glBindBufferBase(GL_UNIFORM_BUFFER,imagesUboBinding,imageHandlesUbo);  int invocationsPerDimension=photonsPerFrame;  int worksizeX=mathRoundPoT(invocationsPerDimension);  int worksizeY=mathRoundPoT(invocationsPerDimension);  if (variableGroupSize) {    ARBComputeVariableGroupSize.glDispatchComputeGroupSizeARB(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1,workGroupSizeX,workGroupSizeY,1);  } else {    glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);  }  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,0);  glBindBufferBase(GL_UNIFORM_BUFFER,imagesUboBinding,0);  glUseProgram(0);}  }
class C{  public void update(Instance ins){  try {    m_Remove.input(ins);    m_Filter.input(m_Remove.output());    m_Distance.update(m_Filter.output());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private float spacing(MotionEvent event){  float x=event.getX(0) - event.getX(1);  float y=event.getY(0) - event.getY(1);  return (float)Math.sqrt(x * x + y * y);}  }
class C{  protected int skipToEndOfLine(int c) throws IOException {  while (c != -1 && c != '\r' && c != '\n') {    c=readCodePoint();  }  return c;}  }
class C{  public boolean isDirected(){  Object oo=get_Value(COLUMNNAME_IsDirected);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void dynInit(){  summary.addActionListener(this);  fillComboReport(m_reportEngine.getPrintFormat().get_ID());  comboDrill.appendItem("",null);  String sql="SELECT t.AD_Table_ID, t.TableName, e.PrintName, NULLIF(e.PO_PrintName,e.PrintName) " + "FROM AD_Column c " + " INNER JOIN AD_Column used ON (c.ColumnName=used.ColumnName)"+ " INNER JOIN AD_Table t ON (used.AD_Table_ID=t.AD_Table_ID AND t.IsView='N' AND t.AD_Table_ID <> c.AD_Table_ID)"+ " INNER JOIN AD_Column cKey ON (t.AD_Table_ID=cKey.AD_Table_ID AND cKey.IsKey='Y')"+ " INNER JOIN AD_Element e ON (cKey.ColumnName=e.ColumnName) "+ "WHERE c.AD_Table_ID=? AND c.IsKey='Y' "+ "ORDER BY 3";  boolean trl=!Env.isBaseLanguage(Env.getCtx(),"AD_Element");  if (trl)   sql="SELECT t.AD_Table_ID, t.TableName, et.PrintName, NULLIF(et.PO_PrintName,et.PrintName) " + "FROM AD_Column c" + " INNER JOIN AD_Column used ON (c.ColumnName=used.ColumnName)"+ " INNER JOIN AD_Table t ON (used.AD_Table_ID=t.AD_Table_ID AND t.IsView='N' AND t.AD_Table_ID <> c.AD_Table_ID)"+ " INNER JOIN AD_Column cKey ON (t.AD_Table_ID=cKey.AD_Table_ID AND cKey.IsKey='Y')"+ " INNER JOIN AD_Element e ON (cKey.ColumnName=e.ColumnName)"+ " INNER JOIN AD_Element_Trl et ON (e.AD_Element_ID=et.AD_Element_ID) "+ "WHERE c.AD_Table_ID=? AND c.IsKey='Y'"+ " AND et.AD_Language=? "+ "ORDER BY 3";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_reportEngine.getPrintFormat().getAD_Table_ID());    if (trl)     pstmt.setString(2,Env.getAD_Language(Env.getCtx()));    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      String tableName=rs.getString(2);      String name=rs.getString(3);      String poName=rs.getString(4);      if (poName != null)       name+="/" + poName;      comboDrill.appendItem(name,tableName);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (comboDrill.getItemCount() == 1) {    labelDrill.setVisible(false);    comboDrill.setVisible(false);  } else   comboDrill.addEventListener(Events.ON_SELECT,this);  revalidate();}  }
class C{  @Override protected void validateAutoTierPolicy(String autoTierPolicyId,UnManagedVolume unManagedVolume,VirtualPool vPool){  return;}  }
class C{  public SmokeTestClusterAction(OperationConfig config) throws Exception {  super(config);  destinationZKClient=new ZkClient(config.getDestinationZkHost());}  }
class C{  private void renderAxes(Camera camera){  glPushMatrix();  glLoadIdentity();  float rotX=camera.getRotation().x;  float rotY=camera.getRotation().y;  float rotZ=0;  glRotatef(rotX,1.0f,0.0f,0.0f);  glRotatef(rotY,0.0f,1.0f,0.0f);  glRotatef(rotZ,0.0f,0.0f,1.0f);  glLineWidth(2.0f);  glBegin(GL_LINES);  glColor3f(1.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(1.0f,0.0f,0.0f);  glColor3f(0.0f,1.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,1.0f,0.0f);  glColor3f(1.0f,1.0f,1.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,1.0f);  glEnd();  glPopMatrix();}  }
class C{  public static void writeln(char[] ca){  writeln(ca,true);}  }
class C{  public static boolean parseLabelDeclaration(PsiBuilder b,int l){  if (PerlLexer.LABEL_TOKENSET.contains(b.getTokenType()) && b.lookAhead(1) == COLON) {    PsiBuilder.Marker m=b.mark();    b.advanceLexer();    m.collapse(LABEL);    b.advanceLexer();    return true;  }  return false;}  }
class C{  private Seg<K,V> segFor(int hash){  return segs[(hash >>> segShift) & segMask];}  }
class C{  public JSONObject makeConnectedViaPostProps(final ConnectionDirection connectionDirection,final String postCity,final String category,final Attachment attachment,final int postLength){  JSONObject props;  try {    props=new JSONObject();    props.put("Direction",connectionDirection.code);    props.put("Post City",postCity);    props.put("Category",category);    props.put("Attachment",attachment);    props.put("Length",postLength);  } catch (  JSONException e) {    Logger.e(TAG,"Error building Mixpanel Props",e);    props=null;  }  return props;}  }
class C{  public void flip(int i){  bits[i / 32]^=1 << (i & 0x1F);}  }
class C{  private boolean predictsFalseIndependence(Set<IonIndependenceFacts> associations,Graph pag){  for (  IonIndependenceFacts assocFact : associations)   for (  List<Node> conditioningSet : assocFact.getZ())   if (pag.isDSeparatedFrom(assocFact.getX(),assocFact.getY(),conditioningSet))   return true;  return false;}  }
class C{  public static Document createXMLQueryFormat(AxSf axsf,FieldFormat fieldFormat,Integer archiveId,long archivePId,long fdrqrypid,String archiveName,Locale locale,boolean isBookAdmin,int perm,List validationFields,Map fieldsNotEqual,int sizeIncompletRegiters,UserConf usrConf,String dataBaseType,SessionInformation sessionInformation){  String data=axsf.getFormat().getData();  QueryFormat queryFormat=new QueryFormat(data);  String message=null;  Document document=DocumentHelper.createDocument();  if (sizeIncompletRegiters != 0) {    message=RBUtil.getInstance(locale).getProperty(I18N_BOOK_IMCOMPLET_REGISTERS);  }  Element root=document.addElement(XML_ISICRESQRYFMT_TEXT);  Element fieldsElem=root.addElement(XML_FIELDS_TEXT);  List fields=usrConf.getFieldConf();  FieldConf fieldConf=null;  Element field=null;  for (Iterator it=fields.iterator(); it.hasNext(); ) {    fieldConf=(FieldConf)it.next();    field=fieldsElem.addElement(XML_FIELD_TEXT);    if (new Integer(fieldConf.getFieldId()).intValue() == 1) {      field.addAttribute(XML_SELECTED_TEXT,new Integer(fieldConf.getFieldId()).toString());    }    field.addElement(XML_ID_TEXT).addText(new Integer(fieldConf.getFieldId()).toString());    field.addElement(XML_NAME_TEXT).add(DocumentHelper.createCDATA("FLD" + Integer.toString(fieldConf.getFieldId())));    field.addElement(XML_LABEL_TEXT).add(DocumentHelper.createCDATA(fieldConf.getFieldLabel()));  }  if (message != null) {    Element messages=root.addElement(XML_MESSAGES_TEXT);    messages.addElement(XML_MESSAGE_TEXT).add(DocumentHelper.createCDATA(message));  }  addParams(archiveId,archivePId,archiveName,fdrqrypid,perm,isBookAdmin,root);  int l=queryFormat.getDlgDef().getL();  int t=queryFormat.getDlgDef().getT();  int w=queryFormat.getDlgDef().getR();  int h=queryFormat.getDlgDef().getB();  addDimensions(l,t,w,h,root);  Integer ctrlId=null;  Integer fldId=null;  QCtrlDef ctrlDef=null;  int i=0;  Integer disabled=null;  Map ctrBoxDisabled=new HashMap();  if (fieldsNotEqual != null && !fieldsNotEqual.isEmpty()) {    for (Iterator it=queryFormat.getDlgDef().getCtrldefs().keySet().iterator(); it.hasNext(); ) {      ctrlId=(Integer)it.next();      ctrlDef=(QCtrlDef)queryFormat.getDlgDef().getCtrldefs().get(ctrlId);      if (fieldsNotEqual.containsKey("FLD" + ctrlDef.getFldId())) {        if (ctrlDef.getName().startsWith(IDOC_EDIT)) {          ctrBoxDisabled.put("CTR" + (ctrlId.intValue() - 1),new Integer(ctrlId.intValue() - 1));        }      }    }  }  Map ctrBoxOfFldId=new HashMap();  for (Iterator it=queryFormat.getDlgDef().getCtrldefs().keySet().iterator(); it.hasNext(); ) {    ctrlId=(Integer)it.next();    ctrlDef=(QCtrlDef)queryFormat.getDlgDef().getCtrldefs().get(ctrlId);    if (ctrlDef.getName().startsWith(IDOC_EDIT)) {      ctrBoxOfFldId.put(new Integer(ctrlDef.getRelCtrlId()),new Integer(ctrlDef.getFldId()));    }  }  for (Iterator it=queryFormat.getDlgDef().getCtrldefs().keySet().iterator(); it.hasNext(); ) {    ctrlId=(Integer)it.next();    ctrlDef=(QCtrlDef)queryFormat.getDlgDef().getCtrldefs().get(ctrlId);    if (ctrlDef.getName().startsWith(IDOC_STATIC)) {      try {        ctrlDef.setText(axsf.getLocaleAttributeNameQuery(locale,ctrlDef.getText()));      } catch (      Exception e) {      }      addControlTypeStatic(ctrlDef,root);    } else     if (ctrlDef.getName().startsWith(IDOC_CBOX)) {      if (!ctrBoxDisabled.isEmpty() && ctrBoxDisabled.containsKey("CTR" + ctrlId.intValue())) {        disabled=new Integer(1);      } else {        disabled=null;      }      if (ctrBoxOfFldId.containsKey(new Integer(ctrlDef.getId()))) {        fldId=(Integer)ctrBoxOfFldId.get(new Integer(ctrlDef.getId()));      }      addControlTypeComboBox(ctrlDef,locale,root,disabled,dataBaseType,fldId);    } else     if (ctrlDef.getName().startsWith(IDOC_EDIT)) {      if (fieldsNotEqual != null && !fieldsNotEqual.isEmpty() && fieldsNotEqual.containsKey("FLD" + ctrlDef.getFldId())) {        disabled=new Integer(1);      } else {        disabled=null;      }      addControlTypeEdit(axsf,fieldFormat,ctrlDef,root,validationFields,disabled,sessionInformation.getCaseSensitive());    } else     if (ctrlDef.getName().startsWith(IDOC_BUTTON)) {      addControlTypeButton(ctrlDef,locale,root);    }    i++;  }  return document;}  }
class C{  public ModbusTCPMaster(String addr,int port){  this(addr,port,Modbus.DEFAULT_TIMEOUT,false);}  }
class C{  public double entropyPowers(){  return (2 * entropyJoint() / (entropyFirst() + entropySecond()) - 1);}  }
class C{  public void put(int key,E value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public static char[] toCharArray(long[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(char)array[i];  }  return result;}  }
class C{  public synchronized void close(){  if (socket != null) {    try {      if (out != null) {        out.flush();      }      if (socket != null) {        socket.close();      }    } catch (    IOException e) {      DbException.traceThrowable(e);    } finally {      socket=null;    }  }}  }
class C{  public Element removeChildren(String name){  checkNotRemoved();  final List<Node> matched=new LinkedList<>();  final NodeList nodes=delegate.getChildNodes();  for (int i=0; i < nodes.getLength(); i++) {    if (name.equals(nodes.item(i).getNodeName())) {      matched.add(nodes.item(i));    }  }  for (  Node node : matched) {    asElement(node).remove();  }  return this;}  }
class C{  public static boolean isStrict(int mod){  return (mod & STRICT) != 0;}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  protected NativePointerObject(long nativePointer){  this.nativePointer=nativePointer;}  }
class C{  public double cdf(double x){  if (x <= 0.0)   return 0.0;  return 1.0 - Math.exp(-x * lambda);}  }
class C{  public Builder updatePhoneNumber(PhoneNumber oldPhoneNumber,PhoneNumber newPhoneNumber){  deletePhoneNumber(oldPhoneNumber);  addPhoneNumber(newPhoneNumber);  return this;}  }
class C{  private void nonblockingCreateSavePointData(){  try {    SavePointTask savePointTask=new SavePointTask(this);    savePointTask.execute();  } catch (  Exception e) {    Log.e(t,"Could not schedule SavePointTask. Perhaps a lot of swiping is taking place?");  }}  }
class C{  public ApnsFuture send(String deviceTokenString,ApnsPayload apnsPayload,int tryTimes){  checkClosed();  return send(ApnsHelper.toByteArray(deviceTokenString),apnsPayload,tryTimes);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.087 -0500",hash_original_method="842D88ADC63F459E21BBD6FC9BF11FA0",hash_generated_method="09DF8652C2396427E8C3181F052DEC23") public void data(byte[] data,int length){  if (DebugFlags.LOAD_LISTENER) {    Log.v(LOGTAG,"LoadListener.data(): url: " + url());  }  boolean sendMessage=false;synchronized (mDataBuilder) {    sendMessage=mDataBuilder.isEmpty();    mDataBuilder.append(data,0,length);  }  if (sendMessage) {    sendMessageInternal(obtainMessage(MSG_CONTENT_DATA));  }}  }
class C{  public static Matrix asin(Matrix A){  Matrix out=new Matrix(A.getRowDimension(),A.getColumnDimension());  for (int i=0; i < A.getRowDimension(); i++)   for (int j=0; j < A.getColumnDimension(); j++)   out.set(i,j,Math.asin(A.get(i,j)));  return out;}  }
class C{  public BalancedBinaryNode<K,V> right(){  return right;}  }
class C{  CornerSize(double radius){  this.radius=radius;}  }
class C{  public ElementalVectorStore(FlagConfig flagConfig){  this.flagConfig=flagConfig;switch (flagConfig.elementalmethod()) {case RANDOM:    backingStore=new VectorStoreRAM(flagConfig);  random=new Random();break;case CONTENTHASH:backingStore=new VectorStoreDeterministic(flagConfig);break;case ORTHOGRAPHIC:backingStore=new VectorStoreOrthographical(flagConfig);break;}}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.EXTENDED_STATE_MACHINE___ANONYMOUS_EXTENDED_STATE_MACHINE_11:    return ((InternalEList<?>)getAnonymous_extendedStateMachine_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public boolean containsKey(final Object key){  if (key instanceof byte[]) {    return containsKey((byte[])key);  }  return false;}  }
class C{  private void groupingByCity(){  Map<String,List<Employee>> cityEmployees=employees.stream().collect(Collectors.groupingBy(null));  System.out.println(cityEmployees);}  }
class C{  public boolean hasBreakpoint(int position){  return breakPoint[position];}  }
class C{  public void error(RpcError rpcError){  if (log.isDebugEnabled()) {    log.debug("Received [" + rpcError.getCorrelationId() + "]RpcError. ErrorMessage="+ rpcError.getErrorMessage());  }  PendingClientCallState state=removePendingRequest(rpcError.getCorrelationId());  if (state != null) {    doLogRpc(state,rpcError,rpcError.getErrorMessage());    state.handleFailure(rpcError.getErrorMessage());  } else {    if (log.isDebugEnabled()) {      log.debug("No PendingCallState found for correlationId " + rpcError.getCorrelationId());    }  }}  }
class C{  public static TypeReference newFormalParameterReference(int paramIndex){  return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));}  }
class C{  public SampleModel createCompatibleSampleModel(int w,int h){  int[] bandOffsets=new int[numComponents];  for (int i=0; i < numComponents; i++) {    bandOffsets[i]=i;  }switch (transferType) {case DataBuffer.TYPE_BYTE:case DataBuffer.TYPE_USHORT:    return new PixelInterleavedSampleModel(transferType,w,h,numComponents,w * numComponents,bandOffsets);default :  return new ComponentSampleModel(transferType,w,h,numComponents,w * numComponents,bandOffsets);}}  }
class C{  public final boolean isLayered(){  return layered;}  }
class C{  protected boolean isMergeContiguousFragments(String fieldName,SolrParams params){  return params.getFieldBool(fieldName,HighlightParams.MERGE_CONTIGUOUS_FRAGMENTS,false);}  }
class C{  private void computeThreadRoots(TraceLocal trace,boolean newRootsSufficient){  boolean processCodeLocations=MOVES_CODE;  while (true) {    int threadIndex=threadCounter.increment();    if (threadIndex > RVMThread.numThreads)     break;    RVMThread thread=RVMThread.threads[threadIndex];    if (thread == null || thread.isCollectorThread())     continue;    ScanThread.scanThread(thread,trace,processCodeLocations,newRootsSufficient);  }  Selected.Mutator.get().flushRememberedSets();}  }
class C{  public void robotInit(){}  }
class C{  public Matrix4x3d rotateY(double ang){  return rotateY(ang,this);}  }
class C{  public <E extends T>EventBinder<E> on(){  return new EventBinder<>(Optional.empty());}  }
class C{  private void drawSecondAnimation(Canvas canvas){  if (arcO == limite)   arcD+=6;  if (arcD >= 290 || arcO > limite) {    arcO+=6;    arcD-=6;  }  if (arcO > limite + 290) {    limite=arcO;    arcO=limite;    arcD=1;  }  rotateAngle+=4;  canvas.rotate(rotateAngle,getWidth() / 2,getHeight() / 2);  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);  Canvas temp=new Canvas(bitmap);  Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setColor(backgroundColor);  temp.drawArc(new RectF(0,0,getWidth(),getHeight()),arcO,arcD,true,paint);  Paint transparentPaint=new Paint();  transparentPaint.setAntiAlias(true);  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  temp.drawCircle(getWidth() / 2,getHeight() / 2,(getWidth() / 2) - dpToPx(4,getResources()),transparentPaint);  canvas.drawBitmap(bitmap,0,0,new Paint());}  }
class C{  public Vec4 intersect(Line line){  if (line == null) {    throw new IllegalArgumentException("Line Is Null");  }  double t=this.intersectDistance(line);  if (Double.isNaN(t))   return null;  if (Double.isInfinite(t))   return line.getOrigin();  return line.getPointAt(t);}  }
class C{  public void readSequence(ASN1Sequence sequence) throws IOException {  if (tag != ASN1Constants.TAG_C_SEQUENCE) {    throw expected("sequence");  }  int begOffset=offset;  int endOffset=begOffset + length;  ASN1Type[] type=sequence.type;  int i=0;  if (isVerify) {    for (; (offset < endOffset) && (i < type.length); i++) {      next();      while (!type[i].checkTag(tag)) {        if (!sequence.OPTIONAL[i] || (i == type.length - 1)) {          throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");        }        i++;      }      type[i].decode(this);    }    for (; i < type.length; i++) {      if (!sequence.OPTIONAL[i]) {        throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");      }    }  } else {    int seqTagOffset=tagOffset;    Object[] values=new Object[type.length];    for (; (offset < endOffset) && (i < type.length); i++) {      next();      while (!type[i].checkTag(tag)) {        if (!sequence.OPTIONAL[i] || (i == type.length - 1)) {          throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");        }        if (sequence.DEFAULT[i] != null) {          values[i]=sequence.DEFAULT[i];        }        i++;      }      values[i]=type[i].decode(this);    }    for (; i < type.length; i++) {      if (!sequence.OPTIONAL[i]) {        throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");      }      if (sequence.DEFAULT[i] != null) {        values[i]=sequence.DEFAULT[i];      }    }    content=values;    tagOffset=seqTagOffset;  }  if (offset != endOffset) {    throw new ASN1Exception("Wrong encoding at [" + begOffset + "]. Content's length and encoded length are not the same");  }}  }
class C{  public void logWarning(String message){  getLog().log(new Status(IStatus.WARNING,pluginId,message));}  }
class C{  private static int WRatio(String s1,String s2,Boolean force_ascii){  if (force_ascii == null) {    force_ascii=true;  }  String p1=full_process(s1,force_ascii);  String p2=full_process(s2,force_ascii);  if (!validate_string(p1)) {    return 0;  }  if (!validate_string(p2)) {    return 0;  }  boolean try_partial=true;  double unbase_scale=.95;  double partial_scale=.90;  int base=ratio(p1,p2);  double len_ratio=(double)(x.max(x.len(p1),x.len(p2))) / (double)x.min(x.len(p1),x.len(p2));  if (len_ratio < 1.5)   try_partial=false;  if (len_ratio > 8)   partial_scale=.6;  if (try_partial) {    double partial=partial_ratio(p1,p2) * partial_scale;    double ptsor=partial_token_sort_ratio(p1,p2,force_ascii) * unbase_scale * partial_scale;    double ptser=partial_token_set_ratio(p1,p2,force_ascii) * unbase_scale * partial_scale;    return (int)(x.max((double)base,partial,ptsor,ptser)).doubleValue();  } else {    double tsor=token_sort_ratio(p1,p2,force_ascii) * unbase_scale;    double tser=token_set_ratio(p1,p2,force_ascii) * unbase_scale;    return (int)(x.max((double)base,tsor,tser)).doubleValue();  }}  }
class C{  public static void logCurrent(String msg){  EGLDisplay display;  EGLContext context;  EGLSurface surface;  display=EGL14.eglGetCurrentDisplay();  context=EGL14.eglGetCurrentContext();  surface=EGL14.eglGetCurrentSurface(EGL14.EGL_DRAW);  Log.i(TAG,"Current EGL (" + msg + "): display="+ display+ ", context="+ context+ ", surface="+ surface);}  }
class C{  private static String paiseInWords(final String paise){  Long subNum=0L;  String returnValue="";  if (paise.length() >= 2) {    subNum=Long.parseLong(paise.charAt(0) + "" + paise.charAt(1));  } else {    subNum=Long.parseLong(paise.charAt(0) + "");  }  if (subNum >= 21 && (subNum % 10) != 0) {    returnValue+=getWord(Long.parseLong("" + paise.charAt(0)) * 10) + " " + getWord(subNum % 10);  } else {    returnValue+=getWord(subNum);  }  return returnValue;}  }
class C{  public static Object distAceptEvent(String sessionID,String eventId,ScrDistreg scrDistReg,String entidad) throws DistributionException, SessionException, ValidationException {  Object result=null;  if (log.isDebugEnabled()) {    log.debug("distributionEx eventId [" + eventId + "]");  }  Validator.validate_String_NotNull_LengthMayorZero(sessionID,ValidationException.ATTRIBUTE_SESSION);  try {    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    AuthenticationUser user=(AuthenticationUser)cacheBag.get(HIBERNATE_Iuseruserhdr);    ScrOfic scrofic=(ScrOfic)cacheBag.get(HIBERNATE_ScrOfic);    RuleContext ruleCtx=new RuleContext();    ruleCtx=new RuleContext();    ruleCtx.setUsuario(user.getId().toString());    ruleCtx.setSessionId(sessionID);    ruleCtx.setEventId(eventId);    ruleCtx.setLibro(new Integer(scrDistReg.getIdArch()));    ruleCtx.setRegistro(new Integer(scrDistReg.getIdFdr()));    if (scrofic != null) {      ruleCtx.setOficina(scrofic.getId());    }    ruleCtx.setEntidad(entidad);    result=EventsFactory.getCurrentEvent(ruleCtx.getEventId()).execute(ruleCtx);  } catch (  EventException ee) {    log.error("Se ha producido un error durante la ejecucion del evento de aceptacion de la distribucion [" + scrDistReg.getId() + "]");    throw ee;  }catch (  SessionException e) {    throw e;  }catch (  Exception e) {    log.error("Impossible to launch event for externe distribution for the session [" + sessionID + "]",e);    throw new DistributionException(DistributionException.ERROR_CANNOT_ACCEPT_DISTRIBUTION);  }  return result;}  }
class C{  private static DimensionalNode generate(int d,int maxD,IMultiPoint points[],int left,int right){  if (right < left) {    return null;  }  if (right == left) {    return new OneHelperKDNode(d,points[left]);  }  int m=1 + (right - left) / 2;  Selection.select(points,m,left,right,comparators[d]);  OneHelperKDNode dm=new OneHelperKDNode(d,points[left + m - 1]);  if (++d > maxD) {    d=1;  }  dm.setBelow(generate(d,maxD,points,left,left + m - 2));  dm.setAbove(generate(d,maxD,points,left + m,right));  return dm;}  }
class C{  public void addUrl(View view){  if (mIsEditTextVisible) {    UiUtils.hideEditText(mUrlEditText);    mIsEditTextVisible=false;    int animRedId=R.anim.fab_rotate_backward;    mAddFab.startAnimation(AnimationUtils.loadAnimation(this,animRedId));    UiUtils.hideFab(mDownloadFab);  } else {    UiUtils.revealEditText(mUrlEditText);    mIsEditTextVisible=true;    mUrlEditText.requestFocus();    int animRedId=R.anim.fab_rotate_forward;    mAddFab.startAnimation(AnimationUtils.loadAnimation(this,animRedId));  }}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.GENERATOR_ENTRY;}  }
class C{  private static WebDoc createPage(WebSessionCtx wsc,WWindowStatus ws,String formName,String fieldName,String fieldValue,String locationValue){  WebDoc doc=WebDoc.create(true);  body body=doc.getBody();  log.info("Location-createpage: " + locationValue);  StringBuffer sb=new StringBuffer("FieldUpdate - ").append(FIELD_FORM).append("=").append(formName).append(", ").append(FIELD_NAME).append("=").append(fieldName).append(", ").append(FIELD_VALUE).append("=").append(fieldValue).append(LOCATION_VALUE).append("=").append(locationValue);  body.addElement(new p().addElement(sb.toString()));  if (formName == null || fieldName == null)   ; else   if (formName.equals("Login2") && fieldName.equals(WLogin.P_ROLE))   reply_Login2_Role(body,wsc,formName,fieldValue,locationValue); else   if (formName.equals("Login2") && fieldName.equals(WLogin.P_CLIENT))   reply_Login2_Client(body,wsc,formName,fieldValue,locationValue); else   if (formName.equals("Login2") && fieldName.equals(WLogin.P_ORG))   reply_Login2_Org(body,wsc,ws,formName,fieldValue,locationValue);  return doc;}  }
class C{  public void testTypeAsWrapper() throws Exception {  ObjectMapper m=new ObjectMapper();  m.getSerializationConfig().addMixInAnnotations(Animal.class,TypeWithWrapper.class);  Map<String,Object> result=writeAndMap(m,new Cat("Venla","black"));  assertEquals(1,result.size());  Map<?,?> cat=(Map<?,?>)result.get(".TestTypedSerialization$Cat");  assertNotNull(cat);  assertEquals(2,cat.size());  assertEquals("Venla",cat.get("name"));  assertEquals("black",cat.get("furColor"));}  }
class C{  protected void addDocumentListeners(){  domNodeInsertedListener=new DOMNodeInsertedListener();  domNodeRemovedListener=new DOMNodeRemovedListener();  domAttrModifiedListener=new DOMAttrModifiedListener();  AbstractDocument doc=(AbstractDocument)document;  XBLEventSupport es=(XBLEventSupport)doc.initializeEventSupport();  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",domNodeInsertedListener,false);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",domNodeRemovedListener,false);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",domAttrModifiedListener,false);}  }
class C{  public MaterialIcon(){  super("material-icons");}  }
class C{  public void add(E e){  if (size + 1 > queue.length) {    resize(size + 1);  }  this.size+=1;  heapifyUp(size - 1,e);  heapModified();}  }
class C{  public long duration(){  try {    return mCurrentMediaPlayer.getDuration();  } catch (  Throwable t) {    return -1;  }}  }
class C{  public GF2Polynomial gcd(GF2Polynomial g) throws RuntimeException {  if (isZero() && g.isZero()) {    throw new ArithmeticException("Both operands of gcd equal zero.");  }  if (isZero()) {    return new GF2Polynomial(g);  }  if (g.isZero()) {    return new GF2Polynomial(this);  }  GF2Polynomial a=new GF2Polynomial(this);  GF2Polynomial b=new GF2Polynomial(g);  GF2Polynomial c;  while (!b.isZero()) {    c=a.remainder(b);    a=b;    b=c;  }  return a;}  }
class C{  private Command processPacketInMessage(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  Match m=pi.getMatch();  OFPort inPort=(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT));  MacAddress sourceMac=m.get(MatchField.ETH_SRC);  MacAddress destMac=m.get(MatchField.ETH_DST);  OFVlanVidMatch vlan=m.get(MatchField.VLAN_VID);  if (sourceMac == null) {    sourceMac=MacAddress.NONE;  }  if (destMac == null) {    destMac=MacAddress.NONE;  }  if (vlan == null) {    vlan=OFVlanVidMatch.UNTAGGED;  }  if ((destMac.getLong() & 0xfffffffffff0L) == 0x0180c2000000L) {    if (log.isTraceEnabled()) {      log.trace("ignoring packet addressed to 802.1D/Q reserved addr: switch {} vlan {} dest MAC {}",new Object[]{sw,vlan,destMac.toString()});    }    return Command.STOP;  }  if ((sourceMac.getLong() & 0x010000000000L) == 0) {    this.addToPortMap(sw,sourceMac,vlan.getVlanVid(),inPort);  }  OFPort outPort=getFromPortMap(sw,destMac,vlan.getVlanVid());  if (outPort == null) {    this.writePacketOutForPacketIn(sw,pi,OFPort.FLOOD);  } else   if (outPort.equals(inPort)) {    log.trace("ignoring packet that arrived on same port as learned destination:" + " switch {} vlan {} dest MAC {} port {}",new Object[]{sw,vlan,destMac.toString(),outPort.getPortNumber()});  } else {    this.pushPacket(sw,m,pi,outPort);    this.writeFlowMod(sw,OFFlowModCommand.ADD,OFBufferId.NO_BUFFER,m,outPort);    if (LEARNING_SWITCH_REVERSE_FLOW) {      Match.Builder mb2=m.createBuilder();      mb2.setExact(MatchField.ETH_SRC,m.get(MatchField.ETH_DST)).setExact(MatchField.ETH_DST,m.get(MatchField.ETH_SRC)).setExact(MatchField.VLAN_VID,m.get(MatchField.VLAN_VID)).setExact(MatchField.ETH_TYPE,m.get(MatchField.ETH_TYPE)).setExact(MatchField.IPV4_SRC,m.get(MatchField.IPV4_DST)).setExact(MatchField.IPV4_DST,m.get(MatchField.IPV4_SRC));      if (m.get(MatchField.IP_PROTO).equals(IpProtocol.TCP)) {        mb2.setExact(MatchField.IP_PROTO,IpProtocol.TCP).setExact(MatchField.TCP_SRC,m.get(MatchField.TCP_DST)).setExact(MatchField.TCP_DST,m.get(MatchField.TCP_SRC));      } else       if (m.get(MatchField.IP_PROTO).equals(IpProtocol.UDP)) {        mb2.setExact(MatchField.IP_PROTO,IpProtocol.UDP).setExact(MatchField.UDP_SRC,m.get(MatchField.UDP_DST)).setExact(MatchField.UDP_DST,m.get(MatchField.UDP_SRC));      } else       if (m.get(MatchField.IP_PROTO).equals(IpProtocol.SCTP)) {        mb2.setExact(MatchField.IP_PROTO,IpProtocol.SCTP).setExact(MatchField.SCTP_SRC,m.get(MatchField.SCTP_DST)).setExact(MatchField.SCTP_DST,m.get(MatchField.SCTP_SRC));      } else {        log.debug("In writing reverse LS flow, could not determine L4 proto (was int " + m.get(MatchField.IP_PROTO).getIpProtocolNumber() + ")");      }      mb2.setExact(MatchField.IN_PORT,outPort);      this.writeFlowMod(sw,OFFlowModCommand.ADD,OFBufferId.NO_BUFFER,mb2.build(),inPort);    }  }  return Command.CONTINUE;}  }
class C{  public static ObjectInputStream newObjectInputStream(Path self) throws IOException {  return new ObjectInputStream(Files.newInputStream(self));}  }
class C{  @Override public void smoothScrollToPosition(int position){  int transformedPosition=transformInnerPositionIfNeed(position);  super.smoothScrollToPosition(transformedPosition);  Log.e("test","transformedPosition:" + transformedPosition);}  }
class C{  protected final void serialize(ObjectOutputStream oos,Collection<?> collection) throws IOException {  Object array[]=collection.toArray();  int serCount=0;  for (int i=0; i < array.length; i++) {    if (array[i] instanceof Serializable) {      serCount++;    }  }  oos.writeInt(serCount);  for (int i=0; i < array.length; i++) {    if (array[i] instanceof Serializable) {      oos.writeObject(array[i]);    }  }}  }
class C{  public TextReporter(OutputStream out,String title){  this.out=out;  this.title=title;}  }
class C{  public static void createAllTables(Database db,boolean ifNotExists){  UserDao.createTable(db,ifNotExists);}  }
class C{  public void execute(ChatScriptContext context){  try {    Interpreter interpeter=new Interpreter();    interpeter.set("context",context);    interpeter.eval("import raptor.chat.*;\n" + script);  } catch (  Throwable t) {    Raptor.getInstance().onError("Error executing script " + name,t);  }}  }
class C{  private static boolean compareLevenshtein(final String str1,final String str2,final int limit){  if (str1.equalsIgnoreCase(str2)) {    return true;  } else   if (limit < 1) {    return false;  } else {    final int dist=limitedLevenshtein(str1.toLowerCase(),str2.toLowerCase(),0,0,limit);    return dist <= limit;  }}  }
class C{  public String sqlObject_createPrimaryKey(String vendorName,String catalogName,String schemaName,String tableName,String keyName,boolean isDeferrable,boolean isDeferred,ArrayList<String> keyColumns){  keyName=normalizeIdentifier(vendorName,keyName);  return m_interfaces.get(getDBVendorID(vendorName)).sqlObject_createPrimaryKey(catalogName,schemaName,tableName,keyName,isDeferrable,isDeferred,keyColumns);}  }
class C{  public boolean isSendGroupDeliveryDisplayedReportsEnabled(){  return mRcsSettings.isImReportsActivated() && !mRcsSettings.isAlbatrosRelease() && mRcsSettings.isRespondToDisplayReports()&& mRcsSettings.isRequestAndRespondToGroupDisplayReportsEnabled();}  }
class C{  public void addTrackPoint(LatLong point){  int i=mapView.getLayerManager().getLayers().indexOf(polylineTrack);  ((Polyline)mapView.getLayerManager().getLayers().get(i)).getLatLongs().add(point);}  }
class C{  public void write(int b) throws java.io.IOException {  return;}  }
class C{  public Map<String,Object> convertDataToObjects(Map<String,String> data){  Map<String,Object> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      results.put(key,data.get(key));    }  }  return results;}  }
class C{  public void run(){synchronized (stopped) {    if (stopped.get()) {      queryThreads.clear();      return;    }    this.monitoringThread=Thread.currentThread();  }  try {    QueryThreadTask queryTask=null;    long sleepTime=0;    while (true) {      queryTask=(QueryThreadTask)queryThreads.peek();      if (queryTask == null) {synchronized (this.queryThreads) {          this.queryThreads.wait();        }        continue;      }      long currentTime=System.currentTimeMillis();      if ((currentTime - queryTask.StartTime) < this.maxQueryExecutionTime) {        sleepTime=this.maxQueryExecutionTime - (currentTime - queryTask.StartTime);        Thread.sleep(sleepTime);        continue;      }      boolean[] queryCompleted=((DefaultQuery)queryTask.query).getQueryCompletedForMonitoring();synchronized (queryCompleted) {        if (!queryCompleted[0]) {          ((DefaultQuery)queryTask.query).setCanceled(true,new QueryExecutionTimeoutException(LocalizedStrings.QueryMonitor_LONG_RUNNING_QUERY_CANCELED.toLocalizedString(GemFireCacheImpl.MAX_QUERY_EXECUTION_TIME)));          queryTask.queryExecutionStatus.set(Boolean.TRUE);          queryThreads.poll();        }      }      logger.info(LocalizedMessage.create(LocalizedStrings.GemFireCache_LONG_RUNNING_QUERY_EXECUTION_CANCELED,new Object[]{queryTask.query.getQueryString(),queryTask.queryThread.getId()}));      if (logger.isDebugEnabled()) {        logger.debug("Query Execution for the thread {} got canceled.",queryTask.queryThread);      }    }  } catch (  InterruptedException ex) {    if (logger.isDebugEnabled()) {      logger.debug("Query Monitoring thread got interrupted.");    }  } finally {    this.queryThreads.clear();  }}  }
class C{  public static boolean isDark(@NotNull final Color c){  return (1 - (0.299 * c.getRed() + 0.587 * c.getGreen() + 0.114 * c.getBlue()) / 255) >= 0.5;}  }
class C{  public void addURL(String url) throws ServiceNotFoundException {  try {    URL ur=new URL(url);    if (!Arrays.asList(getURLs()).contains(ur))     super.addURL(ur);  } catch (  MalformedURLException e) {    if (MLET_LOGGER.isLoggable(Level.FINEST)) {      MLET_LOGGER.logp(Level.FINEST,MLet.class.getName(),"addUrl","Malformed URL: " + url,e);    }    throw new ServiceNotFoundException("The specified URL is malformed");  }}  }
class C{  public void endArray() throws IOException {  expect(JsonToken.END_ARRAY);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TStructMember.class) {switch (derivedFeatureID) {case TypesPackage.TSTRUCT_METHOD__DEFINED_MEMBER:      return TypesPackage.TSTRUCT_MEMBER__DEFINED_MEMBER;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void close(){  try {synchronized (lock) {      if (out == null)       return;      out.close();      out=null;    }  } catch (  IOException x) {    trouble=true;  }}  }
class C{  private List<VolumeRestRep> filterByCopyName(List<VolumeRestRep> allCopyVols){  List<VolumeRestRep> filtered=new ArrayList<VolumeRestRep>();  if (allCopyVols != null) {    for (    VolumeRestRep vol : allCopyVols) {      if (vol != null && vol.getProtection() != null && vol.getProtection().getFullCopyRep() != null && copyName.equals(vol.getProtection().getFullCopyRep().getFullCopySetName())) {        filtered.add(vol);      }    }  }  return filtered;}  }
class C{  @Override public final void write(int b){  this.size++;}  }
class C{  public void writeExif(Bitmap bmap,String exifOutFileName) throws FileNotFoundException, IOException {  if (bmap == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    bmap.compress(Bitmap.CompressFormat.JPEG,90,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  protected CWritesDescription(){  super(new Color(212,105,255),"Highlights instructions that write to memory");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void firePublishStarted(){}  }
class C{  protected DateTimeConverter makeConverter(){  return new DateConverter();}  }
class C{  static final int nextSecondarySeed(){  int r;  if ((r=getThreadLocalRandomSecondarySeed()) != 0) {    r^=r << 13;    r^=r >>> 17;    r^=r << 5;  } else   if ((r=mix32(seeder.getAndAdd(SEEDER_INCREMENT))) == 0) {    r=1;  }  setThreadLocalRandomSecondarySeed(r);  return r;}  }
class C{  public ExpressionParser(Collection<String> parameters,RestrictionType type){  if (parameters == null) {    throw new NullPointerException("Parameters null.");  }  if (parameters.contains("$")) {    throw new IllegalArgumentException("Variable list must not " + "contain the wildcard '$'.");  }  this.restrictionParameters=new LinkedHashSet<>(parameters);  this.restrictionParameters.add("$");  this.parameters=new LinkedHashSet<>();  this.restrictionType=type;}  }
class C{  public Region(){  super(KEY);}  }
class C{  public void background(int rgb,float alpha){  g.background(rgb,alpha);}  }
class C{  public Builder addTokenFilter(String name,String... params) throws IOException {  return addTokenFilter(name,paramsToMap(params));}  }
class C{  public byte id(){  return id;}  }
class C{  public void complete(ICompilationUnit sourceUnit,int completionPosition,int pos){  this.requestor.beginReporting();  boolean contextAccepted=false;  try {    this.fileName=sourceUnit.getFileName();    this.actualCompletionPosition=completionPosition - 1;    this.offset=pos;    CompilationResult result=new CompilationResult(sourceUnit,1,1,this.compilerOptions.maxProblemsPerUnit);    CompilationUnitDeclaration parsedUnit=this.parser.dietParse(sourceUnit,result,this.actualCompletionPosition);    if (parsedUnit != null) {      if (parsedUnit.currentPackage instanceof CompletionOnPackageReference) {        contextAccepted=true;        buildContext(parsedUnit.currentPackage,null,parsedUnit,null,null);        if (!this.requestor.isIgnored(CompletionProposal.PACKAGE_REF)) {          findPackages((CompletionOnPackageReference)parsedUnit.currentPackage);        }        if (this.noProposal && this.problem != null) {          this.requestor.completionFailure(this.problem);        }        return;      }      ImportReference[] imports=parsedUnit.imports;      if (imports != null) {        for (int i=0, length=imports.length; i < length; i++) {          ImportReference importReference=imports[i];          if (importReference instanceof CompletionOnImportReference) {            this.lookupEnvironment.buildTypeBindings(parsedUnit,null);            if ((this.unitScope=parsedUnit.scope) != null) {              contextAccepted=true;              buildContext(importReference,null,parsedUnit,null,null);              long positions=importReference.sourcePositions[importReference.tokens.length - 1];              setSourceAndTokenRange((int)(positions >>> 32),(int)positions);              char[][] oldTokens=importReference.tokens;              int tokenCount=oldTokens.length;              if (tokenCount == 1) {                findImports((CompletionOnImportReference)importReference,true);              } else               if (tokenCount > 1) {                this.insideQualifiedReference=true;                char[] lastToken=oldTokens[tokenCount - 1];                char[][] qualifierTokens=CharOperation.subarray(oldTokens,0,tokenCount - 1);                Binding binding=this.unitScope.getTypeOrPackage(qualifierTokens);                if (binding != null) {                  if (binding instanceof PackageBinding) {                    findImports((CompletionOnImportReference)importReference,false);                  } else {                    ReferenceBinding ref=(ReferenceBinding)binding;                    if (!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {                      findImportsOfMemberTypes(lastToken,ref,importReference.isStatic());                    }                    if (importReference.isStatic()) {                      if (!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {                        findImportsOfStaticFields(lastToken,ref);                      }                      if (!this.requestor.isIgnored(CompletionProposal.METHOD_NAME_REFERENCE)) {                        findImportsOfStaticMethods(lastToken,ref);                      }                    }                  }                }              }              if (this.noProposal && this.problem != null) {                this.requestor.completionFailure(this.problem);              }            }            return;          } else           if (importReference instanceof CompletionOnKeyword) {            contextAccepted=true;            buildContext(importReference,null,parsedUnit,null,null);            if (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {              setSourceAndTokenRange(importReference.sourceStart,importReference.sourceEnd);              CompletionOnKeyword keyword=(CompletionOnKeyword)importReference;              findKeywords(keyword.getToken(),keyword.getPossibleKeywords(),false,false);            }            if (this.noProposal && this.problem != null) {              this.requestor.completionFailure(this.problem);            }            return;          }        }      }      if (parsedUnit.types != null) {        try {          this.lookupEnvironment.buildTypeBindings(parsedUnit,null);          if ((this.unitScope=parsedUnit.scope) != null) {            this.source=sourceUnit.getContents();            this.lookupEnvironment.completeTypeBindings(parsedUnit,true);            parsedUnit.scope.faultInTypes();            parseBlockStatements(parsedUnit,this.actualCompletionPosition);            parsedUnit.resolve();          }        } catch (        CompletionNodeFound e) {          if (e.astNode != null) {            this.lookupEnvironment.unitBeingCompleted=parsedUnit;            contextAccepted=complete(e.astNode,this.parser.assistNodeParent,this.parser.enclosingNode,parsedUnit,e.qualifiedBinding,e.scope,e.insideTypeAnnotation);          }        }      }    }    if (this.noProposal && this.problem != null) {      if (!contextAccepted) {        contextAccepted=true;        InternalCompletionContext context=new InternalCompletionContext();        context.setOffset(completionPosition - this.offset);        context.setTokenKind(CompletionContext.TOKEN_KIND_UNKNOWN);        if (this.requestor.isExtendedContextRequired())         context.setExtended();        this.requestor.acceptContext(context);      }      this.requestor.completionFailure(this.problem);    }  } catch (  IndexOutOfBoundsException e) {  }catch (  InvalidCursorLocation e) {  }catch (  AbortCompilation e) {  }catch (  CompletionNodeFound e) {  } finally {    if (!contextAccepted) {      contextAccepted=true;      InternalCompletionContext context=new InternalCompletionContext();      context.setTokenKind(CompletionContext.TOKEN_KIND_UNKNOWN);      context.setOffset(completionPosition - this.offset);      if (this.requestor.isExtendedContextRequired())       context.setExtended();      this.requestor.acceptContext(context);    }    this.requestor.endReporting();    reset();  }}  }
class C{  public Builder map(String fullyQualifiedColumnNames,String mapperClassName){  return map(fullyQualifiedColumnNames,mapperClassName,null);}  }
class C{  public static void nodesToPath(PathDataNode[] node,Path path){  float[] current=new float[6];  char previousCommand='m';  for (int i=0; i < node.length; i++) {    addCommand(path,current,previousCommand,node[i].mType,node[i].mParams);    previousCommand=node[i].mType;  }}  }
class C{  Object parameterConstraint(int n){  return parameter(n).constraint;}  }
class C{  @Override public boolean isParallel(){  return inner.isParallel();}  }
class C{  @Override public CheckResult check(){  try {    post(new byte[]{'[',']'});    return CheckResult.OK;  } catch (  Exception e) {    return CheckResult.failed(e);  }}  }
class C{  final boolean isShared(){  return nextWaiter == SHARED;}  }
class C{  public void removeAttribute(String name) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);}  }
class C{  protected void pendingTableSources(TableGroupJoinNode leafTable,TableGroupJoinNode rootTable,List<TableSource> tableSources){  TableGroupJoinNode table=leafTable;  while (true) {    if (isPending(table)) {      clearPending(table);      tableSources.add(table.getTable());    }    if (table == rootTable)     break;    table=table.getParent();  }  Collections.reverse(tableSources);}  }
class C{  public static boolean shuffle(Object[] objArray){  if (objArray == null) {    return false;  }  return shuffle(objArray,getRandom(objArray.length));}  }
class C{  public Vector product(Matrix a) throws IllegalDimension {  int n=a.rows();  int m=a.columns();  if (this.dimension() != n)   throw new IllegalDimension("Product error: transposed of a " + this.dimension() + "-dimension vector cannot be multiplied with a "+ n+ " by "+ m+ " matrix");  return secureProduct(a);}  }
class C{  public static void e(Exception exception){  if (sIsLogEnabled) {    Log.e(sApplicationTag,getContent(getCurrentStackTraceElement()) + "\n>" + exception.getMessage());    exception.printStackTrace();  }}  }
class C{  public CompanyPrivilegeObject(int id){  this.id=id;}  }
class C{  protected DoubleMatrix2D like2D(int rows,int columns,int rowZero,int columnZero,int rowStride,int columnStride){  throw new InternalError();}  }
class C{  @EventHandler public void onPlayerChangeTeam(PlayerContainerChangeStateEvent event){  Player player=event.getPlayer();  MatchThread newThread=event.getNewData().getMatchThread();  if (newThread != null && newThread.getCurrentMatch().isRunning()) {    Match match=newThread.getCurrentMatch();    if (event.getNewData().getPlaying() != null) {      Spawn spawn=ListUtil.getRandom(getSpawns(match,event.getNewData().getPlaying()));      Bukkit.getPluginManager().callEvent(new CardinalRespawnEvent(player,spawn));    } else {      Bukkit.getPluginManager().callEvent(new CardinalRespawnEvent(player,getDefaultSpawn(match)));    }  }}  }
class C{  public UnresolvedFontFamily(GVTFontFace fontFace){  this.fontFace=fontFace;}  }
class C{  @Override public IStriterator exclude(Object object){  return addFilter(new ExclusionFilter(object));}  }
class C{  public void onScreenshot(View view){  takeSnapshot();}  }
class C{  public void notifyItemsSwapped(int positionOne,int positionTwo){  int lowerPosition=positionOne < positionTwo ? positionOne : positionTwo;  int upperPosition=positionOne > positionTwo ? positionOne : positionTwo;  notifyItemMoved(lowerPosition,upperPosition);  notifyItemMoved(upperPosition - 1,lowerPosition);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.048 -0500",hash_original_method="EF04E7E51A80342C344C8D19A9D97259",hash_generated_method="D719B9A16FA27CBCE051E6C690CA6ED2") public static void fill(boolean[] array,boolean value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public _QueuedBuildUpdate(final _QueuedBuildUpdate_Flag[] flags){  super(flags);}  }
class C{  public void removePaintListener(PaintListener pl){  m_painters.remove(pl);}  }
class C{  public void run(){  Database db=inputStep.getDatabase();  hier=db.getHierarchy();  algorithmStep.runAlgorithms(db);  hier.add(db,new SettingsResult(settings));  evaluationStep.runEvaluators(hier,db);  outputStep.runResultHandlers(hier,db);}  }
class C{  private void changeAffiliationByAdmin(String jid,String affiliation,String reason) throws XMPPException {  MUCAdmin iq=new MUCAdmin();  iq.setTo(room);  iq.setType(IQ.Type.SET);  MUCAdmin.Item item=new MUCAdmin.Item(affiliation,null);  item.setJid(jid);  if (reason != null)   item.setReason(reason);  iq.addItem(item);  PacketFilter responseFilter=new PacketIDFilter(iq.getPacketID());  PacketCollector response=connection.createPacketCollector(responseFilter);  connection.sendPacket(iq);  IQ answer=(IQ)response.nextResult(SmackConfiguration.getPacketReplyTimeout());  response.cancel();  if (answer == null) {    throw new XMPPException("No response from server.");  } else   if (answer.getError() != null) {    throw new XMPPException(answer.getError());  }}  }
class C{  public static int codePointAt(CharSequence seq,int index){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length();  if (index < 0 || index >= len) {    throw new IndexOutOfBoundsException();  }  char high=seq.charAt(index++);  if (index >= len) {    return high;  }  char low=seq.charAt(index);  if (isSurrogatePair(high,low)) {    return toCodePoint(high,low);  }  return high;}  }
class C{  public RegExp(int type){  this.type=type;}  }
class C{  public static Metrics isBoring(CharSequence text,TextPaint paint,Metrics metrics){  return isBoring(text,paint,TextDirectionHeuristics.FIRSTSTRONG_LTR,metrics);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (  E e : this)   s.writeObject(e);  s.writeObject(null);}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);}  }
class C{  public TrayNotification(){  initTrayNotification("","",NotificationType.CUSTOM);}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new JSONArray().put(value));  } else   if (object instanceof JSONArray) {    this.put(key,((JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  public static <K,V>BiMap<K,V> constrainedBiMap(BiMap<K,V> map,MapConstraint<? super K,? super V> constraint){  return new ConstrainedBiMap<K,V>(map,null,constraint);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void translateSpoiledKey(byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {  SecretKey key1=getMyOwnSecretKey(salt);  ((MyPBKDF2SecretKey)key1).spoil();  SecretKeyFactory skf=SecretKeyFactory.getInstance(algoForTest);  try {    skf.translateKey(key1);    throw new RuntimeException("translateSpoiledKey test case failed, should throw" + " InvalidKeyException when spoil the key");  } catch (  InvalidKeyException ike) {    out.println("Expected exception when spoil the key");  }}  }
class C{  @Override public String generateLabel(CategoryDataset dataset,int row,int column){  String key=(String)dataset.getColumnKey(column);  return itemLabels.get(key);}  }
class C{  private boolean checkForExistingStorageViews(VPlexApiClient client,Map<String,String> targetPortToPwwnMap,Map<String,String> initiatorWwnToNameMap,StorageSystem vplexSystem,String vplexCluster,List<Initiator> inits,ExportGroup exportGroup,URI varrayUri,Map<URI,Integer> blockObjectMap,List<ExportMask> exportMasksToUpdateOnDevice,Map<URI,List<Initiator>> exportMasksToUpdateOnDeviceWithInitiators,Map<URI,List<URI>> exportMasksToUpdateOnDeviceWithStoragePorts,String opId) throws Exception {  boolean foundMatchingStorageView=false;  List<String> initiatorNames=new ArrayList<String>();  for (  Initiator initiator : inits) {    String portWwn=initiator.getInitiatorPort();    String initiatorName=initiatorWwnToNameMap.get(WWNUtility.getUpperWWNWithNoColons(portWwn));    if (initiatorName != null) {      initiatorNames.add(initiatorName);    }  }  long start=new Date().getTime();  List<VPlexStorageViewInfo> storageViewInfos=client.getStorageViewsContainingInitiators(vplexCluster,initiatorNames);  long elapsed=new Date().getTime() - start;  _log.info("TIMER: finding storage views containing initiators took {} ms",elapsed);  if (storageViewInfos.size() > 1) {    List<String> names=new ArrayList<String>();    for (    VPlexStorageViewInfo info : storageViewInfos) {      names.add(info.getName());    }    throw VPlexApiException.exceptions.tooManyExistingStorageViewsFound(Joiner.on(", ").join(names),Joiner.on(", ").join(initiatorNames));  } else   if (storageViewInfos.size() == 1) {    _log.info("a matching storage view was found on the VPLEX device, so ViPR will import it.");    VPlexStorageViewInfo storageView=storageViewInfos.get(0);    foundMatchingStorageView=true;    List<String> storagePorts=storageView.getPorts();    if (storagePorts != null && storagePorts.isEmpty()) {      _log.warn("No storage ports were found in the existing storage view {}, cannot reuse.",storageView.getName());      return false;    }    List<String> portWwns=new ArrayList<String>();    for (    String storagePort : storagePorts) {      if (targetPortToPwwnMap.keySet().contains(storagePort)) {        portWwns.add(WwnUtils.convertWWN(targetPortToPwwnMap.get(storagePort),WwnUtils.FORMAT.COLON));      }    }    List<String> storagePortURIs=ExportUtils.storagePortNamesToURIs(_dbClient,portWwns);    _log.info("this storage view contains storage port URIs: " + storagePortURIs);    if (storagePortURIs == null || storagePortURIs.isEmpty()) {      _log.warn("No storage ports managed by ViPR were found in the existing storage view {}, cannot reuse",storageView.getName());      return false;    }    List<String> initiatorPorts=storageView.getInitiatorPwwns();    Map<String,Initiator> matchingInitiators=new HashMap<String,Initiator>();    for (    Initiator init : inits) {      String port=init.getInitiatorPort();      String normalizedName=Initiator.normalizePort(port);      _log.info("   looking at initiator " + normalizedName + " host "+ VPlexUtil.getInitiatorHostResourceName(init));      if (initiatorPorts.contains(normalizedName)) {        _log.info("      found a matching initiator for " + normalizedName + " host "+ VPlexUtil.getInitiatorHostResourceName(init)+ " in storage view "+ storageView.getName());        matchingInitiators.put(normalizedName,init);      }    }    ExportMask exportMask=new ExportMask();    exportMask.setMaskName(storageView.getName());    exportMask.setStorageDevice(vplexSystem.getId());    exportMask.setId(URIUtil.createId(ExportMask.class));    exportMask.setCreatedBySystem(false);    List<Initiator> initsToAdd=new ArrayList<Initiator>();    for (    Initiator init : inits) {      exportMask.addInitiator(init);      String normalInit=Initiator.normalizePort(init.getInitiatorPort());      if (!storageView.getInitiatorPwwns().contains(normalInit)) {        initsToAdd.add(init);        exportMask.addToUserCreatedInitiators(init);      }    }    exportMask.setStoragePorts(storagePortURIs);    exportMask.addToExistingVolumesIfAbsent(storageView.getWwnToHluMap());    exportMask.addToExistingInitiatorsIfAbsent(initiatorPorts);    _networkDeviceController.updateZoningMap(exportGroup,exportMask,false);    _dbClient.createObject(exportMask);    if (!initsToAdd.isEmpty()) {      ExportPathParams pathParams=_blockScheduler.calculateExportPathParamForVolumes(blockObjectMap.keySet(),exportGroup.getNumPaths(),vplexSystem.getId(),exportGroup.getId());      Map<URI,List<URI>> assignments=_blockScheduler.assignStoragePorts(vplexSystem,exportGroup,initsToAdd,exportMask.getZoningMap(),pathParams,null,_networkDeviceController,varrayUri,opId);      if (assignments != null && !assignments.isEmpty()) {        exportMask=ExportUtils.updateZoningMap(_dbClient,exportMask,assignments,exportMasksToUpdateOnDeviceWithStoragePorts);      }    }    exportMasksToUpdateOnDevice.add(exportMask);    exportGroup.addExportMask(exportMask.getId());    _dbClient.updateObject(exportGroup);    exportMasksToUpdateOnDeviceWithInitiators.put(exportMask.getId(),initsToAdd);    exportMasksToUpdateOnDeviceWithStoragePorts.put(exportMask.getId(),null);  }  return foundMatchingStorageView;}  }
class C{  public static Vector padLeft(Collection doubles,String pattern){  return padLeft(formatDecimal(doubles,pattern));}  }
class C{  public void verifyBracketContentWhitespace(ParserRuleContext ctx,String construct){  Token openingParenthesis=ParseTreeUtil.getStopTokenForNode(ctx.getChild(0));  Token closingParenthesis=ParseTreeUtil.getStopTokenForNode(ctx.getChild(ctx.getChildCount() - 1));  Location openingParenthesisLoc=ListenerUtil.getTokenLocation(openingParenthesis);  if (ctx.getChildCount() == 2) {    if (checkLeftSpaces(openingParenthesis,closingParenthesis,0)) {      printer.error(rule,Messages.EMPTY + construct.toLowerCase() + Messages.ILLEGAL_WHITESPACE,new Location(openingParenthesisLoc.line,openingParenthesisLoc.column + 1));    }    return;  }  Token contentStart=ParseTreeUtil.getStartTokenForNode(ctx.getChild(1));  Token contentEnd=ParseTreeUtil.getStopTokenForNode(ctx.getChild(ctx.getChildCount() - 2));  if (checkLeftSpaces(openingParenthesis,contentStart,0)) {    printer.error(rule,construct + Messages.CONTENT + Messages.LEADING_WHITESPACE,new Location(openingParenthesisLoc.line,openingParenthesisLoc.column + 1));  }  if (checkRightSpaces(closingParenthesis,contentEnd,0)) {    Location contentStopLocation=ListenerUtil.getTokenEndLocation(contentEnd);    printer.error(rule,construct + Messages.CONTENT + Messages.NOT_END_SPACE,contentStopLocation);  }}  }
class C{  public double eval(double params[]){  double p1=params[0];  double p2=params[1];  double p3=params[2];  double p4=params[3];  return (p1 <= p2) ? p3 : p4;}  }
class C{  public void multiplyByScalar(float scalar){  this.points[0]*=scalar;  this.points[1]*=scalar;  this.points[2]*=scalar;}  }
class C{  public static void removeStatusFromTree(IFile module,LevelNode root){  try {    IDocument document=ResourceHelper.getDocFromFile(module);    int beginLine=root.getLocation().beginLine() - 1;    int endLine=root.getLocation().endLine() - 1;    if (root instanceof TheoremNode && ((TheoremNode)root).getProof() != null) {      endLine=((TheoremNode)root).getProof().getLocation().endLine() - 1;    }    int treeBeginChar=document.getLineOffset(beginLine);    int treeEndChar=document.getLineOffset(endLine) + document.getLineLength(endLine);    IMarker[] markers=module.findMarkers(STEP_STATUS_MARKER,true,IResource.DEPTH_ZERO);    for (int i=0; i < markers.length; i++) {      IMarker oldMarker=markers[i];      int markerStartChar=oldMarker.getAttribute(IMarker.CHAR_START,-1);      int markerEndChar=oldMarker.getAttribute(IMarker.CHAR_END,-1);      if (markerStartChar >= treeBeginChar && markerEndChar <= treeEndChar) {        oldMarker.delete();      } else       if (markerStartChar < treeBeginChar && markerEndChar >= treeBeginChar && markerEndChar <= treeEndChar) {        IMarker newMarker=module.createMarker(oldMarker.getType());        newMarker.setAttribute(IMarker.CHAR_START,markerStartChar);        newMarker.setAttribute(IMarker.CHAR_END,treeBeginChar - 1);        oldMarker.delete();      } else       if (markerStartChar < treeBeginChar && markerEndChar > treeEndChar) {        IMarker beforeMarker=module.createMarker(oldMarker.getType());        beforeMarker.setAttribute(IMarker.CHAR_START,markerStartChar);        beforeMarker.setAttribute(IMarker.CHAR_END,treeBeginChar - 1);        IMarker afterMarker=module.createMarker(oldMarker.getType());        afterMarker.setAttribute(IMarker.CHAR_START,treeEndChar + 1);        afterMarker.setAttribute(IMarker.CHAR_END,markerEndChar);        oldMarker.delete();      } else       if (markerStartChar >= treeBeginChar && markerStartChar <= treeEndChar && markerEndChar > treeEndChar) {        IMarker newMarker=module.createMarker(oldMarker.getType());        newMarker.setAttribute(IMarker.CHAR_START,treeEndChar + 1);        newMarker.setAttribute(IMarker.CHAR_END,markerEndChar);        oldMarker.delete();      }    }  } catch (  CoreException e) {    ProverUIActivator.getDefault().logError("Error removing status markers from tree rooted at " + root,e);  }catch (  BadLocationException e) {    ProverUIActivator.getDefault().logError("Error removing status markers from tree rooted at " + root,e);  }}  }
class C{  private static boolean isNumber(char c){  return c >= '1' && c <= '9';}  }
class C{  private static void saveEvents(final CConnection connection,final TraceList trace) throws CouldntSaveDataException {  final String queryPrefix="INSERT INTO " + CTableNames.TRACE_EVENT_TABLE + "(trace_id, position, tid, module_id, address, type) VALUES";  final StringBuilder stringBuilder=new StringBuilder(queryPrefix);  int position=0;  for (  final ITraceEvent traceEvent : trace) {    final String moduleString=traceEvent.getOffset().getModule() == null ? "null" : String.valueOf(traceEvent.getOffset().getModule().getConfiguration().getId());    stringBuilder.append(String.format(Locale.ENGLISH,"(%d, %d, %d, %s, %s, %d)",trace.getId(),position,traceEvent.getThreadId(),moduleString,traceEvent.getOffset().getAddress().getAddress().toBigInteger().toString(),1));    ++position;    if (trace.getEventCount() > position) {      stringBuilder.append(", ");    }  }  try {    final PreparedStatement prep=connection.getConnection().prepareStatement(stringBuilder.toString());    try {      prep.execute();    } catch (    final SQLException exception) {      throw new CouldntSaveDataException(exception);    } finally {      prep.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  @Override public void seriesChanged(SeriesChangeEvent event){  this.lastEvent=event;}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  public static final JIPClause create(final JIPFunctor head,final JIPCons body){  if (body == null)   return new JIPClause((Functor)head.getTerm()); else   return new JIPClause((Functor)head.getTerm(),(ConsCell)body.getTerm());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public PackagePermissionCollection(){  permissions=new Hashtable();  all_allowed=false;}  }
class C{  private void key(byte key[]){  int i;  int koffp[]={0};  int lr[]={0,0};  int plen=P.length, slen=S.length;  for (i=0; i < plen; i++)   P[i]=P[i] ^ streamtoword(key,koffp);  for (i=0; i < plen; i+=2) {    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  public void grow(double amount){  x-=amount;  y-=amount;  width+=2 * amount;  height+=2 * amount;}  }
class C{  public Boolean isLive(){  return getType().equals(OddObject.TYPE_LIVE_STREAM);}  }
class C{  public synchronized void put(final CacheKey key,final EncodedImage encodedImage){  Preconditions.checkNotNull(key);  Preconditions.checkArgument(EncodedImage.isValid(encodedImage));  final EncodedImage oldEntry=mMap.put(key,EncodedImage.cloneOrNull(encodedImage));  EncodedImage.closeSafely(oldEntry);  logStats();}  }
class C{  public static Test suite(){  TestSuite suite=new TestSuite();  suite.addTestSuite(org.ice4j.pseudotcp.util.ByteFifoBufferTest.class);  suite.addTestSuite(org.ice4j.pseudotcp.PseudoTcpTestTransfer.class);  suite.addTestSuite(org.ice4j.pseudotcp.PseudoTcpTestPingPong.class);  suite.addTestSuite(org.ice4j.pseudotcp.PseudoTcpTestRecvWindow.class);  suite.addTestSuite(org.ice4j.pseudotcp.PseudoTcpStreamTest.class);  return suite;}  }
class C{  @Override public SoftwarePIDController withGains(double p,double i,double d,double feedForward){synchronized (this) {    withProfile(currentProfile,p,i,d,feedForward);  }  return this;}  }
class C{  public static RoundedBitmapDrawable fromBitmapDrawable(Resources res,BitmapDrawable bitmapDrawable){  return new RoundedBitmapDrawable(res,bitmapDrawable.getBitmap());}  }
class C{  public void rotate(PointF p1,PointF p2,float angle){  float px=p1.x;  float py=p1.y;  float ox=p2.x;  float oy=p2.y;  p1.x=(FloatMath.cos(angle) * (px - ox) - FloatMath.sin(angle) * (py - oy) + ox);  p1.y=(FloatMath.sin(angle) * (px - ox) + FloatMath.cos(angle) * (py - oy) + oy);}  }
class C{  public static void tournament(GameController c,int numGames){  int xWins=0;  int oWins=0;  int draws=0;  for (int i=0; i < numGames; i++) {    c.reset();    if (showGraphicalOutput) {      System.out.println("Game " + i);      System.out.println("----------------------------------");    }    while (true) {      int rc=c.playTurn();      if (showGraphicalOutput) {        System.out.println(c.boardState() + "\n");      }      if (rc == GameController.IN_PROGRESS) {        continue;      }switch (rc) {case GameController.X_WINS:        xWins++;      break;case GameController.O_WINS:    oWins++;  break;case GameController.DRAW:draws++;break;}break;}}System.out.println("Statistics [" + new java.util.Date() + "]");System.out.println("(xWins:" + xWins + ", oWins:"+ oWins+ ", draws:"+ draws);}  }
class C{  public void copy(EditSession editSession){  for (int x=0; x < size.getBlockX(); ++x) {    for (int y=0; y < size.getBlockY(); ++y) {      for (int z=0; z < size.getBlockZ(); ++z) {        setBlock(x,y,z,editSession.getBlock(new Vector(x,y,z).add(getOrigin())));      }    }  }}  }
class C{  public void reconfigureChartCanvas(){}  }
class C{  private boolean handleSuddenJump(MotionEvent me){  final int action=me.getAction();  final int x=(int)me.getX();  final int y=(int)me.getY();  boolean result=false;  if (me.getPointerCount() > 1) {    mDisableDisambiguation=true;  }  if (mDisableDisambiguation) {    if (action == MotionEvent.ACTION_UP)     mDisableDisambiguation=false;    return false;  }switch (action) {case MotionEvent.ACTION_DOWN:    mDroppingEvents=false;  mDisableDisambiguation=false;break;case MotionEvent.ACTION_MOVE:final int distanceSquare=(mLastX - x) * (mLastX - x) + (mLastY - y) * (mLastY - y);if (distanceSquare > mJumpThresholdSquare && (mLastY < mLastRowY || y < mLastRowY)) {if (!mDroppingEvents) {mDroppingEvents=true;MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_UP,mLastX,mLastY,me.getMetaState());super.onTouchEvent(translated);translated.recycle();}result=true;} else if (mDroppingEvents) {result=true;}break;case MotionEvent.ACTION_UP:if (mDroppingEvents) {MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_DOWN,x,y,me.getMetaState());super.onTouchEvent(translated);translated.recycle();mDroppingEvents=false;}break;}mLastX=x;mLastY=y;return result;}  }
class C{  public static long fieldsToDay(int year,int month,int dom){  int y=year - 1;  long julian=365 * y + floorDivide(y,4) + (JULIAN_1_CE - 3) + floorDivide(y,400) - floorDivide(y,100) + 2 + DAYS_BEFORE[month + (isLeapYear(year) ? 12 : 0)] + dom;  return julian - JULIAN_1970_CE;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,Object[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    Object item=array[i];    if (i > 0) {      buffer.append(arraySeparator);    }    if (item == null) {      appendNullText(buffer,fieldName);    } else {      appendInternal(buffer,fieldName,item,arrayContentDetail);    }  }  buffer.append(arrayEnd);}  }
class C{  public void testClientKeepAlive() throws Throwable {  createServers(3);  CopycatClient client=createClient();  Thread.sleep(Duration.ofSeconds(10).toMillis());  threadAssertTrue(client.state() == CopycatClient.State.CONNECTED);}  }
class C{  public SpannableBuilder span(Object resource,int flag){  sb.setSpan(resource,lastAddedOffset,sb.length(),flag);  return this;}  }
class C{  @Override void removeFinalCertFromPath(LinkedList<X509Certificate> certPathList){  certPathList.removeFirst();}  }
class C{  public TransformObjectivePower(BBOBFunction function,double exponent){  super(function);  this.exponent=exponent;}  }
class C{  public XMLOptions(File file) throws Exception {  this();  getXMLDocument().read(file);}  }
class C{  public JmriJFrame(String name,boolean saveSize,boolean savePosition){  this(saveSize,savePosition);  setTitle(name);  generateWindowRef();  if (this.getClass().getName().equals(JmriJFrame.class.getName())) {    if ((this.getTitle() == null) || (this.getTitle().equals(""))) {      return;    }  }  setFrameLocation();}  }
class C{  @SuppressWarnings("unchecked") protected final T_State transitTo(final Class<? extends T_State> stateClass,final int entryPoint){  if (isStateEngine()) {    final T_State currentState=getCurrentState();    if (currentState != null) {      if (currentState.getClass().equals(stateClass)) {        onError(currentState,Error.ERROR_STATE_REENTERED);        return currentState;      }    }    T_State newState=getState(stateClass);    setCurrentState(newState);    if (currentState != null && !newState.isSuperState(currentState)) {      currentState.exit(newState);    }    return (T_State)newState.enter(entryPoint);  } else {    return (T_State)getStateEngine().transitTo(stateClass,entryPoint);  }}  }
class C{  protected void IdKeyPattern() throws javax.xml.transform.TransformerException {  FunctionCall();}  }
class C{  public MutableFloat(){  super();}  }
class C{  public static boolean exists(Model model){  return model != null && SP.NS.equals(model.getNsPrefixURI(SP.PREFIX)) && model.contains(SP.Query,RDF.type,(RDFNode)null);}  }
class C{  private void doRestore(){  view.setOriginalTraceShown(true);  view.updateErrorView();}  }
class C{  public int countUsers() throws UsersRepositoryException {  try {    final Session session=login();    try {      final Node rootNode=session.getRootNode();      try {        final Node node=rootNode.getNode(USERS_PATH);        NodeIterator it=node.getNodes();        return (int)it.getSize();      } catch (      PathNotFoundException e) {        return 0;      }    }  finally {      session.logout();    }  } catch (  RepositoryException e) {    if (getLogger().isInfoEnabled()) {      getLogger().info("Failed to count user",e);    }    throw new UsersRepositoryException("Failed to count user",e);  }}  }
class C{  @Override public String toString(){  return ToStringBuilder.reflectionToString(this,ToStringStyle.SHORT_PREFIX_STYLE);}  }
class C{  private void discoverEsxHost(Host host,HostStateChange changes){  EsxVersion esxVersion=getVersion(host);  if (null != esxVersion && getVersionValidator().isValidEsxVersion(esxVersion)) {    discoverHost(host,changes);    processHostChanges(changes);    matchHostsToComputeElements(host.getId());  } else {    host.setCompatibilityStatus(CompatibilityStatus.INCOMPATIBLE.name());    save(host);    throw ComputeSystemControllerException.exceptions.incompatibleHostVersion("Esx",esxVersion.toString(),getVersionValidator().getEsxMinimumVersion(false).toString());  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:17.806 -0500",hash_original_method="8645B529D351D3837595463E8D8CA061",hash_generated_method="36B01B2A1409B1CA07BD439ECEEB1973") @Override public void send(HandshakeIODataStream out){  if (signedHash.length != 0) {    out.writeUint16(signedHash.length);    out.write(signedHash);  }}  }
class C{  private static File updateFileWithTestSuffix(String id) throws IOException {  File fileMetadata=new File();  fileMetadata.setTitle("drivetest-" + UPLOAD_FILE.getName());  Drive.Files.Update update=drive.files().update(id,fileMetadata);  return update.execute();}  }
class C{  public void execute() throws SQLException {  prepare();  setProperties(ps);  decodeParams(getParams(),ps);  rs=ps.executeQuery();  notifyRowSetChanged();}  }
class C{  public static void recycleNodes(Collection<AccessibilityNodeInfoCompat> nodes){  if (nodes == null) {    return;  }  for (  AccessibilityNodeInfoCompat node : nodes) {    if (node != null) {      node.recycle();    }  }  nodes.clear();}  }
class C{  public String globalInfo(){  return "Designate an incoming data set as a training set.";}  }
class C{  public static boolean isPlayerInGroup(String otherPlayer){  if (groupMembers == null) {    return false;  }  return groupMembers.contains(otherPlayer);}  }
class C{  public ScatterSplitConfiguration(){}  }
class C{  public static boolean isIgfsNode(ClusterNode node,String igfsName){  assert node != null;  IgfsAttributes[] igfs=node.attribute(ATTR_IGFS);  if (igfs != null)   for (  IgfsAttributes attrs : igfs)   if (F.eq(igfsName,attrs.igfsName()))   return true;  return false;}  }
class C{  RequestIDSequence(){  nextRequestID=new AtomicLong(generateInitialValue());}  }
class C{  public final double addAndGet(double delta){  while (true) {    double orig=get();    double newVal=orig + delta;    if (compareAndSet(orig,newVal))     return newVal;  }}  }
class C{  public static String middle(String source,int startIndex,int length){  return source.substring(startIndex,source.length() - length);}  }
class C{  public VectorLayerPlot(Plot p,double[][] v){  super("Vector of " + p.name,p);  if (v != null) {    PArray.checkRowDimension(v,p.getData().length);    PArray.checkColumnDimension(v,p.getData()[0].length);  }  V=v;}  }
class C{  public float loadFloat(){  return SimulatedMemory.getFloat(this);}  }
class C{  public void addSeries(MatrixSeries series){  ParamChecks.nullNotPermitted(series,"series");  this.seriesList.add(series);  series.addChangeListener(this);  fireDatasetChanged();}  }
class C{  @Override public DriverTask restoreFromClone(List<VolumeClone> list){  return cloneHelper.restoreFromClone(list);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("=================== EditRate =====================\n");  sb.append(String.format("numerator = %d, denominator = %d%n",this.numerator,this.denominator));  return sb.toString();}  }
class C{  public List<RelationTableCellLabelProvider> initToolTips(RelationViewLabelProvider relationViewLabelProvider,Composite parent){  List<RelationTableCellLabelProvider> relTblCellLabelProv=new ArrayList<RelationTableCellLabelProvider>();  RelationTableCellLabelProvider relTableCellProviderCol1=new RelationTableCellLabelProvider(relationViewLabelProvider,parent,0);  relTblCellLabelProv.add(relTableCellProviderCol1);  col1.setLabelProvider(relTableCellProviderCol1);  RelationTableCellLabelProvider relTableCellProviderCol3=new RelationTableCellLabelProvider(relationViewLabelProvider,parent,2);  relTblCellLabelProv.add(relTableCellProviderCol3);  col3.setLabelProvider(relTableCellProviderCol3);  RelationTableCellLabelProvider relTableCellProviderCol4=new RelationTableCellLabelProvider(relationViewLabelProvider,parent,3);  relTblCellLabelProv.add(relTableCellProviderCol4);  col4.setLabelProvider(relTableCellProviderCol4);  return relTblCellLabelProv;}  }
class C{  public void printBlock(List<? extends JCTree> stats) throws IOException {  print("{");  println();  indent();  printStats(stats);  undent();  align();  print("}");}  }
class C{  public static RequestInfo fromJson(String json) throws CorruptQueueException {  JsonObject rawRequest;  try {    rawRequest=(JsonObject)new JsonParser().parse(json);  } catch (  ClassCastException e) {    throw new CorruptQueueException("Json string '" + json + "' cannot be parsed into RequestInfo.");  }  JsonObject rawSender=rawRequest.getAsJsonObject("sender");  ClientId sender=ClientId.create(JsonUtils.getStringPropertyValue(rawSender,"xRoadInstance"),JsonUtils.getStringPropertyValue(rawSender,"memberClass"),JsonUtils.getStringPropertyValue(rawSender,"memberCode"),JsonUtils.getStringPropertyValue(rawSender,"subsystemCode"));  JsonObject rawService=rawRequest.getAsJsonObject("service");  ServiceId service=createServiceId(rawService);  RequestInfo result=new RequestInfo(JsonUtils.getIntPropertyValue(rawRequest,"orderNo"),JsonUtils.getStringPropertyValue(rawRequest,"id"),JsonUtils.getDatePropertyValue(rawRequest,"receivedTime"),JsonUtils.getDatePropertyValue(rawRequest,"removedTime"),sender,JsonUtils.getStringPropertyValue(rawRequest,"user"),service);  result.sending=JsonUtils.getBooleanPropertyValue(rawRequest,"sending");  return result;}  }
class C{  public static void removeWorkspaceOrFolderItem(Launcher launcher,ItemInfo item,View view){  launcher.removeItem(view,item,true);  launcher.getWorkspace().stripEmptyScreens();  launcher.getDragLayer().announceForAccessibility(launcher.getString(R.string.item_removed));}  }
class C{  protected void fillI2A2Info(InstructorEditForm frm,HttpServletRequest request) throws Exception {  String login=frm.getCareerAcct();  if (login != null && login.trim().length() > 0 && frm.getLookupEnabled()) {    UserInfo results=lookupInstructor(frm);    if (results != null) {      frm.setPuId(results.getExternalId());      frm.setCareerAcct(results.getUserName());      frm.setFname(results.getFirstName());      frm.setMname(results.getMiddleName());      frm.setLname(results.getLastName());      frm.setEmail(results.getEmail());      frm.setTitle(results.getAcademicTitle());    }  }}  }
class C{  private Solution parseSolution(String line){  String[] entries=line.trim().split("\\s+");  Solution solution=null;  if (entries.length < problem.getNumberOfObjectives()) {    error=true;    return null;  }  try {    if (entries.length == (problem.getNumberOfVariables() + problem.getNumberOfObjectives())) {      solution=problem.newSolution();      for (int i=0; i < problem.getNumberOfVariables(); i++) {        solution.setVariable(i,decode(solution.getVariable(i),entries[i]));      }    } else {      solution=new Solution(0,problem.getNumberOfObjectives());    }    for (int i=0; i < problem.getNumberOfObjectives(); i++) {      solution.setObjective(i,Double.parseDouble(entries[entries.length - problem.getNumberOfObjectives() + i]));    }  } catch (  Exception e) {    e.printStackTrace();    error=true;    return null;  }  return solution;}  }
class C{  static void accept(final AnnotationVisitor av,final String name,final Object value){  if (av != null) {    if (value instanceof String[]) {      String[] typeconst=(String[])value;      av.visitEnum(name,typeconst[0],typeconst[1]);    } else     if (value instanceof AnnotationNode) {      AnnotationNode an=(AnnotationNode)value;      an.accept(av.visitAnnotation(name,an.desc));    } else     if (value instanceof List) {      AnnotationVisitor v=av.visitArray(name);      List<?> array=(List<?>)value;      for (int j=0; j < array.size(); ++j) {        accept(v,null,array.get(j));      }      v.visitEnd();    } else {      av.visit(name,value);    }  }}  }
class C{  public void registerFix(@NotNull IntentionAction fix){  registerFix(fix,null);}  }
class C{  public IgnoreSystemGC(){  super(Options.set,"Ignore System GC","Should we ignore calls to java.lang.System.gc?",false);}  }
class C{  public void removeArea(final Section AREA){  if (null == AREA)   return;  areas.remove(AREA);  Collections.sort(areas,new SectionComparator());  fireUpdateEvent(SECTION_EVENT);}  }
class C{  public Boolean isHostLocalPort(){  return hostLocalPort;}  }
class C{  private String requestedFields(String fl,Set<String> schema){  if (fl == null || fl.isEmpty()) {    return null;  }  if (fl.indexOf('-') == -1 && fl.indexOf('+') == -1) {    return fl + ChronixQueryParams.JOIN_SEPARATOR + String.join(ChronixQueryParams.JOIN_SEPARATOR,REQUIRED_FIELDS);  } else {    Set<String> fields=new HashSet<>(Arrays.asList(fl.split(ChronixQueryParams.JOIN_SEPARATOR)));    Set<String> resultingFields=new HashSet<>(schema);    if (fl.contains(ChronixQueryParams.DATA_AS_JSON)) {      resultingFields.add(ChronixQueryParams.DATA_AS_JSON);    }    for (    String field : fields) {      if (field.indexOf('-') > -1) {        resultingFields.remove(field.substring(1));      }    }    return String.join(ChronixQueryParams.JOIN_SEPARATOR,resultingFields);  }}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>(2);  newVector.addElement("measureTreeSize");  newVector.addElement("measureNumLeaves");  return newVector.elements();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public void release(){synchronized (this) {    holder=null;    this.notifyAll();  }}  }
class C{  public static final boolean isSmeDeliveryAndManualAckRequested(byte registeredDelivery){  return isSmeAck(registeredDelivery,SMPPConstant.REGDEL_SME_DELIVERY_MANUAL_ACK_REQUESTED);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof BNetwork) {    return (nodes.keySet().equals(((BNetwork)o).getNodeIds()));  }  return false;}  }
class C{  public void process(Trace trace,Node node,Direction direction,Map<String,?> headers,Object... values){  if (log.isLoggable(Level.FINEST)) {    log.finest("ProcessManager: process trace=" + trace + " node="+ node+ " direction="+ direction+ " headers="+ headers+ " values="+ values+ " : available processors="+ processors);  }  if (trace.getBusinessTransaction() != null) {    List<ProcessorWrapper> procs=null;synchronized (processors) {      procs=processors.get(trace.getBusinessTransaction());    }    if (log.isLoggable(Level.FINEST)) {      log.finest("ProcessManager: trace name=" + trace.getBusinessTransaction() + " processors="+ procs);    }    if (procs != null) {      for (int i=0; i < procs.size(); i++) {        procs.get(i).process(trace,node,direction,headers,values);      }    }  }}  }
class C{  public static CompletionSuggestionBuilder completionSuggestion(String name){  return new CompletionSuggestionBuilder(name);}  }
class C{  protected boolean hasMethod(T model,String method,int params){  requireNonNull(model);  requireNonNull(method);  requireNonNull(params);  Method found=null;  for (  Method m : model.getMethods()) {    if (method.equals(m.getName()) && m.getFields().size() == params) {      found=m;      break;    }  }  return found != null;}  }
class C{  @Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  DefaultHandler current=getCurrentHandler();  if (current != this) {    current.startElement(namespaceURI,localName,qName,atts);  } else   if (qName.equals(CATEGORYDATASET_TAG)) {    this.dataset=new DefaultCategoryDataset();  } else   if (qName.equals(SERIES_TAG)) {    CategorySeriesHandler subhandler=new CategorySeriesHandler(this);    getSubHandlers().push(subhandler);    subhandler.startElement(namespaceURI,localName,qName,atts);  } else {    throw new SAXException("Element not recognised: " + qName);  }}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.TRACE_BEGIN_RUN_CYCLE;}  }
class C{  private void ps(String s,boolean line){  if (!on) {    return;  }  if (line) {    if (pw == null) {      System.out.println(s);    } else {      pw.println(s);    }  } else {    if (pw == null) {      System.out.print(s);    } else {      pw.print(s);    }  }}  }
class C{  @Override protected void doAction(){  try {    KeyStore openedKeyStore=KeyStoreUtil.loadMsCapiStore(MsCapiStoreType.PERSONAL);    kseFrame.addKeyStore(openedKeyStore,res.getString("OpenMsCapiAction.TabTitle"),null,null);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  public GF2nPolynomialField(int deg,boolean file){  if (deg < 3) {    throw new IllegalArgumentException("k must be at least 3");  }  mDegree=deg;  if (file) {    computeFieldPolynomial();  } else {    computeFieldPolynomial2();  }  computeSquaringMatrix();  fields=new Vector();  matrices=new Vector();}  }
class C{  public Geometry createSineStar(){  Envelope env=dim.getEnvelope();  double radius=env.getWidth() / 2.0;  double armRatio=armLengthRatio;  if (armRatio < 0.0)   armRatio=0.0;  if (armRatio > 1.0)   armRatio=1.0;  double armMaxLen=armRatio * radius;  double insideRadius=(1 - armRatio) * radius;  double centreX=env.getMinX() + radius;  double centreY=env.getMinY() + radius;  Coordinate[] pts=new Coordinate[nPts + 1];  int iPt=0;  for (int i=0; i < nPts; i++) {    double ptArcFrac=(i / (double)nPts) * numArms;    double armAngFrac=ptArcFrac - Math.floor(ptArcFrac);    double armAng=2 * Math.PI * armAngFrac;    double armLenFrac=(Math.cos(armAng) + 1.0) / 2.0;    double curveRadius=insideRadius + armMaxLen * armLenFrac;    double ang=i * (2 * Math.PI / nPts);    double x=curveRadius * Math.cos(ang) + centreX;    double y=curveRadius * Math.sin(ang) + centreY;    pts[iPt++]=coord(x,y);  }  pts[iPt]=new Coordinate(pts[0]);  LinearRing ring=geomFact.createLinearRing(pts);  Polygon poly=geomFact.createPolygon(ring,null);  return poly;}  }
class C{  public boolean booleanResults(final ConnectOptions opts,final UUID queryId,final IPreparedQueryListener listener) throws Exception {  JettyResponseListener response=null;  Boolean result=null;  try {    response=doConnect(opts);    checkResponseCode(response);    final String contentType=response.getContentType();    final MiniMime mimeType=new MiniMime(contentType);    final BooleanQueryResultFormat format=BooleanQueryResultFormat.forMIMEType(mimeType.getMimeType());    if (format == null)     throw new IOException("Could not identify format for service response: serviceURI=" + opts.getBestRequestURL() + ", contentType="+ contentType+ " : response="+ response.getResponseBody());    final BooleanQueryResultParserFactory factory=BooleanQueryResultParserRegistry.getInstance().get(format);    if (factory == null)     throw new RuntimeException("No factory for Content-Type: " + contentType);    final BooleanQueryResultParser parser=factory.getParser();    final InputStream is=response.getInputStream();    try {      result=parser.parse(is);      return result;    }  finally {      is.close();    }  }  finally {    if (result == null) {      if (response != null) {        response.abort();      }      try {        cancel(queryId);      } catch (      Exception ex) {        log.warn(ex);      }    }    if (listener != null) {      listener.closed(queryId);    }  }}  }
class C{  public static ValueDate convertDate(Date x,Calendar calendar){  if (calendar == null) {    throw DbException.getInvalidValueException("calendar",null);  }  Calendar cal=(Calendar)calendar.clone();  cal.setTimeInMillis(x.getTime());  long dateValue=dateValueFromCalendar(cal);  return ValueDate.fromDateValue(dateValue);}  }
class C{  public City(String value){  this();  setValue(value);}  }
class C{  public String mapMethodName(String owner,String name,String desc){  return name;}  }
class C{  void save(){}  }
class C{  private MethodSpec createReadMethod(ClassName baseElement,ClassName concreteElement,Map<String,MandatoryFieldInfo> mandatoryInfoMap,GsonObject rootElements) throws ProcessingException {  List<GsonField> flattenedFields=new GsonObjectTreeFactory().getFlattenedFieldsFromGsonObject(rootElements);  MethodSpec.Builder readMethod=MethodSpec.methodBuilder("read").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(baseElement).addParameter(JsonReader.class,"in").addException(IOException.class);  CodeBlock.Builder codeBlock=CodeBlock.builder();  boolean createModelAtBeginning=baseElement.equals(concreteElement);  AdapterObjectParserCallback objectParserCallback=new AdapterObjectParserCallback(codeBlock,mandatoryInfoMap,concreteElement,flattenedFields,createModelAtBeginning);  adapterGeneratorDelegate.addGsonAdapterReadCode(codeBlock,rootElements,createModelAtBeginning,annotationValidator,objectParserCallback);  if (mandatoryInfoMap.size() > 0) {    codeBlock.add("\n// Mandatory object validation\n");    codeBlock.beginControlFlow("for (int mandatoryFieldIndex = 0; " + "mandatoryFieldIndex < MANDATORY_FIELDS_SIZE; mandatoryFieldIndex++)");    codeBlock.add("\n// Check if a mandatory value is missing.\n");    codeBlock.beginControlFlow("if (!mandatoryFieldsCheckList[mandatoryFieldIndex])");    codeBlock.add("\n// Find the field name of the missing json value.\n");    codeBlock.addStatement("String fieldName = null");    codeBlock.beginControlFlow("switch (mandatoryFieldIndex)");    for (    String mandatoryKey : mandatoryInfoMap.keySet()) {      MandatoryFieldInfo mandatoryFieldInfo=mandatoryInfoMap.get(mandatoryKey);      codeBlock.add("case $L:\n",mandatoryFieldInfo.indexVariableName);      codeBlock.indent();      codeBlock.addStatement("fieldName = \"$L\"",mandatoryFieldInfo.gsonField.jsonPath);      codeBlock.addStatement("break");      codeBlock.unindent();      codeBlock.add("\n");    }    codeBlock.endControlFlow();    codeBlock.addStatement("throw new gsonpath.JsonFieldMissingException(\"Mandatory JSON " + "element '\" + fieldName + \"' was not found for class '$L'\")",concreteElement);    codeBlock.endControlFlow();    codeBlock.endControlFlow();  }  if (createModelAtBeginning) {    codeBlock.addStatement("return result");  } else {    CodeBlock.Builder returnCodeBlock=CodeBlock.builder();    returnCodeBlock.add("return new $T(\n",concreteElement);    returnCodeBlock.indent();    for (int i=0; i < flattenedFields.size(); i++) {      returnCodeBlock.add(flattenedFields.get(i).getVariableName());      if (i < flattenedFields.size() - 1) {        returnCodeBlock.add(",");      }      returnCodeBlock.add("\n");    }    returnCodeBlock.unindent();    returnCodeBlock.add(");\n");    codeBlock.add(returnCodeBlock.build());  }  readMethod.addCode(codeBlock.build());  return readMethod.build();}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  public void parse(InputSource source) throws SAXException {  newNGCCRuntime().parseEntity(source,false,null,null);}  }
class C{  public static ConditionOperand BORROW_FROM_SUB(){  return new ConditionOperand(BORROW_FROM_SUB);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Wedge(){  this.setUpGeometryCache();}  }
class C{  private Base64(){}  }
class C{  public static final BodyFixture show(Window owner){  AddConvexHullFixtureDialog dialog=new AddConvexHullFixtureDialog(owner);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    Convex convex=dialog.pnlPolygon.getShape();    BodyFixture fixture=dialog.fixture;    Vector2 tx=dialog.pnlTransform.getTranslation();    double a=dialog.pnlTransform.getRotation();    if (!tx.isZero()) {      convex.translate(tx);    }    if (a != 0.0) {      convex.rotateAboutCenter(a);    }    BodyFixture newFixture=new BodyFixture(convex);    newFixture.setUserData(fixture.getUserData());    newFixture.setDensity(fixture.getDensity());    newFixture.setFilter(fixture.getFilter());    newFixture.setFriction(fixture.getFriction());    newFixture.setRestitution(fixture.getRestitution());    newFixture.setSensor(fixture.isSensor());synchronized (AddConvexFixtureDialog.class) {      AddConvexFixtureDialog.N++;    }    return newFixture;  }  return null;}  }
class C{  static public SerialTrafficController instance(){  if (self == null) {    if (log.isDebugEnabled()) {      log.debug("creating a new SerialTrafficController object");    }    self=new SerialTrafficController();  }  return self;}  }
class C{  public void dumpHeader(PrintStream ps){  this.iter=iterator();  while (this.iter.hasNext()) {    ps.println(this.iter.next());  }}  }
class C{  public void swap(final Type prev,final Type type){  if (type.getSize() == 1) {    if (prev.getSize() == 1) {      swap();    } else {      dupX2();      pop();    }  } else {    if (prev.getSize() == 1) {      dup2X1();      pop2();    } else {      dup2X2();      pop2();    }  }}  }
class C{  @HLEFunction(nid=0x81AEE1BE,version=150) public int sceNetAdhocctlGetScanInfo(TPointer32 sizeAddr,@CanBeNull TPointer buf){  checkInitialized();  final int scanInfoSize=28;  int size=sizeAddr.getValue();  sizeAddr.setValue(scanInfoSize * networks.size());  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetAdhocctlGetScanInfo returning size=%d",sizeAddr.getValue()));  }  if (buf.isNotNull()) {    int offset=0;    for (    AdhocctlNetwork network : networks) {      if (offset + scanInfoSize > size || network == null) {        break;      }      if (log.isDebugEnabled()) {        log.debug(String.format("sceNetAdhocctlGetScanInfo returning %s at 0x%08X",network,buf.getAddress() + offset));      }      offset+=4;      buf.setValue32(offset,network.channel);      offset+=4;      buf.setStringNZ(offset,GROUP_NAME_LENGTH,network.name);      offset+=GROUP_NAME_LENGTH;      buf.setStringNZ(offset,IBSS_NAME_LENGTH,network.bssid);      offset+=IBSS_NAME_LENGTH;      buf.setValue16(offset,(short)0);      offset+=2;      buf.setValue32(offset,network.mode);      offset+=4;    }    fillNextPointersInLinkedList(buf,offset,scanInfoSize);  }  return 0;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 168) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Command(description="Create dummy public key certificate") public void dummyCert(@Param(name="keyId",description="Key ID") String keyId,@Param(name="cn",description="Common name") String cn) throws Exception {  Calendar cal=GregorianCalendar.getInstance();  cal.add(Calendar.YEAR,-1);  Date notBefore=cal.getTime();  cal.add(Calendar.YEAR,2);  Date notAfter=cal.getTime();  ClientId memberId=ClientId.create("FOO","BAR","BAZ");  GenerateSelfSignedCert request=new GenerateSelfSignedCert(keyId,cn,notBefore,notAfter,KeyUsageInfo.SIGNING,memberId);  GenerateSelfSignedCertResponse response=SignerClient.execute(request);  X509Certificate cert=readCertificate(response.getCertificateBytes());  System.out.println("Certificate base64:");  System.out.println(encodeBase64(cert.getEncoded()));  bytesToFile(keyId + ".crt",cert.getEncoded());  base64ToFile(keyId + ".crt.b64",cert.getEncoded());}  }
class C{  public ParseException(final Throwable cause){  super(cause);}  }
class C{  public AuthenticationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public final void requestSequenceDet(boolean value) throws GSSException {  if (state == STATE_NEW && isInitiator())   sequenceDetState=value;}  }
class C{  public static String replaceSubstring(String inString,String subString,String replaceString){  StringBuffer result=new StringBuffer();  int oldLoc=0, loc=0;  while ((loc=inString.indexOf(subString,oldLoc)) != -1) {    result.append(inString.substring(oldLoc,loc));    result.append(replaceString);    oldLoc=loc + subString.length();  }  result.append(inString.substring(oldLoc));  return result.toString();}  }
class C{  public void contentTag(String tag,String name,String value,String content){  spacing();  m_out.print('<');  m_out.print(tag);  m_out.print(' ');  m_out.print(name);  m_out.print('=');  m_out.print('\"');  escapeString(value);  m_out.print('\"');  m_out.print('>');  escapeString(content);  m_out.print('<');  m_out.print('/');  m_out.print(tag);  m_out.print('>');  println();}  }
class C{  private boolean questInProgress(final Player player){  if (player.getQuest(QUEST_SLOT) != null) {    return !player.getQuest(QUEST_SLOT,0).equals("done");  }  return false;}  }
class C{  private static byte[] encode(double latitude,double longitude){  byte[] bytes=new byte[2 * Integer.BYTES];  NumericUtils.intToSortableBytes(encodeLatitude(latitude),bytes,0);  NumericUtils.intToSortableBytes(encodeLongitude(longitude),bytes,Integer.BYTES);  return bytes;}  }
class C{  static final public int parseInt(byte what){  return what & 0xff;}  }
class C{  private void fixAfterInsertion(Entry x){  x.color=RED;  while (x != null && x != root && x.parent.color == RED) {    if (parentOf(x) == leftOf(parentOf(parentOf(x)))) {      Entry y=rightOf(parentOf(parentOf(x)));      if (colorOf(y) == RED) {        setColor(parentOf(x),BLACK);        setColor(y,BLACK);        setColor(parentOf(parentOf(x)),RED);        x=parentOf(parentOf(x));      } else {        if (x == rightOf(parentOf(x))) {          x=parentOf(x);          rotateLeft(x);        }        setColor(parentOf(x),BLACK);        setColor(parentOf(parentOf(x)),RED);        if (parentOf(parentOf(x)) != null)         rotateRight(parentOf(parentOf(x)));      }    } else {      Entry y=leftOf(parentOf(parentOf(x)));      if (colorOf(y) == RED) {        setColor(parentOf(x),BLACK);        setColor(y,BLACK);        setColor(parentOf(parentOf(x)),RED);        x=parentOf(parentOf(x));      } else {        if (x == leftOf(parentOf(x))) {          x=parentOf(x);          rotateRight(x);        }        setColor(parentOf(x),BLACK);        setColor(parentOf(parentOf(x)),RED);        if (parentOf(parentOf(x)) != null)         rotateLeft(parentOf(parentOf(x)));      }    }  }  root.color=BLACK;}  }
class C{  public Builder measurementMappings(Map<String,String> measurementMappings){  Map<String,Pattern> mappingsByPattern=new HashMap<String,Pattern>();  for (  Map.Entry<String,String> entry : measurementMappings.entrySet()) {    try {      final Pattern pattern=Pattern.compile(entry.getValue());      mappingsByPattern.put(entry.getKey(),pattern);    } catch (    PatternSyntaxException e) {      throw new RuntimeException("Could not compile regex: " + entry.getValue(),e);    }  }  this.measurementMappings=mappingsByPattern;  return this;}  }
class C{  public ExecutionTargetException(){  super();}  }
class C{  public boolean forEachValue(TLongProcedure procedure){  Object[] keys=_set;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public boolean last() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    boolean b=true;    if (this.rowData.size() == 0) {      b=false;    } else {      if (this.onInsertRow) {        this.onInsertRow=false;      }      if (this.doingUpdates) {        this.doingUpdates=false;      }      if (this.thisRow != null) {        this.thisRow.closeOpenStreams();      }      this.rowData.beforeLast();      this.thisRow=this.rowData.next();    }    setRowPositionValidity();    return b;  }}  }
class C{  public boolean isDistributed(){  return this != LOCAL;}  }
class C{  private CCodeNode extractNode(final ICodeNodeProvider dataset) throws ParserException, CPartialLoadException {  if (currentNode == null) {    currentNode=createCurrentNode(dataset);  }  final CCodeNode nodeInProcess=currentNode;  while ((currentLine=extractLine(dataset)) != null) {    if (currentLine.getBasicBlock() == currentNode.getId()) {      addInstruction(currentNode,currentLine);    } else {      currentNode=new CCodeNode(currentLine.getBasicBlock(),currentLine.getX(),currentLine.getY(),currentLine.getWidth(),currentLine.getHeight(),currentLine.getColor(),currentLine.getBorderColor(),currentLine.isSelected(),currentLine.isVisible(),null,currentLine.getParentFunction(),new HashSet<CTag>(),sqlProvider);      addInstruction(currentNode,currentLine);      return nodeInProcess;    }  }  currentNode=null;  return nodeInProcess;}  }
class C{  public static <I extends ScoreIter>XYCurve materializeROC(Predicate<? super I> predicate,I iter){  int poscnt=0, negcnt=0;  XYCurve curve=new XYCurve("False Positive Rate","True Positive Rate");  curve.add(0.0,0.0);  while (iter.valid()) {    do {      if (predicate.test(iter)) {        ++poscnt;      } else {        ++negcnt;      }      iter.advance();    } while (iter.valid() && iter.tiedToPrevious());    curve.addAndSimplify(negcnt,poscnt);  }  curve.addAndSimplify(negcnt,poscnt);  curve.rescale(1. / negcnt,1. / poscnt);  return curve;}  }
class C{  public void testCase13(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=1;  byte rBytes[]={-2,-3,-4,-5,-16,-27,-38,-42,-53,-64,-75,-16,-27,-37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public static int compareAndroidVersion(String version1,String version2){  String[] vals1=version1.split("\\.");  String[] vals2=version2.split("\\.");  int i=0;  while (i < vals1.length && i < vals2.length && vals1[i].equals(vals2[i])) {    i++;  }  if (i < vals1.length && i < vals2.length) {    int diff=Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));    return Integer.signum(diff);  } else {    return Integer.signum(vals1.length - vals2.length);  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {default :    return null;}}  }
class C{  public boolean generatedKeyAlwaysReturned(){  return true;}  }
class C{  public final void testCertificate() throws Exception {  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  assertTrue(Arrays.equals(testEncoding,c1.getEncoded()));  assertEquals("TEST",c1.getPublicKey().getAlgorithm());  assertTrue(Arrays.equals(new byte[]{(byte)1,(byte)2,(byte)3},c1.getPublicKey().getEncoded()));  assertEquals("TEST_FORMAT",c1.getPublicKey().getFormat());  assertEquals("TEST_TYPE",c1.getType());}  }
class C{  protected final static byte composeSpecificFeatures(byte esmClass,byte specificFeaturesValue){  return (byte)(cleanSpecificFeatures(esmClass) | specificFeaturesValue);}  }
class C{  static void registerService(BundleContext bundleContext,org.h2.Driver driver){  Properties properties=new Properties();  properties.put(DataSourceFactory.OSGI_JDBC_DRIVER_CLASS,org.h2.Driver.class.getName());  properties.put(DataSourceFactory.OSGI_JDBC_DRIVER_NAME,"H2 JDBC Driver");  properties.put(DataSourceFactory.OSGI_JDBC_DRIVER_VERSION,Constants.getFullVersion());  bundleContext.registerService(DataSourceFactory.class.getName(),new OsgiDataSourceFactory(driver),properties);}  }
class C{  public static void fill(short[] array,int start,int end,short value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public static void ccDrawCircle(GL10 gl,CGPoint center,float r,float a,int segments,boolean drawLineToCenter){  FloatBuffer vertices=getVertices(2 * (segments + 2));  int additionalSegment=1;  if (drawLineToCenter)   additionalSegment++;  final float coef=2.0f * (float)Math.PI / segments;  for (int i=0; i <= segments; i++) {    float rads=i * coef;    float j=(float)(r * Math.cos(rads + a) + center.x);    float k=(float)(r * Math.sin(rads + a) + center.y);    vertices.put(j);    vertices.put(k);  }  vertices.put(center.x);  vertices.put(center.y);  vertices.position(0);  gl.glDisable(GL_TEXTURE_2D);  gl.glDisableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glDisableClientState(GL_COLOR_ARRAY);  gl.glVertexPointer(2,GL_FLOAT,0,vertices);  gl.glDrawArrays(GL_LINE_STRIP,0,segments + additionalSegment);  gl.glEnableClientState(GL_COLOR_ARRAY);  gl.glEnableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glEnable(GL_TEXTURE_2D);}  }
class C{  public void subscribe(String clientHandle,String[] topicFilters,int[] qos,String invocationContext,String activityToken,IMqttMessageListener[] messageListeners){  MqttConnection client=getConnection(clientHandle);  client.subscribe(topicFilters,qos,invocationContext,activityToken,messageListeners);}  }
class C{  public TimeTableXYDataset(TimeZone zone){  this(zone,Locale.getDefault());}  }
class C{  static void importPrefs(InputStream in) throws IOException, InvalidPreferencesFormatException {  try {    Document doc=builder.parse(new InputSource(in));    Element preferences;    preferences=doc.getDocumentElement();    String version=preferences.getAttribute("EXTERNAL_XML_VERSION");    if (version != null && Float.parseFloat(version) > XML_VERSION) {      throw new InvalidPreferencesFormatException("Preferences version " + version + " is not supported");    }    Element root=(Element)preferences.getElementsByTagName("root").item(0);    Preferences prefsRoot=null;    String type=root.getAttribute("type");    if (type.equals("user")) {      prefsRoot=Preferences.userRoot();    } else {      prefsRoot=Preferences.systemRoot();    }    loadNode(prefsRoot,root);  } catch (  FactoryConfigurationError e) {    throw new InvalidPreferencesFormatException(e);  }catch (  SAXException e) {    throw new InvalidPreferencesFormatException(e);  }}  }
class C{  public boolean isLinkCacheable(){  KMLLink link=this.getLinkOrUrl();  return link != null && !KMLConstants.ON_INTERVAL.equalsIgnoreCase(link.getRefreshMode()) && !KMLConstants.ON_EXPIRE.equalsIgnoreCase(link.getRefreshMode()) && !KMLConstants.ON_STOP.equalsIgnoreCase(link.getViewRefreshMode());}  }
class C{  public JsonSchema generateJsonSchema(Class<?> t) throws JsonMappingException {  return generateJsonSchema(t,copySerializationConfig());}  }
class C{  public void onGainHasChanged(float volume){  float gain=(float)Math.min(Math.max(0.5 * Math.log10((double)volume * 2.5) + 1,0),1);  scale.cancel();  this.gain=gain;  setAlpha(MAX_ALPHA);  scale.setInterpolator(new Back.EaseOut(2 * gain + 1));  scale.start();  animate().alpha(MIN_ALPHA).setDuration(duration).setStartDelay(DEFAULT_ALPHA_DELAY).setInterpolator(new Quart.EaseOut()).start();}  }
class C{  private static RetainFragment findOrCreateRetainFragment(FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commitAllowingStateLoss();  }  return mRetainFragment;}  }
class C{  public static Properties parsePropertyList(String list) throws PropertyStringFormatException {  return parsePropertyList(list,propertySeparators,keyValueSeparators);}  }
class C{  @Override public void release() throws ReplicatorException, InterruptedException {  if (commitSeqno != null) {    commitSeqno.reduceTasks();    commitSeqno.release();    commitSeqno=null;  }}  }
class C{  private void bindShowingTracks(){  showingTracks=FXCollections.observableArrayList(musicottTracks.entrySet());  showingTracksProperty=new SimpleListProperty<>(this,"showing tracks");  showingTracksProperty.bind(new SimpleObjectProperty<>(showingTracks));}  }
class C{  private boolean canScrollInAllDirection(){  return mTransformedImageBounds.left < mViewBounds.left - EPS && mTransformedImageBounds.top < mViewBounds.top - EPS && mTransformedImageBounds.right > mViewBounds.right + EPS && mTransformedImageBounds.bottom > mViewBounds.bottom + EPS;}  }
class C{  public static IClassFile createClassFileFrom(IFile file,IJavaProject project){  if (file == null) {    return null;  }  if (project == null) {    project=JavaCore.create(file.getProject());  }  IPackageFragment pkg=(IPackageFragment)determineIfOnClasspath(file,(JavaProject)project);  if (pkg == null) {    PackageFragmentRoot root=(PackageFragmentRoot)project.getPackageFragmentRoot(file.getParent());    pkg=root.getPackageFragment(CharOperation.NO_STRINGS);  }  return pkg.getClassFile(file.getName());}  }
class C{  public boolean canAbandon(ReviewDb db) throws OrmException {  return (isOwner() || getRefControl().isOwner() || getProjectControl().isOwner()|| getUser().getCapabilities().canAdministrateServer()|| getRefControl().canAbandon()) && !isPatchSetLocked(db);}  }
class C{  @Override public double evaluate(Recommendation<U,I> recommendation){  U user=recommendation.getUser();  IdealRelevanceModel.UserIdealRelevanceModel<U,I> userRelModel=relModel.getModel(user);  int numberOfAllRelevant=relModel.getModel(user).getRelevantItems().size();  if (numberOfAllRelevant == 0) {    return 0.0;  }  return recommendation.getItems().stream().limit(cutoff).map(null).filter(null).count() / (double)numberOfAllRelevant;}  }
class C{  protected void appendFieldStart(StringBuffer buffer,String fieldName){  if (useFieldNames && fieldName != null) {    buffer.append(fieldName);    buffer.append(fieldNameValueSeparator);  }}  }
class C{  private void handleModifySubscription(TriggerProcess process,LocalizerFacade facade) throws IOException, WSDLException, ParserConfigurationException {  INotificationServiceAdapter serviceClient=getServiceClient(process.getTriggerDefinition());  VOTriggerProcess vo=TriggerProcessAssembler.toVOTriggerProcess(process,facade);  VOSubscription subscription=getParamValue(process.getParamValueForName(TriggerProcessParameterName.SUBSCRIPTION),VOSubscription.class);  List<VOParameter> modifiedParameters=ParameterizedTypes.list(getParamValue(process.getParamValueForName(TriggerProcessParameterName.PARAMETERS),List.class),VOParameter.class);  serviceClient.onModifySubscription(VOConverter.convertToApi(vo),VOConverter.convertToApi(subscription),VOCollectionConverter.convertList(modifiedParameters,org.oscm.vo.VOParameter.class));  updateProcessState(process);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @SuppressWarnings({"rawtypes"}) public boolean checkSlotsAndSizesUnordered(@Nonnull IInventory inv,@Nonnull List filter,int[] from){  assert filter.size() == from.length;  final int[] slots=findItemSlots(inv,filter,from);  for (  int i : slots) {    if (i < 0)     return false;  }  return true;}  }
class C{  final public MutableString append(final int i){  return append(String.valueOf(i));}  }
class C{  void recalcUi(){  if (calculatedUi) {    comps=null;    calculatedUi=false;  }}  }
class C{  public static JMenu leftShift(JMenu self,JMenuItem item){  self.add(item);  return self;}  }
class C{  @Override public Void visitDeclared(AnnotatedDeclaredType declaredType,Void aVoid){  if (pause) {    return null;  }  parents.push(declaredType);  super.visitDeclared(declaredType,aVoid);  parents.pop();  return null;}  }
class C{  public static NodeType serializableInstance(){  return NodeType.MEASURED;}  }
class C{  protected void sendMessage(String handler,List<?> arguments){  ownerMessage.addEvent(Type.CLIENT_SEND_MESSAGE,handler,arguments);  syncEvents.add(new SharedObjectEvent(Type.CLIENT_SEND_MESSAGE,handler,arguments));  sendStats.incrementAndGet();}  }
class C{  public void clearResultSlot(){  resultSlot=NO_SUCH_SLOT;}  }
class C{  public SignalGroupTableAction(String s){  super(s);  if (jmri.InstanceManager.getNullableDefault(jmri.SignalGroupManager.class) == null) {    setEnabled(false);  }}  }
class C{  public Parameter defaultBase(){  return GEPDefaults.base().push(P_GEPPROBLEM);}  }
class C{  private ImmutableList<Tok> buildToks(String text) throws FormatterException {  try {    ImmutableList<Tok> toks=buildToks(text,ImmutableSet.<Integer>of());    kN=getLast(toks).getIndex();    computeRanges(toks);    return toks;  } catch (  InvalidInputException e) {    return ImmutableList.of();  }}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  bias[0]=Position.Bias.Forward;  Rectangle alloc=a.getBounds();  Document doc=getDocument();  int x=(int)fx;  int y=(int)fy;  if (y < alloc.y) {    return getStartOffset();  } else   if (y > alloc.y + alloc.height) {    return getEndOffset() - 1;  } else {    Element map=doc.getDefaultRootElement();    int fontHeight=metrics.getHeight();    int lineIndex=(fontHeight > 0 ? Math.abs((y - alloc.y) / fontHeight) : map.getElementCount() - 1);    if (lineIndex >= map.getElementCount()) {      return getEndOffset() - 1;    }    Element line=map.getElement(lineIndex);    int dx=0;    if (lineIndex == 0) {      alloc.x+=firstLineOffset;      alloc.width-=firstLineOffset;    }    if (x < alloc.x) {      return line.getStartOffset();    } else     if (x > alloc.x + alloc.width) {      return line.getEndOffset() - 1;    } else {      try {        int p0=line.getStartOffset();        int p1=line.getEndOffset() - 1;        Segment s=SegmentCache.getSharedSegment();        doc.getText(p0,p1 - p0,s);        tabBase=alloc.x;        int offs=p0 + Utilities.getTabbedTextOffset(s,metrics,tabBase,x,this,p0);        SegmentCache.releaseSharedSegment(s);        return offs;      } catch (      BadLocationException e) {        return -1;      }    }  }}  }
class C{  private static final Long internalParseDate(String value,DateFormat[] formats){  Date date=null;  for (int i=0; (date == null) && (i < formats.length); i++) {    try {      date=formats[i].parse(value);    } catch (    ParseException e) {    }  }  if (date == null) {    return null;  }  return new Long(date.getTime());}  }
class C{  public boolean isStateActive(State state){switch (state) {case r_A:    return stateVector[0].ordinal() >= State.r_A.ordinal() && stateVector[0].ordinal() <= State.r_A_r_B.ordinal();case r_A_r_B:  return stateVector[0] == State.r_A_r_B;case r_E:return stateVector[0] == State.r_E;case r_F:return stateVector[0] == State.r_F;default :return false;}}  }
class C{  public static Image darken(Image img){  return manipulate(img,false,10);}  }
class C{  private boolean validate(InputNode node,String key) throws Exception {  String name=style.getElement(key);  InputNode next=node.getNext(name);  Class expect=type.getType();  if (next == null) {    return true;  }  if (next.isEmpty()) {    return true;  }  return root.validate(next,expect);}  }
class C{  private SyncState(){}  }
class C{  public static ShortBuffer allocateShortBuffer(short[] coords){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(coords.length * BYTES_PER_SHORT);  byteBuffer.order(ByteOrder.nativeOrder());  ShortBuffer shortBuffer=byteBuffer.asShortBuffer();  shortBuffer.put(coords);  shortBuffer.position(0);  return shortBuffer;}  }
class C{  public String findMostSpecific(String attributeType){  pos=0;  beg=0;  end=0;  cur=0;  chars=dn.toCharArray();  String attType=nextAT();  if (attType == null) {    return null;  }  while (true) {    String attValue="";    if (pos == length) {      return null;    }switch (chars[pos]) {case '"':      attValue=quotedAV();    break;case '#':  attValue=hexAV();break;case '+':case ',':case ';':break;default :attValue=escapedAV();}if (attributeType.equalsIgnoreCase(attType)) {return attValue;}if (pos >= length) {return null;}if (chars[pos] == ',' || chars[pos] == ';') {} else if (chars[pos] != '+') {throw new IllegalStateException("Malformed DN: " + dn);}pos++;attType=nextAT();if (attType == null) {throw new IllegalStateException("Malformed DN: " + dn);}}}  }
class C{  public static boolean equals(int[][] m1,int[][] m2){  for (int i=0; i < 3; i++) {    for (int j=0; j < 3; j++) {      if (m1[i][j] != m2[i][j])       return false;    }  }  return true;}  }
class C{  @DSSink({DSSinkKind.CONTACT_INFORMATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:59.816 -0500",hash_original_method="64D6AFA8C969AE169E36B8E60F49300F",hash_generated_method="E8827757AFCAECC6C86DA304122A27FD") @Deprecated public void addPostalLocation(Context context,long postalId,double latitude,double longitude){  final ContentResolver resolver=context.getContentResolver();  ContentValues values=new ContentValues(2);  values.put(POSTAL_LOCATION_LATITUDE,latitude);  values.put(POSTAL_LOCATION_LONGITUDE,longitude);  Uri loc=resolver.insert(CONTENT_URI,values);  long locId=ContentUris.parseId(loc);  values.clear();  values.put(AUX_DATA,locId);  resolver.update(ContentUris.withAppendedId(CONTENT_URI,postalId),values,null,null);}  }
class C{  public static Border createOutsetBorder(int thickness){  return createCSSBorder(TYPE_OUTSET,thickness);}  }
class C{  public boolean isAutocomplete(){  return m_vo.IsAutocomplete;}  }
class C{  private static void printContact(ContactEntry contact){  System.err.println("Id: " + contact.getId());  if (contact.getTitle() != null) {    System.err.println("Contact name: " + contact.getTitle().getPlainText());  } else {    System.err.println("Contact has no name");  }  System.err.println("Last updated: " + contact.getUpdated().toUiString());  if (contact.hasDeleted()) {    System.err.println("Deleted:");  }  ElementHelper.printContact(System.err,contact);  Link photoLink=contact.getLink("http://schemas.google.com/contacts/2008/rel#photo","image/*");  System.err.println("Photo link: " + photoLink.getHref());  String photoEtag=photoLink.getEtag();  System.err.println("  Photo ETag: " + (photoEtag != null ? photoEtag : "(No contact photo uploaded)"));  System.err.println("Self link: " + contact.getSelfLink().getHref());  System.err.println("Edit link: " + contact.getEditLink().getHref());  System.err.println("ETag: " + contact.getEtag());  System.err.println("-------------------------------------------\n");}  }
class C{  public XidImpl(XidImpl xid,int branchId){  this.hash=xid.hash;  this.globalId=xid.globalId;  this.branchId=Integer.toString(branchId).getBytes();}  }
class C{  public T caseArrayLiteral(ArrayLiteral object){  return null;}  }
class C{  public boolean hasKey(){  return getKey() != null;}  }
class C{  public static void main(String[] args){  BarChartDemo1 demo=new BarChartDemo1("JFreeChart: BarChartDemo1.java");  demo.pack();  RefineryUtilities.centerFrameOnScreen(demo);  demo.setVisible(true);}  }
class C{  @SuppressWarnings("TypeMayBeWeakened") static void closeIn(OptimizedObjectInputStream in){  U.close(in,null);  if (inPool != null) {    boolean b=inPool.offer(in);    assert b;  } else {    StreamHolder holder=holders.get();    if (holder != null)     holder.releaseIn();  }}  }
class C{  public List<VolumeDescriptor> createVPlexVolumeDescriptors(VolumeCreate param,Project project,final VirtualArray vArray,final VirtualPool vPool,List<Recommendation> recommendations,String task,VirtualPoolCapabilityValuesWrapper vPoolCapabilities,URI blockConsistencyGroupURI,TaskList taskList,List<URI> allVolumes,boolean createTask){  s_logger.info("Request to create {} VPlex virtual volume(s)",vPoolCapabilities.getResourceCount());  boolean srdfCopy=false;  if (recommendations.get(0).getRecommendation() != null && recommendations.get(0).getRecommendation() instanceof SRDFCopyRecommendation) {    srdfCopy=true;  }  URI vplexStorageSystemURI=null;  URI[] vplexSystemURIOut=new URI[1];  Map<String,List<VPlexRecommendation>> varrayRecommendationsMap=sortRecommendationsByVarray(recommendations,vplexSystemURIOut);  vplexStorageSystemURI=vplexSystemURIOut[0];  if (!srdfCopy) {    validateVolumeLabels(param.getName(),project,vPoolCapabilities,varrayRecommendationsMap);  }  StorageSystem vplexStorageSystem=_dbClient.queryObject(StorageSystem.class,vplexStorageSystemURI);  Project vplexProject=getVplexProject(vplexStorageSystem,_dbClient,_tenantsService);  long size=SizeUtil.translateSize(param.getSize());  final BlockConsistencyGroup consistencyGroup=blockConsistencyGroupURI == null ? null : _dbClient.queryObject(BlockConsistencyGroup.class,blockConsistencyGroupURI);  boolean cgContainsVolumes=false;  if (consistencyGroup != null) {    final List<Volume> activeCGVolumes=getActiveCGVolumes(consistencyGroup);    cgContainsVolumes=(activeCGVolumes != null && !activeCGVolumes.isEmpty());  }  BlockConsistencyGroup backendCG=null;  if (consistencyGroup != null && (!consistencyGroup.created() || !cgContainsVolumes || consistencyGroup.getTypes().contains(Types.LOCAL.toString()))) {    backendCG=consistencyGroup;  }  int varrayCount=0;  String volumeLabel=param.getName();  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();  URI[][] varrayVolumeURIs=new URI[2][vPoolCapabilities.getResourceCount()];  Iterator<String> varrayIter=varrayRecommendationsMap.keySet().iterator();  while (varrayIter.hasNext()) {    String varrayId=varrayIter.next();    s_logger.info("Processing backend recommendations for Virtual Array {}",varrayId);    List<VPlexRecommendation> vplexRecommendations=varrayRecommendationsMap.get(varrayId);    List<VolumeDescriptor> varrayDescriptors=makeBackendVolumeDescriptors(vplexRecommendations,project,vplexProject,vPool,volumeLabel,varrayCount,size,backendCG,vPoolCapabilities,createTask,task);    descriptors.addAll(varrayDescriptors);    List<URI> varrayURIs=VolumeDescriptor.getVolumeURIs(varrayDescriptors);    allVolumes.addAll(varrayURIs);    for (int i=0; i < varrayURIs.size(); i++) {      varrayVolumeURIs[varrayCount][i]=varrayURIs.get(i);    }    varrayCount++;  }  s_logger.info("Preparing virtual volumes");  List<URI> virtualVolumeURIs=new ArrayList<URI>();  URI nullPoolURI=NullColumnValueGetter.getNullURI();  vPoolCapabilities.put(VirtualPoolCapabilityValuesWrapper.AUTO_TIER__POLICY_NAME,null);  for (int i=0; i < vPoolCapabilities.getResourceCount(); i++) {    String volumeLabelBuilt=null;    Volume associatedVolume=_dbClient.queryObject(Volume.class,varrayVolumeURIs[0][i]);    if (associatedVolume != null) {      volumeLabelBuilt=generateLabelFromAssociatedVolume(volumeLabel,associatedVolume);    } else {      volumeLabelBuilt=AbstractBlockServiceApiImpl.generateDefaultVolumeLabel(volumeLabel,i,vPoolCapabilities.getResourceCount());    }    s_logger.info("Volume label is {}",volumeLabelBuilt);    Volume volume=StorageScheduler.getPrecreatedVolume(_dbClient,taskList,volumeLabelBuilt);    boolean volumePrecreated=false;    if (volume != null) {      volumePrecreated=true;    }    long thinVolumePreAllocationSize=0;    if (null != vPool.getThinVolumePreAllocationPercentage()) {      thinVolumePreAllocationSize=VirtualPoolUtil.getThinVolumePreAllocationSize(vPool.getThinVolumePreAllocationPercentage(),size);    }    volume=prepareVolume(VolumeType.VPLEX_VIRTUAL_VOLUME,volume,size,thinVolumePreAllocationSize,project,vArray,vPool,vplexStorageSystemURI,nullPoolURI,volumeLabelBuilt,consistencyGroup,vPoolCapabilities);    StringSet associatedVolumes=new StringSet();    associatedVolumes.add(varrayVolumeURIs[0][i].toString());    s_logger.info("Associating volume {}",varrayVolumeURIs[0][i].toString());    if (varrayCount > 1) {      associatedVolumes.add(varrayVolumeURIs[1][i].toString());      s_logger.info("Associating volume {}",varrayVolumeURIs[1][i].toString());    }    volume.setAssociatedVolumes(associatedVolumes);    _dbClient.updateObject(volume);    URI volumeId=volume.getId();    s_logger.info("Prepared virtual volume {}",volumeId);    virtualVolumeURIs.add(volumeId);    allVolumes.add(volumeId);    if (createTask && !volumePrecreated) {      Operation op=_dbClient.createTaskOpStatus(Volume.class,volume.getId(),task,ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME);      TaskResourceRep volumeTask=toTask(volume,task,op);      taskList.getTaskList().add(volumeTask);    }    VolumeDescriptor descriptor=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,vplexStorageSystemURI,volumeId,null,consistencyGroup == null ? null : consistencyGroup.getId(),vPoolCapabilities,volume.getCapacity());    URI computeResourceURI=param.getComputeResource();    if ((computeResourceURI != null) && (!srdfCopy)) {      s_logger.info(String.format("Volume %s - will be exported to Host/Cluster: %s",volume.getLabel(),computeResourceURI.toString()));      descriptor.setComputeResource(computeResourceURI);    }    descriptors.add(descriptor);  }  return descriptors;}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int row, col;  int nRows, nCols;  double z;  int progress=0;  int i, a;  double noData=-32768;  double outputNoData=-32768;  String inputDataString=null;  int numImages=0;  double sumOfWeights=0;  double d=0;  double weight=0;  double scaleMin=0;  double scaleMax=1;  double imageMin=0;  double imageMax=1;  double imageRange=1;  double[] data=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String[] dataSplit=args[0].split(";");  String[] constraints=args[1].split(";");  outputHeader=args[2];  String commonScale=args[3];  if (commonScale.equals("0-1")) {    scaleMin=0;    scaleMax=1;  } else   if (commonScale.equals("0-100")) {    scaleMin=0;    scaleMax=100;  } else   if (commonScale.equals("0-255")) {    scaleMin=0;    scaleMax=255;  }  if (outputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ArrayList<Boolean> costFactor=new ArrayList<Boolean>();    ArrayList<String> imageFiles=new ArrayList<String>();    ArrayList<Double> weights=new ArrayList<Double>();    for (a=0; a < dataSplit.length; a+=3) {      if (!dataSplit[a + 1].trim().equals("") && !dataSplit[a].trim().toLowerCase().equals("not specified")) {        costFactor.add(Boolean.parseBoolean(dataSplit[a]));        imageFiles.add(dataSplit[a + 1].trim());        weights.add(Double.parseDouble(dataSplit[a + 2]));        sumOfWeights+=weights.get(numImages);        numImages++;      }    }    if (numImages < 2) {      showFeedback("At least two factor images must be specified.");      return;    }    for (a=0; a < numImages; a++) {      d=weights.get(a) / sumOfWeights;      weights.set(a,d);    }    image=new WhiteboxRaster(imageFiles.get(0),"r");    nRows=image.getNumberRows();    nCols=image.getNumberColumns();    outputNoData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",imageFiles.get(0),WhiteboxRaster.DataType.FLOAT,0);    for (i=0; i < numImages; i++) {      progress=(int)(100f * (i + 1) / numImages);      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      weight=weights.get(i);      if (i > 0) {        image=new WhiteboxRaster(imageFiles.get(i),"r");        noData=image.getNoDataValue();        if (image.getNumberRows() != nRows || image.getNumberColumns() != nCols) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      imageMin=image.getMinimumValue();      imageMax=image.getMaximumValue();      imageRange=imageMax - imageMin;      Boolean boolCost=costFactor.get(i);      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if (!boolCost) {                d=(data[col] - imageMin) / imageRange * scaleMax;                output.setValue(row,col,z + d * weight);              } else {                d=(1 - (data[col] - imageMin) / imageRange) * scaleMax;                output.setValue(row,col,z + d * weight);              }            }          } else {            output.setValue(row,col,outputNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();    }    for (i=0; i < constraints.length; i++) {      image=new WhiteboxRaster(constraints[i].trim(),"r");      noData=image.getNoDataValue();      if (image.getNumberRows() != nRows || image.getNumberColumns() != nCols) {        showFeedback("All input images must have the same dimensions (rows and columns).");        return;      }      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData && data[col] <= 0) {            if (output.getValue(row,col) != outputNoData) {              output.setValue(row,col,scaleMin);            }          } else {            output.setValue(row,col,outputNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static DoubleMatrix1D mult(DoubleMatrix1D A,DoubleMatrix1D B){  return A.assign(B,F.mult);}  }
class C{  public SessionEvictionTask(long sessionTimeout){  this.sessionTimeout=sessionTimeout;}  }
class C{  public void forceTermination(){  final Phaser root=this.root;  long s;  while ((s=root.state) >= 0) {    if (UNSAFE.compareAndSwapLong(root,stateOffset,s,s | TERMINATION_BIT)) {      releaseWaiters(0);      releaseWaiters(1);      return;    }  }}  }
class C{  public static GetNumberOfEntitiesResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetNumberOfEntitiesResponse object=new GetNumberOfEntitiesResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"getNumberOfEntitiesResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (GetNumberOfEntitiesResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));      reader.next();    } else {      object.set_return(java.lang.Integer.MIN_VALUE);    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public LdapAuthBase(String connectionUrl,String admin_dn,String passwd,String authType){  log.debug("LdapAuthBase");  this.ldap_connection_url=connectionUrl;  this.ldap_admin_dn=admin_dn;  this.ldap_passwd=passwd;  this.ldap_auth_type=authType;}  }
class C{  public static void subscribeToNetworkReports(Callback callback){  subscribe(Type.NETWORK,callback);}  }
class C{  public MethodHandler read(){  return m_ReadMethods;}  }
class C{  @VisibleForTesting public void resetState(){  for (  final Resetable resetable : from(getWorkingSetManagers()).filter(Resetable.class)) {    resetable.reset();  }  try {    getPreferences().clear();    getPreferences().flush();    workingSetTopLevel.set(false);    for (    final TopLevelElementChangedListener listener : topLevelElementChangeListeners) {      listener.topLevelElementChanged(workingSetTopLevel.get());    }    final Collection<WorkingSetManager> managers=getWorkingSetManagers();    if (!managers.isEmpty()) {      activeWorkingSetManager.set(managers.iterator().next());    } else {      activeWorkingSetManager.set(null);    }    refreshNavigator(true);  } catch (  final BackingStoreException e) {    LOGGER.error("Error occurred while reseting persisted the state.",e);  }}  }
class C{  public ArffReader(Reader reader,Instances template,int lines,int capacity,boolean batch,String... fieldSepAndEnclosures) throws IOException {  m_batchMode=batch;  if (batch) {    m_retainStringValues=true;  }  if (fieldSepAndEnclosures != null && fieldSepAndEnclosures.length > 0) {    if (fieldSepAndEnclosures[0] != null && fieldSepAndEnclosures[0].length() > 0) {      m_fieldSeparator=fieldSepAndEnclosures[0];    }    if (fieldSepAndEnclosures.length > 1) {      m_enclosures=new ArrayList<String>();      for (int i=1; i < fieldSepAndEnclosures.length; i++) {        if (fieldSepAndEnclosures[i] != null && fieldSepAndEnclosures[i].length() > 0) {          m_enclosures.add(fieldSepAndEnclosures[i]);        }      }      if (m_enclosures.size() == 0) {        m_enclosures=null;      }    }  }  m_Lines=lines;  m_Tokenizer=new StreamTokenizer(reader);  initTokenizer();  m_Data=new Instances(template,capacity);  initBuffers();}  }
class C{  private void onSignedIn(final String accountName){  SharedPreferences settings=getSharedPreferences("MobileAssistant",0);  credential.setSelectedAccountName(accountName);  SharedPreferences.Editor editor=settings.edit();  editor.putString(ACCOUNT_NAME_SETTING_NAME,accountName);  editor.apply();  startMainActivity();}  }
class C{  public List<KrigingPoint> CrossValidationPoints(Variogram variogram,List<KrigingPoint> pnts,int NumberOfNearestPoints){  double[] res=new double[NumberOfNearestPoints];  double[][] D=new double[NumberOfNearestPoints + 1][1];  List<KrigingPoint> NNPoitns=new ArrayList();  List<KrigingPoint> outPnts=new ArrayList();  for (int n=0; n < pnts.size(); n++) {    NNPoitns=getNNpoints(this.pointsTree,pnts.get(n),NumberOfNearestPoints + 1);    for (int ni=0; ni < NumberOfNearestPoints + 1; ni++) {      if (pnts.get(n).x == NNPoitns.get(ni).x && pnts.get(n).y == NNPoitns.get(ni).y && pnts.get(n).z == NNPoitns.get(ni).z) {        NNPoitns.remove(ni);        break;      }    }    double[][] C=CalcConstantCoef(variogram,NNPoitns);    double[] tm=CalcVariableCoef(variogram,pnts.get(n),NNPoitns);    for (int i=0; i < tm.length; i++) {      D[i][0]=tm[i];    }    Matrix tmp=Matrix.constructWithCopy(C);    Matrix VariableCoef=Matrix.constructWithCopy(D);    Matrix w=null;    boolean flag=false;    try {      w=tmp.solve(VariableCoef);      double[][] Wi=w.getArray();      double s=0;      for (int i=0; i < Wi.length - 1; i++) {        s=s + Wi[i][0] * NNPoitns.get(i).z;      }      KrigingPoint pnt=new KrigingPoint(pnts.get(n).x,pnts.get(n).y,s);      outPnts.add(pnt);      s=0;    } catch (    Exception ex) {      SingularValueDecomposition svd=tmp.svd();      Matrix u=svd.getU();      Matrix s=svd.getS();      Matrix v=svd.getV();      int rrr=svd.rank();      double[][] stemp=s.getArray();      for (int nn=0; nn < stemp.length; nn++) {        if (stemp[nn][nn] > 0.03) {          stemp[nn][nn]=1 / stemp[nn][nn];        } else {          stemp[nn][nn]=0;        }      }      Matrix sp=new Matrix(stemp);      w=v.times(sp).times(u.transpose()).times(VariableCoef);      double[][] Wi=w.getArray();      double ss=0;      for (int i=0; i < Wi.length - 1; i++) {        ss=ss + Wi[i][0] * NNPoitns.get(i).z;      }      KrigingPoint pnt=new KrigingPoint(pnts.get(n).x + 1,pnts.get(n).y,ss);      outPnts.add(pnt);      ss=0;    }  }  return outPnts;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String profile=getString(stack);  return (Permissions.hasPermission(Permissions.PERMISSION_SECURITY,stack.getUIMgr()) && Permissions.setDefaultSecurityProfile(profile)) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public void printFDViolatingTuplesMap(){  int count=0;  System.out.println("\n" + Utils.padLeft("Num",5) + "   "+ Utils.padLeft("Index",5)+ "   "+ " FD");  for (  int index : violatedTuplesMap.keySet()) {    StringBuilder row=new StringBuilder();    row.append(Utils.padLeft("" + (count++),5) + "   ");    row.append(Utils.padLeft("" + (index),5) + " : ");    for (    String FD : violatedTuplesMap.get(index)) {      row.append(FD + " | ");    }    row.delete(row.length() - 3,row.length());    System.out.println(row);  }}  }
class C{  public void printCFG(String label,AbstractBlockBase<?>[] blocks,boolean printNodes){  if (lir == null) {    latestScheduling=new NodeMap<>(cfg.getNodeToBlock());    for (    AbstractBlockBase<?> abstractBlock : blocks) {      if (abstractBlock == null) {        continue;      }      Block block=(Block)abstractBlock;      Node cur=block.getBeginNode();      while (true) {        assert inFixedSchedule(cur) && latestScheduling.get(cur) == block;        scheduleInputs(cur,block);        if (cur == block.getEndNode()) {          break;        }        assert cur.successors().count() == 1;        cur=cur.successors().first();      }    }  }  begin("cfg");  out.print("name \"").print(label).println('"');  for (  AbstractBlockBase<?> block : blocks) {    printBlock(block,printNodes);  }  end("cfg");  if (method != null) {    printBytecodes(new BytecodeDisassembler(false).disassemble(method));  }  latestScheduling=null;}  }
class C{  public final Vec2D subSelf(float a,float b){  x-=a;  y-=b;  return this;}  }
class C{  protected void initializeReferenceSetBounds(){  if (referenceSet == null) {    return;  }  double rangeMin=Double.POSITIVE_INFINITY;  double rangeMax=Double.NEGATIVE_INFINITY;  double domainMin=Double.POSITIVE_INFINITY;  double domainMax=Double.NEGATIVE_INFINITY;  for (  Solution solution : referenceSet) {    rangeMin=Math.min(rangeMin,getValue(solution,1));    rangeMax=Math.max(rangeMax,getValue(solution,1));    domainMin=Math.min(domainMin,getValue(solution,0));    domainMax=Math.max(domainMax,getValue(solution,0));  }  referenceRangeBounds=new Range(rangeMin,rangeMax);  referenceDomainBounds=new Range(domainMin,domainMax);}  }
class C{  public StandardAlgorithms(){  super();}  }
class C{  private void createNotificationForConnectedDevice(final BluetoothDevice device){  final NotificationCompat.Builder builder=getNotificationBuilder();  builder.setColor(ContextCompat.getColor(this,R.color.actionBarColorDark));  builder.setGroup(PROXIMITY_GROUP_ID).setDefaults(0).setOngoing(true);  builder.setContentTitle(getString(R.string.proximity_notification_text,getDeviceName(device)));  final Intent disconnect=new Intent(ACTION_DISCONNECT);  disconnect.putExtra(EXTRA_DEVICE,device);  final PendingIntent disconnectAction=PendingIntent.getBroadcast(this,DISCONNECT_REQ + device.hashCode(),disconnect,PendingIntent.FLAG_UPDATE_CURRENT);  builder.addAction(new NotificationCompat.Action(R.drawable.ic_action_bluetooth,getString(R.string.proximity_action_disconnect),disconnectAction));  builder.setSortKey(getDeviceName(device) + device.getAddress());  final ProximityManager manager=(ProximityManager)getBleManager(device);  if (manager.isAlertEnabled()) {    final Intent silentAllIntent=new Intent(ACTION_SILENT);    silentAllIntent.putExtra(EXTRA_DEVICE,device);    final PendingIntent silentAction=PendingIntent.getBroadcast(this,SILENT_REQ + device.hashCode(),silentAllIntent,PendingIntent.FLAG_UPDATE_CURRENT);    builder.addAction(new NotificationCompat.Action(R.drawable.ic_stat_notify_proximity_silent,getString(R.string.proximity_action_silent),silentAction));  } else {    final Intent findAllIntent=new Intent(ACTION_FIND);    findAllIntent.putExtra(EXTRA_DEVICE,device);    final PendingIntent findAction=PendingIntent.getBroadcast(this,FIND_REQ + device.hashCode(),findAllIntent,PendingIntent.FLAG_UPDATE_CURRENT);    builder.addAction(new NotificationCompat.Action(R.drawable.ic_stat_notify_proximity_find,getString(R.string.proximity_action_find),findAction));  }  final Notification notification=builder.build();  final NotificationManagerCompat nm=NotificationManagerCompat.from(this);  nm.notify(device.getAddress(),NOTIFICATION_ID,notification);}  }
class C{  @Override public UUID createTransportNode(){  UUID uuid=UUID.randomUUID();  graphServer.addVertex(uuid);  return uuid;}  }
class C{  public void fromData(DataInput in) throws IOException, ClassNotFoundException {  DistributedMember myID=null;  GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  if (cache != null) {    myID=cache.getMyId();  }  int size=in.readInt();  for (int i=0; i < size; i++) {    InternalDistributedMember member=InternalDistributedMember.readEssentialData(in);    FilterInfo fInfo=new FilterInfo();    InternalDataSerializer.invokeFromData(fInfo,in);    if (myID == null || myID.equals(member)) {      this.serverFilterInfo.put(member,fInfo);    }  }}  }
class C{  public ConversationReceiver(int serverId,ConversationListener listener){  this.listener=listener;  this.serverId=serverId;}  }
class C{  public static SAXParser newSAXParser(String schemaLanguage,boolean namespaceAware,boolean validating,URL schema) throws SAXException, ParserConfigurationException {  SchemaFactory schemaFactory=SchemaFactory.newInstance(schemaLanguage);  return newSAXParser(namespaceAware,validating,schemaFactory.newSchema(schema));}  }
class C{  protected static StatementSpecCompiled compile(StatementSpecRaw spec,String eplStatement,StatementContext statementContext,boolean isSubquery,boolean isOnDemandQuery,Annotation[] annotations,List<ExprSubselectNode> subselectNodes,List<ExprDeclaredNode> declaredNodes,Set<ExprTableAccessNode> tableAccessNodes,EPServicesContext servicesContext) throws EPStatementException {  List<StreamSpecCompiled> compiledStreams;  Set<String> eventTypeReferences=new HashSet<String>();  if ((spec.getStreamSpecs().size() == 1) && (spec.getStreamSpecs().get(0) instanceof FilterStreamSpecRaw) && (spec.getStreamSpecs().get(0).getViewSpecs().length == 0)&& (spec.getFilterRootNode() != null)&& (spec.getOnTriggerDesc() == null)&& !isSubquery&& !isOnDemandQuery&& (tableAccessNodes == null || tableAccessNodes.isEmpty())) {    boolean disqualified;    ExprNode whereClause=spec.getFilterRootNode();    ExprNodeSubselectDeclaredDotVisitor visitor=new ExprNodeSubselectDeclaredDotVisitor();    whereClause.accept(visitor);    disqualified=visitor.getSubselects().size() > 0 || HintEnum.DISABLE_WHEREEXPR_MOVETO_FILTER.getHint(annotations) != null;    if (!disqualified) {      ExprNodeViewResourceVisitor viewResourceVisitor=new ExprNodeViewResourceVisitor();      whereClause.accept(viewResourceVisitor);      disqualified=viewResourceVisitor.getExprNodes().size() > 0;    }    if (!disqualified) {      String alias=spec.getStreamSpecs().get(0).getOptionalStreamName();      if (alias != null) {        ExprNodeIdentifierCollectVisitor v=new ExprNodeIdentifierCollectVisitor();        whereClause.accept(v);        for (        ExprIdentNode node : v.getExprProperties()) {          if (node.getStreamOrPropertyName() != null && (node.getStreamOrPropertyName().equals(alias))) {            node.setStreamOrPropertyName(null);          }        }      }      spec.setFilterExprRootNode(null);      FilterStreamSpecRaw streamSpec=(FilterStreamSpecRaw)spec.getStreamSpecs().get(0);      streamSpec.getRawFilterSpec().getFilterExpressions().add(whereClause);    }  }  SelectClauseSpecCompiled selectClauseCompiled=StatementLifecycleSvcUtil.compileSelectClause(spec.getSelectClauseSpec());  ExprNodeSubselectDeclaredDotVisitor visitor=new ExprNodeSubselectDeclaredDotVisitor();  StatementLifecycleSvcUtil.walkStreamSpecs(spec,visitor);  for (  ExprSubselectNode subselectNode : visitor.getSubselects()) {    subselectNode.setFilterStreamSubselect(true);  }  visitor.reset();  GroupByClauseExpressions groupByRollupExpressions;  try {    StatementLifecycleSvcUtil.walkStatement(spec,visitor);    groupByRollupExpressions=GroupByExpressionHelper.getGroupByRollupExpressions(spec.getGroupByExpressions(),spec.getSelectClauseSpec(),spec.getHavingExprRootNode(),spec.getOrderByList(),visitor);    List<ExprSubselectNode> subselects=visitor.getSubselects();    if (!visitor.getChainedExpressionsDot().isEmpty()) {      rewriteNamedWindowSubselect(visitor.getChainedExpressionsDot(),subselects,statementContext.getNamedWindowMgmtService());    }  } catch (  ExprValidationException ex) {    throw new EPStatementException(ex.getMessage(),eplStatement);  }  if (isSubquery && !visitor.getSubselects().isEmpty()) {    throw new EPStatementException("Invalid nested subquery, subquery-within-subquery is not supported",eplStatement);  }  if (isOnDemandQuery && !visitor.getSubselects().isEmpty()) {    throw new EPStatementException("Subqueries are not a supported feature of on-demand queries",eplStatement);  }  for (  ExprSubselectNode subselectNode : visitor.getSubselects()) {    if (!subselectNodes.contains(subselectNode)) {      subselectNodes.add(subselectNode);    }  }  int subselectNumber=0;  for (  ExprSubselectNode subselect : subselectNodes) {    StatementSpecRaw raw=subselect.getStatementSpecRaw();    StatementSpecCompiled compiled=compile(raw,eplStatement,statementContext,true,isOnDemandQuery,new Annotation[0],Collections.<ExprSubselectNode>emptyList(),Collections.<ExprDeclaredNode>emptyList(),raw.getTableExpressions(),servicesContext);    subselectNumber++;    subselect.setStatementSpecCompiled(compiled,subselectNumber);  }  try {    compiledStreams=new ArrayList<StreamSpecCompiled>(spec.getStreamSpecs().size());    int streamNum=0;    for (    StreamSpecRaw rawSpec : spec.getStreamSpecs()) {      streamNum++;      StreamSpecCompiled compiled=rawSpec.compile(statementContext,eventTypeReferences,spec.getInsertIntoDesc() != null,Collections.singleton(streamNum),spec.getStreamSpecs().size() > 1,false,spec.getOnTriggerDesc() != null,rawSpec.getOptionalStreamName());      compiledStreams.add(compiled);    }  } catch (  ExprValidationException ex) {    log.info("Failed to compile statement: " + ex.getMessage(),ex);    if (ex.getMessage() == null) {      throw new EPStatementException("Unexpected exception compiling statement, please consult the log file and report the exception",eplStatement);    } else {      throw new EPStatementException(ex.getMessage(),eplStatement);    }  }catch (  RuntimeException ex) {    String text="Unexpected error compiling statement";    log.error(text,ex);    throw new EPStatementException(text + ": " + ex.getClass().getName()+ ":"+ ex.getMessage(),eplStatement);  }  if (spec.getCreateWindowDesc() != null) {    try {      StreamSpecCompiled createWindowTypeSpec=compiledStreams.get(0);      EventType selectFromType;      String selectFromTypeName;      if (createWindowTypeSpec instanceof FilterStreamSpecCompiled) {        FilterStreamSpecCompiled filterStreamSpec=(FilterStreamSpecCompiled)createWindowTypeSpec;        selectFromType=filterStreamSpec.getFilterSpec().getFilterForEventType();        selectFromTypeName=filterStreamSpec.getFilterSpec().getFilterForEventTypeName();        if (spec.getCreateWindowDesc().isInsert() || spec.getCreateWindowDesc().getInsertFilter() != null) {          throw new EPStatementException("A named window by name '" + selectFromTypeName + "' could not be located, use the insert-keyword with an existing named window",eplStatement);        }      } else {        NamedWindowConsumerStreamSpec consumerStreamSpec=(NamedWindowConsumerStreamSpec)createWindowTypeSpec;        selectFromType=statementContext.getEventAdapterService().getExistsTypeByName(consumerStreamSpec.getWindowName());        selectFromTypeName=consumerStreamSpec.getWindowName();        if (spec.getCreateWindowDesc().getInsertFilter() != null) {          ExprNode insertIntoFilter=spec.getCreateWindowDesc().getInsertFilter();          String checkMinimal=ExprNodeUtility.isMinimalExpression(insertIntoFilter);          if (checkMinimal != null) {            throw new ExprValidationException("Create window where-clause may not have " + checkMinimal);          }          StreamTypeService streamTypeService=new StreamTypeServiceImpl(selectFromType,selectFromTypeName,true,statementContext.getEngineURI());          ExprEvaluatorContextStatement evaluatorContextStmt=new ExprEvaluatorContextStatement(statementContext,false);          ExprValidationContext validationContext=new ExprValidationContext(streamTypeService,statementContext.getEngineImportService(),statementContext.getStatementExtensionServicesContext(),null,statementContext.getSchedulingService(),statementContext.getVariableService(),statementContext.getTableService(),evaluatorContextStmt,statementContext.getEventAdapterService(),statementContext.getStatementName(),statementContext.getStatementId(),statementContext.getAnnotations(),statementContext.getContextDescriptor(),false,false,false,false,null,false);          ExprNode insertFilter=ExprNodeUtility.getValidatedSubtree(ExprNodeOrigin.CREATEWINDOWFILTER,spec.getCreateWindowDesc().getInsertFilter(),validationContext);          spec.getCreateWindowDesc().setInsertFilter(insertFilter);        }        spec.getCreateWindowDesc().setInsertFromWindow(consumerStreamSpec.getWindowName());      }      Pair<FilterSpecCompiled,SelectClauseSpecRaw> newFilter=handleCreateWindow(selectFromType,selectFromTypeName,spec.getCreateWindowDesc().getColumns(),spec,eplStatement,statementContext,servicesContext);      eventTypeReferences.add(((EventTypeSPI)newFilter.getFirst().getFilterForEventType()).getMetadata().getPrimaryName());      if (spec.getCreateWindowDesc().getViewSpecs().isEmpty()) {        throw new ExprValidationException(NamedWindowMgmtService.ERROR_MSG_DATAWINDOWS);      }      compiledStreams.clear();      ViewSpec[] views=ViewSpec.toArray(spec.getCreateWindowDesc().getViewSpecs());      compiledStreams.add(new FilterStreamSpecCompiled(newFilter.getFirst(),views,null,spec.getCreateWindowDesc().getStreamSpecOptions()));      spec.setSelectClauseSpec(newFilter.getSecond());    } catch (    ExprValidationException e) {      throw new EPStatementException(e.getMessage(),eplStatement);    }  }  return new StatementSpecCompiled(spec.getOnTriggerDesc(),spec.getCreateWindowDesc(),spec.getCreateIndexDesc(),spec.getCreateVariableDesc(),spec.getCreateTableDesc(),spec.getCreateSchemaDesc(),spec.getInsertIntoDesc(),spec.getSelectStreamSelectorEnum(),selectClauseCompiled,compiledStreams.toArray(new StreamSpecCompiled[compiledStreams.size()]),OuterJoinDesc.toArray(spec.getOuterJoinDescList()),spec.getFilterRootNode(),spec.getHavingExprRootNode(),spec.getOutputLimitSpec(),OrderByItem.toArray(spec.getOrderByList()),ExprSubselectNode.toArray(subselectNodes),ExprNodeUtility.toArray(declaredNodes),spec.getScriptExpressions() == null || spec.getScriptExpressions().isEmpty() ? ExprNodeUtility.EMPTY_SCRIPTS : spec.getScriptExpressions().toArray(new ExpressionScriptProvided[spec.getScriptExpressions().size()]),spec.getReferencedVariables(),spec.getRowLimitSpec(),CollectionUtil.toArray(eventTypeReferences),annotations,spec.getUpdateDesc(),spec.getMatchRecognizeSpec(),spec.getForClauseSpec(),spec.getSqlParameters(),spec.getCreateContextDesc(),spec.getOptionalContextName(),spec.getCreateDataFlowDesc(),spec.getCreateExpressionDesc(),spec.getFireAndForgetSpec(),groupByRollupExpressions,spec.getIntoTableSpec(),tableAccessNodes == null ? null : tableAccessNodes.toArray(new ExprTableAccessNode[tableAccessNodes.size()]));}  }
class C{  public void clear(int bitIndex){  if (bitIndex < 0)   throw new IndexOutOfBoundsException("bitIndex < 0: " + bitIndex);  int wordIndex=wordIndex(bitIndex);  if (wordIndex >= wordsInUse)   return;  words[wordIndex]&=~(1L << bitIndex);  recalculateWordsInUse();  checkInvariants();}  }
class C{  boolean maySendBasePageUrl(){  return !isUserUndecided();}  }
class C{  public static byte[] hexStringToBytes(String s){  byte[] ret;  if (s == null)   return null;  int sz=s.length();  ret=new byte[sz / 2];  for (int i=0; i < sz; i+=2) {    ret[i / 2]=(byte)((hexCharToInt(s.charAt(i)) << 4) | hexCharToInt(s.charAt(i + 1)));  }  return ret;}  }
class C{  @Override public JavaConstant keyAt(int i){  return JavaConstant.forInt(keys[i]);}  }
class C{  public void reserve(int len) throws IOException {  if (len > (buf.length - pos))   flushBuffer();}  }
class C{  public static String convertClosureToSource(ReaderSource readerSource,ClosureExpression expression) throws Exception {  String source=GeneralUtils.convertASTToSource(readerSource,expression);  if (!source.startsWith("{")) {    throw new Exception("Error converting ClosureExpression into source code. Closures must start with {. Found: " + source);  }  return source;}  }
class C{  private static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method;    } catch (    NoSuchMethodException e) {    }  }  throw new NoSuchMethodException("Method " + name + " with parameters "+ Arrays.asList(parameterTypes)+ " not found in "+ instance.getClass());}  }
class C{  boolean isRightGrantedRecursive(Table table,int rightMask){  Right right;  if (grantedRights != null) {    right=grantedRights.get(table);    if (right != null) {      if ((right.getRightMask() & rightMask) == rightMask) {        return true;      }    }  }  if (grantedRoles != null) {    for (    RightOwner role : grantedRoles.keySet()) {      if (role.isRightGrantedRecursive(table,rightMask)) {        return true;      }    }  }  return false;}  }
class C{  public static Varargs invokeFunction(LuaValue target){  try {    return (target != null && target.isfunction()) ? target.invoke() : LuaValue.NIL;  } catch (  Exception e) {    e.printStackTrace();    return LuaValue.NIL;  }}  }
class C{  public Iterator<Target> targetIterator(){  return targetList.iterator();}  }
class C{  public static double decodeZValue(final long docValue){  return decodeZ(((int)(docValue)) & 0x1FFFFF);}  }
class C{  public SpanNearQuery build(){  return new SpanNearQuery(clauses.toArray(new SpanQuery[clauses.size()]),slop,ordered);}  }
class C{  public boolean hasKilledSolo(final String name){  final String count=player.getKeyedSlot(KILL_SLOT_NAME,PREFIX_SOLO + name);  return MathHelper.parseIntDefault(count,0) > 0;}  }
class C{  private TableXYDataset createTableXYDataset1(){  DefaultTableXYDataset dataset=new DefaultTableXYDataset();  XYSeries s1=new XYSeries("Series 1",true,false);  s1.add(1.0,1.0);  s1.add(2.0,2.0);  dataset.addSeries(s1);  XYSeries s2=new XYSeries("Series 2",true,false);  s2.add(1.0,-2.0);  s2.add(2.0,-1.0);  dataset.addSeries(s2);  return dataset;}  }
class C{  private void configureWBIMBConnectionFactory(MQConnectionFactory cf) throws JMSException {  cf.setBrokerVersion(brokerVersion);  cf.setHostName(Config.parms.getString("jh"));  cf.setPort(Config.parms.getInt("jp"));  if (bufferSize > 0) {    cf.setMaxBufferSize(bufferSize);  }  if (transport.equals("ip")) {    System.out.println("Using transport type MQJMS_TP_DIRECT_TCPIP");    cf.setTransportType(JMSC.MQJMS_TP_DIRECT_TCPIP);  } else   if (transport.equals("ipmc")) {    System.out.println("Using transport type MQJMS_TP_DIRECT_TCPIP, Multicast Enabled");    cf.setTransportType(JMSC.MQJMS_TP_DIRECT_TCPIP);    cf.setMulticast(JMSC.MQJMS_MULTICAST_ENABLED);  } else   if (transport.equals("ipmcr")) {    System.out.println("Using transport type MQJMS_TP_DIRECT_TCPIP, Multicast Enabled & Reliable");    cf.setTransportType(JMSC.MQJMS_TP_DIRECT_TCPIP);    cf.setMulticast(JMSC.MQJMS_MULTICAST_RELIABLE);  } else   if (transport.equals("ipmcn")) {    System.out.println("Using transport type MQJMS_TP_DIRECT_TCPIP, Multicast Enabled & NOT Reliable");    cf.setTransportType(JMSC.MQJMS_TP_DIRECT_TCPIP);    cf.setMulticast(JMSC.MQJMS_MULTICAST_NOT_RELIABLE);  } else   if (transport.equals("mqb")) {    cf.setBrokerQueueManager(Config.parms.getString("jb"));  } else   if (transport.equals("mqc")) {    cf.setBrokerQueueManager(Config.parms.getString("jb"));  } else {    System.out.println("Invalid transport type");    System.exit(1);  }}  }
class C{  private MobileDoc createSecondPage(Properties cProp,HttpServletRequest request,option[] roleOptions,String errorMessage){  log.info(" - " + errorMessage);  MobileSessionCtx wsc=MobileSessionCtx.get(request);  String windowTitle=Msg.getMsg(wsc.language,"Login");  String action=MobileEnv.getBaseDirectory("WLogin");  form myForm=new form(action).setName("Login2");  myForm.setID(windowTitle);  myForm.setTitle(windowTitle);  myForm.addAttribute("selected","true");  myForm.setClass("panel");  myForm.setMethod("post");  myForm.setTarget("_self");  fieldset fs=new fieldset();  div div1=new div();  div1.setClass("row");  label roleLabel=new label().setFor(P_ROLE + "F").addElement(Msg.translate(wsc.language,"AD_Role_ID"));  roleLabel.setID(P_ROLE + "L");  div1.addElement(roleLabel);  select role=new select(P_ROLE,roleOptions);  role.setID(P_ROLE + "F");  role.setOnChange("loginDynUpdate(this);");  div1.addElement(role);  fs.addElement(div1);  Login login=new Login(wsc.ctx);  KeyNamePair[] clients=null;  if (roleOptions.length > 0)   clients=login.getClients(new KeyNamePair(Integer.parseInt(roleOptions[0].getAttribute("value")),roleOptions[0].getAttribute("value")));  div1=new div();  div1.setClass("row");  label clientLabel=new label().setFor(P_CLIENT + "F").addElement(Msg.translate(wsc.language,"AD_Client_ID"));  clientLabel.setID(P_CLIENT + "L");  div1.addElement(clientLabel);  select client=new select(P_CLIENT,MobileUtil.convertToOption(clients,null));  client.setID(P_CLIENT + "F");  div1.addElement(new td().addElement(client));  fs.addElement(div1);  KeyNamePair[] orgs=null;  if (clients.length > 0)   orgs=login.getOrgs(clients[0]);  div1=new div();  div1.setClass("row");  label orgLabel=new label().setFor(P_ORG + "F").addElement(Msg.translate(wsc.language,"AD_Org_ID"));  orgLabel.setID(P_ORG + "L");  div1.addElement(orgLabel);  String orgData=cProp.getProperty(P_ORG,null);  select org=new select(P_ORG,MobileUtil.convertToOption(orgs,orgData));  org.setID(P_ORG + "F");  div1.addElement(org);  fs.addElement(div1);  if (errorMessage != null && errorMessage.length() > 0) {    div1=new div();    div1.setClass("row");    div1.addElement(new strong(errorMessage));    fs.addElement(div1);  }  myForm.addElement(fs);  a button=new a("#","OK");  button.addAttribute("type","submit");  button.setClass("whiteButton");  myForm.addElement(button);  MobileDoc doc=MobileDoc.createWindow(windowTitle);  doc.getBody().addElement(myForm).setTitle("Login");  return doc;}  }
class C{  private List<Triple<Double,Integer,Integer>> sample(List<RichTranslation<IString,String>> translations,List<Sequence<IString>> references,int sourceId,Sequence<IString> source,SentenceLevelMetric<IString,String> scoreMetric){  double[] tgtToScore=new double[translations.size()];  for (int i=0, max=translations.size(); i < max; ++i) {    Sequence<IString> nBestItem=translations.get(i).translation;    tgtToScore[i]=scoreMetric.score(sourceId,source,references,nBestItem);  }  List<Triple<Double,Integer,Integer>> v=new ArrayList<Triple<Double,Integer,Integer>>(gamma);  final int jMax=translations.size();  if (jMax == 0) {    System.err.println("No translations for input sentence #" + sourceId);    return v;  }  for (int g=0; g < gamma; g++) {    int j=ThreadLocalRandom.current().nextInt(jMax);    int jPrime=ThreadLocalRandom.current().nextInt(jMax);    double gJ=tgtToScore[j];    double gJPrime=tgtToScore[jPrime];    double absDiff=Math.abs(gJ - gJPrime);    if (absDiff >= nThreshold) {      if (gJ > gJPrime) {        v.add(new Triple<Double,Integer,Integer>(absDiff,j,jPrime));      } else {        v.add(new Triple<Double,Integer,Integer>(absDiff,jPrime,j));      }    }  }  return v;}  }
class C{  public boolean stopCellEditing(){  fireEditingStopped();  return true;}  }
class C{  public WeakStopListener(Object resource){  _resourceRef=new WeakReference<Object>(resource);}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:05.997 -0500",hash_original_method="7D10A3C1D28519413DA457C01967C482",hash_generated_method="1F98BC8BED2EF7A2C0F459271E3FDBDD") public int end(){  return start + rawString.length();}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_xpath.fixupVariables(vars,globalsSize);}  }
class C{  public int parse(char c,char[] ia,int ip,int il){  assert (ia[ip] == c);  if (Character.isHighSurrogate(c)) {    if (il - ip < 2) {      error=CoderResult.UNDERFLOW;      return -1;    }    char d=ia[ip + 1];    if (Character.isLowSurrogate(d)) {      character=Character.toCodePoint(c,d);      isPair=true;      error=null;      return character;    }    error=CoderResult.malformedForLength(1);    return -1;  }  if (Character.isLowSurrogate(c)) {    error=CoderResult.malformedForLength(1);    return -1;  }  character=c;  isPair=false;  error=null;  return character;}  }
class C{  public Resource(final String name,final GameData data){  super(name,data);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override public void flush(){  try {    out.flush();  } catch (  Exception ex) {    reportError(null,ex,ErrorManager.FLUSH_FAILURE);  }  try {    err.flush();  } catch (  Exception ex) {    reportError(null,ex,ErrorManager.FLUSH_FAILURE);  }}  }
class C{  public static double pdf(double val,double scale,double shape){  if (val < 0) {    return 0;  }  val=Math.abs(val / scale);  double f=shape / scale * Math.pow(val,shape - 1.);  double d=1. + Math.pow(val,shape);  return f / (d * d);}  }
class C{  public static void touch(Resource res) throws IOException {  if (res.exists()) {    res.setLastModified(System.currentTimeMillis());  } else {    res.createFile(true);  }}  }
class C{  private InputStream locateStreamWithContextFolder(final String uri,final String contextFolder) throws IOException, FileNotFoundException {  if (getWildcardStreamLocator().hasWildcard(uri)) {    final String fullPath=WroUtil.getFullPath(uri);    final String realPath=contextFolder + fullPath;    return getWildcardStreamLocator().locateStream(uri,new File(realPath));  }  final String uriWithoutPrefix=uri.replaceFirst(PREFIX,EMPTY);  final File file=new File(contextFolder,uriWithoutPrefix);  LOG.debug("Opening file: " + file.getPath());  return new FileInputStream(file);}  }
class C{  public void init(RecyclerView recyclerView,IDrawerItem... drawerItems){  if (drawerItems != null) {    for (    IDrawerItem d : drawerItems) {      if (!CACHE.containsKey(d.getType())) {        CACHE.put(d.getType(),new Stack<RecyclerView.ViewHolder>());      }      if (CACHE_SIZE == -1 || CACHE.get(d.getType()).size() <= CACHE_SIZE) {        CACHE.get(d.getType()).push(d.getViewHolder(recyclerView));      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.814 -0500",hash_original_method="7C42892213EAED0FE3F4CD66EF8B0266",hash_generated_method="18035E0C6E66CCE1B7A4D9DA9BCEB77C") public boolean selectArticle(int articleNumber) throws IOException {  return selectArticle(articleNumber,null);}  }
class C{  public NearestNeighbour(int k,VectorCollectionFactory<VecPaired<Vec,Double>> vcf){  this(k,false,new EuclideanDistance(),vcf);}  }
class C{  final public int yystate(){  return yy_lexical_state;}  }
class C{  public boolean hasEthernet(Context context){  if (TEST_RADIOS) {    return SystemProperties.get(TEST_RADIOS_PROP).contains("ethernet");  }  final ConnectivityManager conn=ConnectivityManager.from(context);  final boolean hasEthernet=conn.isNetworkSupported(TYPE_ETHERNET);  final long ethernetBytes;  if (mStatsSession != null) {    try {      ethernetBytes=mStatsSession.getSummaryForNetwork(NetworkTemplate.buildTemplateEthernet(),Long.MIN_VALUE,Long.MAX_VALUE).getTotalBytes();    } catch (    RemoteException e) {      throw new RuntimeException(e);    }  } else {    ethernetBytes=0;  }  return hasEthernet && ethernetBytes > 0;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean isGenerated(JavaContext context,Node node){  String packageName=context.getMainProject().getPackage();  Location nodeLocation=getNodeLocation(context,node);  String classLocationString=nodeLocation.getFile().toString().replaceAll("/",".");  int findPackage=classLocationString.lastIndexOf(packageName);  return classLocationString.substring(0,findPackage).contains("generated");}  }
class C{  public boolean isClear(){  for (int c=0; c <= MaxC; c++) {    for (int r=0; r <= MaxR; r++) {      if (!isClear(c,r)) {        return false;      }    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.268 -0500",hash_original_method="4DBB6701F2EF3CA3BC7975B2574ABC06",hash_generated_method="59C1B7C22F494966CF38AEC727F696D0") public ParserAdapter(Parser parser){  setup(parser);}  }
class C{  public void timesEquals(Complex c){  double tmp=real * c.real - imag * c.imag;  imag=real * c.imag + imag * c.real;  real=tmp;}  }
class C{  private static boolean isValidBase64Byte(byte b){  if (b == '=') {    return true;  } else   if (b < 0 || b >= 128) {    return false;  } else   if (decodingTable[b] == -1) {    return false;  }  return true;}  }
class C{  public ShortBufferException(){  super();}  }
class C{  protected void resetContainers(final boolean resetToEmpty){  if (resetToEmpty) {    compData.resetComponents(ATotalCount + FfieldCount,pageCount,false);  } else {    compData.resetComponents(ATotalCount + FfieldCount,pageCount,true);  }  if (formFactory == null) {    formFactory=formCreator.createFormFactory();    formFactory.reset(this.getFormResources(),formsActionHandler,pageData,currentPdfFile);  } else {    formFactory.reset(this.getFormResources(),formsActionHandler,pageData,currentPdfFile);  }}  }
class C{  public static String html2unicode(String text){  if (text == null)   return "";  text=CommonPattern.AMP_HTML.matcher(text).replaceAll("&");  int p=0, p1, q;  final StringBuilder sb=new StringBuilder(text.length());  String s;  Character r;  while (p < text.length()) {    p1=text.indexOf('&',p);    if (p1 < 0) {      sb.append(text,p,text.length());      break;    }    sb.append(text,p,p1);    p=p1;    if (p >= text.length()) {      break;    }    q=text.indexOf(';',p);    if (q < 0) {      sb.append(text,p,text.length());      break;    }    s=text.substring(p,q + 1);    p=q + 1;    int pp;    while ((pp=s.indexOf('&',1)) >= 0) {      sb.append(s.substring(0,pp));      s=s.substring(pp);    }    if (s.equals(AMP_HTML)) {      sb.append(AMP_UNICODE);      continue;    }    if (s.equals(SPACE_HTML)) {      sb.append(" ");      continue;    }    if ((r=HTML2UNICODE4XML.get(s)) != null) {      sb.append(r.charValue());      continue;    }    if ((r=HTML2UNICODE4HTML.get(s)) != null) {      sb.append(r);      continue;    }    if (s.charAt(1) == '#') {      if (s.charAt(2) == 'x' || s.charAt(2) == 'X') {        sb.append(new char[]{(char)Integer.parseInt(s.substring(3,s.length() - 1),16)});        continue;      }      String ucs=s.substring(2,s.length() - 1);      try {        int uc=Integer.parseInt(ucs);        sb.append(new char[]{(char)uc});      } catch (      final NumberFormatException e) {      }      continue;    }    sb.append(s);  }  return sb.toString();}  }
class C{  public byte[] toByteArray(){  byte[] p=new byte[48];  p[0]=(byte)(leapIndicator << 6 | version << 3 | mode);  p[1]=(byte)stratum;  p[2]=(byte)pollInterval;  p[3]=(byte)precision;  int l=(int)(rootDelay * 65536.0);  p[4]=(byte)((l >> 24) & 0xFF);  p[5]=(byte)((l >> 16) & 0xFF);  p[6]=(byte)((l >> 8) & 0xFF);  p[7]=(byte)(l & 0xFF);  long ul=(long)(rootDispersion * 65536.0);  p[8]=(byte)((ul >> 24) & 0xFF);  p[9]=(byte)((ul >> 16) & 0xFF);  p[10]=(byte)((ul >> 8) & 0xFF);  p[11]=(byte)(ul & 0xFF);  p[12]=referenceIdentifier[0];  p[13]=referenceIdentifier[1];  p[14]=referenceIdentifier[2];  p[15]=referenceIdentifier[3];  encodeTimestamp(p,16,referenceTimestamp);  encodeTimestamp(p,24,originateTimestamp);  encodeTimestamp(p,32,receiveTimestamp);  encodeTimestamp(p,40,transmitTimestamp);  return p;}  }
class C{  @Deprecated @Override public void toXML(final StringBuilder builder,final ConfigVerification errors){  throw new UnsupportedOperationException();}  }
class C{  public static void mergeWriteableFlags(FlagConfig source,FlagConfig target){  if (target.dimension != source.dimension) {    VerbatimLogger.info("Setting dimension of target config to: " + source.dimension + "\n");    target.dimension=source.dimension;  }  if (target.vectortype != source.vectortype) {    VerbatimLogger.info("Setting vectortype of target config to: " + source.vectortype + "\n");    target.vectortype=source.vectortype;  }  target.makeFlagsCompatible();}  }
class C{  public void insertRow() throws SQLException {  checkState();  rs.insertRow();  notifyRowChanged();}  }
class C{  public String toString(){  return "primary error: " + getPrimaryError() + " certificate: "+ getCertificate()+ " on URL: "+ getUrl();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (name.equals("AD_Client_ID"))     m_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DeleteOldImported"))     m_deleteOldImported="Y".equals(para[i].getParameter()); else     if (name.equals("IsImportPriceList"))     p_importPriceList="Y".equals(para[i].getParameter()); else     if (name.equals("IsImportPriceStd"))     p_importPriceStd="Y".equals(para[i].getParameter()); else     if (name.equals("IsImportPriceLimit"))     p_importPriceLimit="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public boolean isPaintable(){  return true;}  }
class C{  private void readSignature() throws Exception {  Element signatureElement=getFirstElementByTagName(document,dsElement(Constants._TAG_SIGNATURE));  xmlSignature=new XMLSignature(signatureElement,BASE_URI);}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeTemplates(this);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);}  }
class C{  private int useCount(){  return m_useCount2;}  }
class C{  @Override public void visitInnerClass(String name,String outerName,String innerName,int access){  if ((access & Opcodes.ACC_FINAL) == Opcodes.ACC_FINAL) {    finalClasses.add(name.replace('/','.'));  }  super.visitInnerClass(name,outerName,innerName,access & ~Opcodes.ACC_FINAL);}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public void importUsersAndMailsFromJames23(String james23MailRepositoryPath,String defaultPassword) throws MailRepositoryStoreException, MessagingException, UsersRepositoryException, DomainListException, MailboxException, IOException {  importUsersFromJames23(defaultPassword);  importMailsFromJames23(james23MailRepositoryPath);}  }
class C{  @Override public Object deepCopy(Object value) throws HibernateException {  return SerializationHelper.clone((Serializable)value);}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public void startDocument() throws IOException {}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:26.927 -0500",hash_original_method="21AA3C6AE5648A36F9E47AF2806112A8",hash_generated_method="88B5C779B056CC5DB7C5AB8E75A56537") public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public void connectionErrorOccurred(javax.sql.ConnectionEvent event){}  }
class C{  private View fillSpecific(int position,int top){  final int numColumns=mNumColumns;  int motionRowStart;  int motionRowEnd=-1;  if (!mStackFromBottom) {    motionRowStart=position - (position % numColumns);  } else {    final int invertedSelection=mItemCount - 1 - position;    motionRowEnd=mItemCount - 1 - (invertedSelection - (invertedSelection % numColumns));    motionRowStart=Math.max(0,motionRowEnd - numColumns + 1);  }  final View temp=makeRow(mStackFromBottom ? motionRowEnd : motionRowStart,top,true);  mFirstPosition=motionRowStart;  final View referenceView=mReferenceView;  if (referenceView == null) {    return null;  }  final int verticalSpacing=mVerticalSpacing;  View above;  View below;  if (!mStackFromBottom) {    above=fillUp(motionRowStart - numColumns,referenceView.getTop() - verticalSpacing);    adjustViewsUpOrDown();    below=fillDown(motionRowStart + numColumns,referenceView.getBottom() + verticalSpacing);    final int childCount=getChildCount();    if (childCount > 0) {      correctTooHigh(numColumns,verticalSpacing,childCount);    }  } else {    below=fillDown(motionRowEnd + numColumns,referenceView.getBottom() + verticalSpacing);    adjustViewsUpOrDown();    above=fillUp(motionRowStart - 1,referenceView.getTop() - verticalSpacing);    final int childCount=getChildCount();    if (childCount > 0) {      correctTooLow(numColumns,verticalSpacing,childCount);    }  }  if (temp != null) {    return temp;  } else   if (above != null) {    return above;  } else {    return below;  }}  }
class C{  public void loadAll(final Properties properties,final File file) throws Exception {  final BigdataSail sail=new BigdataSail(properties);  try {    final Repository repo=new BigdataSailRepository(sail);    repo.initialize();    final RepositoryConnection cxn=repo.getConnection();    cxn.setAutoCommit(false);    try {      final long stmtsBefore=sail.getDatabase().getStatementCount();      final long start=System.currentTimeMillis();      if (file.getName().endsWith(".zip") || file.getName().endsWith(".ZIP")) {        final InputStream is=new FileInputStream(file);        try {          final ZipInputStream zis=new ZipInputStream(new BufferedInputStream(is));          try {            ZipEntry ze=null;            while ((ze=zis.getNextEntry()) != null) {              if (ze.isDirectory()) {                continue;              }              final String name=ze.getName();              if (log.isInfoEnabled())               log.info(name);              final ByteArrayOutputStream baos=new ByteArrayOutputStream();              final byte[] bytes=new byte[4096];              int count;              while ((count=zis.read(bytes,0,4096)) != -1) {                baos.write(bytes,0,count);              }              baos.close();              final Reader reader=new InputStreamReader(new ByteArrayInputStream(baos.toByteArray()));              final String baseIRI=file.toURI() + "/" + name;              cxn.add(reader,baseIRI,RDFFormat.forFileName(name));              final long elapsed=System.currentTimeMillis() - start;              final long stmtsAfter=sail.getDatabase().getStatementCount();              final long stmtsAdded=stmtsAfter - stmtsBefore;              final int throughput=(int)((double)stmtsAdded / (double)elapsed * 1000d);              System.err.println("loaded: " + name + " : "+ stmtsAdded+ " stmts in "+ elapsed+ " millis: "+ throughput+ " stmts/sec");              logCounters(sail);            }          }  finally {            zis.close();          }        }  finally {          is.close();        }      } else       if (file.isDirectory()) {        final File[] files=file.listFiles(new RDFFilenameFilter());        if (files != null) {          int nloaded=0;          for (          File f : files) {            final Reader reader=new InputStreamReader((f.getName().endsWith(".gz") || f.getName().endsWith(".GZ") ? new GZIPInputStream(new FileInputStream(f)) : new FileInputStream(f)));            try {              final String baseIRI=file.toURI().toString();              cxn.add(reader,baseIRI,RDFFormat.forFileName(f.getName()));              final long elapsed=System.currentTimeMillis() - start;              final long stmtsAfter=sail.getDatabase().getStatementCount();              final long stmtsAdded=stmtsAfter - stmtsBefore;              final int throughput=(int)((double)stmtsAdded / (double)elapsed * 1000d);              nloaded++;              System.err.println("loaded: " + f + " : "+ stmtsAdded+ " stmts"+ " in "+ elapsed+ " millis"+ " : "+ throughput+ " stmts/sec"+ ", nloaded="+ nloaded);              logCounters(sail);            }  finally {              reader.close();            }          }        }      } else       if (file.isFile()) {        final Reader reader=new InputStreamReader(new FileInputStream(file));        try {          final String baseIRI=file.toURI().toString();          cxn.add(reader,baseIRI,RDFFormat.forFileName(file.getName()));          final long elapsed=System.currentTimeMillis() - start;          final long stmtsAfter=sail.getDatabase().getStatementCount();          final long stmtsAdded=stmtsAfter - stmtsBefore;          final int throughput=(int)((double)stmtsAdded / (double)elapsed * 1000d);          System.err.println("loaded: " + file + " : "+ stmtsAdded+ " stmts in "+ elapsed+ " millis: "+ throughput+ " stmts/sec");          logCounters(sail);        }  finally {          reader.close();        }      } else {        System.err.println("Can not load: " + file);      }      cxn.commit();      final long elapsed=System.currentTimeMillis() - start;      final long stmtsAfter=sail.getDatabase().getStatementCount();      final long stmtsAdded=stmtsAfter - stmtsBefore;      final int throughput=(int)((double)stmtsAdded / (double)elapsed * 1000d);      System.err.println("statements after: " + stmtsAfter);      System.err.println("loaded: " + stmtsAdded + " in "+ elapsed+ " millis: "+ throughput+ " stmts/sec");      logCounters(sail);    } catch (    Exception ex) {      cxn.rollback();      throw ex;    } finally {      cxn.close();    }  }  finally {    sail.shutDown();  }}  }
class C{  private Collection copyCollection(final Collection collection){  final ArrayList newCollection=new ArrayList();  if (collection == null || collection.isEmpty()) {    return newCollection;  }  collection.iterator().forEachRemaining(null);  return newCollection;}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static Set<Repository> toRepositoryList(Vector<Object> repositoriesParams){  Set<Repository> repositories=new TreeSet<Repository>();  for (  Object repositoryParams : repositoriesParams) {    repositories.add(toRepository((Vector<Object>)repositoryParams));  }  return repositories;}  }
class C{  public Task<NetworkSystemRestRep> discover(URI id){  return postTask(getIdUrl() + "/discover",id);}  }
class C{  public JPaymentCustom(JPaymentNotifier notifier,String sCustom,DataLogicSystem dlSystem){  m_notifier=notifier;  m_sCustom=sCustom;  initComponents();  m_jTendered.addPropertyChangeListener("Edition",new RecalculateState());  m_jTendered.addEditorKeys(m_jKeys);  String code=dlSystem.getResourceAsXML("payment.custom");  if (code != null) {    try {      ScriptEngine script=ScriptFactory.getScriptEngine(ScriptFactory.BEANSHELL);      script.put("payment",new ScriptPaymentCash(dlSystem));      script.eval(code);    } catch (    ScriptException e) {      MessageInf msg=new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString("message.cannotexecute"),e);      msg.show(this);    }  }}  }
class C{  public static void closeOutputStream(OutputStream stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing ByteArrayOutputStream." + e);    }  }}  }
class C{  public static Gson exposeGson(){  return new ProviderModule().provideGson(CONFIG);}  }
class C{  static void checkInternalName(final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (name.charAt(0) == '[') {    checkDesc(name,false);  } else {    checkInternalName(name,0,-1,msg);  }}  }
class C{  private void loadAuthenticationErrorActivity(){  Intent intent=new Intent(AlreadyRegisteredActivity.this,AuthenticationErrorActivity.class);  intent.putExtra(getResources().getString(R.string.intent_extra_regid),regId);  intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),AlreadyRegisteredActivity.class.getSimpleName());  startActivity(intent);}  }
class C{  public char consume(){  return queue.charAt(pos++);}  }
class C{  public static void removeAllPrefrences(Context context,String PREFS_FILE_NAME){  prefs=context.getSharedPreferences(PREFS_FILE_NAME,Context.MODE_PRIVATE);  Editor editor=prefs.edit();  editor.clear();  editor.apply();}  }
class C{  public static void clearCache(){  strokeMap.clear();}  }
class C{  public static void init(final CommandsMap commandsMap,final OptionsMap optionsMap){  Check.notNull(commandsMap,"commandsMap");  Check.notNull(optionsMap,"optionsMap");  Help.commandsMap=commandsMap;  Help.optionsMap=optionsMap;}  }
class C{  private void touchEventsCancelled(){  final View mobileView=getViewForID(mMobileItemId);  if (mCellIsMobile) {    mMobileItemId=INVALID_ID;    mobileView.setVisibility(VISIBLE);    mHoverCell=null;    invalidate();  }  mCellIsMobile=false;  mIsMobileScrolling=false;  mActivePointerId=INVALID_POINTER_ID;}  }
class C{  public PutRepositoryRequest source(BytesReference repositoryDefinition){  try (XContentParser parser=XContentFactory.xContent(repositoryDefinition).createParser(repositoryDefinition)){    return source(parser.mapOrdered());  } catch (  IOException e) {    throw new IllegalArgumentException("failed to parse template source",e);  }}  }
class C{  public void testInvokeAll1() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    try {      e.invokeAll(null);      shouldThrow();    } catch (    NullPointerException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  private long nextSeed(){  return seed+=gamma;}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,char[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public MatrixOfVecs(List<Vec> rows){  this.rows=new ArrayList<Vec>(rows);  int cols=rows.get(0).length();  for (  Vec v : rows)   if (cols != v.length())   throw new IllegalArgumentException("Row vectors must all be of the same length");}  }
class C{  private void logOperatorExecutionTime(Operator operator,long executionTime){  logCountSumMinMax(TYPE_OPERATOR,operator.getOperatorDescription().getKey(),OPERATOR_RUNTIME,executionTime);}  }
class C{  public void put(byte[] source){  if (mBuffer.capacity() < (mLength + source.length)) {    expandBuffer(mLength + source.length + ADDITIONAL_BUFFER_SIZE);  }  mBuffer.put(source);  mLength+=source.length;}  }
class C{  public WebDAVContentStore(String root,Logger log,boolean offline,int timeout,Proxy proxy,String apiVersion){  super(root,log,offline,timeout,proxy,apiVersion);  this.repository=new WebDAVRepository(timeout,null,null);}  }
class C{  public static VeriniceLinkTable read(String fullPath){  try {    BufferedReader br=new BufferedReader(new FileReader(fullPath));    return gson.fromJson(br,VeriniceLinkTable.class);  } catch (  JsonParseException e) {    String message="Parse error while reading JSON file for Link-Table configuration: " + fullPath;    LOG.error(message,e);    throw new LinkTableException(message,e);  }catch (  FileNotFoundException e) {    String message="JSON with Link-Table configuration not found: " + fullPath;    LOG.error(message,e);    throw new LinkTableException(message,e);  }}  }
class C{  public boolean hasMorpheme(){  return morpheme != null;}  }
class C{  private void removeServiceLocked(Service service,UserState userState){  userState.mBoundServices.remove(service);  userState.mComponentNameToServiceMap.remove(service.mComponentName);  service.unlinkToOwnDeathLocked();}  }
class C{  public boolean isPreventLooping(){  return preventLooping;}  }
class C{  public boolean equals(Object object){  if (object == this)   return true;  if (object instanceof QName) {    QName qname=(QName)object;    String thisnamespace=getNamespaceURI();    String thatnamespace=qname.getNamespaceURI();    return getLocalName().equals(qname.getLocalName()) && (((null != thisnamespace) && (null != thatnamespace)) ? thisnamespace.equals(thatnamespace) : ((null == thisnamespace) && (null == thatnamespace)));  } else   return false;}  }
class C{  public boolean removeTuple(Tuple t){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  @Field(17) public Pointer<CLong> plVal(){  return this.io.getPointerField(this,17);}  }
class C{  @Override public Phase initialPhase(){  return left;}  }
class C{  public void scrollLineToVisible(int line,int margin){  int maxMargin=(parentHeight() - 20) / 2;  if (margin > maxMargin) {    margin=Math.max(0,maxMargin);  }  scrollLineToVisibleImpl(line,margin);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  protected NameEnvironmentAnswer find(String typeName,String packageName){  if (packageName == null)   packageName=IPackageFragment.DEFAULT_PACKAGE_NAME;  if (this.owner != null) {    String source=this.owner.findSource(typeName,packageName);    if (source != null) {      ICompilationUnit cu=new BasicCompilationUnit(source.toCharArray(),CharOperation.splitOn('.',packageName.toCharArray()),typeName + Util.defaultJavaExtension());      return new NameEnvironmentAnswer(cu,null);    }  }  NameLookup.Answer answer=this.nameLookup.findType(typeName,packageName,false,NameLookup.ACCEPT_ALL,this.checkAccessRestrictions);  if (answer != null) {    if (answer.type instanceof BinaryType) {      try {        return new NameEnvironmentAnswer((IBinaryType)((BinaryType)answer.type).getElementInfo(),answer.restriction);      } catch (      JavaModelException npe) {      }    } else {      try {        SourceTypeElementInfo sourceType=(SourceTypeElementInfo)((SourceType)answer.type).getElementInfo();        ISourceType topLevelType=sourceType;        while (topLevelType.getEnclosingType() != null) {          topLevelType=topLevelType.getEnclosingType();        }        IType[] types=sourceType.getHandle().getCompilationUnit().getTypes();        ISourceType[] sourceTypes=new ISourceType[types.length];        sourceTypes[0]=sourceType;        int length=types.length;        for (int i=0, index=1; i < length; i++) {          ISourceType otherType=(ISourceType)((JavaElement)types[i]).getElementInfo();          if (!otherType.equals(topLevelType) && index < length)           sourceTypes[index++]=otherType;        }        return new NameEnvironmentAnswer(sourceTypes,answer.restriction);      } catch (      JavaModelException jme) {        if (jme.isDoesNotExist() && String.valueOf(TypeConstants.PACKAGE_INFO_NAME).equals(typeName)) {          return new NameEnvironmentAnswer((ICompilationUnit)answer.type.getParent(),answer.restriction);        }      }    }  }  return null;}  }
class C{  public void addListener(final IDebugEventListener listener){  listeners.addListener(listener);}  }
class C{  public static ReilInstruction createUnknown(final Address address){  return new ReilInstruction(address,ReilMnemonics.UNKNOWN,ReilOperand.EMPTY_OPERAND,ReilOperand.EMPTY_OPERAND,ReilOperand.EMPTY_OPERAND);}  }
class C{  public IpInterfaceRestRep deregister(URI id){  return client.post(IpInterfaceRestRep.class,getIdUrl() + "/deregister",id);}  }
class C{  public static CssSchema withProperties(Iterable<? extends String> propertyNames){  ImmutableMap.Builder<String,Property> propertiesBuilder=ImmutableMap.builder();  for (  String propertyName : propertyNames) {    Property prop=DEFINITIONS.get(propertyName);    if (prop == null) {      throw new IllegalArgumentException(propertyName);    }    propertiesBuilder.put(propertyName,prop);  }  return new CssSchema(propertiesBuilder.build());}  }
class C{  public void update(Statistics statistics){  mDaoSession.update(statistics);}  }
class C{  public void add(String fieldName,String value){  if (fieldName == null)   throw new IllegalArgumentException("fieldname == null");  if (value == null)   throw new IllegalArgumentException("value == null");  if (fieldName.length() == 0 || fieldName.indexOf('\0') != -1 || value.indexOf('\0') != -1) {    throw new IllegalArgumentException("Unexpected header: " + fieldName + ": "+ value);  }  addLenient(fieldName,value);}  }
class C{  public void flush() throws IOException {  out.flush();}  }
class C{  public static byte[] decodeHex(final char[] data) throws HexDecodeException {  final int len=data.length;  if ((len & 0x01) != 0) {    throw new HexDecodeException("Odd number of characters.");  }  final byte[] out=new byte[len >> 1];  for (int i=0, j=0; j < len; i++) {    int f=toDigit(data[j],j) << 4;    j++;    f=f | toDigit(data[j],j);    j++;    out[i]=(byte)(f & 0xFF);  }  return out;}  }
class C{  public final void freeBuffers(){  byte[] buf=mBuffer;  if (buf != null) {    mBuffer=null;    mContext.releaseReadIOBuffer(buf);  }}  }
class C{  public MapSettableTransformer(Map<I,O> m){  this.map=m;}  }
class C{  private static JFreeChart createChart(){  Number[][] data=new Integer[][]{{new Integer(-3),new Integer(-2)},{new Integer(-1),new Integer(1)},{new Integer(2),new Integer(3)}};  CategoryDataset dataset=DatasetUtilities.createCategoryDataset("S","C",data);  return ChartFactory.createStackedBarChart("Stacked Bar Chart","Domain","Range",dataset,PlotOrientation.HORIZONTAL,true,true,true);}  }
class C{  public final AssertSubscriber<T> configureValuesStorage(boolean enabled){  this.valuesStorage=enabled;  return this;}  }
class C{  public NodeIterator selectNodeIterator(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XObject list=eval(contextNode,str,namespaceNode);  return list.nodeset();}  }
class C{  @Override public void pause(){  stopDecoderThread();  super.pause();}  }
class C{  private void drawBackground(){  final Display display=this.getDisplay();  final Rectangle rect=this.getClientArea();  final Image newImage=new Image(display,Math.max(1,rect.width),Math.max(1,rect.height));  final GC gc=new GC(newImage);  gc.setForeground(this.gradientStart);  gc.setBackground(this.gradientEnd);  gc.fillGradientRectangle(rect.x,rect.y,rect.width,rect.height,false);  gc.setForeground(this.separatorColor);  gc.drawLine(rect.x,rect.y + rect.height - 1,rect.x + rect.width,rect.y + rect.height - 1);  gc.dispose();  this.setBackgroundImage(newImage);  if (this.previousGeneratedImage != null) {    this.previousGeneratedImage.dispose();  }  this.previousGeneratedImage=newImage;}  }
class C{  @SuppressWarnings("unchecked") @Override public void initGui(){  Keyboard.enableRepeatEvents(true);  buttonList.clear();  buttonList.add(new GuiButton(0,width / 2 - 100,height / 4 + 120 + 12,"Add"));  buttonList.add(new GuiButton(1,width / 2 - 100,height / 4 + 144 + 12,"Cancel"));  nameBox=new GuiTextField(0,fontRendererObj,width / 2 - 100,80,200,20);  nameBox.setFocused(true);}  }
class C{  public void testOldProperty() throws Exception {  checkMembers("method_depends_on_old_property(self)");  Assert.assertThat("Method on old property dependency failed",getErrorMemberNames(),Matchers.containsInAnyOrder("old_property","old_property_2","old_property_3"));}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  JokeCacheDao.dropTable(db,ifExists);  FreshNewsCacheDao.dropTable(db,ifExists);  PictureCacheDao.dropTable(db,ifExists);  SisterCacheDao.dropTable(db,ifExists);  VideoCacheDao.dropTable(db,ifExists);}  }
class C{  public static void deleteLocatorStateFile(final int... ports){  for (int index=0; index < ports.length; index++) {    File stateFile=new File("locator" + ports[index] + "view.dat");    if (stateFile.exists()) {      stateFile.delete();    }  }}  }
class C{  public boolean increment(double key){  return adjustValue(key,1);}  }
class C{  private static void showUserAnnotations(Service service) throws IOException, ServiceException {  VolumeFeed volumeFeed=service.getFeed(new URL(USER_ANNOTATION_FEED),VolumeFeed.class);  printVolumeFeed(volumeFeed);}  }
class C{  public static Double checkLongitude(String name,Double longitude){  if (longitude == null) {    throw new IndexException("{} required",name);  } else   if (longitude < MIN_LONGITUDE || longitude > MAX_LONGITUDE) {    throw new IndexException("{} must be in range [{}, {}], but found {}",name,MIN_LONGITUDE,MAX_LONGITUDE,longitude);  }  return longitude;}  }
class C{  public void testConnect_ClosedChannelException() throws IOException {  assertFalse(this.channel1.isConnected());  this.channel1.close();  assertFalse(this.channel1.isOpen());  try {    this.channel1.connect(localAddr1);    fail("Should throw ClosedChannelException.");  } catch (  ClosedChannelException e) {  }}  }
class C{  public boolean isEmpty(){  return membersAndLastSeen.isEmpty();}  }
class C{  public void execute(){  if (regressorNames == null || regressorNames.isEmpty() || targetName == null) {    report="Response and predictor variables not set.";    outGraph=new EdgeListGraph();    return;  }  if (regressorNames.contains(targetName)) {    report="Response must not be a predictor.";    outGraph=new EdgeListGraph();    return;  }  DataSet regressorsDataSet=dataSets.get(getModelIndex()).copy();  Node target=regressorsDataSet.getVariable(targetName);  regressorsDataSet.removeColumn(target);  List<String> names=regressorsDataSet.getVariableNames();  List<Node> regressorNodes=new ArrayList<>();  for (  String s : regressorNames) {    regressorNodes.add(dataSets.get(getModelIndex()).getVariable(s));  }  if (regressorNames.size() > 0) {    for (    String name1 : names) {      Node regressorVar=regressorsDataSet.getVariable(name1);      if (!regressorNames.contains(regressorVar.getName())) {        regressorsDataSet.removeColumn(regressorVar);      }    }  }  int ncases=regressorsDataSet.getNumRows();  int nvars=regressorsDataSet.getNumColumns();  double[][] regressors=new double[nvars][ncases];  for (int i=0; i < nvars; i++) {    for (int j=0; j < ncases; j++) {      regressors[i][j]=regressorsDataSet.getDouble(j,i);    }  }  LogisticRegression logRegression=new LogisticRegression(dataSets.get(getModelIndex()));  logRegression.setAlpha(alpha);  this.result=logRegression.regress((DiscreteVariable)target,regressorNodes);}  }
class C{  public boolean equals(Object otherObj){  if (otherObj instanceof Action) {    Action otherAction=(Action)otherObj;    String otherDescription=otherAction.getDescription();    String otherVerb=otherAction.getVerb();    String otherCommand=otherAction.getCommand();    if ((description == null ? otherDescription == null : description.equals(otherDescription)) && (verb == null ? otherVerb == null : verb.equals(otherVerb)) && (command == null ? otherCommand == null : command.equals(otherCommand))) {      return true;    }  }  return false;}  }
class C{  @Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){  setSelection(position);}  }
class C{  @SuppressWarnings({"rawtypes"}) public int[] findItemSlots(@Nonnull IInventory inv,@Nonnull List expected){  return findItemSlots(inv,expected,null);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void add(Block block,Object key){  this.blocks.add(block);  this.arrangement.add(block,key);}  }
class C{  public Boolean isFixedTopicSet(){  return fixedTopicSet;}  }
class C{  public static boolean propertyValueEquals(String resource,String name,String compareString){  String value=getPropertyValue(resource,name);  if (value == null)   return false;  return value.trim().equals(compareString);}  }
class C{  protected void onSendSuccess(RecordBuffer<R> buffer){  sendSuccess.incrementAndGet();  logger.trace("{}:{} Send SUCCESS",name(),buffer);  try {    checkpointer.saveCheckpoint(buffer);  } catch (  Exception e) {    logger.error("{}:{} Error in onSendSuccess",name(),buffer,e);  }}  }
class C{  boolean isRunning(){  return _isRunning;}  }
class C{  protected void sequence_StringEvaluator(ISerializationContext context,StringEvaluator semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.STRING_EVALUATOR__TOTO) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.STRING_EVALUATOR__TOTO));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.STRING_EVALUATOR__EXPR) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.STRING_EVALUATOR__EXPR));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getStringEvaluatorAccess().getTotoIDTerminalRuleCall_0_0(),semanticObject.getToto());  feeder.accept(grammarAccess.getStringEvaluatorAccess().getExprExpressionParserRuleCall_2_0(),semanticObject.getExpr());  feeder.finish();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.221 -0400",hash_original_method="5CA3F4E55230C1BE0E77A65DF87A61F3",hash_generated_method="62B47741E6411FB99A359675A736593A") private int checkInterruptWhileWaiting(Node node){  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;}  }
class C{  public static URI resolve(final URI baseURI,URI reference){  if (baseURI == null) {    throw new IllegalArgumentException("Base URI may nor be null");  }  if (reference == null) {    throw new IllegalArgumentException("Reference URI may nor be null");  }  boolean emptyReference=reference.toString().length() == 0;  if (emptyReference) {    reference=URI.create("#");  }  URI resolved=baseURI.resolve(reference);  if (emptyReference) {    String resolvedString=resolved.toString();    resolved=URI.create(resolvedString.substring(0,resolvedString.indexOf('#')));  }  return resolved;}  }
class C{  public TFloatHash(int initialCapacity){  super(initialCapacity);  _hashingStrategy=this;}  }
class C{  @Override public void run(){  amIActive=true;  RandomAccessFile rIn=null;  ByteBuffer buf;  String inputFilesString=null;  String[] XYZFiles;  double x, y, north, south, east, west;  double z;  float minValue, maxValue;  float featureValue;  int numVertices;  byte classValue, numReturns, returnNum;  int a, n, loc, featureNum=1;  int progress=0;  int numPoints=0;  String delimiter=" ";  ShapeType shapeType=ShapeType.POINT;  boolean firstLineHeader=false;  String fileExtension=".txt";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    XYZFiles=inputFilesString.split(";");    int numZYZFiles=XYZFiles.length;    shapeType=ShapeType.POINT;    for (int j=0; j < numZYZFiles; j++) {      String fileName=XYZFiles[j];      File file=new File(fileName);      if (!file.exists()) {        return;      }      DBFField fields[]=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("Z");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(3);      fileExtension=FileUtilities.getFileExtension(fileName);      String outputFile=fileName.replace("." + fileExtension,".shp");      File outfile=new File(outputFile);      if (outfile.exists()) {        outfile.delete();      }      ShapeFile output=new ShapeFile(outputFile,shapeType,fields);      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(file);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        j=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((j > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            z=Double.parseDouble(str[2]);            whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(x,y);            Object[] rowData=new Object[1];            rowData[0]=new Double(z);            output.addRecord(wbGeometry,rowData);          }          j++;        }        in.close();        br.close();      } catch (      java.io.IOException e) {        myHost.showFeedback("An error has occurred during operation. See log file for details.");        myHost.logException("Error in " + getDescriptiveName(),e);      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }      output.write();    }    returnData(XYZFiles[0].replace("." + fileExtension,".shp"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    if (rIn != null) {      try {        rIn.close();      } catch (      Exception e) {      }    }    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void waitForIslands(){  output.message("Waiting for islands:");synchronized (islands) {    Iterator keys=islands.iterator();    while (keys.hasNext())     output.message(((Address)keys.next()).name);  }  while (islands.size() > 0)   Thread.yield();}  }
class C{  public LiteralOrComputedPropertyName createLiteralOrComputedPropertyName(){  LiteralOrComputedPropertyNameImpl literalOrComputedPropertyName=new LiteralOrComputedPropertyNameImpl();  return literalOrComputedPropertyName;}  }
class C{  private String[] prepareLoadStatements(){  PersistenceSettings settings=persistenceSettings.getKeyPersistenceSettings();  boolean pojoStrategy=PersistenceStrategy.POJO == settings.getStrategy();  Collection<String> keyCols=settings.getTableColumns();  StringBuilder hdrWithKeyFields=new StringBuilder();  for (  String column : keyCols) {    if (pojoStrategy && settings.getFieldByColumn(column).calculatedField())     continue;    if (hdrWithKeyFields.length() > 0)     hdrWithKeyFields.append(", ");    hdrWithKeyFields.append("\"").append(column).append("\"");  }  settings=persistenceSettings.getValuePersistenceSettings();  pojoStrategy=PersistenceStrategy.POJO == settings.getStrategy();  Collection<String> valCols=settings.getTableColumns();  StringBuilder hdr=new StringBuilder();  for (  String column : valCols) {    if (pojoStrategy && settings.getFieldByColumn(column).calculatedField())     continue;    if (hdr.length() > 0)     hdr.append(", ");    hdr.append("\"").append(column).append("\"");    if (!keyCols.contains(column))     hdrWithKeyFields.append(", \"").append(column).append("\"");  }  hdrWithKeyFields.insert(0,"select ");  hdr.insert(0,"select ");  StringBuilder statement=new StringBuilder();  statement.append(" from \"");  statement.append(persistenceSettings.getKeyspace());  statement.append("\".\"%1$s");  statement.append("\" where ");  int i=0;  for (  String column : keyCols) {    if (i > 0)     statement.append(" and ");    statement.append("\"").append(column).append("\"=?");    i++;  }  statement.append(";");  return new String[]{hdrWithKeyFields + statement.toString(),hdr + statement.toString()};}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  public boolean appliesTo(Branch.NameKey branch){  for (  RefSpec r : matchingRefSpecs) {    if (r.matchSource(branch.get())) {      return true;    }  }  for (  RefSpec r : multiMatchRefSpecs) {    if (r.matchSource(branch.get())) {      return true;    }  }  return false;}  }
class C{  @Override public Course findById(Long courseId){  Course course=this.courseRepository.findById(courseId).orElseThrow(null);  return course;}  }
class C{  public void tryToDeleteFileTransfers(ContactId contact){  mImDeleteOperationHandler.post(new OneToOneFileTransferDeleteTask(mFileTransferService,this,mLocalContentResolver,contact));}  }
class C{  public final Iterator<String> categoriesIterator(){  return mCategories != null ? mCategories.iterator() : null;}  }
class C{  public static final Region createRegion(){  return new Region();}  }
class C{  public DelayInfo(DelayInformation delay){  super(delay.getStamp());  wrappedInfo=delay;}  }
class C{  public void createSubUsageScenario02() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(2);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO02_PERUNIT_WEEK",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO02_PERUNIT_WEEK",serviceDetails,basicSetup.getSecondCustomerUser2(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(1.3);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO02_PERUNIT_WEEK",subDetails);}  }
class C{  public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof Extension))   return false;  Extension otherExt=(Extension)other;  if (critical != otherExt.critical)   return false;  if (!extensionId.equals((Object)otherExt.extensionId))   return false;  return Arrays.equals(extensionValue,otherExt.extensionValue);}  }
class C{  private void parseAttributes(TypedArray a){  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_barWidth,barWidth);  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_rimWidth,rimWidth);  spinSpeed=(int)a.getDimension(R.styleable.ProgressWheel_spinSpeed,spinSpeed);  delayMillis=a.getInteger(R.styleable.ProgressWheel_delayMillis,delayMillis);  if (delayMillis < 0) {    delayMillis=0;  }  barColor=a.getColor(R.styleable.ProgressWheel_barColor,barColor);  barLength=(int)a.getDimension(R.styleable.ProgressWheel_barLength,barLength);  textSize=(int)a.getDimension(R.styleable.ProgressWheel_textSize,textSize);  textColor=(int)a.getColor(R.styleable.ProgressWheel_textColor,textColor);  if (a.hasValue(R.styleable.ProgressWheel_text)) {    setText(a.getString(R.styleable.ProgressWheel_text));  }  rimColor=(int)a.getColor(R.styleable.ProgressWheel_rimColor,rimColor);  circleColor=(int)a.getColor(R.styleable.ProgressWheel_circleColor,circleColor);  contourColor=a.getColor(R.styleable.ProgressWheel_contourColor,contourColor);  contourSize=a.getDimension(R.styleable.ProgressWheel_contourSize,contourSize);  a.recycle();}  }
class C{  List<String> expand(String word,Set<String> dict){  List<String> res=new ArrayList<String>();  for (int i=0; i < word.length(); i++) {    for (char ch='a'; ch <= 'z'; ch++) {      char[] chs=word.toCharArray();      if (ch != chs[i]) {        chs[i]=ch;        String next=new String(chs);        if (dict.contains(next))         res.add(next);      }    }  }  return res;}  }
class C{  public static int ECONNABORTED(){  return Errno.ECONNABORTED.intValue();}  }
class C{  public void toggle(Animation animIn,Animation animOut){  toggle(true,animIn,animOut);}  }
class C{  public static boolean isDirectory(File f){  boolean isDirectory=false;  try {    isDirectory=f.isDirectory();  } catch (  SecurityException se) {    if (Trace.pathResolver) {      Trace.trace(se.getMessage());    }  }  return isDirectory;}  }
class C{  public void addMemberValue(int nameIndex,MemberValue value){  Pair p=new Pair();  p.name=nameIndex;  p.value=value;  addMemberValue(p);}  }
class C{  public void stop(){  if (isReading) {    shouldStop=true;  }}  }
class C{  public void init(boolean forWrapping,CipherParameters param){  this.forWrapping=forWrapping;  this.engine=new CBCBlockCipher(new DESedeEngine());  SecureRandom sr;  if (param instanceof ParametersWithRandom) {    ParametersWithRandom pr=(ParametersWithRandom)param;    param=pr.getParameters();    sr=pr.getRandom();  } else {    sr=new SecureRandom();  }  if (param instanceof KeyParameter) {    this.param=(KeyParameter)param;    if (this.forWrapping) {      this.iv=new byte[8];      sr.nextBytes(iv);      this.paramPlusIV=new ParametersWithIV(this.param,this.iv);    }  } else   if (param instanceof ParametersWithIV) {    this.paramPlusIV=(ParametersWithIV)param;    this.iv=this.paramPlusIV.getIV();    this.param=(KeyParameter)this.paramPlusIV.getParameters();    if (this.forWrapping) {      if ((this.iv == null) || (this.iv.length != 8)) {        throw new IllegalArgumentException("IV is not 8 octets");      }    } else {      throw new IllegalArgumentException("You should not supply an IV for unwrapping");    }  }}  }
class C{  public void clear(){  clearFlags();  clearMem();  addressOutOfRange=false;  clearReg();  fpu.clear();}  }
class C{  public static String decrypt(String encrypted) throws GeneralSecurityException {  return new String(decrypt(encrypted.getBytes()));}  }
class C{  protected SpiderScanResult(String uri,String method,String flags,boolean processed){  super();  this.uri=uri;  this.method=method;  this.flags=flags;  this.processed=processed;}  }
class C{  public synchronized void evictAll() throws IOException {  initialize();  for (  Entry entry : lruEntries.values().toArray(new Entry[lruEntries.size()])) {    removeEntry(entry);  }}  }
class C{  private Path convert(IgfsPath path){  return new Path(IGFS_SCHEME,uriAuthority,path.toString());}  }
class C{  public void disconnected(){  if (false)   Log.v("ddm-hello","Disconnected!");}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.CONSTRAINT_BODY___CONSTRAINT_EXPR_1:    getConstraintExpr_1().clear();  getConstraintExpr_1().addAll((Collection<? extends ConstraintExpr_>)newValue);return;case UmplePackage.CONSTRAINT_BODY___ANONYMOUS_CONSTRAINT_BODY_11:getAnonymous_constraintBody_1_1().clear();getAnonymous_constraintBody_1_1().addAll((Collection<? extends Anonymous_constraintBody_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static Bitmap decodeImage(ContentResolver resolver,Uri uri,BitmapFactory.Options options) throws FileNotFoundException {  do {    InputStream stream=null;    try {      stream=resolver.openInputStream(uri);      return BitmapFactory.decodeStream(stream,EMPTY_RECT,options);    } catch (    OutOfMemoryError e) {      options.inSampleSize*=2;    } finally {      closeSafe(stream);    }  } while (options.inSampleSize <= 512);  throw new RuntimeException("Failed to decode image: " + uri);}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  private void updateCellHeights(){  if (textArea != null) {    cellHeight=textArea.getLineHeight();    ascent=textArea.getMaxAscent();  } else {    cellHeight=20;    ascent=5;  }  repaint();}  }
class C{  public cite removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  static boolean hostExcludedFromProxyEnvironment(final URI serverURI,String nonProxyHosts){  if (serverURI == null || serverURI.getHost() == null || nonProxyHosts == null) {    return false;  }  nonProxyHosts=nonProxyHosts.trim();  if (nonProxyHosts.length() == 0) {    return false;  }  if ("*".equals(nonProxyHosts)) {    return true;  }  final String serverHost=serverURI.getHost();  int serverPort=serverURI.getPort();  if (serverPort == -1) {    try {      serverPort=Protocol.getProtocol(serverURI.getScheme().toLowerCase()).getDefaultPort();    } catch (    final IllegalStateException e) {      serverPort=80;    }  }  for (  String nonProxyHost : nonProxyHosts.split(",")) {    int nonProxyPort=-1;    if (nonProxyHost.contains(":")) {      final String[] nonProxyParts=nonProxyHost.split(":",2);      nonProxyHost=nonProxyParts[0];      try {        nonProxyPort=Integer.parseInt(nonProxyParts[1]);      } catch (      final Exception e) {        log.warn(MessageFormat.format("Could not parse port in non_proxy setting: {0}, ignoring port",nonProxyParts[1]));      }    }    if (nonProxyPort != -1 && serverPort != nonProxyPort) {      continue;    }    if (LocaleInvariantStringHelpers.caseInsensitiveEndsWith(serverHost,nonProxyHost)) {      return true;    }  }  return false;}  }
class C{  public String formatDateLongStyle(Date d){  return d.toString();}  }
class C{  public void testExplicitPartitions() throws Exception {  if (versionMeetsMinimum(5,6,5)) {    Connection c=null;    String datadir=null;    Properties props=new NonRegisteringDriver().parseURL(dbUrl,null);    String dbname=props.getProperty(NonRegisteringDriver.DBNAME_PROPERTY_KEY);    props=new Properties();    props.setProperty("useServerPrepStmts","true");    try {      this.stmt.executeUpdate("SET @old_default_storage_engine = @@default_storage_engine");      this.stmt.executeUpdate("SET @@default_storage_engine = 'InnoDB'");      c=getConnectionWithProps(props);      createTable("testExplicitPartitions","(a INT NOT NULL, b varchar (64), INDEX (b,a), PRIMARY KEY (a)) ENGINE = InnoDB" + " PARTITION BY RANGE (a) SUBPARTITION BY HASH (a) SUBPARTITIONS 2" + " (PARTITION pNeg VALUES LESS THAN (0) (SUBPARTITION subp0, SUBPARTITION subp1),"+ " PARTITION `p0-9` VALUES LESS THAN (10) (SUBPARTITION subp2, SUBPARTITION subp3),"+ " PARTITION `p10-99` VALUES LESS THAN (100) (SUBPARTITION subp4, SUBPARTITION subp5),"+ " PARTITION `p100-99999` VALUES LESS THAN (100000) (SUBPARTITION subp6, SUBPARTITION subp7))");      this.stmt.executeUpdate("INSERT INTO testExplicitPartitions PARTITION (pNeg, pNeg) VALUES (-1, \"pNeg(-subp1)\")");      this.pstmt=this.conn.prepareStatement("INSERT INTO testExplicitPartitions PARTITION (pNeg, subp0) VALUES (-3, \"pNeg(-subp1)\")");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt.execute();      this.pstmt=c.prepareStatement("INSERT INTO testExplicitPartitions PARTITION (pNeg, subp0) VALUES (-2, \"(pNeg-)subp0\")");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.pstmt.execute();      this.pstmt=c.prepareStatement("INSERT INTO testExplicitPartitions PARTITION (`p100-99999`) VALUES (100, \"`p100-99999`(-subp6)\"), (101, \"`p100-99999`(-subp7)\"), (1000, \"`p100-99999`(-subp6)\")");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.pstmt.execute();      this.stmt.executeUpdate("INSERT INTO testExplicitPartitions PARTITION(`p10-99`,subp3) VALUES (1, \"subp3\"), (10, \"p10-99\")");      this.stmt.executeUpdate("INSERT INTO testExplicitPartitions PARTITION(subp3) VALUES (3, \"subp3\")");      this.stmt.executeUpdate("INSERT INTO testExplicitPartitions PARTITION(`p0-9`) VALUES (5, \"p0-9:subp3\")");      this.stmt.executeUpdate("FLUSH STATUS");      this.stmt.execute("SELECT * FROM testExplicitPartitions PARTITION (subp2)");      this.pstmt=this.conn.prepareStatement("SELECT * FROM testExplicitPartitions PARTITION (subp2,pNeg) AS TableAlias");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=c.prepareStatement("SELECT * FROM testExplicitPartitions PARTITION (subp2,pNeg) AS TableAlias");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.pstmt=this.conn.prepareStatement("LOCK TABLE testExplicitPartitions READ, testExplicitPartitions as TableAlias READ");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=c.prepareStatement("LOCK TABLE testExplicitPartitions READ, testExplicitPartitions as TableAlias READ");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=this.conn.prepareStatement("SELECT * FROM testExplicitPartitions PARTITION (subp3) AS TableAlias");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt.execute();      this.pstmt=c.prepareStatement("SELECT COUNT(*) FROM testExplicitPartitions PARTITION (`p10-99`)");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.pstmt.execute();      this.pstmt=this.conn.prepareStatement("SELECT * FROM testExplicitPartitions PARTITION (pNeg) WHERE a = 100");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt.execute();      this.pstmt=c.prepareStatement("SELECT * FROM testExplicitPartitions PARTITION (pNeg) WHERE a = 100");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.pstmt.execute();      this.stmt.executeUpdate("UNLOCK TABLES");      this.rs=this.stmt.executeQuery("SHOW VARIABLES WHERE Variable_name='datadir'");      this.rs.next();      datadir=this.rs.getString(2);      if (dbname == null) {        fail("No database selected");      } else {        File f=new File(datadir + dbname + File.separator+ "loadtestExplicitPartitions.txt");        if (f.exists()) {          f.delete();        }      }      this.pstmt=this.conn.prepareStatement("SELECT * FROM testExplicitPartitions PARTITION (pNeg, `p10-99`) INTO OUTFILE 'loadtestExplicitPartitions.txt'");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=c.prepareStatement("SELECT * FROM testExplicitPartitions PARTITION (pNeg, `p10-99`) INTO OUTFILE 'loadtestExplicitPartitions.txt'");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.stmt.execute("SELECT * FROM testExplicitPartitions PARTITION (pNeg, `p10-99`) INTO OUTFILE 'loadtestExplicitPartitions.txt'");      this.pstmt=this.conn.prepareStatement("ALTER TABLE testExplicitPartitions TRUNCATE PARTITION pNeg, `p10-99`");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=c.prepareStatement("ALTER TABLE testExplicitPartitions TRUNCATE PARTITION pNeg, `p10-99`");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.stmt.executeUpdate("ALTER TABLE testExplicitPartitions TRUNCATE PARTITION pNeg, `p10-99`");      this.stmt.executeUpdate("FLUSH STATUS");      this.pstmt=this.conn.prepareStatement("LOAD DATA INFILE 'loadtestExplicitPartitions.txt' INTO TABLE testExplicitPartitions PARTITION (pNeg, subp4, subp5)");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=c.prepareStatement("LOAD DATA INFILE 'loadtestExplicitPartitions.txt' INTO TABLE testExplicitPartitions PARTITION (pNeg, subp4, subp5)");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.stmt.executeUpdate("LOAD DATA INFILE 'loadtestExplicitPartitions.txt' INTO TABLE testExplicitPartitions PARTITION (pNeg, subp4, subp5)");      this.stmt.executeUpdate("ALTER TABLE testExplicitPartitions TRUNCATE PARTITION pNeg, `p10-99`");      this.stmt.executeUpdate("FLUSH STATUS");      this.pstmt=this.conn.prepareStatement("LOAD DATA INFILE 'loadtestExplicitPartitions.txt' INTO TABLE testExplicitPartitions PARTITION (pNeg, `p10-99`)");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=c.prepareStatement("LOAD DATA INFILE 'loadtestExplicitPartitions.txt' INTO TABLE testExplicitPartitions PARTITION (pNeg, `p10-99`)");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.stmt.executeUpdate("LOCK TABLE testExplicitPartitions WRITE");      this.stmt.executeUpdate("LOAD DATA INFILE 'loadtestExplicitPartitions.txt' INTO TABLE testExplicitPartitions PARTITION (pNeg, `p10-99`)");      this.stmt.executeUpdate("UNLOCK TABLES");      this.stmt.executeUpdate("UPDATE testExplicitPartitions PARTITION(subp0) SET b = concat(b, ', Updated')");      this.pstmt=this.conn.prepareStatement("UPDATE testExplicitPartitions PARTITION(subp0) SET b = concat(b, ', Updated2') WHERE a = -2");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt.execute();      this.pstmt=c.prepareStatement("UPDATE testExplicitPartitions PARTITION(subp0) SET a = -4, b = concat(b, ', Updated from a = -2') WHERE a = -2");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.pstmt.execute();      this.stmt.executeUpdate("UPDATE testExplicitPartitions PARTITION(subp0) SET b = concat(b, ', Updated2') WHERE a = 100");      this.stmt.executeUpdate("UPDATE testExplicitPartitions PARTITION(subp0) SET a = -2, b = concat(b, ', Updated from a = 100') WHERE a = 100");      this.pstmt=this.conn.prepareStatement("UPDATE testExplicitPartitions PARTITION(`p100-99999`, pNeg) SET a = -222, b = concat(b, ', Updated from a = 100') WHERE a = 100");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt.execute();      this.pstmt=c.prepareStatement("UPDATE testExplicitPartitions SET b = concat(b, ', Updated2') WHERE a = 1000000");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.pstmt.execute();      this.stmt.executeUpdate("DELETE FROM testExplicitPartitions PARTITION (pNeg) WHERE a = -1");      this.pstmt=this.conn.prepareStatement("DELETE FROM testExplicitPartitions PARTITION (pNeg) WHERE a = -1");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt.execute();      this.pstmt=c.prepareStatement("DELETE FROM testExplicitPartitions PARTITION (pNeg) WHERE a = -1");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.pstmt.execute();      this.stmt.executeUpdate("DELETE FROM testExplicitPartitions PARTITION (subp1) WHERE b like '%subp1%'");      this.pstmt=this.conn.prepareStatement("DELETE FROM testExplicitPartitions PARTITION (subp1) WHERE b like '%subp1%'");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt.execute();      this.pstmt=c.prepareStatement("DELETE FROM testExplicitPartitions PARTITION (subp1) WHERE b like '%subp1%'");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.pstmt.execute();      this.stmt.executeUpdate("FLUSH STATUS");      this.stmt.executeUpdate("LOCK TABLE testExplicitPartitions WRITE");      this.stmt.executeUpdate("DELETE FROM testExplicitPartitions PARTITION (subp1) WHERE b = 'p0-9:subp3'");      this.pstmt=this.conn.prepareStatement("DELETE FROM testExplicitPartitions PARTITION (subp1) WHERE b = 'p0-9:subp3'");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.stmt.executeUpdate("DELETE FROM testExplicitPartitions PARTITION (`p0-9`) WHERE b = 'p0-9:subp3'");      this.pstmt=this.conn.prepareStatement("DELETE FROM testExplicitPartitions PARTITION (`p0-9`) WHERE b = 'p0-9:subp3'");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.stmt.executeUpdate("UNLOCK TABLES");      this.stmt.executeUpdate("CREATE TABLE testExplicitPartitions2 LIKE testExplicitPartitions");      this.pstmt=this.conn.prepareStatement("INSERT INTO testExplicitPartitions2 PARTITION (`p10-99`, subp3, `p100-99999`) SELECT * FROM testExplicitPartitions PARTITION (subp3, `p10-99`, `p100-99999`)");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=c.prepareStatement("INSERT INTO testExplicitPartitions2 PARTITION (`p10-99`, subp3, `p100-99999`) SELECT * FROM testExplicitPartitions PARTITION (subp3, `p10-99`, `p100-99999`)");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.stmt.executeUpdate("INSERT INTO testExplicitPartitions2 PARTITION (`p10-99`, subp3, `p100-99999`) SELECT * FROM testExplicitPartitions PARTITION (subp3, `p10-99`, `p100-99999`)");      this.stmt.executeUpdate("ALTER TABLE testExplicitPartitions2 TRUNCATE PARTITION `p10-99`, `p0-9`, `p100-99999`");      this.pstmt=this.conn.prepareStatement("INSERT IGNORE INTO testExplicitPartitions2 PARTITION (subp3) SELECT * FROM testExplicitPartitions PARTITION (subp3, `p10-99`, `p100-99999`)");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=c.prepareStatement("INSERT IGNORE INTO testExplicitPartitions2 PARTITION (subp3) SELECT * FROM testExplicitPartitions PARTITION (subp3, `p10-99`, `p100-99999`)");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.stmt.executeUpdate("INSERT IGNORE INTO testExplicitPartitions2 PARTITION (subp3) SELECT * FROM testExplicitPartitions PARTITION (subp3, `p10-99`, `p100-99999`)");      this.stmt.executeUpdate("TRUNCATE TABLE testExplicitPartitions2");      this.stmt.executeUpdate("INSERT INTO testExplicitPartitions2 SELECT * FROM testExplicitPartitions PARTITION (subp3, `p10-99`, `p100-99999`)");      this.pstmt=this.conn.prepareStatement("CREATE TABLE testExplicitPartitions3 SELECT * FROM testExplicitPartitions PARTITION (pNeg,subp3,`p100-99999`)");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=c.prepareStatement("CREATE TABLE testExplicitPartitions3 SELECT * FROM testExplicitPartitions PARTITION (pNeg,subp3,`p100-99999`)");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.stmt.executeUpdate("CREATE TABLE testExplicitPartitions3 SELECT * FROM testExplicitPartitions PARTITION (pNeg,subp3,`p100-99999`)");      this.pstmt=this.conn.prepareStatement("DELETE testExplicitPartitions, testExplicitPartitions2 FROM testExplicitPartitions PARTITION (pNeg), testExplicitPartitions3, testExplicitPartitions2 PARTITION (subp3) WHERE testExplicitPartitions.a = testExplicitPartitions3.a AND testExplicitPartitions3.b = 'subp3' AND testExplicitPartitions3.a = testExplicitPartitions2.a");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=c.prepareStatement("DELETE testExplicitPartitions, testExplicitPartitions2 FROM testExplicitPartitions PARTITION (pNeg), testExplicitPartitions3, testExplicitPartitions2 PARTITION (subp3) WHERE testExplicitPartitions.a = testExplicitPartitions3.a AND testExplicitPartitions3.b = 'subp3' AND testExplicitPartitions3.a = testExplicitPartitions2.a");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.stmt.executeUpdate("DELETE testExplicitPartitions, testExplicitPartitions2 FROM testExplicitPartitions PARTITION (pNeg), testExplicitPartitions3, testExplicitPartitions2 PARTITION (subp3) WHERE testExplicitPartitions.a = testExplicitPartitions3.a AND testExplicitPartitions3.b = 'subp3' AND testExplicitPartitions3.a = testExplicitPartitions2.a");      this.pstmt=this.conn.prepareStatement("DELETE FROM testExplicitPartitions2, testExplicitPartitions3 USING testExplicitPartitions2 PARTITION (`p0-9`), testExplicitPartitions3, testExplicitPartitions PARTITION (subp3) WHERE testExplicitPartitions.a = testExplicitPartitions3.a AND testExplicitPartitions3.b = 'subp3' AND testExplicitPartitions2.a = testExplicitPartitions.a");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=c.prepareStatement("DELETE FROM testExplicitPartitions2, testExplicitPartitions3 USING testExplicitPartitions2 PARTITION (`p0-9`), testExplicitPartitions3, testExplicitPartitions PARTITION (subp3) WHERE testExplicitPartitions.a = testExplicitPartitions3.a AND testExplicitPartitions3.b = 'subp3' AND testExplicitPartitions2.a = testExplicitPartitions.a");      assertTrue(this.pstmt instanceof com.mysql.jdbc.ServerPreparedStatement);      this.stmt.executeUpdate("DELETE FROM testExplicitPartitions2, testExplicitPartitions3 USING testExplicitPartitions2 PARTITION (`p0-9`), testExplicitPartitions3, testExplicitPartitions PARTITION (subp3) WHERE testExplicitPartitions.a = testExplicitPartitions3.a AND testExplicitPartitions3.b = 'subp3' AND testExplicitPartitions2.a = testExplicitPartitions.a");      this.stmt.executeUpdate("SET @@default_storage_engine = @old_default_storage_engine");    }  finally {      this.stmt.executeUpdate("DROP TABLE IF EXISTS testExplicitPartitions, testExplicitPartitions2, testExplicitPartitions3");      if (c != null) {        c.close();      }      if (datadir != null) {        File f=new File(datadir + dbname + File.separator+ "loadtestExplicitPartitions.txt");        if (f.exists()) {          f.deleteOnExit();        } else {          fail("File " + datadir + dbname+ File.separator+ "loadtestExplicitPartitions.txt cannot be deleted."+ "You should run server and tests on the same filesystem.");        }      }    }  }}  }
class C{  public void ensureCapacity(int minCapacity){  this.elements.ensureCapacity(minCapacity);}  }
class C{  public CLIOutputResponse showDiff(final ShowDiffRequest request) throws IOException, SubversionException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  addOption(uArgs,"--revision",request.getRevision());  uArgs.add("diff");  final CommandLineResult result=runCommand(null,uArgs,projectPath,request.getPaths(),request.getUsername(),request.getPassword());  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  protected void encodeLinePrefix(OutputStream outStream,int length) throws IOException {  outStream.write('*');  crc.value=0;  tmp[0]=(byte)length;  tmp[1]=(byte)sequence;  sequence=(sequence + 1) & 0xff;  encodeAtom(outStream,tmp,0,2);}  }
class C{  private void unread(int ch){  if (ch >= 0)   _parseIndex--;}  }
class C{  private static double sampleExpoDist(double lambdaInv,double p){  return -lambdaInv * FastMath.log(1 - p);}  }
class C{  public static void replace(ByteString namespace,ByteString key,ByteString value){  getOrCreate().replace(namespace,key,value);}  }
class C{  public static boolean isNumber(String string){  final String Digits="(\\p{Digit}+)";  final String HexDigits="(\\p{XDigit}+)";  final String Exp="[eE][+-]?" + Digits;  final String fpRegex=("[\\x00-\\x20]*" + "[+-]?(" + "NaN|"+ "Infinity|"+ "(((" + Digits + "(\\.)?("+ Digits+ "?)("+ Exp+ ")?)|"+ "(\\.("+ Digits+ ")("+ Exp+ ")?)|"+ "(("+ "(0[xX]"+ HexDigits+ "(\\.)?)|"+ "(0[xX]"+ HexDigits+ "?(\\.)"+ HexDigits+ ")"+ ")[pP][+-]?"+ Digits+ "))"+ "[fFdD]?))"+ "[\\x00-\\x20]*");  return Pattern.matches(fpRegex,string);}  }
class C{  public void removeValue(FilterSpecParam param){  ExprNode exprNode=specParams.get(param);  if (exprNode == null) {    throw new IllegalStateException("Not found in collection param: " + param);  }  specParams.remove(param);  exprNodes.put(exprNode,null);}  }
class C{  private static SegmentIndex parseSidx(ParsableByteArray atom){  atom.setPosition(ATOM_HEADER_SIZE);  int fullAtom=atom.readInt();  int version=parseFullAtomVersion(fullAtom);  atom.skip(4);  long timescale=atom.readUnsignedInt();  long earliestPresentationTime;  long firstOffset;  if (version == 0) {    earliestPresentationTime=atom.readUnsignedInt();    firstOffset=atom.readUnsignedInt();  } else {    earliestPresentationTime=atom.readUnsignedLongToLong();    firstOffset=atom.readUnsignedLongToLong();  }  atom.skip(2);  int referenceCount=atom.readUnsignedShort();  int[] sizes=new int[referenceCount];  long[] offsets=new long[referenceCount];  long[] durationsUs=new long[referenceCount];  long[] timesUs=new long[referenceCount];  long offset=firstOffset;  long time=earliestPresentationTime;  for (int i=0; i < referenceCount; i++) {    int firstInt=atom.readInt();    int type=0x80000000 & firstInt;    if (type != 0) {      throw new IllegalStateException("Unhandled indirect reference");    }    long referenceDuration=atom.readUnsignedInt();    sizes[i]=0x7fffffff & firstInt;    offsets[i]=offset;    timesUs[i]=(time * 1000000L) / timescale;    long nextTimeUs=((time + referenceDuration) * 1000000L) / timescale;    durationsUs[i]=nextTimeUs - timesUs[i];    time+=referenceDuration;    atom.skip(4);    offset+=sizes[i];  }  return new SegmentIndex(atom.length(),sizes,offsets,durationsUs,timesUs);}  }
class C{  public static int byteToGig(long bytes){  return (int)(bytes / GB);}  }
class C{  public void experimentStage(ExecutionStageEvent e){  log(null,e.getExperiment().getClass().getName() + ": " + e.getStage());  for (  AbstractExperimenterTab tab : m_Tabs)   tab.experimentStage(e);switch (e.getStage()) {case INITIALIZING:    m_StatusBar.startBusy("Initializing...");  break;case RUNNING:m_StatusBar.startBusy("Running...");break;case STOPPING:m_StatusBar.startBusy("Stopping...");break;case FINISH:m_StatusBar.finishBusy("");break;}}  }
class C{  public ScreenCapturePixelMatrix(final int originX,final int originY,final int width,final int height){  if (height <= 0) {    throw new IllegalArgumentException("height must be greater than zero");  }  if (width <= 0) {    throw new IllegalArgumentException("width must be greater than zero");  }  this.image=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);  this.propertyChangeSupport=new PropertyChangeSupport(this);}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  @Benchmark public long test5_UsingKeySetAndIterator() throws IOException {  long i=0;  Iterator<Integer> itr2=map.keySet().iterator();  while (itr2.hasNext()) {    Integer key=itr2.next();    i+=key + map.get(key);  }  return i;}  }
class C{  public RepairerBehaviour(PriceCalculationStrategy calculator,Set<String> items){  super(items);  priceCalculator=calculator;}  }
class C{  public BlockResult(){  this.entities=null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namespaceURI02.class,args);}  }
class C{  public void receiveSipInstantMessage(Intent intent,ContactId contact,byte[] content,String contentType,String serviceId){  intent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);  IntentUtils.tryToSetReceiverForegroundFlag(intent);  intent.putExtra(InstantMultimediaMessageIntent.EXTRA_CONTACT,(Parcelable)contact);  intent.putExtra(InstantMultimediaMessageIntent.EXTRA_SERVICE_ID,serviceId);  intent.putExtra(InstantMultimediaMessageIntent.EXTRA_CONTENT,content);  intent.putExtra(InstantMultimediaMessageIntent.EXTRA_CONTENT_TYPE,contentType);  AndroidFactory.getApplicationContext().sendBroadcast(intent);}  }
class C{  public Logistic(){  super("logi",1);}  }
class C{  public boolean isValidName(){  String _name=this.getName();  boolean _equals=Objects.equal("prototype",_name);  if (_equals) {    return false;  }  boolean _and=false;  String _name_1=this.getName();  boolean _equals_1=Objects.equal("constructor",_name_1);  if (!_equals_1) {    _and=false;  } else {    LiteralOrComputedPropertyName _declaredName=this.getDeclaredName();    PropertyNameKind _kind=null;    if (_declaredName != null) {      _kind=_declaredName.getKind();    }    boolean _tripleNotEquals=(_kind != PropertyNameKind.COMPUTED);    _and=_tripleNotEquals;  }  if (_and) {    return false;  }  return true;}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  public String convertUnaryOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public static boolean shoudUseLightForegroundOnBackground(int backgroundColor){  return getContrastForColor(backgroundColor) >= CONTRAST_LIGHT_ITEM_THRESHOLD;}  }
class C{  private void delayMessage(){  try {    Thread.sleep(DELAY_TIME);  } catch (  InterruptedException ex) {    logger.logDebug("InterruptedException caught " + ex.getMessage(),Log4jLogger.SYSTEM_LOG);  }}  }
class C{  public SnmpStatusException(int status,int index){  errorStatus=status;  errorIndex=index;}  }
class C{  public static void keepRepository(Node node,CmrRepository repository){  if (node instanceof OpenNode) {    final OpenNode on=(OpenNode)node;    on.addNode(INFO,repository);  }}  }
class C{  private static CustomEntryConcurrentHashMap map5(){  CustomEntryConcurrentHashMap map=new CustomEntryConcurrentHashMap(5);  assertTrue(map.isEmpty());  map.put(one,"A");  map.put(two,"B");  map.put(three,"C");  map.put(four,"D");  map.put(five,"E");  assertFalse(map.isEmpty());  assertEquals(5,map.size());  return map;}  }
class C{  private void addBugCategories(Set<String> bugCategorySet){  Element root=document.getRootElement();  for (  String category : bugCategorySet) {    Element element=root.addElement("BugCategory");    element.addAttribute("category",category);    Element description=element.addElement("Description");    description.setText(I18N.instance().getBugCategoryDescription(category));    BugCategory bc=DetectorFactoryCollection.instance().getBugCategory(category);    if (bc != null) {      String s=bc.getAbbrev();      if (s != null) {        Element abbrev=element.addElement("Abbreviation");        abbrev.setText(s);      }      s=bc.getDetailText();      if (s != null) {        Element details=element.addElement("Details");        details.setText(s);      }    }  }}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  Instance newInstance=null;  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  boolean replaceDone=false;  if (m_replaceMissing != null) {    if (m_replaceMissing.input(instance)) {      if (m_OutputFormatDefined == false) {        setOutputFormat();      }      newInstance=m_replaceMissing.output();      replaceDone=true;    } else {      return false;    }    ;  }  if (m_ntob != null) {    if (replaceDone == false) {      newInstance=instance;    }    if (m_ntob.input(newInstance)) {      if (m_OutputFormatDefined == false) {        setOutputFormat();      }      newInstance=m_ntob.output();      newInstance=convertInstance(newInstance);      push(newInstance);      return true;    } else {      return false;    }  } else {    if (replaceDone == false) {      newInstance=instance;    }    newInstance=convertInstance(newInstance);    push(newInstance);    return true;  }}  }
class C{  public char charAt(int index){  return ' ';}  }
class C{  @Override public StreamImpl openWriteImpl() throws IOException {  StreamImpl stream=getWritePath().openWriteImpl();  return stream;}  }
class C{  public synchronized <T>Id<T> createNextId(final Class<T> idType){  count++;  if (count == Long.MAX_VALUE) {    throw new IllegalStateException("no more ids!");  }  return Id.create(prefix + "-" + count,idType);}  }
class C{  public JToggleGroup(int type,ListModel data){  this(type,data,new DefaultListSelectionModel());}  }
class C{  public List<Bookmark> listSharedBookmarks(AppContext ctx,String path){  List<Bookmark> result=new ArrayList<>();  String usersPath=Bookmark.SEPARATOR + Bookmark.Folder.USER + Bookmark.SEPARATOR;  List<Bookmark> bookmarks=((BookmarkDAO)factory.getDAO(Bookmark.class)).findByPath(ctx,usersPath);  String myPath=usersPath + ctx.getUser().getOid();  for (  Bookmark bookmark : bookmarks) {    if (!bookmark.getPath().startsWith(myPath)) {      if (AccessRightsUtils.getInstance().hasRole(ctx,bookmark,Role.READ)) {        result.add(bookmark);      }    }  }  return result;}  }
class C{  public static double length(double x,double y,double z){  return Math.sqrt(x * x + y * y + z * z);}  }
class C{  void divertAndIgnoreDuplicate(@SuppressWarnings("SameParameterValue") final List<BaseDownloadTask.IRunningTask> destination){synchronized (mList) {    for (    BaseDownloadTask.IRunningTask iRunningTask : mList) {      if (!destination.contains(iRunningTask)) {        destination.add(iRunningTask);      }    }    mList.clear();  }}  }
class C{  @ApiMethod(httpMethod="DELETE") public final void removeOffer(@Named("id") final Long id,final User user) throws ServiceException {  EndpointUtil.throwIfNotAdmin(user);  Offer offer=findOffer(id);  if (offer == null) {    LOG.info("Offer " + id + " not found, skipping deletion.");    return;  }  ofy().delete().entity(offer).now();}  }
class C{  public void clearSubsessionizerInfo(){  subSessionizerMap=null;}  }
class C{  public synchronized void bowSyncFail(Friend bower){synchronized (BowLock.class) {    System.out.format("%s: %s has bowed to me!%n",this.name,bower.getName());    bower.bowBack(this);  }}  }
class C{  protected Map<String,PsiElement> configureByFileText(String fileText,final String fileName,@NonNls String markerRegexp){  Pattern pat=Pattern.compile(markerRegexp);  Matcher mat=pat.matcher(fileText);  int rest_index=0;  Map<String,Integer> offsets=new HashMap<String,Integer>();  final StringBuffer text=new StringBuffer();  while (mat.find(rest_index)) {    String mark=mat.group();    CharSequence prev_part=fileText.subSequence(rest_index,mat.start());    text.append(prev_part);    offsets.put(mark,text.length());    rest_index=mat.end();  }  if (rest_index < fileText.length())   text.append(fileText.substring(rest_index));  Map<String,PsiElement> result=new HashMap<String,PsiElement>();  myFile=myFixture.addFileToProject(fileName,text.toString());  myFixture.configureFromExistingVirtualFile(myFile.getVirtualFile());  for (  Map.Entry<String,Integer> entry : offsets.entrySet()) {    result.put(entry.getKey(),myFile.findElementAt(entry.getValue()));  }  return result;}  }
class C{  static void print(String key){  System.out.print(format(key));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditemns02.class,args);}  }
class C{  private SmsPduUtil(){}  }
class C{  public static boolean update(Map<String,Object> source,Map<String,Object> changes,boolean checkUpdatesAreUnequal){  boolean modified=false;  for (  Map.Entry<String,Object> changesEntry : changes.entrySet()) {    if (!source.containsKey(changesEntry.getKey())) {      source.put(changesEntry.getKey(),changesEntry.getValue());      modified=true;      continue;    }    Object old=source.get(changesEntry.getKey());    if (old instanceof Map && changesEntry.getValue() instanceof Map) {      modified|=update((Map<String,Object>)source.get(changesEntry.getKey()),(Map<String,Object>)changesEntry.getValue(),checkUpdatesAreUnequal && !modified);      continue;    }    source.put(changesEntry.getKey(),changesEntry.getValue());    if (modified) {      continue;    }    if (!checkUpdatesAreUnequal) {      modified=true;      continue;    }    modified=!Objects.equals(old,changesEntry.getValue());  }  return modified;}  }
class C{  private boolean nextBlock(){  assert b == null || off == len;  if (!src.hasNext()) {    BigdataFileSystem.log.info("No more blocks: id=" + id + ", version="+ version);    b=null;    off=0;    len=0;    return false;  }  final ITuple tuple=src.next();  final long addr;  try {    DataInput in=tuple.getValueStream();    addr=in.readLong();  } catch (  IOException e) {    throw new RuntimeException(e);  }  if (addr == 0L) {    b=new byte[]{};    off=0;    len=0;    BigdataFileSystem.log.info("Read zero bytes: id=" + id + ", version="+ version+ ", block="+ block);  } else {    byte[] key=tuple.getKey();    block=KeyBuilder.decodeLong(key,key.length - Bytes.SIZEOF_LONG);    final IBlock tmp=tuple.readBlock(addr);    final int nbytes=tmp.length();    b=new byte[nbytes];    off=0;    len=nbytes;    try {      final int nread=tmp.inputStream().read(b,off,len);      if (nread != len) {        throw new RuntimeException("Expecting " + len + " bytes but read "+ nread);      }    } catch (    IOException e) {      throw new RuntimeException(e);    }    BigdataFileSystem.log.info("Read " + b.length + " bytes: id="+ id+ ", version="+ version+ ", block="+ block);  }  return true;}  }
class C{  public GF2nElement square(){  GF2nONBElement result=new GF2nONBElement(this);  result.squareThis();  return result;}  }
class C{  private List<T> merge(final List<T> one,final List<T> two){  final Set<T> oneSet=new HashSet<T>(one);  for (  T item : two) {    if (!oneSet.contains(item)) {      one.add(item);    }  }  return one;}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  final DisplayMetrics metrics=mResources.getDisplayMetrics();  final float screenDensity=metrics.density;  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE * screenDensity,CIRCLE_DIAMETER_LARGE * screenDensity,CENTER_RADIUS_LARGE * screenDensity,STROKE_WIDTH_LARGE * screenDensity,ARROW_WIDTH_LARGE * screenDensity,ARROW_HEIGHT_LARGE * screenDensity);  } else {    setSizeParameters(CIRCLE_DIAMETER * screenDensity,CIRCLE_DIAMETER * screenDensity,CENTER_RADIUS * screenDensity,STROKE_WIDTH * screenDensity,ARROW_WIDTH * screenDensity,ARROW_HEIGHT * screenDensity);  }}  }
class C{  public void close() throws IOException {  ServerSocketChannel ss=_ss;  _ss=ss;  if (ss != null) {    try {      ss.close();    } catch (    Exception e) {    }  }}  }
class C{  public long executeForLong(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return 0;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    return mConnection.executeForLong(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  public void resetDependencyCheckInterval(){  _lastCheckTime=0;}  }
class C{  public void testKeywords() throws Exception {  final String DOC="{\n" + "\"key1\" : null,\n" + "\"key2\" : true,\n"+ "\"key3\" : false,\n"+ "\"key4\" : [ false, null, true ]\n"+ "}";  JsonParser jp=createParserUsingStream(DOC,"UTF-8");  JsonStreamContext ctxt=jp.getParsingContext();  assertTrue(ctxt.inRoot());  assertFalse(ctxt.inArray());  assertFalse(ctxt.inObject());  assertEquals(0,ctxt.getEntryCount());  assertEquals(0,ctxt.getCurrentIndex());  assertFalse(jp.hasCurrentToken());  assertNull(jp.getText());  assertNull(jp.getTextCharacters());  assertEquals(0,jp.getTextLength());  assertEquals(0,jp.getTextOffset());  assertToken(JsonToken.START_OBJECT,jp.nextToken());  assertTrue(jp.hasCurrentToken());  JsonLocation loc=jp.getTokenLocation();  assertNotNull(loc);  assertEquals(1,loc.getLineNr());  assertEquals(1,loc.getColumnNr());  ctxt=jp.getParsingContext();  assertFalse(ctxt.inRoot());  assertFalse(ctxt.inArray());  assertTrue(ctxt.inObject());  assertEquals(0,ctxt.getEntryCount());  assertEquals(0,ctxt.getCurrentIndex());  assertToken(JsonToken.FIELD_NAME,jp.nextToken());  verifyFieldName(jp,"key1");  assertEquals(2,jp.getTokenLocation().getLineNr());  ctxt=jp.getParsingContext();  assertFalse(ctxt.inRoot());  assertFalse(ctxt.inArray());  assertTrue(ctxt.inObject());  assertEquals(1,ctxt.getEntryCount());  assertEquals(0,ctxt.getCurrentIndex());  assertToken(JsonToken.VALUE_NULL,jp.nextToken());  ctxt=jp.getParsingContext();  assertEquals(1,ctxt.getEntryCount());  assertEquals(0,ctxt.getCurrentIndex());  assertToken(JsonToken.FIELD_NAME,jp.nextToken());  verifyFieldName(jp,"key2");  ctxt=jp.getParsingContext();  assertEquals(2,ctxt.getEntryCount());  assertEquals(1,ctxt.getCurrentIndex());  assertToken(JsonToken.VALUE_TRUE,jp.nextToken());  assertToken(JsonToken.FIELD_NAME,jp.nextToken());  verifyFieldName(jp,"key3");  assertToken(JsonToken.VALUE_FALSE,jp.nextToken());  assertToken(JsonToken.FIELD_NAME,jp.nextToken());  verifyFieldName(jp,"key4");  assertToken(JsonToken.START_ARRAY,jp.nextToken());  assertToken(JsonToken.VALUE_FALSE,jp.nextToken());  assertToken(JsonToken.VALUE_NULL,jp.nextToken());  assertToken(JsonToken.VALUE_TRUE,jp.nextToken());  assertToken(JsonToken.END_ARRAY,jp.nextToken());  assertToken(JsonToken.END_OBJECT,jp.nextToken());}  }
class C{  public void restoreState(RestorableSupport restorableSupport,RestorableSupport.StateObject context){  if (restorableSupport == null) {    String message=Logging.getMessage("nullValue.RestorableSupportIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  RestorableSupport.StateObject so=restorableSupport.getStateObject(context,"width");  if (so != null) {    String mode=restorableSupport.getStateValueAsString(so,"mode");    mode=convertLegacyModeString(mode);    Double param=restorableSupport.getStateValueAsDouble(so,"param");    String units=restorableSupport.getStateValueAsString(so,"units");    if (mode != null && param != null)     this.setWidth(mode,param,units);  }  so=restorableSupport.getStateObject(context,"height");  if (so != null) {    String mode=restorableSupport.getStateValueAsString(so,"mode");    mode=convertLegacyModeString(mode);    Double param=restorableSupport.getStateValueAsDouble(so,"param");    String units=restorableSupport.getStateValueAsString(so,"units");    if (mode != null && param != null)     this.setHeight(mode,param,units);  }}  }
class C{  public RenameEnumConstProcessor(IField field){  super(field);}  }
class C{  public boolean isShowNames(){  return showNames;}  }
class C{  private int toEven(float value){  int i=(int)(value + .5f);  if (i % 2 == 1) {    return i - 1;  }  return i;}  }
class C{  public Lease(Lease source){  this.partitionId=source.partitionId;  this.epoch=source.epoch;  this.owner=source.owner;  this.token=source.token;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public static <T extends Throwable>void rethrowAndSuppress(List<T> exceptions) throws T {  T main=null;  for (  T ex : exceptions) {    main=useOrSuppress(main,ex);  }  if (main != null) {    throw main;  }}  }
class C{  static GLUhalfEdge __gl_meshAddEdgeVertex(GLUhalfEdge eOrg){  GLUhalfEdge eNewSym;  GLUhalfEdge eNew=MakeEdge(eOrg);  eNewSym=eNew.Sym;  Splice(eNew,eOrg.Lnext);  eNew.Org=eOrg.Sym.Org;{    GLUvertex newVertex=new GLUvertex();    MakeVertex(newVertex,eNewSym,eNew.Org);  }  eNew.Lface=eNewSym.Lface=eOrg.Lface;  return eNew;}  }
class C{  public static final Date nextWeekday(final Date d,final Weekday w){  final int wd=d.weekday().value();  final int dow=w.value();  return new Date(d.serialNumber + (wd > dow ? 7 : 0) - wd + dow);}  }
class C{  public void trace(String msg,Throwable t){  log(Log.VERBOSE,msg,t);}  }
class C{  public void testUsernameAndPasswordHandler() throws Exception {  testUsernameAndPassword();  factory.handle(new Callback[]{new NameCallback("test")});  factory.handle(new Callback[]{new NameCallback("test"),new PasswordCallback("test",false)});  try {    Callback[] callbacks=new Callback[]{new NameCallback("test"),new PasswordCallback("test",false),new TextInputCallback("test")};    factory.handle(callbacks);    fail();  } catch (  UnsupportedCallbackException expected) {  }  try {    Callback[] callbacks=new Callback[]{new TextInputCallback("test")};    factory.handle(callbacks);    fail();  } catch (  UnsupportedCallbackException expected) {  }}  }
class C{  public static String string(int i){  return sections.getText(i);}  }
class C{  public void computeIM(IntersectionMatrix im){  updateIM(label,im);}  }
class C{  public static void removeRestrictions(){  try {    Class<?> jceSecurityClass=Class.forName("javax.crypto.JceSecurity");    Class<?> cryptoPermissionsClass=Class.forName("javax.crypto.CryptoPermissions");    Class<?> cryptoAllPermissionClass=Class.forName("javax.crypto.CryptoAllPermission");    Field isRestrictedField=jceSecurityClass.getDeclaredField("isRestricted");    isRestrictedField.setAccessible(true);    isRestrictedField.set(null,false);    Field defaultPolicyField=jceSecurityClass.getDeclaredField("defaultPolicy");    defaultPolicyField.setAccessible(true);    PermissionCollection defaultPolicy=(PermissionCollection)defaultPolicyField.get(null);    Field permsField=cryptoPermissionsClass.getDeclaredField("perms");    permsField.setAccessible(true);    ((Map<?,?>)permsField.get(defaultPolicy)).clear();    Field cryptoAllPermissionInstanceField=cryptoAllPermissionClass.getDeclaredField("INSTANCE");    cryptoAllPermissionInstanceField.setAccessible(true);    defaultPolicy.add((Permission)cryptoAllPermissionInstanceField.get(null));  } catch (  Exception e) {  }}  }
class C{  public String sqlAction_checkDependencyExists(String vendorName,String catalogName,String schemaName,String localTableName,String localColumnName,String checkColumnName,String checkCondition,String foreignTableName,String foreignColumnName){  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("1");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add(new StringBuffer("lcltbl.").append(localColumnName).append("=frntbl.").append(foreignColumnName).toString());  conditions.add(new StringBuffer("lcltbl.").append(checkColumnName).append("=").append(checkCondition).toString());  String sqlSubQuery=sql_select(vendorName,catalogName,schemaName,localTableName,"lcltbl",columnNames,null,conditions,null,false);  conditions=new ArrayList<String>();  conditions.add(new StringBuffer("EXISTS (").append(sqlSubQuery).append(")").toString());  String sql=sql_select(vendorName,catalogName,schemaName,foreignTableName,"frntbl",null,null,conditions,null,false);  sql=sql.replaceFirst("\\*",new StringBuffer("COUNT(").append(foreignColumnName).append(") AS NumberOfDependencies").toString());  return sql;}  }
class C{  public void unsetFileSize(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,FILESIZE_ISSET_ID);}  }
class C{  @Override public void process(Map<K,V> tuple){  for (  Map.Entry<K,V> e : tuple.entrySet()) {    MutableDouble val=basemap.get(e.getKey());    if (!doprocessKey(e.getKey())) {      continue;    }    if (val == null) {      val=new MutableDouble(e.getValue().doubleValue());      basemap.put(cloneKey(e.getKey()),val);      continue;    }    double change=e.getValue().doubleValue() - val.doubleValue();    double percent=(change / val.doubleValue()) * 100;    if (percent < 0.0) {      percent=0.0 - percent;    }    if (percent > percentThreshold) {      HashMap<V,Double> dmap=new HashMap<V,Double>(1);      dmap.put(cloneValue(e.getValue()),percent);      HashMap<K,HashMap<V,Double>> otuple=new HashMap<K,HashMap<V,Double>>(1);      otuple.put(cloneKey(e.getKey()),dmap);      alert.emit(otuple);    }    val.setValue(e.getValue().doubleValue());  }}  }
class C{  @Override @GuardedBy("hudson.model.Queue.lock") public long check(final AbstractCloudComputer c){  final AbstractCloudSlave computerNode=c.getNode();  if (c.isIdle() && computerNode != null) {    final long idleMilliseconds=System.currentTimeMillis() - c.getIdleStartMilliseconds();    if (idleMilliseconds > MINUTES.toMillis(idleMinutes)) {      LOG.info("Disconnecting {}, after {} min timeout.",c.getName(),idleMinutes);      try {        computerNode.terminate();      } catch (      InterruptedException|IOException e) {        LOG.warn("Failed to terminate {}",c.getName(),e);      }    }  }  return 1;}  }
class C{  public static final boolean isASCII(BufferedReader buffer) throws IOException {  final char[] readAhead=new char[300];  buffer.mark(readAhead.length);  buffer.read(readAhead,0,readAhead.length);  buffer.reset();  final String readAheadString=new String(readAhead);  if (readAheadString.contains("facet normal") && readAheadString.contains("outer loop"))   return true;  return false;}  }
class C{  private Address consumeNextRegion(Address nextRegion,int bytes,int align,int offset){  setNextRegion(region,cursor);  region=nextRegion;  cursor=getDataStart(nextRegion);  updateLimit(getRegionLimit(nextRegion),nextRegion,bytes);  setDataEnd(nextRegion,Address.zero());  VM.memory.zero(false,cursor,limit.diff(cursor).toWord().toExtent());  reusePages(Conversions.bytesToPages(limit.diff(region)));  return alloc(bytes,align,offset);}  }
class C{  public NecronomiconPotionAoERitual(String unlocalizedName,int bookType,int dimension,float requiredEnergy,Object potion,Object... offerings){  this(unlocalizedName,bookType,dimension,requiredEnergy,false,potion,offerings);}  }
class C{  private void handleResourceChange(IResourceDelta delta){  IResource resource=delta.getResource();  IProject project=resource.getProject();  if (resource.getType() == IResource.PROJECT && (delta.getFlags() & IResourceDelta.OPEN) != 0) {    initializeAIRegistry(project);  }}  }
class C{  public void updateMediaSelected(MediaItem item,PickerImageView pickerImageView){  if (mMediaListSelected.contains(item)) {    mMediaListSelected.remove(item);    pickerImageView.setSelected(false);    this.mPickerImageViewSelected.remove(pickerImageView);  } else {    boolean value=syncMediaSelectedAsOptions();    if (value) {      for (      PickerImageView picker : this.mPickerImageViewSelected) {        picker.setSelected(false);      }      this.mPickerImageViewSelected.clear();    }    mMediaListSelected.add(item);    pickerImageView.setSelected(true);    this.mPickerImageViewSelected.add(pickerImageView);  }}  }
class C{  public static String[] parseCommaSeparatedList(String externalVal,int dimension) throws SolrException {  String[] out=new String[dimension];  int idx=externalVal.indexOf(',');  int end=idx;  int start=0;  int i=0;  if (idx == -1 && dimension == 1 && externalVal.length() > 0) {    out[0]=externalVal.trim();    i=1;  } else   if (idx > 0) {    for (; i < dimension; i++) {      while (start < end && externalVal.charAt(start) == ' ')       start++;      while (end > start && externalVal.charAt(end - 1) == ' ')       end--;      if (start == end) {        break;      }      out[i]=externalVal.substring(start,end);      start=idx + 1;      end=externalVal.indexOf(',',start);      idx=end;      if (end == -1) {        end=externalVal.length();      }    }  }  if (i != dimension) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"incompatible dimension (" + dimension + ") and values ("+ externalVal+ ").  Only "+ i+ " values specified");  }  return out;}  }
class C{  public static boolean isDate(DbColumnDef colDef){  int dataType=colDef.getDataType();  return (dataType == DbDataType.DATE_TIME);}  }
class C{  public void mergeSimple(final Expression other){  mergeType(other.getType());  setAmount(mergeAmount(other.amount,amount));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  try {    if (hasFallbackChildren()) {      executeFallbacks(transformer);    } else {    }  } catch (  TransformerException e) {    transformer.getErrorListener().fatalError(e);  }}  }
class C{  public boolean forEachValue(TObjectProcedure<V> procedure){  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (isFull(values,i) && !procedure.execute(unwrapNull(values[i]))) {      return false;    }  }  return true;}  }
