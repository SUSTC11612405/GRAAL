class C{  public static List<String> splitForSearch(final String phraze,final int charThreshold){  if (phraze != null) {    String[] token=StringUtils.splitPreserveAllTokens(phraze,"| ;,.");    List<String> words=new ArrayList<String>(token.length);    for (    final String aToken : token) {      if (StringUtils.isNotBlank(aToken)) {        final String clean=aToken.trim();        if (clean.length() >= charThreshold) {          words.add(clean);        }      }    }    return words;  }  return Collections.EMPTY_LIST;}  }
class C{  public static List<ItemStack> requestItem(ItemStack stack,ICorporeaSpark spark,boolean checkNBT,boolean doit){  return requestItem(stack,stack.stackSize,spark,checkNBT,doit);}  }
class C{  @Deprecated public LuceneDocument(){  this(null);}  }
class C{  public static boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Collection<? extends GrantedAuthority> authorities=securityContext.getAuthentication().getAuthorities();  if (authorities != null) {    for (    GrantedAuthority authority : authorities) {      if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {        return false;      }    }  }  return true;}  }
class C{  public void handleClientMembership(String clientId,int eventType){  String notifType=null;  List<ManagedResource> cleanedUp=null;  if (eventType == ClientMembershipMessage.LEFT) {    notifType=NOTIF_CLIENT_LEFT;    cleanedUp=cleanupBridgeClientResources(clientId);  } else   if (eventType == ClientMembershipMessage.CRASHED) {    notifType=NOTIF_CLIENT_CRASHED;    cleanedUp=cleanupBridgeClientResources(clientId);  } else   if (eventType == ClientMembershipMessage.JOINED) {    notifType=NOTIF_CLIENT_JOINED;  }  if (cleanedUp != null) {    for (    ManagedResource resource : cleanedUp) {      MBeanUtil.unregisterMBean(resource);    }  }  Helper.sendNotification(this,new Notification(notifType,this.modelMBean,Helper.getNextNotificationSequenceNumber(),clientId));}  }
class C{  public SizeSorter(boolean ascending){  super(ascending);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (event_1: ");  result.append(event_1);  result.append(')');  return result.toString();}  }
class C{  @After public void cleanup(){  for (  File f : indexDir.listFiles())   f.delete();  indexDir.delete();}  }
class C{  public synchronized boolean isCoverageAvailable(int transport){  int available=getAvailableTransportCoverage();  if ((available & transport) > 0)   return true; else   return false;}  }
class C{  public void writeReport(BenchInfo[] binfo,Properties props) throws IOException {  PrintStream p=new PrintStream(out);  float total=0.0f;  p.println("\n" + title);  p.println(pad('-',title.length()));  p.println("");  for (int i=0; i < PROPNAMES.length; i++) {    p.println(fit(PROPNAMES[i] + ":",PROPNAME_WIDTH) + props.getProperty(PROPNAMES[i]));  }  p.println("");  p.println(fit("#",INDEX_WIDTH) + "  " + fit("Benchmark Name",NAME_WIDTH)+ "  "+ fit("Time (ms)",TIME_WIDTH)+ "  "+ fit("Score",SCORE_WIDTH));  p.println(pad('-',INDEX_WIDTH + NAME_WIDTH + TIME_WIDTH+ SCORE_WIDTH+ 6));  for (int i=0; i < binfo.length; i++) {    BenchInfo b=binfo[i];    p.print(fit(Integer.toString(i),INDEX_WIDTH) + "  ");    p.print(fit(b.getName(),NAME_WIDTH) + "  ");    if (b.getTime() != -1) {      float score=b.getTime() * b.getWeight();      total+=score;      p.print(fit(Long.toString(b.getTime()),TIME_WIDTH) + "  ");      p.println(fit(Util.floatToString(score,PRECISION),SCORE_WIDTH));    } else {      p.print(fit("--",TIME_WIDTH) + "  ");      p.println(fit("--",SCORE_WIDTH));    }  }  p.println(pad('-',INDEX_WIDTH + NAME_WIDTH + TIME_WIDTH+ SCORE_WIDTH+ 6));  p.println(fit("Total score",INDEX_WIDTH + NAME_WIDTH + TIME_WIDTH+ 4) + "  " + Util.floatToString(total,PRECISION));  p.println("");  p.println("-----");  p.println("Report generated on " + new Date() + "\n");  p.println("");}  }
class C{  public static boolean isInstanceOf(Object object,Class target){  if (object == null || target == null) {    return false;  }  return target.isInstance(object);}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    throw new SecurityException("Failed to seed OpenSSL PRNG",e);  }}  }
class C{  private boolean listItemExists(ListItemEntry listItem,URL feedUrl,SitesService sitesService){  try {    Map<String,String> values=Maps.newHashMap();    for (    Field field : listItem.getFields()) {      values.put(field.getIndex(),field.getValue());    }    ContentQuery query=new ContentQuery(feedUrl);    String parentId=listItem.getLink(SitesLink.Rel.PARENT,ILink.Type.ATOM).getHref();    query.setParent(parentId.substring(parentId.lastIndexOf('/') + 1));    query.setKind("listitem");    List<BaseContentEntry<?>> entries=entryProvider.getEntries(query,sitesService);    for (    BaseContentEntry<?> entry : entries) {      ListItemEntry item=(ListItemEntry)(BaseContentEntry)entry;      if (item.getFields().size() == listItem.getFields().size()) {        boolean equal=true;        for (        Field field : item.getFields()) {          if (!values.get(field.getIndex()).equals(field.getValue())) {            equal=false;          }        }        if (equal) {          return true;        }      }    }    return false;  } catch (  IOException e) {    LOGGER.log(Level.WARNING,"Error communicating with the server.",e);    return false;  }catch (  ServiceException e) {    LOGGER.log(Level.WARNING,"Error communicating with the server.",e);    return false;  }}  }
class C{  public boolean skipDelimiters(){  int workingPosition=position;  boolean workingEmptyReturned=emptyReturned;  boolean onToken=advancePosition();  tokenCount=-1;  while (position != workingPosition || emptyReturned != workingEmptyReturned) {    if (onToken) {      position=workingPosition;      emptyReturned=workingEmptyReturned;      return true;    }    workingPosition=position;    workingEmptyReturned=emptyReturned;    onToken=advancePosition();  }  return false;}  }
class C{  private void backupFavorites(BackupDataOutput data) throws IOException {  ContentResolver cr=mContext.getContentResolver();  Cursor cursor=cr.query(Favorites.CONTENT_URI,FAVORITE_PROJECTION,getUserSelectionArg(),null,null);  try {    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final long updateTime=cursor.getLong(ID_MODIFIED);      Key key=getKey(Key.FAVORITE,id);      mKeys.add(key);      final String backupKey=keyToBackupKey(key);      if (!mExistingKeys.contains(backupKey) || updateTime >= mLastBackupRestoreTime || restoredBackupVersion < 4) {        writeRowToBackup(key,packFavorite(cursor),data);      } else {        if (DEBUG)         Log.d(TAG,"favorite already backup up: " + id);      }    }  }  finally {    cursor.close();  }}  }
class C{  public LargeDeltas(LargeDeltas other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetB1()) {    this.b1=new Bools(other.b1);  }  if (other.isSetB10()) {    this.b10=new Bools(other.b10);  }  if (other.isSetB100()) {    this.b100=new Bools(other.b100);  }  this.check_true=other.check_true;  if (other.isSetB1000()) {    this.b1000=new Bools(other.b1000);  }  this.check_false=other.check_false;  if (other.isSetVertwo2000()) {    this.vertwo2000=new VersioningTestV2(other.vertwo2000);  }  if (other.isSetA_set2500()) {    Set<String> __this__a_set2500=new HashSet<String>(other.a_set2500);    this.a_set2500=__this__a_set2500;  }  if (other.isSetVertwo3000()) {    this.vertwo3000=new VersioningTestV2(other.vertwo3000);  }  if (other.isSetBig_numbers()) {    List<Integer> __this__big_numbers=new ArrayList<Integer>(other.big_numbers);    this.big_numbers=__this__big_numbers;  }}  }
class C{  void sendPasswordRecoveryMails(PlatformUser pUser,EmailType mailType,String marketplaceId,Object[] obj) throws MailOperationException {  Marketplace marketplace=null;  if (marketplaceId != null) {    marketplace=new Marketplace();    marketplace.setMarketplaceId(marketplaceId);    marketplace=(Marketplace)dm.find(marketplace);  }  cs.sendMail(pUser,mailType,obj,marketplace);}  }
class C{  protected void onRemoveNoExternalMessages(String channel,String sourceNick,String sourceLogin,String sourceHostname){}  }
class C{  @Nonnull static public String contentsToString(){  StringBuilder retval=new StringBuilder();  for (  Class<?> c : managerLists.keySet()) {    retval.append("List of ");    retval.append(c);    retval.append(" with ");    retval.append(Integer.toString(getList(c).size()));    retval.append(" objects\n");    for (    Object o : getList(c)) {      retval.append("    ");      retval.append(o.getClass().toString());      retval.append("\n");    }  }  return retval.toString();}  }
class C{  public AvsPlayContentItem(String token,Uri uri){  super(token);  mUri=uri;}  }
class C{  public static synchronized void moveLogsFromLegacyDirIfNecessary(){  File sdcardDir=Environment.getExternalStorageDirectory();  File legacyDir=new File(sdcardDir,LEGACY_SAVED_LOGS_DIR);  if (legacyDir.exists() && legacyDir.isDirectory()) {    File savedLogsDir=getSavedLogsDirectory();    for (    File file : legacyDir.listFiles()) {      file.renameTo(new File(savedLogsDir,file.getName()));    }    legacyDir.delete();  }}  }
class C{  public Object encode(Object raw) throws EncoderException {  if (!(raw instanceof byte[])) {    throw new EncoderException("argument not a byte array");  }  return toAsciiChars((byte[])raw);}  }
class C{  public static HttpVersion parse(final String s) throws ProtocolException {  if (s == null) {    throw new IllegalArgumentException("String may not be null");  }  if (!s.startsWith("HTTP/")) {    throw new ProtocolException("Invalid HTTP version string: " + s);  }  int major, minor;  int i1="HTTP/".length();  int i2=s.indexOf(".",i1);  if (i2 == -1) {    throw new ProtocolException("Invalid HTTP version number: " + s);  }  try {    major=Integer.parseInt(s.substring(i1,i2));  } catch (  final NumberFormatException e) {    throw new ProtocolException("Invalid HTTP major version number: " + s);  }  i1=i2 + 1;  i2=s.length();  try {    minor=Integer.parseInt(s.substring(i1,i2));  } catch (  final NumberFormatException e) {    throw new ProtocolException("Invalid HTTP minor version number: " + s);  }  return new HttpVersion(major,minor);}  }
class C{  public PSPCommunicationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private void initialize(){  this.setLayout(new BorderLayout());  this.setName(Constant.messages.getString("output.panel.title"));  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(243,119);  }  this.setIcon(new ImageIcon(OutputPanel.class.getResource("/resource/icon/16/172.png")));  this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK,false));  this.setMnemonic(Constant.messages.getChar("output.panel.mnemonic"));  this.add(getMainPanel(),BorderLayout.CENTER);  this.setShowByDefault(true);}  }
class C{  public static String suppressWhiteSpace(String str){  int len=str.length();  StringBuilder sb=new StringBuilder(len);  char c;  char buffer=0;  for (int i=0; i < len; i++) {    c=str.charAt(i);    if (c == '\n' || c == '\r')     buffer='\n'; else     if (isWhiteSpace(c)) {      if (buffer == 0)       buffer=c;    } else {      if (buffer != 0) {        sb.append(buffer);        buffer=0;      }      sb.append(c);    }  }  if (buffer != 0)   sb.append(buffer);  return sb.toString();}  }
class C{  public static void shuffle(Object[] a,int lo,int hi){  if (lo < 0 || lo > hi || hi >= a.length)   throw new RuntimeException("Illegal subarray range");  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    Object temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  private SwipeMode computeInputMode(long time,float x,float y,float dx,float dy){  if (!mStacks[1].isDisplayable())   return SwipeMode.SEND_TO_STACK;  int currentIndex=getTabStackIndex();  if (currentIndex != getViewportParameters().getStackIndexAt(x,y)) {    return SwipeMode.SWITCH_STACK;  }  float relativeX=mLastOnDownX - (x + dx);  float relativeY=mLastOnDownY - (y + dy);  float distanceToDownSqr=dx * dx + dy * dy;  float switchDelta=getOrientation() == Orientation.PORTRAIT ? relativeX : relativeY;  float otherDelta=getOrientation() == Orientation.PORTRAIT ? relativeY : relativeX;  if (distanceToDownSqr > mMinDirectionThreshold * mMinDirectionThreshold && Math.abs(otherDelta) > Math.abs(switchDelta)) {    return SwipeMode.SEND_TO_STACK;  }  if (Math.abs(switchDelta) > mMinDirectionThreshold) {    if ((currentIndex == 0) ^ (switchDelta > 0) ^ (getOrientation() == Orientation.PORTRAIT && LocalizationUtils.isLayoutRtl())) {      return SwipeMode.SEND_TO_STACK;    }  }  if (isDraggingStackInWrongDirection(mLastOnDownX,mLastOnDownY,x,y,dx,dy,getOrientation(),currentIndex)) {    return SwipeMode.SWITCH_STACK;  }  if (time - mLastOnDownTimeStamp > THRESHOLD_TIME_TO_SWITCH_STACK_INPUT_MODE) {    return SwipeMode.SEND_TO_STACK;  }  if (distanceToDownSqr > mMinShortPressThresholdSqr) {    return SwipeMode.SWITCH_STACK;  }  return SwipeMode.NONE;}  }
class C{  void skipData(int count) throws IOException {  if (bufAvail >= count) {    bufAvail-=count;    bufPtr+=count;    return;  }  if (bufAvail > 0) {    count-=bufAvail;    bufAvail=0;    bufPtr=0;  }  if (iis.skipBytes(count) != count) {    throw new IIOException("Image format Error");  }}  }
class C{  public synchronized void die(){  if (connected) {    packetUpdate.signalStop();    connThread.interrupt();    send(new Packet(Packet.COMMAND_CLOSE_CONNECTION));    flushConn();  }  connected=false;  if (connection != null) {    connection.close();  }  for (int i=0; i < closeClientListeners.size(); i++) {    closeClientListeners.elementAt(i).clientClosed();  }  if (log != null) {    try {      log.close();    } catch (    IOException e) {      System.err.print("Exception closing logfile: ");      e.printStackTrace();    }  }  System.out.println("client: died");  System.out.flush();}  }
class C{  public void addSeries(final String title,final double[] xs,final double[] ys){  XYSeries series=new XYSeries(title,false,true);  for (int i=0, n=Math.min(xs.length,ys.length); i < n; i++) {    series.add(xs[i],ys[i]);  }  this.dataset.addSeries(series);}  }
class C{  @Override protected void initData(){  this.getContentResolver().registerContentObserver(MessageContentProvider.MESSAGE_URI,true,new MessageProviderObserver(new Handler()));  this.adapter=new ProviderRecyclerViewAdapter(this.getContentResolver(),MessageContentProvider.MESSAGE_URI);  this.providerRV.setAdapter(this.adapter);  ArrayList<SQLiteData> allData=new ArrayList<>();  allData.add(new SQLiteData());  this.adapter.setList(allData);  this.adapter.notifyDataSetChanged();}  }
class C{  private String toComparableString(final byte[] memory){  final StringBuffer stringBuffer=new StringBuffer();  for (  final byte b : memory) {    stringBuffer.append(Convert.byteToHexString(b));  }  return stringBuffer.toString();}  }
class C{  public static ECKey fromASN1(byte[] asn1privkey){  return extractKeyFromASN1(asn1privkey);}  }
class C{  public AcelaTurnout(String systemName,String userName,AcelaSystemConnectionMemo memo){  super(systemName,userName);  _memo=memo;  prefix=_memo.getSystemPrefix() + "T";  initializeTurnout(systemName);}  }
class C{  public R paramsToFormEntity(){  mHttpEntity=createFormEntity();  return (R)this;}  }
class C{  protected void restoreGraphics(Graphics g){  Graphics2D g2D=(Graphics2D)g;  g2D.setStroke(saveStroke);  g2D.setPaint(savePaint);}  }
class C{  private void saveImageBase(){  try {    final CAddress imageBase=new CAddress(Convert.hexStringToLong(m_debuggerPanel.getImageBase()));    if (m_addressSpace == null) {      m_module.getConfiguration().setImageBase(imageBase);    } else {      m_addressSpace.getContent().setImageBase(m_module,imageBase);    }  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String message="E00166: " + "Could not change the module image base";    final String description=CUtilityFunctions.createDescription("The new module image base could not be saved to the database.",new String[]{"There was a problem with the connection to the database while the module image base was saved"},new String[]{"The module image base was not saved. Please try to find out what went wrong with the database connection and try to save the module image base again."});    NaviErrorDialog.show(SwingUtilities.getWindowAncestor(this),message,description,e);  }}  }
class C{  private void select(final JSpinner spinnerComponent){  final JComponent editor=spinnerComponent.getEditor();  if (!(editor instanceof JSpinner.DateEditor))   return;  final JSpinner.DateEditor dateEditor=(JSpinner.DateEditor)editor;  final JFormattedTextField ftf=dateEditor.getTextField();  final Format format=dateEditor.getFormat();  Object value;  if (format == null || (value=spinnerComponent.getValue()) == null)   return;  final SpinnerDateModel model=dateEditor.getModel();  final DateFormat.Field field=DateFormat.Field.ofCalendarField(model.getCalendarField());  if (field == null)   return;  try {    final AttributedCharacterIterator iterator=format.formatToCharacterIterator(value);    if (!select(ftf,iterator,field) && field == DateFormat.Field.HOUR0) {      select(ftf,iterator,DateFormat.Field.HOUR1);    }  } catch (  final IllegalArgumentException iae) {  }}  }
class C{  public boolean tryNext(final T element){  Item<T> item=head;  while (item != null) {    if (equivalent(item.element,element)) {      return false;    }    item=item.next;  }  final Item<T> newHead=new Item<>();  newHead.element=element;  newHead.next=head;  head=newHead;  return true;}  }
class C{  public synchronized void close(){  if (!this.mIsClosed) {    this.mSocket.close();    this.mIsClosed=true;  }}  }
class C{  public void clearOpciones(){  opciones.clear();}  }
class C{  protected void creditInventoryAndAssert(final long warehouseId,final String skuCode,final String creditQuantity,final String expectedAvailable,final String expectedReserved){  final Warehouse warehouse=warehouseService.findById(warehouseId);  skuWarehouseService.credit(warehouse,skuCode,new BigDecimal(creditQuantity));  assertInventory(warehouseId,skuCode,expectedAvailable,expectedReserved);}  }
class C{  protected void report(GroovyExceptionInterface e,boolean child){  println(((Exception)e).getMessage());  stacktrace((Exception)e,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.195 -0400",hash_original_method="01CB53E47AF5384558F5A1C3FDB268E6",hash_generated_method="A37A31244848C5A0C7DA46E18C1DFDCA") final boolean acquireQueued(final Node node,long arg){  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return interrupted;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void parse(String theSrcText,String testName) throws Exception {  System.out.println("-------------------------------");  System.out.println("  " + testName);  System.out.println("-------------------------------");  try {    Reader reader=new BufferedReader(new StringReader(theSrcText));    GroovyRecognizer recognizer=GroovyRecognizer.make(reader);    recognizer.compilationUnit();    System.out.println(decorateWithLineNumbers(theSrcText));  } catch (  RecognitionException parseException) {    System.out.println(decorateWithLineNumbersAndErrorMessage(theSrcText,parseException));    throw parseException;  }  System.out.println("-------------------------------");}  }
class C{  private void startPolling(){  String notifier=Preference.getString(context,Constants.PreferenceFlag.NOTIFIER_TYPE);  if (Constants.NOTIFIER_LOCAL.equals(notifier)) {    Log.i(TAG,"EMM auto enrollment, initiating polling task.");    LocalNotification.startPolling(context);  }}  }
class C{  protected HashEntry createEntry(HashEntry next,int hashCode,Object key,Object value){  return new HashEntry(next,hashCode,key,value);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (index_1: ");  result.append(index_1);  result.append(')');  return result.toString();}  }
class C{  public PutIndexTemplateRequest alias(Alias alias){  aliases.add(alias);  return this;}  }
class C{  private CipherBox(){  this.protocolVersion=ProtocolVersion.DEFAULT;  this.cipher=null;  this.cipherType=STREAM_CIPHER;  this.fixedIv=new byte[0];  this.key=null;  this.mode=Cipher.ENCRYPT_MODE;  this.random=null;  this.tagSize=0;  this.recordIvSize=0;}  }
class C{  public static <A>EvalTValue<A> of(final AnyMValue<Eval<A>> monads){  return new EvalTValue<>(monads);}  }
class C{  public static void write(JsonElement element,JsonWriter writer) throws IOException {  TypeAdapters.JSON_ELEMENT.write(writer,element);}  }
class C{  public void appendToLog(String s){  append("\n" + s);}  }
class C{  public boolean serialize(DataObject obj,RowMutator mutator){  try {    String id=obj.getId().toString();    if (isLazyLoaded() || _property.getReadMethod() == null) {      return false;    }    Object val=_property.getReadMethod().invoke(obj);    if (val == null) {      return false;    }    boolean changed=false;switch (_colType) {case NamedURI:case Primitive:{        if (!obj.isChanged(_name)) {          return false;        }        changed=addColumn(id,getColumnName(null,mutator),val,mutator,obj);        break;      }case TrackingSet:{      AbstractChangeTrackingSet valueSet=(AbstractChangeTrackingSet)val;      Set<?> addedSet=valueSet.getAddedSet();      if (addedSet != null) {        Iterator<?> it=valueSet.getAddedSet().iterator();        while (it.hasNext()) {          Object itVal=it.next();          String targetVal=valueSet.valToString(itVal);          changed|=addColumn(id,getColumnName(targetVal,mutator),itVal,mutator);        }      }      Set<?> removedVal=valueSet.getRemovedSet();      if (removedVal != null) {        Iterator<?> removedIt=removedVal.iterator();        while (removedIt.hasNext()) {          String targetVal=valueSet.valToString(removedIt.next());          if (_index == null) {            changed|=removeColumn(id,new ColumnWrapper(getColumnName(targetVal,mutator),targetVal),mutator);          } else {            addDeletionMark(id,getColumnName(targetVal,mutator),mutator);            changed=true;          }        }      }      break;    }case TrackingMap:{    AbstractChangeTrackingMap valueMap=(AbstractChangeTrackingMap)val;    Set<String> changedSet=valueMap.getChangedKeySet();    if (changedSet != null) {      Iterator<String> it=valueMap.getChangedKeySet().iterator();      while (it.hasNext()) {        String key=it.next();        Object entryVal=valueMap.get(key);        CompositeColumnName colName=getColumnName(key,mutator);        if (clockIndValue != null) {          int ordinal=((ClockIndependentValue)entryVal).ordinal();          colName=getColumnName(key,String.format("%08d",ordinal),mutator);        }        changed|=addColumn(id,colName,valueMap.valToByte(entryVal),mutator);      }    }    Set<String> removedKey=valueMap.getRemovedKeySet();    if (removedKey != null) {      Iterator<String> removedIt=removedKey.iterator();      while (removedIt.hasNext()) {        String key=removedIt.next();        CompositeColumnName colName=getColumnName(key,mutator);        if (clockIndValue != null) {          Object removedVal=valueMap.getRemovedValue(key);          if (removedVal != null) {            colName=getColumnName(key,String.format("%08d",((ClockIndependentValue)removedVal).ordinal()),mutator);          }        }        if (_index == null) {          changed|=removeColumn(id,new ColumnWrapper(colName,null),mutator);        } else {          addDeletionMark(id,colName,mutator);          changed=true;        }      }    }    break;  }case TrackingSetMap:{  AbstractChangeTrackingSetMap valueMap=(AbstractChangeTrackingSetMap)val;  Set<String> keys=valueMap.keySet();  if (keys != null) {    Iterator<String> it=keys.iterator();    while (it.hasNext()) {      String key=it.next();      AbstractChangeTrackingSet valueSet=valueMap.get(key);      Set<?> addedSet=valueSet.getAddedSet();      if (addedSet != null) {        Iterator<?> itSet=valueSet.getAddedSet().iterator();        while (itSet.hasNext()) {          String value=valueSet.valToString(itSet.next());          changed|=addColumn(id,getColumnName(key,value,mutator),value,mutator);        }      }      Set<?> removedVal=valueSet.getRemovedSet();      if (removedVal != null) {        Iterator<?> removedIt=removedVal.iterator();        while (removedIt.hasNext()) {          String targetVal=valueSet.valToString(removedIt.next());          if (_index == null) {            changed|=removeColumn(id,new ColumnWrapper(getColumnName(key,targetVal,mutator),targetVal),mutator);          } else {            addDeletionMark(id,getColumnName(key,targetVal,mutator),mutator);            changed=true;          }        }      }    }  }  break;}case NestedObject:{if (!obj.isChanged(_name)) {  break;}AbstractSerializableNestedObject nestedObject=(AbstractSerializableNestedObject)val;changed|=addColumn(id,getColumnName(null,mutator),nestedObject.toBytes(),mutator);}}return changed;} catch (final InvocationTargetException e) {throw DatabaseException.fatals.serializationFailedId(obj.getId(),e);}catch (final IllegalAccessException e) {throw DatabaseException.fatals.serializationFailedId(obj.getId(),e);}}  }
class C{  public void age(Network network){  for (  Vertex vertex : network.findAll()) {    int level=vertex.getConsciousnessLevel();    if (level > 0) {      vertex.decrementConsciousnessLevel(level / 2);    }  }}  }
class C{  public static String buildFilterClause(final String sql,final Object value,final List<Object> preparedArgs){  if (value != null) {    preparedArgs.add(value);    return sql;  } else {    return null;  }}  }
class C{  public void assertArrayEqual(short[] expected,short[] actual,String errorMessage){  TestUtils.assertArrayEqual(expected,actual,errorMessage);}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.EXECUTION_STATE__SUB_SCOPES:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getSubScopes()).basicAdd(otherEnd,msgs);case SexecPackage.EXECUTION_STATE__SUPER_SCOPE:  if (superScope != null)   msgs=((InternalEObject)superScope).eInverseRemove(this,SexecPackage.EXECUTION_SCOPE__SUB_SCOPES,ExecutionScope.class,msgs);return basicSetSuperScope((ExecutionScope)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public StackedXYAreaRendererState(PlotRenderingInfo info){  super(info);  this.seriesArea=null;  this.line=new Line2D.Double();  this.lastSeriesPoints=new Stack();  this.currentSeriesPoints=new Stack();}  }
class C{  private void writeStubMethod(IndentingWriter p,int opnum) throws IOException {  RemoteClass.Method method=remoteMethods[opnum];  MethodDoc methodDoc=method.methodDoc();  String methodName=methodDoc.name();  Type[] paramTypes=method.parameterTypes();  String paramNames[]=nameParameters(paramTypes);  Type returnType=methodDoc.returnType();  ClassDoc[] exceptions=method.exceptionTypes();  p.pln("// implementation of " + Util.getFriendlyUnqualifiedSignature(methodDoc));  p.p("public " + returnType.toString() + " "+ methodName+ "(");  for (int i=0; i < paramTypes.length; i++) {    if (i > 0) {      p.p(", ");    }    p.p(paramTypes[i].toString() + " " + paramNames[i]);  }  p.plnI(")");  if (exceptions.length > 0) {    p.p("throws ");    for (int i=0; i < exceptions.length; i++) {      if (i > 0) {        p.p(", ");      }      p.p(exceptions[i].qualifiedName());    }    p.pln();  }  p.pOlnI("{");  List<ClassDoc> catchList=computeUniqueCatchList(exceptions);  if (catchList.size() > 0) {    p.plnI("try {");  }  if (version == StubVersion.VCOMPAT) {    p.plnI("if (useNewInvoke) {");  }  if (version == StubVersion.VCOMPAT || version == StubVersion.V1_2) {    if (!Util.isVoid(returnType)) {      p.p("Object $result = ");    }    p.p("ref.invoke(this, " + methodFieldNames[opnum] + ", ");    if (paramTypes.length > 0) {      p.p("new java.lang.Object[] {");      for (int i=0; i < paramTypes.length; i++) {        if (i > 0)         p.p(", ");        p.p(wrapArgumentCode(paramTypes[i],paramNames[i]));      }      p.p("}");    } else {      p.p("null");    }    p.pln(", " + method.methodHash() + "L);");    if (!Util.isVoid(returnType)) {      p.pln("return " + unwrapArgumentCode(returnType,"$result") + ";");    }  }  if (version == StubVersion.VCOMPAT) {    p.pOlnI("} else {");  }  if (version == StubVersion.V1_1 || version == StubVersion.VCOMPAT) {    p.pln(REMOTE_CALL + " call = ref.newCall((" + REMOTE_OBJECT+ ") this, operations, "+ opnum+ ", interfaceHash);");    if (paramTypes.length > 0) {      p.plnI("try {");      p.pln("java.io.ObjectOutput out = call.getOutputStream();");      writeMarshalArguments(p,"out",paramTypes,paramNames);      p.pOlnI("} catch (java.io.IOException e) {");      p.pln("throw new " + MARSHAL_EXCEPTION + "(\"error marshalling arguments\", e);");      p.pOln("}");    }    p.pln("ref.invoke(call);");    if (Util.isVoid(returnType)) {      p.pln("ref.done(call);");    } else {      p.pln(returnType.toString() + " $result;");      p.plnI("try {");      p.pln("java.io.ObjectInput in = call.getInputStream();");      boolean objectRead=writeUnmarshalArgument(p,"in",returnType,"$result");      p.pln(";");      p.pOlnI("} catch (java.io.IOException e) {");      p.pln("throw new " + UNMARSHAL_EXCEPTION + "(\"error unmarshalling return\", e);");      if (objectRead) {        p.pOlnI("} catch (java.lang.ClassNotFoundException e) {");        p.pln("throw new " + UNMARSHAL_EXCEPTION + "(\"error unmarshalling return\", e);");      }      p.pOlnI("} finally {");      p.pln("ref.done(call);");      p.pOln("}");      p.pln("return $result;");    }  }  if (version == StubVersion.VCOMPAT) {    p.pOln("}");  }  if (catchList.size() > 0) {    for (    ClassDoc catchClass : catchList) {      p.pOlnI("} catch (" + catchClass.qualifiedName() + " e) {");      p.pln("throw e;");    }    p.pOlnI("} catch (java.lang.Exception e) {");    p.pln("throw new " + UNEXPECTED_EXCEPTION + "(\"undeclared checked exception\", e);");    p.pOln("}");  }  p.pOln("}");}  }
class C{  public BulkRetrievalEvent(BulkRetrievable source,String eventType,String item){  super(source);  this.eventType=eventType;  this.item=item;}  }
class C{  @NotNull public List<? extends TargetBuilder<?,?>> createBuilders(){  return Collections.emptyList();}  }
class C{  public TrieTest(String name){  super(name);}  }
class C{  protected ModbusSlave(int port,int poolSize) throws ModbusException {  this(ModbusSlaveType.TCP,port,poolSize,null);}  }
class C{  public final boolean readBoolean() throws IOException {  int ch=in.read();  if (ch < 0)   throw new EOFException();  return (ch != 0);}  }
class C{  public ReaderComponent(String name,ReaderWorld newWorld){  super(name);  world=newWorld;  init();}  }
class C{  public TenantDeletionConstraintException(String message,TenantDeletionConstraintException.Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  protected void onPushDismiss(Context context,Intent intent){}  }
class C{  public void resetDocumentLocator(String publicid,String systemid){  thePublicid=publicid;  theSystemid=systemid;  theLastLine=theLastColumn=theCurrentLine=theCurrentColumn=0;}  }
class C{  public void doPrint(){  PrintController printer=new PrintController();  printer.printComponent(getFrame(),jTextArea1,"Print Errors");}  }
class C{  public void removeStream(String streamName){  StreamMeta sm=logicalPlan.getStream(streamName);  if (sm == null) {    return;  }  if (physicalPlan != null) {    physicalPlan.removeLogicalStream(sm);  }  sm.remove();}  }
class C{  public NameNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void computeRangeFacet(String facet){  Map<String,StatsCollector[]> f=rangeFacetCollectors.get(facet);  for (  StatsCollector[] arr : f.values()) {    for (    StatsCollector b : arr) {      b.compute();    }  }}  }
class C{  protected String normalizeNewlines(String source){  return perl.substitute("s/\r[\n]/\n/g",source);}  }
class C{  public static List<Object> parseParams(WarpScriptStack stack,int... numparams) throws WarpScriptException {  List<Object> params=new ArrayList<Object>();  int count=0;  Arrays.sort(numparams);  int maxparams=numparams[numparams.length - 1];  while (0 != stack.depth() && count <= maxparams) {    Object top=stack.pop();    if (top instanceof PGraphics) {      params.add(top);      Collections.reverse(params);      break;    }    params.add(top);    count++;  }  if (Arrays.binarySearch(numparams,count) < 0) {    throw new WarpScriptException("Invalid number of parameters, expected one of " + Arrays.toString(numparams) + " but found "+ count);  }  return params;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:09.403 -0500",hash_original_method="2022581A914A53DEAB486C7C21721639",hash_generated_method="0B028D7882C237D4D15E9A31C97182E9") public int compareMediaRange(String media){  return (mediaRange.type + "/" + mediaRange.subtype).compareToIgnoreCase(media);}  }
class C{  public void copy(BytesRef bytes,BytesRef out){  int left=blockSize - upto;  if (bytes.length > left || currentBlock == null) {    if (currentBlock != null) {      addBlock(currentBlock);      didSkipBytes=true;    }    currentBlock=new byte[blockSize];    upto=0;    left=blockSize;    assert bytes.length <= blockSize;  }  out.bytes=currentBlock;  out.offset=upto;  out.length=bytes.length;  System.arraycopy(bytes.bytes,bytes.offset,currentBlock,upto,bytes.length);  upto+=bytes.length;}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  private void handleEventSynchronous(Event event) throws ReplicatorException {  EventRequest request=null;  try {    request=eventDispatcher.put(event);    request.get();  } catch (  InterruptedException e) {    logger.warn("Event processing was interrupted: " + event.getClass().getName());    Thread.currentThread().interrupt();    return;  }catch (  ExecutionException e) {    logger.warn("Event processing failed: " + event.getClass().getName(),e);    return;  }  Object annotation=request.getAnnotation();  if (annotation instanceof ReplicatorException) {    ReplicatorException e=(ReplicatorException)annotation;    if (logger.isDebugEnabled())     logger.debug("Event processing failed",e);    throw e;  }}  }
class C{  public static void assertNull(Object object,String message){  if (object != null) {    throw new IllegalArgumentException("assertion failed:" + message);  }}  }
class C{  protected void endDocument() throws XMLStreamException {  this.writer.writeEndElement();  this.writer.writeEndElement();  this.writer.writeEndDocument();  this.writer.close();}  }
class C{  @Override public void onDestroyView(){  mHandler.removeCallbacks(mRequestFocus);  mList=null;  mListShown=false;  mEmptyView=mProgressContainer=mListContainer=null;  mStandardEmptyView=null;  super.onDestroyView();}  }
class C{  private static String grabLine(BufferedReader r) throws Exception {  int index=0;  String line=r.readLine();  while (line.startsWith("//") || line.length() < 1)   line=r.readLine();  while ((index=line.indexOf("\\n")) != -1) {    StringBuffer temp=new StringBuffer(line);    temp.replace(index,index + 2,"\n");    line=temp.toString();  }  while ((index=line.indexOf("\\u")) != -1) {    StringBuffer temp=new StringBuffer(line);    String value=temp.substring(index + 2,index + 6);    char aChar=(char)Integer.parseInt(value,16);    String unicodeChar="" + aChar;    temp.replace(index,index + 6,unicodeChar);    line=temp.toString();  }  return line;}  }
class C{  public EdgeInfo(int start,int end,int cap,int cost){  this.start=start;  this.end=end;  this.capacity=cap;  this.cost=cost;}  }
class C{  static public double perc(int value,int max){  return perc((double)value,(double)max);}  }
class C{  public static boolean isExternalStorageAvailable(){  String state=Environment.getExternalStorageState();  boolean mExternalStorageAvailable, mExternalStorageWriteable;  if (Environment.MEDIA_MOUNTED.equals(state)) {    mExternalStorageAvailable=mExternalStorageWriteable=true;  } else   if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {    mExternalStorageAvailable=true;    mExternalStorageWriteable=false;  } else {    mExternalStorageAvailable=mExternalStorageWriteable=false;  }  return mExternalStorageAvailable && mExternalStorageWriteable;}  }
class C{  @Override public void put(String name,boolean value){  emulatedFields.put(name,value);}  }
class C{  public BubbleChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);}  }
class C{  public boolean hasAdds(){  return !addedClusters.isEmpty() || !addedHosts.isEmpty() || !addedInitiators.isEmpty();}  }
class C{  private void _serializeList(PageContext pc,Set test,List list,StringBuilder sb,boolean serializeQueryByColumns,Set<Object> done) throws ConverterException {  sb.append(goIn());  sb.append("[");  boolean doIt=false;  ListIterator it=list.listIterator();  while (it.hasNext()) {    if (doIt)     sb.append(',');    doIt=true;    _serialize(pc,test,it.next(),sb,serializeQueryByColumns,done);  }  sb.append(']');}  }
class C{  public NSData(byte[] bytes){  this.bytes=bytes;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  if (a == null)   return new Long(0);  Watched w=Wizard.getInstance().getWatch(a);  if (w != null)   return new Long(w.getRealWatchStart());  if (stack.getUIMgrSafe() != null && stack.getUIMgrSafe().getVideoFrame().hasFile()) {    MediaFile mf=stack.getUIMgrSafe().getVideoFrame().getCurrFile();    if (mf != null && mf.getContentAiring() == a)     return new Long(stack.getUIMgrSafe().getVideoFrame().getRealWatchStart());  }  return new Long(0);}  }
class C{  public String toString(){  return ((primaryGroup ? rb.getString("SolarisNumericGroupPrincipal.Primary.Group.") + name : rb.getString("SolarisNumericGroupPrincipal.Supplementary.Group.") + name));}  }
class C{  @PostConstruct public void build(){  try {    if (eventStream == null) {      logger.info("Building event stream...");    } else {      logger.info("Rebuilding event stream..");      eventStream.setActive(false);    }    eventStream=makeEventStream();    eventStream.setActive(true);    logger.info("Success building event stream.");  } catch (  Exception e) {    logger.error("Fail to build event stream reason : " + e.getMessage(),e);  }}  }
class C{  public static int discrete(double[] probabilities){  if (probabilities == null)   throw new NullPointerException("argument array is null");  double EPSILON=1E-14;  double sum=0.0;  for (int i=0; i < probabilities.length; i++) {    if (!(probabilities[i] >= 0.0))     throw new IllegalArgumentException("array entry " + i + " must be nonnegative: "+ probabilities[i]);    sum+=probabilities[i];  }  if (sum > 1.0 + EPSILON || sum < 1.0 - EPSILON)   throw new IllegalArgumentException("sum of array entries does not approximately equal 1.0: " + sum);  while (true) {    double r=uniform();    sum=0.0;    for (int i=0; i < probabilities.length; i++) {      sum=sum + probabilities[i];      if (sum > r)       return i;    }  }}  }
class C{  public Builder singleShot(long shotId){  showcaseView.setSingleShot(shotId);  return this;}  }
class C{  public PostfixOperator createPostfixOperatorFromString(EDataType eDataType,String initialValue){  PostfixOperator result=PostfixOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public void hidePalette(){  WindowSupport ws=getWindowSupport();  if (ws != null) {    ws.killWindow();  }}  }
class C{  public void addCatch(char startPc,char endPc,char handlerPc,char catchType){  catchInfo.append(new char[]{startPc,endPc,handlerPc,catchType});}  }
class C{  public List<Integer> spiralOrderB(int[][] matrix){  List<Integer> res=new ArrayList<Integer>();  if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {    return res;  }  int iMin=0;  int iMax=matrix.length - 1;  int jMin=0;  int jMax=matrix[0].length - 1;  int i=0;  int j=0;  while (iMin <= iMax && jMin <= jMax) {    for (j=jMin; j <= jMax; j++) {      res.add(matrix[iMin][j]);    }    iMin++;    if (iMin > iMax) {      break;    }    for (i=iMin; i <= iMax; i++) {      res.add(matrix[i][jMax]);    }    jMax--;    if (jMax < jMin) {      break;    }    for (j=jMax; j >= jMin; j--) {      res.add(matrix[iMax][j]);    }    iMax--;    if (iMax < iMin) {      break;    }    for (i=iMax; i >= iMin; i--) {      res.add(matrix[i][jMin]);    }    jMin++;  }  return res;}  }
class C{  public boolean hasLandingPage(){  return landingPage;}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  @Override public String toObjectExpr(String columnName){  if (_value == null) {    return "null";  } else   if (_value instanceof String) {    return "'" + _value + "'";  } else {    return String.valueOf(_value);  }}  }
class C{  protected void paintComponent(Graphics g){  Graphics2D g2D=(Graphics2D)g;  Rectangle bounds=getBounds();  m_icon.paintIcon(this,g2D,0,0);  Color color=getForeground();  g2D.setPaint(color);  Font font=getFont();  AttributedString aString=new AttributedString(m_name);  aString.addAttribute(TextAttribute.FONT,font);  aString.addAttribute(TextAttribute.FOREGROUND,color);  AttributedCharacterIterator iter=aString.getIterator();  LineBreakMeasurer measurer=new LineBreakMeasurer(iter,g2D.getFontRenderContext());  float width=s_size.width - m_icon.getIconWidth() - 2;  TextLayout layout=measurer.nextLayout(width);  float xPos=m_icon.getIconWidth();  float yPos=layout.getAscent() + 2;  layout.draw(g2D,xPos,yPos);  width=s_size.width - 4;  while (measurer.getPosition() < iter.getEndIndex()) {    layout=measurer.nextLayout(width);    yPos+=layout.getAscent() + layout.getDescent() + layout.getLeading();    layout.draw(g2D,2,yPos);  }}  }
class C{  public static String createTimeString(int year,int month,int day,int hours,int minutes,int seconds,String timezoneID){  StringBuilder builder=new StringBuilder();  builder.append(Integer.toString(year)).append("-").append(Integer.toString(month)).append("-").append(Integer.toString(day)).append("T");  if (hours < 10) {    builder.append(0);  }  builder.append(Integer.toString(hours));  builder.append(":");  if (minutes < 10) {    builder.append(0);  }  builder.append(Integer.toString(minutes));  builder.append(":");  if (seconds < 10) {    builder.append(0);  }  builder.append(Integer.toString(seconds));  builder.append(createTimezoneString(timezoneID));  return builder.toString();}  }
class C{  public JBBPOut ByteOrder(final JBBPByteOrder value) throws IOException {  assertNotEnded();  JBBPUtils.assertNotNull(value,"Byte order must not be null");  if (this.processCommands) {    this.byteOrder=value;  }  return this;}  }
class C{  public Color alphaf(float alpha){  return rgba(red(),green(),blue(),colorConvert(alpha));}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!mutate) {    value=cssEngine.parsePropertyValue(SVGStylableElement.this,property,newv);  }}  }
class C{  @Override public void close() throws IOException {  buffer=null;}  }
class C{  public void dispose(){}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public Allpass(Polynomial A){  k=A.reflectionCoefficients();  order=k.length;  state=new double[order + 1];  constructRationalRepresentation();}  }
class C{  private void updateBadge(){  if (badgeWidget == null) {    return;  }  if (tabSelected) {    badgeWidget.getElement().getStyle().setBorderColor(org.eclipse.che.ide.api.theme.Style.theme.activeTabBackground());  } else {    badgeWidget.getElement().getStyle().setBorderColor(org.eclipse.che.ide.api.theme.Style.theme.tabsPanelBackground());  }}  }
class C{  static public void selectIntialPoints(DataSet d,int[] indices,DistanceMetric dm,List<Double> accelCache,Random rand,SeedSelection selectionMethod){  selectIntialPoints(d,indices,dm,accelCache,rand,selectionMethod,null);}  }
class C{  boolean isOnScreen(){  if (!mHasSurface || !mPolicyVisibility || mDestroying) {    return false;  }  final AppWindowToken atoken=mAppToken;  if (atoken != null) {    return ((!mAttachedHidden && !atoken.hiddenRequested) || mWinAnimator.mAnimation != null || atoken.mAppAnimator.animation != null);  }  return !mAttachedHidden || mWinAnimator.mAnimation != null;}  }
class C{  public PointsToSet reachingObjects(SootField f){  Type t=f.getType();  if (t instanceof RefType)   return FullObjectSet.v((RefType)t);  return FullObjectSet.v();}  }
class C{  public void drawTile(VPFGraphicWarehouse warehouse,double dpplat,double dpplon,LatLonPoint ll1,LatLonPoint ll2){  double ll1lat=ll1.getY();  double ll1lon=ll1.getX();  double ll2lat=ll2.getY();  double ll2lon=ll2.getX();  try {    for (List<Object> node=new ArrayList<Object>(); parseRow(node); ) {      CoordFloatString coords=(CoordFloatString)node.get(coordColumn);      double lat=coords.getYasFloat(0);      double lon=coords.getXasFloat(0);      if ((lat > ll2lat) && (lat < ll1lat) && (lon > ll1lon)&& (lon < ll2lon)) {        warehouse.createNode(covtable,this,node,lat,lon,isEntityNode);      }    }  } catch (  FormatException f) {    System.out.println("Exception: " + f.getClass() + " "+ f.getMessage());  }}  }
class C{  public T caseProjectDependency(ProjectDependency object){  return null;}  }
class C{  public static String resolveRepoUrl(String repoUrl){  Repositories repositories=Repositories.get();  return resolveRepoUrl(repositories,repoUrl);}  }
class C{  public boolean isTransient(){  return transient_var;}  }
class C{  public void add(T value){  pushBack();  array[0]=value;}  }
class C{  public DiscoveryNode node(){  return node;}  }
class C{  public int read() throws IOException {  return in.read();}  }
class C{  public static String arrayToString(Object array){  String result;  int dimensions;  int i;  result="";  dimensions=getArrayDimensions(array);  if (dimensions == 0) {    result="null";  } else   if (dimensions == 1) {    for (i=0; i < Array.getLength(array); i++) {      if (i > 0) {        result+=",";      }      if (Array.get(array,i) == null) {        result+="null";      } else {        result+=Array.get(array,i).toString();      }    }  } else {    for (i=0; i < Array.getLength(array); i++) {      if (i > 0) {        result+=",";      }      result+="[" + arrayToString(Array.get(array,i)) + "]";    }  }  return result;}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public void viewpointChanged(){  contourScene.needsRender.set(true);}  }
class C{  public void testCompareToNegNeg1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(-1,aNumber.compareTo(bNumber));}  }
class C{  private MessageBox(){}  }
class C{  public static double[][] randomNormal(int m,int n,double mu,double sigma){  double[][] A=new double[m][n];  for (int i=0; i < A.length; i++)   for (int j=0; j < A[i].length; j++)   A[i][j]=Random.normal(mu,sigma);  return A;}  }
class C{  public final TestSubscriber<T> assertFusionRejected(){  if (establishedFusionMode != Fuseable.NONE) {    assertionError("Fusion was granted");  }  return this;}  }
class C{  protected void preorder(TreeNode<E> root){  if (root == null)   return;  System.out.print(root.element + " ");  preorder(root.left);  preorder(root.right);}  }
class C{  public Boolean isLttrOfGrntedDlvryInd(){  return lttrOfGrntedDlvryInd;}  }
class C{  public static void logAndShow(Activity activity,String tag,Throwable t){  Log.e(tag,"Error",t);  String message=t.getMessage();  if (t instanceof GoogleJsonResponseException) {    GoogleJsonError details=((GoogleJsonResponseException)t).getDetails();    if (details != null) {      message=details.getMessage();    }  } else   if (t.getCause() instanceof GoogleAuthException) {    message=((GoogleAuthException)t.getCause()).getMessage();  }  showError(activity,message);}  }
class C{  public void focusGained(FocusEvent e){  getHandler().focusGained(e);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void loadDBisSavepointReleaseable(){  s_logger.log(Level.FINE,"loadDBisSavepointReleaseable",getDirection());  m_isSavepointReleaseable=true;  Savepoint sp=null;  try {    sp=getConnection().setSavepoint("releasetest");    try {      getConnection().releaseSavepoint(sp);    } catch (    SQLException e) {      m_isSavepointReleaseable=false;    } finally {      sp=null;    }  } catch (  SQLException e) {    sp=null;  }  if (m_isSavepointReleaseable)   s_logger.log(Level.FINE,"dbisSavepointReleaseableYes"); else   s_logger.log(Level.FINE,"dbisSavepointReleaseableNo");  s_logger.flush();}  }
class C{  public void replaceNode(BNode node){  if (!nodes.containsKey(node.getId())) {    log.fine("network does not contain a node with identifier " + node.getId());  } else {    removeNode(node.getId());  }  addNode(node);}  }
class C{  private void updateState(DialogueState state){  while (!state.getNewVariables().isEmpty()) {    Set<String> toProcess=state.getNewVariables();    state.reduce();    for (    Model model : system.getDomain().getModels()) {      if (model.isTriggered(state,toProcess)) {        boolean change=model.trigger(state);        if (change && model.isBlocking()) {          break;        }      }    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tA filter to apply (can be specified multiple times).","F",1,"-F <classname [options]>"));  result.addElement(new Option("\tAn attribute range (can be specified multiple times).\n" + "\tFor each filter a range must be supplied. 'first' and 'last'\n" + "\tare valid indices. 'inv(...)' around the range denotes an\n"+ "\tinverted range.","R",1,"-R <range>"));  result.addElement(new Option("\tFlag for leaving unused attributes out of the output, by default\n" + "\tthese are included in the filter output.","U",0,"-U"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public boolean isBaselineOffsetAsEnum(){  if (this.baselineOffsetAsEnum != null)   return true; else   return false;}  }
class C{  public QueueList(){}  }
class C{  public MemoryByteArray(byte[] b,int filledLength){  super(filledLength,b.length);  this.b=b;}  }
class C{  public void start(){  if (parent.isDisposed()) {    SWT.error(SWT.ERROR_WIDGET_DISPOSED);  }  currentPosition=0;  fadeIn=true;  fadeOut=false;  fadeOutCounter=0;  if (defaultColor == null) {    defaultColor=SWTGraphicUtil.getDefaultColor(parent,200,200,200);  }  if (selectionColor == null) {    selectionColor=parent.getDisplay().getSystemColor(SWT.COLOR_BLACK);  }  createShell();  createAndRunAnimatorThread();}  }
class C{  public static int powerOfTwoFloor(int reference){  int power=(int)Math.floor(Math.log(reference) / Math.log(2d));  return (int)Math.pow(2d,power);}  }
class C{  public Map<Integer,Double> computeInPlace(double... dataset){  checkArgument(dataset.length > 0,"Cannot calculate quantiles of an empty dataset");  if (containsNaN(dataset)) {    Map<Integer,Double> nanMap=new HashMap<Integer,Double>();    for (    int index : indexes) {      nanMap.put(index,NaN);    }    return unmodifiableMap(nanMap);  }  int[] quotients=new int[indexes.length];  int[] remainders=new int[indexes.length];  int[] requiredSelections=new int[indexes.length * 2];  int requiredSelectionsCount=0;  for (int i=0; i < indexes.length; i++) {    long numerator=(long)indexes[i] * (dataset.length - 1);    int quotient=(int)LongMath.divide(numerator,scale,RoundingMode.DOWN);    int remainder=(int)(numerator - (long)quotient * scale);    quotients[i]=quotient;    remainders[i]=remainder;    requiredSelections[requiredSelectionsCount]=quotient;    requiredSelectionsCount++;    if (remainder != 0) {      requiredSelections[requiredSelectionsCount]=quotient + 1;      requiredSelectionsCount++;    }  }  sort(requiredSelections,0,requiredSelectionsCount);  selectAllInPlace(requiredSelections,0,requiredSelectionsCount - 1,dataset,0,dataset.length - 1);  Map<Integer,Double> ret=new HashMap<Integer,Double>();  for (int i=0; i < indexes.length; i++) {    int quotient=quotients[i];    int remainder=remainders[i];    if (remainder == 0) {      ret.put(indexes[i],dataset[quotient]);    } else {      ret.put(indexes[i],interpolate(dataset[quotient],dataset[quotient + 1],remainder,scale));    }  }  return unmodifiableMap(ret);}  }
class C{  public boolean removeFile(MetaImage mi){  boolean rv=false;synchronized (this) {    CachedFileEntry entry=miToCachedFile.get(mi);    if (entry != null) {      miToCachedFile.remove(mi);      totalFileSize-=entry.fileSize;      rv=entry.file.delete();      if (DEBUG_MI_CACHE)       System.out.println("deleting tracked local cache file for MI " + mi + ": "+ entry.file+ ", image cache numItems="+ miToCachedFile.size()+ " total file size="+ totalFileSize);    }    return rv;  }}  }
class C{  public boolean contains(Geometry geom){  return eval(geom);}  }
class C{  void fireDisconnectedEvents(){  ArrayList registered=null;  HostEvent ev=null;synchronized (listeners) {    registered=(ArrayList)listeners.clone();  }  for (Iterator i=registered.iterator(); i.hasNext(); ) {    HostListener l=(HostListener)i.next();    if (ev == null) {      ev=new HostEvent(this);    }    l.disconnected(ev);  }}  }
class C{  private void renderAxes(Camera camera){  glPushMatrix();  glLoadIdentity();  float rotX=camera.getRotation().x;  float rotY=camera.getRotation().y;  float rotZ=0;  glRotatef(rotX,1.0f,0.0f,0.0f);  glRotatef(rotY,0.0f,1.0f,0.0f);  glRotatef(rotZ,0.0f,0.0f,1.0f);  glLineWidth(2.0f);  glBegin(GL_LINES);  glColor3f(1.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(1.0f,0.0f,0.0f);  glColor3f(0.0f,1.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,1.0f,0.0f);  glColor3f(1.0f,1.0f,1.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,1.0f);  glEnd();  glPopMatrix();}  }
class C{  public static synchronized boolean saveTemplates(){  if (!getTemplatesEnabled()) {    return false;  }  return getCodeTemplateManager().saveTemplates();}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public void beforeInsert(int index,int element){  if (size == index) {    add(element);    return;  }  if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  ensureCapacity(size + 1);  System.arraycopy(elements,index,elements,index + 1,size - index);  elements[index]=element;  size++;}  }
class C{  static String sqlToRegexSimilar(String sqlPattern,CharSequence escapeStr){  final char escapeChar;  if (escapeStr != null) {    if (escapeStr.length() != 1) {      throw invalidEscapeCharacter(escapeStr.toString());    }    escapeChar=escapeStr.charAt(0);  } else {    escapeChar=0;  }  return sqlToRegexSimilar(sqlPattern,escapeChar);}  }
class C{  public void incrementWeight(){  if (strength < upperBound) {    strength+=increment;  }  getNetwork().fireSynapseChanged(this);}  }
class C{  public boolean isMinYSet(int scale){  return mMinY[scale] != MathHelper.NULL_VALUE;}  }
class C{  public void putDescription(File f,String fileDescription){  fileDescriptions.put(f,fileDescription);}  }
class C{  public static Exists createExists(Model model,ElementList elements){  Exists notExists=model.createResource(SP.Exists).as(Exists.class);  notExists.addProperty(SP.elements,elements);  return notExists;}  }
class C{  private void clientServerTombstoneMessageTest(boolean replicatedRegion){  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  VM vm1=host.getVM(1);  VM vm2=host.getVM(2);  VM vm3=host.getVM(3);  final String name=this.getUniqueName() + "Region";  int port1=createServerRegion(vm0,name,replicatedRegion);  int port2=createServerRegion(vm1,name,replicatedRegion);  createDurableClientRegion(vm2,name,port1,port2,true);  createDurableClientRegion(vm3,name,port1,port2,true);  createEntries(vm2);  destroyEntries(vm3);  forceGC(vm0);  if (!replicatedRegion) {    forceGC(vm1);  }  Wait.pause(5000);  checkClientReceivedGC(vm2);  checkClientReceivedGC(vm3);  checkServerQueuesEmpty(vm0);  checkServerQueuesEmpty(vm1);}  }
class C{  public static void e(String tag,String msg){  e(tag,msg,null);}  }
class C{  public TreePath(TreePath p,Tree t){  if (t.getKind() == Tree.Kind.COMPILATION_UNIT) {    compilationUnit=(CompilationUnitTree)t;    parent=null;  } else {    compilationUnit=p.compilationUnit;    parent=p;  }  leaf=t;}  }
class C{  public SourceFolderSelectionDialog(){  super(UIUtils.getShell());  this.setLabelProvider(new SourceFolderLabelProvider());  this.setContentProvider(new ArrayContentProvider());  this.setHelpAvailable(false);}  }
class C{  public OracleExtractionHG(int lm_feat_id_){  this.lm_feat_id=lm_feat_id_;  this.BACKOFF_LEFT_LM_STATE_SYM_ID=Vocabulary.id(BACKOFF_LEFT_LM_STATE_SYM);  this.NULL_LEFT_LM_STATE_SYM_ID=Vocabulary.id(NULL_RIGHT_LM_STATE_SYM);  this.NULL_RIGHT_LM_STATE_SYM_ID=Vocabulary.id(NULL_RIGHT_LM_STATE_SYM);}  }
class C{  public Criteria OR(){  return this.example.or();}  }
class C{  public JCStatement Call(JCExpression apply){  return apply.type.hasTag(VOID) ? Exec(apply) : Return(apply);}  }
class C{  private void changeFontSize(int s){  setFont(m_currentFont=new Font("A Name",0,s));  m_fontSize=getFontMetrics(getFont());  Dimension d;  for (int noa=0; noa < m_numNodes; noa++) {    d=m_nodes[noa].m_node.stringSize(m_fontSize);    if (m_nodes[noa].m_node.getShape() == 1) {      m_nodes[noa].m_height=d.height + 10;      m_nodes[noa].m_width=d.width + 8;      m_nodes[noa].m_side=m_nodes[noa].m_width / 2;    } else     if (m_nodes[noa].m_node.getShape() == 2) {      m_nodes[noa].m_height=(int)((d.height + 2) * 1.6);      m_nodes[noa].m_width=(int)((d.width + 2) * 1.6);      m_nodes[noa].m_side=m_nodes[noa].m_width / 2;    }    if (noa < m_numNodes - 1) {      d=m_edges[noa].m_edge.stringSize(m_fontSize);      m_edges[noa].m_height=d.height + 8;      m_edges[noa].m_width=d.width + 8;      m_edges[noa].m_side=m_edges[noa].m_width / 2;      m_edges[noa].m_tb=m_edges[noa].m_height / 2;    }  }}  }
class C{  public static int gsmBcdByteToInt(byte b){  int ret=0;  if ((b & 0xf0) <= 0x90) {    ret=(b >> 4) & 0xf;  }  if ((b & 0x0f) <= 0x09) {    ret+=(b & 0xf) * 10;  }  return ret;}  }
class C{  public void paintPlot(Graphics2D g2,double xScale,double yScale,double xOffset,double yOffset){  if (distribution == null) {    return;  }  super.paintPlot(g2,xScale,yScale,xOffset,yOffset);  g2.setPaint(linePaint);  g2.setStroke(lineStroke);  double x1=xMin + offset;  double y1=distribution.pdf(x1 - offset);  double step=(xMax - xMin) / stepCount;  for (int i=1; i < stepCount; i++) {    double x2=x1 + step;    double y2=distribution.pdf(x2 - offset);    drawLine(g2,x1,y1,x2,y2);    x1=x2;    y1=y2;  }}  }
class C{  protected void removeAction(KeyStroke keyStroke,KeyboardCallback keyboardCallback){synchronized (actions) {    if (actions.containsKey(keyStroke) && actions.get(keyStroke).contains(keyboardCallback)) {synchronized (actions.get(keyStroke)) {        actions.get(keyStroke).remove(keyboardCallback);      }    }  }}  }
class C{  @Override public void process(KeyValPair<K,V> tuple){  addTuple(tuple,numerators);}  }
class C{  public TimePeriodFormatException(String message){  super(message);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean add(BugInstance bugInstance){  return add(bugInstance,bugInstance.getFirstVersion() == 0L && bugInstance.getLastVersion() == 0L);}  }
class C{  @Override public void close() throws IOException {  if (!closed) {    inf.end();    closed=true;    eof=true;    super.close();  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Client_ID"))     p_AD_Client_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_Record_ID=getRecord_ID();}  }
class C{  private void checkRerequest(Set<String> streams){  if (!checkTimePassed(specialCheckLastDone,SPECIAL_CHECK_DELAY,streamsRequestErrors)) {    return;  }  requestStreamsInfo2(streams,true);}  }
class C{  private UasBnoAuth(){}  }
class C{  public boolean shouldStop(){  return getProcessState() == PROCESS_STATE_STOPPED;}  }
class C{  private void drawVertical(Canvas c,RecyclerView parent){  final int left=parent.getPaddingLeft();  final int right=parent.getWidth() - parent.getPaddingRight();  final int childCount=parent.getChildCount();  for (int i=0; i < childCount; i++) {    final View child=parent.getChildAt(i);    final RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();    final int top=child.getBottom() + params.bottomMargin + Math.round(ViewCompat.getTranslationY(child));    final int bottom=top + mDivider.getIntrinsicHeight();    mDivider.setBounds(left,top,right,bottom);    mDivider.draw(c);  }}  }
class C{  public final boolean bringPointIntoView(final int offset){  return getView().bringPointIntoView(offset);}  }
class C{  public boolean overEquator(){  LatLonPoint llN=new LatLonPoint.Float();  inverse(width / 2,0,llN);  LatLonPoint llS=new LatLonPoint.Float();  inverse(width / 2,height,llS);  return MoreMath.sign(llN.getY()) != MoreMath.sign(llS.getY());}  }
class C{  public void paintTabbedPaneTabAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public boolean isReadyToShop(){  return readyToShop;}  }
class C{  private List<List<Cluster<CorrelationModel>>> extractCorrelationClusters(Clustering<Model> dbscanResult,Relation<V> relation,int dimensionality,ERiCNeighborPredicate<V>.Instance npred){  List<List<Cluster<CorrelationModel>>> clusterMap=new ArrayList<>();  for (int i=0; i <= dimensionality; i++) {    clusterMap.add(new ArrayList<Cluster<CorrelationModel>>());  }  Cluster<Model> noise=null;  for (  Cluster<Model> clus : dbscanResult.getAllClusters()) {    DBIDs group=clus.getIDs();    int dim=clus.isNoise() ? dimensionality : npred.dimensionality(clus.getIDs().iter());    if (dim < dimensionality) {      EigenPairFilter filter=new FirstNEigenPairFilter(dim);      List<Cluster<CorrelationModel>> correlationClusters=clusterMap.get(dim);      SortedEigenPairs epairs=settings.pca.processIds(group,relation).getEigenPairs();      int numstrong=filter.filter(epairs.eigenValues());      PCAFilteredResult pcares=new PCAFilteredResult(epairs,numstrong,1.,0.);      double[] centroid=Centroid.make(relation,group).getArrayRef();      Cluster<CorrelationModel> correlationCluster=new Cluster<>("[" + dim + "_"+ correlationClusters.size()+ "]",group,new CorrelationModel(pcares,centroid));      correlationClusters.add(correlationCluster);    } else {      if (noise == null) {        noise=clus;      } else {        ModifiableDBIDs merged=DBIDUtil.newHashSet(noise.getIDs());        merged.addDBIDs(clus.getIDs());        noise.setIDs(merged);      }    }  }  if (noise != null && noise.size() > 0) {    List<Cluster<CorrelationModel>> correlationClusters=clusterMap.get(dimensionality);    EigenPairFilter filter=new FirstNEigenPairFilter(dimensionality);    SortedEigenPairs epairs=settings.pca.processIds(noise.getIDs(),relation).getEigenPairs();    int numstrong=filter.filter(epairs.eigenValues());    PCAFilteredResult pcares=new PCAFilteredResult(epairs,numstrong,1.,0.);    double[] centroid=Centroid.make(relation,noise.getIDs()).getArrayRef();    Cluster<CorrelationModel> correlationCluster=new Cluster<>("[noise]",noise.getIDs(),new CorrelationModel(pcares,centroid));    correlationClusters.add(correlationCluster);  }  for (int i=dimensionality; i > 0; i--) {    if (!clusterMap.get(i).isEmpty()) {      break;    }    clusterMap.remove(i);  }  return clusterMap;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.setCharacterEncoding("utf-8");  response.setCharacterEncoding("utf-8");  int userid=0;  String school="";  String code=request.getParameter("code");  school=(String)request.getSession().getAttribute("school");  if (school == null || "".equals(school)) {    response.sendRedirect("../index.jsp");    return;  }  try {    String id=request.getSession().getAttribute("userid").toString();    userid=Integer.parseInt(id);  } catch (  Exception e) {    response.sendRedirect("../" + school);    return;  }  UserSql userSql=new UserSql(school);  User user=userSql.getUser(userid);  if (user == null) {    response.sendRedirect("../" + school);    return;  }  AESTool aesTool=new AESTool();  String username=aesTool.decrypt(user.getUsername(),"zhixin");  String password=aesTool.decrypt(user.getPassword(),"zhixin");  RequestDispatcher dispatcher=request.getRequestDispatcher("LoginServlet?username=" + username + "&password="+ password+ "&checkNum="+ code);  dispatcher.forward(request,response);}  }
class C{  public PowerModelCubic(double maxPower,double staticPowerPercent){  setMaxPower(maxPower);  setStaticPower(staticPowerPercent * maxPower);  setConstant((maxPower - getStaticPower()) / Math.pow(100,3));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.779 -0500",hash_original_method="F869914CDBD46FC071FA033F543D25F0",hash_generated_method="7A5DCEBD865AAB901EC83FAE4998317C") public synchronized DrmRights queryRights(DrmRawContent content){  DrmRights rights=new DrmRights();  int res=nativeQueryRights(content,rights);  if (JNI_DRM_FAILURE == res)   return null;  return rights;}  }
class C{  public MemoryCaching(){  setLimit(Runtime.getRuntime().maxMemory() / 4);}  }
class C{  protected boolean runs(@NotNull String exec){  GeneralCommandLine commandLine=new GeneralCommandLine();  commandLine.setExePath(exec);  try {    CapturingProcessHandler handler=new CapturingProcessHandler(commandLine.createProcess(),CharsetToolkit.getDefaultSystemCharset());    ProcessOutput result=handler.runProcess((int)TimeUnit.SECONDS.toMillis(5));    return !result.isTimeout();  } catch (  ExecutionException e) {    return false;  }}  }
class C{  public void addLayoutComponent(String name,Component comp){}  }
class C{  private void load(){  Task[] tasks=myTaskManager.getTasks();  for (int i=0; i < tasks.length; i++) {    Task task=tasks[i];    TaskGraphNode tgn=getTaskGraphNode(task);    TaskDependencySlice dependencies=task.getDependenciesAsDependee();    TaskDependency[] relationship=dependencies.toArray();    for (int j=0; j < relationship.length; j++) {      Task successor=relationship[j].getDependant();      tgn.addSuccessor(getTaskGraphNode(successor));    }  }}  }
class C{  private void debugSegmentEntries(WriteStream out,ReadStream is,SegmentExtent extent,TableEntry table) throws IOException {  TempBuffer tBuf=TempBuffer.create();  byte[] buffer=tBuf.buffer();  for (long ptr=extent.length() - BLOCK_SIZE; ptr > 0; ptr-=BLOCK_SIZE) {    is.position(ptr);    is.readAll(buffer,0,BLOCK_SIZE);    long seq=BitsUtil.readLong(buffer,0);    int head=8;    byte[] tableKey=new byte[32];    System.arraycopy(buffer,head,tableKey,0,tableKey.length);    is.readAll(tableKey,0,tableKey.length);    head+=tableKey.length;    int offset=BLOCK_SIZE - 8;    int tail=BitsUtil.readInt16(buffer,offset);    offset+=2;    boolean isCont=buffer[offset] == 1;    if (seq <= 0 || tail <= 0) {      return;    }    while ((head=debugSegmentIndex(out,is,buffer,extent.address(),ptr,head,table)) < tail) {    }    if (!isCont) {      break;    }  }}  }
class C{  public void showColumn(int modelColumn){  for (  TableColumn column : allColumns) {    if (column.getModelIndex() == modelColumn) {      showColumn(column);      break;    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isCategoriesEnabled(){  return categoriesEnabled;}  }
class C{  public boolean isParser(){  return (iParser != null);}  }
class C{  public void onAccessibilityEvent(AccessibilityEvent event){  if (event.getEventType() == AccessibilityEventCompat.TYPE_TOUCH_INTERACTION_START) {    mLastTouchTime=System.nanoTime();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.PRAGMA__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  public PasswordExpiration(boolean isNotificationEnabled,String fromAddr,String subject,int[] notificationTime){  this.isEmailNotificationEnabled=isNotificationEnabled;  this.emailFrom=fromAddr;  this.emailSubject=subject;  this.notificationDays=notificationTime;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("LocationServlet.init");}  }
class C{  public static void grantOrganizationRoles(DataService mgr,Organization org,OrganizationRoleType... roles) throws NonUniqueBusinessKeyException {  for (  OrganizationRoleType role : roles) {    if (!org.hasRole(role)) {      addOrganizationToRole(mgr,org,role);    }  }}  }
class C{  public boolean isCollection(){  return label.isCollection();}  }
class C{  public void addInterface(AbstractInterfaceType type){  addInterfaceNoBidirectionalUpdate(type);  type.addRealizingClassNoBidirectionalUpdate(this);}  }
class C{  private void findBoundsByIteration(){  this.minX=Double.NaN;  this.maxX=Double.NaN;  this.minY=Double.NaN;  this.maxY=Double.NaN;  Iterator iterator=this.data.iterator();  while (iterator.hasNext()) {    XYDataItem item=(XYDataItem)iterator.next();    updateBoundsForAddedItem(item);  }}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public AvgProjectionExpression(boolean isDistinct){  this.distinct=isDistinct;}  }
class C{  public boolean isThumbnailCompressed(){  return mData.hasCompressedThumbnail();}  }
class C{  private void log(LogLevel eventLevel,String message,Throwable cause){switch (eventLevel) {case TRACE:    logger.trace(message,cause);  return;case DEBUG:logger.debug(message,cause);return;case INFO:logger.info(message,cause);return;case WARN:logger.warn(message,cause);return;case ERROR:logger.error(message,cause);return;default :return;}}  }
class C{  public String toString(){  String result="\nBias-Variance Decomposition\n";  if (getClassifier() == null) {    return "Invalid setup";  }  result+="\nClassifier   : " + getClassifier().getClass().getName();  if (getClassifier() instanceof OptionHandler) {    result+=Utils.joinOptions(((OptionHandler)m_Classifier).getOptions());  }  result+="\nData File    : " + getDataFileName();  result+="\nClass Index  : ";  if (getClassIndex() == 0) {    result+="last";  } else {    result+=getClassIndex();  }  result+="\nTraining Pool: " + getTrainPoolSize();  result+="\nIterations   : " + getTrainIterations();  result+="\nSeed         : " + getSeed();  result+="\nError        : " + Utils.doubleToString(getError(),6,4);  result+="\nSigma^2      : " + Utils.doubleToString(getSigma(),6,4);  result+="\nBias^2       : " + Utils.doubleToString(getBias(),6,4);  result+="\nVariance     : " + Utils.doubleToString(getVariance(),6,4);  return result + "\n";}  }
class C{  public double readDouble(){  return Double.longBitsToDouble(readLong());}  }
class C{  private String findCameraId(Facing facing){  if (facing == Facing.FRONT) {    return findFirstFrontCameraId();  } else {    return findFirstBackCameraId();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.077 -0500",hash_original_method="3A0BDE86F44AAAE489AB1403F9B488D7",hash_generated_method="A33312CA1EC96ADA3F27F09206D257AA") protected HttpResponse doSendRequest(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws IOException, HttpException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (conn == null) {    throw new IllegalArgumentException("HTTP connection may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  HttpResponse response=null;  context.setAttribute(ExecutionContext.HTTP_REQ_SENT,Boolean.FALSE);  conn.sendRequestHeader(request);  if (request instanceof HttpEntityEnclosingRequest) {    boolean sendentity=true;    final ProtocolVersion ver=request.getRequestLine().getProtocolVersion();    if (((HttpEntityEnclosingRequest)request).expectContinue() && !ver.lessEquals(HttpVersion.HTTP_1_0)) {      conn.flush();      int tms=request.getParams().getIntParameter(CoreProtocolPNames.WAIT_FOR_CONTINUE,2000);      if (conn.isResponseAvailable(tms)) {        response=conn.receiveResponseHeader();        if (canResponseHaveBody(request,response)) {          conn.receiveResponseEntity(response);        }        int status=response.getStatusLine().getStatusCode();        if (status < 200) {          if (status != HttpStatus.SC_CONTINUE) {            throw new ProtocolException("Unexpected response: " + response.getStatusLine());          }          response=null;        } else {          sendentity=false;        }      }    }    if (sendentity) {      conn.sendRequestEntity((HttpEntityEnclosingRequest)request);    }  }  conn.flush();  context.setAttribute(ExecutionContext.HTTP_REQ_SENT,Boolean.TRUE);  return response;}  }
class C{  public DLVRecord(Name name,int dclass,long ttl,int footprint,int alg,int digestid,byte[] digest){  super(name,Type.DLV,dclass,ttl);  this.footprint=checkU16("footprint",footprint);  this.alg=checkU8("alg",alg);  this.digestid=checkU8("digestid",digestid);  this.digest=digest;}  }
class C{  public FeatureParsingException(String message,Throwable cause){  super(message,cause);}  }
class C{  public MutableVisionWorldModel(){  super();  this.pixelMatrix=EMPTY_PIXEL_MATRIX;  this.sensorMatrix=EMPTY_SENSOR_MATRIX;}  }
class C{  @Transactional public void delete(Object inputParam,User currentUser) throws Exception {  T po=findByIdParam(inputParam);  BeanUtils.copyPropertiesIgnoreNull(inputParam,po);  Field lastModifiedByField=po.getClass().getDeclaredField(CommonsConstant.LAST_MODIFIED_BY);  lastModifiedByField.setAccessible(true);  lastModifiedByField.set(po,currentUser.getId());  Field lastModifiedDateField=po.getClass().getDeclaredField(CommonsConstant.LAST_MODIFIED_DATE);  lastModifiedDateField.setAccessible(true);  lastModifiedDateField.set(po,new Date());  logHelper.logUsersOperations(OperationType.DELETE,getClassT().getName(),currentUser);  repository.save(setInvalid(po));}  }
class C{  protected Utils(){  throw new RuntimeException("Non instantiable");}  }
class C{  public WeightMatrixViewer(NetworkPanel panel){  ArrayList<Neuron> sourceList=panel.getSourceModelNeurons();  ArrayList<Neuron> targetList=panel.getSelectedModelNeurons();  init(sourceList,targetList,panel);}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public Scriptable construct(Context cx,Scriptable scope,Object[] args){  if (obj == null) {    Delegator n=newInstance();    Scriptable delegee;    if (args.length == 0) {      delegee=new NativeObject();    } else {      delegee=ScriptRuntime.toObject(cx,scope,args[0]);    }    n.setDelegee(delegee);    return n;  } else {    return ((Function)obj).construct(cx,scope,args);  }}  }
class C{  public NfcFileOutputStream putFile(String dsPath,long fileSize) throws IOException {  return this.putFile(dsPath,fileSize,false);}  }
class C{  protected <T extends SpatialComparable>int pivotizeList1D(List<T> objs,int start,int end,int dim,double threshold,boolean desc){  threshold=2 * threshold;  int s=start, e=end;  while (s < e) {    if (!desc) {      double sminmax=getMinPlusMaxObject(objs,s,dim);      while ((sminmax < threshold) && s + 1 <= e && s + 1 < end) {        s++;        sminmax=getMinPlusMaxObject(objs,s,dim);      }      double eminmax=getMinPlusMaxObject(objs,e - 1,dim);      while ((eminmax >= threshold) && s < e - 1 && start < e - 1) {        e--;        eminmax=getMinPlusMaxObject(objs,e - 1,dim);      }    } else {      double sminmax=getMinPlusMaxObject(objs,s,dim);      while ((sminmax > threshold) && s + 1 <= e && s + 1 < end) {        s++;        sminmax=getMinPlusMaxObject(objs,s,dim);      }      double eminmax=getMinPlusMaxObject(objs,e - 1,dim);      while ((eminmax <= threshold) && s < e - 1 && start < e - 1) {        e--;        eminmax=getMinPlusMaxObject(objs,e - 1,dim);      }    }    if (s >= e) {      assert (s == e);      break;    }    objs.set(s,objs.set(e - 1,objs.get(s)));    s++;    e--;  }  return e;}  }
class C{  private Pointer(NativePointerObject pointers[]){  buffer=null;  this.pointers=pointers;  byteOffset=0;}  }
class C{  static List<GeoPoint> filterEdges(final List<GeoPoint> noIdenticalPoints,final double leniencyValue){  for (int i=0; i < noIdenticalPoints.size(); i++) {    final SafePath startPath=new SafePath(null,noIdenticalPoints.get(i),i,null);    final SafePath resultPath=findSafePath(startPath,noIdenticalPoints,getLegalIndex(i + 1,noIdenticalPoints.size()),i,leniencyValue);    if (resultPath != null && resultPath.previous != null) {      final List<GeoPoint> rval=new ArrayList<>(noIdenticalPoints.size());      resultPath.fillInList(rval);      return rval;    }  }  return null;}  }
class C{  protected boolean isNameUniqueForType(String typeId,String name){  return !model.getListOfUniqueNamesForType(typeId).contains(name);}  }
class C{  protected static boolean branchProbability(double p,boolean cond){  return GraalDirectives.injectBranchProbability(p,cond);}  }
class C{  public boolean hasAttribute(String name){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return false;}  }
class C{  public static double[] clone(final double[] array){  if (array == null) {    return null;  }  return array.clone();}  }
class C{  public AsyncResult CancelAsync(RequestHeader RequestHeader,UnsignedInteger RequestHandle){  CancelRequest req=new CancelRequest(RequestHeader,RequestHandle);  return channel.serviceRequestAsync(req);}  }
class C{  public static void checkReplicationGroupAccessibleOrFail(StorageSystem storage,BlockObject replica,DbClient dbClient,SmisCommandHelper helper,CIMObjectPathFactory cimPath) throws Exception {  BlockConsistencyGroup blockConsistencyGroup=dbClient.queryObject(BlockConsistencyGroup.class,replica.getConsistencyGroup());  String deviceName=ConsistencyGroupUtils.getSourceConsistencyGroupName(replica,dbClient);  String label=blockConsistencyGroup.getLabel();  CIMObjectPath path=cimPath.getReplicationGroupPath(storage,deviceName);  CIMInstance instance=helper.checkExists(storage,path,false,false);  if (instance == null) {    String msg=String.format("ReplicationGroup %s was not found on provider %s.  " + "It may have already been deleted, or check SMI-S providers for connection issues or failover.",deviceName,storage.getActiveProviderURI());    _log.warn(msg);    throw DeviceControllerException.exceptions.consistencyGroupNotFoundForProvider(deviceName,label,storage.getSmisProviderIP());  }}  }
class C{  public void updateFrom(MDepreciationWorkfile wk){  setA_Asset_Cost(wk.getA_Asset_Cost());  setA_Accumulated_Depr(wk.getA_Accumulated_Depr());  setA_Accumulated_Depr_F(wk.getA_Accumulated_Depr_F());  setUseLifeMonths(wk.getUseLifeMonths());  setUseLifeMonths_F(wk.getUseLifeMonths_F());  setA_Asset_Remaining(wk.getA_Asset_Remaining());  setA_Asset_Remaining_F(wk.getA_Asset_Remaining_F());}  }
class C{  protected CCLabel(CharSequence string,final CGSize dimensions,TextAlignment alignment,String name,float size){  super();  _dimensions=dimensions;  _alignment=alignment;  _fontName=name;  _fontSize=size;  setString(string);}  }
class C{  public boolean hasReview(){  return hasExtension(Review.class);}  }
class C{  public void testGetRandomAccess(){  Multimap<String,Integer> multimap=create();  multimap.put("foo",1);  multimap.put("foo",3);  assertThat(multimap.get("foo")).isNotInstanceOf(RandomAccess.class);  assertThat(multimap.get("bar")).isNotInstanceOf(RandomAccess.class);}  }
class C{  public TraceFor_ createTraceFor_(){  TraceFor_Impl traceFor_=new TraceFor_Impl();  return traceFor_;}  }
class C{  public static final Criterion sizeLessThan(long value){  return new SizeCriterion(new NumericOperator(value,NumericComparator.LESS_THAN));}  }
class C{  LinkedList<TrieNode<T>> makeSuffixChain(TrieNode<T> root,String suffix,T value){  LinkedList<TrieNode<T>> result=new LinkedList<>();  String rootPrefix=root.getPrefix();  for (int i=1, suffixSize=suffix.length(); i <= suffixSize; i++) {    String newPrefix=rootPrefix + suffix.substring(0,i);    TrieNode<T> newNode=TrieNode.makeNode(newPrefix);    result.add(newNode);    root.addChild(newNode);    root=newNode;  }  root.setValue(value);  return result;}  }
class C{  protected final void clearTileEntityBuffer(){  for (int i=0; i < mBufferedTileEntities.length; i++)   mBufferedTileEntities[i]=null;}  }
class C{  public static InputStream post(URL url,String name1,Object value1,String name2,Object value2) throws IOException {  return new ClientHttpRequest(url).post(name1,value1,name2,value2);}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MViewColumn[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public void handleOneIncomingReply() throws java.io.IOException {  AbstractMRReply msg=newReply();  loadChars(msg,istream);  if (mLastSentMessage != null) {    if (mLastSentMessage.isForChildBoard()) {      if (log.isDebugEnabled()) {        log.debug("This is a message for a child board " + ((Dcc4PcReply)msg).toHexString());        log.debug("Originate " + (mLastMessage).toHexString());      }      if ((mLastSentMessage.getNumDataElements() - 1) == msg.getElement(1)) {        log.debug("message lengths match");        waitingForMore=true;        try {          Thread.sleep(10);        } catch (        Exception ex) {          log.debug(ex.getLocalizedMessage(),ex);        }        lastIncomplete=null;        forwardToPort(Dcc4PcMessage.getResponse());        return;      } else {        if (log.isDebugEnabled()) {          log.debug("Not all of the command was sent, we need to figure out a way to resend the bits");          log.debug("Original Message length " + mLastSentMessage.getNumDataElements());          log.debug("What CID has procced in size " + (byte)msg.getElement(1));          log.debug("Reply is in error " + ((Dcc4PcReply)msg).toHexString());        }      }    } else     if (mLastSentMessage.getElement(0) == 0x0C) {      if (log.isDebugEnabled()) {        log.debug("last message was a get response " + ((Dcc4PcReply)msg).toHexString());      }      if (msg.getElement(0) == Dcc4PcReply.SUCCESS) {        ((Dcc4PcReply)msg).strip();        if (lastIncomplete != null) {          if (msg.getNumDataElements() != 0) {            int iOrig=lastIncomplete.getNumDataElements();            int iNew=0;            while (iNew < msg.getNumDataElements()) {              lastIncomplete.setElement(iOrig,msg.getElement(iNew));              iOrig++;              iNew++;            }          }          msg=lastIncomplete;        }        ((Dcc4PcReply)msg).setError(false);        lastIncomplete=null;        waitingForMore=false;        mLastMessage=null;        mLastSentMessage=null;      } else       if (msg.getElement(0) == Dcc4PcReply.INCOMPLETE) {        waitingForMore=true;        ((Dcc4PcReply)msg).strip();        if (lastIncomplete != null) {          if (msg.getNumDataElements() != 0) {            int iOrig=lastIncomplete.getNumDataElements();            int iNew=0;            while (iNew < msg.getNumDataElements()) {              lastIncomplete.setElement(iOrig,msg.getElement(iNew));              iOrig++;              iNew++;            }          }        } else         if (msg.getNumDataElements() > 1) {          lastIncomplete=(Dcc4PcReply)msg;        }        forwardToPort(Dcc4PcMessage.getResponse());        return;      } else {        log.debug("Reply is an error mesage");        ((Dcc4PcReply)msg).setError(true);        mLastMessage.setRetries(mLastMessage.getRetries() - 1);        if (mLastMessage.getRetries() >= 0) {synchronized (xmtRunnable) {            mCurrentState=AUTORETRYSTATE;            replyInDispatch=false;            xmtRunnable.notify();          }          return;        }      }    }  } else {    log.debug("Last message sent was null " + ((Dcc4PcReply)msg).toHexString());  }  replyInDispatch=true;  if (log.isDebugEnabled()) {    log.debug("dispatch reply of length " + msg.getNumDataElements() + " contains "+ msg.toString()+ " state "+ mCurrentState);  }  Runnable r=newRcvNotifier(msg,mLastSender,this);  try {    javax.swing.SwingUtilities.invokeAndWait(r);  } catch (  Exception e) {    log.error("Unexpected exception in invokeAndWait:" + e);    e.printStackTrace();  }  if (log.isDebugEnabled()) {    log.debug("dispatch thread invoked");  }  if (!msg.isUnsolicited()) {switch (mCurrentState) {case WAITMSGREPLYSTATE:{        if (msg.isRetransmittableErrorMsg()) {          if (log.isDebugEnabled()) {            log.debug("Automatic Recovery from Error Message: " + msg.toString());          }synchronized (xmtRunnable) {            mCurrentState=AUTORETRYSTATE;            replyInDispatch=false;            xmtRunnable.notify();          }        } else {synchronized (xmtRunnable) {            mCurrentState=NOTIFIEDSTATE;            replyInDispatch=false;            xmtRunnable.notify();          }        }        break;      }case WAITREPLYINPROGMODESTATE:{      mCurrentMode=PROGRAMINGMODE;      replyInDispatch=false;      int warmUpDelay=enterProgModeDelayTime();      if (warmUpDelay != 0) {        try {synchronized (xmtRunnable) {            xmtRunnable.wait(warmUpDelay);          }        } catch (        InterruptedException e) {          Thread.currentThread().interrupt();        }      }synchronized (xmtRunnable) {        mCurrentState=OKSENDMSGSTATE;        xmtRunnable.notify();      }      break;    }case WAITREPLYINNORMMODESTATE:{    mCurrentMode=NORMALMODE;    replyInDispatch=false;synchronized (xmtRunnable) {      mCurrentState=OKSENDMSGSTATE;      xmtRunnable.notify();    }    break;  }default :{  replyInDispatch=false;  log.error("reply complete in unexpected state: " + mCurrentState + " was "+ msg.toString());}}} else {if (log.isDebugEnabled()) {log.debug("Unsolicited Message Received " + msg.toString());}replyInDispatch=false;}}  }
class C{  public Timestamp(Date stamp){  this(stamp,DEFAULT_FORMAT);}  }
class C{  public void addClass(ClassInterface clazz){  classes.add(clazz);}  }
class C{  @EventHandler(ignoreCancelled=true) public void onEntityCombustByBlock(EntityCombustByBlockEvent event){  if (event.getEntity() instanceof Player && !canInteract((Player)event.getEntity())) {    event.getEntity().setFireTicks(0);  }}  }
class C{  public static void copyMatrix(double[][] original,double[][] copy){  for (int i=0; i < original.length; i++) {    for (int j=0; j < original[i].length; j++) {      copy[i][j]=original[i][j];    }  }}  }
class C{  protected String readResponseLine() throws IOException {  String line=readLine();  if (line != null) {    int n=line.indexOf(' ');    if (n != -1) {      line="HTTP/1.0" + line.substring(n);    }  }  return line;}  }
class C{  public String toString(){  try {    return to_simple_string();  } catch (  internal_error e) {    e.crash();    return null;  }}  }
class C{  public static final int myUserId(){  return getUserId(Process.myUid());}  }
class C{  public InputStream findResource(String filename){  File f=new File(filename);  if (!f.exists())   return super.findResource(filename);  try {    return new FileInputStream(f);  } catch (  IOException ioe) {    return null;  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  HashMapToKeyValPair oper=new HashMapToKeyValPair();  CountTestSink keySink=new CountTestSink();  CountTestSink valSink=new CountTestSink();  CountTestSink keyvalSink=new CountTestSink();  oper.key.setSink(keySink);  oper.val.setSink(valSink);  oper.keyval.setSink(keyvalSink);  oper.beginWindow(0);  HashMap<String,String> input=new HashMap<String,String>();  input.put("a","1");  int numtuples=1000;  for (int i=0; i < numtuples; i++) {    oper.data.process(input);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",numtuples,keySink.count);  Assert.assertEquals("number emitted tuples",numtuples,valSink.count);  Assert.assertEquals("number emitted tuples",numtuples,keyvalSink.count);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"USUB16");  translateAll(environment,instruction,"USUB16",instructions);}  }
class C{  public InlineQueryResultPhoto.InlineQueryResultPhotoBuilder photoWidth(int photoWidth){  this.photo_width=photoWidth;  return this;}  }
class C{  public boolean isLoggedIn(){  return m_loggedIn;}  }
class C{  public static int toIPv4Address(String ipAddress){  if (ipAddress == null)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");  String[] octets=ipAddress.split("\\.");  if (octets.length != 4)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");  int result=0;  for (int i=0; i < 4; ++i) {    int oct=Integer.valueOf(octets[i]);    if (oct > 255 || oct < 0)     throw new IllegalArgumentException("Octet values in specified" + " IPv4 address must be 0 <= value <= 255");    result|=oct << ((3 - i) * 8);  }  return result;}  }
class C{  public StateMachineConfigurationConfigurer<S,E> configureConfiguration(){  return adapter.configurationBuilder;}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  put(index,new Double(value));  return this;}  }
class C{  public synchronized void addSchemaObject(SchemaObject obj){  obj.getSchema().add(obj);}  }
class C{  public static void checkExplanations(Query query,String defaultFieldName,IndexSearcher searcher) throws IOException {  checkExplanations(query,defaultFieldName,searcher,false);}  }
class C{  protected boolean isOutside(MutableCoord P1,MutableCoord P2,MutableCoord P3){  double minx=Math.min(P1.getX(),P2.getX()), miny=Math.min(P1.getY(),P2.getY());  double maxx=Math.max(P1.getX(),P2.getX()), maxy=Math.max(P1.getY(),P2.getY());  double x=P3.getX(), y=P3.getY();  if (x >= minx && x <= maxx && y >= miny && y <= maxy)   return false; else   return true;}  }
class C{  public LocalityTrackingGetJobsBuilder withNodeSwitching(long nodeReconnectCheckInterval,TimeUnit nodeReconnectCheckTimeUnit){  withReconnect=true;  this.interval=nodeReconnectCheckInterval;  this.timeUnit=nodeReconnectCheckTimeUnit;  return this;}  }
class C{  public GradientBarPainter(double g1,double g2,double g3){  this.g1=g1;  this.g2=g2;  this.g3=g3;}  }
class C{  public int[][] generateNRandomSetsNoOverlap(int n,int p,int N,int[][] setsToAvoidOverlapWith){  int[][] distinctSets=generateDistinctRandomSets(n,p,N,setsToAvoidOverlapWith);  if (distinctSets.length == N) {    return distinctSets;  } else   if (distinctSets.length > N) {    throw new RuntimeException("generateDistinctRandomSets generated more than " + N + " distinct sets when asked for "+ N+ "; note n="+ n+ " p="+ p);  }  int[][] randomSets=new int[N][];  for (int i=0; i < N; i++) {    randomSets[i]=distinctSets[random.nextInt(distinctSets.length)];  }  return randomSets;}  }
class C{  public boolean isSmscDelReceiptFailureRequested(){  return isSmscDelReceiptFailureRequested(registeredDelivery);}  }
class C{  public ClipData(ClipData other){  mClipDescription=other.mClipDescription;  mIcon=other.mIcon;  mItems=new ArrayList<Item>(other.mItems);}  }
class C{  public boolean isPersistent(){  return persistent;}  }
class C{  public List<G> loadMultiple(String filename,Supplier<G> graph_factory) throws IOException {  return loadMultiple(new FileReader(filename),graph_factory);}  }
class C{  public int write(Connection conn,String outputFileName,String sql,String charset) throws SQLException {  Statement stat=conn.createStatement();  ResultSet rs=stat.executeQuery(sql);  int rows=write(outputFileName,rs,charset);  stat.close();  return rows;}  }
class C{  public VdcPreCheckResponse2 syncVdcConfigPreCheck(VdcPreCheckParam2 checkParam,String vdcName){  WebResource rRoot;  rRoot=createRequest(VDCCONFIG_PRECHECK2_URI);  rRoot.accept(MediaType.APPLICATION_XML);  try {    return addSignature(rRoot).post(VdcPreCheckResponse2.class,checkParam);  } catch (  UnauthorizedException e) {    throw GeoException.fatals.remoteVdcAuthorizationFailed(vdcName,e);  }catch (  GeoException e) {    throw e;  }catch (  Exception e) {    throw GeoException.fatals.failedToSendPreCheckRequest(vdcName,e);  }}  }
class C{  public String toXMLBIF03(ArrayList<Integer> nodes){  StringBuffer text=new StringBuffer();  text.append(getBIFHeader());  text.append("\n");  text.append("\n");  text.append("<BIF VERSION=\"0.3\">\n");  text.append("<NETWORK>\n");  text.append("<NAME>" + XMLNormalize(m_Instances.relationName()) + "</NAME>\n");  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    text.append("<VARIABLE TYPE=\"nature\">\n");    text.append("<NAME>" + XMLNormalize(m_Instances.attribute(nNode).name()) + "</NAME>\n");    for (int iValue=0; iValue < m_Instances.attribute(nNode).numValues(); iValue++) {      text.append("<OUTCOME>" + XMLNormalize(m_Instances.attribute(nNode).value(iValue)) + "</OUTCOME>\n");    }    text.append("<PROPERTY>position = (" + getPositionX(nNode) + ","+ getPositionY(nNode)+ ")</PROPERTY>\n");    text.append("</VARIABLE>\n");  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    text.append("<DEFINITION>\n");    text.append("<FOR>" + XMLNormalize(m_Instances.attribute(nNode).name()) + "</FOR>\n");    for (int iParent=0; iParent < m_ParentSets[nNode].getNrOfParents(); iParent++) {      text.append("<GIVEN>" + XMLNormalize(m_Instances.attribute(m_ParentSets[nNode].getParent(iParent)).name()) + "</GIVEN>\n");    }    text.append("<TABLE>\n");    for (int iParent=0; iParent < m_ParentSets[nNode].getCardinalityOfParents(); iParent++) {      for (int iValue=0; iValue < m_Instances.attribute(nNode).numValues(); iValue++) {        text.append(m_Distributions[nNode][iParent].getProbability(iValue));        text.append(' ');      }      text.append('\n');    }    text.append("</TABLE>\n");    text.append("</DEFINITION>\n");  }  text.append("</NETWORK>\n");  text.append("</BIF>\n");  return text.toString();}  }
class C{  public static <T>void assertNotNull(T expression){  Assert.notNull(expression);}  }
class C{  public boolean isConnected(int p,int q){  int pRoot=find(p);  int qRoot=find(q);  return pRoot == qRoot;}  }
class C{  static void putUInt(long ptr,long data){  unsafe.putInt(ptr,(int)data);}  }
class C{  private void rememberRegion(int offset,int length){  if (fStartOffset == -1)   fStartOffset=offset; else   if (offset < fStartOffset)   fStartOffset=offset;  int endOffset=offset + length;  if (fEndOffset == -1)   fEndOffset=endOffset; else   if (endOffset > fEndOffset)   fEndOffset=endOffset;}  }
class C{  public void filterNN(Raster off,WritableRaster dst,int[] xTile,int[] xOff,int[] yTile,int[] yOff){  final int w=dst.getWidth();  final int h=dst.getHeight();  final int xStart=maxOffX;  final int yStart=maxOffY;  final int xEnd=xStart + w;  final int yEnd=yStart + h;  DataBufferInt dstDB=(DataBufferInt)dst.getDataBuffer();  DataBufferInt offDB=(DataBufferInt)off.getDataBuffer();  SinglePixelPackedSampleModel dstSPPSM, offSPPSM;  dstSPPSM=(SinglePixelPackedSampleModel)dst.getSampleModel();  final int dstOff=dstDB.getOffset() + dstSPPSM.getOffset(dst.getMinX() - dst.getSampleModelTranslateX(),dst.getMinY() - dst.getSampleModelTranslateY());  offSPPSM=(SinglePixelPackedSampleModel)off.getSampleModel();  final int offOff=offDB.getOffset() + offSPPSM.getOffset(off.getMinX() - off.getSampleModelTranslateX(),off.getMinY() - off.getSampleModelTranslateY());  final int dstScanStride=dstSPPSM.getScanlineStride();  final int offScanStride=offSPPSM.getScanlineStride();  final int dstAdjust=dstScanStride - w;  final int offAdjust=offScanStride - w;  final int[] dstPixels=dstDB.getBankData()[0];  final int[] offPixels=offDB.getBankData()[0];  final int xShift=xChannel.toInt() * 8;  final int yShift=yChannel.toInt() * 8;  final int fpScaleX=(int)((scaleX / 255.0) * (1 << 15) + 0.5);  final int fpScaleY=(int)((scaleY / 255.0) * (1 << 15) + 0.5);  final int fpAdjX=(int)(-127.5 * fpScaleX - 0.5) + 0x4000;  final int fpAdjY=(int)(-127.5 * fpScaleY - 0.5) + 0x4000;  int dp=dstOff, ip=offOff;  long start=System.currentTimeMillis();  int y=yStart, xt=xTile[0] - 1, yt=yTile[0] - 1;  int[] imgPix=null;  int x0, y0, xDisplace, yDisplace, dPel;  while (y < yEnd) {    int x=xStart;    while (x < xEnd) {      dPel=offPixels[ip];      xDisplace=(fpScaleX * ((dPel >> xShift) & 0xff)) + fpAdjX;      yDisplace=(fpScaleY * ((dPel >> yShift) & 0xff)) + fpAdjY;      x0=x + (xDisplace >> 15);      y0=y + (yDisplace >> 15);      if ((xt != xTile[x0]) || (yt != yTile[y0])) {        xt=xTile[x0];        yt=yTile[y0];        imgPix=((DataBufferInt)image.getTile(xt,yt).getDataBuffer()).getBankData()[0];      }      dstPixels[dp]=imgPix[xOff[x0] + yOff[y0]];      dp++;      ip++;      x++;    }    dp+=dstAdjust;    ip+=offAdjust;    y++;  }  if (TIME) {    long end=System.currentTimeMillis();    System.out.println("Time: " + (end - start));  }}  }
class C{  private void focusPrevious(){  final Element current=Elements.getDocument().getActiveElement();  if (current.getParentElement().isEqualNode(listElement)) {    final Element prev=current.getPreviousElementSibling();    if (prev != null) {      prev.focus();    } else {      focusLast();    }  } else {    focusFirst();  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_BASE_TYPE:    setDelegationBaseType((SymbolTableEntryOriginal)newValue);  return;case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:setDelegationSuperClassSteps((Integer)newValue);return;case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_TARGET:setDelegationTarget((SymbolTableEntryOriginal)newValue);return;case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:setDelegationTargetIsAbstract((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public synchronized void sendSprogMessage(SprogMessage m,SprogListener replyTo){  if (waitingForReply) {    try {      wait(100);    } catch (    InterruptedException e) {    }  }  waitingForReply=true;  if (log.isDebugEnabled()) {    log.debug("sendSprogMessage message: [" + m + "]");  }  lastSender=replyTo;  notifyMessage(m,replyTo);  this.sendSprogMessage(m);}  }
class C{  private Split[] createSplitsFromFSArray(final FSArray splitsFSArray){  final Collection<Split> splitsCollection=FSCollectionFactory.create(splitsFSArray,Split.class);  return splitsCollection.toArray(new Split[splitsCollection.size()]);}  }
class C{  public MemLiteral(Object creator,String label){  super(label,XMLSchema.STRING);  this.creator=creator;}  }
class C{  public OSRef(String ref) throws IllegalArgumentException {  char char1=ref.charAt(0);  char char2=ref.charAt(1);  int east=Integer.parseInt(ref.substring(2,5)) * 100;  int north=Integer.parseInt(ref.substring(5,8)) * 100;  if (char1 == 'H') {    north+=1000000;  } else   if (char1 == 'N') {    north+=500000;  } else   if (char1 == 'O') {    north+=500000;    east+=500000;  } else   if (char1 == 'T') {    east+=500000;  }  int char2ord=char2;  if (char2ord > 73)   char2ord--;  double nx=((char2ord - 65) % 5) * 100000;  double ny=(4 - Math.floor((char2ord - 65) / 5)) * 100000;  easting=east + nx;  northing=north + ny;}  }
class C{  @Override public ChatEvent parse(String text){  ChatEvent result=null;  if (text.startsWith(BEGINING_MESSAGE) || text.startsWith(BEGINING_MESSAGE,1)) {    RaptorStringTokenizer tok=new RaptorStringTokenizer(text," \n:",true);    tok.nextToken();    tok.nextToken();    String userName=tok.nextToken();    if (userName != null) {      result=new ChatEvent(userName,ChatType.HISTORY,text);    }  }  return result;}  }
class C{  public T caseOperation(Operation object){  return null;}  }
class C{  @Deprecated public void appendCode(CharSequence chars){  content().appendCode(chars);  clearTextMap();}  }
class C{  public DefaultNamed(final String name,final GameData data){  super(data);  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Name must not be null");  }  m_name=name;}  }
class C{  public URI buildAuthenticationRequestURI(URI redirectEndpointURI,ResponseType responseType,ResponseMode responseMode,TokenSpec tokenSpec,State state,Nonce nonce) throws OIDCClientException {  Validate.notNull(redirectEndpointURI,"redirectEndpointURI");  Validate.notNull(responseType,"responseType");  Validate.notNull(responseMode,"responseMode");  Validate.notNull(tokenSpec,"tokenSpec");  Validate.notNull(state,"state");  Validate.notNull(nonce,"nonce");  if (responseType.contains(ResponseTypeValue.AUTHORIZATION_CODE)) {    if (this.holderOfKeyConfig == null) {      throw new OIDCClientException("HolderOfKeyConfig is required when response type is code.");    }    if (responseMode != ResponseMode.QUERY && responseMode != ResponseMode.FORM_POST) {      throw new OIDCClientException("Only 'QUERY' or 'FORM_POST' response mode is supported when response type is code.");    }  } else   if (responseType.contains(ResponseTypeValue.ID_TOKEN)) {    if (responseMode != ResponseMode.FRAGMENT && responseMode != ResponseMode.FORM_POST) {      throw new OIDCClientException("Only 'FRAGMENT' or 'FORM_POST' response mode is supported when response type includes id_token.");    }  }  URI authorizationEndpointURI=this.authorizationEndpointURI;  if (highAvailabilityEnabled()) {    String domainController=getAvailableDomainController();    authorizationEndpointURI=URIUtils.changeHostComponent(authorizationEndpointURI,domainController);  }  Scope scope=OIDCClientUtils.buildScopeFromTokenSpec(tokenSpec);  ClientAssertion clientAssertion=null;  if (this.holderOfKeyConfig != null) {    clientAssertion=OIDCClientUtils.createClientAssertion(this.clientId,this.holderOfKeyConfig,authorizationEndpointURI);  }  AuthenticationRequest authenticationRequest=new AuthenticationRequest(authorizationEndpointURI,responseType,responseMode,this.clientId,redirectEndpointURI,scope,state,nonce,clientAssertion,new CorrelationID());  return authenticationRequest.toHttpRequest().getURI();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.172 -0500",hash_original_method="FC137DB7CC1014A530CE1472E28E1AFA",hash_generated_method="5C886961AF1342B918C0FDF8BF5045A7") public void endTest(Test test){  for (Enumeration e=cloneListeners().elements(); e.hasMoreElements(); ) {    ((TestListener)e.nextElement()).endTest(test);  }}  }
class C{  public final void removeCallbacksAndMessages(Object token){  mExec.removeCallbacksAndMessages(token);}  }
class C{  public AbstractPushLogModel(Icon modelIcon,String modelName,boolean isClosable,int maxLogEntries){  super(modelIcon,modelName,LogMode.PULL,isClosable,maxLogEntries);}  }
class C{  public static void json(String json){  printer.json(json);}  }
class C{  @Override public CompanyPrivilegeObject copy(){  return new CompanyPrivilegeObject(this);}  }
class C{  public boolean isNumberBlocked(ContactId contact){  return RcsStatus.BLOCKED.equals(getContactSharingStatus(contact));}  }
class C{  public static boolean checkUnityVolumeCanBeAddedOrRemovedToCG(String rgName,Volume volume,DbClient dbClient,boolean isAdd){  StorageSystem storage=dbClient.queryObject(StorageSystem.class,volume.getStorageController());  if (storage != null) {    if (storage.deviceIsType(Type.unity)) {      if (isAdd && rgName != null) {        List<Volume> volumesInRG=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,Volume.class,AlternateIdConstraint.Factory.getVolumeByReplicationGroupInstance(rgName));        if (volumesInRG != null && !volumesInRG.isEmpty()) {          for (          Volume vol : volumesInRG) {            if (vol.getStorageController().equals(volume.getStorageController())) {              List<BlockSnapshot> snaps=getVolumeNativeSnapshots(vol.getId(),dbClient);              if (!snaps.isEmpty()) {                return false;              }            }          }        }      } else       if (!isAdd) {        List<BlockSnapshot> snaps=getVolumeNativeSnapshots(volume.getId(),dbClient);        if (!snaps.isEmpty()) {          return false;        }      }    }  }  return true;}  }
class C{  @Deprecated public static <K,V>Map<K,V> asMap(K k1,V v1,K k2,V v2,K k3,V v3){  Map<K,V> map=new GridLeanMap<>(3);  map.put(k1,v1);  map.put(k2,v2);  map.put(k3,v3);  return map;}  }
class C{  public void pick(MotionEvent event){  this.pickedObject=null;  PickedObjectList pickList=getWorldWindow().pick(event.getX(),event.getY());  PickedObject topPickedObject=pickList.topPickedObject();  if (topPickedObject != null) {    this.pickedObject=topPickedObject.getUserObject();  }}  }
class C{  private int readWithQuotes(final char[] srcChars,final int start,final int len,final StrBuilder workArea,final List<String> tokenList,final int quoteStart,final int quoteLen){  workArea.clear();  int pos=start;  boolean quoting=quoteLen > 0;  int trimStart=0;  while (pos < len) {    if (quoting) {      if (isQuote(srcChars,pos,len,quoteStart,quoteLen)) {        if (isQuote(srcChars,pos + quoteLen,len,quoteStart,quoteLen)) {          workArea.append(srcChars,pos,quoteLen);          pos+=quoteLen * 2;          trimStart=workArea.size();          continue;        }        quoting=false;        pos+=quoteLen;        continue;      }      workArea.append(srcChars[pos++]);      trimStart=workArea.size();    } else {      final int delimLen=getDelimiterMatcher().isMatch(srcChars,pos,start,len);      if (delimLen > 0) {        addToken(tokenList,workArea.substring(0,trimStart));        return pos + delimLen;      }      if (quoteLen > 0 && isQuote(srcChars,pos,len,quoteStart,quoteLen)) {        quoting=true;        pos+=quoteLen;        continue;      }      final int ignoredLen=getIgnoredMatcher().isMatch(srcChars,pos,start,len);      if (ignoredLen > 0) {        pos+=ignoredLen;        continue;      }      final int trimmedLen=getTrimmerMatcher().isMatch(srcChars,pos,start,len);      if (trimmedLen > 0) {        workArea.append(srcChars,pos,trimmedLen);        pos+=trimmedLen;        continue;      }      workArea.append(srcChars[pos++]);      trimStart=workArea.size();    }  }  addToken(tokenList,workArea.substring(0,trimStart));  return -1;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  void restart(){  progress=0;  timer.restart();}  }
class C{  public GenericPropertySheet(boolean isModal,Object target,Rectangle bounds,PropertyEditor pe,BeanBox beanBox){  super((JFrame)null,"Properties - <initializing...>",isModal);  this.targetBean=target;  this.editor=pe;  this.beanBox=beanBox;  init();  this.getContentPane().add(panel);}  }
class C{  public int numberOfReplies(final Resource comment){  final Iterator<Resource> children=comment.listChildren();  int size=0;  while (children.hasNext()) {    children.next();    size++;  }  return size;}  }
class C{  public String registerName(final String name,final Operator operator){  if (operatorNameMap.get(name) != null) {    String baseName=name;    int index=baseName.indexOf(" (");    if (index >= 0) {      baseName=baseName.substring(0,index);    }    int i=2;    while (operatorNameMap.get(baseName + " (" + i+ ")") != null) {      i++;    }    String newName=baseName + " (" + i+ ")";    operatorNameMap.put(newName,operator);    return newName;  } else {    operatorNameMap.put(name,operator);    return name;  }}  }
class C{  private void logResult(Iterable<Label> result){  if (LogUtils.LOG_LEVEL >= Log.VERBOSE) {    final StringBuilder logMessageBuilder=new StringBuilder("Query result: [");    for (    Label label : result) {      logMessageBuilder.append("\n  ");      logMessageBuilder.append(label);    }    logMessageBuilder.append("].");    LogUtils.log(this,Log.VERBOSE,logMessageBuilder.toString());  }}  }
class C{  public boolean isInserting(){  return m_inserting;}  }
class C{  public synchronized boolean canBeDeallocate(){  if (shareCounter > 0 || isBeingDeallocate) {    return false;  }  if (!inCache.get()) {    isBeingDeallocate=true;    return true;  }  return false;}  }
class C{  protected WrappingJavaFileManager(M fileManager){  super(fileManager);}  }
class C{  protected AbstractParser(AltFormat altFormat,Class<? extends T> resultType){  Preconditions.checkNotNull(altFormat,"altFormat");  Preconditions.checkNotNull(resultType,"resultType");  this.altFormat=altFormat;  this.resultType=resultType;}  }
class C{  void printHelp(){  System.out.println("\nUsage: klist " + "[[-c] [-f] [-e] [-a [-n]]] [-k [-t] [-K]] [name]");  System.out.println("   name\t name of credentials cache or " + " keytab with the prefix. File-based cache or " + "keytab's prefix is FILE:.");  System.out.println("   -c specifies that credential cache is to be " + "listed");  System.out.println("   -k specifies that key tab is to be listed");  System.out.println("   options for credentials caches:");  System.out.println("\t-f \t shows credentials flags");  System.out.println("\t-e \t shows the encryption type");  System.out.println("\t-a \t shows addresses");  System.out.println("\t  -n \t   do not reverse-resolve addresses");  System.out.println("   options for keytabs:");  System.out.println("\t-t \t shows keytab entry timestamps");  System.out.println("\t-K \t shows keytab entry key value");  System.out.println("\t-e \t shows keytab entry key type");  System.out.println("\nUsage: java sun.security.krb5.tools.Klist " + "-help for help.");}  }
class C{  public boolean hasCharacterIndex(int index){  for (int n=0; n < charMap.length; n++) {    if (index == charMap[n])     return true;  }  return false;}  }
class C{  @Override public ODataResponse handleError(ODataErrorContext ctx) throws ODataApplicationException {  return EntityProvider.writeErrorDocument(ctx);}  }
class C{  public T caseDebuggerStatement(DebuggerStatement object){  return null;}  }
class C{  boolean wantsToTrigger(PropertyChangeEvent evt){  try {    String sysName=((NamedBean)evt.getSource()).getSystemName();    String userName=((NamedBean)evt.getSource()).getUserName();    for (int i=0; i < _variableList.size(); i++) {      if (sysName.equals(_variableList.get(i).getName())) {        return _variableList.get(i).doTriggerActions();      }    }    if (userName != null) {      for (int i=0; i < _variableList.size(); i++) {        if (userName.equals(_variableList.get(i).getName())) {          return _variableList.get(i).doTriggerActions();        }      }    }  } catch (  ClassCastException e) {    log.error(getDisplayName() + " PropertyChangeEvent source of unexpected type: " + evt);  }  return true;}  }
class C{  public void openToLeft(){  if (open) {    return;  }  if (bottomRightWrapper.getComponentCount() == 0) {    return;  }  Component bottom=bottomRightWrapper.getComponentAt(0);  if (bottomLeftWrapper.getComponentCount() > 0) {    bottomLeftWrapper.setVisible(false);  }  bottomRightWrapper.setVisible(true);  int topX=topWrapper.getX();  openCloseMotion=Motion.createSplineMotion(-topX,bottom.getWidth(),300);  getComponentForm().registerAnimated(this);  openCloseMotion.start();  openedToLeft=true;  open=true;}  }
class C{  @Override public void doInitialize(UimaContext aContext) throws ResourceInitializationException {  DB db=mongoResource.getDB();  collection=db.getCollection(collectionName);  collection.createIndex(new BasicDBObject(FIELD_UNIQUE_ID,1));  collection.createIndex(new BasicDBObject(FIELD_PUBLISHEDIDS,1));  stopFeatures=new HashSet<String>();  stopFeatures.add("uima.cas.AnnotationBase:sofa");  stopFeatures.add("uk.gov.dstl.baleen.types.BaleenAnnotation:internalId");  maxContentLength=ConfigUtils.stringToInteger(maxContentLengthString,0);}  }
class C{  private void resetHintTime(){  mHandler.removeCallbacks(mHint);  mHandler.postDelayed(mHint,HINT_DELAY);}  }
class C{  public ExternalIDPResource externalIdp(){  return externalIdp;}  }
class C{  public boolean isActivePointer(int pointerId){  final int pointerFlag=(1 << pointerId);  return (mActivePointers & pointerFlag) != 0;}  }
class C{  private void doTextNormal(final PDFPage cmds,final String text){  final PointF zero=new PointF();  final Matrix scale=new Matrix();  Utils.setMatValues(scale,fsize,0,0,fsize * th,0,tr);  final Matrix at=new Matrix();  final List<PDFGlyph> l=(List<PDFGlyph>)font.getGlyphs(text);  for (  final PDFGlyph glyph : l) {    at.set(cur);    at.preConcat(scale);    final PointF advance=glyph.addCommands(cmds,at,tm);    float advanceX=(advance.x * fsize) + tc;    if (glyph.getChar() == ' ') {      advanceX+=tw;    }    advanceX*=th;    cur.preTranslate(advanceX,advance.y);  }  final float[] src={zero.x,zero.y};  final float[] dst=new float[src.length];  cur.mapPoints(dst,src);  prevEnd.set(dst[0],dst[1]);}  }
class C{  @SuppressWarnings("unused") @Test public void testSiblingStateTransition(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    Region r=_createRegion("r",sc);{      Entry r_entry=_createEntry(EntryKind.INITIAL,null,r);      State s1=_createState("s1",r);{        Region r2=_createRegion("r2",s1);{          Entry r2_entry=_createEntry(EntryKind.INITIAL,null,r2);          State s2=_createState("s2",r2);          _createTransition(r2_entry,s2);        }        Region r3=_createRegion("r3",s1);{          Entry r3_entry=_createEntry(EntryKind.INITIAL,null,r3);          State s3=_createState("s3",r3);{            Region r3a=_createRegion("r3a",s3);{              Entry r3a_entry=_createEntry(EntryKind.INITIAL,null,r3a);              State s3a=_createState("s3a",r3a);              _createTransition(r3a_entry,s3a);            }            Region r3b=_createRegion("r3b",s3);{              Entry r3b_entry=_createEntry(EntryKind.INITIAL,null,r3b);              State s3b=_createState("s3b",r3b);              State s3b2=_createState("s3b2",r3b);              _createTransition(r3b_entry,s3b);            }            Region r3c=_createRegion("r3c",s3);{              Entry r3c_entry=_createEntry(EntryKind.INITIAL,null,r3c);              State s3c=_createState("s3c",r3c);              _createTransition(r3c_entry,s3c);            }          }          _createEntryAssignment(v1,s3,42);          _createTransition(r3_entry,s3);        }        Region r4=_createRegion("r4",s1);{          Entry r4_entry=_createEntry(EntryKind.INITIAL,null,r4);          State s4=_createState("s4",r4);          _createTransition(r4_entry,s4);        }      }      _createTransition(r_entry,s1);      State s5=_createState("s5",r);      _createTransition(findState(sc,"s3b"),findState(sc,"s3b2"));    }  }  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s2=flow.getStates().get(1);  assertEquals("sc.r.s1.r2.s2",_s2.getName());  ExecutionState _s3=flow.getStates().get(2);  assertEquals("sc.r.s1.r3.s3",_s3.getName());  ExecutionState _s3a=flow.getStates().get(3);  assertEquals("sc.r.s1.r3.s3.r3a.s3a",_s3a.getName());  ExecutionState _s3b=flow.getStates().get(4);  assertEquals("sc.r.s1.r3.s3.r3b.s3b",_s3b.getName());  ExecutionState _s3b2=flow.getStates().get(5);  assertEquals("sc.r.s1.r3.s3.r3b.s3b2",_s3b2.getName());  ExecutionState _s3c=flow.getStates().get(6);  assertEquals("sc.r.s1.r3.s3.r3c.s3c",_s3c.getName());  ExecutionState _s4=flow.getStates().get(7);  assertEquals("sc.r.s1.r4.s4",_s4.getName());  ExecutionState _s5=flow.getStates().get(8);  assertEquals("sc.r.s5",_s5.getName());  Reaction _t=_s3b.getReactions().get(0);  assertTrue(_t.isTransition());  Sequence _effect=(Sequence)_t.getEffect();  assertEquals(2,_effect.getSteps().size());  assertCall(_effect,0,_s3b.getExitSequence());  assertCall(_effect,1,_s3b2.getEnterSequences().get(0));}  }
class C{  private void syncBackupsInDBWithExistingOnes(){  List<BackupEntry> realBackups=sdfsStateService.getBackupsFromSDFSMountPoint();  List<BackupEntry> backupEntries=backupRepository.findAll();  List<BackupEntry> toRemove=new ArrayList<>();  backupEntries.stream().filter(null).peek(null).forEach(null);  backupRepository.delete(toRemove);  List<BackupEntry> toAdd=new ArrayList<>();  realBackups.stream().filter(null).peek(null).forEach(null);  backupRepository.save(toAdd);}  }
class C{  public ClassMemberValue(String className,ConstPool cp){  super('c',cp);  setValue(className);}  }
class C{  public void teleportCheckpoint(Player player){  for (int index=checkpoints.size() - 1; index >= 0; index--) {    Checkpoint checkpoint=checkpoints.get(index);    if (checkpoint.isActivated()) {      player.teleport(checkpoint.getLocation());      return;    }  }  player.teleport(spawns.get(0));}  }
class C{  public synchronized void insert(double _priority,Object _data){  numElements++;  if (numElements == queue.length) {    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];    System.arraycopy(queue,0,tmp,0,queue.length);    for (int i=queue.length; i < tmp.length; i++) {      tmp[i]=new PriorityQueueNode();    }    queue=tmp;  }  queue[numElements].data=_data;  queue[numElements].priority=_priority;  reheapify(numElements);}  }
class C{  private void validateTaskSubStageProgression(DeleteVirtualNetworkWorkflowDocument.TaskState startState,DeleteVirtualNetworkWorkflowDocument.TaskState patchState){  if (patchState.stage.ordinal() > TaskState.TaskStage.FINISHED.ordinal()) {    return;  }  if (patchState.stage == TaskState.TaskStage.FINISHED) {    Preconditions.checkState(startState.stage == TaskState.TaskStage.STARTED && (startState.subStage == DeleteVirtualNetworkWorkflowDocument.TaskState.SubStage.DELETE_NETWORK_ENTITY || startState.subStage == DeleteVirtualNetworkWorkflowDocument.TaskState.SubStage.CHECK_VM_EXISTENCE));  }  if (patchState.stage == TaskState.TaskStage.STARTED) {    Preconditions.checkState(patchState.subStage.ordinal() == startState.subStage.ordinal() + 1 || patchState.subStage == startState.subStage);  }}  }
class C{  public RandomFilterParser(Element element) throws FilterException {  String chanceProperty=element.getText();  if (chanceProperty == null) {    throw new MissingFilterPropertyException("chance",element);  }  if (Numbers.isDecimal(chanceProperty)) {    chance=Numbers.parseDouble(chanceProperty);  } else {    if (chanceProperty.contains("\\,")) {      String[] range=chanceProperty.replaceAll("\\(","").replaceAll("\\)","").replaceAll("\\[","").replaceAll("\\]","").split(",");      if (Numbers.isDecimal(range[0]) && Numbers.isDecimal(range[1])) {        chance=Numbers.parseDouble(range[1]) - Numbers.parseDouble(range[0]);      } else {        throw new InvalidFilterPropertyException("chance",element);      }    } else {      throw new InvalidFilterPropertyException("chance",element);    }  }}  }
class C{  public ScanQuery(){  this(null,null);}  }
class C{  public static AndroidHttpClient newInstance(String userAgent){  return newInstance(userAgent,null);}  }
class C{  public boolean updatePointByPoint(Point scaledPoint){  boolean changeMade=!scaledPoint.equals(potentialControlPoint);  potentialControlPoint=scaledPoint;  if (componentSlot != null && !componentSlot.isEmpty()) {    componentSlot.get(0).setControlPoint(scaledPoint,1);  }  return changeMade;}  }
class C{  public void testNextDoubleBounded2(){  SplittableRandom sr=new SplittableRandom();  for (double least=0.0001; least < 1.0e20; least*=8) {    for (double bound=least * 1.001; bound < 1.0e20; bound*=16) {      double f=sr.nextDouble(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      double j;      while (i < NCALLS && (j=sr.nextDouble(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  final void signal(){synchronized (this) {    if (state == State.READY) {      state=State.SIGNALLED;      watcher.enqueueKey(this);    }  }}  }
class C{  public int size(int taskId){  return readTasks.get(taskId).size();}  }
class C{  private void registerFitDataListener(FitDataTypeSetting dataTypeSetting,OnDataPointListener listener){  sensorsAwaitingRegistration.add(dataTypeSetting);  Fitness.SensorsApi.add(mGoogleApiClient,new SensorRequest.Builder().setDataType(dataTypeSetting.getDataType()).setSamplingRate(dataTypeSetting.getSamplingRateSeconds(),TimeUnit.SECONDS).setAccuracyMode(dataTypeSetting.getAccuracyMode()).build(),listener).setResultCallback(new FitResultCallback<Status>(this,FitResultCallback.RegisterType.SENSORS,dataTypeSetting.getDataType(),true));}  }
class C{  public void translateTexts(){  String labelText=Localization.Main.getText(localizationKey + ".label");  if (labelText.endsWith("label"))   labelText=Localization.Main.getText(localizationKey);  if (labelText.equals(localizationKey))   labelText="";  String tooltipText=Localization.Main.getText(localizationKey + ".tooltip");  if (tooltipText.endsWith(".tooltip"))   tooltipText="";  if (guiLabelField != null) {    if (guiLabelField instanceof JButton) {      ((JButton)guiLabelField).setText(labelText);    } else     if (guiLabelField instanceof JLabel) {      ((JLabel)guiLabelField).setText(labelText);    } else     if (guiLabelField instanceof JTextField) {      ((JTextField)guiLabelField).setText(labelText);    } else     if (guiLabelField instanceof JCheckBox) {      ((JCheckBox)guiLabelField).setText(labelText);    } else     if (guiLabelField instanceof JTabbedPane) {      int tabIndex=-1 + (localizationKey.charAt(localizationKey.length() - 1)) - '0';      ((JTabbedPane)guiLabelField).setTitleAt(tabIndex,labelText);    } else     if (guiLabelField instanceof JMenuItem) {      ((JMenuItem)guiLabelField).setText(labelText);    } else {      logger.error("setTranslateTexta:  Cannot handle the type for LocalizationKey=" + localizationKey);      return;    }  }  if (Helper.isNotNullOrEmpty(tooltipText)) {    if (guiLabelField != null)     guiLabelField.setToolTipText(tooltipText);    if (guiValueField != null)     guiValueField.setToolTipText(tooltipText);  }}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  CompoundStatement s=(CompoundStatement)clone();  s.args=new Statement[args.length];  for (int i=0; i < args.length; i++) {    s.args[i]=args[i].copyInline(ctx,valNeeded);  }  return s;}  }
class C{  public double[] asDegreesArray(){  return new double[]{this.getLatitude().degrees,this.getLongitude().degrees};}  }
class C{  @Override public void computeDerivatives(final double time,final double[] y,final double[] ydot) throws MaxCountExceededException, DimensionMismatchException {  assignValue(currentScope,time,y);  final Map<Integer,IAgent> equaAgents=getEquationAgents(currentScope);  for (int i=0, n=getDimension(); i < n; i++) {    try {      final ExecutionResult result=currentScope.execute(equations.get(i),equaAgents.get(i),null);      ydot[i]=Cast.asFloat(currentScope,result.getValue());    } catch (    final Throwable e2) {      GAMA.reportAndThrowIfNeeded(currentScope,GamaRuntimeException.create(e2,currentScope),true);    }  }}  }
class C{  protected void initBPOrderDetails(int C_BPartner_ID,boolean forInvoice){  log.config("C_BPartner_ID=" + C_BPartner_ID);  KeyNamePair pp=new KeyNamePair(0,"");  orderField.removeActionListener(this);  orderField.removeAllItems();  orderField.addItem(pp);  ArrayList<KeyNamePair> list=loadOrderData(C_BPartner_ID,forInvoice,sameWarehouseCb.isSelected());  for (  KeyNamePair knp : list)   orderField.addItem(knp);  orderField.setSelectedIndex(0);  orderField.addActionListener(this);  initBPDetails(C_BPartner_ID);}  }
class C{  private void initialize(Properties props){  this.autoConnect=validateBoolean(props.getProperty(AUTO_CONNECT_NAME),DEFAULT_AUTO_CONNECT);  this.httpEnabled=validateBoolean(props.getProperty(HTTP_ENABLED_NAME),DEFAULT_HTTP_ENABLED);  this.httpBindAddress=validateHttpBindAddress(props.getProperty(HTTP_BIND_ADDRESS_NAME));  this.httpPort=validateHttpPort(props.getProperty(HTTP_PORT_NAME));  this.rmiEnabled=validateBoolean(props.getProperty(RMI_ENABLED_NAME),DEFAULT_RMI_ENABLED);  this.rmiRegistryEnabled=validateBoolean(props.getProperty(RMI_REGISTRY_ENABLED_NAME),DEFAULT_RMI_REGISTRY_ENABLED);  this.rmiBindAddress=validateRmiBindAddress(props.getProperty(RMI_BIND_ADDRESS_NAME));  this.rmiPort=validateRmiPort(props.getProperty(RMI_PORT_NAME));  this.rmiServerPort=validateRmiServerPort(props.getProperty(RMI_SERVER_PORT_NAME));  this.snmpEnabled=validateBoolean(props.getProperty(SNMP_ENABLED_NAME),DEFAULT_SNMP_ENABLED);  this.snmpDirectory=validateSnmpDirectory(props.getProperty(SNMP_DIRECTORY_NAME));  this.agentSSLEnabled=validateBoolean(props.getProperty(AGENT_SSL_ENABLED_NAME),DEFAULT_AGENT_SSL_ENABLED);  this.agentSSLProtocols=validateNonEmptyString(props.getProperty(AGENT_SSL_PROTOCOLS_NAME),DEFAULT_AGENT_SSL_PROTOCOLS);  this.agentSSLCiphers=validateNonEmptyString(props.getProperty(AGENT_SSL_CIPHERS_NAME),DEFAULT_AGENT_SSL_CIPHERS);  this.agentSSLRequireAuth=validateBoolean(props.getProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME),DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION);  this.httpSSLRequireAuth=validateBoolean(props.getProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME),DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION);  this.httpAuthEnabled=validateBoolean(props.getProperty(HTTP_AUTHENTICATION_ENABLED_NAME),DEFAULT_HTTP_AUTHENTICATION_ENABLED);  this.httpAuthUser=validateNonEmptyString(props.getProperty(HTTP_AUTHENTICATION_USER_NAME),DEFAULT_HTTP_AUTHENTICATION_USER);  this.httpAuthPassword=validateNonEmptyString(props.getProperty(HTTP_AUTHENTICATION_PASSWORD_NAME),DEFAULT_HTTP_AUTHENTICATION_PASSWORD);  this.sslEnabled=validateBoolean(props.getProperty(CLUSTER_SSL_ENABLED),DEFAULT_SSL_ENABLED);  this.sslProtocols=validateNonEmptyString(props.getProperty(CLUSTER_SSL_PROTOCOLS),DEFAULT_SSL_PROTOCOLS);  this.sslCiphers=validateNonEmptyString(props.getProperty(CLUSTER_SSL_CIPHERS),DEFAULT_SSL_CIPHERS);  this.sslAuthenticationRequired=validateBoolean(props.getProperty(CLUSTER_SSL_REQUIRE_AUTHENTICATION),DEFAULT_SSL_REQUIRE_AUTHENTICATION);  this.sslProperties=new Properties();  for (int i=0; true; i++) {    String key="ssl-property-" + i;    String value=props.getProperty(key);    if (value == null) {      break;    }    StringTokenizer st=new StringTokenizer(value,"=");    if (!st.hasMoreTokens()) {      break;    }    String propKey=st.nextToken();    if (!st.hasMoreTokens()) {      break;    }    String propValue=st.nextToken();    this.sslProperties.put(propKey,propValue);  }  this.isEmailNotificationEnabled=validateBoolean(props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_ENABLED_NAME),DEFAULT_EMAIL_NOTIFICATIONS_ENABLED);  this.emailNotificationHostName=validateNonEmptyString(props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_HOST_NAME),DEFAULT_EMAIL_HOST);  this.emailNotificationFrom=validateNonEmptyString(props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_FROM_NAME),DEFAULT_EMAIL_FROM);  this.emailNotificationToList=validateNonEmptyString(props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_TO_LIST_NAME),DEFAULT_EMAIL_TO_LIST);  this.stateSaveFile=validateNonEmptyString(props.getProperty(AgentConfig.STATE_SAVE_FILE_NAME),DEFAULT_STATE_SAVE_FILE);  try {    for (int i=0; true; i++) {      String hostProp=props.getProperty(LOCATOR_HOST_NAME + i);      if (isEmpty(hostProp)) {        break;      }      String host=hostProp;      int port=Integer.parseInt(props.getProperty(LOCATOR_PORT_NAME + i));      File workDir=validateWorkingDirectory(props.getProperty(LOCATOR_WORKING_DIRECTORY_NAME + i));      File prodDir=new File(validateProductDirectory(props.getProperty(LOCATOR_PRODUCT_DIRECTORY_NAME + i)));      String remoteCmd=props.getProperty(LOCATOR_REMOTE_COMMAND + i);      String bindAddr=props.getProperty(LOCATOR_BIND_ADDRESS + i);      DistributionLocatorConfig config=this.createDistributionLocatorConfig();      config.setHost(host);      config.setPort(port);      config.setBindAddress(bindAddr);      config.setWorkingDirectory(workDir.getAbsolutePath());      config.setProductDirectory(prodDir.getAbsolutePath());      config.setRemoteCommand(remoteCmd);    }  } catch (  IllegalArgumentException e) {    e.printStackTrace();  }}  }
class C{  @Override public void removeListener(final IEventLayerListener listener){  listeners.remove(listener);}  }
class C{  public int memberOf(){  return theType.memberOf();}  }
class C{  protected void checkForCompletion(FragmentBuilder builder,Node node){  if (builder.isComplete()) {    if (node != null) {      Trace trace=builder.getTrace();      if (builder.getLevel().ordinal() <= ReportingLevel.None.ordinal()) {        if (log.isLoggable(Level.FINEST)) {          log.finest("Not recording trace (level=" + builder.getLevel() + "): "+ trace);        }      } else {        if (trace != null && !trace.getNodes().isEmpty()) {          if (log.isLoggable(Level.FINEST)) {            log.finest("Record trace: " + trace);          }          if (trace.getNodes().size() > 1 && trace.getNodes().get(0).getClass() == Consumer.class && ((Consumer)trace.getNodes().get(0)).getEndpointType() == null) {            Consumer consumer=(Consumer)trace.getNodes().get(0);            while (trace.getNodes().size() > 1) {              consumer.getNodes().add(trace.getNodes().get(1));              trace.getNodes().remove(1);            }          }          reporter.report(trace);        }      }    }    fragmentManager.clear();    for (    String id : builder.getUncompletedCorrelationIds()) {      correlations.remove(id);    }    diagnostics();  }}  }
class C{  @Override public void acceptDataSet(DataSetEvent e){  m_receivedStopNotification=false;  TrainingSetEvent tse=new TrainingSetEvent(this,e.getDataSet());  tse.m_setNumber=1;  tse.m_maxSetNumber=1;  notifyTrainingSetProduced(tse);}  }
class C{  @SuppressWarnings("static-access") private void resetUser(boolean isSource,String newUser){  String user=null;  if (isSource) {    if (newUser == null) {      user=s_parameters.getSourceUser();    } else     if (newUser.length() == 0) {      user=m_sourceUser.getText();      ;    } else {      user=newUser;    }    m_sourceUser.setText(user);    m_sourceUserOld=user;  } else {    if (newUser == null) {      user=s_parameters.getTargetUser();    } else     if (newUser.length() == 0) {      user=m_targetUser.getText();    } else {      user=newUser;    }    m_targetUser.setText(user);    m_targetUserOld=user;  }}  }
class C{  void drawImageArea(Image img,int x,int y,int imageX,int imageY,int imageWidth,int imageHeight){  img.drawImageArea(this,nativeGraphics,x,y,imageX,imageY,imageWidth,imageHeight);}  }
class C{  @Override public void update(BasicCamera camera){  scale=camera.getPixelSizeAt(getWorldTranslation(),true) * PIXEL_SIZE;  if (Math.abs(scale - oldScale) > 0.0000001) {    oldScale=scale;    if (autoScale) {      scaleShape(scale);    }  }}  }
class C{  private static String formatEntry(long ts,String threadName,long threadId,Object... data){  return "<" + DEBUG_DATE_FMT.format(new Date(ts)) + "><~DBG~><"+ threadName+ " id:"+ threadId+ "> "+ Arrays.deepToString(data);}  }
class C{  public void overwriteSeries(String key,double[] values,int bins){  addSeries(key,values,bins);}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public LogConnection connect(boolean readonly) throws ReplicatorException {  LogConnection client=new LogConnection(this,readonly);  if (logger.isDebugEnabled())   logger.debug("Client connect to log: connection=" + client.toString());  connectionManager.store(client);  return client;}  }
class C{  public MaterializeBuilder withContainerLayoutParams(ViewGroup.LayoutParams layoutParams){  this.mContainerLayoutParams=layoutParams;  return this;}  }
class C{  public boolean isLoading(){  return !m_allLoaded;}  }
class C{  private boolean isValueSupported(Object value){  for (int i=0; i < values.length; i++) {    if (value.equals(values[i])) {      return true;    }  }  return false;}  }
class C{  public SimpleMetadataReaderFactory(ResourceLoader resourceLoader){  this.resourceLoader=(resourceLoader != null ? resourceLoader : new DefaultResourceLoader());}  }
class C{  public static boolean equalsIncludingNaN(double x,double y,double eps){  return equalsIncludingNaN(x,y) || (FastMath.abs(y - x) <= eps);}  }
class C{  public <D,E extends Element>ElementMetadata<D,E> bind(ElementKey<D,E> key){  return bind(null,key,null);}  }
class C{  public boolean isActive(){  return isActive;}  }
class C{  private void remove(ThreadGroup g){synchronized (groups) {    for (Iterator<ThreadGroup> i=groups.iterator(); i.hasNext(); ) {      ThreadGroup threadGroup=i.next();      if (threadGroup.equals(g)) {        i.remove();        break;      }    }  }  destroyIfEmptyDaemon();}  }
class C{  public EditableOMText(OMText omc){  setGraphic(omc);}  }
class C{  public StateData(Object parent,Object region,S state,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,boolean initial){  this.state=state;  this.deferred=deferred;  this.entryActions=entryActions;  this.exitActions=exitActions;  this.parent=parent;  this.region=region;  this.initial=initial;}  }
class C{  @Override protected ArrayList<String> collectQueryParameters(){  ArrayList<String> params=new ArrayList<String>();  params.add("event_id=" + _eventId);  params.add("logNames=" + _logNames);  params.add("severity=" + _severity);  params.add("start=" + _start);  params.add("end=" + _end);  params.add("nodeIds=" + _nodeIds);  params.add("msgRegex=" + _msgRegex);  params.add("maxCount=" + maxCount);  return params;}  }
class C{  public boolean isEmpty(){  return empty;}  }
class C{  public final void add(TXCommitMessage msg){synchronized (this.txInProgress) {    final Object key=msg.getTrackerKey();    if (key == null) {      Assert.assertTrue(false,"TXFarSideCMTracker must have a non-null key for message " + msg);    }    this.txInProgress.put(key,msg);    this.txInProgress.notifyAll();  }}  }
class C{  @Override public Statement createStatement(int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {  try {    int id=getNextId(TraceObject.STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("Statement",TraceObject.STATEMENT,id,"createStatement(" + resultSetType + ", "+ resultSetConcurrency+ ", "+ resultSetHoldability+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkHoldability(resultSetHoldability);    checkClosed();    return new JdbcStatement(this,id,resultSetType,resultSetConcurrency,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public DragTrustedCertificateEntry(String name,Certificate trustedCertificate) throws CryptoException {  super(name);  contentStr=X509CertUtil.getCertEncodedX509Pem(X509CertUtil.convertCertificate(trustedCertificate));  contentBytes=contentStr.getBytes();  image=new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("DragTrustedCertificateEntry.Drag.image"))));}  }
class C{  public boolean decodeUintvarInteger(int startIndex){  int index=startIndex;  mUnsigned32bit=0;  while ((mWspData[index] & 0x80) != 0) {    if ((index - startIndex) >= 4) {      return false;    }    mUnsigned32bit=(mUnsigned32bit << 7) | (mWspData[index] & 0x7f);    index++;  }  mUnsigned32bit=(mUnsigned32bit << 7) | (mWspData[index] & 0x7f);  mDataLength=index - startIndex + 1;  return true;}  }
class C{  public static void buildEventsFromCursor(ArrayList<Event> events,Cursor cEvents,Context context,int startDay,int endDay){  if (cEvents == null || events == null) {    Log.e(TAG,"buildEventsFromCursor: null cursor or null events list!");    return;  }  int count=cEvents.getCount();  if (count == 0) {    return;  }  Resources res=context.getResources();  mNoTitleString=res.getString(R.string.no_title_label);  mNoColorColor=res.getColor(R.color.event_center);  cEvents.moveToPosition(-1);  while (cEvents.moveToNext()) {    Event e=generateEventFromCursor(cEvents);    if (e.startDay > endDay || e.endDay < startDay) {      continue;    }    events.add(e);  }}  }
class C{  public String flatten(){  flattenAsMap();  if (flattenedMap.containsKey(ROOT))   return javaObj2Json(flattenedMap.get(ROOT)); else   return flattenedMap.toString(printMode);}  }
class C{  public static OutputStream newBZFileOutputStream(String file,boolean useGzip,boolean useOBuffers,int buffersize) throws IOException {  return newBZFileOutputStream(file,useGzip,useOBuffers,buffersize,false);}  }
class C{  static void check(PublicKey key,AlgorithmId algorithmId) throws CertPathValidatorException {  String sigAlgName=algorithmId.getName();  AlgorithmParameters sigAlgParams=algorithmId.getParameters();  if (!certPathDefaultConstraints.permits(SIGNATURE_PRIMITIVE_SET,sigAlgName,key,sigAlgParams)) {    throw new CertPathValidatorException("algorithm check failed: " + sigAlgName + " is disabled",null,null,-1,BasicReason.ALGORITHM_CONSTRAINED);  }}  }
class C{  public long lengthSquared(){  return x * x + y * y;}  }
class C{  private void addAuthors(Document doc,Eml eml) throws DocumentException {  HashSet<Agent> tempAgents=new LinkedHashSet<Agent>();  for (  Agent creator : eml.getCreators()) {    if (!Strings.isNullOrEmpty(creator.getLastName())) {      tempAgents.add(creator);    }  }  for (  Agent metadataProvider : eml.getMetadataProviders()) {    if (!Strings.isNullOrEmpty(metadataProvider.getLastName())) {      tempAgents.add(metadataProvider);    }  }  for (  Agent party : eml.getAssociatedParties()) {    if (!Strings.isNullOrEmpty(party.getLastName())) {      tempAgents.add(party);    }  }  Collection<Integer> toRemove=new ArrayList<Integer>();  int counter=0;  for (Iterator<Agent> i=tempAgents.iterator(); i.hasNext(); counter++) {    if (toRemove.contains(counter)) {      i.next();      i.remove();    } else {      Agent agentA=i.next();      boolean flag=false;      int countTemp=0;      for (Iterator<Agent> j=tempAgents.iterator(); j.hasNext(); countTemp++) {        Agent agentB=j.next();        if (flag) {          if (equal(agentA.getLastName(),agentB.getLastName()) && equal(agentA.getFirstName(),agentB.getFirstName()) && equal(agentA.getAddress(),agentB.getAddress())) {            toRemove.add(countTemp);          }        } else         if (agentA.equals(agentB)) {          flag=true;        }      }    }  }  Agent[] agentsArray=new Agent[tempAgents.size()];  tempAgents.toArray(agentsArray);  Paragraph p=new Paragraph();  p.setFont(font);  p.setAlignment(Element.ALIGN_CENTER);  java.util.List<Agent> affiliations=new ArrayList<Agent>();  int superScriptCounter=1;  for (int c=0; c < agentsArray.length; c++) {    if (exists(agentsArray[c].getLastName())) {      if (c != 0) {        p.add(", ");      }      if (exists(agentsArray[c].getFirstName())) {        p.add(agentsArray[c].getFirstName() + " ");      }      p.add(agentsArray[c].getLastName());      boolean isRepeated=false;      for (int index=0; index < affiliations.size(); index++) {        if (equal(agentsArray[c].getAddress(),affiliations.get(index).getAddress()) && equal(agentsArray[c].getOrganisation(),affiliations.get(index).getOrganisation())) {          p.add(createSuperScript(String.valueOf(index + 1)));          isRepeated=true;          break;        }      }      if (!isRepeated) {        p.add(createSuperScript(String.valueOf(superScriptCounter)));        affiliations.add(agentsArray[c]);        superScriptCounter++;      }    }  }  doc.add(p);  p.clear();  doc.add(Chunk.NEWLINE);  tempAgents.clear();  p=new Paragraph();  p.setFont(font);  p.setAlignment(Element.ALIGN_JUSTIFIED);  for (int c=0; c < affiliations.size(); c++) {    if (c != 0) {      p.add("; ");    }    p.add((c + 1) + " ");    if (exists(affiliations.get(c).getOrganisation())) {      p.add(affiliations.get(c).getOrganisation() + ", ");    }    if (exists(affiliations.get(c).getAddress().getAddress())) {      p.add(affiliations.get(c).getAddress().getAddress() + ", ");    }    if (exists(affiliations.get(c).getAddress().getPostalCode())) {      p.add(affiliations.get(c).getAddress().getPostalCode() + ", ");    }    if (exists(affiliations.get(c).getAddress().getCity())) {      p.add(affiliations.get(c).getAddress().getCity());    }    if (exists(affiliations.get(c).getAddress().getCountry())) {      VocabularyConcept concept=vocabManager.get(Constants.VOCAB_URI_COUNTRY).findConcept(affiliations.get(c).getAddress().getCountry());      if (exists(concept)) {        p.add(", " + WordUtils.capitalizeFully(concept.getPreferredTerm(DEFAULT_LANGUAGE).getTitle()));      } else {        p.add(", " + WordUtils.capitalizeFully(affiliations.get(c).getAddress().getCountry()));      }    }  }  doc.add(p);  p.clear();  doc.add(Chunk.NEWLINE);  p=new Paragraph();  p.setAlignment(Element.ALIGN_JUSTIFIED);  p.add(new Phrase(getText("rtf.authors") + ": ",fontTitle));  p.setFont(font);  boolean isFirst=true;  for (  Agent creator : eml.getCreators()) {    if (!Strings.isNullOrEmpty(creator.getFirstName())) {      p.add(creator.getFirstName() + " ");    }    p.add(creator.getLastName());    if (!Strings.isNullOrEmpty(creator.getEmail())) {      p.add(" (" + creator.getEmail() + ")");    }    isFirst=false;  }  for (  Agent metadataProvider : eml.getMetadataProviders()) {    boolean sameAsCreator=false;    for (    Agent creator : eml.getCreators()) {      if (equal(metadataProvider.getAddress(),creator.getAddress()) && equal(metadataProvider.getEmail(),creator.getEmail())) {        sameAsCreator=true;        break;      }    }    if (!sameAsCreator) {      if (!isFirst) {        p.add(", ");      }      if (!Strings.isNullOrEmpty(metadataProvider.getFirstName())) {        p.add(metadataProvider.getFirstName() + " ");      }      p.add(metadataProvider.getLastName());      if (!Strings.isNullOrEmpty(metadataProvider.getEmail())) {        p.add(" (" + metadataProvider.getEmail() + ")");      }      isFirst=false;    }  }  p.add(Chunk.NEWLINE);  doc.add(p);  p.clear();}  }
class C{  public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  if ("Topic".equals(qName)) {    curSection=atts.getValue("r:id");  } else   if ("ExternalPage".equals(qName)) {    if ((!includeAdult) && curSection.startsWith("Top/Adult")) {      return;    }    if (topicPattern != null && !topicPattern.matcher(curSection).matches()) {      return;    }    String url=atts.getValue("about");    int hashValue=MD5Hash.digest(url).hashCode();    hashValue=Math.abs(hashValue ^ hashSkew);    if ((hashValue % subsetDenom) != 0) {      return;    }    curURL=url;  } else   if (curURL != null && "d:Title".equals(qName)) {    titlePending=true;  } else   if (curURL != null && "d:Description".equals(qName)) {    descPending=true;  }}  }
class C{  public void java_lang_Package_getSystemPackage0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  public UserConfig fetch(UserConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/check-user",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    UserConfig user=new UserConfig();    user.parseXML(root);    return user;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  @Inline public static boolean mightBeTIB(ObjectReference obj){  return !obj.isNull() && Space.isMappedObject(obj) && Space.isMappedObject(ObjectReference.fromObject(ObjectModel.getTIB(obj)));}  }
class C{  private boolean endsWithPossessive(int pos){  return (stemEnglishPossessive && pos > 2 && text[pos - 2] == '\'' && (text[pos - 1] == 's' || text[pos - 1] == 'S') && isAlpha(charType(text[pos - 3])) && (pos == endBounds || isSubwordDelim(charType(text[pos]))));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public boolean isWrap(){  return wrap != null;}  }
class C{  public void enableFiltering(Approximator a){  mFilterData=true;}  }
class C{  protected void drawItemPass0(Graphics2D x_graphics,Rectangle2D x_dataArea,PlotRenderingInfo x_info,XYPlot x_plot,ValueAxis x_domainAxis,ValueAxis x_rangeAxis,XYDataset x_dataset,int x_series,int x_item,CrosshairState x_crosshairState){  if (!((0 == x_series) && (0 == x_item))) {    return;  }  boolean b_impliedZeroSubtrahend=(1 == x_dataset.getSeriesCount());  if (isEitherSeriesDegenerate(x_dataset,b_impliedZeroSubtrahend)) {    return;  }  if (!b_impliedZeroSubtrahend && areSeriesDisjoint(x_dataset)) {    return;  }  LinkedList l_minuendXs=new LinkedList();  LinkedList l_minuendYs=new LinkedList();  LinkedList l_subtrahendXs=new LinkedList();  LinkedList l_subtrahendYs=new LinkedList();  LinkedList l_polygonXs=new LinkedList();  LinkedList l_polygonYs=new LinkedList();  int l_minuendItem=0;  int l_minuendItemCount=x_dataset.getItemCount(0);  Double l_minuendCurX=null;  Double l_minuendNextX=null;  Double l_minuendCurY=null;  Double l_minuendNextY=null;  double l_minuendMaxY=Double.NEGATIVE_INFINITY;  double l_minuendMinY=Double.POSITIVE_INFINITY;  int l_subtrahendItem=0;  int l_subtrahendItemCount=0;  Double l_subtrahendCurX=null;  Double l_subtrahendNextX=null;  Double l_subtrahendCurY=null;  Double l_subtrahendNextY=null;  double l_subtrahendMaxY=Double.NEGATIVE_INFINITY;  double l_subtrahendMinY=Double.POSITIVE_INFINITY;  if (b_impliedZeroSubtrahend) {    l_subtrahendItem=0;    l_subtrahendItemCount=2;    l_subtrahendCurX=new Double(x_dataset.getXValue(0,0));    l_subtrahendNextX=new Double(x_dataset.getXValue(0,(l_minuendItemCount - 1)));    l_subtrahendCurY=new Double(0.0);    l_subtrahendNextY=new Double(0.0);    l_subtrahendMaxY=0.0;    l_subtrahendMinY=0.0;    l_subtrahendXs.add(l_subtrahendCurX);    l_subtrahendYs.add(l_subtrahendCurY);  } else {    l_subtrahendItemCount=x_dataset.getItemCount(1);  }  boolean b_minuendDone=false;  boolean b_minuendAdvanced=true;  boolean b_minuendAtIntersect=false;  boolean b_minuendFastForward=false;  boolean b_subtrahendDone=false;  boolean b_subtrahendAdvanced=true;  boolean b_subtrahendAtIntersect=false;  boolean b_subtrahendFastForward=false;  boolean b_colinear=false;  boolean b_positive;  double l_x1=0.0, l_y1=0.0;  double l_x2=0.0, l_y2=0.0;  double l_x3=0.0, l_y3=0.0;  double l_x4=0.0, l_y4=0.0;  boolean b_fastForwardDone=false;  while (!b_fastForwardDone) {    l_x1=x_dataset.getXValue(0,l_minuendItem);    l_y1=x_dataset.getYValue(0,l_minuendItem);    l_x2=x_dataset.getXValue(0,l_minuendItem + 1);    l_y2=x_dataset.getYValue(0,l_minuendItem + 1);    l_minuendCurX=new Double(l_x1);    l_minuendCurY=new Double(l_y1);    l_minuendNextX=new Double(l_x2);    l_minuendNextY=new Double(l_y2);    if (b_impliedZeroSubtrahend) {      l_x3=l_subtrahendCurX.doubleValue();      l_y3=l_subtrahendCurY.doubleValue();      l_x4=l_subtrahendNextX.doubleValue();      l_y4=l_subtrahendNextY.doubleValue();    } else {      l_x3=x_dataset.getXValue(1,l_subtrahendItem);      l_y3=x_dataset.getYValue(1,l_subtrahendItem);      l_x4=x_dataset.getXValue(1,l_subtrahendItem + 1);      l_y4=x_dataset.getYValue(1,l_subtrahendItem + 1);      l_subtrahendCurX=new Double(l_x3);      l_subtrahendCurY=new Double(l_y3);      l_subtrahendNextX=new Double(l_x4);      l_subtrahendNextY=new Double(l_y4);    }    if (l_x2 <= l_x3) {      l_minuendItem++;      b_minuendFastForward=true;      continue;    }    if (l_x4 <= l_x1) {      l_subtrahendItem++;      b_subtrahendFastForward=true;      continue;    }    if ((l_x3 < l_x1) && (l_x1 < l_x4)) {      double l_slope=(l_y4 - l_y3) / (l_x4 - l_x3);      l_subtrahendCurX=l_minuendCurX;      l_subtrahendCurY=new Double((l_slope * l_x1) + (l_y3 - (l_slope * l_x3)));      l_subtrahendXs.add(l_subtrahendCurX);      l_subtrahendYs.add(l_subtrahendCurY);    }    if ((l_x1 < l_x3) && (l_x3 < l_x2)) {      double l_slope=(l_y2 - l_y1) / (l_x2 - l_x1);      l_minuendCurX=l_subtrahendCurX;      l_minuendCurY=new Double((l_slope * l_x3) + (l_y1 - (l_slope * l_x1)));      l_minuendXs.add(l_minuendCurX);      l_minuendYs.add(l_minuendCurY);    }    l_minuendMaxY=l_minuendCurY.doubleValue();    l_minuendMinY=l_minuendCurY.doubleValue();    l_subtrahendMaxY=l_subtrahendCurY.doubleValue();    l_subtrahendMinY=l_subtrahendCurY.doubleValue();    b_fastForwardDone=true;  }  while (!b_minuendDone && !b_subtrahendDone) {    if (!b_minuendDone && !b_minuendFastForward && b_minuendAdvanced) {      l_x1=x_dataset.getXValue(0,l_minuendItem);      l_y1=x_dataset.getYValue(0,l_minuendItem);      l_minuendCurX=new Double(l_x1);      l_minuendCurY=new Double(l_y1);      if (!b_minuendAtIntersect) {        l_minuendXs.add(l_minuendCurX);        l_minuendYs.add(l_minuendCurY);      }      l_minuendMaxY=Math.max(l_minuendMaxY,l_y1);      l_minuendMinY=Math.min(l_minuendMinY,l_y1);      l_x2=x_dataset.getXValue(0,l_minuendItem + 1);      l_y2=x_dataset.getYValue(0,l_minuendItem + 1);      l_minuendNextX=new Double(l_x2);      l_minuendNextY=new Double(l_y2);    }    if (!b_impliedZeroSubtrahend && !b_subtrahendDone && !b_subtrahendFastForward&& b_subtrahendAdvanced) {      l_x3=x_dataset.getXValue(1,l_subtrahendItem);      l_y3=x_dataset.getYValue(1,l_subtrahendItem);      l_subtrahendCurX=new Double(l_x3);      l_subtrahendCurY=new Double(l_y3);      if (!b_subtrahendAtIntersect) {        l_subtrahendXs.add(l_subtrahendCurX);        l_subtrahendYs.add(l_subtrahendCurY);      }      l_subtrahendMaxY=Math.max(l_subtrahendMaxY,l_y3);      l_subtrahendMinY=Math.min(l_subtrahendMinY,l_y3);      l_x4=x_dataset.getXValue(1,l_subtrahendItem + 1);      l_y4=x_dataset.getYValue(1,l_subtrahendItem + 1);      l_subtrahendNextX=new Double(l_x4);      l_subtrahendNextY=new Double(l_y4);    }    b_minuendFastForward=false;    b_subtrahendFastForward=false;    Double l_intersectX=null;    Double l_intersectY=null;    boolean b_intersect=false;    b_minuendAtIntersect=false;    b_subtrahendAtIntersect=false;    if ((l_x2 == l_x4) && (l_y2 == l_y4)) {      if ((l_x1 == l_x3) && (l_y1 == l_y3)) {        b_colinear=true;      } else {        l_intersectX=new Double(l_x2);        l_intersectY=new Double(l_y2);        b_intersect=true;        b_minuendAtIntersect=true;        b_subtrahendAtIntersect=true;      }    } else {      double l_denominator=((l_y4 - l_y3) * (l_x2 - l_x1)) - ((l_x4 - l_x3) * (l_y2 - l_y1));      double l_deltaY=l_y1 - l_y3;      double l_deltaX=l_x1 - l_x3;      double l_numeratorA=((l_x4 - l_x3) * l_deltaY) - ((l_y4 - l_y3) * l_deltaX);      double l_numeratorB=((l_x2 - l_x1) * l_deltaY) - ((l_y2 - l_y1) * l_deltaX);      if ((0 == l_numeratorA) && (0 == l_numeratorB) && (0 == l_denominator)) {        b_colinear=true;      } else {        if (b_colinear) {          l_minuendXs.clear();          l_minuendYs.clear();          l_subtrahendXs.clear();          l_subtrahendYs.clear();          l_polygonXs.clear();          l_polygonYs.clear();          b_colinear=false;          boolean b_useMinuend=((l_x3 <= l_x1) && (l_x1 <= l_x4));          l_polygonXs.add(b_useMinuend ? l_minuendCurX : l_subtrahendCurX);          l_polygonYs.add(b_useMinuend ? l_minuendCurY : l_subtrahendCurY);        }      }      double l_slopeA=l_numeratorA / l_denominator;      double l_slopeB=l_numeratorB / l_denominator;      boolean b_vertical=(l_x1 == l_x2) && (l_x3 == l_x4) && (l_x2 == l_x4);      if (((0 < l_slopeA) && (l_slopeA <= 1) && (0 < l_slopeB)&& (l_slopeB <= 1)) || b_vertical) {        double l_xi;        double l_yi;        if (b_vertical) {          b_colinear=false;          l_xi=l_x2;          l_yi=l_x4;        } else {          l_xi=l_x1 + (l_slopeA * (l_x2 - l_x1));          l_yi=l_y1 + (l_slopeA * (l_y2 - l_y1));        }        l_intersectX=new Double(l_xi);        l_intersectY=new Double(l_yi);        b_intersect=true;        b_minuendAtIntersect=((l_xi == l_x2) && (l_yi == l_y2));        b_subtrahendAtIntersect=((l_xi == l_x4) && (l_yi == l_y4));        l_minuendCurX=l_intersectX;        l_minuendCurY=l_intersectY;        l_subtrahendCurX=l_intersectX;        l_subtrahendCurY=l_intersectY;      }    }    if (b_intersect) {      l_polygonXs.addAll(l_minuendXs);      l_polygonYs.addAll(l_minuendYs);      l_polygonXs.add(l_intersectX);      l_polygonYs.add(l_intersectY);      Collections.reverse(l_subtrahendXs);      Collections.reverse(l_subtrahendYs);      l_polygonXs.addAll(l_subtrahendXs);      l_polygonYs.addAll(l_subtrahendYs);      b_positive=(l_subtrahendMaxY <= l_minuendMaxY) && (l_subtrahendMinY <= l_minuendMinY);      createPolygon(x_graphics,x_dataArea,x_plot,x_domainAxis,x_rangeAxis,b_positive,l_polygonXs,l_polygonYs);      l_minuendXs.clear();      l_minuendYs.clear();      l_subtrahendXs.clear();      l_subtrahendYs.clear();      l_polygonXs.clear();      l_polygonYs.clear();      double l_y=l_intersectY.doubleValue();      l_minuendMaxY=l_y;      l_subtrahendMaxY=l_y;      l_minuendMinY=l_y;      l_subtrahendMinY=l_y;      l_polygonXs.add(l_intersectX);      l_polygonYs.add(l_intersectY);    }    if (l_x2 <= l_x4) {      l_minuendItem++;      b_minuendAdvanced=true;    } else {      b_minuendAdvanced=false;    }    if (l_x4 <= l_x2) {      l_subtrahendItem++;      b_subtrahendAdvanced=true;    } else {      b_subtrahendAdvanced=false;    }    b_minuendDone=(l_minuendItem == (l_minuendItemCount - 1));    b_subtrahendDone=(l_subtrahendItem == (l_subtrahendItemCount - 1));  }  if (b_minuendDone && (l_x3 < l_x2) && (l_x2 < l_x4)) {    double l_slope=(l_y4 - l_y3) / (l_x4 - l_x3);    l_subtrahendNextX=l_minuendNextX;    l_subtrahendNextY=new Double((l_slope * l_x2) + (l_y3 - (l_slope * l_x3)));  }  if (b_subtrahendDone && (l_x1 < l_x4) && (l_x4 < l_x2)) {    double l_slope=(l_y2 - l_y1) / (l_x2 - l_x1);    l_minuendNextX=l_subtrahendNextX;    l_minuendNextY=new Double((l_slope * l_x4) + (l_y1 - (l_slope * l_x1)));  }  l_minuendMaxY=Math.max(l_minuendMaxY,l_minuendNextY.doubleValue());  l_subtrahendMaxY=Math.max(l_subtrahendMaxY,l_subtrahendNextY.doubleValue());  l_minuendMinY=Math.min(l_minuendMinY,l_minuendNextY.doubleValue());  l_subtrahendMinY=Math.min(l_subtrahendMinY,l_subtrahendNextY.doubleValue());  l_minuendXs.add(l_minuendNextX);  l_minuendYs.add(l_minuendNextY);  l_subtrahendXs.add(l_subtrahendNextX);  l_subtrahendYs.add(l_subtrahendNextY);  l_polygonXs.addAll(l_minuendXs);  l_polygonYs.addAll(l_minuendYs);  Collections.reverse(l_subtrahendXs);  Collections.reverse(l_subtrahendYs);  l_polygonXs.addAll(l_subtrahendXs);  l_polygonYs.addAll(l_subtrahendYs);  b_positive=(l_subtrahendMaxY <= l_minuendMaxY) && (l_subtrahendMinY <= l_minuendMinY);  createPolygon(x_graphics,x_dataArea,x_plot,x_domainAxis,x_rangeAxis,b_positive,l_polygonXs,l_polygonYs);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (abort()) {    return;  }  WalletData perWalletModelData=super.bitcoinController.getModel().getActivePerWalletModelData();  boolean encryptNewKeys=false;  if (super.bitcoinController.getModel().getActiveWallet() != null && super.bitcoinController.getModel().getActiveWallet().getEncryptionType() == EncryptionType.ENCRYPTED_SCRYPT_AES) {    if (walletPassword.getPassword() == null || walletPassword.getPassword().length == 0) {      createNewReceivingAddressPanel.setMessageText(controller.getLocaliser().getString("showExportPrivateKeysAction.youMustEnterTheWalletPassword"));      return;    }    encryptNewKeys=true;    try {      if (!super.bitcoinController.getModel().getActiveWallet().checkPassword(CharBuffer.wrap(walletPassword.getPassword()))) {        createNewReceivingAddressPanel.setMessageText(controller.getLocaliser().getString("createNewReceivingAddressSubmitAction.passwordIsIncorrect"));        return;      }    } catch (    KeyCrypterException ede) {      log.debug(ede.getClass().getCanonicalName() + " " + ede.getMessage());      createNewReceivingAddressPanel.setMessageText(controller.getLocaliser().getString("createNewReceivingAddressSubmitAction.passwordIsIncorrect"));      return;    }  }  WalletInfoData walletInfo=perWalletModelData.getWalletInfo();  if (walletInfo == null) {    walletInfo=new WalletInfoData(perWalletModelData.getWalletFilename(),perWalletModelData.getWallet(),MultiBitWalletVersion.PROTOBUF_ENCRYPTED);    perWalletModelData.setWalletInfo(walletInfo);  }  if (!perWalletModelData.isBusy()) {    perWalletModelData.setBusy(true);    perWalletModelData.setBusyTaskKey("createNewReceivingAddressSubmitAction.tooltip");    createNewReceivingAddressPanel.getCancelButton().setEnabled(false);    int numberOfAddressesToCreate=createNewReceivingAddressPanel.getNumberOfAddressesToCreate();    String walletDescription=super.bitcoinController.getModel().getActiveWalletWalletInfo().getProperty(WalletInfoData.DESCRIPTION_PROPERTY);    String shortMessage=controller.getLocaliser().getString("createNewReceivingAddressSubmitAction.creatingShort",new Object[]{numberOfAddressesToCreate});    String longMessage=controller.getLocaliser().getString("createNewReceivingAddressSubmitAction.creatingLong",new Object[]{numberOfAddressesToCreate,walletDescription});    createNewReceivingAddressPanel.setMessageText(shortMessage);    MessageManager.INSTANCE.addMessage(new Message(" "));    Message logMessage=new Message(longMessage);    logMessage.setShowInStatusBar(false);    MessageManager.INSTANCE.addMessage(logMessage);    super.bitcoinController.fireWalletBusyChange(true);    createNewReceivingAddressesInBackground(createNewReceivingAddressPanel.getNumberOfAddressesToCreate(),encryptNewKeys,CharBuffer.wrap(walletPassword.getPassword()),this);  }}  }
class C{  private void deleteJSONManifest(String manifestPath) throws IOException {  logger.info("Deleting " + manifestPath);  File file=new File(manifestPath);  if (file.exists())   if (!file.delete())   throw new IOException("Unable to delete " + manifestPath);}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  protected Node inlineExternal(Document doc,ParsedURL urldata,Node eold){  File in=new File(urldata.getPath());  if (!in.exists()) {    LoggingUtil.warning("Referencing non-existant file: " + urldata.toString());    return null;  }  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    os.write(SVGSyntax.DATA_PROTOCOL_PNG_PREFIX.getBytes());    Base64EncoderStream encoder=new Base64EncoderStream(os);    FileInputStream instream=new FileInputStream(in);    byte[] buf=new byte[4096];    while (true) {      int read=instream.read(buf,0,buf.length);      if (read <= 0) {        break;      }      encoder.write(buf,0,read);    }    instream.close();    encoder.close();  } catch (  IOException e) {    LoggingUtil.exception("Exception serializing image to png",e);    return null;  }  Element i=(Element)super.cloneNode(doc,eold);  i.setAttributeNS(SVGConstants.XLINK_NAMESPACE_URI,SVGConstants.XLINK_HREF_ATTRIBUTE,os.toString().replaceAll("\\s*[\\r\\n]+\\s*",""));  return i;}  }
class C{  private UILib(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.408 -0500",hash_original_method="DB70AA378C6CA75A97E2143D1A039441",hash_generated_method="3A1052EDADDDC32BAF9C16CC5ECEDA67") public static ETC1Texture createTexture(InputStream input) throws IOException {  int width=0;  int height=0;  byte[] ioBuffer=new byte[4096];{    if (input.read(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE) != ETC1.ETC_PKM_HEADER_SIZE) {      throw new IOException("Unable to read PKM file header.");    }    ByteBuffer headerBuffer=ByteBuffer.allocateDirect(ETC1.ETC_PKM_HEADER_SIZE).order(ByteOrder.nativeOrder());    headerBuffer.put(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE).position(0);    if (!ETC1.isValid(headerBuffer)) {      throw new IOException("Not a PKM file.");    }    width=ETC1.getWidth(headerBuffer);    height=ETC1.getHeight(headerBuffer);  }  int encodedSize=ETC1.getEncodedDataSize(width,height);  ByteBuffer dataBuffer=ByteBuffer.allocateDirect(encodedSize).order(ByteOrder.nativeOrder());  for (int i=0; i < encodedSize; ) {    int chunkSize=Math.min(ioBuffer.length,encodedSize - i);    if (input.read(ioBuffer,0,chunkSize) != chunkSize) {      throw new IOException("Unable to read PKM file data.");    }    dataBuffer.put(ioBuffer,0,chunkSize);    i+=chunkSize;  }  dataBuffer.position(0);  return new ETC1Texture(width,height,dataBuffer);}  }
class C{  public BitcoinURI(String uri) throws BitcoinURIParseException {  this(null,uri);}  }
class C{  public boolean checkForStringAttributes(){  return checkForAttributeType(Attribute.STRING);}  }
class C{  @Nullable public Date convert(@Nullable Date srcDate,TimeZone srcTimeZone,TimeZone dstTimeZone){  if (srcDate == null)   return null;  Preconditions.checkNotNullArgument(srcTimeZone,"srcTimeZone is null");  Preconditions.checkNotNullArgument(dstTimeZone,"dstTimeZone is null");  int srcOffset=srcTimeZone.getOffset(srcDate.getTime());  int dstOffset=dstTimeZone.getOffset(srcDate.getTime());  return new Date(srcDate.getTime() - srcOffset + dstOffset);}  }
class C{  private void removeTagArticleRelations(final String articleId,final String... tagIds) throws JSONException, RepositoryException {  final List<String> tagIdList=Arrays.asList(tagIds);  final List<JSONObject> tagArticleRelations=tagArticleRepository.getByArticleId(articleId);  for (int i=0; i < tagArticleRelations.size(); i++) {    final JSONObject tagArticleRelation=tagArticleRelations.get(i);    String relationId;    if (tagIdList.isEmpty()) {      relationId=tagArticleRelation.getString(Keys.OBJECT_ID);      tagArticleRepository.remove(relationId);    } else     if (tagIdList.contains(tagArticleRelation.getString(Tag.TAG + "_" + Keys.OBJECT_ID))) {      relationId=tagArticleRelation.getString(Keys.OBJECT_ID);      tagArticleRepository.remove(relationId);    }  }}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(PlusSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/?api=plus " + "into plus-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,Collections.singleton(PlusScopes.PLUS_ME)).setDataStoreFactory(dataStoreFactory).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  public Expression compile(int opPos) throws TransformerException {  int op=getOp(opPos);  Expression expr=null;switch (op) {case OpCodes.OP_XPATH:    expr=compile(opPos + 2);  break;case OpCodes.OP_OR:expr=or(opPos);break;case OpCodes.OP_AND:expr=and(opPos);break;case OpCodes.OP_NOTEQUALS:expr=notequals(opPos);break;case OpCodes.OP_EQUALS:expr=equals(opPos);break;case OpCodes.OP_LTE:expr=lte(opPos);break;case OpCodes.OP_LT:expr=lt(opPos);break;case OpCodes.OP_GTE:expr=gte(opPos);break;case OpCodes.OP_GT:expr=gt(opPos);break;case OpCodes.OP_PLUS:expr=plus(opPos);break;case OpCodes.OP_MINUS:expr=minus(opPos);break;case OpCodes.OP_MULT:expr=mult(opPos);break;case OpCodes.OP_DIV:expr=div(opPos);break;case OpCodes.OP_MOD:expr=mod(opPos);break;case OpCodes.OP_NEG:expr=neg(opPos);break;case OpCodes.OP_STRING:expr=string(opPos);break;case OpCodes.OP_BOOL:expr=bool(opPos);break;case OpCodes.OP_NUMBER:expr=number(opPos);break;case OpCodes.OP_UNION:expr=union(opPos);break;case OpCodes.OP_LITERAL:expr=literal(opPos);break;case OpCodes.OP_VARIABLE:expr=variable(opPos);break;case OpCodes.OP_GROUP:expr=group(opPos);break;case OpCodes.OP_NUMBERLIT:expr=numberlit(opPos);break;case OpCodes.OP_ARGUMENT:expr=arg(opPos);break;case OpCodes.OP_EXTFUNCTION:expr=compileExtension(opPos);break;case OpCodes.OP_FUNCTION:expr=compileFunction(opPos);break;case OpCodes.OP_LOCATIONPATH:expr=locationPath(opPos);break;case OpCodes.OP_PREDICATE:expr=null;break;case OpCodes.OP_MATCHPATTERN:expr=matchPattern(opPos + 2);break;case OpCodes.OP_LOCATIONPATHPATTERN:expr=locationPathPattern(opPos);break;case OpCodes.OP_QUO:error(XPATHErrorResources.ER_UNKNOWN_OPCODE,new Object[]{"quo"});break;default :error(XPATHErrorResources.ER_UNKNOWN_OPCODE,new Object[]{Integer.toString(getOp(opPos))});}return expr;}  }
class C{  public MyArrayList(){}  }
class C{  public boolean shouldConnectTo(DiscoveryNode otherNode){  if (clientNode() && otherNode.clientNode()) {    return false;  }  return true;}  }
class C{  @Override public void refresh(){  googleMap.setZoom(googleMap.getZoom() + 1);  googleMap.setZoom(googleMap.getZoom() - 1);}  }
class C{  @Override protected void visit(final Object obj){  set[slot]=(ITuple<?>)(obj == NULL_VALUE ? null : obj);}  }
class C{  @Override public List<String> hmget(final String key,final String... fields){  checkIsInMultiOrPipeline();  client.hmget(key,fields);  return client.getMultiBulkReply();}  }
class C{  public Builder baseModelId(String baseModelId){  this.baseModelId=baseModelId;  return this;}  }
class C{  @SideOnly(Side.CLIENT) public void changeYStart(int yStart){  this.unchangedYStart=yStart;}  }
class C{  public void assertNotEqual(short expected,short actual,String errorMessage){  TestUtils.assertNotEqual(expected,actual,errorMessage);}  }
class C{  public static boolean deleteRecursive(File directory){  String canonicalParent;  try {    canonicalParent=getCanonicalPath(directory);  } catch (  IOException ioe) {    return false;  }  if (!directory.isDirectory())   return directory.delete();  File[] files=directory.listFiles();  for (int i=0; i < files.length; i++) {    try {      if (!getCanonicalPath(files[i]).startsWith(canonicalParent))       continue;    } catch (    IOException ioe) {      return false;    }    if (!deleteRecursive(files[i]))     return false;  }  return directory.delete();}  }
class C{  public TransformVariablesBrs(BBOBFunction function){  super(function);}  }
class C{  public static final String genPreferenceFilename(Context context){  return String.format("%s_%s",context.getString(R.string.afc_lib_name),_Uid);}  }
class C{  public String EdgesToString(){  String s="";  int ne=0;  for (int i=0; i < this.nNodes; i++) {    for (int j=0; j < this.nNodes; j++) {      double e=this.getEdges().getDoubleValue(i,j);      if (e != 0.0) {        s=s + i + "  "+ j+ " \t"+ e+ "\n";        ne++;      }    }  }  return s;}  }
class C{  private void destroyHandles() throws ResourceException {  if (ActiveMQRAManagedConnection.trace) {    ActiveMQRALogger.LOGGER.trace("destroyHandles()");  }  try {    if (connection != null) {      connection.stop();    }  } catch (  Throwable t) {    ActiveMQRALogger.LOGGER.trace("Ignored error stopping connection",t);  }  for (  ActiveMQRASession session : handles) {    session.destroy();  }  handles.clear();}  }
class C{  public void processQuoteLikeStringOpener(IElementType tokenType){  allowSharpQuote=true;  isEscaped=false;  pushState();  if (tokenType == RESERVED_Q) {    yybegin(LEX_QUOTE_LIKE_OPENER_Q);  } else   if (tokenType == RESERVED_QQ) {    yybegin(LEX_QUOTE_LIKE_OPENER_QQ);  } else   if (tokenType == RESERVED_QX) {    yybegin(LEX_QUOTE_LIKE_OPENER_QX);  } else   if (tokenType == RESERVED_QW) {    yybegin(LEX_QUOTE_LIKE_OPENER_QW);  } else {    throw new RuntimeException("Unable to switch state by token " + tokenType);  }}  }
class C{  public void removePanListener(PanListener listener){  mTouchHandler.removePanListener(listener);}  }
class C{  public void write(ClassFile classFile,OutputStream s) throws IOException {  this.classFile=classFile;  out.reset();  write();  out.writeTo(s);}  }
class C{  @CheckReturnValue public <T>Subject4<A,B,C,T> asWithPrecursor(Function3<A,B,C,T> mapping,Function<T,String> typeToString){  final Shrink<Tuple4<A,B,C,T>> shrink=null;  final AsString<Tuple4<A,B,C,T>> desc=null;  final Source<Tuple4<A,B,C,T>> gen=Source.of(generatePrecursorValueTuple(mapping)).withShrinker(shrink).describedAs(desc);  return new PrecursorTheoryBuilder3<A,B,C,T>(this.state,gen,this.assumptions);}  }
class C{  private void initializeMessagesAndWake(Bundle b,boolean newIntent){  SmsMmsMessage message=new SmsMmsMessage(getApplicationContext(),b);  message.locateMessageId();  if (newIntent) {    smsPopupPager.addMessage(message);    wakeApp();  } else {    if (message != null) {      new LoadUnreadMessagesAsyncTask().execute(message);    }  }}  }
class C{  public static boolean isConditionalComment(@NotNull PsiElement host){  return parseConditionalCommentBoundaries(host) != null;}  }
class C{  protected void updateFunctionGroup3(int fns){  this.f9=((fns & CbusConstants.CBUS_F9) == CbusConstants.CBUS_F9);  this.f10=((fns & CbusConstants.CBUS_F10) == CbusConstants.CBUS_F10);  this.f11=((fns & CbusConstants.CBUS_F11) == CbusConstants.CBUS_F11);  this.f12=((fns & CbusConstants.CBUS_F12) == CbusConstants.CBUS_F12);}  }
class C{  public OrderedThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,IoEventQueueHandler eventQueueHandler){  this(corePoolSize,maximumPoolSize,keepAliveTime,unit,Executors.defaultThreadFactory(),eventQueueHandler);}  }
class C{  @Override public Iterator<List<T>> iterator(){  return new SimpleCombinationIterator<T>(this);}  }
class C{  public double[] evaluateModel(Classifier classifier,Instances data,Object... forPredictionsPrinting) throws Exception {  AbstractOutput classificationOutput=null;  double predictions[]=new double[data.numInstances()];  if (forPredictionsPrinting.length > 0) {    classificationOutput=(AbstractOutput)forPredictionsPrinting[0];  }  if (classifier instanceof BatchPredictor) {    Instances dataPred=new Instances(data);    for (int i=0; i < data.numInstances(); i++) {      dataPred.instance(i).setClassMissing();    }    double[][] preds=((BatchPredictor)classifier).distributionsForInstances(dataPred);    for (int i=0; i < data.numInstances(); i++) {      double[] p=preds[i];      predictions[i]=evaluationForSingleInstance(p,data.instance(i),true);      if (classificationOutput != null) {        classificationOutput.printClassification(p,data.instance(i),i);      }    }  } else {    for (int i=0; i < data.numInstances(); i++) {      predictions[i]=evaluateModelOnceAndRecordPrediction(classifier,data.instance(i));      if (classificationOutput != null) {        classificationOutput.printClassification(classifier,data.instance(i),i);      }    }  }  return predictions;}  }
class C{  protected void drawPath(GeneralPath path,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){  if (fillColor != null || fillPaint != null) {    if (shadow) {      g.setColor(mxConstants.SHADOW_COLOR);      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);      g.fill(path);      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);    }    if (fillPaint != null) {      g.setPaint(fillPaint);    } else {      g.setColor(fillColor);    }    g.fill(path);  }  if (penColor != null) {    g.setColor(penColor);    g.draw(path);  }}  }
class C{  ForwardBuilder(BuilderParams buildParams,boolean searchAllCertStores){  super(buildParams);  trustAnchors=buildParams.trustAnchors();  trustedCerts=new HashSet<X509Certificate>(trustAnchors.size());  trustedSubjectDNs=new HashSet<X500Principal>(trustAnchors.size());  for (  TrustAnchor anchor : trustAnchors) {    X509Certificate trustedCert=anchor.getTrustedCert();    if (trustedCert != null) {      trustedCerts.add(trustedCert);      trustedSubjectDNs.add(trustedCert.getSubjectX500Principal());    } else {      trustedSubjectDNs.add(anchor.getCA());    }  }  this.searchAllCertStores=searchAllCertStores;}  }
class C{  public void addLowerLineSegment(ILineSegment lower){  if (lower.getEnd().equals(point)) {    lowerSegments.append(lower);  } else {    throw new IllegalArgumentException("Improper attempt to add line segment whose lower point does not match EventPoint.");  }}  }
class C{  private void handleHtmlMakeNotebook(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String note=requestAndResponse.request.getParameter(DbLogic.Constants.note);  final boolean isPublic=getCheckBoxValue(requestAndResponse,"isPublic");  final String csrft=requestAndResponse.getParameter("csrft");  if (isTheCsrftWrong(requestAndResponse,csrft)) {    requestAndResponse.response.sendRedirect("/couldNotCreateNote");    return;  }  String noteId=null;  final Errors errors=new Errors();  try {    final Long time=new Long(System.currentTimeMillis());    User user=null;    final String userId=getEffectiveUserId(requestAndResponse);    if (userId == null && allowSaveIfNotSignedIn) {      user=createAnonUser();      if (user == null) {        requestAndResponse.response.sendRedirect("/couldNotCreateNote");        return;      } else {        mapSessionToUser(requestAndResponse,user.getId());      }    } else {      user=dbLogic.getUserById(userId);      if (user != null && user.getIsAccountClosed()) {        user=null;      }    }    if (user == null) {      requestAndResponse.response.sendRedirect("/couldNotCreateNote");      return;    } else     if (user.getIsAccountClosed()) {      requestAndResponse.print(servletText.errorAccountIsClosed());      return;    }    if (!EntryAttributeValidator.isNotebookTitleValid(note)) {      returnJson400(requestAndResponse,servletText.errorNoteIsInvalid());      return;    }    boolean addSampleNote=!doesUserHaveAnyNotebooks(requestAndResponse);    final Entry entry=dbLogic.createEntryNoteBook(user,note,time,null,null,false,false,isPublic,isUserAnAdmin(requestAndResponse),addSampleNote,errors);    if (entry == null) {      requestAndResponse.response.sendRedirect("/couldNotCreateNote");      return;    }    noteId=entry.getId();    dbLogic.commit();  } catch (  final PersistenceException e) {    requestAndResponse.response.sendRedirect("/couldNotCreateNote");    return;  }  requestAndResponse.response.sendRedirect("/notebook/" + noteId);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String profile=getString(stack);  return (Permissions.hasPermission(Permissions.PERMISSION_SECURITY,stack.getUIMgr()) && Permissions.removeSecurityProfile(profile)) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public Builder userCredentials(String username,String password){  this.userCredentials=new UserCredentials(username,password);  return this;}  }
class C{  public void modifyParameters(EvolutionState state,ParameterDatabase database,int run,Individual metaIndividual){  if (!(metaIndividual instanceof DoubleVectorIndividual))   state.output.fatal("Meta-individual is not a DoubleVectorIndividual.");  DoubleVectorIndividual individual=(DoubleVectorIndividual)metaIndividual;  FloatVectorSpecies species=(FloatVectorSpecies)individual.species;  double[] genome=individual.genome;  Parameter pb=base.push(P_PARAM);  for (int i=0; i < genome.length; i++) {    Parameter p=pb.push("" + i);    String param=state.parameters.getString(p,null);    if (param == null)     state.output.fatal("Meta parameter number " + i + " missing.",p);    database.set(new Parameter(param),"" + map(state,genome,species,i));  }}  }
class C{  public ReceiptHeader createReceiptHeaderWithInstrument(String receiptNum,char receiptType,String statusCode,String refNum,InstrumentType instrumentType,String instrumentNum,Double instrumentAmount,Date instrumentDate,String instrumentStatusCode,String glCode,String functionName,String userName) throws NumberFormatException {  return createReceiptHeaderWithInstrument(receiptNum,receiptType,statusCode,refNum,instrumentType,instrumentNum,instrumentAmount,instrumentDate,instrumentStatusCode,glCode,functionName,userName,"testCounter");}  }
class C{  @DSComment("get string associated resolution") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:56.595 -0500",hash_original_method="A33400D9D27D1859CAE2B97E545C2635",hash_generated_method="42C3E3BCE3653378560C9036E33DF328") public CharSequence loadLabel(PackageManager pm){  if (nonLocalizedLabel != null) {    return nonLocalizedLabel;  }  CharSequence label;  if (resolvePackageName != null && labelRes != 0) {    label=pm.getText(resolvePackageName,labelRes,null);    if (label != null) {      return label.toString().trim();    }  }  ComponentInfo ci=activityInfo != null ? activityInfo : serviceInfo;  ApplicationInfo ai=ci.applicationInfo;  if (labelRes != 0) {    label=pm.getText(ci.packageName,labelRes,ai);    if (label != null) {      return label.toString().trim();    }  }  CharSequence data=ci.loadLabel(pm);  if (data != null)   data=data.toString().trim();  return data;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  String attrName;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.getNamedItemNS("http://www.nist.gov","domestic");  attrName=attribute.getNodeName();  assertEquals("namednodemapgetnameditemns02","emp:domestic",attrName);}  }
class C{  public void render(int text_fill_type,Graphics2D g2,float scaling,boolean isFormGlyph){}  }
class C{  @Override public void onMessage(Message message){  if (ActiveMQRAMessageListener.trace) {    ActiveMQRALogger.LOGGER.trace("onMessage(" + message + ")");  }  message=consumer.wrapMessage(message);  listener.onMessage(message);}  }
class C{  public void upsertDBCredential(DBCredential cred){  if (cred == null)   return;  if (this.credCache.containsKey(cred.getAppUser() + "||" + cred.getDbGroupName()))   this.credCache.remove(cred.getAppUser() + "||" + cred.getDbGroupName());  String sql1="update " + CRED_TABLENAME + " set username=?,credential=?,verified=1 where owner=? and dbgroupname=?";  String sql2="insert into " + CRED_TABLENAME + " (owner,dbgroupname,username,credential,verified) values(?,?,?,?,1)";  String pString=cred.getAppUser() == null ? "NULL" : cred.getAppUser();  pString+="::" + cred.getDbGroupName() + "::"+ cred.getUsername()+ "::"+ cred.getPassword()+ "::"+ Math.random();  Connection conn=null;  PreparedStatement pstmt=null;  boolean findOne=false;  try {    conn=getConnection();    findOne=this.retrieveDBCredential(conn,cred.getAppUser(),cred.getDbGroupName()) != null;    if (findOne) {      pstmt=conn.prepareStatement(sql1);      pstmt.setString(1,cred.getUsername());      pstmt.setString(2,keyTool.encrypt(pString));      pstmt.setString(3,cred.getAppUser());      pstmt.setString(4,cred.getDbGroupName().toLowerCase());      pstmt.execute();      conn.commit();      pstmt.close();      pstmt=null;    } else {      pstmt=conn.prepareStatement(sql2);      pstmt.setString(1,cred.getAppUser());      pstmt.setString(2,cred.getDbGroupName().toLowerCase());      pstmt.setString(3,cred.getUsername());      pstmt.setString(4,keyTool.encrypt(pString));      pstmt.execute();      conn.commit();      pstmt.close();      pstmt=null;    }  } catch (  Exception ex) {    if (conn != null)     try {      conn.rollback();    } catch (    Exception iex) {    }    throw new RuntimeException(ex);  } finally {    DBUtils.close(pstmt);    DBUtils.close(conn);  }}  }
class C{  public Wildcards wildcard(Wildcards.Flag... setFlags){  int flags=this.flags;  for (  Wildcards.Flag flag : setFlags)   flags=flag.wildcard(flags);  if (flags == this.flags)   return this; else   return new Wildcards(flags);}  }
class C{  EdgeMap<Block> findLoops(Deque<Block> code,Map<Block,Block> idom,SetMap<Block,Edge> pred){  EdgeMap<Block> loops=new EdgeMap<Block>();  for (  Block b : code)   for (  Edge s : b.succ())   if (isLoop(s,idom)) {    verboseStatus("backedge " + s);    Block h=s.to;    Set<Block> loop=loops.get(h);    Set<Block> work=new TreeSet<Block>();    for (    Edge p : pred.get(h)) {      if (isLoop(p,idom) && !loop.contains(p.from) && p.from != h) {        loop.add(p.from);        work.add(p.from);      }    }    while (!work.isEmpty()) {      Block x=getBlock(work);      for (      Edge p : pred.get(x)) {        if (p.from != h && !loop.contains(p.from)) {          loop.add(p.from);          work.add(p.from);        }      }    }  }  return loops;}  }
class C{  public GridCacheVersion nextForLoad(GridCacheVersion ver){  return next(ver.topologyVersion(),false,true,dataCenterId);}  }
class C{  protected List<QoSSentinel> createQoSSentinels(JsonObject qosSettings){  List<QoSSentinel> sentinels=new ArrayList<>();  if (qosSettings.containsKey(JSON_FIELD_SENTINELS)) {    JsonObject jsonSentinels=qosSettings.getJsonObject(JSON_FIELD_SENTINELS);    for (    String sentinelName : jsonSentinels.fieldNames()) {      log.debug("Creating a new QoS sentinel object for metric: " + sentinelName);      JsonObject jsonSentinel=jsonSentinels.getJsonObject(sentinelName);      QoSSentinel sentinel=new QoSSentinel(sentinelName);      QoSSentinel oldSentinel=getOldSentinel(sentinelName);      if (oldSentinel != null) {        sentinel.setLowestPercentileValue(oldSentinel.getLowestPercentileValue());      }      if (jsonSentinel.containsKey("percentile")) {        sentinel.setPercentile(jsonSentinel.getInteger("percentile"));      }      sentinels.add(sentinel);    }  }  return sentinels;}  }
class C{  protected ShoppingCartItemGroup(long groupNumber,String groupName,ShoppingCartItemGroup parentGroup){  this(UtilFormatOut.formatPaddedNumber(groupNumber,2),groupName,parentGroup);}  }
class C{  protected void doFloodBDDP(DatapathId pinSwitch,OFPacketIn pi,FloodlightContext cntx){  TopologyInstance ti=getCurrentInstance(false);  Set<DatapathId> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);  if (switches == null) {    switches=new HashSet<DatapathId>();    switches.add(pinSwitch);  }  for (  DatapathId sid : switches) {    IOFSwitch sw=switchService.getSwitch(sid);    if (sw == null)     continue;    Collection<OFPort> enabledPorts=sw.getEnabledPortNumbers();    if (enabledPorts == null)     continue;    Set<OFPort> ports=new HashSet<OFPort>();    ports.addAll(enabledPorts);    Set<OFPort> portsKnownToTopo=ti.getPortsWithLinks(sid);    if (portsKnownToTopo != null) {      for (      OFPort p : portsKnownToTopo) {        NodePortTuple npt=new NodePortTuple(sid,p);        if (ti.isBroadcastDomainPort(npt) == false) {          ports.remove(p);        }      }    }    Set<OFPort> portsToEliminate=getPortsToEliminateForBDDP(sid);    if (portsToEliminate != null) {      ports.removeAll(portsToEliminate);    }    if (pinSwitch == sid) {      ports.remove((pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT)));    }    doMultiActionPacketOut(pi.getData(),sw,ports,cntx);  }}  }
class C{  public boolean processAgentEvent(Event e){  ((DistAnalysisTrip)this.trips.getFirst()).processAgentEvent(e);  return ((DistAnalysisTrip)this.trips.getFirst()).isFinished();}  }
class C{  public ResourceNode(String nodeName,Object object,String eTag){  this(nodeName,object,eTag,"");}  }
class C{  private static boolean rectEquals(Rect r,int left,int top,int right,int bottom){  return !(r.left != left || r.top != top || r.right != right || r.bottom != bottom);}  }
class C{  public RecordBuffer<R> remove(int... itemsToRemoveSorted){  return remove(Ints.asList(itemsToRemoveSorted));}  }
class C{  public void stepCompleted(StepEvent event){synchronized (sync) {    nSteps++;  }  println("Got StepEvent " + nSteps + " at line "+ event.location().method()+ ":"+ event.location().lineNumber());  if (nSteps == 1) {    timerThread.start();  }}  }
class C{  public boolean addAll(Collection<? extends E> c){  hashCodeUpToDate=false;  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacityInternal(size + numNew);  System.arraycopy(a,0,elementData,size,numNew);  size+=numNew;  return numNew != 0;}  }
class C{  public NotificationChain basicSetTitle(TagTitle newTitle,NotificationChain msgs){  TagTitle oldTitle=title;  title=newTitle;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,DomPackage.INLINE_TAG__TITLE,oldTitle,newTitle);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void init(ModeledAuthenticatedUser currentUser,ActiveConnectionRecord activeConnectionRecord,boolean includeSensitiveInformation){  super.init(currentUser);  this.connectionRecord=activeConnectionRecord;  this.connection=activeConnectionRecord.getConnection();  this.sharingProfileIdentifier=activeConnectionRecord.getSharingProfileIdentifier();  this.identifier=activeConnectionRecord.getUUID().toString();  this.startDate=activeConnectionRecord.getStartDate();  if (includeSensitiveInformation) {    this.remoteHost=activeConnectionRecord.getRemoteHost();    this.tunnel=activeConnectionRecord.getTunnel();    this.username=activeConnectionRecord.getUsername();  }}  }
class C{  public Vertex discover(Vertex source,Vertex vertex,Vertex vertex2,Vertex vertex3,Vertex vertex4,Vertex vertex5){  return discover(true,true,null,vertex,vertex2,vertex3,vertex4,vertex5);}  }
class C{  public FinnishLightStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void unsetParamValue(){  this.paramValue=null;}  }
class C{  protected void update(boolean applyConstraints){  Vec3D delta=b.sub(a);  float dist=delta.magnitude() + EPS;  float normDistStrength=(dist - restLength) / (dist * (a.invWeight + b.invWeight)) * strength;  if (!a.isLocked && !isALocked) {    a.addSelf(delta.scale(normDistStrength * a.invWeight));    if (applyConstraints) {      a.applyConstraints();    }  }  if (!b.isLocked && !isBLocked) {    b.addSelf(delta.scale(-normDistStrength * b.invWeight));    if (applyConstraints) {      b.applyConstraints();    }  }}  }
class C{  @Override @CallSuper public void onActionStateChanged(int position,int actionState){  mActionState=actionState;  alreadySelected=mAdapter.isSelected(position);  if (FlexibleAdapter.DEBUG)   Log.v(TAG,"onActionStateChanged position=" + position + " mode="+ mAdapter.getMode()+ " actionState="+ (actionState == ItemTouchHelper.ACTION_STATE_SWIPE ? "Swipe(1)" : "Drag(2)"));  if (actionState == ItemTouchHelper.ACTION_STATE_DRAG) {    if (!alreadySelected) {      if (mLongClickSkipped || mAdapter.getMode() == SelectableAdapter.MODE_MULTI) {        if ((shouldAddSelectionInActionMode() || mAdapter.getMode() != SelectableAdapter.MODE_MULTI) && mAdapter.mItemLongClickListener != null && mAdapter.isSelectable(position)) {          mAdapter.mItemLongClickListener.onItemLongClick(position);          alreadySelected=true;        }      }      if (!alreadySelected) {        mAdapter.toggleSelection(position);      }    }    if (!itemView.isActivated()) {      toggleActivation();    }  } else   if (actionState == ItemTouchHelper.ACTION_STATE_SWIPE && shouldActivateViewWhileSwiping() && !alreadySelected) {    mAdapter.toggleSelection(position);    toggleActivation();  }}  }
class C{  @Override protected void shutdownInput() throws IOException {  shutdownInput=true;  try {    Libcore.os.shutdown(fd,SHUT_RD);  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsSocketException();  }}  }
class C{  public RainbowTest(String name){  super(name);}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  @Override public void updateBinaryStream(int columnIndex,InputStream x,int length) throws SQLException {  updateBinaryStream(columnIndex,x,(long)length);}  }
class C{  public static boolean endsWithIgnoreCase(String src,String subS){  String sub=subS.toLowerCase();  int sublen=sub.length();  int j=0;  int i=src.length() - sublen;  if (i < 0) {    return false;  }  while (j < sublen) {    char source=Character.toLowerCase(src.charAt(i));    if (sub.charAt(j) != source) {      return false;    }    j++;    i++;  }  return true;}  }
class C{  public void testSerialization() throws Exception {  DoubleAdder x=new DoubleAdder();  DoubleAdder y=serialClone(x);  assertNotSame(x,y);  x.add(-22.0);  DoubleAdder z=serialClone(x);  assertEquals(-22.0,x.sum());  assertEquals(0.0,y.sum());  assertEquals(-22.0,z.sum());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(localName01.class,args);}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  public Object key(){  int dr=+1;  int dc=+1;  int offRL=+1;  int offRH=+2;  int offCL=+1;  int offCH=+2;  boolean rFirst=true;  int d=board[0][0];  if (board[0][MaxC] < d) {    dr=+1;    dc=-1;    offCL=2;    offCH=1;    d=board[0][MaxC];    rFirst=false;  }  if (board[MaxR][MaxC] < d) {    dr=-1;    dc=-1;    offCL=2;    offCH=1;    offRL=2;    offRH=1;    d=board[MaxR][MaxC];    rFirst=true;  }  if (board[MaxR][0] < d) {    dr=-1;    dc=+1;    offRL=2;    offRH=1;    d=board[MaxR][0];    rFirst=false;  }  StringBuilder sb=new StringBuilder(10);  if (rFirst) {    for (int r=-dr + offRL; dr * r <= dr + offRH; r+=dr) {      for (int c=-dc + offCL; dc * c <= dc + offCH; c+=dc) {        sb.append(board[r][c]);      }    }  } else {    for (int c=-dc + offCL; dc * c <= dc + offCH; c+=dc) {      for (int r=-dr + offRL; dr * r <= dr + offRH; r+=dr) {        sb.append(board[r][c]);      }    }  }  return sb.toString();}  }
class C{  public static String seconds2HH_mm_ss(long seconds){  long h=0;  long m=0;  long s=0;  long temp=seconds % 3600;  if (seconds > 3600) {    h=seconds / 3600;    if (temp != 0) {      if (temp > 60) {        m=temp / 60;        if (temp % 60 != 0) {          s=temp % 60;        }      } else {        s=temp;      }    }  } else {    m=seconds / 60;    if (seconds % 60 != 0) {      s=seconds % 60;    }  }  String dh=h < 10 ? "0" + h : h + "";  String dm=m < 10 ? "0" + m : m + "";  String ds=s < 10 ? "0" + s : s + "";  return dh + ":" + dm+ ":"+ ds;}  }
class C{  private void processIcons(SolrInputDocument doc,boolean allAttr,Collection<IconEntry> icons){  processIcons(doc,allAttr,null,null,icons);}  }
class C{  public void changeWindowsConfig(String value){  WebElement windowsConfigButton=driver.findElement(By.xpath((uiElementMapper.getElement("emm.configuration.widows.tab.identifier"))));  WebElement inputWindowsConfig=driver.findElement(By.xpath((uiElementMapper.getElement("emm.configuration.windows.input.identifier"))));  WebElement buttonSaveConfig=driver.findElement(By.xpath((uiElementMapper.getElement("emm.configuration.windows.button.save.identifier"))));  windowsConfigButton.click();  inputWindowsConfig.sendKeys(value);  buttonSaveConfig.click();}  }
class C{  protected URLConnection openConnection(URL url) throws IOException {  URLConnection conn=url.openConnection();  conn.setDoOutput(true);  if (_basicAuth != null)   conn.setRequestProperty("Authorization",_basicAuth); else   if (_user != null && _password != null) {    _basicAuth="Basic " + base64(_user + ":" + _password);    conn.setRequestProperty("Authorization",_basicAuth);  }  return conn;}  }
class C{  public DirectReplyProcessor(DM dm,InternalDistributedMember member){  this(dm,Collections.singleton(member));}  }
class C{  private DigestValue resolveValue(AbstractValueType value,HashChainType currentChain) throws Exception {  LOG.trace("resolveValue({})",value);  if (value instanceof DataRefType) {    return resolveDataRef((DataRefType)value,currentChain);  } else   if (value instanceof StepRefType) {    return resolveStepRef((StepRefType)value,currentChain);  } else   if (value instanceof HashValueType) {    return resolveHashValue((HashValueType)value,currentChain);  } else {    throw new IllegalArgumentException("Unknown value type");  }}  }
class C{  @Override public void visitTypeParameter(JCTypeParameter tree){  TypeVar a=(tree.type != null) ? (TypeVar)tree.type : new TypeVar(tree.name,env.info.scope.owner,syms.botType);  tree.type=a;  if (chk.checkUnique(tree.pos(),a.tsym,env.info.scope)) {    env.info.scope.enter(a.tsym);  }  result=a;}  }
class C{  protected BaseVO(long key,int version){  this.key=key;  this.version=version;}  }
class C{  @Override public boolean needsMaterialization(){  return false;}  }
class C{  public File outputRamlToFile(String path,Boolean createPathIfMissing,Boolean removeOldOutput) throws FileNotFoundException {  if (this.raml == null) {    return null;  }  FileOutputStream fos=null;  File file=getRamlOutputFile(path);  try {    prepareDirectories(file,createPathIfMissing,removeOldOutput);    logger.info("Saving generated raml to " + file.getAbsolutePath());    fos=new FileOutputStream(file);    fos.write(outputRamlToString().getBytes());    fos.flush();  } catch (  FileNotFoundException e) {    logger.error("Could not save raml - directory enclosing " + file.getAbsolutePath() + " does not exist",e);    throw e;  }catch (  IOException e) {    logger.error(e.getMessage(),e);  } finally {    if (fos != null) {      try {        fos.close();      } catch (      IOException e) {        logger.error(e.getMessage(),e);      }    }  }  return file;}  }
class C{  public InstanceExistsException(List<LocalizedText> messages){  super(messages);}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  private void verifyPasswordStrength(){  if (isEnabled() && !constraints.isEmpty() && !TextUtils.isEmpty(getText())) {    float score=getPasswordStrength();    adaptHelperText(score);  } else {    setHelperText(regularHelperText);  }}  }
class C{  public DTMAxisIterator includeSelf(){  _includeSelf=true;  return this;}  }
class C{  public GPIndividual map(EvolutionState state,GEIndividual ind,int threadnum,HashMap ercMapsForFancyPrint){  GPIndividual newind=((GPIndividual)(gpspecies.i_prototype)).lightClone();  newind.fitness=ind.fitness;  newind.evaluated=false;  newind.species=gpspecies;  if (makeTrees(state,ind,newind.trees,threadnum,ercMapsForFancyPrint) < 0)   return null; else   return newind;}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  public void addTransaction(Transaction t){  addTransaction(t,true);}  }
class C{  public EnvironmentMap(HashMap global){  _global=global;}  }
class C{  public CActionAutomaticLayouting(final ZyGraph graph){  super("Automatic Layouting");  m_graph=Preconditions.checkNotNull(graph,"IE02809: graph argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_AUTOMATIC_LAYOUT_HK.getKeyStroke());}  }
class C{  private void saveDebugger(){  try {    m_addressSpace.getConfiguration().setDebuggerTemplate(m_debuggerCombo.getSelectedDebugger());  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00155: " + "Could not save address space debugger";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The new debugger of the address space '%s' could not be saved.",m_addressSpace.getConfiguration().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The address space keeps its old debugger."});    NaviErrorDialog.show(SwingUtilities.getWindowAncestor(this),innerMessage,innerDescription,e);  }}  }
class C{  public final void testIsStatePreserved2(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  EncodedKeySpec meks=new MyEncodedKeySpec(encodedKey);  byte[] ek=meks.getEncoded();  ek[3]=(byte)5;  byte[] ek1=meks.getEncoded();  assertTrue(ek1[3] == (byte)4);}  }
class C{  @Override protected void readProcess() throws IOException, InterruptedException {  if (log.isInfoEnabled())   log.info("begin");  for (int i=0; i < 10 && !getActiveProcess().isAlive(); i++) {    if (log.isInfoEnabled())     log.info("waiting for the readerFuture to be set.");    Thread.sleep(100);  }  if (log.isInfoEnabled())   log.info("running");  final String banner=readLine();  if (log.isInfoEnabled())   log.info("banner: " + banner);  long n=0;  while (true) {    final String blank=readLine();    assert blank.trim().length() == 0 : "Expecting a blank line";    final String header=readLine();    final String data=readLine();    try {      lastModified.set(System.currentTimeMillis());      final Map<String,String> fields=SysstatUtil.getDataMap(header,data);      if (log.isInfoEnabled()) {        StringBuilder sb=new StringBuilder();        for (        Map.Entry<String,String> e : fields.entrySet()) {          sb.append(e.getKey());          sb.append("=");          sb.append(e.getValue());          sb.append(", ");        }        log.info(sb.toString());        log.info(header + ";" + data);      }      if (fields.containsKey(PIDSTAT_FIELD_CPU_PERCENT)) {        vals.put(IProcessCounters.CPU_PercentUserTime,Double.parseDouble(fields.get(PIDSTAT_FIELD_CPU_PERCENT_USR)));        vals.put(IProcessCounters.CPU_PercentSystemTime,Double.parseDouble(fields.get(PIDSTAT_FIELD_CPU_PERCENT_SYSTEM)));        vals.put(IProcessCounters.CPU_PercentProcessorTime,Double.parseDouble(fields.get(PIDSTAT_FIELD_CPU_PERCENT)));      } else       if (fields.containsKey("RSS")) {        vals.put(IProcessCounters.Memory_minorFaultsPerSec,Double.parseDouble(fields.get(PIDSTAT_FIELD_MEM_MINOR_FAULTS_PERS)));        vals.put(IProcessCounters.Memory_majorFaultsPerSec,Double.parseDouble(fields.get(PIDSTAT_FIELD_MEM_MAJOR_FAULTS_PERS)));        vals.put(IProcessCounters.Memory_virtualSize,Long.parseLong(fields.get(PIDSTAT_FIELD_MEM_VIRTUAL_SIZE)));        vals.put(IProcessCounters.Memory_residentSetSize,Long.parseLong(fields.get(PIDSTAT_FIELD_MEM_RESIDENT_SET_SIZE)));        vals.put(IProcessCounters.Memory_percentMemorySize,Double.parseDouble(fields.get(PIDSTAT_FIELD_MEM_SIZE_PERCENT)));      } else       if (perProcessIOData && header.contains("kB_rd/s")) {        vals.put(IProcessCounters.PhysicalDisk_BytesReadPerSec,Double.parseDouble(fields.get(PIDSTAT_FIELD_DISK_KB_READ_PERS)));        vals.put(IProcessCounters.PhysicalDisk_BytesWrittenPerSec,Double.parseDouble(fields.get(PIDSTAT_FIELD_DISK_KB_WRITTEN_PERS)));      } else {        log.warn("Could not identify event type from header: [" + header + "]");        continue;      }    } catch (    Exception ex) {      log.warn(ex.getMessage() + "\nheader: " + header+ "\n  data: "+ data);    }    n++;  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public StringElement addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.CATCH_BLOCK__CATCH_VARIABLE:    return basicSetCatchVariable(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Object put(Object key,Object value){  internalPut((CompositeData)value);  return value;}  }
class C{  public ColorRGBA(Scalar scalar){  super(scalar);}  }
class C{  protected double kernelHelper2(int n,char[] s,int endIndexS,char[] t,int endIndexT){  if (endIndexS < 0 || endIndexT < 0) {    return getReturnValue(n);  }  int adr=0;  if (m_useRecursionCache) {    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;    if (cachekh2K[adr % maxCache] == adr + 1) {      return cachekh2[adr % maxCache];    }  }  char x=s[endIndexS];  if (x == t[endIndexT]) {    double ret=m_lambda * (kernelHelper2(n,s,endIndexS,t,endIndexT - 1) + m_lambda * kernelHelper(n - 1,s,endIndexS - 1,t,endIndexT - 1));    if (m_useRecursionCache) {      cachekh2K[adr % maxCache]=adr + 1;      cachekh2[adr % maxCache]=ret;    }    return ret;  } else {    double ret=m_lambda * kernelHelper2(n,s,endIndexS,t,endIndexT - 1);    if (m_useRecursionCache) {      cachekh2K[adr % maxCache]=adr + 1;      cachekh2[adr % maxCache]=ret;    }    return ret;  }}  }
class C{  public static SailRepository createRepository(final Properties props,final String file,final Option... args){  return new SailRepository(createSail(props,file,args));}  }
class C{  public static View createView(final Module module,final List<ReilInstruction> instructions){  Preconditions.checkNotNull(module,"Error: Module argument can not be null");  Preconditions.checkNotNull(instructions,"Error: Instructions argument can not be null");  final INaviView view=CReilViewCreator.create(module.getNative(),convert(instructions));  return ObjectFinders.getObject(view,module.getViews());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  void beginScratchInterval(Register r,Instruction begin){  if (DEBUG) {    System.out.println("beginScratchInterval " + r + " "+ regAllocState.getDFN(begin));  }  PhysicalInterval p=new PhysicalInterval(r);  p.begin=begin;  ArrayList<Interval> v=findOrCreateIntervalSet(r);  v.add(p);  pending.put(r,p);}  }
class C{  public void resetLabels(){  AbstractInsnNode insn=first;  while (insn != null) {    if (insn instanceof LabelNode) {      ((LabelNode)insn).resetLabel();    }    insn=insn.next;  }}  }
class C{  private void revalidateAttributePanels(){  int pages=model.getNumberOfPages();  Vector<Integer> pagesVector=new Vector<>();  for (int j=1; j <= pages; j++) {    pagesVector.add(j);  }  if (pagesComboBox.getSelectedItem() != null) {    pagesComboBox.setModel(new DefaultComboBoxModel<>(pagesVector));    pagesComboBox.removeItemListener(pageComboListener);    pagesComboBox.setSelectedItem(model.getCurrentPageIndex() + 1);    pagesComboBox.addItemListener(pageComboListener);  } else {    pagesComboBox.setModel(new DefaultComboBoxModel<>(pagesVector));  }  updatePagingDisplay();  int index=0;  List<AbstractAttributeStatisticsModel> orderedList=controller.getPagedAndVisibleAttributeStatisticsModels();  for (  AbstractAttributeStatisticsModel statModel : orderedList) {    mapOfAttributeStatisticsPanels.get(index++).setModel(statModel,true);  }  int i=0;  for (  AbstractAttributeStatisticsModel statModel : orderedList) {    mapOfAttributeStatisticsPanels.get(i).setVisible(true);    statModel.setAlternating(i % 2 == 1);    i++;  }  for (; i < Math.min(model.getTotalSize(),MetaDataStatisticsModel.PAGE_SIZE); i++) {    mapOfAttributeStatisticsPanels.get(i).setVisible(false);  }  if (model.getVisibleSize() == 0 && model.isFiltering()) {    labelNoAttributes.setVisible(true);  } else {    labelNoAttributes.setVisible(false);  }  for (  AttributeStatisticsPanel asp : mapOfAttributeStatisticsPanels.values()) {    asp.updateNameColumnWidth(nameDim);  }  revalidate();  repaint();}  }
class C{  @PluginFactory public static ConsoleAppender createAppender(@PluginElement("Layout") Layout<? extends Serializable> layout,@PluginElement("Filters") final Filter filter,@PluginAttribute("target") final String t,@PluginAttribute("name") final String name,@PluginAttribute("follow") final String follow,@PluginAttribute("ignoreExceptions") final String ignore){  if (name == null) {    LOGGER.error("No name provided for ConsoleAppender");    return null;  }  if (layout == null) {    layout=PatternLayout.createLayout(null,null,null,null,null);  }  final boolean isFollow=Boolean.parseBoolean(follow);  final boolean ignoreExceptions=Booleans.parseBoolean(ignore,true);  final Target target=t == null ? Target.SYSTEM_OUT : Target.valueOf(t);  return new ConsoleAppender(name,layout,filter,getManager(isFollow,target,layout),ignoreExceptions);}  }
class C{  public TableDefinition(Session s,String tablename,String[] fieldname,String[] fieldtran,Datas[] fielddata,Formats[] fieldformat,int[] idinx){  this(s,tablename,fieldname,fieldtran,fielddata,fieldformat,idinx,null);}  }
class C{  private Object _deserialize(Element element) throws ConverterException {  String nodeName=element.getNodeName().toLowerCase();  if (nodeName.equals("null")) {    return null;  } else   if (nodeName.equals("string")) {    return _deserializeString(element);  } else   if (nodeName.equals("number")) {    try {      Node data=element.getFirstChild();      if (data == null)       return new Double(0);      return Caster.toDouble(data.getNodeValue());    } catch (    Exception e) {      throw toConverterException(e);    }  } else   if (nodeName.equals("boolean")) {    try {      return Caster.toBoolean(element.getAttribute("value"));    } catch (    PageException e) {      throw toConverterException(e);    }  } else   if (nodeName.equals("array")) {    return _deserializeArray(element);  } else   if (nodeName.equals("component") || nodeName.equals("class")) {    return _deserializeComponent(element);  } else   if (nodeName.equals("struct")) {    return _deserializeStruct(element);  } else   if (nodeName.equals("recordset")) {    return _deserializeQuery(element);  } else   if (nodeName.equalsIgnoreCase("dateTime")) {    try {      return DateCaster.toDateAdvanced(element.getFirstChild().getNodeValue(),timeZone);    } catch (    Exception e) {      throw toConverterException(e);    }  } else   if (nodeName.equals("binary")) {    return _deserializeBinary(element);  } else   throw new ConverterException("can't deserialize Element of type [" + nodeName + "] to a Object representation");}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  public SpeakerNPC(final String name){  baseSpeed=0.2;  createPath();  lastMessageTurn=0;  setName(name);  createDialog();  createDefaultReplies();  put("title_type","npc");  setSize(1,1);  setPerceptionRange(5);  updateModifiedAttributes();}  }
class C{  public static InputStream post(URL url,String name1,Object value1) throws IOException {  return new ClientHttpRequest(url).post(name1,value1);}  }
class C{  public static boolean dirExists(File dir){  long start=System.currentTimeMillis();  while (System.currentTimeMillis() - start < MS_RETRY) {    File refreshed=Errors.rethrow().get(null);    if (refreshed.exists() && refreshed.isDirectory()) {      return true;    } else {      Errors.rethrow().run(null);    }  }  return false;}  }
class C{  public void addRoleName(String roleName){  if (roleNames == null) {    roleNames=New.arrayList();  }  roleNames.add(roleName);}  }
class C{  public void parse(InputStream is){  setPasswordMap(parseRulesFile(is));}  }
class C{  public CSVParser(){  this(DEFAULT_SEPARATOR,DEFAULT_QUOTE_CHARACTER,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static GraphicsConfiguration detectScreen(){  PointerInfo pointer=MouseInfo.getPointerInfo();  if (pointer != null) {    return pointer.getDevice().getDefaultConfiguration();  }  return null;}  }
class C{  @Override public void bindView(ViewHolder viewHolder,List payloads){  super.bindView(viewHolder,payloads);  viewHolder.image.setIcon(mIcon);  viewHolder.name.setText(mIcon.getName());}  }
class C{  public static void routeSchedule(TransitSchedule schedule,Network network,Map<String,Router> routers){  Counter counterRoute=new Counter("route # ");  log.info("Routing all routes with referenced links...");  if (routers == null) {    log.error("No routers given, routing cannot be completed!");    return;  }  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      if (!routers.containsKey(transitRoute.getTransportMode())) {        throw new RuntimeException("No router defined for " + transitRoute.getTransportMode());      }      if (transitRoute.getStops().size() > 0) {        Router modeDependentRouter=routers.get(transitRoute.getTransportMode());        counterRoute.incCounter();        List<TransitRouteStop> routeStops=transitRoute.getStops();        List<Id<Link>> linkIdSequence=new LinkedList<>();        linkIdSequence.add(routeStops.get(0).getStopFacility().getLinkId());        for (int i=0; i < routeStops.size() - 1; i++) {          if (routeStops.get(i).getStopFacility().getLinkId() == null) {            log.warn("stop facility " + routeStops.get(i).getStopFacility().getName() + " ("+ routeStops.get(i).getStopFacility().getId()+ ") not referenced!");            linkIdSequence=null;            break;          }          if (routeStops.get(i + 1).getStopFacility().getLinkId() == null) {            log.warn("stop facility " + routeStops.get(i - 1).getStopFacility().getName() + " ("+ routeStops.get(i + 1).getStopFacility().getId()+ " not referenced!");            linkIdSequence=null;            break;          }          Id<Link> currentLinkId=Id.createLinkId(routeStops.get(i).getStopFacility().getLinkId().toString());          Link currentLink=network.getLinks().get(currentLinkId);          Link nextLink=network.getLinks().get(routeStops.get(i + 1).getStopFacility().getLinkId());          LeastCostPathCalculator.Path leastCostPath=modeDependentRouter.calcLeastCostPath(currentLink.getToNode(),nextLink.getFromNode());          List<Id<Link>> path=null;          if (leastCostPath != null) {            path=PTMapperUtils.getLinkIdsFromPath(leastCostPath);          }          if (path != null)           linkIdSequence.addAll(path);          linkIdSequence.add(nextLink.getId());        }        if (linkIdSequence != null) {          transitRoute.setRoute(RouteUtils.createNetworkRoute(linkIdSequence,network));        }      } else {        log.warn("Route " + transitRoute.getId() + " on line "+ transitLine.getId()+ " has no stop sequence");      }    }  }  log.info("Routing all routes with referenced links... done");}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,ASN1Encodable value) throws IOException {  this.addExtension(oid,critical,value.toASN1Primitive().getEncoded(ASN1Encoding.DER));}  }
class C{  public void initiateRead(){  if (DEBUG_SHOW_PUBLIC_CALLS && log.isDebugEnabled()) {    log.debug("initiateRead");  }  issueReadOnlyRequest();}  }
class C{  protected double findSplitNominalNominal(int index) throws Exception {  double bestVal=Double.MAX_VALUE, currVal;  double[][] counts=new double[m_Instances.attribute(index).numValues() + 1][m_Instances.numClasses()];  double[] sumCounts=new double[m_Instances.numClasses()];  double[][] bestDist=new double[3][m_Instances.numClasses()];  int numMissing=0;  for (int i=0; i < m_Instances.numInstances(); i++) {    Instance inst=m_Instances.instance(i);    if (inst.isMissing(index)) {      numMissing++;      counts[m_Instances.attribute(index).numValues()][(int)inst.classValue()]+=inst.weight();    } else {      counts[(int)inst.value(index)][(int)inst.classValue()]+=inst.weight();    }  }  for (int i=0; i < m_Instances.attribute(index).numValues(); i++) {    for (int j=0; j < m_Instances.numClasses(); j++) {      sumCounts[j]+=counts[i][j];    }  }  System.arraycopy(counts[m_Instances.attribute(index).numValues()],0,m_Distribution[2],0,m_Instances.numClasses());  for (int i=0; i < m_Instances.attribute(index).numValues(); i++) {    for (int j=0; j < m_Instances.numClasses(); j++) {      m_Distribution[0][j]=counts[i][j];      m_Distribution[1][j]=sumCounts[j] - counts[i][j];    }    currVal=ContingencyTables.entropyConditionedOnRows(m_Distribution);    if (currVal < bestVal) {      bestVal=currVal;      m_SplitPoint=(double)i;      for (int j=0; j < 3; j++) {        System.arraycopy(m_Distribution[j],0,bestDist[j],0,m_Instances.numClasses());      }    }  }  if (numMissing == 0) {    System.arraycopy(sumCounts,0,bestDist[2],0,m_Instances.numClasses());  }  m_Distribution=bestDist;  return bestVal;}  }
class C{  @Override public int compareTo(WbXmlExtensionDef ext){  int result;  if (this.value == null && ext.getValue() == null) {    result=0;  } else   if (this.value == null) {    result=1;  } else   if (ext.getValue() == null) {    result=-1;  } else {    result=new Integer(ext.getValue().length()).compareTo(this.getValue().length());    if (result == 0) {      result=this.value.compareTo(ext.getValue());    }  }  return result;}  }
class C{  public boolean isFromSave(){  return myRequestor instanceof SavingRequestor;}  }
class C{  public void clear() throws IOException {  try {    Lock writeLock=lockManager.getWriteLock();    try {      dataStore.clear();      valueCache.clear();      valueIDCache.clear();      namespaceCache.clear();      namespaceIDCache.clear();      initBNodeParams();      setNewRevision();    }  finally {      writeLock.release();    }  } catch (  InterruptedException e) {    IOException ioe=new IOException("Failed to acquire write lock");    ioe.initCause(e);    throw ioe;  }}  }
class C{  public void testMovePointRightPosLess(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478138475679498700";  int aScale=28;  int shift=30;  int resScale=0;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.movePointRight(shift);  assertTrue("incorrect scale",bNumber.scale() == resScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  public TaskList restoreApplicationSnapshotSession(URI id,VolumeGroupSnapshotSessionRestoreParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_RESTORE_SNAPSHOT_SESSION_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  public FlexibleNode removeChild(FlexibleNode n){  int numChildren=getChildCount();  FlexibleNode[] newChild=new FlexibleNode[numChildren - 1];  int j=0;  boolean found=false;  for (int i=0; i < numChildren; i++) {    if (child[i] != n) {      newChild[j]=child[i];      j++;    } else     found=true;  }  if (!found)   throw new IllegalArgumentException("Nonexistent child");  n.setParent(null);  child=newChild;  return n;}  }
class C{  public Vector2 ceil(){  return new Vector2(Math.ceil(x),Math.ceil(z));}  }
class C{  private void changeSelectedModsAutoUpdate(final Boolean autoUpdate){  final OffExtModConfsBean confsBean=LEnv.LAUNCHER_SETTINGS.get(LSettings.OFF_EXT_MOD_CONFS).cloneBean();  for (  final int row : table.getSelectedModelRows())   confsBean.getModuleConfForFolder(((ExtModRefBean)table.getModel().getValueAt(row,extModRefColIdx)).getFolder(),true).setAutoUpdate(autoUpdate);  LEnv.LAUNCHER_SETTINGS.set(LSettings.OFF_EXT_MOD_CONFS,confsBean);  rebuildTable();}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  Log_OC.d(TAG,"Starting command with id " + startId);  if (!intent.hasExtra(KEY_ACCOUNT) || !intent.hasExtra(KEY_UPLOAD_TYPE) || !(intent.hasExtra(KEY_LOCAL_FILE) || intent.hasExtra(KEY_FILE))) {    Log_OC.e(TAG,"Not enough information provided in intent");    return Service.START_NOT_STICKY;  }  int uploadType=intent.getIntExtra(KEY_UPLOAD_TYPE,-1);  if (uploadType == -1) {    Log_OC.e(TAG,"Incorrect upload type provided");    return Service.START_NOT_STICKY;  }  Account account=intent.getParcelableExtra(KEY_ACCOUNT);  if (!AccountUtils.exists(account,getApplicationContext())) {    return Service.START_NOT_STICKY;  }  String[] localPaths=null, remotePaths=null, mimeTypes=null;  OCFile[] files=null;  if (uploadType == UPLOAD_SINGLE_FILE) {    if (intent.hasExtra(KEY_FILE)) {      files=new OCFile[]{intent.getParcelableExtra(KEY_FILE)};    } else {      localPaths=new String[]{intent.getStringExtra(KEY_LOCAL_FILE)};      remotePaths=new String[]{intent.getStringExtra(KEY_REMOTE_FILE)};      mimeTypes=new String[]{intent.getStringExtra(KEY_MIME_TYPE)};    }  } else {    if (intent.hasExtra(KEY_FILE)) {      files=(OCFile[])intent.getParcelableArrayExtra(KEY_FILE);    } else {      localPaths=intent.getStringArrayExtra(KEY_LOCAL_FILE);      remotePaths=intent.getStringArrayExtra(KEY_REMOTE_FILE);      mimeTypes=intent.getStringArrayExtra(KEY_MIME_TYPE);    }  }  FileDataStorageManager storageManager=new FileDataStorageManager(account,getContentResolver());  boolean forceOverwrite=intent.getBooleanExtra(KEY_FORCE_OVERWRITE,false);  boolean isInstant=intent.getBooleanExtra(KEY_INSTANT_UPLOAD,false);  int localAction=intent.getIntExtra(KEY_LOCAL_BEHAVIOUR,LOCAL_BEHAVIOUR_COPY);  if (intent.hasExtra(KEY_FILE) && files == null) {    Log_OC.e(TAG,"Incorrect array for OCFiles provided in upload intent");    return Service.START_NOT_STICKY;  } else   if (!intent.hasExtra(KEY_FILE)) {    if (localPaths == null) {      Log_OC.e(TAG,"Incorrect array for local paths provided in upload intent");      return Service.START_NOT_STICKY;    }    if (remotePaths == null) {      Log_OC.e(TAG,"Incorrect array for remote paths provided in upload intent");      return Service.START_NOT_STICKY;    }    if (localPaths.length != remotePaths.length) {      Log_OC.e(TAG,"Different number of remote paths and local paths!");      return Service.START_NOT_STICKY;    }    files=new OCFile[localPaths.length];    for (int i=0; i < localPaths.length; i++) {      files[i]=obtainNewOCFileToUpload(remotePaths[i],localPaths[i],((mimeTypes != null) ? mimeTypes[i] : null),storageManager);      if (files[i] == null) {        return Service.START_NOT_STICKY;      }    }  }  OwnCloudVersion ocv=AccountUtils.getServerVersion(account);  boolean chunked=FileUploader.chunkedUploadIsSupported(ocv);  AbstractList<String> requestedUploads=new Vector<>();  String uploadKey=null;  UploadFileOperation newUpload=null;  try {    for (    OCFile file : files) {      uploadKey=buildRemoteName(account,file.getRemotePath());      newUpload=new UploadFileOperation(account,file,chunked,isInstant,forceOverwrite,localAction,getApplicationContext());      if (isInstant) {        newUpload.setRemoteFolderToBeCreated();      }      mPendingUploads.putIfAbsent(uploadKey,newUpload);      newUpload.addDatatransferProgressListener(this);      newUpload.addDatatransferProgressListener((FileUploaderBinder)mBinder);      requestedUploads.add(uploadKey);    }  } catch (  IllegalArgumentException e) {    Log_OC.e(TAG,"Not enough information provided in intent: " + e.getMessage());    return START_NOT_STICKY;  }catch (  IllegalStateException e) {    Log_OC.e(TAG,"Bad information provided in intent: " + e.getMessage());    return START_NOT_STICKY;  }catch (  Exception e) {    Log_OC.e(TAG,"Unexpected exception while processing upload intent",e);    return START_NOT_STICKY;  }  if (requestedUploads.size() > 0) {    Message msg=mServiceHandler.obtainMessage();    msg.arg1=startId;    msg.obj=requestedUploads;    mServiceHandler.sendMessage(msg);  }  Log_OC.i(TAG,"mPendingUploads size:" + mPendingUploads.size());  return Service.START_NOT_STICKY;}  }
class C{  public OMSpline(double[] llPoints,int units,int lType){  super(llPoints,units,lType);}  }
class C{  public OverloadScanner(TranspilationHandler logHandler,JSweetContext context){  super(logHandler,context,null);  this.types=Types.instance(context);}  }
class C{  public void connected(){  if (false)   Log.v("ddm-hello","Connected!");  if (false) {    byte[] data=new byte[]{0,1,2,3,4,-4,-3,-2,-1,127};    Chunk testChunk=new Chunk(ChunkHandler.type("TEST"),data,1,data.length - 2);    DdmServer.sendChunk(testChunk);  }}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  public List<IMessage> deleteAfter(IMessage message,int amount) throws RateLimitException, DiscordException, MissingPermissionsException {  return deleteAfter(indexOf(message),amount);}  }
class C{  public boolean isMotorEnabled(){  return motorEnabled;}  }
class C{  public Engine(org.jdom2.Element e){  super(e);  org.jdom2.Attribute a;  if ((a=e.getAttribute(Xml.MODEL)) != null) {    _model=a.getValue();  }  if ((a=e.getAttribute(Xml.HP)) != null) {    setHp(a.getValue());  }  if ((a=e.getAttribute(Xml.LENGTH)) != null) {    setLength(a.getValue());  }  if ((a=e.getAttribute(Xml.TYPE)) != null) {    setTypeName(a.getValue());  }  if ((a=e.getAttribute(Xml.WEIGHT_TONS)) != null) {    setWeightTons(a.getValue());  }  if ((a=e.getAttribute(Xml.B_UNIT)) != null) {    setBunit(a.getValue().equals(Xml.TRUE));  }  if ((a=e.getAttribute(Xml.CONSIST)) != null) {    Consist c=EngineManager.instance().getConsistByName(a.getValue());    if (c != null) {      setConsist(c);      if ((a=e.getAttribute(Xml.LEAD_CONSIST)) != null && a.getValue().equals(Xml.TRUE)) {        _consist.setLead(this);      }      if ((a=e.getAttribute(Xml.CONSIST_NUM)) != null) {        _consist.setConsistNumber(Integer.parseInt(a.getValue()));      }    } else {      log.error("Consist " + a.getValue() + " does not exist");    }  }  addPropertyChangeListeners();}  }
class C{  public static boolean parseSQString(PsiBuilder b,int l){  PsiBuilder.Marker m=b.mark();  boolean r=PerlParserImpl.string_sq_parsed(b,l);  if (r && ((PerlBuilder)b).isReparseSQString()) {    m.collapse(PARSABLE_STRING_USE_VARS);  } else {    m.drop();  }  return r;}  }
class C{  private void grow(){  XYZAddressable[] oldBuckets=this.buckets;  this.buckets=new XYZAddressable[this.buckets.length * 2];  this.refreshFields();  for (  XYZAddressable oldBucket : oldBuckets) {    if (oldBucket == null) {      continue;    }    int index=getIndex(oldBucket.getX(),oldBucket.getY(),oldBucket.getZ());    XYZAddressable bucket=this.buckets[index];    while (bucket != null) {      bucket=this.buckets[index=getNextIndex(index)];    }    this.buckets[index]=oldBucket;  }}  }
class C{  public boolean stem(){  return stem(0);}  }
class C{  public Path rootDirectory(){  RootDirectorySystem root=SystemManager.getCurrentSystem(RootDirectorySystem.class);  return root.rootDirectory();}  }
class C{  public RealVector generateDenseRandomVector(int dimension,int seedLength,Random random){  RealVector randomVector=new RealVector(dimension);  randomVector.sparseToDense();  for (int q=0; q < dimension; q++)   randomVector.coordinates[q]=(float)(random.nextFloat() - 0.5) / (float)dimension;  return randomVector;}  }
class C{  public OverrideUrlLoadingResult shouldOverrideUrlLoading(ExternalNavigationParams params){  Intent intent;  try {    intent=Intent.parseUri(params.getUrl(),Intent.URI_INTENT_SCHEME);  } catch (  Exception ex) {    Log.w(TAG,"Bad URI " + params.getUrl(),ex);    return OverrideUrlLoadingResult.NO_OVERRIDE;  }  boolean hasBrowserFallbackUrl=false;  String browserFallbackUrl=IntentUtils.safeGetStringExtra(intent,EXTRA_BROWSER_FALLBACK_URL);  if (browserFallbackUrl != null && UrlUtilities.isValidForIntentFallbackNavigation(browserFallbackUrl)) {    hasBrowserFallbackUrl=true;  } else {    browserFallbackUrl=null;  }  OverrideUrlLoadingResult result=shouldOverrideUrlLoadingInternal(params,intent,hasBrowserFallbackUrl,browserFallbackUrl);  if (result == OverrideUrlLoadingResult.NO_OVERRIDE && hasBrowserFallbackUrl && (params.getRedirectHandler() == null || !params.getRedirectHandler().shouldNotOverrideUrlLoading())) {    return clobberCurrentTabWithFallbackUrl(browserFallbackUrl,params);  }  return result;}  }
class C{  public void start(){  super.start();  setupPortrayals();}  }
class C{  private static StringBuffer asRegEx(String stringMatcherPattern,StringBuffer out){  boolean escaped=false;  boolean quoting=false;  int i=0;  while (i < stringMatcherPattern.length()) {    char ch=stringMatcherPattern.charAt(i++);    if (ch == '*' && !escaped) {      if (quoting) {        out.append("\\E");        quoting=false;      }      out.append(".*");      escaped=false;      continue;    } else     if (ch == '?' && !escaped) {      if (quoting) {        out.append("\\E");        quoting=false;      }      out.append(".");      escaped=false;      continue;    } else     if (ch == '\\' && !escaped) {      escaped=true;      continue;    } else     if (ch == '\\' && escaped) {      escaped=false;      if (quoting) {        out.append("\\E");        quoting=false;      }      out.append("\\\\");      continue;    }    if (!quoting) {      out.append("\\Q");      quoting=true;    }    if (escaped && ch != '*' && ch != '?' && ch != '\\')     out.append('\\');    out.append(ch);    escaped=ch == '\\';  }  if (quoting)   out.append("\\E");  return out;}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  int num_classes=(int)(0.5 * numClasses);  int num_features=(int)(0.5 * numFeatures);  double[] dist=new double[num_classes];  double[] currentData=new double[numFeatures];  double[] ranking=new double[num_classes];  for (int j=0; j < num_features; j++) {    currentData[j]=instance.value(num_classes + j);    currentData[num_features + j]=1 - currentData[j];  }  SortPair[] sortedActivations=ARTActivateCategories(currentData);  java.util.Arrays.sort(sortedActivations);  double diff_act=sortedActivations[0].getValue() - sortedActivations[numCategories - 2].getValue();  int largest_activ=1;  double activ_change=0;  for (int i=1; i < numCategories; i++) {    activ_change=(sortedActivations[0].getValue() - sortedActivations[i].getValue()) / sortedActivations[0].getValue();    if (activ_change > threshold * diff_act) {      break;    }    largest_activ=largest_activ + 1;  }  double[] best_matches=new double[largest_activ];  java.util.Arrays.fill(best_matches,1);  for (int i=0; i < largest_activ; i++) {    best_matches[i]=sortedActivations[i].getValue();  }  double sum_mat=sumArray(best_matches);  int currentCategory=0;  for (int i=0; i < largest_activ; i++) {    best_matches[i]=best_matches[i] / sum_mat;    currentCategory=sortedActivations[i].getOriginalIndex();    for (int j=0; j < num_classes; j++) {      ranking[j]=ranking[j] + best_matches[i] * weightsB[currentCategory][j];    }  }  if (m_userankstoclass) {    return ARAMm_Ranking2Class(ranking);  }  return ranking;}  }
class C{  public static Duration inf(){  return INFINITE;}  }
class C{  @SuppressWarnings("unchecked") protected T reset(){  this.index=0;  this.size=-1;  return (T)this;}  }
class C{  @Override public String globalInfo(){  return "Outputs the predictions as CSV.";}  }
class C{  public Peer(Gondola gondola,CoreMember cmember,Channel slaveChannel){  this(gondola,cmember,slaveChannel.getRemoteMemberId());  this.channel=slaveChannel;  this.slaveMode=true;}  }
class C{  public void onProgress(int downloadId,long bytesWritten,long totalBytes){}  }
class C{  public static void updateOpenViews(final INaviEdge edge,final ArrayList<IComment> comments) throws CouldntSaveDataException {  try {    final Pair<INaviModule,INaviModule> modules=getModules(edge);    if (modules.first() != modules.second()) {      return;    }    if ((modules.first() != null) && (modules.second() != null) && modules.first().isLoaded()) {      final List<INaviEdge> edgelist=new ArrayList<INaviEdge>();      final Quad<Integer,IAddress,Integer,IAddress> refEdgeData=getEdgeData(edge);      for (      final INaviView view : modules.first().getContent().getViewContainer().getViews()) {        edgelist.addAll(collectEdges(view,refEdgeData));      }      for (      final INaviEdge updateEdge : edgelist) {        updateEdge.initializeGlobalComment(comments);      }    }  } catch (  final MaybeNullException exception) {  }}  }
class C{  @Override public void onDrawEye(Eye eye){  GLES20.glEnable(GLES20.GL_DEPTH_TEST);  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);  checkGLError("colorParam");  Matrix.multiplyMM(view,0,eye.getEyeView(),0,camera,0);  Matrix.multiplyMV(lightPosInEyeSpace,0,view,0,LIGHT_POS_IN_WORLD_SPACE,0);  float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR);  Matrix.multiplyMM(modelView,0,view,0,modelCube,0);  Matrix.multiplyMM(modelViewProjection,0,perspective,0,modelView,0);  Matrix.multiplyMM(modelView,0,view,0,modelFloor,0);  Matrix.multiplyMM(modelViewProjection,0,perspective,0,modelView,0);  drawFloor();  float[] videoMVP=new float[16];  Matrix.multiplyMM(videoMVP,0,view,0,videoScreenModelMatrix,0);  Matrix.multiplyMM(videoMVP,0,perspective,0,videoMVP,0);  mVideoRenderer.setMVPMatrix(videoMVP);  if (renderSereo)   mVideoRenderer.render(eye.getType()); else   mVideoRenderer.render(1);}  }
class C{  public ReferenceMatch(IJavaElement enclosingElement,int accuracy,int offset,int length,boolean insideDocComment,SearchParticipant participant,IResource resource){  super(enclosingElement,accuracy,offset,length,participant,resource);  setInsideDocComment(insideDocComment);}  }
class C{  public static byte[] serializeToBytes(final SerializableEntity entity){  try {    try (BinarySerializer binarySerializer=new BinarySerializer()){      entity.serialize(binarySerializer);      return binarySerializer.getBytes();    }   } catch (  final Exception e) {    throw new SerializationException(e);  }}  }
class C{  public RegexValidator(String regex,boolean caseSensitive){  this(new String[]{regex},caseSensitive);}  }
class C{  public Long2LongOpenHashMap(final int expected,final float f){  if (f <= 0 || f > 1)   throw new IllegalArgumentException("Load factor must be greater than 0 and smaller than or equal to 1");  if (expected < 0)   throw new IllegalArgumentException("The expected number of elements must be nonnegative");  this.f=f;  n=arraySize(expected,f);  mask=n - 1;  maxFill=maxFill(n,f);  key=new long[n + 1];  value=new long[n + 1];}  }
class C{  public void testSingleMultiPolygonManyPointsHolesRoundTrip() throws SQLException {  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setGenerationAlgorithm(PolygonGenerator.BOX);  pgc.setNumberPoints(1000);  pgc.setNumberHoles(4);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiPolygon pt=(MultiPolygon)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  MultiPolygon pt2=(MultiPolygon)or.read(st);  assertTrue("The input MultiPolygon is not the same as the output MultiPolygon",pt.equals(pt2));}  }
class C{  public boolean shouldPromoteGrandchildren(){  return false;}  }
class C{  public static int[] transformIntArray(Integer[] source){  int[] destin=new int[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public static BufferedImage renderImageToOutput(String url,FSImageWriter fsw,String path,int width) throws IOException {  BufferedImage image;  OutputStream os=null;  try {    Java2DRenderer renderer=new Java2DRenderer(url,url,width);    os=new BufferedOutputStream(new FileOutputStream(path));    image=renderer.getImage();    fsw.write(image,os);    return image;  }  finally {    if (os != null) {      try {        os.close();      } catch (      IOException e) {      }    }  }}  }
class C{  private Exception parametersMethodReturnedWrongType(FrameworkMethod parametersMethod) throws Exception {  String className=getTestClass().getName();  String message=MessageFormat.format("{0}.{1}() must return an Iterable of arrays.",className,parametersMethod.getName());  return new Exception(message);}  }
class C{  public static <T extends SerializableEntity>Deserializer roundtripSerializableEntity(final T originalEntity,final AccountLookup accountLookup){  final JsonSerializer jsonSerializer=new JsonSerializer(true);  originalEntity.serialize(jsonSerializer);  return new JsonDeserializer(jsonSerializer.getObject(),new DeserializationContext(accountLookup));}  }
class C{  public IonSystemBuilder mutable(){  return copy();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    double fx, fy;    float slope;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double eightGridRes=8 * gridRes;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          slope=(float)(Math.atan(Math.sqrt(fx * fx + fy * fy)) * radToDeg);          outputFile.setValue(row,col,slope);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String convertUPCEtoUPCA(String upce){  char[] upceChars=new char[6];  upce.getChars(1,7,upceChars,0);  StringBuilder result=new StringBuilder(12);  result.append(upce.charAt(0));  char lastChar=upceChars[5];switch (lastChar) {case '0':case '1':case '2':    result.append(upceChars,0,2);  result.append(lastChar);result.append("0000");result.append(upceChars,2,3);break;case '3':result.append(upceChars,0,3);result.append("00000");result.append(upceChars,3,2);break;case '4':result.append(upceChars,0,4);result.append("00000");result.append(upceChars[4]);break;default :result.append(upceChars,0,5);result.append("0000");result.append(lastChar);break;}result.append(upce.charAt(7));return result.toString();}  }
class C{  public Object clone() throws CloneNotSupportedException {  mxCell clone=(mxCell)super.clone();  clone.setValue(cloneValue());  clone.setStyle(getStyle());  clone.setCollapsed(isCollapsed());  clone.setConnectable(isConnectable());  clone.setEdge(isEdge());  clone.setVertex(isVertex());  clone.setVisible(isVisible());  clone.setParent(null);  clone.setSource(null);  clone.setTarget(null);  clone.children=null;  clone.edges=null;  mxGeometry geometry=getGeometry();  if (geometry != null) {    clone.setGeometry((mxGeometry)geometry.clone());  }  return clone;}  }
class C{  public JIPJVMException(final Throwable ex){  m_ex=ex;}  }
class C{  public List<Interval> merge(List<Interval> intervals){  List<Interval> res=new ArrayList<>();  if (intervals == null || intervals.size() == 0) {    return res;  }  Collections.sort(intervals,null);  Interval prev=null;  for (  Interval i : intervals) {    if (prev == null || prev.end < i.start) {      res.add(i);      prev=i;    } else     if (i.end > prev.end) {      prev.end=i.end;    }  }  return res;}  }
class C{  protected Date compute(String dateString,String localeString){  if (dateString == null || localeString == null) {    return null;  }  Locale locale=new Locale(localeString);  Date date;  try {    date=((DateFormat)DateFormat.getDateInstance(DateFormat.SHORT,locale).clone()).parse(dateString);    Calendar cal=Calendar.getInstance(locale);    cal.setTime(date);    return cal.getTime();  } catch (  ParseException e) {    throw new FunctionInputException("invalid_argument.date",getFunctionName());  }}  }
class C{  public TaskResourceRep removeInitiatorDecline(URI initiator,URI eventId){  return null;}  }
class C{  public void testSetNCharacterStream() throws Exception {  createTable("testSetNCharacterStream","(c1 NATIONAL CHARACTER(10), c2 NATIONAL CHARACTER(10), c3 NATIONAL CHARACTER(10)) ENGINE=InnoDB");  Properties props1=new Properties();  props1.put("useServerPrepStmts","false");  props1.put("useUnicode","true");  props1.put("characterEncoding","latin1");  Connection conn1=getConnectionWithProps(props1);  com.mysql.jdbc.PreparedStatement pstmt1=(com.mysql.jdbc.PreparedStatement)conn1.prepareStatement("INSERT INTO testSetNCharacterStream (c1, c2, c3) VALUES (?, ?, ?)");  pstmt1.setNCharacterStream(1,null,0);  pstmt1.setNCharacterStream(2,new StringReader("aaa"),3);  pstmt1.setNCharacterStream(3,new StringReader("\'aaa\'"),5);  pstmt1.execute();  ResultSet rs1=this.stmt.executeQuery("SELECT c1, c2, c3 FROM testSetNCharacterStream");  rs1.next();  assertEquals(null,rs1.getString(1));  assertEquals("aaa",rs1.getString(2));  assertEquals("\'aaa\'",rs1.getString(3));  rs1.close();  pstmt1.close();  conn1.close();  createTable("testSetNCharacterStream","(c1 NATIONAL CHARACTER(10), c2 NATIONAL CHARACTER(10), c3 NATIONAL CHARACTER(10)) ENGINE=InnoDB");  Properties props2=new Properties();  props2.put("useServerPrepStmts","false");  props2.put("useUnicode","true");  props2.put("characterEncoding","UTF-8");  Connection conn2=getConnectionWithProps(props2);  com.mysql.jdbc.PreparedStatement pstmt2=(com.mysql.jdbc.PreparedStatement)conn2.prepareStatement("INSERT INTO testSetNCharacterStream (c1, c2, c3) VALUES (?, ?, ?)");  pstmt2.setNCharacterStream(1,null,0);  pstmt2.setNCharacterStream(2,new StringReader("aaa"),3);  pstmt2.setNCharacterStream(3,new StringReader("\'aaa\'"),5);  pstmt2.execute();  ResultSet rs2=this.stmt.executeQuery("SELECT c1, c2, c3 FROM testSetNCharacterStream");  rs2.next();  assertEquals(null,rs2.getString(1));  assertEquals("aaa",rs2.getString(2));  assertEquals("\'aaa\'",rs2.getString(3));  rs2.close();  pstmt2.close();  conn2.close();}  }
class C{  protected void updateOverlayContents(LookAt lookAt,Camera camera){  latView.setText(formatLatitude(lookAt.latitude));  lonView.setText(formatLongitude(lookAt.longitude));  altView.setText(formatAltitude(camera.altitude));}  }
class C{  public static IJavaSearchScope createRelatedProjectsScope(IJavaProject project,int includeMask) throws CoreException {  IJavaProject[] projects=getRelatedProjects(project);  return SearchEngine.createJavaSearchScope(projects,includeMask);}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  dataUpdated(this);}  }
class C{  public void removeFirstLines(Document doc,int amount){  if (amount < 1) {    amount=1;  }  Element firstToRemove=doc.getDefaultRootElement().getElement(0);  Element lastToRemove=doc.getDefaultRootElement().getElement(amount - 1);  int startOffset=firstToRemove.getStartOffset();  int endOffset=lastToRemove.getEndOffset();  try {    doc.remove(startOffset,endOffset);  } catch (  BadLocationException ex) {    Logger.getLogger(ChannelTextPane.class.getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  private static String testTZ(String timeZoneName,Locale locale){  StringBuffer timeZoneResult=new StringBuffer("");  TimeZone tz=TimeZone.getTimeZone(timeZoneName);  sdfEn.setTimeZone(tz);  sdfEnShort.setTimeZone(tz);  sdfLoc.setTimeZone(tz);  sdfLocShort.setTimeZone(tz);  String en, enShort, loc, locShort;  en=sdfEn.format(date);  enShort=sdfEnShort.format(date);  loc=sdfLoc.format(date);  locShort=sdfLocShort.format(date);  String displayLanguage=locale.getDisplayLanguage();  String displayCountry=locale.getDisplayCountry();  if (loc.equals(en)) {    timeZoneResult.append("[");    timeZoneResult.append(displayLanguage);    if (!"".equals(displayCountry)) {      timeZoneResult.append(" ");      timeZoneResult.append(displayCountry);    }    timeZoneResult.append("] timezone \"");    timeZoneResult.append(timeZoneName);    timeZoneResult.append("\" long name \"" + en);    timeZoneResult.append("\" not localized!\n");  }  if (!locShort.equals(enShort)) {    timeZoneResult.append("[");    timeZoneResult.append(displayLanguage);    if (!"".equals(displayCountry)) {      timeZoneResult.append(" ");      timeZoneResult.append(displayCountry);    }    timeZoneResult.append("] timezone \"");    timeZoneResult.append(timeZoneName);    timeZoneResult.append("\" short name \"" + enShort);    timeZoneResult.append("\" is localized \"");    timeZoneResult.append(locShort);    timeZoneResult.append("\"!\n");  }  return timeZoneResult.toString();}  }
class C{  public TimeSeriesPlotPanel(final TimeSeriesModel timeSeriesModel){  model=timeSeriesModel;  setPreferredSize(PREFERRED_SIZE);  setLayout(new BorderLayout());  addAddDeleteButtons();  addClearGraphDataButton();  addPreferencesButton();  add("Center",chartPanel);  add("South",buttonPanel);  init();}  }
class C{  public void load(){  String swcPath=filePath(Swc.CATALOG_XML);  File c=new File(swcPath);  if (!c.exists()) {    throw new SwcException.NotASwcDirectory(dir);  }  fileList=new HashSet<String>();  readFiles(fileList,"",new File(dir));}  }
class C{  private RVMMethod resolveInterfaceMethodInternal(RVMClass declaringClass){  RVMMethod it=declaringClass.findDeclaredMethod(name,descriptor);  if (it != null) {    resolvedMember=it;    return resolvedMember;  }  for (  RVMClass intf : declaringClass.getDeclaredInterfaces()) {    it=searchInterfaceMethods(intf);    if (it != null) {      resolvedMember=it;      return resolvedMember;    }  }  return null;}  }
class C{  @Override public final double valueSparse(int indexOfIndex){  return 1;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  int paramSize(){  int result=0;  for (  Local<?> local : parameters) {    result+=local.size();  }  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  int length;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  child=employeeList.item(0);  childName=child.getNodeName();  length=(int)employeeList.getLength();  if (equals(6,length)) {    assertEqualsIgnoreCase("firstChildNoWhitespace","employeeId",childName);  } else {    assertEqualsIgnoreCase("firstChildWithWhitespace","#text",childName);  }}  }
class C{  public static byte[] readAllLimited(InputStream inStr,int limit) throws IOException {  ByteArrayOutputStream buf=new ByteArrayOutputStream();  pipeAllLimited(inStr,limit,buf);  return buf.toByteArray();}  }
class C{  protected static char[] encodeHex(final byte[] data,final char[] toDigits){  final int l=data.length;  final char[] out=new char[l << 1];  for (int i=0, j=0; i < l; i++) {    out[j++]=toDigits[(0xF0 & data[i]) >>> 4];    out[j++]=toDigits[0x0F & data[i]];  }  return out;}  }
class C{  @Override public void onConnectionFailed(ConnectionResult connectionResult){  ToastUtils.showShort("Could not connect to Google API Client: Error " + connectionResult.getErrorCode());  GooglePlacesActivity.this.finish();}  }
class C{  public static double[][] arrayCopy(double[][] src){  double[][] dest=new double[src.length][];  for (int r=0; r < src.length; r++) {    dest[r]=new double[src[r].length];    System.arraycopy(src[r],0,dest[r],0,src[r].length);  }  return dest;}  }
class C{  public static List<Ignite> allGridsx(){  return allGrids(false);}  }
class C{  public synchronized void remove(IAudioProcessor processor){  processors.remove(processor);  buildFinalProcessor();}  }
class C{  @Override public void onDestroy(){  if (mAdView != null) {    mAdView.destroy();  }  super.onDestroy();}  }
class C{  public URIBuilder addParameter(final String param,final String value){  if (this.queryParams == null) {    this.queryParams=new ArrayList<NameValuePair>();  }  this.queryParams.add(new BasicNameValuePair(param,value));  this.encodedQuery=null;  this.encodedSchemeSpecificPart=null;  return this;}  }
class C{  public boolean copyFile(String source,String destination,boolean remountAsRw,boolean preserveFileAttributes){  CommandCapture command=null;  boolean result=true;  try {    if (remountAsRw) {      RootTools.remount(destination,"RW");    }    if (checkUtil("cp")) {      RootTools.log("cp command is available!");      if (preserveFileAttributes) {        command=new CommandCapture(0,false,"cp -fp " + source + " "+ destination);        Shell.startRootShell().add(command);        commandWait(Shell.startRootShell(),command);        result=command.getExitCode() == 0;      } else {        command=new CommandCapture(0,false,"cp -f " + source + " "+ destination);        Shell.startRootShell().add(command);        commandWait(Shell.startRootShell(),command);        result=command.getExitCode() == 0;      }    } else {      if (checkUtil("busybox") && hasUtil("cp","busybox")) {        RootTools.log("busybox cp command is available!");        if (preserveFileAttributes) {          command=new CommandCapture(0,false,"busybox cp -fp " + source + " "+ destination);          Shell.startRootShell().add(command);          commandWait(Shell.startRootShell(),command);        } else {          command=new CommandCapture(0,false,"busybox cp -f " + source + " "+ destination);          Shell.startRootShell().add(command);          commandWait(Shell.startRootShell(),command);        }      } else {        if (checkUtil("cat")) {          RootTools.log("cp is not available, use cat!");          int filePermission=-1;          if (preserveFileAttributes) {            Permissions permissions=getFilePermissionsSymlinks(source);            filePermission=permissions.getPermissions();          }          command=new CommandCapture(0,false,"cat " + source + " > "+ destination);          Shell.startRootShell().add(command);          commandWait(Shell.startRootShell(),command);          if (preserveFileAttributes) {            command=new CommandCapture(0,false,"chmod " + filePermission + " "+ destination);            Shell.startRootShell().add(command);            commandWait(Shell.startRootShell(),command);          }        } else {          result=false;        }      }    }    if (remountAsRw) {      RootTools.remount(destination,"RO");    }  } catch (  Exception e) {    e.printStackTrace();    result=false;  }  if (command != null) {    result=command.getExitCode() == 0;  }  return result;}  }
class C{  protected int nextInDocumentStart() throws IOException, XMLException {switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  context=(depth == 0) ? TOP_LEVEL_CONTEXT : CONTENT_CONTEXT;return LexicalUnits.S;case '<':switch (nextChar()) {case '?':int c1=nextChar();if (c1 == -1 || !XMLUtilities.isXMLNameFirstCharacter((char)c1)) {throw createXMLException("invalid.pi.target");}context=PI_CONTEXT;int c2=nextChar();if (c2 == -1 || !XMLUtilities.isXMLNameCharacter((char)c2)) {return LexicalUnits.PI_START;}int c3=nextChar();if (c3 == -1 || !XMLUtilities.isXMLNameCharacter((char)c3)) {return LexicalUnits.PI_START;}int c4=nextChar();if (c4 != -1 && XMLUtilities.isXMLNameCharacter((char)c4)) {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.PI_START;}if (c1 == 'x' && c2 == 'm' && c3 == 'l') {context=XML_DECL_CONTEXT;return LexicalUnits.XML_DECL_START;}if ((c1 == 'x' || c1 == 'X') && (c2 == 'm' || c2 == 'M') && (c3 == 'l' || c3 == 'L')) {throw createXMLException("xml.reserved");}return LexicalUnits.PI_START;case '!':switch (nextChar()) {case '-':return readComment();case 'D':context=DOCTYPE_CONTEXT;return readIdentifier("OCTYPE",LexicalUnits.DOCTYPE_START,-1);default :throw createXMLException("invalid.doctype");}default :context=START_TAG_CONTEXT;depth++;return readName(LexicalUnits.START_TAG);}case -1:return LexicalUnits.EOF;default :if (depth == 0) {throw createXMLException("invalid.character");} else {return nextInContent();}}}  }
class C{  public static int min(int a,int b,int c){  if (a < b)   return Math.min(a,c); else   return Math.min(b,c);}  }
class C{  public static ChainingJsonStringParser parseJson(String json){  return new ChainingJsonStringParser(json);}  }
class C{  @NonNull public static String cleanupTag(@NonNull final Object value,final char firstCharacter){  final String tag=((String)value);  String cleanedTag=tag.trim().toLowerCase();  while (cleanedTag.startsWith("##") || cleanedTag.startsWith("@@")) {    cleanedTag=cleanedTag.substring(1);  }  final StringBuffer sb=new StringBuffer(cleanedTag.length());  boolean first=true;  for (  char c : cleanedTag.toCharArray()) {    if (!Character.isLetter(c)) {      if (!first && Character.isDigit(c)) {        sb.append(c);      }      continue;    }    sb.append(c);    first=false;  }  String s=sb.toString();  if (!s.startsWith("" + firstCharacter)) {    s=firstCharacter + s;  }  if (!s.equals(tag)) {    return s;  }  return tag;}  }
class C{  public boolean isType(int type){  if (this.type == 0) {    return false;  }  return (this.type & typeToBitMask(type)) != 0;}  }
class C{  private int init(File f) throws IOException {  Runtime rt=Runtime.getRuntime();  long prePhraseTableLoadMemUsed=rt.totalMemory() - rt.freeMemory();  final long startTime=System.nanoTime();  LineNumberReader reader=IOTools.getReaderFromFile(f);  int numScores=-1;  for (String line; (line=reader.readLine()) != null; ) {    List<List<String>> fields=StringUtils.splitFieldsFast(line,CompiledPhraseTable.FIELD_DELIM);    assert fields.size() == 5 : String.format("phrase table line %d has %d fields: %s",reader.getLineNumber(),fields.size(),line);    Sequence<IString> source=IStrings.toIStringSequence(fields.get(0));    Sequence<IString> target=IStrings.toIStringSequence(fields.get(1));    String targetConstellation=StringUtils.join(fields.get(3));    List<String> scoreList=fields.get(4);    if (numScores < 0) {      numScores=scoreList.size();    } else     if (numScores != scoreList.size()) {      throw new RuntimeException(String.format("Error (line %d): Each entry must have exactly the same number of translation\n" + "scores per line. Prior entries had %d, while the current entry has %d:",reader.getLineNumber(),numScores,scoreList.size()));    }    float[] scores;    try {      scores=IOTools.stringListToNumeric(scoreList);    } catch (    NumberFormatException e) {      e.printStackTrace();      throw new RuntimeException(String.format("Number format error on line %d",reader.getLineNumber()));    }    if (targetConstellation.equals("")) {      addEntry(source,target,null,scores);    } else {      addEntry(source,target,PhraseAlignment.getPhraseAlignment(targetConstellation),scores);    }    if (source.size() > longestSourcePhrase) {      longestSourcePhrase=source.size();    }    if (target.size() > longestTargetPhrase) {      longestTargetPhrase=target.size();    }  }  reader.close();  long postPhraseTableLoadMemUsed=rt.totalMemory() - rt.freeMemory();  double elapsedTime=((double)System.nanoTime() - startTime) / 1e9;  System.err.printf("Done loading phrase table: %s (mem used: %d MiB time: %.3f s)%n",f.getAbsolutePath(),(postPhraseTableLoadMemUsed - prePhraseTableLoadMemUsed) / (1024 * 1024),elapsedTime);  System.err.println("Longest foreign phrase: " + longestSourcePhrase);  return numScores;}  }
class C{  protected VersionInfo(String pckg,String module,String release,String time,String clsldr){  if (pckg == null) {    throw new IllegalArgumentException("Package identifier must not be null.");  }  infoPackage=pckg;  infoModule=(module != null) ? module : UNAVAILABLE;  infoRelease=(release != null) ? release : UNAVAILABLE;  infoTimestamp=(time != null) ? time : UNAVAILABLE;  infoClassloader=(clsldr != null) ? clsldr : UNAVAILABLE;}  }
class C{  private static List<Command> loadRewrites(ContentResolver contentResolver,Uri uri) throws IOException {  InputStream inputStream=contentResolver.openInputStream(uri);  List<Command> commands=new ArrayList<>();  if (inputStream != null) {    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));    String line;    while ((line=reader.readLine()) != null) {      addLine(commands,line);    }    inputStream.close();  }  return commands;}  }
class C{  public void insert(T object,int index){synchronized (mLock) {    mObjects.add(index,object);  }  if (mNotifyOnChange)   notifyItemInserted(index);}  }
class C{  public static int ESHUTDOWN(){  return Errno.ESHUTDOWN.intValue();}  }
class C{  public WBMPImageWriter(ImageWriterSpi originator){  super(originator);}  }
class C{  public ArithmeticException(){  super();}  }
class C{  private boolean isLoggable(){  return Log.isLoggable(tag,level);}  }
class C{  public ImageLoadQueue(){  this._loadQueue=new LinkedList();}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VinciLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public void cancelAnimations(){  if (mFlashAnim != null && mFlashAnim.isRunning()) {    mFlashAnim.cancel();  }  if (mCaptureAnimator != null && mCaptureAnimator.isStarted()) {    mCaptureAnimator.cancel();  }}  }
class C{  protected void writeLocation(String loc) throws IOException {  hadAnnotations|=(loc != null);  locOut.writeObject(loc);}  }
class C{  public int currentTexture(){  int textureUnitIndex=this.textureUnit - GLES20.GL_TEXTURE0;  return this.textureId[textureUnitIndex];}  }
class C{  public boolean isInitialized(){  return (initialized);}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  public CharSequence loadDescription(PackageManager pm){  if (descriptionRes != 0) {    CharSequence label=pm.getText(packageName,descriptionRes,this);    if (label != null) {      return label;    }  }  return null;}  }
class C{  public int difference(String s1,String s2) throws EncoderException {  return difference(this,s1,s2);}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public static String prepareInsertTemplateWithoutColumn(String tableName,int columnNum){  return "INSERT INTO " + tableName + " VALUES "+ generatePlaceholder(columnNum);}  }
class C{  public Task<FileShareRestRep> export(URI id,FileSystemExportParam input){  return postTask(input,getExportsUrl(),id);}  }
class C{  public void addEntry(LocalVarEntry e){  vars.addElement(e);}  }
class C{  protected Shape createInnerFocus(final SegmentType segmentType,final int x,final int y,final int w,final int h){switch (segmentType) {case FIRST:    return shapeGenerator.createRoundRectangle(x - 1,y - 1,w + 2,h + 1,CornerSize.INNER_FOCUS,CornerStyle.ROUNDED,CornerStyle.ROUNDED,CornerStyle.SQUARE,CornerStyle.SQUARE);case MIDDLE:  return shapeGenerator.createRectangle(x - 2,y - 1,w + 3,h + 1);case LAST:return shapeGenerator.createRoundRectangle(x - 2,y - 1,w + 2,h + 1,CornerSize.INNER_FOCUS,CornerStyle.SQUARE,CornerStyle.SQUARE,CornerStyle.ROUNDED,CornerStyle.ROUNDED);default :return shapeGenerator.createRoundRectangle(x - 1,y - 1,w + 1,h + 1,CornerSize.INNER_FOCUS);}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @After public void tearDown(){  file=null;}  }
class C{  @Override public int findSegment(Point2D.Double find,double tolerance){  if (get(TRANSFORM) != null) {    try {      find=(Point2D.Double)get(TRANSFORM).inverseTransform(find,new Point2D.Double());    } catch (    NoninvertibleTransformException ex) {      System.err.println("Warning: SVGBezierFigure.findSegment. Figure has noninvertible Transform.");    }  }  return getBezierPath().findSegment(find,tolerance);}  }
class C{  public Money exchange(final Money amount){switch (type_) {case Direct:    if (amount.currency().eq(source_)) {      return new Money(amount.value() * rate_,target_);    } else     if (amount.currency().eq(target_)) {      return new Money(amount.value() / rate_,source_);    } else {      throw new LibraryException("exchange rate not applicable");    }case Derived:  if (amount.currency() == rateChain_.first().source() || amount.currency() == rateChain_.first().target()) {    return rateChain_.second().exchange(rateChain_.first().exchange(amount));  } else   if (amount.currency() == rateChain_.second().source() || amount.currency() == rateChain_.second().target()) {    return rateChain_.first().exchange(rateChain_.second().exchange(amount));  } else {    throw new LibraryException("exchange rate not applicable");  }default :throw new LibraryException("unknown exchange-rate type");}}  }
class C{  public boolean isMax(){  return value.isMax();}  }
class C{  public static void cursorFillWindow(final ICursor cursor,int position,final CursorWindow window){  if (position < 0 || position >= cursor.getCount()) {    return;  }  final int oldPos=cursor.getPosition();  final int numColumns=cursor.getColumnCount();  window.clear();  window.setStartPosition(position);  window.setNumColumns(numColumns);  if (cursor.moveToPosition(position)) {    do {      if (!window.allocRow()) {        break;      }      for (int i=0; i < numColumns; i++) {        final int type=cursor.getType(i);        final boolean success;switch (type) {case ICursor.FIELD_TYPE_NULL:          success=window.putNull(position,i);        break;case ICursor.FIELD_TYPE_INTEGER:      success=window.putLong(cursor.getLong(i),position,i);    break;case ICursor.FIELD_TYPE_FLOAT:  success=window.putDouble(cursor.getDouble(i),position,i);break;case ICursor.FIELD_TYPE_BLOB:{final byte[] value=cursor.getBlob(i);success=value != null ? window.putBlob(value,position,i) : window.putNull(position,i);break;}default :case ICursor.FIELD_TYPE_STRING:{final String value=cursor.getString(i);success=value != null ? window.putString(value,position,i) : window.putNull(position,i);break;}}if (!success) {window.freeLastRow();break;}}position+=1;} while (cursor.moveToNext());}cursor.moveToPosition(oldPos);}  }
class C{  public GF2Polynomial(GF2Polynomial b){  len=b.len;  blocks=b.blocks;  value=IntUtils.clone(b.value);}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || this.getClass() != o.getClass())   return false;  AbstractIconRetriever that=(AbstractIconRetriever)o;  return this.retrieverPath != null ? this.retrieverPath.equals(that.retrieverPath) : that.retrieverPath == null;}  }
class C{  public static BigDecimal allocatedAmt(int C_Invoice_ID,int C_Currency_ID,int C_ConversionType_ID,BigDecimal MultiplierAP) throws SQLException {  BigDecimal paidAmt=Adempiere.ZERO;  String sql="SELECT a.AD_Client_ID, a.AD_Org_ID," + " al.Amount, al.DiscountAmt, al.WriteOffAmt," + " a.C_Currency_ID, a.DateTrx "+ "FROM C_AllocationLine al"+ " INNER JOIN C_AllocationHdr a ON (al.C_AllocationHdr_ID=a.C_AllocationHdr_ID) "+ "WHERE al.C_Invoice_ID=?"+ " AND a.IsActive='Y'";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,C_Invoice_ID);  ResultSet rs=pstmt.executeQuery();  while (rs.next()) {    int AD_Client_ID=rs.getInt(1);    int AD_Org_ID=rs.getInt(2);    BigDecimal Amount=rs.getBigDecimal(3);    BigDecimal DiscountAmt=rs.getBigDecimal(4);    BigDecimal WriteOffAmt=rs.getBigDecimal(5);    int C_CurrencyFrom_ID=rs.getInt(6);    Timestamp DateTrx=rs.getTimestamp(7);    BigDecimal invAmt=Amount.add(DiscountAmt).add(WriteOffAmt);    BigDecimal allocation=Currency.convert(invAmt.multiply(MultiplierAP),C_CurrencyFrom_ID,C_Currency_ID,DateTrx,C_ConversionType_ID,AD_Client_ID,AD_Org_ID);    if (allocation != null)     paidAmt=paidAmt.add(allocation);  }  rs.close();  pstmt.close();  pstmt=null;  return paidAmt;}  }
class C{  public boolean isWrapOnTyping(@Nullable Language language){  if (language != null) {    CommonCodeStyleSettings langSettings=getCommonSettings(language);    if (langSettings != null) {      if (langSettings.WRAP_ON_TYPING != WrapOnTyping.DEFAULT.intValue) {        return langSettings.WRAP_ON_TYPING == WrapOnTyping.WRAP.intValue;      }    }  }  return WRAP_WHEN_TYPING_REACHES_RIGHT_MARGIN;}  }
class C{  public void usingAnd(){  BiPredicate<Employee,Manager> isPersonalAssistant=empManagerPredicate.and(managerHasAssistantPredicate);}  }
class C{  public TransactionOutput addOutput(Coin value,Address address){  return addOutput(new TransactionOutput(params,this,value,address));}  }
class C{  static void test4(File blah) throws Exception {  try (FileChannel fc=new FileOutputStream(blah,true).getChannel()){    fc.tryLock().release();    fc.tryLock(0L,1L,false).release();    fc.lock().release();    fc.lock(0L,1L,false).release();  }   try (FileChannel fc=FileChannel.open(blah.toPath(),APPEND)){    fc.tryLock().release();    fc.tryLock(0L,1L,false).release();    fc.lock().release();    fc.lock(0L,1L,false).release();  } }  }
class C{  public int numCps(){  if (cpStr2Int == null) {    return 0;  } else {    return cpStr2Int.size();  }}  }
class C{  public static boolean startWithSpace(String s){  return s.length() > 0 && Character.isWhitespace(s.charAt(0));}  }
class C{  private void onOpenConversation(){  new LoadConversationTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,null);}  }
class C{  public void circle(Object[] vertices,double r,double left,double top){  int vertexCount=vertices.length;  double phi=2 * Math.PI / vertexCount;  for (int i=0; i < vertexCount; i++) {    if (isVertexMovable(vertices[i])) {      setVertexLocation(vertices[i],left + r + r * Math.sin(i * phi),top + r + r * Math.cos(i * phi));    }  }}  }
class C{  public BRqTest(String name){  super(name);}  }
class C{  public Compiler(){  m_errorHandler=null;  m_locator=null;}  }
class C{  public void init(){  Debug.message("eomg","EditableOMGraphicList.init()");  getEditables();  setStateMachine(new ListStateMachine(this));}  }
class C{  void verify(){  byte[] d=digest.digest();  if (!MessageDigest.isEqual(d,Base64.decode(hash))) {    throw invalidDigest(JarFile.MANIFEST_NAME,name,jarName);  }  verifiedEntries.put(name,certificates);}  }
class C{  long totalLength(){  return mTotalLength;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.960 -0500",hash_original_method="025E1AD213DC2532673CB1D1FC75B1CC",hash_generated_method="AF9BD842838DEB26BE1BF73447B9C978") public ContentEncodingParser(String contentEncoding){  super(contentEncoding);}  }
class C{  public Bitmap decodeBestRegion(int requiredWidth,int requiredHeight,int gravity){  boolean upscaling=false;  int realWidth=getWidth();  int realHeight=getHeight();  BitmapFactory.Options options=new BitmapFactory.Options();  if (!(requiredWidth <= realWidth && requiredHeight <= realHeight)) {    float widthRatio=(float)requiredWidth / realWidth;    float heightRatio=(float)requiredHeight / realHeight;    float destinationRatio=Math.max(widthRatio,heightRatio);    requiredWidth=Math.round(((float)requiredWidth / destinationRatio));    requiredHeight=Math.round(((float)requiredHeight / destinationRatio));    upscaling=true;  }  boolean limitReached=false;  int basePow=0;  int actualScale;  while (!limitReached) {    actualScale=(int)Math.pow(2,basePow + 1);    if (requiredWidth <= realWidth / actualScale && requiredHeight <= realHeight / actualScale) {      basePow++;    } else {      limitReached=true;    }  }  options.inSampleSize=(int)Math.pow(2,basePow);  int fromTop=0;  int fromLeft=0;  if (gravity == Gravity.CENTER) {    fromTop=(realHeight - requiredHeight * options.inSampleSize) / 2;    fromLeft=(realWidth - requiredWidth * options.inSampleSize) / 2;  } else {    int horizontalGravity=gravity & Gravity.HORIZONTAL_GRAVITY_MASK;    int verticalGravity=gravity & Gravity.VERTICAL_GRAVITY_MASK;    if (horizontalGravity == Gravity.LEFT)     fromLeft=0; else     if (horizontalGravity == Gravity.RIGHT)     fromLeft=realWidth - requiredWidth * options.inSampleSize; else     if (horizontalGravity == Gravity.CENTER_HORIZONTAL)     fromLeft=(realWidth - requiredWidth * options.inSampleSize) / 2;    if (verticalGravity == Gravity.TOP)     fromTop=0; else     if (verticalGravity == Gravity.BOTTOM)     fromTop=realHeight - requiredHeight * options.inSampleSize; else     if (verticalGravity == Gravity.CENTER_VERTICAL)     fromTop=(realHeight - requiredHeight * options.inSampleSize) / 2;  }  Rect area=new Rect(fromLeft,fromTop,fromLeft + requiredWidth * options.inSampleSize,fromTop + requiredHeight * options.inSampleSize);  return impl.decodeRegion(area,options);}  }
class C{  public static void quote(Appendable buffer,String input){  try {    buffer.append('"');    for (int i=0; i < input.length(); ++i) {      char c=input.charAt(i);      if (c >= 32) {        if (c == '"' || c == '\\')         buffer.append('\\');        buffer.append(c);      } else {        char escape=escapes[c];        if (escape == 0xFFFF) {          buffer.append('\\').append('u').append('0').append('0');          if (c < 0x10)           buffer.append('0');          buffer.append(Integer.toString(c,16));        } else {          buffer.append('\\').append(escape);        }      }    }    buffer.append('"');  } catch (  IOException x) {    throw new RuntimeException(x);  }}  }
class C{  public String deleteThickLogicalUnits(String systemObjectId,Set<String> logicalUnitIdList,String model) throws Exception {  return hdsApiVolumeManager.deleteThickLogicalUnits(systemObjectId,logicalUnitIdList,model);}  }
class C{  void submit(String submitKey,String submitVal){  if (action == null) {    return;  }  boolean error=false;  String url=action;  String params=null;  if (comps.size() > 0) {    params="";    for (Enumeration e=comps.keys(); e.hasMoreElements(); ) {      String key=(String)e.nextElement();      Object input=comps.get(key);      key=HTMLUtils.encodeString(key);      String value="";      if (input instanceof String) {        value=HTMLUtils.encodeString((String)input);        params+=key + "=" + value+ "&";      } else       if (input instanceof Hashtable) {        Hashtable options=(Hashtable)input;        for (Enumeration e2=options.keys(); e2.hasMoreElements(); ) {          Button b=(Button)e2.nextElement();          if (b.isSelected()) {            params+=key + "=" + HTMLUtils.encodeString((String)options.get(b))+ "&";          }        }      } else       if (input instanceof TextArea) {        TextArea tf=((TextArea)input);        String text=tf.getText();        String errorMsg=null;        if (HTMLComponent.SUPPORT_INPUT_FORMAT) {          boolean ok=false;          if (text.equals("")) {            if (emptyNotOk.contains(tf)) {              errorMsg=htmlC.getUIManager().localize("html.format.emptynotok","Field can't be empty");              error=true;            } else             if (emptyOk.contains(tf)) {              ok=true;            }          }          if ((!error) && (!ok)) {            HTMLInputFormat inputFormat=(HTMLInputFormat)inputFormats.get(tf);            if ((inputFormat != null) && (!inputFormat.verifyString(text))) {              String emptyStr="";              if (emptyOk.contains(tf)) {                emptyStr=htmlC.getUIManager().localize("html.format.oremptyok"," or an empty string");              } else               if (emptyNotOk.contains(tf)) {                emptyStr=htmlC.getUIManager().localize("html.format.andemptynotok"," and cannot be an empty string");              }              errorMsg=htmlC.getUIManager().localize("html.format.errordesc","Malformed text. Correct value: ") + inputFormat.toString() + emptyStr;              error=true;            }          }        }        if (htmlC.getHTMLCallback() != null) {          int type=HTMLCallback.FIELD_TEXT;          if ((tf.getConstraint() & TextArea.PASSWORD) != 0) {            type=HTMLCallback.FIELD_PASSWORD;          }          text=htmlC.getHTMLCallback().fieldSubmitted(htmlC,tf,url,key,text,type,errorMsg);        }        if (errorMsg == null) {          params+=key + "=" + HTMLUtils.encodeString(text)+ "&";        }      } else       if (input instanceof ComboBox) {        Object item=((ComboBox)input).getSelectedItem();        if (item instanceof OptionItem) {          value=((OptionItem)item).getValue();          params+=key + "=" + HTMLUtils.encodeString(value)+ "&";        }      } else       if (input instanceof MultiComboBox) {        Vector selected=((MultiComboBox)input).getSelected();        for (int i=0; i < selected.size(); i++) {          Object item=selected.elementAt(i);          if (item instanceof OptionItem) {            value=((OptionItem)item).getValue();            params+=key + "=" + HTMLUtils.encodeString(value)+ "&";          }        }      }    }    if (params.endsWith("&")) {      params=params.substring(0,params.length() - 1);    }  }  if (submitKey != null) {    if (params == null) {      params="";    }    if (!params.equals("")) {      params=params + "&";    }    params=params + HTMLUtils.encodeString(submitKey) + "="+ HTMLUtils.encodeString(submitVal);  }  if (!error) {    DocumentInfo docInfo=new DocumentInfo(url,params,isPostMethod);    if ((encType != null) && (!encType.equals(""))) {      docInfo.setEncoding(encType);    }    htmlC.setPage(docInfo);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ABSTRACT_CASE_CLAUSE__STATEMENTS:    return getStatements();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public MethodVisitor visitMethod(int access,String base,String desc,String signature,String[] exceptions){  MethodVisitor mv=cv.visitMethod(access,base,desc,signature,exceptions);  if (mv != null) {    JSRInlinerAdapter jsria=new JSRInlinerAdapter(mv,access,base,desc,signature,exceptions);    AllocationMethodAdapter aimv=new AllocationMethodAdapter(jsria,recorderClass,recorderMethod);    LocalVariablesSorter lvs=new LocalVariablesSorter(access,desc,aimv);    aimv.lvs=lvs;    mv=lvs;  }  return mv;}  }
class C{  public void mdctCalc(float[] output,int outputOffset,float[] input,int inputOffset){  int n=1 << mdctBits;  int n2=n >> 1;  int n4=n >> 2;  int n8=n >> 3;  int n3=3 * n4;  for (int i=0; i < n8; i++) {    float re=-input[inputOffset + 2 * i + n3] - input[inputOffset + n3 - 1 - 2 * i];    float im=-input[inputOffset + n4 + 2 * i] + input[inputOffset + n4 - 1 - 2 * i];    int j=revtab[i];    CMUL(output,outputOffset + 2 * j + 0,outputOffset + 2 * j + 1,re,im,-tcos[i],tsin[i]);    re=input[inputOffset + 2 * i] - input[inputOffset + n2 - 1 - 2 * i];    im=-input[inputOffset + n2 + 2 * i] - input[inputOffset + n - 1 - 2 * i];    j=revtab[n8 + i];    CMUL(output,outputOffset + 2 * j + 0,outputOffset + 2 * j + 1,re,im,-tcos[n8 + i],tsin[n8 + i]);  }  fftCalcFloat(output,outputOffset);  final float r[]=new float[4];  for (int i=0; i < n8; i++) {    CMUL(r,3,0,output[outputOffset + (n8 - i - 1) * 2 + 0],output[outputOffset + (n8 - i - 1) * 2 + 1],-tsin[n8 - i - 1],-tcos[n8 - i - 1]);    CMUL(r,1,2,output[outputOffset + (n8 + i) * 2 + 0],output[outputOffset + (n8 + i) * 2 + 1],-tsin[n8 + i],-tcos[n8 + i]);    output[outputOffset + (n8 - i - 1) * 2 + 0]=r[0];    output[outputOffset + (n8 - i - 1) * 2 + 1]=r[1];    output[outputOffset + (n8 + i) * 2 + 0]=r[2];    output[outputOffset + (n8 + i) * 2 + 1]=r[3];  }}  }
class C{  public static double largeEstimatorCutoff(final int log2m,final int registerSizeInBits){  return (TWO_TO_L[(REG_WIDTH_INDEX_MULTIPLIER * registerSizeInBits) + log2m]) / 30.0;}  }
class C{  public FormUploadException(final String msg){  this(msg,null);}  }
class C{  public final int offsetToX(int line,int offset){  painter.currentLineTokens=null;  return _offsetToX(line,offset);}  }
class C{  public static Class toClass(ClassFile cf,ClassLoader loader) throws CannotCompileException {  return toClass(cf,loader,null);}  }
class C{  @RequestMapping(value="/jobs/ids/{id}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_JOBS_DELETE) public Job deleteJob(@PathVariable("id") String id,@RequestBody JobDeleteRequest jobDeleteRequest) throws Exception {  return jobService.deleteJob(id,jobDeleteRequest);}  }
class C{  public static int repoZipArchiveSize(){  int size=-1;  try {    PACKAGE_MANAGER.setPackageRepositoryURL(REP_URL);    String numPackagesS=PACKAGE_MANAGER.getPackageRepositoryURL().toString() + "/repoSize.txt";    URLConnection conn=null;    URL connURL=new URL(numPackagesS);    if (PACKAGE_MANAGER.setProxyAuthentication(connURL)) {      conn=connURL.openConnection(PACKAGE_MANAGER.getProxy());    } else {      conn=connURL.openConnection();    }    conn.setConnectTimeout(30000);    BufferedReader bi=new BufferedReader(new InputStreamReader(conn.getInputStream()));    String n=bi.readLine();    try {      size=Integer.parseInt(n);    } catch (    NumberFormatException ne) {      System.err.println("[WekaPackageManager] problem parsing the size " + "of repository zip archive from the server.");    }    bi.close();  } catch (  Exception ex) {    ex.printStackTrace();  }  return size;}  }
class C{  public int readIntFromXML(Element node) throws Exception {  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  return ((Integer)getPrimitive(node)).intValue();}  }
class C{  public Token peekToken(){  while (needMoreTokens()) {    fetchMoreTokens();  }  return this.tokens.get(0);}  }
class C{  private JobDefinition createJobDefinitionFromEntity(JobDefinitionEntity jobDefinitionEntity) throws IOException {  JobDefinition jobDefinition=new JobDefinition();  jobDefinition.setId(jobDefinitionEntity.getId());  jobDefinition.setNamespace(jobDefinitionEntity.getNamespace().getCode());  jobDefinition.setJobName(jobDefinitionEntity.getName());  jobDefinition.setDescription(jobDefinitionEntity.getDescription());  String s3BucketName=jobDefinitionEntity.getS3BucketName();  String s3ObjectKey=jobDefinitionEntity.getS3ObjectKey();  if (s3BucketName != null && s3ObjectKey != null) {    S3PropertiesLocation s3PropertiesLocation=new S3PropertiesLocation();    s3PropertiesLocation.setBucketName(s3BucketName);    s3PropertiesLocation.setKey(s3ObjectKey);    jobDefinition.setS3PropertiesLocation(s3PropertiesLocation);  }  ProcessDefinition processDefinition=activitiRepositoryService.createProcessDefinitionQuery().processDefinitionId(jobDefinitionEntity.getActivitiId()).singleResult();  InputStream xmlStream=activitiRepositoryService.getResourceAsStream(processDefinition.getDeploymentId(),processDefinition.getResourceName());  jobDefinition.setActivitiJobXml(IOUtils.toString(xmlStream));  List<Parameter> parameters=new ArrayList<>();  jobDefinition.setParameters(parameters);  for (  JobDefinitionParameterEntity parameterEntity : jobDefinitionEntity.getParameters()) {    Parameter parameter=new Parameter(parameterEntity.getName(),parameterEntity.getValue());    jobDefinitionHelper.maskPassword(parameter);    parameters.add(parameter);  }  jobDefinition.setLastUpdatedByUserId(jobDefinitionEntity.getUpdatedBy());  return jobDefinition;}  }
class C{  public ColumnMetadata(Table table,String column,Comparator cmp,boolean dynamic){  m_table=table;  m_field=column;  m_cmp=cmp;  m_dynamic=dynamic;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:05.005 -0500",hash_original_method="227FECEA7131D056EF18EE2E9369B9A1",hash_generated_method="459DC1330B09FE06A09C222972E31D1D") @Override protected byte[] decrypt(byte type,byte[] fragment,int offset,int len){  byte[] data=decCipher.update(fragment,offset,len);  byte[] content;  if (block_size != 0) {    int padding_length=data[data.length - 1];    for (int i=0; i < padding_length; i++) {      if (data[data.length - 2 - i] != padding_length) {        throw new AlertException(AlertProtocol.DECRYPTION_FAILED,new SSLProtocolException("Received message has bad padding"));      }    }    content=new byte[data.length - hash_size - padding_length- 1];  } else {    content=new byte[data.length - hash_size];  }  byte[] mac_value;  mac_material_part[0]=type;  mac_material_part[1]=(byte)((0x00FF00 & content.length) >> 8);  mac_material_part[2]=(byte)(0x0000FF & content.length);  messageDigest.update(mac_read_secret);  messageDigest.update(pad_1);  messageDigest.update(read_seq_num);  messageDigest.update(mac_material_part);  messageDigest.update(data,0,content.length);  mac_value=messageDigest.digest();  messageDigest.update(mac_read_secret);  messageDigest.update(pad_2);  messageDigest.update(mac_value);  mac_value=messageDigest.digest();  if (logger != null) {    logger.println("Decrypted:");    logger.print(data);    logger.println("Expected mac value:");    logger.print(mac_value);  }  for (int i=0; i < hash_size; i++) {    if (mac_value[i] != data[i + content.length]) {      throw new AlertException(AlertProtocol.BAD_RECORD_MAC,new SSLProtocolException("Bad record MAC"));    }  }  System.arraycopy(data,0,content,0,content.length);  incSequenceNumber(read_seq_num);  return content;}  }
class C{  public Node removeNamedItemNS(String namespaceURI,String localName) throws DOMException {  throw new DTMException(DTMException.NO_MODIFICATION_ALLOWED_ERR);}  }
class C{  public void refreshCompletely(){  initialize();}  }
class C{  @Override public void createUser(User user) throws SQLException {  String skeleton;  if (user.isPrivileged()) {    skeleton="grant all on *.* to %s@'%%' identified by '%s' with grant option";    String sql=String.format(skeleton,user.getLogin(),user.getPassword());    execute(sql);  } else {    skeleton="grant select on *.* to %s@'%%' identified by '%s' with grant option";    String sql=String.format(skeleton,user.getLogin(),user.getPassword());    execute(sql);    Statement stmt=null;    ResultSet rs=null;    String currentSchema=null;    try {      stmt=dbConn.createStatement();      rs=stmt.executeQuery("select database() as \"database\"");      while (rs.next()) {        currentSchema=rs.getString("database");      }    }  finally {      if (rs != null)       rs.close();      if (stmt != null)       stmt.close();    }    skeleton="grant all on %s.* to %s@'%%' identified  by '%s' with grant option";    String sql2=String.format(skeleton,currentSchema,user.getLogin(),user.getPassword());    execute(sql2);  }}  }
class C{  public Boolean isEagerZero(){  return eagerZero;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.188 -0400",hash_original_method="C1AF40BAF4362B77A9C74A69039A6769",hash_generated_method="8A0434476D39CA378011B884C5880AAF") public static void write(File file,CharSequence data,String encoding,boolean append) throws IOException {  write(file,data,Charsets.toCharset(encoding),append);}  }
class C{  private static void createBillingResultDataMock(){  Long subscriptionKey=1L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(CURRENCY_EUR,BigDecimal.valueOf(120),getProductHistory(subscriptionKey)));  subscriptionKey=2L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(CURRENCY_EUR,BigDecimal.valueOf(210.15),getProductHistory(subscriptionKey)));  subscriptionKey=3L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(CURRENCY_EUR,BigDecimal.valueOf(187.99),getProductHistory(subscriptionKey)));  subscriptionKey=4L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(CURRENCY_EUR,BigDecimal.valueOf(26),getProductHistory(subscriptionKey)));  subscriptionKey=5L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(CURRENCY_USD,BigDecimal.valueOf(523.56),getProductHistory(subscriptionKey)));  subscriptionKey=6L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(CURRENCY_EUR,BigDecimal.valueOf(176.44),getProductHistory(subscriptionKey)));  printTestData();}  }
class C{  public ScientificFormat(int sigDigit,int maxWidth,boolean SciNote){  setSigDigits(sigDigit);  setMaxWidth(maxWidth);  setScientificNotationStyle(SciNote);}  }
class C{  public Boolean isNestedHVEnabled(){  return nestedHVEnabled;}  }
class C{  public Document createDefaultDocument(Font defaultFont,Color foreground){  StyleSheet styles=getStyleSheet();  StyleSheet ss=new StyleSheet();  ss.addStyleSheet(styles);  BasicDocument doc=new BasicDocument(ss,defaultFont,foreground);  doc.setAsynchronousLoadPriority(Integer.MAX_VALUE);  doc.setPreservesUnknownTags(false);  return doc;}  }
class C{  public void add(Handler handler){  _logHandlerConfig.add(handler);}  }
class C{  @Override public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (type.equals(jmri.ProgrammerManager.class)) {    return true;  }  if (type.equals(jmri.GlobalProgrammerManager.class)) {    return getProgrammerManager().isGlobalProgrammerAvailable();  }  if (type.equals(jmri.AddressedProgrammerManager.class)) {    return getProgrammerManager().isAddressedModePossible();  }  if (type.equals(jmri.ThrottleManager.class)) {    return true;  }  if (type.equals(jmri.PowerManager.class)) {    return true;  }  if (type.equals(jmri.SensorManager.class)) {    return true;  }  if (type.equals(jmri.TurnoutManager.class)) {    return true;  }  if (type.equals(jmri.LightManager.class)) {    return true;  }  if (type.equals(jmri.ReporterManager.class)) {    return true;  }  if (type.equals(jmri.ConsistManager.class)) {    return true;  }  if (type.equals(jmri.ClockControl.class)) {    return true;  }  if (type.equals(jmri.CommandStation.class)) {    return true;  }  return false;}  }
class C{  public void startUpdate(String targetId) throws IOException {  startChangesIfNecessary();  inUpdate=true;  ResponseWriter writer=getWrapped();  writer.startElement("update",null);  writer.writeAttribute("id",targetId,null);  writer.startCDATA();}  }
class C{  public final void add(Matrix4f m1,Matrix4f m2){  this.m00=m1.m00 + m2.m00;  this.m01=m1.m01 + m2.m01;  this.m02=m1.m02 + m2.m02;  this.m03=m1.m03 + m2.m03;  this.m10=m1.m10 + m2.m10;  this.m11=m1.m11 + m2.m11;  this.m12=m1.m12 + m2.m12;  this.m13=m1.m13 + m2.m13;  this.m20=m1.m20 + m2.m20;  this.m21=m1.m21 + m2.m21;  this.m22=m1.m22 + m2.m22;  this.m23=m1.m23 + m2.m23;  this.m30=m1.m30 + m2.m30;  this.m31=m1.m31 + m2.m31;  this.m32=m1.m32 + m2.m32;  this.m33=m1.m33 + m2.m33;}  }
class C{  private XSDatatype deriveSimpleType(XSDatatype baseType,Element xsdRestriction){  TypeIncubator incubator=new TypeIncubator(baseType);  ValidationContext context=null;  try {    for (Iterator<Element> iter=xsdRestriction.elementIterator(); iter.hasNext(); ) {      Element element=iter.next();      String name=element.getName();      String value=element.attributeValue("value");      boolean fixed=AttributeHelper.booleanValue(element,"fixed");      incubator.addFacet(name,value,fixed,context);    }    String newTypeName=null;    return incubator.derive("",newTypeName);  } catch (  DatatypeException e) {    onSchemaError("Invalid restriction: " + e.getMessage() + " when trying to build restriction: "+ xsdRestriction);    return null;  }}  }
class C{  private ReplaceTokens createWarDirToken(){  ReplaceTokens.Token tokenWarDir=new ReplaceTokens.Token();  tokenWarDir.setKey(TOKEN_KEY_WAR_DIR);  tokenWarDir.setValue(new File(getHome(),"webapp/host").toString());  ReplaceTokens replaceWarDir=new ReplaceTokens();  replaceWarDir.addConfiguredToken(tokenWarDir);  return replaceWarDir;}  }
class C{  public static Paint newGuidelinePaint(){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(SEMI_TRANSPARENT));  paint.setStrokeWidth(DEFAULT_GUIDELINE_THICKNESS_PX);  return paint;}  }
class C{  public boolean visit(ThrowStatement node){  return true;}  }
class C{  protected void loadValue(String sValue){  sValue=sValue.trim();  try {    int r=Integer.parseInt(sValue.substring(1,3),16);    int g=Integer.parseInt(sValue.substring(3,5),16);    int b=Integer.parseInt(sValue.substring(5,7),16);    value=new Color(r,g,b);  } catch (  NumberFormatException nfe) {    revertToDefault();  }catch (  StringIndexOutOfBoundsException sioobe) {    revertToDefault();  }}  }
class C{  private Set<KnowledgeEdge> generateForbiddenEdgeList(){  Set<KnowledgeEdge> forbiddenEdges=new HashSet<>();  List<String> vars=new ArrayList<>(tierMap.keySet());  for (int i=0; i < vars.size(); i++) {    for (int j=0; j < vars.size(); j++) {      if (i == j) {        continue;      }      String var1=vars.get(i);      String var2=vars.get(j);      if (isForbiddenByTiers(var1,var2)) {        forbiddenEdges.add(new KnowledgeEdge(var1,var2));      }    }  }  for (  KnowledgeGroup group : this.knowledgeGroups) {    if (group.getType() == KnowledgeGroup.FORBIDDEN) {      forbiddenEdges.addAll(group.getEdges());    }  }  return forbiddenEdges;}  }
class C{  private void generateAlwaysBlock(Fingerprint.Payload payload,ConditionalBlock block,Fingerprint.Payload.Always always){  LinearBlock linearBlock=null;  for (  Return return_ : always.getReturn()) {    DetailBlockTemplate template=new DetailBlockTemplate().setFingerprintName(payload.getFor()).setReturn(return_);    if (linearBlock == null) {      linearBlock=new LinearBlock(template);    } else {      linearBlock.appendBody(new LinearBlock(template));    }  }  block.appendBody(linearBlock);}  }
class C{  private String numberToMd5(String number,MD5 md5){  String hash="";  if (!TextUtils.isEmpty(number)) {    try {      md5.Init();      md5.Update(number,HTTP.ISO_8859_1);      hash=md5.asHex();    } catch (    UnsupportedEncodingException e) {      hash="";    }  }  return hash;}  }
class C{  private boolean isSubscribed(){  final SharedPreferences settings=getSharedPreferencesForCurrentUser();  return settings.getBoolean(HAS_SUBSCRIPTION,false);}  }
class C{  @SafeVarargs public static <T>OutputMatcher<T> allOf(OutputMatcher<T>... matchers){  return OutputMatcherFactory.create(AllOf.allOf(matchers));}  }
class C{  public CategoricalDistribution fixedLagSmoothing(List<AssignmentProposition> et){  Matrix O_tmd, O_t;  e_tmd_to_t.add(hmm.getEvidence(et));  O_t=e_tmd_to_t.get(e_tmd_to_t.size() - 1);  if (t > d) {    e_tmd_to_t.remove(0);    O_tmd=e_tmd_to_t.get(0);    f=forward(f,O_tmd);    B=O_tmd.inverse().times(hmm.getTransitionModel().inverse()).times(B).times(hmm.getTransitionModel()).times(O_t);  } else {    B=B.times(hmm.getTransitionModel()).times(O_t);  }  CategoricalDistribution rVal=null;  if (t > d) {    rVal=hmm.convert(hmm.normalize(f.arrayTimes(B.times(unitMessage))));  }  t=t + 1;  return rVal;}  }
class C{  public void actionPerformed(ActionEvent e){  int pos=viewToModel(new Point(popup.x,popup.y));  popup.setVisible(false);  String cmd=e.getActionCommand();  int line=-1;  try {    line=getLineOfOffset(pos);  } catch (  Exception exc) {  }  if (cmd.equals("Set Breakpoint")) {    w.setBreakPoint(line + 1);  } else   if (cmd.equals("Clear Breakpoint")) {    w.clearBreakPoint(line + 1);  } else   if (cmd.equals("Run")) {    w.load();  }}  }
class C{  public GetSnapshotsRequest(String repository){  this.repository=repository;}  }
class C{  public ConcurrentWeakValueCache(final int queueCapacity,final float loadFactor,final int concurrencyLevel){  this(queueCapacity,loadFactor,concurrencyLevel,true);}  }
class C{  public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public T caseVoidType(VoidType object){  return null;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (autounique_1: ");  result.append(autounique_1);  result.append(", name_1: ");  result.append(name_1);  result.append(')');  return result.toString();}  }
class C{  public static void println(int priority,String tag,String msg){  println(priority,tag,msg,null);}  }
class C{  public Timer plus(Timer other){  Timer copy=new Timer();  copy.elapsedTime=millis() + other.millis();  return copy;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ASSOCIATION_CLASS_DEFINITION___NAME_1:    return getName_1();case UmplePackage.ASSOCIATION_CLASS_DEFINITION___ASSOCIATION_CLASS_CONTENT_1:  return getAssociationClassContent_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static Text createSingleText(Composite parent,int hspan){  Text t=new Text(parent,SWT.SINGLE | SWT.BORDER);  t.setFont(parent.getFont());  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  t.setLayoutData(gd);  return t;}  }
class C{  public void testNextIntBounded(){  for (int bound=2; bound < MAX_INT_BOUND; bound+=524959) {    int f=ThreadLocalRandom.current().nextInt(bound);    assertTrue(0 <= f && f < bound);    int i=0;    int j;    while (i < NCALLS && (j=ThreadLocalRandom.current().nextInt(bound)) == f) {      assertTrue(0 <= j && j < bound);      ++i;    }    assertTrue(i < NCALLS);  }}  }
class C{  public double mutualInformation(int child,int[] parents,int lag){  double M=0.0;  int[] c=new int[ntimes - lag];  for (int i=lag; i < ntimes; i++) {    c[i - lag]=cases[i][child];  }  double hchild=entropy(c);  int[] p1=new int[ntimes - lag];  int[][] pm=new int[parents.length][ntimes - lag];  double hparents=0.0;  for (int i=0; i < ntimes - lag; i++) {    p1[i]=cases[i][parents[0]];  }  hparents=entropy(p1);  if (parents.length > 1) {    for (int i=0; i < ntimes - lag; i++) {      for (int j=1; j < parents.length; j++) {        pm[j - 1][i]=cases[i][parents[j]];      }    }    hparents=jointEntropy(p1,pm);  }  double hjoint=0.0;  if (parents.length == 1) {    hjoint=jointEntropy(c,p1);  } else {    int[][] p1pm=new int[parents.length][ntimes - lag];    for (int i=0; i < ntimes - lag; i++) {      p1pm[0][i]=p1[i];      for (int j=0; j < parents.length - 1; j++) {        p1pm[j + 1][i]=pm[j][i];      }    }    hjoint=jointEntropy(c,p1pm);  }  M=hchild + hparents - hjoint;  return M;}  }
class C{  public void testMixupMultiValued() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  Field field=new TextField("field","",Field.Store.NO);  TokenStream ts=new MockTokenizer(MockTokenizer.WHITESPACE,true);  ((Tokenizer)ts).setReader(new StringReader("here we go"));  field.setTokenStream(ts);  doc.add(field);  Field field2=new TextField("field","",Field.Store.NO);  Token withPayload=new Token("withPayload",0,11);  withPayload.setPayload(new BytesRef("test"));  ts=new CannedTokenStream(withPayload);  assertTrue(ts.hasAttribute(PayloadAttribute.class));  field2.setTokenStream(ts);  doc.add(field2);  Field field3=new TextField("field","",Field.Store.NO);  ts=new MockTokenizer(MockTokenizer.WHITESPACE,true);  ((Tokenizer)ts).setReader(new StringReader("nopayload"));  field3.setTokenStream(ts);  doc.add(field3);  writer.addDocument(doc);  DirectoryReader reader=writer.getReader();  LeafReader sr=getOnlyLeafReader(reader);  PostingsEnum de=sr.postings(new Term("field","withPayload"),PostingsEnum.PAYLOADS);  de.nextDoc();  de.nextPosition();  assertEquals(new BytesRef("test"),de.getPayload());  writer.close();  reader.close();  dir.close();}  }
class C{  public Instantiation findOwner(final int i){  if (!subroutine.get(i)) {    return null;  }  if (!dualCitizens.get(i)) {    return this;  }  Instantiation own=this;  for (Instantiation p=previous; p != null; p=p.previous) {    if (p.subroutine.get(i)) {      own=p;    }  }  return own;}  }
class C{  public static void shareEpisode(Context context,Episode episode){  if (TextUtils.isEmpty(episode.getArtworkUrl())) {    shareEpisode(context,episode,null);  } else {    ImageLoadHelper.saveImage(context,episode.getArtworkUrl(),null);  }}  }
class C{  @Override public synchronized void connect(Object device,boolean secure){  log.debug("connect to: " + device);  if (mState == STATE.CONNECTING) {    if (mBtConnectThread != null) {      mBtConnectThread.cancel();      mBtConnectThread=null;    }  }  if (mBtWorkerThread != null) {    mBtWorkerThread.cancel();    mBtWorkerThread=null;  }  setState(STATE.CONNECTING);  mBtConnectThread=new BtConnectThread((BluetoothDevice)device,secure);  mBtConnectThread.start();}  }
class C{  public void checkCallbacks(){  if (log.isTraceEnabled()) {    log.trace("checkCallbacks current thread is '" + currentThread.name + "' doCallbacks:"+ currentThread.doCallbacks+ " caller:"+ getCallingFunction());  }  boolean handled;  SceKernelThreadInfo checkCurrentThread=currentThread;  do {    handled=false;    for (    SceKernelThreadInfo thread : threadMap.values()) {      if (thread.doCallbacks && checkThreadCallbacks(thread)) {        handled=true;        break;      }    }  } while (handled && checkCurrentThread == currentThread);}  }
class C{  public ExternalDataSystem(ExternalDataSystem other){}  }
class C{  public synchronized boolean isKnownPeer(Peer peer){  for (  Peer peerInList : mCurrentPeers) {    if (peer.equals(peerInList)) {      return true;    }  }  return false;}  }
class C{  public void drawPalette(int[] colors,int selectedColor,String[] colorContentDescriptions){  if (colors == null) {    return;  }  this.removeAllViews();  int tableElements=0;  int rowElements=0;  int rowNumber=0;  TableRow row=createTableRow();  for (  int color : colors) {    View colorSwatch=createColorSwatch(color,selectedColor);    setSwatchDescription(rowNumber,tableElements,rowElements,color == selectedColor,colorSwatch,colorContentDescriptions);    addSwatchToRow(row,colorSwatch,rowNumber);    tableElements++;    rowElements++;    if (rowElements == mNumColumns) {      addView(row);      row=createTableRow();      rowElements=0;      rowNumber++;    }  }  if (rowElements > 0) {    while (rowElements != mNumColumns) {      addSwatchToRow(row,createBlankSpace(),rowNumber);      rowElements++;    }    addView(row);  }}  }
class C{  public static void addField(WebSessionCtx wsc,tr line,GridField field,Object oData,boolean hasDependents,int recordID,int tableID,boolean tabRO,int fieldNumber,GridTab mTab,MRole role){  String columnName=field.getColumnName();  boolean error=field.isErrorValue();  if (error)   oData=field.getErrorValue();  int dt=field.getDisplayType();  boolean hasCallout=field.getCallout().length() > 0;  if (!field.getFieldGroup().equals(sectionNameOld) && !field.getFieldGroup().equals("") && field.getFieldGroup() != null) {    log.fine("Fieldgroup=" + field.getFieldGroup() + ".");    td td1=new td();    td1.setClass("Fieldgroup");    td1.addElement(field.getFieldGroup());    td td2=new td().setColSpan(4);    td2.setClass("Fieldgroup");    td2.addElement(new hr().setWidth("100%"));    line.addElement(new tr().addElement(td1));    line.addElement(new tr().addElement(td2));    sectionNameOld=field.getFieldGroup();  }  boolean fieldRO=true;  if (tabRO == true)   fieldRO=true; else   fieldRO=!field.isEditable(true);  WebField wField=new WebField(wsc,columnName,field.getHeader(),field.getDescription(),dt,field.getFieldLength(),field.getDisplayLength(),field.isLongField(),fieldRO,field.isMandatory(false),error,hasDependents,hasCallout,field.getAD_Process_ID(),field.getAD_Window_ID(),recordID,tableID,fieldNumber,field.getDefault(),field.getCallout(),mTab,field,role);  line.addElement(wField.getLabel()).addElement(wField.getField(field.getLookup(),oData));}  }
class C{  private void writeChallenge(Challenge challenge,List<Answer> answerList){  long oldChallengeId=challenge.getId();  challenge.setId(null);  long challengeId=mChallengeDataSource.create(challenge);  for (  Answer answer : answerList) {    if (answer.getChallengeId() == oldChallengeId) {      answer.setChallengeId(challengeId);      writeAnswer(answer);      answer.setChallengeId(-1);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.294 -0500",hash_original_method="911AB9C595BBE3DEF39975B1C146C2FC",hash_generated_method="070660DD5CE59C01FA4AEB53FF32B37A") @Deprecated public static int forkAndSpecialize(int uid,int gid,int[] gids,boolean enableDebugger,int[][] rlimits){  int debugFlags=enableDebugger ? DEBUG_ENABLE_DEBUGGER : 0;  return forkAndSpecialize(uid,gid,gids,debugFlags,rlimits);}  }
class C{  public void print(int inum){  print(String.valueOf(inum));}  }
class C{  public SignatureVisitor visitReturnType(){  return this;}  }
class C{  protected double decisionFunction(int v){  double sum=0;  for (int i=0; i < vecs.size(); i++)   if (alphas[i] > 0)   sum+=alphas[i] * label[i] * kEval(v,i);  return sum;}  }
class C{  public CInsertOrOperatorAction(final CCriteriumTree tree,final CCriteriumTreeNode parent){  super("Insert OR");  m_tree=tree;  m_parent=parent;}  }
class C{  public static long tpsToTpw(OperatorContext context,long tuplesPerSecond){  Preconditions.checkArgument(tuplesPerSecond > 0);  BigDecimal tuplesPerWindow=new BigDecimal(getAppWindowDurationMs(context));  tuplesPerWindow=tuplesPerWindow.divide(new BigDecimal(1000));  tuplesPerWindow=tuplesPerWindow.multiply(new BigDecimal(tuplesPerSecond));  Preconditions.checkArgument(tuplesPerWindow.compareTo(new BigDecimal(Long.MAX_VALUE)) <= 0,"Overflow computing tuples per window.");  tuplesPerWindow=tuplesPerWindow.stripTrailingZeros();  long tuplesPerWindowLong=tuplesPerWindow.longValue();  if (tuplesPerWindow.scale() > 0) {    LOG.debug("{}",tuplesPerWindow);    tuplesPerWindowLong++;  }  return tuplesPerWindowLong;}  }
class C{  private void stopDrag(MotionEvent ev){  mTouchMode=TOUCH_MODE_IDLE;  boolean commitChange=ev.getAction() == MotionEvent.ACTION_UP && isEnabled();  cancelSuperTouch(ev);  if (commitChange) {    boolean newState;    mVelocityTracker.computeCurrentVelocity(1000);    float xvel=mVelocityTracker.getXVelocity();    if (Math.abs(xvel) > mMinFlingVelocity) {      newState=isLayoutRtl() ? (xvel < 0) : (xvel > 0);    } else {      newState=getTargetCheckedState();    }    animateThumbToCheckedState(newState);  } else {    animateThumbToCheckedState(isChecked());  }}  }
class C{  public SelectUndirectedAction(GraphWorkbench workbench){  super("Highlight Undirected Edges");  if (workbench == null) {    throw new NullPointerException("Desktop must not be null.");  }  this.workbench=workbench;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public boolean isSecure(){  return secure;}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  void onSourcesChanged(SsaInsn insn,RegisterSpecList oldSources){  if (useList == null)   return;  if (oldSources != null) {    removeFromUseList(insn,oldSources);  }  RegisterSpecList sources=insn.getSources();  int szNew=sources.size();  for (int i=0; i < szNew; i++) {    int reg=sources.get(i).getReg();    useList[reg].add(insn);  }}  }
class C{  public Kit(Context context){  Kit.context=context.getApplicationContext();}  }
class C{  public Vector normalize(){  return divide(length());}  }
class C{  public NoSuchProviderException(String msg){  super(msg);}  }
class C{  private void decrementExportCount(){  assert Thread.holdsLock(this);  exportCount--;  if (exportCount == 0 && getEndpoint().getListenPort() != 0) {    ServerSocket ss=server;    server=null;    try {      ss.close();    } catch (    IOException e) {    }  }}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  public WekaEnumeration(List<E> vector){  m_Counter=0;  m_Vector=vector;  m_SpecialElement=-1;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html");  PrintWriter out=response.getWriter();  out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");  out.println("<HTML>");  out.println("  <HEAD><TITLE>A Servlet</TITLE></HEAD>");  out.println("  <BODY>");  out.print("    This is ");  out.print(this.getClass());  out.println(", using the POST method");  out.println("  </BODY>");  out.println("</HTML>");  out.flush();  out.close();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static GraphQueryResult evaluateGraphQuery(final AbstractTripleStore store,final ASTContainer astContainer,final QueryBindingSet globallyScopedBS,final Dataset dataset) throws QueryEvaluationException {  final AST2BOpContext context=new AST2BOpContext(astContainer,store);  final boolean isDescribe=astContainer.getOriginalAST().getQueryType() == QueryType.DESCRIBE;  final Map<String,BigdataBNode> bnodes=(isDescribe ? new LinkedHashMap<String,BigdataBNode>() : null);  final IDescribeCache describeCache;  final Set<IVariable<?>> describeVars;  if (isDescribe && context.describeCache != null) {    describeCache=context.getDescribeCache();    describeVars=astContainer.getOriginalAST().getProjectedVars(new LinkedHashSet<IVariable<?>>());  } else {    describeCache=null;    describeVars=null;  }  final QueryRoot optimizedQuery=optimizeQuery(astContainer,context,globallyScopedBS,dataset);  final boolean materializeProjectionInQuery=context.materializeProjectionInQuery && !optimizedQuery.hasSlice();  final DescribeModeEnum describeMode=context.getDescribeMode(optimizedQuery.getProjection());  final int describeIterationLimit=context.getDescribeIterationLimit(optimizedQuery.getProjection());  final int describeStatementlimit=context.getDescribeStatementLimit(optimizedQuery.getProjection());  GraphQueryResult result=null;  final CloseableIteration<BindingSet,QueryEvaluationException> solutions=ASTEvalHelper.evaluateQuery(astContainer,context,materializeProjectionInQuery,optimizedQuery.getProjection().getProjectionVars());  try {    final CloseableIteration<BindingSet,QueryEvaluationException> solutions2;    final Set<BigdataValue> describedResources;    if (describeCache != null) {      describedResources=Collections.newSetFromMap(new ConcurrentHashMap<BigdataValue,Boolean>());      solutions2=new DescribeBindingsCollector(describeVars,describedResources,solutions);    } else {      solutions2=solutions;      describedResources=null;    }    final CloseableIteration<BigdataStatement,QueryEvaluationException> src=new ASTConstructIterator(context,store,optimizedQuery.getConstruct(),optimizedQuery.getWhereClause(),bnodes,solutions2);    final CloseableIteration<BigdataStatement,QueryEvaluationException> src2;    if (isDescribe) {switch (describeMode) {case SymmetricOneStep:case ForwardOneStep:        src2=src;      break;case CBD:case SCBD:{      src2=new CBD(store,describeMode,describeIterationLimit,describeStatementlimit,bnodes).computeClosure(src);      break;    }default :  throw new UnsupportedOperationException("describeMode=" + describeMode);}} else {src2=src;}final CloseableIteration<BigdataStatement,QueryEvaluationException> src3;if (describeCache != null) {src3=new DescribeCacheUpdater(describeCache,describedResources,src2);} else {src3=src2;}result=new GraphQueryResultImpl(optimizedQuery.getPrefixDecls(),src3);}  finally {if (result == null) {solutions.close();}}return result;}  }
class C{  public LSH(final int stages,final int buckets){  this.stages=stages;  this.buckets=buckets;}  }
class C{  private void prepareBlockSnapshotData(String name,int numSnapshots) throws Exception {  Volume volume=new Volume();  URI volumeURI=URIUtil.createId(Volume.class);  StorageSystem storageSystem=createStorageSystem(false);  volume.setId(volumeURI);  volume.setStorageController(storageSystem.getId());  String volName="blockSnapshotVolume";  volume.setLabel(volName);  BlockConsistencyGroup cg=createBlockConsistencyGroup("blockSnapshotConsistencyGroup",storageSystem.getId(),Types.LOCAL.name(),true);  volume.setConsistencyGroup(cg.getId());  _dbClient.createObject(volume);  for (int i=1; i <= numSnapshots; i++) {    BlockSnapshot blockSnapshot=new BlockSnapshot();    URI blockSnapshotURI=URIUtil.createId(BlockSnapshot.class);    blockSnapshotURIs.add(blockSnapshotURI);    blockSnapshot.setId(blockSnapshotURI);    blockSnapshot.setLabel(name + i);    blockSnapshot.setSnapsetLabel(name + i);    blockSnapshot.setParent(new NamedURI(volume.getId(),name + i));    blockSnapshot.addConsistencyGroup(cg.getId().toString());    _dbClient.createObject(blockSnapshot);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationfeaturexml.class,args);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void bindProperty(String prop,BindTarget target){}  }
class C{  public PowerLawGrowthModel(Parameter N0Parameter,Parameter growthRateParameter,Type units){  this(PowerLawGrowthModelParser.POWER_LAW_GROWTH_MODEL,N0Parameter,growthRateParameter,units);}  }
class C{  protected Object visit(BinaryLogicOperator filter,Object extraData){  LOGGER.finer("exporting LogicFilter");  final List<FilterBuilder> filterList=new ArrayList<>();  for (  final Filter child : filter.getChildren()) {    child.accept(this,extraData);    filterList.add(filterBuilder);  }  final FilterBuilder[] filters;  filters=filterList.toArray(new FilterBuilder[filterList.size()]);  if (extraData.equals("AND")) {    filterBuilder=FilterBuilders.andFilter(filters);  } else {    filterBuilder=FilterBuilders.orFilter(filters);  }  return extraData;}  }
class C{  public static int StringRegionMatches(String value,boolean ignoreCase,int thisStart,String string,int start,int length){  if (value == null || string == null)   throw new NullPointerException();  if (start < 0 || string.length() - start < length) {    return -BooleanHelper.K;  }  if (thisStart < 0 || value.length() - thisStart < length) {    return -BooleanHelper.K;  }  if (length <= 0) {    return BooleanHelper.K;  }  if (ignoreCase && value.regionMatches(ignoreCase,thisStart,string,start,length)) {    return BooleanHelper.K;  }  String s1=value;  String s2=string;  if (ignoreCase) {    s1=s1.toLowerCase();    s2=s2.toLowerCase();  }  if (Properties.DYNAMIC_POOL > 0.0) {    String sub1=s1.substring(thisStart,length + thisStart);    String sub2=s2.substring(start,length + start);    String sn1=s1.substring(0,thisStart) + sub2 + s1.substring(thisStart + length);    String sn2=s2.substring(0,start) + sub1 + s2.substring(start + length);    ConstantPoolManager.getInstance().addDynamicConstant(sn1);    ConstantPoolManager.getInstance().addDynamicConstant(sn2);  }  return StringEquals(s1.substring(thisStart,Math.min(length + thisStart,s1.length())),s2.substring(start,Math.min(length + start,s2.length())));}  }
class C{  public static boolean reflectionEquals(final Object lhs,final Object rhs,final boolean testTransients){  return reflectionEquals(lhs,rhs,testTransients,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.445 -0500",hash_original_method="E2E038DF81C8876BEF1DC650925A08F9",hash_generated_method="64087033E04A614553C34B8F59B74AC2") public void write(byte[] vector){  check(vector.length);  System.arraycopy(vector,0,buffer,write_pos,vector.length);  write_pos+=vector.length;}  }
class C{  private void finishStringSection(List<StringSection> sections,StringSection currentSection,StringBuilder templateExpressions,Position lastSourcePosition,Position targetPosition){  if (currentSection.lastSourcePosition != null) {    return;  }  currentSection.lastSourcePosition=new Position(lastSourcePosition);  sections.add(currentSection);  append(templateExpressions,targetPosition,"out<<_s[_i=" + index++ + "];");  currentSection.lastTargetPosition=new Position(targetPosition.row,targetPosition.column);}  }
class C{  public static final void pushTransform(GL2 gl){  gl.glPushMatrix();}  }
class C{  public Contract persistContract(final Contract transientInstance) throws PersistentModelException {  try {    if (null == transientInstance.getIdContract()) {      Contract currentContract=m_contractHome.findByUniqueKey(transientInstance.getSecType(),transientInstance.getSymbol(),transientInstance.getExchange(),transientInstance.getCurrency(),transientInstance.getExpiry());      if (null != currentContract) {        transientInstance.setIdContract(currentContract.getIdContract());      }    }    return m_aspectHome.persist(transientInstance,true);  } catch (  OptimisticLockException ex1) {    throw new PersistentModelException("Error saving Contract please refresh before save.");  }catch (  Exception e) {    throw new PersistentModelException("Error saving Contract: " + transientInstance.getSymbol() + "\n Msg: "+ e.getMessage());  }}  }
class C{  public void addChild(IXMLElement child){  if (child == null) {    throw new IllegalArgumentException("child must not be null");  }  if ((child.getName() == null) && (!this.children.isEmpty())) {    IXMLElement lastChild=(IXMLElement)this.children.get(this.children.size() - 1);    if (lastChild.getName() == null) {      lastChild.setContent(lastChild.getContent() + child.getContent());      return;    }  }  ((XMLElement)child).parent=this;  this.children.add(child);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Flag registerExcludeUnplacedFlag(final CFlags flags){  return flags.registerOptional(EXCLUDE_UNPLACED_FLAG,EXCLUDE_UNPLACED_DESC).setCategory(SENSITIVITY_TUNING);}  }
class C{  public void dispose(){}  }
class C{  public synchronized ICCColorSpaceExt request(String profileName){  return (ICCColorSpaceExt)super.requestImpl(profileName);}  }
class C{  public void actionPerformed(ActionEvent e){  String cmd=e.getActionCommand();  if (cmd.equals("Cut")) {    evalTextArea.cut();  } else   if (cmd.equals("Copy")) {    evalTextArea.copy();  } else   if (cmd.equals("Paste")) {    evalTextArea.paste();  }}  }
class C{  public boolean hasMergedIntoUpdate(){  return hasExtension(MergedIntoUpdate.class);}  }
class C{  protected int downsample(int[] data,int start,int end,int size){  int sum=0;  for (int i=start; i < end; i++) {    sum+=data[i];  }  return sum;}  }
class C{  public CreateRouteRequest(String sourceUrn,String sinkUrn,String presentationId,int requestId,ChromeMediaRouter router){  mSourceUrn=sourceUrn;  mMediaSource=MediaSource.from(sourceUrn);  mSinkId=sinkUrn;  mPresentationId=presentationId;  mRequestId=requestId;  mMediaRouter=router;}  }
class C{  @Override public void test(String t) throws ParameterException {  if (t.length() < minlength) {    throw new WrongParameterValueException("Parameter Constraint Error.\n" + "Parameter value length must be at least " + minlength + ".");  }  if (maxlength > 0 && t.length() > maxlength) {    throw new WrongParameterValueException("Parameter Constraint Error.\n" + "Parameter value length must be at most " + maxlength + ".");  }}  }
class C{  public static String stringFor(int k){switch (k) {case cudaMemcpyHostToHost:    return "cudaMemcpyHostToHost";case cudaMemcpyHostToDevice:  return "cudaMemcpyHostToDevice";case cudaMemcpyDeviceToHost:return "cudaMemcpyDeviceToHost";case cudaMemcpyDeviceToDevice:return "cudaMemcpyDeviceToDevice";case cudaMemcpyDefault:return "cudaMemcpyDefault";}return "INVALID cudaMemcpyKind: " + k;}  }
class C{  private static void scaleComponentFonts(Component component,float size){  Font f=component.getFont().deriveFont(size);  component.setFont(f);  if (component instanceof Container) {    for (    Component child : ((Container)component).getComponents()) {      scaleComponentFonts(child,size);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.287 -0500",hash_original_method="5B3F4DCDB18701B7EDED77C3B9D3C550",hash_generated_method="1059C2B39BA7CB5FDAEFB1C86FD435AA") private void appendEvaluated(StringBuffer buffer,String s){  boolean escape=false;  boolean dollar=false;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == '\\' && !escape) {      escape=true;    } else     if (c == '$' && !escape) {      dollar=true;    } else     if (c >= '0' && c <= '9' && dollar) {      buffer.append(group(c - '0'));      dollar=false;    } else {      buffer.append(c);      dollar=false;      escape=false;    }  }  if (escape) {    throw new ArrayIndexOutOfBoundsException(s.length());  }}  }
class C{  public static TypeReference newTryCatchReference(int tryCatchBlockIndex){  return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));}  }
class C{  public void loadThis(){  if ((access & Opcodes.ACC_STATIC) != 0) {    throw new IllegalStateException("no 'this' pointer within static method");  }  mv.visitVarInsn(Opcodes.ALOAD,0);}  }
class C{  public void removeMethod(){  if (uriParms != null)   uriParms.delete(METHOD);}  }
class C{  public IMqttDeliveryToken publish(String clientHandle,String topic,MqttMessage message,String invocationContext,String activityToken) throws MqttPersistenceException, MqttException {  MqttConnection client=getConnection(clientHandle);  return client.publish(topic,message,invocationContext,activityToken);}  }
class C{  @Override public ExchangeClient connect(URL url,ExchangeHandler handler) throws RemotingException {  return null;}  }
class C{  private static void queryLocales() throws IOException, ServiceException {  URL url=urlFactory.getLocalesFeedURL();  GoogleBaseQuery query=new GoogleBaseQuery(url);  System.out.println("Sending request to: " + query.getUrl());  try {    GoogleBaseFeed feed=service.query(query);    for (    GoogleBaseEntry entry : feed.getEntries()) {      System.out.println(entry.getTitle().getPlainText());    }  } catch (  ServiceException e) {    printServiceException(e);  }}  }
class C{  public synchronized void remove(String item){  int index=items.indexOf(item);  if (index < 0) {    throw new IllegalArgumentException("item " + item + " not found in list");  } else {    remove(index);  }}  }
class C{  public Seq<CharSeq> eachLine(){  return this.split("\n|\r\n");}  }
class C{  public void testPathModeSwitchToPrimary() throws Exception {  mode=DUAL_SYNC;  pathModes(F.t("/dir1",PRIMARY),F.t("/dir2",DUAL_SYNC));  startUp();  checkMode("/dir",PRIMARY);  checkMode("/dir1",PRIMARY);  checkMode("/dir2",PRIMARY);}  }
class C{  public List<ValueBox> addArgumentHotspots(String signature,int arg){  List<ValueBox> sigSpots=StringAnalysis.getArgumentExpressions(signature,arg);  return addArgumentHotspots(signature,arg,sigSpots);}  }
class C{  public GVTGlyphVector createGlyphVector(FontRenderContext frc,int[] glyphCodes,CharacterIterator ci){  int nGlyphs=glyphCodes.length;  StringBuffer workBuff=new StringBuffer(nGlyphs);  for (int i=0; i < nGlyphs; i++) {    workBuff.append(glyphUnicodes[glyphCodes[i]]);  }  StringCharacterIterator sci=new StringCharacterIterator(workBuff.toString());  return createGlyphVector(frc,sci);}  }
class C{  public XTIFFImage(SeekableStream stream,TIFFDecodeParam param,int directory) throws IOException {  this.stream=stream;  if (param == null || !(param instanceof XTIFFDecodeParam)) {    param=new XTIFFDecodeParam(param);  }  this.param=param;  decodePaletteAsShorts=param.getDecodePaletteAsShorts();  dir=XTIFFDirectory.create(stream,directory);  properties.put("tiff.directory",dir);  ((XTIFFDecodeParam)param).setDirectory(dir);  isBigEndian=dir.isBigEndian();  setupImageParameters();  setupSamplesAndColor();  dir.setImageType(image_type);  tilesX=(width + tileWidth - 1) / tileWidth;  tilesY=(height + tileHeight - 1) / tileHeight;  tileSize=tileWidth * tileHeight * bands;  try {    codec=dir.createTileCodec((XTIFFDecodeParam)param);  } catch (  Exception e) {  }}  }
class C{  public void checkShape(AbstractMatrix3D B,AbstractMatrix3D C){  if (slices != B.slices || rows != B.rows || columns != B.columns || slices != C.slices || rows != C.rows || columns != C.columns)   throw new IllegalArgumentException("Incompatible dimensions: " + toStringShort() + ", "+ B.toStringShort()+ ", "+ C.toStringShort());}  }
class C{  public static int intValue(String option){  String s=value(option);  if (s != null) {    try {      int val=Integer.parseInt(s);      if (val > 0)       return (val);    } catch (    NumberFormatException e) {    }  }  return (-1);}  }
class C{  public String globalInfo(){  return "Generates output for a data and script file for GnuPlot.";}  }
class C{  protected SystemMember createSystemMember(InternalDistributedMember member) throws org.apache.geode.admin.AdminException {  return new SystemMemberJmxImpl(this,member);}  }
class C{  protected void onPostProcess(String what,String[] oldPathNames,String[] newPathNames,int modifyCount,int itemCount,int opCode){}  }
class C{  private long parseLong() throws IOException {  int sign=1;  int ch=read();  if (ch == '-') {    sign=-1;    ch=read();  }  long value=0;  for (; ch >= '0' && ch <= '9'; ch=read())   value=10 * value + ch - '0';  _peek=ch;  return sign * value;}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (eventName.compareTo("graph") == 0) {    if (!(m_Clusterer instanceof weka.core.Drawable)) {      return false;    }    if (!m_listenees.containsKey("trainingSet")) {      return false;    }    Object source=m_listenees.get("trainingSet");    if (source instanceof EventConstraints) {      if (!((EventConstraints)source).eventGeneratable("trainingSet")) {        return false;      }    }  }  if (eventName.compareTo("batchClusterer") == 0) {    if (!m_listenees.containsKey("trainingSet")) {      return false;    }    Object source=m_listenees.get("trainingSet");    if (source != null && source instanceof EventConstraints) {      if (!((EventConstraints)source).eventGeneratable("trainingSet")) {        return false;      }    }  }  if (eventName.compareTo("text") == 0) {    if (!m_listenees.containsKey("trainingSet")) {      return false;    }    Object source=m_listenees.get("trainingSet");    if (source != null && source instanceof EventConstraints) {      if (!((EventConstraints)source).eventGeneratable("trainingSet")) {        return false;      }    }  }  if (eventName.compareTo("batchClassifier") == 0) {    return false;  }  if (eventName.compareTo("incrementalClassifier") == 0) {    return false;  }  return true;}  }
class C{  private ResolvedMigration extractMigrationInfo(Resource resource){  ResolvedMigration migration=new ResolvedMigration();  Pair<MigrationVersion,String> info=MigrationInfoHelper.extractVersionAndDescription(resource.getFilename(),CQL_MIGRATION_PREFIX,CQL_MIGRATION_SEPARATOR,CQL_MIGRATION_SUFFIX);  migration.setVersion(info.getLeft());  migration.setDescription(info.getRight());  migration.setScript(extractScriptName(resource));  migration.setChecksum(calculateChecksum(resource.loadAsBytes()));  migration.setType(MigrationType.CQL);  return migration;}  }
class C{  public boolean hasSessionId(){  return sessionId != null && sessionId.length() > 0;}  }
class C{  public WhereBuilder or(String columnName,String op,Object value){  appendCondition(whereItems.size() == 0 ? null : "OR",columnName,op,value);  return this;}  }
class C{  public static Date previous(Date self){  return minus(self,1);}  }
class C{  @Restricted(value=NoExternalUse.class) public GitHubPRTrigger() throws ANTLRException {  super("");}  }
class C{  public final void testHashCode02(){  assertTrue(new ECFieldFp(BigInteger.valueOf(23L)).hashCode() == new ECFieldFp(BigInteger.valueOf(23L)).hashCode());}  }
class C{  private int findPosition(@NonNull String tmpTotal,@NonNull SpannableStringBuilder ssb,@NonNull SpannableStringBuilder tmp){  String tmpTmpTotal=tmpTotal;  int position=tmpTmpTotal.indexOf(KEY_INLINE_CODE);  if (position == -1) {    return -1;  } else {    if (checkInHyperLink(ssb,tmp.length() + position,KEY_INLINE_CODE.length()) || checkInImage(ssb,tmp.length() + position,KEY_INLINE_CODE.length())) {      StringBuilder sb=new StringBuilder(tmpTmpTotal.substring(0,position)).append("$").append(tmpTmpTotal.substring(position + KEY_INLINE_CODE.length(),tmpTmpTotal.length()));      return findPosition(sb.toString(),ssb,tmp);    } else {      return position;    }  }}  }
class C{  private void clearPendingOMADownload(long downloadId,String installNotifyURI){  ClearPendingOMADownloadTask task=new ClearPendingOMADownloadTask(downloadId,installNotifyURI);  task.execute();}  }
class C{  private View makeAndAddView(int position,int y,boolean flow,int childrenLeft,boolean selected,int where){  View child;  if (!mDataChanged) {    child=mRecycler.getActiveView(position);    if (child != null) {      setupChild(child,position,y,flow,childrenLeft,selected,true,where);      return child;    }  }  child=obtainView(position,mIsScrap);  setupChild(child,position,y,flow,childrenLeft,selected,mIsScrap[0],where);  return child;}  }
class C{  public static ResourcesSoot v(){  return instance;}  }
class C{  public synchronized void addObject(Object obj){  fifo.addElement(obj);  nbObjects++;  notifyAll();}  }
class C{  private void editTag(TagItem tagItem,String newValue){  tagItem.setValue(newValue);  change=true;}  }
class C{  public static void packFile(Path fileToPack,Path packageFile) throws IOException {  pack(fileToPack,packageFile,false);}  }
class C{  private static long freeSpaceCalculation(String path){  StatFs stat=new StatFs(path);  long blockSize=stat.getBlockSize();  long availableBlocks=stat.getAvailableBlocks();  return availableBlocks * blockSize / 1024;}  }
class C{  public static void dump(ServletContext ctx){  log.config("ServletContext " + ctx.getServletContextName());  log.config("- ServerInfo=" + ctx.getServerInfo());  if (!CLogMgt.isLevelFiner())   return;  boolean first=true;  Enumeration e=ctx.getInitParameterNames();  while (e.hasMoreElements()) {    if (first)     log.finer("InitParameter:");    first=false;    String key=(String)e.nextElement();    Object value=ctx.getInitParameter(key);    log.finer("- " + key + " = "+ value);  }  first=true;  e=ctx.getAttributeNames();  while (e.hasMoreElements()) {    if (first)     log.finer("Attributes:");    first=false;    String key=(String)e.nextElement();    Object value=ctx.getAttribute(key);    log.finer("- " + key + " = "+ value);  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Override public void endWindow(){  boolean emit=(++windowCount) % windowSize == 0;  if (!emit) {    return;  }  boolean dosum=sum.isConnected();  if (dosum) {    for (    Map.Entry<K,SumEntry> e : sums.entrySet()) {      K key=e.getKey();      if (dosum) {        sum.emit(new KeyValPair(key,getValue(e.getValue().sum.doubleValue())));      }    }  }  sums.clear();}  }
class C{  public static boolean isLegalPropertyKey(String key){  return (key.equals(OutputKeys.CDATA_SECTION_ELEMENTS) || key.equals(OutputKeys.DOCTYPE_PUBLIC) || key.equals(OutputKeys.DOCTYPE_SYSTEM)|| key.equals(OutputKeys.ENCODING)|| key.equals(OutputKeys.INDENT)|| key.equals(OutputKeys.MEDIA_TYPE)|| key.equals(OutputKeys.METHOD)|| key.equals(OutputKeys.OMIT_XML_DECLARATION)|| key.equals(OutputKeys.STANDALONE)|| key.equals(OutputKeys.VERSION)|| (key.length() > 0) && (key.charAt(0) == '{') && (key.lastIndexOf('{') == 0)&& (key.indexOf('}') > 0)&& (key.lastIndexOf('}') == key.indexOf('}')));}  }
class C{  public void testBadStreamBounds(){  SplittableRandom r=new SplittableRandom();  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  testDoubleBadOriginBound(null);}  }
class C{  public static String createTempFile(String prefix,String suffix,boolean deleteOnExit,boolean inTempDir) throws IOException {  return FilePath.get(prefix).createTempFile(suffix,deleteOnExit,inTempDir).toString();}  }
class C{  private static boolean less(Comparable v,Comparable w){  return v.compareTo(w) < 0;}  }
class C{  public char charAt(int index){  return ((char[])m_obj)[index + m_start];}  }
class C{  public BadLocationException(String s,int offs){  super(s);  this.offs=offs;}  }
class C{  public boolean isTranformInProgress(){  return m_transact.isRunning();}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  private static void packSmsChar(byte[] packedChars,int bitOffset,int value){  int byteOffset=bitOffset / 8;  int shift=bitOffset % 8;  packedChars[++byteOffset]|=value << shift;  if (shift > 1) {    packedChars[++byteOffset]=(byte)(value >> (8 - shift));  }}  }
class C{  public ConditionalExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void onConnect(String host,Integer port,Integer clientId){  this.m_clientId=clientId;  m_client.eConnect(host,port,clientId);  openOrders.clear();}  }
class C{  public void removeListener(TapListener listener){  mListeners.remove(listener);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.424 -0500",hash_original_method="07989C3909E96A7576DAE0D29DD189A0",hash_generated_method="4CC6F7815479BD2C24DC503B87EA800A") private void addRoute(RecordRouteList recordRouteList){  try {    if (this.isClientDialog()) {      this.routeList=new RouteList();      ListIterator li=recordRouteList.listIterator(recordRouteList.size());      boolean addRoute=true;      while (li.hasPrevious()) {        RecordRoute rr=(RecordRoute)li.previous();        if (addRoute) {          Route route=new Route();          AddressImpl address=((AddressImpl)((AddressImpl)rr.getAddress()).clone());          route.setAddress(address);          route.setParameters((NameValueList)rr.getParameters().clone());          this.routeList.add(route);        }      }    } else {      this.routeList=new RouteList();      ListIterator li=recordRouteList.listIterator();      boolean addRoute=true;      while (li.hasNext()) {        RecordRoute rr=(RecordRoute)li.next();        if (addRoute) {          Route route=new Route();          AddressImpl address=((AddressImpl)((AddressImpl)rr.getAddress()).clone());          route.setAddress(address);          route.setParameters((NameValueList)rr.getParameters().clone());          routeList.add(route);        }      }    }  }  finally {    if (sipStack.getStackLogger().isLoggingEnabled()) {      Iterator it=routeList.iterator();      while (it.hasNext()) {        SipURI sipUri=(SipURI)(((Route)it.next()).getAddress().getURI());        if (!sipUri.hasLrParam()) {          if (sipStack.isLoggingEnabled()) {            sipStack.getStackLogger().logWarning("NON LR route in Route set detected for dialog : " + this);            sipStack.getStackLogger().logStackTrace();          }        }      }    }  }}  }
class C{  public void addListener(final ITagManagerListener listener){  m_listeners.addListener(listener);}  }
class C{  protected Type determineInferredType(Method method){  if (method == null) {    return null;  }  Type genericParameterType=null;  boolean hasAck=false;  for (int i=0; i < method.getParameterTypes().length; i++) {    MethodParameter methodParameter=new MethodParameter(method,i);    if (eligibleParameter(methodParameter) && (methodParameter.getParameterAnnotations().length == 0 || methodParameter.hasParameterAnnotation(Payload.class))) {      if (genericParameterType == null) {        genericParameterType=methodParameter.getGenericParameterType();        if (genericParameterType instanceof ParameterizedType) {          ParameterizedType parameterizedType=(ParameterizedType)genericParameterType;          if (parameterizedType.getRawType().equals(Message.class)) {            genericParameterType=((ParameterizedType)genericParameterType).getActualTypeArguments()[0];          } else           if (parameterizedType.getRawType().equals(List.class) && parameterizedType.getActualTypeArguments().length == 1) {            Type paramType=parameterizedType.getActualTypeArguments()[0];            this.isConsumerRecordList=paramType.equals(ConsumerRecord.class) || (paramType instanceof ParameterizedType && ((ParameterizedType)paramType).getRawType().equals(ConsumerRecord.class));            this.isMessageList=paramType.equals(Message.class) || (paramType instanceof ParameterizedType && ((ParameterizedType)paramType).getRawType().equals(Message.class));          }        }      } else {        if (this.logger.isDebugEnabled()) {          this.logger.debug("Ambiguous parameters for target payload for method " + method + "; no inferred type available");        }        break;      }    } else     if (methodParameter.getGenericParameterType().equals(Acknowledgment.class)) {      hasAck=true;    }  }  Assert.state(!this.isConsumerRecordList || method.getParameterTypes().length == 1 || (method.getGenericParameterTypes().length == 2 && hasAck),"A parameter of type 'List<ConsumerRecord>' must be the only parameter " + "(except for an optional 'Acknowledgment')");  Assert.state(!this.isMessageList || method.getParameterTypes().length == 1 || (method.getGenericParameterTypes().length == 2 && hasAck),"A parameter of type 'List<Message<?>>' must be the only parameter " + "(except for an optional 'Acknowledgment')");  return genericParameterType;}  }
class C{  final public int limit(){  return limit;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize=3;  double n;  double sum;  int[] dX;  int[] dY;  double[] weights;  int midPoint;  int numPixelsInFilter;  boolean reflectAtBorders=false;  double sigma=0;  double recipRoot2PiTimesSigma;  double twoSigmaSqr;  double zN, zFinal;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigma=Double.parseDouble(args[i]);    } else     if (i == 3) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigma < 0.5) {    sigma=0.5;  } else   if (sigma > 20) {    sigma=20;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    recipRoot2PiTimesSigma=1 / (Math.sqrt(2 * Math.PI) * sigma);    twoSigmaSqr=2 * sigma * sigma;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigma * Math.exp(-1 * (i * i) / twoSigmaSqr);      if (weight <= 0.001) {        filterSize=i * 2 + 1;        break;      }    }    if (filterSize % 2 == 0) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    weights=new double[numPixelsInFilter];    int cellsOnEitherSide=(int)Math.floor((double)filterSize / 2);    double term1=-1 / (Math.PI * sigma * sigma* sigma* sigma);    double term2=0;    double term3=0;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        x=col - cellsOnEitherSide;        y=row - cellsOnEitherSide;        term2=1 - ((x * x + y * y) / twoSigmaSqr);        term3=Math.exp(-(x * x + y * y) / twoSigmaSqr);        weight=term1 * term2 * term3;        weights[a]=weight;        dX[a]=x;        dY[a]=y;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          zFinal=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights[a];              zFinal+=weights[a] * zN;            }          }          outputFile.setValue(row,col,zFinal / sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private Collection<Integer> interactWithServer() throws Exception {  ProcessStartResult srvStartRes=startSharedMemoryTestServer();  ProcessStartResult clientStartRes=startSharedMemoryTestClient();  clientStartRes.isReadyLatch().await();  info("Going to kill server.");  srvStartRes.proc().kill();  srvStartRes.isKilledLatch().await();  info("Going to kill client.");  clientStartRes.proc().kill();  clientStartRes.isKilledLatch().await();  return clientStartRes.shmemIds();}  }
class C{  private static double expm1(double x,double hiPrecOut[]){  if (x != x || x == 0.0) {    return x;  }  if (x <= -1.0 || x >= 1.0) {    double hiPrec[]=new double[2];    exp(x,0.0,hiPrec);    if (x > 0.0) {      return -1.0 + hiPrec[0] + hiPrec[1];    } else {      final double ra=-1.0 + hiPrec[0];      double rb=-(ra + 1.0 - hiPrec[0]);      rb+=hiPrec[1];      return ra + rb;    }  }  double baseA;  double baseB;  double epsilon;  boolean negative=false;  if (x < 0.0) {    x=-x;    negative=true;  }{    int intFrac=(int)(x * 1024.0);    double tempA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;    double tempB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];    double temp=tempA + tempB;    tempB=-(temp - tempA - tempB);    tempA=temp;    temp=tempA * HEX_40000000;    baseA=tempA + temp - temp;    baseB=tempB + (tempA - baseA);    epsilon=x - intFrac / 1024.0;  }  double zb=0.008336750013465571;  zb=zb * epsilon + 0.041666663879186654;  zb=zb * epsilon + 0.16666666666745392;  zb=zb * epsilon + 0.49999999999999994;  zb*=epsilon;  zb*=epsilon;  double za=epsilon;  double temp=za + zb;  zb=-(temp - za - zb);  za=temp;  temp=za * HEX_40000000;  temp=za + temp - temp;  zb+=za - temp;  za=temp;  double ya=za * baseA;  temp=ya + za * baseB;  double yb=-(temp - ya - za * baseB);  ya=temp;  temp=ya + zb * baseA;  yb+=-(temp - ya - zb * baseA);  ya=temp;  temp=ya + zb * baseB;  yb+=-(temp - ya - zb * baseB);  ya=temp;  temp=ya + baseA;  yb+=-(temp - baseA - ya);  ya=temp;  temp=ya + za;  yb+=-(temp - ya - za);  ya=temp;  temp=ya + baseB;  yb+=-(temp - ya - baseB);  ya=temp;  temp=ya + zb;  yb+=-(temp - ya - zb);  ya=temp;  if (negative) {    double denom=1.0 + ya;    double denomr=1.0 / denom;    double denomb=-(denom - 1.0 - ya) + yb;    double ratio=ya * denomr;    temp=ratio * HEX_40000000;    final double ra=ratio + temp - temp;    double rb=ratio - ra;    temp=denom * HEX_40000000;    za=denom + temp - temp;    zb=denom - za;    rb+=(ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;    rb+=yb * denomr;    rb+=-ya * denomb * denomr* denomr;    ya=-ra;    yb=-rb;  }  if (hiPrecOut != null) {    hiPrecOut[0]=ya;    hiPrecOut[1]=yb;  }  return ya + yb;}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public String exportersTipText(){  return "The base exporters to use.";}  }
class C{  private String findTerritoryName(final Point p){  return Util.findTerritoryName(p,m_polygons,"unknown");}  }
class C{  @Inject(method="genTerrainBlocks(Lnet/minecraft/world/World;Ljava/util/Random;Lnet/minecraft/world/chunk/ChunkPrimer;IID)V",at=@At("HEAD"),cancellable=true) public void genTerrainBlocks(World world,Random rand,ChunkPrimer chunk,int x,int z,double stoneNoise,CallbackInfo ci){  ci.cancel();}  }
class C{  private ActionErrors comprobarDuplicados(GestionDescripcionBI descripcionService,HttpServletRequest request,ActionErrors errors,AreaVO areaVO,String guid){  if (errors == null) {    errors=new ActionErrors();  }  comprobarExistenciaRegistroByKey(request,errors,ArchivoModules.DESCRIPCION_MODULE,ArchivoTables.ADAREA_TABLE,guid,LABEL_AREA,Constants.ETIQUETA_GUID);  comprobarExistenciaRegistroByValue(request,errors,ArchivoModules.DESCRIPCION_MODULE,ArchivoTables.ADAREA_TABLE,areaVO.getId(),areaVO.getNombre(),LABEL_AREA,Constants.ETIQUETA_NOMBRE);  return errors;}  }
class C{  public boolean isAfter(Year other){  return year > other.year;}  }
class C{  protected void paintLoc(Graphics2D g2,String loc){  Map map=getMapEnv().getMap();  Point2D pt=map.getPosition(loc);  if (pt != null) {    int x=x(pt);    int y=y(pt);    String info="";    List<String> track=new ArrayList<String>();    if (!env.getAgents().isEmpty())     track=getTrack(env.getAgents().get(0));    ArrayList<Integer> list=new ArrayList<Integer>();    for (int i=0; i < track.size(); i++)     if (track.get(i).equals(loc))     list.add(i + 1);    if (!list.isEmpty())     info=list.toString();    if (scenario != null && scenario.getInitAgentLocation().equals(loc)) {      g2.setColor(Color.red);      g2.fillOval(x - 7,y - 7,14,14);    }    if (getAgentLocs().contains(loc)) {      g2.setColor(Color.red);      g2.fillOval(x - 4,y - 4,8,8);    }    if (destinations != null && destinations.contains(loc))     g2.setColor(Color.green); else     if (track.contains(loc))     g2.setColor(Color.black); else     g2.setColor(Color.gray);    g2.drawString(loc + info,x,y);  }}  }
class C{  public void init(Properties prop,Index<String> featureIndex,AlignmentTemplates alTemps){  this.prop=prop;  this.featureIndex=featureIndex;  this.alTemps=alTemps;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:58.296 -0500",hash_original_method="50F0E936640865FC69642EB9E9B7DACD",hash_generated_method="0108B88B4CBED651CB8E96F68E07A12C") public FactoryConfigurationError(Exception e){  super(e.toString());  this.exception=e;}  }
class C{  public MarkerDescription(String type,Map attributes,IResource resource){  this.type=type;  this.attributes=attributes;  this.resource=resource;}  }
class C{  public void testGetSubjectDN(){  if (this.cert == null) {    return;  }  assertEquals("The subject DN is not correct.",tbt_cert.getSubjectDN(),cert.getSubjectDN());}  }
class C{  public void onTerminate(){  sContext.unregisterReceiver(mModel);  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(sContext);  launcherApps.removeOnAppsChangedCallback(mModel);  PackageInstallerCompat.getInstance(sContext).onStop();}  }
class C{  static void resetRoundingParams(Rounded rounded){  rounded.setCircle(false);  rounded.setRadius(0);  rounded.setBorder(Color.TRANSPARENT,0);  rounded.setPadding(0);}  }
class C{  @Override public void postProcess() throws Exception {  m_ResultListener.postProcess(this);  if (m_debugOutput) {    if (m_ZipDest != null) {      m_ZipDest.finished();      m_ZipDest=null;    }  }}  }
class C{  @Override public void delete(InternalLog log) throws IOException {  final byte[] rowkey=RowkeyHelper.getRowkey(log);  final Delete delete=createDelete(rowkey);  tbl.delete(delete);}  }
class C{  protected void didAdjustTree(){}  }
class C{  public static void writeStringToFile(File file,String data,String encoding,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    IOUtils.write(data,out,encoding);  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public void dispose(){  clearChildContexts();synchronized (eventListenerSet) {    Iterator iter=eventListenerSet.iterator();    while (iter.hasNext()) {      EventListenerMememto m=(EventListenerMememto)iter.next();      NodeEventTarget et=m.getTarget();      EventListener el=m.getListener();      boolean uc=m.getUseCapture();      String t=m.getEventType();      boolean in=m.getNamespaced();      if (et == null || el == null || t == null) {        continue;      }      if (m instanceof ImplementationEventListenerMememto) {        String ns=m.getNamespaceURI();        Node nde=(Node)et;        AbstractNode n=(AbstractNode)nde.getOwnerDocument();        if (n != null) {          XBLEventSupport es;          es=(XBLEventSupport)n.initializeEventSupport();          es.removeImplementationEventListenerNS(ns,t,el,uc);        }      } else       if (in) {        String ns=m.getNamespaceURI();        et.removeEventListenerNS(ns,t,el,uc);      } else {        et.removeEventListener(t,el,uc);      }    }  }  if (document != null) {    removeDOMListeners();    removeBindingListener();  }  if (animationEngine != null) {    animationEngine.dispose();    animationEngine=null;  }  Iterator iter=interpreterMap.values().iterator();  while (iter.hasNext()) {    Interpreter interpreter=(Interpreter)iter.next();    if (interpreter != null)     interpreter.dispose();  }  interpreterMap.clear();  if (focusManager != null) {    focusManager.dispose();  }}  }
class C{  @Override public boolean isTraceOnConsole(){  return super.getBooleanPreferencesValue(TypeScriptCorePreferenceConstants.TSSERVER_TRACE_ON_CONSOLE,false);}  }
class C{  @Override protected void extendSignatureTag() throws DSSException {  super.extendSignatureTag();  if (xadesSignature.hasLTAProfile()) {    checkSignatureIntegrity();    final ValidationContext validationContext=xadesSignature.getSignatureValidationContext(certificateVerifier);    removeLastTimestampValidationData();    incorporateTimestampValidationData(validationContext);  }  incorporateArchiveTimestamp();}  }
class C{  public static void showConsole(@NotNull final ConsoleView consoleView,@Nullable final JComponent actionListenerComponent,@NotNull final String title,@NotNull final Project project,@Nullable final Collection<Runnable> closeListeners,@NotNull final AnAction... customActions){  final AnAction[] actions=ArrayUtil.mergeArrays(customActions,consoleView.createConsoleActions());  show(consoleView.getComponent(),actionListenerComponent,title,project,closeListeners,actions);}  }
class C{  public void destroy() throws Exception {  this.bootstrap.group().shutdownGracefully().sync();  this.bootstrap.childGroup().shutdownGracefully().sync();  DefaultServer.LOGGER.warn("Server shutdown ... ");}  }
class C{  public long numberOfParts(){  return numberOfParts;}  }
class C{  public Sector union(Sector sector){  if (sector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Sector","union","missingSector"));  }  if ((sector.minLatitude < sector.maxLatitude) && (sector.minLongitude < sector.maxLongitude)) {    if ((this.minLatitude < this.maxLatitude) && (this.minLongitude < this.maxLongitude)) {      if (this.minLatitude > sector.minLatitude)       this.minLatitude=sector.minLatitude;      if (this.maxLatitude < sector.maxLatitude)       this.maxLatitude=sector.maxLatitude;      if (this.minLongitude > sector.minLongitude)       this.minLongitude=sector.minLongitude;      if (this.maxLongitude < sector.maxLongitude)       this.maxLongitude=sector.maxLongitude;    } else {      this.minLatitude=sector.minLatitude;      this.maxLatitude=sector.maxLatitude;      this.minLongitude=sector.minLongitude;      this.maxLongitude=sector.maxLongitude;    }  }  return this;}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case DomPackage.LINE_TAG__DOCLET:    return eInternalContainer().eInverseRemove(this,DomPackage.DOCLET__LINE_TAGS,Doclet.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  public static byte[] excelFrom(List<Issue> issueList) throws WriteException, IOException {  WritableWorkbook workbook;  WritableSheet sheet;  WritableFont wf1=new WritableFont(WritableFont.TIMES,13,WritableFont.BOLD,false,UnderlineStyle.SINGLE,Colour.BLUE_GREY,ScriptStyle.NORMAL_SCRIPT);  WritableCellFormat cf1=new WritableCellFormat(wf1);  cf1.setBorder(Border.ALL,BorderLineStyle.DOUBLE);  cf1.setAlignment(Alignment.CENTRE);  WritableFont wf2=new WritableFont(WritableFont.TAHOMA,11,WritableFont.NO_BOLD,false,UnderlineStyle.NO_UNDERLINE,Colour.BLACK,ScriptStyle.NORMAL_SCRIPT);  WritableCellFormat cf2=new WritableCellFormat(wf2);  cf2.setShrinkToFit(true);  cf2.setBorder(Border.ALL,BorderLineStyle.THIN);  cf2.setAlignment(Alignment.CENTRE);  DateFormat valueFormatDate=new DateFormat("yyyy-MM-dd HH:mm:ss");  WritableCellFormat cfDate=new WritableCellFormat(valueFormatDate);  cfDate.setFont(wf2);  cfDate.setShrinkToFit(true);  cfDate.setBorder(Border.ALL,BorderLineStyle.THIN);  cfDate.setAlignment(Alignment.CENTRE);  ByteArrayOutputStream bos=new ByteArrayOutputStream();  workbook=Workbook.createWorkbook(bos);  sheet=workbook.createSheet(String.valueOf(JodaDateUtil.today().getTime()),0);  String[] labalArr={"ID","STATE","TITLE","ASSIGNEE","DATE"};  for (int i=0; i < labalArr.length; i++) {    sheet.addCell(new jxl.write.Label(i,0,labalArr[i],cf1));    sheet.setColumnView(i,20);  }  for (int i=1; i < issueList.size() + 1; i++) {    Issue issue=issueList.get(i - 1);    int colcnt=0;    sheet.addCell(new jxl.write.Label(colcnt++,i,issue.id.toString(),cf2));    sheet.addCell(new jxl.write.Label(colcnt++,i,issue.state.toString(),cf2));    sheet.addCell(new jxl.write.Label(colcnt++,i,issue.title,cf2));    sheet.addCell(new jxl.write.Label(colcnt++,i,getAssigneeName(issue.assignee),cf2));    sheet.addCell(new jxl.write.DateTime(colcnt++,i,issue.createdDate,cfDate));  }  workbook.write();  try {    workbook.close();  } catch (  WriteException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return bos.toByteArray();}  }
class C{  public LoggingScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  public GraphicsNode lastChild(){  GraphicsNode result=getLastChild(currentNode);  if (result != null) {    currentNode=result;  }  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public DAddExtensions(JFrame parent,String title,X509ExtensionSet extensions,PublicKey authorityPublicKey,X500Name authorityCertName,BigInteger authorityCertSerialNumber,PublicKey subjectPublicKey){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  setTitle(res.getString("DAddExtensions.Title"));  this.extensions=extensions;  this.authorityPublicKey=authorityPublicKey;  this.authorityCertName=authorityCertName;  this.authorityCertSerialNumber=authorityCertSerialNumber;  this.subjectPublicKey=subjectPublicKey;  initComponents();}  }
class C{  private void addFreightPop(Population populationOut){  File freightPlansFile=new File(outputDir + "plans/freight_plans.xml.gz");  if (!freightPlansFile.exists()) {    log.warn("Freight population file not found under " + freightPlansFile + "; no freight population added.");  } else {    log.info("Adding freight population to O-D based population");    Scenario scenarioFreight=ScenarioUtils.createScenario(ConfigUtils.createConfig());    new PopulationReader(scenarioFreight).readFile(freightPlansFile.toString());    for (    Person person : scenarioFreight.getPopulation().getPersons().values()) {      populationOut.addPerson(person);    }  }}  }
class C{  public void shortHorn(){  VSDSound snd=sound_list.get("HORN");  snd.play();}  }
class C{  public TestableVisionOpMode(){  super(false);}  }
class C{  public void trainSystem(int system,String savename) throws IOException {switch (system) {case 0:    SentimentSystemNRC nrcSystem=new SentimentSystemNRC(tweetList);  nrcSystem.train(savename);break;case 1:SentimentSystemGUMLTLT gumltltSystem=new SentimentSystemGUMLTLT(tweetList);gumltltSystem.train(savename);break;case 2:SentimentSystemKLUE klueSystem=new SentimentSystemKLUE(tweetList);klueSystem.train(savename);break;default :throw new IllegalArgumentException("Invalid system: " + system);}}  }
class C{  public BreakpointHitReply(final int packetId,final int errorCode,final long tid,final RegisterValues registerValues){  super(packetId,errorCode,tid,registerValues);}  }
class C{  public final void appendPhase(BasePhase<? super C> phase){  phases.add(phase);}  }
class C{  private synchronized void syncUsers(){  try {    users.clear();    users.addAll(provider.loadUsers());  } catch (  final CouldntLoadDataException exception) {    CUtilityFunctions.logException(exception);  }}  }
class C{  public static String toString(final BigDecimal value){  return value.toString();}  }
class C{  public LabelledStatement createLabelledStatement(){  LabelledStatementImpl labelledStatement=new LabelledStatementImpl();  return labelledStatement;}  }
class C{  public void updateHostIOLimitIOPs(WBEMClient client,CIMObjectPath storageGroupPath,Integer hostIOLimitIOPs) throws WBEMException {  if (hostIOLimitIOPs == null) {    return;  }  _log.info("Attempting to update Host IO Limit IOPs for Storage Group : {} to {}",storageGroupPath.toString(),hostIOLimitIOPs);  CIMPropertyFactory factoryRef=(CIMPropertyFactory)ControllerServiceImpl.getBean("CIMPropertyFactory");  CIMInstance toUpdate=new CIMInstance(storageGroupPath,new CIMProperty[]{factoryRef.uint32(EMC_MAX_IO,hostIOLimitIOPs)});  _log.debug("Params: " + toUpdate.toString());  client.modifyInstance(toUpdate,new String[]{EMC_MAX_IO});}  }
class C{  private File subFolder(String subFolder){  try {    return getBrokerInstance().toPath().resolve(subFolder).toFile();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public SlotWindow(String title,int width,int height){  super(title,title);  content=new SlotGrid(width,height);  setContent(content);}  }
class C{  public void blockDestroy(GlowPlayer player,GlowBlock block,BlockFace face){}  }
class C{  @Override public ImmutableListMultimap<K,V> build(){  return (ImmutableListMultimap<K,V>)super.build();}  }
class C{  private boolean isVolumeNameTaken(String name){  return !BlockStorageUtils.getVolumeByName(name).isEmpty();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_1__CODE_LANG_1:    getCodeLang_1().clear();  getCodeLang_1().addAll((Collection<? extends CodeLang_>)newValue);return;case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_1__CODE_LANGS_1:getCodeLangs_1().clear();getCodeLangs_1().addAll((Collection<? extends CodeLangs_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public final void addAttribute(String uri,String local,String qname,String type,String val){  int index=super.getLength();  super.addAttribute(uri,local,qname,type,val);  if (index < MAXMinus1) {    return;  } else   if (index == MAXMinus1) {    switchOverToHash(MAX);  } else {    Integer i=new Integer(index);    m_indexFromQName.put(qname,i);    m_buff.setLength(0);    m_buff.append('{').append(uri).append('}').append(local);    String key=m_buff.toString();    m_indexFromQName.put(key,i);  }  return;}  }
class C{  private void reportAbuse(final String selectedWallId){  ReportAbuseRequestModel reportAbuseRequestModel=new ReportAbuseRequestModel();  reportAbuseRequestModel.setType(AppConstants.TYPE);  reportAbuseRequestModel.setId(selectedWallId);  RetroCallback retroCallback;  retroCallback=new RetroCallback(this);  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.REPORT_ABUSE);  retroCallbackList.add(retroCallback);  mYeloApi.reportAbuse(reportAbuseRequestModel,retroCallback);}  }
class C{  private void initialize(){  this.setSize(750,584);}  }
class C{  public String valueOf(int i){  return Integer.toString(i);}  }
class C{  public static void scanThread(RVMThread thread,TraceLocal trace,boolean processCodeLocations,boolean newRootsSufficient){  if (DEFAULT_VERBOSITY >= 1) {    VM.sysWriteln("scanning ",thread.getThreadSlot());  }  AbstractRegisters regs=thread.getContextRegisters();  Address gprs=Magic.objectAsAddress(regs.getGPRs());  Address ip=regs.getInnermostInstructionAddress();  Address fp=regs.getInnermostFramePointer();  regs.clear();  regs.setInnermost(ip,fp);  scanThread(thread,trace,processCodeLocations,gprs,Address.zero(),newRootsSufficient);}  }
class C{  public ConfirmPanel(boolean withCancelButton,boolean withRefreshButton,boolean withResetButton,boolean withCustomizeButton,boolean withHistoryButton,boolean withZoomButton,boolean withText){  super();  BorderLayout mainLayout=new BorderLayout();  this.setLayout(mainLayout);  this.setName("confirmPanel");  CPanel okCancel=new CPanel(new FlowLayout(FlowLayout.RIGHT));  okCancel.setOpaque(false);  bCancel=createCancelButton(withText);  okCancel.add(bCancel);  bOK=createOKButton(withText);  okCancel.add(bOK);  setCancelVisible(withCancelButton);  this.add(okCancel,BorderLayout.EAST);  if (withRefreshButton) {    bRefresh=createRefreshButton(withText);    addComponent(bRefresh);  }  if (withResetButton) {    bReset=createResetButton(withText);    addComponent(bReset);  }  if (withCustomizeButton) {    bCustomize=createCustomizeButton(withText);    addComponent(bCustomize);  }  if (withHistoryButton) {    bHistory=createHistoryButton(withText);    addComponent(bHistory);  }  if (withZoomButton) {    bZoom=createZoomButton(withText);    addComponent(bZoom);  }}  }
class C{  public void rotateLeft(int places,int startIndex,int endIndex){  for (int x=0; x < places; x++) {    rotateLeft(startIndex,endIndex);  }}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(Events.IMAGE);  rpclass.addAttribute(IMAGE_ATTR,Type.STRING);  rpclass.addAttribute(ATTACH_ATTR,Type.FLAG);  rpclass.addAttribute(X_ATTR,Type.INT);  rpclass.addAttribute(Y_ATTR,Type.FLAG);}  }
class C{  public DataSourceManager(){}  }
class C{  static boolean contains(Object enumValue,Object[] expectedValues){  for (  final Object expected : expectedValues) {    if (enumValue.equals(expected)) {      return true;    }  }  return false;}  }
class C{  public void scale(double scale,Component comp){  setImage(mDefaultImage);  _scale=scale;  if (Math.abs(scale - 1.0) > .00001) {    _transformS=AffineTransform.getScaleInstance(scale,scale);  }  rotate(_deg,comp);}  }
class C{  public boolean isRelative(){  if (relative == null) {    return false;  } else {    return relative;  }}  }
class C{  public void copyFrom(BlockType other){  this.isValid=other.isValid;  this.isTop=other.isTop;  if (isValid) {    this.depth=other.depth;    this.clear();    this.or(other);  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ScriptElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == AnnotableScriptElement.class) {switch (baseFeatureID) {case N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT__ANNOTATION_LIST:    return N4JSPackage.N4_TYPE_DECLARATION__ANNOTATION_LIST;default :  return -1;}}if (baseClass == ModifiableElement.class) {switch (baseFeatureID) {case N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS:return N4JSPackage.N4_TYPE_DECLARATION__DECLARED_MODIFIERS;default :return -1;}}if (baseClass == ExportableElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public int oom_adj() throws IOException {  return Integer.parseInt(read("oom_adj"));}  }
class C{  LoadedClass(String name,boolean systemClass){  this.name=name;  this.systemClass=systemClass;}  }
class C{  @CheckReturnValue public ThreadFactory build(){  return build(this);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof OutputDeviceAssigned);}  }
class C{  @Override public void registerOutParameter(String parameterName,int sqlType,String typeName) throws SQLException {  registerOutParameter(getIndexForName(parameterName),sqlType,typeName);}  }
class C{  private final void updateHeap(final double distance,final int iid){  final double prevdist=kdist;  final int previd=heap.peekValue();  heap.replaceTopElement(distance,iid);  kdist=heap.peekKey();  if (kdist < prevdist) {    numties=0;  } else {    addToTies(previd);  }}  }
class C{  public boolean isMetaphoneEqual(String str1,String str2){  return metaphone(str1).equals(metaphone(str2));}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  private synchronized void saveTokenKeysBundle(String vdcID,TokenKeysBundle bundle){  InterProcessLock tokenBundleLock=null;  try {    tokenBundleLock=coordinator.getLock(FOREIGN_TOKEN_BUNDLE_CONFIG_LOCK);    if (tokenBundleLock == null) {      log.error("Could not acquire lock for tokenkeys bundle caching");      throw SecurityException.fatals.couldNotAcquireLockTokenCaching();    }    tokenBundleLock.acquire();    Configuration config=coordinator.queryConfiguration(FOREIGN_TOKEN_KEYS_BUNDLE_CONFIG,FOREIGN_TOKEN_KEYS_BUNDLE_KEYID);    ConfigurationImpl configImpl=null;    if (config == null) {      configImpl=new ConfigurationImpl();      configImpl.setId(FOREIGN_TOKEN_KEYS_BUNDLE_KEYID);      configImpl.setKind(FOREIGN_TOKEN_KEYS_BUNDLE_CONFIG);      log.debug("Creating new foreign tokens config");    } else {      configImpl=(ConfigurationImpl)config;      log.debug("Updating existing foreign token config");    }    configImpl.setConfig(vdcID,SerializerUtils.serializeAsBase64EncodedString(bundle));    coordinator.persistServiceConfiguration(configImpl);    foreignTokenKeysMap.put(vdcID,bundle);  } catch (  Exception ex) {    log.error("Could not acquire lock while trying to cache tokenkeys bundle.",ex);  } finally {    try {      if (tokenBundleLock != null) {        tokenBundleLock.release();      }    } catch (    Exception ex) {      log.error("Unable to release token keys bundle caching lock",ex);    }  }}  }
class C{  private static char[] encode(final byte[] data,final char[] toDigits){  final int l=data.length;  final char[] out=new char[l << 1];  for (int i=0, j=0; i < l; i++) {    out[j++]=toDigits[(0xF0 & data[i]) >>> 4];    out[j++]=toDigits[0x0F & data[i]];  }  return out;}  }
class C{  private void packAllMassnahmeColumns(){  imageColumnMassnahme.pack();  numberColumnMassnahme.pack();  nameColumnMassnahme.pack();}  }
class C{  public FastCharBuffer append(CharSequence csq,int start,int end){  for (int i=start; i < end; i++) {    append(csq.charAt(i));  }  return this;}  }
class C{  public VMwareStorage addStorage(String host,List<DynamicProperty> properties){  if (properties == null || properties.size() == 0) {    return null;  }  VMwareStorage result=new VMwareStorage();  for (  DynamicProperty dp : properties) {    String key=dp.getName();    if ("summary.name".equals(key) && dp.getVal() != null) {      result.setName(dp.getVal().toString());    } else     if ("summary.capacity".equals(key) && dp.getVal() != null) {      result.setCapacity(VMwareValue.fromBytes(Long.parseLong(dp.getVal().toString())));    } else     if ("summary.freeSpace".equals(key) && dp.getVal() != null) {      result.setFreeStorage(VMwareValue.fromBytes(Long.parseLong(dp.getVal().toString())));    }  }  storages.put(result.getName(),result);  if (storageByHost.containsKey(host)) {    storageByHost.get(host).add(result);  } else {    List<VMwareStorage> storage=new ArrayList<VMwareStorage>();    storage.add(result);    storageByHost.put(host,storage);  }  return result;}  }
class C{  protected void attrRemoved(Attr node,String oldv){}  }
class C{  @Override public void receiveDecoderStateEvent(DecoderStateEvent event){switch (event.getEvent()) {case RESET:    resetState();  break;default :break;}}  }
class C{  public ServerHelloDone(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.342 -0500",hash_original_method="D26DF74C9E797B538D6D01C69F8C39EB",hash_generated_method="9F23384B40E9CEBA3B49A12206B6C84E") public static void cursorIntToContentValues(Cursor cursor,String field,ContentValues values,String key){  int colIndex=cursor.getColumnIndex(field);  if (!cursor.isNull(colIndex)) {    values.put(key,cursor.getInt(colIndex));  } else {    values.put(key,(Integer)null);  }}  }
class C{  private void initialize(){  this.setContinuousLayout(true);  this.setRightComponent(getJPanel1());  this.setDividerLocation(200);  this.setDividerSize(3);  this.setResizeWeight(0.3D);  this.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.LOWERED));  this.setLeftComponent(getJScrollPane());}  }
class C{  public long size(){  return size;}  }
class C{  public static void mergeArrays(Object[] arr1,Object[] arr2,Object[] destinationArray){  System.arraycopy(arr1,0,destinationArray,0,arr1.length);  System.arraycopy(arr2,0,destinationArray,arr1.length,arr2.length);}  }
class C{  public String toString(){  if (version == null || version.isEmpty()) {    return name;  }  return name + "/" + version;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.723 -0400",hash_original_method="E76D6159725CEBB486CB0BAB91729041",hash_generated_method="FAD7F25542D518C23F190AC1C8A02A15") final void unsplice(Node pred,Node s){  s.forgetContents();  if (pred != null && pred != s && pred.next == s) {    Node n=s.next;    if (n == null || (n != s && pred.casNext(s,n) && pred.isMatched())) {      for (; ; ) {        Node h=head;        if (h == pred || h == s || h == null)         return;        if (!h.isMatched())         break;        Node hn=h.next;        if (hn == null)         return;        if (hn != h && casHead(h,hn))         h.forgetNext();      }      if (pred.next != pred && s.next != s) {        for (; ; ) {          int v=sweepVotes;          if (v < SWEEP_THRESHOLD) {            if (casSweepVotes(v,v + 1))             break;          } else           if (casSweepVotes(v,0)) {            sweep();            break;          }        }      }    }  }}  }
class C{  public void removeAllElements(){  if (null == m_map)   return;  for (int i=0; i < m_firstFree; i++) {    m_map[i]=DTM.NULL;  }  m_firstFree=0;}  }
class C{  public static GroupCategorySet union(GroupCategorySet one,GroupCategorySet two){  Assert.isNotNull(one);  Assert.isNotNull(two);  if (one == two)   return one;  if (one == NONE)   return two;  if (two == NONE)   return one;  Set combined=new HashSet();  combined.addAll(one.asList());  combined.addAll(two.asList());  return new GroupCategorySet(combined);}  }
class C{  private static void writeMutation(final Text table,final Mutation mutation,final Context context,final boolean isDelete) throws IOException, InterruptedException {  if (isDelete) {    final List<ColumnUpdate> updates=mutation.getUpdates();    final ColumnUpdate columnUpdate=updates.get(0);    final ColumnVisibility cv=columnUpdate.getColumnVisibility() != null ? new ColumnVisibility(columnUpdate.getColumnVisibility()) : null;    final Mutation deleteMutation=new Mutation(new Text(mutation.getRow()));    deleteMutation.putDelete(columnUpdate.getColumnFamily(),columnUpdate.getColumnQualifier(),cv,columnUpdate.getTimestamp());    context.write(table,deleteMutation);  } else {    context.write(table,mutation);  }}  }
class C{  private boolean shouldIgnoreInputEventFromClass(String clzName){  for (  Pattern re : IGNORE_INPUT_EVENTS_IN) {    Matcher matcher=re.matcher(clzName);    if (matcher.matches())     return true;  }  return false;}  }
class C{  public static Type resolveVariable(TypeVariable variable,final Class implClass){  final Class rawType=getRawType(implClass,null);  int index=ArraysUtil.indexOf(rawType.getTypeParameters(),variable);  if (index >= 0) {    return variable;  }  final Class[] interfaces=rawType.getInterfaces();  final Type[] genericInterfaces=rawType.getGenericInterfaces();  for (int i=0; i <= interfaces.length; i++) {    Class rawInterface;    if (i < interfaces.length) {      rawInterface=interfaces[i];    } else {      rawInterface=rawType.getSuperclass();      if (rawInterface == null) {        continue;      }    }    final Type resolved=resolveVariable(variable,rawInterface);    if (resolved instanceof Class || resolved instanceof ParameterizedType) {      return resolved;    }    if (resolved instanceof TypeVariable) {      final TypeVariable typeVariable=(TypeVariable)resolved;      index=ArraysUtil.indexOf(rawInterface.getTypeParameters(),typeVariable);      if (index < 0) {        throw new IllegalArgumentException("Invalid type variable:" + typeVariable);      }      final Type type=i < genericInterfaces.length ? genericInterfaces[i] : rawType.getGenericSuperclass();      if (type instanceof Class) {        return Object.class;      }      if (type instanceof ParameterizedType) {        return ((ParameterizedType)type).getActualTypeArguments()[index];      }      throw new IllegalArgumentException("Unsupported type: " + type);    }  }  return null;}  }
class C{  @Override public void selectAgent(final DrawingAttributes attributes){  IAgent ag=null;  boolean withHighlight=true;  if (attributes != null)   if (attributes.getSpeciesName() != null) {    withHighlight=false;    final GamaPoint pickedPoint=renderer.getIntWorldPointFromWindowPoint(renderer.camera.getLastMousePressedPosition());    ag=scope.getRoot().getPopulationFor(attributes.getSpeciesName()).getAgent(scope,new GamaPoint(pickedPoint.x,-pickedPoint.y));  } else {    final AgentIdentifier id=attributes.getAgentIdentifier();    if (id != null)     ag=id.getAgent(scope);  }  if (withHighlight)   menuManager.buildMenu(renderer.camera.getMousePosition().x,renderer.camera.getMousePosition().y,ag,cleanup,AgentsMenu.HIGHLIGHT_ACTION); else   menuManager.buildMenu(renderer.camera.getMousePosition().x,renderer.camera.getMousePosition().y,ag,cleanup);}  }
class C{  public void add(Rule rule){  this.rules.add(rule);}  }
class C{  @Override public MemBufferHolder<SysMemAllocator> resizeBuffer(MemBufferHolder<SysMemAllocator> mholder,long size){  MemBufferHolder<SysMemAllocator> ret=null;  boolean ac=null != mholder.getRefId();  if (size > 0) {    int bufpos=mholder.get().position();    int buflimit=mholder.get().limit();    if (currentMemory.get() + size > maxStoreCapacity) {      if (m_activegc) {        m_bufcollector.waitReclaimCoolDown(m_gctimeout);      }    }    if (currentMemory.get() + size <= maxStoreCapacity) {      ByteBuffer buf=Utils.resizeByteBuffer(mholder.get(),size);      if (null != buf) {        mholder.clear();        mholder.destroy();        buf.position(bufpos <= size ? bufpos : 0);        buf.limit(buflimit <= size ? buflimit : (int)size);        ret=new MemBufferHolder<SysMemAllocator>(this,buf);        if (ac) {          m_bufcollector.register(ret);        }      }    }  }  return ret;}  }
class C{  public void startSystem(){  paused=false;  for (  Module module : new ArrayList<Module>(modules)) {    try {      if (!module.isRunning()) {        module.start();      } else {        module.pause(false);      }    } catch (    RuntimeException e) {      log.warning("could not start module " + module.getClass().getCanonicalName() + ": "+ e);      e.printStackTrace();      modules.remove(module);    }  }synchronized (curState) {    curState.setAsNew();    update();  }}  }
class C{  public static int[][] mirrorMatrixBothCoords(int[][] matrix){  int rows=matrix.length;  int cols=matrix[0].length;  int[][] mirrored=new int[rows][cols];  for (int r=0; r < rows; r++) {    for (int c=0; c < cols; c++) {      mirrored[(rows - 1) - r][(cols - 1) - c]=matrix[r][c];    }  }  return mirrored;}  }
class C{  public static void restorePriorities(){  PRIORITIES=Collections.unmodifiableMap(DEFAULT_PRIORITIES);}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public ElideResponse post(String path,String jsonApiDocument,Object opaqueUser){  return this.post(path,jsonApiDocument,opaqueUser,SecurityMode.SECURITY_ACTIVE);}  }
class C{  public Dimension preferredSize(){  return getPreferredSize();}  }
class C{  private int[][] generateImageMap(ArrayList nodes_ID){  int numOfNode=nodes_ID.size();  int rowNode_count=(int)Math.ceil((float)numOfNode / SIZE);  int rowTotal_count=2 * rowNode_count - 1;  int ROW=rowTotal_count;  int COL=2 * SIZE - 1;  int[][] imageMap=new int[ROW][COL];  boolean isEmptyRow_Right=true;  boolean isForwardRow=true;  int row_Last=ROW - 1;  int index_Row=0;  int index_Node=0;  int i, j;  for (index_Row=0; index_Row < ROW; index_Row++) {    if ((index_Row % 2) != 0) {      if (isEmptyRow_Right) {        imageMap[index_Row][COL - 1]=ARROW_DOWN;        isEmptyRow_Right=false;      } else {        imageMap[index_Row][0]=ARROW_DOWN;        isEmptyRow_Right=true;      }    }    if ((index_Row % 2) == 0) {      if (isForwardRow) {        isForwardRow=false;        if (index_Row == row_Last) {          j=0;          for (i=index_Node; i < numOfNode; i++) {            imageMap[index_Row][j++]=((Integer)nodes_ID.get(i)).intValue();            if (i != numOfNode - 1)             imageMap[index_Row][j++]=ARROW_FORWARD;          }        } else {          for (i=0; i < COL; i++)           imageMap[index_Row][i]=((i % 2 == 0) ? ((Integer)nodes_ID.get(index_Node++)).intValue() : ARROW_FORWARD);        }      } else {        isForwardRow=true;        if (index_Row == row_Last) {          j=0;          for (i=index_Node; i < numOfNode; i++) {            imageMap[index_Row][COL - 1 - j++]=((Integer)nodes_ID.get(i)).intValue();            if (i != numOfNode - 1)             imageMap[index_Row][COL - 1 - j++]=ARROW_BACKWARD;          }        } else {          j=0;          for (i=0; i < COL; i++) {            imageMap[index_Row][COL - 1 - i]=(i % 2 == 0) ? ((Integer)nodes_ID.get(index_Node++)).intValue() : ARROW_BACKWARD;          }        }      }    }  }  return imageMap;}  }
class C{  public Matrix4f scaleLocal(float x,float y,float z){  return scaleLocal(x,y,z,this);}  }
class C{  public void testHasFeatureCore() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("staff",builder);  domImpl=doc.getImplementation();  state=domImpl.hasFeature("core","2.0");  assertTrue("domimplementationFeaturecoreAssert",state);}  }
class C{  public boolean isAbstract(){  return Modifier.isAbstract(_class.getModifiers());}  }
class C{  public final void testValidateSucceeds(){  IPv6AddressValidator iPv4AddressValidator=new IPv6AddressValidator("foo");  assertTrue(iPv4AddressValidator.validate(""));  assertTrue(iPv4AddressValidator.validate("FE80:0000:0000:0000:0202:B3FF:FE1E:8329"));  assertTrue(iPv4AddressValidator.validate("FE80::0202:B3FF:FE1E:8329"));}  }
class C{  private static char[] encodeHex(final byte[] data,final char[] toDigits){  final int l=data.length;  final char[] out=new char[l << 1];  for (int i=0, j=0; i < l; i++) {    out[j++]=toDigits[(0xF0 & data[i]) >>> 4];    out[j++]=toDigits[0x0F & data[i]];  }  return out;}  }
class C{  @Override public void onSortByRating(){  mSorter.sortMoviesByRating(mListMovies);  mAdapter.notifyDataSetChanged();}  }
class C{  public void removeReference(Block block){  String procedureName=getProcedureName(block);  if (mProcedureReferences.containsKey(procedureName)) {    mProcedureReferences.get(procedureName).remove(block);  } else {    throw new IllegalStateException("Tried to remove a procedure reference that was not in the list of references");  }}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  @Override public List<Integer> readSortIndex() throws IOException {  if (null == columnSortInfo) {    readColumnSortInfo();  }  return columnSortInfo.getSort_index();}  }
class C{  public void testCertificateFactory14() throws CertificateException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  List<Certificate> list=null;  for (int i=0; i < certFs.length; i++) {    try {      certFs[i].generateCertPath(list);      fail("generateCertificate must thrown CertificateException when list is null");    } catch (    NullPointerException e) {    }  }}  }
class C{  private static void checkArguments(final JFrame parent,final IDebugger debugger,final TraceLogger logger){  Preconditions.checkNotNull(parent,"IE01566: Parent argument can not be null");  Preconditions.checkNotNull(debugger,"IE01567: Debugger argument can not be null");  Preconditions.checkNotNull(logger,"IE01568: Logger argument can not be null");}  }
class C{  public Object clone(){  FloatArrayList clone=new FloatArrayList((float[])elements.clone());  clone.setSizeRaw(size);  return clone;}  }
class C{  public static List<File> sortInBatch(File file,Comparator<String> cmp,int maxtmpfiles) throws IOException {  List<File> files=new ArrayList<File>();  BufferedReader fbr=new BufferedReader(new FileReader(file));  long blocksize=estimateBestSizeOfBlocks(file,maxtmpfiles);  try {    List<String> tmplist=new ArrayList<String>();    String line="";    try {      while (line != null) {        long currentblocksize=0;        while ((currentblocksize < blocksize) && ((line=fbr.readLine()) != null)) {          tmplist.add(line);          currentblocksize+=line.length() * 2;        }        files.add(sortAndSave(tmplist,cmp));        tmplist.clear();      }    } catch (    EOFException oef) {      if (tmplist.size() > 0) {        files.add(sortAndSave(tmplist,cmp));        tmplist.clear();      }    }  }  finally {    fbr.close();  }  return files;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetattributenodens02.class,args);}  }
class C{  private boolean isEnclosedInArray(final String rawData){  return rawData.matches("(?ims)^\\s*\\[.*\\]");}  }
class C{  public void append(byte[] buffer,int offset,int length){  if (_length + length >= _capacity)   ensureCapacity(_length + length);  System.arraycopy(buffer,offset,_buffer,_length,length);  _length+=length;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.310 -0500",hash_original_method="4C2FCF871904470A4665E52D44D62875",hash_generated_method="D931D99D7A7E06878979263386640E8D") public void disableNetwork(int netId,int reason){  mAsyncChannel.sendMessage(CMD_DISABLE_NETWORK,netId,reason);}  }
class C{  AlignmentPattern find() throws NotFoundException {  int startX=this.startX;  int height=this.height;  int maxJ=startX + width;  int middleI=startY + (height >> 1);  int[] stateCount=new int[3];  for (int iGen=0; iGen < height; iGen++) {    int i=middleI + ((iGen & 0x01) == 0 ? (iGen + 1) >> 1 : -((iGen + 1) >> 1));    stateCount[0]=0;    stateCount[1]=0;    stateCount[2]=0;    int j=startX;    while (j < maxJ && !image.get(j,i)) {      j++;    }    int currentState=0;    while (j < maxJ) {      if (image.get(j,i)) {        if (currentState == 1) {          stateCount[currentState]++;        } else {          if (currentState == 2) {            if (foundPatternCross(stateCount)) {              AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,j);              if (confirmed != null) {                return confirmed;              }            }            stateCount[0]=stateCount[2];            stateCount[1]=1;            stateCount[2]=0;            currentState=1;          } else {            stateCount[++currentState]++;          }        }      } else {        if (currentState == 1) {          currentState++;        }        stateCount[currentState]++;      }      j++;    }    if (foundPatternCross(stateCount)) {      AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,maxJ);      if (confirmed != null) {        return confirmed;      }    }  }  if (!possibleCenters.isEmpty()) {    return possibleCenters.get(0);  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:41.906 -0500",hash_original_method="31528962776A4296CB5B735981815A21",hash_generated_method="186B8F2FBB52DC26F824F7EE78727CF3") public void startTest(Test test){  String testClass=test.getClass().getName();  String testName=((TestCase)test).getName();  mTestResult=new Bundle(mResultTemplate);  mTestResult.putString(REPORT_KEY_NAME_CLASS,testClass);  mTestResult.putString(REPORT_KEY_NAME_TEST,testName);  mTestResult.putInt(REPORT_KEY_NUM_CURRENT,++mTestNum);  if (testClass != null && !testClass.equals(mTestClass)) {    mTestResult.putString(Instrumentation.REPORT_KEY_STREAMRESULT,String.format("\n%s:",testClass));    mTestClass=testClass;  } else {    mTestResult.putString(Instrumentation.REPORT_KEY_STREAMRESULT,"");  }  Method testMethod=null;  try {    testMethod=test.getClass().getMethod(testName);    if (testMethod.isAnnotationPresent(RepetitiveTest.class)) {      int numIterations=testMethod.getAnnotation(RepetitiveTest.class).numIterations();      mTestResult.putInt(REPORT_KEY_NUM_ITERATIONS,numIterations);    }  } catch (  NoSuchMethodException e) {  }  try {    if (mTestNum == 1)     Thread.sleep(mDelayMsec);  } catch (  InterruptedException e) {    throw new IllegalStateException(e);  }  sendStatus(REPORT_VALUE_RESULT_START,mTestResult);  mTestResultCode=0;  mIsTimedTest=false;  mIncludeDetailedStats=false;  try {    if (testMethod != null && testMethod.isAnnotationPresent(TimedTest.class)) {      mIsTimedTest=true;      mIncludeDetailedStats=testMethod.getAnnotation(TimedTest.class).includeDetailedStats();    } else     if (test.getClass().isAnnotationPresent(TimedTest.class)) {      mIsTimedTest=true;      mIncludeDetailedStats=test.getClass().getAnnotation(TimedTest.class).includeDetailedStats();    }  } catch (  SecurityException e) {  }  if (mIsTimedTest && mIncludeDetailedStats) {    mPerfCollector.beginSnapshot("");  } else   if (mIsTimedTest) {    mPerfCollector.startTiming("");  }}  }
class C{  public String consumeTagName(){  int start=pos;  while (!isEmpty() && (matchesWord() || matchesAny(':','_','-')))   pos++;  return queue.substring(start,pos);}  }
class C{  public boolean checkPrefLevels(List lst){  for (int i=0; i < lst.size(); i++) {    String value=((String)lst.get(i));    if (value.trim().equals(Preference.BLANK_PREF_VALUE)) {      return false;    }  }  return true;}  }
class C{  public void tagSoundStreamHead(int playbackFrequency,boolean playback16bit,boolean playbackStereo,int streamFormat,int streamFrequency,boolean stream16bit,boolean streamStereo,int averageSampleCount) throws IOException {  if (tags != null) {    tags.tagSoundStreamHead(playbackFrequency,playback16bit,playbackStereo,streamFormat,streamFrequency,stream16bit,streamStereo,averageSampleCount);  }}  }
class C{  public static Properties toProperties(JSONObject jo) throws JSONException {  Properties properties=new Properties();  if (jo != null) {    Iterator<String> keys=jo.keys();    while (keys.hasNext()) {      String name=keys.next();      properties.put(name,jo.getString(name));    }  }  return properties;}  }
class C{  public static FloatFloatFunction createFloatFloatFunction(String functionName){  if (functionName.equalsIgnoreCase(SquaredError.class.getSimpleName())) {    return new SquaredError();  } else   if (functionName.equalsIgnoreCase(CrossEntropy.class.getSimpleName())) {    return new CrossEntropy();  } else   if (functionName.equalsIgnoreCase(CategoricalCrossEntropy.class.getSimpleName())) {    return new CategoricalCrossEntropy();  }  throw new IllegalArgumentException(String.format("No double double function with name '%s' exists.",functionName));}  }
class C{  public DefaultHttpResponseFactory(ReasonPhraseCatalog catalog){  if (catalog == null) {    throw new IllegalArgumentException("Reason phrase catalog must not be null.");  }  this.reasonCatalog=catalog;}  }
class C{  public static String normalizeFilename(final String file){  if (file.startsWith("//")) {    if (Cfg.DEBUG) {      Check.log(TAG + " normalizeFilename: " + file);    }    return file.substring(1);  } else {    return file;  }}  }
class C{  private void generateTerrain(ICubePrimer cube,double[][][] input,int cubeX,int cubeY,int cubeZ){  int xSteps=X_SECTION_SIZE - 1;  int ySteps=Y_SECTION_SIZE - 1;  int zSteps=Z_SECTION_SIZE - 1;  for (int noiseX=0; noiseX < X_SECTIONS - 1; noiseX++) {    for (int noiseZ=0; noiseZ < Z_SECTIONS - 1; noiseZ++) {      for (int noiseY=0; noiseY < Y_SECTIONS - 1; noiseY++) {        double x0y0z0=input[noiseX][noiseY][noiseZ];        double x0y0z1=input[noiseX][noiseY][noiseZ + 1];        double x1y0z0=input[noiseX + 1][noiseY][noiseZ];        double x1y0z1=input[noiseX + 1][noiseY][noiseZ + 1];        double x0y1z0=input[noiseX][noiseY + 1][noiseZ];        double x0y1z1=input[noiseX][noiseY + 1][noiseZ + 1];        double x1y1z0=input[noiseX + 1][noiseY + 1][noiseZ];        double x1y1z1=input[noiseX + 1][noiseY + 1][noiseZ + 1];        for (int x=0; x < xSteps; x++) {          int xRel=noiseX * xSteps + x;          double xd=(double)x / xSteps;          double xy0z0=lerp(xd,x0y0z0,x1y0z0);          double xy0z1=lerp(xd,x0y0z1,x1y0z1);          double xy1z0=lerp(xd,x0y1z0,x1y1z0);          double xy1z1=lerp(xd,x0y1z1,x1y1z1);          for (int z=0; z < zSteps; z++) {            int zRel=noiseZ * zSteps + z;            double zd=(double)z / zSteps;            double xy0z=lerp(zd,xy0z0,xy0z1);            double xy1z=lerp(zd,xy1z0,xy1z1);            for (int y=0; y < ySteps; y++) {              int yRel=noiseY * ySteps + y;              double yd=(double)y / ySteps;              double xyz=lerp(yd,xy0z,xy1z);              double xyz0=lerp(yd,xy0z0,xy1z0);              double xyz1=lerp(yd,xy0z1,xy1z1);              double x0y0z=lerp(zd,x0y0z0,x0y0z1);              double x0y1z=lerp(zd,x0y1z0,x0y1z1);              double x1y0z=lerp(zd,x1y0z0,x1y0z1);              double x1y1z=lerp(zd,x1y1z0,x1y1z1);              double x0yz=lerp(yd,x0y0z,x0y1z);              double x1yz=lerp(yd,x1y0z,x1y1z);              double xGrad=(x1yz - x0yz) / xSteps;              double yGrad=(xy1z - xy0z) / ySteps;              double zGrad=(xyz1 - xyz0) / zSteps;              IBlockState state=getBlockStateFor(localToBlock(cubeY,yRel),xyz,xGrad,yGrad,zGrad);              cube.setBlockState(xRel,yRel,zRel,state);            }          }        }      }    }  }}  }
class C{  protected static void initializeMessages(String bundleName,Class<? extends NLS> clazz){  try {    load(clazz);    if (!bundles.containsKey(bundleName))     bundles.put(bundleName,clazz);  } catch (  Throwable e) {  }}  }
class C{  private static int findFirstDupOrDrop(int[] reorder,int newArity){  final int BIT_LIMIT=63;  if (newArity < BIT_LIMIT) {    long mask=0;    for (int i=0; i < reorder.length; i++) {      int arg=reorder[i];      if (arg >= newArity) {        return reorder.length;      }      long bit=1L << arg;      if ((mask & bit) != 0) {        return i;      }      mask|=bit;    }    if (mask == (1L << newArity) - 1) {      assert (Long.numberOfTrailingZeros(Long.lowestOneBit(~mask)) == newArity);      return 0;    }    long zeroBit=Long.lowestOneBit(~mask);    int zeroPos=Long.numberOfTrailingZeros(zeroBit);    assert (zeroPos <= newArity);    if (zeroPos == newArity) {      return 0;    }    return ~zeroPos;  } else {    BitSet mask=new BitSet(newArity);    for (int i=0; i < reorder.length; i++) {      int arg=reorder[i];      if (arg >= newArity) {        return reorder.length;      }      if (mask.get(arg)) {        return i;      }      mask.set(arg);    }    int zeroPos=mask.nextClearBit(0);    assert (zeroPos <= newArity);    if (zeroPos == newArity) {      return 0;    }    return ~zeroPos;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:59.587 -0500",hash_original_method="91D0630D593C0E5EFA5BB0A713D23C43",hash_generated_method="C03ECE1CEE103510DDBEBF92F73191AD") public CharSequence loadDescription(PackageManager pm){  if (descriptionRes != 0) {    CharSequence label=pm.getText(packageName,descriptionRes,this);    if (label != null) {      return label;    }  }  return null;}  }
class C{  public boolean hasCcs(){  return hasRepeatingExtension(Cc.class);}  }
class C{  @Override public Generator<IPoint> construct(String[] args){  return new CircleGenerator(Integer.valueOf(args[0]));}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public Builder addCollectionItemClause(String collectionFieldName,String itemName){  return addFieldClause(QuerySpecification.buildCollectionItemName(collectionFieldName),itemName);}  }
class C{  @Override public void teardown(){}  }
class C{  public static boolean isArrayByteBase64(byte[] arrayOctect){  arrayOctect=discardWhitespace(arrayOctect);  int length=arrayOctect.length;  if (length == 0) {    return true;  }  for (int i=0; i < length; i++) {    if (!isBase64(arrayOctect[i])) {      return false;    }  }  return true;}  }
class C{  public static void printInstructions(IR ir){  SSADictionary dictionary=ir.HIRInfo.dictionary;  System.out.println("********* START OF IR DUMP in SSA FOR " + ir.method);  for (Enumeration<BasicBlock> be=ir.forwardBlockEnumerator(); be.hasMoreElements(); ) {    BasicBlock bb=be.nextElement();    for (Enumeration<Instruction> e=dictionary.getAllInstructions(bb); e.hasMoreElements(); ) {      Instruction s=e.nextElement();      System.out.print(s.getBytecodeIndex() + "\t" + s);      if (dictionary.defsHeapVariable(s) && s.operator() != PHI) {        System.out.print("  (Implicit Defs: ");        HeapOperand<?>[] defs=dictionary.getHeapDefs(s);        if (defs != null) {          for (          HeapOperand<?> def : defs)           System.out.print(def + " ");        }        System.out.print(" )");      }      if (dictionary.usesHeapVariable(s) && s.operator() != PHI) {        System.out.print("  (Implicit Uses: ");        HeapOperand<?>[] uses=dictionary.getHeapUses(s);        if (uses != null) {          for (          HeapOperand<?> use : uses)           System.out.print(use + " ");        }        System.out.print(" )");      }      System.out.print('\n');    }  }  System.out.println("*********   END OF IR DUMP in SSA FOR " + ir.method);}  }
class C{  @Override public AsciiForm withUppercasePropertyName(){  this.uppercasePropertyName=true;  return this;}  }
class C{  public OMRect(int px1,int py1,int px2,int py2){  super(RENDERTYPE_XY,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  x1=px1;  y1=py1;  x2=px2;  y2=py2;}  }
class C{  public String testDestination(Location destination,Track track){  return rsTestDestination(destination,track);}  }
class C{  public boolean hasString(){  return true;}  }
class C{  protected void tagHandlerClassicSupportMethods() throws Exception {  writer.writeLineComment("Methods From TagSupport");  writer.fwrite("public int doStartTag() throws JspException {\n");  writer.indent();  writeSuperTagCallBody("doStartTag",true);  writer.outdent();  writer.fwrite("}\n\n");  writer.fwrite("public int doEndTag() throws JspException {\n");  writer.indent();  writeSuperTagCallBody("doEndTag",true);  writer.outdent();  writer.fwrite("}\n\n");}  }
class C{  public void beginSignleAction(WebRequest theRequest){  theRequest.addParameter("button1","button1");}  }
class C{  public T caseAnonymous_parameter_1_(Anonymous_parameter_1_ object){  return null;}  }
class C{  public int read(byte[] buf,int off,int len) throws IOException {  ensureOpen();  if (eos) {    return -1;  }  int n=super.read(buf,off,len);  if (n == -1) {    if (readTrailer())     eos=true; else     return this.read(buf,off,len);  } else {    crc.update(buf,off,n);  }  return n;}  }
class C{  public RankingImageListProvider inWeeks(int weeks){  mTime=Integer.toString(weeks) + "w";  return this;}  }
class C{  public boolean isTakeOverable(){  if (isTakeoverOverride != null) {    return isTakeoverOverride;  } else {    boolean allowTakeover=Raptor.getInstance().getPreferences().getBoolean(PreferenceKeys.BOARD_TAKEOVER_INACTIVE_GAMES);    ChessBoardController controller=getController();    return !(!allowTakeover || controller == null) && controller instanceof InactiveController;  }}  }
class C{  public static void decode(BinaryVariable binary,RealVariable real){  int numberOfBits=binary.getNumberOfBits();  double lowerBound=real.getLowerBound();  double upperBound=real.getUpperBound();  long index=decode(binary);  double scale=index / (double)((1L << numberOfBits) - 1);  double value=lowerBound + (upperBound - lowerBound) * scale;  real.setValue(value);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public void removeAll(String key,List<?> objects){  if (key == null) {    throw new IllegalArgumentException("Key cannot be null");  }  if (values.containsKey(key)) {    SabresValue sabresValue=values.get(key);    if (!(sabresValue instanceof ListValue)) {      throw new IllegalArgumentException("removeAll operation is only permitted on list values");    }    ListValue listValue=(ListValue)sabresValue;    for (    Object o : objects) {      listValue.remove(o);    }  }}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(extras.get("VT"));    setRetryUntil(extras.get("GT"));    setMaxRetries(extras.get("GR"));  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  public void test_simpleRemovalWithRawRecords(){  final MemStore store=new MemStore(DirectBufferPool.INSTANCE,5);  try {    final Random r=new Random();    final HTreeIndexMetadata metadata=new HTreeIndexMetadata(UUID.randomUUID());    metadata.setAddressBits(2);    metadata.setRawRecords(true);    metadata.setMaxRecLen(64);    final HTree htree=HTree.create(store,metadata);    assertEquals(64,htree.getMaxRecLen());    assertTrue(htree.rawRecords);    final byte[] key=new byte[]{1,2,3};    final byte[] val=new byte[htree.getMaxRecLen() + 1];    r.nextBytes(val);    final int ninserts=15;    for (int i=0; i < ninserts; i++) {      htree.insert(key,val);    }    assertEquals(ninserts,htree.getEntryCount());    TestCase3.assertEquals(val,htree.lookupFirst(key));    assertEquals(ninserts,htree.removeAll(key));    assertEquals(0,htree.getEntryCount());    TestCase3.assertEquals(null,htree.lookupFirst(key));  }  finally {    store.destroy();  }}  }
class C{  public static final String md5(String s) throws UtilException {  char hexDigits[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};  try {    byte[] btInput=s.getBytes();    MessageDigest mdInst=MessageDigest.getInstance("MD5");    mdInst.update(btInput);    byte[] md=mdInst.digest();    int j=md.length;    char str[]=new char[j * 2];    int k=0;    for (int i=0; i < j; i++) {      byte byte0=md[i];      str[k++]=hexDigits[byte0 >>> 4 & 0xf];      str[k++]=hexDigits[byte0 & 0xf];    }    return new String(str);  } catch (  Exception e) {    throw new UtilException(ErrorCodeDef.SYSTEM_ERROR_10001);  }}  }
class C{  public String create() throws SaaSApplicationException {  if (serviceForCreation == null || selectedTechService == null) {    return OUTCOME_ERROR;  }  boolean isPublicService=serviceForCreation.isPublicService();  serviceForCreation=new ServiceDetails(cleanupParameter(serviceForCreation.getVoServiceDetails()));  selectedService=new ServiceDetails(getProvisioningService().createService(selectedTechService,serviceForCreation.getVoServiceDetails(),getImageUploader().getVOImageResource()));  selectedService.setPublicService(isPublicService);  boolean addedMsg=false;  List<VOCategory> categories=selectedCategoryToVOUnwrapper(this.categorySelection);  try {    marketplaceBean.publishService(selectedService,categories);  } catch (  ObjectNotFoundException e) {    if (ClassEnum.MARKETPLACE == e.getDomainObjectClassEnum()) {      addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_SERVICE_SAVED_MARKETPLACE_DELETED,new String[]{selectedService.getServiceId(),marketplaceBean.getMarketplace().getName(),marketplaceBean.getMarketplace().getMarketplaceId()});      addedMsg=true;    } else {      throw e;    }  }catch (  PublishingToMarketplaceNotPermittedException e) {    addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_SERVICE_SAVED_PUBLISHING_NOT_PERMITTED,new String[]{selectedService.getServiceId(),marketplaceBean.getMarketplace().getName(),marketplaceBean.getMarketplace().getMarketplaceId()});    addedMsg=true;  }  if (!addedMsg) {    addMessage(null,FacesMessage.SEVERITY_INFO,INFO_SERVICE_CREATED,selectedService.getServiceId());  }  sessionBean.setSelectedServiceKeyForSupplier(Long.valueOf(selectedService.getKey()));  prepareParameters();  services=null;  menuBean.setCurrentPageLink(MenuBean.LINK_SERVICE_EDIT);  if (logger.isDebugLoggingEnabled()) {  }  return OUTCOME_SUCCESS;}  }
class C{  public static boolean exportMaskInVarray(DbClient dbClient,ExportMask exportMask,URI varrayURI){  if (exportMask.getStoragePorts() == null || exportMask.getStoragePorts().isEmpty()) {    return false;  }  List<URI> targetURIs=StringSetUtil.stringSetToUriList(exportMask.getStoragePorts());  List<StoragePort> ports=dbClient.queryObject(StoragePort.class,targetURIs);  for (  StoragePort port : ports) {    if (port.getTaggedVirtualArrays() == null || !port.getTaggedVirtualArrays().contains(varrayURI.toString())) {      return false;    }  }  return true;}  }
class C{  public NotificationChain basicSetSuperClassRef(ParameterizedTypeRef newSuperClassRef,NotificationChain msgs){  ParameterizedTypeRef oldSuperClassRef=superClassRef;  superClassRef=newSuperClassRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.TCLASS__SUPER_CLASS_REF,oldSuperClassRef,newSuperClassRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void releaseConnection(){  LOG.trace("enter HttpConnection.releaseConnection()");  if (locked) {    LOG.debug("Connection is locked.  Call to releaseConnection() ignored.");  } else   if (httpConnectionManager != null) {    LOG.debug("Releasing connection back to connection manager.");    httpConnectionManager.releaseConnection(this);  } else {    LOG.warn("HttpConnectionManager is null.  Connection cannot be released.");  }}  }
class C{  public boolean multipliesWith(FloatMatrix a){  return columns == a.rows;}  }
class C{  public NamedSmartTreeNode(String name){  super(name);  this.name=name;}  }
class C{  private List<Relation> loadDynamicRelations(Universe root,List<Domain> domains,Map<Table,Domain> coverage,List<Relation> concretes){  Project project=root.getProject();  HashSet<ExpressionAST> dedup=new HashSet<>();  HashSet<String> naturals=new HashSet<>();  List<Relation> relations=new ArrayList<Relation>();  for (  Relation concrete : concretes) {    relations.add(concrete);    naturals.add(concrete.getOid());    if (concrete.getJoinExpression() != null) {      try {        ExpressionAST join=parseResilient(root,concrete,concretes);        dedup.add(join);      } catch (      ScopeException e) {      }    }  }  for (  Domain domain : domains) {    try {      if (!domain.getOptions().getReinjected() && !domain.getOptions().getAlink()) {        Table table=root.getTable(domain);        HashMap<String,NaturalRelation> dedupLinks=new HashMap<>();        for (        ForeignKey fk : getForeignKeys(table)) {          Table targetTable=fk.getPrimaryTable();          Domain target=coverage.get(targetTable);          if (target != null) {            String link=genRelationLinkId(project,domain,target);            String id=link + ":" + fk.getName();            String digest=digest(id);            Relation relation=null;            NaturalRelation samesame=null;            if (!naturals.contains(digest)) {              String leftName=domain.getName();              String rightName=target.getName();              samesame=dedupLinks.get(link);              if (samesame != null) {                leftName+="[" + fk.getName() + "]";                rightName+="[" + fk.getName() + "]";                if (samesame.first) {                  samesame.rel.setLeftName(samesame.rel.getLeftName() + "[" + samesame.fk.getName()+ "]");                  samesame.rel.setRightName(samesame.rel.getRightName() + "[" + samesame.fk.getName()+ "]");                }              }              RelationPK relationPk=new RelationPK(project.getId(),digest);              relation=new Relation(relationPk,domain.getId(),Cardinality.MANY,target.getId(),Cardinality.ZERO_OR_ONE,leftName,rightName,new Expression("'" + fk.getName() + "'"),true);              AccessRightsUtils.getInstance().setAccessRights(root.getContext(),relation,project);              try {                ExpressionAST check=root.getParser().parse(relation);                if (!dedup.contains(check)) {                  relations.add(relation);                }              } catch (              ScopeException e) {              }            }            dedupLinks.put(link,new NaturalRelation(relation,fk,relation != null && samesame == null));          }        }      } else {        domain.getOptions().getLinkSource();      }    } catch (    ScopeException e) {      logger.info(e.getMessage(),e);    }  }  return relations;}  }
class C{  private void addAndMeasureChild(final View child,final int layoutMode){  LayoutParams params=child.getLayoutParams();  if (params == null) {    params=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);  }  final int index=layoutMode == LAYOUT_MODE_ABOVE ? 0 : -1;  child.setDrawingCacheEnabled(true);  addViewInLayout(child,index,params,true);  final int itemWidth=(int)(getWidth() * ITEM_WIDTH);  child.measure(MeasureSpec.EXACTLY | itemWidth,MeasureSpec.UNSPECIFIED);}  }
class C{  public void cancel(int id){  String pkg=mContext.getPackageName();  try {    sService.cancelLiveLockScreen(pkg,id,UserHandle.myUserId());  } catch (  RemoteException e) {    logServiceException(e);  }}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  byte[] objBytes=decode(encodedObject);  java.io.ByteArrayInputStream bais=null;  java.io.ObjectInputStream ois=null;  Object obj=null;  try {    bais=new java.io.ByteArrayInputStream(objBytes);    ois=new java.io.ObjectInputStream(bais);    obj=ois.readObject();  } catch (  java.io.IOException e) {    throw e;  }catch (  java.lang.ClassNotFoundException e) {    throw e;  } finally {    try {      bais.close();    } catch (    Exception e) {    }    try {      ois.close();    } catch (    Exception e) {    }  }  return obj;}  }
class C{  public static void moveDown(JList list){  if (canMoveDown(list))   moveItems(list,1,MOVE_DOWN);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.TAG__TITLE:    setTitle((TagTitle)newValue);  return;case DomPackage.TAG__VALUES:getValues().clear();getValues().addAll((Collection<? extends TagValue>)newValue);return;case DomPackage.TAG__TAG_DEFINITION:setTagDefinition((ITagDefinition)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {}  }
class C{  public void writeSpeedCounts(String outputFolder){  String filename=outputFolder + (outputFolder.endsWith("/") ? "" : "/") + "speedClassCounts.csv";  LOG.info("Writing the speed class counts to " + filename);  BufferedWriter bw=IOUtils.getBufferedWriter(filename);  try {    bw.write("speedClass,count");    bw.newLine();    for (int i=0; i < this.speedObservations.length; i++) {      bw.write(String.format("%d,%d\n",i,this.speedObservations[i]));    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot write to " + filename);  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close " + filename);    }  }  LOG.info("Done writing the speed class counts.");}  }
class C{  private HashMapEntry<K,V>[] makeTable(int newCapacity){  @SuppressWarnings("unchecked") HashMapEntry<K,V>[] newTable=(HashMapEntry<K,V>[])new HashMapEntry[newCapacity];  table=newTable;  threshold=(newCapacity >> 1) + (newCapacity >> 2);  return newTable;}  }
class C{  protected static String quoteArray(String[] s){  return StringUtils.quoteJavaStringArray(s);}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  boolean add(String srcFilename,int srcLine,int dstLine,boolean isPreferLast){  if (_srcFilename != null && (!_srcFilename.equals(srcFilename) || srcFilename == null))   return false;  if (dstLine <= _dstLine) {    if (!isPreferLast)     return true; else     if (_dstIncrement == 1 && _repeat == 1) {      _srcLine=srcLine;      return true;    } else     if (_repeat > 1) {      _repeat--;      return false;    } else     if (_dstIncrement > 1) {      _dstIncrement--;      return false;    } else     return true;  }  if (srcLine == _srcLine) {    _dstIncrement=dstLine - _dstLine + 1;    return true;  } else   if (dstLine - _dstLine == (srcLine - _srcLine) * _dstIncrement) {    _repeat=srcLine - _srcLine + 1;    return true;  } else   if (srcLine == _srcLine + 1 && _repeat == 1) {    _dstIncrement=dstLine - _dstLine;    return false;  }  return false;}  }
class C{  public boolean hasMore(){  return this.first != null;}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  setMeasuredDimension((int)Math.min(MeasureSpec.getSize(widthMeasureSpec),halfWidth * 2),(int)Math.min(MeasureSpec.getSize(heightMeasureSpec),height));}  }
class C{  public static void deleteViews(final Window parent,final IViewContainer viewContainer,final INaviView[] views){  if (CMessageBox.showYesNoQuestion(parent,String.format("Do you really want to delete the following views?\n\n%s",CNameListGenerators.getNameList(views))) == JOptionPane.YES_OPTION) {    for (    final INaviView view : views) {      try {        viewContainer.deleteView(view);      } catch (      final CouldntDeleteException exception) {        CUtilityFunctions.logException(exception);        final String innerMessage="E00148: " + "Could not delete view";        final String innerDescription=CUtilityFunctions.createDescription(String.format("The view '%s' could not be deleted.",view.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The view was not deleted and can still be used."});        NaviErrorDialog.show(parent,innerMessage,innerDescription,exception);      }    }  }}  }
class C{  public void resumeAll() throws SchedulerException {  sched.resumeAll();}  }
class C{  public double ln(final int n){  check(n);  if (n <= tabulated)   return Math.log(firstFactorials[n]);  return gammaFunction.logValue(n + 1);}  }
class C{  public static void chunkTaskSync(RegionWrapper region,final RunnableVal<int[]> task){  final int p1x=region.minX;  final int p1z=region.minZ;  final int p2x=region.maxX;  final int p2z=region.maxZ;  final int bcx=p1x >> 4;  final int bcz=p1z >> 4;  final int tcx=p2x >> 4;  final int tcz=p2z >> 4;  task.value=new int[7];  for (int x=bcx; x <= tcx; x++) {    for (int z=bcz; z <= tcz; z++) {      task.value[0]=x;      task.value[1]=z;      task.value[2]=task.value[0] << 4;      task.value[3]=task.value[1] << 4;      task.value[4]=task.value[2] + 15;      task.value[5]=task.value[3] + 15;      task.value[6]=0;      if (task.value[0] == bcx) {        task.value[2]=p1x;        task.value[6]=1;      }      if (task.value[0] == tcx) {        task.value[4]=p2x;        task.value[6]=1;      }      if (task.value[1] == bcz) {        task.value[3]=p1z;        task.value[6]=1;      }      if (task.value[1] == tcz) {        task.value[5]=p2z;        task.value[6]=1;      }      task.run();    }  }}  }
class C{  protected InfoModelPropertySourceImpl(){  super();}  }
class C{  public DrawerBuilder withCustomView(@NonNull View customView){  this.mCustomView=customView;  return this;}  }
class C{  protected final void onError(final T_State state,final Error error,final String eventName){  final Object[] args={eventName,state};  final String message=error.getDescription(args);  getObserver().onError(this,error,message);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String reverseWords(String s){  if (s == null || s.length() == 0)   return "";  String res="";  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == ' ')     continue; else {      StringBuilder word=new StringBuilder();      while (i < s.length()) {        c=s.charAt(i);        if (c == ' ')         break;        word.append(c);        i++;      }      res=res.length() == 0 ? word.toString() : word.toString() + " " + res;      i--;    }  }  return res;}  }
class C{  protected int sizeof(Object o) throws IllegalArgumentException {  return basicSizeof(o,this.sizer);}  }
class C{  public static String buildSelectorFromElementAndChildren(String elementName,Collection<String> childrenList,boolean hasChild){  StringBuilder selector=new StringBuilder();  boolean isFirstElement=true;  for (  String child : childrenList) {    if (!isFirstElement) {      selector.append(SPACE);      selector.append(COMMA);      selector.append(SPACE);    }    selector.append(elementName);    if (!hasChild) {      selector.append(NOT_PREFIX);    }    selector.append(HAS_PREFIX);    selector.append(child);    selector.append(CLOSE_PARENTHESE);    if (!hasChild) {      selector.append(CLOSE_PARENTHESE);    }    isFirstElement=false;  }  return selector.toString();}  }
class C{  public JSDocContext(TemplateContextType type,IDocument document,Position completionPosition){  super(type,document,completionPosition);}  }
class C{  public void addLocation(Where location){  getLocations().add(location);}  }
class C{  public final void test_chooseEngineClientAlias(){  X509ExtendedKeyManager km=new MyX509ExtendedKeyManager();  if (km.chooseEngineClientAlias(null,null,null) != null) {    fail("non null result");  }}  }
class C{  @Override public Instances generateExamples() throws Exception {  Instances result;  int i;  result=new Instances(m_DatasetFormat,0);  m_Random=new Random(getSeed());  for (i=0; i < getNumExamplesAct(); i++) {    result.add(generateExample());  }  return result;}  }
class C{  public static long parseHexLong(String s,boolean ignoreTrailingChars){  long value=0;  if (s == null) {    return value;  }  if (s.startsWith("0x")) {    s=s.substring(2);  }  if (ignoreTrailingChars && s.length() > 0) {    for (int i=0; i < s.length(); i++) {      char c=s.charAt(i);      if ("0123456789abcdefABCDEF".indexOf(c) < 0) {        s=s.substring(0,i);        break;      }    }  }  value=Long.parseLong(s,16);  return value;}  }
class C{  public double distance(final double x,final double y,final double z){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  final double dz=(double)this.z - z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  @Override public Operator cloneOperator(String name,boolean forParallelExcecution){  OperatorChain clone=(OperatorChain)super.cloneOperator(name,forParallelExcecution);  if (areSubprocessesExtendable()) {    while (clone.getNumberOfSubprocesses() < getNumberOfSubprocesses()) {      clone.addSubprocess(clone.getNumberOfSubprocesses());    }  }  for (int i=0; i < subprocesses.length; i++) {    clone.subprocesses[i].cloneExecutionUnitFrom(this.subprocesses[i],forParallelExcecution);  }  return clone;}  }
class C{  public IntIterator rows(Predicate filter){  return FilterIteratorFactory.rows(this,filter);}  }
class C{  public void initOutBuffer(Object obj){  collector().initOutBuffer(getRuleName(),obj);}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","cdut");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void handleSingleOutputJobs(ArrayList<Lop> execNodes,ArrayList<ArrayList<Lop>> jobNodes,ArrayList<Lop> finishedNodes) throws LopsException {  ArrayList<Lop> nodesWithUnfinishedOutputs=new ArrayList<Lop>();  int[] jobIndices={JobType.MMCJ.getId()};  Lop.Type[] lopTypes={Lop.Type.MMCJ};  for (int jobi=0; jobi < jobIndices.length; jobi++) {    int jindex=jobIndices[jobi];    if (!jobNodes.get(jindex).isEmpty()) {      ArrayList<Lop> vec=jobNodes.get(jindex);      for (int i=0; i < vec.size(); i++) {        Lop node=vec.get(i);        if (node.getExecLocation() == ExecLocation.MapOrReduce || node.getExecLocation() == ExecLocation.Map) {          Lop MRparent=getParentNode(node,execNodes,ExecLocation.MapAndReduce);          if (MRparent != null && MRparent.getType() == lopTypes[jobi]) {            int numParents=node.getOutputs().size();            if (numParents > 1) {              for (int j=0; j < numParents; j++) {                if (!finishedNodes.contains(node.getOutputs().get(j)))                 nodesWithUnfinishedOutputs.add(node);              }            }          }        }      }      for (      Lop node : vec) {        if (node.getExecLocation() == ExecLocation.MapOrReduce || node.getExecLocation() == ExecLocation.Map) {          if (nodesWithUnfinishedOutputs.contains(node))           finishedNodes.remove(node);          if (hasParentNode(node,nodesWithUnfinishedOutputs))           finishedNodes.remove(node);        }      }    }  }}  }
class C{  protected SSLContextImpl(DefaultSSLContextImpl dummy) throws GeneralSecurityException, IOException {synchronized (DefaultSSLContextImpl.class) {    if (DEFAULT_SSL_CONTEXT_IMPL == null) {      clientSessionContext=new ClientSessionContext();      serverSessionContext=new ServerSessionContext();      DEFAULT_SSL_CONTEXT_IMPL=(DefaultSSLContextImpl)this;    } else {      clientSessionContext=DEFAULT_SSL_CONTEXT_IMPL.engineGetClientSessionContext();      serverSessionContext=DEFAULT_SSL_CONTEXT_IMPL.engineGetServerSessionContext();    }    sslParameters=new SSLParametersImpl(DEFAULT_SSL_CONTEXT_IMPL.getKeyManagers(),DEFAULT_SSL_CONTEXT_IMPL.getTrustManagers(),null,clientSessionContext,serverSessionContext);  }}  }
class C{  public boolean schedule(E e){  return super.schedule(e);}  }
class C{  public boolean deleteAll(){  return dbHelper.getWritableDatabase().delete(tableName,"1",null) > 0;}  }
class C{  public boolean isRunning(){  return started;}  }
class C{  public void onPackageRemovedAllUsers(String packageName,int uid){}  }
class C{  public static Statement createStatement(){  return createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY,null);}  }
class C{  private IgniteConfiguration gridConfiguration(boolean dfltGridName,boolean dfltIgfsName) throws Exception {  IgniteConfiguration cfg=super.getConfiguration(dfltGridName ? null : GRID_NAME);  cfg.setLocalHost("127.0.0.1");  cfg.setConnectorConfiguration(null);  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(IP_FINDER);  cfg.setDiscoverySpi(discoSpi);  TcpCommunicationSpi commSpi=new TcpCommunicationSpi();  commSpi.setSharedMemoryPort(-1);  cfg.setCommunicationSpi(commSpi);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("replicated");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration dataCacheCfg=defaultCacheConfiguration();  dataCacheCfg.setName("partitioned");  dataCacheCfg.setCacheMode(PARTITIONED);  dataCacheCfg.setNearConfiguration(null);  dataCacheCfg.setWriteSynchronizationMode(FULL_SYNC);  dataCacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));  dataCacheCfg.setBackups(0);  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);  cfg.setCacheConfiguration(metaCacheCfg,dataCacheCfg);  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("partitioned");  igfsCfg.setMetaCacheName("replicated");  igfsCfg.setName(dfltIgfsName ? null : IGFS_NAME);  igfsCfg.setPrefetchBlocks(1);  igfsCfg.setDefaultMode(PRIMARY);  IgfsIpcEndpointConfiguration endpointCfg=new IgfsIpcEndpointConfiguration();  endpointCfg.setType(IgfsIpcEndpointType.TCP);  endpointCfg.setPort(DFLT_IPC_PORT);  igfsCfg.setIpcEndpointConfiguration(endpointCfg);  igfsCfg.setManagementPort(-1);  igfsCfg.setBlockSize(512 * 1024);  cfg.setFileSystemConfiguration(igfsCfg);  return cfg;}  }
class C{  private void replaceAllNullsWithEmptyString(List<String> list){  for (int i=0; i < list.size(); i++) {    if (list.get(i) == null) {      list.set(i,"");    }  }}  }
class C{  public ProducesRequestCondition(String[] produces,String[] headers){  this(produces,headers,null);}  }
